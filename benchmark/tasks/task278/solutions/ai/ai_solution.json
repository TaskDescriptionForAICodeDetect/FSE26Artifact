[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\n#define EPS 1e-8\n\ntypedef struct {\n    int h, m, s;\n} Time;\n\nTime find_next_time(int h, int m, int s) {\n    Time t = {h, m, s};\n    while (1) {\n        double total_seconds = t.h * 3600 + t.m * 60 + t.s;\n        double hour_angle = fmod(total_seconds * 360.0 / 43200.0, 360.0);\n        double minute_angle = fmod(total_seconds * 360.0 / 3600.0, 360.0);\n        double second_angle = fmod(total_seconds * 360.0 / 60.0, 360.0);\n\n        double diff_hm = fabs(hour_angle - minute_angle);\n        diff_hm = fmin(diff_hm, 360.0 - diff_hm);\n        double diff_ms = fabs(minute_angle - second_angle);\n        diff_ms = fmin(diff_ms, 360.0 - diff_ms);\n        double diff_hs = fabs(hour_angle - second_angle);\n        diff_hs = fmin(diff_hs, 360.0 - diff_hs);\n\n        if (diff_hm > EPS && diff_ms > EPS && diff_hs > EPS) {\n            double angle1 = fabs(second_angle - hour_angle);\n            angle1 = fmin(angle1, 360.0 - angle1);\n            double angle2 = fabs(second_angle - minute_angle);\n            angle2 = fmin(angle2, 360.0 - angle2);\n            if (fabs(angle1 - angle2) < EPS) {\n                return t;\n            }\n        }\n\n        t.s++;\n        if (t.s >= 60) {\n            t.s = 0;\n            t.m++;\n            if (t.m >= 60) {\n                t.m = 0;\n                t.h++;\n            }\n        }\n    }\n}\n\nint main() {\n    int h, m, s;\n    while (scanf(\"%d %d %d\", &h, &m, &s) == 3) {\n        if (h == -1 && m == -1 && s == -1) break;\n        Time result = find_next_time(h, m, s);\n        printf(\"%02d:%02d:%02d\\n\", result.h, result.m, result.s);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 20:53:11"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <vector>\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nstruct Time {\n    int h, m, s;\n    Time(int h=0, int m=0, int s=0) : h(h), m(m), s(s) {}\n    void normalize() {\n        m += s / 60;\n        s %= 60;\n        h += m / 60;\n        m %= 60;\n        h %= 12;\n    }\n    double toSeconds() const {\n        return h * 3600 + m * 60 + s;\n    }\n    void addSecond() {\n        s++;\n        normalize();\n    }\n};\n\ndouble angle(double t, double period) {\n    double a = fmod(t / period * 360, 360);\n    return a > 180 ? 360 - a : a;\n}\n\nbool isEqualAngle(double a1, double a2) {\n    double diff = fabs(a1 - a2);\n    return diff < EPS || fabs(diff - 360) < EPS;\n}\n\nbool noOverlap(double a1, double a2, double a3) {\n    return !(isEqualAngle(a1, a2) || isEqualAngle(a1, a3) || isEqualAngle(a2, a3));\n}\n\nbool checkCondition(const Time &t) {\n    double totalSec = t.toSeconds();\n    double aSec = angle(totalSec, 60);\n    double aMin = angle(totalSec / 60, 60);\n    double aHour = angle(totalSec / 3600, 12);\n\n    if (!noOverlap(aSec, aMin, aHour)) return false;\n\n    double diff1 = fabs(aSec - aMin);\n    double diff2 = fabs(aSec - aHour);\n    diff1 = min(diff1, 360 - diff1);\n    diff2 = min(diff2, 360 - diff2);\n\n    return fabs(diff1 - diff2) < EPS;\n}\n\nvoid solve(int h, int m, int s) {\n    Time t(h, m, s);\n    while (true) {\n        if (checkCondition(t)) {\n            cout << setw(2) << setfill('0') << t.h << \":\"\n                 << setw(2) << setfill('0') << t.m << \":\"\n                 << setw(2) << setfill('0') << t.s << endl;\n            return;\n        }\n        t.addSecond();\n    }\n}\n\nint main() {\n    int h, m, s;\n    while (cin >> h >> m >> s) {\n        if (h == -1 && m == -1 && s == -1) break;\n        solve(h, m, s);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 20:53:36"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class ClockHands {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextInt()) {\n            int H = scanner.nextInt();\n            int M = scanner.nextInt();\n            int S = scanner.nextInt();\n            if (H == -1 && M == -1 && S == -1) break;\n\n            double currentTime = H * 3600 + M * 60 + S;\n            double targetTime = findTargetTime(currentTime);\n            \n            int totalSeconds = (int) Math.round(targetTime);\n            int hours = totalSeconds / 3600 % 12;\n            int remaining = totalSeconds % 3600;\n            int minutes = remaining / 60;\n            int seconds = remaining % 60;\n            \n            System.out.printf(\"%02d:%02d:%02d\\n\", hours, minutes, seconds);\n        }\n        scanner.close();\n    }\n\n    private static double findTargetTime(double currentTime) {\n        for (double t = currentTime; t <= currentTime + 43200; t += 1.0 / 120) {\n            double hAngle = (t / 120) % 360;\n            double mAngle = (t / 10) % 360;\n            double sAngle = (t * 6) % 360;\n            \n            if (Math.abs(hAngle - mAngle) < 1e-6 || Math.abs(hAngle - sAngle) < 1e-6 || Math.abs(mAngle - sAngle) < 1e-6) {\n                continue;\n            }\n            \n            double diff1 = (sAngle - hAngle + 360) % 360;\n            double diff2 = (sAngle - mAngle + 360) % 360;\n            \n            if (Math.abs(diff1 - diff2) < 1e-6 || Math.abs(diff1 + diff2 - 360) < 1e-6) {\n                return t;\n            }\n        }\n        return currentTime;\n    }\n}",
    "timestamp": "2025-08-05 20:53:56"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class AnalogClock {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int datasets = scanner.nextInt();\n        \n        for (int d = 0; d < datasets; d++) {\n            int startHour = scanner.nextInt();\n            int startMinute = scanner.nextInt();\n            int startSecond = scanner.nextInt();\n            \n            System.out.println(findNextTime(startHour, startMinute, startSecond));\n        }\n        \n        scanner.close();\n    }\n    \n    static String findNextTime(int startHour, int startMinute, int startSecond) {\n        while (true) {\n            double secondAngle = startSecond * 6.0;\n            double minuteAngle = (startMinute + startSecond / 60.0) * 6.0;\n            double hourAngle = (startHour % 12 + startMinute / 60.0 + startSecond / 3600.0) * 30.0;\n            \n            if (!handsOverlap(secondAngle, minuteAngle, hourAngle) && \n                anglesEqual(secondAngle, minuteAngle, hourAngle)) {\n                return String.format(\"%02d:%02d:%02d\", startHour, startMinute, startSecond);\n            }\n            \n            startSecond++;\n            if (startSecond == 60) {\n                startSecond = 0;\n                startMinute++;\n                if (startMinute == 60) {\n                    startMinute = 0;\n                    startHour++;\n                }\n            }\n        }\n    }\n    \n    static boolean handsOverlap(double secondAngle, double minuteAngle, double hourAngle) {\n        return Math.abs(secondAngle - minuteAngle) < 0.001 ||\n               Math.abs(secondAngle - hourAngle) < 0.001 ||\n               Math.abs(minuteAngle - hourAngle) < 0.001;\n    }\n    \n    static boolean anglesEqual(double secondAngle, double minuteAngle, double hourAngle) {\n        double angle1 = Math.abs(secondAngle - minuteAngle);\n        double angle2 = Math.abs(secondAngle - hourAngle);\n        return Math.abs(angle1 - angle2) < 0.001;\n    }\n}",
    "timestamp": "2025-08-05 20:54:05"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\n#define EPS 1e-9\n\ndouble calculate_hand_angle(int hand, int hours, int minutes, int seconds) {\n    double angle;\n    if (hand == 0) {  // second hand\n        angle = seconds * 6.0;\n    } else if (hand == 1) {  // minute hand\n        angle = minutes * 6.0 + seconds * 0.1;\n    } else {  // hour hand\n        angle = (hours % 12) * 30.0 + minutes * 0.5;\n    }\n    return angle;\n}\n\nint check_conditions(int hours, int minutes, int seconds) {\n    double second_angle = calculate_hand_angle(0, hours, minutes, seconds);\n    double minute_angle = calculate_hand_angle(1, hours, minutes, seconds);\n    double hour_angle = calculate_hand_angle(2, hours, minutes, seconds);\n\n    // Check no two hands overlap\n    if (fabs(second_angle - minute_angle) < EPS || \n        fabs(second_angle - hour_angle) < EPS || \n        fabs(minute_angle - hour_angle) < EPS) {\n        return 0;\n    }\n\n    // Check angle between second hand and other hands is equal\n    double angle1 = fabs(second_angle - minute_angle);\n    double angle2 = fabs(second_angle - hour_angle);\n    \n    if (angle1 > 180) angle1 = 360 - angle1;\n    if (angle2 > 180) angle2 = 360 - angle2;\n\n    return fabs(angle1 - angle2) < EPS;\n}\n\nint main() {\n    int T;\n    scanf(\"%d\", &T);\n\n    while (T--) {\n        int hours, minutes, seconds;\n        scanf(\"%d %d %d\", &hours, &minutes, &seconds);\n\n        while (!check_conditions(hours, minutes, seconds)) {\n            seconds++;\n            if (seconds == 60) {\n                seconds = 0;\n                minutes++;\n                if (minutes == 60) {\n                    minutes = 0;\n                    hours++;\n                }\n            }\n        }\n\n        printf(\"%02d:%02d:%02d\\n\", hours, minutes, seconds);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 20:54:13"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\nusing namespace std;\n\nconst double PI = 3.14159265358979323846;\n\ndouble getAngle(int hand, int total) {\n    return (hand % total) * (360.0 / total);\n}\n\nbool checkHandsOverlap(double secondAngle, double minuteAngle, double hourAngle) {\n    return (abs(secondAngle - minuteAngle) < 0.001 || \n            abs(secondAngle - hourAngle) < 0.001 || \n            abs(minuteAngle - hourAngle) < 0.001);\n}\n\nbool checkEqualAngles(double secondAngle, double minuteAngle, double hourAngle) {\n    double angle1 = min({abs(secondAngle - minuteAngle), \n                         360 - abs(secondAngle - minuteAngle)});\n    double angle2 = min({abs(secondAngle - hourAngle), \n                         360 - abs(secondAngle - hourAngle)});\n    return abs(angle1 - angle2) < 0.001;\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    while (n--) {\n        int h, m, s;\n        cin >> h >> m >> s;\n\n        while (true) {\n            double secondAngle = getAngle(s, 60);\n            double minuteAngle = getAngle(m, 60) + secondAngle / 60.0;\n            double hourAngle = getAngle(h, 12) + minuteAngle / 30.0;\n\n            if (!checkHandsOverlap(secondAngle, minuteAngle, hourAngle) && \n                checkEqualAngles(secondAngle, minuteAngle, hourAngle)) {\n                cout << setfill('0') << setw(2) << h << \":\"\n                     << setfill('0') << setw(2) << m << \":\"\n                     << setfill('0') << setw(2) << s << endl;\n                break;\n            }\n\n            s++;\n            if (s == 60) {\n                s = 0;\n                m++;\n                if (m == 60) {\n                    m = 0;\n                    h++;\n                }\n            }\n        }\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 20:54:21"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "from math import isclose\n\ndef find_time(hh, mm, ss):\n    def get_angles(h, m, s):\n        angle_second = s * 6  # 360 / 60\n        angle_minute = m * 6 + s * 0.1  # 360 / 60 + 6 / 60 = 6 + 0.1\n        angle_hour = (h % 12) * 30 + m * 0.5 + s * (1/120)  # 360 / 12 + 30 / 60 + 0.5 / 60 = 30 + 0.5 + 1/120\n        return angle_second, angle_minute, angle_hour\n    \n    def are_two_angles_equal(angle1, angle2, angle3):\n        diff1 = abs(angle1 - angle2)\n        diff2 = abs(angle1 - angle3)\n        return isclose(diff1, diff2)\n    \n    def no_overlap(angle1, angle2, angle3):\n        return not (isclose(angle1, angle2) or isclose(angle1, angle3) or isclose(angle2, angle3))\n    \n    while True:\n        angles = get_angles(hh, mm, ss)\n        if are_two_angles_equal(angles[0], angles[1], angles[2]) and no_overlap(angles[0], angles[1], angles[2]):\n            return f\"{hh:02}:{mm:02}:{ss:02}\"\n        \n        ss += 1\n        if ss == 60:\n            ss = 0\n            mm += 1\n            if mm == 60:\n                mm = 0\n                hh += 1\n\ndef process_multiple_datasets(datasets):\n    results = []\n    \n    for hh, mm, ss in datasets:\n        results.append(find_time(hh, mm, ss))\n    \n    return results\n\ndatasets = [\n    (11, 59, 50),\n    (6, 34, 12),\n    (2, 3, 0)\n]\n\nresult_times = process_multiple_datasets(datasets)\nfor result in result_times:\n    print(result)",
    "timestamp": "2025-08-13 04:01:55"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class AnalogClockHandSolver {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            int hours = scanner.nextInt();\n            int minutes = scanner.nextInt();\n            int seconds = scanner.nextInt();\n            System.out.println(findTime(hours, minutes, seconds));\n        }\n        scanner.close();\n    }\n\n    private static String findTime(int hours, int minutes, int seconds) {\n        while (true) {\n            double hourAngle = (hours % 12) * 30 + minutes * 0.5 + seconds * (0.5 / 60);\n            double minuteAngle = minutes * 6 + seconds * 0.1;\n            double secondAngle = seconds * 6;\n\n            double angleDiffHrMin = Math.abs(hourAngle - minuteAngle);\n            double angleDiffHrSec = Math.abs(hourAngle - secondAngle);\n            double angleDiffMinSec = Math.abs(minuteAngle - secondAngle);\n\n            if (!(angleDiffHrMin < 1 || angleDiffHrSec < 1 || angleDiffMinSec < 1)) {\n                double angle1 = ((hourAngle + hourAngle) / 2) % 360;\n                double angle2 = ((minuteAngle + minuteAngle) / 2) % 360;\n                double angle3 = ((secondAngle + secondAngle) / 2) % 360;\n\n                if (Math.abs(angle1 - angle2) < 0.5 && Math.abs(angle1 - angle3) < 0.5) {\n                    return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n                }\n            }\n\n            seconds++;\n            if (seconds == 60) {\n                seconds = 0;\n                minutes++;\n            }\n            if (minutes == 60) {\n                minutes = 0;\n                hours++;\n            }\n        }\n    }\n}",
    "timestamp": "2025-08-13 04:01:59"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <math.h>\n\n#define EPSILON 1e-9\n\ntypedef struct {\n    int hours;\n    int minutes;\n    int seconds;\n} Time;\n\nvoid find_next_time_when_conditions_met(Time *time) {\n    while (1) {\n        double hours_angle = (time->hours % 12) * 30 + (time->minutes / 60.0) * 30 + (time->seconds / 3600.0) * 30;\n        double minutes_angle = time->minutes * 6 + (time->seconds / 60.0) * 6;\n        double seconds_angle = time->seconds * 6;\n\n        double angle_hour_second = fabs(hours_angle - seconds_angle);\n        double angle_minute_second = fabs(minutes_angle - seconds_angle);\n\n        if (angle_hour_second >= 180) angle_hour_second = 360 - angle_hour_second;\n        if (angle_minute_second >= 180) angle_minute_second = 360 - angle_minute_second;\n\n        if (fabs(angle_hour_second - angle_minute_second) < EPSILON && fabs(angle_hour_second) > EPSILON && fabs(angle_minute_second) > EPSILON) {\n            break;\n        }\n\n        time->seconds++;\n        if (time->seconds == 60) {\n            time->seconds = 0;\n            time->minutes++;\n            if (time->minutes == 60) {\n                time->minutes = 0;\n                time->hours++;\n            }\n        }\n    }\n}\n\nint main() {\n    int datasets;\n    scanf(\"%d\", &datasets);\n\n    while (datasets-- > 0) {\n        Time time;\n        scanf(\"%d %d %d\", &time.hours, &time.minutes, &time.seconds);\n\n        find_next_time_when_conditions_met(&time);\n\n        printf(\"%.2d:%.2d:%.2d\\n\", time.hours, time.minutes, time.seconds);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 04:02:04"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def calculate_hand_angles(hours, minutes, seconds):\n    hour_angle = (hours % 12 + minutes / 60 + seconds / 3600) * 30\n    minute_angle = (minutes + seconds / 60) * 6\n    second_angle = seconds * 6\n    return hour_angle, minute_angle, second_angle\n\ndef check_conditions(hour_angle, minute_angle, second_angle):\n    # Check no two hands overlap\n    angles = [hour_angle, minute_angle, second_angle]\n    if len(set(round(angle % 360, 6) for angle in angles)) < 3:\n        return False\n    \n    # Check if two angles between second hand and other hands are equal\n    angle1 = abs(second_angle - hour_angle)\n    angle2 = abs(second_angle - minute_angle)\n    angle1 = min(angle1, 360 - angle1)\n    angle2 = min(angle2, 360 - angle2)\n    \n    return abs(angle1 - angle2) < 0.000001\n\ndef solve_clock_problem():\n    t = int(input())\n    for _ in range(t):\n        h, m, s = map(int, input().split())\n        \n        while True:\n            hour_angle, minute_angle, second_angle = calculate_hand_angles(h, m, s)\n            \n            if check_conditions(hour_angle, minute_angle, second_angle):\n                print(f\"{h:02d}:{m:02d}:{s:02d}\")\n                break\n            \n            s += 1\n            if s == 60:\n                s = 0\n                m += 1\n            if m == 60:\n                m = 0\n                h += 1\n\nsolve_clock_problem()",
    "timestamp": "2025-08-13 04:02:18"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import math\n\ndef solve():\n    while True:\n        try:\n            h, m, s = map(int, input().split())\n        except:\n            break\n        \n        total_seconds = h * 3600 + m * 60 + s\n        found = False\n        \n        for delta in range(0, 12 * 3600 * 2):\n            current_total = total_seconds + delta\n            current_total %= 12 * 3600\n            current_h = current_total // 3600\n            current_total %= 3600\n            current_m = current_total // 60\n            current_s = current_total % 60\n            \n            # Calculate angles in 1/120th degree units to avoid floating point inaccuracies\n            s_angle = current_s * 360 * 120 // 60\n            m_angle = (current_m * 60 + current_s) * 360 * 120 // 3600\n            h_angle = (current_h % 12 * 3600 + current_m * 60 + current_s) * 360 * 120 // (12 * 3600)\n            \n            angles = [s_angle, m_angle, h_angle]\n            angles.sort()\n            \n            # Check no two hands overlap\n            if angles[0] == angles[1] or angles[1] == angles[2]:\n                continue\n            \n            # Calculate differences\n            diff1 = (angles[1] - angles[0]) % (360 * 120)\n            diff2 = (angles[2] - angles[1]) % (360 * 120)\n            \n            if diff1 == diff2:\n                found = True\n                print(f\"{current_h:02d}:{current_m:02d}:{current_s:02d}\")\n                break\n        \n        if not found:\n            # Should not happen as per problem statement, but handle just in case\n            print(\"00:00:00\")\n\nsolve()",
    "timestamp": "2025-08-13 04:02:34"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\nusing namespace std;\n\nconst double TOLERANCE = 1e-8;\nconst double FULL_CIRCLE = 360.0;\nconst double HOUR_DEGREE_PER_SEC = 1.0 / 120.0;\nconst double MINUTE_DEGREE_PER_SEC = 0.1;\nconst double SECOND_DEGREE_PER_SEC = 6.0;\n\ndouble normalize_angle(double angle) {\n    return angle - FULL_CIRCLE * floor(angle / FULL_CIRCLE);\n}\n\nbool are_angles_equal(double angle1, double angle2) {\n    return fabs(normalize_angle(angle1 - angle2)) < TOLERANCE;\n}\n\nbool no_overlap(double angle1, double angle2, double angle3) {\n    double a = normalize_angle(angle1 - angle2);\n    double b = normalize_angle(angle2 - angle3);\n    double c = normalize_angle(angle3 - angle1);\n    return a > TOLERANCE && b > TOLERANCE && c > TOLERANCE;\n}\n\nint main() {\n    int h, m, s;\n    while (cin >> h >> m >> s) {\n        long long total_seconds = h * 3600LL + m * 60LL + s;\n        \n        while (true) {\n            double seconds_angle = SECOND_DEGREE_PER_SEC * total_seconds;\n            double minutes_angle = MINUTE_DEGREE_PER_SEC * total_seconds;\n            double hours_angle = HOUR_DEGREE_PER_SEC * total_seconds;\n\n            double angle1 = fabs(normalize_angle(seconds_angle - minutes_angle));\n            double angle2 = fabs(normalize_angle(seconds_angle - hours_angle));\n\n            if (are_angles_equal(angle1, angle2) &&\n                no_overlap(seconds_angle, minutes_angle, hours_angle)) {\n                long long final_h = (total_seconds / 3600LL);\n                long long final_m = (total_seconds % 3600LL) / 60LL;\n                long long final_s = (total_seconds % 60LL);\n                cout << setw(2) << setfill('0') << final_h << \":\"\n                     << setw(2) << setfill('0') << final_m << \":\"\n                     << setw(2) << setfill('0') << final_s << endl;\n                break;\n            }\n\n            total_seconds++;\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 11:16:37"
  }
]