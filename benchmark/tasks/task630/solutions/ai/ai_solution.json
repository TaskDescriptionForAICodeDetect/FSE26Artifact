[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_SIZE 100000\n\ntypedef struct {\n    int data[MAX_SIZE];\n    int count[MAX_SIZE];\n    int size;\n} MultiSet;\n\nvoid initialize(MultiSet *s) {\n    s->size = 0;\n}\n\nint find_index(MultiSet *s, int value) {\n    for (int i = 0; i < s->size; i++) {\n        if (s->data[i] == value) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nvoid insert(MultiSet *s, int value) {\n    int index = find_index(s, value);\n    if (index != -1) {\n        s->count[index]++;\n    } else {\n        int j;\n        for (j = s->size; j > 0 && s->data[j-1] > value; j--) {\n            s->data[j] = s->data[j-1];\n            s->count[j] = s->count[j-1];\n        }\n        s->data[j] = value;\n        s->count[j] = 1;\n        s->size++;\n    }\n}\n\nint get_count(MultiSet *s, int value) {\n    int index = find_index(s, value);\n    return index != -1 ? s->count[index] : 0;\n}\n\nvoid delete_all(MultiSet *s, int value) {\n    int index = find_index(s, value);\n    if (index != -1) {\n        for (int i = index; i < s->size - 1; i++) {\n            s->data[i] = s->data[i+1];\n            s->count[i] = s->count[i+1];\n        }\n        s->size--;\n    }\n}\n\nvoid dump_range(MultiSet *s, int start, int end) {\n    for (int i = 0; i < s->size; i++) {\n        if (s->data[i] >= start && s->data[i] <= end) {\n            for (int j = 0; j < s->count[i]; j++) {\n                printf(\"%d \", s->data[i]);\n            }\n        }\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    MultiSet set;\n    initialize(&set);\n    \n    char operation[10];\n    int value, start, end;\n    \n    while (1) {\n        scanf(\"%s\", operation);\n        \n        if (strcmp(operation, \"insert\") == 0) {\n            scanf(\"%d\", &value);\n            insert(&set, value);\n        } else if (strcmp(operation, \"count\") == 0) {\n            scanf(\"%d\", &value);\n            printf(\"%d\\n\", get_count(&set, value));\n        } else if (strcmp(operation, \"delete\") == 0) {\n            scanf(\"%d\", &value);\n            delete_all(&set, value);\n        } else if (strcmp(operation, \"dump\") == 0) {\n            scanf(\"%d %d\", &start, &end);\n            dump_range(&set, start, end);\n        } else if (strcmp(operation, \"exit\") == 0) {\n            break;\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:22:32"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Node {\n    int value;\n    int count;\n    struct Node *left;\n    struct Node *right;\n} Node;\n\nNode* createNode(int value) {\n    Node* newNode = (Node*)malloc(sizeof(Node));\n    newNode->value = value;\n    newNode->count = 1;\n    newNode->left = NULL;\n    newNode->right = NULL;\n    return newNode;\n}\n\nNode* insert(Node* root, int value) {\n    if (root == NULL) {\n        return createNode(value);\n    }\n    if (value < root->value) {\n        root->left = insert(root->left, value);\n    } else if (value > root->value) {\n        root->right = insert(root->right, value);\n    } else {\n        root->count++;\n    }\n    return root;\n}\n\nint findCount(Node* root, int value) {\n    if (root == NULL) {\n        return 0;\n    }\n    if (value < root->value) {\n        return findCount(root->left, value);\n    } else if (value > root->value) {\n        return findCount(root->right, value);\n    } else {\n        return root->count;\n    }\n}\n\nNode* deleteAll(Node* root, int value) {\n    if (root == NULL) {\n        return NULL;\n    }\n    if (value < root->value) {\n        root->left = deleteAll(root->left, value);\n    } else if (value > root->value) {\n        root->right = deleteAll(root->right, value);\n    } else {\n        Node* temp;\n        if (root->left == NULL) {\n            temp = root->right;\n            free(root);\n            return temp;\n        } else if (root->right == NULL) {\n            temp = root->left;\n            free(root);\n            return temp;\n        }\n        temp = root->right;\n        while (temp->left != NULL) {\n            temp = temp->left;\n        }\n        root->value = temp->value;\n        root->count = temp->count;\n        root->right = deleteAll(root->right, temp->value);\n    }\n    return root;\n}\n\nvoid dumpRange(Node* root, int l, int r) {\n    if (root == NULL) {\n        return;\n    }\n    if (root->value > l) {\n        dumpRange(root->left, l, r);\n    }\n    if (root->value >= l && root->value <= r) {\n        printf(\"%d %d\\n\", root->value, root->count);\n    }\n    if (root->value < r) {\n        dumpRange(root->right, l, r);\n    }\n}\n\nvoid freeTree(Node* root) {\n    if (root == NULL) {\n        return;\n    }\n    freeTree(root->left);\n    freeTree(root->right);\n    free(root);\n}\n\nint main() {\n    Node* root = NULL;\n    char command[10];\n    int x, l, r;\n\n    while (scanf(\"%s\", command) != EOF) {\n        if (command[0] == 'I') {\n            scanf(\"%d\", &x);\n            root = insert(root, x);\n            printf(\"%d\\n\", findCount(root, x));\n        } else if (command[0] == 'F') {\n            scanf(\"%d\", &x);\n            int cnt = findCount(root, x);\n            printf(\"%d\\n\", cnt);\n        } else if (command[0] == 'D') {\n            scanf(\"%d\", &x);\n            int cnt = findCount(root, x);\n            root = deleteAll(root, x);\n            printf(\"%d\\n\", cnt);\n        } else if (command[0] == 'R') {\n            scanf(\"%d %d\", &l, &r);\n            dumpRange(root, l, r);\n        }\n    }\n\n    freeTree(root);\n    return 0;\n}",
    "timestamp": "2025-08-05 22:23:06"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    map<int, int> countMap;\n    int Q;\n    cin >> Q;\n    while (Q--) {\n        string op;\n        cin >> op;\n        if (op == \"INSERT\") {\n            int x;\n            cin >> x;\n            countMap[x]++;\n            cout << countMap[x] << endl;\n        } else if (op == \"FIND\") {\n            int x;\n            cin >> x;\n            auto it = countMap.find(x);\n            if (it == countMap.end()) {\n                cout << 0 << endl;\n            } else {\n                cout << it->second << endl;\n            }\n        } else if (op == \"DELETE\") {\n            int x;\n            cin >> x;\n            auto it = countMap.find(x);\n            if (it != countMap.end()) {\n                cout << it->second << endl;\n                countMap.erase(it);\n            } else {\n                cout << 0 << endl;\n            }\n        } else if (op == \"DUMP\") {\n            int L, R;\n            cin >> L >> R;\n            vector<int> result;\n            auto itLow = countMap.lower_bound(L);\n            auto itHigh = countMap.upper_bound(R);\n            for (auto it = itLow; it != itHigh; ++it) {\n                for (int i = 0; i < it->second; ++i) {\n                    result.push_back(it->first);\n                }\n            }\n            sort(result.begin(), result.end());\n            cout << result.size();\n            for (int num : result) {\n                cout << \" \" << num;\n            }\n            cout << endl;\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 22:23:24"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class IntegerSetOperations {\n    private TreeMap<Integer, Integer> map;\n\n    public IntegerSetOperations() {\n        map = new TreeMap<>();\n    }\n\n    public void insert(int x) {\n        map.put(x, map.getOrDefault(x, 0) + 1);\n        System.out.println(map.get(x));\n    }\n\n    public void find(int x) {\n        System.out.println(map.getOrDefault(x, 0));\n    }\n\n    public void delete(int x) {\n        int count = map.getOrDefault(x, 0);\n        if (count > 0) {\n            map.remove(x);\n            System.out.println(count);\n        } else {\n            System.out.println(0);\n        }\n    }\n\n    public void dump(int L, int R) {\n        StringBuilder sb = new StringBuilder();\n        int total = 0;\n        for (Map.Entry<Integer, Integer> entry : map.subMap(L, true, R, true).entrySet()) {\n            int key = entry.getKey();\n            int count = entry.getValue();\n            sb.append(key).append(\" \").append(count).append(\" \");\n            total += count;\n        }\n        if (sb.length() > 0) {\n            sb.setLength(sb.length() - 1);\n        }\n        System.out.println(total + \" \" + sb.toString());\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        IntegerSetOperations set = new IntegerSetOperations();\n        int Q = scanner.nextInt();\n        for (int i = 0; i < Q; i++) {\n            String operation = scanner.next();\n            switch (operation) {\n                case \"insert\":\n                    set.insert(scanner.nextInt());\n                    break;\n                case \"find\":\n                    set.find(scanner.nextInt());\n                    break;\n                case \"delete\":\n                    set.delete(scanner.nextInt());\n                    break;\n                case \"dump\":\n                    set.dump(scanner.nextInt(), scanner.nextInt());\n                    break;\n            }\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 22:23:45"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class SetOperations {\n    private TreeMap<Integer, Integer> frequencyMap;\n\n    public SetOperations() {\n        frequencyMap = new TreeMap<>();\n    }\n\n    public void insert(int x) {\n        frequencyMap.put(x, frequencyMap.getOrDefault(x, 0) + 1);\n    }\n\n    public int count(int x) {\n        return frequencyMap.getOrDefault(x, 0);\n    }\n\n    public void delete(int x) {\n        frequencyMap.remove(x);\n    }\n\n    public void dump(int a, int b) {\n        NavigableMap<Integer, Integer> subMap = frequencyMap.subMap(a, true, b, true);\n        \n        List<Integer> result = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : subMap.entrySet()) {\n            for (int i = 0; i < entry.getValue(); i++) {\n                result.add(entry.getKey());\n            }\n        }\n        \n        Collections.sort(result);\n        \n        for (int num : result) {\n            System.out.print(num + \" \");\n        }\n        System.out.println();\n    }\n}",
    "timestamp": "2025-08-05 22:23:49"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <algorithm>\n\nclass MultiSet {\nprivate:\n    std::map<int, int> elementCount;\n\npublic:\n    void insert(int x) {\n        elementCount[x]++;\n    }\n\n    int count(int x) {\n        return elementCount[x];\n    }\n\n    void deleteAll(int x) {\n        elementCount.erase(x);\n    }\n\n    void dumpRange(int a, int b) {\n        std::vector<int> result;\n        for (const auto& pair : elementCount) {\n            if (pair.first >= a && pair.first <= b) {\n                for (int i = 0; i < pair.second; ++i) {\n                    result.push_back(pair.first);\n                }\n            }\n        }\n        std::sort(result.begin(), result.end());\n        \n        for (int val : result) {\n            std::cout << val << \" \";\n        }\n        std::cout << std::endl;\n    }\n};\n\nint main() {\n    MultiSet ms;\n    std::string op;\n    int x, y;\n\n    while (std::cin >> op) {\n        if (op == \"insert\") {\n            std::cin >> x;\n            ms.insert(x);\n        } else if (op == \"count\") {\n            std::cin >> x;\n            std::cout << ms.count(x) << std::endl;\n        } else if (op == \"delete\") {\n            std::cin >> x;\n            ms.deleteAll(x);\n        } else if (op == \"range\") {\n            std::cin >> x >> y;\n            ms.dumpRange(x, y);\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 22:23:55"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "class MultiSet:\n    def __init__(self):\n        self.elements = {}\n    \n    def insert(self, value):\n        if value in self.elements:\n            self.elements[value] += 1\n        else:\n            self.elements[value] = 1\n    \n    def count(self, value):\n        return self.elements.get(value, 0)\n    \n    def delete_all(self, value):\n        if value in self.elements:\n            del self.elements[value]\n    \n    def dump_range(self, low, high):\n        result = []\n        for key in sorted(self.elements.keys()):\n            if low <= key <= high:\n                result.extend([key] * self.elements[key])\n        return result\n\n\n# Usage Example:\nms = MultiSet()\nms.insert(10)\nms.insert(10)\nms.insert(20)\nprint(ms.count(10))            # Output: 2\nms.delete_all(10)\nprint(ms.count(10))            # Output: 0\nms.insert(5)\nms.insert(15)\nprint(ms.dump_range(10, 20))   # Output: [15, 20]",
    "timestamp": "2025-08-13 10:19:52"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class IntegerSetOperations {\n    private final TreeMap<Integer, Integer> map;\n\n    public IntegerSetOperations() {\n        this.map = new TreeMap<>();\n    }\n    \n    public void insert(int x) {\n        map.put(x, map.getOrDefault(x, 0) + 1);\n    }\n    \n    public int find(int y) {\n        return map.getOrDefault(y, 0);\n    }\n    \n    public void delete(int z) {\n        map.remove(z);\n    }\n    \n    public List<Integer> dump(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : map.subMap(a, b + 1).entrySet()) {\n            int value = entry.getKey();\n            int count = entry.getValue();\n            for (int i = 0; i < count; i++) {\n                result.add(value);\n            }\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        IntegerSetOperations setOperations = new IntegerSetOperations();\n\n        setOperations.insert(5);\n        setOperations.insert(3);\n        setOperations.insert(5);\n        setOperations.insert(7);\n        \n        System.out.println(\"Count of 5: \" + setOperations.find(5)); // Output: 2\n        System.out.println(\"Dump range 3 to 6: \" + setOperations.dump(3, 6)); // Output: [3, 5, 5]\n\n        setOperations.delete(5);\n        \n        System.out.println(\"Count of 5 after delete: \" + setOperations.find(5)); // Output: 0\n        System.out.println(\"Dump range 3 to 6 after delete: \" + setOperations.dump(3, 6)); // Output: [3]\n    }\n}",
    "timestamp": "2025-08-13 10:19:59"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_OPERATION_LENGTH 100\n\ntypedef struct Node {\n    int value;\n    int count;\n    struct Node* left;\n    struct Node* right;\n} Node;\n\nNode* createNode(int value) {\n    Node* node = (Node*)malloc(sizeof(Node));\n    node->value = value;\n    node->count = 1;\n    node->left = node->right = NULL;\n    return node;\n}\n\nNode* insertNode(Node* root, int value) {\n    if (root == NULL) {\n        return createNode(value);\n    }\n    if (value == root->value) {\n        root->count++;\n    } else if (value < root->value) {\n        root->left = insertNode(root->left, value);\n    } else {\n        root->right = insertNode(root->right, value);\n    }\n    return root;\n}\n\nNode* deleteNode(Node* root, int value) {\n    if (root == NULL) return root;\n    if (value < root->value) {\n        root->left = deleteNode(root->left, value);\n    } else if (value > root->value) {\n        root->right = deleteNode(root->right, value);\n    } else {\n        if (root->count > 1) {\n            root->count--;\n            return root;\n        }\n        if (root->left == NULL) {\n            Node* temp = root->right;\n            free(root);\n            return temp;\n        } else if (root->right == NULL) {\n            Node* temp = root->left;\n            free(root);\n            return temp;\n        }\n        Node* temp = root->right;\n        while (temp && temp->left != NULL) {\n            temp = temp->left;\n        }\n        root->value = temp->value;\n        root->count = temp->count;\n        temp->count = 1;\n        root->right = deleteNode(root->right, temp->value);\n    }\n    return root;\n}\n\nint findCount(Node* root, int value) {\n    if (root == NULL) return 0;\n    if (value == root->value) {\n        return root->count;\n    } else if (value < root->value) {\n        return findCount(root->left, value);\n    } else {\n        return findCount(root->right, value);\n    }\n}\n\nvoid dumpRange(Node* root, int low, int high) {\n    if (root == NULL) return;\n    if (low < root->value) {\n        dumpRange(root->left, low, high);\n    }\n    if (low <= root->value && high >= root->value) {\n        for (int i = 0; i < root->count; i++) {\n            printf(\"%d \", root->value);\n        }\n    }\n    if (high > root->value) {\n        dumpRange(root->right, low, high);\n    }\n}\n\nNode* deleteAllInstances(Node* root, int value) {\n    while (findCount(root, value) > 0) {\n        root = deleteNode(root, value);\n    }\n    return root;\n}\n\nint main() {\n    char operation[MAX_OPERATION_LENGTH];\n    int value, low, high;\n    Node* root = NULL;\n    while (fgets(operation, MAX_OPERATION_LENGTH, stdin) != NULL) {\n        if (strncmp(operation, \"insert\", 6) == 0) {\n            sscanf(operation, \"insert %d\", &value);\n            root = insertNode(root, value);\n        } else if (strncmp(operation, \"count\", 5) == 0) {\n            sscanf(operation, \"count %d\", &value);\n            printf(\"%d\\n\", findCount(root, value));\n        } else if (strncmp(operation, \"delete\", 6) == 0) {\n            sscanf(operation, \"delete %d\", &value);\n            root = deleteAllInstances(root, value);\n        } else if (strncmp(operation, \"dump\", 4) == 0) {\n            sscanf(operation, \"dump %d %d\", &low, &high);\n            dumpRange(root, low, high);\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 10:20:10"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "class MultiSet:\n    def __init__(self):\n        self.data = {}\n\n    def insert(self, x):\n        if x in self.data:\n            self.data[x] += 1\n        else:\n            self.data[x] = 1\n        print(f\"Inserted {x}\")\n\n    def count(self, x):\n        count = self.data.get(x, 0)\n        print(f\"Count of {x} is {count}\")\n        return count\n\n    def delete(self, x):\n        if x in self.data:\n            deleted_count = self.data[x]\n            del self.data[x]\n            print(f\"Deleted all {deleted_count} instances of {x}\")\n        else:\n            print(f\"No instances of {x} to delete\")\n\n    def dump_range(self, low, high):\n        elements = sorted([k for k in self.data.keys() if low <= k <= high])\n        print(' '.join(map(str, elements)) if elements else \"EMPTY\")\n\ndef main():\n    multiset = MultiSet()\n    while True:\n        try:\n            operation = input().split()\n            \n            if operation[0] == 'I':\n                multiset.insert(int(operation[1]))\n            \n            elif operation[0] == 'C':\n                multiset.count(int(operation[1]))\n            \n            elif operation[0] == 'D':\n                multiset.delete(int(operation[1]))\n            \n            elif operation[0] == 'R':\n                multiset.dump_range(int(operation[1]), int(operation[2]))\n            \n            elif operation[0] == 'E':\n                break\n        \n        except EOFError:\n            break\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 10:20:20"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import bisect\nfrom collections import defaultdict\n\nclass IntegerSet:\n    def __init__(self):\n        self.sorted_list = []\n        self.count_dict = defaultdict(int)\n    \n    def insert(self, x):\n        bisect.insort(self.sorted_list, x)\n        self.count_dict[x] += 1\n        print(self.count_dict[x])\n    \n    def find(self, x):\n        print(self.count_dict.get(x, 0))\n    \n    def delete(self, x):\n        count = self.count_dict.pop(x, 0)\n        if count > 0:\n            left = bisect.bisect_left(self.sorted_list, x)\n            right = left + count\n            del self.sorted_list[left:right]\n        print(count)\n    \n    def dump(self, L, R):\n        left = bisect.bisect_left(self.sorted_list, L)\n        right = bisect.bisect_right(self.sorted_list, R)\n        dumped = self.sorted_list[left:right]\n        print(' '.join(map(str, dumped)) if dumped else \"None\")\n\ndef main():\n    import sys\n    input = sys.stdin.read().split()\n    ptr = 0\n    S = IntegerSet()\n    Q = int(input[ptr])\n    ptr += 1\n    for _ in range(Q):\n        cmd = input[ptr]\n        ptr += 1\n        if cmd == \"1\":\n            x = int(input[ptr])\n            ptr += 1\n            S.insert(x)\n        elif cmd == \"2\":\n            x = int(input[ptr])\n            ptr += 1\n            S.find(x)\n        elif cmd == \"3\":\n            x = int(input[ptr])\n            ptr += 1\n            S.delete(x)\n        elif cmd == \"4\":\n            L = int(input[ptr])\n            R = int(input[ptr + 1])\n            ptr += 2\n            S.dump(L, R)\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 10:20:37"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <algorithm>\n\nclass IntegerSet {\nprivate:\n    std::map<int, int> data;\n\npublic:\n    void insert(int x) {\n        data[x]++;\n    }\n\n    int find(int x) {\n        return data[x];\n    }\n\n    void delete_all(int x) {\n        data.erase(x);\n    }\n\n    std::vector<int> dump_range(int lower, int upper) {\n        std::vector<int> result;\n        for (auto it = data.lower_bound(lower); it != data.upper_bound(upper); ++it) {\n            for (int i = 0; i < it->second; ++i) {\n                result.push_back(it->first);\n            }\n        }\n        return result;\n    }\n};\n\nint main() {\n    IntegerSet mySet;\n    std::string command;\n    while (std::cin >> command) {\n        if (command == \"insert\") {\n            int value;\n            std::cin >> value;\n            mySet.insert(value);\n        } else if (command == \"find\") {\n            int value;\n            std::cin >> value;\n            std::cout << mySet.find(value) << std::endl;\n        } else if (command == \"delete\") {\n            int value;\n            std::cin >> value;\n            mySet.delete_all(value);\n        } else if (command == \"dump_range\") {\n            int lower, upper;\n            std::cin >> lower >> upper;\n            std::vector<int> result = mySet.dump_range(lower, upper);\n            for (int num : result) {\n                std::cout << num << \" \";\n            }\n            std::cout << std::endl;\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 11:58:33"
  }
]