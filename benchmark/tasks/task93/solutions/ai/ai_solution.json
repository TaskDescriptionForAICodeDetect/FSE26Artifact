[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n\ntypedef struct {\n    double x, y;\n} Point;\n\ntypedef struct {\n    Point p1, p2;\n} LineSegment;\n\nPoint computeIntersection(LineSegment l1, LineSegment l2) {\n    double a1 = l1.p2.y - l1.p1.y;\n    double b1 = l1.p1.x - l1.p2.x;\n    double c1 = a1 * l1.p1.x + b1 * l1.p1.y;\n\n    double a2 = l2.p2.y - l2.p1.y;\n    double b2 = l2.p1.x - l2.p2.x;\n    double c2 = a2 * l2.p1.x + b2 * l2.p1.y;\n\n    double determinant = a1 * b2 - a2 * b1;\n\n    if (determinant == 0) {\n        return (Point){ .x = -1, .y = -1 };\n    } else {\n        double x = (b2 * c1 - b1 * c2) / determinant;\n        double y = (a1 * c2 - a2 * c1) / determinant;\n\n        // Check if the intersection point lies within both line segments\n        if ((x >= fmin(l1.p1.x, l1.p2.x) && x <= fmax(l1.p1.x, l1.p2.x)) &&\n            (y >= fmin(l1.p1.y, l1.p2.y) && y <= fmax(l1.p1.y, l1.p2.y)) &&\n            (x >= fmin(l2.p1.x, l2.p2.x) && x <= fmax(l2.p1.x, l2.p2.x)) &&\n            (y >= fmin(l2.p1.y, l2.p2.y) && y <= fmax(l2.p1.y, l2.p2.y))) {\n            return (Point){ .x = x, .y = y };\n        } else {\n            return (Point){ .x = -1, .y = -1 };\n        }\n    }\n}\n\ndouble computeArea(Point a, Point b, Point c) {\n    return 0.5 * fabs((a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y)));\n}\n\nint main() {\n    LineSegment lines[3];\n    for (int i = 0; i < 3; i++) {\n        scanf(\"%lf %lf %lf %lf\", &lines[i].p1.x, &lines[i].p1.y, &lines[i].p2.x, &lines[i].p2.y);\n    }\n\n    Point p1 = computeIntersection(lines[0], lines[1]);\n    Point p2 = computeIntersection(lines[1], lines[2]);\n    Point p3 = computeIntersection(lines[2], lines[0]);\n\n    if (p1.x == -1 || p2.x == -1 || p3.x == -1) {\n        printf(\"kyo\\n\");\n        return 0;\n    }\n\n    double area = computeArea(p1, p2, p3);\n\n    if (area == 0) {\n        printf(\"kyo\\n\");\n    } else if (area < 20) {\n        printf(\"small\\n\");\n    } else if (area < 100) {\n        printf(\"medium\\n\");\n    } else {\n        printf(\"large\\n\");\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:34:57"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class TriangleFortune {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        double[] x = new double[3];\n        double[] y = new double[3];\n        \n        for (int i = 0; i < 3; i++) {\n            x[i] = scanner.nextDouble();\n            y[i] = scanner.nextDouble();\n        }\n        \n        double area = calculateTriangleArea(x[0], y[0], x[1], y[1], x[2], y[2]);\n        \n        if (area == 0) {\n            System.out.println(\"kyo\");\n        } else if (area < 1) {\n            System.out.println(\"small\");\n        } else if (area <= 10) {\n            System.out.println(\"medium\");\n        } else {\n            System.out.println(\"large\");\n        }\n        \n        scanner.close();\n    }\n    \n    private static double calculateTriangleArea(double x1, double y1, \n                                                 double x2, double y2, \n                                                 double x3, double y3) {\n        return Math.abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)));\n    }\n}",
    "timestamp": "2025-08-05 18:35:03"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <limits>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Point {\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n};\n\nstruct Line {\n    Point p1, p2;\n};\n\nPoint computeIntersection(Line l1, Line l2) {\n    double A1 = l1.p2.y - l1.p1.y;\n    double B1 = l1.p1.x - l1.p2.x;\n    double C1 = A1 * l1.p1.x + B1 * l1.p1.y;\n\n    double A2 = l2.p2.y - l2.p1.y;\n    double B2 = l2.p1.x - l2.p2.x;\n    double C2 = A2 * l2.p1.x + B2 * l2.p1.y;\n\n    double det = A1 * B2 - A2 * B1;\n    if (fabs(det) < 1e-10) {\n        return Point(numeric_limits<double>::infinity(), numeric_limits<double>::infinity());\n    } else {\n        double x = (B2 * C1 - B1 * C2) / det;\n        double y = (A1 * C2 - A2 * C1) / det;\n        return Point(x, y);\n    }\n}\n\nbool isPointOnSegment(Point p, Line l) {\n    double cross = (l.p2.x - l.p1.x) * (p.y - l.p1.y) - (l.p2.y - l.p1.y) * (p.x - l.p1.x);\n    if (fabs(cross) > 1e-10) return false;\n\n    double dot = (p.x - l.p1.x) * (l.p2.x - l.p1.x) + (p.y - l.p1.y) * (l.p2.y - l.p1.y);\n    if (dot < 0) return false;\n\n    double squaredLength = pow(l.p2.x - l.p1.x, 2) + pow(l.p2.y - l.p1.y, 2);\n    if (dot > squaredLength) return false;\n\n    return true;\n}\n\ndouble triangleArea(Point a, Point b, Point c) {\n    return fabs((a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y)) / 2.0);\n}\n\nint main() {\n    vector<Line> lines(3);\n    for (int i = 0; i < 3; ++i) {\n        cin >> lines[i].p1.x >> lines[i].p1.y >> lines[i].p2.x >> lines[i].p2.y;\n    }\n\n    vector<Point> intersections;\n    for (int i = 0; i < 3; ++i) {\n        for (int j = i + 1; j < 3; ++j) {\n            Point p = computeIntersection(lines[i], lines[j]);\n            if (p.x != numeric_limits<double>::infinity() && \n                isPointOnSegment(p, lines[i]) && \n                isPointOnSegment(p, lines[j])) {\n                intersections.push_back(p);\n            }\n        }\n    }\n\n    if (intersections.size() != 3) {\n        cout << \"kyo\" << endl;\n        return 0;\n    }\n\n    double area = triangleArea(intersections[0], intersections[1], intersections[2]);\n    if (area < 1e-10) {\n        cout << \"kyo\" << endl;\n    } else if (area < 20) {\n        cout << \"sukidakara\" << endl;\n    } else if (area < 60) {\n        cout << \"kyoko\" << endl;\n    } else if (area < 100) {\n        cout << \"yurikago\" << endl;\n    } else {\n        cout << \"mari\" << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:35:46"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n// Function to calculate line intersection point\nint intersect(double x1, double y1, double x2, double y2, \n              double x3, double y3, double x4, double y4, \n              double *x, double *y) {\n    double denom = ((y4-y3)*(x2-x1) - (x4-x3)*(y2-y1));\n    if (fabs(denom) < 1e-10) return 0;\n\n    double ua = ((x4-x3)*(y1-y3) - (y4-y3)*(x1-x3)) / denom;\n    double ub = ((x2-x1)*(y1-y3) - (y2-y1)*(x1-x3)) / denom;\n\n    if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n        *x = x1 + ua * (x2 - x1);\n        *y = y1 + ua * (y2 - y1);\n        return 1;\n    }\n    return 0;\n}\n\n// Function to calculate triangle area using determinant method\ndouble triangleArea(double x1, double y1, double x2, double y2, double x3, double y3) {\n    return fabs(0.5 * (x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)));\n}\n\nint main() {\n    double x[6], y[6];\n    double ix[3], iy[3];\n    int intersections = 0;\n\n    // Read 6 coordinates\n    for (int i = 0; i < 6; i++) {\n        scanf(\"%lf %lf\", &x[i], &y[i]);\n    }\n\n    // Check intersections\n    for (int i = 0; i < 3; i++) {\n        for (int j = i+1; j < 3; j++) {\n            if (intersect(x[i*2], y[i*2], x[i*2+1], y[i*2+1], \n                          x[j*2], y[j*2], x[j*2+1], y[j*2+1], \n                          &ix[intersections], &iy[intersections])) {\n                intersections++;\n            }\n        }\n    }\n\n    // No valid triangle\n    if (intersections != 3) {\n        printf(\"kyo\\n\");\n        return 0;\n    }\n\n    // Calculate triangle area\n    double area = triangleArea(ix[0], iy[0], ix[1], iy[1], ix[2], iy[2]);\n\n    // Determine fortune based on area\n    if (area < 1) printf(\"bad\\n\");\n    else if (area >= 1 && area < 2) printf(\"soso\\n\");\n    else if (area >= 2 && area < 3) printf(\"good\\n\");\n    else printf(\"great\\n\");\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:35:58"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\ndouble calculateTriangleArea(double x1, double y1, double x2, double y2, double x3, double y3) {\n    return abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)));\n}\n\nint main() {\n    double x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6;\n    \n    cin >> x1 >> y1 >> x2 >> y2;\n    cin >> x3 >> y3 >> x4 >> y4;\n    cin >> x5 >> y5 >> x6 >> y6;\n    \n    double a1 = calculateTriangleArea(x1, y1, x3, y3, x5, y5);\n    double a2 = calculateTriangleArea(x2, y2, x4, y4, x6, y6);\n    \n    if (a1 == 0 || a2 == 0) {\n        cout << \"kyo\" << endl;\n        return 0;\n    }\n    \n    double area = a1 + a2;\n    \n    if (area < 1) {\n        cout << \"small\" << endl;\n    } else if (area < 10) {\n        cout << \"medium\" << endl;\n    } else {\n        cout << \"large\" << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 18:36:04"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class TriangleFortune {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double[][] lines = new double[3][4];\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 4; j++) {\n                lines[i][j] = scanner.nextDouble();\n            }\n        }\n\n        double[] intersection1 = findIntersection(lines[0], lines[1]);\n        double[] intersection2 = findIntersection(lines[1], lines[2]);\n        double[] intersection3 = findIntersection(lines[0], lines[2]);\n\n        if (intersection1 == null || intersection2 == null || intersection3 == null) {\n            System.out.println(\"kyo\");\n            return;\n        }\n\n        double area = calculateArea(intersection1, intersection2, intersection3);\n        if (area == 0) {\n            System.out.println(\"kyo\");\n        } else if (area < 20) {\n            System.out.println(\"small\");\n        } else if (area < 100) {\n            System.out.println(\"medium\");\n        } else {\n            System.out.println(\"large\");\n        }\n    }\n\n    private static double[] findIntersection(double[] line1, double[] line2) {\n        double x1 = line1[0], y1 = line1[1], x2 = line1[2], y2 = line1[3];\n        double x3 = line2[0], y3 = line2[1], x4 = line2[2], y4 = line2[3];\n\n        double denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n        if (denom == 0) {\n            return null;\n        }\n\n        double x = ((x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4)) / denom;\n        double y = ((x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4)) / denom;\n        return new double[]{x, y};\n    }\n\n    private static double calculateArea(double[] a, double[] b, double[] c) {\n        return Math.abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0);\n    }\n}",
    "timestamp": "2025-08-05 18:36:56"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def triangle_area(x1, y1, x2, y2, x3, y3):\n    return abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2.0)\n\ndef line_intersection(x1, y1, x2, y2, x3, y3, x4, y4):\n    det = (x1-x2)*(y3-y4) - (y1-y2)*(x3-x4)\n    if det == 0:\n        return None\n    px = ((x1*y2 - y1*x2)*(x3-x4) - (x1-x2)*(x3*y4 - y3*x4)) / det\n    py = ((x1*y2 - y1*x2)*(y3-y4) - (y1-y2)*(x3*y4 - y3*x4)) / det\n    return (px, py)\n\ndef determine_fortune(area):\n    if area == 0:\n        return \"kyo\"\n    elif area < 10:\n        return \"low fortune\"\n    elif area < 50:\n        return \"moderate fortune\"\n    else:\n        return \"high fortune\"\n\ndef main():\n    line_segments = [\n        ((1, 2), (3, 4)),\n        ((5, 6), (7, 8)),\n        ((9, 10), (11, 12))\n    ]\n    \n    intersections = []\n    \n    for i in range(3):\n        for j in range(i+1, 3):\n            inter = line_intersection(\n                *line_segments[i][0], *line_segments[i][1],\n                *line_segments[j][0], *line_segments[j][1]\n            )\n            if inter:\n                intersections.append(inter)\n    \n    if len(intersections) < 3:\n        print(\"kyo\")\n    else:\n        x1, y1 = intersections[0]\n        x2, y2 = intersections[1]\n        x3, y3 = intersections[2]\n        area = triangle_area(x1, y1, x2, y2, x3, y3)\n        fortune = determine_fortune(area)\n        print(fortune)\n\nmain()",
    "timestamp": "2025-08-12 23:55:59"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class FortuneTriangle {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        double[][] lines = new double[3][4];\n        \n        for (int i = 0; i < 3; i++) {\n            lines[i][0] = scanner.nextDouble(); // x1\n            lines[i][1] = scanner.nextDouble(); // y1\n            lines[i][2] = scanner.nextDouble(); // x2\n            lines[i][3] = scanner.nextDouble(); // y2\n        }\n        \n        double[][] intersections = new double[3][2];\n        boolean triangleExists = true;\n        \n        for (int i = 0; i < 3; i++) {\n            for (int j = i + 1; j < 3; j++) {\n                double[] intersection = getIntersection(lines[i], lines[j]);\n                if (intersection == null) {\n                    triangleExists = false;\n                    break;\n                }\n                intersections[(3 - i - j)] = intersection;\n            }\n        }\n        \n        if (!triangleExists || arePointsCollinear(intersections)) {\n            System.out.println(\"kyo\");\n        } else {\n            double area = calculateTriangleArea(intersections);\n            System.out.println(determineFortune(area));\n        }\n    }\n    \n    private static double[] getIntersection(double[] line1, double[] line2) {\n        double x1 = line1[0], y1 = line1[1], x2 = line1[2], y2 = line1[3];\n        double x3 = line2[0], y3 = line2[1], x4 = line2[2], y4 = line2[3];\n        \n        double denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n        if (denominator == 0) {\n            return null; // Lines are parallel or coincident\n        }\n        \n        double intersectX = ((x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4)) / denominator;\n        double intersectY = ((x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4)) / denominator;\n        \n        return new double[]{intersectX, intersectY};\n    }\n\n    private static boolean arePointsCollinear(double[][] points) {\n        double x1 = points[0][0], y1 = points[0][1];\n        double x2 = points[1][0], y2 = points[1][1];\n        double x3 = points[2][0], y3 = points[2][1];\n        \n        double area = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2);\n        return area == 0;\n    }\n\n    private static double calculateTriangleArea(double[][] points) {\n        double x1 = points[0][0], y1 = points[0][1];\n        double x2 = points[1][0], y2 = points[1][1];\n        double x3 = points[2][0], y3 = points[2][1];\n        \n        return Math.abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0;\n    }\n\n    private static String determineFortune(double area) {\n        if (area < 10) {\n            return \"low\";\n        } else if (area <= 50) {\n            return \"medium\";\n        } else {\n            return \"great\";\n        }\n    }\n}",
    "timestamp": "2025-08-12 23:56:11"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n\ntypedef struct {\n    double x, y;\n} Point;\n\ntypedef struct {\n    Point p1, p2;\n} LineSegment;\n\ndouble crossProduct(Point a, Point b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nPoint intersection(LineSegment l1, LineSegment l2) {\n    double a1 = crossProduct((Point){l1.p2.x - l1.p1.x, l1.p2.y - l1.p1.y}, \n                             (Point){l2.p1.x - l1.p1.x, l2.p1.y - l1.p1.y});\n    double a2 = crossProduct((Point){l1.p2.x - l1.p1.x, l1.p2.y - l1.p1.y}, \n                             (Point){l2.p2.x - l1.p1.x, l2.p2.y - l1.p1.y});\n\n    if (a1 * a2 >= 0) return (Point){0, 0}; // No intersection\n\n    double b1 = crossProduct((Point){l2.p2.x - l2.p1.x, l2.p2.y - l2.p1.y}, \n                             (Point){l1.p1.x - l2.p1.x, l1.p1.y - l2.p1.y});\n    double b2 = crossProduct((Point){l2.p2.x - l2.p1.x, l2.p2.y - l2.p1.y}, \n                             (Point){l1.p2.x - l2.p1.x, l1.p2.y - l2.p1.y});\n\n    if (b1 * b2 >= 0) return (Point){0, 0}; // No intersection\n\n    double t = a1 / (a1 - a2);\n    return (Point){l2.p1.x + t * (l2.p2.x - l2.p1.x), l2.p1.y + t * (l2.p2.y - l2.p1.y)};\n}\n\ndouble triangleArea(Point a, Point b, Point c) {\n    return 0.5 * fabs(crossProduct((Point){b.x - a.x, b.y - a.y}, \n                                   (Point){c.x - a.x, c.y - a.y}));\n}\n\nint main() {\n    LineSegment lines[3];\n    for (int i = 0; i < 3; i++) {\n        printf(\"Enter coordinates (x1, y1, x2, y2) for line %d: \", i+1);\n        scanf(\"%lf %lf %lf %lf\", &lines[i].p1.x, &lines[i].p1.y, &lines[i].p2.x, &lines[i].p2.y);\n    }\n\n    Point intersections[3];\n    intersections[0] = intersection(lines[0], lines[1]);\n    intersections[1] = intersection(lines[1], lines[2]);\n    intersections[2] = intersection(lines[2], lines[0]);\n\n    if ((intersections[0].x == 0 && intersections[0].y == 0) ||\n        (intersections[1].x == 0 && intersections[1].y == 0) ||\n        (intersections[2].x == 0 && intersections[2].y == 0)) {\n        printf(\"kyo\\n\");\n    } else {\n        double area = triangleArea(intersections[0], intersections[1], intersections[2]);\n        if (area == 0) {\n            printf(\"kyo\\n\");\n        } else if (area < 10) {\n            printf(\"small fortune\\n\");\n        } else if (area < 50) {\n            printf(\"medium fortune\\n\");\n        } else {\n            printf(\"great fortune\\n\");\n        }\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-12 23:56:19"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def triangle_area(x1, y1, x2, y2, x3, y3):\n    return abs(0.5 * (x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)))\n\ndef line_intersection(x1, y1, x2, y2, x3, y3, x4, y4):\n    px = ( (x1*y2 - y1*x2) * (x3-x4) - (x1-x2) * (x3*y4 - y3*x4) ) / \\\n         ( (x1-x2) * (y3-y4) - (y1-y2) * (x3-x4) )\n    py = ( (x1*y2 - y1*x2) * (y3-y4) - (y1-y2) * (x3*y4 - y3*x4) ) / \\\n         ( (x1-x2) * (y3-y4) - (y1-y2) * (x3-x4) )\n    return px, py\n\ndef get_fortune(area):\n    if area < 1:\n        return 'kyo'\n    elif area < 2:\n        return 'small luck'\n    elif area < 3:\n        return 'luck'\n    elif area < 4:\n        return 'big luck'\n    else:\n        return 'super luck'\n\ndef main():\n    x1, y1 = map(float, input().split())\n    x2, y2 = map(float, input().split())\n    x3, y3 = map(float, input().split())\n    x4, y4 = map(float, input().split())\n    x5, y5 = map(float, input().split())\n    x6, y6 = map(float, input().split())\n\n    try:\n        p1x, p1y = line_intersection(x1, y1, x2, y2, x3, y3, x4, y4)\n        p2x, p2y = line_intersection(x1, y1, x2, y2, x5, y5, x6, y6)\n        p3x, p3y = line_intersection(x3, y3, x4, y4, x5, y5, x6, y6)\n\n        area = triangle_area(p1x, p1y, p2x, p2y, p3x, p3y)\n        print(get_fortune(area))\n    except:\n        print('kyo')\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-12 23:56:43"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import math\n\ndef calculate_area(a, b, c):\n    return abs((a[0]*(b[1]-c[1]) + b[0]*(c[1]-a[1]) + c[0]*(a[1]-b[1])) / 2.0)\n\ndef line_intersection(line1, line2):\n    x1, y1 = line1[0]\n    x2, y2 = line1[1]\n    x3, y3 = line2[0]\n    x4, y4 = line2[1]\n    \n    denom = (x1 - x2)*(y3 - y4) - (y1 - y2)*(x3 - x4)\n    if denom == 0:\n        return None\n    \n    t_num = (x1 - x3)*(y3 - y4) - (y1 - y3)*(x3 - x4)\n    u_num = (x1 - x3)*(y1 - y2) - (y1 - y3)*(x1 - x2)\n    \n    t = t_num / denom\n    u = -u_num / denom\n    \n    if 0 <= t <= 1 and 0 <= u <= 1:\n        x = x1 + t*(x2 - x1)\n        y = y1 + t*(y2 - y1)\n        return (x, y)\n    else:\n        return None\n\ndef get_fortune(line1, line2, line3):\n    intersections = []\n    i1 = line_intersection(line1, line2)\n    i2 = line_intersection(line1, line3)\n    i3 = line_intersection(line2, line3)\n    \n    if i1 and i2 and i3:\n        intersections = [i1, i2, i3]\n        if len(set(intersections)) < 3:\n            return 'kyo'\n        area = calculate_area(i1, i2, i3)\n        if area == 0:\n            return 'kyo'\n        elif area < 20:\n            return 'sukidakara'\n        elif 20 <= area <= 60:\n            return 'kyokucho'\n        else:\n            return 'saikou'\n    else:\n        return 'kyo'\n\n# Example usage:\n# line1 = ((0, 0), (2, 2))\n# line2 = ((0, 2), (2, 0))\n# line3 = ((1, 0), (1, 2))\n# print(get_fortune(line1, line2, line3))",
    "timestamp": "2025-08-12 23:59:29"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// Function to calculate the area of the triangle formed by three points\ndouble calculateArea(double x1, double y1, double x2, double y2, double x3, double y3) {\n    return fabs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) / 2.0);\n}\n\n// Function to determine if three points are collinear\nbool areCollinear(double x1, double y1, double x2, double y2, double x3, double y3) {\n    return calculateArea(x1, y1, x2, y2, x3, y3) == 0.0;\n}\n\n// Function to find the intersection point of two lines\nbool intersection(double x1, double y1, double x2, double y2, \n                  double x3, double y3, double x4, double y4,\n                  double &ix, double &iy) {\n    double d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    if (d == 0)\n        return false;\n    ix = ((x1*y2 - y1*x2)*(x3 - x4) - (x1 - x2)*(x3*y4 - y3*x4)) / d;\n    iy = ((x1*y2 - y1*x2)*(y3 - y4) - (y1 - y2)*(x3*y4 - y3*x4)) / d;\n    return true;\n}\n\nint main() {\n    double x1, y1, x2, y2;\n    double x3, y3, x4, y4;\n    double x5, y5, x6, y6;\n    \n    cin >> x1 >> y1 >> x2 >> y2;\n    cin >> x3 >> y3 >> x4 >> y4;\n    cin >> x5 >> y5 >> x6 >> y6;\n\n    double ix1, iy1, ix2, iy2, ix3, iy3;\n    if (!intersection(x1, y1, x2, y2, x3, y3, x4, y4, ix1, iy1) ||\n        !intersection(x1, y1, x2, y2, x5, y5, x6, y6, ix2, iy2) ||\n        !intersection(x3, y3, x4, y4, x5, y5, x6, y6, ix3, iy3)) {\n        cout << \"kyo\" << endl;\n        return 0;\n    }\n\n    if (areCollinear(ix1, iy1, ix2, iy2, ix3, iy3)) {\n        cout << \"kyo\" << endl;\n        return 0;\n    }\n\n    double area = calculateArea(ix1, iy1, ix2, iy2, ix3, iy3);\n    \n    if (area < 10.0) {\n        cout << \"small fortune\" << endl;\n    } else if (area < 50.0) {\n        cout << \"moderate fortune\" << endl;\n    } else {\n        cout << \"great fortune\" << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 10:51:59"
  }
]