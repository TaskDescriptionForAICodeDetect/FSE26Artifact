[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nchar get_char(int button, int presses) {\n    const char *mapping[] = {\n        \" \",     // 0\n        \".,?!\",  // 1\n        \"abc\",   // 2\n        \"def\",   // 3\n        \"ghi\",   // 4\n        \"jkl\",   // 5\n        \"mno\",   // 6\n        \"pqrs\",  // 7\n        \"tuv\",   // 8\n        \"wxyz\"   // 9\n    };\n    if (button < 0 || button > 9) return '\\0';\n    const char *chars = mapping[button];\n    int len = strlen(chars);\n    if (presses <= 0) return '\\0';\n    return chars[(presses - 1) % len];\n}\n\nint main() {\n    char line[1000];\n    while (fgets(line, sizeof(line), stdin)) {\n        int len = strlen(line);\n        if (line[len - 1] == '\\n') line[len - 1] = '\\0';\n        int button = -1;\n        int presses = 0;\n        for (int i = 0; line[i] != '\\0'; ++i) {\n            if (line[i] >= '0' && line[i] <= '9') {\n                int current_button = line[i] - '0';\n                if (current_button == button) {\n                    presses++;\n                } else {\n                    if (button != -1) {\n                        putchar(get_char(button, presses));\n                    }\n                    button = current_button;\n                    presses = 1;\n                }\n            }\n        }\n        if (button != -1) {\n            putchar(get_char(button, presses));\n        }\n        putchar('\\n');\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:54:47"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class ButtonPressConverter {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String[][] keypad = {\n            {\"\"},\n            {\"\"},\n            {\"a\", \"b\", \"c\"},\n            {\"d\", \"e\", \"f\"},\n            {\"g\", \"h\", \"i\"},\n            {\"j\", \"k\", \"l\"},\n            {\"m\", \"n\", \"o\"},\n            {\"p\", \"q\", \"r\", \"s\"},\n            {\"t\", \"u\", \"v\"},\n            {\"w\", \"x\", \"y\", \"z\"}\n        };\n\n        while (scanner.hasNextLine()) {\n            String line = scanner.nextLine();\n            if (line.isEmpty()) break;\n\n            StringBuilder result = new StringBuilder();\n            String[] sequence = line.split(\"\\\\s+\");\n\n            for (String press : sequence) {\n                int button = Integer.parseInt(press.substring(0, 1));\n                int count = press.length();\n                \n                if (button >= 2 && button <= 9) {\n                    result.append(keypad[button][(count - 1) % keypad[button].length]);\n                }\n            }\n\n            System.out.println(result);\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 18:54:53"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n\nusing namespace std;\n\nmap<char, string> keyMap = {\n    {'1', \".,?!:\"},\n    {'2', \"ABC\"},\n    {'3', \"DEF\"},\n    {'4', \"GHI\"},\n    {'5', \"JKL\"},\n    {'6', \"MNO\"},\n    {'7', \"PQRS\"},\n    {'8', \"TUV\"},\n    {'9', \"WXYZ\"},\n    {'0', \" \"}\n};\n\nstring convertToText(const string &sequence) {\n    string result;\n    int i = 0, n = sequence.size();\n    while (i < n) {\n        char current = sequence[i];\n        int count = 1;\n        while (i + 1 < n && sequence[i + 1] == current) {\n            i++;\n            count++;\n        }\n        if (keyMap.find(current) != keyMap.end()) {\n            string chars = keyMap[current];\n            int index = (count - 1) % chars.size();\n            result += chars[index];\n        }\n        i++;\n    }\n    return result;\n}\n\nint main() {\n    string line;\n    while (getline(cin, line)) {\n        cout << convertToText(line) << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:55:38"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nchar* getCharacterFromButtons(char* buttonSequence) {\n    char* phoneKeyMap[] = {\n        \"\", \"\", \"ABC\", \"DEF\", \"GHI\", \"JKL\", \"MNO\", \"PQRS\", \"TUV\", \"WXYZ\"\n    };\n    \n    static char result[100];\n    memset(result, 0, sizeof(result));\n    \n    int seqLen = strlen(buttonSequence);\n    int resultIndex = 0;\n    \n    for (int i = 0; i < seqLen; i++) {\n        int button = buttonSequence[i] - '0';\n        int pressCount = 1;\n        \n        while (i + 1 < seqLen && buttonSequence[i] == buttonSequence[i + 1]) {\n            pressCount++;\n            i++;\n        }\n        \n        if (button >= 2 && button <= 9) {\n            int charIndex = (pressCount - 1) % strlen(phoneKeyMap[button]);\n            result[resultIndex++] = phoneKeyMap[button][charIndex];\n        }\n    }\n    \n    result[resultIndex] = '\\0';\n    return result;\n}\n\nint main() {\n    char input[100];\n    \n    while (fgets(input, sizeof(input), stdin) != NULL) {\n        input[strcspn(input, \"\\n\")] = 0;\n        \n        if (strlen(input) == 0) {\n            break;\n        }\n        \n        char* output = getCharacterFromButtons(input);\n        printf(\"%s\\n\", output);\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 18:55:45"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nstring convertButtonsToText(const string& buttons) {\n    unordered_map<string, char> keypadMap = {\n        {\"1\", '.'},\n        {\"11\", ','},\n        {\"111\", '?'},\n        {\"1111\", '!'},\n        {\"2\", 'a'},\n        {\"22\", 'b'},\n        {\"222\", 'c'},\n        {\"3\", 'd'},\n        {\"33\", 'e'},\n        {\"333\", 'f'},\n        {\"4\", 'g'},\n        {\"44\", 'h'},\n        {\"444\", 'i'},\n        {\"5\", 'j'},\n        {\"55\", 'k'},\n        {\"555\", 'l'},\n        {\"6\", 'm'},\n        {\"66\", 'n'},\n        {\"666\", 'o'},\n        {\"7\", 'p'},\n        {\"77\", 'q'},\n        {\"777\", 'r'},\n        {\"7777\", 's'},\n        {\"8\", 't'},\n        {\"88\", 'u'},\n        {\"888\", 'v'},\n        {\"9\", 'w'},\n        {\"99\", 'x'},\n        {\"999\", 'y'},\n        {\"9999\", 'z'}\n    };\n\n    string result;\n    string currentSequence;\n\n    for (char button : buttons) {\n        currentSequence += button;\n        \n        if (keypadMap.count(currentSequence)) {\n            result += keypadMap[currentSequence];\n            currentSequence.clear();\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    int numSequences;\n    cin >> numSequences;\n    cin.ignore();\n\n    for (int i = 0; i < numSequences; i++) {\n        string buttonSequence;\n        getline(cin, buttonSequence);\n        \n        string text = convertButtonsToText(buttonSequence);\n        cout << text << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:55:52"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class MobileKeypad {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Map<String, Character> keyMap = new HashMap<>();\n        keyMap.put(\"1\", '.');\n        keyMap.put(\"11\", ',');\n        keyMap.put(\"111\", '?');\n        keyMap.put(\"1111\", '!');\n        keyMap.put(\"2\", 'A');\n        keyMap.put(\"22\", 'B');\n        keyMap.put(\"222\", 'C');\n        keyMap.put(\"3\", 'D');\n        keyMap.put(\"33\", 'E');\n        keyMap.put(\"333\", 'F');\n        keyMap.put(\"4\", 'G');\n        keyMap.put(\"44\", 'H');\n        keyMap.put(\"444\", 'I');\n        keyMap.put(\"5\", 'J');\n        keyMap.put(\"55\", 'K');\n        keyMap.put(\"555\", 'L');\n        keyMap.put(\"6\", 'M');\n        keyMap.put(\"66\", 'N');\n        keyMap.put(\"666\", 'O');\n        keyMap.put(\"7\", 'P');\n        keyMap.put(\"77\", 'Q');\n        keyMap.put(\"777\", 'R');\n        keyMap.put(\"7777\", 'S');\n        keyMap.put(\"8\", 'T');\n        keyMap.put(\"88\", 'U');\n        keyMap.put(\"888\", 'V');\n        keyMap.put(\"9\", 'W');\n        keyMap.put(\"99\", 'X');\n        keyMap.put(\"999\", 'Y');\n        keyMap.put(\"9999\", 'Z');\n        keyMap.put(\"0\", ' ');\n        \n        while (scanner.hasNextLine()) {\n            String line = scanner.nextLine().trim();\n            if (line.isEmpty()) {\n                continue;\n            }\n            StringBuilder result = new StringBuilder();\n            int i = 0;\n            while (i < line.length()) {\n                char currentChar = line.charAt(i);\n                int j = i;\n                while (j < line.length() && line.charAt(j) == currentChar) {\n                    j++;\n                }\n                String key = line.substring(i, j);\n                result.append(keyMap.getOrDefault(key, '\\0'));\n                i = j;\n            }\n            System.out.println(result.toString());\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 18:56:13"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def button_to_text(button_sequences):\n    # Define the mapping of buttons to characters\n    button_map = {\n        '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl',\n        '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz',\n        '0': ' ', '1': '', '#': '', '*': ''\n    }\n\n    result = []\n\n    for sequence in button_sequences:\n        current_char = ''\n        current_count = 0\n        output = []\n        \n        for current_button in sequence:\n            if current_button != current_char:\n                # Append previous character to output\n                if current_char and current_char in button_map:\n                    chars = button_map[current_char]\n                    index = (current_count - 1) % len(chars)\n                    output.append(chars[index])\n                # Reset for next character\n                current_char = current_button\n                current_count = 1\n            else:\n                current_count += 1\n        \n        # Append the last character\n        if current_char and current_char in button_map:\n            chars = button_map[current_char]\n            index = (current_count - 1) % len(chars)\n            output.append(chars[index])\n\n        # Join and store result for current sequence\n        result.append(''.join(output))\n    \n    return result\n\n# Example usage\nbutton_sequences = [\n    \"22222\",  # Output: \"a\" (5 presses of '2')\n    \"7777777777\",  # Output: \"p\" (10 presses of '7')\n    \"4433555555666\",  # Output: \"hello\"\n    \"222#33\"  # Output: \"ad\" (single '#' separates 'c' to 'd')\n]\n\n# Function call\noutputs = button_to_text(button_sequences)\nfor output in outputs:\n    print(output)",
    "timestamp": "2025-08-13 01:27:51"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class KeypadSequenceConverter {\n\n    private static final Map<Character, String> KEY_MAP = new HashMap<>();\n\n    static {\n        KEY_MAP.put('2', \"ABC\");\n        KEY_MAP.put('3', \"DEF\");\n        KEY_MAP.put('4', \"GHI\");\n        KEY_MAP.put('5', \"JKL\");\n        KEY_MAP.put('6', \"MNO\");\n        KEY_MAP.put('7', \"PQRS\");\n        KEY_MAP.put('8', \"TUV\");\n        KEY_MAP.put('9', \"WXYZ\");\n    }\n\n    public static String convertSequence(String sequence) {\n        StringBuilder result = new StringBuilder();\n        char prev = ' ';\n        int count = 0;\n\n        for (char ch : sequence.toCharArray()) {\n            if (ch == prev) {\n                count++;\n            } else {\n                if (prev != ' ') {\n                    String chars = KEY_MAP.get(prev);\n                    int index = (count - 1) % chars.length();\n                    result.append(chars.charAt(index));\n                }\n                prev = ch;\n                count = 1;\n            }\n        }\n\n        if (prev != ' ') {\n            String chars = KEY_MAP.get(prev);\n            int index = (count - 1) % chars.length();\n            result.append(chars.charAt(index));\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextLine()) {\n            String line = scanner.nextLine().trim();\n            if (!line.isEmpty()) {\n                String output = convertSequence(line);\n                System.out.println(output);\n            }\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-13 01:27:58"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n\nchar getCharFromButton(int button, int pressCount) {\n    switch (button) {\n        case 2: {\n            char letters[] = \"abc\";\n            return letters[(pressCount - 1) % 3];\n        }\n        case 3: {\n            char letters[] = \"def\";\n            return letters[(pressCount - 1) % 3];\n        }\n        case 4: {\n            char letters[] = \"ghi\";\n            return letters[(pressCount - 1) % 3];\n        }\n        case 5: {\n            char letters[] = \"jkl\";\n            return letters[(pressCount - 1) % 3];\n        }\n        case 6: {\n            char letters[] = \"mno\";\n            return letters[(pressCount - 1) % 3];\n        }\n        case 7: {\n            char letters[] = \"pqrs\";\n            return letters[(pressCount - 1) % 4];\n        }\n        case 8: {\n            char letters[] = \"tuv\";\n            return letters[(pressCount - 1) % 3];\n        }\n        case 9: {\n            char letters[] = \"wxyz\";\n            return letters[(pressCount - 1) % 4];\n        }\n        case 0:\n            return ' ';\n        default:\n            return '\\0';\n    }\n}\n\nvoid parseButtonSequence(const char *sequence, char *output) {\n    int length = strlen(sequence);\n    int count = 0;\n    int button = 0;\n    int j = 0;\n\n    for (int i = 0; i < length; i++) {\n        if (sequence[i] >= '0' && sequence[i] <= '9') {\n            if (sequence[i] - '0' != button || i == 0) {\n                if (count > 0) {\n                    output[j++] = getCharFromButton(button, count);\n                }\n                button = sequence[i] - '0';\n                count = 1;\n            } else {\n                count++;\n            }\n        }\n    }\n    if (count > 0) {\n        output[j++] = getCharFromButton(button, count);\n    }\n    output[j] = '\\0';\n}\n\nint main() {\n    char buffer[100];\n    char output[100];\n\n    while (fgets(buffer, sizeof(buffer), stdin)) {\n        buffer[strcspn(buffer, \"\\n\")] = '\\0';  // Remove newline character\n        parseButtonSequence(buffer, output);\n        printf(\"%s\\n\", output);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 01:28:08"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def button_sequence_to_text(sequence):\n    keypad_mapping = {\n        '1': '.,:',\n        '2': 'abc',\n        '3': 'def',\n        '4': 'ghi', \n        '5': 'jkl',\n        '6': 'mno',\n        '7': 'pqrs',\n        '8': 'tuv', \n        '9': 'wxyz',\n        '0': ' '\n    }\n    \n    result = []\n    i = 0\n    while i < len(sequence):\n        button = sequence[i]\n        count = 1\n        \n        while i + 1 < len(sequence) and sequence[i+1] == button:\n            count += 1\n            i += 1\n        \n        chars = keypad_mapping.get(button, '')\n        if chars:\n            index = (count - 1) % len(chars)\n            result.append(chars[index])\n        \n        i += 1\n    \n    return ''.join(result)\n\ndef main():\n    try:\n        while True:\n            sequence = input().strip()\n            if not sequence:\n                break\n            print(button_sequence_to_text(sequence))\n    except EOFError:\n        pass\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 01:28:16"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "key_mapping = {\n    '1': ['.', ',', '!', '?', ' '],\n    '2': ['a', 'b', 'c'],\n    '3': ['d', 'e', 'f'],\n    '4': ['g', 'h', 'i'],\n    '5': ['j', 'k', 'l'],\n    '6': ['m', 'n', 'o'],\n    '7': ['p', 'q', 'r', 's'],\n    '8': ['t', 'u', 'v'],\n    '9': ['w', 'x', 'y', 'z'],\n    '0': [' ']\n}\n\ndef decode_sequence(sequence):\n    result = []\n    i = 0\n    n = len(sequence)\n    while i < n:\n        if sequence[i] == '0':\n            i += 1\n            continue\n        current_char = sequence[i]\n        count = 0\n        while i < n and sequence[i] == current_char:\n            count += 1\n            i += 1\n        if current_char in key_mapping:\n            chars = key_mapping[current_char]\n            index = (count - 1) % len(chars)\n            result.append(chars[index])\n    return ''.join(result)\n\nimport sys\nfor line in sys.stdin:\n    line = line.strip()\n    if line:\n        print(decode_sequence(line))",
    "timestamp": "2025-08-13 01:28:31"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <string>\n#include <unordered_map>\n\nstd::string convertButtonSequenceToText(const std::string& sequence) {\n    std::unordered_map<char, std::string> keypad = {\n        {'2', \"ABC\"}, {'3', \"DEF\"}, {'4', \"GHI\"}, {'5', \"JKL\"},\n        {'6', \"MNO\"}, {'7', \"PQRS\"}, {'8', \"TUV\"}, {'9', \"WXYZ\"}\n    };\n    \n    std::string result;\n    int n = sequence.size();\n\n    for (int i = 0; i < n;) {\n        char button = sequence[i];\n        int j = i;\n\n        while (j < n && sequence[j] == button) {\n            j++;\n        }\n\n        if (button >= '2' && button <= '9') {\n            const std::string& chars = keypad[button];\n            int pressCount = (j - i) % chars.size();\n            result += chars[pressCount - 1];\n        }\n        \n        i = j;\n    }\n    \n    return result;\n}\n\nint main() {\n    std::string line;\n    while (std::getline(std::cin, line)) {\n        std::cout << convertButtonSequenceToText(line) << std::endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:00:16"
  }
]