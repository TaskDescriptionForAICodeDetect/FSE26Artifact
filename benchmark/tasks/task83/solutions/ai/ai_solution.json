[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdbool.h>\n#include <math.h>\n\ntypedef struct {\n    int x, y;\n} Point;\n\ntypedef struct {\n    Point center;\n    int radius;\n} Circle;\n\nint crossProduct(Point a, Point b, Point c) {\n    return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);\n}\n\nbool pointInTriangle(Point p, Point a, Point b, Point c) {\n    int d1 = crossProduct(p, a, b);\n    int d2 = crossProduct(p, b, c);\n    int d3 = crossProduct(p, c, a);\n\n    bool has_neg = (d1 < 0) || (d2 < 0) || (d3 < 0);\n    bool has_pos = (d1 > 0) || (d2 > 0) || (d3 > 0);\n\n    return !(has_neg && has_pos);\n}\n\ndouble pointDistance(Point a, Point b) {\n    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\n\nbool pointOnSegment(Point p, Point a, Point b) {\n    if (crossProduct(p, a, b) != 0) return false;\n    if (p.x < fmin(a.x, b.x) || p.x > fmax(a.x, b.x)) return false;\n    if (p.y < fmin(a.y, b.y) || p.y > fmax(a.y, b.y)) return false;\n    return true;\n}\n\ndouble segmentDistance(Point p, Point a, Point b) {\n    double length = (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);\n    if (length == 0) return pointDistance(p, a);\n\n    double t = ((p.x - a.x) * (b.x - a.x) + (p.y - a.y) * (b.y - a.y)) / length;\n    t = fmax(0, fmin(1, t));\n    Point projection = {a.x + t * (b.x - a.x), a.y + t * (b.y - a.y)};\n    return pointDistance(p, projection);\n}\n\nbool circleIntersectsTriangle(Circle circle, Point a, Point b, Point c) {\n    if (pointInTriangle(circle.center, a, b, c)) {\n        return true;\n    }\n\n    double d1 = segmentDistance(circle.center, a, b);\n    double d2 = segmentDistance(circle.center, b, c);\n    double d3 = segmentDistance(circle.center, c, a);\n\n    if (d1 <= circle.radius || d2 <= circle.radius || d3 <= circle.radius) {\n        return true;\n    }\n\n    return false;\n}\n\nint main() {\n    Point a, b, c;\n    Circle circle;\n\n    scanf(\"%d %d %d %d %d %d\", &a.x, &a.y, &b.x, &b.y, &c.x, &c.y);\n    scanf(\"%d %d %d\", &circle.center.x, &circle.center.y, &circle.radius);\n\n    if (circleIntersectsTriangle(circle, a, b, c)) {\n        printf(\"The circle and triangle intersect.\\n\");\n    } else {\n        printf(\"The circle and triangle do not intersect.\\n\");\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:29:42"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "public class TriangleCircleRelationship {\n    public static class Point {\n        int x, y;\n        \n        public Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n    \n    public static class Circle {\n        Point center;\n        int radius;\n        \n        public Circle(Point center, int radius) {\n            this.center = center;\n            this.radius = radius;\n        }\n    }\n    \n    public static double distancePointToPoint(Point p1, Point p2) {\n        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    }\n    \n    public static double distancePointToLine(Point p, Point a, Point b) {\n        double normalLength = Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n        return Math.abs((p.x - a.x) * (b.y - a.y) - (p.y - a.y) * (b.x - a.x)) / normalLength;\n    }\n    \n    public static boolean isPointInsideCircle(Point p, Circle circle) {\n        return distancePointToPoint(p, circle.center) <= circle.radius;\n    }\n    \n    public static String determineRelationship(Point[] triangle, Circle circle) {\n        int insideCount = 0;\n        int outsideCount = 0;\n        boolean crossingEdge = false;\n        \n        for (Point vertex : triangle) {\n            if (isPointInsideCircle(vertex, circle)) {\n                insideCount++;\n            } else {\n                outsideCount++;\n            }\n        }\n        \n        for (int i = 0; i < 3; i++) {\n            Point a = triangle[i];\n            Point b = triangle[(i + 1) % 3];\n            double distance = distancePointToLine(circle.center, a, b);\n            \n            if (distance <= circle.radius) {\n                if (isPointBetweenPoints(circle.center, a, b)) {\n                    crossingEdge = true;\n                    break;\n                }\n            }\n        }\n        \n        if (insideCount == 3) return \"Circle inside triangle\";\n        if (outsideCount == 3) {\n            if (crossingEdge) return \"Circle intersects triangle\";\n            return \"Circle outside triangle\";\n        }\n        \n        return \"Circle intersects triangle\";\n    }\n    \n    public static boolean isPointBetweenPoints(Point p, Point a, Point b) {\n        return (p.x >= Math.min(a.x, b.x) && p.x <= Math.max(a.x, b.x) &&\n                p.y >= Math.min(a.y, b.y) && p.y <= Math.max(a.y, b.y));\n    }\n    \n    public static void main(String[] args) {\n        Point[] triangle = {\n            new Point(0, 0),\n            new Point(4, 0),\n            new Point(2, 3)\n        };\n        \n        Circle circle = new Circle(new Point(2, 2), 1);\n        \n        String result = determineRelationship(triangle, circle);\n        System.out.println(result);\n    }\n}",
    "timestamp": "2025-08-05 18:29:54"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Point {\n    int x, y;\n    Point(int x = 0, int y = 0) : x(x), y(y) {}\n};\n\nint cross(const Point &a, const Point &b, const Point &c) {\n    return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);\n}\n\nbool pointInTriangle(const Point &p, const Point &a, const Point &b, const Point &c) {\n    int d1 = cross(p, a, b);\n    int d2 = cross(p, b, c);\n    int d3 = cross(p, c, a);\n    bool has_neg = (d1 < 0) || (d2 < 0) || (d3 < 0);\n    bool has_pos = (d1 > 0) || (d2 > 0) || (d3 > 0);\n    return !(has_neg && has_pos);\n}\n\ndouble pointToLineDistance(const Point &p, const Point &a, const Point &b) {\n    double A = p.x - a.x;\n    double B = p.y - a.y;\n    double C = b.x - a.x;\n    double D = b.y - a.y;\n\n    double dot = A * C + B * D;\n    double len_sq = C * C + D * D;\n    double param = -1;\n    if (len_sq != 0)\n        param = dot / len_sq;\n\n    double xx, yy;\n    if (param < 0) {\n        xx = a.x;\n        yy = a.y;\n    } else if (param > 1) {\n        xx = b.x;\n        yy = b.y;\n    } else {\n        xx = a.x + param * C;\n        yy = a.y + param * D;\n    }\n\n    double dx = p.x - xx;\n    double dy = p.y - yy;\n    return sqrt(dx * dx + dy * dy);\n}\n\nbool circleIntersectsTriangle(const Point &center, int radius, const Point &a, const Point &b, const Point &c) {\n    // Check if any vertex is inside the circle\n    auto distSq = [](const Point &p1, const Point &p2) {\n        return (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);\n    };\n\n    if (distSq(center, a) <= radius * radius ||\n        distSq(center, b) <= radius * radius ||\n        distSq(center, c) <= radius * radius) {\n        return true;\n    }\n\n    // Check if circle center is inside the triangle\n    if (pointInTriangle(center, a, b, c)) {\n        return true;\n    }\n\n    // Check if circle intersects any edge\n    if (pointToLineDistance(center, a, b) <= radius ||\n        pointToLineDistance(center, b, c) <= radius ||\n        pointToLineDistance(center, c, a) <= radius) {\n        return true;\n    }\n\n    return false;\n}\n\nint main() {\n    Point triangle[3];\n    Point circle_center;\n    int radius;\n\n    for (int i = 0; i < 3; ++i) {\n        cin >> triangle[i].x >> triangle[i].y;\n    }\n    cin >> circle_center.x >> circle_center.y >> radius;\n\n    if (circleIntersectsTriangle(circle_center, radius, triangle[0], triangle[1], triangle[2])) {\n        cout << \"YES\" << endl;\n    } else {\n        cout << \"NO\" << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:30:25"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n\ntypedef struct {\n    int x, y;\n} Point;\n\ndouble distance(Point p1, Point p2) {\n    return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));\n}\n\ndouble pointToLineDistance(Point point, Point lineStart, Point lineEnd) {\n    double A = point.x - lineStart.x;\n    double B = point.y - lineStart.y;\n    double C = lineEnd.x - lineStart.x;\n    double D = lineEnd.y - lineStart.y;\n\n    double dot = A * C + B * D;\n    double lenSq = C * C + D * D;\n    double param = -1;\n    \n    if (lenSq != 0) {\n        param = dot / lenSq;\n    }\n\n    double nearestX, nearestY;\n\n    if (param < 0) {\n        nearestX = lineStart.x;\n        nearestY = lineStart.y;\n    } else if (param > 1) {\n        nearestX = lineEnd.x;\n        nearestY = lineEnd.y;\n    } else {\n        nearestX = lineStart.x + param * C;\n        nearestY = lineStart.y + param * D;\n    }\n\n    double dx = point.x - nearestX;\n    double dy = point.y - nearestY;\n    return sqrt(dx * dx + dy * dy);\n}\n\nbool isPointInCircle(Point point, Point circleCenter, int radius) {\n    return distance(point, circleCenter) <= radius;\n}\n\nint determineRelationship(Point triangle[3], Point circleCenter, int radius) {\n    int pointsInCircle = 0;\n    int edgesIntersecting = 0;\n\n    for (int i = 0; i < 3; i++) {\n        if (isPointInCircle(triangle[i], circleCenter, radius)) {\n            pointsInCircle++;\n        }\n\n        int nextIndex = (i + 1) % 3;\n        double lineDistance = pointToLineDistance(circleCenter, triangle[i], triangle[nextIndex]);\n        \n        if (lineDistance <= radius) {\n            double lineLength = distance(triangle[i], triangle[nextIndex]);\n            double distanceStartToCenter = distance(triangle[i], circleCenter);\n            double distanceEndToCenter = distance(triangle[nextIndex], circleCenter);\n\n            if (distanceStartToCenter <= radius || \n                distanceEndToCenter <= radius || \n                (distanceStartToCenter < lineLength && distanceEndToCenter < lineLength)) {\n                edgesIntersecting++;\n            }\n        }\n    }\n\n    if (pointsInCircle == 3) return 1;  // Circle contains triangle\n    if (pointsInCircle == 0 && edgesIntersecting == 0) return 0;  // No interaction\n    if (pointsInCircle > 0 || edgesIntersecting > 0) return 2;  // Partial overlap\n\n    return -1;  // Error case\n}\n\nint main() {\n    Point triangle[3];\n    Point circleCenter;\n    int radius;\n\n    // Input triangle vertices\n    for (int i = 0; i < 3; i++) {\n        scanf(\"%d %d\", &triangle[i].x, &triangle[i].y);\n    }\n\n    // Input circle center and radius\n    scanf(\"%d %d %d\", &circleCenter.x, &circleCenter.y, &radius);\n\n    int result = determineRelationship(triangle, circleCenter, radius);\n\n    // Print results\n    switch(result) {\n        case 0: printf(\"No interaction\\n\"); break;\n        case 1: printf(\"Circle contains triangle\\n\"); break;\n        case 2: printf(\"Partial overlap\\n\"); break;\n        default: printf(\"Error\\n\"); break;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:30:55"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nstruct Point {\n    int x, y;\n    Point(int x = 0, int y = 0) : x(x), y(y) {}\n};\n\nstruct Circle {\n    Point center;\n    int radius;\n    Circle(Point c, int r) : center(c), radius(r) {}\n};\n\ndouble distance(const Point& a, const Point& b) {\n    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));\n}\n\nbool pointInCircle(const Point& p, const Circle& circle) {\n    return distance(p, circle.center) <= circle.radius;\n}\n\nint orientation(const Point& p, const Point& q, const Point& r) {\n    int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n    if (val == 0) return 0;\n    return (val > 0) ? 1 : 2;\n}\n\nbool onSegment(const Point& p, const Point& q, const Point& r) {\n    return q.x <= std::max(p.x, r.x) && q.x >= std::min(p.x, r.x) &&\n           q.y <= std::max(p.y, r.y) && q.y >= std::min(p.y, r.y);\n}\n\nbool lineCircleIntersect(const Point& p1, const Point& p2, const Circle& circle) {\n    Point closest;\n    double dx = p2.x - p1.x;\n    double dy = p2.y - p1.y;\n    double t = ((circle.center.x - p1.x) * dx + (circle.center.y - p1.y) * dy) / (dx * dx + dy * dy);\n    \n    if (t < 0) closest = p1;\n    else if (t > 1) closest = p2;\n    else {\n        closest.x = p1.x + t * dx;\n        closest.y = p1.y + t * dy;\n    }\n    \n    return distance(circle.center, closest) <= circle.radius;\n}\n\nbool checkTriangleCircleRelation(const std::vector<Point>& triangle, const Circle& circle) {\n    int insideCount = 0;\n    int outsideCount = 0;\n    bool hasIntersection = false;\n\n    for (const Point& vertex : triangle) {\n        if (pointInCircle(vertex, circle)) {\n            insideCount++;\n        } else {\n            outsideCount++;\n        }\n    }\n\n    for (int i = 0; i < 3; i++) {\n        if (lineCircleIntersect(triangle[i], triangle[(i+1)%3], circle)) {\n            hasIntersection = true;\n            break;\n        }\n    }\n\n    if (insideCount == 3) return true;\n    if (outsideCount == 3) {\n        Point center = circle.center;\n        int a = triangle[0].x, b = triangle[0].y;\n        int c = triangle[1].x, d = triangle[1].y;\n        int e = triangle[2].x, f = triangle[2].y;\n        \n        int val1 = (b-d)*(center.x-c) + (c-a)*(center.y-d);\n        int val2 = (d-f)*(center.x-e) + (e-c)*(center.y-f);\n        int val3 = (f-b)*(center.x-a) + (a-e)*(center.y-b);\n        \n        bool sameSign = (val1 > 0 && val2 > 0 && val3 > 0) || \n                        (val1 < 0 && val2 < 0 && val3 < 0);\n        \n        return sameSign;\n    }\n    \n    return hasIntersection;\n}\n\nint main() {\n    std::vector<Point> triangle(3);\n    Point circleCenter;\n    int radius;\n\n    for (int i = 0; i < 3; i++) {\n        std::cin >> triangle[i].x >> triangle[i].y;\n    }\n    std::cin >> circleCenter.x >> circleCenter.y >> radius;\n\n    Circle circle(circleCenter, radius);\n\n    bool result = checkTriangleCircleRelation(triangle, circle);\n    std::cout << (result ? \"YES\" : \"NO\") << std::endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:31:10"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class TriangleCircleIntersection {\n    static class Point {\n        int x, y;\n        Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static int dotProduct(Point a, Point b, Point c) {\n        return (b.x - a.x) * (c.x - a.x) + (b.y - a.y) * (c.y - a.y);\n    }\n\n    static boolean pointInTriangle(Point p, Point a, Point b, Point c) {\n        int d1 = (p.x - b.x) * (a.y - b.y) - (a.x - b.x) * (p.y - b.y);\n        int d2 = (p.x - c.x) * (b.y - c.y) - (b.x - c.x) * (p.y - c.y);\n        int d3 = (p.x - a.x) * (c.y - a.y) - (c.x - a.x) * (p.y - a.y);\n        boolean hasNeg = (d1 < 0) || (d2 < 0) || (d3 < 0);\n        boolean hasPos = (d1 > 0) || (d2 > 0) || (d3 > 0);\n        return !(hasNeg && hasPos);\n    }\n\n    static int distanceSquared(Point a, Point b) {\n        return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);\n    }\n\n    static boolean circleIntersectsEdge(Point c, int r, Point a, Point b) {\n        int lenSq = distanceSquared(a, b);\n        int dot = dotProduct(a, b, c);\n        if (dot <= 0) {\n            return distanceSquared(c, a) <= r * r;\n        } else if (dot >= lenSq) {\n            return distanceSquared(c, b) <= r * r;\n        } else {\n            Point projection = new Point(\n                a.x + (b.x - a.x) * dot / lenSq,\n                a.y + (b.y - a.y) * dot / lenSq\n            );\n            return distanceSquared(c, projection) <= r * r;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Point[] triangle = new Point[3];\n        for (int i = 0; i < 3; i++) {\n            int x = scanner.nextInt();\n            int y = scanner.nextInt();\n            triangle[i] = new Point(x, y);\n        }\n        int cx = scanner.nextInt();\n        int cy = scanner.nextInt();\n        int r = scanner.nextInt();\n        Point circle = new Point(cx, cy);\n\n        boolean circleInside = pointInTriangle(circle, triangle[0], triangle[1], triangle[2]);\n        boolean intersects = false;\n        for (int i = 0; i < 3; i++) {\n            Point a = triangle[i];\n            Point b = triangle[(i + 1) % 3];\n            if (circleIntersectsEdge(circle, r, a, b)) {\n                intersects = true;\n                break;\n            }\n        }\n\n        if (circleInside) {\n            System.out.println(\"The circle is inside the triangle\");\n        } else if (intersects) {\n            System.out.println(\"The circle intersects the triangle\");\n        } else {\n            boolean triangleInside = true;\n            for (Point p : triangle) {\n                if (distanceSquared(p, circle) > r * r) {\n                    triangleInside = false;\n                    break;\n                }\n            }\n            if (triangleInside) {\n                System.out.println(\"The triangle is inside the circle\");\n            } else {\n                System.out.println(\"The circle and the triangle do not intersect\");\n            }\n        }\n    }\n}",
    "timestamp": "2025-08-05 18:31:45"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import math\n\ndef distance(point1, point2):\n    return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)\n\ndef point_inside_circle(point, circle_center, radius):\n    return distance(point, circle_center) <= radius\n\ndef point_inside_triangle(px, py, x1, y1, x2, y2, x3, y3):\n    def area(x1, y1, x2, y2, x3, y3):\n        return abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) / 2.0)\n  \n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(px, py, x2, y2, x3, y3)\n    A2 = area(x1, y1, px, py, x3, y3)\n    A3 = area(x1, y1, x2, y2, px, py)\n   \n    return A == A1 + A2 + A3\n\ndef triangle_circle_relationship(triangle, circle_center, radius):\n    x1, y1, x2, y2, x3, y3 = triangle\n    cx, cy = circle_center\n    \n    triangle_vertices = [(x1, y1), (x2, y2), (x3, y3)]\n    \n    all_inside_triangle = all(point_inside_triangle(cx, cy, x1, y1, x2, y2, x3, y3) for point in triangle_vertices)\n    all_inside_circle = all(point_inside_circle(vertex, circle_center, radius) for vertex in triangle_vertices)\n    \n    if all_inside_triangle and distance(circle_center, (x1, y1)) < radius and distance(circle_center, (x2, y2)) < radius and distance(circle_center, (x3, y3)) < radius:\n        return \"Circle Inside\"\n    elif all_inside_circle:\n        return \"Triangle Inside\"\n    elif any(point_inside_circle(vertex, circle_center, radius) for vertex in triangle_vertices) or any(point_inside_triangle(x, y, x1, y1, x2, y2, x3, y3) for x, y in [(cx + dx, cy + dy) for dx, dy in [(radius, 0), (-radius, 0), (0, radius), (0, -radius)]]):\n        return \"Intersecting\"\n    else:\n        return \"Disjoint\"\n\n# Example Usage:\ntriangle = (0, 0, 4, 0, 2, 3)\ncircle = ((2, 1), 1)\nprint(triangle_circle_relationship(triangle, circle[0], circle[1]))  # Example: 'Disjoint'",
    "timestamp": "2025-08-12 23:33:07"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.awt.Point;\nimport java.awt.geom.Line2D;\n\npublic class TriangleCircleRelationship {\n\n    public static void main(String[] args) {\n        Point vertex1 = new Point(1, 1);\n        Point vertex2 = new Point(4, 1);\n        Point vertex3 = new Point(1, 5);\n        Point center = new Point(3, 2);\n        int radius = 2;\n\n        String result = determineRelationship(vertex1, vertex2, vertex3, center, radius);\n        System.out.println(result);\n    }\n\n    public static String determineRelationship(Point v1, Point v2, Point v3, Point center, int radius) {\n        double rSquared = radius * radius;\n\n        // Check if the circle intersects any of the triangle's edges or vertices\n        if (pointInCircle(v1, center, rSquared) || pointInCircle(v2, center, rSquared) || pointInCircle(v3, center, rSquared)) {\n            return \"Intersecting\";\n        }\n        if (lineCircleIntersect(v1, v2, center, radius) || lineCircleIntersect(v2, v3, center, radius) || lineCircleIntersect(v3, v1, center, radius)) {\n            return \"Intersecting\";\n        }\n\n        // Check if the circle is completely inside the triangle\n        if (pointInTriangle(center, v1, v2, v3)) {\n            return \"Circle Inside Triangle\";\n        }\n\n        // Check if the triangle is completely inside the circle\n        if (pointInCircle(v1, center, rSquared) && pointInCircle(v2, center, rSquared) && pointInCircle(v3, center, rSquared)) {\n            return \"Triangle Inside Circle\";\n        }\n\n        return \"Separate\";\n    }\n\n    private static boolean pointInCircle(Point p, Point center, double rSquared) {\n        double dx = p.x - center.x;\n        double dy = p.y - center.y;\n        return (dx * dx + dy * dy) <= rSquared;\n    }\n\n    private static boolean lineCircleIntersect(Point p1, Point p2, Point center, int radius) {\n        double distance = Line2D.ptSegDist(p1.x, p1.y, p2.x, p2.y, center.x, center.y);\n        return distance <= radius;\n    }\n\n    private static boolean pointInTriangle(Point pt, Point v1, Point v2, Point v3) {\n        double d1 = sign(pt, v1, v2);\n        double d2 = sign(pt, v2, v3);\n        double d3 = sign(pt, v3, v1);\n\n        boolean hasNeg = (d1 < 0) || (d2 < 0) || (d3 < 0);\n        boolean hasPos = (d1 > 0) || (d2 > 0) || (d3 > 0);\n\n        return !(hasNeg && hasPos);\n    }\n\n    private static double sign(Point p1, Point p2, Point p3) {\n        return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n    }\n}",
    "timestamp": "2025-08-12 23:33:15"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <math.h>\n\n// Define a point structure\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\n// Function to calculate the square of the distance between two points\nint distanceSquared(Point p1, Point p2) {\n    int dx = p2.x - p1.x;\n    int dy = p2.y - p1.y;\n    return dx * dx + dy * dy;\n}\n\n// Function to check if a point is inside or on the boundary of a circle\nint isPointInCircle(Point p, Point center, int radius) {\n    return distanceSquared(p, center) <= radius * radius;\n}\n\n// Function to check if a line segment intersects with the circle\nint doesLineIntersectCircle(Point p1, Point p2, Point center, int radius) {\n    // Translate the line segment and circle center to have center at origin\n    Point translatedP1 = {p1.x - center.x, p1.y - center.y};\n    Point translatedP2 = {p2.x - center.x, p2.y - center.y};\n    int dx = translatedP2.x - translatedP1.x;\n    int dy = translatedP2.y - translatedP1.y;\n    int a = dx * dx + dy * dy;\n    int b = 2 * (translatedP1.x * dx + translatedP1.y * dy);\n    int c = translatedP1.x * translatedP1.x + translatedP1.y * translatedP1.y - radius * radius;\n    int discriminant = b * b - 4 * a * c;\n    return discriminant >= 0;\n}\n\nint main() {\n    Point triangle[3], circleCenter;\n    int radius;\n\n    // Input triangle vertices\n    for (int i = 0; i < 3; ++i) {\n        scanf(\"%d %d\", &triangle[i].x, &triangle[i].y);\n    }\n\n    // Input circle center and radius\n    scanf(\"%d %d %d\", &circleCenter.x, &circleCenter.y, &radius);\n\n    // Check if any of the triangle vertices are inside the circle\n    int vertexInside = 0;\n    for (int i = 0; i < 3; ++i) {\n        if (isPointInCircle(triangle[i], circleCenter, radius)) {\n            vertexInside = 1;\n        }\n    }\n\n    // Check if any triangle sides intersect with the circle\n    int edgeIntersect = 0;\n    for (int i = 0; i < 3; ++i) {\n        Point p1 = triangle[i];\n        Point p2 = triangle[(i + 1) % 3];\n        if (doesLineIntersectCircle(p1, p2, circleCenter, radius)) {\n            edgeIntersect = 1;\n        }\n    }\n\n    if (vertexInside) {\n        printf(\"Circle and triangle overlap\\n\");\n    } else if (edgeIntersect) {\n        printf(\"Circle and triangle intersect\\n\");\n    } else {\n        printf(\"Circle and triangle are separate\\n\");\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-12 23:33:23"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def point_inside_circle(point, circle_center, radius):\n    x, y = point\n    cx, cy = circle_center\n    return ((x - cx)**2 + (y - cy)**2) <= radius**2\n\ndef line_intersects_circle(line_start, line_end, circle_center, radius):\n    x1, y1 = line_start\n    x2, y2 = line_end\n    cx, cy = circle_center\n\n    # Line vector\n    dx = x2 - x1\n    dy = y2 - y1\n\n    # Vector from line start to circle center\n    A = dx**2 + dy**2\n    B = 2 * (dx * (x1 - cx) + dy * (y1 - cy))\n    C = (x1 - cx)**2 + (y1 - cy)**2 - radius**2\n\n    discriminant = B**2 - 4*A*C\n\n    if discriminant < 0:\n        return False\n\n    t1 = (-B + (discriminant)**0.5) / (2*A)\n    t2 = (-B - (discriminant)**0.5) / (2*A)\n\n    return (0 <= t1 <= 1) or (0 <= t2 <= 1)\n\ndef triangle_circle_relation(triangle_vertices, circle_center, radius):\n    # Check if any triangle vertex is inside the circle\n    for vertex in triangle_vertices:\n        if point_inside_circle(vertex, circle_center, radius):\n            return \"Intersecting\"\n\n    # Check if any circle point is inside the triangle\n    if point_inside_circle(circle_center, triangle_vertices[0], triangle_vertices[1], triangle_vertices[2]):\n        return \"Intersecting\"\n\n    # Check if any triangle edge intersects the circle\n    for i in range(3):\n        line_start = triangle_vertices[i]\n        line_end = triangle_vertices[(i+1)%3]\n        if line_intersects_circle(line_start, line_end, circle_center, radius):\n            return \"Intersecting\"\n\n    # Check if triangle is fully inside or outside the circle\n    triangle_min_x = min(vertex[0] for vertex in triangle_vertices)\n    triangle_max_x = max(vertex[0] for vertex in triangle_vertices)\n    triangle_min_y = min(vertex[1] for vertex in triangle_vertices)\n    triangle_max_y = max(vertex[1] for vertex in triangle_vertices)\n\n    circle_left = circle_center[0] - radius\n    circle_right = circle_center[0] + radius\n    circle_bottom = circle_center[1] - radius\n    circle_top = circle_center[1] + radius\n\n    if (triangle_min_x >= circle_left and triangle_max_x <= circle_right and\n        triangle_min_y >= circle_bottom and triangle_max_y <= circle_top):\n        return \"Inside\"\n    \n    return \"Outside\"\n\ndef point_inside_triangle(point, vertex1, vertex2, vertex3):\n    def sign(p1, p2, p3):\n        return (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1])\n\n    d1 = sign(point, vertex1, vertex2)\n    d2 = sign(point, vertex2, vertex3)\n    d3 = sign(point, vertex3, vertex1)\n\n    has_neg = (d1 < 0) or (d2 < 0) or (d3 < 0)\n    has_pos = (d1 > 0) or (d2 > 0) or (d3 > 0)\n\n    return not (has_neg and has_pos)",
    "timestamp": "2025-08-12 23:34:04"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import math\n\ndef point_in_triangle(p, a, b, c):\n    def sign(p1, p2, p3):\n        return (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1])\n\n    d1 = sign(p, a, b)\n    d2 = sign(p, b, c)\n    d3 = sign(p, c, a)\n\n    has_neg = (d1 < 0) or (d2 < 0) or (d3 < 0)\n    has_pos = (d1 > 0) or (d2 > 0) or (d3 > 0)\n\n    return not (has_neg and has_pos)\n\ndef point_on_segment(p, a, b):\n    cross = (b[0] - a[0]) * (p[1] - a[1]) - (b[1] - a[1]) * (p[0] - a[0])\n    if abs(cross) > 1e-12:\n        return False\n    min_x = min(a[0], b[0])\n    max_x = max(a[0], b[0])\n    min_y = min(a[1], b[1])\n    max_y = max(a[1], b[1])\n    return (p[0] >= min_x - 1e-12 and p[0] <= max_x + 1e-12 and\n            p[1] >= min_y - 1e-12 and p[1] <= max_y + 1e-12)\n\ndef point_in_circle(p, center, radius):\n    dx = p[0] - center[0]\n    dy = p[1] - center[1]\n    return dx * dx + dy * dy <= radius * radius + 1e-12\n\ndef segment_circle_intersection(a, b, center, radius):\n    ax, ay = a[0] - center[0], a[1] - center[1]\n    bx, by = b[0] - center[0], b[1] - center[1]\n    dx, dy = bx - ax, by - ay\n    dr_squared = dx * dx + dy * dy\n    D = ax * by - bx * ay\n    discriminant = radius * radius * dr_squared - D * D\n\n    if discriminant < 0:\n        return False\n\n    sqrt_discriminant = math.sqrt(discriminant)\n    sign_dy = -1 if dy < 0 else 1\n    x1 = (D * dy + sign_dy * dx * sqrt_discriminant) / dr_squared\n    y1 = (-D * dx + abs(dy) * sqrt_discriminant) / dr_squared\n    x2 = (D * dy - sign_dy * dx * sqrt_discriminant) / dr_squared\n    y2 = (-D * dx - abs(dy) * sqrt_discriminant) / dr_squared\n\n    def is_between(x, y):\n        min_x = min(ax, bx)\n        max_x = max(ax, bx)\n        min_y = min(ay, by)\n        max_y = max(ay, by)\n        return (x >= min_x - 1e-12 and x <= max_x + 1e-12 and\n                y >= min_y - 1e-12 and y <= max_y + 1e-12)\n\n    if discriminant == 0:\n        return is_between(x1, y1)\n    else:\n        return is_between(x1, y1) or is_between(x2, y2)\n\ndef triangle_circle_relationship(triangle, circle):\n    a, b, c = triangle\n    center, radius = circle\n\n    # Check if any vertex of the triangle is inside the circle\n    for vertex in [a, b, c]:\n        if point_in_circle(vertex, center, radius):\n            return \"The circle and triangle intersect.\"\n\n    # Check if any edge of the triangle intersects the circle\n    edges = [(a, b), (b, c), (c, a)]\n    for edge in edges:\n        if segment_circle_intersection(edge[0], edge[1], center, radius):\n            return \"The circle and triangle intersect.\"\n\n    # Check if the circle is entirely inside the triangle\n    if point_in_triangle(center, a, b, c):\n        # Check if all edges are outside or tangent to the circle\n        all_outside = True\n        for edge in edges:\n            if segment_circle_intersection(edge[0], edge[1], center, radius):\n                all_outside = False\n                break\n        if all_outside:\n            return \"The circle is inside the triangle.\"\n\n    # Check if the triangle is entirely inside the circle\n    triangle_inside = True\n    for vertex in [a, b, c]:\n        if not point_in_circle(vertex, center, radius):\n            triangle_inside = False\n            break\n    if triangle_inside:\n        return \"The triangle is inside the circle.\"\n\n    return \"The circle and triangle are separate.\"\n\n# Example usage:\n# triangle = [(0, 0), (4, 0), (2, 4)]\n# circle = [(2, 2), 1]\n# print(triangle_circle_relationship(triangle, circle))",
    "timestamp": "2025-08-12 23:42:40"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nstruct Point {\n    int x, y;\n};\n\nstruct Triangle {\n    Point v1, v2, v3;\n};\n\nstruct Circle {\n    Point center;\n    int radius;\n};\n\ndouble distanceSquared(Point a, Point b) {\n    return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);\n}\n\ndouble pointLineDistanceSquared(Point a, Point b, Point p) {\n    double lengthSquared = distanceSquared(a, b);\n    if(lengthSquared == 0) return distanceSquared(p, a);\n    double t = max(0.0, min(1.0, ((p.x - a.x) * (b.x - a.x) + (p.y - a.y) * (b.y - a.y)) / lengthSquared));\n    Point projection = { int(a.x + t * (b.x - a.x)), int(a.y + t * (b.y - a.y)) };\n    return distanceSquared(p, projection);\n}\n\nbool pointInCircle(Point p, Circle c) {\n    return distanceSquared(p, c.center) <= c.radius * c.radius;\n}\n\nbool circleIntersectsLine(Circle c, Point a, Point b) {\n    return pointLineDistanceSquared(a, b, c.center) <= c.radius * c.radius;\n}\n\nbool pointInTriangle(Point p, Triangle t) {\n    auto area = [](Point a, Point b, Point c) {\n        return abs((a.x*(b.y-c.y) + b.x*(c.y-a.y) + c.x*(a.y-b.y)) / 2.0);\n    };\n    double A = area(t.v1, t.v2, t.v3);\n    double A1 = area(p, t.v2, t.v3);\n    double A2 = area(t.v1, p, t.v3);\n    double A3 = area(t.v1, t.v2, p);\n    return (A == A1 + A2 + A3);\n}\n\nstring determineRelationship(Triangle t, Circle c) {\n    bool circleContainsAnyVertex = pointInCircle(t.v1, c) || pointInCircle(t.v2, c) || pointInCircle(t.v3, c);\n    bool triangleContainsCircleCenter = pointInTriangle(c.center, t);\n\n    if(circleContainsAnyVertex || triangleContainsCircleCenter) return \"Intersect\";\n\n    if(circleIntersectsLine(c, t.v1, t.v2) || circleIntersectsLine(c, t.v2, t.v3) || circleIntersectsLine(c, t.v3, t.v1))\n        return \"Intersect\";\n\n    double maxDistance = max({distanceSquared(c.center, t.v1), distanceSquared(c.center, t.v2), distanceSquared(c.center, t.v3)});\n    double radiusSquared = c.radius * c.radius;\n\n    if(maxDistance < radiusSquared) return \"Circle Inside Triangle\";\n    if(!triangleContainsCircleCenter) {\n        double minDistance = min({pointLineDistanceSquared(t.v1, t.v2, c.center), pointLineDistanceSquared(t.v2, t.v3, c.center), pointLineDistanceSquared(t.v3, t.v1, c.center)});\n        if(minDistance > radiusSquared) return \"Triangle Outside Circle\";\n    }\n\n    return \"Intersect\";\n}\n\nint main() {\n    Triangle t;\n    Circle c;\n    cin >> t.v1.x >> t.v1.y >> t.v2.x >> t.v2.y >> t.v3.x >> t.v3.y;\n    cin >> c.center.x >> c.center.y >> c.radius;\n\n    cout << determineRelationship(t, c) << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-13 10:50:55"
  }
]