[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nvoid solve() {\n    int R, C;\n    scanf(\"%d %d\", &R, &C);\n    int table[R][C];\n    int row_unknown[R], col_unknown[C];\n    int row_sum[R], col_sum[C];\n    memset(row_sum, 0, sizeof(row_sum));\n    memset(col_sum, 0, sizeof(col_sum));\n    memset(row_unknown, 0, sizeof(row_unknown));\n    memset(col_unknown, 0, sizeof(col_unknown));\n\n    for (int i = 0; i < R; i++) {\n        for (int j = 0; j < C; j++) {\n            char input[10];\n            scanf(\"%s\", input);\n            if (input[0] == '?') {\n                table[i][j] = -1;\n                row_unknown[i]++;\n                col_unknown[j]++;\n            } else {\n                int num;\n                sscanf(input, \"%d\", &num);\n                table[i][j] = num;\n                row_sum[i] += num;\n                col_sum[j] += num;\n            }\n        }\n    }\n\n    int changed;\n    do {\n        changed = 0;\n        for (int i = 0; i < R; i++) {\n            if (row_unknown[i] == 1) {\n                int pos = -1;\n                int total = 0;\n                for (int j = 0; j < C; j++) {\n                    if (table[i][j] == -1) {\n                        pos = j;\n                    } else {\n                        total += table[i][j];\n                    }\n                }\n                if (pos != -1) {\n                    int sum;\n                    scanf(\"%d\", &sum);\n                    table[i][pos] = sum - total;\n                    row_sum[i] += table[i][pos];\n                    col_sum[pos] += table[i][pos];\n                    row_unknown[i]--;\n                    col_unknown[pos]--;\n                    changed = 1;\n                }\n            }\n        }\n        for (int j = 0; j < C; j++) {\n            if (col_unknown[j] == 1) {\n                int pos = -1;\n                int total = 0;\n                for (int i = 0; i < R; i++) {\n                    if (table[i][j] == -1) {\n                        pos = i;\n                    } else {\n                        total += table[i][j];\n                    }\n                }\n                if (pos != -1) {\n                    int sum;\n                    scanf(\"%d\", &sum);\n                    table[pos][j] = sum - total;\n                    row_sum[pos] += table[pos][j];\n                    col_sum[j] += table[pos][j];\n                    row_unknown[pos]--;\n                    col_unknown[j]--;\n                    changed = 1;\n                }\n            }\n        }\n    } while (changed);\n\n    int possible = 1;\n    for (int i = 0; i < R; i++) {\n        if (row_unknown[i] > 0) {\n            possible = 0;\n            break;\n        }\n    }\n    if (possible) {\n        for (int j = 0; j < C; j++) {\n            if (col_unknown[j] > 0) {\n                possible = 0;\n                break;\n            }\n        }\n    }\n\n    if (!possible) {\n        printf(\"NO\\n\");\n    } else {\n        for (int i = 0; i < R; i++) {\n            for (int j = 0; j < C; j++) {\n                if (j > 0) printf(\" \");\n                printf(\"%d\", table[i][j]);\n            }\n            printf(\"\\n\");\n        }\n    }\n}\n\nint main() {\n    int T;\n    scanf(\"%d\", &T);\n    while (T--) {\n        solve();\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 19:04:41"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class SalesReconstruction {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int datasets = scanner.nextInt();\n        \n        for (int d = 0; d < datasets; d++) {\n            int stores = scanner.nextInt();\n            int products = scanner.nextInt();\n            \n            int[][] sales = new int[stores][products];\n            int[] rowTotals = new int[stores];\n            int[] colTotals = new int[products];\n            \n            for (int i = 0; i < stores; i++) {\n                for (int j = 0; j < products; j++) {\n                    String input = scanner.next();\n                    if (!input.equals(\"?\")) {\n                        sales[i][j] = Integer.parseInt(input);\n                    } else {\n                        sales[i][j] = -1;\n                    }\n                }\n                rowTotals[i] = scanner.nextInt();\n            }\n            \n            for (int j = 0; j < products; j++) {\n                colTotals[j] = scanner.nextInt();\n            }\n            \n            String result = reconstructSales(sales, rowTotals, colTotals);\n            System.out.println(result);\n        }\n        \n        scanner.close();\n    }\n    \n    private static String reconstructSales(int[][] sales, int[] rowTotals, int[] colTotals) {\n        int stores = sales.length;\n        int products = sales[0].length;\n        int unknownCount = 0;\n        int unknownRow = -1, unknownCol = -1;\n        \n        for (int i = 0; i < stores; i++) {\n            for (int j = 0; j < products; j++) {\n                if (sales[i][j] == -1) {\n                    unknownCount++;\n                    unknownRow = i;\n                    unknownCol = j;\n                }\n            }\n        }\n        \n        if (unknownCount == 0) {\n            return validateSales(sales, rowTotals, colTotals) ? \"YES\" : \"NO\";\n        }\n        \n        if (unknownCount == 1) {\n            int rowSum = 0;\n            int colSum = 0;\n            \n            for (int j = 0; j < products; j++) {\n                if (j != unknownCol && sales[unknownRow][j] != -1) {\n                    rowSum += sales[unknownRow][j];\n                }\n            }\n            \n            for (int i = 0; i < stores; i++) {\n                if (i != unknownRow && sales[i][unknownCol] != -1) {\n                    colSum += sales[i][unknownCol];\n                }\n            }\n            \n            int value = rowTotals[unknownRow] - rowSum;\n            if (value < 0) return \"NO\";\n            \n            int colValue = colTotals[unknownCol] - colSum;\n            if (colValue < 0) return \"NO\";\n            \n            if (value != colValue) return \"NO\";\n            \n            sales[unknownRow][unknownCol] = value;\n            return validateSales(sales, rowTotals, colTotals) ? value + \"\" : \"NO\";\n        }\n        \n        return \"NO\";\n    }\n    \n    private static boolean validateSales(int[][] sales, int[] rowTotals, int[] colTotals) {\n        int stores = sales.length;\n        int products = sales[0].length;\n        \n        for (int i = 0; i < stores; i++) {\n            int rowSum = 0;\n            for (int j = 0; j < products; j++) {\n                rowSum += sales[i][j];\n            }\n            if (rowSum != rowTotals[i]) return false;\n        }\n        \n        for (int j = 0; j < products; j++) {\n            int colSum = 0;\n            for (int i = 0; i < stores; i++) {\n                colSum += sales[i][j];\n            }\n            if (colSum != colTotals[j]) return false;\n        }\n        \n        return true;\n    }\n}",
    "timestamp": "2025-08-05 19:04:54"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nvoid solve() {\n    int N, M;\n    cin >> N >> M;\n    vector<vector<int>> table(N, vector<int>(M));\n    vector<int> rowSum(N, 0), colSum(M, 0);\n    vector<bool> rowKnown(N, false), colKnown(M, false);\n    vector<int> rowUnknown(N, 0), colUnknown(M, 0);\n    \n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < M; ++j) {\n            char c;\n            cin >> c;\n            if (c == '?') {\n                table[i][j] = INT_MIN;\n                rowUnknown[i]++;\n                colUnknown[j]++;\n            } else {\n                int num = 0;\n                for (char ch : string(1, c)) {\n                    num = num * 10 + (ch - '0');\n                }\n                table[i][j] = num;\n                rowSum[i] += num;\n                colSum[j] += num;\n            }\n        }\n    }\n    \n    vector<int> rowTotal(N), colTotal(M);\n    for (int i = 0; i < N; ++i) cin >> rowTotal[i];\n    for (int j = 0; j < M; ++j) cin >> colTotal[j];\n    \n    bool changed;\n    do {\n        changed = false;\n        for (int i = 0; i < N; ++i) {\n            if (rowUnknown[i] == 1 && !rowKnown[i]) {\n                int pos = -1;\n                for (int j = 0; j < M; ++j) {\n                    if (table[i][j] == INT_MIN) {\n                        pos = j;\n                        break;\n                    }\n                }\n                int val = rowTotal[i] - rowSum[i];\n                if (colUnknown[pos] == 0 && colSum[pos] + val != colTotal[pos]) {\n                    cout << \"NO\" << endl;\n                    return;\n                }\n                table[i][pos] = val;\n                rowSum[i] += val;\n                colSum[pos] += val;\n                rowUnknown[i]--;\n                colUnknown[pos]--;\n                rowKnown[i] = true;\n                if (colUnknown[pos] == 0) {\n                    if (colSum[pos] != colTotal[pos]) {\n                        cout << \"NO\" << endl;\n                        return;\n                    }\n                    colKnown[pos] = true;\n                }\n                changed = true;\n            }\n        }\n        for (int j = 0; j < M; ++j) {\n            if (colUnknown[j] == 1 && !colKnown[j]) {\n                int pos = -1;\n                for (int i = 0; i < N; ++i) {\n                    if (table[i][j] == INT_MIN) {\n                        pos = i;\n                        break;\n                    }\n                }\n                int val = colTotal[j] - colSum[j];\n                if (rowUnknown[pos] == 0 && rowSum[pos] + val != rowTotal[pos]) {\n                    cout << \"NO\" << endl;\n                    return;\n                }\n                table[pos][j] = val;\n                rowSum[pos] += val;\n                colSum[j] += val;\n                colUnknown[j]--;\n                rowUnknown[pos]--;\n                colKnown[j] = true;\n                if (rowUnknown[pos] == 0) {\n                    if (rowSum[pos] != rowTotal[pos]) {\n                        cout << \"NO\" << endl;\n                        return;\n                    }\n                    rowKnown[pos] = true;\n                }\n                changed = true;\n            }\n        }\n    } while (changed);\n    \n    for (int i = 0; i < N; ++i) {\n        if (rowUnknown[i] > 0) {\n            cout << \"NO\" << endl;\n            return;\n        }\n    }\n    for (int j = 0; j < M; ++j) {\n        if (colUnknown[j] > 0) {\n            cout << \"NO\" << endl;\n            return;\n        }\n    }\n    \n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < M; ++j) {\n            if (j > 0) cout << \" \";\n            cout << table[i][j];\n        }\n        cout << endl;\n    }\n}\n\nint main() {\n    int T;\n    cin >> T;\n    while (T--) {\n        solve();\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 19:05:31"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_STORES 100\n#define MAX_PRODUCTS 100\n\nint main() {\n    int datasets;\n    scanf(\"%d\", &datasets);\n\n    for (int dataset = 0; dataset < datasets; dataset++) {\n        int stores, products;\n        scanf(\"%d %d\", &stores, &products);\n\n        int sales[MAX_STORES][MAX_PRODUCTS];\n        int row_sum[MAX_STORES] = {0};\n        int col_sum[MAX_PRODUCTS] = {0};\n        int unknown_rows[MAX_STORES] = {0};\n        int unknown_cols[MAX_PRODUCTS] = {0};\n        int unknown_row_count = 0, unknown_col_count = 0;\n\n        // Read sales data\n        for (int i = 0; i < stores; i++) {\n            for (int j = 0; j < products; j++) {\n                char input[10];\n                scanf(\"%s\", input);\n\n                if (strcmp(input, \"?\") == 0) {\n                    sales[i][j] = -1;\n                    unknown_rows[i]++;\n                    unknown_cols[j]++;\n                } else {\n                    sales[i][j] = atoi(input);\n                    row_sum[i] += sales[i][j];\n                    col_sum[j] += sales[i][j];\n                }\n            }\n        }\n\n        // Count unknown rows and columns\n        for (int i = 0; i < stores; i++)\n            if (unknown_rows[i] > 0) unknown_row_count++;\n        for (int j = 0; j < products; j++)\n            if (unknown_cols[j] > 0) unknown_col_count++;\n\n        // Check if unique solution is possible\n        int solution_possible = 1;\n        for (int i = 0; i < stores; i++) {\n            if (unknown_rows[i] == 1) {\n                int missing_value = 0;\n                int missing_col = -1;\n                for (int j = 0; j < products; j++) {\n                    if (sales[i][j] == -1) {\n                        missing_col = j;\n                    } else {\n                        missing_value += sales[i][j];\n                    }\n                }\n                if (missing_col != -1) {\n                    sales[i][missing_col] = col_sum[missing_col] - missing_value;\n                }\n            }\n        }\n\n        for (int j = 0; j < products; j++) {\n            if (unknown_cols[j] == 1) {\n                int missing_value = 0;\n                int missing_row = -1;\n                for (int i = 0; i < stores; i++) {\n                    if (sales[i][j] == -1) {\n                        missing_row = i;\n                    } else {\n                        missing_value += sales[i][j];\n                    }\n                }\n                if (missing_row != -1) {\n                    sales[missing_row][j] = row_sum[missing_row] - missing_value;\n                }\n            }\n        }\n\n        // Verify solution\n        for (int i = 0; i < stores; i++) {\n            int current_row_sum = 0;\n            for (int j = 0; j < products; j++) {\n                if (sales[i][j] == -1) {\n                    solution_possible = 0;\n                    break;\n                }\n                current_row_sum += sales[i][j];\n            }\n            if (current_row_sum != row_sum[i]) {\n                solution_possible = 0;\n                break;\n            }\n        }\n\n        for (int j = 0; j < products; j++) {\n            int current_col_sum = 0;\n            for (int i = 0; i < stores; i++) {\n                current_col_sum += sales[i][j];\n            }\n            if (current_col_sum != col_sum[j]) {\n                solution_possible = 0;\n                break;\n            }\n        }\n\n        // Output results\n        if (!solution_possible) {\n            printf(\"NO\\n\");\n        } else {\n            for (int i = 0; i < stores; i++) {\n                for (int j = 0; j < products; j++) {\n                    printf(\"%d\", sales[i][j]);\n                    if (j < products - 1) printf(\" \");\n                }\n                printf(\"\\n\");\n            }\n        }\n\n        // Print separator if not last dataset\n        if (dataset < datasets - 1) {\n            printf(\"\\n\");\n        }\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 19:05:46"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <sstream>\n#include <limits>\n\nusing namespace std;\n\nvoid solve() {\n    int R, C;\n    cin >> R >> C;\n    \n    vector<vector<string>> table(R, vector<string>(C));\n    vector<int> rowSum(R, 0);\n    vector<int> colSum(C, 0);\n    vector<pair<int, int>> unknown;\n    \n    for (int i = 0; i < R; i++) {\n        for (int j = 0; j < C; j++) {\n            cin >> table[i][j];\n            if (table[i][j] == \"?\") {\n                unknown.push_back({i, j});\n            } else {\n                int val = stoi(table[i][j]);\n                rowSum[i] += val;\n                colSum[j] += val;\n            }\n        }\n    }\n    \n    int totalRowSum = 0, totalColSum = 0;\n    cin >> totalRowSum >> totalColSum;\n    \n    if (unknown.empty()) {\n        if (rowSum == vector<int>(R, totalRowSum) && \n            colSum == vector<int>(C, totalColSum)) {\n            cout << \"Unique\" << endl;\n        } else {\n            cout << \"NO\" << endl;\n        }\n        return;\n    }\n    \n    if (unknown.size() == 1) {\n        int r = unknown[0].first;\n        int c = unknown[0].second;\n        \n        int missingRowVal = totalRowSum - rowSum[r];\n        int missingColVal = totalColSum - colSum[c];\n        \n        if (missingRowVal == missingColVal) {\n            cout << missingRowVal << endl;\n        } else {\n            cout << \"NO\" << endl;\n        }\n        return;\n    }\n    \n    if (unknown.size() > 1) {\n        cout << \"NO\" << endl;\n    }\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    \n    int T;\n    cin >> T;\n    \n    while (T--) {\n        solve();\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 19:05:54"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()) {\n            int n = scanner.nextInt();\n            int m = scanner.nextInt();\n            if (n == 0 && m == 0) break;\n            \n            int[][] table = new int[n][m];\n            int[] rowUnknowns = new int[n];\n            int[] colUnknowns = new int[m];\n            int[] rowSum = new int[n];\n            int[] colSum = new int[m];\n            int totalSum = 0;\n            \n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    String val = scanner.next();\n                    if (val.equals(\"?\")) {\n                        table[i][j] = Integer.MIN_VALUE;\n                        rowUnknowns[i]++;\n                        colUnknowns[j]++;\n                    } else {\n                        int num = Integer.parseInt(val);\n                        table[i][j] = num;\n                        rowSum[i] += num;\n                        colSum[j] += num;\n                        totalSum += num;\n                    }\n                }\n            }\n            \n            boolean changed;\n            do {\n                changed = false;\n                for (int i = 0; i < n; i++) {\n                    if (rowUnknowns[i] == 1) {\n                        int unknownCol = -1;\n                        int rowTotal = scanner.nextInt();\n                        for (int j = 0; j < m; j++) {\n                            if (table[i][j] == Integer.MIN_VALUE) {\n                                unknownCol = j;\n                                break;\n                            }\n                        }\n                        int missing = rowTotal - rowSum[i];\n                        if (colUnknowns[unknownCol] == 0) {\n                            if (colSum[unknownCol] + missing != scanner.nextInt()) {\n                                System.out.println(\"NO\");\n                                continue;\n                            }\n                        }\n                        table[i][unknownCol] = missing;\n                        rowSum[i] += missing;\n                        colSum[unknownCol] += missing;\n                        totalSum += missing;\n                        rowUnknowns[i]--;\n                        colUnknowns[unknownCol]--;\n                        changed = true;\n                    }\n                }\n                \n                for (int j = 0; j < m; j++) {\n                    if (colUnknowns[j] == 1) {\n                        int unknownRow = -1;\n                        int colTotal = scanner.nextInt();\n                        for (int i = 0; i < n; i++) {\n                            if (table[i][j] == Integer.MIN_VALUE) {\n                                unknownRow = i;\n                                break;\n                            }\n                        }\n                        int missing = colTotal - colSum[j];\n                        if (rowUnknowns[unknownRow] == 0) {\n                            if (rowSum[unknownRow] + missing != scanner.nextInt()) {\n                                System.out.println(\"NO\");\n                                continue;\n                            }\n                        }\n                        table[unknownRow][j] = missing;\n                        rowSum[unknownRow] += missing;\n                        colSum[j] += missing;\n                        totalSum += missing;\n                        colUnknowns[j]--;\n                        rowUnknowns[unknownRow]--;\n                        changed = true;\n                    }\n                }\n            } while (changed);\n            \n            boolean hasUnknown = false;\n            for (int i = 0; i < n; i++) {\n                if (rowUnknowns[i] > 0) {\n                    hasUnknown = true;\n                    break;\n                }\n            }\n            \n            if (hasUnknown) {\n                System.out.println(\"NO\");\n            } else {\n                for (int i = 0; i < n; i++) {\n                    for (int j = 0; j < m; j++) {\n                        if (j > 0) System.out.print(\" \");\n                        System.out.print(table[i][j]);\n                    }\n                    System.out.println();\n                }\n            }\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 19:06:29"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def reconstruct_sales_data(datasets):\n    def reconstruct_table(data, r_sums, c_sums):\n        n = len(r_sums)\n        m = len(c_sums)\n\n        for i in range(n):\n            known_count = sum(1 for x in data[i] if x != '?')\n            if known_count == m:\n                continue\n            elif known_count == m - 1:\n                known_sum = sum(x for x in data[i] if x != '?')\n                missing_index = data[i].index('?')\n                data[i][missing_index] = r_sums[i] - known_sum\n\n        for j in range(m):\n            known_count = sum(1 for i in range(n) if data[i][j] != '?')\n            if known_count == n:\n                continue\n            elif known_count == n - 1:\n                known_sum = sum(data[i][j] for i in range(n) if data[i][j] != '?')\n                missing_index = next(i for i in range(n) if data[i][j] == '?')\n                data[missing_index][j] = c_sums[j] - known_sum\n\n        for i in range(n):\n            if sum(data[i]) != r_sums[i]:\n                return 'NO'\n        for j in range(m):\n            col_sum = sum(data[i][j] for i in range(n))\n            if col_sum != c_sums[j]:\n                return 'NO'\n        \n        return data\n\n    results = []\n    for data_set in datasets:\n        n, m = data_set['dimensions']\n        raw_data = data_set['data']\n        row_sums = data_set['row_sums']\n        col_sums = data_set['col_sums']\n\n        data = [[int(x) if x != '?' else '?' for x in row] for row in raw_data]\n\n        result = reconstruct_table(data, row_sums, col_sums)\n        if result == 'NO':\n            results.append('NO')\n        else:\n            formatted_result = '\\n'.join(' '.join(map(str, row)) for row in result)\n            results.append(formatted_result)\n\n    return '\\n\\n'.join(results)\n\n\n# Example usage\ndatasets = [\n    {\n        'dimensions': (2, 2),\n        'data': [['?', '2'], ['3', '?']],\n        'row_sums': [4, 5],\n        'col_sums': [5, 4],\n    },\n    {\n        'dimensions': (3, 3),\n        'data': [['?', '1', '1'], ['2', '?', '1'], ['2', '2', '?']],\n        'row_sums': [3, 3, 6],\n        'col_sums': [4, 3, 5],\n    }\n]\n\noutput = reconstruct_sales_data(datasets)\nprint(output)",
    "timestamp": "2025-08-13 02:22:15"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int datasetCount = scanner.nextInt();\n\n        for (int dataSet = 0; dataSet < datasetCount; dataSet++) {\n            int rows = scanner.nextInt();\n            int cols = scanner.nextInt();\n\n            int[][] salesData = new int[rows][cols];\n            int[] rowSums = new int[rows];\n            int[] colSums = new int[cols];\n\n            for (int i = 0; i < rows; i++) {\n                for (int j = 0; j < cols; j++) {\n                    String input = scanner.next();\n                    if (input.equals(\"?\")) {\n                        salesData[i][j] = -1; // Represent unknown values with -1\n                    } else {\n                        salesData[i][j] = Integer.parseInt(input);\n                    }\n                }\n            }\n\n            for (int i = 0; i < rows; i++) {\n                rowSums[i] = scanner.nextInt();\n            }\n\n            for (int j = 0; j < cols; j++) {\n                colSums[j] = scanner.nextInt();\n            }\n\n            boolean solved = solve(salesData, rowSums, colSums);\n\n            if (!solved) {\n                System.out.println(\"NO\");\n            } else {\n                for (int i = 0; i < rows; i++) {\n                    for (int j = 0; j < cols; j++) {\n                        System.out.print(salesData[i][j] + \" \");\n                    }\n                    System.out.println();\n                }\n            }\n\n            if (dataSet < datasetCount - 1) {\n                System.out.println();\n            }\n        }\n\n        scanner.close();\n    }\n\n    private static boolean solve(int[][] salesData, int[] rowSums, int[] colSums) {\n        int rows = salesData.length;\n        int cols = salesData[0].length;\n        int[][] resolvedData = new int[rows][cols];\n\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (salesData[i][j] == -1) {\n                    int difference = rowSums[i] - sumRow(salesData, i);\n                    if (difference < 0 || difference + sumCol(salesData, j) > colSums[j]) {\n                        return false;\n                    }\n                    salesData[i][j] = difference;\n                }\n                resolvedData[i][j] = salesData[i][j];\n            }\n        }\n\n        return checkSums(resolvedData, rowSums, colSums);\n    }\n\n    private static int sumRow(int[][] salesData, int row) {\n        int sum = 0;\n        for (int val : salesData[row]) {\n            if (val != -1)\n                sum += val;\n        }\n        return sum;\n    }\n\n    private static int sumCol(int[][] salesData, int col) {\n        int sum = 0;\n        for (int[] row : salesData) {\n            if (row[col] != -1)\n                sum += row[col];\n        }\n        return sum;\n    }\n\n    private static boolean checkSums(int[][] resolvedData, int[] rowSums, int[] colSums) {\n        for (int i = 0; i < resolvedData.length; i++) {\n            if (sumRow(resolvedData, i) != rowSums[i]) {\n                return false;\n            }\n        }\n\n        for (int j = 0; j < resolvedData[0].length; j++) {\n            if (sumCol(resolvedData, j) != colSums[j]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}",
    "timestamp": "2025-08-13 02:22:22"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\n#define MAX_ROWS 100\n#define MAX_COLUMNS 100\n\nvoid solveSalesTable(int rows, int cols, char table[MAX_ROWS][MAX_COLUMNS][10], int dataSetNum) {\n    int sales[MAX_ROWS][MAX_COLUMNS];\n    bool hasQuestionMark = false;\n    \n    // Initialize sales matrix and check for question marks\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            if (table[i][j][0] == '?') {\n                sales[i][j] = -1; // Mark unfilled data\n                hasQuestionMark = true;\n            } else {\n                sales[i][j] = atoi(table[i][j]);\n            }\n        }\n    }\n    \n    // If no question mark, data should already be filled\n    if (!hasQuestionMark) {\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                printf(\"%d \", sales[i][j]);\n            }\n            printf(\"\\n\");\n        }\n        return;\n    }\n\n    // Filling in missing values if possible\n    bool solvable = true;\n    for (int i = 0; i < rows; i++) {\n        int rowSum = 0, knownValues = 0, unknownIndex = -1;\n        for (int j = 0; j < cols; j++) {\n            if (sales[i][j] != -1) {\n                rowSum += sales[i][j];\n                knownValues++;\n            } else {\n                unknownIndex = j;\n            }\n        }\n        // If one unknown and others known, fill in the missing value\n        if (knownValues == cols - 1 && unknownIndex != -1) {\n            sales[i][unknownIndex] = rowSum; // Assuming row total is known\n        } else if (unknownIndex != -1) {\n            solvable = false;\n            break;\n        }\n    }\n    \n    // If could not solve or multiple missing entries, output NO\n    if (!solvable) {\n        printf(\"NO\\n\");\n        return;\n    }\n\n    // Output the solved table\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            printf(\"%d \", sales[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int dataSets, rows, cols;\n    char table[MAX_ROWS][MAX_COLUMNS][10];\n    \n    // Input the number of datasets\n    scanf(\"%d\", &dataSets);\n\n    for (int dataSetNum = 0; dataSetNum < dataSets; dataSetNum++) {\n        // Input number of rows and columns for each dataset\n        scanf(\"%d %d\", &rows, &cols);\n\n        // Input the table data\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                scanf(\"%s\", table[i][j]);\n            }\n        }\n\n        // Solve and output results for each dataset\n        solveSalesTable(rows, cols, table, dataSetNum);\n\n        // Separate outputs for different datasets\n        if (dataSetNum < dataSets - 1) {\n            printf(\"\\n\");\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 02:22:30"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve_sales_table():\n    while True:\n        try:\n            # Read input dimensions\n            R, C = map(int, input().split())\n            if R == 0 and C == 0:\n                break\n\n            # Read sales table\n            table = []\n            for _ in range(R):\n                row = input().split()\n                table.append(row)\n\n            # First pass: calculate row and column totals\n            row_totals = [0] * R\n            col_totals = [0] * C\n            unknown_rows = []\n            unknown_cols = []\n\n            for r in range(R):\n                row_sum = 0\n                unknown_row_count = 0\n                for c in range(C):\n                    if table[r][c] == '?':\n                        unknown_row_count += 1\n                    else:\n                        row_sum += int(table[r][c])\n                \n                if row_sum == 0 and unknown_row_count == 0:\n                    print('NO')\n                    break\n                \n                if unknown_row_count > 0:\n                    unknown_rows.append(r)\n                row_totals[r] = row_sum\n\n            for c in range(C):\n                col_sum = 0\n                unknown_col_count = 0\n                for r in range(R):\n                    if table[r][c] == '?':\n                        unknown_col_count += 1\n                    else:\n                        col_sum += int(table[r][c])\n                \n                if col_sum == 0 and unknown_col_count == 0:\n                    print('NO')\n                    break\n                \n                if unknown_col_count > 0:\n                    unknown_cols.append(c)\n                col_totals[c] = col_sum\n\n            # Solve for known values\n            final_table = [row[:] for row in table]\n            solved = True\n\n            for r in unknown_rows:\n                row_known_sum = 0\n                unknown_count = 0\n                unknown_pos = -1\n                \n                for c in range(C):\n                    if final_table[r][c] == '?':\n                        unknown_count += 1\n                        unknown_pos = c\n                    else:\n                        row_known_sum += int(final_table[r][c])\n                \n                if unknown_count == 1:\n                    needed_val = col_totals[unknown_pos] - row_known_sum\n                    if needed_val < 0:\n                        solved = False\n                        break\n                    final_table[r][unknown_pos] = str(needed_val)\n\n            for c in unknown_cols:\n                col_known_sum = 0\n                unknown_count = 0\n                unknown_pos = -1\n                \n                for r in range(R):\n                    if final_table[r][c] == '?':\n                        unknown_count += 1\n                        unknown_pos = r\n                    else:\n                        col_known_sum += int(final_table[r][c])\n                \n                if unknown_count == 1:\n                    needed_val = row_totals[unknown_pos] - col_known_sum\n                    if needed_val < 0:\n                        solved = False\n                        break\n                    final_table[unknown_pos][c] = str(needed_val)\n\n            # Verify solution\n            if not solved:\n                print('NO')\n                continue\n\n            # Check row and column totals\n            for r in range(R):\n                row_sum = sum(int(val) if val != '?' else 0 for val in final_table[r])\n                if row_sum != row_totals[r]:\n                    solved = False\n                    break\n\n            for c in range(C):\n                col_sum = sum(int(final_table[r][c]) if final_table[r][c] != '?' else 0 for r in range(R))\n                if col_sum != col_totals[c]:\n                    solved = False\n                    break\n\n            # Output results\n            if solved:\n                for row in final_table:\n                    print(' '.join(row))\n            else:\n                print('NO')\n\n        except EOFError:\n            break\n\nsolve_sales_table()",
    "timestamp": "2025-08-13 02:22:57"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve():\n    import sys\n    input = sys.stdin.read().split('\\n')\n    idx = 0\n    while True:\n        if idx >= len(input):\n            break\n        line = input[idx].strip()\n        if not line:\n            idx += 1\n            continue\n        H, W = map(int, line.split())\n        if H == 0 and W == 0:\n            break\n        idx += 1\n        table = []\n        for _ in range(H):\n            row = input[idx].strip().split()\n            table.append(row)\n            idx += 1\n        \n        # Process rows\n        row_unknowns = []\n        for i in range(H):\n            q_indices = []\n            total = None\n            known_sum = 0\n            for j in range(W):\n                cell = table[i][j]\n                if cell == '?':\n                    q_indices.append(j)\n                else:\n                    num = int(cell)\n                    known_sum += num\n            if len(q_indices) == 1:\n                j = q_indices[0]\n                total_cell = table[i][W]\n                if total_cell == '?':\n                    pass\n                else:\n                    total = int(total_cell)\n                    missing = total - known_sum\n                    table[i][j] = str(missing)\n        \n        # Process columns\n        col_unknowns = []\n        for j in range(W):\n            q_indices = []\n            total = None\n            known_sum = 0\n            for i in range(H):\n                cell = table[i][j]\n                if cell == '?':\n                    q_indices.append(i)\n                else:\n                    num = int(cell)\n                    known_sum += num\n            if len(q_indices) == 1:\n                i = q_indices[0]\n                total_cell = table[H][j]\n                if total_cell == '?':\n                    pass\n                else:\n                    total = int(total_cell)\n                    missing = total - known_sum\n                    table[i][j] = str(missing)\n        \n        # Check if all resolved\n        resolved = True\n        for i in range(H):\n            for j in range(W):\n                if table[i][j] == '?':\n                    resolved = False\n                    break\n            if not resolved:\n                break\n        \n        if resolved:\n            # Verify rows\n            valid = True\n            for i in range(H):\n                row_sum = 0\n                for j in range(W):\n                    row_sum += int(table[i][j])\n                total_cell = table[i][W]\n                if total_cell != '?':\n                    if row_sum != int(total_cell):\n                        valid = False\n                        break\n            if valid:\n                # Verify columns\n                for j in range(W):\n                    col_sum = 0\n                    for i in range(H):\n                        col_sum += int(table[i][j])\n                    total_cell = table[H][j]\n                    if total_cell != '?':\n                        if col_sum != int(total_cell):\n                            valid = False\n                            break\n                if valid:\n                    for i in range(H):\n                        print(' '.join(table[i][:W]))\n                    continue\n        \n        # Check for NO solution\n        # Check rows with single unknown but total is ?\n        no_solution = False\n        for i in range(H):\n            q_indices = []\n            known_sum = 0\n            for j in range(W):\n                cell = table[i][j]\n                if cell == '?':\n                    q_indices.append(j)\n                else:\n                    num = int(cell)\n                    known_sum += num\n            if len(q_indices) == 1:\n                total_cell = table[i][W]\n                if total_cell != '?':\n                    total = int(total_cell)\n                    missing = total - known_sum\n                    # Check if already filled\n                    if table[i][q_indices[0]] == '?':\n                        pass\n                    else:\n                        if int(table[i][q_indices[0]]) != missing:\n                            no_solution = True\n                            break\n        if no_solution:\n            print(\"NO\")\n            continue\n        \n        # Check columns with single unknown but total is ?\n        for j in range(W):\n            q_indices = []\n            known_sum = 0\n            for i in range(H):\n                cell = table[i][j]\n                if cell == '?':\n                    q_indices.append(i)\n                else:\n                    num = int(cell)\n                    known_sum += num\n            if len(q_indices) == 1:\n                total_cell = table[H][j]\n                if total_cell != '?':\n                    total = int(total_cell)\n                    missing = total - known_sum\n                    # Check if already filled\n                    if table[q_indices[0]][j] == '?':\n                        pass\n                    else:\n                        if int(table[q_indices[0]][j]) != missing:\n                            no_solution = True\n                            break\n        if no_solution:\n            print(\"NO\")\n            continue\n        \n        # Check for infinite solutions\n        # If any row or column has multiple unknowns and total is known\n        infinite = False\n        for i in range(H):\n            q_count = 0\n            total_cell = table[i][W]\n            if total_cell == '?':\n                continue\n            for j in range(W):\n                if table[i][j] == '?':\n                    q_count += 1\n            if q_count > 1:\n                infinite = True\n                break\n        if not infinite:\n            for j in range(W):\n                q_count = 0\n                total_cell = table[H][j]\n                if total_cell == '?':\n                    continue\n                for i in range(H):\n                    if table[i][j] == '?':\n                        q_count += 1\n                if q_count > 1:\n                    infinite = True\n                    break\n        if infinite:\n            print(\"NO\")\n            continue\n        \n        # Try to resolve again after first pass\n        # Process rows\n        for i in range(H):\n            q_indices = []\n            total = None\n            known_sum = 0\n            for j in range(W):\n                cell = table[i][j]\n                if cell == '?':\n                    q_indices.append(j)\n                else:\n                    num = int(cell)\n                    known_sum += num\n            if len(q_indices) == 1:\n                j = q_indices[0]\n                total_cell = table[i][W]\n                if total_cell == '?':\n                    pass\n                else:\n                    total = int(total_cell)\n                    missing = total - known_sum\n                    table[i][j] = str(missing)\n        \n        # Process columns\n        for j in range(W):\n            q_indices = []\n            total = None\n            known_sum = 0\n            for i in range(H):\n                cell = table[i][j]\n                if cell == '?':\n                    q_indices.append(i)\n                else:\n                    num = int(cell)\n                    known_sum += num\n            if len(q_indices) == 1:\n                i = q_indices[0]\n                total_cell = table[H][j]\n                if total_cell == '?':\n                    pass\n                else:\n                    total = int(total_cell)\n                    missing = total - known_sum\n                    table[i][j] = str(missing)\n        \n        # Check if all resolved\n        resolved = True\n        for i in range(H):\n            for j in range(W):\n                if table[i][j] == '?':\n                    resolved = False\n                    break\n            if not resolved:\n                break\n        \n        if resolved:\n            # Verify rows\n            valid = True\n            for i in range(H):\n                row_sum = 0\n                for j in range(W):\n                    row_sum += int(table[i][j])\n                total_cell = table[i][W]\n                if total_cell != '?':\n                    if row_sum != int(total_cell):\n                        valid = False\n                        break\n            if valid:\n                # Verify columns\n                for j in range(W):\n                    col_sum = 0\n                    for i in range(H):\n                        col_sum += int(table[i][j])\n                    total_cell = table[H][j]\n                    if total_cell != '?':\n                        if col_sum != int(total_cell):\n                            valid = False\n                            break\n                if valid:\n                    for i in range(H):\n                        print(' '.join(table[i][:W]))\n                    continue\n        \n        print(\"NO\")\n\nsolve()",
    "timestamp": "2025-08-13 02:23:50"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool solve(vector<vector<int>>& table, int n, int m, vector<bool>& filled) {\n    bool changed = true;\n    while (changed) {\n        changed = false;\n        for (int i = 0; i < n; i++) {\n            int sum = table[i][m];\n            int missingCount = 0, missingIndex = -1;\n            for (int j = 0; j < m; j++) {\n                if (table[i][j] == -1) {\n                    missingCount++;\n                    missingIndex = j;\n                } else {\n                    sum -= table[i][j];\n                }\n            }\n            if (missingCount == 1) {\n                table[i][missingIndex] = sum;\n                filled[i * m + missingIndex] = true;\n                changed = true;\n            } else if (missingCount > 1) {\n                return false;\n            }\n        }\n        for (int j = 0; j < m; j++) {\n            int sum = table[n][j];\n            int missingCount = 0, missingIndex = -1;\n            for (int i = 0; i < n; i++) {\n                if (table[i][j] == -1) {\n                    missingCount++;\n                    missingIndex = i;\n                } else {\n                    sum -= table[i][j];\n                }\n            }\n            if (missingCount == 1) {\n                table[missingIndex][j] = sum;\n                filled[missingIndex * m + j] = true;\n                changed = true;\n            } else if (missingCount > 1) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int T;\n    cin >> T;\n\n    for (int t = 0; t < T; t++) {\n        int n, m;\n        cin >> n >> m;\n\n        vector<vector<int>> table(n + 1, vector<int>(m + 1, -1));\n        vector<bool> filled(n * m, false);\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= m; j++) {\n                string value;\n                cin >> value;\n                if (value == \"?\") {\n                    table[i][j] = -1;\n                } else {\n                    table[i][j] = stoi(value);\n                }\n            }\n        }\n        for (int j = 0; j < m; j++) {\n            string value;\n            cin >> value;\n            if (value == \"?\") {\n                table[n][j] = -1;\n            } else {\n                table[n][j] = stoi(value);\n            }\n        }\n\n        if (solve(table, n, m, filled)) {\n            if (any_of(filled.begin(), filled.end(), [](bool f) { return !f; })) {\n                cout << \"NO\\n\";\n            } else {\n                for (int i = 0; i < n; i++) {\n                    for (int j = 0; j < m; j++) {\n                        cout << table[i][j] << \" \";\n                    }\n                    cout << \"\\n\";\n                }\n                if (t < T - 1) {\n                    cout << \"\\n\";\n                }\n            }\n        } else {\n            cout << \"NO\\n\";\n        }\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:05:43"
  }
]