[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\ntypedef struct {\n    char name[11];\n    int points;\n} Character;\n\nint compare(const void *a, const void *b) {\n    Character *c1 = (Character *)a;\n    Character *c2 = (Character *)b;\n    if (c1->points != c2->points) {\n        return c1->points - c2->points;\n    } else {\n        return strcmp(c1->name, c2->name);\n    }\n}\n\nint main() {\n    int n;\n    while (scanf(\"%d\", &n) == 1 && n != 0) {\n        Character characters[20];\n        int time_counts[30] = {0}; // To count how many characters appear at each time\n\n        for (int i = 0; i < n; i++) {\n            scanf(\"%s\", characters[i].name);\n            int m;\n            scanf(\"%d\", &m);\n            for (int j = 0; j < m; j++) {\n                int d;\n                scanf(\"%d\", &d);\n                time_counts[d]++;\n            }\n            characters[i].points = 0;\n        }\n\n        // Reset to count points\n        for (int i = 0; i < n; i++) {\n            rewind(stdin);\n            int temp_n;\n            scanf(\"%d\", &temp_n);\n            for (int j = 0; j < n; j++) {\n                char temp_name[11];\n                int m;\n                scanf(\"%s %d\", temp_name, &m);\n                if (strcmp(temp_name, characters[i].name) == 0) {\n                    for (int k = 0; k < m; k++) {\n                        int d;\n                        scanf(\"%d\", &d);\n                        characters[i].points += (n - (time_counts[d] - 1));\n                    }\n                } else {\n                    for (int k = 0; k < m; k++) {\n                        int d;\n                        scanf(\"%d\", &d);\n                    }\n                }\n            }\n        }\n\n        qsort(characters, n, sizeof(Character), compare);\n        printf(\"%s %d\\n\", characters[0].name, characters[0].points);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 19:01:39"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class PopularityEstimation {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (true) {\n            int n = scanner.nextInt();\n            \n            if (n == 0) break;\n            \n            String[] names = new String[n];\n            int[][] times = new int[n][];\n            \n            for (int i = 0; i < n; i++) {\n                names[i] = scanner.next();\n                int m = scanner.nextInt();\n                times[i] = new int[m];\n                \n                for (int j = 0; j < m; j++) {\n                    times[i][j] = scanner.nextInt();\n                }\n            }\n            \n            int[] points = calculatePoints(n, names, times);\n            \n            int minPoints = Integer.MAX_VALUE;\n            String minName = \"\";\n            \n            for (int i = 0; i < n; i++) {\n                if (points[i] < minPoints || (points[i] == minPoints && names[i].compareTo(minName) < 0)) {\n                    minPoints = points[i];\n                    minName = names[i];\n                }\n            }\n            \n            System.out.println(minName + \" \" + minPoints);\n        }\n        \n        scanner.close();\n    }\n    \n    private static int[] calculatePoints(int n, String[] names, int[][] times) {\n        int[] points = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < times[i].length; j++) {\n                int currentTime = times[i][j];\n                int simultaneousChars = 1;\n                \n                for (int k = 0; k < n; k++) {\n                    if (k != i) {\n                        for (int l = 0; l < times[k].length; l++) {\n                            if (times[k][l] == currentTime) {\n                                simultaneousChars++;\n                                break;\n                            }\n                        }\n                    }\n                }\n                \n                points[i] += Math.max(n - simultaneousChars + 1, 1);\n            }\n        }\n        \n        return points;\n    }\n}",
    "timestamp": "2025-08-05 19:01:46"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nstruct Character {\n    string name;\n    vector<int> times;\n    int points;\n};\n\nint main() {\n    int n;\n    while (cin >> n && n != 0) {\n        vector<Character> characters(n);\n        map<int, int> timeCount;\n\n        for (int i = 0; i < n; ++i) {\n            cin >> characters[i].name >> characters[i].points;\n            int m = characters[i].points;\n            characters[i].points = 0;\n            characters[i].times.resize(m);\n            for (int j = 0; j < m; ++j) {\n                cin >> characters[i].times[j];\n                timeCount[characters[i].times[j]]++;\n            }\n        }\n\n        for (int i = 0; i < n; ++i) {\n            for (int time : characters[i].times) {\n                int count = timeCount[time];\n                characters[i].points += (n - count + 1);\n            }\n        }\n\n        int minPoints = INT_MAX;\n        string minName;\n        for (const auto& c : characters) {\n            if (c.points < minPoints || (c.points == minPoints && c.name < minName)) {\n                minPoints = c.points;\n                minName = c.name;\n            }\n        }\n\n        cout << minName << \" \" << minPoints << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 19:02:05"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MAX_CHARS 20\n#define MAX_TIMES 30\n\ntypedef struct {\n    char name[11];\n    int appearances;\n    int times[MAX_TIMES];\n} Character;\n\nint main() {\n    int n;\n    while (scanf(\"%d\", &n) && n != 0) {\n        Character chars[MAX_CHARS];\n        \n        // Read character information\n        for (int i = 0; i < n; i++) {\n            scanf(\"%s %d\", chars[i].name, &chars[i].appearances);\n            for (int j = 0; j < chars[i].appearances; j++) {\n                scanf(\"%d\", &chars[i].times[j]);\n            }\n        }\n        \n        // Calculate points for each character\n        int points[MAX_CHARS] = {0};\n        for (int time = 0; time < 30; time++) {\n            int present_chars[MAX_CHARS] = {0};\n            int present_count = 0;\n            \n            // Check which characters are present at this time\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < chars[i].appearances; j++) {\n                    if (chars[i].times[j] == time) {\n                        present_chars[i] = 1;\n                        present_count++;\n                        break;\n                    }\n                }\n            }\n            \n            // Calculate points based on number of present characters\n            for (int i = 0; i < n; i++) {\n                if (present_chars[i]) {\n                    if (present_count == 1) {\n                        points[i] += n;\n                    } else {\n                        points[i] += (n - present_count + 1);\n                    }\n                }\n            }\n        }\n        \n        // Find character with lowest points\n        int min_points = points[0];\n        int min_index = 0;\n        for (int i = 1; i < n; i++) {\n            if (points[i] < min_points || \n                (points[i] == min_points && strcmp(chars[i].name, chars[min_index].name) < 0)) {\n                min_points = points[i];\n                min_index = i;\n            }\n        }\n        \n        // Output result\n        printf(\"%s %d\\n\", chars[min_index].name, min_points);\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 19:02:14"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <climits>\n\nusing namespace std;\n\nint main() {\n    int n;\n    while (cin >> n && n != 0) {\n        vector<string> names(n);\n        vector<vector<int>> times(n);\n        map<int, set<int>> timeslots;\n\n        for (int i = 0; i < n; i++) {\n            cin >> names[i];\n            int m;\n            cin >> m;\n            times[i].resize(m);\n            for (int j = 0; j < m; j++) {\n                cin >> times[i][j];\n                timeslots[times[i][j]].insert(i);\n            }\n        }\n\n        vector<int> points(n, 0);\n        for (auto& slot : timeslots) {\n            int time_points = slot.second.size();\n            for (int character : slot.second) {\n                points[character] += max(1, n - time_points);\n            }\n        }\n\n        int min_points = INT_MAX;\n        string min_name;\n        for (int i = 0; i < n; i++) {\n            if (points[i] < min_points || \n                (points[i] == min_points && names[i] < min_name)) {\n                min_points = points[i];\n                min_name = names[i];\n            }\n        }\n\n        cout << min_name << \" \" << min_points << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 19:02:20"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class PopularityEstimation {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            int n = scanner.nextInt();\n            if (n == 0) break;\n            scanner.nextLine(); // consume the newline after n\n\n            Map<String, List<Integer>> characterTimes = new HashMap<>();\n            for (int i = 0; i < n; i++) {\n                String[] parts = scanner.nextLine().split(\" \");\n                String name = parts[0];\n                int m = Integer.parseInt(parts[1]);\n                List<Integer> times = new ArrayList<>();\n                for (int j = 0; j < m; j++) {\n                    times.add(Integer.parseInt(parts[2 + j]));\n                }\n                characterTimes.put(name, times);\n            }\n\n            Map<String, Integer> points = new HashMap<>();\n            for (String name : characterTimes.keySet()) {\n                points.put(name, 0);\n            }\n\n            for (int time = 0; time < 30; time++) {\n                List<String> presentChars = new ArrayList<>();\n                for (Map.Entry<String, List<Integer>> entry : characterTimes.entrySet()) {\n                    if (entry.getValue().contains(time)) {\n                        presentChars.add(entry.getKey());\n                    }\n                }\n                int k = presentChars.size();\n                if (k > 0) {\n                    int point = n - k + 1;\n                    for (String name : presentChars) {\n                        points.put(name, points.get(name) + point);\n                    }\n                }\n            }\n\n            String minName = null;\n            int minPoints = Integer.MAX_VALUE;\n            for (Map.Entry<String, Integer> entry : points.entrySet()) {\n                if (entry.getValue() < minPoints || \n                    (entry.getValue() == minPoints && (minName == null || entry.getKey().compareTo(minName) < 0))) {\n                    minName = entry.getKey();\n                    minPoints = entry.getValue();\n                }\n            }\n\n            System.out.println(minName + \" \" + minPoints);\n        }\n    }\n}",
    "timestamp": "2025-08-05 19:02:40"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\n\ndef main():\n    input = sys.stdin.read\n    data = input().strip()\n    \n    index = 0\n    cases = data.split('\\n')\n    \n    while True:\n        n = int(cases[index].strip())\n        if n == 0:\n            break\n        index += 1\n\n        screen_times = {}\n        score = {}\n        \n        for _ in range(n):\n            line = cases[index].strip().split()\n            index += 1\n            name = line[0]\n            m = int(line[1])\n            times = list(map(int, line[2:2 + m]))\n            score[name] = 0\n            for time in times:\n                if time not in screen_times:\n                    screen_times[time] = set()\n                screen_times[time].add(name)\n        \n        for time in range(30):\n            if time in screen_times:\n                characters = screen_times[time]\n                num_characters = len(characters)\n                points = max(1, n - num_characters)\n                for character in characters:\n                    score[character] += points\n        \n        # Find character with minimum score\n        min_score = float('inf')\n        min_character = ''\n        \n        for name in score:\n            if score[name] < min_score or (score[name] == min_score and name < min_character):\n                min_score = score[name]\n                min_character = name\n                \n        print(min_character, min_score)\n\nif __name__ == '__main__':\n    main()",
    "timestamp": "2025-08-13 02:05:46"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class PopularityEstimation {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        while (true) {\n            int n = scanner.nextInt();\n            if (n == 0) break;\n\n            Map<String, Integer> characterPoints = new HashMap<>();\n            Map<Integer, List<String>> screenTimeMap = new HashMap<>();\n\n            for (int i = 0; i < n; i++) {\n                String name = scanner.next();\n                int m = scanner.nextInt();\n                characterPoints.put(name, 0);\n\n                for (int j = 0; j < m; j++) {\n                    int time = scanner.nextInt();\n                    screenTimeMap.computeIfAbsent(time, k -> new ArrayList<>()).add(name);\n                }\n            }\n\n            for (List<String> characters : screenTimeMap.values()) {\n                int simultaneousCount = characters.size();\n                for (String character : characters) {\n                    characterPoints.put(character, characterPoints.get(character) + (n - simultaneousCount + 1));\n                }\n            }\n\n            String minCharacter = null;\n            int minPoints = Integer.MAX_VALUE;\n\n            for (Map.Entry<String, Integer> entry : characterPoints.entrySet()) {\n                if (entry.getValue() < minPoints || (entry.getValue() == minPoints && \n                        (minCharacter == null || entry.getKey().compareTo(minCharacter) < 0))) {\n                    minCharacter = entry.getKey();\n                    minPoints = entry.getValue();\n                }\n            }\n\n            System.out.println(minCharacter + \" \" + minPoints);\n        }\n\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-13 02:05:53"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MAX_CHARACTERS 20\n#define MAX_SCREEN_TIMES 30\n#define MAX_NAME_LENGTH 11\n#define MAX_TIME 30\n\ntypedef struct {\n    char name[MAX_NAME_LENGTH];\n    int points;\n} Character;\n\nint main() {\n    int n, mi, points[MAX_CHARACTERS];\n    int schedule[MAX_TIME][MAX_CHARACTERS];\n    char name[MAX_NAME_LENGTH], lowestName[MAX_NAME_LENGTH];\n    Character characters[MAX_CHARACTERS];\n\n    while (scanf(\"%d\", &n) && n != 0) {\n        memset(schedule, 0, sizeof(schedule));\n        for (int i = 0; i < n; i++) {\n            scanf(\"%s %d\", characters[i].name, &mi);\n            characters[i].points = 0;\n            for (int j = 0; j < mi; j++) {\n                int time;\n                scanf(\"%d\", &time);\n                schedule[time][i] = 1;\n            }\n        }\n        \n        for (int time = 0; time < MAX_TIME; time++) {\n            int count = 0;\n            for (int i = 0; i < n; i++) {\n                if (schedule[time][i]) count++;\n            }\n            for (int i = 0; i < n; i++) {\n                if (schedule[time][i]) characters[i].points += (count == 1 ? n : n - count + 1);\n            }\n        }\n        \n        int minPoints = characters[0].points;\n        strcpy(lowestName, characters[0].name);\n        for (int i = 1; i < n; i++) {\n            if (characters[i].points < minPoints || \n                (characters[i].points == minPoints && strcmp(characters[i].name, lowestName) < 0)) {\n                minPoints = characters[i].points;\n                strcpy(lowestName, characters[i].name);\n            }\n        }\n        \n        printf(\"%s %d\\n\", lowestName, minPoints);\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 02:06:02"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve_popularity_estimation():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        \n        characters = []\n        all_times = set()\n        \n        # Read input for each character\n        for _ in range(n):\n            parts = input().split()\n            name = parts[0]\n            m = int(parts[1])\n            times = list(map(int, parts[2:]))\n            characters.append((name, times))\n            all_times.update(times)\n        \n        # Calculate points for each character\n        points = {}\n        for name, times in characters:\n            char_points = 0\n            for time in times:\n                # Count characters on screen at this time\n                simultaneous_chars = sum(1 for _, char_times in characters if time in char_times)\n                \n                # Calculate points for this time\n                if simultaneous_chars == 1:\n                    char_points += n\n                else:\n                    char_points += max(1, n - simultaneous_chars + 1)\n            \n            points[name] = char_points\n        \n        # Find character with lowest points\n        min_points = min(points.values())\n        lowest_chars = [name for name, pt in points.items() if pt == min_points]\n        lowest_char = min(lowest_chars)\n        \n        # Output result\n        print(f\"{lowest_char} {min_points}\")\n\nsolve_popularity_estimation()",
    "timestamp": "2025-08-13 02:06:12"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\nfrom collections import defaultdict\n\ndef solve():\n    while True:\n        line = sys.stdin.readline()\n        if not line:\n            break\n        n = int(line.strip())\n        if n == 0:\n            break\n        characters = []\n        time_dict = defaultdict(list)\n        for _ in range(n):\n            parts = sys.stdin.readline().strip().split()\n            name = parts[0]\n            m = int(parts[1])\n            times = list(map(int, parts[2:2+m]))\n            characters.append((name, times))\n            for t in times:\n                time_dict[t].append(name)\n        \n        points = defaultdict(int)\n        for t in time_dict:\n            k = len(time_dict[t])\n            for name in time_dict[t]:\n                points[name] += (n - (k - 1))\n        \n        if not points:\n            # All characters have zero points, pick lex smallest name\n            names = [char[0] for char in characters]\n            min_name = min(names)\n            print(f\"{min_name} 0\")\n        else:\n            min_point = min(points.values())\n            candidates = [name for name in points if points[name] == min_point]\n            min_name = min(candidates)\n            print(f\"{min_name} {min_point}\")\n\nsolve()",
    "timestamp": "2025-08-13 02:06:26"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    while (true) {\n        int n;\n        cin >> n;\n        if (n == 0) break;\n\n        vector<string> names(n);\n        vector<set<int>> times(n);\n        \n        for (int i = 0; i < n; i++) {\n            cin >> names[i];\n            int mi;\n            cin >> mi;\n            for (int j = 0; j < mi; j++) {\n                int time;\n                cin >> time;\n                times[i].insert(time);\n            }\n        }\n\n        map<int, vector<int>> timeMap;\n        for (int i = 0; i < n; i++) {\n            for (int t : times[i]) {\n                timeMap[t].push_back(i);\n            }\n        }\n\n        vector<int> points(n, 0);\n        for (const auto& pair : timeMap) {\n            int size = pair.second.size();\n            for (int idx : pair.second) {\n                points[idx] += n - size;\n            }\n        }\n\n        int minPoints = *min_element(points.begin(), points.end());\n        string resultName = \"\";\n        \n        for (int i = 0; i < n; i++) {\n            if (points[i] == minPoints) {\n                if (resultName.empty() || names[i] < resultName) {\n                    resultName = names[i];\n                }\n            }\n        }\n\n        cout << resultName << \" \" << minPoints << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 11:04:09"
  }
]