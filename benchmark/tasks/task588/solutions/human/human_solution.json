[
  {
    "language": "Scala",
    "code": "import scala.io.StdIn._\n\nimport Math._\nobject Main extends App {\n  val eps0 = 1e-12\n\n  val q = readLine.toInt\n  for (i <- 0 until q) {\n    val Seq(xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3) = readLine.split(' ').map(_.toDouble).toList\n    val sx1 = xp1 - xp0\n    val sy1 = yp1 - yp0\n    val sx2 = xp3 - xp2\n    val sy2 = yp3 - yp2\n\n    val rot = sx1 * sy2 - sy1 * sx2\n    val dot = sx1 * sx2 + sy1 * sy2\n\n    println(if (rot.abs < eps0) \"2\" else if (dot.abs < eps0) \"1\" else \"0\")\n  }\n}\n\n"
  },
  {
    "language": "Scala",
    "code": "\nimport scala.io.StdIn\n\nobject Main {\n\n  case class Point(x: Double = 0, y: Double = 0) {\n\n    def +(p: Point) = Point(this.x + p.x, this.y + p.y)\n\n    def -(p: Point) = Point(this.x - p.x, this.y - p.y)\n\n    def *(a: Double) = Point(this.x * a, this.y * a)\n\n    def /(a: Double) = {\n      assert(a == 0)\n      Point(this.x / a, this.y / a)\n    }\n\n    def norm() = this.x * this.x + this.y * this.y\n\n    def abs() = scala.math.sqrt(norm())\n\n    def <(p: Point) = this.x < p.x && this.y < p.y\n\n    private val EPS = 1 ^ (-10)\n\n    def ==(p: Point) = scala.math.abs(this.x - p.x) < EPS && scala.math.abs(this.y - p.y) < EPS\n\n  }\n\n  case class Segment(p1: Point, p2: Point)\n  type GeoVector = Point\n\n  object Cgl0A {\n    \n    // 内積\n    def dot(a: Point, b: Point) = a.x * b.x + a.y * b.y\n\n    def isOrthogonal(a: GeoVector, b: GeoVector): Boolean = dot(a, b) == 0.0\n\n    def isOrthogonal(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isOrthogonal(a1-a2, b1-b2)\n    }\n\n    def isOrthogonal(s1: Segment, s2: Segment): Boolean = {\n      dot(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    // 外積\n    def cross(a: Point, b: Point) = a.x * b.y - a.y * b.x\n    \n    def isParallel(a: GeoVector, b: GeoVector) = cross(a, b) == 0.0\n\n    def isParallel(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isParallel(a1-a2, b1-b2)\n    }\n\n    def isParallel(s1: Segment, s2: Segment): Boolean = {\n      cross(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n  }\n\n\n  def main(args: Array[String]): Unit ={\n    \n    val n = StdIn.readLine().toInt\n    val list = (0 until n).map{ i =>\n      val a = StdIn.readLine().split(' ').map(_.toDouble)\n      (new Point(a(0), a(1)),\n        new Point(a(2), a(3)),\n        new Point(a(4), a(5)),\n        new Point(a(6), a(7)))\n    }\n    \n    list.foreach{ ls => \n      if(Cgl0A.isParallel(ls._1, ls._2, ls._3, ls._4)){\n        println(\"2\")\n      } else if(Cgl0A.isOrthogonal(ls._1, ls._2, ls._3, ls._4)){\n        println(\"1\")\n      } else {\n        println(\"0\")\n      }\n    }\n  }\n  \n}\n\n\n"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn\n\nobject Cgl2A {\n\n  case class Point(x: Double = 0, y: Double = 0) {\n\n    def +(p: Point) = Point(this.x + p.x, this.y + p.y)\n\n    def -(p: Point) = Point(this.x - p.x, this.y - p.y)\n\n    def *(a: Double) = Point(this.x * a, this.y * a)\n\n    def /(a: Double) = {\n      assert(a == 0)\n      Point(this.x / a, this.y / a)\n    }\n\n    def norm() = this.x * this.x + this.y * this.y\n\n    def abs() = scala.math.sqrt(norm())\n\n    def <(p: Point) = this.x < p.x && this.y < p.y\n\n    private val EPS = 1 ^ (-10)\n\n    def ==(p: Point) = scala.math.abs(this.x - p.x) < EPS && scala.math.abs(this.y - p.y) < EPS\n\n  }\n\n  case class Segment(p1: Point, p2: Point)\n  type GeoVector = Point\n\n  object Cgl0A {\n    \n    // 内積\n    def dot(a: Point, b: Point) = a.x * b.x + a.y * b.y\n\n    def isOrthogonal(a: GeoVector, b: GeoVector): Boolean = dot(a, b) == 0.0\n\n    def isOrthogonal(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isOrthogonal(a1-a2, b1-b2)\n    }\n\n    def isOrthogonal(s1: Segment, s2: Segment): Boolean = {\n      dot(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    // 外積\n    def cross(a: Point, b: Point) = a.x * b.y + a.y * b.x\n    \n    def isParallel(a: GeoVector, b: GeoVector) = cross(a, b) == 0.0\n\n    def isParallel(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isParallel(a1-a2, b1-b2)\n    }\n\n    def isParallel(s1: Segment, s2: Segment): Boolean = {\n      cross(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n  }\n\n\n  def main(args: Array[String]): Unit ={\n    \n    val n = StdIn.readLine().toInt\n    val list = (0 until n).map{ i =>\n      val a = StdIn.readLine().split(' ').map(_.toInt)\n      (new Point(a(0), a(1)),\n        new Point(a(2), a(3)),\n        new Point(a(4), a(5)),\n        new Point(a(6), a(7)))\n    }\n    \n    list.foreach{ ls => \n      if(Cgl0A.isParallel(ls._1, ls._2, ls._3, ls._4)){\n        println(\"2\")\n      } else if(Cgl0A.isOrthogonal(ls._1, ls._2, ls._3, ls._4)){\n        println(\"1\")\n      } else {\n        println(\"0\")\n      }\n    }\n  }\n  \n}\n"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn.{readInt,readLine}\nimport scala.collection.mutable.ArrayBuffer\n\nobject Main {\n  def isParallel(x1:Double, y1:Double, x2:Double, y2:Double, x3:Double, y3:Double, x4:Double, y4:Double) = {\n    val p = (x2-x1)*(y4-y3)-(x4-x3)*(y2-y1)\n    if(p < (1e-10) && p > -(1e-10)) true else false\n  }\n\n  def isOrthogonal(x1:Double, y1:Double, x2:Double, y2:Double, x3:Double, y3:Double, x4:Double, y4:Double) = {\n    val p =  (x2-x1)*(x4-x3)+(y2-y1)*(y4-y3)\n    if(p < (1e-10) && p > -(1e-10)) true else false\n  }\n\n  def main(args:Array[String]) = {\n   val n = readInt\n   val b = new ArrayBuffer[Int]\n\n   for(i<-1 to n) {\n     val p = readLine.split(\" \").map(_.toDouble)\n     if(isParallel(p(0),p(1),p(2),p(3),p(4),p(5),p(6),p(7))) b += 2\n     else if(isOrthogonal(p(0),p(1),p(2),p(3),p(4),p(5),p(6),p(7))) b += 1\n     else b += 0\n   }\n   println(b.mkString(\"\\n\"))\n  }\n}"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn.{readInt,readLine}\nimport scala.collection.mutable.ArrayBuffer\n\nobject Main {\n  def isParallel(x1:Double, y1:Double, x2:Double, y2:Double, x3:Double, y3:Double, x4:Double, y4:Doub\\\nle) = {\n    val p = (x2-x1)*(y4-y3)-(x4-x3)*(y2-y1)\n    if(p < (1e-10) && p > -(1e-10)) true else false\n  }\n\n  def isOrthogonal(x1:Double, y1:Double, x2:Double, y2:Double, x3:Double, y3:Double, x4:Double, y4:Do\\\nuble) = {\n    val p =  (x2-x1)*(x4-x3)+(y2-y1)*(y4-y3)\n    if(p < (1e-10) && p > -(1e-10)) true else false\n  }\n\n  def main(args:Array[String]) = {\n   val n = readInt\n   val b = new ArrayBuffer[Int]\n\n   for(i<-1 to n) {\n     val p = readLine.split(\" \").map(_.toDouble)\n     if(isParallel(p(0),p(1),p(2),p(3),p(4),p(5),p(6),p(7))) b += 2\n     else if(isOrthogonal(p(0),p(1),p(2),p(3),p(4),p(5),p(6),p(7))) b += 1\n     else b += 0\n   }\n   println(b.mkString(\"\\n\"))\n  }\n}"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn\n\nobject Main {\n\n  case class Point(x: Double = 0, y: Double = 0) {\n\n    def +(p: Point) = Point(this.x + p.x, this.y + p.y)\n\n    def -(p: Point) = Point(this.x - p.x, this.y - p.y)\n\n    def *(a: Double) = Point(this.x * a, this.y * a)\n\n    def /(a: Double) = {\n      assert(a == 0)\n      Point(this.x / a, this.y / a)\n    }\n\n    def norm() = this.x * this.x + this.y * this.y\n\n    def abs() = scala.math.sqrt(norm())\n\n    def <(p: Point) = this.x < p.x && this.y < p.y\n\n    private val EPS = 1 ^ (-10)\n\n    def ==(p: Point) = scala.math.abs(this.x - p.x) < EPS && scala.math.abs(this.y - p.y) < EPS\n\n  }\n\n  case class Segment(p1: Point, p2: Point)\n  type GeoVector = Point\n\n  object Cgl0A {\n    \n    // 内積\n    def dot(a: Point, b: Point) = a.x * b.x + a.y * b.y\n\n    def isOrthogonal(a: GeoVector, b: GeoVector): Boolean = dot(a, b) == 0.0\n\n    def isOrthogonal(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isOrthogonal(a1-a2, b1-b2)\n    }\n\n    def isOrthogonal(s1: Segment, s2: Segment): Boolean = {\n      dot(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    // 外積\n    def cross(a: Point, b: Point) = a.x * b.y + a.y * b.x\n    \n    def isParallel(a: GeoVector, b: GeoVector) = cross(a, b) == 0.0\n\n    def isParallel(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isParallel(a1-a2, b1-b2)\n    }\n\n    def isParallel(s1: Segment, s2: Segment): Boolean = {\n      cross(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n  }\n\n\n  def main(args: Array[String]): Unit ={\n    \n    val n = StdIn.readLine().toInt\n    val list = (0 until n).map{ i =>\n      val a = StdIn.readLine().split(' ').map(_.toInt)\n      (new Point(a(0), a(1)),\n        new Point(a(2), a(3)),\n        new Point(a(4), a(5)),\n        new Point(a(6), a(7)))\n    }\n    \n    list.foreach{ ls => \n      if(Cgl0A.isParallel(ls._1, ls._2, ls._3, ls._4)){\n        println(\"2\")\n      } else if(Cgl0A.isOrthogonal(ls._1, ls._2, ls._3, ls._4)){\n        println(\"1\")\n      } else {\n        println(\"0\")\n      }\n    }\n  }\n  \n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing UL = unsigned int;\nusing ULL = unsigned long long;\nusing LL = long long;\n#define rep(i,n) for(UL i=0; i<(n); i++)\n\nbool dblsame(double l, double r) {return abs(l-r) < abs(l) * 1e-10 + 1e-10;}\n\nstruct Vec{\n double x,y;\n Vec(double xx, double yy) : x(xx),y(yy) {}\n Vec operator+() const {return Vec(x,y);}\n Vec operator-() const {return Vec(-x,-y);}\n Vec operator+(const Vec& r) const {return Vec(x+r.x,y+r.y);}\n Vec operator-(const Vec& r) const {return Vec(x-r.x,y-r.y);}\n Vec operator*(double r) const {return Vec(x*r,y*r);}\n Vec operator/(double r) const {return Vec(x/r,y/r);}\n Vec& operator+=(const Vec& r) {*this=*this+r; return *this;}\n Vec& operator-=(const Vec& r) {*this=*this-r; return *this;}\n Vec& operator*=(double r) {*this=*this*r; return *this;}\n Vec& operator/=(double r) {*this=*this/r; return *this;}\n bool operator==(const Vec& r) const {return dblsame(x,r.x)&&dblsame(y,r.y);}\n bool operator!=(const Vec& r) const {return !(*this==r);} \n double operator*(const Vec& r) const {return x*r.x+y*r.y;}\n double abs() const {return sqrt(x*x+y*y);}\n double abs_squared() const {return x*x+y*y;}\n double product(const Vec& r) const {return x*r.y-y*r.x;}\n};\n\nVec InputVec(){\n double x,y; scanf(\"%lf%lf\",&x,&y);\n return Vec(x,y);\n}\n\nvoid PrintVec(Vec tg){\n printf(\"%.10f %.10f\",tg.x,tg.y);\n}\n\nint main() {\n UL T; scanf(\"%u\", &T);\n rep(t,T) {\n  Vec A = InputVec() - InputVec();\n  Vec B = InputVec() - InputVec();\n  A/=A.abs();\n  B/=B.abs();\n  double dot = A*B;\n  if(dblsame(dot,0.0)) printf(\"1\\n\");\n  else if(dblsame(abs(dot),1.0)) printf(\"2\\n\");\n  else printf(\"0\\n\");\n }\n return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n/*\n#include<algolithm>\n#include<array>\n#include<vector>\n*/\nusing namespace std;\n\ntypedef double Real;\nconstexpr Real EPS = 1e-8;\n\nint sign(Real d) {\n\tif (d>EPS) { return 1; }\n\tif (d<-EPS) { return -1; }\n\treturn 0;\n}\n\nstruct Point {\n\tReal x,y;\n\n\tPoint(Real x_=0, Real y_=0): x(x_), y(y_) {}\n\n\tPoint operator+(const Point &p) const {\n\t\treturn Point(x+p.x,y+p.y);\n\t}\n\tPoint operator-(const Point &p) const {\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n\tPoint operator*(Real s) const {\n\t\treturn Point(x*s,y*s);\n\t}\n\tPoint operator/(Real s) const {\n\t\treturn Point(x/s,y/s);\n\t}\n\tPoint operator<(const Point &p) const {\n\t\treturn sign(x - p.x) == -1 || (sign(x - p.x)==0 && sign(y - p.y)==-1);\n\t}\n\tPoint operator==(const Point &p) const { return sign(x-p.x) == 0 && sign(y - p.y)==0; }\n};\n\nstruct Line : public array<Point, 2> { //??????\n\tLine(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Segment : public array<Point, 2> { //??´???\n\tSegment(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Circle {\n\tPoint c;\n\tReal r;\n\tCircle(const Point &c_, Real r_): c(c_), r(r_) {}\n};\n\ntypedef vector<Point> Polygon;\n\n\n\n\n//--- solve ---\nPoint rotate90(const Point &p) { //???????¨???????\n\treturn Point(-p.y,p.x);\n}\n\nPoint rotate(const Point &p, Real theta) {\n\tconst Real s = sin(theta), c = cos(theta);\n\treturn Point(c*p.x - s*p.y, s*p.x + c*p.y);\n}\n\nReal angle(const Point &p) {\n\treturn atan2(p.y, p.x);\n}\n\nReal norm(const Point &p) {\n\treturn p.x * p.x + p.y * p.y;\n}\n\nReal abs(const Point &p) {\n\treturn sqrt(norm(p));\n}\n\nReal dot(const Point &a, const Point &b) { //??????\n\treturn a.x * b.x + a.y * b.y;\n}\n\nReal cross(const Point &a, const Point &b) { //??????\n\treturn a.x * b.y + a.y * b.x;\n}\n\nint main() {\n\tint N;\n\n\tcin >> N;\n\tfor(int i=0; i<N; i++) {\n\t\tint x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tPoint p[2];\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n\t\tp[0].x = x0 - x1;\n\t\tp[0].y = y0 - y1;\n\t\tp[1].x = x2 - x3;\n\t\tp[1].y = y2 - y3;\n\t\t\n\t\tReal res1 = dot(p[0],p[1]);\n\t\tReal res2 = cross(p[0],p[1]);\n\t\t//cout << res1 << \" \" << res2 << endl;\n\t\tif (sign(res1) == 0) {\n\t\t\t//?????´\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse if (sign(res2) == 0) {\n\t\t\t//??????\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse {\n\t\t\t//?????????\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\n\treturn EXIT_SUCCESS;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n#define eps = (1e-10);\n//点\nstruct Point{\n    double x,y;\n    Point(double _x=0,double _y=0):x(_x),y(_y){}\n    Point operator + (Point p){return Point(x+p.x,y+p.y);}\n    Point operator - (Point p){return Point(x-p.x,y-p.y);}\n    Point operator * (double a){return Point(a*x,a*y);}\n    Point operator / (double a){return Point(x/a,y/a);}\n    double norm(){return x*x+y*y;}//模的平方\n    double ABS() {return sqrt(norm());}//模\n};\n//线段\nstruct Segment{\n    Point p1,p2;\n};\n//点积a*b*cos\ndouble dot(Point a,Point b){\n    return a.x*b.x+a.y*b.y;\n}\n//叉积absin\ndouble cross(Point a,Point b){\n    return a.x*b.y-a.y*b.x;\n}\n//判断线段平行  \nbool Parallel(Segment a,Segment b){\n    Point alp=a.p2-a.p1;\n    Point beta=b.p2-b.p1;\n    if(cross(alp,beta)==0){\n        return 1;\n    }\n    return 0;\n}\n//判断线段正交\nbool Orthogonal(Segment a,Segment b){\n    Point alp=a.p2-a.p1;\n    Point beta=b.p2-b.p1;\n    if(dot(alp,beta)==0){\n        return 1;\n    }\n    return 0;   \n}\nint main(){\n    int n;scanf(\"%d\",&n);\n    Segment a,b;\n    for(int i=1;i<=n;i++){\n        scanf(\"%lf %lf %lf %lf\",&a.p1.x,&a.p1.y,&a.p2.x,&a.p2.y);\n        scanf(\"%lf %lf %lf %lf\",&b.p1.x,&b.p1.y,&b.p2.x,&b.p2.y);\n        if(Parallel(a,b)){\n            puts(\"2\");\n            continue;\n        }\n        if(Orthogonal(a,b)){\n            puts(\"1\");\n            continue;\n        }\n        puts(\"0\");\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#include<cmath>\n\n#define Re real()\n#define Im imag()\n#define Eps 1e-6\nusing namespace std;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\ndouble dot(Point a,Point b)\n{\n    return (conj(a)*b).Re;\n}\n\ndouble cross(Point a,Point b)\n{\n    return (conj(a)*b).Im;\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2)\n{\n    return fabs(cross(a2-a1, b2-b1)) < Eps;\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2)\n{\n    return fabs(dot(a2-a1, b2-b1)) < Eps;\n}\n\nint main()\n{\n    int vol;\n    double x1,x2,y1,y2,m1,m2,n1,n2;\n    scanf(\"%d\",&vol);\n    while(vol--)\n    {\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&x1,&y1,&x2,&y2,&m1,&n1,&m2,&n2);\n        Point p1(x1,y1),p2(x2,y2),q1(m1,n1),q2(m2,n2);\n        if(isParallel(p1,p2,q1,q2)) printf(\"2\\n\");\n        else if(isOrthogonal(p1,p2,q1,q2)) printf(\"1\\n\");\n        else printf(\"0\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define ll long long\n#define rep(i,n) for(ll i=0;i<n;i++)\n#define rep2(i,a,b) for(ll i=a;i<b;i++)\n#define repr(i,n) for(ll i=n-1;i>=0;i--)\nusing namespace std;\nconst double pi = acos(-1);\nconst double eps = 1e-10;\n\n\ntemplate<class T>\nbool equals(T a,T b){ return fabs((a)-(b)) < eps; }\n\nstruct Point{\n    double x, y;\n    Point(){}\n    Point(double x, double y) : x(x), y(y){}\n    Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n    Point operator * (double a) { return Point(x*a, y*a); }\n    Point operator / (double a) { return Point(x/a, y/a); }\n    double norm() {return x*x+y*y;}\n    double abs() {return sqrt(norm());}\n\n    bool operator < (const Point &p) const {\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x) < eps && fabs(y-p.y) < eps;\n    }\n};\n\nbool sort_x(Point a, Point b){ return !equals(a.x,b.x)?a.x<b.x:a.y<b.y; }\nbool sort_y(Point a, Point b){ return !equals(a.y,b.y)?a.y<b.y:a.x<b.x; }\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\ndouble norm(Vector a) { return a.x*a.x+a.y*a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x*b.x+a.y*b.y; }\ndouble cross(Vector a, Vector b) { return a.x*b.y-a.y*b.x; }\n\nstruct Segment {\n    Point p1, p2;\n    Segment(){}\n    Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c, double r) : c(c),r(r) {}\n};\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1),0.0);\n}\n\n\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(15);\n    ll q;\n    cin>>q;\n    rep(i,q){\n        double x0,y0,x1,y1,x2,y2,x3,y3;\n        cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n        Point p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n        if(isParallel(p0,p1,p2,p3)) cout<<2<<endl;\n        else if(isOrthogonal(p0,p1,p2,p3)) cout<<1<<endl;\n        else cout<<0<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <cassert>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000007;\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\n// head\n\ntypedef double db;\ndb eps=1e-9;\nstruct point {\n\tdb x,y;\n\tpoint() {}\n\tpoint(db x,db y):x(x),y(y) {}\n\tvoid input() { scanf(\"%lf%lf\",&x,&y); }\n\tvoid output() { printf(\"%.10f %.10f\\n\",x,y); }\n\tdb len() { return sqrt(x*x+y*y); }\n\tdb len2() { return x*x+y*y; }\n};\npoint operator + (const point &a,const point &b) { return point(a.x+b.x,a.y+b.y);}\npoint operator - (const point &a,const point &b) { return point(a.x-b.x,a.y-b.y);}\npoint operator * (const point &a,const db &b) { return point(a.x*b,a.y*b);}\npoint operator / (const point &a,const db &b) { return point(a.x/b,a.y/b);}\ndb dot(const point &a,const point &b) { return a.x*b.x+a.y*b.y; }\ndb det(const point &a,const point &b) { return a.x*b.y-a.y*b.x; }\nstruct line {\n\tpoint a,b;\n\tline() {}\n\tline(point a,point b):a(a),b(b) {}\n};\npoint proj(const line &a,const point &b) {\n\treturn a.a+(a.b-a.a)*dot(a.b-a.a,b-a.a)/(a.b-a.a).len2();\n}\npoint reflect(const line &a,const point &b) {\n\treturn proj(a,b)*2-b;\n}\nint dblcmp(db x) {\n\treturn fabs(x)<eps?0:(x>0?1:-1);\n}\nint relation(const line &a,const point &b) {\n\tint x=dblcmp(det(a.b-a.a,b-a.a));\n\tif (x==1) return 0; // COUNTER_CLOCKWISE\n\telse if (x==-1) return 1; // CLOCKWISE\n\telse {\n\t\tx=dblcmp(dot(b-a.a,a.b-a.a));\n\t\tif (x<-eps) return 2; // ONLINE_BACK\n\t\telse {\n\t\t\tx=dblcmp(dot(b-a.b,a.b-a.a));\n\t\t\tif (x>eps) return 3; // ONLINE_FRONT\n\t\t\telse return 4; // ON_SEGMENT\n\t\t}\n\t}\n}\n\nint q;\nint main() {\n\tscanf(\"%d\",&q);\n\trep(i,0,q) {\n\t\tpoint p1,p2,q1,q2;\n\t\tp1.input(); p2.input(); q1.input(); q2.input();\n\t\tif (dblcmp(dot(p2-p1,q2-q1))==0) puts(\"1\");\n\t\telse if (dblcmp(det(p2-p1,q2-q1))==0) puts(\"2\");\n\t\telse puts(\"0\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std ;\n#define eps 1e-10\n#define equals(a , b) (fabs((a) - (b)) < eps)\n\nclass Point\n{\npublic:\n    double x , y;\n\n    Point(double x = 0 ,double y = 0):x(x) , y(y) {}\n\n    Point operator +(Point p){return Point(x + p.x , y + p.y) ;}\n    Point operator -(Point p){return Point(x - p.x , y - p.y) ;}\n    Point operator *(double a){return Point(a * x , a * y) ;}\n    Point operator /(double a){return Point(x / a , y / a) ;}\n\n    double abs() {return sqrt(norm()) ;}\n    double norm() {return x * x + y * y ;}\n\n    bool operator < (const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y ;\n    }\n\n    bool operator == (const Point &p) const\n    {\n        return fabs(x - p.x) < eps && fabs(y - p.y) < eps ;\n    }\n    \n};\n\ntypedef Point Vector;\n\nstruct Segment  //表示线段结构体\n{\n    Point p1 , p2 ;\n};\n\ndouble dot(Vector a , Vector b)  // 向量a,b的内积\n{\n    return a.x * b.x + a.y * b.y ;\n}\n\ndouble cross(Vector a, Vector b)  //向量a,b外积\n{\n\treturn a.x * b.y - a.y * b.x ;\n}\n\nbool isOrthogonal(Vector a , Vector b)  //判断是否正交\n{\n    return equals(dot(a , b) , 0.0) ;\n}\n\nbool isOrthogonal(Point a1 , Point a2 , Point b1 , Point b2)\n{\n    return isOrthogonal(a1 - a2 , b1 - b2) ;\n}\n\nbool  isOrthogonal(Segment s1 , Segment s2)\n{\n    return equals(dot(s1.p2 - s1.p1 , s2.p2 - s2.p1) , 0.0) ;\n}\n\nbool isParallel(Vector a, Vector b)  //判断是否平行\n{\n\treturn equals(cross(a, b), 0.0) ;\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn isParallel(a1 - a2, b1 - b2) ;\n}\n\nbool isParallel(Segment s1, Segment s2)\n{\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0) ;\n}\n/*\nPoint project(Segment s1 , Point p)\n{\n    Vector base = s.p2 - s.p1 ;\n    double r = dot(p - s.p1 , base) / norm(base) ;\n    return s.p1 +base * r ;\n}\n*/\nint main()\n{\n    int n ;\n    cin >> n ;\n    Point p1 , p2, p3 ,p4 ;\n    while(n --)\n    {\n        cin >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y >> p4.x >> p4.y ;\n        if(isOrthogonal(p1 , p2 , p3 , p4))\n        {\n\t\t\tcout << 1 << endl ;\n        }\n        else if(isParallel(p1 , p2 , p3 ,p4))\n        {\n            cout << 2 << endl ;\n        }\n        else\n        {\n            cout << 0 <<endl ;\n        }\n    }\n    return 0 ;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst double eps=1e-9;\nstruct dot{\n\tdouble x,y;\n\tdouble len(){return sqrt(x*x+y*y);}\n\tdot(double a=0.0,double b=0.0){x=a,y=b;}\n\tdot operator +(const dot&b)const {return dot(x+b.x,y+b.y);}\n\tdot operator -(const dot&b)const {return dot(x-b.x,y-b.y);}\n\tdot operator *(const double&z)const {return dot(x*z,y*z);}\n\tbool operator <(const dot&b)const {return (x<b.x)||(x==b.x&&y<b.y);}\n\tvoid read(){scanf(\"%lf%lf\",&x,&y);} \n};\nstruct line{\n\tdot x1,x2;\n\tvoid read(){x1.read();x2.read();};\n\tdot getdot(){return x2-x1;}\n};\ndouble chaji(dot x,dot y){\n\treturn x.x*y.y-x.y*y.x;\n}\ndouble neiji(dot x,dot y){\n\treturn x.x*y.x+x.y*y.y;\n}\ndouble cos(dot x,dot y){\n\tif (!x.len()||!y.len())return 0;\n\treturn neiji(x,y)/x.len()/y.len();\n}\ndot Projection(dot x,line y){//求x关于直线y的投影点（垂足） \n\ty.x2=y.x2-y.x1;\n\tx=x-y.x1;\n\tdouble len=cos(x,y.x2)*x.len()/y.x2.len();\n\ty.x2=y.x2*len;\n\treturn y.x2+y.x1;\n}\ndot Reflection(dot x,line y){//求x关于直线y的对称点 \n\tdot z=Projection(x,y);\n\treturn z*2-x;\n}\nint Counter_Clockwise(dot x,line y){//求两个向量的五种关系 \n\tx=x-y.x1;y.x2=y.x2-y.x1;\n\tif (chaji(y.x2,x)!=0){\n\t\tif (chaji(y.x2,x)>0)return 1;\n\t\treturn 2;\n\t} \n\tif (fabs(cos(x,y.x2)+1)<eps)return 3;\n\tif (x.len()>y.x2.len())return 4;\n\treturn 5;\n} \nint Parallel_Orthogonal(line x,line y){//求两个直线是垂直还是平行还是其他 \n\tdot a=x.getdot(),b=y.getdot();\n\tif (chaji(a,b)==0)return 2;\n\tif (neiji(a,b)==0)return 1;\n\treturn 0;\n}\nint main(){\n\tint T;\n\tscanf(\"%d\",&T);\n\twhile (T--){\n\t\tline x,y;\n\t\tx.read();y.read();\n\t\tprintf(\"%d\\n\",Parallel_Orthogonal(x,y));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.x + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os <<  p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 0,      // a--c--b on line\n    ONLINE_BACK       = 2,      // c--a--b on line\n    ON_SEGMENT        = -2,     // a--b--c on line\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > 0) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < 0) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line or Segment in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\nusing Segment = Line;\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\n\n\n/**\n * Intersection point and Distance\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\nPoint Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\n\nint main()\n{\n    Line l1, l2;\n    int q;\n\n    std::cin >> q;\n\n    while (q--) {\n        std::cin >> l1 >> l2;\n\n        Point p1 = l1[0] - l1[1], p2 = l2[0] - l2[1];\n        Number len1 = p1.abs(), len2 = p2.abs();\n\n        if (len1 != 0.0 && len2 != 0.0 && abs(dot(p1, p2)) == len1 * len2)\n            std::cout << \"2\\n\";\n        else if (dot(p1, p2) == 0.0)\n            std::cout << \"1\\n\";\n        else\n            std::cout << \"0\\n\";\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//\n// Created by 肖龙 on 2020/3/18.\n//\n\n#include<iostream>\n#include <cmath>\n#include <iomanip>\n\nusing namespace std;\n\ntypedef struct point{\n    double x,y;\n}Point,Vector;\n\ntypedef struct line{\n    Point x;\n    Vector k;\n}Line;\n\n//点积\ndouble dot(Vector x,Vector y){\n    return x.x*y.x+x.y*y.y;\n}\n\n//叉积\ndouble cross(Vector x,Vector y){\n    return x.x*y.y-x.y*y.x;\n}\n\ndouble getlen(Vector x){\n    return sqrt(dot(x,x));\n}\n\nVector getV(Point x,Point y){\n    Vector v;\n    v.x=y.x-x.x;\n    v.y=y.y-x.y;\n    return v;\n}\n//点在直线的投影\nPoint Projection(Line x,Point y){\n    Point answ;\n    answ = x.x;\n\n    double len = dot(x.k,getV(x.x,y));\n    len/=sqrt(x.k.x*x.k.x+x.k.y*x.k.y);\n    Vector temp  = x.k;\n    temp.x /=sqrt(x.k.x*x.k.x+x.k.y*x.k.y);\n    temp.y/=sqrt(x.k.x*x.k.x+x.k.y*x.k.y);\n    answ.x+=temp.x*len;\n    answ.y+=temp.y*len;\n    return answ;\n}\n//点与直线的对称点\nPoint Reflection(Line x,Point y){\n    Point half = Projection(x,y);\n    Point answ;\n    answ.x=y.x+2*(half.x-y.x);\n    answ.y=y.y+2*(half.y-y.y);\n    return answ;\n}\n\nint main(){\n    int t;\n    cin>>t;\n    Point x,y;\n    Vector v1,v2;\n    while(t--){\n        cin>>x.x>>x.y>>y.x>>y.y;\n        v1=getV(x,y);\n        cin>>x.x>>x.y>>y.x>>y.y;\n        v2=getV(x,y);\n        if(dot(v1,v2)==0){\n            cout<<1<<endl;\n        }else if(cross(v1,v2)==0){\n            cout<<2<<endl;\n        }\n        else cout<<0<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\nconst double FAC = 1e-18;\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(FAC), y(FAC) {}\n\n    Point(db _x, db _y) : x(_x + FAC), y(_y + FAC) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n\n    Point rotac() { return Point(-y, x); }\n    Point rotcl() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    void read() { cin >> x >> y; }\n    void write() { cout << '(' << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    // 1 -> On Counter-clockwise\n    // 2 -> On Clockwise\n    // 3 -> On Line BUT MAY NOT ON THE SEGMENT!\n    int relation(Point p)\n    {\n        int c = sgn((p - s) ^ (e - s));\n        if (c < 0)\n            return 1;\n        else if (c > 0)\n            return 2;\n        return 3;\n    }\n\n    bool checkOn(Point p) { return relation(p) == 3 && sgn((p - s) ^ (p - e)) <= 0; }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point crossP(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void write()\n    {\n        cout << \"Line:\\n\";\n        s.write();\n        e.write();\n    }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        Line l1, l2;\n        l1.read();\n        l2.read();\n        l1.adjust();\n        l2.adjust();\n        if (l1.crossLL(l2) < 2)\n            cout << \"2\\n\";\n        else\n        {\n            auto d = abs(l1.angle() - l2.angle());\n            if (sgn(d - PI) > 0)\n                d -= PI;\n            if (!sgn(PI - 2 * d))\n                cout << \"1\\n\";\n            else\n                cout << \"0\\n\";\n        }\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nint decide(Point p0, Point p1, Point p2, Point p3){\n    Vector v0 = p1 - p0;\n    Vector v1 = p3 - p2;\n\n    if(fabs(dot(v0, v1)) <EPS){\n        return 1;\n    }else if(cross(v0, v1) <EPS){\n        return 2;\n    }else{\n        return 0;\n    }\n}\n\nint main(){\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n        scanf(\"%d\", &xp1);\n        scanf(\"%d\", &yp1);\n        scanf(\"%d\", &xp2);\n        scanf(\"%d\", &yp2);\n        scanf(\"%d\", &xp3);\n        scanf(\"%d\", &yp3);\n        \n        Point p0 = Point(xp0, yp0);\n        Point p1 = Point(xp1, yp1);\n        Point p2 = Point(xp2, yp2);\n        Point p3 = Point(xp3, yp3);\n\n        printf(\"%d\\n\", decide(p0, p1, p2, p3));\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n\n#define EPS 0.00000000001Lf\n\n#define PI 3.141592653589793238462643383279Lf\n\nint main()\n{\n    int q, x1, y1, x2, y2, x3, y3, x4, y4;\n    \n    scanf(\"%d\", &q);\n    \n    for(int i = 0; i < q; i++)\n    {\n        scanf(\"%d\", &x1);\n        scanf(\"%d\", &y1);\n        scanf(\"%d\", &x2);\n        scanf(\"%d\", &y2);\n        scanf(\"%d\"  &x3);\n        scanf(\"%d\", &y3);\n        scanf(\"%d\", &x4);\n        scanf(\"%d\", &x4);\n        \n        long double angle1 = atan2l(y2 - y1, x2 - x1);\n        long double angle2 = atan2l(y4 - y3, x4 - x3);\n        \n        long double sa = abs(angle2 - angle1);\n        \n        if(sa < -EPS) { sa += PI * 2.0; }\n        \n        if(sa == PI * 0.5 || sa == PI * 1.5)\n        {\n            cout << 1 << endl;\n        }\n        else if(sa == PI || sa == 0)\n        {\n            cout << 2 << endl;\n        }\n        else\n        {\n            cout << 0 << endl;\n        }\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n\n#define EPS (1e - 10)\n#define equals(a,b) (fabs((a) - (b)) < EPS) //?????????????????????????????????\n\n//??????????????????????????????\nclass Point{\n\npublic:\n\n\tdouble x, y;//??§?¨????????????????x,y??????\n\n\tPoint(double x = 0,double y = 0):x(x),y(y){}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator * (Point p) {\n\t\treturn Point(x * p.x, y * p.y);\n\t}\n\n\tPoint operator / (Point p) {\n\t\treturn Point(x / p.x, y / p.y);\n\t}\n\n\tdouble norm() {\n\t\treturn x*x + y*y;\n\t}\n\n\t//?????????????????§???????????????\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS &&  fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\n\ntypedef vector<Point> Polygon;\n\n//??????????????????????????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????????????????????????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\n\n\n\n//???\nclass Circle {\npublic:\n\tPoint c;//??????\n\tdouble r;//??????\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n\n\n\n\n\nint main(void)\n{\n\tint n;\n\n\tPoint p[4];\n\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tcin >> p[j].x >> p[j].y;\n\t\t}\n\n\t\tif (isOrthogonal(p[0], p[1], p[2], p[3])) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse if (isParallel(p[0], p[1], p[2], p[3])) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define SIZE 300005\n#define MOD 1000000007LL\n#define INF 1 << 29\n#define LLINF 1LL << 60\n#define REP(i,n) for(int i=0;i<n;i++)\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define DOWN(i,b,a) for(int i=b;i>=a;i--)\n#define SET(a,c) memset(a,c,sizeof a)\n#define BIT(i,j) ((i)>>(j))&1\n#define ALL(o) (o).begin(), (o).end()\n#define ERASE(o) (o).erase(unique((o).begin(),(o).end()), (o).end())\n#define SQ(x) ((x)*(x))\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll,ll> Pll;\ntypedef pair<int, int> Pii;\ntypedef pair<double, double> Pdd;\ntypedef complex<double> dcomplex;\ntemplate<typename T> inline void priv(vector<T>a){REP(i,a.size()){cerr<<a[i]<<((i==a.size()-1)?\"\\n\":\" \");}}\nll gcd(ll a,ll b){int c=max(a,b);int d=min(a,b);return c==0||d==0?c:gcd(c%d,d);}\nll lcm(ll a,ll b){return a==0||b==0?0:a*b/gcd(a,b);}\nll fact(ll a){ll b=1;FOR(i,1,a)b*=i;return b;}\n\nclass P\n{\npublic:\n  double x,y;\n  P(){};P(double x,double y):x(x),y(y){};\n  P operator+(const P&q){P t;t.x=x+q.x;t.y=y+q.y;return t;}\n  P operator+=(const P&q){x+=q.x;y+=q.y;return *this;}\n  P operator-(const P&q){P t;t.x=x-q.x;t.y=y-q.y;return t;}\n  P operator-=(const P&q){x-=q.x;y-=q.y;return *this;}\n  template<typename T> P operator*(T d){return P(x*d,y*d);}\n  template<typename T> P operator*=(T d){x*=d;y*=d;return *this;}\n  template<typename T> P operator/(T d){return P(x/d,y/d);}\n  template<typename T> P operator/=(T d){x/=d;y/=d;return *this;}\n  bool operator<(const P&q){return (x!=q.x)?(x<q.x):(y<q.y);}\n  bool operator>(const P&q){return (x!=q.x)?(x>q.x):(y>q.y);}\n  double norm(void){return sqrt(x*x+y*y);}\n  double arg(void){return acos(x/this->norm())*P(1,0).sign(*this);}\n  P nvec(){return P(y,-x);}\n  P rotate(double t){double c=cos(t),s=sin(t);return P(c*x-s*y,s*x+c*y);}\n  P reverseX(void){return P(-x,y);}\n  P reverseY(void){return P(x,-y);}\n  P unit(void){return (*this).norm()==0?P(0,0):(*this)/(*this).norm();}\n  P floor(void){return P((int)x,(int)y);}\n  double dot(const P&q){return x*q.x+y*q.y;}\n  double det(const P&q){return x*q.y-y*q.x;}\n  int sign(const P&q){double d = (*this).det(q); return (d>0)-(d<0);}\n  static bool on_seg(P p1,P p2,P q){return (p1-q).det(p2-q)==0&&(p1-q).dot(p2-q)<=0;}\n  static P intersection(P p1,P p2,P q1,P q2){return p1+(p2-p1)*((q2-q1).det(q1-p1)/(q2-q1).det(p2-p1));}\n};\n\n\nint main()\n{\n  int q; cin >> q;\n  REP(i,q)\n  {\n    int ans;\n    double x0,y0,x1,y1,x2,y2,x3,y3;\n    cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n    P u = P(x1-x0,y1-y0);\n    P v = P(x3-x2,y3-y2);\n    if(u.det(v)==0) ans = 2;\n    else if(u.dot(v)==0) ans = 1;\n    else ans = 0;\n    cout << ans << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb emplace_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\n#define eps (1e-10)\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n    Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n    Point operator*(double k){return Point(x*k,y*k);}\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n    bool operator == (const Point &p) const{\n    return fabs(x-p.x)<eps && fabs(y-p.y)<eps;\n  }\n  double dot(Point p){return x*p.x+y*p.y;}\n  double det(Point p){return x*p.y-y*p.x;}\n};\nstruct Line{\n  Point p1,p2;\n  Line(){}\n  Line(Point p1, Point p2):p1(p1),p2(p2){}\n};\nint ccw(Point a,Point b,Point c){\n  Point t1=b-a,t2=c-a;\n  if(t1.det(t2)> eps) return 1;//counter clockwise\n  if(t1.det(t2)< -eps) return -1;//clockwise\n  if(t1.dot(t2)< -eps) return 2;//c-a-b online\n  if(t1.norm()<t2.norm()) return -2;//a-b-c online\n  return 0;//a-c-b online\n}\nbool intersectSS(Point a,Point b,Point c,Point d){\n  return (ccw(a,b,c)*ccw(a,b,d)<=0&&ccw(c,d,a)*ccw(c,d,b)<=0);\n}\nbool intersectSS(Line l1,Line l2){\n  return intersectSS(l1.p1,l1.p2,l2.p1,l2.p2);\n}\nbool isOrthogonal(Point a,Point b){\n  return fabs(a.dot(b))<eps;\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\nbool isParallel(Point a,Point b){\n  return fabs(a.det(b))<eps;\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\nPoint CrossPoint(Line l1,Line l2){\n    double a=(l1.p2-l1.p1).det(l2.p2-l2.p1);\n    double b=(l1.p2-l1.p1).det(l1.p2-l2.p1);\n    if(fabs(a)<eps&&fabs(b)<eps) return l2.p1;\n    return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\nPoint project(Line l,Point p){\n  Point base=l.p2-l.p1;\n  double r=(p-l.p1).dot(base)/base.norm();\n  return l.p1+base*r;\n}\nPoint reflect(Line l,Point p){\n  return p+(project(l,p)-p)*2.0;\n}\nint main(){\n    int q;\n    double xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3;\n    cin>>q;\n    while(q--){\n        cin>>xp0>>yp0>>xp1>>yp1>>xp2>>yp2>>xp3>>yp3;\n        Point p0(xp0,yp0),p1(xp1,yp1),p2(xp2,yp2),p3(xp3,yp3);\n        if(isParallel(p0,p1,p2,p3)) cout<<2<<endl;\n        else if(isOrthogonal(p0,p1,p2,p3)) cout<<1<<endl;\n        else cout<<0<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) for(int i=0;i<(n);i++)\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double X = 0, double Y = 0)\n\t{\n\t\tx = X;\n\t\ty = Y;\n\t}\n\tPoint operator +(const Point &p)const { return Point(x + p.x, y + p.y); };\n\tPoint operator -(const Point &p)const { return Point(x - p.x, y - p.y); };\n\tPoint operator *(const double a)const { return Point(x*a, y*a); };\n\tPoint operator /(const double a)const { return Point(x / a, y / a); };\n\tdouble norm()const { return x*x + y*y; };\n\tdouble length()const { return sqrt(norm()); };\n\tdouble dot(const Point &p)const { return x*p.x + y*p.y; };\n\tdouble cross(const Point &p)const { return x*p.y - y*p.x; };\n\tbool operator ==(const Point &p)const\n\t{\n\t\treturn fabs(x - p.x)<EPS &&fabs(y - p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\n\nclass Segment\n{\npublic:\n\tPoint p1, p2;\n\tbool IsOrthogonal(const Segment &s)\n\t{\n\t\tPoint t1 = p2 - p1;\n\t\tPoint t2 = s.p2 - s.p1;\n\t\treturn equals(0.0, t1.dot(t2));\n\t}\n\tbool IsParallel(const Segment &s)\n\t{\n\t\tPoint t1 = p2 - p1;\n\t\tPoint t2 = s.p2 - s.p1;\n\t\treturn equals(0.0, t1.cross(t2));\n\t}\n};\ntypedef Segment Line;\n\nint main()\n{\n\tint q;\n\tcin >> q;\n\tREP(i, q)\n\t{\n\t\tint ans = 0;\n\t\tLine s1, s2;\n\t\tcin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n\t\tif (s1.IsOrthogonal(s2))ans = 1;\n\t\telse if (s1.IsParallel(s2))ans = 2;\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\ntypedef complex<ld> Point;\ntypedef pair<Point, Point> Segment;\nconstexpr double EPS = (1e-9L);\nconstexpr ld dot(const Point& p1, const Point& p2) { return (conj(p1) * p2).real(); }\nconstexpr ld cross(const Point& p1, const Point& p2) { return (conj(p1) * p2).imag(); }\nconstexpr bool eq(ld a) { return a < EPS; }\nint main() {\n\tint n; cin >> n;\n\tint xa, ya, xb, yb;\n\tPoint v[2];\n\trep(i, 0, n) {\n\t\trep(j, 0, 2) { cin >> xa >> ya >> xb >> yb; v[j] = Point(xb, yb) - Point(xa, ya); }\n\t\tif (eq(cross(v[0], v[1]))) P(2);\n\t\telse if (eq(dot(v[0], v[1]))) P(1);\n\t\telse P(0);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\n#include <cmath>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a*x, a*y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nstruct Segment{\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nint main() {\n\tint q;\n\tLine l1, l2;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> l1.p1.x >> l1.p1.y >> l1.p2.x >> l1.p2.y >> l2.p1.x >> l2.p1.y >> l2.p2.x >> l2.p2.y;\n\t\tif (isParallel(l1, l2)) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse if (isOrthogonal(l1, l2)) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass vec{\npublic:\n\tdouble x,y;\n\tvec(){\n\t\tx = y = 0.0;\n\t}\n\tvec(double x,double y){\n\t\tthis->x = x;\n\t\tthis->y = y;\n\t}\n\tvec operator+(vec &r) const{\n\t\treturn vec(x+r.x,y+r.y);\n\t}\n\tvec operator-(vec &r) const{\n\t\treturn vec(x-r.x,y-r.y);\n\t}\n\tvoid operator=(vec &r){\n\t\tthis->x = r.x;\n\t\tthis->y = r.y;\n\t}\n\tdouble norm2(){\n\t\treturn x*x+y*y;\t\n\t}\n};\n\ndouble dot(vec v,vec u){\n\treturn v.x*u.x + v.y*u.y;\n}\ndouble closs(vec v,vec u){\n\treturn v.x*u.y - v.y*u.x;\n}\nbool is_zero(double b){\n\tdouble ep = 1e-10;\n\treturn fabs(b) < ep;\n}\n\nint main(){\n\tint q;\n\tvec p0,p1,p2,p3;\n\tcin >> q;\n\tfor(int i = 0; i < q; i++){\n\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\tvec u = p1 - p0;\n\t\tvec v = p3 - p2;\n\t\tif(is_zero(closs(u,v))){\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse if(is_zero(dot(u,v))){\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse{\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n#include <cassert>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define fs first\n#define sc second\n#define pb push_back\nusing namespace std;\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P,P> L;\t\t//fs->sc\ntypedef vector<P> Pol;\nstruct C{P p;D r;};\nD inf=1e50,eps=1e-10;\n//template<class T> bool eq(T a, T b) { return abs(a-b)<eps;}\n//template<class T> int sig(T a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool eq(D a, D b) { return abs(a-b)<eps;}\nbool eq(P a, P b) { return abs(a-b)<eps;}\nint sig(D a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\ninline D dot(P a, P b) { return real(conj(a)*b);};\ninline D cro(P a, P b) { return imag(conj(a)*b);};\nenum ENCCW{CCW=1, CW=-1, FRONT=2, BACK=-2, ON=0};\t//!!MAEHARAとFRONT,BACKが逆\n//ON優先(including endpoint)\ninline int ccw (P a, P b, P c){\n//\tcout << cro(b-a,c-a) << endl;\n\tif(sig(cro(b-a,c-a))==1) return CCW;\n\tif(sig(cro(b-a,c-a))==-1) return CW;\n\tif(eq(abs(a-c)+abs(c-b),abs(a-b))) return ON;\n\tif(eq(abs(a-b)+abs(b-c),abs(a-c))) return FRONT;\n\tif(eq(abs(c-a)+abs(a-b),abs(c-b))) return BACK;\n\tassert(false);\n}\ninline P proj(P a, P b){\t\t//ベクトルaのbへの射影\n\treturn (dot(a,b)/norm(b))*b;\n}\ninline P perp(L l, P p){\t\t//垂線の足\n\tD t=dot(p-l.fs,l.fs-l.sc)/norm(l.fs-l.sc);\n\treturn l.fs+t*(l.fs-l.sc);\n}\ninline P refl(L l, P p){\n\treturn p+2.0*(perp(l,p)-p);\n}\ninline bool ispal(L a, L b){\n\treturn sig(cro(a.fs-a.sc,b.fs-b.sc))==0;\n}\ninline bool ovLL(L a, L b){\n\treturn ispal(a,b) && sig(cro(a.fs-a.sc,b.fs-a.sc))==0;\n}\ninline bool iLL(L a, L b){\t\t//intersect or overload\n\treturn !ispal(a,b) || ovLL(a,b);\n}\ninline bool iLS(L l, L s){\t\t//intersect(including endpoint) or overload\n\treturn cro(l.sc-l.fs,s.fs-l.fs)*cro(l.sc-l.fs,s.sc-l.fs)<eps;\n}\ninline bool iLP(L l, P p){\t\t//on line\n\treturn sig(cro(l.sc-p,l.fs-p));\n}\ninline bool iSS(L a, L b){\t\t//intersect(including endpoint) or overload\n\treturn ccw(a.fs,a.sc,b.fs)*ccw(a.fs,a.sc,b.sc)<=0 && ccw(b.fs,b.sc,a.fs)*ccw(b.fs,b.sc,a.sc)<=0;\n}\ninline bool iSP(L s, P p){\t\t//intersect(including endpoint) or overload\n\treturn ccw(s.fs,p,s.sc)==ON;\n}\ninline D dLP(L l, P p) { return abs(perp(l,p)-p);}\ninline D dLL(L a, L b) { return iLL(a,b) ? 0 : dLP(a,b.fs);}\ninline D dLS(L l, L s) { return iLS(l,s) ? 0 : min(dLP(l,s.fs),dLP(l,s.sc));}\ninline D dSP(L s, P p) {\n\tP q=perp(s,p);\n\treturn iSP(s,q) ? abs(p-q) : min(abs(p-s.fs),abs(p-s.sc));\n}\ninline D dSS(L a, L b) {\n\tif(iSS(a,b)) return 0;\n\treturn min(min(dSP(a,b.fs),dSP(a,b.sc)),min(dSP(b,a.fs),dSP(b,a.sc)));\n}\ninline P intLL(L a, L b) {\t//intersection\n\tassert(!ispal(a,b));\n\tD t=cro(a.sc-a.fs,a.sc-b.fs)/cro(a.sc-a.fs,b.sc-b.fs);\n\treturn b.fs+t*(b.sc-b.fs);\n}\nenum ENICP{INC=1,ONC=0,OUTC=-1};\ninline int iCP(C c, P p){\n\tD d=abs(p-c.p);\n\treturn eq(d,c.r) ? ONC : (d<c.r ? INC : OUTC);\n}\ninline int iCL(C c, L l){\t\t//num of intersection(s)\n\tD d=dLP(l,c.p);\n\treturn eq(d,c.r) ? 1 : (d<c.r ? 2 : 0);\n}\n//inline int iCS\n//inline int iCC(C a, C b){\n\n/*inline P intCL1(C c, L l){\t\t//iCL=1\n\tassert(iCL(c,l)==1);\n}\ninline L intCL2(C c, L l){\t\t//iCL=2\n\tassert(iCL(c,l)==2);\n}*/\nD aTri(P a, P b, P c){ return cro(b-a,c-a)/2;}\nD aPol(Pol p){\t\t\t//点集合はCCWに与える\n\tint n=p.size();\n\tD ret=0;\n\trep(i,n) ret+=cro(p[i],p[(i+1)%n])/2;\n\treturn ret;\n}\nP gPol(Pol p){\t\t\t//多角形内部が一様な重さを持つときの重心\n\tint n=p.size();\n\tP g;\n\tD s=aPol(p);\n\tassert(s>eps);\n\trep(i,n){\n\t\tD ds=cro(p[i],p[(i+1)%n])/2;\n\t\tg+=ds/3*(p[i]+p[(i+1)%n]);\n\t}\n\treturn g/s;\n}\nenum ENCONT{INP=1,ONP=0,OUTP=-1};\nint contain(Pol pol, P p){\n\tbool in=false;\n\trep(i,pol.size()){\n\t\tP a=pol[i],b=pol[(i+1)%pol.size()];\n\t\tif(ccw(a,b,p)==ON) return ONP;\n\t\tif(!iLS(L(p,p+1.),L(a,b))) continue;\n\t\tif(ovLL(L(p,p+1.),L(a,b))){\n\t\t\tif(sig(max(real(a),real(b))-real(p))>=0) in=!in;\n\t\t\tcontinue;\n\t\t}\n\t\tif(sig(real(intLL(L(p,p+1.),L(a,b)))-real(p))>=0) in=!in;\n\t}\n\treturn in ? INP : OUTP;\n}\ninline D heron(D a, D b, D c){\n\tdouble s=(a+b+c)/2;\n\tif(s-a<eps || s-b<eps || s-c<eps) return 0;\t\t//S=0 || 三角形できない\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tint q;\n\tscanf(\"%d\",&q);\n\trep(i,q){\n\t\tD a,b,c,d,e,f,g,h;\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&a,&b,&c,&d,&e,&f,&g,&h);\n\t\tL l=L(P(a,b),P(c,d)),m=L(P(e,f),P(g,h));\n\t\tif(ispal(l,m)) printf(\"2\\n\");\n\t\telse if(eq(perp(l,m.fs),perp(l,m.sc))) printf(\"1\\n\");\n\t\telse printf(\"0\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\ntypedef double D;\nconst D EPS = 1e-8;\nconst D INF = 1e10;\nconst D PI = M_PI;\n\nstruct P {\n    D x, y;\n    P(D xs, D ys) : x(xs), y(ys) { }\n    P() { }\n};\n\nP operator +(P a, P b) { return P(a.x + b.x, a.y + b.y); }\nP operator -(P a, P b) { return P(a.x - b.x, a.y - b.y); }\nP operator *(P p, D s) { return P(p.x * s, p.y * s); }\n\nD inp(P a, P b) { return a.x*b.x + a.y*b.y; }\nD outp(P a, P b) { return a.x*b.y - a.y*b.x; }\n\nD norm(P p) { return inp(p, p); }\nD abs(P p) { return sqrt(norm(p)); }\n\nbool eq(P a, P b) { return abs(a - b) < EPS; }\n\nD arg(P p) { return atan2(p.y, p.x); }\n\nP rot90(P p) {\n    return P(-p.y, p.x);\n}\n\nP rot(P p, D radian) {\n    P q;\n    q.x = cos(radian)*p.x - sin(radian)*p.y;\n    q.y = sin(radian)*p.x + cos(radian)*p.y;\n    return q;\n}\n\nstruct L : vector<P> {\n    L(P a, P b) { push_back(a); push_back(b); }\n    L() { this->resize(2); }\n};\n\nstruct C {\n    P p; D r;\n    C(P ps, D rs) : p(ps), r(rs) { }\n    C() { }\n};\n\n// ??´???l???????????????p?????????\n// (l??????p??????????????????????????¨????????????????±???????)\n// norm??§?????£?????????(abs??§??????????????????)\nP projection(L l, P p) {\n    P a = l[1] - l[0];\n    P b = p - l[0];\n    D t = inp(b, a) / norm(a);\n    return l[0] + a * t;\n}\n\n// ??´???l???????????????p???????°?\n// (l????????????????§°???p??????)\nP reflection(L l, P p) {\n    return p + (projection(l, p) - p) * 2;\n}\n\nint ccw(P a, P b, P c) {\n    b = b - a; c = c - a;\n\n    // a - b - c ????????????????????¨???\n    if(outp(b, c) > EPS)  return +1; // ???????¨???????\n    if(outp(b, c) < -EPS) return -1; // ????¨???????\n\n    // a - b - c ??´??????????????¶??¨???\n    if(inp(b, c) < 0)     return +2; // c - a - b\n    if(norm(b) < norm(c)) return -2; // a - b - c\n    return 0;                        // a - c - b\n}\n\nint main() {\n    int Q; cin >> Q;\n    while(Q--) {\n        D x[4], y[4];\n        for(int i = 0; i < 4; i++) {\n            cin >> x[i] >> y[i];\n        }\n\n        P p(x[1] - x[0], y[1] - y[0]), q(x[3] - x[2], y[3] - y[2]);\n\n        int result;\n        if(abs(outp(p, q)) < EPS) {\n            result = 2;\n        }\n        else if(abs(inp(p, q)) < EPS) {\n            result = 1;\n        }\n        else {\n            result = 0;\n        }\n        cout << result << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <math.h>\nconst double EPS = 1e-30;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\t/*vector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}*/\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double para(vector v1, vector v2) {\n\treturn sqrt(v1.x*v1.x + v1.y*v1.y)*sqrt(v2.x*v2.x + v2.y*v2.y);\n}\nint main() {\n\tdouble n, x1, x2, x3, x4, y1, y2, y3, y4;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tvector v1(x2 - x1, y2 - y1);\n\t\tvector v2(x4 - x3, y4 - y3);\n\t\tdouble ans = dot(v1, v2);\n\t\tif (ans == 0) cout << 1 << endl;\n\t\telse if (fabs(ans - para(v1, v2)) < EPS || fabs(2*ans - (ans - para(v1, v2))) < EPS) cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <complex>\nusing namespace std;\n\ntypedef long long lli;\ntypedef complex<lli> point;\n\nlli dot(point a,point b){\n\treturn (a*conj(b)).real();\n}\n\nlli double cross(point a,point b){\n\treturn (a*conj(b)).imag();\n}\n\nint main(void){\n\tdouble x,y;\n\tint q;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x>>y;\n\t\tpoint p0(x,y);\n\t\tcin>>x>>y;\n\t\tpoint p1(x,y);\n\t\tcin>>x>>y;\n\t\tpoint p2(x,y);\n\t\tcin>>x>>y;\n\t\tpoint p3(x,y);\n\t\tpoint l1=p1-p0;\n\t\tpoint l2=p3-p2;\n\t\tif(cross(l1,l2)==0)cout<<\"2\"<<endl;\n\t\telse if(dot(l1,l2)==0)cout<<\"1\"<<endl;\n\t\telse cout<<\"0\"<<endl;\n\t\treturn 0;\n\t}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS) //?????????????????????????????????\n\n//??????????????????????????????\nclass Point{\n\npublic:\n\n\tdouble x, y;//??§?¨????????????????x,y??????\n\n\tPoint(double x = 0,double y = 0):x(x),y(y){}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator * (Point p) {\n\t\treturn Point(x * p.x, y * p.y);\n\t}\n\n\tPoint operator / (Point p) {\n\t\treturn Point(x / p.x, y / p.y);\n\t}\n\n\tdouble norm() {\n\t\treturn x*x + y*y;\n\t}\n\n\t//?????????????????§???????????????\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS &&  fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\n\ntypedef vector<Point> Polygon;\n\n//??????????????????????????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????????????????????????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\n\n\n\n//???\nclass Circle {\npublic:\n\tPoint c;//??????\n\tdouble r;//??????\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n\n\n\n\n\nint main(void)\n{\n\tint n;\n\n\tPoint p[4];\n\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tcin >> p[j].x >> p[j].y;\n\t\t}\n\n\t\tif (isOrthogonal(p[0], p[1], p[2], p[3])) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse if (isParallel(p[0], p[1], p[2], p[3])) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\n\nusing Point = complex<double>;\nusing Polygon = vector<Point>;\n\ninline int sgn(const double &a) { return (a < -EPS ? -1 : (a > EPS ? 1 : 0)); }\n\ninline bool eq(const Point &a, const Point &b) { return abs(a - b) < EPS; }\n\nnamespace std {\ninline bool operator<(const Point &a, const Point &b) {\n    if (sgn(a.real() - b.real()))\n        return sgn(a.real() - b.real()) < 0;\n    return sgn(a.imag() - b.imag()) < 0;\n}\n} // namespace std\n\ndouble dot(const Point &a, const Point &b) { return real(conj(a) * b); }\n\ndouble det(const Point &a, const Point &b) { return imag(conj(a) * b); }\n\nstruct Line {\n    Point p1, p2;\n\n    Line(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\n    bool operator<(const Line &rhs) const {\n        if (eq(p2, rhs.p2))\n            return p1 < rhs.p1;\n        return p2 < rhs.p2;\n    }\n    bool operator==(const Line &rhs) const {\n        return (eq(p1, rhs.p1) && eq(p2, rhs.p2)) ||\n               (eq(p1, rhs.p2) && eq(p2, rhs.p1));\n    }\n};\n\nbool is_parallel(Line a, Line b) {\n    if (sgn(det(a.p1 - a.p2, b.p1 - b.p2)))\n        return false;\n    return true;\n}\n\nbool is_orthogonal(Line a, Line b){\n    if(sgn(dot(a.p1 - a.p2, b.p1 - b.p2)))\n        return false;\n    return true;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i=0;i<q;++i){\n        double x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        Point p0 = Point(x0, y0), p1 = Point(x1, y1), p2 = Point(x2, y2), p3 = Point(x3, y3);\n        Line s1 = Line(p0, p1), s2 = Line(p2, p3);\n        int ans = (is_parallel(s1, s2) ? 2 : is_orthogonal(s1, s2) ? 1 : 0);\n        cout << ans << endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "# include <iostream>\n# include <algorithm>\n# include <vector>\n# include <string>\n# include <set>\n# include <map>\n# include <cmath>\n# include <iomanip>\n# include <functional>\n# include <utility>\n# include <stack>\n# include <queue>\n# include <list>\nconstexpr int MOD = 1000000007;\nconstexpr int INF = 2000000000;\nusing namespace std;\n\n//????????????????????¨????????????????????????\n\n//????????¨????§???????(Point?????????)\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b))<EPS)\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a*x, a*y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble Abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x, y*y; }\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS&&fabs(y - p.y) < EPS;\n\t}\n};\n\n//?????????????????¨????§???????????????????????????????\ntypedef Point Vector;\n\n//?§????p1??¨??????p2?????????\nstruct Segment { Point p1, p2; };\n\n//??????\ntypedef Segment Line;\n\n//???\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n//????§???¢\ntypedef vector<Point> Polygon;\n\n//????????????a??¨b?????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//????????????a??¨b?????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//????????????a??¨b?????´?????????\nbool isOrtogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrtogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrtogonal(a1 - a2, b1 - b2);\n}\nbool isOrtogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 -s2.p1), 0.0);\n}\n\n//????????????a??¨b???????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint main() {\n\tint n;\n\tcin >> n;\n\tVector v1, v2, v3, v4;\n\tdouble x, y;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x >> y;\n\t\tv1 = { x,y };\n\t\tcin >> x >> y;\n\t\tv2 = { x,y };\n\t\tcin >> x >> y;\n\t\tv3 = { x,y };\n\t\tcin >> x >> y;\n\t\tv4 = { x,y };\n\t\tif (isParallel(v1, v2, v3, v4))cout << 2 << endl;\n\t\telse if (isOrtogonal(v1, v2, v3, v4))cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n\n#define EPS 0.00000000001L\n\n#define PI 3.141592653589793238462643383279L\n\nint main()\n{\n    int q, x1, y1, x2, y2, x3, y3, x4, y4;\n    \n    scanf(\"%d\", &q);\n    \n    for(int i = 0; i < q; i++)\n    {\n        scanf(\"%d\", &x1);\n        scanf(\"%d\", &y1);\n        scanf(\"%d\", &x2);\n        scanf(\"%d\", &y2);\n        scanf(\"%d\", &x3);\n        scanf(\"%d\", &y3);\n        scanf(\"%d\", &x4);\n        scanf(\"%d\", &x4);\n        \n        long double angle1 = atan2l(y2 - y1, x2 - x1);\n        long double angle2 = atan2l(y4 - y3, x4 - x3);\n        \n        long double sa = fabsl(angle2 - angle1);\n        \n        if(sa < -EPS) { sa += PI * 2.0; }\n        \n        if(sa == PI * 0.5 || sa == PI * 1.5)\n        {\n            printf(\"1\\n\");\n        }\n        else if(sa == PI || sa == 0)\n        {\n            printf(\"2\\n\");\n        }\n        else\n        {\n            printf(\"0\\n\");\n        }\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\n#define FOR(k,m,n) for(int (k)=(m);(k)<(n);(k)++)\n#define REP(i,n) FOR((i),0,(n))\n\n\n//???\n\n//???\nclass Point{\npublic:\n\tdouble x, y;\n\t//?????????????????????\n\tPoint(int x_=0.0,int y_=0.0):x(x_),y(y_){}\n\t\n\t//??????????????????????????????\n\tPoint operator + (Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double k) { return Point(x * k, y * k); }\n\tPoint operator / (double k) { return Point(x / k, y / k); }\n\n\tbool operator  < (const Point &p)const {\n\t\treturn x!=p.x ? x<p.x : y<p.y;\n\t}\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n\n\t//??¢??°\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n};\ntypedef Point Vector;        //????????????\nstruct Segment{Point p1,p2;};//??????\ntypedef Segment Line;        //??´???\n\n//???\nclass Circle {\npublic:\n\tPoint center;\n\tdouble r;\n\t//?????????????????????\n\tCircle(Point c_=Point(),double r_=0.0):center(c_),r(r_){}\n};\ntypedef vector<Point> Polygon;//????§???¢??????????????????\n\n\n\n//??¢??°????????????\n\n//?????????????????¢??°??????\nnamespace VFunc {\n\t//??????\n\tdouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n\t//??????\n\tdouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\t//??´?????????????¨????\n\tbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\tbool isOrthogonal(Point a1,Point  a2, Point b1,Point b2) {return isOrthogonal(a1-a2,b1-b2);}\n\tbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\t//????????????????¨????\n\tbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\tbool isParallel(Point a1, Point  a2, Point b1, Point b2) {return isParallel(a1 - a2, b1 - b2);}\n\tbool isParallel(Segment s1, Segment s2) {return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\n}\n//??????????????¨??????\nint q;\nPoint p[4];\n\nint main() {\n\tcin>>q;\n\tREP(i,q){\n\t\tREP(j, 4)cin >> p[j].x >> p[j].y;\n\t\tif      (VFunc::isParallel  (p[0], p[1], p[2], p[3])) cout << \"2\" << endl;\n\t\telse if (VFunc::isOrthogonal(p[0], p[1], p[2], p[3])) cout << \"1\" << endl;\n\t\telse                                                  cout << \"0\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cassert>\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) FOR(i,0,n)\n#define rep(i,n) FOR(i,0,n)\n#define DEBUG(x) cout<<#x<<\": \"<<x<<endl\n#define vint vector<int>\n#define vdouble vector<double>\n#define vstring vector<string>\nusing namespace std;\n\n#include<map>\n#include<set>\n#include<queue>\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nconst int MAX_N = 1000000;\nconst int INFTY = (1 << 21); // 2097152\n// const ll INFTY = (1LL << 60);\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x=0, double y=0):x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a){ return Point(a * x, a * y); }\n\tPoint operator / (double a){ return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y;}\n\tbool operator < (const Point &p) const {\n\t\t// first x, second y\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nstruct Segment{\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2){\n\t\tthis->p1 = p1;\n\t\tthis->p2 = p2;\n\t}\n};\n\n// ??????\ndouble dot(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.x + a.y * b.y;\n}\n\n// ??????\ndouble cross(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// ??´?????????\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1- b2);\n}\n\n// ????????????\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1- b2);\n}\n\n// ???p????????????s???????????????????????????\nPoint project(Segment s, Point p){\n\t// ??\\??????????????????\n\t// hypo -> p - p1, base -> p2 - p1\n\t// t = |hypo|cos??\n\t// cos?? = dot(hypo,base)/|hypo||base|\n\t// project = s.p1 + base/|base| * t\n\tVector hypo = p - s.p1;\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(hypo, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\n// ???p????????????s???????§°?????¨?????????\nPoint reflection(Segment s, Point p){\n\tPoint pr = project(s, p);\n\treturn p + (pr - p) * 2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n// p0??????p1????????????????????????????????????p2?????????\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif( cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif( cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a,b) <-EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// ????????????????????? ??????p1->p2, p3->p4\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n// ?????????????????????\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// ???????????????\nPoint crosspoint(Segment s1, Segment s2){\n\t// s1.p1??????s2???????????????????????????d1\n\t// s1.p2??????s2???????????????????????????d2??¨????????¨???\n\t// ?????????s1???d1/(d1+d2)?????????????????¨??????\n\tVector base = s2.p2 - s2.p1;\n\tVector hypo1 = s1.p1 - s2.p1;\n\tVector hypo2 = s1.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, hypo1)) / base.abs();\n\tdouble d2 = abs(cross(base, hypo2)) / base.abs();\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n// ???????????¢\ndouble distance(Point a, Point b){\n\treturn (a - b).abs();\n}\n\n// ?????¨??´???????????¢\ndouble distanceLinePoint(Segment s, Point p){\n\t// sin?? = |cross(hypo, base)|/|hypo||base|\n\t// distance = |hypo|sin?? = |cross(hypo, base)|/|base|\n\tVector hypo = p - s.p1;\n\tVector base = s.p2 - s.p1;\n\treturn abs(cross(hypo, base)) / base.abs();\n}\n\n// ?????¨??????????????¢\ndouble distanceSegmentPoint(Segment s, Point p){\n\t// (p2-p1)??¨???p-p1??????90???????????§????????´??????p??¨p1????????¢\n\t// (p1-p2)??¨???p-p2??????90???????????§????????´??????p??¨p2????????¢\n\t// ????????\\????????´???????????¨??´???????????¢\n\tif(dot(s.p2-s.p1, p-s.p1) < 0.0) return (p - s.p1).abs();\n\tif(dot(s.p1-s.p2, p-s.p2) < 0.0) return (p - s.p2).abs();\n\treturn distanceLinePoint(s, p);\n}\n\n// ????????¨??????????????¢\ndouble distanceSegmentSegment(Segment s1, Segment s2){\n\tif(intersect(s1, s2)) return 0.0;\n\tdouble ret = distanceSegmentPoint(s1, s2.p1);\n\tret = min(ret, distanceSegmentPoint(s1, s2.p2));\n\tret = min(ret, distanceSegmentPoint(s2, s1.p1));\n\tret = min(ret, distanceSegmentPoint(s2, s1.p2));\n\treturn ret;\n}\n\n\nclass Answer{\npublic:\n\tstatic void CGL_1_A() {\n\t\tint Q;\n\t\tPoint p1, p2;\n\t\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint pp;\n\t\t\tcin >> pp.x >> pp.y;\n\t\t\tPoint pr = project(Segment(p1, p2), pp);\n\t\t\tfprintf(stdout, \"%.10f %.10f\\n\", pr.x, pr.y);\n\t\t}\n\t}\n\tstatic void CGL_1_B() {\n\t\tint Q;\n\t\tPoint p1, p2;\n\t\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint pp;\n\t\t\tcin >> pp.x >> pp.y;\n\t\t\tPoint rf = reflection(Segment(p1, p2), pp);\n\t\t\tfprintf(stdout, \"%.10f %.10f\\n\", rf.x, rf.y);\n\t\t}\n\t}\n\tstatic void CGL_1_C() {\n\t\tint Q;\n\t\tPoint p0, p1;\n\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p2;\n\t\t\tcin >> p2.x >> p2.y;\n\t\t\tint c = ccw(p0, p1, p2);\n\t\t\tif(c == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tif(c == CLOCKWISE) cout << \"CLOCKWISE\" << endl;\n\t\t\tif(c == ONLINE_BACK) cout << \"ONLINE_BACK\" << endl;\n\t\t\tif(c == ONLINE_FRONT) cout << \"ONLINE_FRONT\" << endl;\n\t\t\tif(c == ON_SEGMENT) cout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n\tstatic void CGL_2_A() {\n\t\tint Q;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p0, p1, p2, p3;\n\t\t\tcin >> p0.x >> p0.y;\n\t\t\tcin >> p1.x >> p1.y;\n\t\t\tcin >> p2.x >> p2.y;\n\t\t\tcin >> p3.x >> p3.y;\n\t\t\tint r;\n\t\t\tif(isOrthogonal(p0,p1,p2,p3)) {r = 1;}\n\t\t\telse if(isParallel(p0,p1,p2,p3)){r = 2;}\n\t\t\telse{r = 0;}\n\t\t\tcout << r << endl;\n\t\t}\n\t}\n\tstatic void CGL_2_B() {\n\t\tint Q;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p0, p1;\n\t\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\t\t\tPoint p2, p3;\n\t\t\tcin >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\t\tcout << (intersect(p0, p1, p2, p3) ? 1 : 0) << endl;\n\t\t}\n\t}\n\tstatic void CGL_2_C() {\n\t\tint Q;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p0, p1;\n\t\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\t\t\tPoint p2, p3;\n\t\t\tcin >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\t\tPoint c = crosspoint(Segment(p0, p1), Segment(p2, p3));\n\t\t\tfprintf(stdout, \"%.10f %.10f\\n\", c.x, c.y);\n\t\t}\n\t}\n\n\tstatic void CGL_2_D(){\n\t\tint Q;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p0, p1;\n\t\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\t\t\tPoint p2, p3;\n\t\t\tcin >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\t\tdouble ret = distanceSegmentSegment(Segment(p0, p1), Segment(p2, p3));\n\t\t\tfprintf(stdout, \"%.10f\\n\", ret) ;\n\t\t}\n\t}\n};\n\nint main() {\n\tAnswer::CGL_2_A();\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define fi first\n#define se second\n#define repl(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define rep(i,n) repl(i,0,n)\n#define each(itr,v) for(auto itr:v)\n#define pb(s) push_back(s)\n#define mp(a,b) make_pair(a,b)\n#define all(x) (x).begin(),(x).end()\n#define dbg(x) cout<<#x\"=\"<<x<<endl\n#define maxch(x,y) x=max(x,y)\n#define minch(x,y) x=min(x,y)\n#define uni(x) x.erase(unique(all(x)),x.end())\n#define exist(x,y) (find(all(x),y)!=x.end())\n#define bcnt(x) bitset<32>(x).count()\n\n#define x(p) real(p)\n#define y(p) imag(p)\n\nconst double eps=1e-8;\nconst double inf=1e12;\ntypedef complex<double> P;\n\nnamespace std{\n  bool operator<(const P& a,const P& b){\n    return x(a)==x(b)?y(a)<y(b):x(a)<x(b);\n  }\n}\ndouble cross(const P& a,const P& b){\n  return y(conj(a)*b);\n}\ndouble dot(const P& a,const P& b){\n  return x(conj(a)*b);\n}\nstruct L : public vector<P> { // line and segment\n  L(const P& a,const P &b){\n    push_back(a);\n    push_back(b);\n  }\n};\n\nP projection(const L& l,const P& p){\n  P b=l[1]-l[0],c=p-l[0];\n  return l[0]+b*x(c/b);\n}\nP reflection(const L& l,const P& p){\n  return p+2.0*(projection(l,p)-p);\n}\n//// counter-clockwise\nint ccw(P a,P b,P c) {\n  b=b-a;c=c-a;\n  if(cross(b,c)>0) return +1;       // counter clockwise\n  if(cross(b,c)<0) return -1;       // clockwise\n  if(dot(b,c)<0)   return +2;       // c--a--b on line\n  if(norm(b)<norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\nbool intersectLL(const L& l,const L& m){\n  return abs(cross(l[1]-l[0],m[1]-m[0]))>eps||abs(cross(l[1]-l[0],m[0]-l[0]))<eps;\n}\n\nint main(){\n\tcin.sync_with_stdio(false);\n  int q;\n  cin>>q;\n  while(q--){\n    P p[4];\n    rep(i,4){\n      double x,y;\n      cin>>x>>y;\n      p[i]=P(x,y);\n    }\n    if(intersectLL(L(p[1],p[0]),L(p[2],p[3]))){\n      if(abs(dot(p[1]-p[0],p[3]-p[2]))<eps)cout<<1<<endl;\n      else cout<<0<<endl;\n    }else cout<<2<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n/*\n#ifndef ONLINE_JUDGE\n\t#include <boost/multiprecision/cpp_int.hpp>\n\t#include <boost/multiprecision/cpp_dec_float.hpp>\n\tusing bll = boost::multiprecision::cpp_int;\n\tusing bdouble = boost::multiprecision::cpp_dec_float_100;\n#endif\n*/\n#ifdef LOCAL_DEV\n\tvoid debug_impl() { std::cerr << std::endl; }\n\ttemplate<typename Head, typename... Tail> void debug_impl(Head head, Tail... tail) { std::cerr << \" \" << head << (sizeof...(tail) ? \",\" : \"\"); debug_impl(tail...); }\n\t#define debug(...) { std::cerr << std::boolalpha << \"(\" << #__VA_ARGS__ << \") =\"; debug_impl(__VA_ARGS__); std::cerr << std::noboolalpha; }\n#else\n\t#define debug(...) {}\n#endif\n#ifdef LOCAL_TEST\n\t#define BOOST_STACKTRACE_USE_ADDR2LINE\n\t#define BOOST_STACKTRACE_ADDR2LINE_LOCATION /usr/local/opt/binutils/bin/addr2line\n\t#define _GNU_SOURCE\n\t#include <boost/stacktrace.hpp>\n\ttemplate<typename T> class dvector : public std::vector<T> {\n\tpublic:\n\t\tdvector() : std::vector<T>() {}\n\t\texplicit dvector(size_t n, const T& value = T()) : std::vector<T>(n, value) {}\n\t\tdvector(const std::vector<T>& v) : std::vector<T>(v) {}\n\t\tdvector(const std::initializer_list<T> il) : std::vector<T>(il) {}\n\t\tdvector(const typename std::vector<T>::iterator first, const typename std::vector<T>::iterator last) : std::vector<T>(first, last) {}\n\t\tdvector(const std::string::iterator first, const std::string::iterator last) : std::vector<T>(first, last) {}\n\t\tT& operator[](size_t n) {\n\t\t\ttry { return this->at(n); } catch (const std::exception& e) {\n\t\t\t\tstd::cerr << boost::stacktrace::stacktrace() << std::endl; return this->at(n);\n\t\t\t}\n\t\t}\n\t\tconst T& operator[](size_t n) const {\n\t\t\ttry { return this->at(n); } catch (const std::exception& e) {\n\t\t\t\tstd::cerr << boost::stacktrace::stacktrace() << std::endl; return this->at(n);\n\t\t\t}\n\t\t}\n\t};\n\tclass dbool {\n\tprivate:\n\t\tbool boolvalue;\n\tpublic:\n\t\tdbool() : boolvalue(false) {}\n\t\tdbool(bool b) : boolvalue(b) {}\n\t\tdbool(const dbool &b) : boolvalue(b.boolvalue) {}\n\t\toperator bool&() { return boolvalue; }\n\t\toperator const bool&() const { return boolvalue; }\n\t};\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const dvector<T>& v) {\n\t\tfor (int i = 0, len = v.size(); i < len; ++i){ s << v[i]; if (i < len - 1) s << \"\\t\"; } return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const dvector< dvector<T> >& vv) {\n\t\tfor (int i = 0, len = vv.size(); i < len; ++i){ s << vv[i] << std::endl; } return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const std::set<T>& se) {\n\t\ts << \"{ \"; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << \"\\t\"; } s << \"}\"; return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const std::multiset<T>& se) {\n\t\ts << \"{ \"; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << \"\\t\"; } s << \"}\"; return s; }\n\ttemplate<typename T1, typename T2> std::ostream& operator<<(std::ostream& s, const std::map<T1, T2>& m) {\n\t\ts << \"{\" << std::endl; for (auto itr = m.begin(); itr != m.end(); ++itr){ s << \"\\t\" << (*itr).first << \" : \" << (*itr).second << std::endl; } s << \"}\"; return s; }\n\ttemplate<typename T1, typename T2> std::ostream& operator<<(std::ostream& s, const std::pair<T1, T2>& p) { \n\t\treturn s << \"(\" << p.first << \", \" << p.second << \")\"; }\n\t#define vector dvector\n\t#define bool dbool\n\tclass SIGFPE_exception : std::exception {};\n\tclass SIGSEGV_exception : std::exception {};\n\tvoid catch_SIGFPE(int e) { std::cerr << boost::stacktrace::stacktrace() << std::endl; throw SIGFPE_exception();\t}\n\tvoid catch_SIGSEGV(int e) { std::cerr << boost::stacktrace::stacktrace() << std::endl; throw SIGSEGV_exception(); }\n\tsigned convertedmain();\n\tsigned main() { signal(SIGFPE, catch_SIGFPE); signal(SIGSEGV, catch_SIGSEGV); return convertedmain(); }\n\t#define main() convertedmain()\n#endif\n//#define int long long\nusing ll = long long;\n//constexpr int INF = 1e9;//INT_MAX=(1<<31)-1=2147483647\nconstexpr ll INF = (ll)1e18;//(1LL<<63)-1=9223372036854775807\nconstexpr ll MOD = (ll)1e9 + 7;\nconstexpr double EPS = 1e-9;\nconstexpr int dx[4] = {1, 0, -1, 0};\nconstexpr int dy[4] = {0, 1, 0, -1};\n#define p(var) std::cout<<var<<std::endl\n#define rep(i, n)   for(ll i=0, i##_length=(n); i< i##_length; ++i)\n#define repeq(i, n) for(ll i=1, i##_length=(n); i<=i##_length; ++i)\n#define rrep(i, n)   for(ll i=(n)-1; i>=0; --i)\n#define rrepeq(i, n) for(ll i=(n)  ; i>=1; --i)\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\n#define uniq(v) (v).erase(unique((v).begin(), (v).end()), (v).end());\ntemplate<typename T> inline void pv(vector<T> &v) { for(ll i=0, N=v.size(); i<N; i++) std::cout << v[i] << \" \\n\"[i==N-1]; }\ntemplate<typename T> inline T gcd(T a, T b) { return b ? gcd(b,a%b) : a; }\ntemplate<typename T> inline T lcm(T a, T b) { return a / gcd(a,  b) * b; }\ntemplate<typename T> inline bool chmax(T &a, T b) { return a < b && (a = b, true); }\ntemplate<typename T> inline bool chmin(T &a, T b) { return a > b && (a = b, true); }\n\n/*-----8<-----template-----8<-----*/\n\n//点、ベクトル\nclass Point {\npublic:\n\tdouble x,y;\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\tPoint operator + (Point p) {return Point(x+p.x, y+p.y);}\n\tPoint operator - (Point p) {return Point(x-p.x, y-p.y);}\n\tPoint operator * (Point p) {return Point(x*p.x, y*p.y);}\n\tPoint operator / (Point p) {return Point(x/p.x, y/p.y);}\n\n\tdouble abs(){return sqrt(norm());}\n\tdouble norm(){return x*x + y*y;}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x!=p.x ? x<p.x : y<p.y;\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n\t\n};\ntypedef Point Vector;\n\n//線分、直線\nstruct Segment {Point p1,p2;};\ntypedef Segment Line;\n\n//ベクトルの内積\ndouble dot(Vector a, Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n//ベクトルの外積\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\ndouble equals(double a,double b){ return fabs(a-b)<EPS; }\n//直交判定\nbool isOrthogonal(Vector a,Vector b){\n\treturn equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n\treturn isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1,Segment s2){\n\treturn equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n//平行判定\nbool isParallel(Vector a,Vector b){\n\treturn equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n\treturn isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1,Segment s2){\n\treturn equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n//射影\nPoint project(Segment s,Point p){\n\tVector base = s.p2-s.p1;\n\tdouble r = dot(p-s.p1, base)/base.norm();\n\treturn s.p1 + base*r;\n}\n//反射\nPoint reflect(Segment s,Point p){\n\treturn p+(project(s,p)-p)*2.0;\n}\n\n//p0,p1,p2が反時計回りになる\nstatic const int COUNTER_CLOCKWISE = 1;\n//p0,p1,p2が時計回りになる\nstatic const int CLOCKWIZE = -1;\n//p2,p0,p1がこの順で同一直線状にある\nstatic const int ONLINE_BACK = 2;\n//p0,p1,p2がこの順で同一直線状にある\nstatic const int ONLINE_FRONT = -2;\n//p2が線分p0p1上にある\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n\tif(cross(a,b)<-EPS)return CLOCKWIZE;\n\tif(dot(a,b)<-EPS)return ONLINE_BACK;\n\tif(a.norm()<b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//線分p1p2と線分p3p4の交差判定\n//端点が他方の線分上にある場合、線分二つが平行に重なる場合も交差しているとみなす\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\nbool intersect(Segment s1, Segment s2){\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//二点間の距離\ndouble getDistance(Point a,Point b){\n\treturn (a-b).abs();\n}\n//点と直線の距離\ndouble getDistanceLP(Line l,Point p){\n\treturn fabs(cross(l.p2-l.p1, p-l.p1)) / (l.p2-l.p1).abs();\n}\n//点と線分の距離\ndouble getDistanceSP(Segment s,Point p){\n\tif(dot(s.p2-s.p1, p-s.p1)<0.)return (p-s.p1).abs();\n\tif(dot(s.p1-s.p2, p-s.p2)<0.)return (p-s.p2).abs();\n\treturn getDistanceLP(s,p);\n}\n//線分と線分の距離\ndouble getDistance(Segment s1,Segment s2){\n\tif(intersect(s1,s2))return 0.;\n\treturn min({getDistanceSP(s1,s2.p1), getDistanceSP(s1,s2.p2), getDistanceSP(s2,s1.p1), getDistanceSP(s2,s1.p2)});\n}\n\n//線分s1と線分s2の交点\nPoint getCrossPoint(Segment s1, Segment s2){\n\tVector base = s2.p2-s2.p1;\n\tdouble d1=fabs(cross(base, s1.p1-s2.p1));\n\tdouble d2=fabs(cross(base, s1.p2-s2.p1));\n\tdouble t=d1/(d1+d2);\n\treturn s1.p1+(s1.p2-s1.p1)*t;\n}\n\n//円\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c=Point(), double r=0.) : c(c), r(r) {}\n};\n//円cと線分lの交点二つ\npair<Point,Point> getCrossPoints(Circle c, Line l){\n\t//交点が存在するか\n\tassert(getDistanceLP(l,c.c)<c.r);\n\tVector pr=project(l, c.c);\n\tVector e=(l.p2-l.p1)/(l.p2-l.p1).abs();\n\tdouble base=sqrt(c.r*c.r-(pr-c.c).norm());\n\treturn {pr+e*base, pr-e*base};\n}\n\ntypedef vector<Point> Polygon;\n//多角形gと点pの内包関係を返す\nstatic const int INSIDE = 2;\nstatic const int ONLINE = 1;\nstatic const int OUTSIDE = 0;\nll contains(Polygon &g, Point p){\n\tll n=g.size();\n\tbool x=false;\n\tfor(ll i=0; i<n; i++){\n\t\tPoint a=g[i]-p, b=g[(i+1)%n]-p;\n\t\tif(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return ONLINE;\n\t\tif(a.y > b.y) swap(a,b);\n\t\tif(a.y < EPS && EPS < b.y && cross(a,b) > EPS) x=!x;\n\t}\n\treturn (x ? INSIDE : OUTSIDE);\n}\n\n//点の集合sに対する凸包を返す\nPolygon andrewScan(Polygon s){\n\tPolygon u,l;\n\tif(s.size()<3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\n\tfor(ll i=2; i<(ll)s.size(); i++){\n\t\tfor(ll n=u.size(); n>=2 && ccw(u[n-2],u[n-1],s[i])!=CLOCKWIZE; n--){\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor(ll i=s.size()-3; i>=0; i--){\n\t\tfor(ll n=l.size(); n>=2 && ccw(l[n-2],l[n-1],s[i])!=CLOCKWIZE; n--){\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor(ll i=u.size()-2; i>=1; i--)l.push_back(u[i]);\n\n\treturn l;\n}\n\n\n//線分の集合sの交点の数を返す\nclass EndPoint {\npublic:\n\tPoint pnt;\n\tll seg,st; //入力線分のID, 端点の種類\n\tEndPoint() {}\n\tEndPoint(Point pnt, ll seg, ll st) : pnt(pnt), seg(seg), st(st) {}\n\n\tbool operator < (const EndPoint &ep) const {\n\t\tif(pnt.y == ep.pnt.y) return st < ep.st;\n\t\treturn pnt.y < ep.pnt.y;\n\t}\n};\nll manhattanIntersection(vector<Segment> &S){\n\tstatic const int BOTTOM = 0;\n\tstatic const int LEFT = 1;\n\tstatic const int RIGHT = 2;\n\tstatic const int TOP = 3;\n\tll n=S.size();\n\tvector<EndPoint> EP(2*n);\n\tfor(ll i=0,k=0; i<n; i++){\n\t\tif(S[i].p1.y==S[i].p2.y){\n\t\t\tif(S[i].p1.x>S[i].p2.x) swap(S[i].p1, S[i].p2);\n\t\t}else if(S[i].p1.y > S[i].p2.y){\n\t\t\tswap(S[i].p1, S[i].p2);\n\t\t}\n\n\t\tif(S[i].p1.y==S[i].p2.y){\n\t\t\tEP[k++]=EndPoint(S[i].p1, i, LEFT);\n\t\t\tEP[k++]=EndPoint(S[i].p2, i, RIGHT);\n\t\t}else{\n\t\t\tEP[k++]=EndPoint(S[i].p1, i, BOTTOM);\n\t\t\tEP[k++]=EndPoint(S[i].p2, i, TOP);\n\t\t}\n\t}\n\n\tsort(EP.begin(), EP.end());\n\n\tset<ll> BT;\n\tBT.insert(INF);\n\tll cnt=0;\n\tfor(ll i=0; i<2*n; i++){\n\t\tif(EP[i].st==TOP){\n\t\t\tBT.erase(EP[i].pnt.x);\n\t\t}else if(EP[i].st==BOTTOM){\n\t\t\tBT.erase(EP[i].pnt.x);\n\t\t}else if(EP[i].st==LEFT){\n\t\t\tauto b=BT.lower_bound(S[EP[i].seg].p1.x);\n\t\t\tauto e=BT.upper_bound(S[EP[i].seg].p2.x);\n\t\t\tcnt+=distance(b,e);\n\t\t}\n\t}\n\treturn cnt;\n}\n\n\n/*-----8<-----library-----8<-----*/\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\nvoid CGL_2_A(){\n\tll N;\n\tcin>>N;\n\tvector<ll> ans(N,0);\n\trep(i,N){\n\t\tll x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tPoint p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n\t\tll t=0;\n\t\tif(isOrthogonal(p0,p1,p2,p3)){\n\t\t\tt=1;\n\t\t}else if(isParallel(p0,p1,p2,p3)){\n\t\t\tt=2;\n\t\t}\n\t\tans[i]=t;\n\t}\n\trep(i,N)p(ans[i]);\n}\n\n\n\nsigned main() {\n\tCGL_2_A();\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<bitset>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<functional>\n#include<limits>\n#include<list>\n#include<map>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<queue>\n#include<vector>\nusing namespace std;\n\n#define MOD 1000000007\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n//0?¬?\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator/(double a) { return Point(x / a, y / a); }\n\tbool operator<(const Point &p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator==(const Point &p)const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n};\n\n//1?¬?\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point(1, 1)) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\n//2?¬?\nclass Circle {\npublic:\n\tPoint c; //center\n\tdouble r; //radius\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\n//??????\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n//??????\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n//??´?????????\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) { return isOrthogonal(a1 - a2, b1 - b2); }\nbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//????????????\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isParallel(Point a1, Point a2, Point b1, Point b2) { return isParallel(a1 - a2, b1 - b2); }\nbool isParallel(Segment s1, Segment s2) { return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//?°???±\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n//????°?\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p)*2.0; }\n\n//??????(p0,p1)????????????p2???????????¢???\nenum { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//?????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n//???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble a1 = abs(cross(base, s1.p1 - s2.p1)); //area1\n\tdouble a2 = abs(cross(base, s1.p2 - s2.p1)); //area2\n\tdouble t = a1 / (a1 + a2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//2??????????????¢\ndouble getDistance(Point a, Point b) { return (a - b).abs(); }\n//??´?????¨???????????¢\ndouble getDistanceLP(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()); }\n//????????¨???????????¢\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n//????????¨??????????????¢\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn\tmin(\n\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s1, s1.p1), getDistanceSP(s1, s1.p2))\n\t);\n}\n\nint main() {\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tPoint p[4];\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tscanf(\"%lf%lf\", &p[j].x, &p[j].y);\n\t\t}\n\t\tif (isParallel(p[0], p[1], p[2], p[3]))cout << 2 << endl;\n\t\telse if (isOrthogonal(p[0], p[1], p[2], p[3]))cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <utility>\n#include <cstring>\n#include <iomanip>\n#include <numeric>\n#include <cmath>\n#include <cassert>\n#include <complex>\nusing namespace std;\nusing ll = long long;\nconst int INF = 1<<30;\nconst int MOD = 1e9 + 7;\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\ninline bool equals(double a, double b) { return abs(b - a) < EPS; }\nusing Point = complex<double>;\nnamespace std { bool operator < (const Point &a, const Point &b) { return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b); } }\nstruct Line\n{\n    Point a, b;\n    Line(Point a, Point b) : a(a), b(b) {}\n};\ndouble dot(const Point &a, const Point &b) { return real(a) * real(b) + imag(a) * imag(b); }\ndouble cross(const Point &a, const Point &b) { return real(a) * imag(b) - imag(a) * real(b); }\nbool isParallel(const Line &a, const Line &b) { return equals(cross(a.b - a.a, b.b - b.a), 0.0); }\nbool isOrthogonal(const Line &a, const Line &b) { return equals(dot(a.a - a.b, b.a - b.b), 0.0); }\nsigned main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    int n; cin >> n;\n    while(n--)\n    {\n        double x0, y0, x1, y1, x2, y2, x3, y3; cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        Line s = Line(Point(x0, y0), Point(x1, y1));\n        Line t = Line(Point(x2, y2), Point(x3, y3));\n        if(isParallel(s, t)) cout << 2 << endl;\n        else if(isOrthogonal(s, t)) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cstdio>\n#include <vector>\n#include <map>\n\nusing namespace std;\n\n#define REP(i,n) for(int i = 0; i < (int)(n); ++i)\n#define FOR(i,a,b) for(int i = (a); i < (int)(b); ++i)\n#define ALL(c) (c).begin(), (c).end()\n#define SIZE(v) ((int)v.size())\n\ntypedef complex<double> P;\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\n// ??????\ndouble dot(const P& a, const P& b) {\n    return real(conj(a)*b);\n}\n\n// ??????\ndouble cross(const P& a, const P& b) {\n    return imag(conj(a)*b);\n}\n\n// ???p2?????????p0, p1???????????´???????°???±?????????\nP projection(const P& p0, const P& p1, const P& p2) {\n    // ???????????????????????´???\n    P vec1 = p1 - p0;\n    P vec2 = p2 - p0;\n    return p0 + vec1 * dot(vec1, vec2) / dot(vec1, vec1);\n}\n\n// ???p0, p1???????????´??????????§°?????¨????????????p2??¨????§°??????\nP reflection(const P& p0, const P& p1, const P& p2) {\n    P proj = projection(p0, p1, p2);\n    return proj - (p2 - proj);\n}\n\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;                               // a--c--b on line\n}\n\n// 2??´?????????????????????\nbool is_parallel(const L& l1, const L& l2) {\n    P p1 = l1[1] - l1[0];\n    P p2 = l2[1] - l2[0];\n    auto res = ccw(p1, p2, P(0,0));\n    return (res == 2 || res == -2 || res == 0);\n}\n\n// 2??´???????????´?????????\nbool is_ortho(const L& l1, const L& l2) {\n    P p1 = l1[1] - l1[0];\n    P p2 = l2[1] - l2[0];\n    return dot(p1, p2) == 0;\n}\n\n// // ????????¨???P??¨??????????????????????????¢\n// double norm(const P& a, const P& b) {\n//     return dot(\n//     return real(conj(a)*b);\n// }\n\nint main(){\n    int Q;\n    cin >> Q;\n    REP(q, Q) {\n        double x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        P p0(x0, y0);\n        P p1(x1, y1);\n        P p2(x2, y2);\n        P p3(x3, y3);\n        L l0(p0, p1);\n        L l1(p2, p3);\n        if (is_parallel(l0, l1)) {\n            cout << 2 << endl;\n        }\n        else if (is_ortho(l0, l1)) {\n            cout << 1 << endl;\n        }\n        else {\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <valarray>\n//#include \"../cxx-prettyprint/prettyprint.hpp\"\n\nint main() {\n    int q;\n    std::cin >> q;\n\n    for (int i = 0; i < q; i ++) {\n        std::valarray<int> p0(2), p1(2), p2(2), p3(2);\n        std::cin >> p0[0] >> p0[1] >> p1[0] >> p1[1] >> p2[0] >> p2[1] >> p3[0] >> p3[1];\n\n        std::valarray<int> v1 = p1 - p0;\n        std::valarray<int> v2 = p3 - p2;\n\n        if (v1[0] * v2[1] - v1[1] * v2[0] == 0) {\n            std::cout << 2 << std::endl;\n        } else if ((v1 * v2).sum() == 0) {\n            std::cout << 1 << std::endl;\n        } else {\n            std::cout << 0 << std::endl;\n        }\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\ntemplate <typename T>\nvoid printv(const vector<T> &v)\n{\n    int sz = v.size();\n    for (int i = 0; i < sz; i++)\n    {\n        cout << v[i] << \" \\n\"[i == sz - 1];\n    }\n}\n\nusing ld = long double;\nusing Point = std::complex<ld>;\n\nconst ld eps = 1e-9, pi = acos(-1.0);\n\nnamespace std\n{\nbool operator<(const Point &lhs, const Point &rhs)\n{\n    if (lhs.real() < rhs.real() - eps)\n        return true;\n    if (lhs.real() > rhs.real() + eps)\n        return false;\n    return lhs.imag() < rhs.imag();\n}\n} // namespace std\n\nPoint input_point()\n{\n    ld x, y;\n    std::cin >> x >> y;\n    return Point(x, y);\n}\n\nbool eq(ld a, ld b)\n{\n    return (abs(a - b) < eps);\n}\n\nld dot(Point a, Point b)\n{\n    return real(conj(a) * b);\n}\n\nld cross(Point a, Point b)\n{\n    return imag(conj(a) * b);\n}\n\n// CCW::counter clockwise\nint ccw(Point a, Point b, Point c)\n{\n    b -= a;\n    c -= a;\n    if (cross(b, c) > eps)\n        return 1; // a,b,c : counter-clockwise\n    if (cross(b, c) < -eps)\n        return -1; // a,b,c : clockwise\n    if (dot(b, c) < 0)\n        return 2; // c,a,b : on a line\n    if (norm(b) < norm(c))\n        return -2; // a,b,c : on a line\n    return 0;      // a,c,b : on a line\n}\n\nclass Line\n{\npublic:\n    Point a, b;\n    Line() : a(Point(0, 0)), b(Point(0, 0)) {}\n    Line(Point a, Point b) : a(a), b(b) {}\n};\n\nld dot(Line l, Line m)\n{\n    return dot((l.a - l.b), (m.a - m.b));\n}\n\nclass Circle\n{\npublic:\n    Point p;\n    ld r;\n    Circle() : p(Point(0, 0)), r(0) {}\n    Circle(Point p, ld r) : p(p), r(r) {}\n};\n\n// l:line, m:line が交点を持つか\nbool isis_ll(Line l, Line m)\n{\n    return !eq(cross(l.b - l.a, m.b - m.a), 0);\n}\n\n// l:line, s:segment\nbool isis_ls(Line l, Line s)\n{\n    return isis_ll(l, s) &&\n           (cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\n// s:segment, t:segment\nbool isis_ss(Line s, Line t)\n{\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n           ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// p が l:line 上に存在するか\nbool isis_lp(Line l, Point p)\n{\n    return (abs(cross(l.b - p, l.a - p)) < eps);\n}\n\nbool isis_sp(Line s, Point p)\n{\n    return (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);\n}\n\n// p から l に下ろした足との交点\nPoint proj(Line l, Point p)\n{\n    ld t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + t * (l.a - l.b);\n}\n\n// l:line, t:line の交点\nPoint is_ll(Line l, Line m)\n{\n    Point lv = l.b - l.a, mv = m.b - m.a;\n    assert(cross(lv, mv) != 0);\n    return l.a + lv * cross(mv, m.a - l.a) / cross(mv, lv);\n}\n\n// p, l:line の距離\nld dist_lp(Line l, Point p)\n{\n    return abs(p - proj(l, p));\n}\n\nld dist_ll(Line l, Line m)\n{\n    return isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\nld dist_ls(Line l, Line s)\n{\n    return isis_ls(l, s) ? 0 : std::min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\nld dist_sp(Line s, Point p)\n{\n    Point r = proj(s, p);\n    return isis_sp(s, r) ? abs(r - p) : std::min(abs(s.a - p), abs(s.b - p));\n}\n\nld dist_ss(Line s, Line t)\n{\n    if (isis_ss(s, t))\n        return 0;\n    return std::min({dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b)});\n}\n\n// a, b の垂直二等分線. a -> b を90度反時計回り回転\nLine bisector(Point a, Point b)\n{\n    Point mid = (a + b) * Point(0.5, 0);\n    return Line(mid, mid + (b - a) * Point(0, pi / 2));\n}\n\n// 直線 l, m のなす角を求める\nld degree_ll(Line l, Line m)\n{\n    ld cos_shita = dot(l, m) / (abs(l.b - l.a) * abs(m.b - m.a));\n    if (cos_shita < -1.0)\n        cos_shita = -1.0;\n    if (cos_shita > 1.0)\n        cos_shita = 1.0;\n    ld shita = acos(cos_shita);\n    // shita = sita * 180.0 / PI;\n    return shita;\n}\n\n// c1, c2 の交点\nstd::vector<Point> is_cc(Circle c1, Circle c2)\n{\n    std::vector<Point> res;\n    ld d = abs(c1.p - c2.p);\n    ld rc = (d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d);\n    ld dfr = c1.r * c1.r - rc * rc;\n    if (abs(dfr) < eps)\n        dfr = 0.0;\n    else if (dfr < 0.0)\n        return res; // no intersection\n    ld rs = sqrt(dfr);\n    Point diff = (c2.p - c1.p) / d;\n    res.emplace_back(c1.p + diff * Point(rc, rs));\n    if (dfr != 0.0)\n        res.emplace_back(c1.p + diff * Point(rc, -rs));\n    return res;\n}\n\nstd::vector<Point> is_lc(Circle c, Line l)\n{\n    std::vector<Point> res;\n    ld d = dist_lp(l, c.p);\n    if (d < c.r + eps)\n    {\n        ld len = (d > c.r) ? 0.0 : sqrt(c.r * c.r - d * d); //safety;\n        Point nor = (l.a - l.b) / abs(l.a - l.b);\n        res.emplace_back(proj(l, c.p) + len * nor);\n        res.emplace_back(proj(l, c.p) - len * nor);\n    }\n    return res;\n}\n\nstd::vector<Point> is_sc(Circle c, Line l)\n{\n    std::vector<Point> v = is_lc(c, l), res;\n    for (Point p : v)\n        if (isis_sp(l, p))\n            res.emplace_back(p);\n    return res;\n}\n\n// p から c への接線\nstd::vector<Line> tangent_cp(Circle c, Point p)\n{\n    std::vector<Line> ret;\n    Point v = c.p - p;\n    ld d = abs(v);\n    ld l = sqrt(norm(v) - c.r * c.r);\n    if (std::isnan(l))\n    {\n        return ret;\n    }\n    Point v1 = v * Point(l / d, c.r / d);\n    Point v2 = v * Point(l / d, -c.r / d);\n    ret.emplace_back(Line(p, p + v1));\n    if (l < eps)\n        return ret;\n    ret.emplace_back(Line(p, p + v2));\n    return ret;\n}\n\n// c1, c2 の共通接線\nstd::vector<Line> tangent_cc(Circle c1, Circle c2)\n{\n    std::vector<Line> ret;\n    if (abs(c1.p - c2.p) - (c1.r + c2.r) > -eps)\n    {\n        Point center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n        ret = tangent_cp(c1, center);\n    }\n    if (abs(c1.r - c2.r) > eps)\n    {\n        Point out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n        std::vector<Line> nret = tangent_cp(c1, out);\n        ret.insert(ret.end(), nret.begin(), nret.end());\n    }\n    else\n    {\n        Point v = c2.p - c1.p;\n        v /= abs(v);\n        Point q1 = c1.p + v * Point(0, 1) * c1.r;\n        Point q2 = c1.p + v * Point(0, -1) * c1.r;\n        ret.emplace_back(Line(q1, q1 + v));\n        ret.emplace_back(Line(q2, q2 + v));\n    }\n    return ret;\n}\n\nusing Polygon = std::vector<Point>;\n\nld area(const Polygon &p)\n{\n    ld res = 0;\n    int n = p.size();\n    for (int i = 0; i < n; i++)\n    {\n        res += cross(p[i], p[(i + 1) % n]);\n    }\n    return res / 2;\n}\n\nbool is_counter_clockwise(const Polygon &poly)\n{\n    ld angle = 0;\n    int n = poly.size();\n    for (int i = 0; i < n; i++)\n    {\n        Point a = poly[i], b = poly[(i + 1) % n], c = poly[(i + 2) % n];\n        angle += arg((c - b) / (b - a));\n    }\n    return angle > eps;\n}\n\n// -1 => out\n//  0 => on\n//  1 => in\nint is_in_polygon(const Polygon &poly, Point p)\n{\n    ld angle = 0;\n    int n = poly.size();\n    for (int i = 0; i < n; i++)\n    {\n        Point a = poly[i], b = poly[(i + 1) % n];\n        if (isis_sp(Line(a, b), p))\n            return 1;\n        angle += arg((b - p) / (a - p));\n    }\n    return eq(angle, 0) ? 0 : 2;\n}\n\n// 凸包\nPolygon convex_hull(std::vector<Point> ps)\n{\n    int n = ps.size();\n    int k = 0;\n    sort(ps.begin(), ps.end());\n    Polygon ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = ps[i++])\n        while (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n        while (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\n// 凸包カット\nPolygon convex_cut(const Polygon &ps, Line l)\n{\n    int n = ps.size();\n    Polygon Q;\n    for (int i = 0; i < n; i++)\n    {\n        Point A = ps[i], B = ps[(i + 1) % n];\n        Line m = Line(A, B);\n        if (ccw(l.a, l.b, A) != -1)\n            Q.emplace_back(A);\n        if (ccw(l.a, l.b, A) * ccw(l.a, l.b, B) < 0 && isis_ll(l, m))\n            Q.emplace_back(is_ll(l, m));\n    }\n    return Q;\n}\n\nvoid add_point(std::vector<Point> &ps, Point p)\n{\n    for (Point q : ps)\n        if (abs(q - p) < eps)\n            return;\n    ps.emplace_back(p);\n}\n\n// Voronoi 図: http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=3668810\n// polygon を ps でボロノイ分割する時の ps[index] に割り当てられる多角形\nPolygon voronoi(const Polygon &polygon, const std::vector<Point> &ps, int index)\n{\n    Polygon p = polygon;\n    int n = ps.size();\n    for (int j = 0; j < n; j++)\n    {\n        if (index == j)\n            continue;\n        Line l = bisector(ps[index], ps[j]);\n        p = convex_cut(p, l);\n    }\n    return p;\n}\n\nvoid solve_cgl_1_a()\n{\n    auto p1 = input_point(), p2 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        auto ret = proj(Line(p1, p2), p);\n        cout << fixed << setprecision(10) << ret.real() << \" \" << ret.imag() << endl;\n    }\n}\n\nvoid solve_cgl_1_b()\n{\n    auto p1 = input_point(), p2 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        auto ret = proj(Line(p1, p2), p);\n        cout << fixed << setprecision(10) << 2 * ret.real() - p.real() << \" \" << 2 * ret.imag() - p.imag() << endl;\n    }\n}\n\nvoid solve_cgl_1_c()\n{\n    auto p0 = input_point(), p1 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p2 = input_point();\n        int ret = ccw(p0, p1, p2);\n        if (ret == 1)\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if (ret == -1)\n            cout << \"CLOCKWISE\" << endl;\n        else if (ret == 2)\n            cout << \"ONLINE_BACK\" << endl;\n        else if (ret == -2)\n            cout << \"ONLINE_FRONT\" << endl;\n        else\n            cout << \"ON_SEGMENT\" << endl;\n    }\n}\n\nvoid solve_cgl_2_a()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line l(p0, p1), m(p2, p3);\n        if (!isis_ll(l, m))\n        {\n            cout << 2 << endl;\n        }\n        else if (eq(dot(l.b - l.a, m.b - m.a), 0))\n        {\n            cout << 1 << endl;\n        }\n        else\n        {\n            cout << 0 << endl;\n        }\n    }\n}\n\nvoid solve_cgl_2_b()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        cout << (isis_ss(s1, s2) ? 1 : 0) << endl;\n    }\n}\n\nvoid solve_cgl_2_c()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        auto ret = is_ll(s1, s2);\n        cout << fixed << setprecision(10) << ret.real() << \" \" << ret.imag() << endl;\n    }\n}\n\nvoid solve_cgl_2_d()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        cout << fixed << setprecision(10) << dist_ss(s1, s2) << endl;\n    }\n}\n\nvoid solve_cgl_3_a()\n{\n    Polygon p;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        p.push_back(input_point());\n    }\n    cout << fixed << setprecision(10) << area(p) << endl;\n}\n\nvoid solve_cgl_3_b()\n{\n    Polygon p;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        p.push_back(input_point());\n    }\n    auto cv = convex_hull(p);\n    cout << (p == cv ? 1 : 0) << endl;\n}\n\nvoid solve_cgl_3_c()\n{\n    Polygon ps;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        int ret = is_in_polygon(ps, p);\n        cout << ret + 1 << endl;\n    }\n}\n\nvoid solve_cgl_4_a()\n{\n    int n;\n    cin >> n;\n    Polygon ps;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    auto ret = convex_hull(ps);\n    for (auto p : ret)\n    {\n        cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n    }\n}\n\n// cgl_4_b: 凸多角形の直径\n\nvoid solve_cgl_4_c()\n{\n    int n;\n    cin >> n;\n    Polygon ps;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point();\n        auto l = Line(p0, p1);\n        auto ret = convex_cut(ps, l);\n        cout << fixed << setprecision(10) << area(ret) << endl;\n    }\n}\n\n// cgl_5_a: 最近点対\n\n// cgl_6_a: 線分交差\n\nvoid solve_cgl_7_a()\n{\n    auto p0 = input_point();\n    ld r0, r1;\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ls = tangent_cc(c0, c1);\n    cout << ls.size() << endl;\n}\n\nvoid solve_cgl_7_d()\n{\n    auto p = input_point();\n    ld r;\n    cin >> r;\n    Circle c(p, r);\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point();\n        Line l(p0, p1);\n        auto ret = is_lc(c, l);\n        assert(ret.size() <= 2);\n        sort(ret.begin(), ret.end());\n        cout << ret[0].real() << \" \" << ret[0].imag();\n        if (ret.size() == 2)\n        {\n            cout << \" \" << ret[1].real() << \" \" << ret[1].imag();\n        }\n        cout << endl;\n    }\n}\n\nvoid solve_cgl_7_e()\n{\n    auto p0 = input_point();\n    ld r0, r1;\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ret = is_cc(c0, c1);\n    if ((int)ret.size() == 1)\n        ret.push_back(ret[0]);\n    sort(ret.begin(), ret.end());\n    cout << ret[0].real() << \" \" << ret[0].imag() << \" \" << ret[1].real() << \" \" << ret[1].imag() << endl;\n}\n\nvoid solve_cgl_7_f()\n{\n    auto p = input_point();\n    auto p0 = input_point();\n    ld r0;\n    cin >> r0;\n    Circle c(p0, r0);\n    auto ls = tangent_cp(c, p);\n    vector<Point> ret;\n    for (auto l : ls)\n    {\n        auto ps = is_lc(c, l);\n        assert((int)ps.size() == 1);\n        ret.push_back(ps[0]);\n    }\n    sort(ret.begin(), ret.end());\n    cout << ret[0].real() << \" \" << ret[0].imag() << \" \" << ret[1].real() << \" \" << ret[1].imag() << endl;\n}\n\nvoid solve_cgl_7_g()\n{\n    ld r0, r1;\n    auto p0 = input_point();\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ls = tangent_cc(c0, c1);\n    vector<Point> ret;\n    for (auto l : ls)\n    {\n        auto ps = is_sc(c0, l);\n        assert((int)ps.size() == 1);\n        ret.push_back(ps[0]);\n    }\n    sort(ret.begin(), ret.end());\n    for (auto p : ret)\n    {\n        cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n    }\n}\n\n// cgl_7_h: 円と多角形の共通部分(は?)\n// 参考実装: http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=2114290\n\nint main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n\n    solve_cgl_2_a();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <cassert>\n#include <typeinfo>\n#include <vector>\n#include <stack>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#include <random>\n#include <complex>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef pair<ll,ll> pll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<ll> vl;\ntypedef vector<vl> vvl;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef vector<pll> vpll;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<30;\nconst ll INF=1ll<<61;\nconst double pi=acos(-1);\nconst double eps=1e-7;\nconst ll mod=1e9+7;\nconst int dx[4]={0,1,0,-1},dy[4]={1,0,-1,0};\n\ntypedef complex<double> vec;\n#define eq(a,b) (fabs(a-b)<eps)\n\n// ??\\???\nvoid In(vec& p){\n\tdouble x,y;\n\tcin>>x>>y;\n\tp=vec(x,y);\n}\n\n// ??????\nvoid Out(vec p){\n\tcout<<syosu(10)<<p.real()<<' '<<p.imag()<<endl;\n}\n\n// ??????\ndouble IP(vec p,vec q){\n\treturn p.real()*q.real()+p.imag()*q.imag();\n}\n\n// ??????\ndouble CP(vec p,vec q){\n\treturn p.real()*q.imag()-q.real()*p.imag();\n}\n\n// ??´?????????\nbool is_Orthgonal(vec a1,vec a2,vec b1,vec b2){\n\treturn eq(IP(a1-a2,b1-b2),0);\n}\n\n// ????????????\nbool is_Parallel(vec a1,vec a2,vec b1,vec b2){\n\treturn eq(CP(a1-a2,b1-b2),0);\n}\n\nint n;\nvec a,b,c,d;\n\nint main(){\n\tcin>>n;\n\tfor(int i=0;i<n;i++){\n\t\tIn(a);In(b);In(c);In(d);\n\t\tif(is_Orthgonal(a,b,c,d)) cout<<1<<endl;\n\t\telse if(is_Parallel(a,b,c,d)) cout<<2<<endl;\n\t\telse cout<<0<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <set>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n  double x,y;\n\n  Point(double x = 0,double y = 0): x(x),y(y){}\n  Point operator + (Point p){ return Point(x + p.x , y + p.y); }\n  Point operator - (Point p){ return Point(x - p.x , y - p.y); }\n  Point operator * (double a){ return Point(a * x , a * y); }\n  Point operator / (double a){ return Point(x / a , y / a); }\n\n  double abs(){ return sqrt(norm()); }\n  double norm(){ return x * x + y * y; }\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS);\n  }\n};\ntypedef Point Vector;\n\nstruct Segment{\n  Point p1,p2;\n};\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){\n  return  a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\n\ndouble dot(Vector a,Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x * b.y + a.y * b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1 - a1,b1 - b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2 - s1.p1,s2.p2 - s2.p1) , 0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1 - a2 , b1 - b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2 - s1.p1 , s2.p2 - s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1 , base / norm(base));\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p + (project(s,p) - p) * 2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS)return CLOCKWISE;\n  if(dot(a,b) < -EPS)return ONLINE_BACK;\n  if(a.norm() < b.norm())return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 && \n          ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0);\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2);\n}\n\ndouble getDistance(Vector a,Vector b){\n  return abs(a - b);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2 - l.p1 , p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n  if(dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n             min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base = s2.p2 - s2.p1;\n  double d1 = abs(cross(base,s1.p1 - s2.p1));\n  double d2 = abs(cross(base,s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  // assert(intersect(c,l));\n  Vector pr = project(l,c.c);\n  Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n  double base = sqrt(c.r * c.r - norm(pr - c.c));\n  return make_pair(pr + e * base , pr - e * base);\n}\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r) * a, sin(r) * a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  // assert(intersect(c1,c2));\n  double d = abs(c1.c - c2.c);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r,t + a),c1.c + polar(c1.r,t - a));\n}\n\nint contains(Polygon g,Point p){\n  int n = g.size();\n  bool x = false;\n  for(int i = 0;i < n;i++){\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n    if(a.y < b.y)swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS)x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size() < 3)return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n\n  l.push_back(s[s.size() - 1]);\n  l.push_back(s[s.size() - 2]);\n\n  for(int i = 2;i < s.size();i++){\n    for(int n = u.size();n >= 2 && ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n\n  for(int i = s.size() - 3; i >= 0;i--){\n    for(int n = l.size();n >= 2 && ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i = u.size() - 2;i >= 1;i--)l.push_back(u[i]);\n  return l;\n}\n\n#define BOTTOM 0\n#define LEFT 1\n#define RIGHT 2\n#define TOP 3\n\nclass EndPoint{\npublic:\n  Point p;\n  int seg,st;\n  EndPoint(){}\n  EndPoint(Point p,int seg,int st): p(p),seg(seg),st(st){}\n\n  bool operator < (const EndPoint &ep) const{\n    if(p.y == ep.p.y){\n      return st < ep.st;\n    }else{\n      return p.y < ep.p.y;\n    }\n  }\n};\n\nEndPoint EP[2 * 100000];\n\nint manhattanIntersection(vector<Segment> S){\n  int n = S.size();\n  for(int i = 0,k = 0;i < n;i++){\n    if(S[i].p1.y == S[i].p2.y){\n      if(S[i].p1.x > S[i].p2.x)swap(S[i].p1,S[i].p2);\n    }else if(S[i].p1.y > S[i].p2.y){\n      swap(S[i].p1,S[i].p2);\n    }\n\n    if(S[i].p1.y == S[i].p2.y){\n      EP[k++] = EndPoint(S[i].p1,i,LEFT);\n      EP[k++] = EndPoint(S[i].p2,i,RIGHT);\n    }else{\n      EP[k++] = EndPoint(S[i].p1,i,BOTTOM);\n      EP[k++] = EndPoint(S[i].p2,i,TOP);\n    }\n  }\n\n  sort(EP,EP + (2 * n));\n\n  set<int> BT;\n  BT.insert(1000000001);\n  int cnt = 0;\n  for(int i = 0;i < 2 * n;i++){\n    if(EP[i].st == TOP){\n      BT.erase(EP[i].p.x);\n    }else if(EP[i].st == BOTTOM){\n      BT.insert(EP[i].p.x);\n    }else if(EP[i].st == LEFT){\n      set<int>::iterator b = lower_bound(BT.begin(),BT.end(),S[EP[i].seg].p1.x);\n      set<int>::iterator e = upper_bound(BT.begin(),BT.end(),S[EP[i].seg].p2.x);\n      cnt += distance(b,e);\n    }\n  }\n  return cnt;\n}\n\nint main(){\n  int n;\n  cin >> n;\n  for(int i = 0;i < n;i++){\n    Line a,b;\n    cin >> a.p1.x >> a.p1.y;\n    cin >> a.p2.x >> a.p2.y;\n    cin >> b.p1.x >> b.p1.y;\n    cin >> b.p2.x >> b.p2.y;\n    if(isParallel(a,b))puts(\"2\");\n    else if(isOrthogonal(a,b))puts(\"1\");\n    else puts(\"0\");\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef double db;\nconst db eps = 1e-12, pi = acos(-1);\nint sign(db x) {return x < -eps ? -1 : x > eps;}\nint cmp(db x, db y) {return sign(x - y);}\nint intersect(db l1, db r1, db l2, db r2) {\n    if (l1 > r1) swap(l1, r1); if (l2 > r2) swap(l2, r2); return cmp(r1, l2) != -1 && cmp(r2, l1) != -1;\n}\nint inmid(db k1, db k2, db k3) {return sign(k1 - k3) * sign(k2 - k3) <= 0;}//k3 in [k1,k2]?1:0\nstruct Point {\n    db x, y;\n    Point operator + (const Point & a)const {return Point{a.x + x, a.y + y};}\n    Point operator - (const Point & a)const {return Point{x - a.x, y - a.y};}\n    Point operator * (db a) const {return Point{x * a, y * a};}\n    Point operator / (db a) const {return Point{x / a, y / a};}\n    bool operator < (const Point p) const {int a = cmp(x, p.x); if (a) return a == -1; return cmp(y, p.y) == -1;}\n    bool operator == (const Point & a) const {return cmp(x, a.x) == 0 && cmp(y, a.y) == 0;}\n    int getP() const {return sign(y) == 1 || (sign(y) == 0 && sign(x) == -1);}\n    void input() {scanf(\"%lf%lf\", &x, &y);}\n};\ndb cross(Point p1, Point p2) {return p1.x * p2.y - p1.y * p2.x;}\ndb cross(Point p0, Point p1, Point p2) {return cross(p1 - p0, p2 - p0);}\ndb dot(Point p1, Point p2) {return p1.x * p2.x + p1.y * p2.y;}\nint inmid(Point k1, Point k2, Point k3) {return inmid(k1.x, k2.x, k3.x) && inmid(k1.y, k2.y, k3.y);}\nbool compareangle(Point p1, Point p2) {//Polar Angle Sort\n    return p1.getP() < p2.getP() || (p1.getP() == p2.getP() && sign(cross(p1, p2)) > 0);\n}\nint clockwise(Point p1,Point p2,Point p3){// k1 k2 k3 anticlockwise:1 clockwise:-1 others:0  \n    return sign(cross(p1,p2,p3));\n}\nstruct Line {\n    Point s, e;\n    void input() {scanf(\"%lf%lf%lf%lf\", &s.x, &s.y, &e.x, &e.y);}\n    Point vec() {return e - s;}\n    db length() {return sqrt(dot(s - e, s - e));}\n    db length2() {return dot(s - e, s - e);}\n};\nint onS(Line l, Point p) {// On Seg?\n    return inmid(l.s, l.e, p) && sign(cross(l.s - p, l.e - l.s)) == 0;\n}\nbool checkLL(Line l1, Line l2) {\n    return cmp(cross(l1.s, l2.s, l2.e), cross(l1.e, l2.s, l2.e)) != 0;\n}\nbool checkLS(Line l1, Line l2) {//Intersection of Line l1 and Seg l2?\n    return sign(cross(l2.s, l1.s, l1.e)) * sign(cross(l2.e, l1.s, l1.e)) <= 0;\n}\nint checkSS(Line l1, Line l2) {//Intersection of Two Seg?1:0\n    return intersect(l1.s.x, l1.e.x, l2.s.x, l2.e.x) && intersect(l1.s.y, l1.e.y, l2.s.y, l2.e.y) && checkLS(l1, l2) && checkLS(l2, l1);\n}\nPoint project(Line l, Point p) {\n    return l.s + l.vec() * dot(p - l.s, l.vec()) / l.length2();\n}\nPoint reflect(Line l, Point p) {//Mirror Point\n    return project(l, p) * 2 - p;\n}\nPoint getLL(Line l1, Line l2) {//Intersection Point of Line l1,l2\n    db w1 = cross(l2.s, l1.s, l2.e), w2 = cross(l2.s, l2.e, l1.e); return (l1.s * w2 + l1.e * w1) / (w1 + w2);\n}\ndb area(vector<Point> A) {//Anticlockwise\n    db ans = 0;\n    for (int i = 0; i < A.size(); i++) ans += cross(A[i], A[(i + 1) % A.size()]);\n    return ans / 2;\n}\nint contain(vector<Point>A, Point p) {//2:in 1:on 0:out\n    int ans = 0; A.push_back(A[0]);\n    for (int i = 1; i < A.size(); i++) {\n        Line l = {A[i - 1], A[i]};\n        if (onS(l, p)) return 1; if (cmp(l.s.y, l.e.y) > 0) swap(l.s, l.e);\n        if (cmp(l.s.y, p.y) >= 0 || cmp(l.e.y, p.y) < 0) continue;\n        if (sign(cross(l.e, l.s, p)) < 0)ans ^= 1;\n    }\n    return ans << 1;\n}\n\n\n\n\nint main() {\n    int T;cin>>T;while(T--){\n        Line l1,l2;l1.input();l2.input();\n        if(checkLL(l1,l2)){\n            if(sign(dot(l1.vec(),l2.vec()))==0)cout<<1<<endl;\n            else cout<<0<<endl;\n        }else cout<<2<<endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "/// Geometry INT\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long LL;\n\ninline int sign(const LL x) {\n\tif (x < 0) {\n\t\treturn -1;\n\t}\n\tif (x > 0) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstruct point {\n\tLL x, y;\n\tpoint() {}\n\tpoint(LL _x, LL _y) : x(_x), y(_y) {}\n};\n\nbool operator < (const point &P, const point &Q) {\n\tif (P.y != Q.y) {\n\t\treturn P.y < Q.y;\n\t}\n\treturn P.x < Q.x;\n}\n\nvoid normalize(point &P) {\n\tassert(P.x != 0 || P.y != 0);\n\tLL g = __gcd(abs(P.x), abs(P.y));\n\tP.x /= g;\n\tP.y /= g;\n\tif (P.x < 0 || (P.x == 0 && P.y < 0)) {\n\t\tP.x = -P.x;\n\t\tP.y = -P.y;\n\t}\n}\n\npoint operator + (const point &P, const point &Q) {\n\treturn point(P.x + Q.x, P.y + Q.y);\n}\n\npoint operator - (const point &P, const point &Q) {\n\treturn point (P.x - Q.x, P.y - Q.y);\n}\n\npoint operator * (const point &P, const LL k) {\n\treturn point(P.x * k, P.y * k);\n}\n\npoint operator / (const point &P, const LL k) {\n\tassert(k != 0 && P.x % k == 0 && P.y % k == 0);\n\treturn point(P.x / k, P.y / k);\n}\n\ninline LL dot(const point &P, const point &Q) {\n\treturn P.x * Q.x + P.y * Q.y;\n}\n\ninline LL cross(const point &P, const point &Q) {\n\treturn P.x * Q.y - P.y * Q.x;\n}\n\ninline bool is_in(LL x, LL a, LL b) {\n\tif (a > b) {\n\t\tswap(a, b);\n\t}\n\treturn (a <= x && x <= b);\n}\n\ninline bool is_in(const point &P, const point &A, const point &B) {\n\tif (cross(B - A, P - A) != 0) {\n\t\treturn false;\n\t}\n\treturn (is_in(P.x, A.x, B.x) && is_in(P.y, A.y, B.y));\n}\n\ninline bool segment_segment_intersect(const point &A, const point &B, const point &C, const point &D) {\n\tif (cross(B - A, D - C) == 0) { // lines are parallel\n\t\treturn (is_in(A, C, D) || is_in(B, C, D) || is_in(C, A, B) || is_in(D, A, B));\n\t}\n\tif (sign(cross(C - A, B - A)) * sign(cross(D - A, B - A)) > 0) {\n\t\treturn false;\n\t}\n\tif (sign(cross(A - C, D - C)) * sign(cross(B - C, D - C)) > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ninline bool is_convex(const vector <point> &polygon) {\n\tint n = polygon.size();\n\tassert(n >= 3);\n\tfor (int i = 0; i < n; i++) {\n\t\tint j = (i + 1) % n;\n\t\tint k = (i + 2) % n;\n\t\tif (sign(cross(polygon[j] - polygon[i], polygon[k] - polygon[i])) < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst int OUT = 0;\nconst int ON = 1;\nconst int IN = 2;\n/// 0 outside, 1 boundary, 2 inside\ninline int point_inside_polygon(const point &P, const vector <point> &polygon) {\n\tint n = polygon.size();\n\tint cnt = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tpoint A = polygon[i];\n\t\tpoint B = polygon[(i + 1) % n];\n\t\tif (is_in(P, A, B)) {\n\t\t\treturn ON;\n\t\t}\n\t\tif (B.y < A.y) {\n\t\t\tswap(A, B);\n\t\t}\n\t\tif (P.y < A.y || B.y <= P.y || A.y == B.y) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (sign(cross(B - A, P - A)) > 0) {\n\t\t\tcnt++;\n\t\t}\n\t}\n\tif (cnt & 1) {\n\t\treturn IN;\n\t}\n\treturn OUT;\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B\n// test OK\nvoid test_segment_segment_intersection() {\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tpoint A, B, C, D;\n\t\tcin >> A.x >> A.y >> B.x >> B.y >> C.x >> C.y >> D.x >> D.y;\n\t\tcout << (segment_segment_intersect(A, B, C, D) ? \"1\" : \"0\") << \"\\n\";\n\t}\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B\n// test OK\nvoid test_is_convex() {\n\tint n;\n\tcin >> n;\n\tvector <point> polygon(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> polygon[i].x >> polygon[i].y;\n\t}\n\tcout << (is_convex(polygon) ? \"1\" : \"0\") << \"\\n\";\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C\n// test OK\nvoid test_point_inside_polygon() {\n\tint n;\n\tcin >> n;\n\tvector <point> polygon(n);\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> polygon[i].x >> polygon[i].y;\n\t}\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tpoint P;\n\t\tcin >> P.x >> P.y;\n\t\tcout << point_inside_polygon(P, polygon) << \"\\n\";\n\t}\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\n// test ???\nvoid test_parallel_orthogonal() {\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tpoint A, B, C, D;\n\t\tcin >> A.x >> A.y >> B.x >> B.y >> C.x >> C.y >> D.x >> D.y;\n\t\tint answer = 0;\n\t\tif (cross(B - A, D - C) == 0) {\n\t\t\tanswer = 2;\n\t\t} else if (dot(B - A, D - C) == 0) {\n\t\t\tanswer = 1;\n\t\t}\n\t\tcout << answer << \"\\n\";\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\n\t// test_segment_segment_intersection();\n\t// test_is_convex();\n\t// test_point_inside_polygon();\n\ttest_parallel_orthogonal();\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n\nusing namespace std;\nconst double EPS=1e-9;\nconst double PI=3.141592653589793238;//18 ragham\nbool Equal(double d1,double d2)\n{ return fabs(d1-d2)<EPS;}\n\nstruct line{double a,b,c;};\nstruct vec\n{\n  double x,y;\n  vec(double _x=0,double _y=0)\n  {x=_x;  y=_y;}\n};\n  \nstruct point_i\n{\n  int x,y;\n  point_i(int _x=0,int _y=0){x=_x;y=_y;}\n};\nstruct point\n{\n  double x,y;\n  point(double _x=0,double _y=0){x=_x;y=_y;}\n  bool operator < (point other)\n  {  \n    if(fabs(x-other.x)<EPS)\n      return y<other.y;\n    return x<other.x;}\n  bool operator == (point other)\n  {return (fabs(x-other.x)<EPS) && (fabs(y-other.y)<EPS) ;}\n  \n  \n};\ndouble Hypot(double dx,double dy)\n{\n  return sqrt(dx*dx+dy*dy);\n}\ndouble Distance(point p1,point p2)\n{\n  return hypot(p1.x-p2.x,p1.y-p2.y);\n}\ndouble DEG_to_RAD(double theta)\n{\n  return theta*PI/180;\n}\npoint rotate(point p, double theta)//theta is degree\n{\n  \n  //rotation matrixR(theta) = [cos(theta) - sin(theta)]\n  //                          [sin(theta) + cos(theta)]\n  //usage: [x'] = R(theta)* [x]\n  //       [y']             [y]\n  double rad=DEG_to_RAD(theta);\n  return point(p.x * cos(rad) - p.x * sin(rad) ,\n\t       p.y * sin(rad) + p.y * cos(rad)  );\n}\nvoid PointsToLine(point p1,point p2,line *l)\n{\n  if(p1.x==p2.x) // vertical line handled here\n    { l->a=1.0;   l->b= 0.0 ; l->c=-p1.x;}\n  else\n    {\n      l->a=-(double)(p1.y-p2.y)/(p1.x-p2.x);\n      l->b=1.0;\n      l->c=-(double)(l->a * p1.x) - (l->b*p1.y);\n    }\n}\nbool AreParallel(line l1,line l2)\n{\n  return Equal(l1.a,l2.a) && Equal(l1.b,l2.b);\n}\nbool AreSame(line l1,line l2)\n{\n  return AreParallel(l1,l2) && Equal(l1.c,l2.c);\n}\nbool AreIntersect(line l1,line l2,point *p)//TO BE CHECKED (mine)\n{\n  if(AreSame(l1,l2))\n    return false;\n  if(AreParallel(l1,l2))\n    return false;\n\n  //solving\n  double delta=(double)l1.a*l2.b - l1.b*l2.a;\n  if(Equal(delta,0))//this if should never be true because lines are't parallel\n    return false;\n  p->x= (double)(l1.c*l2.b-l2.c*l1.b) / delta;\n  p->y= (double)(l1.a*l2.c-l2.a*l1.c) / delta;\n  return true;\n}\nvec ToVector(point p1,point p2)\n{\n  return vec(p2.x-p1.x,p2.y-p1.y);\n}\nvec ScaleVector(vec v, double s) // v*=s\n{\n  return vec(v.x*s,v.y*s);\n}\npoint Translate(point p,vec move)//moves point p in direction of vector move\n{\n  return point(p.x+move.x , p.y + move.y);\n}\ndouble Dot(double x1,double y1 ,double x2,double y2)\n{ return x1*x2+y1*y2;};\ndouble Cross(point p,point q,point r)\n{\n  return (r.x-q.x)*(p.y-q.y)-(r.y-q.y)*(p.x-q.x);\n}\nbool Collinear(point p,point q,point r)\n{\n  return Equal(Cross(p,q,r),0);\n}\n//returns true if point r is on the left side of line pq\nbool CCW(point p,point q,point r)\n{\n   //can be modified to accept collinear ( >0 instead of >EPS )\n  if(Cross(p,q,r) > EPS)\n    return true;\n  return false;\n}\n///*****************### End of Library ###*******************///\n\n\n\n\n\n\n\npoint p1,p2,q1,q2;\n\nint main()\n{\n  int n;\n  cin>>n;\n  while(n--)\n    {\n      int x,y;\n      cin>>x>>y;\n      p1=point(x,y);\n      cin>>x>>y;\n      p2=point(x,y);\n      cin>>x>>y;\n      q1=point(x,y);\n      cin>>x>>y;\n      q2=point(x,y);\n      vec v1=ToVector(p1,p2);\n      vec v2=ToVector(q1,q2);\n\n      \n      line l1;\n      PointsToLine(p1,p2,&l1);\n      line l2;\n      PointsToLine(q1,q2,&l2);\n      //cout<<\"aa \"<<l1.a<<\" \"<<l1.b<<\" \"<<l1.c<<endl;\n      if(Equal(Dot(v1.x,v1.y , v2.x,v2.y),0))\n\tcout<<1<<endl;\n      else if(AreParallel(l1,l2))\n\tcout<<2<<endl;\n      else\n\tcout<<0<<endl;\n    }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b)(fabs((a)-(b))<EPS)\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0): x(x),y(y){}\n\n    Point operator +(Point p){return Point(x+p.x,y+p.y);}\n    Point operator -(Point p){return Point(x-p.x,y-p.y);}\n    Point operator *(double a){return Point(a*x,a*y);}\n    Point operator /(double a){return Point(x/a,y/a);}\n\n    double abs(){return sqrt(norm());}\n    double norm(){return x*x+y*y;}\n\n    bool operator<(const Point &p)const{\n        return equals(x,p.x)?(y<p.y):(x<p.x);\n    } \n\n    bool operator==(const Point &p)const{\n        return equals(x,p.x)&&equals(y,p.y);\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment{\n    Point p1,p2;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nsigned main(){\n    cin.tie(nullptr);\n    ios_base::sync_with_stdio(false);\n    int q;\n    cin>>q;\n    Point p0,p1,p2,p3;\n    for(int i=0;i<q;i++){\n        cin>>p0.x>>p0.y>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y;\n        if(isOrthogonal(p0,p1,p2,p3)){\n            cout<<1<<'\\n';\n        }\n        else if(isParallel(p0,p1,p2,p3)){\n            cout<<2<<'\\n';\n        }\n        else{\n            cout<<0<<'\\n';\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#ifndef ___Geometry_Library\n#define ___Geometry_Library\n\n// ------ Includes ------ //\n#include <cmath>\n#include <complex>\n#include <utility>\n#include <algorithm>\n\n// ------ Defines ------ //\ntypedef long double GType;\ntypedef std::complex<GType> Point;\ntypedef std::pair<Point, Point> Segment;\n\n// ------ Constants ------ //\nconst GType EPS = 1.0e-10L;\n\n// ------ Functions Level 1 ------ //\nGType dot(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).real();\n}\nGType cross(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).imag();\n}\n\n#endif\n\n#include <iostream>\nusing namespace std;\nint q, xa, ya, xb, yb; Point v1, v2;\nint main() {\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> xa >> ya >> xb >> yb; v1 = Point(xb, yb) - Point(xa, ya);\n\t\tcin >> xa >> ya >> xb >> yb; v2 = Point(xb, yb) - Point(xa, ya);\n\t\tif (abs(cross(v1, v2)) < EPS) cout << 2 << endl;\n\t\telse if (abs(dot(v1, v2)) < EPS) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<bits/stdc++.h>\n\ntypedef long double     lf;\n\nusing namespace std;\n\nconst lf EPS = 1e-9;\n\nstruct pt {\n  lf x, y;\n  pt( ) { }\n  pt( lf x, lf y ) : x( x ), y ( y ) { }\n};\n\ninline lf x( pt P ) { return P.x; }\ninline lf y( pt P ) { return P.y; }\n\nistream& operator >> ( istream& in, pt& p ) {\n  lf x,y; in >> x >> y;\n  p = pt(x,y); return in;\n}\n\nostream& operator << ( ostream& out, const pt& p ) {\n  out << double(p.x) << \" \" << double(p.y);\n  return out;\n}\n\npt operator + ( const pt& A, const pt& B ) {\n  return pt( x(A)+x(B), y(A)+y(B) );\n}\n\npt operator - ( const pt& A, const pt& B ) {\n  return pt( x(A)-x(B), y(A)-y(B) );\n}\n\n\npt operator * ( const lf& B, const pt& A ) {\n  return pt( x(A)*B, y(A)*B );\n}\n\npt operator * ( const pt& A, const lf& B ) {\n  return pt( x(A)*B, y(A)*B  );\n}\n\ninline lf dot( pt A, pt B ) {\n  return x(A)*x(B) + y(A)*y(B);\n}\n\ninline lf norm( pt A ) {\n  return x(A)*x(A) + y(A)*y(A);\n}\n\ninline lf abs( pt A ) {\n  return sqrt( norm(A) );\n}\n\ninline lf dist ( pt A, pt B ) { return abs( B - A ); }\n\nlf distToLine (pt p, pt A, pt B, pt &c) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  c = A + u*( B-A );\n  return dist( p , c );\n}\n\npt refPoint(pt X, pt A, pt B) {\n  pt aux; distToLine(X, A, B, aux);\n  return X + lf(2.0)*(aux-X);\n}\n\ninline bool same ( lf a, lf b ) {\n  return a+EPS > b && b+EPS > a;\n}\n\ninline lf cross( pt A, pt B ) {\n  return x(A)*y(B) - y(A)*x(B);\n}\n\n///CHANGE\n// 0  for collineal points ( angle = 0 )\n// 1  for angle BAX counter clockwise\n// -1 for angle BAX clockwise\ninline int ccw (pt X, pt A, pt B) {\n  lf c = cross( B-A, X-A );\n  if( same( c, 0.0 ) ) { return 0; }\n  if( c > EPS ) { return 1; }\n  return -1;\n}\n\n///CHANGE\ninline bool segContains ( pt X, pt A, pt B) {\n  if ( !same ( 0, cross ( A-X, B-X ) ) ) return 0;\n  return ( dot ( A-X, B-X ) < EPS );\n}\n\n/// --------------------------------------------\n\ninline bool parallel( pt A, pt B, pt C, pt D ) {\n  return same ( 0, cross( B-A, D-C ) );\n}\n\n///NEW\ninline bool ortho( pt A, pt B, pt C, pt D ) {\n  return same ( 0, dot( B-A, D-C ) );\n}\n\nint n;\n\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(10);\n\n  cin >> n;\n  for( int i = 0; i < n; ++i ) {\n    pt A,B,C,D;\n    cin >> A >> B >> C >> D;\n    if( parallel( A, B, C, D ) ) {\n      cout << \"2\\n\";\n    }\n    else if( ortho( A, B, C, D ) ) {\n      cout << \"1\\n\";\n    }\n    else {\n      cout << \"0\\n\";\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "/**計算幾何学の問題を解く際に利用するクラス******/\n//http://skyblueryu.blog54.fc2.com/blog-entry-27.html\n#define _USE_MATH_DEFINES\n#include <cmath>\n#include <vector>\n#include <cstdio>\n#include <iostream>\n#define EPS (pow(M_E,(double)-10))\n//マクロの書式については \n//http://www7b.biglobe.ne.jp/~robe/cpphtml/html01/cpp01030.html\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\n\nclass Point{\npublic:\n\tdouble x,y;\n\n\t//以下の記法に関しては\n\t//http://ameblo.jp/nana-2007-july/entry-10037680575.html\n\tPoint(double x = 0,double y = 0): x(x), y(y) {};\n\n\t/***演算子のオーバーロード***********/\n\tPoint operator + (Point p) { return Point(x + p.x,y + p.y);}\n\tPoint operator - (Point p) { return Point(x - p.x,y - p.y);}\n\tPoint operator * (double a) { return Point(a*x,a*y);}//スカラー倍\n\tPoint operator / (double a) { return Point(x/a,y/a);}//スカラー倍\n\t/***********************************/\n\n\tdouble norm() { return x*x+y*y;}//ベクトルのノルムを返す\n\tdouble abs() { return sqrt(norm());}//ベクトルの長さを返す\n\n\t/***演算子のオーバーロード2***********/\n\t//Pointはクラスオブジェクトなのでサイズが大きく値渡しは適さない\n\t//Point &pという記法は参照渡しでポインタでない変数\n\t//に対してアドレスを引数にとりたい場合に使う．\n\t//参照渡しとポインタ渡しについては以下\n\t//http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1320144958\n\t//http://homepage2.nifty.com/well/Reference.html#PASS_BY_REFERENCE\n\t//\n\t//Point &pの前のconst修飾子は関数内で引数のオブジェクトの内容を\n\t//勝手に書き換えないようにするために付けている．(const Point &p)\n\t//の後のconstはこの関数がconstメンバ関数であることを意味する．\n\t//constメンバ関数に関して詳しくは以下\n\t//http://www.s-cradle.com/developer/sophiaframework/tutorial/Cpp/const.html\n\n\tbool operator < (const Point &p) const{\n\t\t//(条件)?(処理1):(処理2)\n\t\t//条件が真なら処理1，偽なら処理2が実行される\n\t\treturn x != p.x ? x < p.x :y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\t/*************************************/\n\n};\n\ntypedef Point Vector;\n\n//ベクトルaとbの内積を計算する関数\n//これは参照渡しじゃなくていいんかいという疑問は正直ある\ndouble dot(Vector a,Vector b){\n\t//double dot(const Vector& a,const Vector& b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//ベクトルaとbの外積を計算する関数\ndouble cross(Vector a,Vector b){\n\t//double cross(const Vector& a,const Vector& b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n\n\n//線分を表す構造体\nstruct Segment{\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\n//円を表すクラス\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(),double r = 0.0):c(c), r(r) {}\n};\n\n//多角形の表現(多角形は点の列で表現できる)\ntypedef vector<Point> Polygon;\n\n\nint Q;//クエリ数\n\nint main(){\n\tscanf(\"%d\",&Q);\n\n\tPoint s1,s2,t1,t2;\n\tVector d1,d2;//方向ベクトル\n\n\tfor(int q = 0;q < Q;q++){\n\t\tscanf(\"%lf %lf\",&s1.x,&s1.y);\n\t\tscanf(\"%lf %lf\",&s2.x,&s2.y);\n\t\tscanf(\"%lf %lf\",&t1.x,&t1.y);\n\t\tscanf(\"%lf %lf\",&t2.x,&t2.y);\n\n\t\t//l1の方向ベクトル\n\t\td1.x = (s1.x - s2.x);\n\t\td1.y = (s1.y - s2.y);\n\n\t\t//l2の方向ベクトル\n\t\td2.x = (t1.x - t2.x);\n\t\td2.y = (t1.y - t2.y);\n\n\t\t//l1とl2が直行しているか調べる(内積を計算して0かどうか調べる)\n\t\tif(equals(dot(d1,d2),0.0)){\n\t\t\tprintf(\"1\\n\");\n\t\t\tcontinue;\n\t\t}else if(equals(d1.x*d2.y,d1.y*d2.x)){\n\t\t\tprintf(\"2\\n\");\n\t\t\tcontinue;\n\t\t}else{\n\t\t\tprintf(\"0\\n\");\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for (int i = 0; i < n; ++i)\nusing ll = long long;\nusing namespace std;\nconst int INF = 1e9;\n\n//https://dai1741.github.io/maximum-algo-2012/cpp/geometry/geometries2d.h\n\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P, P> L;\ntypedef vector<P> VP;\nconst D EPS = 1e-9;\n#define X real()\n#define Y imag()\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n#define EQ(n, m) (abs((n) - (m)) < EPS)\n\nD dot(P a, P b) {\n    return (conj(a) * b).X;\n}\nD cross(P a, P b) {\n    return (conj(a) * b).Y;\n}\n\nint ccw(P a, P b, P c) {\n    b -= a;\n    c -= a;\n    if (cross(b, c) > EPS)\n        return +1;\n    if (cross(b, c) < -EPS)\n        return -1;\n    if (dot(b, c) < -EPS)\n        return +2;\n    if (norm(b) < norm(c))\n        return -2;\n    return 0;\n}\n\nbool is_parallel(P a1, P a2, P b1, P b2) {\n    P x = a2 - a1;\n    P y = b2 - b1;\n    return EQ(cross(x, y), 0.0);\n}\n\nbool is_orthogonal(P a1, P a2, P b1, P b2) {\n    P x = a2 - a1;\n    P y = b2 - b1;\n    return EQ(dot(x, y), 0.0);\n}\n\nbool isecLP(P a1, P a2, P b) {\n    return abs(ccw(a1, a2, b)) != 1;\n}\n\nbool isecLL(P a1, P a2, P b1, P b2) {\n    return !isecLP(a2 - a1, b2 - b1, 0) || isecLP(a1, b1, b2);\n}\n\nbool isecLS(P a1, P a2, P b1, P b2) {\n    return cross(a2 - a1, b1 - a1) * cross(a2 - a1, b2 - a1) < EPS;\n}\n\nbool isecSS(P a1, P a2, P b1, P b2) {\n    return ccw(a1, a2, b1) * ccw(a1, a2, b2) <= 0 &&\n           ccw(b1, b2, a1) * ccw(b1, b2, a2) <= 0;\n}\n\nbool isecSP(P a1, P a2, P b) {\n    return !ccw(a1, a2, b);\n}\n\nP proj(P a1, P a2, P p) {\n    return a1 + dot(a2 - a1, p - a1) / norm(a2 - a1) * (a2 - a1);\n}\n\nP reflection(P a1, P a2, P p) {\n    return 2.0 * proj(a1, a2, p) - p;\n}\n\nD distLP(P a1, P a2, P p) {\n    return abs(proj(a1, a2, p) - p);\n}\n\nD distLL(P a1, P a2, P b1, P b2) {\n    return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\nD distLS(P a1, P a2, P b1, P b2) {\n    return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\nD distSP(P a1, P a2, P p) {\n    P r = proj(a1, a2, p);\n    if (isecSP(a1, a2, r))\n        return abs(r - p);\n    return min(abs(a1 - p), abs(a2 - p));\n}\n\nD distSS(P a1, P a2, P b1, P b2) {\n    if (isecSS(a1, a2, b1, b2))\n        return 0;\n    return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)),\n               min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\nP crosspointLL(P a1, P a2, P b1, P b2) {\n    D d1 = cross(b2 - b1, b1 - a1);\n    D d2 = cross(b2 - b1, a2 - a1);\n    if (EQ(d1, 0) && EQ(d2, 0))\n        return a1;\n    if (EQ(d2, 0))\n        throw \"kouten ga nai\";\n    return a1 + d1 / d2 * (a2 - a1);\n}\n\nD distLC(P a1, P a2, P c, D r) {\n    return max(distLP(a1, a2, c) - r, 0.0);\n}\n\nD distSC(P a1, P a2, P c, D r) {\n    D dSqr1 = norm(c - a1), dSqr2 = norm(c - a2);\n    if (dSqr1 < r * r ^ dSqr2 < r * r)\n        return 0;\n    if (dSqr1 < r * r & dSqr2 < r * r)\n        return r - sqrt(max(dSqr1, dSqr2));\n    return max(distSP(a1, a2, c) - r, 0.0);\n}\n\nVP crosspointLC(P a1, P a2, P c, D r) {\n    VP ps;\n    P ft = proj(a1, a2, c);\n    if (!GE(r * r, norm(ft - c)))\n        return ps;\n\n    P dir = sqrt(max(r * r - norm(ft - c), 0.0)) / abs(a2 - a1) * (a2 - a1);\n    ps.push_back(ft + dir);\n    if (!EQ(r * r, norm(ft - c)))\n        ps.push_back(ft - dir);\n    return ps;\n}\n\nD distCC(P a, D ar, P b, D br) {\n    D d = abs(a - b);\n    return GE(d, abs(ar - br)) ? max(d - ar - br, 0.0) : abs(ar - br) - d;\n}\n\nVP crosspointCC(P a, D ar, P b, D br) {\n    VP ps;\n    P ab = b - a;\n    D d = abs(ab);\n    D crL = (norm(ab) + ar * ar - br * br) / (2 * d);\n    if (EQ(d, 0) || ar < abs(crL))\n        return ps;\n\n    P abN = ab * P(0, sqrt(ar * ar - crL * crL) / d);\n    P cp = a + crL / d * ab;\n    ps.push_back(cp + abN);\n    if (!EQ(norm(abN), 0))\n        ps.push_back(cp - abN);\n    return ps;\n}\n\nVP tangentPoints(P a, D ar, P p) {\n    VP ps;\n    D sin = ar / abs(p - a);\n    if (!LE(sin, 1))\n        return ps;\n    D t = M_PI_2 - asin(min(sin, 1.0));\n    ps.push_back(a + (p - a) * polar(sin, t));\n    if (!EQ(sin, 1))\n        ps.push_back(a + (p - a) * polar(sin, -t));\n    return ps;\n}\n\nvector<L> tangentLines(P a, D ar, P b, D br) {\n    vector<L> ls;\n    D d = abs(b - a);\n    rep(i, 2) {\n        D sin = (ar - (1 - i * 2) * br) / d;\n        if (!LE(sin * sin, 1))\n            break;\n        D cos = sqrt(max(1 - sin * sin, 0.0));\n        rep(j, 2) {\n            P n = (b - a) * P(sin, (1 - j * 2) * cos) / d;\n            ls.push_back(L(a + ar * n, b + (1 - i * 2) * br * n));\n            if (cos < EPS)\n                break;\n        }\n    }\n    return ls;\n}\n\nP circumcenter(P a, P b, P c) {\n    a = (a - c) * 0.5;\n    b = (b - c) * 0.5;\n    return c + crosspointLL(a, a * P(1, 1), b, b * P(1, 1));\n}\n\nVP circlesPointsRadius(P a, P b, D r) {\n    VP cs;\n    P abH = (b - a) * 0.5;\n    D d = abs(abH);\n    if (d == 0 || d > r)\n        return cs;\n    D dN = sqrt(r * r - d * d);\n    P n = abH * P(0, 1) * (dN / d);\n    cs.push_back(a + abH + n);\n    if (dN > 0)\n        cs.push_back(a + abH - n);\n    return cs;\n}\n\nVP circlesPointsTangent(P a, P b, P l1, P l2) {\n    P n = (l2 - l1) * P(0, 1);\n    P m = (b - a) * P(0, 0.5);\n    D rC = dot((a + b) * 0.5 - l1, n);\n    D qa = norm(n) * norm(m) - dot(n, m) * dot(n, m);\n    D qb = -rC * dot(n, m);\n    D qc = norm(n) * norm(m) - rC * rC;\n    D qd = qb * qb - qa * qc;\n\n    VP cs;\n    if (qd < -EPS)\n        return cs;\n    if (EQ(qa, 0)) {\n        if (!EQ(qb, 0))\n            cs.push_back((a + b) * 0.5 - m * (qc / qb / 2));\n        return cs;\n    }\n    D t = -qb / qa;\n    cs.push_back((a + b) * 0.5 + m * (t + sqrt(max(qd, 0.0)) / qa));\n    if (qd > EPS)\n        cs.push_back((a + b) * 0.5 + m * (t - sqrt(max(qd, 0.0)) / qa));\n    return cs;\n}\n\nP minEnclosingCircle(const VP &ps) {\n    P c;\n    double move = 0.5;\n    rep(i, 39) {\n        rep(t, 50) {\n            D max = 0;\n            int k = 0;\n            rep(j, ps.size()) if (max < norm(ps[j] - c)) {\n                max = norm(ps[j] - c);\n                k = j;\n            }\n            c += (ps[k] - c) * move;\n        }\n        move /= 2;\n    }\n    return c;\n}\n\nnamespace std {\nbool operator<(const P a, const P b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n}\n} // namespace std\n\nVP convexHull(VP ps) {\n    int n = ps.size(), k = 0;\n    sort(ps.begin(), ps.end());\n    VP ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = ps[i++])\n        while (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n        while (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\nbool isCcwConvex(const VP &ps) {\n    int n = ps.size();\n    rep(i, n) if (ccw(ps[i], ps[(i + 1) % n], ps[(i + 2) % n]) == -1) return false;\n    return true;\n}\n\nint inConvex(P p, const VP &ps) {\n    int n = ps.size();\n    int dir = ccw(ps[0], ps[1], p);\n    rep(i, n) {\n        int ccwc = ccw(ps[i], ps[(i + 1) % n], p);\n        if (!ccwc)\n            return 2;\n        if (ccwc != dir)\n            return 0;\n    }\n    return 1;\n}\n\nint inCcwConvex(const VP &ps, P p) {\n    int n = ps.size();\n    P g = (ps[0] + ps[n / 3] + ps[n * 2 / 3]) / 3.0;\n    if (g == p)\n        return 1;\n    P gp = p - g;\n\n    int l = 0, r = n;\n    while (l + 1 < r) {\n        int mid = (l + r) / 2;\n        P gl = ps[l] - g;\n        P gm = ps[mid] - g;\n        if (cross(gl, gm) > 0) {\n            if (cross(gl, gp) >= 0 && cross(gm, gp) <= 0)\n                r = mid;\n            else\n                l = mid;\n        } else {\n            if (cross(gl, gp) <= 0 && cross(gm, gp) >= 0)\n                l = mid;\n            else\n                r = mid;\n        }\n    }\n    r %= n;\n    D cr = cross(ps[l] - p, ps[r] - p);\n    return EQ(cr, 0) ? 2 : cr < 0 ? 0 : 1;\n}\n\nint inPolygon(const VP &ps, P p) {\n    int n = ps.size();\n    bool in = false;\n    rep(i, n) {\n        P a = ps[i] - p;\n        P b = ps[(i + 1) % n] - p;\n        if (EQ(cross(a, b), 0) && LE(dot(a, b), 0))\n            return 2;\n        if (a.Y > b.Y)\n            swap(a, b);\n        if ((a.Y * b.Y < 0 || (a.Y * b.Y < EPS && b.Y > EPS)) && LE(cross(a, b), 0))\n            in = !in;\n    }\n    return in;\n}\n\nVP convexCut(const VP &ps, P a1, P a2) {\n    int n = ps.size();\n    VP ret;\n    rep(i, n) {\n        int ccwc = ccw(a1, a2, ps[i]);\n        if (ccwc != -1)\n            ret.push_back(ps[i]);\n        int ccwn = ccw(a1, a2, ps[(i + 1) % n]);\n        if (ccwc * ccwn == -1)\n            ret.push_back(crosspointLL(a1, a2, ps[i], ps[(i + 1) % n]));\n    }\n    return ret;\n}\n\npair<int, int> convexDiameter(const VP &ps) {\n    int n = ps.size();\n    int i = min_element(ps.begin(), ps.end()) - ps.begin();\n    int j = max_element(ps.begin(), ps.end()) - ps.begin();\n    int maxI, maxJ;\n    D maxD = 0;\n    rep(_, 2 * n) {\n        if (maxD < norm(ps[i] - ps[j])) {\n            maxD = norm(ps[i] - ps[j]);\n            maxI = i;\n            maxJ = j;\n        }\n        if (cross(ps[i] - ps[(i + 1) % n], ps[(j + 1) % n] - ps[j]) <= 0)\n            j = (j + 1) % n;\n        else\n            i = (i + 1) % n;\n    }\n    return make_pair(maxI, maxJ);\n}\n\nD area(const VP &ps) {\n    D a = 0;\n    rep(i, ps.size()) a += cross(ps[i], ps[(i + 1) % ps.size()]);\n    return a / 2;\n}\n\nP centroid(const VP &ps) {\n    int n = ps.size();\n    D aSum = 0;\n    P c;\n    rep(i, n) {\n        D a = cross(ps[i], ps[(i + 1) % n]);\n        aSum += a;\n        c += (ps[i] + ps[(i + 1) % n]) * a;\n    }\n    return 1 / aSum / 3 * c;\n}\n\nVP voronoiCell(P p, const VP &ps, const VP &outer) {\n    VP cl = outer;\n    rep(i, ps.size()) {\n        if (EQ(norm(ps[i] - p), 0))\n            continue;\n        P h = (p + ps[i]) * 0.5;\n        cl = convexCut(cl, h, h + (ps[i] - h) * P(0, 1));\n    }\n    return cl;\n}\n\nstruct Edge {\n    int from, to;\n    D cost;\n    Edge(int from, int to, D cost) : from(from), to(to), cost(cost) {}\n};\nstruct Graph {\n    int n;\n    vector<vector<Edge>> edges;\n    Graph(int n) : n(n), edges(n) {}\n    void addEdge(Edge e) {\n        edges[e.from].push_back(e);\n        edges[e.to].push_back(Edge(e.to, e.from, e.cost));\n    }\n};\n\nGraph segmentArrangement(const vector<L> &segs, VP &ps) {\n    int n = segs.size();\n    rep(i, n) {\n        ps.push_back(segs[i].first);\n        ps.push_back(segs[i].second);\n        rep(j, i) {\n            if (isecSS(segs[i].first, segs[i].second, segs[j].first, segs[j].second))\n                ps.push_back(crosspointLL(segs[i].first, segs[i].second, segs[j].first, segs[j].second));\n        }\n    }\n    sort(ps.begin(), ps.end());\n    ps.erase(unique(ps.begin(), ps.end()), ps.end());\n\n    int m = ps.size();\n    Graph gr(m);\n    vector<pair<D, int>> list;\n    rep(i, n) {\n        list.clear();\n        rep(j, m) {\n            if (isecSP(segs[i].first, segs[i].second, ps[j]))\n                list.push_back(make_pair(norm(segs[i].first - ps[j]), j));\n        }\n        sort(list.begin(), list.end());\n        rep(j, list.size() - 1) {\n            int a = list[j].second;\n            int b = list[j + 1].second;\n            gr.addEdge(Edge(a, b, abs(ps[a] - ps[b])));\n        }\n    }\n    return gr;\n}\n\nGraph visibilityGraph(const VP &ps, const vector<VP> &objs) {\n    int n = ps.size();\n    Graph gr(n);\n    rep(i, n) rep(j, i) {\n        P a = ps[i], b = ps[j];\n        if (!EQ(norm(a - b), 0))\n            rep(k, objs.size()) {\n                const VP &obj = objs[k];\n                int inStA = inConvex(a, obj);\n                int inStB = inConvex(b, obj);\n                if ((inStA ^ inStB) % 2 || inStA * inStB != 1 && inConvex((a + b) * 0.5, obj) == 1)\n                    goto skip;\n                rep(l, obj.size()) {\n                    P cur = obj[l];\n                    P next = obj[(l + 1) % obj.size()];\n                    if (isecSS(a, b, cur, next) && !isecSP(cur, next, a) && !isecSP(cur, next, b))\n                        goto skip;\n                }\n            }\n        gr.addEdge(Edge(i, j, abs(a - b)));\n    skip : {}\n    }\n    return gr;\n}\nint main() {\n    int Q;\n    cin >> Q;\n    rep(i, Q) {\n        P p[4];\n        rep(j, 4) {\n            double x, y;\n            cin >> x >> y;\n            p[j] = P(x, y);\n        }\n\n        if(is_parallel(p[0],p[1],p[2],p[3]))\n            cout << 2;\n        else if(is_orthogonal(p[0],p[1],p[2],p[3]))\n            cout << 1;\n        else\n            cout << 0;\n        cout << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\ntemplate<class T> using vec = vector<T>;\ntemplate<class T> using vvec = vector<vec<T>>;\nusing R = double;\nusing P = complex<R>;\n#define x real()\n#define y imag()\nconst R eps = 1e-9,PI = acos(-1);\n\nbool equal(R a,R b){return abs(b-a)<eps;}\nbool equal0(R a){return equal(a,0.0);}\n\nP operator*(const P& p,const R& d){\n    return P(p.x*d,p.y*d);\n}\n\nistream &operator>>(istream& is,P& p){\n    R a,b;\n    is >> a >> b;\n    p = P(a,b);\n    return is;\n}\n\nostream &operator<<(ostream& os,P& p){\n    os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n//内積\ndouble dot(P a,P b) {return (conj(a)*b).real();}\n//外積\ndouble cross(P a,P b) {return (conj(a)*b).imag();}\n\nstruct L{\n    P a,b;\n    L(P a,P b):a(a),b(b){}\n    L(R A,R B,R C){\n        if(equal(A,0)) a = P(0,C/B),b = P(1,C/B);\n        else if(equal(B,0)) b = P(C/A,0),b = P(C/A,1);\n        else a = P(0,C/B),b = P(C/A,0);\n    }\n};\n\n//pをbに射影\nP projection(P p,P b) {return b*dot(p,b)/norm(b);}\n\n//pとp1 to p2 に射影\nP projection(L l,P p){\n    p -= l.a; l.b -= l.a;\n    P proj = projection(p,l.b);\n    return l.a+proj;\n}\n\nstruct S:L{\n    S(P a,P b):L(a,b){}\n};\n\n//点の回転方向を判定\nint ccw(P& p0,P p1,P p2){\n    p1 -= p0,p2 -= p0;\n    if(cross(p1,p2)>eps) return 1; //\"COUNTER_CLOCKWISE\"\n    if(cross(p1,p2)<-eps) return -1; //\"CLOCKWISE\"\n    if(dot(p1,p2)<0) return 2; //\"ONLINE_BACK\"\n    if(norm(p1)<norm(p2)) return -2; //\"ONLINE_FRONT\"\n    return 0; //\"ON_SEGMENT\"\n}\n\nbool is_parallel(L l1,L l2){\n    return equal0(cross(l1.b-l1.a,l2.b-l2.a));\n}\n\nbool is_orthogonal(L l1,L l2){\n    return equal0(dot(l1.b-l1.a,l2.b-l2.a));\n}\n\n//pをlに関して対称移動\nP reflection(L l,P p){\n    P pj = projection(l,p);\n    return 2.0*pj-p;\n}\n\n//pがl上にあるか\nbool is_online(L& l,P& p){\n    return abs(ccw(l.a,l.b,p))!=1;\n}\n\nbool is_onsegment(S& s,P& p){\n    return ccw(s.a,s.b,p)==0;\n}\n\nint main(){\n    int Q;\n    cin >> Q;\n    for(int i=0;i<Q;i++){\n        P p1,p2,p3,p4;\n        cin >> p1 >> p2 >> p3 >> p4;\n        if(is_parallel(L(p1,p2),L(p3,p4))) cout << 2 << endl;\n        else if(is_orthogonal(L(p1,p2),L(p3,p4))) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef struct{\n\tdouble x,y;\n}point;\npoint make(double x,double y){\n\tpoint res;\n\tres.x=x;\n\tres.y=y;\n\treturn res;\n}\n//a-b\npoint vec(point a,point b){\n\tpoint res;\n\tres.x=a.x-b.x;\n\tres.y=a.y-b.y;\n\treturn res;\n}\n// a・b\ndouble internal(point a,point b){\n\treturn a.x*b.x+a.y*b.y;\n}\n//|a|\ndouble  absolute(point a){\nreturn sqrt(internal(a,a));\n}\n//|a|^2\ndouble absolute2(point a){\nreturn internal(a,a);\n}\n//a=x1+iy1,b=x2+iy2 a*b\npoint imaseki(point a,point b){\npoint res;\nres.x=a.x*b.x-a.y*b.y;\nres.y=a.x*b.y+a.y*b.x;\nreturn res;\n}\n//共役\npoint conjugate(point a){\npoint res;\nres.x=a.x;\nres.y=-a.y;\nreturn res;\n}\nint main(){\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\tpoint p0,p1,p2,p3;\n\tdouble x,y;\n\tcin>>x>>y;\n\tp0=make(x,y);\n\tcin>>x>>y;\n\tp1=make(x,y);\n\tcin>>x>>y;\n\tp2=make(x,y);\n\tcin>>x>>y;\n\tp3=make(x,y);\n\tpoint vec1,vec2;\n\tvec1=vec(p0,p1);\n\tvec2=vec(p2,p3);\n\tdouble nai=internal(vec1,vec2);\n\tdouble zetai=absolute2(vec1)*absolute2(vec2);\n\t//cout<<vec1.x<<' '<<vec1.y<<' '<<vec2.x<<' '<<vec2.y<<endl;\n\tif(nai==0){\n\tcout<<1<<endl;\n\t}else if(nai*nai==zetai){\n\tcout<<2<<endl;\n\t}else {\n\tcout<<0<<endl;\n\t}\n\n\t}\n\n\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int dx[]={0,1,0,-1,1,-1,-1,1};\nconst int dy[]={-1,0,1,0,1,1,-1,-1};\nconst int INF = 1<<30;\nconst double EPS = 1e-8;\n#define PB push_back\n#define mk make_pair\n#define fi first\n#define se second\n#define ll long long\n#define reps(i,j,k) for(int i = (j); i < (k); i++)\n#define rep(i,j) reps(i,0,j)\n#define MOD 1000000007\ntypedef pair<int,int> Pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x = _x;\n        y = _y;\n    }\n    Point operator + (Point p){\n        return Point(x+p.x,y+p.y);\n    }\n  \n    Point operator - (Point p){\n        return Point(x-p.x,y-p.y);\n    }\n  \n    Point operator * (double k){\n        return Point(k*x,k*y);\n    }\n     \n    Point operator * (Point p){\n        return Point(p.x*x-p.y*y,p.x*y+p.y*x);\n    }\n\n    Point operator / (double k){\n        return Point(x/k,y/k);\n    }\n    \n    Point operator = (Point p){\n        x = p.x;\n        y = p.y;\n        return *this;\n    }\n\n    bool operator<(const Point &p)const{\n        //return y!=p.y?y<p.y:x<p.x; //y-x\n        return x!=p.x?x<p.x:y<p.y; //x-y\n    }\n\n};\ndouble dot(Point p, Point q){\n    return p.x*q.x+p.y*q.y;\n}\n  \ndouble cross(Point p,Point q){\n    return p.x*q.y-q.x*p.y;\n}\n  \ndouble norm(Point p){\n    //?????????????????§?????????2???\n    return p.x*p.x+p.y*p.y;\n}\n  \ndouble pabs(Point p){\n    //?????????????????§??????\n    return sqrt(norm(p));\n}\n\nPoint UnitVector(Point a){\n    //??????????????????\n    return a/pabs(a);\n}\n\ntypedef vector<Point> Polygon;\n\nstruct Line : Polygon{\n    Line(){}\n    Line(Point p,Point q){\n        PB(p);\n        PB(q);  \n    }\n};\n\nstruct Circle{\n    Point p; //?????????\n    double r; //??????\n    Circle(){}\n    Circle(Point _p,double _r){\n        p = _p;\n        r = _r;\n    }\n};\n\nint ccw(Point a,Point b,Point c){\n    b = b-a;\n    c = c-a;\n    if(cross(b,c) > 0)return +1; //a???b ??§???????¨?????????????c ccw\n    if(cross(b,c) < 0)return -1; //a???b ??§????¨?????????????c ccw\n    if(dot(b,c) < 0)return +2; // c--a--b;\n    if(pabs(b)<pabs(c))return -2; //a--b--c\n    return 0; //a--c--b\n}\n\nPoint projection(Line l, Point p){\n    double t = dot(p-l[0],l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + (l[0]-l[1])*t;\n}\n\nPoint reflection(Line l, Point p){\n    return p + (projection(l,p)-p)*2.0; \n}\n\nbool intersectLL(Line l,Line m){\n    return fabs(cross(l[1]-l[0],m[1]-m[0])) > EPS || //????????§??????\n            fabs(cross(l[1]-l[0],m[0]-l[0])) < EPS; //????????????\n}\n\nbool intersectLP(Line l, Point p){\n    return fabs(cross(l[1]-p,l[0]-p)) < EPS;\n}\n\nbool intersectLS(Line l,Line m){\n    return cross(l[1]-l[0],m[0]-l[0])* //m[0]?????´???l???????????????\n           cross(l[1]-l[0],m[1]-l[0]) < EPS; //m[1]?????´???l???????????????\n}\n\nbool intersectSS(Line l,Line m){\n    //??????l??¨??????m??????????????????????????????\n    return (ccw(l[0],l[1],m[0])*ccw(l[0],l[1],m[1])<=0)&&\n            (ccw(m[0],m[1],l[0])*ccw(m[0],m[1],l[1])<=0);\n}\n\nbool intersectSP(Line l, Point p){\n    //??????l??¨???p?????????????????????\n    return pabs(l[0]-p)+pabs(l[1]-p)-pabs(l[1]-l[0]) < EPS;\n}\n\nbool intersectCP(Circle c,Point p){\n    //???c??¨???p???????????????\n    //true->???c????????¨??????p????????¨????????????.\n    return fabs(pabs(p-c.p)-c.r)<EPS;\n}\n\nint intersectCL(Circle c,Line l,Point *p,Point *q){\n    if(norm(projection(l,c.p) - c.p) - c.r*c.r > EPS)return 0;\n    double d1 = pabs(c.p-l[0]);\n    double d2 = pabs(c.p-l[1]);\n    if(d1 < c.r + EPS && d2 < c.r + EPS)return 0;\n    if(d1 < c.r - EPS && d2 > c.r+EPS\n        || d1 > c.r + EPS && d2 < c.r -EPS)return 1;\n    Point h = projection(l,c.p);\n    if(dot(l[0] - h,l[1] - h) < 0)return 2;\n    return 0;\n}\n\nint intersectCC(Circle a,Circle b,Point *p,Point *q){\n    double dist = pabs(a.p-b.p);\n    if(dist < fabs(a.r-b.r) || dist > a.r+b.r){\n        //????????????????????´??????????????¨???\n        //????????????????????¨???????????¨???\n        *p = Point(1e15,1e15);\n        *q = Point(1e15,1e15);\n        return 0;\n    }\n    else if(fabs(dist-a.r-b.r) < EPS){\n        //??????1?????§????????£???????????¨???\n        Point way;\n        way = b.p-a.p;\n        *p = a.p+UnitVector(way)*a.r;\n        *q = *p;\n        return 1;\n    }\n    else{\n        //??????2?????§????????£???????????¨???\n        if(a.r < b.r){\n            swap(a.r,b.r);\n            swap(a.p,b.p);\n        }\n        double s = (a.r + b.r + dist) / 2.0 ;\n        double area = sqrt(s * (s - a.r) * (s - b.r) * (s - dist));\n        double h = 2.0 * area / dist;\n\n        Point  v = b.p-a.p;\n        v = UnitVector(v);\n        Point  m = a.p + (v*sqrt(a.r*a.r-h*h));\n        Point  n = v * Point(0.0,1.0);\n        \n        *p = m + (n * h);\n        *q = m - (n * h);\n        return 2;\n    }\n}\n\ndouble distanceLP(Line l,Point p){\n    //??´???l??¨???p????????¢\n    return pabs(p-projection(l,p));\n}\n\ndouble distanceLL(Line l,Line m){\n    //??´???l??¨??´???m????????¢\n    return intersectLL(l,m) ? 0.0 : distanceLP(l,m[0]);\n}\n\ndouble distanceLS(Line l,Line m){\n    //??´???l??¨??????m????????¢\n    if(intersectLS(l,m))return 0.0;\n    return min(distanceLP(l,m[0]),distanceLP(l,m[1]));\n}\n\ndouble distanceSP(Line l,Point p){\n    //??????l??¨???p????????¢\n    Point r = projection(l,p);\n    if(intersectSP(l,r))return pabs(r-p);\n    return min(pabs(l[0]-p),pabs(l[1]-p));\n}\n\ndouble distanceSS(Line l,Line m){\n    //??????l??¨??????m????????¢\n    if(intersectSS(l,m)) return 0.0;\n    return min(min(distanceSP(l,m[0]),distanceSP(l,m[1])),\n               min(distanceSP(m,l[0]),distanceSP(m,l[1])));\n}\n\ndouble TriangleArea(Point a,Point b,Point c){\n    b = b - a;\n    c = c - a;\n    return cross(b,c)*0.5; //?????????????????¨??????????????§??¨???\n}\n \ndouble VertexArea(Polygon v){\n    double subArea = 0.0;\n    rep(i,v.size()-1){\n        subArea += TriangleArea(v[0],v[i],v[i+1]);\n    }\n    return subArea; //?????????????????¨??????????????§??¨???\n}\n\nPoint crosspoint(Line l,Line m){\n    //??????l??¨??????m?????????\n    if(intersectSS(l,m) == false)return Point(INF,INF);\n    return m[0]+(m[1]-m[0])*cross(l[1]-l[0],l[1]-m[0])/cross(l[1]-l[0],m[1]-m[0]);\n}\n \nPolygon ConvexHull(Polygon v){\n    //??????????????????\n    int n = v.size();\n    int k = 0;\n    sort(v.begin(),v.end());\n    Polygon e(2*n);\n    for(int i = 0; i < n; i++){\n        while(k >= 2 && ccw(e[k-2],e[k-1],v[i])<=0)k--;\n        e[k++] = v[i];\n    }\n    for(int i = n-2, t = k+1; i >= 0; i--){\n        while(k >= t && ccw(e[k-2],e[k-1],v[i])<=0)k--;\n        e[k++] = v[i];\n    }\n    e.resize(k-1);\n    return e;\n}\n\nbool IsInnerPointVertex(Polygon v , Point p){\n    Line l;\n    l.PB(p);\n    l.PB(Point(0,INF));\n    if(v.size() == 2){\n        return ccw(v[0],v[1],p)==2;\n    }\n    int cnt = 0;\n    rep(i,v.size()){\n        Line m;\n        m.PB(v[i]);m.PB(v[(i+1)%v.size()]);\n        if(intersectSS(l,m))cnt++;\n    }\n    return cnt%2;\n}\n\nint main(){\n    int Q;\n    scanf(\"%d\",&Q);\n    while(Q--){\n        Line l,m;\n        double x1,y1,x2,y2;\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n        l.PB(Point(x1,y1));l.PB(Point(x2,y2));\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n        m.PB(Point(x1,y1));m.PB(Point(x2,y2));\n        Line h;\n        h.PB(reflection(l,m[0]));\n        h.PB(m[1]);\n        if(fabs(cross(l[1]-l[0],m[1]-m[0]))<EPS){\n            puts(\"2\");\n        }\n        else if(abs(ccw(reflection(l,m[0]),m[1],m[0])) != 1){\n            puts(\"1\");\n        }\n        else{\n            puts(\"0\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i, n) for(int i = 1, i##_end_ = (n); i <= i##_end_; ++i)\nusing namespace std;\ntypedef pair<int, int> pii;\ntypedef long long ll;\n\n\nconst double eps = 1e-10;\nint sgn(double x) {\n    if(fabs(x) < eps) return 0;\n    return x < 0 ? -1 : 1;\n}\nstruct Point {\n    double x, y;\n    Point(double xp=0, double yp=0): x(xp), y(yp) { }\n    Point operator + (const Point& rhs) const { return Point(x+rhs.x, y+rhs.y); }\n    Point operator - (const Point& rhs) const { return Point(x-rhs.x, y-rhs.y); }\n    Point operator * (const double& k) const { return Point(x*k, y*k); }\n    Point operator / (const double& k) const { return Point(x/k, y/k); }\n    bool operator < (const Point& rhs) const { return x < rhs.x || (x==rhs.x && y<rhs.y); }\n    bool operator == (const Point& rhs) const {return sgn(x - rhs.x) == 0 && sgn(y - rhs.y) == 0; }\n    Point turn(double rad) { return Point(x*cos(rad)-y*sin(rad), x*sin(rad)+y*cos(rad)); }\n    void scan() { scanf(\"%lf%lf\", &x, &y); }\n};\ntypedef Point Vector;\n\ndouble dot(Vector x, Vector y) { return x.x*y.x + x.y*y.y; }\ndouble length(Vector x) { return sqrt(dot(x, x)); }\ndouble cross(Vector A, Vector B) { return A.x*B.y - A.y*B.x; }\n\n\nPoint LineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A + v * (dot(P-A, v) / dot(v, v));\n}\nPoint LineReflection(Point P, Point A, Point B) {\n    Point proj = LineProjection(P, A, B);\n    return proj + proj - P;\n}\n\nint Clockwise(Point O, Point A, Point B) {\n    /* Clockwise: -1\n       Counterclockwise: 1\n       Otherwise: 0\n    */\n    return sgn(cross(A - O, B - O));\n}\nvoid SegCheck(Point a, Point b, Point p) {\n    Vector d = b - a, e = p - a;\n    if(sgn(dot(d, e)) == -1) puts(\"ONLINE_BACK\");\n    else if(sgn(length(e) - length(d)) == 1) puts(\"ONLINE_FRONT\");\n    else puts(\"ON_SEGMENT\");\n}\n\nint JudgeParOrth(Point a1, Point a2, Point b1, Point b2) {\n    /* 2: parallel\n       1: orthogonal\n       0: otherwise\n    */\n    Vector v = a2 - a1, w = b2 - b1;\n    if(sgn(cross(v, w)) == 0) return 2;\n    if(sgn(dot(v, w)) == 0) return 1;\n    return 0;\n}\n\nint main() {\n    Point a1, a2, b1, b2;\n    int q; scanf(\"%d\", &q);\n    while(q--) {\n        a1.scan(), a2.scan();\n        b1.scan(), b2.scan();\n        printf(\"%d\\n\", JudgeParOrth(a1, a2, b1, b2));\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\nint main()\n{\n    long long int xp0, xp1, xp2, xp3, yp0, yp1, yp3, yp2, diffx0, diffy0, diffx1, diffy1, test;\n    int res;\n    double m1, m2;\n    scanf(\"%lld\", &test);\n    while(test--)\n    {\n        scanf(\"%lld%lld%lld%lld%lld%lld%lld%lld\", &xp0, &yp0, &xp1, &yp1, &xp2, &yp2, &xp3, &yp3);\n        diffx0 = xp1 - xp0;\n        diffy0 = yp1 - yp0;\n        diffx1 = xp3 - xp2;\n        diffy1 = yp3 - yp2;\n        if(!diffx0)\n        {\n            if(!diffx1)\n            {\n                res = 2;\n            }\n            else if(!diffy1)\n            {\n                res = 1;\n            }\n        }\n        else if(!diffx1)\n        {\n            if(!diffx0)\n            {\n                res = 2;\n            }\n            else if(!diffy0)\n            {\n                res = 1;\n            }\n        }\n        else\n        {\n            m1 = (double)diffy0/diffx0;\n            m2 = (double)diffy1/diffx1;\n            if(m1 == m2)    res = 2;\n            else if(m1 * m2 == -1)  res = 1;\n            else res = 0;\n        }\n        printf(\"%d\\n\", res);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cfloat>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <functional>\n#include <sstream>\n#include <string>\n#include <utility>\n#include <map>\n#include <memory>\n#include <set>\n#include <vector>\n#include <deque>\n#include <list>\n#include <stack>\n#include <queue>\n\nusing namespace std;\n\nclass Vector\n{\npublic:\n  int x;\n  int y;\n\n  Vector(){}\n  Vector( int x, int y ) : x(x), y(y) {}\n\n  Vector operator + ( const Vector v ) { return Vector( x + v.x, y + v.y ); }\n  Vector operator - ( const Vector v ) { return Vector( x - v.x, y - v.y ); }\n  Vector operator * ( const int k ) { return Vector( x * k, y * k ); }\n  bool operator < ( const Vector &v ) const { return x * x + y * y < v.x * v.x + v.y * v.y; }\n\n  double length() { return sqrt( norm() ); }\n  int norm() { return x * x + y * y; }\n\n  static int dot( Vector v1, Vector v2 ) { return v1.x * v2.x + v1.y * v2.y; }\n  static int cross( Vector v1, Vector v2 ) { return v1.x * v2.y - v1.y * v2.x; }\n};\n\nint main()\n{\n  int q;\n  cin >> q;\n\n  int x0, y0, x1, y1, x2, y2, x3, y3;\n  \n  for ( auto i = 0; i < q; ++i )\n    {\n      cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n      Vector p0( x0, y0 );\n      Vector p1( x1, y1 );\n      Vector p2( x2, y2 );\n      Vector p3( x3, y3 );\n\n      Vector p10 = p1 - p0;\n      Vector p32 = p3 - p2;\n\n      if ( Vector::dot( p10, p32 ) == 0 )\n        cout << \"1\" << endl;\n      else if ( Vector::cross( p10, p32 ) == 0 )\n        cout << \"2\" << endl;\n      else\n        cout << \"0\" << endl;\n    }\n          \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nconst double EPS = 1e-9;\n//??????????¨±???\nbool equals(double a,double b){\n    return (fabs(a-b) < EPS);\n}\n\n\n//???\nclass Point{\npublic:\n    double x,y;\n    Point (double x=0,double y=0) : x(x),y(y){}\n\n    Point operator + (Point p){ return Point( x+p.x , y-p.y );}\n    Point operator - (Point p){ return Point( x-p.x , y-p.y ); }\n    Point operator * (double a){ return Point( a*x , a*y ); }\n    Point operator / (double a){ return Point( x/a , y/a ); }\n\n\n    bool operator == (const Point &p) const{\n        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n    }\n};\n\n//????????????\ntypedef Point Vector;\n\n//??????\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//??????\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n//Vector : ??´?????????\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b),0.0);\n}\n\n//Vector : ????????????\nbool isParalell(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\n\nvoid solve(){\n    double p0x,p0y,p1x,p1y,p2x,p2y,p3x,p3y;\n    cin>>p0x>>p0y>>p1x>>p1y>>p2x>>p2y>>p3x>>p3y;\n\n    Vector v1(p0x-p1x,p0y-p1y);\n    Vector v2(p2x-p3x,p2y-p3y);\n    bool f = isOrthogonal(v1,v2);\n    bool g = isParalell(v1,v2);\n\n    if(f) cout << 1 << endl;\n    else if(g) cout << 2 << endl;\n    else cout << 0 << endl;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i=0;i<q;i++){\n        solve();\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <complex>\n#include <algorithm>\nusing namespace std;\n\ntypedef long double Real;\ntypedef complex<Real> Point;\n#define PCR Point const &\n#define X real()\n#define Y imag()\n\nconst Real EPS = 1e-10;\nconst Real INF = 1e100;\nconst Real PI = acos(-1);\n\nstruct Segment {\n    Point p[2];\n    Segment (PCR a = Point(), PCR b = Point()){\n        p[0] = a, p[1] = b;\n    }\n    Point & operator [] (int k) { return p[k]; }\n    Point const & operator [] (int k) const { return p[k]; }\n};\ntypedef vector<Point> Polygon;\nstruct Circle { Real radius; Point center; };\n\nReal dot(PCR a, PCR b){\n    return a.X*b.X + a.Y*b.Y;\n}\nReal cross(PCR a, PCR b){\n    return a.X*b.Y - a.Y*b.X;\n}\n\nPoint pSP(Segment const & s, PCR p){\n    Point base = s[1] - s[0];\n    Real r = dot(p - s[0], base) / norm(base);\n    return s[0] + base * r;\n}\n\nPoint rSP(Segment const & s, PCR p){\n    Point v = pSP(s,p) - p;\n    return p + v * Real(2);\n}\n\nenum { LEFT = 1, RIGHT = -1, BACK = 2, FRONT = -2, ON = 0 };\n// Includes end-points. Comment in to exclude.\nint ccw(PCR x, PCR p, PCR q){\n    Point a = p - x, b = q - x;\n    if(cross(a,b) > EPS) return LEFT;\n    if(cross(a,b) < -EPS) return RIGHT;\n    if(/* abs(a) < EPS || */ dot(a,b) < -EPS) return BACK;\n    if(/* abs(b) < EPS || */ norm(a) < norm(b)) return FRONT;\n    return ON;\n}\n\n// bool iLL(Segment const & s, Segment const & t){\n\n// }\n\n#include <iostream>\n#include <cstdio>\n\nint main(){\n    Segment s,t;\n    Real x,y;\n    int n; cin >> n;\n    for(int i=0;i<n;i++){\n        cin >> x >> y;\n        s[0] = Point(x,y);\n        cin >> x >> y;\n        s[1] = Point(x,y);\n        cin >> x >> y;\n        t[0] = Point(x,y);\n        cin >> x >> y;\n        t[1] = Point(x,y);\n        Real a = arg(s[1] - s[0]);\n        Real b = arg(t[1] - t[0]);\n        if(a < EPS) a += PI;\n        if(b < EPS) b += PI;\n\n        if(abs(a-b) < EPS) puts(\"2\");\n        else if(abs(abs(a-b)-PI/2) < EPS) puts(\"1\");\n        else puts(\"0\");\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string.h>\n#include<string>\n#include<cstdio>\n#include<algorithm>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<cmath>\n#include<utility>\n#include<set>\n#include<complex>\n#define ll long long int\n#define ld long double\n#define INF 1000000000\n#define EPS 0.0000000001\n#define rep(i,n) for(i=0;i<n;i++)\nusing namespace std;\n\ntypedef complex<double> P;\n\nstruct L : public vector<P>{//??´???\n  L(const P &a, const P &b){\n    push_back(a);push_back(b);\n  }\n};\n\nstruct C{//???\n  P c; double r;\n  C(const P &c,double r): c(c),r(r){}\n};\n\nnamespace std{//??????????????????\n  bool operator < (const P& a,const P& b){\n    return real(a)!= real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b)\n  }\n  bool operator == (const P& a,const P& b){\n    return a.real()==b.real()&&a.imag()==b.imag();\n  }\n}\n\ndouble dot(P a,P b){\n  return real(conj(a)*b);\n}\n\ndouble cross(P a,P b){\n  return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n  b-=a;c-=a;\n  if(cross(b,c)>0)   return +1;// counter clockwise \n  if(cross(b,c)<0)   return -1;// clockwise \n  if(dot(b,c)<0)     return +2;// c-a-b on line\n  if(norm(b)<norm(c))return -2;// a-b-c on line\n  return 0;                    // a-c-b on lone\n}\n\nint across(P p1,P p2,P p3,P p4){\n    P s1(p2-p1);\n    P s2(p4-p3);\n    if(s1.real()*s2.imag()==s1.imag()*s2.real())return 2;//parallel\n    if(dot(s1,s2)==0)return 1;//Orthogonal\n    return 0;//others\n}\n\nint main()\n{\n  int i;\n  int q;\n\n  cin>>q;\n\n  rep(i,q){\n    double xp,yp;\n\n    cin>>xp>>yp;  P p1(xp,yp);\n    cin>>xp>>yp;  P p2(xp,yp);\n    cin>>xp>>yp;  P p3(xp,yp);\n    cin>>xp>>yp;  P p4(xp,yp);\n\n    cout<<across(p1,p2,p3,p4)<<endl;\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <iomanip>\n#include <numeric>\n#include <utility>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n#include <unordered_map>\n#include <unordered_set>\n\nusing namespace std;\n\n#define ll long long\n#define ull unsigned long long\n#define INF (1 << 29)\n#define LLINF (1LL << 61)\n#define MOD7 1000000007\n#define MOD9 1000000009\n#define EPS 1e-9\n#define P pair<int, int>\n#define pii pair<int, int>\n#define pll pair<ll, ll>\n#define pul pair<ull, ull>\n#define all(a) (a).begin(), (a).end()\n#define FOR(i,a,b) for (int i=(a);i<(b);++i)\n#define RFOR(i,a,b) for (int i=(b)-1;i>=(a);--i)\n#define REP(i,n) for (int i=0;i<(n);++i)\n#define RREP(i,n) for (int i=(n)-1;i>=0;--i)\n#define TO_STRING(VariableName) # VariableName\n\nvoid YES() { cout << \"YES\" << endl; }\nvoid NO() { cout << \"NO\" << endl; }\nvoid Yes() { cout << \"Yes\" << endl; }\nvoid No() { cout << \"No\" << endl; }\nvoid yes() { cout << \"yes\" << endl; }\nvoid no() { cout << \"no\" << endl; }\n\nclass Point;\nclass Segment;\nclass Circle;\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = vector<Point>;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double k) { return Point(x * k, y * k); }\n\tPoint operator/(double k) { return Point(x / k, y / k); }\n\n\tbool operator<(const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator==(const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n\tfriend istream& operator>>(istream& stream, Point& p) {\n\t\tdouble x, y;\n\t\tstream >> x >> y;\n\t\tp.x = x;\n\t\tp.y = y;\n\t\treturn stream;\n\t}\n\n\tfriend ostream& operator<<(ostream& stream, const Point& p) {\n\t\tstream << fixed << setprecision(10) << p.x << \" \" << p.y;\n\t\treturn stream;\n\t}\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tdouble dot(Vector v) {\n\t\treturn x * v.x + y * v.y;\n\t}\n\n\tdouble cross(Vector v) {\n\t\treturn x * v.y - y * v.x;\n\t}\n};\n\n#define CLOCKWISE 1\n#define COUNTER_CLOCKWISE -1\n#define ONLINE_BACK 2\n#define ONLINE_FRONT -2\n#define ON_SEGMENT 0\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\n\tSegment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\t\n\tfriend istream& operator>>(istream& stream, Segment& s) {\n\t\tPoint p1, p2;\n\t\tstream >> p1 >> p2;\n\t\ts.p1 = p1;\n\t\ts.p2 = p2;\n\t\treturn stream;\n\t}\n\n\tfriend ostream& operator<<(ostream& stream, const Segment& s) {\n\t\tstream << fixed << setprecision(10) << s.p1.x << \" \" << s.p1.y << \" \";\n\t\tstream << fixed << setprecision(10) << s.p2.x << \" \" << s.p2.y;\n\t\treturn stream;\n\t}\n\n\tPoint project(Point p) {\n\t\tPoint base = p2 - p1;\n\t\tdouble r = (p - p1).dot(base) / base.norm();\n\t\treturn p1 + base * r;\n\t}\n\n\tPoint refrect(Point p) {\n\t\treturn p + (project(p) - p) * 2;\n\t}\n\n\tint ccw(Point p) {\n\t\tVector a = p2 - p1;\n\t\tVector b = p - p1;\n\t\tif (a.cross(b) > EPS) return COUNTER_CLOCKWISE;\n\t\tif (a.cross(b) < -EPS) return CLOCKWISE;\n\t\tif (a.dot(b) < -EPS) return ONLINE_BACK;\n\t\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\t\treturn ON_SEGMENT;\n\t}\n\n\tbool orthogonal(Segment s) {\n\t\treturn fabs((p2 - p1).dot(s.p2 - s.p1)) < EPS;\n\t}\n\n\tbool parallel(Segment s) {\n\t\treturn fabs((p2 - p1).cross(s.p2 - s.p1)) < EPS;\n\t}\n\n\tbool intersect(Segment s) {\n\n\t}\n};\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) : c(c), r(r) {}\n};\n\nint main() {\n\tSegment s1, s2;\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> s1 >> s2;\n\t\tif (s1.orthogonal(s2))\n\t\t\tcout << 1 << endl;\n\t\telse if (s1.parallel(s2))\n\t\t\tcout << 2 << endl;\n\t\telse\n\t\t\tcout << 0 << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)    //誤差\ntypedef complex<double> P;\n\n//実数同士の比較\nbool EQ(double a, double b){\n    return (abs(a - b) < EPS);\n}\n\n//内積\ndouble dot(P a, P b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n//外積\ndouble cross(P a, P b){\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\nint main(){\n\n    int q; cin >> q;\n    for(int i = 0; i < q; i++){\n        P p0, p1, p2, p3; cin >> p0.real() >> p0.imag() >> p1.real() >> p1.imag() >> p2.real() >> p2.imag() >> p3.real() >> p3.imag();\n        int ans = 0;\n        //垂直だったら内積0\n        if(EQ(dot(p1 - p0, p3 - p2), 0.0)) ans = 1;\n        else if(EQ(cross(p1 - p0, p3 - p2), 0.0)) ans = 2; \n        cout << ans << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <deque>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <vector>\n#include <set>\n#include <limits>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n#define REP(i, j) for(int i = 0; i < (int)(j); ++i)\n#define FOR(i, j, k) for(int i = (int)(j); i < (int)(k); ++i)\n#define SORT(v) sort((v).begin(), (v).end())\n#define REVERSE(v) reverse((v).begin(), (v).end())\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\n\n//線分\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\n//外積\ndouble cross(const P& a, const P& b) {\n  return imag(conj(a)*b);\n}\n\n//内積\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\nbool orthogonal(const L &l1, const L &l2){\n  return dot(l1[0]-l1[1], l2[0]-l2[1]) <= EPS;\n}\n \nbool parallel(const L &l1, const L &l2){\n  return cross(l1[0]-l1[1], l2[0]-l2[1]) <= EPS;\n}\n\n\nint main() {\n  int Q; cin >>Q;\n  REP(q, Q){\n    int x0, y0, x1, y1, x2, y2, x3, y3;\n    scanf(\"%d %d %d %d %d %d %d %d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n    L l1 = L(P(x0, y0), P(x1, y1)), l2 = L(P(x2, y2), P(x3, y3));\n    if(orthogonal(l1, l2)) cout <<1 <<endl;\n    else if(parallel(l1, l2)) cout <<2 <<endl;\n    else cout <<0 <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cstdio>\n#define x real()\n#define y imag()\nusing namespace std;\ntypedef complex <double> point;\n\ndouble dot(point a,point b){\n  return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(point a,point b){\n  return a.x*b.y-a.y*b.x;\n}\n\npoint projection(point a,point b,point c){\n  point base = b - a;\n  double r = dot(c-a,base)/(abs(base)*abs(base));\n  return a+base*r;\n}\n\npoint reflection(point a,point b,point c){\n  return 2.0*projection(a,b,c)-c;\n}\n\nint main(){\n  point a,b,c,d;\n  int q;\n  cin >> q;\n  for(int i=0;i<q;i++) {\n    cin >>a.x>>a.y>>b.x>>b.y>>c.x>>c.y>>d.x>>d.y;\n    int ans = 0;\n    if(dot(a-b,c-d)==0) ans = 1;\n    if(cross(a-b,c-d)==0) ans = 2;\n    cout << ans <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define FOR(i, a, b) for (int i = (a), i##_max = (b); i < i##_max; ++i)\n#define RFOR(i, a, b) for (int i = (b)-1, i##_min = (a); i >= i##_min; --i)\n#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)\n#define RREP(i, n) for (int i = (n)-1; i >= 0; --i)\n#define ALL(obj) (obj).begin(), (obj).end()\n\nusing namespace std;\nusing i64 = int64_t;\nusing u64 = uint64_t;\nusing vi = vector<int>;\nusing vl = vector<i64>;\nusing vd = vector<double>;\nusing pi = pair<int, int>;\nusing pl = pair<i64, i64>;\nusing pd = pair<double, double>;\n\nconstexpr int INF = 1 << 30;\nconstexpr int MOD = 1000000007;\n\ntemplate <typename T>\nvoid print(vector<T> &v) {\n  REP(i, v.size()) {\n    if (i) cout << \" \";\n    cout << v[i];\n  }\n  cout << endl;\n}\n\ntemplate <typename T>\nclass Vec2 {\n public:\n  Vec2(){};\n  Vec2(T x, T y) : x(x), y(y){};\n  Vec2<T> operator+(Vec2<T> p);\n  Vec2<T> operator-(Vec2<T> p);\n  T dot(Vec2<T> p);\n  bool is_paralell(Vec2<T> p);\n  bool is_vertical(Vec2<T> p);\n  T x, y;\n};\n\ntemplate <typename T>\nVec2<T> Vec2<T>::operator+(Vec2<T> p) {\n  return Vec2(x + p.x, y + p.y);\n}\n\ntemplate <typename T>\nVec2<T> Vec2<T>::operator-(Vec2<T> p) {\n  return Vec2(x - p.x, y - p.y);\n}\n\ntemplate <typename T>\nT Vec2<T>::dot(Vec2<T> p) {\n  return x * p.x + y * p.y;\n}\n\ntemplate <typename T>\nbool Vec2<T>::is_paralell(Vec2<T> p) {\n  return x * p.y == y * p.x;\n}\n\ntemplate <typename T>\nbool Vec2<T>::is_vertical(Vec2<T> p) {\n  return this->dot(p) == (T)0;\n}\n\nint main() {\n  int q, x, y;\n  Vec2<int> p0, p1, p2, p3;\n  cin >> q;\n  REP(i, q) {\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    if ((p1 - p0).is_paralell(p3 - p2)) {\n      cout << \"2\" << endl;\n    } else if ((p1 - p0).is_vertical(p3 - p2)) {\n      cout << \"1\" << endl;\n    } else {\n      cout << \"0\" << endl;\n    }\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "/*\n幾何\nhttps://gist.github.com/zeptometer/3719669\n複素数平面による幾何ライブラリ←もっと短くなる可能生アリ\nhttp://osrehun.hatenadiary.jp/entry/2016/12/31/145827\n\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing DD=double;\n\n\n#define EPS 1e-10\n#define eq(a,b) (abs( (a) - (b) )<EPS)\nconst DD PI=acosl(-1.0);\nconstexpr DD INF=1LL<<62;\n\n//点\nusing P=complex<DD>;\n//ベクトル\nusing V=P;\n//線分\nstruct Segment{\n    P a,b;\n    Segment()=default;\n    Segment(P a,P b) :a(a),b(b){}\n    Segment(DD ax,DD ay,DD bx,DD by):a(ax,ay),b(bx,by){}\n\n};\n//直線\nusing Line=Segment;\n//円\nstruct Circle{\n    P p;\n    DD r;\n    Circle()=default;\n    Circle(P p,DD r):p(p),r(r){}\n};\nusing Polygon=vector<P>;\n\n//++++++++++++++++基本計算++++++++++++++//\ninline DD torad(const DD &deg){return deg*PI/180;}\ninline DD todeg(const DD &rad){return rad*180/PI;}\n//内積\ninline DD dot(const V &a,const V &b){\n    return real(a*conj(b));\n}\n//外積\ninline DD cross(const V &a,const V &b){\n    return imag(conj(a)*b);\n}\n//ベクトルvを反時計回りにr度回転\ninline V rotate(const V &v,const DD r){\n    return v*V(cos(r),sin(r));\n}\ninline bool xy(const P &a,const P &b){\n    if(real(a)+EPS<=real(b)) return true;\n    if(eq(real(a),real(b)) && imag(a)+EPS<imag(b)) return true;\n    return false;\n}\ninline bool yx(const P &a,const P &b){\n    if(imag(a)+EPS<imag(b)) return true;\n    if(eq(imag(a),imag(b)) && real(a)+EPS<real(b)) return true;\n    return false;\n}\n\n//++++++++++++++++平行や直交+++++++++++++++//\ninline bool isOrthogonal(V &a,V &b){\n    return eq(dot(a,b),0.0);\n}\ninline bool isOrthogonal(Segment &a,Segment &b){\n    return eq(dot(a.a-a.b,b.a-b.b),0);\n}\ninline bool isParallel(V &a,V &b){\n    return eq(cross(a,b),0.0);\n}\ninline bool isParallel(Segment &a,Segment &b){\n    return eq(cross(a.a-a.b,b.a-b.b),0);\n}\n//線分a-bに対してcがどの位置にあるか\n//ccwの簡略版 反時計回り:1 時計回り:-1 直線上:0\ninline int ccw(P &a,P &b,P &c){\n    DD cr=cross(b-a,c-a);\n    if(cr>EPS) return 1;\n    if(cr<-EPS) return -1;\n    return 0;\n}\n\n//線分a-bに対してcがどの位置にあるか\n//反時計回り:1　時計回り:-1 直線上(a,b,c:-2 a,c,b:0 c,a,b:2) \ninline int ccwH(P &a,P &b,P &c){\n    b-=a;c-=a;\n    if(cross(b,c)>EPS) return 1;\n    if(cross(b,c)<-EPS) return -1;\n    if(dot(b,c)<-EPS) return 2;\n    if(norm(b)<norm(c)) return -2;\n    return 0;\n}\n\n\n//+++++++++++++++射影+++++++++++++++++++++//\ninline P project(const P &p,const Segment &s){\n    V base=s.b-s.a;\n    DD r=dot(p-s.a,base)/norm(base);\n    return s.a+base*r;\n}\ninline P reflect(const P &p,const Segment &s){\n    return p+(project(p,s)-p)*2.0;\n}\n/*++++++++++点との距離++++++++++++++++++*/\n//点と直線の距離\ninline DD dis(P p,Line l){return abs(cross(l.b-l.a,p-l.a))/abs(l.b-l.a);}\n//点と線分の距離\ninline DD disPS(P p,Segment s){\n    if( dot(s.b-s.a,p-s.a)<0.0 ) return abs(p-s.a);\n    if( dot(s.a-s.b,p-s.b)<0.0 ) return abs(p-s.b);\n    return dis(p,s); //点と直線の距離\n}\n\n\n//+++++++++++++++線分と直線+++++++++++++++++//\n\n//線分a-b,c-dは交差するか?\ninline bool intersect(P a,P b,P c,P d){\n    return(ccwH(a,b,c)*ccwH(a,b,d)<=0 && ccwH(c,d,a)*ccwH(c,d,b)<=0);\n}\n//線分s,tは交差するか？\ninline bool intersect(Segment s,Segment t){\n    return intersect(s.a,s.b,t.a,t.b);\n}\n//線分と線分の交点\n//これをやる前にintersectで判定\ninline P crossPoint(Segment s,Segment t){\n    V base=t.b-t.a;\n    DD d1=abs(cross(base,s.a-t.a));\n    DD d2=abs(cross(base,s.b-t.a));\n    DD r=d1/(d1+d2);\n    return s.a+(s.b-s.a)*r;\n}\n//線分と線分の距離\ninline DD dis(Segment s,Segment t){\n    if(intersect(s,t)) return 0.0;\n    return min(min(disPS(t.a,s),disPS(t.b,s)),min(disPS(s.a,t),disPS(s.b,t)) );\n}\n\n//+++++++++++円++++++++++++++++//\n\n//円cと直線lの交点\n//abs(l,c.p)<c.r+EPSが必要\npair<P,P> crossPoint(Line l,Circle c){\n    P pr=project(c.p,l);\n    V e=(l.b-l.a)/(abs(l.b-l.a));\n    DD base=sqrt(c.r*c.r-norm(pr-c.p));\n    return make_pair(pr+e*base,pr-e*base);\n}\n//線分sと円cの交点\nvector<P> crossPointSC(Segment s,Circle c){\n    vector<P> ret;\n    if(dis(c.p,s)>=c.r+EPS) return ret;\n    auto p=crossPoint(s,c);\n    if(dot(p.first-s.a,s.b-s.a)>0 && dot(p.first-s.b,s.a-s.b)>0) ret.push_back(p.first);\n    if(dot(p.second-s.a,s.b-s.a)>0 && dot(p.second-s.b,s.a-s.b)>0) ret.push_back(p.second);\n    if(xy(s.a,s.b)) sort(ret.begin(),ret.end(),xy);\n    else sort(ret.rbegin(),ret.rend(),xy);\n    return ret;\n}\n\n//共通接線の数\n//離れている:4 外接:3 交わる:2 内接:1 内包:0\ninline int intersect(Circle a,Circle b){\n    DD d=abs(a.p-b.p);\n    if(d>a.r+b.r+EPS) return 4;\n    if(eq(d,a.r+b.r)) return 3;\n    if(eq(d,abs(a.r-b.r))) return 1;\n    if(d<abs(a.r-b.r)-EPS) return 0;\n    return 2;\n}\n\n//円c1と円c2の交点\n//これを使う前に交点があるかどうかを判定する\nvector<P> crossPoint(Circle a,Circle b){\n    vector<P> ret;\n    if(abs(a.p-b.p)<a.r+b.r+EPS) return ret;\n    DD d=abs(a.p-b.p);\n    DD s=acos((a.r*a.r+d*d-b.r*b.r)/(2*a.r*d));\n    DD t=arg(b.p-a.p);\n    if(eq(s,0)) ret.emplace_back(a.p+polar(a.r,t+s));\n    else ret.emplace_back(a.p+polar(a.r,t+s)),ret.emplace_back(a.p+polar(a.r,t-s));\n    return ret;\n}\n\n//pがcの外にあるかの判定が必要\nvector<P> TanLine(P &p,Circle &c){\n    vector<P> ret;\n    DD d=abs(p-c.p);\n    if(d<=c.r-EPS) return ret;\n    if(eq(d,c.r)){\n        ret.push_back(p);\n        return ret;\n    } \n    return crossPoint(c,Circle(p,sqrt(d*d-c.r*c.r)));\n}\n//https://ei1333.github.io/luzhiled/snippets/geometry/template.html\n//↑すごい。丸写し\n//円c1,c2の共通接線\n//接点をつないで線にしている(１個だけ追加するときに注意)\nvector<Line> TanLine(Circle a,Circle b){\n    vector<Line> ret;\n    if(a.r<b.r) swap(a,b);\n    DD g=abs(a.p-b.p);\n    if(eq(g,0)) return ret;\n    V u=(b.p-a.p)/g;\n    V v=rotate(u,PI*0.5);\n    for(DD s:{-1,1}){\n        DD h=(a.r+s*b.r)/g;\n        if(eq(1-h*h,0)){\n            ret.emplace_back(a.p+u*a.r,a.p+(u+v)*a.r);\n        }else if(1-h*h>0){\n            V uu=u*h,vv=v*sqrt(1-h*h);\n            ret.emplace_back(a.p+(uu+vv)*a.r,b.p-(uu+vv)*b.r*s);\n            ret.emplace_back(a.p+(uu-vv)*a.r,b.p-(uu-vv)*b.r*s);\n        }\n    }\n    return ret;\n}\n\n/*+++++++++++++++++++三角形+++++++++++++++++*/\n//外心\n//isParallel()を使って判定を忘れずに\nP circumcenter(P a,P b,P c){\n    P ab=(a+b)/2.0,bc=(b+c)/2.0;\n    Segment s(ab,ab+polar(1.0,arg(b-a)+PI*0.5));\n    Segment t(bc,bc+polar(1.0,arg(c-b)+PI*0.5));\n    return crossPoint(s,t);\n}\n\n/*+++++++++++++++++++多角形+++++++++++++++++++*/\n//IN:2 ON:1 OUT:0\n//点がどの位置にあるか\nint contains(P p,Polygon g){\n    int n=(int)g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        V a=g[i]-p,b=g[(i+1)%n]-p;\n        if(eq(cross(a,b),0) && dot(a,b)<EPS) return 1;\n        if(imag(a)>imag(b)) swap(a,b);\n        if(imag(a)<EPS && EPS<imag(b) && cross(a,b)>EPS) x=!x;\n    }\n    return (x?2:0);\n}\n//凸性判定\nbool isConvex(Polygon &g){\n    int n=(int)g.size();\n    int flag=0;\n    int t;\n    for(int i=0;i<n;i++){\n        V a(g[(i+1)%n]-g[i]),b(g[(i+2)%n]-g[i]);\n        if(cross(a,b)>EPS) t=1;\n        else if(cross(a,b)<-EPS) t=-1;\n        else continue;\n        if(flag==-t) return false;\n        flag=t;\n    }\n    return true;\n}\n\n//凸包　アンドリューのアルゴリズム\n//https://github.com/drken1215/algorithm/blob/master/Geometry/All.cpp←螺旋本より早そう\n//j=1:返上の点を含まない　j=-1:含む\n//反時計回りの多角形を返す\nPolygon ConvexHull(Polygon &s,int j){\n    int sz=(int)s.size();\n    if(sz<3) return s;\n    sort(s.begin(),s.end(),yx);\n\n    int n=0;\n    Polygon res(2*sz);\n    for(int i=0;i<sz;i++){\n        while(n>=2 && cross(res[n-1]-res[n-2],s[i]-res[n-2])<EPS*j){\n            n--;\n        }\n        res[n]=s[i];\n        n++;\n    }\n    int t=n+1;\n    for(int i=sz-2;i>=0;i--){\n        while(n>=t && cross(res[n-1]-res[n-2],s[i]-res[n-2])<EPS*j){\n            n--;\n        }\n        res[n]=s[i];\n        n++;\n    }\n    res.resize(n-1);\n    return res;\n}\n\n//符号付き面積\n//反時計回りの図形なら正\n//https://imagingsolution.net/math/calc_n_point_area/\nDD Area(const Polygon &g){\n    DD ret=0.0;\n    int n=(int)g.size();\n    for(int i=0;i<n;i++){\n        ret+=cross(g[i],g[(i+1)%n]);\n    }\n    return ret/2.0L;\n}\n\n//反時計回り\n//理解が浅い←大体分かった（本当か？）\nDD Diameter(Polygon &g){\n    g=ConvexHull(g,1);\n    int gz=g.size();\n    int m=0,M=0;\n    for(int i=1;i<gz;i++){\n        if(imag(g[i])<imag(g[m])) m=i;\n        if(imag(g[i])>imag(g[M])) M=i;\n    }\n    DD ret=0;\n    int sm=m,sM=M;\n    while(m!=sM || M!=sm){\n        ret=max(ret,norm(g[m]-g[M]));\n        if(cross(g[(m+1)%gz]-g[m],g[(M+1)%gz]-g[M])<0) m=(m+1)%gz;\n        else M=(M+1)%gz;\n    }\n    return sqrt(ret);\n}\n\n//凸多角形gをlで切断\n//l.p1-l.p2の左側\n//gは反時計回り→反時計回りで返す\n//時計回り→時計回り\nPolygon ConvexCut(const Polygon &g,Line l){\n    Polygon ret;\n    int gz=(int)g.size();\n    for(int i=0;i<gz;i++){\n        P now=g[i],next=g[(i+1)%gz];\n        if(ccw(l.a,l.b,now)>=0) ret.push_back(now);\n        if(ccw(l.a,l.b,now)*ccw(l.a,l.b,next)<0){\n            ret.push_back(crossPoint(Line(now,next),l));\n        }\n    }\n    return ret;\n}\n\ninline DD calc(P a,P b,DD r,bool triangle){\n    if(triangle) return cross(a,b);\n    else return r*r*arg(b-a);\n}\n\nDD calcArea(DD r,P a,P b){\n    if(eq(abs(a-b),0)) return 0;\n    bool ina=abs(a)<r+EPS;\n    bool inb=abs(b)<r+EPS;\n    if(ina && inb) return cross(a,b);\n    auto cr=crossPointSC(Segment(a,b),Circle((0,0),r));\n    if(cr.empty()) return calc(a,b,r,false);\n    auto s=cr[0],t=cr.back();\n    return calc(s,t,r,true)+calc(a,s,r,ina)+calc(t,b,r,inb);\n}\n\n//円と多角形の共通部分の面積\n//http://drken1215.hatenablog.com/entry/2020/02/02/091000\nDD Area(Circle c,Polygon g){\n    DD ret=0.0;\n    int gz=g.size();\n    if(gz<3) return ret;\n    for(int i=0;i<gz;i++){\n        P a=g[i]-c.p,b=g[(i+1)%gz]-c.p;\n        ret+=calcArea(c.r,g[i]-c.p,g[(i+1)%gz]-c.p);\n    }\n    return ret/2.0;\n}\n\n//++++なんか凄いの+++++++++++++++\n\n//最近点対\nDD RecClosetPair(Polygon::iterator it,int n){\n    if(n<=1) return INF;\n    int m=n/2;\n    DD x=real(it[m]);\n    DD d=min(RecClosetPair(it,m),RecClosetPair(it+m,n-m));\n    inplace_merge(it,it+m,it+n,yx);\n    Polygon v;\n    for(int i=0;i<n;i++){\n        if(abs(real(it[i])-x)>=d) continue;\n        for(int j=0;j<v.size();j++){\n            DD dy=imag(it[i])-imag(v[v.size()-1-j]);\n            if(dy>=d) break;\n            DD dx=real(it[i])-real(v[v.size()-1-j]);\n            d=min(d,sqrt(dx*dx+dy*dy));\n        }\n        v.push_back(it[i]);\n    }\n    return d;\n}\n\nDD ClosetPair(Polygon g){\n    sort(g.begin(),g.end(),xy);\n    return RecClosetPair(g.begin(),g.size());\n}\n\n\n\n\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr); \n    cout<<fixed<<setprecision(10);\n\n    int Q;\n    cin>>Q;\n    while(Q--){\n        int x[4],y[4];\n        for(int i=0;i<4;i++) cin>>x[i]>>y[i];\n        Segment s1(P(x[0],y[0]),P(x[1],y[1]));\n        Segment s2(P(x[2],y[2]),P(x[3],y[3]));\n        if(isParallel(s1,s2)) cout<<2<<endl;\n        else if(isOrthogonal(s1,s2)) cout<<1<<endl;\n        else cout<<0<<endl;\n    }\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define ALL(x) x.begin(),x.end()\n#define rep(i,n) for(int i=0;i<n;i++)\n#define debug(v) cout<<#v<<\":\";for(auto x:v){cout<<x<<' ';}cout<<endl; \n#define INF 1000000000\n#define mod 1000000007\ntypedef long long ll;\nconst ll LINF = 1001002003004005006ll;\nint dx[]={1,0,-1,0};\nint dy[]={0,1,0,-1};\nll gcd(ll a,ll b){return b?gcd(b,a%b):a;}\ntemplate<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }\n\nusing Real=long double;\nusing Point=complex<Real>;\nconst Real EPS=1e-10;\nconst Real pi=acosl(-1);\n\ninline bool eq(Real a,Real b){\n    return fabs(a-b)<EPS;\n}\n\nPoint operator*(const Point &p,const Real &d){\n    return Point(real(p)*d,imag(p)*d);\n}\n\n// 点 p を反時計回りに theta 回転\nPoint rotate(Real theta, const Point &p) {\n  return Point(cos(theta)*p.real()-sin(theta)*p.imag(),sin(theta)*p.real()+cos(theta)*p.imag());\n}\n\nReal dis(Point a,Point b){\n    return abs(a-b);\n}\n\nReal radian_to_degree(Real r){\n    return r*180.0/pi;\n}\n\nReal degree_to_radian(Real d){\n    return d*pi/180.0;\n}\n \n//三角形の面積，サラスの公式\nReal area_triangle(Point a,Point b,Point c){\n    Point x=b-a,y=c-a;\n    return fabs(x.real()*y.imag()-x.imag()*y.real())/2;\n}\n \nstruct Circle{\n    Point center;\n    Real r;\n    Circle(Point center,Real r):center(center),r(r){}\n};\n\n\nstruct Line{\n    Point p1,p2;\n    Line(Point p1,Point p2):p1(p1),p2(p2){}\n\n    //Ax + By = C\n    Line(Real A,Real B,Real C){\n        if(eq(A,0))     p1=Point(0,C/B),p2=Point(1,C/B);\n        else if(eq(B,0))p1=Point(C/A,0),p2=Point(C/A,1);\n        else            p1=Point(0,C/B),p2=Point(C/A,0);\n    }\n};\n\nstruct Segment:Line{\n    Segment()=default;\n    Segment(Point p1,Point p2):Line(p1,p2){}\n};\n\n//外積\nReal cross(const Point &a, const Point &b) {\n  return real(a)*imag(b)-imag(a)*real(b);\n}\n\n//内積\nReal dot(const Point &a, const Point &b) {\n  return real(a)*real(b)+imag(a)*imag(b);\n}\n\n//平行判定，外積0かをみる\nbool parallel(Line &a,Line &b){\n    return eq(cross(a.p1-a.p2,b.p1-b.p2),0.0);\n}\n\n//垂直判定，内積0かをみる\nbool orthogonal(Line &a,Line &b){\n    return eq(dot(a.p1-a.p2,b.p1-b.p2),0.0);\n}\n\n//v\n//最小包含円を返す　計算量は期待値O(n)\nCircle MinimumBoundingCircle(vector<Point> v){\n    int n=v.size();\n    \n    //ランダムシャッフル．いぢわるされたくないもんだ\n    mt19937 mt(time(0));\n    shuffle(v.begin(),v.end(),mt);\n\n    Circle ret(0,0);\n \n    //2点で円を作る\n    auto make_circle2=[&](Point a,Point b){\n        return Circle((a+b)*0.5,dis(a,b)/2);\n    };\n \n    //3点で円を作る\n    auto make_circle3=[&](Point A,Point B,Point C){\n        //wikiの公式\n        Real S=area_triangle(A,B,C);\n        Real a=dis(B,C),b=dis(A,C),c=dis(A,B);\n        Point cent=A*(a*a*(b*b+c*c-a*a)/(16*S*S))+B*(b*b*(c*c+a*a-b*b)/(16*S*S))+C*(c*c*(a*a+b*b-c*c)/(16*S*S));\n        return Circle(cent,dis(cent,A));\n    };\n \n    auto isIn=[&](Point a){\n        return dis(ret.center,a)<ret.r+EPS;\n    };\n\n    ret=make_circle2(v[0],v[1]);\n    for(int i=2;i<n;i++){\n        //v[i]が円に入っていないなら\n        if(!isIn(v[i])){\n            //円内にないなら点v[i]は必ず円周上に来る\n            ret=make_circle2(v[0],v[i]);\n            for(int j=1;j<i;j++){\n                if(!isIn(v[j])){\n                    //この時iとjが円周上を考える\n                    ret=make_circle2(v[i],v[j]);\n                    //最後の1点の決定\n                    for(int k=0;k<j;k++){\n                        if(!isIn(v[k])){\n                            ret=make_circle3(v[i],v[j],v[k]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return ret;\n}\n\nsigned main(){\n    cin.tie(0);\n    ios::sync_with_stdio(0);\n    cout<<fixed<<setprecision(12);\n\n    int q;cin>>q;\n    while(q--){\n        Real xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3;\n        cin>>xp0>>yp0>>xp1>>yp1>>xp2>>yp2>>xp3>>yp3;\n        Line a(Point(xp0,yp0),Point(xp1,yp1)),\n             b(Point(xp2,yp2),Point(xp3,yp3));\n        if(parallel(a,b)) cout<<2<<endl;\n        else if(orthogonal(a,b))cout<<1<<endl;\n        else cout<<0<<endl;\n    }\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n\nint main(){\n  int n;\n  double ax,ay,bx,by,cx,cy,dx,dy;\n  scanf(\"%d\",&n);\n  while(n--){    \n    scanf(\"%lf %lf %lf %lf\",&ax,&ay,&bx,&by);\n    scanf(\"%lf %lf %lf %lf\",&cx,&cy,&dx,&dy);\n    P AB=P(bx-ax,by-ay);\n    P CD=P(dx-cx,dy-cy);\n    P k=AB*conj(CD);\n    if(imag(k)==0)printf(\"2\\n\");\n    else if(real(k)==0)printf(\"1\\n\");\n    else printf(\"0\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define mm(a,b) memset(a,b,sizeof(a))\n#define ACCELERATE (ios::sync_with_stdio(false),cin.tie(0))\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define pll pair<long long,long long>\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\n#define rush() int T;scanf(\"%d\",&T);while(T--)\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define sc(a) scanf(\"%d\",&a)\n#define sc2(a,b) scanf(\"%d%d\",&a,&b)\n#define sc3(a,b,c) scanf(\"%d%d%d\",&a,&b,&c)\n#define pf(x) printf(\"%d\\n\",x)\n#define pf2(x,y) printf(\"%d %d\\n\",x,y)\n#define pf3(x,y,z) printf(\"%d %d %d\\n\",x,y,z)\n#define all(x) (x).begin(),(x).end()\n#define PI acos(-1.0)\n#define E exp(1.0)\n#define db double\n#define ll long long\n#define ld long double\n#define ull unsigned long long\n//#define io\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nconst ll INF=0x3f3f3f3f3f3f3f3f;\n//#define gc getchar\n//char buf[1<<21],*p1=buf,*p2=buf;\n//inline int gc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}\n//inline int read()\n//{\n//    int ret=0,f=0;char c=gc();\n//    while(!isdigit(c)){if(c=='-')f=1;c=gc();}\n//    while(isdigit(c)){ret=ret*10+c-48;c=gc();}\n//    if(f)return -ret;return ret;\n//}\nconst db EPS=1e-10;\ninline int sign(db a){return a<-EPS?-1:a>EPS;}\ninline int cmp(db a,db b){return sign(a-b);}\ninline db sqr(db x){return x*x;}\nstruct Point{\n    db x,y;\n    Point(){}\n    Point(db _x,db _y):x(_x),y(_y){}\n    void input(){scanf(\"%lf%lf\",&x,&y);}\n    void output(){printf(\"%.10f %.10f\\n\",x,y);}\n    bool operator == (Point b)const{\n        return sign(x-b.x)==0&&sign(y-b.y)==0;\n    }\n    bool operator < (Point b)const{\n        return sign(x-b.x)==0?sign(y-b.y)<0:x<b.x;\n    }\n    Point operator + (const Point &b)const{\n        return Point(x+b.x,y+b.y);\n    }\n    Point operator - (const Point &b)const{\n        return Point(x-b.x,y-b.y);\n    }\n    db operator ^ (const Point &b)const{\n        return x*b.y-y*b.x;\n    }\n    db operator * (const Point &b)const{\n        return x*b.x+y*b.y;\n    }\n    db len(){return hypot(x,y);}\n    db len2(){return x*x+y*y;}\n    db distance(Point p){return hypot(x-p.x,y-p.y);}\n    Point operator * (const db &k)const{\n        return Point(x*k,y*k);\n    }\n    Point operator / (const db &k)const{\n        return Point(x/k,y/k);\n    }\n    db rad(Point a,Point b){\n        Point p=*this;\n        return fabs(atan2(fabs((a-p)^(b-p)),(a-p)*(b-p)));\n    }\n    Point unit(){return *this/len();}\n    Point trunc(db r){\n        db l=len();\n        if(!sign(l))return *this;\n        r/=l;\n        return Point(x*r,y*r);\n    }\n    Point rotleft(){return Point(-y,x);}\n    Point rotright(){return Point(y,-x);}\n    Point rotate(Point p,db angle){\n        Point v=(*this)-p;\n        db c=cos(angle),s=sin(angle);\n        return Point(p.x+v.x*c-v.y*s,p.y+v.x*s+v.y*c);\n    }\n};\nstruct Line{\n    Point s,e;\n    Line(){}\n    Line(Point _s,Point _e):s(_s),e(_e){}\n    bool operator == (Line v){\n        return (s==v.s)&&(e==v.e);\n    }\n    Line(Point p,db angle){\n        s=p;\n        if(sign(angle-PI/2)==0)e=(s+Point(0,1));\n        else e=(s+Point(1,tan(angle)));\n    }\n    Line(db a,db b,db c){\n        if(sign(a)==0){\n            s=Point(0,-c/b);e=Point(1,-c/b);\n        }else if(sign(b)==0){\n            s=Point(-c/a,0);e=Point(-c/a,1);\n        }else{\n            s=Point(0,-c/b);e=Point(1,(-c-a)/b);\n        }\n    }\n    void input(){s.input();e.input();}\n    void adjust(){if(e<s)swap(s,e);}\n    db length(){return s.distance(e);}\n    //[0,PI)\n    db angle(){\n        db k=atan2(e.y-s.y,e.x-s.x);\n        if(sign(k)<0)k+=PI;\n        if(sign(k-PI)==0)k-=PI;\n        return k;\n    }\n    //line|1 on the left|2 on the right|3 on line|\n    int relation(Point p){\n        int c=sign((p-s)^(e-s));\n        if(c<0)return 1;\n        else if(c>0)return 2;\n        else return 3;\n    }\n    bool pointonseg(Point p){\n        return sign((p-s)^(e-s))==0&&sign((p-s)*(p-e))<=0;\n    }\n    bool parallel(Line v){\n        return sign((e-s)^(v.e-v.s))==0;\n    }\n    //|0 not intersect|1 non-standard|2 intersect|\n    int segcrossseg(Line v){\n        int d1=sign((e-s)^(v.s-s));\n        int d2=sign((e-s)^(v.e-s));\n        int d3=sign((v.e-v.s)^(s-v.s));\n        int d4=sign((v.e-v.s)^(e-v.s));\n        if((d1^d2)==-2&&(d3^d4)==-2)return 2;\n        return (d1==0&&sign((v.s-s)*(v.s-e))<=0)||\n            (d2==0&&sign((v.e-s)*(v.e-e))<=0)||\n            (d3==0&&sign((s-v.s)*(s-v.e))<=0)||\n            (d4==0&&sign((e-v.s)*(e-v.e))<=0);\n    }\n    //|0 not intersect|1 non-standard|2 intersect|\n    int linecrossseg(Line v){\n        int d1=sign((e-s)^(v.s-s));\n        int d2=sign((e-s)^(v.e-s));\n        if((d1^d2)==-2)return 2;\n        return (d1==0||d2==0);\n    }\n    //|0 parallel|1 coincides|2 intersect|\n    int linecrossline(Line v){\n        if((*this).parallel(v))return v.relation(s)==3;\n        return 2;\n    }\n    //要保证两直线不平行或重合\n    Point crossPoint(Line v){\n        db a1=(v.e-v.s)^(s-v.s);\n        db a2=(v.e-v.s)^(e-v.s);\n        return Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));\n    }\n\n};\n\n//\t//点到直线的距离\n//\tdouble dispointtoline(Point p){\n//\t\treturn fabs((p-s)^(e-s))/length();\n//\t}\n//\t//点到线段的距离\n//\tdouble dispointtoseg(Point p){\n//\t\tif(sgn((p-s)*(e-s))<0 || sgn((p-e)*(s-e))<0)\n//\t\t\treturn min(p.distance(s),p.distance(e));\n//\t\treturn dispointtoline(p);\n//\t}\n//\t//`返回线段到线段的距离`\n//\t//`前提是两线段不相交，相交距离就是0了`\n//\tdouble dissegtoseg(Line v){\n//\t\treturn min(min(dispointtoseg(v.s),dispointtoseg(v.e)),min(v.dispointtoseg(s),v.dispointtoseg(e)));\n//\t}\n//\t//`返回点p在直线上的投影`\n//\tPoint lineprog(Point p){\n//\t\treturn s + ( ((e-s)*((e-s)*(p-s)))/((e-s).len2()) );\n//\t}\n//\t//`返回点p关于直线的对称点`\n//\tPoint symmetrypoint(Point p){\n//\t\tPoint q = lineprog(p);\n//\t\treturn Point(2*q.x-p.x,2*q.y-p.y);\n//\t}\n//};\n\nPoint proj(Point p1,Point p2,Point q)\n{\n    Point dir=p2-p1;\n    return p1+dir*(dir*(q-p1)/dir.len2());\n}\nPoint reflect(Point p1,Point p2,Point q)\n{\n    return proj(p1,p2,q)*2-q;\n}\nLine l1,l2;\nint main()\n{\n    #ifdef io\n    freopen(\"in.txt\",\"r\",stdin);\n    #endif\n    int q;\n    sc(q);\n    while(q--){\n        l1.input();l2.input();\n        int t=l1.linecrossline(l2);\n        if(!t||t==1)puts(\"2\");\n        else{\n            if((l2.e-l2.s)*(l1.e-l1.s)==0)puts(\"1\");\n            else puts(\"0\");\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <numeric>\n#include <string>\n#include <complex>\n#include <iomanip>\nusing namespace std;\ntypedef complex<double> P;\nconst double EPS = 1e-10;\n//二つのスカラーが等しいか\n#define EQ(a, b) (abs((a) - (b)) < EPS)\n\n//二つのベクトルが等しいか\n#define EQV(a, b) (EQ((a), real(), (b).real()) && EQ((a), imag(), (b).imag()))\n\nnamespace std\n{\nbool operator<(P &a, P &b)\n{\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n}\n} // namespace std\n\ndouble dot(P a, P b)\n{\n    return real(a) * real(b) + imag(a) * imag(b);\n}\n\ndouble cross(P a, P b)\n{\n    return real(a) * imag(b) - imag(a) * real(b);\n}\n\nint is_orthogonal(P a1, P a2, P b1, P b2)\n{\n    return EQ(dot(a1 - a2, b1 - b2), 0.0);\n}\nint is_parallel(P a1, P a2, P b1, P b2)\n{\n    return EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\nint ccw(P a, P b, P c)\n{\n    b -= a;\n    c -= a;\n    if (cross(b, c) > 0)\n        return 1;\n    if (cross(b, c) < 0)\n        return -1;\n    if (dot(b, c) < 0)\n        return 2;\n    if (norm(b) < norm(c))\n        return -2;\n    return 0;\n}\nint main(void)\n{\n    int N;\n    cin >> N;\n    for (int i = 0; i < N; ++i)\n    {\n        double a, b, c, d, e, f, g, h;\n        cin >> a >> b >> c >> d >> e >> f >> g >> h;\n\n        P p0(a, b);\n        P p1(c, d);\n        P p2(e, f);\n        P p3(g, h);\n\n        if (EQ(cross(p1 - p0, p3 - p2), 0.0))\n            cout << \"2\" << endl;\n        else if (EQ(dot(p1 - p0, p3 - p2), 0.0))\n            cout << \"1\" << endl;\n        else\n            cout << \"0\" << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nclass Point\n{\npublic:\n  double x, y;\n\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator+(Point p) { return Point(x + p.x, y + p.y); }\n  Point operator-(Point p) { return Point(x - p.x, y - p.y); }\n  Point operator*(double a) { return Point(a * x, a * y); }\n  Point operator/(double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n\n  bool operator<(const Point &p) const\n  {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator==(const Point &p) const\n  {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b)\n{\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n  return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b)\n{\n  return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Vector a, Vector b)\n{\n  return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n  return isParallel(a1 - a2, b1 - b2);\n}\n\nint main()\n{\n  int q;\n  int x0, y0, x1, y1, x2, y2, x3, y3;\n  cin >> q;\n\n  for (int i = 0; i < q; i++)\n  {\n    scanf(\"%d %d %d %d %d %d %d %d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n    if (isOrthogonal(Point(x0, y0), Point(x1, y1),\n                     Point(x2, y2), Point(x3, y3)))\n    {\n      cout << 1 << endl;\n    }\n    else if (isParallel(Point(x0, y0), Point(x1, y1),\n                        Point(x2, y2), Point(x3, y3)))\n    {\n      cout << 2 << endl;\n    }\n    else\n    {\n      cout << 0 << endl;\n    }\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <cstring>\n#include <utility>\n#include <numeric>\n#include <complex>\n\nusing namespace std;\n\n// common\n#define X real()\n#define Y imag()\n\nusing Vector2 = complex<double>;\nusing Line = pair<Vector2, Vector2>;\nusing Segment = pair<Vector2, Vector2>;\nconst double EPS = 1e-10;\nconst double PI = 3.14159265359;\n\nbool isSame(double a, double b){\n    if(abs(a - b) < EPS){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n// struct\n\nstruct Circle{\n    Vector2 c;\n    double r;\n    Circle(Vector2 c, double r){\n        this->c = c;\n        this->r = r;\n    }\n};\n\n// Vector2\ndouble dot(Vector2 a, Vector2 b){\n    return (a.X * b.X + a.Y * b.Y);\n}\n\ndouble cross(Vector2 a, Vector2 b){\n    return (a.X * b.Y - a.Y * b.X);\n}\n\n// isOrthogonal\ndouble isArg90(Vector2 a, Vector2 b){\n    return isSame(dot(a, b), 0.0);\n}\n\ndouble isArg90(Line l1, Line l2){\n    return isArg90(l1.second - l1.first, l2.second - l2.first);\n}\n\n// isParallel\ndouble isArg180(Vector2 a, Vector2 b){\n    return isSame(cross(a, b), 0.0);\n}\n\ndouble isArg180(Line l1, Line l2){\n    return isArg180(l1.second - l1.first, l2.second - l2.first);\n}\n\nint main(){\n\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        int x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n        Segment s1(Vector2(x0, y0), Vector2(x1, y1));\n        Segment s2(Vector2(x2, y2), Vector2(x3, y3));\n\n        if(isArg180(s1, s2)){\n            cout << 2 << endl;\n        }\n        else if(isArg90(s1, s2)){\n            cout << 1 << endl;\n        }\n        else{\n            cout << 0 << endl;\n        }\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\ntypedef long long ll;\ntypedef long double ld;\n#define rep(i,a,b) for(register ll(i)=(ll)(a);(i)<=(ll)(b);++i)\nconst ll inf=1e9+7;\n#define y1 _y_1_\n#ifndef gc\n\t#define gc getchar\n#endif\n#ifndef pc\n\t#define pc putchar\n#endif\ninline ll read(){ll f=0,x=0;register char c=gc();while(!isdigit(c))f^=c=='-',c=gc();while(isdigit(c))x=(x<<3)+(x<<1)+(c^'0'),c=gc();return x=f?-x:x;}\ninline ll read(ll&x){ll f=0;x=0;register char c=gc();while(!isdigit(c))f^=c=='-',c=gc();while(isdigit(c))x=(x<<3)+(x<<1)+(c^'0'),c=gc();return x=f?-x:x;}\ninline void writeln(){pc('\\n');}\ninline void write(ll x){if(x<0)pc('-'),x=-x;if(x>9)write(x/10);pc(x%10+'0');}\ninline void writeln(const ll&x){write(x),pc('\\n');}\nusing namespace std;\nnamespace Computation_Geometry{\n\tconst ld eps=1e-6;\n\tstruct vec{\n\t\tld x,y;\n\t\tinline bool is_zero(){return (abs(x)<=eps)&(abs(y)<=eps);}\n\t\tinline void scan(){x=read(),y=read();}\n\t\tinline vec(){x=y=0;}\n\t\tinline vec(const ld&X,const ld&Y){x=X,y=Y;}\n\t\tinline friend vec operator +(const vec&A,const vec&B){return vec(A.x+B.x,A.y+B.y);}\n\t\tinline friend vec operator -(const vec&A,const vec&B){return vec(A.x-B.x,A.y-B.y);}\n\t\tinline ld len(){return sqrt(x*x+y*y);}\n\t\tinline ld len(const ll&X,const ll&Y){return sqrt((x-X)*(x-X)+(y-Y)*(y-Y));}\n\t\tinline ld k(){return (x==0)?inf:y/x;}\n\t\tinline ld k(const ll&X,const ll&Y){return (x==X)?inf:(y-Y)/(x-X);}\n\t\tinline friend ld Dot(const vec&A,const vec&B){return A.x*B.x+A.y*B.y;}\n\t\tinline friend ld Cross(const vec&A,const vec&B){return A.x*B.y-B.x*A.y;}\n\t\tinline friend ld Theta(vec A,vec B){return acos(Cross(A,B)/A.len()/B.len());}\n\t};\n\tstruct line{\n\t\tld A,B,C;\n\t\tinline line(){A=B=C=0;}\n\t\tinline line(const ld&_A,const ld&_B,const ld&_C){A=_A,B=_B,C=_C;}\n\t\tinline line(const ld&x1,const ld&y1,const ld&x2,const ld&y2){A=y2-y1,B=x1-x2,C=x2*y1-x1*y2;}\n\t\tinline line(const vec&_A,const vec&_B){A=_A.y-_B.y,B=_B.x-_A.x,C=Cross(_A,_B);}\n\t\tinline vec Vec(){return vec(A,B);}\n\t\tinline friend bool parallel(line A,line B){return abs(Cross(A.Vec(),B.Vec()))<=eps;}\n\t\tinline friend bool perpendicular(line A,line B){return abs(Dot(A.Vec(),B.Vec()))<=eps;}\n\t};\n}\nusing namespace Computation_Geometry;\nll Q;\nld x1,y1,x2,y2;\nline l1,l2;\nsigned main(){\n\tread(Q);while (Q--){\n\t\tx1=read(),y1=read(),x2=read(),y2=read();\n\t\tl1=line(x1,y1,x2,y2);\n\t\tx1=read(),y1=read(),x2=read(),y2=read();\n\t\tl2=line(x1,y1,x2,y2);\n\t\tif (parallel(l1,l2)) puts(\"2\");\n\t\telse if (perpendicular(l1,l2)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n\tfclose(stdin);fclose(stdout);return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <deque>\n#include <exception>\n#include <fstream>\n#include <functional>\n#include <iomanip>\n#include <ios>\n#include <iosfwd>\n#include <iostream>\n#include <istream>\n#include <iterator>\n#include <limits>\n#include <list>\n#include <locale>\n#include <map>\n#include <memory>\n#include <new>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <stdexcept>\n#include <streambuf>\n#include <string>\n#include <typeinfo>\n#include <utility>\n#include <valarray>\n#include <vector>\n#include <climits>\n#include <cstring>\n\n#define rep(i, m, n) for(int i=int(m);i<int(n);i++)\n#define all(c) begin(c),end(c)\n\ntemplate<typename T1, typename T2>\ninline void chmin(T1 &a, T2 b) { if (a > b) a = b; }\n\ntemplate<typename T1, typename T2>\ninline void chmax(T1 &a, T2 b) { if (a < b) a = b; }\n\ntypedef long long int ll;\nusing ll = long long int;\nusing ull = long long unsigned int;\nusing Int = long long int;\nusing namespace std;\n#define INF (1 << 30) - 1\n#define INFl (ll)5e15\n#define DEBUG 0\n#define dump(x)  cerr << #x << \" = \" << (x) << endl\n#define MOD 1000000007\n\n\n//edit\n\n\nnamespace Geometory {\n    const double EPS = 1e-10;\n\n    inline bool equals(double a, double b) {\n        return fabs(a - b) < EPS;\n    }\n\n    struct Point {\n        double x, y;\n\n        Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}\n\n        Point operator+(Point &p) {\n            return Point(x + p.x, y + p.y);\n        }\n\n        Point operator-(Point &p) {\n            return Point(x - p.x, y - p.y);\n        }\n\n        Point operator*(double k) {\n            return Point(x * k, y * k);\n        }\n\n        double norm() const {\n            return x * x + y * y;\n        }\n\n        double abs() const {\n            return sqrt(norm());\n        }\n\n        double dot(Point p) {\n            return x * p.x + y * p.y;\n        }\n\n        double cross(Point p) {\n            return x * p.y - y * p.x;\n        }\n\n        bool operator<(const Point &p) const {\n            return x != p.x ? x < p.x : y < p.y;\n        }\n\n        bool operator==(const Point &p) const {\n            return equals(x, p.x) && equals(y, p.y);\n//            return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n        }\n\n\n    };\n\n    using Vector = Point;\n\n    struct Segment {\n        Point p1, p2;\n\n        Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n\n        Segment(double x1, double y1, double x2, double y2) : p1(x1, y1), p2(x2, y2) {}\n    };\n\n    using Line = Segment;\n\n\n    double norm(Vector p) {\n        return p.x * p.x + p.y * p.y;\n    }\n\n    double abs(Vector a) {\n        return sqrt(norm(a));\n    }\n\n    double dot(Vector a, Vector b) {\n        return a.dot(b);\n    }\n\n    double cross(Vector a, Vector b) {\n        return a.cross(b);\n    }\n\n    //直行判定\n    bool is_orthogonal(Vector a, Vector b) {\n        return equals(dot(a, b), 0.0);\n    }\n\n    bool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n        return is_orthogonal(a1 - a2, b1 - b2);\n    }\n\n    bool is_orthogonal(Segment s1, Segment s2) {\n        return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n    }\n\n    //平行判定\n    bool is_parallel(Vector a, Vector b) {\n        return equals(cross(a, b), 0.0);\n    }\n\n    bool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n        return is_parallel(a1 - a2, b1 - b2);\n    }\n\n    bool is_parallel(Segment s1, Segment s2) {\n        return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n    }\n\n\n    struct Circle {\n        Point c;\n        double r;\n\n        Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n    };\n\n    using Polygon = vector<Point>;\n\n    std::ostream &operator<<(std::ostream &os, const Point &p) {\n        os << \"(\" << p.x << \", \" << p.y << \")\" << endl;\n        return os;\n    }\n\n};\n\nusing namespace Geometory;\n\n\nclass Solve {\npublic:\n    void solve() {\n        Int q;\n        cin >> q;\n        while (q--) {\n            Int x1, x2, x3, x4;\n            Int y1, y2, y3, y4;\n            cin >> x1 >> y1 >> x2 >> y2;\n            Segment s1(x1, y1, x2, y2);\n            cin >> x3 >> y3 >> x4 >> y4;\n            Segment s2(x3, y3, x4, y4);\n\n            if (is_orthogonal(s1, s2)) {\n                cout << \"1\" << endl;\n            } else if (is_parallel(s1, s2)) {\n                cout << \"2\" << endl;\n            } else {\n                cout << \"0\" << endl;\n            }\n        }\n    }\n\n};\n\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(10);\n\n    Solve().solve();\n\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n\n#define REP(i,num) for(int i=0;i<(num);++i)\n#define ALL(c) c.begin(),c.end()\n#define PRINTALL(c) for(auto& x:c){cout<<x<<' ';}cout<<endl;\n#define PAIRCOMP(c,comp) [](const pair<ll,ll>& lhs,const pair<ll,ll>& rhs){return lhs.c comp rhs.c;}\n\nusing namespace std;\nusing ll = long long;\n\nconstexpr ll atcoder_mod = 1e9+7;\n\ntemplate<typename T=int>\nT in(){T x; cin >> x; return (x);}\ntemplate<typename T=int,typename C=vector<T>>\nC vecin(int N){C x(N);REP(i,N){x[i]=in<T>();}return move(x);}\n\nvoid vout(){cout << endl;}\ntemplate<typename Head,typename... Tail>\nvoid vout(Head&& h,Tail&&... t){cout << ' ' << h;vout(forward<Tail>(t)...);}\nvoid out(){cout << endl;}\ntemplate<typename Head,typename... Tail>\nvoid out(Head&& h,Tail&&... t){cout << h;vout(forward<Tail>(t)...);}\n\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tauto Q=in();\n\tREP(i,Q){\n\t\tauto x1=in(),y1=in(),x2=in(),y2=in();\n\t\tauto x3=in(),y3=in(),x4=in(),y4=in();\n\t\tdouble dx1 = x2-x1,dy1 = y2-y1;\n\t\tdouble norm = hypot(dx1,dy1);\n\t\tdx1/=norm,dy1/=norm;\n\t\tdouble dx2 = x4-x3,dy2 = y4-y3;\n\t\tnorm = hypot(dx2,dy2);\n\t\tdx2/=norm,dy2/=norm;\n\n\t\tdouble inner = dx1*dx2+dy1*dy2;\n\t\tif(abs(inner)<=1e-10){\n\t\t\tout(1);\n\t\t}\n\t\telse if(abs(inner)>=1.0-1e-10){\n\t\t\tout(2);\n\t\t}\n\t\telse out(0);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define int long long\n#define endl '\\n'\n#define FOR(i, a, n) for (int i = (a); i < (n); ++i)\n#define REP(i, n) FOR(i, 0, n)\nusing namespace std;\n\nusing T = double;\nconst T EPS = 1e-10;\nT torad(int deg) {return (T)(deg) * M_PI / 180;}\nT todeg(T ang) {return ang * 180 / M_PI;}\n\n/* Point */\nusing P = complex<T>;\n#define x real()\n#define y imag()\ntemplate <typename T> inline bool eq(T p, T q) { return abs(p - q) < EPS; }\ninline int sgn(T x) { return (T(0) < x) - (x < T(0)); }\ninline T dot(P v, P w) { return (conj(v) * w).x; }\ninline T cross(P v, P w) { return (conj(v) * w).y; }\ninline bool isOrth(P v, P w) { return dot(v, w) == 0; }\ninline bool isPara(P v, P w) { return cross(v, w) == 0; }\ninline P unit(P v) { return v / abs(v); }\ninline P translate(P p, P v) { return p + v; }\ninline P scale(P p, P c, T k) { return c + (p - c) * k; }\ninline P rot(P p, T a) { return p * polar(1.0, a); }\ninline P rot90(P p) { return {-p.y, p.x}; }\ninline T orient(P a, P b, P c) { return cross(b - a, c - a); }\nistream& operator>>(istream& is, P& p) { T xx, yy; is >> xx >> yy; p = P(xx, yy); return is; }\nbool cmpX(const P& a, const P& b) { return a.x != b.x ? a.x < b.x : a.y < b.y; }\nnamespace std {\n    bool operator < (const P& a, const P& b) { return cmpX(a, b); }\n}\n\nP linearTransform(P p, P q, P fp, P fq, P r) {\n    return fp + (r - p) * (fq - fp) / (q - p);\n}\n\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if (cross(b, c) > 0) return +1;      // counter clockwise\n    if (cross(b, c) < 0) return -1;      // clockwise\n    if (dot(b, c) < 0) return +2;        // c--a--b on line\n    if (norm(b) < norm(c)) return -2;    // a--b--c on line or a==b\n    return 0;                            // a--c--b on line or a==c or b==c\n}\n\nT angle(P v, P w) {\n    T cosTheta = dot(v, w) / abs(v) / abs(w);\n    return acos(max(-1.0, min(1.0, cosTheta)));\n}\nT orientedAngle(P a, P b, P c) {\n    if (orient(a, b, c) >= 0) return angle(b - a, c - a);\n    return 2 * M_PI - angle(b - a, c - a);\n}\nbool inAngle(P a, P b, P c, P p) {\n    assert(abs(orient(a, b, c)) != 0);\n    if (orient(a, b, c) < 0) swap(b, c);\n    return orient(a, b, p) >= 0 && orient(a, c, p) <= 0;\n}\n\n// polar sort\nbool half(P p) {\n    assert(p.x != 0 || p.y != 0);\n    return p.y > 0 || (p.y == 0 && p.x < 0);\n}\nvoid polarSort(vector<P>& v, P o = P(0.0, 0.0)) {\n    sort(v.begin(), v.end(), [&](P v, P w) {\n        return make_tuple(half(v - o), 0, norm(v - o)) <\n            make_tuple(half(w - o), cross(v - o, w - o), norm(w - o));\n    });\n}\n\n/* Line */\nstruct L : array<P, 2> {\n    P v; T c;\n    L(P a = P(0.0, 0.0), P b = P(0.0, 0.0)) : array<P, 2>({a, b}), v(b - a), c(cross(v, a)) {}\n    T side(P p) { return cross(v, p) - c; }\n    P proj(P p) { return p - rot90(v) * side(p) / norm(v); }\n    P refl(P p) { return p - rot90(v) * T(2) * side(p) / norm(v); }\n    friend istream& operator>>(istream& is, L& l) { P a, b; is >> a >> b; l = L(a, b); return is; }\n    friend ostream& operator<<(ostream& os, const L& l) { return os << '{' << l[0] << \", \" << l[1] << '}'; }\n};\n\n/* Circle */\nstruct C : P {\n    T r;\n    C(P p = P(0.0, 0.0), T r = 0.0) : P(p), r(r) {}\n    friend ostream& operator<<(ostream& os, const C& c) { return os << '(' << c.x << \", \" << c.y << \", \" << c.r << ')'; }\n};\n\nP circumCenter(P a, P b, P c) {\n    b -= a, c -= a;\n    assert(cross(b, c) != 0);\n    return a + rot90(b * norm(c) - c * norm(b)) / cross(b, c) / T(2);\n}\n\nvector<P> tangentPoints(C c, P p) {\n    if (eq(abs(p - c), c.r)) return vector<P>{p};\n    vector<P> res;\n    T t = acos(c.r / abs(p - c));\n    P q = (p - c) / abs(p - c) * c.r;\n    res.push_back(c + q * polar(1.0, t));\n    res.push_back(c + q * polar(1.0, -t));\n    sort(res.begin(), res.end(), cmpX);\n    return res;\n}\n\nvector<L> tangentLines(C c1, C c2, bool inner) {\n    if (inner) c2.r = -c2.r;\n    vector<L> res;\n    P d = c2 - c1;\n    T dr = c1.r - c2.r, d2 = norm(d), h2 = d2 - dr * dr;\n    if (d2 == 0 || h2 < 0) { assert(h2 != 0); return res; }\n    for (T sign : {-1, 1}) {\n        P v = (d * dr + rot90(d) * sqrt(h2) * sign) / d2;\n        res.emplace_back(c1 + v * c1.r, c2 + v * c2.r);\n    }\n    return res;\n}\n\n// intersect\nbool isInterPL(P p, L l) { return (ccw(l[0], l[1], p) != 1); }\nbool isInterPS(P p, L s) { return (ccw(s[0], s[1], p) == 0); }\nbool isInterLL(L l, L m) { return (!isPara(l.v, m.v)); }\nbool isInterLS(L l, L s) {\n    if (eq(s[0], s[1])) return isInterPL(s[0], l);\n    return (ccw(l[0], l[1], s[0]) * ccw(l[0], l[1], s[1]) <= 0);\n}\nbool isInterSS(L s, L t) {\n    if (eq(s[0], s[1])) return isInterPL(s[0], t);\n    if (eq(t[0], t[1])) return isInterPL(t[0], s);\n    return (ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n            ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0);\n}\nint isInterCC(C a, C b) {\n    T d = abs(b - a);\n    if (a == b && a.r == b.r) return 0;         // ∞ cp (A = B)\n    if (a.r + d - b.r < -EPS) return +1;        // 0 cp (A in B)\n    if (b.r + d - a.r < -EPS) return -1;        // 0 cp (B in A)\n    if (abs(a.r + d - b.r) < EPS) return +2;    // 1 cp (A in B)\n    if (abs(b.r + d - a.r) < EPS) return -2;    // 1 cp (B in A)\n    if (abs(a.r + b.r - d) < EPS) return 3;     // 1 cp (outside)\n    if (a.r + b.r - d < -EPS) return 4;         // 0 cp (outside)\n    return 5;                                   // 2 cp\n}\n \n// distance\nT distancePL(P p, L l) { return (abs(p - l.proj(p))); }\nT distancePS(P p, L s) {\n    P h = s.proj(p);\n    if (isInterPS(h, s)) return abs(p - h);\n    return min(abs(p - s[0]), abs(p - s[1]));\n}\nT distanceLL(L l, L m) {\n    if (isInterLL(l, m)) return T(0);\n    return distancePL(m[0], l);\n}\nT distanceLS(L l, L s) {\n    if (isInterLS(l, s)) return 0;\n    return min(distancePL(s[0], l), distancePL(s[1], l));\n}\nT distanceSS(L s, L t) {\n    if (isInterSS(s, t)) return 0;\n    return min({distancePS(s[0], t), distancePS(s[1], t), distancePS(t[0], s), distancePS(t[1], s)});\n}\n\n// crosspoint\nvector<P> crosspointLL(L l, L m) {\n    if (!isInterLL(l, m)) return vector<P>();\n    vector<P> res;\n    T d = cross(m[1] - m[0], l[1] - l[0]);\n    res.push_back(l[0] + (l[1] - l[0]) * cross(m[1] - m[0], m[1] - l[0]) / d);\n    return res;\n}\nvector<P> crosspointLS(L l, L s) {\n    if (!isInterLS(l, s)) return vector<P>();\n    vector<P> res;\n    T d = cross(s[1] - s[0], l[1] - l[0]);\n    res.push_back(l[0] + (l[1] - l[0]) * cross(s[1] - s[0], s[1] - l[0]) / d);\n    return res;\n}\nvector<P> crosspointLC(L l, C c) {\n    if (abs(c - l.proj(c)) > c.r) return vector<P>();\n    vector<P> res;\n    T d = distancePL(c, l), h2 = c.r * c.r - d * d;\n    assert(h2 >= 0);\n    P p = l.proj(c), h = l.v * sqrt(h2) / abs(l.v);\n    res.push_back(p - h);\n    if (abs(h) > 0) res.push_back(p + h);\n    return res;\n}\nvector<P> crosspointSS(L s, L t) {\n    if (!isInterSS(s, t)) return vector<P>();\n    vector<P> res;\n    if (unit(s.v) != unit(t.v)) {\n        T d = cross(t[1] - t[0], s[1] - s[0]);\n        res.push_back(s[0] + (s[1] - s[0]) * cross(t[1] - t[0], t[1] - s[0]) / d);\n    } else {\n        if (ccw(s[0], s[1], t[0]) == 0) res.push_back(t[0]);\n        if (ccw(s[0], s[1], t[1]) == 0) res.push_back(t[1]);\n        if (ccw(t[0], t[1], s[0]) == 0) res.push_back(s[0]);\n        if (ccw(t[0], t[1], s[1]) == 0) res.push_back(s[1]);\n    }\n    return res;\n}\nvector<P> crosspointSC(L s, C c) {\n    if (abs(c - s.proj(c)) > c.r) return vector<P>();\n    vector<P> res;\n    T d = distancePL(c, s), h2 = c.r * c.r - d * d;\n    assert(h2 >= 0);\n    P p = s.proj(c), h = s.v * sqrt(h2) / abs(s.v);\n    if (ccw(s[0], s[1], p - h) == 0) res.push_back(p - h);\n    if (abs(h) > 0 && ccw(s[0], s[1], p + h) == 0) res.push_back(p + h);\n    return res;\n}\nvector<P> crosspointCC(C c1, C c2) {\n    P d = c2 - c1; T d2 = norm(d);\n    if (d2 == 0) { assert(c1.r != c2.r); return vector<P>(); }\n    vector<P> res;\n    T pd = (d2 + c1.r * c1.r - c2.r * c2.r) / 2;\n    T h2 = c1.r * c1.r - pd * pd / d2;\n    if (h2 >= 0) {\n        P p = c1 + d * pd / d2, h = rot90(d) * sqrt(h2 / d2);\n        res.push_back(p - h);\n        if (abs(h) > 0) res.push_back(p + h);\n    }\n    return res;\n}\n\n/* Polygon */\n// p[0] has minimum y and p is counterclockwise\nvector<P> makeStandard(vector<P> p) {\n    int n = p.size(), j = -1;\n    for (int i = 0; i < n; ++i) {\n        if (j == -1 || p[i].y < p[j].y) j = i;\n    }\n    vector<P> res;\n    if (p[(j - 1 + n) % n].x <= p[j].x && p[j].x <= p[(j + 1) % n].x) {\n        for (int i = 0; i < n; ++i) {\n            res.push_back(p[(i + j) % n]);\n        }\n    } else {\n        for (int i = 0; i < n; ++i) {\n            res.push_back(p[(i - j + n) % n]);\n        }\n    }\n    return res;\n}\nbool isConvex(vector<P> p) {\n    p = makeStandard(p);\n    for (int i = 0, n = p.size(); i < n; ++i) {\n        P a = p[i], b = p[(i + 1) % n], c = p[(i + 2) % n];\n        if (orient(a, b, c) < 0) return false;\n        if (b.y != p[0].y && b.y < min(a.y, c.y)) return false;\n        if (b.y != p[0].y && a.y == b.y && b.y == c.y && a.x <= b.x && b.x <= c.x) return false;\n    }\n    return true;\n}\nT areaTriangle(P a, P b, P c) {\n    return abs(cross(b - a, c - a)) / T(2);\n}\nbool above(P a, P p) { return p.y >= a.y; }\nbool crossesRay(P a, P p, P q) {\n    return (above(a, q) - above(a, p)) * orient(a, p, q) > 0;\n}\n// if strict, returns false when A is on the boundary\nbool inPolygon(vector<P> p, P a, bool strict = true) {\n    int numCrossing = 0;\n    for (int i = 0, n = p.size(); i < n; ++i) {\n        if (ccw(p[i], p[(i + 1) % n], a) == 0)\n            return !strict;\n        numCrossing += crossesRay(a, p[i], p[(i + 1) % n]);\n    }\n    return numCrossing & 1;\n}\nvector<P> convexHull(vector<P> p) {\n    int n = p.size(), k = 0;\n    sort(p.begin(), p.end(), cmpX);\n    vector<P> res(2 * n);\n    for (int i = 0; i < n; res[k++] = p[i++])\n        while (k >= 2 && ccw(res[k - 2], res[k - 1], p[i]) <= 0) --k;\n    for (int i = n - 2, t = k + 1; i >= 0; res[k++] = p[i--])\n        while (k >= t && ccw(res[k - 2], res[k - 1], p[i]) <= 0) --k;\n    res.resize(k - 1);\n    return res;\n}\nvector<P> convexHullCollinearOK(vector<P> p) {\n    int n = p.size(), k = 0;\n    sort(p.begin(), p.end(), cmpX);\n    vector<P> res(2 * n);\n    for (int i = 0; i < n; res[k++] = p[i++])\n        while (k >= 2 && ccw(res[k - 2], res[k - 1], p[i]) == -1) --k;\n    for (int i = n - 2, t = k + 1; i >= 0; res[k++] = p[i--])\n        while (k >= t && ccw(res[k - 2], res[k - 1], p[i]) == -1) --k;\n    res.resize(k - 1);\n    return res;\n}\n\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout << fixed << setprecision(10);\n\n    int q;\n    cin >> q;\n    REP (i, q) {\n        L l, m;\n        cin >> l >> m;\n        if (isPara(l.v, m.v)) cout << \"2\" << endl;\n        else if (isOrth(l.v, m.v)) cout << \"1\" << endl;\n        else cout << \"0\" << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define _ ios_base::sync_with_stdio(0);cin.tie(0);\n#define REP(i,n) for(int i=0;i<(int)(n);i++)\n\nusing namespace std;\n\ntypedef long double ld;\ntypedef complex<ld> Point;\nconst ld eps = 1e-8, pi = acos(-1.0);\nbool eq(ld a, ld b){return (abs(b-a)<eps);}\nld dot(Point a, Point b){return real(conj(a)*b);}\nld cross(Point a, Point b){ return imag(conj(a)*b);}\n\nclass Line{\npublic:\n  Point a,b;\n};\n\nbool Parallel(const Line& l1, const Line& l2){\n  return eq(cross(l1.b-l1.a,l2.b-l2.a), 0);\n}\n\nbool Orthogonal(const Line& l1, const Line& l2){\n  return eq(dot(l1.b-l1.a,l2.b-l2.a), 0);\n}\n\nint result(const Line& l1, const Line& l2){\n  if(Parallel(l1,l2)){return 2;}\n  if(Orthogonal(l1,l2)){return 1;}\n  return 0;\n}\n\nint main(){\n  int q;cin>>q;\n  REP(i,q){\n    ld real, imag;\n    Line s1,s2;\n    cin>>real>>imag;\n    s1.a = Point(real,imag);\n    cin>>real>>imag;\n    s1.b = Point(real,imag);\n    cin>>real>>imag;\n    s2.a = Point(real,imag);\n    cin>>real>>imag;\n    s2.b = Point(real,imag);\n    cout<<result(s1,s2)<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for(int i = 0; i < (n); ++i)\nusing namespace std;\n\nconst double EPS = 1e-10;\nbool eq(double a, double b) {return fabs(a - b) < EPS;}\n\nstruct Point {\n    double x, y;\n    Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}\n    Point operator + (Point &p);\n    Point operator - (Point &p);\n    Point operator * (double k);\n    Point operator / (double k);\n    bool operator == (const Point &p) const;\n    double norm();\n    double abs();\n    void print();\n} typedef Vec;\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(double x1, double y1, double x2, double y2) : p1(Point(x1, y1)), p2(Point(x2, y2)) {}\n} typedef Line;\n\nstruct Circle {\n    Point o; double r;\n    Circle(Point o, double r) : o(o), r(r) {}\n    Circle(double x, double y, double r) : o(Point(x, y)), r(r) {}\n};\n\ndouble norm(Vec a);\ndouble abs(Vec a);\n\ndouble dot(Vec a, Vec b);\ndouble cross(Vec a, Vec b);\n\nint ccw(Point a, Point b, Point c);\n\nbool isOrthogonal(Vec a, Vec b);\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2);\nbool isOrthogonal(Segment s1, Segment s2);\n\nbool isParallel(Vec a, Vec b);\nbool isParallel(Point a1, Point a2, Point b1, Point b2);\nbool isParallel(Segment s1, Segment s2);\n\nPoint project(Segment s, Point p);\nPoint reflect(Segment s, Point p);\n\nint main() {\n    int q; cin >> q;\n    while(q--) {\n        double x, y, x2, y2;\n        cin >> x >> y >> x2 >> y2;\n        Line s(x, y, x2, y2);\n        cin >> x >> y >> x2 >> y2;\n        Line s2(x, y, x2, y2);\n        if(isParallel(s, s2)) cout << 2 << '\\n';\n        else if(isOrthogonal(s, s2)) cout << 1 << '\\n';\n        else cout << 0 << '\\n';\n    }\n    return 0;\n}\n\nPoint Point::operator + (Point &p) {return Point(x + p.x, y + p.y);}\nPoint Point::operator - (Point &p) {return Point(x - p.x, y - p.y);}\nPoint Point::operator * (double k) {return Point(x * k, y * k);}\nPoint Point::operator / (double k) {return Point(x / k, y / k);}\nbool Point::operator == (const Point &p) const {return eq(x, p.x) && eq(y, p.y);}\ndouble Point::norm() {return x * x + y * y;}\ndouble Point::abs() {return sqrt(norm());}\nvoid Point::print() {printf(\"%.10lf %.10lf\\n\", x, y);}\n\ndouble norm(Vec a) {return a.x * a.x + a.y * a.y;}\ndouble abs(Vec a) {return sqrt(norm(a));}\n\ndouble dot(Vec a, Vec b) {return a.x * b.x + a.y * b.y;}\ndouble cross(Vec a, Vec b) {return a.x * b.y - a.y * b.x;}\n\nint ccw(Point a, Point b, Point c) {\n    b = b - a;\n    c = c - a;\n    if(cross(b, c) > EPS) return 1; // COUNTER_CLOCKWISE\n    if(cross(b, c) < -EPS) return -1; // CLOCKWISE\n    if(dot(b, c) < -EPS) return 2; // ONLINE_BACK\n    if(norm(b) < norm(c)) return -2; // ONLINE_FRONT\n    return 0; // ON_SEGMENT\n}\n\nbool isOrthogonal(Vec a, Vec b) {return eq(dot(a, b), 0.0);}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {return isOrthogonal(a1 - a2, b1 - b2);}\nbool isOrthogonal(Segment s1, Segment s2) {return eq(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\nbool isParallel(Vec a, Vec b) {return eq(cross(a, b), 0.0);}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {return isParallel(a1 - a2, b1 - b2);}\nbool isParallel(Segment s1, Segment s2) {return eq(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\nPoint project(Segment s, Point p) {\n    Vec base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return base * r + s.p1;\n};\nPoint reflect(Segment s, Point p) {return (project(s, p) - p) * 2.0 + p;}\n\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<algorithm>\n#include<string>\n#include<iomanip>\n#include<cmath>\n#include<vector>\n#include<deque>\n#include<queue>\n#include<map>\n#include<set>\n#define ll long long\n#define str string\n#define ld long double\n#define vec vector\n#define vll vec<ll>\n#define rep(i,a,b) for(ll i=a;i<b;i++)\n#define rrep(i,b,a) for(ll i=b;i>=a;i--)\n#define ALL(a) a.begin(),a.end()\n#define rALL(a) a.rbegin(),a.rend()\n#define kai \"\\n\"\n#define yuque priority_queue\n#define pub push_back\n#define pob pop_back\n#define puf push_front\n#define pof pop_front\n#define mie min_element\n#define mae max_element\n#define tos to_string\n#define sep setprecision\n#define lob lower_bound\n#define upb upper_bound\n#define nep next_permutation\n#define MOD 1000000007ll\n#define MIN (1e-10)\n#define equal(a,b) (abs((a)-(b))<MIN)\n#define v2 ten\n#define chokusen senbun\n#define kakkei vec<ten>\nusing namespace std;\nvoid solve();\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tcout<<fixed;\n\tsolve();\n}\nstruct pea{\n\tll f,s;\n\tbool operator<(const pea &p)const{\n\t\treturn f!=p.f?f<p.f:s<p.s;\n\t};\n};\nstruct tri{\n\tll f,s,t;\n\tbool operator<(const tri &p)const{return f<p.f;};\n};\nclass ten{\npublic:\n\tld x,y;\n\tten operator+(ten p){return{x+p.x,y+p.y};}\n\tten operator-(ten p){return{x-p.x,y-p.y};}\n\tten operator*(ld k){return{k*x,k*y};}\n\tten operator/(ld k){return{x/k,y/k};}\n\tld abs(){return sqrt(abs2());}\n\tld abs2(){return x*x+y*y;};\n\tbool operator<(const ten &p)const{return x!=p.x?x<p.x:y<p.y;};\n\tbool operator==(const ten &p)const{\n\t\treturn (-MIN<x-p.x)&&(x-p.x<MIN)&&(-MIN<y-p.y)&&(y-p.y<MIN);\n\t};\n\tld naiseki(v2 b){return x*b.x+y*b.y;}\n\tld gaiseki(v2 b){return x*b.y-y*b.x;}\n};\nstruct senbun{ten p1,p2;};\nstruct en{ten o;ld r;};\nvoid solve(){\n\tll n;cin>>n;\n\trep(i,0,n){\n\t\tv2 s1,s2;\n\t\tld a,b,c,d;\n\t\tcin>>a>>b>>c>>d;\n\t\ts1={a-c,b-d};\n\t\tcin>>a>>b>>c>>d;\n\t\ts2={a-c,b-d};\n\t\tif(s1.gaiseki(s2)==0)cout<<2<<kai;\n\t\telse if(s1.naiseki(s2)==0)cout<<1<<kai;\n\t\telse cout<<0<<kai;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cassert>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstring>\n#include <ctime>\n#include <iomanip>\n#include <map>\n#include <queue>\n#include <set>\n#include <tuple>\nusing namespace std;\ntypedef long long ll;\n#define _ << \" \" <<\n#define all(X) (X).begin(), (X).end()\n#define len(X) (X).size()\n#define Pii pair<int, int>\n#define Pll pair<ll, ll>\n#define Tiii tuple<int, int, int>\n#define Tlll tuple<ll, ll, ll>\n\ndouble eps = 1e-8;\n\nstruct point {\n    double x, y;\n    point operator+(const point &p) {\n        return {x + p.x, y + p.y};\n    }\n    point operator-(const point &p) {\n        return {x - p.x, y - p.y};\n    }\n};\n\nstruct line {\n    // ax + by + c = 0\n    double a, b, c;\n};\n\nstruct circle {\n    point p;\n    double r;\n};\n\ndouble distance(point A, point B, int deg) {\n    point C = B - A;\n    return pow(C.x*C.x + C.y*C.y, 0.5 * deg);\n}\n\nline line_2points(point P, point Q) {\n    return {P.y - Q.y, Q.x - P.x, P.x*Q.y - P.y*Q.x};\n}\n\nbool line_intersection(line l, line m) {\n\n}\n\nvector<point> circle_intersection(circle A, circle B) {\n    vector<point> ret;\n    point X = A.p;\n    B.p = B.p - A.p;\n    A.p = {0, 0};\n\n    if (distance(A.p, B.p, 2) - pow(A.r + B.r, 2) > eps) return ret;\n\n    double K = (B.p.x*B.p.x + B.p.y*B.p.y + A.r*A.r - B.r*B.r) / 2;\n    double SQ = (B.p.x*B.p.x + B.p.y*B.p.y)*A.r*A.r - K * K;\n    double DS = distance(A.p, B.p, 2);\n    //cerr << K _ SQ _ DS << endl;\n    if (abs(SQ) < eps) {\n        ret.push_back({K*B.p.x / DS + X.x, K*B.p.y / DS + X.y});\n        return ret;\n    }\n    ret.push_back({(K*B.p.x + B.p.y*sqrt(SQ)) / DS + X.x,\n                   (K*B.p.y - B.p.x*sqrt(SQ)) / DS + X.y});\n    ret.push_back({(K*B.p.x - B.p.y*sqrt(SQ)) / DS + X.x,\n                   (K*B.p.y + B.p.x*sqrt(SQ)) / DS + X.y});\n    return ret;\n}\n \nint main() {\n    int q;\n    cin >> q;\n    while (q--) {\n        point p[4];\n        for (int i = 0; i < 4; i++) {\n            cin >> p[i].x >> p[i].y;\n        }\n        line s0 = line_2points(p[0], p[1]);\n        line s1 = line_2points(p[2], p[3]);\n        //cout << s0.a _ s0.b _ s0.c _ s1.a _ s1.b _ s1.c << endl;\n        if (abs(s0.a * s1.b - s0.b * s1.a) == 0) {\n            cout << 2 << endl;\n        }\n        else if (abs(s0.a * s1.a + s0.b * s1.b) == 0) {\n            cout << 1 << endl;\n        }\n        else cout << 0 << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i, a, b) for (int i = a; i < (int)(b); ++i)\n#define rrep(i, a, b) for (int i = b - 1; i >= (int)(a); --i)\n\nusing namespace std;\nusing ll = long long;\nusing vi = vector<int>;\nusing vll = vector<ll>;\nusing vd = vector<double>;\nusing vvi = vector<vi>;\n\nconstexpr int MOD = 1000000007;\n\nstruct Point {\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n    Point(const Point& p) : x(p.x), y(p.y) {}\n\n    Point operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point& p) const { return Point(x + p.x, y + p.y); }\n    Point operator*(double k) const { return Point(k * x, k * y); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n\n    bool operator<(const Point& p) const { return x != p.x ? x < p.x : y < p.y; }\n    bool operator==(const Point& p) const { return fabs(x - p.x) < 1e-10 && fabs(y - p.y) < 1e-10; }\n\n    static double norm(const Point& p) { return sqrt(p.x * p.x + p.y * p.y); }\n    static double dot(const Point& p1, const Point& p2) { return p1.x * p2.x + p1.y * p2.y; }\n    static double cross(const Point& p1, const Point& p2) { return p1.x * p2.y - p1.y * p2.x; }\n};\ntypedef Point Vector;\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n\n    int q;\n    cin >> q;\n\n    rep(i, 0, q) {\n        int x1, y1, x2, y2;\n        cin >> x1 >> y1 >> x2 >> y2;\n        Vector v1(x2 - x1, y2 - y1);\n        cin >> x1 >> y1 >> x2 >> y2;\n        Vector v2(x2 - x1, y2 - y1);\n        double d = Vector::dot(v1, v2);\n        double c = Vector::cross(v1, v2);\n        if (d == 0) {\n            cout << 1 << endl;\n        } else if (c == 0) {\n            cout << 2 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// CGL_2_A\n#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nusing namespace std;\n\nstruct vec{\n\tint x;\n\tint y;\n};\n\nstruct point{\n\tint x;\n\tint y;\n};\n\ndouble inner_p(struct vec a, struct vec b){\n\treturn (a.x*b.x + a.y*b.y);\n}\n\ndouble cross_p(struct vec a, struct vec b){\n\treturn (a.x*b.y - a.y*b.x);\n}\n\nint main(){\n\tpoint p[4];\n\tvec v[2];\n\tint q;\n\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>p[0].x>>p[0].y>>p[1].x>>p[1].y>>p[2].x>>p[2].y>>p[3].x>>p[3].y;\n\n\t\tfor(int j=0;j<2;j++){\n\t\t\tv[j].x = p[2*j+1].x - p[2*j].x;\n\t\t\tv[j].y = p[2*j+1].y - p[2*j].y;\n\t\t}\n\n\t\tif(cross_p(v[0], v[1]) == 0)\n\t\t\tcout<<\"2\"<<endl;\n\t\telse if(inner_p(v[0], v[1]) == 0)\n\t\t\tcout<<\"1\"<<endl;\n\t\telse\n\t\t\tcout<<\"0\"<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#include<array>\n#include<vector>\n#include<cstdio>\nusing namespace std;\n\nconst double EPS = 1e-10;\ntemplate<class T>\nbool eq(const T& a, const T& b) {return abs(a - b) < EPS;}\n\ntypedef  complex<double> point;\n\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\ntypedef array<point, 2> line;\n\npoint projection(const line& l, const point& p) {\n\tdouble t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\n\npoint reflection(const line& l, const point& p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\n typedef array<point, 2> line;\n//using line = array<point, 2>;\n/*\n * 平行かどうか\n */\nbool is_parallel(const line& s, const line& t) {\n\treturn eq(cross(s[0] - s[1], t[0] - t[1]), 0.0);\n}\n\nbool is_orthogonal(const line& s, const line& t) {\n\treturn eq(dot(s[0] - s[1], t[0] - t[1]), 0.0);\n}\n\n\n\nint main()\n{\n  int q;\n  cin>>q;\n  for(;q--;)\n    {\n      line l1,l2;\n      double x,y;\n      cin>>x>>y;\n      l1[0]=point(x,y);\n      cin>>x>>y;\n      l1[1]=point(x,y);\n\n      cin>>x>>y;\n      l2[0]=point(x,y);\n      cin>>x>>y;\n      l2[1]=point(x,y);\n\n      int ans=0;\n      if(is_parallel(l1,l2))\n\tans=2;\n      else if(is_orthogonal(l1,l2))\n\tans=1;\n      cout<<ans<<endl;\n      //      printf(\"%.10lf %.10lf\\n\",ans.real(),ans.imag());\n    }\n}"
  },
  {
    "language": "C++",
    "code": "/*<<head>> {{{*/\n#include <bits/stdc++.h>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <vector>\n#include <cstdio>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\nusing namespace std;\ntypedef double db;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\n#define dd(x) cout << #x << \" = \" << x << \", \"\n#define de(x) cout << #x << \" = \" << x << endl\n#define rep(i,a,b) for(int i=(a);i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;\n//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;\nconst int INF = 0x3f3f3f3f;     // -INF: 0xc0   abs(-INF) = INF + 1\nconst ll LINF = 0x3f3f3f3f3f3f3f3f;\n/*}}}*/                         // zr, zm\nconst int MOD = (int)1e9+7;     // when MOD = 1e9+7, inv2 = 500000004\nconst int N = (int)-1;\n\n// ------- 变量 ------- //\n\n/* 注意\n  1. 点、向量\n    1. 如果角度出现 -pi ，可以加上 2pi 修正为 pi\n    2. atan2(y, x) 的参数是浮点数时，可能出现 -pi ，如 atan2(-0.0, -1.0)\n  2. 线段、直线\n    1. 线段严格相交定义为：每条线段的两个端点落在另一条线段两边，形象来说，就是可以在图形里看到四个端点和一个交点\n*/\n\ntypedef db T;\nconst db eps = 1e-7, pi = acosl(-1.);\nint sgn(T x) { return (x > eps) - (x < -eps); }\nbool inMid(T a, T x, T b) { return sgn(a - x) * sgn(b - x) <= 0; }  // 数 x 在区间 [a, b] 内（包括边界）\n\n// 点、向量\nstruct P {\n    T x, y; P () {} P(T x, T y) : x(x), y(y) {}\n    P operator + (const P &b) const { return P(x + b.x, y + b.y); }  // 向量加\n    P operator - (const P &b) const { return P(x - b.x, y - b.y); }  // 向量减\n    T operator * (const P &b) const { return x * b.x + y * b.y; }    // 向量点积\n    T operator / (const P &b) const { return x * b.y - y * b.x; }    // 向量叉积\n    P operator * (const T &k) const { return P(x * k, y * k); }      // 向量数乘\n    P operator / (const T &k) const { return P(x / k, y / k); }      // 向量数除\n    bool operator < (const P &b) const { return sgn(x - b.x) ? x < b.x : y < b.y; }  // 左小右大，下小上大\n    bool operator == (const P &b) const { return !sgn(x - b.x) && !sgn(y - b.y); }   // 向量相等\n    P rot(T t) { return P(x * cos(t) - y * sin(t), x * sin(t) + y * cos(t)); }  // 向量逆时针旋转 t 弧度\n    P rot90() { return P(-y, x); }           // 向量逆时针旋转 90 度\n    db arg() const { return atan2(y, x); }   // 方位角 (-pi, pi]\n    T abs() { return sqrt(x * x + y * y); }  // 向量模长\n    T abs2() { return x * x + y * y; }       // 向量模长的平方\n    P unit() { return (*this) / abs(); }     // 单位向量\n    void scan() { db tx, ty; scanf(\"%lf%lf\", &tx, &ty); x = tx; y = ty; }  // 输入\n    void print() { printf(\"%.11lf %.11lf\\n\", x, y); }                      // 输出\n    P toR() { return (sgn(x) == -1 || !sgn(x) && sgn(y) == -1) ? (*this)*(-1) : (*this); }  // 若向量在 2 3 象限，则取其相反向量\n    bool isUp() const { return sgn(y) == 1 || !sgn(y) && sgn(x) == -1; }                    // 向量是否在 1 2 象限\n};\nT dis(P a, P b) { return (b - a).abs(); }   // 点 a 到点 b 的距离\nP symmetry(P p, P a) { return a + a - p; }  // 点 p 关于点 a 的中心对称点\nT cross(P o, P a, P b) { return (a - o) / (b - o); }         // 向量 oa 与 ob 的叉积\nint crossSgn(P o, P a, P b) { return sgn(cross(o, a, b)); }  // 向量 oa 与 ob 的叉积符号\ndb rad(P a, P b) { return atan2(a / b, a * b); }             // 向量 a 与 b 的夹角（弧度制）\nbool order(const P &a, const P &b) { return a.isUp() < b.isUp() || a.isUp() == b.isUp() && sgn(a/b) > 0; }  // 极角排序\n\n// 线段、直线\nstruct L { P s, t; L () {} L(P s, P t) : s(s), t(t) {} };\nbool onPS(P p, L a) { return sgn((a.t-a.s)/(p-a.s))==0 && sgn((p-a.s)*(p-a.t))<=0; }   // 点 p 是否在线段 st 上\nbool inRec(P p, L a) { return inMid(a.s.x, p.x, a.t.x) && inMid(a.s.y, p.y, a.t.y); }  // 点 p 在以直线 a 为对角线的矩形内\nP proj(P p, L a) { return (a.t-a.s) * ( (p-a.s) * (a.t-a.s) / (a.t-a.s).abs2() ) + a.s; }   // 点 p 关于直线 a 的投影点\nP reflect(P p, L a) { return proj(p, a) * 2 - p; }                                          // 点 p 关于直线 a 的对称点\nbool xSSr(const L &a, const L &b) {  // 线段 a 和线段 b 严格相交\n    T c1 = (a.t-a.s) / (b.s-a.s), c2 = (a.t-a.s) / (b.t-a.s);\n    T c3 = (b.t-b.s) / (a.s-b.s), c4 = (b.t-b.s) / (a.t-b.s);\n    return sgn(c1) * sgn(c2) < 0 && sgn(c3) * sgn(c4) < 0;\n}\nbool xSS(L a, L b) {                 // 线段 a 和线段 b 不严格相交\n    T c1 = (a.t-a.s) / (b.s-a.s), c2 = (a.t-a.s) / (b.t-a.s);\n    T c3 = (b.t-b.s) / (a.s-b.s), c4 = (b.t-b.s) / (a.t-b.s);\n    return sgn(c1) * sgn(c2) <= 0 && sgn(c3) * sgn(c4) <= 0 &&\n           sgn(max(a.s.x,a.t.x) - min(b.s.x,b.t.x)) >= 0 &&\n           sgn(max(b.s.x,b.t.x) - min(a.s.x,a.t.x)) >= 0 &&\n           sgn(max(a.s.y,a.t.y) - min(b.s.y,b.t.y)) >= 0 &&\n           sgn(max(b.s.y,b.t.y) - min(a.s.y,a.t.y)) >= 0;\n}\nbool xSL(L a, L b) {  // 线段 a 与直线 b 相交 ( 不严格 : <= ; 严格 : < )\n    return sgn( (b.t - b.s) / (a.s - b.s) ) * sgn( (b.t - b.s) / (a.t - b.s) ) <= 0;\n}\nP xLL(L a, L b) {  // 直线 a 和直线 b 的交点\n    T s1 = (b.t - b.s) / (a.s - b.s), s2 = -( (b.t - b.s) / (a.t - b.s) );\n    return (a.s * s2 + a.t * s1) / (s1 + s2);\n}\ndb disPL(P p, L a) { return fabs( (a.t-a.s) / (p-a.s) ) / (a.t-a.s).abs(); }  // 点 p 到直线 a 的距离\ndb disPS(P p, L a) {                                                          // 点 p 到线段 a 的距离\n    return sgn( (a.t-a.s) * (p-a.s) ) * sgn( (a.s-a.t) * (p-a.t) ) != 1\n           ? disPL(p, a) : min( (p-a.s).abs(), (p-a.t).abs() );\n}\ndb disSS(L a, L b){                                                           // 线段 a 到线段 b 的距离\n    if (xSS(a,b)) return 0;\n    return min( min( disPS(a.s,b), disPS(a.t,b) ), min( disPS(b.s,a), disPS(b.t,a) ) );\n}\ndb disLL(L a, L b) { return (a.t-a.s) / (b.t-b.s) ? 0 : disPL(a.s, b); }      // 直线 a 到直线 b 的距离\n\n// 多边形、凸包\ntypedef vector<P> polygon;\npolygon Convex(polygon A) {  // 求凸包，逆时针排序（ 内角 <180 : (<=) ; 内角 <=180 : (<) ）\n    int n = sz(A); if (n <= 1) return A;\n    sort(all(A));\n    polygon B;\n    for (int i = 0; i < n; B.pb(A[i++]))\n        while (sz(B) > 1 && crossSgn(B[sz(B)-2], B.back(), A[i]) < 0) B.pop_back();  // 更改这里的 <\n    for (int i = n - 2, t = sz(B); i >= 0; B.pb(A[i--]))\n        while (sz(B) > t && crossSgn(B[sz(B)-2], B.back(), A[i]) < 0) B.pop_back();  // 同上\n    B.pop_back(); return B;\n}\nT area(polygon A) {  // 多边形 A 的面积，整型可以返回面积的两倍，保持精度\n    T res = 0;\n    rep(i, 0, sz(A)) res += A[i] / A[ (i+1) % sz(A) ];\n    return fabs(res) / 2;\n}\nbool isConvex(polygon A) {  // 多边形 A 是否是凸包，要求 A 的点集按逆时针排序\n    rep(i, 0, 2) A.pb(A[i]);\n    rep(i, 0, sz(A)-2) if ( sgn( (A[i+1]-A[i]) / (A[i+2]-A[i]) ) < 0 ) return 0;\n    return 1;\n}\nint inPpolygon(P p, polygon A) {  // 点和多边形关系 ( -1 : on , 0 : out , 1 : in )\n    int res = 0;\n    rep(i, 0, sz(A)) {\n        P u = A[i], v = A[ (i+1) % sz(A) ];\n        if (onPS(p, L(u, v))) return -1;\n        T cross = sgn((v-u)/(p-u)), d1 = sgn(u.y-p.y), d2 = sgn(v.y-p.y);\n        if (cross > 0 && d1 <= 0 && d2 > 0) ++res;\n        if (cross < 0 && d2 <= 0 && d1 > 0) --res;\n    }\n    return res != 0;\n}\n\nstruct C {\n    P o; db r; C () {} C (P o, db r) : o(o), r(r) {}\n};\n\nC getC(P a,P b,P c){  // 三点确定一个圆 （ 三角形外接圆 ）\n    db a1 = b.x - a.x, b1 = b.y - a.y, c1 = (a1 * a1 + b1 * b1) / 2;\n    db a2 = c.x - a.x, b2 = c.y - a.y, c2 = (a2 * a2 + b2 * b2) / 2;\n    db d = a1 * b2 - a2 * b1;\n    P o = P(a.x + (c1 * b2 - c2 * b1) / d, a.y + (a1 * c2 - a2 * c1) / d);\n    return C(o, dis(a, o));\n}\n\nP p[3];\n\n// ------- 函数 ------- //\n\nvoid Init() {\n}\n\nint Solve() {\n    int q; scanf(\"%d\", &q);\n    while (q--) {\n        rep(i, 0, 4) p[i].scan();\n        if ((p[0] - p[1]) / (p[2] - p[3]) == 0) puts(\"2\");\n        else if ((p[0] - p[1]) * (p[2] - p[3]) == 0) puts(\"1\");\n        else puts(\"0\");\n    }\n    return 0;\n}\n\n// ------- main ------- //\n\nint main ()\n{\n    //ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n    //freopen(\"in.txt\", \"r\", stdin);\n    //freopen(\"out.txt\", \"w\", stdout);\n\n    //Pre();\n    //int t; scanf(\"%d\", &t); while (t--) {\n    //while (~scanf(\"%d\", &n)) {\n    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符\n        //if (n == 0) break;\n        //static int kase = 0; printf(\"Case %d: \", ++kase);\n        Init();\n        Solve();\n        //if (t) puts(\"\");\n    //}\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\n\nint sign(double x) {  //???????????°???????°???????????¢?\n    return abs(x) < EPS ? 0 : x < 0 ? -1 : 1;\n}\n\nstruct Point { //????????????\n    double x, y;\n    Point(double x=0.0, double y=0.0) : x(x), y(y) {}\n    Point operator + (const Point &rhs) const {  //????????????\n        return Point(x + rhs.x, y + rhs.y);\n    }\n    Point operator - (const Point &rhs) const {  //????????????\n        return Point(x - rhs.x, y - rhs.y);\n    }\n    Point operator * (double p) const {  //???????????\\??????\n        return Point(x * p, y * p);\n    }\n    Point operator / (double p) const {  //???????????\\??????\n        return Point(x / p, y / p);\n    }\n    bool operator < (const Point &rhs) const {  //??????????????????\n        return x < rhs.x || (x == rhs.x && y < rhs.y);\n    }\n    bool operator == (const Point &rhs) const {  //??????????????????\n        return sign(x - rhs.x) == 0 && sign(y - rhs.y) == 0;\n    }\n    void read() {\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print() {\n        printf(\"(%.2f, %.2f)\\n\", x, y);\n    }\n};\ntypedef Point Vector;  //???????????????\n\ndouble dot(Vector A, Vector B) {  //??????????§???????????????????????§??????????????§??????????????????????????????????????§????\n    return A.x * B.x + A.y * B.y;\n}\ndouble cross(Vector A, Vector B) {  //??????????§??????????????????????????§???¢???????????¢?§????????????????????????????????????????\n    return A.x * B.y - A.y * B.x;\n}\ndouble polar_angle(Vector A) {  //??????????§?\n    return atan2(A.y, A.x);\n}\ndouble length(Vector A) {  //???????????????????§?\n    return sqrt(dot(A, A));\n}\ndouble angle(Vector A, Vector B) {  //????????¬?§?????????¶??????????§?\n    return acos(dot(A, B)/length(A)/length(B));\n}\nVector rotate(Vector A, double rad) {  //???????????¬????????¶???\n    return Vector(A.x*cos(rad)-A.y*sin(rad), A.x*sin(rad)+A.y*cos(rad));\n    //????????´?????¬????????¶????????????????????¢??¬??????x'=xcos(theta)+ysin(theta), y'=ycos(theta)-xsin(theta)\n}\nVector normal(Vector A) {  //?????????????????????????????????A????????¶??????\n    double len = length(A);\n    return Vector(-A.y/len, A.x/len);\n}\nbool on_seg(Point p, Point a, Point b) {  //???????????¨??????????????????????????????????????????\n    return sign(cross(a-p, b-p)) == 0 && sign(dot(a-p, b-p)) < 0;  //???p????????¨??????ab???\n}\nPoint point_line_proj(Point p, Point a, Point b) {  //?????¨??´??????????????±????????????\n    Vector V = b - a;\n    return a + V * (dot (V, p-a)/dot(V, V));  //???p??°??´???ab????????±\n}\n\nint main() {\n    int q; scanf(\"%d\", &q);\n    while(q --) {\n        Point p[5];\n        for(int i = 0; i < 4; i ++) p[i].read(); \n        double alpha = angle(p[3]-p[2], p[1]-p[0]);\n        //cout << alpha << endl;\n        if(sign(alpha) == 0 || sign(alpha - PI) == 0) puts(\"2\");\n        else if(sign(alpha - PI/2) == 0 || sign(alpha + PI/2) == 0) puts(\"1\");\n        else puts(\"0\");\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <utility>\nusing namespace std;\n\ntypedef complex<double> Point, Vector;\ntypedef pair<Point, Point> Segment, Line;\n\n#define X real()\n#define Y imag()\n\n#define eps (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < eps)\n\ndouble dot(Vector a, Vector b){\n    return a.X * b.X + a.Y * b.Y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.X * b.Y - a.Y * b.X;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0);\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0);\n}\n\nint main(){\n    int q; cin>>q;\n    while(q--){\n        double x0, y0, x1, y1, x2, y2, x3, y3;\n        cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\n        Vector V0 = Point(x0, y0) - Point(x1, y1);\n        Vector V1 = Point(x2, y2) - Point(x3, y3);\n\n        int ans = 0;\n        if(isParallel(V0, V1)){\n            ans = 2;\n        }\n        else if(isOrthogonal(V0, V1)){\n            ans = 1;\n        }\n\n        cout << ans << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() {return x * x + y * y; }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n  return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment {\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n/////////////////////////////////////////////////////\n\nbool isOrthogonal(Vector a, Vector b) {\n  return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n  return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint main() {\n  int n;\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    Segment s1, s2;\n    cin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y;\n    cin >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n    if (isOrthogonal(s1, s2)) cout << 1 << endl;\n    else if (isParallel(s1, s2)) cout << 2 << endl;\n    else cout << 0 << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing LD = long double;\nconst LD eps = 1e-10;\n\nstruct vec2 {\n\tLD x, y;\n\tvec2(LD x = 0, LD y = 0) : x(x), y(y) {}\n\tvec2 operator + (const vec2 &rhs) const {\n\t\treturn vec2(x + rhs.x, y + rhs.y);\n\t}\n\tvec2 operator - (const vec2 &rhs) const {\n\t\treturn vec2(x - rhs.x, y - rhs.y);\n\t}\n\tLD operator * (const vec2 &rhs) const {\n\t\treturn x * rhs.x + y * rhs.y;\n\t}\n\tLD operator ^ (const vec2 &rhs) const {\n\t\treturn x * rhs.y - y * rhs.x;\n\t}\n\tvec2 operator * (const LD rhs) const {\n\t\treturn vec2(x * rhs, y * rhs);\n\t}\n\tfriend vec2 operator * (const LD lhs, const vec2 rhs) {\n\t\treturn vec2(lhs * rhs.x, lhs * rhs.y);\n\t}\n\tvec2 operator / (const LD rhs) const {\n\t\treturn vec2(x / rhs, y / rhs);\n\t}\n\tLD norm2() const {\n\t\treturn x * x + y * y;\n\t}\n\tLD norm() const {\n\t\treturn std::sqrt(norm2());\n\t}\n\tfriend std::istream& operator >> (std::istream &cin, vec2 &v) {\n\t\treturn cin >> v.x >> v.y;\n\t}\n\tfriend std::ostream& operator << (std::ostream &cout, const vec2 v) {\n\t\treturn cout << std::fixed << std::setprecision(10) << v.x << ' ' << std::fixed << std::setprecision(10) << v.y;\n\t}\n};\nint main() {\n\tstd::ios::sync_with_stdio(0), std::cin.tie(0);\n\tvec2 p0, p1, p2, p3; int q;\n\tstd::cin >> q;\n\tfor (int i = 1; i <= q; ++i) {\n\t\tstd::cin >> p0 >> p1 >> p2 >> p3;\n\t\tp1 = p1 - p0, p3 = p3 - p2;\n\t\tif (std::abs(p1 ^ p3) < eps)\n\t\t\tstd::cout << \"2\" << '\\n';\n\t\telse if (std::abs(p1 * p3) < eps)\n\t\t\tstd::cout << \"1\" << '\\n';\n\t\telse\n\t\t\tstd::cout << \"0\" << '\\n';\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<iostream>\n#include<complex>\n#include<cmath>\n\nusing namespace std;\n\nconst double EPS=1e-8;\nconst double INF=1e9;\n\ntypedef complex<double>Point;\n\n#define EQ(a,b) (fabs((a)-(b))<EPS)\n#define EQV(a,b) (abs((a)-(b))<EPS)\nstruct Segment{\n    Point p1,p2;\n    Segment(Point p1=Point(),Point p2=Point()):p1(p1),p2(p2){}\n};\n\ntypedef Segment Line;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\ntypedef vector<Point>Polygon;\n\ndouble dot(Point a,Point b){\n    return real(a)*real(b)+imag(a)*imag(b);\n}\n\ndouble cross(Point a,Point b){\n    return real(a)*imag(b)-imag(a)*real(b);\n}\n\nbool isOrthogonal(Point a,Point b){\n    return EQ(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return EQ(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Point a,Point b){\n    return EQ(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return EQ(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n\nint main(){\n    int N;\n    scanf(\"%d\",&N);\n    while(N--){\n        Point a,b,c,d;\n        scanf(\"%lf%lf\",&a.real(),&a.imag());\n        scanf(\"%lf%lf\",&b.real(),&b.imag());\n        scanf(\"%lf%lf\",&c.real(),&c.imag());\n        scanf(\"%lf%lf\",&d.real(),&d.imag());\n        if(isParallel(Segment(a,b),Segment(c,d)))puts(\"2\");\n        else if(isOrthogonal(Segment(a,b),Segment(c,d)))puts(\"1\");\n        else puts(\"0\");\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-7;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct pt_t {\n\tdouble x, y;\n\tpt_t operator+(const pt_t &p) { return { x + p.x, y + p.y }; }\n\tpt_t operator-(const pt_t &p) { return { x - p.x, y - p.y }; }\n\tpt_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npt_t cross_point(line_t l, line_t m) {\n\tpt_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, pt_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npt_t rot(pt_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(pt_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(pt_t p, pt_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(max(min(p.x * q.x + p.y * q.y, 1.0), -1.0));\n\tdouble r1 = asin(max(min(p.x * q.y - p.y * q.x, 1.0), -1.0));\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, pt_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nbool on_same_line(pt_t p, pt_t q) {\n\tline_t l = solve_line(p.y, -p.x, p);\n\tif (dist(l, q) < eps) return true;\n\telse return false;\n}\n\nint main() {\n\tint qr; cin >> qr;\n\tLoop(i, qr) {\n\t\tpt_t p[4];\n\t\tLoop(j, 4) {\n\t\t\tcin >> p[j].x >> p[j].y;\n\t\t}\n\t\tline_t l = solve_line(p[1].y - p[0].y, p[0].x - p[1].x, p[0]);\n\t\tline_t m = solve_line(p[3].y - p[2].y, p[2].x - p[3].x, p[2]);\n\t\tpt_t lp = { l.a, l.b };\n\t\tpt_t mp = { m.a, m.b };\n\t\tdouble r = angle(lp, mp);\n\t\tif (nearlyeq(r, 0) || nearlyeq(r, M_PI) || nearlyeq(r, M_PI * 2)) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse if (nearlyeq(r, M_PI * 0.5) || nearlyeq(r, M_PI * 1.5)) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0.0, double y = 0.0) :\n\t\t\tx(x), y(y) {\n\t}\n\n\tPoint operator +(Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(double k) {\n\t\treturn Point(x * k, y * k);\n\t}\n\tPoint operator /(double k) {\n\t\treturn Point(x / k, y / k);\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator <(Point p) {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(Point p) {\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :\n\t\t\tp1(p1), p2(p2) {\n\t}\n};\ntypedef Segment Line;\n\ndouble dot(Vector v1, Vector v2) {\n\treturn v1.x * v2.x + v1.y * v2.y;\n}\n\ndouble cross(Vector v1, Vector v2) {\n\treturn v1.x * v2.y - v1.y * v2.x;\n}\n\nbool isorthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isparallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint main() {\n\tint N;\n\tcin >> N;\n\tfor (int i = 0; i < N; i++) {\n\t\tSegment s1, s2;\n\t\tcin >> s1.p1.x >> s1.p1.y;\n\t\tcin >> s1.p2.x >> s1.p2.y;\n\t\tcin >> s2.p1.x >> s2.p1.y;\n\t\tcin >> s2.p2.x >> s2.p2.y;\n\t\tif (isparallel(s1, s2))\n\t\t\tcout << 2 << endl;\n\t\telse if (isorthogonal(s1, s2))\n\t\t\tcout << 1 << endl;\n\t\telse\n\t\t\tcout << 0 << endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define reint register int\n#define coint const int\n\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nstruct Vector {\n    double x, y;\n\n    inline Vector operator+(const Vector &v) const {\n        return (Vector){ x + v.x, y + v.y };\n    }\n\n    inline double dot(const Vector &v) const { return x * v.x + y * v.y; }\n    inline double cross(const Vector &v) const { return x * v.y - y * v.x; }\n    inline double length(void) const { return sqrt(x * x + y * y); }\n    inline double square(void) const { return x * x + y * y; }\n    inline double getAngle(void) const { return atan2(y, x); }\n\n    inline Vector operator*(const double a) const {\n        return (Vector){ x * a, y * a };\n    }\n};\n\nstruct Point {\n    double x, y;\n\n    inline Vector operator-(const Point &p) const {\n        return (Vector){ x - p.x, y - p.y };\n    }\n\n    inline Point operator+(const Vector &v) const {\n        return (Point){ x + v.x, y + v.y };\n    }\n};\n\ninline int isEq(const double a, const double b) {\n    return abs(a - b) < EPS;\n}\n\nint main(void) {\n    int q;\n    scanf(\"%d\", &q);\n    for (reint i = 1; i <= q; ++i) {\n        Point p0, p1, p2, p3;\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",\n              &p0.x, &p0.y, &p1.x, &p1.y, &p2.x, &p2.y, &p3.x, &p3.y);\n        const Vector vec01 = p1 - p0;\n        const Vector vec23 = p3 - p2;\n        if (!isEq(vec01.cross(vec23), 0)) {\n            if (isEq(vec01.dot(vec23), 0))\n                puts(\"1\");\n            else puts(\"0\");\n            continue;\n        }\n        //const Point p = p0 + vec01 * ((p3.x - p0.x) / (p1.x - p0.x));\n        //if (isEq(p3.y - p.y, 0))\n            //puts(\"0\");\n        //else puts(\"2\");\n        puts(\"2\");\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include \"bits/stdc++.h\"\n#if defined(_MSC_VER) || defined(ONLINE_JUDGE)\n#define getchar_unlocked _getchar_nolock\n#define putchar_unlocked _putchar_nolock\n#endif\n#define rep(i, n) for(int i=0; i<(n); ++i)\n#define FOR(i, m, n) for(int i=(m); i<(n); ++i)\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define rall(x) (x).rbegin(),(x).rend()\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n\nusing namespace std;\nusing LL = long long;\t\tusing VB = vector<bool>;\nusing VI = vector<int>;\t\tusing VL = vector<LL>;\nusing VS = vector<string>;\tusing VD = vector<double>;\nusing VVI = vector<VI>;\t\tusing VVL = vector<VL>;\nusing PII = pair<int, int>;\tusing PLL = pair<LL, LL>;\nusing VP = vector<PII>;\t\tusing VPL = vector<PLL>;\nconst int inf = (int)1e9;\nconst LL inf_ll = (LL)1e18, MOD = 1000000007;\nconst double PI = acos(-1.0), EPS = 1e-12;\n\ntemplate<class T>void Sort(T& a) { sort(all(a)); }\ntemplate<class T>void RSort(T& a) { sort(rall(a)); }\ntemplate<class T>void Reverse(T& a) { reverse(all(a)); }\ntemplate<class T>void Unique(T& a) { a.erase(unique(all(a)), a.end()); }\ntemplate<class T>T Sorted(T a) { Sort(a); return a; }\ntemplate<class T>T RSorted(T a) { RSort(a); return a; }\ntemplate<class T>T Reversed(T a) { Reverse(a); return a; }\ntemplate<class T>T Uniqued(T a) { Unique(a); return a; }\ntemplate<class T>auto Max(const T& a) { return *max_element(all(a)); }\ntemplate<class T>auto Min(const T& a) { return *min_element(all(a)); }\ntemplate<class T>int MaxPos(const T& a) { return max_element(all(a)) - a.begin(); }\ntemplate<class T>int MinPos(const T& a) { return min_element(all(a)) - a.begin(); }\ntemplate<class T, class U>int Count(const T& a, const  U& v) { return count(all(a), v); }\ntemplate<class T, class U>int Find(const T& a, const U& v) { auto pos = find(all(a), v); return pos == a.end() ? -1 : pos - a.begin(); }\ntemplate<class T, class U>U Sum(const T& a, const U& v) { return accumulate(all(a), v); }\ntemplate<class T, class U>int Lower(const T& a, const U& v) { return lower_bound(all(a), v) - a.begin(); }\ntemplate<class T, class U>int Upper(const T& a, const U& v) { return upper_bound(all(a), v) - a.begin(); }\ntemplate<class T, class P>void RemoveIf(T& a, P f) { a.erase(remove_if(all(a), f), a.end()); }\ntemplate<class T>T Age(T n, T m) { return (n + m - 1) / m; }\ntemplate<class T>T Gcd(T n, T m) { return m ? Gcd(m, n % m) : n; }\ntemplate<class T>T Lcm(T n, T m) { return n / Gcd(n, m) * m; }\ntemplate<class T>T Pow(T a, T n) { T r = 1; while (n > 0) { if (n & 1)r *= a; a *= a; n /= 2; }return r; }\ntemplate<class T>T Powmod(T a, T n, T m = MOD) { T r = 1; while (n > 0) { if (n & 1)r = r * a % m, n--; else a = a * a % m, n /= 2; }return r; }\ntemplate<class T>bool chmax(T& a, const T& b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T>bool chmin(T& a, const T& b) { if (a > b) { a = b; return true; } return false; }\nstring operator*(string s, int n) { string ret; rep(i, n)ret += s; return ret; }\n\n// --- input --- //\ntemplate<class T>T InputF() { T ret; cin >> ret; return ret; }\ntemplate<> char InputF() {\n\tchar ret = '\\0', c = getchar_unlocked();\n\twhile (c != '\\0' && c != '\\n' && c != '\\t' && c != ' ') { ret = c; c = getchar_unlocked(); }\n\treturn ret;\n}\ntemplate<> string InputF() {\n\tstring ret; char c = getchar_unlocked();\n\twhile (c != '\\0' && c != '\\n' && c != '\\t' && c != ' ') { ret.push_back(c); c = getchar_unlocked(); }\n\treturn ret;\n}\ntemplate<> int InputF() {\n\tint ret = 0; bool neg = false; char c = getchar_unlocked();\n\tif (c == '-') { neg = true; c = getchar_unlocked(); }\n\twhile (isdigit(c)) { ret = ret * 10 + (c - '0'); c = getchar_unlocked(); }\n\treturn neg ? -ret : ret;\n}\ntemplate<> LL InputF() {\n\tLL ret = 0; bool neg = false; char c = getchar_unlocked();\n\tif (c == '-') { neg = true; c = getchar_unlocked(); }\n\twhile (isdigit(c)) { ret = ret * 10LL + (LL(c) - LL('0')); c = getchar_unlocked(); }\n\treturn neg ? -ret : ret;\n}\ntemplate<> double InputF() {\n\tdouble ret = 0, dp = 1; bool neg = false, adp = false; char c = getchar_unlocked();\n\tif (c == '-') { neg = true; c = getchar_unlocked(); }\n\twhile (isdigit(c) || c == '.') {\n\t\tif (c == '.')adp = true;\n\t\telse if (adp)ret += (c - '0') * (dp *= 0.1);\n\t\telse ret = ret * 10.0 + (c - '0');\n\t\tc = getchar_unlocked();\n\t}\n\treturn neg ? -ret : ret;\n}\nstring GetLine() {\n\tstring ret; char c = getchar_unlocked();\n\twhile (c != '\\0' && c != '\\n') { ret.push_back(c); c = getchar_unlocked(); }\n\treturn ret;\n}\nstruct Input {\n\tstruct InputV {\n\t\tint n, m;\n\t\tInputV(int N) :n(N), m(-1) {}\n\t\tInputV(pair<int, int> N) { tie(n, m) = N; }\n\t\ttemplate<class T>operator vector<T>() {\n\t\t\tvector<T> ret(n); rep(i, n)ret[i] = InputF<T>(); return ret;\n\t\t}\n\t\ttemplate<class T>operator vector<vector<T>>() {\n\t\t\tassert(m != -1); vector<vector<T>> ret(n, vector<T>(m));\n\t\t\trep(i, n)rep(j, m)ret[i][j] = InputF<T>();\n\t\t\treturn ret;\n\t\t}\n\t};\n\ttemplate<class T>operator T() { return InputF<T>(); }\n\tInputV operator[](int t) { return InputV(t); }\n\tInputV operator[](pair<int, int> t) { return InputV(t); }\n}in;\n\n// --- output --- //\nstruct BoolStr {\n\tconst char* t, * f; BoolStr(const char* _t, const char* _f) :t(_t), f(_f) {}\n}Yes(\"Yes\", \"No\"), yes(\"yes\", \"no\"), YES(\"YES\", \"NO\"), Int(\"1\", \"0\");\nstruct DivStr {\n\tconst char* d, * l; DivStr(const char* _d, const char* _l) :d(_d), l(_l) {}\n}spc(\" \", \"\\n\"), no_spc(\"\", \"\\n\"), end_line(\"\\n\", \"\\n\"), comma(\",\", \"\\n\"), no_endl(\" \", \"\");\nclass Print {\n\tBoolStr B{ Yes }; DivStr D{ spc };\tvoid p(double v) { printf(\"%.20f\", v); }\n\tvoid p(int v) { printf(\"%d\", v); }\tvoid p(LL v) { printf(\"%lld\", v); }\n\tvoid p(char v) { putchar(v); }\t\tvoid p(bool v) { printf(v ? B.t : B.f); }\n\ttemplate<class T>void p(const T& v) { cout << v; }\n\ttemplate<class T, class U>void p(const pair<T, U>& v) { p(v.first); printf(D.d); p(v.second); }\n\ttemplate<class T>void p(const vector<T>& v) { rep(i, sz(v)) { if (i)printf(D.d); p(v[i]); } }\n\ttemplate<class T>void p(const vector<vector<T>>& v) { rep(i, sz(v)) { if (i)printf(D.l); p(v[i]); } }\n\tvoid p(const BoolStr& v) { B = v; } void p(const DivStr& v) { D = v; }\n\ttemplate<class T>bool isPrint(const T& v) { return !is_same<BoolStr, T>::value && !is_same<DivStr, T>::value; }\npublic:\n\tvoid operator()() { printf(D.l); }\n\ttemplate<class H>void operator()(H&& h) {\n\t\tp(h); if (isPrint(h))printf(D.l); B = Yes; D = spc;\n\t}\n\ttemplate<class H, class...T>void operator()(H&& h, T&& ...t) {\n\t\tp(h); if (isPrint(h))printf(D.d); operator()(forward<T>(t)...);\n\t}\n}out;\n\n// --- step --- //\nclass step {\n\tstruct It {\n\t\tint x, s; It(int _x, int _s) :x(_x), s(_s) { assert(s); }\n\t\tint operator*() { return x; } void operator++() { x += s; }\n\t\tbool operator!=(It& i) { return 0 < s ? x < i.x : x >= i.x; }\n\t}; int x, y, s;\npublic:\n\tstep(int _y, int _s = 1) :x(0 < _s ? 0 : _y), y(0 < _s ? _y : 0), s(_s) {}\n\tstep(int _x, int _y, int _s) :x(_x), y(_y), s(_s) {}\n\tIt begin() { return { x,s }; } It end() { return { y,s }; }\n};\n\n// --- dump --- //\n#if __has_include(\"dump.hpp\")\n#include \"dump.hpp\"\n#else\n#define dump(...) (void(0))\n#endif\n\n\nint main() {\n\tint n = in;\n\trep(i, n) {\n\t\tdouble x0 = in, y0 = in, x1 = in, y1 = in, x2 = in, y2 = in, x3 = in, y3 = in;\n\t\tdouble X1 = x1 - x0, Y1 = y1 - y0;\n\t\tdouble X2 = x3 - x2, Y2 = y3 - y2;\n\t\tif (abs(X1 * Y2 - X2 * Y1) < EPS)out(2);\n\t\telse if (abs(X1 * X2 + Y1 * Y2) < EPS)out(1);\n\t\telse out(0);\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS )\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :\n\t\t\tx(x), y(y) {\n\t}\n\n\tPoint operator +(Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(double a) {\n\t\treturn Point(x * a, y * a);\n\t}\n\tPoint operator /(double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tbool operator <(const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint main() {\n\n\tint q;\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; ++i) {\n\t\tint p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y;\n\t\tscanf(\"%d %d %d %d %d %d %d %d\", &p0x, &p0y, &p1x, &p1y, &p2x, &p2y, &p3x, &p3y);\n\t\tPoint p1(p0x, p0y);\n\t\tPoint p2(p1x, p1y);\n\t\tPoint p3(p2x, p2y);\n\t\tPoint p4(p3x, p3y);\n\n\t\tSegment s1;\n\t\ts1.p1 = p1;\n\t\ts1.p2 = p2;\n\n\t\tSegment s2;\n\t\ts2.p1 = p3;\n\t\ts2.p2 = p4;\n\n\t\tif (isOrthogonal(s1, s2)) {\n\t\t\tcout << 1 << endl;\n\t\t} else if (isParallel(s1, s2)) {\n\t\t\tcout << 2 << endl;\n\t\t} else {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-9;\n\nbool same(double a, double b) { return abs(a - b) < eps; }\n\nstruct P {\n    double x, y;\n    P() : x(0), y(0) {}\n    P(double x, double y) : x(x), y(y) {}\n    P operator + (P b) { return P(x + b.x, y + b.y); }\n    P operator - (P b) { return P(x - b.x, y - b.y); }\n    P operator * (double b) { return P(x * b, y * b); }\n    P operator / (double b) { return P(x / b, y / b); }\n    double operator * (P b) { return x * b.x + y * b.y; }\n    double operator ^ (P b) { return x * b.y - y * b.x; }\n    double abs() { return hypot(x, y); }\n    P unit() { return *this / abs(); }\n};\n\nstruct L{\n    // ax + by + c = 0\n    double a, b ,c, o;\n    P pa, pb;\n    L() : a(0), b(0), c(0), o(0), pa(), pb() {}\n    L(P pa, P pb) : a(pa.y - pb.y), b(pb.x - pa.x), c(pa ^ pb), o(atan2(-a, b)), pa(pa), pb(pb) {}\n    P project(P p) { return pa + (pb - pa).unit() * ((pb - pa) * (p - pa) / (pb - pa).abs()); }\n    P reflect(P p) { return p + (project(p) - p) * 2; }\n    double get_ratio(P p) { return (p - pa) * (pb - pa) / ((pb - pa).abs() * (pb - pa).abs()); }\n};\n\nbool parallel(L x, L y) { return same(x.a * y.b, x.b * y.a); }\n\nP intersect(L x, L y) { return P(-x.b * y.c + x.c * y.b, x.a * y.c - x.c * y.a) / (-x.a * y.b + x.b * y.a); }\n\nint main() {\n    int q; cin >> q; while (q--) {\n        P p0, p1, p2, p3; cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        if (((p1 - p0) ^ (p3 - p2)) == 0) cout << \"2\" << '\\n';\n        else if (((p1 - p0) * (p3 - p2)) == 0) cout << \"1\" << '\\n';\n        else cout << \"0\" << '\\n';\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <math.h>\nconst double EPS = 1e-10;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\t/*vector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}*/\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double para(vector v1, vector v2) {\n\treturn sqrt(v1.x*v1.x + v1.y*v1.y)*sqrt(v2.x*v2.x + v2.y*v2.y);\n}\nint main() {\n\tcout << \"dddddddddddd\" << sqrt(128 * 128 + (-1612)*(-1612)) << endl;;\n\tcout << \"sssss\" << sqrt((-32) * (-32) + 403 * 403) << endl;;\n\tcout << \" afefwe\" << sqrt(128 * 128 + (-1612)*(-1612))*sqrt((-32) * (-32) + 403 * 403) << endl;\n\tcout << \"dsdfs\" << 128 * (-32) + (-1612) * 403 << endl;\n\tdouble n, x1, x2, x3, x4, y1, y2, y3, y4;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tvector v1(x2 - x1, y2 - y1);\n\t\tvector v2(x4 - x3, y4 - y3);\n\t\tdouble ans = dot(v1, v2);\n\t\tif (ans == 0) cout << 1 << endl;\n\t\telse if (fabs(ans - para(v1, v2)) < EPS || fabs(2*ans - fabs((ans - para(v1, v2)))) < EPS) cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\nint main()\n{\n    int a, b, c, in[2000], out[2000], ok = 0, i, yes = 1, no = 1;\n    scanf(\"%d\", &a);\n    for(i = 0;  i < a ; i++) scanf(\"%d\", &in[i]);\n    scanf(\"%d\", &b);\n    for(i = 0 ; i < b; i++) scanf(\"%d\", &out[i]);\n    c = a;\n    if(b < c)\n    {\n        c = b;\n    }\n    for(i = 0; i < c; i++)\n    {\n        if(out[i] > in[i])\n        {\n            ok = 1;\n            break;\n        }\n        if(in[i] > out[i])\n        {\n            break;\n        }\n        if(in[i] != out[i]) yes = 0;\n    }\n    if(yes && no) if(b >= a) ok = 1;\n    else if(yes && no && b == a)    ok = 1;\n    printf(\"%d\\n\", ok);\n\n    \n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n#define db double\nconst db eps = 1e-8;\n\nstruct Point{\n    db x, y;\n    Point(db x=0, db y=0): x(x), y(y) {}    //必须有初始化\n    bool operator < (const Point &p){\n        return x < p.x || (x == p.x && y < p.y);\n    }\n};\n\ntypedef Point Vector;\nVector operator + (Vector a, Vector b){ return Point(a.x+b.x, a.y+b.y);}\nVector operator - (Point a, Point b){ return Vector(a.x-b.x, a.y-b.y);}\nVector operator * (Vector a, db k){ return Vector(a.x*k, a.y*k);}\nVector operator / (Vector a, db k){ return Vector(a.x/k, a.y/k);}\n\n//inline将函数名为内联函数，不使用栈空间，直接运算，但不能有while,switch等复杂语句\ninline db dot(Vector a, Vector b){\n    return a.x*b.x + a.y*b.y;\n}\ninline db cross(Vector a, Vector b){\n    return a.x*b.y - b.x*a.y;\n}\ndb length(Vector a){\n    return sqrt(dot(a, a));\n}\ndb angle(Vector a, Vector b){\n    return acos(dot(a, b) / length(a) / length(b));\n}\n\nint dcmp(db x){\n    if(fabs(x) < eps) return 0;\n    return x < 0? -1: 1;\n}\nbool operator == (Point a, Point b){\n    return dcmp(a.x-b.x) == 0 && dcmp(a.y-b.y) == 0;\n}\n\nstruct Segment{\n    Point p1, p2;\n};\ntypedef Segment Line;\nvector<Point> Polygon;\nPoint project(Line l, Point p){\n    Point p1 = l.p1, p2 = l.p2;\n    Vector a = p2 - p1, b = p - p1;\n    db len_a = dot(a, a);   //这里不加sqrt，是因为下面算投影长度时，要除以两次len_a\n    Vector tmp = a * (dot(a, b) / len_a);\n    return Point(tmp.x+p1.x, tmp.y+p1.y);\n}\nPoint reflect(Line l, Point p){\n    Point tmp = project(l, p);\n    return p + (tmp - p)*2;\n}\n\nint line_relation(Line l1, Line l2){\n    Vector a = l1.p2 - l1.p1, b = l2.p2 - l2.p1;\n    if(cross(a, b) == 0)\n        return 2;\n    else if(dot(a, b) == 0)\n        return 1;\n    return 0;\n}\nint segment_relation(Segment s1, Segment s2){\n    Vector a = s1.p2 - s1.p1, b = s2.p2 - s2.p1;\n    db flag = cross(a, b);\n    if(flag < 0)  return 2;\n    else if(flag > 0)  return 1;\n    else{       //重合\n        if(a.x*b.x < 0 || a.y*b.y < 0) return 3;\n        else if(length(a) < length(b)) return 4;\n        else return 5;\n    }\n}\nint main()\n{\n    Line l1, l2;\n    int n;\n    cin >>n;\n    while(n --){\n        cin >>l1.p1.x >>l1.p1.y >>l1.p2.x >>l1.p2.y >>l2.p1.x >>l2.p1.y >>l2.p2.x >>l2.p2.y;\n        int flag = line_relation(l1, l2);\n        cout <<flag;\n        cout << \"\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nusing namespace std;\n\nclass Point {\n  public:\n  double x, y;\n\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() {return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n};\n\ntypedef Point Vector;\n\ntypedef struct Segment{\n  Point p1, p2;\n}Segment;\n \ntypedef Segment Line;\n\n\ndouble dot(Vector a, Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n  return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n \nbool isParallel(Vector a, Vector b){\n  return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n  return isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Segment s1, Segment s2){\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\nint main() {\n  int q;\n  scanf(\" %d\", &q);\n  for(int i=0; i < q; ++i) {\n    Segment a ,b;\n    scanf(\" %lf %lf %lf %lf %lf %lf %lf %lf\", &a.p1.x, &a.p1.y, &a.p2.x, &a.p2.y, &b.p1.x, &b.p1.y, &b.p2.x, &b.p2.y );\n\n    if(isParallel(a,b)) {\n      printf(\"2\\n\");\n    } else if(isOrthogonal(a,b)) {\n      printf(\"1\\n\");\n    } else {\n      printf(\"0\\n\");\n    }\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define ll long long\n#define INF 1000000005\n#define MOD 1000000007\n#define EPS 1e-10\n#define rep(i,n) for(int i=0;i<n;++i)\n\nusing namespace std;\n\ntypedef pair<int,int>P;\n\nconst int MAX_N = 100005;\n\nint Q;\n\nint judge(P p0,P p1,P p2,P p3)\n{\n\tP a = P(p1.first - p0.first,p1.second - p0.second);\n\tP b = P(p3.first - p2.first,p3.second - p2.second);\n\tdouble sa = sqrt(a.first*a.first + a.second*a.second);\n\tdouble sb = sqrt(b.first*b.first + b.second*b.second);\n\tdouble cs = (a.first*b.first+a.second*b.second)/sa/sb;\n\tif(1-cs < EPS || 1+cs < EPS){\n\t\treturn 2;\n\t}else if(abs(cs) < EPS){\n\t\treturn 1;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d\",&Q);\n\trep(i,Q){\n\t\tint a,b,c,d,e,f,g,h;\n\t\tscanf(\"%d%d%d%d%d%d%d%d\",&a,&b,&c,&d,&e,&f,&g,&h);\n\t\tprintf(\"%d\\n\",judge(P(a,b),P(c,d),P(e,f),P(g,h)));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// 直線の直行・平行判定\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<vector>\n\n#include<queue>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) ( fabs((a) - (b)) < EPS )\n\n// 点を表すクラス\nclass Point\n{\n    public:\n        double x, y;\n        // コンストラクタ\n        Point(double x = 0.0, double y = 0.0) : x(x), y(y){ }\n\n        // 演算子のオーバーロード\n        Point operator * (double a)\n        {\n            return Point(a * x, a * y);\n        }\n\n        bool operator == ( const Point &p) const\n        {\n            return fabs(x - p.x) < EPS && fabs(y -p.y) < EPS;\n        }\n};\n\n// 線分を表すクラス\nclass Segment\n{\n    public:\n        Point p1, p2;\n        // コンストラクタ\n        Segment(Point p1, Point p2) : p1(p1), p2(p2){ }\n};\n\n// 点とベクトルの表現は同じ\ntypedef Point Vector;\n// 線分と直線の表現は同じ\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\n\nint main(void)\n{\n    int q, x1, y1, x2, y2;\n    Vector v1, v2;\n\n    cin >> q;\n\n    for(int i = 0; i < q; i++)\n    {\n\n        // ベクトルの格納\n        cin >> x1 >> y1 >> x2 >> y2;\n        v1.x = x2 - x1;\n        v1.y = y2 - y1;\n\n        cin >> x1 >> y1 >> x2 >> y2;\n        v2.x = x2 - x1;\n        v2.y = y2 - y1;\n\n        // 判定処理\n        if( dot(v1, v2) == 0 )\n        {\n            // ベクトルは互いに直交している\n            printf(\"1\\n\");\n        }\n        else if( ( v1 == v2 ) || (v1 == v2 * (-1) )\n                || cross(v1, v2) == 0 )\n        {\n            // ベクトルは平行である\n            // [外積の演算結果], [同じ要素のベクトル], [方向が反対] を考慮する\n            printf(\"2\\n\");\n        }\n        else\n        {\n            printf(\"0\\n\");\n        }\n    }\n\n    return 0;\n}\n\n// 内積の計算をする関数\ndouble dot(Vector a, Vector b)\n{\n    return ( ( a.x * b.x ) + ( a.y * b.y ) );\n}\n\n// 外積の計算をする関数\ndouble cross(Vector a, Vector b)\n{\n    return ( ( a.x * b.y ) + ( a.y * b.x ) );\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) REP(i,0,n)\n\ntypedef complex<double> P;\n\n#define EPS (1e-7)\n\nbool is_parallel(P a1, P a2, P b1, P b2) {\n  a2 -= a1, b2 -= b1;\n  return abs(a2.real()-b2.real()) < EPS && abs(a2.imag()-b2.imag()) < EPS;\n}\n\nbool is_orthogonal(P a1, P a2, P b1, P b2) {\n  a2 -= a1; b2 -= b1;\n  a2 *= P(0, 1);\n  return a2 == b2;\n}\n\nint main () {\n  \n  int q; cin >> q;\n  for(;q--;) {\n    P a1, a2, b1, b2;\n    cin >> a1.real() >> a1.imag() >> a2.real() >> a2.imag();\n    cin >> b1.real() >> b1.imag() >> b2.real() >> b2.imag();\n    if(is_parallel(a1, a2, b1, b2)) {\n      cout << 2 << endl;\n    }\n    else if(is_orthogonal(a1, a2, b1, b2)) {\n      cout << 1 << endl;\n    }\n    else {\n      cout << 0 << endl;\n    }\n\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define Fi first\n#define Se second\n#define pb push_back\n#define mp make_pair\n#define rep(x, a, b) for(int x = (a); x <= (b); ++ x)\n#define per(x, a, b) for(int x = (a); x >= (b); -- x)\n#define rop(x, a, b) for(int x = (a); x < (b); ++ x)\n#define por(x, a, b) for(int x = (a); x > (b); -- x) \n\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef unsigned int unt;\ntypedef double db;\ntypedef pair <int, int> pii;\ntypedef vector <int> vi;\n\nconst db eps  = 1e-8;\nconst db _PI  = 3.1415926535897932384;\nconst db _E   = 2.7182818284590452354;\nconst int inf = 0x3f3f3f3f;\nconst LL INF  = 0x3f3f3f3f3f3f3f3fll;\n\nint dcmp(db x) {\n\tif(x > eps) return 1;\n\tif(x < -eps) return -1;\n\treturn 0;\n}\n\nint dcmp(db x, db y) {\n\treturn dcmp(x - y);\n}\n\nstruct Point {\n\tdb x, y;\n\tPoint(db _x = 0, db _y = 0) : x(_x), y(_y) {}\n\tvoid print() { printf(\"%.10f %.10f\", x, y); }\n};\nstruct Line {\n\tPoint p1, p2;\n\tLine() {};\n\tLine(Point _p1, Point _p2) : p1(_p1), p2(_p2) {};\n};\n\ntypedef Point Vector;\ntypedef Line Segment;\n\n// CCW\n\nconst int CCW_COUNTER_CLOCKWISE = 1;\nconst int CCW_CLOCKWISE = -1;\nconst int CCW_ONLINE_FRONT = 2;\nconst int CCW_ONLINE_BACK = -2;\nconst int CCW_ON_SEGMENT = 0;\n\nVector operator + (const Vector &a, const Vector &b) {\n\treturn Vector(a.x + b.x, a.y + b.y);\n}\nVector operator - (const Vector &a, const Vector &b) {\n\treturn Vector(a.x - b.x, a.y - b.y);\n}\nVector operator * (const Vector &a, const db &b) {\n\treturn Vector(a.x * b, a.y * b);\n}\nVector operator / (const Vector &a, const db &b) {\n\treturn Vector(a.x / b, a.y / b);\n}\ndb operator * (const Vector &a, const Vector &b) {\n\treturn a.x * b.x + a.y * b.y;\n}\ndb operator ^ (const Vector &a, const Vector &b) {\n\treturn a.x * b.y - a.y * b.x;\n}\ndb dis(const Point &a, const Point &b) {\n\treturn sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\ndb dis2(const Point &a, const Point &b) {\n\treturn (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);\n}\ndb dis(const Vector &a) {\n\treturn sqrt(a.x * a.x + a.y * a.y);\n}\ndb dis2(const Vector &a) {\n\treturn a.x * a.x + a.y * a.y;\n}\nPoint Projection(const Line &L, const Point &p) {\n\tVector Base = L.p2 - L.p1;\n\tdb len = Base * (p - L.p1);\n\treturn L.p1 + Base * (len / dis2(L.p1, L.p2));\n}\nPoint Reflection(const Line &L, const Point &p) {\n\treturn p + (Projection(L, p) - p) * 2.0;\n}\n\nint ccw(const Point &p0, const Point &p1, const Point &p2) {\n\tVector p01 = p1 - p0, p02 = p2 - p0;\n\tif(dcmp(p01 ^ p02) == 1) return CCW_COUNTER_CLOCKWISE; // 顺时针 \n\tif(dcmp(p01 ^ p02) == -1) return CCW_CLOCKWISE;        // 逆时针 \n\tif(dcmp(p01 * p02) == -1) return CCW_ONLINE_BACK;\n\tif(dcmp(dis2(p01), dis2(p02)) == -1) return CCW_ONLINE_FRONT;\n\treturn CCW_ON_SEGMENT;\n}\n\nbool isOrthogonal(const Vector &a, const Vector &b) {\n\treturn dcmp(a * b) == 0;\n}\nbool isOrthogonal(const Point &a1, const Point &a2, const Point &b1, const Point &b2) {\n\treturn isOrthogonal(a2 - a1, b2 - b1);\n}\nbool isOrthogonal(const Line &a, const Line &b) {\n\treturn isOrthogonal(a.p2 - a.p1, b.p2 - b.p1);\n}\nbool isParallel(const Vector &a, const Vector &b) {\n\treturn dcmp(a ^ b) == 0;\n}\nbool isParallel(const Point &a1, const Point &a2, const Point &b1, const Point &b2) {\n\treturn isParallel(a2 - a1, b2 - b1);\n}\nbool isParallel(const Line &a, const Line &b) {\n\treturn isParallel(a.p2 - a.p1, b.p2 - b.p1);\n}\n\nint main() {\n\tint q; scanf(\"%d\", &q);\n\trep(i, 1, q) {\n\t\tLine a, b;\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\", &a.p1.x, &a.p1.y, &a.p2.x, &a.p2.y, &b.p1.x, &b.p1.y, &b.p2.x, &b.p2.y);\n\t\tif(isOrthogonal(a, b)) puts(\"1\");\n\t\telse if(isParallel(a, b)) puts(\"2\");\n\t\telse puts(\"0\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define  _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n#include <algorithm>\n#include <utility>\n#include <functional>\n#include <cstring>\n#include <queue>\n#include <stack>\n#include <math.h>\n#include <iterator>\n#include <vector>\n#include <string>\n#include <set>\n#include <math.h>\n#include <iostream>\n#include <random>\n#include<map>\n#include <iomanip>\n#include <time.h>\n#include <stdlib.h>\n#include <list>\n#include <typeinfo>\n#include <list>\n#include <set>\n#include <cassert>\n#include<fstream>\n#include <unordered_map>\n#include <cstdlib>\nusing namespace std;\n#define Ma_PI 3.141592653589793\n#define eps 0.00001\n#define LONG_INF 3000000000000000000\n#define GOLD 1.61803398874989484820458\n#define MAX_MOD 1000000007\n#define MOD 998244353\n#define REP(i,n) for(long long i = 0;i < n;++i)    \n#define seg_size 524288\n#include <complex>\ntypedef complex<double> P;\nint main() {\n\tint query;\n\tcin >> query;\n\tREP(i, query) {\n\t\tdouble a, b, c, d, e, f, g, h;\n\t\tcin >> a >> b >> c >> d >> e >> f >> g >> h;\n\t\tP line1 = P(c - a, d - b);\n\t\tP line2 = P(g - e, h - f);\n\t\tdouble hoge = line1.real() * line2.imag() - line1.imag() * line2.real();\n\t\tif (abs(hoge) < eps) {\n\t\t\tcout << 2 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\thoge = line1.real() * line2.real() + line1.imag() * line2.imag();\n\t\tif (abs(hoge) < eps) {\n\t\t\tcout << 1 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tcout << 0 << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<vector>\n#include<algorithm>\n#include<cmath>\n#include<climits>\n#include<ctime>\n#include<cstring>\n#include<stack>\n#include<queue>\n#include<sstream>\n#include<string>\n#include<set>\n#include<array>\n\n#define ALL(v) (v).begin(),(v).end()\n#define REP(i,p,n) for(int i=p;i<(int)(n);++i)\n#define rep(i,n) REP(i,0,n)\n#define DUMP(list) cout << \"{ \"; for(auto nth : list){ cout << nth << \" \"; } cout << \"}\" << endl\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i);\n\nusing namespace std;\n\ntypedef double Real;\n\nconst Real EPS = 1e-8;\n\nint sign(Real d){\n\treturn d > EPS ? 1 : d < -EPS ? -1 : 0;\n}\n\nstruct Point{\n\tReal x,y;\n\t\n\tPoint(Real x_ = 0,Real y_ = 0):x(x_),y(y_){}\n\n\tPoint operator+(const Point &p) const {return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p) const {return Point(x-p.x,y-p.y);}\n\tPoint operator*(Real s) const {return Point(x*s,y*s);}\n\tPoint operator/(Real s) const {return Point(x/s,y/s);}\n\tbool operator<(const Point &p) const{return sign(x-p.x) == -1 || (sign(x-p.x) == 0 && sign(y-p.y) == -1);}\n\tbool operator==(const Point &p) const{return sign(x-p.x) == 0 && sign(y-p.y) == 0;}\n};\n\nstruct Segment : public array<Point,2>{\n\tSegment(const Point &a,const Point &b){\tat(0) = a; at(1) = b;}\n};\n\nstruct Line : public array<Point,2>{\n\tLine(const Point &a,const Point &b){at(0) = a; at(1) = b;}\n};\n\nstruct Circle{\n\tPoint c;\n\tReal r;\n\n\tCircle(const Point &c_, Real r_):c(c_),r(r_){}\n};\n\ntypedef vector<Point> Polygon;\n\n\nPoint rotate90(const Point &p){\n\treturn Point(-p.y,p.x);\n}\n\nPoint rotate(const Point &p,Real theta){\n\tconst Real s = sin(theta),c = cos(theta);\n\treturn Point(c*p.x-s*p.y,s*p.x+c*p.y);\n}\n\nReal angle(const Point &p){\n\treturn atan2(p.y,p.x);\n}\n\nReal dot(const Point &a,const Point &b){ //??????????????????\n\treturn a.x*b.x+a.y*b.y;\n}\n\nReal cross(const Point &a,const Point &b){ //??????????????????\n\treturn a.x*b.y-a.y*b.x;\n}\n\nReal norm(const Point &p){\n\treturn p.x*p.x+p.y*p.y;\n}\n\nReal abs(const Point &p){\n\treturn sqrt(norm(p));\n}\n\nint main(){\n\tint q;\n\tcin >> q;\n\trep(i,q){\n\t\tint x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tLine l1(Point(x0,y0),Point(x1,y1)),l2(Point(x2,y2),Point(x3,y3));\n\t\t\n\t\tif(sign(dot(l1[0]-l1[1],l2[0]-l2[1]))==0) cout << 1 << endl;\n\t\telse if(sign(cross(l1[0]-l1[1],l2[0]-l2[1]))==0) cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// #define STOPIT\n#include <bits/stdc++.h>\n#define loop(n) for (lint ngtkana_is_a_genius = 0; ngtkana_is_a_genius < lint(n); ngtkana_is_a_genius++)\n#define rep(i, begin, end) for (lint i = lint(begin); (i) < lint(end); i++)\n#define all(v) v.begin(), v.end()\n#define rand(l, r) std::uniform_int_distribution<>(l, r)(mt)\nusing lint = long long;\nauto mt = std::mt19937_64(std::random_device{}());\nauto cmn = [](auto& a, auto b){ if (a > b) {a = b; return true;} return false; };\nauto cmx = [](auto& a, auto b){ if (a < b) {a = b; return true;} return false; };\nvoid debug_impl() { std::cerr << std::endl; }\ntemplate <typename Head, typename... Tail>\nvoid debug_impl(Head head, Tail... tail) { std::cerr << \" \" << head; debug_impl(tail...); }\n#ifndef STOPIT\n#define debug(...)\\\n  do {\\\n    std::cerr << std::boolalpha << \"[\" << #__VA_ARGS__ << \"]:\";\\\n    debug_impl(__VA_ARGS__);\\\n    std::cerr << std::noboolalpha;\\\n  } while (false)\n#else\n#define debug(...) {}\n#endif\n\ntemplate < template < typename ... > class Tuple,  typename... Args, std::size_t ... Inds, std::size_t = std::tuple_size< Tuple < Args ... > >::value >\nstd::istream& tuple_input_impl(std::istream& os, Tuple<Args...>& tuple, std::integer_sequence<std::size_t, Inds...>)\n  { (void)std::initializer_list<int>{((void)(os >> std::get< Inds >(tuple)), 0)...}; return os; }\ntemplate < template < typename ... > class Tuple,  typename... Args, std::size_t = std::tuple_size< Tuple < Args ... > >::value >\nstd::istream& operator>> (std::istream& os, Tuple<Args...>& tuple)\n  { return tuple_input_impl(os, tuple, std::index_sequence_for<Args...>()); }\n\ntemplate < template < typename ... > class Tuple,  typename... Args, std::size_t ... Inds, std::size_t = std::tuple_size< Tuple < Args ... > >::value >\nstd::ostream& tuple_output_impl(std::ostream& os, const Tuple<Args...>& tuple, std::integer_sequence<std::size_t, Inds...>)\n  { os << \"(\"; (void)std::initializer_list<int>{((void)(os << (Inds > 0 ? \",\" : \"\") << std::get< Inds >(tuple)), 0)...}; return os << \")\"; }\ntemplate < template < typename ... > class Tuple,  typename... Args, std::size_t = std::tuple_size< Tuple < Args ... > >::value >\nstd::ostream& operator<< (std::ostream& os, const Tuple<Args...>& tuple)\n { return tuple_output_impl(os, tuple, std::index_sequence_for<Args...>()); }\n\nint main() {\n  std::cin.tie(0); std::cin.sync_with_stdio(false);\n  auto det = [&] (auto&& p, auto&& q) {\n    int a,b,c,d;\n    std::tie(a,b) = p;\n    std::tie(c,d) = q;\n    return a*d - b*c;\n  };\n\n  auto inp = [&] (auto&& p, auto&& q) {\n    int a,b,c,d;\n    std::tie(a,b) = p;\n    std::tie(c,d) = q;\n    return a*c + b*d;\n  };\n\n  auto sub = [&] (auto&& p, auto&& q) {\n    int a,b,c,d;\n    std::tie(a,b) = p;\n    std::tie(c,d) = q;\n    return std::make_pair(a-c,b-d);\n  };\n\n  int q; std::cin >> q;\n  loop(q) {\n    std::pair<int,int> a,b,c,d;\n    std::cin>>a>>b>>c>>d;\n    auto p = sub(a,b);\n    auto q = sub(c,d);\n    if (det(p,q) == 0) {\n      std::cout << 2 << std::endl;\n    } else if (inp(p,q) == 0) {\n      std::cout << 1 << std::endl;\n    } else {\n      std::cout << 0 << std::endl;\n    }\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) begin(r),end(r)\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n#define vvl(v,w,h,init) vector<vector<ll>> v(w,vector<ll>(h,init))\n#define mp(a,b) make_pair(a,b)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\nusing pii = pair<int,int> ;\nusing pll = pair<ll,ll> ;\n\ntemplate<typename T>\nvoid O(T t){\n  cout << t << endl;\n}\n\n  const double EPS = 1e-8;\n  const double INF = 1e12;\n  typedef complex<double> P;//????´???°????????¢?????????????????¨?§£???\n  namespace std {\n    bool operator < (const P& a, const P& b) {//x????????????\n      return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n    bool sorty(const P& a, const P& b) {//y????????????\n      return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b);\n    }\n  }\n  double cross(const P& a, const P& b) {//??????\n    return imag(conj(a)*b);\n  }\n  double dot(const P& a, const P& b) {//??????\n    return real(conj(a)*b);\n  }\n\n  struct L : public vector<P> {//??´???\n    L(){};\n    L(const P &a, const P &b) {\n      push_back(a); push_back(b);\n    }\n  };\n\n  typedef vector<P> G;\n\n  struct C {//???\n    P p; double r;\n    C(){};\n    C(const P &p, double r) : p(p), r(r) { }\n  };\n\nint linejudge(const L &ab,const L &cd){\n  P a = ab[1] - ab[0],b = cd[1] - cd[0];\n  if(abs(cross(a,b)) < EPS){ // parallel\n    return 2;\n  }\n  else if(abs(dot(a,b)) < EPS){ //Orthogonal\n    return 1;\n  }\n  return 0;\n}\n\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  ll q;\n  cin >> q;\n  double x,y;\n  rep(i,q){\n    cin >> x >> y;\n    P a(x,y);\n    cin >> x >> y;\n    P b(x,y);\n    cin >> x >> y;\n    P c(x,y);\n    cin >> x >> y;\n    P d(x,y);\n    L ab(a,b),cd(c,d);\n    std::cout << linejudge(ab,cd) << std::endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-7;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct pt_t {\n\tdouble x, y;\n\tpt_t operator+(const pt_t &p) { return { x + p.x, y + p.y }; }\n\tpt_t operator-(const pt_t &p) { return { x - p.x, y - p.y }; }\n\tpt_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npt_t cross_point(line_t l, line_t m) {\n\tpt_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, pt_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npt_t rot(pt_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(pt_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(pt_t p, pt_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(max(min(p.x * q.x + p.y * q.y, 1.0), -1.0));\n\tdouble r1 = asin(max(min(p.x * q.y - p.y * q.x, 1.0), -1.0));\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, pt_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nbool on_same_line(pt_t p, pt_t q) {\n\tline_t l = solve_line(p.y, -p.x, p);\n\tif (dist(l, q) < eps) return true;\n\telse return false;\n}\n\nint main() {\n\tint qr; cin >> qr;\n\tLoop(i, qr) {\n\t\tpt_t p[4];\n\t\tLoop(j, 4) {\n\t\t\tcin >> p[j].x >> p[j].y;\n\t\t}\n\t\tline_t l = solve_line(p[1].y - p[0].y, p[0].x - p[1].x, p[0]);\n\t\tline_t m = solve_line(p[3].y - p[2].y, p[2].x - p[3].x, p[2]);\n\t\tpt_t lp = { l.a, l.b };\n\t\tpt_t mp = { m.a, m.b };\n\t\tdouble r = angle(lp, mp);\n\t\tcout << r << endl;\n\t\tif (nearlyeq(r, 0) || nearlyeq(r, M_PI) || nearlyeq(r, M_PI * 2)) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse if (nearlyeq(r, M_PI * 0.5) || nearlyeq(r, M_PI * 1.5)) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<vector>\n#include<string>\n#include<sstream>\n#include<iomanip>\n#include<utility>\n#include<cmath>\n#include<set>\nusing namespace std;\ntypedef long long int ll;\nconst double EPS=1e-10;\n\nbool equals(double a,double b)\n{\n\treturn a>b?a-b<EPS:b-a<EPS;\n}\n\nclass Point\n{\npublic:\n\tdouble x;\n\tdouble y;\n\tPoint(double inx=0.0,double iny=0.0):x(inx),y(iny){}\n\tPoint operator+(const Point &p){return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p){return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k){return Point(x*k,y*k);}\n\tPoint operator/(const double k){return Point(x/k,y/k);}\n\tPoint operator=(const Point &p){x=p.x;y=p.y;return *this;}\n\tbool operator<(const Point &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tbool operator==(const Point &p)const{return equals(x,p.x)&&equals(y,p.y);}\n\tdouble norm()\n\t{\n\t\treturn x*x+y*y;\n\t}\n\tdouble abs()\n\t{\n\t\treturn sqrt(norm());\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment\n{\npublic:\n\tPoint p1;\n\tPoint p2;\n\tVector getvector()\n\t{\n\t\treturn p2-p1;\n\t}\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point inc=Point(),double inr=0.0):c(inc),r(inr){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a,Vector b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\nconst int counter_clockwise=1;\nconst int clockwise=-1;\nconst int on_segment=0;\nconst int online_back=2;\nconst int online_front=-2;\n\ndouble norm(Vector a)\n{\n\treturn a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a)\n{\n\treturn sqrt(norm(a));\n}\n\nbool isorthogonal(Vector a,Vector b)\n{\n\treturn equals(dot(a,b),0.0);\n}\n\nbool isorthogonal(Point a1,Point a2,Point b1,Point b2)\n{\n\treturn isorthogonal(a1-a2,b1-b2);\n}\n\nbool isorthogonal(Segment s1,Segment s2)\n{\n\treturn equals(dot(s1.getvector(),s2.getvector()),0.0);\n}\n\nbool isparallel(Vector a,Vector b)\n{\n\treturn equals(cross(a,b),0.0);\n}\n\nbool isparallel(Point a1,Point a2,Point b1,Point b2)\n{\n\treturn isparallel(a1-a2,b1-b2);\n}\n\nbool isparallel(Segment s1,Segment s2)\n{\n\treturn equals(cross(s1.getvector(),s2.getvector()),0.0);\n}\n\nPoint project(Segment s,Point p)\n{\n\tVector base=s.getvector();\n\tdouble r=dot(p-s.p1,base)/norm(base);\n\treturn s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p)\n{\n\treturn project(s,p)*2.0-p;//p+(project(s,p)-p)*2.0\n}\n\ndouble getdistance(Point a,Point b)\n{\n\treturn abs(a-b);\n}\n\ndouble getdistancelp(Line l,Point p)//Line,Point\n{\n\tdouble s=abs(cross(l.p2-l.p1,p-l.p1));\n\treturn s/abs(l.getvector());\n}\n\ndouble getdistancesp(Segment s,Point p)\n{\n\tif(dot(s.getvector(),p-s.p1)<0.0)return abs(p-s.p1);\n\telse if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n\telse return getdistancelp(s,p);\n}\n\nint ccw_online(Point p0,Point p1,Point p2)\n{\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return counter_clockwise;\n\telse if(cross(a,b)<-EPS)return clockwise;\n\telse if(dot(a,b)<-EPS)return online_back;\n\telse if(a.norm()<b.norm())return online_front;\n\telse return on_segment;\n}\n\nint ccw(Point p0,Point p1,Point p2)\n{\n\tint c=ccw_online(p0,p1,p2);\n\tif(c==counter_clockwise||c==clockwise)return c;\n\telse return on_segment;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4)\n{\n\treturn ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0;\n}\n\nbool intersect(Segment s1,Segment s2)\n{\n\treturn intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getdistance(Segment s1,Segment s2)\n{\n\tif(intersect(s1,s2))return 0.0;\n\telse return min(min(getdistancesp(s1,s2.p1),getdistancesp(s1,s2.p2)),\n\t\t\tmin(getdistancesp(s2,s1.p1),getdistancesp(s2,s1.p2)));\n}\n\nPoint getcrosspoint(Segment s1,Segment s2)\n{\n\tVector base=s2.getvector();\n\tdouble d1=abs(cross(base,s1.p1-s2.p1));\n\tdouble d2=abs(cross(base,s1.p2-s2.p1));\n\tdouble t=d1/(d1+d2);\n\treturn s1.p1+s1.getvector()*t;\n}\n\npair<Point,Point> getcrosspoint(Circle c,Line l)\n{\n\tVector pr=project(l,c.c);\n\tVector e=l.getvector()/abs(l.getvector());\n\tdouble base=sqrt(c.r*c.r-norm(pr-c.c));\n\treturn make_pair(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p)\n{\n\treturn atan2(p.y,p.x);\n}\n\nPoint polar(double r,double theta)\n{\n\treturn Point(r*cos(theta),r*sin(theta));\n}\n\npair<Point,Point> getcrosspoint(Circle c1,Circle c2)\n{\n\tdouble d=abs(c2.c-c1.c);\n\tdouble a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2.0*c1.r*d));\n\tdouble t=arg(c2.c-c1.c);\n\treturn make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\nconst int Bottom=0;\nconst int Left=1;\nconst int Right=2;\nconst int Top=3;\n\nclass endPoint\n{\npublic:\n\tPoint p;\n\tint seg;//id of Point\n\tint st;//kind of Point\n\tendPoint(){}\n\tendPoint(Point inp,int inseg,int inst):p(inp),seg(inseg),st(inst){}\n\tbool operator<(const endPoint &ep)const\n\t{\n\t\tif(p.y==ep.p.y)\n\t\t{\n\t\t\treturn st<ep.st;//Bottom->Left->Right->Top\n\t\t}\n\t\telse return p.y<ep.p.y;\n\t}\n};\n\nendPoint EP[200000];\n\nint manhattanintersection(vector<Segment> s)\n{\n\tint n=s.size();\n\tdouble sto;\n\t\n\tfor(int i=0,k=0;i<n;i++)\n\t{\n\t\tif(s[i].p1.y==s[i].p2.y)\n\t\t{\n\t\t\tif(s[i].p1.x>s[i].p2.x)\n\t\t\t{\n\t\t\t\tsto=s[i].p1.x;\n\t\t\t\ts[i].p1.x=s[i].p2.x;\n\t\t\t\ts[i].p2.x=sto;\n\t\t\t}\n\t\t}\n\t\telse if(s[i].p1.y>s[i].p2.y)\n\t\t{\n\t\t\tsto=s[i].p1.y;\n\t\t\ts[i].p1.y=s[i].p2.y;\n\t\t\ts[i].p2.y=sto;\n\t\t}\n\t\t\n\t\tif(s[i].p1.y==s[i].p2.y)\n\t\t{\n\t\t\tEP[k++]=endPoint(s[i].p1,i,Left);\n\t\t\tEP[k++]=endPoint(s[i].p2,i,Right);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tEP[k++]=endPoint(s[i].p1,i,Bottom);\n\t\t\tEP[k++]=endPoint(s[i].p2,i,Top);\n\t\t}\n\t}\n\t\n\tsort(EP,EP+2*n);\n\t\n\tset<int> BT;\n\tBT.insert(1000000001);\n\tint cnt=0;\n\t\n\tfor(int i=0;i<2*n;i++)\n\t{\n\t\tif(EP[i].st==Top)BT.erase(EP[i].p.x);\n\t\telse if(EP[i].st==Bottom)BT.insert(EP[i].p.x);\n\t\telse if(EP[i].st==Left)\n\t\t{\n\t\t\tset<int>::iterator b=lower_bound(BT.begin(),BT.end(),s[EP[i].seg].p1.x);\n\t\t\tset<int>::iterator e=upper_bound(BT.begin(),BT.end(),s[EP[i].seg].p2.x);\n\t\t\tcnt+=distance(b,e);\n\t\t}\n\t}\n\t\n\treturn cnt;\n}\nPolygon andrewscan(Polygon s)\n{\n\tPolygon u,l;\n\tif(s.size()<=2)return s;\n\tsort(s.begin(),s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\t\n\tfor(int i=2;i<s.size();i++)\n\t{\n\t\tfor(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=clockwise;n--)\n\t\t{\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t\n\tfor(int i=s.size()-3;i>=0;i--)\n\t{\n\t\tfor(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=clockwise;n--)\n\t\t{\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\t\n\treverse(l.begin(),l.end());\n\tfor(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n\t\n\treturn l;\n}\nconst int in=2;\nconst int on=1;\nconst int out=0;\n\nint contain(Polygon g,Point p)\n{\n\tint n=g.size();\n\tbool x=false;\n\tPoint a,b;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\ta=g[i]-p;\n\t\tb=g[(i+1)%n]-p;\n\t\tif(abs(cross(a,b))<EPS&&dot(a,b)<EPS)return on;\n\t\tif(a.y>b.y)\n\t\t{\n\t\t\tPoint sto=a;\n\t\t\ta=b;\n\t\t\tb=sto;\n\t\t}\n\t\tif(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)x=!x;\n\t}\n\treturn x?in:out;\n}\nint main()\n{\n\t//Segment s;\n\t//cin>>s.p1.x>>s.p1.y>>s.p2.x>>s.p2.y;\n\tint q;cin>>q;\n\t//Point a;\n\tSegment s1,s2;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tcin>>s1.p1.x>>s1.p1.y>>s1.p2.x>>s1.p2.y>>s2.p1.x>>s2.p1.y>>s2.p2.x>>s2.p2.y;\n\t\tif(isparallel(s1,s2))cout<<2<<endl;\n\t\telse if(isorthogonal(s1,s2))cout<<1<<endl;\n\t\telse cout<<0<<endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll,ll> P;\nstruct pnt{\n    double x,y;\n};\nstruct line{\n    pnt a,b;\n};\nbool parallel(line p,line q){\n    double vl=(p.a.y-p.b.y)*(q.a.x-q.b.x);\n    double vr=(p.a.x-p.b.x)*(q.a.y-q.b.y);\n    return vl==vr;\n}\nbool orthogonal(line p,line q){\n    double vl=(p.a.y-p.b.y)*(q.a.y-q.b.y);\n    double vr=(p.a.x-p.b.x)*(q.a.x-q.b.x);\n    return vl==-vr;\n}\nint main(){\n    ll q;cin>>q;\n    while(q--){\n\tline p,q;\n\tcin>>p.a.x>>p.a.y>>p.b.x>>p.b.y;\n\tcin>>q.a.x>>q.a.y>>q.b.x>>q.b.y;\n\tif(parallel(p,q))cout<<2<<endl;\n\telse if(orthogonal(p,q))cout<<1<<endl;\n\telse cout<<0<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nint decide(Point p0, Point p1, Point p2, Point p3){\n    Vector v0 = p1 - p0;\n    Vector v1 = p3 - p2;\n\n    if(fabs(dot(v0, v1)) < EPS){\n        return 1;\n    }else if(fabs(cross(v0, v1)) < EPS){\n        return 2;\n    }else{\n        return 0;\n    }\n}\n\nint main(){\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n        scanf(\"%d\", &xp1);\n        scanf(\"%d\", &yp1);\n        scanf(\"%d\", &xp2);\n        scanf(\"%d\", &yp2);\n        scanf(\"%d\", &xp3);\n        scanf(\"%d\", &yp3);\n        \n        Point p0 = Point(xp0, yp0);\n        Point p1 = Point(xp1, yp1);\n        Point p2 = Point(xp2, yp2);\n        Point p3 = Point(xp3, yp3);\n\n        printf(\"%d\\n\", decide(p0, p1, p2, p3));\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "/**計算幾何学の問題を解く際に利用するクラス******/\n//http://skyblueryu.blog54.fc2.com/blog-entry-27.html\n#define _USE_MATH_DEFINES\n#include <cmath>\n#include <vector>\n#define EPS (pow(M_E,(double)-10))\n//マクロの書式については \n//http://www7b.biglobe.ne.jp/~robe/cpphtml/html01/cpp01030.html\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\n\nclass Point{\npublic:\n\tdouble x,y;\n\n\t//以下の記法に関しては\n\t//http://ameblo.jp/nana-2007-july/entry-10037680575.html\n\tPoint(double x = 0,double y = 0): x(x), y(y) {};\n\n\t/***演算子のオーバーロード***********/\n\tPoint operator + (Point p) { return Point(x + p.x,y + p.y);}\n\tPoint operator - (Point p) { return Point(x - p.x,y - p.y);}\n\tPoint operator * (double a) { return Point(a*x,a*y);}//スカラー倍\n\tPoint operator / (double a) { return Point(x/a,y/a);}//スカラー倍\n\t/***********************************/\n\n\tdouble norm() { return x*x+y*y;}//ベクトルのノルムを返す\n\tdouble abs() { return sqrt(norm());}//ベクトルの長さを返す\n\n\t/***演算子のオーバーロード2***********/\n\t//Pointはクラスオブジェクトなのでサイズが大きく値渡しは適さない\n\t//Point &pという記法は参照渡しでポインタでない変数\n\t//に対してアドレスを引数にとりたい場合に使う．\n\t//参照渡しとポインタ渡しについては以下\n\t//http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1320144958\n\t//http://homepage2.nifty.com/well/Reference.html#PASS_BY_REFERENCE\n\t//\n\t//Point &pの前のconst修飾子は関数内で引数のオブジェクトの内容を\n\t//勝手に書き換えないようにするために付けている．(const Point &p)\n\t//の後のconstはこの関数がconstメンバ関数であることを意味する．\n\t//constメンバ関数に関して詳しくは以下\n\t//http://www.s-cradle.com/developer/sophiaframework/tutorial/Cpp/const.html\n\n\tbool operator < (const Point &p) const{\n\t\t//(条件)?(処理1):(処理2)\n\t\t//条件が真なら処理1，偽なら処理2が実行される\n\t\treturn x != p.x ? x < p.x :y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\t/*************************************/\n\n};\n\ntypedef Point Vector;\n\n//ベクトルaとbの内積を計算する関数\n//これは参照渡しじゃなくていいんかいという疑問は正直ある\ndouble dot(Vector a,Vector b){\n\t//double dot(const Vector& a,const Vector& b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//ベクトルaとbの外積を計算する関数\ndouble cross(Vector a,Vector b){\n\t//double cross(const Vector& a,const Vector& b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n\n\n//線分を表す構造体\nstruct Segment{\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\n//円を表すクラス\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(),double r = 0.0):c(c), r(r) {}\n};\n\n//多角形の表現(多角形は点の列で表現できる)\ntypedef vector<Point> Polygon;\n\n\nint Q;//クエリ数\n\nint main(){\n\tscanf(\"%d\",&Q);\n\n\tPoint s1,s2,t1,t2;\n\tVector d1,d2;//方向ベクトル\n\n\tfor(int q = 0;q < Q;q++){\n\t\tscanf(\"%lf %lf\",&s1.x,&s1.y);\n\t\tscanf(\"%lf %lf\",&s2.x,&s2.y);\n\t\tscanf(\"%lf %lf\",&t1.x,&t1.y);\n\t\tscanf(\"%lf %lf\",&t2.x,&t2.y);\n\n\t\t//l1の方向ベクトル\n\t\td1.x = (s1.x - s2.x);\n\t\td1.y = (s1.y - s2.y);\n\n\t\t//l2の方向ベクトル\n\t\td2.x = (t1.x - t2.x);\n\t\td2.y = (t1.y - t2.y);\n\n\t\t//l1とl2が直行しているか調べる(内積を計算して0かどうか調べる)\n\t\tif(equals(dot(d1,d2),0.0)){\n\t\t\tprintf(\"1\\n\");\n\t\t\tcontinue;\n\t\t}else if(equals(d1.x*d2.y,d1.y*d2.x)){\n\t\t\tprintf(\"2\\n\");\n\t\t\tcontinue;\n\t\t}else{\n\t\t\tprintf(\"0\\n\");\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n\nusing namespace std;\n\ntypedef long long lint;\n\n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n\n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n\n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n\nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n  \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n  \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n  \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n  \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0): x(x), y(y){}\n\tPoint operator + (Point p){return Point(x + p.x, y + p.y);}\n\tPoint operator - (Point p){return Point(x - p.x, y - p.y);}\n\tPoint operator * (double a){return Point(x * a, y * a);}\n\tPoint operator / (double a){return Point(x / a, y / a);}\n\tPoint operator * (const Point &a){\n\t\treturn Point(x * a.x - y * a.y, x * a.y + y * a.x);\n\t}\n\tbool operator < (const Point &p) const {\n\t\treturn (x != p.x ? x < p.x : y < p.y);\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n\tif (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n\tif (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n\tif (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n\treturn (0); //p0--p2--p1 の順で一直線上\n}\n\nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n\nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n      \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    qs.resize(k - 1);\n    return (qs);\n}\n\ndouble getArea(Polygon t){\n    double ans = 0.0;\n\tt = normalize(t);\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n\nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n\treturn (abs(cross(p2 - p1, p4 - p3)) > EPS || 0);// 傾きが異なる\n//\t\tabs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n\treturn (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n\treturn (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n\treturn (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n\treturn (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n\treturn (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n\nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n\tdouble t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n\treturn (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n\treturn (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n\treturn (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n\treturn (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n\treturn (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n\tPoint r = projection(s1, s2, p);\n\tif (isIntersectSP(s1, s2, r)) return (abs(r - p));\n\treturn (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n\tif (isIntersectSS(s1, s2, t1, t2)) return (0);\n\treturn (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n\t\t\tmin(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n\tdouble d = cross(a2 - a1, b2 - b1);\n\tif (abs(d) < EPS) throw \"Segment is Paralell!\";\n\tPoint a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n\tvector<Point> res;\n\tif (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n\tdouble d = abs(c1 - c2);\n\tdouble rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n\tdouble rs = sqrt(r1 * r1 - rc * rc);\n\tPoint diff = (c2 - c1) / d;\n\tres.push_back(Point(c1 + diff * Point(rc, rs)));\n\tres.push_back(Point(c1 + diff * Point(rc, -rs)));\n\treturn (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n\tvector<Point> res;\n\tdouble dist = distanceLP(b1, b2, a);\n\tif (leq(dist, ra)){\n\t\tPoint s = projection(b1, b2, a);\n\t\tdist = sqrt(ra * ra - dist * dist);\n\t\tPoint t = (b2 - b1) / abs(b2 - b1);\n\t\tres.push_back(s + t * dist);\n\t\tres.push_back(s - t * dist);\n\t}\n\treturn (res);\n}\n\nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n\nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n  \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n  \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n  \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n\nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n\nint main()\n{\n\tint n;\n\t\n\tscanf(\"%d\", &n);\n\t\n\tfor (int i = 0; i < n; i++){\n\t\tPoint p0, p1, p2, p3;\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &p0.x, &p0.y, &p1.x, &p1.y, &p2.x, &p2.y, &p3.x, &p3.y);\n\t\tif (!isIntersectLL(p0, p1, p2, p3)) printf(\"2\\n\");\n\t\telse {\n\t\t\tif (eq(dot(p1 - p0, p3 - p2), 0)) printf(\"1\\n\");\n\t\t\telse printf(\"0\\n\");\n\t\t}\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define repr(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define reprrev(i,a,b) for(int i=b-1;i>=a;i--) // [a, b)\n#define reprev(i,n) reprrev(i,0,n)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\n\n/* attention\n    long longのシフト演算には気をつけよう\n    タイポした時のデバッグが死ぬほどきつくなるので変数名は最低3字くらい使った方がいいかも\n    sizeは(int)とキャストしよう\n    cin.tie(0);\n    ios::sync_with_stdio(false);<- これら、printfとかと併用しない方が良さそう\n\n*/\n\nconst ll mod = 1e9+7;\n\nvoid chmod(ll &M){\n    if(M >= mod) M %= mod;\n    else if(M < 0){\n        M += (abs(M)/mod + 1)*mod;\n        M %= mod;\n    }\n}\n\nll modpow(ll x, ll n){\n    if(n==0) return 1;\n    ll res=modpow(x, n/2);\n\n    if(n%2==0) return res*res%mod;\n    else return res*res%mod*x%mod;\n}\n\nint getl(int i, int N) { return i==0? N-1:i-1; };\nint getr(int i, int N) { return i==N-1? 0:i+1; };\n\n\n// 線分 ab の偏角 返り値は[-π, π]\ndouble argument(const pair<double, double> &a, const pair<double, double> &b){\n    double ax=a.first, ay=a.second, bx=b.first, by=b.second;\n    return atan2(by-ay, bx-ax);\n}\n\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n\n\nlong double const EPS = (1e-10);\nbool equal(long double const a, long double const b) { return fabs(a-b) < EPS; }\n\nstruct Point {\n    long double x, y;\n    Point(long double _x=0, long double _y=0) : x(_x), y(_y) {}\n\n    Point operator + (Point const & p) const { return Point{x + p.x, y + p.y}; }\n    Point & operator += (Point const & p) { x += p.x; y += p.y; return *this; }\n    Point operator - (Point const & p) const { return Point{x - p.x, y - p.y}; }\n    Point & operator -= (Point const & p) { x -= p.x; y -= p.y; return *this; }\n    Point operator * (long double a) const { return Point{a*x, a*y}; }\n    Point & operator *= (long double a) { x *= a; y *= a; return *this; }\n    Point operator / (long double a) const { return Point{x/a, y/a}; }\n\n    long double norm() { return x*x + y*y; }\n    long double abs() { return sqrt(norm()); }\n    \n    bool operator < (Point const & p) const { return x != p.x ? x < p.x : y < p.y; }\n    bool operator == (Point const & p) const { return equal(x, p.x) && equal(y, p.y); }\n\n    void print() { cout << x << ' ' << y << \"\\n\"; }\n};\nusing Vector = Point;\n\nstruct Segment{\n    Point p1, p2;\n    Segment(Point _p1, Point _p2)\n        : p1(_p1), p2(_p2) {}\n};\nusing Line = Segment;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point _c, double _r)\n        : c(_c), r(_r) {}\n};\nusing Polygon = vector<Point>;\n\n// 内積 外積 外積は大きさを返す\n// https://mathtrain.jp/gaiseki\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n// ベクトルの直交判定　平行判定\nbool isOrthogonal(Vector const & a, Vector const & b) { return equal(dot(a, b), 0.0); }\nbool isOrthogonal(Point const & a1, Point const & a2, Point const & b1, Point const & b2) { return isOrthogonal(a1-a2, b1-b2); }\nbool isOrthogonal(Segment const & s1, Segment const & s2) { return isOrthogonal(s1.p1 - s1.p2, s2.p1 - s2.p2); }\nbool isParallel(Vector const & a, Vector const & b) { return equal(cross(a, b), 0); }\nbool isParallel(Point const & a1, Point const & a2, Point const & b1, Point const & b2) { return isParallel(a1-a2, b1-b2); }\nbool isParallel(Segment const & s1, Segment const & s2) { return isParallel(s1.p1-s1.p2, s2.p1-s2.p2); }\n\n// 線分 s に対する点 p の射影\nPoint project(Segment const & s, Point const & p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n// 線分 s を対称軸とした点 p の線対称点\nPoint reflect(Segment const & s, Point const & p) { return p + (project(s, p) - p) * 2.0; }\n// 線分p0-p1 に対して線分 p0-p2 が反時計回りなのか直線上なのか線分上なのか...\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;   // p2-p0-p1\nstatic const int ONLINE_FRONT = -2; // p0-p1-p2\nstatic const int ON_SEGMENT = 0;    // p0-p2-p1\nint ccw(Point const & p0, Point const & p1, Point const & p2){\n    Vector a = p1 - p0, b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// 線分 p1-p2 と線分 p3-p4 の交差判定（交点を持てば true）\nbool intersect(Point const & p1, Point const & p2, Point const & p3, Point const & p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment const & s1, Segment const & s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n\n\nint main(){\n    cin.tie(nullptr);\n    ios::sync_with_stdio(false);\n\n    int q; cin >> q;\n    while(q--) {\n        int a, b, c, d, e, f, g, h; cin >> a >> b >> c >> d >> e >> f >> g >> h;\n        Point p1(a, b), p2(c, d), p3(e, f), p4(g, h);\n        Segment s1(p1, p2), s2(p3, p4);\n        if(isParallel(s1, s2)) cout << 2 << endl;\n        else if (isOrthogonal(s1, s2)) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define NIL -2\n#define INF 1000000001\n#define EPS 1e-10\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\nclass Point{\n    public:\n    double x,y;\n\n    Point(double x = 0,double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p){ return Point(x+p.x, y+p.y); }\n    Point operator - (Point p){ return Point(x-p.x, y-p.y); }\n    Point operator * (double k){ return Point(x*k,y*k);      }\n    Point operator / (double k){ return Point(x/k,y/k);      }\n\n    double norm(){ return x*x + y*y;}\n    double abs(){ return sqrt(norm());}\n    double dot(Point p){\n        return x*p.x + y*p.y;\n    }\n    double prod(Point p){\n        return x*p.y - y*p.x;\n    }\n\n    bool operator < (Point &p){\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator == (Point &p){\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n  \n};\ntypedef Point Vector;\n\nint main(){\n    int q;\n    scanf(\"%d\",&q);\n    double x0,y0,x1,y1,x2,y2,x3,y3;\n    for(int i = 0;i < q;i++){\n        scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf \",&x0,&y0,&x1,&y1,&x2,&y2,&x3,&y3);\n        Vector p10(x1-x0,y1-y0);\n        Vector p32(x3-x2,y3-y2);\n        if(p10.dot(p32) == 0) printf(\"1\\n\");\n        else if(p10.prod(p32) == 0) printf(\"2\\n\");\n        else printf(\"0\\n\");\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <math.h>\nconst double EPS = 1e-10;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\t/*vector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}*/\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double para(vector v1, vector v2) {\n\treturn sqrt(v1.x*v1.x + v1.y*v1.y)*sqrt(v2.x*v2.x + v2.y*v2.y);\n}\nint main() {\n\tdouble n, x1, x2, x3, x4, y1, y2, y3, y4;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tvector v1(x2 - x1, y2 - y1);\n\t\tvector v2(x4 - x3, y4 - y3);\n\t\tdouble ans = dot(v1, v2);\n\t\tif (ans == 0) cout << 1 << endl;\n\t\telse if (fabs(ans - para(v1, v2)) < EPS || fabs(2*ans - fabs((ans - para(v1, v2)))) < EPS) cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)<EPS))\n\nclass Point{\n    public:\n    double x, y;\n\n    Point(double x=0, double y=0):x(x), y(y){}\n\n    Point operator + (Point p) {return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) {return Point(x-p.x, y-p.y); }\n    Point operator * (double a) {return Point(a*x, a*y); }\n    Point operator / (double a) {return Point(a*x, a*y); }\n\n    double abs() {return sqrt(norm());}\n    double norm() {return x*x+y*y; }\n\n    bool operator < (const Point &p) const{\n        return x != p.x ? x<p.x: y<p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x+a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x*b.y -a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b), 0.);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a,b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1-a2, b1-b2);\n}\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n    int q;\n    Point p0, p1, p2, p3;\n    cin >> q;\n    for(int i=0; i<q; i++){\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        if(isParallel(p0, p1, p2, p3)){\n            printf(\"2\\n\");\n        }\n        else if(isOrthogonal(p0, p1, p2, p3)){\n            printf(\"1\\n\");\n        }\n        else printf(\"0\\n\");\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing ull = unsigned long long;\n//#define ll long long\ntemplate<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }\n#define rep(i, n) REP(i, 0, n)\n#define rep_rev(i, n) for (int (i) = (int)(n) - 1 ; (i) >= 0 ; --(i))\n#define ALL(v) v.begin(), v.end()\n#define MSG(a) cout << #a << \" \" << a << endl;\n#define REP(i, x, n) for(int i = x; i < n; i++)\n#define all(x) (x).begin(),(x).end()\nll t1,t2;\nconst ll mod = 1000000007;\nconst int INF = 1e9;\nconst ll INFLONG = 1e18;\nvoid swap(ll *x,ll *y){\n  ll tmp;\n  tmp = *x;\n  *x = *y;\n  *y = tmp;\n}\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x,y;\n    Point(double x,double y):x(x),y(y){}\n    Point():x(0),y(0){}\n\n    Point operator + (Point p) {return Point(x + p.x,y + p.y);}\n    Point operator - (Point p ){return Point(x - p.x,y - p.y);}\n    Point operator * (Point p ){return Point(x * p.x,y * p.y);}\n    Point operator / (Point p ){return Point(x / p.x,y / p.y);}\n\n    double abs(){return sqrt(norm());}\n    double norm(){return x * x + y * y;}\n\n    bool operator < (const Point & p) const {\n      return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n      return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nint main(){\n  ll n;\n  cin >> n;\n  vector<Vector> p(4);\n  double d1,d2;\n  rep(i,n){\n    rep(j,4){\n      cin >> d1 >> d2;\n      p[j] = Vector(d1,d2);\n    }\n    ll ans = 0;\n    if(0 == cross(p[0] - p[1],p[2] - p[3])){\n      ans = 2;\n    }else if(0 == dot(p[0] - p[1],p[2] - p[3])){\n      ans = 1;\n    }\n    cout << ans << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define FOR(i,n,m) for(int i=(int)(n); i<=(int)(m); i++)\n#define RFOR(i,n,m) for(int i=(int)(n); i>=(int)(m); i--)\n#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)\n#define RITR(x,c) for(__typeof(c.rbegin()) x=c.rbegin();x!=c.rend();x++)\n#define setp(n) fixed << setprecision(n)\n\ntemplate<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }\n\n#define ll long long\n#define vll vector<ll>\n#define vi vector<int>\n#define pll pair<ll,ll>\n#define pi pair<int,int>\n\n#define all(a) (a.begin()),(a.end())\n#define rall(a) (a.rbegin()),(a.rend())\n#define fi first\n#define se second\n#define pb push_back\n#define mp make_pair\n#define ins insert\n\nusing namespace std;\n\n//-------------------------------------------------\n//--Geometry Template (Plane)\n//-------------------------------------------------\n\nusing lf = double;\nconst lf EPS = 1e-9;\nconst lf PI = acos(-1);\n\n#define sgn(x) (((x)<-EPS)?-1:((x)>EPS)?1:0)\n#define EQ(x,y) (sgn((y)-(x))==0)\n\nstruct V {\n    lf x,y;\n    V(){}\n    V(lf x, lf y):x(x),y(y){}\n    V(const V &v):x(v.x),y(v.y){}\n    V& operator+=(const V &v){x+=v.x; y+=v.y; return *this;}\n    V& operator-=(const V &v){x-=v.x; y-=v.y; return *this;}\n    V& operator*=(lf k){x*=k; y*=k; return *this;}\n    V& operator/=(lf k){x/=k; y/=k; return *this;}\n    V operator+(const V &v){return V(*this)+=v;}\n    V operator-(const V &v){return V(*this)-=v;}\n    V operator*(lf k){return V(*this)*=k;}\n    V operator/(lf k){return V(*this)/=k;}\n    V operator-(){return V(-x,-y);}\n    lf sq(){return x*x+y*y;}\n    lf norm(){return sqrt(sq());}\n    V unit(){return V(*this)/=norm();}\n    lf arg(){return atan2(y,x);}\n    V rot(lf c, lf s){return V(x*c-y*s,x*s+y*c);}\n    V rot(lf a){return rot(sin(a),cos(a));}\n    V rot90(){return V(-y,x);}\n    bool operator<(const V &v){return x<v.x;}\n    friend ostream& operator<<(ostream &os, const V &v){return os<<'('<<v.x<<\", \"<<v.y<<')';}\n};\n\nlf dot(const V &a, const V &b){return a.x*b.x+a.y*b.y;}\nlf det(const V &a, const V &b){return a.x*b.y-a.y*b.x;}\n\nint ccw(V a, V b, V c){\n    b-=a; c-=a;\n    if (sgn(det(b,c))>0) return 1;\n    else if(sgn(det(b,c))<0) return -1;\n    else if(sgn(dot(b,c))<0) return 2;\n    else if(sgn(b.norm()-c.norm())<0) return -2;\n    return 0;\n}\n\nstruct Line {\n    V p,q;\n    Line(){}\n    Line(const V &p, const V &q):p(p),q(q){}\n    Line(const Line &l):Line(l.p,l.q){}\n    V unit(){return (q-p).unit();}\n    lf arg(){return (q-p).arg();}\n    Line rot(lf c, lf s){return Line(p.rot(c,s),q.rot(c,s));}\n    Line rot(lf a){return Line(p.rot(a),q.rot(a));}\n    Line rot90(){return Line(p.rot90(),q.rot90());}\n};\n\nstruct Segment : Line {\n    Segment(){}\n    Segment(const V &p, const V &q):Line(p,q){}\n    Segment(const Segment &s):Line(s){}\n    lf sq(){return (Line::q-Line::p).sq();}\n    lf norm(){return (Line::q-Line::p).norm();}\n};\n\n// functions about lines\nbool parallel(V &a, V &b){return EQ(det(a,b),0.0);}\nbool parallel(Line &a, Line &b){return EQ(det(a.q-a.p,b.q-b.p),0.0);}\nbool orthogonal(V &a, V &b){return EQ(dot(a,b),0.0);}\nbool orthogonal(Line &a, Line &b){return EQ(dot(a.q-a.p,b.q-b.p),0.0);}\n\nbool samel(Line &a, Line &b){return parallel(a,b)&&EQ(det(a.q-a.p,b.p-a.p),0.0);}\nbool insec(Line &a, Line &b){return !parallel(a,b);}\nbool insec(Segment &a, Segment &b){\n    int c1 = ccw(a.p,a.q,b.p)*ccw(a.p,a.q,b.q);\n    int c2 = ccw(b.p,b.q,a.p)*ccw(b.p,b.q,a.q);\n    return (c1<=0 && c2<=0);\n}\nbool insec(Line &a, Segment &b){return ccw(a.p,a.q,b.p)*ccw(a.p,a.q,b.q)<=0;}\n\n// use only if lines have intersection\nV cpoint(Line &a, Line &b){\n    V r(a.q-a.p);\n    r *= det(b.p-a.p,b.q-b.p)/det(a.q-a.p,b.q-b.p);\n    return a.p+r;\n}\n\nlf distance(V &a, V &b){return (b-a).norm();}\nlf distance(Line &l, V &v){return abs(det((l.q-l.p).unit(),v-l.p));}\nlf distance(Line &a, Line &b){return (parallel(a,b))?distance(a,b.p):0.0;}\nlf distance(Segment &s, V &v){\n    if (sgn(dot(s.q-s.p,v-s.p))<0) return distance(s.p,v);\n    else if(sgn(dot(s.p-s.q,v-s.q))<0) return distance(s.q,v);\n    return distance((Line&)s,v);\n}\nlf distance(Segment &a, Segment &b){\n    if (insec(a,b)) return 0.0;\n    lf A=min(distance(a,b.p),distance(a,b.q));\n    lf B=min(distance(b,a.p),distance(b,a.q));\n    return min(A,B);\n}\nlf distance(Line &a, Segment &b){\n    if (insec(a,b)) return 0.0;\n    return min(distance(a,b.p),distance(a,b.q));\n}\n\nV subdiv(V &a, V &b, lf m, lf n){return (a*n+b*m)/(m+n);}\nV outside(V &a, V &b, lf m, lf n){return (-a*n+b*m)/(m-n);}\nV ppfoot(Line &l, V &v){\n    V u = (l.q-l.p).unit();\n    return l.p+u*dot(u,v-l.p);\n}\n\nLine vbsector(V &a, V &b){\n    V m = (a+b)/2;\n    return Line(m, m+(b-a).rot90());\n}\nLine absector(V &c, V &a, V &b){\n    lf m=(a-c).norm(), n=(b-c).norm();\n    return Line(c,subdiv(a,b,m,n));\n}\nLine perpend(V &c, V &a, V &b){return Line(c,c+(b-a).rot90());}\n\n//-------------------------------------------------\n\nint main(void)\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    int t; cin>>t;\n    while(t--){\n        int a,b,c,d; cin>>a>>b>>c>>d;\n        Line l1(V(a,b), V(c,d));\n        cin>>a>>b>>c>>d;\n        Line l2(V(a,b), V(c,d));\n        if (parallel(l1,l2)) cout<<\"2\\n\";\n        else if (orthogonal(l1,l2)) cout<<\"1\\n\";\n        else cout<<\"0\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(x * a, y * a); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x; \n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint main()\n{\n    int q;\n    double x1, x2, x3, x4, y1, y2, y3, y4;\n    cin >> q;\n    for (int i = 0; i != q; ++i)\n    {\n        cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n        Point p1 = Point(x1, y1);\n        Point p2 = Point(x2, y2);\n        Point p3 = Point(x3, y3);\n        Point p4 = Point(x4, y4);\n        if (isOrthogonal(p1, p2, p3, p4))\n        {\n            cout << 1 << endl;\n        }\n        else if (isParallel(p1, p2, p3, p4))\n        {\n            cout << 2 << endl;\n        }\n        else\n        {\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <iomanip>\n#include <numeric>\n#include <utility>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n#include <unordered_map>\n#include <unordered_set>\n\nusing namespace std;\n\n#define ll long long\n#define ull unsigned long long\n#define INF (1 << 29)\n#define LLINF (1LL << 61)\n#define MOD7 1000000007\n#define MOD9 1000000009\n#define EPS 1e-9\n#define P pair<int, int>\n#define pii pair<int, int>\n#define pll pair<ll, ll>\n#define pul pair<ull, ull>\n#define all(a) (a).begin(), (a).end()\n#define FOR(i,a,b) for (int i=(a);i<(b);++i)\n#define RFOR(i,a,b) for (int i=(b)-1;i>=(a);--i)\n#define REP(i,n) for (int i=0;i<(n);++i)\n#define RREP(i,n) for (int i=(n)-1;i>=0;--i)\n#define TO_STRING(VariableName) # VariableName\n\nvoid YES() { cout << \"YES\" << endl; }\nvoid NO() { cout << \"NO\" << endl; }\nvoid Yes() { cout << \"Yes\" << endl; }\nvoid No() { cout << \"No\" << endl; }\nvoid yes() { cout << \"yes\" << endl; }\nvoid no() { cout << \"no\" << endl; }\n\nclass Point;\nclass Segment;\nclass Circle;\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = vector<Point>;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double k) { return Point(x * k, y * k); }\n\tPoint operator/(double k) { return Point(x / k, y / k); }\n\n\tbool operator<(const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator==(const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n\tfriend istream& operator>>(istream& stream, Point& p) {\n\t\tdouble x, y;\n\t\tstream >> x >> y;\n\t\tp.x = x;\n\t\tp.y = y;\n\t\treturn stream;\n\t}\n\n\tfriend ostream& operator<<(ostream& stream, const Point& p) {\n\t\tstream << fixed << setprecision(10) << p.x << \" \" << p.y;\n\t\treturn stream;\n\t}\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tdouble dot(Vector v) {\n\t\treturn x * v.x + y * v.y;\n\t}\n\n\tdouble cross(Vector v) {\n\t\treturn x * v.y - y * v.x;\n\t}\n};\n\n#define CLOCKWISE 1\n#define COUNTER_CLOCKWISE -1\n#define ONLINE_BACK 2\n#define ONLINE_FRONT -2\n#define ON_SEGMENT 0\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\n\tSegment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\t\n\tfriend istream& operator>>(istream& stream, Segment& s) {\n\t\tPoint p1, p2;\n\t\tstream >> p1 >> p2;\n\t\ts.p1 = p1;\n\t\ts.p2 = p2;\n\t\treturn stream;\n\t}\n\n\tfriend ostream& operator<<(ostream& stream, const Segment& s) {\n\t\tstream << fixed << setprecision(10) << s.p1.x << \" \" << s.p1.y << \" \";\n\t\tstream << fixed << setprecision(10) << s.p2.x << \" \" << s.p2.y;\n\t\treturn stream;\n\t}\n\n\tPoint project(Point p) {\n\t\tPoint base = p2 - p1;\n\t\tdouble r = (p - p1).dot(base) / base.norm();\n\t\treturn p1 + base * r;\n\t}\n\n\tPoint refrect(Point p) {\n\t\treturn p + (project(p) - p) * 2;\n\t}\n\n\tint ccw(Point p) {\n\t\tVector a = p2 - p1;\n\t\tVector b = p - p1;\n\t\tif (a.cross(b) > EPS) return COUNTER_CLOCKWISE;\n\t\tif (a.cross(b) < -EPS) return CLOCKWISE;\n\t\tif (a.dot(b) < -EPS) return ONLINE_BACK;\n\t\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\t\treturn ON_SEGMENT;\n\t}\n\n\tbool isOrthogonal(Segment s) {\n\t\tif (fabs((p2 - p1).dot(s.p2 - s.p1)) < EPS)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\tbool isParallel(Segment s) {\n\t\tif (fabs((p2 - p1).cross(s.p2 - s.p1)) < EPS)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n};\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) : c(c), r(r) {}\n};\n\nint main() {\n\tSegment s1, s2;\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> s1 >> s2;\n\t\tif (s1.isOrthogonal(s2))\n\t\t\tcout << 1 << endl;\n\t\telse if (s1.isParallel(s2))\n\t\t\tcout << 2 << endl;\n\t\telse\n\t\t\tcout << 0 << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<cmath>\n\nstruct Point{ double x, y; };\n\nPoint set_p(double a, double b)\n{\n    Point p;\n    p.x = a; p.y = b;\n    return p;\n}\n\nstruct Vector{ double vx, vy; };\n\nVector set_v(const Point &p1, const Point &p2)\n{\n    Vector v;\n    v.vx = p2.x - p1.x;\n    v.vy = p2.y - p1.y;\n    return v;\n}\n\ndouble inpro(const Vector &v1, const Vector &v2)\n{\n    return (v1.vx * v2.vx) + (v1.vy * v2.vy);\n}\n\ndouble det2(const Vector &v1, const Vector &v2)\n{\n\treturn (v1.vx * v2.vy) - (v1.vy * v2.vx);\n}\n\nint main()\n{\n    int q;\n    scanf(\"%d\", &q);\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    for(int i = 0; i < q; i++){\n        scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n        Vector V01 = set_v(set_p(x0, y0), set_p(x1, y1));\n        Vector V23 = set_v(set_p(x2, y2), set_p(x3, y3));\n        if(det2(V01, V23) == 0){ printf(\"2\\n\"); }\n        else if(inpro(V01, V23) == 0){ printf(\"1\\n\"); }\n        else{ printf(\"0\\n\"); }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nclass Point {\n    public:\n    double x, y;\n    \n    Point(double x = 0, double y = 0): x(x), y(y) {}\n    \n    Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n    Point operator * (double a) {return Point(a * x, a * y); }\n    Point operator / (double a) {return Point(x / a, y / a); }\n    \n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n    \n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; \n    }\n};\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\n    public:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) {\n    return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a) {\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\n\nint main() {\n    int n;\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    Segment s1, s2;\n    cin >> n;\n    for ( int i = 0; i < n; i++ ) {\n        cin >> x0 >> y0 >> x1 >> y1\n            >> x2 >> y2 >> x3 >> y3;\n        s1.p1 = Point(x0, y0); s1.p2 = Point(x1, y1);\n        s2.p1 = Point(x2, y2); s2.p2 = Point(x3, y3);\n        if ( isOrthogonal(s1, s2) ) {\n            cout << 1 << endl;\n            continue;\n        }\n        if ( isParallel(s1, s2) ) {\n            cout << 2 << endl;\n            continue;\n        }\n        cout << 0 << endl;\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define eps (1e-10)\n#define equals(a,b) (fabs((a)-(b))<eps)\nstruct point{\n    double x,y;\n    point(){}\n    point(double x,double y):x(x),y(y){}\n    point operator + (point &p){return point(x+p.x,y+p.y);}\n    point operator - (point &p){return point(x-p.x,y-p.y);}\n    point operator * (double k){return point(x*k,y*k);}\n    point operator / (double k){return point(x/k,y/k);}\n\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n\n    bool operator < (const point &p){\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator == (const point &p){\n        return fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n    }\n};\n//内积\ndouble dot(point a,point b)\n{\n    return a.x*b.x+a.y*b.y;\n}\n//外积\ndouble cross(point a,point b){\n    return a.x*b.y-a.y*b.x;\n}\n\nint isorthogonal(point a,point a1,point b,point b1)\n{\n    return fabs(dot(a1-a,b1-b)-0.0)<eps;\n}\n\nint isparallel(point a,point a1,point b,point b1)\n{\n    return fabs(cross(a1-a,b1-b)-0.0)<eps;\n}\n\nint main()\n{\n    int n;\n    point a,a1,b,b1;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        cin>>a.x>>a.y>>a1.x>>a1.y>>b.x>>b.y>>b1.x>>b1.y;\n        if(isorthogonal(a,a1,b,b1)){\n            printf(\"1\\n\");\n        }else if(isparallel(a,a1,b,b1)){\n            printf(\"2\\n\");\n        }else{\n            printf(\"0\\n\");\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n\n#define EPS 0.00000000001L\n\n#define PI 3.141592653589793238462643383279L\n\nint main()\n{\n    int q, x1, y1, x2, y2, x3, y3, x4, y4;\n    \n    scanf(\"%d\", &q);\n    \n    for(int i = 0; i < q; i++)\n    {\n        scanf(\"%d\", &x1);\n        scanf(\"%d\", &y1);\n        scanf(\"%d\", &x2);\n        scanf(\"%d\", &y2);\n        scanf(\"%d\", &x3);\n        scanf(\"%d\", &y3);\n        scanf(\"%d\", &x4);\n        scanf(\"%d\", &x4);\n        \n        long double angle1 = atan2l(y2 - y1, x2 - x1);\n        long double angle2 = atan2l(y4 - y3, x4 - x3);\n        \n        long double sa = labs(angle2 - angle1);\n        \n        if(sa < -EPS) { sa += PI * 2.0; }\n        \n        if(sa == PI * 0.5 || sa == PI * 1.5)\n        {\n            cout << 1 << endl;\n        }\n        else if(sa == PI || sa == 0)\n        {\n            cout << 2 << endl;\n        }\n        else\n        {\n            cout << 0 << endl;\n        }\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n\n#define EPS 0.00000000001L\n\n#define PI 3.141592653589793238462643383279L\n\nint main()\n{\n    int q, x1, y1, x2, y2, x3, y3, x4, y4;\n    \n    scanf(\"%d\", &q);\n    \n    for(int i = 0; i < q; i++)\n    {\n        scanf(\"%d\", &x1);\n        scanf(\"%d\", &y1);\n        scanf(\"%d\", &x2);\n        scanf(\"%d\", &y2);\n        scanf(\"%d\", &x3);\n        scanf(\"%d\", &y3);\n        scanf(\"%d\", &x4);\n        scanf(\"%d\", &y4);\n        \n        long double angle1 = atan2l(y2 - y1, x2 - x1);\n        long double angle2 = atan2l(y4 - y3, x4 - x3);\n        \n        long double sa = fabsl(angle2 - angle1);\n        \n        if(sa < -EPS) { sa += PI * 2.0; }\n\n        if((sa - EPS < PI * 0.5 && PI * 0.5 < sa + EPS) || (sa - EPS < PI * 1.5 && PI * 1.5 < sa + EPS))\n        {\n            printf(\"1\\n\");\n        }\n        else if(sa == PI || sa == 0)\n        {\n            printf(\"2\\n\");\n        }\n        else\n        {\n            printf(\"0\\n\");\n        }\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\nint main()\n{\n    long long int xp0, xp1, xp2, xp3, yp0, yp1, yp3, yp2, diffx0, diffy0, diffx1, diffy1, test;\n    int res;\n    double m1, m2;\n    scanf(\"%lld\", &test);\n    while(test--)\n    {\n        scanf(\"%lld%lld%lld%lld%lld%lld%lld%lld\", &xp0, &yp0, &xp1, &yp1, &xp2, &yp2, &xp3, &yp3);\n        diffx0 = xp1 - xp0;\n        diffy0 = yp1 - yp0;\n        diffx1 = xp3 - xp2;\n        diffy1 = yp3 - yp2;\n        if(diffx0 == 0)\n        {\n            if(diffx1 == 0)\n            {\n                res = 2;\n            }\n            else if(diffy1 == 0)\n            {\n                res = 1;\n            }\n        }\n        else if(diffx1 == 0)\n        {\n            if(diffx0 == 0)\n            {\n                res = 2;\n            }\n            else if(diffy0 == 0)\n            {\n                res = 1;\n            }\n        }\n        else\n        {\n            m1 = (double)diffy0/diffx0;\n            m2 = (double)diffy1/diffx1;\n            if(m1 == m2)    res = 2;\n            else if(m1 * m2 == -1)  res = 1;\n            else res = 0;\n        }\n        printf(\"%d\\n\", res);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <typeinfo>\n#include <vector>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<25;\nconst double pi=acos(-1);\nconst double eps=1e-8;\nconst vi emp;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point p){\n\t\treturn point{x+p.x,y+p.y};\n\t}\n\tpoint operator-(point p){\n\t\treturn point{x-p.x,y-p.y};\n\t}\n\tpoint operator*(double p){\n\treturn point{x*p,y*p};\n\t}\n\tpoint operator/(double p){\n\t\tif(!p) return point{0,0}; \n\t\treturn point{x/p,y/p};\n\t}\n\tbool operator==(point p){\n\t\treturn fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n\t}\n};\n\ntypedef pair<point,point> pp;\nconst point O{0,0};\n\nclass Geom{\n\tpublic:\n\tdouble Length(point x,point y){\n\t\tpoint z=y-x;\n\t\treturn sqrt(z.x*z.x+z.y*z.y);\n\t}\n\tdouble IP(point p,point q){\n\t\treturn p.x*q.x+p.y*q.y;\n\t}\n\tdouble CP(point p,point q){\n\t\treturn p.x*q.y-q.x*p.y;\n\t}\n\tstring Parallel_Orthogonal(pp a,pp b){\n\t\tpoint A=a.second-a.first,B=b.second-b.first;\n\t\tdouble ip=IP(A,B),cp=CP(A,B);\n\t\tif(cp<eps&&cp>-eps) return \"Parallel\";\n\t\tif(ip<eps&&ip>-eps) return \"Orthogonal\";\n\t\telse return \"Commonly\";\n\t}\n\tvoid Point_in(point& p){\n\t\tcin>>p.x>>p.y;\n\t}\n};\n\nint Q;\nvector<point> p(4);\n\nint main(){\n\tGeom geo;\n\tcin>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tfor(int j=0;j<4;j++) geo.Point_in(p[j]);\n\t\tstring ans=geo.Parallel_Orthogonal(pp(p[0],p[1]),pp(p[2],p[3]));\n\t\tif(ans==\"Parallel\") cout<<2<<endl;\n\t\telse if(ans==\"Orthogonal\") cout<<1<<endl;\n\t\telse cout<<0<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "/*\nw2sc\n2019/12/19\n19:43:48\n*/\n#include <bits/stdc++.h>\n#define ull unsigned long long\n#define ll long long\nusing namespace std;\nconst double EPS=1e-10;\nint q;\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double xx,double yy){x=xx,y=yy;}\n    Point operator +(Point A){return Point(x+A.x,y+A.y);}\n    Point operator -(Point A){return Point(x-A.x,y-A.y);}\n    double operator *(Point A){return x*A.x+y*A.y;}\n    double operator ^(Point A){return x*A.y-y*A.x;}\n};\ntypedef Point Vec;\nint main()\n{\n    cin>>q;\n    while(q--)\n    {\n        Point A,B;\n        Vec a,b;\n        scanf(\"%lf%lf%lf%lf\",&A.x,&A.y,&B.x,&B.y);\n        a=A-B;\n        scanf(\"%lf%lf%lf%lf\",&A.x,&A.y,&B.x,&B.y);\n        b=A-B;\n        if(fabs(a*b)<EPS) puts(\"1\");\n        else if(fabs(a^b)<EPS) puts(\"2\");\n        else puts(\"0\");\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing Int = long long;\n//BEGIN CUT HERE\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define PI 3.141592653589793238\n \n// COUNTER CLOCKWISE\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\n//Intercsect Circle & Circle\nstatic const int ICC_SEPERATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n  Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n    //grid-point only\n    //return !equals(x,p.x)?x<p.x:!equals(y,p.y)?y<p.y:0;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\nistream &operator >> (istream &is,Point &p){\n  is>>p.x>>p.y;\n  return is;\n}\n\nostream &operator << (ostream &os,Point p){\n  os<<fixed<<setprecision(12)<<p.x<<\" \"<<p.y;\n  return os;\n}\n\nbool sort_x(Point a,Point b){\n  return a.x!=b.x?a.x<b.x:a.y<b.y;\n}\n\nbool sort_y(Point a,Point b){\n  return a.y!=b.y?a.y<b.y:a.x<b.x;\n}\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nistream &operator >> (istream &is,Polygon &p){\n  for(int i=0;i<(int)p.size();i++) cin>>p[i];\n  return is;\n}\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nistream &operator >> (istream &is,Segment &s){\n  is>>s.p1>>s.p2;\n  return is;\n}\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(){}\n  Circle(Point c,double r):c(c),r(r){}\n};\n\nistream &operator >> (istream &is,Circle &c){\n  is>>c.c>>c.r;\n  return is;\n}\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nPoint orth(Point p){return Point(-p.y,p.x);}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\nint ccw(Point p0,Point p1,Point p2);\nbool intersectSS(Point p1,Point p2,Point p3,Point p4);\nbool intersectSS(Segment s1,Segment s2);\nbool intersectPS(Polygon p,Segment l);\nint intersectCC(Circle c1,Circle c2);\nbool intersectSC(Segment s,Circle c);\ndouble getDistanceLP(Line l,Point p);\ndouble getDistanceSP(Segment s,Point p);\ndouble getDistanceSS(Segment s1,Segment s2);\nPoint getCrossPointSS(Segment s1,Segment s2);\nPoint getCrossPointLL(Line l1,Line l2);\nPolygon getCrossPointCL(Circle c,Line l);\nPolygon getCrossPointCC(Circle c1,Circle c2);\nint contains(Polygon g,Point p);\nPolygon andrewScan(Polygon s);\nPolygon convex_hull(Polygon ps);\ndouble diameter(Polygon s);\nbool isConvex(Polygon p);\ndouble area(Polygon s);\nPolygon convexCut(Polygon p,Line l);\nLine bisector(Point p1,Point p2);\nVector translate(Vector v,double theta);\nvector<Line> corner(Line l1,Line l2);\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return CCW_COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CCW_CLOCKWISE;\n  if(dot(a,b) < -EPS) return CCW_ONLINE_BACK;\n  if(a.norm()<b.norm()) return CCW_ONLINE_FRONT;\n  return CCW_ON_SEGMENT;\n}\n\nbool intersectSS(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersectSS(Segment s1,Segment s2){\n  return intersectSS(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\nbool intersectPS(Polygon p,Segment l){\n  int n=p.size();\n  for(int i=0;i<n;i++)\n    if(intersectSS(Segment(p[i],p[(i+1)%n]),l)) return 1;\n  return 0;\n}\n\nint intersectCC(Circle c1,Circle c2){\n  if(c1.r<c2.r) swap(c1,c2);\n  double d=abs(c1.c-c2.c);\n  double r=c1.r+c2.r;\n  if(equals(d,r)) return ICC_CIRCUMSCRIBE;\n  if(d>r) return ICC_SEPERATE;\n  if(equals(d+c2.r,c1.r)) return ICC_INSCRIBE;\n  if(d+c2.r<c1.r) return ICC_CONTAIN;\n  return ICC_INTERSECT;\n}\n\nbool intersectSC(Segment s,Circle c){\n  double d=getDistanceSP(s,c.c);\n  return d<=c.r;\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistanceSS(Segment s1,Segment s2){\n  if(intersectSS(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPointSS(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nPoint getCrossPointLL(Line l1,Line l2){\n  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);\n  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);\n  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1;\n  return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\n\nPolygon getCrossPointCL(Circle c,Line l){\n  Polygon ps;\n  Point pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  if(equals(getDistanceLP(l,c.c),c.r)){\n    ps.emplace_back(pr);\n    return ps;\n  }\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  ps.emplace_back(pr+e*base);\n  ps.emplace_back(pr-e*base);\n  return ps;\n}\n\nPolygon getCrossPointCC(Circle c1,Circle c2){\n  Polygon p(2);\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  p[0]=c1.c+polar(c1.r,t+a);\n  p[1]=c1.c+polar(c1.r,t-a);\n  return p;\n}\n\n// IN:2 ON:1 OUT:0\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<(int)s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\nPolygon convex_hull(Polygon ps){\n  int n=ps.size();\n  sort(ps.begin(),ps.end(),sort_y);\n  int k=0;\n  Polygon qs(n*2);\n  for(int i=0;i<n;i++){\n    while(k>1&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  for(int i=n-2,t=k;i>=0;i--){\n    while(k>t&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  qs.resize(k-1);\n  return qs;\n}\n\ndouble diameter(Polygon s){\n  Polygon p=s;\n  int n=p.size();\n  if(n==2) return abs(p[0]-p[1]);\n  int i=0,j=0;\n  for(int k=0;k<n;k++){\n    if(p[i]<p[k]) i=k;\n    if(!(p[j]<p[k])) j=k;\n  }\n  double res=0;\n  int si=i,sj=j;\n  while(i!=sj||j!=si){\n    res=max(res,abs(p[i]-p[j]));\n    if(cross(p[(i+1)%n]-p[i],p[(j+1)%n]-p[j])<0.0){\n      i=(i+1)%n;\n    }else{\n      j=(j+1)%n;\n    }\n  }\n  return res;\n}\n\nbool isConvex(Polygon p){\n  bool f=1;\n  int n=p.size();\n  for(int i=0;i<n;i++){\n    int t=ccw(p[(i+n-1)%n],p[i],p[(i+1)%n]);\n    f&=t!=CCW_CLOCKWISE;\n  }\n  return f;\n}\n\ndouble area(Polygon s){\n  double res=0;\n  for(int i=0;i<(int)s.size();i++){\n    res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n  }\n  return abs(res);\n}\n\ndouble area(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  if(c1.r+c2.r<=d+EPS) return 0;\n  if(d<=abs(c1.r-c2.r)){\n    double r=min(c1.r,c2.r);\n    return PI*r*r;\n  }\n  double rc=(d*d+c1.r*c1.r-c2.r*c2.r)/(2*d);\n  double th=acos(rc/c1.r);\n  double ph=acos((d-rc)/c2.r);\n  return c1.r*c1.r*th+c2.r*c2.r*ph-d*c1.r*sin(th);\n}\n\nPolygon convexCut(Polygon p,Line l){\n  Polygon q;\n  for(int i=0;i<(int)p.size();i++){\n    Point a=p[i],b=p[(i+1)%p.size()];\n    if(ccw(l.p1,l.p2,a)!=-1) q.push_back(a);\n    if(ccw(l.p1,l.p2,a)*ccw(l.p1,l.p2,b)<0)\n      q.push_back(getCrossPointLL(Line(a,b),l));\n  }\n  return q;\n}\n\nLine bisector(Point p1,Point p2){\n  Circle c1=Circle(p1,abs(p1-p2)),c2=Circle(p2,abs(p1-p2));\n  Polygon p=getCrossPointCC(c1,c2);\n  if(cross(p2-p1,p[0]-p1)>0) swap(p[0],p[1]);\n  return Line(p[0],p[1]);\n}\n\nVector translate(Vector v,double theta){\n  Vector res;\n  res.x=cos(theta)*v.x-sin(theta)*v.y;\n  res.y=sin(theta)*v.x+cos(theta)*v.y;\n  return res;\n}\n\nvector<Line> corner(Line l1,Line l2){\n  vector<Line> res;\n  if(isParallel(l1,l2)){\n    double d=getDistanceLP(l1,l2.p1)/2.0;\n    Vector v1=l1.p2-l1.p1;\n    v1=v1/v1.abs()*d;\n    Point p=l2.p1+translate(v1,90.0*(PI/180.0));\n    double d1=getDistanceLP(l1,p);\n    double d2=getDistanceLP(l2,p);\n    if(abs(d1-d2)>d){\n      p=l2.p1+translate(v1,-90.0*(PI/180.0));\n    }\n    res.push_back(Line(p,p+v1));\n  }else{\n    Point p=getCrossPointLL(l1,l2);\n    Vector v1=l1.p2-l1.p1,v2=l2.p2-l2.p1;\n    v1=v1/v1.abs();\n    v2=v2/v2.abs();\n    res.push_back(Line(p,p+(v1+v2)));\n    res.push_back(Line(p,p+translate(v1+v2,90.0*(PI/180.0))));\n  }\n  return res;\n}\n\nPolygon tangent(Circle c1,Point p2){\n  Circle c2=Circle(p2,sqrt(norm(c1.c-p2)-c1.r*c1.r));\n  Polygon p=getCrossPointCC(c1,c2);\n  sort(p.begin(),p.end());\n  return p;\n}\n\nvector<Line> tangent(Circle c1,Circle c2){\n  vector<Line> ls;\n  if(c1.r<c2.r) swap(c1,c2);\n  double g=norm(c1.c-c2.c);\n  if(equals(g,0)) return ls;\n  Point u=(c2.c-c1.c)/sqrt(g);\n  Point v=orth(u);\n  for(int s=1;s>=-1;s-=2){\n    double h=(c1.r+s*c2.r)/sqrt(g);\n    if(equals(1-h*h,0)){\n      ls.emplace_back(c1.c+u*c1.r,c1.c+(u+v)*c1.r);\n    }else if(1-h*h>0){\n      Point uu=u*h,vv=v*sqrt(1-h*h);\n      ls.emplace_back(c1.c+(uu+vv)*c1.r,c2.c-(uu+vv)*c2.r*s);\n      ls.emplace_back(c1.c+(uu-vv)*c1.r,c2.c-(uu-vv)*c2.r*s);\n    }\n  }\n  \n  return ls;\n}\n\n//END CUT HERE\n\n//Projection\nsigned CGL1A(){\n  Point p1,p2;\n  cin>>p1>>p2;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p;\n    cin>>p;\n    cout<<project(Line(p1,p2),p)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=jp\n*/\n\n//Reflect\nsigned CGL1B(){\n  Point p1,p2;\n  cin>>p1>>p2;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p;\n    cin>>p;\n    cout<<reflect(Line(p1,p2),p)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=jp\n*/\n\n//CCW\nsigned CGL1C(){\n  Point p0,p1;\n  cin>>p0>>p1;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p2;\n    cin>>p2;\n    int t=ccw(p0,p1,p2);\n    if(t==CCW_COUNTER_CLOCKWISE) cout<<\"COUNTER_CLOCKWISE\"<<endl;\n    if(t==CCW_CLOCKWISE) cout<<\"CLOCKWISE\"<<endl;\n    if(t==CCW_ONLINE_BACK) cout<<\"ONLINE_BACK\"<<endl;\n    if(t==CCW_ONLINE_FRONT) cout<<\"ONLINE_FRONT\"<<endl;\n    if(t==CCW_ON_SEGMENT) cout<<\"ON_SEGMENT\"<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\n*/\n\n//Parallel / Orthogonal:\nsigned CGL2A(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    if(isParallel(Line(p0,p1),Line(p2,p3))) cout<<2<<endl;\n    else if(isOrthogonal(Line(p0,p1),Line(p2,p3))) cout<<1<<endl;\n    else cout<<0<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=jp\n*/\n\n//Common Tangent\nsigned CGL7G(){\n  Circle c1,c2;\n  cin>>c1>>c2;\n  auto ls=tangent(c1,c2);\n  Polygon ps;\n  for(auto l:ls) ps.emplace_back(getCrossPointCL(c1,l)[0]);\n  sort(ps.begin(),ps.end());\n  for(auto p:ps) cout<<p<<endl;\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge//description.jsp?id=CGL_7_G&lang=jp\n*/\n\nsigned main(){\n  //CGL1A();\n  //CGL1B();\n  //CGL1C();\n\n  CGL2A();\n  //CGL2B();\n  //CGL2C();\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nstruct Vector {\n\tdouble x, y;\n\tVector(double x = 0, double y = 0) : x(x), y(y) {}\n\tVector operator + (Vector &p) { return Vector(x + p.x, y + p.y); }\n\tVector operator - (Vector &p) { return Vector(x - p.x, y - p.y); }\n\tVector operator * (Vector &p) { return Vector(x * p.x, y * p.y); }\n\tVector operator / (Vector &p) { return Vector(x / p.x, y / p.y); }\n\tvoid insert(double a, double b) { x = a; y = b; }\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\tbool operator < (const Vector &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Vector &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\nstruct Segment {\n\tVector p1, p2;\n\tvoid insert(Vector a1, Vector a2) { p1 = a1; p2 = a2; }\n};\ninline double dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ninline double cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\ninline bool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\ninline bool isOrthogonal(Vector a1, Vector a2, Vector b1, Vector b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\ninline bool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\ninline bool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\ninline bool isParallel(Vector a1, Vector a2, Vector b1, Vector b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\ninline bool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nint main() {\n\tint n; cin >> n;\n\tint x, y;\n\tVector v[4];\n\tSegment s[2];\n\trep(i, 0, n) {\n\t\trep(j, 0, 4) {\n\t\t\tcin >> x >> y;\n\t\t\tv[j].insert(x, y);\n\t\t}\n\t\ts[0].insert(v[0], v[1]); s[1].insert(v[2], v[3]);\n\t\tif(isParallel(s[0], s[1])) P(2);\n\t\telse if(isOrthogonal(s[0], s[1])) P(1);\n\t\telse P(0);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define all(vec) vec.begin(), vec.end()\n#define pb push_back\n#define eb emplace_back\nusing namespace std;\nusing ll = long long;\nusing P = pair<ll, ll>;\ntemplate <class T>\nusing V = vector<T>;\nconstexpr ll INF = (1LL << 30) - 1LL;\nconstexpr ll MOD = 1e9 + 7;\nconstexpr int dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};\ntemplate <class T>\nvoid chmin(T &a, T b) { a = min(a, b); }\ntemplate <class T>\nvoid chmax(T &a, T b) { a = max(a, b); }\nvoid ok() { cerr << \"ok\" << endl; }\nusing D = double;\nusing Point = complex<D>;\nconst D eps = 1e-40;\ninline int sgn(const D &a) { return (a < -eps) ? -1 : (a > eps) ? 1 : 0; }\ninline D cross(const Point &a, const Point &b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\ninline D dot(const Point &a, const Point &b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\nistream &operator>>(istream &is, Point &p) {\n    D a, b;\n    is >> a >> b;\n    p = Point(a, b);\n    return is;\n}\ninline int ccw(const Point &a, const Point &b, const Point &c) {\n    D d = cross(b - a, c - a);\n    if (sgn(d) > 0) {\n        return +1; //counter-clockwise\n    } else if (sgn(d) < 0) {\n        return -1; //clockwise\n    } else {\n        if (sgn(dot(b - a, c - a)) < 0) {\n            return -2; //c,a,b\n        } else if (sgn(dot(a - b, c - b)) < 0) {\n            return +2; //a,b,c\n        }\n    }\n    return 0; //a,c,b\n}\nstruct Line {\n    Point a, b; //aを通り、方向ベクトルbの直線\n    Line(const Point &p0, const Point &p1) : a(p0), b(p1) {}\n};\ninline Point projection(const Line &l, const Point &b) { //a to b\n    return l.a + (dot(l.b, b - l.a) / norm(l.b)) * l.b;\n}\ninline Point reflection(const Line &l, const Point &b) {\n    return b + (projection(l, b) - b) * static_cast<D>(2.0);\n}\nbool isparallel(const Line &l1, const Line &l2) {\n    return sgn(cross(l1.b, l2.b)) == 0;\n}\nbool isvertical(const Line &l1, const Line &l2) {\n    return sgn(dot(l1.b, l2.b)) == 0;\n}\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(0);\n    int q;\n    cin >> q;\n    while (q--) {\n        Point p0, p1, p2, p3;\n        cin >> p0 >> p1 >> p2 >> p3;\n        Line l1(p0, p1 - p0), l2(p2, p3 - p2);\n        if (isparallel(l1, l2)) {\n            cout << 2 << '\\n';\n        } else if (isvertical(l1, l2)) {\n            cout << 1 << '\\n';\n        } else {\n            cout << 0 << '\\n';\n        }\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//By Vlgd\n//By Vlgd\n#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nusing namespace std;\nclass Point{\n\tpublic:\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y){}\n\tPoint operator + (Point p){return Point(x+p.x,y+p.y);}\n\tPoint operator - (Point p){return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a){return Point(a*x,a*y);}\n\tPoint operator / (double a){return Point(x/a,y/a);}\n\tdouble abs() {return sqrt(norm());}\n\tdouble norm() {return x*x+y*y;}\n\tbool operator < (const Point &p) const{\n\t\treturn x!=p.x?x<p.x:y<p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\n//OrthogonalÕý½» \nbool isOrthogonal(Vector a,Vector b){\n\treturn equals(dot(a,b),0.0);\n}\n//ParallelÆ½ÐÐ \nbool isParallel(Vector a,Vector b){\n\treturn equals(cross(a,b),0.0);\n}\nint main(){\n\tint n;scanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++){\n\t\tint x1,y1,x2,y2;\n\t\tscanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n\t\tVector a(x1-x2,y1-y2);\n\t\tscanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n\t\tVector b(x1-x2,y1-y2);\n\t\tif(isOrthogonal(a,b))printf(\"1\\n\");\n\t\telse if(isParallel(a,b)) printf(\"2\\n\");\n\t\telse printf(\"0\\n\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(int x, int y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(Point &p) { return Point(x + p.x, y + p.y); };\n\tPoint operator -(Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n};\nusing Vector = Point;\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.y;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\nusing Line = Segment;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nusing Polygon = vector<Point>;\nint main() {\n\tint q, x[4], y[4];\n\tPoint P[4];\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tcin >> x[j] >> y[j];\n\t\t\tP[j] = Point(x[j], y[j]);\n\t\t}\n\t\tVector a = P[0] - P[1];\n\t\tVector b = P[2] - P[3];\n\t\tif (equals(dot(a, b), 0.0)) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse if (equals(cross(a, b), 0.0)) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,k,n) for(int i = (k); i < (n); i++)\n#define REP(i,n) FOR(i,0,n)\n#define ALL(a) begin(a),end(a)\n#define MS(m,v) memset(m,v,sizeof(m))\n#define D10  fixed<<setprecision(10)\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef pair<int, int> P;\ntypedef long long ll;\nconst ll INF = 114514810;\nconst int MOD = 1000000007;\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\nstruct edge\n{\n\tint from, to, cost;\n\tbool operator < (const edge& e) const { return cost < e.cost; }\n\tbool operator >(const edge& e) const { return cost > e.cost; }\n};\nint dx[] = { -1, 0, 0, 1 }; int dy[] = { 0, -1, 1, 0 };\n///*************************************************************************************///\n///*************************************************************************************///\n///*************************************************************************************///\nbool eq(double a, double b) { return fabs(a - b) < EPS; }\n\nstruct point\n{\n\tdouble x, y;\n\tpoint(double x = 0, double y = 0) :x(x), y(y) {};\n\t\n\tpoint operator + (point p) { return point(x + p.x, y + p.y); }\n\tpoint operator - (point p) { return point(x - p.x, y - p.y); }\n\tpoint operator * (double s) { return point(x * s, y * s); }\n\tpoint operator / (double s) { return point(x / s, y / s); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const point &p) const\n\t{\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const point &p) const\n\t{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n};\n\ndouble dot(point a, point b)\n{\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(point a, point b)\n{\n\treturn a.x*b.y - a.y*b.x;\n}\n\n\n\nint main()\n{\n\tint q;\n\tcin >> q;\n\twhile (q--)\n\t{\n\t\tdouble a[8];\n\t\tREP(i, 8) cin >> a[i];\n\t\tpoint s(a[2] - a[0], a[3] - a[1]);\n\t\tpoint t(a[6] - a[4], a[7] - a[5]);\n\t\tif (eq(cross(s, t), 0)) puts(\"2\");\n\t\telse if (eq(dot(s, t), 0)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <list>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <cmath>\n\n#include <cstdio>\n\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (n); i++)\n#define repc(i, s, n) for (int i = (s); i <= (n); i++)\n#define rrep(i, n) for (int i = (n) - 1; i >= 0; i--)\n#define rrepc(i, s, n) for (int i = (s); i >= (n); i--)\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nstruct Point { double x, y; };\n#define EPS (1e-10)\n\nint main()\n{\n\tint q;\n\tPoint p[4];\n\tdouble s1m, s2m;\n\tint ans = 0;\n\n\tcin >> q;\n\trep(i, q) {\n\t\tcin >> p[0].x >> p[0].y >> p[1].x >> p[1].y >> p[2].x >> p[2].y >> p[3].x >> p[3].y;\n\t\tif (p[1].x - p[0].x == 0 && p[3].x - p[2].x == 0) ans = 2;\n\t\telse if (p[1].x - p[0].x == 0 && p[3].y - p[2].y == 0) ans = 1;\n\t\telse if (p[3].x - p[2].x == 0 && p[1].y - p[0].y == 0) ans = 1;\n\t\telse {\n\t\t\ts1m = (p[1].y - p[0].y) / (p[1].x - p[0].x);\n\t\t\ts2m = (p[3].y - p[2].y) / (p[3].x - p[2].x);\n\t\t\tif (abs(s1m - s2m) < EPS) ans = 2;\n\t\t\telse if (abs(s1m * s2m + 1) < EPS) ans = 1;\n\t\t\telse ans = 0;\n\t\t}\n\n\t\tcout << ans << endl;\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define r(i,n) for(int i=0;i<n;i++)\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nclass Point{\n  public:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n  Point operator + (Point p){return Point(x+p.x,y+p.y);}\n  Point operator - (Point p){return Point(x-p.x,y-p.y);}\n  Point operator * (double a){return Point(a*x,a*y);}\n  Point operator / (double a){return Point(x/a,y/a);}\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n  }\n};\nstruct seg{Point p1,p2;};\n//??????\ndouble dot(Point a,Point b){\n  return a.x*b.x+a.y*b.y;\n}\n//??????\ndouble cross(Point a,Point b){\n  return a.x*b.y-a.y*b.x;\n}\n//??´?????????\nbool C90(seg s1,seg s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\nbool C0(seg s1,seg s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n\nmain(){\n  int n;\n  cin>>n;\n  while(n--){\n    seg a,b;\n    cin>>a.p1.x>>a.p1.y>>a.p2.x>>a.p2.y;\n    cin>>b.p1.x>>b.p1.y>>b.p2.x>>b.p2.y;\n    if(C0(a,b))cout<<\"2\"<<endl;\n    else if(C90(a,b))cout<<\"1\"<<endl;\n    else cout<<\"0\"<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(ll i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(arg),key)-begin(arg)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n\nusing namespace std;\n\nusing R=long double;\nconst R EPS = 1E-11;\nconst R INF = 1E40;\nconstexpr R PI = acos(R(-1));\ninline int sgn(const R& r){ return (r > EPS) - (r < -EPS);}\n\nusing P=complex<R>;\nconstexpr P O = P(0,0);\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\n//?????? dot ?????? det\ninline R dot(P o,P a,P b){a-=o,b-=o; return real(conj(a)*b);}\ninline R det(P o,P a,P b){a-=o,b-=o; return imag(conj(a)*b);}\n\nusing L=struct{P s,t;};\n\n// ?°???± verify AOJ CGL_1_A\nP proj(P o,P a,P b){ a-=o,b-=o; return a*real(b/a);}\nP proj(L l,P p){ return l.s+proj(l.s,l.t,p);}\n// ????°? verify AOJ CGL_1_B\nP refl(L l,P p){ return R(2.0)*proj(l,p)-p;}\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {//???a??¨???b???????????????????????????\n\tif (sgn(det(o,a,b)) > 0) return LEFT;    // counter clockwise\n\tif (sgn(det(o,a,b)) < 0) return RIGHT;   // clockwise\n\tif (sgn(dot(o,a,b)) < 0) return BACK;    // b--base--a on line\n\tif (sgn(norm(a)-norm(b)) < 0) return FRONT;   // base--a--b on line\n\treturn ON;// base--b--a on line  a??¨b????????????????????????\n}\n\n// ?????´ ?????? verify AOJ CGL_2_A\nbool vertical(L a, L b) {return sgn(dot(O,a.t-a.s,b.t-b.s))==0;}\nbool parallel(L a, L b) {return sgn(det(O,a.t-a.s,b.t-b.s))==0;}\n\n// ?????¨??´?????¨????????¢??£??????????????? (s??????????????????????????§?????????????¨±?????????)\nbool eql(L a,L b){ return (parallel(a,b) && sgn(det(a.s,a.t,b.s))==0);}\n\n// ???????????????verify AOJ CGL_2_B\nbool iss(L a,L b,int ban=0){\n\tR s1=det(a.s,a.t,b.s)*det(a.s,a.t,b.t);\n\tR s2=det(b.s,b.t,a.s)*det(b.s,b.t,a.t);\n\treturn sgn(s1)<=-ban&&sgn(s2)<=-ban;\n}\n\n// ?????? verify AOJ CGL_2_C\nP cross(L a,L b){\n\tR s1=det(a.s,b.s,b.t);\n\tR s2=s1+det(a.t,b.t,b.s);\n\treturn a.s+s1/s2*(a.t-a.s);\n}\n\t\n// ?????¢\n// ?????¨??´???????????¢ verify AOJ CGL_2_D\nR dlp(L l,P p){return abs(det(l.s,l.t,p))/abs(l.t-l.s);}\n\n// ?????¨??????????????¢ verify AOJ CGL_2_D\nR dsp(L s,P p){\n\tif(sgn(dot(s.s,s.t,p))<=0) return abs(p-s.s);\n\tif(sgn(dot(s.t,s.s,p))<=0) return abs(p-s.t);\n\treturn dlp(s,p);\n}\n\n// ????????¨??????????????¢ verify AOJ CGL_2_D\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n// ????????????\nbool ill(L a,L b){ return parallel(a,b)==false;}\nbool iLS(L l,L s,int ban=0){ return sgn(det(l.s,l.t,s.s)*det(l.s,l.t,s.t))<=-ban;}\n\n// ??´?????¨??´???????????¢\nR dll(L a,L b){return ill(a,b)?0:dlp(a,b.s);}\n// ?????¨??´?????¨????????¢??£????????¢\nR dls(L l,L s){return iLS(l,s)?0:min(dlp(l,s.s),dlp(l,s.t));}\n\nint main(void){\n\tint n;\n\tcin >> n;\n\tcout.precision(20);\n\trep(i,n){\n\t\tP a,b,c,d;\n\t\tcin >> a >> b >> c >> d;\n\t\tL s1={a,b},s2={c,d};\n\t\tif(parallel(s1,s2))\n\t\t\tcout << 2 << endl;\n\t\telse if(vertical(s1,s2))\n\t\t\tcout << 1 << endl;\n\t\telse\n\t\t\tcout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <set>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <functional>\n#include <map>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <list>\n\nusing namespace std;\n\n#define EPS (1e-10)\n\nstruct Point{\n    Point(double _x = 0, double _y = 0){\n        x = _x;\n        y = _y;\n    }\n    double x;\n    double y;\n\n    Point operator + (Point p){\n        return Point(x + p.x, y+ p.y);\n    }\n\n    Point operator - (Point p){\n        return Point(x - p.x, y - p.y);\n    }\n\n    Point operator * (double a){\n        return Point(a * x, a * y);\n    }\n\n    Point operator / (double a){\n        return Point(x / a, y / a);\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    bool operator < (const Point &p) const{\n        return x!=p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) && fabs(y - p.y) < EPS;\n    }\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\nint main() {\n\n    int q;scanf(\"%d\",&q);\n\n    for(int i=0;i<q;i++){\n        Point p0 = Point(0,0);\n        Point p1 = Point(0,0);\n        Point p2 = Point();\n        Point p3 = Point();\n\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n\n        Vector v1 = p1 - p0;\n        Vector v2 = p3 - p2;\n\n        //直行判定\n        if(fabs((v1.x*v2.x) + (v1.y*v2.y)) < EPS){\n            printf(\"1\\n\");\n        }\n\n        //並行判定\n        else if(fabs((v1.x*v2.y) - (v1.y*v2.x)) < EPS){\n            printf(\"2\\n\");\n        }\n\n        else{\n            printf(\"0\\n\");\n        }\n\n    }\n\n\n    return 0;\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <utility>\n#include <set>\n#include <cmath>\n#include <cstdio>\n#include <numeric>\n#include <functional>\n\nusing namespace std;\n\n//BEGIN\n#define EPS 1e-10\n#define equals(a, b) (fabs(a - b) < EPS)\n#define Pi 3.141592653589793238\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint() {}\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n\tPoint operator*(const double& k) const { return Point(x * k, y * k); }\n\tPoint operator/(const double& k) const { return Point(x / k, y / k); }\n\n\tfriend istream& operator>>(istream& is, Point& p) {\n\t\tis >> p.x >> p.y;\n\t\treturn is;\n\t}\n\n\tbool operator==(const Point& p) const { return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS); }\n\tbool operator<(const Point& p) const { return (x != p.x ? x < p.x : y < p.y); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) { return a.x * a.x + a.y * a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\nstruct EndPoint {\n\tPoint p;\n\tint seg, st;\n\n\tEndPoint() {}\n\tEndPoint(Point p, int seg, int st) :p(p), seg(seg), st(st) {}\n\n\tbool operator<(const EndPoint& ep) const {\n\t\tif (p.y == ep.p.y) return st < ep.st;\n\t\treturn p.y < ep.p.y;\n\t}\n};\n\nstruct Segment {\n\tPoint p1, p2;\n\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n\n\tfriend istream& operator>>(istream& is, Segment& s) {\n\t\tis >> s.p1 >> s.p2;\n\t\treturn is;\n\t}\n};\n\ntypedef Segment Line;\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\n\tCircle() {}\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersectSS(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersectSS(Segment s1, Segment s2) {\n\treturn intersectSS(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nint intersectCS(Circle c, Segment s) {\n\tif (norm(project(s, c.c) - c.c) - c.r * c.r > EPS) return 0;\n\tdouble d1 = abs(c.c - s.p1), d2 = abs(c.c - s.p2);\n\tif (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n\tif ((d1 < c.r - EPS && d2 > c.r + EPS) || (d1 > c.r + EPS && d2 < c.r - EPS)) return 1;\n\tPoint h = project(s, c.c);\n\tif (dot(s.p1 - h, s.p2 - h) < 0) return 2;\n\treturn 0;\n}\n\nint intersectCC(Circle c1, Circle c2) {\n\tif (c1.r < c2.r) swap(c1, c2);\n\tdouble d = abs(c1.c - c2.c);\n\tdouble r = c1.r + c2.r;\n\tif (equals(d, r)) return 3;\n\tif (d > r) return 4;\n\tif (equals(d + c2.r, c1.r)) return 1;\n\tif (d + c2.r < c1.r) return 0;\n\treturn 2;\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistanceSS(Segment s1, Segment s2) {\n\tif (intersectSS(s1, s2)) return 0.0;\n\treturn min({ getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2),\n\t\t\t   getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2) });\n}\n\nPoint getCrossPointLL(Line l1, Line l2) {\n\tdouble a = cross(l1.p2 - l1.p1, l2.p2 - l2.p1);\n\tdouble b = cross(l1.p2 - l1.p1, l1.p2 - l2.p1);\n\tif (abs(a) < EPS && abs(b) < EPS) return l2.p1;\n\treturn l2.p1 + (l2.p2 - l2.p1) * (b / a);\n}\n\nPoint getCrossPointSS(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\treturn s1.p1 + (s1.p2 - s1.p1) * (d1 / (d1 + d2));\n}\n\nvector<Point> getCrossPointCL(Circle c, Line l) {\n\tvector<Point> ps;\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tif (equals(getDistanceLP(l, c.c), c.r)) {\n\t\tps.push_back(pr);\n\t\treturn ps;\n\t}\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\tps.push_back(pr + e * base); ps.push_back(pr - e * base);\n\treturn ps;\n}\n\nvector<Point> getCrossPointCS(Circle c, Segment s) {\n\tLine l(s);\n\tvector<Point> ps = getCrossPointCL(c, l);\n\tif (intersectCS(c, s) == 2) return ps;\n\tif (dot(l.p1 - ps[0], l.p2 - ps[0]) < 0) ps[1] = ps[0];\n\telse ps[0] = ps[1];\n\treturn ps;\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nPoint polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\nvector<Point> getCrossPointCC(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\tvector<Point> ps;\n\tps.push_back(c1.c + polar(c1.r, t + a)); ps.push_back(c1.c + polar(c1.r, t - a));\n\treturn ps;\n}\n\nvector<Point> tangentCP(Circle c, Point p) {\n\treturn getCrossPointCC(c, Circle(p, sqrt(norm(c.c - p) - c.r * c.r)));\n}\n\nvector<Line> tangentCC(Circle c1, Circle c2) {\n\tvector<Line> ls;\n\tif (c1.r < c2.r) swap(c1, c2);\n\tdouble g = norm(c1.c - c2.c);\n\tif (equals(g, 0)) return ls;\n\tPoint u = (c2.c - c1.c) / sqrt(g);\n\tPoint v = Point(-u.y, u.x);\n\tfor (int s = 1; s >= -1; s -= 2) {\n\t\tdouble h = (c1.r + s * c2.r) / sqrt(g);\n\t\tif (equals(1, h * h)) ls.push_back(Line(c1.c + u * c1.r, c1.c + (u + v) * c1.r));\n\t\telse if (1 - h * h > 0) {\n\t\t\tPoint uu = u * h, vv = v * sqrt(1 - h * h);\n\t\t\tls.push_back(Line(c1.c + (uu + vv) * c1.r, c2.c - (uu + vv) * c2.r * s));\n\t\t\tls.push_back(Line(c1.c + (uu - vv) * c1.r, c2.c - (uu - vv) * c2.r * s));\n\t\t}\n\t}\n\treturn ls;\n}\n\n// IN:2,ON:1,OUT:0\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; ++i) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\nbool isConvex(Polygon p) {\n\tint n = p.size();\n\tfor (int i = 0; i < n; ++i)\n\t\tif (ccw(p[(i - 1 + n) % n], p[i], p[(i + 1) % n]) == CLOCKWISE) return false;\n\treturn true;\n}\n\nPolygon convexHull(Polygon p) {\n\tPolygon u, l;\n\tif (p.size() < 3) return p;\n\tsort(p.begin(), p.end());\n\tu.push_back(p[0]); u.push_back(p[1]);\n\tl.push_back(p[p.size() - 1]); l.push_back(p[p.size() - 2]);\n\tfor (int i = 2; i < (int)p.size(); ++i) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], p[i]) == COUNTER_CLOCKWISE; --n)\n\t\t\tu.pop_back();\n\t\tu.push_back(p[i]);\n\t}\n\tfor (int i = p.size() - 3; i >= 0; --i) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], p[i]) == COUNTER_CLOCKWISE; --n)\n\t\t\tl.pop_back();\n\t\tl.push_back(p[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n\treturn l;\n}\n\ndouble area(Polygon p) {\n\tdouble res = 0;\n\tfor (int i = 0; i < (int)p.size(); ++i)\n\t\tres += cross(p[i], p[(i + 1) % p.size()]) / 2.0;\n\treturn res;\n}\n\ndouble area(Polygon p, Circle c) {\n\tif (p.size() < 3) return 0.0;\n\tfunction<double(Circle, Point, Point)> dfs = [&](Circle c, Point a, Point b) {\n\t\tVector va = c.c - a, vb = c.c - b;\n\t\tdouble f = cross(va, vb), res = 0;\n\t\tif (equals(f, 0.0)) return res;\n\t\tif (max(abs(va), abs(vb)) < c.r + EPS) return f;\n\t\tVector d(dot(va, vb), cross(va, vb));\n\t\tif (getDistanceSP(Segment(a, b), c.c) > c.r - EPS)\n\t\t\treturn c.r * c.r * atan2(d.y, d.x);\n\t\tauto u = getCrossPointCS(c, Segment(a, b));\n\t\tvector<Point> ps{ a,u[0],u[1],b };\n\t\tfor (int i = 1; i < ps.size(); ++i) res += dfs(c, ps[i - 1], ps[i]);\n\t\treturn res;\n\t};\n\tdouble res = 0;\n\tfor (int i = 0; i < p.size(); ++i) res += dfs(c, p[i], p[(i + 1) % p.size()]);\n\treturn res / 2;\n}\n\ndouble convexDiameter(Polygon p) {\n\tint n = p.size();\n\tif (n == 2) return abs(p[0] - p[1]);\n\tint i = 0, j = 0;\n\tfor (int k = 0; k < n; ++k) {\n\t\tif (p[i] < p[k]) i = k;\n\t\tif (!(p[j] < p[k])) j = k;\n\t}\n\tdouble res = 0;\n\tint ti = i, tj = j;\n\twhile (i != tj || j != ti) {\n\t\tres = max(res, abs(p[i] - p[j]));\n\t\tif (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) < 0.0)\n\t\t\ti = (i + 1) % n;\n\t\telse j = (j + 1) % n;\n\t}\n\treturn res;\n}\n\nPolygon convexCut(Polygon p, Line l) {\n\tPolygon q;\n\tfor (int i = 0; i < (int)p.size(); ++i) {\n\t\tPoint a = p[i], b = p[(i + 1) % p.size()];\n\t\tif (ccw(l.p1, l.p2, a) != CLOCKWISE) q.push_back(a);\n\t\tif (ccw(l.p1, l.p2, a) * ccw(l.p1, l.p2, b) < 0)\n\t\t\tq.push_back(getCrossPointLL(Line(a, b), l));\n\t}\n\treturn q;\n}\n\ndouble closestPair(vector<Point> ps) {\n\tsort(ps.begin(), ps.end());\n\tvector<Point> a(ps.size());\n\tfunction<double(int, int)> solve = [&](int l, int r) {\n\t\tif (r - l < 2) return 1e18;\n\t\tint mid = (l + r) >> 1;\n\t\tdouble x = ps[mid].x;\n\t\tdouble d = min(solve(l, mid), solve(mid, r));\n\t\tinplace_merge(ps.begin() + l, ps.begin() + mid, ps.begin() + r,\n\t\t\t\t\t  [](const Point& a, const Point& b) {return a.y < b.y; });\n\t\tint ptr = 0;\n\t\tfor (int i = l; i < r; ++i) {\n\t\t\tif (abs(ps[i].x - x) >= d) continue;\n\t\t\tfor (int j = 0; j < ptr; ++j) {\n\t\t\t\tPoint luz = ps[i] - a[ptr - j - 1];\n\t\t\t\tif (luz.y >= d) break;\n\t\t\t\td = min(d, abs(luz));\n\t\t\t}\n\t\t\ta[ptr++] = ps[i];\n\t\t}\n\t\treturn d;\n\t};\n\treturn solve(0, ps.size());\n}\n\nint manhattanIntersection(vector<Segment> ss) {\n\tconst int INF = numeric_limits<int>::max();\n\tconst int BOTTOM = 0, LEFT = 1, RIGHT = 2, TOP = 3;\n\tint n = ss.size();\n\tvector<EndPoint> ep;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (ss[i].p1.y == ss[i].p2.y) {\n\t\t\tif (ss[i].p1.x > ss[i].p2.x) swap(ss[i].p1, ss[i].p2);\n\t\t\tep.push_back(EndPoint(ss[i].p1, i, LEFT));\n\t\t\tep.push_back(EndPoint(ss[i].p2, i, RIGHT));\n\t\t} else {\n\t\t\tif (ss[i].p1.y > ss[i].p2.y) swap(ss[i].p1, ss[i].p2);\n\t\t\tep.push_back(EndPoint(ss[i].p1, i, BOTTOM));\n\t\t\tep.push_back(EndPoint(ss[i].p2, i, TOP));\n\t\t}\n\t}\n\tsort(ep.begin(), ep.end());\n\tset<int> st;\n\tst.insert(INF);\n\tint cnt = 0;\n\tfor (int i = 0; i < 2 * n; ++i) {\n\t\tif (ep[i].st == TOP) st.erase(ep[i].p.x);\n\t\telse if (ep[i].st == BOTTOM) st.insert(ep[i].p.x);\n\t\telse if (ep[i].st == LEFT) {\n\t\t\tauto b = st.lower_bound(ss[ep[i].seg].p1.x);\n\t\t\tauto e = st.lower_bound(ss[ep[i].seg].p2.x);\n\t\t\tcnt += distance(b, e);\n\t\t}\n\t}\n\treturn cnt;\n}\n//END\n\n\n\n\n\n\n\n\n\n\n\n\n\nvoid CGL1A() {\n\tSegment s; cin >> s;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tPoint a = project(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_A\n*/\nvoid CGL1B() {\n\tSegment s; cin >> s;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tPoint a = reflect(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_B\n*/\nvoid CGL1C() {\n\tPoint p0, p1, p2; cin >> p0 >> p1;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tcin >> p2;\n\t\tint a = ccw(p0, p1, p2);\n\t\tif (a == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\";\n\t\telse if (a == CLOCKWISE) cout << \"CLOCKWISE\";\n\t\telse if (a == ONLINE_BACK) cout << \"ONLINE_BACK\";\n\t\telse if (a == ONLINE_FRONT) cout << \"ONLINE_FRONT\";\n\t\telse cout << \"ON_SEGMENT\";\n\t\tcout << endl;\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_C\n*/\nvoid CGL2A() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tVector p0, p1, p2, p3;\n\t\tcin >> p0 >> p1 >> p2 >> p3;\n\t\tif (isParallel(p1 - p0, p3 - p2)) cout << 2;\n\t\telse if (isOrthogonal(p1 - p0, p3 - p2)) cout << 1;\n\t\telse cout << 0;\n\t\tcout << endl;\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_A\n*/\nvoid CGL2B() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tcout << (intersectSS(s1, s2) ? 1 : 0) << endl;\n\t}\n}/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_B\n*/\nvoid CGL2C() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tPoint a = getCrossPointLL(s1, s2);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_C\n*/\nvoid CGL2D() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tprintf(\"%.10f\\n\", getDistanceSS(s1, s2));\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_D\n*/\nvoid CGL3A() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.1f\\n\", area(p));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_A\n*/\nvoid CGL3B() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tcout << (isConvex(p) ? 1 : 0) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_B\n*/\nvoid CGL3C() {\n\tint n; cin >> n;\n\tPolygon g(n);\n\tfor (auto& a : g) cin >> a;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tcout << contains(g, p) << endl;\n\t}\n}/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_C\n*/\nvoid CGL4A() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tPolygon t = convexHull(p);\n\tcout << t.size() << endl;\n\tfor (auto a : t) cout << a.x << \" \" << a.y << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_A\n*/\nvoid CGL4B() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.10f\\n\", convexDiameter(p));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_B\n*/\nvoid CGL4C() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tLine l; cin >> l;\n\t\tprintf(\"%.10f\\n\", area(convexCut(p, l)));\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_C\n*/\nvoid CGL5A() {\n\tint n; cin >> n;\n\tvector<Point> ps(n);\n\tfor (auto& a : ps) cin >> a;\n\tprintf(\"%.10f\\n\", closestPair(ps));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/5/CGL_5_A\n*/\nvoid CGL6A() {\n\tint n; cin >> n;\n\tvector<Segment> ss(n);\n\tfor (auto& a : ss) cin >> a;\n\tcout << manhattanIntersection(ss) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/6/CGL_6_A\n*/\nvoid CGL7A() {\n\tCircle c1, c2; cin >> c1.c >> c1.r >> c2.c >> c2.r;\n\tcout << intersectCC(c1, c2) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_A\n*/\n\nvoid CGL7D() {\n\tCircle c; cin >> c.c.x >> c.c.y >> c.r;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tLine l; cin >> l.p1.x >> l.p1.y >> l.p2.x >> l.p2.y;\n\t\tauto a = getCrossPointCL(c, l);\n\t\tsort(a.begin(), a.end());\n\t\tprintf(\"%.10f %.10f %.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_D\n*/\nvoid CGL7E() {\n\tCircle c1; cin >> c1.c.x >> c1.c.y >> c1.r;\n\tCircle c2; cin >> c2.c.x >> c2.c.y >> c2.r;\n\tauto a = getCrossPointCC(c1, c2);\n\tsort(a.begin(), a.end());\n\tprintf(\"%.10f %.10f %.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_E\n*/\nvoid CGL7F() {\n\tPoint p; cin >> p;\n\tCircle c; cin >> c.c >> c.r;\n\tauto a = tangentCP(c, p);\n\tsort(a.begin(), a.end());\n\tprintf(\"%.10f %.10f\\n%.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_F\n*/\nvoid CGL7G() {\n\tCircle c1, c2; cin >> c1.c >> c1.r >> c2.c >> c2.r;\n\tauto a = tangentCC(c1, c2);\n\tvector<Point> ps;\n\tfor (auto e : a) ps.push_back(getCrossPointCL(c1, e)[0]);\n\tsort(ps.begin(), ps.end());\n\tfor (auto e : ps) printf(\"%.10f %.10f\\n\", e.x, e.y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_G\n*/\nvoid CGL7H() {\n\tint n; cin >> n;\n\tCircle c; c.c = Point(0, 0); cin >> c.r;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.10f\\n\", area(p, c));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_H\n*/\n\nint main() {\n\t//CGL1A();\n\t//CGL1B();\n    //CGL1C();\n\tCGL2A();\n\t//CGL2B();\n\t//CGL2C();\n\t//CGL2D();\n\t//CGL3A();\n\t//CGL3B();\n\t//CGL3C();\n\t//CGL4A();\n\t//CGL4B();\n\t//CGL4C();\n\t//CGL5A();\n\t//CGL6A();\n\t//CGL7A();\n\t//CGL7D();\n\t//CGL7E();\n\t//CGL7F();\n\t//CGL7G();\n\t//CGL7H();\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS 1e-10\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define rep(i,n) for(int i=0;i<n;++i)\ntypedef long long ll;\nusing namespace std;\n\nstruct Point {\n    double x,y;\n    Point(){}\n    Point(double x, double y) : x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x, y+p.y);}\n    Point operator-(Point p) {return Point(x-p.x, y-p.y);}\n    Point operator*(double k){return Point(x*k,y*k);}\n    Point operator/(double k){return Point(x/k,y/k);}\n    double norm(){return x*x+y*y;}\n    double abs(){sqrt(norm());}\n    bool operator == (const Point &p) const {return equals(x,p.x)&&equals(y,p.y);}\n};\ntypedef Point P;\n\ndouble norm(P a){return a.x*a.x+a.y*a.y;}\ndouble abs(P a){return sqrt(norm(a));}\n\n// 線分\nstruct Segment {\n    Point p1,p2;\n    Segment(){}\n    Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\n\n// 内積\ndouble dot(Point a, Point b) {return a.x*b.x + a.y*b.y;}\n\n// 外積\ndouble cross(Point a, Point b) {return a.x*b.y-a.y*b.x;}\n// 2直線の直行判定\nbool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return equals(dot(a1-a2, b1-b2), 0.0);\n}\n// 2直線の平行判定\nbool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n    return equals(cross(a1-a2, b1-b2), 0.0);\n}\n\nint main() {\n    int q;\n    cin>>q;\n    rep(i,q){\n        double x0,y0,x1,y1,x2,y2,x3,y3;\n        cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n        P p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n        if (is_parallel(p0,p1,p2,p3)) cout << 2 << endl;\n        else if (is_orthogonal(p0,p1,p2,p3)) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct Vector{\n    int x;\n    int y;\n    Vector(int x, int y) : x(x), y(y){}\n    int abs_square(){\n        return x * x + y * y;\n    }\n};\n\nint dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1;\n        cin >> x2 >> y2 >> x3 >> y3;\n        Vector v1 = Vector(x1 - x0, y1 - y0);\n        Vector v2 = Vector(x3 - x2, y3 - y2);\n        int d = dot(v1, v2);\n        if (d == 0) {\n            cout << 1 << endl;\n            continue;\n        }\n        if (v1.abs_square() * v2.abs_square() == d * d) {\n            cout << 2 << endl;\n            continue;\n        }\n        cout << 0 << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <numeric>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long int ll;\ntypedef pair<double,double> P;\n\n#define all(x) x.begin(),x.end()\n\nconst ll mod = 1e9+7;\nconst ll INF = 1e9;\nconst ll MAXN = 1e9;\n\ndouble cross(P p,P q){\n    return p.first*q.second-p.second*q.first;\n}\n\ndouble dot(P p,P q){\n    return p.first*q.first+p.second*q.second;\n}\n\ndouble norm(P p){\n    return sqrt(pow(p.first,2)+pow(p.second,2));\n}\n\nint ccw(P p0,P p1,P p2){ //p0p1が基準\n    p1.first -= p0.first;\n    p1.second -= p0.second;\n    p2.first -= p0.first;\n    p2.second -= p0.second;\n\n    if(cross(p1,p2) > 0) return 1; // counter_clockwise\n    if(cross(p1,p2) < 0) return -1; // clockwise\n    if(dot(p1,p2)<0) return 2 ;//on_line back\n    if(norm(p1)<norm(p2)) return -2; //on_line front\n    return 3; // on_segment\n}\n\nint main()\n{\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        P p0,p1,p2,p3;\n        cin >> p0.first >> p0.second\n        >> p1.first >> p1.second\n        >> p2.first >> p2.second\n        >> p3.first >> p3.second;\n\n        p1.first -= p0.first;\n        p1.second -= p0.second;\n        p3.first -= p2.first;\n        p3.second -= p2.second;\n\n\n        //cout << dot(p1,p3) << endl;\n        if(dot(p1,p3) == 0) cout << 1 << endl;\n        else if(cross(p1,p3)==0) cout << 2 << endl;\n        else cout << 0 << endl;\n\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define For(i,x,y) for (register int i=(x);i<=(y);i++)\n#define FOR(i,x,y) for (register int i=(x);i<(y);i++)\n#define Dow(i,x,y) for (register int i=(x);i>=(y);i--)\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define siz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define fil(a,b) memset((a),(b),sizeof(a))\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pa;\ntypedef double db;\ninline ll read(){\n    ll x=0,f=1;char c=getchar();\n    while ((c<'0'||c>'9')&&(c!='-')) c=getchar();\n    if (c=='-') f=-1,c=getchar();\n    while (c>='0'&&c<='9') x=x*10+c-'0',c=getchar();\n    return x*f;\n}\n\nnamespace Geometry{\n\tconst db eps = 1e-9;\n\tstruct point{\n\t\tdb x,y;\n\t\tinline point operator + (const point &p){return (point){x+p.x,y+p.y};}\n\t\tinline point operator - (const point &p){return (point){x-p.x,y-p.y};}\n\t\tinline db operator * (const point &p){return x*p.x+y*p.y;}\n\t\tinline point operator / (const db &v){return (point){x/v,y/v};}\n\t\tinline point operator * (const db &v){return (point){x*v,y*v};}\n\t};\n\ttypedef point vec;\n\tinline db dot(vec a,vec b){return a.x*b.x+a.y*b.y;}\n\tinline db sqr(db x){return x*x;}\n\tinline db dis(point a,point b){return sqrt(sqr(a.x-b.x)+sqr(a.y-b.y));}\n\tinline db dis2(point a,point b){return sqr(a.x-b.x)+sqr(a.y-b.y);}\n\tinline db cross(vec a,vec b){return a.x*b.y-a.y*b.x;}\n\tstruct line{\n\t\tpoint a,b;\n\t};\n\tinline point projection(point A,line b){\n\t\tpoint B=b.a,C=b.b;\n\t\tvec BA=A-B,BC=C-B,BD=BC*(BA*BC/dis2(B,C));\n\t\treturn B+BD;\n\t}\n\tinline point reflection(point A,line b){\n\t\tpoint D=projection(A,b);\n\t\treturn (point){D.x*2-A.x,D.y*2-A.y};\n\t}\n\tinline int Counter_Clockwise(point A,line b){\n\t\tpoint B=b.a,C=b.b;\n\t\tdb f1=cross(C-B,A-B);\n\t\tif (fabs(f1)>eps) return (f1<0?2:1);\n\t\tdb f2=(C-B)*(A-B);\n\t\tif (f2<0) return 3;\n\t\treturn dis(B,C)<dis(A,B)?4:5;\n\t}\n\tinline int checkline(line a,line b){\n\t\tvec A=a.b-a.a,B=b.b-b.a;\n\t\tdb f1=A*B;\n\t\tif (fabs(f1)<=eps) return 1;\n\t\treturn fabs(cross(A,B))<=eps?2:0;\n\t}\n\tinline bool checkseg(line a,line b){\n\t\tpoint A=a.a,B=a.b,C=b.a,D=b.b;\n\t\tif (max(A.x,B.x)<min(C.x,D.x)) return 0;\n\t\tif (min(A.x,B.x)>max(C.x,D.x)) return 0;\n\t\tif (max(A.y,B.y)<min(C.y,D.y)) return 0;\n\t\tif (min(A.y,B.y)>max(C.y,D.y)) return 0;\n\t\tdb s=cross(B-A,C-A),h=cross(B-A,D-A);\n\t\tif (s*h>=eps) return 0;\n\t\tdb i=cross(D-C,A-C),t=cross(D-C,B-C);\n\t\treturn i*t<=eps;\n\t}\n\tinline point crosspoint(line a,line b){\n\t\tpoint A=a.a,B=a.b,C=b.a,D=b.b;\n\t\tdb s1=fabs(cross(B-A,C-A)),s2=fabs(cross(B-A,D-A));\n\t\tvec CO=(D-C)*(s1/(s1+s2));\n\t\treturn C+CO;\n\t}\n\tinline db dis(point\tA,line b){\n\t\tpoint B=b.a,C=b.b,D=projection(A,b);\n\t\tint tmp=Counter_Clockwise(D,b);\n\t\tif (tmp==3) return dis(B,A);\n\t\tif (tmp==4) return dis(C,A);\n\t\tif (tmp==5) return dis(D,A);\n\t}\n\tinline db dis(line a,line b){\n\t\tif (checkseg(a,b)) return 0;\n\t\tdb s=dis(a.a,b),h=dis(a.b,b),i=dis(b.a,a),t=dis(b.b,a);\n\t\treturn min({s,h,i,t});\n\t}\n\ttypedef vector<point> polygon;\n\tinline db S(polygon v){\n\t\tdb s=cross(v.back(),v[0]);\n\t\tFor(i,0,siz(v)-2) s+=cross(v[i],v[i+1]);\n\t\treturn s/2;\n\t}\n\tinline bool check(polygon v){\n\t\tint n=siz(v),f=(cross(v[n-1]-v[n-2],v[0]-v[n-1])>=-eps);\n\t\tFor(i,1,n-2) if ((cross(v[i]-v[i-1],v[i+1]-v[i])>=-eps)!=f) return 0;\n\t\treturn 1;\n\t}\n\tinline int check(point a,polygon v){\n\t\tdb k=sqrt(23);point b=(point){a.x+100000000,a.y+k*100000000};\n\t\tint n=siz(v);bool f=0;\n\t\tFor(i,0,n-1){\n\t\t\tif (Counter_Clockwise(a,(line){v[i],v[(i+1)%n]})==5) return 1;\n\t\t\tif (checkseg((line){v[i],v[(i+1)%n]},(line){a,b})) f^=1;\n\t\t}\n\t\treturn !f?0:2;\n\t}\n};\nusing namespace Geometry;\n\nint main(){\n//\tfreopen(\"data.in\",\"r\",stdin);\n\tint T=read();\n\twhile (T--){\n\t\tline a;scanf(\"%lf%lf%lf%lf\",&a.a.x,&a.a.y,&a.b.x,&a.b.y);\n\t\tline b;scanf(\"%lf%lf%lf%lf\",&b.a.x,&b.a.y,&b.b.x,&b.b.y);\n\t\tprintf(\"%d\\n\",checkline(a,b));\n\t} \n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cassert>\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) FOR(i,0,n)\n#define rep(i,n) FOR(i,0,n)\n#define DEBUG(x) cout<<#x<<\": \"<<x<<endl\n#define vint vector<int>\n#define vdouble vector<double>\n#define vstring vector<string>\nusing namespace std;\n\n#include<map>\n#include<set>\n#include<queue>\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nconst int MAX_N = 1000000;\nconst int INFTY = (1 << 21); // 2097152\n// const ll INFTY = (1LL << 60);\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x=0, double y=0):x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a){ return Point(a * x, a * y); }\n\tPoint operator / (double a){ return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y;}\n\tbool operator < (const Point &p) const {\n\t\t// first x, second y\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// Orthogonal\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1- b2);\n}\n\n// Orthogonal\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1- b2);\n}\nint Q;\nint main() {\n\tcin >> Q;\n\trep(i, Q){\n\t\tPoint p0, p1, p2, p3;\n\t\tcin >> p0.x >> p0.y;\n\t\tcin >> p1.x >> p1.y;\n\t\tcin >> p2.x >> p2.y;\n\t\tcin >> p3.x >> p3.y;\n\t\tint r;\n\t\tif(isOrthogonal(p0,p1,p2,p3)) {\n\t\t\tr = 1;\n\t\t}\n\t\telse if(isParallel(p0,p1,p2,p3)){\n\t\t\tr = 2;\n\t\t}\n\t\telse{\n\t\t\tr = 0;\n\t\t}\n\t\tcout << r << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <regex>\n#include <cstdio>\n#include <cmath>\n#include <cctype>\n#include <string>\n#include <vector>\n#include <list>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\nusing ll = long long int;\n#define rep(i,n) for(int i = 0; i < n; i++)\n#define FOR(i, a, b)  for(int i = (a); i < (b) ; i++)\n#define pb push_back\n#define SORT(v,n) sort(v, v+n)\n#define ALL(x) (x).begin(),(x).end()\n#define debug(x) cerr << #x << \": \" << x << '\\n'\n#define elif else if\n#define itn ll\n#define int ll\n//const int INF = 100100100;\nconst int INF = (1LL << 32);\nconst int MOD = (int)1e9 + 7;\nconst double EPS = 1e-10;\n#define equals(a,b) (fabs((a) - (b)) < EPS)\nint dx[8] = { 1, 0, -1, 0, 1, -1, -1, 1 };\nint dy[8] = { 0, 1, 0, -1, 1, 1, -1, -1 };\ntypedef vector<vector<int>> vvi;\ntypedef vector<vector<vector<int>>> vvvi;\n\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y){}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator==(const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS and fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x* b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x* b.y - a.y * b.x;\n}\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(),double r = 0.0) : c(c),r(r){}\n};\n\n//直交判定\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//平行判定\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\nsigned main() {\n\tios::sync_with_stdio(false);\n\tint q;\n\tcin >> q;\n\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\trep(i, q) {\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tPoint p0 = Point(x0, y0);\n\t\tPoint p1 = Point(x1, y1);\n\t\tPoint p2 = Point(x2, y2);\n\t\tPoint p3 = Point(x3, y3);\n\t\tif (isOrthogonal(Segment(p0,p1),Segment(p2,p3))) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse if (isParallel(Segment(p0,p1),Segment(p2,p3))) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n \treturn 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS 1e-10\n#define equal(a,b) (fabs(a-b) < EPS)\n\nstruct Point{\n    double x,y;\n\n    Point(){}\n    Point(double x,double y) : x(x),y(y) {}\n\n    Point operator + (const Point &p)const{ return Point(x+p.x,y+p.y); }\n    Point operator - (const Point &p)const{ return Point(x-p.x,y-p.y); }\n    Point operator * (const double &k)const{ return Point(x*k,y*k); }\n};\n\ndouble dot(const Point &a,const Point &b){ return a.x*b.x+a.y*b.y; }\ndouble cross(const Point &a,const Point &b){ return a.x*b.y - b.x*a.y; }\n\nstruct Segment{\n    Point s,t;\n    Segment(){}\n    Segment(Point s,Point t) : s(s),t(t) {}\n};\n\ntypedef Point Vector;\n\nbool isOrthogonalSS(const Segment &s1,const Segment &s2){\n    Vector a = s1.t-s1.s;\n    Vector b = s2.t-s2.s;\n    return equal(dot(a,b),0);\n}\n\nbool isParallelSS(const Segment &s1,const Segment &s2){\n    Vector a = s1.t-s1.s;\n    Vector b = s2.t-s2.s;\n    return equal(cross(a,b),0);\n}\n\nint main(){\n    int Q;\n    Segment s1,s2;\n    cin >> Q;\n    while(Q--){\n        cin >> s1.s.x >> s1.s.y >> s1.t.x >> s1.t.y;\n        cin >> s2.s.x >> s2.s.y >> s2.t.x >> s2.t.y;\n        if(isParallelSS(s1,s2)){\n            cout << 2 << endl;\n        }else if(isOrthogonalSS(s1,s2)){\n            cout << 1 << endl;\n        }else{\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\n\nclass Vector {\n  public:\n    Vector(){}\n    Vector(int x, int y): x(x), y(y) {}\n    int dot(Vector v) {\n        return v.x * x + v.y * y;\n    }\n\n    int norm() {\n        return x * x + y * y;\n    }\n\n    Vector operator+(Vector v) { return Vector(v.x + x, v.y + y); }\n    Vector operator-(Vector v) { return Vector(x - v.x, y - v.y); }\n\n    int x, y;\n};\n\n\nclass Line {\n  public:\n    Line() {}\n    Line(Vector p1, Vector p2): p1(p1), p2(p2) {\n        direction = p1 - p2;\n    }\n\n    Vector p1, p2;\n    Vector direction;\n};\n\n\nint main() {\n    int q;\n    std::cin >> q;\n\n    for (int i = 0; i < q; i++) {\n        Vector p0, p1, p2, p3;\n        std::cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        Line l1(p0, p1), l2(p2, p3);\n        int dot = l1.direction.dot(l2.direction);\n\n        if (dot == 0) {\n            std::cout << 1 << std::endl;\n        } else if (dot * dot == l1.direction.norm() * l2.direction.norm()) {\n            std::cout << 2 << std::endl;\n        } else {\n            std::cout << 0 << std::endl;\n        }\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define REP(i,n) for(int i=0,_n=(int)(n);i<_n;++i)\n#define ALL(v) (v).begin(),(v).end()\n#define CLR(t,v) memset(t,(v),sizeof(t))\ntemplate<class T1,class T2>ostream& operator<<(ostream& os,const pair<T1,T2>&a){return os<<\"(\"<<a.first<<\",\"<<a.second<< \")\";}\ntemplate<class T>void pv(T a,T b){for(T i=a;i!=b;++i)cout<<(*i)<<\" \";cout<<endl;}\ntemplate<class T>void chmin(T&a,const T&b){if(a>b)a=b;}\ntemplate<class T>void chmax(T&a,const T&b){if(a<b)a=b;}\n\n\ntypedef long double D;\nconst D PI = acos(-1.0);\nconst D EPS = 1e-10;\nclass P { public:\n  D x, y;\n  P(D x=0, D y=0) : x(x), y(y) {}\n\n  P& operator+=(const P& o) { x += o.x; y += o.y; return *this; }\n  P& operator-=(const P& o) { x -= o.x; y -= o.y; return *this; }\n  P& operator*=(const P& o) { return *this = {x*o.x - y*o.y, x*o.y + y*o.x}; }\n  P& operator*=(const D& r) { x *= r; y *= r; return *this; }\n  P& operator/=(const D& r) { x /= r; y /= r; return *this; }\n  P operator-() const { return {-x, -y}; }\n\n  D norm() const { return x*x + y*y; }\n  D abs() const { return sqrt(norm()); }\n  D arg() const { return atan2(y, x); }\n  bool isZero() const { return std::abs(x) < EPS && std::abs(y) < EPS; }\n  /** 象限 */\n  int orth() const { return y >= 0 ? (x >= 0 ? 1 : 2) : (x < 0 ? 3 : 4); }\n  static P polar(const D& rho, const D& theta = 0) { return {rho * cos(theta), rho * sin(theta)}; }\n};\nstd::ostream &operator<<(std::ostream &os, P const &p) { return os << \"(\" << p.x << \", \" << p.y << \")\"; }\nstd::istream &operator>>(std::istream &is, P &p) { D a, b; is >> a >> b; p = P(a, b); return is; }\nP operator+(const P& p, const P& q) { return P(p) += q; }\nP operator-(const P& p, const P& q) { return P(p) -= q; }\nP operator*(const P& p, const P& q) { return P(p) *= q; }\nP operator*(const P& p, const D& r) { return P(p) *= r; }\nP operator/(const P& p, const D& r) { return P(p) /= r; }\nP operator*(const D& r, const P& p) { return P(p) *= r; }\nP operator/(const D& r, const P& p) { return P(p) /= r; }\nD crs(const P& a, const P& b){ return a.x*b.y - a.y*b.x; }\nD dot(const P& a, const P& b){ return a.x*b.x + a.y*b.y; }\nint signum(D x) {return x > EPS ? +1 : x < -EPS ? -1 : 0;}\n// 辞書順ソート\nbool operator<(const P& a, const P& b) {\n  if (a.x != b.x) return a.x < b.x;\n  return a.y < b.y;\n}\n// // 偏角ソート\n// bool operator<(const P& a, const P& b) {\n//   // atan2を使う方法。誤差に注意\n//   // return a.arg() < b.arg();\n\n//   // cosを使う方法。(0,0)の扱いに注意\n//   if (a.isZero() != b.isZero()) return a.isZero() > b.isZero();\n//   if (a.orth() != b.orth()) return a.orth() < b.orth();\n//   return crs(a, b) > 0;\n// }\n/** ベクトルpをベクトルbに射影したベクトル */\nP proj(const P& p, const P& b) {\n  P t = b * dot(p, b);\n  return t / b.norm();\n}\n/** 点pから直線abに引いた垂線の足となる点 */\nP footOfLP(const P& a, const P& b, const P& p) {\n  return a + proj(p-a, b-a);\n}\n/** 直線abを挟んで点pと対称な点 */\nP reflection(const P&a, const P&b, const P& p) {\n  return 2 * footOfLP(a, b, p) - p;\n}\nint ccw(const P& a, P b, P c) {\n  // return signum(crs(b - a, c - a));\n  b -= a; c -= a;\n  if (crs(b, c) > 0)       return +1;       // counter clockwise\n  if (crs(b, c) < 0)       return -1;       // clockwise\n  if (dot(b, c) < 0)       return +2;       // c--a--b on line\n  if (b.norm() < c.norm()) return -2;       // a--b--c on line\n  return 0;\n}\n/** 2直線の直行判定 : a⊥b <=> dot(a, b) = 0 */\nbool isOrthogonal(const P& a1, const P& a2, const P& b1, const P& b2) {\n  return abs(dot(a1-a2, b1-b2)) < EPS;\n}\n\n/** 2直線の平行判定 : a//b <=> crs(a, b) = 0 */\nbool isParallel(const P& a1, const P& a2, const P& b1, const P& b2) {\n  return abs(crs(a1-a2, b1-b2)) < EPS;\n}\n\nint main2() {\n  int N; cin >> N;\n  P p[4];\n  REP(i, N) {\n    REP(j, 4) cin >> p[j];\n    if (isParallel(p[0], p[1], p[2], p[3])) cout << 2 << endl;\n    else if (isOrthogonal(p[0], p[1], p[2], p[3])) cout << 1 << endl;\n    else cout << 0 << endl;\n\n  }\n  return 0;\n}\n\nint main() {\n\n#ifdef LOCAL\n  for (;!cin.eof();cin>>ws)\n#endif\n    main2();\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst int dx[8]={1,0,-1,0,1,-1,-1,1};\nconst int dy[8]={0,1,0,-1,1,1,-1,-1};\n\n// Problem Specific Parameter:\n\n// Description: ????????????\n// Verifyed: various problem \nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(O,a.t-a.s,b.t-b.s)==0;}\nbool parallel(L a,L b) {return sdet(O,a.t-a.s,b.t-b.s)==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint s1=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint s2=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(s1,s2)<=0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(O,a.t-a.s,b.t-b.s);\n\treturn u*a.s+(1-u)*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)<=0) h=l.s;\n\tif(sdot(l.t,l.s,p)<=0) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\nint main(void){\n\tint n;\n\tcin >> n;\n\tcout.precision(20);\n\trep(i,n){\n\t\tP a,b,c,d;\n\t\tcin >> a >> b >> c >> d;\n\t\tL s1={a,b},s2={c,d};\n\t\tif(parallel(s1,s2))\n\t\t\tcout << 2 << endl;\n\t\telse if(vertical(s1,s2))\n\t\t\tcout << 1 << endl;\n\t\telse\n\t\t\tcout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n  double x, y;\n\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator + (Point p){return Point(x + p.x, y + p.y);}\n  Point operator - (Point p){return Point(x - p.x, y - p.y);}\n  Point operator * (double a){return Point(x * a, y * a);}\n  Point operator / (double a){return Point(x / a, y / a);}\n\n  double abs(){return sqrt(norm());}\n  double norm(){return x * x + y * y;}\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n  return a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nvoid solve(){\n  int q; cin >> q;\n  vector<int> ans(q);\n  for(int i = 0; i < q; i++){\n    int x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n    Vector v0 = Vector(x1 - x0, y1 - y0);\n    Vector v1 = Vector(x3 - x2, y3 - y2);\n    if(equals(dot(v0, v1), 0)) ans[i] = 1;\n    else if(equals(cross(v0, v1), 0)) ans[i] = 2;\n  }\n  for(int i = 0; i < q; i++){\n    cout << ans[i] << endl;\n  }\n  return;\n}\n\nint main(){\n  solve();\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point{\n    public:\n    double x,y;\n    Point(double x=0,double y=0):x(x),y(y){}\n    Point operator+(const Point &p){\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator-(const Point &p){\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator*(const double &a){\n        return Point(a*x,a*y);\n    }\n    Point operator/(const double &a){\n        return Point(x/a,y/a);\n    }\n    double abs(){\n        return sqrt(norm());\n    }\n    double norm(){\n        return x*x+y*y;\n    }\n    bool operator<(const Point &p){\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator==(const Point &p){\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\ntypedef Point Vector;\nstruct Segment{\n    Point p1,p2;\n};\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n\nint main(){\n    int q;\n    cin>>q;\n    Segment s1,s2;\n    for(int i=0;i<q;i++){\n        int a,b,c,d,e,f,g,h;\n        cin>>a>>b>>c>>d>>e>>f>>g>>h;\n        s1.p1.x=a;\n        s1.p1.y=b;\n        s1.p2.x=c;\n        s1.p2.y=d;\n        s2.p1.x=e;\n        s2.p1.y=f;\n        s2.p2.x=g;\n        s2.p2.y=h;\n        if(isParallel(s1,s2)) cout<<2<<endl;\n        else if(isOrthogonal(s1,s2)) cout<<1<<endl;\n        else cout<<0<<endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define join_(a,b) join_again_(a,b)\n#define join_again_(a,b) a ## b\n#define rep(i,n) for(int i = 0, join_(lim, __LINE__) = n; i < join_(lim, __LINE__); ++i)\nusing C = std::complex<double>;\nconst double EPS = 1e-10;\n\n// CGL_1_A\nC projection(C p, C p1, C p2) {\n    return C(((p-p1) / (p2-p1)).real(), 0.0) * (p2-p1) + p1;\n}\n\nvoid solve_CGL_1_A() {\n    int x1, y1, x2, y2;\n    std::cin >> x1 >> y1 >> x2 >> y2;\n    C p1(x1,y1), p2(x2,y2);\n    int q;\n    std::cin >> q;\n    rep(i,q) {\n        int x, y;\n        std::cin >> x >> y;\n        C p = C(x,y);\n        C res = projection(p, p1, p2);\n        printf(\"%.20lf %.20lf\\n\", res.real(), res.imag());\n    }\n}\n\n// CGL_1_B\nC reflection(C p, C p1, C p2) {\n    return std::conj(((p-p1) / (p2-p1))) * (p2-p1) + p1;\n}\n\nvoid solve_CGL_1_B() {\n    int x1, y1, x2, y2;\n    std::cin >> x1 >> y1 >> x2 >> y2;\n    C p1(x1,y1), p2(x2,y2);\n    int q;\n    std::cin >> q;\n    rep(i,q) {\n        int x, y;\n        std::cin >> x >> y;\n        C p = C(x,y);\n        C res = reflection(p, p1, p2);\n        printf(\"%.20lf %.20lf\\n\", res.real(), res.imag());\n    }\n}\n\n// CGL_1_C\n// p0->p1 and p0->p2, query is p2\nint counter_clockwise(C p0, C p1, C p2) {\n    C a = std::conj(p1-p0) * (p2-p0);\n    if (a.imag() >  EPS) { return +1; } // counter clockwise\n    if (a.imag() < -EPS) { return -1; } // clockwise\n    if (a.real() < -EPS) { return +2; } // p2-p0-p1\n    if (std::norm(p1-p0) < std::norm(p2-p0)) { return -2; } // p0-p1-p2\n    return 0; // p0-p2-p1\n}\nauto ccw = counter_clockwise;\n\nvoid solve_CGL_1_C() {\n    int x1, y1, x2, y2;\n    std::cin >> x1 >> y1 >> x2 >> y2;\n    C p0(x1,y1), p1(x2,y2);\n    int q;\n    std::cin >> q;\n    rep(i,q) {\n        int x, y;\n        std::cin >> x >> y;\n        C p2 = C(x,y);\n        int res = counter_clockwise(p0, p1, p2);\n        if (res == 1) {\n            printf(\"COUNTER_CLOCKWISE\\n\");\n        }\n        if (res == -1) {\n            printf(\"CLOCKWISE\\n\");\n        }\n        if (res == 2) {\n            printf(\"ONLINE_BACK\\n\");\n        }\n        if (res == -2) {\n            printf(\"ONLINE_FRONT\\n\");\n        }\n        if (res == 0) {\n            printf(\"ON_SEGMENT\\n\");\n        }\n    }\n}\n\n// CGL_2_A\nint parallel_orthogonal(C p0, C p1, C p2, C p3) {\n    C a = (p3-p2) / (p1-p0);\n    if (std::abs(a.real()) < EPS) { return 1; } // orthogonal\n    if (std::abs(a.imag()) < EPS) { return 2; } // parallel\n    return 0;\n}\n\nvoid solve_CGL_2_A() {\n    int q;\n    std::cin >> q;\n    rep(i,q) {\n        int xs[8];\n        rep(k,8) {\n            std::cin >> xs[k];\n        }\n        C p0 = C(xs[0], xs[1]);\n        C p1 = C(xs[2], xs[3]);\n        C p2 = C(xs[4], xs[5]);\n        C p3 = C(xs[6], xs[7]);\n        int res = parallel_orthogonal(p0, p1, p2, p3);\n        printf(\"%d\\n\", res);\n    }\n}\n\n// CGL_2_B\nbool intersection(C p0, C p1, C p2, C p3) {\n    return\n        ccw(p0, p1, p2) * ccw(p0, p1, p3) <= 0 &&\n        ccw(p2, p3, p0) * ccw(p2, p3, p1) <= 0;\n}\n\nvoid solve_CGL_2_B() {\n    int q;\n    std::cin >> q;\n    rep(i,q) {\n        int xs[8];\n        rep(k,8) {\n            std::cin >> xs[k];\n        }\n        C p0 = C(xs[0], xs[1]);\n        C p1 = C(xs[2], xs[3]);\n        C p2 = C(xs[4], xs[5]);\n        C p3 = C(xs[6], xs[7]);\n        bool res = intersection(p0, p1, p2, p3);\n        printf(\"%d\\n\", res ? 1 : 0);\n    }\n}\n\n\n\nint main() {\n    solve_CGL_2_A();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\ntypedef struct point{\n    double x;\n    double y;\n}vect;\n\ndouble dot(vect a,vect b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(vect a,vect b){\n    return a.x*b.y-a.y*b.x;\n}\n\nint main() {\n    int q;\n    point p0,p1,p2,p3;\n    cin>>q;\n    for (int i = 0; i < q; ++i) {\n        cin>>p0.x>>p0.y>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y;\n        vect v1,v2;\n        v1.x=p1.x-p0.x;\n        v1.y=p1.y-p0.y;\n\n        v2.x=p3.x-p2.x;\n        v2.y=p3.y-p2.y;\n\n        if (!dot(v1,v2))\n            cout<<\"1\"<<endl;\n        else if (!cross(v1,v2))\n            cout<<\"2\"<<endl;\n        else\n            cout<<\"0\"<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i, a, b) for (int i = a, i##end = b; i <= i##end; ++i)\n#define per(i, a, b) for (int i = a, i##end = b; i >= i##end; --i)\n#define rep0(i, a) for (int i = 0, i##end = a; i < i##end; ++i)\n#define per0(i, a) for (int i = (int)a-1; ~i; --i)\n#define max(a, b) ((a) > (b) ? (a) : (b))\n#define min(a, b) ((a) < (b) ? (a) : (b))\n#define chkmax(a, b) a = max(a, b)\n#define chkmin(a, b) a = min(a, b)\n#define x first\n#define y second\n\ntypedef long long ll;\ntypedef double DB;\n\nconst DB eps = 1e-10;\n\nstruct Point { DB x, y; };\nPoint operator + (Point a, Point b) { return (Point){a.x + b.x, a.y + b.y}; }\nPoint operator - (Point a, Point b) { return (Point){a.x - b.x, a.y - b.y}; }\nPoint operator * (DB k, Point a) { return (Point){k * a.x, k * a.y}; }\nDB dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\nDB cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\nDB disc(Point a) { return sqrt(dot(a, a)); }\n\nint q;\nPoint P1, P2, P3, P4;\n\nint main() {\n\tscanf(\"%d\", &q);\n\twhile (q--) {\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\", &P1.x, &P1.y, &P2.x, &P2.y, &P3.x, &P3.y, &P4.x, &P4.y);\n\t\tPoint vec1 = P2-P1, vec2 = P4-P3; DB t = cross(vec1, vec2);\n\t\tif (fabs(cross(vec1, vec2)) < eps) puts(\"2\");\n\t\telse if (fabs(dot(vec1, vec2)) < eps) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <vector>\n\nconst double kEpsilon = 1e-10;\ninline bool equals (double a, double b){\n  return fabs(a-b) < kEpsilon;\n}\n\nclass Point {\n public:\n  double x, y;\n\n  Point() = default;\n  Point(double x, double y) : x(x), y(y) {}\n\n  Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n  Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n  Point operator*(const double k) { return Point(x * k, y * k); }\n\n  double SquaredNorm() { return x * x + y * y; }\n  double abs() { return sqrt(this->SquaredNorm()); }\n\n  bool operator<(const Point &p) const { return x != p.x ? x < p.x : y < p.y; }\n  bool operator==(const Point &p) const {\n    return fabs(x - p.x) < kEpsilon && fabs(y - p.y) < kEpsilon;\n  }\n\n  double dot(const Point &p) const { return x * p.x + y * p.y; }\n  double cross(const Point &p) const { return x * p.y - y * p.x; }\n};\n\ndouble dot(const Point &p1, const Point &p2) {\n  return p1.x * p2.x + p1.y * p2.y;\n}\ndouble cross(const Point &p1, const Point &p2) {\n  return p1.x * p2.y - p1.y * p2.x;\n}\n\nusing Vector = Point;\n\nstruct Segment {\n  Point p1, p2;\n\n  Segment() = default;\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\nusing Line = Segment;\n\nclass Circle {\n public:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\nusing Polygon = std::vector<Point>;\n#include <array>\n#include <cmath>\n#include <cstddef>\n#include <iostream>\n\nint main() {\n  int q;\n\n  std::array<Point, 4> points;\n\n  std::cin >> q;\n  for (size_t i = 0; i < q; ++i) {\n    for (size_t j = 0; j < 4; ++j) {\n      std::cin >> points[j].x >> points[j].y;\n    }\n    Vector q1 = points[1] - points[0];\n    Vector q2 = points[3] - points[2];\n\n    if (equals(cross(q1, q2), 0)) {\n      std::cout << 2 << std::endl;\n    } else if (equals(dot(q1, q2), 0)) {\n      std::cout << 1 << std::endl;\n    } else {\n      std::cout << 0 << std::endl;\n    }\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) REP(i,0,n)\n\ntypedef complex<double> P;\n\n#define EPS (1e-7)\n\ndouble cross(P const& a, P const& b) {\n  return imag(conj(a)*b);\n}\n\nbool is_parallel(P const& a1, P const& a2, P const& b1, P const& b2) {\n  return abs(cross(a2-a1, b2-b1)) < EPS;\n}\n\nbool is_orthogonal(P const& a1, P const& a2, P const& b1, P const& b2) {\n  return is_parallel(a1, a1+(a2-a1)*P(0, 1), b1, b2);\n}\n\nint main () {\n  \n  int q; cin >> q;\n  for(;q--;) {\n    P a1, a2, b1, b2;\n    cin >> a1.real() >> a1.imag() >> a2.real() >> a2.imag();\n    cin >> b1.real() >> b1.imag() >> b2.real() >> b2.imag();\n    if(is_parallel(a1, a2, b1, b2)) {\n      cout << 2 << endl;\n    }\n    else if(is_orthogonal(a1, a2, b1, b2)) {\n      cout << 1 << endl;\n    }\n    else {\n      cout << 0 << endl;\n    }\n\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <iomanip>\n#include <cmath>\n\nextern const double eps;\nbool eql(const double &a, const double &b) {\n    return fabs(a - b) < eps;\n}\n\nstruct Vector {\n    double x, y;\n    Vector(int _x, int _y) : x(_x), y(_y) {}\n    Vector(double _x, double _y) : x(_x), y(_y) {}\n    Vector() :x(0), y(0) {}\n\n    double dot(const Vector &r) const {\n        return x * r.x + y * r.y;\n    }\n    \n    double cross(const Vector &r) const {\n        return x * r.y - y * r.x;\n    }\n\n    double length() const {\n        return sqrt(x * x + y * y);\n    }\n\n    Vector  operator +  (const Vector &r) const {\n        return Vector(x + r.x, y + r.y);\n    }\n    Vector& operator += (const Vector &r) {\n        x += r.x, y += r.y;\n        return *this;\n    }\n\n    Vector  operator -  () const {\n        return Vector(-x, -y);\n    }\n\n    Vector  operator -  (const Vector &r) const {\n        return *this + -r;\n    }\n    Vector& operator -= (const Vector &r) {\n        x -= r.x, y -= r.y;\n        return *this;\n    }\n\n    Vector  operator *  (double k) const {\n        Vector tmp = *this;\n        tmp.x *= k, tmp.y *= k;\n        return tmp;\n    }\n\n    Vector& operator *= (double k) {\n        x *= k, y *= k;\n        return *this;\n    }\n\n    // 向量单位化\n    void unitise() {\n        double len = length();\n        x /= len, y /= len;\n    }\n};\ntypedef Vector Point;\nstruct Line {\n    Point p;\n    // 规定方向向量取单位向量\n    Vector dir;\n\n    Line(Point _p, Vector _dir) : p(_p), dir(_dir) {\n        dir.unitise();\n    }\n    Line() {}\n\n};\n\n// 向量数乘\nVector operator * (double k, const Vector & r) {\n    return r * k;\n}\n\n// 点到直线的投影点\nPoint projection(const Point &p, const Line &l) {\n    double d = Vector(p - l.p).dot(l.dir);\n    return l.p + d * l.dir;\n}\n// 点关于直线的对称点\nPoint reflection(const Point &p, const Line &l) {\n    Point pro = projection(p, l);\n    return p + 2 * (pro - p);\n}\n\n// 直线互相平行？\nbool parallel(const Line &l, const Line &r) {\n    return fabs(l.dir.cross(r.dir)) < eps;\n}\n\n// 直线互相垂直？\nbool orthogonal(const Line &l, const Line &r) {\n    return fabs(l.dir.dot(r.dir)) < eps;\n}\n\nusing namespace std;\nconst double eps = 1e-8;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n\n    int q; cin >> q;\n    while (q--) {\n        Line l[2];\n        for (int x1, y1, x2, y2, i = 0; i < 2; ++i) {\n            cin >> x1 >> y1 >> x2 >> y2;\n            l[i].p = Point(x1, y1);\n            l[i].dir = Vector(x2 - x1, y2 - y1);\n        }\n\n        if (parallel(l[0], l[1])) {\n            cout << \"2\\n\";\n        } else if (orthogonal(l[0], l[1])) {\n            cout << \"1\\n\";\n        } else cout << \"0\\n\";\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <utility>\n#define EPS 1e-10\nusing namespace std;\n\nint main(void){\n\n    pair<double, double> p0, p1, p2, p3;\n    int n;\n    cin >> n;\n\n    while(n--){\n\n        cin >> p0.first >> p0.second;\n        cin >> p1.first >> p1.second;\n        cin >> p2.first >> p2.second;\n        cin >> p3.first >> p3.second;\n\n        double innerProduct = (p1.first - p0.first)*(p3.first - p2.first)\n            + (p1.second - p0.second)*(p3.second - p2.second);\n        double crossProduct = (p1.first - p0.first)*(p3.second - p2.second)\n            - (p1.second - p0.second)*(p3.first - p2.first);\n\n        if(crossProduct == 0){\n            cout << \"2\" << endl;\n        }else if(innerProduct == 0 ){\n            cout << \"1\" << endl;\n        }else{\n            cout << \"0\" << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n  double x, y;\n  Point() {};\n  Point(double x, double y): x(x), y(y) {}\n\n  Point operator + (const Point &p) { return Point(x + p.x, y + p.y); }\n  Point operator - (const Point &p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double d) { return Point(d * x, d * y); }\n  Point operator / (double d) { return Point(d / x, d / y); }\n\n  bool operator < (const Point &p) const {\n    return (x == p.x ? y < p.y : x < p.x);\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n  friend ostream& operator << (ostream &os, Point &p) {\n    return os << \"Point(\" << p.x << \", \" << p.y << \")\";\n  }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n  Point p1, p2;  \n};\n\ndouble cross (Point p1, Point p2) {\n  return p1.x * p2.y - p1.y * p2.x;\n}\n\ndouble dot(Vector v1, Vector v2) {\n  return v1.x * v2.x + v1.y * v2.y;\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint main() {\n  int n; cin >> n;\n  while (n--) {\n    Segment s1, s2;\n    int x, y;\n\n    cin >> x >> y;\n    s1.p1 = Point(x, y);\n    cin >> x >> y;\n    s1.p2 = Point(x, y);\n\n    cin >> x >> y;\n    s2.p1 = Point(x, y);\n    cin >> x >> y;\n    s2.p2 = Point(x, y);\n\n    if (isParallel(s1, s2)) cout << 2;\n    else if (isOrthogonal(s1, s2)) cout << 1;\n    else cout << 0;\n    cout << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (abs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(0), y(0){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tVector v1(x1 - x0, y1 - y0);\n\t\tVector v2(x3 - x2, y3 - y2);\n\t\tif (isParallel(v1, v2)) cout << 2 << endl;\n\t\telse if (isOrthogonal(v1, v2)) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n//#include <cmath>\n//#include <cstdio>\nusing namespace std;\n\nstruct Point {\n  double x;\n  double y;\n};\n\ndouble dot(Point p0, Point p1, Point p2, Point p3) {\n  return (p1.x - p0.x) * (p3.x - p2.x) + (p1.y - p0.y) * (p3.y - p2.y);\n}\n\ndouble cross(Point p0, Point p1, Point p2, Point p3) {\n  return (p1.x - p0.x) * (p3.y - p2.y) - (p1.y - p0.y) * (p3.x - p2.x);\n}\n\nint main(void) {\n  int q;\n  Point p0, p1, p2, p3;\n  cin >> q;\n\n  for(int i = 0; i < q; i++) {\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    if(dot(p0, p1, p2, p3) == 0.0) { //垂直だった場合\n      cout << \"1\" << endl;\n    }\n    else if(cross(p0, p1, p2, p3) == 0.0) { //平行だった場合\n      cout << \"2\" << endl;\n    }\n    else {\n      cout << \"0\" << endl;\n    }\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst double EPS = 1e-10;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}\n\n    Point operator + (Point &p) { return Point(x + p.x, y + p.y); }\n\n    Point operator - (Point &p) { return Point(x - p.x, y - p.y); }\n\n    Point operator * (double k) { return Point(x * k, y * k); }\n\n    Point operator / (double k) { return Point(x / k, y / k); }\n\n    double norm() { return x * x + y * y; }\n\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n    Point c;\n    double r;\n\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nbool isOrthgonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthgonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthgonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthgonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n\n    int q;\n    cin >> q;\n    int x0, y0, x1, y1, x2, y2, x3, y3;\n    while (q--) {\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        Vector v0(x0 - x1, y0 - y1), v1(x2 - x3, y2 - y3);\n        if (isParallel(v0, v1)) {\n            cout << 2 << endl;\n        } else if (isOrthgonal(v0, v1)) {\n            cout << 1 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#pragma GCC optimize (\"O2\")\n#pragma GCC optimize (\"tree-vectorize\")\n#pragma GCC target (\"sse4\")\n\n#include <bits/stdc++.h>\n#define FOR(i, a, b) for(int i=(a);i<(b);++i)\n#define FFOR(i, a, b) FOR(i, a, b+1)\n#define REP(i, n) FOR(i, 0, n)\n#define RREP(i, n) FOR(i, 1, n+1)\n#define ALL(v) (v).begin(), (v).end()\n#define RALL(v) (v).rbegin(), (v).rend()\n#define LEN(x) (int)(x).size()\n#define DUMP(x) cerr<<__LINE__<<' '<<#x<<\"=\"<<(x)<<endl;\n#define pb push_back\n#define eb emplace_back\n#define mp make_pair\n\nusing namespace std;\nusing lint = long long;\nusing pii =  pair<int, int>;\nusing pll =  pair<lint, lint>;\ntemplate <typename T> using vc = vector<T>;\ntemplate <typename T> using vvc = vector<vector<T>>;\ntemplate <typename T> inline bool chmax(T &a, T b){if(a<b){a = b; return true;} return false;}\ntemplate <typename T> inline bool chmin(T &a, T b){if(a>b){a = b; return true;} return false;}\n\nconst double PI = acos(-1);\nconstexpr lint ten(int n) {return n==0 ? 1 : ten(n-1)*10;}\n\nnamespace Geometry{\n    //TODO: REPLACE\n    double eps = 1e-12;\n\n    template <typename T>\n    struct Vector{\n    public:\n        T x, y;\n\n        explicit Vector(T x=0, T y=0) : x(x), y(y){}\n\n        Vector& operator+=(const Vector v) {\n            x += v.x; y += v.y;\n            return *this;\n        }\n        Vector& operator-=(const Vector v) {\n            x -= v.x; y -= v.y;\n            return *this;\n        }\n        Vector& operator*=(const T a){\n            x *= a; y *= a;\n            return *this;\n        }\n        Vector& operator/=(const T a){\n            x /= a; y /= a;\n            return *this;\n        }\n        Vector operator+(const Vector v) const {\n            Vector res(*this);\n            return res += v;\n        }\n        Vector operator-(const Vector v) const {\n            Vector res(*this);\n            return res -= v;\n        }\n        Vector operator*(const T a) const {\n            Vector res(*this);\n            return res *= a;\n        }\n        Vector operator/(const T a) const {\n            Vector res(*this);\n            return res /= a;\n        }\n        bool operator==(const Vector p) const {\n            return fabs(x-p.x) < eps and fabs(y-p.y) < eps;\n        }\n        bool operator!=(const Vector p) const {\n            return not (fabs(x-p.x) < eps and fabs(y-p.y) < eps);\n        }\n        T norm() const {\n            return x * x + y * y;\n        }\n        T args() const {\n            return atan2(y, x);\n        }\n        T abs() const {\n            return sqrt(norm());\n        }\n    };\n\n    template <typename T>\n    struct Segment{\n    public:\n        Vector<T> first, second;\n\n        explicit Segment(Vector<T> first=Vector<T>(), Vector<T> second=Vector<T>()) : first(first), second(second){}\n    };\n\n    template <typename T>\n    static T norm(const Vector<T> v) {\n        return v.norm();\n    }\n    template <typename T>\n    static T norm(const Segment<T> s){\n        return (s.second-s.first).norm();\n    }\n    template <typename T>\n    static T args(const Vector<T> v) {\n        return v.args();\n    }\n    template <typename T>\n    static T args(const Segment<T> s) {\n        return (s.second-s.first).args();\n    }\n    template <typename T>\n    static T abs(const Vector<T> v){\n        return v.abs();\n    }\n    template <typename T>\n    static T abs(const Segment<T> s){\n        return (s.second-s.first).abs();\n    }\n    template <typename T>\n    static T dot(const Vector<T> v1, const Vector<T> v2){\n        return v1.x * v2.x + v1.y * v2.y;\n    }\n    template <typename T>\n    static T dot(const Segment<T> s1, const Segment<T> s2){\n        return dot(s1.second-s1.first, s2.second-s2.first);\n    }\n    template <typename T>\n    static T cross(const Vector<T> v1, const Vector<T> v2){\n        return v1.x * v2.y - v1.y * v2.x;\n    }\n    template <typename T>\n    static T cross(const Segment<T> s1, const Segment<T> s2){\n        return cross(s1.second-s1.first, s2.second-s2.first);\n    }\n    template <typename T>\n    static bool isOrthogonal(const Vector<T> v1, const Vector<T> v2){\n        return fabs(dot(v1, v2)-0.0) < eps;\n    }\n    template <typename T>\n    static bool isOrthogonal(const Segment<T> s1, const Segment<T> s2){\n        return fabs(dot(s1, s2)-0.0) < eps;\n    }\n    template <typename T>\n    static bool isParallel(const Vector<T> v1, const Vector<T> v2){\n        return fabs(cross(v1, v2)-0.0) < eps;\n    }\n    template <typename T>\n    static bool isParallel(const Segment<T> s1, const Segment<T> s2){\n        return fabs(cross(s1, s2)-0.0) < eps;\n    }\n}\n\nusing namespace Geometry;\n\nclass Task{\npublic:\n    void solve(istream& in, ostream& out){\n        int Q;\n        in>>Q;\n        while(Q--){\n            int x0, y0, x1, y1, x2, y2, x3, y3;\n            in>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n            Segment<double> s1(Vector<double>(x0, y0), Vector<double>(x1, y1));\n            Segment<double> s2(Vector<double>(x2, y2), Vector<double>(x3, y3));\n            if(isOrthogonal(s1, s2)) out<<1<<'\\n';\n            else if(isParallel(s1, s2)) out<<2<<'\\n';\n            else out<<0<<'\\n';\n        }\n    }\n};\n\nint main(){\n    istream& in(cin);\n    ostream& out(cout);\n    ios_base::sync_with_stdio(false);\n    in.tie(nullptr), out.tie(nullptr);\n    Task solver;\n    solver.solve(in, out);\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n// Begin Header {{{\n#define all(x)          (x).begin(), (x).end()\n#define rep(i, n)       for (i64 i = 0, i##_limit = (n); i < i##_limit; ++i)\n#define reps(i, s, t)   for (i64 i = (s), i##_limit = (t); i <= i##_limit; ++i)\n#define repr(i, s, t)   for (i64 i = (s), i##_limit = (t); i >= i##_limit; --i)\n#define var(Type, ...)  Type __VA_ARGS__; input(__VA_ARGS__)\n#ifndef DBG\n#define trace(...)\n#endif\nusing namespace std;\nusing i64 = int_fast64_t;\nusing pii = pair<i64, i64>;\ntemplate <class T, class U> inline bool chmax(T &a, const U &b) { return b > a && (a = b, true); }\ntemplate <class T, class U> inline bool chmin(T &a, const U &b) { return b < a && (a = b, true); }\ninline i64  sigma(i64 n)            { return (n * (n + 1) >> 1); }\ninline i64  updiv(i64 a, i64 b)     { return (a + b - 1) / b; }\ninline i64  sqr(i64 n)              { return n * n; }\ninline string to_string(char c)     { return string(1, c); }\nconstexpr int INF  = 0x3f3f3f3f;\nconstexpr i64 LINF = 0x3f3f3f3f3f3f3f3fLL;\n\ntemplate <class T>\ninline vector<T> make_v(const T &initValue, size_t sz) {\n    return vector<T>(sz, initValue);\n}\ntemplate <class T, class... Args>\ninline auto make_v(const T &initValue, size_t sz, Args... args) {\n    return vector<decltype(make_v<T>(initValue, args...))>(sz, make_v<T>(initValue, args...));\n}\n\ninline void input() {}\ntemplate <class Head, class... Tail>\ninline void input(Head &head, Tail&... tail) { cin >> head; input(tail...); }\n\ninline void print() { cout << \"\\n\"; }\ntemplate <class Head, class... Tail>\ninline void print(Head &&head, Tail&&... tail) {\n    cout << head;\n    if (sizeof...(tail)) cout << ' ';\n    print(forward<Tail>(tail)...);\n}\n\ntemplate <class T>\ninline ostream& operator<< (ostream &out, const vector<T> &vec) {\n    static constexpr const char *delim[] = { \" \", \"\" };\n    for (const auto &e : vec) out << e << delim[&e == &vec.back()];\n    return out;\n}\n\ntemplate <typename Func>\nstruct FixPoint : Func {\n    inline constexpr FixPoint(Func &&f) noexcept : Func(forward<Func>(f)) {}\n\n    template <typename... Args>\n    inline decltype(auto) operator()(Args &&... args) const {\n        return Func::operator()(*this, forward<Args>(args)...);\n    }\n};\n\ntemplate< typename Func >\ninline decltype(auto) makeFixPoint(Func &&f) {\n    return FixPoint< Func >{forward< Func >(f)};\n}\n// }}} End Header\n\n// Geometry {{{\nconstexpr double EPS = 1e-9;\nconstexpr double PI = 3.141592653589793238;\nconstexpr inline bool eq(double a, double b) noexcept { return fabs(a - b) < EPS; }\n\n// 2Dベクトル {{{\nstruct Vec2 {\n    double x, y;\n\n    constexpr Vec2(double x = 0, double y = 0) noexcept : x(x), y(y) {}\n\n    inline constexpr Vec2& operator+=(Vec2 rhs) noexcept {\n        x += rhs.x; y += rhs.y;\n        return *this;\n    }\n    inline constexpr Vec2& operator-=(Vec2 rhs) noexcept {\n        x -= rhs.x; y -= rhs.y;\n        return *this;\n    }\n    inline constexpr Vec2& operator*=(double k) noexcept {\n        x *= k; y *= k;\n        return *this;\n    }\n    inline constexpr Vec2& operator/=(double k) noexcept {\n        x /= k; y /= k;\n        return *this;\n    }\n    inline constexpr Vec2 operator-() const noexcept {\n        return Vec2(-x, -y);\n    }\n    inline constexpr double norm() const noexcept {\n        return x * x + y * y;\n    }\n    inline constexpr double abs() const noexcept {\n        return sqrt(norm());\n    }\n\n};\ninline constexpr bool operator==(Vec2 lhs, Vec2 rhs) noexcept {\n    return eq(lhs.x, rhs.x) && eq(lhs.y, rhs.y);\n}\ninline constexpr bool operator!=(Vec2 lhs, Vec2 rhs) noexcept { return !(lhs == rhs); }\ninline constexpr Vec2 operator+(Vec2 lhs, Vec2 rhs) noexcept { return Vec2(lhs) += rhs; }\ninline constexpr Vec2 operator-(Vec2 lhs, Vec2 rhs) noexcept { return Vec2(lhs) -= rhs; }\ninline constexpr Vec2 operator*(Vec2 lhs, double k) noexcept { return Vec2(lhs) *= k; }\ninline constexpr Vec2 operator/(Vec2 lhs, double k) noexcept { return Vec2(lhs) /= k; }\ninline ostream& operator<<(ostream &os, Vec2 rhs) { return os << rhs.x << ' ' << rhs.y; }\ninline istream& operator>>(istream &is, Vec2 &rhs) { return is >> rhs.x >> rhs.y; }\ninline constexpr double norm(const Vec2 a) noexcept { return a.norm(); }\ninline constexpr double abs(Vec2 a) noexcept { return a.abs(); }\ninline constexpr double dot(Vec2 a, Vec2 b) noexcept { return (a.x * b.x) + (a.y * b.y); }\ninline constexpr double det(Vec2 a, Vec2 b) noexcept { return (a.x * b.y) - (a.y * b.x); }\ninline constexpr double arg(Vec2 p) noexcept { return atan2(p.y, p.x); }\n// }}}\n\n// 線分{{{\nstruct Segment {\n    Vec2 p1, p2;\n    constexpr Segment() noexcept {}\n    constexpr Segment(Vec2 p1, Vec2 p2) noexcept : p1(p1), p2(p2) {}\n\n    constexpr Vec2 asVec2() const noexcept {\n        return p2 - p1;\n    }\n};\n\nusing Line = Segment;\n// }}}\n\n// 円 {{{\nstruct Circle {\n    Vec2 c;\n    double r;\n    constexpr Circle() noexcept : c(), r(0) {}\n    constexpr Circle(Vec2 center, double radius) noexcept : c(center), r(radius) {}\n};\n// }}}\n\n// 直行判定 {{{\ninline constexpr bool isOrthogonal(Vec2 a, Vec2 b) noexcept {\n    return eq(dot(a, b), 0);\n}\ninline constexpr bool isOrthogonal(Vec2 a1, Vec2 a2, Vec2 b1, Vec2 b2) noexcept {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\ninline constexpr bool isOrthogonal(const Segment &s1, const Segment &s2) noexcept {\n    return eq(dot(s1.asVec2(), s2.asVec2()), 0);\n} // }}}\n\n// 平行判定{{{\ninline constexpr bool isParallel(Vec2 a, Vec2 b) noexcept {\n    return eq(det(a, b), 0);\n}\ninline constexpr bool isParallel(Vec2 a1, Vec2 a2, Vec2 b1, Vec2 b2) noexcept {\n    return isParallel(a1 - a2, b1 - b2);\n}\ninline constexpr bool isParallel(const Segment &s1, const Segment &s2) noexcept {\n    return eq(det(s1.asVec2(), s2.asVec2()), 0);\n} // }}}\n\n// 射影, 反射 {{{\ninline constexpr Vec2 project(const Segment &s, Vec2 p) noexcept {\n    const Vec2 base = s.asVec2();\n    double k = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * k;\n}\n\ninline constexpr Vec2 reflect(const Segment &s, Vec2 p) noexcept {\n    return p + (project(s, p) - p) * 2.0;\n} // }}}\n\n// 距離 {{{\ninline constexpr double distance(Vec2 a, Vec2 b) noexcept {\n    return abs(a - b);\n} // }}}\n\n// 反時計周り {{{\n\n// ベクトル {p0 -> p1} に対する p2 の位置 {{{\nenum CCW : int {\n    COUNTER_CLOCKWISE = 1,  // 半時計回り\n    CLOCKWISE = -1,         // 時計回り\n    ONLINE_BACK = 2,        // p2, {p0 -> p1}\n         ONLINE_FRONT = -2,      // {p0 -> p1}, p2\n         ON_SEGMENT = 0,         // {p0 p2 p1}\n}; // }}}\n\ninline constexpr CCW ccw(Vec2 p0, Vec2 p1, Vec2 p2) noexcept {\n    const Vec2 a = p1 - p0;\n    const Vec2 b = p2 - p0;\n    if (det(a, b) > EPS) return CCW::COUNTER_CLOCKWISE;\n    if (det(a, b) < -EPS) return CCW::CLOCKWISE;\n    if (dot(a, b) < -EPS) return CCW::ONLINE_BACK;\n    if (a.norm() < b.norm()) return CCW::ONLINE_FRONT;\n    return CCW::ON_SEGMENT;\n} // }}}\n\n// }}}\n\nsigned main()\n{\n    ios::sync_with_stdio(false); cin.tie(nullptr);\n\n    var(int, Q);\n    while(Q--) {\n        var(Vec2, a, b, c, d);\n        trace(a, b, c, d);\n        if (isParallel(a, b, c, d)) {\n            print(2);\n        } else if (isOrthogonal(a, b, c, d)) {\n            print(1);\n        } else {\n            print(0);\n        }\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\nusing namespace std;\n\nconst double EPS = 1e-10;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k * x, k * y);\n\t}\n\tPoint operator / (double k) {\n\t\treturn Point(x / k, y / k);\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint main() {\n\tint q;\n\tcin >> q;\n\tdouble x0, y0, x1, y1, x2, y2, x3, y3;\n\tVector a, b;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\ta = Vector(x1 - x0, y1 - y0);\n\t\tb = Vector(x3 - x2, y3 - y2);\n\t\tif (cross(a, b) < EPS) cout << 2;\n\t\telse if (dot(a, b) < EPS) cout << 1;\n\t\telse cout << 0;\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\t/*vector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}*/\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double para(vector v1, vector v2) {\n\treturn sqrt(v1.x*v1.x + v1.y*v1.y)*sqrt(v2.x*v2.x + v2.y*v2.y);\n}\nint main() {\n\tdouble n, x1, x2, x3, x4, y1, y2, y3, y4;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tvector v1(x2 - x1, y2 - y1);\n\t\tvector v2(x4 - x3, y4 - y3);\n\t\tdouble ans = dot(v1, v2);\n\t\tif (ans == 0) cout << 1 << endl;\n\t\telse if (ans == para(v1, v2) || ans == -para(v1, v2)) cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <set>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <functional>\n#include <map>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <list>\n\nusing namespace std;\n\n#define EPS (1e-10)\n\nstruct Point{\n    Point(double _x = 0, double _y = 0){\n        x = _x;\n        y = _y;\n    }\n    double x;\n    double y;\n\n    Point operator + (Point p){\n        return Point(x + p.x, y+ p.y);\n    }\n\n    Point operator - (Point p){\n        return Point(x - p.x, y - p.y);\n    }\n\n    Point operator * (double a){\n        return Point(a * x, a * y);\n    }\n\n    Point operator / (double a){\n        return Point(x / a, y / a);\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    bool operator < (const Point &p) const{\n        return x!=p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) && fabs(y - p.y) < EPS;\n    }\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\nint main() {\n\n    int q;scanf(\"%d\",&q);\n\n    for(int i=0;i<q;i++){\n        Point p0 = Point(0,0);\n        Point p1 = Point(0,0);\n        Point p2 = Point();\n        Point p3 = Point();\n\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n\n        Vector v1 = p1 - p0;\n        Vector v2 = p3 - p2;\n\n        //直行判定\n        if((fabs(v1.x*v2.x)+ fabs(v1.y*v2.y)) < EPS){\n            printf(\"1\\n\");\n        }\n\n        //並行判定\n        else if((fabs(v1.x*v2.y) - fabs(v1.y*v2.x)) < EPS){\n            printf(\"2\\n\");\n        }\n\n        else{\n            printf(\"0\");\n        }\n\n    }\n\n\n    return 0;\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nstruct point{\n\tdouble x,y;\n\tpoint(){}\n\tpoint(double _x,double _y){\n\t\tx=_x;y=_y;\n\t}\n\tpoint operator +(const point &b) const{\n\t\treturn point(x+b.x,y+b.y);\n\t}\n\tpoint operator -(const point &b) const{\n\t\treturn point(x-b.x,y-b.y);\n\t}\n\tdouble operator ^(const point &b) const{\n\t\treturn (x*b.x)+(y*b.y);\n\t}\n\tdouble operator *(const point &b) const{\n\t\treturn x*b.y-y*b.x;\n\t}\n\tpoint operator *(const double &b) const{\n\t\treturn point(x*b,y*b);\n\t}\n};\ndouble len(point p){\n\treturn (p.x*p.x+p.y*p.y);\n}\nint main(){\n\tpoint p0,p1,p2,p3;\n\tint q;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>p0.x>>p0.y>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y;\n\t\tif((p1-p0)*(p3-p2)==0) puts(\"2\");\n\t\telse if(((p1-p0)^(p3-p2))==0) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\nstruct Point{\n\tshort x,y;\n};\nint dot(Point p1, Point p2){ return p1.x*p2.x+p1.y*p2.y; }\nint cross(Point p1, Point p2){ return p1.x*p2.y-p1.y*p2.x; }\nint main(){\n\tshort q, temp[8];\n\tPoint p1,p2;\n\tscanf(\"%hd\", &q);\n\twhile(q--){\n\t\tfor(short i=0;i<8;i++)\n\t\t\tscanf(\"%hd\", &temp[i]);\n\t\tp1.x = temp[2]-temp[0]; p1.y = temp[3]-temp[1];\n\t\tp2.x = temp[6]-temp[4]; p2.y = temp[7]-temp[5];\n\t\tif(cross(p1, p2) == 0) printf(\"2\\n\");\n\t\telse if(dot(p1, p2)==0) printf(\"1\\n\");\n\t\telse printf(\"0\\n\");\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <climits>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\n//???\nclass Point {\npublic:\n    double x, y;\n    \n    Point (double x = 0, double y = 0):x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(a * x, a * y);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    \n    double norm(){return x*x + y*y;};\n    double absolute(){return sqrt(norm());};\n    \n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    \n};\ntypedef Point Vector;                               //????????????\ntypedef struct Segment{Point p1, p2;}Segment;       //??????\n//????????????a????????????\ndouble norm(Vector a){\n    return a.x * a.x + a.y * a.y;\n}\n//????????????a?????§??????\ndouble absolute(Vector a){\n    return sqrt(norm(a));\n}\n\n//????????????a,b?????????\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n//????????????a,b?????????\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\n//????????????a??¨b?????´?????????\n//a??¨b?????´????????´??????????????????0?????????\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b), 0.0);\n}\n\n//????????????a??¨b???????????????\n//a??¨b?????´????????´??????????????????0?????????\nbool isParallel(Vector a , Vector b){\n    return equals(cross(a,b), 0.0);\n}\n\nint main(){\n    \n    int x0, y0, x1, y1, x2, y2, x3, y3;\n    \n    int q;\n    \n    cin >> q;\n    \n    for (int i = 0; i < q; i++) {\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        Vector a = Point(x1, y1) - Point(x0, y0);\n        Vector b = Point(x3, y3) - Point(x2, y2);\n        \n        if(isParallel(a, b)) cout << 2 << endl;\n        else if(isOrthogonal(a, b)) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tlong double x0, y0, x1, y1, x2, y2, x3, y3; cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tlong double vec1_x = x1 - x0, vec1_y = y1 - y0, vec2_x = x3 - x2, vec2_y = y3 - y2;\n\t\tif ((vec1_x*vec2_x + vec1_y*vec2_y) == 0) { cout << \"1\" << endl; continue; }\n\t\tif ((vec1_x*vec2_y - vec1_y*vec2_x)==0) { cout << \"2\" << endl; continue; }\n\t\tcout << \"0\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n\nconst double tol = 1e-15;\n\nint main() {\n  int q;\n  std::cin >> q;\n\n  for (int i = 0; i < q; ++i) {\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    std::cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n    double ip = (x1 - x0) * (x3 - x2) + (y1 - y0) * (y3 - y2);\n    double norm1 = std::sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));\n    double norm2 = std::sqrt((x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2));\n    double theta = ip / norm1 / norm2;\n\n    int result = 0;\n    if (std::abs(theta) < tol) {\n      result = 1;\n    } else if (std::abs(theta) > 1 - tol) {\n      result = 2;\n    }\n\n    std::cout << result << std::endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\n#define INF 0xffffffff\n\nint main() {\n    int q, x[2], y[2];\n    cin >> q;\n    loop(i, 0, q) {\n        double k[2];\n        loop(j, 0, 2) {\n            cin >> x[0] >> y[0] >> x[1] >> y[1];\n            if (x[0] == x[1]) k[i] = INF;\n            else k[j] = (double) (y[0] - y[1]) / (double) (x[0] - x[1]);\n        }\n        if (abs(k[0] - k[1]) < 0.0001)cout << 2 << endl;\n        else if (abs(k[0] - (-1.0) * k[1]) < 0.0001 || abs((-1.0) * k[0] - k[1]) < 0.0001)cout << 1 << endl;\n        else if ((k[0] == 0 && k[1] == INF) || (k[1] == 0 && k[0] == INF)) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <complex>\nusing namespace std;\n\nusing vec = complex<double>;\nusing line = pair<vec,vec>;\nconst double eps = 0.0000001;\n\ndouble inner_product(vec u,vec v){\n    return real(u*conj(v));\n}\ndouble cross_product(vec u,vec v){\n    return imag(conj(u)*v);\n}\n\ndouble norm(vec& u){\n    return abs(u);\n}\n\nvec projection(line l,vec p){//p???l???????°???±\n    vec s=l.first, t=l.second;\n    double k = inner_product(t-s,p-s)/inner_product(t-s,t-s);\n    return (1.0-k)*s+k*t;\n}\n\nvec reflection(line l,vec p){\n    return 2.0*projection(l,p)-p;\n}\n\nint ccw(vec& a, vec& b, vec& c){\n    vec ab = b-a, ac = c-a;\n    double o = cross_product(ab,ac);\n    if(o>0) return 1; //CCW\n    if(o<0) return -1; //CW\n    if(inner_product(ab,ac)<0){\n        return 2; //C-A-B\n    }else{\n        if(inner_product(ab,ab)<inner_product(ac,ac)){\n            return -2; //A-B-C\n        }else{\n            return 0; //A-C-B\n        }\n    }\n}\n\nint main(void){\n    int q;\n    cin >> q;\n    for(int k=0;k<q;k++){\n        int x,y;\n        cin>>x>>y;\n        vec p0(x,y);\n        cin>>x>>y;\n        vec p1(x,y);\n        cin>>x>>y;\n        vec p2(x,y);\n        cin>>x>>y;\n        vec p3(x,y);\n\n        vec v1=p1-p0, v2=p3-p2;\n        double i,o;\n        i=inner_product(v1,v2);\n        o=cross_product(v1,v2);\n        if(abs(o)<eps){\n            cout << 2 << endl;\n        }else if(abs(i)<eps){\n            cout << 1 << endl;\n        }else{\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n\nusing flt = double;\nconst flt eps = 1e-12, inf = 1e18, PI = acos(-1.0);\ntemplate<typename T>\ninline T sqr(T x) {return x * x;}\ninline flt cmp(flt a, flt b, flt e = eps) {\n  return fabs(a - b) >= e + fabs(a) * e ? a - b : 0;\n}\ninline int sgn(flt x, flt e = eps) {return x < -e ? -1 : (x > e);}\ninline flt fix(flt x, flt e = eps) {return cmp(x, 0, e);}\n\nstruct point {\n  flt x, y;\n  point(flt x = 0, flt y = 0): x(x), y(y) {}\n  bool operator < (const point &rhs) const {\n    return cmp(x, rhs.x) < 0 || (cmp(x, rhs.x) == 0 && cmp(y, rhs.y) < 0);\n  }\n  bool operator == (const point &rhs) const {\n    return cmp(x, rhs.x) == 0 && cmp(y, rhs.y) == 0;\n  }\n  point operator + (const point &rhs) const {\n    return point(x + rhs.x, y + rhs.y);\n  }\n  point operator - (const point &rhs) const {\n    return point(x - rhs.x, y - rhs.y);\n  }\n  point operator * (const flt k) const {\n    return point(x * k, y * k);\n  }\n  point operator / (const flt k) const {\n    return point(x / k, y / k);\n  }\n  point operator ~ () const {// counter clockwise rotate 90 degree\n    return point(-y, x);\n  }\n  flt dot(const point &rhs) const {\n    return x * rhs.x + y * rhs.y;\n  }\n  flt det(const point &rhs) const {\n    return x * rhs.y - y * rhs.x;\n  }\n  flt norm2() const {\n    return x * x + y * y;\n  }\n  flt norm() const {\n    return hypot(x, y);\n  }\n  point rot(flt a) const {// counter clockwise rotate A rad\n    return point(x * cos(a) - y * sin(a), x * sin(a) + y * cos(a));\n  }\n  point rot(flt cosa, flt sina) const {// counter clockwise rotate using cos/sin\n    return point(x * cosa - y * sina, x * sina + y * cosa);\n  }\n  point trunc(flt a = 1.0) const {\n    return (*this) * (a / this->norm());\n  }\n};\n\nint main() {\n  int q;\n  scanf(\"%d\", &q);\n  for (int i = 0; i < q; ++i) {\n    point A, B, C, D;\n    scanf(\"%lf%lf%lf%lf\", &A.x, &A.y, &B.x, &B.y);\n    scanf(\"%lf%lf%lf%lf\", &C.x, &C.y, &D.x, &D.y);\n    if (!sgn((B - A).det(D - C))) puts(\"2\");\n    else if (!sgn((B - A).dot(D - C))) puts(\"1\");\n    else puts(\"0\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<assert.h>\n#include<set>\n#include<cmath>\n#include<queue>\n#include<cstdlib>\n#include<iostream>\n#include<bitset>\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define pb push_back\n#define rep(i,j,k) for(int i=(int)(j);i<=(int)(k);i++)\n#define per(i,j,k) for(int i=(int)(j);i>=(int)(k);i--)\nusing namespace std;\ntypedef long long LL;\n//template\ntypedef double db;\nconst db eps=1e-10;\nconst db pi=acosl(-1.0);\nint sign(db x){if(x<-eps)return -1;if(x>eps)return 1;return 0;}\nint cmp(db x,db y){return sign(x-y);}\nbool inmid(db x,db l,db r){return cmp(x,l)*cmp(x,r)<=0;}\nstruct po{\n\tdb x,y;\n\tpo(db _x=0,db _y=0):x(_x),y(_y){}\n\tvoid read(){scanf(\"%lf%lf\",&x,&y);}\n};\npo operator +(const po &a,const po &b){return po(a.x+b.x,a.y+b.y);}\npo operator -(const po &a,const po &b){return po(a.x-b.x,a.y-b.y);}\npo operator *(const po &a,const db &b){return po(a.x*b,a.y*b);}\npo operator /(const po &a,const db &b){return po(a.x/b,a.y/b);}\ndb operator *(const po &a,const po &b){return a.x*b.x+a.y*b.y;}\ndb operator ^(const po &a,const po &b){return a.x*b.y-a.y*b.x;}\ndb mo2(po a){return a*a;}\ndb mo(po a){return sqrt(a*a);}\npo proj(po x,po y){//proj x to y\n\treturn y*((x*y)/mo2(y));\n}\npo refl(po x,po y){//refl x from y\n\treturn proj(x,y)*2-x;\n}\nbool onseg(po x,po l,po r){\n\treturn (sign((x-l)^(r-l))==0)&&inmid(x.x,l.x,r.x)&&inmid(x.y,l.y,r.y);\n}\n//template\nint main(){\n\tint t;scanf(\"%d\",&t);\n\twhile(t--){\n\t\tpo a,b,c,d;\n\t\ta.read();b.read();c.read();d.read();\n\t\tb=b-a;\n\t\td=d-c;\n\n\t\tif(sign(b*d)==0)puts(\"1\");\n\t\telse if(sign(b^d)==0)puts(\"2\");\n\t\telse puts(\"0\");\n\t}\n\treturn 0;\n}\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <algorithm>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    if(a*x1+b*y1+c==0){//(x1,y1)が直線上にある.\n        *x2=x1;\n        *y2=y1;\n        return;\n    }\n    \n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\n/*-π　〜　+π　まで*/\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    if(x1==x2&&y1==y2)return 0.0;\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        if( (a1==a2&&b1==b2&&c1==c2) || (a1==0 && (b1/b2)==(c1/c2)) || (b1==0 && (a1/a2)==(c1/c2)) ){//一直線上にある.\n            //cout<<1111;\n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていればPIを返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return /*2*M_PI- */ret;\n    \n}\n\n//-------------------------------------------------------------------------------------\n/*多角形に対する点の内外判定*/\n/* n頂点の多角形p_xy[n]に対して点(x,y)の内外判定を行う*/\n/* 内なら2 線上なら1 外なら0*/\nint inside_and_outside_the_determination_of_the_polygon_and_point(int n, double p_xy[10000][2], double x, double y){\n    //点が線分上にあるか\n    for(int i=0; i<n; i++){\n        double l = distance_between_the_line_segment_and_point(x, y, p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1]);\n        if(l==0.0)return 1;\n    }\n    \n    //点が中にあるか外にあるか\n    int ans = 0;\n    for(int i=0; i<n; i++){\n        if(p_xy[i][0]!=p_xy[(i+1)%n][0]){\n            ans += line_segment_cross_decision(p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1], x, y, x, y+1000000.0);\n            \n            if(distance_between_the_line_segment_and_point(p_xy[i][0], p_xy[i][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]>p_xy[(i+1)%n][0])ans--;\n            }\n            if(distance_between_the_line_segment_and_point(p_xy[(i+1)%n][0], p_xy[(i+1)%n][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]<p_xy[(i+1)%n][0])ans--;\n            }\n        }\n        \n    }\n    //cout<<\" \"<<ans<<\" \";\n    if(ans%2==0)return 0;\n    else return 2;\n}\n//-------------------------------------------------------------------------------------\n/*二点の角度*/\n/*0~2π*/\ndouble angle_line_0_359(double x1, double y1, double x2, double y2){\n    if(x1==x2&&y1==y2)return 0.0;\n    \n    \n    double angle = atan2(y2-y1, x2-x1);\n    if(angle<0)angle = 2*M_PI+angle;\n    return angle;\n}\n\n//-------------------------------------------------------------------------------------\n/*二辺の角度*/\n/*反時計回りの内側*/\n/*0~2π*/\ndouble angle_two_line_0_359(double x1, double y1, double x2, double y2, double x3, double y3){\n    if(x1==x2&&y1==y2)return 0.0;\n    if(x3==x2&&y3==y2)return 0.0;\n    \n    double angle = atan2(y2-y1, x2-x1);\n    if(angle<0)angle = 2*M_PI+angle;\n    if(angle==2*M_PI)angle=0.0;\n    \n    double angle2 = atan2(y3-y2, x3-x2);\n    if(angle2<0)angle2 = 2*M_PI+angle2;\n    if(angle2==2*M_PI)angle2=0.0;\n    \n    double ret = 2*M_PI-( angle+(M_PI-angle2) );\n    if(ret<0)ret+=2*M_PI;\n    if(ret>=2*M_PI)ret-=2*M_PI;\n    \n    \n    \n    return ret;\n}\n\n//-------------------------------------------------------------------------------------\n/*二次元配列のクイックソート*/\n/*xoryが0ならx座標　1なら座標でソート*/\nvoid two_dimensional_qsort(double xy[100000][2], int left, int right, int xory)\n{\n    int i, j;\n    double pivot,pivot2;\n    \n    i = left;                      /* ソートする配列の一番小さい要素の添字 */\n    j = right;                     /* ソートする配列の一番大きい要素の添字 */\n    \n    pivot = xy[(left + right) / 2][xory]; /* 基準値を配列の中央付近にとる */\n    pivot2 = xy[(left + right) / 2][(xory+1)%2];\n    \n    \n    while (1) {                    /* 無限ループ */\n        \n        while (xy[i][xory] < pivot || (xy[i][xory] == pivot && xy[i][(xory+1)%2] < pivot2))       /* pivot より大きい値が */\n            i++;                   /* 出るまで i を増加させる */\n        \n        while (pivot < xy[j][xory] || (xy[j][xory] == pivot &&  pivot2 < xy[j][(xory+1)%2]))       /* pivot より小さい値が */\n            j--;                   /*  出るまで j を減少させる */\n        if (i >= j)                /* i >= j なら */\n            break;                 /* 無限ループから抜ける */\n        \n        swap(xy[i][xory], xy[j][xory]);            /* x[i] と x[j]を交換 */\n        swap(xy[i][(xory+1)%2], xy[j][(xory+1)%2]);            /* x[i] と x[j]を交換 */\n        i++;                       /* 次のデータ */\n        j--;\n    }\n    \n    if (left < i - 1)              /* 基準値の左に 2 以上要素があれば */\n        two_dimensional_qsort(xy, left, i - 1, xory);     /* 左の配列を Q ソートする */\n    if (j + 1 <  right)            /* 基準値の右に 2 以上要素があれば */\n        two_dimensional_qsort(xy, j + 1, right, xory);    /* 右の配列を Q ソートする */\n}\n\n\n//-------------------------------------------------------------------------------------\n/*凸包*/\n/*２次元平面における点の集合Pに対する凸包（convex hull）を求めて下さい。凸包とは点集合Pの全ての点を含む最小の凸多角形です。*/\n/*集合の要素数 n*/\n/*集合 p_xy[1000000][2]*/\n/*解答の要素数 q*/\n/*解答 ans[1000000][2]　最も下の最も左から反時計回り*/\n\nvoid convex_hull(int n, double p_xy[100000][2], int *q, double ans[100000][2]){\n\n    two_dimensional_qsort(p_xy, 0, n-1, 1);\n    /*\n    for(int i=0; i<n; i++){\n        cout<<p_xy[i][0]<<\" \"<<p_xy[i][1]<<endl;\n    }\n     */\n    \n    \n    int k=0;\n    for(int i=0; i<n; i++){\n        while(k > 1 && (angle_two_line_0_359(ans[k-2][0], ans[k-2][1], ans[k-1][0], ans[k-1][1], p_xy[i][0], p_xy[i][1])>M_PI))k--;\n        ans[k][0]=p_xy[i][0];\n        ans[k][1]=p_xy[i][1];\n        k++;\n    }\n    \n    \n    int t=k;\n    for(int i=n-2; i>=0; i--){\n        while(k > t && (angle_two_line_0_359(ans[k-2][0], ans[k-2][1], ans[k-1][0], ans[k-1][1], p_xy[i][0], p_xy[i][1])>M_PI))k--;\n        ans[k][0]=p_xy[i][0];\n        ans[k][1]=p_xy[i][1];\n        k++;\n    }\n    *q=k-1;\n}\n//-------------------------------------------------------------------------------------\n/*点の集合(凸多角形)の最遠点距離*/\ndouble diameter_of_the_polygon(int n, double p_xy[100000][2]){\n    double ch[100000][2];\n    int q;\n    convex_hull(n, p_xy, &q, ch);\n    \n    \n    int i=0;\n    int j=0;\n    for(int k=0; k<q; k++){\n        if(ch[j][1]<ch[k][1]){\n            j=k;\n        }\n    }\n    \n    int si=i;\n    int sj=j;\n    double res =  distance_between_the_two_pointss(ch[si][0], ch[si][1], ch[sj][0], ch[sj][1]);\n    while(1){\n        if(i==sj||j==si)break;\n        \n        double cross = (ch[(si+1)%n][0]-ch[si][0])*(ch[(sj+1)%n][1]-ch[sj][1]) - (ch[(si+1)%n][1]-ch[si][1])*(ch[(sj+1)%n][0]-ch[sj][0]);\n        //cout<<cross<<endl;\n        \n        if(cross<0){\n            si=(si+1)%n;\n            //res = max(res,a);\n        }else{\n            sj=(sj+1)%n;\n            //res = max(res,b);\n        }\n        \n        res =  max(res,distance_between_the_two_pointss(ch[si][0], ch[si][1], ch[sj][0], ch[sj][1]));\n                                                    \n        \n    }\n    \n    return res;\n}\n//-------------------------------------------------------------------------------------\n/*点の集合の最近点距離*/\n/*使用前に sort(a, a+n); をおこなう*/\n/*使用注意 他と仕様が違う*/\n/*点にpairを使っている*/\n\n\nbool compare_y(pair<double, double> a,pair<double, double> b){\n    return a.second<b.second;\n}\n\ndouble length_of_the_nearest_point_to(pair<double, double> a[100000], int n){\n    if(n<=1)return 999999999.9;\n    int m=n/2;\n    double x=a[m].first;\n    double d=min(length_of_the_nearest_point_to(a, m), length_of_the_nearest_point_to(a+m, n-m));\n    //inplace_merge(a, a+m, a+n, compare_y);\n    sort(a, a+n, compare_y);\n    vector<pair<double, double> >b;\n    for(int i=0; i<n; i++){\n        if(fabs(a[i].first-x)>=d)continue;\n        for(int j=0; j<b.size(); j++){\n            double dx=a[i].first-b[b.size()-j-1].first;\n            double dy=a[i].second-b[b.size()-j-1].second;\n            if(dy>=d)break;\n            d=min(d,sqrt(dx*dx+dy*dy));\n            \n        }\n        b.push_back(a[i]);\n    }\n    return d;\n}\n                                      \n//-------------------------------------------------------------------------------------\n/* 2点(x1,y1) (x2,y2)を通る直線に点(px,py)から引いた垂線の直線との交点(x, y)を返す */\nvoid intersection_of_the_normal_to_the_straight_line_passing_through_the_two_points(double px,double py,double x1, double y1,double x2, double y2,double *x, double *y){\n    double a,b,c;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    *x = px-(a*px+b*py+c)/(a*a+b*b)*a;\n    *y = py-(a*px+b*py+c)/(a*a+b*b)*b;\n}\n                                      \nint main(){\n    double x0,y0,x1,y1,x2,y2,x3,y3;\n    double a,b,c,d,e,f;\n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n        straight_line_passing_through_the_two_points(x0, y0, x1, y1, &a, &b, &c);\n        straight_line_passing_through_the_two_points(x2, y2, x3, y3, &d, &e, &f);\n        cout<<judges_whether_parallel_or_perpendicular(a, b, c, d, e, f)<<endl;\n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nint decide(Point p0, Point p1, Point p2, Point p3){\n    Vector v0 = p1 - p0;\n    Vector v1 = p3 - p2;\n\n    if(fabs(dot(v0, v1)) <EPS){\n        return 1;\n    }else if(cross(v0, v1) <EPS){\n        return 2;\n    }else{\n        return 0;\n    }\n}\n\nint main(){\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n        scanf(\"%d\", &xp1);\n        scanf(\"%d\", &yp1);\n        scanf(\"%d\", &xp2);\n        scanf(\"%d\", &yp2);\n        scanf(\"%d\", &xp3);\n        scanf(\"%d\", &yp3);\n        \n        Point p0 = Point(xp0, yp0);\n        Point p1 = Point(xp1, yp1);\n        Point p2 = Point(xp2, yp2);\n        Point p3 = Point(xp3, yp3);\n\n        printf(\"%d\\n\", decide(p0, p1, p2, p3));\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing ld = long double;\nconst ld eps = 1e-8, pi = acos(-1.0);\n\nbool eq(ld a, ld b) {\n\treturn abs(a - b) < eps;\n}\n\nusing Point = complex<ld>;\n\nclass Line {\npublic:\n\tPoint a, b;\n};\n\nld dot(Point a, Point b) {\n\treturn real(conj(a) * b);\n}\n\nld cross(Point a, Point b) {\n\treturn imag(conj(a) * b);\n}\n\nint ccw(Point a, Point b, Point c) {\n\tb -= a, c -= a;\n\tif (cross(b, c) > eps) return 1;\n\tif (cross(b, c) < -eps) return -1;\n\tif (dot(b, c) < 0) return 2;\n\tif (norm(b) < norm(c)) return -2;\n\treturn 0;\n}\n\nbool isis_ll(Line l, Line m) {\n\treturn abs(cross(l.b - l.a, m.b - m.a)) > eps;\n}\n\nint main()\n{\n\tint q;\n\tld x1, x2, x3, x4, y1, y2, y3, y4;\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tLine l1 = { (Point) { x1, y1 }, (Point) { x2, y2 } };\n\t\tLine l2 = { (Point) { x3, y3 }, (Point) { x4, y4 } };\n\t\tcout << (!isis_ll(l1, l2) ? 2 : eq(abs(cross(l1.b - l1.a, l2.b - l2.a)), abs(l1.b - l1.a) * abs(l2.b - l2.a)) ? 1 : 0) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pu push\n#define pb push_back\n#define mp make_pair\n#define eps 1e-9\n#define Vector Point\n#define INF 2000000000\n#define sq(x) ((x)*(x))\n#define sz(x) ((int)(x).size())\n#define fi first\n#define sec second\n#define SORT(x) sort((x).begin(),(x).end())\n#define all(x) (x).begin(),(x).end()\n#define EQ(a,b) (abs((a)-(b))<eps)\n\n// ***** 幾何ライブラリ　線分と直線に注意!! 誤差に注意すること!! *****\n\ninline double add(double a,double b){\n\tif(abs(a+b)<eps*(abs(a)+abs(b)))return 0;\n\treturn a+b;\n}\n\nstruct Point{\n\tdouble x,y;\n\tPoint() {}\n\tPoint(double x,double y) : x(x),y(y){}\n\tPoint operator + (Point p){return Point(add(x,p.x),add(y,p.y));}\n\tPoint operator - (Point p){return Point(add(x,-p.x),add(y,-p.y));}\n\tPoint operator * (double d){return Point(x*d,y*d);}\n\tdouble dot(Point p){return add(x*p.x,y*p.y);}\n\tdouble det(Point p){return add(x*p.y,-y*p.x);}\n\tdouble norm(){return sqrt(x*x+y*y);}\n\tdouble norm2(){return x*x+y*y;}\n\tdouble dist2(Point p){return sq(x-p.x)+sq(y-p.y);}\n\tPoint vert(){return Point(y,-x);}\n\tvoid dump(const char* msg=\"\"){printf(\"%s(%.12f,%.12f)\\n\",msg,x,y);return;}\n\t\n\t// following functions for vector operation\n\n\t// signed area of triange (0,0) (x,y) (p.x,p.y)\n\tdouble area(Point p){\n\t\treturn (x*p.y-p.x*y)/2.0;\n\t}\n};\n// direction a -> b -> c\n// verified AOJ CGL_1_C\nint ccw(Point a,Point b,Point c){\n\tVector p = b-a;\n\tVector q = c-a;\n\tif(p.det(q)>0.0)return 1; // counter clockwise\n\tif(p.det(q)<0.0)return -1; // clockwise\n\tif(p.dot(q)<0.0)return 2; // c--a--b online_back\n\tif(p.norm()<q.norm())return 3; // a--b--c online_front \n\treturn 4;// a--c--b on_segment\n}\nstruct Line{\n\tPoint a,b;\n\tLine(){}\n\tLine(Point a,Point b):a(a),b(b){}\n\tbool on(Point q){\n\t\treturn (a-q).det(b-q)==0; \n\t}\n\tbool is_parallel(Line l){\n\t\treturn (a-b).det(l.a-l.b)==0;\n\t}\n\tbool is_orthogonal(Line l){\n\t\treturn (a-b).dot(l.a-l.b)==0;\n\t}\n\tPoint intersection(Line l){\n\t\tassert(!is_parallel(l));\n\t\treturn a+(b-a)*((l.b-l.a).det(l.a-a)/(l.b-l.a).det(b-a));\n\t}\n\t// projection of p to this line\n\t// verified AOJ CGL_1_A\n\tPoint projection(Point p){\n\t\treturn (b-a)*((b-a).dot(p-a)/(b-a).norm2())+a;\n\t}\n\t// reflection point of p onto this line\n\t// verified AOJ CGL_1_B\n\tPoint refl(Point p){\n\t\tPoint proj = projection(p);\n\t\treturn p+((proj-p)*2.0);\n\t}\n};\nstruct Segment{\n\tPoint a,b;\n\tSegment(){}\n\tSegment(Point a,Point b):a(a),b(b){}\n\tLine line(){\n\t\treturn Line(a,b);\n\t}\n\tbool on(Point q){\n\t\treturn ((a-q).det(b-q)==0&&(a-q).dot(b-q)<=0); \n\t}\n\tbool is_intersect(Segment s){\n\t\tif(a.x>b.x)swap(a,b);\n\t\tif(s.a.x>s.b.x)swap(s.a,s.b);\n\t\tPoint k = line().intersection(s.line());\n\t\tif((a.x<=k.x)&&(k.x<=b.x)&&(s.a.x<=k.x)&&(k.x<=s.b.x))return true;\n\t\telse return false;\n\t}\n\tbool is_intersect(Line l){\n\t\tif(a.x>b.x)swap(a,b);\n\t\tif(l.a.x>l.b.x)swap(l.a,l.b);\n\t\tPoint k = line().intersection(l);\n\t\tif((a.x<=k.x)&&(k.x<=b.x))return true;\n\t\telse return false;\n\t}\n};\n\ntypedef vector<Point> Polygon;\n\n// for input\nPoint input_point(){\n\tPoint p;\n\tcin >> p.x >> p.y;\n\treturn p;\n}\nSegment input_segment(){\n\tPoint a,b;\n\ta = input_point();\n\tb = input_point();\n\treturn Segment(a,b);\n}\nLine input_line(){\n\tPoint a,b;\n\ta = input_point();\n\tb = input_point();\n\treturn Line(a,b);\n}\n\nint main(){\n\tint q;\n\tcin >> q;\n\tfor(int i=0;i<q;i++){\n\t\tLine a = input_line();\n\t\tLine b = input_line();\n\t\tif(a.is_parallel(b))cout << 2 << endl;\n\t\telse if(a.is_orthogonal(b))cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) REP(i,0,n)\n\ntypedef complex<double> P;\n\n#define EPS (1e-7)\n\nbool operator < (P const& a, P const& b) {\n  return (a.real() != a.real()) ? a.real() < b.real() : a.imag() < b.imag();\n}\n\ndouble dot(P const& a, P const& b) {\n  return real(conj(a)*b);\n}\n\ndouble cross(P const& a, P const& b) {\n  return imag(conj(a)*b);\n}\n\nP projection_point(P const& a, P const& b, P const& c) {\n  double k = dot(b-a, c-a) / norm(b-a);\n  return a+k*(b-a);\n}\n\nP reflection_point(P const& a, P const& b, P const& c) {\n  return c + 2.*(projection_point(a, b, c) - c);\n}\n\nbool is_parallel(P a1, P a2, P b1, P b2) {\n  a2 -= a1, b2 -= b1;\n  return (abs(a2.real()-b2.real()) < EPS && abs(a2.imag()-b2.imag()) < EPS) || (abs(a2.real()+b2.real()) < EPS && abs(a2.imag()+b2.imag()) < EPS);\n}\n\nbool is_orthogonal(P a1, P a2, P b1, P b2) {\n  a2 -= a1; b2 -= b1;\n  a2 *= P(0, 1);\n  return a2 == b2 || -a2 == b2;\n}\n\nint ccw(P a, P b, P c) {\n  b -= a, c -= a;\n  if(cross(b, c) > 0) return +1; // counter clockwise\n  if(cross(b, c) < 0) return -1;  // clockwise\n  if(dot(b, c) < 0) return +2;    // c-a-b\n  if(norm(b) < norm(c)) return -2;  // a-b-c\n  return 0; // on segment\n}\n\nint main () {\n  \n  int q; cin >> q;\n  for(;q--;) {\n    P a1, a2, b1, b2;\n    cin >> a1.real() >> a1.imag() >> a2.real() >> a2.imag();\n    cin >> b1.real() >> b1.imag() >> b2.real() >> b2.imag();\n    if(is_parallel(a1, a2, b1, b2)) {\n      cout << 2 << endl;\n    }\n    else if(is_orthogonal(a1, a2, b1, b2)) {\n      cout << 1 << endl;\n    }\n    else {\n      cout << 0 << endl;\n    }\n\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for (int (i)=(0);(i)<(int)(n);++(i))\nusing ll = long long;\n//using P = pair<int, int>;\nusing namespace std;\n\nconst double eps = 1e-10;\n#define equals(a, b) (fabs((a)-(b)) < eps)\n\n// 点\nstruct Point\n{\n    double x, y;\n    Point(double x=0, double y=0): x(x), y(y) {}\n    double norm()\n    {\n        return x*x+y*y;\n    }\n    double abs()\n    {\n        return sqrt(norm());\n    }\n\n    Point operator+(const Point& p)const\n    {\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator-(const Point& p)const\n    {\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator*(const double k)const\n    {\n        return Point(x * k, y * k);\n    }\n    Point operator/(const double k)const\n    {\n        return Point(x / k, y / k);\n    }\n    bool operator<(const Point& p)const\n    {\n        if (x != p.x)\n        {\n            return x < p.x;\n        }\n        return y < p.y;\n    }\n    bool operator==(const Point& p)const\n    {\n        return fabs(x - p.x) < eps and fabs(y - p.y) < eps;\n    }\n};\n\nusing Vector = Point;\n\n// 内積\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n\n// 外積\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n// 線分\nstruct Segment\n{\n    Segment(Point a=Point(), Point b=Point()):p1(a), p2(b) {}\n    Point p1, p2;\n};\nusing Line = Segment;\n\n// 円\nclass Circle\n{\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\n// 多角形\nusing Polygon = vector<Point>;\n\n\n// ベクトルaとbの直行判定\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// ベクトルaとbの平行判定\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// 射影\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\n// 反射\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\n// ２点間の距離\ndouble getDistance(Point a, Point b) {\n    return (a-b).abs();\n}\n\n// 直線Lと、点Pの距離\n// verify\ndouble getDistanceLP(Line l, Point p)\n{\n    return abs(cross(l.p2 - l.p1, p - l.p1) / Point(l.p2 - l.p1).abs());\n}\n\n// 線分sと点pの距離\ndouble getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2 - s.p1, p-s.p1) < 0.0) return (p - s.p1).abs();\n    if (dot(s.p1 - s.p2, p-s.p2) < 0.0) return (p - s.p2).abs();\n    return getDistanceLP((Line)s, p);\n}\n\n\n// 反時計回り\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > eps) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -eps) return CLOCKWISE;\n    if (dot(a, b) < -eps) return ONLINE_BACK;\n    if (a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// 線分の交差判定\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 線分s1と線分s2の距離\ndouble getDistance(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 線分の交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n\n// 円cと線分lの交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n    //assert(intersect(c, l)); ?\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n    double base = sqrt(c.r * c.r - (pr - c.c).norm());\n    return make_pair(pr + e * base, pr - e * base);\n}\n\n// 円と円の交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n    // assert(intersect(c1, c2));\n    double d = (c1.c - c2.c).abs();\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2  * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t-a));\n}\n\n// 点の内包\n// IN 2, ON 1, OUT 0\n\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; ++i) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if (abs(cross(a, b)) < eps and dot(a, b) < eps) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (a.y < eps and eps < b.y and cross(a, b) > eps) x = !x;\n    }\n    return (x ? 2 : 0);\n}\n\n// 凸包\nPolygon andrewScan(Polygon s) {\n    Polygon u, l;\n    if (s.size() < 3) return s;\n    sort(s.begin(), s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n    l.push_back(s[s.size()-1]);\n    l.push_back(s[s.size()-2]);\n\n    for (int i = 2; i < s.size(); ++i) {\n        for (int n = u.size(); n >= 2 and ccw(u[n-2], u[n-1], s[i]) != CLOCKWISE; --n) {\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n\n    for (int i = s.size()-3; i>=0; --i) {\n        for (int n = l.size(); n>=2 and ccw(l[n-2], l[n-1], s[i]) != CLOCKWISE; --n) {\n            l.pop_back();\n        }\n        l.push_back(s[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n    return l;\n}\n\n// 平面走査\n#define BOTTOM 0\n#define LEFT 1\n#define RIGHT 2\n#define TOP 3\n\nclass EndPoint {\npublic:\n    Point p;\n    int seg, st;\n    EndPoint() {}\n    EndPoint(Point p, int seg, int st) : p(p), seg(seg), st(st) {}\n\n    bool operator<(const EndPoint &ep) const {\n        if (p.y == ep.p.y) {\n            return st < ep.st;\n        }else return p.y < ep.p.y;\n    }\n};\n\nEndPoint EP[2 * 100000];\n\nint manhattanIntersection(vector<Segment> S) {\n    int n = S.size();\n\n    for (int i = 0, k = 0; i < n; ++i) {\n        if (S[i].p1.y == S[i].p2.y) {\n            if (S[i].p1.x > S[i].p2.x) swap(S[i].p1, S[i].p2);\n        } else if (S[i].p1.y > S[i].p2.y) swap(S[i].p1, S[i].p2);\n\n        if (S[i].p1.y == S[i].p2.y) {\n            EP[k++] = EndPoint(S[i].p1, i, LEFT);\n            EP[k++] = EndPoint(S[i].p2, i, RIGHT);\n        }\n        else {\n            EP[k++] = EndPoint(S[i].p1, i, BOTTOM);\n            EP[k++] = EndPoint(S[i].p2, i, TOP);\n        }\n    }\n\n    sort(EP, EP + (2 * n));\n\n    set<int> BT;\n    BT.insert(100000001); // 番兵\n    int cnt = 0;\n\n    for (int i = 0; i < 2 * n; ++i) {\n        if (EP[i].st == TOP) {\n            BT.erase(EP[i].p.x);\n        }\n        else if (EP[i].st == BOTTOM) {\n            BT.insert(EP[i].p.x);\n        }\n        else if (EP[i].st == LEFT) {\n            auto b = lower_bound(BT.begin(), BT.end(), S[EP[i].seg].p1.x);\n            auto e = upper_bound(BT.begin(), BT.end(), S[EP[i].seg].p2.x);\n            cnt += distance(b, e);\n        }\n    }\n\n    return cnt;\n\n}\n\nint main() {\n    int q;\n    cin >> q;\n    rep(i, q) {\n        int x1, y1, x2, y2, x3, y3, x4, y4;\n        cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\n        Point a(x1, y1), b(x2, y2), c(x3, y3), d(x4, y4);\n        Segment s1(a, b), s2(c, d);\n\n        cout << (isParallel(a, b, c, d) ? 2 : (isOrthogonal(a, b, c, d) ? 1 : 0)) << endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <math.h>\n#include <iostream>\nusing namespace std;\n\nstatic const double EPS = 1e-10;\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\n\tPoint(double x=0,double y=0):x(x),y(y){}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x * x + y * y; }\n\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator == (const Point &p) const\n\t{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n\tbool operator < (const Point &p) const\n\t{\n\t\treturn (x != p.x) ? x < p.x : y < p.y;\n\t}\n};\n\n#define Vector Point\n\ndouble dot(Vector a, Vector b)\n{\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool equals(double a, double b)\n{\n\treturn fabs(a - b) < EPS;\n}\n\nbool isOrthogonal(Vector a, Vector b)\n{\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\nbool isParallel(Vector a, Vector b)\n{\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\nint main()\n{\n\tPoint a1;\n\tPoint a2;\n\tPoint b1;\n\tPoint b2;\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tint x, y;\n\n\t\tcin >> x >> y;\n\t\ta1.x = x;\n\t\ta1.y = y;\n\n\t\tcin >> x >> y;\n\t\ta2.x = x;\n\t\ta2.y = y;\n\n\t\tcin >> x >> y;\n\t\tb1.x = x;\n\t\tb1.y = y;\n\n\t\tcin >> x >> y;\n\t\tb2.x = x;\n\t\tb2.y = y;\n\n\t\tif (isParallel(a1, a2, b1, b2))\n\t\t{\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse if (isOrthogonal(a1, a2, b1, b2))\n\t\t{\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b))<EPS)\n\nclass Point{\n    public:\n    double x, y;\n\n    Point(double x=0, double y=0):x(x), y(y){}\n\n    Point operator + (Point p) {return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) {return Point(x-p.x, y-p.y); }\n    Point operator * (double a) {return Point(a*x, a*y); }\n    Point operator / (double a) {return Point(a*x, a*y); }\n\n    double abs() {return sqrt(norm());}\n    double norm() {return x*x+y*y; }\n\n    bool operator < (const Point &p) const{\n        return x != p.x ? x<p.x: y<p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x+a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x*b.y -a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b), 0.);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a,b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1-a2, b1-b2);\n}\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n    int q;\n    Point p0, p1, p2, p3;\n    cin >> q;\n    for(int i=0; i<q; i++){\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        if(isParallel(p0, p1, p2, p3)){\n            printf(\"2\\n\");\n        }\n        else if(isOrthogonal(p0, p1, p2, p3)){\n            printf(\"1\\n\");\n        }\n        else printf(\"0\\n\");\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\n#include <math.h>\n\nusing namespace std;\n\nint main(){\n\tint q;\n\tdouble x1,x2,x3,x4,y1,y2,y3,y4,slope1,slope2,naiseki;\n\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n\t\tif(x1 == x2 && x3 == x4){\n\t\t\tprintf(\"2\\n\");\n\t\t}else if(x1 == x2 && x3 != x4){\n\t\t\tif(y3 == y4)printf(\"1\\n\");\n\t\t\telse{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}else if(x1 != x2 && x3 == x4){\n\t\t\tif(y1 == y2)printf(\"1\\n\");\n\t\t\telse{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}else{\n\t\t\tslope1 = (y2-y1)/(x2-x1);\n\t\t\tslope2 = (y4-y3)/(x4-x3);\n\t\t\tnaiseki = (x2-x1)*(x4-x3)+(y2-y1)*(y4-y3);\n\t\t\tif(fabs(slope1-slope2) < 0.00000001){\n\t\t\t\tprintf(\"2\\n\");\n\t\t\t}else if(fabs(naiseki) < 0.00000001){\n\t\t\t\tprintf(\"1\\n\");\n\t\t\t}else{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <queue>\n#include <set>\n#include <cstdio>\n#include <climits>\n#include <cmath>\n#include <array>\n#include <functional>\n#include <sstream>\n#include <list>\n#include <iomanip>\n#include <set>\nconst int MOD=1000000007;\nconst int INF=1000000000;\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\nconst double eps=1e-10;\nconst int inf=1e9;\ntypedef pair<int,int> P;\n\nclass Point\n{\npublic:\n  double x,y;\n  Point(double x=0,double y=0): x(x),y(y){}\n  Point operator + (Point &p)\n  {\n    return Point(x+p.x,y+p.y);\n  }\n  Point operator - (Point &p)\n  {\n    return Point(x-p.x,y-p.y);\n  }\n  Point operator * (double k)\n  {\n    return Point(x*k,y*k);\n  }\n\n  double norm(){ return x*x+y*y;}\n  double abs(){ return sqrt(norm());}\n  bool operator < (const Point &p) const\n  {\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n  bool operator == (const Point &p) const\n  {\n    return fabs(x-p.x)<eps && fabs(y-p.y) < eps;\n  }\n};\ntypedef Point Vector;\ndouble dot(Vector a,Vector b)\n{\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b)\n{\n  return a.x*b.y - a.y*b.x;\n}\nstruct Segment\n{\npublic:\n  Point p1,p2;\n  Segment(){};\n  Segment(Point p1,Point p2):p1(p1),p2(p2){};\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):  c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\n\nbool isorthogonal(Vector a,Vector b)\n{\n  return fabs(dot(a,b)-0.0)<eps;\n}\n\nbool isparallel(Vector a,Vector b)\n{\n  return fabs(cross(a,b)-0.0)<eps;\n}\nint main(int argc,char const* argv[])\n{\n  int n;\n  cin >> n;\n  for(int i=0;i<3;i++)\n    {\n      double p0x,p0y,p1x,p1y,p2x,p2y,p3x,p3y;\n      cin >> p0x >> p0y >> p1x >> p1y >> p2x >> p2y >> p3x >> p3y;\n      Vector a=Point(p1x-p0x,p1y-p0y);\n      Vector b=Point(p3x-p2x,p3y-p2y);\n      if(isorthogonal(a,b)) cout << '1' << endl;\n      else if(isparallel(a,b)) cout << '2' << endl;\n      else cout << '0' << endl;\n    }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(int x, int y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(Point &p) { return Point(x + p.x, y + p.y); };\n\tPoint operator -(Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n};\nusing Vector = Point;\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\nusing Line = Segment;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nusing Polygon = vector<Point>;\nint main() {\n\tint q, x[4], y[4];\n\tPoint P[4];\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tcin >> x[j] >> y[j];\n\t\t\tP[j] = Point(x[j], y[j]);\n\t\t}\n\t\tVector a = P[0] - P[1];\n\t\tVector b = P[2] - P[3];\n\t\tif (equals(dot(a, b), 0.0)) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse if (equals(cross(a, b), 0.0)) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<math.h>\n#include<float.h>\nusing namespace std;\n#define equals(a,b) fabs((a)-(b))<DBL_EPSILON*fmax(1,fmax(fabs(a),fabs(b)))\nclass Point{\n    public:\n        double x,y;\n        Point(double x=0,double y=0):x(x),y(y){}\n\n        Point operator + (Point p){return Point(x+p.x,y+p.y);}\n        Point operator - (Point p){return Point(x-p.x,y-p.y);}\n        Point operator * (double a){return Point(a*x,a*y);}\n        Point operator / (double a){return Point(x/a,y/a);}\n            \n        double norm(){return x*x+y*y;}\n        double abs(){return sqrt(norm());}    \n        \n        bool operator < (const Point &p)const{\n            return x!=p.x?x<p.x:y<p.y;\n        }\n        bool operator == (const Point &p)const{\n            return equals(x,p.x)&&equals(y,p.y);\n        }\n};\ntypedef Point Vector;\nstruct Segment{\n    Point p1,p2;\n};\ntypedef Segment Line;\n\ndouble dot(Vector a,Vector b){//内積\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){//外積\n    return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){//直角条件\n    return equals(dot(a1-a2,b1-b2),0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){//平行条件\n    return equals(cross(a1-a2,b1-b2),0.0);\n}\n\nint main(){\n    int q;\n\n    cin>>q;\n    Point p[4];\n    for(int i=0;i<q;i++){\n        cin>>p[0].x>>p[0].y>>p[1].x>>p[1].y;\n        cin>>p[2].x>>p[2].y>>p[3].x>>p[3].y;\n        if(isOrthogonal(p[0],p[1],p[2],p[3]))cout<<1<<\"\\n\";\n        else if(isParallel(p[0],p[1],p[2],p[3]))cout<<2<<\"\\n\";\n        else cout<<0<<\"\\n\";\n    }\n    return 0;\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//Intersection Determination\n#include<bits/stdc++.h>\nusing namespace std;\nconst double EPS = 1e-9;    // 許容誤差。問題によって変える\ntypedef complex<double> P;  // Point\n#define X real()\n#define Y imag()\ndouble norm(P &p1, P &p2){\n    return (p1.X - p2.X) * (p1.X - p2.X) + (p1.Y - p2.Y) * (p1.Y - p2.Y);\n}\nnamespace std{\n    bool operator<(const P p1, const P p2){\n        return p1.X != p2.X ? p1.X < p2.X : p1.Y < p2.Y;\n    }\n    P operator+(const P p1, const P p2) { return P(p1.X + p2.X, p1.Y + p2.Y); }\n    P operator-(const P p1, const P p2) { return P(p1.X - p2.X, p1.Y - p2.Y); }\n    P operator*(const P p, double k) { return P(p.X * k, p.Y * k); }\n    P operator/(const P p, double k) { return P(p.X / k, p.Y / k); }\n} \n\n//Segment/Line\nstruct Segment{\n    P p1, p2;\n    Segment() {}\n    Segment(P p1, P p2) : p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\n//外積cross(a,b) = |a||b|sinθ=a1b2+a2b1\ndouble cross(const P &a, const P &b){\n    return (conj(a) * b).Y;\n}\n//内積dot(a,b) = |a||b|cosθ=a1b1+a2b2\ndouble dot(const P &a, const P &b){\n    return (conj(a) * b).X;\n}\n\n//位置関係判定(線分abを軸にcがどちら側にあるか)\nint ccw(P a, P b, P c){\n    b -= a;\n    c -= a; //aからの向きを考える\n    if (cross(b, c) > EPS)\n        return +1; //clockwise\n    else if (cross(b, c) < -EPS)\n        return -1; //counter clockwise\n    else if (dot(b, c) < -EPS)\n        return +2; //c-a-b\n    else if (norm(b) < norm(c))\n        return -2; //a-b-c\n    else\n        return 0; //他\n}\n\n//Intersection Determination\nbool intersectLL(const Line &l, const Line &m){\n    return abs(cross(l.p2 - l.p1, m.p2 - m.p1)) > EPS; // && // non-parallel\n                                                       //    abs(cross(l.p2 - l.p1, m.p1 - l.p1))  < EPS;   // same line\n}\nbool intersectLS(const Line &l, const Line &s){\n    return cross(l.p2 - l.p1, s.p1 - l.p1) * // s.p1 is left of l\n               cross(l.p2 - l.p1, s.p2 - l.p1) <EPS; // s.p2 is right of l\n}\nbool intersectLP(const Line &l, const P &p){\n    return abs(cross(l.p2 - p, l.p1 - p)) < EPS;\n}\nbool intersectSS(const Line &s, const Line &t){\n    return ccw(s.p1, s.p2, t.p1) * ccw(s.p1, s.p2, t.p2) <= 0 &&\n           ccw(t.p1, t.p2, s.p1) * ccw(t.p1, t.p2, s.p2) <= 0;\n}\nbool intersectSP(const Line &s, const P &p){\n    return abs(s.p1 - p) + abs(s.p2 - p) - abs(s.p2 - s.p1) < EPS; // triangle inequality\n}\n\n//Verify\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=jp\nint main(){\n    int q;\n    cin>>q;\n    for (int i = 0; i < q;i++){\n        double x0,x1,x2,x3,y0,y1,y2,y3;\n        cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n        P p0 = P(x0, y0), p1 = P(x1, y1), p2 = P(x2, y2), p3 = P(x3, y3);\n        const Line l1 = Line(p0, p1), l2 = Line(p2, p3);\n        if (!intersectLL(l1, l2) )\n            cout << \"2\" << endl;\n        else if(dot(l1.p2-l1.p1,l2.p2-l2.p1)==0)\n            cout << \"1\" << endl;\n        else\n            cout << \"0\" << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS )\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :\n\t\t\tx(x), y(y) {\n\t}\n\n\tPoint operator +(Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(double a) {\n\t\treturn Point(x * a, y * a);\n\t}\n\tPoint operator /(double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tbool operator <(const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p1 - s1.p2, s2.p1 - s2.p2), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p1 - s1.p2, s2.p1 - s2.p2), 0.0);\n}\n\nint main() {\n\n\tint q;\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; ++i) {\n\t\tint p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y;\n\t\tscanf(\"%d %d %d %d %d %d %d %d\", &p0x, &p0y, &p1x, &p1y, &p2x, &p2y, &p3x, &p3y);\n\t\tPoint p1(p0x, p0y);\n\t\tPoint p2(p1x, p1y);\n\t\tPoint p3(p2x, p2y);\n\t\tPoint p4(p3x, p3y);\n\n\t\tSegment s1;\n\t\ts1.p1 = p1;\n\t\ts1.p2 = p2;\n\n\t\tSegment s2;\n\t\ts2.p1 = p3;\n\t\ts2.p2 = p4;\n\n\t\tif (isOrthogonal(s1, s2)) {\n\t\t\tcout << 1 << endl;\n\t\t} else if (isParallel(s1, s2)) {\n\t\t\tcout << 2 << endl;\n\t\t} else {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <map>\n#include <cmath>\n#include <iomanip>\n#include <complex>\nusing namespace std;\n#define REP(i,n) for (int i=0;i<(n);++i)\n#define rep(i,a,b) for(int i=a;i<(b);++i)\ntemplate<class T> inline bool chmin(T &a, T b){ if(a > b) { a = b; return true;} return false;}\ntemplate<class T> inline bool chmax(T &a, T b){ if(a < b) { a = b; return true;} return false;}\nusing ll = long long;\nconstexpr long long INF = 1LL << 62;\nconstexpr int MOD = 1e9 + 7;\nconstexpr double EPS = 1e-10;\n\nusing Point = complex<double>;\nstruct Line {\n    Point s, t;\n    Line(Point s, Point t) : s(s), t(t){}\n};\ndouble dot(Point p, Point q) { return (conj(p) * q).real(); }\ndouble cross(Point p, Point q) { return (conj(p) * q).imag(); }\ndouble slope(Line l) { return tan(arg(l.t - l.s)); }\n\nPoint project(Line l, Point p) { // project p onto line (s,t)\n    return l.s + (l.t - l.s) * dot(p - l.s, l.t - l.s) / norm(l.t - l.s);\n}\n\nPoint reflect(Line l, Point p) {\n    return l.s + conj((p - l.s) / (l.t - l.s)) * (l.t - l.s);\n}\n\nint ccw(Point a, Point b, Point c) {\n    b -= a; c -= a;\n    if(cross(b, c) >  EPS) return +1; // counter-clockwise\n    if(cross(b, c) < -EPS) return -1; // clockwise\n    if(  dot(b, c) < -EPS) return +2; // c--a--b\n    if(abs(b)+EPS < abs(c))return -2; // a--b--c\n    return 0; // a--c--b\n}\n\nint main() {\n    cin.tie(0); ios_base::sync_with_stdio(false);\n    cout << fixed << setprecision(10);\n\n    int q;\n    cin >> q;\n    for(int i=0; i < q; ++i) {\n        double a,b,c,d,e,f,g,h;\n        cin >> a >> b >> c >> d >> e >> f >> g >> h;\n        Point p1 = Point(c, d) - Point(a, b);\n        Point p2 = Point(g, h) - Point(e, f);\n\n        if(abs(dot(p1, p2)) < EPS) cout << 1;\n        else if(abs(cross(p1, p2)) < EPS) cout << 2;\n        else cout << 0;\n        cout << '\\n';\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n \nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n}\n\nint main(){\n  int n;cin>>n;\n  double x0,y0,x1,y1,x2,y2,x3,y3;\n  while(n--){\n    cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n    Point p0=Point(x0,y0),p1=Point(x1,y1),p2=Point(x2,y2),p3=Point(x3,y3);\n    if(isParallel(p0,p1,p2,p3)) cout << 2 << endl;\n    else if(isOrthogonal(p0,p1,p2,p3)) cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<bitset>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<functional>\n#include<limits>\n#include<list>\n#include<map>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<queue>\n#include<vector>\nusing namespace std;\n\n#define MOD 1000000007\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n//0?¬?\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator/(double a) { return Point(x / a, y / a); }\n\tbool operator<(const Point &p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator==(const Point &p)const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n};\n\n//1?¬?\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point(1, 1)) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\n//2?¬?\nclass Circle {\npublic:\n\tPoint c; //center\n\tdouble r; //radius\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\n//??????\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n//??????\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n//??´?????????\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) { return isOrthogonal(a1 - a2, b1 - b2); }\nbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//????????????\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isParallel(Point a1, Point a2, Point b1, Point b2) { return isParallel(a1 - a2, b1 - b2); }\nbool isParallel(Segment s1, Segment s2) { return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//?°???±\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n//????°?\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p)*2.0; }\n\n//??????(p0,p1)????????????p2???????????¢???\nenum { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//?????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n//???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble a1 = abs(cross(base, s1.p1 - s2.p1)); //area1\n\tdouble a2 = abs(cross(base, s1.p2 - s2.p1)); //area2\n\tdouble t = a1 / (a1 + a2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//2??????????????¢\ndouble getDistance(Point a, Point b) { return (a - b).abs(); }\n//??´?????¨???????????¢\ndouble getDistanceLP(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()); }\n//????????¨???????????¢\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n//????????¨??????????????¢\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn\tmin(\n\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s1, s1.p1), getDistanceSP(s1, s1.p2))\n\t);\n}\n\nint main() {\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tPoint p[4];\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tscanf(\"%lf%lf\", &p[j].x, &p[j].y);\n\t\t}\n\t\tif (isParallel(p[0], p[1], p[2], p[3]))cout << 2 << endl;\n\t\telse if (isOrthogonal(p[0], p[1], p[2], p[3]))cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-6;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct pt_t {\n\tdouble x, y;\n\tpt_t operator+(const pt_t &p) { return { x + p.x, y + p.y }; }\n\tpt_t operator-(const pt_t &p) { return { x - p.x, y - p.y }; }\n\tpt_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npt_t cross_point(line_t l, line_t m) {\n\tpt_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, pt_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npt_t rot(pt_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(pt_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(pt_t p, pt_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(max(min(p.x * q.x + p.y * q.y, 1.0), -1.0));\n\tdouble r1 = asin(max(min(p.x * q.y - p.y * q.x, 1.0), -1.0));\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, pt_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nbool on_same_line(pt_t p, pt_t q) {\n\tline_t l = solve_line(p.y, -p.x, p);\n\tif (dist(l, q) < eps) return true;\n\telse return false;\n}\n\nint main() {\n\tint qr; cin >> qr;\n\tLoop(i, qr) {\n\t\tpt_t p[4];\n\t\tLoop(j, 4) {\n\t\t\tcin >> p[j].x >> p[j].y;\n\t\t}\n\t\tline_t l = solve_line(p[1].y - p[0].y, p[0].x - p[1].x, p[0]);\n\t\tline_t m = solve_line(p[3].y - p[2].y, p[2].x - p[3].x, p[2]);\n\t\tpt_t lp = { l.a, l.b };\n\t\tpt_t mp = { m.a, m.b };\n\t\tdouble r = angle(lp, mp);\n\t\tif (nearlyeq(r, 0) || nearlyeq(r, M_PI) || nearlyeq(r, M_PI * 2)) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse if (nearlyeq(r, M_PI * 0.5) || nearlyeq(r, M_PI * 1.5)) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <math.h>\nconst double EPS = 1e-10;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\t/*vector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}*/\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double para(vector v1, vector v2) {\n\treturn sqrt(v1.x*v1.x + v1.y*v1.y)*sqrt(v2.x*v2.x + v2.y*v2.y);\n}\nint main() {\n\tdouble n, x1, x2, x3, x4, y1, y2, y3, y4;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tvector v1(x2 - x1, y2 - y1);\n\t\tvector v2(x4 - x3, y4 - y3);\n\t\tdouble ans = dot(v1, v2);\n\t\tcout << \"asn\" << ans << endl;\n\t\tcout << \"para\" << para(v1, v2) << endl;\n\t\tcout << 2 * ans<< endl;\n\t\tcout << fabs(ans - para(v1, v2)) << endl;\n\t\tif (ans == 0) cout << 1 << endl;\n\t\telse if (fabs(ans - para(v1, v2)) < EPS || fabs(2*ans - fabs(ans - para(v1, v2))) < EPS || fabs((-2) * ans - fabs(ans - para(v1, v2))) < EPS) cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\n\nstruct Point{\n    int x, y;\n};\n\nint main() {\n    int n;\n    cin >> n;\n    \n    for(int i = 0; i < n; i++){\n        Point a[4];\n        for(int i = 0; i < 4; i++){\n            cin >> a[i].x >> a[i].y;\n        }\n        double naiseki;\n        double val1x, val1y, val2x, val2y;\n        double var1, var2;\n        val1x = (a[1].x-a[0].x);//*(a[1].x-a[0].x) + (a[1].y-a[0].y)*(a[1].y-a[0].y);\n        val1y = (a[1].y-a[0].y);//*(a[1].x-a[0].x) + (a[1].y-a[0].y)*(a[1].y-a[0].y);\n        \n        val2x = (a[3].x-a[2].x);//*(a[3].x-a[2].x) + (a[3].y-a[2].y)*(a[3].y-a[2].y);\n        val2y = (a[3].y-a[2].y);//*(a[3].x-a[2].x) + (a[3].y-a[2].y)*(a[3].y-a[2].y);\n\n        naiseki = val1x*val2x + val1y*val2y;\n\n        var1 = sqrt(val1x*val1x+val1y*val1y);\n        var2 = sqrt(val2x*val2x+val2y*val2y);\n        double tmp;\n        tmp = var1*var2;\n        //cout << \"naiseki:\" << naiseki << \" \" << \"tmp:\" << tmp <<  endl;\n        if(naiseki == 0){\n            cout << 1 << endl;\n        }\n        else if(fabs(naiseki-tmp) < 0.00000001  || fabs(naiseki+tmp) < 0.00000001){\n            cout << 2 << endl;\n        }\n        else {\n            cout << 0 << endl;\n        }\n        \n    }\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int lint\ntypedef long long lint;\ntypedef pair<int,int> P;\nconst int    INF=(int)1e9;\nconst int    MOD=(int)1e9+7;\nconst double EPS=(double)1e-10;\n#define equals(a,b) (fabs((a)-(b))<EPS)\nstruct Accelerate_Cin{\n    Accelerate_Cin(){\n        cin.tie(0);ios::sync_with_stdio(0);cout<<fixed<<setprecision(20);\n    };\n};\n\n//幾何学テンプレート\n\n//点\nclass Point{\npublic:\n  double x,y;\n\n  Point(double x = 0,double y = 0):x(x), y(y){};\n\n  Point operator + (Point p) {return Point (x+p.x, y+p.y);}\n  Point operator - (Point p) {return Point (x-p.x, y-p.y);}\n  Point operator * (double a) {return Point(a*x, a*y);}\n  Point operator / (double a) {return Point(x/a,y/a);}\n\n  double abs(){return (norm());}\n  double norm(){return x*x+y*y;}\n\n  bool operator < (const Point &p)const{\n    return x!=p.x ? x<p.x:y<p.y;\n  }\n  bool operator > (const Point &p)const{\n    return x!=p.x ? x>p.x:y>p.y;\n  }\n  bool operator == (const Point &p)const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\n//ベクトル\ntypedef Point Vector;\n\n//内積\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y+b.y;\n}\n\n//外積\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//線分\nstruct Segment{Point p1,p2;};\n\n//直線\ntypedef Segment Line;\n\n//円\nclass Circle{\npublic:\n  Point c;   //中心\n  double r;  //半径\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\n//多角形\ntypedef vector<Point> Polygon;\n\n\n//直交判定\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1, Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n//平行判定\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n\nsigned main(){\n  int a;cin>>a;\n  queue<int>q;\n  for(int i=0;i<a;i++){\n    double x0,y0,x1,y1,x2,y2,x3,y3;\n    cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n    Point p0,p1,p2,p3;\n    p0={x0,y0};p1={x1,y1};\n    p2={x2,y2};p3={x3,y3};\n    Segment s1={p0,p1};\n    Segment s2={p2,p3};\n\n    if(isParallel(s1,s2)){\n      q.push(2);\n    }else if(isOrthogonal(s1,s2)){\n      q.push(1);\n    }else{\n      q.push(0);\n    }\n  }\n\n  while(!q.empty()){\n    cout<<q.front()<<endl;\n    q.pop();\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\ntemplate<class T>\nusing Table = vector<vector<T>>;\nconst ld eps=1e-9;\n\n//// < \"D:\\D_Download\\Visual Studio 2015\\Projects\\programing_contest_c++\\Debug\\a.txt\" > \"D:\\D_Download\\Visual Studio 2015\\Projects\\programing_contest_c++\\Debug\\b.txt\"\n \n\n/* ??????????????¬ */\n\n#include <complex>\n\ntypedef complex<ld> Point;\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define all(x) (x).begin(),(x).end()\n\n\nconst ld pi = acos(-1.0);\nconst ld dtop = pi / 180.;\nconst ld ptod = 1. / dtop;\n\nnamespace std {\n\tbool operator<(const Point &lhs, const Point &rhs) {\n\t\tif (lhs.real() < rhs.real() - eps) return true;\n\t\tif (lhs.real() > rhs.real() + eps) return false;\n\t\treturn lhs.imag() < rhs.imag();\n\t}\n}\n\n// ????????\\???\nPoint input_Point() {\n\tld x, y;\n\tcin >> x >> y;\n\treturn Point(x, y);\n}\n\n// ????????????????????????\nbool eq(const ld a, const ld b) {\n\treturn (abs(a - b) < eps);\n}\n\n// ??????\nld dot(const Point& a, const Point& b) {\n\treturn real(conj(a) * b);\n}\n\n// ??????\nld cross(const Point& a, const Point& b) {\n\treturn imag(conj(a) * b);\n}\n\n// ??´????????????\nclass Line {\npublic:\n\tPoint a, b;\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\tLine(Point a, Point b) : a(a), b(b) {}\n\tPoint operator[](const int _num)const {\n\t\tif (_num == 0)return a;\n\t\telse if (_num == 1)return b;\n\t\telse {\n\t\t\tassert(false);\n\t\t\treturn Point();\n\t\t}\n\t}\n};\n\n// ????????????\nclass Circle {\npublic:\n\tPoint p;\n\tld r;\n\tCircle() : p(Point(0, 0)), r(0) {}\n\tCircle(Point p, ld r) : p(p), r(r) {}\n};\n\n// ccw\n// 1: a,b,c??????????¨???¨?????????????????¶\n//-1: a,b,c???????¨???¨?????????????????¶\n// 2: c,a,b???????????´???????????¶\n//-2: a,b,c???????????´???????????¶\n// 0: a,c,b???????????´???????????¶\nint ccw(const Point& a, const Point &b, const Point &c) {\n\tconst Point nb(b - a);\n\tconst Point nc(c - a);\n\tif (cross(nb, nc) > eps) return 1;   // a,b,c??????????¨???¨?????????????????¶\n\tif (cross(nb, nc) < -eps) return -1; // a,b,c???????¨???¨?????????????????¶\n\tif (dot(nb, nc) < 0) return 2;       // c,a,b???????????´???????????¶\n\tif (norm(nb) < norm(nc)) return -2;  // a,b,c???????????´???????????¶\n\treturn 0;                          // a,c,b???????????´???????????¶\n}\n\n\n/* ???????????? */\n\n// ??´?????¨??´??????????????????\nbool isis_ll(const Line& l, const Line& m) {\n\treturn !eq(cross(l.b - l.a, m.b - m.a), 0);\n}\n\n// ??´?????¨?????????????????????\nbool isis_ls(const Line& l, const Line& s) {\n\treturn isis_ll(l, s) &&\n\t\t(cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\n// ????????¨?????????????????????\nbool isis_ss(const Line& s, const Line& t) {\n\treturn ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n\t\tccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// ????????´????????????\nbool isis_lp(const Line& l, const Point& p) {\n\treturn (abs(cross(l.b - p, l.a - p)) < eps);\n}\n\n// ?????????????????????\nbool isis_sp(const Line& s, const Point& p) {\n\treturn (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);\n}\n\n// ??????????¶?\nPoint proj(const Line &l, const Point& p) {\n\tld t = dot(p - l.a, l.b - l.a) / norm(l.a - l.b);\n\treturn l.a + t * (l.b - l.a);\n}\n\n//???????±??????????????????????\nPoint reflect(const Line &l, const Point &p) {\n\tPoint pr = proj(l, p);\n\treturn pr * 2.l - p;\n}\n\n// ??´?????¨??´????????????\nPoint is_ll(const Line &s, const Line& t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tassert(cross(sv, tv) != 0);\n\treturn s.a + sv * cross(tv, t.a - s.a) / cross(tv, sv);\n}\n// ??´?????¨??´????????????\nvector<Point> is_ll2(const Line &s, const Line& t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tif (cross(sv, tv) != 0)return vector<Point>(1, is_ll(s, t));\n\telse {\n\t\tvector<Point>ans;\n\t\tfor (int k = 0; k < 2; ++k) {\n\t\t\tif (isis_sp(s, t[k]) && find(ans.begin(), ans.end(), t[k]) == ans.end())ans.push_back(t[k]);\n\t\t\tif (isis_sp(t, s[k]) && find(ans.begin(), ans.end(), s[k]) == ans.end())ans.push_back(s[k]);\n\t\t}\n\t\treturn ans;\n\t}\n}\n// ????????¨???????????????\n//???????????£????????¨???????????¨assert(false)\nPoint is_ss(const Line &s, const Line& t) {\n\tif (isis_ss(s, t)) {\n\t\tfor (int k = 0; k < 2; ++k) {\n\t\t\tfor (int l = 0; l < 2; ++l) {\n\t\t\t\tif (s[k] == t[l])return s[k];\n\t\t\t}\n\t\t}\n\t\treturn is_ll(s, t);\n\t}\n\telse {\n\t\t//??????isis_ss?????????\n\t\tassert(false);\n\t\treturn Point(0, 0);\n\t}\n}\n// ????????¨???????????????\nvector<Point> is_ss2(const Line &s, const Line& t) {\n\tvector<Point> kouho(is_ll2(s, t));\n\tvector<Point>ans;\n\tfor (auto p : kouho) {\n\t\tif (isis_sp(s, p) && isis_sp(t, p))ans.emplace_back(p);\n\t}\n\treturn ans;\n}\n// ??´?????¨???????????¢\nld dist_lp(const Line& l, const Point& p) {\n\treturn abs(p - proj(l, p));\n}\n\n//??´?????¨??´???????????¢\nld dist_ll(const Line& l, const Line& m) {\n\treturn isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\n// ??´?????¨??????????????¢\nld dist_ls(const Line& l, const Line& s) {\n\treturn isis_ls(l, s) ? 0 : min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\n// ????????¨???????????¢\nld dist_sp(const Line& s, const Point& p) {\n\tPoint r = proj(s, p);\n\treturn isis_sp(s, r) ? abs(r - p) : min(abs(s.a - p), abs(s.b - p));\n}\n\n// ????????¨??????????????¢\nld dist_ss(const Line& s, const Line& t) {\n\tif (isis_ss(s, t)) return 0;\n\treturn min({ dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b) });\n}\n\n\n//??´?????¨??´?????????????????????????????????\nLine bisection(const Line &s, const Line &t) {\n\tconst Point laglanju(is_ll(s, t));\n\tconst Point avec = !(abs(laglanju - s[0])<eps) ? s[0] - laglanju : s[1] - laglanju;\n\tconst Point bvec = !(abs(laglanju - t[0])<eps) ? t[0] - laglanju : t[1] - laglanju;\n\n\treturn Line(laglanju, laglanju + (abs(bvec)*avec + abs(avec)*bvec) / (abs(avec) + abs(bvec)));\n}\n\n\n//???????????´?????????????????????\n//???????????´??????????????§???????????¨????¢?????????¨?????????\nPoint  inner_center(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tfor (int i = 0; i <static_cast<int>(ls.size()); ++i) {\n\t\tvertics.push_back(is_ll(ls[i], ls[(i + 1) % 3]));\n\t}\n\tif (vertics[0] == vertics[1] || vertics[1] == vertics[2] || vertics[2] == vertics[0])return vertics[0];\n\tLine bi1(bisection(Line(vertics[0], vertics[1]), Line(vertics[0], vertics[2])));\n\tLine bi2(bisection(Line(vertics[1], vertics[2]), Line(vertics[1], vertics[0])));\n\tif (bi1[0] == bi2[0])return bi1[0];\n\telse {\n\t\treturn is_ll(bi1, bi2);\n\t}\n}\n\n//???????????´?????????????????????\n//???????????´??????????????§???????????¨????¢?????????¨?????????\nvector<Point>  ex_center(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tfor (int i = 0; i < static_cast<int>(ls.size()); ++i) {\n\t\tvertics.push_back(is_ll(ls[i], ls[(i + 1) % 3]));\n\t}\n\tif (abs(vertics[0] - vertics[1])<eps || abs(vertics[1] - vertics[2])<eps || (abs(vertics[2] - vertics[0])<eps))return vector<Point>();\n\tvector<Point>ecs;\n\tfor (int i = 0; i < 3; ++i) {\n\t\tLine bi1(bisection(Line(vertics[i], vertics[i] * 2.0l - vertics[(i + 2) % 3]), Line(vertics[i], vertics[(i + 1) % 3])));\n\t\tLine bi2(bisection(Line(vertics[(i + 1) % 3], vertics[(i + 1) % 3] * 2.0l - vertics[(i + 2) % 3]), Line(vertics[(i + 1) % 3], vertics[i])));\n\t\tecs.push_back(is_ll(bi1, bi2));\n\t}\n\treturn ecs;\n}\n\n\n//a,b:??????\n//c:????????§??????\n//???????????´?????????????????¢?????????????±??????????\nvector<Point>  same_dis(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tvertics.push_back(is_ll(ls[0], ls[2]));\n\tvertics.push_back(is_ll(ls[1], ls[2]));\n\n\tif (abs(vertics[0] - vertics[1]) < eps)return vector<Point>{vertics[0]};\n\tLine bis(bisection(ls[0], ls[1]));\n\tvector<Point>ecs;\n\n\tLine abi(bisection(Line(vertics[0], vertics[1]), ls[0]));\n\tecs.push_back(is_ll(bis, abi));\n\n\n\tLine bbi(bisection(Line(vertics[0], 2.l*vertics[0] - vertics[1]), ls[0]));\n\tecs.push_back(is_ll(bis, bbi));\n\n\treturn ecs;\n}\n/* ??? */\n\n// ?????¨????????????\nvector<Point> is_cc(const Circle& c1, const Circle& c2) {\n\tvector<Point> res;\n\tld d = abs(c1.p - c2.p);\n\tld rc = (d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d);\n\tld dfr = c1.r * c1.r - rc * rc;\n\tif (abs(dfr) < eps) dfr = 0.0;\n\telse if (dfr < 0.0) return res; // no intersection\n\tld rs = sqrt(dfr);\n\tPoint diff = (c2.p - c1.p) / d;\n\tres.push_back(c1.p + diff * Point(rc, rs));\n\tif (dfr != 0.0) res.push_back(c1.p + diff * Point(rc, -rs));\n\treturn res;\n}\n\n//???????????????????????????\n/*  0 => out\n1 => on\n2 => in*/\nint is_in_Circle(const Circle &cir, const  Point& p) {\n\tld dis = abs(cir.p - p);\n\tif (dis > cir.r + eps)return 0;\n\telse if (dis < cir.r - eps)return 2;\n\telse return 1;\n}\n//???lc??????rc??????????????????\n/*0 => out\n1 => on\n2 => in*/\nint Circle_in_Circle(const Circle &lc, const  Circle&rc) {\n\tld dis = abs(lc.p - rc.p);\n\tif (dis < rc.r - lc.r - eps)return 2;\n\telse if (dis>rc.r - lc.r + eps)return 0;\n\telse return 1;\n}\n\n// ?????¨??´????????????\nvector<Point> is_lc(const Circle& c, const Line& l) {\n\tvector<Point> res;\n\tld d = dist_lp(l, c.p);\n\tif (d < c.r + eps) {\n\t\tld len = (d > c.r) ? 0.0 : sqrt(c.r * c.r - d * d); //safety;\n\t\tPoint nor = (l.a - l.b) / abs(l.a - l.b);\n\t\tres.push_back(proj(l, c.p) + len * nor);\n\t\tres.push_back(proj(l, c.p) - len * nor);\n\t}\n\treturn res;\n}\n\n// ?????¨??????????????¢\nvector<Point> is_sc(const Circle& c, const Line& l) {\n\tvector<Point> v = is_lc(c, l), res;\n\tfor (Point p : v)\n\t\tif (isis_sp(l, p)) res.push_back(p);\n\treturn res;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cp(const Circle& c, const Point& p) {\n\tvector<Line> ret;\n\tPoint v = c.p - p;\n\tld d = abs(v);\n\tld l = sqrt(norm(v) - c.r * c.r);\n\tif (isnan(l)) { return ret; }\n\tPoint v1 = v * Point(l / d, c.r / d);\n\tPoint v2 = v * Point(l / d, -c.r / d);\n\tret.push_back(Line(p, p + v1));\n\tif (l < eps) return ret;\n\tret.push_back(Line(p, p + v2));\n\treturn ret;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cc(const Circle& c1, const Circle& c2) {\n\tvector<Line> ret;\n\tif (abs(c1.p - c2.p) - (c1.r + c2.r) > -eps) {\n\t\tPoint center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n\t\tret = tangent_cp(c1, center);\n\t}\n\tif (abs(c1.r - c2.r) > eps) {\n\t\tPoint out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n\t\tvector<Line> nret = tangent_cp(c1, out);\n\t\tret.insert(ret.end(), all(nret));\n\t}\n\telse {\n\t\tPoint v = c2.p - c1.p;\n\t\tv /= abs(v);\n\t\tPoint q1 = c1.p + v * Point(0, 1) * c1.r;\n\t\tPoint q2 = c1.p + v * Point(0, -1) * c1.r;\n\t\tret.push_back(Line(q1, q1 + v));\n\t\tret.push_back(Line(q2, q2 + v));\n\t}\n\treturn ret;\n}\n//??????????????????????????¢???\nld two_Circle_area(const Circle&l, const Circle&r) {\n\tld dis = abs(l.p - r.p);\n\tif (dis > l.r + r.r)return 0;\n\telse if (dis + r.r < l.r) {\n\t\treturn r.r*r.r*pi;\n\t}\n\telse if (dis + l.r < r.r) {\n\t\treturn l.r*l.r*pi;\n\t}\n\telse {\n\t\tld ans = (l.r)*(l.r)*acos((dis*dis + l.r*l.r - r.r*r.r) / (2 * dis*l.r)) +\n\t\t\t(r.r)*(r.r)*acos((dis*dis + r.r*r.r - l.r*l.r) / (2 * dis*r.r)) -\n\t\t\tsqrt(4 * dis*dis*l.r*l.r - (dis*dis + l.r*l.r - r.r*r.r)*(dis*dis + l.r*l.r - r.r*r.r)) / 2;\n\t\treturn ans;\n\t}\n\n}\n\n/* ????§???¢ */\n\ntypedef vector<Point> Polygon;\n\n// ??¢???\nld area(const Polygon &p) {\n\tld res = 0;\n\tint n = p.size();\n\trep(j, n) res += cross(p[j], p[(j + 1) % n]);\n\treturn res / 2;\n}\n\n//????§???¢????????¢??????\nbool is_counter_clockwise(const Polygon &poly) {\n\tld angle = 0;\n\tint n = poly.size();\n\trep(i, n) {\n\t\tPoint a = poly[i], b = poly[(i + 1) % n], c = poly[(i + 2) % n];\n\t\tangle += arg((c - b) / (b - a));\n\t}\n\treturn angle > eps;\n}\n\n// ??????????????????\n/*0 => out\n1 => on\n2 => in*/\nint is_in_Polygon(const Polygon &poly, const  Point& p) {\n\tld angle = 0;\n\tint n = poly.size();\n\trep(i, n) {\n\t\tPoint a = poly[i], b = poly[(i + 1) % n];\n\t\tif (isis_sp(Line(a, b), p)) return 1;\n\t\tangle += arg((b - p) / (a - p));\n\t}\n\treturn eq(angle, 0) ? 0 : 2;\n}\n//??????????????????2?????????\nenum { out, on, in };\nint convex_contains(const Polygon &P, const Point &p) {\n\tconst int n = P.size();\n\tPoint g = (P[0] + P[n / 3] + P[2 * n / 3]) / 3.0l; // inner-point\n\tint a = 0, b = n;\n\twhile (a + 1 < b) { // invariant: c is in fan g-P[a]-P[b]\n\t\tint c = (a + b) / 2;\n\t\tif (cross(P[a] - g, P[c] - g) > 0) { // angle < 180 deg\n\t\t\tif (cross(P[a] - g, p - g) > 0 && cross(P[c] - g, p - g) < 0) b = c;\n\t\t\telse                                                  a = c;\n\t\t}\n\t\telse {\n\t\t\tif (cross(P[a] - g, p - g) < 0 && cross(P[c] - g, p - g) > 0) a = c;\n\t\t\telse                                                  b = c;\n\t\t}\n\t}\n\tb %= n;\n\tif (cross(P[a] - p, P[b] - p) < 0) return 0;\n\tif (cross(P[a] - p, P[b] - p) > 0) return 2;\n\treturn 1;\n}\n\n// ??????\n//???????????????????????¨????????????????????§??¨???\nPolygon convex_hull(vector<Point> ps) {\n\tint n = ps.size();\n\tint k = 0;\n\tsort(ps.begin(), ps.end());\n\tPolygon ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++])\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n\n\n//????????????\nvector<Polygon> convex_cut(const Polygon &ps, const Line& l) {\n\tint n = ps.size();\n\tPolygon q;\n\tPolygon r;\n\trep(i, n) {\n\t\tPoint a = ps[i], b = ps[(i + 1) % n];\n\t\tLine m = Line(a, b);\n\t\tif (ccw(l.a, l.b, a) != -1) q.push_back(a);\n\t\tif (ccw(l.a, l.b, a) != 1) r.push_back(a);\n\t\tif (ccw(l.a, l.b, a) * ccw(l.a, l.b, b) < 0 && isis_ll(l, m)) {\n\t\t\tq.push_back(is_ll(l, m));\n\t\t\tr.push_back(is_ll(l, m));\n\t\t}\n\t}\n\tconst vector<Polygon>polys{ q,r };\n\treturn polys;\n}\n\n\n/* ??¢??¬??????????????? */\nvoid add_Point(vector<Point> &ps, const Point p) {\n\tfor (Point q : ps) if (abs(q - p) < eps) return;\n\tps.push_back(p);\n}\n\ntypedef int Weight;\nstruct edge {\n\tint src, dst;\n\tWeight weight;\n\tedge(int src, int dst, Weight weight) :\n\t\tsrc(src), dst(dst), weight(weight) { }\n};\n\ntypedef vector<edge> edges;\ntypedef vector<edges> graph;\n\nvoid add_edge(graph &g, const int from, const int to, const Weight& weight) {\n\tg[from].push_back(edge{ from, to, weight });\n}\n\ngraph segment_arrangement(const vector<Line> &s, const vector<Point> &p) {\n\tint n = p.size(), m = s.size();\n\tgraph g(n);\n\trep(i, m) {\n\t\tvector<pair<ld, int>> vec;\n\t\trep(j, n) if (isis_sp(s[i], p[j]))\n\t\t\tvec.emplace_back(abs(s[i].a - p[j]), j);\n\t\tsort(all(vec));\n\t\trep(j, vec.size() - 1) {\n\t\t\tint from = vec[j].second, to = vec[j + 1].second;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(abs(p[from] - p[to])));\n\t\t}\n\t}\n\treturn g;\n}\ngraph sennbunn_arrangement(const vector<Line>&s) {\n\tvector<Point>crss;\n\tfor (int i = 0; i < static_cast<int>(s.size()); ++i) {\n\t\tfor (int j = i + 1; j < static_cast<int>(s.size()); ++j) {\n\t\t\tif (isis_ss(s[i], s[j])) {\n\t\t\t\tcrss.push_back(is_ll2(s[i], s[j])[0]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i <static_cast<int>(s.size()); ++i) {\n\t\tcrss.push_back(s[i][0]);\n\t\tcrss.push_back(s[i][1]);\n\t}\n\treturn segment_arrangement(s, crss);\n}\n\ngraph Circle_arrangement(const vector<Circle> &c, const vector<Point> &p) {\n\tint n = p.size(), m = c.size();\n\tgraph g(n);\n\trep(i, m) {\n\t\tvector<pair<ld, int>> vec;\n\t\trep(j, n) if (abs(abs(c[i].p - p[j]) - c[i].r) < eps)\n\t\t\tvec.emplace_back(arg(c[i].p - p[j]), j);\n\t\tsort(all(vec));\n\t\trep(j, vec.size() - 1) {\n\t\t\tint from = vec[j].second, to = vec[j + 1].second;\n\t\t\tld angle = vec[j + 1].first - vec[j].first;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(angle * c[i].r));\n\t\t}\n\t\tif (vec.size() >= 2) {\n\t\t\tint from = vec.back().second, to = vec.front().first;\n\t\t\tld angle = vec.front().first - vec.back().first;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(angle * c[i].r));\n\t\t}\n\t}\n\treturn g;\n}\n\nint main() {\n\tint Q; cin >> Q;\n\tcout << setprecision(10) << fixed;\n\twhile (Q--) {\n\t\tLine l0(input_Point(), input_Point());\n\t\tLine l1(input_Point(), input_Point());\n\t\tauto a(is_ll2(l0, l1));\n\t\tif (a.empty())cout << 2 << endl;\n\t\telse {\n\t\t\tif (abs(cross(l0[1] - l0[0], l1[0] - l1[1])) < eps) {\n\t\t\t\tcout << 2 << endl;\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\tif (abs(dot(l0[1] - l0[0], l1[0] - l1[1])) < eps)cout << 1 << endl;\n\t\t\t\telse cout << 0 << endl;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n\ndouble eps=1e-8;\n\nbool eq(double a,double b){\n  return (-eps<a-b&&a-b<eps);\n}\n\nint main(){\n  int n;\n  double ax,ay,bx,by,cx,cy,dx,dy;\n  scanf(\"%d\",&n);\n  while(n--){    \n    scanf(\"%lf %lf %lf %lf\",&ax,&ay,&bx,&by);\n    scanf(\"%lf %lf %lf %lf\",&cx,&cy,&dx,&dy);\n    P A=P(ax,ay),B=P(bx,by);\n    P C=P(cx,cy),D=P(dx,dy);\n    A-=B;\n    C-=D;\n    if(eq(0,imag(A/C)))printf(\"2\\n\");\n    else if(eq(0,real(A/C)))printf(\"1\\n\");\n    else printf(\"0\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\n#include <math.h>\n\nusing namespace std;\n\nint main(){\n\tint q;\n\tdouble x1,x2,x3,x4,y1,y2,y3,y4,slope1,slope2,naiseki;\n\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n\t\tif(x1 == x2 && x3 == x4){\n\t\t\tprintf(\"2\\n\");\n\t\t}else if(x1 == x2 && x3 != x4){\n\t\t\tif(y3 == y4)printf(\"1\\n\");\n\t\t\telse{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}else if(x1 != x2 && x3 == x4){\n\t\t\tif(y1 == y2)printf(\"1\\n\");\n\t\t\telse{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}else{\n\t\t\tslope1 = (y2-y1)/(x2-x1);\n\t\t\tslope2 = (y4-y3)/(x4-x3);\n\t\t\tnaiseki = (x2-x1)*(x4-x3)+(y2-y1)*(y4-y3);\n\t\t\tif(fabs(slope1-slope2) < 0.00000001){\n\t\t\t\tprintf(\"2\\n\");\n\t\t\t}else if(fabs(naiseki) < 0.00000001){\n\t\t\t\tprintf(\"1\\n\");\n\t\t\t}else{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\n// Segments/Lines - Parallel/Orthogonal\n\n#define SUBMIT\n\n#include <utility>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\nusing ui64 = unsigned long long;\nusing i64 = long long;\n\nconst double eps = 1e-10;\n\nbool almost_equals(double a, double b) { return std::abs(a - b) < eps; }\n\nclass point2d {\npublic:\n    point2d() : point2d(0.0, 0.0) {}\n\n    point2d(double x, double y) : x_(x), y_(y) {}\n\n    point2d operator+(const point2d& rhs) const { return {x_ + rhs.x_, y_ + rhs.y_}; }\n\n    point2d operator-(const point2d& rhs) const { return {x_ - rhs.x_, y_ - rhs.y_}; }\n\n    point2d operator*(double rhs) const { return {x_ * rhs, y_ * rhs}; }\n\n    point2d operator/(double rhs) const { return {x_ / rhs, y_ / rhs}; }\n\n    bool operator==(const point2d& rhs) const { return almost_equals(x_, rhs.x_) && almost_equals(y_, rhs.y_); }\n\n    double l2_norm() const { std::sqrt(squared_l2_norm()); }\n\n    double squared_l2_norm() const { return x_ * x_ + y_ * y_; }\n\n    double x() const noexcept { return x_; }\n\n    double y() const noexcept { return y_; }\n\n    friend double dot(const point2d& lhs, const point2d& rhs);\n\n    friend double cross(const point2d& lhs, const point2d& rhs);\n\nprivate:\n    double x_;\n    double y_;\n\nprivate:\n};\n\ndouble dot(const point2d& lhs, const point2d& rhs) {\n    return lhs.x_ * rhs.x_ + lhs.y_ * rhs.y_;\n}\n\ndouble cross(const point2d& lhs, const point2d& rhs) {\n    return lhs.x_ * rhs.y_ - lhs.y_ * rhs.x_;\n}\n\nbool is_orthogonal(const point2d& lhs, const point2d& rhs) {\n    return almost_equals(dot(lhs, rhs), 0.0);\n}\n\nbool is_parallel(const point2d& lhs, const point2d& rhs) {\n    return almost_equals(cross(lhs, rhs), 0.0);\n}\n\n\nint main() {\n#ifdef SUBMIT\n    auto& stream = cin;\n#else\n    string program_input_str = R\"(3\n0 0 3 0 0 2 3 2\n0 0 3 0 1 1 1 4\n0 0 3 0 1 1 2 2\n)\";\n    stringstream stream(program_input_str);\n#endif\n    int q;\n    stream >> q;\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    for (int i = 0; i < q; ++i) {\n        stream >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        point2d p0(x0, y0), p1(x1, y1), p2(x2, y2), p3(x3, y3);\n        point2d s1 = p0 - p1, s2 = p2 - p3;\n        if (is_parallel(s1, s2)) cout << 2 << endl;\n        else if (is_orthogonal(s1, s2)) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#ifndef __VECD__\n#define __VECD__\n#include <vector>\n#include <numeric>\n#include <iomanip>\n#include <stdlib.h>\n#include <iostream>\n#define rep(n) for(int i=0;i<n;i++)\n#define PB push_back\n#define VecND VecD<std::vector<double> >\n#define Vec3D _VecD<double, 3>\n#define Vec2D _VecD<double, 2>\n#endif\n\ntemplate <typename U>                       class VecD;\ntemplate <typename TYPE, unsigned int SIZE> class _VecD;\n\ntemplate <typename U> const VecD<U> projection(const VecD<U> &p1, const VecD<U> &p2);\n\ntemplate <typename U> class VecD{\ntemplate <typename DUMMY>      friend const double operator*(const VecD&, const VecD&);\ntemplate <typename T>          friend const VecD operator*(const T&, const VecD&);\ntemplate <typename T, class C> friend const C operator*(const C&, const T&);\ntemplate <typename DUMMY>      friend const VecD operator+(const VecD&, const VecD&);\ntemplate <typename T>          friend const VecD operator+(const T&, const VecD&);\ntemplate <typename T, class C> friend const C operator+(const C&, const T&);\ntemplate <class C>             friend const C operator-(const C&);\ntemplate <class C>             friend const C operator-(const C&, const C&);\ntemplate <typename T, class C> friend const C operator-(const T&, const C&);\ntemplate <typename T, class C> friend const C operator-(const C&, const T&);\ntemplate <typename DUMMY>      friend std::ostream& operator<<(std::ostream&, const VecD&);\npublic:\n\tU vec;\n\tVecD(){}\n\tVecD(U v){\n\t\tvec = v;\n\t}\n\tconst double dot(const VecD &p) const{\n\t\treturn inner_product( this->vec.begin(), this->vec.end(), p.vec.begin(), 0);\n\t}\n};\n\ntemplate <typename TYPE, unsigned int SIZE> class _VecD{\ntemplate <typename DUMMY>      friend const double operator*(const _VecD&, const _VecD&);\ntemplate <typename T>          friend const _VecD operator*(const T&, const _VecD&);\ntemplate <typename T, class C> friend const C operator*(const C&, const T&);\ntemplate <typename DUMMY>      friend const _VecD operator+(const _VecD&, const _VecD&);\ntemplate <typename T>          friend const _VecD operator+(const T&, const _VecD&);\ntemplate <typename T, class C> friend const C operator+(const C&, const T&);\ntemplate <class C>             friend const C operator-(const C&);\ntemplate <class C>             friend const C operator-(const C&, const C&);\ntemplate <typename T, class C> friend const C operator-(const T&, const C&);\ntemplate <typename T, class C> friend const C operator-(const C&, const T&);\ntemplate <typename DUMMY>      friend std::ostream& operator<<(std::ostream&, const _VecD&);\n\npublic:\n\tTYPE vec[SIZE];\n\t_VecD(){}\n\t_VecD(TYPE (&array)[SIZE]){\n\t\tfor(int i=0; i<SIZE; i++) vec[i] = array[i];\n\t}\n\tconst double dot(const _VecD &p) const{\n\t\tdouble tmp = 0;\n\t\tfor(int i=0; i<SIZE; i++) tmp += this->vec[i] * p.vec[i];\n\t\treturn tmp;\n\t}\n\tconst double cross(const Vec2D &p) const{\n\t\treturn this->vec[0]*p.vec[1] - this->vec[1]*p.vec[0];\n\t}\n\tconst Vec3D cross(const Vec3D &p) const{\n\t\tdouble v[3];\n\t\tv[0] = this->vec[1]*p.vec[2] - this->vec[2]*p.vec[1];\n\t\tv[1] = this->vec[2]*p.vec[0] - this->vec[0]*p.vec[2];\n\t\tv[2] = this->vec[0]*p.vec[1] - this->vec[1]*p.vec[0];\n\t\treturn Vec3D(v);\n\t}\n};\n\nconst double operator*(const VecND &p0, const VecND &p1){ return inner_product( p0.vec.begin(), p0.vec.end(), p1.vec.begin(), 0); }\n// template <typename U>\n// const double operator*(const VecD<U> &p0, const VecD<U> &p1){ return inner_product( p0.vec.begin(), p0.vec.end(), p1.vec.begin(), 0); }\n\ntemplate <typename T>\nconst VecND operator*(const T &a, const VecND &p1){\n\tstd::vector<double> v;\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++) v.PB(*iter1 * a);\n\tconst VecND p(v);\n\treturn p;\n}\ntemplate <typename T>\nconst Vec2D operator*(const T &a, const Vec2D &p1){\n\tdouble v[2];\n\tfor(int i=0; i<2; i++) v[i] = p1.vec[i] * a;\n\tconst Vec2D p(v);\n\treturn p;\n}\ntemplate <typename T>\nconst Vec3D operator*(const T &a, const Vec3D &p1){\n\tdouble v[3];\n\tfor(int i=0; i<3; i++) v[i] = p1.vec[i] * a;\n\tconst Vec3D p(v);\n\treturn p;\n}\n\ntemplate <typename T, class C>\nconst C operator* (const C &p, const T &a){return a*p;}\nconst VecND operator+(const VecND &p0, const VecND &p1){\n\tstd::vector<double> v;\n\tstd::vector<double>::const_iterator iter0 = p0.vec.begin();\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++){\n\t\tv.PB(*iter0 + *iter1);\n\t\titer0++;\n\t}\n\tconst VecND p(v);\n\treturn p;\n}\nconst Vec2D operator+(const Vec2D &p0, const Vec2D &p1){\n\tdouble v[2];\n\tfor(int i=0; i<2; i++) v[i] = p0.vec[i] + p1.vec[i];\n\tconst Vec2D p(v);\n\treturn p;\n}\nconst Vec3D operator+(const Vec3D &p0, const Vec3D &p1){\n\tdouble v[3];\n\tfor(int i=0; i<3; i++) v[i] = p0.vec[i] + p1.vec[i];\n\tconst Vec3D p(v);\n\treturn p;\n}\ntemplate <class T>\nconst VecND operator+(const T &a, const VecND &p1){\n\tstd::vector<double> v;\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++){\n\t\tv.PB(*iter1 + a);\n\t}\n\tconst VecND p(v);\n\treturn p;\n}\ntemplate <class T>\nconst Vec2D operator+(const T &a, const Vec2D &p1){\n\tdouble v[2];\n\tfor(int i=0; i<2; i++) v[i] = p1.vec[i] + a;\n\tconst Vec2D p(v);\n\treturn p;\n}\ntemplate <class T>\nconst Vec3D operator+(const T &a, const Vec3D &p1){\n\tdouble v[3];\n\tfor(int i=0; i<3; i++) v[i] = p1.vec[i] + a;\n\tconst Vec3D p(v);\n\treturn p;\n}\ntemplate <typename T, class C>\nconst C operator+(const C &p1, const T &a){return a+p1;}\ntemplate <class C>\nconst C operator-(const C &p1){return (-1)*p1;}\ntemplate <class C>\nconst C operator-(C &p0, C &p1){ return p0+(-p1); }\ntemplate <typename T, class C>\nconst C operator-(const T &a, C &p1){ return a+(-p1); }\ntemplate <typename T, class C>\nconst C operator-(C &p1, const T &a){return (-a)+p1;}\n\n// template<class C>\n// const C projection(const C &p1, const C &p2){\n// \treturn ((p1*p2) / (p1*p1)) * p1;\n// }\ntemplate<typename U>\nconst VecD<U> projection(const VecD<U> &p1, const VecD<U> &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\n\nconst Vec2D projection(const Vec2D &p1, const Vec2D &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\nconst Vec3D projection(const Vec3D &p1, const Vec3D &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\n\nstd::ostream& operator<<(std::ostream &os, const VecND &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\nstd::ostream& operator<<(std::ostream &os, const Vec2D &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\nstd::ostream& operator<<(std::ostream &os, const Vec3D &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\n\nusing namespace std;\n\n\nint main(void){\n\n\tint q; cin >> q;\n\trep(q){\n\t\tdouble xp0, yp0, xp1, yp1; cin>>xp0>>yp0>>xp1>>yp1;\n\t\tdouble xp2, yp2, xp3, yp3; cin>>xp2>>yp2>>xp3>>yp3;\n\t\tdouble _v1[2] = {xp1-xp0, yp1-yp0}; Vec2D _p1(_v1);\n\t\tdouble _v3[2] = {xp3-xp2, yp3-yp2}; Vec2D _p3(_v3);\n\t\tif (_p1.cross(_p3)==0) cout << \"2\" << endl;\n\t\telse if (_p1.dot(_p3)==0) cout << \"1\" << endl;\n\t\telse cout << \"0\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\nconst double EPS=1e-10;\nstruct point{\n\tdouble x,y;\n\tpoint(const point&a):x(a.x),y(a.y){}\n\tpoint(const double&x=0,const double&y=0):x(x),y(y){}\n\tpoint operator+(const point&p)const{return point(x+p.x,y+p.y);}\n\tpoint operator-(const point&p)const{return point(x-p.x,y-p.y);}\n\tpoint operator*(const double&k)const{return point(x*k,y*k);}\n\tpoint operator/(const double&k)const{return point(x/k,y/k);}\n\tdouble norm(){return x*x+y*y;}\n\tdouble abs(){return sqrt(norm());}\n\tvoid operator=(const point&a){\n\t\tx=a.x,y=a.y;\n\t}\n\tbool operator<(const point&p)const{\n\t\treturn x!=p.x?x<p.x:y<p.y;\n\t}\n\tbool operator==(const point&p)const{\n\t\treturn fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n\t}\n\tfriend double dot(const point&a,const point&b){\n\t\treturn a.x*b.x+a.y*b.y;\n\t}\n\tfriend double cross(const point&a,const point&b){\n\t\treturn a.x*b.y-a.y*b.x;\n\t}\n};\ntypedef point vector;\nstruct segment{\n\tpoint p1,p2;\n\tsegment(const double&a,const double&b,const double&c,const double&d){\n\t\tp1.x=a,p1.y=b,p2.x=c,p2.y=d;\n\t}\n\tsegment(const point&a, const point&b):p1(a),p2(b){}\n\tpoint get_vec()const{return point(p2.x-p1.x,p2.y-p1.y);}\n};\nbool orthogonal(const vector&a,const vector&b){\n\treturn fabs(dot(a,b))<EPS;\n}\nbool orthogonal(const point&a,const point&b,const point&c,const point&d){\n\treturn fabs(dot(a-b,c-d))<EPS;\n}\nbool orthogonal(const segment&a,const segment&b){\n\treturn fabs(dot(a.get_vec(),b.get_vec()))<EPS;\n}\nbool parallel(const vector&a,const vector&b){\n\treturn fabs(cross(a,b))<EPS;\n}\nbool parallel(const point&a,const point&b,const point&c,const point&d){\n\treturn fabs(cross(a-b,c-d))<EPS;\n}\nbool parallel(const segment&a,const segment&b){\n\treturn fabs(cross(a.get_vec(),b.get_vec()))<EPS;\n}\npoint project(const segment&s,const point&p){\n\tvector base=s.get_vec();\n\tdouble r=dot(p-s.p1,base)/base.norm();\n\treturn s.p1+base*r;\n}\npoint reflect(const segment&s,const point&p){\n\treturn p+(project(s,p)-p)*2.0;\n}\nint ccw(const point&a,const point&b,const point&c){\n\tvector t1=b-a;\n\tvector t2=c-a;\n\tif(cross(t1,t2)>EPS) return 1;\n\tif(cross(t1,t2)<-EPS) return -1;\n\tif(dot(t1,t2)<-EPS) return -2;\n\tif(t1.norm()<t2.norm()) return 2;\n\treturn 0;\n}\nint main(){\n\tdouble a,b,c,d;\n\tint n;\n\tcin>>n;\n\tfor(int i=0;i<n;i++){\n\t\tcin>>a>>b>>c>>d;\n\t\tsegment s1(a,b,c,d);\n\t\tcin>>a>>b>>c>>d;\n\t\tsegment s2(a,b,c,d);\n\t\tif(parallel(s1,s2))  cout<<2<<endl;\n\t\telse if(orthogonal(s1,s2)) cout<<1<<endl;\n\t\telse cout<<0<<endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n\n#define EPS 0.00000000001Lf\n\n#define PI 3.141592653589793238462643383279Lf\n\nint main()\n{\n    int q, x1, y1, x2, y2, x3, y3, x4, y4;\n    \n    scanf(\"%d\", &q);\n    \n    for(int i = 0; i < q; i++)\n    {\n        scanf(\"%d\", &x1);\n        scanf(\"%d\", &y1);\n        scanf(\"%d\", &x2);\n        scanf(\"%d\", &y2);\n        scanf(\"%d\", &x3);\n        scanf(\"%d\", &y3);\n        scanf(\"%d\", &x4);\n        scanf(\"%d\", &x4);\n        \n        long double angle1 = atan2l(y2 - y1, x2 - x1);\n        long double angle2 = atan2l(y4 - y3, x4 - x3);\n        \n        long double sa = labs(angle2 - angle1);\n        \n        if(sa < -EPS) { sa += PI * 2.0; }\n        \n        if(sa == PI * 0.5 || sa == PI * 1.5)\n        {\n            cout << 1 << endl;\n        }\n        else if(sa == PI || sa == 0)\n        {\n            cout << 2 << endl;\n        }\n        else\n        {\n            cout << 0 << endl;\n        }\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<algorithm>\n#include<string.h>\n#include<complex>\nusing namespace std;\ntypedef complex<double> qua;\nint main()\n{\n    int t;\n    double x1,x2,x3,x4,y1,y2,y3,y4;\n    for(scanf(\"%d\",&t);t;--t)\n    {\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n        qua ans=qua(x2-x1,y2-y1)*qua(x4-x3,y3-y4);\n        if(ans.imag()==0) printf(\"2\\n\");\n        else if(ans.real()==0) printf(\"1\\n\");\n        else printf(\"0\\n\");\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<math.h>\n\n\nint main(){\n    int xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3,i,n;\n    double s1,s2,a,b,c,d;\n    scanf(\"%d\",&n);\n    for(i=1;i<=n;i++){\n    scanf(\"%d%d%d%d%d%d%d%d\",&xp0,&yp0,&xp1,&yp1,&xp2,&yp2,&xp3,&yp3);\n    s1=sqrt(((xp0-xp1)*(xp0-xp1)+(yp0-yp1)*(yp0-yp1))*1.0);\n    s2=sqrt(((xp2-xp3)*(xp2-xp3)+(yp2-yp3)*(yp2-yp3))*1.0);\n    b=sqrt(((xp2-xp0)*(xp2-xp0)+(yp2-yp0)*(yp2-yp0))*1.0);\n    a=sqrt(((xp0-xp3)*(xp0-xp3)+(yp0-yp3)*(yp0-yp3))*1.0);\n    d=sqrt(((xp1-xp3)*(xp1-xp3)+(yp1-yp3)*(yp1-yp3))*1.0);\n    c=sqrt(((xp2-xp1)*(xp2-xp1)+(yp2-yp1)*(yp2-yp1))*1.0);\n\n    if(a==c&&b==d&&s1==s2)\n        printf(\"2\\n\");\n    else if(a!=c&&b!=d&&s1==s2)\n        printf(\"1\\n\");\n    else\n        printf(\"0\\n\");\n    }\n\n\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<string>\n#include<cstdlib>\n#include<map>\n#include<iomanip>\n#include<sstream>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<math.h>\n#include<complex>\nusing namespace std;\nconst long double EPS=1e-8;\nbool maziwatteruno(complex<long double>a1,complex<long double>a2,complex<long double>b1,complex<long double>b2 ){\n\ta2-=a1;\n\tb1-=a1;\n\tb2-=a1;\n\ta1-=a1;\n\tb1/=a2;\n\tb2/=a2;\n\ta2/=a2;\n\tlong double kouten=(abs(b1.imag())*b2.real()+abs(b2.imag())*b1.real());\n\t\n\tif(abs(b1.imag())+abs(b2.imag())<EPS&&(b1.real()<0&&b2.real()<0)||(b1.real()>1&&b2.real()>1))\n\t{\n\t\treturn false;\n\t}else if(abs(b1.imag())+abs(b2.imag())<EPS){return true;}\n\t\n\tif(b1.imag()*b2.imag()>0){\n\t\t\n\t\tcout<<b1<<\" \"<<b2<<endl;\n\t\treturn false;\n\t}else if(kouten<0||kouten>(abs(b1.imag())+abs(b2.imag()))){\n\t\t\n\t\t\n\t\tcout<<b1<<\" \"<<b2<<endl;\n\t\treturn false;\n\t}else{\n\t\treturn true;\n\t}\n}\n\n\nint main(){\n\tcout << fixed << setprecision(10);\n\t\n\tlong double Re,Im;\n\tint q;\n\tcomplex<long double>p1,p2;\n\t\n\tcin>>q;\n\t\n\tfor(int i=0;i<q;i++){\n\t\t\n\t\t\n\t\tcomplex<long double>p1,p2,p3,p4;\n\t\t\n\t\tcin>>Re>>Im;\n\t\tp1.real(Re);\n\t\tp1.imag(Im);\n\t\tcin>>Re>>Im;\n\t\tp2.real(Re);\n\t\tp2.imag(Im);\n\t\tcin>>Re>>Im;\n\t\tp3.real(Re);\n\t\tp3.imag(Im);\n\t\tcin>>Re>>Im;\n\t\tp4.real(Re);\n\t\tp4.imag(Im);\n\t\t\n\t\tp2-=p1;\n\tp3-=p1;\n\tp4-=p1;\n\tp1-=p1;\n\tp3/=p2;\n\tp4/=p2;\n\tp2/=p2;\n\t\tif(abs(p3.imag()-p4.imag())<EPS){\n\t\t\tcout<<2<<endl;\n\t\t}else if(abs(p3.real()-p4.real())<EPS)\n\t\t {\n\t\t \tcout<<1<<endl;\n\t\t }\n\t\t else{\n\t\tcout<<0<<endl;\t\n\t\t}\n\t}\n\t\n}\n"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <vector>\n#include <list>\n#include <map>\n#include <climits>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <random>\n#include <cctype>\n#include <complex>\n#include <regex>\n\nusing namespace std;\n\n#define C_MAX(a, b) ((a)>(b)?(a):(b))\n#define SHOW_VECTOR(v) {std::cerr << #v << \"\\t:\";for(const auto& xxx : v){std::cerr << xxx << \" \";}std::cerr << \"\\n\";}\n#define SHOW_MAP(v) {std::cerr << #v << endl; for(const auto& xxx: v){std::cerr << xxx.first << \" \" << xxx.second << \"\\n\";}}\n\n#define EPS 1e-8\n#define EQ(a, b) (abs((a)-(b)) < EPS)\n\ntypedef complex<double> P;\n\ndouble cross(P a, P b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(P a, P b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\n\nint ccw(P p0, P p1, P p2) {\n    p1 -= p0;\n    p2 -= p0;\n    if (cross(p1, p2) > EPS) return 1; //ccw\n    if (cross(p1, p2) < -EPS) return -1; //cw\n    if (dot(p1, p2) < -EPS) return 2; //left\n    if (abs(p1) < abs(p2)) return -2; //right\n    return 0; //mid\n}\n\nbool is_parallel(P p0, P p1, P p2, P p3) {\n    P x = p1 - p0;\n    P y = p3 - p2;\n    return EQ(cross(x, y), 0.0);\n}\n\nbool is_orthogonal(P p0, P p1, P p2, P p3) {\n    P x = p1 - p0;\n    P y = p3 - p2;\n    return EQ(dot(x, y), 0.0);\n}\n\nint main() {\n\n    int Q;\n    cin >> Q;\n\n    while (Q--) {\n\n        vector<P> p(4);\n        for (int i = 0; i < 4; i++) {\n            double x, y;\n            cin >> x >> y;\n            p[i] = P(x, y);\n        }\n\n        int ans = 0;\n        if (is_parallel(p[0], p[1], p[2], p[3]))ans = 2;\n        if (is_orthogonal(p[0], p[1], p[2], p[3]))ans = 1;\n\n        cout << ans << endl;\n\n    }\n\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SBCURE_NO_DEPRECATE\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nconst int maxn = 110;\nconst int INF = 0x7fffffff;\n\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积 = a*b*cosθ\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积 = a*b*sinθ\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\nint cmp(Point A, Point B)                     //竖直排序  \n{\n\treturn (A.y<B.y || (A.y == B.y&&A.x<B.x));\n}\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\n\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) >= 0; j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) >= 0; j--) {\n\t\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\nint main(){\n\tint n;\n\tPoint p1,p2,p3,p4;\n\tcin>>n;\n\twhile(n--){\n\t\tcin>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y>>p4.x>>p4.y;\n\t\tif(isParallel(p1, p2, p3, p4)) cout<<\"2\\n\";\n\t\telse if(isOrthogonal(p1, p2, p3, p4)) cout<<\"1\\n\";\n\t\telse cout<<\"0\\n\";\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <complex>\n#include <algorithm>\nusing namespace std;\n\ntypedef long double Real;\ntypedef complex<Real> Point;\n#define PCR Point const &\n#define X real()\n#define Y imag()\n\nconst Real EPS = 1e-10;\nconst Real INF = 1e100;\nconst Real PI = acos(-1);\n\nstruct Segment {\n    Point p[2];\n    Segment (PCR a = Point(), PCR b = Point()){\n        p[0] = a, p[1] = b;\n    }\n    Point & operator [] (int k) { return p[k]; }\n    Point const & operator [] (int k) const { return p[k]; }\n};\ntypedef vector<Point> Polygon;\nstruct Circle { Real radius; Point center; };\n\nReal dot(PCR a, PCR b){\n    return a.X*b.X + a.Y*b.Y;\n}\nReal cross(PCR a, PCR b){\n    return a.X*b.Y - a.Y*b.X;\n}\n\nPoint pSP(Segment const & s, PCR p){\n    Point base = s[1] - s[0];\n    Real r = dot(p - s[0], base) / norm(base);\n    return s[0] + base * r;\n}\n\nPoint rSP(Segment const & s, PCR p){\n    Point v = pSP(s,p) - p;\n    return p + v * Real(2);\n}\n\nenum { LEFT = 1, RIGHT = -1, BACK = 2, FRONT = -2, ON = 0 };\n// Includes end-points. Comment in to exclude.\nint ccw(PCR x, PCR p, PCR q){\n    Point a = p - x, b = q - x;\n    if(cross(a,b) > EPS) return LEFT;\n    if(cross(a,b) < -EPS) return RIGHT;\n    if(/* abs(a) < EPS || */ dot(a,b) < -EPS) return BACK;\n    if(/* abs(b) < EPS || */ norm(a) < norm(b)) return FRONT;\n    return ON;\n}\n\nbool isParallel(Segment const & s, Segment const & t){\n    return abs(cross(s[1]-s[0],t[1]-t[0])) < EPS;\n}\n\nbool isOrthogonal(Segment const & s, Segment const & t){\n    return abs(dot(s[1]-s[0],t[1]-t[0])) < EPS;\n}\n\n\n// bool iLL(Segment const & s, Segment const & t){\n\n// }\n\n#include <iostream>\n#include <cstdio>\n\nint main(){\n    Segment s,t;\n    Real x,y;\n    int n; cin >> n;\n    for(int i=0;i<n;i++){\n        cin >> x >> y;\n        s[0] = Point(x,y);\n        cin >> x >> y;\n        s[1] = Point(x,y);\n        cin >> x >> y;\n        t[0] = Point(x,y);\n        cin >> x >> y;\n        t[1] = Point(x,y);\n\n        if(isParallel(s,t)) puts(\"2\");\n        else if(isOrthogonal(s,t)) puts(\"1\");\n        else puts(\"0\");\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\ntemplate<class T>\nstruct Vec2\n{\n\tVec2(){}\n\tVec2(T _x, T _y) : x(_x), y(_y) {}\n\n\tVec2 operator+(const Vec2& rhs) const { return Vec2(x + rhs.x, y + rhs.y); }\n\tVec2 operator-(const Vec2& rhs) const { return Vec2(x - rhs.x, y - rhs.y); }\n\tVec2 operator*(T s) const { return Vec2(x*s, y*s); }\n\tVec2 operator/(T s) const { return Vec2(x/s, y/s); }\n\tT dot(const Vec2& rhs) const { return x*rhs.x + y*rhs.y; }\n\tT cross(const Vec2& rhs) const { return x*rhs.y - y*rhs.x; }\n\tT sqlength() const { return x*x + y*y; }\n\tdouble length() const { return sqrt(sqlength()); }\n\tbool operator<(const Vec2& rhs) const\n\t{\n\t\tif (x != rhs.x) return x < rhs.x;\n\t\treturn y < rhs.y;\n\t}\n\n\tT x;\n\tT y;\n};\n\ntemplate<class T>\nT cross(const Vec2<T> &O, const Vec2<T> &A, const Vec2<T> &B)\n{\n\treturn (A - O).cross(B - O);\n}\n\ntemplate<class T>\nbool IsIntSegments(const Vec2<T>& A1, const Vec2<T>& A2, const Vec2<T>& B1, const Vec2<T>& B2)\n{\n\treturn (cross(A1, A2, B1)*cross(A1, A2, B2) < 0 && cross(B1, B2, A1)*cross(B1, B2, A2) < 0);\n}\n\ntemplate<class T>\nbool IsPointOnSegment(const Vec2<T>& P, const Vec2<T>& S, const Vec2<T>& E)\n{\n\tVec2<T> dir = E - S;\n\tif ((P - S).cross(dir) != 0) {\n\t\treturn false;\n\t}\n\tT prd = (P - S).dot(dir);\n\tif (prd < 0) {\n\t\treturn false;\n\t}\n\treturn prd <= dir.dot(dir);\n}\n\nint main()\n{\n\ttypedef Vec2<long long> Vec;\n\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tVec P[4];\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tcin >> P[j].x >> P[j].y;\n\t\t}\n\n\t\tVec d1 = P[0] - P[1];\n\t\tVec d2 = P[2] - P[3];\n\t\tif (d1.cross(d2) == 0) {\n\t\t\tputs(\"2\");\n\t\t}\n\t\telse if (d1.dot(d2) == 0) {\n\t\t\tputs(\"1\");\n\t\t}\n\t\telse {\n\t\t\tputs(\"0\");\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\ntemplate<class T>\nusing Table = vector<vector<T>>;\nconst ld eps=1e-9;\n\n//// < \"D:\\D_Download\\Visual Studio 2015\\Projects\\programing_contest_c++\\Debug\\a.txt\" > \"D:\\D_Download\\Visual Studio 2015\\Projects\\programing_contest_c++\\Debug\\b.txt\"\n \n\n/* ??????????????¬ */\n\n#include <complex>\n\ntypedef complex<ld> Point;\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define all(x) (x).begin(),(x).end()\n\n\nconst ld pi = acos(-1.0);\nconst ld dtop = pi / 180.;\nconst ld ptod = 1. / dtop;\n\nnamespace std {\n\tbool operator<(const Point &lhs, const Point &rhs) {\n\t\tif (lhs.real() < rhs.real() - eps) return true;\n\t\tif (lhs.real() > rhs.real() + eps) return false;\n\t\treturn lhs.imag() < rhs.imag();\n\t}\n}\n\n// ????????\\???\nPoint input_Point() {\n\tld x, y;\n\tcin >> x >> y;\n\treturn Point(x, y);\n}\n\n// ????????????????????????\nbool eq(const ld a, const ld b) {\n\treturn (abs(a - b) < eps);\n}\n\n// ??????\nld dot(const Point& a, const Point& b) {\n\treturn real(conj(a) * b);\n}\n\n// ??????\nld cross(const Point& a, const Point& b) {\n\treturn imag(conj(a) * b);\n}\n\n// ??´????????????\nclass Line {\npublic:\n\tPoint a, b;\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\tLine(Point a, Point b) : a(a), b(b) {}\n\tPoint operator[](const int _num)const {\n\t\tif (_num == 0)return a;\n\t\telse if (_num == 1)return b;\n\t\telse {\n\t\t\tassert(false);\n\t\t\treturn Point();\n\t\t}\n\t}\n};\n\n// ????????????\nclass Circle {\npublic:\n\tPoint p;\n\tld r;\n\tCircle() : p(Point(0, 0)), r(0) {}\n\tCircle(Point p, ld r) : p(p), r(r) {}\n};\n\n// ccw\n// 1: a,b,c??????????¨???¨?????????????????¶\n//-1: a,b,c???????¨???¨?????????????????¶\n// 2: c,a,b???????????´???????????¶\n//-2: a,b,c???????????´???????????¶\n// 0: a,c,b???????????´???????????¶\nint ccw(const Point& a, const Point &b, const Point &c) {\n\tconst Point nb(b - a);\n\tconst Point nc(c - a);\n\tif (cross(nb, nc) > eps) return 1;   // a,b,c??????????¨???¨?????????????????¶\n\tif (cross(nb, nc) < -eps) return -1; // a,b,c???????¨???¨?????????????????¶\n\tif (dot(nb, nc) < 0) return 2;       // c,a,b???????????´???????????¶\n\tif (norm(nb) < norm(nc)) return -2;  // a,b,c???????????´???????????¶\n\treturn 0;                          // a,c,b???????????´???????????¶\n}\n\n\n/* ???????????? */\n\n// ??´?????¨??´??????????????????\nbool isis_ll(const Line& l, const Line& m) {\n\treturn !eq(cross(l.b - l.a, m.b - m.a), 0);\n}\n\n// ??´?????¨?????????????????????\nbool isis_ls(const Line& l, const Line& s) {\n\treturn isis_ll(l, s) &&\n\t\t(cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\n// ????????¨?????????????????????\nbool isis_ss(const Line& s, const Line& t) {\n\treturn ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n\t\tccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// ????????´????????????\nbool isis_lp(const Line& l, const Point& p) {\n\treturn (abs(cross(l.b - p, l.a - p)) < eps);\n}\n\n// ?????????????????????\nbool isis_sp(const Line& s, const Point& p) {\n\treturn (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);\n}\n\n// ??????????¶?\nPoint proj(const Line &l, const Point& p) {\n\tld t = dot(p - l.a, l.b - l.a) / norm(l.a - l.b);\n\treturn l.a + t * (l.b - l.a);\n}\n\n//???????±??????????????????????\nPoint reflect(const Line &l, const Point &p) {\n\tPoint pr = proj(l, p);\n\treturn pr * 2.l - p;\n}\n\n// ??´?????¨??´????????????\nPoint is_ll(const Line &s, const Line& t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tassert(cross(sv, tv) != 0);\n\treturn s.a + sv * cross(tv, t.a - s.a) / cross(tv, sv);\n}\n// ??´?????¨??´????????????\nvector<Point> is_ll2(const Line &s, const Line& t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tif (cross(sv, tv) != 0)return vector<Point>(1, is_ll(s, t));\n\telse {\n\t\tvector<Point>ans;\n\t\tfor (int k = 0; k < 2; ++k) {\n\t\t\tif (isis_sp(s, t[k]) && find(ans.begin(), ans.end(), t[k]) == ans.end())ans.push_back(t[k]);\n\t\t\tif (isis_sp(t, s[k]) && find(ans.begin(), ans.end(), s[k]) == ans.end())ans.push_back(s[k]);\n\t\t}\n\t\treturn ans;\n\t}\n}\n// ????????¨???????????????\n//???????????£????????¨???????????¨assert(false)\nPoint is_ss(const Line &s, const Line& t) {\n\tif (isis_ss(s, t)) {\n\t\tfor (int k = 0; k < 2; ++k) {\n\t\t\tfor (int l = 0; l < 2; ++l) {\n\t\t\t\tif (s[k] == t[l])return s[k];\n\t\t\t}\n\t\t}\n\t\treturn is_ll(s, t);\n\t}\n\telse {\n\t\t//??????isis_ss?????????\n\t\tassert(false);\n\t\treturn Point(0, 0);\n\t}\n}\n// ????????¨???????????????\nvector<Point> is_ss2(const Line &s, const Line& t) {\n\tvector<Point> kouho(is_ll2(s, t));\n\tvector<Point>ans;\n\tfor (auto p : kouho) {\n\t\tif (isis_sp(s, p) && isis_sp(t, p))ans.emplace_back(p);\n\t}\n\treturn ans;\n}\n// ??´?????¨???????????¢\nld dist_lp(const Line& l, const Point& p) {\n\treturn abs(p - proj(l, p));\n}\n\n//??´?????¨??´???????????¢\nld dist_ll(const Line& l, const Line& m) {\n\treturn isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\n// ??´?????¨??????????????¢\nld dist_ls(const Line& l, const Line& s) {\n\treturn isis_ls(l, s) ? 0 : min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\n// ????????¨???????????¢\nld dist_sp(const Line& s, const Point& p) {\n\tPoint r = proj(s, p);\n\treturn isis_sp(s, r) ? abs(r - p) : min(abs(s.a - p), abs(s.b - p));\n}\n\n// ????????¨??????????????¢\nld dist_ss(const Line& s, const Line& t) {\n\tif (isis_ss(s, t)) return 0;\n\treturn min({ dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b) });\n}\n\n\n//??´?????¨??´?????????????????????????????????\nLine bisection(const Line &s, const Line &t) {\n\tconst Point laglanju(is_ll(s, t));\n\tconst Point avec = !(abs(laglanju - s[0])<eps) ? s[0] - laglanju : s[1] - laglanju;\n\tconst Point bvec = !(abs(laglanju - t[0])<eps) ? t[0] - laglanju : t[1] - laglanju;\n\n\treturn Line(laglanju, laglanju + (abs(bvec)*avec + abs(avec)*bvec) / (abs(avec) + abs(bvec)));\n}\n\n\n//???????????´?????????????????????\n//???????????´??????????????§???????????¨????¢?????????¨?????????\nPoint  inner_center(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tfor (int i = 0; i <static_cast<int>(ls.size()); ++i) {\n\t\tvertics.push_back(is_ll(ls[i], ls[(i + 1) % 3]));\n\t}\n\tif (vertics[0] == vertics[1] || vertics[1] == vertics[2] || vertics[2] == vertics[0])return vertics[0];\n\tLine bi1(bisection(Line(vertics[0], vertics[1]), Line(vertics[0], vertics[2])));\n\tLine bi2(bisection(Line(vertics[1], vertics[2]), Line(vertics[1], vertics[0])));\n\tif (bi1[0] == bi2[0])return bi1[0];\n\telse {\n\t\treturn is_ll(bi1, bi2);\n\t}\n}\n\n//???????????´?????????????????????\n//???????????´??????????????§???????????¨????¢?????????¨?????????\nvector<Point>  ex_center(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tfor (int i = 0; i < static_cast<int>(ls.size()); ++i) {\n\t\tvertics.push_back(is_ll(ls[i], ls[(i + 1) % 3]));\n\t}\n\tif (abs(vertics[0] - vertics[1])<eps || abs(vertics[1] - vertics[2])<eps || (abs(vertics[2] - vertics[0])<eps))return vector<Point>();\n\tvector<Point>ecs;\n\tfor (int i = 0; i < 3; ++i) {\n\t\tLine bi1(bisection(Line(vertics[i], vertics[i] * 2.0l - vertics[(i + 2) % 3]), Line(vertics[i], vertics[(i + 1) % 3])));\n\t\tLine bi2(bisection(Line(vertics[(i + 1) % 3], vertics[(i + 1) % 3] * 2.0l - vertics[(i + 2) % 3]), Line(vertics[(i + 1) % 3], vertics[i])));\n\t\tecs.push_back(is_ll(bi1, bi2));\n\t}\n\treturn ecs;\n}\n\n\n//a,b:??????\n//c:????????§??????\n//???????????´?????????????????¢?????????????±??????????\nvector<Point>  same_dis(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tvertics.push_back(is_ll(ls[0], ls[2]));\n\tvertics.push_back(is_ll(ls[1], ls[2]));\n\n\tif (abs(vertics[0] - vertics[1]) < eps)return vector<Point>{vertics[0]};\n\tLine bis(bisection(ls[0], ls[1]));\n\tvector<Point>ecs;\n\n\tLine abi(bisection(Line(vertics[0], vertics[1]), ls[0]));\n\tecs.push_back(is_ll(bis, abi));\n\n\n\tLine bbi(bisection(Line(vertics[0], 2.l*vertics[0] - vertics[1]), ls[0]));\n\tecs.push_back(is_ll(bis, bbi));\n\n\treturn ecs;\n}\n/* ??? */\n\n// ?????¨????????????\nvector<Point> is_cc(const Circle& c1, const Circle& c2) {\n\tvector<Point> res;\n\tld d = abs(c1.p - c2.p);\n\tld rc = (d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d);\n\tld dfr = c1.r * c1.r - rc * rc;\n\tif (abs(dfr) < eps) dfr = 0.0;\n\telse if (dfr < 0.0) return res; // no intersection\n\tld rs = sqrt(dfr);\n\tPoint diff = (c2.p - c1.p) / d;\n\tres.push_back(c1.p + diff * Point(rc, rs));\n\tif (dfr != 0.0) res.push_back(c1.p + diff * Point(rc, -rs));\n\treturn res;\n}\n\n//???????????????????????????\n/*  0 => out\n1 => on\n2 => in*/\nint is_in_Circle(const Circle &cir, const  Point& p) {\n\tld dis = abs(cir.p - p);\n\tif (dis > cir.r + eps)return 0;\n\telse if (dis < cir.r - eps)return 2;\n\telse return 1;\n}\n//???lc??????rc??????????????????\n/*0 => out\n1 => on\n2 => in*/\nint Circle_in_Circle(const Circle &lc, const  Circle&rc) {\n\tld dis = abs(lc.p - rc.p);\n\tif (dis < rc.r - lc.r - eps)return 2;\n\telse if (dis>rc.r - lc.r + eps)return 0;\n\telse return 1;\n}\n\n// ?????¨??´????????????\nvector<Point> is_lc(const Circle& c, const Line& l) {\n\tvector<Point> res;\n\tld d = dist_lp(l, c.p);\n\tif (d < c.r + eps) {\n\t\tld len = (d > c.r) ? 0.0 : sqrt(c.r * c.r - d * d); //safety;\n\t\tPoint nor = (l.a - l.b) / abs(l.a - l.b);\n\t\tres.push_back(proj(l, c.p) + len * nor);\n\t\tres.push_back(proj(l, c.p) - len * nor);\n\t}\n\treturn res;\n}\n\n// ?????¨??????????????¢\nvector<Point> is_sc(const Circle& c, const Line& l) {\n\tvector<Point> v = is_lc(c, l), res;\n\tfor (Point p : v)\n\t\tif (isis_sp(l, p)) res.push_back(p);\n\treturn res;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cp(const Circle& c, const Point& p) {\n\tvector<Line> ret;\n\tPoint v = c.p - p;\n\tld d = abs(v);\n\tld l = sqrt(norm(v) - c.r * c.r);\n\tif (isnan(l)) { return ret; }\n\tPoint v1 = v * Point(l / d, c.r / d);\n\tPoint v2 = v * Point(l / d, -c.r / d);\n\tret.push_back(Line(p, p + v1));\n\tif (l < eps) return ret;\n\tret.push_back(Line(p, p + v2));\n\treturn ret;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cc(const Circle& c1, const Circle& c2) {\n\tvector<Line> ret;\n\tif (abs(c1.p - c2.p) - (c1.r + c2.r) > -eps) {\n\t\tPoint center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n\t\tret = tangent_cp(c1, center);\n\t}\n\tif (abs(c1.r - c2.r) > eps) {\n\t\tPoint out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n\t\tvector<Line> nret = tangent_cp(c1, out);\n\t\tret.insert(ret.end(), all(nret));\n\t}\n\telse {\n\t\tPoint v = c2.p - c1.p;\n\t\tv /= abs(v);\n\t\tPoint q1 = c1.p + v * Point(0, 1) * c1.r;\n\t\tPoint q2 = c1.p + v * Point(0, -1) * c1.r;\n\t\tret.push_back(Line(q1, q1 + v));\n\t\tret.push_back(Line(q2, q2 + v));\n\t}\n\treturn ret;\n}\n//??????????????????????????¢???\nld two_Circle_area(const Circle&l, const Circle&r) {\n\tld dis = abs(l.p - r.p);\n\tif (dis > l.r + r.r)return 0;\n\telse if (dis + r.r < l.r) {\n\t\treturn r.r*r.r*pi;\n\t}\n\telse if (dis + l.r < r.r) {\n\t\treturn l.r*l.r*pi;\n\t}\n\telse {\n\t\tld ans = (l.r)*(l.r)*acos((dis*dis + l.r*l.r - r.r*r.r) / (2 * dis*l.r)) +\n\t\t\t(r.r)*(r.r)*acos((dis*dis + r.r*r.r - l.r*l.r) / (2 * dis*r.r)) -\n\t\t\tsqrt(4 * dis*dis*l.r*l.r - (dis*dis + l.r*l.r - r.r*r.r)*(dis*dis + l.r*l.r - r.r*r.r)) / 2;\n\t\treturn ans;\n\t}\n\n}\n\n/* ????§???¢ */\n\ntypedef vector<Point> Polygon;\n\n// ??¢???\nld area(const Polygon &p) {\n\tld res = 0;\n\tint n = p.size();\n\trep(j, n) res += cross(p[j], p[(j + 1) % n]);\n\treturn res / 2;\n}\n\n//????§???¢????????¢??????\nbool is_counter_clockwise(const Polygon &poly) {\n\tld angle = 0;\n\tint n = poly.size();\n\trep(i, n) {\n\t\tPoint a = poly[i], b = poly[(i + 1) % n], c = poly[(i + 2) % n];\n\t\tangle += arg((c - b) / (b - a));\n\t}\n\treturn angle > eps;\n}\n\n// ??????????????????\n/*0 => out\n1 => on\n2 => in*/\nint is_in_Polygon(const Polygon &poly, const  Point& p) {\n\tld angle = 0;\n\tint n = poly.size();\n\trep(i, n) {\n\t\tPoint a = poly[i], b = poly[(i + 1) % n];\n\t\tif (isis_sp(Line(a, b), p)) return 1;\n\t\tangle += arg((b - p) / (a - p));\n\t}\n\treturn eq(angle, 0) ? 0 : 2;\n}\n//??????????????????2?????????\nenum { out, on, in };\nint convex_contains(const Polygon &P, const Point &p) {\n\tconst int n = P.size();\n\tPoint g = (P[0] + P[n / 3] + P[2 * n / 3]) / 3.0l; // inner-point\n\tint a = 0, b = n;\n\twhile (a + 1 < b) { // invariant: c is in fan g-P[a]-P[b]\n\t\tint c = (a + b) / 2;\n\t\tif (cross(P[a] - g, P[c] - g) > 0) { // angle < 180 deg\n\t\t\tif (cross(P[a] - g, p - g) > 0 && cross(P[c] - g, p - g) < 0) b = c;\n\t\t\telse                                                  a = c;\n\t\t}\n\t\telse {\n\t\t\tif (cross(P[a] - g, p - g) < 0 && cross(P[c] - g, p - g) > 0) a = c;\n\t\t\telse                                                  b = c;\n\t\t}\n\t}\n\tb %= n;\n\tif (cross(P[a] - p, P[b] - p) < 0) return 0;\n\tif (cross(P[a] - p, P[b] - p) > 0) return 2;\n\treturn 1;\n}\n\n// ??????\n//???????????????????????¨????????????????????§??¨???\nPolygon convex_hull(vector<Point> ps) {\n\tint n = ps.size();\n\tint k = 0;\n\tsort(ps.begin(), ps.end());\n\tPolygon ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++])\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n\n\n//????????????\nvector<Polygon> convex_cut(const Polygon &ps, const Line& l) {\n\tint n = ps.size();\n\tPolygon q;\n\tPolygon r;\n\trep(i, n) {\n\t\tPoint a = ps[i], b = ps[(i + 1) % n];\n\t\tLine m = Line(a, b);\n\t\tif (ccw(l.a, l.b, a) != -1) q.push_back(a);\n\t\tif (ccw(l.a, l.b, a) != 1) r.push_back(a);\n\t\tif (ccw(l.a, l.b, a) * ccw(l.a, l.b, b) < 0 && isis_ll(l, m)) {\n\t\t\tq.push_back(is_ll(l, m));\n\t\t\tr.push_back(is_ll(l, m));\n\t\t}\n\t}\n\tconst vector<Polygon>polys{ q,r };\n\treturn polys;\n}\n\n\n/* ??¢??¬??????????????? */\nvoid add_Point(vector<Point> &ps, const Point p) {\n\tfor (Point q : ps) if (abs(q - p) < eps) return;\n\tps.push_back(p);\n}\n\ntypedef int Weight;\nstruct edge {\n\tint src, dst;\n\tWeight weight;\n\tedge(int src, int dst, Weight weight) :\n\t\tsrc(src), dst(dst), weight(weight) { }\n};\n\ntypedef vector<edge> edges;\ntypedef vector<edges> graph;\n\nvoid add_edge(graph &g, const int from, const int to, const Weight& weight) {\n\tg[from].push_back(edge{ from, to, weight });\n}\n\ngraph segment_arrangement(const vector<Line> &s, const vector<Point> &p) {\n\tint n = p.size(), m = s.size();\n\tgraph g(n);\n\trep(i, m) {\n\t\tvector<pair<ld, int>> vec;\n\t\trep(j, n) if (isis_sp(s[i], p[j]))\n\t\t\tvec.emplace_back(abs(s[i].a - p[j]), j);\n\t\tsort(all(vec));\n\t\trep(j, vec.size() - 1) {\n\t\t\tint from = vec[j].second, to = vec[j + 1].second;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(abs(p[from] - p[to])));\n\t\t}\n\t}\n\treturn g;\n}\ngraph sennbunn_arrangement(const vector<Line>&s) {\n\tvector<Point>crss;\n\tfor (int i = 0; i < static_cast<int>(s.size()); ++i) {\n\t\tfor (int j = i + 1; j < static_cast<int>(s.size()); ++j) {\n\t\t\tif (isis_ss(s[i], s[j])) {\n\t\t\t\tcrss.push_back(is_ll2(s[i], s[j])[0]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i <static_cast<int>(s.size()); ++i) {\n\t\tcrss.push_back(s[i][0]);\n\t\tcrss.push_back(s[i][1]);\n\t}\n\treturn segment_arrangement(s, crss);\n}\n\ngraph Circle_arrangement(const vector<Circle> &c, const vector<Point> &p) {\n\tint n = p.size(), m = c.size();\n\tgraph g(n);\n\trep(i, m) {\n\t\tvector<pair<ld, int>> vec;\n\t\trep(j, n) if (abs(abs(c[i].p - p[j]) - c[i].r) < eps)\n\t\t\tvec.emplace_back(arg(c[i].p - p[j]), j);\n\t\tsort(all(vec));\n\t\trep(j, vec.size() - 1) {\n\t\t\tint from = vec[j].second, to = vec[j + 1].second;\n\t\t\tld angle = vec[j + 1].first - vec[j].first;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(angle * c[i].r));\n\t\t}\n\t\tif (vec.size() >= 2) {\n\t\t\tint from = vec.back().second, to = vec.front().first;\n\t\t\tld angle = vec.front().first - vec.back().first;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(angle * c[i].r));\n\t\t}\n\t}\n\treturn g;\n}\n\nint main() {\n\tint Q; cin >> Q;\n\tcout << setprecision(10) << fixed;\n\twhile (Q--) {\n\t\tLine l0(input_Point(), input_Point());\n\t\tLine l1(input_Point(), input_Point());\n\t\tauto a(is_ll2(l0, l1));\n\t\tif (a.empty())cout << 2 << endl;\n\t\telse {\n\t\t\tif (abs(dot(l0[1] - l0[0], l1[0] - l1[1])) < eps)cout << 1 << endl;\n\t\t\telse cout << 0 << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n\nusing namespace std;\n\n\nint x0,x1,x2,x3,x4,y0,y1,y2,y3;\nint n;\n\n\nint solve(int ax,int ay,int bx,int by,int cx,int cy,int dx,int dy){\n    int a1=ax-bx, b1=ay-by,a2=cx-dx,b2=cy-dy;\n    double naiseki,gaiseki;\n    gaiseki = a1*b2-b1*a2;\n    naiseki = a1*a2 + b1*b2;\n    if(naiseki == 0 ) return 1;\n    if(gaiseki == 0) return 2;\n    return 0;\n}\n\nint main(){\n    cin>>n;\n\n    for(int i=0;i<n;i++){\n        cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\n        cout<<solve(x0,y0,x1,y1,x2,y2,x3,y3)<<endl;\n    \n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nconst double EPS =  1e-10;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y){}\n\n    Point operator + (Point p){\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator - (Point p){\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator * (Point p){\n        return Point(x * p.x, y * p.y);\n    }\n    Point operator / (Point p){\n        return Point(x / p.x, y / p.y);\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n    double norm(){\n        return x * x + y * y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n    \n    \n};\n\n\n\ntypedef Point Vector;\n\nclass Segment : public Point{\n    public:\n    Point p1, p2;\n    Segment(double a, double b, double c, double d){\n        Point(a, b);\n        Point(c, d);\n    }\n    \n};\n\ntypedef Segment Line;\n\ndouble dot(Point a, Point b){\n    return a.x * b.x + a.y * b.y;\n}\ndouble cross(Point a, Point b){\n    return a.x * b.y - a.y * b.x;\n}\nbool isOrthogonal(Point a, Point b){\n    return equals(dot(a, b), 0.0);\n}\nbool isParallel(Point a, Point b){\n    return equals(cross(a, b), 0.0);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s1.p1), 0.0);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s1.p1), 0.0);\n}\n\nint main(void){\n    int n;\n    std::cin >> n;\n    std::vector<Vector> v(2);\n    int x1, x2, y1, y2;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < 2; j++){\n            std::cin >> x1 >> y1 >> x2 >> y2;\n            v[j] = Vector(x1 - x2, y1 - y2);\n        }\n    \n        if(isParallel(v[0], v[1])){\n            std::cout << 2 << std::endl;\n        }else if(isOrthogonal(v[0], v[1])){\n            std::cout << 1 << std::endl;\n        }else{\n            std::cout << 0 << std::endl;\n        }\n    }\n\n\n\n    return 0;\n    \n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-12;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double cost = dot(p[1] - p[0], p[3] - p[2]) / (abs(p[1] - p[0]) * abs(p[3] - p[2]));\n        if(fabs(cost) < EPS) cout << 1 << endl;\n        else if(fabs(cost) > 1 - EPS) cout << 2 << endl;\n        else cout << 0 << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef DEBUG_MODE\n#define DBG(n) n;\n#else\n#define DBG(n) ;\n#endif\n#define REP(i,n) for(ll (i) = (0);(i) < (n);++i)\n#define rep(i,s,g) for(ll (i) = (s);(i) < (g);++i)\n#define rrep(i,s,g) for(ll (i) = (s);i >= (g);--(i))\n#define PB push_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SHOW1d(v,n) {for(int WWW = 0;WWW < (n);WWW++)cerr << v[WWW] << ' ';cerr << endl << endl;}\n#define SHOW2d(v,i,j) {for(int aaa = 0;aaa < i;aaa++){for(int bbb = 0;bbb < j;bbb++)cerr << v[aaa][bbb] << ' ';cerr << endl;}cerr << endl;}\n#define ALL(v) v.begin(),v.end()\n#define Decimal fixed<<setprecision(20)\n#define INF 1000000000\n#define LLINF 1000000000000000000LL\n#define MOD 1000000007\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\n\nconst double EPS = 1e-12;\nconst double PI = acos(-1.0);\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n\t\n\tbool operator == (const point& a,const point& b) {\n\t\treturn (abs(a.real() - b.real()) < EPS && abs(a.imag() - b.imag()) < EPS);\n\t}\n}\nstruct circle {\n\tpoint p; double r;\n\tcircle(){}\n\tcircle(const point &p, double r) : p(p), r(r) { }\n};\nstruct segment : public vector<point> {\n\tsegment(const point &a, const point &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\n\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\n\n/*\na → b で時計方向に折れて b → c\na → b で半時計方向に折れて b → c\na → b で逆を向いて a を通り越して b → c\na → b でそのまま b → c\na → b で逆を向いて b → c ( または b == c )\n*/\n\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;       // counter clockwise\n\tif (cross(b, c) < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const segment &l, const segment &m) {\n\treturn abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n\t\tabs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const segment &l, const segment &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])*       // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const segment &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSP(const segment &s, const point &p) {\n\treturn abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; // triangle inequality\n}\n//端点の交差も考える\nbool intersectSS(const segment &s, const segment &t) {\n\tif(intersectSP(s,t[0]) || intersectSP(s,t[1]) || intersectSP(t,s[0]) || intersectSP(t,s[1]))return true;\n\treturn ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) <= 0;\n}\n\npoint projection(const segment &l, const point &p) {\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + t*(l[0] - l[1]);\n}\npoint reflection(const segment &l, const point &p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\ndouble distanceLP(const segment &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const segment &l, const segment &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const segment &l, const segment &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const segment &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const segment &s, const segment &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const point &a,const point &b){\n\treturn abs(a-b);\n}\n\n//交点\npoint crosspoint(const segment &l, const segment &m) {\n\tif(!intersectSS(l,m))return point(INF,INF);\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return point(INF,INF); // same line\n\tif (abs(A) < EPS) return point(INF,INF); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n/*多角形内包判定\nOUT:0\nON:1\nIN:2\n*/\n#define curr(PP, i) PP[i]\n#define next(PP, i) PP[(i+1)%PP.size()]\nint contains(const vector<point>& Poly, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < Poly.size(); ++i) {\n\t\tpoint a = curr(Poly, i) - p, b = next(Poly, i) - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) <= 0 && 0 < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n//見えるか(可視グラフ用) \nbool block_off(const point &a, const point &b, const vector<point> &obj) {\n  point m = (a+b)/2.0;\n  bool on = false, in = false;\n  for (int j = 0; j < obj.size(); ++j) {\n    point c = curr(obj,j), d = next(obj,j);\n    if (imag(d) < imag(c)) swap(c, d);\n    if (cross(a-c,b-c) * cross(a-d,b-d) < 0 &&    // strictly intersect.\n        cross(c-a,d-a) * cross(c-b,d-b) < 0) return true;\n    if (cross(a-c,b-c) == 0 && dot(a-c,b-c) < 0) return true;\n    if (imag(c) <= imag(m) && imag(m) < imag(d))  // strictly contain.\n      if (cross(c-m,d-m) < 0) in = !in;\n    if (cross(c-m,d-m) == 0 && dot(c-m,d-m) <= 0) on = true;\n  }\n  return !on && in;\n}\n\n//面積\ndouble area(const vector<point>& p) {\n\tdouble A = 0;\n\tfor (int i = 0; i < p.size(); ++i)\n\t\tA += cross(curr(p, i), next(p, i));\n\treturn A / 2.;\n}\n\n//角度足し算\ndouble add_rad(double a,double b){\n\tdouble ret = a + b;\n\tif(ret > PI)ret -= 2 * PI;\n\treturn ret;\n}\n\n//なす角(vector)\ndouble angle(const point &a,const point &b) {\n\tauto tmp = abs(arg(a) - arg(b));\n\treturn min(tmp, 2 * PI - tmp);\n}\n\ndouble angle(const segment &s1,const segment &s2) {\n\treturn angle(s1[1] - s1[0], s2[1] - s2[0]);\n}\n\n//点の回転\npoint rotate(const point &p, double rad) {\n\tdouble X = p.real() * cos(rad) - p.imag() * sin(rad);\n\tdouble Y = p.imag() * cos(rad) + p.real() * sin(rad);\n\treturn point(X, Y);\n}\n\n//並行\nbool isParallel(const point &a, const point &b){\n    return abs(cross(a,b)) < EPS;\n}\nbool isParallel(const segment &a, const segment &b){\n    return isParallel(a[1]-a[0], b[1]-b[0]);\n}\n//直行\nbool isOrthogonal(const point &a,const point &b){\n\treturn abs(angle(A,B) - PI / 2) < EPS;\n}\nbool isOrthogonal(const segment &a,const segment &b){\n\treturn isOrthogonal(a[1]-a[0],b[1]-b[0]);\n}\nint main() {\n\tint q;cin >> q;\n\tREP(i,q){\n\t\tint a,b,c,d;cin >> a >> b >> c >> d;\n\t\tsegment A = segment(point(a,b),point(c,d));\n\t\tcin >> a >> b >> c >> d;\n\t\tsegment B = segment(point(a,b),point(c,d));\n\t\tif(isParallel(A,B)){\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse if(isOrthogonal(A,B)){\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse{\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\t\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nstruct CWW{\n    CWW(){\n        cin.tie(0);\n        ios_base::sync_with_stdio(0);\n        cout<<fixed<<setprecision(15);\n    }\n}STAR;\n\nusing D=double;\n\nconst D EPS=1e-8;\nconst D INF=1e9;\n\nconst int COUNTER_CLOCKWISE=1;\nconst int CLOCKWISE=-1;\nconst int ONLINE_FRONT=2;\nconst int ONLINE_BACK=-2;\nconst int ON_SEGMENT=0;\n\nusing Point=complex<D>;\n\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Line{\n    Point p1,p2;\n    Line(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Circle{\n    Point c;\n    D r;\n    Circle(const Point &c=Point(),const D &r=0.0):c(c),r(r){}\n};\n\nusing Polygon=vector<Point>;\n\n#define EQ(a,b) (abs((a)-(b))<EPS)\n\nistream& operator>>(istream &is,Point &a){\n    D x,y;\n    is>>x>>y;\n    a=Point(x,y);\n    return is;\n}\n\nostream& operator<<(ostream& os,const Point &a){\n    os<<real(a)<<\" \"<<imag(a);\n    return os;\n}\n\nistream& operator>>(istream &is,Line &l){\n    Point p1,p2;\n    is>>p1>>p2;\n    l=Line(p1,p2);\n    return is;\n}\n\n\n\nD dot(const Point &a,const Point &b){\n    return real(a)*real(b)+imag(a)*imag(b);\n}\n\nD cross(const Point &a,const Point &b){\n    return real(a)*imag(b)-imag(a)*real(b);\n}\n\nPoint projection(const Point &a,const Point &b){\n    return a*real(b/a);\n}\n\nPoint projection(const Line &l,const Point &a){\n    return l.p1+projection(l.p2-l.p1,a-l.p1);\n}\n\nPoint reflection(const Line &l,const Point &a){\n    Point p=projection(l,a);\n    return 2.0*p-a;\n}\n\nint ccw(Point a,Point b,Point c){\n    b-=a;c-=a;\n    if(cross(b,c)>EPS)return COUNTER_CLOCKWISE;\n    if(cross(b,c)<-EPS)return CLOCKWISE;\n    if(dot(b,c)<-EPS)return ONLINE_BACK;\n    if(norm(b)+EPS<norm(c))return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool isOrthogonal(const Point &a,const Point &b){\n    return EQ(dot(a,b),0.0);\n}\n\nbool isOrthogonal(const Point &a1,const Point &a2,const Point &b1,const Point &b2){\n    return isOrthogonal(a2-a1,b2-b1);\n}\n\nbool isOrthogonal(const Line &l,const Line &m){\n    return isOrthogonal(l.p1,l.p2,m.p1,m.p2);\n}\n\nbool isParallel(const Point &a,const Point &b){\n    return EQ(cross(a,b),0.0);\n}\n\nbool isParallel(const Point &a1,const Point &a2,const Point &b1,const Point &b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(const Line &l,const Line &m){\n    return isParallel(l.p1,l.p2,m.p1,m.p2);\n}\n\n\nint main(){\n    int Q;cin>>Q;\n    while(Q--){\n        Line l,m;\n        cin>>l>>m;\n        if(isOrthogonal(l,m))cout<<1<<endl;\n        else if(isParallel(l,m))cout<<2<<endl;\n        else cout<<0<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "/**\n * \n */\n\n// #include {{{\n#include <algorithm>\n#include <array>\n#include <bitset>\n#include <cassert>\n#include <cfloat>\n#include <cmath>\n#include <cstdint>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <deque>\n#include <forward_list>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <iterator>\n#include <limits>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <random>\n#include <set>\n#include <stack>\n#include <string>\n#include <tuple>\n#include <type_traits>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>\n#include <vector>\n\n#ifdef DEBUG\n#include <fmt/format.h>\n#endif\n\nusing namespace std;\n// }}}\n\n// type {{{\nusing  s8 =   int8_t;\nusing  u8 =  uint8_t;\nusing s16 =  int16_t;\nusing u16 = uint16_t;\nusing s32 =  int32_t;\nusing u32 = uint32_t;\nusing s64 =  int64_t;\nusing u64 = uint64_t;\n\ntemplate<typename T>\nusing max_heap = priority_queue<T, vector<T>, less<T>>;\ntemplate<typename T>\nusing min_heap = priority_queue<T, vector<T>, greater<T>>;\n// }}}\n\n// ???????????´\n//#define int s64\nconstexpr bool IOS_SYNCSTDIO = false;\nconstexpr int  IOS_PREC      = 10;\n\nconstexpr int    INF = numeric_limits<int>::max();\nconstexpr double EPS = 1e-9;\n\n// util {{{\ntemplate<typename T>\nconstexpr bool is_odd(T x)\n{\n    return x % 2 == 1;\n}\n\ntemplate<typename T>\nconstexpr bool is_even(T x)\n{\n    return x % 2 == 0;\n}\n\ntemplate<typename T>\nconstexpr int cmp(T x, T y)\n{\n    return (x > y) - (x < y);\n}\n\ntemplate<typename T>\nconstexpr int sgn(T x)\n{\n    return cmp(x, T(0));\n}\n\ntemplate<typename T>\nconstexpr typename enable_if<is_signed<T>::value,T>::type modulo(T a, T b)\n{\n    assert(b > 0);\n    T r = a % b;\n    return r >= 0 ? r : r+b;\n}\n\ntemplate<typename T>\nconstexpr T clamp(T x, T lo, T hi)\n{\n    assert(lo <= hi);\n    if(x < lo)\n        return lo;\n    else if(x > hi)\n        return hi;\n    else\n        return x;\n}\n\nint sqrti(int x)\n{\n    assert(x >= 0);\n    return static_cast<int>(sqrt(x));\n}\n\ns64 sqrtl(s64 x)\n{\n    assert(x >= 0);\n    return static_cast<s64>(sqrtl(x));\n}\n\ntemplate<typename T>\nbool chmax(T& xmax, const T& x)\n{\n    if(x > xmax) {\n        xmax = x;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ntemplate<typename T>\nbool chmin(T& xmin, const T& x)\n{\n    if(x < xmin) {\n        xmin = x;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ntemplate<typename T>\nconstexpr int SIZE(const T& c)\n{\n    return static_cast<int>(c.size());\n}\n\ntemplate<typename T, size_t N>\nconstexpr int SIZE(const T (&)[N])\n{\n    return static_cast<int>(N);\n}\n\nostream& FPRINT(ostream& out) { return out; }\n\ntemplate<typename T, typename... TS>\nostream& FPRINT(ostream& out, const T& x, const TS& ...args)\n{\n    out << x;\n    if(sizeof...(args))\n        out << ' ';\n    return FPRINT(out, args...);\n}\n\ntemplate<typename... TS>\nostream& FPRINTLN(ostream& out, const TS& ...args)\n{\n    FPRINT(out, args...);\n    return out << '\\n';\n}\n\ntemplate<typename InputIt>\nostream& FPRINTSEQ(ostream& out, InputIt first, InputIt last)\n{\n    for(InputIt it = first; it != last; ++it) {\n        if(it != first) out << ' ';\n        out << *it;\n    }\n    return out;\n}\n\ntemplate<typename T, size_t N>\nostream& FPRINTARRAY1(ostream& out, const T (&c)[N])\n{\n    return FPRINTSEQ(out, cbegin(c), cend(c));\n}\n\ntemplate<typename T, size_t N1, size_t N2>\nostream& FPRINTARRAY2(ostream& out, const T (&c)[N1][N2])\n{\n    out << '\\n';\n    for(const auto& e : c) {\n        FPRINTARRAY1(out, e) << '\\n';\n    }\n    return out;\n}\n\ntemplate<typename... TS>\nostream& PRINT(const TS& ...args)\n{\n    return FPRINT(cout, args...);\n}\n\ntemplate<typename... TS>\nostream& PRINTLN(const TS& ...args)\n{\n    return FPRINTLN(cout, args...);\n}\n\ntemplate<typename InputIt>\nostream& PRINTSEQ(InputIt first, InputIt last)\n{\n    return FPRINTSEQ(cout, first, last);\n}\n\ntemplate<typename T, size_t N>\nostream& PRINTARRAY1(const T (&c)[N])\n{\n    return FPRINTARRAY1(cout, c);\n}\n\ntemplate<typename T, size_t N1, size_t N2>\nostream& PRINTARRAY2(const T (&c)[N1][N2])\n{\n    return FPRINTARRAY2(cout, c);\n}\n\ntemplate<typename... TS>\nostream& DPRINT(const TS& ...args)\n{\n    return FPRINT(cerr, args...);\n}\n\ntemplate<typename... TS>\nostream& DPRINTLN(const TS& ...args)\n{\n    return FPRINTLN(cerr, args...);\n}\n\ntemplate<typename InputIt>\nostream& DPRINTSEQ(InputIt first, InputIt last)\n{\n    return FPRINTSEQ(cerr, first, last);\n}\n\ntemplate<typename T, size_t N>\nostream& DPRINTARRAY1(const T (&c)[N])\n{\n    return FPRINTARRAY1(cerr, c);\n}\n\ntemplate<typename T, size_t N1, size_t N2>\nostream& DPRINTARRAY2(const T (&c)[N1][N2])\n{\n    return FPRINTARRAY2(cerr, c);\n}\n\ntemplate<typename T1, typename T2>\nostream& operator<<(ostream& out, const pair<T1,T2>& p)\n{\n    return out << '(' << p.first << ',' << p.second << ')';\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const vector<T>& c)\n{\n    return FPRINTSEQ(out, cbegin(c), cend(c));\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const vector<vector<T>>& c)\n{\n    out << '\\n';\n    for(const auto& e : c) {\n        out << e << '\\n';\n    }\n    return out;\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const deque<T>& c)\n{\n    return FPRINTSEQ(out, cbegin(c), cend(c));\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const list<T>& c)\n{\n    return FPRINTSEQ(out, cbegin(c), cend(c));\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const forward_list<T>& c)\n{\n    return FPRINTSEQ(out, cbegin(c), cend(c));\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const set<T>& c)\n{\n    return FPRINTSEQ(out, cbegin(c), cend(c));\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const unordered_set<T>& c)\n{\n    return out << set<T>(cbegin(c), cend(c));\n}\n\ntemplate<typename T, size_t N>\nostream& operator<<(ostream& out, const array<T,N>& c)\n{\n    return FPRINTSEQ(out, cbegin(c), cend(c));\n}\n\ntemplate<typename InputIt>\nostream& FPRINTMAP(ostream& out, InputIt first, InputIt last)\n{\n    out << \"{\\n\";\n    for(auto it = first; it != last; ++it) {\n        out << \"  \" << it->first << \" : \" << it->second << '\\n';\n    }\n    out << \"}\\n\";\n    return out;\n}\n\ntemplate<typename InputIt>\nostream& PRINTMAP(InputIt first, InputIt last)\n{\n    return FPRINTMAP(cout, first, last);\n}\n\ntemplate<typename InputIt>\nostream& DPRINTMAP(InputIt first, InputIt last)\n{\n    return FPRINTMAP(cerr, first, last);\n}\n\ntemplate<typename K, typename V>\nostream& operator<<(ostream& out, const map<K,V>& c)\n{\n    return FPRINTMAP(out, cbegin(c), cend(c));\n}\n\ntemplate<typename K, typename V>\nostream& operator<<(ostream& out, const unordered_map<K,V>& c)\n{\n    return out << map<K,V>(cbegin(c), cend(c));\n}\n\ntemplate<typename T, typename C>\nostream& operator<<(ostream& out, stack<T,C> c)\n{\n    while(!c.empty()) {\n        out << c.top();\n        c.pop();\n        if(!c.empty()) out << ' ';\n    }\n    return out;\n}\n\ntemplate<typename T, typename C>\nostream& operator<<(ostream& out, queue<T,C> c)\n{\n    while(!c.empty()) {\n        out << c.front();\n        c.pop();\n        if(!c.empty()) out << ' ';\n    }\n    return out;\n}\n\ntemplate<typename T, typename Cont, typename Cmp>\nostream& operator<<(ostream& out, priority_queue<T,Cont,Cmp> c)\n{\n    while(!c.empty()) {\n        out << c.top();\n        c.pop();\n        if(!c.empty()) out << ' ';\n    }\n    return out;\n}\n\nstruct pairhash {\n    template<typename T1, typename T2>\n    size_t operator()(const pair<T1,T2>& p) const\n    {\n        size_t ans = 17;\n        ans = 31*ans + hash<T1>()(p.first);\n        ans = 31*ans + hash<T2>()(p.second);\n        return ans;\n    }\n};\n\nstruct IosIni {\n    IosIni()\n    {\n        cin.tie(nullptr);\n        ios::sync_with_stdio(IOS_SYNCSTDIO);\n        cout << fixed << setprecision(IOS_PREC);\n    }\n} IOSINI;\n\n#define FOR(i, start, end) for(int i = (start); i < (end); ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define ALL(f,cc,...) (([&](decltype((cc)) c) { return (f)(begin(c), end(c), ## __VA_ARGS__); })(cc))\n\n#define DBG(x) DPRINTLN('L', __LINE__, ':', #x, ':', (x))\n// }}}\n\nbool equals(double x, double y, double eps=EPS)\n{\n    return fabs(x-y) < eps;\n}\n\nclass Vec2d {\npublic:\n    Vec2d() : x(0.0), y(0.0) {}\n    Vec2d(double xx, double yy) : x(xx), y(yy) {}\n\n    Vec2d& operator+=(const Vec2d& rhs)\n    {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n    Vec2d& operator-=(const Vec2d& rhs)\n    {\n        x -= rhs.x;\n        y -= rhs.y;\n        return *this;\n    }\n    Vec2d& operator*=(double c)\n    {\n        x *= c;\n        y *= c;\n        return *this;\n    }\n    Vec2d& operator/=(double c)\n    {\n        x /= c;\n        y /= c;\n        return *this;\n    }\n\n    double norm() const { return x*x + y*y; }\n    double abs() const { return sqrt(norm()); }\n\n    double x;\n    double y;\n};\n\nbool equals(const Vec2d& lhs, const Vec2d& rhs, double eps=EPS)\n{\n    return equals(lhs.x, rhs.x, eps) && equals(lhs.y, rhs.y, eps);\n}\n\nconst Vec2d operator+(const Vec2d& lhs, const Vec2d& rhs) { return Vec2d(lhs) += rhs; }\nconst Vec2d operator-(const Vec2d& lhs, const Vec2d& rhs) { return Vec2d(lhs) -= rhs; }\nconst Vec2d operator*(const Vec2d& lhs, double rhs) { return Vec2d(lhs) *= rhs; }\nconst Vec2d operator*(double lhs, const Vec2d& rhs) { return Vec2d(rhs) *= lhs; }\nconst Vec2d operator/(const Vec2d& lhs, double rhs) { return Vec2d(lhs) /= rhs; }\n\nostream& operator<<(ostream& out, const Vec2d& v)\n{\n    return out << '(' << v.x << ',' << v.y << ')';\n}\n\ndouble dot(const Vec2d& lhs, const Vec2d& rhs)\n{\n    return lhs.x * rhs.x + lhs.y * rhs.y;\n}\n\ndouble cross(const Vec2d& lhs, const Vec2d& rhs)\n{\n    return lhs.x * rhs.y - lhs.y * rhs.x;\n}\n\nbool is_orthogonal(const Vec2d& a, const Vec2d& b)\n{\n    return equals(dot(a,b), 0.0);\n}\n\nbool is_parallel(const Vec2d& a, const Vec2d& b)\n{\n    return equals(cross(a,b), 0.0);\n}\n\nvoid solve()\n{\n    int Q; cin >> Q;\n\n    REP(_, Q) {\n        int x0, y0; cin >> x0 >> y0;\n        int x1, y1; cin >> x1 >> y1;\n        int x2, y2; cin >> x2 >> y2;\n        int x3, y3; cin >> x3 >> y3;\n\n        Vec2d v0 = Vec2d(x0,y0) - Vec2d(x1,y1);\n        Vec2d v1 = Vec2d(x2,y2) - Vec2d(x3,y3);\n\n        int ans;\n        if(is_parallel(v0,v1))\n            ans = 2;\n        else if(is_orthogonal(v0,v1))\n            ans = 1;\n        else\n            ans = 0;\n        PRINTLN(ans);\n    }\n}\n\nsigned main(signed /*argc*/, char** /*argv*/)\n{\n    \n\n    solve();\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nusing namespace std;\n\nclass Point{\n  public:\n  double x, y;\n\n  Point(double x=0, double y=0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(a*x, a*y); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double abs() {return sqrt(norm()); }\n  double norm() { return x*x+y*y; }\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n\n};\n\n//(?????¢??????)????????????????????¨????§????????????§??????\ntypedef Point Vector;\n\n//???????????????\ntypedef struct Segment{\n  Point p1, p2;\n}Segment;\n\n//??´??????????§??????????\ntypedef Segment Line;\n\n\n//?????????????????????\ndouble dot(Vector a, Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//?????????????????????\ndouble cross(Vector a, Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//??´?????????(????????????????????????0????????´???)\nbool isOrthogonal(Vector a, Vector b){\n  return equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n  return isOrthogonal(a1- a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n  return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n//????????????(??????????????????????????§?????????0????????????)\nbool isParallel(Vector a, Vector b){\n  return equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n  return isParallel(a1- a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n  return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n\n\nint main(){\n  int q;\n  scanf(\" %d\", &q);\n  for(int i=0; i<q; ++i){\n    Segment a,b;\n    scanf(\" %lf %lf %lf %lf %lf %lf %lf %lf\", &a.p1.x, &a.p1.y, &a.p2.x, &a.p2.y, &b.p1.x, &b.p1.y, &b.p2.x, &b.p2.y );\n\n    if(isParallel(a,b)) printf(\"2\\n\");\n    else if(isOrthogonal(a,b)) printf(\"1\\n\");\n    else printf(\"0\\n\");\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n\nint main(){\n  int n;\n  double ax,ay,bx,by,cx,cy,dx,dy;\n  scanf(\"%d\",&n);\n  while(n--){\n    scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&ax,&ay,&bx,&by,&cx,&cy,&dx,&dy);\n    P k=P(bx-ax,by-ay)*P(dx-cx,cy-dy);\n    if(k.imag()==0)printf(\"2\\n\");\n    else if(k.real()==0)printf(\"1\\n\");\n    else printf(\"0\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <complex>\n#include <iostream>\n#include <vector>\n\n// ???, ????????????\ntypedef std::complex<double> Point;\ntypedef Point Vector;\n\nnamespace std {\n\tbool operator < (const Point &a, const Point &b){\n\t\treturn a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n\t}\n\tistream& operator >> (istream &is, Point &a){\n\t\tdouble x, y;\n\t\tis >> x >> y;\n\t\ta = Point(x, y);\n\t\treturn is;\n\t}\n}\n\n// ??´???\nstruct Line {\n\tPoint p1, p2;\n\tLine(){}\n\tLine(const Point &p1, const Point &p2): p1(p1), p2(p2){}\n};\ntypedef Line Segment;\n\nnamespace std {\n\tistream& operator >> (istream &is, Line &a){\n\t\treturn is >> a.p1 >> a.p2;\n\t}\n}\n\n// ???\nstruct Circle {\n\tPoint p; double r;\n\tCircle(){}\n\tCircle(const Point &p, double r): p(p), r(r){}\n};\n\nnamespace std {\n\tistream& operator >> (istream &is, Circle &a){\n\t\treturn is >> a.p >> a.r;\n\t}\n}\n\n// ????§???¢\ntypedef std::vector<Point> Polygon;\n\nconst double EPS = 1e-12;\nconst double INF = 1e12;\nconst double PI = acos(-1.0);\n\n// ????????¨??????????????¢???\nenum CCW {\n\tCOUNTER_CLOCKWISE = 1,\n\tCLOCKWISE = -1,\n\tONLINE_BACK = 2,\n\tONLINE_FRONT = -2,\n\tON_SEGMENT = 0,\n};\n\n// ?????¢????£????????????¢???\nenum {\n\tOUT = 0,\n\tON = 1,\n\tIN = 2,\n};\n\n\n// a ??? 2 ??? (a ^ 2)\ndouble SQ(double a);\n\n// ?????????????????????????????¢??°\nbool EQ(double a, double b);\nbool NEQ(double a, double b);\nbool LT(double a, double b);\nbool GT(double a, double b);\nbool LEQ(double a, double b);\nbool GEQ(double a, double b);\n\n// ??§?????? <=> ?????°?????????\ndouble toDeg(double t);\ndouble toRad(double t);\n\n// ????????? (dot(a, a))\ndouble norm(const Vector &a);\n\n// ??????, ??????\ndouble dot(const Vector &a, const Vector &b);\ndouble cross(const Vector &a, const Vector &b);\n\n// ??´???, ??????\nbool orthogonal(const Segment &s1, const Segment &s2);\nbool parallel(const Segment &s1, const Segment &s2);\n\n// ?°???±, ????°?\nPoint project(const Line &l, const Point &p);\nPoint reflect(const Line &l, const Point &p);\n\n// ?????? (p0, p1) ??¨??? p2 ???????????¢???\nint ccw(const Point &p0, const Point &p1, const Point &p2);\n\n// ????????????\nbool intersectLP(const Line &l, const Point &p);\nbool intersectLL(const Line &l1, const Line &l2);\nbool intersectLS(const Line &l, const Segment &s);\nbool intersectSP(const Segment &s, const Point &p);\nbool intersectSS(const Segment &s1, const Segment &s2);\nint intersectCP(const Circle &c, const Point &p);\nbool intersectCL(const Circle &c, const Line &l);\nint intersectCS(const Circle &c, const Segment &s);\nint intersectCC(const Circle &c1, const Circle &c2);\n\n// ?????¢\ndouble distanceLP(const Line &l, const Point &p);\ndouble distanceLL(const Line &l1, const Line &l2);\ndouble distanceLS(const Line &l, const Segment &s);\ndouble distanceSP(const Segment &s, const Point &p);\ndouble distanceSS(const Segment &s1, const Segment &s2);\ndouble distanceCP(const Circle &c, const Point &p);\ndouble distanceCL(const Circle &c, const Line &l);\ndouble distanceCS(const Circle &c, const Segment &s);\ndouble distanceCC(const Circle &c1, const Circle &c2);\n\n// ??????\nPoint crossPointLL(const Line &l1, const Line &l2);\nPoint crossPointLS(const Line &l, const Segment &s);\nPoint crossPointSS(const Segment &s1, const Segment &s2);\nstd::vector<Point> crossPointCL(const Circle &c, const Line &l);\nstd::vector<Point> crossPointCS(const Circle &c, const Segment &s);\nstd::vector<Point> crossPointCC(const Circle &c1, const Circle &c2);\n\n\ndouble SQ(double a){\n\treturn a * a;\n}\n\nbool EQ(double a, double b){\n\treturn std::abs(a - b) < EPS;\n}\n\nbool NEQ(double a, double b){\n\treturn !EQ(a, b);\n}\n\nbool LT(double a, double b){\n\treturn a - b < -EPS;\n}\n\nbool GT(double a, double b){\n\treturn a - b > EPS;\n}\n\nbool LEQ(double a, double b){\n\treturn !GT(a, b);\n}\n\nbool GEQ(double a, double b){\n\treturn !LT(a, b);\n}\n\ndouble toDeg(double t){\n\treturn t * 180 / PI;\n}\n\ndouble toRad(double t){\n\treturn t / 180 * PI;\n}\n\ndouble norm(const Vector &a){\n\treturn SQ(a.real()) + SQ(a.imag());\n}\n\ndouble dot(const Vector &a, const Vector &b){\n\treturn (conj(a) * b).real();\n}\n\ndouble cross(const Vector &a, const Vector &b){\n\treturn (conj(a) * b).imag();\n}\n\nbool orthogonal(const Segment &s1, const Segment &s2){\n\treturn EQ(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool parallel(const Segment &s1, const Segment &s2){\n\treturn EQ(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// AOJ CGL_1_A\nPoint project(const Line &l, const Point &p){\n\tVector base = l.p2 - l.p1;\n\tdouble r = dot(p - l.p1, base) / norm(base);\n\treturn l.p1 + base * r;\n}\n\n// AOJ CGL_1_B\nPoint reflect(const Line &l, const Point &p){\n\treturn p + (project(l, p) - p) * 2.0;\n}\n\n// AOJ CGL_1_C\nint ccw(const Point &p0, const Point &p1, const Point &p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (GT(cross(a, b), 0.0)) return COUNTER_CLOCKWISE;\n\tif (LT(cross(a, b), 0.0)) return CLOCKWISE;\n\tif (LT(dot(a, b), 0.0)) return ONLINE_BACK;\n\tif (LT(norm(a), norm(b))) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersectLP(const Line &l, const Point &p){\n\treturn ~ccw(l.p1, l.p2, p) & 1;\n\t// ONLINE_BACK or ONLINE_FRONT or ON_SEGMENT\n}\n\nbool intersectLL(const Line &l1, const Line &l2){\n\treturn !parallel(l1, l2);\n}\n\nbool intersectLS(const Line &l, const Segment &s){\n\treturn LEQ(cross(l.p2 - l.p1, s.p1 - l.p1) * cross(l.p2 - l.p1, s.p2 - l.p1), 0.0);\n}\n\nbool intersectSP(const Segment &s, const Point &p){\n\treturn ccw(s.p1, s.p2, p) == ON_SEGMENT;\n}\n\nbool intersectSS(const Segment &s1, const Segment &s2){\n\treturn ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0 &&\n\t\tccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0;\n}\n\nint intersectCP(const Circle &c, const Point &p){\n\tdouble dd = norm(c.p - p);\n\tif (LT(dd, SQ(c.r))) return IN;\n\tif (EQ(dd, SQ(c.r))) return ON;\n\treturn OUT;\n}\n\nbool intersectCL(const Circle &c, const Line &l){\n\tdouble d = distanceLP(l, c.p);\n\treturn LEQ(d, c.r);\n}\n\nint intersectCS(const Circle &c, const Segment &s){\n\tdouble dd1 = norm(c.p - s.p1);\n\tdouble dd2 = norm(c.p - s.p2);\n\tif (LT(dd1, SQ(c.r)) && LT(dd2, SQ(c.r))) return IN;\n\tif (GT(distanceCS(c, s), 0.0)) return OUT;\n\treturn ON;\n}\n\n// c1 ??? c2 ???????????????????????¨??? IN\n// c1 ??? c2 ????????£???????????¨??? ON\n// c1 ??? c2 ?????????????????¨??? OUT\nint intersectCC(const Circle &c1, const Circle &c2){\n\tif (GT(std::abs(c1.p - c2.p), c1.r + c2.r)) return OUT;\n\tif (LT(std::abs(c1.p - c2.p), c2.r)) return IN;\n\tif (LT(std::abs(c1.p - c2.p), c1.r)) return OUT;\n\treturn ON;\n}\n\ndouble distanceLP(const Line &l, const Point &p){\n\treturn std::abs(cross(l.p2 - l.p1, p - l.p1)) / std::abs(l.p2 - l.p1);\n}\n\ndouble distanceLL(const Line &l1, const Line &l2){\n\tif (intersectLL(l1, l2)) return 0.0;\n\treturn distanceLP(l1, l2.p1);\n}\n\ndouble distanceLS(const Line &l, const Segment &s){\n\tif (intersectLS(l, s)) return 0.0;\n\treturn std::min(distanceLP(l, s.p1), distanceLP(l, s.p2));\n}\n\ndouble distanceSP(const Segment &s, const Point &p){\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return std::abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return std::abs(p - s.p2);\n\treturn distanceLP(s, p);\n}\n\ndouble distanceSS(const Segment &s1, const Segment &s2){\n\tif (intersectSS(s1, s2)) return 0.0;\n\treturn std::min(\n\t\tstd::min(\n\t\t\tdistanceSP(s1, s2.p1),\n\t\t\tdistanceSP(s1, s2.p2)\n\t\t),\n\t\tstd::min(\n\t\t\tdistanceSP(s2, s1.p1),\n\t\t\tdistanceSP(s2, s1.p2)\n\t\t)\n\t);\n}\n\ndouble distanceCP(const Circle &c, const Point &p){\n\treturn std::abs(std::abs(c.p - p) - c.r);\n} \n\ndouble distanceCL(const Circle &c, const Line &l){\n\tif (intersectCL(c, l)) return 0.0;\n\treturn distanceLP(l, c.p) - c.r;\n}\n\ndouble distanceCS(const Circle &c, const Segment &s){\n\tif (intersectCS(c, s)) return 0.0;\n\treturn std::min(distanceCP(c, s.p1), distanceCP(c, s.p2));\n}\n\ndouble distanceCC(const Circle &c1, const Circle &c2){\n\tif (intersectCC(c1, c2) == ON) return 0.0;\n\tif (intersectCC(c1, c2) == IN){\n\t\treturn c2.r - (std::abs(c1.p - c2.p) + c1.r);\n\t}\n\tif (intersectCC(c2, c1) == IN){\n\t\treturn c1.r - (std::abs(c1.p - c2.p) + c2.r);\n\t}\n\treturn (c1.r + c2.r) - (c1.r + c2.r);\n}\n\n\n#include <cstdio>\nusing namespace std;\n\nint main()\n{\n\tint q;\n\tcin >> q;\n\twhile (q--){\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tif (parallel(s1, s2)) puts(\"2\");\n\t\telse if (orthogonal(s1, s2)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <set>\n#include <map>\n#include <algorithm>\t// require sort next_permutation count __gcd reverse etc.\n#include <cstdlib>\t// require abs exit atof atoi \n#include <cstdio>\t\t// require scanf printf\n#include <functional>\n#include <numeric>\t// require accumulate\n#include <cmath>\t\t// require fabs\n#include <climits>\n#include <limits>\n#include <cfloat>\n#include <iomanip>\t// require setw\n#include <sstream>\t// require stringstream \n#include <cstring>\t// require memset\n#include <cctype>\t\t// require tolower, toupper\n#include <fstream>\t// require freopen\n#include <ctime>\t\t// require srand\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define ALL(A) A.begin(), A.end()\n#define EPS (1e-10)\n\nusing namespace std;\n\ntemplate<class T>\nstruct point{\n\tT x, y;\n\tpoint &operator+=(const point &a ){ x += a.x; y += a.y; }\n\tpoint &operator-=(const point &a ){ x -= a.x; y -= a.y; }\n\tpoint operator+(const point &a )const{ return (point){x+a.x, y+a.y }; }\n\tpoint operator-(const point &a )const{ return (point){x-a.x, y-a.y }; }\n\toperator point<double>()const{ return (point<double>){x, y }; }\n};\n\ntemplate<class T>\npoint<T> operator*(T c, const point<T> &a ){ return (point<T>){c*a.x, c*a.y }; }\npoint<double> &operator/=(point<double> &a, double c ){ a.x /= c; a.y /= c; return a; }\ntemplate<class T>\npoint<double> operator/(const point<T> &a, double c ){ return (point<double>){ a.x/c, a.y/c }; }\n\ntemplate<class T>\nstruct line{\n\tpoint<T> a, b;\n\toperator line<double>()const{ return (line<double>){a, b}; }\n};\n\n// inner product\ntemplate<class T>\nT dot(const point<T> &a, const point<T> &b ){ return a.x*b.x + a.y*b.y; }\n\n// outer product\ntemplate<class T>\nT cross(const point<T> &a, const point<T> &b ){ return a.x*b.y - a.y*b.x; }\n\n\n/*\n\t2直線の位置関係\n\n\t説明\n\t\t2直線が平行か垂直かまたはそうでないかの判定\n\t引数\n\t\t直線 l1, l2\n\t戻り値\n\t\tl1 // l2 のとき 2\n\t\tl1 ⊥ l2 のとき 1\n\t\tそれ以外 0\n\t制約\n\t\tなし\n\t計算量\n\t\tO(1)\n\t備考\n\n\t\tAOJ - Courses CGL CGL_D_1 Parallel/Orthogonal\n\n*/\nenum{OTHER = 0, ORTHOGONAL = 1, PARALLEL = 2 };\ntemplate<class T>\nint pos_2_line (const line<T> &L1, const line<T> &L2 ){\n\tdouble res = dot (L1.b - L1.a, L2.b - L2.a );\n\n\tif (res < EPS ) return ORTHOGONAL;\n\n\tres = cross (L1.b - L1.a, L2.b - L2.a );\n\n\tif (res < EPS ) return PARALLEL;\n\n\treturn OTHER;\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(0);\n\tint q; cin >> q;\n\trep (i, q ){\n\t\tline<double> l1, l2;\n\t\tcin >> l1.a.x >> l1.a.y >> l1.b.x >> l1.b.y >> l2.a.x >> l2.a.y >> l2.b.x >> l2.b.y;\n\t\n\t\tint res = pos_2_line (l1, l2 );\n\t\tcout << res << endl;\n\t} // end rep\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n\nusing namespace std;\nstatic const double eps = 1e-10;\nbool equals(double a, double b)\n{\n\treturn(fabs(a - b) < eps);\n}\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y){}\n\n\tPoint operator + (Point p){ return(Point(x + p.x, y + p.y)); }\n\tPoint operator - (Point p){ return(Point(x - p.x, y - p.y)); }\n\tPoint operator * (double a){ return(Point(a * x, a * y)); }\n\tPoint operator / (double a){ return(Point(x / a, y / a)); }\n\n\tdouble abs(){ return(sqrt(norm())); }\n\tdouble norm(){ return(x * x + y * y); }\n\n\tbool operator < (const Point& p) const\n\t{\n\t\treturn(x != p.x ? x < p.x : y < p.y);\n\t}\n\n\tbool operator == (const Point& p) const\n\t{\n\t\treturn(fabs(x - p.x) < eps && fabs(y - p.y) < eps);\n\t}\n};\ntypedef Point Vector;\n\nstruct Segment\n{\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r){}\n};\n\ndouble dot(Vector a, Vector b)\n{\n\treturn(a.x * b.x + a.y * b.y);\n}\n\ndouble cross(Vector a, Vector b)\n{\n\treturn(a.x * b.y - a.y * b.x);\n}\n\nPoint project(Segment s, Point p)\n{\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn(s.p1 + base * r);\n}\n\nPoint reflect(Segment s, Point p)\n{\n\treturn(p + (project(s, p) - p) * 2.0);\n}\n\nbool isOrthogonal(Vector a, Vector b)\n{\n\treturn(equals(dot(a, b), 0.0));\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn(isOrthogonal(a1 - a2, b1 - b2));\n}\n\nbool isOrthogonal(Segment s1, Segment s2)\n{\n\treturn(equals(dot(s1.p2 - s2.p1, s2.p2 - s2.p1), 0.0));\n}\n\nbool isParallel(Vector a, Vector b)\n{\n\treturn(equals(cross(a, b), 0.0));\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn(isParallel(a1 - a2, b1 - b2));\n}\n\nbool isParallel(Segment s1, Segment s2)\n{\n\treturn(equals(cross(s1.p1 - s1.p1, s2.p2 - s2.p1), 0.0));\n}\n\nvoid solve()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; ++i)\n\t{\n\t\tPoint p[4];\n\t\tfor (int j = 0; j < 4; ++j)\n\t\t{\n\t\t\tcin >> p[j].x >> p[j].y;\n\t\t}\n\t\tif (isParallel(p[0], p[1], p[2], p[3]))\n\t\t{\n\t\t\tcout << \"2\" << endl;\n\t\t}\n\t\telse if (isOrthogonal(p[0], p[1], p[2], p[3]))\n\t\t{\n\t\t\tcout << \"1\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"0\" << endl;\n\t\t}\n\t}\n}\n\nint main()\n{\n\tsolve();\n\treturn(0);\n}"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\n#define F first\n#define S second\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nbool eq(ld a, ld b){\n\treturn abs(a-b) < EPS;\n}\n\nstruct PT{\n\tld x, y;\n\tPT (ld x = 0, ld y = 0) : x(x), y(y) {}\n\tPT operator + (PT ro) const{\n\t\treturn PT(x+ro.x, y+ro.y);\n\t}\n\tPT operator - (PT ro) const{\n\t\treturn PT(x-ro.x, y-ro.y);\n\t}\n\tPT operator * (ld co) const{\n\t\treturn PT(x*co, y*co);\n\t}\n\tPT operator / (ld co) const{\n\t\treturn PT(x/co, y/co);\n\t}\n\tld operator * (PT ro) const{\n\t\treturn x*ro.x + y*ro.y;\n\t}\n\tld operator ^ (PT ro) const{\n\t\treturn x*ro.y - y*ro.x;\n\t}\n};\n\nistream& operator>> (istream &is, PT &p){\n\tld val;\n\tis >> val;\n\tp.x = val;\n\tis >> val;\n\tp.y = val;\n\treturn is;\n}\n\nPT operator * (ld co, PT p){\n\treturn p*co;\n}\n\nld len(PT a){\n\treturn sqrt(a*a);\n}\n\nPT unit(PT a){\n\treturn a/len(a);\n}\n\nPT perp(PT a){\n\treturn PT(-a.y, a.x);\n}\n\nPT proj(PT a, PT b, PT c){\n\tb = b-a, c = c-a;\n\treturn a + (b*c)/(b*b)*b;\n}\n\nPT reflect(PT a, PT b, PT c){\n\tPT d = c;\n\tb = b-a, c = c-a;\n\treturn d + (c^b)/len(b)*perp(unit(b))*2;\n}\n\nint sgn(PT a, PT b, PT c){\n\tld cr = (b-a)^(c-a);\n\treturn cr > EPS ? 1 : (cr + EPS < 0 ? -1 : 0);\n}\n\nint main(){\n\tfor (int i = in(); i; i--){\n\t\tPT a, b, c, d;\n\t\tcin >> a >> b >> c >> d;\n\t\tb = b-a, d = d-c;\n\t\tif (eq(b^d, 0))\n\t\t\tcout << 2 << endl;\n\t\telse if (eq(b*d, 0))\n\t\t\tcout << 1 << endl;\n\t\telse\n\t\t\tcout << 0 << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "/*\nAoj CGL_2_A\n题意 T组数据 每次给出4个点 p1,p2,p3,p4\np1与p2的向量是p_1\np3与p4的向量是p_2;\n当p_1与p_2平行时输出2，正交输出1，其他输出0\n可以用向量的内积和外积做这题  \n*/\n#include<bits/stdc++.h>\n#define eps (1e-10)\nusing namespace std;\nclass Point\n{\n\tpublic:\n\tdouble x,y;\n\tPoint(double _x=0,double _y=0):x(_x),y(_y){}\n\tPoint operator -(Point p){\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n};\n//判断是否正交 向量内积：a*b=|a||b|*cos(Y) 当cos为0时正交(90,-90垂直) \n//a*b=a.x*b.x+a.y*b.y;\nbool solve1(Point a,Point b)\n{\n\tdouble f=a.x*b.x+a.y*b.y; \n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\n//判断是否平行  向量外积：|a*b|=|a||b|sin(Y) 当sin为0时平行(180,0平行)\n//|a*b|=|a|*|b|*sin(Y) \nbool solve2(Point a,Point b)\n{\n\tdouble f=a.x*b.y-a.y*b.x;\n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\nint main()\n{\n\tint T;scanf(\"%d\",&T);\n\twhile(T--){\n\t\tdouble p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y;\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&p1_x,&p1_y,&p2_x,&p2_y,&p3_x,&p3_y,&p4_x,&p4_y);\n\t\tPoint a1(p1_x,p1_y),a2(p2_x,p2_y),b1(p3_x,p3_y),b2(p4_x,p4_y);\n\t\tif(solve1(a1-a2,b1-b2)) printf(\"1\\n\");\n\t\telse if(solve2(a1-a2,b1-b2)) printf(\"2\\n\");\n\t\telse printf(\"0\\n\");\n\t\t\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define EPS 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#include <cstdio>\n#include <cmath>\n#include <vector>\nusing namespace std;\n\nclass Point\n{\npublic:\n  double x, y;\n  Point (double x = 0, double y = 0) : x(x), y(y) {}\n  Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n  Point operator * (double a) {return Point(a * x, a * y); }\n  Point operator / (double a) {return Point(x / a, y / a); }\n\n  double norm() { return x * x + y * y; }\n  double abs() { return sqrt(norm()); }\n\n  bool operator < (const Point &p) const\n  {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const\n  {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment\n{\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\n// dot and cross product\ndouble dot(Vector a, Vector b)\n{\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n  return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthagonal(Vector a, Vector b)\n{\n  return equals(dot(a, b), 0.0);\n}\n\nbool isOrthagonal(Point a1, Point a2, Point b1, Point b2)\n{\n  return isOrthagonal(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Vector a, Vector b)\n{\n  return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n  return isParallel(a1 - a2, b1 - b2);\n}\n\nint main()\n{\n  int T;\n  scanf(\"%d\", &T);\n  while (T--)\n  {\n    Point p0, p1, p2, p3;\n    scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\", &p0.x, &p0.y, &p1.x, &p1.y, &p2.x, &p2.y, &p3.x, &p3.y);\n    if (isOrthagonal(p0, p1, p2, p3))\n    {\n      printf(\"1\\n\");\n    }\n    else if (isParallel(p0, p1, p2, p3))\n    {\n      printf(\"2\\n\");\n    }\n    else\n    {\n      printf(\"0\\n\");\n    }\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#ifndef _WIN32\n#include<iostream>\n#endif\n\n#include <complex>\n#include <vector>\n#include <utility>\n#include <tuple>\nusing namespace std;\n\n\n#define FOR(i,bg,ed) for(int i = (bg);<(ed);i++)\n#define REP(i,n) FOR(i,0,n)\n#define ALL(v) (v).begin(),(v).end()\n#define fi first\n#define se second\n#define pb push_back\n\n#define IL inline\nnamespace geo{\n\ttypedef double D;\n\ttypedef bool B;\n\ttypedef complex<D> P;\n#define X real()\n#define Y imag()\n\tB comp(const P& l, const P& r)\n\t{\n\t\treturn (l.X == r.X) ? l.Y < r.Y : l.X < r.X;\n\t}\n\ttypedef pair<P, P> L;\n\ttypedef pair<P, P> LS;\n\ttypedef pair<P, D> C;\n\ttypedef vector<P> Poly;\n\tconst D EPS = 1e-8;\n\n\t//Decomposition Macro\n#define DCI(a,b,l) P(a),(b);tie(a,b)=l;\n#define DCc(a,b,c) P(a);D(b);tie(a,b)=c;\n\n\t//A dot B\n\tIL D dot(P a, P b)\n\t{\n\t\treturn a.X*b.X + a.Y*b.Y;\n\t}\n\tIL D cross(P a, P b)\n\t{\n\t\treturn a.X*b.Y - a.Y*b.X;\n\t}\n\tIL D ccw(P a, P b, P c)\n\t{\n\t\treturn cross(b - a, c - a);\n\t}\n\n\tIL int sgn(P a, P b, P c){\n\t\tif (cross(b - a, c - a) > EPS)return 1;\n\t\tif (cross(b - a, c - a) < -EPS)return -1;\n\t\tif (dot(b - a, c - a) < -EPS)return 2;\n\t\tif (dot(a - b, c - b) < -EPS)return -2;\n\t\treturn 0;\n\t}\n\tIL D signed_distance_P_L(P p, L l){\n\t\tDCI(a, b, l);\n\t\treturn cross(b - a, p - a) / abs(b - a);\n\t}\n\tIL D dinstance_P_L(P p, L l){\n\t\treturn abs(signed_distance_P_L(p, l));\n\t}\n\tIL D distance_P_LS(P p, LS ls){\n\t\tDCI(a, b, ls);\n\t\tif (dot(b - a, p - a) < EPS)return abs(p - a);\n\t\tif (dot(a - b, p - b) < EPS)return abs(p - b);\n\t\treturn abs(cross(b - a, p - a)) / abs(b - a);\n\t}\n\n\tIL B is_L_L(L p, L q){\n\t\tDCI(a, b, p);\n\t\tDCI(c, d, q);\n\t\treturn abs(cross(a - b, c - d))>EPS ||\n\t\t\tabs(cross(a - b, d - b)) < EPS; \n\t}\n\tIL B is_LS_LS(LS p, LS q){\n\t\tDCI(a, b, p);\n\t\tDCI(c, d, q);\n\t\treturn sgn(a, b, c) * sgn(a, b, d) <= 0 &&\n\t\t\tsgn(c, d, a) * sgn(c, d, b) <= 0;\n\t}\n}\n\nusing namespace geo;\n\n\nint main()\n{\n\tint n;\n\n\tcin >> n;\n\twhile (n--){\n\t\tD x1, x2, x3, y1, y2, y3, x4, y4;\n\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tP a(x1 - x2, y1 - y2), b(x3 - x4, y3 - y4);\n\n\t\tP p(x1,y1),q(x2,y2),r(x3,y3),s(x4,y4);\n\n\t\tif (dot(a, b) == 0)\n\t\t{\n\t\t\tcout << 1 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\telse if (!is_L_L({ p, q }, {r,s})){\n\t\t\tcout << 2 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\tcout << 0 << endl;\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<bits/stdc++.h>\nusing namespace std;\n\n\n\nconst double PI = asinl(1) * 2;\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < (1e-10) && fabs(y-p.y) < (1e-10);\n  }\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return (fabs((dot(a,b))-(0.0)) < (1e-10));\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return (fabs((dot(s1.p2-s1.p1,s2.p2-s2.p1))-(0.0)) < (1e-10));\n}\n\nbool isParallel(Vector a,Vector b){\n  return (fabs((cross(a,b))-(0.0)) < (1e-10));\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return (fabs((cross(s1.p2-s1.p1,s2.p2-s2.p1))-(0.0)) < (1e-10));\n}\n\nint main(){\n    int n;cin >> n;\n    Point p0,p1,p2,p3;\n    for(int i=0;i<n;i++){\n        cin >> p0.x >> p0.y;\n        cin >> p1.x >> p1.y;\n        cin >> p2.x >> p2.y;\n        cin >> p3.x >> p3.y;\n        Segment s1,s2;\n        s1 = Segment(p0,p1);\n        s2 = Segment(p2,p3);\n        if(isParallel(s1,s2)){\n            cout << 2 << endl;\n        }else if(isOrthogonal(s1,s2)){\n            cout << 1 << endl;\n        }else {\n            cout << 0 << endl;\n        }\n    }\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdlib>\n#include <iostream>\n#include <bitset>\n#include <deque>\n#include <list>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <algorithm>\n#include <iterator>\n#include <string>\n#include <chrono>\n#include <random>\n#include <tuple>\n#include <utility>\n#include <fstream>\n#include <complex>\n\nconst long INF = (1l << 30);\nconst long LINF = (1l << 60);\n\n//geometric library\n//#include <complex>\ntypedef std::complex<double> Com;\n\n//内積\ndouble dot_product(const Com a, const Com b){\n\treturn (conj(a)*b).real();\n}\n//外積\ndouble cross_product(const Com a, const Com b){\n\treturn (conj(a)*b).imag();\n}\n//点と直線の距離\ndouble dist_dot_line(const Com st, const Com en, const Com dt){\n    return std::abs(cross_product(dt-st, en-st) / std::abs(en-st));\n}\n//点と線分の距離\ndouble dist_dot_seg(const Com st, const Com en, const Com dt){\n\tif(dot_product(en-st, dt-st) <= 0){\n\t\treturn std::abs(dt-st);\n\t}else if(dot_product(st-en, dt-en) <= 0){\n\t\treturn std::abs(dt-en);\n\t}else{\n\t\treturn dist_dot_line(st, en, dt);\n\t}\n}\n//線分の交差判定\nbool seg_crossing(const Com st1, const Com en1, const Com st2, const Com en2){\n\tdouble cross1 = cross_product(en1-st1, st2-st1) * cross_product(en1-st1, en2-st1);\n\tdouble cross2 = cross_product(en2-st2, st1-st2) * cross_product(en2-st2, en1-st2);\n\treturn (cross1 <= 0) && (cross2 <= 0);\n}\n//線分と線分の距離\ndouble dist_seg(const Com st1, const Com en1, const Com st2, const Com en2){\n\tif(seg_crossing(st1, en1, st2, en2)){\n\t\treturn 0;\n\t}\n\treturn std::min(std::min(dist_dot_seg(st1, en1, st2), dist_dot_seg(st1, en1, en2)), std::min(dist_dot_seg(st2, en2, st1), dist_dot_seg(st2, en2, en1)));\n}\n\n//線分と線分の垂直判定\nbool is_vertical(const Com st1, const Com en1, const Com st2, const Com en2){\n    if(dot_product(en1-st1, en2-st2) == 0){\n        return true;\n    }else{\n        return false;\n    }\n}\n\n//平行判定\nbool is_parallel(const Com st1, const Com en1, const Com st2, const Com en2){\n    if(cross_product(en1-st1, en2-st2) == 0){\n        return true;\n    }else{\n        return false;\n    }\n}\n\n//直線・線分の交点\nCom cross_point(const Com st1, const Com en1, const Com st2, const Com en2){\n    /* 線分の時はコメントを外した方が良さそう\n    if(dist_seg(st1, en1, st2, en2) > 0 || is_parallel(st1, en1, st2, en2)){\n        printf(\"Error! cross_point invalid input\\n\");\n        std::exit(EXIT_FAILURE);\n    }\n    //*/\n    double den = (real(st1)-real(en1)) * (imag(en2)-imag(st2)) - (real(en2)-real(st2)) * (imag(st1)-imag(en1));\n    double mol = (real(en2)-real(en1)) * (imag(en2)-imag(st2)) - (real(en2)-real(st2)) * (imag(en2)-imag(en1));\n    double s = mol/den;\n    return st1 * s + en1 * (1-s);\n}\n\nvoid solve(){\n    double x[4], y[4];\n    Com p[4];\n    for(int i = 0; i < 4; i++){\n        scanf(\"%lf%lf\", &x[i], &y[i]);\n        p[i] = Com(x[i], y[i]);\n    }\n    if(is_parallel(p[0], p[1], p[2], p[3])){\n        printf(\"2\\n\");\n    }else if(is_vertical(p[0], p[1], p[2], p[3])){\n        printf(\"1\\n\");\n    }else{\n        printf(\"0\\n\");\n    }\n}\n\nlong q;\nint main(){\n    scanf(\"%ld\", &q);\n    for(int i = 0; i < q; i++){\n        solve();\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#ifndef ___GEOMETRY_LIBRARY\n#define ___GEOMETRY_LIBRARY\n\n#include <vector>\n#include <algorithm>\n\ntemplate<class type>\nclass point2d {\npublic:\n\ttype x, y;\n\tpoint2d() : x(type(0)), y(type(0)) {};\n\tpoint2d(type x_, type y_) : x(x_), y(y_) {};\n\tbool operator==(const point2d& p) { return x == p.x && y == p.y; }\n\tbool operator!=(const point2d& p) { return x != p.x || y != p.y; }\n\tpoint2d& operator+=(const point2d& p) { x += p.x; y += p.y; return *this; }\n\tpoint2d& operator-=(const point2d& p) { x -= p.x; y -= p.y; return *this; }\n\tpoint2d& operator*=(type val) { x *= val; y *= val; return *this; }\n\tpoint2d& operator/=(type val) { x /= val; y /= val; return *this; }\n\tpoint2d operator+(const point2d& p) const { return point2d(*this) += p; }\n\tpoint2d operator-(const point2d& p) const { return point2d(*this) -= p; }\n\tpoint2d operator*(type val) const { return point2d(*this) *= val; }\n\tpoint2d operator/(type val) const { return point2d(*this) /= val; }\n\ttype norm() const { return x * x + y * y; }\n\ttype abs() const { return type(std::sqrt(x * x + y * y)); }\n\tlong double fabs() const { return std::sqrt((long double)(x * x + y * y)); }\n\ttype dot(const point2d& p) const { return x * p.x + y * p.y; }\n\ttype cross(const point2d& p) const { return x * p.y - y * p.x; }\n\tint ccw(const point2d& p1, const point2d& p2) const {\n\t\t// Centering at point p, p1 -> p2 is COUNTER-CLOCKWISE : (1)\n\t\t// Centering at point p, p1 -> p2 is CLOCKWISE : (-1)\n\t\t// Collinear with order p1 -> p -> p2 : (2)\n\t\t// Collinear with order p -> p1 -> p2 : (-2)\n\t\t// Collinear with order p -> p2 -> p1 : (0)\n\t\tpoint2d pr1 = p1 - point2d(*this);\n\t\tpoint2d pr2 = p2 - point2d(*this);\n\t\tif (pr1.cross(pr2) != 0) return pr1.cross(pr2) > 0 ? 1 : -1;\n\t\tif (pr1.dot(pr2) < 0) return 2;\n\t\treturn pr1.norm() < pr2.norm() ? -2 : 0;\n\t}\n};\n\ntemplate<class type>\nclass segment2d {\npublic:\n\tpoint2d<type> p1, p2;\n\tsegment2d() : p1(point2d<type>()), p2(point2d<type>()) {};\n\tsegment2d(const point2d<type>& p1_, const point2d<type>& p2_) : p1(p1_), p2(p2_) {};\n\ttype norm() const { return (p1 - p2).norm(); }\n\ttype abs() const { return (p1 - p2).abs(); }\n\tlong double fabs() const { return (p1 - p2).fabs(); }\n};\n\n#endif // ___GEOMETRY_LIBRARY\n\n#include <iostream>\nusing namespace std;\nint main() {\n\tcin.tie(0);\n\tios_base::sync_with_stdio(false);\n\tint q;\n\tcin >> q;\n\tcout.precision(15);\n\tfor (int i = 0; i < q; ++i) {\n\t\tsegment2d<double> s1, s2;\n\t\tcin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n\t\tif ((s1.p2 - s1.p1).cross(s2.p2 - s2.p1) == 0) cout << \"2\\n\";\n\t\telse if ((s1.p2 - s1.p1).dot(s2.p2 - s2.p1) == 0) cout << \"1\\n\";\n\t\telse cout << \"0\\n\";\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>//幾何\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nstruct point{\n    double x,y;\n    \n    point(double x=0,double y=0):x(x),y(y){}\n\n    point operator + (point p){return point(x+p.x,y+p.y);}\n    point operator - (point p){return point(x-p.x,y-p.y);}\n    point operator * (point p){return point(x*p.x,y*p.y);}\n    point operator / (point p){return point(x/p.x,y/p.y);}\n\n    double abs(){return sqrt(norm());}\n    double norm(){return x*x+y*y;}\n\n    bool operator<(const point &p) const{\n        return equals(x,p.x)?(y<p.y):(x<p.x);\n    }\n\n    bool operator==(const point &p) const{\n        return equals(x,p.x)&&equals(y,p.y);\n    }\n};\ndouble dot(point a,point b){\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(point a,point b){\n    return a.x*b.y-a.y*b.x;\n}\nbool isOrthogonal(point a,point b){\n    return equals(dot(a,b),(0,0));\n}\nbool isOrthogonal(point a1,point a2,point b1,point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isParallel(point a,point b){\n    return equals(cross(a,b),0.0);\n}\nbool isParallel(point a1,point a2,point b1,point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nint main(){\n    int q;\n    cin>>q;\n    for(int i=0;i<q;i++){\n        int x1,y1,x2,y2,x3,y3,x4,y4;\n        cin>>x1>>y1>>x2>>y2>>x3>>y3>>x4>>y4;\n        point p0(x1,y1),p1(x2,y2),p2(x3,y3),p3(x4,y4);\n        if(isOrthogonal(p0,p1,p2,p3)){\n            cout<<\"1\\n\";\n        }else if(isParallel(p0,p1,p2,p3)){\n            cout<<\"2\\n\";\n        }else{\n            cout<<\"0\\n\";\n        }\n    }\n    return(0);\n}\n"
  },
  {
    "language": "C++",
    "code": "// Code by ajcxsu\n// Geometry template\n\n#include<bits/stdc++.h>\n#define EPS (1e-9)\nusing namespace std;\n\nstruct Point {\n    double x,y;\n    Point(double x=0,double y=0):x(x), y(y) {}\n\n    Point operator +(Point p) { return Point(x+p.x,y+p.y); }\n    Point operator -(Point p) { return Point(x-p.x,y-p.y); } // 加减\n    Point operator *(double a) { return Point(x*a,y*a); }\n    Point operator /(double a) { return Point(x/a,y/a); } // 数乘\n\n    double norm() { return x*x+y*y; } // 范数\n    double abs() { return sqrt(norm()); } // 大小\n\n    bool operator < (const Point &p) { return x!=p.x?x<p.x:y<p.y; }\n    bool operator == (const Point &p) { return fabs(p.x-x) < EPS && fabs(p.y-y) < EPS; }\n} ;\ntypedef Point Vector;\n\ndouble dot(const Point &a, const Point &b) {\n    return a.x*b.x+a.y*b.y;\n} // 内积\ndouble cross(const Point &a, const Point &b) {\n    return a.x*b.y-a.y*b.x;\n} // 外积\nbool equals(double a, double b) { return fabs(a-b)<EPS; } // 误差相等\n\nstruct Line {\n    Point p1,p2;\n} ;\ntypedef Line Seg;\n\n/* 1 正交 2 平行 0 其他 */\nint PO(Vector a, Vector b) {\n    if(equals(dot(a,b), 0)) return 1;\n    else if(equals(cross(a,b), 0)) return 2;\n    else return 0;\n}\nint PO(Line a, Line b) { // 正交、平行判定\n    return PO(a.p2-a.p1, b.p2-b.p1);\n}\n\nistream& operator >>(istream &in, Vector &a) {\n    in>>a.x>>a.y;\n    return in;\n}\nistream& operator >>(istream &in, Line &a) {\n    in>>a.p1>>a.p2;\n    return in;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    int q;\n    cin>>q;\n    while(q--) {\n        Seg a,b;\n        cin>>a>>b;\n        cout<<PO(a,b)<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long unsigned int ll;\n\n// 参考サイト\n// 前原 貴憲\n// http://www.prefield.com/algorithm/index.html\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> Point; //複素数で平面定義\ntypedef Point P;\n\n// system // {{{\n// オペレーター< を定義、後々楽\nnamespace std{\n    bool operator < ( const P& a, const P& b) {\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n}\n\n// 外積\ndouble cross( const P& a, const P& b ){\n    return imag(conj(a)*b);\n}\n// 内積\ndouble dot( const P& a, const P& b ){\n    return real(conj(a)*b);\n}\n// }}}\n// Line L vector<P> PolyGon G vector<P> Circle C(P,int rad) // {{{\n// 直線 Line\n// 線分 Segment\nstruct L : public vector<P> {\n    L(const P &a, const P &b ){\n        push_back(a); push_back(b);\n    }\n};\n\n// 単純多角形 PolyGon\ntypedef vector<P> G;\n\n// 円 cirlce\nstruct C {\n    P p; double r;\n    C(const P &p, double r ) : p(p), r(r) {}\n};\n// }}}\n// counter clockwise // {{{\n//\nint ccw( P a, P b, P c ){\n    b -= a; c -= a;\n    if( cross(b,c) > 0 )   return +1; //counter clockwise\n    if( cross(b,c) < 0 )   return -1; //clockwise\n    if( dot(b,c) < 0 )     return +2; //online_back\n    if( norm(b) < norm(c)) return -2; //online_front\n    return 0; // on_segment\n} //}}}\n// 交点判定 LSPtoLSP // {{{\nbool intersectLL( const L &l, const L &m ){\n    return abs( cross(l[1]-l[0], m[1]-m[0]) ) > EPS || // cross(l,m) != 0 <-> not paralell\n           abs( cross(l[1]-l[0], m[0]-l[0]) ) < EPS;   // cross(l,(m-l)) == 0 <-> same line\n}\nbool intersectLS( const L &l, const L &s ){\n    return cross( l[1]-l[0], s[0]-l[0] ) *\n           cross( l[1]-l[0], s[1]-l[0] ) < EPS;\n}\nbool intersectLP( const L &l, const P &p ){\n    return abs( cross(l[0]-p, l[1]-p) );\n}\nbool intersectSS( const L &s, const L &t ){\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n           ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP( const L &s, const P &p ){\n    return abs( s[0]-p )+abs( s[1]-p )-abs(s[1]-s[0]) < EPS;\n}\n// }}}\n// 射影 反射 距離 LSPtoLSP // {{{\nP projection( const L &l, const P &p ){\n    double t = dot( p-l[0], l[0]-l[1] ) / norm( l[0]-l[1] );\n    return l[0] + t*(l[0]-l[1]);\n}\nP reflection( const L &l, const P &p ){\n    return p + 2.0*( projection(l,p) - p );\n}\n// bool intersectLL( const L &l, const L &m ){\n//     return abs( cross(l[1]-l[0], m[1]-m[0]) ) > EPS || // cross(l,m) != 0 <-> not paralell\n//            abs( cross(l[1]-l[0], m[0]-l[0]) ) < EPS;   // cross(l,(m-l)) == 0 <-> same line\n// }\n// bool intersectLS( const L &l, const L &s ){\n//     return cross( l[1]-l[0], s[0]-l[0] ) *\n//            cross( l[1]-l[0], s[1]-l[0] ) < EPS;\n// }\n// bool intersectLP( const L &l, const P &p ){\n//     return abs( cross(l[0]-p, l[1]-p) );\n// }\n// bool intersectSS( const L &s, const L &t ){\n//     return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n//            ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n// }\n// bool intersectSP( const L &s, const P &p ){\n//     return abs( s[0]-p )+abs( s[1]-p )-abs(s[1]-s[0]) < EPS;\n// }\n// }}}\n// imagePointDescription(点表示) // {{{ \nvoid imagePointDescription( const vector<P> &p ){\n    int here[51][51] = {};\n    int i = 0;\n    for( P t : p ){\n        i++;\n        int y = round(imag(t)-EPS);\n        int x = round(real(t)-EPS);\n        if( abs(y) > 25 ) continue;\n        if( abs(x) > 25 ) continue;\n        here[y+25][x+25] = i;\n    }\n\n    for( i = 50; i >= 0; i-- ){\n        for( int j = 0; j <= 50; j++ ){\n            if( here[i][j] ) printf (\"%2d\", here[i][j] );\n            else if( i == 25 && j == 25 ) printf (\"-+\");\n            else if( i == 25 ) printf (\"--\");\n            else if( j == 25 ) printf (\" |\");\n            else if( j % 5 == 0 && i % 5 == 0)printf (\" .\");\n            else printf (\"  \");\n        }\n        printf (\"\\n\");\n    }\n\n} // }}}\n\nint main() {\n\n    double a,b,c,d;\n    G points(4);\n\n\n    int q;\n    cin >> q;\n\n    while(q--){\n        cin >> a >> b >> c >> d;\n        P p1(a,b);\n        P p2(c,d);\n        cin >> a >> b >> c >> d;\n        P p3(a,b);\n        P p4(c,d);\n        L l1(p1,p2);\n        L l2(p3,p4);\n        points[0] = p1;\n        points[1] = p2;\n        points[2] = p3;\n        points[3] = p4;\n        // imagePointDescription(points);\n        if( abs(cross(l1[1]-l1[0],l2[1]-l2[0])) < EPS ) printf (\"%d\\n\", 2);\n        else if( abs(dot(l1[1]-l1[0],l2[1]-l2[0])) < EPS ) printf (\"%d\\n\", 1);\n        else printf (\"%d\\n\", intersectLL(l1,l2) ? 0 : 2 );\n        // printf (\"%1.10lf %1.10lf\\n\", real(x), imag(x) );\n    }\n\n\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <math.h>\n\n\nusing namespace std;\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS) //?????????????????????????????????\n\n//??????????????????????????????\nclass Point{\n\npublic:\n\n\tdouble x, y;//??§?¨????????????????x,y??????\n\n\tPoint(double x = 0,double y = 0):x(x),y(y){}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator * (Point p) {\n\t\treturn Point(x * p.x, y * p.y);\n\t}\n\n\tPoint operator / (Point p) {\n\t\treturn Point(x / p.x, y / p.y);\n\t}\n\n\tdouble norm() {\n\t\treturn x*x + y*y;\n\t}\n\n\t//?????????????????§???????????????\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS &&  fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\n\ntypedef vector<Point> Polygon;\n\n//??????????????????????????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????????????????????????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\n\n\n\n//???\nclass Circle {\npublic:\n\tPoint c;//??????\n\tdouble r;//??????\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n\n\n\n\n\nint main(void)\n{\n\tint n;\n\n\tPoint p[4];\n\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tcin >> p[j].x >> p[j].y;\n\t\t}\n\n\t\tif (isOrthogonal(p[0], p[1], p[2], p[3])) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse if (isParallel(p[0], p[1], p[2], p[3])) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <algorithm>\n#include <array>\n#include <climits>\n#include <cmath>\n#include <cstdint>\n#include <cstdio>\n#include <cstdlib>\n#include <ctime>\n#include <functional>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <type_traits>\n#include <utility>\n#include <vector>\n\nusing int32 = std::int_fast32_t;\nusing int64 = std::int_fast64_t;\nusing uint32 = std::uint_fast32_t;\nusing uint64 = std::uint_fast64_t;\nusing intl32 = std::int_least32_t;\nusing intl64 = std::int_least64_t;\nusing uintl32 = std::uint_least32_t;\nusing uintl64 = std::uint_least64_t;\n\n\n//有バグ\nstatic constexpr double PI = 3.1415926535897932;\nstruct angle {\n\tdouble r;\n\tangle() :r(0) {}\n\tangle(double r_) :r(arr(std::fmod(r_, 2.0 * PI) + 2.0 * PI)) {}\n\tstatic double arr(const double &o) { return o < 2.0 * PI - eps ? o : o - 2.0 * PI; }\n\tstatic angle make(const double &o) { angle ret;ret.r = o;return ret; }\n\tconst angle operator+(const angle &o)const { return make(arr(r + o.r)); }\n\tconst angle operator-(const angle &o)const { return make(arr(r - o.r + 2.0 * PI)); }\n\tconst angle operator*(const double &o)const { return angle(r * o); }\n\tconst angle operator/(const double &o)const { return angle(r / o); }\n\tangle &operator+=(const angle &o) { return *this = *this + o; }\n\tangle &operator-=(const angle &o) { return *this = *this - o; }\n\tangle &operator*=(const double &o) { return *this = *this * o; }\n\tangle &operator/=(const double &o) { return *this = *this / o; }\n\tconst angle operator~()const { return make(arr(3.0 * PI - r)); }\n\tconst angle operator-()const { return make(arr(2.0 * PI - r)); }\n\tconst bool operator==(const angle &o)const { return std::abs(r - o.r) <= eps; }\n\tconst bool operator!=(const angle &o)const { return std::abs(r - o.r) > eps; }\n\tconst bool operator< (const angle &o)const { return r <  o.r; }\n\tconst bool operator<=(const angle &o)const { return r <= o.r; }\n\tconst bool operator> (const angle &o)const { return r >  o.r; }\n\tconst bool operator>=(const angle &o)const { return r >= o.r; }\n\texplicit operator bool()const { return r > eps; }\n\texplicit operator double()const { return r; }\n\tconst double sin()const { return std::sin(r); }\n\tconst double cos()const { return std::cos(r); }\n\n\tconst double degree()const { return r*(180.0 / PI); }\n\tconst double ratio()const { return r / (2.0 * PI); }\nprivate:\n\tstatic constexpr double eps = 0.000001;\n};\nangle operator\"\" _deg(long double x) { return angle(x*(PI / 180.0)); }\nangle operator\"\" _rat(long double x) { return angle(x * 2.0 * PI); }\nangle operator\"\" _rad(long double x) { return angle(x); }\nstruct pvec {\n\tstatic constexpr double eps = 0.0000000000001;\n\tdouble x, y;\n\tpvec() :x(0), y(0) {}\n\tpvec(double x_, double y_) :x(x_), y(y_) {}\n\tpvec(double abs_, angle r) :x(abs_*r.cos()), y(abs_*r.sin()) {}\n\tconst pvec operator+(const pvec &o)const { return pvec(x + o.x, y + o.y); }\n\tconst pvec operator-(const pvec &o)const { return pvec(x - o.x, y - o.y); }\n\tconst pvec operator*(const pvec &o)const { return pvec(x*o.x - y*o.y, x*o.y + y*o.x); }\n\tconst pvec operator/(const pvec &o)const { return pvec(x*o.x + y*o.y, y*o.x - x*o.y) / o.abs2(); }\n\tconst pvec operator*(const double &o)const { return pvec(x * o, y * o); }\n\tconst pvec operator/(const double &o)const { return pvec(x / o, y / o); }\n\tpvec &operator+=(const pvec &o) { return *this = *this + o; }\n\tpvec &operator-=(const pvec &o) { return *this = *this - o; }\n\tpvec &operator*=(const pvec &o) { return *this = *this * o; }\n\tpvec &operator/=(const pvec &o) { return *this = *this / o; }\n\tpvec &operator*=(const double &o) { return *this = *this * o; }\n\tpvec &operator/=(const double &o) { return *this = *this / o; }\n\n\tconst pvec operator+()const { return *this; }\n\tconst pvec operator-()const { return pvec(-x, -y); }\n\tconst pvec operator~()const { return pvec(x, -y); }\n\n\texplicit operator bool()const { return std::abs(x) > eps || std::abs(y) > eps; }\n\tconst bool operator==(const pvec &o)const { return std::abs(x - o.x) <= eps&&std::abs(y - o.y) <= eps; }\n\tconst bool operator!=(const pvec &o)const { return std::abs(x - o.x) > eps || std::abs(y - o.y) > eps; }\n\n\tconst double abs()const { return mysqrt(abs2()); }\n\tconst double abs2()const { return x*x + y*y; }\n\tconst angle arg()const {\n\t\tif (x > eps) return angle(std::atan(y / x));\n\t\tif (x < eps) return angle(std::atan(y / x) + PI);\n\t\treturn angle();\n\t}\n\tstatic const double dot(const pvec &l, const pvec &r) { return l.x*r.x + l.y*r.y; }\n\tstatic const double cross(const pvec &l, const pvec &r) { return l.x*r.y - l.y*r.x; }\n\tconst pvec dir()const { return *this / abs(); }\n\n\tstatic const bool C_x(const pvec &l, const pvec &r) {\n\t\tif (l.x != r.x) return l.x < r.x;\n\t\treturn l.y < r.y;\n\t}\n\n\tfriend std::istream &operator>>(std::istream &is, pvec &o) {\n\t\tdouble x_, y_;is >> x_ >> y_;o = pvec(x_, y_);return (is);\n\t}\n\tfriend std::ostream &operator<<(std::ostream &os, const pvec &o) {\n\t\treturn os << o.x << \" \" << o.y;\n\t}\nprivate:\n\tstatic const double mysqrt(const double &x) {\n\t\tdouble h = 0.5*x;\n\t\tstd::uint_fast64_t t = 0x5FE6EB50C7B537AAl\n\t\t\t- (*(std::uint_fast64_t*)&x >> 1);\n\t\tdouble r = *(double*)&t;\n\t\tr *= 1.5 - h*r*r;r *= 1.5 - h*r*r;\n\t\tr *= 1.5 - h*r*r;r *= 1.5 - h*r*r;\n\t\treturn r*x;\n\t}\n};\n\nint main(void) {\n\t//std::ios::sync_with_stdio(false);\n\t//std::cin.tie(0);\n\tstatic constexpr double eps = 0.000000001;\n\tuint32 q;\n\tstd::cin >> q;\n\tpvec v, u, o;\n\twhile (q--) {\n\t\tstd::cin >> v >> o;\n\t\tv -= o;\n\t\tstd::cin >> u >> o;\n\t\tu -= o;\n\t\tif (std::abs(pvec::cross(v, u)) <= eps) {\n\t\t\tstd::cout << \"2\";\n\t\t}\n\t\telse if (std::abs(pvec::dot(v, u)) <= eps) {\n\t\t\tstd::cout << \"1\";\n\t\t}\n\t\telse {\n\t\t\tstd::cout << \"0\";\n\t\t}\n\t\tstd::cout << \"\\n\";\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <set>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <functional>\n#include <map>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <list>\n\nusing namespace std;\n\n#define EPS (1e-10)\n\nstruct Point{\n    Point(double _x = 0, double _y = 0){\n        x = _x;\n        y = _y;\n    }\n    double x;\n    double y;\n\n    Point operator + (Point p){\n        return Point(x + p.x, y+ p.y);\n    }\n\n    Point operator - (Point p){\n        return Point(x - p.x, y - p.y);\n    }\n\n    Point operator * (double a){\n        return Point(a * x, a * y);\n    }\n\n    Point operator / (double a){\n        return Point(x / a, y / a);\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    bool operator < (const Point &p) const{\n        return x!=p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) && fabs(y - p.y) < EPS;\n    }\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\nint main() {\n\n    int q;scanf(\"%d\",&q);\n\n    for(int i=0;i<q;i++){\n        Point p0 = Point(0,0);\n        Point p1 = Point(0,0);\n        Point p2 = Point();\n        Point p3 = Point();\n\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n\n        Vector v1 = p1 - p0;\n        Vector v2 = p3 - p2;\n\n        //直行判定\n        if((fabs(v1.x*v2.x)+ fabs(v1.y*v2.y)) < EPS){\n            printf(\"1\\n\");\n        }\n\n        //並行判定\n        else if((fabs(v1.x*v2.y) - fabs(v1.y*v2.x)) < EPS){\n            printf(\"2\\n\");\n        }\n\n        else{\n            printf(\"0\\n\");\n        }\n\n    }\n\n\n    return 0;\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\ntypedef complex<ld> Point;\ntypedef pair<Point, Point> Segment;\nconstexpr double EPS = (1e-9L);\nld dot(const Point& p1, const Point& p2) { return (conj(p1) * p2).real(); }\nld cross(const Point& p1, const Point& p2) { return (conj(p1) * p2).imag(); }\nconstexpr bool eq(ld a) { return a < EPS; }\nint main() {\n\tint n; cin >> n;\n\tint xa, ya, xb, yb;\n\tPoint v[2];\n\trep(i, 0, n) {\n\t\trep(j, 0, 2) { cin >> xa >> ya >> xb >> yb; v[j] = Point(xb, yb) - Point(xa, ya); }\n\t\tif (eq(cross(v[0], v[1]))) P(2);\n\t\telse if (eq(dot(v[0], v[1]))) P(1);\n\t\telse P(0);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble x0, x1, x2, x3, y0, y1, y2, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n\t\tdouble p1x, p1y, p2x, p2y;\n\t\tp1x = x1 - x0;\n\t\tp1y = y1 - y0;\n\t\tp2x = x3 - x2;\n\t\tp2y = y3 - y2;\n\n\t\tdouble u1x, u1y, u2x, u2y;\n\t\tu1x = p1x / sqrt(p1x*p1x + p1y*p1y);\n\t\tu1y = p1y / sqrt(p1x*p1x + p1y*p1y);\n\t\tu2x = p2x / sqrt(p2x*p2x + p2y*p2y);\n\t\tu2y = p2y / sqrt(p2x*p2x + p2y*p2y);\n\n\t\tdouble dot = (u1x*u2x + u1y*u2y);\n\n\t\tif (abs(dot) <= 0.000000000000001)\n\t\t{\n\t\t\tcout << \"1\" << endl;\n\t\t}\n\t\telse if (abs(abs(dot) - 1) <= 0.000000000000001)\n\t\t{\n\t\t\tcout << \"2\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"0\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <climits>\n#include <ctime>\nusing namespace std;\n\n#define rep(i,a,n) for(int i=a; i<n; i++)\n#define repr(i,a,n) for(int i=a; i>=n; i--)\n#define pb(a) push_back(a)\n#define fr first\n#define sc second\n#define INF 999999999\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\n#define EQV(a,b) ( EQ((a).X, (b).X) && EQ((a).Y, (b).Y) )\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n\ntypedef vector<int> VI;\ntypedef vector<VI> MAT;\ntypedef pair<int, int> pii;\ntypedef long long int ll;\n\ntypedef complex<double> P;\ntypedef pair<P, P> L;\ntypedef pair<P, double> C;\n\nint dy[]={0, 0, 1, -1};\nint dx[]={1, -1, 0, 0};\nint const MOD = 1000000007;\n\nnamespace std {\n    bool operator<(const P a, const P b) {\n        return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n    }\n}\n\n// 2???????????????????????????????±???????\ndouble dot(P a, P b) {\n    return (a.X * b.X + a.Y * b.Y);\n}\n\n// 2???????????????????????????????±???????\ndouble cross(P a, P b) {\n    return (a.X * b.Y - a.Y * b.X);\n}\n\n// 2??´????????´????????? (?????????0??§???????????¨)\nbool is_orthogonal(P a1, P a2, P b1, P b2) {\n    return EQ( dot(a1-a2, b1-b2), 0.0 );\n}\n\n// 2??´?????????????????? (?????????0??§???????????¨)\nbool is_parallel(P a1, P a2, P b1, P b2) {\n    return EQ( cross(a1-a2, b1-b2), 0.0);\n}\n\nint main() {\n    int q; cin >> q;\n    rep(i,0,q) {\n        P a, b, c, d;\n        cin >> a.X >> a.Y >> b.X >> b.Y >> c.X >> c.Y >> d.X >> d.Y;\n        if(is_orthogonal(a, b, c, d)) cout << 1 << endl;\n        else if(is_parallel(a, b, c, d)) cout << 2 << endl;\n        else cout << 0 << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <complex>\n#include <cstdlib>\n\nusing namespace std;\n\nconst double eps = 1e-10;\ntypedef complex<double> Point;\n\ninline double cross(const Point& a, const Point& b){\n    return imag(conj(a) * b);\n}\n\ninline double dot(const Point& a, const Point& b){\n    return real(conj(a) * b);\n}\n\nstruct Line : vector<Point> {\n    Line(const Point& a, const Point& b):vector<Point>{a, b}{}\n};\n\ninline bool parallel(const Line& l, const Line& m){\n    return abs(cross(l[1] - l[0], m[1] - m[0])) < eps;\n}\n\ninline bool orthogonal(const Line& l, const Line& m){\n    return abs(dot(l[1] - l[0], m[1] - m[0])) < eps;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    while(q--){\n        int x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        Line l(Point(x0, y0), Point(x1, y1)), m(Point(x2, y2), Point(x3, y3));\n        cout << (parallel(l, m) << 1 | orthogonal(l, m) << 0) << '\\n';\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-4;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct pt_t {\n\tdouble x, y;\n\tpt_t operator+(const pt_t &p) { return { x + p.x, y + p.y }; }\n\tpt_t operator-(const pt_t &p) { return { x - p.x, y - p.y }; }\n\tpt_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npt_t cross_point(line_t l, line_t m) {\n\tpt_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, pt_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npt_t rot(pt_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(pt_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(pt_t p, pt_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(max(min(p.x * q.x + p.y * q.y, 1.0), -1.0));\n\tdouble r1 = asin(max(min(p.x * q.y - p.y * q.x, 1.0), -1.0));\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, pt_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nbool on_same_line(pt_t p, pt_t q) {\n\tline_t l = solve_line(p.y, -p.x, p);\n\tif (dist(l, q) < eps) return true;\n\telse return false;\n}\n\nint main() {\n\tint qr; cin >> qr;\n\tLoop(i, qr) {\n\t\tpt_t p[4];\n\t\tLoop(j, 4) {\n\t\t\tcin >> p[j].x >> p[j].y;\n\t\t}\n\t\tline_t l = solve_line(p[1].y - p[0].y, p[0].x - p[1].x, p[0]);\n\t\tline_t m = solve_line(p[3].y - p[2].y, p[2].x - p[3].x, p[2]);\n\t\tpt_t lp = { l.a, l.b };\n\t\tpt_t mp = { m.a, m.b };\n\t\tdouble r = angle(lp, mp);\n\t\tif (nearlyeq(r, 0) || nearlyeq(r, M_PI) || nearlyeq(r, M_PI * 2)) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse if (nearlyeq(r, M_PI * 0.5) || nearlyeq(r, M_PI * 1.5)) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <math.h>\nconst double EPS = 1e-10;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\t/*vector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}*/\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double para(vector v1, vector v2) {\n\treturn sqrt(v1.x*v1.x + v1.y*v1.y)*sqrt(v2.x*v2.x + v2.y*v2.y);\n}\nint main() {\n\tdouble n, x1, x2, x3, x4, y1, y2, y3, y4;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tvector v1(x2 - x1, y2 - y1);\n\t\tvector v2(x4 - x3, y4 - y3);\n\t\tdouble ans = dot(v1, v2);\n\t\tif (ans == 0) cout << 1 << endl;\n\t\telse if (fabs(ans - para(v1, v2)) < EPS || fabs(2*ans - (ans - para(v1, v2))) < EPS) cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <map>\n#include <set>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <bitset>\n#include <climits>\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define RREP(i,n) for (int i=(n)-1;i>=0;i--)\n#define RFOR(i,a,b) for (int i=(a)-1;i>=(b);i--)\n#define ll long long\n#define ull unsigned long long\nint dx[4] = {1, 0, -1, 0};\nint dy[4] = {0, 1, 0, -1};\nconst int INF = 1e9;\nconst int MOD = 1e9 + 7;\n\nusing namespace std;\n\n#include <vector>\n#include <cmath>\n#include <cstring>\n\nconst double EPS = 1e-10;\n#define equals(a,b) (fabs((a) - (b)) < EPS)\nstruct Point{\n\tdouble x,y;\n\tPoint(double x = 0.0,double y =0.0):x(x),y(y){}\n\tPoint operator + (Point& p){ return Point(x+p.x,y+p.y);\t}\n\tPoint operator - (Point& p){ return Point(x-p.x,y-p.y); }\n\tPoint operator * (double k){ return Point(x*k,y*k);\t}\n\tPoint operator / (double k){ return Point(x/k,y/k); }\n\n\tdouble norm(){return x*x+y*y;}\n\tdouble abs(){return sqrt(norm());}\n\n\tbool operator < (const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n\nstruct Segment{\n\tPoint p1,p2;\n};\n\ntypedef Segment Line;\nclass Circle{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0): c(c),r(r){}\n};\ntypedef vector<Point> Polygon;\n\nbool isOrthgonal(Vector a, Vector b){\n\treturn equals(dot(a,b),0.0);\n}\n\nbool isOrthgonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthgonal(a1-a2,b1-b2);\n}\n\nbool isOrthgonal(Segment s1, Segment s2){\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n\treturn equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1, Segment s2){\n\treturn equals(cross(s1.p2 - s1.p1,s2.p2-s2.p1),0.0);\n}\n\n\n\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n\tint n;cin>>n;\n\tREP(i,n){\n\t\tint a,b,c,d,e,f,g,h;\n\t\tcin>>a>>b>>c>>d>>e>>f>>g>>h;\n\t\tVector v1(c-a,d-b),v2(g-e,h-f);\n\t\tif(isParallel(v1,v2))cout << 2 << endl;\n\t\telse if(isOrthgonal(v1,v2))cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\n#define equals(a, b) (a == b)\n\nclass Point {\n    public:\n        Point() = default;\n        Point(int x = 0, int y = 0): x(x), y(y) {}\n        Point operator + (Point p) { return Point(x + p.get_x(), y + p.get_y()); }\n        Point operator - (Point p) { return Point(x - p.get_x(), y - p.get_y()); }\n        Point operator * (int k) { return Point(k * x, k * y); }\n        Point operator / (int k) { return Point(x / k, y / k); }\n        int abs() { return sqrt(norm()); }\n        int norm() { return x * x + y * y; }\n        bool operator < (const Point &p) const {\n            return x != p.get_x() ? x < p.get_x() : y < p.get_y();\n        }\n        bool operator == (const Point &p) const {\n            return x == p.get_x() && y == p.get_y();\n        }\n        const int get_x() const { return x; }\n        const int get_y() const { return y; }\n    private:\n        int x = 0;\n        int y = 0;\n};\n\ntypedef Point Vector;\n\nint dot(Vector a, Vector b) {\n    return a.get_x() * b.get_x() + a.get_y() * b.get_y();\n}\n\nint cross(Vector a, Vector b) {\n    return a.get_x() * b.get_y() - a.get_y() * b.get_x();\n}\n\nstruct Segment {\n    Point p1;\n    Point p2;\n};\ntypedef Segment Line;\n\nbool is_orthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0);\n}\n\nbool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return is_orthogonal(a1 - a2, b1 - b2);\n}\n\nbool is_orthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0);\n}\n\nbool is_parallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0);\n}\n\nbool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n    return is_parallel(a1 - a2, b1 - b2);\n}\n\nbool is_parallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0);\n}\n\nint\nmain(int argc, const char *argv[])\n{\n    int q;\n    int x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> q;\n    while (q--) {\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;        \n        Point a1{x0, y0}, a2{x1, y1}, b1{x2, y2}, b2{x3, y3};\n        if (is_parallel(a1, a2, b1, b2)) cout << 2;\n        else if (is_orthogonal(a1, a2, b1, b2)) cout << 1;\n        else cout << 0;\n        cout << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <algorithm>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n  double x,y;\n\n  Point(double x = 0,double y = 0): x(x),y(y){}\n  Point operator + (Point p){ return Point(x + p.x , y + p.y); }\n  Point operator - (Point p){ return Point(x - p.x , y - p.y); }\n  Point operator * (double a){ return Point(a * x , a * y); }\n  Point operator / (double a){ return Point(x / a , y / a); }\n\n  double abs(){ return sqrt(norm()); }\n  double norm(){ return x * x + y * y; }\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS);\n  }\n};\ntypedef Point Vector;\n\nstruct Segment{\n  Point p1,p2;\n};\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){\n  return  a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\n\ndouble dot(Vector a,Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1 - a1,b1 - b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2 - s1.p1,s2.p2 - s2.p1) , 0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1 - a2 , b1 - b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2 - s1.p1 , s2.p2 - s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1 , base / norm(base));\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p + (project(s,p) - p) * 2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS)return CLOCKWISE;\n  if(dot(a,b) < -EPS)return ONLINE_BACK;\n  if(a.norm() < b.norm())return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 && \n          ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0);\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2);\n}\n\ndouble getDistance(Vector a,Vector b){\n  return abs(a - b);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2 - l.p1 , p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n  if(dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n             min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base = s2.p2 - s2.p1;\n  double d1 = abs(cross(base,s1.p1 - s2.p1));\n  double d2 = abs(cross(base,s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  // assert(intersect(c,l));\n  Vector pr = project(l,c.c);\n  Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n  double base = sqrt(c.r * c.r - norm(pr - c.c));\n  return make_pair(pr + e * base , pr - e * base);\n}\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r) * a, sin(r) * a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  // assert(intersect(c1,c2));\n  double d = abs(c1.c - c2.c);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r,t + a),c1.c + polar(c1.r,t - a));\n}\n\nint contains(Polygon g,Point p){\n  int n = g.size();\n  bool x = false;\n  for(int i = 0;i < n;i++){\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n    if(a.y < b.y)swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS)x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size() < 3)return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n\n  l.push_back(s[s.size() - 1]);\n  l.push_back(s[s.size() - 2]);\n\n  for(int i = 2;i < s.size();i++){\n    for(int n = u.size();n >= 2 && ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n\n  for(int i = s.size() - 3; i >= 0;i--){\n    for(int n = l.size();n >= 2 && ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i = u.size() - 2;i >= 1;i--)l.push_back(u[i]);\n  return l;\n}\n\n#define BOTTOM 0\n#define LEFT 1\n#define RIGHT 2\n#define TOP 3\n\nclass EndPoint{\npublic:\n  Point p;\n  int seg,st;\n  EndPoint(){}\n  EndPoint(Point p,int seg,int st): p(p),seg(seg),st(st){}\n\n  bool operator < (const EndPoint &ep) const{\n    if(p.y == ep.p.y){\n      return st < ep.st;\n    }else{\n      return p.y < ep.p.y;\n    }\n  }\n};\n\nEndPoint EP[2 * 100000];\n\nint manhattanIntersection(vector<Segment> S){\n  int n = S.size();\n  for(int i = 0,k = 0;i < n;i++){\n    if(S[i].p1.y == S[i].p2.y){\n      if(S[i].p1.x > S[i].p2.x)swap(S[i].p1,S[i].p2);\n    }else if(S[i].p1.y > S[i].p2.y){\n      swap(S[i].p1,S[i].p2);\n    }\n\n    if(S[i].p1.y == S[i].p2.y){\n      EP[k++] = EndPoint(S[i].p1,i,LEFT);\n      EP[k++] = EndPoint(S[i].p2,i,RIGHT);\n    }else{\n      EP[k++] = EndPoint(S[i].p1,i,BOTTOM);\n      EP[k++] = EndPoint(S[i].p2,i,TOP);\n    }\n  }\n\n  sort(EP,EP + (2 * n));\n\n  set<int> BT;\n  BT.insert(1000000001);\n  int cnt = 0;\n  for(int i = 0;i < 2 * n;i++){\n    if(EP[i].st == TOP){\n      BT.erase(EP[i].p.x);\n    }else if(EP[i].st == BOTTOM){\n      BT.insert(EP[i].p.x);\n    }else if(EP[i].st == LEFT){\n      set<int>::iterator b = lower_bound(BT.begin(),BT.end(),S[EP[i].seg].p1.x);\n      set<int>::iterator e = upper_bound(BT.begin(),BT.end(),S[EP[i].seg].p2.x);\n      cnt += distance(b,e);\n    }\n  }\n  return cnt;\n}\n\nint main(){\n  int n;\n  cin >> n;\n  for(int i = 0;i < n;i++){\n    Line a,b;\n    cin >> a.p1.x >> a.p1.y;\n    cin >> a.p2.x >> a.p2.y;\n    cin >> b.p1.x >> b.p1.y;\n    cin >> b.p2.x >> b.p2.y;\n    if(isParallel(a,b))puts(\"2\");\n    else if(isOrthogonal(a,b))puts(\"1\");\n    else puts(\"0\");\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\n//#define equals( a, b ) (fabs((a) - (b)) < DBL_E)\n\nclass Vector2 {\npublic:\n\tVector2(double x_, double y_) : x(x_), y(y_) {}\n\tVector2() : x(0), y(0) {}\n\tVector2 operator -(Vector2& other) {\n\t\tVector2 vec(x - other.GetX(), y - other.GetY());\n\t\treturn vec;\n\t}\n\tvoid SetVector2(double x_, double y_) {\n\t\tx = x_;\n\t\ty = y_;\n\t}\n\tdouble GetX() {\n\t\treturn x;\n\t}\n\tdouble GetY() {\n\t\treturn y;\n\t}\n\nprivate:\n\tdouble x, y;\n};\n\ndouble Dot(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetX() + vecA.GetY() * vecB.GetY();\n}\n\ndouble CrossY(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetY() - vecA.GetY() * vecB.GetX();\n}\n\nbool IsOrthogonal(Vector2 vecA, Vector2 vecB) {\n    double ans = Dot(vecA, vecB);\n//\treturn equals(ans, 0.0);\n\treturn (fabs(ans - 0) < DBL_EPSILON);\n}\n\nbool IsParallel(Vector2 vecA, Vector2 vecB) {\n\tdouble ans = CrossY(vecA, vecB);\n\treturn (fabs(ans - 0) < DBL_EPSILON);\n}\n\nint main() {\n\tint query;\n\tcin >> query;\n\n\tfor (int i = 0; i < query; i++) {\n\t\tVector2 vecs[4];\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tdouble x, y;\n\t\t\tcin >> x >> y;\n\t\t\tvecs[i].SetVector2(x, y);\n\t\t}\n\n\t\tVector2 vecA = vecs[1] - vecs[0];\n\t\tVector2 vecB = vecs[3] - vecs[2];\n\t\tbool orth = IsOrthogonal(vecA, vecB);\n\t\tif (orth) {\n\t\t\tcout << 1 << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbool para = IsParallel(vecA, vecB);\n\t\tif (para) {\n\t\t\tcout << 2 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tcout << 0 << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\nint main()\n{\n    long long int xp0, xp1, xp2, xp3, yp0, yp1, yp3, yp2, diffx0, diffy0, diffx1, diffy1, test;\n    int res;\n    double m1, m2;\n    scanf(\"%lld\", &test);\n    while(test--)\n    {\n        scanf(\"%lld%lld%lld%lld%lld%lld%lld%lld\", &xp0, &yp0, &xp1, &yp1, &xp2, &yp2, &xp3, &yp3);\n        diffx0 = xp1 - xp0;\n        diffy0 = yp1 - yp0;\n        diffx1 = xp3 - xp2;\n        diffy1 = yp3 - yp2;\n        if(diffx0 == 0)\n        {\n            if(diffx1 == 0)\n            {\n                res = 2;\n            }\n            else if(diffy1 == 0)\n            {\n                res = 1;\n            }\n            else    res = 0;\n        }\n        else if(diffx1 == 0)\n        {\n            if(diffx0 == 0)\n            {\n                res = 2;\n            }\n            else if(diffy0 == 0)\n            {\n                res = 1;\n            }\n            else res = 0;\n        }\n        else\n        {\n            m1 = (double)diffy0/diffx0;\n            m2 = (double)diffy1/diffx1;\n            if(m1 == m2)    res = 2;\n            else if(m1 * m2 == -1)  res = 1;\n            else res = 0;\n        }\n        printf(\"%d\\n\", res);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point p){ return Point(x * p.x, y * p.y); }\n\tPoint operator / (Point p){ return Point(x / p.x, y / p.y); }\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x * x + y * y; }\n\n\tbool operator<(const Point &p){ return (x != p.x) ? (x < p.x) : (y < p.y); }\n\tbool operator==(const Point &p)\n\t{\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\ntypedef Point Segment;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//bool isOrthogonal(Segment s1, Segment s2){\n//\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0);\n//}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nint main()\n{\n\tint n; cin >> n;\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tPoint a1, a2, b1, b2;\n\t\tcin >> a1.x >> a1.y >> a2.x >> a2.y >> b1.x >> b1.y >> b2.x >> b2.y;\n\t\tif (isParallel(a1, a2, b1, b2))\n\t\t\tcout << 2 << endl;\n\t\telse if (isOrthogonal(a1, a2, b1, b2))\n\t\t\tcout << 1 << endl;\n\t\telse\n\t\t\tcout << 0 << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator +(Point p){\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator -(Point p){\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator *(double a){\n        return Point(a*x,a*y);\n    }\n    Point operator /(double a){\n        return Point(x/a,y/a);\n    }\n\n    double Abs(){\n        return sqrt(norm());\n    }\n    double norm(){\n        return x*x+y*y;\n    }\n\n    bool operator <(const Point &p) const{\n        return equals(x,p.x)?(y<p.y):(x<p.x);\n    }\n\n    bool operator ==(const Point &p) const{\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\ntypedef Point Vector;\nstruct Segment{\n    Point p1,p2;\n};\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\nbool is0rthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return is0rthogonal(Vector(a1-a2),Vector(b1-b2));\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nint main(){\n    cin.tie(nullptr);\n    ios_base::sync_with_stdio(false);\n\n    int q;\n    cin>>q;\n\n    for(int i=1;i<=q;i++){\n        Point p0,p1,p2,p3;\n        cin>>p0.x>>p0.y>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y;\n\n        if(isOrthogonal(p0,p1,p2,p3)){\n            cout<<1<<\"\\n\";\n        }\n\n        else if(isParallel(p0,p1,p2,p3)){\n            cout<<2<<\"\\n\";\n        }\n\n        else{\n            cout<<0<<\"\\n\";\n        }\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define int long long\n#define db double\n#define For(i,j,k) for(int i=(int)(j);i<=(int)(k);i++)\n#define Rep(i,j,k) for(int i=(int)(j);i>=(int)(k);i--)\ninline ll read(){\n\tll x=0;char ch=getchar();bool f=0;\n\tfor(;!isdigit(ch);ch=getchar()) if(ch=='-') f=1;\n\tfor(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';\n\treturn f?-x:x;\n}\nvoid write(ll x){\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>=10) write(x/10);putchar(x%10+'0');\n}\nvoid writeln(ll x){write(x);puts(\"\");}\nvoid writep(ll x){write(x);putchar(' ');}\n\nint const N=1e5+3;\nint top,n,m,cnt,sta[N];\nstruct point{\n\tdb x,y;\n    point operator - (point A) const{return (point){x-A.x,y-A.y};}\n    point operator + (point A) const{return (point){x+A.x,y+A.y};}\n    void print(){printf(\"%.10lf %.10lf\\n\",x,y);}\n}A,B,C,D,c[N],p1[N],p2[N];\n\npoint operator *(db x,point A){return (point){x*A.x,x*A.y};}\ndb CJ(point A,point B){return A.x*B.y-B.x*A.y;}//叉积 \ndb DJ(point A,point B){return A.x*B.x+A.y*B.y;}//点积 \ndb dis(point A){return sqrt(A.x*A.x+A.y*A.y);}//向量长度 \nbool cmp(point A,point B){return (CJ(A,B)>0 || CJ(A,B)==0 && dis(A)<dis(B));}//按极角排序 \nvoid Convex(point *A,int &n){//求凸包 \n\tfor (int i=1;i<=n;i++)\n\t  if (A[i].y<A[1].y || A[i].y==A[1].y && A[i].x<A[1].x) swap(A[i],A[1]);\n    point base=A[1];top=0;\n\tfor (int i=1;i<=n;i++) A[i]=A[i]-base;\n\tsort(A+2,A+n+1,cmp);\n\tsta[++top]=1;\n\tfor (int i=2;i<=n;sta[++top]=i,i++)\n\t  while (top>1 && CJ(A[i]-A[sta[top-1]],A[sta[top]]-A[sta[top-1]])>=0) top--;\n\tfor (int i=1;i<=top;i++) A[i]=A[sta[i]]+base;\n\tn=top;A[n+1]=A[1];\n}\nvoid Minkowski(point A[],point B[]){//闵可夫斯基（凸包合并） \n\tfor (int i=1;i<=n;i++) p1[i]=A[i+1]-A[i];\n\tfor (int i=1;i<=m;i++) p2[i]=B[i+1]-B[i];\n\tint i=1,j=1;c[cnt=1]=A[1]+B[1];\n\twhile (i<=n && j<=m)\n\t  if (CJ(p1[i],p2[j])>=0) cnt++,c[cnt]=c[cnt-1]+p1[i++];\n\t  else cnt++,c[cnt]=c[cnt-1]+p2[j++];\n\twhile (i<=n) cnt++,c[cnt]=c[cnt-1]+p1[i++];\n\twhile (j<=m) cnt++,c[cnt]=c[cnt-1]+p2[j++];\t\n}\nint check(point p){//判断一个点是否在凸包内 \n\tif (CJ(p,c[2])>0 || CJ(c[cnt],p)>0) return 0;\n\tint pos=lower_bound(c+1,c+cnt+1,p,cmp)-c-1;\n\treturn CJ(c[pos%cnt+1]-c[pos],p-c[pos])>=0; \n}\npoint CGL_1_A(point A,point B,point C){//点在直线上的投影点\n\tdb d=dis(B-A);\n\treturn (A+(DJ(C-A,B-A)/d/d*(B-A)));\n}\npoint CGL_1_B(point A,point B,point C){//点关于直线的对称点\n\tpoint P=CGL_1_A(A,B,C);\n\treturn (C+2*(P-C));\n}\nint CGL_1_C(point A,point B,point C){//向量的位置关系(向量AC和向量AB) \n    if (CJ(B-A,C-A)>0) return 1;//逆时针 \n    if (CJ(B-A,C-A)<0) return 2;//顺时针 \n    if (DJ(C-A,B-A)<0) return 3;//方向相反\n\tif (dis(C-A)>dis(B-A)) return 4;//方向相同 AC>AB\n\tif (dis(C-A)<=dis(B-A)) return 5;//方向相同 AB>AC\n}\nint CGL_2_A(point A,point B,point C,point D){\n\tif (CJ(B-A,D-C)==0) return 2; \n\tif (DJ(B-A,D-C)==0) return 1; \n\treturn 0; \n}\n\nsigned main(){\n\tfor (int q=read();q;q--){\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&A.x,&A.y,&B.x,&B.y,&C.x,&C.y,&D.x,&D.y);\n\t\twriteln(CGL_2_A(A,B,C,D));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// CGL_2_A\n#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#define N     0.00001\nusing namespace std;\n\nstruct vec{\n\tdouble x;\n\tdouble y;\n};\n\nstruct point{\n\tint x;\n\tint y;\n};\n\ndouble inner_p(struct vec a, struct vec b){\n\treturn (a.x*b.x + a.y*b.y);\n}\n\ndouble cross_p(struct vec a, struct vec b){\n\treturn (a.x*b.y - a.y*b.x);\n}\n\nint main(){\n\tpoint p[4];\n\tvec v[2];\n\tint q;\n\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>p[0].x>>p[0].y>>p[1].x>>p[1].y>>p[2].x>>p[2].y>>p[3].x>>p[3].y;\n\n\t\tfor(int j=0;j<2;j++){\n\t\t\tv[j].x = p[2*j+1].x - p[2*j].x;\n\t\t\tv[j].y = p[2*j+1].y - p[2*j].y;\n\t\t}\n\n\t\tif(cross_p(v[0], v[1]) < N)\n\t\t\tcout<<\"2\"<<endl;\n\t\telse if(inner_p(v[0], v[1]) < N)\n\t\t\tcout<<\"1\"<<endl;\n\t\telse\n\t\t\tcout<<\"0\"<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include<bits/stdc++.h>\n#define INF         1e9\n#define EPS         1e-9\n#define REP(i,n)    for(lint i=0,i##_len=(n);i<i##_len;++i)\n#define REP1(i,n)   for(lint i=1,i##_len=(n);i<=i##_len;++i)\n#define REPR(i,n)   for(lint i=(n)-1;i>=0;--i)\n#define REPR1(i,n)  for(lint i=(n);i>0;--i)\n#define REPC(i,obj) for(auto i:obj)\n#define R_UP(a,b)   (((a)+(b)-1)/(b))\n#define ALL(obj)    (obj).begin(),(obj).end()\n#define SETP        cout << fixed << setprecision(10)\nusing namespace std;\nusing lint = long long;\ntemplate<typename T = lint>inline T in() { T x; cin >> x; return x; }\n\nclass vec2d {\npublic:\n\tdouble x, y;\n\tvec2d(double x, double y) :x(x), y(y) {}\n\tdouble norm() const {\n\t\treturn sqrt(x * x + y * y);\n\t}\n\tvec2d operator+(vec2d v) {\n\t\treturn vec2d(x + v.x, y + v.y);\n\t}\n\tvec2d operator-(vec2d v) {\n\t\treturn vec2d(x - v.x, y - v.y);\n\t}\n\tvec2d operator*(double k) const {\n\t\treturn vec2d(x * k, y * k);\n\t}\n\tvec2d operator/(double k)const {\n\t\treturn vec2d(x / k, y / k);\n\t}\n\tstatic double inner_product(const vec2d&a, const vec2d&b) {\n\t\treturn a.x * b.x + a.y * b.y;\n\t}\n\tstatic double cros_product(const vec2d&a, const vec2d&b) {\n\t\treturn a.x * b.y - a.y * b.x;\n\t}\n\tstatic double argument(const vec2d&a, const vec2d&b) {\n\t\treturn atan2(cros_product(a, b), inner_product(a, b));\n\t}\n\tstatic vec2d projection(const vec2d&a, const vec2d&b) {\n\t\tdouble n = a.norm();\n\t\treturn a * vec2d::inner_product(a, b) / n / n;\n\t}\n};\nsigned main() {\n\tSETP;\n\tint q = in();\n\tREP(i, q) {\n\t\tdouble xp0 = in(), yp0 = in(), xp1 = in(), yp1 = in(), xp2 = in(), yp2 = in(), xp3 = in(), yp3 = in();\n\t\tvec2d s1(xp1 - xp0, yp1 - yp0), s2(xp3 - xp2, yp3 - yp2);\n\t\tdouble arg = vec2d::argument(s1, s2);\n\t\tif (abs(arg) < EPS || abs(abs(arg) - M_PI) < EPS) {\n\t\t\tcout << '2' << endl;\n\t\t} else if (abs(abs(arg) - M_PI_2) < EPS) {\n\t\t\tcout << '1' << endl;\n\t\t} else {\n\t\t\tcout << '0' << endl;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef struct{\n\tdouble x,y;\n}point;\npoint make(double x,double y){\n\tpoint res;\n\tres.x=x;\n\tres.y=y;\n\treturn res;\n}\n//a-b\npoint vec(point a,point b){\n\tpoint res;\n\tres.x=a.x-b.x;\n\tres.y=a.y-b.y;\n\treturn res;\n}\n// a・b\ndouble internal(point a,point b){\n\treturn a.x*b.x+a.y*b.y;\n}\n//|a|\ndouble  absolute(point a){\nreturn sqrt(internal(a,a));\n}\n//a=x1+iy1,b=x2+iy2 a*b\npoint imaseki(point a,point b){\npoint res;\nres.x=a.x*b.x-a.y*b.y;\nres.y=a.x*b.y+a.y*b.x;\nreturn res;\n}\n//共役\npoint conjugate(point a){\npoint res;\nres.x=a.x;\nres.y=-a.y;\nreturn res;\n}\nint main(){\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\tpoint p0,p1,p2,p3;\n\tdouble x,y;\n\tcin>>x>>y;\n\tp0=make(x,y);\n\tcin>>x>>y;\n\tp1=make(x,y);\n\tcin>>x>>y;\n\tp2=make(x,y);\n\tcin>>x>>y;\n\tp3=make(x,y);\n\tpoint vec1,vec2;\n\tvec1=vec(p0,p1);\n\tvec2=vec(p2,p3);\n\tdouble nai=internal(vec1,vec2);\n\tdouble zetai=absolute(vec1)*absolute(vec2);\n\tif(nai==0){\n\tcout<<1<<endl;\n\t}else if(nai==zetai){\n\tcout<<2<<endl;\n\t}else {\n\tcout<<0<<endl;\n\t}\n\n\t}\n\n\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class T> inline bool chmax(T &a, T b) {\n    if(a < b) {\n        a = b;\n        return 1;\n    }\n    return 0;\n}\ntemplate <class T> inline bool chmin(T &a, T b) {\n    if(a > b) {\n        a = b;\n        return 1;\n    }\n    return 0;\n}\ntypedef long long int ll;\n\n#define ALL(v) (v).begin(), (v).end()\n#define RALL(v) (v).rbegin(), (v).rend()\n#define endl \"\\n\"\nconst double EPS = 1e-7;\nconst int INF = 1 << 30;\nconst ll LLINF = 1LL << 60;\nconst double PI = acos(-1);\nconst int MOD = 1000000007;\nconst int dx[4] = {1, 0, -1, 0};\nconst int dy[4] = {0, 1, 0, -1};\n\n//-------------------------------------\n\n// Point : 複素数型を位置ベクトルとして扱う\n// 実軸(real)をx軸、挙軸(imag)をy軸として見る\nusing Point = complex<double>;\n\ninline bool equal(const double &a, const double &b) {\n    return fabs(a - b) < EPS;\n}\n\n// 単位ベクトル(unit vector)を求める\nPoint unitVector(const Point &a) { return a / abs(a); }\n\n// 法線ベクトル(normal vector)を求める\n// 90度回転した単位ベクトルをかける\n// -90度がよければPoint(0, -1)をかける\nPoint normalVector(const Point &a) { return a * Point(0, 1); }\n\n// 内積(dot product) : a・b = |a||b|cosΘ\ndouble dot(const Point &a, const Point &b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// 外積(cross product) : a×b = |a||b|sinΘ\ndouble cross(const Point &a, const Point &b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// Line : 直線を表す構造体\n// b - a で直線・線分を表せる\nstruct Line {\n    Point a, b;\n    Line() = default;\n    Line(Point a, Point b) : a(a), b(b) {}\n    // Ax+By=C\n    Line(double A, double B, double C) {\n        if(equal(A, 0)) {\n            a = Point(0, C / B), b = Point(1, C / B);\n        } else if(equal(B, 0)) {\n            b = Point(C / A, 0), b = Point(C / A, 1);\n        } else {\n            a = Point(0, C / B), b = Point(C / A, 0);\n        }\n    }\n    friend ostream &operator<<(ostream &os, Line &p) {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream &operator>>(istream &is, Line &a) {\n        return is >> a.a >> a.b;\n    }\n};\n\n// Segment : 線分を表す構造体\n// Lineと同じ\nstruct Segment : Line {\n    Segment() = default;\n\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\n// Circle : 円を表す構造体\n// pが中心の位置ベクトル、rは半径\nstruct Circle {\n    Point p;\n    double r;\n\n    Circle() = default;\n\n    Circle(Point p, double r) : p(p), r(r) {}\n};\n\n// 2直線の直交判定 : a⊥b <=> dot(a, b) = 0\nbool isOrthogonal(const Line &a, const Line &b) {\n    return equal(dot(a.b - a.a, b.b - b.a), 0);\n}\n// 2直線の平行判定 : a//b <=> cross(a, b) = 0\nbool isParallel(const Line &a, const Line &b) {\n    return equal(cross(a.b - a.a, b.b - b.a), 0);\n}\n\n// 点cが直線ab上にあるか\nbool isPointOnLine(const Point &a, const Point &b, const Point &c) {\n    return isParallel(Line(a, b), Line(a, c));\n}\n\n// 点cが\"線分\"ab上にあるか\nbool isPointOnSegment(const Point &a, const Point &b, const Point &c) {\n    // |a-c| + |c-b| <= |a-b| なら線分上\n    return (abs(a - c) + abs(c - b) < abs(a - b) + EPS);\n}\n\n// 射影(projection)\n// 直線(線分)lに点pから引いた垂線の足を求める\nPoint projection(const Line &l, const Point &p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\n// 反射(reflection)\n// 直線lを対称軸として点pと線対称の位置にある点を求める\nPoint reflection(const Line &l, const Point &p) {\n    return p + (projection(l, p) - p) * 2.0;\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(15);\n    int q;\n    cin >> q;\n    while(q--) {\n        vector<Point> p(4);\n        for(int i = 0; i < 4; i++) {\n            double x, y;\n            cin >> x >> y;\n            p[i] = Point(x, y);\n        }\n        Line s(p[0], p[1]);\n        Line t(p[2], p[3]);\n        if(isParallel(s, t)) {\n            cout << 2 << endl;\n        } else if(isOrthogonal(s, t)) {\n            cout << 1 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <complex>\nusing namespace std;\ntypedef complex<double> P;\n\n/* ?¨±?????????????????  */\n#define EPS (1e-10)\n/* 2?????????????????????????????????????????? */\n#define EQ(a,b) (abs((a)-(b)) < EPS)\n\n/* ?????? (cross product) : a??b = |a||b|sin */\ndouble cross(const P& a, const P& b) {\n  return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n/* ?????? (dot product) : a???b = |a||b|cos??  */\ndouble dot(const P& a, const P& b) {\n  return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n/* 2??´????????´????????? : a??\\b <=> dot(a, b) = 0 */\nint isOrthogonal(const P& a1, const P& a2, const P& b1, const P& b2) {\n  return EQ( dot(a1-a2, b1-b2), 0.0 );\n}\n\n/* 2??´?????????????????? : a//b <=> cross(a, b) = 0 */\nint isParallel(const P& a1, const P& a2, const P& b1, const P& b2) {\n  return EQ( cross(a1-a2, b1-b2), 0.0 );\n}\n\nint main() {\n  int n;\n  int ax, ay, bx, by, cx, cy, dx, dy;\n  scanf(\"%d\", &n);\n\n  while(n--) {\n    scanf(\"%d %d %d %d %d %d %d %d\", &ax, &ay, &bx, &by, &cx, &cy, &dx, &dy);\n    P a(ax, ay), b(bx, by), c(cx, cy), d(dx, dy);\n    if(isParallel(a, b, c, d)) puts(\"2\");\n    else if(isOrthogonal(a, b, c, d)) puts(\"1\");\n    else puts(\"0\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace::std;\nstruct __INIT{__INIT(){cin.tie(0);ios::sync_with_stdio(false);cout<<fixed<<setprecision(15);}} __init;\n#define endl \"\\n\"\n#include <boost/multiprecision/cpp_dec_float.hpp>\n#include <boost/multiprecision/cpp_int.hpp>\n#include <boost/numeric/interval.hpp>\n#include <boost/numeric/interval/io.hpp>\n#include <boost/any.hpp>\nusing namespace::std;\nnamespace mp = boost::multiprecision;\ntypedef mp::number<mp::cpp_dec_float<32,int64_t>> cfloat;\ntypedef mp::cpp_int cint;\ntypedef long long lint;\ntypedef long long ll;\ntypedef long double ldouble;\ntypedef vector<lint> vec;\ntypedef vector<vector<lint>> mat;\ntypedef vector<vector<vector<lint>>> mat3;\ntypedef vector<double> dvec;\ntypedef vector<vector<double>> dmat;\ntypedef vector<vector<vector<double>>> dmat3;\ntypedef vector<string> svec;\ntypedef vector<vector<string>> smat;\ntypedef vector<vector<vector<string>>> smat3;\ntypedef vector<pair<lint,lint>> pvec;\ntypedef vector<vector<pair<lint,lint>>> pmat;\ntypedef vector<vector<vector<pair<lint,lint>>>> pmat3;\n#define rep(i, n) for(lint i = 0; i < (lint)(n); i++)\n#define irep(i) for(lint i = 0;; i++)\n#define irep1(i) for(lint i = 1;; i++)\n#define irep2(i) for(lint i = 2;; i++)\n#define rrep(i, n) for(lint i = (lint)(n-1); i >-1; i--)\n#define rrepi(i,a,b) for(lint i = (lint)(b-1); i >a-1; i--)\n#define repi(i,a,b) for(lint i=lint(a);i<lint(b);i++)\n#define rep2(i,a,b,c) for(lint i=lint(a);i>lint(b);i+=c)\n#define all(x) (x).begin(),(x).end()\n#define PI 3.141592653589793\n#define dist(x1,y1,x2,y2) (pow(pow(x2-x1,2)+pow(y2-y1,2),0.5))\n#define output(v) do{bool f=0;for(auto i:v){cout<<(f?\" \":\"\");if(i>INF/2)cout<<\"INF\";else cout<<i;f=1;}cout<<\"\\n\";}while(0)\n#define output2(v) for(auto j:v)output(j);\n#define input(a,n) lint n;cin>>n;vector<lint>a(n);rep(i,n)cin>>a[i];\n#define SUM(v) accumulate(all(v),0LL)\n#define INF (1LL<<60)\n#define IINF (1<<30)\n#define EPS (1e-10)\n#define LINF 9223372036854775807\n#define MOD 1000000007\nstruct any{\n    string s;\n    any(string s):s(s){}\n    operator lint()const{return stoll(s);}\n    operator double()const{return stod(s);}\n    operator string()const{return s;}\n};\nany in(void){\n    return any(*istream_iterator<string>(cin));\n}\ninline lint gcd(lint a,lint b){return b?gcd(b,a%b):a;}\ninline lint lcm(lint a,lint b){return a*b/gcd(a,b);}\ninline bool chmin(auto& s,const auto& t){bool res=s>t;s=min(s,t);return res;}\ninline bool chmax(auto& s,const auto& t){bool res=s<t;s=max(s,t);return res;}\ninline lint mex(vector<lint> s){\n    lint res=0;\n    sort(all(s));\n    while(binary_search(all(s),res))res++;\n    return res;\n}\nvector<lint> dx={-1,1,0,0,1,1,-1,-1};\nvector<lint> dy={0,0,-1,1,1,-1,1,-1};\n\ninline bool EQ(auto a,auto b){return abs(a-b)<EPS;}\ninline double dot(const complex<double>& s,const complex<double>& t){\n    return real(s*conj(t));\n}\ninline double cross(const complex<double>& s,const complex<double>& t){\n    return -imag(s*conj(t));\n}\ninline complex<double> projection(const complex<double>& a,const complex<double>& b,const complex<double>& c){\n    return a+dot(b-a,c-a)/conj(b-a);\n}\ninline complex<double> reflection(const complex<double>& a,const complex<double>& b,const complex<double>& c){\n    return projection(a,b,c)*2.-c;\n}\ninline bool parallel(const complex<double>& a,const complex<double>& b,const complex<double>& c,const complex<double>& d){\n    return EQ(cross(a-b,c-d),0.);\n}\ninline bool orthogonal(const complex<double>& a,const complex<double>& b,const complex<double>& c,const complex<double>& d){\n    return EQ(dot(a-b,c-d),0.);\n}\nint main(){\n    lint n;\n    cin>>n;\n    rep(i,n){\n        complex<double> a{in(),in()},b{in(),in()},c{in(),in()},d{in(),in()};\n        cout<<2*parallel(a,b,c,d)+orthogonal(a,b,c,d)<<endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>           // printf(), scanf()\n#include <cmath>            // fabs()\n\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstatic const double EPS = 1e-10;\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n};\n\nstruct Segment\n{\n\tPoint p1, p2;\n};\n\ntypedef Point Vector;\n\ndouble\ndot(Vector a, Vector b)\n{\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble\ncross(Vector a, Vector b)\n{\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool\nisParallel(Vector a, Vector b)\n{\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool\nisParallel(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool\nisParallel(Segment s1, Segment s2)\n{\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool\nisOrthogonal(Vector a, Vector b)\n{\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool\nisOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool\nisOrthogonal(Segment s1, Segment s2)\n{\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint\nmain(int argc, char** argv)\n{\n\tSegment s1, s2;\n\tint q, i;\n\n\tscanf(\"%d\", &q);\n\tfor (i = 0; i < q; ++i)\n\t{\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tint res = -1;\n\n\t\tscanf(\"%d %d %d %d %d %d %d %d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n\t\ts1.p1.x = x0, s1.p1.y = y0;\n\t\ts1.p2.x = x1, s1.p2.y = y1;\n\t\ts2.p1.x = x2, s2.p1.y = y2;\n\t\ts2.p2.x = x3, s2.p2.y = y3;\n\n\t\tif (isParallel(s1, s2))\n\t\t\tres = 2;\n\t\telse if (isOrthogonal(s1, s2))\n\t\t\tres = 1;\n\t\telse\n\t\t\tres = 0;\n\n\t\tprintf(\"%d\\n\", res);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) { return fabs(b - a) < EPS; }\n\nusing Point = complex< double >;\n\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nPoint rotate(double theta, const Point &p) {\n  return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\ndouble radian_to_degree(double r) {\n  return (r * 180.0 / PI);\n}\n\ndouble degree_to_radian(double d) {\n  return (d * PI / 180.0);\n}\n\ndouble get_angle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if(alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nnamespace std {\n  bool operator<(const Point &a, const Point &b) {\n    return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n  }\n}\n\n\nstruct Line {\n  Point a, b;\n\n  Line() {}\n\n  Line(Point a, Point b) : a(a), b(b) {}\n\n  Line(double A, double B, double C) // Ax + By = C\n  {\n    if(eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n    else if(eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n    else a = Point(0, C / B), b = Point(C / A, 0);\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment : Line {\n  Segment() {}\n\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle() {}\n\n  Circle(Point p, double r) : p(p), r(r) {}\n};\n\nusing Points = vector< Point >;\nusing Polygon = vector< Point >;\nusing Segments = vector< Segment >;\nusing Lines = vector< Line >;\nusing Circles = vector< Circle >;\n\ndouble cross(const Point &a, const Point &b) {\n  return real(a) * imag(b) - imag(a) * real(b);\n}\n\ndouble dot(const Point &a, const Point &b) {\n  return real(a) * real(b) + imag(a) * imag(b);\n}\n\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n  if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                         // \"ON_SEGMENT\"\n}\n\nbool parallel(const Line &a, const Line &b) {\n  return abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n\nbool orthogonal(const Line &a, const Line &b) {\n  return abs(cross(a.a - a.b, b.a - b.b)) < EPS;\n}\n\nPoint projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint reflection(const Line &l, const Point &p) {\n  return p + (projection(l, p) - p) * 2.0;\n}\n\nbool Intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\n\nbool intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\ndouble distance(const Line &l, const Point &p);\n\nbool intersect(const Circle &c, const Line &l) {\n  return distance(l, c.p) <= c.r + EPS;\n}\n\nbool intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\nbool intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nint intersect(const Circle &c, const Segment &l) {\n  if(norm(projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  const double d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if(d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if(d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = projection(l, c.p);\n  if(dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\ndouble distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\ndouble distance(const Line &l, const Point &p) {\n  return abs(p - projection(l, p));\n}\n\ndouble distance(const Line &l, const Line &m) {\n  return intersect(l, m) ? 0 : distance(l, m.a);\n}\n\ndouble distance(const Segment &s, const Point &p) {\n  Point r = projection(s, p);\n  if(intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\ndouble distance(const Segment &a, const Segment &b) {\n  if(intersect(a, b)) return 0;\n  return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\n\ndouble distance(const Line &l, const Segment &s) {\n  if(intersect(l, s)) return 0;\n  return min(distance(l, s.a), distance(l, s.b));\n}\n\nPoint crosspoint(const Line &l, const Line &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if(abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPoint crosspoint(const Segment &l, const Segment &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if(abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\npair< Point, Point > crosspoint(const Circle &c, const Line l) {\n  Point hp = projection(l, c.p), h = hp - c.p;\n  const double d2 = norm(h);\n  Point v = (l.b - l.a) * sqrt(c.r * c.r - d2) / abs(l.b - l.a);\n  return {hp - v, hp + v};\n}\n\npair< Point, Point > crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if(intersect(c, l) == 2) return crosspoint(c, aa);\n  auto ret = crosspoint(c, aa);\n  if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n  else ret.first = ret.second;\n  return ret;\n}\n\npair< Point, Point > crosspoint(const Circle &c1, const Circle &c2) {\n  double d = abs(c1.p - c2.p);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return {p1, p2};\n}\n\nbool is_convex(const Polygon &p) {\n  int n = (int) p.size();\n  for(int i = 0; i < n; i++) {\n    if(ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\nPolygon convex_hull(Polygon &p) {\n  int n = (int) p.size(), k = 0;\n  if(n <= 2) return p;\n  sort(p.begin(), p.end());\n  vector< Point > ch(2 * n);\n  for(int i = 0; i < n; ch[k++] = p[i++]) {\n    while(k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n    while(k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  ch.resize(k - 1);\n  return ch;\n}\n\nenum {\n  OUT, ON, IN\n};\n\nint contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for(int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if(a.imag() > b.imag()) swap(a, b);\n    if(a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if(cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\n\nbool merge_if_able(Segment &s1, Segment s2) {\n  if(abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n  if(ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n  if(ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n  s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n  return true;\n}\n\nvoid merge_segments(vector< Segment > &segs) {\n  for(int i = 0; i < segs.size(); i++) {\n    if(segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for(int i = 0; i < segs.size(); i++) {\n    for(int j = i + 1; j < segs.size(); j++) {\n      if(merge_if_able(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\nvector< vector< int > > segment_arrangement(vector< Segment > &segs, vector< Point > &ps) {\n  vector< vector< int > > g;\n  int N = (int) segs.size();\n  for(int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for(int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if(cross(p1, p2) == 0) continue;\n      if(intersect(segs[i], segs[j])) {\n        ps.emplace_back(crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  int M = (int) ps.size();\n  g.resize(M);\n  for(int i = 0; i < N; i++) {\n    vector< int > vec;\n    for(int j = 0; j < M; j++) {\n      if(intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for(int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\nPolygon convex_cut(Polygon &U, Line l) {\n  Polygon ret;\n  for(int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if(ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if(ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\ndouble area2(const Polygon &p) {\n  double A = 0;\n  for(int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\ndouble convex_diameter(Polygon &p) {\n  int N = (int) p.size();\n  int is = 0, js = 0;\n  for(int i = 1; i < N; i++) {\n    if(p[i].imag() > p[is].imag()) is = i;\n    if(p[i].imag() < p[js].imag()) js = i;\n  }\n  double maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if(cross(p[(i + 1) % N] - p[i], p[(j + 1) % N] - p[j]) >= 0) {\n      j = (j + 1) % N;\n    } else {\n      i = (i + 1) % N;\n    }\n    if(norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while(i != is || j != js);\n  return sqrt(maxdis);\n}\n\npair< Point, Point > closer(const pair< Point, Point > &a, const pair< Point, Point > &b) {\n  return distance(a.first, a.second) < distance(b.first, b.second) ? a : b;\n}\n\npair< Point, Point > closest_pair_util(Points &ps, int l, int r) {\n  if(r - l == 2) {\n    return {ps[l], ps[l + 1]};\n  }\n  if(r - l == 3) {\n    pair< Point, Point > a(ps[l], ps[l + 1]), b(ps[l + 1], ps[l + 2]), c(ps[l], ps[l + 2]);\n    return closer(a, closer(b, c));\n  }\n\n  int mid = (l + r) / 2;\n  Point midPoint = ps[mid];\n  auto res = closer(closest_pair_util(ps, l, mid), closest_pair_util(ps, mid, r));\n  double d = distance(res.first, res.second);\n\n  Points pos[2];\n  for(int i = l; i < r; ++i) {\n    if(abs(ps[i].real() - midPoint.real()) < d) pos[i < mid].push_back(ps[i]);\n  }\n  for(const auto &i : pos[0]) {\n    for(const auto &j : pos[1]) {\n      if(distance(i, j) < d) {\n        d = distance(i, j);\n        res = {i, j};\n      }\n    }\n  }\n  return res;\n}\n\npair< Point, Point > closest_pair(Points ps) {\n  if(ps.size() <= 1) exit(-1);\n  for(int i = 0; i < ps.size(); ++i) {\n    ps[i] = rotate(0.1, ps[i]);\n  }\n  sort(ps.begin(), ps.end());\n  if(ps.size() == 2) return {ps[0], ps[1]};\n  auto res = closest_pair_util(ps, 0, ps.size());\n  res.first = rotate(-0.1, res.first);\n  res.second = rotate(-0.1, res.second);\n  return res;\n}\n\nint main() {\n  int Q;\n  cin >> Q;\n  while(Q--) {\n    Line s1, s2;\n    cin >> s1 >> s2;\n    if(parallel(s1, s2)) puts(\"2\");\n    else if(orthogonal(s1, s2)) puts(\"1\");\n    else puts(\"0\");\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Vector {\npublic:\n  double x, y;\n  Vector() {}\n  Vector(double x, double y) : x(x), y(y) {}\n\n  Vector operator+(Vector v) { return Vector(x + v.x, y + v.y); }\n  Vector operator-(Vector v) { return Vector(x - v.x, y - v.y); }\n  double norm() { return x * x + y * y; }\n};\n\n// inner product\ndouble dot(Vector v1, Vector v2) { return v1.x * v2.x + v1.y * v2.y; }\n\n// inner product\ndouble cross(Vector v1, Vector v2) { return v1.x * v2.y - v1.y * v2.x; }\n\nclass Line {\npublic:\n  Vector v1, v2;\n  Line() {}\n  Line(Vector v1, Vector v2) : v1(v1), v2(v2) {}\n};\n\nbool is_parrallel(Vector a, Vector b) { return equals(cross(a, b), 0); }\nbool is_parrallel(Line a, Line b) {\n  return is_parrallel(a.v1 - a.v2, b.v1 - b.v2);\n}\n\nbool is_orthogonal(Vector a, Vector b) { return equals(dot(a, b), 0); }\nbool is_orthogonal(Line a, Line b) {\n  return is_orthogonal(a.v1 - a.v2, b.v1 - b.v2);\n}\n\nint main() {\n  Line line[2];\n  int nq;\n  cin >> nq;\n  for (int i = 0; i < nq; i++) {\n    for (int j = 0; j < 2; j++) {\n      int x0, y0, x1, y1;\n      cin >> x0 >> y0 >> x1 >> y1;\n      line[j] = Line(Vector(x0, y0), Vector(x1, y1));\n    }\n    if (is_parrallel(line[0], line[1]))\n      cout << 2 << endl;\n    else if (is_orthogonal(line[0], line[1]))\n      cout << 1 << endl;\n    else\n      cout << 0 << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <vector>\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#include<functional>\n//--\n#include<list>\n#include<deque>\n#include<bitset>\n#include<set>\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<sstream>\n#include<complex>\n#define X first\n#define Y second\n#define pb push_back\n#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))\n#define rrep(X,Y) for (int (X) = Y-1;(X) >=0;--(X))\n#define all(X) (X).begin(),(X).end()\n#define rall(X) (X).rbegin(),(X).rend()\n\n#define re real()\n#define im imag()\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef complex<double> pt;\ntypedef pair<pt,pt> line; //sX+tY\n\ndouble dot(pt a,pt b){return (conj(a)*b).real();}\ndouble cros(pt a,pt b){return (conj(a)*b).imag();}\npt proj(pt a,pt to){\n  return dot(a,to)/norm(to)*to;\n}\n\npt refle(pt a,pt mirror){\n  return pt(2)*proj(a,mirror)-a;\n}\n\nint pt3(pt a,pt b,pt c){\n  pt p=b-a,q=c-a;\n  double tmp;\n  tmp=cros(p,q);\n  if(tmp>0){\n    return 0;\n  }else if(tmp<0){\n    return 1;\n  }else if(norm(p+q)<max(norm(p),norm(q))){\n    return 2;\n  }else if(norm(q)>norm(p)){\n    return 3;\n  }else if(norm(q)<norm(p)){\n    return 4;\n  }\n  return 5;\n}\n\npt dir(line a){return a.Y-a.X;}\n\nint line2(line a,line b){\n  \n  if(dot(dir(a),dir(b))==0)\n    return 1;//直交\n  if(cros(dir(a),dir(b))==0)\n    return 2;//平行\n  return 0;\n}\n\nint main(){\n  int i,j,k,n,re;\n  line s1,s2;\n  double a[8];\n  cin>>n;\n  rep(i,n){\n    rep(j,8)\n      cin>>a[j];\n    s1.X=pt(a[0],a[1]);\n    s1.Y=pt(a[2],a[3]);\n    s2.X=pt(a[0+4],a[1+4]);\n    s2.Y=pt(a[2+4],a[4+3]);\n    cout<<line2(s1,s2)<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\nusing namespace std;\ntypedef complex<double> Point;\n\nint main() {\n    int n;\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> n;\n    while (n--)\n    {\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >>y3;\n        Point z0(x1 - x0, y1 - y0); \n        Point z1(x3 - x2, -y3 + y2);\n        Point z2(-y3 + y2, -x3 + x2);\n        if (!(z0 * z1).imag()) cout << \"2\\n\";\n        else if (!(z0 * z2).imag()) cout << \"1\\n\";\n        else cout << \"0\\n\";\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define ll long long\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nusing namespace std;\nconst int maxn=500000;\nconst int INF=2e9;\nconst int mod=10007;\nclass Point\n{\npublic:\n    double x,y;\n    Point(double x=0,double y=0):x(x),y(y) {}\n    Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n    Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n    Point operator * (double a) {return Point(a*x,a*y);}\n    Point operator / (double a) {return Point(x/a,y/a);}\n    double abs() {return sqrt(norm());}\n    double norm() {return x*x+y*y;}\n    bool operator < (const Point &p) const {\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator == (const Point &p) const{\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\ntypedef Point Vector;\ndouble dot(Vector a,Vector b)\n{\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b)\n{\n    return a.x*b.y-a.y*b.x;\n}\nbool isOrthogonal(Vector a,Vector b)\n{\n    return equals(dot(a,b),0.0);\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2)\n{\n    return isOrthogonal(a1-a2,b1-b2);\n}\nbool isParallel(Vector a,Vector b)\n{\n    return equals(cross(a,b),0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2)\n{\n    return isParallel(a1-a2,b1-b2);\n}\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    while(n--)\n    {\n        Point a1,a2,b1,b2;\n        scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&a1.x,&a1.y,&a2.x,&a2.y,&b1.x,&b1.y,&b2.x,&b2.y);\n        if(isParallel(a1,a2,b1,b2))\n        {\n            printf(\"2\\n\");\n            continue;\n        }\n        if(isOrthogonal(a1,a2,b1,b2))\n        {\n            printf(\"1\\n\");\n            continue;\n        }\n        printf(\"0\\n\");\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\n#define INF 0xffffffff\n\nint main() {\n    int q, x[2], y[2];\n    cin >> q;\n    loop(i, 0, q) {\n        double k[2];\n        loop(j, 0, 2) {\n            cin >> x[0] >> y[0] >> x[1] >> y[1];\n            if (x[0] == x[1]) k[i] = INF;\n            else if(x[0] == x[1]) k[i] = 0;\n            else k[j] = (double) (y[0] - y[1]) / (double) (x[0] - x[1]);\n        }\n        if (abs(k[0] - k[1]) < 0.0001)cout << 2 << endl;\n        else if (abs(k[0] - (-1.0) * k[1]) < 0.0001 || abs((-1.0) * k[0] - k[1]) < 0.0001)cout << 1 << endl;\n        else if ((abs(k[0]) <= 0.0001 && k[1] == INF) || (k[1] == 0 && k[0] == INF)) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <complex>\n#include <vector>\nusing namespace std;\nconst double eps = 1e-10;\n#define EQ(a, b) (abs((a) - (b)) < eps)\nusing P = complex<double>;      // position\ndouble dot(const P &a, const P &b) { return real(conj(a) * b); }\ndouble cross(const P &a, const P &b) { return imag(conj(a) * b); }\n\nbool is_orthogonal(P a1, P a2, P b1, P b2) {\n    return EQ(dot(a1 - a2, b1 - b2), 0);\n}\nbool is_parallel(P a1, P a2, P b1, P b2) {\n    return EQ(cross(a1 - a2, b1 - b2), 0);\n}\n\n#include <iostream>\nint main() {\n    int q; cin >> q;\n    while (q--) {\n        vector<P> ps;\n        for (int i = 0; i < 4; i++) {\n            int x, y; cin >> x >> y;\n            ps.emplace_back(x, y);\n        }\n        if (is_parallel(ps[0], ps[1], ps[2], ps[3])) {\n            cout << 2 << endl;\n        } else if (is_orthogonal(ps[0], ps[1], ps[2], ps[3])) {\n            cout << 1 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nstruct Point{double x,y;};//点\nstruct Segment{Point p1,p2;};//線\ndouble dot(Point a,Point b){//内積\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(Point a,Point b){//外積\n    return a.x*b.y-a.y*b.x;\n}\n\nint main(void){\n    int n;cin>>n;\n    Segment a,b;\n    Point p,q;\n    for(int i=0;i<n;i++){\n        cin>>a.p1.x>>a.p1.y>>a.p2.x>>a.p2.y;\n        cin>>b.p1.x>>b.p1.y>>b.p2.x>>b.p2.y;\n        p.x=a.p2.x-a.p1.x;\n        p.y=a.p2.y-a.p1.y;\n        q.x=b.p2.x-b.p1.x;\n        q.y=b.p2.y-b.p1.y;\n        if(dot(p,q)==0.0)cout<<1<<endl;\n        else if(cross(p,q)==0.0)cout<<2<<endl;\n        else cout<<0<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nint main()\n{\n    double xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n    int q;\n\n    cin >> q;\n\n    //内積\n    for( int i = 0; i < q; i++ )\n    {\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n\n        double a, b, c, d;\n        a = xp1 - xp0;\n        b = yp1 - yp0;\n        c = xp3 - xp2;\n        d = yp3 - yp2;\n\n        if( a * c + b * d == 0 )        //直交：内積0\n            cout << 1 << endl;\n        else if( a * d == c * b )       //並行\n            cout << 2 << endl;\n        else                            //それ以外\n            cout << 0 << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<vector>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\n\tpublic:\n\t\tdouble x, y;\n\n\t\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\n\t\tPoint operator + (Point p){ return Point(x + p.x, y + p.y);}\n\t\tPoint operator - (Point p){ return Point(x - p.x, y - p.y);}\n\t\tPoint operator * (double a){ return Point(a * x, a * y);}\n\t\tPoint operator / (double a){ return Point(x / a, y / a);}\n\n\t\tdouble abs(){ return sqrt(norm());}\n\t\tdouble norm(){ return x * x + y * y;}\n\n\t\tbool operator < (const Point &p) const{\n\t\t\treturn x != p.x ? x < p.x : y < p.y;\n\t\t}\n\n\t\tbool operator == (const Point &p) const{\n\t\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t\t}\n};\n\nstruct Segment {\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle{\n\tpublic:\n\t\tPoint c;\n\t\tdouble r;\n\t\tCircle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Line l1, Line l2){\n\treturn equals(dot(l1.p2 - l1.p1, l2.p2 - l2.p1), 0.0);\n}\nbool isParallel(Line l1, Line l2){\n\treturn equals(cross(l1.p2 - l1.p1, l2.p2 - l2.p1), 0.0);\n}\n\nint main(void){\n\tLine l1, l2;\n\tint q;\n\tcin >> q;\n\tfor(int i=1;i<=q;i++){\n\t\tcin >> l1.p1.x >> l1.p1.y >> l1.p2.x >> l1.p2.y >> l2.p1.x >> l2.p1.y >> l2.p2.x >> l2.p2.y;\n\t\tif(isOrthogonal(l1, l2) == true) cout << \"1\" << endl;\n\t\telse if(isParallel(l1, l2) == true) cout << \"2\" << endl;\n\t\telse cout << \"0\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<set>\n#include<queue>\n#include<cstdlib>\n#include<algorithm>\n\nusing namespace std;\n#define pb push_back\n#define mp make_pair\n#define SZ(x) (int)(x).size()\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\ntypedef pair<double, double> pdd;\ntypedef pair<LL, LL> pll;\n\nconst double eps = 1e-10;\nconst double PI = acos(-1.0);\n//const double PI = 3.14159265358979323846264338327950288419716939937510\nint dcmp(const double &x) { if (fabs(x) < eps) return 0; return x < 0 ? -1 : 1; }\nconst int MOD = 1e9 + 7;\nconst int INF = 2e9;\nconst double INF_d = 1e64;\n\ntemplate<class T> \nT qmod(T a, T b){ T ret = 1; while (b){ if (b & 1) ret *= a; b >>= 1; a *= a; } return ret; }\ntemplate<class T>\nT gcd(T a, T b){ return !b ? a : gcd(b, a % b); }\ntemplate<class T>\nT ex_gcd(T a, T b, T &x, T &y){\n    if (!b){ x = 1, y = 0; return a; }\n    T t, ret;\n    ret = ex_gcd(b, a % b, x, y);\n    t = x, x = y, y = t - a / b * y;\n    return ret;\n}\ntemplate<class T>\nT inv(T t, T p){ return t == 1 ? 1 : (p - p / t) * inv(p % t, p) % p; }\n// head\n\ntypedef double db;\n\nstruct point{\n    db x, y;\n    point(){}\n    point(db a, db b): x(a), y(b){}\n    point operator + (const point &p){ return point(x + p.x, y + p.y); }\n    point operator - (const point &p){ return point(x - p.x, y - p.y); }\n    point operator * (const db &k){ return point(x * k, y * k); }\n    point operator / (const db &k){ return point(x / k, y / k); }\n    db operator ^ (const point &p){ return x * p.y - y * p.x; }\n    db operator * (const point &p){ return x * p.x + y * p.y; }\n    bool operator == (const point &p){ return !dcmp(x - p.x) && !dcmp(y - p.y); }\n    bool operator != (const point &p){ return dcmp(x - p.x) || dcmp(y - p.y); }\n    bool operator < (const point &p){ return x == p.x ? y < p.y : x < p.x; }\n    void read(){\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print(){\n        printf(\"%.10f %.10f\\n\", x, y);\n    }\n    point rotate(db &ang){ return point(x * cos(ang) - y * sin(ang), y * cos(ang) + x * sin(ang)); }\n    point norm() { return point(-y, x); }\n    db len() { return sqrt(x * x + y * y); }\n    db len2(){ return x * x + y * y; }\n};\n\npoint proj(point A, point B, point P){ // projection point of P in segment AB\n    point AB = B - A, AP = P - A;\n    return A + AB * (AP * AB / AB.len2());\n}\n\npoint refl(point A, point B, point P){ // reflection point of P int segment AB\n    return proj(A, B, P) * 2 - P;\n}\n\nstruct line{\n    point p[2], u;\n    line(){}\n    line(point s, point t){\n        p[0] = s, p[1] = t;\n        u = p[1] - p[0];\n    }\n    point get_point(double t){\n        return point(p[0] + u * t);\n    }\n};\n\nbool parallel(line L1, line L2){ // check whether two lines L1 and L2 are parallel\n    return !dcmp(L1.u ^ L2.u);\n}\n\nbool orthogonal(line L1, line L2){ // check whether two lines L1 and L2 are orthogonal\n    return !dcmp(L1.u * L2.u);\n}\n\nint n;\nline L[2];\n\nint main(){\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++){\n        for (int j = 0; j < 2; j++){\n            point a, b;\n            a.read(), b.read();\n            L[j] = line(a, b);\n        }\n        if (parallel(L[0], L[1])) puts(\"2\");\n        else if (orthogonal(L[0], L[1])) puts(\"1\");\n        else puts(\"0\");\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<cstdio>\n\nusing namespace std;\n\nint main()\n{\n\tint q;\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\n\t\tscanf(\"%d %d %d %d %d %d %d %d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n\n\t\tint l01x = x1 - x0, l01y = y1 - y0, l23x = x3 - x2, l23y = y3 - y2;\n\n\t\tif (l01x*l23y - l01y*l23x == 0)\n\t\t{\n\t\t\tprintf(\"2\\n\");\n\t\t}\n\t\telse if (l01x*l23x + l01y*l23y == 0)\n\t\t{\n\t\t\tprintf(\"1\\n\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"0\\n\");\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing Real = double;\nconstexpr Real EPS = 1e-10;\nconstexpr Real INF = 1e18;\nconst Real PI = acos(-1);\n\nusing P = complex<Real>;\nint sgn(const Real a) {\n    return (a < -EPS ? -1 : (a > EPS ? +1 : 0));\n}\n\ninline bool EQ(Real a, Real b) {\n    return (abs(a - b) < EPS);\n}\n\ninline Real Get_Value(Real a) {\n    return (EQ(a, 0) ? 0 : a);\n}\n\nistream &operator>>(istream &is, P &p) {\n    Real a, b;\n    is >> a >> b;\n    p = P(a, b);\n    return is;\n}\nostream &operator<<(ostream &os, P &p) {\n    return os << fixed << setprecision(12) << Get_Value(p.real()) << \" \" << Get_Value(p.imag());\n}\n\nP operator*(const P &p, const Real &d) {\n    return P(real(p) * d, imag(p) * d);\n}\n\nbool operator==(const P &p, const P &q) {\n    return (EQ(p.real(), q.real()) && EQ(p.imag(), q.imag()));\n}\n\nReal dot(const P &a, const P &b) {\n    // ベクトル a,b の内積\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\nReal cross(const P &a, const P &b) {\n    // 外積\n    return a.real() * b.imag() - a.imag() * b.real();\n}\n\nstruct Line {\n    // 直線\n    P a, b;\n\n    Line() = default;\n\n    Line(P a, P b) : a(a), b(b) {}\n\n    Line(Real A, Real B, Real C) // Ax + By = C\n    {\n        if(EQ(A, 0))\n            a = P(0, C / B), b = P(1, C / B);\n        else if(EQ(B, 0))\n            b = P(C / A, 0), b = P(C / A, 1);\n        else\n            a = P(0, C / B), b = P(C / A, 0);\n    }\n\n    friend ostream &operator<<(ostream &os, Line &p) {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream &operator>>(istream &is, Line &a) {\n        return is >> a.a >> a.b;\n    }\n};\n\nstruct Segment : Line {\n    // 線分\n    Segment() = default;\n    Segment(P a,P b):Line(a,b){}\n};\n\nstruct Circle {\n    // 円 p が中心 r が半径\n    P p;\n    Real r;\n    Circle() = default;\n    Circle(P p,Real r):p(p),r(r){};\n};\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\n// 点の回転方向\nint ccw(const P &a, P b, P c) {\n    b = b - a, c = c - a;\n    if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\" CがベクトルABの半時計方向にある\n    if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\" CがベクトルABの時計方向にある\n    if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\" Cが直線AB上かつAの方向にある\n    if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\" Cが直線AB上かつBの方向にある\n    return 0;                         // \"ON_SEGMENT\" Cが線分AB上に乗っている\n}\n\nbool is_orthogonal(const Line &a, const Line &b) {\n    // 2直線の直交判定\n    // 2つのベクトルの内積が0なら直交\n    return EQ(dot(a.a - a.b, b.a - b.b), 0.0);\n}\n\nbool is_parallel(const Line &a, const Line &b) {\n    // 2直線の平行判定\n    // 2つのベクトルの外積が0なら平行\n    return EQ(cross(a.b - a.a, b.a - b.b), 0.0);\n}\n\nbool is_point_on_line(const P &a, const P &b, const P &c) {\n    // 点cが直線a,b上にあるかどうか\n    // ab ベクトルと ac ベクトルが平行なら点cは直線a,b上にある\n    // 3点は同一直線状にあるともいえる\n    return EQ(cross(b - a, c - a), 0.0);\n}\n\nbool intersect(const Segment &s, const Segment &t) {\n    // 線分同士の交差判定\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nP projection(const Line &s, const P &p){\n    Real t = dot(p-s.a,s.a-s.b)/norm(s.a-s.b);\n    return s.a+(s.a-s.b)*t;\n}\n\nP refrection(const Line &s, const P &p) {\n    return (projection(s, p) - p) * 2.0 + p;\n}\n\nP refrection(const Segment &s, const P &p) {\n    return refrection((Line)s, p);\n}\n\nint main(){\n    int n;\n    cin >> n;\n    while(n--){\n        Line p,q;\n        cin >> p >> q;\n        if(is_parallel(p,q)){\n            cout << 2 << endl;\n        } else if(is_orthogonal(p,q)){\n            cout << 1 << endl;\n        }else {\n            cout << 0 << endl;\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    int q;\n    int i;\n    int xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3;\n    double a_s1;\n    double a_s2;\n    int int_a_s11;\n    int int_a_s21;\n    int int_a_s12;\n    int int_a_s22;\n    int ans;\n\n    cin >> q;\n    for ( i = 0; i < q; ++i){\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n\n        \n        if (xp1 == xp0){\n            a_s1 = xp1;\n        }else if (yp1 == yp0){\n            a_s1 = yp1;\n        }else{\n            a_s1 = (yp1 - yp0) / (xp1-xp0);\n        }\n        \n        if (xp3 == xp2){\n            a_s2 = xp3;\n        }else if (yp3 == yp2){\n            a_s2 = yp3;\n        }else{\n            a_s2 = (yp3 - yp2) / (xp3-xp2);\n        }\n        \n        ans = 0;\n        if (a_s1 == xp1 && a_s2 == xp3){\n            ans = 2;\n        }else if(a_s1 == yp1 && a_s2 == yp3){\n            ans = 2;\n        }else if(a_s1 == xp1 && a_s2 == yp3){\n            ans = 1;\n        }else if(a_s1 == yp1 && a_s2 == xp3){\n            ans = 1;\n        }else{\n            int_a_s11 = a_s1 * 1000;\n            int_a_s21 = a_s2 * 1000;\n            int_a_s21 = 1 /a_s2 * 1000;\n            if (int_a_s11 == int_a_s21){\n                //cout << int_a_s1 << \" \"<< int_a_s2 << endl;\n                ans = 2;\n            }else if(int_a_s11 == int_a_s22){\n                ans = 1;\n            }\n        }\n        \n        cout << ans << endl;\n        \n    }\n    /*\n    for ( i = 0; i < q; ++i){\n        cout << xp0 << endl;\n        cout << yp0 << endl;\n        cout << xp1 << endl;\n        cout << yp1 << endl;\n        cout << xp2 << endl;\n        cout << yp2 << endl;\n        cout << xp3 << endl;\n        cout << yp3 << endl;\n    }\n    */\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#line 1 \"test/geometry/parallel_orthogonal.test.cpp\"\n#define PROBLEM \"http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\"\n\n#include <bits/stdc++.h>\nusing namespace std;\nusing lint = long long;\n\n#line 1 \"test/geometry/../../library/geometry/geometry.cpp\"\nconst double eps = 1e-10;\ninline bool eq(double a, double b) { return fabs(a - b) < eps; }\nconst double pi = acos(-1);\n\nstruct Point {\n    double x, y;\n    Point() {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point &p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) const { return Point(x * k, y * k); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n};\nistream &operator>>(istream &is, Point &p) {\n    is >> p.x >> p.y;\n    return is;\n}\nostream &operator<<(ostream &os, Point p) {\n    os << fixed << setprecision(10) << p.x << \" \" << p.y;\n    return os;\n}\nbool sort_x(Point a, Point b) { return a.x != b.x ? a.x < b.x : a.y < b.y; }\nbool sort_y(Point a, Point b) { return a.y != b.y ? a.y < b.y : a.x < b.x; }\nbool sort_t(Point a, Point b) { return atan2(a.y, a.x) < atan2(b.y, a.y); }\nPoint rotate(double theta, const Point &p) {\n    return Point(cos(theta) * p.x - sin(theta) * p.y, sin(theta) * p.x + cos(theta) * p.y);\n}\ndouble radian_to_degree(double r) { return (r * 180.0 / pi); }\ndouble degree_to_radian(double d) { return (d * pi / 180.0); }\n\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(Point a, Point b) : a(a), b(b) {}\n    Line(double A, double B, double C) { // Ax + By = C\n        if (eq(A, 0))\n            a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0))\n            a = Point(C / A, 0), b = Point(C / A, 1);\n        else\n            a = Point(0, C / B), b = Point(C / A, 0);\n    }\n    Point vec() const { return b - a; }\n};\nstruct Segment : Line {\n    Segment() {}\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle {\n    Point p;\n    double r;\n    Circle() {}\n    Circle(Point p, double r) : p(p), r(r) {}\n};\ndouble norm(const Point &a) { return a.x * a.x + a.y * a.y; }\ndouble abs(const Point &a) { return sqrt(norm(a)); }\ndouble cross(const Point &a, const Point &b) { return a.x * b.y - a.y * b.x; }\ndouble dot(const Point &a, const Point &b) { return a.x * b.x + a.y * b.y; }\n\nPoint project(Line l, Point p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\nPoint reflect(Line l, Point p) { return p + (project(l, p) - p) * 2; }\nbool parallel(Line a, Line b) { return eq(cross(a.vec(), b.vec()), 0.0); }\nbool orthogonal(Line a, Line b) { return eq(dot(a.vec(), b.vec()), 0.0); }\nint ccw(const Point &a, Point b, Point c) {\n    b = b - a, c = c - a;\n    if (cross(b, c) > eps)\n        return +1; // \"COUNTER_CLOCKWISE\"\n    if (cross(b, c) < -eps)\n        return -1; // \"CLOCKWISE\"\n    if (dot(b, c) < 0)\n        return +2; // \"ONLINE_BACK\"\n    if (norm(b) < norm(c))\n        return -2; // \"ONLINE_FRONT\"\n    return 0;      // \"ON_SEGMENT\"\n}\nbool intersect(const Line &l, const Point &p) { return abs(ccw(l.a, l.b, p)) != 1; }\nbool intersect(const Line &l, const Line &m) { return !parallel(l, m) || abs(cross(l.vec(), m.b - l.a)) < eps; }\nbool intersect(const Segment &s, const Point &p) { return ccw(s.a, s.b, p) == 0; }\nbool intersect(const Line &l, const Segment &s) { return cross(l.vec(), s.a - l.a) * cross(l.vec(), s.b - l.a) < eps; }\ndouble distance(const Line &l, const Point &p);\nbool intersect(const Circle &c, const Line &l) { return distance(l, c.p) <= c.r + eps; }\nbool intersect(const Circle &c, const Point &p) { return abs(abs(p - c.p) - c.r) < eps; }\nbool intersect(const Segment &s, const Segment &t) {\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\nint intersect(const Circle &c, const Segment &l) {\n    if (norm(project(l, c.p) - c.p) - c.r * c.r > eps)\n        return 0;\n    auto d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n    if (d1 < c.r + eps && d2 < c.r + eps)\n        return 0;\n    if ((d1 < c.r - eps && d2 > c.r + eps) || (d1 > c.r + eps && d2 < c.r - eps))\n        return 1;\n    const Point h = project(l, c.p);\n    if (dot(l.a - h, l.b - h) < 0)\n        return 2;\n    return 0;\n}\nint intersect(Circle c1, Circle c2) {\n    if (c1.r < c2.r)\n        swap(c1, c2);\n    double d = abs(c1.p - c2.p);\n    if (c1.r + c2.r < d)\n        return 4; // do not cross\n    if (eq(c1.r + c2.r, d))\n        return 3; // circumscribed\n    if (c1.r - c2.r < d)\n        return 2; // intersect\n    if (eq(c1.r - c2.r, d))\n        return 1; // inscribed\n    return 0;     // one circle includes another\n}\n\ndouble distance(const Point &a, const Point &b) { return abs(a - b); }\ndouble distance(const Line &l, const Point &p) { return abs(p - project(l, p)); }\ndouble distance(const Line &l, const Line &m) { return intersect(l, m) ? 0 : distance(l, m.a); }\ndouble distance(const Segment &s, const Point &p) {\n    Point r = project(s, p);\n    if (intersect(s, r))\n        return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\ndouble distance(const Segment &a, const Segment &b) {\n    if (intersect(a, b))\n        return 0;\n    return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\ndouble distance(const Line &l, const Segment &s) {\n    if (intersect(l, s))\n        return 0;\n    return min(distance(l, s.a), distance(l, s.b));\n}\nPoint crosspoint(const Line &l, const Line &m) {\n    double A = cross(l.vec(), m.vec());\n    double B = cross(l.vec(), l.b - m.a);\n    if (eq(abs(A), 0.0) && eq(abs(B), 0.0))\n        return m.a;\n    return m.a + (m.b - m.a) * B / A;\n}\nPoint crosspoint(const Segment &l, const Segment &m) { return crosspoint(Line(l), Line(m)); }\npair<Point, Point> crosspoint(const Circle &c, const Line l) {\n    Point pr = project(l, c.p);\n    Point e  = (l.b - l.a) / abs(l.b - l.a);\n    if (eq(distance(l, c.p), c.r))\n        return {pr, pr};\n    double base = sqrt(c.r * c.r - norm(pr - c.p));\n    return {pr - e * base, pr + e * base};\n}\npair<Point, Point> crosspoint(const Circle &c, const Segment &l) {\n    Line aa = Line(l.a, l.b);\n    if (intersect(c, l) == 2)\n        return crosspoint(c, aa);\n    auto ret = crosspoint(c, aa);\n    if (dot(l.a - ret.first, l.b - ret.first) < 0)\n        ret.second = ret.first;\n    else\n        ret.first = ret.second;\n    return ret;\n}\npair<Point, Point> crosspoint(const Circle &c1, const Circle &c2) {\n    double d = abs(c1.p - c2.p);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = atan2(c2.p.y - c1.p.y, c2.p.x - c1.p.x);\n    Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n    Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n    return {p1, p2};\n}\nvector<Point> convex_hull(vector<Point> &p) {\n    int n = (int)p.size(), k = 0;\n    if (n <= 2)\n        return p;\n    sort(p.begin(), p.end(), sort_x);\n    vector<Point> ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = p[i++]) {\n        while (k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < -eps)\n            --k;\n    }\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n        while (k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < -eps)\n            --k;\n    }\n    ch.resize(k - 1);\n    return ch;\n}\n#line 8 \"test/geometry/parallel_orthogonal.test.cpp\"\n\nint main() {\n    cin.tie(nullptr);\n    ios::sync_with_stdio(false);\n    int q;\n    cin >> q;\n    vector<Segment> f, t;\n    for (int i = 0; i < q; ++i) {\n        Point a, b, c, d;\n        cin >> a >> b >> c >> d;\n        f.emplace_back(a, b);\n        t.emplace_back(c, d);\n    }\n    for (int i = 0; i < q; ++i) {\n        if (parallel(f[i], t[i]))\n            cout << 2 << \"\\n\";\n        else if (orthogonal(f[i], t[i]))\n            cout << 1 << \"\\n\";\n        else\n            cout << 0 << \"\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// 平面幾何\n\n// int -> double -> Pointの暗黙の型変換を許した\n// メンバ変数をprivateにした\n// 代入演算子の戻り値とかにconstいっぱい付けた\n\n//   Segment::intersect(const Segment&)\n//   Circle::crosspoint(const Circle&)\n// のどっちかがバグってそう？ (AOJ1183)\n// crosspointは大丈夫？ (AOJ1132)\n\n// 通らない幾何問題\n// AOJ0153  円による点の包含　点と線分との距離　ccw\n// AOJ0187  線分の交差判定　線分同士の交点\n\n#include<iostream>\n#include<cmath>     // fabs(), hypot()\n#include<vector>    // Circle::crosspoint()の戻り値\n#include<algorithm> // min()\n\nconst double EPS = 1e-10;\nenum POSITION {FORWARD = -2, UNDER, ON, ABOVE, BACKWARD};   // ccw(a, b, p)で3点a, b, pの位置関係を返す\n                                                            //   0: a-p-b, 2: p-a-b, -2: a-b-p, 1: -a-b-の上にp, -1: -a-b-の下にp\n// class\nclass Point;\nclass Segment;\nclass Line;\nclass Circle;\n// member\nclass Point {\n    double x_value, y_value;\npublic:\n    Point() :x_value(0.0), y_value(0.0) {}\n    Point(double d) :x_value(d), y_value(d) {}\n    Point(double a, double b) :x_value(a), y_value(b) {}\n    double x() const {return x_value;}\n    double y() const {return y_value;}\n    double x(double d) {return x_value = d;}\n    double y(double d) {return y_value = d;}\n    bool operator== (const Point&) const;\n    bool operator!= (const Point&) const;\n    bool operator< (const Point&) const;\n    bool operator> (const Point&) const;\n    bool operator<= (const Point&) const;\n    bool operator>= (const Point&) const;\n    const Point operator-() const;\n    const Point& operator=(const Point&);\n    const Point& operator+=(const Point&);\n    const Point& operator-=(const Point&);\n    const Point& operator*=(const Point&);\n    const Point& operator/=(const Point&);\n    double dot(const Point&) const;\n    double cross(const Point&) const;\n    double abs() const;\n    double norm() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    const Point projection(const Line&) const;\n    const Point reflection(const Line&) const;\n    POSITION ccw(const Point&, const Point&) const;\n};\nconst Point operator+(const Point& lhs, const Point& rhs);\nconst Point operator-(const Point& lhs, const Point& rhs);\nconst Point operator*(const Point& lhs, const Point& rhs);\nconst Point operator/(const Point& lhs, const Point& rhs);\nclass Segment {\n    Point source_point, target_point;\npublic:\n    Segment(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0) :source_point(Point(x1, y1)), target_point(Point(x2, y2)) {}\n    Segment(const Point& a, const Point& b) :source_point(a), target_point(b) {}\n    const Point& source() const {return source_point;}\n    const Point& target() const {return target_point;}\n    const Point& source(const Point& p) {return source_point = p;}\n    const Point& target(const Point& p) {return target_point = p;}\n    const Line line() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    POSITION ccw(const Point&) const;\n};\nclass Line {\n    Point source_point, target_point;\npublic:\n    Line(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0) :source_point(Point(x1, y1)), target_point(Point(x2, y2)) {}\n    Line(const Point& a, const Point& b) :source_point(a), target_point(b) {}\n    const Point& source() const {return source_point;}\n    const Point& target() const {return target_point;}\n    const Point& source(const Point& p) {return source_point = p;}\n    const Point& target(const Point& p) {return target_point = p;}\n    const Segment segment() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    bool parallel(const Line&) const;\n    bool orthogonal(const Line&) const;\n    const Point projection(const Point&) const;\n    const Point reflection(const Point&) const;\n    const Point crosspoint(const Line&) const;\n    POSITION ccw(const Point&) const;\n};\nclass Circle {\n    Point center_point;\n    double radius;\npublic:\n    Circle(double a = 0.0, double b = 0.0, double c = 0.0) :center_point(Point(a, b)), radius(c) {}\n    const Point& center() const {return center_point;}\n    double x() const {return center_point.x();}\n    double y() const {return center_point.y();}\n    double r() const {return radius;}\n    const Point& center(const Point& p) {return center_point = p;}\n    double x(double d) {return center_point.x(d);}\n    double y(double d) {return center_point.y(d);}\n    double r(double d) {return radius = d;}\n    bool include(const Point&) const;\n    bool include(const Segment&) const;\n    bool include(const Circle&) const;\n    bool intersect(const Circle&) const;\n    std::vector<Point> crosspoint(const Circle&) const;\n};\n// Point\nbool Point::operator== (const Point &p) const {return x() == p.x() && y() == p.y();}\nbool Point::operator!= (const Point &p) const {return x() != p.x() || y() != p.y();}\nbool Point::operator<(const Point &p) const {return x() != p.x() ? x() < p.x() : y() < p.y();}\nbool Point::operator>(const Point &p) const {return x() != p.x() ? x() > p.x() : y() > p.y();}\nbool Point::operator<=(const Point &p) const {return x() != p.x() ? x() < p.x() : y() <= p.y();}\nbool Point::operator>=(const Point &p) const {return x() != p.x() ? x() > p.x() : y() >= p.y();}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x() + rhs.x(), lhs.y() + rhs.y());}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x() - rhs.x(), lhs.y() - rhs.y());}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x() * rhs.x(), lhs.y() * rhs.y());}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x() / rhs.x(), lhs.y() / rhs.y());}\nconst Point Point::operator-() const {return Point(-x(), -y());}\nconst Point& Point::operator=(const Point& p) {x(p.x()); y(p.y()); return *this;}\nconst Point& Point::operator+=(const Point& p) {return *this = *this + p;}\nconst Point& Point::operator-=(const Point& p) {return *this = *this - p;}\nconst Point& Point::operator*=(const Point& p) {return *this = *this * p;}\nconst Point& Point::operator/=(const Point& p) {return *this = *this / p;}\ndouble Point::dot(const Point& p) const {return x() * p.x() + y() * p.y();}\ndouble Point::cross(const Point& p) const {return x() * p.y() - y() * p.x();}\ndouble Point::abs() const {return hypot(x(), y());}\ndouble Point::norm() const {return x() * x() + y() * y();}\ndouble Point::distance(const Point& p) const {return (p - (*this)).abs();}\ndouble Point::distance(const Segment& s) const {return s.distance(*this);}\ndouble Point::distance(const Line& l) const {return l.distance(*this);}\nbool Point::intersect(const Point& p) const {return *this == p;}\nbool Point::intersect(const Segment& s) const {return s.intersect(*this);}\nbool Point::intersect(const Line& l) const {return l.intersect(*this);}\nconst Point Point::projection(const Line& l) const {return l.projection(*this);}\nconst Point Point::reflection(const Line& l) const {return l.reflection(*this);}\nPOSITION Point::ccw(const Point& b, const Point& p) const {\n    const Point& a = *this;\n    Point v1 = b - a;\n    Point v2 = p - a;\n    if(v1.cross(v2) > EPS) return ABOVE;\n    if(v1.cross(v2) < -EPS) return UNDER;\n    if(v1.dot(v2) < -EPS) return BACKWARD;\n    if(v2.norm() - v1.norm() > EPS) return FORWARD;\n    return ON;\n}\n// Segment\nconst Line Segment::line() const {return Line(source(), target());}\ndouble Segment::distance(const Point& p) const {\n    Point q = line().projection(p);\n    if(intersect(q)) return q.distance(p);\n    return std::min(source().distance(p), target().distance(p));\n}\ndouble Segment::distance(const Segment& s) const {\n    if(intersect(s)) return 0.0;\n    double a = distance(s.source());\n    double b = distance(s.target());\n    double c = s.distance(source());\n    double d = s.distance(target());\n    return std::min({a, b, c, d});\n}\ndouble Segment::distance(const Line& l) const {return l.distance(*this);}\nbool Segment::intersect(const Point& p) const {return source().distance(p) + target().distance(p) - target().distance(source()) <= EPS;}\nbool Segment::intersect(const Segment& s) const {\n    bool a = ccw(s.source()) * ccw(s.target()) <= 0;\n    bool b = s.ccw(source()) * s.ccw(target()) <= 0;\n    return a && b;\n}\nbool Segment::intersect(const Line& l) const {return l.intersect(*this);}\nPOSITION Segment::ccw(const Point& p) const {return source().ccw(target(), p);}\n// Line\nconst Segment Line::segment() const {return Segment(source(), target());}\ndouble Line::distance(const Point& p) const {return p.distance(projection(p));}\ndouble Line::distance(const Segment& s) const {\n    if(intersect(s)) return 0.0;\n    double a = distance(s.source());\n    double b = distance(s.target());\n    return a < b ? a : b;\n}\ndouble Line::distance(const Line& l) const {return intersect(l) ? 0.0 : distance(l.source());}\nbool Line::intersect(const Point& p) const {\n    Point v1 = source() - p;\n    Point v2 = target() - p;\n    return fabs(v2.cross(v1)) < EPS;\n}\nbool Line::intersect(const Segment& s) const {\n    Point v1 = target() - source();\n    Point v2 = s.source() - source();\n    Point v3 = s.target() - source();\n    return v1.cross(v2) * v1.cross(v3) <= EPS;\n}\nbool Line::intersect(const Line& l) const {\n    Point v1 = target() - source();\n    Point v2 = l.target() - l.source();\n    Point v3 = l.source() - source();\n    return fabs(v1.cross(v2)) > EPS || fabs(v1.cross(v3)) < EPS;\n}\nconst Point Line::projection(const Point& p) const {\n    Point v1 = p - source();\n    Point v2 = source() - target();\n    return Point(source() + v2 * (v1.dot(v2) / v2.norm()));\n}\nconst Point Line::reflection(const Point& p) const {\n    return p + (projection(p) - p) * 2.0;\n}\nconst Point Line::crosspoint(const Line& l) const {\n    Point v1 = target() - source();\n    Point v2 = l.target() - l.source();\n    Point v3 = target() - l.source();\n    double a = v1.cross(v2);\n    double b = v1.cross(v3);\n    if(fabs(a) <= EPS && fabs(b) <= EPS) l.source();\n    return l.source() + v2 * (b / a);\n}\nbool Line::parallel(const Line& l) const {\n    double dx = target().x() - source().x();\n    double dy = target().y() - source().y();\n    double dxl = l.target().x() - l.source().x();\n    double dyl = l.target().y() - l.source().y();\n    return fabs(dy * dxl - dyl * dx) <= EPS;\n}\nbool Line::orthogonal(const Line& l) const {\n    double dx = target().x() - source().x();\n    double dy = target().y() - source().y();\n    double dxl = l.target().x() - l.source().x();\n    double dyl = l.target().y() - l.source().y();\n    return fabs(dy * dyl + dxl * dx) <= EPS;\n}\nPOSITION Line::ccw(const Point& p) const {return source().ccw(target(), p);}\n// Circle\nbool Circle::include(const Point& p) const {return center().distance(p) - r() <= EPS;}\nbool Circle::include(const Segment& s) const {return center().distance(s) - r() <= EPS;}\nbool Circle::include(const Circle& c) const {return center().distance(c.center()) - (r() - c.r()) <= EPS;}\nbool Circle::intersect(const Circle& c) const {return center().distance(c.center()) - r() - c.r() <= EPS;}\nstd::vector<Point> Circle::crosspoint(const Circle& c) const {\n    double angle = atan2(c.y() - y(), c.x() - x());\n    double d = center().distance(c.center());\n    double add = acos((d * d + r() * r() - c.r() * c.r()) / (2.0 * d * r()));\n    std::vector<Point> result;\n    result.push_back(Point(x() + r() * cos(angle + add), y() + r() * sin(angle + add)));\n    result.push_back(Point(x() + r() * cos(angle - add), y() + r() * sin(angle - add)));\n    return result;\n}\n\nusing namespace std;\nint main() {\n    int n;\n    cin >> n;\n    while(n--) {\n        vector<Point> point(4);\n        for(auto& p: point) {\n            double x, y;\n            cin >> x >> y;\n            p = Point(x, y);\n        }\n        Line l1(point[0], point[1]);\n        Line l2(point[2], point[3]);\n        cout << (l1.parallel(l2) ? 2 : (l1.orthogonal(l2) ? 1 : 0)) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double R;//double long double ??????????????? cmath?????¢??°??????????????????????????????????????????????????§????????????\ntypedef complex<R> Point;\ntypedef pair<Point , Point> Line;\ntypedef pair<Point ,R > Circle;\ntypedef vector<Point> Poly;\n\n#define EPS (1e-10)//??????\n#define EQ(a,b) (abs((a)-(b)) < EPS)//??????????????°???????????????\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )//????????????????????????????????????\n#define ft first\n#define sd second\n#define pb push_back\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n \n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define RFOR(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define RREP(i,n) for (int i=(n)-1;i>=0;i--)\n\nR dot(Point a,Point b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\nR cross(Point a,Point b){\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n\n\n\nbool is_orthogonal(Line a,Line b){//2??´????????´?????????\n    return EQ(dot(a.ft - a.sd,b.ft - b.sd),0.0);\n}\nbool is_parallel(Line a,Line b){//2??´??????????????????\n    return EQ(cross(a.ft - a.sd,b.ft - b.sd),0.0);\n}\n\n\n\n////////////////////????????????\nint ccw(Point a,Point b,Point c){//ok\n    b -= a; c -= a;\n    if(cross(b,c) > EPS) return 1;//a???b??§???????¨???¨???????????????b???c\n    if(cross(b,c) < -EPS) return -1;//a???b??§????¨???¨???????????????b???c\n    if(dot(b,c) < -EPS) return 2;//c--a--b on same line\n    if(norm(c) - norm(b) > EPS) return -2;//a--b--c(abs??????????????????????????????????????????????????????????)\n    return 0;//a--c--b?????????b==c\n}\n\nbool is_intersection_ll(Line l,Line m){//???????????´??????????????????\n    return abs(cross(l.sd - l.ft,m.sd - m.ft)) > EPS || //????????§??????\n        abs(cross(l.sd - l.ft,m.ft - l.ft)) < EPS; //?????????????????????\n}\n\nbool is_intersection_ls(Line l,Line s){//??´???l??¨??????s???????????????\n    return cross(l.sd - l.ft, s.ft-l.ft)*       // s[0] is left of l\n        cross(l.sd - l.ft, s.sd - l.ft) < EPS; // s[1] is right of l\n}\n\nbool is_intersection_lp(Line l,Point p){//??´???l??¨???p???????????????\n    return abs(cross(l.sd - p,l.ft - p));\n}\n\nbool is_intersection_ss(Line a,Line b){//??????????????????????????????ok\n    return ccw(a.ft,a.sd,b.ft)*ccw(a.ft,a.sd,b.sd) <= 0 && ccw(b.ft,b.sd,a.ft)*ccw(b.ft,b.sd,a.sd) <= 0;\n}\n\nbool is_intersection_sp(Line s,Point p){//????????¨?????????????????? ????§??????????????????¨\n    return abs(s.ft - p) + abs(s.sd - p) - abs(s.ft - s.sd) < EPS;\n}\n\n/////////////?????¢\nR dis_lp(Line l,Point p){//??´???l??¨???p????????¢\n    return abs(cross(l.sd - l.ft,p - l.ft)) / abs(l.sd - l.ft);\n}\n\nR dis_ll(Line l,Line m){//???????????´???????????¢\n    return is_intersection_ll(l,m) ? 0.0 : dis_lp(l,m.ft);\n}\n\nR dis_ls(Line l,Line s){//??´???l??¨??????s????????¢\n    if(is_intersection_ls(l,s)) return 0.0;\n    return min(dis_lp(l,s.ft),dis_lp(l,s.sd));\n}\n\nR dis_sp(Line s,Point p){//??????s??¨???p????????¢\n    if(dot(s.sd - s.ft,p - s.ft) < EPS) return abs(p - s.ft);\n    if(dot(s.ft - s.sd,p - s.sd) < EPS) return abs(p - s.sd);\n    return dis_lp(s,p);\n}\n\nR dis_ss(Line s,Line t){//???????????????????????¢\n    if(is_intersection_ss(s,t)) return 0.0;\n    return min(min(dis_sp(s,t.ft),dis_sp(s,t.sd)),\n            min(dis_sp(t,s.ft),dis_sp(t,s.sd)));\n}\n\n\n\n//////////////?°???±??¨????°?\nPoint projection(Line l,Point p){//?°???±????±???????\n    R t = dot(p - l.ft,l.ft - l.sd) / norm(l.ft - l.sd);\n    return l.ft + t * (l.ft - l.sd);\n}\n\nPoint reflection(Line l,Point p){//????°?????±???????\n    return p + 2.0 * (projection(l,p) - p);\n}\n\n\n\n\n//////////////??????(????????????????¨???????????????¨??????????????????????????????????????£??????)\n\nPoint intersection_ll(Line l,Line m){//????????????????????????????????????????????????\n    R A = cross(l.sd - l.ft,m.sd - m.ft);\n    R B = cross(l.sd - l.ft,l.sd - m.ft);\n    if(abs(A) < EPS && abs(B) < EPS) return m.ft;//?????????\n    //if(abs(A) < EPS)assert(false);//????????§????????????\n    return m.ft + B / A * (m.sd - m.ft);\n}\n\nLine intersection_of_two_circles(Circle c1,Circle c2){//ok ????????????????????????Line?????\\????????????(r1 + r2 > sqrt((x1 - x2) ^ 2 + (y1 - y2) ^ 2))???????????????????????????\n    R a =  abs(c2.ft - c1.ft);\n    R b = c1.sd;\n    R c = c2.sd;\n\n    R rc = (a  * a + b * b - c * c) / (2.0 * a);\n    R rs = sqrt(b * b - rc * rc);//C++ ??§???????????????????????????????????§???????????????sqrt ????????? float ?????????????????? long double ????????????????????????????????????????????¨?????§???????????? C ????????°????????§??????sqrt ????????? double ??????????????£??????????????????\n    Point diff = (c2.ft - c1.ft) / a;\n\n    Line p ;\n    p.ft = c1.ft + diff * rc + diff * Point(0,1) * rs;\n    p.sd = c1.ft + diff * rc + diff * Point(0,-1) * rs;\n\n    return p;\n}\n\n/*\nLine conver_line(Line a,Point maxi,Point mini){//??????????????´??????????????? maxi???????????????????????? mini?????????\n\n    if(abs(dot(a.sd - a.ft,Point(1.0,0.0))) < EPS){//??????x???????????´??????\n        ;\n    }\n}*/\n\n\n/////////////////////////polygon\n\n#define currP(P,i) P[i]//????????????\n#define nextP(P,i) P[(i + 1)%P.size()]//?¬??????????\n\nint is_contains_p_in_Poly(Poly po,Point p){//??????????§???¢????????¨(1)????¢????(-1)????????¨(0)??????????????????????????????\n    bool in = false;\n    REP(i,po.size()){\n        Point a = currP(po,i) - p,b = nextP(po,i) - p;\n        if(a.imag() > b.imag())swap(a,b);\n        if(a.imag() < EPS && -EPS < b.imag())\n            if(cross(a,b) < -EPS) in = !in;\n        if(abs(cross(a,b)) == 0.0 && dot(a,b) < EPS)return  -1;\n    }\n    return in;\n}\n\nR area2(Poly po){//????§???¢?????¢????????????????±???????\n    R A = 0.0;\n    REP(i,po.size())\n        A += cross(currP(po,i),nextP(po, i));\n    return A;\n}\n\n\n\n\n///////////////////////////???\n\nPoly convex_hull(Poly ps){\n    int n = ps.size(),k = 0;\n    Poly ch(2*n);\n    for(int i = 0;i < n;ch[k++] = ps[i++])// lower-hull\n        while(k >= 2 && ccw(ch[k - 2],ch[k - 1],ps[i]) <= 0) --k;\n    for(int i = n - 2,t = k + 1;i >= 0;ch[k++] = ps[i--])//upper-hull\n        while(k >= t && ccw(ch[k - 2],ch[k - 1],ps[i]) <= 0) --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\n#define prevP(P, i) P[(i+P.size()-1) % P.size()]\nbool isconvex(Poly P){\n    for(int i = 0;i < P.size();++i)\n        if(ccw(prevP(P,i),currP(P,i),nextP(P,i)) > 0) return false;\n    return true;\n}\n\nint main(void){\n    int q;\n    cin >> q;\n    REP(i,q){\n       int x1,x2,x3,x4,y1,y2,y3,y4;\n       cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n       Line s1,s2;\n       s1 = Line(Point(x1,y1),Point(x2,y2));s2 = Line(Point(x3,y3),Point(x4,y4));\n       if(is_parallel(s1,s2))\n           printf(\"2\\n\");\n       else if(is_orthogonal(s1,s2))\n           printf(\"1\\n\");\n       else\n           printf(\"0\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\n\nint sign(double x) {  //???????????°???????°???????????¢?\n    return abs(x) < EPS ? 0 : x < 0 ? -1 : 1;\n}\n\nstruct Point { //????????????\n    double x, y;\n    Point(double x=0.0, double y=0.0) : x(x), y(y) {}\n    Point operator + (const Point &rhs) const {  //????????????\n        return Point(x + rhs.x, y + rhs.y);\n    }\n    Point operator - (const Point &rhs) const {  //????????????\n        return Point(x - rhs.x, y - rhs.y);\n    }\n    Point operator * (double p) const {  //???????????\\??????\n        return Point(x * p, y * p);\n    }\n    Point operator / (double p) const {  //???????????\\??????\n        return Point(x / p, y / p);\n    }\n    bool operator < (const Point &rhs) const {  //??????????????????\n        return x < rhs.x || (x == rhs.x && y < rhs.y);\n    }\n    bool operator == (const Point &rhs) const {  //??????????????????\n        return sign(x - rhs.x) == 0 && sign(y - rhs.y) == 0;\n    }\n    void read() {\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print() {\n        printf(\"(%.2f, %.2f)\\n\", x, y);\n    }\n};\ntypedef Point Vector;  //???????????????\n\ndouble dot(Vector A, Vector B) {  //??????????§???????????????????????§??????????????§??????????????????????????????????????§????\n    return A.x * B.x + A.y * B.y;\n}\ndouble cross(Vector A, Vector B) {  //??????????§??????????????????????????§???¢???????????¢?§????????????????????????????????????????\n    return A.x * B.y - A.y * B.x;\n}\ndouble polar_angle(Vector A) {  //??????????§?\n    return atan2(A.y, A.x);\n}\ndouble length(Vector A) {  //???????????????????§?\n    return sqrt(dot(A, A));\n}\ndouble angle(Vector A, Vector B) {  //????????¬?§?????????¶??????????§?\n    return acos(dot(A, B)/length(A)/length(B));\n}\nVector rotate(Vector A, double rad) {  //???????????¬????????¶???\n    return Vector(A.x*cos(rad)-A.y*sin(rad), A.x*sin(rad)+A.y*cos(rad));\n    //????????´?????¬????????¶????????????????????¢??¬??????x'=xcos(theta)+ysin(theta), y'=ycos(theta)-xsin(theta)\n}\nVector normal(Vector A) {  //?????????????????????????????????A????????¶??????\n    double len = length(A);\n    return Vector(-A.y/len, A.x/len);\n}\nbool on_seg(Point p, Point a, Point b) {  //???????????¨??????????????????????????????????????????\n    return sign(cross(a-p, b-p)) == 0 && sign(dot(a-p, b-p)) < 0;  //???p????????¨??????ab???\n}\nPoint point_line_proj(Point p, Point a, Point b) {  //?????¨??´??????????????±????????????\n    Vector V = b - a;\n    return a + V * (dot (V, p-a)/dot(V, V));  //???p??°??´???ab????????±\n}\n\nint main() {\n    int q; scanf(\"%d\", &q);\n    while(q --) {\n        Point p[5];\n        for(int i = 0; i < 4; i ++) p[i].read(); \n        double alpha = angle(p[3]-p[2], p[1]-p[0]);\n        //cout << alpha << endl;\n        if(sign(alpha) == 0 || sign(alpha - PI) == 0) puts(\"2\");\n        else if(sign(alpha - PI/2) == 0 || sign(alpha - PI*3/2) == 0) puts(\"1\");\n        else puts(\"0\");\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n\nusing namespace std;\nstatic const double eps = 1e-10;\nbool equals(double a, double b)\n{\n\treturn(fabs(a - b) < eps);\n}\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y){}\n\n\tPoint operator + (Point p){ return(Point(x + p.x, y + p.y)); }\n\tPoint operator - (Point p){ return(Point(x - p.x, y - p.y)); }\n\tPoint operator * (double a){ return(Point(a * x, a * y)); }\n\tPoint operator / (double a){ return(Point(x / a, y / a)); }\n\n\tdouble abs(){ return(sqrt(norm())); }\n\tdouble norm(){ return(x * x + y * y); }\n\n\tbool operator < (const Point& p) const\n\t{\n\t\treturn(x != p.x ? x < p.x : y < p.y);\n\t}\n\n\tbool operator == (const Point& p) const\n\t{\n\t\treturn(fabs(x - p.x) < eps && fabs(y - p.y) < eps);\n\t}\n};\ntypedef Point Vector;\n\nstruct Segment\n{\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r){}\n};\n\ndouble dot(Vector a, Vector b)\n{\n\treturn(a.x * b.x + a.y * b.y);\n}\n\ndouble cross(Vector a, Vector b)\n{\n\treturn(a.x * b.y - a.y * b.x);\n}\n\nPoint project(Segment s, Point p)\n{\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn(s.p1 + base * r);\n}\n\nPoint reflect(Segment s, Point p)\n{\n\treturn(p + (project(s, p) - p) * 2.0);\n}\n\nbool isOrthogonal(Vector a, Vector b)\n{\n\treturn(equals(dot(a, b), 0.0));\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn(isOrthogonal(a1 - a2, b1 - b2));\n}\n\nbool isOrthogonal(Segment s1, Segment s2)\n{\n\treturn(equals(dot(s1.p2 - s2.p1, s2.p2 - s2.p1), 0.0));\n}\n\nbool isParallel(Vector a, Vector b)\n{\n\treturn(equals(cross(a, b), 0.0));\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn(isParallel(a1 - a2, b1 - b2));\n}\n\nbool isParallel(Segment s1, Segment s2)\n{\n\treturn(equals(cross(s1.p1 - s1.p1, s2.p2 - s2.p1), 0.0));\n}\n\nvoid solve()\n{\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; ++i)\n\t{\n\t\tPoint p[4];\n\t\tfor (int j = 0; j < 4; ++j)\n\t\t{\n\t\t\tcin >> p[j].x >> p[j].y;\n\t\t}\n\t\tif (isParallel(p[0], p[1], p[2], p[3]))\n\t\t{\n\t\t\tcout << \"2\" << endl;\n\t\t}\n\t\telse if (isOrthogonal(p[0], p[1], p[2], p[3]))\n\t\t{\n\t\t\tcout << \"1\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"0\" << endl;\n\t\t}\n\t}\n}\n\nint main()\n{\n\tsolve();\n\treturn(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long   // <-----!!!!!!!!!!!!!!!!!!!\n\n#define rep(i,n) for (int i=0;i<(n);i++)\n#define rep2(i,a,b) for (int i=(a);i<(b);i++)\n#define rrep(i,n) for (int i=(n)-1;i>=0;i--)\n#define rrep2(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define all(a) (a).begin(),(a).end()\n\ntypedef long long ll;\ntypedef pair<int, int> Pii;\ntypedef tuple<int, int, int> TUPLE;\ntypedef vector<int> V;\ntypedef vector<V> VV;\ntypedef vector<VV> VVV;\n\ntypedef complex<double> P;\n\ndouble cross(P a, P b) {\n    return imag(conj(a) * b);\n}\n\ndouble dot(P a, P b) {\n    return real(conj(a) * b);\n}\n\nstruct L {\n    P a, b, v;\n    L(){}\n    L(P _a, P _b) {a = _a, b = _b, v = b - a;}\n    L(double _ax, double _ay, double _bx, double _by) {\n        a = P(_ax, _ay), b = P(_bx, _by), v = b - a;\n    }\n};\n\n// 2: parallel\n// 1: orthogonal\n// 0: otherwise\nint relationLL(L l1, L l2) {\n    if (cross(l1.v, l2.v) == 0) return 2;\n    if (dot(l1.v, l2.v) == 0) return 1;\n    return 0;\n}\n\nsigned main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    int q;\n    cin >> q;\n    while (q--) {\n        int v[4][2];\n        rep(i, 4) rep(j, 2) cin >> v[i][j];\n        L l1(v[0][0], v[0][1], v[1][0], v[1][1]);\n        L l2(v[2][0], v[2][1], v[3][0], v[3][1]);\n        cout << relationLL(l1, l2) << endl;\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<cstdio>\n\nusing namespace std;\n\nint main()\n{\n\tint q;\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble x0, y0, x1, y1, x2, y2, x3, y3;\n\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n\n\t\tdouble l01x = x1 - x0, l01y = y1 - y0, l23x = x3 - x2, l23y = y3 - y2;\n\n\t\tif (l01x*l23y == l01y*l23x)\n\t\t{\n\t\t\tprintf(\"2\\n\");\n\t\t}\n\t\telse if (l01x*l23x + l01y*l23y == 0)\n\t\t{\n\t\t\tprintf(\"1\\n\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"0\\n\");\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#include<cmath>\nusing namespace std;\n#define Point complex<long double>\n#define px real()\n#define py imag()\nlong double naiseki(long double ax, long double ay, long double bx, long double by) { return ax * bx + ay * by; }\nlong double gaiseki(long double ax, long double ay, long double bx, long double by) { return ax * bx + ay * by; }\nint main() {\n\tlong double N, X1, X2, Y1, Y2, X3, X4, Y3, Y4;\n\tcin >> N;\n\tfor(int i = 0; i < N; i++){\n\t\tcin >> X1 >> Y1 >> X2 >> Y2 >> X3 >> Y3 >> X4 >> Y4;\n\t\tlong double G = naiseki(X2 - X1, Y2 - Y1, X4 - X3, Y4 - Y3);\n\t\tlong double H = gaiseki(X2 - X1, Y2 - Y1, X4 - X3, Y4 - Y3);\n\t\tif (G == 0) { cout << \"1\" << endl; }\n\t\telse if (H == 0) { cout << \"2\" << endl; }\n\t\telse { cout << \"0\" << endl; }\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <sstream>\n#include <map>\n#include <set>\n#include <cmath>\n\n#define REP(i,k,n) for(int i=k;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define INF 1<<30\n#define pb push_back\n#define mp make_pair\n#define EPS 1e-8\n#define equals(a,b) fabs((a) - (b)) < EPS\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\n\tPoint operator+(const Point &o) const { return Point(x+o.x, y+o.y); }\n\n\tPoint operator-(const Point &o) const { return Point(x-o.x, y-o.y); }\n\n\tPoint operator*(const double m) const { return Point(x*m, y*m); }\n\n\tPoint operator/(const double d) const { return Point(x/d, y/d); }\n\n\tbool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }\n\n\tbool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }\n\n\tdouble cross(const Point &o) const { return x * o.y - y * o.x; }\n\n\tdouble dot(const Point &o) const { return x * o.x + y * o.y; }\n\n\tdouble atan() const { return atan2(y, x); }\n\n\tdouble norm() const { return sqrt(dot(*this)); }\n\n\tdouble distance(const Point &o) const { return (o - (*this)).norm(); }\n\n\tdouble area(const Point &a,const Point &b) {\n\t\tPoint p = a - (*this), p2 = b - (*this); \n\t\treturn p.cross(p2);\n\t}\n\n\tdouble area_abs(const Point &a,const Point &b) const {\n\t\tPoint p = a - (*this), p2 = b - (*this);\n\t\treturn fabs(p.cross(p2)) / 2.0;\n\t}\t\n\n\t//??????ab?????????????????????????????????????????????????????????\n\tint between(const Point &a,const Point &b) {\n\t\tif(area(a,b) != 0) return 0;\n\n\t\tif(a.x != b.x)  return ((a.x <= x) && (x <= b.x)) || ((a.x >= x) && (x >= b.x));\n\t\telse return ((a.y <= y) && (y <= b.y)) || ((a.y >= y) && (y >= b.y));\n\t}      \n\n\tdouble distance_seg(const Point& a,const Point& b) {\n\t\tif((b-a).dot(*this-a) < EPS) {\n\t\t\treturn (*this-a).norm();\n\t\t}\n\t\tif((a-b).dot(*this-b) < EPS) {\n\t\t\treturn (*this-b).norm();\n\t\t}\n\t\treturn abs((b-a).cross(*this-a)) / (b-a).norm();\n\t}\n};\n\nostream& operator << (ostream& os, const Point& p) {\n\tos << \"(\" << p.x << \", \" << p.y << \")\";\n\treturn os;\n}\n\nstruct Seg {\n\tPoint a,b;\n\n\tSeg() : a(Point(0, 0)), b(Point(0, 0)) {}\n\n\tSeg (Point a, Point b) : a(a),b(b) {}\n\n\tbool isOrthogonal(Seg &s) { return equals((b - a).dot(s.b - s.a),0.0); }\n\n\tbool isParallel(Seg &s) { return equals((b-a).cross(s.b - s.a),0.0); }\n\n\tbool isIntersect(Seg &s) {\n\t\tif(s.a.between(a,b) || s.b.between(a,b) || a.between(s.a,s.b) || b.between(s.a,s.b)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn ((a-b).cross(s.a-a) * (a-b).cross(s.b-a) < EPS) && ((s.b-s.a).cross(a-s.a)*(s.b-s.a).cross(b-s.a) < EPS);\n\t}\n\n\tbool distance(Seg &s) {\n\t\tif((*this).isIntersect(s)) return 0.0;\n\n\t\treturn min(min(a.distance_seg(s.a,s.b),b.distance_seg(s.a,s.b)),min(s.a.distance_seg(a,b),s.b.distance_seg(a,b)));\n\t}\n\n\tPoint getCrossPoint(Seg &s) {\n\t\tPoint p = s.b - s.a;\n\t\tdouble d = abs(p.cross(a-s.a));\n\t\tdouble d2 = abs(p.cross(b-s.a));\n\n\t\tdouble t = d / (d+d2);\n\t\treturn a + (b-a)*t;\n\t}\n\n\tPoint project(Point &p) {\n\t\tPoint base = b - a;\n\t\tdouble t = base.dot(p-a) / base.dot(base);\n\t\treturn a + base * t;\n\t}\n\n\tPoint reflect(Point &p) {\n\t\treturn p + (project(p) - p) * 2.0;\n\t}\n};\n\nint main() {\n\tint q;\n\tcin >> q;\n\n\tSeg s1, s2;\n\trep(i, q) {\n\t\tcin >> s1.a.x >> s1.a.y >> s1.b.x >> s1.b.y >> s2.a.x >> s2.a.y >> s2.b.x >> s2.b.y;\n\n\t\tif(s1.isParallel(s2)) {\n\t\t\tcout << 2 << endl;\n\t\t} else if(s1.isOrthogonal(s2)) {\n\t\t\tcout << 1 << endl;\n\t\t} else {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "///\n// File:  cgl_2_a.cpp\n// Author: ymiyamoto\n//\n// Created on Sun Oct 22 18:40:44 2017\n//\n\n#include <cmath>\n#include <cstdint>\n#include <iostream>\n\nusing namespace std;\n\nstruct point_t {\n  double x;\n  double y;\n};\n\nstruct vector_t {\n  double x;\n  double y;\n\n  vector_t(point_t a) : x(a.x), y(a.y)\n  {\n  }\n\n  vector_t(point_t a, point_t b) : x(a.x - b.x), y(a.y - b.y)\n  {\n  }\n\n  double dot(const vector_t &b)\n  {\n    return x * b.x + y * b.y;\n  }\n\n  double cross(const vector_t &b)\n  {\n    return x * b.y - y * b.x;\n  }\n};\n\nstruct line_t {\n  point_t a;\n  point_t b;\n\n  line_t(point_t a, point_t b) : a(a), b(b)\n  {\n  }\n\n  vector_t vector()\n  {\n    return vector_t(a, b);\n  }\n\n  double dot(line_t &l)\n  {\n    return vector().dot(l.vector());\n  }\n\n  double cross(line_t &l)\n  {\n    return vector().cross(l.vector());\n  }\n};\n\n#define EPS (1e-10)\n#define equals(x, y) (fabs(x - y) < EPS)\n\nint32_t main()\n{\n  uint32_t q;\n  cin >> q;\n\n  for (uint32_t i = 0; i < q; i++) {\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    line_t l1 = line_t(point_t({x0, y0}), point_t({x1, y1}));\n    cin >> x0 >> y0 >> x1 >> y1;\n    line_t l2 = line_t(point_t({x0, y0}), point_t({x1, y1}));\n    if (equals(l1.dot(l2), 0.0)) {\n      cout << 1 << endl;\n    } else if (equals(l1.cross(l2), 0.0)) {\n      cout << 2 << endl;\n    } else {\n      cout << 0 << endl;\n    }\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\nusing namespace std;\n#define EPS 1e-10\nlong double naiseki(long double ax, long double ay, long double bx, long double by) { return ax * bx + ay * by; }\nlong double gaiseki(long double ax, long double ay, long double bx, long double by) { return ax * by - ay * bx; }\nint main() {\n\tlong double N, X1, X2, Y1, Y2, X3, X4, Y3, Y4;\n\tcin >> N;\n\tfor(int i = 0; i < N; i++){\n\t\tcin >> X1 >> Y1 >> X2 >> Y2 >> X3 >> Y3 >> X4 >> Y4;\n\t\tlong double G = naiseki(X2 - X1, Y2 - Y1, X4 - X3, Y4 - Y3);\n\t\tlong double H = gaiseki(X2 - X1, Y2 - Y1, X4 - X3, Y4 - Y3);\n\t\tif (fabs(G) < EPS) { cout << \"1\" << endl; }\n\t\telse if (fabs(H) < EPS) { cout << \"2\" << endl; }\n\t\telse { cout << \"0\" << endl; }\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n#define repr(i, n) for (int i = (n); i >= 0; --i)\n#define FOR(i, m, n) for (int i = (m); i < (n); ++i)\n#define FORR(i, m, n) for (int i = (m); i >= (n); --i)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\n//const ll mod = 1000000007;\n//const ll mod = 998244353;\nconst int inf = 1e9 + 10;\nconst ll INF = 1e18;\nconst ld EPS = 1e-10;\nconst int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};\nconst int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};\ntemplate<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }\n\nclass Point {\npublic:\n  ld x, y;\n\n  Point() {}\n  Point(ld x, ld y): x(x), y(y) {}\n\n  Point operator + (const Point &p) {\n    return Point(x + p.x, y + p.y);\n  }\n  Point operator - (const Point &p) {\n    return Point(x - p.x, y - p.y);\n  }\n  Point operator * (const ld k) {\n    return Point(x * k, y * k);\n  }\n  Point operator / (const ld k) {\n    return Point(x / k, y / k);\n  }\n  Point operator += (const Point &p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n  Point operator -= (const Point &p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n  Point operator *= (const ld k) {\n    x *= k;\n    y *= k;\n    return *this;\n  }\n  Point operator /= (const ld k) {\n    x /= k;\n    y /= k;\n    return *this;\n  }\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator == (const Point &p) const {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n  friend ostream& operator << (ostream &os, const Point &p) {\n    os << p.x << ' ' << p.y;\n    return os;\n  }\n  friend istream& operator >> (istream &is, Point &p) {\n    ld x, y;\n    is >> x >> y;\n    p = Point(x, y);\n    return is;\n  }\n\n  ld abs() {return sqrt(norm());}\n  ld norm() {return x * x + y * y;}\n};\n\nld dot(Point a, Point b) {\n  return a.x * b.x + a.y * b.y;\n}\n\nld cross(Point a, Point b) {\n  return a.x * b.y - a.y * b.x;\n}\n\nclass Segment {\npublic:\n  Point p1, p2;\n\n  Segment() {}\n  Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\n\nclass Circle {\npublic:\n  Point p;\n  ld r;\n\n  Circle() {}\n  Circle(Point p, ld r): p(p), r(r) {}\n};\n\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(25);\n\n  int q;\n  cin >> q;\n  Point p[4];\n  while (q--) {\n    rep(i, 4) cin >> p[i];\n    if (equals(cross(p[1] - p[0], p[3] - p[2]), 0)) cout << 2 << '\\n';\n    else if (equals(dot(p[1] - p[0], p[3] - p[2]), 0)) cout << 1 << '\\n';\n    else cout << 0 << '\\n';\n  }\n\n  \n\n  \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x=0,double y=0):x(x),y(y){}\n\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nint main() {\n\tint q;\n\tPoint p0, p1, p2, p3;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &p0.x, &p0.y, &p1.x, &p1.y, &p2.x, &p2.y, &p3.x, &p3.y);\n\t\tif (isOrthogonal(p0, p1, p2, p3))printf(\"1\");\n\t\telse if (isParallel(p0, p1, p2, p3))printf(\"2\");\n\t\telse printf(\"0\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <numeric>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\n#define mp       make_pair\n#define pb       push_back\n#define all(x)   (x).begin(),(x).end()\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define repi(i,a,b) for(int i = (a); i < (b); i++)\n\nusing namespace std;\n\nconst int INF=1<<29;\nconst double EPS=1e-9;\n\nconst int dx[]={1,0,-1,0},dy[]={0,-1,0,1};\n\ntypedef complex<double> point;\ntypedef vector<point> vertex;\n/*\nx 座標は p.real(), real(p), y 座標は p.imag(), imag(p) とする．\n足し算，引き算，スカラー倍は定義済み．\noperator < は入っていないので自分で namespace std に突っ込む．*/\nnamespace std{\n    bool operator < (const point &lhs,const point &rhs){\n        if(real(lhs) == real(rhs)){\n            return imag(lhs) < imag(rhs);\n        }else{\n            return real(lhs) < real(rhs);\n        }\n    }\n}\n// 線分と点との距離\ndouble dist_linesegment_and_point(point a1,point a2,point b);\n\n\n\n// ベクタの長さ\ndouble vector_length(point a){\n    return abs(a);\n}\n\n// 二点間距離\ndouble point_distance(point a,point b){\n    return abs(a-b);\n}\n\n// 単位ベクトル\npoint unit_vector(point a){\n    return a / abs(a);\n}\n\n// 法線ベクトル\npair<point,point> normal_vector(point a){\n    point n1 = a * point(0,1);\n    point n2 = a * point(0,-1);\n    return make_pair(n1,n2);\n}\n\n// 点が一緒かどうか\nbool point_eq(point a,point b){\n    return abs(a-b) < EPS;\n}\n// 内積 (dot product) : a・b = |a||b|cosΘ\ndouble dot(point a,point b){\n    return real(conj(a)*b);\n}\n\n// 外積 (cross product) : |a×b| = |a||b|sinΘ\ndouble cross(point a,point b){\n    return imag(conj(a)*b);\n}\n//ラジアンに変換\ndouble radian(double angle){\n    return angle/180.0*M_PI;\n}\n//度数に変換\ndouble degree(double radian){\n    return radian*180.0/M_PI;\n}\n\n// a1,a2を端点とする線分(la)とb1,b2を端点(lb)とする線分の交差判定\nbool is_intersected_linesegment(point a1,point a2,point b1,point b2){\n    if(max(a1.real(),a2.real()) + EPS < min(b1.real(),b2.real())) return false;\n    if(max(b1.real(),b2.real()) + EPS < min(a1.real(),a2.real())) return false;\n    if(max(a1.imag(),a2.imag()) + EPS < min(b1.imag(),b2.imag())) return false;\n    if(max(b1.imag(),b2.imag()) + EPS < min(a1.imag(),a2.imag())) return false;\n    return (cross(a2-a1,b1-a1)*cross(a2-a1,b2-a1) < EPS) and\n    (cross(b2-b1,a1-b1)*cross(b2-b1,a2-b1) < EPS);\n\n}\n\n\n// a1,a2を端点とする線分(la)とb1,b2を端点とする線分(lb)の交点計算\npoint intersection_point_linesegment(point a1,point a2,point b1,point b2) {\n    if(a1 == b1 or a1 == b2) return a1;\n    if(a2 == b1 or a2 == b2) return a2;\n    point b = b2-b1;\n    double d1 = abs(cross(b, a1-b1));\n    double d2 = abs(cross(b, a2-b1));\n    double t = d1 / (d1 + d2);\n    return a1 + (a2-a1) * t;\n}\n\n// 線分同士の最短距離\ndouble dist_linesegment_and_linesegment(point a1,point a2,point b1,point b2){\n    if(is_intersected_linesegment(a1,a2,b1,b2)){\n        return 0;\n    }\n    return min(min(dist_linesegment_and_point(a1,a2,b1),\n               dist_linesegment_and_point(a1,a2,b2)),\n    min(dist_linesegment_and_point(b1,b2,a1),\n        dist_linesegment_and_point(b1,b2,a2)));\n}\n\n\n// 2直線の直交判定 : a⊥b <=> dot(a, b) = 0\n// verify\nbool is_orthogonal(point a1,point a2,point b1,point b2) {\n    return abs(dot(a1-a2,b1-b2))< EPS;\n}\n\n// 2直線の平行判定 : a//b <=> cross(a, b) = 0\n//verify\nbool is_parallel(point a1,point a2,point b1,point b2) {\n    return abs(cross(a2-a1,b2-b1)) < EPS;\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交差判定\nbool is_intersected_line(point a1,point a2,point b1,point b2) {\n    return not is_parallel(a1,a2,b1,b2);\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算\npoint intersection_line(point a1,point a2,point b1,point b2) {\n    point a = a2 - a1,b = b2 - b1;\n    return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\n// 直線と点との距離\ndouble dist_line_and_point(point a1,point a2,point b){\n    return abs(cross(a2-a1,b-a1)) / abs(a2-a1);\n}\n\n// 線分と点との距離\ndouble dist_linesegment_and_point(point a1,point a2,point b){\n    if(dot(a2-a1,b-a1) < EPS) return abs(b-a1);\n    if(dot(a1-a2,b-a2) < EPS) return abs(b-a2);\n    return dist_line_and_point(a1,a2,b);\n}\n\n// 直線と点の最短距離を実現する直線の点(すいせんの足)(みけんしょう)\npoint nearest_point_line_and_point(point a1,point a2,point b){\n    return a1 + (a2-a1) * dot((a2-a1),(b-a1)) / norm(a2-a1);\n}\n\n// 線分と点の最短距離を実現する線分嬢の点(みけんしょう)\npoint nearest_point_linesegment_and_point(point a1,point a2,point b){\n    if(dot(a2-a1,b-a1) < EPS) return a1;\n    if(dot(a1-a2,b-a2) < EPS) return a2;\n    return nearest_point_line_and_point(a1,a2,b);\n}\n// 円と線分の交差判定\nbool is_cross_linesegment_and_circle(point c,double r,point a1,point a2){\n    return (dist_linesegment_and_point(a1,a2,c) < r+EPS and\n            (r < abs(c-a1) + EPS or r < abs(c-a2) + EPS));\n}\n\n//線の進行方向\nint ccw(point p0, point p1, point p2)\n{\n    point a = p1 - p0;\n    point b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n\n// 点が真に多角形(凸?)の中にはいっているか\nbool is_inner_point_vertex(const vector<point> &ps,point a){\n    int cc = ccw(ps[0],ps[1],a);\n    if(not(cc == 1 or cc == -1)) return false;\n    for(size_t i=0;i<ps.size();i++){\n        if(cc != ccw(ps[i],ps[(i+1)%ps.size()],a)) return false;\n    }\n    return true;\n}\n\n// 点が辺上、もしくは内部にある。(未検証)\nbool is_inner_point_vertex_or_line(const vector<point> &ps,point a){\n    for(size_t i=0;i<ps.size();i++){\n        if(dist_linesegment_and_point(ps[i],ps[(i+1)%ps.size()],a) < EPS){\n            return true;\n        }\n    }\n    return is_inner_point_vertex(ps,a);\n}\n\n\n// 凸包 (UVA 109)\nvector<point> convex_hull(vector<point> ps){\n    int n = ps.size();\n    int k = 0;\n    sort(ps.begin(),ps.end());\n    vector<point> ch(2*n);\n    for(int i=0;i<n;ch[k++] = ps[i++]){\n        while(k >= 2 and ccw(ch[k-2],ch[k-1],ps[i]) <= 0) --k;\n    }\n    for(int i=n-2,t=k+1;i>=0;ch[k++]=ps[i--]){\n        while(k >= t and ccw(ch[k-2],ch[k-1],ps[i]) <= 0) --k;\n    }\n    ch.resize(k-1);\n    return ch;\n}\n\n// remember,pts make convex.\n// (http://judge.u-aizu.ac.jp/onlinejudge/cdescription.jsp?cid=ACAC002&pid=C)\ndouble convex_diameter(const vector<point>& pts){\n    const int n = pts.size();\n    int is=0,js=0; // initial antipode.\n    for(int i=1;i<n;i++){\n        if(pts[i].imag() > pts[is].imag()) is = i;\n        if(pts[i].imag() < pts[js].imag()) js = i;\n    }\n    double maxd = abs(pts[is]-pts[js]);\n    int i,j,maxi,maxj;\n    i = maxi = is;\n    j = maxj = js;\n    do{\n        if(cross(pts[(i+1)%n]-pts[i],\n           pts[(j+1)%n]-pts[j]) >= 0){\n            j = (j+1)%n;\n    }else{\n        i = (i+1)%n;\n    }\n    if(abs(pts[i]-pts[j]) > maxd){\n        maxd = abs(pts[i]-pts[j]);\n        maxi = i;maxj = j;\n    }\n} while(not(i == is and j == js));\n    // pts[maxi],pts[maxj] is pair of max diff.\nreturn maxd;\n}\n\n// 円と円の交点(2点ある前提)\nvector<point> circles_point(point c1,double r1,point c2,double r2){\n    double d = abs(c1-c2);\n    double s = (r1+r2+d) / 2;\n    double S = sqrt(s*(s-r1)*(s-r2)*(s-d));\n    double h = 2 * S / d;\n    point v = (c2-c1) / (abs(c2-c1));\n\n    double m = sqrt(r1*r1 - h*h);\n\n    vector<point> ret;\n    ret.push_back(c1 + m*v+h*v*point(0,1));\n    ret.push_back(c1 + m*v-h*v*point(0,1));\n    return ret;\n}\n\n// clockwiseだと負\ndouble triangle_area(point a,point b,point c){\n    return cross(b-a,c-a)/2;\n}\n\n// clockwiseだと負\ndouble vertex_area(vector<point> v){\n    double ret = 0;\n    for(int i=1;i<v.size()-1;i++){\n        ret += triangle_area(v[0],v[i],v[i+1]);\n    }\n    return ret;\n}\n/*多角形の面積を求める*/\n//verify\ndouble area_vertex(const vertex& g){\n    double S =0;\n    for(int i =0;i <g.size();i++){\n        S +=(cross(g[i],g[(i+1)%g.size()]));\n    }\n    return abs(S/2.0);\n}\n//円同士が互いに含まれているかどうか\n//中心が(xa,ya)で半径r1の円Aと、中心が(xb,yb) で半径 r2 の円 B が与えられたとき、 B が A の中にあるとき 2、A が B の中にあるとき -2、A の円周と B の円周が交わっている場合 1、A と B が重なっていないとき 0 \n//verify\nint Circles_Intersection(point a,double r1,point b,double r2){\n    double dp =abs(a-b);//中心間の距離\n    double dr =r1+r2;//円の半径の合計\n    if(dp >dr){\n        return 0;\n    }else if(dp +r1 <r2){\n        return -2;\n    }else if(dp +r2 <r1){\n        return 2;\n    }else if(dp <=dr){\n        return 1;\n    }\n    return -100;\n}\npoint projection(point p1, point p2, point p3) //直線p1p2 上への写像の点\n{\n    double t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n    return (p1 + (p2 - p1) * t);\n}\npoint reflection(point p1, point p2, point p3) //直線p1p2 上への反射した点(線分p1p2に対してp3を線対称)\n{\n\n    return (p3 + 2.0*(projection(p1, p2, p3) - p3));\n}\n/*// 2直線の直交判定 : a⊥b <=> dot(a, b) = 0\n// verify\nbool is_orthogonal(point a1,point a2,point b1,point b2) {\n    return abs(dot(a1-a2,b1-b2))< EPS;\n}\n\n// 2直線の平行判定 : a//b <=> cross(a, b) = 0\n//verify\nbool is_parallel(point a1,point a2,point b1,point b2) {\n    return abs(cross(a2-a1,b2-b1)) < EPS;\n}*/\n\nint main(){\n        double x1,y1,x2,y2,x3,y3,x4,y4;\n        int q;\n    cin>>q;// 点の進行方向\n    for(int i =0;i <q;i++){\n        cin>>x1>>y1>>x2>>y2>>x3>>y3>>x4>>y4;\n        point p1(x1,y1),p2(x2,y2),p3(x3,y3),p4(x4,y4);\n        if(is_orthogonal(p1, p2, p3, p4)){\n            cout <<1<<endl;\n        }else if(is_parallel(p1, p2, p3, p4)){\n            cout <<2<<endl;\n        }else{\n            cout <<0<<endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-9;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double cost = dot(p[1] - p[0], p[3] - p[2]) / (abs(p[1] - p[0]) * abs(p[3] - p[2]));\n        if(fabs(cost) < EPS) cout << 1 << endl;\n        else if(fabs(cost) > 1 - EPS) cout << 2 << endl;\n        else cout << 0 << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-9;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct pt_t {\n\tdouble x, y;\n\tpt_t operator+(const pt_t &p) { return { x + p.x, y + p.y }; }\n\tpt_t operator-(const pt_t &p) { return { x - p.x, y - p.y }; }\n\tpt_t operator*(const double &c) { return { x * c, y * c }; }\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npt_t cross_point(line_t l, line_t m) {\n\tpt_t ret = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return ret;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tret = { x / d, y / -d };\n\treturn ret;\n}\n\n// normal vector = (a, b), passing p\nline_t solve_line(double a, double b, pt_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\n// t should be radius\npt_t rot(pt_t p, double r) {\n\treturn {\n\t\tcos(r) * p.x - sin(r) * p.y,\n\t\tsin(r) * p.x + cos(r) * p.y\n\t};\n}\n\ndouble abs(pt_t p) {\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\n// angle [0, 2PI) of vector p to vector q\ndouble angle(pt_t p, pt_t q) {\n\tp = p * (1.0 / abs(p));\n\tq = q * (1.0 / abs(q));\n\tdouble r0 = acos(max(min(p.x * q.x + p.y * q.y, 1.0), -1.0));\n\tdouble r1 = asin(max(min(p.x * q.y - p.y * q.x, 1.0), -1.0));\n\tif (r1 >= 0) return r0;\n\telse return 2 * M_PI - r0;\n}\n\ndouble dist(line_t l, pt_t p) {\n\treturn abs(l.a * p.x + l.b * p.y + l.c)\n\t\t/ sqrt(l.a * l.a + l.b * l.b);\n}\n\nbool on_same_line(pt_t p, pt_t q) {\n\tline_t l = solve_line(p.y, -p.x, p);\n\tif (dist(l, q) < eps) return true;\n\telse return false;\n}\n\nint main() {\n\tint qr; cin >> qr;\n\tLoop(i, qr) {\n\t\tpt_t p[4];\n\t\tLoop(j, 4) {\n\t\t\tcin >> p[j].x >> p[j].y;\n\t\t}\n\t\tline_t l = solve_line(p[1].y - p[0].y, p[0].x - p[1].x, p[0]);\n\t\tline_t m = solve_line(p[3].y - p[2].y, p[2].x - p[3].x, p[2]);\n\t\tpt_t lp = { l.a, l.b };\n\t\tpt_t mp = { m.a, m.b };\n\t\tdouble r = angle(lp, mp);\n\t\tif (nearlyeq(r, 0) || nearlyeq(r, M_PI) || nearlyeq(r, M_PI * 2)) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse if (nearlyeq(r, M_PI * 0.5) || nearlyeq(r, M_PI * 1.5)) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define ld long double\n#define eps 1e-9\n\nbool cmp(ld A , ld B){return A + eps > B && A - eps < B;}\n\nstruct vec{\n\tld x , y;\n\tvec(ld _x = 0 , ld _y = 0) : x(_x) , y(_y){}\n\tfriend vec operator +(vec A , vec B){return vec(A.x + B.x , A.y + B.y);}\n\tfriend vec operator -(vec A , vec B){return vec(A.x - B.x , A.y - B.y);}\n\tfriend ld operator *(vec A , vec B){return A.x * B.x + A.y * B.y;}\n\tfriend ld operator %(vec A , vec B){return A.x * B.y - A.y * B.x;}\n\tfriend vec operator *(vec A , ld B){return vec(A.x * B , A.y * B);}\n\tld len(){return sqrt(x * x + y * y);}\n\tld angle(){return atan2(y , x);}\n};\n\nvec getvec(){int x , y; cin >> x >> y; return vec(x , y);}\n\nint main(){\n\tint Q;\n\tfor(cin >> Q ; Q ; --Q){\n\t\tvec A = getvec() - getvec() , B = getvec() - getvec();\n\t\tputs(A % B == 0 ? \"2\" : (A * B == 0 ? \"1\" : \"0\"));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <iomanip>\n#include <math.h>\nusing namespace std;\n\nclass Point {\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n    Point operator * (double a) { return Point(a*x, a*y); }\n    Point operator / (double a) { return Point(x/a, y/a); }\n\n    double abs() {return sqrt(norm()); }\n    double norm() {return x*x + y*y; }\n};\n\ntypedef Point Vector;\n\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x*b.y - a.y*b.x;\n}\n\nint main(){\n    //cinの入力元をテキストファイルに(テスト用)\n    #if 0\n    std::ifstream in(\"input.txt\");\n    std::cin.rdbuf(in.rdbuf());\n    #endif\n\n    int q;\n    cin >> q;\n\n    for(int i=0; i<q; i++){\n        Point p0, p1, p2, p3;\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n\n        Vector u = p1-p0;\n        Vector v = p3-p2;\n\n        double Dot = dot(u,v);\n        double Cross = cross(u,v);\n        \n        int out;\n        if(Cross==0){out = 2;} // Parallel\n        else if (Dot==0){out = 1;} // Orthogonal\n        else{out = 0;} //otherwise\n        \n        cout << out << \"\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define rep(i, a, b) for(int i = (a); i < (b); ++i)\n#define per(i, a, b) for(int i = (b) - 1; i >= (a); --i)\n#define sz(a) (int)a.size()\n#define de(c) cout << #c << \" = \" << c << endl\n#define dd(c) cout << #c << \" = \" << c << \" \"\n#define all(a) a.begin(), a.end()\n#define pw(x) (1ll<<(x))\n#define endl \"\\n\"\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntypedef db T;\nconst db eps = 1e-9 , pi = acosl(-1.);\nint sgn(T x){return (x>eps)-(x<-eps);}\nstruct P{\n  T x,y; P(){} P(T x,T y):x(x),y(y){}\n  P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n  P operator + (const P&b) const {return P(x+b.x,y+b.y);}\n  T operator * (const P&b) const {return x*b.x+y*b.y;}\n  T operator / (const P&b) const {return x*b.y-y*b.x;}\n  P operator * (const T&k) const {return P(x*k,y*k);}\n  P operator / (const T&k) const {return P(x/k,y/k);}\n};\nT norm(P a){return a*a;}\nP proj(P p,P a,P b){return (b-a)*((p-a)*(b-a)/norm(b-a))+a;}\nP reflect(P p,P a,P b){return proj(p,a,b)*2-p;}\nT cross(P o,P a,P b){return (a-o)/(b-o);}\nint crossOp(P o,P a,P b){return sgn(cross(o,a,b));}\nbool onPS(P p,P s,P t){return sgn((t-s)/(p-s))==0&&sgn((p-s)*(p-t))<=0;}\n\nP a, b, c, d;\n\nint main() {\n\tstd::ios::sync_with_stdio(0);\n\tstd::cin.tie(0);\n\tint q;\n\tcin >> q;\n\tcout << setiosflags(ios::fixed);\n\tcout << setprecision(10);\n\twhile(q--) {\n\t\tcin >> a.x >> a.y >> b.x >> b.y;\n\t\tcin >> c.x >> c.y >> d.x >> d.y;\n\t\tif(sgn((b - a) / (d - c)) == 0) {\n\t\t\tcout << 2 << endl;\n\t\t} else if(sgn((b - a) * (d - c)) == 0) {\n\t\t\tcout << 1 << endl;\n\t\t} else {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// 直線の直行・平行判定\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<vector>\n\n#include<queue>\n\nusing namespace std;\n\n// 浮動小数点のゼロ判定に使用する値\n#define EPS (1e-10)\n#define equals(a, b) ( fabs((a) - (b)) < EPS )\n\n// 点を表すクラス\nclass Point\n{\n    public:\n        double x, y;\n        // コンストラクタ\n        Point(double x = 0.0, double y = 0.0) : x(x), y(y){ }\n\n        // -----▼▼▼ 演算子のオーバーロード ▼▼▼-----\n\n        Point operator + (Point &p)\n        {\n            return Point(x + p.x, y + p.y);\n        }\n\n        Point operator - (Point &p)\n        {\n            return Point(x - p.x, y - p.y);\n        }\n\n        Point operator * (double a)\n        {\n            return Point(a * x, a * y);\n        }\n\n        bool operator == ( const Point &p) const\n        {\n            return fabs(x - p.x) < EPS && fabs(y -p.y) < EPS;\n        }\n\n        // -----▲▲▲ 演算子のオーバーロード ▲▲▲-----\n};\n\n// 線分を表すクラス\nclass Segment\n{\n    public:\n        Point p1, p2;\n        // コンストラクタ\n        Segment(Point p1, Point p2) : p1(p1), p2(p2){ }\n};\n\n// 点とベクトルの表現は同じ\ntypedef Point Vector;\n// 線分と直線の表現は同じ\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\n\nint main(void)\n{\n    int q, x1, y1, x2, y2;\n    Vector v1, v2;\n\n    cin >> q;\n\n    for(int i = 0; i < q; i++)\n    {\n\n        // ベクトル要素の格納\n        cin >> x1 >> y1 >> x2 >> y2;\n        v1.x = x2 - x1;\n        v1.y = y2 - y1;\n        // ベクトル要素の格納\n        cin >> x1 >> y1 >> x2 >> y2;\n        v2.x = x2 - x1;\n        v2.y = y2 - y1;\n\n        // 判定処理\n        if( equals( dot(v1, v2), 0.0 ) )\n        {\n            // 内積がゼロなら, ベクトルは互いに直交している\n            printf(\"1\\n\");\n        }\n        else if( equals( cross(v1, v2), 0.0 ) )\n        {\n            // 外積がゼロなら, ベクトルは平行である\n            printf(\"2\\n\");\n        }\n        else\n        {\n            printf(\"0\\n\");\n        }\n    }\n\n    return 0;\n}\n\n// 内積の計算をする関数\ndouble dot(Vector a, Vector b)\n{\n    return ( ( a.x * b.x ) + ( a.y * b.y ) );\n}\n\n// 外積の計算をする関数\ndouble cross(Vector a, Vector b)\n{\n    return ( ( a.x * b.y ) - ( a.y * b.x ) );\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include <cmath>\n\nusing namespace std;\ntypedef long long ll;\n//typedef unsigned long long ll;\n\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n//#define rep(i, n) for (ll i = 0; i < (n); ++i)\n//#define sz(x) ll(x.size())\n//typedef pair<ll, int> P;\ntypedef pair<ll, ll> P;\n//const double INF = 1e10;\nconst ll INF = LONG_LONG_MAX / 100;\n//const ll INF = (1ll << 31) - 1;\n//const ll INF = 1e15;\nconst ll MINF = LONG_LONG_MIN;\n//const int INF = INT_MAX / 10;\n#define cmin(x, y) x = min(x, y)\n#define cmax(x, y) x = max(x, y)\n//typedef pair<int, int> P;\n//typedef pair<double, double> P;\n\nbool contain(set<P> &s, P a) { return s.find(a) != s.end(); }\n\n//ifstream myfile(\"C:\\\\Users\\\\riku\\\\Downloads\\\\0_00.txt\");\n//ofstream outfile(\"log.txt\");\n//outfile << setw(6) << setfill('0') << prefecture << setw(6) << setfill('0') << rank << endl;\n// std::cout << std::bitset<8>(9);\nconst int mod = 1000000007;\ntypedef priority_queue<long long, vector<long long>, greater<long long>> PQ_ASK;\n\n\nvoid print_line(vector<string> &line) {\n    if (line.size() == 0ll) {\n        cout << endl;\n        return;\n    }\n    for (ll i = 0; i < line.size(); i++) {\n        cout << line[i];\n        if (i == line.size() - 1) cout << endl;\n        else cout << ' ';\n    }\n}\n\n#define EPS 1e-7\nconst double PI = 3.14159265358979323846;\n\nbool equal(double f1, double f2) {\n    return abs(f1 - f2) < EPS;\n}\n\nstruct Vec {\n\n    double x, y;\n\n    double size() {\n        return sqrt(x * x + y * y);\n    }\n\n    double inner_product(Vec v2) {\n        return x * v2.x + y * v2.y;\n    }\n\n    Vec product(double rate) {\n        Vec v2;\n        v2.x = x * rate;\n        v2.y = y * rate;\n        return v2;\n    }\n};\n\n\nstruct Point {\n    double x, y;\n\n    Point plus(Vec vec) {\n        Point p;\n        p.x = x + vec.x;\n        p.y = y + vec.y;\n        return p;\n    }\n\n    Point minus(Point sub) {\n        Point p;\n        p.x = x - sub.x;\n        p.y = y - sub.y;\n        return p;\n    }\n\n\n    friend istream &operator>>(istream &is, Point &f) {\n        cin >> f.x >> f.y;\n        return is;\n    }\n\n    friend ostream &operator<<(std::ostream &os, Point const &f) {\n        printf(\"%.20f %.20f\\n\", f.x, f.y);\n        return os;\n    }\n};\n\nstruct Line {\n    Point start, end;\n\n    Vec to_vec() {\n        Vec vec;\n        vec.x = end.x - start.x;\n        vec.y = end.y - start.y;\n        return vec;\n    }\n\n    friend istream &operator>>(istream &is, Line &f) {\n        cin >> f.start >> f.end;\n        return is;\n    }\n\n    Line normalize() {\n        Line l;\n        l.start = {0, 0};\n        l.end = end.minus(start);\n        return l;\n    }\n\n    double atan2() {\n        Line l = normalize();\n        return std::atan2(l.end.y, l.end.x);\n    }\n\n    double rad(Line line) {\n        double f1 = atan2(),\n                f2 = line.atan2();\n\n        double diff = f1 - f2;\n        if (equal(diff, -PI)) {\n            return PI;\n        }\n        if (equal(diff, PI)) {\n            return PI;\n        }\n        if (diff < -PI) {\n            diff += (PI * 2);\n        }\n        if (diff > PI) {\n            diff -= (PI * 2);\n        }\n\n        return diff;\n    }\n\n    void clock_wise(Line line) {\n\n        double diff = rad(line);\n\n        if (equal(line.to_vec().size(), 0)) {\n            cout << \"ON_SEGMENT\" << endl;\n            return;\n        }\n\n        if (equal(diff, 0)) {\n            double s1 = to_vec().size();\n            double s2 = line.to_vec().size();\n\n            if (s1 > s2 || equal(s1, s2)) {\n                cout << \"ON_SEGMENT\" << endl;\n            } else {\n                cout << \"ONLINE_FRONT\" << endl;\n            }\n        } else if (equal(abs(diff), PI)) {\n            cout << \"ONLINE_BACK\" << endl;\n        } else if (diff < 0) {\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        } else {\n            cout << \"CLOCKWISE\" << endl;\n        }\n    }\n\n};\n\n\nint main() {\n//    ofstream outfile(\"log.txt\");\n\n\n    int n;\n    cin >> n;\n    rep(i, n) {\n        Line l1, l2;\n        cin >> l1 >> l2;\n        double diff = l1.rad(l2);\n        if (equal(diff, 0) || equal(diff, PI)) {\n            cout << 2 << endl;\n        } else if (equal(diff, PI / 2) || equal(diff, -(PI / 2))) {\n            cout << 1 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <iostream>\nusing namespace std;\ntypedef complex<double> P;\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\ndouble dot(P a, P b){\n  return a.X*b.X + a.Y*b.Y;\n}\ndouble cross(P a, P b){\n  return a.X*b.Y - a.Y*b.X;\n}\nint main(){\n  P points[4];\n  int q, x, y;\n  cin >> q;\n  for(int i = 0; i < q; ++i){\n    for(int j = 0; j < 4; ++j){\n      cin >> x >> y;\n      points[j] = P(x,y);\n    }\n    if(abs(dot(points[0]-points[1],points[2]-points[3])) < EPS) cout << 1 << endl;\n    else if(abs(cross(points[0]-points[1],points[2]-points[3])) < EPS) cout << 2 << endl;\n    else cout << 0 << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n \nusing namespace std;\nconst double EPS=1e-9;\nconst double PI=3.141592653589793238;//18 ragham\nbool Equal(double d1,double d2)\n{ return fabs(d1-d2)<EPS;}\n \nstruct line{double a,b,c;};\nstruct vec\n{\n  double x,y;\n  vec(double _x=0,double _y=0)\n  {x=_x;  y=_y;}\n};\n   \nstruct point_i\n{\n  int x,y;\n  point_i(int _x=0,int _y=0){x=_x;y=_y;}\n};\nstruct point\n{\n  double x,y;\n  point(double _x=0,double _y=0){x=_x;y=_y;}\n  bool operator < (point other)\n  {  \n    if(fabs(x-other.x)<EPS)\n      return y<other.y;\n    return x<other.x;}\n  bool operator == (point other)\n  {return (fabs(x-other.x)<EPS) && (fabs(y-other.y)<EPS) ;}\n   \n   \n};\ndouble Hypot(double dx,double dy)\n{\n  return sqrt(dx*dx+dy*dy);\n}\ndouble Distance(point p1,point p2)\n{\n  return hypot(p1.x-p2.x,p1.y-p2.y);\n}\ndouble DEG_to_RAD(double theta)\n{\n  return theta*PI/180;\n}\npoint rotate(point p, double theta)//theta is degree\n{\n   \n  //rotation matrixR(theta) = [cos(theta) - sin(theta)]\n  //                          [sin(theta) + cos(theta)]\n  //usage: [x'] = R(theta)* [x]\n  //       [y']             [y]\n  double rad=DEG_to_RAD(theta);\n  return point(p.x * cos(rad) - p.x * sin(rad) ,\n           p.y * sin(rad) + p.y * cos(rad)  );\n}\nvoid PointsToLine(point p1,point p2,line *l)\n{\n  if(p1.x==p2.x) // vertical line handled here\n    { l->a=1.0;   l->b= 0.0 ; l->c=-p1.x;}\n  else\n    {\n      l->a=-(double)(p1.y-p2.y)/(p1.x-p2.x);\n      l->b=1.0;\n      l->c=-(double)(l->a * p1.x) - (l->b*p1.y);\n    }\n}\nbool AreParallel(line l1,line l2)\n{\n  if(Equal(l2.b,0) && !Equal(l1.b,0))return false;\n  if(Equal(l1.b,0) && !Equal(l2.b,0))return false;\n  if(Equal(l2.a,0) && !Equal(l1.a,0))return false;\n  if(Equal(l1.a,0) && !Equal(l2.a,0))return false;\n  return Equal(l1.a*l2.b,l1.b*l2.a);\n}\nbool AreSame(line l1,line l2)\n{\n  if(!AreParallel(l1,l2))return false;\n  if(Equal(l2.c,0) && !Equal(l1.c,0))return false;\n  if(Equal(l1.c,0) && !Equal(l2.c,0))return false;\n  double ratio=0;\n  if(Equal(l2.b,0)==false)\n    ratio=l1.b/l2.b;\n  if(Equal(l2.a,0)==false)\n    ratio=l1.a/l2.a;\n  return Equal(l1.c/l2.c,ratio);\n}\nbool AreIntersect(line l1,line l2,point *p)//TO BE CHECKED (mine)\n{\n  if(AreSame(l1,l2))\n    return false;\n  if(AreParallel(l1,l2))\n    return false;\n \n  //solving\n  double delta=(double)l1.a*l2.b - l1.b*l2.a;\n  if(Equal(delta,0))//this if should never be true because lines are't parallel\n    return false;\n  p->x= (double)(l1.c*l2.b-l2.c*l1.b) / delta;\n  p->y= (double)(l1.a*l2.c-l2.a*l1.c) / delta;\n  return true;\n}\nvec ToVector(point p1,point p2)\n{\n  return vec(p2.x-p1.x,p2.y-p1.y);\n}\nvec ScaleVector(vec v, double s) // v*=s\n{\n  return vec(v.x*s,v.y*s);\n}\npoint Translate(point p,vec move)//moves point p in direction of vector move\n{\n  return point(p.x+move.x , p.y + move.y);\n}\ndouble Dot(double x1,double y1 ,double x2,double y2)\n{ return x1*x2+y1*y2;};\ndouble Cross(point p,point q,point r)\n{\n  return (r.x-q.x)*(p.y-q.y)-(r.y-q.y)*(p.x-q.x);\n}\nbool Collinear(point p,point q,point r)\n{\n  return Equal(Cross(p,q,r),0);\n}\n//returns true if point r is on the left side of line pq\nbool CCW(point p,point q,point r)\n{\n   //can be modified to accept collinear ( >0 instead of >EPS )\n  if(Cross(p,q,r) > EPS)\n    return true;\n  return false;\n}\n///*****************### End of Library ###*******************///\n \n \n \n \n \n \n \npoint p1,p2,q1,q2;\n \nint main()\n{\n  int n;\n  cin>>n;\n  while(n--)\n    {\n      int x,y;\n      cin>>x>>y;\n      p1=point(x,y);\n      cin>>x>>y;\n      p2=point(x,y);\n      cin>>x>>y;\n      q1=point(x,y);\n      cin>>x>>y;\n      q2=point(x,y);\n      vec v1=ToVector(p1,p2);\n      vec v2=ToVector(q1,q2);\n \n       \n      line l1;\n      PointsToLine(p1,p2,&l1);\n      line l2;\n      PointsToLine(q1,q2,&l2);\n      //cout<<\"aa \"<<l1.a<<\" \"<<l1.b<<\" \"<<l1.c<<endl;\n      if(Equal(Dot(v1.x,v1.y , v2.x,v2.y),0))\n    cout<<1<<endl;\n      else if(AreParallel(l1,l2))\n    cout<<2<<endl;\n      else\n    cout<<0<<endl;\n    }\n   \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <deque>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <vector>\n#include <set>\n#include <limits>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n#define REP(i, j) for(int i = 0; i < (int)(j); ++i)\n#define FOR(i, j, k) for(int i = (int)(j); i < (int)(k); ++i)\n#define SORT(v) sort((v).begin(), (v).end())\n#define REVERSE(v) reverse((v).begin(), (v).end())\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\n\n//線分\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\n//外積\ndouble cross(const P& a, const P& b) {\n  return imag(conj(a)*b);\n}\n\n//内積\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\nbool orthogonal(const L &l1, const L &l2){\n  return (dot(l1[0]-l1[1], l2[0]-l2[1]) <= EPS && dot(l1[0]-l1[1], l2[0]-l2[1]) >= -EPS);\n}\n \nbool parallel(const L &l1, const L &l2){\n  return (cross(l1[0]-l1[1], l2[0]-l2[1]) <= EPS && cross(l1[0]-l1[1], l2[0]-l2[1]) >= -EPS);\n}\n\n\nint main() {\n  int Q; cin >>Q;\n  REP(q, Q){\n    int x0, y0, x1, y1, x2, y2, x3, y3;\n    scanf(\"%d %d %d %d %d %d %d %d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n    L l1 = L(P(x0, y0), P(x1, y1)), l2 = L(P(x2, y2), P(x3, y3));\n    if(orthogonal(l1, l2)) cout <<1 <<endl;\n    else if(parallel(l1, l2)) cout <<2 <<endl;\n    else cout <<0 <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\ninline bool equal(Number a, Number b) { return sign(a - b) == 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.x + this->y * rhs.x);\n    }\n\n    // Unary operator and compound assignment operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n    Point& operator+=(const Point &rhs) {\n        return *this = *this + rhs;\n    }\n    Point& operator-=(const Point &rhs) {\n        return *this = *this - rhs;\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\ninline Number abs_cross(const Point &p1, const Point &p2) {\n    return p1.x * p2.y - p1.y * p2.x;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os <<  p.x << ' ' << p.y;\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n// Counter-Clockwise predicate (a, b, c)\nenum CCW {\n    COUNTER_CLOCKWISE = 1,      // counter clockwise\n    CLOCKWISE         = -1,     // clockwise\n    ONLINE_FRONT      = 0,      // a--c--b on line\n    ONLINE_BACK       = 2,      // c--a--b on line\n    ON_SEGMENT        = -2,     // a--b--c on line\n};\nCCW ccw(const Point &a, Point b, Point c) {\n    b -= a;  c -= a;\n    if (abs_cross(b, c) > 0) return COUNTER_CLOCKWISE;\n    if (abs_cross(b, c) < 0) return CLOCKWISE;\n    if (dot(b, c) < 0)       return ONLINE_BACK;\n    if (b.abs2() < c.abs2())   return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n\n/**\n * Line or Segment in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\nusing Segment = Line;\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\ninline CCW ccw(const Line &l, const Point &p) {\n    return ccw(l[0], l[1], p);\n}\ninline bool IsOrthogonal(const Line &l1, const Line &l2) {\n    return equal(dot(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\ninline bool IsParallel(const Line &l1, const Line &l2) {\n    return equal(abs_cross(l1[0] - l1[1], l2[0] - l2[1]), 0.0);\n}\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n\n/**\n * Intersection testing\n */\n\n\n/**\n * Intersection point and Distance\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\nPoint Reflection(const Line &l, const Point &p) {\n    return Projection(l, p) * 2.0 - p;\n}\n\n\nint main()\n{\n    Line l1, l2;\n    int q;\n\n    std::cin >> q;\n\n    while (q--) {\n        std::cin >> l1 >> l2;\n\n        if (IsOrthogonal(l1, l2))\n            std::cout << \"1\\n\";\n        else if (IsParallel(l1, l2))\n            std::cout << \"2\\n\";\n        else\n            std::cout << \"0\\n\";\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <cfloat>\n#include <climits>\n#include <ctime>\n#include <cassert>\n#include <numeric>\n#include <fstream>\n#include <functional>\n#include <bitset>\n\nusing namespace std;\nusing Real = double;\nusing Point = complex<Real>;\nconst Real EPS = 1e-8, PI = acos(-1);\n\n// 実数同士の比較\ninline bool eq(Real a, Real b) { return fabs(b - a) < EPS; }\n\nPoint operator*(const Point &p, const Real &d) {\n  return Point(real(p) * d, imag(p) * d);\n}\n\n// 入力\nistream &operator>>(istream &is, Point &p) {\n  Real a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\n// 出力\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\n// 原点を中心として, 点 p を θ 回転すた点を返す\nPoint rotate(Real theta, const Point &p) {\n  return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n// ラジアンを度数に変換\nReal radian_to_degree(Real r) {\n  return (r * 180.0 / PI);\n}\n\n// 度数をラジアンに変換\nReal degree_to_radian(Real d) {\n  return (d * PI / 180.0);\n}\n\n// ∠BAC をラジアンで取得\nReal get_angle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - a);\n  Real alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if(alpha > beta) swap(alpha, beta);\n  Real theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\n// x軸, y軸の順にソート\nnamespace std {\n  bool operator<(const Point &a, const Point &b) {\n    return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n  }\n}\n\n// 直線\n// 2 点を通る直線\n// Ax + By = C  \nstruct Line {\n  Point a, b;\n\n  Line() = default;\n\n  Line(Point a, Point b) : a(a), b(b) {}\n\n  Line(Real A, Real B, Real C) // Ax + By = C\n  {\n    if(eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n    else if(eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n    else a = Point(0, C / B), b = Point(C / A, 0);\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\n// 線分\n// 2 点を結ぶ\nstruct Segment : Line {\n  Segment() = default;\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\n\n// 円\n// 中心と半径\nstruct Circle {\n  Point p;\n  Real r;\n\n  Circle() = default;\n\n  Circle(Point p, Real r) : p(p), r(r) {}\n};\n\n// いらんかも\nusing Points = vector< Point >;\nusing Polygon = vector< Point >;\nusing Segments = vector< Segment >;\nusing Lines = vector< Line >;\nusing Circles = vector< Circle >;\n\n// 外積\nReal cross(const Point &a, const Point &b) {\n  return real(a) * imag(b) - imag(a) * real(b);\n}\n\n// 内積\nReal dot(const Point &a, const Point &b) {\n  return real(a) * real(b) + imag(a) * imag(b);\n}\n\n\n//          +1\n//          \n//  +2   a   0   b  -2\n//\n//          -1\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n  if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                         // \"ON_SEGMENT\"\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\nbool parallel(const Line &a, const Line &b) {\n  return eq(cross(a.b - a.a, b.b - b.a), 0.0);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\nbool orthogonal(const Line &a, const Line &b) {\n  return eq(dot(a.a - a.b, b.a - b.b), 0.0);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\nPoint projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B\nPoint reflection(const Line &l, const Point &p) {\n  return p + (projection(l, p) - p) * 2.0;\n}\n\nbool intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nReal distance(const Line &l, const Point &p);\n\nbool intersect(const Circle &c, const Line &l) {\n  return distance(l, c.p) <= c.r + EPS;\n}\n\nbool intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B\nbool intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nint intersect(const Circle &c, const Segment &l) {\n  if(norm(projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  auto d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if(d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if(d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = projection(l, c.p);\n  if(dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A&lang=jp\nint intersect(Circle c1, Circle c2) {\n  if(c1.r < c2.r) swap(c1, c2);\n  Real d = abs(c1.p - c2.p);\n  if(c1.r + c2.r < d) return 4;\n  if(eq(c1.r + c2.r, d)) return 3;\n  if(c1.r - c2.r < d) return 2;\n  if(eq(c1.r - c2.r, d)) return 1;\n  return 0;\n}\n\nReal distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\nReal distance(const Line &l, const Point &p) {\n  return abs(p - projection(l, p));\n}\n\nReal distance(const Line &l, const Line &m) {\n  return intersect(l, m) ? 0 : distance(l, m.a);\n}\n\nReal distance(const Segment &s, const Point &p) {\n  Point r = projection(s, p);\n  if(intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D\nReal distance(const Segment &a, const Segment &b) {\n  if(intersect(a, b)) return 0;\n  return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\n\nReal distance(const Line &l, const Segment &s) {\n  if(intersect(l, s)) return 0;\n  return min(distance(l, s.a), distance(l, s.b));\n}\n\nPoint crosspoint(const Line &l, const Line &m) {\n  Real A = cross(l.b - l.a, m.b - m.a);\n  Real B = cross(l.b - l.a, l.b - m.a);\n  if(eq(abs(A), 0.0) && eq(abs(B), 0.0)) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C\nPoint crosspoint(const Segment &l, const Segment &m) {\n  return crosspoint(Line(l), Line(m));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_D\npair< Point, Point > crosspoint(const Circle &c, const Line l) {\n  Point pr = projection(l, c.p);\n  Point e = (l.b - l.a) / abs(l.b - l.a);\n  if(eq(distance(l, c.p), c.r)) return {pr, pr};\n  double base = sqrt(c.r * c.r - norm(pr - c.p));\n  return {pr - e * base, pr + e * base};\n}\n\npair< Point, Point > crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if(intersect(c, l) == 2) return crosspoint(c, aa);\n  auto ret = crosspoint(c, aa);\n  if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n  else ret.first = ret.second;\n  return ret;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_E\npair< Point, Point > crosspoint(const Circle &c1, const Circle &c2) {\n  Real d = abs(c1.p - c2.p);\n  Real a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  Real t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return {p1, p2};\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_F\npair< Point, Point > tangent(const Circle &c1, const Point &p2) {\n  return crosspoint(c1, Circle(p2, sqrt(norm(c1.p - p2) - c1.r * c1.r)));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_G\nLines tangent(Circle c1, Circle c2) {\n  Lines ret;\n  if(c1.r < c2.r) swap(c1, c2);\n  Real g = norm(c1.p - c2.p);\n  if(eq(g, 0)) return ret;\n  Point u = (c2.p - c1.p) / sqrt(g);\n  Point v = rotate(PI * 0.5, u);\n  for(int s : {-1, 1}) {\n    Real h = (c1.r + s * c2.r) / sqrt(g);\n    if(eq(1 - h * h, 0)) {\n      ret.emplace_back(c1.p + u * c1.r, c1.p + (u + v) * c1.r);\n    } else if(1 - h * h > 0) {\n      Point uu = u * h, vv = v * sqrt(1 - h * h);\n      ret.emplace_back(c1.p + (uu + vv) * c1.r, c2.p - (uu + vv) * c2.r * s);\n      ret.emplace_back(c1.p + (uu - vv) * c1.r, c2.p - (uu - vv) * c2.r * s);\n    }\n  }\n  return ret;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B\nbool is_convex(const Polygon &p) {\n  int n = (int) p.size();\n  for(int i = 0; i < n; i++) {\n    if(ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A\nPolygon convex_hull(Polygon &p) {\n  int n = (int) p.size(), k = 0;\n  if(n <= 2) return p;\n  sort(p.begin(), p.end());\n  vector< Point > ch(2 * n);\n  for(int i = 0; i < n; ch[k++] = p[i++]) {\n    while(k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n    while(k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  ch.resize(k - 1);\n  return ch;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C\nenum {\n  OUT, ON, IN\n};\nint contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for(int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if(a.imag() > b.imag()) swap(a, b);\n    if(a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if(cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033\nvoid merge_segments(vector< Segment > &segs) {\n\n  auto merge_if_able = [](Segment &s1, const Segment &s2) {\n    if(abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n    if(ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n    if(ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n    s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n    return true;\n  };\n\n  for(int i = 0; i < segs.size(); i++) {\n    if(segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for(int i = 0; i < segs.size(); i++) {\n    for(int j = i + 1; j < segs.size(); j++) {\n      if(merge_if_able(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033\nvector< vector< int > > segment_arrangement(vector< Segment > &segs, vector< Point > &ps) {\n  vector< vector< int > > g;\n  int N = (int) segs.size();\n  for(int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for(int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if(cross(p1, p2) == 0) continue;\n      if(intersect(segs[i], segs[j])) {\n        ps.emplace_back(crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  int M = (int) ps.size();\n  g.resize(M);\n  for(int i = 0; i < N; i++) {\n    vector< int > vec;\n    for(int j = 0; j < M; j++) {\n      if(intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for(int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_C\nPolygon convex_cut(const Polygon &U, Line l) {\n  Polygon ret;\n  for(int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if(ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if(ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A\nReal area2(const Polygon &p) {\n  Real A = 0;\n  for(int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_H\nReal area2(const Polygon &p, const Circle &c) {\n  if(p.size() < 3) return 0.0;\n  function< Real(Circle, Point, Point) > cross_area = [&](const Circle &c, const Point &a, const Point &b) {\n    Point va = c.p - a, vb = c.p - b;\n    Real f = cross(va, vb), ret = 0.0;\n    if(eq(f, 0.0)) return ret;\n    if(max(abs(va), abs(vb)) < c.r + EPS) return f;\n    if(distance(Segment(a, b), c.p) > c.r - EPS) return c.r * c.r * arg(vb * conj(va));\n    auto u = crosspoint(c, Segment(a, b));\n    vector< Point > tot{a, u.first, u.second, b};\n    for(int i = 0; i + 1 < tot.size(); i++) {\n      ret += cross_area(c, tot[i], tot[i + 1]);\n    }\n    return ret;\n  };\n  Real A = 0;\n  for(int i = 0; i < p.size(); i++) {\n    A += cross_area(c, p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_B\nReal convex_diameter(const Polygon &p) {\n  int N = (int) p.size();\n  int is = 0, js = 0;\n  for(int i = 1; i < N; i++) {\n    if(p[i].imag() > p[is].imag()) is = i;\n    if(p[i].imag() < p[js].imag()) js = i;\n  }\n  Real maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if(cross(p[(i + 1) % N] - p[i], p[(j + 1) % N] - p[j]) >= 0) {\n      j = (j + 1) % N;\n    } else {\n      i = (i + 1) % N;\n    }\n    if(norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while(i != is || j != js);\n  return sqrt(maxdis);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_5_A\nReal closest_pair(Points ps) {\n  if(ps.size() <= 1) throw (0);\n  sort(begin(ps), end(ps));\n\n  auto compare_y = [&](const Point &a, const Point &b) {\n    return imag(a) < imag(b);\n  };\n  vector< Point > beet(ps.size());\n  const Real INF = 1e18;\n\n  function< Real(int, int) > rec = [&](int left, int right) {\n    if(right - left <= 1) return INF;\n    int mid = (left + right) >> 1;\n    auto x = real(ps[mid]);\n    auto ret = min(rec(left, mid), rec(mid, right));\n    inplace_merge(begin(ps) + left, begin(ps) + mid, begin(ps) + right, compare_y);\n    int ptr = 0;\n    for(int i = left; i < right; i++) {\n      if(abs(real(ps[i]) - x) >= ret) continue;\n      for(int j = 0; j < ptr; j++) {\n        auto luz = ps[i] - beet[ptr - j - 1];\n        if(imag(luz) >= ret) break;\n        ret = min(ret, abs(luz));\n      }\n      beet[ptr++] = ps[i];\n    }\n    return ret;\n  };\n  return rec(0, (int) ps.size());\n}\n\nint main(){\n\n    int n; cin >> n;\n    for(int i = 0; i < n; i++){\n        double a, b, c, d;\n        cin >> a >> b >> c >> d;\n        Line l1(Point(a, b), Point(c, d));\n        cin >> a >> b >> c >> d;\n        Line l2(Point(a, b), Point(c, d));\n        if(parallel(l1, l2)) cout << 2 << endl;\n        else if(orthogonal(l1, l2)) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define repr(i, n) for (int i = (int)(n); i >= 0; i--)\n#define REP(i, m, n) for (int i = (int)(m); i <= (int)(n); i++)\n#define REPR(i, m, n) for (int i = (int)(m); i >= (int)(n); i--)\n#define all(v) v.begin(), v.end()\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nstruct Point{\n  double x, y;\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(x*a, y*a); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x + y*y; }\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n  return a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b){\n  return a.x*b.y - a.y*b.x;\n}\n\nint main(){\n  int q;\n  cin >> q;\n\n  rep(i, q){\n    int x0, y0; cin >> x0 >> y0;\n    int x1, y1; cin >> x1 >> y1;\n    int x2, y2; cin >> x2 >> y2;\n    int x3, y3; cin >> x3 >> y3;\n    Point p0 = Point(x0, y0);\n    Point p1 = Point(x1, y1);\n    Point p2 = Point(x2, y2);\n    Point p3 = Point(x3, y3);\n    Vector a = Vector(x0-x1, y0-y1);\n    Vector b = Vector(x2-x3, y2-y3);\n    if(equals(cross(a, b), 0.0)) cout << 2 << endl;\n    else if(equals(dot(a, b), 0.0)) cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n\n  return 0;\n\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)<EPS))\n\nclass Point{\n    public:\n    double x, y;\n\n    Point(double x=0, double y=0):x(x), y(y){}\n\n    Point operator + (Point p) {return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) {return Point(x-p.x, y-p.y); }\n    Point operator * (double a) {return Point(a*x, a*y); }\n    Point operator / (double a) {return Point(a*x, a*y); }\n\n    double abs() {return sqrt(norm());}\n    double norm() {return x*x+y*y; }\n\n    bool operator < (const Point &p) const{\n        return x != p.x ? x<p.x: y<p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x+a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x*b.y -a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b), 0.);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a,b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1-a2, b1-b2);\n}\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\n    int q;\n    Point p0, p1, p2, p3;\n    cin >> q;\n    for(int i=0; i<q; i++){\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        if(isParallel(p0, p1, p2, p3)){\n            printf(\"2\\n\");\n        }\n        else if(isOrthogonal(p0, p1, p2, p3)){\n            printf(\"1\\n\");\n        }\n        else printf(\"0\\n\");\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(){}\n\tPoint(double xx,double yy) {\n\t\tx = xx;\n\t\ty = yy;\n\t}\n\tPoint operator + (Point& p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point& p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double k) { return Point(x * k,y * k); }\n\tPoint operator / (double k) { return Point(x / k,y / k); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator == (const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\nstruct Segment {\n\tPoint p1, p2;\n};\ntypedef Point Vector;\ntypedef Segment Line;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point cc,double rr) {\n\t\tc = cc;\n\t\tr = rr;\n\t}\n};\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b) {\n\treturn a.x* b.y - a.y * b.x;\n}\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nint main() {\n\tint q;\n\tcin >> q;\n\tPoint a, b, c, d;\n\tVector v1, v2;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> a.x >> a.y >> b.x >> b.y >> c.x >> c.y >> d.x >> d.y;\n\t\tv1 = a - b;\n\t\tv2 = c - d;\n\t\tif (isOrthogonal(v1, v2)) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse if (isParallel(v1, v2)) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n#define repr(i, n) for (int i = (n); i >= 0; --i)\n#define FOR(i, m, n) for (int i = (m); i < (n); ++i)\n#define FORR(i, m, n) for (int i = (m); i >= (n); --i)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\ntypedef long long ll;\nconst ll mod = 1000000007;\nconst ll mod2 = 998244353;\nconst int INF = 1000000005;\nconst long double EPS = 1e-10;\n\nclass Point {\n  public:\n  long double x, y;\n\n  Point(long double x = 0, long double y = 0): x(x), y(y) {}\n\n  Point operator + (Point &p) {\n    return Point(x + p.x, y + p.y);\n  }\n\n  Point operator - (Point &p) {\n    return Point(x - p.x, y - p.y);\n  }\n\n  Point operator * (long double k) {\n    return Point(x * k, y * k);\n  }\n\n  long double norm(Point p) {\n    return p.x * p.x + p.y + p.y;\n  }\n\n  long double abs(Point p) {\n    return sqrt(norm(p));\n  }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n\nlong double dot(Point p1, Point p2) {\n  return p1.x * p2.x + p1.y * p2.y;\n}\n\nlong double cross(Point p1, Point p2) {\n  return p1.x * p2.y - p1.y * p2.x;\n}\n\nint judge(Point v1, Point v2) {\n  if (cross(v1, v2) == 0) return 2;\n  else if (dot(v1, v2) == 0) return 1;\n  else return 0;\n}\n\nint main() {\n  int q;\n  cin >> q;\n  Point p0, p1, p2, p3, v1, v2;\n  rep(i, q) {\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    v1 = p1 - p0;\n    v2 = p3 - p2;\n    cout << judge(v1, v2) << endl;\n  }\n\n  \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    int q;\n    int i;\n    int xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3;\n    double a_s1;\n    double a_s2;\n    int int_a_s11;\n    int int_a_s21;\n    int int_a_s12;\n    int int_a_s22;\n    int ans;\n    int ans_flg1;\n    int ans_flg2;\n\n    cin >> q;\n    for ( i = 0; i < q; ++i){\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n\n    \n    \n        ans_flg1 = 0;\n        ans_flg2 = 0;\n        if (xp1 == xp0){\n            a_s1 = xp1;\n            ans_flg1 = 1;\n        }else if (yp1 == yp0){\n            a_s1 = yp1;\n            ans_flg1 = 2;\n        }else{\n            a_s1 = (yp1 - yp0) / (xp1-xp0);\n        }\n        \n        if (xp3 == xp2){\n            a_s2 = xp3;\n            ans_flg2 = 1;\n        }else if (yp3 == yp2){\n            a_s2 = yp3;\n            ans_flg2 = 2;\n        }else{\n            a_s2 = (yp3 - yp2) / (xp3-xp2);\n        }\n        \n        ans = 0;\n        if (a_s1 == xp1 && a_s2 == xp3 && ans_flg1 == 1 && ans_flg2 == 1){\n            ans = 2;\n        }else if(a_s1 == yp1 && a_s2 == yp3 && ans_flg1 == 2 && ans_flg2 == 2){\n            ans = 2;\n        }else if(a_s1 == xp1 && a_s2 == yp3 && ans_flg1 == 1 && ans_flg2 == 2){\n            ans = 1;\n        }else if(a_s1 == yp1 && a_s2 == xp3 && ans_flg1 == 2 && ans_flg2 == 1){\n            ans = 1;\n        }else{\n            int_a_s11 = a_s1 * 1000;\n            int_a_s21 = a_s2 * 1000;\n            int_a_s21 = 1 /a_s2 * 1000;\n            if (int_a_s11 == int_a_s21){\n                //cout << int_a_s1 << \" \"<< int_a_s2 << endl;\n                ans = 2;\n            }else if(int_a_s11 == int_a_s22){\n                ans = 1;\n            }\n        }\n        \n        cout << ans << endl;\n    }\n    \n    /*\n    for ( i = 0; i < q; ++i){\n        cout << xp0 << endl;\n        cout << yp0 << endl;\n        cout << xp1 << endl;\n        cout << yp1 << endl;\n        cout << xp2 << endl;\n        cout << yp2 << endl;\n        cout << xp3 << endl;\n        cout << yp3 << endl;\n    }\n    */\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\n#include <iostream>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\nclass Point{\nprivate:\n    double x_;\n    double y_;\npublic:\n    Point();\n\tPoint(double x, double y);\n\tPoint(const Point& P);\n\n    ~Point();\n    Point& operator=(const Point &P);\n\tPoint& operator+(const Point &P);\n    Point& operator+(double k);\n\tPoint& operator-(const Point &P);\n    Point& operator-(double k);\n\n\t//?????????\n\tPoint& operator*(double k);\n\n    void disp(){\n        //printf(\"%3f %3f\\n\", x_, y_);\n        cout << x_ << \" \" << y_ << endl;}\n    double length(){return x_*x_ + y_*y_;};\n    double cross(Point Q){return x_*Q.y() - Q.x()*y_;};\n    double dot(Point Q){return x_*Q.x() + y_*Q.y();};\n\n    inline double x() const {return x_;}\n    inline double y() const {return y_;}\n};\n\n\nPoint::Point():\n\tx_(0.0),\n\ty_(0.0)\n{\n\n}\n\nPoint::Point(double x, double y):\n\tx_(x),\n\ty_(y)\n{\n\n}\n\nPoint::Point(const Point& P):\n    x_(0.0),\n    y_(0.0)\n{\n\tthis->operator=(P);\n}\n\nPoint::~Point(){\n\n}\n\nPoint& Point::operator=(const Point &P){\n\tthis->x_ = P.x_;\n\tthis->y_ = P.y_;\n\treturn *this;\n}\n\nPoint& Point::operator+(const Point &P){\n\tx_ += P.x_;\n\ty_ += P.y_;\n\treturn *this;\n}\n\nPoint& Point::operator+(double k){\n\tx_ += k;\n\ty_ += k;\n\treturn *this;\n}\n\nPoint& Point::operator-(const Point &P){\n\tx_ -= P.x_;\n\ty_ -= P.y_;\n\treturn *this;\n}\n\nPoint& Point::operator-(double k){\n\tx_ -= k;\n\ty_ -= k;\n\treturn *this;\n}\n\n\nPoint& Point::operator*(double k){\n\tx_ *= k;\n\ty_ *= k;\n\treturn *this;\n}\n\n\n\n\n\nint main(){\n    int n;\n    double a,b,c,d,e,f,g,h;\n    cin >> n;\n    cout << endl;\n    for(int i=0; i<n; i++){\n        cin >> a >> b >> c >> d >> e >> f >> g >> h;\n        Point P(c-a, d-b);\n        Point Q(g-e, h-f);\n        if(cross(P,Q)==0) cout << 2 << endl;\n        else{\n            if(dot(P,Q)==0) cout << 1 << endl;\n            else cout << 0 << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <algorithm>\n#include <bitset>\n#include <cassert>\n#include <cctype>\n#include <clocale>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <deque>\n#include <fstream>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <iterator>\n#include <list>\n#include <map>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <string>\n#include <tuple>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>\n#include <vector>\n\nusing namespace std;\n\n#define IOS ios::sync_with_stdio(false); cin.tie(0);\n#define FOR(i, s, n) for(int i = (s), i##_len=(n); i < i##_len; ++i)\n#define FORS(i, s, n) for(int i = (s), i##_len=(n); i <= i##_len; ++i)\n#define VFOR(i, s, n) for(int i = (s); i < (n); ++i)\n#define VFORS(i, s, n) for(int i = (s); i <= (n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define REPS(i, n) FORS(i, 0, n)\n#define VREP(i, n) VFOR(i, 0, n)\n#define VREPS(i, n) VFORS(i, 0, n)\n#define RFOR(i, s, n) for(int i = (s), i##_len=(n); i >= i##_len; --i)\n#define RFORS(i, s, n) for(int i = (s), i##_len=(n); i > i##_len; --i)\n#define RREP(i, n) RFOR(i, n, 0)\n#define RREPS(i, n) RFORS(i, n, 0)\n#define ALL(v) (v).begin(), (v).end()\n#define SORT(v) sort(ALL(v))\n#define RSORT(v) sort(ALL(v), greater<decltype(v[0])>())\n#define SZ(x) ((int)(x).size())\n#define PB push_back\n#define EB emplace_back\n#define MP make_pair\n#define MT make_tuple\n#define BIT(n) (1LL<<(n))\n#define UNIQUE(v) v.erase(unique(ALL(v)), v.end())\n\nusing ll = long long;\nusing ui = unsigned int;\nusing ull = unsigned long long;\nusing Pi_i = pair<int, int>;\nusing VB = vector<bool>;\nusing VC = vector<char>;\nusing VD = vector<double>;\nusing VI = vector<int>;\nusing VLL = vector<ll>;\nusing VS = vector<string>;\nusing VSH = vector<short>;\nusing VULL = vector<ull>;\n\nconst int MOD = 1000000007;\nconst int INF = 1000000000;\nconst int NIL = -1;\nconst double EPS = 1E-10;\n\ntemplate<class T, class S>\nbool chmax(T &a, const S &b){\n    if(a < b){\n        a = b; return true;\n    }\n    return false;\n}\ntemplate<class T, class S>\nbool chmin(T &a, const S &b){\n    if(b < a){\n        a = b; return true;\n    }\n    return false;\n}\n\n\nclass Point2D{\n    double x, y;\npublic:\n    Point2D(double X=0, double Y=0): x(X), y(Y){}\n    Point2D(const Point2D& v): x(v.x), y(v.y){}\n    template<class T>\n    Point2D(const vector<T> &v){\n        assert(v.size() == 2);\n        x = v[0]; y = v[1];\n    }\n    template<class T, class T2>\n    Point2D(const pair<T, T2> &p){\n        x = p.first; y = p.second;\n    }\n\n    void setX(double X){x = X;}\n    double getX(){return x;}\n    void setY(double Y){y = Y;}\n    double getY(){return y;}\n\n    Point2D operator+() const{return *this;}\n    Point2D operator-() const{return Point2D(-x, -y);}\n\n    Point2D& operator=(const Point2D& v){\n        x = v.x; y = v.y;\n        return *this;\n    }\n\n    Point2D& operator+=(const Point2D& v){\n        x += v.x; y += v.y;\n        return *this;\n    }\n\n    Point2D& operator-=(const Point2D& v){\n        x -= v.x; y -= v.y;\n        return *this;\n    }\n\n    Point2D& operator*=(const double a){\n        x *= a; y *= a;\n        return *this;\n    }\n\n    Point2D& operator/=(const double a){\n        x /= a; y /= a;\n        return *this;\n    }\n\n    Point2D operator+(const Point2D& v) const{\n        Point2D tmp(*this);\n        return tmp += v;\n    }\n\n    Point2D operator-(const Point2D& v) const{\n        Point2D tmp(*this);\n        return tmp -= v;\n    }\n\n    Point2D operator*(const double a) const{\n        Point2D tmp(*this);\n        return tmp *= a;\n    }\n\n    friend Point2D operator*(double a, const Point2D v){\n        return v * a;\n    }\n\n    Point2D operator/(const double a) const{\n        Point2D tmp(*this);\n        return tmp /= a;\n    }\n\n    double norm(){return x*x + y*y;}\n    friend double norm(Point2D &v){return v.norm();}\n    double abs(){return sqrt(norm());}\n    friend double abs(Point2D &v){return v.abs();}\n\n    bool operator<(const Point2D &v) const{\n        return x != v.x ? x < v.x : y < v.y;\n    }\n\n    bool operator>(const Point2D &v) const{\n        return x != v.x ? x > v.x : y > v.y;\n    }\n\n    bool operator==(const Point2D &v) const{\n        return std::abs(x - v.x) < EPS\n            && std::abs(y - v.y) < EPS;\n    }\n\n    bool operator<=(const Point2D &v) const{\n        return (*this < v) || (*this == v);\n    }\n\n    bool operator>=(const Point2D &v) const{\n        return (*this > v) || (*this == v);\n    }\n\n    friend double dot(Point2D a, Point2D b){\n        return a.x*b.x + a.y*b.y;\n    }\n\n    friend double cross(Point2D a, Point2D b){\n        return a.x*b.y - a.y*b.x;\n    }\n\n    friend double distance(Point2D a, Point2D b){\n        return (a - b).abs();\n    }\n\n    friend bool isParallel(Point2D a, Point2D b){\n        return std::abs(cross(a, b)) < EPS;\n    }\n\n    friend bool isOrthogonal(Point2D a, Point2D b){\n        return std::abs(dot(a, b)) < EPS;\n    }\n};\nusing Vector2D = Point2D;\n\nclass Line2D{\n    Point2D p1, p2;\npublic:\n    Line2D(){}\n    Line2D(Point2D a, Point2D b): p1(a), p2(b){}\n\n    void setP1(const Point2D p){p1 = p;}\n    Point2D getP1(){return p1;}\n    void setP2(const Point2D p){p2 = p;}\n    Point2D getP2(){return p2;}\n\n    friend Point2D project(Line2D l, Point2D p){\n        Point2D base = l.p2 - l.p1;\n        double r = dot(p - l.p1, base) / norm(base);\n        return l.p1 + base * r;\n    }\n\n    friend Point2D reflect(Line2D l, Point2D p){\n        return p + 2.0 * (project(l, p) - p);\n    }\n\n    friend bool isParallel(Line2D s1, Line2D s2){\n        return isParallel(s1.p2 - s1.p1, s2.p2- s2.p1);\n    }\n\n    friend bool isOrthogonal(Line2D s1, Line2D s2){\n        return isOrthogonal(s1.p2 - s1.p1, s2.p2- s2.p1);\n    }\n};\n\n\n\nint main(){\n    int q; cin >> q;\n    REP(i, q){\n        vector<Point2D> p(4);\n        REP(j, 4){\n            double x, y;\n            cin >> x >> y;\n            p[j].setX(x); p[j].setY(y);\n        }\n        cout << (isParallel(p[1] - p[0], p[3] - p[2]) ? 2 :\n                (isOrthogonal(p[1] - p[0], p[3] - p[2]) ? 1 : 0)) << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n \nconst double EPS = 1e-8, PI = acos(-1);\ninline bool eq(double a,double b){ return abs(b - a) < EPS; }\n#define curr(P,i) P[i]\n#define next(P,i) P[(i+1)%P.size()]\n#define prev(P,i) P[(i+P.size()-1) % P.size()]\nenum { OUT, ON, IN };\n \nstruct Geometory { // Geometory Library\n  struct Point {\n    double x, y;\n    Point(){};\n    Point(double x,double y):x(x),y(y){};\n    Point operator+(const Point& b) const { return Point(x + b.x,y + b.y); }\n    Point operator-(const Point& b) const { return Point(x - b.x,y - b.y); }\n    Point operator*(const double b) const { return Point(x * b,y * b); }\n    Point operator*(const Point& b) const { return Point(x * b.x - y * b.y,x * b.y + y * b.x); }\n    Point operator/(const double b) const { return Point(x / b,y / b); }\n    bool operator< (const Point& b) const { return x != b.x ? x < b.x : y < b.y; }\n    bool operator==(const Point& b) const { return eq(x,b.x) && eq(y,b.y); }\n    double norm(){ return x * x + y * y; }\n    double arg(){ return atan2(x,y); }\n    double abs(){ return sqrt(norm()); }\n    Point rotate(double theta){ return Point(cos(theta) * x - sin(theta) * y,sin(theta) * x + cos(theta) * y); }\n    Point rotate90(){ return Point(-y,x); }\n    friend ostream& operator<<(ostream& os, Point& p){ return os<<\"(\"<<p.x<<\",\"<<p.y<<\")\"; }\n    friend istream& operator>>(istream& is, Point& a){ return is>>a.x>>a.y; }\n  };\n \n  struct Line {\n    Point a, b;\n    Line(){};\n    Line(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Line& p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Line& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Segment {\n    Point a, b;\n    Segment(){};\n    Segment(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Segment& p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Segment& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Circle {\n    Point p; double r;\n    Circle(){};\n    Circle(Point p, double r) : p(p),r(r){};\n  };\n  typedef vector< Point > Polygon;\n  typedef vector< Segment > Segments;\n  typedef vector< Line > Lines;\n  typedef vector< Circle > Circles;\n  typedef pair< Point, Point > PointPoint;\n \n  double cross(const Point& a,const Point& b){\n    return a.x * b.y - a.y * b.x;\n  }\n  double dot(const Point& a,const Point& b){\n    return a.x * b.x + a.y * b.y;\n  }\n \n  int ccw(const Point& a,Point b,Point c){\n    b = b - a, c = c - a;\n    if(cross(b,c) > 0)    return +1;  // a → b で 反時計方向におれて c\n    if(cross(b,c) < 0)    return -1; // a → b で 時計方向におれて c\n    if(dot(b,c) < 0)      return +2;  // c -- a -- bで一直線上\n    if(b.norm() < c.norm()) return -2; // a -- b -- cで一直線上\n    return 0;  // a -- c -- bで一直線上\n  }\n  Point Projection(const Line& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Projection(const Segment& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Reflection(const Line& l, const Point& p){\n    return p + (Projection( l, p) - p) * 2.0;\n  }\n \n  double Distance( const Line& l,const Point& p) { //OK\n    return (p - Projection( l, p)).abs();\n  }\n \n  bool Intersect(const Line& l, const Line& m){\n    return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b-l.a, m.b-l.a)) < EPS;\n  }\n  bool Intersect(const Line& l, const Segment& s){\n    return cross( l.b - l.a, s.a - l.a) * cross( l.b - l.a, s.b - l.a) < EPS;\n  }\n  bool Intersect(const Line& l, const Point& p){\n    return abs(ccw(l.a, l.b, p)) != -1;\n  }\n  bool Intersect(const Segment& s, const Segment& t){\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n  }\n  bool Intersect(const Segment& s, const Point& p){\n    return ccw(s.a, s.b, p) == 0;\n  }\n  bool Intersect(const Circle& c,const Line& l){\n    return Distance( l, c.p) <= c.r + EPS;\n  }\n  bool Intersect(const Circle& c,const Point& p){\n    return abs( ( p - c.p).abs() - c.r ) < EPS;\n  }\n  int Intersect(const Circle& c, const Segment& l){\n    if( (Projection( l, c.p) - c.p).norm() - c.r * c.r > EPS) return 0;\n    const double d1 = ( c.p - l.a).abs(), d2 = ( c.p - l.b).abs();\n    if( d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n    if( d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS ) return 1;\n    const Point h = Projection( l, c.p);\n    if( dot( l.a - h, l.b - h) < 0) return 2;\n    return 0;\n  }\n  bool Intersect(const Circle& a,const Circle& b){\n    return ( ( a.p - b.p).norm() - ( a.r + b.r) * ( a.r + b.r) < EPS) &&\n      ( ( a.p - b.p).norm() - ( a.r - b.r) * ( a.r - b.r) > -EPS);\n  }\n  double Distance(const Segment& s,const Point& p){\n    Point r = Projection(s, p);\n    if ( Intersect( s, r)) return ( r - p).abs();\n    return min( ( s.a - p).abs(), ( s.a - p).abs());\n  }\n  double Distance(const Segment& a,const Segment& b){\n    if(Intersect( a, b)) return 0;\n    return min( min( Distance( a, b.a), Distance( a, b.b)), min( Distance( b, a.a), Distance( b, a.b)));\n  }\n  double Distance(const Line& l,const Line& m) {\n    return Intersect( l, m) ? 0 : Distance( l, m.a);\n  }\n  double Distance(const Line& l,const Segment& s) { //OK\n    if (Intersect(l, s)) return 0;\n    return min(Distance(l, s.a), Distance(l, s.b));\n  }\n  double Distance(const Point& a,const Point& b){ //OK\n    return ( a - b).abs();\n  }\n  Point Crosspoint(const Segment& l,const Segment& m) { //OK\n    double A = cross(l.b - l.a, m.b - m.a);\n    double B = cross(l.b - l.a, l.b - m.a);\n    if (abs(A) < EPS && abs(B) < EPS) return m.a; // same line\n    return m.a + (m.b - m.a) * B / A;\n  }\n  PointPoint Crosspoint(const Circle& c,const Line l){\n    Point hp = Projection( l, c.p), h =  hp - c.p;\n    const double d2 = h.norm();\n    Point v = ( l.b - l.a) * sqrt( c.r * c.r - d2) / ( l.b - l.a).abs();\n    return PointPoint(hp - v, hp + v);\n  }\n  PointPoint Crosspoint(const Circle& c,const Segment& l) {\n    Line aa = Line( l.a, l.b);\n    if(Intersect(c, l) == 2) return Crosspoint(c, aa);\n    PointPoint ret = Crosspoint(c, aa);\n    if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n    else ret.first = ret.second;\n    return ret;\n  }\n  PointPoint Crosspoint(const Circle& c1,const Circle& c2){ //OK\n    double d = (c1.p - c2.p).abs();\n    double s = (c1.r + c2.r + d) / 2;\n    double S = sqrt( s * ( s - c1.r) * ( s - c2.r) * ( s - d));\n    double h = 2 * S / d;\n    Point v = ( c2.p - c1.p) / ( c2.p - c1.p).abs();\n    double m = sqrt( c1.r * c1.r - h * h);\n    return PointPoint( c1.p + v * m + Point(0,1) * h * v, c1.p + v * m - Point(0,1) * h * v);\n  }\n  bool parallel(const Line& a,const Line& b){\n    return abs( cross( a.b - a.a, b.b - b.a)) < EPS;\n  }\n  bool parallel(const Segment& a,const Segment& b){\n    return abs( cross( a.b - a.a, b.b - b.a)) < EPS;\n  }\n  bool orthogonal(const Line& a,const Line& b){\n    return dot( a.a - a.b, b.a - b.b) < EPS;\n  }\n  bool orthogonal(const Segment& a,const Segment& b){\n    return dot( a.a - a.b, b.a - b.b) < EPS;\n  }\n  int Contains(const Polygon& Q,const Point& p){\n    bool in = false;\n    for(int i = 0 ; i < Q.size() ; i++ ){\n      Point a = curr(Q,i) - p, b = next(Q,i) - p;\n      if(a.y > b.y) swap(a,b);\n      if(a.y <= 0 && 0 < b.y && cross(a,b) < 0) in = !in;\n      if(cross(a,b) == 0 && dot(a,b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n  }\n  bool Contains(const Circle& c,const Point& p){\n    return ( c.p - p).abs() < c.r + EPS;\n  }\n  double Area2(const Polygon& p){ //OK\n    double A = 0;\n    for (int i = 0; i < p.size(); ++i){\n      A += cross(curr(p, i), next(p, i));\n    }\n    return A;\n  }\n};\n \nGeometory geo;\ntypedef Geometory::Point P;\ntypedef Geometory::Line L;\ntypedef Geometory::Segment S;\ntypedef Geometory::Circle C;\n\nint main(){\n  int q;\n  L s1, s2;\n\n  cin >> q;\n  while(q--){\n    cin >> s1 >> s2;\n    if( geo.parallel( s1, s2)) cout << \"1\" << endl;\n    else if( geo.orthogonal( s1, s2)) cout << \"2\" << endl;\n    else cout << \"0\" << endl;\n  }\n  return(0);\n}"
  },
  {
    "language": "C++",
    "code": "#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define ALL(v) v.begin(), v.end()\ntypedef long long ll;\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nclass Point{\n  public:\n  double x,y;\n  \n  Point(double x=0, double y=0): x(x),y(y) {}\n  \n  Point operator+(Point p){return Point(x+p.x,y+p.y);}\n  Point operator-(Point &p){return Point(x-p.x,y-p.y);}\n  Point operator*(double a){return Point(a*x,a*y);}\n  Point operator/(double a){return Point(x/a,y/a);}\n  \n  double abs(){return sqrt(norm());}\n  double norm(){return x*x+y*y;}\n  \n  bool operator<(const Point &p) const{\n    return x != p.x ? x<p.x : y<p.y;\n  }\n  \n  bool operator==(const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\ntypedef Point Vector;\n\nstruct Segment{Point p1,p2;};\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(), double r=0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthgonal(Vector a,Vector b){\n  return equals(dot(a,b), 0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b), 0.0);\n}\n\nint main(){\n  int q;\n  cin>>q;\n  \n  Vector p0,p1,p2,p3;\n  while(q--){\n    cin>>p0.x>>p0.y>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y;\n    if(isOrthgonal(p1-p0,p3-p2)) cout<<1<<endl;\n    else if(isParallel(p1-p0,p3-p2)) cout<<2<<endl;\n    else cout<<0<<endl;\n  }\n      \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <utility>\n#include <cmath>\n#include <cstdio>\n#define rep(i,n) for(int i = 0; i < n; ++i)\n#define rep1(i,n) for(int i = 1; i <= n; ++i)\n#define F first\n#define S second\nusing namespace std;\ntemplate<class T>bool chmax(T &a, const T &b) { if(a < b){ a = b; return 1; } return 0; }\ntemplate<class T>bool chmin(T &a, const T &b) { if(a > b){ a = b; return 1; } return 0; }\nusing ll = long long;\nusing pi = pair<int,int>;\nconst double EPS = 1e-10;\nstruct Vec2 {\n  double x;\n  double y;\n\n  Vec2() : x(0.0),y(0.0){} \n  Vec2(double _x,double _y) :x(_x),y(_y){}  \n  \n  Vec2 operator+(const Vec2& other) const { return { x + other.x , y + other.y }; }\n  Vec2 operator-(const Vec2& other) const { return { x - other.x , y - other.y }; }\n\n  double dot(const Vec2& other) const { return x * other.x + y * other.y; }\n  double cross(const Vec2& other) const { return x * other.y - y * other.x; }\n  double length() const { return sqrt(x * x + y * y); }\n};\n\n// cosθを返す。A とB のなす角θ\ndouble Cos(const Vec2 A, const Vec2 B) {\n  return A.dot(B) / (A.length()*B.length());\n}\n\ndouble Sin(const Vec2 A, const Vec2 B) {\n  return A.cross(B) / (A.length()*B.length());\n}\n\nint main()\n{\n  int q; cin >> q;\n  while(q-- > 0) {\n    vector<double> x(4),y(4);\n    rep(i,4) cin >> x[i] >> y[i];\n    Vec2 A(x[1] - x[0], y[1] - y[0]);\n    Vec2 B(x[3] - x[2], y[3] - y[2]);\n    double sine = Sin(A, B);\n    double cosi = Cos(A, B);\n    if(abs(sine) < EPS) cout << 2 << \"\\n\";\n    else if(abs(cosi) < EPS) cout << 1 << \"\\n\";\n    else cout << 0 << \"\\n\";\n  }\n  \n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int lint\ntypedef long long lint;\ntypedef pair<int,int> P;\nconst int    INF=(int)1e9;\nconst int    MOD=(int)1e9+7;\nconst double EPS=(double)1e-10;\n#define equals(a,b) (fabs((a)-(b))<EPS)\nstruct Accelerate_Cin{\n    Accelerate_Cin(){\n        cin.tie(0);ios::sync_with_stdio(0);cout<<fixed<<setprecision(20);\n    };\n};\n\n//幾何学テンプレート\n\n//点\nclass Point{\npublic:\n  double x,y;\n\n  Point(double x = 0,double y = 0):x(x), y(y){};\n\n  Point operator + (Point p) {return Point (x+p.x, y+p.y);}\n  Point operator - (Point p) {return Point (x-p.x, y-p.y);}\n  Point operator * (double a) {return Point(a*x, a*y);}\n  Point operator / (double a) {return Point(x/a,y/a);}\n\n  double abs(){return (norm());}\n  double norm(){return x*x+y*y;}\n\n  bool operator < (const Point &p)const{\n    return x!=p.x ? x<p.x:y<p.y;\n  }\n  bool operator > (const Point &p)const{\n    return x!=p.x ? x>p.x:y>p.y;\n  }\n  bool operator == (const Point &p)const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\n//ベクトル\ntypedef Point Vector;\n\n//内積\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//外積\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//線分\nstruct Segment{Point p1,p2;};\n\n//直線\ntypedef Segment Line;\n\n//円\nclass Circle{\npublic:\n  Point c;   //中心\n  double r;  //半径\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\n//多角形\ntypedef vector<Point> Polygon;\n\n\n//直交判定\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1, Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n//平行判定\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n\nsigned main(){\n  int a;cin>>a;\n  queue<int>q;\n  for(int i=0;i<a;i++){\n    double x0,y0,x1,y1,x2,y2,x3,y3;\n    cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n    Point p0,p1,p2,p3;\n    p0={x0,y0};p1={x1,y1};\n    p2={x2,y2};p3={x3,y3};\n    Segment s1={p0,p1};\n    Segment s2={p2,p3};\n\n    if(isParallel(s1,s2)){\n      q.push(2);\n    }else if(isOrthogonal(s1,s2)){\n      q.push(1);\n    }else{\n      q.push(0);\n    }\n  }\n\n  while(!q.empty()){\n    cout<<q.front()<<endl;\n    q.pop();\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y + p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nVector reflection(const Segment& s, const Point& p) {\n    auto proj = projection(s, p);\n    return p + (projection(s, p) - p) * 2.0;\n}\n\nbool is_orthogonal(const Vector& a, const Vector& b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool is_orthogonal(const Segment& s1, const Segment& s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool is_parallel(const Vector& a, const Vector& b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool is_parallel(const Segment& s1, const Segment& s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\n#include <iostream>\n#include <iomanip>\n#include <array>\n\nusing namespace std;\n\nint main() {\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        array<Point, 4> points;\n        for (auto& p : points) {\n            cin >> p.x >> p.y;\n        }\n        Segment s1{points[0], points[1]};\n        Segment s2{points[2], points[3]};\n        if (is_orthogonal(s1, s2)) {\n            cout << 1;\n        } else if (is_parallel(s1, s2)) {\n            cout << 2;\n        } else {\n            cout << 0;\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nconst double EPS = 1e-10;\n#define equals(a, b) (fabs((a) - (b)) < EPS )\n\nusing namespace std;\n\nstruct Point {\n    double x, y;\n\n    Point(double x_, double y_) : x(x_), y(y_){}\n\n    Point operator+(Point &p) {\n        return Point(this->x + p.x, this->y + p.y);\n    }\n\n    Point operator-(Point &p) {\n        return Point(this->x - p.x, this->y - p.y);\n    }\n\n    Point operator*(double k) {\n        return Point(this->x * k, this->y * k);\n    }\n\n    Point operator/(double a) {\n        return Point(x / a, y / a);\n    }\n\n    double norm() { return sqrt(x * x + y * y); }\n\n    bool operator<(const Point &p) {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator==(const Point &p) {\n        return fabs(this->x - p.x) < EPS && fabs(this->y - p.y) < EPS;\n    }\n\n    double dot(Point &p) {\n        return this->x * p.x + this->y * p.y;\n    }\n\n    double cross(Point &p) {\n        return this->x * p.y - this->y * p.x;\n    }\n\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1_, Point p2_) : p1(p1_), p2(p2_) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\n    Point c;\n    double r;\n\n    Circle(Point c, double r = 0.0) : c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a) {\n    return sqrt(a.x * a.x + a.y * a.y);\n}\n\n\nint main() {\n    int N;\n    cin >> N;\n    for (int i = 0; i < N; ++i) {\n        double x0, y0;\n        double x1, y1;\n        double x2, y2;\n        double x3, y3;\n        cin >> x0 >> y0;\n        cin >> x1 >> y1;\n        cin >> x2 >> y2;\n        cin >> x3 >> y3;\n\n        auto p0 = Point(x0, y0);\n        auto p1 = Point(x1, y1);\n        auto p2 = Point(x2, y2);\n        auto p3 = Point(x3, y3);\n        auto v1 = p1 - p0;\n        auto v2 = p2 - p3;\n        double dt = v1.dot(v2) / v1.norm() / v2.norm();\n        if(abs(dt - 1.0) < EPS || abs(dt + 1.0) < EPS ) {\n            cout << 2 << endl;\n        } else if(abs(dt) < EPS) {\n            cout << 1 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n    }\n\n\n    return 0;\n}\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "// #include {{{\n#include <iostream>\n#include <cassert>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <set>\n#include <map>\n#include <stack>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <complex>\n#include <algorithm>\nusing namespace std;\n// }}}\n// #define {{{\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n#define de(x) cout << #x << \"=\" << x << endl\n#define rep(i,a,b) for(int i=a;i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n// }}}\n\ntypedef ll T;\nstruct P{\n    T x,y;\n    P(){} P(T x,T y):x(x),y(y){}\n    void read(){scanf(\"%lld%lld\",&x,&y);}\n    P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n    T operator * (const P&b) const {return x*b.x+y*b.y;}\n    T operator ^ (const P&b) const {return x*b.y-y*b.x;}\n};\n\nstruct L{\n    P s,t;\n    L(){} L(P s,P t):s(s),t(t){}\n    void read(){s.read();t.read();}\n};\nint relation(L a,L b){\n    int cross=(a.t-a.s)^(b.t-b.s);\n    int dot=(a.t-a.s)*(b.t-b.s);\n    if(cross==0) return 2;\n    if(dot==0) return 1;\n    return 0;\n}\n\nint main(){\n    int Q;scanf(\"%d\",&Q);\n    rep(i,0,Q){\n        L a,b;\n        a.read();b.read();\n        printf(\"%d\\n\",relation(a,b));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,s,n) for (int i = (int)s; i < (int)n; i++)\n#define ll long long\n#define pb push_back\n#define All(x) x.begin(), x.end()\n#define Range(x, i, j) x.begin() + i, x.begin() + j\n#define lbidx(x, y) lower_bound(x.begin(), x.end(), y) - x.begin()\n#define ubidx(x, y) upper_bound(x.begin(), x.end(), y) - x.begin()\n#define BiSearchRangeNum(x, y, z) lower_bound(x.begin(), x.end(), z) - lower_bound(x.begin(), x.end(), y)turn idx;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n  public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\n\n// 内積\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n};\n\n// 外積\ndouble cross(Vector a, Vector b) {\n  return a.x * b.y - a.y * b.x;\n};\n\n// 直交判定\nbool isOrthogonal(Vector a, Vector b) {\n  return equals(dot(a, b), 0.0);\n};\n\n// 並行判定\nbool isParallel(Vector a, Vector b) {\n  return equals(cross(a, b), 0.0);\n};\n\nint main() {\n  int q;\n  cin >> q;\n  int x0, y0, x1, y1, x2, y2, x3, y3;\n  Vector a, b;\n  rep(i, 0, q) {\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n    a.x = x1 - x0; a.y = y1 - y0;\n    b.x = x3 - x2; b.y = y3 - y2;\n    if (isOrthogonal(a, b)) {\n      cout << 1 << endl;\n    } else if (isParallel(a, b)) {\n      cout << 2 << endl;\n    } else {\n      cout << 0 << endl;\n    }\n  }\n};\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing lint = long long;\ntemplate<class T = int> using V = vector<T>;\ntemplate<class T = int> using VV = V< V<T> >;\n\nusing R = long double;\nconstexpr R pi = acos((R)-1), eps = 1e-10;\n\nint sgn(R a) { return (a > eps) - (a < -eps); }\nint sgn(R a, R b) { return sgn(a - b); }\nusing P = complex<R>;\nistream& operator>>(istream& i, P& p) { R x, y; i >> x >> y; p = P(x, y); return i; }\nostream& operator<<(ostream& o, P p) { return o << fixed << setprecision(15) << real(p) << ' ' << imag(p); }\nbool cmp(P p, P q) { return 2 * sgn(real(p), real(q)) + sgn(imag(p), imag(q)) < 0; }\nbool eql(P p, P q) { return !cmp(p, q) and !cmp(q, p); }\nR dot(P p, P q) { return real(conj(p) * q); }\nR crs(P p, P q) { return imag(conj(p) * q); }\nint ccw(P p, P q) {\n  int s = sgn(crs(p, q));\n  if (s) return s;\n  if (dot(p, q) < 0) return -2;\n  if (dot(p, q - p) > 0) return 2;\n  return 0;\n}\nint ccw(P o, P p, P q) { return ccw(p - o, q - o); }\nstruct L {\n  P s, t;\n  P vec() const { return t - s; }\n  R abs() const { return std::abs(vec()); }\n  R arg() const { return std::arg(vec()); }\n};\nint ccw(L l, P p) { return ccw(l.s, l.t, p); }\n\nint main() {\n  cin.tie(nullptr); ios::sync_with_stdio(false);\n  int q; cin >> q;\n  while (q--) {\n    L l, m;\n    cin >> l.s >> l.t >> m.s >> m.t;\n    if (sgn(crs(l.vec(), m.vec()), 0) == 0) cout << 2 << '\\n';\n    else if (sgn(dot(l.vec(), m.vec()), 0) == 0) cout << 1 << '\\n';\n    else cout << 0 << '\\n';\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef complex<double>Point;\n\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Circle{\n    Point p;\n    double r;\n    Circle(const Point &p=Point(),double r=0.0):p(p),r(r){}\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\ntypedef vector<Point>Polygon;\n\nconst double PI=acos(-1);\nconst double EPS=1e-8;\nconst double INF=1e16;\n\ninline double square(double a){return a*a;}\ninline double norm(const Point &a){return square(a.real())+square(a.imag());}\ninline double dot(const Point &a,const Point &b){return (conj(a)*b).real();}\ninline double cross(const Point &a,const Point &b){return (conj(a)*b).imag();}\ninline double toDeg(double t){return t/PI*180.0;}\ninline double toRad(double t){return t/180.0*t;}\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return isOrthogonal(s1.p1-s1.p2,s2.p1-s2.p2);\n}\n\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return isParallel(s1.p1-s1.p2,s2.p1-s2.p2);\n}\n\n\nvoid getPoint(Point &p){\n    double x,y;\n    scanf(\"%lf%lf\",&x,&y);\n    p=Point(x,y);\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n\n    while(n--){\n        Point a1,a2,b1,b2;\n        getPoint(a1);\n        getPoint(a2);\n        getPoint(b1);\n        getPoint(b2);\n        if(isParallel(a1,a2,b1,b2))puts(\"2\");\n        else if(isOrthogonal(a1,a2,b1,b2))puts(\"1\");\n        else puts(\"0\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long   // <-----!!!!!!!!!!!!!!!!!!!\n\n#define rep(i,n) for (int i=0;i<(n);i++)\n#define rep2(i,a,b) for (int i=(a);i<(b);i++)\n#define rrep(i,n) for (int i=(n)-1;i>=0;i--)\n#define rrep2(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define all(a) (a).begin(),(a).end()\n\ntypedef long long ll;\ntypedef pair<int, int> Pii;\ntypedef tuple<int, int, int> TUPLE;\ntypedef vector<int> V;\ntypedef vector<V> VV;\ntypedef vector<VV> VVV;\n\ntypedef complex<double> P;\ntypedef vector<P> G;\n#define here(g, i) g[i]\n#define next(g, i) g[(i + 1) % g.size()]\n#define prev(g, i) g[(i - 1 + g.size()) % g.size()]\nconst double EPS = 1e-10;\nconst double INF = 1e12;\n\nstruct L {\n    P a, b, v;\n    L(){}\n    // L(P _a, P _b) {a = _a, b = _b, v = b - a;}\n    L(P _a, P _b) : a(_a), b(_b), v(b - a) {}\n    L(double _ax, double _ay, double _bx, double _by) : L(P(_ax, _ay), P(_bx, _by)) {}\n        // : a(_ax, _ay), b(_bx, _by), v(b - a) {}\n};\n\ndouble cross(P a, P b) {\n    return imag(conj(a) * b);\n}\n\ndouble dot(P a, P b) {\n    return real(conj(a) * b);\n}\n\n// 2: parallel\n// 1: orthogonal\n// 0: otherwise\nint relationLL(L l1, L l2) {\n    if (cross(l1.v, l2.v) == 0) return 2;\n    if (dot(l1.v, l2.v) == 0) return 1;\n    return 0;\n}\n\nsigned main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    int q;\n    cin >> q;\n    while (q--) {\n        double v[4][2];\n        rep(i, 4) rep(j, 2) cin >> v[i][j];\n        L l1(v[0][0], v[0][1], v[1][0], v[1][1]);\n        L l2(v[2][0], v[2][1], v[3][0], v[3][1]);\n        cout << relationLL(l1, l2) << endl;\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "/**\n * @copyright (c) 2020 Daisuke Hashimoto\n */\n\n#include <cstdint>\n#include <iostream>\n\nclass Point2D {\n public:\n  Point2D(const int32_t x, const int32_t y) noexcept;\n  ~Point2D() noexcept;\n  Point2D(const Point2D &obj) noexcept;\n  Point2D &operator=(const Point2D &obj) noexcept;\n  Point2D(Point2D &&obj) noexcept;\n  Point2D &operator=(Point2D &&obj) noexcept;\n\n  Point2D operator+(const Point2D &rhs) const noexcept;\n  Point2D operator-(const Point2D &rhs) const noexcept;\n  Point2D operator*(const int32_t rhs) const noexcept;\n  int32_t InnerProduct(const Point2D &rhs) const noexcept;\n  int32_t OuterProduct(const Point2D &rhs) const noexcept;\n\n  int32_t X() const noexcept;\n  int32_t Y() const noexcept;\n\n private:\n  Point2D() = delete;\n\n private:\n  int32_t x_;\n  int32_t y_;\n};\n\nclass Line {\n public:\n  Line(const Point2D &p1, const Point2D &p2) noexcept;\n  ~Line() noexcept;\n  bool IsParallel(const Line &rhs) const noexcept;\n  bool IsOrthogonal(const Line &rhs) const noexcept;\n  bool IsOnLine(const Point2D &point) const noexcept;\n  bool operator==(const Line &rhs) const noexcept;\n  bool operator!=(const Line &rhs) const noexcept;\n\n private:\n  Line() = delete;\n  Line(const Line &obj) = delete;\n  Line &operator=(const Line &obj) = delete;\n  Line(Line &&obj) = delete;\n  Line &operator=(Line &&obj) = delete;\n\n private:\n  Point2D p1_;\n  Point2D p2_;\n};\n\nvoid CallParallelOrthogonal(std::istream &input_stream) noexcept;\n\nvoid CallParallelOrthogonal(std::istream &input_stream) noexcept {\n  input_stream.tie(0);\n  std::ios::sync_with_stdio(false);\n  int32_t number_of_queries;\n  input_stream >> number_of_queries;\n  for (int32_t i = 0; i < number_of_queries; ++i) {\n    int32_t p0_x, p0_y, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y;\n    input_stream >> p0_x >> p0_y >> p1_x >> p1_y >> p2_x >> p2_y >> p3_x >> p3_y;\n    Line line1(Point2D(p0_x, p0_y), Point2D(p1_x, p1_y));\n    Line line2(Point2D(p2_x, p2_y), Point2D(p3_x, p3_y));\n    if (line1.IsParallel(line2)) {\n      std::cout << 2 << std::endl;\n    } else if (line1.IsOrthogonal(line2)) {\n      std::cout << 1 << std::endl;\n    } else {\n      std::cout << 0 << std::endl;\n    }\n  }\n}\n\n// *************************************\nPoint2D::Point2D(const int32_t x, const int32_t y) noexcept : x_(x), y_(y) {}\n\nPoint2D::~Point2D() noexcept {}\n\nPoint2D::Point2D(const Point2D &obj) noexcept : x_(obj.x_), y_(obj.y_) {}\n\nPoint2D &Point2D::operator=(const Point2D &rhs) noexcept {\n  if (this != &rhs) {\n    this->x_ = rhs.x_;\n    this->y_ = rhs.y_;\n  }\n  return *this;\n}\n\nPoint2D::Point2D(Point2D &&obj) noexcept : x_(obj.x_), y_(obj.y_) {}\n\nPoint2D &Point2D::operator=(Point2D &&rhs) noexcept {\n  if (this != &rhs) {\n    this->x_ = rhs.x_;\n    this->y_ = rhs.y_;\n  }\n  return *this;\n}\n\nPoint2D Point2D::operator+(const Point2D &rhs) const noexcept {\n  Point2D point(this->x_ + rhs.x_, this->y_ + rhs.y_);\n  return point;\n}\n\nPoint2D Point2D::operator-(const Point2D &rhs) const noexcept {\n  Point2D point(this->x_ - rhs.x_, this->y_ - rhs.y_);\n  return point;\n}\n\nPoint2D Point2D::operator*(const int32_t rhs) const noexcept {\n  Point2D point(this->x_ * rhs, this->y_ * rhs);\n  return point;\n}\n\nint32_t Point2D::X() const noexcept {\n  return x_;\n}\n\nint32_t Point2D::Y() const noexcept {\n  return y_;\n}\n\nint32_t Point2D::InnerProduct(const Point2D &rhs) const noexcept {\n  return ((this->x_ * rhs.x_) + (this->y_ * rhs.y_));\n}\nint32_t Point2D::OuterProduct(const Point2D &rhs) const noexcept {\n  return ((this->x_ * rhs.y_) - (this->y_ * rhs.x_));\n}\n\n// ************************************************\n\nLine::Line(const Point2D &p1, const Point2D &p2) noexcept : p1_(p1), p2_(p2) {}\n\nLine::~Line() noexcept {}\n\nbool Line::IsParallel(const Line &rhs) const noexcept {\n  const Point2D this_direction = this->p2_ - this->p1_;\n  const Point2D rhs_direction = rhs.p2_ - rhs.p1_;\n  const int32_t outer_product = this_direction.OuterProduct(rhs_direction);\n  const bool is_parallel = (outer_product == 0);\n  return is_parallel;\n}\n\nbool Line::IsOrthogonal(const Line &rhs) const noexcept {\n  const Point2D this_direction = this->p2_ - this->p1_;\n  const Point2D rhs_direction = rhs.p2_ - rhs.p1_;\n  const int32_t inner_product = this_direction.InnerProduct(rhs_direction);\n  const bool is_parallel = (inner_product == 0);\n  return is_parallel;\n}\n\nbool Line::IsOnLine(const Point2D &point) const noexcept {\n  const Line line1(point, p1_);\n  const Line line2(point, p2_);\n  const bool is_on_line = line1.IsParallel(line2);\n  return is_on_line;\n}\n\nbool Line::operator==(const Line &rhs) const noexcept {\n  return (IsOnLine(rhs.p1_) && IsOnLine(rhs.p2_));\n}\n\nbool Line::operator!=(const Line &rhs) const noexcept {\n  return !(*this == rhs);\n}\n\nint main(int argc, char *argv[]) {\n  try {\n    CallParallelOrthogonal(std::cin);\n  } catch (...) {\n    std::cerr << \"ERROR: main()\" << std::endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n \nusing namespace std;\n \n#define EPS 1e-10\n#define equal(a,b) (fabs(a-b) < EPS)\n\nstruct Point{\n  double x,y;\n\n  Point(){}\n  Point(double x,double y) : x(x),y(y) {}\n\n  Point operator + (const Point &p)const{ return Point(x+p.x,y+p.y); }\n  Point operator - (const Point &p)const{ return Point(x-p.x,y-p.y); }\n  Point operator * (const double &k)const{ return Point(x*k,y*k); }\n  Point operator / (const double &k)const{ return Point(x/k,y/k); }\n};\n\ndouble dot(const Point &a,const Point &b){ return a.x*b.x+a.y*b.y; }\ndouble cross(const Point &a,const Point &b){ return a.x*b.y - b.x*a.y; }\n\nistream &operator >> (istream &is,Point &p){ \n  return is >> p.x >> p.y;\n}\n\ntypedef Point Vector;\n\nstruct Line{\n  Point s,t;\n  Line(){}\n  Line(Point s,Point t) : s(s),t(t) {}\n};\n\nbool isOrthogonal(const Line &l1,const Line &l2){\n  Vector a = l1.t-l1.s;\n  Vector b = l2.t-l2.s;\n  return equal(dot(a,b),0);\n}\n\nbool isParallel(const Line &l1,const Line &l2){\n  Vector a = l1.t-l1.s;\n  Vector b = l2.t-l2.s;\n  return equal(cross(a,b),0);\n}\n \nint main(){\n  int Q;\n  cin >> Q;\n  while(Q--){\n    Line l1,l2;\n    cin >> l1.s >> l1.t;\n    cin >> l2.s >> l2.t;\n\n    if(isOrthogonal(l1,l2)){\n      cout << 1 << endl;\n    }else if(isParallel(l1,l2)){\n      cout << 2 << endl;\n    }else{\n      cout << 0 << endl;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <queue>\n#include <set>\n#include <cstdio>\n#include <climits>\n#include <cmath>\n#include <array>\n#include <functional>\n#include <sstream>\n#include <list>\n#include <iomanip>\n#include <set>\nconst int MOD=1000000007;\nconst int INF=1000000000;\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\nconst double eps=1e-10;\nconst int inf=1e9;\ntypedef pair<int,int> P;\n\nclass Point\n{\npublic:\n  double x,y;\n  Point(double x=0,double y=0): x(x),y(y){}\n  Point operator + (Point &p)\n  {\n    return Point(x+p.x,y+p.y);\n  }\n  Point operator - (Point &p)\n  {\n    return Point(x-p.x,y-p.y);\n  }\n  Point operator * (double k)\n  {\n    return Point(x*k,y*k);\n  }\n\n  double norm(){ return x*x+y*y;}\n  double abs(){ return sqrt(norm());}\n  bool operator < (const Point &p) const\n  {\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n  bool operator == (const Point &p) const\n  {\n    return fabs(x-p.x)<eps && fabs(y-p.y) < eps;\n  }\n};\ntypedef Point Vector;\ndouble dot(Vector a,Vector b)\n{\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b)\n{\n  return a.x*b.y - a.y*b.x;\n}\nstruct Segment\n{\npublic:\n  Point p1,p2;\n  Segment(){};\n  Segment(Point p1,Point p2):p1(p1),p2(p2){};\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):  c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\n\nbool isorthogonal(Vector a,Vector b)\n{\n  return fabs(dot(a,b)-0.0)<eps;\n}\n\nbool isparallel(Vector a,Vector b)\n{\n  return fabs(cross(a,b)-0.0)<eps;\n}\nint main(int argc,char const* argv[])\n{\n  int n;\n  cin >> n;\n  for(int i=0;i<n;i++)\n    {\n      double p0x,p0y,p1x,p1y,p2x,p2y,p3x,p3y;\n      cin >> p0x >> p0y >> p1x >> p1y >> p2x >> p2y >> p3x >> p3y;\n      Vector a=Point(p1x-p0x,p1y-p0y);\n      Vector b=Point(p3x-p2x,p3y-p2y);\n      if(isorthogonal(a,b)) cout << '1' << endl;\n      else if(isparallel(a,b)) cout << '2' << endl;\n      else cout << '0' << endl;\n    }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define mset(a,b) memset(a,b,sizeof(a))\n#define lson l,m,rt<<1\n#define rson m+1,r,rt<<1|1\nusing namespace std;\ntypedef long long ll;\nconst ll maxn=1e4+200;\nconst int inf=0x3f3f3f3f;\nconst double EPS=1e-10;\n//typedef pair<int,int> PA;\ndouble add(double a,double b){//考虑误差的加法运算\n    if(abs(a+b)<EPS*(abs(a)+abs(b))) return  0;\n    return a+b;\n}\nclass Point{\npublic:\n\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){\n    }\n    Point operator+ (Point p){\n        return Point(add(x,p.x),add(y,p.y));\n    }\n    Point operator -(Point p){\n        return Point(add(x,-p.x),add(y,-p.y));\n    }\n    Point operator *(double d){\n        return Point(x*d,y*d);\n    }\n    double dot(Point p){//外积 p1.p2  outside\n        return add(x*p.x,y*p.y);\n    }\n    double det(Point p){//内积 p1*p2    inner\n        return add(x*p.y,-y*p.x);\n    }\n    double len(){\n        return sqrt(add(x*x,y*y));\n    }\n};\nPoint operator *(double d,Point p){\n    return Point(p.x*d,p.y*d);\n}\nPoint getProjection(Point p1,Point p2,Point p){//p 在线段p1,p2上的投影坐标\n    double d1=1.0/(p2-p1).len();\n    Point ans=(p-p1).dot((p2-p1))*(p2-p1)*d1*d1;\n    return ans+p1;\n}\nPoint getReflection(Point p1,Point p2,Point p){//p 关于线段p1 p2的 反射坐标\n    return 2.0*getProjection(p1,p2,p)-p;\n}\ndouble getDistance(Point a,Point b){//两点之间距离\n    return (b-a).len();\n}\nint seg(double x){\n    if(abs(x)<EPS)  return 0;\n    if(x<0) return -1;\n    else return 1;\n}\nclass Line{\npublic:\n    Point s,e;\n    Line(){}\n    Line(Point s,Point e):s(s),e(e){}\n};\nint getLineState(Line la,Line lb){\n    if(seg((la.e-la.s).det(lb.e-lb.s))==0){\n        return 2;//平行\n    }//两向量平行 内积为0\n    else if(seg((la.e-la.s).dot(lb.e-lb.s))==0){\n        return 1;//垂直\n    }\n    else return 0;\n}\nint getDir(Point p,Point p1,Point p2){//返回 p2 关于p 在p1的什么方向\n        int a=seg((p1-p).det(p2-p));\n        int b=seg((p1-p).dot(p2-p));\n        if(a>0){\n            puts(\"COUNTER_CLOCKWISE\");\n        }\n        else if(a<0){\n            puts(\"CLOCKWISE\");\n        }\n        else if(b<0){\n            puts(\"ONLINE_BACK\");\n        }\n        else if(b>0&&seg((p1-p).dot(p2-p1))>0){\n            puts(\"ONLINE_FRONT\");\n        }\n        else{\n            puts(\"ON_SEGMENT\");\n        }\n        return 0;\n\n}\ntypedef Point P;\nint main(){\n    int q;\n    P p0,p1,p2,p3;\n    scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p0.x,&p0.y,&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y);\n        int state=getLineState(Line(p0,p1),Line(p2,p3));\n        printf(\"%d\\n\",state);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n\tbool operator() (pr const& a,pr const& b) const {\n\t\treturn a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n\t}\n};\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return x == e.x? (y < e.y) : x < e.x;\n  }\n  bool operator >(const struct _PT &e) const{\n     return x == e.x? (y > e.y) : x > e.x;\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\n\nclass Plane{\nprivate:\n  static bool cmp_x(const P &p1,const P &p2){\n      if (p1.x != p2.x) return p1.x < p2.x;\n      return p1.y < p2.y;\n  }\npublic:\n  P intersection(P p1,P p2,P q1,P q2) { // 直線p1-p2と直線q1-q2の交点\n    return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n  }\n\n  bool on_seq(P p1,P p2,P q) { // 線分p1-p2上に点qがあるか\n    return (abs((p1 - q).det(p2 - q)) < eps) && ((p1 - q).dot(p2 - q) < (eps));\n  }\n\n  bool have_intersection(P p1,P p2,P q1,P q2) { // 線分p1-p2と線分q1-q2がが交点を持つか\n    if (abs((p1-p2).det(q1-q2)) > eps) {\n      P r = intersection(p1,p2,q1,q2);\n      return (on_seq(p1,p2,r) && on_seq(q1,q2,r));\n    }\n    else return (on_seq(p1,p2,q1) || on_seq(p1,p2,q2) || on_seq(q1,q2,p1) || on_seq(q1,q2,p2));\n  }\n\n  vector<P> convexHull(vector<P> &point){\n      LL n = point.size();\n      vector<P> qs(n*2);\n      sort(point.begin(),point.end(),cmp_x);\n      long k = 0;\n\n      REP(i,n){ //下側凸包の作成\n        while(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n\n      for(long i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n        while(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n      qs.resize(k-1);\n      return qs;\n  }\n\n  long double getArea(vector<P> &point){\n      long double s = 0;\n      LL n = point.size();\n      REP(i,n-1) s += point[i].det(point[i+1]);\n      s += point[n-1].det(point[0]);\n      return abs(s) * 0.5;\n  }\n\n  long double getAngle(P v1,P v2){ //2ベクトルのなす角を出す。\n    return acos(v1.dot(v2)/sqrt(v1.twiceNorm() * v2.twiceNorm()));\n  }\n};\nint main(void) {\n\tPlane pl;\n\tint N;\n\tcin >> N;\n\tREP(i,N) {\n\t\tP p0,p1,p2,p3;\n\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\tlong double ang = pl.getAngle(p0-p1,p2-p3);\n\t\tif (abs(ang) < eps || abs(ang - pi) < eps) cout << 2 << endl;\n\t\telse if (abs(ang - (pi/2.0)) < eps || abs(ang - (1.5*pi)) < eps) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\n}\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <complex>\nusing namespace std;\n\ntypedef long long lli;\ntypedef complex<lli> point;\n\nlli dot(point a,point b){\n\treturn (a*conj(b)).real();\n}\n\nlli cross(point a,point b){\n\treturn (a*conj(b)).imag();\n}\n\nint main(void){\n\tlli x,y;\n\tint q;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x>>y;\n\t\tpoint p0(x,y);\n\t\tcin>>x>>y;\n\t\tpoint p1(x,y);\n\t\tcin>>x>>y;\n\t\tpoint p2(x,y);\n\t\tcin>>x>>y;\n\t\tpoint p3(x,y);\n\t\tpoint l1=p1-p0;\n\t\tpoint l2=p3-p2;\n\t\tif(cross(l1,l2)==0)cout<<\"2\"<<endl;\n\t\telse if(dot(l1,l2)==0)cout<<\"1\"<<endl;\n\t\telse cout<<\"0\"<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i = 0; i < (n) ; i++)\nconstexpr auto INF = 2147483647;\ntypedef long long ll;\n\nclass Vector2{\n  public:\n  int x, y;\n  Vector2(){}\n  Vector2(int x, int y): x(x), y(y) {}\n\n  Vector2 operator + (Vector2 v) {\n    return Vector2(x + v.x , y + v.y);\n  }\n  Vector2 operator - (Vector2 v) {\n    return Vector2(x - v.x , y - v.y);\n  }\n\n};\n\nint dot(Vector2 a, Vector2 b){\n  return a.x * b.x + a.y * b.y; \n}\n\nint cross(Vector2 a, Vector2 b){\n  return a.x * b.y - a.y*b.x;\n}\n\nint main(){\n  Vector2 v_1, v_2,p_1,p_2;\n  int n,dot_, cross_;\n  cin >> n;\n  rep(i,n){\n    cin >> p_1.x >> p_1.y >> p_2.x >> p_2.y;\n    v_1 = p_2 - p_1;\n    cin >> p_1.x >> p_1.y >> p_2.x >> p_2.y;\n    v_2 = p_2 - p_1;\n    dot_ = dot(v_1, v_2);\n    cross_ = cross(v_1, v_2);\n    if(dot_ == 0) cout << 1;\n    else if(cross_ == 0) cout << 2;\n    else cout << 0;\n    cout << endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (abs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(0), y(0){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tVector v1(x1 - x0, y1 - y0);\n\t\tVector v2(x3 - x2, y3 - y2);\n\t\tif (isParallel(v1, v2)) cout << 2 << endl;\n\t\telse if (isOrthogonal(v1, v2)) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<cmath>\n#include<map>\n#include<set>\n#include<string>\n#include<queue>\n#include<stack>\nusing namespace std;\n#define MON 1000000007\n#define INF (1<<29)\n#define EPS (1e-10)\ntypedef long long Int;\ntypedef pair<Int, Int> P;\n\n#define max(x, y) ((x)>(y)?(x):(y))\n#define min(x, y) ((x)<(y)?(x):(y))\n\nclass Vec{\npublic:\n  double x, y;\n  Vec(double x = 0, double y = 0):x(x),y(y){}\n\n  void read(){\n    cin >> x >> y;\n  }\n  \n  Vec operator+(const Vec &other)\n  {\n    Vec result = *this;\n    result.x += other.x;\n    result.y += other.y;\n    return result;\n  }\n\n  Vec operator-(const Vec &other)\n  {\n    Vec result = *this;\n    result.x -= other.x;\n    result.y -= other.y;\n    return result;\n  }\n\n  Vec operator*(const float &k)\n  {\n    Vec result = *this;\n    result.x *= k;\n    result.y *= k;\n    return result;\n  }\n\n  Vec operator/(const float &k)\n  {\n    Vec result = *this;\n    result.x /= k;\n    result.y /= k;\n    return result;\n  } \n  \n  double cross(const Vec &other)\n  {\n    return x*other.y - y*other.x;\n  }\n\n  double dot(const Vec &other){\n    return x*other.x + y*other.y;\n  }\n  \n  bool operator==(const Vec &other) const\n  {\n    return abs(x - other.x) < EPS && abs(y - other.y) < EPS;\n  }\n\n  float norm()\n  {\n    return sqrt(x*x+y*y);\n  }\n\n  float norm2()\n  {\n    return x*x+y*y;\n  }\n\n  Vec standard(){\n    Vec result = *this;\n    return result/result.norm();\n  }\n};\n\nclass Line{\npublic:\n  Vec a, b;\n  Vec vect;\n  Line(Vec a = Vec(), Vec b = Vec()):a(a),b(b),vect(b-a){}\n\n  //projection\n  Vec proj(Vec p){\n    p = p - a;\n    return a + vect * vect.dot(p) / vect.norm2();\n  }\n\n  //reflection\n  Vec reflect(Vec p){\n    return proj(p) * 2 - p;\n  }\n\n  bool onSegment(Vec p){\n    return abs((p-a).cross(b-a)) < EPS && (p-a).dot(p-b) < EPS;\n  }\n};\n\n\n//ccw:1, cw:-1, other:0\nInt CCW(Vec a, Vec b, Vec c){\n  b = b - a;\n  c = c - a;\n  if(b.cross(c) > EPS)return -1;\n  if(b.cross(c) < -EPS)return 1;\n  return 0;\n}\n\nint main(){\n  Int q;\n  cin >> q;\n  while(q--){\n    Vec p0, p1, p2, p3;\n    p0.read();\n    p1.read();\n    p2.read();\n    p3.read();\n    Vec s1 = p1 - p0;\n    Vec s2 = p3 - p2;\n    if(abs(s1.cross(s2)) < EPS)cout << 2 << endl;\n    else if(abs(s1.dot(s2)) < EPS)cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define ll long long\n#define INF 1000000005\n#define MOD 1000000007\n#define EPS 10e-10\n#define rep(i,n) for(int i=0;i<n;++i)\n\nusing namespace std;\n\ntypedef pair<int,int>P;\n\nconst int MAX_N = 100005;\n\nint Q;\n\nint judge(P p0,P p1,P p2,P p3)\n{\n\tP a = P(p1.first - p0.first,p1.second - p0.second);\n\tP b = P(p3.first - p2.first,p3.second - p2.second);\n\tdouble sa = sqrt(a.first*a.first + a.second*a.second);\n\tdouble sb = sqrt(b.first*b.first + b.second*b.second);\n\tdouble cs = (a.first*b.first+a.second*b.second)/(sa*sb);\n\tif(1-cs < EPS || 1+cs < EPS){\n\t\treturn 2;\n\t}else if(abs(cs) < EPS){\n\t\treturn 1;\n\t}else{\n\t\treturn 0;\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d\",&Q);\n\trep(i,Q){\n\t\tint a,b,c,d,e,f,g,h;\n\t\tscanf(\"%d%d%d%d%d%d%d%d\",&a,&b,&c,&d,&e,&f,&g,&h);\n\t\tprintf(\"%d\\n\",judge(P(a,b),P(c,d),P(e,f),P(g,h)));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-10;\n\nint dcmp(double x) {\n        if(fabs(x) < eps) return 0;\n        return x < 0 ? -1 : 1;\n}\n\n#define Vector P\nstruct P {\n        double x, y;\n        P(double x = 0, double y = 0): x(x), y(y) {}\n        P operator + (P b) {return P(x + b.x, y + b.y);}\n        P operator - (P b) {return P(x - b.x, y - b.y);}\n        P operator * (double b) {return P(x * b, y * b);}\n        P operator / (double b) {return P(x / b, y / b);}\n        double operator * (P b) {return x * b.x + y * b.y;} // Dot\n        double operator ^ (P b) {return x * b.y - y * b.x;} // Cross\n        double abs() {return hypot(x, y);}\n        P unit() {return *this / abs();}\n        P spin(double o) {\n                double c = cos(o), s = sin(o);\n                return P(c * x - s * y, s * x + c * y);\n        }\n};\n\nstruct Line {\n        //ax + by + c = 0\n        double a, b, c, theta;\n        P pa, pb;\n        Line(): a(0), b(0), c(0), theta(0), pa(), pb() {}\n        Line(P pa, P pb): a(pa.y - pb.y), b(pb.x - pa.x), c(pa ^ pb), theta(atan2(-a, b)), pa(pa), pb(pb) {}        P projection(P p) {return pa + (pb - pa).unit() * ((pb - pa) * (p - pa) / (pb - pa).abs());}                P reflection(P p) {return p + (projection(p) - p) * 2;}\n        double get_ratio(P p) {return (p - pa) * (pb - pa) / ((pb - pa).abs() * (pb - pa).abs());}\n        P dis(P p) {return ((pb - pa) ^ (p - pa)) / (pb - pa).abs();} // directed distance\n};\n\nstruct Circle {\n        P c;\n        double r;\n        Circle(P c, double r = 0): c(c), r(r) {}\n};\nbool onsegment(P p, P a, P b) {\n        return dcmp((a - p) ^ (b - p)) == 0 && dcmp((a - p) * (b - p)) <= 0;\n}\nbool segment_intersection(P p1, P p2, P p3, P p4) { // end points are not allowed\n        return dcmp((p2 - p1) ^ (p3 - p1)) * dcmp((p2 - p1) ^ (p4 - p1)) < 0\n                && dcmp((p4 - p3) ^ (p1 - p3)) * dcmp((p4 - p3) ^ (p2 - p3)) < 0;\n\n}\n\nint main() {\n        ios_base::sync_with_stdio(false); cin.tie(0);\n        int q; cin >> q;\n        while(q--) {\n                P p0, p1, p2, p3;\n                cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n                Vector v1 = p1 - p0, v2 = p3 - p2;\n                if(dcmp(v1 ^ v2) == 0) cout << 2 << '\\n';\n                else if(dcmp(v1 * v2) == 0) cout << 1 << '\\n';\n                else cout << 0 << '\\n';\n        }\n        return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\n//#define equals( a, b ) (fabs((a) - (b)) < DBL_E)\n\nclass Vector2 {\npublic:\n\tVector2(double x_, double y_) : x(x_), y(y_) {}\n\tVector2() : x(0), y(0) {}\n\tVector2 operator -(Vector2& other) {\n\t\tVector2 vec(x - other.GetX(), y - other.GetY());\n\t\treturn vec;\n\t}\n\tvoid SetVector2(double x_, double y_) {\n\t\tx = x_;\n\t\ty = y_;\n\t}\n\tdouble GetX() {\n\t\treturn x;\n\t}\n\tdouble GetY() {\n\t\treturn y;\n\t}\n\nprivate:\n\tdouble x, y;\n};\n\ndouble Dot(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetX() + vecA.GetY() * vecB.GetY();\n}\n\ndouble CrossY(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetY() - vecA.GetY() * vecB.GetX();\n}\n\nbool IsOrthogonal(Vector2 vecA, Vector2 vecB) {\n    double ans = Dot(vecA, vecB);\n//\treturn equals(ans, 0.0);\n\treturn (fabs(ans) < DBL_EPSILON);\n}\n\nbool IsParallel(Vector2 vecA, Vector2 vecB) {\n\tdouble ans = CrossY(vecA, vecB);\n\treturn (fabs(ans) < DBL_EPSILON);\n}\n\nint main() {\n\tint query;\n\tcin >> query;\n\n\tfor (int i = 0; i < query; i++) {\n\t\tVector2 vecs[4];\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tdouble x, y;\n\t\t\tcin >> x >> y;\n\t\t\tvecs[i].SetVector2(x, y);\n\t\t}\n\n\t\tVector2 vecA = vecs[1] - vecs[0];\n\t\tVector2 vecB = vecs[3] - vecs[2];\n\t\tbool orth = IsOrthogonal(vecA, vecB);\n\t\tif (orth) {\n\t\t\tcout << 1 << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbool para = IsParallel(vecA, vecB);\n\t\tif (para) {\n\t\t\tcout << 2 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tcout << 0 << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define rep(i,n) for(int (i)=0;(i)<(n);(i)++)\n#define rrep(i,n) for(int (i)=((n)-1);(i)>=0;(i)--)\n#define itn int\n#define miele(v) min_element(v.begin(), v.end())\n#define maele(v) max_element(v.begin(), v.end())\n#define SUM(v) accumulate(v.begin(), v.end(), 0LL)\n#define lb(a, key) lower_bound(a.begin(),a.end(),key)\n#define ub(a, key) upper_bound(a.begin(),a.end(),key)\n#define COUNT(a, key) count(a.begin(), a.end(), key) \n#define BITCOUNT(x) __builtin_popcount(x)\n#define pb push_back\n#define all(x) (x).begin(),(x).end()\n#define F first\n#define S second\nusing P = pair <int,int>;\nusing WeightedGraph = vector<vector <P>>;\nusing UnWeightedGraph = vector<vector<int>>;\nconst long long INF = 1LL << 60;\nconst int MOD = 1000000007;\nvoid YN(bool flg) {cout<<(flg?\"YES\":\"NO\")<<'\\n';}\nvoid Yn(bool flg) {cout<<(flg?\"Yes\":\"No\")<<'\\n';}\nvoid yn(bool flg) {cout<<(flg?\"yes\":\"no\")<<'\\n';}\ntemplate <typename T> \nint getIndexOfLowerBound(vector <T> &v, T x){\n    return lower_bound(v.begin(),v.end(),x)-v.begin();\n}\ntemplate <typename T> \nint getIndexOfUpperBound(vector <T> &v, T x){\n    return upper_bound(v.begin(),v.end(),x)-v.begin();\n}\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\n#define DUMPOUT cerr\n#define repi(itr, ds) for (auto itr = ds.begin(); itr != ds.end(); itr++)\ntemplate <typename T, typename U>\nistream &operator>>(istream &is, pair<T,U> &p_var) {\n    is >> p_var.first >> p_var.second;\n    return is;\n}\ntemplate <typename T>\nistream &operator>>(istream &is, vector<T> &vec) {\n    for (T &x : vec) is >> x;\n    return is;\n}\ntemplate <typename T>\nistream &operator>>(istream &is, vector<vector<T>> &df) {\n    for(int i=0;i<df.size();i++)for(int j=0;j<df[i].size();j++)\n    is >> df[i][j];\n    return is;\n}\ntemplate <typename T, typename U>\nostream &operator<<(ostream &os, pair<T, U> &pair_var) {\n    DUMPOUT<<'{';\n    os << pair_var.first;\n    DUMPOUT<<',';\n    os << \" \"<< pair_var.second;\n    DUMPOUT<<'}';\n    return os;\n}\ntemplate <typename T>\nostream &operator<<(ostream &os, vector<T> &vec) {\n    DUMPOUT<<'[';\n    for (int i = 0; i < vec.size(); i++) \n    os << vec[i] << (i + 1 == vec.size() ? \"\" : \" \");\n    DUMPOUT<<']';\n    return os;\n}\ntemplate <typename T>\nostream &operator<<(ostream &os, vector<vector<T>> &df) {\n  for (auto& vec : df) os<<vec;\n  return os;\n}\ntemplate <typename T, typename U>\nostream &operator<<(ostream &os, map<T, U> &map_var) {\n    DUMPOUT << \"{\";\n    repi(itr, map_var) {\n        os << *itr;\n        itr++;\n        if (itr != map_var.end()) DUMPOUT << \", \";\n        itr--;\n    }\n    DUMPOUT << \"}\";\n    return os;\n}\ntemplate <typename T>\nostream &operator<<(ostream &os, set<T> &set_var) {\n    DUMPOUT << \"{\";\n    repi(itr, set_var) {\n        os << *itr;\n        itr++;\n        if (itr != set_var.end()) DUMPOUT << \", \";\n        itr--;\n    }\n    DUMPOUT << \"}\";\n    return os;\n}\nvoid print() {cout << endl;}\ntemplate <class Head, class... Tail>\nvoid print(Head&& head, Tail&&... tail) {\n  cout << head;\n  if (sizeof...(tail) != 0) cout << \" \";\n  print(forward<Tail>(tail)...);\n}\nvoid dump_func() {DUMPOUT << '#'<<endl;}\ntemplate <typename Head, typename... Tail>\nvoid dump_func(Head &&head, Tail &&... tail) {\n    DUMPOUT << head;\n    if (sizeof...(Tail) > 0) DUMPOUT << \", \";\n    dump_func(std::move(tail)...);\n}\n#ifdef DEBUG_\n#define DEB\n#define dump(...)                                                              \\\n    DUMPOUT << \"  \" << string(#__VA_ARGS__) << \": \"                            \\\n            << \"[\" << to_string(__LINE__) << \":\" << __FUNCTION__ << \"]\"        \\\n            << endl                                                            \\\n            << \"    \",                                                         \\\n        dump_func(__VA_ARGS__)\n#else\n#define DEB if (false)\n#define dump(...)\n#endif\n\nconst double EPS = 1e-15;\nconst double PI=3.14159265358979323846;\nusing Real = long double;\nusing Point = complex<Real>;\nusing Vector2d = complex<Real>;\nPoint operator*(const Point &p, const Real &d) {\n  return Point(real(p) * d, imag(p) * d);\n}\nistream &operator>>(istream &is, Point &p) {\n  Real a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\nstruct Circle {\n    Point center; Real radius;\n    Circle() {}\n    Circle(Point &center, Real &radius): center(center), radius(radius){}\n};\ninline int sgn(const Real &r) {//r>0:1 r==0:0 r<0:-1\n\treturn (r < -EPS ? -1 : (r > EPS ? +1 : 0));\n}\ninline Real dot(const Point &a, const Point &b){//内積\n    return real(a)*real(b) + imag(a)*imag(b);\n}\ninline Real det(const Point &a, const Point &b){//外積\n    return real(a)*imag(b) - imag(a)*real(b);\n}\nstruct Line {\n    Point a, b;\n    Line(){};\n    Line(Point a,Point b):a(a),b(b){};\n};\ninline bool isParallel(const Vector2d & a, const Vector2d &b){\n    return abs(det(a, b)) < EPS;\n}\ninline bool isOrthogonal(const Vector2d& a,const Vector2d& b){\n    return abs(dot(a, b)) < EPS;\n}\nsigned main(void) { cin.tie(0); ios::sync_with_stdio(false);\n    int t; cin>>t;\n    rep(ti, t){\n        Point a1, a2, b1, b2;\n        cin>>a1>>a2>>b1>>b2;\n        Vector2d a = a2-a1, b = b2-b1;\n        if(isParallel(a, b)) print(2);\n        else if(isOrthogonal(a, b)) print(1);\n        else print(0);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<cmath>\n\nint main(){\n    int q;\n    scanf(\"%d\",&q);\n    double x[2][2][q];\n    double y[2][2][q];\n    double p;\n    double v;\n    for(int i = 0; i < q; i++){\n        scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &x[0][0][i], &y[0][0][i], &x[0][1][i], &y[0][1][i], &x[1][0][i], &y[1][0][i], &x[1][1][i], &y[1][1][i]);\n        p = (x[0][1][i]-x[0][0][i])*(y[1][1][i]-y[1][0][i]) - (x[1][1][i]-x[1][0][i])*(y[0][1][i]-y[0][0][i]);\n        v = (x[0][1][i]-x[0][0][i])*(x[1][1][i]-x[1][0][i]) + (y[1][1][i]-y[1][0][i])*(y[0][1][i]-y[0][0][i]);\n        if (p < 0.000000001 && p > -0.000000001){\n            printf(\"2\\n\");\n        } else if (v < 0.000000001 && v > -0.000000001){\n            printf(\"1\\n\");\n        } else {\n            printf(\"0\\n\");\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "// #define _GLIBCXX_DEBUG\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define all(v) v.begin(), v.end()\n#define Graph vector< vector<int> >\ntypedef long long ll;\ntypedef pair<int, int> P;\nconst int INF = 1000000007;\n\nconst double EPS = 1e-10;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstruct Point{\n    double x, y;\n    Point(){}\n    Point(int x0, int y0){\n        x = x0; y = y0;\n    }\n\n    Point operator +(const Point &p){\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator -(const Point &p){\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator *(const double &a){\n        return Point(a * x, a * y);\n    }\n    Point operator /(const double &a){\n        return Point(x / a, y / a);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p){\n        return equals(x, p.x) && equals(y, p.y);\n    }\n\n    bool operator < (const Point &p){\n        // if(x != p.x) return x < p.x;\n        // else return y < p.y; \n        return x != p.x ? x < p.x : y < p.y ;\n    }\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(double x0, double y0, double r0){\n        c.x = x0;\n        c.y = y0;\n        r = r0;\n    }\n};\n\nint main(){\n    int Q;\n    cin >> Q;\n    rep(i, Q){\n        Point p0, p1, p2, p3;\n        cin >> p0.x >> p0.y;\n        cin >> p1.x >> p1.y;\n        cin >> p2.x >> p2.y;\n        cin >> p3.x >> p3.y;\n        Vector s1 = p0 - p1, s2 = p2 - p3;\n        if(equals(cross(s1, s2), 0)) cout << 2 << endl;\n        else if (equals(dot(s1, s2), 0)) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cassert>// c\n#include <iostream>// io\n#include <iomanip>\n#include <fstream>\n#include <sstream>\n#include <vector>// container\n#include <map>\n#include <set>\n#include <queue>\n#include <bitset>\n#include <stack>\n#include <algorithm>// other\n#include <complex>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\ntypedef int32_t i32;typedef int64_t i64;typedef i64 ll;typedef uint32_t uint;typedef uint64_t ull;\n\n#define ALL(c) (begin(c)),(end(c))\n#define REP(i,n) FOR(i,0,n)\n#define REPr(i,n) FORr(i,0,n)\n#define FOR(i,l,r) for(int i=(int)(l);i<(int)(r);++i)\n#define FORr(i,l,r) for(int i=(int)(r)-1;i>=(int)(l);--i)\n#define EACH(it,o) for(__typeof((o).begin()) it = (o).begin(); it != (o).end(); ++it)\n#define IN(l,v,r) ((l)<=(v) && (v)<(r))\n\n//debug\n#define DUMP(x)  cerr << #x << \" = \" << (x)\n#define DUMPLN(x)  DUMP(x) <<endl\n#define DEBUG(x) DUMP(x) << LINE() << \" \" << __FILE__\n#define DEBUGLN(x) DEBUG(x)<<endl\n#define LINE()    cerr<< \" (L\" << __LINE__ << \")\"\n#define LINELN()    LINE()<<endl\n#define CHECK(exp,act)  if(exp!=act){DUMPLN(exp);DEBUGLN(act);}\n#define STOP(e)  CHECK(e,true);if(!(e)) exit(1);\n\nclass range {\nprivate:\n    struct Iter{\n        int v;\n        int operator*(){return v;}\n        bool operator!=(Iter& itr) {return v < itr.v;}\n        void operator++() {++v;}\n    };\n    Iter i, n;\npublic:\n    range(int n) : i({0}), n({n}) {}\n    range(int i, int n) : i({i}), n({n}) {}\n    Iter& begin() {return i;}\n    Iter& end() {return n;}\n};\n\n//output\ntemplate<typename T> ostream& operator << (ostream& os, const vector<T>& as){REP(i,as.size()){if(i!=0)os<<\" \"; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const vector<vector<T> >& as){REP(i,as.size()){if(i!=0)os<<endl; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const set<T>& ss){EACH(a,ss){if(a!=ss.begin())os<<\" \"; os<<a;}return os;}\ntemplate<typename T1,typename T2> ostream& operator << (ostream& os, const pair<T1,T2>& p){os<<p.first<<\" \"<<p.second;return os;}\ntemplate<typename K,typename V> ostream& operator << (ostream& os, const map<K,V>& m){bool isF=true;EACH(p,m){if(!isF)os<<endl;os<<p;isF=false;}return os;}\n\n//input\nchar tmp[1000];\n#define nextInt(n) scanf(\"%d\",&n)\n#define nextLong(n) scanf(\"%lld\",&n) //I64d\n#define nextDouble(n) scanf(\"%lf\",&n) \n#define nextChar(n) scanf(\"%c\",&n)\n#define nextString(n) scanf(\"%s\",tmp);n=tmp\n\n// values\ntemplate<class T> T INF(){assert(false);};\ntemplate<> int INF<int>(){return 1<<28;};\ntemplate<> ll INF<ll>(){return 1LL<<58;};\ntemplate<> double INF<double>(){return 1e16;};\n\nnamespace _double_tmpl{\n    typedef long double D;const D EPS = 1e-8;\n    \n    static constexpr D Ae=0;\n    D A(D a,D b){return a+b;}D Ainv(D a){return -a;}\n    D S(D a,D b){return A(a,Ainv(b));}\n    \n    static constexpr D Me=1;\n    D M(D a,D b){return a*b;}D Minv(D a){return 1.0/a;};\n\n    int sig(D a,D b=0){return a<b-EPS?-1:a>b+EPS?1:0;}\n    bool eq(D a,D b){ return sig(abs(a-b))==0;}\n\n}\nusing namespace _double_tmpl;\nnamespace Ps{\n    // using namespace _double_tmpl;\n    typedef complex<D> P,Vec;\n\n#define X real()\n#define Y imag()\n    istream& operator >> (istream& is,complex<D>& p){\n        D x,y;is >> x >> y;p=P(x,y);return is;\n    }\n\n    bool eq(P a,P b){return eq(a.X,b.X) and eq(a.Y,b.Y);}\n    // a×b\n    D cross(const Vec& a,const Vec& b){return imag(conj(a)*b);}\n    // a・b\n    D dot(const Vec&a,const Vec& b) {return real(conj(a)*b);}\n\n    int ccw(const P& a,P b,P c){\n        b -= a; c -= a;\n        if (cross(b,c) > EPS)   return +1;       // counter clockwise\n        if (cross(b,c) < -EPS)   return -1;       // clockwise\n        if (dot(b,c) < 0)     return +2;       // c--a--b on line\n        if (norm(b) < norm(c)) return -2;       // a--b--c on line\n        return 0;\n    }   \n}\nusing namespace Ps;\n\nnamespace Ls{\n    struct L : public vector<P> {\n        L(const P &a, const P &b) {\n            push_back(a); push_back(b);\n        }\n    };\n\n}\nusing namespace Ls;\n\n\nstringstream ss;\nclass Main{\n    public:\n    void run(){\n        \n        int q;cin >> q;\n        REP(i,q){\n            P a,b;cin >> a >> b;L l(a,b);\n            P c,d;cin >> c >> d;L l2(c,d);\n            if(eq(1,abs(dot(l[1]-l[0],l2[1]-l2[0])/abs(l[1]-l[0])/abs(l2[1]-l2[0]) ))){\n                cout << 2 <<endl;\n            }else if(eq(0,abs(dot(l[1]-l[0],l2[1]-l2[0])))){\n                cout << 1 <<endl;\n            }else{\n                cout << 0 <<endl;\n            }\n        }\n    }\n};\n\nint main(){\n cout <<fixed<<setprecision(20);\n cin.tie(0);\n ios::sync_with_stdio(false);\n Main().run();\n return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<cstdio>\n#define eps (1e-11)\n#define equals(a,b) (fabs((a)-(b))<eps)\nusing namespace std;\n\nclass Point{\npublic:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n\n  Point operator+(Point p){return Point(x+p.x,y+p.y);}\n  Point operator-(Point p){return Point(x-p.x,y-p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n\n  double abs(){return sqrt(norm());}\n\n  double norm(){return (x*x+y*y);}\n};\ntypedef Point Vector;\n\nclass Segment{\npublic:\n  Point p1,p2;\n  Segment(Point p1,Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\ndouble dot(Vector a,Vector b){return (a.x*b.x+a.y*b.y);}\ndouble cross(Vector a,Vector b){return (a.x*b.y-a.y*b.x);}\n\nPoint project(Segment s,Point p){\n  Vector base=(s.p2-s.p1);\n  double r=(dot(p-s.p1,base)/base.norm());\n  return (s.p1+base*r);\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nint main()\n{\n  Point A,B,C,D;\n  int n;\n\n  cin>>n;\n  for(int i=0;i<n;i++){\n    cin>>A.x>>A.y>>B.x>>B.y>>C.x>>C.y>>D.x>>D.y;\n    Vector a=A-B,b=C-D;\n    if(isOrthogonal(a,b))cout<<1<<endl;\n    else if(isParallel(a,b))cout<<2<<endl;\n    else cout<<0<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <climits>\n\nusing namespace std;\n\n\nbool isvertical(int x0, int x1, int x2, int x3, int y0, int y1, int y2, int y3){\n    \n    return !((x1-x0)*(x3-x2) + (y1-y0)*(y3-y2));\n    \n}\n\n\nbool isParallel(int x0, int x1, int x2, int x3, int y0, int y1, int y2, int y3){\n    \n    return (x3-x2)*(y1-y0) ==  (y3-y2)*(x1-x0);\n}\n\n\nint main(){\n    \n    int x0, x1, x2, x3, y0, y1, y2, y3;\n    int n;\n    \n    cin >> n;\n    \n    for (int i = 0; i < n; i++) {\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        \n        if\n        (\n            isvertical(x0, x1, x2, x3, y0, y1, y2, y3)\n        )\n        {\n            cout << 1 << endl;\n        }\n        else if\n        (\n            isParallel(x0, x1, x2, x3, y0, y1, y2, y3)\n        )\n        {\n            cout << 2 << endl;\n        }\n        else\n        {\n            cout << 0 <<endl;\n        }\n            \n        \n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define For(i, a, b) for(int (i)=(a); (i)<(b); ++(i))\n#define rFor(i, a, b) for(int (i)=(a)-1; (i)>=(b); --(i))\n#define rep(i, n) For((i), 0, (n))\n#define rrep(i, n) rFor((i), (n), 0)\n#define fi first\n#define se second\nusing namespace std;\ntypedef long long lint;\ntypedef unsigned long long ulint;\ntypedef pair<int, int> pii;\ntypedef complex<double> xy_t;\ntypedef pair<xy_t, int> pci;\ntypedef vector<lint> poly;\ntemplate<class T>bool chmax(T &a, const T &b){if(a<b){a=b; return true;} return false;}\ntemplate<class T>bool chmin(T &a, const T &b){if(a>b){a=b; return true;} return false;}\n\nconstexpr lint mod = 1e9+7;\nconstexpr lint INF = mod*mod;\nconstexpr int MAX = 100010;\n\nconstexpr double eps=1e-9;\n\ninline int sgn(double x){\n    if(x<-eps) return -1;\n    if(x>eps) return 1;\n    return 0;\n}\n\ninline bool EQ(double x, double y){\n    return sgn(x-y)==0;\n}\n\ninline bool GE(double x, double y){\n    return sgn(x-y)==1;\n}\n\ninline bool LE(double x, double y){\n    return sgn(x-y)==-1;\n}\n\ninline bool GEQ(double x, double y){\n    return sgn(x-y)>=0;\n}\n\ninline bool LEQ(double x, double y){\n    return sgn(x-y)<=0;\n}\n\nstruct Point{\n    double x, y;\n    Point(double x, double y): x(x), y(y){}\n\n    Point operator+(const Point &p){\n        return {x+p.x, y+p.y};\n    }\n\n    Point operator-(const Point &p){\n        return {x-p.x, y-p.y};\n    }\n\n    Point operator*(const double k){\n        return {k*x, k*y};\n    }\n\n    Point operator/(const double k){\n        return {x/k, y/k};\n    }\n\n    double operator*(const Point &p){\n        return x*p.x+y*p.y;\n    }\n\n    double operator^(const Point &p){\n        return x*p.y-y*p.x;\n    }\n\n    bool operator==(const Point &p){\n        return EQ(x, p.x) && EQ(y, p.y);\n    }\n};\n\nusing Vec=Point;\nusing pdi=pair<double, int>;\n\ndouble abs(Point p){\n    return hypot(p.x, p.y);\n}\n\ndouble arg(Point p){\n    return atan2(p.y, p.x);\n}\n\nconstexpr int CCW_COUNTER_CLOCKWISE=1;\nconstexpr int CCW_CLOCKWISE=-1;\nconstexpr int CCW_ONLINE_BACK=-2;\nconstexpr int CCW_ONLINE_FRONT=2;\nconstexpr int CCW_ON_SEGMENT=0;\n\ninline int ccw(Point a, Point b, Point c){\n    Vec v=b-a, w=c-a;\n    if(GE(v^w, 0)) return CCW_COUNTER_CLOCKWISE;\n    if(LE(v^w, 0)) return CCW_CLOCKWISE;\n    if(LE(v*w, 0)) return CCW_ONLINE_BACK;\n    if(LE((a-b)*(c-b), 0)) return CCW_ONLINE_FRONT;\n    return CCW_ON_SEGMENT;\n}\n\nbool isParallel(Vec a, Vec b){\n    return EQ(a^b, 0);\n}\n\nbool isOrthogonal(Vec a, Vec b){\n    return EQ(a*b, 0);\n}\n\nbool intersectSS(Point a, Point b, Point c, Point d){\n    return ccw(a, b, c)*ccw(a, b, d)<=0 && ccw(c, d, a)*ccw(c, d, b)<=0;\n}\n\nPoint getCrossPointLL(Point p, Vec v, Point q, Vec w){\n    double s=((q-p)^w)/(v^w);\n    return p+v*s;\n}\n\nint main(){\n    int q;\n    scanf(\"%d\", &q);\n    while(q--){\n        vector<Point> p;\n        rep(i, 4){\n            double x, y;\n            scanf(\"%lf%lf\", &x, &y);\n            p.emplace_back(x, y);\n        }\n        Vec a=p[1]-p[0], b=p[3]-p[2];\n        if(isParallel(a, b)) printf(\"2\\n\");\n        else if(isOrthogonal(a, b)) printf(\"1\\n\");\n        else printf(\"0\\n\");\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n\nusing namespace std;\n\ntypedef long long lint;\n\n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n\n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n\n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n\nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n  \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n  \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n  \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n  \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0): x(x), y(y){}\n\tPoint operator + (Point p){return Point(x + p.x, y + p.y);}\n\tPoint operator - (Point p){return Point(x - p.x, y - p.y);}\n\tPoint operator * (double a){return Point(x * a, y * a);}\n\tPoint operator / (double a){return Point(x / a, y / a);}\n\tPoint operator * (const Point &a){\n\t\treturn Point(x * a.x - y * a.y, x * a.y + y * a.x);\n\t}\n\tbool operator < (const Point &p) const {\n\t\treturn (x != p.x ? x < p.x : y < p.y);\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint baseP;\nbool sortT(Point a, Point b){return (gt(cross(a - baseP, b - baseP), 0));}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n\tif (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n\tif (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n\tif (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n\treturn (0); //p0--p2--p1 の順で一直線上\n}\n\nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    baseP = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n\nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n      \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    qs.resize(k - 1);\n    return (qs);\n}\n\ndouble getArea(Polygon t){\n    double ans = 0.0;\n\tt = normalize(t);\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n\nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n\treturn (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n\t\tabs(cross(p2 - p1, p4 - p1)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n\treturn (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n\treturn (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n\treturn (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n\treturn (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n\treturn (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n\nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n\tdouble t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n\treturn (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n\treturn (p3 + (projection(p1, p2, p3) - p3) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n\treturn (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n\treturn (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n\treturn (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n\tPoint r = projection(s1, s2, p);\n\tif (isIntersectSP(s1, s2, r)) return (abs(r - p));\n\treturn (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n\tif (isIntersectSS(s1, s2, t1, t2)) return (0);\n\treturn (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n\t\t\tmin(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n\tdouble d = cross(a2 - a1, b2 - b1);\n\tif (abs(d) < EPS) throw \"Segment is Paralell!\";\n\tPoint a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n\tvector<Point> res;\n\tif (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n\tdouble d = abs(c1 - c2);\n\tdouble rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n\tdouble rs = sqrt(r1 * r1 - rc * rc);\n\tPoint diff = (c2 - c1) / d;\n\tres.push_back(Point(c1 + diff * Point(rc, rs)));\n\tres.push_back(Point(c1 + diff * Point(rc, -rs)));\n\treturn (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n\tvector<Point> res;\n\tdouble dist = distanceLP(b1, b2, a);\n\tif (leq(dist, ra)){\n\t\tPoint s = projection(b1, b2, a);\n\t\tdist = sqrt(ra * ra - dist * dist);\n\t\tPoint t = (b2 - b1) / abs(b2 - b1);\n\t\tres.push_back(s + t * dist);\n\t\tres.push_back(s - t * dist);\n\t}\n\treturn (res);\n}\n\nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n\nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n  \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n  \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n  \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n\nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n\nint main()\n{\n\tint n;\n\t\n\tscanf(\"%d\", &n);\n\t\n\tfor (int i = 0; i < n; i++){\n\t\tPoint p0, p1, p2, p3;\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &p0.x, &p0.y, &p1.x, &p1.y, &p2.x, &p2.y, &p3.x, &p3.y);\n\t\tif (!isIntersectLL(p0, p1, p2, p3)) printf(\"2\\n\");\n\t\telse {\n\t\t\tif (eq(dot(p1 - p0, p3 - p2), 0)) printf(\"1\\n\");\n\t\t\telse printf(\"0\\n\");\n\t\t}\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ndouble EPS = 0.0000000001;\nint sign(double x){\n\tif (x > EPS){\n\t\treturn 1;\n\t} else if (x < -EPS){\n\t\treturn -1;\n\t} else {\n\t\treturn 0;\n\t}\n}\nbool equals(double x, double y){\n\treturn abs(x - y) < EPS;\n}\nstruct point{\n\tdouble x;\n\tdouble y;\n\tpoint(){\n\t\tx = 0;\n\t\ty = 0;\n\t}\n\tpoint(double X, double Y){\n\t\tx = X;\n\t\ty = Y;\n\t}\n\tpoint operator +(){\n\t\treturn point(x, y);\n\t}\n\tpoint operator -(){\n\t\treturn point(-x, -y);\n\t}\n\tpoint operator +(point P){\n\t\treturn point(x + P.x, y + P.y);\n\t}\n\tpoint operator -(point P){\n\t\treturn point(x - P.x, y - P.y);\n\t}\n\tpoint& operator +=(point P){\n\t\tx += P.x;\n\t\ty += P.y;\n\t\treturn *this;\n\t}\n\tpoint& operator -=(point P){\n\t\tx -= P.x;\n\t\ty -= P.y;\n\t\treturn *this;\n\t}\n\tpoint operator *(double k){\n\t\treturn point(x * k, y * k);\n\t}\n\tpoint operator /(double k){\n\t\treturn point(x / k, y / k);\n\t}\n\tpoint& operator *=(double k){\n\t\tx *= k;\n\t\ty *= k;\n\t\treturn *this;\n\t}\n\tpoint& operator /=(double k){\n\t\tx /= k;\n\t\ty /= k;\n\t\treturn *this;\n\t}\n\tbool operator ==(point P){\n\t\treturn equals(x, P.x) && equals(y, P.y);\n\t}\n\tbool operator !=(point P){\n\t\treturn !(*this == P);\n\t}\n\tbool operator <(point P){\n\t\treturn sign(P.x - x) == 1 || (equals(x, P.x) && sign(P.y - y) == 1);\n\t}\n\tbool operator >(point P){\n\t\treturn (P < *this);\n\t}\n\tpoint& rotate(double t){\n\t    double X = x * cos(t) - y * sin(t);\n\t    double Y = x * sin(t) + y * cos(t);\n\t    x = X;\n\t    y = Y;\n\t    return *this;\n\t}\n\tpoint& rotate(point P, double t){\n\t    *this -= P;\n\t    (*this).rotate(t);\n\t    *this += P;\n\t    return *this;\n\t}\n\tpoint& rotate90(){\n\t    swap(x, y);\n\t    x = -x;\n\t    return *this;\n\t}\n};\nistream& operator >>(istream &is, point &p){\n\tdouble x, y;\n\tis >> x >> y;\n\tp = point(x, y);\n\treturn is;\n}\nostream& operator <<(ostream &os, point p){\n\tos << p.x << ' ' << p.y;\n\treturn os;\n}\ndouble norm(point P){\n\treturn P.x * P.x + P.y * P.y;\n}\ndouble abs(point P){\n\treturn sqrt(norm(P)); \n}\ndouble dot(point P, point Q){\n\treturn P.x * Q.x + P.y * Q.y;\n}\ndouble cross(point P, point Q){\n  return P.x * Q.y - P.y * Q.x;\n}\nstruct line{\n\tpoint A;\n\tpoint B;\n\tline(){\n\t}\n\tline(point P){\n\t  B = P;\n\t}\n\tline(point P, point Q){\n\t\tA = P;\n\t\tB = Q;\n\t}\n\tline(double a, double b){\n\t\tA = point(0, b);\n\t\tB = point(1, a + b);\n\t}\n\tline(double a, double b, double c){\n\t\tif (sign(b) == 0){\n\t\t\tA = point(-c / a, 0);\n\t\t\tB = point(-c / a, 1);\n\t\t} else {\n\t\t\tA = point(0, -c / a);\n\t\t\tB = point(1, -(b + c) / a);\n\t\t}\n\t}\n};\nistream& operator >>(istream &is, line &L){\n\tpoint A, B;\n\tis >> A >> B;\n\tL = line(A, B);\n\treturn is;\n}\nostream& operator <<(ostream &os, line L){\n\tos << L.A << ' ' << L.B;\n\treturn os;\n}\npoint vec(line L){\n\treturn L.B - L.A;\n}\nbool is_orthogonal(line a, line b){\n\treturn sign(dot(vec(a), vec(b))) == 0;\n}\nbool is_parallel(line a, line b){\n  return sign(cross(vec(a), vec(b))) == 0;\n}\nint main(){\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++){\n\t  line l1, l2;\n\t  cin >> l1 >> l2;\n\t  if (is_parallel(l1, l2)){\n\t    cout << 2 << endl;\n\t  } else if (is_orthogonal(l1, l2)){\n\t    cout << 1 << endl;\n\t  } else {\n\t    cout << 0 << endl;\n\t  }\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <utility>\n#define EPS 1e-10\nusing namespace std;\ntypedef long long ll;\nstruct Point{\n\tdouble x,y;\n\tPoint(double x = 0.0,double y = 0.0): x(x),y(y) {}\n\tPoint operator + (Point p){\n\t\treturn Point(x + p.x,y + p.y);\n\t}\n\tPoint operator - (Point p){\n\t\treturn Point(x - p.x,y - p.y);\n\t}\n\tPoint operator * (double lambda){\n\t\treturn Point(x * lambda,y * lambda);\n\t}\n\tPoint operator / (double lambda){\n\t\treturn Point(x / lambda,y / lambda);\n\t}\n\tdouble norm(){\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs_(){\n\t\treturn sqrt(norm());\n\t}\n\tbool operator == (const Point &p)const\n\t{\n\t\treturn abs(x - p.x) < EPS && abs(y - p.y) < EPS;\n\t}\n\tbool operator < (const Point &p)const\n\t{\n\t\tif(abs(x - p.x) < EPS) return y - p.y < -EPS;\n\t\telse return x - p.x < EPS;\n\t}\n};\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(Point p1 = Point(),Point p2 = Point()): p1(p1),p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle{\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(),double r = 0.0): c(c),r(r) {}\n};\ntypedef vector<Point> Polygon;\ndouble dot(Vector a,Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble det(Vector a,Vector b){\n\treturn a.x * b.y - b.x * a.y;\n}\nbool vertical(Line l1,Line l2){\n\treturn abs(dot(l1.p2 - l1.p1,l2.p2 - l2.p1)) < EPS;\n}\nbool parallel(Line l1,Line l2){\n\treturn abs(det(l1.p2 - l1.p1,l2.p2 - l2.p1)) < EPS;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tLine l1,l2;\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&l1.p1.x,&l1.p1.y,&l1.p2.x,&l1.p2.y,&l2.p1.x,&l2.p1.y,&l2.p2.x,&l2.p2.y);\n\t\tif(parallel(l1,l2)) puts(\"2\");\n\t\telse if(vertical(l1,l2)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#include <cstdio>\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a, b) (abs((a) - (b)) < EPS) // 二つのスカラーが等しいかどうか\n#define EQV(a, b) (EQ((a).X, (b).X) && EQ((a).Y, (b).Y)) // 二つのベクトルが等しいかどうか\nusing namespace std;\n\ntypedef complex<double> Point; // 点\ntypedef Point Vector; // ベクトル\n\nstruct Segment{ // 線分\n  Point p1, p2;\n  Segment(){};\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}; // p1,p2をセット\n};\n\ntypedef Segment Line; // 直線\n\ntypedef vector<Point> Polygon; // 多角形\n\ndouble dotproduct(Vector a, Vector b) // 内積\n{\n  return real((conj(a) * b));\n}\n\ndouble crossproduct(Vector a, Vector b) // 外積\n{\n  return imag(conj(a) * b);\n}\n\ndouble dist(Point p1, Point p2) // 二点間の距離\n{\n  return abs(p1 - p2);\n}\n\nPoint project(Line l, Point p) // 射影\n{\n  double r = dotproduct(p - l.p1, l.p2 - l.p1) / norm(l.p2 - l.p1);\n  return l.p1 + (l.p2 - l.p1) * r;\n}\n\nPoint reflect(Line l, Point p) // 反射\n{\n  return p + (project(l, p) - p) * 2.0;\n}\n\nbool isOrthogonal(Line l1, Line l2)\n{\n  return EQ(dotproduct(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\n\nbool isParallel(Line l1, Line l2)\n{\n  return EQ(crossproduct(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\n\nint main()\n{\n  int n;\n  for(int i = 0; i < n; i++){\n    Point a, b, c, d;\n    cin >> a.X >> a.Y >> b.X >> b.Y >> c.X >> c.Y >> d.X >> d.Y;\n    Line l1(a, b), l2(c, d);\n    if(isOrthogonal(l1, l2))\n      cout << \"1\" << endl;\n    else if(isParallel(l1, l2))\n      cout << \"2\" << endl;\n    else\n      cout << \"0\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n//??????????¨±???\nconst double EPS = 1e-9;\nbool equals(double a,double b){     //??????????¨±???????????????\n    return (fabs(a-b) < EPS);\n}\n\n//???\nclass Point{\npublic:\n    double x,y;\n    Point (double x=0,double y=0) : x(x),y(y){}\n\n    Point operator + (Point p){ return Point( x+p.x , y-p.y );}\n    Point operator - (Point p){ return Point( x-p.x , y-p.y ); }\n    Point operator * (double a){ return Point( a*x , a*y ); }\n    Point operator / (double a){ return Point( x/a , y/a ); }\n\n    double abs(){   //??§??????\n        return sqrt(norm());\n    }\n\n    double norm(){  //?????????\n        return x*x+y*y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n    }\n};\n\n//??????\nclass Segment{\npublic:\n    Point p1,p2;\n    Segment(Point a,Point b) : p1(a) , p2(b){}\n};\n\n//??´???\ntypedef Segment Line;\n\n//????????????\ntypedef Point Vector;\n\n// ?????????????????????????????? --------------\n//?????? : Vector\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//?????? : Vector\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n//Vector : ??´?????????\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b),0.0);\n}\n\n//Vector : ????????????\nbool isParalell(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\n// ??´????????????????????? ------------------\n// ??´?????????\nbool isOrthogonal(Line L1,Line L2){\n    return equals(dot(L1.p2-L1.p1 , L2.p2-L2.p1) , 0.0);\n}\n// ????????????\nbool isParalell(Line L1,Line L2){\n    return equals(cross(L1.p2-L1.p1 , L2.p2-L2.p1) , 0.0);\n}\n\n// ?????????????????????????????? --------------\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){     //??´???\n    return isOrthogonal(a1-a2,b1-b2);\n}\nbool isParalell(Point a1,Point a2,Point b1,Point b2){       //??????\n    return isParalell(a1-a2,b1-b2);\n}\n\n\nvoid solve(){\n    double p0x,p0y,p1x,p1y,p2x,p2y,p3x,p3y;\n    cin>>p0x>>p0y>>p1x>>p1y>>p2x>>p2y>>p3x>>p3y;\n\n    Point a(p0x,p0y),b(p1x,p1y),c(p2x,p2y),d(p3x,p3y);\n    Line l1(a,b);\n    Line l2(c,d);\n   bool f = isOrthogonal(l1,l2);\n    bool g = isParalell(l1,l2);\n\n    if(f) cout << 1 << endl;\n    else if(g) cout << 2 << endl;\n    else cout << 0 << endl;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i=0;i<q;i++){\n        solve();\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct Vector{\n    int x;\n    int y;\n    Vector(int x, int y) : x(x), y(y){}\n    int abs_square(){\n        return x * x + y * y;\n    }\n};\n\nint dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nint cross(Vector v1, Vector v2){\n    return v1.x * v2.y - v1.y * v2.x;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1;\n        cin >> x2 >> y2 >> x3 >> y3;\n        Vector v1 = Vector(x1 - x0, y1 - y0);\n        Vector v2 = Vector(x3 - x2, y3 - y2);\n        if (dot(v1, v2) == 0) {\n            cout << 1 << endl;\n            continue;\n        }\n        if (cross(v1, v2) == 0) {\n            cout << 2 << endl;\n            continue;\n        }\n        cout << 0 << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\n#include<cstdio>\n#define eps (1e-10)\n#define equals(a,b) (fabs((a)-(b))<eps)\nusing namespace std;\nclass Point{\n    public:\n    double x,y;\n    Point(double x=0,double y=0):x(x),y(y){}\n    Point operator -(Point p){\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator +(Point p){\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator *(double k){\n        return Point(x*k,y*k);\n    }\n    Point operator /(double k){\n        return Point(x/k,y/k);\n    }\n    Point operator == (Point p){\n        return equals(x,p.x)&&equals(y,p.y);\n    }\n    Point operator <(Point p){\n        return !equals(x,p.x)?(x-p.x)<eps:(y,p.y)<eps;\n    }\n    Point operator > (Point p){\n        return !equals(x,p.x)?(x-p.x)>eps:(y,p.y)>eps;\n    }\n};\ntypedef Point Vector;\nstruct segment{\n    Point p1,p2;\n};\ntypedef segment line;\nstruct circle{\n    Point c;\n    double r;\n};\ntypedef vector<Point>polygon;\ndouble norm(Vector V){\n    return V.x*V.x+V.y*V.y;\n}\ndouble abs(Vector V){\n    return sqrt(norm(V));\n}\ndouble dot(Vector V1,Vector V2){\n    return V1.x*V2.x+V1.y*V2.y;\n}\ndouble cross(Vector V1,Vector V2){\n    return V1.x*V2.y-V1.y*V2.x;\n}\nbool isprallel(Vector V1,Vector V2){\n    return equals(cross(V1,V2),0.0);\n}\nbool isprallel(line l1,line l2){\n    return equals(cross(l1.p2-l1.p1,l2.p2-l2.p1),0.0);\n}\nbool isorthogonal(Vector V1,Vector V2){\n    return equals(dot(V1,V2),0.0);\n}\nbool isorthogonal(line l1,line l2){\n    return equals(dot(l1.p2-l1.p1,l2.p2-l2.p1),0.0);\n}\nPoint projection(segment s,Point p){\n    Vector hypo,base;\n    hypo=p-s.p1;\n    base=s.p2-s.p1;\n    double r=dot(hypo,base)/norm(base);\n    return s.p1+base*r;\n}\nPoint reflection(segment s,Point p){\n    return p+(projection(s,p)-p)*2.0;\n}\ndouble getdistance(Point a,Point b){\n    return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));\n}\ndouble distancepl(Point p,line l){\n    return abs(cross(p-l.p1,l.p2-l.p1)/abs(l.p2-l.p1));\n}\ndouble distanceps(Point p,segment s){\n    if(dot(s.p2-s.p1,p-s.p2)>=0)return getdistance(p,s.p2);\n    else if(dot(s.p2-s.p1,p-s.p1)>=0)return getdistance(p,s.p1);\n    else return distancepl(p,s);\n}\ndouble distancess(segment s1,segment s2){\n    return min(min(distanceps(s1.p1,s2),distanceps(s1.p2,s2)),min(distanceps(s2.p1,s1),distanceps(s2.p2,s1)));\n}\nint main(){\n    int q;\n    line l,l1;\n    cin>>q;\n    while(q--){\n        cin>>l.p1.x>>l.p1.y>>l.p2.x>>l.p2.y>>l1.p1.x>>l1.p1.y>>l1.p2.x>>l1.p2.y;\n        if(isprallel(l,l1))printf(\"2\\n\");\n        else if(isorthogonal(l,l1))printf(\"1\\n\");\n        else printf(\"0\\n\");\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n};\ntypedef Point Vector;\nVector operator + (Vector A,Vector B){\n    return Vector(A.x+B.x,A.y+B.y);\n}\nVector operator - (Vector A,Vector B){\n    return Vector(A.x-B.x,A.y-B.y);\n}\nVector operator * (Vector A,double p){\n    return Vector(A.x*p,A.y*p);\n}\nVector operator / (Vector A,double p){\n    return Vector(A.x/p,A.y/p);\n}\nbool operator < (const Point& a,const Point& b){\n    return a.x<b.x||(a.x==b.x&&a.y<b.y);\n}\nconst double eps = 1e-10;\nint dcmp(double x){\n    if(fabs(x)<eps) return 0; else return (x<0?-1:1);\n}\nbool operator == (const Point& a,const Point& b){\n    return dcmp(a.x-b.x)==0 && dcmp(a.y-b.y)==0;\n}\n//点积\ndouble Dot(Vector A,Vector B){\n    return A.x*B.x+A.y*B.y;\n}\ndouble Length(Vector A){\n    return sqrt(Dot(A,A));\n}\ndouble Angle(Vector A,Vector B){\n    return acos(Dot(A,B)/Length(A)/Length(B));\n}\n \n//叉积\ndouble Cross(Vector A,Vector B){\n    return (A.x*B.y-A.y*B.x);\n}\n//三角形面积的二倍的叉乘公式\ndouble Area2(Point A,Point B,Point C){\n    return Cross(B-A,C-A);\n}\n//向量旋转,rad是弧度\nVector Rotate(Vector A,double rad){\n    return Vector(A.x*cos(rad)-A.y*sin(rad),A.x*sin(rad)+A.y*cos(rad));\n}\n//计算向量的单位法线,先逆时针旋转90度，然后把长度归一化\nVector Normal(Vector A){\n    double Len=Length(A);\n    return Vector(-A.y/Len,A.x/Len);\n}\n//求两直线交点\n//调用前请确保P+tv和Q+tw有唯一交点，当且仅当Cross(v,w)非0\nPoint GetLineIntersection(Point P,Vector v,Point Q,Vector w){\n    Vector u=P-Q;\n    double t=Cross(w,u)/Cross(v,w);\n    return P+v*t;\n}\n//点到直线的距离\ndouble DistanceToLine(Point P,Point A,Point B){\n    Vector v1=B-A,v2=P-A;\n    return fabs(Cross(v1,v2))/Length(v1);\n}\n//点到线段的距离\ndouble DistanceToSegment(Point P,Point A,Point B){\n    if(A==B) return Length(P-A);\n    Vector v1=B-A,v2=P-A,v3=P-B;\n    if(dcmp(Dot(v1,v2))<0) return Length(v2);\n    else if(dcmp(Dot(v1,v3))>0) return Length(v3);\n    else return fabs(Cross(v1,v2))/Length(v1);\n}\n//点在直线上的投影\nPoint GetLineProjection(Point P,Point A,Point B){\n    Vector v=B-A;\n    return A+v*(Dot(v,P-A)/Dot(v,v));\n}\nPoint GetLineReflection(Point P,Point A,Point B){\n    return GetLineProjection(P,A,B)*2-P;\n}\nint main(){\n    int t;\n    cin>>t;\n    while(t--){\n        Point A,B,C,D;\n        cin>>A.x>>A.y>>B.x>>B.y>>C.x>>C.y>>D.x>>D.y;\n        double cross=Cross(B-A,D-C);\n        double dot=Dot(B-A,D-C);\n        if(dcmp(dot)==0) cout<<1;\n        else if(dcmp(cross)==0) cout<<2;\n        else cout<<0;\n        cout<<\"\\n\";\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for (int i = 0; i < (n); i++)\n#define repd(i,a,b) for (int i = (a); i < (b); i++)\n#define INF LLONG_MAX\ntypedef long long ll;\n\ndouble naiseki(double x1, double y1, double x2, double y2)\n{\n\treturn x1*x2 + y1*y2;\n}\n\ndouble gaiseki(double x1, double y1, double x2, double y2)\n{\n\treturn x1*y2 - x2*y1;\n}\n\nint main(void)\n{\n\tint q;\n\tcin >> q;\n\tint xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n\tint p0p1_x, p0p1_y, p2p3_x, p2p3_y, nai, gai;\n\trep(i, q)\n\t{\n\t\tcin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n\t\tp0p1_x = xp1 - xp0;\n\t\tp0p1_y = yp1 - yp0;\n\t\tp2p3_x = xp3 - xp2;\n\t\tp2p3_y = yp3 - yp2;\n\t\tnai = naiseki(p0p1_x, p0p1_y, p2p3_x, p2p3_y);\n\t\tgai = gaiseki(p0p1_x, p0p1_y, p2p3_x, p2p3_y);\n\t\tif(gai == 0) cout << 2 << endl;\n\t\telse if(nai == 0) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double b) { return Point(x / b, y / b); }\n\tfriend istream& operator >> (istream & s, Point p) { s >> p.x >> p.y; }\n\n\tdouble dot(Point a, Point b) { return a.x* b.x + a.y * b.y; }\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tbool operator <(const Point & p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator == (const Point & p) const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n};\ntypedef Point Vector;\n\nstruct Segment {\n\tPoint p1, p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\ndouble norm(Vector a) { return a.x* a.x + a.y * a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\n\ndouble dot(Vector a, Vector b) { return a.x* b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x* b.y - a.y * b.x; }\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\telse return ON_SEGMENT;\n}\n\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\nint main(){\n  int n;cin>>n;\n  double x0,y0,x1,y1,x2,y2,x3,y3;\n  while(n--){\n    cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n    Point p0=Point(x0,y0),p1=Point(x1,y1),p2=Point(x2,y2),p3=Point(x3,y3);\n    if(isParallel(p0-p1,p2-p3)) cout << 2 << endl;\n    else if(isOrthogonal(p0-p1,p2-p3)) cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <complex>\n#include <cmath>\n\nusing namespace std;\n\nstatic const double EPS=1e-12;\nstatic const double INF=1e24;\n\nusing Point=complex<double>;\nusing Plane=vector<Point>;\n\nbool operator<(const Point &a, const Point &b) {\n    return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b);\n}\n\ndouble cross_prod(const Point &a, const Point &b) {\n    return imag(conj(a)*b);\n}\n\ndouble dot_prod(const Point &a, const Point &b) {\n    return real(conj(a)*b);\n}\n\nstruct Line: public pair<Point, Point> {\n    Line() {}\n    Line(const Point &a, const Point &b) {\n        first = a;\n        second = b;\n    }\n};\n\nbool is_parallel(const Line &l, const Line &m) {\n    return abs(cross_prod(l.second-l.first, m.second-m.first)) < EPS;\n}\n\nbool is_orthogonal(const Line &l, const Line &m) {\n    return abs(dot_prod(l.second-l.first, m.second-m.first)) < EPS;\n}\n\nint main() {\n    size_t q;\n    scanf(\"%zu\", &q);\n    for (size_t i=0; i<q; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        Point p0(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p1(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p2(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p3(x, y);\n\n        Line l(p0, p1), m(p2, p3);\n        if (is_parallel(l, m)) {\n            printf(\"2\\n\");\n        } else if (is_orthogonal(l, m)) {\n            printf(\"1\\n\");\n        } else {\n            printf(\"0\\n\");\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<iomanip>\n#include<vector>\n#include<cassert>\n\nusing namespace std;\n\nnamespace geometry2d {\n\n\t//eps　浮動小数点誤差\n\tconst double EPS = 1e-10;\n\n\t//a > 0ならば+1, a == 0ならば0, a < 0ならば-1　を返す。　基本的にEPS込みの評価はこれで行う。\n\t//不等式は、加減算に直してこれに適用する。\n\tint sgn(const double a) {\n\t\treturn (a < -EPS ? -1 : (a > EPS ? +1 : 0));\n\t}\n\n\tstruct Point {\n\t\t//2次元ベクトルのクラス\n\n\t\tdouble x, y;\n\t\tPoint(double _x, double _y) {\n\t\t\tx = _x, y = _y;\n\t\t}\n\t\tPoint() {\n\t\t\tx = 0, y = 0;\n\t\t}\n\n\t\tPoint operator+() const {\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator-() const {\n\t\t\treturn{ -x, -y };\n\t\t}\n\t\tPoint operator+ (const Point& b) const {\n\t\t\treturn{ x + b.x, y + b.y };\n\t\t}\n\t\tPoint operator- (const Point& b) const {\n\t\t\treturn{ x - b.x, y - b.y };\n\t\t}\n\t\tPoint operator* (const double b) const {\n\t\t\treturn{ x * b, y * b };\n\t\t}\n\t\tPoint operator/ (const double b) const {\n\t\t\treturn{ x / b, y / b };\n\t\t}\n\t\tPoint operator+= (const Point& b) {\n\t\t\tx += b.x, y += b.y;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator-= (const Point& b) {\n\t\t\tx -= b.x, y -= b.y;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator*= (const double b) {\n\t\t\tx *= b, y *= b;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator/= (const double b) {\n\t\t\tx /= b, y /= b;\n\t\t\treturn *this;\n\t\t}\n\t\tbool operator== (const Point& b) {\n\t\t\treturn b.x == x && b.y == y;\n\t\t}\n\n\t\tdouble lengthSquare() const {\n\t\t\treturn (x * x + y * y);\n\t\t}\n\t\tdouble length() const {\n\t\t\treturn std::sqrt(lengthSquare());\n\t\t}\n\t\tdouble dot(const Point& b) const {\n\t\t\treturn x * b.x + y * b.y;\n\t\t}\n\t\tdouble cross(const Point& b) const {\n\t\t\t//Generally, cross product is vector, but in 2D, cross product is also scalar.\n\t\t\treturn x * b.y - y * b.x;\n\t\t}\n\t\tdouble distanceFrom(const Point& b) const {\n\t\t\treturn std::sqrt((x - b.x) * (x - b.x) + (y - b.y) * (y - b.y));\n\t\t}\n\t\tPoint normalized() const {\n\t\t\treturn{ x / length(), y / length() };\n\t\t}\n\t\tbool isZero() const {\n\t\t\treturn sgn(x) == 0 && sgn(y) == 0;\n\t\t}\n\t\t//単位法線ベクトル\n\t\tPoint normalUnitVector() const {\n\t\t\treturn{ -normalized().y, normalized().x };\n\t\t}\n\t\t//(0, 0)中心にarg(弧度法)回転した座標\n\t\tPoint rotation(double arg) const {\n\t\t\tdouble cs = cos(arg), sn = sin(arg);\n\t\t\treturn Point(x * cs - y * sn, x * sn + y * cs);\n\t\t}\n\t\t//(0, 0)中心の円上に乗ってるとしたときの、偏角\n\t\tdouble angle() const {\n\t\t\treturn atan2(y, x);\n\t\t}\n\t};\n\n\tinline Point operator*(double a, const Point& b) {\n\t\treturn{ b.x * a, b.y * a };\n\t}\n\n\ttemplate <class Char>\n\tinline std::basic_ostream<Char>& operator <<(std::basic_ostream<Char>& os, const Point& v)\n\t{\n\t\treturn os << Char('(') << v.x << Char(',') << v.y << Char(')');\n\t}\n\n\ttemplate <class Char>\n\tinline std::basic_istream<Char>& operator >> (std::basic_istream<Char>& is, Point& v)\n\t{\n\t\treturn is >> v.x >> v.y;\n\t}\n\n\t//幾何ライブラリにおいて、解なしのような状態の時に返される点の値\n\tconst Point error_val = { 114514.0, -191981.0 };\n\n\tinline bool operator==(const Point& a, const Point& b) {\n\t\treturn (sgn(a.x - b.x) == 0 && sgn(a.y - b.y) == 0);\n\t}\n\n\t//第一にx, 第二にyを小さい順にソートするためのオーバーロード\n\tinline bool operator<(const Point& a, const Point& b) {\n\t\tif (sgn(a.x - b.x) != 0)return sgn(a.x - b.x) < 0;\n\t\telse sgn(a.y - b.y) < 0;\n\t}\n\n\t/*\n\t3点A, B, Cの位置関係を返す関数 A, Bがすべて異なった点であるのが前提\n\t//ABから見てBCは左に曲がるのなら +1\n\t//ABから見てBCは右に曲がるのなら -1\n\t//ABC(CBA)の順番で一直線上に並ぶなら +2\n\t//ACB(BCA)の順番で一直線上に並ぶなら 0\n\tBAC(CAB)の順番で一直線上に並ぶなら -2\n\t*/\n\tint iSP(const Point& a, const Point& b, const Point& c) {\n\t\tint flg = sgn((b - a).cross(c - a));\n\t\tif (flg == 1) {\n\t\t\treturn +1;\n\t\t}\n\t\telse if (flg == -1) {\n\t\t\treturn -1;\n\t\t}\n\t\telse {\n\t\t\t//ABC(CBA)\n\t\t\tif (sgn((b - a).dot(c - b)) > 0)\n\t\t\t\treturn +2;\n\t\t\t//BAC(CAB)\n\t\t\telse if (sgn((a - b).dot(c - a)) > 0)\n\t\t\t\treturn -2;\n\t\t\t//ACB(BCA)　CがA or Bと一致しても、こっちに含まれる。\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\t}\n\n\t//直線に関する操作や判定\n\tnamespace line2d {\n\n\t\t//向きつき直線を想定。Segment\n\t\tstruct Line {\n\t\t\t\n\t\t\t//直線の通る二点。有向直線でないのならば、beginやendに違いはない。\n\t\t\tPoint begin, end;\n\n\t\t\tLine() {\n\t\t\t\tbegin = Point(), end = Point();\n\t\t\t}\n\n\t\t\tLine(const Point& b, const Point& e) {\n\t\t\t\tbegin = b, end = e;\n\t\t\t}\n\n\t\t\t//ax+by+c=0\n\t\t\tLine(const double a, const double b, const double c) {\n\t\t\t\tif (sgn(a) == 0 && sgn(b) == 0) {\n\t\t\t\t\tassert(-1);\n\t\t\t\t}\n\n\t\t\t\tif (sgn(b) == 0) {\n\t\t\t\t\t//ax+c=0になる。\n\t\t\t\t\tbegin = Point(-c / a, 0.0);\n\t\t\t\t\tend = Point(-c / a, 1.0);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//y=-(ax+c)/b　傾きは-a/bで、y切片が-c/b\n\t\t\t\t\tbegin = Point(0, -c / b);\n\t\t\t\t\tend = Point(1.0, -(a + c) / b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tPoint vec() const {\n\t\t\t\treturn end - begin;\n\t\t\t}\n\n\t\t};\n\n\n\t\t//線分の場合、Lineと同じものになるが、はっきりと区別する\n\t\ttypedef Line Segment;\n\n\n\t\t//直線の交点を返す。交わってなければ、error_valを返す。\n\t\tPoint lineIntersection(const Line& l1, const Line& l2) {\n\t\t\tif (sgn(l1.vec().cross(l2.vec())) == 0)return error_val;\n\n\t\t\tPoint ret;\n\t\t\tret = l1.begin + l1.vec() * \n\t\t\t\tabs((l2.end - l1.begin).cross(l2.vec()) / l1.vec().cross(l2.vec()));\n\t\t\treturn ret;\n\t\t}\n\n\t\t//線分が共通部分を持つかどうか？と線分の交点を返す。共通部分がない、もしくは交点が一意ではないなら、error_valを返す。\n\t\t//trueなら、共通部分を持つ。falseなら、共通部分を持たない。\n\t\tpair<bool, Point> segmentIntersection(const Segment& s1, const Segment& s2) {\n\n\t\t\tif (iSP(s1.begin, s1.end, s2.begin) * iSP(s1.begin, s1.end, s2.end) <= 0 &&\n\t\t\t\tiSP(s2.begin, s2.end, s1.begin) * iSP(s2.begin, s2.end, s1.end) <= 0) {\n\n\t\t\t\t//平行ならば、交点は定まらない。(完全に重なってるので)\n\t\t\t\tif (s1.vec().cross(s2.vec()) == 0)\n\t\t\t\t\treturn make_pair(true, error_val);\n\t\t\t\telse //そうでないのなら、lineIntersection()で交点を返しておく。\n\t\t\t\t\treturn make_pair(true, lineIntersection(s1, s2));\n\n\t\t\t}\n\t\t\treturn make_pair(false, error_val);\n\t\t}\n\n\n\t\t//点と直線の距離。引数は、点、直線上の2点\n\t\tdouble distanceBetweenPointAndLine(const Point& p, const Line& l) {\n\t\t\treturn abs(l.vec().cross(p - l.begin) / l.vec().length());\n\t\t}\n\n\t\t//点と線分の距離。引数は、点、線分の両端\n\t\tdouble distanceBetweenPointAndSegment(const Point& p, const Segment& s) {\n\t\t\tif (sgn(s.vec().dot(p - s.begin)) < 0 || sgn(s.vec().dot(p - s.end)) < 0) {\n\t\t\t\t//下した垂線は線分の上にはない\n\t\t\t\treturn min(p.distanceFrom(s.begin), p.distanceFrom(s.end));\n\t\t\t}\n\t\t\treturn abs(s.vec().cross(p - s.begin) / s.vec().length());\n\t\t}\n\n\t\t//二線分間の距離\n\t\tdouble distanceBetweenSegmentAndSegment(const Segment& s1, const Segment& s2) {\n\t\t\tif (segmentIntersection(s1, s2).first)return 0;//交点を持つ\n\n\t\t\tdouble ans = distanceBetweenPointAndSegment(s1.begin, s2);\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s1.end, s2));\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s2.begin, s1));\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s2.end, s1));\n\t\t\treturn ans;\n\t\t}\n\n\t\t//正射影\n\t\t//引数は点A, B, Cで、BAベクトルの直線BC上の正射影を求める。\n\t\tPoint projection(const Point& a, const Line& l) {\n\t\t\tPoint ret;\n\t\t\tret = l.begin + \n\t\t\t\tl.vec().normalized() * (a - l.begin).dot(l.vec()) / l.vec().length();\n\t\t\treturn ret;\n\t\t}\n\n\t\t//鏡映変換。引数は点A, B, Cで、直線BCにおいて、Aと線対称な点を求める。\n\t\tPoint reflection(const Point& a, const Line& l) {\n\t\t\tPoint ret;\n\t\t\tret = a + 2 * (projection(a, l) - a);\n\t\t\treturn ret;\n\t\t}\n\t}\n\n}\n\nint main() {\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tgeometry2d::line2d::Line s1, s2;\n\t\tcin >> s1.begin >> s1.end >> s2.begin >> s2.end;\n\t\tif (geometry2d::sgn(s1.vec().dot(s2.vec())) == 0) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse if (geometry2d::sgn(s1.vec().cross(s2.vec())) == 0) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse\n\t\t\tcout << 0 << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <complex>\n#include <iomanip>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) {\n  return fabs(b - a) < EPS;\n}\n\nusing Point = complex<double>;\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nnamespace std {\nbool operator<(const Point &a, const Point &b) {\n  return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n}\n} // namespace std\n\ndouble cross(const Point &a, const Point &b) {\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(const Point &a, const Point &b) {\n  return a.real() * b.real() + a.imag() * b.imag();\n}\n\ndouble RadianToDegree(double r) {\n  return (r * 180.0 / acos(-1));\n}\n\ndouble DegreeToRadian(double d) {\n  return (d * acos(-1) / 180.0);\n}\n\ndouble GetAngle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if (alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nstruct Line {\n  Point a, b;\n\n  Line(){};\n  Line(Point a, Point b) : a(a), b(b){};\n\n  // Ax + By = C\n  Line(double A, double B, double C) {\n    if (eq(A, 0)) {\n      a = Point(0, C / B);\n      b = Point(1, C / B);\n    } else if (eq(B, 0)) {\n      a = Point(C / A, 0);\n      b = Point(C / A, 1);\n    } else {\n      a = Point(0, C / B);\n      b = Point(C / A, 0);\n    }\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment {\n  Point a, b;\n\n  Segment(){};\n  Segment(Point a, Point b) : a(a), b(b){};\n\n  friend ostream &operator<<(ostream &os, Segment &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Segment &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle(){};\n\n  Circle(Point p, double r) : p(p), r(r){};\n};\n\nusing Polygon = vector<Point>;\nusing Segments = vector<Segment>;\nusing Lines = vector<Line>;\nusing Circles = vector<Circle>;\nusing PointPoint = pair<Point, Point>;\n\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if (cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if (cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if (dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n  if (norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                          // \"ON_SEGMENT\"\n}\n\nbool Parallel(const Line &a, const Line &b) {\n  return abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n\nbool Orthogonal(const Line &a, const Line &b) {\n  return abs(dot(a.a - a.b, b.a - b.b)) < EPS;\n}\nint main() {\n  int n;\n  cin >> n;\n  while (n--) {\n    Line a, b;\n    cin >> a >> b;\n    if (Parallel(a, b))\n      puts(\"2\");\n    else if (Orthogonal(a, b))\n      puts(\"1\");\n    else\n      puts(\"0\");\n  }\n}\n\nPoint Projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\nPoint Projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint Reflection(const Line &l, const Point &p) {\n  return p + (Projection(l, p) - p) * 2.0;\n}\n\ndouble Distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\ndouble Distance(const Line &l, const Point &p) {\n  return abs(p - Projection(l, p));\n}\n\nbool Intersect(const Line &l, const Line &m);\ndouble Distance(const Line &l, const Line &m) {\n  return Intersect(l, m) ? 0 : Distance(l, m.a);\n}\n\nbool Intersect(const Segment &s, const Point &p);\ndouble Distance(const Segment &s, const Point &p) {\n  Point r = Projection(s, p);\n  if (Intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\nbool Intersect(const Segment &s, const Segment &t);\ndouble Distance(const Segment &a, const Segment &b) {\n  if (Intersect(a, b)) return 0;\n  return min(min(Distance(a, b.a), Distance(a, b.b)), min(Distance(b, a.a), Distance(b, a.b)));\n}\n\nbool Intersect(const Line &l, const Segment &s);\ndouble Distance(const Line &l, const Segment &s) {\n  if (Intersect(l, s)) return 0;\n  return min(Distance(l, s.a), Distance(l, s.b));\n}\n\nbool Intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool Intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool Intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool Intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nbool Intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\ndouble Distance(const Line &l, const Point &p);\nbool Intersect(const Circle &c, const Line &l) {\n  return Distance(l, c.p) <= c.r + EPS;\n}\n\nbool Intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\nint Intersect(const Circle &c, const Segment &l) {\n  if (norm(Projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  const double d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if (d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = Projection(l, c.p);\n  if (dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\nPoint Crosspoint(const Line &l, const Line &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPoint Crosspoint(const Segment &l, const Segment &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPointPoint Crosspoint(const Circle &c, const Line l) {\n  Point hp = Projection(l, c.p), h = hp - c.p;\n  const double d2 = norm(h);\n  Point v = (l.b - l.a) * sqrt(c.r * c.r - d2) / abs(l.b - l.a);\n  return PointPoint(hp - v, hp + v);\n}\n\nPointPoint Crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if (Intersect(c, l) == 2) return Crosspoint(c, aa);\n  PointPoint ret = Crosspoint(c, aa);\n  if (dot(l.a - ret.first, l.b - ret.first) < 0)\n    ret.second = ret.first;\n  else\n    ret.first = ret.second;\n  return ret;\n}\n\nPointPoint Crosspoint(const Circle &c1, const Circle &c2) {\n  double d = abs(c1.p - c2.p);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return (PointPoint(p1, p2));\n}\n\nbool IsConvex(const Polygon &p) {\n  int n = p.size();\n  for (int i = 0; i < n; i++) {\n    if (ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\nPolygon Convex_Hull(Polygon &p) {\n  int n = p.size(), k = 0;\n  if (n >= 3) {\n    sort(p.begin(), p.end());\n    vector<Point> ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = p[i++]) {\n      while (k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n      while (k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    ch.resize(k - 1);\n    return ch;\n  } else {\n    return p;\n  }\n}\n\nenum { OUT, ON, IN };\nint Contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for (int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if (a.imag() > b.imag()) swap(a, b);\n    if (a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\nbool MergeIfAble(Segment &s1, Segment s2) {\n  if (abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n  if (ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n  if (ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n  s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n  return true;\n}\n\nvoid MergeSegments(vector<Segment> &segs) {\n  for (int i = 0; i < segs.size(); i++) {\n    if (segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for (int i = 0; i < segs.size(); i++) {\n    for (int j = i + 1; j < segs.size(); j++) {\n      if (MergeIfAble(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\nvector<vector<int>> SegmentArrangement(vector<Segment> &segs, vector<Point> &ps) {\n  vector<vector<int>> g;\n  const int N = (int)segs.size();\n  for (int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for (int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if (cross(p1, p2) == 0) continue;\n      if (Intersect(segs[i], segs[j])) {\n        ps.emplace_back(Crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  const int M = (int)ps.size();\n  g.resize(M);\n  for (int i = 0; i < N; i++) {\n    vector<int> vec;\n    for (int j = 0; j < M; j++) {\n      if (Intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for (int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\nPolygon ConvexCut(Polygon &U, Line l) {\n  Polygon ret;\n  for (int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if (ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if (ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(Crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\ndouble Area2(const Polygon &p) {\n  double A = 0;\n  for (int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\ndouble Convex_Diameter(Polygon &p) {\n  int n = p.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; i++) {\n    if (p[i].imag() > p[is].imag()) is = i;\n    if (p[i].imag() < p[js].imag()) js = i;\n  }\n  double maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) >= 0) {\n      j = (j + 1) % n;\n    } else {\n      i = (i + 1) % n;\n    }\n    if (norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxdis;\n}\n\n// int main() {}\n\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/1/CGL_1_A\n// int main() {\n//   Line l;\n//   cin >> l;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point p;\n//     cin >> p;\n//     Point ans = Projection(l, p);\n//     cout << ans << endl;\n//   }\n// }\n\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/1/CGL_1_B\n// int main() {\n//   Line l;\n//   cin >> l;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point p;\n//     cin >> p;\n//     Point ans = Reflection(l, p);\n//     cout << ans << endl;\n//   }\n// }\n\n// verified https://onlinejudge.u-aizu.ac.jp/#/courses/library/4/CGL/1/CGL_1_C\n// int main() {\n//   const vector<string> ans{\"ONLINE_FRONT\", \"CLOCKWISE\", \"ON_SEGMENT\", \"COUNTER_CLOCKWISE\", \"ONLINE_BACK\"};\n//   Point p0, p1;\n//   cin >> p0 >> p1;\n//\n//   int q;\n//   cin >> q;\n//   while (q--) {\n//     Point p2;\n//     cin >> p2;\n//     cout << ans[ccw(p0, p1, p2) + 2] << endl;\n//   }\n// }\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)<EPS))\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :\n\t\t\tx(x), y(y) {\n\t}\n\n\tPoint operator +(Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(double a) {\n\t\treturn Point(x * a, y * a);\n\t}\n\tPoint operator /(double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tbool operator <(const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint main() {\n\n\tint q;\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; ++i) {\n\t\tint p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y;\n\t\tscanf(\"%d %d %d %d %d %d %d %d\", &p0x, &p0y, &p1x, &p1y, &p2x, &p2y, &p3x, &p3y);\n\t\tPoint p1(p0x, p0y);\n\t\tPoint p2(p1x, p1y);\n\t\tPoint p3(p2x, p2y);\n\t\tPoint p4(p3x, p3y);\n\n\t\tSegment s1;\n\t\ts1.p1 = p1;\n\t\ts1.p2 = p2;\n\n\t\tSegment s2;\n\t\ts2.p1 = p3;\n\t\ts2.p2 = p4;\n\n\t\tif (isOrthogonal(s1, s2)) {\n\t\t\tcout << 1 << endl;\n\t\t} else if (isParallel(s1, s2)) {\n\t\t\tcout << 2 << endl;\n\t\t} else {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <set>\n#include <algorithm>\n#include <array>\n#include <complex>\n#include <string>\n#include <utility>\n#include <map>\n#include <queue>\n#include <list>\n#include <functional>\n#include <numeric>\n#include <stack>\n#include <tuple>\n\nusing namespace std;\nint dx[4] = { -1,0,1,0 };\nint dy[4] = { 0,1,0,-1 };\nconst int INF = 100000000;\nconst long long LINF = 1000000000000000000;\nconst int MOD = (int)1e9 + 7;\nconst double EPS = 1e-6;\nusing pii = std::pair<int, int>;\nusing ll = long long;\nusing pLL = std::pair<ll, ll>;\n#define SORT(v) std::sort(v.begin(), v.end())\n#define RSORT(v) std::sort(v.rbegin(), v.rend())\nusing Point = complex<double>;\n\n#define X real()\n#define Y imag()\ndouble dot(Point a, Point b) {\n    return (a.X*b.X + a.Y*b.Y);\n}\nusing Line = pair<Point, Point>;\nPoint Projection(Line s, Point p) {\n    Point vase = s.second - s.first;\n    p -= s.first;\n    return s.first + dot(p, vase) / norm(vase)*vase;\n}\nPoint Reflection(Line s, Point p) {\n    return p + (Projection(s, p) - p) * 2.0;\n}\ndouble cross(Point a, Point b) {\n    return a.X*b.Y - a.Y*b.X;\n}\nint ccw(Point a, Point b, Point c) {\n    if (cross(b - a, c - a) > EPS)return 1;\n    if (cross(b - a, c - a) < -EPS)return -1;\n    if (dot(b - a, c - a) < -EPS)return 2;\n    if (abs(b-a)+EPS <abs(c-a))return -2;\n    return 0;\n}\nbool isOrthogonal(Line a, Line b) {\n    return dot(a.second - a.first, b.second - b.first)? 0 : 1;\n}\nbool isParallel(Line a, Line b) {\n    return cross(a.second - a.first, b.second - b.first)? 0 : 1;\n}\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    Point p1, p2,p3,p4;\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        double x1, x2, y1, y2,x3,x4,y3,y4;\n        cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n        p1 = Point(x1, y1);\n        p2 = Point(x2, y2);\n        p3 = Point(x3, y3);\n        p4 = Point(x4, y4);\n        Line l1 = Line(p1, p2),l2=Line(p3,p4);\n        if (isOrthogonal(l1,l2)&&!isParallel(l1, l2)) {\n            cout << 1 << endl;\n        }\n        else if (!isOrthogonal(l1, l2) && isParallel(l1, l2)) {\n            cout << 2 << endl;\n        }\n        else {\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) { return fabs(b - a) < EPS; }\n\nusing Point = complex< double >;\n\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nPoint rotate(double theta, const Point &p) {\n  return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\ndouble radian_to_degree(double r) {\n  return (r * 180.0 / PI);\n}\n\ndouble degree_to_radian(double d) {\n  return (d * PI / 180.0);\n}\n\ndouble get_angle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if(alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nnamespace std {\n  bool operator<(const Point &a, const Point &b) {\n    return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n  }\n}\n\n\nstruct Line {\n  Point a, b;\n\n  Line() {}\n\n  Line(Point a, Point b) : a(a), b(b) {}\n\n  Line(double A, double B, double C) // Ax + By = C\n  {\n    if(eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n    else if(eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n    else a = Point(0, C / B), b = Point(C / A, 0);\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment : Line {\n  Segment() {}\n\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle() {}\n\n  Circle(Point p, double r) : p(p), r(r) {}\n};\n\nusing Points = vector< Point >;\nusing Polygon = vector< Point >;\nusing Segments = vector< Segment >;\nusing Lines = vector< Line >;\nusing Circles = vector< Circle >;\n\ndouble cross(const Point &a, const Point &b) {\n  return real(a) * imag(b) - imag(a) * real(b);\n}\n\ndouble dot(const Point &a, const Point &b) {\n  return real(a) * real(b) + imag(a) * imag(b);\n}\n\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n  if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                         // \"ON_SEGMENT\"\n}\n\nbool parallel(const Line &a, const Line &b) {\n  return abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n\nbool orthogonal(const Line &a, const Line &b) {\n  return abs(dot(a.a - a.b, b.a - b.b)) < EPS;\n}\n\nPoint projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint reflection(const Line &l, const Point &p) {\n  return p + (projection(l, p) - p) * 2.0;\n}\n\nbool Intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\n\nbool intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\ndouble distance(const Line &l, const Point &p);\n\nbool intersect(const Circle &c, const Line &l) {\n  return distance(l, c.p) <= c.r + EPS;\n}\n\nbool intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\nbool intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nint intersect(const Circle &c, const Segment &l) {\n  if(norm(projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  const double d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if(d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if(d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = projection(l, c.p);\n  if(dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\ndouble distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\ndouble distance(const Line &l, const Point &p) {\n  return abs(p - projection(l, p));\n}\n\ndouble distance(const Line &l, const Line &m) {\n  return intersect(l, m) ? 0 : distance(l, m.a);\n}\n\ndouble distance(const Segment &s, const Point &p) {\n  Point r = projection(s, p);\n  if(intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\ndouble distance(const Segment &a, const Segment &b) {\n  if(intersect(a, b)) return 0;\n  return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\n\ndouble distance(const Line &l, const Segment &s) {\n  if(intersect(l, s)) return 0;\n  return min(distance(l, s.a), distance(l, s.b));\n}\n\nPoint crosspoint(const Line &l, const Line &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if(abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPoint crosspoint(const Segment &l, const Segment &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if(abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\npair< Point, Point > crosspoint(const Circle &c, const Line l) {\n  Point hp = projection(l, c.p), h = hp - c.p;\n  const double d2 = norm(h);\n  Point v = (l.b - l.a) * sqrt(c.r * c.r - d2) / abs(l.b - l.a);\n  return {hp - v, hp + v};\n}\n\npair< Point, Point > crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if(intersect(c, l) == 2) return crosspoint(c, aa);\n  auto ret = crosspoint(c, aa);\n  if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n  else ret.first = ret.second;\n  return ret;\n}\n\npair< Point, Point > crosspoint(const Circle &c1, const Circle &c2) {\n  double d = abs(c1.p - c2.p);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return {p1, p2};\n}\n\nbool is_convex(const Polygon &p) {\n  int n = (int) p.size();\n  for(int i = 0; i < n; i++) {\n    if(ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\nPolygon convex_hull(Polygon &p) {\n  int n = (int) p.size(), k = 0;\n  if(n <= 2) return p;\n  sort(p.begin(), p.end());\n  vector< Point > ch(2 * n);\n  for(int i = 0; i < n; ch[k++] = p[i++]) {\n    while(k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n    while(k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  ch.resize(k - 1);\n  return ch;\n}\n\nenum {\n  OUT, ON, IN\n};\n\nint contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for(int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if(a.imag() > b.imag()) swap(a, b);\n    if(a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if(cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\n\nbool merge_if_able(Segment &s1, Segment s2) {\n  if(abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n  if(ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n  if(ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n  s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n  return true;\n}\n\nvoid merge_segments(vector< Segment > &segs) {\n  for(int i = 0; i < segs.size(); i++) {\n    if(segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for(int i = 0; i < segs.size(); i++) {\n    for(int j = i + 1; j < segs.size(); j++) {\n      if(merge_if_able(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\nvector< vector< int > > segment_arrangement(vector< Segment > &segs, vector< Point > &ps) {\n  vector< vector< int > > g;\n  int N = (int) segs.size();\n  for(int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for(int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if(cross(p1, p2) == 0) continue;\n      if(intersect(segs[i], segs[j])) {\n        ps.emplace_back(crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  int M = (int) ps.size();\n  g.resize(M);\n  for(int i = 0; i < N; i++) {\n    vector< int > vec;\n    for(int j = 0; j < M; j++) {\n      if(intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for(int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\nPolygon convex_cut(Polygon &U, Line l) {\n  Polygon ret;\n  for(int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if(ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if(ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\ndouble area2(const Polygon &p) {\n  double A = 0;\n  for(int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\ndouble convex_diameter(Polygon &p) {\n  int N = (int) p.size();\n  int is = 0, js = 0;\n  for(int i = 1; i < N; i++) {\n    if(p[i].imag() > p[is].imag()) is = i;\n    if(p[i].imag() < p[js].imag()) js = i;\n  }\n  double maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if(cross(p[(i + 1) % N] - p[i], p[(j + 1) % N] - p[j]) >= 0) {\n      j = (j + 1) % N;\n    } else {\n      i = (i + 1) % N;\n    }\n    if(norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while(i != is || j != js);\n  return sqrt(maxdis);\n}\n\npair< Point, Point > closer(const pair< Point, Point > &a, const pair< Point, Point > &b) {\n  return distance(a.first, a.second) < distance(b.first, b.second) ? a : b;\n}\n\npair< Point, Point > closest_pair_util(Points &ps, int l, int r) {\n  if(r - l == 2) {\n    return {ps[l], ps[l + 1]};\n  }\n  if(r - l == 3) {\n    pair< Point, Point > a(ps[l], ps[l + 1]), b(ps[l + 1], ps[l + 2]), c(ps[l], ps[l + 2]);\n    return closer(a, closer(b, c));\n  }\n\n  int mid = (l + r) / 2;\n  Point midPoint = ps[mid];\n  auto res = closer(closest_pair_util(ps, l, mid), closest_pair_util(ps, mid, r));\n  double d = distance(res.first, res.second);\n\n  Points pos[2];\n  for(int i = l; i < r; ++i) {\n    if(abs(ps[i].real() - midPoint.real()) < d) pos[i < mid].push_back(ps[i]);\n  }\n  for(const auto &i : pos[0]) {\n    for(const auto &j : pos[1]) {\n      if(distance(i, j) < d) {\n        d = distance(i, j);\n        res = {i, j};\n      }\n    }\n  }\n  return res;\n}\n\npair< Point, Point > closest_pair(Points ps) {\n  if(ps.size() <= 1) exit(-1);\n  for(int i = 0; i < ps.size(); ++i) {\n    ps[i] = rotate(0.1, ps[i]);\n  }\n  sort(ps.begin(), ps.end());\n  if(ps.size() == 2) return {ps[0], ps[1]};\n  auto res = closest_pair_util(ps, 0, ps.size());\n  res.first = rotate(-0.1, res.first);\n  res.second = rotate(-0.1, res.second);\n  return res;\n}\n\nint main() {\n  int Q;\n  cin >> Q;\n  while(Q--) {\n    Line s1, s2;\n    cin >> s1 >> s2;\n    if(parallel(s1, s2)) puts(\"2\");\n    else if(orthogonal(s1, s2)) puts(\"1\");\n    else puts(\"0\");\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\nint main() {\n\tint n; cin >> n;\n\tfor (int i = 0; i < n; i++){\n\t\tdouble a, b, c, d, e, f, g, h;\n\t\tcin >> a >> b >> c >> d >> e >> f >> g >> h;\n\t\tif (a == c) {\n\t\t\tif (g == e)cout << 2 << endl;\n\t\t\telse if (h == f)cout << 1 << endl;\n\t\t\telse cout << 0 << endl;\n\t\t}\n\t\telse if (g == e) {\n\t\t\tif (b == d)cout << 1 << endl;\n\t\t\telse cout << 0 << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdouble k1 = (b - d) / (a - c);\n\t\t\tdouble k2 = (h - f) / (g - e);\n\t\t\tif (k1 == k2)cout << 2 << endl;\n\t\t\telse if (k1 * k2 == -1)cout << 1 << endl;\n\t\t\telse cout << 0 << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#define SQR(n) ((n) * (n))\n\n//???\nstruct Point\n{\n  double x, y;\n  \n  Point(double x, double y) : x(x), y(y) {}\n\n  Point operator + (Point p) { return (Point(x + p.x, y + p.y)); }\n  Point operator - (Point p) { return (Point(x - p.x, y - p.y)); }\n  Point operator * (double a) { return (Point(x * a, y * a)); }\n  Point operator / (double a) { return (Point(x / a, y / a)); }\n\n  void input() { scanf(\"%lf %lf\", &x, &y); }\n  double abs() { return sqrt(Norm()); }\n  double Norm() { return (SQR(x) + SQR(y)); }\n  \n  bool operator < (const Point &p) const {\n    return (equals(x, p.x) ? y < p.y : x < p.x);\n  }\n\n  bool operator == (const Point &p) const {\n    return (equals(x, p.x) && equals(y, p.y));\n  }\n\n};\n\n//??????\nstruct Segment\n{\n  Point p1, p2;\n  \n  Segment(Point p1 = Point(0.0, 0.0), Point p2 = Point(0.0, 0.0)) : p1(p1), p2(p2) {}\n\n  void input() { p1.input(); p2.input(); }\n  \n};\n\nstruct Circle\n{\n  Point c;\n  double r;\n  Circle(Point c = Point(0.0, 0.0), double r = 0.0): c(c), r(r) {}\n};\n  \n//??´???\ntypedef Segment Line; \n//????????????\ntypedef Point Vector;\ntypedef vector < Point > Porigon;\n\ndouble dot(Vector a, Vector b)\n{\n  return (a.x * b.x + a.y * b.y);\n}\n\ndouble cross(Vector a, Vector b)\n{\n  return (a.x * b.y - a.y * b.x);\n}\n\nbool isParallel(Vector a, Vector b)\n{\n  return (equals(cross(a, b), 0.0));\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n  return (isParallel(a1 - a2, b1 - b2));\n}\n\nbool isParallel(Segment s1, Segment s2)\n{\n  return (isParallel(s1.p1, s1.p2, s2.p1, s2.p2));\n}\n\nbool isOrthogonal(Vector a, Vector b)\n{\n  return (equals(dot(a, b), 0.0));\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n  return (isOrthogonal(a1 - a2, b1 - b2));\n}\n\nbool isOrthogonal(Segment s1, Segment s2)\n{\n  return (isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2));\n}\nmain()\n{\n  int n;\n  Segment s1, s2;\n\n  cin >> n;\n  for(int i = 0; i < n; i++) {\n    s1.input(); s2.input();\n    if(isParallel(s1, s2)) cout << 2 << endl;\n    else if(isOrthogonal(s1, s2)) cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n\n  return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <cmath>\nusing namespace std;\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\t\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) != CLOCKWISE; j--)\n\t\t\tu.pop_back();\n\t\tu.push_back(s[i]);\n\t}\n\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) != CLOCKWISE; j--)\n\t\t\tl.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\n\t// 按顺时针方向生成凸包的点的序列\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\nint main() {\n\n\tPoint p1, p2, p3, p4;\n\tint n;\n\tscanf(\"%d\", &n);\n\twhile (n--) {\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &p1.x, &p1.y,\n\t\t\t&p2.x, &p2.y, &p3.x, &p3.y, &p4.x, &p4.y);\n\t\t// 平行\n\t\tif (isParallel(p1, p2, p3, p4))\n\t\t\tprintf(\"2\\n\");\n\t\t// 正交\n\t\telse if (isOrthogonal(p1, p2, p3, p4))\n\t\t\tprintf(\"1\\n\");\n\t\telse\n\t\t\tprintf(\"0\\n\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :\n\t\t\tx(x), y(y) {\n\t}\n\n\tPoint operator +(Point& p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator -(Point& p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(double a) {\n\t\treturn Point(x * a, y * a);\n\t}\n\tPoint operator /(double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\tbool operator <(const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) :\n\t\t\tp1(p1), p2(p2) {\n\n\t}\n};\n\nint dot(Point p1, Point p2) {\n\treturn p1.x * p2.x + p1.y * p2.y;\n}\nint cross(Point p1, Point p2) {\n\treturn p1.x * p2.y - p1.y * p2.x;\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p1 - s1.p2, s2.p1 - s2.p2), 0.0);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p1 - s1.p2, s2.p1 - s2.p2), 0.0);\n}\n\nint main() {\n\n\tint q;\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; ++i) {\n\t\tint p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y;\n\t\tscanf(\"%d %d %d %d %d %d %d %d\", &p0x, &p0y, &p1x, &p1y, &p2x, &p2y, &p3x, &p3y);\n\n\t\tPoint p1(p0x, p0y);\n\t\tPoint p2(p1x, p1y);\n\t\tPoint p3(p2x, p2y);\n\t\tPoint p4(p3x, p3y);\n\t\tSegment s1(p1, p2);\n\t\tSegment s2(p3, p4);\n\n\t\tif (isOrthogonal(s1, s2)) {\n\t\t\tcout << 1 << endl;\n\t\t} else if (isParallel(s1, s2)) {\n\t\t\tcout << 2 << endl;\n\t\t} else {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// Written By NewbieChd\n#include <iostream>\n#include <iomanip>\n#include <cmath>\n// #define double long double\nusing namespace std;\n\nconst int maxN = 100003;\nconst double eps = 1e-10;\ninline double absolute(double x) { return x >= 0 ? x : -x; }\ninline double square(double x) { return x * x; }\n\nstruct Vector {\n    double x, y;\n    Vector() {}\n    Vector(double x, double y) : x(x), y(y) {}\n    friend Vector operator+(const Vector& a, const Vector& b) { return Vector(a.x + b.x, a.y + b.y); }\n    friend Vector operator-(const Vector& a, const Vector& b) { return Vector(a.x - b.x, a.y - b.y); }\n    friend Vector operator*(const Vector& a, const double& b) { return Vector(a.x * b, a.y * b); }\n    friend Vector operator/(const Vector& a, const double& b) { return Vector(a.x / b, a.y / b); }\n    inline double length() { return sqrt(square(x) + square(y)); }\n    inline void read() { cin >> x >> y; }\n    inline void write() { cout << fixed << setprecision(10) << x << ' ' << y << '\\n'; }\n};\ninline double distance(Vector a, Vector b) { return sqrt(square(b.x - a.x) + square(b.y - a.y)); }\ninline double dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ninline double cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\ninline Vector project(Vector a, Vector b, Vector c) {\n    b = a - b;\n    return b * (dot(b, c - a) / square(b.length())) + a;\n}\ninline Vector reflect(Vector a, Vector b, Vector c) {\n    a = project(a, b, c);\n    return a * 2 - c;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    int Q;\n    Vector a, b, c, d;\n    for (cin >> Q; Q; --Q) {\n        a.read(), b.read(), b = b - a, c.read(), d.read(), d = d - c;\n        if (absolute(dot(b, d)) < eps) {\n            printf(\"1\\n\");\n            continue;\n        }\n        if (absolute(cross(b, d)) < eps) {\n            printf(\"2\\n\");\n            continue;\n        }\n        printf(\"0\\n\"); \n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(0), y(0){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tVector v1(x1 - x0, y1 - y0);\n\t\tVector v2(x3 - x2, y3 - y2);\n\t\tif (isParallel(v1, v2)) cout << 2 << endl;\n\t\telse if (isOrthogonal(v1, v2)) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble x0, x1, x2, x3, y0, y1, y2, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n\t\tdouble p1x, p1y, p2x, p2y;\n\t\tp1x = x1 - x0;\n\t\tp1y = y1 - y0;\n\t\tp2x = x3 - x2;\n\t\tp2y = y3 - y2;\n\n\t\tdouble u1x, u1y, u2x, u2y;\n\t\tu1x = p1x / sqrt(p1x*p1x + p1y*p1y);\n\t\tu1y = p1y / sqrt(p1x*p1x + p1y*p1y);\n\t\tu2x = p2x / sqrt(p2x*p2x + p2y*p2y);\n\t\tu2y = p2y / sqrt(p2x*p2x + p2y*p2y);\n\n\t\tdouble dot = (u1x*u2x + u1y*u2y);\n\n\t\tif (abs(dot) <= 0.000000001)\n\t\t{\n\t\t\tcout << \"1\" << endl;\n\t\t}\n\t\telse if (abs(abs(dot) - 1) <= 0.00000001)\n\t\t{\n\t\t\tcout << \"2\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"0\" << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define trav(a, x) for(auto& a : x)\n#define all(x) x.begin(), x.end()\n#define sz(x) (int)(x).size()\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntemplate<class T>\nstruct Point {\n\ttypedef Point P;\n\tT x, y;\n\texplicit Point(T x=0, T y=0) : x(x), y(y) {}\n\tbool operator<(P p) const { return tie(x,y) < tie(p.x,p.y); }\n\tbool operator==(P p) const { return tie(x,y)==tie(p.x,p.y); }\n\tP operator+(P p) const { return P(x+p.x, y+p.y); }\n\tP operator-(P p) const { return P(x-p.x, y-p.y); }\n\tP operator*(T d) const { return P(x*d, y*d); }\n\tP operator/(T d) const { return P(x/d, y/d); }\n\tT dot(P p) const { return x*p.x + y*p.y; }\n\tT cross(P p) const { return x*p.y - y*p.x; }\n\tT cross(P a, P b) const { return (a-*this).cross(b-*this); }\n\tT dist2() const { return x*x + y*y; }\n\tdouble dist() const { return sqrt((double)dist2()); }\n\t// angle to x-axis in interval [-pi, pi]\n\tdouble angle() const { return atan2(y, x); }\n\tP unit() const { return *this/dist(); } // makes dist()=1\n\tP perp() const { return P(-y, x); } // rotates +90 degrees\n\tP normal() const { return perp().unit(); }\n\t// returns point rotated 'a' radians ccw around the origin\n\tP rotate(double a) const {\n\t\treturn P(x*cos(a)-y*sin(a),x*sin(a)+y*cos(a)); }\n};\n\nusing P = Point<long long>;\n\nint main(){\n\tios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tcout << fixed << setprecision(15);\n\tint q;\n\tcin >> q;\n\tfor(int i = 0; i < q; i++){\n\t\tP p0, p1;\n\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\t\tP p2, p3;\n\t\tcin >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\tif((p1 - p0).cross(p3 - p2) == 0){\n\t\t\tcout << 2 << '\\n';\n\t\t} else if((p1 - p0).dot(p3 - p2) == 0){\n\t\t\tcout << 1 << '\\n';\n\t\t} else {\n\t\t\tcout << 0 << '\\n';\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n\nstruct Point{\n\tlong long X,Y;\n\tinline void read(){scanf(\"%lld%lld\",&X,&Y);}\n\tinline long long plength(){return X*X+Y*Y;}\n\tPoint(){X=Y=0;}\n\tPoint(long long X_,long long Y_){X=X_,Y=Y_;}\n};\nstruct Line{\n\tPoint A,B;\n\tinline void read(){A.read(),B.read();}\n\tLine(){}\n\tLine(const Point &A_,const Point &B_){A=A_,B=B_;}\n};\ntypedef Point Vector;\ninline Vector operator - (const Point &A,const Point &B){return Vector(A.X-B.X,A.Y-B.Y);}\ninline long long operator ^ (const Point &A,const Point &B){return A.X*B.X+A.Y*B.Y;}\ninline long long operator * (const Point &A,const Point &B){return A.X*B.Y-A.Y*B.X;}\ninline Point operator + (const Point &A,const Vector &B){return Point(A.X+B.X,A.Y+B.Y);}\ninline Vector operator * (const Vector &A,long long k){return Vector(A.X*k,A.Y*k);}\n\nint Q;\n\ninline long long sqr(long long k){return k*k;}\n\nPoint Projection(const Line &L,const Point &P){\n\tlong long len=((P-L.A)^(L.B-L.A))/(L.B-L.A).plength();\n\treturn L.A*(1-len)+L.B*len;\n}\n\nPoint Reflection(const Line &L,const Point &P){\n\tPoint projection=Projection(L,P);\n\treturn projection+(projection-P);\n}\n\ninline bool isParallel(const Line &T,const Line &W){return (T.B-T.A)*(W.B-W.A)==0;}\ninline bool isOrthogonal(const Line &T,const Line &W){return ((T.B-T.A)^(W.B-W.A))==0;}\n\nLine A,B;\n\nint main(){\n\tscanf(\"%d\",&Q);\n\twhile (Q--){\n\t\tA.read(),B.read();\n\t\tif (isParallel(A,B)) puts(\"2\");\n\t\telse if (isOrthogonal(A,B)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<vector>\n#include<algorithm>\n#include<iostream>\n\nusing namespace std;\n\nint main(void){\n\tint ans[1000],q,x0,y0,x1,x2,x3,y1,y2,y3,x01,y01,x23,y23;\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%d%d%d%d%d%d%d%d\",&x0,&y0,&x1,&y1,&x2,&y2,&x3,&y3);\n\t\tx01 = x1 - x0;\n\t\ty01 = y1 - y0;\n\t\tx23 = x3 - x2;\n\t\ty23 = y3 - y2;\n\t\tif(abs(x01*x23 + y01*y23) == sqrt(x01*x01 + y01*y01)*sqrt(x23*x23 + y23*y23))ans[i] = 2;\n\t\telse if(abs(x01*x23 + y01*y23) == 0) ans[i] = 1;\n\t\telse ans[i] = 0;\n\t\t\n\t}\n\tfor(int i=0;i<q;i++){\n\t\tprintf(\"%d\\n\",ans[i]);\n\t\tfflush(stdout);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<list>\n#include<map>\n#include<set>\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef stack<int> SI;\ntypedef queue<int> QI;\ntypedef pair<int,int> PII;\ntypedef long long LL;\n\n#define d(x)  cout<<#x<<\" = \"<<(x)<<endl;\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define EMP empty()\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define REACH(i,c) for(typeof((c).rbegin()) i=(c).rbegin(); i!=(c).rend(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c,n) sort(c,c+n)\n#define VSORT(c) sort((c).begin(),(c).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n#define DFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)\n#define DREP(i,n) DFOR(i,n,0)\n#define INF 1000000000\n\nconst double EPS = 1e-10;\nconst double PI  = acos(-1.0);\n////////////////////////////////////////////////\nstruct Vector{int x;int y;};\n\nint cross(Vector a,Vector b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\nint scaler(Vector a,Vector b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\nint main()\n{\n\tint n;cin>>n;\n\tREP(i,n)\n\t{\n\t\tVector a,b;\n\t\tint x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\ta.x=x1-x0;\n\t\ta.y=y1-y0;\n\t\tb.x=x3-x2;\n\t\tb.y=x3-x2;\n\t\tif(cross(a,b)==0)cout<<2<<endl;\n\t\telse if(scaler(a,b)==0)cout<<1<<endl;\n\t\telse cout<<0<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1.0e-10F)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point p) { return Point(x * p.x, y * p.y); }\n\tPoint operator / (Point p) { return Point(x / p.x, y / p.y); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n};\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2){\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Segment s1, Segment s2){\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint main(int argc, char* argv[]){\n\tint q;\n\tint x1, y1, x2, y2, x3, y3, x4, y4;\n\tSegment s1, s2;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++){\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\ts1.p1 = Point(x1, y1);\n\t\ts1.p2 = Point(x2, y2);\n\t\ts2.p1 = Point(x3, y3);\n\t\ts2.p2 = Point(x4, y4);\n\n\t\tif (isOrthogonal(s1, s2) == true){\n\t\t\tprintf(\"1\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\telse if (isParallel(s1, s2) == true){\n\t\t\tprintf(\"2\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\tprintf(\"0\\n\");\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\n//#define equals( a, b ) (fabs((a) - (b)) < DBL_E)\n\nclass Vector2 {\npublic:\n\tVector2(double x_, double y_) : x(x_), y(y_) {}\n\tVector2() : x(0), y(0) {}\n\tVector2 operator -(Vector2& other) {\n\t\tVector2 vec(x - other.GetX(), y - other.GetY());\n\t\treturn vec;\n\t}\n\tvoid SetVector2(double x_, double y_) {\n\t\tx = x_;\n\t\ty = y_;\n\t}\n\tdouble GetX() {\n\t\treturn x;\n\t}\n\tdouble GetY() {\n\t\treturn y;\n\t}\n\nprivate:\n\tdouble x, y;\n};\n\ndouble Dot(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetX() + vecA.GetY() * vecB.GetY();\n}\n\ndouble CrossY(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetY() - vecA.GetY() * vecB.GetX();\n}\n\nbool IsOrthogonal(Vector2 vecA, Vector2 vecB) {\n    double ans = Dot(vecA, vecB);\n//\treturn equals(ans, 0.0);\n//\treturn (fabs(ans) < DBL_EPSILON);\n\tans = ans > 0 ? ans : -ans;\n\treturn ( ans < 0.1f);\n}\n\nbool IsParallel(Vector2 vecA, Vector2 vecB) {\n\tdouble ans = CrossY(vecA, vecB);\n//\treturn (fabs(ans) < DBL_EPSILON);\n\tans = ans > 0 ? ans : -ans;\n\treturn (ans < 0.1f);\n}\n\nint main() {\n\tint query;\n\tcin >> query;\n\n\tfor (int i = 0; i < query; i++) {\n\t\tVector2 vecs[4];\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tdouble x, y;\n\t\t\tcin >> x >> y;\n\t\t\tvecs[i].SetVector2(x, y);\n\t\t}\n\n\t\tVector2 vecA = vecs[1] - vecs[0];\n\t\tVector2 vecB = vecs[3] - vecs[2];\n\t\tbool orth = IsOrthogonal(vecA, vecB);\n\t\tif (orth) {\n\t\t\tcout << 1 << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbool para = IsParallel(vecA, vecB);\n\t\tif (para) {\n\t\t\tcout << 2 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tcout << 0 << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cmath>\n#include <iomanip>\n#include <string>\n#include <queue>\n#include <algorithm>\n#include <cctype>\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<30;\nconst double pi=acos(-1);\nconst double eps=1e-8;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point Gep){\n\t\treturn point{x+Gep.x,y+Gep.y};\n\t}\n\tpoint operator-(point Gep){\n\t\treturn point{x-Gep.x,y-Gep.y};\n\t}\n\tpoint operator*(double Gex){\n\t\treturn point{x*Gex,y*Gex};\n\t}\n\tpoint operator/(double Gex){\n\t\tif(!Gex) return point{0,0}; \n\t\treturn point{x/Gex,y/Gex};\n\t}\n\tbool operator==(point Gep){\n\t\treturn fabs(x-Gep.x)<eps&&fabs(y-Gep.y)<eps;\n\t}\n};\n\nclass Geom{\n\tprivate:\n\tvector<point> Ge;\n\tvector<pair<point,point> > Geseg,Geline;\n\tpublic:\n\tvoid line_push(point Gex,point Gey){\n\t\tGeline.push_back(make_pair(Gex,Gey));\n\t}\n\tvoid seg_push(point Gex,point Gey){\n\t\tGeseg.push_back(make_pair(Gex,Gey));\n\t}\n\tvoid point_push(point Gex){\n\t\tGe.push_back(Gex);\n\t}\n\tpoint DIP(pair<point,point> Gex,pdd Gey){\n\t\tdouble Gea=Gey.first,Geb=Gey.second;\n\t\tpoint Ge1=Gex.first,Ge2=Gex.second;\n\t\treturn (Ge1*Geb+Ge2*Gea)/(Gea+Geb);\n\t}\n\tpoint POI(pair<point,point>Gex,pair<point,point> Gey){\n\t\tpair<point,point> Ge1(PRO(Gex,Gey.first),PRO(Gex,Gey.second));\n\t\tpdd Ger(EXTLEN(Gey.first,Ge1.first),EXTLEN(Gey.second,Ge1.second));\n\t\treturn DIP(Ge1,Ger);\n\t}\n\tdouble IP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.x+Gex.y*Gey.y;\n\t}\n\tdouble CP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.y-Gey.x*Gex.y;\n\t}\n\tdouble LEN(point Gex){\n\t\treturn sqrt(Gex.x*Gex.x+Gex.y*Gex.y);\n\t}\n\tdouble EXTLEN(point Gex,point Gey){\n\t\treturn LEN(Gex-Gey);\n\t}\n\tpoint PRO(pair<point,point> Gea,point Gex){\n\t\tpoint Ge1=Gex-Gea.second,Ge2=Gea.first-Gea.second;\n\t\treturn Ge2*(IP(Ge1,Ge2)/(LEN(Ge2)*LEN(Ge2)))+Gea.second;\n\t}\n\tpoint REF(pair<point,point> Gea,point Gex){\n\t\tpoint Ge1=PRO(Gea,Gex);\n\t\treturn Ge1*2-Gex;\n\t}\n\tint PJUD(point Gea,point Geb,point Gex){\n\t\tif(Gea==Geb||Gex==Geb) return 0;\n\t\tpoint Ge1=Gea-Gex,Ge2=Geb-Gex;\n\t\tdouble Getmp=CP(Ge1,Ge2);\n\t\tif(Getmp>0) return 1;\n\t\tif(Getmp<0) return 2;\n\t\tif(IP(Ge1,Ge2)<0) return 3;\n\t\tif(LEN(Ge1)<LEN(Ge2)) return 4;\n\t\treturn 5;\n\t}\n\tint LJUD(pair<point,point> Gex,pair<point,point> Gey){\n\t\tpoint Ge1=Gex.first-Gex.second,Ge2=Gey.first-Gey.second;\n\t\tif(!CP(Ge1,Ge2)) return 2;\n\t\tif(!IP(Ge1,Ge2)) return 1;\n\t\treturn 0;\n\t}\n\tpair<point,point> line_open(int Gex){\n\t\treturn Geline[Gex];\n\t}\n\tpoint point_open(int Gex){\n\t\treturn Ge[Gex];\n\t}\n\tpair<point,point> seg_open(int Gex){\n\t\treturn Geseg[Gex];\n\t}\n};\n\nint q;\ndouble x,xx,y,yy,xxx,yyy;\n\nint main(){\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tGeom geo;\n\t\tfor(int j=0;j<2;j++){\n\t\t\tint a,b,c,d;\n\t\t\tcin>>a>>b>>c>>d;\n\t\t\tgeo.line_push(point{a,b},point{c,d});\n\t\t}\n\t\tcout<<geo.LJUD(geo.line_open(0),geo.line_open(1))<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-10;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double cost = dot(p[1] - p[0], p[3] - p[2]) / (abs(p[1] - p[0]) * abs(p[3] - p[2]));\n        if(fabs(cost) < EPS) cout << 1 << endl;\n        else if(fabs(cost) > 1 - EPS) cout << 2 << endl;\n        else cout << 0 << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <cmath>\n#include <deque>\n#include <iterator>\n#include <map>\n#include <queue>\n#include <string>\n#include <tuple>\n#include <utility>\n#include <limits>\n#include <iomanip>\nusing namespace std;\n\n#define EPS (1e-10)\nusing ll=long long;\ntemplate<class T> using V = vector<T>;\ntemplate<class T, class U> using P = pair<T, U>;\nusing vll = V<ll>;\nusing vvll = V<vll>;\n#define rep(i, k, n) for (ll i=k; i<(ll)n; ++i)\n#define REP(i, n) rep(i, 0, n)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\ntemplate<class T> inline bool chmax(T& a, T b) {if (a<b) {a=b; return true;} return false;}\ntemplate<class T> inline bool chmin(T& a, T b) {if (a>b) {a=b; return true;} return false;}\n\nconst ll MOD = 1000000007;\nconst ll HIGHINF = 1e18;\n\n// 点を表すクラス\nclass Point{\npublic:\n  double x, y;\n  Point(double x=0, double y=0): x(x), y(y) {}\n\n  Point operator + (Point p) {return Point(x+p.x, y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x, y-p.y);}\n  Point operator * (double a) {return Point(a*x, a*y);}\n  Point operator / (double a) {return Point(x/a, y/a);}\n\n  double abs() {return sqrt(norm());}\n  double norm() {return x*x + y*y;}\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x: y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\ntypedef Point Vector;  // ベクトルを表す構造体（成分表示）\n\ndouble dot(Vector a, Vector b) {  // ベクトルの内積\n  return a.x*b.x + a.y*b.y;\n}\ndouble cross(Vector a, Vector b) {  // ベクトルの外積\n  return a.x*b.y - a.y*b.x;\n}\n\nstruct Segment {Point p1, p2;};  // 線分を表す構造体(p1:始点、p2:終点)\ntypedef Segment Line;  // 直線を表す構造体（直線は無限長にする必要あり）\n\n// 直交判定\nbool isOrthogonal(Vector a, Vector b) {  // ベクトル同士の直交判定\n  return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {  // a1とa2、b1とb2をそれぞれ端点にもつ線分の直交判定\n  return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2) {  // 線分s1、s2の直交判定\n  return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// 平行判定\nbool isParallel(Vector a, Vector b) {  // ベクトル同士の平行判定\n  return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {  // a1とa2、b1とb2をそれぞれ端点にもつ線分の平行判定\n  return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2) {  // 線分s1、s2の平行判定\n  return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\nclass Circle {  // 円を表す構造体\npublic:\n  Point c;  // 中心\n  double r;  // 半径\n  Circle(Point c=Point(), double r=0.0): c(c), r(r) {}\n};\n\ntypedef V<Point> Polygon;  // 多角形を表す構造体（頂点座標の配列）\n\nint main() {\n  ll n; cin >> n;\n  REP(i, n) {\n    ll x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n    if (isOrthogonal(Point(x0, y0), Point(x1, y1), Point(x2, y2), Point(x3, y3)))\n      cout << 1 << endl;\n    else if (isParallel(Point(x0, y0), Point(x1, y1), Point(x2, y2), Point(x3, y3)))\n      cout << 2 << endl;\n    else cout << 0 << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<cmath>\n#include<list>\n#include<map>\n#include<set>\nusing namespace std;\n\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef stack<int> SI;\ntypedef queue<int> QI;\ntypedef pair<int,int> PII;\ntypedef long long LL;\n\n#define d(x)  cout<<#x<<\" = \"<<(x)<<endl;\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define EMP empty()\n#define SZ(a) int((a).size())\n#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define REACH(i,c) for(typeof((c).rbegin()) i=(c).rbegin(); i!=(c).rend(); ++i)\n#define EXIST(s,e) ((s).find(e)!=(s).end())\n#define SORT(c,n) sort(c,c+n)\n#define VSORT(c) sort((c).begin(),(c).end())\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n)  FOR(i,0,n)\n#define DFOR(i,b,a) for(int i=(b)-1;i>=(a);--i)\n#define DREP(i,n) DFOR(i,n,0)\n#define INF 1000000000\n\nconst double EPS = 1e-10;\nconst double PI  = acos(-1.0);\n////////////////////////////////////////////////\nstruct Vector{int x;int y;};\n\nint cross(Vector a,Vector b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\nint scaler(Vector a,Vector b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\nint main()\n{\n\tint n;cin>>n;\n\tREP(i,n)\n\t{\n\t\tVector a,b;\n\t\tint x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\ta.x=x1-x0;\n\t\ta.y=y1-y0;\n\t\tb.x=x3-x2;\n\t\tb.y=y3-y2;\n\t\tif(cross(a,b)==0)cout<<2<<endl;\n\t\telse if(scaler(a,b)==0)cout<<1<<endl;\n\t\telse cout<<0<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include<complex>\n\nusing namespace std;\ntypedef complex<double> P;\n \nint main() {\n  int n;\n  double ax, ay, bx, by, cx, cy, dx, dy;\n  scanf(\"%d\", &n);\n  while(n--) {\n    scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&ax, &ay, &bx, &by, &cx, &cy, &dx, &dy);\n    P k = P(bx - ax, by - ay) * P(dx - cx, cy - dy);\n    if(k.imag() == 0) {\n      printf(\"2\\n\");\n    } else if(k.real() == 0) {\n      printf(\"1\\n\");\n    } else {\n      printf(\"0\\n\");\n    }\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "/// Tricky, Accepted\n#include <bits/stdc++.h>\n#define MX 1000000\n#define pf printf\n#define sf scanf\n#define ll long long\n#define ull unsigned long long\n#define ui unsigned int\n#define db double\n#define fl float\n#define ii pair <int,int>\n#define ff first\n#define ss second\n#define pb push_back\n#define ps push\n#define pp pop()\n#define tp top()\n#define ft front()\n#define cl clear()\n#define max3(a,b,c) max(a, max(b,c))\n#define min3(a,b,c) min(a, min(b,c))\n#define SA(name,size) sort(name, name+size)\n#define SV(name) sort(name.begin(), name.end())\n#define RV(name) reverse(name.begin(), name.end());\n#define loop(a,n) for(int i=a; i<n; i++)\n#define nloop(j,a,n) for(int j=a; j<n; j++)\n#define Case int T; scanf(\"%d\", &T); for(int cas = 1; cas <= T; ++cas)\n#define CaseF(n) for(int cas=1; cas<=n; cas++)\n#define mem(arr,val) memset(arr,val,sizeof(arr))\n#define pr(x) cout << x << endl\n#define pr2(x,y) cout << x << \" \" << y << endl\n#define prln pf(\"\\n\")\nusing namespace std;\n\n/**------------------------------Graph Moves-----------------------------------*/\n/* anti-clockwise, starting from 0 degree */\n///int dx[]={1,0,-1,0}; int dy[]={0,1,0,-1}; // 4 direction\n///int dx[]={1,1,0,-1,-1,-1,0,1}; int dy[]={0,1,1,1,0,-1,-1,-1}; //8 direction\n///int dx[]={2,1,-1,-2,-2,-1,1,2}; int dy[]={1,2,2,1,-1,-2,-2,-1}; //Knight Direction\n///int dx[]={2,1,-1,-2,-1,1}; int dy[]={0,1,1,0,-1,-1}; //Hexagonal Direction\n/*----------------------------------------------------------------------------*/\n\nint bigmod(int n, int pow, int mod){\n    if(pow==0) return 1;\n    int x=bigmod(n, pow/2, mod);\n    x=((x%mod)*(x%mod))%mod;\n    if(pow%2==1) x=((x%mod)*(n%mod))%mod;\n    return x;\n}\n\ninline int getint(){\n    int x;\n    scanf(\"%d\",&x);\n    return x;\n}\n#define II getint()\n\ninline long long getlonglong(){\n    long long x;\n    scanf(\"%lld\",&x);\n    return x;\n}\n#define LL getlonglong()\n\ninline float getfloat(){\n    float x;\n    scanf(\"%f\",&x);\n    return x;\n}\n#define FF getfloat()\n\ninline double getdouble(){\n    double x;\n    scanf(\"%lf\",&x);\n    return x;\n}\n#define DB getdouble()\n\ninline string getstring(){\n    string s;\n    cin>>s;\n    return s;\n}\n#define SS getstring()\n\n/**------------------------------------------------------------------------------------------*/\n\n#define PI acos(-1)\n\nstruct point{\n    double x,y;\n    double operator * (point b){\n        return x*b.x + y*b.y;\n    }\n    double operator ^ (point b){\n        return x*b.y - b.x*y;\n    }\n    point operator - (point b){\n        point Vector;\n        Vector.x = x-b.x;\n        Vector.y = y-b.y;\n        return Vector;\n    }\n};\n\nint main(){\n    //ios_base::sync_with_stdio(false);\n    //cin.tie(NULL);\n\n    int q;\n    sf(\"%d\",&q);\n    while(q--){\n        point p0, p1, p2, p3;\n        sf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&p0.x,&p0.y,&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y);\n        point vect1 = p1-p0;\n        point vect2 = p3-p2;\n        if((vect1*vect2)==0)\n            pf(\"1\\n\");\n        else if((vect1^vect2)==0)\n            pf(\"2\\n\");\n        else\n            pf(\"0\\n\");\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include  <bits/stdc++.h>\n#define rep(i,n) for(int (i)=0;(i)<(n);(i)++)\nusing namespace std;\n\ntypedef bool B;\ntypedef long double D;\ntypedef complex<D> P;\ntypedef vector<P> VP;\ntypedef struct {P s,t;} L;\ntypedef vector<L> VL;\ntypedef struct {P c;D r;} C;\ntypedef vector <C> VC;\n\nconst D eps=1.0e-10;\nconst D pi=acos(-1.0);\ntemplate<class T> bool operator==(T a, T b){return abs(a-b)< eps;}\ntemplate<class T> bool operator< (T a, T b){return a < b-eps;}\ntemplate<class T> bool operator<=(T a, T b){return a < b+eps;}\ntemplate<class T> int sig(T r) {return (r==0||r==-0) ? 0 : r > 0 ? 1 : -1;}\n#define X real()\n#define Y imag()\n\nD ip(P a, P b) {return a.X * b.X + a.Y * b.Y;}\nD ep(P a, P b) {return a.X * b.Y - a.Y * b.X;}\nD sq(D a) {return sqrt(max(a, (D)0));}\nP vec(L l){return l.t-l.s;}\ninline void input(P &p){D x,y;cin >> x >> y;p={x,y};}\n// ???????????¬????????¨???\n\n// ccw\nenum CCW{\n\tLEFT = 1,\n\tRIGHT = 2,\n\tBACK = 4,\n\tFRONT = 8,\n\tMID = 16,\n\tON=FRONT|BACK|MID\n};\n\ninline int ccw(P base, P a, P b) {              //???a??¨???b???????????????????????????\n\ta -= base; b -= base;\n\tif (ep(a, b) > 0)\n\t\treturn LEFT;    // counter clockwise\n\tif (ep(a, b) < 0)\n\t\treturn RIGHT;   // clockwise\n\tif (ip(a, b) < 0)\n\t\treturn BACK;    // b--base--a on line\n\tif (norm(a) < norm(b))\n\t\treturn FRONT;   // base--a--b on line\n\t// otherwise\n\treturn MID;      // base--b--a on line  a??¨b????????????????????????\n}\n\nB iver(L a, L b) {return ip(vec(a),vec(b) )== 0.0;}\nB ipar(L a, L b) {return ep(vec(a),vec(b) )== 0.0;}\n\n\n// ??????\nP pLL(L a,L b){ return a.s+vec(a)*ep(vec(b),b.s-a.s)/ep(vec(b),vec(a));}\n\n\n// ?????¨??´?????¨????????¢??£???????????????\n\nB iLL(L a,L b){return !ipar(a,b);}\nB eqL(L a,L b){return !iLL(a, b) && ep(vec(a), b.s - a.s)==0;}\nB iLS(L a,L b){return sig(ep(vec(a),b.s-a.s))*sig(ep(vec(a),b.t-a.s)) <= 0;}\nB iLSs(L a,L b){return sig(ep(vec(a),b.s-a.s))*sig(ep(vec(a),b.t-a.s)) < 0;}\nB iSS(L a,L b){\n\tint cwa = ccw(a.s,a.t, b.s) | ccw(a.s,a.t, b.t);\n\tint cwb = ccw(b.s,b.t, a.s) | ccw(b.s,b.t, a.t);\n\treturn ((cwa | cwb) & MID) || ((cwa & cwb) == (LEFT | RIGHT));\n}\nB iSSs(L a,L b) {\n\tint cwa = ccw(a.s,a.t, b.s) | ccw(a.s,a.t, b.t);\n\tint cwb = ccw(b.s,b.t, a.s) | ccw(b.s,b.t, a.t);\n\treturn (cwa & cwb) == (LEFT | RIGHT);\n}\n\n// ?????¨??´?????¨????????¢??£????????¢\n\nD dLP(L l,P p){return abs( ep(vec(l),p-l.s) )/abs(vec(l));}\nD dSP(L s,P p){\n\tif (sig( ip( vec(s), p - s.s)) <= 0) return abs(p - s.s);\n\tif (sig( ip(-vec(s), p - s.t)) <= 0) return abs(p - s.t);\n\treturn dLP(s,p);\n}\nD dLL(L a,L b){ return iLL(a,b)?0:dLP(a,b.s);}\nD dLS(L a,L b){ return iLS(a,b)?0:min(dLP(a, b.s),dLP(a, b.t));}\nD dSS(L a,L b){ return iSS(a,b)?0:\n\tmin({ dSP(a,b.s),dSP(a,b.t),dSP(b,a.s),dSP(b,a.t)});}\n\n\nint main(void){\n\tint q;\n\tcin >> q;\n\tcout.precision(10);\n\trep(loop,q){\n\t\tL line[2];\n\t\trep(i,2){\n\t\t\tinput(line[i].s);\n\t\t\tinput(line[i].t);\n\t\t}\n\t\tint ans=0;\n\t\tif(ipar(line[0],line[1])) ans|=2;\n\t\tif(iver(line[0],line[1])) ans|=1;\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\nstruct point{\n\tdouble x, y;\n\tpoint(double _x = 0, double _y = 0){ x = _x, y = _y; }\n\tvoid read(){ scanf(\"%lf%lf\", &x, &y); }\n\tvoid print(char ch = '\\n'){ printf(\"%.10lf %.10lf\", x, y), putchar(ch); }\n\tpoint operator + (const point &rhs) const { return point(x + rhs.x, y + rhs.y); }\n\tpoint operator - (const point &rhs) const { return point(x - rhs.x, y - rhs.y); }\n}A, B, C, D;\nint q;\ndouble dot_product(point a, point b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross_product(point a, point b){\n\treturn a.x * b.y - a.y * b.x;\n}\nbool parallel(point p1, point p2, point p3, point p4){\n\treturn cross_product(p1 - p2, p3 - p4) == 0;\n}\nbool orthogonal(point p1, point p2, point p3, point p4){\n\treturn dot_product(p1 - p2, p3 - p4) == 0;\n}\nint main(){\n\tscanf(\"%d\", &q);\n\tfor (register int i = 1; i <= q; ++i){\n\t\tA.read(), B.read(), C.read(), D.read();\n\t\tif (parallel(A, B, C, D)) printf(\"2\\n\");\n\t\telse if (orthogonal(A, B, C, D)) printf(\"1\\n\");\n\t\telse printf(\"0\\n\");\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<cstdbool> \n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)//fabs 求??? ?差小于EPS ??相等\n\nclass Point{\n\tpublic:\n\t\tdouble x,y;\n\t\tPoint(double x=0,double y=0):x(x),y(y) {}\n\t\tPoint operator + (Point p){\treturn Point(x+p.x,y+p.y);}\n\t\tPoint operator - (Point p){\treturn Point(x-p.x,y-p.y);}\n\t\tPoint operator * (double a){\treturn Point(x*a,a*y);}\n\t\tPoint operator / (double a){\treturn Point(x/a,y/a);}\n\t\tdouble abs() {return sqrt(norm());}\n\t\tdouble norm() {return x*x+y*y;}\n\t\tbool operator<(const Point &p) const{\n\t\t\treturn x!=p.x?x<p.x:y<p.y;\n\t\t}\n\t\tbool operator == (const Point &p) const{\n\t\t\treturn fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n\t\t}\n\t\tbool operator>(const Point &p) const{\n\t\t\treturn x!=p.x?x>p.x:y>p.y;\n\t\t}\n}; \n\ntypedef Point Vector;\n\ndouble dot(Vector a,Vector b)//求内? \n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b)//求外? \n{\n\treturn a.x*b.y-a.y*b.x;\n}\n\nbool isParallel(Vector a,Vector b)\n{\n\treturn equals(cross(a,b),0.0);\n}\n\nbool isOrthogonal(Vector a,Vector b)//判断是否垂直（正交） \n{\n\treturn equals(dot(a,b),0.0); \n}\n\nusing namespace std;\n\nint main(void)\n{\n\tint q;\n\tVector s1,s2;\n\t\n\tcin>>q;\n\twhile(q--)\n\t{\n\t\tdouble x1,y1,x2,y2,x3,y3,x4,y4;\n\t\t\n\t\tcin>>x1>>y1>>x2>>y2>>x3>>y3>>x4>>y4;\n\t\ts1.x=x2-x1;\n\t\ts1.y=y2-y1;\n\t\ts2.x=x4-x3;\n\t\ts2.y=y4-y3;\n\t\tif(isParallel(s1,s2))\n\t\t{\n\t\t\tcout<<2<<endl;\n\t\t}\n\t\telse if(isOrthogonal(s1,s2))\n\t\t{\n\t\t\tcout<<1<<endl;\n\t\t} \n\t\telse cout<<0<<endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define next Next\n#define gc getchar\nstruct node{\n\tdouble x,y;\n}a,b,c,d;\nnode operator - (node a,node b)\n{\n\treturn (node){a.x-b.x,a.y-b.y};\n}\ndouble DJ(node a,node b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble CJ(node a,node b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\ndouble len(node a)\n{\n\treturn a.x*a.x+a.y*a.y;\n}\n/*char buf[1<<21],*p1=buf,*p2=buf;\ninline int gc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}*/\ninline int read()\n{\n    int ret=0,f=0;char c=gc();\n    while(!isdigit(c)){if(c=='-')f=1;c=gc();}\n    while(isdigit(c)){ret=ret*10+c-48;c=gc();}\n    if(f)return -ret;return ret;\n}\nsigned main()\n{\n\tint n=read();\n\twhile(n--)\n\t{\n\t\ta=(node){read(),read()};\n\t\tb=(node){read(),read()};\n\t\tc=(node){read(),read()};\n\t\td=(node){read(),read()};\n\t\tif(CJ(b-a,d-c)==0.0)puts(\"2\");\n\t\telse if(DJ(b-a,d-c)==0.0)puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < n; i++)\n\nstruct point {\n    double x, y;\n    point(double a, double b) {\n        x = a, y = b;\n    }\n    point operator + (point p) {\n        return point(x + p.x, y + p.y);\n    }\n    point operator - (point p) {\n        return point(x - p.x, y - p.y);\n    }\n    point operator * (double k) {\n        return point(x * k, y * k);\n    }\n    point operator / (double k) {\n        return point(x / k, y / k);\n    }\n};\n\ndouble norm(point p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble dot(point a, point b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(point a, point b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    rep(i, n) {\n        vector<point> p(4,{0,0});\n        rep(j, 4) {\n            int x, y;\n            scanf(\"%d %d\", &x, &y);\n            p[j].x = x;\n            p[j].y = y;\n        }\n        point s1 = p[0] - p[1];\n        point s2 = p[2] - p[3];\n        if (dot(s1, s2) == 0) printf(\"1\\n\");\n        else if (cross(s1, s2) == 0) printf(\"2\\n\");\n        else printf(\"0\\n\");\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\n\n//point\ntypedef complex<double> P;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const P& a, const P& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n\treturn real(conj(a)*b);\n}\n// line\nstruct L : public vector<P> {\n\tL(const P& a, const P& b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\t\t\t\t\t\t\t\t  // a--c--b on line\n}\n\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n         abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const L &s) {\n  return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n         cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nP projection(const L &l, const P &p) {\n\tdouble t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\nP reflection(const L &l, const P &p) {\n\treturn p + (double)2 * (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const L &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const L &s, const P &p) {\n\tconst P r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const L &s, const L &t) {\n\tif (intersectSS(s, t)) return 0;\n\t\treturn min({distanceSP(s, t[0]), distanceSP(s, t[1]), distanceSP(t, s[0]), distanceSP(t, s[1])});\n}\nP crosspoint(const L &l, const L &m) {\n  double A = cross(l[1] - l[0], m[1] - m[0]);\n  double B = cross(l[1] - l[0], l[1] - m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n  if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n  return m[0] + B / A * (m[1] - m[0]);\n}\n\nint main() {\n\tint q;\n\tcin >> q;\n\tfor(int i=0; i<q; ++i) {\n\t\tdouble x[4], y[4];\n\t\tfor(int j=0; j<4; ++j) cin >> x[j] >> y[j];\n\t\tP p1(x[1]-x[0], y[1]-y[0]), p2(x[3]-x[2], y[3]-y[2]);\n\t\tif(cross(p1, p2) == 0) cout << 2 << endl;\n\t\telse if(dot(p1, p2) == 0) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\nusing namespace std;\n\nclass Point {\npublic:\n    int x, y;\n    Point(int x = 0, int y = 0) : x(x), y(y) {\n    }\n};\n\nclass Vector {\npublic:\n    int x, y;\n    Vector(int x = 0, int y = 0) : x(x), y(y) {\n    }\n};\n\nbool isParallel( Vector v0, Vector v1 ) {\n    return ( ( v0.x * v1.y - v0.y * v1.x ) == 0 );\n}\n\nbool isOrthogonal( Vector v0, Vector v1 ) {\n    return ( ( v0.x * v1.x + v0.y * v1.y ) == 0 );\n}\n\n\nint q;\n\nint main()\n{\n    Point p0, p1, p2, p3;\n    Vector v0, v1;\n\n    scanf(\"%d\", &q);\n\n    for ( int i = 0; i < q; i++ ) {\n    scanf(\"%d %d\", &p0.x, &p0.y);\n    scanf(\"%d %d\", &p1.x, &p1.y);\n    scanf(\"%d %d\", &p2.x, &p2.y);\n    scanf(\"%d %d\", &p3.x, &p3.y);\n\n    v0.x = p0.x - p1.x;\n    v0.y = p0.y - p1.y;\n    v1.x = p2.x - p3.x;\n    v1.y = p2.y - p3.y;\n\n    if ( isParallel( v0, v1 ) ) printf(\"2\\n\");\n    else if ( isOrthogonal( v0, v1 ) ) printf(\"1\\n\");\n    else printf(\"0\\n\");\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(_x), y(_y){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n\tdouble res = a.x*b.x + a.y*b.y;\n\treturn res;\n}\n\ndouble cross(Vector a, Vector b){\n\tdouble res = a.x*b.y - a.y*b.x;\n\treturn res;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tdouble x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tVector v1(x1 - x0, y1 - y0);\n\t\tVector v2(x3 - x2, y3 - y2);\n\t\tif (isParallel(v1, v2)) cout << 2 << endl;\n\t\telse if (isOrthogonal(v1, v2)) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include <complex>\n#define rep(i, n) for (int i = 0; i < (n); i++)\n#define loop(i, x, n) for (int i = (x); i < (n); i++)\n#define all(v) (v).begin(), (v).end()\n#define EQ(a, b) (abs((a) - (b)) < EPS)\n#define int long long\n#define INF 1e9\n#define MOD 1e9 + 7\nusing namespace std;\n\ntemplate<typename T> void cmin(T &a, T b) { a = min(a, b); }\ntemplate<typename T> void cmax(T &a, T b) { a = max(a, b); }\n\nusing P = complex<double>;\nconst double PI = acos(-1);\nconst double EPS = 1e-9;\n// P p(a,b)=a+bi -> 点p(a,b)\nnamespace std {\n  bool operator<(const P &a, const P &b) { return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b); }\n  bool operator==(const P &a, const P &b) { return a.real() == b.real() && a.imag() == b.imag(); }\n} // namespace std\n\n//内積\ndouble dot(P a, P b) { return real(conj(a) * b); }\n//外戚\ndouble cross(P a, P b) { return imag(conj(a) * b); }\n// 2直線の直交判定 : a⊥b <=> dot(a, b) = 0\nint IsOrthogonal(P a1, P a2, P b1, P b2) { return EQ(dot(a1 - a2, b1 - b2), 0.0); }\n// 2直線の平行判定 : a//b <=> cross(a, b) = 0\nint IsParallel(P a1, P a2, P b1, P b2) { return EQ(cross(a1 - a2, b1 - b2), 0.0); }\n\nsigned main() {\n\n  int q;\n  cin >> q;\n  while (q--) {\n    int a, b, c, d, e, f, g, h;\n    cin >> a >> b >> c >> d >> e >> f >> g >> h;\n    P A(a, b), B(c, d), C(e, f), D(g, h);\n    if (IsOrthogonal(A, B, C, D))\n      cout << 1 << endl;\n    else if (IsParallel(A, B, C, D))\n      cout << 2 << endl;\n    else\n      cout << 0 << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// This is free and unencumbered software released into the public domain.\n\n// Anyone is free to copy, modify, publish, use, compile, sell, or\n// distribute this software, either in source code form or as a compiled\n// binary, for any purpose, commercial or non-commercial, and by any\n// means.\n\n// In jurisdictions that recognize copyright laws, the author or authors\n// of this software dedicate any and all copyright interest in the\n// software to the public domain. We make this dedication for the benefit\n// of the public at large and to the detriment of our heirs and\n// successors. We intend this dedication to be an overt act of\n// relinquishment in perpetuity of all present and future rights to this\n// software under copyright law.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n// OTHER DEALINGS IN THE SOFTWARE.\n\n// For more information, please refer to <http://unlicense.org>\n\n#include <algorithm>\n#include <complex>\n#include <vector>\n\nusing namespace std;\n\n#define X real()\n#define Y imag()\n\ntypedef long double Real;\ntypedef complex<Real> Point;\nstruct Line {\n  Point a, b;\n  bool operator<(const Line &line) const;\n};\ntypedef vector<Point> Polygon;\n\nconstexpr Real PI = acos(Real(-1));\n\n// 比較関数\nint sgn(const Real &a, const Real &b = 0) {\n  constexpr Real EPS = 1e-8;\n  return a < b - EPS ? -1 : a > b + EPS ? 1 : 0;\n}\n\nbool near(const Point &a, const Point &b) { return !sgn(norm(a - b)); }\nnamespace std {\nbool operator<(const Point &a, const Point &b) {\n  return sgn(a.X, b.X) ? a.X < b.X : a.Y < b.Y;\n}\n} // namespace std\n\nbool Line::operator<(const Line &line) const {\n  return !near(a, line.a) ? a < line.a : b < line.b;\n}\n\n// 平方根\nReal sr(const Real &a) { return sqrt(max<Real>(a, 0)); }\n\n// 内積\nReal dot(const Point &a, const Point &b) { return a.X * b.X + a.Y * b.Y; }\n// 外積\nReal det(const Point &a, const Point &b) { return a.X * b.Y - a.Y * b.X; }\n\n// 線分のベクトル\nPoint vec(const Line &a) { return a.b - a.a; }\n\n// 線分abに対する点cの位置\nenum CCW { FRONT = 1, RIGHT = 2, BACK = 4, LEFT = 8, ON = 16 };\nint ccw(const Point &a, const Point &b, const Point &c) {\n  if (near(a, c) || near(b, c)) {\n    return ON;\n  }\n  int s = sgn(det(b - a, c - a));\n  if (s) {\n    return s > 0 ? LEFT : RIGHT;\n  }\n  return (a < b) == (b < c) ? FRONT : (c < a) == (a < b) ? BACK : ON;\n}\nint ccw(const Line &l, const Point &p) { return ccw(l.a, l.b, p); }\n\n// 有向角度\nReal arg(const Point &base, const Point &a, const Point &b) {\n  return arg((b - base) / (a - base));\n}\n\nLine sortBase;\nbool lessArg(const Point &a, const Point &b) {\n  Real ang1 = arg(sortBase.a, sortBase.b, a);\n  Real ang2 = arg(sortBase.a, sortBase.b, b);\n  return sgn(ang1, ang2) ? ang1 < ang2 : norm(a) > norm(b);\n}\n\n// 射影\nPoint proj(const Line &l, const Point &p) {\n  auto v = vec(l);\n  return l.a + ((p - l.a) / v).X * v;\n}\nPoint refl(const Line &l, const Point &p) {\n  auto v = vec(l);\n  return l.a + conj((p - l.a) / v) * v;\n}\n\n// 交差判定\nbool eqL(const Line &a, const Line &b) {\n  return !sgn(det(vec(a), vec(b))) && !sgn(det(vec(a), b.a - a.a));\n}\nbool iLL(const Line &a, const Line &b) {\n  return sgn(det(vec(a), vec(b))) || !sgn(det(vec(a), b.a - a.a));\n}\nbool iLLs(const Line &a, const Line &b) { return sgn(det(vec(a), vec(b))); }\nbool iLS(const Line &a, const Line &b) {\n  return sgn(det(vec(a), b.a - a.a)) * sgn(det(vec(a), b.b - a.a)) <= 0;\n}\nbool iLSs(const Line &a, const Line &b) {\n  return sgn(det(vec(a), b.a - a.a)) * sgn(det(vec(a), b.b - a.a)) < 0;\n}\nbool iSS(const Line &a, const Line &b) {\n  int cwa = ccw(a.a, a.b, b.a) | ccw(a.a, a.b, b.b);\n  int cwb = ccw(b.a, b.b, a.a) | ccw(b.a, b.b, a.b);\n  return ((cwa | cwb) & ON) || ((cwa & cwb) == (LEFT | RIGHT));\n}\nbool iSSs(const Line &a, const Line &b) {\n  int cwa = ccw(a.a, a.b, b.a) | ccw(a.a, a.b, b.b);\n  int cwb = ccw(b.a, b.b, a.a) | ccw(b.a, b.b, a.b);\n  return (cwa & cwb) == (LEFT | RIGHT);\n}\n\n// 交点\nPoint pLL(const Line &a, const Line &b) {\n  return a.a + vec(a) * (det(vec(b), b.a - a.a) / det(vec(b), vec(a)));\n}\n\n// 距離\nReal dLP(const Line &l, const Point &p) {\n  return abs(det(vec(l), p - l.a) / vec(l));\n}\nReal dSP(const Line &s, const Point &p) {\n  if (dot(vec(s), p - s.a) < 0) {\n    return abs(p - s.a);\n  }\n  if (dot(vec(s), p - s.b) > 0) {\n    return abs(p - s.b);\n  }\n  return dLP(s, p);\n}\nReal dLL(const Line &a, const Line &b) {\n  if (iLL(a, b)) {\n    return 0;\n  }\n  return dLP(a, b.a);\n}\nReal dLS(const Line &a, const Line &b) {\n  if (iLS(a, b)) {\n    return 0;\n  }\n  return min(dLP(a, b.a), dLP(a, b.b));\n}\nReal dSS(const Line &a, const Line &b) {\n  if (iSS(a, b)) {\n    return 0;\n  }\n  return min({dSP(a, b.a), dSP(a, b.b), dSP(b, a.a), dSP(b, a.b)});\n}\n\n// 円\nstruct Circle {\n  Point c;\n  Real r;\n};\n\n// 交差判定\nbool iCP(const Circle &c, const Point &p) {\n  return sgn(abs(p - c.c), c.r) <= 0;\n}\nbool iCL(const Circle &c, const Line &l) { return sgn(c.r, dLP(l, c.c)) >= 0; }\nbool iCS(const Circle &c, const Line &s) { return sgn(c.r, dSP(s, c.c)) >= 0; }\nbool iCSc(const Circle &c, const Line &s) {\n  return iCS(c, s) && sgn(c.r, max(abs(s.a - c.c), abs(s.b - c.c))) >= 0;\n}\nbool iCC(const Circle &a, const Circle &b) {\n  return sgn(abs(a.c - b.c), a.r + b.r) <= 0;\n}\nbool iCCc(const Circle &a, const Circle &b) {\n  return iCC(a, b) && sgn(abs(a.c - b.c), abs(a.r - b.r)) >= 0;\n}\n\n// 交点\npair<Point, Point> pCC(const Circle &a, const Circle &b) {\n  Real x = (norm(a.c - b.c) + a.r * a.r - b.r * b.r) / (2 * abs(a.c - b.c));\n  Point e = (b.c - a.c) / abs(b.c - a.c);\n  Point y = e * Point(0, sr(a.r * a.r - x * x));\n  return make_pair(a.c + e * x - y, a.c + e * x + y);\n}\npair<Point, Point> pCL(const Circle &c, const Line &l) {\n  Point x = proj(l, c.c);\n  Point y = vec(l) / abs(vec(l)) * sr(c.r * c.r - norm(x - c.c));\n  return make_pair(x - y, x + y);\n}\n\n// 角の内外判定 角abの内部にあれば正、辺上は0、外部は負\nint sAP(const Point &a, const Point &b, const Point &c) {\n  return sgn(det(a, c)) - sgn(det(b, c)) - sgn(det(a, b));\n}\n\n// 多角形の面積\nReal aPol(const Polygon &vp) {\n  Real res = 0;\n  for (int i = 0; i < int(vp.size()); ++i) {\n    res += det(vp[i], vp[(i + 1) % vp.size()]);\n  }\n  return res / 2;\n}\n\n// 多角形の内外判定 内部:1、周上:0、外部:-1\nint sGP(const Polygon &pol, const Point &p) {\n  int side = -1;\n  for (int i = 0; i < int(pol.size()); ++i) {\n    Point p0 = pol[i] - p, p1 = pol[(i + 1) % pol.size()] - p;\n    if (ccw(p0, p1, 0) == ON) {\n      return 0;\n    }\n    if (p0.Y > p1.Y) {\n      swap(p0, p1);\n    }\n    if (sgn(p0.Y) <= 0 && 0 < sgn(p1.Y) && sgn(det(p0, p1)) > 0) {\n      side *= -1;\n    }\n  }\n  return side;\n}\n\n// 凸包\nPolygon convexHull(vector<Point> p) {\n  int m = -1, n = p.size();\n  if (n < 3) {\n    return p;\n  }\n  vector<Point> q(n * 2);\n  sort(p.begin(), p.end());\n  for (int i = 0; i < n; q[++m] = p[i++]) {\n    for (; m > 0 && ccw(q[m - 1], q[m], p[i]) != LEFT; --m) {\n      ;\n    }\n  }\n  for (int i = n - 2, r = m; i >= 0; q[++m] = p[i--]) {\n    for (; m > r && ccw(q[m - 1], q[m], p[i]) != LEFT; --m) {\n      ;\n    }\n  }\n  q.resize(m);\n  return q;\n}\n\n// 凸多角形切断\nPolygon convexCut(const Polygon &p, const Line &l) {\n  vector<Point> q;\n  for (int i = 0; i < int(p.size()); ++i) {\n    if (ccw(l.a, l.b, p[i]) != RIGHT) {\n      q.push_back(p[i]);\n    }\n    Line s = {p[i], p[(i + 1) % p.size()]};\n    if (iLSs(l, s)) {\n      q.push_back(pLL(l, s));\n    }\n  }\n  return q;\n}\n\n// 線分をマージする\nvector<Line> merge(vector<Line> s) {\n  for (int i = 0; i < int(s.size()); ++i) {\n    if (s[i].b < s[i].a) {\n      swap(s[i].a, s[i].b);\n    }\n  }\n  sort(s.begin(), s.end());\n  for (int i = 0; i < int(s.size()); ++i) {\n    for (int j = 0; j < i; ++j) {\n      if (iSS(s[i], s[j]) && !iLLs(s[i], s[j])) {\n        s[j].b = max(s[i].b, s[j].b);\n        s.erase(s.begin() + i--);\n        break;\n      }\n    }\n  }\n  return s;\n}\n\n// 線分アレンジメント 隣の点への辺のみを持つ\nvector<vector<int>> sArr(vector<Line> s, vector<Point> &vp) {\n  s = merge(s);\n  for (int i = 0; i < int(s.size()); ++i) {\n    vp.push_back(s[i].a);\n    vp.push_back(s[i].b);\n  }\n  for (int i = 0; i < int(s.size()); ++i) {\n    for (int j = 0; j < i; ++j) {\n      if (iSS(s[i], s[j])) {\n        vp.push_back(pLL(s[i], s[j]));\n      }\n    }\n  }\n  sort(vp.begin(), vp.end());\n  vp.erase(unique(vp.begin(), vp.end(), near), vp.end());\n  vector<vector<int>> graph(vp.size());\n  for (int i = 0; i < int(s.size()); ++i) {\n    vector<pair<Real, int>> v;\n    for (int j = 0; j < int(vp.size()); ++j) {\n      if (ccw(s[i].a, s[i].b, vp[j]) == ON) {\n        v.push_back(make_pair(norm(vp[j] - s[i].a), j));\n      }\n    }\n    sort(v.begin(), v.end());\n    for (int j = 0; j < int(v.size()) - 1; ++j) {\n      graph[v[j + 1].second].push_back(v[j].second);\n      graph[v[j].second].push_back(v[j + 1].second);\n    }\n  }\n  return graph;\n}\n\n#include <iomanip>\n#include <iostream>\n\nint main() {\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Real p1x, p1y, p2x, p2y;\n    cin >> p1x >> p1y >> p2x >> p2y;\n    Line line1{Point(p1x, p1y), Point(p2x, p2y)};\n    Real p3x, p3y, p4x, p4y;\n    cin >> p3x >> p3y >> p4x >> p4y;\n    Line line2{Point(p3x, p3y), Point(p4x, p4y)};\n    if (!iLLs(line1, line2)) {\n      cout << 2 << endl;\n    } else if (sgn(dot(vec(line1), vec(line2))) == 0) {\n      cout << 1 << endl;\n    } else {\n      cout << 0 << endl;\n    }\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <cmath>\n\nusing Real = long double;\n\nconst Real EPS = 1e-10;\n\n// 宇宙船演算子\ninline Real compare(Real a, Real b) {\n    if (std::abs(a - b) < EPS) return 0;\n    return a - b > 0 ? 1 : -1;\n}\n\ntemplate <class T>\ninline T sq(T x) { return x * x; }\n\n\nusing Point = std::complex<Real>;\nusing Segment = std::pair<Point, Point>;\n\ninline Real length(Segment s) {\n    return std::abs(s.second - s.first);\n}\n\n// inner product\ninline Real dot(Point x, Point y) {\n    return std::real(std::conj(x) * (y));\n}\n\n// outer product\ninline Real cross(Point x, Point y) {\n    return std::imag(std::conj(x) * (y));\n}\n\n// lに対するxの正射影\nPoint proj(Segment s, Point p) {\n    Real ratio = dot(s.second - s.first, p - s.first) / sq(length(s));\n    return s.first + (s.second - s.first) * ratio;\n}\n\n// lを軸としてxに対称な点\nPoint refl(Segment s, Point p) {\n    Point t = proj(s, p);\n    return t + (t - p);\n}\n\n// lに対するpの位置\n// counter clockwise -> 1, clockwise   -> -1\n// online front      -> 2, online back -> -2\n// on segment        -> 0\nint side(Segment s, Point p) {\n    Real c = cross(s.second - s.first, p - s.first);\n    if (compare(c, 0) != 0) return compare(c, 0);\n\n    Real d = dot(s.second - s.first, p - s.first);\n    if (compare(d, 0) < 0) return -2;\n\n    return (compare(length(Segment(s.first, p)), length(s)) > 0 ? 2 : 0);\n}\n\ninline bool isorthogonal(Segment s1, Segment s2) {\n    return compare(dot(s1.second - s1.first, s2.second - s2.first), 0) == 0;\n}\n\ninline bool isparallel(Segment s1, Segment s2) {\n    return compare(cross(s1.second - s1.first, s2.second - s2.first), 0) == 0;\n}\n\n\n#include <iostream>\n#include <array>\n\nusing namespace std;\n\nint main() {\n    int Q;\n    cin >> Q;\n\n    for (int q = 0; q < Q; ++q) {\n        array<Segment, 2> s;\n        for (int i = 0; i < 2; ++i) {\n            array<Point, 2> p;\n            for (int j = 0; j < 2; ++j) {\n                Real x, y;\n                cin >> x >> y;\n                p[j] = Point(x, y);\n            }\n            s[i] = Segment(p[0], p[1]);\n        }\n\n        int ans;\n        if (isparallel(s[0], s[1])) {\n            ans = 2;\n        } else if (isorthogonal(s[0], s[1])) {\n            ans = 1;\n        } else {\n            ans = 0;\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define eps 1e-10\nusing namespace std;\nclass Point {\npublic:\n\tdouble x,y;\n\tPoint(double x=0, double y=0):x(x),y(y){}\n\tPoint operator+ (Point p) { return Point(x+p.x,y+p.y); }\n\tPoint operator- (Point p) { return Point(x-p.x,y-p.y); }\n\tPoint operator* (double a) { return Point(x*a,y*a); }\n\tPoint operator/ (double a) { return Point(x/a,y/a); }\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x+y*y; }\n\tbool operator< (const Point& p) const { return x!=p.x?x<p.x:y<p.y; }\n\tbool operator== (const Point& p) const { return fabs(x-p.x)<eps&&fabs(y-p.y)<eps; }\n};\ntypedef Point Vector;\ndouble dot(Vector a, Vector b) { return a.x*b.x+b.y*a.y; }\ndouble cross(Vector a, Vector b) { return a.x*b.y-a.y*b.x; }\nbool equal(double a, double b) {\n\treturn fabs(a-b)<eps;\n}\nint main() {\n\tint n;\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.tie(0);\t\t\n\tcin>>n;\n\tfor (int i=0; i<n; ++i) {\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tPoint a(x0,y0);\n\t\tPoint b(x1,y1);\n\t\tPoint c(x2,y2);\n\t\tPoint d(x3,y3);\n\t\tif (equal(dot(b-a,d-c),0.0)) cout<<1<<endl;\n\t\telse if (equal(cross(b-a,d-c),0.0)) cout<<2<<endl;\n\t\telse cout<<0<<endl;\n\t}\n\treturn 0;\n} \n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<vector>\n#include<algorithm>\n#include<iostream>\n#include <float.h>\n\nusing namespace std;\n\nint main(void){\n\tint ans[1000],q,x0,y0,x1,x2,x3,y1,y2,y3,x01,y01,x23,y23;\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%d%d%d%d%d%d%d%d\",&x0,&y0,&x1,&y1,&x2,&y2,&x3,&y3);\n\t\tx01 = x1 - x0;\n\t\ty01 = y1 - y0;\n\t\tx23 = x3 - x2;\n\t\ty23 = y3 - y2;\n\t\tif(fabs(abs(x01*x23 + y01*y23) - sqrt(x01*x01 + y01*y01)*sqrt(x23*x23 + y23*y23)) <= DBL_EPSILON * fmax(1, fmax(fabs(x01*x23 + y01*y23), fabs(sqrt(x01*x01 + y01*y01)*sqrt(x23*x23 + y23*y23)))))ans[i] = 2;\n\t\telse if(abs(x01*x23 + y01*y23) == 0) ans[i] = 1;\n\t\telse ans[i] = 0;\t\n\t}\n\tfor(int i=0;i<q;i++){\n\t\tprintf(\"%d\\n\",ans[i]);\n\t\tfflush(stdout);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nstruct Point {\n    double x, y;\n    Point() {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) const { return Point(k * x, k * y); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n};\ndouble dot(const Point& a, const Point& b) { return a.x * b.x + a.y * b.y; }\ndouble cross(const Point& a, const Point& b) { return a.x * b.y - a.y * b.x; }\ndouble norm(const Point& a) { return sqrt(dot(a, a)); }\nPoint rot90(const Point& p) { return Point(p.y, -p.x); } // 時計回りに90度回転 \nbool equals(const Point& a, const Point& b) { return abs(a.x - b.x) < EPS && abs(a.y - b.y) < EPS; }\nPoint unit(const Point& p) { return p / norm(p); }\nostream& operator<<(ostream& os, const Point& p) { return os << \"(\" << p.x << \",\" << p.y << \")\"; }\n\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;\n    if (cross(b, c) > EPS) return +1;      // a,b,cの順に反時計周り\n    if (cross(b, c) < -EPS) return -1;     // a,b,cの順に時計周り\n    if (dot(b, c) < 0) return +2;          // c--a--b 直線\n    if (norm(b) < norm(c)) return -2;      // a--b--c 直線\n    return 0;                              // a--c--b 直線\n}\n\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(const Point& a, const Point& b) : a(a), b(b) {}\n};\nbool contains(const Line& l, const Point& p) { return ccw(l.a, l.b, p) % 2 == 0; }\nbool parallel(const Line& s, const Line& t) { return abs(cross(s.b - s.a, t.b - t.a)) < EPS; }\nbool equals(const Line& s, const Line& t) { return parallel(s, t) && contains(s, t.a); }\nbool orthogonal(const Line& s, const Line& t) { return abs(dot(s.b - s.a, t.b - t.a)) < EPS; }\n\nistream& operator>>(istream& is, Point& p) { return is >> p.x >> p.y; }\nistream& operator>>(istream& is, Line& l) { return is >> l.a >> l.b; }\n\nint main() {\n    int Q; cin >> Q;\n    for (int i = 0; i < Q; i++) {\n        Line s, t;\n        cin >> s >> t;\n        if (parallel(s, t)) {\n            cout << 2 << endl;\n        } else if (orthogonal(s, t)) {\n            cout << 1 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// 直線の直行・平行判定\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<vector>\n\n#include<queue>\n\nusing namespace std;\n\n#define MAX 10000\n#define INFTY (1 << 29)\n\n// 点を表すクラス\nclass Point\n{\n    public:\n        double x, y;\n        // コンストラクタ\n        Point(double x = 0.0, double y = 0.0) : x(x), y(y){ }\n};\n\n// 線分を表すクラス\nclass Segment\n{\n    public:\n        Point p1, p2;\n        // コンストラクタ\n        Segment(Point p1, Point p2) : p1(p1), p2(p2){ }\n};\n\n// 点とベクトルの表現は同じ\ntypedef Point Vector;\n// 線分と直線の表現は同じ\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\n\nint main(void)\n{\n    int q, x1, y1, x2, y2;\n    Vector v1, v2;\n\n    cin >> q;\n\n    for(int i = 0; i < q; i++)\n    {\n\n        // ベクトルの格納\n        cin >> x1 >> y1 >> x2 >> y2;\n        v1.x = x2 - x1;\n        v1.y = y2 - y1;\n\n        cin >> x1 >> y1 >> x2 >> y2;\n        v2.x = x2 - x1;\n        v2.y = y2 - y1;\n\n        // 判定処理\n        if( dot(v1, v2) == 0 )\n        {\n            // ベクトルは互いに直交している\n            printf(\"1\\n\");\n        }\n        else if( cross(v1, v2) == 0 )\n        {\n            // ベクトルは平行である\n            printf(\"2\\n\");\n        }\n        else\n        {\n            printf(\"0\\n\");\n        }\n    }\n\n    return 0;\n}\n\n// 内積の計算をする関数\ndouble dot(Vector a, Vector b)\n{\n    return ( ( a.x * b.x ) + ( a.y * b.y ) );\n}\n\n// 外積の計算をする関数\ndouble cross(Vector a, Vector b)\n{\n    return ( ( a.x * b.y ) + ( a.y * b.x ) );\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <bitset>\n#include <cmath>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <limits>\n#include <map>\n#include <queue>\n#include <set>\n#include <tuple>\n#include <vector>\n\nusing namespace std;\n\n#define rep(i, n) for (int64_t i = 0; i < (n); i++)\n#define irep(i, n) for (int64_t i = 0; i <= (n); i++)\n#define rrep(i, n) for (int64_t i = (n)-1; i >= 0; i--)\n#define rirep(i, n) for (int64_t i = n; i >= 0; i--)\n\nclass Vec;\nVec operator/(const Vec& v, const double& divisor);\nVec operator*(const double& scale, const Vec& v);\n\nclass Vec {\n  using F = double;\n  vector<F> container;\n\n public:\n  Vec(size_t size) : container(size) {}\n  Vec(initializer_list<F> elements)\n      : container(elements.begin(), elements.end()) {}\n  size_t dim() const { return container.size(); }\n  F& operator[](const size_t size) { return container.at(size); }\n  const F& operator[](const size_t size) const { return container.at(size); }\n  Vec operator+(const Vec& other) const {\n    Vec ret(*this);\n    for (size_t i = 0; i < dim(); i++) ret[i] += other[i];\n    return ret;\n  }\n  Vec operator-(const Vec& other) const { return (*this) + (-other); }\n  Vec operator-() const { return -1.0 * (*this); }\n  F inner(const Vec& other) const {\n    F acc = 0;\n    for (size_t i = 0; i < dim(); i++) {\n      acc += (*this)[i] * other[i];\n    }\n    return acc;\n  }\n  F norm() const { return sqrt(inner(*this)); }\n  Vec unit() const { return (*this) / this->norm(); }\n  F ccw(const Vec& other) const {\n    return (*this)[0] * other[1] - other[0] * (*this)[1];\n  }\n};\nVec operator/(const Vec& v, const double& divisor) { return 1.0 / divisor * v; }\nVec operator*(const double& scale, const Vec& v) {\n  Vec ret(v);\n  for (size_t i = 0; i < ret.dim(); i++) ret[i] *= scale;\n  return ret;\n}\n\nclass Line {\n  Vec m_grad;\n  double m_bias;\n\n public:\n  Line(const Vec& grad, double bias) : m_grad(grad), m_bias(bias) {}\n  static Line fromPoints(const Vec& p0, const Vec& p1) {\n    Vec d = p0 - p1;\n    Vec g({-d[1], d[0]});\n    return Line(g, g.inner(p0));\n  }\n  const Vec& grad() const { return m_grad; }\n  double bias() const { return m_bias; }\n  double dist(const Vec& p) const {\n    return abs(m_grad.inner(p) - m_bias) / m_grad.norm();\n  }\n  Vec projection(const Vec& p) const {\n    const Vec g = m_grad.unit();\n    const Vec h({-g[1], g[0]});\n    return m_bias / m_grad.norm() * g + h.inner(p) * h;\n  }\n};\n\nint main() {\n  int q;\n  cin >> q;\n\n  rep(i, q) {\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n    const Vec v0({x1 - x0, y1 - y0}), v1({x3 - x2, y3 - y2});\n    const double a = v0.unit().inner(v1.unit());\n    const double EPS = 1e-10;\n    if (abs(a) < EPS) {\n      cout << 1 << endl;\n    } else if (abs(abs(a) - 1) < EPS) {\n      cout << 2 << endl;\n    } else {\n      cout << 0 << endl;\n    }\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\n\n// #define DEBUG\nclass Point;\nvoid printpoint(Point a);\n\nclass Point\n{\n    int x;\n    int y;\n\npublic:\n\n    Point()\n    {\n        x = 0;\n        y = 0;\n    }\n    Point(int xi, int yi)\n    {\n        x = xi;\n        y = yi;\n    }\n    int get_x();\n    int get_y();\n    void set_x(int xin);\n    void set_y(int yin);\n};\n\nint Point::get_x() { return x; }\nint Point::get_y() { return y; }\nvoid Point::set_x(int xin) { x = xin; }\nvoid Point::set_y(int yin) { y = yin; }\n\nclass Segment\n{\n    Point a;\n    Point b;\n    Point c;\n\npublic:\n    Segment(Point ai, Point bi)\n    {\n        a = ai;\n        b = bi;\n        c.set_x(ai.get_x() - bi.get_x());\n        c.set_y(ai.get_y() - bi.get_y());   \n    }\n\n    Point get_a();\n    Point get_b();\n    Point get_c();\n\n};\n\nPoint Segment::get_a() { return a; }\nPoint Segment::get_b() { return b; }\nPoint Segment::get_c() { return c; }\n\n\n\nvoid printpoint(Point a){\n    cout << a.get_x() << \" \" << a.get_y() << endl;\n}\n\nvoid printsegment(Segment p){\n    printpoint(p.get_a());\n    printpoint(p.get_b());\n    printpoint(p.get_c());\n}\nvoid relation_between_two_segment(Segment p, Segment q)\n{\n    Point pc = p.get_c();\n    Point qc = q.get_c();\n    int pcx, pcy, qcx, qcy;\n    pcx = pc.get_x(), pcy = pc.get_y(), qcx = qc.get_x(), qcy = qc.get_y();\n    if (pcx * qcx + pcy * qcy == 0)\n        cout << 1 << endl;\n    else if (pcx == 0 && qcx == 0)\n        cout << 2 << endl;\n    else if (pcy == 0 && qcy == 0)\n        cout << 2 << endl;\n    else if (pcx != 0 && pcy != 0 && qcx != 0 && qcy != 0 && pcx * qcy == pcy * qcx)\n        cout << 2 << endl;\n    else\n        cout << 0 << endl;\n}\n\nint main()\n{\n\n#ifdef DEBUG\n    cout << \"DEBUG MODE\" << endl;\n    ifstream in(\"input.txt\"); //for debug\n    cin.rdbuf(in.rdbuf());    //for debug\n#endif\n\n    int n, ax, ay, bx, by;\n    cin >> n;\n    for (int i = 0; i < n; i++){\n        cin >> ax >> ay >> bx >> by;\n        Point a(ax, ay);\n        Point b(bx, by);\n        Segment p(a, b);\n        cin >> ax >> ay >> bx >> by;\n\n        Point c(ax, ay);\n        Point d(bx, by);\n        Segment q(c, d);\n        relation_between_two_segment(p, q);\n    }\n    return 0;\n}\n\n// getline(cin,s);\n// a = strtok(s, \",\");  \",\"で分解\n// for (int i = 0; i < n; i++)\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS) //?????????????????????????????????\n\n//??????????????????????????????\nclass Point{\n\npublic:\n\n\tdouble x, y;//??§?¨????????????????x,y??????\n\n\tPoint(double x = 0,double y = 0):x(x),y(y){}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator * (Point p) {\n\t\treturn Point(x * p.x, y * p.y);\n\t}\n\n\tPoint operator / (Point p) {\n\t\treturn Point(x / p.x, y / p.y);\n\t}\n\n\tdouble norm() {\n\t\treturn x*x + y*y;\n\t}\n\n\t//?????????????????§???????????????\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS &&  fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\n\ntypedef vector<Point> Polygon;\n\n//??????????????????????????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????????????????????????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\n\n\n\n//???\nclass Circle {\npublic:\n\tPoint c;//??????\n\tdouble r;//??????\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n\n\n\n\n\nint main(void)\n{\n\tint n;\n\n\tPoint p[4];\n\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tcin >> p[j].x >> p[j].y;\n\t\t}\n\n\t\tif (isOrthogonal(p[0], p[1], p[2], p[3])) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse if (isParallel(p[0], p[1], p[2], p[3])) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define all(x) (x).begin(),(x).end()\nconst int mod=998244353,MAX=105,INF=1<<30;\n\nconst double eps=1e-10;\nconst long double pi=acos((long double)-1.0L);\n#define equals(a,b) (fabs((a)-(b))<eps)\n\nclass Point{\npublic:\n    double x,y;\n    \n    Point(double x=0,double y=0):x(x),y(y){}\n    \n    Point operator + (Point p){return Point(x+p.x,y+p.y);}\n    Point operator - (Point p){return Point(x-p.x,y-p.y);}\n    Point operator * (double a){return Point(a*x,a*y);}\n    Point operator / (double a){return Point(x/a,y/a);}\n    \n    double abs(){return sqrt(norm());}\n    double norm(){return x*x+y*y;}\n    \n    bool operator < (const Point &p)const{\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    \n    bool operator == (const Point &p)const{\n        return fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n    }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a){\n    return a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a){\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\nstruct Segment{\n    Point p1,p2;\n};\n\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n    return p+(project(s,p)-p)*2.0;\n}\n\nstatic const int counter_clockwise=1;\nstatic const int clockwise=-1;\nstatic const int online_back=2;\nstatic const int online_front=-2;\nstatic const int on_segment=0;\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    \n    if(cross(a,b)>eps) return counter_clockwise;\n    if(cross(a,b)<-eps) return clockwise;\n    if(dot(a,b)<-eps) return online_back;\n    if(a.norm()<b.norm()) return online_front;\n    \n    return on_segment;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return(ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ntypedef Segment Line;\n\ndouble getDistance(Point a,Point b){\n    return abs(a-b);\n}\n\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return abs(p-s.p1);\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return abs(p-s.p2);\n    return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min({getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2),getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)});\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base,s1.p1-s2.p1));\n    double d2=abs(cross(base,s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nclass Circle{\npublic:\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\npair<Point,Point> segCrossPpoints(Circle c,Line l){\n    //assert(intersect(c,l));\n    Vector pr=project(l,c.c);\n    Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n    double base=sqrt(c.r*c.r-norm(pr-c.c));\n    return make_pair(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p){return atan2(p.y,p.x);}\nVector polar(double a,double r){return Point(cos(r)*a,sin(r)*a);}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n    //assert(intersect(c1,c2));\n    double d=abs(c1.c-c2.c);\n    double a=acos((c1.r*c1.r+d*d-c2.r-c2.r)/(2*c1.r*d));\n    double t=arg(c2.c-c1.c);\n    return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\ntypedef vector<Point> Polygon;\n\n/*\n IN 2\n ON 1\n OUT 0\n */\n\nint contains(Polygon g,Point p){\n    int n=int(g.size());\n    bool x=false;\n    for(int i=0;i<n;i++){\n        Point a=g[i]-p,b=g[(i+1)%n]-p;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<eps&&eps<b.y&&cross(a,b)>eps) x=!x;\n    }\n    return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n    Polygon u,l;\n    if(int(s.size())<3) return s;\n    sort(all(s));\n    int n=int(s.size());\n    \n    u.push_back(s[0]);\n    u.push_back(s[1]);\n    \n    l.push_back(s[n-1]);\n    l.push_back(s[n-2]);\n    \n    for(int i=2;i<n;i++){\n        for(int j=int(u.size());j>=2&&ccw(u[j-2],u[j-1],s[i])!=clockwise;j--){\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n    \n    for(int i=int(s.size())-3;i>=0;i--){\n        for(int j=int(l.size());j>=2&&ccw(l[j-2],l[j-1],s[i])!=clockwise;j--){\n            l.pop_back();\n        }\n        l.push_back(s[i]);\n    }\n    \n    reverse(all(l));\n    \n    for(int i=int(u.size())-2;i>=1;i--) l.push_back(u[i]);\n    \n    return l;\n}\n\nint main(){\n    \n    std::ifstream in(\"text.txt\");\n    std::cin.rdbuf(in.rdbuf());\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    int Q;cin>>Q;\n    while(Q--){\n        Segment s1,s2;\n        cin>>s1.p1.x>>s1.p1.y>>s1.p2.x>>s1.p2.y>>s2.p1.x>>s2.p1.y>>s2.p2.x>>s2.p2.y;\n        \n        if(isParallel(s1,s2)) cout<<2<<endl;\n        else if(isOrthogonal(s1,s2)) cout<<1<<endl;\n        else cout<<0<<endl;\n    }\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n#define EPS 1e-6\n\ntypedef double Type;\n\nint sign(Type x)\n{\n    return x<-EPS?-1:(x>EPS?1:0);\n}\n\nstruct Point\n{\n    Type x,y;\n    Point(Type x,Type y):x(x),y(y) {}\n    Point() {}\n    void read()\n    {\n        scanf(\"%lf %lf\",&x,&y);\n    }\n    bool operator==(const Point& p) const\n    {\n        return sign(x-p.x)==0&&sign(y-p.y)==0;\n    }\n    Point operator-(const Point& p) const\n    {\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator*(const Type t) const\n    {\n        return Point(t*x,t*y);\n    }\n    Point operator+(const Point & p) const\n    {\n        return Point(x+p.x,y+p.y);\n    }\n    bool operator<(const Point& p) const\n    {\n        return sign(x-p.x)==0?sign(y-p.y)<0:sign(x-p.x)<0;\n    }\n};\n\nostream& operator<<(ostream& out,Point p)\n{\n    out<<p.x<<\" \"<<p.y;\n    return out;\n}\n\ntypedef Point Vector;\n\n//叉?\nType Cross(Vector a,Vector b)\n{\n    return a.x*b.y-a.y*b.x;\n}\n\n//点?\nType Dot(Vector a,Vector b)\n{\n    return a.x*b.x+a.y*b.y;\n}\n\nbool isOrthogonal(Vector a,Vector b)\n{\n    return Dot(a,b)==0.0;\n}\n\nbool isParallel(Vector a,Vector b)\n{\n    return Cross(a,b)==0.0;\n}\n\nint main()\n{\n    int t;\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n        Point a,b,c,d;\n        a.read();\n        b.read();\n        c.read();\n        d.read();\n        Vector x,y;\n        x=a-b;\n        y=c-d;\n        if(isOrthogonal(x,y))\n            puts(\"1\");\n        else if(isParallel(x,y))\n            puts(\"2\");\n        else\n            puts(\"0\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconstexpr double EPS = 1e-14;\n\nstruct vec2 {\n    double x, y;\n    vec2 operator+(const vec2 rhs) {\n        return {x + rhs.x, y + rhs.y};\n    }\n    vec2 operator-(const vec2 rhs) {\n        return {x - rhs.x, y - rhs.y};\n    }\n    vec2 operator*(const double k) {\n        return {x * k, y * k};\n    }\n    vec2 operator/(const double k) {\n        return {x / k, y / k};\n    }\n};\n\ndouble dot(vec2 a, vec2 b) {\n    return a.x * b.x + a.y * b.y;\n};\n\ndouble norm2(vec2 a) {\n    return dot(a, a);\n}\n\nstruct line {\n    vec2 p, l;\n};\n\nline make_line(vec2 a, vec2 b) {\n    return {a, b - a};\n}\n\ndouble cross(vec2 a, vec2 b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool is_parallel(vec2 a, vec2 b) {\n    return abs(cross(a, b)) < EPS;\n}\n\nbool is_parallel(line a, line b) {\n    return is_parallel(a.l, b.l);\n}\n\ndouble operator/(vec2 a, vec2 b) {\n    assert(is_parallel(a, b));\n    return a.x / b.x;\n}\n\nvoid printvec2(vec2 p, int precision) {\n    cout << setprecision(precision) << fixed << p.x << \" \" << p.y << endl;\n}\n\nvec2 intersection(line l1, line l2) {\n    assert(!is_parallel(l1, l2));\n    double a = l1.p.x, b = l1.p.y, c = l1.l.x, d = l1.l.y;\n    double e = l2.p.x, f = l2.p.y, g = l2.l.x, h = l2.l.y;\n    double k = (h * (a - e) - g * (b - f)) / (g * d - c * h);\n    return {\n        a + k * c,\n        b + k * d\n    };\n}\n\nvec2 get_normal(vec2 p) {\n    return {-p.y, p.x};\n}\n\nvec2 foot(vec2 p, line l) {\n    line normal = {p, get_normal(l.l)};\n    return intersection(normal, l);\n}\n\nvec2 reflect(vec2 p, line l) {\n    vec2 f = foot(p, l);\n    return {2 * f.x - p.x, 2 * f.y - p.y};\n}\n\ndouble dist(vec2 p, line l) {\n    return sqrt(norm2(foot(p, l) - p));\n}\n\nint sgn(double a) {\n    if (a < -EPS) return -1;\n    if (a > EPS) return 1;\n    return 0;\n}\n\nint main() {\n    int q;\n    cin >> q;\n    while (q--) {\n        double x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        line a = make_line({x0, y0}, {x1, y1}), b = make_line({x2, y2}, {x3, y3});\n        if (is_parallel(a, b)) {\n            cout << 2 << endl;\n            continue;\n        }\n        if (is_parallel(a.l, get_normal(b.l))) {\n            cout << 1 << endl;\n            continue;\n        }\n        cout << 0 << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// ConsoleApplication.cpp : コンソール アプリケーションのエントリ ポイントを定義します。\n//\n\n#include \"stdio.h\"\n#include <cstdlib>\n#include <iostream>\n\n\nusing namespace std;\n\nstruct Point {\n\tint x, y;\n\tPoint& operator+(const Point& rhs) {\n\t\tx += rhs.x;\n\t\ty += rhs.y;\n\t\treturn *this;\n\t}\n\tPoint& operator-(const Point& rhs) {\n\t\tx -= rhs.x;\n\t\ty -= rhs.y;\n\t\treturn *this;\n\t}\n\tPoint& operator*(const int& rhs) {\n\t\tx *= rhs;\n\t\ty *= rhs;\n\t\treturn *this;\n\t}\n};\n\nbool isZero(const int val)\n{\n\treturn abs(val) < 1e-10;\n}\n\nint innerProduct(const Point& p0, const Point& p1)\n{\n\treturn p0.x * p1.x + p0.y * p1.y;\n}\n\nint outerProduct(const Point& p0, const Point& p1)\n{\n\treturn p0.x * p1.y - p0.y * p1.x;\n}\n\nvoid readPointsFromLine(Point& p0, Point& p1)\n{\n\tcin >> p0.x;\n\tcin >> p0.y;\n\tcin >> p1.x;\n\tcin >> p1.y;\n}\n\nint main()\n{\n\tint N; cin >> N;\n\tfor (int i = 0; i != N; ++i) {\n\t\tint flag = 0;\n\t\twhile (true) {\n\t\t\tPoint p0, p1, p2, p3;\n\t\t\treadPointsFromLine(p0, p1);\n\t\t\treadPointsFromLine(p2, p3);\n\t\t\tconst Point v0 = p1 - p0;\n\t\t\tconst Point v1 = p3 - p2;\n\t\t\tconst bool isParallel = isZero(outerProduct(v0, v1));\n\t\t\tif (isParallel) {\n\t\t\t\tflag = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst bool isOrthogonal = isZero(innerProduct(v0, v1));\n\t\t\tif (isOrthogonal) {\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcout << flag << endl;\n\t}\n\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <set>\n#include <map>\n#include <list>\n#include <queue>\n#include <stack>\n#include <cmath>\n#include <ctype.h>\n#include <ctime>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <bitset>\n#include <cctype>\n#include <cstdlib>\n#include <cstring>\n#include <utility>\n#include <numeric>\n#include <complex>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <cassert>\n#include <iostream>\n#include <iterator>\n#include <algorithm>\n\nusing namespace std;\n#define EPS 1e-10\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n//???\nclass Point{\n\tpublic:\t\n\t\tdouble x,y;\n\t\tPoint(double x = 0,double y = 0):x(x),y(y){}\n\t\t//?????????\n\t\tPoint operator + (Point p) { return Point(x + p.x,y + p.y);}\n\t\tPoint operator - (Point p) { return Point(x - p.x,y - p.y);}\n\t\tPoint operator * (double a) { return Point(x*a,y*a);}\n\t\tPoint operator / (double a) { return Point(x/a,y/a);}\n\t\t//???????????¨??§??????\n\t\tdouble abs() {return sqrt(norm());}\n\t\tdouble norm() {return x*x+y*y;}\n\n\t\tbool operator < (const Point &p) const{\n\t\t\treturn x != p.x ? x < p.x : y < p.y;\n\t\t}\n\t\tbool operator == (const Point &p) const{\n\t\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t\t}\n};\n//??????\nstruct Segment{Point p1,p2;};\n//????????????\ntypedef Point Vector;\n//??´???\ntypedef Segment Line;\n//???\nclass Circle{\n\tpublic:\n\t\tPoint c;\n\t\tdouble r;\n\t\tCircle(Point c = Point(),double r = 0.0): c(c),r(r){}\n};\n//????§???¢\n//typedef Vector<Point> Polygon;\n//????????¨??????\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrtho(Vector a,Vector b){\n\treturn equals(dot(a,b),0.0);\n}\n\nbool isPara(Vector a,Vector b){\n\treturn equals(cross(a,b),0.0);\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tint x0,y0,x1,y1,x2,y2,x3,y3;\n\tfor(int i = 0;i < n;i++){\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tVector a(x1-x0,y1-y0);\n\t\tVector b(x3-x2,y3-y2);\n\t\tif(isOrtho(a,b)){\n\t\t\tcout << 1 << endl;\n\t\t}else if(isPara(a,b)){\n\t\t\tcout << 2 << endl;\n\t\t}else{\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst double eps = 1e-8;\nconst double inf = 1e20;\ninline double sqr (double k) {return k * k;}\ninline int sgn (double p) {\n    if (fabs (p) < eps) return 0;\n    if (p < 0) return -1;\n    return 1;\n}\nstruct point {\n    double x, y;\n    point (){}\n    point (double _x, double _y) {\n        x = _x, y = _y;\n    }\n    void input () {\n        scanf (\"%lf %lf\", &x, &y);\n    }\n    bool operator == (point b) const {\n        return sgn (x - b.x) == 0 && sgn (y - b.y) == 0;\n    }\n    point operator - (const point &b) const {\n        return point (x - b.x, y - b.y);\n    }\n    double operator * (const point &b) const {\n        return x * b.x + y * b.y;\n    }\n    double operator ^ (const point &b) const {\n        return x * b.y - y * b.x;\n    }\n    double len () {\n        return hypot (x, y);\n    }\n    double len2 () {\n        return x * x + y * y;\n    }\n    double distance (point p) {\n        return hypot (x - p.x, y - p.y);\n    }\n    point operator + (const point &b) const{\n        return point (x + b.x, y + b.y);\n    }\n    point operator * (const double &b) const {\n        return point (x * b, y * b);\n    }\n    point operator / (const double &b) const {\n        return point (x / b, y / b);\n    }\n};\nint main () {\n//    freopen (\"in.txt\", \"r\", stdin);\n    int Q;\n    cin >> Q;\n    while (Q --) {\n        int t = 0, ans;\n        double u, k;\n        point s1, e1, s2, e2, a, b, c;\n        s1.input (), e1.input ();\n        s2.input (), e2.input ();\n        a = e1 - s1;\n        b = e2 - s2;\n        u = a ^ b;\n        k = a * b;\n        if (sgn (k) == 0) cout << 1 << endl;\n        else if (sgn (u) == 0) cout << 2 << endl;\n        else cout << 0 << endl;\n//        cout << ans << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef complex<double> V;\ntypedef vector<P> vecP;\ntypedef pair<P,P> L;\ntypedef pair<P,P> S;\ntypedef pair<P,double> C;\nconst double eps=1e-8;\nconst double PI=acos(-1);\nconst double PI2=PI*2.0;\n\nnamespace std{\n  bool operator < (const P &a,const P &b){\n    return (a.imag()==b.imag()?\n            a.real()<b.real():\n            a.imag()<b.imag());\n  }\n};\n\nV normal(V a){\n  assert( abs(a)>0 );\n  return a/abs(a);\n}\n\ndouble Sqrt( double x ){\n  if(x<0)return 0;\n  else return sqrt(x);\n}\n\nP Vector(L a){\n  return a.second-a.first;\n}\n\nbool eq(double a,double b){\n  return (-eps<a-b&&a-b<eps);\n}\n\nbool eq(P a,P b){\n  return ( eq(a.real(),b.real()) && eq(a.imag(),b.imag()) );\n}\n\ndouble dot(P a,P b){\n  return real(b*conj(a));\n}\n\ndouble cross(P a,P b){\n  return imag(b*conj(a));\n}\n\ndouble getArg(P a,P b){\n  return arg(b*conj(a));\n}\n\ndouble getTime(V a,V b){\n  assert( eq(cross(a,b),0) );\n  return ( dot(a,b) < 0 ? -1.0 : 1.0 ) * abs(b) / abs(a);\n}\n\n\nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nP reflect(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*conj(c/b);\n}\n\nint ccw(P a,P b,P c){\n  P ab=b-a,ac=c-a;\n  P k=ac*conj(ab);\n  if(k.imag()>0)return 1;\n  if(k.imag()<0)return -1;\n  if(k.real()<0)return 2;\n  if(abs(ab)<abs(ac))return -2;\n  return 0;\n}\n\nbool isParallel(P a,P b){\n  return eq(0, cross(a,b));\n}\n\nbool isParallel(S a,S b){\n  return eq(0, cross( Vector(a) , Vector(b) ) );\n}\n\nbool onLP(L l,P p){\n  P a=l.first, b=l.second;\n  return eq(0, cross(b-a,p-a));\n}\n\nbool onSP(S s,P p){\n  P a=s.first, b=s.second;\n  return eq( abs(b-a) , abs(a-p)+abs(b-p) );\n}\n\nbool isCrossSS(S s0,S s1){\n  P a=s0.first, b=s0.second;\n  P c=s1.first, d=s1.second;\n  int f0 = ccw(a,b,c) * ccw(a,b,d);\n  int f1 = ccw(c,d,a) * ccw(c,d,b);\n  return (f0<=0 && f1<=0);\n}\n\nbool isCrossLS(L l,S s){\n  P a=l.first, b=l.second;\n  P c=s.first, d=s.second;\n  return ( ccw(a,b,c) * ccw(a,b,d) <= 0 );\n}\n\ndouble distLP(L l,P p){\n  P a=l.first, b=l.second;\n  double res = cross(b-a,p-a) / abs(b-a);\n  return abs(res);\n}\n\ndouble distSP(S s,P p){\n  P a=s.first, b=s.second;\n  if( dot(b-a,p-a) < eps )return abs(p-a);\n  if( dot(a-b,p-b) < eps )return abs(p-b);\n  return distLP(s,p);\n}\n\nP getCrossLL(L l0,L l1){\n  P a=l0.first, b=l0.second;\n  P c=l1.first, d=l1.second;\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\n\n \nint inPolygon(vecP &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( onSP(S(a,b),p) )return 1;\n    sum+= getArg(a-p,b-p);\n  }\n  if( abs(sum) < eps )return 0;\n  else return 2;\n}\n\nvecP andrewScan(vecP &t){\n  int N=t.size(),C=0;\n  vecP R(N);\n  for(int i=0;i<N;i++){\n    while(2<=C&&ccw(R[C-2],R[C-1],t[i])==-1)C--;\n    R[C++]=t[i];\n  }\n  vecP res(C);\n  for(int i=0;i<C;i++)res[i]=R[i];\n  return res;\n}\n \nvecP convexHull(vecP &t){\n  sort(t.begin(),t.end());\n  vecP u=andrewScan(t);\n  reverse(t.begin(),t.end());\n  vecP l=andrewScan(t);\n  for(int i=1;i+1<(int)l.size();i++)u.push_back(l[i]);\n  return u;\n}\n\nvecP cutConvex(vecP &t,L l){\n  P a=l.first, b=l.second;\n  int N=t.size();\n  vecP res;\n  for(int i=0;i<N;i++){\n    P c=t[i],d=t[(i+1)%N];\n    int C=ccw(a,b,c),D=ccw(a,b,d);\n    if(C!=-1)res.push_back(c);\n    if(C==-D&&abs(C)==1)res.push_back(getCrossLL( l ,L(c,d) ));\n  }\n  return res;\n}\n\nP getVector(const vecP &t, int id){\n  int n=t.size();\n  return t[ (id+1)%n ] - t[id%n];\n}\n\ndouble convex_diameter(vecP &t) {\n  int n = t.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(t[i]) > imag(t[is])) is = i;\n    if (imag(t[i]) < imag(t[js])) js = i;\n  }\n  double maxd = norm(t[is]-t[js]);\n \n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    \n    if (cross( getVector(t,i), getVector(t,j)) >= 0) j = (j+1) % n;\n    \n    else i = (i+1) % n;\n    if (norm(t[i]-t[j]) > maxd) {\n      maxd = norm(t[i]-t[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxd; /* farthest pair is (maxi, maxj). */\n}\n\nbool compare_y(const P &a,const P &b){\n  return a.imag() < b.imag();\n}\n\ndouble closest_pair(P *a, int n){\n  if(n <= 1) return 1e30;\n  int m = n / 2;\n  double x = a[m].real();\n  double d = min(closest_pair(a, m), closest_pair(a + m, n - m));\n  inplace_merge(a, a + m, a + n, compare_y);\n  vector<P> b;\n  for(int i=0;i<n;i++){\n    if( abs(a[i].real() - x) >= d) continue;\n    for(int j=0;j<(int)b.size();j++){\n      double dx = real(a[i] - b[b.size() - j - 1]);\n      double dy = imag(a[i] - b[b.size() - j - 1]);\n      if(dy >= d) break;\n      d = min(d, sqrt(dx * dx + dy * dy));\n    }\n    b.push_back(a[i]);\n  }\n  return d;\n}\n\nP _pool[200005];\ndouble minDist(vecP &t){\n  int n=t.size();\n  for(int i=0;i<n;i++)_pool[i]=t[i];\n  sort( _pool, _pool+n);\n  return closest_pair(_pool, n);\n}\n\nint getStateCC(C a,C b){\n  double ar=a.second, br=b.second;\n  double dist=abs(a.first-b.first);\n  if(dist>ar+br+eps)return 4;\n  if(dist>ar+br-eps)return 3;\n  if(dist>abs(ar-br)+eps)return 2;\n  if(dist>abs(ar-br)-eps)return 1;\n  return 0;\n}\n\nP getCrossCC(C a,C b){\n  P p1=a.first, p2=a.second;\n  double r1=a.second, r2=b.second;\n  double cA = (r1*r1+norm(p1-p2)-r2*r2) / (2.0*r1*abs(p1-p2));\n  return p1+(p2-p1)/abs(p1-p2)*r1*P(cA,Sqrt(1.0-cA*cA));\n}\n\nS getTangentCP(C a,P p){\n  P base=a.first-p;\n  double ar=a.second;\n  double w=Sqrt(norm(base)-ar*ar);\n  P s=p+base*P(w,ar)/norm(base)*w;\n  P t=p+base*P(w,-ar)/norm(base)*w;\n  return S(s,t);\n}\n\nS getInTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double w=ar+br;\n  double h=Sqrt(norm(base)-w*w);\n  P k=base*P(w,h*flg)/norm(base);\n  return S(ap+k*ar,bp-k*br);\n}\n  \nS getOutTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double h=br-ar;\n  \n  double w=Sqrt(norm(base)-h*h);\n  P k=base*P(w,h*flg)/norm(base)*P(0,flg);\n  return S(ap+k*ar,bp+k*br);\n}\n  \nvector<S> getTangent(C a,C b){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  vector<S> res;\n  double dist=abs(ap-bp);\n    \n  if(dist>ar+br+eps)\n    res.push_back(getInTangent(a,b,1));\n  \n  if(dist>ar+br-eps)\n    res.push_back(getInTangent(a,b,-1));\n  \n  if(dist>abs(ar-br)+eps)\n    res.push_back(getOutTangent(a,b,1));\n  \n  if(dist>abs(ar-br)-eps)\n    res.push_back(getOutTangent(a,b,-1));\n  \n  return res;\n}\n\n\nvecP getCrossCS(C cir,S s, bool debug=false){\n  P a=s.first, b=s.second;\n  double cr=cir.second;\n  P cp=cir.first;\n  \n  vecP res;\n  P base=b-a,  target=project(a,b,cp);\n  \n  double length=abs(base), h=abs(cp-target);\n  base/=length;\n  \n  if(cr+eps<h)return res;\n  double w=Sqrt(cr*cr-h*h);\n  double L=getTime( normal(b-a) ,target-a)-w,  R=L+w*2.0;\n  \n  if( -eps<L && L< length+eps )res.push_back(a+base*L);\n  if( eq(L,R) )return res;\n  if( -eps<R && R< length+eps )res.push_back(a+base*R);\n  return res;\n}\n \ndouble getArea(C c,P a,P b){\n  P cp=c.first;\n  double cr=c.second;\n  \n  P va=cp-a,  vb=cp-b;\n  double A=abs(va), B=abs(vb);\n  double f=cross(va,vb), d=distSP( S(a,b) ,cp), res=0;\n  \n  if( eq(0, f ) )return 0;\n  if(A<cr+eps&&B<cr+eps)return f*0.5;\n  if(d>cr-eps)return cr*cr*PI*getArg(va,vb)/PI2;\n   \n  vecP u=getCrossCS(c, S(a,b) );\n  \n  assert( !u.empty() );\n  u.insert(u.begin(), a),  u.push_back(b);\n \n  for(int i=0;i+1<(int)u.size();i++) res+=getArea(c,u[i],u[i+1]);\n  return res;\n}\n \ndouble getCrossArea(vecP t,C c){\n  int n=t.size();\n  if(n<3)return 0;\n  double res=0;\n  for(int i=0;i<n;i++){\n    P a=t[i], b=t[(i+1)%n];\n    res+=getArea(c,a,b);\n  }\n  return res;\n}\n\nP input(){\n  int x,y;\n  cin>>x>>y;\n  return P(x,y);\n}\n\nvoid pr(P p,string str){\n  printf(\"%.10f %.10f\",p.real(),p.imag());\n  cout<<str;\n}\n\n\nint main(){\n  int Tc;\n  cin>>Tc;\n  while(Tc--){\n    P s,t;\n    s=input(), t=input();\n    P a,b;\n    a=input(), b=input();\n  \n    if( isParallel(s-t,a-b) )cout<<2<<endl;\n    else if( eq( dot(s-t,a-b) , 0 ) )cout<<1<<endl;\n    else cout<<0<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tdouble x0, y0, x1, y1, x2, y2, x3, y3; cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tdouble vec1_x = x1 - x0, vec1_y = y1 - y0, vec2_x = x3 - x2, vec2_y = y3 - y2;\n\t\tdouble cos_val = (vec1_x*vec2_x + vec1_y*vec2_y) / (hypot(vec1_x, vec1_y)*hypot(vec2_x, vec2_y));\n\t\tif (cos_val == 0) { cout << \"1\" << endl; continue; }\n\t\tif (cos_val == 1 || cos_val == -1) { cout << \"2\" << endl; continue; }\n\t\tcout << \"0\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n \n#define EPS (1e-10)\n#define equals(a,b) ( fabs(a-b) < EPS )\n#define PI 3.141592653589793238\n\n// COUNTER CLOCKWISE\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\n//Intersect Circle and Circle\nstatic const int ICC_SEPARATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct point{\n\tdouble x,y;\n\t//construct\n\tpoint() {} \n\tpoint(double x,double y):x(x),y(y){}\n\t//演算子\n\tpoint operator + (point p) { return point(x+p.x,y+p.y); }\n\tpoint operator - (point p) { return point(x-p.x,y-p.y); }\n\tpoint operator * (double k) { return point(x*k,y*k); }\n\tpoint operator / (double k) { return point(x/k,y/k); }\n\tpoint operator / (point p) { return point( (x*p.x + y*p.y)/p.norm()  , (-x*p.y + y*p.x)/p.norm() ) ; }\n\tbool operator < (point p) { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (point p) { return equals(x,p.x) && equals(y,p.y) ; }\n\t//function\n\tdouble arg() { return atan2(y,x) ; }\n\tdouble norm(){return x*x+y*y; }\n\tdouble abs() { return sqrt(norm() ) ;}\n\tdouble dot(point p) { return p.x*x + p.y*y; }\n\tdouble cross(point p) { return x*p.y - y*p.x; }\n\n\t//input output\n\tvoid input(){cin>>x>>y;}\n\tvoid polar(double r,double theta){ x = r*cos(theta), y= r*sin(theta) ; }\n\tvoid print(){cout<<x<<' '<<y<<endl;};\n\n};\n\nbool sort_x(point a,point b){\n\treturn a.x!=b.x?a.x<b.x:a.y<b.y ;\n}\nbool sort_y(point a,point b){\n\treturn a.y!=b.y?a.y<b.y:a.x<b.x ;\n}\n\ntypedef vector<point> polygon;\n\nstruct segment{\n\tpoint s,t;\n\tsegment() {}\n\tsegment(point s,point t) : s(s),t(t){}\n\tvoid input(){s.input(),t.input(); }\n};\ntypedef segment line;\n\nstruct circle{\n\tpoint c;\n\tdouble r;\n\tcircle() {}\n\tcircle(point c,double r) : c(c),r(r){}\n\n};\n\ndouble norm(point a){\treturn a.norm(); }\ndouble abs(point a){ return a.abs(); }\ndouble dot(point a,point b) { return a.x*b.x + a.y*b.y ; }\ndouble cross(point a,point b) { return a.x * b.y - a.y * b.x ; }\n\npoint orth(point p){ return point(-p.y,p.x); }\n\n//isOrthgonal 垂直\nbool isOrthogonal(point a,point b) { return equals(dot(a,b), 0.0 ) ; }\nbool isOrthogonal(point a,point b,point c,point d) { return isOrthogonal(a-b,c-d) ; }\nbool isOrthogonal(line l1,line l2 ){ return isOrthogonal(l1.t-l1.s,l2.t-l2.s); }\n//isParallel 平行\nbool isParallel(point a,point b) { return equals(cross(a,b), 0.0) ; }\nbool isParallel(point a,point b,point c,point d) { return isParallel(a-b,c-d); }\nbool isParallel(line l1,line l2) { return isParallel(l1.t-l1.s,l2.t-l2.s) ; }\n\npoint project(line l,point p){\n\tpoint base = l.t-l.s;\n\tdouble r = dot(p-l.s,base) / norm(base) ;\n\treturn l.s + base*r;\n}\npoint reflect(line l,point p){\n\treturn p + (project(l,p) - p) *2.0;\n}\n\nint ccw(point p0,point p1,point p2){\n\tpoint a = p1-p0;\n\tpoint b = p2-p0;\n\tif(cross(a,b) > EPS ) return CCW_COUNTER_CLOCKWISE ;\n\tif(cross(a,b) < -EPS ) return CCW_CLOCKWISE;\n\tif(dot(a,b) < -EPS ) return CCW_ONLINE_BACK;\n\tif(a.norm() < b.norm() ) return CCW_ONLINE_FRONT;\n\treturn CCW_ON_SEGMENT;\n}\n\n\nint main(){\n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n\tline l1,l2;\n\tl1.input();\n\tl2.input();\n\tif(isOrthogonal(l1,l2) ){\n\t\tcout<<1<<endl;\n\t}else if(isParallel(l1,l2) ){\n\t\tcout<<2<<endl;\n\t}else{\n\t\tcout<<0<<endl;\n\t}\n    }\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n \nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n}\n\nint main(){\n  double x0,y0,x1,y1,x2,y2,x3,y3;\n  cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n  Point p0=Point(x0,y0),p1=Point(x1,y1),p1=Point(x2,y2),p2=Point(x3,y3);\n  if(isParallel(p0,p1,p2,p3)) cout << 2 << endl;\n  else if(isOrthogonal(p0,p1,p2,p3)) cout << 1 << endl;\n  else cout << 0 << endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\ninline int Read()\n{\n\tint x(0),f(1);\n\tchar c(getchar());\n\twhile(c<'0'||'9'<c)\n\t{\n\t\tif(c=='-')\n\t\t{\n\t\t\tf=-1;\n\t\t}\n\t\tc=getchar();\n\t}\n\twhile('0'<=c&&c<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\nvoid Write(int x)\n{\n\tif(x<0)\n\t{\n\t\tprintf(\"-\");\n\t\tx=-x;\n\t}\n\tif(9<x)\n\t{\n\t\tWrite(x/10);\n\t}\n\tputchar(x%10+'0');\n}\ninline void Writeln(int x)\n{\n\tWrite(x);\n\tputs(\"\");\n}\nstruct Point\n{\n\tdouble x,y;\n\tPoint(double fx=0,double fy=0)\n\t{\n\t\tx=fx;\n\t\ty=fy;\n\t}\n\tvoid Read()\n\t{\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t}\n\tvoid Write(int len=2)\n\t{\n\t\tprintf(\"%.9lf %.9lf\",x,y);\n\t}\n\tdouble operator ^(Point const b)const\n\t{\n\t\treturn x*b.x+y*b.y;\n\t}\n\tdouble operator |(Point const b)const\n\t{\n\t\treturn x*b.y-b.x*y;\n\t}\n\tdouble operator ==(Point const b)const\n\t{\n\t\treturn sqrt((x-b.x)*(x-b.x)+(y-b.y)*(y-b.y));\n\t}\n\tPoint operator *(double const b)const\n\t{\n\t\treturn Point(x*b,y*b);\n\t}\n\tPoint operator +(Point const b)const\n\t{\n\t\treturn Point(x+b.x,y+b.y);\n\t}\n\tPoint operator -(Point const b)const\n\t{\n\t\treturn Point(x-b.x,y-b.y);\n\t}\n};\nPoint Symmetrical(Point a,Point m=Point(0,0))\n{\n\treturn Point(m.x*2-a.x,m.y*2-a.y);\n}\n/**\n *      /\n *   a /\n *    m\n *   / b\n */\nstruct Vector\n{\n\tPoint a,b;\n\tVector(Point f=Point(0,0),Point e=Point(0,0))\n\t{\n\t\ta=f;\n\t\tb=e;\n\t}\n\tdouble operator ^(Vector const c)const\n\t{\n\t\treturn (a.x-b.x)*(c.a.x-c.b.x)+(c.a.y-c.b.y)*(a.y-b.y);\n\t}\n\tdouble operator |(Vector const c)const\n\t{\n\t\treturn (a.x-b.x)*(c.a.y-c.b.y)-(c.a.x-c.b.x)*(a.y-b.y);\n\t}\n};\nPoint p0,p1,p2,p3;\nconst int MAXN=1e5+5;\nvoid Work()\n{\n\tp0.Read();\n\tp1.Read();\n\tp2.Read();\n\tp3.Read();\n\tif((Vector(p0,p1)|Vector(p2,p3))==0)\n\t{\n\t\tprintf(\"2\\n\");\n\t\treturn;\n\t}\n\tif((Vector(p0,p1)^Vector(p2,p3))==0)\n\t{\n\t\tprintf(\"1\\n\");\n\t\treturn;\n\t}\n\tprintf(\"0\\n\");\n}\nint main()\n{\n\tint q;\n\tscanf(\"%d\",&q);\n\tREP(i,1,q)\n\t{\n\t\tWork();\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < n; i++)\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point\n{\npublic:\n  double x, y;\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator+(Point p)\n  {\n    return Point(x + p.x, y + p.y);\n  }\n  Point operator-(Point p)\n  {\n    return Point(x - p.x, y - p.y);\n  }\n  Point operator*(double a)\n  {\n    return Point(a * x, a * y);\n  }\n  Point operator/(double a)\n  {\n    return Point(x / a, y / a);\n  }\n\n  double abs()\n  {\n    return sqrt(norm());\n  }\n  double norm()\n  {\n    return x * x + y * y;\n  }\n\n  bool operator<(const Point &p) const\n  {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator==(const Point &p) const\n  {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n\n  void print()\n  {\n    printf(\"%.10f %.10f\\n\", x, y);\n  }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b)\n{\n  return a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b)\n{\n  return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment\n{\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0) : c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nPoint projection(Line l, Point p)\n{\n  return l.p1 + (l.p2 - l.p1) * (dot(p - l.p1, l.p2 - l.p1) / (l.p2 - l.p1).norm());\n}\n\nPoint reflection(Line l, Point p)\n{\n  Point x = projection(l, p);\n  return p + (x - p) * 2;\n}\n\nbool is_ccw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0, b = p2 - p0;\n  return cross(a, b) > 0;\n}\n\nbool is_cw(Point p0, Point p1, Point p2)\n{\n  Vector a = p1 - p0, b = p2 - p0;\n  return cross(a, b) < 0;\n}\n\nbool is_parallel(Line l1, Line l2)\n{\n  Vector a = l1.p2 - l1.p1, b = l2.p2 - l2.p1;\n  return equals(cross(a, b), 0);\n}\n\nbool is_orthogonal(Line l1, Line l2)\n{\n  Vector a = l1.p2 - l1.p1, b = l2.p2 - l2.p1;\n  return equals(dot(a, b), 0);\n}\n\nint main()\n{\n  int q;\n  cin >> q;\n  rep(i, q)\n  {\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n    Line l1 = {Point{x0, y0}, Point{x1, y1}}, l2 = {Point{x2, y2}, Point{x3, y3}};\n    if (is_parallel(l1, l2))\n    {\n      cout << 2 << endl;\n    }\n    else if (is_orthogonal(l1, l2))\n    {\n      cout << 1 << endl;\n    }\n    else\n    {\n      cout << 0 << endl;\n    }\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define Rep(i,n) for(int i=0;i<(int)(n);i++)\n#define For(i,n1,n2) for(int i=(int)(n1);i<(int)(n2);i++)\n#define REP(i,n) for(ll i=0;i<(ll)(n);i++)\n#define RREP(i,n) for(ll i=((ll)(n)-1);i>=0;i--)\n#define FOR(i,n1,n2) for(ll i=(ll)(n1);i<(ll)(n2);i++)\n#define RFOR(i,n1,n2) for(ll i=((ll)(n1)-1);i>=(ll)(n2);i--)\n#define all(a)  (a).begin(),(a).end()\n#define SORT(a) sort((a).begin(),(a).end())\n#define oorret 0\n#define oor(x) [&](){try{x;} catch(const out_of_range& oor){return oorret;} return x;}()\n#define IOS cin.tie(0),ios::sync_with_stdio(false)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef std::pair<ll, ll> P;\ntemplate<typename T1, typename T2> inline bool chmin(T1& a, T2 b) { if (a > b) { a = b; return 1; }return 0; }\ntemplate<typename T1, typename T2> inline bool chmax(T1& a, T2 b) { if (a < b) { a = b; return 1; }return 0; }\ntemplate<class Type>struct is_vector : std::false_type {};\ntemplate<class ValueType, class Alloc>struct is_vector<std::vector<ValueType, Alloc>> : std::true_type {};\ntemplate <typename T> inline std::ostream& operator << (std::ostream& out, const std::vector<T>& v) {\n\tif (v.empty())return out;\n\tconstexpr bool is_vector_v = is_vector<T>::value;\n\tif (is_vector_v)for (auto itr = v.begin(); itr != v.end();)out << (*itr), out << ((++itr != v.end()) ? \"\\n\" : \"\");\n\telse for (auto itr = v.begin(); itr != v.end();)out << (*itr), out << ((++itr != v.end()) ? \" \" : \"\");\n\treturn out;\n}\ninline void put() {}\ntemplate<class T> inline void put(const T& first) { std::cout << first << \"\\n\"; }\ntemplate<class T, class... N> inline void put(const T& first, const N& ... rest) { std::cout << first << \" \"; put(rest...); }\ninline void putn() {}\ntemplate<class T, class... N> inline void putn(const T& first, const N& ... rest) { std::cout << first << \"\\n\"; putn(rest...); }\n\ntemplate<typename T>class point {\npublic:\n\tT x, y;\n\tpoint(T x, T y) :x(x), y(y) {}\n\tpoint() :x(0), y(0) {}\n\tvoid set(T x, T y) {\n\t\tthis->x = x;\n\t\tthis->y = y;\n\t}\n\tT p2dist(point p) {\n\t\tT dx = x - p.x;\n\t\tT dy = y - p.y;\n\t\treturn dx * dx + dy * dy;\n\t}\n\tT dist(point p) {\n\t\treturn sqrt(p2dist(p));\n\t}\n\tT dist(T x, T y) {\n\t\treturn dist(point(x, y));\n\t}\n\tT inner_product(point p) { // this・p\n\t\treturn x * p.x + y * p.y;\n\t}\n\tT outer_product(point p) { // this × p\n\t\treturn x * p.y - y * p.x;\n\t}\n\tT cos(point p1, point p2) { // 角度p1,this,p2の余弦\n\t\tpoint t1 = p1 - (*this), t2 = p2 - (*this);\n\t\tT ip = t1.inner_product(t2);\n\t\treturn ip / t1.size() / t2.size();\n\t}\n\tT sin(point p1, point p2) { // 角度p1,this,p2の正弦\n\t\tpoint t1 = p1 - (*this), t2 = p2 - (*this);\n\t\tT ip = t1.outer_product(t2);\n\t\treturn ip / t1.size() / t2.size();\n\t}\n\tT size() {\n\t\treturn sqrt(x * x + y * y);\n\t}\n\tpoint norm() {\n\t\treturn (*this) / size();\n\t}\n\tpoint project(point p1, point p2) { // p1,p2を通る直線へ下ろした垂線の足\n\t\tpoint p3 = p2 - p1;\n\t\tT s = p1.p2dist(p2);\n\t\tT t = (*this - p1) * p3 / s;\n\t\tpoint res = p3 * t;\n\t\tres += p1;\n\t\treturn res;\n\t}\n\tpoint reflect(point p1, point p2) { // p1,p2を通る直線を軸とした線対称点\n\t\tpoint proj = this->project(p1, p2);\n\t\tpoint p = proj - (*this);\n\t\tp *= 2;\n\t\tpoint res = (*this) + p;\n\t\treturn res;\n\t}\n\tT line_dist(point p1, point p2) { // p1,p2を通る直線との距離\n\t\tpoint proj = this->project(p1, p2);\n\t\treturn this->dist(proj);\n\t}\n\tstatic bool isParallel(point p1, point p2, point p3, point p4) { // p1,p2を通る直線sとp3,p4を通る直線tが平行か\n\t\tpoint s = p2 - p1, t = p4 - p3;\n\t\tT op = s.outer_product(t);\n\t\tlong double eps = 1e-10;\n\t\tif (s.size() < eps || t.size() < eps) {\n\t\t\treturn false;\n\t\t}\n\t\tlong double si = (long double)op / s.size() / t.size();\n\t\treturn abs(si) < eps;\n\t}\n\tstatic bool isOrthogonal(point p1, point p2, point p3, point p4) { // p1,p2を通る直線sとp3,p4を通る直線tが垂直か\n\t\tpoint s = p2 - p1, t = p4 - p3;\n\t\tT ip = s * t;\n\t\tlong double eps = 1e-10;\n\t\tif (s.size() < eps || t.size() < eps) {\n\t\t\treturn false;\n\t\t}\n\t\tlong double co = (long double)ip / s.size() / t.size();\n\t\treturn abs(co) < eps;\n\t}\n\tpoint operator+(point p) { return point(x + p.x, y + p.y); }\n\tpoint operator-(point p) { return point(x - p.x, y - p.y); }\n\tpoint operator*(T t) { return point(x * t, y * t); }\n\tT operator*(point p) { return inner_product(p); }\n\tpoint operator/(T t) { return point(x / t, y / t); }\n\tvoid operator+=(point p) { x += p.x; y += p.y; }\n\tvoid operator-=(point p) { x -= p.x; y -= p.y; }\n\tvoid operator*=(T t) { x *= t; y *= t; }\n\tvoid operator/=(T t) { x /= t; y /= t; }\n};\n\nint main() {\n\tusing pt = point<long double>;\n\tint q;\n\tcin >> q;\n\tREP(i, q) {\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tpt p0(x0, y0), p1(x1, y1), p2(x2, y2), p3(x3, y3);\n\t\tif (pt::isParallel(p0, p1, p2, p3)) {\n\t\t\tput(2);\n\t\t\tcontinue;\n\t\t}\n\t\tif (pt::isOrthogonal(p0, p1, p2, p3)) {\n\t\t\tput(1);\n\t\t\tcontinue;\n\t\t}\n\t\tput(0);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nstruct Point {\n    double x, y;\n    Point() {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) const { return Point(k * x, k * y); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n};\ndouble dot(const Point& a, const Point& b) { return a.x * b.x + a.y * b.y; }\ndouble cross(const Point& a, const Point& b) { return a.x * b.y - a.y * b.x; }\ndouble norm(const Point& a) { return sqrt(dot(a, a)); }\nPoint rot90(const Point& p) { return Point(p.y, -p.x); } // 時計回りに90度回転 \nbool equals(const Point& a, const Point& b) { return abs(a.x - b.x) < EPS && abs(a.y - b.y) < EPS; }\nostream& operator<<(ostream& os, const Point& p) { return os << \"(\" << p.x << \",\" << p.y << \")\"; }\n\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;\n    if (cross(b, c) > EPS) return +1;      // a,b,cの順に反時計周り\n    if (cross(b, c) < -EPS) return -1;     // a,b,cの順に時計周り\n    if (dot(b, c) < 0) return +2;          // c--a--b 直線\n    if (norm(b) < norm(c)) return -2;      // a--b--c 直線\n    return 0;                              // a--c--b 直線\n}\n\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(const Point& a, const Point& b) : a(a), b(b) {}\n};\nbool contains(const Line& l, const Point& p) { return ccw(l.a, l.b, p) % 2 == 0; }\nbool equals(const Line& s, const Line& t) { return equals(s.b - s.a, t.b - t.a) && contains(s, t.b); }\nbool parallel(const Line& s, const Line& t) { return equals(s.b - s.a, t.b - t.a); }\nbool orthogonal(const Line& s, const Line& t) { return dot(s.b - s.a, t.b - t.a) < EPS; }\n\nistream& operator>>(istream& is, Point& p) { return is >> p.x >> p.y; }\nistream& operator>>(istream& is, Line& l) { return is >> l.a >> l.b; }\n\nint main() {\n    int Q; cin >> Q;\n    for (int i = 0; i < Q; i++) {\n        Line s, t;\n        cin >> s >> t;\n        if (parallel(s, t)) {\n            cout << 2 << endl;\n        } else if (orthogonal(s, t)) {\n            cout << 1 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing u64 = uint_fast64_t; \nusing pii =  pair<int, int>;\nusing pll =  pair<long long, long long>;\n#define rep(i, n) for(int i = 0; i < (n); ++i)\n#define all(x) (x).begin(),(x).end()\nconstexpr char ln =  '\\n';\n//////////////////////////////////////////////////////////////////////////////\n\nusing DD = double; // 精度が足りないときはlong double\nconstexpr DD EPS = 1e-11;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\ninline int sgn(DD a) {return (a < -EPS) ? -1 : (a > EPS) ? 1 : 0;}\n\n//点\nstruct Point {\n    DD x, y;\n    Point (DD x = 0, DD y = 0): x(x), y(y) {}\n\n    Point operator+(const Point &p) const { return Point(*this) += p;}\n    Point operator-(const Point &p) const { return Point(*this) -= p;}\n    Point operator*(const Point &p) const { return Point(*this) *= p;}\n    Point operator*(DD a) const { return Point(*this) *= a;}\n    Point operator/(DD a) const { return Point(*this) /= a;}\n    Point& operator+=(const Point &p) { x += p.x; y += p.y; return *this;}\n    Point& operator-=(const Point &p) { x -= p.x; y -= p.y; return *this;}\n    Point& operator*=(const Point &p) { DD u = x*p.x - y*p.y; DD v = x*p.y + y*p.x; x = u; y = v; return *this;}\n    Point& operator*=(DD a) { x *= a; y *= a; return *this;}\n    Point& operator/=(DD a) { x /= a; y /= a; return *this;}\n    bool operator== (const Point &p) const { return !sgn(x - p.x) && !sgn(y - p.y);}\n    bool operator!= (const Point &p) const { return sgn(x - p.x) || sgn(y - p.y);}\n    bool operator< (const Point &p) const {\n        if (sgn(x - p.x)) return sgn(x - p.x) < 0;\n        return sgn(y - p.y) < 0;\n    }\n    friend istream& operator >>(istream& is, Point& p) { is >> p.x >> p.y; return is;}\n    friend ostream& operator <<(ostream& os, const Point& p) { os << p.x << \" \" << p.y; return os;}\n\n    DD norm() { return x*x + y*y;}\n    DD abs() { return sqrt(norm());}\n    DD arg() { return atan2(y,x);}\n};\n\n//ベクトル\nusing Vector = Point;\n\ninline DD norm(const Vector &a) { return a.x * a.x + a.y * a.y;}\ninline DD abs(const Vector &a) { return sqrt(norm(a));}\ninline DD dot(const Vector &a, const Vector &b) { return a.x * b.x + a.y * b.y;}\ninline DD cross(const Vector &a, const Vector &b) { return a.x * b.y - a.y * b.x;}\ninline Point rot(const Point &p, DD arg) { return Point(cos(arg) * p.x - sin(arg) * p.y, sin(arg) * p.x + cos(arg) * p.y);}\ninline Point rot90(const Point &p) { return Point(-p.y, p.x);}\ninline DD arg(const Vector &p) { return atan2(p.y, p.x);}\n//象限\nint ort(const Point &a) {\n    if (sgn(norm(a))) {\n        if (sgn(a.y) > 0) return sgn(a.x) > 0 ? 1 : 2;\n        return sgn(a.x) > 0 ? 4 : 3;\n    }\n    return 0;\n}\nbool xsort(const Point &a, const Point &b) {\n    if (sgn(a.x - b.x)) return sgn(a.x - b.x) < 0;\n    return sgn(a.y - b.y) < 0;\n}\nbool ysort(const Point &a, const Point &b) {\n    if (sgn(a.y - b.y)) return sgn(a.y - b.y) < 0;\n    return sgn(a.x - b.x) < 0;\n}\n\nbool argsortcross(const Point &a, const Point &b) {\n    int ao = ort(a), bo = ort(b);\n    if (ao != bo) return ao < bo;\n    return sgn(cross(a,b)) > 0;\n}\n\nbool argsortatan2(const Point &a, const Point &b) {\n    return sgn(atan2(b.y, b.x) - atan2(a.y, a.x)) > 0;\n}\n\n//線分\nstruct Segment {\n    Point p1,p2;\n    Segment() {};\n    Segment(Point p1, Point p2) : p1(p1),p2(p2) {}\n};\n\n//直線\nusing Line = Segment;\n\n// 円\nstruct Circle {\n    Point c;\n    DD r;\n    Circle(){}\n    Circle(Point c, DD r): c(c), r(r) {}\n    friend istream& operator >>(istream& is, Circle& C) { is >> C.c >> C.r; return is;}\n    friend ostream& operator <<(ostream& os, const Circle& C) { os << C.c << \" \" << C.r; return os;}\n};\n\n//多角形\nusing Polygon = vector<Point>;\n\nint ccw(const Point &p0, const Point &p1, const Point &p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (sgn(cross(a,b)) > 0) return 1; //p0,p1から見てp2は左側(反時計回り)\n    if (sgn(cross(a,b)) < 0) return -1; //p0,p1から見てp2は右側(時計回り)\n    if (sgn(dot(a,b)) < 0) return 2; //p2-p0-p1の順に一直線上\n    if (sgn(norm(b) - norm(a)) > 0) return -2; //p0-p1-p2の順に一直線上\n    return 0; //p0-p2-p1の順に一直線上\n}\n\n//直線の交差判定 交差する場合1, 平行な場合0, 同一直線のとき-1\nint intersectLP(const Vector &a, const Vector &b) {\n    if (sgn(cross(a,b))) return 1;\n    if (sgn(dot(a,b))) return 0;\n    return -1;\n} \nint intersectLP(const Point &p1, const Point &p2, const Point &p3, const Point &p4) {return intersectLP(p2-p1,p4-p3);}\nint intersectLP(const Line &l1, const Line &l2) {return intersectLP(l1.p1,l1.p2,l2.p1,l2.p2);}\n\n//直線の平行判定\nbool isParallel(const Vector &a, Vector &b) {return intersectLP(a,b) <= 0;}\nbool isParallel(const Point &p1, const Point &p2, const Point &p3, const Point &p4) {return intersectLP(p1,p2,p3,p4) <= 0;}\nbool isParallel(const Line &l1, const Line &l2) {return intersectLP(l1,l2) <= 0;}\n\n//直線の直交判定\nbool isOrthogonal(const Vector &a, const Vector &b) {return !sgn(dot(a,b));}\nbool isOrthogonal(const Point &p1, const Point &p2, const Point &p3, const Point &p4) {return isOrthogonal(p2-p1,p4-p3);}\nbool isOrthogonal(const Line &l1, const Line &l2) {return isOrthogonal(l1.p1,l1.p2,l2.p1,l2.p2);}\n\n//射影\nPoint project(const Segment &s, const Point &p) {\n    Vector base = s.p2 - s.p1;\n    DD r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n//線対称\ninline Point reflect(const Segment &s, const Point &p) {return p + (project(s,p) - p) * 2;}\n\n//線分の交差判定\ninline bool intersect(const Point &p1, const Point &p2, const Point &p3, const Point &p4) { return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);}\ninline bool intersect(const Segment &s1, const Segment &s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2);}\n\ninline DD getDistanceLP(const Line &l, const Point &p) { return abs(cross(l.p2 - l.p1,p - l.p1) / abs(l.p2 - l.p1));}\nDD getDistanceSP(const Segment &s, const Point &p) {\n    if (dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\nDD getDistance(const Segment &s1, const Segment &s2) {\n    if (intersect(s1, s2)) return (DD)0;\n    return min({getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)});\n}\n\n//線分と線分の交点\nPoint getCrossPoint(const Segment &s1, const Segment &s2) {\n    Vector base = s2.p2 - s2.p1;\n    DD d1 = abs(cross(base, s1.p1 - s2.p1));\n    DD d2 = abs(cross(base, s1.p2 - s2.p1));\n    DD t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n//円と直線の交差判定\ninline bool intersect(const Circle &c, const Line &l) { return getDistanceLP(l, c.c) - c.r < EPS;}\n//円と円の交差判定\ninline bool intersect(const Circle &c1, const Circle &c2) { return abs(c1.c - c2.c) - (c1.r + c2.r) < EPS && fabs(c1.r - c2.r) - abs(c1.c - c2.c) < EPS;}\n\n//円と線分の交点\npair<Point, Point> getCrossPoints(const Circle &c, const Line &l) {\n    assert(intersect(c,l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    DD base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\ninline Vector polar(DD a, DD r) { return Point(cos(r) * a, sin(r) * a);}\n\n//円と円の交点\npair<Point, Point> getCrossPoints(const Circle &c1, const Circle &c2) {\n    assert(intersect(c1, c2));\n    DD d = abs(c1.c - c2.c);\n    DD a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (DD(2) * c1.r * d));\n    DD t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//多角形の面積\nDD area(const Polygon &g) {\n    const int N = g.size();\n    DD ret = 0;\n    for (int i = 0; i < N; ++i) {\n        ret += cross(g[i],g[(i+1)%N]);\n    }\n    return fabs(ret)/2;\n}\n\n// 多角形-点の包含判定\nint containment(const Polygon &g, const Point &p) {\n    const int N = g.size();\n    int cnt = 0;\n    for (int i = 0; i < N; ++i) {\n        if (norm(g[i] - p) < EPS || norm(g[(i+1)%N] - p) < EPS || ccw(g[i], g[(i+1)%N], p) == 0) {\n            return 1; // pがgの辺上に存在する\n        }\n        Point I = Point(2e9 + p.x, 2e9 + 574677631 + p.y);\n        if (ccw(I, p, g[i]) == 0 || ccw(I, p, g[(i+1)%N]) == 0) continue;\n        if (intersect(I, p, g[i], g[(i+1)%N])) ++cnt;\n    }\n    if (cnt&1) return 2; // pがgに含まれる\n    else return 0; // pがgに含まれない\n}\n\n//凸包\nPolygon andrewScan(Polygon s) {\n    Polygon u,l;\n    const int N = s.size();\n    if (N < 3) return s;\n    sort(s.begin(), s.end(), xsort);\n    u.emplace_back(s[0]);\n    u.emplace_back(s[1]);\n    l.emplace_back(s[N-1]);\n    l.emplace_back(s[N-2]);\n    \n    for (int i = 2; i < s.size(); ++i) {\n        // 凸包上の点も含めるなら ccw() == 1\n        for (int n = u.size(); n >= 2 && ccw(u[n-2],u[n-1],s[i]) != -1; --n) {\n            u.pop_back();\n        }\n        u.emplace_back(s[i]);\n    }\n\n    for (int i = N - 3; i >= 0; --i) {\n        // 凸包上の点も含めるなら ccw() == 1\n        for (int n = l.size(); n >= 2 && ccw(l[n-2], l[n-1], s[i]) != -1; --n) {\n            l.pop_back();\n        }\n        l.emplace_back(s[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for (int i = u.size() - 2; i >= 1; --i) l.emplace_back(u[i]);\n\n    return l;\n}\n\n//最遠点対\nDD farthestpointpair(const Polygon &g) {\n    const int N = g.size();\n    if (N == 2) return abs(g[1] - g[0]);\n    int i = 0, j = 0;\n    for (int k = 0; k < N; ++k) {\n        if (g[k].y > g[i].y) i = k;\n        if (g[k].y < g[j].y) j = k;\n    }\n\n    DD ret = 0;\n    int si = i, sj = j;\n    while (i != sj || j != si) {\n        ret = max(ret, abs(g[i]-g[j]));\n        if (cross(g[(i+1)%N] - g[i], g[(j+1)%N] - g[j]) < -EPS) {\n            i = (i+1)%N;\n        } else {\n            j = (j+1)%N;\n        }\n    }\n\n    return ret;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nvoid CGL_1_A() {\n    Point p1,p2; cin >> p1 >> p2;\n    Line l(p1,p2);\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p; cin >> p;\n        cout << project(l,p) << ln;\n    }\n}\n\nvoid CGL_1_B() {\n    Point p1,p2; cin >> p1 >> p2;\n    Line l(p1,p2);\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p; cin >> p;\n        cout << reflect(l,p) << ln;\n    }\n}\n\nvoid CGL_1_C() {\n    Point p0,p1; cin >> p0 >> p1;\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p2; cin >> p2;\n        int v = ccw(p0,p1,p2);\n        string ans;\n        if (v==1) ans = \"COUNTER_CLOCKWISE\";\n        if (v==-1) ans = \"CLOCKWISE\";\n        if (v==2) ans = \"ONLINE_BACK\";\n        if (v==-2) ans = \"ONLINE_FRONT\";\n        if (v==0) ans = \"ON_SEGMENT\";\n        cout << ans << ln;\n    }\n}\n\nvoid CGL_2_A() {\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        if (isParallel(p0,p1,p2,p3)) cout << 2 << ln;\n        else if (isOrthogonal(p0,p1,p2,p3)) cout << 1 << ln;\n        else cout << 0 << ln;\n    }\n}\n\nint main() {\n    ios::sync_with_stdio(false); cin.tie(nullptr);\n    cout << fixed << setprecision(20);\n    //CGL_1_A();\n    //CGL_1_B();\n    //CGL_1_C();\n    CGL_2_A();\n}\n\n/*\n  verified on 2020/06/02\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=ja\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\n*/\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n/*\n#include<algolithm>\n#include<array>\n#include<vector>\n*/\nusing namespace std;\n\ntypedef double Real;\nconstexpr Real EPS = 1e-8;\n\nint sign(Real d) {\n\tif (d>EPS) { return 1; }\n\tif (d<-EPS) { return -1; }\n\treturn 0;\n}\n\nstruct Point {\n\tReal x,y;\n\n\tPoint(Real x_=0, Real y_=0): x(x_), y(y_) {}\n\n\tPoint operator+(const Point &p) const {\n\t\treturn Point(x+p.x,y+p.y);\n\t}\n\tPoint operator-(const Point &p) const {\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n\tPoint operator*(Real s) const {\n\t\treturn Point(x*s,y*s);\n\t}\n\tPoint operator/(Real s) const {\n\t\treturn Point(x/s,y/s);\n\t}\n\tPoint operator<(const Point &p) const {\n\t\treturn sign(x - p.x) == -1 || (sign(x - p.x)==0 && sign(y - p.y)==-1);\n\t}\n\tPoint operator==(const Point &p) const { return sign(x-p.x) == 0 && sign(y - p.y)==0; }\n};\n\nstruct Line : public array<Point, 2> { //??????\n\tLine(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Segment : public array<Point, 2> { //??´???\n\tSegment(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Circle {\n\tPoint c;\n\tReal r;\n\tCircle(const Point &c_, Real r_): c(c_), r(r_) {}\n};\n\ntypedef vector<Point> Polygon;\n\n\n\n\n//--- solve ---\nPoint rotate90(const Point &p) { //???????¨???????\n\treturn Point(-p.y,p.x);\n}\n\nPoint rotate(const Point &p, Real theta) {\n\tconst Real s = sin(theta), c = cos(theta);\n\treturn Point(c*p.x - s*p.y, s*p.x + c*p.y);\n}\n\nReal angle(const Point &p) {\n\treturn atan2(p.y, p.x);\n}\n\nReal norm(const Point &p) {\n\treturn p.x * p.x + p.y * p.y;\n}\n\nReal abs(const Point &p) {\n\treturn sqrt(norm(p));\n}\n\nReal dot(const Point &a, const Point &b) { //??????\n\treturn a.x * b.x + a.y * b.y;\n}\n\nReal cross(const Point &a, const Point &b) { //??????\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint main() {\n\tint N;\n\n\tcin >> N;\n\tfor(int i=0; i<N; i++) {\n\t\tint x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tPoint p[2];\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n\t\tp[0].x = x0 - x1;\n\t\tp[0].y = y0 - y1;\n\t\tp[1].x = x2 - x3;\n\t\tp[1].y = y2 - y3;\n\t\t\n\t\tReal res1 = dot(p[0],p[1]);\n\t\tReal res2 = cross(p[0],p[1]);\n\t\t//cout << res1 << \" \" << res2 << endl;\n\t\tif (sign(res1) == 0) {\n\t\t\t//?????´\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse if (sign(res2) == 0) {\n\t\t\t//??????\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse {\n\t\t\t//?????????\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\n\treturn EXIT_SUCCESS;\n}"
  },
  {
    "language": "C++",
    "code": "#define __USE_MINGW_ANSI_STDIO 0\n#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\n#define int ll\nusing VI = vector<int>;\nusing VVI = vector<VI>;\nusing PII = pair<int, int>;\n\n#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define ALL(x) x.begin(), x.end()\n#define PB push_back\n\nconst ll LLINF = (1LL<<60);\nconst int INF = (1LL<<30);\nconst int MOD = 1000000007;\n\ntemplate <typename T> T &chmin(T &a, const T &b) { return a = min(a, b); }\ntemplate <typename T> T &chmax(T &a, const T &b) { return a = max(a, b); }\ntemplate <typename T> bool IN(T a, T b, T x) { return a<=x&&x<b; }\ntemplate<typename T> T ceil(T a, T b) { return a/b + !!(a%b); }\ntemplate<class S,class T>\nostream &operator <<(ostream& out,const pair<S,T>& a){\n  out<<'('<<a.first<<','<<a.second<<')';\n  return out;\n}\ntemplate<class T>\nostream &operator <<(ostream& out,const vector<T>& a){\n  out<<'[';\n  REP(i, a.size()) {out<<a[i];if(i!=a.size()-1)out<<',';}\n  out<<']';\n  return out;\n}\n\nint dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};\n\nconst double EPS = 1e-8;\n\nusing R = long double;\nusing P = complex<R>;\nusing L = pair<P,P>;\nusing G = vector<P>;\nusing C = pair<P,R>;\nstruct S : public L {\n  S() {}\n  S(const P &a, const P &b) : L(a,b) {}\n};\n\ninline int sgn(const R& r) { return (r>EPS) - (r<-EPS); }\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) ? real(a-b) < 0 : sgn(imag(a-b)) < 0;\n\t}\n\tbool operator == (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) == 0 && sgn(imag(a-b)) == 0;\n\t}\n}\ninline R dot(const P& a, const P& b) {\n  return real(a)*real(b) + imag(a)*imag(b);\n}\ninline R det(const P& a, const P& b) {\n  return real(a)*imag(b) - imag(a)*real(b);\n}\ninline P vec(const L& l) {return l.second - l.first;}\n\n// P,L,Sについて入力\ninline istream& operator>>(istream& is, P& p) {\n  R x, y;\n  is >> x >> y;\n  p = P(x, y);\n  return is;\n}\ninline istream& operator>>(istream& is, L& l) {\n  P a, b;\n  is >> a >> b;\n  l = L(a, b);\n  return is;\n}\ninline istream& operator>>(istream& is, S& s) {\n  P a, b;\n  is >> a >> b;\n  s = S(a, b);\n  return is;\n}\n\n// 線分abから見たcの位置\nenum CCW{LEFT=1, RIGHT=2, BACK=4, FRONT=8, ON=16};\nint ccw(P a, P b, P c) {\n\tP p = (c-a)/(b-a);\n\tif(sgn(imag(p)) > 0) return LEFT;\n\tif(sgn(imag(p)) < 0) return RIGHT;\n\tif(sgn(real(p)) < 0) return BACK;\n\tif(sgn(real(p)-1) > 0) return FRONT;\n\treturn ON;\n}\n\n// 垂直,平行\ninline bool vertical(L a, L b) {return sgn(dot(vec(a), vec(b))) == 0;}\ninline bool parallel(L a, L b) {return sgn(det(vec(a), vec(b))) == 0;}\ninline bool eal(L a, L b) {return vertical(a,b) && parallel(a,b);}\n\n// 交差判定\ntemplate<bool strict=false> inline bool intersect(const L&l1, const L&l2) {\n  if(strict) return sgn(det(vec(l1),vec(l2))) != 0;\n  return sgn(det(vec(l1),vec(l2))) != 0 || l1 == l2;\n}\ntemplate<bool strict=false> inline bool intersect(const L&l, const S&s) {\n  if(strict) det(s.first, vec(l)) * det(s.second, vec(l)) < 0;\n  return det(s.first, vec(l)) * det(s.second, vec(l)) <= 0;\n}\ntemplate<bool strict=false> inline bool intersect(const S&s, const L&l) {\n  return intersect<strict>(l, s);\n}\ntemplate<bool strict=false> inline bool intersect(const S&s1, const S&s2) {\n  int ccw1 = ccw(s1.first, s1.second, s2.first) | ccw(s1.first, s1.second, s2.second);\n  int ccw2 = ccw(s2.first, s2.second, s1.first) | ccw(s2.first, s2.second, s1.second);\n  if(strict) return (ccw1 & ccw2) == (LEFT | RIGHT);\n  return (ccw1 & ccw2) == (LEFT | RIGHT) || ((ccw1 | ccw2) & ON);\n}\n\n// 射影\nP projection(const L &l, const P &p) {\n  R t = dot(p-l.first, l.first-l.second) / norm(l.first-l.second);\n  return l.first + t*(l.first-l.second);\n}\n// 反射\nP reflection(const L &l, const P &p) {\n  return p + (R)2 * (projection(l, p) - p);\n}\n\nsigned main(void)\n{\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n\n  int q;\n  cin >> q;\n  REP(i, q) {\n    L l1, l2;\n    cin >> l1 >> l2;\n    if(parallel(l1, l2)) cout << 2 << endl;\n    else if(vertical(l1, l2)) cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef DEBUG_MODE\n#define DBG(n) n;\n#else\n#define DBG(n) ;\n#endif\n#define REP(i,n) for(ll (i) = (0);(i) < (n);++i)\n#define rep(i,s,g) for(ll (i) = (s);(i) < (g);++i)\n#define rrep(i,s,g) for(ll (i) = (s);i >= (g);--(i))\n#define PB push_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SHOW1d(v,n) {for(int WWW = 0;WWW < (n);WWW++)cerr << v[WWW] << ' ';cerr << endl << endl;}\n#define SHOW2d(v,i,j) {for(int aaa = 0;aaa < i;aaa++){for(int bbb = 0;bbb < j;bbb++)cerr << v[aaa][bbb] << ' ';cerr << endl;}cerr << endl;}\n#define ALL(v) v.begin(),v.end()\n#define Decimal fixed<<setprecision(20)\n#define INF 1000000000\n#define LLINF 1000000000000000000LL\n#define MOD 1000000007\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\n\nconst double EPS = 1e-12;\nconst double PI = acos(-1.0);\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n\t\n\tbool operator == (const point& a,const point& b) {\n\t\treturn (abs(a.real() - b.real()) < EPS && abs(a.imag() - b.imag()) < EPS);\n\t}\n}\nstruct circle {\n\tpoint p; double r;\n\tcircle(){}\n\tcircle(const point &p, double r) : p(p), r(r) { }\n};\nstruct segment : public vector<point> {\n\tsegment(const point &a, const point &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\n\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\n\n/*\na → b で時計方向に折れて b → c\na → b で半時計方向に折れて b → c\na → b で逆を向いて a を通り越して b → c\na → b でそのまま b → c\na → b で逆を向いて b → c ( または b == c )\n*/\n\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;       // counter clockwise\n\tif (cross(b, c) < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const segment &l, const segment &m) {\n\treturn abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n\t\tabs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const segment &l, const segment &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])*       // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const segment &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSP(const segment &s, const point &p) {\n\treturn abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; // triangle inequality\n}\n//端点の交差も考える\nbool intersectSS(const segment &s, const segment &t) {\n\tif(intersectSP(s,t[0]) || intersectSP(s,t[1]) || intersectSP(t,s[0]) || intersectSP(t,s[1]))return true;\n\treturn ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) <= 0;\n}\n\npoint projection(const segment &l, const point &p) {\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + t*(l[0] - l[1]);\n}\npoint reflection(const segment &l, const point &p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\ndouble distanceLP(const segment &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const segment &l, const segment &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const segment &l, const segment &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const segment &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const segment &s, const segment &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const point &a,const point &b){\n\treturn abs(a-b);\n}\n\n//交点\npoint crosspoint(const segment &l, const segment &m) {\n\tif(!intersectSS(l,m))return point(INF,INF);\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return point(INF,INF); // same line\n\tif (abs(A) < EPS) return point(INF,INF); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n/*多角形内包判定\nOUT:0\nON:1\nIN:2\n*/\n#define curr(PP, i) PP[i]\n#define next(PP, i) PP[(i+1)%PP.size()]\nint contains(const vector<point>& Poly, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < Poly.size(); ++i) {\n\t\tpoint a = curr(Poly, i) - p, b = next(Poly, i) - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) <= 0 && 0 < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n//見えるか(可視グラフ用) \nbool block_off(const point &a, const point &b, const vector<point> &obj) {\n  point m = (a+b)/2.0;\n  bool on = false, in = false;\n  for (int j = 0; j < obj.size(); ++j) {\n    point c = curr(obj,j), d = next(obj,j);\n    if (imag(d) < imag(c)) swap(c, d);\n    if (cross(a-c,b-c) * cross(a-d,b-d) < 0 &&    // strictly intersect.\n        cross(c-a,d-a) * cross(c-b,d-b) < 0) return true;\n    if (cross(a-c,b-c) == 0 && dot(a-c,b-c) < 0) return true;\n    if (imag(c) <= imag(m) && imag(m) < imag(d))  // strictly contain.\n      if (cross(c-m,d-m) < 0) in = !in;\n    if (cross(c-m,d-m) == 0 && dot(c-m,d-m) <= 0) on = true;\n  }\n  return !on && in;\n}\n\n//面積\ndouble area(const vector<point>& p) {\n\tdouble A = 0;\n\tfor (int i = 0; i < p.size(); ++i)\n\t\tA += cross(curr(p, i), next(p, i));\n\treturn A / 2.;\n}\n\n//角度足し算\ndouble add_rad(double a,double b){\n\tdouble ret = a + b;\n\tif(ret > PI)ret -= 2 * PI;\n\treturn ret;\n}\n\n//なす角(vector)\ndouble angle(const point &a,const point &b) {\n\tauto tmp = abs(arg(a) - arg(b));\n\treturn min(tmp, 2 * PI - tmp);\n}\n\ndouble angle(const segment &s1,const segment &s2) {\n\treturn angle(s1[1] - s1[0], s2[1] - s2[0]);\n}\n\n//点の回転\npoint rotate(const point &p, double rad) {\n\tdouble X = p.real() * cos(rad) - p.imag() * sin(rad);\n\tdouble Y = p.imag() * cos(rad) + p.real() * sin(rad);\n\treturn point(X, Y);\n}\n\n//並行\nbool isParallel(const point &a, const point &b){\n    return abs(cross(a,b)) < EPS;\n}\nbool isParallel(const segment &a, const segment &b){\n    return isParallel(a[1]-a[0], b[1]-b[0]);\n}\n\nint main() {\n\tint q;cin >> q;\n\tREP(i,q){\n\t\tint a,b,c,d;cin >> a >> b >> c >> d;\n\t\tsegment A = segment(point(a,b),point(c,d));\n\t\tcin >> a >> b >> c >> d;\n\t\tsegment B = segment(point(a,b),point(c,d));\n\t\tif(isParallel(A,B)){\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse if(abs(angle(A,B) - PI / 2) < EPS){\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse{\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\t\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "using System;\n\nclass Program\n{\n  struct Vector\n  {\n    public int x, y;\n  }\n\n  private static bool isOrthogonal(Vector v1, Vector v2)\n  {\n    return v1.x*v2.x + v1.y*v2.y == 0;\n  }\n\n  private static bool isParallel(Vector v1, Vector v2)\n  {\n    return v2.x*v1.y - v2.y*v1.x == 0;\n  }\n  public static void Main()\n  {\n    int n = int.Parse(Console.ReadLine());\n\n    for(int i=0; i<n; i++)\n    {\n      string[] s = Console.ReadLine().Split(' ');\n      Vector v1, v2;\n      v1.x = int.Parse(s[2]) - int.Parse(s[0]);\n      v1.y = int.Parse(s[3]) - int.Parse(s[1]);\n      v2.x = int.Parse(s[6]) - int.Parse(s[4]);\n      v2.y = int.Parse(s[7]) - int.Parse(s[5]);\n\n      if(isOrthogonal(v1, v2)) {\n        Console.WriteLine(\"1\");\n      } else if(isParallel(v1, v2)) {\n        Console.WriteLine(\"2\");\n      } else {\n        Console.WriteLine(\"0\");\n      }\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef DEBUG_MODE\n#define DBG(n) n;\n#else\n#define DBG(n) ;\n#endif\n#define REP(i,n) for(ll (i) = (0);(i) < (n);++i)\n#define rep(i,s,g) for(ll (i) = (s);(i) < (g);++i)\n#define rrep(i,s,g) for(ll (i) = (s);i >= (g);--(i))\n#define PB push_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SHOW1d(v,n) {for(int WWW = 0;WWW < (n);WWW++)cerr << v[WWW] << ' ';cerr << endl << endl;}\n#define SHOW2d(v,i,j) {for(int aaa = 0;aaa < i;aaa++){for(int bbb = 0;bbb < j;bbb++)cerr << v[aaa][bbb] << ' ';cerr << endl;}cerr << endl;}\n#define ALL(v) v.begin(),v.end()\n#define Decimal fixed<<setprecision(20)\n#define INF 1000000000\n#define LLINF 1000000000000000000LL\n#define MOD 1000000007\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\n\nconst double EPS = 1e-12;\nconst double PI = acos(-1.0);\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n\t\n\tbool operator == (const point& a,const point& b) {\n\t\treturn (abs(a.real() - b.real()) < EPS && abs(a.imag() - b.imag()) < EPS);\n\t}\n}\nstruct circle {\n\tpoint p; double r;\n\tcircle(){}\n\tcircle(const point &p, double r) : p(p), r(r) { }\n};\nstruct segment : public vector<point> {\n\tsegment(const point &a, const point &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\n\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\n\n/*\na → b で時計方向に折れて b → c\na → b で半時計方向に折れて b → c\na → b で逆を向いて a を通り越して b → c\na → b でそのまま b → c\na → b で逆を向いて b → c ( または b == c )\n*/\n\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;       // counter clockwise\n\tif (cross(b, c) < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const segment &l, const segment &m) {\n\treturn abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n\t\tabs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const segment &l, const segment &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])*       // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const segment &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSP(const segment &s, const point &p) {\n\treturn abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; // triangle inequality\n}\n//端点の交差も考える\nbool intersectSS(const segment &s, const segment &t) {\n\tif(intersectSP(s,t[0]) || intersectSP(s,t[1]) || intersectSP(t,s[0]) || intersectSP(t,s[1]))return true;\n\treturn ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) <= 0;\n}\n\npoint projection(const segment &l, const point &p) {\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + t*(l[0] - l[1]);\n}\npoint reflection(const segment &l, const point &p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\ndouble distanceLP(const segment &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const segment &l, const segment &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const segment &l, const segment &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const segment &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const segment &s, const segment &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const point &a,const point &b){\n\treturn abs(a-b);\n}\n\n//交点\npoint crosspoint(const segment &l, const segment &m) {\n\tif(!intersectSS(l,m))return point(INF,INF);\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return point(INF,INF); // same line\n\tif (abs(A) < EPS) return point(INF,INF); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n/*多角形内包判定\nOUT:0\nON:1\nIN:2\n*/\n#define curr(PP, i) PP[i]\n#define next(PP, i) PP[(i+1)%PP.size()]\nint contains(const vector<point>& Poly, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < Poly.size(); ++i) {\n\t\tpoint a = curr(Poly, i) - p, b = next(Poly, i) - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) <= 0 && 0 < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n//見えるか(可視グラフ用) \nbool block_off(const point &a, const point &b, const vector<point> &obj) {\n  point m = (a+b)/2.0;\n  bool on = false, in = false;\n  for (int j = 0; j < obj.size(); ++j) {\n    point c = curr(obj,j), d = next(obj,j);\n    if (imag(d) < imag(c)) swap(c, d);\n    if (cross(a-c,b-c) * cross(a-d,b-d) < 0 &&    // strictly intersect.\n        cross(c-a,d-a) * cross(c-b,d-b) < 0) return true;\n    if (cross(a-c,b-c) == 0 && dot(a-c,b-c) < 0) return true;\n    if (imag(c) <= imag(m) && imag(m) < imag(d))  // strictly contain.\n      if (cross(c-m,d-m) < 0) in = !in;\n    if (cross(c-m,d-m) == 0 && dot(c-m,d-m) <= 0) on = true;\n  }\n  return !on && in;\n}\n\n//面積\ndouble area(const vector<point>& p) {\n\tdouble A = 0;\n\tfor (int i = 0; i < p.size(); ++i)\n\t\tA += cross(curr(p, i), next(p, i));\n\treturn A / 2.;\n}\n\n//角度足し算\ndouble add_rad(double a,double b){\n\tdouble ret = a + b;\n\tif(ret > PI)ret -= 2 * PI;\n\treturn ret;\n}\n\n//なす角(vector)\ndouble angle(const point &a,const point &b) {\n\tauto tmp = abs(arg(a) - arg(b));\n\treturn min(tmp, 2 * PI - tmp);\n}\n\ndouble angle(const segment &s1,const segment &s2) {\n\treturn angle(s1[1] - s1[0], s2[1] - s2[0]);\n}\n\n//点の回転\npoint rotate(const point &p, double rad) {\n\tdouble X = p.real() * cos(rad) - p.imag() * sin(rad);\n\tdouble Y = p.imag() * cos(rad) + p.real() * sin(rad);\n\treturn point(X, Y);\n}\n\n//並行\nbool isParallel(const point &a, const point &b){\n    return abs(cross(a,b)) < EPS;\n}\nbool isParallel(const segment &a, const segment &b){\n    return isParallel(a[1]-a[0], b[1]-b[0]);\n}\n\nint main() {\n\tint q;cin >> q;\n\tREP(i,q){\n\t\tint a,b,c,d;cin >> a >> b >> c >> d;\n\t\tsegment A = segment(point(a,b),point(c,d));\n\t\tcin >> a >> b >> c >> d;\n\t\tsegment B = segment(point(a,b),point(c,d));\n\t\tif(isParallel(A,B)){\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse if(abs(angle(A,B) - PI / 2) < EPS){\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse{\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\t\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef DEBUG_MODE\n#define DBG(n) n;\n#else\n#define DBG(n) ;\n#endif\n#define REP(i,n) for(ll (i) = (0);(i) < (n);++i)\n#define rep(i,s,g) for(ll (i) = (s);(i) < (g);++i)\n#define rrep(i,s,g) for(ll (i) = (s);i >= (g);--(i))\n#define PB push_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SHOW1d(v,n) {for(int WWW = 0;WWW < (n);WWW++)cerr << v[WWW] << ' ';cerr << endl << endl;}\n#define SHOW2d(v,i,j) {for(int aaa = 0;aaa < i;aaa++){for(int bbb = 0;bbb < j;bbb++)cerr << v[aaa][bbb] << ' ';cerr << endl;}cerr << endl;}\n#define ALL(v) v.begin(),v.end()\n#define Decimal fixed<<setprecision(20)\n#define INF 1000000000\n#define LLINF 1000000000000000000LL\n#define MOD 1000000007\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\n\nconst double EPS = 1e-12;\nconst double PI = acos(-1.0);\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n\t\n\tbool operator == (const point& a,const point& b) {\n\t\treturn (abs(a.real() - b.real()) < EPS && abs(a.imag() - b.imag()) < EPS);\n\t}\n}\nstruct circle {\n\tpoint p; double r;\n\tcircle(){}\n\tcircle(const point &p, double r) : p(p), r(r) { }\n};\nstruct segment : public vector<point> {\n\tsegment(const point &a, const point &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\n\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\n\n/*\na → b で時計方向に折れて b → c\na → b で半時計方向に折れて b → c\na → b で逆を向いて a を通り越して b → c\na → b でそのまま b → c\na → b で逆を向いて b → c ( または b == c )\n*/\n\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;       // counter clockwise\n\tif (cross(b, c) < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const segment &l, const segment &m) {\n\treturn abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n\t\tabs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const segment &l, const segment &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])*       // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const segment &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSP(const segment &s, const point &p) {\n\treturn abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; // triangle inequality\n}\n//端点の交差も考える\nbool intersectSS(const segment &s, const segment &t) {\n\tif(intersectSP(s,t[0]) || intersectSP(s,t[1]) || intersectSP(t,s[0]) || intersectSP(t,s[1]))return true;\n\treturn ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) <= 0;\n}\n\npoint projection(const segment &l, const point &p) {\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + t*(l[0] - l[1]);\n}\npoint reflection(const segment &l, const point &p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\ndouble distanceLP(const segment &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const segment &l, const segment &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const segment &l, const segment &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const segment &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const segment &s, const segment &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const point &a,const point &b){\n\treturn abs(a-b);\n}\n\n//交点\npoint crosspoint(const segment &l, const segment &m) {\n\tif(!intersectSS(l,m))return point(INF,INF);\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return point(INF,INF); // same line\n\tif (abs(A) < EPS) return point(INF,INF); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n/*多角形内包判定\nOUT:0\nON:1\nIN:2\n*/\n#define curr(PP, i) PP[i]\n#define next(PP, i) PP[(i+1)%PP.size()]\nint contains(const vector<point>& Poly, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < Poly.size(); ++i) {\n\t\tpoint a = curr(Poly, i) - p, b = next(Poly, i) - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) <= 0 && 0 < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n//見えるか(可視グラフ用) \nbool block_off(const point &a, const point &b, const vector<point> &obj) {\n  point m = (a+b)/2.0;\n  bool on = false, in = false;\n  for (int j = 0; j < obj.size(); ++j) {\n    point c = curr(obj,j), d = next(obj,j);\n    if (imag(d) < imag(c)) swap(c, d);\n    if (cross(a-c,b-c) * cross(a-d,b-d) < 0 &&    // strictly intersect.\n        cross(c-a,d-a) * cross(c-b,d-b) < 0) return true;\n    if (cross(a-c,b-c) == 0 && dot(a-c,b-c) < 0) return true;\n    if (imag(c) <= imag(m) && imag(m) < imag(d))  // strictly contain.\n      if (cross(c-m,d-m) < 0) in = !in;\n    if (cross(c-m,d-m) == 0 && dot(c-m,d-m) <= 0) on = true;\n  }\n  return !on && in;\n}\n\n//面積\ndouble area(const vector<point>& p) {\n\tdouble A = 0;\n\tfor (int i = 0; i < p.size(); ++i)\n\t\tA += cross(curr(p, i), next(p, i));\n\treturn A / 2.;\n}\n\n//角度足し算\ndouble add_rad(double a,double b){\n\tdouble ret = a + b;\n\tif(ret > PI)ret -= 2 * PI;\n\treturn ret;\n}\n\n//なす角(vector)\ndouble angle(const point &a,const point &b) {\n\tauto tmp = abs(arg(a) - arg(b));\n\treturn min(tmp, 2 * PI - tmp);\n}\n\ndouble angle(const segment &s1,const segment &s2) {\n\treturn angle(s1[1] - s1[0], s2[1] - s2[0]);\n}\n\n//点の回転\npoint rotate(const point &p, double rad) {\n\tdouble X = p.real() * cos(rad) - p.imag() * sin(rad);\n\tdouble Y = p.imag() * cos(rad) + p.real() * sin(rad);\n\treturn point(X, Y);\n}\n\n//並行\nbool isParallel(const point &a, const point &b){\n    return abs(cross(a,b)) < EPS;\n}\nbool isParallel(const segment &a, const segment &b){\n    return isParallel(a[1]-a[0], b[1]-b[0]);\n}\n//直行\nbool isOrthogonal(const point &a,const point &b){\n\treturn abs(angle(a,b) - PI / 2) < EPS;\n}\nbool isOrthogonal(const segment &a,const segment &b){\n\treturn isOrthogonal(a[1]-a[0],b[1]-b[0]);\n}\nint main() {\n\tint q;cin >> q;\n\tREP(i,q){\n\t\tint a,b,c,d;cin >> a >> b >> c >> d;\n\t\tsegment A = segment(point(a,b),point(c,d));\n\t\tcin >> a >> b >> c >> d;\n\t\tsegment B = segment(point(a,b),point(c,d));\n\t\tif(isParallel(A,B)){\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse if(isOrthogonal(A,B)){\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse{\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\t\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tlong double x0, y0, x1, y1, x2, y2, x3, y3; cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tlong double vec1_x = x1 - x0, vec1_y = y1 - y0, vec2_x = x3 - x2, vec2_y = y3 - y2;\n\t\tlong double cos_val = (vec1_x*vec2_x + vec1_y*vec2_y) / (hypot(vec1_x, vec1_y)*hypot(vec2_x, vec2_y));\n\t\tif (cos_val == 0) { cout << \"1\" << endl; continue; }\n\t\tif (cos_val == 1 || cos_val == -1) { cout << \"2\" << endl; continue; }\n\t\tcout << \"0\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#include<vector>\n#include<iomanip>\n\nusing namespace std;\n\ntypedef complex<double> P;\n\n#define EPS 1e-9\n#define shosu(x) fixed<<setprecision(x)\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n  L(){;}\n};\nstruct C{\n  P c;double r;\n  C(const P &c,double r):c(c),r(r){}\n};\n\nnamespace std{//演算子の定義\n  bool operator < (const P& a,const P& b){\n    return real(a)!= real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b)\n  }\n  bool operator == (const P& a,const P& b){\n    return a.real()==b.real() && a.imag()==b.imag();\n  }\n}\n\ndouble dot(P a,P b){\n  return real(conj(a)*b);\n}\n\ndouble cross(P a,P b){\n  return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c) {//3点の関係性\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;                               // a--c--b on line\n}\n\nP projection(L l, P p){//pの直線l上の射影の点\n  double t=dot(p-l[0],l[0]-l[1])/norm(l[0]-l[1]);\n  return l[0]+t*(l[0]-l[1]);\n}\n\nP reflection(L l, P p){//点pの直線lに関して対称な点\n  return p+2.0*(projection(l,p)-p);\n}\n\nbool isOrthogonal(L l1, L l2){//2直線の直交判定\n  return fabs(dot(l1[1]-l1[0],l2[1]-l2[0])) < EPS;\n}\n\nbool isParallel(L l1, L l2){//2直線の平行判定\n  return fabs(cross(l1[1]-l1[0],l2[1]-l2[0])) < EPS;\n}\n\nP inP(){\n  double x,y;\n  cin >> x >> y;\n  P p(x,y);\n  return p;\n}\n\nL inL(){\n  P p1=inP();\n  P p2=inP();\n  L l(p1,p2);\n  return l;\n}\n\nint main(){\n\n  int q;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    L l1,l2;\n    l1=inL();\n    l2=inL();\n    /*\n    L l1=inL();\n    L l2=inL();\n    */\n    if(isOrthogonal(l1,l2)){\n      cout<<1<<endl;\n    }else if(isParallel(l1,l2)){\n      cout<<2<<endl;\n    }else{\n      cout<<0<<endl;\n    }\n  }\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <complex>\n#include <cmath>\n\nusing namespace std;\n\nstatic const double EPS=1e-12;\nstatic const double INF=1e24;\n\nusing Point=complex<double>;\nusing Plane=vector<Point>;\n\nbool operator<(const Point &a, const Point &b) {\n    return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b);\n}\n\ndouble cross_prod(const Point &a, const Point &b) {\n    return imag(conj(a)*b);\n}\n\ndouble dot_prod(const Point &a, const Point &b) {\n    return real(conj(a)*b);\n}\n\nstruct Line: public pair<Point, Point> {\n    Line() {}\n    Line(const Point &a, const Point &b) {\n        first = a;\n        second = b;\n    }\n};\n\nenum {\n    CROSSES,\n    ORTHOGONAL,\n    PARALLEL,\n};\n\nint rel_lines(const Line &l, const Line &m) {\n    if (abs(dot_prod(l.second-l.first, m.second-m.first)) < EPS) {\n        return ORTHOGONAL;\n    } else if (abs(cross_prod(l.second-l.first, m.second-m.first)) < EPS) {\n        return PARALLEL;\n    } else {\n        return CROSSES;\n    }\n}\n\nint main() {\n    size_t q;\n    scanf(\"%zu\", &q);\n    for (size_t i=0; i<q; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        Point p0(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p1(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p2(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p3(x, y);\n\n        Line l(p0, p1), m(p2, p3);\n        printf(\"%d\\n\", rel_lines(l, m));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <iomanip>\n\nusing namespace std;\n\n// 実数\nusing Real = double;\n// 点\nusing Point = complex<Real>;\nconst Real EPS = 1e-8, PI = acos(-1);\n\n// 実数同士の比較\ninline bool eq(Real a, Real b) { return fabs(b - a) < EPS; }\n\nPoint operator*(const Point& p, const Real& d) {\n    return Point(real(p) * d, imag(p) * d);\n}\n\n// 点の入力\nistream& operator>>(istream& is, Point& p) {\n    Real a, b;\n    is >> a >> b;\n    p = Point(a, b);\n    return is;\n}\n\n//// 点の出力\n//ostream &operator<<(ostream &os, Point &p) {\n//  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n//}\n\n// 点 p を反時計回りに theta 回転\nPoint rotate(Real theta, const Point& p) {\n    return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n// ラジアンを度数に変換\nReal radian_to_degree(Real r) {\n    return (r * 180.0 / PI);\n}\n\n// 度数をラジアンに変換\nReal degree_to_radian(Real d) {\n    return (d * PI / 180.0);\n}\n\n// a-b-c の角度のうち小さい方を返す\nReal get_angle(const Point& a, const Point& b, const Point& c) {\n    const Point v(b - a), w(c - a);\n    Real alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n    if (alpha > beta) swap(alpha, beta);\n    Real theta = (beta - alpha);\n    return min(theta, 2 * acos(-1) - theta);\n}\n\n// ソート x座標が小さい順に並べる x座標が同じならy座標が小さい順\nnamespace std {\n    bool operator<(const Point& a, const Point& b) {\n        return !eq(a.real(), b.real()) ? a.real() < b.real() : a.imag() < b.imag();\n    }\n}\n\n// 2点を通る直線\nstruct Line {\n    Point a, b;\n\n    Line() = default;\n\n    Line(Point a, Point b) : a(a), b(b) {}\n\n    Line(Real A, Real B, Real C) // Ax + By = C\n    {\n        if (eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n        else a = Point(0, C / B), b = Point(C / A, 0);\n    }\n\n    friend ostream& operator<<(ostream& os, Line& p) {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream& operator>>(istream& is, Line& a) {\n        return is >> a.a >> a.b;\n    }\n};\n\n// 2点を結ぶ線分\nstruct Segment : Line {\n    Segment() = default;\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\n\n// 円\nstruct Circle {\n    // 中心\n    Point p;\n    // 半径\n    Real r;\n\n    Circle() = default;\n\n    Circle(Point p, Real r) : p(p), r(r) {}\n};\n\n// 点集合\nusing Points = vector< Point >;\n// ポリゴン 反時計回り\nusing Polygon = vector< Point >;   // 注意!! 凸多角形は反時計回りに与える.(保証されない場合は面積が負なら reverse をかける)\n// 線分集合\nusing Segments = vector< Segment >;\n// 直線集合\nusing Lines = vector< Line >;\n// 円集合\nusing Circles = vector< Circle >;\n\n// 外積\nReal cross(const Point& a, const Point& b) {\n    return real(a) * imag(b) - imag(a) * real(b);\n}\n\n// 内積\nReal dot(const Point& a, const Point& b) {\n    return real(a) * real(b) + imag(a) * imag(b);\n}\n\n\nint main() {\n\n    int q;\n    cin >> q;\n    vector<int> ans(q);\n\n    for (int i = 0; i < q; ++i) {\n        Point p0, p1, p2, p3;\n        cin >> p0 >> p1 >> p2 >> p3;\n\n        Point p4 = p3 + (p0 - p2);\n\n        Real d = dot(p4 - p0, p1 - p0);\n\n        if (abs(d) < EPS) ans[i] = 1;\n        else {\n            double c = cross(p4 - p0, p1 - p0);\n            if (abs(c) < EPS) ans[i] = 2;\n            else ans[i] = 0;\n        }\n    }\n\n    for (int i = 0; i < q; ++i) cout << ans[i] << endl;\n\n}\n"
  },
  {
    "language": "C++",
    "code": "//#define _GLIBCXX_DEBUG\n#include <bits/stdc++.h>\n#define rep(i, n) for(int i=0; i<n; ++i)\nusing namespace std;\n\nconst double EPS = 1e-10;\ndouble add(double a, double b) {\n    if(abs(a+b) < EPS*(abs(a)+abs(b))) return 0;\n    return a+b;\n}\nstruct Vector {\n    double x, y;\n    Vector() {}\n    Vector(double x, double y):x(x), y(y) {}\n    Vector operator+(Vector v) {return Vector(add(x, v.x), add(y, v.y));}\n    Vector operator-(Vector v) {return Vector(add(x, -v.x), add(y, -v.y));}\n    Vector operator*(double d) {return Vector(x*d, y*d);}\n    Vector operator/(double d) {return Vector(x/d, y/d);}\n    double dot(Vector v) {return add(x*v.x, y*v.y);}\n    double cross(Vector v) {return add(x*v.y, -y*v.x);}\n};\nistream &operator>>(istream &is, Vector &v) {return is >> v.x >> v.y;}\nostream &operator<<(ostream &os, const Vector &v) {return os << v.x << ' ' << v.y;}\ndouble sqdist(Vector &v, const Vector &u) {return (v-u).dot(v-u);}\n//線分v2-v1上にあるか\nbool on_seg(Vector &v1,Vector &v2, const Vector &p) {\n    return (v1-p).cross(v2-p) == 0 && (v1-p).dot(v2-p) <= 0;\n}\n//v1-v2とu1-u2の交点\nVector intersection(Vector &v1,Vector &v2,Vector &u1,Vector &u2) {\n    assert((v1-v2).cross(u1-u2)); //2直線が平行だとだめ\n    return v1 + (v2-v1)*((u2-u1).cross(u1-v1)/(u2-u1).cross(u2-v1));\n}\n//p2-p1へのQの投影\nVector projection(Vector &p1,Vector &p2,Vector &Q) {\n    return p1+(p2-p1)*(Q-p1).dot(p2-p1)/sqdist(p1, p2);\n}\n//p1-p2を軸としたQの線対称移動\nVector reflection(Vector &p1,Vector &p2,Vector &Q) {\n    return projection(p1, p2, Q)*2-Q;\n}\nbool cmp_x(const Vector &v, const Vector &u) {\n    if(v.x != u.x) return v.x < u.x;\n    return v.y < u.y;\n}\n//頂点数nの頂点集合vv\nvector<Vector> convex_hull(vector<Vector> &vv, int n) {\n    sort(vv.begin(), vv.end(), cmp_x);\n    int k = 0;\n    vector<Vector> res(n*2);\n    for(int i = 0; i < n; i++) {\n        while(k > 1 && (res[k-1]-res[k-2]).cross(vv[i]-res[k-1]) <= 0) k--;\n        res[k++] = vv[i];\n    }\n    for(int i = n-2, t = k; i >= 0; i--) {\n        while(k > t && (res[k-1]-res[k-2]).cross(vv[i]-res[k-1]) <= 0) k--;\n        res[k++] = vv[i];\n    }\n    res.resize(k-1);\n    return res;\n}\n\nsigned main() {\n    Vector p0, p1, p2, p3;\n    int q;\n    cin >> q;\n    while(q--) {\n        cin >> p0 >> p1 >> p2 >> p3;\n        if((p0-p1).dot(p2-p3) == 0) {\n            cout << 1 << endl;\n        } else if((p0-p1).cross(p2-p3) == 0) {\n            cout << 2 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n    }\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<cstdio>\n#include<iostream>\nusing namespace std;\ntypedef long long ll;\nll read()\n{\n\tll x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nconst double eps=1e-13;\nbool equals(double x,double y){return fabs(x-y)<eps;}\nstruct Point{double x,y;};\nPoint operator -(Point a,Point b){return (Point){a.x-b.x,a.y-b.y};}\ndouble cross(Point a,Point b){return a.x*b.y-a.y*b.x;}\ndouble dot(Point a,Point b){return a.x*b.x+a.y*b.y;}\nvoid read(Point &a){a.x=read(),a.y=read();}\nbool Parllel(Point p0,Point p1,Point p2,Point p3)\n{\n\tPoint v1=p1-p0,v2=p3-p2;\n\treturn equals(cross(v1,v2),0);\n}\nbool Orthogonal(Point p0,Point p1,Point p2,Point p3)\n{\n\tPoint v1=p1-p0,v2=p3-p2;\n\treturn equals(dot(v1,v2),0);\n}\nint main()\n{\n\tint q=read();while(q--)\n\t{\n\t\tPoint p0,p1,p2,p3;\n\t\tread(p0),read(p1),read(p2),read(p3);\n\t\tif(Parllel(p0,p1,p2,p3)){printf(\"2\\n\");continue;}\n\t\tif(Orthogonal(p0,p1,p2,p3)){printf(\"1\\n\");continue;}\n\t\tprintf(\"0\\n\");\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long lint;\ntypedef long double louble;\n\ntemplate<typename T1,typename T2> inline T1 max(T1 a,T2 b){return a<b?b:a;}\ntemplate<typename T1,typename T2> inline T1 min(T1 a,T2 b){return a<b?a:b;}\n\nnamespace ae86\n{\n\tconst int bufl = 1<<15;\n\n\tchar buf[bufl],*s=buf,*t=buf;\n\n\tinline int fetch()\n\t{\n\t\tif(s==t){t=(s=buf)+fread(buf,1,bufl,stdin);if(s==t)return EOF;}\n\t\treturn *s++;\n\t}\n\n\tinline int ty()\n\t{\n\t\tint a=0,b=1,c=fetch();\n\t\twhile(!isdigit(c))b^=c=='-',c=fetch();\n\t\twhile(isdigit(c))a=a*10+c-48,c=fetch();\n\t\treturn b?a:-a;\n\t}\n}\nusing ae86::ty;\n\nconst double eps = 1e-11;\n\ninline int dcmp(double x){if(-eps<x && x<eps)return 0;return x>0?1:-1;}\n\nstruct points\n{\n\tdouble x,y;\n\tpoints(double _x=0,double _y=0){x=_x,y=_y;}\n\n\tinline friend points operator + (points a,points b){return points(a.x+b.x,a.y+b.y);}\n\tinline friend points operator - (points a,points b){return points(a.x-b.x,a.y-b.y);}\n\tinline friend points operator * (points a,double b){return points(a.x*b,a.y*b);}\n\tinline friend points operator / (points a,double b){return points(a.x/b,a.y/b);}\n\n\tinline friend int operator == (points a,points b){return dcmp(a.x-b.x)==0 && dcmp(a.y-b.y)==0;}\n\n\tvoid takein(){x=ty(),y=ty();}\n\tvoid print(char ends='\\n'){printf(\"%.12lf %.12lf\",x,y),putchar(ends);}\n};\n\ninline double dox(points a,points b){return a.x*b.x+a.y*b.y;}\ninline double cox(points a,points b){return a.x*b.y-a.y*b.x;}\ninline double length(points a){return sqrt(dox(a,a));}\n\ninline points pervec(points a){if(dcmp(length(a))<=0)return points(0,0);return a/length(a);}\n\nvoid finder()\n{\n\tpoints al,ar,bl,br;\n\tal.takein(),ar.takein(),bl.takein(),br.takein();\n\n\tpoints a=ar-al,b=br-bl;\n\tdouble cx=cox(a,b),dx=dox(a,b);\n\t\n\tif(dcmp(cx)==0)puts(\"2\");\n\telse if(dcmp(dx)==0)puts(\"1\");\n\telse puts(\"0\");\n}\n\nint main()\n{\n\tint q=ty();\n\twhile(q--)finder();\n\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i=0;i<n;++i)\ntypedef complex<double> Point;\n#define X real()\n#define Y imag()\nconst double EPS = 1e-9;\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n\ndouble dot(Point a, Point b) {\n\treturn a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(Point a, Point b) {\n\treturn a.X*b.Y - a.Y*b.X;\n}\n\nint crossform(Point p0,Point p1,Point p2,Point p3){\n\tif(EQ(cross(p0-p1,p2-p3),0))return 2; //Parallel\n\tif(EQ(dot(p0-p1,p2-p3),0))return 1; //Orthogonal\n\treturn 0;\n}\n\nint main(void){\n\tint q;\n\tcin>>q;\n\trep(i,q){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tcout<<crossform({x0,y0},{x1,y1},{x2,y2},{x3,y3})<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long int ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<pair<int, int> > vii;\n#define rrep(i, m, n) for(int (i)=(m); (i)<(n);  (i)++)\n#define erep(i, m, n) for(int (i)=(m); (i)<=(n); (i)++)\n#define  rep(i, n)    for(int (i)=0; (i)<(n);  (i)++)\n#define rrev(i, m, n) for(int (i)=(n)-1; (i)>=(m); (i)--)\n#define erev(i, m, n) for(int (i)=(n); (i)>=(m); (i)--)\n#define  rev(i, n)    for(int (i)=(n)-1; (i)>=0; (i)--)\n#define vrep(i, c)    for(__typeof((c).begin())i=(c).begin(); i!=(c).end(); i++)\n#define  ALL(v)       (v).begin(), (v).end()\n#define mp            make_pair\n#define pb            push_back\ntemplate<class T, class S> inline bool minup(T& m, S x){ return m>(T)x ? (m=(T)x, true) : false; }\ntemplate<class T, class S> inline bool maxup(T& m, S x){ return m<(T)x ? (m=(T)x, true) : false; }\n\nconst int    INF = 1000000000;\nconst ll     MOD = 1000000007LL;\nconst double EPS = 1E-12;\n\nstruct Point : public complex<double>\n{\npublic:\n  Point() { this->real(0);  this->imag(0); }\n  Point(const double& x, const double& y) { this->real(x);  this->imag(y); }\n  Point(const complex<double> w)  { this->real(w.real());  this->imag(w.imag()); }\n  inline double dot(Point p){ return (conj(*this) * p).real(); }  // ??????\n  inline double det(Point p){ return (conj(*this) * p).imag(); }  // ??????\n};\n\nnamespace std\n{\n  inline bool operator < (const Point& a, const Point& b)\n  {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\ntypedef vector<Point> Polygon;\ninline Point currPoint(vector<Point> P, int i){ return P[i]; }\ninline Point nextPoint(vector<Point> P, int i){ return P[(i+1)%P.size()]; }\ninline Point diffPoint(vector<Point> P, int i){ return nextPoint(P, i) - currPoint(P, i); }\n\n\nstruct Line : public vector<Point>\n{\npublic:\n  Line(const Point P, const Point Q){ this->pb(P);  this->pb(Q); }\n};\n\ntemplate<typename T> T add(T x, T y){ if(abs(x+y) < EPS*(abs(x)+abs(y))) return 0; return x + y; }\ntemplate<typename T> inline bool semieq(T x, T y){ return abs(x - y) < EPS; }\ntemplate<typename T> inline bool semige(T x, T y){ return y - x < -EPS; }\ntemplate<typename T> inline bool semile(T x, T y){ return x - y < -EPS; }\n\n\ndouble x[2], y[2];\nint q;\n\nint main()\n{\n  cin >> q;\n\n  while(q--){\n    cin >> x[0] >> y[0] >> x[1] >> y[1];  Point AB = Point(x[1], y[1]) - Point(x[0], y[0]);\n    cin >> x[0] >> y[0] >> x[1] >> y[1];  Point CD = Point(x[1], y[1]) - Point(x[0], y[0]);\n\n    if(semieq(AB.det(CD), 0.0)){ cout << 2 << endl;  continue; }\n    if(semieq(AB.dot(CD), 0.0)){ cout << 1 << endl;  continue; }\n    cout << 0 << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    int q;\n    int i;\n    int xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3;\n    double a_s1;\n    double a_s2;\n    int int_a_s11;\n    int int_a_s21;\n    int int_a_s12;\n    int int_a_s22;\n    int ans;\n    int ans_flg1;\n    int ans_flg2;\n\n    cin >> q;\n    for ( i = 0; i < q; ++i){\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n\n        ans_flg1 = 0;\n        ans_flg2 = 0;\n        if (xp1 == xp0){\n            a_s1 = xp1;\n            ans_flg1 = 1;\n        }else if (yp1 == yp0){\n            a_s1 = yp1;\n            ans_flg1 = 2;\n        }else{\n            a_s1 = (yp1 - yp0) / (xp1-xp0);\n        }\n        \n        if (xp3 == xp2){\n            a_s2 = xp3;\n            ans_flg2 = 1;\n        }else if (yp3 == yp2){\n            a_s2 = yp3;\n            ans_flg2 = 2;\n        }else{\n            a_s2 = (yp3 - yp2) / (xp3-xp2);\n        }\n        \n        ans = 0;\n        if (a_s1 == xp1 && a_s2 == xp3 && ans_flg1 == 1 && ans_flg2 == 1){\n            ans = 2;\n        }else if(a_s1 == yp1 && a_s2 == yp3 && ans_flg1 == 2 && ans_flg2 == 2){\n            ans = 2;\n        }else if(a_s1 == xp1 && a_s2 == yp3 && ans_flg1 == 1 && ans_flg2 == 2){\n            ans = 1;\n        }else if(a_s1 == yp1 && a_s2 == xp3 && ans_flg1 == 2 && ans_flg2 == 1){\n            ans = 1;\n        }else{\n            int_a_s11 = a_s1 * 1000;\n            int_a_s21 = a_s2 * 1000;\n            int_a_s21 = 1 /a_s2 * 1000;\n            if (int_a_s11 == int_a_s21){\n                ans = 2;\n            }else if(int_a_s11 == int_a_s22){\n                ans = 1;\n            }\n        }\n        \n        printf(\"%d\\n\",ans);\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\nconst double eps=1e-9;\ndouble ABS(double n){return n>=0?n:-n;}\nbool same(double a,double b){return ABS(a-b)<eps;}\nstruct point{\n\tdouble x;\n\tdouble y;\n\tpoint(){}\n\tpoint(double a,double b){x=a;y=b;}\n\tpoint operator +(const point &a){return point(x+a.x,y+a.y);}\n\tpoint operator -(const point &a){return point(x-a.x,y-a.y);}\n\tpoint operator *(const double &a){return point(x*a,y*a);}\n\tpoint operator /(const double &a){return point(x/a,y/a);}\n\tvoid operator =(const point &a){x=a.x;y=a.y;}\n\tvoid operator +=(const point &a){x+=a.x;y+=a.y;}\n\tvoid operator -=(const point &a){x-=a.x;y-=a.y;}\n\tvoid operator *=(const double &a){x*=a;y*=a;}\n\tvoid operator /=(const double &a){x/=a;y/=a;}\n\tbool operator <(const point &a){return x<a.x||(same(x,a.x)&&y<a.y);}\n\tbool operator ==(const point &a){return same(x,a.x)&&same(y,a.y);}\n\tdouble length(){return sqrt(x*x+y*y);}\n\tvoid in(){scanf(\"%lf%lf\",&x,&y);}\n\tvoid out(){printf(\"%.20lf %.20lf\\n\",x,y);}\n};\nstruct segment{\n\tpoint a;\n\tpoint b;\n\tsegment(){}\n\tsegment(point x,point y){a=x;b=y;}\n};\nstruct line{\n\tdouble A;\n\tdouble B;\n\tdouble C;\n\tline(){}\n\tline(double a,double b,double c){A=a;B=b;C=c;}\n\tline(point a,point b){\n\t\tA=a.y-b.y;\n\t\tB=b.x-a.x;\n\t\tC=A*a.x+B*a.y;\n\t}\n\tline(double a,double b,point p){\n\t\tA=a;\n\t\tB=b;\n\t\tC=A*p.x+B*p.y;\n\t}\n\tline(segment s){\n\t\tA=s.a.y-s.b.y;\n\t\tB=s.b.x-s.a.x;\n\t\tC=A*s.a.x+B*s.a.y;\n\t}\n};\ndouble dist(point a,point b){return (a-b).length();}\ndouble dot(point a,point b){return a.x*b.x+a.y*b.y;}\ndouble cross(point a,point b){return a.x*b.y-b.x*a.y;}\n//angle only returns positive value\ndouble angle(point a,point b){return acos(dot(a,b)/(a.length()*b.length()));}\ndouble area(point a,point b,point c){return ABS(cross(b-a,c-a));}\ndouble distancetoline(point a,line b){return (b.A*a.x+b.B*a.y-b.C)/sqrt(b.A*b.A+b.B*b.B);}\nbool parallel(line a,line b){return same(a.A*b.B,b.A*a.B);}\nbool vertical(line a,line b){return ABS(a.A*b.A+a.B*b.B)<=eps;}\npoint intersect(line a,line b){\n\tdouble x,y,det;\n\tx=(a.C*b.B-b.C*a.B);\n\ty=(a.A*b.C-b.A*a.C);\n\tdet=(a.A*b.B-b.A*a.B);\n\treturn point(x,y)/det;\n}\n/*\nbool intersect(segment a,segment b){}\npoint intersect(segment a,segment b){}\n*/\npoint projection(point a,line b){return intersect(line(b.B,-b.A,a),b);}\npoint reflection(point a,line b){return projection(a,b)*2-a;}\nbool online(point p,line l){return ABS(l.A*p.x+l.B*p.y-l.C)<eps;}\nbool between(point a,point b,point c){\n\tif((a.x-b.x<=eps&&b.x-c.x<=eps)||(eps>=b.x-a.x&&eps>=c.x-b.x))\n\tif((a.y-b.y<=eps&&b.y-c.y<=eps)||(eps>=b.y-a.y&&eps>=c.y-b.y))\n\treturn true;\n\treturn false;\n}\nbool onseg(point p,segment s){return online(p,line(s))&&between(s.a,p,s.b);}\nvoid solve(){\n\tline a,b;\n\tpoint x,y;\n\tx.in();\n\ty.in();\n\ta=line(x,y);\n\tx.in();\n\ty.in();\n\tb=line(x,y);\n\tif(parallel(a,b))printf(\"2\\n\");\n\telse if(vertical(a,b))printf(\"1\\n\");\n\telse printf(\"0\\n\");\n\treturn ;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--)solve();\n}\n"
  },
  {
    "language": "C++",
    "code": "// #include <iostream>\n// #include <cstring>\n// #include <cstdlib>\n// #include <cmath>\n// #include <algorithm>\n// #include <functional>\n// #include <vector>\n// #include <queue>\n// #include <deque>\n// #include <stack>\n// #include <map>\n// #include <set>\n// #include <bitset>\n// #include <tuple>\n// #include <cassert>\n// #include <exception>\n// using namespace std;\n// typedef long long ll;\n// typedef unsigned long long ull;\n// typedef pair<ll,ll> P;\n// typedef vector<int> vi;\n// typedef vector<ll> vll;\n// typedef vector<string> vs;\n// typedef vector<P> vp;\n// #define rep(i,a,n) for(ll i = (a);i < (n);i++)\n// #define per(i,a,n) for(ll i = (a);i > (n);i--)\n// #define lep(i,a,n) for(ll i = (a);i <= (n);i++)\n// #define pel(i,a,n) for(ll i = (a);i >= (n);i--)\n// #define clr(a,b) memset((a),(b),sizeof(a))\n// #define pb push_back\n// #define mp make_pair\n// #define all(c) (c).begin(),(c).end()\n// #define sz size()\n// #define print(X) cout << (X) << endl\n// const ll INF = 1e+9+7;\n// ll n,m,l;\n// string s,t;\n// ll d[200010],dp[550][550];\n// double w[1000],v[1000];\n// double box[200010];\n\n// int main(){\n// \tcin >> n;\n// \trep(i,0,n)cin >> d[i];\n// \tset<ll> all;\n// \tmap<ll,int> test;\n// \trep(i,0,n)all.insert(d[i]);\n// \tm = all.sz;\n// \tll p,q,sum;\n// \tp = q = sum = 0;\n// \tll res = n;\n// \twhile(1){\n// \t\twhile(p < n && sum < m)if(test[d[p++]]++ == 0)sum++;\n// \t\tif(sum < m)break;\n// \t\tres = min(res,p-q);\n// \t\tif(--test[d[q++]] == 0)sum--;\n// \t}\n// \tprint(res);\n// \treturn 0;\n// }\n\n#include <iostream>\n#include <cmath>\n#include <vector>\n#include <set>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n  double x,y;\n\n  Point(double x = 0,double y = 0): x(x),y(y){}\n  Point operator + (Point p){ return Point(x + p.x , y + p.y); }\n  Point operator - (Point p){ return Point(x - p.x , y - p.y); }\n  Point operator * (double a){ return Point(a * x , a * y); }\n  Point operator / (double a){ return Point(x / a , y / a); }\n\n  double abs(){ return sqrt(norm()); }\n  double norm(){ return x * x + y * y; }\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS);\n  }\n};\ntypedef Point Vector;\n\nstruct Segment{\n  Point p1,p2;\n};\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){\n  return  a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\n\ndouble dot(Vector a,Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1 - a1,b1 - b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2 - s1.p1,s2.p2 - s2.p1) , 0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1 - a2 , b1 - b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2 - s1.p1 , s2.p2 - s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1 , base / norm(base));\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p + (project(s,p) - p) * 2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS)return CLOCKWISE;\n  if(dot(a,b) < -EPS)return ONLINE_BACK;\n  if(a.norm() < b.norm())return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 && \n          ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0);\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2);\n}\n\ndouble getDistance(Vector a,Vector b){\n  return abs(a - b);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2 - l.p1 , p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n  if(dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n             min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base = s2.p2 - s2.p1;\n  double d1 = abs(cross(base,s1.p1 - s2.p1));\n  double d2 = abs(cross(base,s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  // assert(intersect(c,l));\n  Vector pr = project(l,c.c);\n  Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n  double base = sqrt(c.r * c.r - norm(pr - c.c));\n  return make_pair(pr + e * base , pr - e * base);\n}\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r) * a, sin(r) * a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  // assert(intersect(c1,c2));\n  double d = abs(c1.c - c2.c);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r,t + a),c1.c + polar(c1.r,t - a));\n}\n\nint contains(Polygon g,Point p){\n  int n = g.size();\n  bool x = false;\n  for(int i = 0;i < n;i++){\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n    if(a.y < b.y)swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS)x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size() < 3)return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n\n  l.push_back(s[s.size() - 1]);\n  l.push_back(s[s.size() - 2]);\n\n  for(int i = 2;i < s.size();i++){\n    for(int n = u.size();n >= 2 && ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n\n  for(int i = s.size() - 3; i >= 0;i--){\n    for(int n = l.size();n >= 2 && ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i = u.size() - 2;i >= 1;i--)l.push_back(u[i]);\n  return l;\n}\n\n#define BOTTOM 0\n#define LEFT 1\n#define RIGHT 2\n#define TOP 3\n\nclass EndPoint{\npublic:\n  Point p;\n  int seg,st;\n  EndPoint(){}\n  EndPoint(Point p,int seg,int st): p(p),seg(seg),st(st){}\n\n  bool operator < (const EndPoint &ep) const{\n    if(p.y == ep.p.y){\n      return st < ep.st;\n    }else{\n      return p.y < ep.p.y;\n    }\n  }\n};\n\nEndPoint EP[2 * 100000];\n\nint manhattanIntersection(vector<Segment> S){\n  int n = S.size();\n  for(int i = 0,k = 0;i < n;i++){\n    if(S[i].p1.y == S[i].p2.y){\n      if(S[i].p1.x > S[i].p2.x)swap(S[i].p1,S[i].p2);\n    }else if(S[i].p1.y > S[i].p2.y){\n      swap(S[i].p1,S[i].p2);\n    }\n\n    if(S[i].p1.y == S[i].p2.y){\n      EP[k++] = EndPoint(S[i].p1,i,LEFT);\n      EP[k++] = EndPoint(S[i].p2,i,RIGHT);\n    }else{\n      EP[k++] = EndPoint(S[i].p1,i,BOTTOM);\n      EP[k++] = EndPoint(S[i].p2,i,TOP);\n    }\n  }\n\n  sort(EP,EP + (2 * n));\n\n  set<int> BT;\n  BT.insert(1000000001);\n  int cnt = 0;\n  for(int i = 0;i < 2 * n;i++){\n    if(EP[i].st == TOP){\n      BT.erase(EP[i].p.x);\n    }else if(EP[i].st == BOTTOM){\n      BT.insert(EP[i].p.x);\n    }else if(EP[i].st == LEFT){\n      set<int>::iterator b = lower_bound(BT.begin(),BT.end(),S[EP[i].seg].p1.x);\n      set<int>::iterator e = upper_bound(BT.begin(),BT.end(),S[EP[i].seg].p2.x);\n      cnt += distance(b,e);\n    }\n  }\n  return cnt;\n}\n\nint main(){\n  int n;\n  cin >> n;\n  for(int i = 0;i < n;i++){\n    Line a,b;\n    cin >> a.p1.x >> a.p1.y;\n    cin >> a.p2.x >> a.p2.y;\n    cin >> b.p1.x >> b.p1.y;\n    cin >> b.p2.x >> b.p2.y;\n    if(isParallel(a,b))puts(\"2\");\n    else if(isOrthogonal(a,b))puts(\"1\");\n    else puts(\"0\");\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\nusing namespace std;\n\nclass Point {\npublic:\n    int x, y;\n    Point(int x = 0, int y = 0) : x(x), y(y) {\n    }\n};\n\nclass Vector {\npublic:\n    int x, y;\n    Vector(int x = 0, int y = 0) : x(x), y(y) {\n    }\n};\n\nbool isParallel( Vector v0, Vector v1 ) {\n    return ( ( v0.x * v1.y - v0.y * v1.x ) == 0 );\n}\n\nbool isOrthogonal( Vector v0, Vector v1 ) {\n    return ( ( v0.x * v1.x + v0.y * v1.y ) == 0 );\n}\n\n\nint q;\n\nint main()\n{\n    Point p0, p1, p2, p3;\n    Vector v0, v1;\n\n    scanf(\"%d\", &q);\n\n    for ( int i = 0; i < q; i++ ) {\n\tscanf(\"%d %d\", &p0.x, &p0.y);\n\tscanf(\"%d %d\", &p1.x, &p1.y);\n\tscanf(\"%d %d\", &p2.x, &p2.y);\n\tscanf(\"%d %d\", &p3.x, &p3.y);\n\n\tv0.x = p0.x - p1.x;\n\tv0.y = p0.y - p1.y;\n\tv1.x = p2.x - p3.x;\n\tv1.y = p2.y - p3.y;\n\n\tif ( isParallel( v0, v1 ) ) printf(\"2\\n\");\n\telse if ( isOrthogonal( v0, v1 ) ) printf(\"1\\n\");\n\telse printf(\"0\\n\");\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p){ return Point(x + p.x, y + p.y); }\n    Point operator - (Point p){ return Point(x - p.x, y - p.y); }\n    Point operator * (Point p){ return Point(x * p.x, y * p.y); }\n    Point operator / (Point p){ return Point(x / p.x, y / p.y); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n};\n\ndouble cross(Vector a, Vector b) {\n    return a.x*b.y - a.y*b.x;\n};\n\nbool isOtrhgonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n};\n\nbool isParellel(Vector a, Vector b) {\n    return equals(cross(a,b), 0.0);\n};\n\nint main() {\n    int n, x0, x1, x2, x3, y0, y1, y2, y3;\n    Line l1, l2;\n    scanf(\"%d\", &n);\n\n    for (int i=0; i<n; i++) {\n        scanf(\"%d %d %d %d %d %d %d %d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n        l1.p1.x = x0, l1.p1.y = y0;\n        l1.p2.x = x1, l1.p2.y = y1;\n        l2.p1.x = x2, l2.p1.y = y2;\n        l2.p2.x = x3, l2.p2.y = y3;\n        if (isParellel(l1.p1-l1.p2, l2.p1-l2.p2)) printf(\"2\\n\");\n        else if (isOtrhgonal(l1.p1-l1.p2, l2.p1-l2.p2)) printf(\"1\\n\");\n        else printf(\"0\\n\");\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n \nconst double EPS = 1e-8, PI = acos(-1);\ninline bool eq(double a,double b){ return abs(b - a) < EPS; }\n#define curr(P,i) P[i]\n#define next(P,i) P[(i+1)%P.size()]\n#define prev(P,i) P[(i+P.size()-1) % P.size()]\nenum { OUT, ON, IN };\n \nstruct Geometory { // Geometory Library\n  struct Point {\n    double x, y;\n    Point(){};\n    Point(double x,double y):x(x),y(y){};\n    Point operator+(const Point& b) const { return Point(x + b.x,y + b.y); }\n    Point operator-(const Point& b) const { return Point(x - b.x,y - b.y); }\n    Point operator*(const double b) const { return Point(x * b,y * b); }\n    Point operator*(const Point& b) const { return Point(x * b.x - y * b.y,x * b.y + y * b.x); }\n    Point operator/(const double b) const { return Point(x / b,y / b); }\n    bool operator< (const Point& b) const { return x != b.x ? x < b.x : y < b.y; }\n    bool operator==(const Point& b) const { return eq(x,b.x) && eq(y,b.y); }\n    double norm(){ return x * x + y * y; }\n    double arg(){ return atan2(x,y); }\n    double abs(){ return sqrt(norm()); }\n    Point rotate(double theta){ return Point(cos(theta) * x - sin(theta) * y,sin(theta) * x + cos(theta) * y); }\n    Point rotate90(){ return Point(-y,x); }\n    friend ostream& operator<<(ostream& os, Point& p){ return os<<\"(\"<<p.x<<\",\"<<p.y<<\")\"; }\n    friend istream& operator>>(istream& is, Point& a){ return is>>a.x>>a.y; }\n  };\n \n  struct Line {\n    Point a, b;\n    Line(){};\n    Line(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Line& p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Line& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Segment {\n    Point a, b;\n    Segment(){};\n    Segment(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Segment& p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Segment& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Circle {\n    Point p; double r;\n    Circle(){};\n    Circle(Point p, double r) : p(p),r(r){};\n  };\n  typedef vector< Point > Polygon;\n  typedef vector< Segment > Segments;\n  typedef vector< Line > Lines;\n  typedef vector< Circle > Circles;\n  typedef pair< Point, Point > PointPoint;\n \n  double cross(const Point& a,const Point& b){\n    return a.x * b.y - a.y * b.x;\n  }\n  double dot(const Point& a,const Point& b){\n    return a.x * b.x + a.y * b.y;\n  }\n \n  int ccw(const Point& a,Point b,Point c){\n    b = b - a, c = c - a;\n    if(cross(b,c) > 0)    return +1;  // a → b で 反時計方向におれて c\n    if(cross(b,c) < 0)    return -1; // a → b で 時計方向におれて c\n    if(dot(b,c) < 0)      return +2;  // c -- a -- bで一直線上\n    if(b.norm() < c.norm()) return -2; // a -- b -- cで一直線上\n    return 0;  // a -- c -- bで一直線上\n  }\n  Point Projection(const Line& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Projection(const Segment& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Reflection(const Line& l, const Point& p){\n    return p + (Projection( l, p) - p) * 2.0;\n  }\n \n  double Distance( const Line& l,const Point& p) { //OK\n    return (p - Projection( l, p)).abs();\n  }\n \n  bool Intersect(const Line& l, const Line& m){\n    return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b-l.a, m.b-l.a)) < EPS;\n  }\n  bool Intersect(const Line& l, const Segment& s){\n    return cross( l.b - l.a, s.a - l.a) * cross( l.b - l.a, s.b - l.a) < EPS;\n  }\n  bool Intersect(const Line& l, const Point& p){\n    return abs(ccw(l.a, l.b, p)) != -1;\n  }\n  bool Intersect(const Segment& s, const Segment& t){\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n  }\n  bool Intersect(const Segment& s, const Point& p){\n    return ccw(s.a, s.b, p) == 0;\n  }\n  bool Intersect(const Circle& c,const Line& l){\n    return Distance( l, c.p) <= c.r + EPS;\n  }\n  bool Intersect(const Circle& c,const Point& p){\n    return abs( ( p - c.p).abs() - c.r ) < EPS;\n  }\n  int Intersect(const Circle& c, const Segment& l){\n    if( (Projection( l, c.p) - c.p).norm() - c.r * c.r > EPS) return 0;\n    const double d1 = ( c.p - l.a).abs(), d2 = ( c.p - l.b).abs();\n    if( d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n    if( d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS ) return 1;\n    const Point h = Projection( l, c.p);\n    if( dot( l.a - h, l.b - h) < 0) return 2;\n    return 0;\n  }\n  bool Intersect(const Circle& a,const Circle& b){\n    return ( ( a.p - b.p).norm() - ( a.r + b.r) * ( a.r + b.r) < EPS) &&\n      ( ( a.p - b.p).norm() - ( a.r - b.r) * ( a.r - b.r) > -EPS);\n  }\n  double Distance(const Segment& s,const Point& p){\n    Point r = Projection(s, p);\n    if ( Intersect( s, r)) return ( r - p).abs();\n    return min( ( s.a - p).abs(), ( s.a - p).abs());\n  }\n  double Distance(const Segment& a,const Segment& b){\n    if(Intersect( a, b)) return 0;\n    return min( min( Distance( a, b.a), Distance( a, b.b)), min( Distance( b, a.a), Distance( b, a.b)));\n  }\n  double Distance(const Line& l,const Line& m) {\n    return Intersect( l, m) ? 0 : Distance( l, m.a);\n  }\n  double Distance(const Line& l,const Segment& s) { //OK\n    if (Intersect(l, s)) return 0;\n    return min(Distance(l, s.a), Distance(l, s.b));\n  }\n  double Distance(const Point& a,const Point& b){ //OK\n    return ( a - b).abs();\n  }\n  Point Crosspoint(const Segment& l,const Segment& m) { //OK\n    double A = cross(l.b - l.a, m.b - m.a);\n    double B = cross(l.b - l.a, l.b - m.a);\n    if (abs(A) < EPS && abs(B) < EPS) return m.a; // same line\n    return m.a + (m.b - m.a) * B / A;\n  }\n  PointPoint Crosspoint(const Circle& c,const Line l){\n    Point hp = Projection( l, c.p), h =  hp - c.p;\n    const double d2 = h.norm();\n    Point v = ( l.b - l.a) * sqrt( c.r * c.r - d2) / ( l.b - l.a).abs();\n    return PointPoint(hp - v, hp + v);\n  }\n  PointPoint Crosspoint(const Circle& c,const Segment& l) {\n    Line aa = Line( l.a, l.b);\n    if(Intersect(c, l) == 2) return Crosspoint(c, aa);\n    PointPoint ret = Crosspoint(c, aa);\n    if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n    else ret.first = ret.second;\n    return ret;\n  }\n  PointPoint Crosspoint(const Circle& c1,const Circle& c2){ //OK\n    double d = (c1.p - c2.p).abs();\n    double s = (c1.r + c2.r + d) / 2;\n    double S = sqrt( s * ( s - c1.r) * ( s - c2.r) * ( s - d));\n    double h = 2 * S / d;\n    Point v = ( c2.p - c1.p) / ( c2.p - c1.p).abs();\n    double m = sqrt( c1.r * c1.r - h * h);\n    return PointPoint( c1.p + v * m + Point(0,1) * h * v, c1.p + v * m - Point(0,1) * h * v);\n  }\n  bool parallel(const Line& a,const Line& b){\n    return abs( cross( a.b - a.a, b.b - b.a)) < EPS;\n  }\n  bool parallel(const Segment& a,const Segment& b){\n    return abs( cross( a.b - a.a, b.b - b.a)) < EPS;\n  }\n  bool orthogonal(const Line& a,const Line& b){\n    return dot( a.a - a.b, b.a - b.b) < EPS;\n  }\n  bool orthogonal(const Segment& a,const Segment& b){\n    return dot( a.a - a.b, b.a - b.b) < EPS;\n  }\n  int Contains(const Polygon& Q,const Point& p){\n    bool in = false;\n    for(int i = 0 ; i < Q.size() ; i++ ){\n      Point a = curr(Q,i) - p, b = next(Q,i) - p;\n      if(a.y > b.y) swap(a,b);\n      if(a.y <= 0 && 0 < b.y && cross(a,b) < 0) in = !in;\n      if(cross(a,b) == 0 && dot(a,b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n  }\n  bool Contains(const Circle& c,const Point& p){\n    return ( c.p - p).abs() < c.r + EPS;\n  }\n  double Area2(const Polygon& p){ //OK\n    double A = 0;\n    for (int i = 0; i < p.size(); ++i){\n      A += cross(curr(p, i), next(p, i));\n    }\n    return A;\n  }\n};\n \nGeometory geo;\ntypedef Geometory::Point P;\ntypedef Geometory::Line L;\ntypedef Geometory::Segment S;\ntypedef Geometory::Circle C;\n\nint main(){\n  int q;\n  L s1, s2;\n\n  cin >> q;\n  while(q--){\n    cin >> s1 >> s2;\n    if( geo.parallel( s1, s2)) cout << \"2\" << endl;\n    else if( geo.orthogonal( s1, s2)) cout << \"1\" << endl;\n    else cout << \"0\" << endl;\n  }\n  return(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define eps 1e-9\n\nusing namespace std;\ntypedef double db;\nstruct P{\n    db x, y;\n    P(){}\n    P(db x, db y) : x(x) , y(y) {}\n    P operator - (P a){ return P(x-a.x, y-a.y); }\n    db times(P a){ return x*a.y-y*a.x; }\n    db dot(P a){ return a.x*x + a.y*y; }\n};\ntypedef P V;\nstruct L{ P p, q; };\n\nint sign(db x){ return x<-eps ? -1 : x>eps; }\n\nint PO(L s1, L s2){ //s1垂直与s2输出1，平行输出2，其他输出0\n    V v1 = s1.p-s1.q, v2 = s2.p-s2.q; \n    if( !sign( v1.dot(v2) ) ) return 1;\n    if( !sign( v1.times(v2) ) ) return 2;\n    return 0;\n}\n\nint main(){\n    //freopen(\"owo.in\",\"r\",stdin);\n    L s1, s2;\n    int n;\n    cin >> n;\n    while(n--){\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\", &s1.p.x, &s1.p.y, &s1.q.x, &s1.q.y, &s2.p.x, &s2.p.y, &s2.q.x, &s2.q.y);\n        printf(\"%d\\n\", PO(s1, s2));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<cstdio>\n\nusing namespace std;\n\nint main()\n{\n\tint q;\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble x0, y0, x1, y1, x2, y2, x3, y3;\n\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n\n\t\tdouble l01x = x1 - x0, l01y = y1 - y0, l23x = x3 - x2, l23y = y3 - y2;\n\n\t\tif (l01x*l23y == l01y*l23x)\n\t\t{\n\t\t\tprintf(\"2\\n\");\n\t\t}\n\t\telse if (l01x*l23x + l01y*l23y == 0)\n\t\t{\n\t\t\tprintf(\"1\\n\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"0\\n\");\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <set>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <functional>\n#include <map>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <list>\n\nusing namespace std;\n\n#define EPS (1e-10)\n\nstruct Point{\n    Point(double _x = 0, double _y = 0){\n        x = _x;\n        y = _y;\n    }\n    double x;\n    double y;\n\n    Point operator + (Point p){\n        return Point(x + p.x, y+ p.y);\n    }\n\n    Point operator - (Point p){\n        return Point(x - p.x, y - p.y);\n    }\n\n    Point operator * (double a){\n        return Point(a * x, a * y);\n    }\n\n    Point operator / (double a){\n        return Point(x / a, y / a);\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    bool operator < (const Point &p) const{\n        return x!=p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) && fabs(y - p.y) < EPS;\n    }\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\nint main() {\n\n    int q;scanf(\"%d\",&q);\n\n    for(int i=0;i<q;i++){\n        Point p0 = Point(0,0);\n        Point p1 = Point(0,0);\n        Point p2 = Point();\n        Point p3 = Point();\n\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n\n        Vector v1 = p1 - p0;\n        Vector v2 = p3 - p2;\n\n        //直行判定\n        if((fabs(v1.x*v2.x)+ fabs(v1.y*v2.y)) < EPS){\n            printf(\"1\\n\");\n        }\n\n        //並行判定\n        else if(fabs((v1.x*v2.y) - (v1.y*v2.x)) < EPS){\n            printf(\"2\\n\");\n        }\n\n        else{\n            printf(\"0\\n\");\n        }\n\n    }\n\n\n    return 0;\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <math.h>\nconst double EPS = 1e-10;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\t/*vector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}*/\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double para(vector v1, vector v2) {\n\treturn sqrt(v1.x*v1.x + v1.y*v1.y)*sqrt(v2.x*v2.x + v2.y*v2.y);\n}\nint main() {\n\tdouble n, x1, x2, x3, x4, y1, y2, y3, y4;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tvector v1(x2 - x1, y2 - y1);\n\t\tvector v2(x4 - x3, y4 - y3);\n\t\tdouble ans = dot(v1, v2);\n\t\tif (ans == 0) cout << 1 << endl;\n\t\telse if (fabs(ans - para(v1, v2)) < EPS || fabs(2*ans - fabs(ans - para(v1, v2))) < EPS || fabs((-2) * ans - fabs(ans - para(v1, v2))) < EPS) cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst ll INF = 1e16;\nconst ll mod = 1000000007;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n\ntemplate<class T> inline bool chmax(T& a, T b) {\n  if (a < b) {\n    a = b;\n    return 1;\n  }\n  return 0;\n}\ntemplate<class T> inline bool chmin(T& a, T b) {\n  if (a > b) {\n    a = b;\n    return 1;\n  }\n  return 0;\n}\nint ctoi(char c) {\n  if (c >= '0' && c <= '9') {\n    return c - '0';\n  }\n  return 0;\n}\nll factorial(ll n) {\n  if (n == 1) {\n    return 1;\n  }\n  ll ans = factorial(n-1);\n  return ans*n;\n}\nll gcd(ll a, ll b) {\n  if (b == 0) return a;\n  return gcd(b, a%b);\n}\nll lcm(ll a, ll b) {\n  return (a/gcd(a, b))*b;\n}\nbool is_prime(ll n) {\n  for (ll i = 2; i*i <= n; i++) {\n    if (n%i == 0) return false;\n  }\n  return n != 1;\n}\nll mod_pow(ll x, ll n, ll mod) {\n  if (n == 0) return 1;\n  ll res = mod_pow(x*x%mod, n/2, mod);\n  if (n & 1) res = res * x % mod;\n  return res;\n}\n\nstruct Point {\n  double x, y;\n};\ntypedef Point Vector;\ndouble dot(Vector a, Vector b) {\n  return a.x*b.x + a.y*b.y;\n}\ndouble cross(Vector a, Vector b) {\n  return a.x*b.y - a.y*b.x;\n}\n\nint main() {\n  ll n;\n  cin >> n;\n  rep(i, n) {\n    Vector a, b;\n    double x, y;\n    cin >> x >> y;\n    a.x = x; a.y = y;\n    cin >> x >> y;\n    a.x -= x; a.y -= y;\n    cin >> x >> y;\n    b.x = x; b.y = y;\n    cin >> x >> y;\n    b.x -= x; b.y -= y;\n    if (dot(a, b) == 0) {\n      cout << 1 << endl;\n    } else if (cross(a, b) == 0) {\n      cout << 2 << endl;\n    } else {\n      cout << 0 << endl;\n    }\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <iterator>\n#include <iomanip>\n#include <cmath>\n#include <vector>\n#include <numeric>\n#include <cstdio>\n#include <bitset>\n#include <map>\n#include <string>\n#include <valarray>\n#include <queue>\n#include <utility>\n#include <functional>\n#include <list>\n\n\nusing namespace std;\n\nconst double ESP = 1E-8;\n\nstruct Point\n{\n    //friends\n    friend Point operator*(double c, const Point & p);\n    friend ostream & operator<<(ostream & os, const Point & p);\n    friend istream & operator>>(istream & is, Point & p);\n    friend double cross(const Point & p1, const Point & p2);\n\n  \n    //members\n    double x, y;\n\n    Point() {};\n    Point(double x, double y): x(x), y(y) {};\n\n    Point operator-(const Point & p) const\n    {\n        // Point difference = {x - p.x, y - p.y};\n        // return difference;\n        return Point(x - p.x, y - p.y);\n    }\n\n    double operator*(const Point & p) const\n    {\n        return x*p.x + y*p.y;\n    }\n\n    Point operator*(double c) const\n    {\n        // Point p = {c*x, c*y};\n        // return p;\n        return Point(c*x, c*y);\n    }\n\n    Point operator+(const Point & p) const\n    {\n        // Point sum = {x+p.x, y+p.y};\n        // return sum;\n        return Point(x+p.x, y+p.y);\n    }\n\n    Point projection(const Point & p1, const Point & p2) const\n    {\n        Point a(*this-p1), b(p2-p1);\n        return (a*b)/(b*b)*b+p1;\n    }\n\n    Point reflection(const Point & p1, const Point & p2) const\n    {\n        return this->projection(p1, p2)*2 - *this;\n    }\n\n};\n\n\nstruct Line\n{\n    Line() = default;\n    Line(const Point & p1, const Point & p2): directional(p1-p2), point_online(p1) {}; \n    Point directional, point_online;\n};\n\n\n//function related with point\ndouble norm(const Point & p);\nbool check_clockwise(const Point & p0, const Point & p1, const Point & p2);\nbool check_counter_clockwise(const Point & p0, const Point & p1, const Point & p2);\nbool check_online_back(const Point & p0, const Point & p1, const Point & p2);\nbool check_online_front(const Point & p0, const Point & p1, const Point & p2);\nbool check_on_segment(const Point & p0, const Point & p1, const Point & p2);\n// bool check_parallel(const Point & p0, const Point & p1, const Point & p2, const Point & p3);\n\n\n//functions related with lines\nbool check_parallel(const Line & l1, const Line & l2);\nbool check_orthogonal(const Line & l1, const Line & l2);\n\nint main()\n{\n    Point p0, p1, p2, p3;\n\n    int q;\n    cin >> q;\n\n    int result;\n\n    for (int i = 0; i < q; i++)\n    {\n        cin >> p0 >> p1 >> p2 >> p3;\n        if (check_parallel(Line(p0, p1), Line(p2, p3)))\n            result = 2;\n        else if (check_orthogonal(Line(p0, p1), Line(p2, p3)))\n            result = 1;\n        else\n            result = 0;\n\n        cout << result << endl;\n    }\n\n\n    // vector<string> results(q);\n    // for (int i = 0; i < q; i++)\n    // {\n    //     cin >> p2;\n    //     if (check_counter_clockwise(p0, p1, p2))\n    //         results[i] = \"COUNTER_CLOCKWISE\";\n    //     else if (check_clockwise(p0, p1, p2))\n    //         results[i] = \"CLOCKWISE\";\n    //     else if (check_online_back(p0, p1, p2))\n    //         results[i] = \"ONLINE_BACK\";\n    //     else if (check_online_front(p0, p1, p2))\n    //         results[i] = \"ONLINE_FRONT\";\n    //     else if (check_on_segment(p0, p1, p2))\n    //         results[i] = \"ON_SEGMENT\";\n    // }\n\n    // for (auto x: results)\n    //     cout << x << endl;\n\n}\n\n\n//friends\nPoint operator*(double c, const Point & p)\n{\n    return p*c;\n}\n\nostream & operator<<(ostream & os, const Point & p) \n{\n    os << setprecision(8) << fixed << p.x << ' ' << p.y << endl;\n    return os;\n}\n\nistream & operator>>(istream & is, Point & p)\n{\n    is >> p.x >> p.y;\n    return is;\n}\n\ndouble cross(const Point & p1, const Point & p2)\n{\n    return p1.x*p2.y-p1.y*p2.x;\n}\n\nbool check_counter_clockwise(const Point & p0, const Point & p1, const Point & p2)\n{\n    return cross(p1-p0,p2-p0) > 0;\n}\n\nbool check_clockwise(const Point & p0, const Point & p1, const Point & p2)\n{\n    return cross(p1-p0,p2-p0) < 0;\n}\n\ndouble norm(const Point & p)\n{\n    return sqrt(p*p);\n}\n\nbool check_online_back(const Point & p0, const Point & p1, const Point & p2)\n{\n    Point a(p2-p0), b(p1-p0);\n    double norm_a = norm(a), norm_b = norm(b);\n    return fabs(a*b+norm_a*norm_b)<ESP && fabs(norm_a)>ESP;\n}\n\n\nbool check_online_front(const Point & p0, const Point & p1, const Point & p2)\n{\n    Point a(p2-p0), b(p1-p0);\n    double norm_a = norm(a), norm_b = norm(b);\n    return fabs(a*b-norm_a*norm_b)<ESP && norm_a>norm_b && fabs(norm_a-norm_b)>ESP;\n}\n\n\nbool check_on_segment(const Point & p0, const Point & p1, const Point & p2)\n{\n    Point a(p2-p0), b(p1-p0);\n    double norm_a = norm(a), norm_b = norm(b);\n    return fabs(a*b-norm_a*norm_b)<ESP && ((norm_a<norm_b && fabs(norm_a-norm_b)>ESP) || fabs(norm_a-norm_b)<ESP);\n    // double d1=a*b, d2=norm_a*norm_b, d3=fabs(d1-d2);\n    // bool t1 = d3<=ESP, t2=norm_a<norm_b && fabs(norm_a-norm_b)>=ESP, t3=fabs(norm_a-norm_b)<=ESP;\n    // return t1 &&(t2||t3);\n}\n\n\nbool check_parallel(const Line & l1, const Line & l2)\n{\n    return cross(l1.directional, l2.directional)==0;\n}\n\n\nbool check_orthogonal(const Line & l1, const Line & l2)\n{\n    return l1.directional*l2.directional==0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <limits>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\nnamespace libcomp {\nnamespace geometry {\nstatic const double EPS = 1e-9;\ninline double abs(double x){ return std::abs(x); }\ninline bool tolerant_eq(double a, double b){ return abs(a - b) < EPS; }\n}\n}\nnamespace libcomp {\nnamespace geometry {\nstruct Point {\n\tdouble x;\n\tdouble y;\n\texplicit Point(const double &x = 0.0, const double &y = 0.0) :\n\t\tx(x), y(y)\n\t{ }\n\tstatic Point invalid(){\n\t\tdouble qnan = numeric_limits<double>::quiet_NaN();\n\t\treturn Point(qnan, qnan);\n\t}\n\tbool is_valid() const { return !(std::isnan(x) || std::isnan(y)); }\n\tPoint operator+(const Point &p) const { return Point(x + p.x, y + p.y); }\n\tPoint &operator+=(const Point &p){ return *this = *this + p; }\n\tPoint operator-(const Point &p) const { return Point(x - p.x, y - p.y); }\n\tPoint &operator-=(const Point &p){ return *this = *this - p; }\n\tPoint operator*(double s) const { return Point(x * s, y * s); }\n\tPoint &operator*=(double s){ return *this = *this * s; }\n\tPoint operator*(const Point &p) const {\n\t\treturn Point(x * p.x - y * p.y, x * p.y + y * p.x);\n\t}\n\tPoint &operator*=(const Point &p){ return *this = *this * p; }\n\tPoint operator/(double s) const { return Point(x / s, y / s); }\n\tPoint &operator/=(double s){ return *this = *this / s; }\n\tbool operator==(const Point &p) const { return x == p.x && y == p.y; }\n\tbool operator!=(const Point &p) const { return x != p.x || y != p.y; }\n\tbool operator<(const Point &p) const {\n\t\treturn (x == p.x) ? (y < p.y) : (x < p.x);\n\t}\n\tdouble abs() const { return sqrt(x * x + y * y); }\n\tdouble norm() const { return x * x + y * y; }\n\tPoint unit() const { return *this / abs(); }\n\tPoint ortho() const { return Point(-y, x); }\n};\ninline Point operator*(double s, const Point &p){ return p * s; }\ninline bool tolerant_eq(const Point &a, const Point &b){\n\treturn tolerant_eq(a.x, b.x) && tolerant_eq(a.y, b.y);\n}\ninline double cross(const Point &a, const Point &b){\n\treturn a.x * b.y - a.y * b.x;\n}\ninline double dot(const Point &a, const Point &b){\n\treturn a.x * b.x + a.y * b.y;\n}\ninline int ccw(const Point &a, const Point &b, const Point &c){\n\tPoint d = b - a, e = c - a;\n\tif(cross(d, e) > 0.0){ return 1; }\n\tif(cross(d, e) < 0.0){ return -1; }\n\tif(dot(d, e) < 0.0){ return 2; }\n\tif(d.abs() < e.abs()){ return -2; }\n\treturn 0;\n}\n}\n}\nnamespace libcomp {\nnamespace geometry {\nstruct Line {\n\tPoint a;\n\tPoint b;\n\texplicit Line(const Point &a = Point(), const Point &b = Point()) :\n\t\ta(a), b(b)\n\t{ }\n\tstatic Line invalid(){\n\t\tPoint inv = Point::invalid();\n\t\treturn Line(inv, inv);\n\t}\n\tbool is_valid() const { return a.is_valid() && b.is_valid(); }\n\tbool operator<(const Line &l) const {\n\t\treturn (a == l.a) ? (b < l.b) : (a < l.a);\n\t}\n\tPoint projection(const Point &p) const {\n\t\tdouble t = dot(p - a, b - a) / (b - a).norm();\n\t\treturn a + t * (b - a);\n\t}\n\tPoint reflection(const Point &p) const {\n\t\treturn p + 2.0 * (projection(p) - p);\n\t}\n};\ninline bool tolerant_eq(const Line &a, const Line &b){\n\treturn abs(cross(a.b - a.a, b.a - a.a)) < EPS;\n}\ninline bool directed_tolerant_eq(const Line &a, const Line &b){\n\tif(!tolerant_eq(a, b)){ return false; }\n\treturn tolerant_eq((a.a - a.b).unit(), (b.a - b.b).unit());\n}\ninline bool is_parallel(const Line &a, const Line &b){\n\treturn abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n}\n}\nnamespace geom = libcomp::geometry;\nint main(){\n\tios_base::sync_with_stdio(false);\n\tint T;\n\tcin >> T;\n\twhile(T--){\n\t\tgeom::Line a, b;\n\t\tcin >> a.a.x >> a.a.y >> a.b.x >> a.b.y;\n\t\tcin >> b.a.x >> b.a.y >> b.b.x >> b.b.y;\n\t\tif(geom::is_parallel(a, b)){\n\t\t\tcout << 2 << endl;\n\t\t}else if(geom::is_parallel(a, geom::Line((b.b - b.a).ortho()))){\n\t\t\tcout << 1 << endl;\n\t\t}else{\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\nconst double EPS = 1e-7;\nconst double INF = 1e12;\nstruct Vec {\n    double x,y;\n    Vec(){}\n    Vec(double x,double y){ this->x=x,this->y=y; }\n    void read(){ scanf(\"%lf%lf\",&x,&y); }\n    void prt() {printf(\"%.9f %.9f\\n\",x,y); }\n    double len(){ return sqrt(x*x+y*y); }\n    double len2(){ return x*x+y*y; }\n    \n    Vec operator+(const Vec&o)const{ return Vec(x+o.x,y+o.y); }\n    Vec operator-(const Vec&o)const{ return Vec(x-o.x,y-o.y); }\n    Vec operator*(const double&k)const{ return Vec(k*x,k*y); }\n    double operator*(const Vec&o)const {return x*o.x+y*o.y; }\n    double operator^(const Vec&o)const {return x*o.y-y*o.x; }\n    Vec rotate(double ang){ return Vec(x*cos(ang)-y*sin(ang), x*sin(ang)+y*cos(ang)); }\n    Vec change(double l){ if(len()<EPS) return *this; return (*this)*(l/len()); }\n    double disToLine(Vec A, Vec B) {\n        return abs((A-*this)^(B-*this))/(B-A).len();\n    }\n};\n\nVec Lineintersect(Vec A1,Vec A2,Vec B1,Vec B2) {\n    if (abs((A2-A1)^(B2-B1)) < EPS) return Vec(INF,INF);\n    return A1 + (A2 - A1) * ((abs((A2-A1)^(B2-B1)) - abs((A2-B1)^(B2-B1)) ) / abs((A2-A1)^(B2-B1)));\n}\n\nVec Segintersect(Vec A1,Vec A2,Vec B1,Vec B2) {\n    Vec P = Lineintersect(A1,A2,B1,B2);\n    if ((P-A1)*(P-A2)<=0 && (P-B1)*(P-B2)<=0) return P; \n    return Vec(INF,INF);\n}\n\nVec A,B,C,D; int q;\nint main(){\n    scanf(\"%d\",&q);\n    while(q--){\n        A.read(); B.read(); C.read(); D.read();\n        if(abs((B-A)*(D-C)) < EPS) \n            printf(\"1\\n\");\n        else if(abs((B-A)^(D-C))<EPS)\n            printf(\"2\\n\"); \n        else\n            printf(\"0\\n\");\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define P pair<ll,ll>\n#define FOR(I,A,B) for(ll I = ll(A); I < ll(B); ++I)\n#define FORR(I,A,B) for(ll I = ll((B)-1); I >= ll(A); --I)\n#define TO(x,t,f) ((x)?(t):(f))\n#define SORT(x) (sort(x.begin(),x.end())) // 0 2 2 3 4 5 8 9\n#define POSL(x,v) (lower_bound(x.begin(),x.end(),v)-x.begin()) //xi>=v  x is sorted\n#define POSU(x,v) (upper_bound(x.begin(),x.end(),v)-x.begin()) //xi>v  x is sorted\n#define NUM(x,v) (POSU(x,v)-POSL(x,v))  //x is sorted\n#define REV(x) (reverse(x.begin(),x.end())) //reverse\nll gcd(ll a,ll b){if(a%b==0)return b;return gcd(b,a%b);}\nll lcm(ll a,ll b){ll c=gcd(a,b);return ((a/c)*(b/c)*c);}\n#define NEXTP(x) next_permutation(x.begin(),x.end())\nconst ll INF=ll(1e18)+ll(7);\nconst ll MOD=1000000007LL;\n#define out(a) cout<<fixed<<setprecision((a))\n\nclass vec{\npublic:\n\tint x,y;\n\tvec(int x_=0,int y_=0):x(x_),y(y_){}\n\tvoid make(int x_,int y_){\n\t\tx = x_; y = y_;\n\t}\n\tvec operator + (vec A){\n\t\tvec ans(this->x+A.x,this->y+A.y);\n\t\treturn ans;\n\t}\n\tvec operator - (vec A){\n\t\tvec ans(this->x-A.x,this->y-A.y);\n\t\treturn ans;\n\t}\n\tint operator * (vec A){\n\t\treturn this->x*A.x+this->y*A.y;\n\t}\n\tbool operator == (vec A){\n\t\treturn (this->x==A.x && this->y==A.y);\n\t}\n\tdouble r(){\n\t\treturn sqrt((double)x*x+(double)y*y);\n\t}\n\tdouble sita(){\n\t\tdouble ans = atan2(y,x);\n\t\treturn (ans<0.000?ans+2.0*M_PI:ans);\n\t}\n};\ndouble sin_sita(vec v1,vec v2){ // v2 basis\n\treturn double(v2.x*v1.y-v2.y*v1.x)/v1.r()/v2.r();\n}\ndouble cos_sita(vec v1,vec v2){ // v2 basis\n\treturn double(v2.x*v1.x+v2.y*v1.y)/v1.r()/v2.r();\n}\n\n\nint main(){\n\tint q,x0,y0,x1,y1,x2,y2,x3,y3;\n\tcin >> q;\n\tdouble EPS = 1e-13;\n\tFOR(i,0,q){\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tvec v1(x1-x0,y1-y0);\n\t\tvec v2(x3-x2,y3-y2);\n\t\tdouble sc = sin_sita(v1,v2);\n\t\tdouble cc = cos_sita(v1,v2);\n\t\tif(sc>=1.0-EPS || sc<=-1.0+EPS){\n\t\t\tcout << 1 << endl;\n\t\t}else if(cc>=1.0-EPS || cc<=-1.0+EPS){\n\t\t\tcout << 2 << endl;\n\t\t}else{\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<math.h>\nbool same(double a, double b);\n\nint main()\n{\n    long long int xp0, xp1, xp2, xp3, yp0, yp1, yp3, yp2, diffx0, diffy0, diffx1, diffy1, test;\n    int res;\n    double m1, m2;\n    scanf(\"%lld\", &test);\n    while(test--)\n    {\n        scanf(\"%lld%lld%lld%lld%lld%lld%lld%lld\", &xp0, &yp0, &xp1, &yp1, &xp2, &yp2, &xp3, &yp3);\n        diffx0 = xp1 - xp0;\n        diffy0 = yp1 - yp0;\n        diffx1 = xp3 - xp2;\n        diffy1 = yp3 - yp2;\n        if(diffx0 == 0)\n        {\n            if(diffx1 == 0)\n            {\n                res = 2;\n            }\n            else if(diffy1 == 0)\n            {\n                res = 1;\n            }\n            else    res = 0;\n        }\n        else if(diffx1 == 0)\n        {\n            if(diffx0 == 0)\n            {\n                res = 2;\n            }\n            else if(diffy0 == 0)\n            {\n                res = 1;\n            }\n            else res = 0;\n        }\n        else\n        {\n            m1 = (double)diffy0/diffx0;\n            m2 = (double)diffy1/diffx1;\n            if(m1 == m2)    res = 2;\n            else if(same(m1*m2, -1))  res = 1;\n            else res = 0;\n        }\n        printf(\"%d\\n\", res);\n    }\n    return 0;\n}\nbool same(double a, double b)\n{\n    return fabs(a - b) < 0.01;\n}\n"
  },
  {
    "language": "C++",
    "code": "/*\n@title Macro\n@category template\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,N) for(int i=0;i<int(N);++i)\n#define rep1(i,N) for(int i=1;i<int(N);++i)\n#define all(a) (a).begin(),(a).end()\n#define print(v) { cerr<<#v<<\": [ \"; for(auto _ : v) cerr<<_<<\", \"; cerr<<\"]\"<<endl; }\n#define printpair(v) { cerr<<#v<<\": [ \"; for(auto _ : v) cerr<<\"{\"<<_.first<<\",\"<<_.second<<\"}\"<<\", \"; cerr<<\"]\"<<endl; }\n#define dump(x) cerr<<#x<<\": \"<<x<<endl;\n#define bit(k) (1LL<<(k))\n#define Yes \"Yes\"\n#define No \"No\"\n#define YES \"YES\"\n#define NO \"NO\"\ntypedef long long ll;\n\ntemplate< typename T1, typename T2 >\nostream &operator<<(ostream &os, const pair< T1, T2 >& p) {\n  os << \"{\" <<p.first << \", \" << p.second << \"}\";\n  return os;\n}\ntemplate <class T> using vec = vector<T>;\ntemplate <class T> using vvec = vector<vec<T>>;\n\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\n\nconst int INF = (ll)1e9;\nconst ll INFLL = (ll)1e18+1;\nconst ll MOD = (ll)1e9+7;\n\nconst double PI = acos(-1.0);\n\nconst int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};\nconst int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};\nconst string dir = \"DRUL\";\n\n\n#line 1 \"/Users/knaga/programming/procon_library/geometory/template.cpp\"\n\n\n#line 5 \"/Users/knaga/programming/procon_library/geometory/template.cpp\"\n/*\n@title Geometory/template.cpp\n@category Geometory\n*/\n\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Segment;\n#define EPS (1e-10)\n#define EQ(a, b) (abs((a) - (b)) < EPS)\nPoint operator*(const Point &p, const double &d) {\n  return Point(real(p) * d, imag(p) * d);\n}\n// 内積\ndouble dot(Point a, Point b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n//外積\ndouble cross(const Point &a, const Point &b){\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n/*\n\"https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_1_A\"\n直線 l に p から引いた交点を求める\n*/\nPoint projection(const Segment &l, const Point &p){\n    double t = dot(p - l.first, l.second - l.first) / norm(l.second - l.first);\n    return l.first + t * (l.second - l.first);\n}\n/*\n直線 l に関して線対称な点を求める\n*/\nPoint reflection(const Segment &l, const Point &p){\n    return p + (projection(l,p)-p)*2.0;\n}\n/*\nhttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_C\ncrockwise\n*/\nint ccw(const Point &a, const Point &b, const Point &c){\n    Point x = b - a;\n    Point y = c - a;\n    if(cross(x,y) > EPS)return 1;   //時計回り\n    if(cross(x,y) < -EPS)return -1; //反時計回り\n    if(dot(x,y) < -EPS)return +2;   //後ろ\n    if(norm(x) < norm(y))return -2; //前\n    return 0;                       //中\n}\nbool is_intersected_ls(Point a1, Point a2, Point b1, Point b2){\n    return (cross(a2-a1, b1-a1)*cross(a2-a1, b2-b1) < EPS) && (cross(b2-b1, a1-b1)*cross(b2-b1, a2-b1) < EPS);\n}\n\n\n#line 4 \"CGL_2_A.test.cpp\"\n\nint main(){\n    int q;\n    cin >> q;\n    while(q--){\n        int x[4],y[4];\n        rep(i,4)cin >> x[i] >> y[i];\n        Point p1(x[1]-x[0], y[1]-y[0]);\n        Point p2(x[3]-x[2], y[3]-y[2]);\n        if(dot(p1,p2)==0)cout<<1<<endl;\n        else if(cross(p1,p2)==0)cout<<2<<endl;\n        else cout << 0 << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <iomanip>\n#include <algorithm>\n\nusing namespace std;\n\nconst double kEps = 1e-10;\nconst double kInf = 1e15;\n\nint dcmp(double x) {\n  if (fabs(x) < kEps) return 0;\n  return x < 0 ? -1 : 1;\n}\n\nstruct Vector {\n  double x, y;\n  Vector() {}\n  Vector(double x, double y): x(x), y(y) {}\n  // Vector(const Point & p1, const Point & p2): x(p2.x - p1.x), y(p2.y - p1.y) {}\n  Vector(const Vector & v);\n\n  double Norm() const { return hypot(x, y); }\n  double NormSquared() const { return x * x + y * y; }\n  Vector Normalize() const {\n    return *this / this->Norm();\n  }\n  Vector operator-() const {\n    return Vector(-x, -y);\n  }\n  Vector operator+(const Vector & rhs) const {\n    return Vector(x + rhs.x, y + rhs.y);\n  }\n  Vector operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  Vector operator*(const double rhs) const {\n    return Vector(rhs * x, rhs * y);\n  }\n  Vector operator/(const double rhs) const {\n    return *this * (1.0 / rhs);\n  }\n  double Dot(const Vector & rhs) const {\n    return x * rhs.x + y * rhs.y;\n  }\n  double Cross(const Vector & rhs) const {\n    return x * rhs.y - y * rhs.x;\n  }\n  bool operator==(const Vector & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Vector & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nstruct Point {\n  Point() {}\n  Point(double x, double y): x(x), y(y) {}\n  Point(const Point & p);\n\n  double x, y;\n\n  Point operator-() {\n    return Point(-x, -y);\n  }\n  Point operator+(const Vector & rhs) const {\n    return Point(x + rhs.x, y + rhs.y);\n  }\n  Point operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  bool operator==(const Point & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Point & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nstruct Line {\n  Line() {}\n  Line(const Point & p1, const Point & p2): p1(p1), p2(p2) {\n    if (dcmp(p2.x - p1.x) == 0) {\n      slope = kInf;\n    } else {\n      slope = (p2.y - p1.y) / (p2.x - p1.x);\n    }\n  }\n  Line(double x1, double y1, double x2, double y2): p1(x1, y1), p2(x2, y2) {\n    if (dcmp(x2 - x1) == 0) {\n      slope = kInf;\n    } else {\n      slope = (y2 - y1) / (x2 - x1);\n    }\n  }\n  Line(const Line & l);\n\n  Point p1, p2;\n  double slope;\n};\n\nostream & operator<<(ostream & os, const Point & p) {\n  os << p.x << \" \" << p.y;\n  return os;\n}\n\nostream & operator<<(ostream & os, const Vector & v) {\n  os << v.x << \" \" << v.y;\n  return os;\n}\n\nbool IsParellel(const Line & l1, const Line & l2) {\n  return dcmp(l1.slope - l2.slope) == 0;\n}\n\nbool IsOrthgonal(const Line & l1, const Line & l2) {\n  if ((dcmp(l1.slope - kInf) == 0 && dcmp(l2.slope) == 0)\n      || (dcmp(l1.slope) == 0 && dcmp(l2.slope - kInf) == 0)) {\n    return true;\n  } else if (dcmp(l1.slope - kInf) == 0 && dcmp(l1.slope - kInf) == 0) {\n    return false;\n  } else {\n    return dcmp(l1.slope * l2.slope + 1) == 0;\n  }\n}\n\nint main(int argc, char const *argv[]) {\n  double x0, y0, x1, y1;\n  Point p0(x0, y0);\n  Point p1(x1, y1);\n\n  int q;\n  cin >> q;\n  for (unsigned i = 0; i < q; ++i) {\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n    if (IsParellel(Line(x0, y0, x1, y1), Line(x2, y2, x3, y3))) {\n      cout << 2 << \"\\n\";\n    } else if (IsOrthgonal(Line(x0, y0, x1, y1), Line(x2, y2, x3, y3))) {\n      cout << 1 << \"\\n\";\n    } else {\n      cout << 0 << \"\\n\";\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<queue>\n\nusing namespace std;\ntypedef long long LL;\n\nconst double Pi = acos(-1.0);\nconst int INf = 0x7fffffff;\nconst double eps = 1e-9;\n\nint sgn(double d) {\n    if(fabs(d) < eps)\n        return 0;\n    if(d > 0)\n        return 1;\n    return -1;\n}\n\nint dcmp(double x, double y) {\n    if(fabs(x - y) < eps)\n        return 0;\n    if(x > y)\n        return 1;\n    return -1;\n}\n\nstruct Point {\n    double x, y;\n    Point(double _x = 0, double _y = 0):x(_x), y(_y){}\n};\n\ntypedef Point Vector;\n\nVector operator + (Vector A, Vector B) {\n    return Vector(A.x + B.x, A.y + B.y);\n}\n\nVector operator - (Point A, Point B) {\n    return Vector(A.x - B.x, A.y - B.y);\n}\n\nVector operator * (Vector A, double p) {\n    return Vector(A.x * p, A.y * p);\n}\n\nVector operator / (Vector A, double p) {\n    return Vector(A.x / p, A.y / p);\n}\n\nbool operator == (const Point &a, const Point &b) {\n    if(sgn(a.x-b.x) == 0 && sgn(a.y-b.y) == 0)\n        return true;\n    return false;\n}\n\ndouble Dot(Vector A, Vector B) {\n    return A.x * B.x + A.y * B.y;\n}\n\ndouble Cross(Vector A, Vector B) {\n    return A.x * B.y - B.x * A.y;\n}\n\ndouble Length(Vector A) {\n    return sqrt(Dot(A, A));\n}\n\ndouble Angle(Vector A, Vector B) {\n    return acos(Dot(A, B) / Length(A) / Length(B));\n}\n\ndouble Area2(Point A, Point B, Point C) {\n    return Cross(B - A, C - A);\n}\n\nVector Rotate(Vector A, double rad) { // 逆时针旋转rad\n    return Vector(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) - A.y * cos(rad));\n}\n\nVector Normal(Vector A) {      //A左转90°的单位法向量\n    double L = Length(A);\n    return Vector(-A.y / L, A.x / L);\n}\n\nbool ToLeftTest(Point a, Point b, Point c) {\n    return Cross(b - a, c - a) > 0;\n}\n\nstruct Line {\n    Point v, p;\n    Line(Point v, Point p) : v(v), p(p){}\n    Point point(double t) {\n        return v + (p - v) * t;\n    }\n};\n\nPoint GetLineIntersection(Point P, Vector v, Point Q, Vector w) {\n    Vector u = P - Q;\n    double t = Cross(w, u) / Cross(v, w);\n    return P + v * t;\n}\n\ndouble DistanceToLine(Point P, Point A, Point B) {\n    Vector v1 = B - A, v2 = P - A;\n    return fabs(Cross(v1, v2) / Length(v1));\n}\n\n\ndouble DistanceToSegment(Point P, Point A, Point B) {\n    if(A == B)\n        return Length(P - A);\n    Vector v1 = B - A, v2 = P - A, v3 = P - B;\n    if(sgn(Dot(v1, v2)) < 0)\n        return Length(v2);\n    if(sgn(Dot(v1, v3)) > 0)\n        return Length(v3);\n    return DistanceToLine(P, A, B);\n}\n\nPoint GetLineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A + v * (Dot(v, P - A) / Dot(v, v));\n}\n\nint main() {\n    Point p0, p1, p2, p3;\n    Vector v1, v2;\n    int q;\n    scanf(\"%d\", &q);\n    while(q--) {\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\", &p0.x, &p0.y, &p1.x, &p1.y, &p2.x, &p2.y, &p3.x, &p3.y);\n        v1.x = p1.x - p0.x, v1.y = p1.y - p0.y;\n        v2.x = p3.x - p2.x, v2.y = p3.y - p2.y;\n        if(sgn(Cross(v1, v2)) == 0)\n            printf(\"2\\n\");\n        else if(sgn(Dot(v1, v2)) == 0)\n            printf(\"1\\n\");\n        else\n            printf(\"0\\n\");\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\nstruct Vector\n{\n\tdouble x;\n\tdouble y;\n\tVector(double x, double y) :x(x), y(y) {}\n};\nbool isParallel(Vector &p1, Vector &p2)\n{\n\treturn p1.x*p2.y - p1.y*p2.x == 0;\n}\nbool isOrhogonal(Vector &p1, Vector &p2)\n{\n\treturn p1.x*p2.x + p1.y*p2.y == 0;\n}\nint main()\n{\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tdouble x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tVector p1(x1 - x0, y1 - y0);\n\t\tVector p2(x3 - x2, y3 - y2);\n\t\tif (isParallel(p1, p2))\n\t\t\tcout << 2 << endl;\n\t\telse if (isOrhogonal(p1, p2))\n\t\t\tcout << 1 << endl;\n\t\telse\n\t\t\tcout << 0 << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\n#define FOR(k,m,n) for(int (k)=(m);(k)<(n);(k)++)\n#define REP(i,n) FOR((i),0,(n))\n\n\n//???\n\n//???\nclass Point{\npublic:\n\tdouble x, y;\n\t//?????????????????????\n\tPoint(int x_=0.0,int y_=0.0):x(x_),y(y_){}\n\t\n\t//??????????????????????????????\n\tPoint operator + (Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double k) { return Point(x * k, y * k); }\n\tPoint operator / (double k) { return Point(x / k, y / k); }\n\n\tbool operator  < (const Point &p)const {\n\t\treturn x!=p.x ? x<p.x : y<p.y;\n\t}\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n\n\t//??¢??°\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n};\ntypedef Point Vector;        //????????????\nstruct Segment{Point p1,p2;};//??????\ntypedef Segment Line;        //??´???\n\n//???\nclass Circle {\npublic:\n\tPoint center;\n\tdouble r;\n\t//?????????????????????\n\tCircle(Point c_=Point(),double r_=0.0):center(c_),r(r_){}\n};\ntypedef vector<Point> Polygon;//????§???¢??????????????????\n\n\n\n//??¢??°????????????\n\n//?????????????????¢??°??????\nnamespace VFunc {\n\t//??????\n\tdouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n\t//??????\n\tdouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\t//??´?????????????¨????\n\tbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\tbool isOrthogonal(Point a1,Point  a2, Point b1,Point b2) {return isOrthogonal(a1-a2,b1-b2);}\n\tbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\t//????????????????¨????\n\tbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\tbool isParallel(Point a1, Point  a2, Point b1, Point b2) {return isParallel(a1 - a2, b1 - b2);}\n\tbool isParallel(Segment s1, Segment s2) {return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\n}\n\n//??????????????¨??????\nint q;\nPoint p[4];\n\nint main() {\n\tcin>>q;\n\tREP(i,q){\n\t\tREP(j, 4)cin >> p[i].x >> p[i].y;\n\t\tif      (VFunc::isParallel  (p[0], p[1], p[2], p[3])) cout << \"2\" << endl;\n\t\telse if (VFunc::isOrthogonal(p[0], p[1], p[2], p[3])) cout << \"1\" << endl;\n\t\telse                                                  cout << \"0\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i = 0; i < (int)n; i++)\n\nconst double eps = 1e-10;\n\nstruct Point {\n  double x, y;\n  Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}  \n  double norm() {return sqrt(x*x + y*y);}\n};\n\nPoint operator + (const Point &p, const Point &q) {return Point(p.x + q.x, p.y + q.y);}\nPoint operator - (const Point &p, const Point &q) {return Point(p.x - q.x, p.y - q.y);}\ndouble operator * (const Point &p, const Point q) {return p.x * q.x + p.y * q.y;}\nbool operator == (const Point &p, const Point &q) {return (abs(p.x - q.x) < eps && abs(p.y - q.y) < eps);}\nbool operator != (const Point &p, const Point &q) {return !(p == q);}\ndouble cross(const Point &p, const Point &q) {return p.x*q.y - p.y*q.x;}\n\nstruct Line_Segment {\n  Point p , q;\n  Line_Segment(Point p = Point(0.0,0.0), Point q = Point(0.0,0.0)) : p(p), q(q) {}\n};\n\nstruct Line {\n  double a, b, c;\n  Line(double a, double b, double c) : a(a), b(b), c(c) {}\n  Line(Point p, Point q) {\n    a = q.y - p.y;\n    b = p.x - q.x;\n    c = q.x * p.y - p.x * q.y;\n  }\n};\n\nstruct Circle {\n  double r;\n  Point p;\n  Circle(Point p = Point(0.0, 0.0), double r = 0.0) : p(p), r(r) {}\n};\n\n// 点と直線の距離\ndouble point_line_dist(Point p, Line l) {\n  return abs(l.a*p.x + l.b*p.y + l.c) / sqrt(l.a*l.a + l.b*l.b);\n}\n\n// 点の直線への射影\nPoint projection (Point p, Line l) {\n  double x = p.x - l.a * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  double y = p.y - l.b * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  return Point(x,y);\n}\n\n// 線対称な点\nPoint reflection(Point p, Line l) {\n  double x = p.x - 2.0 * l.a * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  double y = p.y - 2.0 * l.b * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  return Point(x,y);\n}\n\n// 点の線分からの回転方向\nint ccw(Point p, Point p1, Point p2) {\n  p1 = p1 - p; p2 = p2 - p;\n  if(cross(p1,p2) > eps) return 1; \n  if(cross(p1,p2) < -eps) return -1; \n  if(p1 * p2 < 0) return 2; \n  if(p1.norm() < p2.norm()) return -2; \n  return 0; \n}\n\n// 線分の交差判定\nbool line_segment_cross(const Line_Segment l, const Line_Segment s) {\n  return ccw(l.p,l.q,s.p) * ccw(l.p,l.q,s.q) <= 0 && ccw(s.p,s.q,l.p) * ccw(s.p,s.q,l.q) <= 0;\n}\n\n// 直線の平行・直交判定 (平行:2 直交:1 その他:0)\nint line_parallel_orthogonal(Line l, Line s) {\n  if(abs(l.a*s.a + l.b*s.b) < eps) return 1;\n  else if(abs(l.a*s.b - l.b*s.a) < eps) return 2;\n  else return 0;\n}\n\n// 円と直線の交点\nvector<Point> circle_line_cross(Line l, Circle c) {\n  vector<Point> vp;\n  Point h;\n  h.x = c.p.x - l.a * (l.a*c.p.x + l.b*c.p.y + l.c) / (l.a*l.a + l.b*l.b);\n  h.y = c.p.y - l.b * (l.a*c.p.x + l.b*c.p.y + l.c) / (l.a*l.a + l.b*l.b);\n\n  double d = l.a*c.p.x + l.b*c.p.y + l.c;\n  double q = c.r*c.r - d*d / (l.a*l.a + l.b*l.b);\n  if(q >= eps) {\n    Point p1, p2;\n    p1.x = h.x + sqrt(q) * l.b / sqrt(l.a*l.a + l.b*l.b);\n    p1.y = h.y - sqrt(q) * l.a / sqrt(l.a*l.a + l.b*l.b);\n    p2.x = h.x - sqrt(q) * l.b / sqrt(l.a*l.a + l.b*l.b);\n    p2.y = h.y + sqrt(q) * l.a / sqrt(l.a*l.a + l.b*l.b);\n    vp.push_back(p1);\n    vp.push_back(p2);\n  } else if(abs(q) < eps) {\n    vp.push_back(h);\n  }\n  return vp;\n} \n\nint main() {\n  int q;\n  cin >> q;\n  rep(i,q) {\n    Point p0, p1, p2, p3;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    Line l(p0,p1), s(p2,p3);\n    cout << line_parallel_orthogonal(l,s) << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <vector>\nnamespace Random_Number{\n\tunsigned int seed = 19260817;\n\tvoid srnd(unsigned int x){ seed = x; }\n\tunsigned int rnd(){\n\t\treturn seed ^= seed << 19, seed ^= seed >> 7, seed ^= seed << 1;\n\t}\n}\nusing namespace Random_Number;\nnamespace Geometry{\n\tconst int COUNTER_CLOCKWISE = 1, CLOCKWISE = 2, ONLINE_BACK = 3, ONLINE_FRONT = 4, ON_SEGMENT = 5;\n\tconst double eps = 1e-9, pi = 3.14159265358979323846;\n\tbool equal(double a, double b){ return fabs(a - b) < eps; }\n\tstruct point{\n\t\tdouble x, y;\n\t\tpoint(){}\n\t\tpoint(double _x, double _y){ x = _x, y = _y; }\n\t\tpoint operator * (const double &la) const { return point(x * la, y * la); }\n\t\tpoint operator / (const double &la) const { return point(x / la, y / la); }\n\t\tpoint operator + (const point &rhs) const { return point(x + rhs.x, y + rhs.y); }\n\t\tpoint operator - (const point &rhs) const { return point(x - rhs.x, y - rhs.y); }\n\t\tbool operator < (const point &rhs) const { return x < rhs.x || (x == rhs.x && y < rhs.y); }\n\t\tbool operator > (const point &rhs) const { return x > rhs.x || (x == rhs.x && y > rhs.y); }\n\t\tbool operator == (const point &rhs) const { return equal(x, rhs.x) && equal(y, rhs.y); }\n\t\tdouble len2() const { return x * x + y * y; }\n\t\tdouble len() const { return sqrt(len2()); }\n\t\tpoint unit() const { return *this / len(); }\n\t\tpoint unit2() const { return *this / len2(); }\n\t\tfriend double distance(const point &a, const point &b){ return (a - b).len(); }\n\t\tfriend double distance2(const point &a, const point &b){ return (a - b).len2(); }\n\t\tfriend double dot(const point &a, const point &b){ return a.x * b.x + a.y * b.y; }\n\t\tfriend double cross(const point &a, const point &b){ return a.x * b.y - a.y * b.x; }\n\t\tvoid read(){ scanf(\"%lf%lf\", &x, &y); }\n\t\tvoid print(char ch = '\\n') const { printf(\"%.10lf %.10lf\", x, y), putchar(ch); }\n\t\tpoint rotation(double th) const { return point(x * cos(th) - y * sin(th), y * cos(th) + x * sin(th)); }\n\t\tfriend double angle(const point &a, const point &b){ return atan2(cross(a, b), dot(a, b)); }\n\t};\n\tstruct line{\n\t\tpoint a, b;\n\t\tline(){}\n\t\tline(point _a, point _b){ a = _a, b = _b; }\n\t\tvoid read(){ a.read(), b.read(); }\n\t\tvoid print(char ch1 = ' ', char ch2 = '\\n') const { a.print(ch1), b.print(ch2); }\n\t\tpoint projection(const point &p) const { return a + (b - a).unit2() * dot(p - a, b - a); }\n\t\tpoint reflection(const point &p) const { return projection(p) * 2 - p; }\n\t\tint direction(const point &p) const {\n\t\t\tdouble t = cross(b - a, p - a);\n\t\t\tif (t >= eps) return 1;\n\t\t\tif (t <= -eps) return 2;\n\t\t\tdouble l1 = dot(p - a, b - a), l2 = dot(b - a, b - a);\n\t\t\tif (l1 <= -eps) return 3;\n\t\t\tif (l1 > l2) return 4;\n\t\t\treturn 5;\n\t\t}\n\t\tfriend bool parallel(const line &a, const line &b){ return equal(cross(a.b - a.a, b.b - b.a), 0); }\n\t\tfriend bool orthogonal(const line &a, const line &b){ return equal(dot(a.b - a.a, b.b - b.a), 0); }\n\t\tfriend std :: vector<point> cross_line(const line &a, const line &b){\n\t\t\t// gugugu\n\t\t\treturn {};\n\t\t}\n\t\tfriend bool segment_intersection(const line &a, const line &b){\n\t\t\tif (std :: min(a.a.x, a.b.x) >= std :: max(b.a.x, b.b.x) + eps) return 0;\n\t\t\tif (std :: min(b.a.x, b.b.x) >= std :: max(a.a.x, a.b.x) + eps) return 0;\n\t\t\tif (std :: min(a.a.y, a.b.y) >= std :: max(b.a.y, b.b.y) + eps) return 0;\n\t\t\tif (std :: min(b.a.y, b.b.y) >= std :: max(a.a.y, a.b.y) + eps) return 0;\n\t\t\tdouble t1, t2;\n\t\t\tt1 = cross(b.a - a.a, a.b - a.a), t2 = cross(b.b - a.a, a.b - a.a);\n\t\t\tif ((t1 >= eps && t2 >= eps) || (t1 <= -eps && t2 <= -eps)) return 0;\n\t\t\tt1 = cross(a.a - b.a, b.b - b.a), t2 = cross(a.b - b.a, b.b - b.a);\n\t\t\tif ((t1 >= eps && t2 >= eps) || (t1 <= -eps && t2 <= -eps)) return 0;\n\t\t\treturn 1;\n\t\t}\n\t\tfriend double distance_ps(const point &p, const line &l){\n\t\t\tdouble l1 = dot(p - l.a, l.b - l.a), l2 = dot(l.b - l.a, l.b - l.a);\n\t\t\tif (l1 > l2) return distance(p, l.b);\n\t\t\tif (l1 < 0) return distance(p, l.a);\n\t\t\treturn fabs(cross(l.b - l.a, p - l.a)) / distance(l.a, l.b);\n\t\t}\n\t\tfriend double distance_ss(const line &a, const line &b){\n\t\t\tif (segment_intersection(a, b)) return 0;\n\t\t\treturn std :: min(std :: min(distance_ps(a.a, b), distance_ps(a.b, b)), \n\t\t\tstd :: min(distance_ps(b.a, a), distance_ps(b.b, a)));\n\t\t}\n\t};\n\tstruct polygon{\n\t\tstd :: vector<point> g;\n\t\tpolygon(){}\n\t\tpolygon(int n){ g.resize(n); }\n\t\tpolygon(const std :: vector<point> &_g){ g = _g; }\n\t\tvoid clear(){ g.clear(); }\n\t\tvoid resize(int n){ g.resize(n); }\n\t\tint size() const { return g.size(); }\n\t\tvoid push_back(point x){ return g.push_back(x); }\n\t\tvoid pop_back(){ g.pop_back(); }\n\t\tpoint& operator [] (int x){ return g[x]; }\n\t\tconst point& operator [] (int x) const { return g[x]; }\n\t\tdouble directed_area() const {\n\t\t\tint n = g.size();\n\t\t\tdouble s = 0;\n\t\t\tfor (register int i = 0; i < n; ++i) s += cross(g[i], g[(i + 1) % n]);\n\t\t\treturn s / 2;\n\t\t}\n\t\tbool is_convex() const {\n\t\t\tint n = g.size();\n\t\t\tfor (register int i = 0; i < n; ++i)\n\t\t\t\tif (cross(g[(i + 1) % n] - g[i], g[(i - 1 + n) % n] - g[i]) <= -eps) return 0;\n\t\t\treturn 1;\n\t\t}\n\t\tint polygon_point_containment(const point &a) const {\n\t\t\tdouble k = sqrt(1.0 * rnd() / rnd());\n\t\t\tline l = line(a, point(a.x + 1e9, a.y + 1e9 * k));\n\t\t\tint n = g.size(), s = 0;\n\t\t\tfor (register int i = 0; i < n - 1; ++i)\n\t\t\t\tif (line(g[i], g[i + 1]).direction(a) == 5) return 1;\n\t\t\tif (line(g[n - 1], g[0]).direction(a) == 5) return 1;\n\t\t\tfor (register int i = 0; i < n - 1; ++i)\n\t\t\t\tif (segment_intersection(l, line(g[i], g[i + 1]))) ++s;\n\t\t\tif (segment_intersection(l, line(g[n - 1], g[0]))) ++s;\n\t\t\tif (s & 1) return 2; else return 0;\n\t\t}\n\t\tvoid convex_hull(std :: vector<point> f){\n\t\t\tg.clear();\n\t\t\tint n = f.size();\n\t\t\tstd :: sort(f.begin(), f.end());\n\t\t\tstd :: vector<point> p;\n\t\t\tp.push_back(f[0]);\n\t\t\tfor (register int i = 1; i < n; ++i){\n\t\t\t\twhile (p.size() > 1 && cross(f[i] - p.back(), *(++p.rbegin()) - p.back()) <= -eps)\n\t\t\t\t\tp.pop_back();\n\t\t\t\tp.push_back(f[i]);\n\t\t\t}\n\t\t\tfor (register int i = 0; i < p.size() - 1; ++i) g.push_back(p[i]);\n\t\t\tstd :: reverse(f.begin(), f.end());\n\t\t\tp.clear(), p.push_back(f[0]);\n\t\t\tfor (register int i = 1; i < n; ++i){\n\t\t\t\twhile (p.size() > 1 && cross(f[i] - p.back(), *(++p.rbegin()) - p.back()) <= -eps)\n\t\t\t\t\tp.pop_back();\n\t\t\t\tp.push_back(f[i]);\n\t\t\t}\n\t\t\tfor (register int i = 0; i < p.size() - 1; ++i) g.push_back(p[i]);\n\t\t\tf = g, n = f.size(), g.clear();\n\t\t\tint t = 0;\n\t\t\tfor (register int i = 1; i < n; ++i)\n\t\t\t\tif (f[i].y < f[t].y || (f[i].y == f[t].y && f[i].x < f[t].x)) t = i;\n\t\t\tfor (register int i = t; i < n; ++i) g.push_back(f[i]);\n\t\t\tfor (register int i = 0; i < t; ++i) g.push_back(f[i]);\n\t\t}\n\t\tdouble convex_diamater() const {\n\t\t\tint n = g.size();\n\t\t\tdouble ans = 0;\n\t\t\tfor (register int i = 0, j = 0; i < n; ++i){\n\t\t\t\twhile (cross(g[i] - g[j], g[(i + 1) % n] - g[j])\n\t\t\t\t  < cross(g[i] - g[(j + 1) % n], g[(i + 1) % n] - g[(j + 1) % n]) + eps)\n\t\t\t\t\tj = (j + 1) % n;\n\t\t\t\tans = std :: max(ans, distance(g[j], g[i]));\n\t\t\t\tans = std :: max(ans, distance(g[j], g[(i + 1) % n]));\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n\t};\n\tstruct circle{\n\t\tpoint o;\n\t\tdouble r;\n\t\tcircle(){}\n\t\tcircle(point _o, double _r){ o = _o, r = _r; }\n\t\tvoid read(){ o.read(), scanf(\"%lf\", &r); }\n\t\tvoid print(char ch = '\\n') const { printf(\"%.10lf %.10lf %.10lf\", o.x, o.y, r), putchar(ch); }\n\t\tint circle_intersection(const circle &c) const {\n\t\t\tdouble d = distance(o, c.o);\n\t\t\tif (d >= r + c.r + eps) return 4;\n\t\t\tif (equal(d, r + c.r)) return 3;\n\t\t\tif (d >= fabs(r - c.r) + eps) return 2;\n\t\t\tif (equal(d, fabs(r - c.r))) return 1;\n\t\t\treturn 0;\n\t\t}\n\t\tstd :: vector<point> directed_line_cross_point(const line &l) const {\n\t\t\tpoint p = line(l.a, l.b).projection(o), v = (l.b - l.a).unit();\n\t\t\tdouble d = distance(p, o);\n\t\t\tif (d >= r + eps) return {};\n\t\t\tdouble t = sqrt(r * r - (p - o).len2());\n\t\t\tif (equal(t, 0)) return {p};\n\t\t\telse return {p - v * t, p + v * t};\n\t\t}\n\t\tstd :: vector<point> circle_cross_point(const circle &c) const {\n\t\t\tdouble d = distance(o, c.o);\n\t\t\tif (d <= fabs(r - c.r) - eps || d >= r + c.r + eps) return {};\n\t\t\tdouble x = (r * r - c.r * c.r + d * d) / (d * 2), h = sqrt(r * r - x * x);\n\t\t\tpoint p = (c.o - o).unit() * x, v = (c.o - o).unit().rotation(pi / 2) * h;\n\t\t\tif (v == point(0, 0)) return {p}; else return {p - v, p + v};\n\t\t}\n\t\tstd :: vector<point> tangent(const point &p) const {\n\t\t\tdouble d = distance(o, p);\n\t\t\tif (d <= r - eps) return {};\n\t\t\tif (equal(d, r)) return {p};\n\t\t\treturn circle_cross_point(circle(p, sqrt(d * d - r * r)));\n\t\t}\n\t\tstd :: vector<point> common_tangent_out(const circle &c) const {\n\t\t\tif (equal(r, c.r)){\n\t\t\t\tpoint p = (c.o - o).unit().rotation(pi / 2) * r;\n\t\t\t\treturn {o - p, o + p};\n\t\t\t}\n\t\t\tpoint p = (o * c.r - c.o * r) / (c.r - r);\n\t\t\treturn tangent(p);\n\t\t}\n\t\tstd :: vector<point> common_intangent_in(const circle &c) const {\n\t\t\tpoint p = (o * c.r + c.o * r) / (r + c.r);\n\t\t\treturn tangent(p);\n\t\t}\n\t\tdouble directed_triangle_intersection(const point &a, const point &b) const {\n\t\t\tbool ta = a.x * a.x + a.y * a.y < r * r + eps, tb = b.x * b.x + b.y * b.y < r * r + eps;\n\t\t\tstd :: vector<point> t = circle(point(0, 0), r).directed_line_cross_point(line(b, a));\n\t\t\tif (ta == 1 && tb == 1) return cross(a, b) / 2;\n\t\t\tif (ta == 1 && tb == 0) return angle(t.front(), b) * r * r / 2 + cross(a, t.front()) / 2;\n\t\t\tif (ta == 0 && tb == 1) return angle(a, t.back()) * r * r / 2 + cross(t.back(), b) / 2;\n\t\t\tdouble s = angle(a, b) * r * r / 2;\n\t\t\tif (distance_ps(point(0, 0), line(a, b)) > r - eps) return s;\n\t\t\treturn s + angle(t.front(), t.back()) * r * r / 2 - cross(t.front(), t.back()) / 2;\n\t\t}\n\t\tdouble directed_polygon_intersection(const polygon &g) const {\n\t\t\tint n = g.size();\n\t\t\tdouble s = 0;\n\t\t\tfor (register int i = 0; i < n; ++i)\n\t\t\t\ts += directed_triangle_intersection(g[i] - o, g[(i + 1) % n] - o);\n\t\t\treturn s;\n\t\t}\n\t};\n}\nusing namespace Geometry;\npoint p, t;\nline l, m;\npolygon g;\ncircle c;\nint n, q;\ndouble r;\nvoid CGL_1_A(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--) p.read(), l.projection(p).print();\n}\nvoid CGL_1_B(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--) p.read(), l.reflection(p).print();\n}\nvoid CGL_1_C(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--){\n\t\tp.read();\n\t\tint t = l.direction(p);\n\t\tif (t == COUNTER_CLOCKWISE) puts(\"COUNTER_CLOCKWISE\");\n\t\tif (t == CLOCKWISE) puts(\"CLOCKWISE\");\n\t\tif (t == ONLINE_BACK) puts(\"ONLINE_BACK\");\n\t\tif (t == ONLINE_FRONT) puts(\"ONLINE_FRONT\");\n\t\tif (t == ON_SEGMENT) puts(\"ON_SEGMENT\");\n\t}\n}\nvoid CGL_2_A(){\n\tscanf(\"%d\", &q);\n\twhile (q--){\n\t\tl.read(), m.read();\n\t\tif (parallel(l, m)) puts(\"2\");\n\t\telse if (orthogonal(l, m)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n}\nvoid CGL_7_H(){\n\tint n;\n\tdouble r;\n\tscanf(\"%d%lf\", &n, &r);\n\tpolygon g(n);\n\tfor (register int i = 0; i < n; ++i) g[i].read();\n\tprintf(\"%.10lf\\n\", fabs(circle(point(0, 0), r).directed_polygon_intersection(g)));\n}\nint main(){\n\tCGL_2_A();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <vector>\n#define EPS (1e-10)\n#define equals(a,b) (fabs(a)-fabs(b)<EPS)\n\n\nusing namespace std;\n\nclass Point{\npublic:\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }///这里注意，没有$\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double a) { return Point(x*a,y*a); }\n    Point operator / (double a) { return Point(x/a,y/a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point &p) const {\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n    }\n};\n\ntypedef Point Vector;\n///Program 16.3 表示线段的结构体\nstruct Segment{\n    Point p1,p2;\n};\n\n///Program 16.4 表示直线的结构体\ntypedef Segment Line;\n\n\n///内积，cos()函数\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n///外积，sin()函数\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\n///判断向量a和向量b是否正交\n///法一\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\n///法二\nbool isOrthogonal(Segment s1,Segment s2){\n    return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n///判断平行\n///法一\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\nbool isParallel(Segment s1,Segment s2){\n    return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nint main()\n{\n    int T;\n    scanf(\"%d\",&T);\n    while(T--){\n        Point p0,p1,p2,p3;\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p0.x,&p0.y,&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y);\n        if(isParallel(p0,p1,p2,p3))\n            printf(\"2\\n\");\n        else if(isOrthogonal(p0,p1,p2,p3))\n            printf(\"1\\n\");\n        else\n            printf(\"0\\n\");\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define dump(n) cout<<\"# \"<<#n<<'='<<(n)<<endl\n#define repi(i,a,b) for(int i=int(a);i<int(b);i++)\n#define peri(i,a,b) for(int i=int(b);i-->int(a);)\n#define rep(i,n) repi(i,0,n)\n#define per(i,n) peri(i,0,n)\n#define all(c) begin(c),end(c)\n#define mp make_pair\n#define mt make_tuple\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<ll> vl;\ntypedef vector<vl> vvl;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<string> vs;\n\nconst int INF=1e9;\nconst int MOD=1e9+7;\nconst double EPS=1e-9;\n\ntemplate<typename T1,typename T2>\nostream& operator<<(ostream& os,const pair<T1,T2>& p){\n\treturn os<<'('<<p.first<<','<<p.second<<')';\n}\ntemplate<typename T>\nostream& operator<<(ostream& os,const vector<T>& a){\n\tos<<'[';\n\trep(i,a.size()) os<<(i?\" \":\"\")<<a[i];\n\treturn os<<']';\n}\n\nstruct Point{\n\tdouble x,y;\n\tPoint(){}\n\tPoint(double x,double y):x(x),y(y){}\n\tPoint& operator+=(Point p){\n\t\tx+=p.x,y+=p.y;\n\t\treturn *this;\n\t}\n\tPoint& operator-=(Point p){\n\t\tx-=p.x,y-=p.y;\n\t\treturn *this;\n\t}\n\tPoint& operator*=(double c){\n\t\tx*=c,y*=c;\n\t\treturn *this;\n\t}\n\tPoint& operator/=(double c){\n\t\tx/=c,y/=c;\n\t\treturn *this;\n\t}\n};\nPoint operator+(Point a,Point b){\n\treturn a+=b;\n}\nPoint operator-(Point a,Point b){\n\treturn a-=b;\n}\nPoint operator*(Point a,double c){\n\treturn a*=c;\n}\nPoint operator*(double c,Point a){\n\treturn a*=c;\n}\nPoint operator/(Point a,double c){\n\treturn a/=c;\n}\nbool operator==(Point a,Point b){\n\treturn abs(a.x-b.x)<EPS && abs(a.y-b.y)<EPS;\n}\nbool operator!=(Point a,Point b){\n\treturn !(a==b);\n}\n\ndouble Dot(Point a,Point b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble Cross(Point a,Point b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\nvoid solve()\n{\n\tPoint a,b,c,d;\n\tcin>>a.x>>a.y>>b.x>>b.y>>c.x>>c.y>>d.x>>d.y;\n\tif(Cross(a-b,c-d)==0)\n\t\tcout<<2<<endl;\n\telse if(Dot(a-b,c-d)==0)\n\t\tcout<<1<<endl;\n\telse\n\t\tcout<<0<<endl;\n}\n\nint main()\n{\n\tint q; cin>>q;\n\trep(_,q) solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cctype>\n#include <utility>\n#include <complex>\nusing namespace std;\n\n#define _gp(l) const auto gcu{getchar##l}; const auto pcu{putchar##l}\n#ifdef __linux\n_gp(_unlocked);\n#else\n_gp();\n#endif\n#define _DEF(r, n, ...) inline r n(__VA_ARGS__) noexcept\n#define _T template<typename T>\n#define _HT template<typename H,typename... T>\n_T _DEF(T,in,int c){T n{};int m{1};while(isspace(c)){c=gcu();}if(c=='-')m=-1,c=gcu();do{n=10*n+(c-'0'),c=gcu();}while(c>='0'&&c<='9');return m*n;}\n_DEF(int,in,){return in<int>(gcu());}\n#define _SCAN(...) _DEF(bool,scan,__VA_ARGS__)\n_SCAN(char &c){c=gcu();gcu();return c!=EOF;}\n_T _SCAN(T &n){int c{gcu()};return c==EOF?false:(n=in<T>(c),true);}\n#define _OUT(...) _DEF(void,out,__VA_ARGS__)\n#define _OUTL(...) _DEF(void,outl,__VA_ARGS__)\n_OUT(bool b){pcu('0'+b);}\n_OUT(char c){pcu(c);}\n#ifdef _GLIBCXX_STRING\n_SCAN(string &s){int c;s=\"\";for(;;){c=gcu();if(c=='\\n'||c==' ')return true;else if(c==EOF)return false;s+=(char)c;}}\n_OUT(string s){for(char c:s)pcu(c);}\n#endif\n_OUT(const char *s){while(*s)pcu(*s++);}\n_T _OUT(T n){static char b[20];char *p{b};T m=n<0?pcu('-'),-1:1;if(!n)*p++='0';else while(n)*p++=(char)(n%10*m+'0'),n/=10;while(p!=b)pcu(*--p);}\n_OUTL(){out('\\n');}\n#ifdef _GLIBCXX_VECTOR\n_T _OUT(vector<T> v){for(T &x:v)out(&x == &v[0]?\"\":\" \"),out(x);}\n#endif\n_HT _SCAN(H &h,T&&... t){return scan(h)&&scan(t...);}\n_HT _OUT(H&& h, T&&... t){out(h);out(move(t)...);}\ntemplate <typename... T> _OUTL(T&&... t){out(move(t)...);outl();}\nstruct range{int e,b{0},s{1};range(int _b,int _e,int _s):e(_e),b(_b),s(_s){}range(int _b,int _e):e(_e),b(_b){}range(int _e):e(_e){}\n\tstruct it{int v,s;it(int _v,int _s):v(_v),s(_s){}operator int()const{return v;}operator int&(){return v;}int operator*()const{return v;}it& operator++(){v+=s;return *this;}};\n\tit begin(){return{b, s};}it end(){return{e,s};}bool inner(int n){return b<=n&&n<e;}};\n\nusing P = complex<double>;\n\nP read() {\n\tdouble x = in();\n\treturn P(x, in());\n}\n\nP line() {\n\tP a {read()};\n\treturn read() - a;\n}\n\nint main() {\n\tfor (int n {in()}; n; n--) {\n\t\tP a {line()}, b {line()}, d {conj(a) * b};\n\t\toutl(real(d) ? imag(d) ? 0 : 2 : 1);\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <complex>\n#include <cstdio>\n#include <cassert>\n#include <cmath>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\ndouble cross(const P& a, const P& b) {\n  return imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\nP vec(const L& l) {\n  return l[1]-l[0];\n}\n\nint main(){\n\tint T,x1,y1,x2,y2;\n\tfor(scanf(\"%d\",&T);T--;){\n\t\tscanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n\t\tL A(P(x1,y1),P(x2,y2));\n\t\tscanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n\t\tL B(P(x1,y1),P(x2,y2));\n\t\tif(abs(dot(vec(A),vec(B)))<EPS)puts(\"1\");\n\t\telse if(abs(cross(vec(A),vec(B)))<EPS)puts(\"2\");\n\t\telse puts(\"0\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "//{{{\n#include <bits/stdc++.h>\nusing namespace std;\n//types\ntypedef long long ll;\ntypedef pair<int,int> pii;\n//input\nbool SR(int &_x){return scanf(\"%d\",&_x)==1;}bool SR(ll &_x){return scanf(\"%lld\",&_x)==1;}\nbool SR(double &_x){return scanf(\"%lf\",&_x)==1;}bool SR(char *_s){return scanf(\"%s\",_s)==1;}\nbool RI(){return true;}\ntemplate<typename I,typename... T>bool RI(I &_x,T&... _tail){return SR(_x) && RI(_tail...);}\n//output\nvoid SP(const int _x){printf(\"%d\",_x);}void SP(const ll _x){printf(\"%lld\",_x);}\nvoid SP(const double _x){printf(\"%.16lf\",_x);}void SP(const char *s){printf(\"%s\",s);}\nvoid PL(){puts(\"\");}\ntemplate<typename I,typename... T>void PL(const I _x,const T... _tail)\n{SP(_x);if(sizeof...(_tail)) putchar(' ');PL(_tail...);}\n//macro\n#define SZ(x) ((int)(x).size())\n#define ALL(x) (x).begin(),(x).end()\n#define REP(i,n) for(int i=0;i<int(n);i++)\n#define REP1(i,a,b) for(int i=(a);i<=int(b);i++)\n#define PER1(i,a,b) for(int i=(a);i>=int(b);i--)\n#define pb push_back\n#define mkp make_pair\n#define F first\n#define S second\n//debug\n#ifdef darry140\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const pair<A,B> &_p){return _s<<\"(\"<<_p.F<<\",\"<<_p.S<<\")\";}\ntemplate<typename It>\nostream& _OUTC(ostream &_s,It _b,It _e)//container\n{\n    _s<<\"{\";\n    for(auto _it=_b;_it!=_e;_it++) _s<<(_it==_b?\"\":\" \")<<*_it;\n    _s<<\"}\";\n    return _s;\n}\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const map<A,B> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const set<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const vector<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename I>\nvoid _DOING(const char *_s,I&& _x){cerr<<_s<<\"=\"<<_x<<endl;}//without ','\ntemplate<typename I,typename... T>\nvoid _DOING(const char *_s,I&& _x,T&&... _tail)//with ','\n{\n    int _c=0;\n    static const char _bra[]=\"({[\";\n    static const char _ket[]=\")}]\";\n    while(*_s!=',' || _c!=0)//eg. mkp(a,b)\n    {\n        if(strchr(_bra,*_s)) _c++;\n        if(strchr(_ket,*_s)) _c--;\n        cerr<<*_s++;\n    }\n    cerr<<\"=\"<<_x<<\", \";\n    _DOING(_s+1,_tail...);\n}\n#define debug(...) do{\\\n    fprintf(stderr,\"%s:%d - \",__PRETTY_FUNCTION__,__LINE__);\\\n    _DOING(#__VA_ARGS__,__VA_ARGS__);\\\n}while(0)\n#else\n#define debug(...)\n#endif\n//}}}\ntypedef long double ld;\nconst ld global_eps=1e-8;\n#if 0\nenum cases{insi,bord,outs};//inside, border, outside\nenum cases{para,coin,inte};//parallel, coincide, intersect\n#else\nenum Case\n{\n    insi,bord,outs,//inside, border, outside\n    para,coin,inte, //parallel, coincide, intersect\n    tang,tang_in,tang_out //tangent\n};\n#endif\nint sign(ld x,ld eps=global_eps){return (x>=eps)-(x<=-eps);}\nint cmp(ld a,ld b,ld eps=global_eps){return sign(a-b,eps);}\nstruct Point\n{\n    ld x,y;\n    Point():x(0),y(0){}\n    Point(ld _x,ld _y):x(_x),y(_y){}\n    Point operator +(const Point &p) const\n    {return Point(x+p.x,y+p.y);}\n    Point operator -(const Point &p) const\n    {return Point(x-p.x,y-p.y);}\n    ld operator *(const Point &p) const\n    {return x*p.x+y*p.y;}\n    ld operator %(const Point &p) const\n    {return x*p.y-y*p.x;}   \n    bool operator <(const Point &p) const\n    {return tie(y,x) < tie(p.y,p.x);}\n    bool operator ==(const Point &p) const\n    {return tie(y,x) == tie(p.y,p.x);}\n    Point operator /(const ld &l) const\n    {return Point(x/l,y/l);}\n    Point operator *(const ld &l) const\n    {return Point(x*l,y*l);}\n    ld len() const{return hypot(x,y);}\n    ld len2() const{return x*x+y*y;}\n    ld dis(const Point &a)const{return (*this-a).len();}\n    ld dis2(const Point &a)const{return (*this-a).len2();}\n    Point unit()const{return *this/len();}\n    Point resize(const ld &l)const{return unit()*l;}\n};\nstruct Line\n{\n    Point p1,p2;\n    Line(){}\n    Line(Point a,Point b):p1(a),p2(b){}\n    Point way() const{return p2-p1;}\n    Point norm() const{return {p1.y-p2.y,p2.x-p1.x};}\n    bool online(const Point &p) const{return sign((p-p1)%way())==0;}\n    bool onsegment(const Point &p)const\n    {\n        return online(p) && sign((p-p1)*(p2-p))>=0;\n    }\n    pair<int,Point> intersect(const Line &I) const\n    {\n        if(sign(I.way()%way())==0) return {online(I.p1)?coin:para,{0,0}};\n        const Point &p3=I.p1,&p4=I.p2;\n        auto _143=(p1-p4)%(p4-p3),_342=(p3-p4)%(p4-p2);\n        return {inte,(p1*_342+p2*_143)/(_143+_342)};\n    }\n    ld linedistance(const Point &p) const\n    {\n        return abs((p-p1)%way())/way().len();\n    }\n    Point project(const Point &p) const\n    {\n        return intersect(Line(p,p+norm())).second;\n    }\n    ld segmentdistance(const Point &p) const\n    {\n        const auto &pro=project(p);\n        if(onsegment(pro)) return p.dis(pro);\n        return min(p.dis(p1),p.dis(p2));\n    }\n};\nint main()\n{\n    int t;RI(t);\n    while(t--)\n    {\n        Point p[4];\n        REP(i,4) cin>>p[i].x>>p[i].y;\n        Line I(p[0],p[1]),J(p[2],p[3]);\n        if(sign(I.way()%J.way())==0) PL(2);\n        else if(sign(I.way()*J.way())==0) PL(1);\n        else PL(0);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n/*******************??????********************/\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const P& a, const P& b) {//??????\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {//??????\n\treturn real(conj(a)*b);\n}\n\nstruct L : public vector<P> {//??????\n\tL(const P &a, const P &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ntypedef vector<P> G;\nstruct C {//???\n\tP p; double r;\n\tC(const P &p, double r) : p(p), r(r) { }\n};\n\nint ccw(P a, P b, P c) {//??????????????????\n\tb -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\nbool intersectLL(const L& l,const L& m){\n\t//non-parallel || sameline\n\treturn abs(cross(l[1]-l[0],m[1]-m[0])) > EPS || abs(cross(l[1]-l[0],m[0]-l[0])) < EPS;\n}\nbool intersectLS(const L& l,const L& s){\n\t// s[0] is left of l,s[1] is right of l\n\treturn cross(l[1]-l[0],s[0]-l[0]) * cross(l[1]-l[0],s[1]-l[0]) < EPS;\n}\nbool intersectLP(const L& l,const P& p){\n\treturn abs(cross(l[1]-p,l[0]-p)) < EPS;\n}\nbool intersectSP(const L& s,const P& p){\n\treturn abs(s[0]-p)+abs(s[1]-p) - abs(s[1]-s[0]) < EPS;// triangle inequality\n}\n// ??´???????????????\nbool orthogonalLL(const L &l1, const L &l2){\n\treturn (dot(l1[0]-l1[1], l2[0]-l2[1]) <= EPS && dot(l1[0]-l1[1], l2[0]-l2[1]) >= -EPS);\n}\n// ??????????????????\nbool parallelLL(const L &l1, const L &l2){\n\treturn (cross(l1[0]-l1[1], l2[0]-l2[1]) <= EPS && cross(l1[0]-l1[1], l2[0]-l2[1]) >= -EPS);\n}\n\nP projection(const L& l,const P& p){\n\tdouble t = dot(p-l[0],l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\nP reflection(const L& l,const P& p){\n\treturn p + 2. * (projection(l,p) - p);\n}\ndouble distanceLP(const L& l,const P& p){\n\treturn abs(p - projection(l,p));\n}\ndouble distanceLL(const L& l,const L& m){\n\treturn intersectLL(l,m) ? 0 : distanceLP(l,m[0]);\n}\ndouble distanceLS(const L& l,const L& s){\n\tif(intersectLS(l,s)) return 0;\n\treturn min(distanceLP(l, s[0]),distanceLP(l, s[1]));\n}\n\nint main(void){\n\tint q;\n\tcin >> q;\n\tfor(int i=0;i<q;i++){\n\t\tvector<P> p(4);\n\t\tint x,y;\n\t\tfor(int j=0;j<4;j++){\n\t\t\tcin >> x >> y;\n\t\t\tp[j] = P(x,y);\n\t\t}\n\t\tL l0(p[0],p[1]),l1(p[2],p[3]);\n\t\tif(orthogonalLL(l0,l1))cout << 1 << endl;\n\t\telse if(parallelLL(l0,l1))cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i, N) for (int i = 0; i < (int)N; ++i)\n#define all(a) (a).begin(), (a).end()\nconst double EPS = 1e-10;\nbool equals(double a, double b) { return fabs(a - b) < EPS; }\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator+(const Point &p) const { return Point(x + p.x, y + p.y); }\n  Point operator-(const Point &p) const { return Point(x - p.x, y - p.y); }\n  Point operator*(const double a) { return Point(a * x, a * y); }\n  Point operator/(const double a) { return Point(x / a, y / a); }\n\n  double abs() const { return sqrt(norm()); }\n  double norm() const { return x * x + y * y; }\n\n  Point rotate(double theta) const {\n    return Point(cos(theta) * x - sin(theta) * y,\n                 sin(theta) * x + cos(theta) * y);\n  }\n\n  Point normalize() const { return Point(*this) / abs(); }\n\n  bool operator<(const Point &p) const { return x != p.x ? x < p.x : y < p.y; }\n\n  bool operator==(const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n  friend istream &operator>>(istream &is, Point &p) { return is >> p.x >> p.y; }\n};\n\ndouble abs(const Point &p) { return p.abs(); }\ndouble norm(const Point &p) { return p.norm(); }\n\ntypedef Point Vector;\n\nclass Segment {\n public:\n  Point p1, p2;\n  Segment() {}\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n  friend istream &operator>>(istream &is, Segment &s) {\n    return is >> s.p1 >> s.p2;\n  }\n};\n\ntypedef Segment Line;\n\nclass Circle {\n public:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n\n  int contains(const Point &p) const {\n    double d = abs(c - p);\n    if (equals(d, r)) return 1;  // ON\n    if (d < r + EPS) return 2;   // IN\n    return 0;                    // OUT\n  }\n};\n\ntypedef vector<Point> Polygon;\n\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\n\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n  return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p) * 2.0; }\n\ndouble distance(Point a, Point b) { return (a - b).abs(); }\n\ndouble distanceLP(Line l, Point p) {\n  return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble distanceSP(Segment s, Point p) {\n  if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n  if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n  return distanceLP(s, p);\n}\n\nbool intersect(Segment s1, Segment s2);\ndouble distance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) return 0.0;\n  return min({distanceSP(s1, s2.p1), distanceSP(s1, s2.p2),\n              distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)});\n}\n\nenum CCW {\n  COUNTER_CLOCKWISE = 1,\n  CLOCKWISE = -1,\n  ONLINE_BACK = 2,\n  ONLINE_FRONT = -2,\n  ON_SEGMENT = 0,\n};\n\nCCW ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;      // p2, p0, p1\n  if (a.norm() < b.norm()) return ONLINE_FRONT;  // p0, p1, p2\n  return ON_SEGMENT;                             // p0, p2, p1\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n          ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint crossPoint(Segment s1, Segment s2) {\n  Vector base = s2.p2 - s2.p1;\n  double d1 = abs(cross(base, s1.p1 - s2.p1));\n  double d2 = abs(cross(base, s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\nbool intersect(Circle c, Line l) { return distanceLP(l, c.c) < c.r; }\n\npair<Point, Point> crossPoint(Circle c, Line l) {\n  assert(intersect(c, l));\n  Vector pr = project(l, c.c);\n  Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n  double base = sqrt(c.r * c.r - norm(pr - c.c));\n  return make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\nbool intersect(Circle c1, Circle c2) {\n  return (c1.c - c2.c).abs() < c1.r + c2.r;\n}\n\npair<Point, Point> crossPoint(Circle c1, Circle c2) {\n  assert(intersect(c1, c2));\n  double d = abs(c1.c - c2.c);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/*\n  IN 2\n  ON 1\n  OUT 0\n*/\nint contains(Polygon g, Point p) {\n  int n = g.size();\n  bool x = false;\n  for (int i = 0; i < n; ++i) {\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n    if (a.y > b.y) swap(a, b);\n    if (a.y < EPS & EPS < b.y && cross(a, b) > EPS) x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nPolygon convexHull(Polygon s) {\n  Polygon u, l;\n  if (s.size() < 3) return s;\n  sort(s.begin(), s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size() - 1]);\n  l.push_back(s[s.size() - 2]);\n\n  for (int i = 2; i < s.size(); ++i) {\n    for (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE;\n         --n) {\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n\n  for (int i = s.size() - 3; i >= 0; i--) {\n    for (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE;\n         --n) {\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n\n  reverse(l.begin(), l.end());\n  for (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n\n  return l;\n}\n\nCircle circumscribedCircle(const Point &a, const Point &b, const Point &c) {\n  double a1, a2, b1, b2, c1, c2;\n  a1 = 2 * (b.x - a.x);\n  b1 = 2 * (b.y - a.y);\n  c1 = a.x * a.x - b.x * b.x + a.y * a.y - b.y * b.y;\n  a2 = 2 * (c.x - a.x);\n  b2 = 2 * (c.y - a.y);\n  c2 = a.x * a.x - c.x * c.x + a.y * a.y - c.y * c.y;\n  Point p;\n  p.x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n  p.y = (c1 * a2 - c2 * a1) / (a1 * b2 - a2 * b1);\n\n  return Circle(p, abs(p - a));\n}\n\nint main() {\n  int q;\n  cin >> q;\n  rep(i, q) {\n    Segment s1, s2;\n    cin >> s1 >> s2;\n    if (isParallel(s1, s2)) {\n      cout << 2;\n    } else if (isOrthogonal(s1, s2)) {\n      cout << 1;\n    } else {\n      cout << 0;\n    }\n    cout << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "# coding: utf-8\n# Here your code !\n\nq = int(raw_input())\nfor i in range(q):\n    xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3 = map(float,raw_input().split())\n    if xp1 - xp0 == 0:\n        if xp3 - xp2 == 0:\n            print 2\n        elif yp3 - yp2 == 0:\n            print 1\n        else:\n            print 0\n    elif xp3 - xp2 == 0:\n        if xp1 - xp0 == 0:\n            print 2\n        elif yp1 - yp0 == 0:\n            print 1\n        else:\n            print 0\n    \n    else:\n        s1 = (yp1 - yp0, xp1 - xp0)\n        s2 = (yp3 - yp2, xp3 - xp2)\n        if s1[0]/s1[1] == s2[0]/s2[1]:\n            print 2\n        elif s1[0]*s2[0] + s1[1]*s2[1] == 0:\n            print 1\n        else:\n            print 0"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#include<vector>\n#include<iomanip>\n\nusing namespace std;\n\ntypedef complex<double> P;\n\n#define EPS 1e-9\n#define shosu(x) fixed<<setprecision(x)\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\nstruct C{\n  P c;double r;\n  C(const P &c,double r):c(c),r(r){}\n};\n\nnamespace std{//演算子の定義\n  bool operator < (const P& a,const P& b){\n    return real(a)!= real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b)\n  }\n  bool operator == (const P& a,const P& b){\n    return a.real()==b.real() && a.imag()==b.imag();\n  }\n}\n\ndouble dot(P a,P b){\n  return real(conj(a)*b);\n}\n\ndouble cross(P a,P b){\n  return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c) {//3点の関係性\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;                               // a--c--b on line\n}\n\nP projection(L l, P p){//pの直線l上の射影の点\n  double t=dot(p-l[0],l[0]-l[1])/norm(l[0]-l[1]);\n  return l[0]+t*(l[0]-l[1]);\n}\n\nP reflection(L l, P p){//点pの直線lに関して対称な点\n  return p+2.0*(projection(l,p)-p);\n}\n\nbool isOrthogonal(L l1, L l2){//2直線の直交判定\n  return fabs(dot(l1[1]-l1[0],l2[1]-l2[0])) < EPS;\n}\n\nbool isParallel(L l1, L l2){//2直線の平行判定\n  return fabs(cross(l1[1]-l1[0],l2[1]-l2[0])) < EPS;\n}\n\nP inP(){\n  double x,y;\n  cin >> x >> y;\n  P p(x,y);\n  return p;\n}\n\nint main(){\n\n  int q;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    P p1,p2,p3,p4;\n    p1=inP();\n    p2=inP();\n    p3=inP();\n    p4=inP();\n    L l1(p1,p2),l2(p3,p4);\n    if(isOrthogonal(l1,l2)){\n      cout<<1<<endl;\n    }else if(isParallel(l1,l2)){\n      cout<<2<<endl;\n    }else{\n      cout<<0<<endl;\n    }\n  }\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cctype>\n#include <limits.h>\n#include <math.h>\n#include <complex>\n#include <bitset>\n#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <string>\n#include <sstream>\n#include <algorithm>\n#include <iomanip>\n#include <iostream>\n\n#define VARIABLE(x) cerr << #x << \"=\" << x << endl\n#define BINARY(x) static_cast<bitset<16> >(x)\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define REP(i,m,n) for (int i=m;i<(int)(n);i++)\n#define if_range(x, y, w, h) if (0<=(int)(x) && (int)(x)<(int)(w) && 0<=(int)(y) && (int)(y)<(int)(h))\n#define ALL(a) (a).begin(),(a).end()\nconst int INF = 1e9;\nconst double PI = 3.14159;\nint dx[4]={0, 1, 0, -1}, dy[4]={-1, 0, 1, 0};\nusing namespace std;\ntypedef long long ll;\n//typedef pair<int, int> P;\n\n/* struct P {\n\tint x, y, n;\n\tP(int n, int x, int y):n(n), x(x), y(y){}\n\tP(){}\n}; */\n\n\n/** 幾何ライブラリ **/\n// to do : 1183\n\n#include <complex>\n\n#define X real()\n#define Y imag()\n\nconst double EPS = 1e-11;\n\ntypedef double D;\ntypedef complex<D> P; // Point\n\nstruct L { // Line\n\tP a, b;\n\tL(){}\n\tL(P aa, P bb) : a(aa), b(bb){}\n};\n\n// 共役複素数 conj(a);\n\n// 符号\nint sig(D a, D b=0) { return a < b - EPS ? -1 : (a > b + EPS ? 1 : 0); }\n\n// 内積\nD dot(P a, P b) { return (conj(a)*b).real(); }\n\n// 外積\nD cross(P a, P b) { return (conj(a)*b).imag(); }\n\n// 線分abに対する点cの位置\nenum CCW{LEFT=1, RIGHT=-1, BACK=2, FRONT=-2, ON=0};\nint ccw(P a, P b, P c)\n{\n\tb -= a, c -= a;\n\tD s = sig(cross(b, c));\n\tif (s) return s>0 ? LEFT : RIGHT;\n\tif (sig(dot(b, c))<0) return BACK;\n\tif (sig(abs(c), abs(b))>0) return FRONT;\n\treturn ON;\n}\n\n// 直線abと点cの距離\nD distLP(L l, P c)\n{\n\treturn abs(cross(l.b-l.a, c-l.a))/abs(l.b-l.a);\n}\n\n// 線分abと点cの距離\nD distSP(L l, P c)\n{\n\tif (sig(dot(l.b-l.a, c-l.a))<0) return abs(c-l.a);\n\tif (sig(dot(l.a-l.b, c-l.b))<0) return abs(c-l.b);\n\treturn abs(cross(l.b-l.a, c-l.a))/abs(l.b-l.a);\n}\n\n// 線分と線分の交差判定\nbool iSS(L s, L t)\n{\n\treturn (ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0)\n\t\t\t&& (ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0);\n}\n\n// 線分と線分の交点 (公差していることが前提)\nP cSS(L s, L t)\n{\n\tD d1 = distLP(t, s.a);\n\tD d2 = distLP(t, s.b);\n\tD tmp = d1 / (d1 + d2);\n\treturn s.a + (s.b-s.a)*tmp;\n}\n\n// 直線と直線の交差判定\nbool iLL(L s, L t)\n{\n\treturn sig(cross(s.b-s.a, t.b-t.a))!=0;\n}\n\n/** Problem CGL_2-A : Parallel/Orthogonal **/\n int main()\n {\n\tL s, t;\n\tint q; cin>>q;\n\trep(i, q) {\n\t\tcin>>s.a.X>>s.a.Y>>s.b.X>>s.b.Y;\n\t\tcin>>t.a.X>>t.a.Y>>t.b.X>>t.b.Y;\n\t\t\n\t\tcout << fixed << setprecision(15);\n\t\tif (sig(cross(s.a-s.b, t.a-t.b))==0) cout << 2 << endl;\n\t\telse if (sig(dot(s.a-s.b, t.a-t.b))==0) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n }"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define mod 1000000007\n\nstruct Point\n{\n    // 座標上の点\n    double x,y;\n};\n\n// ベクトル\ntypedef Point Vector;\n\n\nstruct Seg\n{\n    // 点a,bを通る直線\n    Point a,b;\n};\n\ntypedef Seg Line;\n\n// 二つのベクトルの内積\ndouble dot(Vector a, Vector b){\n    return a.x*b.x + a.y*b.y;\n}\n\n// 二つのベクトルの外積\ndouble cross(Vector a, Vector b){\n    return a.x*b.y-a.y*b.x;\n\n}\n\nPoint vecminus (Point p1, Point p2){\n    Point p;\n    p.x = p1.x-p2.x;\n    p.y = p1.y-p2.y;\n    return p;\n}\n\nbool isOrthogonal(Line l1, Line l2);\nbool isParallel(Line l1, Line l2);\n\nint main(){\n    int q; cin >> q;\n    for(int i = 0; i < q; i++){\n        Line l1,l2;\n        Point p1,p2,p3,p4;\n        int x1,y1,x2,y2;\n        cin >> x1 >> y1 >> x2 >> y2;\n        p1.x = x1; p1.y = y1; p2.x = x2; p2.y = y2;\n        cin >> x1 >> y1 >> x2 >> y2;\n        p3.x = x1; p3.y = y1; p4.x = x2; p4.y = y2;\n\n        l1.a = p1; l1.b = p2;\n        l2.a = p3; l2.b = p4;\n        if(isOrthogonal(l1,l2)) cout << 1 << endl;\n        else if(isParallel(l1,l2)) cout << 2 << endl;\n        else cout << 0 << endl;\n\n    }\n    return 0;\n}\n\nbool isOrthogonal(Line l1, Line l2){\n    return dot(vecminus(l1.a, l1.b) , vecminus(l2.a, l2.b)) == 0;\n}\nbool isParallel(Line l1, Line l2){\n    return cross(vecminus(l1.a, l1.b) , vecminus(l2.a, l2.b)) == 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <utility>\n\nusing namespace std;\n\nint main(void){\n\n    pair<double, double> p0, p1, p2, p3;\n    int n;\n    cin >> n;\n\n    while(n--){\n\n        cin >> p0.first >> p0.second;\n        cin >> p1.first >> p1.second;\n        cin >> p2.first >> p2.second;\n        cin >> p3.first >> p3.second;\n\n        double slope0 = (p1.second - p0.second)/(p1.first - p1.second);\n        double slope1 = (p3.second - p2.second)/(p3.first - p2.second);\n\n        if(slope0 == slope1){\n            cout << \"2\" << endl;\n        }else if(slope0 == -(1/slope1)){\n            cout << \"1\" << endl;\n        }else{\n            cout << \"0\" << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <complex>\n#include <iostream>\nusing namespace std; \n#define X real()\n#define Y imag()\n\nconst double EPS = 1e-10;\n\nbool EQ(double a,double b){\n  return fabs(a-b) < EPS;\n}\n\ntypedef complex<double> Point;\n\nnamespace std {\n  bool operator == (const Point &a, const Point &b) {\n    return EQ(a.X, b.X) && EQ(a.Y, b.Y);\n  }\n  bool operator < (const Point &a, const Point &b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n  }\n}\nstruct Segment {\n  Point p1, p2;\n  Segment(){};\nSegment(Point p1, Point p2) : p1(p1), p2(p2) {};\n};\n\ntypedef Segment Line;\ndouble dot(Point a, Point b){\n  return a.X * b.X + a.Y * b.Y;\n}\ndouble cross(Point a, Point b){\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\nPoint project(Segment s, Point p) {\n  double r = dot(p - s.p1, s.p2 - s.p1) / norm(s.p2 - s.p1);\n  return s.p1 + (s.p2 - s.p1) * r;\n}\n\nPoint reflect(Segment s, Point p) {\n  return p + (project(s, p) - p) * 2.0;\n}\n\nbool isOrthogonal(Line l1, Line l2) {\n  return EQ(dot(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\nbool isParallel(Line l1, Line l2) {\n  return EQ(cross(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\n\nbool intersectLP(Line l, Point p) {\n  return EQ(cross(l.p2 - p, l.p1 - p), 0.0);\n}\nbool intersectSP(Segment s, Point p) {\n  return EQ(abs(s.p1 - p) + abs(p - s.p2), abs(s.p2 - s.p1));\n}\n\nconst int COUNTER_CLOCKWISE = +1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = +2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\nint ccw(Point a, Point b, Point c) {\n  Point x = b - a;\n  Point y = c - a;\n  if(cross(x, y) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(x, y) < -EPS) return CLOCKWISE;\n  if(dot(x, y) < -EPS) return ONLINE_BACK;\n  if(norm(x) < norm(y)) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nint main()\n{\n  int n;\n  cin >> n;\n\n  Line x1,x2;\n  for(int i=0;i<n;i++){\n    cin >> x1.p1.X >> x1.p1.Y >> x1.p2.X >> x1.p2.Y;\n    cin >> x2.p1.X >> x2.p1.Y >> x2.p2.X >> x2.p2.Y;\n    \n    if(isParallel(x1,x2)){\n      printf(\"2\\n\");\n    }else if(isOrthogonal(x1,x2)){\n      printf(\"1\\n\");\n    }else{\n      printf(\"0\\n\");\n    }\n\n\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<math.h>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point\n{\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n    Point operator * (double a) {return Point(x * a, y * a);}\n    Point operator / (double a) {return Point(x / a, y / a);}\n\n    double abs() {return sqrt(norm());}\n    double norm() {return x * x + y * y;}\n    \n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};typedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1 - a2, b1 - b2);\n}\n\n#include<iostream>\nint main(){\n    int q, dots[8];\n    std::cin >> q;\n    for (int i = 0; i < q; i++)\n    {\n        for (int i = 0; i < 8; i++)\n            std::cin >> dots[i];\n        Point a1 = Point(dots[0], dots[1]);\n        Point a2 = Point(dots[2], dots[3]);\n        Point b1 = Point(dots[4], dots[5]);\n        Point b2 = Point(dots[6], dots[7]);\n        if (isParallel(a1, a2, b1, b2))\n            std::cout << 2 << std::endl;\n        else if (isOrthogonal(a1, a2, b1, b2))\n            std::cout << 1 << std::endl;\n        else\n            std::cout << 0 << std::endl;\n    }   \n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <deque>\n#include <queue>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define mp make_pair\n#define pb push_back\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n    return a < -EPS ? -1 : a > EPS;\n}\n\ninline int cmp(db a, db b){//?????????????????°\n    return sign(a-b);\n}\n\nstruct P {//???\n    db x, y;\n    P() {}\n    P(db _x, db _y) : x(_x), y(_y) {}\n    P operator+(P p) { return P(x + p.x, y + p.y); }\n    P operator-(P p) { return P(x - p.x, y - p.y); }\n    P operator*(db d) { return P(x * d, y * d); }\n    P operator/(db d) { return P(x / d, y / d); }\n    bool operator<(P p) const {\n        int c = cmp(x, p.x);\n        if (c) return c == -1;\n        return cmp(y, p.y) == -1;\n    }\n    db dot(P p) { return x * p.x + y * p.y; }//????§?\n    db det(P p) { return x * p.y - y * p.x; }//????§?\n    db distTo(P p) { return (*this-p).abs(); }//??????\n    db alpha() { return atan2(y, x); }//?±?????§?\n    void read() { cin>>x>>y; }//?????\\\n    db abs() { return sqrt(abs2());}//??????\n    db abs2() { return x * x + y * y; }//???????????????\n    P rot90() { return P(-y,x);}//?????¶????????¬90???\n    P unit() { return *this/abs(); }//?????????\n    int quad() const { return sign(y) == 1 || (sign(y) == 0 && sign(x) >= 0); }//????§?????????¨[0,180)?????´\n};\n\nstruct L{ //ps[0] -> ps[1]\n    P ps[2];\n    P& operator[](int i) { return ps[i]; }\n    P dir() { return ps[1] - ps[0]; }//??´??????????????????\n    bool include(P p) { return sign((ps[1] - ps[0]).det(p - ps[0])) > 0; }//????????¨?????????????????¢????????¶????????¨???\n    L push(){ // push eps outward\n        const double eps = 1e-6;\n        P delta = (ps[1] - ps[0]).rot90().unit() * eps;\n        return {ps[0] - delta, ps[1] - delta};\n    }\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isLL(P p1, P p2, P q1, P q2) {//?±??????´?????????\n    db a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n    return (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nP isLL(L l1,L l2){ return isLL(l1[0],l1[1],l2[0],l2[1]); }//?±??????´?????????\n\nbool intersect(db l1,db r1,db l2,db r2){\n    if(l1>r1) swap(l1,r1); if(l2>r2) swap(l2,r2);\n    return !( cmp(r1,l2) == -1 || cmp(r2,l1) == -1 );\n}\n\nbool isSS(P p1, P p2, P q1, P q2){//?±?????????????\n    return intersect(p1.x,p2.x,q1.x,q2.x) && intersect(p1.y,p2.y,q1.y,q2.y) &&\n           crossOp(p1,p2,q1) * crossOp(p1,p2,q2) <= 0 && crossOp(q1,q2,p1)\n                                                         * crossOp(q1,q2,p2) <= 0;\n}\n\nbool isMiddle(db a, db m, db b) {//??????m????????¨a,b?????´\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n\nbool isMiddle(P a, P m, P b) {//?????????m?????????????????¨a,b?????´\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nbool onSeg(P p1, P p2, P q){//?????????????????¨??´??????\n    return crossOp(p1,p2,q) == 0 && isMiddle(p1, q, p2);\n}\n\nP proj(P p1, P p2, P q) {//????????´???????????±\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\n\nP reflect(P p1, P p2, P q){//????????´??????????§°\n    return proj(p1,p2,q) * 2 - q;\n}\n\ndb nearest(P p1,P p2,P q){\n    P h = proj(p1,p2,q);\n    if(isMiddle(p1,h,p2))\n        return q.distTo(h);\n    return min(p1.distTo(q),p2.distTo(q));\n}\n\ndb disSS(P p1, P p2, P q1, P q2){\n    if(isSS(p1,p2,q1,q2)) return 0;\n    return min(min(nearest(p1,p2,q1),nearest(p1,p2,q2)), min(nearest(q1,q2,p1),nearest(q1,q2,p2)) );\n}\n\ndb rad(P p1,P p2){\n    return atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n    db A = p1.distTo(p2);\n    db B = p2.distTo(p3);\n    db C = p3.distTo(p1);\n    return sqrtl(A*B*C/(A+B+C));\n}\n\n\n\nint main(){\n    L l[2];\n    int q;\n    scanf(\"%d\",&q);\n    for(int i = 1;i <= q;i++){\n        for(int j = 0;j < 2;j++){\n            l[j][0].read();l[j][1].read();\n        }\n        if(l[0].dir().det(l[1].dir()) == 0){\n            printf(\"2\\n\");\n        }else if(l[0].dir().dot(l[1].dir()) == 0){\n            printf(\"1\\n\");\n        }else{\n            printf(\"0\\n\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<iostream>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\nusing namespace std;\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x=0, double y=0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(x*a, y*a); }\n    Point operator / (double a) { return Point(x/ a, y/ a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x, y*y; }\n    bool operator < (const Point &p) const {\n\treturn x != p.x ? x<p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const {\n\treturn fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.x*b.x + a.y*b.y;\n}\ndouble cross(Vector a, Vector b) {\n    return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Point p0, Point p1, Point p2, Point p3) {\n    return dot(p0 - p1, p2-p3) == 0.0;\n}\n\nbool isParallel(Point p0, Point p1, Point p2, Point p3) {\n    return cross(p0-p1, p2-p3) == 0.0;\n}\n\nint main() {\n    int q,i;\n    cin >> q;\n    Point p0, p1, p2, p3;\n    for(i=0;i<q;i++){\n\tcin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n\tif (isOrthogonal(p0,p1,p2,p3)) cout << 1 << endl;\n\telse if(isParallel(p0,p1,p2,p3)) cout << 2 << endl;\n\telse cout << 0 << endl;\n    }\n    return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\n#include<queue>\n#include<iostream>\n#include<set>\n#include<map>\n#define re register\n#define ll long long\nusing namespace std;\ninline int gi(){\n\tint f=1,sum=0;char ch=getchar();\n\twhile(ch>'9'|| ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9'){sum=(sum<<3)+(sum<<1)+ch-'0';ch=getchar();}\n\treturn sum*f;\n}\nconst double eps=1e-10,Pi=acos(-1.0);\nstruct node{\n\tdouble x,y;\n\tnode operator+(node b){return (node){x+b.x,y+b.y};}\n\tnode operator-(node b){return (node){x-b.x,y-b.y};}\n\tnode operator*(double b){return (node){x*b,y*b};}\n\tdouble len(){return sqrt(x*x+y*y);}\n};\nint fh(double a){return fabs(a)<eps?0:a>eps?1:-1;}\ndouble cross(node a,node b){return a.x*b.y-a.y*b.x;}\ndouble dot(node a,node b){return a.x*b.x+a.y*b.y;}\nnode projection(node p1,node p2,node p){node v=p2-p1;return p1+v*(dot(v,p-p1)/dot(v,v));}\nnode reflection(node p1,node p2,node p){node P=projection(p1,p2,p);P=P*2-p;return P;}\nvoid Counter_Clockwise(node p1,node p2,node p){\n\tif(cross(p2-p1,p-p1)>eps){puts(\"COUNTER_CLOCKWISE\");return;}\n\tif(cross(p2-p1,p-p1)<-eps){puts(\"CLOCKWISE\");return;}\n\tif(dot(p2-p1,p-p1)<-eps){puts(\"ONLINE_BACK\");return;}\n\tif(dot(p2-p1,p2-p1)>=dot(p-p1,p2-p1)){puts(\"ON_SEGMENT\");return;}\n\tputs(\"ONLINE_FRONT\");\n}\nbool insegment(node A,node B,node p){\n\tif(fh(cross(B-A,p-A)))return false;\n\treturn ((fh(p.x-A.x)>=0 && fh(B.x-p.x)>=0) || (fh(p.x-A.x)<=0 && fh(B.x-p.x)<=0)) && ((fh(p.y-A.y)>=0 && fh(B.y-p.y)>=0) || (fh(p.y-A.y)<=0 && fh(B.y-p.y)<=0));\n}\nint parallel(node A1,node A2,node B1,node B2){\n\tif(!fh(cross(B2-B1,A2-A1)))return 2;\n\tif(!fh(dot(B2-B1,A2-A1)))return 1;\n\treturn 0;\n}\nbool intersection(node A1,node A2,node B1,node B2){\n\tif(!fh(cross(B2-B1,A2-A1))){\n\t\tif(insegment(A1,A2,B1) || insegment(A1,A2,B2) || insegment(B1,B2,A1) || insegment(B1,B2,A2))return true;\n\t\treturn false;\n\t}\n\treturn fh(cross(A1-B1,B2-B1)*cross(A2-B1,B2-B1))<=0 && (fh(cross(B1-A1,A2-A1)*cross(B2-A1,A2-A1))<=0);\n}\nint main(){\n\tnode p1,p2,p3,p4;\n\tint Q=gi();\n\twhile(Q--){\n\t\tp1.x=gi();p1.y=gi();p2.x=gi();p2.y=gi();\n\t\tp3.x=gi();p3.y=gi();p4.x=gi();p4.y=gi();\n\t\tprintf(\"%d\\n\",parallel(p1,p2,p3,p4));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nconst double EPS = 1e-9;\nconst double PI = acos(-1);\n\nint sign(double x) {\n    if (fabs(x) < EPS) {\n        return 0;\n    } else if (x > 0) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nint dcmp(double x, double y) {\n    return sign(x - y);\n}\n\nstruct Vector;\ntypedef Vector Point;\n\nstruct Vector {\n    double x;\n    double y;\n\n    explicit Vector(double x = 0, double y = 0);\n\n    Vector operator+(const Vector &rhs) const;\n    Vector operator-() const;\n    Vector operator-(const Vector &rhs) const;\n    Vector operator*(double d) const;\n    Vector operator/(double d) const;\n    double operator*(const Vector &rhs) const;\n    double operator^(const Vector &rhs) const;\n\n    bool operator==(const Vector &rhs) const;\n    bool operator!=(const Vector &rhs) const;\n    bool operator<(const Vector &rhs) const;\n    bool operator>(const Vector &rhs) const;\n    bool operator<=(const Vector &rhs) const;\n    bool operator>=(const Vector &rhs) const;\n\n    friend std::ostream &operator<<(std::ostream &os, const Vector &vector);\n\n    double dot(const Vector &rhs) const;\n    double cross(const Vector &rhs) const;\n    double length() const;\n    double length2() const;\n    double angle() const;\n    double angle(const Vector &rhs) const;\n    Vector rotate(double rad) const;\n    Vector rotate90() const;\n    Vector rotate90R() const;\n    Vector normal() const;\n    Vector truncate(double d) const;\n    double getDistanceTo(const Point &p) const;\n\n    static bool cmpByAngle(const Vector &a, const Vector &b);\n};\n\nstruct Line {\n    Point a;\n    Point b;\n\n    explicit Line(double x1 = 0, double y1 = 0, double x2 = 0, double y2 = 0);\n    explicit Line(const Point &a = Point(), const Point &b = Point());\n\n    double getDistanceTo(const Point &p) const;\n    Point getIntersection(const Line &rhs) const;\n    Point getProjection(const Point &p) const;\n    Point getReflection(const Point &p) const;\n    bool contains(const Point &p) const;\n    bool intersects(const Line &rhs) const;\n    bool parallels(const Line &rhs) const;\n};\n\n\nVector::Vector(double x, double y) : x(x), y(y) {}\n\nVector Vector::operator+(const Vector &rhs) const {\n    return Vector(x + rhs.x, y + rhs.y);\n}\n\nVector Vector::operator-() const {\n    return Vector(-x, -y);\n}\n\nVector Vector::operator-(const Vector &rhs) const {\n    return *this + -rhs;\n}\n\nVector Vector::operator*(double d) const {\n    return Vector(x * d, y * d);\n}\n\nVector Vector::operator/(double d) const {\n    return *this * (1 / d);\n}\n\ndouble Vector::operator*(const Vector &rhs) const {\n    return x * rhs.x + y * rhs.y;\n}\n\ndouble Vector::operator^(const Vector &rhs) const {\n    return x * rhs.y - rhs.x * y;\n}\n\nbool Vector::operator==(const Vector &rhs) const {\n    return dcmp(x, rhs.x) == 0 && dcmp(y, rhs.y) == 0;\n}\n\nbool Vector::operator!=(const Vector &rhs) const {\n    return !(rhs == *this);\n}\n\nbool Vector::operator<(const Vector &rhs) const {\n    if (dcmp(x, rhs.x) != 0) {\n        return dcmp(x, rhs.x) < 0;\n    } else {\n        return dcmp(y, rhs.y) < 0;\n    }\n}\n\nbool Vector::operator>(const Vector &rhs) const {\n    return rhs < *this;\n}\n\nbool Vector::operator<=(const Vector &rhs) const {\n    return !(rhs < *this);\n}\n\nbool Vector::operator>=(const Vector &rhs) const {\n    return !(*this < rhs);\n}\n\nstd::ostream &operator<<(std::ostream &os, const Vector &vector) {\n    os << \"(\" << vector.x << \",\" << vector.y << \")\";\n    return os;\n}\n\ndouble Vector::dot(const Vector &rhs) const {\n    return *this * rhs;\n}\n\ndouble Vector::cross(const Vector &rhs) const {\n    return *this ^ rhs;\n}\n\ndouble Vector::length() const {\n    return sqrt(*this * *this);\n}\n\ndouble Vector::length2() const {\n    return *this * *this;\n}\n\ndouble Vector::angle() const {\n    return atan2(y, x);\n}\n\ndouble Vector::angle(const Vector &rhs) const {\n    return acos((*this * rhs) / length() / rhs.length());\n}\n\nVector Vector::rotate(double rad) const {\n    // Rotate counter-clockwise\n    return Vector(x * cos(rad) - y * sin(rad), x * sin(rad) + y * cos(rad));\n}\n\nVector Vector::rotate90() const {\n    return Vector(-y, x);\n}\n\nVector Vector::rotate90R() const {\n    return Vector(y, -x);\n}\n\nVector Vector::normal() const {\n    double l = length();\n    return Vector(-y / l, x / l);\n}\n\ndouble Vector::getDistanceTo(const Point &p) const {\n    return sqrt(pow(x - p.x, 2) + pow(y - p.y, 2));\n}\n\nbool Vector::cmpByAngle(const Vector &a, const Vector &b) {\n    return dcmp(a.angle(), b.angle()) < 0;\n}\n\nVector Vector::truncate(double d) const {\n    double l = length();\n    if (sign(l) == 0) {\n        return *this;\n    }\n    d /= l;\n    return Vector(x * d, y * d);\n}\n\nLine::Line(double x1, double y1, double x2, double y2) : a(x1, y1), b(x2, y2) {}\n\nLine::Line(const Point &a, const Point &b) : a(a), b(b) {}\n\ndouble Line::getDistanceTo(const Point &p) const {\n    const Vector &v1 = b - a;\n    const Vector &v2 = p - a;\n    return fabs(v1 ^ v2 / v1.length());\n}\n\nPoint Line::getIntersection(const Line &rhs) const {\n    if (!intersects(rhs)) {\n        return Point();\n    }\n    Vector u = a - rhs.a;\n    Vector v = b - a;\n    Vector w = rhs.b - rhs.a;\n    double t = (w ^ u) / (v ^ w);\n    return a + v * t;\n}\n\nPoint Line::getProjection(const Point &p) const {\n    const Vector &v = b - a;\n    return a + v * (v * (p - a) / (v * v));\n}\n\nPoint Line::getReflection(const Point &p) const {\n    return getProjection(p) * 2 - p;\n}\n\nbool Line::contains(const Point &p) const {\n    Point p1 = a;\n    Point p2 = b;\n    if (p1 == p) {\n        p1 = p1 + (p2 - p1) * 2;\n    } else if (p2 == p) {\n        p2 = p2 + (p1 - p2) * 2;\n    }\n    return sign((p2 - p) ^ (p1 - p)) == 0;\n}\n\nbool Line::intersects(const Line &rhs) const {\n    return sign((a - b) ^ (rhs.a - rhs.b)) != 0;\n}\n\nbool Line::parallels(const Line &rhs) const {\n    return !intersects(rhs);\n}\n\nint main() {\n//    freopen(\"data.in\", \"r\", stdin);\n\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        double x1, y1;\n        double x2, y2;\n        scanf(\"%lf%lf%lf%lf\", &x1, &y1, &x2, &y2);\n        Line line1(x1, y1, x2, y2);\n        scanf(\"%lf%lf%lf%lf\", &x1, &y1, &x2, &y2);\n        Line line2(x1, y1, x2, y2);\n        if (line1.parallels(line2)) {\n            puts(\"2\");\n        } else if (sign((line1.b - line1.a) * (line2.b - line2.a)) == 0) {\n            puts(\"1\");\n        } else {\n            puts(\"0\");\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// {{{ header\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing i8   = int8_t;\nusing u8   = uint8_t;\nusing i16  = int16_t;\nusing u16  = uint16_t;\nusing i32  = int32_t;\nusing u32  = uint32_t;\nusing i64  = int64_t;\nusing u64  = uint64_t;\nusing i128 = __int128_t;\nusing u128 = __uint128_t;\n\nusing f32  = float;\nusing f64  = double;\nusing f80  = __float80;\nusing f128 = __float128;\n// }}}\n\nconstexpr i64 INF = 1'010'000'000'000'000'000LL;\n\nconstexpr i64 MOD = 1'000'000'007LL;\n\nconstexpr f64 EPS = 1e-12;\n\nconstexpr f64 PI = 3.14159265358979323846;\n\n// {{{ util\n#define FOR(i, start, end) for(i64 i = (start), i##_end=(end); i < i##_end; ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define ALL(f,c,...) (([&](decltype((c)) cccc) { return (f)(begin(cccc), end(cccc), ## __VA_ARGS__); })(c))\n#define SLICE(f,c,l,r,...) (([&](decltype((c)) cccc, decltype((l)) llll, decltype((r)) rrrr) {\\\n    auto iiii = llll <= rrrr ? begin(cccc)+llll : end(cccc);\\\n    auto jjjj = llll <= rrrr ? begin(cccc)+rrrr : end(cccc);\\\n    return (f)(iiii, jjjj, ## __VA_ARGS__);\\\n})(c,l,r))\n\n#define GENERIC(f) ([](auto&&... args) -> decltype(auto) { return (f)(forward<decltype(args)>(args)...); })\n\ntemplate<typename C>\ni64 SIZE(const C& c) { return static_cast<i64>(c.size()); }\n\ntemplate<typename T, size_t N>\ni64 SIZE(const T (&)[N]) { return static_cast<i64>(N); }\n\nbool is_odd (i64 x) { return x % 2 != 0; }\nbool is_even(i64 x) { return x % 2 == 0; }\n\ntemplate<typename T> i64 cmp(T x, T y) { return (y<x) - (x<y); }\ntemplate<typename T> i64 sgn(T x) { return cmp(x, T(0)); }\n\n// Haskell の divMod と同じ\npair<i64,i64> divmod(i64 a, i64 b) {\n    i64 q = a / b;\n    i64 r = a % b;\n    if((b>0 && r<0) || (b<0 && r>0)) {\n        --q;\n        r += b;\n    }\n    return make_pair(q,r);\n}\n\ni64 div_ceil(i64 a, i64 b) {\n    i64 q = a / b;\n    i64 r = a % b;\n    if((b>0 && r>0) || (b<0 && r<0))\n        ++q;\n    return q;\n}\n\ni64 div_floor(i64 a, i64 b) {\n    return divmod(a,b).first;\n}\n\ni64 modulo(i64 a, i64 b) {\n    return divmod(a,b).second;\n}\n\nbool feq(f64 x, f64 y, f64 eps=EPS) {\n    return fabs(x-y) < eps;\n}\n\ntemplate<typename T, typename U>\nbool chmax(T& xmax, const U& x) {\n    if(xmax < x) {\n        xmax = x;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ntemplate<typename T, typename U>\nbool chmin(T& xmin, const U& x) {\n    if(x < xmin) {\n        xmin = x;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ntemplate<typename InputIt>\nauto SUM(InputIt first, InputIt last) {\n    using T = typename iterator_traits<InputIt>::value_type;\n    return accumulate(first, last, T());\n}\n\ntemplate<typename ForwardIt, typename UnaryOperation>\nForwardIt transform_self(ForwardIt first, ForwardIt last, UnaryOperation op) {\n    return transform(first, last, first, op);\n}\n\ntemplate<typename C>\nvoid UNIQ(C& c) {\n    c.erase(ALL(unique,c), end(c));\n}\n\ntemplate<typename BinaryFunc, typename UnaryFunc>\nauto ON(BinaryFunc bf, UnaryFunc uf) {\n    return [bf,uf](const auto& x, const auto& y) {\n        return bf(uf(x), uf(y));\n    };\n}\n\ntemplate<typename T>\nvoid RD(T& x) {\n    cin >> x;\n#ifdef PROCON_LOCAL\n    assert(cin);\n#endif\n}\n\ntemplate<typename T>\nvoid RD(vector<T>& v, i64 n) {\n    v.reserve(n);\n    REP(_, n) {\n        T e; RD(e);\n        v.emplace_back(e);\n    }\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const vector<T>& v) {\n    for(auto first = begin(v), it = first; it != end(v); ++it) {\n        if(it != first)\n            out << ' ';\n        out << *it;\n    }\n    return out;\n}\n\ntemplate<typename T1, typename T2>\nostream& operator<<(ostream& out, const pair<T1,T2>& p) {\n    return out << '(' << p.first << ',' << p.second << ')';\n}\n\nvoid PRINT() {}\n\ntemplate<typename T, typename... TS>\nvoid PRINT(const T& x, const TS& ...args) {\n    cout << x;\n    if(sizeof...(args)) {\n        cout << ' ';\n        PRINT(args...);\n    }\n}\n\ntemplate<typename... TS>\nvoid PRINTLN(const TS& ...args) {\n    PRINT(args...);\n    cout << '\\n';\n}\n\ntemplate<typename T>\nvoid DBG_IMPL(i64 line, const char* expr, const T& value) {\n#ifdef PROCON_LOCAL\n    cerr << \"[L \" << line << \"]: \";\n    cerr << expr << \" = \" << value << \"\\n\";\n#endif\n}\n\n#define DBG(expr) DBG_IMPL(__LINE__, #expr, (expr))\n// }}}\n\n// {{{ init\nstruct ProconInit {\n    static constexpr int IOS_PREC = 15;\n    static constexpr bool AUTOFLUSH = false;\n\n    ProconInit() {\n        cin.tie(nullptr);\n        ios::sync_with_stdio(false);\n        cout << fixed << setprecision(IOS_PREC);\n#ifdef PROCON_LOCAL\n        cerr << fixed << setprecision(IOS_PREC);\n#endif\n        if(AUTOFLUSH)\n            cout << unitbuf;\n    }\n} PROCON_INIT;\n// }}}\n\n//--------------------------------------------------------------------\n\nstruct Vector {\n    f64 x, y;\n\n    Vector() : Vector(0.0,0.0) {}\n    Vector(f64 xx, f64 yy) : x(xx), y(yy) {}\n\n    Vector& operator+=(const Vector& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n    Vector& operator-=(const Vector& rhs) {\n        x -= rhs.x;\n        y -= rhs.y;\n        return *this;\n    }\n    Vector& operator*=(f64 rhs) {\n        x *= rhs;\n        y *= rhs;\n        return *this;\n    }\n    Vector& operator/=(f64 rhs) {\n        x /= rhs;\n        y /= rhs;\n        return *this;\n    }\n\n    f64 norm() const { return x*x + y*y; }\n    f64 abs() const { return sqrt(norm()); }\n};\n\nconst Vector operator+(const Vector& lhs, const Vector& rhs) { return Vector(lhs) += rhs; }\nconst Vector operator-(const Vector& lhs, const Vector& rhs) { return Vector(lhs) -= rhs; }\nconst Vector operator*(const Vector& lhs, f64 rhs) { return Vector(lhs) *= rhs; }\nconst Vector operator*(f64 lhs, const Vector& rhs) { return Vector(rhs) *= lhs; }\nconst Vector operator/(const Vector& lhs, f64 rhs) { return Vector(lhs) /= rhs; }\n\nbool operator==(const Vector& lhs, const Vector& rhs) {\n    return feq(lhs.x,rhs.x) && feq(lhs.y,rhs.y);\n}\n\nstruct Line {\n    Vector p1, p2;\n\n    Line(const Vector& pp1, const Vector& pp2) : p1(pp1), p2(pp2) {}\n    Line(f64 x1, f64 y1, f64 x2, f64 y2) : p1(Vector(x1,y1)), p2(Vector(x2,y2)) {}\n\n    Vector vec() const { return p2 - p1; }\n};\n\nf64 geo_dot(const Vector& lhs, const Vector& rhs) {\n    return lhs.x*rhs.x + lhs.y*rhs.y;\n}\n\nf64 geo_cross(const Vector& lhs, const Vector& rhs) {\n    return lhs.x*rhs.y - lhs.y*rhs.x;\n}\n\nVector geo_project(const Line& line, const Vector& p) {\n    Vector v = line.vec();\n    f64 r = geo_dot(p-line.p1, v) / v.norm();\n    return line.p1 + r*v;\n}\n\nenum class ABC {\n    CCW,\n    CW,\n    ON_BACK,\n    ON_FRONT,\n    ON_SEGMENT,\n};\n\nABC geo_abc(const Vector& a, const Vector& b, const Vector& c) {\n    Vector x = b - a;\n    Vector y = c - a;\n    f64 cross = geo_cross(x,y);\n    if(cross > 0) return ABC::CCW;\n    if(cross < 0) return ABC::CW;\n    f64 dot = geo_dot(x,y);\n    if(dot < 0) return ABC::ON_BACK;\n    if(x.norm() < y.norm()) return ABC::ON_FRONT;\n    return ABC::ON_SEGMENT;\n}\n\nvoid solve() {\n    i64 Q; RD(Q);\n    REP(_, Q) {\n        i64 x0,y0; RD(x0); RD(y0);\n        i64 x1,y1; RD(x1); RD(y1);\n        Vector a = Vector(x1,y1) - Vector(x0,y0);\n        i64 x2,y2; RD(x2); RD(y2);\n        i64 x3,y3; RD(x3); RD(y3);\n        Vector b = Vector(x3,y3) - Vector(x2,y2);\n\n        // 内積が0なら垂直\n        if(feq(geo_dot(a,b), 0)) {\n            PRINTLN(1);\n        }\n        // 外積が0なら平行(平行四辺形が潰れるから)\n        else if(feq(geo_cross(a,b), 0)) {\n            PRINTLN(2);\n        }\n        else {\n            PRINTLN(0);\n        }\n    }\n}\n\nsigned main() {\n    \n\n    solve();\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#pragma GCC target(\"avx2\")\n#pragma GCC optimize(\"O3\")\n#pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\nconstexpr long long INF = 1LL << 60;\nconstexpr long long MOD = 1000000007;\ndouble PI = acos(-1.0);\n#define rep(i, n) for (ll i = 0; i < (n); ++i)\n#define rep1(i, n) for (ll i = 1; i <= (n); ++i)\n#define rrep(i, n) for (ll i = (n - 1); i >= 0; --i)\n#define perm(c) sort(ALL(c));for(bool c##p=1;c##p;c##p=next_permutation(ALL(c)))\n#define ALL(obj) (obj).begin(), (obj).end()\n#define RALL(obj) (obj).rbegin(), (obj).rend()\n#define pb push_back\n#define to_s to_string\n#define len(v) (ll)v.size()\n#define UNIQUE(v) v.erase(unique(v.begin(), v.end()), v.end())\n#define print(x) cout << (x) << '\\n'\n#define drop(x) cout << (x) << '\\n', exit(0)\n#define debug(x) cout << #x << \": \" << (x) << '\\n'\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<ll, ll> P;\ntypedef tuple<ll, ll, ll> tpl;\ntypedef vector<ll> vec;\ntypedef vector<vector<ll>> vec2;\ntypedef vector<vector<vector<ll>>> vec3;\ntemplate<class S, class T> inline bool chmax(S &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class S, class T> inline bool chmin(S &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }\ninline ll msb(ll v) { return 1 << (31 - __builtin_clzll(v)); }\ninline ll devc(ll x, ll y) { return (x + y - 1) / y; }\ninline ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }\ninline ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }\n \nstruct IoSetup {\n    IoSetup() {\n        cin.tie(nullptr);\n        ios::sync_with_stdio(false);\n        cout << fixed << setprecision(10);\n        cerr << fixed << setprecision(10);\n    }\n} iosetup;\n \ntemplate< typename T1, typename T2 >\nostream &operator << (ostream &os, const pair< T1, T2 > &p) {\n    os << p.first << \" \" << p.second;\n    return os;\n}\n \ntemplate< typename T1, typename T2 >\nistream &operator >> (istream &is, pair< T1, T2 > &p) {\n    is >> p.first >> p.second;\n    return is;\n}\n \ntemplate< typename T1, typename T2, typename T3 >\nostream &operator << (ostream &os, const tuple< T1, T2, T3 > &t) {\n    os << get<0>(t) << \" \" << get<1>(t) << \" \" << get<2>(t);\n    return os;\n}\n \ntemplate< typename T1, typename T2, typename T3 >\nistream &operator >> (istream &is, tuple< T1, T2, T3 > &t) {\n    is >> get<0>(t) >> get<1>(t) >> get<2>(t);\n    return is;\n}\n \ntemplate< typename T >\nostream &operator << (ostream &os, const vector< T > &v){\n    for (int i = 0; i < (int)v.size(); ++i) {\n        os << v[i] << (i + 1 != v.size() ? \" \" : \"\");\n    }\n    return os;\n}\n \ntemplate< typename T >\nistream &operator >>  (istream &is, vector< T > &v){\n    for(T &in : v) is >> in;\n    return is;\n}\n\ntemplate< typename T >\nostream &operator << (ostream &os, const set< T > &st){\n    int ct = 0;\n    for(auto& s : st) cout << s << (++ct != st.size() ? \" \" : \"\");\n    return os;\n}\n\ntemplate <typename T>\nconstexpr set<T> &operator|= (set<T> &st1, const set<T> &st2) { \n    for(auto& s : st2) st1.insert(s);\n    return st1; \n}\n\ntemplate <typename T>\nconstexpr set<T> &operator-= (set<T> &st1, const set<T> &st2) {\n    for(auto& s : st2) if(st1.count(s)) st1.erase(s);\n    return st1;\n}\n\ntemplate <typename T>\nconstexpr set<T> &operator&= (set<T> &st1, const set<T> &st2) {\n    auto itr = st1.begin();\n    while(itr != st1.end()){\n        if(!st2.count(*itr)) itr = st1.erase(itr);\n        else ++itr;\n    }\n    return st1;\n}\n\ntemplate <typename T>\nconstexpr set<T> operator| (const set<T> &st1, const set<T> &st2) {\n    set<T> res = st1;\n    res |= st2;\n    return res;\n}\n\ntemplate <typename T>\nconstexpr set<T> operator- (const set<T> &st1, const set<T> &st2) {\n    set<T> res = st1;\n    res -= st2;\n    return res;\n}\n\ntemplate <typename T>\nconstexpr set<T> operator& (const set<T> &st1, const set<T> &st2) {\n    set<T> res = st1;\n    res &= st2;\n    return res;\n}\n\n/*---------------------------------    Tools    ------------------------------------------*/\ntemplate< typename T >\nvector<T> cumsum(const vector<T> &X){\n    vector<T> res(X.size() + 1, 0);\n    for(int i = 0; i < X.size(); ++i) res[i + 1] += res[i] + X[i];\n    return res;\n}\n \ntemplate< typename S, typename T, typename F>\npair<T, T> bisearch(S left, T right, F f) {\n    while(abs(right - left) > 1){\n        T mid = (right + left) / 2;\n        if(f(mid)) right = mid;\n        else left = mid;\n    }\n    return {left, right};\n}\n \ntemplate< typename S, typename T, typename F>\ndouble trisearch(S left, T right, F f, int maxLoop = 90){\n    double low = left, high = right;\n    while(maxLoop--){\n        double mid_left = high / 3 + low * 2 / 3;\n        double mid_right = high * 2 / 3 + low / 3;\n        if(f(mid_left) >= f(mid_right)) low = mid_left;\n        else high = mid_right;\n    }\n    return (low + high) * 0.5;\n}\n\ntemplate< typename F >\nll ternarySearch(ll L, ll R, F f) { //[L, R)\n    ll lo = L - 1, hi = R - 1;\n    while (lo + 1 != hi) {\n        ll mi = (lo + hi) / 2;\n        if (f(mi) <= f(mi + 1)) hi = mi;\n        else lo = mi;\n    }\n    return hi;\n}\n\n/*---------------------------------   Geometry   -----------------------------------------*/\nusing Point = complex<double>;\nconst double EPS = 1e-12;\n\nstruct Line : vector<Point> {\n    Line(Point a = Point(0.0, 0.0), Point b = Point(0.0, 0.0)){\n        this->push_back(a);\n        this->push_back(b);\n    }\n    friend ostream &operator<<(ostream &s, const Line &l) { return s << '{' << l[0] << ',' << l[1] << '}'; }\n};\n\n/* ∠ABC */\ndouble degree(Point A, Point B, Point C){\n    if(B == C) return 0;\n    return arg((A - B) / (C - B));\n}\n\n/* counter-clockwise */\n/* AB, ACの関係性を調べる*/\n/* 同一直線上 : positive, 非同一直線上 : negative*/\n/* 同一直線上だが、CはAB上に無い : 3 */\n/* 同一直線上でCはAB上の点 : 2 */\n/* 同一直線上で逆向きにCが存在 : 1 */\n/* AB -> ACが反時計周り : -1 */\n/* AB -> ACが時計周り : -2 */\n//VERIFIED : http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\nint ccw(Point A, Point B, Point C){\n    double deg = degree(B, A, C);\n    if(abs(cos(deg) - 1.0) <= EPS){\n        if(abs(C - A) > abs(B - A)) return 3;\n        else  return 2;\n    }\n    if(abs(cos(deg) + 1) <= EPS) return 1;\n\n    if(sin(deg) + EPS >= 0) return -2;\n    else return -1;\n}\n \n/* perpendicular bisector */\nLine bisector(const Line& L){\n    Point X = L[0], Y = L[1];\n    Point C = (X + Y) / 2.0;\n    Point D = C + (X - Y) * Point(0.0, 1.0);\n    return Line(C, D);\n}\n\n/* 二直線間の角度, 平行, 垂直 */\n//VERIFIED : http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\ndouble lineAngle(const Line& L1, const Line& L2){\n    return degree(Point(L1[1] - L1[0] ), Point(0.0, 0.0), Point(L2[1] - L2[0]));\n}\n\nbool isParallel(const Line& L1, const Line& L2){\n    return abs(sin(lineAngle(L1, L2))) <= EPS;\n}\n\nbool isOrthogonal(const Line& L1, const Line& L2){\n    return abs(cos(lineAngle(L1, L2))) <= EPS;\n}\n\n/* cross point */\n/* 二直線の交点 */\n// VERIFIED : http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C\nPoint crosspoint(const Line& L1, const Line& L2){\n    if(isParallel(L1, L2)) return Point(-INF, -INF);\n    Point A = L1[0], B = L1[1];\n    Point C = L2[0], D = L2[1];\n    return A + (B - A) * (imag((A - C) * conj(C - D)) / imag((C - D) * conj(B - A)));\n}\n\n/* Line Segment Crossed? */\n/* 線分の交差判定 */\nbool isSegmentCrossed(const Line& L1, const Line& L2){\n    Point A = L1[0], B = L1[1];\n    Point C = L2[0], D = L2[1];\n\n    if(isParallel(L1, L2)){\n        if(abs(sin(degree(A, C, B))) <= EPS) return true;\n        if(abs(sin(degree(C, B, D))) <= EPS) return true;\n        return false;\n    }\n\n\n    double t = imag((A - C) * conj(C - D)) / imag((C - D) * conj(B  - A));\n    double s = imag((C - A) * conj(A - B)) / imag((A - B) * conj(D - C));\n    //print(t);\n    //print(s);\n    return t + EPS >= 0 and t - EPS <= 1 and s + EPS >= 0 and s - EPS <= 1;\n}\n\n/* foot of a perpendicular line　*/\n/* 垂線の足 */\nPoint foot(const Point &A, const Line &L){\n    return (A + L[0] + L[1] - (A * L[0] * conj(L[1]))) / 2.0;\n};\n\n\n/*------------------------------- Main Code Here -----------------------------------------*/\n \nint main()\n{\n    ll N;\n    cin >> N;\n    rep(i, N){\n        ll a, b, c, d, e, f, g, h;\n        cin >> a >> b >> c >> d >> e >> f >> g >> h;\n\n        bool par = isParallel(Line(Point(a, b), Point(c, d)), Line(Point(e, f), Point(g, h)));\n        bool ort = isOrthogonal(Line(Point(a, b), Point(c, d)), Line(Point(e, f), Point(g, h)));\n        if(par) print(2);\n        else if(ort) print(1);\n        else print(0);\n    }\n\n\n\n    return 0;\n}                                              \n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y;\n\nint choice();\nint main(){\n  int q; cin >> q;\n\n  for(int i=0; i<q; i++){\n    cin >> p0x >> p0y >> p1x >> p1y >> p2x >> p2y >> p3x >> p3y;\n    cout << choice() << endl;\n  }\n\n  return 0;\n}\n\nint choice(){\n  int res;\n  int s1dx, s1dy, s2dx, s2dy;\n  s1dx = p1x-p0x; s1dy = p1y-p0y;\n  s2dx = p3x-p2x; s2dy = p3y-p2y;\n  \n  if(s1dx*s2dy-s2dx*s1dy==0) res=2;\n  else if(s1dx*s2dx+s1dy*s2dy==0) res=1;\n  else res=0;\n  return res;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst double eps = 1e-8;\nconst double pi = acos(-1.0);\ntypedef long long ll;\nint sgn(double x){\n    if(fabs(x)<eps){\n        return 0;\n    }\n    if(x<0){\n        return -1;\n    }else{\n        return 1;\n    }\n}\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x = _x;\n        y = _y;\n    }\n    void input(){\n        scanf(\"%lf%lf\",&x,&y);\n    }\n    Point operator+(const Point &b)const{\n        return Point(x+b.x,y+b.y);\n    }\n    Point operator -(const Point &b)const{\n        return Point(x-b.x,y-b.y);\n    }\n    double operator *(const Point &b)const{\n        return x*b.x+y*b.y;\n    }\n    Point operator *(const double &k)const{\n        return Point(x*k,y*k);\n    }\n    double operator ^(const Point &b)const{\n        return x*b.y-y*b.x;\n    }\n    Point operator /(const double &k)const{\n        return Point(x/k,y/k);\n    }\n    bool operator <(const Point &b)const{\n        return sgn(x-b.x)==0?sgn(y-b.y)<0:x<b.x;\n    }\n    double len2(){\n        return x*x+y*y;\n    }\n};\n\nstruct Line{\n    Point s,e;\n    Line(){}\n    Line(Point _s,Point _e){\n        s = _s;\n        e = _e;\n    }\n    bool parallel(Line v){\n        return sgn((e-s)^(v.e-v.s))==0;\n    }\n    //没考虑重合\n    //0 非垂直相交\n    //1 垂直\n    //2 平行\n    int linecrossline(Line v){\n        if((*this).parallel(v)){\n            return 2;\n        }else{\n            if((e-s)*(v.e-v.s) == 0){\n                return 1;\n            }else{\n                return 0;\n            }\n        }\n    }\n};\n\nint main(){\n    int q;\n    Point p0,p1,p2,p3;\n    scanf(\"%d\",&q);\n    while(q--){\n        p0.input();\n        p1.input();\n        p2.input();\n        p3.input();\n        Line line1(p0,p1);\n        Line line2(p2,p3);\n        printf(\"%d\\n\",line1.linecrossline(line2));\n    }\n   \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long double ld;\n\nconst ld EPS = 1e-9;\nconst ld INF = 1e10;\nconst ld PI = M_PI;\n\nstruct Point{\n  ld x, y;\n  Point(ld x, ld y):x(x), y(y){}\n  Point(){}\n};\n\nPoint operator+(const Point &a, const Point &b){\n  return Point(a.x + b.x, a.y + b.y);\n}\nPoint operator-(const Point &a, const Point &b){\n  return Point(a.x - b.x, a.y - b.y);\n}\nPoint operator*(const Point &a, const ld b){\n  return Point(a.x * b, a.y * b);\n}\nPoint operator*(const Point &a, const Point &b){\n  return Point(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\nPoint operator/(const Point &a, const ld b){\n  return Point(a.x / b, a.y / b);\n}\n\nld cross(const Point &a, const Point &b){\n  return a.x*b.y - a.y*b.x;\n}\n\nld dot(const Point &a, const Point &b){\n  return a.x*b.x + a.y*b.y;\n}\n\nld norm(const Point &a){\n  return dot(a, a);\n}\n\nstruct Line:vector<Point>{\n  Line(Point a = Point(0, 0), Point b = Point(0, 0)){\n    this->push_back(a);\n    this->push_back(b);\n  }\n};\n\nbool is_orthogonal(const Line &l1, const Line &l2){\n  return dot(l1[0]-l1[1], l2[0]-l2[1]) == 0.0;\n}\n\nbool is_parallel(const Line &l1, const Line &l2){\n  return cross(l1[0]-l1[1], l2[0]-l2[1]) == 0.0;\n}\n\nint main(){  \n  int q;\n  cin >> q;\n  while(q--){\n    Point p0, p1;\n    Line l1, l2;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    l1 = Line(p0, p1);\n    \n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    l2 = Line(p0, p1);\n    \n    if(is_orthogonal(l1, l2)) cout << 1 << endl;\n    else if(is_parallel(l1, l2)) cout << 2 << endl;\n    else cout << 0 << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cmath>\n#include <map>\n#include <stack>\n#include <algorithm>\ntypedef long long int ll;\nusing namespace std;\nconst int MAX=5000+10;\nconst double eps=1e-8;\nconst double PI=acos(-1.0);\n\nint sgn(double x)\n{\n    if (fabs(x)<eps) {\n        return 0;\n    }\n    if (x<0) {\n        return -1;\n    }\n    else return 1;\n}\nstruct point\n{\n    double x,y;\n    point(){}\n    point(double _x,double _y)\n    {\n        x=_x;y=_y;\n    }\n    point operator -(const point &b)const\n    {\n        return point(x-b.x,y-b.y);\n    }\n    double operator ^(const point &b)const\n    {\n        return x*b.y-y*b.x;\n    }\n    double operator *(const point &b)const\n    {\n        return x*b.x+y*b.y;\n    }\n};\nint main(){\n    //freopen(\"/Users/mac/Desktop/C++?¨????/test/test.txt\", \"r\", stdin);\n    int q;\n    point p0,p1,p2,p3;\n    scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p0.x,&p0.y,&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y);\n        point l1=p0-p1;\n        point l2=p2-p3;\n        double cross=l1^l2;\n        double dot=l1*l2;\n        if (!sgn(dot)) {\n            printf(\"1\\n\");\n        }\n        else if (!sgn(cross)){\n            printf(\"2\\n\");\n        }\n        else{\n            printf(\"0\\n\");\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <math.h>\nconst double EPS = 1e-9;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\t/*vector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}*/\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double para(vector v1, vector v2) {\n\treturn sqrt(v1.x*v1.x + v1.y*v1.y)*sqrt(v2.x*v2.x + v2.y*v2.y);\n}\nint main() {\n\tdouble n, x1, x2, x3, x4, y1, y2, y3, y4;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tvector v1(x2 - x1, y2 - y1);\n\t\tvector v2(x4 - x3, y4 - y3);\n\t\tdouble ans = dot(v1, v2);\n\t\tif (ans == 0) cout << 1 << endl;\n\t\telse if (fabs(ans - para(v1, v2)) < EPS || fabs(2*ans - fabs(ans - para(v1, v2))) < EPS || fabs((-2) * ans - fabs(ans - para(v1, v2))) < EPS) cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\nusing ll = long long;\nusing P = pair<ll, ll>;\nconst long double PI = acos(-1.0L);\nll GCD(ll a, ll b) { return b?GCD(b, a%b):a; }\nll LCM(ll a, ll b) { return a/GCD(a, b)*b; }\n\nusing CP = complex<long double>;\n\nconst long double EPS = 1e-10;     // 許容する誤差ε\n#define EQ(a, b) (abs((a)-(b)) < EPS)   // 2つのスカラーが等しいかどうか\n#define EQV(a, b) (EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()))    // 2つのベクトルが等しいかどうか\n\n// double length = abs(a);     // ベクトルaの絶対値\n// double distance = abs(a-b);     // 2点a,b間の距離\n// CP b = a/abs(a);    // ベクトルaの単位ベクトル\n// CP n1 = a*CP(0,+1); CP n2 = a*CP(0,-1);  // ベクトルaの法線ベクトル\n// CP un1 = (a*CP(0,+1)/abs(a)); CP un2 = (a*CP(0,-1)/abs(a));  // ベクトルaの単位法線ベクトル\n\n// 内積(dot product) : a・b = |a||b|cosΘ\nlong double dot(CP a, CP b) {\n    return (a.real()*b.real() + a.imag()*b.imag());\n}\n\n// 外積(cross product) : a×b = |a||b|sinΘ\nlong double cross(CP a, CP b) {\n    return (a.real()*b.imag() - a.imag()*b.real());\n}\n\n// 2直線の直交判定 : a⊥b ⇔ dot(a,b) = 0\nint is_orthogonal(CP a1, CP a2, CP b1, CP b2) {\n    return EQ(dot(a1-a2, b1-b2), 0.0);\n}\n\n// 2直線の平行判定 : a//b ⇔ cross(a,b) = 0\nint is_parallel(CP a1, CP a2, CP b1, CP b2) {\n    return EQ(cross(a1-a2, b1-b2), 0.0);\n}\n\n// 点cが直線a,b上にあるかないか\nint is_point_on_line(CP a, CP b, CP c) {\n    return EQ(cross(b-a, c-a), 0.0);\n}\n\n// 点cが線分a,b上にあるかないか\nint is_point_on_lines(CP a, CP b, CP c) {\n    // |a-c|+|c-b| <= |a-b|なら線分上\n    return (abs(a-c)+abs(c-b) < abs(a-b)+EPS);\n}\n\n// 点a,bを通る直線と点cとの距離\nlong double distance_line_p(CP a, CP b, CP c) {\n    return abs(cross(b-a, c-a))/abs(b-a);\n}\n\n// 点a,bを端点とする線分と点cとの距離\nlong double distance_lines_p(CP a, CP b, CP c) {\n    if(dot(b-a, c-a) < EPS) return abs(c-a);\n    if(dot(a-b, c-b) < EPS) return abs(c-b);\n    return abs(cross(b-a, c-a))/abs(b-a);\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nint is_intersected_lines(CP a1, CP a2, CP b1, CP b2) {\n    return (cross(a2-a1, b1-a1)*cross(a2-a1, b2-a1) < EPS) &&\n           (cross(b2-b1, a1-b1)*cross(b2-b1, a2-b1) < EPS);\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交点計算\nCP intersection_lines(CP a1, CP a2, CP b1, CP b2) {\n    CP b = b2-b1;\n    long double d1 = abs(cross(b, a1-b1));\n    long double d2 = abs(cross(b, a2-b1));\n    long double t = d1/(d1+d2);\n    return a1+(a2-a1)*t;\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交差判定\nint is_intersected_line(CP a1, CP a2, CP b1, CP b2) {\n    return !EQ(cross(a1-a2, b1-b2), 0.0);\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算(平行ではない前提)\nCP intersection_line(CP a1, CP a2, CP b1, CP b2) {\n    CP a = a2-a1; CP b = b2-b1;\n    return a1 + a*cross(b, b1-a1)/cross(b, a);\n}\n\n// s,tを通る直線に対する点pの射影\nCP projection(CP s, CP t, CP p) {\n    if(EQV(s, t)) return s;\n    CP base = t-s;\n    return s + base*(dot(p-s, base)/norm(base));\n}\n\n// s,tを通る直線に対する点pの反射\nCP reflection(CP s, CP t, CP p) {\n    CP tmp = projection(s, t, p) - p;\n    return p + tmp*2.0L;\n}\n\n// 3点の位置関係を判定\nint calc_clockwise(CP p0, CP p1, CP p2) {\n    CP x = p1-p0, y = p2-p0;\n    if(cross(x, y) > EPS) return 1;     // \"COUNTER_CLOCKWISE\"\n    if(cross(x, y) < -EPS) return -1;   // \"CLOCKWISE\"\n    if(dot(x, y) < 0) return 2;         // \"ONLINE_BACK\"\n    if(norm(x) < norm(y)) return -2;    // \"ONLINE_FRONT\"\n    return 0;                           // \"ON_SEGMENT\" \n}\n\nint main() {\n    int q; cin >> q;\n    while(q--) {\n        long double a1x, a1y, a2x, a2y;\n        long double b1x, b1y, b2x, b2y;\n        cin >> a1x >> a1y >> a2x >> a2y;\n        cin >> b1x >> b1y >> b2x >> b2y;\n        CP p1(a1x, a1y), p2(a2x, a2y);\n        CP q1(b1x, b1y), q2(b2x, b2y);\n        if(is_parallel(p1, p2, q1, q2)) cout << 2 << endl;\n        else if(is_orthogonal(p1, p2, q1, q2)) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 2e5 + 5;\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\ntemplate <typename T> void chkmax(T &x, T y) {x = max(x, y); }\ntemplate <typename T> void chkmin(T &x, T y) {x = min(x, y); } \ntemplate <typename T> void read(T &x) {\n\tx = 0; int f = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') f = -f;\n\tfor (; isdigit(c); c = getchar()) x = x * 10 + c - '0';\n\tx *= f;\n}\ntemplate <typename T> void write(T x) {\n\tif (x < 0) x = -x, putchar('-');\n\tif (x > 9) write(x / 10);\n\tputchar(x % 10 + '0');\n}\ntemplate <typename T> void writeln(T x) {\n\twrite(x);\n\tputs(\"\");\n}\nnamespace GeometryWithLongdouble {\n\ttypedef long double ld;\n\tconst ld eps = 1e-9;\n\tstruct point {ld x, y; };\n\tstruct line {point a, b; }; //Be sure that a and b are distinct.\n\tvoid ReadPointInt(point &a) {read(a.x), read(a.y); }\n\tvoid ReadLineInt(line &a) {ReadPointInt(a.a), ReadPointInt(a.b); }\n\tpoint operator + (point a, point b) {return (point) {a.x + b.x, a.y + b.y}; }\n\tpoint operator - (point a, point b) {return (point) {a.x - b.x, a.y - b.y}; }\n\tpoint operator * (point a, ld b) {return (point) {a.x * b, a.y * b}; }\n\tld dot(point a, point b) {return a.x * b.x + a.y * b.y; }\n\tld operator * (point a, point b) {return a.x * b.y - a.y * b.x; }\n\tld moo(point a) {return sqrtl(a.x * a.x + a.y * a.y); }\n\tld dist(point a, point b) {return moo(a - b); }\n\tpoint unit(point a) {\n\t\tld tmp = moo(a);\n\t\tassert(tmp > eps);\n\t\treturn a * (1.0 / tmp);\n\t}\n\tpoint Projection(point x, line a) {\n\t\tld d = dot(x - a.a, a.b - a.a) / dist(a.a, a.b);\n\t\treturn a.a + unit(a.b - a.a) * d;\n\t}\n\tpoint Reflection(point x, line a) {\n\t\treturn Projection(x, a) * 2 - x;\n\t}\n\tbool OnLine(point x, line a) {\n\t\treturn fabsl((a.b - a.a) * (x - a.a)) <= eps;\n\t}\n\tbool OnSegment(point x, line a) {\n\t\treturn dist(x, a.a) + dist(x, a.b) - dist(a.a, a.b) <= eps;\n\t}\n\tbool Parallel(line a, line b) {\n\t\treturn fabsl((a.b - a.a) * (b.b - b.a)) <= eps;\n\t}\n\tbool Orthogonal(line a, line b) {\n\t\treturn dot((a.b - a.a), (b.b - b.a)) <= eps;\n\t}\n}\nint main() {\n\tusing namespace GeometryWithLongdouble;\n\tint q; read(q);\n\twhile (q--) {\n\t\tline a, b;\n\t\tReadLineInt(a);\n\t\tReadLineInt(b);\n\t\tif (Parallel(a, b)) puts(\"2\");\n\t\telse if (Orthogonal(a, b)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#include<stdbool.h>\nbool same(double a, double b);\n\nint main()\n{\n    long long int xp0, xp1, xp2, xp3, yp0, yp1, yp3, yp2, diffx0, diffy0, diffx1, diffy1, test;\n    int res;\n    double m1, m2;\n    scanf(\"%lld\", &test);\n    while(test--)\n    {\n        scanf(\"%lld%lld%lld%lld%lld%lld%lld%lld\", &xp0, &yp0, &xp1, &yp1, &xp2, &yp2, &xp3, &yp3);\n        diffx0 = xp1 - xp0;\n        diffy0 = yp1 - yp0;\n        diffx1 = xp3 - xp2;\n        diffy1 = yp3 - yp2;\n        if(diffx0 == 0)\n        {\n            if(diffx1 == 0)\n            {\n                res = 2;\n            }\n            else if(diffy1 == 0)\n            {\n                res = 1;\n            }\n            else    res = 0;\n        }\n        else if(diffx1 == 0)\n        {\n            if(diffx0 == 0)\n            {\n                res = 2;\n            }\n            else if(diffy0 == 0)\n            {\n                res = 1;\n            }\n            else res = 0;\n        }\n        else\n        {\n            m1 = (double)diffy0/diffx0;\n            m2 = (double)diffy1/diffx1;\n            if(m1 == m2)    res = 2;\n            else if(same(m1*m2, -1))  res = 1;\n            else res = 0;\n        }\n        printf(\"%d\\n\", res);\n    }\n    return 0;\n}\nbool same(double a, double b)\n{\n    return fabs(a - b) < 0.00001;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nint decide(Point p0, Point p1, Point p2, Point p3){\n    Vector v0 = p1 - p0;\n    Vector v1 = p3 - p2;\n\n    if(fabs(dot(v0, v1)) <EPS){\n        return 1;\n    }else if(cross(v0, v1) <EPS){\n        return 2;\n    }else{\n        return 0;\n    }\n}\n\nint main(){\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n        scanf(\"%d\", &xp1);\n        scanf(\"%d\", &yp1);\n        scanf(\"%d\", &xp2);\n        scanf(\"%d\", &yp2);\n        scanf(\"%d\", &xp3);\n        scanf(\"%d\", &yp3);\n        \n        Point p0 = Point(xp0, yp0);\n        Point p1 = Point(xp1, yp1);\n        Point p2 = Point(xp2, yp2);\n        Point p3 = Point(xp3, yp3);\n\n        printf(\"%d\\n\", decide(p0, p1, p2, p3));\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<iostream>\n#include<complex>\n#include<cmath>\n\nusing namespace std;\n\nconst double EPS=1e-8;\nconst double INF=1e9;\n\ntypedef complex<double>Point;\n\n#define EQ(a,b) (fabs((a)-(b))<EPS)\n#define EQV(a,b) (abs((a)-(b))<EPS)\nstruct Segment{\n    Point p1,p2;\n    Segment(Point p1=Point(),Point p2=Point()):p1(p1),p2(p2){}\n};\n\ntypedef Segment Line;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\ntypedef vector<Point>Polygon;\n\ndouble dot(Point a,Point b){\n    return real(a)*real(b)+imag(a)*imag(b);\n}\n\ndouble cross(Point a,Point b){\n    return real(a)*imag(b)-imag(a)*real(b);\n}\n\nbool isOrthogonal(Point a,Point b){\n    return EQ(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Line s1,Line s2){\n    return isOrthogonal(s1.p2-s1.p1,s2.p2-s2.p1);\n}\n\nbool isParallel(Point a,Point b){\n    return EQ(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Line s1,Line s2){\n    return isParallel(s1.p2-s1.p1,s2.p2-s2.p1);\n}\n\n\nint main(){\n    int N;\n    scanf(\"%d\",&N);\n    while(N--){\n        Point a,b,c,d;\n        scanf(\"%lf%lf\",&a.real(),&a.imag());\n        scanf(\"%lf%lf\",&b.real(),&b.imag());\n        scanf(\"%lf%lf\",&c.real(),&c.imag());\n        scanf(\"%lf%lf\",&d.real(),&d.imag());\n        if(isParallel(Segment(a,b),Segment(c,d)))puts(\"2\");\n        else if(isOrthogonal(Segment(a,b),Segment(c,d)))puts(\"1\");\n        else puts(\"0\");\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//#define NDEBUG\n#include \"bits/stdc++.h\"\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <array>\n#include <random>\n#ifdef _MSC_VER\n#include <ppl.h>\n//#include <boost/multiprecision/cpp_dec_float.hpp>\n//#include <boost/multiprecision/cpp_int.hpp>\n//#include <boost/rational.hpp>\n//#include <opencv2/core.hpp>\n//#include <opencv2/imgproc.hpp>\n//#include <opencv2/highgui.hpp>\n//#else\n//#include <omp.h>\n#endif\n\n\nusing namespace std;\n\n#define DUMPOUT cerr\n#define dump(...) DUMPOUT<<\"  \";DUMPOUT<<#__VA_ARGS__<<\" :[\"<<__LINE__<<\":\"<<__FUNCTION__<<\"]\"<<endl;DUMPOUT<<\"    \";dump_func(__VA_ARGS__)\n\nusing uint = unsigned; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using pdd = pair<double, double>; using pss = pair<string, string>;\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const pair<_KTy, _Ty>& m) { o << \"{\" << m.first << \", \" << m.second << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const map<_KTy, _Ty>& m) { if (m.empty()) { o << \"{ }\"; return o; } o << \"{\" << *m.begin(); for (auto itr = ++m.begin(); itr != m.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const unordered_map<_KTy, _Ty>& m) { if (m.empty()) { o << \"{ }\"; return o; } o << \"{\" << *m.begin(); for (auto itr = ++m.begin(); itr != m.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const vector<_Ty>& v) { if (v.empty()) { o << \"{ }\"; return o; } o << \"{\" << v.front(); for (auto itr = ++v.begin(); itr != v.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const deque<_Ty>& v) { if (v.empty()) { o << \"{ }\"; return o; } o << \"{\" << v.front(); for (auto itr = ++v.begin(); itr != v.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const set<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } o << \"{\" << *(s.begin()); for (auto itr = ++s.begin(); itr != s.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const unordered_set<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } o << \"{\" << *(s.begin()); for (auto itr = ++s.begin(); itr != s.end(); itr++) { o << \", \" << *itr; }\to << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const stack<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } stack<_Ty> t(s); o << \"{\" << t.top(); t.pop(); while (!t.empty()) { o << \", \" << t.top(); t.pop(); } o << \"}\";\treturn o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const list<_Ty>& l) { if (l.empty()) { o << \"{ }\"; return o; } o << \"{\" << l.front(); for (auto itr = ++l.begin(); itr != l.end(); ++itr) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> istream& operator >> (istream& is, pair<_KTy, _Ty>& m) { is >> m.first >> m.second; return is; }\ntemplate <typename _Ty> istream& operator >> (istream& is, vector<_Ty>& v) { for (size_t t = 0; t < v.size(); t++) is >> v[t]; return is; }\ntemplate <typename _Ty> istream& operator >> (istream& is, deque<_Ty>& v) { for (size_t t = 0; t < v.size(); t++) is >> v[t]; return is; }\nnamespace aux { // print tuple\n  template<typename Ty, unsigned N, unsigned L> struct tp { static void print(ostream& os, const Ty& v) { os << get<N>(v) << \", \"; tp<Ty, N + 1, L>::print(os, v); } };\n  template<typename Ty, unsigned N> struct tp<Ty, N, N> { static void print(ostream& os, const Ty& v) { os << get<N>(v); } };\n}\n\ntemplate<typename... Tys> ostream& operator<<(ostream& os, const tuple<Tys...>& t) { os << \"{\"; aux::tp<tuple<Tys...>, 0, sizeof...(Tys) - 1>::print(os, t); os << \"}\"; return os; }\n\ntemplate<typename A, size_t N, typename T> inline void Fill(A(&array)[N], const T& val) { fill((T*)array, (T*)(array + N), val); }\n\ntemplate <typename ... Args>\nstd::string format(const std::string& fmt, Args ... args) {\n  size_t len = std::snprintf(nullptr, 0, fmt.c_str(), args ...);\n  std::vector<char> buf(len + 1);\n  std::snprintf(&buf[0], len + 1, fmt.c_str(), args ...);\n  return std::string(&buf[0], &buf[0] + len);\n}\n\nvoid dump_func() { DUMPOUT << endl; }\ntemplate <class Head, class... Tail> void dump_func(Head&& head, Tail&&... tail) { DUMPOUT << head; if (sizeof...(Tail) == 0) { DUMPOUT << \" \"; } else { DUMPOUT << \", \"; } dump_func(move(tail)...); }\n\n#define PI 3.14159265358979323846\n#define EPS 1e-8\n#define rep(t,n) for(int t=0;t<(n);++t)\n#define ALL(j) (j).begin(), (j).end()\n#define SZ(j) ((int)(j).size())\n#define fake false\n\nclass Timer {\npublic:\n  double t = 0;\n  Timer() {}\n  static double time() {\n#ifdef _MSC_VER\n    return __rdtsc() / 2.8e9;\n#else\n    unsigned long long a, d;\n    __asm__ volatile(\"rdtsc\"\n      : \"=a\"(a), \"=d\"(d));\n    return (d << 32 | a) / 2.8e9;\n#endif\n  }\n  void measure() { t = time() - t; }\n  double elapsedMs() { return (time() - t) * 1000.0; }\n} timer;\n\nstruct Xorshift {\n  uint64_t x = 88172645463325252LL;\n  unsigned next_int() {\n    x = x ^ (x << 7);\n    return x = x ^ (x >> 9);\n  }\n  unsigned next_int(unsigned mod) {\n    x = x ^ (x << 7);\n    x = x ^ (x >> 9);\n    return x % mod;\n  }\n  unsigned next_int(unsigned l, unsigned r) {\n    x = x ^ (x << 7);\n    x = x ^ (x >> 9);\n    return x % (r - l + 1) + l;\n  }\n  double next_double() {\n    return double(next_int()) / UINT_MAX;\n  }\n} rnd;\n\ntemplate<typename T>\nvoid shuffle_vector(vector<T>& v, Xorshift& rnd) {\n  int n = v.size();\n  for (int i = n - 1; i >= 1; i--) {\n    int r = rnd.next_int(i);\n    swap(v[i], v[r]);\n  }\n}\n\n\n\nnamespace geom {\n  constexpr double eps = 1e-8;\n  struct Point {\n    double x, y;\n    Point() : x(0.0), y(0.0) {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point& p) const { return Point(this->x + p.x, this->y + p.y); }\n    Point operator-(const Point& p) const { return Point(this->x - p.x, this->y - p.y); }\n    Point operator-() const { return Point(-this->x, -this->y); }\n    Point& operator+=(const Point& p) { return *this = *this + p; }\n    Point& operator-=(const Point& p) { return *this = *this - p; }\n    double length() const { return std::sqrt(x * x + y * y); }\n    friend std::ostream& operator<<(std::ostream& o, const Point& p) {\n      o << '(' << p.x << ',' << p.y << ')';\n      return o;\n    }\n    friend std::istream& operator>>(std::istream& i, Point& p) {\n      i >> p.x >> p.y;\n      return i;\n    }\n  };\n  using Vector = Point;\n  struct Line {\n    Point p1, p2;\n    Line() {}\n    Line(const Point& p1, const Point& p2) : p1(p1), p2(p2) {}\n    Line(double x1, double y1, double x2, double y2) : p1(Point(x1, y1)), p2(Point(x2, y2)) {}\n    Vector to_vector() const { return p2 - p1; }\n    friend std::ostream& operator<<(std::ostream& o, const Line& l) {\n      o << '(' << l.p1 << ',' << l.p2 << ')';\n      return o;\n    }\n    friend std::istream& operator>>(std::istream& i, Line& l) {\n      i >> l.p1 >> l.p2;\n      return i;\n    }\n  };\n  using Segment = Line;\n  Point projection(const Line& line, const Point& point) {\n    double x1 = line.p1.x, y1 = line.p1.y, x2 = line.p2.x, y2 = line.p2.y;\n    double x0 = point.x, y0 = point.y;\n    double x01 = x1 - x0, y01 = y1 - y0, x12 = x2 - x1, y12 = y2 - y1;\n    double sd12 = x12 * x12 + y12 * y12;\n    double x = (x12 * x12 * x0 + y12 * y12 * x1 - x12 * y12 * y01) / sd12;\n    double y = (x12 * x12 * y1 + y12 * y12 * y0 - x12 * y12 * x01) / sd12;\n    return Point(x, y);\n  }\n  Point reflection(const Line& line, const Point& point) {\n    Point proj = projection(line, point);\n    return proj + proj - point;\n  }\n  double cross_product(const Vector& v1, const Vector& v2) {\n    return v1.x * v2.y - v2.x * v1.y;\n  }\n  double inner_product(const Vector& v1, const Vector& v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n  }\n  enum struct ccw_t {\n    COUNTER_CLOCKWISE,\n    CLOCKWISE,\n    ONLINE_BACK,\n    ONLINE_FRONT,\n    ON_SEGMENT\n  };\n  ccw_t ccw(const Point& p0, const Point& p1, const Point& p2) {\n    Vector v1 = p1 - p0, v2 = p2 - p0;\n    if (cross_product(v1, v2) > eps) return ccw_t::COUNTER_CLOCKWISE;\n    if (cross_product(v1, v2) < -eps) return ccw_t::CLOCKWISE;\n    if (inner_product(v1, v2) < -eps) return ccw_t::ONLINE_BACK;\n    if (v1.length() < v2.length()) return ccw_t::ONLINE_FRONT;\n    return ccw_t::ON_SEGMENT;\n  }\n  bool is_parallel(const Line& l1, const Line& l2) {\n    return abs(cross_product(l1.to_vector(), l2.to_vector())) < eps;\n  }\n  bool is_orthogonal(const Line& l1, const Line& l2) {\n    return abs(inner_product(l1.to_vector(), l2.to_vector())) < eps;\n  }\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n\n  using namespace geom;\n\n  int q;\n  cin >> q;\n  rep(_, q) {\n    Line l1, l2;\n    cin >> l1 >> l2;\n    if (is_parallel(l1, l2)) {\n      cout << 2 << '\\n';\n    }\n    else if (is_orthogonal(l1, l2)) {\n      cout << 1 << '\\n';\n    }\n    else {\n      cout << 0 << '\\n';\n    }\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n// 定義・定数\nusing P = complex<double>;\nconst double EPS = 1e-10;\n\nnamespace std {\n  // 点の比較演算子\n  bool operator < (const P &a, const P &b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n  \n  // 点の等価演算子\n  bool operator == (const P &a, const P &b) {\n    return fabs(a - b) < EPS;\n  }\n}\n\n// 直線\nstruct L : public vector<P> {\n  L(P &_a, P &_b) {\n    push_back(_a);\n    push_back(_b);\n  }\n};\n\n// 線分\nstruct S : L {\n  S(P &_a, P &_b) : L(_a, _b) {}\n};\n\n// 円\nstruct C {\n  P p;\n  double r;\n  \n  C(P _p, double _r) : p(_p), r(_r) {}\n};\n\n// 内積\ndouble dot(const P &a, const P &b) {\n  return real(conj(a) * b);\n}\n\n// 外積\ndouble cross(const P &a, const P &b) {\n  return imag(conj(a) * b);\n}\n\n// 直交判定\nbool isOrthogonal(const L &l, const L &m) {\n  return abs(dot(l[1] - l[0], m[1] - m[0])) < EPS;\n}\n\n// 平行判定\nbool isParallel(const L &l, const L &m) {\n  return abs(cross(l[1] - l[0], m[1] - m[0])) < EPS;\n}\n\n// 点の進行方向\nint ccw(P a, P b, P c) {\n  b -= a;\n  c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\n// 交差判定\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n         abs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const S &s) {\n  return cross(l[1] - l[0], s[0] - l[0]) *      // s[0] is left of l\n         cross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSS(const S &s, const S &t) {\n  return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n         ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\nbool intersectSP(const S &s, const P &p) {\n  return abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; // triangle inequality\n}\n\n// 距離など\nP projection(const L &l, const P &p) {\n  double t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n  return l[0] + t * (l[0] - l[1]);\n}\nP reflection(const L &l, const P &p) {\n  return p + 2.0 * (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n  return abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n  return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const S &s) {\n  if (intersectLS(l, s)) return 0;\n  return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const S &s, const P &p) {\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const S &s, const S &t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\nP crosspoint(const L &l, const L &m) {\n  double A = cross(l[1] - l[0], m[1] - m[0]);\n  double B = cross(l[1] - l[0], l[1] - m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n  if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n  return m[0] + B / A * (m[1] - m[0]);\n}\n\nint main() {\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  \n  int q;\n  cin >> q;\n  while (q--) {\n    double a, b, c, d, x, y, z, w;\n    cin >> a >> b >> c >> d >> x >> y >> z >> w;\n    P p0(a, b), p1(c, d), p2(x, y), p3(z, w);\n    L l(p0, p1), m(p2, p3);\n    \n    if (isParallel(l, m)) cout << 2 << '\\n';\n    else if (isOrthogonal(l, m)) cout << 1 << '\\n';\n    else cout << 0 << '\\n';\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef complex<double> V;\ntypedef vector<P> vecP;\ntypedef pair<P,P> L;\ntypedef pair<P,P> S;\ntypedef pair<P,double> C;\nconst double eps=1e-8;\nconst double PI=acos(-1);\nconst double PI2=PI*2.0;\n\nnamespace std{\n  bool operator < (const P &a,const P &b){\n    return (a.imag()==b.imag()?\n            a.real()<b.real():\n            a.imag()<b.imag());\n  }\n};\n\nV normal(V a){\n  assert( abs(a)>0 );\n  return a/abs(a);\n}\n\ndouble Sqrt( double x ){\n  if(x<0)return 0;\n  else return sqrt(x);\n}\n\nP Vector(L a){\n  return a.second-a.first;\n}\n\nbool eq(double a,double b){\n  return (-eps<a-b&&a-b<eps);\n}\n\nbool eq(P a,P b){\n  return ( eq(a.real(),b.real()) && eq(a.imag(),b.imag()) );\n}\n\ndouble dot(P a,P b){\n  return real(b*conj(a));\n}\n\ndouble cross(P a,P b){\n  return imag(b*conj(a));\n}\n\ndouble getArg(P a,P b){\n  return arg(b*conj(a));\n}\n\ndouble getTime(V a,V b){\n  assert( eq(cross(a,b),0) );\n  return ( dot(a,b) < 0 ? -1.0 : 1.0 ) * abs(b) / abs(a);\n}\n\n\nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nP reflect(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*conj(c/b);\n}\n\nint ccw(P a,P b,P c){\n  P ab=b-a,ac=c-a;\n  P k=ac*conj(ab);\n  if(k.imag()>0)return 1;\n  if(k.imag()<0)return -1;\n  if(k.real()<0)return 2;\n  if(abs(ab)<abs(ac))return -2;\n  return 0;\n}\n\nbool isParallel(P a,P b){\n  return eq(0, cross(a,b));\n}\n\nbool isParallel(L l0,L l1){\n  return eq(0, cross( Vector(l0) , Vector(l1) ) );\n}\n\nbool onLP(L l,P p){\n  P a=l.first, b=l.second;\n  return eq(0, cross(b-a,p-a));\n}\n\nbool onSP(S s,P p){\n  P a=s.first, b=s.second;\n  return eq( abs(b-a) , abs(a-p)+abs(b-p) );\n}\n\nbool isCrossSS(S s0,S s1){\n  P a=s0.first, b=s0.second;\n  P c=s1.first, d=s1.second;\n  int f0 = ccw(a,b,c) * ccw(a,b,d);\n  int f1 = ccw(c,d,a) * ccw(c,d,b);\n  return (f0<=0 && f1<=0);\n}\n\nbool isCrossLS(L l,S s){\n  P a=l.first, b=l.second;\n  P c=s.first, d=s.second;\n  return ( ccw(a,b,c) * ccw(a,b,d) <= 0 );\n}\n\ndouble distLP(L l,P p){\n  P a=l.first, b=l.second;\n  double res = cross(b-a,p-a) / abs(b-a);\n  return abs(res);\n}\n\ndouble distSP(S s,P p){\n  P a=s.first, b=s.second;\n  if( dot(b-a,p-a) < eps )return abs(p-a);\n  if( dot(a-b,p-b) < eps )return abs(p-b);\n  return distLP(s,p);\n}\n\nP getCrossLL(L l0,L l1){\n  P a=l0.first, b=l0.second;\n  P c=l1.first, d=l1.second;\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\n\n \nint inPolygon(vecP &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( onSP(S(a,b),p) )return 1;\n    sum+= getArg(a-p,b-p);\n  }\n  if( abs(sum) < eps )return 0;\n  else return 2;\n}\n\nvecP andrewScan(vecP &t){\n  int N=t.size(),C=0;\n  vecP R(N);\n  for(int i=0;i<N;i++){\n    while(2<=C&&ccw(R[C-2],R[C-1],t[i])==-1)C--;\n    R[C++]=t[i];\n  }\n  vecP res(C);\n  for(int i=0;i<C;i++)res[i]=R[i];\n  return res;\n}\n \nvecP convexHull(vecP &t){\n  sort(t.begin(),t.end());\n  vecP u=andrewScan(t);\n  reverse(t.begin(),t.end());\n  vecP l=andrewScan(t);\n  for(int i=1;i+1<(int)l.size();i++)u.push_back(l[i]);\n  return u;\n}\n\nvecP cutConvex(vecP &t,L l){\n  P a=l.first, b=l.second;\n  int N=t.size();\n  vecP res;\n  for(int i=0;i<N;i++){\n    P c=t[i],d=t[(i+1)%N];\n    int C=ccw(a,b,c),D=ccw(a,b,d);\n    if(C!=-1)res.push_back(c);\n    if(C==-D&&abs(C)==1)res.push_back(getCrossLL( l ,L(c,d) ));\n  }\n  return res;\n}\n\nP getVector(const vecP &t, int id){\n  int n=t.size();\n  return t[ (id+1)%n ] - t[id%n];\n}\n\ndouble convex_diameter(vecP &t) {\n  int n = t.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(t[i]) > imag(t[is])) is = i;\n    if (imag(t[i]) < imag(t[js])) js = i;\n  }\n  double maxd = norm(t[is]-t[js]);\n \n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    \n    if (cross( getVector(t,i), getVector(t,j)) >= 0) j = (j+1) % n;\n    \n    else i = (i+1) % n;\n    if (norm(t[i]-t[j]) > maxd) {\n      maxd = norm(t[i]-t[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxd; /* farthest pair is (maxi, maxj). */\n}\n\nbool compare_y(const P &a,const P &b){\n  return a.imag() < b.imag();\n}\n\ndouble closest_pair(P *a, int n){\n  if(n <= 1) return 1e30;\n  int m = n / 2;\n  double x = a[m].real();\n  double d = min(closest_pair(a, m), closest_pair(a + m, n - m));\n  inplace_merge(a, a + m, a + n, compare_y);\n  vector<P> b;\n  for(int i=0;i<n;i++){\n    if( abs(a[i].real() - x) >= d) continue;\n    for(int j=0;j<(int)b.size();j++){\n      double dx = real(a[i] - b[b.size() - j - 1]);\n      double dy = imag(a[i] - b[b.size() - j - 1]);\n      if(dy >= d) break;\n      d = min(d, sqrt(dx * dx + dy * dy));\n    }\n    b.push_back(a[i]);\n  }\n  return d;\n}\n\nP _pool[200005];\ndouble minDist(vecP &t){\n  int n=t.size();\n  for(int i=0;i<n;i++)_pool[i]=t[i];\n  sort( _pool, _pool+n);\n  return closest_pair(_pool, n);\n}\n\nint getStateCC(C a,C b){\n  double ar=a.second, br=b.second;\n  double dist=abs(a.first-b.first);\n  if(dist>ar+br+eps)return 4;\n  if(dist>ar+br-eps)return 3;\n  if(dist>abs(ar-br)+eps)return 2;\n  if(dist>abs(ar-br)-eps)return 1;\n  return 0;\n}\n\nP getCrossCC(C a,C b){\n  P p1=a.first, p2=a.second;\n  double r1=a.second, r2=b.second;\n  double cA = (r1*r1+norm(p1-p2)-r2*r2) / (2.0*r1*abs(p1-p2));\n  return p1+(p2-p1)/abs(p1-p2)*r1*P(cA,Sqrt(1.0-cA*cA));\n}\n\nS getTangentCP(C a,P p){\n  P base=a.first-p;\n  double ar=a.second;\n  double w=Sqrt(norm(base)-ar*ar);\n  P s=p+base*P(w,ar)/norm(base)*w;\n  P t=p+base*P(w,-ar)/norm(base)*w;\n  return S(s,t);\n}\n\nS getInTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double w=ar+br;\n  double h=Sqrt(norm(base)-w*w);\n  P k=base*P(w,h*flg)/norm(base);\n  return S(ap+k*ar,bp-k*br);\n}\n  \nS getOutTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double h=br-ar;\n  \n  double w=Sqrt(norm(base)-h*h);\n  P k=base*P(w,h*flg)/norm(base)*P(0,flg);\n  return S(ap+k*ar,bp+k*br);\n}\n  \nvector<S> getTangent(C a,C b){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  vector<S> res;\n  double dist=abs(ap-bp);\n    \n  if(dist>ar+br+eps)\n    res.push_back(getInTangent(a,b,1));\n  \n  if(dist>ar+br-eps)\n    res.push_back(getInTangent(a,b,-1));\n  \n  if(dist>abs(ar-br)+eps)\n    res.push_back(getOutTangent(a,b,1));\n  \n  if(dist>abs(ar-br)-eps)\n    res.push_back(getOutTangent(a,b,-1));\n  \n  return res;\n}\n\n\nvecP getCrossCS(C cir,S s, bool debug=false){\n  P a=s.first, b=s.second;\n  double cr=cir.second;\n  P cp=cir.first;\n  \n  vecP res;\n  P base=b-a,  target=project(a,b,cp);\n  \n  double length=abs(base), h=abs(cp-target);\n  base/=length;\n  \n  if(cr+eps<h)return res;\n  double w=Sqrt(cr*cr-h*h);\n  double L=getTime( normal(b-a) ,target-a)-w,  R=L+w*2.0;\n  \n  if( -eps<L && L< length+eps )res.push_back(a+base*L);\n  if( eq(L,R) )return res;\n  if( -eps<R && R< length+eps )res.push_back(a+base*R);\n  return res;\n}\n \ndouble getArea(C c,P a,P b){\n  P cp=c.first;\n  double cr=c.second;\n  \n  P va=cp-a,  vb=cp-b;\n  double A=abs(va), B=abs(vb);\n  double f=cross(va,vb), d=distSP( S(a,b) ,cp), res=0;\n  \n  if( eq(0, f ) )return 0;\n  if(A<cr+eps&&B<cr+eps)return f*0.5;\n  if(d>cr-eps)return cr*cr*PI*getArg(va,vb)/PI2;\n   \n  vecP u=getCrossCS(c, S(a,b) );\n  \n  assert( !u.empty() );\n  u.insert(u.begin(), a),  u.push_back(b);\n \n  for(int i=0;i+1<(int)u.size();i++) res+=getArea(c,u[i],u[i+1]);\n  return res;\n}\n \ndouble getCrossArea(vecP t,C c){\n  int n=t.size();\n  if(n<3)return 0;\n  double res=0;\n  for(int i=0;i<n;i++){\n    P a=t[i], b=t[(i+1)%n];\n    res+=getArea(c,a,b);\n  }\n  return res;\n}\n\nP input(){\n  int x,y;\n  cin>>x>>y;\n  return P(x,y);\n}\n\nvoid pr(P p,string str){\n  printf(\"%.10f %.10f\",p.real(),p.imag());\n  cout<<str;\n}\n\n\nint main(){\n  P s,t;\n  s=input(), t=input();\n  P a,b;\n  a=input(), b=input();\n  \n  if( isParallel(s-t,a-b) )cout<<2<<endl;\n  else if( eq( dot(s-t,a-b) , 0 ) )cout<<1<<endl;\n  else cout<<0<<endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n\nint main(void) {\n  int n, i, j, x[4], y[4];\n  scanf(\"%d\", &n);\n  for(j = 0; j < n; ++j) {\n    for(i = 0; i < 4; ++i) scanf(\"%d%d\", &x[i], &y[i]);\n    if((y[1] - y[0]) * (x[3] - x[2]) == (y[3] - y[2]) * (x[1] - x[0])) printf(\"2\\n\");\n    else if((y[1] - y[0]) * (y[3] - y[2]) == -(x[3] - x[2]) * (x[1] - x[0])) printf(\"1\\n\");\n    else printf(\"0\\n\");\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n \nusing namespace std;\nusing uint = unsigned int;\nusing ll = long long;\nusing ull = unsigned long long;\nconstexpr ll TEN(int n) { return (n==0) ? 1 : 10*TEN(n-1); }\ntemplate<class T> using V = vector<T>;\ntemplate<class T> using VV = V<V<T>>;\n\nusing D = double;\nconst D PI = acos(D(-1)), EPS = 1e-10;\n\nint sgn(D a) { return (abs(a) <= EPS) ? 0 : (a < 0 ? -1 : 1); }\nint sgn(D a, D b) { return sgn(a-b); }\n//relative sign\n// int rsgn(D a, D f) {\n//     if (abs(a) <= f*EPS) return 0;\n//     return (a < 0) ? -1 : 1;\n// }\nstruct Pt2 {\n    D x, y;\n    Pt2() {}\n    Pt2(D _x, D _y) : x(_x), y(_y) {}\n    Pt2 operator+(const Pt2 &r) const { return Pt2(x+r.x, y+r.y); }\n    Pt2 operator-(const Pt2 &r) const { return Pt2(x-r.x, y-r.y); }\n    Pt2 operator*(const Pt2 &r) const { return Pt2(x*r.x-y*r.y, x*r.y+y*r.x); }\n\n    Pt2 operator*(const D &r) const { return Pt2(x*r, y*r); }\n    Pt2 operator/(const D &r) const { return Pt2(x/r, y/r); }\n\n    Pt2& operator+=(const Pt2 &r) { return *this=*this+r; }\n    Pt2& operator-=(const Pt2 &r) { return *this=*this-r; }\n    Pt2& operator*=(const Pt2 &r) { return *this=*this*r; }\n    Pt2& operator*=(const D &r) { return *this=*this*r; }\n    Pt2& operator/=(const D &r) { return *this=*this/r; }\n    \n    Pt2 operator-() const { return Pt2(-x, -y); }\n\n    bool operator<(const Pt2 &r) const { return 2*sgn(x, r.x)+sgn(y, r.y)<0; }\n    bool operator==(const Pt2 &r) const { return sgn((*this-r).rabs()) == 0; }\n\n    D norm() const { return x*x + y*y; }\n    D abs() const { return sqrt(norm()); }\n    D rabs() const { return max(std::abs(x), std::abs(y)); } // robust abs\n    D arg() const { return atan2(y, x); }\n\n    pair<D, D> to_pair() const { return make_pair(x, y); }\n    static Pt2 polar(D le, D th) { return Pt2(le*cos(th), le*sin(th)); }\n};\nostream& operator<<(ostream& os, const Pt2 &p) {\n    return os << \"P(\" << p.x << \", \" << p.y << \")\";\n}\nusing P = Pt2;\n\nstruct L {\n    P s, t;\n    L() {}\n    L(P _s, P _t) : s(_s), t(_t) {}\n    P vec() const { return t-s; }\n    D abs() const { return vec().abs(); }\n    D arg() const { return vec().arg(); }\n};\nostream& operator<<(ostream& os, const L &l) {\n    return os << \"L(\" << l.s << \", \" << l.t << \")\";\n}\n\nD cross(P a, P b) { return a.x*b.y - a.y*b.x; }\nD dot(P a, P b) { return a.x*b.x + a.y*b.y; }\n// cross(a, b) is too small?\nint sgncrs(P a, P b) {\n    D cr = cross(a, b);\n    if (abs(cr) <= (a.rabs() + b.rabs()) * EPS) return 0;\n    return (cr < 0) ? -1 : 1;\n}\n\n// -2, -1, 0, 1, 2 : front, clock, on, cclock, back\nint ccw(P b, P c) {\n    int s = sgncrs(b, c);\n    if (s) return s;\n    if (!sgn(c.rabs()) || !sgn((c-b).rabs())) return 0;\n    if (dot(b, c) < 0) return 2;\n    if (dot(-b, c-b) < 0) return -2;\n    return 0;\n}\nint ccw(P a, P b, P c) { return ccw(b-a, c-a); }\nint ccw(L l, P p) { return ccw(l.s, l.t, p); }\n\nP project(const L &l, const P &p) {\n    P v = l.vec();\n    return l.s + v * (dot(v, p-l.s) / (v.x*v.x + v.y*v.y));\n}\n\nint crossLL(const L &l, const L &m, P &r) {\n    D cr1 = cross(l.vec(), m.vec()), cr2 = cross(l.vec(), l.t - m.s);\n    if (sgncrs(l.vec(), m.vec()) == 0) {\n        r = l.s;\n        if (sgncrs(l.vec(), l.t - m.s)) return 0;\n        return -1;\n    }\n    r = m.s + m.vec() * (cr2 / cr1);\n    return 1;\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << setprecision(20) << fixed;\n    \n    int q;\n    cin >> q;\n    for (int ph = 0; ph < q; ph++) {\n        L l, m;\n        D x, y;\n        cin >> x >> y; l.s = P(x, y);\n        cin >> x >> y; l.t = P(x, y);\n        cin >> x >> y; m.s = P(x, y);\n        cin >> x >> y; m.t = P(x, y);\n        int u = 0;\n        if (sgncrs(l.vec(), m.vec()) == 0) u = 2;\n        if (sgncrs(l.vec(), m.vec() * P(0, 1)) == 0) u = 1;\n        cout << u << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x=0,double y=0):x(x),y(y){}\n\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nint main() {\n\tint q;\n\tPoint p0, p1, p2, p3;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &p0.x, &p0.y, &p1.x, &p1.y, &p2.x, &p2.y, &p3.x, &p3.y);\n\t\tif (isOrthogonal(p0, p1, p2, p3))printf(\"1\\n\");\n\t\telse if (isParallel(p0, p1, p2, p3))printf(\"2\\n\");\n\t\telse printf(\"0\\n\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    int q;\n    int i;\n    int xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3;\n    double a_s1;\n    double a_s2;\n    int int_a_s11;\n    int int_a_s21;\n    int int_a_s12;\n    int int_a_s22;\n    int ans;\n    int ans_flg1;\n    int ans_flg2;\n\n    cin >> q;\n    for ( i = 0; i < q; ++i){\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n\n    \n    \n        ans_flg1 = 0;\n        ans_flg2 = 0;\n        if (xp1 == xp0){\n            a_s1 = xp1;\n            ans_flg1 = 1;\n        }else if (yp1 == yp0){\n            a_s1 = yp1;\n            ans_flg1 = 2;\n        }else{\n            a_s1 = (yp1 - yp0) / (xp1-xp0);\n        }\n        \n        if (xp3 == xp2){\n            a_s2 = xp3;\n            ans_flg2 = 1;\n        }else if (yp3 == yp2){\n            a_s2 = yp3;\n            ans_flg2 = 2;\n        }else{\n            a_s2 = (yp3 - yp2) / (xp3-xp2);\n        }\n        \n        ans = 0;\n        if (a_s1 == xp1 && a_s2 == xp3 && ans_flg1 == 1 && ans_flg2 == 1){\n            ans = 2;\n        }else if(a_s1 == yp1 && a_s2 == yp3 && ans_flg1 == 2 && ans_flg2 == 2){\n            ans = 2;\n        }else if(a_s1 == xp1 && a_s2 == yp3 && ans_flg1 == 1 && ans_flg2 == 2){\n            ans = 1;\n        }else if(a_s1 == yp1 && a_s2 == xp3 && ans_flg1 == 2 && ans_flg2 == 1){\n            ans = 1;\n        }else{\n            int_a_s11 = a_s1 * 1000;\n            int_a_s21 = a_s2 * 1000;\n            int_a_s21 = 1 /a_s2 * 1000;\n            if (int_a_s11 == int_a_s21){\n                //cout << int_a_s1 << \" \"<< int_a_s2 << endl;\n                ans = 2;\n            }else if(int_a_s11 == int_a_s22){\n                ans = 1;\n            }\n        }\n        \n        printf(\"%d\\n\",ans);\n        //cout << ans << endl;\n    }\n    \n    /*\n    for ( i = 0; i < q; ++i){\n        cout << xp0 << endl;\n        cout << yp0 << endl;\n        cout << xp1 << endl;\n        cout << yp1 << endl;\n        cout << xp2 << endl;\n        cout << yp2 << endl;\n        cout << xp3 << endl;\n        cout << yp3 << endl;\n    }\n    */\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\n//#define equals( a, b ) (fabs((a) - (b)) < DBL_E)\n\nclass Vector2 {\npublic:\n\tVector2(double x_, double y_) : x(x_), y(y_) {}\n\tVector2() : x(0), y(0) {}\n\tVector2 operator -(Vector2& other) {\n\t\tVector2 vec(x - other.GetX(), y - other.GetY());\n\t\treturn vec;\n\t}\n\tvoid SetVector2(double x_, double y_) {\n\t\tx = x_;\n\t\ty = y_;\n\t}\n\tdouble GetX() {\n\t\treturn x;\n\t}\n\tdouble GetY() {\n\t\treturn y;\n\t}\n\nprivate:\n\tdouble x, y;\n};\n\ndouble Dot(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetX() + vecA.GetY() * vecB.GetY();\n}\n\ndouble CrossY(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetY() - vecA.GetY() * vecB.GetX();\n}\n\nbool IsOrthogonal(Vector2 vecA, Vector2 vecB) {\n    double ans = Dot(vecA, vecB);\n//\treturn equals(ans, 0.0);\n\treturn (fabs(ans - 0) < DBL_EPSILON);\n}\n\nbool IsParallel(Vector2 vecA, Vector2 vecB) {\n\tdouble ans = CrossY(vecA, vecB);\n\treturn (fabs(ans - 0) < DBL_EPSILON);\n}\n\nint main() {\n\tint query;\n\tcin >> query;\n\n\tfor (int i = 0; i < query; i++) {\n\t\tVector2 vecs[4];\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tdouble x, y;\n\t\t\tcin >> x >> y;\n\t\t\tvecs[i].SetVector2(x, y);\n\t\t}\n\n\t\tVector2 vecA = vecs[1] - vecs[0];\n\t\tVector2 vecB = vecs[3] - vecs[2];\n\t\tbool orth = IsOrthogonal(vecA, vecB);\n\t\tif (orth) {\n\t\t\tcout << 1 << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbool para = IsParallel(vecA, vecB);\n\t\tif (para) {\n\t\t\tcout << 2 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tcout << 0 << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define mkp make_pair\n#define rep(i,n) for(int i=0;i<(n);++i)\ntypedef long long ll;\n\nconst ll MOD=1e9+7;\nconst double EPS=1e-9;\nconst double PI=acos(-1.0);\n//const long double PI=acos(-1.0L);\n\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n\n    Point operator +(const Point &b) const {return Point(x+b.x,y+b.y);}\n    Point operator -(const Point &b) const {return Point(x-b.x,y-b.y);}\n    Point operator *(const double b) const {return Point(x*b,y*b);}\n    Point operator /(const double b) const {return Point(x/b,y/b);}\n};\n\nstruct Line{\n    Point a,b;\n    Line(){}\n    Line(Point a,Point b):a(a),b(b){}\n};\n\nint sgn(double a) {return (a>EPS)-(a<-EPS);}\nint sgn(double a,double b) {return sgn(a-b);}\n\ndouble dot(const Point &a,const Point &b) {return (a.x*b.x+a.y*b.y);}\ndouble cross(const Point &a,const Point &b) {return (a.x*b.y-a.y*b.x);}\ndouble norm(const Point &p) {return dot(p,p);}\ndouble abs(const Point &p) {return sqrt(norm(p));}\n\nPoint projection(const Point &p,const Line &l){\n    double r=dot(p-l.a,l.b-l.a)/norm(l.b-l.a);\n    return l.a+(l.b-l.a)*r;\n}\n\nPoint reflection(const Point &p,const Line &l){\n    return p+(projection(p,l)-p)*2;\n}\n\n//1:Counter_Clockwise -1:Clockwise\n//2:a-b-c -2:c-a-b 0:a-c-b\nint ccw(const Point &p,const Point &q){\n    int s=sgn(cross(p,q));\n    if(s!=0) return s;\n    if(dot(p,q)<0) return -2;\n    if(norm(p)<norm(q)) return 2;\n    return 0;\n}\nint ccw(const Point &a,const Point &b,const Point &c){return ccw(b-a,c-a);}\n\nbool isParallel(const Line &l,const Line &r){\n    if(sgn(cross(l.b-l.a,r.b-r.a))==0) return true;\n    return false;\n}\nbool isOrthogonal(const Line &l,const Line &r){\n    if(sgn(dot(l.b-l.a,r.b-r.a))==0) return true;\n    return false;\n}\n\nint main(){\n    int Q;\n    cin>>Q;\n\n    for(int q=0;q<Q;q++){\n        Point P1,P2;\n        cin>>P1.x>>P1.y>>P2.x>>P2.y;\n        Point P3,P4;\n        cin>>P3.x>>P3.y>>P4.x>>P4.y;\n\n        Line L1(P1,P2);\n        Line L2(P3,P4);\n        if(isParallel(L1,L2)) cout<<\"2\"<<endl;\n        else if(isOrthogonal(L1,L2))cout<<\"1\"<<endl;\n        else cout<<\"0\"<<endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\n#include<iomanip>\n#include<cmath>\n\nusing namespace std;\ntypedef long long ll;\n#define REP(i,n) for(int i=0;i<(int)(n);i++)\n\nclass point2d{\n    public:\n    double x,y;\n    constexpr static double EPS = 0.0000000001;\n\n    point2d() : x(0),y(0){}\n    point2d(double a, double b) :x(a), y(b){}\n\n    double add(double a, double b){\n        if(std::abs(a+b) < EPS * (std::abs(a)+std::abs(b))) return 0;\n        return a+b;\n    }\n    point2d operator+(point2d v){\n        point2d a(add(x, v.x), add(y, v.y)); return a;\n    }\n    point2d operator-(point2d v){\n        point2d a(add(x, -v.x), add(y, -v.y)); return a;\n    }\n    double operator*(point2d v){ //内積\n        return add(x*v.x, y*v.y);\n    }\n    point2d operator*(double v){\n        x *= v; y *= v; return (*this);\n    }\n    point2d operator/(double v){\n        if(v==0) cout << \"zero division!!!\" << endl;\n        x /= v; y /=v; return (*this);\n    }\n    void operator=(point2d v){\n        x = v.x; y = v.y;\n    }\n    bool operator==(point2d v){\n        return (x==v.x)&&(y==v.y);\n    }\n\n    double simeq(point2d v){\n        return ((x-v.x)<EPS && (v.x-x)<EPS && (y-v.y)<EPS && (v.y-y)<EPS);\n    }\n    double norm() { return add(x*x, y*y); }  //距離^2\n    double length() { return std::sqrt(add(x*x, y*y)); }  //距離\n    double isZero(){ point2d zero; return (*this).simeq(zero); }\n    double dot(point2d v){ return add(x*v.x, y*v.y); }   // 内積\n    double cross(point2d v){ return add(x*v.y, -y*v.x); } // 外積\n    double cosine(point2d v){\n        if((*this).isZero() || v.isZero()) cout << \"cannot calc cosine by zero!!!\" << endl;\n        double cos = (*this).dot(v) / (*this).length() / v.length();\n        return cos;\n    }\n    double sine(point2d v){\n        if((*this).isZero() || v.isZero()) cout << \"cannot calc sine by zero!!!\" << endl;\n        double sin = (*this).cross(v) / (*this).length() / v.length();\n        return sin;\n    }\n    bool parallel(point2d v, bool near=true){  // 平行\n        double cross = (*this).cross(v);\n        if(near)return cross<EPS && cross>-EPS;\n        else return cross==0.0;\n    }\n    bool orthogonal(point2d v, bool near=true){ // 直交\n        double dot = (*this).dot(v);\n        if(near)return dot<EPS && dot>-EPS;\n        else return dot==0.0;\n    }\n    int clockwise(point2d v){\n        double dot = (*this).dot(v);\n        double cross = (*this).cross(v);\n        if(cross>0.0) return -1; // 反時計回り\n        else if(cross<0.0) return 1; //時計回り\n        else if(dot>0.0 && (*this).norm() < v.norm()) return 2; // 直線上、向き同じ\n        else if(dot<0.0) return -2; // 直線上、逆向き\n        else return 0; // 線分上\n    }\n\n    friend std::ostream& operator<<(std::ostream &stream, const point2d v){\n        stream << std::fixed << std::setprecision(13) << std::showpoint << v.x << \" \" << v.y;\n        return stream;\n    }\n};\n\nint main(){\n    int q;\n    cin >> q;\n    REP(i,q){\n        double x11,x12,x21,x22,y11,y12,y21,y22;\n        cin >> x11 >> y11 >> x12 >> y12 >> x21 >> y21 >> x22 >> y22;\n        point2d p0(x11,y11), p1(x12,y12), p2(x21,y21), p3(x22,y22);\n        point2d v1=p1-p0;\n        point2d v2=p3-p2;\n        if(v1.parallel(v2, true))cout << \"2\" << endl;\n        else if(v1.orthogonal(v2, true))cout << \"1\" << endl;\n        else cout << \"0\" << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long double ld;\n\nconst ld EPS = 1e-9;\nconst ld INF = 1e10;\nconst ld PI = M_PI;\n\nstruct Point{\n  ld x, y;\n  Point(ld x, ld y):x(x), y(y){}\n  Point(){}\n};\n\nPoint operator+(const Point &a, const Point &b){\n  return Point(a.x + b.x, a.y + b.y);\n}\nPoint operator-(const Point &a, const Point &b){\n  return Point(a.x - b.x, a.y - b.y);\n}\nPoint operator*(const Point &a, const ld b){\n  return Point(a.x * b, a.y * b);\n}\nPoint operator*(const Point &a, const Point &b){\n  return Point(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\nPoint operator/(const Point &a, const ld b){\n  return Point(a.x / b, a.y / b);\n}\n\nld cross(const Point &a, const Point &b){\n  return a.x*b.y - a.y*b.x;\n}\n\nld dot(const Point &a, const Point &b){\n  return a.x*b.x + a.y*b.y;\n}\n\nld norm(const Point &a){\n  return dot(a, a);\n}\n\nstruct Line:vector<Point>{\n  Line(Point a = Point(0, 0), Point b = Point(0, 0)){\n    this->push_back(a);\n    this->push_back(b);\n  }\n};\n\nbool is_orthogonal(const Line &l1, const Line &l2){\n  return dot(l1[0]-l1[1], l2[0]-l2[1]) < EPS;\n}\n\nbool is_parallel(const Line &l1, const Line &l2){\n  return cross(l1[0]-l1[1], l2[0]-l2[1]) < EPS;\n}\n\nint main(){  \n  int q;\n  cin >> q;\n  while(q--){\n    Point p0, p1;\n    Line l1, l2;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    l1 = Line(p0, p1);\n    \n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    l2 = Line(p0, p1);\n    \n    if(is_orthogonal(l1, l2)) cout << 1 << endl;\n    else if(is_parallel(l1, l2)) cout << 2 << endl;\n    else cout << 0 << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n \nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n}\n\nint main(){\n  double x0,y0,x1,y1,x2,y2,x3,y3;\n  cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n  Point p0=Point(x0,y0),p1=Point(x1,y1),p2=Point(x2,y2),p3=Point(x3,y3);\n  if(isParallel(p0,p1,p2,p3)) cout << 2 << endl;\n  else if(isOrthogonal(p0,p1,p2,p3)) cout << 1 << endl;\n  else cout << 0 << endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point p){ return Point(x * p.x, y * p.y); }\n\tPoint operator / (Point p){ return Point(x / p.x, y / p.y); }\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x * x + y * y; }\n\n\tbool operator<(const Point &p){ return (x != p.x) ? (x < p.x) : (y < p.y); }\n\tbool operator==(const Point &p)\n\t{\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\ntypedef Point Segment;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//bool isOrthogonal(Segment s1, Segment s2){\n//\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0);\n//}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nint main()\n{\n\tint n; cin >> n;\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tPoint a1, a2, b1, b2;\n\t\tcin >> a1.x >> a1.y >> a2.x >> a2.y >> b1.x >> b1.y >> b2.x >> b2.y;\n\t\tif (isParallel(a1, a2, b1, b2))\n\t\t\tcout << 2 << endl;\n\t\telse if (isOrthogonal(a1, a2, b1, b2))\n\t\t\tcout << 1 << endl;\n\t\telse\n\t\t\tcout << 0 << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\nusing namespace std;\nclass Point{\n        public:\n                double y,x;\n                Point(double x=0,double y=0):x(x),y(y){};\n                Point operator-(Point other){\n                        return Point(x-other.x,y-other.y);\n                }Point operator+(Point other){\n                        return Point(x+other.x,y+other.y);\n                }\n};\ndouble absolute(double x){\n        return x>=0?x:x*-1;\n}\nclass Vector{\n        public:\n                Point start,end;\n                double norm(Point tmp){\n                        return tmp.y*tmp.y + tmp.x*tmp.x;\n                }double abs_len(Point tmp){\n                        return sqrt(norm(tmp));\n                }\n                double dot(Point a,Point b){\n                        return a.x*b.x + a.y*b.y;\n                }\n                double cross(Point a,Point b){\n                        return a.x*b.y-a.y*b.x;\n                }\n};\nint main(){\n        int N;\n        Vector s1,s2,all;\n        cin >> N;\n        for(int i=0 ; i<N ; i++ ){\n                cin >> s1.start.x >> s1.start.y;\n                cin >> s1.end.x >> s1.end.y;\n                cin >> s2.start.x >> s2.start.y;\n                cin >> s2.end.x >> s2.end.y;\n                double dot=all.dot(s1.end-s1.start,s2.end-s2.start);\n                double cross=all.cross(s1.end-s1.start,s2.end-s2.start);\n                if(dot==0)cout <<\"1\"<<endl;\n                else if(cross==0)cout<<\"2\"<<endl;\n                else    cout<<\"0\"<<endl;\n        }\n        return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include <cstdlib>  \n#include <math.h>\n#include <cmath>\n#include<complex>\n#include<cctype>\n#include<string>\n#include<set>\n#include<iomanip>\n#include <map>\n#include<algorithm>\n#include <functional>\n#include<vector>\n#include<climits>\n#include<stack>\n#include<queue>\n#include<bitset>\n#include <deque>\n#include <climits>\n#include <typeinfo>\n#include <utility> \n#include <numeric>\nusing namespace std;\nusing Complex = complex<double>;\nusing ll = long long;\ntemplate<typename T>using min_priority_queue = priority_queue<T, vector<T>, greater<T>>;\nconst ll inf = 1145141919810364364LL;\nconst double EPS = 1e-10;\ndouble PI = acos(-1.0);\n#define all(x) (x).begin(),(x).end()\n#define puts(x) cout << x << endl\n#define rep(i,m,n) for(ll i = m;i < n;++i)\n#define pb push_back\n#define fore(i,a) for(auto &i:a)\n#define rrep(i,m,n) for(ll i = m;i >= n;--i)\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a*x, a*y); }\n\tPoint operator / (double a) { return Point(a / x, a / y); }\n\tbool operator < (Point p) { return (x != p.x) ? (x < p.x):(y < p.y); }\n\tbool operator == (Point p) { return (fabs(x-p.x) < EPS) && (fabs(y-p.y) < EPS); }\n\t\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y + y; }\n\tdouble equals(double a, double b) { return fabs(a-b) < EPS; }\n\n\tdouble dot(Point b) { return x * b.x + y * b.y; }\n\tdouble cross(Point b) { return x * b.y - y*b.x; }\n\n\tbool isOrthogonal(Point b) { return equals(this->dot(b),0.0); }\n\tbool isParallel(Point b) { return equals(this->cross(b),0.0); }\n\n};\ntypedef Point Vector;\n\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\n\tint Q;\n\tcin >> Q;\n\tfor (int i = 0; i < Q; i++) {\n\t\tint xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n\t\tcin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n\t\tVector v0(xp0, yp0);\n\t\tVector v1(xp1, yp1);\n\t\tVector v2(xp2, yp2);\n\t\tVector v3(xp3, yp3);\n\t\tv0 = v0 - v1;\n\t\tv2 = v2 - v3;\n\t\tif (v0.isParallel(v2))puts(2);\n\t\telse if (v0.isOrthogonal(v2))puts(1);\n\t\telse puts(0);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\ntypedef int scalar;\nclass point{\n\tpublic:\n\tscalar x;\n\tscalar y;\n\tpoint(scalar a = 0, scalar b=0) : x(a), y(b){}\n\tvoid print(){\n\t\tcout << x << \" \" << y; \n\t}\n\tscalar cross(point a){//??????\n\t\treturn x * a.y - y * a.x;\n\t}\n\tscalar dot(point a){//??????\n\t\treturn x * a.x + y * a.y;\n\t}\n\tscalar norm(void){\n\t\treturn x * x + y * y;\n\t}\n\tscalar abs(void){\n\t\treturn sqrt(norm());\n\t}\n\tpoint operator =(point a){\n\t\tx = a.x;\n\t\ty = a.y;\n\t\treturn *this;\n\t}\n\tpoint operator +(point a){return point(x + a.x, y + a.y);}\n\tpoint operator -(point a){return point(x - a.x, y - a.y);}\n};\n\nint main(){\n\tpoint p0, p1, p2, p3;\n\tpoint v1,v2;\n\tint q;\n\tcin >> q;\n\tfor(int i = 0;i < q;i++){\n\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\tv1 = p1 - p0;\n\t\tv2 = p3 - p2;\n\t\t//v1.print();v2.print();\n\t\t//??????????¨??????????0????????????\n\t\tif(v1.cross(v2)==0){\n\t\t\tcout << 2 << endl;\n\t\t}else if(v1.dot(v2)==0){\n\t\t\tcout << 1 << endl;\n\t\t}else cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\nsigned main() {\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tdouble x1, x2, x3, x4, y1, y2, y3, y4;\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tdouble x12 = x2 - x1, y12 = y2 - y1;\n\t\tdouble x34 = x4 - x3, y34 = y4 - y3;\n\t\tif (x12*x34 + y12*y34 == 0)cout << \"1\\n\";\n\t\telse if (x12 * y34 == x34 * y12) cout << \"2\\n\";\n\t\telse cout << \"0\\n\";\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\nusing namespace std;\n\ntemplate <typename T>\nstruct Vec2;\n\ntemplate <typename T>\nT SqrMagnitude(const Vec2<T>& v);\n\ntemplate <typename T>\nT Magnitude(const Vec2<T>& v);\n\ntemplate <typename T>\nT Dot(const Vec2<T>& v1, const Vec2<T>& v2);\n\n\ntemplate <typename T>\nstruct Vec2 {\n    T x, y;\n    Vec2() = default;\n    Vec2(T in_x, T in_y)\n        : x {in_x}, y {in_y} {};\n    Vec2(const Vec2&) = default;\n    Vec2(Vec2&&) = default;\n\n    Vec2 normalized() const{\n        T mag = Magnitude(*this);\n        return {x / mag, y / mag};\n    }\n\n    Vec2 normalize() {\n        T mag = Magnitude(*this);\n        return {x /= mag, y /= mag};\n    }\n\n    Vec2 operator-() {\n        return {-x, -y};\n    }\n\n    Vec2 operator+(const Vec2& rhs) const{\n        return {x + rhs.x, y + rhs.y};\n    }\n\n    Vec2 operator-(const Vec2& rhs) const{\n        return {x - rhs.x, y - rhs.y};\n    }\n\n    Vec2 operator*(T rhs) const{\n        return {x * rhs, y * rhs};\n    }\n\n    Vec2 operator/(T rhs) const{\n        return {x / rhs, y / rhs};\n    }\n\n    Vec2& operator+=(const Vec2& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n\n    Vec2& operator-=(const Vec2& rhs) {\n        x -= rhs.x;\n        y -= rhs.y;\n        return *this;\n    }\n\n    Vec2& operator*=(T rhs) {\n        x *= rhs;\n        y *= rhs;\n        return *this;\n    }\n\n    Vec2& operator/=(T rhs) {\n        x /= rhs;\n        y /= rhs;\n        return *this;\n    }\n};\n\ntemplate <typename T>\ninline Vec2<T> operator*(T s, const Vec2<T>& v) {\n    return {s * v.x, s * v.y};\n}\n\n\ntemplate <typename T>\ninline T SqrMagnitude(const Vec2<T>& v) {\n    return Dot(v, v);\n}\n\ntemplate <typename T>\ninline T Magnitude(const Vec2<T>& v) {\n    return sqrt(SqrMagnitude(v));\n}\n\ntemplate <typename T>\ninline T Dot(const Vec2<T>& v1, const Vec2<T>& v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\ntemplate <typename T>\ninline T Cross(const Vec2<T>& v1, const Vec2<T>& v2) {\n    return v1.x * v2.y - v1.y *v2.x;\n}\n\nint main() {\n    using ld = long double;\n\n    Vec2<int> p0, p1, p2, p3;\n\n\n    int n;\n    cin >> n;\n\n\n    for(int i = 0; i < n; ++i) {\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        \n        auto s1 = p1 - p0;\n        auto s2 = p3 - p2;        \n        auto cross = Cross(s1, s2);\n        auto dot = Dot(s1, s2);\n        \n        if(dot == 0)\n            cout << 1 << endl;\n        else if(cross == 0)\n            cout << 2 << endl;\n        else\n            cout << 0 << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// include\n//------------------------------------------\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n// conversion\n//------------------------------------------\ninline int toInt(string s) {\n    int v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\ntemplate <class T>\ninline string toString(T x) {\n    ostringstream sout;\n    sout << x;\n    return sout.str();\n}\n\n// math\n//-------------------------------------------\ntemplate <class T>\ninline T sqr(T x) {\n    return x * x;\n}\n\n// typedef\n//------------------------------------------\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<int, int> PII;\ntypedef long long LL;\n\n// container util\n//------------------------------------------\n#define ALL(a) (a).begin(), (a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define SZ(a) int((a).size())\n#define EACH(i, c) \\\n    for (typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)\n#define EXIST(s, e) ((s).find(e) != (s).end())\n#define SORT(c) sort((c).begin(), (c).end())\n\n// repetition\n//------------------------------------------\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define REPI(itr, ds) for (auto itr = ds.begin(); itr != ds.end(); itr++)\n\n// constant\n//--------------------------------------------\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\nconst int INF_INT = 2147483647;\nconst LL INF_LL = 9223372036854775807;\n\n// clear memory\n//--------------------------------------------\n#define CLR(a) memset((a), 0, sizeof(a))\n\n// vector\n//--------------------------------------------\ntemplate <typename T>\nistream &operator>>(istream &is, vector<T> &vec) {\n    for (T &x : vec) is >> x;\n    return is;\n}\n\n// pair\n//--------------------------------------------\ntemplate <typename T, typename U>\nostream &operator<<(ostream &os, pair<T, U> &pair_var) {\n    os << \"(\" << pair_var.first << \", \" << pair_var.second << \")\";\n    return os;\n}\n\n// vector\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, const vector<T> &vec) {\n    os << \"{\";\n    for (int i = 0; i < vec.size(); i++) {\n        os << vec[i] << (i + 1 == vec.size() ? \"\" : \", \");\n    }\n    os << \"}\";\n    return os;\n}\n\n// list\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, const list<T> &lst) {\n    os << \"{\";\n    REPI(itr, lst) {\n        os << *itr;\n        itr++;\n        if (itr != lst.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// map\n//--------------------------------------------\ntemplate <typename T, typename U>\nostream &operator<<(ostream &os, map<T, U> &map_var) {\n    os << \"{\";\n    REPI(itr, map_var) {\n        os << *itr;\n        itr++;\n        if (itr != map_var.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// set\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, set<T> &set_var) {\n    os << \"{\";\n    REPI(itr, set_var) {\n        os << *itr;\n        itr++;\n        if (itr != set_var.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// dump\n//--------------------------------------------\n#define DUMPOUT cerr\n\nvoid dump_func() { DUMPOUT << endl; }\ntemplate <class Head, class... Tail>\nvoid dump_func(Head &&head, Tail &&... tail) {\n    DUMPOUT << head;\n    if (sizeof...(Tail) > 0) {\n        DUMPOUT << \", \";\n    }\n    dump_func(std::move(tail)...);\n}\n#ifdef DEBUG_\n#define DEB\n#define dump(...)                                                       \\\n    DUMPOUT << \"  \" << string(#__VA_ARGS__) << \": \"                     \\\n            << \"[\" << to_string(__LINE__) << \":\" << __FUNCTION__ << \"]\" \\\n            << endl                                                     \\\n            << \"    \",                                                  \\\n        dump_func(__VA_ARGS__)\n#else\n#define DEB if (false)\n#define dump(...)\n#endif\n\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator+(Point p) { return Point(x + p.x, y + p.y); }\n    Point operator-(Point p) { return Point(x - p.x, y - p.y); }\n    Point operator*(double a) { return Point(x * a, y * a); }\n    Point operator/(double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator==(const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\nclass vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\n\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s1.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s1.p1), 0.0);\n}\n\nint main(void) {\n    int n;\n    cin >> n;\n    Point a[n], b[n], c[n], d[n];\n    REP(i, n) {\n        cin >> a[i].x >> a[i].y >> b[i].x >> b[i].y >> c[i].x >> c[i].y >>\n            d[i].x >> d[i].y;\n    }\n    REP(i, n) {\n        if (isOrthogonal(a[i], b[i], c[i], d[i]))\n            cout << 1;\n        else if (isParallel(a[i], b[i], c[i], d[i]))\n            cout << 2;\n        else\n            cout << 0;\n        cout << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\nusing namespace std;\nint n;\nstruct point{\n    double x,y;\n    point(double x=0,double y=0):x(x),y(y){}\n}p[4];\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i){\n        for(int j=0;j<4;++j){\n            scanf(\"%lf%lf\",&(p[j].x),&(p[j].y));                                                  //1.double要用%lf\n        }\n        point tp1(p[0].x-p[1].x,p[0].y-p[1].y),tp2(p[2].x-p[3].x,p[2].y-p[3].y);\n        if((tp1.x*tp2.y-tp1.y*tp2.x-0)==0){\n            printf(\"2\\n\");\n        }else if((tp1.x*tp2.x+tp1.y*tp2.y)==0){\n            printf(\"1\\n\");\n        }else{\n            printf(\"0\\n\");\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <list>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <map>\n#include <set>\n#include <bitset>\n#include <tuple>\n#include <cassert>\n#include <exception>\n#include <iomanip>\n// #include \"./競プロ用テンプレート/Geometry.h\"\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<ll,ll> P;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<string> vs;\ntypedef vector<P> vp;\n#define rep(i,a,n) for(ll i = (a);i < (n);i++)\n#define per(i,a,n) for(ll i = (a);i > (n);i--)\n#define lep(i,a,n) for(ll i = (a);i <= (n);i++)\n#define pel(i,a,n) for(ll i = (a);i >= (n);i--)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define pb push_back\n#define mp make_pair\n#define all(c) (c).begin(),(c).end()\n#define sz size()\n#define print(X) cout << (X) << endl\nstatic const int INF = 1e+9+7;\nll n,m,l;\nstring s,t;\nint d[200010],dp[1010][1010];\ndouble w[1000],v[1000];\ndouble box[200010];\n\n// #define EPS (1e-10)\n// #define equals(a,b) (fabs(a,b) < EPS)\n\n// class Point{\n// public:\n//   double x,y;\n\n//   Point(double x = 0,double y = 0): x(x),y(y) {}\n\n//   Point operator + (const Point &p){ return Point(x+p.x , y+p.y); }\n//   Point operator - (const Point &p){ return Point(x-p.x , y-p.y); }\n//   Point operator * (double a){ return Point(x * a , y * a); }\n//   Point operator / (double a){ return Point(x / a , y / a); }\n\n//   double abs(){ return sqrt(norm()); }\n//   double norm(){ return x * x + y * y; }\n\n//   bool operator < (const Point &p) const{ return (x != p.x) ? x < p.x : y < p.y; }\n//   bool operator == (const Point &p) const{ return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS); }\n//   friend istream& operator >> (istream &is,Point &p){ return (is >> p.x >> p.y); }\n//   friend ostream& operator << (ostream &os,Point &p){ return (os << p.x << \" \" << p.y); }\n// };\n\n// class Circle{\n// public:\n//   Point c;\n//   double r;\n//   Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n//   friend istream& operator >> (istream &is,Circle c){return (is >> c.c >> c.r);}\n//   friend ostream& operator << (ostream &os,Circle c){return (os << c.c << \" \" << c.r);}\n// };\n\n// typedef Point Vector;\n\n// double norm(Point p){\n//   return p.x * p.x + p.y * p.y;\n// }\n\n// double abs(Point p){\n//   return sqrt(norm(p));\n// }\n\n// using namespace Geometry;\n\nnamespace Geometry{\n  #define EPS (1e-10)\n  #define equals(a,b) (fabs((a) - (b)) < EPS)\n  #define BOTTOM 0\n  #define LEFT 1\n  #define RIGHT 2\n  #define TOP 3\n  #define gprint(X) cout << fixed << setprecision(10) << (X) << endl\n  #define gprints(X,Y) cout << fixed << setprecision(10) << (X) << \" \" << (Y) << endl\n  static const int COUNTER_CLOCKWISE = 1;\n  static const int CLOCKWISE = -1;\n  static const int ONLINE_BACK = 2;\n  static const int ONLINE_FRONT = -2;\n  static const int ON_SEGMENT = 0;\n  \n  class Point{\n  public:\n    double x,y;\n    Point(double x = 0,double y = 0): x(x),y(y){}\n    Point operator + (Point p){ return Point(x + p.x , y + p.y); }\n    Point operator - (Point p){ return Point(x - p.x , y - p.y); }\n    Point operator * (double a){ return Point(a * x , a * y); }\n    Point operator / (double a){ return Point(x / a , y / a); }\n    bool operator < (const Point &p) const{ return x != p.x ? x < p.x : y < p.y; }\n    bool operator == (const Point &p) const{ return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS); }\n\n    double abs(){ return sqrt(norm()); }\n    double norm(){ return x * x + y * y; }\n    friend ostream& operator << (ostream &os,Point &p){ return os << p.x << \" \" << p.y; }\n    friend istream& operator >> (istream &is,Point &p){ return is >> p.x >> p.y; }\n  };\n\n  struct Segment{\n    Point p1,p2;\n    Segment(){};\n    Segment(Point p1,Point p2): p1(p1) , p2(p2){};\n    friend ostream& operator << (ostream &os,Segment &seg){ return os << seg.p1 << \" \" << seg.p2; }\n    friend istream& operator >> (istream &is,Segment &seg){ return is >> seg.p1 >> seg.p2; }\n  };\n\n  class Circle{\n  public:\n    Point c;\n    double r;\n    Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n    friend ostream& operator << (ostream &os,Circle &c){ return os << c.c << \" \" << c.r; }\n    friend istream& operator >> (istream &is,Circle &c){ return is >> c.c >> c.r; }\n  };\n\n  typedef Point Vector;\n  typedef Segment Line;\n  typedef vector<Point> Polygon;\n\n  double norm(Vector a){ return  a.x * a.x + a.y * a.y; }\n  double abs(Vector a){ return sqrt(norm(a)); }\n  double dot(Vector a,Vector b){ return a.x * b.x + a.y * b.y; }\n  double cross(Vector a,Vector b){ return a.x * b.y - a.y * b.x; }\n  bool Orthogonal(Vector a,Vector b){ return equals(dot(a,b),0.0); }\n  bool Orthogonal(Point a1,Point a2,Point b1,Point b2){ return Orthogonal(a1 - a2,b1 - b2); }\n  bool Orthogonal(Segment s1,Segment s2){ return equals(dot(s1.p2 - s1.p1,s2.p2 - s2.p1) , 0.0); }\n  bool Parallel(Vector a,Vector b){ return equals(cross(a,b),0.0); }\n  bool Parallel(Point a1,Point a2,Point b1,Point b2){ return Parallel(a1 - a2 , b1 - b2); }\n  bool Parallel(Segment s1,Segment s2){ return equals(cross(s1.p2 - s1.p1 , s2.p2 - s2.p1),0.0); }\n\n  Point project(Segment s,Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1 , base) / norm(base);\n    return s.p1 + base * r;\n  }\n\n  Point reflect(Segment s,Point p){\n    return p + (project(s,p) - p) * 2.0;\n  }\n\n  int ccw(Point p0,Point p1,Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n    if(cross(a,b) < -EPS)return CLOCKWISE;\n    if(dot(a,b) < -EPS)return ONLINE_BACK;\n    if(a.norm() < b.norm())return ONLINE_FRONT;\n    return ON_SEGMENT;\n  }\n\n  bool intersect(Point p1,Point p2,Point p3,Point p4){\n    return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 && \n            ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0);\n  }\n  bool intersect(Segment s1,Segment s2){ return intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2); }\n\n  double getDistance(Vector a,Vector b){ return abs(a - b); }\n  double getDistanceLP(Line l,Point p){ return abs(cross(l.p2 - l.p1 , p - l.p1) / abs(l.p2 - l.p1)); }\n  double getDistanceSP(Segment s,Point p){\n    if(dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n    if(dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n    return getDistanceLP(s,p);\n  }\n  double getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2))return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n  }\n\n  Point getCrossPoint(Segment s1,Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base,s1.p1 - s2.p1));\n    double d2 = abs(cross(base,s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n  }\n\n  pair<Point,Point> getCrossPoints(Circle c,Line l){\n    Vector pr = project(l,c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base , pr - e * base);\n  }\n\n  double arg(Vector p){ return atan2(p.y,p.x); }\n  Vector polar(double a,double r){ return Point(cos(r) * a, sin(r) * a); }\n\n  pair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r,t + a),c1.c + polar(c1.r,t - a));\n  }\n  \n  int contains(Polygon g,Point p){\n    int n = g.size();\n    bool x = false;\n    for(int i = 0;i < n;i++){\n      Point a = g[i] - p, b = g[(i + 1) % n] - p;\n      if(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n      if(a.y > b.y)swap(a,b);\n      if(a.y < EPS && EPS < b.y && cross(a,b) > EPS)x = !x;\n    }\n    return (x ? 2 : 0);\n  }\n\n  Polygon andrewScan(Polygon s){\n    Polygon u,l;\n    if(s.size() < 3)return s;\n    sort(s.begin(),s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n\n    l.push_back(s[s.size() - 1]);\n    l.push_back(s[s.size() - 2]);\n\n    for(int i = 2;i < s.size();i++){\n      for(int n = u.size();n >= 2 && ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n        u.pop_back();\n      }\n      u.push_back(s[i]);\n    }\n\n    for(int i = s.size() - 3; i >= 0;i--){\n      for(int n = l.size();n >= 2 && ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n        l.pop_back();\n      }\n      l.push_back(s[i]);\n    }\n    reverse(l.begin(),l.end());\n    for(int i = u.size() - 2;i >= 1;i--)l.push_back(u[i]);\n    return l;\n  }\n\n  class EndPoint{\n  public:\n    Point p;\n    int seg,st;\n    EndPoint(){}\n    EndPoint(Point p,int seg,int st): p(p),seg(seg),st(st){}\n\n    bool operator < (const EndPoint &ep) const{\n      if(p.y == ep.p.y){\n        return st < ep.st;\n      }else{\n        return p.y < ep.p.y;\n      }\n    }\n  };\n\n  EndPoint EP[2 * 100000];\n\n  int manhattanIntersection(vector<Segment> S){\n    int n = S.size();\n    for(int i = 0,k = 0;i < n;i++){\n      if(S[i].p1.y == S[i].p2.y){\n        if(S[i].p1.x > S[i].p2.x)swap(S[i].p1,S[i].p2);\n      }else if(S[i].p1.y > S[i].p2.y){\n        swap(S[i].p1,S[i].p2);\n      }\n\n      if(S[i].p1.y == S[i].p2.y){\n        EP[k++] = EndPoint(S[i].p1,i,LEFT);\n        EP[k++] = EndPoint(S[i].p2,i,RIGHT);\n      }else{\n        EP[k++] = EndPoint(S[i].p1,i,BOTTOM);\n        EP[k++] = EndPoint(S[i].p2,i,TOP);\n      }\n    }\n\n    sort(EP,EP + (2 * n));\n\n    set<int> BT;\n    BT.insert(1000000001);\n    int cnt = 0;\n    for(int i = 0;i < 2 * n;i++){\n      if(EP[i].st == TOP){\n        BT.erase(EP[i].p.x);\n      }else if(EP[i].st == BOTTOM){\n        BT.insert(EP[i].p.x);\n      }else if(EP[i].st == LEFT){\n        set<int>::iterator b = lower_bound(BT.begin(),BT.end(),S[EP[i].seg].p1.x);\n        set<int>::iterator e = upper_bound(BT.begin(),BT.end(),S[EP[i].seg].p2.x);\n        cnt += distance(b,e);\n      }\n    }\n    return cnt;\n  }\n};\n\nusing namespace Geometry;\n\n/*\nPoint is OK.\nSegment is OK.\nCircle is OK.\n\nReflect is OK.\nCCW is OK.\n\n*/\n\nint main(){\n  Segment a,b;\n  cin >> n;\n  rep(i,0,n){\n    cin >> a >> b;\n    if(Parallel(a,b))puts(\"2\");\n    else if(Orthogonal(a,b))puts(\"1\");\n    else puts(\"0\");\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nstruct Vector{\n    double x,y;\n    Vector(double x=0,double y=0):x(x),y(y){}\n};\ntypedef Vector Point;\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\ndouble abs(Vector a){\n    return sqrt(a.x*a.x+a.y*a.y);\n}\nint main(){\n    int T;\n    cin>>T;\n    while(T--){\n        Point p0,p1,p2,p3;\n        cin>>p0.x>>p0.y>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y;\n        Vector a,b;\n        a.x=p1.x-p0.x;\n        a.y=p1.y-p0.y;\n        b.x=p3.x-p2.x;\n        b.y=p3.y-p2.y;\n        double f1=dot(a,b);\n        double f2=cross(a,b);\n\n        if(fabs(f1)<1e-7){\n            cout<<1<<endl;\n        }\n        else {\n            if(fabs(f2)<1e-7)\n                cout<<2<<endl;\n            else\n                cout<<0<<endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <cmath>\n#include <algorithm>\n#include <iostream>\n#include <iomanip>\n#include <limits.h>\n#include <map>\n#include <queue>\n#include <set>\n#include <string.h>\n#include <vector>\n\nusing namespace std;\ntypedef long long ll;\n\nconst double EPS = 1e-9;\n\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n  double x;\n  double y;\n\n  Point(double x = 0.0, double y = 0.0) {\n    this->x = x;\n    this->y = y;\n  }\n\n  Point operator+(Point p) { return Point(x + p.x, y + p.y); }\n\n  Point operator-(Point p) { return Point(x - p.x, y - p.y); }\n\n  Point operator*(double a) { return Point(a * x, a * y); }\n\n  Point operator/(double a) { return Point(x / a, y / a); }\n\n  double norm() { return x * x + y * y; }\n\n  double abs() { return sqrt(norm()); }\n\n  bool operator<(const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator==(const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\nstruct Segment {\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\ndouble dot(const Vector &a, const Vector &b) {\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector &a, const Vector &b) {\n  return a.x * b.y - a.y * b.x;\n}\n\nclass Circle {\npublic:\n  Point c;\n  double r;\n\n  Circle(Point c = Point(), double r = 0.0) {\n    this->c = c;\n    this->r = r;\n  }\n};\n\ntypedef vector <Point> Polygon;\n\nbool isOrthogonal(const Vector &a, const Vector &b) {\n  return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(const Vector &a, const Vector &b) {\n  return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n  return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n  return equals(cross(s1.p2 - s2.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 直線の直行・平行判定\nint main() {\n  int Q;\n  cin >> Q;\n\n  int x0, x1, x2, x3;\n  int y0, y1, y2, y3;\n  for (int i = 0; i < Q; ++i) {\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n    Point p1(x0, y0);\n    Point p2(x1, y1);\n    Point p3(x2, y2);\n    Point p4(x3, y3);\n\n    if (isOrthogonal(p1, p2, p3, p4)) {\n      cout << 1 << endl;\n    } else if (isParallel(p1, p2, p3, p4)) {\n      cout << 2 << endl;\n    } else {\n      cout << 0 << endl;\n    }\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <limits>\n#include <cmath>\n\nusing namespace std;\n\n#define EPS (numeric_limits<double>::epsilon())\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator+(const Point &p) const\n    {\n        return Point(x + p.x, y + p.y);\n    }\n\n    Point operator-(const Point &p) const\n    {\n        return Point(x - p.x, y - p.y);\n    }\n\n    Point operator*(const double &a) const\n    {\n        return Point(a * x, a * y);\n    }\n\n    Point operator/(const double &a) const\n    {\n        return Point(x / a, y / a);\n    }\n\n    double abs()\n    {\n        return sqrt(norm());\n    }\n\n    double norm()\n    {\n        return x * x + y * y;\n    }\n\n    bool operator<(const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator==(const Point &p) const\n    {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b)\n{\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n    return equals(cross(a2 - a1, b2 - b1), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b)\n{\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n    return equals(dot(a2 - a1, b2 - b1), 0.0);\n}\n\n\nint main()\n{\n    int query;\n    cin >> query;\n    Point p0, p1, p2, p3;\n    for(int q = 0; q < query; q++)\n    {\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        if(isParallel(p0, p1, p2, p3))\n            cout << \"2\" << endl;\n        else if(isOrthogonal(p0, p1, p2, p3))\n            cout << \"1\" << endl;\n        else\n            cout << \"0\" << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\ntypedef complex<double> P;\n\nP read()\n{\n    double x1,y1,x2,y2;\n    cin>>x1>>y1>>x2>>y2;\n    return P(x2-x1,y2-y1);\n}\n\nint judge(P s1,P s2)\n{\n    P tmp=s1*conj(s2);\n    if(tmp.real()==0)\n    {\n        return 1;\n    }else if(tmp.imag()==0)\n    {\n        return 2;\n    }else\n    {\n        return 0;\n    }\n}\n\nint main()\n{\n    int q;\n    cin>>q;\n\n    while(q--)\n    {\n        P s1=read(),s2=read();\n        cout<<judge(s1,s2)<<endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Point {\n    public:\n        double x, y;\n        Point(double x = 0.0, double y = 0.0): x(x), y(y) {}\n\n        Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n        Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n        Point operator * (double k) { return Point(x * k, y * k); }\n        Point operator / (double k) { return Point(x / k, y / k); }\n\n        double friend norm(Point p) { return p.x * p.x + p.y * p.y; }\n        double friend abs(Point p) { return sqrt(norm(p)); }\n};\ntypedef Point Vector;\nstruct Segment {\n    Point p1, p2;\n};\n\ndouble dot(Segment s1, Segment s2) {\n    Vector v1 = s1.p2 - s1.p1, v2 = s2.p2 - s2.p1;\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\ndouble cross(Segment s1, Segment s2) {\n    Vector v1 = s1.p2 - s1.p1, v2 = s2.p2 - s2.p1;    \n    return v1.x * v2.y - v1.y * v2.x;\n}\n\nint main(void) {\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        Segment s[2];\n        for (int j = 0; j < 2; j++)\n            cin >> s[j].p1.x >> s[j].p1.y >> s[j].p2.x >> s[j].p2.y;\n        if (!cross(s[0], s[1])) cout << \"2\\n\";\n        else if (!dot(s[0], s[1])) cout << \"1\\n\";\n        else cout << \"0\\n\";\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define REP(i,n) for(int i=0; i<(n); i++)\n#define ALL(n) begin(n),end(n)\n\n//////////////////////////////////////////////////////////////////////\n// 計算幾何学ライブラリ(CGL)　-ここから-\n// 現在のカーソル位置にある単語と同じ単語を一括して選択する：［Ctrl］＋［Shift］＋［L］\n\n///////////////////////////////\n// 内積：ベクトルaとベクトルbの内積\n///////////////////////////////\n\ndouble Naiseki(vector<double> a,vector<double> b){\n    double ip=0;\n    for(int i=0; i<a.size(); i++){\n        ip+=a[i]*b[i];\n    }\n    return ip;\n}\n\n////////////////////////////////////////////////////////////\n// 正射影ベクトル：ベクトルbの，ベクトルaが定める直線に対する正射影ベクトル\n////////////////////////////////////////////////////////////\n\nvector<double> Seishaei_vector(vector<double> a,vector<double>b){\n    double a_av2=0;\n    for(int i=0; i<a.size(); i++){\n        a_av2+=a[i]*a[i];\n    }\n\n    vector<double> c(a.size());\n\n    for(int i=0; i<a.size(); i++){\n        c[i]=c[i]=(Naiseki(a,b)/a_av2)*a[i];\n    }\n\n    return c;\n}\n\n////////////////////////////////////////////////////////////////////////////\n// （未検証）ベクトルのなす角：ベクトルaとベクトルbのなす角（aまたはbが零ベクトルのとき，エラー）\n////////////////////////////////////////////////////////////////////////////\n\n// cosバージョン\ndouble Nasukaku_cos(vector<double> a,vector<double>b){\n    double cos_theta=0;\n\n    double a_av=0,b_av=0;\n    for(int i=0; i<a.size(); i++){\n        a_av+=a[i]*a[i];\n        b_av+=b[i]*b[i];\n    }\n    a_av=sqrt(a_av);\n    b_av=sqrt(b_av);\n\n    cos_theta=Naiseki(a,b)/(a_av*b_av);\n\n    return cos_theta;\n}\n\n// radバージョン\ndouble Nasukaku(vector<double> a,vector<double>b){\n    double theta=0;\n\n    double a_av=0,b_av=0;\n    for(int i=0; i<a.size(); i++){\n        a_av+=a[i]*a[i];\n        b_av+=b[i]*b[i];\n    }\n    a_av=sqrt(a_av);\n    b_av=sqrt(b_av);\n\n    theta=Naiseki(a,b)/(a_av*b_av);\n    theta=acos(theta);\n    \n    return theta;\n}\n\n// 計算幾何学ライブラリ(CGL)　-ここまで-\n///////////////////////////////////\n\nint main(){\n    int q;\n    cin>>q;\n\n    vector<int> ans(q);\n\n    REP(i,q){\n        vector<double> x(4),y(4);\n        cin>>x[0]>>y[0]>>x[1]>>y[1]>>x[2]>>y[2]>>x[3]>>y[3];\n        \n        vector<double> A={x[1]-x[0],y[1]-y[0]};\n        vector<double> B={x[3]-x[2],y[3]-y[2]};\n\n        if(A[0]/B[0]==A[1]/B[1]||(A[0]==0&&B[0]==0)||(A[1]==0&&B[1]==0)){\n            ans[i]=2;\n        }else if(Naiseki(A,B)==0){\n            ans[i]=1;\n        }else{\n            ans[i]=0;\n        }\n    }\n\n    REP(i,q){\n        cout<<ans[i]<<endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define fi first\n#define se second\n#define repl(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define rep(i,n) repl(i,0,n)\n#define each(itr,v) for(auto itr:v)\n#define pb(s) push_back(s)\n#define mp(a,b) make_pair(a,b)\n#define all(x) (x).begin(),(x).end()\n#define dbg(x) cout<<#x\"=\"<<x<<endl\n#define maxch(x,y) x=max(x,y)\n#define minch(x,y) x=min(x,y)\n#define uni(x) x.erase(unique(all(x)),x.end())\n#define exist(x,y) (find(all(x),y)!=x.end())\n#define bcnt(x) bitset<32>(x).count()\n\n#define x(p) real(p)\n#define y(p) imag(p)\n\nconst double eps=1e-8;\nconst double inf=1e12;\ntypedef complex<double> P;\n\nnamespace std{\n  bool operator<(const P& a,const P& b){\n    return x(a)==x(b)?y(a)<y(b):x(a)<x(b);\n  }\n}\ndouble cross(const P& a,const P& b){\n  return y(conj(a)*b);\n}\ndouble dot(const P& a,const P& b){\n  return x(conj(a)*b);\n}\nstruct L : public vector<P> { // line and segment\n  L(const P& a,const P &b){\n    push_back(a);\n    push_back(b);\n  }\n};\n\nP projection(const L& l,const P& p){\n  P b=l[1]-l[0],c=p-l[0];\n  return l[0]+b*x(c/b);\n}\nP reflection(const L& l,const P& p){\n  return p+2.0*(projection(l,p)-p);\n}\n//// counter-clockwise\nint ccw(P a,P b,P c) {\n  b=b-a;c=c-a;\n  if(cross(b,c)>0) return +1;       // counter clockwise\n  if(cross(b,c)<0) return -1;       // clockwise\n  if(dot(b,c)<0)   return +2;       // c--a--b on line\n  if(norm(b)<norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\nbool intersectLL(const L& l,const L& m){\n  return abs(cross(l[1]-l[0],m[1]-m[0]))>eps;\n}\n\nint main(){\n\tcin.sync_with_stdio(false);\n  int q;\n  cin>>q;\n  while(q--){\n    P p[4];\n    rep(i,4){\n      double x,y;\n      cin>>x>>y;\n      p[i]=P(x,y);\n    }\n    if(intersectLL(L(p[1],p[0]),L(p[2],p[3]))){\n      if(abs(dot(p[1]-p[0],p[3]-p[2]))<eps)cout<<1<<endl;\n      else cout<<0<<endl;\n    }else cout<<2<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\n#define debug(x) cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst int mod = 1e9+7;\nconst int MAXN = 2e5 + 7;\nconst double EPS=1e-8;\ninline int sign(double a){return a<-EPS?-1:a>EPS;}\ninline int cmp(double a,double b){return sign(a-b);}\n//点\nstruct P{\n    double x,y;\n    P(){}\n    P(double _x,double _y):x(_x),y(_y){}\n    P operator + (P p){return P(x+p.x,y+p.y);}\n    P operator - (P p){return P(x-p.x,y-p.y);}\n    P operator * (double k){return P(x*k,y*k);}\n    P operator / (double k){return P(x/k,y/k);}\n    double dot(P p){return x*p.x+y*p.y;}\n    double det(P p){return x*p.y-y*p.x;}\n    double distTo(P p){return (*this-p).abs();}\n    double alpha(){return atan2(y,x);}\n    void read(){scanf(\"%lf%lf\", &x, &y);}\n    void write(){printf(\"%.10lf %.10lf\\n\", x, y);}\n    double abs(){return sqrt(abs2());}\n    double abs2(){return x*x+y*y;}\n    P rot90(){return P(-y,x);}\n    P unit(){return *this/abs();}\n    int quad(){return sign(y)==1||(sign(y)==0&&sign(x)>=0);}\n    P rot(double an){return P(x*cos(an)-y*sin(an),x*sin(an)+y*cos(an));}\n    bool operator < (P p)const{int c=cmp(x,p.x);if(c)return c==-1;return cmp(y,p.y)==-1;}\n    bool operator == (P o)const{return cmp(x,o.x)==0&&cmp(y,o.y)==0;}\n};\n\nint main(int argc, char const *argv[])\n{\n    P p0, p1, p2, p3;\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        p0.read(); p1.read(); p2.read(); p3.read();\n        P s1, s2;\n        s1 = p1 - p0; s2 = p3 - p2;\n        if(fabs(s1.det(s2)) < EPS) printf(\"2\\n\");\n        else if(fabs(s1.dot(s2)) < EPS)   printf(\"1\\n\");\n        else printf(\"0\\n\");   \n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconstexpr double EPS = 1e-10;\ntypedef complex<double> Point;\ntypedef Point Vector;\ntypedef pair<Point, Point> Segment;\ntypedef Segment Line;\ntypedef pair<Point, double> Circle;\ntypedef vector<Point> Polygon;\ndouble dot(Vector a, Vector b){\n\treturn real(a) * real(b) + imag(a) * imag(b);\n}\ndouble cross(Vector a, Vector b){\n\treturn real(a) * imag(b) - imag(a) * real(b);\n}\nPoint project(Line l, Point p){\n\tVector base = l.second - l.first;\n\tbase /= abs(base);\n\tdouble r = dot(p - l.first, base);\n\treturn l.first + r * base;\n}\nPoint reflect(Line l, Point p){\n\treturn p + (project(l, p) - p) * 2.0;\n}\nint ccw(Point p0, Point p1, Point p2){\n\tVector v = p1 - p0, w = p2 - p0;\n\tif(cross(v, w) > EPS) return 1; // COUNTER_CLOCKWISE\n\tif(cross(v, w) < -EPS) return -1; // CLOCKWISE\n\tif(dot(v, w) < -EPS) return 2; // ONLINE p2 - p0 - p1\n\tif(norm(v) + EPS < norm(w)) return -2; // ONLINE p0 - p1 - p2\n\treturn 0; // ONLINE p0 - p1 - p2\n}\nbool isOrthogonal(Vector v, Vector w){\n\tdouble t = abs(dot(v, w));\n\treturn t <= EPS;\n}\nbool isParallel(Vector v, Vector w){\n\tdouble t = abs(cross(v, w));\n\treturn t <= EPS;\n}\n\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tint q;\n\tcin >> q;\n\twhile(q--){\n\t\tdouble x[4], y[4];\n\t\tfor(int i=0; i<4; ++i) cin >> x[i] >> y[i];\n\t\tPoint p0(x[0], y[0]), p1(x[1], y[1]), p2(x[2], y[2]), p3(x[3], y[3]);\n\t\tVector v = p1 - p0, w = p3 - p2;\n\t\tif(isParallel(v, w)) cout << 2 << \"\\n\";\n\t\telse if(isOrthogonal(v, w)) cout << 1 << \"\\n\";\n\t\telse cout << 0 << \"\\n\";\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "    #include <bits/stdc++.h>\n    using namespace std;\n    #define Int int64_t\n    #define dump(x) cout << (x) << endl\n    #define fi first\n    #define se second\n    Int mod = 1e9+7;\n    Int INF = 1e18;\n    double EPS = 0.00000001;\n    //Int mod = 1e6+3;\n\n    int main() {\n        int n;\n        cin >> n;\n        for (int i = 0; i < n; i++) {\n            double ax, ay, bx, by, cx, cy, dx, dy;\n            cin >> ax >> ay >> bx >> by >> cx >> cy >> dx >> dy;\n            complex<double> a(ax, ay), b(bx, by), c(cx, cy), d(dx, dy);\n            complex<double> ab = b - a, cd = d - c;\n            if (real(ab * conj(cd)) == 0) {\n                dump(1);\n            }\n            else if (imag(ab * conj(cd)) == 0) {\n                dump(2);\n            }\n            else {\n                dump(0);\n            }\n        }\n        return 0;\n    }\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nbool isParallel(int* v1, int* v2)\n{\n    return (v1[0] * v2[1] - v2[0] * v1[1]) == 0;\n}\n\nbool isOrthogonal(int* v1, int* v2)\n{\n    return (v1[0] * v2[0] + v1[1] * v2[1]) == 0;\n}\n\nint main()\n{\n    int n;\n    int v1[2], v2[2];\n    int x, y;\n    cin >> n;\n    for(int i=0;i<n;++i){\n        cin >> x >> y;\n        cin >> v1[0] >> v1[1];\n        v1[0] -= x;\n        v1[1] -= y;\n        cin >> x >> y;\n        cin >> v2[0] >> v2[1];\n        v2[0] -= x;\n        v2[1] -= y;\n\n        if(isParallel(v1, v2)) cout << 2;\n        else if(isOrthogonal(v1, v2)) cout << 1;\n        else cout << 0;\n        cout << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n//点を表す構造体\nclass Point {\n  public:\n  double x,y;\n  Point(double x=0,double y=0): x(x),y(y){}\n\n  //各種演算\n  Point operator+ (Point p) { return Point(x+p.x,y+p.y); }\n  Point operator- (Point p) { return Point(x-p.x,y-p.y); }\n  Point operator* (double a) {return Point(a*x,a*y); }\n  Point operator/ (double a) {return Point(x/a,y/a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x+y*y; }\n\n  bool operator< (const Point &p) const{\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n\n  bool operator== (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\n//ベクトルを表す構造体\ntypedef Point Vector;\n\n//線分を表す構造体\nstruct Segment{\n  Point p1,p2;\n  Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n};\n\n//直線を表す構造体\ntypedef Segment Line;\n\n//円を表すクラス\nclass Circle{\n  public:\n  //円の中心\n  Point c;\n  //半径\n  double r;\n  Circle(Point c=Point(),double r=0.0): c(c),r(r) {}\n};\n\n//多角形の表現\ntypedef vector<Point> Polygon;\n\n//ベクトルaとbの内積\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//ベクトルaとbの外積\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//ベクトルaとbの直交判定\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n//ベクトルaとbの平行判定\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n//線分s1と線分s2の交点(ダメらしい)\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\nint main(){\n  int q;\n  cin>>q;\n  int x,y;\n  for(int i=0;i<q;i++){\n    int x0,x1,x2,x3,y0,y1,y2,y3;\n    cin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n    Point p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n    Line l1(p0,p1),l2(p2,p3);\n    if(isOrthogonal(l1,l2)){\n      cout<<1;\n    }\n    else if(isParallel(l1,l2)){\n      cout<<2;\n    }\n    else{\n      cout<<0;\n    }\n    cout<<'\\n';    \n  }\n  return(0);\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(ll i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(arg),key)-begin(arg)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n\nusing namespace std;\n\nusing R=long double;\nconst R EPS = 1E-11;\nconst R INF = 1E40;\nconstexpr R PI = acos(R(-1));\ninline int sgn(const R& r){ return (r > EPS) - (r < -EPS);}\n\nusing P=complex<R>;\nconstexpr P O = P(0,0);\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\n//?????? dot ?????? det\ninline R dot(P o,P a,P b){a-=o,b-=o; return real(conj(a)*b);}\ninline R det(P o,P a,P b){a-=o,b-=o; return imag(conj(a)*b);}\n\nusing L=struct{P s,t;};\ninline P vec(L l){return l.t-l.s;}\n\n// ?°???± verify AOJ CGL_1_A\nP proj(P o,P a,P b){ a-=o,b-=o; return a*real(b/a);}\nP proj(L l,P p){ return l.s+proj(l.s,l.t,p);}\n// ????°? verify AOJ CGL_1_B\nP refl(L l,P p){ return R(2.0)*proj(l,p)-p;}\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {//???a??¨???b???????????????????????????\n\tif (sgn(det(o,a,b)) > 0) return LEFT;    // counter clockwise\n\tif (sgn(det(o,a,b)) < 0) return RIGHT;   // clockwise\n\tif (sgn(dot(o,a,b)) < 0) return BACK;    // b--base--a on line\n\tif (sgn(norm(a)-norm(b)) < 0) return FRONT;   // base--a--b on line\n\treturn ON;// base--b--a on line  a??¨b????????????????????????\n}\n\n// ?????´ ?????? verify AOJ CGL_2_A\nbool vertical(L a, L b) {return sgn(dot(O,vec(a),vec(b)))==0;}\nbool parallel(L a, L b) {return sgn(det(O,vec(a),vec(b)))==0;}\n\n// ????????´????????? \nbool eql(L a,L b){ return (parallel(a,b) && sgn(det(a.s,a.t,b.s))==0);}\n\n// ???????????????verify AOJ CGL_2_B ???????????????????????´??????1,????????´??????0\nbool ill(L a,L b){ return parallel(a,b)==false;}\nbool ils(L l,L s,int end=0){ return sgn(det(l.s,l.t,s.s)*det(l.s,l.t,s.t))<=-end;}\nbool iss(L a,L b,int end=0){\n\tR s1=det(a.s,a.t,b.s)*det(a.s,a.t,b.t);\n\tR s2=det(b.s,b.t,a.s)*det(b.s,b.t,a.t);\n\treturn sgn(s1)<=-end&&sgn(s2)<=-end;\n}\n\n// ?????? verify AOJ CGL_2_C\nP cross(L a,L b){\n\tR s1=det(a.s,b.s,b.t);\n\tR s2=s1+det(a.t,b.t,b.s);\n\treturn a.s+s1/s2*(a.t-a.s);\n}\n\t\n// ?????¢ verify AOJ CGL_2_D\nR dlp(L l,P p){return abs(det(l.s,l.t,p))/abs(vec(l));}\nR dsp(L s,P p){\n\tif(sgn(dot(s.s,s.t,p))<=0) return abs(p-s.s);\n\tif(sgn(dot(s.t,s.s,p))<=0) return abs(p-s.t);\n\treturn dlp(s,p);\n}\nR dll(L a,L b){return ill(a,b)?0:dlp(a,b.s);}\nR dls(L l,L s){return ils(l,s)?0:min(dlp(l,s.s),dlp(l,s.t));}\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\n\nint main(void){\n\tint n;\n\tcin >> n;\n\tcout.precision(20);\n\trep(i,n){\n\t\tP a,b,c,d;\n\t\tcin >> a >> b >> c >> d;\n\t\tL s1={a,b},s2={c,d};\n\t\tif(parallel(s1,s2))\n\t\t\tcout << 2 << endl;\n\t\telse if(vertical(s1,s2))\n\t\t\tcout << 1 << endl;\n\t\telse\n\t\t\tcout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\n#define INF 0xffffffff\n\nint main() {\n    int q, x[2], y[2];\n    cin >> q;\n    loop(i, 0, q) {\n        double k[2];\n        loop(j, 0, 2) {\n            cin >> x[0] >> y[0] >> x[1] >> y[1];\n            if (x[0] == x[1]) k[i] = INF;\n            else if(x[0] == x[1]) k[i] = 0;\n            else k[j] = (double) (y[0] - y[1]) / (double) (x[0] - x[1]);\n        }\n        if (abs(k[0] - k[1]) < 0.0001)cout << 2 << endl;\n        else if (abs(k[0] - (-1.0) * k[1]) < 0.0001 || abs((-1.0) * k[0] - k[1]) < 0.0001)cout << 1 << endl;\n        else if ((abs(k[0]) <= 0.0001 && k[1] == INF) || (abs(k[1]) <= 0.0001 && k[0] == INF)) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<cstdio>\nusing namespace std;\n\nclass Point{\npublic:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n\n  Point operator+(Point p){return Point(x+p.x,y+p.y);}\n  Point operator-(Point p){return Point(x-p.x,y-p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n\n  double abs(){return sqrt(norm());}\n\n  double norm(){return (x*x+y*y);}\n};\ntypedef Point Vector;\n\nclass Segment{\npublic:\n  Point p1,p2;\n  Segment(Point p1,Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\ndouble dot(Vector a,Vector b){return (a.x*b.x+a.y*b.y);}\ndouble cross(Vector a,Vector b){return (a.x*b.y-a.y*b.x);}\n\nPoint project(Segment s,Point p){\n  Vector base=(s.p2-s.p1);\n  double r=(dot(p-s.p1,base)/base.norm());\n  return (s.p1+base*r);\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nint main()\n{\n  Point A,B,C,D;\n  int n;\n\n  cin>>n;\n  for(int i=0;i<n;i++){\n    cin>>A.x>>A.y>>B.x>>B.y>>C.x>>C.y>>D.x>>D.y;\n    Vector a=A-B,b=C-D;\n    if(isOrthogonal(a,b))cout<<1<<endl;\n    else if(Parallel(a,b))cout<<2<<endl;\n    else cout<<0<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <math.h>\nconst double EPS = 1e-30;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\t/*vector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}*/\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double para(vector v1, vector v2) {\n\treturn sqrt(v1.x*v1.x + v1.y*v1.y)*sqrt(v2.x*v2.x + v2.y*v2.y);\n}\nint main() {\n\tcout << \"dddddddddddd\" << sqrt(128 * 128 + (-1612)*(-1612)) << endl;;\n\tcout << \"sssss\" << sqrt((-32) * (-32) + 403 * 403) << endl;;\n\tcout << \" afefwe\" << sqrt(128 * 128 + (-1612)*(-1612))*sqrt((-32) * (-32) + 403 * 403) << endl;\n\tcout << \"dsdfs\" << 128 * (-32) + (-1612) * 403 << endl;\n\tdouble n, x1, x2, x3, x4, y1, y2, y3, y4;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tvector v1(x2 - x1, y2 - y1);\n\t\tvector v2(x4 - x3, y4 - y3);\n\t\tdouble ans = dot(v1, v2);\n\t\tif (ans == 0) cout << 1 << endl;\n\t\telse if (fabs(ans - para(v1, v2)) < EPS || fabs(2*ans - fabs((ans - para(v1, v2)))) < EPS) cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<long long, long long> pll;\ntypedef pair<double, double> pdd;\nconst double eps = 1e-10;\nconst double pi = acos(-1);\ninline int sgn(double d){if(fabs(d) < eps) return 0;if(d > 0) return 1;return -1;}\ninline double rad(double _deg){return _deg / 180.0 * pi;}\ninline double deg(double _rad){return _rad / pi * 180.0;}\nstruct Point{\n\tdouble x, y;\n\tvoid read(){scanf(\"%lf%lf\", &x, &y);}\n\tPoint():x(0.0), y(0.0){}\n\tPoint(double a, double b = 0.0): x(a), y(b){}\n\tPoint(const Point& p): x(p.x), y(p.y){}\n\tPoint operator + (const Point& a){return {x + a.x, y + a.y};}\n\tPoint operator - (const Point& a){return {x - a.x, y - a.y};}\n\tdouble operator * (const Point& a){return x * a.x + y * a.y;}\n\tdouble operator ^ (const Point& a){return x * a.y - y * a.x;}\n\tbool operator == (const Point& p){return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;}\n\tbool operator < (const Point &p) const{\n\t\tif(sgn(x - p.x) == 0) \n\t\t\treturn sgn(y - p.y) == -1;\n\t\treturn sgn(x - p.x) == -1;\n\t}\n\tdouble length(){return sqrt(x * x + y * y);}\n}typedef Vector;\nstruct Line{\n\tPoint a, b;\n\tvoid read(){a.read(); b.read();}\n\tLine() : a(0.0, 0.0) , b(0.0, 0.0){}\n};\nstruct Segment{\n\tPoint a, b;\n\tvoid read(){a.read(); b.read();}\n\tSegment() : a(0.0, 0.0) , b(0.0, 0.0){}\n};\ndouble distance(const Point &a, const Point &b) \n{\n\tdouble x = a.x - b.x;\n\tdouble y = a.y - b.y;\n\treturn sqrt(x * x + y * y);\n}\nPoint Projection(Point p, Line l)\n{ \n\t// 点在直线上的投影点\n\tVector v1 = l.b - l.a;\n\tVector v2 = p - l.a;\n\tdouble k1 = v1 * v2;\n\tdouble k2 = v1.length();\n\tk1 /= k2 * k2;\n\treturn {l.a.x + v1.x * k1, l.a.y+ v1.y * k1};\n}\nPoint Reflection(Point p, Line l)\n{\n\t// 点关于直线对称\n\tPoint p0 = Projection(p, l);\n\tVector v0 = p0 - p;\n\treturn p0 + v0;\n}\nint ccw(Point p, Segment sg)\n{\t// Counter_Clockwise\n\t// p 关于(sg.a -> sg.b)的位置关系\n\tVector v0 = sg.b - sg.a;\n\tVector v1 = p - sg.a;\n\t\n\tint fcross = sgn(v0 ^ v1);\n\t\n\tif(fcross == 1) return 1; // 顺时针方向\n\tif(fcross == -1) return 2; // 逆时针方向\n\t\n\tint fdot = sgn(v0 * v1);\n\t\n\tif(fdot == -1) return 3; // 反向线段外共线\n\tif(v0.length() < v1.length()) return 4; //正向线段外共线\n\treturn 5; //点在线段上\n}\nbool isParallel(Line l1, Line l2)\n{\n\treturn sgn((l1.b - l1.a) ^ (l2.b - l2.a)) == 0;\n}\nbool isOrthogonal(Line l1, Line l2)\n{\n\treturn sgn((l1.b - l1.a) * (l2.b - l2.a)) == 0;\n}\nint main()\n{\n\tint n;\n\tscanf(\"%d\", &n);\n\twhile(n --)\n\t{\n\t\tLine l1, l2;\n\t\tl1.read(); l2.read();\n\t\tif(isParallel(l1, l2)) puts(\"2\");\n\t\telse if(isOrthogonal(l1,l2)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\ntypedef complex<ld> Point;\ntypedef pair<Point, Point> Segment;\nconstexpr double EPS = (1e-9L);\nld dot(const Point& p1, const Point& p2) { return (conj(p1) * p2).real(); }\nld cross(const Point& p1, const Point& p2) { return (conj(p1) * p2).imag(); }\nconstexpr bool eq(ld a) { return abs(a) < EPS; }\nint main() {\n\tint n; cin >> n;\n\tint xa, ya, xb, yb;\n\tPoint v[2];\n\trep(i, 0, n) {\n\t\trep(j, 0, 2) { cin >> xa >> ya >> xb >> yb; v[j] = Point(xb, yb) - Point(xa, ya); }\n\t\tif (eq(cross(v[0], v[1]))) P(2);\n\t\telse if (eq(dot(v[0], v[1]))) P(1);\n\t\telse P(0);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef _WIN32\n#include<iostream>\n#endif\n\n#include <complex>\n#include <vector>\nusing namespace std;\n\n\n#define FOR(i,bg,ed) for(int i = (bg);<(ed);i++)\n#define REP(i,n) FOR(i,0,n)\n#define ALL(v) (v).begin(),(v).end()\n#define fi first\n#define se second\n#define pb push_back\n\n#define IL inline\nnamespace geo{\n\ttypedef double D;\n\ttypedef bool B;\n\ttypedef complex<D> P;\n#define X real()\n#define Y imag()\n\tB comp(const P& l, const P& r)\n\t{\n\t\treturn (l.X == r.X) ? l.Y < r.Y : l.X < r.X;\n\t}\n\ttypedef pair<P, P> L;\n\ttypedef pair<P, P> LS;\n\ttypedef pair<P, D> C;\n\ttypedef vector<P> Poly;\n\tconst D EPS = 1e-8;\n\n\t//Decomposition Macro\n#define DCI(a,b,l) P(a),(b);tie(a,b)=l;\n#define DCc(a,b,c) P(a);D(b);tie(a,b)=c;\n\n\t//A dot B\n\tIL D dot(P a, P b)\n\t{\n\t\treturn a.X*b.X + a.Y*b.Y;\n\t}\n\tIL D cross(P a, P b)\n\t{\n\t\treturn a.X*b.Y - a.Y*b.X;\n\t}\n\tIL D ccw(P a, P b, P c)\n\t{\n\t\treturn cross(b - a, c - a);\n\t}\n}\n\nusing namespace geo;\n\n\nint main()\n{\n\tint n;\n\n\tcin >> n;\n\twhile (n--){\n\t\tD x1, x2, x3, y1, y2, y3, x4, y4;\n\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tP a(x1 - x2, y1 - y2), b(x3 - x4, y3 - y4);\n\n\t\tif (dot(a, b) == 0)\n\t\t{\n\t\t\tcout << 1 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\telse if (cross(a, b) == 0){\n\t\t\tcout << 2 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\tcout << 0 << endl;\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define INTMAX 2147483647LL\n#define PII pair<int,int>\n#define MK make_pair\n#define re register\n#define Eps (1e-10)\n#define Equal(a,b) (fabs((a)-(b))<Eps)\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\nconst double Pi=acos(-1.0);\nconst int Inf=0x3f3f3f3f;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\ninline int read(){\n\tre int x=0,f=1,ch=getchar();\n\twhile(!isdigit(ch))f=ch=='-'?-1:1,ch=getchar();\n\twhile(isdigit(ch))x=x*10+ch-48,ch=getchar();\n\treturn x*f;\n}\ninline ll readll(){\n\tre ll x=0,f=1,ch=getchar();\n\twhile(!isdigit(ch))f=ch=='-'?-1:1,ch=getchar();\n\twhile(isdigit(ch))x=x*10+ch-48,ch=getchar();\n\treturn x*f;\n}\n\nstruct Point{\n\tdb x,y;\n\tPoint(){}\n\tPoint(db xx,db yy):x(xx),y(yy){}\n\tinline Point operator +(const Point &p){return Point(x+p.x,y+p.y);}\n\tinline Point operator -(const Point &p){return Point(x-p.x,y-p.y);}\n\tinline Point operator *(const db &k){return Point(x*k,y*k);}\n\tinline Point operator /(const db &k){return Point(x/k,y/k);}\n\tinline db Norm(){return x*x+y*y;}\n\tinline db abs(){return sqrt(Norm());}\n\tinline bool operator <(const Point &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tinline bool operator ==(const Point &p)const{return fabs(x-p.x)<Eps&&fabs(y-p.y)<Eps;}\n}; \n\ntypedef Point Vector;\ntypedef vector<Point> Poly;\n\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(){}\n\tSegment(Point p1_,Point p2_):p1(p1_),p2(p2_){}\n};\ntypedef Segment Line;\nstruct Circle{\n\tPoint c;db r;\n\tCircle(Point cc,db rr):c(cc),r(rr){}\n};\n\ndouble norm(Vector a){return a.x*a.x+a.y*a.y;}\ndouble abs(Vector a){return sqrt(norm(a));}\ndouble dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\ndouble cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\n\ninline bool Is_Vertical(Vector a,Vector b){return Equal(dot(a,b),0.0);}\ninline bool Is_Vertical(Point a1,Point a2,Point b1,Point b2){return Is_Vertical(a1-a2,b1-b2);}\ninline bool Is_Vertical(Segment s1,Segment s2){return Equal(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);}\n\ninline bool Is_Parallel(Vector a,Vector b){return Equal(cross(a,b),0.0);}\ninline bool Is_Parallel(Point a1,Point a2,Point b1,Point b2){return Is_Parallel(a1-a2,b1-b2);}\ninline bool Is_Parallel(Segment s1,Segment s2){return Equal(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);}\n\nPoint Project(Segment s,Point p){\n\tVector bse=s.p2-s.p1;\n\tdouble res=dot(p-s.p1,bse)/norm(bse);\n\treturn s.p1+bse*res;\n}\nPoint Reflect(Segment s,Point p){return p+(Project(s,p)-p)*2.0;}\n\ninline int CCW(Point p0,Point p1,Point p2){\n\tVector a=p1-p0,b=p2-p0;\n\tif(cross(a,b)>Eps) return COUNTER_CLOCKWISE;\n\tif(cross(a,b)<-Eps)return CLOCKWISE;\n\tif(dot(a,b)<-Eps)  return ONLINE_BACK;\n\tif(a.Norm()<b.Norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT; \n}\n\nPoint p1,p2,p3,p4;\nint n,q;\n\nint main(){\n\tn=read();\n\twhile(n--){\n\t\tcin>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y>>p4.x>>p4.y;\n\t\tif(Is_Parallel(p1,p2,p3,p4)) printf(\"2\\n\");\n\t\telse if(Is_Vertical(p1,p2,p3,p4)) printf(\"1\\n\");\n\t\telse printf(\"0\\n\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\n#define rep(i, n) REP(i, 0, n)\n#define REP(i, s, e) for(int i = (int)s; i < (int)(e); ++i)\n\n#define X real()\n#define Y imag()\n#define x(p) real(p)\n#define y(p) imag(p)\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\n#define prev(P, i) P[(i-1+P.size())%P.size()]\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\n\ntypedef double D;\ntypedef complex<D> P;\nnamespace std{\n  bool operator < (const P& a, const P& b) {\n    return x(a) != x(b) ? x(a) < x(b) : y(a) < y(b);\n  }\n}\n\nD dot(const P& a, const P& b) {\n  return x(conj(a)*b);\n}\nD cross(const P& a, const P& b) {\n  return y(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n  L(const P&a, const P& b) {\n    push_back(a);\n    push_back(b);\n  }\n};\n\ntypedef vector<P> G;\n\nstruct C {\n  P p; D r;\n};\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if(cross(b, c) > 0) return +1; //ccw\n  if(cross(b, c) < 0) return -1; //cw\n  if(dot(b, c) < 0)   return +2; //c-a-b on line\n  if(norm(b) < norm(c)) return -2; //a-b-c on line\n  return 0;\n}\n\nP projection(const L& l, const P& p) {\n  D t = dot(p - l[0], l[0] - l[1]) / norm(l[0]- l[1]);\n  return l[0] + t * (l[0] - l[1]);\n}\nP refrection(const L& l, const P& p) {\n  return p + 2.0 * (projection(l, p) - p);\n}\nint main() {\n  int n;\n  cin >> n;\n  while(n--) {\n    vector<P> ps(4);\n    rep(i, 4) {\n      D x, y;\n      cin >> x >> y;\n      ps[i] = {x, y};\n    }\n    int ans;\n    if(abs(cross(ps[1]-ps[0], ps[3]-ps[2])) < EPS) ans = 2;\n    else if(abs(dot(ps[1]-ps[0], ps[3]-ps[2])) < EPS) ans = 1;\n    else ans = 0;\n    cout << ans << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include <iostream>\n#include <algorithm>\n#include <utility>\n#include <vector>\n#include <numeric>\n#include <cmath>\n#include <iomanip>\n\ntemplate <class T, class U>\ninline bool chmin(T &lhs, const U &rhs) {\n  if (lhs > rhs) {\n    lhs = rhs;\n    return true;\n  }\n  return false;\n}\n\ntemplate <class T, class U>\ninline bool chmax(T &lhs, const U &rhs) {\n  if (lhs < rhs) {\n    lhs = rhs;\n    return true;\n  }\n  return false;\n}\n\n// [l, r) from l to r\nstruct range {\n  struct itr {\n    int i;\n    constexpr itr(int i_): i(i_) { }\n    constexpr void operator ++ () { ++i; }\n    constexpr int operator * () const { return i; }\n    constexpr bool operator != (itr x) const { return i != x.i; }\n  };\n  const itr l, r;\n  constexpr range(int l_, int r_): l(l_), r(std::max(l_, r_)) { }\n  constexpr itr begin() const { return l; }\n  constexpr itr end() const { return r; }\n};\n\n// [l, r) from r to l\nstruct revrange {\n  struct itr {\n    int i;\n    constexpr itr(int i_): i(i_) { }\n    constexpr void operator ++ () { --i; }\n    constexpr int operator * () const { return i; }\n    constexpr bool operator != (itr x) const { return i != x.i; }\n  };\n  const itr l, r;\n  constexpr revrange(int l_, int r_): l(l_ - 1), r(std::max(l_, r_) - 1) { }\n  constexpr itr begin() const { return r; }\n  constexpr itr end() const { return l; }\n};\n\n\ntemplate <class T>\nstruct real_constant;\n\ntemplate <>\nstruct real_constant<double> {\n  using value_type = double;\n  static constexpr value_type infinity() { return 1e9; }\n  static constexpr value_type epsilon() { return 1e-9; }\n  static constexpr value_type pi() { return std::acos(-1.0); }\n};\n\ntemplate <>\nstruct real_constant<long double> {\n  using value_type = long double;\n  static constexpr value_type infinity() { return 1e18; }\n  static constexpr value_type epsilon() { return 1e-10; }\n  static constexpr value_type pi() { return std::acos(-1.0L); }\n};\n\ntemplate <>\nstruct real_constant<int> {\n  using value_type = int;\n  static constexpr value_type infinity() { return 1e9; }\n  static constexpr value_type epsilon() { return 1; }\n};\n\ntemplate <>\nstruct real_constant<long long> {\n  using value_type = long long;\n  static constexpr value_type infinity() { return 1e18; }\n  static constexpr value_type epsilon() { return 1; }\n};\n\ntemplate <class T, class U>\nconstexpr bool leq(T x, U y) {\n  return x - y < real_constant<T>::epsilon();\n}\ntemplate <class T, class U>\nconstexpr bool geq(T x, U y) {\n  return y - x < real_constant<T>::epsilon();\n}\ntemplate <class T, class U>\nconstexpr bool equal(T x, U y) {\n  return leq(x, y) && geq(x, y);\n}\n\n\ntemplate <class T>\nstruct vector_type {\n  using value_type = T;\n  value_type x, y;\n  constexpr vector_type(): x(0), y(0) { }\n  constexpr vector_type(value_type x_, value_type y_): x(x_), y(y_) { }\n  constexpr vector_type &operator += (const vector_type &rhs) { x += rhs.x; y += rhs.y; return *this; }\n  constexpr vector_type operator + (const vector_type &rhs) const { return vector_type(*this) += rhs; }\n  constexpr vector_type &operator -= (const vector_type &rhs) { x -= rhs.x; y -= rhs.y; return *this; }\n  constexpr vector_type operator - (const vector_type &rhs) const { return vector_type(*this) -= rhs; }\n  constexpr vector_type operator - () const { return vector_type(-x, -y); }\n  constexpr vector_type &operator *= (value_type rhs) { x *= rhs; y *= rhs; return *this; }\n  constexpr vector_type &operator /= (value_type rhs) { x /= rhs; y /= rhs; return *this; }\n  constexpr bool operator == (const vector_type &rhs) const { return equal(x, rhs.x) && equal(y, rhs.y); }\n  constexpr bool operator != (const vector_type &rhs) const { return !equal(x, rhs.x) || !equal(y, rhs.y); }\n};\n\ntemplate <class T, class U>\nconstexpr vector_type<T> operator * (vector_type<T> v, U rhs) { return v *= rhs; }\ntemplate <class T, class U>\nconstexpr vector_type<T> operator * (U rhs, vector_type<T> v) { return v *= rhs; }\ntemplate <class T, class U>\nconstexpr vector_type<T> operator / (vector_type<T> v, U rhs) { return v /= rhs; }\n\ntemplate <class T>\nstd::istream& operator >> (std::istream& is, vector_type<T> &v) { return is >> v.x >> v.y; }\ntemplate <class T>\nstd::ostream& operator << (std::ostream& os, const vector_type<T> &v) { return os << v.x << ' ' <<  v.y; }\n\ntemplate <class T>\nconstexpr T norm(const vector_type<T> &v) { return v.x * v.x + v.y * v.y; }\ntemplate <class T>\nconstexpr T abs(const vector_type<T> &v) { return std::sqrt(norm(v)); }\ntemplate <class T>\nconstexpr T argr(const vector_type<T> &v) { return std::atan2(v.y, v.x); }\ntemplate <class T>\nconstexpr T argd(const vector_type<T> &v) { return argr(v) * 180 / real_constant<T>::pi(); }\ntemplate <class T>\nconstexpr T dist(const vector_type<T> &v, const vector_type<T> &u) { return abs(v - u); }\ntemplate <class T>\nconstexpr T dot(const vector_type<T> &v, const vector_type<T> &u) { return v.x * u.x + v.y * u.y; }\ntemplate <class T>\nconstexpr T cross(const vector_type<T> &v, const vector_type<T> &u) { return v.x * u.y - v.y * u.x; }\n\ntemplate <class T>\nconstexpr unsigned orthan(const vector_type<T> &v) {\n  if (v.x > 0 && v.y >= 0) return 0;\n  if (v.x <= 0 && v.y > 0) return 1;\n  if (v.x < 0 && v.y <= 0) return 2;\n  if (v.x >= 0 && v.y < 0) return 3;\n  return 0;\n}\ntemplate <class T>\nconstexpr bool cmp_x(const vector_type<T> &v, const vector_type<T> &u) {\n  if (equal(v.x, u.x)) return v.y < u.y;\n  return v.x < u.x;\n}\ntemplate <class T>\nconstexpr bool cmp_y(const vector_type<T> &v, const vector_type<T> &u) {\n  if (equal(v.y, u.y)) return v.x < u.x;\n  return v.y < u.y;\n}\ntemplate <class T>\nconstexpr bool cmp_arg(const vector_type<T> &v, const vector_type<T> &u) {\n  if (orthan(v) != orthan(u)) return orthan(v) < orthan(u);\n  if (!equal(cross(v, u), 0)) return cross(v, u) > 0;\n  return norm(v) < norm(u);\n}\n\ntemplate <class T>\nstruct line_type {\n  using value_type = T;\n  value_type a, b, c;\n  constexpr line_type(): a(0), b(0), c(0) { }\n  constexpr line_type(value_type a_, value_type c_): a(a_), b(-1), c(c_) { }\n  constexpr line_type(value_type a_, value_type b_, value_type c_): a(a_), b(b_), c(c_) { }\n  constexpr value_type valx(value_type y) const { return (b * y + c) / (-a); }\n  constexpr value_type valy(value_type x) const { return (a * x + c) / (-b); }\n  constexpr bool operator == (const value_type &l) const { return equal(a * l.b, b * l.a) && equal(a * l.c, c * l.a); }\n  constexpr bool operator != (const value_type &l) const { return !equal(a * l.b, b * l.a) || !equal(a * l.c, c * l.a); }\n};\n\ntemplate <class T>\nconstexpr bool parallel(const line_type<T> &l, const line_type<T> &m) { return equal(l.a * m.b, l.b * m.a); };\ntemplate <class T>\nconstexpr bool vertical(const line_type<T> &l, const line_type<T> &m) { return equal(l.a * m.a + l.b * m.b, 0); };\ntemplate <class T>\nconstexpr bool is_on(const line_type<T> &l, const vector_type<T> &v) { return equal(l.a * v.x + l.b * v.y + l.c, 0);}\ntemplate <class T>\nconstexpr vector_type<T> intersection(const line_type<T> &l, const line_type<T> &m) {\n  auto x = (l.b * m.c - l.c * m.b) / (l.a * m.b - l.b * m.a);\n  auto y = (l.c * m.a - l.a * m.c) / (l.a * m.b - l.b * m.a);\n  return vector_type<T>(x, y);\n}\ntemplate <class T>\nconstexpr vector_type<T> direction(const line_type<T> &l) { vector_type<T> res(-l.b, l.a); return res; }\ntemplate <class T>\nconstexpr vector_type<T> perpend(const line_type<T> &l, const vector_type<T> &v) {\n  auto u = vector_type<T>(l.a, l.b);\n  auto d = -l.c / norm(u);\n  auto e = dot(v, u) / norm(u);\n  return (d - e) * u;\n}\ntemplate <class T>\nconstexpr vector_type<T> project(const line_type<T> &l, const vector_type<T> &v) {\n  return v + perpend(l, v);\n}\ntemplate <class T>\nconstexpr vector_type<T> relfect(const line_type<T> &l, const vector_type<T> &v) {\n  return v + perpend(l, v) * 2;\n}\ntemplate <class T>\nconstexpr T dist(const line_type<T> &l, const vector_type<T> &v) { \n  return std::abs(l.a * v.x + l.b * v.y + l.c) / abs(vector_type<T>(l.a, l.b)); \n}\n\ntemplate <class T>\nstruct segment_type {\n  using value_type = T;\n  vector_type<value_type> st, en;\n  constexpr segment_type(): st(0, 0), en(0, 0) { }\n  constexpr segment_type(const vector_type<value_type> &l, const vector_type<value_type> &r): st(l), en(r) { }\n  constexpr segment_type(value_type x1, value_type y1, value_type x2, value_type y2): st(x1, y1), en(x2, y2) { } \n  constexpr bool operator == (const segment_type &s) const { \n    return (st == s.st && en == s.en) || (st == s.en && en == s.st);\n  }\n  constexpr bool operator != (const segment_type &s) const { \n    return !(st == s.st && en == s.en) && !(st == s.en && en == s.st);\n  }\n};\n\ntemplate <class T>\nconstexpr vector_type<T> direction(const segment_type<T> &l) { return l.en - l.st; }\ntemplate <class T>\nconstexpr line_type<T> to_line(const segment_type<T> &s) {\n  auto v = direction(s);\n  auto c = v.y * s.st.x - v.x * s.st.y;\n  return line_type<T>(-v.y, v.x, c);\n}\ntemplate <class T>\nconstexpr line_type<T> bisect(const segment_type<T> &s) {\n  auto v = direction(s), u = (s.st + s.en) / 2;\n  return line_type<T>(v.x, v.y, -v.x * u.x - v.y * u.y);\n}\ntemplate <class T>\nconstexpr bool intersects(const segment_type<T> &s, const segment_type<T> &t) {\n  auto v = direction(s), u = direction(t);\n  auto d = cross(v, t.st - s.st) * cross(v, t.en - s.st);\n  auto e = cross(u, s.st - t.st) * cross(u, s.en - t.st);\n  return leq(d, 0) && leq(e, 0);\n}\n\nint main() {\n  int Q;\n  std::cin >> Q;\n  while (Q--) {\n    segment_type<double> s1, s2;\n    std::cin >> s1.st >> s1.en >> s2.st >> s2.en;\n    auto l1 = to_line(s1), l2 = to_line(s2);\n    if (parallel(l1, l2)) {\n      std::cout << \"2\\n\";\n    }\n    else if (vertical(l1, l2)) {\n      std::cout << \"1\\n\";\n    }\n    else {\n      std::cout << \"0\\n\";\n    }\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string.h>\n#include<string>\n#include<cstdio>\n#include<algorithm>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<cmath>\n#include<utility>\n#include<set>\n#include<complex>\n#define ll long long int\n#define ld long double\n#define INF 1000000000\n#define EPS 0.0000000001\n#define rep(i,n) for(i=0;i<n;i++)\nusing namespace std;\n\ntypedef complex<double> P;\n\nstruct L : public vector<P>{//??´???\n  L(const P &a, const P &b){\n    push_back(a);push_back(b);\n  }\n};\n\nstruct C{//???\n  P c; double r;\n  C(const P &c,double r): c(c),r(r){}\n};\n\nnamespace std{//??????????????????\n  bool operator < (const P& a,const P& b){\n    return real(a)!= real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b)\n  }\n  bool operator == (const P& a,const P& b){\n    return a.real()==b.real()&&a.imag()==b.imag();\n  }\n}\n\ndouble dot(P a,P b){\n  return real(conj(a)*b);\n}\n\ndouble cross(P a,P b){\n  return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n  b-=a;c-=a;\n  if(cross(b,c)>0)   return +1;// counter clockwise \n  if(cross(b,c)<0)   return -1;// clockwise \n  if(dot(b,c)<0)     return +2;// c-a-b on line\n  if(norm(b)<norm(c))return -2;// a-b-c on line\n  return 0;                    // a-c-b on lone\n}\n\nint main()\n{\n  int i;\n  int q;\n\n  cin>>q;\n\n  rep(i,q){\n    double xp,yp;\n\n    cin>>xp>>yp;  P p1(xp,yp);\n    cin>>xp>>yp;  P p2(xp,yp);\n    cin>>xp>>yp;  P p3(xp,yp);\n    cin>>xp>>yp;  P p4(xp,yp);\n\n    P s1(p2-p1);\n    P s2(p4-p3);\n\n    if(s1.real()*s2.imag()==s1.imag()*s2.real())\n      cout<<\"2\"<<endl;\n    else if(dot(s1,s2)==0)\n      cout<<\"1\"<<endl;\n    else\n      cout<<\"0\"<<endl;\n\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long   // <-----!!!!!!!!!!!!!!!!!!!\n\n#define rep(i,n) for (int i=0;i<(n);i++)\n#define rep2(i,a,b) for (int i=(a);i<(b);i++)\n#define rrep(i,n) for (int i=(n)-1;i>=0;i--)\n#define rrep2(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define all(a) (a).begin(),(a).end()\n\ntypedef long long ll;\ntypedef pair<int, int> Pii;\ntypedef tuple<int, int, int> TUPLE;\ntypedef vector<int> V;\ntypedef vector<V> VV;\ntypedef vector<VV> VVV;\n\ntypedef complex<double> P;\n\ndouble cross(P a, P b) {\n    return imag(conj(a) * b);\n}\n\ndouble dot(P a, P b) {\n    return real(conj(a) * b);\n}\n\nstruct L {\n    P a, b, v;\n    L(){}\n    L(P _a, P _b) {a = _a, b = _b, v = b - a;}\n    L(double _ax, double _ay, double _bx, double _by) {\n        a = P(_ax, _ay), b = P(_bx, _by), v = b - a;\n    }\n};\n\n// 2: parallel\n// 1: orthogonal\n// 0: otherwise\nint relationLL(L l1, L l2) {\n    if (cross(l1.v, l2.v) == 0) return 2;\n    if (dot(l1.v, l2.v) == 0) return 1;\n    return 0;\n}\n\nsigned main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    int q;\n    cin >> q;\n    while (q--) {\n        int v[4][2];\n        rep(i, 4) rep(j, 2) cin >> v[i][j];\n        L l1(P(v[0][0], v[0][1]), P(v[1][0], v[1][1]));\n        L l2(P(v[2][0], v[2][1]), P(v[3][0], v[3][1]));\n        cout << relationLL(l1, l2) << endl;\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "//Parallel/Orthogonal\n#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\nstatic const double ESP = 1e-10;\n\nbool equals(double a, double b) { return fabs(a - b) < ESP; }\n\nclass Point {\npublic:\n    double x, y;\n\n    explicit Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(a / x, a / y); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < ESP && fabs(y - p.y) < ESP;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector v1, Vector v2) {\n    return equals(cross(v1, v2), 0.0);\n}\n\nbool isOrthogonal(Vector v1, Vector v2) {\n    return equals(dot(v1, v2), 0.0);\n}\n\nint main() {\n    int q, x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> q;\n    for(int i = 0; i < q; i++) {\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        Point s0 = Point(x0, y0);\n        Point s1 = Point(x1, y1);\n        Point s2 = Point(x2, y2);\n        Point s3 = Point(x3, y3);\n\n        Vector v1 = s1 - s0;\n        Vector v2 = s3 - s2;\n\n        if(isParallel(v1, v2)) cout << 2 << endl;\n        else if(isOrthogonal(v1, v2)) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-7;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double cost = dot(p[1] - p[0], p[3] - p[2]) / (abs(p[1] - p[0]) * abs(p[3] - p[2]));\n        if(fabs(cost) < EPS) cout << 1 << endl;\n        else if(fabs(cost) > 1 - EPS) cout << 2 << endl;\n        else cout << 0 << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream> // cout, endl, cin\n#include <string> // string, to_string, stoi\n#include <vector> // vector\n#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound\n#include <utility> // pair, make_pair\n#include <tuple> // tuple, make_tuple\n#include <cstdint> // int64_t, int*_t\n#include <cstdio> // printf\n#include <map> // map\n#include <queue> // queue, priority_queue\n#include <set> // set\n#include <stack> // stack\n#include <deque> // deque\n#include <unordered_map> // unordered_map\n#include <unordered_set> // unordered_set\n#include <bitset> // bitset\n#include <cctype> // isupper, islower, isdigit, toupper, tolower\n#include <cmath> // sqrt\n#define _GLIBCXX_DEBUG // check []\n#define DIVISOR 1000000007\n\nusing namespace std;\ntypedef pair<int,int> pii;\ntypedef pair<int64_t, int64_t> pII;\n\ntemplate<typename T>\nvoid cins(vector<T>& arr) { for(T& e: arr) cin >> e; }\n\n#ifdef DEBUG\n#define debug(fmt, ...) \\\n    printf(\"[debug: %s] \" fmt, __func__, __VA_ARGS__)\n#define ps(arr) \\\n    debug(\"size %ld: \", arr.size()); \\\n    for(auto e: arr) cout << e << \" \"; \\\n    cout << endl;\n#else\n#define debug(fmt, ...)\n#define ps(arr)\n#endif\n\nstruct line {\n    pii p1;\n    pii incline;\n};\n\n\nenum type {\n    TYPE_NONE,\n    TYPE_ORTHOGONAL,\n    TYPE_PARALLEL,\n};\n\n#define _x first\n#define _y second\n\nint inner_prod(pii p1, pii p2) {\n    return (p1._x * p2._x) + (p1._y * p2._y);\n}\n\nint outer_prod(pii p1, pii p2) {\n    return (p1._x * p2._y) - (p1._y * p2._x);\n}\n\nint main(void) {\n    pii p1;\n    pii p2;\n    int num;\n    cin >> num;\n    for(int n = 0; n < num; n++) {\n        cin >> p1.first >> p1.second;\n        cin >> p2.first >> p2.second;\n        pii inc1 = make_pair(p2.first - p1.first,\n            p2.second - p1.second\n        );\n        cin >> p1.first >> p1.second;\n        cin >> p2.first >> p2.second;\n        pii inc2 = make_pair(\n            p2.first - p1.first,\n            p2.second - p1.second\n        );\n        int type = 0;\n        if(!inner_prod(inc1, inc2)) {\n            type = TYPE_ORTHOGONAL;\n        } else if (!outer_prod(inc1, inc2)) {\n            type = TYPE_PARALLEL;\n        } else {\n            type = TYPE_NONE;\n        }\n        cout << type << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <math.h>\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\t/*vector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}*/\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double para(vector v1, vector v2) {\n\treturn sqrt(v1.x*v1.x + v1.y*v1.y)*sqrt(v2.x*v2.x + v2.y*v2.y);\n}\nint main() {\n\tdouble n, x1, x2, x3, x4, y1, y2, y3, y4;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\t\tvector v1(x2 - x1, y2 - y1);\n\t\tvector v2(x4 - x3, y4 - y3);\n\t\tdouble ans = dot(v1, v2);\n\t\tif (ans == 0) cout << 1 << endl;\n\t\telse if (ans == para(v1, v2) || ans == -para(v1, v2)) cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs( (a)-(b) ) < EPS)\n\nclass Point{\n\npublic:\n  double x,y;\n  \n  Point(double x=0,double y=0): x(x),y(y) {}\n  \n  Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n  Point operator * (double a) { return Point(a*x,a*y); }\n  Point operator / (double a) { return Point(x/a,y/a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x + y*y; }\n  \n  bool operator < (const Point &p) const{\n    return x != p.x ? x<p.x : y<p.y;\n  }\n  \n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n  \n};\ntypedef Point Vector;\n\ndouble dot(Vector a,Vector b){\n  return a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nint main(){\n  int n;\n  double x1,y1,x2,y2,x3,y3,x4,y4;\n  Point p1,p2,p3,p4;\n  \n  scanf(\"%d\",&n);\n\n  while(n--){\n    scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n    \n    p1 = Point(x1,y1);\n    p2 = Point(x2,y2);\n    p3 = Point(x3,y3);\n    p4 = Point(x4,y4);\n    \n    if(isOrthogonal(p1,p2,p3,p4)){\n      puts(\"1\");\n    } else if(isParallel(p1,p2,p3,p4)){\n      puts(\"2\");\n    } else {\n      puts(\"0\");\n    }\n  }  \n\n  return(0);\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef complex<double> P;\n\n#define EPS (1e-7)\n\ndouble dot(P const& a, P const& b) {\n  return real(conj(a)*b);\n}\n\ndouble cross(P const& a, P const& b) {\n  return imag(conj(a)*b);\n}\n\nbool is_parallel(P const& a1, P const& a2, P const& b1, P const& b2) {\n  return abs(cross(a2-a1, b2-b1)) < EPS;\n}\n\nbool is_orthogonal(P const& a1, P const& a2, P const& b1, P const& b2) {\n  return abs(dot(a2-a1, b2-b1)) < EPS;\n}\n\nint main () {\n  \n  int q; cin >> q;\n  for(;q--;) {\n    P a1, a2, b1, b2;\n    cin >> a1.real() >> a1.imag() >> a2.real() >> a2.imag();\n    cin >> b1.real() >> b1.imag() >> b2.real() >> b2.imag();\n    if(is_parallel(a1, a2, b1, b2)) {\n      cout << 2 << endl;\n    }\n    else if(is_orthogonal(a1, a2, b1, b2)) {\n      cout << 1 << endl;\n    }\n    else {\n      cout << 0 << endl;\n    }\n\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long   // <-----!!!!!!!!!!!!!!!!!!!\n\n#define rep(i,n) for (int i=0;i<(n);i++)\n#define rep2(i,a,b) for (int i=(a);i<(b);i++)\n#define rrep(i,n) for (int i=(n)-1;i>=0;i--)\n#define rrep2(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define all(a) (a).begin(),(a).end()\n\ntypedef long long ll;\ntypedef pair<int, int> Pii;\ntypedef tuple<int, int, int> TUPLE;\ntypedef vector<int> V;\ntypedef vector<V> VV;\ntypedef vector<VV> VVV;\n\ntypedef complex<double> P;\ntypedef vector<P> G;\n#define here(g, i) g[i]\n#define next(g, i) g[(i + 1) % g.size()]\n#define prev(g, i) g[(i - 1 + g.size()) % g.size()]\nconst double EPS = 1e-10;\nconst double INF = 1e12;\n\nstruct L {\n    P a, b, v;\n    L(){}\n    // L(P _a, P _b) {a = _a, b = _b, v = b - a;}\n    L(P _a, P _b) : a(_a), b(_b), v(_b - _a) {}\n    L(double _ax, double _ay, double _bx, double _by)\n        : a(P(_ax, _ay)), b(P(_bx, _by)), v(b - a) {}\n};\n\ndouble cross(P a, P b) {\n    return imag(conj(a) * b);\n}\n\ndouble dot(P a, P b) {\n    return real(conj(a) * b);\n}\n\n// 2: parallel\n// 1: orthogonal\n// 0: otherwise\nint relationLL(L l1, L l2) {\n    if (cross(l1.v, l2.v) == 0) return 2;\n    if (dot(l1.v, l2.v) == 0) return 1;\n    return 0;\n}\n\nsigned main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    int q;\n    cin >> q;\n    while (q--) {\n        double v[4][2];\n        rep(i, 4) rep(j, 2) cin >> v[i][j];\n        L l1(v[0][0], v[0][1], v[1][0], v[1][1]);\n        L l2(v[2][0], v[2][1], v[3][0], v[3][1]);\n        cout << relationLL(l1, l2) << endl;\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 2e5 + 5;\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\ntemplate <typename T> void chkmax(T &x, T y) {x = max(x, y); }\ntemplate <typename T> void chkmin(T &x, T y) {x = min(x, y); } \ntemplate <typename T> void read(T &x) {\n\tx = 0; int f = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') f = -f;\n\tfor (; isdigit(c); c = getchar()) x = x * 10 + c - '0';\n\tx *= f;\n}\ntemplate <typename T> void write(T x) {\n\tif (x < 0) x = -x, putchar('-');\n\tif (x > 9) write(x / 10);\n\tputchar(x % 10 + '0');\n}\ntemplate <typename T> void writeln(T x) {\n\twrite(x);\n\tputs(\"\");\n}\nnamespace GeometryWithLongdouble {\n\ttypedef long double ld;\n\tconst ld eps = 1e-9;\n\tstruct point {ld x, y; };\n\tstruct line {point a, b; }; //Be sure that a and b are distinct.\n\tvoid ReadPointInt(point &a) {read(a.x), read(a.y); }\n\tvoid ReadLineInt(line &a) {ReadPointInt(a.a), ReadPointInt(a.b); }\n\tvoid CerrPoint(point a) {cerr << a.x << ' ' << a.y << endl; }\n\tvoid CerrLine(line a) {cerr << a.a.x << ' ' << a.a.y << ' ' << a.b.x << ' ' << a.b.y << endl; }\n\tpoint operator + (point a, point b) {return (point) {a.x + b.x, a.y + b.y}; }\n\tpoint operator - (point a, point b) {return (point) {a.x - b.x, a.y - b.y}; }\n\tpoint operator * (point a, ld b) {return (point) {a.x * b, a.y * b}; }\n\tld dot(point a, point b) {return a.x * b.x + a.y * b.y; }\n\tld operator * (point a, point b) {return a.x * b.y - a.y * b.x; }\n\tld moo(point a) {return sqrtl(a.x * a.x + a.y * a.y); }\n\tld dist(point a, point b) {return moo(a - b); }\n\tpoint unit(point a) {\n\t\tld tmp = moo(a);\n\t\tassert(tmp > eps);\n\t\treturn a * (1.0 / tmp);\n\t}\n\tpoint Projection(point x, line a) {\n\t\tld d = dot(x - a.a, a.b - a.a) / dist(a.a, a.b);\n\t\treturn a.a + unit(a.b - a.a) * d;\n\t}\n\tpoint Reflection(point x, line a) {\n\t\treturn Projection(x, a) * 2 - x;\n\t}\n\tbool OnLine(point x, line a) {\n\t\treturn fabsl((a.b - a.a) * (x - a.a)) <= eps;\n\t}\n\tbool OnSegment(point x, line a) {\n\t\treturn dist(x, a.a) + dist(x, a.b) - dist(a.a, a.b) <= eps;\n\t}\n\tbool Parallel(line a, line b) {\n\t\treturn fabsl((a.b - a.a) * (b.b - b.a)) <= eps;\n\t}\n\tbool Orthogonal(line a, line b) {\n\t\treturn fabsl(dot(a.b - a.a, b.b - b.a)) <= eps;\n\t}\n}\nint main() {\n\tusing namespace GeometryWithLongdouble;\n\tint q; read(q);\n\twhile (q--) {\n\t\tline a, b;\n\t\tReadLineInt(a);\n\t\tReadLineInt(b);\n\t\tif (Parallel(a, b)) puts(\"2\");\n\t\telse if (Orthogonal(a, b)) puts(\"1\");\n\t\telse puts(\"0\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<bitset>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<functional>\n#include<limits>\n#include<list>\n#include<map>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<queue>\n#include<vector>\nusing namespace std;\n\n#define MOD 1000000007\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n//0?¬?\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator/(double a) { return Point(x / a, y / a); }\n\tbool operator<(const Point &p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator==(const Point &p)const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n};\n\n//1?¬?\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point(1, 1)) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\n//2?¬?\nclass Circle {\npublic:\n\tPoint c; //center\n\tdouble r; //radius\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\n//??????\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n//??????\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n//??´?????????\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) { return isOrthogonal(a1 - a2, b1 - b2); }\nbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//????????????\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isParallel(Point a1, Point a2, Point b1, Point b2) { return isParallel(a1 - a2, b1 - b2); }\nbool isParallel(Segment s1, Segment s2) { return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//?°???±\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n//????°?\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p)*2.0; }\n\n//??????(p0,p1)????????????p2???????????¢???\nenum { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//?????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n//???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble a1 = abs(cross(base, s1.p1 - s2.p1)); //area1\n\tdouble a2 = abs(cross(base, s1.p2 - s2.p1)); //area2\n\tdouble t = a1 / (a1 + a2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//2??????????????¢\ndouble getDistance(Point a, Point b) { return (a - b).abs(); }\n//??´?????¨???????????¢\ndouble getDistanceLP(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()); }\n//????????¨???????????¢\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n//????????¨??????????????¢\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn\tmin(\n\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s1, s1.p1), getDistanceSP(s1, s1.p2))\n\t);\n}\n\nint main() {\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tPoint p[4];\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tscanf(\"%lf%lf\", &p[j].x, &p[j].y);\n\t\t}\n\t\tif (isParallel(p[0], p[1], p[2], p[3]))cout << 2 << endl;\n\t\telse if (isOrthogonal(p[0], p[1], p[2], p[3]))cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (int i = 0; i <(n); ++i)\n#define REP2(i,x,n) for (int i = x; i <(n); ++i)\n#define ALL(v) v.begin(), v.end()\n#define RALL(v) v.rbegin(), v.rend()\nusing namespace std;\nusing ll = long long;\nusing P = pair<int,int>;\nstatic const double PI = acos(-1);\nstatic const int INF = 1e9+7;\n\n/*\n\n計算幾何学　ライブラリ\n\n*/\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n}\n\n\n\nint main(){\n  int n;\n  cin >> n;\n  //cout << n << endl;\n  // cout << n << endl;\n  while(n--){\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n    Point a, b, c, d;\n    a = Point(x0,y0);\n    b = Point(x1,y1);\n    c = Point(x2,y2);\n    d = Point(x3,y3);\n    if(isParallel(a,b,c,d)) cout << 2 << endl;\n    else if(isOrthogonal(a,b,c,d)) cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;(i)<(n);++(i))\nusing namespace std;\n\n// Description: ????????????\n// Verifyed: various problem \nusing namespace placeholders;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P c;R r;};\n\nauto& operator >> (istream& is,P& p){ R x,y; is >> x >> y,p=P(x,y); return is;}\nauto& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline P vec(L l){return l.t-l.s;}\nauto sdot = bind(sgn,bind(dot,_1,_2,_3));\nauto sdet = bind(sgn,bind(det,_1,_2,_3));\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/vec(l)); return (1-u)*l.s+u*l.t;}\n\n// vertical parallel\n// verified: AOJ CGL_2_A\nbool vertical(L a,L b) {return sdot(0,vec(a),vec(b))==0;}\nbool parallel(L a,L b) {return sdet(0,vec(a),vec(b))==0;}\nbool eql(L a,L b){ return parallel(a,b) and sdet(a.s,a.t,b.s)==0;}\n\n// crossing determination\n// verified: AOJ CGL_2_B \nbool iss(L a,L b){\n\tint sa=sdet(a.s,a.t,b.s)*sdet(a.s,a.t,b.t);\n\tint sb=sdet(b.s,b.t,a.s)*sdet(b.s,b.t,a.t);\n\treturn max(sa,sb)<0;\n}\n\n// crossing point \n// verified: AOJ CGL_2_C\nP cross(L a,L b){\n\tR u=det(a.s,b.s,b.t)/det(0,vec(a),vec(b));\n\treturn (1-u)*a.s+u*a.t;\n}\n\t\n// distance \n// verified: AOJ CGL_2_D\nR dsp(L l,P p){\n\tP h=proj(l,p);\n\tif(sdot(l.s,l.t,p)) h=l.s;\n\tif(sdot(l.t,l.s,p)) h=l.t;\n\treturn abs(p-h);\n}\n\nR dss(L a,L b){return iss(a,b)?0:min({dsp(a,b.s),dsp(a,b.t),dsp(b,a.s),dsp(b,a.t)});}\n\nint main(void){\n\tint n;\n\tcin >> n;\n\tcout.precision(20);\n\trep(i,n){\n\t\tP a,b,c,d;\n\t\tcin >> a >> b >> c >> d;\n\t\tL s1={a,b},s2={c,d};\n\t\tif(parallel(s1,s2))\n\t\t\tcout << 2 << endl;\n\t\telse if(vertical(s1,s2))\n\t\t\tcout << 1 << endl;\n\t\telse\n\t\t\tcout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n\tint x, y;\n\tPoint(int x, int y) :\n\t\t\tx(x), y(y) {\n\t}\n\tPoint operator -(const Point p) const {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n};\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) :\n\t\t\tp1(p1), p2(p2) {\n\t}\n};\n\ndouble dot(Point p1, Point p2) {\n\treturn p1.x * p2.x + p1.y * p2.y;\n}\n\ndouble cross(Point p1, Point p2) {\n\treturn p1.x * p2.y - p1.y * p2.x;\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint main() {\n\n\tint q;\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; ++i) {\n\t\tint p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y;\n\t\tscanf(\"%d %d %d %d %d %d %d %d\", &p0x, &p0y, &p1x, &p1y, &p2x, &p2y, &p3x, &p3y);\n\t\tPoint p1(p0x, p0y);\n\t\tPoint p2(p1x, p1y);\n\t\tPoint p3(p2x, p2y);\n\t\tPoint p4(p3x, p3y);\n\t\tSegment s1(p1, p2);\n\t\tSegment s2(p3, p4);\n\n\t\tif (isOrthogonal(s1, s2)) {\n\t\t\tcout << 1 << endl;\n\t\t} else if (isParallel(s1, s2)) {\n\t\t\tcout << 2 << endl;\n\t\t} else {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n\nint main(){\n  int n;\n  double ax,ay,bx,by,cx,cy,dx,dy;\n  scanf(\"%d\",&n);\n  while(n--){    \n    scanf(\"%lf %lf %lf %lf\",&ax,&ay,&bx,&by);\n    scanf(\"%lf %lf %lf %lf\",&cx,&cy,&dx,&dy);\n    P k=P(bx-ax,by-ay)*P(dx-cx,cy-dy);\n    if(k.imag()==0)printf(\"2\\n\");\n    else if(k.real()==0)printf(\"1\\n\");\n    else printf(\"0\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-10;\nbool dcmp(double d, double d2 = 0) { return abs(d - d2) < eps; }\n\nstruct vec {\n  double x, y;\n  vec(double x, double y) : x(x), y(y) {}\n  vec() : x(0), y(0) {}\n  const bool operator==(const vec &v) const {\n    return dcmp(x, v.x) && dcmp(y, v.y);\n  }\n  const bool operator!=(const vec &v) const { return !(*this == v); }\n  const vec operator+(const vec &v) const { return vec(x + v.x, y + v.y); }\n  const vec operator-() const { return vec(-x, -y); }\n  const vec operator-(const vec &v) const { return *this + (-v); }\n  const vec operator*(const double d) const { return vec(x * d, y * d); }\n  const vec operator/(const double d) const { return *this * (1 / d); }\n  const vec unit() const { return *this / len(); };\n  const double len() const { return sqrt(x * x + y * y); }\n  const double dot(const vec &v) const { return x * v.x + y * v.y; }\n  const double cross(const vec &v) const { return x * v.y - y * v.x; }\n  const bool parallel(const vec &v) const { return dcmp(cross(v)); }\n  const bool perpendicular(const vec &v) const { return dcmp(dot(v)); }\n};\n\ntypedef vec point;\n\nint main() {\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++) {\n    point p0, p1, p2, p3;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    vec v0 = p1 - p0, v1 = p3 - p2;\n    if (v0.parallel(v1))\n      puts(\"2\");\n    else if (v0.perpendicular(v1))\n      puts(\"1\");\n    else\n      puts(\"0\");\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<algorithm>\n#include<iostream>\n#include<vector>\n#include<climits>\n#include<cfloat>\n#define curr(P, i) P[(i) % P.size()]\n#define next(P, i) P[(i+1) % P.size()]\n#define prev(P, i) P[(i+P.size()-1) % P.size()]\n\nusing namespace std;\n\ndouble EPS = 1e-10;\nconst double PI = acos(-1);\n\ndouble add(double a, double b){\n  if(abs(a+b) < EPS * (abs(a)+abs(b)))return 0;\n  return a+b;\n}\n\nstruct point{\n  double x, y;\n  point(){}\n  point(double x,double y) : x(x) , y(y){}\n\n  point operator + (point p){\n    return point(add(x,p.x), add(y,p.y));\n  }\n\n  point operator - (point p){\n    return point(add(x,-p.x), add(y,-p.y));\n  }\n\n  point operator * (double d){\n    return point(x*d,y*d);\n  }\n\n};\n\ndouble dot(point a, point b) {\n  return (a.x * b.x + a.y * b.y);\n}\n\ndouble cross(point a, point b) {\n  return (a.x * b.y - a.y * b.x);\n}\n\nint is_orthogonal(point a1, point a2, point b1, point b2) {\n  return dot(a1-a2, b1-b2)==0.0;\n}\n\nint is_parallel(point a1, point a2, point b1, point b2) {\n  return cross(a1-a2, b1-b2)==0.0 ;\n}\n\nint main(void){\n\n  int q;\n  cin >> q;\n  while(q--){\n    point a,b,c,d;\n    cin >> a.x >> a.y >> b.x >> b.y;\n    cin >> c.x >> c.y >> d.x >> d.y;\n    if(is_orthogonal(a,b,c,d))cout << 1 << endl;\n    else if(is_parallel(a,b,c,d))cout << 2 << endl;\n    else cout << 0 << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define PI acos(-1.0)\n#define EPS 1e-9\n\ndouble toRadian(double deg) {return ((deg*PI)/180.0);}\ndouble toDegree(double radian) {return ((radian*180.0)/PI);}\ndouble handleNegZero(double x) {return ((abs(x) < EPS)?0.0:x);}\n\nstruct point_i { int x, y;     // whenever possible, work with point_i\n  point_i() { x = y = 0; }                      // default constructor\n  point_i(int _x, int _y) : x(_x), y(_y) {} };         // user-defined\n\nstruct Point { //Integer Point\n    double x, y;\n    Point(){}\n    Point(double _x, double _y):x(_x), y(_y){}\n\n    bool operator < (Point other) const {\n        if(fabs(x - other.x) > EPS)\n            return x < other.x;\n        return y < other.y;\n    }\n\n    bool operator == (Point other) const {\n        return ((fabs(x - other.x) < EPS) && (fabs(y - other.y) < EPS));\n    }\n};\n\ndouble pointDistaceSquared2D (Point a, Point b) {return (a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y);}\ndouble dist (Point a, Point b) {return sqrt(pointDistaceSquared2D(a, b));}\n// rotate p by theta degrees CCW w.r.t origin (0, 0)\nPoint rotate(Point p, double theta) {\n    double rad = toRadian(theta);\n    return Point(p.x * cos(rad) - p.y * sin(rad),\n                 p.x * sin(rad) + p.y * cos(rad));\n}\n\nstruct line {double a, b, c;};\nvoid pointsToLine(Point p1, Point p2, line &l) {\n    if(fabs(p1.x-p2.x) < EPS) {\n        l.a = 1.0; l.b = 0.0; l.c = -p1.x;\n    } else {\n        l.a = -(double)(p1.y-p2.y) / (p1.x-p2.x);\n        l.b = 1.0;\n        l.c = -(double)(l.a*p1.x)-p1.y;\n    }\n}\n\nbool areParallel(line l1, line l2) {\n    return (fabs(l1.a-l2.a) < EPS) && (fabs(l1.b-l2.b) < EPS);\n}\n\nbool areSame(line l1, line l2) {\n    return areParallel(l1, l2) && (fabs(l1.c-l2.c) < EPS);\n}\n\nbool areIntersect(line l1, line l2, Point &p) {\n    if(areParallel(l1, l2)) return false;\n    p.x = (l2.b*l1.c-l1.b*l2.c) / (l2.a*l1.b-l1.a*l2.b);\n    if(fabs(l1.b) > EPS) p.y = -(l1.a*p.x+l1.c);\n    else                 p.y = -(l2.a*p.x+l2.c);\n    return true;\n}\n\nstruct vec {\n    double x, y;\n    vec(){}\n    vec(double _x, double _y):x(_x), y(_y){}\n};\n\nvec toVec(Point a, Point b) {return vec(b.x - a.x, b.y - a.y);}\nvec scale(vec v, double s) {return vec(v.x*s, v.y*s);}\nPoint translate(Point p, vec v) {return Point(p.x + v.x, p.y + v.y);}// translate p according to v\ndouble dot(vec a, vec b) {return (a.x*b.x + a.y*b.y);}\ndouble norm_sq(vec v) {return v.x*v.x + v.y*v.y;}\n\nint main() {\n\n    int q;\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++) {\n        scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n        Point   a = Point(x0, y0),\n                b = Point(x1, y1),\n                c = Point(x2, y2),\n                d = Point(x3, y3);\n\n        line    s1, s2;\n        pointsToLine(a, b, s1);\n        pointsToLine(c, d, s2);\n\n        if(abs(dot(toVec(a, b), toVec(c, d))) < EPS) {\n            printf(\"1\\n\");\n        } else if(areParallel(s1, s2)) {\n            printf(\"2\\n\");\n        } else {\n            printf(\"0\\n\");\n        }\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <complex>\nusing namespace std;\n\ntypedef long long lli;\ntypedef complex<lli> point;\n\nlli dot(point a,point b){\n\treturn (a*conj(b)).real();\n}\n\nlli cross(point a,point b){\n\treturn (a*conj(b)).imag();\n}\n\nint main(void){\n\tdouble x,y;\n\tint q;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x>>y;\n\t\tpoint p0(x,y);\n\t\tcin>>x>>y;\n\t\tpoint p1(x,y);\n\t\tcin>>x>>y;\n\t\tpoint p2(x,y);\n\t\tcin>>x>>y;\n\t\tpoint p3(x,y);\n\t\tpoint l1=p1-p0;\n\t\tpoint l2=p3-p2;\n\t\tif(cross(l1,l2)==0)cout<<\"2\"<<endl;\n\t\telse if(dot(l1,l2)==0)cout<<\"1\"<<endl;\n\t\telse cout<<\"0\"<<endl;\n\t\treturn 0;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n\nint main(){\n  int n;\n  double ax,ay,bx,by,cx,cy,dx,dy;\n  scanf(\"%d\",&n);\n  while(n--){    \n    scanf(\"%lf %lf %lf %lf\",&ax,&ay,&bx,&by);\n    scanf(\"%lf %lf %lf %lf\",&cx,&cy,&dx,&dy);\n    P AB=P(bx-ax,by-ay);\n    P CD=P(dx-cx,dy-cy);\n    if(imag(AB/CD)==0)printf(\"2\\n\");\n    else if(real(AB/CD)==0)printf(\"1\\n\");\n    else printf(\"0\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n#define INF 1<<30\n#define LINF 1LL<<60\n\ntypedef long double ld;\ntypedef complex<ld> Point;\nconst ld eps = 1e-9, pi = acos(-1.0);\nnamespace std {\n    bool operator<(const Point &lhs, const Point &rhs) {\n        if (lhs.real() < rhs.real() - eps) return true;\n        if (lhs.real() > rhs.real() + eps) return false;\n        return lhs.imag() < rhs.imag();\n    }\n}\nPoint input_point() {ld x, y; cin >> x >> y; return Point(x, y);} // ????????\\???\nbool eq(ld a, ld b) {return (abs(a - b) < eps);} // ????????????????????????\nld dot(Point a, Point b) {return real(conj(a) * b);} // ??????\nld cross(Point a, Point b) {return imag(conj(a) * b);} // ??????\n\n// ??´????????????\nclass Line {\npublic:\n    Point a, b;\n    Line() : a(Point(0, 0)), b(Point(0, 0)) {}\n    Line(Point a, Point b) : a(a), b(b) {}\n    Point operator[](const int _num) {\n        if (_num == 0)return a;\n        else if (_num == 1)return b;\n        else assert(false);\n    }\n};\n\n// ????????????\nclass Circle {\npublic:\n    Point p;\n    ld r;\n    Circle() : p(Point(0, 0)), r(0) {}\n    Circle(Point p, ld r) : p(p), r(r) {}\n};\n\n/*\n ??????????????´??????\n ?????????2 ?????´???1 otherwise???0\n */\nint main(void) {\n    cin.tie(0); ios::sync_with_stdio(false);\n    int q; cin >> q;\n    for(int i = 0; i < q;i++){\n        Point p0 = input_point();\n        Point p1 = input_point();\n        Point p2 = input_point();\n        Point p3 = input_point();\n        \n        Point s1 = p1 - p0, s2 = p3 - p2;\n        if(abs(cross(s1,s2)) < eps) cout << 2 << endl;\n        else if(abs(dot(s1,s2)) < eps) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nstatic const double EPS = 1e-10;\n\nstruct Point{\n    double x,y;\n    Point(double x, double y): x(x), y(y) {}\n    Point operator + (Point p) const { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) const { return Point(x-p.x, y-p.y); }\n    double norm() const { return x*x + y*y; }\n    double abs() const { return sqrt(norm()); }\n    double dot(Point p) const { return x*p.x + y*p.y; }\n};\n\ntypedef Point Vector;\n\ndouble cosine(Vector u, Vector v){\n    return u.dot(v) / u.abs() / v.abs();\n}\n\nint main(){\n    int n;\n    cin >> n;\n    double x[8];\n    for(int i=0;i<n;i++){\n        for(int j=0;j<8;j++) cin >> x[j];\n        double cos_ = cosine(Point(x[2], x[3]) - Point(x[0], x[1]), Point(x[6], x[7]) - Point(x[4], x[5]));\n        if(fabsl(cos_) < EPS){\n            cout << 1 << endl;\n        }else if(fabsl(cos_ - 1) < EPS || fabsl(cos_ + 1) < EPS){\n            cout << 2 << endl;\n        }else{\n            cout << 0 << endl;\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "/**\n * Computing Geometry Library\n * @author Sshwy\n */\n#include<bits/stdc++.h>\nusing namespace std;\n#define pb push_back\n#define FOR(i,a,b) for(int i=(a);i<=(b);++i)\n#define ROF(i,a,b) for(int i=(a);i>=(b);--i)\n\nnamespace cg{\n    typedef long double vtyp;\n    const vtyp eps = 1e-9;\n    bool isZero(vtyp x){ return -eps < x && x < eps; }\n    bool equal(vtyp x, vtyp y){ return isZero(x-y); }\n    bool lt(vtyp x,vtyp y){ return !equal(x,y) && x<y; }\n    bool gt(vtyp x,vtyp y){ return !equal(x,y) && x>y; }\n    struct vec {\n        vtyp x,y;\n        vec(){ x = y = 0; }\n        vec(vtyp _x, vtyp _y){ x = _x, y = _y; }\n        vec operator+(const vec V) const { return vec(x+V.x, y+V.y); }\n        vec operator-() const { return vec(-x, -y); }\n        vec operator-(const vec V) const { return *this + (-V); }\n        vec operator*(const vtyp a) const { return vec(x*a, y*a); }\n        friend vec operator*(const vtyp a, const vec v){ return v*a; }\n        operator bool() const { return !(isZero(x) && isZero(y)); }\n        bool operator==(const vec V) const { return bool(*this-V) == 0; }\n        vtyp length(){ return sqrt(x*x + y*y); }\n        /**\n         * 方向角，单位 rad\n         */\n        vtyp ang() const { return atan2(y,x); }\n        /**\n         * 方向向量\n         * @return 0向量或者一个单位向量\n         */\n        vec dir() const {\n            if(*this){\n                vtyp ang = atan2(y,x);\n                return vec(cos(ang), sin(ang));\n            } else return vec(0,0);\n        }\n        void read(){ scanf(\"%Lf%Lf\",&x,&y); }\n    };\n    typedef vec point;\n\n    struct line {\n        point p1, p2;\n        line(point _p1, point _p2){ p1 = _p1, p2 = _p2; }\n    };\n    typedef line segment;\n\n    istream & operator>>(istream & in, vec & v){ \n        return in >> v.x >> v.y, in; \n    }\n    ostream & operator<<(ostream & out, const vec & v){ \n        return out << v.x << \" \" << v.y, out;\n    }\n    ifstream & operator>>(ifstream & in, vec & v){ \n        return in >> v.x >> v.y, in; \n    }\n    ofstream & operator<<(ofstream & out, const vec & v){ \n        return out << v.x << \" \" << v.y, out;\n    }\n    /**\n     * 点积\n     * a dot b == |a||b|cos theta\n     */\n    vtyp dot(const vec a, const vec b){ return a.x*b.x + a.y*b.y; }\n    /**\n     * 叉积\n     * 两个向量围成的有向面积\n     */\n    vtyp det(const vec a, const vec b){ return a.x*b.y - a.y*b.x; }\n\n\n    /**\n     * 投影\n     * @param L 直线\n     * @param p 要求投影的点\n     * @return p 在 L 上的投影坐标（即垂足）\n     */\n    point projection(line L, point p){\n        vec d = L.p2 - L.p1;\n        return L.p1 + (dot(d, p-L.p1)/d.length()) * d.dir();\n    }\n    /**\n     * 对称点\n     * @param L 直线\n     * @param p 点\n     * @return p 关于直线 L 的对称点\n     */\n    point reflection(line L, point p){\n        point o = projection(L,p);\n        return vtyp(2)*(o-p)+p;\n    }\n\n    /**\n     * 判断向量是否平行\n     */\n    bool parallel(vec a, vec b){ return isZero(det(a,b)); }\n    /**\n     * 判断直线是否平行\n     */\n    bool parallel(line a, line b){ return parallel(a.p2-a.p1, b.p2-b.p1); }\n    /**\n     * 判断向量是否垂直\n     */\n    bool orthogonal(vec a, vec b){ return isZero(dot(a,b)); }\n    /**\n     * 判断直线是否垂直\n     */\n    bool orthogonal(line a, line b){ return orthogonal(a.p2-a.p1, b.p2-b.p1); }\n    /**\n     * 判断点 p 是否在直线L上\n     */\n    bool online(line L, point p){\n        return parallel(L.p2-L.p1,p-L.p1);\n    }\n    /**\n     * 判断点 p 是否与有向线段共线且在反向延长线上\n     */\n    bool online_back(segment sl, point p){\n        vec a = sl.p2-sl.p1, b = p-sl.p1;\n        return parallel(a,b) && lt(dot(a,b),0);\n    }\n    /**\n     * 判断点 p 是否与有向线段共线且在正向延长线上\n     */\n    bool online_front(segment sl, point p){\n        vec a = sl.p1-sl.p2, b = p-sl.p2; // 倒过来\n        return parallel(a,b) && lt(dot(a,b),0);\n    }\n    /**\n     * 判断点 p 是否在线段上（含端点）\n     */\n    bool on_segment(segment sl, point p){\n        return online(sl,p) && !online_back(sl,p) && !online_front(sl,p);\n    }\n}\nusing cg::point;\nusing cg::line;\nusing cg::segment;\n\n\nint main(){\n    int q;\n    cin>>q;\n    FOR(i,1,q){\n        point p[4];\n        cin>>p[0]>>p[1]>>p[2]>>p[3];\n        line l1(p[0],p[1]),l2(p[2],p[3]);\n        if(cg::parallel(l1,l2))cout<<2<<endl;\n        else if(cg::orthogonal(l1,l2))cout<<1<<endl;\n        else cout<<0<<endl;\n        // cout<<setiosflags(ios::fixed) <<setprecision(10)\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tlong double x0, y0, x1, y1, x2, y2, x3, y3; cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tlong double vec1_x = x1 - x0, vec1_y = y1 - y0, vec2_x = x3 - x2, vec2_y = y3 - y2;\n\t\tlong double cos_val = (vec1_x*vec2_x + vec1_y*vec2_y) / (hypot(vec1_x, vec1_y)*hypot(vec2_x, vec2_y));\n\t\tif (cos_val == 0) { cout << \"1\" << endl; continue; }\n\t\tif (cos_val == 1 || cos_val == -1) { cout << \"2\" << endl; continue; }\n\t\tcout << \"0\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace arithmetic {\n  template<typename T> class Addition {\n  public:\n    template<typename V> T operator+(const V& v) const {\n      return T(static_cast<const T&>(*this)) += v;\n    }\n  };\n\n  template<typename T> class Subtraction {\n  public:\n    template<typename V> T operator-(const V& v) const {\n      return T(static_cast<const T&>(*this)) -= v;\n    }\n  };\n\n  template<typename T> class Multiplication {\n  public:\n    template<typename V> T operator*(const V& v) const {\n      return T(static_cast<const T&>(*this)) *= v;\n    }\n  };\n\n  template<typename T> class Division {\n  public:\n    template<typename V> T operator/(const V& v) const {\n      return T(static_cast<const T&>(*this)) /= v;\n    }\n  };\n\n  template<typename T> class Modulus {\n  public:\n    template<typename V> T operator%(const V& v) const {\n      return T(static_cast<const T&>(*this)) %= v;\n    }\n  };\n}\n\ntemplate<typename T> class IndivisibleArithmetic : public arithmetic::Addition<T>, public arithmetic::Subtraction<T>, public arithmetic::Multiplication<T> {};\n\ntemplate<typename T> class Arithmetic : public IndivisibleArithmetic<T>, public arithmetic::Division<T> {};\n\ntemplate<typename T> class Ordered {\npublic:\n  template<typename V> bool operator==(const V& v) const {\n    return !(static_cast<T>(v) < static_cast<const T&>(*this) || static_cast<const T&>(*this) < static_cast<T>(v));\n  }\n  \n  template<typename V> bool operator!=(const V& v) const {\n    return static_cast<T>(v) < static_cast<const T&>(*this) || static_cast<const T&>(*this) < static_cast<T>(v);\n  }\n\n  template<typename V> bool operator>(const V& v) const {\n    return static_cast<T>(v) < static_cast<const T&>(*this);\n  }\n\n  template<typename V> bool operator<=(const V& v) const {\n    return !(static_cast<T>(v) < static_cast<const T&>(*this));\n  }\n\n  template<typename V> bool operator>=(const V& v) const {\n    return !(static_cast<const T&>(*this) < static_cast<T>(v));\n  }\n};\n\ntemplate<typename T> inline T gcd(T a, T b) {\n  return __gcd(a, b);\n}\n\ntemplate<typename T> inline T lcm(T a, T b) {\n  return a / gcd(a, b) * b;\n}\n\ntemplate<typename T> inline T floor(T a, T b) {\n  return floor(a / b) * b <= a ? floor(a / b) : floor(a / b) - 1;\n}\n\ntemplate<typename T> inline T ceil(T a, T b) {\n  return floor(a + b - 1, b);\n}\n\ntemplate<typename T> inline T round(T a, T b) {\n  return floor(a + b / 2);\n}\n\ntemplate<typename T> inline T mod(T a, T b) {\n  return a - floor(a, b) * b;\n}\n\ntemplate<typename T> inline T factorial(T n) {\n  return n <= 1 ? 1 : factorial(n - 1) * n;\n}\n\nclass Real : public Arithmetic<Real>, public arithmetic::Modulus<Real>, public Ordered<Real> {\nprivate:\n  static long double EPS;\n  long double val;\n\n  operator long double() const {\n    return val;\n  }\n\npublic:\n  Real() {}\n\n  Real(long double val) : val(val) {}\n\n  Real operator-() const {\n    return -val;\n  }\n\n  template<typename T> Real operator+=(const T& r) {\n    val += static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator-=(const T& r) {\n    val -= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator*=(const T& r) {\n    val *= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator/=(const T& r) {\n    val /= static_cast<long double>(r);\n    return *this;\n  }\n\n  template<typename T> Real operator%=(const T& r) {\n    return *this = mod(*this, static_cast<Real>(r));\n  }\n\n  template<typename T> Real operator-(const T& v) const {\n    return Real(*this) -= v;\n  }\n\n  template<typename T> bool operator<(const T r) const {\n    return val < static_cast<long double>(r) - EPS;\n  }\n\n  Real abs() const {\n    return std::abs(val);\n  }\n\n  Real sqrt() const {\n    return std::sqrt(val);\n  }\n\n  long double toLongDouble() const {\n    return val;\n  }\n};\n\nlong double Real::EPS = 1e-8;\n\ninline ostream& operator<<(ostream& os, const Real& a) {\n  os << fixed << setprecision(15) << a.toLongDouble();\n  return os;\n}\n\ninline istream& operator>>(istream& is, Real& a) {\n\tlong double n;\n\tis >> n;\n\ta = n;\n\treturn is;\n}\n\nReal floor(const Real& r) {\n  return floor(r.toLongDouble());\n}\n\nclass Point : public Arithmetic<Point> {\npublic:\n  Real x, y;\n\n  Point() {}\n\n  Point(const Real& x) : x(x), y(0) {}\n\n  Point(const Real& x, const Real& y) : x(x), y(y) {}\n\n  Point operator+=(const Point& p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n\n  Point operator-=(const Point& p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n\n  Point operator*=(const Point& p) {\n    Real xx = x * p.x - y * p.y;\n    y = x * p.y + y * p.x;\n    x = xx;\n    return *this;\n  }\n\n  Point operator*=(const Real& r) {\n    x *= r;\n    y *= r;\n    return *this;\n  }\n\n  Point operator/=(const Point& p) {\n    Real nrm = p.norm();\n    Real xx = (x * p.x + y * p.y) / nrm;\n    y = (y * p.x - x * p.y) / nrm;\n    x = xx;\n    return *this;\n  }\n\n  Point operator/=(const Real& r) {\n    x /= r;\n    y /= r;\n    return *this;\n  }\n\n  Real norm() const {\n    return x * x + y * y;\n  }\n\n  Real abs() const {\n    return norm().sqrt();\n  }\n\n  Point conj() const {\n    return Point(x, -y);\n  }\n};\n\ninline ostream& operator<<(ostream& os, const Point& point) {\n\tos << point.x << \" \" << point.y;\n\treturn os;\n}\n\ninline istream& operator>>(istream& is, Point& point) {\n  Real x, y;\n\tis >> x >> y;\n\tpoint = Point(x, y);\n\treturn is;\n}\n\nclass Line {\npublic:\n  Point a, b;\n\n  Line() {}\n\n  Line (const Point& a, const Point& b) : a(a), b(b) {}\n\n  bool operator==(const Line& line) const {\n    return ((line.vec() / vec()).y == 0) && (((line.a - a) / vec()).y == 0);\n  }\n\n  Point vec() const {\n    return b - a;\n  }\n};\n\ninline ostream& operator<<(ostream& os, const Line& line) {\n\tos << line.a << \" \" << line.b;\n\treturn os;\n}\n\ninline istream& operator>>(istream& is, Line& line) {\n  Point a, b;\n  is >> a >> b;\n  line = Line(a, b);\n  return is;\n}\n\nclass Segment : public Line {\npublic:\n  Segment() {}\n\n  Segment (const Point& a, const Point& b) : Line(a, b) {}\n};\n\nenum CCW{LEFT = 1, RIGHT = 2, BACK = 4, FRONT = 8, ON = 16};\n\nint ccw(const Segment& segment, const Point& point) {\n  Point p = (point - segment.a) / segment.vec();\n  if (p.y > 0) return LEFT;\n  if (p.y < 0) return RIGHT;\n  if (p.x < 0) return BACK;\n  if (p.x > 1) return FRONT;\n  return ON;\n}\n\ntemplate<bool strict = false> inline bool intersect(const Line& line1, const Line& line2) {\n  if (strict) return (line1.vec() / line2.vec()).y != 0;\n  return ((line1.vec() / line2.vec()).y != 0) || (line1 == line2);\n}\n\ntemplate<bool strict = false> inline bool intersect(const Line& line, const Segment& segment) {\n  Point p1 = segment.a / line.vec(), p2 = segment.b / line.vec();\n  if (strict) return p1.y * p2.y < 0;\n  return p1.y * p2.y <= 0;\n}\n\ntemplate<bool strict = false> inline bool intersect(const Segment& segment, const Line& line) {\n  return intersect(line, segment);\n}\n\ntemplate<bool strict = false> inline bool intersect(const Segment& segment1, const Segment& segment2) {\n  int ccw1 = ccw(segment1, segment2.a) | ccw(segment1, segment2.b);\n  int ccw2 = ccw(segment2, segment1.a) | ccw(segment2, segment1.b);\n  if (strict) return (ccw1 & ccw2) == (LEFT | RIGHT);\n  return ((ccw1 & ccw2) == (LEFT | RIGHT)) || ((ccw1 | ccw2) & ON);\n}\n\nint main() {\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Line line1, line2;\n    cin >> line1 >> line2;\n    if (!intersect<true>(line1, line2)) cout << 2 << endl;\n    else if ((line2.vec() / line1.vec()).x == 0) cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<stack>\n#include<climits>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\n\n#define REP(i,n) for(int i=0;i<(int)n;i++)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\n\ndouble EPS = 1e-10;\n\ndouble add(double a, double b){\n\tif(abs(a+b) < EPS * (abs(a) + abs(b))) return 0;\n\treturn a+b;\n}\n\nstruct P{\n\tdouble x,y;\n\tP(){}\n\tP(double x, double y) : x(x), y(y){\n\t}\n\tP operator +(P p){\n\t\treturn P(add(x,p.x), add(y,p.y));\n\t}\n\tP operator -(P p){\n\t\treturn P(add(x,-p.x), add(y,-p.y));\n\t}\n\tP operator *(double d){\n\t\treturn P(d*x, d*y);\n\t}\n\tdouble dot (P p){\n\t\treturn add(x*p.x, y*p.y);\n\t}\n\tdouble det (P p){\n\t\treturn add(x*p.y, -y*p.x);\n\t}\n\tvoid print (){\n\t\tcout << x << \" \" << y <<endl;\n\t\treturn;\n\t}\n};\n\nvoid Check(){\n\tvector<P> vec(4);\n\tdouble x, y;\n\n\tREP(i, 4){\n\t\tcin >> vec[i].x >> vec[i].y ;\n\t}\n\t\n\tP q0 =vec[1]-vec[0];\n\tP q1 = vec[3] - vec[2]; \n\n\tif(q0.dot(q1)==0)  cout << 1 << endl;\n\tif(q0.det(q1)==0)  cout << 2 << endl; \n\tif(q0.dot(q1)!=0 && q0.det(q1)!=0) cout << 0 << endl;\n\treturn;\n}\n\nint main(){\n\tint q;\n\tcin >> q;\n\tREP(i, q){\n\t\tCheck();\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define REP(i,a) for(int i = 0; i < (a); i++)\n#define ALL(a) (a).begin(),(a).end()\ntypedef long long ll;\ntypedef pair<int, int> P;\nconst int INF = 1e9;\nconst int MOD = 1e9 + 7;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\n\nstruct Point {\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n    \n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) { return a.x * a.x + a.y * a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nstruct Circle {\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n    return abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if ( dot(s.p2 - s.p1, p - s.p1) < 0.0 ) return abs(p - s.p1);\n    if ( dot(s.p1 - s.p2, p - s.p2) < 0.0 ) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\nbool intersect(Segment s1, Segment s2);\n\ndouble getDistance(Segment s1, Segment s2) {\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if( cross(a, b) > EPS ) return COUNTER_CLOCKWISE;\n    if( cross(a, b) < -EPS ) return CLOCKWISE;\n    if( dot(a, b) < -EPS ) return ONLINE_BACK;\n    if( a.norm() < b.norm() ) return ONLINE_FRONT;\n\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return ( ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0 );\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n    // assert(intersect(c, l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n    // assert(intersect(c1, c2));\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n// IN : 2, ON : 1, OUT : 0\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for( int i = 0; i < n; i++ ) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if ( abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n        if ( a.y > b.y ) swap(a, b);\n        if ( a.y < EPS && EPS < b.y && cross(a, b) > EPS ) x = !x;\n    }\n    return ( x ? 2 : 0 );\n}\n\nsigned main(){\n    int q;\n    cin >> q;\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    REP(i,q){\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        Point p0 = Point(x0, y0), p1 = Point(x1, y1), p2 = Point(x2, y2), p3 = Point(x3, y3);\n        if(isParallel(p0, p1, p2, p3)){\n            cout << 2 << endl;\n        }else if(isOrthogonal(p0, p1, p2, p3)){\n            cout << 1 << endl;\n        }else{\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "/*\n* 多边形和圆面积并\n* Complier: G++\n* Create Time: 8:26 2015/10/1 星期四\n*/\n#include <algorithm>\n#include <iostream>\n#include <math.h>\n#include <stdio.h>\n#include <string.h>\nusing namespace std;\n\nconst double pi = acos(-1.0);\nconst double e = exp(1.0);\nconst double eps = 1e-8;\nconst int maxn = 1005;\ntypedef struct point vec;  //向量vec\nstruct point {    //点的基本数据结构\n    double x, y;\n    point(double _x=0, double _y=0):\n    x(_x),y(_y)\n    {\n    }\n    point operator*(const point& i_T) const\n    {\n        return point(x * i_T.x, y * i_T.y);\n    }\n    point operator*(double u) const\n    {\n        return point(x * u, y * u);\n    }\n    bool operator==(const point& i_T) const\n    {\n        return x == i_T.x && y == i_T.y;\n    }\n    point operator/(double u) const\n    {\n        return point(x / u, y / u);\n    }\n    point operator+(const point& i_T)\n    {\n        return point(x + i_T.x, y + i_T.y);\n    }\n    point operator-(const point& i_T)\n    {\n        return point(x - i_T.x, y - i_T.y);\n    }\n    friend bool operator<(point a, point b)\n    {\n        return a.y == b.y ? a.x < b.x : a.y < b.y;\n    }\n    friend ostream& operator<<(ostream& out, point& a)\n    {\n        //cout << a.x << ' ' << a.y;\n        printf(\"%.8f %.8f\", a.x, a.y);\n        return out;\n    }\n    friend istream& operator>>(istream& in, point& a)\n    {\n        in >> a.x >> a.y;\n        return in;\n    }\n};\ntypedef struct Line Segment;   //线段Segment\nstruct Line {       //直线\n    vec a, b;\n    Line(point _a = point(), point _b = point())\n        : a(_a)\n        , b(_b)\n    {\n    }\n    friend istream& operator>>(istream& in, Line& a)\n    {\n        cin >> a.a >> a.b;\n        return in;\n    }\n    friend ostream& operator<<(ostream& out, Line& a)\n    {\n        out << a.a << ' ' << a.b;\n        return out;\n    }\n};\ndouble dianji(vec A, vec B) //点积\n{\n    return A.x * B.x + A.y * B.y;\n}\nint zhengfu(double d)   //判断正负\n{\n    if (fabs(d) < eps)\n        return 0;\n    if (d > 0)\n        return 1;\n    return -1;\n}\nint bijiao(double x, double y)\n{\n    if (fabs(x - y) < eps)\n        return 0;\n    if (x > y)\n        return 1;\n    return -1;\n}\nbool pingxing(vec a,vec b)\n{\n    return bijiao(a.x*b.y,a.y*b.x)==0;\n}\npoint p[1000];\nint main()\n{\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        Line l1,l2;\n        cin>>l1>>l2;\n        if (pingxing(l1.b-l1.a,l2.b-l2.a))\n            cout << \"2\" << endl;\n        else {\n            if (zhengfu(dianji(l1.b-l1.a,l2.b-l2.a))==0)\n                cout << \"1\" << endl;\n            else {\n                cout << \"0\" << endl;\n            }\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n//#define int long long\n\nusing namespace std;\nusing LL = long long;\nusing P = pair<int, int>;\nusing Tapris = tuple<int, int, int>;\n\n#define FOR(i, a, n) for(int i = (int)(a); i < (int)(n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define pb(a) push_back(a)\n#define all(x) (x).begin(),(x).end()\n\nconst int INF = (int)1e9;\nconst LL INFL = (LL)1e15;\nconst int MOD = 1e9 + 7;\n\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n\ntypedef long double LD;\ntypedef complex<LD> Point;\ntypedef pair<Point, Point> Line;\nconst LD EPS = 1e-10;\n#define X real() // x座標を取得\n#define Y imag() // y座標を取得\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n\n// 内積 dot(a, b) = |a||b|cosθ\nLD dot(Point a, Point b){\n    return (conj(a)*b).X;\n}\n\n// 外積 cross(a, b) = |a||b|sinθ\nLD cross(Point a, Point b){\n    return (conj(a)*b).Y;\n}\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n\n// 交差判定 (isec) ****************************\n// 点　 := 平面座標にある点\n// 直線 := 点と点を通るどこまでも続く線\n// 線分 := 点と点を結んでその両端で止まっている線\n\n// 直線と点\nbool isecLP(Point a1, Point a2, Point b){\n    return abs(ccw(a1, a2, b)) != 1;\n}\n\n// 直線と直線\nbool isecLL(Point a1, Point a2, Point b1, Point b2) {\n    return !isecLP(a2-a1, b2-b1, 0) || isecLP(a1, b1, b2);\n}\n\n// 直線と線分\nbool isecLS(Point a1, Point a2, Point b1, Point b2) {\n    return cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS;\n}\n\n// 線分と線分\nbool isecSS(Point a1, Point a2, Point b1, Point b2) {\n    return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 && ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\n\n// 線分と点\nbool isecSP(Point a1, Point a2, Point b) {\n    return !ccw(a1, a2, b);\n}\n\n// ********************************************\n\n\n// 距離 (dist) ********************************\n// 点pの直線aへの射影点を返す\nPoint proj(Point a1, Point a2, Point p){\n    return a1 + dot(a2-a1, p-a1) / norm(a2-a1) * (a2-a1);\n}\n\n// 点pの直線aへの反射点を返す\nPoint reflection(Point a1, Point a2, Point p){\n    return 2.0L*proj(a1, a2, p) - p;\n}\n\n// 直線と点\nLD distLP(Point a1, Point a2, Point p){\n    return abs(proj(a1, a2, p) - p);\n}\n\n// 直線と直線\nLD distLL(Point a1, Point a2, Point b1, Point b2) {\n    return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\n// 直線と線分\nLD distLS(Point a1, Point a2, Point b1, Point b2) {\n    return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\n// 線分と点\nLD distSP(Point a1, Point a2, Point p) {\n    Point r = proj(a1, a2, p);\n    if(isecSP(a1, a2, r)) return abs(r-p);\n    return min(abs(a1-p), abs(a2-p));\n}\n\n// 線分と線分\nLD distSS(Point a1, Point a2, Point b1, Point b2) {\n    if(isecSS(a1, a2, b1, b2)) return 0;\n    return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)), min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\n// ********************************************\n\n\n// 2直線の交点 (crosspoint) *******************\nPoint crosspointLL(Point a1, Point a2, Point b1, Point b2){\n    LD d1 = cross(b2-b1, b1-a1);\n    LD d2 = cross(b2-b1, a2-a1);\n    if (EQ(d1, 0) && EQ(d2, 0)) return a1;\n    if (EQ(d2, 0)) throw \"not exist crosspoint\";\n    return a1 + d1/d2 * (a2-a1);\n}\n// ********************************************\n\n\n/*************** using variables ***************/\nPoint p[4];\nint q;\n/**********************************************/\n\nsigned main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    cin >> q;\n    REP(i, q){\n        LD xp, yp;\n        REP(i, 4){\n            cin >> xp >> yp;\n            p[i] = Point(xp, yp);\n        }\n\n        if(EQ(cross(p[0]-p[1], p[2]-p[3]), 0)){\n            cout << \"2\" << endl;\n        }else if(EQ(dot(p[0]-p[1], p[2]-p[3]), 0)){\n            cout << \"1\" << endl;\n        }else{\n            cout << \"0\" << endl;\n        }\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS) //?????????????????????????????????\n\n//??????????????????????????????\nclass Point{\n\npublic:\n\n\tdouble x, y;//??§?¨????????????????x,y??????\n\n\tPoint(double x = 0,double y = 0):x(x),y(y){}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator * (Point p) {\n\t\treturn Point(x * p.x, y * p.y);\n\t}\n\n\tPoint operator / (Point p) {\n\t\treturn Point(x / p.x, y / p.y);\n\t}\n\n\tdouble norm() {\n\t\treturn x*x + y*y;\n\t}\n\n\t//?????????????????§???????????????\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS &&  fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\n\ntypedef vector<Point> Polygon;\n\n//??????????????????????????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????????????????????????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\n\n\n\n//???\nclass Circle {\npublic:\n\tPoint c;//??????\n\tdouble r;//??????\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n\n\n\n\n\nint main(void)\n{\n\tint n;\n\n\tPoint p[4];\n\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < 4; j++) {\n\t\t\tcin >> p[j].x >> p[j].y;\n\t\t}\n\n\t\tif (isOrthogonal(p[0], p[1], p[2], p[3])) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse if (isParallel(p[0], p[1], p[2], p[3])) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<sstream>\n#include<algorithm>\n#include<climits>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<cfloat>\n#include<functional>\n#include<map>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<deque>\n#include<set>\n#include<bitset>\n#include<list>\n#include<numeric>\n#include<complex>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> i_i;\ntypedef pair<long long, int> ll_i;\ntypedef pair<double, int> d_i;\ntypedef pair<long long, long long> ll_ll;\ntypedef pair<double, double> d_d;\n\n#define PI 3.141592653589793238462643383279\n#define mod 1000000007LL\n#define rep(i, n) for(i = 0;i < n;++i)\n#define rep1(i, n) for(i = 1;i < n;++i)\n#define rep2d(i, j, n) for(i = 0;i < n;++i)for(j = i + 1;j < n;++j)\n#define per(i, n) for(i = n - 1;i > -1;--i)\n#define int(x) int x; scanf(\"%d\",&x)\n#define int2(x, y) int x, y; scanf(\"%d%d\",&x, &y)\n#define int3(x, y, z) int x, y, z; scanf(\"%d%d%d\",&x, &y, &z)\n#define scn(n, a) rep(i, n)cin >> a[i]\n#define sc2n(n, a, b) rep(i, n)cin >> a[i] >> b[i]\n#define pri(x) cout << x << \"\\n\"\n#define pri2(x, y) cout << x << \" \" << y << \"\\n\"\n#define pri3(x, y, z) cout << x << \" \" << y << \" \" << z << \"\\n\"\n#define pb push_back\n#define mp make_pair\n#define all(a) (a).begin(),(a).end()\n#define endl \"\\n\"\n#define kabe puts(\"---------------------------\")\n#define kara puts(\"\")\n#define debug(x) cout << \" --- \" << x << \"\\n\"\n#define debug2(x, y) cout << \" --- \" << x << \" \" << y << \"\\n\"\n#define debug3(x, y, z) cout << \" --- \" << x << \" \" << y << \" \" << z << \"\\n\"\n#define X first\n#define Y second\n#define eps 0.00000000001\n#define prid(x) printf(\"%.15lf\\n\", x)\n\nstruct vec{\n  double x, y;\n  vec operator+(const vec& a) const { return (vec){x + a.x, y + a.y}; }\n  vec operator-(const vec& a) const { return (vec){x - a.x, y - a.y}; }\n  vec sca(double t){ return (vec){t * x, t * y}; }\n  double dot(vec a){ return x * a.x + y * a.y; }\n  double cross(vec a){ return x * a.y - y * a.x; }\n  double norm(){ return sqrt(x * x + y * y); };\n};\nstruct line{\n  vec a, b;\n  vec getvec(){ return b - a; }\n  vec proj(vec p){\n    vec pa = p - a, ba = b - a;\n    double t = pa.dot(ba) / ba.dot(ba);\n    return a + ba.sca(t);\n  }\n  vec vref(vec p){ return proj(p).sca(2.0) - p; }\n  int ccw(vec p){\n    vec q = p - a, ba = b - a;\n    if(ba.cross(q) > 0)return 1; //ccw\n    if(ba.cross(q) < 0)return -1; //cw\n    if(ba.dot(q) < 0)return -2; //back\n    if(ba.dot(ba) < q.dot(q))return 2; //front\n    return 0; //on\n  }\n  bool paral(line l){\n    double res = abs(l.getvec().cross(getvec()));\n    return res < eps;\n  }\n  bool orth(line l){\n    double res = abs(l.getvec().dot(getvec()));\n    return res < eps;\n  }\n};\n\nsigned main(void){\n  int i, j, k;\n  int(q);\n  for(;q--;){\n    line l, m;\n    cin >> l.a.x >> l.a.y >> l.b.x >> l.b.y >> m.a.x >> m.a.y >> m.b.x >> m.b.y;\n    if(l.paral(m))puts(\"2\");\n    else if(l.orth(m))puts(\"1\");\n    else puts(\"0\");\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#pragma region Geometry\nconst double EPS=1e-8,PI=acos(-1);\ninline bool EQ(double a,double b){return fabs(b-a)<EPS;}\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) const {return Point{x+p.x,y+p.y};}\n    Point operator-(Point p) const {return Point{x-p.x,y-p.y};}\n    Point operator*(double t) const {return Point{x*t,y*t};}\n    Point operator*(Point p) const {return Point{x*p.x-y*p.y,x*p.y+y*p.x};}\n    Point operator/(double t) const {return Point{x/t,y/t};}\n    bool operator<(const Point &p) const {\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator==(const Point &p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n    friend istream &operator>>(istream &is,Point &p){\n        is >> p.x >> p.y;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Point p){\n        os << fixed << setprecision(10) << p.x << ' ' << p.y;\n        return os;\n    }\n};\n\nstruct Line{\n    Point a,b;\n    Line(){}\n    Line(Point a,Point b):a(a),b(b){}\n    friend istream &operator>>(istream &is,Line &l){\n        is >> l.a >> l.b;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Line l){\n        os << l.a << \" to \" << l.b;\n        return os;\n    }\n};\n\nstruct Segment:Line{\n    Segment(){}\n    Segment(Point a,Point b):Line(a,b){}\n};\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c,double r):c(c),r(r){}\n    friend istream &operator>> (istream &is,Circle &c){\n        is >> c.c >> c.r;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Circle &c){\n        os << c.c << ' ' << c.r;\n        return os;\n    }\n};\n\ntypedef vector<Point> Polygon;\nistream &operator>>(istream &is,Polygon &p){\n    for (int i=0;i<p.size();++i) is >> p[i];\n    return is;\n}\n\ndouble dot(const Point &a,const Point &b){\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(const Point &a,const Point &b){\n    return a.x*b.y-a.y*b.x;\n}\ndouble norm(const Point &a){\n    return a.x*a.x+a.y*a.y;\n}\ndouble abs(const Point &a){\n    return sqrt(norm(a));\n}\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_A\nPoint proj(const Line &l,const Point &p){\n    double t=dot(p-l.a,l.b-l.a)/norm(l.b-l.a);\n    return l.a+(l.b-l.a)*t;\n}\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_B\nPoint refl(const Line &l,const Point &p){\n    return p+(proj(l,p)-p)*2.0;\n}\n\nPoint rotate(const Point &p,double theta){\n    return Point(cos(theta)*p.x-sin(theta)*p.y,sin(theta)*p.x+cos(theta)*p.y);\n}\ndouble arg(const Point &p){\n    return atan2(p.y,p.x);\n}\ndouble get_angle(const Point &a,const Point &b,const Point &c){\n    const Point v=b-a,w=c-b;\n    double alpha=arg(v),beta=arg(w);\n    if (alpha>beta) swap(alpha,beta);\n    double theta=beta-alpha;\n    return min(theta,2*PI-theta);\n}\n\n// https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_C\nint ccw(const Point &a,Point b,Point c){\n    b=b-a,c=c-a;\n    if (cross(b,c)>EPS) return COUNTER_CLOCKWISE;\n    if (cross(b,c)<-EPS) return CLOCKWISE;\n    if (dot(b,c)<-EPS) return ONLINE_BACK;\n    if (norm(b)<norm(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool orthogonal(const Point &a,const Point &b){\n    return EQ(dot(a,b),0.0);\n}\nbool orthogonal(const Point &a,const Point &b,const Point &c,const Point &d){\n    return orthogonal(b-a,d-c);\n}\nbool orthogonal(const Line &l,const Line &m){\n    return EQ(dot(l.b-l.a,m.b-m.a),0.0);\n}\nbool parallel(const Point &a,const Point &b){\n    return EQ(cross(a,b),0.0);\n}\nbool parallel(const Point &a,const Point &b,const Point &c,const Point &d){\n    return parallel(b-a,d-c);\n}\nbool parallel(const Line &l,const Line &m){\n    return EQ(cross(l.b-l.a,m.b-m.a),0.0);\n}\n\nbool intersect(const Line &l,const Point &p){\n    return abs(ccw(l.a,l.b,p))!=1;\n}\nbool intersect(const Line &l,const Line &m){\n    return abs(cross(l.b-l.a,m.b-m.a)>EPS||abs(cross(l.b-l.a,m.b-m.a))<EPS);\n}\nbool intersect(const Line &l,const Segment &s){\n    return cross(l.b-l.a,s.a-l.a)*cross(l.b-l.a,s.b-l.a)<EPS;\n}\nbool intersect(const Segment &s,const Point &p){\n    return ccw(s.a,s.b,p)==0;\n}\nbool intersect(const Segment &s,const Segment &t){\n    return ccw(s.a,s.b,t.a)*ccw(s.a,s.b,t.b)<=0&&ccw(t.a,t.b,s.a)*ccw(t.a,t.b,s.b)<=0;\n}\nbool intersect(const Circle &c,const Line &l){\n    return (norm(proj(l,c.c)-c.c)-c.r*c.r)<=EPS;\n}\nint intersect(const Circle &c,const Segment &s){\n    if (norm(proj(s,c.c)-c.c)-c.r*c.r>EPS) return 0;\n    double d1=abs(c.c-s.a),d2=abs(c.c-s.b);\n    if (d1<c.r+EPS&&d2<c.r+EPS) return 0;\n    if (d1<c.r-EPS&&d2>c.r+EPS||d1>c.r+EPS&&d2<c.r-EPS) return 1;\n    const Point h=proj(s,c.c);\n    if (dot(s.a-h,s.b-h)<0) return 2;\n    return 0;\n}\nint intersect(Circle c,Circle d){\n    if (c.r<d.r) swap(c,d);\n    double dist=abs(c.c-d.c);\n    if (c.r+d.r<dist) return 4;\n    if (EQ(c.r+d.r,dist)) return 3;\n    if (c.r-d.r<dist) return 2;\n    if (EQ(c.r-d.r,dist)) return 1;\n    return 0;\n}\n\ndouble distance(const Point &a,const Point &b){\n    return abs(b-a);\n}\ndouble distance(const Line &l,const Point &p){\n    return abs(p-proj(l,p));\n}\ndouble distance(const Line &l,const Line &m){\n    return intersect(l,m)?0:distance(l,m.a);\n}\ndouble distance(const Segment &s,const Point &p){\n    Point h=proj(s,p);\n    return intersect(s,h)?abs(h-p):min(abs(s.a-p),abs(s.b-p));\n}\ndouble distance(const Segment &s,const Segment &t){\n    if (intersect(s,t)) return 0;\n    return min({distance(s,t.a),distance(s,t.b),distance(t,s.a),distance(t,s.b)});\n}\ndouble distance(const Line &l,const Segment &s){\n    return intersect(l,s)?0:min(distance(l,s.a),distance(l,s.b));\n}\n\nPoint crosspoint(const Line &l,const Line &m){\n    double d1=cross(l.b-l.a,m.b-m.a),d2=cross(l.b-l.a,l.b-m.a);\n    if (EQ(abs(d1),0.0)&&EQ(abs(d2),0.0)) return m.a;\n    return m.a+(m.b-m.a)*d2/d1;\n}\nPoint crosspoint(const Segment &s,const Segment &t){\n    assert(intersect(s,t));\n    return crosspoint(Line(s),Line(t));\n}\nvector<Point> crosspoint(const Circle &c,const Line &l){\n    Point pr=proj(l,c.c);\n    Point e=(l.b-l.a)/abs(l.b-l.a);\n    if (EQ(distance(l,c.c),c.r)) return {pr};\n    double base=sqrt(c.r*c.r-norm(pr-c.c));\n    return {pr-e*base,pr+e*base};\n}\nvector<Point> crosspoint(const Circle &c,const Segment &s){\n    Line l=Line(s);\n    assert(intersect(c,l));\n    auto res=crosspoint(c,l);\n    if (intersect(c,l)==2) return res;\n    if (dot(l.a-res[0],l.b-res[0])<0) res.emplace_back(res[0]);\n    else res.pop_back();\n    return res;\n}\nvector<Point> crosspoint(const Circle &c,const Circle &d){\n    double dist=abs(c.c-d.c);\n    double a=acos((c.r*c.r+dist*dist-d.r*d.r)/(2*c.r*dist));\n    double t=arg(d.c-c.c);\n    Point p1=c.c+Point(cos(t+a),sin(t+a))*c.r,p2=c.c+Point(cos(t-a),sin(t-a))*c.r;\n    return {p1,p2};\n}\n\nCircle circumcenter(Point a,Point b,const Point &c){\n    a=(a-c)*0.5;\n    b=(b-c)*0.5;\n    Point center=c+crosspoint(Line(a,a*Point{1,1}),Line{b,b*Point{1,1}});\n    return Circle{center,abs(a-center)};\n}\nvector<Point> center_given_radius(const Point &a,const Point &b,const double &r){\n    Point m=(b-a)*0.5;\n    double d1=abs(m);\n    vector<Point> res;\n    if (EQ(d1,0.0)||d1>r) return res;\n    double d2=sqrt(r*r-d1*d1);\n    Point n=m*Point{0.0,1.0}*d2/d1;\n    res.emplace_back(a+m+n);\n    if (d2>EPS) res.emplace_back(a+m-n);\n    return res;\n}\n\nbool convex(const Polygon &p){\n    int n=p.size();\n    for (int i=0;i<n;++i){\n        if (ccw(p[(i+n-1)%n],p[i],p[(i+1)%n])==-1){\n            return false;\n        }\n    }\n    return true;\n}\n\nPolygon convex_hull(Polygon p){\n    int n=p.size(),k=0;\n    if (n<=2) return p;\n    sort(p.begin(),p.end());\n    Polygon ch(2*n);\n    for (int i=0;i<n;ch[k++]=p[i++]){\n        while(k>=2&&cross(ch[k-1]-ch[k-2],p[i]-ch[k-1])<EPS) --k;\n    }\n    for (int i=n-2,t=k+1;i>=0;ch[k++]=p[i--]){\n        while(k>=t&&cross(ch[k-1]-ch[k-2],p[i]-ch[k-1])<EPS) --k;\n    }\n    ch.resize(k-1);\n    return ch;\n}\n\n#pragma endregion\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    int q; cin >> q;\n    for (;q--;){\n        Point p0,p1,p2,p3; cin >> p0 >> p1 >> p2 >> p3;\n        Line l1(p0,p1),l2(p2,p3);\n        bool para=parallel(l1,l2),orth=orthogonal(l1,l2);\n        if (para) cout << 2 << '\\n';\n        else if (orth) cout << 1 << '\\n';\n        else cout << 0 << '\\n';\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<iomanip>\n#include<cmath>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstruct Point{\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator + (Point p){ return Point(x+p.x, y+p.y); }\n    Point operator - (Point p){ return Point(x-p.x, y-p.y); }\n    Point operator * (double a){ return Point(a*x, a*y); }\n    Point operator / (double a){ return Point(x/a, y/a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x + y*y; }\n\n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment{\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\nint main(){\n    int q;\n    cin >> q;\n    while(q-- > 0){\n        double x[8];\n        for(int i = 0; i < 8; i++)  cin >> x[i];\n        Point a(x[0], x[1]);\n        Point b(x[2], x[3]);\n        Point c(x[4], x[5]);\n        Point d(x[6], x[7]);\n        int ans = 0;\n        if(isParallel(a,b,c,d)) ans = 2;\n        if(isOrthogonal(a,b,c,d))   ans = 1;\n        cout << ans << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <queue>\nusing namespace std;\n#define pb emplace_back\n#define fi first\n#define se second\n#define rep(i,n) for(int i=0; i<(n); ++i)\n#define err(...) fprintf(stderr, __VA_ARGS__)\n#define outl(x) cout << (x) << '\\n'\ntemplate<class A, class B>inline bool chmax(A &a, B b){return b>a ? a=b,1 : 0;}\ntemplate<class A, class B>inline bool chmin(A &a, B b){return b<a ? a=b,1 : 0;}\ninline bool inside(int y, int x, int H, int W){return(y>=0 && x>=0 && y<H && x<W);}\nconst int dx[] = {1, 0, -1, 0,  1, 1, -1, -1};\nconst int dy[] = {0, 1, 0, -1,  -1, 1, 1, -1};\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\nconstexpr int INF = 0x3f3f3f3f;\n\nconst double EPS = 1e-10;\n\nbool eq(const double &a, const double &b)\n{\n    return (fabs(a-b) < EPS);\n}\n\nstruct Vec\n{\n    double x, y;\n\n    inline explicit Vec(double x=0, double y=0): x(x), y(y) {};\n    inline Vec    operator - (void) const  { return Vec(-x, -y); }\n\n    inline Vec operator + (const Vec &v)       { return Vec(v.x+x, v.y+y); }\n    inline Vec operator - (const Vec &v)       { return Vec(v.x-x, v.y-y); }\n    inline Vec operator * (const double &a)    { return Vec(x*a, y*a);     }\n    inline Vec operator / (const double &a)    { return Vec(x/a, y/a);     }\n    inline double operator * (const Vec &v)    { return (x*v.x + y*v.y);   }\n    inline double operator % (const Vec &v)    { return (x*v.y - y*v.x);   }\n\n    inline Vec& operator += (const Vec &v)     { x += v.x;  y += v.y; return *this; }\n    inline Vec& operator -= (const Vec &v)     { x -= v.x;  y -= v.y; return *this; }\n    inline Vec& operator *= (const double &a)  { x *= a;    y *= a;   return *this; }\n    inline Vec& operator /= (const double &a)  { x /= a;    y /= a;   return *this; }\n\n    inline bool operator < (const Vec &v) const { return (x == v.x) ? (y < v.y) : (x < v.y); }\n    inline bool operator > (const Vec &v) const { return (x == v.x) ? (y > v.y) : (x > v.y); }\n\n    inline double norm(void) const { return x*x + y*y; }\n    inline double operator() (void) const  { return sqrt(norm()); } // 絶対値\n};\n\ntypedef Vec Point;\nstruct Line\n{\n    Point a, b;\n    explicit Line(Point a=Point(), Point b=Point()) : a(a), b(b) {}\n\n    Vec operator ~ (void) { return Vec(b.x-a.x, b.y-a.y); } // ベクトルを返す\n};\n\nistream& operator >> (istream &is, Point &p)\n{\n    is >> p.x >> p.y;\n    return is;\n}\n\nistream& operator >> (istream &is, Line &l)\n{\n    is >> l.a >> l.b;\n    return is;\n}\n\n\nsigned main()\n{\n    cin.tie(0), ios::sync_with_stdio(false);\n\n    int Q;\n    cin >> Q;\n    while (Q--) {\n        Line a, b;\n        cin >> a >> b;\n\n        Vec va = ~a;\n        Vec vb = ~b;\n\n        if (va % vb == 0) {\n            outl(2);\n        } else if (va * vb == 0) {\n            outl(1);\n        } else {\n            outl(0);\n        }\n    }\n\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <vector>\nusing namespace std;\nconst double EPS = 1e-10;\nbool equals(double a, double b) {\n\treturn fabs(a - b) < EPS;\n}\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point& rhs) {\n\t\treturn Point(x + rhs.x, y + rhs.y);\n\t}\n\tPoint operator - (Point& rhs) {\n\t\treturn Point(x - rhs.x, y - rhs.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k * x, k * y);\n\t}\n\tbool operator < (const Point& rhs) const {\n\t\treturn x != rhs.x ? x < rhs.x : y < rhs.y;\n\t}\n\tbool operator == (const Point& rhs) const {\n\t\treturn equals(x, rhs.x) && equals(y, rhs.y);\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n};\ntypedef Point Vector;\nstruct Segment {\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0);\n}\nbool isOrthogonal(Segment a, Segment b) {\n\treturn isOrthogonal(Vector(a.p2.x - a.p1.x, a.p2.y - a.p1.y), Vector(b.p2.x - b.p1.x, b.p2.y - b.p1.y));\n}\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0);\n}\nbool isParallel(Segment a, Segment b) {\n\treturn isParallel(Vector(a.p2.x - a.p1.x, a.p2.y - a.p1.y), Vector(b.p2.x - b.p1.x, b.p2.y - b.p1.y));\n}\nint main() {\n    int q;\n    scanf(\"%d\", &q);\n    while(q--) {\n    \tdouble x0, y0, x1, y1;\n    \tscanf(\"%lf%lf%lf%lf\", &x0, &y0, &x1, &y1);\n    \tSegment t1 = Segment(Point(x0, y0), Point(x1, y1));\n    \tscanf(\"%lf%lf%lf%lf\", &x0, &y0, &x1, &y1);\n    \tSegment t2 = Segment(Point(x0, y0), Point(x1, y1));\n    \tif (isParallel(t1, t2)) printf(\"2\\n\");\n    \telse if (isOrthogonal(t1, t2)) printf(\"1\\n\");\n    \telse printf(\"0\\n\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\nconst double FAC = 1e-18;\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(FAC), y(FAC) {}\n\n    Point(db _x, db _y) : x(_x + FAC), y(_y + FAC) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n\n    Point rotac() { return Point(-y, x); }\n    Point rotcl() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    void read() { cin >> x >> y; }\n    void write() { cout << '(' << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    // 1 -> On Counter-clockwise\n    // 2 -> On Clockwise\n    // 3 -> On Line BUT MAY NOT ON THE SEGMENT!\n    int relation(Point p)\n    {\n        int c = sgn((p - s) ^ (e - s));\n        if (c < 0)\n            return 1;\n        else if (c > 0)\n            return 2;\n        return 3;\n    }\n\n    bool checkOn(Point p) { return relation(p) == 3 && sgn((p - s) ^ (p - e)) <= 0; }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point crossP(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void write()\n    {\n        cout << \"Line:\\n\";\n        s.write();\n        e.write();\n    }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        Line l1, l2;\n        l1.read();\n        l2.read();\n        if (!l1.crossLL(l2))\n            cout << \"2\\n\";\n        else\n        {\n            auto d = abs(l1.angle() - l2.angle());\n            if (sgn(d - PI) > 0)\n                d -= PI;\n            if (!sgn(PI - 2 * d))\n                cout << \"1\\n\";\n            else\n                cout << \"0\\n\";\n        }\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y); \n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double a) {\n\t\treturn Point(a * x, a * y);\n\t}\n\tPoint operator / (double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n\nint main() {\n\tint i, q, x0, x1, x2, x3, y0, y1, y2, y3;\n\tcin >> q;\n\tfor (i = 0; i < q; i++) {\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tVector v1(x1 - x0, y1 - y0), v2(x3 - x2, y3 - y2);\n\t\tif (equals(dot(v1, v2), 0))cout << 1 << endl;\n\t\telse if (equals(cross(v1, v2), 0))cout << 2 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n \n#define EPS 0.00000000001L\n \n#define PI 3.141592653589793238462643383279L\n \nint main()\n{\n    int q, x1, y1, x2, y2, x3, y3, x4, y4;\n     \n    scanf(\"%d\", &q);\n     \n    for(int i = 0; i < q; i++)\n    {\n        scanf(\"%d\", &x1);\n        scanf(\"%d\", &y1);\n        scanf(\"%d\", &x2);\n        scanf(\"%d\", &y2);\n        scanf(\"%d\", &x3);\n        scanf(\"%d\", &y3);\n        scanf(\"%d\", &x4);\n        scanf(\"%d\", &y4);\n         \n        long double angle1 = atan2l(y2 - y1, x2 - x1);\n        long double angle2 = atan2l(y4 - y3, x4 - x3);\n         \n        long double sa = fabsl(angle2 - angle1);\n         \n        if(sa < -EPS) { sa += PI * 2.0; }\n \n        if((sa - EPS < PI * 0.5 && PI * 0.5 < sa + EPS) || (sa - EPS < PI * 1.5 && PI * 1.5 < sa + EPS))\n        {\n            printf(\"1\\n\");\n        }\n        else if((sa - EPS < PI && PI < sa + EPS) || (sa - EPS < 0.0 && 0.0 < sa + EPS))\n        {\n            printf(\"2\\n\");\n        }\n        else\n        {\n            printf(\"0\\n\");\n        }\n    }\n     \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define maxn 100005\n#define maxm 500005\n#define inf 0x7fffffff\n#define ll long long\n#define ld long double\n#define debug(x) cerr<<#x<<\": \"<<x<<endl\n#define fgx cerr<<\"--------------\"<<endl\n#define dgx cerr<<\"==============\"<<endl\n\nusing namespace std;\nstruct vc{\n\tld x,y;\n\tvc operator*(const ld b){vc t;t.x=x*b,t.y=y*b;return t;}\n};\nstruct pt{\n\tld x,y;\n\tpt operator+(const vc b){pt t;t.x=x+b.x,t.y=y+b.y;return t;}\n\tvc operator-(const pt b){vc t;t.x=x-b.x,t.y=y-b.y;return t;}\n};\n\ninline int read(){\n\tint x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0';\n\treturn x*f;\n}\n\ninline pt get(){pt t;t.x=read(),t.y=read();return t;}\ninline ld dot(vc a,vc b){return a.x*b.x+a.y*b.y;}\ninline ld cross(vc a,vc b){return a.x*b.y-a.y*b.x;}\n\nint main(){\n\tint Q=read();\n\twhile(Q--){\n\t\tpt a=get(),b=get(),c=get(),d=get();\t\t\n\t\tvc u=b-a,v=d-c; \n\t\tld x=dot(u,v),y=cross(u,v);\n\t\tif(x==0) printf(\"1\\n\");\n\t\telse if(y==0) printf(\"2\\n\");\n\t\telse printf(\"0\\n\");\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll, ll> lpair;\nconst ll MOD = 1e9 + 7;\nconst ll INF = 1e18;\n#define rep(i,m,n) for(ll i = (m); i < (n); i++)\n#define rrep(i,m,n) for(ll i = (m); i >= (n); i--)\n#define print(x) cout << (x) << endl;\n#define print2(x,y) cout << (x) << \" \" << (y) << endl;\n#define printa(x,n) for(ll i = 0; i < n; i++){ cout << (x[i]) << \" \";} cout<<endl;\n\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\ntypedef complex<double> P;\ndouble dot(P a, P b){ //内積\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\ndouble cross(P a, P b){ //外積\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\nbool is_orth(P a1, P a2, P b1, P b2){ //垂直か\n    return EQ(dot(a1 - a2, b1 - b2), 0.0);\n}\n\nbool is_para(P a1, P a2, P b1, P b2){ //平行か\n    return EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\nbool is_online(P a, P b, P c){ //cが線分上か\n    return (abs(a-c) + abs(c-b) < abs(a-b) + EPS);\n}\n\nbool distance_lp(P a, P b, P c){ //直線abと点cの距離\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\nbool is_intersect(P a1, P a2, P b1, P b2){ //線分の交差判定\n    return (cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS) && \n        (cross(b2-b1, a1-b1) * cross(b2-b1, a2-b1) < EPS);\n}\n\nP intersect_pos(P a1, P a2, P b1, P b2){ //直線同士の交点\n    P a = a2 - a1;\n    P b = b2 - b1;\n    return a1 + a * cross(b, b1 - a1) / cross(b, a);\n}\n\n#define printP(P) cout << \"(\" << P.real() << \", \" << P.imag() << \")\" << endl;\n\n\n\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    ll q;\n    cin >> q;\n    while(q--){\n        double x0, y0, x1, y1, x2, y2, x3, y3;\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        P p0(x0,y0), p1(x1, y1), p2(x2, y2), p3(x3, y3);\n        if(is_para(p0,p1,p2,p3)){\n            print(\"2\");\n        }else if(is_orth(p0,p1,p2,p3)){\n            print(\"1\");\n        }else{\n            print(\"0\");\n        }\n\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <complex>\n#include <map>\n#include <set>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <bitset>\n#include <algorithm>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\n#define Rep(b, e, i) for(int i = b; i <= e; i++)\n#define Repr(e, b, i) for(int i = e; i >= b; i--)\n#define rep(n, i) Rep(0, n-1, i)\n#define repr(n, i) Repr(n-1, 0, i)\n#define all(v) (v).begin(), (v).end()\n#define pb(v) push_back(v)\n#define uniq(v) (v).erase(unique(all(v)),(v).end())\n#define bitcnt(x) __builtin_popcount(x)\n#define fst first\n#define snd second\n#define Pqaz(T) priority_queue<T,vector<T>,greater<T>>\n#define Pqza(T) priority_queue<T>\n#define put(x) cout << x;\n#define puts(x) cout << x << ' ';\n#define putln(x) cout << x << endl;\n#define ENJYU std::ios::sync_with_stdio(false);std::cin.tie(0);\n\n\nvoid solve(void){\n\n\tint N;\n\tcin >> N;\n\n\twhile(N--)\n\t{\n\t\tint x1, x2, x3, x4, y1, y2, y3, y4;\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\n\t\tint dx1 = x1-x2, dy1 = y2-y1, dx2 = x4-x3, dy2 = y4-y3;\n\n\t\tif (dx1*dx2 + dy1*dy2 == 0)\n\t\t{\n\t\t\tcout << \"1\" << endl;\n\t\t}\n\t\telse if (dx1*dy2-dx2*dy1 == 0)\n\t\t{\n\t\t\tcout << \"2\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"0\" << endl;\n\t\t}\n\t}\n}\n\nint main(void){\n\tsolve();\n\t//cout << \"yui(*-v・)yui\" << endl;\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass point {\npublic:\n\tint x, y;\n\tpoint() {}\n\tpoint( int x_, int y_ ) :x(x_), y(y_) {}\n\tpoint operator -( point p ) { return point( x - p.x, y - p.y ); } \n};\n\nint main()\n{\n\tint q;\n\tcin >> q;\n\tfor( int i = 0; i < q; i++ ) {\n\t\tpoint p[4];\n\t\tfor( int j = 0; j < 4; j++ ) {\n\t\t\tint x, y;\n\t\t\tcin >> x >> y;\n\t\t\tp[j].x = x;\n\t\t\tp[j].y = y;\n\t\t}\n\n\t\tpoint v1 = p[1] - p[0];\n\t\tpoint v2 = p[3] - p[2];\n\t\tint ipro = v1.x * v2.x + v1.y * v2.y;\n\t\tint opro = v1.x * v2.y - v1.y * v2.x;\n\t\tint ans = 0;\n\t\tif( ipro == 0 ) ans = 1;\n\t\telse if( opro == 0 ) ans = 2;\n\t\tcout << ans << endl;\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define db double\nconst db eps = 1e-6;\nint sgn(db a, db b = 0) {\n\ta -= b;\n\treturn (a > eps) - (a < -eps);\n}\n\nstruct poi {\n\tdb x, y;\n\tvoid r() { cin >> x; cin >> y; }\n\tvoid w() { cout << x << ' ' << y << '\\n'; }\n\tpoi operator -(poi p) {\n\t\treturn {x - p.x, y - p.y};\n\t}\n\tpoi operator +(poi p) {\n\t\treturn {x + p.x, y + p.y};\n\t}\n\tpoi operator *(db d) {\n\t\treturn {x * d, y * d};\n\t}\n\tdb dot(poi p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb cross(poi p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb len2() { return x * x + y * y; }\n\tpoi proj(poi p, poi q) {\n\t\tdb s = (*this - p).dot(q - p) / (q - p).len2();\n\t\treturn p + (q - p) * s;\n\t}\n};\n\nint ccw(poi a, poi b, poi c) {\n\tpoi u = b - a, v = c - a;\n\tif(u.cross(v) > eps) return 1;\n\tif(u.cross(v) < -eps) return -1;\n\tif(u.dot(v) < -eps) return -2;\n\tif(u.len2() + eps < v.len2()) return 2;\n\treturn 0;\n}\n\nint main() {\n\tios :: sync_with_stdio(false);\n\n\tint T; cin >> T;\n\twhile(T --) {\n\t\tpoi p0, p1, p2, p3; p0.r(); p1.r(); p2.r(); p3.r();\n\t\tif(!sgn((p1 - p0).cross(p3 - p2)))\n\t\t\tcout << \"2\\n\";\n\t\telse if(!sgn((p1 - p0).dot(p3 - p2)))\n\t\t\t\tcout << \"1\\n\";\n\t\telse\n\t\t\t\tcout << \"0\\n\";\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for(int i=0; i<n; i++)\n#define rrep(i, n) for(int i=n-1; i>=0; i--)\n#define FOR(i, a, b) for(int i=a; i<b; i++)\n#define ALL(v) v.begin(),v.end()\n#define pb push_back\n#define eb emplace_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<int, ll> pil;\ntypedef pair<ll, int> pli;\ntypedef pair<ll, ll> pll;\nconst int INF = 1e9;\nconst ll LLINF = 1e18;\nconst ll MOD = 1e9+7;\nconst double EPS = 1e-10;\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }\n\nclass Point {\n    public:\n        double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator+ (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator- (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator* (double a) { return Point(x * a, y * a); }\n    Point operator/ (double a) { return Point(x / a, y / a); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator< (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator== (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\ntypedef Point Vector;\ntypedef Segment Line;\ntypedef vector<Point> Polygon;\n\nclass Circle {\n    public:\n        Point c;\n        double r;\n        Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ndouble dot(Vector v1, Vector v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\ndouble cross(Vector v1, Vector v2) {\n    return v1.x * v2.y - v1.y * v2.x;\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    Point x = project(s, p);\n    return p + (x - p) * 2;\n}\n\n#define equals(a,b) fabs(a-b)<EPS\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nint check(Vector a, Vector b) {\n    if (isParallel(a, b)) return 2;\n    if (isOrthogonal(a, b)) return 1;\n    return 0;\n}\n\n\nint main() {\n    int q; cin >> q;\n    rep(_, q) {\n        double x[4], y[4];\n        rep(i, 4) cin >> x[i] >> y[i];\n        Vector v1(Point(x[0], y[0]) - Point(x[1], y[1]));\n        Vector v2(Point(x[2], y[2]) - Point(x[3], y[3]));\n        cout << check(v1, v2) << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n// 平面幾何\n\n// 型変換\n//   double  -> Point\n//   Segment -> Line\n\n////////////////////\n// ライブラリ\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// 定数\nconst double EPS = 1e-9;\n////////////////////\n// 構造体\nstruct Point {\n  double x, y;\n  Point(const double d = 0.0) :x(d), y(d) {}\n  Point(const double x, const double y) :x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial = 0, const Point& terminal = 0) :initial(initial), terminal(terminal) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial = 0, const Point& terminal = 0) :initial(initial), terminal(terminal) {}\n  Line(const Segment& s) :initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// 実装\n// bool operator==(const Point& lhs, const Point& rhs) {return lhs.x == rhs.x && lhs.y == rhs.y;}\n// bool operator<(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x < rhs.x : lhs.y < rhs.y;}\n// bool operator>(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x > rhs.x : lhs.y > rhs.y;}\n// bool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\n// bool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\n// bool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// 点\ndouble norm(const Point& p) {return p.x * p.x + p.y * p.y;}\ndouble dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\ndouble cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / hypot(p.x, p.y);}\n// 線\nbool parallel(const Line& l1, const Line& l2) {return abs(cross(l2.terminal - l2.initial, l1.terminal - l1.initial)) <= EPS;}\nbool orthogonal(const Line& l1, const Line& l2) {return abs(dot(l2.terminal - l2.initial, l1.terminal - l1.initial)) <= EPS;}\n// 点の位置関係\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK}; \nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) < -EPS) return CLOCKWISE;\n  if(dot(v1, v2) < -EPS) return ONLINE_BACK;\n  if(norm(v2) - norm(v1) > EPS) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n// 交差判定\nbool intersect(const Point& p1, const Point& p2) {return p1.x == p2.x && p1.y == p2.y;}\nbool intersect(const Point& p, const Segment& s) {return norm(p - s.initial) + norm(p - s.terminal) - norm(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(l.terminal - p, l.initial - p);}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || parallel(l1, Line(l1.initial, l2.initial));}  // 非平行または同一直線上\n// 点移動\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// 距離\ndouble distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\ndouble distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\ndouble distance(const Segment& s, const Point& p) {return distance(p, s);}\ndouble distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\ndouble distance(const Line& l, const Point& p) {return distance(p, l);}\ndouble distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial),\n                                             distance(s1, s2.terminal),\n                                             distance(s2, s1.initial),\n                                             distance(s2, s1.terminal)});\n}\ndouble distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\ndouble distance(const Line& l,const Segment& s) {return distance(s, l);}\ndouble distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// 交点\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  double A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  double B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  if(std::abs(A) < EPS && std::abs(B) < EPS) return l2.initial;\n  assert(std::abs(A) > EPS);                                // 平行かつ同一直線上にない\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  Point cp = crosspoint(Line(s), l);\n  assert(intersect(s, cp));                                 // 2直線の交点が線分上にない\n  return cp;\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  Point cp = crosspoint(Line(s1), Line(s2));\n  assert(intersect(s1, cp) && intersect(s2, cp));           // 2直線の交点が線分上にない\n  return cp;\n}\n// デバッグ用\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(const Point& p) {cout<<\"(\"<<p.x<<\",\"<<p.y<<\")\";}\nvoid print(const Line& l) {print(l.initial); cout<<\" - \";print(l.terminal);}\n\n////////////////////////////////////////////////////////////////////////////////\n\nint main() {\n  int n;\n  for(cin >> n; n > 0; --n) {\n    int a, b, c, d, e, f, g, h;\n    cin >> a >> b >> c >> d >> e >> f >> g >> h;\n    Segment s(Point(a, b), Point(c, d));\n    Segment t(Point(e, f), Point(g, h));\n    cout << (parallel(s, t) ? 2 : (orthogonal(s, t) ? 1 : 0)) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <vector>\n#include <queue>\nusing namespace std;\nint n;\n\nstruct Point\n{\n    double x, y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator -(Point a)\n    {\n        return Point(x-a.x,y-a.y);\n    }\n};\ndouble cross(Point a,Point b)\n{\n    return a.x*b.y-b.x*a.y;\n}\ndouble dot(Point a,Point b)\n{\n    return a.x*b.x+a.y*b.y;\n}\nPoint p0,p1,p2,p3;\nvoid solve()\n{\n    if(dot(p1-p0,p3-p2)==0) printf(\"1\\n\");\n    else if(cross(p1-p0,p3-p2)==0) printf(\"2\\n\");\n    else printf(\"0\\n\");\n}\n\nint main()\n{\n//    freopen(\"in.txt\",\"r\",stdin);\n    scanf(\"%d\",&n);\n    while(n--)\n    {\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&p0.x,&p0.y,&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y);\n        solve();\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nstruct Point {\n    double x, y;\n    Point() {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) const { return Point(k * x, k * y); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n};\ndouble dot(const Point& a, const Point& b) { return a.x * b.x + a.y * b.y; }\ndouble cross(const Point& a, const Point& b) { return a.x * b.y - a.y * b.x; }\ndouble norm(const Point& a) { return sqrt(dot(a, a)); }\nPoint rot90(const Point& p) { return Point(p.y, -p.x); } // 時計回りに90度回転 \nbool equals(const Point& a, const Point& b) { return abs(a.x - b.x) < EPS && abs(a.y - b.y) < EPS; }\nPoint unit(const Point& p) { return p / norm(p); }\nostream& operator<<(ostream& os, const Point& p) { return os << \"(\" << p.x << \",\" << p.y << \")\"; }\n\nint ccw(Point a, Point b, Point c){\n    b = b - a; c = c - a;\n    if (cross(b, c) > EPS) return +1;      // a,b,cの順に反時計周り\n    if (cross(b, c) < -EPS) return -1;     // a,b,cの順に時計周り\n    if (dot(b, c) < 0) return +2;          // c--a--b 直線\n    if (norm(b) < norm(c)) return -2;      // a--b--c 直線\n    return 0;                              // a--c--b 直線\n}\n\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(const Point& a, const Point& b) : a(a), b(b) {}\n};\nbool contains(const Line& l, const Point& p) { return ccw(l.a, l.b, p) % 2 == 0; }\nbool parallel(const Line& s, const Line& t) { \n    Point u = s.b - s.a, v = t.b - t.a;\n    return abs(abs(dot(u, v)) - norm(u) * norm(v)) < EPS;\n}\nbool orthogonal(const Line& s, const Line& t) { return abs(dot(s.b - s.a, t.b - t.a)) < EPS; }\n\nistream& operator>>(istream& is, Point& p) { return is >> p.x >> p.y; }\nistream& operator>>(istream& is, Line& l) { return is >> l.a >> l.b; }\n\nint main() {\n    int Q; cin >> Q;\n    for (int i = 0; i < Q; i++) {\n        Line s, t;\n        cin >> s >> t;\n        if (parallel(s, t)) {\n            cout << 2 << endl;\n        } else if (orthogonal(s, t)) {\n            cout << 1 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n\n#define EPS 0.00000000001L\n\n#define PI 3.141592653589793238462643383279L\n\nint main()\n{\n    int q, x1, y1, x2, y2, x3, y3, x4, y4;\n    \n    scanf(\"%d\", &q);\n    \n    for(int i = 0; i < q; i++)\n    {\n        scanf(\"%d\", &x1);\n        scanf(\"%d\", &y1);\n        scanf(\"%d\", &x2);\n        scanf(\"%d\", &y2);\n        scanf(\"%d\", &x3);\n        scanf(\"%d\", &y3);\n        scanf(\"%d\", &x4);\n        scanf(\"%d\", &y4);\n        \n        long double angle1 = atan2l(y2 - y1, x2 - x1);\n        long double angle2 = atan2l(y4 - y3, x4 - x3);\n        \n        long double sa = fabsl(angle2 - angle1);\n        \n        if(sa < -EPS) { sa += PI * 2.0; }\n        \n        if(sa == PI * 0.5 || sa == PI * 1.5)\n        {\n            printf(\"1\\n\");\n        }\n        else if(sa == PI || sa == 0)\n        {\n            printf(\"2\\n\");\n        }\n        else\n        {\n            printf(\"0\\n\");\n        }\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <complex>\n#include <cmath>\n\nusing namespace std;\n\nstatic const double EPS=1e-12;\nstatic const double INF=1e24;\n\nusing Point=complex<double>;\nusing Plane=vector<Point>;\n\nbool operator<(const Point &a, const Point &b) {\n    return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b);\n}\n\ndouble cross_prod(const Point &a, const Point &b) {\n    return imag(conj(a)*b);\n}\n\ndouble dot_prod(const Point &a, const Point &b) {\n    return real(conj(a)*b);\n}\n\nstruct Line: public vector<Point> {\n    Line() {}\n    Line(const Point &a, const Point &b) {\n        push_back(a);\n        push_back(b);\n    }\n};\n\nstruct Circle {\n    Point p;\n    double r;\n    Circle() {}\n    Circle(const Point &p, const double r): p(p), r(r) {}\n};\n\nenum {\n    CROSSES,\n    ORTHOGONAL,\n    PARALLEL,\n};\n\nint rel_lines(const Line &l, const Line &m) {\n    if (abs(dot_prod(l[1]-l[0], m[1]-m[0])) < EPS) {\n        return ORTHOGONAL;\n    } else if (abs(cross_prod(l[1]-l[0], m[1]-m[0])) < EPS) {\n        return PARALLEL;\n    } else {\n        return CROSSES;\n    }\n}\n\nint main() {\n    size_t q;\n    scanf(\"%zu\", &q);\n    for (size_t i=0; i<q; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        Point p0(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p1(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p2(x, y);\n\n        scanf(\"%lf %lf\", &x, &y);\n        Point p3(x, y);\n\n        Line l(p0, p1), m(p2, p3);\n        printf(\"%d\\n\", rel_lines(l, m));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n \nconst double EPS = 1e-8, PI = acos(-1);\ninline bool eq(double a,double b){ return abs(b - a) < EPS; }\n#define curr(P,i) P[i]\n#define next(P,i) P[(i+1)%P.size()]\n#define prev(P,i) P[(i+P.size()-1) % P.size()]\nenum { OUT, ON, IN };\n \nstruct Geometory { // Geometory Library\n  struct Point {\n    double x, y;\n    Point(){};\n    Point(double x,double y):x(x),y(y){};\n    Point operator+(const Point& b) const { return Point(x + b.x,y + b.y); }\n    Point operator-(const Point& b) const { return Point(x - b.x,y - b.y); }\n    Point operator*(const double b) const { return Point(x * b,y * b); }\n    Point operator*(const Point& b) const { return Point(x * b.x - y * b.y,x * b.y + y * b.x); }\n    Point operator/(const double b) const { return Point(x / b,y / b); }\n    bool operator< (const Point& b) const { return x != b.x ? x < b.x : y < b.y; }\n    bool operator==(const Point& b) const { return eq(x,b.x) && eq(y,b.y); }\n    double norm(){ return x * x + y * y; }\n    double arg(){ return atan2(x,y); }\n    double abs(){ return sqrt(norm()); }\n    Point rotate(double theta){ return Point(cos(theta) * x - sin(theta) * y,sin(theta) * x + cos(theta) * y); }\n    Point rotate90(){ return Point(-y,x); }\n    friend ostream& operator<<(ostream& os, Point& p){ return os<<\"(\"<<p.x<<\",\"<<p.y<<\")\"; }\n    friend istream& operator>>(istream& is, Point& a){ return is>>a.x>>a.y; }\n  };\n \n  struct Line {\n    Point a, b;\n    Line(){};\n    Line(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Line& p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Line& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Segment {\n    Point a, b;\n    Segment(){};\n    Segment(Point a,Point b):a(a),b(b){};\n    friend ostream& operator<<(ostream& os, Segment& p){ return os<<\"(\"<<p.a.x<<\",\"<<p.a.y<<\") to (\"<<p.b.x<<\",\"<<p.b.y<<\")\"; }\n    friend istream& operator>>(istream& is, Segment& a){ return is>>a.a.x>>a.a.y>>a.b.x>>a.b.y; }\n  };\n  struct Circle {\n    Point p; double r;\n    Circle(){};\n    Circle(Point p, double r) : p(p),r(r){};\n  };\n  typedef vector< Point > Polygon;\n  typedef vector< Segment > Segments;\n  typedef vector< Line > Lines;\n  typedef vector< Circle > Circles;\n  typedef pair< Point, Point > PointPoint;\n \n  double cross(const Point& a,const Point& b){\n    return a.x * b.y - a.y * b.x;\n  }\n  double dot(const Point& a,const Point& b){\n    return a.x * b.x + a.y * b.y;\n  }\n \n  int ccw(const Point& a,Point b,Point c){\n    b = b - a, c = c - a;\n    if(cross(b,c) > 0)    return +1;  // a → b で 反時計方向におれて c\n    if(cross(b,c) < 0)    return -1; // a → b で 時計方向におれて c\n    if(dot(b,c) < 0)      return +2;  // c -- a -- bで一直線上\n    if(b.norm() < c.norm()) return -2; // a -- b -- cで一直線上\n    return 0;  // a -- c -- bで一直線上\n  }\n  Point Projection(const Line& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Projection(const Segment& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Reflection(const Line& l, const Point& p){\n    return p + (Projection( l, p) - p) * 2.0;\n  }\n \n  double Distance( const Line& l,const Point& p) { //OK\n    return (p - Projection( l, p)).abs();\n  }\n \n  bool Intersect(const Line& l, const Line& m){\n    return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b-l.a, m.b-l.a)) < EPS;\n  }\n  bool Intersect(const Line& l, const Segment& s){\n    return cross( l.b - l.a, s.a - l.a) * cross( l.b - l.a, s.b - l.a) < EPS;\n  }\n  bool Intersect(const Line& l, const Point& p){\n    return abs(ccw(l.a, l.b, p)) != -1;\n  }\n  bool Intersect(const Segment& s, const Segment& t){\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n  }\n  bool Intersect(const Segment& s, const Point& p){\n    return ccw(s.a, s.b, p) == 0;\n  }\n  bool Intersect(const Circle& c,const Line& l){\n    return Distance( l, c.p) <= c.r + EPS;\n  }\n  bool Intersect(const Circle& c,const Point& p){\n    return abs( ( p - c.p).abs() - c.r ) < EPS;\n  }\n  int Intersect(const Circle& c, const Segment& l){\n    if( (Projection( l, c.p) - c.p).norm() - c.r * c.r > EPS) return 0;\n    const double d1 = ( c.p - l.a).abs(), d2 = ( c.p - l.b).abs();\n    if( d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n    if( d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS ) return 1;\n    const Point h = Projection( l, c.p);\n    if( dot( l.a - h, l.b - h) < 0) return 2;\n    return 0;\n  }\n  bool Intersect(const Circle& a,const Circle& b){\n    return ( ( a.p - b.p).norm() - ( a.r + b.r) * ( a.r + b.r) < EPS) &&\n      ( ( a.p - b.p).norm() - ( a.r - b.r) * ( a.r - b.r) > -EPS);\n  }\n  double Distance(const Segment& s,const Point& p){\n    Point r = Projection(s, p);\n    if ( Intersect( s, r)) return ( r - p).abs();\n    return min( ( s.a - p).abs(), ( s.a - p).abs());\n  }\n  double Distance(const Segment& a,const Segment& b){\n    if(Intersect( a, b)) return 0;\n    return min( min( Distance( a, b.a), Distance( a, b.b)), min( Distance( b, a.a), Distance( b, a.b)));\n  }\n  double Distance(const Line& l,const Line& m) {\n    return Intersect( l, m) ? 0 : Distance( l, m.a);\n  }\n  double Distance(const Line& l,const Segment& s) { //OK\n    if (Intersect(l, s)) return 0;\n    return min(Distance(l, s.a), Distance(l, s.b));\n  }\n  double Distance(const Point& a,const Point& b){ //OK\n    return ( a - b).abs();\n  }\n  Point Crosspoint(const Segment& l,const Segment& m) { //OK\n    double A = cross(l.b - l.a, m.b - m.a);\n    double B = cross(l.b - l.a, l.b - m.a);\n    if (abs(A) < EPS && abs(B) < EPS) return m.a; // same line\n    return m.a + (m.b - m.a) * B / A;\n  }\n  PointPoint Crosspoint(const Circle& c,const Line l){\n    Point hp = Projection( l, c.p), h =  hp - c.p;\n    const double d2 = h.norm();\n    Point v = ( l.b - l.a) * sqrt( c.r * c.r - d2) / ( l.b - l.a).abs();\n    return PointPoint(hp - v, hp + v);\n  }\n  PointPoint Crosspoint(const Circle& c,const Segment& l) {\n    Line aa = Line( l.a, l.b);\n    if(Intersect(c, l) == 2) return Crosspoint(c, aa);\n    PointPoint ret = Crosspoint(c, aa);\n    if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n    else ret.first = ret.second;\n    return ret;\n  }\n  PointPoint Crosspoint(const Circle& c1,const Circle& c2){ //OK\n    double d = (c1.p - c2.p).abs();\n    double s = (c1.r + c2.r + d) / 2;\n    double S = sqrt( s * ( s - c1.r) * ( s - c2.r) * ( s - d));\n    double h = 2 * S / d;\n    Point v = ( c2.p - c1.p) / ( c2.p - c1.p).abs();\n    double m = sqrt( c1.r * c1.r - h * h);\n    return PointPoint( c1.p + v * m + Point(0,1) * h * v, c1.p + v * m - Point(0,1) * h * v);\n  }\n  bool parallel(const Line& a,const Line& b){\n    return abs(cross( a.b - a.a, b.b - b.a)) < EPS;\n  }\n  bool orthogonal(const Line& a,const Line& b){\n    return abs(dot( a.a - a.b, b.a - b.b)) < EPS;\n  }\n  int Contains(const Polygon& Q,const Point& p){\n    bool in = false;\n    for(int i = 0 ; i < Q.size() ; i++ ){\n      Point a = curr(Q,i) - p, b = next(Q,i) - p;\n      if(a.y > b.y) swap(a,b);\n      if(a.y <= 0 && 0 < b.y && cross(a,b) < 0) in = !in;\n      if(cross(a,b) == 0 && dot(a,b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n  }\n  bool Contains(const Circle& c,const Point& p){\n    return ( c.p - p).abs() < c.r + EPS;\n  }\n  double Area2(const Polygon& p){ //OK\n    double A = 0;\n    for (int i = 0; i < p.size(); ++i){\n      A += cross(curr(p, i), next(p, i));\n    }\n    return A;\n  }\n};\n \nGeometory geo;\ntypedef Geometory::Point P;\ntypedef Geometory::Line L;\ntypedef Geometory::Segment S;\ntypedef Geometory::Circle C;\n\nint main(){\n  int q;\n  L s1, s2;\n\n  cin >> q;\n  while(q--){\n    cin >> s1 >> s2;\n    if( geo.parallel( s1, s2)) cout << \"2\" << endl;\n    else if( geo.orthogonal( s1, s2)) cout << \"1\" << endl;\n    else cout << \"0\" << endl;\n  }\n  return(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\nint main()\n{\n    long long int xp0, xp1, xp2, xp3, yp0, yp1, yp3, yp2, diffx0, diffy0, diffx1, diffy1, test;\n    int res;\n    double m1, m2;\n    scanf(\"%lld\", &test);\n    while(test--)\n    {\n        scanf(\"%lld%lld%lld%lld%lld%lld%lld%lld\", &xp0, &yp0, &xp1, &yp1, &xp2, &yp2, &xp3, &yp3);\n        diffx0 = xp1 - xp0;\n        diffy0 = yp1 - yp0;\n        diffx1 = xp3 - xp2;\n        diffy1 = yp3 - yp2;\n        if(diffx0 == 0)\n        {\n            if(diffx1 == 0)\n            {\n                res = 2;\n            }\n            else if(diffy1 == 0)\n            {\n                res = 1;\n            }\n        }\n        else if(diffx1 == 0)\n        {\n            if(diffx0 == 0)\n            {\n                res = 2;\n            }\n            else if(diffy0 == 0)\n            {\n                res = 1;\n            }\n        }\n        else\n        {\n            m1 = (double)diffy0/diffx0;\n            m2 = (double)diffy1/diffx1;\n            if(m1 == m2)    res = 2;\n            else if(m1 * m2 == -1)  res = 1;\n            else res = 0;\n        }\n        printf(\"%d\\n\", res);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    int q;\n    int i;\n    int xp0[1000],yp0[1000],xp1[1000],yp1[1000],xp2[1000],yp2[1000],xp3[1000],yp3[1000];\n    double a_s1;\n    double a_s2;\n    int int_a_s11;\n    int int_a_s21;\n    int int_a_s12;\n    int int_a_s22;\n    int ans;\n    int ans_flg1;\n    int ans_flg2;\n\n    cin >> q;\n    for ( i = 0; i < q; ++i){\n        cin >> xp0[i] >> yp0[i] >> xp1[i] >> yp1[i] >> xp2[i] >> yp2[i] >> xp3[i] >> yp3[i];\n    }\n    \n    for ( i = 0; i < q; ++i){\n        ans_flg1 = 0;\n        ans_flg2 = 0;\n        if (xp1[i] == xp0[i]){\n            a_s1 = xp1[i];\n            ans_flg1 = 1;\n        }else if (yp1[i] == yp0[i]){\n            a_s1 = yp1[i];\n            ans_flg1 = 2;\n        }else{\n            a_s1 = (yp1[i] - yp0[i]) / (xp1[i]-xp0[i]);\n        }\n        \n        if (xp3[i] == xp2[i]){\n            a_s2 = xp3[i];\n            ans_flg2 = 1;\n        }else if (yp3[i] == yp2[i]){\n            a_s2 = yp3[i];\n            ans_flg2 = 2;\n        }else{\n            a_s2 = (yp3[i] - yp2[i]) / (xp3[i]-xp2[i]);\n        }\n        \n        ans = 0;\n        if (a_s1 == xp1[i] && a_s2 == xp3[i] && ans_flg1 == 1 && ans_flg2 == 1){\n            ans = 2;\n        }else if(a_s1 == yp1[i] && a_s2 == yp3[i] && ans_flg1 == 2 && ans_flg2 == 2){\n            ans = 2;\n        }else if(a_s1 == xp1[i] && a_s2 == yp3[i] && ans_flg1 == 1 && ans_flg2 == 2){\n            ans = 1;\n        }else if(a_s1 == yp1[i] && a_s2 == xp3[i] && ans_flg1 == 2 && ans_flg2 == 1){\n            ans = 1;\n        }else{\n            int_a_s11 = a_s1 * 1000;\n            int_a_s21 = a_s2 * 1000;\n            int_a_s21 = 1 /a_s2 * 1000;\n            if (int_a_s11 == int_a_s21){\n                //cout << int_a_s1 << \" \"<< int_a_s2 << endl;\n                ans = 2;\n            }else if(int_a_s11 == int_a_s22){\n                ans = 1;\n            }\n        }\n        \n        cout << ans << endl;\n        \n    }\n    /*\n    for ( i = 0; i < q; ++i){\n        cout << xp0 << endl;\n        cout << yp0 << endl;\n        cout << xp1 << endl;\n        cout << yp1 << endl;\n        cout << xp2 << endl;\n        cout << yp2 << endl;\n        cout << xp3 << endl;\n        cout << yp3 << endl;\n    }\n    */\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n\nint main(){\n    int q;\n    long x[4], y[4];\n    long s1x, s1y, s2x, s2y;\n    \n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; ++i) {\n        for (int j = 0; j < 4; ++j){\n            scanf(\"%ld %ld\", &x[j], &y[j]);\n        }\n        \n        s1x = x[1] - x[0];\n        s2x = x[3] - x[2];\n        s1y = y[1] - y[0];\n        s2y = y[3] - y[2];\n        \n        if (s1x * s2y - s1y * s2x == 0) puts(\"2\");\n        else if (s1x * s2x + s1y * s2y == 0) puts(\"1\");\n        else puts(\"0\");\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n\n#define EPS 0.00000000001L\n\n#define PI 3.141592653589793238462643383279L\n\nint main()\n{\n    int q, x1, y1, x2, y2, x3, y3, x4, y4;\n    \n    scanf(\"%d\", &q);\n    \n    for(int i = 0; i < q; i++)\n    {\n        scanf(\"%d\", &x1);\n        scanf(\"%d\", &y1);\n        scanf(\"%d\", &x2);\n        scanf(\"%d\", &y2);\n        scanf(\"%d\", &x3);\n        scanf(\"%d\", &y3);\n        scanf(\"%d\", &x4);\n        scanf(\"%d\", &y4);\n        \n        long double angle1 = atan2l(y2 - y1, x2 - x1);\n        long double angle2 = atan2l(y4 - y3, x4 - x3);\n        \n        long double sa = fabsl(angle2 - angle1);\n        \n        if(sa < -EPS) { sa += PI * 2.0; }\n\n        if((sa - EPS < PI * 0.5 && PI * 0.5 < sa + EPS) || (sa - EPS < PI * 1.5 && PI * 1.5 < sa + EPS))\n        {\n            printf(\"1\\n\");\n        }\n        else if((sa - EPS < PI && PI < sa + EPS) || (sa - EPS < 0.0 && 0.0 < sa + EPS))\n        {\n            printf(\"2\\n\");\n        }\n        else\n        {\n            printf(\"0\\n\");\n        }\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <string>\n#include <sstream>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <functional>\n#include <bitset>\n#include <deque>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef long double LD;\n\n#define rep(i, a, b) for(int i = a; i <= b; ++i)\n#define dow(i, a, b) for(int i = a; i >= b; --i)\n#define mem(a) memset(a, 0, sizeof(a))\n#define mst(a, b) memset(a, b, sizeof(a))\n#define sfi(a) scanf(\"%d\", &a)\n#define sfl(a) scanf(\"%lld\", &a)\n#define sfd(a) scanf(\"%lf\", &a)\n#define sfs(a) scanf(\"%s\", a)\n#define pb(a) push_back(a)\n#define sync ios::sync_with_stdio(0); cin.tie(0);\n\nconst int MAX = 1e2 + 5;\nconst int L = 2;\nconst LL MOD = 10000;\nconst int dir[MAX][MAX] = {{0,1},{0,-1},{1,0},{-1,0},{-1,-1},{-1,1},{1,1},{1,-1}};\n\nconst double EPS = 1e-8;\nconst double PI = acos(-1.0);\n\ntypedef struct Point Point;\ntypedef struct Line Line;\n\nint cmp(double x);\ndouble sqr(double x);\ndouble det(Point a, Point b);\ndouble dot(Point a, Point b);\ndouble dist(Point a, Point b);\nPoint rotate_point(Point p, double A);\nbool parallel(Line a, Line b);\nbool orthogonal(Line a, Line b);\n\nstruct Point\n{\n\tdouble x, y;\n\tPoint() {}\n\tPoint(double a, double b): x(a), y(b) {}\n\n\tfriend Point operator -(Point a, Point b)\n\t{\n\t\treturn Point(a.x-b.x,a.y-b.y);\n\t}\n\tfriend Point operator +(Point a, Point b)\n\t{\n\t\treturn Point(a.x+b.x,a.y+b.y);\n\t}\n\tfriend bool operator ==(Point a, Point b)\n\t{\n\t\treturn cmp(a.x-b.x)==0 && cmp(a.y-b.y)==0;\n\t}\n\tfriend Point operator *(Point a, double b)\n\t{\n\t\treturn Point(a.x*b,a.y*b);\n\t}\n\tfriend Point operator *(double a, Point b)\n\t{\n\t\treturn Point(a*b.x,a*b.y);\n\t}\n\tfriend Point operator /(Point a, double b)\n\t{\n\t\treturn Point(a.x/b,a.y/b);\n\t}\n\tdouble norm()\n\t{\n\t\treturn sqrt(sqr(x)+sqr(y));\n\t}\n};\n\nstruct Line\n{\n\tPoint a, b;\n\tLine() {}\n\tLine(Point x, Point y): a(x), b(y) {}\n};\n\nbool parallel(Line a, Line b)\n{\n\treturn !cmp(det(a.a-a.b,b.a-b.b));\n}\n\t\nbool orthogonal(Line a, Line b)\n{\n\treturn !cmp(dot(a.a - a.b, b.a - b.b));\n}\n\nint cmp(double x)\n{\n\tif(abs(x) < EPS)\n\t\treturn 0;\n\tif(x > 0)\n\t\treturn 1;\n\treturn -1;\n}\n\ndouble sqr(double x)\n{\n\treturn x * x;\n}\n\ndouble det(Point a, Point b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\n\ndouble dot(Point a, Point b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble dist(Point a, Point b)\n{\n\treturn (a-b).norm();\n}\n\nPoint rotate_point(Point p, double A)\n{\n\tdouble tx = p.x, ty = p.y;\n\treturn Point(tx*cos(A)-ty*sin(A),tx*sin(A)+ty*cos(A));\n}\n\nint main()\n{\t\n#ifdef LOCAL\n\t//~ freopen(\"in.txt\", \"r\", stdin);\n#endif\n\n\tint T;\n\tsfi(T);\n\twhile(T--)\n\t{\n\t\tLine a, b;\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\", &a.a.x, &a.a.y, &a.b.x, &a.b.y, &b.a.x, &b.a.y, &b.b.x, &b.b.y);\n\t\tif(parallel(a, b))\n\t\t\tputs(\"2\");\n\t\telse if(orthogonal(a, b))\n\t\t\tputs(\"1\");\n\t\telse\n\t\t\tputs(\"0\");\n\t\t\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#pragma GCC optimize(\"Ofast\", \"unroll-loops\")\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define ld long double\n\n/* 幾何ライブラリ */\n\n// 定数\nconstexpr ld PI = 3.14159265358979323846L;\nconstexpr ld PI_2 = 2 * PI;\nconst ld e = 1e-15; // 許容誤差\n\n// 2次元座標, 2次元ベクトル\nusing pos = pair<ld, ld>;\n\n// 加算\npos add(pos p1, pos p2) {\n\treturn { p1.first + p2.first, p1.second + p2.second };\n}\n// 減算\npos sub(pos p1, pos p2) {\n\treturn { p1.first - p2.first, p1.second - p2.second };\n}\n// 内積\nld inner_product(pos p1, pos p2) {\n\treturn p1.first * p2.first + p1.second * p2.second;\n}\n// 定数倍\npos mul(ld c, pos p) {\n\treturn { c * p.first, c * p.second };\n}\n\n// ノルムの2乗\nld norm2(pos p) {\n\treturn p.first * p.first + p.second * p.second;\n}\n// ノルム\nld norm(pos p) {\n\treturn sqrt(norm2(p));\n}\n\n// 平行判定\nbool is_parallel(pos v1, pos v2) {\n\treturn abs(v1.first * v2.second - v1.second * v2.first) < e;\n}\n// 直行判定\nbool is_orthogonal(pos v1, pos v2) {\n\treturn abs(inner_product(v1, v2)) < e;\n}\n\n// 射影\n// pをp1, p2を通る直線に射影する\n// 検証済み(https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/all/CGL_1_A)\npos projection(pos p1, pos p2, pos p) {\n\tpos q = sub(p2, p1);\n\tpos tmp = mul(inner_product(q, sub(p, p1)) / norm2(q), q);\n\treturn add(p1, tmp);\n}\n\n// 反射\n// pをp1, p2を通る直線に関して対称移動する\n// 検証済み(https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/all/CGL_1_B)\npos reflection(pos p1, pos p2, pos p) {\n\tpos tmp = projection(p1, p2, p);\n\treturn add(p, mul(2.0, sub(tmp, p)));\n}\n\n// 位置関係\n// p0を基準に、p1, p2の位置関係を求める\n// p2が\n//\tp1から反時計回り方向 : COUNTER_CLOCKWISE\n//\tp1から時計回り方向 : CLOCKWISE\n//\tp1と反対方向(p2, p0, p1がこの順に同一直線上) : ONLINE_BACK\n//\tp1の延長線上(p0, p1, p2がこの順に同一直線上) : ONLINE_FRONT\n//\tp1の途中(線分p0p1の上) : ON_SEGMENT\n// 検証済み(https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/all/CGL_1_C)\nstring positional_relation(pos p0, pos p1, pos p2) {\n\tpos v1 = sub(p1, p0), v2 = sub(p2, p0);\n\tif (abs(v2.first) < e && abs(v2.second) < e) return \"ON_SEGMENT\";\n\tld r1 = atan2l(v1.second, v1.first), r2 = atan2l(v2.second, v2.first);\n\tif (abs(r1 - r2) < e || (abs(r1 - r2) > PI - e && abs(r1 - r2) < PI + e)) { // ONLINE\n\t\tif (v1.first * v2.first < 0 || v1.second * v2.second < 0)\n\t\t\treturn \"ONLINE_BACK\";\n\t\tif (abs(v1.first) < abs(v2.first) || abs(v1.second) < abs(v2.second))\n\t\t\treturn \"ONLINE_FRONT\";\n\t\treturn \"ON_SEGMENT\";\n\t}\n\t// NOT ONLINE\n\tif (r2 - r1 + (r2 - r1 < 0 ? PI_2 : 0) < PI)\n\t\treturn \"COUNTER_CLOCKWISE\";\n\treturn \"CLOCKWISE\";\n}\n\n\n\nint main() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tpos p0, p1, p2, p3;\n\t\tcin >> p0.first >> p0.second;\n\t\tcin >> p1.first >> p1.second;\n\t\tcin >> p2.first >> p2.second;\n\t\tcin >> p3.first >> p3.second;\n\t\tpos v1 = sub(p0, p1), v2 = sub(p2, p3);\n\t\tif (is_parallel(v1, v2)) cout << 2 << endl;\n\t\telse if (is_orthogonal(v1, v2)) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\n#include <iostream>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\nclass Point{\nprivate:\n    double x_;\n    double y_;\npublic:\n    Point();\n\tPoint(double x, double y);\n\tPoint(const Point& P);\n\n    ~Point();\n    Point& operator=(const Point &P);\n\tPoint& operator+(const Point &P);\n    Point& operator+(double k);\n\tPoint& operator-(const Point &P);\n    Point& operator-(double k);\n\n\t//?????????\n\tPoint& operator*(double k);\n\n    void disp(){\n        //printf(\"%3f %3f\\n\", x_, y_);\n        cout << x_ << \" \" << y_ << endl;}\n    double length(){return x_*x_ + y_*y_;};\n    double cross(Point Q){return x_*Q.y() - Q.x()*y_;};\n    double dot(Point Q){return x_*Q.x() + y_*Q.y();};\n\n    inline double x() const {return x_;}\n    inline double y() const {return y_;}\n};\n\n\nPoint::Point():\n\tx_(0.0),\n\ty_(0.0)\n{\n\n}\n\nPoint::Point(double x, double y):\n\tx_(x),\n\ty_(y)\n{\n\n}\n\nPoint::Point(const Point& P):\n    x_(0.0),\n    y_(0.0)\n{\n\tthis->operator=(P);\n}\n\nPoint::~Point(){\n\n}\n\nPoint& Point::operator=(const Point &P){\n\tthis->x_ = P.x_;\n\tthis->y_ = P.y_;\n\treturn *this;\n}\n\nPoint& Point::operator+(const Point &P){\n\tx_ += P.x_;\n\ty_ += P.y_;\n\treturn *this;\n}\n\nPoint& Point::operator+(double k){\n\tx_ += k;\n\ty_ += k;\n\treturn *this;\n}\n\nPoint& Point::operator-(const Point &P){\n\tx_ -= P.x_;\n\ty_ -= P.y_;\n\treturn *this;\n}\n\nPoint& Point::operator-(double k){\n\tx_ -= k;\n\ty_ -= k;\n\treturn *this;\n}\n\n\nPoint& Point::operator*(double k){\n\tx_ *= k;\n\ty_ *= k;\n\treturn *this;\n}\n\n\n\n\n\nint main(){\n    int n;\n    double a,b,c,d,e,f,g,h;\n    cin >> n;\n    for(int i=0; i<n; i++){\n        cin >> a >> b >> c >> d >> e >> f >> g >> h;\n        Point P(c-a, d-b);\n        Point Q(g-e, h-f);\n        if(P.cross(Q)==0) cout << 2 << endl;\n        else{\n            if(P.dot(Q)==0) cout << 1 << endl;\n            else cout << 0 << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    int q;\n    int i;\n    int xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3;\n    double a_s1;\n    double a_s2;\n    int int_a_s11;\n    int int_a_s21;\n    int int_a_s12;\n    int int_a_s22;\n    int ans;\n    int ans_flg1;\n    int ans_flg2;\n\n    cin >> q;\n    for ( i = 0; i < q; ++i){\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n\n        ans_flg1 = 0;\n        ans_flg2 = 0;\n        if (xp1 == xp0){\n            a_s1 = xp1;\n            ans_flg1 = 1;\n        }else if (yp1 == yp0){\n            a_s1 = yp1;\n            ans_flg1 = 2;\n        }else{\n            a_s1 = (yp1 - yp0) / (xp1-xp0);\n        }\n        \n        if (xp3 == xp2){\n            a_s2 = xp3;\n            ans_flg2 = 1;\n        }else if (yp3 == yp2){\n            a_s2 = yp3;\n            ans_flg2 = 2;\n        }else{\n            a_s2 = (yp3 - yp2) / (xp3-xp2);\n        }\n        \n        ans = 0;\n        if (a_s1 == xp1 && a_s2 == xp3 && ans_flg1 == 1 && ans_flg2 == 1){\n            ans = 2;\n        }else if(a_s1 == yp1 && a_s2 == yp3 && ans_flg1 == 2 && ans_flg2 == 2){\n            ans = 2;\n        }else if(a_s1 == xp1 && a_s2 == yp3 && ans_flg1 == 1 && ans_flg2 == 2){\n            ans = 1;\n        }else if(a_s1 == yp1 && a_s2 == xp3 && ans_flg1 == 2 && ans_flg2 == 1){\n            ans = 1;\n        }else{\n            int_a_s11 = a_s1 * 1000;\n            int_a_s21 = a_s2 * 1000;\n            int_a_s21 = 1 /a_s2 * 1000;\n            if (int_a_s11 == int_a_s21){\n                ans = 2;\n            }else if(int_a_s11 == int_a_s22){\n                ans = 1;\n            }\n        }\n        \n        printf(\"%d\\n\",ans);\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iomanip>\n#include<limits>\n#include<thread>\n#include<utility>\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<numeric>\n#include<cassert>\n#include<random>\n#include<chrono>\n#include<unordered_map>\n#include<list>\nusing namespace std;\ntypedef unsigned long long int ull;\ntypedef long long int ll;\ntypedef pair<ll,ll> pll;\ntypedef pair<int,int> pi;\ntypedef pair<double,double> pd;\ntypedef pair<double,ll> pdl;\n#define F first\n#define S second\n#define MK make_pair\nconst ll E=1e18+7;\nconst ll MOD=1000000007;\n\ntemplate<typename T> //double or long long\nclass Geometry{\nprivate:\n    typedef pair<T,T> point;\n    typedef point Vector;\n    typedef pair<point,point> line;\n    vector<point> P;\n    \npublic:\n    Geometry(vector<point> P={}):P(P){}\n    \n    void add_point(point p){P.push_back(p);}\n    \n    void Sort(){\n        sort(P.begin(),P.end());\n    }\n    \n    //from first,to second\n    Vector line_Vector(line a){\n        return {a.S.F-a.F.F,a.S.S-a.F.S};\n    }\n    \n    T dot(line a,line b){\n        return dot(line_Vector(a),line_Vector(b));\n    }\n    \n    T dot(Vector a,Vector b){\n        return a.F*b.F+a.S*b.S;\n    }\n    \n    T cross(line a,line b){\n        return cross(line_Vector(a),line_Vector(b));\n    }\n    \n    T cross(Vector a,Vector b){\n        return a.F*b.S-a.S*b.F;\n    }\n    \n    T norm(line a){\n        return dot(a,a);\n    }\n    \n    T norm(Vector a){\n        return dot(a,a);\n    }\n    \n    double abs(line a){\n        return sqrt(norm(a));\n    }\n    \n    double abs(Vector a){\n        return sqrt(norm(a));\n    }\n    \n    vector<point> convex_hull(){\n        assert(P.size()>=3);\n        vector<point> a=P;\n        sort(a.begin(),a.end());\n        vector<point> up;\n        up.push_back(a[0]);\n        up.push_back(a[1]);\n        for(int i=2;i<a.size();i++){\n            point p=a[i];\n            while(up.size()>=2 && cross({up[up.size()-2],up[up.size()-1]},{up[up.size()-1],p})>=0){\n                up.pop_back();\n            }\n            up.push_back(p);\n        }\n        reverse(a.begin(),a.end());\n        vector<point> down;\n        down.push_back(a[0]);\n        down.push_back(a[1]);\n        for(int i=2;i<a.size();i++){\n            point p=a[i];\n            while(down.size()>=2 && cross({down[down.size()-2],down[down.size()-1]},{down[down.size()-1],p})>=0){\n                down.pop_back();\n            }\n            down.push_back(p);\n        }\n        vector<point> ret;\n        for(int i=0;i<up.size();i++){\n            ret.push_back(up[i]);\n        }\n        for(int i=1;i<down.size()-1;i++){\n            ret.push_back(down[i]);\n        }\n        return ret;\n    }\n    \n    double max_dist(){\n        vector<point> P=convex_hull();\n        T mx=0;\n        ll where=0;\n        for(int i=0;i<P.size();i++){\n            if(norm({P[0],P[i]})>=mx){mx=norm({P[0],P[i]}); where=i;}\n        }\n        mx=0;\n        for(int i=0;i<P.size();i++){\n            while(norm({P[i],P[where]})<=norm({P[i],P[(where+1)%P.size()]})){\n                where=(where+1)%P.size();\n            }\n            mx=max(mx,norm({P[i],P[where]}));\n        }\n        return sqrt(mx);\n    }\n};\n\n\n\nint main(){\n    Geometry<ll> G;\n    ll q;\n    cin>>q;\n    while(q--){\n    ll x,y;\n    ll xd,yd;\n    cin>>x>>y>>xd>>yd;\n    x-=xd;\n    y-=yd;\n    ll x2,y2;\n    cin>>x2>>y2>>xd>>yd;\n    x2-=xd;\n    y2-=yd;\n    if(G.dot({x,y},{x2,y2})==0){cout<<1<<endl;}\n    else if(G.cross({x,y},{x2,y2})==0){cout<<2<<endl;}\n    else{cout<<0<<endl;}\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nvoid vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならばfalseを返す*/\nbool intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n\n\nint main(int argc, const char * argv[]){\n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        double x1,x2,x3,x4,y1,y2,y3,y4;\n        cin>>x1>>y1>>x2>>y2>>x3>>y3>>x4>>y4;\n        double a1,b1,c1,a2,b2,c2;\n        straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n        straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n        int ans = judges_whether_parallel_or_perpendicular(a1, b1, c1, a2, b2, c2);\n        cout<<ans<<endl;\n        \n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n// 総数を1000000007で割った余り\nconst long long mod = 1e9 + 7;\n\nusing ll  = long long;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\n#define ull unsigned long long\n#define ld long double\n#define vi vector<int>\n#define vll vector<ll>\n#define vc vector<char>\n#define vs vector<string>\n#define vpii vector<pii>\n#define vpll vector<pll>\n\n#define rep(i, n) for (int i = 0, i##_len = (n); i < i##_len; i++)\n#define rep1(i, n) for (int i = 1, i##_len = (n); i <= i##_len; i++)\n#define repr(i, n) for (int i = ((int)(n)-1); i >= 0; i--)\n#define rep1r(i, n) for (int i = ((int)(n)); i >= 1; i--)\n\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n#define rall(x) (x).rbegin(), (x).rend()\n\n#define SORT(v, n) sort(v, v + n);\n// #define SORT(v, n) stable_sort(v, v + n);\n#define VSORT(v) sort(v.begin(), v.end());\n#define RSORT(x) sort(rall(x));\n#define pb push_back\n#define mp make_pair\n\n#define INF (1e9)\n#define PI (acos(-1))\n#define EPS (1e-7)\n\null gcd(ull a, ull b) { return b ? gcd(b, a % b) : a; }\null lcm(ull a, ull b) { return a / gcd(a, b) * b; }\n\nint main() {\n    int    q;\n    double x1, x2, x3, x4, y1, y2, y3, y4, slope1, slope2, naiseki;\n\n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++) {\n        scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &x1, &y1, &x2, &y2, &x3, &y3,\n              &x4, &y4);\n        if (x1 == x2 && x3 == x4) {\n            printf(\"2\\n\");\n        } else if (x1 == x2 && x3 != x4) {\n            if (y3 == y4)\n                printf(\"1\\n\");\n            else {\n                printf(\"0\\n\");\n            }\n        } else if (x1 != x2 && x3 == x4) {\n            if (y1 == y2)\n                printf(\"1\\n\");\n            else {\n                printf(\"0\\n\");\n            }\n        } else {\n            slope1  = (y2 - y1) / (x2 - x1);\n            slope2  = (y4 - y3) / (x4 - x3);\n            naiseki = (x2 - x1) * (x4 - x3) + (y2 - y1) * (y4 - y3);\n            if (fabs(slope1 - slope2) < 0.00000001) {\n                printf(\"2\\n\");\n            } else if (fabs(naiseki) < 0.00000001) {\n                printf(\"1\\n\");\n            } else {\n                printf(\"0\\n\");\n            }\n        }\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <vector>\n#include <cfloat>\n#include <string>\n#include <cmath>\n#include <set>\n#include <cstdlib>\n#include <map>\n#include <ctime>\n#include <iomanip>\n#include <functional>\n#include <deque>\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <cstdio>\n#include <stack>\n#include <climits>\n#include <sys/time.h>\n#include <cctype>\n\nusing namespace std;\n\ntypedef long long ll;\n\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(a*x, a*y); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double norm() { return x*x+y*y; }\n  double abs() { return sqrt(norm()); }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\ntypedef vector <Vector> Polygon;\n\nclass Segment {\n public:\n  Point p1, p2;\n\n  Segment(Point p1 = Point(), Point p2 = Point()): p1(p1), p2(p2) {}\n};\n\ndouble norm(Vector a) {\n  return a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a) {\n  return sqrt(norm(a));\n}\n\n// ?????????|a||b|cos\ndouble cross(Vector a, Vector b) {\n  return a.x*b.y-a.y*b.x;\n}\n// ?????????|a||b|sin\ndouble dot(Vector a, Vector b) {\n  return a.x*b.x+a.y*b.y;\n}\n\n// 1:???????¨??????? -1:????¨??????? 2:p2-p0-p1 -2:p0-p1-p2 0:p2???p0-p1???\nint ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if (cross(a, b) > EPS) return 1;\n  if (cross(a, b) < -EPS) return -1;\n  if (dot(a, b) < -EPS) return 2;\n  if (a.norm() < b.norm()) return -2;\n\n  return 0;\n}\n\n// ??´?????????\nbool isOrthogonal(Vector a, Vector b) {\n  return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n  return isOrthogonal(a1-a2, b1-b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n  return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// ????????????\nbool isParallel(Vector a, Vector b) {\n  return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n  return isParallel(a1-a2, b1-b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n  return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n\nint main() {\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++) {\n    Segment s1, s2;\n    cin >> s1.p1.x >> s1.p1.y >> s1.p2.x >> s1.p2.y\n        >> s2.p1.x >> s2.p1.y >> s2.p2.x >> s2.p2.y;\n    if (isParallel(s1, s2)) {\n      cout << \"2\" << endl;\n    }else if (isOrthogonal(s1, s2)) {\n      cout << \"1\" << endl;\n    }else {\n      cout << \"0\" << endl;\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-9;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        double cost = dot(p[1] - p[0], p[3] - p[2]) / (abs(p[1] - p[0]) * abs(p[3] - p[2]));\n        if(fabs(cost) < EPS) cout << 1 << endl;\n        else if(fabs(cost) > 1 - EPS) cout << 2 << endl;\n        else cout << 0 << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<algorithm>\n#include<iostream>\n#include<vector>\n#include<climits>\n#include<cfloat>\n#define curr(P, i) P[(i) % P.size()]\n#define next(P, i) P[(i+1) % P.size()]\n#define prev(P, i) P[(i+P.size()-1) % P.size()]\n\n\nusing namespace std;\n\ntypedef double Real;\n\nReal EPS = 1e-8;\nconst Real PI = acos(-1);\n\nint sgn(Real a, Real b=0){return a<b-EPS?-1:a>b+EPS?1:0;}\nReal sqr(Real a){return sqrt(max(a,(Real)0));}\n\nstruct Point{  \n  Real add(Real a, Real b){\n    if(abs(a+b) < EPS*(abs(a)+abs(b)))return 0;\n    return a+b;\n  }\n\n  Real x, y;\n  Point(){}\n  Point(Real x,Real y) : x(x) , y(y){}\n\n  Point operator + (Point p){return Point(add(x,p.x), add(y,p.y));}\n  Point operator - (Point p){return Point(add(x,-p.x), add(y,-p.y));}\n  Point operator * (Real d){return Point(x*d,y*d);}\n  Point operator / (Real d){return Point(x/d,y/d);}\n  bool operator == (Point p){return !sgn(dist(p));}\n  bool operator < (Point p){return (p.x!=x)?p.x<x:p.y<y;}\n  Real norm(){return sqr(x*x+y*y);}\n  Real dist(Point a){return (*this-a).norm();}\n  Real dot(Point a){return x*a.x+y*a.y;}\n  Real cross(Point a){return x*a.y-y*a.x;}\n  //点pを中心に角度r(radius)だけ半時計回りに回転する\n  Point rotate(Real r,Point p = Point(0,0)){\n    Real ta=cos(r)*(x-p.x)-sin(r)*(y-p.y)+p.x;\n    Real tb=sin(r)*(x-p.x)+cos(r)*(y-p.y)+p.y;\n    return Point(ta,tb);\n  }\n  Real arg(){\n    if(sgn(x)>0)return atan(y/x);\n    if(sgn(x)<0)return atan(y/x)+PI;\n    if(sgn(y)>0)return PI/2;\n    if(sgn(y)<0)return 3*PI/2;\n    return 0;\n  }\n};\n\n//a -> b -> c\nint ccw(Point a, Point b, Point c) {\n  b = b-a; c = c-a;\n  if (b.cross(c) > 0)   return +1;       // counter clockwise\n  if (b.cross(c) < 0)   return -1;       // clockwise\n  if (b.dot(c) < 0)     return +2;       // c--a--b on line\n  if (b.norm() < c.norm()) return -2;    // a--b--c on line\n  return 0;                              // a--c--b on line\n}\n\nstruct Line{\n  Point a,b;\n\n  Line(){}\n  Line(Point a,Point b):a(a),b(b){}\n\n  bool on(Point c){return abs(ccw(a,b,c))!=1;}\n  Real dist(Point c){return abs((b-a).cross(c-a))/(b-a).norm();}\n  bool isOrthogonal(Line l){return (a-b).dot(l.a-l.b)==0.0;}\n  bool isParallel(Line l){return (a-b).cross(l.a-l.b)==0.0;}\n  bool isIntersection(Line l){return !((a-b).cross(l.a-l.b)==0.0);}\n  //平行でない前提\n  Point intersectionPoint(Line l){\n    return a+(b-a)*((l.b-l.a).cross(l.a-a)/(l.b-l.a).cross(b-a));\n  }\n\n};\n\nint main(void){\n\n  int q;\n  cin >> q;\n  while(q--){\n    Line a,b;\n    cin >> a.a.x >> a.a.y >> a.b.x >> a.b.y;\n    cin >> b.a.x >> b.a.y >> b.b.x >> b.b.y;\n    if(a.isOrthogonal(b))cout << 1 << endl;\n    else if(a.isParallel(b))cout << 2 << endl;\n    else cout << 0 << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n// conj(x) : complex conjugate,(0,1)->(0,-1)\n// abs(x) : dist between(0,0) and x\n// norm(x) : abs(x) * abs(x)\n// arg(x) : argment,[-PI,PI]\nusing CP = complex<long double>;\n#define X real()\n#define Y imag()\nconst long double PI = acos(-1.0L);\nconst long double EPS = 1e-10;\n// cos a\nlong double costh(long double a, long double b,\n                  long double c) {\n  return (b * b + c * c - a * a) / (2.0L * b * c);\n}\n\n// dot(a,b) = |a||b|cos x\nlong double dot(CP a, CP b) { return (conj(a) * b).X; }\n// cross(a,b) : area of parallelogram\n// sign : a-> b ,counter clockwise? + : -\nlong double cross(CP a, CP b) { return (conj(a) * b).Y; }\nlong double corner(CP a, CP b) {\n  //[0,PI]\n  return acos(dot(a, b) / (abs(a) * abs(b)));\n}\nbool equalp(CP a, CP b) { return norm(a - b) <= EPS * EPS; }\n\nCP projection(CP s, CP t, CP p) {\n  if(equalp(s, t)) return s;\n  CP base = t - s;\n  long double r = dot(p - s, base) / norm(base);\n  return s + base * r;\n}\n\nCP reflection(CP s, CP t, CP p) {\n  CP tmp = (projection(s, t, p) - p);\n  tmp *= 2;\n  return p + tmp;\n}\n\nint calc_clockwise(CP s, CP t, CP p) {\n  t -= s;\n  p -= s;\n  if(cross(t, p) > EPS) return 1;   // \"COUNTER_CLOCKWISE\"\n  if(cross(t, p) < -EPS) return -1; //\"CLOCK_WISE\"\n  if(dot(t, p) < 0) return 2;       // \"ONLINE_BACK\"\n  if(norm(t) < norm(p)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                         // \"ON_SEGMENT\"\n}\n\nint parallel_orthogonal(CP s, CP t, CP a, CP b) {\n  t -= s;\n  b -= a;\n  if(abs(cross(t, b)) <= EPS) return 2; // \"parallel\"\n  if(abs(dot(t, b)) <= EPS) return 1;   // \"orthogonal\"\n  return 0;\n}\n\nCP intersectionLL(CP a, CP b, CP c, CP d) {\n  return a + (b - a) * (cross(d - c, c - a) /\n                        cross(d - c, b - a));\n}\n\nbool on_seg(CP s, CP t, CP p) {\n  // if not use end point, dot(s - p, t - p) < 0\n  return abs(cross(s - p, t - p)) <= 1e-10 &&\n         dot(s - p, t - p) <= 0;\n}\n\n// crossing lines? (a,b) and (c,d)\nbool iscross(CP a, CP b, CP c, CP d) {\n  // parallel\n  if(abs(cross(a - b, c - d)) <= EPS) {\n    return on_seg(a, b, c) || on_seg(a, b, d) ||\n           on_seg(c, d, a) || on_seg(c, d, b);\n  }\n  CP isp = intersectionLL(a, b, c, d);\n  return on_seg(a, b, isp) && on_seg(c, d, isp);\n}\n\nlong double distLP(CP s, CP t, CP p) {\n  return abs(cross(t - s, p - s) / abs(t - s));\n}\n\n// segmentver.\nlong double distSP(CP s, CP t, CP p) {\n  if(dot(t - s, p - s) < 0) return abs(p - s);\n  if(dot(s - t, p - t) < 0) return abs(p - t);\n  return distLP(s, t, p);\n}\n\n// segment and segment\nlong double distSS(CP a, CP b, CP c, CP d) {\n  long double res = 1e18;\n  if(iscross(a, b, c, d)) return 0.0L;\n  res = min(res, distSP(a, b, c));\n  res = min(res, distSP(a, b, d));\n  res = min(res, distSP(c, d, a));\n  res = min(res, distSP(c, d, b));\n  return res;\n}\n\n// counter clockwise\nbool is_convex(const vector<CP> &v) {\n  int n = v.size();\n  for(int i = 0; i < n; ++i)\n    if(cross(v[(i + 1) % n] - v[i],\n             v[(i + 2) % n] - v[(i + 1) % n]) < -EPS)\n      return 0;\n  return 1;\n}\n\nvector<CP> convex_hull(vector<CP> &ps) {\n  auto lmd = [&](const CP &l, const CP &r) {\n    if(l.X != r.X) return l.X < r.X;\n    return l.Y < r.Y;\n  };\n  vector<CP> qs;\n  int psize = ps.size();\n  sort(ps.begin(), ps.end(), lmd);\n  int k = 0;\n  qs.resize(psize * 2);\n  for(int i = 0; i < psize; ++i) {\n    while(k > 1 && cross(qs[k - 1] - qs[k - 2],\n                         ps[i] - qs[k - 1]) <= 0)\n      --k;\n    qs[k++] = ps[i];\n  }\n  for(int i = psize - 2, t = k; i >= 0; --i) {\n    while(k > t && cross(qs[k - 1] - qs[k - 2],\n                         ps[i] - qs[k - 1]) <= 0)\n      --k;\n    qs[k++] = ps[i];\n  }\n  qs.resize(k - 1);\n  return qs;\n}\n\nlong double convex_diameter(vector<CP> &newv) {\n  vector<CP> v = convex_hull(newv);\n  int n = v.size(), i = 0, j = 0;\n  if(n == 2) return abs(v[0] - v[1]);\n  for(int k = 0; k < n; ++k) {\n    if(v[k].X < v[i].X) i = k;\n    if(v[k].X > v[j].X) j = k;\n  }\n  long double res = 0;\n  int si = i, sj = j;\n  while(i != sj || j != si) {\n    res = max(res, abs(v[i] - v[j]));\n    if(cross(v[(i + 1) % n] - v[i], v[(j + 1) % n] - v[j]) <\n       0)\n      (++i) %= n;\n    else\n      (++j) %= n;\n  }\n  return res;\n}\n\nvector<CP> convex_cut(const vector<CP> &v, const CP &s,\n                      const CP &t) {\n  vector<CP> res;\n  int n = v.size();\n  for(int i = 0; i < n; ++i) {\n    CP nows = v[i], nowt = v[(i + 1) % n];\n    if(cross(t - s, nows - s) >= -EPS) res.push_back(nows);\n    if(cross(t - s, nows - s) * cross(t - s, nowt - s) < 0)\n      res.push_back(intersectionLL(s, t, nows, nowt));\n  }\n  return res;\n}\n\nstruct Circle {\n  CP o;\n  long double r;\n  Circle(long double _x = 0.0L, long double _y = 0.0L,\n         long double _r = 0.0L)\n      : o(CP(_x, _y)), r(_r) {}\n  Circle(CP _o, long double _r = 0.0) : o(_o), r(_r) {}\n};\n\nvoid intersectionCC(Circle c1, Circle c2, CP &res1,\n                    CP &res2) {\n  long double d = abs(c1.o - c2.o);\n  long double arg = acos(costh(c2.r, c1.r, d));\n  res1 = (c2.o - c1.o) * CP(cos(arg), sin(arg));\n  res1 *= c1.r / abs(res1);\n  res1 += c1.o;\n  res2 = reflection(c1.o, c2.o, res1);\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nvoid intersectionCL(Circle ci, CP s, CP t, CP &res1,\n                    CP &res2) {\n  res1 = res2 = projection(s, t, ci.o);\n  long double r = sqrtl(ci.r * ci.r - norm(res1 - ci.o));\n  t -= s;\n  t *= r / abs(t);\n  res1 += t;\n  res2 -= t;\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nvoid contactCP(Circle ci, CP p, CP &res1, CP &res2) {\n  long double d = abs(ci.o - p);\n  if(abs(d - ci.r) <= EPS) {\n    res1 = res2 = p;\n    return;\n  }\n  else if(d < ci.r) {\n    res1 = res2 = CP(-1e18, -1e18);\n    return;\n  }\n  long double arg = asin(ci.r / d);\n  res1 = (ci.o - p) * CP(cos(arg), sin(arg));\n  res1 *= (d * cos(arg)) / abs(res1);\n  res1 += p;\n  res2 = reflection(p, ci.o, res1);\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nlong double polygonarea(const vector<CP> &v) {\n  int n = v.size();\n  long double res = 0;\n  for(int i = 0; i < n; ++i)\n    res +=\n        (v[(i - 1 + n) % n].X - v[(i + 1) % n].X) * v[i].Y;\n  return res / 2.0L;\n}\n\nlong long q;\n\nint main() {\n  cin >> q;\n  while(q--) {\n    int a, b, c, d, e, f, g, h;\n    cin >> a >> b >> c >> d >> e >> f >> g >> h;\n    CP xs(a, b), xt(c, d), ys(e, f), yt(g, h);\n    cout << parallel_orthogonal(xs, xt, ys, yt) << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <vector>\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#include<functional>\n//--\n#include<list>\n#include<deque>\n#include<bitset>\n#include<set>\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<sstream>\n#include<complex>\n#define X first\n#define Y second\n#define pb push_back\n#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))\n#define rrep(X,Y) for (int (X) = Y-1;(X) >=0;--(X))\n#define all(X) (X).begin(),(X).end()\n#define rall(X) (X).rbegin(),(X).rend()\n\n#define re real()\n#define im imag()\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef complex<double> pt;\ntypedef pair<pt,pt> line; //X+tY\n\ndouble dot(pt a,pt b){return (conj(a)*b).real();}\ndouble cros(pt a,pt b){return (conj(a)*b).imag();}\npt proj(pt a,pt to){\n  return dot(a,to)/norm(to)*to;\n}\n\npt refle(pt a,pt mirror){\n  return pt(2)*proj(a,mirror)-a;\n}\n\nint pt3(pt a,pt b,pt c){\n  pt p=b-a,q=c-a;\n  double tmp;\n  tmp=cros(p,q);\n  if(tmp>0){\n    return 0;\n  }else if(tmp<0){\n    return 1;\n  }else if(norm(p+q)<max(norm(p),norm(q))){\n    return 2;\n  }else if(norm(q)>norm(p)){\n    return 3;\n  }else if(norm(q)<norm(p)){\n    return 4;\n  }\n  return 5;\n}\n\nint line2(line a,line b){\n  if(dot(a.Y,b.Y)==0)\n    return 1;\n  if(cros(a.Y,b.Y)==0)\n    return 2;\n  return 0;\n}\n\nint main(){\n  int i,j,k,n,re;\n  line s1,s2;\n  double a[8];\n  cin>>n;\n  rep(i,n){\n    rep(j,8)\n      cin>>a[j];\n    s1.X=pt(a[0],a[1]);\n    s1.Y=pt(a[2],a[3])-s1.X;\n    s2.X=pt(a[0+4],a[1+4]);\n    s2.Y=pt(a[2+4],a[4+3])-s2.X;\n    cout<<line2(s1,s2)<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "/* template.cpp {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n \n// #define int long long\n#define GET_MACRO(a, b, c, d, NAME, ...) NAME\n#define REP1(n) REP2(i_, n)\n#define REP2(i, n) REP3(i, 0, n)\n#define REP3(i, a, b) REP4(i, a, b, 1)\n#define REP4(i, a, b, s) for (long long i = (a); i < (long long)(b); i += (long long)(s))\n#define RREP1(n) RREP2(i_, n)\n#define RREP2(i, n) RREP3(i, 0, n)\n#define RREP3(i, a, b) RREP4(i, a, b, 1)\n#define RREP4(i, a, b, s) for (long long i = (b) - 1; i >= (long long)(a);  i -= (long long)(s))\n#define rep(...) GET_MACRO(__VA_ARGS__, REP4, REP3, REP2, REP1)(__VA_ARGS__)\n#define rrep(...) GET_MACRO(__VA_ARGS__, RREP4, RREP3, RREP2, RREP1)(__VA_ARGS__)\n#define fs first\n#define sc second\n#define all(c) std::begin(c), std::end(c)\n#define rall(c) (c).begin(), (c).end()\n#define pcnt(x) __builtin_popcountll(x)\n#define each(x, c) for (auto &&x : c)\n#define endl \"\\n\"\n#define y0 y0_\n#define y1 y1_\n#define yn yn_\n#define left left_\n#define right right_\n \n#define TMP_T template<typename T>\n#define TMP_TU template<typename T, typename U>\n#define TMP_Ts template<typename ...T>\n#define TMP_NTs template<size_t N, typename ...T>\n#define TMP_CT template<bool C, typename T = void>\n \n#ifndef DEBUG\n#define cerr no_output\nstruct NoOutput : ostream {\n  TMP_T ostream &operator<<(const T &){ return *this; }\n} no_output;\n#endif\n \nusing uint = unsigned;\nusing ll = long long;\nusing ull = unsigned long long;\nusing ld = long double;\nTMP_T using PQL = priority_queue<T, vector<T>, greater<T>>;\nTMP_T using PQG = priority_queue<T>;\nTMP_CT using enable_if_t = typename enable_if<C, T>::type;\n \nconst ll LLINF = 1e18 + 10;\n#ifndef int\nconst int INF = 1e9 + 10;\n#else\nconst int INF = LLINF;\n#endif\n \nconst int dx[] = {-1, 0, 1, 0, -1, 1, 1, -1};\nconst int dy[] = {0, -1, 0, 1, -1, -1, 1, 1};\n \nTMP_T inline constexpr T sq(T x){ return x * x; }\nTMP_TU inline T& chmin(T &x, U y){ if (x > y) x = y; return x; }\nTMP_TU inline T& chmax(T &x, U y){ if (x < y) x = y; return x; }\n \nTMP_NTs enable_if_t<(N >= sizeof...(T))> input_tuple(istream &, tuple<T...> &){}\nTMP_NTs enable_if_t<(N < sizeof...(T))> input_tuple(istream &is, tuple<T...> &x){ is >> get<N>(x); input_tuple<N + 1, T...>(is, x); }\nTMP_Ts ostream &operator>>(istream &is, tuple<T...> &x){ input_tuple<0, T...>(is, x); return is; }\nTMP_TU ostream &operator>>(istream &is, pair<T, U> &x){ return is >> x.first >> x.second; }\nTMP_NTs enable_if_t<(N >= sizeof...(T))> print_tuple(ostream &, const tuple<T...> &){}\nTMP_NTs enable_if_t<(N < sizeof...(T))> print_tuple(ostream &os, const tuple<T...> &x){ os << (N > 0 ? \" \" : \"\") << get<N>(x); print_tuple<N + 1, T...>(os, x); }\nTMP_Ts ostream &operator<<(ostream &os, const tuple<T...> &x){ print_tuple<0, T...>(os, x); return os; }\nTMP_TU ostream &operator<<(ostream &os, const pair<T, U> &x){ return os << x.first << \" \" << x.second; }\nTMP_T vector<T> reversed(const vector<T> &c){ auto d = c; reverse(all(d)); return d; }\nstring reversed(const string &s){ auto t = s; reverse(all(t)); return t; }\nTMP_T void unique(vector<T> &c){ sort(all(c)); c.erase(unique(all(c)), end(c)); }\nTMP_T vector<T> uniqued(const vector<T> &c){ auto d = c; unique(d); return d; }\n\n#undef TMP_T\n#undef TMP_TU\n#undef TMP_Ts\n#undef TMP_NTs\n#undef TMP_CT\n\nll gcd(ll a, ll b){ return b ? gcd(b, a % b) : a; }\nll lcm(ll a, ll b){ return a / gcd(a, b) * b; }\ntuple<ll, ll, ll> extgcd(ll a, ll b){\n  if (b){\n    ll g, x, y;\n    tie(g, x, y) = extgcd(b, a % b);\n    return make_tuple(g, y, x - a / b * y);\n  }\n  return make_tuple(a, 1, 0);\n}\nll invmod(ll a, ll m = 1000000007){\n  ll g, x;\n  tie(g, x, ignore) = extgcd(a, m);\n  return g == 1 ? (x + m) % m : 0;\n}\n\ninline ll in(){ ll x; cin >> x; return x; }\n \nstruct prepare {\n  prepare(){\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(12);\n    cerr << fixed << setprecision(12);\n#ifndef DEBUG\n    cin.tie(nullptr);\n#endif\n  }\n} prepare_;\n/* }}} */\n/* geometry.cpp {{{ */\n/* object {{{ */\nusing Real = long double;\nusing Point = complex<Real>;\n\nstruct Line {\n  Point p, q;\n  Line(){}\n  Line(const Point &p, const Point &q): p(p), q(q){}\n};\n\nstruct Circle {\n  Point p;\n  Real r;\n  Circle(){}\n  Circle(const Point &p, Real r): p(p), r(r){}\n};\n\nusing Segment = Line;\nusing Polygon = vector<Point>;\n\nnamespace std {\n  bool operator<(const Point &a, const Point &b){\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\n/* }}} */\n/* const {{{ */\nconst Real EPS = 1e-8l;\nconst Real PI = acos(-1.0l);\n/* }}} */\n/* compare {{{ */\nint sgn(Real x){\n  return (x > EPS) - (x < -EPS);\n}\n\nint sgn(Real x, Real y){\n  return sgn(x - y);\n}\n/* }}} */\n/* input {{{ */\nistream &operator>>(istream &is, Point &p){\n  Real x, y;\n  is >> x >> y;\n  p.real(x), p.imag(y);\n  return is;\n}\n\nistream &operator>>(istream &is, Line &l){\n  return is >> l.p >> l.q;\n}\n\nistream &operator>>(istream &is, Circle &c){\n  return is >> c.p >> c.r;\n}\n\nistream &operator>>(istream &is, Polygon &g){\n  each(p, g) is >> p;\n  return is;\n}\n/* }}} */\n/* output {{{ */\nostream &operator<<(ostream &os, const Point &p){\n  return os << p.real() << \" \" << p.imag();\n}\n\nostream &operator<<(ostream &os, const Line &l){\n  return os << l.p << \" \" << l.q;\n}\n\nostream &operator<<(ostream &os, const Circle &c){\n  return os << c.p << \" \" << c.r;\n}\n\nostream &operator<<(ostream &os, const Polygon &g){\n  for (int i = 0; i < (int)g.size(); i++){\n    os << g[i];\n    if (i + 1 < (int)g.size()) os << endl;\n  }\n  return os;\n}\n/* }}} */\n/* dot, cross {{{ */\nReal dot(const Point &a, const Point &b){\n  return real(conj(a) * b);\n}\n\nReal cross(const Point &a, const Point &b){\n  return imag(conj(a) * b);\n}\n/* }}} */\n/* ccw {{{ */\nint ccw(const Point &a, const Point &b, const Point &c){\n  Point u = b - a, v = c - a;\n  if (sgn(cross(u, v)) > 0) return 1;\n  if (sgn(cross(u, v)) < 0) return -1;\n  if (sgn(dot(u, v)) < 0) return 2;\n  if (sgn(norm(u), norm(v)) < 0) return -2;\n  return 0;\n}\n/* }}} */\n/* orthogonal, parallel {{{ */\nbool orthogonal(const Line &l, const Line &m){\n  return sgn(dot(l.q - l.p, m.q - m.p)) == 0;\n}\n\nbool parallel(const Line &l, const Line &m){\n  return sgn(cross(l.q - l.p, m.q - m.p)) == 0;\n}\n/* }}} */\n/* intersect {{{ */\nbool intersectLL(const Line &l, const Line &m){\n  return !parallel(l, m) ? true : parallel(l, Line(l.p, m.p));\n}\n\nbool intersectLS(const Line &l, const Segment &s){\n  return sgn(cross(l.q - l.p, s.p - l.p)) * sgn(cross(l.p - l.p, s.q - l.p)) <= 0;\n}\n\nbool intersectLP(const Line &l, const Point &p){\n  return ~ccw(l.p, l.q, p) & 1;\n}\n\nbool intersectSS(const Segment &s, const Segment &t){\n  return ccw(s.p, s.q, t.p) * ccw(s.p, s.q, t.q) <= 0\n      && ccw(t.p, t.q, s.p) * ccw(t.p, t.q, s.q) <= 0;\n}\n\nbool intersectSP(const Segment &s, const Point &p){\n  return !ccw(s.p, s.q, p);\n}\n/* }}} */\n/* project, refrect {{{ */\nPoint project(const Line &l, const Point &p){\n  Real t = dot(p - l.p, l.p - l.q) / norm(l.p - l.q);\n  return l.p + t * (l.p - l.q);\n}\n\nPoint reflect(const Line &l, const Point &p){\n  return p + 2.0l * (project(l, p) - p);\n}\n/* }}} */\n/* distance {{{ */\nReal distanceLP(const Line &l, const Point &p){\n  return abs(p - project(l, p));\n}\n\nReal distanceLL(const Line &l, const Line &m){\n  return intersectLL(l, m) ? 0.0l : distanceLP(l, m.p);\n}\n\nReal distanceLS(const Line &l, const Segment &s){\n  if (intersectLS(l, s)) return 0.0l;\n  return min(distanceLP(l, s.p), distanceLP(l, s.q));\n}\n\nReal distanceSP(const Segment &s, const Point &p){\n  if (sgn(dot(s.q - s.p, p - s.p)) <= 0) return abs(s.p - p);\n  if (sgn(dot(s.p - s.q, p - s.q)) <= 0) return abs(s.q - p);\n  return distanceLP(s, p);\n}\n\nReal distanceSS(const Segment &s, const Segment &t){\n  if (intersectSS(s, t)) return 0.0l;\n  return min({\n    distanceSP(s, t.p), distanceSP(s, t.q),\n    distanceSP(t, s.p), distanceSP(t, s.q)\n  });\n}\n/* }}} */\n/* cross point {{{ */\nPoint crossPoint(const Line &l, const Line &m){\n  Real a = cross(l.q - l.p, m.q - m.p);\n  Real b = cross(l.q - l.p, l.q - m.p);\n  if (sgn(a) == 0 && sgn(b) == 0) return m.p;\n  if (sgn(a) == 0) assert(false);\n  return m.p + b / a * (m.q - m.p);\n}\n/* }}} */\n/* }}} */\n\nsigned main()\n{\n  int q;\n  Line l, m;\n  cin >> q;\n  rep(q){\n    cin >> l >> m;\n    cout << parallel(l, m) * 2 + orthogonal(l, m) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "/* Header {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long readtype;\ntypedef long long var;\ntypedef long double let;\n\nreadtype read() {\n  readtype a = 0, c = getchar(), s = 0;\n  while (!isdigit(c)) s |= c == '-', c = getchar();\n  while (isdigit(c)) a = a * 10 + c - 48, c = getchar();\n  return s ? -a : a;\n}\n\n#ifdef LOCAL_LOGGER\n#define logger(...) fprintf(stderr, __VA_ARGS__)\n#define abortif(v, ...) if (v) {logger(\"Error in Line %d, Function '%s()'.\\nInfo: \", __LINE__, __FUNCTION__); logger(__VA_ARGS__); exit(0);}\n#else\n#define logger(...);\n#define abortif(v, ...);\n#endif\n/* }}} */\n\nconst let EPS = 1e-8;\n\nint sign(let x) { return (x < -EPS) ? -1 : (x > EPS ? 1 : 0); }\n\nstruct Point {\n  let x, y;\n\n  friend Point operator + (Point a, Point b) {\n    return (Point) {a.x + b.x, a.y + b.y};\n  }\n  friend Point operator - (Point a, Point b) {\n    return (Point) {a.x - b.x, a.y - b.y};\n  }\n  let Dist() {\n    return sqrt(x * x + y * y);\n  }\n  Point Rotate(let sink, let cosk) {\n    return (Point) {x * cosk - y * sink, x * sink + y * cosk};\n  }\n  Point Rotate(Point k) {\n    let z = k.Dist();\n    return Rotate(k.y / z, k.x / z);\n  }\n  Point operator ~ () {\n    return (Point) {x, -y};\n  }\n};\n\ntypedef Point Vec;\n\nstruct Line {\n  Point p;\n  Vec v;\n  Line() {}\n  Line(Point a, Point b) {\n    p = a, v = b - a;\n  }\n  friend int CheckRelate(Line a, Line b) {\n    Vec res = b.v.Rotate(~a.v);\n    if (!sign(res.y)) return 2;\n    if (!sign(res.x)) return 1;\n    return 0;\n  }\n\n  // friend bool CheckParallel(Line a, Line b) {\n  // }\n  // friend bool CheckOrthogonal(Line a, Line b) {\n  // }\n};\n\nPoint ReadPoint() {\n  let x, y;\n  scanf(\"%Lf%Lf\", &x, &y);\n  return (Point) {x, y};\n}\n\nint main() {\n// #ifndef ONLINE_JUDGE\n//   freopen(\"CGL_2_A.in\", \"r\", stdin);\n//   freopen(\"CGL_2_A.out\", \"w\", stdout);\n// #endif\n// #ifdef LOCAL_LOGGER\n//   freopen(\"CGL_2_A.log\", \"w\", stderr);\n// #endif\n  int q = read();\n  while (q--) {\n    Line l1 = (Line) {ReadPoint(), ReadPoint()},\n         l2 = (Line) {ReadPoint(), ReadPoint()};\n    printf(\"%d\\n\", CheckRelate(l1, l2));\n  }\n  return 0;\n}\n\n/* ==== Makefile ==== {{{\nCompileAndRun:\n\tmake Compile\n\tmake Run\n\nCompile:\n\tg++ -o CGL_2_A CGL_2_A.cpp -g -Wall -DLOCAL_LOGGER\n\nCompileUF:\n\tg++ -o CGL_2_A CGL_2_A.cpp -g -Wall -DLOCAL_LOGGER -fsanitize=undefined\n\nRun:\n\t./CGL_2_A < CGL_2_A.in > CGL_2_A.out\n==================\n}}} */\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define fi first\n#define se second\n#define repl(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define rep(i,n) repl(i,0,n)\n#define each(itr,v) for(auto itr:v)\n#define pb(s) push_back(s)\n#define mp(a,b) make_pair(a,b)\n#define all(x) (x).begin(),(x).end()\n#define dbg(x) cout<<#x\"=\"<<x<<endl\n#define maxch(x,y) x=max(x,y)\n#define minch(x,y) x=min(x,y)\n#define uni(x) x.erase(unique(all(x)),x.end())\n#define exist(x,y) (find(all(x),y)!=x.end())\n#define bcnt(x) bitset<32>(x).count()\n\n#define x(p) real(p)\n#define y(p) imag(p)\n\nconst double eps=1e-10;\nconst double inf=1e12;\ntypedef complex<double> P;\n\nnamespace std{\n  bool operator<(const P& a,const P& b){\n    return x(a)==x(b)?y(a)<y(b):x(a)<x(b);\n  }\n}\ndouble cross(const P& a,const P& b){\n  return y(conj(a)*b);\n}\ndouble dot(const P& a,const P& b){\n  return x(conj(a)*b);\n}\nstruct L : public vector<P> { // line and segment\n  L(const P& a,const P &b){\n    push_back(a);\n    push_back(b);\n  }\n};\n\nP projection(const L& l,const P& p){\n  P b=l[1]-l[0],c=p-l[0];\n  return l[0]+b*x(c/b);\n}\nP reflection(const L& l,const P& p){\n  return p+2.0*(projection(l,p)-p);\n}\n//// counter-clockwise\nint ccw(P a,P b,P c) {\n  b=b-a;c=c-a;\n  if(cross(b,c)>0) return +1;       // counter clockwise\n  if(cross(b,c)<0) return -1;       // clockwise\n  if(dot(b,c)<0)   return +2;       // c--a--b on line\n  if(norm(b)<norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\nbool intersectLL(const L& l,const L& m){\n  return abs(cross(l[1]-l[0],m[1]-m[0]))>eps||abs(cross(l[1]-l[0],m[0]-l[0]))<eps;\n}\n\nint main(){\n\tcin.sync_with_stdio(false);\n  int q;\n  cin>>q;\n  while(q--){\n    P p[4];\n    rep(i,4){\n      double x,y;\n      cin>>x>>y;\n      p[i]=P(x,y);\n    }\n    if(intersectLL(L(p[0],p[1]),L(p[2],p[3]))){\n      if(abs(dot(p[1]-p[0],p[3]-p[2]))<eps)cout<<1<<endl;\n      else cout<<0<<endl;\n    }else cout<<2<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nnamespace Geo2D{\n\ttypedef long long int ll;\n\tconst double eps = 1e-8;\n\tconst double pi = acos(-1);\n\tconst double inf = 1e100;\n\n\t/* Be careful for the criteria for == two doubles */\n\t/* Relative or Absolute? */\n\tstruct Double{\n\t\tdouble x;\n\t\tDouble(double x=0):x(x){}\n\t\tDouble(const Double& rhs){x=rhs.x;}\n\t\tDouble operator+(const Double& rhs)const{return Double(x+rhs.x);}\n\t\tDouble& operator+=(const Double& rhs){return x+=rhs.x,*this;}\n\t\tDouble operator-(const Double& rhs)const{return Double(x-rhs.x);}\n\t\tDouble& operator-=(const Double& rhs){return x-=rhs.x,*this;}\n\t\tDouble operator*(const Double& rhs)const{return Double(x*rhs.x);}\n\t\tDouble& operator*=(const Double& rhs){return x*=rhs.x,*this;}\n\t\tDouble operator/(const Double& rhs)const{return Double(x/rhs.x);}\n\t\tDouble& operator/=(const Double& rhs){return x/=rhs.x,*this;}\n\t\tDouble operator-()const{return Double(-x);}\n\t\tDouble operator^(const Double& rhs)const{return pow(x,rhs.x);}\n\t\tDouble operator^(const int& rhs)const{\n\t\t\tdouble res = 1, base = x;\n\t\t\tint b = rhs;\n\t\t\twhile(b){\n\t\t\t\tif(b&1)\tres = res * base;\n\t\t\t\tb >>= 1;\n\t\t\t\tbase *= base;\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tDouble& operator++(){return ++x,*this;}\n\t\tDouble& operator--(){return --x,*this;}\n\t\tDouble operator++(int){Double res(x);return x++,res;}\n\t\tDouble operator--(int){Double res(x);return x--,res;}\n\t\tbool operator==(const Double& rhs)const{return x+eps>=rhs.x&&x<=rhs.x+eps;}\n\t\tbool operator!=(const Double& rhs)const{return !(*this==rhs);}\n\t\tbool operator<(const Double& rhs)const{return (*this==rhs)?false:x<rhs.x;}\n\t\tbool operator>(const Double& rhs)const{return (*this==rhs)?false:x>rhs.x;}\n\t\tbool operator<=(const Double& rhs)const{return (*this==rhs)?true:x<rhs.x;}\n\t\tbool operator>=(const Double& rhs)const{return (*this==rhs)?true:x>rhs.x;}\n\t\tfriend ostream & operator << (ostream& os, const Double& rhs){\n\t\t\tos << rhs.x;\n\t\t\treturn os;\n\t\t}\n\t\tfriend istream & operator >> (istream& is, Double& rhs){\n\t\t\tis >> rhs.x;\n\t\t\treturn is;\n\t\t}\n\t\tfriend double abs(const Double& rhs){return abs(rhs.x);}\n\t\tfriend double sin(const Double& rhs){return sin(rhs.x);}\n\t\tfriend double cos(const Double& rhs){return cos(rhs.x);}\n\t\tfriend double tan(const Double& rhs){return tan(rhs.x);}\n\t\tfriend double asin(const Double& rhs){return asin(rhs.x);}\n\t\tfriend double acos(const Double& rhs){return acos(rhs.x);}\n\t\tfriend double atan(const Double& rhs){return atan(rhs.x);}\n\t\tfriend double atan2(const Double& lhs,const Double& rhs){return atan2(lhs.x,rhs.x);}\n\t\tfriend double sqrt(const Double& rhs){return sqrt(rhs.x);}\n\t\tfriend ll ceil(const Double& rhs){return ceil(rhs.x);}\n\t\tfriend ll round(const Double& rhs){return round(rhs.x);}\n\t\tfriend ll floor(const Double& rhs){return floor(rhs.x);}\n\t};\n\n\ttypedef Double T;\n\t/* To change a point, do P = P.member_function() */\n\tstruct Point{\n\t\tT x,y;\n\t\tPoint(T x=0,T y=0):x(x),y(y){}\n\t\tbool operator<(const Point& rhs)const{return x==rhs.x?y<rhs.y:x<rhs.x;}\n\t\tbool operator==(const Point& rhs)const{return x==rhs.x&&y==rhs.y;}\n\t\tPoint operator-()const{return Point(-x,-y);}\n\t\tPoint operator+(const Point& rhs)const{return Point(x+rhs.x,y+rhs.y);}\n\t\tPoint operator-(const Point& rhs)const{return Point(x-rhs.x,y-rhs.y);}\n\t\tT operator*(const Point& rhs)const{return x*rhs.x+y*rhs.y;}\n\t\tPoint operator*(const T& rhs)const{return Point(x*rhs,y*rhs);}\n\t\tPoint operator/(const T& rhs)const{return Point(x/rhs,y/rhs);}\n\t\tT operator^(const Point& rhs)const{return x*rhs.y-y*rhs.x;}\n\t\tdouble len()const{return sqrt(x*x+y*y);}\n\t\tT len2()const{return x*x+y*y;}\n\t\tPoint norm()const{double l = len();return *this/l;}\n\t\tPoint resize(double l)const{return norm()*l;}\n\t\tPoint rotpos()const{return Point(-y,x);}\n\t\tPoint rotneg()const{return Point(y,-x);}\n\t\tPoint rot(const double& ang)const{return Point(x*cos(ang)-y*sin(ang),y*cos(ang)+x*sin(ang));}\n\n\t\t/* friend function */\n\t\tfriend double dist(const Point& lhs,const Point& rhs){Point delta = lhs - rhs;return delta.len();}\n\t\tfriend T dist2(const Point& lhs,const Point& rhs){Point delta = lhs - rhs;return delta.len2();}\n\t\t/* the angle of ABC <= 180 */\n\t\tfriend double angle(const Point& A,const Point& B,const Point& C){\n\t\t\treturn abs(atan2(abs((A-B)^(C-B)),(A-B)*(C-B)));\n\t\t}\n\t\tfriend ostream & operator << (ostream& os, const Point& rhs){\n\t\t\tos << rhs.x << ' ' << rhs.y;\n\t\t\treturn os;\n\t\t}\n\t\tfriend istream & operator >> (istream& is, Point& rhs){\n\t\t\tis >> rhs.x >> rhs.y;\n\t\t\treturn is;\n\t\t}\n\t};\n\t/* P should contain at least two \"different\" points */\n\tvector<Point> hull(vector<Point> &P){\n\t\tif(P.size()<=1)\treturn {};\n\t\tvector<Point> res;\n\t\tsort(P.begin(),P.end());\n\t\tres={P[0],P[1]};\n\t\tfor(int i=2;i<P.size();i++){\n\t\t\twhile(res.size()>=2&&((res.back()-res[res.size()-2])^(P[i]-res[res.size()-2]))<=0)\n\t\t\t\tres.pop_back();\n\t\t\tres.emplace_back(P[i]);\n\t\t}\n\t\tfor(int i=P.size()-2,t=res.size();i>=0;i--){\n\t\t\twhile(res.size()>t&&((res.back()-res[res.size()-2])^(P[i]-res[res.size()-2]))<=0)\n\t\t\t\tres.pop_back();\n\t\t\tres.emplace_back(P[i]);\n\t\t}\n\t\tres.pop_back();\n\t\tif(res.size()<=1||(res.size()==2&&res[0]==res[1]))\treturn {};\n\t\treturn res;\n\t}\n\t/* ccw, call hull for Pp,Pq beforehand */\n\tvector<Point> Minkowski(vector<Point>& Pp,vector<Point>& Pq){\n\t\tint n=Pp.size(),m=Pq.size();\n\t\tvector<Point> Pr;\n\t\tPr.emplace_back(Pp[0]+Pq[0]);\n\t\tPp.emplace_back(Pp[0]);Pq.emplace_back(Pq[0]);\n\t\tfor(int i=0,j=0;i!=n||j!=m;){\n\t\t\tPoint nxt;\n\t\t\tif((j==m)||(i!=n&&((Pp[i+1]-Pp[i])^(Pq[j+1]-Pq[j]))>=0)){\n\t\t\t\tnxt=Pr.back()+Pp[i+1]-Pp[i];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tnxt=Pr.back()+Pq[j+1]-Pq[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\twhile(Pr.size()>=2&&((Pr.back()-nxt)^(Pr[Pr.size()-2]-nxt))==0)\n\t\t\t\tPr.pop_back();\n\t\t\tPr.emplace_back(nxt);\n\t\t}\n\t\tPp.pop_back();Pq.pop_back();Pr.pop_back();\n\t\treturn Pr;\n\t}\n\tbool inConvex(vector<Point>& c,const Point& p){\n\t\tint L=1,R=c.size()-1;\n\t\tif(((p-c[0])^(c[L]-c[0]))>0)\treturn false;\n\t\tif(((p-c[0])^(c[R]-c[0]))<0)\treturn false;\n\t\twhile(L<R){\n\t\t\tint mid=(L+R+1)>>1;\n\t\t\tif(((p-c[0])^(c[mid]-c[0]))<=0)\tL=mid;\n\t\t\telse\tR=mid-1;\n\t\t}\n\t\tif(L==c.size()-1)\tL--;\n\t\treturn ((p-c[L])^(c[L+1]-c[L]))<=0;\n\t}\n\t/* (-pi,pi] */\n\tDouble norm(Double ang){\n\t\tang = ang-round(ang/pi/2)*pi*2;\n\t\tif(ang<=-pi)\tang+=2*pi;\n\t\tif(ang>pi)\tang-=2*pi;\n\t\treturn ang;\n\t}\n\tstruct Line{\n\t\tPoint s,e;\n\t\tLine(Point s=Point(),Point e=Point()):s(s),e(e){}\n\t\tLine(Point p,Double ang):s(p){\n\t\t\tang=norm(ang);\n\t\t\tif(ang==pi/2)\te=s+Point(0,1);\n\t\t\telse if(ang==-pi/2)\te=s-Point(0,1);\n\t\t\telse\te=s+Point(1,tan(ang));\n\t\t}\n\t\t/* ax+by+c==0 */\n\t\tLine(Double a,Double b,Double c){\n\t\t\tif(a==0){\n\t\t\t\ts=Point(0,-c/b);\n\t\t\t\te=Point(1,-c/b);\n\t\t\t}\n\t\t\telse if(b==0){\n\t\t\t\ts=Point(-c/a,0);\n\t\t\t\te=Point(-c/a,1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\ts=Point(0,-c/b);\n\t\t\t\te=Point(-c/a,0);\n\t\t\t}\n\t\t}\n\t\tbool operator==(const Line& rhs)const{return s==rhs.s&&e==rhs.e;}\n\t\tdouble len()const{return dist(s,e);}\n\t\tT len2()const{return dist2(s,e);}\n\t\tdouble angle()const{return atan2(e.y-s.y,e.x-s.x);}\n\t\tPoint projection(const Point& p)const{\n\t\t\treturn s+((e-s)*((e-s)*(p-s)))/(e-s).len2();\n\t\t}\n\t\tPoint symmetry(const Point& p)const{\n\t\t\treturn projection(p)*2-p;\n\t\t}\n\t\t/* -1: at left, 0: on line, 1: at right */\n\t\tint where(const Point& p)const{\n\t\t\tauto x = (p-s)^(e-s);\n\t\t\tif(x==0)\treturn 0;\n\t\t\telse if(x>0)\treturn 1;\n\t\t\telse return -1;\n\t\t}\n\t\t/* 0: parallel, 1: same, 2: orthogonal, 3: intersect */\n\t\tint relation(const Line& l)const{\n\t\t\tif(parallel(l))\treturn where(l.s)==0;\n\t\t\telse if(orthogonal(l))\treturn 2;\n\t\t\telse return 3;\n\t\t}\n\t\tbool onseg(const Point& p)const{return ((p-s)^(e-s))==0&&((p-s)*(e-s))<=0;}\n\t\tbool parallel(const Line& l)const{return ((e-s)^(l.e-l.s))==0;}\n\t\tbool orthogonal(const Line& l)const{return ((e-s)*(l.e-l.s))==0;}\n\t\tfriend ostream & operator << (ostream& os, const Line& rhs){\n\t\t\tos << rhs.s << ' ' << rhs.e;\n\t\t\treturn os;\n\t\t}\n\t\tfriend istream & operator >> (istream& is, Line& rhs){\n\t\t\tis >> rhs.s >> rhs.e;\n\t\t\treturn is;\n\t\t}\n\t\tfriend Point intersect(const Line& l,const Line& r){\n\t\t\treturn Point();\t\n\t\t}\n\t};\n}\n/* End of Geo2D */\n\nusing namespace Geo2D;\n\n/* LightOJ 1203: angle\nint main(){\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0);\n\tint T;\n\tcin>>T;\n\tfor(int t=1;t<=T;t++){\n\t\tdouble ans = inf;\n\t\tint n;\n\t\tcin>>n;\n\t\tvector<Point> res(n);\n\t\tfor(int i=0;i<n;i++)\n\t\t\tcin>>res[i].x>>res[i].y;\n\t\tres = hull(res);\n\t\tif(res.empty())\tans = 0;\n\t\telse{\n\t\t\tfor(int i=0;i<res.size();i++){\n\t\t\t\tint j =(i+1)%res.size(),k=(j+1)%res.size();\n\t\t\t\tans = min(ans,angle(res[i],res[j],res[k]));\n\t\t\t}\n\t\t}\n\t\tcout<<fixed<<setprecision(10);\n\t\tcout<<\"Case \"<<t<<\": \"<<ans/pi*180<<endl;\n\t}\n}\n*/\n\n/* LibreOJ 2459\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    int n, m, q;\n    cin >> n >> m >> q;\n    vector<Point> Pp(n), Pq(m);\n    for (int i = 0; i < n; i++) cin >> Pp[i].x >> Pp[i].y;\n    for (int i = 0; i < m; i++) {\n        cin >> Pq[i].x >> Pq[i].y;\n        Pq[i].x = -Pq[i].x;\n        Pq[i].y = -Pq[i].y;\n    }\n    Pp = hull(Pp), Pq = hull(Pq);\n    vector<Point> Pr = Minkowski(Pp, Pq);\n    while (q--) {\n        Point P;\n        cin >> P.x >> P.y;\n        cout << inConvex(Pr, P) << '\\n';\n    }\n}\n*/\n\n\n\n/* Aizu CGL 1 A */\n/* Aizu CGL 1 B */\n/*\nint main(){\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0);\n\tPoint s,e;\n\tcin>>s.x>>s.y>>e.x>>e.y;\n\tLine L(s,e);\n\tint q;\n\tcin>>q;\n\twhile(q--){\n\t\tPoint p;\n\t\tcin>>p.x>>p.y;\n\t\t// p = L.projection(p);\n\t\tp = L.symmetry(p);\n\t\tcout<<fixed<<setprecision(15)<<p.x<<' '<<p.y<<'\\n';\n\t}\n}\n*/\n\n/* Aizu CGL 2 A */\nint main(){\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0);\n\tint q;\n\tcin>>q;\n\twhile(q--){\n\t\tLine L1,L2;\n\t\tcin>>L1>>L2;\n\t\tint r = L1.relation(L2);\n\t\tif(r==3)\n\t\t\tcout<<0<<'\\n';\n\t\telse if(r==2)\n\t\t\tcout<<1<<'\\n';\n\t\telse\n\t\t\tcout<<2<<'\\n';\n\t}\n}\n\n/*\nint main(){}\n*/\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i,n) for(ll (i) = (0);(i) < (n);++i)\n#define REV(i,n) for(ll (i) = (n) - 1;(i) >= 0;--i)\n#define PB push_back\n#define EB emplace_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SHOW1d(v,n) {REP(WW,n)cerr << v[WW] << ' ';cerr << endl << endl;}\n#define SHOW2d(v,WW,HH) {REP(W_,WW){REP(H_,HH)cerr << v[W_][H_] << ' ';cerr << endl;}cerr << endl;}\n#define ALL(v) v.begin(),v.end()\n#define Decimal fixed<<setprecision(20)\n#define INF 1000000000\n#define LLINF 1000000000000000000LL\n#define MOD 998244353\n\ntypedef long long ll;\ntypedef pair<ll,ll> P;\n//--------geometry original ------------------\n#define curr(PP, i) PP[i]\n#define next(PP, i) PP[(i+1)%PP.size()]\n#define diff(PP, i) (next(PP, i) - curr(PP, i))\n#define eq(n,m) (abs((n)-(m)) < EPS)\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\n\nconst double EPS = 1e-8;\nconst double EPS_GIG = 1e-3;\nconst double PI = acos(-1.0);\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n\n\tbool operator == (const point& a,const point& b) {\n\t\treturn (abs(a.real() - b.real()) < EPS && abs(a.imag() - b.imag()) < EPS);\n\t}\n}\nstruct circle {\n\tpoint p; double r;\n\tcircle(){}\n\tcircle(const point &p, double r) : p(p), r(r) { }\n};\n\n// 扇型、中心と半径、二つの端点\n// 現在中心角が180未満の前提\nstruct sector {\n\tpoint o;\n\tpoint a, b;\n\tdouble r;\n\tsector(){}\n\tsector(point O, point A, point B, double _r) :o(O), a(A), b(B), r(_r) {}\n};\n\nstruct segment : public vector<point> {\n\tsegment(const point &a, const point &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\n\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\n\n//角度足し算\ndouble add_rad(double a,double b){\n\tdouble ret = a + b;\n\tif(ret > 2 * PI)ret -= 2 * PI;\n\treturn ret;\n}\n\n//なす角(vector)\ndouble angle(const point &a,const point &b) {\n\tauto tmp = abs(arg(a) - arg(b));\n\treturn min(tmp, 2 * PI - tmp);\n}\n\ndouble angle(const segment &s1,const segment &s2) {\n\treturn angle(s1[1] - s1[0], s2[1] - s2[0]);\n}\n\n//点の回転\npoint rotate(const point &p, double rad) {\n\tdouble x = p.real() * cos(rad) - p.imag() * sin(rad);\n\tdouble y = p.imag() * cos(rad) + p.real() * sin(rad);\n\treturn point(x, y);\n}\n\n//並行\nbool isParallel(const point &a, const point &b){\n    return abs(cross(a,b)) < EPS;\n}\nbool isParallel(const segment &a, const segment &b){\n    return isParallel(a[1]-a[0], b[1]-b[0]);\n}\n//直行\nbool isOrthogonal(const point &a,const point &b){\n\treturn abs(angle(a,b) - PI / 2) < EPS;\n}\nbool isOrthogonal(const segment &a,const segment &b){\n\treturn isOrthogonal(a[1]-a[0],b[1]-b[0]);\n}\n\n/*\na → b で時計方向に折れて b → c\na → b で半時計方向に折れて b → c\na → b で逆を向いて a を通り越して b → c\na → b でそのまま b → c\na → b で逆を向いて b → c ( または b == c )\n*/\n\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > EPS)   return +1;       // counter clockwise\n\tif (cross(b, c) + EPS < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const segment &l, const segment &m) {\n\treturn abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n\t\tabs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const segment &l, const segment &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])*       // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const segment &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSP(const segment &s, const point &p) {\n\tauto a = s[0] - p;\n\tauto b = s[1] - p;\n\treturn (abs(cross(a, b)) < EPS && dot(a, b) <= EPS); // triangle inequality\n}\n//端点の交差も考える\nbool intersectSS(const segment &s, const segment &t) {\n\treturn ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n//端点の交差hは考えない\nbool strictIntersectSS(const segment &s, const segment &t) {\n\treturn ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) == -1 &&\n\t\tccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) == -1;\n}\n\npoint projection(const segment &l, const point &p) {\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + t*(l[0] - l[1]);\n}\npoint reflection(const segment &l, const point &p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\ndouble distanceLP(const segment &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const segment &l, const segment &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const segment &l, const segment &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const segment &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const segment &s, const segment &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const point &a,const point &b){\n\treturn abs(a-b);\n}\n\n/*多角形内包判定\nhalf-line crossing method\nOUT:0\nON:1\nIN:2\n*/\nint contains(const vector<point>& Poly, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < Poly.size(); ++i) {\n\t\tpoint a = curr(Poly, i) - p, b = next(Poly, i) - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) + EPS <= 0 && EPS < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) <= EPS) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n/*\nOUT:0\nON:1\nIN:2\n*/\nint contain_sector(const sector &sec, point &p){\n\tif(eq(abs(p - sec.o), sec.r))return 1;\n\tif(intersectSP(segment(sec.o, sec.a), p))return 1;\n\tif(intersectSP(segment(sec.o, sec.b), p))return 1;\n\tif(abs(p - sec.o) + EPS > sec.r)return 0;\n\tpoint vec = p - sec.o;\n\tpoint vecA = sec.a - sec.o;\n\tpoint vecB = sec.b - sec.o;\n\tif(angle(vec, vecA) + EPS < angle(vecA, vecB) && angle(vec, vecB) + EPS < angle(vecA, vecB))return 2;\n\treturn 0;\n}\n\n//交点\npoint crosspointSS(const segment &l, const segment &m) {\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n\tif (abs(A) < EPS) return point(INF,INF); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\nvector<point> crosspointCL(const circle &c, const segment &l) {\n\tauto ret = vector<point>(2, point(INF, INF));\n\tauto pro_p = projection(l, c.p);\n\tauto dist = distanceLP(l, c.p);\n\tif(abs(dist - c.r) < EPS){\n\t\tret[0] = pro_p;\n\t\treturn ret;\n\t}\n\tif(c.r < dist){\n\t\treturn ret;\n\t}\n\tpoint vec = (l[1] - l[0]) * sqrt(c.r * c.r - dist * dist) / abs(l[1] - l[0]);\n\tret[0] = pro_p + vec;\n\tret[1] = pro_p - vec;\n\treturn ret;\n}\n\nvector<point> crosspointCC(const circle c1, const circle c2) {\n\tauto ret = vector<point>(2, point(INF, INF));\n\tauto dist = abs(c2.p - c1.p);\n\tif(eq(dist, c1.r + c2.r) || eq(dist, abs(c2.r - c1.r))){\n\t\tauto tmp = c2.p - c1.p;\n\t\tret[0] = c1.p + tmp * (c1.r / dist);\n\t\treturn ret;\n\t}\n\tif(c1.r + c2.r < dist || dist < abs(c1.r - c2.r)){\n\t\treturn ret;\n\t}\n\tauto alpha = acos((c1.r * c1.r + dist * dist - c2.r * c2.r) / (2 * c1.r * dist));\n\tauto theta = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n\tret[0] = c1.p + point(cos(theta + alpha) * c1.r, sin(theta + alpha) * c1.r);\n\tret[1] = c1.p + point(cos(theta - alpha) * c1.r, sin(theta - alpha) * c1.r);\n\treturn ret;\n}\n\nbool isOnSector(const sector sec, const point p) {\n\tpoint vec = p - sec.o;\n\tpoint vecA = sec.a - sec.o;\n\tpoint vecB = sec.b - sec.o;\n\tif(eq(angle(vec, vecA) + angle(vec, vecB), angle(vecA, vecB)))return true;\n\treturn false;\n}\n\nvector<point> crosspointSecS(const sector sec, const segment s) {\n\tcircle c = circle(sec.o, sec.r);\n\tauto ret = crosspointCL(c, s);\n\tpoint inf = point(INF, INF);\n\tREP(i, 2){\n\t\tif(eq(ret[i], inf))continue;\n\t\tif(!isOnSector(sec, ret[i])){\n\t\t\tret[i] = inf;\n\t\t\tcontinue;\n\t\t}\n\t\tif(!intersectSP(s, ret[i])){\n\t\t\tret[i] = inf;\n\t\t}\n\t}\n\treturn ret;\n}\nvector<point> crosspointSecSec(const sector sec1, const sector sec2) {\n\tcircle c1 = circle(sec1.o, sec1.r);\n\tcircle c2 = circle(sec2.o, sec2.r);\n\tauto ret = crosspointCC(c1, c2);\n\tpoint inf = point(INF, INF);\n\tREP(i, 2){\n\t\tif(!isOnSector(sec1, ret[i])){\n\t\t\tret[i] = inf;\n\t\t\tcontinue;\n\t\t}\n\t\tif(!isOnSector(sec2, ret[i])){\n\t\t\tret[i] = inf;\n\t\t}\n\t}\n\treturn ret;\n}\n\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2*n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;\n\tfor (int i = n-2, t = k+1;i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n//見えるか(可視グラフ用)\nbool block_off(const point &a, const point &b, const vector<point> &obj) {\n  point m = (a + b) * 0.5;\n  bool on = false, in = false;\n  for (int j = 0; j < obj.size(); ++j) {\n    point c = curr(obj,j), d = next(obj,j);\n    if (imag(d) < imag(c)) swap(c, d);\n    if (cross(a-c,b-c) * cross(a-d,b-d) < 0 &&    // strictly intersect.\n        cross(c-a,d-a) * cross(c-b,d-b) < 0) return true;\n    if (cross(a-c,b-c) == 0 && dot(a-c,b-c) < 0) return true;\n    if (imag(c) <= imag(m) && imag(m) < imag(d))  // strictly contain.\n      if (cross(c-m,d-m) < 0) in = !in;\n    if (cross(c-m,d-m) == 0 && dot(c-m,d-m) <= EPS) on = true;\n  }\n  return !on && in;\n}\n\n//面積\ndouble area(const vector<point>& p) {\n\tdouble A = 0;\n\tfor (int i = 0; i < p.size(); ++i)\n\t\tA += cross(curr(p, i), next(p, i));\n\treturn A / 2.;\n}\n\n//凸包判定\nbool isConvex(vector<point> poly){\n\tint sz = poly.size();\n\tREP(i,sz){\n\t\tint tmp = ccw(poly[i],poly[(i+1)%sz],poly[(i+2)%sz]);\n\t\tif(tmp == -1){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndouble convex_diameter(const vector<point> &pt) {\n  const int n = pt.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(pt[i]) > imag(pt[is])) is = i;\n    if (imag(pt[i]) < imag(pt[js])) js = i;\n  }\n  double maxd = norm(pt[is]-pt[js]);\n\n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(diff(pt,i), diff(pt,j)) >= 0) j = (j+1) % n;\n    else i = (i+1) % n;\n    if (norm(pt[i]-pt[j]) > maxd) {\n      maxd = norm(pt[i]-pt[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return sqrt(maxd); /* farthest pair is (maxi, maxj). */\n}\n\nvector<point> convex_cut(const vector<point> P, const segment& l) {\n  vector<point> Q;\n  for (int i = 0; i < P.size(); ++i) {\n    point A = curr(P, i), B = next(P, i);\n    if (ccw(l[0], l[1], A) != -1) Q.push_back(A);\n    if (ccw(l[0], l[1], A)*ccw(l[0], l[1], B) < 0)\n      Q.push_back(crosspointSS(segment(A, B), l));\n  }\n  return Q;\n}\n\nint main(){\n\tcin.tie(0);cout.tie(0);ios::sync_with_stdio(false);\n\n\tint n;cin >> n;\n\tREP(i, n){\n\t\tdouble a, b, c, d;\n\t\tcin >> a >> b >> c >> d;\n\t\tsegment seg1(point(a, b), point(c, d));\n\t\tcin >> a >> b >> c >> d;\n\t\tsegment seg2(point(a, b), point(c, d));\n\n\t\tif(isParallel(seg1, seg2)){\n\t\t\tcout << 2 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif(isOrthogonal(seg1, seg2)){\n\t\t\tcout << 1 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tcout << 0 << endl;\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include <cassert>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\n#define rep(i,n) for(ll i=0;i<(ll)(n);i++)\n#define all(a)  (a).begin(),(a).end()\n#define vi vector<int>\n#define pb push_back\n#define INF 999999999\n//#define INF (1LL<<59)\n\n#define OUT 0\n#define ON 1\n#define IN 2\n#define EPS (1e-10)\nclass P{                    //???\npublic:\n    double x,y;\n    \n    P(double _x=0,double _y=0):x(_x),y(_y){};\n    P operator + (P &p     ){ return P( x+p.x , y+p.y ); }  //??????\n    P operator - (P &p     ){ return P( x-p.x , y-p.y ); }  //??????\n    P operator * (double k ){ return P( x*k   , y*k    ); } //??????\n    P operator / (double k ){ return P( x/k   , y/k    ); } //??????\n    \n    bool operator == (const P &p){ return ( fabs(x-p.x)<EPS && fabs(y-p.y)<EPS ); }\n    //    bool operator < (const P &p)const{ return ( x!=p.x ? x<p.x:y<p.y ); }\n    \n    double norm(){ return x*x+y*y; }        //?????????\n    double abs() { return sqrt(norm()); }   //??§??????\n    \n};\nstruct C{P p;double r;};    //???\nstruct L{P p1,p2;};         //??´???\ntypedef vector<P> Polygon;  //????§???¢\ntypedef P Vector;           //????????????\n\ndouble dot  (Vector a,Vector b) { return a.x*b.x+a.y*b.y; }\ndouble cross(Vector a,Vector b) { return a.x*b.y-a.y*b.x; }\ndouble sqDist(P a, P b)         {return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);}\ndouble dist (P a, P b)          {return sqrt(sqDist(a,b));}\nVector vec(L a)                 {return P(a.p2.x-a.p1.x,a.p2.y-a.p1.y);}\n\nint ccw(P p0,P p1,P p2){    //AOJ_BOOK_P386 verified\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    \n    if( cross(a,b) > EPS  ) return 1 ;      //COUNTER_CLOCKWISE\n    if( cross(a,b) < -EPS ) return -1;      //CLOCKWISE\n    if( dot(a,b)   < -EPS ) return 2;       //ONLINE_BACK\n    if( a.norm()   < b.norm() ) return -2;  //ONLINE_FRONT\n    \n    return 0;                               //ON_SEGMENT;\n}\n\n//??´?????´????????? verified AOJ0058\nbool orthogonal(P p1,P p2,P p3,P p4){ return abs(dot(p1-p2,p3-p4))<EPS; }\n\n//??????????????????\nbool intersect(P p1,P p2,P p3,P p4){ return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 ); }\n\n//????????¨???????????¢ verified ARC042-B\ndouble dLP(L l, P p) { return abs(cross(l.p2-l.p1, p-l.p1)) /(l.p2-l.p1).abs(); }\n\n//??´?????¨??´????????¢??? verified AOJ CGL_2\nint rLL(L a,L b){\n    if( cross(vec(a),vec(b))==0 ) return 2; //??????\n    if( dot(vec(a),vec(b))==0 )   return 1; //?????´\n    return 0;\n}\n\n// ?????¨??????????????????\nint contains(C c, P p){\n    double d = (c.p-p).abs();\n    if(d-c.r>EPS) return OUT;\n    if(abs(d-c.r)<EPS) return ON;\n    return IN;\n}\n\n//??´?????¨??????????????????(????????£???????????´??????????????±???)\nbool intersect_circle_(P center, double r, L line){\n    if( dLP(line,center) <= r+EPS ) return true;\n    return false;\n}\n\n//????????¨???????????¢ verified QUPC-G\ndouble dSP(L s, P p){\n    if(dot((s.p2-s.p1)   , p-s.p1) <= EPS) return (p - s.p1).abs();\n    if(dot((s.p2-s.p1)*-1, p-s.p2) <= EPS) return (p - s.p2).abs();\n    return dLP(s, p);\n}\n\n//????????¨??????????????????(????????£???????????´??????????????±???) verified QUPC-G\nbool iCS(C c, L l){\n    int c1 = contains(c, l.p1);\n    int c2 = contains(c, l.p2);\n    if(c1 > c2) swap(c1, c2);\n    \n    // (OUT, OUT) (OUT, ON) (OUT, IN) (ON, ON) (ON, IN) (IN, IN) ???6??????\n    if(c1 == OUT && c2 == IN) return true;\n    if(c1 == IN  && c2 == IN) return false;\n    if(c1 == ON) return true; // (??\\????????¨???)\n    double d = dSP(l, c.p);\n    if(d-c.r<-EPS) return true;\n    if(d-c.r>EPS) return false;\n    return true; // (??\\????????¨???)\n}\n\n//????´?????§???¢??????\nbool isSimple( Polygon pol ){\n    //???????????????????????????pol?????\\????????????\n    size_t pol_size = pol.size()-1;\n    rep(i,pol_size){\n        for(int j=i+2;j<pol_size;j++){\n            if( i==j || i==(j-1+pol_size)%pol_size || i==(j+1+pol_size)%pol_size )continue;\n            if( intersect(pol[i], pol[i+1], pol[j], pol[j+1]) )return false;\n        }\n    }\n    return true;\n}\n\n\n//?????????????§???¢????????´?????????????????????????±??????? true???????????´ verified AOJ0012\nbool isPointInsidePolygon(vector<P> pol,P p){\n    int c=0;\n    rep(i,pol.size()){\n        if( cross(pol[i]-pol[(i+1)%pol.size()] , p-pol[(i+1)%pol.size()])>0 ) c++;\n    }\n    return !(c%pol.size());\n}\n\n//?????¨???????§???¢???????????¶???????????????\nint CPOLarea(C c ,Polygon pol){\n    vector<L> lines;\n    vector<int> res(pol.size());\n    bool POLinC=true, isFar=true;\n    \n    rep(i,pol.size()){\n        res[i] = contains(c,pol[i]);\n        if(sqDist(c.p,pol[i])-c.r*c.r<-EPS)isFar=false;\n        lines.pb( L{ pol[i] , pol[(i+1)%pol.size()] });\n    }\n    rep(i,res.size()) if( res[i]==OUT )POLinC=false;\n    \n    rep(i,lines.size()) if( iCS(c,lines[i]) )       return 1;   //????§???¢??¨????????????\n    if( POLinC )                                    return 2;   //????§???¢??????????????¨\n    if( isPointInsidePolygon(pol, c.p) && isFar )   return 3;   //????§???¢????????¨??????\n    return 0;\n}\n\n//?????? verified AOJ0068,QUPC-G\n//???????????§??????\nbool cmp_x(const P& p, const P& q){\n    if(p.x != q.x)return p.x<q.x;\n    return p.y<q.y;\n}\n\n//??????????±???????\nvector<P> convex_hull(vector<P> ps){\n    int n = ps.size();\n    sort(all(ps),cmp_x);\n    int k=0;            //?????????????????°\n    vector<P> qs(n*2);  //?§????????????????\n    //?????´???????????????\n    rep(i,n){\n        while( k>1 && cross((qs[k-1]-qs[k-2]) , (ps[i]-qs[k-1]))<=0 ) k--;\n        qs[k++]=ps[i];\n    }\n    //?????????????????????\n    for(int i=n-2, t=k;i>=0;i--){\n        while( k>t && cross((qs[k-1]-qs[k-2]) , (ps[i]-qs[k-1]))<=0 ) k--;\n        qs[k++]=ps[i];\n    }\n    qs.resize(k-1);\n    return qs;\n}\n\n\nint main(){\n    int n;\n    cin>>n;\n    rep(i,n){\n        L a,b;\n        cin>>a.p1.x>>a.p1.y>>a.p2.x>>a.p2.y>>b.p1.x>>b.p1.y>>b.p2.x>>b.p2.y;\n        cout<<rLL(a,b)<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\n#include <math.h>\n\nusing namespace std;\n\nint main(){\n\tint q;\n\tdouble x1,x2,x3,x4,y1,y2,y3,y4,slope1,slope2;\n\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n\t\tif(x1 == x2 && x3 == x4){\n\t\t\tprintf(\"2\\n\");\n\t\t}else if(x1 == x2 && x3 != x4){\n\t\t\tif(y3 == y4)printf(\"1\\n\");\n\t\t\telse{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}else if(x1 != x2 && x3 == x4){\n\t\t\tif(y1 == y2)printf(\"1\\n\");\n\t\t\telse{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}else{\n\t\t\tslope1 = (y2-y1)/(x2-x1);\n\t\t\tslope2 = (y4-y3)/(x4-x3);\n\t\t\tif(fabs(slope1-slope2) < 0.00001){\n\t\t\t\tprintf(\"2\\n\");\n\t\t\t}else if(fabs(slope1*slope2)+1 < 0.00001){\n\t\t\t\tprintf(\"1\\n\");\n\t\t\t}else{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\n//#define equals( a, b ) (fabs((a) - (b)) < DBL_E)\n\nclass Vector2 {\npublic:\n\tVector2(double x_, double y_) : x(x_), y(y_) {}\n\tVector2() : x(0), y(0) {}\n\tVector2 operator -(Vector2& other) {\n\t\tVector2 vec(x - other.GetX(), y - other.GetY());\n\t\treturn vec;\n\t}\n\tvoid SetVector2(double x_, double y_) {\n\t\tx = x_;\n\t\ty = y_;\n\t}\n\tdouble GetX() {\n\t\treturn x;\n\t}\n\tdouble GetY() {\n\t\treturn y;\n\t}\n\nprivate:\n\tdouble x, y;\n};\n\ndouble Dot(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetX() + vecA.GetY() * vecB.GetY();\n}\n\ndouble CrossY(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetY() - vecA.GetY() * vecB.GetX();\n}\n\nbool IsOrthogonal(Vector2 vecA, Vector2 vecB) {\n    double ans = Dot(vecA, vecB);\n//\treturn equals(ans, 0.0);\n//\treturn (fabs(ans) < DBL_EPSILON);\n\treturn (fabs(ans) < 0.1f);\n}\n\nbool IsParallel(Vector2 vecA, Vector2 vecB) {\n\tdouble ans = CrossY(vecA, vecB);\n//\treturn (fabs(ans) < DBL_EPSILON);\n\treturn (fabs(ans) < 0.1f);\n}\n\nint main() {\n\tint query;\n\tcin >> query;\n\n\tfor (int i = 0; i < query; i++) {\n\t\tVector2 vecs[4];\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tdouble x, y;\n\t\t\tcin >> x >> y;\n\t\t\tvecs[i].SetVector2(x, y);\n\t\t}\n\n\t\tVector2 vecA = vecs[1] - vecs[0];\n\t\tVector2 vecB = vecs[3] - vecs[2];\n\t\tbool orth = IsOrthogonal(vecA, vecB);\n\t\tif (orth) {\n\t\t\tcout << 1 << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tbool para = IsParallel(vecA, vecB);\n\t\tif (para) {\n\t\t\tcout << 2 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tcout << 0 << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n    public:\n    double x, y;\n    \n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double abs() {\n        return sqrt(norm());\n    }\n    double norm() {\n        return x * x + y * y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\n    public:\n        Point c;\n        double r;\n        Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross((s1.p2 - s1.p1), (s2.p2 - s2.p1)), 0.0);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot((s1.p2 - s1.p1), (s2.p2 - s2.p1)), 0.0);\n}\n\nint main() {\n    int q;\n    cin >> q;\n    Segment s1, s2;\n    double x1, y1, x2, y2, x3, y3, x4, y4;\n    for (int i = 0; i < q; i++) {\n        cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3>> x4 >> y4;\n        Point p1 = {x1, y1};\n        Point p2 = {x2, y2};\n        s1 = {p1, p2};\n        Point p3 = {x3, y3};\n        Point p4 = {x4, y4};\n        s2 = {p3, p4};\n\n        if (isParallel(s1, s2)) {\n            cout << \"2\" << endl;\n        } else if (isOrthogonal(s1, s2)) {\n            cout << \"1\" << endl;\n        } else {\n            cout << \"0\" << endl;\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y) {}\n    Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n    Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n    Point operator * (Point p) {return Point(x*p.x,y*p.y);}\n    Point operator / (Point p) {return Point(x/p.x,y/p.y);}\n\n    double abs() {return sqrt(norm());}\n    double norm() {return x*x+y*y;}\n\n    bool operator<(const Point &p) const {\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    bool operator==(const Point &p) const {\n        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a,Vector b) {\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b) {\n    return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b) {\n    return equals(dot(a,b),0.0);\n}\n\nbool isPallalel(Vector a,Vector b) {\n    return equals(cross(a,b),0.0);\n}\n\nint main(void) {\n    int n;\n    cin>>n;\nVector a1,a2,b1,b2;\n    while(n) {\n        cin>>a1.x>>a1.y>>a2.x>>a2.y>>b1.x>>b1.y>>b2.x>>b2.y;\n        Vector s,t;\n        s=a1-a2;\n        t=b1-b2;\n        if(isPallalel(s,t)) cout<<2<<endl;\n        else if(isOrthogonal(s,t)) cout<<1<<endl;\n        else cout<<0<<endl;\n        n--;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define PI 3.141592653589793238\n#define int long long\n \nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\nistream &operator >> (istream &is,Point &p){\n  is>>p.x>>p.y;\n  return is;\n}\n\nostream &operator << (ostream &os,Point p){\n  os<<fixed<<setprecision(12)<<p.x<<\" \"<<p.y;\n  return os;\n}\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(){}\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<(int)s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\ndouble area(Polygon s){\n  double res=0;\n  for(int i=0;i<(int)s.size();i++){\n    res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n  }\n  return abs(res);\n}\n\n\nPoint getCrossPointLL(Line l1,Line l2){\n  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);\n  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);\n  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1;\n  return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\n\nPolygon convexCut(Polygon p,Line l){\n  Polygon q;\n  for(int i=0;i<(int)p.size();i++){\n    Point a=p[i],b=p[(i+1)%p.size()];\n    if(ccw(l.p1,l.p2,a)!=-1) q.push_back(a);\n    if(ccw(l.p1,l.p2,a)*ccw(l.p1,l.p2,b)<0)\n      q.push_back(getCrossPointLL(Line(a,b),l));\n  }\n  return q;\n}\n\nLine bisector(Point p1,Point p2){\n  Circle c1=Circle(p1,abs(p1-p2)),c2=Circle(p2,abs(p1-p2));\n  pair<Point,Point> p=getCrossPoints(c1,c2);\n  if(cross(p2-p1,p.first-p1)>0) swap(p.first,p.second);\n  return Line(p.first,p.second);\n}\n\n\nVector spin(Vector v,double theta){\n  Vector res;\n  res.x=cos(theta)*v.x-sin(theta)*v.y;\n  res.y=sin(theta)*v.x+cos(theta)*v.y;\n  return res;\n}\n\nvector<Line> corner(Line l1,Line l2){\n  vector<Line> res;\n  if(isParallel(l1,l2)){\n    double d=getDistanceLP(l1,l2.p1)/2.0;\n    Vector v1=l1.p2-l1.p1;\n    v1=v1/v1.abs()*d;\n    Point p=l2.p1+spin(v1,90.0*(PI/180.0));\n    double d1=getDistanceLP(l1,p);\n    double d2=getDistanceLP(l2,p);\n    if(abs(d1-d2)>d){\n      p=l2.p1+spin(v1,-90.0*(PI/180.0));\n    }\n    res.push_back(Line(p,p+v1));\n  }else{\n    Point p=getCrossPointLL(l1,l2);\n    Vector v1=l1.p2-l1.p1,v2=l2.p2-l2.p1;\n    v1=v1/v1.abs();\n    v2=v2/v2.abs();\n    res.push_back(Line(p,p+(v1+v2)));\n    res.push_back(Line(p,p+spin(v1+v2,90.0*(PI/180.0))));\n  }\n  return res;\n}\n\nsigned main(){\n  int q;\n  cin>>q;\n  while(q--){\n    Point p0,p1,p2,p3;\n    cin>>p0>>p1>>p2>>p3;\n    if(isParallel(Line(p0,p1),Line(p2,p3))) cout<<2<<endl;\n    else if(isOrthogonal(Line(p0,p1),Line(p2,p3))) cout<<1<<endl;\n    else cout<<0<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n#include <cstdlib>\n#include <cmath>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <ctime>\n#include <vector>\n#include <fstream>\n#include <list>\n#include <iomanip>\n#include <numeric>\nusing namespace std;\n#define ll long long\n#define ull unsigned long long\n#define db double\n#define REP(i, lim) for(int i=0;i<lim;++i)\n#define REPP(i, lim) for(int i=1;i<=lim;++i)\n#define DEC(i, lim) for(int i=lim;i>=1;--i)\n#define FOR(i,l,r)  for(int i=l;i<r;++i)\n#define deBug cout<<\"===================================\"<<endl;\n#define clr(s) memset(s, 0, sizeof(s))\n#define lowclr(s) memset(s, -1, sizeof(s))\nconst int MAXN = 1000055;\nconst int inf = 0x3f3f3f3f;\nconst double pi = acos(-1.0);\nconst db eps = 1e-9;\n\ninline int sgn(db x) { return x<-eps ? -1 : x>eps; }\ninline db sqr(db x) { return x*x; }\n\n#define cross(p1, p2, p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1, p2, p3) sgn(cross(p1, p2, p3))\n\nstruct P {\n    // information\n    P() {}\n    P(db _x, db _y) : x(_x), y(_y) {}\n    db x, y;\n\n    // operation\n    P operator + (P p)   const{ return P(x+p.x, y+p.y); }\n    P operator - (P p)   const{ return P(x-p.x, y-p.y); }\n    P operator * (db d)  const{ return P(x*d, y*d); }\n    P operator / (db d)  const{ return P(x/d, y/d); }\n\n    db dot(P p) { return x * p.x + y * p.y; } // 点积\n    db det(P p) { return x * p.y - y + p.x; } // 叉积\n\n    // other\n    void input() { scanf(\"%lf%lf\", &x, &y); }\n    void print() { printf(\"(%lf, %lf)\\n\", x, y); }\n\n    db dis(P p) { return sqrt(sqr(x-p.x) + sqr(y-p.y)); }\n    db dis2(P p) { return sqr(dis(p)); }\n};\n\nP getProjection(P a, P b, P p) {\n    // (p1, q) 在 (p1, q2) 上的投影点\n    P dir = b-a;\n    return a + dir * ( dir.dot(p-a) / a.dis2(b) );\n}\nP getReflection(P a, P b, P p) { return getProjection(a, b, p) * 2 - p; }\n\nbool isParallel(P p1, P p2, P q1, P q2) {\n    db a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n    return sgn(a1+a2) == 0;\n}\n\nint main()\n{\n//    freopen(\"in.txt\", \"r\", stdin);\n//    freopen(\"out.txt\", \"w\", stdout);\n//    std::ios::sync_with_stdio(false); cin.tie(0);\n\n    int T;\n    scanf(\"%d\", &T);\n    while(T--)\n    {\n        P p1, p2, q1, q2;\n        p1.input(); p2.input(), q1.input(); q2.input();\n\n        if(isParallel(p1, p2, q1, q2)) printf(\"2\\n\");\n        else{\n            P qq1 = q1 - (q1-p1), qq2 = q2 - (q1-p1);\n            if (sgn((qq2-qq1).dot(p2-p1)) == 0) printf(\"1\\n\");\n            else                                printf(\"0\\n\");\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double lf;\ntypedef pair<int, int> pii;\n\nconst int MAXN = 5;\nconst int MOD = 1e9+7;\n\nconst lf eps = 1e-9;\ntypedef double T;\nstruct pt {\n  T x, y;\n  pt operator + (pt p) { return {x+p.x, y+p.y}; }\n  pt operator - (pt p) { return {x-p.x, y-p.y}; }\n  pt operator * (pt p) { return {x*p.x-y*p.y, x*p.y+y*p.x}; }\n  pt operator * (T d) { return {x*d, y*d}; }\n  pt operator / (T d) { return {x/d, y/d}; } /// only for floating point\n  bool operator == (pt b) { return x == b.x && y == b.y; }\n  bool operator != (pt b) { return !(*this == b); }\n  bool operator < (const pt &o) const { return y < o.y || (y == o.y && x < o.x); }\n  bool operator > (const pt &o) const { return y > o.y || (y == o.y && x > o.x); }\n};\nint cmp (lf a, lf b) { return (a + eps < b ? -1 :(b + eps < a ? 1 : 0)); }\n/** Already in complex **/\nT norm(pt a) { return a.x*a.x + a.y*a.y; }\nT abs(pt a) { return sqrt(norm(a)); }\nT arg(pt a) { return atan2(a.y, a.x); }\nostream& operator << (ostream& os, pt &p) {\n  return os << \"(\"<< p.x << \",\" << p.y << \")\";\n}\n/***/\nistream &operator >> (istream &in, pt &p) {\n    T x, y; in >> x >> y;\n    p = {x, y};\n    return in;\n}\nT dot(pt a, pt b) { return a.x*b.x + a.y*b.y; }\nT cross(pt a, pt b) { return a.x*b.y - a.y*b.x; }\nT orient(pt a, pt b, pt c) { return cross(b-a,c-a); }\n//pt rot(pt p, lf a) { return {p.x*cos(a) - p.y*sin(a), p.x*sin(a) + p.y*cos(a)}; }\n//pt rot(pt p, double a) { return p * polar(1.0, a); } /// for complex\n//pt rotate_to_b(pt a, pt b, lf ang) { return rot(a-b, ang)+b; }\npt rot90ccw(pt p) { return {-p.y, p.x}; }\npt rot90cw(pt p) { return {p.y, -p.x}; }\npt translate(pt p, pt v) { return p+v; }\npt scale(pt p, double f, pt c) { return c + (p-c)*f; }\nbool are_perp(pt v, pt w) { return dot(v,w) == 0; }\nint sign(T x) { return (T(0) < x) - (x < T(0)); }\npt unit(pt a) { return a/abs(a); }\n\nbool in_angle(pt a, pt b, pt c, pt x) {\n  assert(orient(a,b,c) != 0);\n  if (orient(a,b,c) < 0) swap(b,c);\n  return orient(a,b,x) >= 0 && orient(a,c,x) <= 0;\n}\n\n//lf angle(pt a, pt b) { return acos(max(-1.0, min(1.0, dot(a,b)/abs(a)/abs(b)))); }\n//lf angle(pt a, pt b) { return atan2(cross(a, b), dot(a, b)); }\n/// returns vector to transform points\npt get_linear_transformation(pt p, pt q, pt r, pt fp, pt fq) {\n  pt pq = q-p, num{cross(pq, fq-fp), dot(pq, fq-fp)};\n  return fp + pt{cross(r-p, num), dot(r-p, num)} / norm(pq);\n}\n\nbool half(pt p) { /// true if is in (0, 180]\n  assert(p.x != 0 || p.y != 0); /// the argument of (0,0) is undefined\n  return p.y > 0 || (p.y == 0 && p.x < 0);\n}\nbool half_from(pt p, pt v = {1, 0}) {\n  return cross(v,p) < 0 || (cross(v,p) == 0 && dot(v,p) < 0);\n}\nbool polar_cmp(const pt &a, const pt &b) {\n  return make_tuple(half(a), 0) < make_tuple(half(b), cross(a,b));\n}\n\nstruct line {\n  pt v; T c;\n  line(pt v, T c) : v(v), c(c) {}\n  line(T a, T b, T c) : v({b,-a}), c(c) {}\n  line(pt p, pt q) : v(q-p), c(cross(v,p)) {}\n  T side(pt p) { return cross(v,p)-c; }\n  lf dist(pt p) { return abs(side(p)) / abs(v); }\n  lf sq_dist(pt p) { return side(p)*side(p) / (lf)norm(v); }\n  line perp_through(pt p) { return {p, p + rot90ccw(v)}; }\n  bool cmp_proj(pt p, pt q) { return dot(v,p) < dot(v,q); }\n  line translate(pt t) { return {v, c + cross(v,t)}; }\n  line shift_left(double d) { return {v, c + d*abs(v)}; }\n  pt proj(pt p) { return p - rot90ccw(v)*side(p)/norm(v); }\n  pt refl(pt p) { return p - rot90ccw(v)*2*side(p)/norm(v); }\n};\n\nbool inter_ll(line l1, line l2, pt &out) {\n  T d = cross(l1.v, l2.v);\n  if (d == 0) return false;\n  out = (l2.v*l1.c - l1.v*l2.c) / d;\n  return true;\n}\n/*line bisector(line l1, line l2, bool interior) {\n  assert(cross(l1.v, l2.v) != 0); /// l1 and l2 cannot be parallel!\n  lf sign = interior ? 1 : -1;\n  return {l2.v/abs(l2.v) + l1.v/abs(l1.v) * sign,\n          l2.c/abs(l2.v) + l1.c/abs(l1.v) * sign};\n}*/\n\nbool in_disk(pt a, pt b, pt p) {\n  return dot(a-p, b-p) <= 0;\n}\nbool on_segment(pt a, pt b, pt p) {\n  return orient(a,b,p) == 0 && in_disk(a,b,p);\n}\nbool proper_inter(pt a, pt b, pt c, pt d, pt &out) {\n  T oa = orient(c,d,a),\n  ob = orient(c,d,b),\n  oc = orient(a,b,c),\n  od = orient(a,b,d);\n  /// Proper intersection exists iff opposite signs\n  if (oa*ob < 0 && oc*od < 0) {\n    out = (a*ob - b*oa) / (ob-oa);\n    return true;\n  }\n  return false;\n}\nset<pt> inter_ss(pt a, pt b, pt c, pt d) {\n  pt out;\n  if (proper_inter(a,b,c,d,out)) return {out};\n  set<pt> s;\n  if (on_segment(c,d,a)) s.insert(a);\n  if (on_segment(c,d,b)) s.insert(b);\n  if (on_segment(a,b,c)) s.insert(c);\n  if (on_segment(a,b,d)) s.insert(d);\n  return s;\n}\nlf pt_to_seg(pt a, pt b, pt p) {\n  if(a != b) {\n    line l(a,b);\n    if (l.cmp_proj(a,p) && l.cmp_proj(p,b)) /// if closest to  projection\n      return l.dist(p); /// output distance to line\n  }\n  return min(abs(p-a), abs(p-b)); /// otherwise distance to A or B\n}\nlf seg_to_seg(pt a, pt b, pt c, pt d) {\n  pt dummy;\n  if (proper_inter(a,b,c,d,dummy)) return 0;\n  return min({pt_to_seg(a,b,c), pt_to_seg(a,b,d),\n              pt_to_seg(c,d,a), pt_to_seg(c,d,b)});\n}\n\nenum {IN, OUT, ON};\nstruct polygon {\n  vector<pt> p;\n  polygon(int n) : p(n) {}\n  int top = -1, bottom = -1;\n  void delete_repetead() {\n    vector<pt> aux;\n    sort(p.begin(), p.end());\n    for(pt &i : p)\n      if(aux.empty() || aux.back() != i)\n        aux.push_back(i);\n    p.swap(aux);\n  }\n  bool is_convex() {\n    bool pos = 0, neg = 0;\n    for (int i = 0, n = p.size(); i < n; i++) {\n      int o = orient(p[i], p[(i+1)%n], p[(i+2)%n]);\n      if (o > 0) pos = 1;\n      if (o < 0) neg = 1;\n    }\n    return !(pos && neg);\n  }\n  lf area() {\n    lf ans = 0;\n    for (int i = 0, n = p.size(); i < n; i++)\n      ans += cross(p[i], p[(i+1)%n]);\n    return abs(ans) / 2.0;\n  }\n  lf perimeter() {\n    lf per = 0;\n    for(int i = 0, n = p.size(); i < n; i++)\n      per += abs(p[i] - p[(i+1)%n]);\n    return per;\n  }\n  bool above(pt a, pt p) { return p.y >= a.y; }\n  bool crosses_ray(pt a, pt p, pt q) {\n    return (above(a,q)-above(a,p))*orient(a,p,q) > 0;\n  }\n  int in_polygon(pt a) {\n    int crosses = 0;\n    for(int i = 0, n = p.size(); i < n; i++) {\n      if(on_segment(p[i], p[(i+1)%n], a)) return ON;\n      crosses += crosses_ray(a, p[i], p[(i+1)%n]);\n    }\n    return (crosses&1 ? IN : OUT);\n  }\n  void normalize() { /// polygon is CCW\n    bottom = min_element(p.begin(), p.end()) - p.begin();\n    vector<pt> tmp(p.begin()+bottom, p.end());\n    tmp.insert(tmp.end(), p.begin(), p.begin()+bottom);\n    p.swap(tmp);\n    bottom = 0;\n    top = max_element(p.begin(), p.end()) - p.begin();\n  }\n  int in_convex(pt a) {\n    assert(bottom == 0 && top != -1);\n    if(a < p[0] || a > p[top]) return OUT;\n    T orientation = orient(p[0], p[top], a);\n    if(orientation == 0) {\n      if(a == p[0] || a == p[top]) return ON;\n      return top == 1 || top + 1 == p.size() ? ON : IN;\n    } else if (orientation < 0) {\n      auto it = lower_bound(p.begin()+1, p.begin()+top, a);\n      T d = orient(*prev(it), a, *it);\n      return d < 0 ? IN : (d > 0 ? OUT: ON);\n    }\n    else {\n      auto it = upper_bound(p.rbegin(), p.rend()-top-1, a);\n      T d = orient(*it, a, it == p.rbegin() ? p[0] : *prev(it));\n      return d < 0 ? IN : (d > 0 ? OUT: ON);\n    }\n  }\n  polygon cut(pt a, pt b) {\n    line l(a, b);\n    polygon new_polygon(0);\n    for(int i = 0, n = p.size(); i < n; ++i) {\n      pt c = p[i], d = p[(i+1)%n];\n      lf abc = cross(b-a, c-a), abd = cross(b-a, d-a);\n      if(abc >= 0) new_polygon.p.push_back(c);\n      if(abc*abd < 0) {\n        pt out; inter_ll(l, line(c, d), out);\n        new_polygon.p.push_back(out);\n      }\n    }\n    return new_polygon;\n  }\n  void convex_hull() {\n    sort(p.begin(), p.end());\n    vector<pt> ch;\n    ch.reserve(p.size()+1);\n    for(int it = 0; it < 2; it++) {\n      int start = ch.size();\n      for(auto &a : p) {\n        /// if colineal are needed, use < and remove repeated points\n        while(ch.size() >= start+2 && orient(ch[ch.size()-2], ch.back(), a) <= 0)\n          ch.pop_back();\n        ch.push_back(a);\n      }\n      ch.pop_back();\n      reverse(p.begin(), p.end());\n    }\n    if(ch.size() == 2 && ch[0] == ch[1]) ch.pop_back();\n    /// be careful with CH of size < 3\n    p.swap(ch);\n  }\n  ll pick() {\n    ll boundary = 0;\n    for(int i = 0, n = p.size(); i < n; i++) {\n      int j = (i+1 == n ? 0 : i+1);\n      boundary += __gcd((ll)abs(p[i].x - p[j].x), (ll)abs(p[i].y - p[j].y));\n    }\n    return area() + 1 - boundary/2;\n  }\n  pt& operator[] (int i){ return p[i]; }\n};\n\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n\n  #ifdef LOCAL\n      freopen(\"input.txt\", \"r\", stdin);\n      freopen(\"output.txt\", \"w\", stdout);\n  #else\n      #define endl '\\n'\n  #endif // LOCAL\n\n  int q; cin >> q;\n  cout << fixed << setprecision(10);\n  while(q--) {\n    pt a, b, c, d; cin >> a >> b >> c >> d;\n    line l1(a, b);\n    line l2(c, d);\n    pt out;\n    if(inter_ll(l1, l2, out)) {\n      l1 = l1.perp_through({0, 0});\n      if(inter_ll(l1, l2, out)) {\n        cout << 0 << endl;\n      } else {\n        cout << 1 << endl;\n      }\n    } else {\n      cout << 2 << endl;\n    }\n\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\ntypedef struct {\n\tint x;\n\tint y;\n}Point;\n\ntypedef struct {\n\tPoint p1, p2;\n}Line;\n\nint main() {\n\tLine s1, s2;\n\t\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0;i < q;i++) {\n\t\tcin >> s1.p1.x; \n\t\tcin >> s1.p1.y;\n\t\tcin >> s1.p2.x;\n\t\tcin >> s1.p2.y;\n\t\tcin >> s2.p1.x;\n\t\tcin >> s2.p1.y;\n\t\tcin >> s2.p2.x;\n\t\tcin >> s2.p2.y;\n\t\tint grad1 = (s1.p1.y - s1.p2.y),grad2= (s1.p1.x - s1.p2.x);\n\t    int grad3 =(s2.p1.y - s2.p2.y),grad4= (s2.p1.x - s2.p2.x);\n\t\tif (grad1*grad4 == grad2*grad3) cout << 2 << endl;\n\t\telse if(grad1*grad3+grad2*grad4==0) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nint dcmp(double d) {\n    if (fabs(d) < EPS) {\n        return 0;\n    }\n    return d < 0? -1 : 1;\n}\n\nstruct Vector {\n    double x, y;\n    Vector(double x=0, double y=0): x(x), y(y){\n    }\n};\n\ntypedef Vector Point;\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nVector operator-(const Vector& a, const Vector& b) {\n    return Vector(a.x - b.x, a.y - b.y);\n}\n\nint main() {\n    Point points[4];\n    int q;\n    cin >> q;\n    for (int kase = 0; kase < q; kase++) {\n        for (int i = 0; i < 4; i++) {\n            cin >> points[i].x >> points[i].y;\n        }\n        Vector v1 = points[1] - points[0];\n        Vector v2 = points[3] - points[2];\n\n        double c = cross(v1, v2);\n        double d = dot(v1, v2);\n        \n        if (dcmp(d) == 0) {\n            cout << 1 << endl;\n        }\n        else if (dcmp(c) == 0) {\n            cout << 2 << endl;\n        }\n        else {\n            cout << 0 << endl;\n        }\n    }\n   \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint n;\ndouble xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3,l1,r1,l2,r2,sum;\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1; i<=n; i++){\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&xp0,&yp0,&xp1,&yp1,&xp2,&yp2,&xp3,&yp3);\n\t\tl1=xp1-xp0;\n\t\tr1=yp1-yp0;\n\t\tl2=xp3-xp2;\n\t\tr2=yp3-yp2;\n\t\tsum=l1*r2-l2*r1;\n\t\tif(sum==0)printf(\"2\\n\");\n\t\telse{\n\t\t\tsum=l1*l2+r1*r2;\n\t\t\tif(sum==0)printf(\"1\\n\");\n\t\t\telse printf(\"0\\n\");\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\nint main() {\n    int q;\n    cin >> q;\n    int p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y;\n    for (int i = 0; i < q; i++) {\n        cin >> p0x >> p0y >> p1x >> p1y >> p2x >> p2y >> p3x >> p3y;\n        int s1x = p0x - p1x, s1y = p0y - p1y;\n        int s2x = p2x - p3x, s2y = p2y - p3y;\n        if (s1x * s2x + s1y * s2y == 0) {\n            cout << 1 << endl;\n        } else if (s1x * s2y - s1y * s2x == 0)  {\n            cout << 2 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nconst double eps=1e-7;\n\nint sgn(double a){\n    if (fabs(a)<eps) return 0;\n    if (a>0) return 1;\n    return -1;\n}\n\nstruct Point{\n    Point(double _x=0,double _y=0):x(_x),y(_y){}\n    \n    Point operator + (Point p) const {return Point(x+p.x,y+p.y);}\n    Point operator - (Point p) const {return Point(x-p.x,y-p.y);}\n    Point operator * (double d) const {return Point(x*d,y*d);}\n    \n    double Length() const{\n        return sqrt(x*x+y*y);\n    }\n    \n    double SqrLength() const{\n        return x*x+y*y;\n    }\n    \n    void Read(){\n        scanf(\"%lf%lf\",&x,&y);\n    }\n    \n    void Write(){\n        printf(\"%.10f %.10f\\n\",x,y);\n    }\n    \n    double x,y;  \n\n    friend double Dot(Point p1,Point p2){\n        return p1.x*p2.x+p1.y*p2.y;\n    }\n    \n    friend double Cross(Point p1,Point p2){\n        return p1.x*p2.y-p1.y*p2.x;\n    }\n};\n\nstruct Line{\n    Line(){}\n    \n    void Read() {\n        s.Read(); t.Read();\n    }\n    \n    Point Direction() const{\n        return t-s;\n    }\n    \n    Point s,t;\n    \n    \n    \n    friend Point Project(Point p,Line l){\n        Point dir=l.t-l.s;\n        return l.s+dir*(Dot(dir,p-l.s)/dir.SqrLength());\n    }\n    \n    friend Point Reflect(Point p,Line l){\n        Point q=Project(p,l);\n        Point ret=q*2-p;\n        return ret;\n    }\n    \n    // 2: Parallel 1: orthogonal 0: otherwise\n    friend int Type(Line l1,Line l2){\n        Point d1=l1.Direction(),d2=l2.Direction();\n        if (sgn(Cross(d1,d2))==0) return 2;\n        if (sgn(Dot(d1,d2))==0) return 1;\n        return 0;\n    }\n};\n\nint main(){\n    int n; scanf(\"%d\",&n);\n    while(n--){\n        Line l1,l2;\n        l1.Read(); l2.Read();  \n        int ans=Type(l1,l2);\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cassert>\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) FOR(i,0,n)\n#define rep(i,n) FOR(i,0,n)\n#define DEBUG(x) cout<<#x<<\": \"<<x<<endl\n#define vint vector<int>\n#define vdouble vector<double>\n#define vstring vector<string>\nusing namespace std;\n\n#include<map>\n#include<set>\n#include<queue>\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nconst int MAX_N = 1000000;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n    Point(double x=0, double y=0):x(x), y(y){}\n\n    Point operator + (Point p){ return Point(x + p.x, y + p.y); }\n    Point operator - (Point p){ return Point(x - p.x, y - p.y); }\n    Point operator * (double a){ return Point(a * x, a * y); }\n    Point operator / (double a){ return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y;}\n    bool operator < (const Point &p) const {\n        // first x, second y\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    //|a||b|cos(theta)\n    return a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n    //|a||b|sin(theta)\n    return a.x * b.y - a.y * b.x;\n}\n\nint main() {\n\n    int Q;\n    cin >> Q;\n    rep(i, Q){\n        double xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n        Vector v1(xp0 - xp1, yp0 - yp1);\n        Vector v2(xp2 - xp3, yp2 - yp3);\n\n        if(equals(dot(v1, v2), 0.0)){ cout << 1 << endl;}\n        else if(equals(cross(v1, v2), 0.0)){ cout << 2 << endl;}\n        else {cout << 0 << endl;}\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\n#include <math.h>\n\nusing namespace std;\n\nint main(){\n\tint q;\n\tdouble x1,x2,x3,x4,y1,y2,y3,y4,slope1,slope2;\n\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n\t\tif(x1 == x2 && x3 == x4){\n\t\t\tprintf(\"2\\n\");\n\t\t}else if(x1 == x2 && x3 != x4){\n\t\t\tif(y3 == y4)printf(\"1\\n\");\n\t\t\telse{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}else if(x1 != x2 && x3 == x4){\n\t\t\tif(y1 == y2)printf(\"1\\n\");\n\t\t\telse{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}else{\n\t\t\tslope1 = (y2-y1)/(x2-x1);\n\t\t\tslope2 = (y4-y3)/(x4-x3);\n\t\t\tif(fabs(slope1-slope2) < 0.00000001){\n\t\t\t\tprintf(\"2\\n\");\n\t\t\t}else if(slope1*slope2 == -1){\n\t\t\t\tprintf(\"1\\n\");\n\t\t\t}else{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\ntypedef struct _Vector{\n\tint x,y;\n}Vector;\n\nint main(){\n\tVector s1,s2;\n\t\n\tint q,x0,x1,x2,x3,y0,y1,y2,y3,i;\n\t\n\tfor(cin>>q,i=q;i--;){\n\t\t\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\t\n\t\ts1.x = x1-x0;\n\t\ts1.y = y1-y0;\n\t\t\n\t\ts2.x = x3-x2;\n\t\ts2.y = y3-y2;\n\t\t\n\t\tif(s1.x*s2.y - s1.y*s2.x == 0)cout<<2;\n\t\telse if(s1.x*s2.x + s1.y*s2.y == 0)cout<<1;\n\t\telse cout<<0;\n\t\t\n\t\tcout<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct F {\n\tlong long a, b;\n\tF() {}\n\tF(long long _a, long long _b) : a(_a), b(_b) {}\n\tF operator + (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.a + a * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator - (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.a - a * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator * (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator / (const F &f) {\n\t\tlong long x = a * f.b, y = b * f.a;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n};\nconst double pi = acos(-1);\nconst double eps = 1e-8;\ninline int sign(double a) {\n\treturn a < -eps ? -1 : a > eps;\n}\ninline int cmp(double a, double b) {\n\treturn sign(a - b);\n}\ndouble add(double a, double b) {\n\tif (abs(a + b) < eps * (abs(a) + abs(b))) return 0;\n\treturn a + b;\n}\ntypedef long long data;\nstruct P {\n\tdata x, y;\n\tP() {}\n\tP(data x, data y) : x(x), y(y) {}\n\tP operator + (const P &p) { return P(x + p.x, y + p.y); }\n\tP operator - (const P &p) { return P(x - p.x, y - p.y); }\n\tP operator * (data d) { return P(x * d, y * d); }\n\tP operator / (data d) { return P(x / d, y / d); }\n\tdata dot(const P &p) { return x * p.x + y * p.y; }\n\tdata det(const P &p) { return x * p.y - y * p.x; }\n\tdata disto(const P &p) { return (*this - p).abs(); }\n\tdata alpha() { return atan2(y, x); }\n\tdata abs() { return sqrt(abs2()); }\n\tdata abs2() { return x * x + y * y; }\n\tP rot90() { P(-y, x); }\n\tP unit() { return *this / abs(); }\n\tbool operator < (P p) const {\n\t\tint c = cmp(x, p.x);\n\t\tif (c) return c == -1;\n\t\treturn cmp(y, p.y) == -1;\n\t}\n\tfriend istream& operator>>(istream &in, P &p) {\n\t\tin >> p.x >> p.y;\n\t\treturn in;\n\t}\n\tfriend ostream& operator<<(ostream& out, P &p) {\n\t\tout << p.x << ' ' << p.y;\n\t\treturn out;\n\t}\n};\nP projection(P p1, P p2, P q) {\n\tP dir = p2 - p1;\n\treturn p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\nP reflection(P p1, P p2, P q) {\n\treturn projection(p1, p2, q) * 2 - q;\n}\nbool on_seg(P p1, P p2, P q) {\n\treturn (p1 - q).det(p2 - q) == 0 && (p1 - q).dot(p2 - q) <= 0;\n}\nP intersection(P p1, P p2, P q1, P q2) {\n\treturn p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n}\n\nint main() {\n#ifdef LOCAL_DEFINE\n\t//freopen(\"data.in\", \"rt\", stdin);\n\t//freopen(\"data.out\", \"w\", stdout);\n\tauto _start = chrono::high_resolution_clock::now();\n#endif\n\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout << fixed << setprecision(15);\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tP p0, p1, p2, p3;\n\t\tcin >> p0 >> p1 >> p2 >> p3;\n\t\tif((p0 - p1).det(p2 - p3) == 0) {\n\t\t\tcout << \"2\\n\";\n\t\t} else if((p0 - p1).dot(p2 - p3) == 0) {\n\t\t\tcout << \"1\\n\";\n\t\t} else {\n\t\t\tcout << \"0\\n\";\n\t\t}\n\t}\n\n#ifdef LOCAL_DEFINE\n\tauto _end = chrono::high_resolution_clock::now();\n\tcerr << \"elapsed time: \" << chrono::duration<double, milli>(_end - _start).count() << \" ms\\n\";\n#endif\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\nusing namespace std;\n\nconst double EPS = 1e-10;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k * x, k * y);\n\t}\n\tPoint operator / (double k) {\n\t\treturn Point(x / k, y / k);\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint main() {\n\tint q;\n\tcin >> q;\n\tdouble x0, y0, x1, y1, x2, y2, x3, y3;\n\tVector a, b;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\ta = Vector(x1 - x0, y1 - y0);\n\t\tb = Vector(x3 - x2, y3 - y2);\n\t\tif (cross(a, b) < EPS) cout << 2;\n\t\telse if (dot(a, b) < EPS) cout << 1;\n\t\telse cout << 0;\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\nusing namespace std;\n\nint calc(int ax, int ay, int bx, int by){\n  if(ax * bx + ay * by == 0){\n    return 1;\n  }\n\n  if(ax * by - ay * bx == 0){\n    return 2;\n  }\n\n  return 0;\n}\n\nint main(){\n  int q, i, xp0, xp1, xp2, xp3, yp0, yp1, yp2, yp3;\n  cin >> q;\n  int A[q];\n\n  for(i = 0; i < q; i++){\n    cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n    A[i] = calc(xp1-xp0,yp1-yp0, xp3-xp2, yp3-yp2);\n  }\n\n  for(i = 0; i < q; i++){\n    cout << A[i] << endl;\n  }\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"-fgcse\")\n#pragma GCC optimize(\"-fgcse-lm\")\n#pragma GCC optimize(\"-fipa-sra\")\n#pragma GCC optimize(\"-ftree-pre\")\n#pragma GCC optimize(\"-ftree-vrp\")\n#pragma GCC optimize(\"-fpeephole2\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-fsched-spec\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC optimize(\"-falign-jumps\")\n#pragma GCC optimize(\"-falign-loops\")\n#pragma GCC optimize(\"-falign-labels\")\n#pragma GCC optimize(\"-fdevirtualize\")\n#pragma GCC optimize(\"-fcaller-saves\")\n#pragma GCC optimize(\"-fcrossjumping\")\n#pragma GCC optimize(\"-fthread-jumps\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-fwhole-program\")\n#pragma GCC optimize(\"-freorder-blocks\")\n#pragma GCC optimize(\"-fschedule-insns\")\n#pragma GCC optimize(\"inline-functions\")\n#pragma GCC optimize(\"-fschedule-insns2\")\n#pragma GCC optimize(\"-fstrict-aliasing\")\n#pragma GCC optimize(\"-fstrict-overflow\")\n#pragma GCC optimize(\"-falign-functions\")\n#pragma GCC optimize(\"-fcse-skip-blocks\")\n#pragma GCC optimize(\"-fcse-follow-jumps\")\n#pragma GCC optimize(\"-fsched-interblock\")\n#pragma GCC optimize(\"-fpartial-inlining\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"-freorder-functions\")\n#pragma GCC optimize(\"-findirect-inlining\")\n#pragma GCC optimize(\"inline-small-functions\")\n#pragma GCC optimize(\"-finline-small-functions\")\n#pragma GCC optimize(\"-ftree-switch-conversion\")\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\n#pragma GCC optimize(\"-fexpensive-optimizations\")\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\n#pragma GCC optimize(\"inline-functions-called-once\")\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\n#define mp make_pair\n#define PI pair<int,int>\n#define poly vector<int>\n#define For(i,l,r) for(int i=(int)(l);i<=(int)(r);i++)\n#define Rep(i,r,l) for(int i=(int)(r);i>=(int)(l);i--)\n#define pb push_back\n#define mem(a) memset((a),0,sizeof(a))\n#define fi first\n#define se second\ninline char gc(){\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\n#define gc getchar\ninline ll read(){\n\tll x = 0; char ch = gc(); bool positive = 1;\n\tfor (; !isdigit(ch); ch = gc())\tif (ch == '-')\tpositive = 0;\n\tfor (; isdigit(ch); ch = gc())\tx = x * 10 + ch - '0';\n\treturn positive ? x : -x;\n}\ninline void write(ll a){\n    if(a<0){\n    \ta=-a; putchar('-');\n\t}\n    if(a>=10)write(a/10);\n    putchar('0'+a%10);\n}\ninline void writeln(ll a){write(a); puts(\"\");}\ninline void wri(ll a){write(a); putchar(' ');}\ndouble x,y,xx,yy,xxx,yyy,xxxx,yyyy;\nint q;\nint main(){\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x>>y>>xx>>yy>>xxx>>yyy>>xxxx>>yyyy;\n\t\txx-=x,yy-=y;\n\t\txxxx-=xxx,yyyy-=yyy;\n\t\tif(xxxx*xx+yyyy*yy==0) cout<<\"1\"<<endl;\n\t\telse{\n\t\t\tif(xx*yyyy-xxxx*yy==0) cout<<\"2\"<<endl;\n\t\t\telse cout<<\"0\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <set>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n  double x,y;\n\n  Point(double x = 0,double y = 0): x(x),y(y){}\n  Point operator + (Point p){ return Point(x + p.x , y + p.y); }\n  Point operator - (Point p){ return Point(x - p.x , y - p.y); }\n  Point operator * (double a){ return Point(a * x , a * y); }\n  Point operator / (double a){ return Point(x / a , y / a); }\n\n  double abs(){ return sqrt(norm()); }\n  double norm(){ return x * x + y * y; }\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS);\n  }\n};\ntypedef Point Vector;\n\nstruct Segment{\n  Point p1,p2;\n};\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){\n  return  a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\n\ndouble dot(Vector a,Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x * b.y + a.y * b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1 - a1,b1 - b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2 - s1.p1,s2.p2 - s2.p1) , 0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1 - a2 , b1 - b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2 - s1.p1 , s2.p2 - s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1 , base / norm(base));\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p + (project(s,p) - p) * 2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS)return CLOCKWISE;\n  if(dot(a,b) < -EPS)return ONLINE_BACK;\n  if(a.norm() < b.norm())return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 && \n          ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0);\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2);\n}\n\ndouble getDistance(Vector a,Vector b){\n  return abs(a - b);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2 - l.p1 , p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n  if(dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n             min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base = s2.p2 - s2.p1;\n  double d1 = abs(cross(base,s1.p1 - s2.p1));\n  double d2 = abs(cross(base,s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  // assert(intersect(c,l));\n  Vector pr = project(l,c.c);\n  Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n  double base = sqrt(c.r * c.r - norm(pr - c.c));\n  return make_pair(pr + e * base , pr - e * base);\n}\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r) * a, sin(r) * a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  // assert(intersect(c1,c2));\n  double d = abs(c1.c - c2.c);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r,t + a),c1.c + polar(c1.r,t - a));\n}\n\nint contains(Polygon g,Point p){\n  int n = g.size();\n  bool x = false;\n  for(int i = 0;i < n;i++){\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n    if(a.y < b.y)swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS)x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size() < 3)return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n\n  l.push_back(s[s.size() - 1]);\n  l.push_back(s[s.size() - 2]);\n\n  for(int i = 2;i < s.size();i++){\n    for(int n = u.size();n >= 2 && ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n\n  for(int i = s.size() - 3; i >= 0;i--){\n    for(int n = l.size();n >= 2 && ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i = u.size() - 2;i >= 1;i--)l.push_back(u[i]);\n  return l;\n}\n\n#define BOTTOM 0\n#define LEFT 1\n#define RIGHT 2\n#define TOP 3\n\nclass EndPoint{\npublic:\n  Point p;\n  int seg,st;\n  EndPoint(){}\n  EndPoint(Point p,int seg,int st): p(p),seg(seg),st(st){}\n\n  bool operator < (const EndPoint &ep) const{\n    if(p.y == ep.p.y){\n      return st < ep.st;\n    }else{\n      return p.y < ep.p.y;\n    }\n  }\n};\n\nEndPoint EP[2 * 100000];\n\nint manhattanIntersection(vector<Segment> S){\n  int n = S.size();\n  for(int i = 0,k = 0;i < n;i++){\n    if(S[i].p1.y == S[i].p2.y){\n      if(S[i].p1.x > S[i].p2.x)swap(S[i].p1,S[i].p2);\n    }else if(S[i].p1.y > S[i].p2.y){\n      swap(S[i].p1,S[i].p2);\n    }\n\n    if(S[i].p1.y == S[i].p2.y){\n      EP[k++] = EndPoint(S[i].p1,i,LEFT);\n      EP[k++] = EndPoint(S[i].p2,i,RIGHT);\n    }else{\n      EP[k++] = EndPoint(S[i].p1,i,BOTTOM);\n      EP[k++] = EndPoint(S[i].p2,i,TOP);\n    }\n  }\n\n  sort(EP,EP + (2 * n));\n\n  set<int> BT;\n  BT.insert(1000000001);\n  int cnt = 0;\n  for(int i = 0;i < 2 * n;i++){\n    if(EP[i].st == TOP){\n      BT.erase(EP[i].p.x);\n    }else if(EP[i].st == BOTTOM){\n      BT.insert(EP[i].p.x);\n    }else if(EP[i].st == LEFT){\n      set<int>::iterator b = lower_bound(BT.begin(),BT.end(),S[EP[i].seg].p1.x);\n      set<int>::iterator e = upper_bound(BT.begin(),BT.end(),S[EP[i].seg].p2.x);\n      cnt += distance(b,e);\n    }\n  }\n  return cnt;\n}\n\nint main(){\n  int n;\n  cin >> n;\n  for(int i = 0;i < n;i++){\n    Line a,b;\n    cin >> a.p1.x >> a.p1.y;\n    cin >> a.p2.x >> a.p2.y;\n    cin >> b.p1.x >> b.p1.y;\n    cin >> b.p2.x >> b.p2.y;\n    if(isParallel(a,b))puts(\"2\");\n    else if(isOrthogonal(a,b))puts(\"1\");\n    else puts(\"0\");\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#define EPS 1e-10\nusing namespace std;\nclass Point{\npublic:\n    double x,y;\n    Point(double x=0, double y=0):x(x),y(y){}\n    Point operator +(const Point &p){\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator -(const Point &p){\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator *(double k){\n        return Point(k*x,k*y);\n    }\n    Point operator /(double k){\n        return Point(x/k,y/k);\n    }\n    \n    double norm(){\n        return x*x+y*y;\n    }\n    double abs(){\n        return sqrt(norm());\n    }\n};\ntypedef Point Vector;\ndouble dot(const Vector &v1,const Vector &v2){\n    return v1.x*v2.x+v1.y*v2.y;\n}\ndouble cross(const Vector &v1,const Vector &v2){\n    return v1.x*v2.y-v1.y*v2.x;\n}\nbool isParallel(const Vector &v1,const Vector &v2){\n    if(fabs(cross(v1,v2)-0)<EPS)return true;\n    return false;\n}\nbool isOrthogonal(const Vector &v1,const Vector &v2){\n    if(fabs(dot(v1,v2)-0)<EPS)return true;\n    return false;\n}\nint main()\n{\n    int q,p0x,p0y,p1x,p1y,p2x,p2y,p3x,p3y;\n    cin>>q;\n    while(q>0){\n        cin>>p0x>>p0y>>p1x>>p1y>>p2x>>p2y>>p3x>>p3y;\n        Point P0(p0x,p0y);\n        Point P1(p1x,p1y);\n        Point P2(p2x,p2y);\n        Point P3(p3x,p3y);\n        Vector v1=P1-P0;\n        Vector v2=P3-P2;\n        if(isOrthogonal(v1,v2))cout<<1<<endl;\n        else if(isParallel(v1,v2))cout<<2<<endl;\n        else cout<<0<<endl;\n        q--;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define lb long double\n#define eps 1e-9\nusing namespace std;\nstruct Po{lb x,y;}p1,p2,q1,q2,np,nq;\nint t;\nPo operator -(Po x,Po y){return (Po){x.x-y.x,x.y-y.y};}\nlb operator *(Po x,Po y){return x.x*y.y-x.y*y.x;}\nlb operator ^(Po x,Po y){return x.x*y.x+x.y*y.y;}\nvoid get(Po &x){scanf(\"%Lf %Lf\",&x.x,&x.y);}\nint main(){\n\tscanf(\"%d\",&t);\n\twhile (t--){\n\t\tget(p1);get(p2);np=p2-p1;\n\t\tget(q1);get(q2);nq=q2-q1;\n\t\tif (fabs(np*nq)<eps)puts(\"2\");\n\t\telse{\n\t\t\tif (fabs(np^nq)<eps)puts(\"1\");else puts(\"0\");\n\t\t}\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\nconstexpr double EPS = (1e-9);\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nstruct Vector {\n\tdouble x, y;\n\tVector(double x = 0, double y = 0) : x(x), y(y) {}\n\tVector operator + (Vector &p) { return Vector(x + p.x, y + p.y); }\n\tVector operator - (Vector &p) { return Vector(x - p.x, y - p.y); }\n\tVector operator * (Vector &p) { return Vector(x * p.x, y * p.y); }\n\tVector operator / (Vector &p) { return Vector(x / p.x, y / p.y); }\n\tvoid insert(double a, double b) { x = a; y = b; }\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\tbool operator < (const Vector &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Vector &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\nstruct Segment {\n\tVector p1, p2;\n\tvoid insert(Vector a1, Vector a2) { p1 = a1; p2 = a2; }\n};\ninline double dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ninline double cross(Vector a, Vector b) { return a.x * b.y + a.y * b.x; }\ninline bool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\ninline bool isOrthogonal(Vector a1, Vector a2, Vector b1, Vector b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\ninline bool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\ninline bool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\ninline bool isParallel(Vector a1, Vector a2, Vector b1, Vector b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\ninline bool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nint main() {\n\tint n; cin >> n;\n\tint x, y;\n\tVector v[4];\n\tSegment s[2];\n\trep(i, 0, n) {\n\t\trep(j, 0, 4) {\n\t\t\tcin >> x >> y;\n\t\t\tv[j].insert(x, y);\n\t\t}\n\t\ts[0].insert(v[0], v[1]); s[1].insert(v[2], v[3]);\n\t\tif(isParallel(s[0], s[1])) P(2);\n\t\telse if(isOrthogonal(s[0], s[1])) P(1);\n\t\telse P(0);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <complex>\n#include <map>\n#include <set>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <bitset>\n#include <algorithm>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\n#define Rep(b, e, i) for(int i = b; i <= e; i++)\n#define Repr(e, b, i) for(int i = e; i >= b; i--)\n#define rep(n, i) Rep(0, n-1, i)\n#define repr(n, i) Repr(n-1, 0, i)\n#define all(v) (v).begin(), (v).end()\n#define pb(v) push_back(v)\n#define uniq(v) (v).erase(unique(all(v)),(v).end())\n#define bitcnt(x) __builtin_popcount(x)\n#define fst first\n#define snd second\n#define Pqaz(T) priority_queue<T,vector<T>,greater<T>>\n#define Pqza(T) priority_queue<T>\n#define put(x) cout << x;\n#define puts(x) cout << x << ' ';\n#define putln(x) cout << x << endl;\n#define ENJYU std::ios::sync_with_stdio(false);std::cin.tie(0);\n\n\nvoid solve(void){\n\n\tint N;\n\tcin >> N;\n\n\twhile(N--)\n\t{\n\t\tint x1, x2, x3, x4, y1, y2, y3, y4;\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\n\t\tint dx1 = x2-x1, dy1 = y2-y1, dx2 = x4-x3, dy2 = y4-y3;\n\n\t\tif (dx1*dx2 + dy1*dy2 == 0)\n\t\t{\n\t\t\tcout << \"1\" << endl;\n\t\t}\n\t\telse if (dx1*dy2-dx2*dy1 == 0)\n\t\t{\n\t\t\tcout << \"2\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"0\" << endl;\n\t\t}\n\t}\n}\n\nint main(void){\n\tsolve();\n\t//cout << \"yui(*-v・)yui\" << endl;\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tint q = 0;\n\tint\tp0x = 0, p0y = 0, p1x = 0, p1y = 0, p2x = 0, p2y = 0,p3x = 0, p3y = 0;\n\tint t = 0;\n\n\tcin >> q;\n\t\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> p0x >> p0y >> p1x >> p1y >> p2x >> p2y >> p3x >> p3y;\n\n\t\tif ((p1x - p0x) * (p3y - p2y) - (p1y - p0y) * (p3x - p2x) == 0)\n\t\t\tt = 2;\n\t\telse if ((p1x - p0x) * (p3x - p2x) + (p1y - p0y) * (p3y - p2y) == 0)\n\t\t\tt = 1;\n\t\telse\n\t\t\tt = 0;\n\n\t\tcout << t << endl;\n\t}\n\t\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cmath>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nconst double EPS = 1e-10;\nbool equals(double a, double b){ return (fabs(a) - fabs(b)) < EPS;};\n\nclass Point{\npublic:\n\tdouble x, y;\n\t\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\tPoint(const Point &p) { x = p.x; y = p.y;};\n\t\n\tPoint operator + (const Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (const Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (const double &a) { return Point(x * a, y * a); }\n\tPoint operator / (const double &a) { return Point(x / a, y / a); }\n\t\n\tPoint & operator = (const Point& p) {x = p.x; y = p.y; return *this;};\n\tPoint & operator += (const Point& p) {x += p.x; y += p.y; return *this;};\n\tPoint & operator -= (const Point& p) {x -= p.x; y -= p.y; return *this;};\n\tPoint & operator *= (const Point& p) {x *= p.x; y *= p.y; return *this;};\n\tPoint & operator /= (const Point& p) {x /= p.x; y /= p.y; return *this;};\n\t\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\t\n\tbool operator > (const Point &p) const {\n\t\treturn x != p.x ? x > p.x : y > p.y;\n\t}\n\t\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\t\n\tdouble abs() { return sqrt(norm()); };\n\tdouble norm() { return x * x + y * y;};\n};\n\ntypedef Point Vector;\n\n\ndouble norm(Vector a){\n\treturn a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a){\n\treturn sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nstruct Segment{\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a,b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2){\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isPrallel(Segment s1, Segment s2){\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nsigned main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tcout<<fixed<<setprecision(10);\n\t\n\tint q;\n\t\n\tcin>>q;\n\t\n\tfor(int i = 0; i < q; i++){\n\t\tSegment s1, s2;\n\t\tcin>>s1.p1.x>>s1.p1.y>>s1.p2.x>>s1.p2.y;\n\t\tcin>>s2.p1.x>>s2.p1.y>>s2.p2.x>>s2.p2.y;\n\t\t\n\t\tif(isPrallel(s1,s2)) cout<<2<<endl;\n\t\telse if(isOrthogonal(s1,s2)) cout<<1<<endl;\n\t\telse cout<<0<<endl;\n\t}\n\t\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <set>\n#include <map>\n#include <algorithm>\t// require sort next_permutation count __gcd reverse etc.\n#include <cstdlib>\t// require abs exit atof atoi \n#include <cstdio>\t\t// require scanf printf\n#include <functional>\n#include <numeric>\t// require accumulate\n#include <cmath>\t\t// require fabs\n#include <climits>\n#include <limits>\n#include <cfloat>\n#include <iomanip>\t// require setw\n#include <sstream>\t// require stringstream \n#include <cstring>\t// require memset\n#include <cctype>\t\t// require tolower, toupper\n#include <fstream>\t// require freopen\n#include <ctime>\t\t// require srand\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define ALL(A) A.begin(), A.end()\n#define EPS (1e-10)\n\nusing namespace std;\n\ntemplate<class T>\nstruct point{\n\tT x, y;\n\tpoint &operator+=(const point &a ){ x += a.x; y += a.y; }\n\tpoint &operator-=(const point &a ){ x -= a.x; y -= a.y; }\n\tpoint operator+(const point &a )const{ return (point){x+a.x, y+a.y }; }\n\tpoint operator-(const point &a )const{ return (point){x-a.x, y-a.y }; }\n\toperator point<double>()const{ return (point<double>){x, y }; }\n};\n\ntemplate<class T>\npoint<T> operator*(T c, const point<T> &a ){ return (point<T>){c*a.x, c*a.y }; }\npoint<double> &operator/=(point<double> &a, double c ){ a.x /= c; a.y /= c; return a; }\ntemplate<class T>\npoint<double> operator/(const point<T> &a, double c ){ return (point<double>){ a.x/c, a.y/c }; }\n\ntemplate<class T>\nstruct line{\n\tpoint<T> a, b;\n\toperator line<double>()const{ return (line<double>){a, b}; }\n};\n\n// inner product\ntemplate<class T>\nT dot(const point<T> &a, const point<T> &b ){ return a.x*b.x + a.y*b.y; }\n\n// outer product\ntemplate<class T>\nT cross(const point<T> &a, const point<T> &b ){ return a.x*b.y - a.y*b.x; }\n\n\n/*\n\t2直線の位置関係\n\n\t説明\n\t\t2直線が平行か垂直かまたはそうでないかの判定\n\t引数\n\t\t直線 l1, l2\n\t戻り値\n\t\tl1 // l2 のとき 2\n\t\tl1 ⊥ l2 のとき 1\n\t\tそれ以外 0\n\t制約\n\t\tなし\n\t計算量\n\t\tO(1)\n\t備考\n\n\t\tAOJ - Courses CGL CGL_D_1 Parallel/Orthogonal\n\n*/\nenum{OTHER = 0, ORTHOGONAL = 1, PARALLEL = 2 };\ntemplate<class T>\nint pos_2_line (const line<T> &L1, const line<T> &L2 ){\n\tdouble res = dot (L1.b - L1.a, L2.b - L2.a );\n\n\tif (abs (res ) < EPS ) return ORTHOGONAL;\n\n\tres = cross (L1.b - L1.a, L2.b - L2.a );\n\n\tif (abs (res ) < EPS ) return PARALLEL;\n\n\treturn OTHER;\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(0);\n\tint q; cin >> q;\n\trep (i, q ){\n\t\tline<double> l1, l2;\n\t\tcin >> l1.a.x >> l1.a.y >> l1.b.x >> l1.b.y >> l2.a.x >> l2.a.y >> l2.b.x >> l2.b.y;\n\t\n\t\tint res = pos_2_line (l1, l2 );\n\t\tcout << res << endl;\n\t} // end rep\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "////////////////////\n// ???????????????\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// ?????°\nconst double EPS = 1e-9;                // |EPS|???????????°???0??¨????????±???\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK};   // 3??????????????¢???\n////////////////////\n// ?§???????\nstruct Point {\n  double x, y;\n  Point(const double d = 0.0) : x(d), y(d) {}\n  Point(const double x, const double y) : x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial, const Point& terminal) : initial(initial), terminal(terminal) {}\n  Segment(const double x1, const double y1, const double x2, const double y2) : initial(x1, y1), terminal(x2, y2) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial, const Point& terminal) : initial(initial), terminal(terminal) {}\n  Line(const double x1, const double y1, const double x2, const double y2) : initial(x1, y1), terminal(x2, y2) {}\n  Line(const Segment& s) : initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// ????£?\nbool relative_equal(const double d1, const double d2) {return d1 == 0 ? std::abs(d2) < EPS : std::abs((d1 - d2) / d1) < EPS;}\n// ??????????????????????????????\nbool operator==(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) && relative_equal(lhs.y, rhs.y);}\nbool operator<(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) ? lhs.y < rhs.y : lhs.x < rhs.x;}\nbool operator>(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) ? lhs.y > rhs.y : lhs.x > rhs.x;}\nbool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\nbool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\nbool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// ???\ndouble abs(const Point& p) {return std::hypot(p.x, p.y);}\ndouble norm(const Point& p) {return p.x * p.x + p.y * p.y;}\ndouble dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\ndouble cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / abs(p);}\n// const Point normal(const Point& p) {return normalize(Point(-p.y, p.x));}\n// ??????\n// Segment shrink(const Segment& s, const double d = EPS) {\n//   Point p = (s.terminal - s.initial) * d;\n//   return Segment(s.initial + p, s.terminal - p);\n// }\n// ??´???\nbool parallel(const Line& l1, const Line& l2) {return relative_equal(0.0, cross(l2.terminal - l2.initial, l1.terminal - l1.initial));}\nbool orthogonal(const Line& l1, const Line& l2) {return relative_equal(0.0, dot(l2.terminal - l2.initial, l1.terminal - l1.initial));}\n// 3??????????????¢???\nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) >= EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) <= -EPS) return CLOCKWISE;\n  if(dot(v1, v2) <= -EPS) return ONLINE_BACK;\n  if(norm(v1) < norm(v2)) return ONLINE_FRONT;              // ????????????: norm(v1)<norm(v2)+EPS?????¨WrongAnswer\n  return ON_SEGMENT;\n}\n// ????????????\nbool intersect(const Point& p1, const Point& p2) {return p1 == p2;}\nbool intersect(const Point& p, const Segment& s) {return abs(p - s.initial) + abs(p - s.terminal) - abs(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(Line(p, l.initial), Line(p, l.terminal));}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || intersect(l1.initial, l2);}\n// ???????§????\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// ?????¢\ndouble distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\ndouble distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\ndouble distance(const Segment& s, const Point& p) {return distance(p, s);}\ndouble distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\ndouble distance(const Line& l, const Point& p) {return distance(p, l);}\ndouble distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial), distance(s1, s2.terminal), distance(s2, s1.initial), distance(s2, s1.terminal)});\n}\ndouble distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\ndouble distance(const Line& l,const Segment& s) {return distance(s, l);}\ndouble distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// ??????\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  assert(intersect(l1, l2));\n  if(parallel(l1, l2)) return l1.initial;                   // ???????????¨???l1????§?????????????\n  double A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  double B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  assert(intersect(s, l));\n  if(parallel(s, l)) return s.initial;\n  return crosspoint(Line(s), l);\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  assert(intersect(s1, s2));\n  if(parallel(s1, s2)) {                                    // ???????????¨?????????????????????????????????\n    if(intersect(s1.initial,  s2)) return s1.initial;\n    if(intersect(s1.terminal, s2)) return s1.terminal;\n    if(intersect(s2.initial,  s1)) return s2.initial;\n    if(intersect(s2.terminal, s1)) return s2.terminal;\n  }\n  return crosspoint(Line(s1), Line(s2));\n}\n// ???????????°??¨\n#include<iostream>\nstd::ostream& operator<<(std::ostream& os, const Point& p) {os<<\"point: \"; os<<\"(\"<<p.x<<\",\"<<p.y<<\")\"; return os;}\nstd::ostream& operator<<(std::ostream& os, const Segment& s) {os<<\"segment: \"; os<<s.initial<<\" - \"<<s.terminal; return os;}\nstd::ostream& operator<<(std::ostream& os, const Line& l) {os<<\"line: \"; os<<l.initial<<\" - \"<<l.terminal; return os;}\n////////////////////////////////////////////////////////////////////////////////\n// ?????????\n// ????§???¢\n//   ????????????????????°??????????????´??? ??? ?????¢???????´????edge(void)???O(????????°)???edge().begin()????????£????????????????????????????????????????????????\n#include<vector>\n#include<algorithm>\n#include<numeric>\n#include<cmath>\n#include<utility>\nclass Polygon {\npublic:\n  // ??¨???\n  void add(const Point& p);\n  void clear();\n  // ?????±\n  int size() const;\n  Point vertex(const int n) const;\n  Segment edge(const int n) const;\n  const std::vector<Point>& vertex() const;\n  const std::vector<Segment>& edge() const;\n  // ??????\n  bool touch(const Point& p) const;\n  bool intersect(const Point& p) const;\n  double area() const;\n  bool convex() const;\n  // ???????§???¢\n  const Polygon convex_hull() const;\n  double convex_diameter() const;\n  const Polygon convex_cut(const Line& l) const;\nprivate:\n  std::vector<Point> vertex_;\n  std::vector<Segment> edge_;\n};\n// ??¨???\nvoid Polygon::add(const Point& p) {\n  if(!vertex_.empty()) {\n    if(!edge_.empty()) edge_.pop_back();\n    edge_.push_back(Segment(vertex_.back(), p));\n    edge_.push_back(Segment(p, vertex_.front()));\n  }\n  vertex_.push_back(p);\n}\nvoid Polygon::clear() {\n  vertex_.clear();\n  edge_.clear();\n};\n// ?????±\nint Polygon::size() const {return vertex_.size();}\nPoint Polygon::vertex(const int n) const {return vertex_.at(n);}\nSegment Polygon::edge(const int n) const {return edge_.at(n);}\nconst std::vector<Point>& Polygon::vertex() const {return vertex_;}\nconst std::vector<Segment>& Polygon::edge() const {return edge_;}\n// ??????\nbool Polygon::touch(const Point& p) const {\n  return std::any_of(std::begin(edge()), std::end(edge()), [=](const Segment& s) {return ccw(s.initial, s.terminal, p) == ON_SEGMENT;});\n}\nbool Polygon::intersect(const Point& p) const {\n  bool in = false;                    // p=(x,y)??????(INF,y)???????????´?????¨????§???¢??¨????????????????????° mod 2\n  for(const auto& e: edge()) {\n    if(::intersect(p, e)) return true;\n    Point a = e.initial  - p;\n    Point b = e.terminal - p;\n    if(a.y > b.y) std::swap(a, b);\n    if(a.y < EPS && EPS <= b.y && cross(a, b) < EPS) in = !in;\n  }\n  return in;\n}\ndouble Polygon::area() const {\n  return std::abs(std::accumulate(std::begin(edge()), std::end(edge()), 0.0, [=](const double sum, const Segment& e){return sum + cross(e.initial, e.terminal);})) / 2.0;\n}\nbool Polygon::convex() const {\n  bool positive = false;\n  bool negative = false;\n  for(int i = 0; i < size(); ++i) {\n    auto position = ccw(vertex(i), vertex((i + 1) % size()), vertex((i + 2) % size()));\n    positive |= position == CLOCKWISE;\n    negative |= position == COUNTER_CLOCKWISE;\n    if(negative && positive) return false;\n  }\n  return true;\n}\n// ???????§???¢\n// Andrew's Monotone Chain\nconst Polygon Polygon::convex_hull() const {\n  auto original = vertex();\n  std::sort(std::begin(original), std::end(original));\n  original.insert(std::end(original), original.rbegin() + 1, original.rend());\n  std::vector<Point> point;\n  for(const auto& p: original) {\n    while(point.size() >= 2 && ccw(point[point.size() - 2], point.back(), p) == CLOCKWISE) point.pop_back();\n    point.push_back(p);\n  }\n  Polygon convex_hull;\n  point.pop_back();\n  for(const auto& p: point) convex_hull.add(p);\n  return convex_hull;\n}\n// Rotating calipers\ndouble Polygon::convex_diameter() const {\n  auto point = vertex();\n  int p, q, start_p, start_q, max_p, max_q;\n  p = start_p = max_p = std::min_element(std::begin(point), std::end(point)) - std::begin(point);\n  q = start_q = max_q = std::max_element(std::begin(point), std::end(point)) - std::begin(point);\n  double max_d = norm(vertex(p) - vertex(q));\n  do {\n    if(cross(vertex((p + 1) % size()) - vertex(p), vertex((q + 1) % size()) - vertex(q)) >= 0) q = (q + 1) % size();\n    else p = (p + 1) % size();\n    if(norm(vertex(p) - vertex(q)) > max_d) {\n      max_d = norm(vertex(p) - vertex(q));\n      max_p = p;\n      max_q = q;\n    }\n  } while(start_p != q || start_q != p);\n  return std::sqrt(max_d);\n}\nconst Polygon Polygon::convex_cut(const Line& l) const {\n  Polygon result;\n  for(const auto& e: edge()) {\n    if(ccw(l.initial, l.terminal, e.initial) == COUNTER_CLOCKWISE) result.add(e.initial);\n    if(::intersect(e, l)) result.add(crosspoint(e, l));\n  }\n  return result;\n}\n////////////////////////////////////////////////////////////////////////////////\n#include<bits/stdc++.h>\nusing namespace std;\nint main() {\n  // Points/Vectors\n//   Point p1, p2;\n//   cin >> p1.x >> p1.y >> p2.x >> p2.y;\n//   int q;\n//   for(cin >> q; q > 0; --q) {\n//     int x, y;\n//     cin >> x >> y;\n    // A\n//     Point p = projection(Line(p1, p2), Point(x, y));\n//     cout << setprecision(10) << fixed << p.x << \" \" << p.y << endl;\n    // B\n//     Point p = reflection(Line(p1, p2), Point(x, y));\n//     cout << setprecision(10) << fixed << p.x << \" \" << p.y << endl;\n    // C\n//     switch(ccw(p1, p2, Point(x, y))) {\n//     case COUNTER_CLOCKWISE:\n//       cout << \"COUNTER_CLOCKWISE\" << endl;\n//       break;\n//     case CLOCKWISE:\n//       cout << \"CLOCKWISE\" << endl;\n//       break;\n//     case ONLINE_BACK:\n//       cout << \"ONLINE_BACK\" << endl;\n//       break;\n//     case ONLINE_FRONT:\n//       cout << \"ONLINE_FRONT\" << endl;\n//       break;\n//     case ON_SEGMENT:\n//       cout << \"ON_SEGMENT\" << endl;\n//       break;\n//     }\n//   }\n\n  // Segments/Lines\n  int n;\n  for(cin >> n; n > 0; --n) {\n    int a, b, c, d, e, f, g, h;\n    cin >> a >> b >> c >> d >> e >> f >> g >> h;\n    Segment s(Point(a, b), Point(c, d));\n    Segment t(Point(e, f), Point(g, h));\n    // A\n    cout << (parallel(s, t) ? 2 : (orthogonal(s, t) ? 1 : 0)) << endl;\n    // B\n//     cout << (intersect(s, t) ? 1 : 0) << endl;\n    // C\n//     auto cp = crosspoint(s, t);\n//     cout << setprecision(10) << fixed << cp.x << \" \" << cp.y << endl;\n    // D\n//     cout << setprecision(10) << fixed << distance(s, t) << endl;\n  }\n\n  // Polygon\n//   int n;\n//   Polygon polygon;\n//   for(cin >> n; n > 0; --n) {\n//     int x, y;\n//     cin >> x >> y;\n//     polygon.add(Point(x, y));\n//   }\n  // A\n//   cout << setprecision(1) << fixed  << polygon.area() << endl;\n  // B\n//   cout << (polygon.convex() ? 1 : 0) << endl;\n  // C\n//   int q;\n//   for(cin >> q; q > 0; --q) {\n//     int x, y;\n//     cin >> x >> y;\n//     Point p(x, y);\n//     cout << (polygon.touch(p) ? 1 : (polygon.intersect(p) ? 2 : 0)) << endl;\n//   }\n\n  // Convex Polygon\n//   int n;\n//   Polygon polygon;\n//   for(cin >> n; n > 0; --n) {\n//     double x, y;\n//     cin >> x >> y;\n//     polygon.add(Point(x, y));\n//   }\n  // A\n//   auto convex_hull = polygon.convex_hull();\n//   cout << convex_hull.size() << endl;\n//   for(auto v: convex_hull.vertex()) cout << v.x << \" \" << v.y << endl;\n  // B\n//   cout << setprecision(10) << fixed << polygon.convex_diameter() << endl;\n  // C\n//   for(cin >> n; n > 0; --n) {\n//     double x1, y1, x2, y2;\n//     cin >> x1 >> y1 >> x2 >> y2;\n//     cout << setprecision(10) << fixed << polygon.convex_cut(Line(x1, y1, x2, y2)).area() << endl;\n//   }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\n#define FOR(k,m,n) for(int (k)=(m);(k)<(n);(k)++)\n#define REP(i,n) FOR((i),0,(n))\n\n\n//???\n\n//???\nclass Point{\npublic:\n\tdouble x, y;\n\t//?????????????????????\n\tPoint(int x_=0.0,int y_=0.0):x(x_),y(y_){}\n\t\n\t//??????????????????????????????\n\tPoint operator + (Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double k) { return Point(x * k, y * k); }\n\tPoint operator / (double k) { return Point(x / k, y / k); }\n\n\tbool operator  < (const Point &p)const {\n\t\treturn x!=p.x ? x<p.x : y<p.y;\n\t}\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n\n\t//??¢??°\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n};\ntypedef Point Vector;        //????????????\nstruct Segment{Point p1,p2;};//??????\ntypedef Segment Line;        //??´???\n\n//???\nclass Circle {\npublic:\n\tPoint center;\n\tdouble r;\n\t//?????????????????????\n\tCircle(Point c_=Point(),double r_=0.0):center(c_),r(r_){}\n};\ntypedef vector<Point> Polygon;//????§???¢??????????????????\n\n\n\n//??¢??°????????????\n\n//?????????????????¢??°??????\nnamespace VFunc {\n\t//??????\n\tdouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n\t//??????\n\tdouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\t//??´?????????????¨????\n\tbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\tbool isOrthogonal(Point a1,Point  a2, Point b1,Point b2) {return isOrthogonal(a1-a2,b1-b2);}\n\tbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\t//????????????????¨????\n\tbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\tbool isParallel(Point a1, Point  a2, Point b1, Point b2) {return isParallel(a1 - a2, b1 - b2);}\n\tbool isParallel(Segment s1, Segment s2) {return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\n}\n\n//??????????????¨??????\nint q;\nPoint p[4];\n\nint main() {\n\tcin>>q;\n\tREP(i,q){\n\t\tREP(j, 4)cin >> p[i].x >> p[i].y;\n\t\tif      (VFunc::isParallel  (p[0], p[1], p[2], p[3])) cout << \"2\" << endl;\n\t\telse if (VFunc::isOrthogonal(p[0], p[1], p[2], p[3])) cout << \"1\" << endl;\n\t\telse                                                  cout << \"0\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nnamespace Computational_Geometry\n{\n\tconst long double eps=1e-10;\n\tstruct Vector2\n\t{\n\t\tlong double x,y;\n\t\tVector2(long double X=0.0,long double Y=0.0):x(X),y(Y) {}\n\t\tVector2 *read() {scanf(\"%Lf%Lf\",&x,&y); return this;}\n\t\tvoid print() {printf(\"%.10Lf %.10Lf\",x,y); return;}\n\t\tinline Vector2 operator - () const{return Vector2(-x,-y);}\n\t\tinline Vector2 operator + (const Vector2 &A) const{return Vector2(x+A.x,y+A.y);}\n\t\tinline Vector2 operator - (const Vector2 &A) const{return Vector2(x-A.x,y-A.y);}\n\t\tinline Vector2 operator * (const long double &k) const{return Vector2(x*k,y*k);}\n\t\tinline Vector2 operator / (const long double &k) const{return Vector2(x/k,y/k);}\n\t\tinline long double operator * (const Vector2 &A) const{return x*A.x+y*A.y;}\n\t\tinline long double operator ^ (const Vector2 &A) const{return x*A.y-y*A.x;}\n\t\tinline long double norm2() const{return x*x+y*y;}\n\t\tinline long double norm() const{return sqrtl(x*x+y*y);}\n\t\tinline bool operator < (const Vector2 &A) const{return (x<A.x-eps)||(x<=A.x+eps)&&(y<A.y-eps);}\n\t\tinline bool operator == (const Vector2 &A) const{return fabsl(x-A.x)<=eps&&fabsl(y-A.y)<=eps;}\n\t\tinline bool operator << (const Vector2 &A) const{return (y<-eps)^(A.y<-eps)?A.y<-eps:((*this^A)>eps)||((*this^A)>=-eps)&&(x>=-eps)&&(A.x<-eps);}\n\t\tinline Vector2 trans(long double a_11,long double a_12,long double a_21,long double a_22) const{return Vector2(x*a_11+y*a_12,x*a_21+y*a_22);}\n\t};\n\t#define Point Vector2\n\tPoint Projection(Point P,Point L1,Point L2)\n\t{\n\t\tlong double k1=(L2-L1)*(P-L1),k2=(L2-L1).norm2();\n\t\treturn L1+((L2-L1)*(k1/k2));\n\t}\n\tPoint Reflection(Point P,Point L1,Point L2)\n\t{\n\t\tlong double k1=(L2-L1)*(P-L1),k2=(L2-L1).norm2();\n\t\tPoint mid=L1+(L2-L1)*(k1/k2);\n\t\treturn mid*2-P;\n\t}\n/*\n\tCOUNTER_CLOCKWISE 1\n\tCLOCKWISE 2\n\tONLINE_BACK 3\n\tONLINE_FRONT 4\n\tON_SEGMENT 5\n*/\n\tint Counter_Clockwise(Point S,Point T1,Point T2)\n\t{\n\t\tif(((T1-S)^(T2-S))>eps) return 1;\n\t\telse if(((T1-S)^(T2-S))<-eps) return 2;\n\t\telse if(((T1-S)*(T2-S))<-eps) return 3;\n\t\telse if(((T2-S).norm2()-(T1-S).norm2())>eps) return 4;\n\t\telse return 5;\n\t}\n\tint IsParallel(Point S1,Point T1,Point S2,Point T2)\n\t{\n\t\treturn fabs((T1-S1)^(T2-S2))<=eps;\n\t}\n\tint IsOrthogonal(Point S1,Point T1,Point S2,Point T2)\n\t{\n\t\treturn fabs((T1-S1)*(T2-S2))<=eps;\n\t}\n/*\n\tPARALLEL 1\n\tORTHOGONAL 2\n\tOTHER 3\n*/\n\tint Parallel_Orthogonal(Point S1,Point T1,Point S2,Point T2)\n\t{\n\t\tif(IsParallel(S1,T1,S2,T2)) return 1;\n\t\telse if(IsOrthogonal(S1,T1,S2,T2)) return 2;\n\t\telse return 3;\n\t}\n};\nusing namespace Computational_Geometry;\nPoint P,P0,P1,S0,S1,T0,T1;\nint Q;\nint main()\n{\n\tscanf(\"%d\",&Q);\n\twhile(Q--)\n\t{\n\t\tS0.read(),T0.read(),S1.read(),T1.read();\n\t\tprintf(\"%d\\n\",3-Parallel_Orthogonal(S0,T0,S1,T1));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n//?????????\n#pragma region MACRO \n#define putans(x)  std::cerr << \"answer: \" ; cout << (x) << endl\n#define dputans(x) std::cerr << \"answer: \"; cout << setprecision(10) << (double)(x) << endl\n#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)\n#define RREP(i,a,n) for(int i=(int)(n-1); i>= a; i--)\n#define rep(i,n) REP(i,0,n)\n#define rrep(i,n) RREP(i,0,n)\n#define all(a) begin((a)),end((a))\n#define mp make_pair\n#define exist(container, n) ((container).find((n)) != (container).end())\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#ifdef _DEBUG //???????????????????????????????????????????????????\nstd::ifstream ifs(\"data.txt\");\n#define put ifs >>\n#else //?????£????????????????????§?????????????????????\n#define put cin >>\n#endif\n#pragma endregion\n\n//???????????°??????????????´\n#pragma region CODING_SUPPORT\n#define dbg(var0) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << endl; }\n#define dbg2(var0, var1) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg(var1); }\n#define dbg3(var0, var1, var2) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg2(var1, var2); }\n#define dbgArray(a,n) {std::cerr << (#a) << \"=\";  rep(i,n){std::cerr <<(a[i])<<\",\";} cerr<<endl;} \n#ifndef _DEBUG\n#define dbg1 {}\n#define dbg2 {}\n#define dbg3 {}\n#define dbgArray {}\n#endif \n#pragma endregion \n//typedef????????????????????????????¶????????????§?????????\n#pragma region TYPE_DEF\ntypedef long long ll;\ntypedef pair<int, int> pii; typedef pair<string, string> pss; typedef pair<int, string>pis;\ntypedef vector<string> vs; typedef vector<int> vi;\n#pragma endregion\n//??????????????°(???????????????????????§??????)\n#pragma region CONST_VAL\n#define PI (2*acos(0.0))\n#define EPS (1e-9)\n#define MOD (ll)(1e9 + 7)\n#define INF (ll)(1e9)\n#pragma endregion\n\nclass Point {//????????????????????????\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tdouble operator * (Point p) { return dot(p); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const Point &p) const {return  x != p.x ? x < p.x : y < p.y;}\n\tbool operator == (const Point &p) const {return  fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;}\n\t//???????????????\n\tdouble dot(Point p) {return x * p.x + y * p.y;}\n\tdouble cross(Point p) { return x * p.y - y * p.x; }\n\n};\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nstruct Line {\n\tPoint p1, p2;\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\n//??´????????????\nbool isOrthogonal(Vector a, Vector b) { return equals(a*b, 0.0); }\nbool isParallel(Vector a, Vector b) { return equals(a.cross(b), 0.0); }\n\nint main() {\n\tint n; put n;\n\tint px, py;\n\trep(j, n) {\n\t\tPoint p[4];\n\t\trep(i, 4) {\n\t\t\tput px >> py;\n\t\t\tp[i] = Point(px, py);\n\t\t}\n\t\tPoint pa = p[1] - p[0];\n\t\tPoint pb = p[3] - p[2];\n\t\t\n\t\tif (isOrthogonal(pa,pb)) {\n\t\t\tcout << 1 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif (isParallel(pa,pb)) {\n\t\t\tcout << 2 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tcout << 0 << endl;\n\t}\n\treturn 0;\n}\n\n/*\n#define i(x) int x; scanf(\"%d\",&x);\n#define l(x) ll x; scanf(\"%lld\",&x);\n#define d(x) double  x; scanf(\"%lf\",&x);\n*/\n//??????????£?????????°???\n//https://www23.atwiki.jp/akitaicpc/pages/65.html"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int mod = 1e9 + 7;\nconst int inf = (1 << 30) - 1;\nconst ll infll = (1LL << 61) - 1;\n\nusing Real = double;\nusing Point = complex<Real>;\nconst Real Pi = acos(-1), EPS = 1e-9;\ninline bool eq(Real a, Real b) { return fabs(a - b) < EPS; }\n\n//scalar\nPoint operator*(const Point &p, const Real &c)\n{\n    return Point(c * real(p), c * imag(p));\n}\n\n//add\nPoint operator+(const Point &p, const Point &q)\n{\n    return Point(real(p) + real(q), imag(p) + imag(q));\n}\n\nPoint operator-(const Point &p, const Point &q)\n{\n    return Point(real(p) - real(q), imag(p) - imag(q));\n}\n//equal\nbool operator==(const Point &p, const Point &q)\n{\n    return (real(p) == real(q)) && (imag(p) == imag(q));\n}\n\nReal radian_to_degree(Real r)\n{\n    return (r * 180.0 / Pi);\n}\n\nReal degree_to_radian(Real d)\n{\n    return (d * Pi / 180.0);\n}\n\n//rotate\nPoint rot(Real theta, const Point &p)\n{\n    return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n//norm\nReal norm(Point const &p)\n{\n    return (real(p) * real(p) + imag(p) * imag(p));\n}\n\n//argumant [0, 2 * Pi)\nReal arg(Point const &p)\n{\n    Real a = atan2(imag(p), real(p));\n    if (a < 0)\n        a = fabs(a) + Pi;\n    return a;\n}\n\n//input\nistream &operator>>(istream &is, Point &p)\n{\n    Real a, b;\n    is >> a >> b;\n    p = Point(a, b);\n    return is;\n}\n\n//output\nostream &operator<<(ostream &os, Point &p)\n{\n    os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\n// a line given two points\nstruct Line\n{\n    Point a, b;\n    Line() = default;\n\n    Line(Point a, Point b) : a(a), b(b) {}\n\n    // Ax + By = C\n    Line(Real A, Real B, Real C)\n    {\n        if (eq(A, 0))\n            a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0))\n            b = Point(C / A, 0), b = Point(C / A, 1);\n        else\n            a = Point(0, C / B), b = Point(C / A, 0);\n    }\n\n    friend istream &operator>>(istream &is, Line &a)\n    {\n        return is >> a.a >> a.b;\n    }\n\n    friend ostream &operator<<(ostream &os, Line &p)\n    {\n        return os << p.a << \" to \" << p.b;\n    }\n};\n\nusing Points = vector<Point>;\nusing Polygon = vector<Point>;\nusing Lines = vector<Line>;\n\nReal dot(const Point &p, const Point &q)\n{\n    return (real(p) * real(q) + imag(p) * imag(q));\n}\n\n// regard z - component is zero\nReal cross(const Point &p, const Point &q)\n{\n    return real(p) * imag(q) - imag(p) * real(q);\n}\n\n//For given three points p1,p2,p, find the projection point x of p onto p1p2.\nPoint projection(const Line &l, const Point &p)\n{\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b); // direction vector\n    return l.a + (l.a - l.b) * t;\n}\n\n//For given three points p1,p2,p, find the reflection point x of p onto p1p2.\nPoint reflection(const Line &l, const Point &p)\n{\n    return p + (projection(l, p) - p) * 2.0;\n}\n\nint Counter_Clockwise(const Point &a, Point b, Point c)\n{\n    // a is standard\n    b = b - a, c = c - a;\n    if (cross(b, c) > EPS)\n        return +1; // counter clockwise\n    if (cross(b, c) < -EPS)\n        return -1; // clockwise\n    if (dot(b, c) < 0)\n        return +2; // c--a--b on line\n    if (norm(b) < norm(c))\n        return -2; // a--b--c on line\n    return 0;      // c on segment a-b\n}\n\n// two lines are parallel\nbool Parallel(const Line &L1, const Line &L2)\n{\n    return eq(cross(L1.b - L1.a, L2.b - L2.a), 0.0);\n}\n\n// two lines are orthogonal\nbool Orthogonal(const Line &L1, const Line &L2)\n{\n    return eq(dot(L1.b - L1.a, L2.b - L2.a), 0.0);\n}\n\nint main()\n{\n    int Q;\n    cin >> Q;\n    Line l, r;\n    for (int i = 0; i < Q; i++)\n    {\n        cin >> l >> r;\n        if (Parallel(l, r) == true)\n        {\n            cout << \"2\\n\";\n        }\n        else if (Orthogonal(l, r) == true)\n        {\n            cout << \"1\\n\";\n        }\n        else\n        {\n            cout << \"0\\n\";\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-10;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n// ベクトルa, bがなす角の余弦(cosθ)の値\ndouble costheta(Point a, Point b){\n    return dot(a, b) / (abs(a) * abs(b));\n}\n// 2直線の平行判定\nbool isParallel(Line a, Line b){\n    double cos = costheta(a.second - a.first, b.second - b.first);\n    return fabs(cos) > 1 - EPS;\n}\n// 2直線が垂直に交わるかどうか判定\nbool isOrthogonal(Line a, Line b){\n    double cos = costheta(a.second - a.first, b.second - b.first);\n    return fabs(cos) < EPS;\n}\n\nint main(){\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y;\n        Point p[4];\n        for(int j = 0; j < 4; j++){\n            cin >> x >> y;\n            p[j] = {x, y};\n        }\n        Line s1 = {p[0], p[1]};\n        Line s2 = {p[2], p[3]};\n        if(isOrthogonal(s1, s2)) cout << 1 << endl;\n        else if(isParallel(s1, s2)) cout << 2 << endl;\n        else cout << 0 << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <iomanip>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <numeric>\n#include <bitset>\n#include <cmath>\n\nstatic const int MOD = 1000000007;\nusing ll = long long;\nusing u32 = uint32_t;\nusing namespace std;\n\ntemplate<class T> constexpr T INF = ::numeric_limits<T>::max()/32*15+208;\n\nusing real = double;\nreal EPS = 1e-10;\nstruct Point {\n    real x, y;\n    Point& operator+=(const Point a) { x += a.x; y += a.y;  return *this; }\n    Point& operator-=(const Point a) { x -= a.x; y -= a.y;  return *this; }\n    Point& operator*=(const real k) { x *= k; y *= k;  return *this; }\n    Point& operator/=(const real k) { x /= k; y /= k;  return *this; }\n    Point operator+(const Point a) const {return Point(*this) += a; }\n    Point operator-(const Point a) const {return Point(*this) -= a; }\n    Point operator*(const real k) const {return Point(*this) *= k; }\n    Point operator/(const real k) const {return Point(*this) /= k; }\n    bool operator<(const Point &a) const { return (x != a.x ? x < a.x : y < a.y); }\n    explicit Point(real a = 0, real b = 0) : x(a), y(b) {};\n};\n\nistream& operator>> (istream& s, Point& P){\n    s >> P.x >> P.y;\n    return s;\n}\n\ninline real dot(Point a, Point b){ return a.x*b.x + a.y*b.y; }\ninline real cross(Point a, Point b){ return a.x*b.y - a.y*b.x; }\ninline real abs(Point a){ return sqrt(dot(a, a)); }\n\nstatic constexpr int COUNTER_CLOCKWISE = 1;\nstatic constexpr int CLOCKWISE = -1;\nstatic constexpr int ONLINE_BACK = 2;\nstatic constexpr int ONLINE_FRONT = -2;\nstatic constexpr int ON_SEGMENT = 0;\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if(cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(b, c) < -EPS) return CLOCKWISE;\n    if(dot(b, c) < 0) return ONLINE_BACK;\n    if(abs(b) < abs(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nstruct Segment {\n    Point a, b;\n    Segment(Point x, Point y) : a(x), b(y) {};\n};\n\ndouble distance(Segment l, Point c){\n    if(dot(l.b-l.a, c-l.a) < EPS) return abs(c-l.a);\n    if(dot(l.a-l.b, c-l.b) < EPS) return abs(c-l.b);\n    return abs(cross(l.b-l.a, c-l.a)) / abs(l.a-l.b);\n}\n\nbool intersect(Segment l1, Segment l2){\n    return (ccw(l1.a, l1.b, l2.a)*ccw(l1.a, l1.b, l2.b) <= 0 &&\n            ccw(l2.a, l2.b, l1.a)*ccw(l2.a, l2.b, l1.b) <= 0);\n}\n\nPoint crossPoint(Segment l1, Segment l2){\n    real d1 = abs(cross(l1.b-l1.a, l2.b-l2.a));\n    real d2 = abs(cross(l1.b-l1.a, l1.b-l2.a));\n    if(d1 < EPS && d2 < EPS) return l2.a;\n    return l2.a+(l2.b-l2.a)*d2/d1;\n}\n\nPoint project(Segment s, Point p){\n    Point Q = s.b-s.a;\n    return s.a + Q*(dot(p-s.a, Q) / dot(Q, Q));\n}\n\nPoint refrect(Segment s, Point p){\n    Point Q = project(s, p);\n    return Q*2-p;\n}\n\nbool isOrthogonal(Segment s, Segment t){\n    return fabs(dot(s.b-s.a, t.b-t.a)) < EPS;\n}\n\nbool isparallel(Segment s, Segment t){\n    return fabs(cross(s.b-s.a, t.b-t.a)) < EPS;\n}\n\nint main() {\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        Point a, b, c, d;\n        cin >> a >> b >> c >> d;\n        Segment s(a, b), t(c, d);\n        if(isparallel(s, t)) puts(\"2\");\n        else if(isOrthogonal(s, t)) puts(\"1\");\n        else puts(\"0\");\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n\tint x, y;\n\tPoint(int x, int y) :\n\t\t\tx(x), y(y) {\n\t}\n\n\tPoint operator +(const Point p) const {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator -(const Point p) const {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n};\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) :\n\t\t\tp1(p1), p2(p2) {\n\t}\n};\n\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint main() {\n\n\tint q;\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; ++i) {\n\t\tint p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y;\n\t\tscanf(\"%d %d %d %d %d %d %d %d\", &p0x, &p0y, &p1x, &p1y, &p2x, &p2y, &p3x, &p3y);\n\t\tPoint p1(p0x, p0y);\n\t\tPoint p2(p1x, p1y);\n\t\tPoint p3(p2x, p2y);\n\t\tPoint p4(p3x, p3y);\n\t\tSegment s1(p1, p2);\n\t\tSegment s2(p3, p4);\n\n\t\tif (isOrthogonal(s1, s2)) {\n\t\t\tcout << 1 << endl;\n\t\t} else if (isParallel(s1, s2)) {\n\t\t\tcout << 2 << endl;\n\t\t} else {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\n// ???/????????????\nstruct Point {\n  double x, y;\n  Point(double x = 0.0, double y = 0.0):x(x), y(y){}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(x * a, y * a); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x + y*y; }\n\n  bool operator < (const Point& p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator == (const Point& p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\ntypedef Point Vector;\n\n// ??????/??´???\nstruct Segment {\n  Point p1, p2;\n};\ntypedef Segment Line;\n\n// ?????????????????????\ndouble dot(Vector a, Vector b)\n{\n  return a.x*b.x + a.y*b.y;\n}\n// ??????????????????????????§??????\ndouble cross(Vector a, Vector b)\n{\n  return a.x*b.y - a.y*b.x;\n}\n// ??´?????????\nbool isOrthogonal(Vector a, Vector b)\n{\n  return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Segment s1, Segment s2)\n{\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n// ????????????\nbool isParallel(Vector a, Vector b)\n{\n  return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n  return isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Segment s1, Segment s2)\n{\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint main()\n{\n  int q; cin >> q;\n  while(q--) {\n    Point p[4];\n    for(int i = 0; i < 4; i++) cin >> p[i].x >> p[i].y;\n    if(isParallel(p[0], p[1], p[2], p[3])) cout << 2 << endl;\n    else if(isOrthogonal(p[0], p[1], p[2], p[3])) cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    int q;\n    int i;\n    int xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3;\n    double a_s1;\n    double a_s2;\n    int int_a_s11;\n    int int_a_s21;\n    int int_a_s12;\n    int int_a_s22;\n    int ans;\n    int ans_flg1;\n    int ans_flg2;\n\n    cin >> q;\n    for ( i = 0; i < q; ++i){\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n\n        ans_flg1 = 0;\n        ans_flg2 = 0;\n        if (xp1 == xp0){\n            a_s1 = xp1;\n            ans_flg1 = 1;\n        }else if (yp1 == yp0){\n            a_s1 = yp1;\n            ans_flg1 = 2;\n        }else{\n            a_s1 = (yp1 - yp0) / (xp1-xp0);\n        }\n        \n        if (xp3 == xp2){\n            a_s2 = xp3;\n            ans_flg2 = 1;\n        }else if (yp3 == yp2){\n            a_s2 = yp3;\n            ans_flg2 = 2;\n        }else{\n            a_s2 = (yp3 - yp2) / (xp3-xp2);\n        }\n        \n        ans = 0;\n        if (a_s1 == xp1 && a_s2 == xp3 && ans_flg1 == 1 && ans_flg2 == 1){\n            ans = 2;\n        }else if(a_s1 == yp1 && a_s2 == yp3 && ans_flg1 == 2 && ans_flg2 == 2){\n            ans = 2;\n        }else if(a_s1 == xp1 && a_s2 == yp3 && ans_flg1 == 1 && ans_flg2 == 2){\n            ans = 1;\n        }else if(a_s1 == yp1 && a_s2 == xp3&& ans_flg1 == 2 && ans_flg2 == 1){\n            ans = 1;\n        }else{\n            int_a_s11 = a_s1 * 1000;\n            int_a_s21 = a_s2 * 1000;\n            int_a_s21 = 1 /a_s2 * 1000;\n            if (int_a_s11 == int_a_s21){\n                //cout << int_a_s1 << \" \"<< int_a_s2 << endl;\n                ans = 2;\n            }else if(int_a_s11 == int_a_s22){\n                ans = 1;\n            }\n        }\n        \n        cout << ans << endl;\n        \n    }\n    /*\n    for ( i = 0; i < q; ++i){\n        cout << xp0 << endl;\n        cout << yp0 << endl;\n        cout << xp1 << endl;\n        cout << yp1 << endl;\n        cout << xp2 << endl;\n        cout << yp2 << endl;\n        cout << xp3 << endl;\n        cout << yp3 << endl;\n    }\n    */\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define F first\n#define S second\n#define pii pair<int, int>\n#define eb emplace_back\n#define all(v) v.begin(), v.end()\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n#define rep3(i, l, n) for (int i = l; i < (n); ++i)\n#define chmax(a, b) a = (a >= b ? a : b)\n#define chmin(a, b) a = (a <= b ? a : b)\n#define out(a) cout << a << endl\n#define outa(a, n) { rep(_, n) cout << a[_] << \" \"; cout << endl; }\n#define outp(a, n) { cout << endl; rep(_, n) cout << a[_].F << \" \" << a[_].S << endl; }\n#define sz(v) (int)v.size()\n#define inf (int)(1e9+7)\n#define abs(x) (x >= 0 ? x : -(x))\n#define ceil(a, b) a / b + !!(a % b)\n#define FIX(a) fixed << setprecision(a)\n#define LB(v, n) (int)(lower_bound(all(v), n) - v.begin())\n#define UB(v, n) (int)(upper_bound(all(v), n) - v.begin())\nll pow(ll a, int b) { return b ? pow(a * a, b / 2) * (b % 2 ? a : 1) : 1; }\ntemplate<typename T> T gcd(T a, T b) { if (b == 0) return a; return gcd(b, a % b); }\n\n\n\n\nusing Point = complex<double>;\ndouble dot(Point a, Point b) { return real(conj(a) * b); }\ndouble cross(Point a, Point b) { return imag(conj(a) * b); }\nconst double eps = 1e-10;\n\nint main() {\n    int query;\n    cin >> query;\n    while (query--) {\n        int p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y;\n        cin >> p0x >> p0y >> p1x >> p1y >> p2x >> p2y >> p3x >> p3y;\n        \n        Point s1 = Point(p1x - p0x, p1y - p0y), s2 = Point(p3x - p2x, p3y - p2y);\n        if (abs(dot(s1, s2)) < eps) {\n            cout << 1 << endl;\n        } else if (abs(cross(s1, s2)) < eps) {\n            cout << 2 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n        \n        \n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (labs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(0), y(0){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tVector v1(x1 - x0, y1 - y0);\n\t\tVector v2(x3 - x2, y3 - y2);\n\t\tif (isParallel(v1, v2)) cout << 2 << endl;\n\t\telse if (isOrthogonal(v1, v2)) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>// c\n#include <iostream>// io\n#include <iomanip>\n#include <fstream>\n#include <sstream>\n#include <vector>// container\n#include <map>\n#include <set>\n#include <queue>\n#include <bitset>\n#include <stack>\n#include <algorithm>// other\n#include <complex>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\ntypedef int32_t i32;typedef int64_t i64;typedef i64 ll;typedef uint32_t uint;typedef uint64_t ull;\n\n#define ALL(c) (begin(c)),(end(c))\n#define REP(i,n) FOR(i,0,n)\n#define REPr(i,n) FORr(i,0,n)\n#define FOR(i,l,r) for(int i=(int)(l);i<(int)(r);++i)\n#define FORr(i,l,r) for(int i=(int)(r)-1;i>=(int)(l);--i)\n#define EACH(it,o) for(__typeof((o).begin()) it = (o).begin(); it != (o).end(); ++it)\n#define IN(l,v,r) ((l)<=(v) && (v)<(r))\n\n//debug\n#define DUMP(x)  cerr << #x << \" = \" << (x)\n#define DUMPLN(x)  DUMP(x) <<endl\n#define DEBUG(x) DUMP(x) << LINE() << \" \" << __FILE__\n#define DEBUGLN(x) DEBUG(x)<<endl\n#define LINE()    cerr<< \" (L\" << __LINE__ << \")\"\n#define LINELN()    LINE()<<endl\n#define CHECK(exp,act)  if(exp!=act){DUMPLN(exp);DEBUGLN(act);}\n#define STOP(e)  CHECK(e,true);if(!(e)) exit(1);\n\nclass range {\nprivate:\n    struct Iter{\n        int v;\n        int operator*(){return v;}\n        bool operator!=(Iter& itr) {return v < itr.v;}\n        void operator++() {++v;}\n    };\n    Iter i, n;\npublic:\n    range(int n) : i({0}), n({n}) {}\n    range(int i, int n) : i({i}), n({n}) {}\n    Iter& begin() {return i;}\n    Iter& end() {return n;}\n};\n\n//output\ntemplate<typename T> ostream& operator << (ostream& os, const vector<T>& as){REP(i,as.size()){if(i!=0)os<<\" \"; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const vector<vector<T> >& as){REP(i,as.size()){if(i!=0)os<<endl; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const set<T>& ss){EACH(a,ss){if(a!=ss.begin())os<<\" \"; os<<a;}return os;}\ntemplate<typename T1,typename T2> ostream& operator << (ostream& os, const pair<T1,T2>& p){os<<p.first<<\" \"<<p.second;return os;}\ntemplate<typename K,typename V> ostream& operator << (ostream& os, const map<K,V>& m){bool isF=true;EACH(p,m){if(!isF)os<<endl;os<<p;isF=false;}return os;}\n\n//input\nchar tmp[1000];\n#define nextInt(n) scanf(\"%d\",&n)\n#define nextLong(n) scanf(\"%lld\",&n) //I64d\n#define nextDouble(n) scanf(\"%lf\",&n) \n#define nextChar(n) scanf(\"%c\",&n)\n#define nextString(n) scanf(\"%s\",tmp);n=tmp\n\n// values\ntemplate<class T> T INF(){assert(false);};\ntemplate<> int INF<int>(){return 1<<28;};\ntemplate<> ll INF<ll>(){return 1LL<<58;};\ntemplate<> double INF<double>(){return 1e16;};\n\nnamespace _double_tmpl{\n    typedef long double D;const D EPS = 1e-8;\n    \n    static constexpr D Ae=0;\n    D A(D a,D b){return a+b;}D Ainv(D a){return -a;}\n    D S(D a,D b){return A(a,Ainv(b));}\n    \n    static constexpr D Me=1;\n    D M(D a,D b){return a*b;}D Minv(D a){return 1.0/a;};\n\n    int sig(D a,D b=0){return a<b-EPS?-1:a>b+EPS?1:0;}\n    bool eq(D a,D b){ return sig(abs(a-b))==0;}\n\n}\nusing namespace _double_tmpl;\nnamespace Ps{\n    // using namespace _double_tmpl;\n    typedef complex<D> P,Vec;\n\n#define X real()\n#define Y imag()\n    istream& operator >> (istream& is,complex<D>& p){\n        D x,y;is >> x >> y;p=P(x,y);return is;\n    }\n\n    bool eq(P a,P b){return eq(a.X,b.X) and eq(a.Y,b.Y);}\n    // a×b\n    D cross(const Vec& a,const Vec& b){return imag(conj(a)*b);}\n    // a・b\n    D dot(const Vec&a,const Vec& b) {return real(conj(a)*b);}\n\n    int ccw(const P& a,P b,P c){\n        b -= a; c -= a;\n        if (cross(b,c) > EPS)   return +1;       // counter clockwise\n        if (cross(b,c) < -EPS)   return -1;       // clockwise\n        if (dot(b,c) < 0)     return +2;       // c--a--b on line\n        if (norm(b) < norm(c)) return -2;       // a--b--c on line\n        return 0;\n    }\n}\nusing namespace Ps;\n\nnamespace Ls{\n    struct L : public vector<P> {\n        Vec vec;\n        L(const P &a, const P &b):vec(b - a){\n            push_back(a); push_back(b);\n        }\n    };\n\n}\nusing namespace Ls;\n\n\nstringstream ss;\nclass Main{\n    public:\n    void run(){\n        \n        int q;cin >> q;\n        REP(i,q){\n            P a,b;cin >> a >> b;L l(a,b);\n            P c,d;cin >> c >> d;L l2(c,d);\n            if(eq(abs(l.vec)*abs(l2.vec),abs(dot(l.vec,l2.vec)))){//誤差注意\n                cout << 2 <<endl;\n            }else if(eq(0,abs(dot(l[1]-l[0],l2[1]-l2[0])))){\n                cout << 1 <<endl;\n            }else{\n                cout << 0 <<endl;\n            }\n        }\n    }\n};\n\nint main(){\n cout <<fixed<<setprecision(20);\n cin.tie(0);\n ios::sync_with_stdio(false);\n Main().run();\n return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst double EPS = (1e-10);\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) {\n        return Point(x+p.x, y+p.y);\n    }\n    Point operator - (Point p) {\n        return Point(x-p.x, y-p.y);\n    }\n    Point operator * (double a) {\n        return Point(x*a, y*a);\n    }\n    Point operator / (double a) {\n        return Point(x/a, y/a);\n    }\n\n    double abs() {\n        return sqrt(norm());\n    }\n    double norm() {\n        return x*x + y*y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\ntypedef Point Vector;\n\nclass Segment {\npublic:\n    Point p1, p2;\n\n    Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\n\n// 内積\ndouble dot(Vector a, Vector b) {\n    return a.x*b.x + a.y*b.y;\n}\n\n// 外積\ndouble cross(Vector a, Vector b) {\n    return a.x*b.y - a.y*b.x;\n}\n\n// 線分s1, s2が直交するか\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// 線分s1, s2が平行であるか\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\nint main(void) {\n    int n; cin >> n;\n\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    for (int i = 0; i < n; i++) {\n        cin >> x0 >> y0 >> x1 >> y1\n            >> x2 >> y2 >> x3 >> y3;\n        Segment s1(Point(x0, y0), Point(x1, y1));\n        Segment s2(Point(x2, y2), Point(x3, y3));\n\n        if (isParallel(s1, s2)) {\n            cout << 2 << endl;\n        } else if (isOrthogonal(s1, s2)) {\n            cout << 1 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n \nint main(){\n  int n;\n  double ax,ay,bx,by,cx,cy,dx,dy;\n  scanf(\"%d\",&n);\n  while(n--){\n    scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&ax,&ay,&bx,&by,&cx,&cy,&dx,&dy);\n    P k=P(bx-ax,by-ay)*P(dx-cx,cy-dy);\n    if(k.imag()==0)printf(\"2\\n\");\n    else if(k.real()==0)printf(\"1\\n\");\n    else printf(\"0\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <sstream>\n#include <iostream>\n#include <fstream>\n#include <string.h>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <utility>\n#include <set>\n#include <cctype>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <deque>\n#include <limits>\n#include <iomanip>\n#include <ctype.h>\n#include <unordered_map>\n#include <random>\n#include <bitset>\n\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <math.h>\n#include <complex>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, double> pld;\ntypedef pair<double, double> pdd;\ntypedef pair<double, ll> pdl;\ntypedef pair<int, char> pic;\ntypedef vector<ll> vl;\ntypedef vector<int> vi;\ntypedef priority_queue<ll, vector<ll>, greater<ll>> llgreaterq;\ntypedef priority_queue<pll, vector<pll>, greater<pll>> pllgreaterq;\ntypedef priority_queue<pair<ll, pll>, vector<pair<ll, pll>>, greater<pair<ll, pll>>> plpllgreaterq;\ntypedef priority_queue<vi, vector<vi>, greater<vi>> vigreaterq;\ntypedef priority_queue<vl, vector<vl>, greater<vl >> vlgreaterq;\n#define bit(x,v) ((ll)x << v)\n#define rep(x,v) for(ll x=0;x<v;x++)\n#define rep2(x,f,v) for(ll x=f;x<v;x++)\n// 許容する誤差ε\n#define EPS (1e-10)\n// 2つのスカラーが等しいかどうか\n#define EQ(a,b) (std::abs((a)-(b)) < EPS)\n// 2つのベクトルが等しいかどうか\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n#define all(a) a.begin(),a.end()\n#define all0(a) memset(a,0,sizeof(a))\nconst ll INF = 1000000007;\nconst int MAX = 2000010;\nconst int MOD = 1000000007;\n\nlong long fac[MAX], finv[MAX], inv[MAX];\nvoid COMinit() {\n\tfac[0] = fac[1] = 1;\n\tfinv[0] = finv[1] = 1;\n\tinv[1] = 1;\n\tfor (int i = 2; i < MAX; i++) {\n\t\tfac[i] = fac[i - 1] * i % MOD;\n\t\tinv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;\n\t\tfinv[i] = finv[i - 1] * inv[i] % MOD;\n\t}\n}\n\n// 二項係数計算\nlong long COM(int n, int k) {\n\tif (n < k) return 0;\n\tif (n < 0 || k < 0) return 0;\n\treturn fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;\n}\n\nll gcd(ll a, ll b) {\n\tif (b == 0) return a;\n\treturn gcd(b, a % b);\n}\nint pr[200010];\nint lank[200010];\nvoid uini(int n) {\n\tfor (size_t i = 0; i <= n; i++)\n\t{\n\t\tpr[i] = i;\n\t}\n}\n\nint parent(int x) {\n\tif (x == pr[x]) return x;\n\treturn pr[x] = parent(pr[x]);\n}\n\nint same(int x, int y) {\n\treturn parent(x) == parent(y);\n}\n\nbool unit(int x, int y) {\n\tint px = parent(x);\n\tint py = parent(y);\n\n\tif (px == py) return false;\n\tif (lank[px] < lank[py]) {\n\t\tpr[py] = px;\n\t\tlank[px] += lank[py] + 1;\n\t}\n\telse {\n\t\tpr[px] = py;\n\t\tlank[py] += lank[px] + 1;\n\t}\n\treturn true;\n}\n\nll bit[200010];\nint max_n = 200000;\nint pm = 0;\nvoid add(int x) {\n\n\twhile (max_n >= x)\n\t{\n\t\tbit[x]++;\n\t\tx += x & -x;\n\t}\n}\nvoid sub(int x) {\n\twhile (max_n >= x)\n\t{\n\t\tbit[x]--;\n\t\tx += x & -x;\n\t}\n}\nll merge(ll* a, int left, int mid, int right) {\n\tll n1 = mid - left;\n\tll n2 = right - mid;\n\tvector<int> L(n1 + 1);\n\tvector<int> R(n2 + 1);\n\tfor (size_t i = 0; i < n1; i++)\n\t{\n\t\tL[i] = a[left + i];\n\t}\n\tfor (size_t i = 0; i < n2; i++)\n\t{\n\t\tR[i] = a[mid + i];\n\t}\n\n\tL[n1] = INF;\n\tR[n2] = INF;\n\tll i = 0;\n\tll j = 0;\n\tll r = 0;\n\tfor (size_t k = left; k < right; k++)\n\t{\n\t\tif (L[i] <= R[j]) {\n\t\t\ta[k] = L[i];\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\ta[k] = R[j];\n\t\t\tr += n1 - i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn r;\n}\nll merge2(pair<int, char>* a, int left, int mid, int right) {\n\tll n1 = mid - left;\n\tll n2 = right - mid;\n\tvector<pair<int, char>> L(n1 + 1);\n\tvector<pair<int, char>> R(n2 + 1);\n\tfor (size_t i = 0; i < n1; i++)\n\t{\n\t\tL[i] = a[left + i];\n\t}\n\tfor (size_t i = 0; i < n2; i++)\n\t{\n\t\tR[i] = a[mid + i];\n\t}\n\n\tL[n1] = make_pair(INF, ' ');\n\tR[n2] = make_pair(INF, ' ');\n\tll i = 0;\n\tll j = 0;\n\tll r = 0;\n\tfor (size_t k = left; k < right; k++)\n\t{\n\t\tif (L[i].first <= R[j].first) {\n\t\t\ta[k] = L[i];\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\ta[k] = R[j];\n\t\t\tr += n1 - i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn r;\n}\nll mergeSort2(pair<int, char>* a, int left, int right) {\n\tll res = 0;\n\tif (left + 1 < right) {\n\t\tint mid = (left + right) / 2;\n\t\tres = mergeSort2(a, left, mid);\n\t\tres += mergeSort2(a, mid, right);\n\t\tres += merge2(a, left, mid, right);\n\t}\n\treturn res;\n}\nll mergeSort(ll* a, int left, int right) {\n\tll res = 0;\n\tif (left + 1 < right) {\n\t\tint mid = (left + right) / 2;\n\t\tres = mergeSort(a, left, mid);\n\t\tres += mergeSort(a, mid, right);\n\t\tres += merge(a, left, mid, right);\n\t}\n\treturn res;\n}\nint partition(pair<int, char>* a, int p, int r) {\n\tpair<int, char> x = a[r];\n\tint i = p - 1;\n\tfor (size_t j = p; j < r; j++)\n\t{\n\t\tif (a[j].first <= x.first) {\n\t\t\ti++;\n\t\t\tswap(a[i], a[j]);\n\t\t}\n\t}\n\tswap(a[i + 1], a[r]);\n\treturn i + 1;\n}\nvoid quick(pair<int, char>* a, int p, int r) {\n\tif (p < r) {\n\t\tint q = partition(a, p, r);\n\t\tquick(a, p, q - 1);\n\t\tquick(a, q + 1, r);\n\t}\n}\n\nll n;\nint ci = 0;\nll P[1000010];\nstruct Node {\n\tint key;\n\tint priority;\n\tNode* parent, * left, * right;\n\tNode(int key, int priority);\n\tNode() {}\n};\nNode NIL;\nNode::Node(int key, int priority) : key(key), priority(priority) {\n\tleft = &NIL;\n\tright = &NIL;\n}\nNode* root = new Node();\nvoid cenrec(Node* k) {\n\tif (k->key == NIL.key) return;\n\tcenrec(k->left);\n\tcout << \" \" << k->key;\n\tcenrec(k->right);\n}\nvoid fastrec(Node* k)\n{\n\tif (k->key == NIL.key) return;\n\tcout << \" \" << k->key;\n\tfastrec(k->left);\n\tfastrec(k->right);\n}\nvoid insert(Node* v) {\n\tNode* y = &NIL;\n\tNode* x = root;\n\twhile (x->key != NIL.key)\n\t{\n\t\ty = x;\n\t\tif (v->key < x->key) {\n\t\t\tx = x->left;\n\t\t}\n\t\telse {\n\t\t\tx = x->right;\n\t\t}\n\t}\n\tv->parent = y;\n\tif (y->key == NIL.key) {\n\t\troot = v;\n\t}\n\telse if (v->key < y->key) {\n\t\ty->left = v;\n\t}\n\telse {\n\t\ty->right = v;\n\t}\n\n}\n\nNode* find(Node* k, ll v)\n{\n\tif (k->key == NIL.key) return &NIL;\n\tif (k->key == v) return k;\n\tif (v < k->key) return find(k->left, v);\n\treturn find(k->right, v);\n}\nvoid delp12(Node* x) {\n\tif (x->key == NIL.key)  return;\n\tNode* l = x->left;\n\tNode* r = x->right;\n\tNode* pr = x->parent;\n\n\tif (l->key == NIL.key\n\t\t&& r->key == NIL.key) {\n\t\tif (pr->left == x) {\n\t\t\tpr->left = &NIL;\n\t\t}\n\t\telse pr->right = &NIL;\n\t}\n\telse if (l->key != NIL.key) {\n\t\tif (pr->left == x) {\n\t\t\tpr->left = l;\n\t\t}\n\t\telse pr->right = l;\n\t\tl->parent = pr;\n\t}\n\telse if (r->key != NIL.key) {\n\t\tif (pr->left == x) {\n\t\t\tpr->left = r;\n\t\t}\n\t\telse pr->right = r;\n\t\tr->parent = pr;\n\t}\n}\nNode* get_next(Node* k) {\n\tif (k->key == NIL.key) return &NIL;\n\tNode* res = get_next(k->left);\n\tif (res->key != NIL.key) return res;\n\treturn k;\n}\nvoid del(Node* x) {\n\n\tif (x->key == NIL.key) return;\n\tNode* l = x->left;\n\tNode* r = x->right;\n\tNode* pr = x->parent;\n\n\tif (l->key != NIL.key && r->key != NIL.key) {\n\t\tNode* nex = get_next(r);\n\t\tx->key = nex->key;\n\t\tdelp12(nex);\n\t}\n\telse {\n\t\tdelp12(x);\n\t}\n}\nNode* rightRotate(Node* t) {\n\tNode* s = t->left;\n\tt->left = s->right;\n\ts->right = t;\n\treturn s;\n}\nNode* leftRotate(Node* t) {\n\tNode* s = t->right;\n\tt->right = s->left;\n\ts->left = t;\n\treturn s;\n}\nNode* _insert(Node* t, int key, int priority) {\n\tif (t->key == NIL.key) {\n\t\treturn new Node(key, priority);\n\t}\n\tif (key == t->key) {\n\t\treturn t;\n\t}\n\n\tif (key < t->key) {\n\t\tt->left = _insert(t->left, key, priority);\n\t\tif (t->priority < t->left->priority) {\n\t\t\tt = rightRotate(t);\n\t\t}\n\t}\n\telse {\n\t\tt->right = _insert(t->right, key, priority);\n\t\tif (t->priority < t->right->priority) {\n\t\t\tt = leftRotate(t);\n\t\t}\n\t}\n\treturn t;\n}\nNode* delete1(Node* t, int key);\nNode* _delete(Node* t, int key) {\n\tif (t->left->key == NIL.key && t->right->key == NIL.key) {\n\t\treturn &NIL;\n\t}\n\telse if (t->left->key == NIL.key) {\n\t\tt = leftRotate(t);\n\t}\n\telse if (t->right->key == NIL.key) {\n\t\tt = rightRotate(t);\n\t}\n\telse\n\t{\n\t\tif (t->left->priority > t->right->priority) {\n\t\t\tt = rightRotate(t);\n\t\t}\n\t\telse\n\t\t\tt = leftRotate(t);\n\t}\n\treturn delete1(t, key);\n}\nNode* delete1(Node* t, int key) {\n\tif (t->key == NIL.key) {\n\t\treturn &NIL;\n\t}\n\tif (key < t->key) {\n\t\tt->left = delete1(t->left, key);\n\t}\n\telse if (key > t->key) {\n\t\tt->right = delete1(t->right, key);\n\t}\n\telse return _delete(t, key);\n\treturn t;\n}\nint H;\nint left(int i) {\n\treturn i * 2 + 1;\n}\nint right(int i) {\n\treturn i * 2 + 2;\n}\n\n\nll heap[2000010];\nvoid maxHeapify(int i) {\n\tint l = left(i);\n\tint r = right(i);\n\tint largest = 0;\n\tif (l < H && heap[l] > heap[i])\n\t\tlargest = l;\n\telse\n\t\tlargest = i;\n\tif (r < H && heap[r] > heap[largest])\n\t\tlargest = r;\n\n\tif (largest != i) {\n\t\tswap(heap[i], heap[largest]);\n\t\tmaxHeapify(largest);\n\t}\n}\nint pare(int i) {\n\treturn (i - 1) / 2;\n}\nvoid raise(int i) {\n\tint l = pare(i);\n\tif (l < 0) return;\n\n\tif (heap[l] < heap[i]) {\n\t\tswap(heap[i], heap[l]);\n\t\traise(l);\n\t}\n}\nvoid minHeapify(int i) {\n\tint l = left(i);\n\tint r = right(i);\n\tint minimam = 0;\n\tif (l < H && heap[l] < heap[i])\n\t\tminimam = l;\n\telse\n\t\tminimam = i;\n\tif (r < H && heap[r] < heap[minimam])\n\t\tminimam = r;\n\n\tif (minimam != i) {\n\t\tswap(heap[i], heap[minimam]);\n\t\tminHeapify(minimam);\n\t}\n}\nvoid buildMaxHeap() {\n\tfor (int i = H / 2; i >= 0; i--)\n\t{\n\t\tmaxHeapify(i);\n\t}\n}\n\nint dx[] = { -1,0,1,0 };\nint dy[] = { 0,-1,0,1 };\nstd::vector<int> find_all(const std::string str, const std::string subStr) {\n\tstd::vector<int> result;\n\n\tint subStrSize = subStr.size();\n\tint pos = str.find(subStr);\n\n\twhile (pos != std::string::npos) {\n\t\tresult.push_back(pos);\n\t\tpos = str.find(subStr, pos + 1);\n\t}\n\n\treturn result;\n}\n//ll memo[100010];\n//ll next[100010];\n//ll dm[100010];\n//int f[100010];\n//ll rec(int x) {\n//\n//\tif (~memo[x]) return memo[x];\n//\tif (x == n) { \n//\t\tdm[n] = 1;\n//\t\treturn 1; \n//\t}\n//\tll *res = &memo[x];\n//\t*res = 0;\n//\tset<int> st;\n//\tst.insert(f[x]);\n//\tfor (int i = x + 1; i <= n; i++)\n//\t{\n//\t\tif (~memo[i]) {\n//\t\t\t*res += memo[i] + 1;\n//\t\t\t*res %= INF;\n//\t\t\tbreak;\n//\t\t}\n//\n//\t\t*res += rec(i);\n//\t\t*res %= INF;\n//\t\tif (st.find(f[i]) != st.end()) {break; }\n//\t\tst.insert(f[i]);\n//\t}\n//\n//\treturn *res;\n//}\n#define bit(x,v) ((ll)x << v)\n\nclass BIT {\n\n\tstatic const int MAX_N = 1000010;\npublic:\n\tBIT() { memset(bit, 0, sizeof(bit)); }\n\tint bit[MAX_N + 1], n;\n\tint sum(int i) {\n\t\tint s = 0;\n\t\twhile (i > 0)\n\t\t{\n\t\t\ts += bit[i];\n\t\t\ti -= i & -i;\n\t\t}\n\t\treturn s;\n\t}\n\n\tvoid add(int i, int x) {\n\t\twhile (i <= n)\n\t\t{\n\t\t\tbit[i] += x;\n\t\t\ti += i & -i;\n\t\t}\n\t}\n\tvoid clear() {\n\t\tmemset(bit, 0, sizeof(bit));\n\t}\n\tint a[MAX_N];\n\tvoid bable_swap_count() {\n\t\tll ans = 0;\n\t\tfor (size_t j = 0; j < n; j++)\n\t\t{\n\t\t\tans += j - sum(a[j]);\n\t\t\tadd(a[j], 1);\n\t\t}\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n\n\tint search(int s, int x) {\n\n\t\tll half = (s + x) / 2;\n\t\tll sh = sum(x);\n\n\t\tll sl = sum(half);\n\n\t\tll st = sum(s);\n\t\tif (sh - sl == 0) {\n\t\t\treturn x;\n\t\t}\n\t\tif (sh - sl < x - half) {\n\t\t\treturn search(half, x);\n\t\t}\n\n\t\tif (sl - st == 0) {\n\t\t\treturn half;\n\t\t}\n\n\t\tif (sl - st < half - s) {\n\t\t\treturn search(s, half);\n\t\t}\n\t\treturn -1;\n\t}\n\n\tint lankSearch(int lank) {\n\t\treturn lankSearch(lank, 0, MAX_N);\n\t}\n\tint lankSearch(int lank, int s, int t) {\n\n\t\tll half = (s + t) / 2;\n\n\t\tll v = sum(half);\n\t\tll v1 = sum(t);\n\t\tll v2 = sum(s);\n\t\tif (lank == 1) {\n\t\t\tif (s + 1 >= t) return t;\n\t\t\telse if (v - v2 > 0) {\n\t\t\t\treturn lankSearch(lank, s, half);\n\t\t\t}\n\t\t\telse return lankSearch(lank, half, t);\n\t\t}\n\n\t\tif ((v - v2) < lank) {\n\t\t\treturn lankSearch(lank - (v - v2), half, t);\n\t\t}\n\t\tif ((v - v2) >= lank) {\n\t\t\treturn lankSearch(lank, s, half);\n\t\t}\n\n\t\treturn -1;\n\t}\n};\n\nclass BIT2 {\n\n\tstatic const int MAX_N = 1000010;\npublic:\n\tBIT2() { memset(bit, 0, sizeof(bit)); }\n\tll bit[MAX_N + 1], n;\n\tll gmax(int i) {\n\t\tll s = 0;\n\t\twhile (i > 0)\n\t\t{\n\t\t\ts = max(bit[i], s);\n\t\t\ti -= i & -i;\n\t\t}\n\t\treturn s;\n\t}\n\n\tvoid add(int i, ll x) {\n\t\twhile (i <= n)\n\t\t{\n\t\t\tbit[i] = max(bit[i], x);\n\t\t\ti += i & -i;\n\t\t}\n\t}\n\tvoid clear() {\n\t\tmemset(bit, 0, sizeof(bit));\n\t}\n\n};\nvector<ll> getp(ll n) {\n\n\tvector<ll> res;\n\tll a = 2;\n\tif (n % 2 == 0) {\n\t\tres.push_back(2);\n\t\twhile (n % 2 == 0)n /= 2;\n\t}\n\n\tfor (ll i = 3; i * i <= n; i += 2)\n\t{\n\t\tif (n % i == 0) {\n\t\t\tres.push_back(i);\n\t\t\twhile (n % i == 0)n /= i;\n\t\t}\n\t}\n\tif (n != 1) res.push_back(n);\n\treturn res;\n}\nvector<ll> getp2(ll n) {\n\n\tvector<ll> res;\n\tll a = 2;\n\tif (n % 2 == 0) {\n\n\t\twhile (n % 2 == 0) { n /= 2; res.push_back(2); }\n\t}\n\n\tfor (ll i = 3; i * i <= n; i += 2)\n\t{\n\t\tif (n % i == 0) {\n\n\t\t\twhile (n % i == 0) { n /= i; res.push_back(i); }\n\t\t}\n\t}\n\tif (n != 1) res.push_back(n);\n\treturn res;\n}\nvector<pll> getp3(ll n) {\n\n\tvector<pll> res;\n\tll a = 2;\n\tint cnt = 0;\n\tif (n % 2 == 0) {\n\t\tres.push_back(make_pair(2, 0));\n\t\twhile (n % 2 == 0) { n /= 2; res[cnt].second++; }\n\t\tcnt++;\n\t}\n\n\tfor (ll i = 3; i * i <= n; i += 2)\n\t{\n\t\tif (n % i == 0) {\n\t\t\tres.push_back(make_pair(i, 0));\n\t\t\twhile (n % i == 0) { n /= i; res[cnt].second++; }\n\t\t\tcnt++;\n\t\t}\n\t}\n\tif (n != 1) res.push_back(make_pair(n, 1));\n\treturn res;\n}\nvector<ll> getDivisors(ll n) {\n\n\tvector<ll> res;\n\tll a = 2;\n\tres.push_back(1);\n\tfor (ll i = 2; i * i <= n; i++)\n\t{\n\n\t\tif (n % i == 0) {\n\t\t\tres.push_back(i);\n\t\t\tif (n / i != i)\n\t\t\t\tres.push_back(n / i);\n\t\t}\n\t}\n\treturn res;\n}\n\nstruct ve {\npublic:\n\tvector<ve> child;\n\tint _t = INF;\n\tve(int t) :_t(t) {}\n\tve(ve _left, ve _right) {\n\t\t_t = _left._t + _right._t;\n\t\tchild.push_back(_left);\n\t\tchild.push_back(_right);\n\t}\n\tbool operator<(const ve& t) const {\n\t\treturn _t > t._t;\n\t}\n};\n\nvector<bool> elas(ll n) {\n\tvector<bool> r(n);\n\tfor (ll i = 3; i < n; i += 2)\n\t{\n\t\tr[i] = 1;\n\t}\n\tr[0] = 0;\n\tr[1] = 0;\n\tr[2] = 1;\n\tfor (ll i = 3; i * i < n; i += 2)\n\t{\n\t\tif (!r[i]) continue;\n\t\tll ti = i * 2;\n\t\twhile (ti < n)\n\t\t{\n\t\t\tr[ti] = false;\n\t\t\tti += i;\n\t\t}\n\t}\n\treturn r;\n}\nbool isprime(ll v) {\n\tfor (ll i = 2; i * i <= v; i++)\n\t{\n\t\tif (v % i == 0) return false;\n\t}\n\treturn true;\n}\n\nll lcm(vector<ll> v) {\n\tif (v.size() == 0) return 0;\n\tll t = v[0];\n\tfor (size_t i = 1; i < v.size(); i++)\n\t{\n\t\tt = v[i] * t / gcd(v[i], t);\n\t}\n\treturn t;\n}\nll eulerphi(ll n) {\n\tauto p = getp(n);\n\tdouble u = n;\n\tfor (auto v : p) {\n\t\tu *= (double)(v - 1) / (double)v;\n\t}\n\treturn u;\n}\n\ndouble revs(double x) {\n\tll dig = 0;\n\tstringstream st;\n\tst << std::fixed << setprecision(0) << x;\n\tstring v = st.str();\n\treverse(v.begin(), v.end());\n\treturn stod(v);\n}\nbool chkparindrome(double x) {\n\tstringstream st;\n\tst << std::fixed << setprecision(0) << x;\n\tstring p = st.str();\n\tfor (size_t i = 0; i < p.size() / 2; i++)\n\t{\n\t\tif (p[i] != p[p.size() - i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nll digitC(double x) {\n\tstringstream st;\n\tst << fixed << setprecision(0) << x;\n\treturn st.str().size();\n}\nll digitSum(double x) {\n\tstringstream st;\n\tst << std::fixed << x;\n\tstring p = st.str();\n\tll rs = 0;\n\tfor (size_t i = 0; i < p.size(); i++)\n\t{\n\t\tif (p[i] == '.') break;\n\t\trs += p[i] - '0';\n\t}\n\treturn rs;\n}\npdd recs(int x) {\n\n\tif (x == 0) return make_pair(1, 2);\n\tpdd d = recs(x - 1);\n\tauto nu = d.second * 2.0 + d.first;\n\tauto de = d.second;\n\treturn make_pair(de, nu);\n}\nll caldig(ll a) {\n\tll r = 0;\n\twhile (a > 0) { a /= 10; r++; }\n\treturn r;\n}\nint chav(char v) {\n\tif (v <= 'Z') return v - 'A';\n\treturn v - 'a' + 26;\n}\nchar itoch(int i) {\n\tif (i < 26) return i + 'A';\n\treturn (i - 26) + 'a';\n}\nint crmp[1000][1000];\nint countR(ll base, ll x, ll y, int deep) {\n\n\tif (~crmp[x][y]) {\n\t\treturn deep - crmp[x][y];\n\t}\n\tcrmp[x][y] = deep;\n\tdouble nu = sqrt(base) + x;\n\tdouble de = (base - (x * x)) / y;\n\tll u = nu / de;\n\tll nx = x - (u * de);\n\treturn countR(base, -nx, de, deep + 1);\n}\n\nbool isPermutation(ll x, ll y) {\n\tint c1[10];\n\tint c2[10];\n\tmemset(c1, 0, sizeof(c1));\n\tmemset(c2, 0, sizeof(c2));\n\twhile (x > 0)\n\t{\n\t\tc1[x % 10]++;\n\t\tx /= 10;\n\t}\n\twhile (y > 0)\n\t{\n\t\tc2[y % 10]++;\n\t\ty /= 10;\n\t}\n\n\tfor (size_t i = 0; i < 10; i++)\n\t{\n\t\tif (c1[i] != c2[i]) return false;\n\t}\n\treturn true;\n}\n\ndouble heron(ll a, ll b, ll c) {\n\tdouble s = (double)(a + b + c) / 2.0;\n\treturn sqrt(s * (s - a) * (s - b) * (s - c));\n}\n\ndouble calcThreePS(double x1, double y1, double x2, double y2, double x3, double y3) {\n\treturn abs((x1 * y2 + x2 * y3 + x3 * y1 - y1 * x2 - y2 * x3 - y3 * x1) / 2.0);\n}\ntypedef vector<vl> mat;\nclass Matrix1 {\n\npublic:\n\tstatic const int M = INF;\n\tint n;\n\tmat mul(mat& A, mat& B) {\n\t\tmat C(A.size(), vl(B[0].size()));\n\t\tfor (size_t i = 0; i < A.size(); i++)\n\t\t{\n\t\t\tfor (size_t k = 0; k < B.size(); k++)\n\t\t\t{\n\t\t\t\tfor (size_t j = 0; j < B[0].size(); j++)\n\t\t\t\t{\n\t\t\t\t\tC[i][j] = (C[i][j] + A[i][k] * B[k][j]) % M;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn C;\n\t}\n\n\tmat pow(mat A, ll n) {\n\t\tmat B(A.size(), vl(A.size()));\n\t\tfor (size_t i = 0; i < A.size(); i++)\n\t\t{\n\t\t\tB[i][i] = 1;\n\t\t}\n\t\twhile (n > 0) {\n\t\t\tif (n & 1) B = mul(B, A);\n\t\t\tA = mul(A, A);\n\t\t\tn >>= 1;\n\t\t}\n\n\n\t\treturn B;\n\t}\n\n};\nll m;\nll stringDivRm(string s, ll k) {\n\n\tll v = 0;\n\t\n\tfor (size_t i = 0; i < s.size(); i++)\n\t{\n\t\tv *= 10;\n\t\tv += s[i] - '0';\n\t\tv %= k;\n\t}\n\treturn v;\n}\n\nll repPow(ll b, ll x,ll md) {\n\tll res = 1;\n\tll v = b;\n\n\twhile (x > 0)\n\t{\n\t\tif (x & 1) {\n\t\t\tres *= v;\n\t\t\tres %= md;\n\t\t}\n\t\tv *= v;\n\t\tv %= md;\n\t\tx >>= 1;\n\t}\n\n\treturn res;\n}\nll repPow(ll b, ll x) {\n\treturn repPow(b, x, INF);\n}\nll uar[1000010];\nll upr(ll u, ll r) {\n\treturn (fac[u] * finv[u-r]) % INF;\n}\nll partitionMemo[20010][110];\nll partitionNum(ll v, ll k) {\n\tif (k == 1) return 1;\n\tif (v <= 1) return 1;\n\tif (~partitionMemo[v][k]) return partitionMemo[v][k];\n\tll r = 0;\n\tif (v < k) {\n\t\tr = partitionNum(v,v);\n\t}\n\telse\n\t\tr = partitionNum(v, k - 1) + partitionNum(v - k, k);\n\tr %= INF;\n\n\treturn partitionMemo[v][k] = r;\n}\n\nclass SetTree1 {\n\npublic:\n\tstatic const int MAX_N = 100000;\n\tstatic const int MAX_Q = 100000;\n\tint N, Q;\n\tstatic const int DAT_SIZE = (1 << 18) - 1;\n\tint A[MAX_N];\n\tchar T[MAX_Q];\n\n\tll data[DAT_SIZE];\n\tvoid init(int _n) {\n\t\tmemset(data, 0, sizeof(data));\n\t\tint p = 1;\n\t\twhile (p < _n)\n\t\t{\n\t\t\tp <<= 1;\n\t\t}\n\t\tN = p;\n\t\tQ = N - 1;\n\t}\n\tvoid update(int a, int b) {\n\n\t\tfor (size_t i = a; i <= b; i++)\n\t\t{\n\t\t\tupdate(Q + i);\n\t\t}\n\t}\n\tvoid update(int a) {\n\n\t\tint x = data[a];\n\t\twhile (a > 0)\n\t\t{\n\t\t\tif (a % 2 == 0)a--;\n\t\t\ta >>= 1;\n\t\t\tdata[a] += x;\n\t\t}\n\t}\n\tvoid add(int a, int b, int x) {\n\t\tadd(a, b + 1, x, 0,0,N);\n\t}\n\tvoid add(int a, int b, int x, int k, int l, int r) {\n\t\tif (a <= l && r <= b) {\n\t\t\tdata[k] += x;\n\t\t}\n\t\telse if (l < b && a < r) {\n\t\t\tdata[k] += (min(b, r) - max(a, l)) * x;\n\t\t\tadd(a, b, x, k * 2 + 1, l, (l + r) / 2);\n\t\t\tadd(a, b, x, k * 2 + 2, (l + r) / 2, r);\n\t\t}\n\t}\n\tll sum(int a, int b) {\n\t\treturn sum(a, b + 1, 0, 0, N);\n\t}\n\tll sum(int a, int b, int k, int l, int r) {\n\t\tif (b <= l || r <= a) return 0;\n\t\telse if (a <= l && r <= b) {\n\t\t\treturn data[k];\n\t\t}\n\t\telse {\n\t\t\tll res = 0;\n\t\t\tres += sum(a, b, k * 2 + 1, l, (l + r) / 2);\n\t\t\tres += sum(a, b, k * 2 + 2, (l + r) / 2, r);\n\t\t\treturn res;\n\t\t}\n\t}\n\n};\nclass Segment;\nclass Circle;\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tbool operator < (const Point& p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\tstatic double dot(Point a, Point b) {\n\t\treturn a.x * b.x + a.y * b.y;\n\t}\n\tstatic double cross(Point a, Point b) {\n\t\treturn a.x * b.y - a.y * b.x;\n\t}\n\tstatic bool isOrthogonal(Point a, Point b) {\n\t\treturn EQ(dot(a, b), 0.0);\n\t}\n\tstatic bool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isOrthogonal(a1 - a2, b1 - b2);\n\t}\n\tstatic bool isOrthogonal(Segment s1, Segment s2);\n\n\tstatic bool isPalallel(Point a, Point b) {\n\t\treturn EQ(cross(a, b), 0.0);\n\t}\n\tstatic bool isPalallel(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isPalallel(a1 - a2, b1 - b2);\n\t}\n\tstatic bool isPalallel(Segment s1, Segment s2);\n\n\tstatic const int COUNTER_CLOCKWISE = 1;\n\tstatic const int CLOCKWISE = -1;\n\tstatic const int ONLINE_BACK = 2;\n\tstatic const int ONLINE_FRONT = -2;\n\tstatic const int ON_SEGMENT = 0;\n\tstatic int ccw(Point p0, Point p1, Point p2) {\n\t\tPoint a = p1 - p0;\n\t\tPoint b = p2 - p0;\n\t\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\t\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\t\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\t\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\t\treturn ON_SEGMENT;\n\t}\n\n\tstatic bool intersect(Point p1, Point p2, Point p3, Point p4) {\n\t\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0\n\t\t\t&& ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n\t}\n\tstatic bool intersect(Segment s1, Segment s2);\n\tstatic Point project(Segment s, Point p);\n\n\tstatic Point reflect(Segment s, Point p);\n\n\tstatic Point getDistance(Point a, Point b) {\n\t\treturn (a - b).abs();\n\t}\n\n\tstatic double getDistanceLP(Segment s, Point p);\n\n\tstatic double getDistanceSP(Segment s, Point p);\n\n\tstatic double getDistance(Segment s1, Segment s2);\n\n\tstatic Point getIntersection(Segment s1, Segment s2);\n\n\tstatic pair<Point, Point> crossPoints(Circle c, Segment s);\n\n\tstatic int contains(vector<Point> g, Point p) {\n\t\tint n = g.size();\n\t\tbool x = false;\n\t\trep(i, n) {\n\t\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\t\t// 線の上に載っているか\n\t\t\tif (std::abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\n\t\t\t// pを基準として上下にあるか\n\t\t\t// または外積が正か?(→にあるか)\n\t\t\tif (a.y > b.y) swap(a, b);\n\t\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t\t}\n\t\treturn x ? 2 : 0;\n\t}\n\n\tstatic vector<Point> andrewScan(vector<Point> s) {\n\t\tvector<Point> u, l;\n\t\tif (s.size() < 3) return s;\n\t\tsort(all(s));\n\t\tu.push_back(s[0]);\n\t\tu.push_back(s[1]);\n\t\tl.push_back(s[s.size() - 1]);\n\t\tl.push_back(s[s.size() - 2]);\n\n\t\tfor (int i = 2; i < s.size(); i++) {\n\n\t\t\tfor (int _n = u.size(); _n >= 2 && ccw(u[_n - 2], u[_n - 1], s[i]) > CLOCKWISE; _n--) {\n\t\t\t\tu.pop_back();\n\t\t\t}\n\t\t\tu.push_back(s[i]);\n\t\t}\n\n\t\tfor (int i = s.size() - 3; i >= 0; i--) {\n\n\t\t\tfor (int _n = l.size(); _n >= 2 && ccw(l[_n - 2], l[_n - 1], s[i]) > CLOCKWISE; _n--) {\n\t\t\t\tl.pop_back();\n\t\t\t}\n\t\t\tl.push_back(s[i]);\n\t\t}\n\n\t\treverse(all(l));\n\t\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\t{\n\t\t\tl.push_back(u[i]);\n\t\t}\n\n\t\treturn l;\n\t}\n\n\tstatic double getArea(vector<Point> g) {\n\t\tdouble res = 0;\n\t\trep(i, n) {\n\t\t\tint ne = (i + 1) % n;\n\t\t\tres += cross(g[i], g[ne]);\n\t\t}\n\t\treturn res / 2.0;\n\t}\n};\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n\tPoint p1tp2() { return p2 - p1; }\n\tPoint p2tp1() { return p1 - p2; }\n\tdouble norm() {\n\t\treturn (p2 - p1).norm();\n\t}\n\tvoid getCin() {\n\t\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\t}\n};\n\nbool Point::isOrthogonal(Segment s1, Segment s2) {\n\treturn EQ(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool Point::isPalallel(Segment s1, Segment s2) {\n\treturn EQ(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool Point::intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\nPoint Point::project(Segment s, Point p) {\n\tPoint base = s.p2 - s.p1;\n\tdouble r = Point::dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\nPoint Point::reflect(Segment s, Point p) {\n\treturn (project(s, p) * 2) - p;\n}\ndouble Point::getDistanceLP(Segment s, Point p) {\n\treturn std::abs(cross(s.p2 - s.p1, p - s.p1) / (s.p2 - s.p1).abs());\n}\ndouble Point::getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\ndouble Point::getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min({ getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)\n\t\t,getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2) });\n}\nPoint Point::getIntersection(Segment s1, Segment s2) {\n\t// (s1.p1 - s2.p1).norm()\n\tauto bs = s1.p2 - s1.p1;\n\tauto n1 = s2.p1 - s1.p1;\n\tauto n2 = s2.p2 - s1.p1;\n\tauto c1 = std::abs(cross(n1, bs)) / bs.norm();\n\tauto c2 = std::abs(cross(n2, bs)) / bs.norm();\n\treturn s2.p1 + (s2.p2 - s2.p1) * (c1 / (c1 + c2));\n\t// c1:c2=t:1-t\n\t// c2t=(1-t)c1\n\t// t/(1-t)=c1/(c1+c2)\n\t// \n}\n\n\ndouble arg(Point p) { return atan2(p.y, p.x); }\nPoint polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n\tstatic pair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\t\tdouble d = (c1.c - c2.c).abs(); // 中心点どうしの距離\n\t\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\t\tdouble t = arg(c2.c - c1.c);\n\t\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n\n\t}\n};\n\npair<Point, Point> Point::crossPoints(Circle c, Segment s) {\n\tauto pp = project(s, c.c);\n\tauto f = (pp - c.c).norm();\n\tauto mu = sqrt(c.r * c.r - f);\n\tauto e = s.p1tp2() / s.p1tp2().abs();\n\treturn make_pair(pp + e * mu, pp - e * mu);\n\n}\n\nll count(vector<ll> v, ll x) {\n\tll res = 0;\n\tll si = v.size();\n\trep(i, v.size()) {\n\t\tll p = lower_bound(all(v), x / v[i] + (x % v[i] > 0 ? 1 : 0)) - v.begin();\n\t\tif (i < p) p--;\n\t\tres += max(p - i,0LL);\n\t}\n\treturn res;\n}\nvoid solv() {\n\tcin >> n;\n\trep(i, n) {\n\t\tSegment s1, s2;\n\t\ts1.getCin();\n\t\ts2.getCin();\n\t\t// s1とs2が直行しているかは内積が0かどうかでしらべ\n\t\t// 平行かどうかは外積が0かどうかでしらべる\n\t\tif (abs(Point::dot(s1.p1tp2(), s2.p1tp2())) <= EPS) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse if (abs(Point::cross(s1.p1tp2(), s2.p1tp2())) <= EPS) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t\t\n\t}\n}\nint main() {\n\t//COMinit();\n\tsolv();\n\treturn 0;\n}\n \n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst double eps = 1e-10;\nstruct Node\n{\n    double x, y;\n    Node(double xx = 0, double yy = 0){\n        x = xx; y = yy;\n    }\n\n    Node operator + (Node b){\n        return Node(x+b.x, y+b.y);\n    }\n    Node operator - (Node b){\n        return Node(x-b.x, y-b.y);\n    }\n    Node operator * (double a){\n        return Node(a*x, a*y);\n    }\n    Node operator / (double a){\n        return Node(x/a, y/a);\n    }\n\n    double norm(){return x*x+y*y;}\n    double len(){\n        return sqrt(norm());\n    }\n\n    bool operator < (const Node &p) const{\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n\n    bool operator == (const Node &p) const {\n        return fabs(x-p.x)<eps && fabs(y-p.y)<eps;\n    }\n};\n\nbool equals(double a, double b) {\n    return fabs(a)-fabs(b) < eps;\n}\n\ntypedef Node vtr;\n\nstruct line{\n    Node a, b;\n    line(Node x, Node y){\n        a = x, b = y;\n    }\n};\n\n//向量点积\ndouble dot(vtr a, vtr b){\n    return a.x*b.x+a.y*b.y;\n}\n\n//向量叉积\ndouble cross(vtr a, vtr b){\n    return a.x*b.y-a.y*b.x;\n}\n\n//判断向量a,b是否正交(垂直)\nbool isOrthogonal(vtr a, vtr b){\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Node a1, Node a2, Node b1, Node b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\n\nbool isOrthogonal(line s1, line s2){\n    return equals(dot(s1.b-s1.a, s2.b-s2.a), 0.0);\n}\n\n//判断向量a,b是否平行\nbool isParallel(vtr a, vtr b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Node a1, Node a2, Node b1, Node b2){\n    return isParallel(a1-a2, b1-b2);\n}\n\nbool isParallel(line s1, line s2){\n    return equals(cross(s1.b-s1.a, s2.b-s2.a), 0.0);\n}\n\n//投影 求垂足坐标\n//点p在直线p1p2上的投影\nNode project(line s, Node p)\n{\n    vtr base = s.b-s.a;\n    //算出比例\n    double r = dot(p-s.a, base)/base.norm();\n    return s.a+base*r;\n}\n\n//映象 求p以s为对称轴的对称点\nNode reflect(line s, Node p){\n    return p+(project(s, p)-p)*2.0;\n}\n\nint ccw(Node p0, Node p1, Node p2)\n{\n    vtr a = p1-p0, b = p2-p0;\n    //b在a的逆时针方向\n    if(cross(a, b) > eps) return 1;\n    //顺时针方向\n    if(cross(a, b) < -eps) return -1;\n    //共线但反向\n    if(dot(a, b) < -eps) return 2;\n    //共线同向\n    //b更长一点\n    if(a.norm() < b.norm()) return -2;\n    //a更长一点\n    return 0;\n}\n\n//判断两直线是否相交\n//bool intersect(Node p1, Node p2, Node p3, Node p4)\n//bool intersect\n\n\nint main()\n{\n    Node p0, p1, p2, p3;\n    int q; cin >> q;\n    while(q--)\n    {\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        if(isOrthogonal(p0, p1, p2, p3)) puts(\"1\");\n        else if(isParallel(p0, p1, p2, p3)) puts(\"2\");\n        else puts(\"0\");\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define MP make_pair\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n\treturn a < -EPS ? -1 : a > EPS;\n}\n\nstruct P {\n\tdb x, y;\n\tP() {\n\t}\n\tP(db _x, db _y) :\n\t\t\tx(_x), y(_y) {\n\t}\n\tP operator+(P p) {\n\t\treturn P(x + p.x, y + p.y);\n\t}\n\tP operator-(P p)  {\n\t\treturn P(x - p.x, y - p.y);\n\t}\n\tP operator*(db d) {\n\t\treturn P(x * d, y * d);\n\t}\n\tP operator/(db d) {\n\t\treturn P(x / d, y / d);\n\t}\n\tbool operator<(P p) const {\n\t\tint c = sign(x - p.x);\n\t\tif (c)\n\t\t\treturn c == -1;\n\t\treturn sign(y - p.y) == -1;\n\t}\n\tdb dot(P p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb det(P p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb distTo(P p) { return (*this-p).abs(); }\n\n\tdb alpha() {\n\t\treturn atan2(y, x);\n\t}\n\tvoid read() {\n\t\tcin>>x>>y;\n\t}\n\tdb abs() {\n\t\treturn sqrt(abs());\n\t}\n\tdb abs2() {\n\t\treturn x * x + y * y;\n\t}\n\tP rot90(){\n\t\treturn P(-y,x);\n\t}\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isSS(P p1, P p2, P q1, P q2) {\n\tdb a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n\treturn (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nbool isMiddle(db a, db m, db b) {\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n \nbool isMiddle(P a, P m, P b) {\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nbool onSegment(P p1, P p2, P q){\n\treturn crossOp(p1,p2,q) == 0 && isMiddle(p1, q, p2);\n}\n\nP proj(P p1, P p2, P q) {\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\n\nP reflect(P p1, P p2, P q){\n\treturn proj(p1,p2,q) * 2 - q;\n}\n\ndb nearest(P p1,P p2,P q){\n\tP h = proj(p1,p2,q);\n\tif(isMiddle(p1,h,p2))\n\t\treturn q.distTo(h);\n\treturn min(p1.distTo(q),p2.distTo(q));\n}\n\ndb getrad(P p1,P p2){\n\treturn atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n\tdb A = p1.distTo(p2);\n\tdb B = p2.distTo(p3);\n\tdb C = p3.distTo(p1);\n\treturn sqrtl(A*B*C/(A+B+C));\n}\n\nint main(){\n\tint n;cin>>n;\n\trep(i,0,n){\n\t\tP p1,p2,q1,q2;\n\t\tp1.read(),p2.read(),q1.read(),q2.read();\n\t\tP a = p2 - p1;\n\t\tP b = q2 - q1;\n\n\t\tif(a.det(b) == 0){\n\t\t\tputs(\"2\");\n\t\t} else if(a.dot(b) == 0){\n\t\t\tputs(\"1\");\n\t\t} else {\n\t\t\tputs(\"0\");\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <list>\n#include <iterator>\n#include <cassert>\n#include <numeric>\n#include <functional>\n//#include <numeric>\n#pragma warning(disable:4996) \n \ntypedef long long ll;\ntypedef unsigned long long ull;\n#define MIN(a, b) ((a)>(b)? (b): (a))\n#define MAX(a, b) ((a)<(b)? (b): (a))\n#define LINF  9223300000000000000\n#define LINF2 1223300000000000000\n#define LINF3 1000000000000\n#define INF 2140000000\nconst long long MOD = 1000000007;\n//const long long MOD = 998244353;\n\nusing namespace std;\n\nvoid vecscl(double c, const double v0[2], double v1[2])\n{\n    v1[0] = v0[0] * c;\n    v1[1] = v0[1] * c;\n}\n\nvoid vecadd(const double v0[2], const double v1[2], double v2[2])\n{\n    v2[0] = v0[0] + v1[0];\n    v2[1] = v0[1] + v1[1];\n}\n\nvoid vecsub(const double v0[2], const double v1[2], double v2[2])\n{\n    v2[0] = v0[0] - v1[0];\n    v2[1] = v0[1] - v1[1];\n}\n\ndouble vecprd(const double v0[2], const double v1[2])\n{\n    return v0[0] * v1[1] - v0[1] * v1[0];\n}\n\ndouble vecsum(const double v0[2], const double v1[2])\n{\n    return v0[0] * v1[0] + v0[1] * v1[1];\n}\n\ndouble veclen(const double v[2])\n{\n    return sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\nbool vecnrm(double eps, const double v0[2], double v1[2])\n{\n    double len = veclen(v0);\n    if (len < eps) {\n        return false;\n    }\n    vecscl(1 / len, v0, v1);\n    return true;\n}\n\nconst double eps = 1e-12;\n\nvoid solve()\n{\n    int Q;\n    scanf(\"%d\", &Q);\n    int t;\n    for (t = 0; t < Q; t++) {\n        int x[4], y[4];\n        int k;\n        for (k = 0; k < 4; k++) {\n            scanf(\"%d%d\", &x[k], &y[k]);\n        }\n        double v0[2] = { x[1] - x[0], y[1] - y[0] };\n        double v1[2] = { x[3] - x[2], y[3] - y[2] };\n        double tmp = vecsum(v0, v1);\n        if (fabs(tmp) < eps) {\n            printf(\"1\\n\"); continue;\n        }\n        tmp = vecprd(v0, v1);\n        if (fabs(tmp) < eps) {\n            printf(\"2\\n\"); continue;\n        }\n        printf(\"0\\n\");\n    }\n\n    return;\n}\n\n\nint main(int argc, char* argv[])\n{\n#if 1\n    solve();\n#else\n    int T;\n    scanf(\"%d\", &T);\n    int t;\n    for(t=0; t<T; t++) {\n        //printf(\"Case #%d: \", t+1);\n        solve();\n    }\n#endif\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<complex>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cstdio>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define pb push_back\n#define mp make_pair\n#define it ::iterator\n#define all(in) in.begin(),in.end()\nconst double PI=acos(-1);\nconst double ESP=1e-10;\nusing namespace std;\ntypedef complex<double> P;\ndouble dot(P a,P b){\n  return real(conj(a)*b);\n}\ndouble cross(P a,P b){\n  return imag(conj(a)*b);\n}\nP pin(){\n  double x,y;\n  cin>>x>>y;\n  P p(x,y);\n  return p;\n}\nint main(){\n  int n;\n  cin>>n;\n  while(n--){\n    P a[4];\n    rep(i,4)a[i]=pin();\n    P b=a[1]-a[0];\n    P c=a[3]-a[2];\n    if(cross(b,c)==0)cout<<2<<endl;\n    else if(dot(b,c)==0)cout<<1<<endl;\n    else cout<<0<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\ntypedef long long ll;\n\nstruct Vector{double x, y;};\n\nbool isPara(Vector v1, Vector v2){\n  int outer=v1.x*v2.y-v1.y*v2.x;\n  //cout << \"outer:\" << outer << endl;\n  if(outer==0) return true;\n  else return false;\n}\n\nbool isOrth(Vector v1, Vector v2){\n  int inner=v1.x*v2.x+v1.y*v2.y;\n  //cout << \"inner:\" << inner << endl;\n  if(inner==0) return true;\n  else return false;\n}\n\nint main(){\n  int q; cin >> q;\n  for(int i=0;i<q;i++){\n    int x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n    Vector v1;\n    v1.x=x1-x0; v1.y=y1-y0;\n    int x2, y2, x3, y3; cin >> x2 >> y2 >> x3 >> y3;\n    Vector v2;\n    v2.x=x3-x2; v2.y=y3-y2;\n    if(isOrth(v1, v2)){\n      cout << 1 << endl;\n    }else if(isPara(v1, v2)){\n      cout << 2 << endl;\n    }else{\n      cout << 0 << endl;\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<list>\n#include<string>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<ctime>\nusing namespace std;\n\ntypedef long long ll;\n\nbool debug = false;\nconst int NIL = -1;\nconst int INF = 1000000000;\nconst int NUM = 100010;\nconst double eps = 1e-10;\nclock_t START, END;\n\nint X, Y, E;\n\n//basic defitition\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n};\ntypedef Point Vector;\nVector operator + (Vector A, Vector B) { return Vector(A.x + B.x, A.y + B.y); }\nVector operator - (Point A, Point B) { return Vector(A.x - B.x, A.y - B.y); }\nVector operator * (Vector A, double p) { return Vector(A.x * p, A.y * p); }\nVector operator / (Vector A, double p) { return Vector(A.x / p, A.y / p); }\nbool operator < (const Point& a, const Point& b) { return a.x < b.x || (a.x == b.x && a.y < b.y); }\nint dcmp(double x) { if (fabs(x) < eps)return 0; else return x < 0 ? -1 : 1; }\nbool operator == (const Point& a, const Point& b) { return dcmp(a.x - b.x) == 0 && dcmp(a.y - b.y) == 0; }\n// basic operator\ndouble Dot(Vector A, Vector B) { return A.x * B.x + A.y * B.y; }\ndouble Length(Vector A) { return sqrt(Dot(A, A)); }\ndouble Angle(Vector A, Vector B) { return acos(Dot(A, B) / Length(A) / Length(B)); }\ndouble Cross(Vector A, Vector B) { return A.x * B.y - A.y * B.x; }\ndouble Area2(Point A, Point B, Point C) { return Cross(B - A, C - A); }\nVector Rotate(Vector A, double rad) { return Vector(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) + A.y * cos(rad)); }\nVector Normal(Vector A) { double L = Length(A); return Vector(-A.y / L, A.x / L); } //A is not zero vector\n//point and line\nPoint GetLineIntersection(Point P, Vector v, Point Q, Vector w) { \n\tVector u = P - Q;\n\tdouble t = Cross(w, u) / Cross(v, w);\n\treturn P + v * t;\n}//two lines only have one intersection and Cross(v,w) is not zero\ndouble DistanceToLine(Point P, Point A, Point B) {\n\tVector v1 = B - A, v2 = P - A;\n\treturn fabs(Cross(v1, v2)) / Length(v1);\n}\ndouble DistanceToSegment(Point P, Point A, Point B) {\n\tif (A == B) return Length(P - A);\n\tVector v1 = B - A, v2 = P - A, v3 = P - B;\n\tif (dcmp(Dot(v1, v2)) < 0) return Length(v2);\n\telse if (dcmp(Dot(v1, v3)) > 0) return Length(v3);\n\telse return fabs(Cross(v1, v2)) / Length(v1);\n}\nPoint GetLineProjection(Point P, Point A, Point B) {\n\tVector v = B - A;\n\treturn A = v * (Dot(v, P - A) / Dot(v, v));\n}\nbool SegmentProperIntersection(Point a1, Point a2, Point b1,Point b2) {\n\tdouble c1 = Cross(a2 - a1, b1 - a1), c2 = Cross(a2 - a1, b2 - a1), c3 = Cross(b2 - b1, a1 - b1), c4 = Cross(b2 - b1, a2 - b1);\n\treturn dcmp(c1) * dcmp(c2) < 0 && dcmp(c3) * dcmp(c4) < 0;\n}\nbool OnSegment(Point p, Point a1, Point a2) {\n\treturn dcmp(Cross(a1 - p, a2 - p)) == 0 && dcmp(Dot(a1 - p, a2 - p)) < 0;\n}\n//polygon\ndouble ConvexPolygonArea(Point* p, int n) {\n\tdouble area = 0;\n\tfor (int i = 1; i < n - 1; i++)\n\t\tarea == Cross(p[i] - p[0], p[i + 1] - p[0]);\n\treturn area / 2;\n}\n\n\nint main(void)\n{\n\tif (debug) {\n\t\tSTART = clock();\n\t\tfreopen(\"in29.txt\", \"r\", stdin);\n\t\tfreopen(\"out.txt\", \"w\", stdout);\n\t}\n\tint q;\n\tPoint A, B, C, D;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\", &A.x, &A.y, &B.x, &B.y, &C.x, &C.y, &D.x, &D.y);\n\t\tif (dcmp(Dot(B - A, D - C)) == 0)\n\t\t\tcout << \"1\" << endl;\n\t\telse if (dcmp(Cross(B - A, D - C)) == 0)\n\t\t\tcout << \"2\" << endl;\n\t\telse\n\t\t\tcout << \"0\" << endl;\n\t}\n\tif (debug) {\n\t\tEND = clock();\n\t\tdouble endtime = (double)(END - START) / 1000;\n\t\tprintf(\"total time = %lf s\", endtime);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\nusing namespace std;\n#define EPS 1e-10\nint equals(double a, double b) { return fabs(a - b) < EPS; };\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x=0, double y=0) :x(x), y(y) { };\n\tPoint operator + (Point& p) {\n\t\treturn Point(p.x + x, p.y + y);\n\t}\n\tPoint operator - (Point& p) {\n\t\t\n\t\treturn Point(p.x - x, p.y - y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k*x, k*y);\n\t}\n\tdouble abs() {\t\t\t\t\t//向量长度;\n\t\treturn sqrt(x * x + y * y);\n\t}\n};\ntypedef Point Vector;\ndouble dot(Vector a, Vector b) {\t\t\t//内积 x1*x2 + y1*y2\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b) {\t\t  //外积  x1*y2 - x2*y1\n\treturn a.x * b.y - a.y * b.x;\n}\nstruct Segment           //线段\n{\n\tPoint a, b;\n};\ntypedef Segment Line;   //线段表示直线；\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double x = 0) :c(c), r(x) {};\n};\nvoid Parallel_Orthogonal() {\t\t\t\t//判断平行或正交\n\tPoint a, b,c,d;\n\tPoint e, f;\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> a.x >> a.y >> b.x >> b.y>>c.x>>c.y>>d.x>>d.y;\n\t\te = a - b;\n\t\tf = c - d;\n\t\tif (equals(dot(e, f), 0)) cout << \"1\" << endl;\n\t\telse if (equals(cross(e, f), 0))cout << \"2\" << endl;\n\t\telse cout <<\"0\" <<endl;\n\t}\n}\nint main(void) {\n\tParallel_Orthogonal();\n}\n"
  },
  {
    "language": "C++",
    "code": "using namespace std;\n#define _USE_MATH_DEFINES\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cmath>\n#include<iomanip>\nconst double EPS=1e-10;\nbool eq(double a,double b){return abs(a-b)<EPS;}\nstruct Point{\n\tdouble x,y;\n\tPoint(double x_=0,double y_=0):x(x_),y(y_){}\n\tPoint operator-()const{return Point(-x,-y);}\n\tPoint operator+(const Point&p)const{return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point&p)const{return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k)const{return Point(x*k,y*k);}\n\tPoint operator/(const double k)const{return Point(x/k,y/k);}\n\tbool operator<(const Point&p)const{return eq(x,p.x)?y<p.y:x<p.x;}\n\tbool operator==(const Point&p)const{return eq(x,p.x)&&eq(y,p.y);}\n};\nistream&operator>>(istream&is,Point&p){return is>>p.x>>p.y;}\nostream&operator<<(ostream&os,const Point&p){return os<<fixed<<setprecision(9)<<p.x<<' '<<p.y;}\nstruct Line{\n\tPoint p1,p2;\n\tLine(Point p1_=Point(),Point p2_=Point()):p1(p1_),p2(p2_){}\n};\nstruct Segment:Line{\n\tSegment(Point p1_=Point(),Point p2_=Point()):Line(p1_,p2_){}\n};\nstruct Circle{\n\tPoint o;\n\tdouble r;\n\tCircle(Point o_=Point(),double r_=0):o(o_),r(r_){}\n};\nusing Polygon=vector<Point>;\n//function list begin\nPoint vec(const Line&);\ndouble norm(const Point&);\ndouble norm(const Line&);\ndouble abs(const Point&);\ndouble abs(const Line&);\ndouble arg(const Point&);\ndouble arg(const Line&);\ndouble arg(const Point&,const Point&,const Point&);//a->b->c\nint argtype(const Point&);//(-pi,0]->0,(0,pi]->1\nbool argless(const Point&,const Point&);//sorting points with arg\ndouble dot(const Point&,const Point&);\ndouble cross(const Point&,const Point&);\nPoint polar(const double,const double);\nPoint rotate(const Point&,const double);\nenum{ONLINE_FRONT=-2,CLOCKWISE=-1,ON_SEGMENT=0,COUNTER_CLOCKWISE=1,ONLINE_BACK=2};\nint ccw(const Point&,const Point&);\nint ccw(const Point&,const Point&,const Point&);\nint ccw(const Line&,const Point&);\nbool orthogonal(const Point&,const Point&);\nbool orthogonal(const Line&,const Line&);\nbool parallel(const Point&,const Point&);\nbool parallel(const Line&,const Line&);\nbool intersect(const Line&,const Point&);\nbool intersect(const Line&,const Line&);\nbool intersect(const Segment&,const Point&);\nbool intersect(const Segment&,const Segment&);\nbool intersect(const Line&,const Segment&);\nbool intersect(const Segment&,const Line&);\nbool intersect(const Circle&,const Point&);\nint intersect(const Circle&,const Line&);//count contacts\nint intersect(const Circle&,const Segment&);\nint intersect(const Circle&,const Circle&);//count common tangents\ndouble distance(const Point&,const Point&);\ndouble distance(const Line&,const Point&);\ndouble distance(const Line&,const Line&);\ndouble distance(const Segment&,const Point&);\ndouble distance(const Segment&,const Segment&);\ndouble distance(const Line&,const Segment&);\ndouble distance(const Segment&,const Line&);\ndouble distance(const Circle&,const Point&);\ndouble distance(const Circle&,const Line&);\ndouble distance(const Circle&,const Segment&);\ndouble distance(const Circle&,const Circle&);\nPoint projection(const Line&,const Point&);\nPoint reflection(const Line&,const Point&);\nPoint crosspoint(const Line&,const Line&);\npair<Point,Point>crosspoint(const Circle&,const Line&);\npair<Point,Point>crosspoint(const Circle&,const Segment&);\npair<Point,Point>crosspoint(const Circle&,const Circle&);\npair<Point,Point>tangent(const Circle&,const Point&);\nvector<Line>tangent(const Circle&,const Circle&);\nbool is_convex(const Polygon&);\nPolygon convex_full(Polygon,bool=false);\nenum{OUT,ON,IN};\nint contain(const Polygon&,const Point&);\nint contain(const Circle&,const Point&);\nint contain(const Circle&,const Segment&);\nPolygon convex_cut(const Polygon&,const Line&);\ndouble diameter(Polygon);\ndouble area(const Polygon&);\ndouble area(const Polygon&,const Line&);\ndouble area(const Polygon&,const Circle&);\n//function list end\nPoint vec(const Line&s){return s.p2-s.p1;}\ndouble norm(const Point&p){return p.x*p.x+p.y*p.y;}\ndouble norm(const Line&s){return norm(vec(s));}\ndouble abs(const Point&p){return hypot(p.x,p.y);}\ndouble abs(const Line&s){return abs(vec(s));}\ndouble arg(const Point&p){return atan2(p.y,p.x);}\ndouble arg(const Line&s){return arg(vec(s));}\ndouble arg(const Point&a,const Point&b,const Point&c){\n\tdouble A=arg(b-a),B=arg(c-b);\n\tdouble theta=abs(A-B);\n\treturn min(theta,2*M_PI-theta);\n}\nint argtype(const Point&a)\n{\n\treturn a.y<-EPS?0:a.y>EPS?1:a.x<0?1:0;\n}\nbool argless(const Point&a,const Point&b)\n{\n\tint at=argtype(a),bt=argtype(b);\n\treturn at!=bt?at<bt:ccw(a,b)>0;\n}\ndouble dot(const Point&a,const Point&b){return a.x*b.x+a.y*b.y;}\ndouble cross(const Point&a,const Point&b){return a.x*b.y-a.y*b.x;}\nPoint polar(const double r,const double theta){return Point(cos(theta),sin(theta))*r;}\nPoint rotate(const Point&p,const double theta){\n\treturn Point(p.x*cos(theta)-p.y*sin(theta),p.x*sin(theta)+p.y*cos(theta));\n}\nint ccw(const Point&a,const Point&b)\n{\n\treturn cross(a,b)>EPS?COUNTER_CLOCKWISE\n\t\t:cross(a,b)<-EPS?CLOCKWISE\n\t\t:dot(a,b)<0?ONLINE_BACK\n\t\t:norm(a)<norm(b)?ONLINE_FRONT\n\t\t:ON_SEGMENT;\n}\nint ccw(const Point&a,const Point&b,const Point&c){return ccw(b-a,c-a);}\nint ccw(const Line&s,const Point&p){return ccw(s.p1,s.p2,p);}\nbool orthogonal(const Point&a,const Point&b){return eq(dot(a,b),0);}\nbool orthogonal(const Line&s,const Line&t){return orthogonal(vec(s),vec(t));}\nbool parallel(const Point&a,const Point&b){return eq(cross(a,b),0);}\nbool parallel(const Line&s,const Line&t){return parallel(vec(s),vec(t));}\nbool intersect(const Line&s,const Point&p){return eq(cross(vec(s),p-s.p1),0);}\nbool intersect(const Line&s,const Line&t){return !parallel(s,t)||intersect(s,t.p1);}\nbool intersect(const Segment&s,const Point&p){return ccw(s,p)==ON_SEGMENT;}\nbool intersect(const Segment&s,const Segment&t){\n\treturn ccw(s,t.p1)*ccw(s,t.p2)<=0&&ccw(t,s.p1)*ccw(t,s.p2)<=0;\n}\nbool intersect(const Line&s,const Segment&t){\n\treturn cross(vec(s),t.p1-s.p1)*cross(vec(s),t.p2-s.p1)<EPS;\n}\nbool intersect(const Segment&s,const Line&t){return intersect(t,s);}\nbool intersect(const Circle&c,const Point&p){return eq(distance(c.o,p),c.r);}\nint intersect(const Circle&c,const Line&s){\n\tdouble d=distance(s,c.o);\n\treturn eq(d,c.r)?1:d<c.r?2:0;\n}\nint intersect(const Circle&c,const Segment&s){\n\tPoint h=projection(s,c.o);\n\tdouble d1=distance(c.o,s.p1),d2=distance(c.o,s.p2);\n\treturn distance(c.o,h)>c.r+EPS?0\n\t\t:d1<c.r-EPS&&d2<c.r-EPS?0\n\t\t:d1<c.r-EPS&&d2>c.r-EPS||d1>c.r-EPS&&d2<c.r-EPS?1\n\t\t:intersect(s,h)?eq(distance(c.o,h),c.r)?1:2\n\t\t:0;\n}\nint intersect(const Circle&a,const Circle&b){\n\tdouble d=distance(a.o,b.o);\n\treturn eq(d,a.r+b.r)?3:d>a.r+b.r?4:eq(d,abs(a.r-b.r))?1:d>abs(a.r-b.r)?2:0;\n}\ndouble distance(const Point&a,const Point&b){return abs(a-b);}\ndouble distance(const Line&s,const Point&p){return distance(p,projection(s,p));}\ndouble distance(const Line&s,const Line&t){return intersect(s,t)?0:distance(s,t.p1);}\ndouble distance(const Segment&s,const Point&p){\n\treturn distance(p,\n\t\tdot(vec(s),p-s.p1)<0?s.p1\n\t\t:dot(-vec(s),p-s.p2)<0?s.p2\n\t\t:projection(s,p)\n\t);\n}\ndouble distance(const Segment&s,const Segment&t){\n\treturn intersect(s,t)?0:min({\n\t\tdistance(s,t.p1),distance(s,t.p2),\n\t\tdistance(t,s.p1),distance(t,s.p2)\n\t});\n}\ndouble distance(const Line&s,const Segment&t){\n\treturn intersect(s,t)?0:min(distance(s,t.p1),distance(s,t.p2));\n}\ndouble distance(const Segment&s,const Line&t){return distance(t,s);}\ndouble distance(const Circle&c,const Point&p){return abs(distance(c.o,p)-c.r);}\ndouble distance(const Circle&c,const Line&s){return max(distance(s,c.o)-c.r,0.);}\ndouble distance(const Circle&c,const Segment&s){\n\treturn intersect(c,s)?0\n\t\t:contain(c,s)?c.r-max(distance(c.o,s.p1),distance(c.o,s.p2))\n\t\t:distance(s,c.o)-c.r;\n}\ndouble distance(const Circle&a,const Circle&b){return max(distance(a.o,b.o)-a.r-b.r,0.);}\nPoint projection(const Line&s,const Point&p){\n\treturn s.p1+vec(s)*dot(p-s.p1,vec(s))/norm(s);\n}\nPoint reflection(const Line&s,const Point&p){return projection(s,p)*2-p;}\nPoint crosspoint(const Line&s,const Line&t){\n\tdouble d1=abs(cross(vec(s),t.p1-s.p1));\n\tdouble d2=abs(cross(vec(s),t.p2-s.p1));\n\treturn t.p1+vec(t)*(d1/(d1+d2));\n}\npair<Point,Point>crosspoint(const Circle&c,const Line&s){\n\tPoint h=projection(s,c.o);\n\tPoint e=vec(s)/abs(s)*sqrt(c.r*c.r-norm(h-c.o));\n\treturn minmax(h-e,h+e);\n}\npair<Point,Point>crosspoint(const Circle&c,const Segment&s){\n\tpair<Point,Point>p=crosspoint(c,Line(s));\n\treturn intersect(c,s)==2?p\n\t\t:intersect(s,p.first)?make_pair(p.first,p.first)\n\t\t:make_pair(p.second,p.second);\n}\npair<Point,Point>crosspoint(const Circle&a,const Circle&b){\n\tdouble d=distance(a.o,b.o);\n\tdouble alpha=acos((a.r*a.r+d*d-b.r*b.r)/(2*a.r*d));\n\tdouble theta=arg(b.o-a.o);\n\treturn minmax(a.o+polar(a.r,theta+alpha),a.o+polar(a.r,theta-alpha));\n}\npair<Point,Point>tangent(const Circle&c,const Point&p){\n\treturn crosspoint(c,Circle(p,sqrt(norm(c.o-p)-c.r*c.r)));\n}\nvector<Line>tangent(const Circle&a,const Circle&b){\n\tvector<Line>ret;\n\tdouble g=distance(a.o,b.o);\n\tif(eq(g,0))return ret;\n\tPoint u=(b.o-a.o)/g;\n\tPoint v=rotate(u,M_PI/2);\n\tfor(int s:{-1,1}){\n\t\tdouble h=(a.r+b.r*s)/g;\n\t\tif(eq(h*h,1))ret.emplace_back(a.o+(h>0?u:-u)*a.r,a.o+(h>0?u:-u)*a.r+v);\n\t\telse if(1-h*h>0){\n\t\t\tPoint U=u*h,V=v*sqrt(1-h*h);\n\t\t\tret.emplace_back(a.o+(U+V)*a.r,b.o-(U+V)*b.r*s);\n\t\t\tret.emplace_back(a.o+(U-V)*a.r,b.o-(U-V)*b.r*s);\n\t\t}\n\t}\n\treturn ret;\n}\nbool is_convex(const Polygon&P){\n\tfor(int i=0;i<P.size();i++)\n\t\tif(ccw(P[i],P[(i+1)%P.size()],P[(i+2)%P.size()])==CLOCKWISE)return false;\n\treturn true;\n}\nPolygon convex_full(Polygon P,bool ONSEG){\n\tif(P.size()<=2)return P;\n\tsort(P.begin(),P.end());\n\tPolygon ret(2*P.size());\n\tint k=0,t;\n\tif(ONSEG){\n\t\tfor(const Point&p:P){\n\t\t\twhile(k>=2&&ccw(ret[k-2],ret[k-1],p)==CLOCKWISE)k--;\n\t\t\tret[k++]=p;\n\t\t}\n\t\tt=k;\n\t\tfor(int i=P.size()-2;i>=0;i--){\n\t\t\twhile(k>=t+1&&ccw(ret[k-2],ret[k-1],P[i])==CLOCKWISE)k--;\n\t\t\tret[k++]=P[i];\n\t\t}\n\t}\n\telse{\n\t\tfor(const Point&p:P){\n\t\t\twhile(k>=2&&ccw(ret[k-2],ret[k-1],p)!=COUNTER_CLOCKWISE)k--;\n\t\t\tret[k++]=p;\n\t\t}\n\t\tt=k;\n\t\tfor(int i=P.size()-2;i>=0;i--){\n\t\t\twhile(k>=t+1&&ccw(ret[k-2],ret[k-1],P[i])!=COUNTER_CLOCKWISE)k--;\n\t\t\tret[k++]=P[i];\n\t\t}\n\t}\n\tret.resize(k-1);\n\tint mi=0;\n\tfor(int i=1;i<k-1;i++)\n\t\tif(eq(ret[mi].y,ret[i].y)?ret[mi].x>ret[i].x:ret[mi].y>ret[i].y)mi=i;\n\trotate(ret.begin(),ret.begin()+mi,ret.end());\n\treturn ret;\n}\nint contain(const Polygon&P,const Point&p){\n\tbool in=false;\n\tfor(int i=0;i<P.size();i++){\n\t\tSegment s(P[i],P[(i+1)%P.size()]);\n\t\tif(intersect(s,p))return ON;\n\t\telse{\n\t\t\tPoint a=s.p1-p,b=s.p2-p;\n\t\t\tif(a.y>b.y)swap(a,b);\n\t\t\tif(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)in=!in;\n\t\t}\n\t}\n\treturn in?IN:OUT;\n}\nint contain(const Circle&c,const Point&p){\n\tdouble d=distance(c.o,p);\n\treturn eq(d,c.r)?ON:d<c.r?IN:OUT;\n}\nint contain(const Circle&c,const Segment&s){\n\tdouble d1=distance(c.o,s.p1),d2=distance(c.o,s.p2);\n\treturn d1<c.r+EPS&&d2<c.r+EPS?eq(d1,c.r)||eq(d2,c.r)?ON:IN:OUT;\n}\nPolygon convex_cut(const Polygon&P,const Line&s){\n\tPolygon ret;\n\tfor(int i=0;i<P.size();i++){\n\t\tSegment t(P[i],P[(i+1)%P.size()]);\n\t\tif(ccw(s,t.p1)!=CLOCKWISE)ret.push_back(t.p1);\n\t\tif(!parallel(s,t)&&!intersect(s,t.p1)\n\t\t\t&&!intersect(s,t.p2)&&intersect(s,t))ret.push_back(crosspoint(s,t));\n\t}\n\treturn ret;\n}\ndouble diameter(Polygon P){\n\tif(!is_convex(P))P=convex_full(P);\n\tint mi=0,Mi=0;\n\tfor(int i=1;i<P.size();i++){\n\t\tif(P[i].x<P[mi].x)mi=i;\n\t\tif(P[i].x>P[Mi].x)Mi=i;\n\t}\n\tdouble ret=0;\n\tint sm=mi,sM=Mi;\n\twhile(mi!=sM||Mi!=sm){\n\t\tret=max(ret,norm(P[mi]-P[Mi]));\n\t\tif(cross(P[(mi+1)%P.size()]-P[mi],P[(Mi+1)%P.size()]-P[Mi])<0)mi=(mi+1)%P.size();\n\t\telse Mi=(Mi+1)%P.size();\n\t}\n\treturn sqrt(ret);\n}\ndouble area(const Polygon&P){\n\tdouble ret=0;\n\tfor(int i=0;i<P.size();i++)ret+=cross(P[i],P[(i+1)%P.size()]);\n\treturn ret/2;\n}\ndouble area(const Polygon&P,const Line&s){return area(convex_cut(P,s));}\ndouble area(const Polygon&P,const Circle&c){\n\tdouble ret=0;\n\tfor(int i=0;i<P.size();i++)\n\t{\n\t\tSegment s(P[i],P[(i+1)%P.size()]);\n\t\tif(contain(c,s))ret+=cross(s.p1-c.o,s.p2-c.o);\n\t\telse if(!intersect(c,s)){\n\t\t\tdouble a=arg(s.p2-c.o)-arg(s.p1-c.o);\n\t\t\tif(a>M_PI)a-=2*M_PI;\n\t\t\tif(a<-M_PI)a+=2*M_PI;\n\t\t\tret+=c.r*c.r*a;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpair<Point,Point>p=crosspoint(c,s);\n\t\t\tPoint tmp[4]={s.p1,p.first,p.second,s.p2};\n\t\t\tif(intersect(c,Segment(s.p1,p.first))==2)swap(tmp[1],tmp[2]);\n\t\t\tfor(int j=0;j<3;j++)\n\t\t\t{\n\t\t\t\tSegment t(tmp[j],tmp[j+1]);\n\t\t\t\tif(contain(c,t))ret+=cross(t.p1-c.o,t.p2-c.o);\n\t\t\t\telse{\n\t\t\t\t\tdouble a=arg(t.p2-c.o)-arg(t.p1-c.o);\n\t\t\t\t\tif(a>M_PI)a-=2*M_PI;\n\t\t\t\t\tif(a<-M_PI)a+=2*M_PI;\n\t\t\t\t\tret+=c.r*c.r*a;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ret/2;\n}\nmain()\n{\n    int q;cin>>q;\n    for(;q--;)\n    {\n        Line s1,s2;\n        cin>>s1.p1>>s1.p2>>s2.p1>>s2.p2;\n        cout<<(parallel(s1,s2)?2:orthogonal(s1,s2)?1:0)<<endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (abs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(0), y(0){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tVector v1(x1 - x0, y1 - y0);\n\t\tVector v2(x3 - x2, y3 - y2);\n\t\tif (isParallel(v1, v2)) cout << 2 << endl;\n\t\telse if (isOrthogonal(v1, v2)) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "////////////////////////////////////////////////////////////////////////////////\n// 平面幾何\n\n// 型変換できるもの\n//   double  -> Point\n//   Segment -> Line\n\n// 誤差の話：絶対誤差でも相対誤差でも死ぬ例\n// int main(){\n//   const double EPS = 1e-9;\n//   double a = 1.3, b = 1e8, c = a + b;\n//   c = c - b;\n//   printf(\"%d\\n\", equal(a, c));          // => 0\n//   printf(\"%d\\n\", relative_equal(a, c)); // => 0\n// }\n\n////////////////////\n// ライブラリ\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// 定数\nconst double EPS = 1e-9;                // |EPS|未満の数は0として扱う\n////////////////////\n// 構造体\nstruct Point {\n  double x, y;\n  Point(const double d = 0.0) :x(d), y(d) {}\n  Point(const double x, const double y) :x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Segment(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Line(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n  Line(const Segment& s) :initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// 実装\nbool relative_equal(const double d1, const double d2) {return d1 == 0 ? std::abs(d2) < EPS : std::abs((d1 - d2) / d1) < EPS;}\n// 演算子オーバーロード\nbool operator==(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) && relative_equal(lhs.y, rhs.y);}\nbool operator<(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x < rhs.x : lhs.y < rhs.y;}\nbool operator>(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x > rhs.x : lhs.y > rhs.y;}\nbool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\nbool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\nbool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// 点\ndouble abs(const Point& p) {return std::hypot(p.x, p.y);}\ndouble norm(const Point& p) {return p.x * p.x + p.y * p.y;}\ndouble dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\ndouble cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / abs(p);}\n// 線\nbool parallel(const Line& l1, const Line& l2) {return std::abs(cross(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\nbool orthogonal(const Line& l1, const Line& l2) {return std::abs(dot(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\n// 点の位置関係\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK}; \nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) >= EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) <= -EPS) return CLOCKWISE;\n  if(dot(v1, v2) <= -EPS) return ONLINE_BACK;\n  if(relative_equal(norm(v2), - norm(v1))) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n// 交差判定\nbool intersect(const Point& p1, const Point& p2) {return p1 == p2;}\nbool intersect(const Point& p, const Segment& s) {return abs(p - s.initial) + abs(p - s.terminal) - abs(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(Line(p, l.initial), Line(p, l.terminal));}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || intersect(l1.initial, l2);}\n// 点の移動\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// 距離\ndouble distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\ndouble distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\ndouble distance(const Segment& s, const Point& p) {return distance(p, s);}\ndouble distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\ndouble distance(const Line& l, const Point& p) {return distance(p, l);}\ndouble distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial), distance(s1, s2.terminal), distance(s2, s1.initial), distance(s2, s1.terminal)});\n}\ndouble distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\ndouble distance(const Line& l,const Segment& s) {return distance(s, l);}\ndouble distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// 交点\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  assert(intersect(l1, l2));\n  if(parallel(l1, l2)) return l1.initial;                   // 平行なときl1の始点を返す\n  double A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  double B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  assert(intersect(s, l));\n  if(parallel(s, l)) return s.initial;\n  Point cp = crosspoint(Line(s), l);\n  assert(intersect(s, cp));\n  return cp;\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  assert(intersect(s1, s2));\n  if(parallel(s1, s2)) {                                    // 平行なときいずれかの端点を返す\n    if(intersect(s1.initial,  s2)) return s1.initial;\n    if(intersect(s1.terminal, s2)) return s1.terminal;\n    if(intersect(s2.initial,  s1)) return s2.initial;\n    if(intersect(s2.terminal, s1)) return s2.terminal;\n  }\n  return crosspoint(Line(s1), Line(s2));\n}\n// デバッグ用\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(const Point& p) {cout<<\"point: \"; cout<<\"(\"<<p.x<<\",\"<<p.y<<\")\";}\nvoid print(const Segment& l) {cout<<\"segment: \"; print(l.initial); cout<<\" - \";print(l.terminal);}\nvoid print(const Line& l) {cout<<\"line: \"; print(l.initial); cout<<\" - \";print(l.terminal);}\n////////////////////////////////////////////////////////////////////////////////\n// 多角形\n//   辺をメンバ変数にしない→メモリ節約・edge(void)がO(頂点数)\n#include<vector>\n#include<algorithm>\n#include<utility>\nclass Polygon {\npublic:\n  void add(const Point& p) {\n    if(!vertex_.empty()) {\n      if(!edge_.empty()) edge_.pop_back();\n      edge_.push_back(Segment(vertex_.back(), p));\n      edge_.push_back(Segment(p, vertex_.front()));\n    }\n    vertex_.push_back(p);\n  }\n  int size() const {return vertex_.size();}\n  Point vertex(const int n) const {return vertex_.at(n);}\n  Segment edge(const int n) const {return edge_.at(n);}\n  const std::vector<Point>& vertex() const {return vertex_;}\n  const std::vector<Segment>& edge() const {return edge_;}\n  bool touch(const Point& p) const {\n    return std::any_of(edge_.begin(), edge_.end(), [=](const Segment& s) {return ccw(s.initial, s.terminal, p) == ON_SEGMENT;});\n  }\n  bool intersect(const Point& p) const {\n    bool in = false;                    // p=(x,y)から(INF,y)への半直線と多角形とが交差する回数 mod 2\n    for(const auto& e: edge()) {\n      if(::intersect(p, e)) return true;\n      Point a = e.initial  - p;\n      Point b = e.terminal - p;\n      if(a.y > b.y) std::swap(a, b);\n      if(a.y <= EPS && -EPS < b.y && cross(a, b) < EPS) in = !in;\n    }\n    return in;\n  }\n  void clear() {\n    vertex_.clear();\n    edge_.clear();\n  };\nprivate:\n  std::vector<Point> vertex_;\n  std::vector<Segment> edge_;\n};\n////////////////////////////////////////////////////////////////////////////////\n#include<bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n;\n  for(cin >> n; n > 0; --n) {\n    int a, b, c, d, e, f, g, h;\n    cin >> a >> b >> c >> d >> e >> f >> g >> h;\n    Segment s(Point(a, b), Point(c, d));\n    Segment t(Point(e, f), Point(g, h));\n    cout << (parallel(s, t) ? 2 : (orthogonal(s, t) ? 1 : 0)) << endl;\n//     cout << (intersect(s, t) ? 1 : 0) << endl;\n//     auto cp = crosspoint(s, t);\n//     cout<<setprecision(10)<<fixed<<cp.x<<\" \"<<cp.y<<endl;\n  }\n\n//   Polygon polygon;\n//   for(cin >> n; n > 0; --n) {\n//     int x, y;\n//     cin >> x >> y;\n//     polygon.add(Point(x, y));\n//   }\n\n//   int q;\n//   for(cin >> q; q > 0; --q) {\n//     int x, y;\n//     cin >> x >> y;\n//     Point p(x, y);\n//     cout << (polygon.touch(p) ? 1 : (polygon.intersect(p) ? 2 : 0)) << endl;\n//   }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals( A, B ) (fabs((A) - (B)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n    Point( double x = 0, double y = 0 ): x(x), y(y) {}\n    \n    Point operator + ( Point p ) { return Point( x + p.x, y + p.y ); }\n    Point operator - ( Point p ) { return Point( x - p.x, y - p.y ); }\n    Point operator * ( double a ) { return Point( a * x, a * y ); }\n    Point operator / ( double a ) { return Point( x / a, y / a ); }\n\n    double abs() { return sqrt( norm() ); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < ( const Point &p ) const {\n\treturn ( x != p.x ) ? x < p.x : y < p.y;\n    }\n\n    bool operator == ( const Point &p ) const {\n\treturn equals( x, p.x ) && equals( y, p.y ); \n    }\n\n    double dot( Point a ) { return x * a.x + y * a.y; }\n    double cross( Point a ) { return x * a.y - y * a.x; }\n};\n\ntypedef Point Vector;\n\nclass Line {\npublic:\n    Point p1, p2;\n    Line( Point p1 = Point(), Point p2 = Point() ): p1(p1), p2(p2) {}\n    // ?????´????????????( cos = 0 )\n    bool isOrthogonal( Line a ) {\n\treturn equals( 0.0, (p1 - p2).dot( a.p1 - a.p2 ) );\n    }\n    // ??????????????????( sin = 0 )\n    bool isParallel( Line a ) {\n\treturn equals( 0.0, (p1 - p2).cross( a.p1 - a.p2 ) );\n    }\n};\n\ntypedef Line Segment;\n\n\n\nint q;\n\nint main()\n{\n    Line l01, l23;\n    Point p0, p1, p2, p3;\n\n    scanf(\"%d\", &q);\n\n    for ( int i = 0; i < q; i++ ) {\n\tscanf(\"%lf %lf\", &p0.x, &p0.y);\n\tscanf(\"%lf %lf\", &p1.x, &p1.y);\n\tscanf(\"%lf %lf\", &p2.x, &p2.y);\n\tscanf(\"%lf %lf\", &p3.x, &p3.y);\n\tl01 = Line( p0, p1 );\n\tl23 = Line( p2, p3 );\n\n\tif ( l01.isParallel( l23 ) ) printf(\"2\\n\");\n\telse if ( l01.isOrthogonal( l23 ) ) printf(\"1\\n\");\n\telse printf(\"0\\n\");\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstruct Vector { double x, y; };\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(a.x * b.x + a.y * b.y, 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(a.x * b.y - a.y * b.x, 0.0);\n}\n\nint main(void) {\n    int n, x1, x2, y1, y2;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++) {\n        Vector v1, v2;\n        scanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n        v1.x = x2 - x1; v1.y = y2 - y1;\n\n        scanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n        v2.x = x2 - x1; v2.y = y2 - y1;\n\n        if (isOrthogonal(v1, v2)) printf(\"%d\\n\", 1);\n        else if (isParallel(v1, v2)) printf(\"%d\\n\", 2);\n        else printf(\"%d\\n\", 0);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<iostream>\n#include<complex>\n#include<cmath>\n\nusing namespace std;\n\nconst double EPS=1e-8;\nconst double INF=1e9;\n\ntypedef complex<double>Point;\n\n#define EQ(a,b) (fabs((a)-(b))<EPS)\n#define EQV(a,b) (abs((a)-(b))<EPS)\nstruct Segment{\n    Point p1,p2;\n    Segment(Point p1=Point(),Point p2=Point()):p1(p1),p2(p2){}\n};\n\ntypedef Segment Line;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\ntypedef vector<Point>Polygon;\n\ndouble dot(Point a,Point b){\n    return real(a)*real(b)+imag(a)*imag(b);\n}\n\ndouble cross(Point a,Point b){\n    return real(a)*imag(b)-imag(a)*real(b);\n}\n\nbool isOrthogonal(Point a,Point b){\n    return EQ(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return EQ(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Point a,Point b){\n    return EQ(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return EQ(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n\nint main(){\n    int N;\n    scanf(\"%d\",&N);\n    while(N--){\n        Point a,b,c,d;\n        scanf(\"%lf%lf\",&a.real(),&a.imag());\n        scanf(\"%lf%lf\",&b.real(),&b.imag());\n        scanf(\"%lf%lf\",&c.real(),&c.imag());\n        scanf(\"%lf%lf\",&d.real(),&d.imag());\n        if(isParallel(a,b,c,d))puts(\"2\");\n        else if(isOrthogonal(a,b,c,d))puts(\"1\");\n        else puts(\"0\");\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\n#define INF\n\ntypedef struct {\n    int xv, yv;\n} vect;\n\nint main() {\n    int q, x[2], y[2];\n    vect v[2];\n    cin >> q;\n    loop(i, 0, q) {\n        loop(j, 0, 2) {\n            cin >> x[0] >> y[0] >> x[1] >> y[1];\n            v[j].xv = x[0] - x[1];\n            v[j].yv = y[0] - y[1];\n        }\n        if(v[0].xv * v[1].yv - v[0].yv * v[1].xv == 0) cout << 2 << endl;\n        else if(v[0].xv * v[1].xv + v[0].yv * v[1].yv == 0) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\n\tPoint(double x = 0,double y=0):x(x),y(y){}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x- p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a*x, y + a*y); }\n\tPoint operator / (double a) { return Point(x/a, y /a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; };\n\n\tbool operator < (const Point& p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator ==(const Point& p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b) , 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nint main(){\n\tint q;\ncin >> q;\n\n\nfor (int i = 0; i < q; i++) {\n\tint x0, x1, x2, x3, y0, y1, y2, y3;\n\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n\tVector v0 = Vector(x0, y0);\n\tVector v1 = Vector(x1, y1);\n\tVector v2 = Vector(x2, y2);\n\tVector v3 = Vector(x3, y3);\n\n\tVector s1 = v1 - v0;\n\tVector s2 = v3 - v2;\n\n\tif (isOrthogonal(s1, s2)) {\n\t\tcout << \"1\" << endl;\n\t}\n\telse if (isParallel(s1, s2)) {\n\t\tcout << \"2\" << endl;\n\t}\n\telse {\n\t\tcout << \"0\" << endl;\n\t}\n\n }\n\nreturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define FOR(i, a, n) for(ll i = (ll)a; i < (ll)n; i++)\n#define rep(i, n) FOR(i, 0, n)\n#define ALL(x) (x).begin(), (x).end()\nusing namespace std;\ntypedef long long ll;\n\nconstexpr ll mod = 1e9 + 7;\n\ntemplate <class T> inline bool chmax(T &a, const T b) {\n    if(a >= b) return false;\n    a = b;\n    return true;\n}\ntemplate <class T> inline bool chmin(T &a, const T b) {\n    if(a <= b) return false;\n    a = b;\n    return true;\n}\n\n/*-------------------------------------------*/\n// 点\nstruct Point {\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n    Point operator+(const Point &p) { return Point{x + p.x, y + p.y}; }\n    Point operator-(const Point &p) { return Point{x - p.x, y - p.y}; }\n    Point operator*(const double k) { return Point{x * k, y * k}; }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n};\n\n// ベクトル\ntypedef Point Vector;\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\n// 線分\nstruct Segment {\n    Point p1, p2;\n};\n// 直線\ntypedef Segment Line;\nbool isOrthogonal(Line l1, Line l2) {\n    return dot(l1.p1 - l1.p2, l2.p1 - l2.p2) == 0;\n}\nbool isParallel(Line l1, Line l2) {\n    return cross(l1.p1 - l1.p2, l2.p1 - l2.p2) == 0;\n}\n// 円\nstruct Circle {\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0) : c(c), r(r) {}\n};\n// 多角形\ntypedef vector<Point> Polygon;\n\nint main() {\n    int n;\n    cin >> n;\n    while(n--) {\n        Line l1, l2;\n        cin >> l1.p1.x >> l1.p1.y >> l1.p2.x >> l1.p2.y;\n        cin >> l2.p1.x >> l2.p1.y >> l2.p2.x >> l2.p2.y;\n        int ret = 0;\n        if(isParallel(l1, l2)) ret = 2;\n        if(isOrthogonal(l1, l2)) ret = 1;\n        cout << ret << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long   // <-----!!!!!!!!!!!!!!!!!!!\n\n#define rep(i,n) for (int i=0;i<(n);i++)\n#define rep2(i,a,b) for (int i=(a);i<(b);i++)\n#define rrep(i,n) for (int i=(n)-1;i>=0;i--)\n#define rrep2(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define all(a) (a).begin(),(a).end()\n\ntypedef long long ll;\ntypedef pair<int, int> Pii;\ntypedef tuple<int, int, int> TUPLE;\ntypedef vector<int> V;\ntypedef vector<V> VV;\ntypedef vector<VV> VVV;\n\ntypedef complex<double> P;\ntypedef vector<P> G;\n#define here(g, i) g[i]\n#define next(g, i) g[(i + 1) % g.size()]\n#define prev(g, i) g[(i - 1 + g.size()) % g.size()]\nconst double EPS = 1e-10;\nconst double INF = 1e12;\n\nstruct L {\n    P a, b, v;\n    L(){}\n    // L(P _a, P _b) {a = _a, b = _b, v = b - a;}\n    L(P _a, P _b) : a(_a), b(_b), v(b - a) {}\n    L(double _ax, double _ay, double _bx, double _by)\n        : a(_ax, _ay), b(P(_bx, _by)), v(b - a) {}\n};\n\ndouble cross(P a, P b) {\n    return imag(conj(a) * b);\n}\n\ndouble dot(P a, P b) {\n    return real(conj(a) * b);\n}\n\n// 2: parallel\n// 1: orthogonal\n// 0: otherwise\nint relationLL(L l1, L l2) {\n    if (cross(l1.v, l2.v) == 0) return 2;\n    if (dot(l1.v, l2.v) == 0) return 1;\n    return 0;\n}\n\nsigned main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    int q;\n    cin >> q;\n    while (q--) {\n        double v[4][2];\n        rep(i, 4) rep(j, 2) cin >> v[i][j];\n        L l1(v[0][0], v[0][1], v[1][0], v[1][1]);\n        L l2(v[2][0], v[2][1], v[3][0], v[3][1]);\n        cout << relationLL(l1, l2) << endl;\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\ntypedef pair<PT, PT> LS;\n#define F first\n#define S second\n#define X real()\n#define Y imag()\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\nconst ld EPS = 1e-12;\n\nbool eq(ld a, ld b){\n\treturn abs(a-b) < EPS;\n}\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nPT reflect(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + conj(c/b)*b;\n}\n\nstring pos(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\tc /= b;\n\tif (c.imag() > EPS)\n\t\treturn \"COUNTER_CLOCKWISE\";\n\tif (c.imag() + EPS < 0)\n\t\treturn \"CLOCKWISE\";\n\tif (c.real() + EPS < 0)\n\t\treturn \"ONLINE_BACK\";\n\tif (c.real() > 1 + EPS)\n\t\treturn \"ONLINE_FRONT\";\n\treturn \"ON_SEGMENT\";\n}\n\nint main(){\t\n\tfor (int i = in(); i; i--){\n\t\tPT a, b, c, d;\n\t\tcin >> a >> b >> c >> d;\n\t\tb -= a, d -= c;\n\t\tb /= d;\n\t\tif (eq(b.Y, 0))\n\t\t\tcout << 2 << endl;\n\t\telse if (eq(b.X, 0))\n\t\t\tcout << 1 << endl;\n\t\telse\n\t\t\tcout << 0 << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    int q;\n    int i;\n    int xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3;\n    double a_s1;\n    double a_s2;\n    int int_a_s11;\n    int int_a_s21;\n    int int_a_s12;\n    int int_a_s22;\n    int ans;\n    int ans_flg1;\n    int ans_flg2;\n\n    cin >> q;\n    for ( i = 0; i < q; ++i){\n        cin >> xp0 >> yp0 >> xp1 >> yp1 >> xp2 >> yp2 >> xp3 >> yp3;\n\n        ans_flg1 = 0;\n        ans_flg2 = 0;\n        if (xp1 == xp0){\n            a_s1 = xp1;\n            ans_flg1 = 1;\n        }else if (yp1 == yp0){\n            a_s1 = yp1;\n            ans_flg1 = 2;\n        }else{\n            a_s1 = (yp1 - yp0) / (xp1-xp0);\n        }\n        \n        if (xp3 == xp2){\n            a_s2 = xp3;\n            ans_flg2 = 1;\n        }else if (yp3 == yp2){\n            a_s2 = yp3;\n            ans_flg2 = 2;\n        }else{\n            a_s2 = (yp3 - yp2) / (xp3-xp2);\n        }\n        \n        ans = 0;\n        if (a_s1 == xp1 && a_s2 == xp3 && ans_flg1 == 1 && ans_flg2 == 1){\n            ans = 2;\n        }else if(a_s1 == yp1 && a_s2 == yp3 && ans_flg1 == 2 && ans_flg2 == 2){\n            ans = 2;\n        }else if(a_s1 == xp1 && a_s2 == yp3 && ans_flg1 == 1 && ans_flg2 == 2){\n            ans = 1;\n        }else if(a_s1 == yp1 && a_s2 == xp3&& ans_flg1 == 2 && ans_flg2 == 1){\n            ans = 1;\n        }else{\n            int_a_s11 = a_s1 * 1000;\n            int_a_s21 = a_s2 * 1000;\n            int_a_s21 = 1 /a_s2 * 1000;\n            if (int_a_s11 == int_a_s21){\n                //cout << int_a_s1 << \" \"<< int_a_s2 << endl;\n                ans = 2;\n            }else if(int_a_s11 == int_a_s22){\n                ans = 1;\n            }\n        }\n        \n        cout << ans << endl;\n        \n    }\n    /*\n    for ( i = 0; i < q; ++i){\n        cout << xp0 << endl;\n        cout << yp0 << endl;\n        cout << xp1 << endl;\n        cout << yp1 << endl;\n        cout << xp2 << endl;\n        cout << yp2 << endl;\n        cout << xp3 << endl;\n        cout << yp3 << endl;\n    }\n    */\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define eps (1e-10)\nusing namespace std;\nclass Point\n{\n\tpublic:\n\tdouble x,y;\n\tPoint(double _x=0,double _y=0):x(_x),y(_y){}\n\tPoint operator -(Point p){\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n};\nbool solve1(Point a,Point b)\n{\n\tdouble f=a.x*b.x+a.y*b.y; \n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\nbool solve2(Point a,Point b)\n{\n\tdouble f=a.x*b.y-a.y*b.x;\n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\nint main()\n{\n\tint T;scanf(\"%d\",&T);\n\twhile(T--){\n\t\tdouble p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y;\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&p1_x,&p1_y,&p2_x,&p2_y,&p3_x,&p3_y,&p4_x,&p4_y);\n\t\tPoint a1(p1_x,p1_y),a2(p2_x,p2_y),b1(p3_x,p3_y),b2(p4_x,p4_y);\n\t\tif(solve1(a1-a2,b1-b2)) printf(\"1\\n\");\n\t\telse if(solve2(a1-a2,b1-b2)) printf(\"2\\n\");\n\t\telse printf(\"0\\n\");\n\t\t\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <complex>\nusing namespace std;\ntypedef complex<double> P;\n\n/* ?¨±?????????????????  */\n#define EPS (1e-10)\n/* 2?????????????????????????????????????????? */\n#define EQ(a,b) (abs((a)-(b)) < EPS)\n\n/* ?????? (cross product) : a??b = |a||b|sin */\ndouble cross(P a, P b) {\n  return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n/* ?????? (dot product) : a???b = |a||b|cos??  */\ndouble dot(P a, P b) {\n  return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n/* 2??´????????´????????? : a??\\b <=> dot(a, b) = 0 */\nint isOrthogonal(P a1, P a2, P b1, P b2) {\n  return EQ( dot(a1-a2, b1-b2), 0.0 );\n}\n\n/* 2??´?????????????????? : a//b <=> cross(a, b) = 0 */\nint isParallel(P a1, P a2, P b1, P b2) {\n  return EQ( cross(a1-a2, b1-b2), 0.0 );\n}\n\n\nint main() {\n  int n;\n  int ax, ay, bx, by, cx, cy, dx, dy;\n  scanf(\"%d\", &n);\n\n  while(n--) {\n    scanf(\"%d %d %d %d %d %d %d %d\", &ax, &ay, &bx, &by, &cx, &cy, &dx, &dy);\n    P a(ax, ay), b(bx, by), c(cx, cy), d(dx, dy);\n    if(isParallel(a, b, c, d)) puts(\"2\");\n    else if(isOrthogonal(a, b, c, d)) puts(\"1\");\n    else puts(\"0\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#pragma GCC target(\"avx\")\n#include <bits/stdc++.h>\nusing namespace std;\n#ifdef ONLINE_JUDGE\n#define getchar gc\ninline char gc(){\n\tstatic char buf[1<<16],*p1=buf,*p2=buf;\n\tif(p1==p2){\n\t\tp2=(p1=buf)+fread(buf,1,1<<16,stdin);\n\t\tif(p2==p1) return EOF;\n\t}\n\treturn *p1++;\n}\n#endif\ntemplate<class t> inline t read(t &x){\n    char c=getchar();bool f=0;x=0;\n    while(!isdigit(c)) f|=c=='-',c=getchar();\n    while(isdigit(c)) x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    if(f) x=-x;return x;\n}\ntemplate<class t> inline void write(t x){\n    if(x<0) putchar('-'),write(-x);\n    else{if(x>9) write(x/10);putchar('0'+x%10);}\n}\n\nconst double eps=1e-9;\nconst double pi=acos(-1);\n\n\nstruct point{\n\tdouble x,y;\n\tinline void read(){\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t}\n\tinline point operator + (const point &nt) const {\n\t\treturn (point){x+nt.x,y+nt.y};\n\t}\n\tinline point operator - (const point &nt) const {\n\t\treturn (point){x-nt.x,y-nt.y};\n\t}\n\tinline point operator * (const double &nt) const {\n\t\treturn (point){x*nt,y*nt};\n\t}\n\tinline double length(){\n\t\treturn sqrt(x*x+y*y);\n\t}\n};\n\ndouble distance(point x,point y){ //距离 \n\treturn sqrt((y.x-x.x)*(y.x-x.x)+(y.y-x.y)*(y.y-x.y));\n}\n\nstruct segment{\n\tpoint x,y;\n\tinline void read(){\n\t\tx.read();y.read();\n\t}\n\tinline double length(){ //线段长度 \n\t\treturn distance(x,y);\n\t}\n};\n\nstruct line{\n\tpoint x,y;\n\tinline void read(){\n\t\tx.read();y.read();\n\t}\n}a,b;\n\ndouble DJ(point x,point y){ //点积 \n\treturn x.x*y.x+x.y*y.y;\n}\n\ndouble CJ(point x,point y){ //叉积 \n\treturn x.x*y.y-x.y*y.x;\n}\n\n\npoint trpoint(segment x){ //将有向线段转成向量点 \n\treturn x.y-x.x;\n}\n\npoint trpoint(line x){ //将直线转成向量点 \n\treturn x.y-x.x;\n}\n\ndouble prolen(point x,segment a){ //点在有向线段上的投影长度 \n\treturn DJ(trpoint((segment){a.x,x}),trpoint(a))/a.length();\n}\n\npoint propoint(point x,segment a){ //点在直线上的投影点 \n\treturn a.x+trpoint(a)*(prolen(x,a)/a.length());\n}\n\npoint refpoint(point x,segment a){ //点在直线上的投影点 \n\treturn x+(propoint(x,a)-x)*2;\n}\n\nbool orthline(line x,line y){ //两条直线是否垂直 \n\treturn DJ(trpoint(x),trpoint(y))==0;\n}\n\nbool paraline(line x,line y){ //两条直线是否平行 \n\treturn CJ(trpoint(x),trpoint(y))==0;\n}\n\nvoid doit(){\n\ta.read();b.read();\n\tif(orthline(a,b)) write(1);\n\telse if(paraline(a,b)) write(2);\n\telse write(0);puts(\"\");\n}\n\nsigned main(){\n\tint t;\n\tread(t);\n\twhile(t--) doit();\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<map>\n#include<string>\n#include <math.h>\n#include<algorithm>\n#include<functional>\n#define ll long long\n#define inf  999999999\n#define pa pair<int,int>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nusing namespace std;\n\nclass Point{\n\tpublic:\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y) {}\n\tPoint operator + (Point p) {return Point(x+p.x,y+p.y);}\n\tPoint operator - (Point p) {return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a) {return Point(x*a,y*a);}\n\tPoint operator / (double a) {return Point(x/a,y/a);}\n\tdouble abs() {return sqrt(norm());}\n\tdouble norm() {return x*x+y*y;}\n\tbool operator < (const Point &p) const{\n\t\treturn x != p.x ? x<p.x: y<p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\n\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\n//----------------kokomade temple------------\n\n\nint main(){\nint n;\ncin>>n;\ndouble a1,a2,a3,a4,a5,a6,a7,a8;\nVector p,q;\nfor(int i=0;i<n;i++){\ncin>>a1>>a2>>a3>>a4>>a5>>a6>>a7>>a8;\np.x=a3-a1;\np.y=a4-a2;\nq.x=a7-a5;\nq.y=a8-a6;\n\nif(equals(dot(p,q),0.0)) cout<<\"1\"<<endl;\nelse if(equals(cross(p,q),0.0)) cout<<\"2\"<<endl;\nelse cout<<\"0\"<<endl;\n\n}\n\n\n\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n    int q;\n    double x0,y0,x1,y1,x2,y2,x3,y3;\n    cin >> q;\n    for(int i=1; i<=q; i++){\n        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n        double a1,a2;\n        if(x0==x1 && x2==x3){\n            cout << \"2\" << endl;\n        }\n        else if(x0==x1){\n            if(y2==y3) cout << \"1\" << endl;\n            else cout << \"0\" << endl;\n        }\n        else if(x2==x3){\n            if(y0==y1) cout << \"1\" << endl;\n            else cout << \"0\" << endl;\n        }\n        else{\n            a1=(y1-y0)/(x1-x0);\n            a2=(y3-y2)/(x3-x2);\n           // cout << a1 << \" \" << a2 << endl;\n            if(fabs(a1*a2+1)<0.00001) cout << \"1\" << endl;\n            else if(fabs(a1-a2)<0.00001) cout << \"2\" << endl;\n            else cout << \"0\" << endl;\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <limits>\n#include <algorithm>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <list>\n#include <stack>\n#include <string>\n#include <functional>\n#include <numeric>\n#include <map>\n#include <set>\n#include <cstdlib>\n#include <bitset>\n#include <unordered_map>\n#include <random>\n#define _USE_MATH_DEFINES\n#include <cmath>\n#include <complex>\n#include <cfloat>\n\nusing namespace std;\n\n#define INFLD numeric_limits<double>::infinity()\n// #define INF (int)1e8\n// #define INFLL (long long)1e15\n#define Loop(i, n) for(int i = 0; i < (int)n; i++)\n#define Loop1(i, n) for(int i = 1; i <= (int)n; i++)\n#define Loopr(i, n) for(int i = (int)n - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = (int)n; i >= 1; i--)\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\ntypedef long long int ll;\ntypedef vector<int> vi;\ntypedef vector<vector<int>> vvi;\ntypedef pair<int, int> P;\ntypedef vector<ll> vll;\ntypedef vector<vector<ll>> vvll;\n\n/*******************************************************/\n\nnamespace geometry {\n  struct coordinate {\n    double x, y;\n    bool operator<(const coordinate & another) const {\n      return x != another.x ? x < another.x : y < another.y;\n    }\n  };\n  struct line {\n    double a, b, c;\n    pair<double, double> domain; // if b == 0, domain means range \n  };\n  enum linetype {\n    LINE, HALFLINE, SEGMENT\n  };\n  // ax + by + c = 0\n  line make_line(double a, double b, double c, pair<double, double> domain = { -INFLD, INFLD }) {\n    return{ a,b,c,domain };\n  }\n  // line from p through q when type is HALFLINE\n  line make_line_through(coordinate p, coordinate q, linetype type = LINE) {\n    line ret = { NAN, NAN, NAN,{ NAN,NAN } };\n    if (p.x == q.x && p.y == q.y) return ret;\n    else {\n      if (p.x == q.x) {\n        ret = { 1, 0, -p.x, {-INFLD, INFLD} };\n        switch (type) {\n        case SEGMENT:\n          if (p.y > q.y) ret.domain = { q.y, p.y };\n          else ret.domain = { p.y, q.y };\n          return ret;\n        case HALFLINE:\n          if (p.y > q.y) ret.domain = { -INFLD, p.y };\n          else ret.domain = { p.y, INFLD };\n          return ret;\n        case LINE:\n          return ret;\n        }\n      }\n      else {\n        ret = { (q.y - p.y), (p.x - q.x), q.x * p.y - p.x * q.y,{ -INFLD, INFLD } };\n        switch (type) {\n        case SEGMENT:\n          if (p.x > q.x) ret.domain = { q.x, p.x };\n          else ret.domain = { p.x, q.x };\n          return ret;\n        case HALFLINE:\n          if (p.x > q.x) ret.domain = { -INFLD, p.x };\n          else ret.domain = { p.x, INFLD };\n          return ret;\n        case LINE:\n          return ret;\n        }\n      }\n    }\n  }\n  class Two_Lines {\n  private:\n    line l;\n    line m;\n    coordinate crosspoint; // (NAN, NAN) when not existing\n    bool in_range(coordinate p, line l) {\n      if (l.b == 0) {\n        if (l.domain.first <= p.y && p.y <= l.domain.second) return true;\n        else return false;\n      }\n      else {\n        if (l.domain.first <= p.x && p.x <= l.domain.second) return true;\n        else return false;\n      }\n    }\n  public:\n    bool is_intersect; // include having common interval\n    bool is_parallel; // include having common interval\n    bool is_orthogonal;\n    Two_Lines(line l, line m) {\n      Two_Lines::l = l;\n      Two_Lines::m = m;\n      is_intersect = false;\n      is_parallel = false;\n      is_orthogonal = false;\n      crosspoint = { NAN, NAN };\n      double dn = l.a * m.b - m.a * l.b;\n      if (dn == 0) {\n        is_parallel = true;\n        if (l.a * m.c - m.a * l.c);\n        else if (l.b * m.c - m.b * l.c);\n        else {\n          if (l.domain.first <= m.domain.second && m.domain.first <= l.domain.second) is_intersect = true;\n          else is_intersect = false;\n        }\n      }\n      else {\n        if (!(l.a * m.a + l.b * m.b)) is_orthogonal = true;\n        crosspoint.x = (l.b * m.c - m.b * l.c) / dn;\n        crosspoint.y = (m.a * l.c - l.a * m.c) / dn;\n        if (in_range(crosspoint, l) && in_range(crosspoint, m)) {\n          is_intersect = true;\n        }\n        else {\n          crosspoint = { NAN, NAN };\n        }\n      }\n    }\n    double get_distance() {\n      return 0;\n    }\n    coordinate get_crosspoint() {\n      return crosspoint;\n    }\n  };\n}\n\nint main() {\n  using namespace geometry;\n  int q; cin >> q;\n  Loop(i, q) {\n    coordinate p, q;\n    line l, m;\n    cin >> p.x >> p.y >> q.x >> q.y;\n    l = make_line_through(p, q);\n    cin >> p.x >> p.y >> q.x >> q.y;\n    m = make_line_through(p, q);\n    Two_Lines tls(l, m);\n    if (tls.is_parallel) cout << 2 << endl;\n    else if (tls.is_orthogonal) cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n}\n\n/*\n// the intersections of n lines\nvector<coordinate> crosses_of_lines(vector<line> lines) {\n  int n = lines.size();\n  set<coordinate> st;\n  Loop(i, n) {\n    Loop(j, i) {\n      coordinate p = cross_of_2_lines(lines[i], lines[j]);\n      if (p.valid) st.insert(p);\n    }\n  }\n  vector<coordinate> ret;\n  for (auto itr = st.begin(); itr != st.end(); itr++) {\n    ret.push_back(*itr);\n  }\n  return ret;\n}\n\n*/\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define _GLIBCXX_DEBUG\nusing namespace std;\nusing ll = long long;\nusing vec = vector<ll>;\nusing vect = vector<double>;\nusing Graph = vector<vector<ll>>;\n#define loop(i, n) for (ll i = 0; i < n; i++)\n#define Loop(i, m, n) for (ll i = m; i < n; i++)\n#define pool(i, n) for (ll i = n; i >= 0; i--)\n#define Pool(i, m, n) for (ll i = n; i >= m; i--)\n#define mod 1000000007ll\n#define setbit bitset<8>\n#define flagcount __builtin_popcount\n#define flag(x) (1 << x)\n#define flagadd(bit, x) bit |= flag(x)\n#define flagpop(bit, x) bit &= ~flag(x)\n#define flagon(bit, i) bit &flag(i)\n#define flagoff(bit, i) !(bit & (1 << i))\n#define all(v) v.begin(), v.end()\n#define low2way(v, x) lower_bound(all(v), x)\n#define high2way(v, x) upper_bound(all(v), x)\n#define count2way(v, x) high2way(v, x) - low2way(v, x)\n#define lower(v, x) low2way(v, x) - v.begin()       //1番左が0、もし見つから無いならｎを出力\n#define higher(v, x) high2way(v, x) - v.begin() - 1 //1番左が0、もし見つからないならn-1を出力（注意）\n#define putout(a) cout << a << endl\n#define putout2(a, b) \\\n    putout(a);        \\\n    putout(b)\n#define putout3(a, b, c) \\\n    putout(a);           \\\n    putout(b);           \\\n    putout(c)\n#define putout4(a, b, c, d) \\\n    putout(a);              \\\n    putout(b);              \\\n    putout(c);              \\\n    putout(d)\n#define putout5(a, b, c, d, e) \\\n    putout(a);                 \\\n    putout(b);                 \\\n    putout(c);                 \\\n    putout(d);                 \\\n    putout(e)\n#define Gput(a, b) G[a].push_back(b)\n#define cin1(a) cin >> a\n#define cin2(a, b) cin >> a >> b\n#define cin3(a, b, c) cin >> a >> b >> c\n#define cin4(a, b, c, d) cin >> a >> b >> c >> d\n#define cin5(a, b, c, d, e) cin >> a >> b >> c >> d >> e\n#define Sum(v) accumulate(all(v), 0ll)\n#define gcd(x, y) __gcd(x, y)\nll ctoi(char c)\n{\n    if (c >= '0' && c <= '9')\n    {\n        return c - '0';\n    }\n    return 0;\n}\ntemplate <typename T>\nT lcm(T x, T y)\n{\n    T z = gcd(x, y);\n    return x * y / z;\n}\ntemplate <typename T>\nbool primejudge(T n)\n{\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    double sqrtn = sqrt(n);\n    for (T i = 3; i < sqrtn + 1; i++)\n    {\n        if (n % i == 0)\n        {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\ntemplate <typename T>\nT modinv(T a, T m)\n{\n    T b = m, u = 1, v = 0;\n    while (b)\n    {\n        T t = a / b;\n        a -= t * b;\n        swap(a, b);\n        u -= t * v;\n        swap(u, v);\n    }\n    u %= m;\n    if (u < 0)\n        u += m;\n    return u;\n}\n//場合によって使い分ける\n//const ll dx[4]={1,0,-1,0};\n//const ll dy[4]={0,1,0,-1};\nconst ll dx[8] = {1, 1, 0, -1, -1, -1, 0, 1};\nconst ll dy[8] = {0, 1, 1, 1, 0, -1, -1, -1};\n//多次元配列の宣言法\n//vector<vector<ll>> field(h, vector<ll>(w));\ntemplate <class T>\ninline void chmax(T &a, T b)\n{\n    if (a < b)\n        a = b;\n}\ntemplate <class T>\ninline void chmin(T &a, T b)\n{\n    if (a > b)\n        a = b;\n}\n/*\nライブラリをここに置いてコメントを削除\n*/\nstatic const double pi = 3.141592653589793;\n#define scan(x) scanf(\"%ld\", &x)\n\n//誤差チェッカー\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n//点を表わす構造体\nstruct Point\n{\npublic:\n    double x, y;\n    Point(double _x, double _y) : x(_x), y(_y) {}\n    /*\n    以下ベクトルに対する演算子の定義\n    +:ベクトルの足し算\n    -:ベクトルの引き算\n    *:スカラー倍\n    /:スカラーの逆数倍\n    */\n    Point operator+(const Point p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point p) { return Point(x - p.x, y - p.y); }\n    Point operator*(const double k) { return Point(x * k, y * k); }\n    Point operator/(const double k) { return Point(x / k, y / k); }\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y + y; }\n    //ベクトルの比較(x軸方向のベクトルから比較)\n    bool operator<(const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator>(const Point &p) const\n    {\n        return x != p.x ? x > p.x : y > p.y;\n    }\n    bool operator==(const Point &p) const\n    {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    bool operator!=(const Point &p) const\n    {\n        return (!equals(x, p.x)) || (!equals(y, p.y));\n    }\n};\n//ベクトルとして扱う場合\ntypedef Point Vector;\n//線分を表わす構造体\nstruct Segment\n{\n    Point p1, p2;\n};\n//直線として扱う場合\ntypedef Segment Line;\n//ベクトルのノルム\ndouble norm(Vector a)\n{\n    return a.x * a.x + a.y * a.y;\n}\n//ベクトルの大きさ\ndouble abs(Vector a)\n{\n    return sqrt(norm(a));\n}\n//ベクトルの内積\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n//ベクトルの外積\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n//内積≓0かどうかによるベクトルの直交判定(様々な引数で答えられるように複数用意)\nbool Orthogonal(Vector a, Vector b)\n{\n    return equals(dot(a, b), 0.0);\n}\nbool Orthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n    return Orthogonal(a1 - a2, b1 - b2);\n}\nbool Orthogonal(Segment s1, Segment s2)\n{\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n//外積≓0かどうかによるベクトルの平行判定(様々な引数で答えられるように複数用意)\nbool Parallel(Vector a, Vector b)\n{\n    return equals(cross(a, b), 0.0);\n}\nbool Parallel(Point a1, Point a2, Point b1, Point b2)\n{\n    return Parallel(a1 - a2, b1 - b2);\n}\nbool Parallel(Segment s1, Segment s2)\n{\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//座標cを中心とする半径rの円を表わす構造体\nstruct Circle\n{\npublic:\n    Point c;\n    double r;\n    Circle(Point _c, double _r) : c(_c), r(_r) {}\n};\n\n//多角形は点の列として扱う\ntypedef vector<Point> Polygon;\n\nint main()\n{\n    cout << fixed << setprecision(30);\n    ll q;\n    cin >> q;\n    loop(i, q)\n    {\n        vector<double> p(8);\n        loop(i, 8) cin >> p[i];\n        Vector a1(p[0], p[1]), a2(p[2], p[3]);\n        Vector b1(p[4], p[5]), b2(p[6], p[7]);\n        ll check(0);\n        if (Orthogonal(a1, a2, b1, b2))\n            check = 1;\n        if (Parallel(a1, a2, b1, b2))\n            check = 2;\n        putout(check);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nnamespace geometry {\n\tusing Real = double;\n\tusing Point = complex<Real>;\n\tconstexpr Real EPS = 1e-9;\n\t// 誤差を考慮した符号\n\tinline int sgn(const Real x) {\n\t\treturn (x > EPS) - (x < -EPS);\n\t}\n\t// 誤差を考慮した l - r の符号\n\tinline int sgn(const Real l, const Real r) {\n\t\treturn sgn(l - r);\n\t}\n\tstruct Circle {\n\t\tPoint p;\n\t\tReal r;\n\t\tCircle(const Point p, const Real r) : p(p), r(r) {}\n\t};\n\tstruct Line {\n\t\tPoint a, b;\n\t\tLine(const Point a, const Point b) : a(a), b(b) {}\n\t};\n\t// 内積\n\tinline Real dot(const Point& lhs, const Point& rhs) {\n\t\treturn (conj(lhs) * rhs).real();\n\t}\n\t// 外積\n\tinline Real cross(const Point& lhs, const Point& rhs) {\n\t\treturn (conj(lhs) * rhs).imag();\n\t}\n\t// 円の交点\n\tvector<Point> intersect(const Circle& c1, const Circle& c2) {\n\t\tconst Real dist = abs(c1.p - c2.p);\n\t\tvector<Point> ret;\n\t\tif(dist > c1.r + c2.r) return ret;\n\t\tif(dist < abs(c1.r - c2.r)) return ret;\n\t\tconst Real rc = (dist * dist + c1.r * c1.r - c2.r * c2.r) / (2 * dist);\n\t\tconst Real rs = sqrt(c1.r * c1.r - rc * rc);\n\t\tconst Point vec = (c2.p - c1.p) / dist;\n\t\tret.emplace_back(c1.p + vec * Point(rc, rs));\n\t\tret.emplace_back(c1.p + vec * Point(rc, -rs));\n\t\treturn ret;\n\t}\n\t// a の b に対する正射影ベクトル\n\tinline Point projection(const Point& a, const Point& b) {\n\t\treturn b * dot(a, b) / norm(b);\n\t}\n\t// 点pから直線lに下ろした垂線の足\n\tinline Point projection(const Line& l, const Point& p) {\n\t\treturn projection(p - l.a, l.b - l.a) + l.a;\n\t}\n\t// 直線lを対称軸として点pと線対称な点\n\tinline Point reflection(const Line &l, const Point &p) {\n\t\treturn p + (projection(l, p) - p) * 2.0;\n\t}\n\t// 反時計回り(a -> b -> c)\n\tstatic constexpr int COUNTER_CLOCKWISE = 0b00001;\n\t// 時計回り(a -> b -> c)\n\tstatic constexpr int CLOCKWISE = 0b00010;\n\t// 同一直線上(c -> a -> b)\n\tstatic constexpr int ONLINE_BACK = 0b00100;\n\t// 同一直線上(a -> b -> c)\n\tstatic constexpr int ONLINE_FRONT = 0b01000;\n\t// 同一直線上(a -> c -> b)\n\tstatic constexpr int ON_SEGMENT = 0b10000;\n\t// 3点の位置関係\n\tint ccw(const Point &a, Point b, Point c) {\n\t\tb = b - a, c = c - a;\n\t\tif(cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n\t\tif(cross(b, c) < -EPS) return CLOCKWISE;\n\t\tif(dot(b, c) < 0) return ONLINE_BACK;\n\t\tif(norm(b) < norm(c)) return ONLINE_FRONT;\n\t\treturn ON_SEGMENT;\n\t}\n\t// 平行判定\n\tinline bool parallel(const Line& l1, const Line& l2) {\n\t\treturn sgn(cross(l1.a - l1.b, l2.a - l2.b)) == 0;\n\t}\n\t// 直交判定\n\tinline bool orthogonal(const Line& l1, const Line& l2) {\n\t\treturn sgn(dot(l1.a - l1.b, l2.a - l2.b)) == 0;\n\t}\n\n\n\t// 直線の交点\n\t// Point intersect(const Line& l1, const Line& l2) {\n\t// \tconst Point v1 = l1.p2 - l1.p1;\n\t// \tconst Point v2 = l2.p2 - l2.p1;\n\n\t// }\n\n\tinline istream& operator>>(istream& is, Point& p) {\n\t\tReal x, y;\n\t\tis >> x >> y;\n\t\tp = Point(x, y);\n\t\treturn is;\n\t}\n\tinline ostream& operator<<(ostream& os, const Point &p) {\n\t\treturn os << fixed << setprecision(15) << p.real() << \" \" << p.imag();\n\t}\n}\n\nusing namespace geometry;\nint main() {\n\tint q; cin >> q;\n\twhile(q--) {\n\t\tPoint p[4];\n\t\tfor(int i = 0; i < 4; ++i) cin >> p[i];\n\t\tLine s1(p[0], p[1]);\n\t\tLine s2(p[2], p[3]);\n\t\tint ans = 0;\n\t\tif(parallel(s1, s2)) ans = 2;\n\t\tif(orthogonal(s1, s2)) ans = 1;\n\t\tcout << ans << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#include<cmath>\n\n#define Re real()\n#define Im imag()\n#define Eps 1e-9\nusing namespace std;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\ndouble dot(Point a,Point b)\n{\n    return (conj(a)*b).Re;\n}\n\ndouble cross(Point a,Point b)\n{\n    return (conj(a)*b).Im;\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2)\n{\n    return fabs(cross(a2-a1, b2-b1)) < Eps;\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2)\n{\n    return fabs(dot(a2-a1, b2-b1)) < Eps;\n}\n\nint main()\n{\n    int vol;\n    double x1,x2,y1,y2,m1,m2,n1,n2;\n    scanf(\"%d\",&vol);\n    while(vol--)\n    {\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&x1,&y1,&x2,&y2,&m1,&n1,&m2,&n2);\n        Point p1(x1,y1),p2(x2,y2),q1(m1,n1),q2(m2,n2);\n        if(isParallel(p1,p2,q1,q2)) printf(\"2\\n\");\n        else if(isOrthogonal(p1,p2,q1,q2)) printf(\"1\\n\");\n        else printf(\"0\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n#include <cassert>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define fs first\n#define sc second\n#define pb push_back\nusing namespace std;\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P,P> L;\t\t//fs->sc\ntypedef vector<P> Pol;\nstruct C{P p;D r;};\nD inf=1e50,eps=1e-10;\n//template<class T> bool eq(T a, T b) { return abs(a-b)<eps;}\n//template<class T> int sig(T a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool eq(D a, D b) { return abs(a-b)<eps;}\nbool eq(P a, P b) { return abs(a-b)<eps;}\nint sig(D a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\ninline D dot(P a, P b) { return real(conj(a)*b);};\ninline D cro(P a, P b) { return imag(conj(a)*b);};\nenum ENCCW{CCW=1, CW=-1, FRONT=2, BACK=-2, ON=0};\t//!!MAEHARAとFRONT,BACKが逆\n//ON優先(including endpoint)\ninline int ccw (P a, P b, P c){\n//\tcout << cro(b-a,c-a) << endl;\n\tif(sig(cro(b-a,c-a))==1) return CCW;\n\tif(sig(cro(b-a,c-a))==-1) return CW;\n\tif(eq(abs(a-c)+abs(c-b),abs(a-b))) return ON;\n\tif(eq(abs(a-b)+abs(b-c),abs(a-c))) return FRONT;\n\tif(eq(abs(c-a)+abs(a-b),abs(c-b))) return BACK;\n\tassert(false);\n}\ninline P proj(P a, P b){\t\t//ベクトルaのbへの射影\n\treturn (dot(a,b)/norm(b))*b;\n}\ninline P perp(L l, P p){\t\t//垂線の足\n\tD t=dot(p-l.fs,l.fs-l.sc)/norm(l.fs-l.sc);\n\treturn l.fs+t*(l.fs-l.sc);\n}\ninline P refl(L l, P p){\n\treturn p+2.0*(perp(l,p)-p);\n}\ninline bool ispal(L a, L b){\n\treturn sig(cro(a.fs-a.sc,b.fs-b.sc))==0;\n}\ninline bool ovLL(L a, L b){\n\treturn ispal(a,b) && sig(cro(a.fs-a.sc,b.fs-a.sc))==0;\n}\ninline bool iLL(L a, L b){\t\t//intersect or overload\n\treturn !ispal(a,b) || ovLL(a,b);\n}\ninline bool iLS(L l, L s){\t\t//intersect(including endpoint) or overload\n\treturn cro(l.sc-l.fs,s.fs-l.fs)*cro(l.sc-l.fs,s.sc-l.fs)<eps;\n}\ninline bool iLP(L l, P p){\t\t//on line\n\treturn sig(cro(l.sc-p,l.fs-p));\n}\ninline bool iSS(L a, L b){\t\t//intersect(including endpoint) or overload\n\treturn ccw(a.fs,a.sc,b.fs)*ccw(a.fs,a.sc,b.sc)<=0 && ccw(b.fs,b.sc,a.fs)*ccw(b.fs,b.sc,a.sc)<=0;\n}\ninline bool iSP(L s, P p){\t\t//intersect(including endpoint) or overload\n\treturn ccw(s.fs,p,s.sc)==ON;\n}\ninline D dLP(L l, P p) { return abs(perp(l,p)-p);}\ninline D dLL(L a, L b) { return iLL(a,b) ? 0 : dLP(a,b.fs);}\ninline D dLS(L l, L s) { return iLS(l,s) ? 0 : min(dLP(l,s.fs),dLP(l,s.sc));}\ninline D dSP(L s, P p) {\n\tP q=perp(s,p);\n\treturn iSP(s,q) ? abs(p-q) : min(abs(p-s.fs),abs(p-s.sc));\n}\ninline D dSS(L a, L b) {\n\tif(iSS(a,b)) return 0;\n\treturn min(min(dSP(a,b.fs),dSP(a,b.sc)),min(dSP(b,a.fs),dSP(b,a.sc)));\n}\ninline P intLL(L a, L b) {\t//intersection\n\tassert(!ispal(a,b));\n\tD t=cro(a.sc-a.fs,a.sc-b.fs)/cro(a.sc-a.fs,b.sc-b.fs);\n\treturn b.fs+t*(b.sc-b.fs);\n}\nenum ENICP{INC=1,ONC=0,OUTC=-1};\ninline int iCP(C c, P p){\n\tD d=abs(p-c.p);\n\treturn eq(d,c.r) ? ONC : (d<c.r ? INC : OUTC);\n}\ninline int iCL(C c, L l){\t\t//num of intersection(s)\n\tD d=dLP(l,c.p);\n\treturn eq(d,c.r) ? 1 : (d<c.r ? 2 : 0);\n}\n//inline int iCS\n//inline int iCC(C a, C b){\n\n/*inline P intCL1(C c, L l){\t\t//iCL=1\n\tassert(iCL(c,l)==1);\n}\ninline L intCL2(C c, L l){\t\t//iCL=2\n\tassert(iCL(c,l)==2);\n}*/\nD aTri(P a, P b, P c){ return cro(b-a,c-a)/2;}\nD aPol(Pol p){\t\t\t//点集合はCCWに与える\n\tint n=p.size();\n\tD ret=0;\n\trep(i,n) ret+=cro(p[i],p[(i+1)%n])/2;\n\treturn ret;\n}\nP gPol(Pol p){\t\t\t//多角形内部が一様な重さを持つときの重心\n\tint n=p.size();\n\tP g;\n\tD s=aPol(p);\n\tassert(s>eps);\n\trep(i,n){\n\t\tD ds=cro(p[i],p[(i+1)%n])/2;\n\t\tg+=ds/3*(p[i]+p[(i+1)%n]);\n\t}\n\treturn g/s;\n}\nenum ENCONT{INP=1,ONP=0,OUTP=-1};\nint contain(Pol pol, P p){\n\tbool in=false;\n\trep(i,pol.size()){\n\t\tP a=pol[i],b=pol[(i+1)%pol.size()];\n\t\tif(ccw(a,b,p)==ON) return ONP;\n\t\tif(!iLS(L(p,p+1.),L(a,b))) continue;\n\t\tif(ovLL(L(p,p+1.),L(a,b))){\n\t\t\tif(sig(max(real(a),real(b))-real(p))>=0) in=!in;\n\t\t\tcontinue;\n\t\t}\n\t\tif(sig(real(intLL(L(p,p+1.),L(a,b)))-real(p))>=0) in=!in;\n\t}\n\treturn in ? INP : OUTP;\n}\ninline D heron(D a, D b, D c){\n\tdouble s=(a+b+c)/2;\n\tif(s-a<eps || s-b<eps || s-c<eps) return 0;\t\t//S=0 || 三角形できない\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tint q;\n\tscanf(\"%d\",&q);\n\trep(i,q){\n\t\tD a,b,c,d,e,f,g,h;\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&a,&b,&c,&d,&e,&f,&g,&h);\n\t\tL l=L(P(a,b),P(c,d)),m=L(P(e,f),P(g,h));\n\t\tif(ispal(l,m)) printf(\"2\\n\");\n\t\telse if(eq(intLL(l,m),perp(l,m.fs))) printf(\"1\\n\");\n\t\telse printf(\"0\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// C++ 14\n#include <iostream>\n#include <vector>\n#include <list>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <math.h>\n\n#define ll long long\n#define Int ll\n#define loop(x, start, end) for(Int x = start; x < end; x++)\n#define loopdown(x, start, end) for(int x = start; x > end; x--)\n#define span(a,x,y) a.begin()+x,a.begin()+y\n#define span_all(a) a.begin(),a.end()\n#define len(x) (x.size())\n#define last(x) (*(x.end()-1))\n\nusing namespace std;\n\n#define EPS 0.000000001\n#define fequals(a,b) (fabs((a) - (b)) < EPS)\n\nclass Vector2 {\npublic:\n  double x, y;\n  \n  Vector2(double x = 0, double y = 0): x(x), y(y) {}\n  \n  Vector2 operator + (const Vector2 v) const { return Vector2(x + v.x, y + v.y); }\n  Vector2 operator - (const Vector2 v) const { return Vector2(x - v.x, y - v.y); }\n  Vector2 operator * (const double k) const { return Vector2(x * k, y * k); }\n  Vector2 operator / (const double k) const { return Vector2(x / k, y / k); }\n  \n  double length() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n  double dot (Vector2 const v) { return x * v.x + y * v.y; }\n  double cross (Vector2 const v) { return x * v.y - y * v.x; }\n  \n  bool parallel(Vector2 &other) {\n    return fequals(fabs(dot(other)), length() * other.length());\n  }\n  \n  bool orthogonal(Vector2 &other) {\n    return fequals(0, dot(other));\n  }\n  \n  bool operator < (const Vector2 &v) {\n    return x != v.x ? x < v.x : y < v.y;\n  }\n  \n  bool operator == (const Vector2 &v) {\n    return fabs(x - v.x) < EPS && fabs(y - v.y) < EPS;\n  }\n};\n\nostream & operator << (ostream & out, Vector2 const & v) { \n  out<< \"Vector2(\" << v.x << \", \" << v.y << ')';\n  return out;\n}\n\nistream & operator >> (istream & in, Vector2 & v) { \n  double x, y;\n  in >> x;\n  in >> y;\n  v.x = x;\n  v.y = y;\n  return in;\n}\n\n\n#define MAX_N 1001\nInt N;\nVector2 a, b, c, d;\n\nvoid input() {\n  cin >> N;\n  loop(n,0,N) {\n    cin >> a >> b >> c >> d;\n    a = b - a;\n    c = d - c;\n    if (a.parallel(c)) cout << 2 << endl;\n    else if (a.orthogonal(c)) cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n}\n\nint main() {\n  input();\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n//?????????\n#pragma region MACRO \n#define putans(x)  std::cerr << \"answer: \" ; cout << (x) << endl\n#define dputans(x) std::cerr << \"answer: \"; cout << setprecision(10) << (double)(x) << endl\n#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)\n#define RREP(i,a,n) for(int i=(int)(n-1); i>= a; i--)\n#define rep(i,n) REP(i,0,n)\n#define rrep(i,n) RREP(i,0,n)\n#define all(a) begin((a)),end((a))\n#define mp make_pair\n#define exist(container, n) ((container).find((n)) != (container).end())\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#ifdef _DEBUG //???????????????????????????????????????????????????\nstd::ifstream ifs(\"data.txt\");\n#define put ifs >>\n#else //?????£????????????????????§?????????????????????\n#define put cin >>\n#endif\n#pragma endregion\n\n//???????????°??????????????´\n#pragma region CODING_SUPPORT\n#define dbg(var0) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << endl; }\n#define dbg2(var0, var1) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg(var1); }\n#define dbg3(var0, var1, var2) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg2(var1, var2); }\n#define dbgArray(a,n) {std::cerr << (#a) << \"=\";  rep(i,n){std::cerr <<(a[i])<<\",\";} cerr<<endl;} \n#ifndef _DEBUG\n#define dbg1 {}\n#define dbg2 {}\n#define dbg3 {}\n#define dbgArray {}\n#endif \n#pragma endregion \n//typedef????????????????????????????¶????????????§?????????\n#pragma region TYPE_DEF\ntypedef long long ll;\ntypedef pair<int, int> pii; typedef pair<string, string> pss; typedef pair<int, string>pis;\ntypedef vector<string> vs; typedef vector<int> vi;\n#pragma endregion\n//??????????????°(???????????????????????§??????)\n#pragma region CONST_VAL\n#define PI (2*acos(0.0))\n#define EPS (1e-9)\n#define MOD (ll)(1e9 + 7)\n#define INF (ll)(1e9)\n#pragma endregion\n\nclass Point {//????????????????????????\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tdouble operator * (Point p) { return dot(p); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const Point &p) const {return  x != p.x ? x < p.x : y < p.y;}\n\tbool operator == (const Point &p) const {return  fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;;}\n\t//???????????????\n\tdouble dot(Point p) {return x * p.x + y * p.y;}\n\tdouble cross(Point p) { return x * p.y - y * p.x; }\n\n};\n\nint main() {\n\tint n; put n;\n\tint px, py;\n\trep(j, n) {\n\t\tPoint p[4];\n\t\trep(i, 4) {\n\t\t\tput px >> py;\n\t\t\tp[i] = Point(px, py);\n\t\t}\n\t\tPoint pa = p[1] - p[0];\n\t\tPoint pb = p[3] - p[2];\n\t\t\n\t\tif (equals(pa*pb, 0.0)) {\n\t\t\tcout << 1 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif (equals(pa.cross(pb),0.0)) {\n\t\t\tcout << 2 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tcout << 0 << endl;\n\t}\n\n\t\n\treturn 0;\n}\n\n/*\n#define i(x) int x; scanf(\"%d\",&x);\n#define l(x) ll x; scanf(\"%lld\",&x);\n#define d(x) double  x; scanf(\"%lf\",&x);\n*/\n//??????????£?????????°???\n//https://www23.atwiki.jp/akitaicpc/pages/65.html"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate<class T>\nbool chmax(T& a, const T& b) {\n    if (a < b) { a = b; return true; }\n    return false;\n}\ntemplate<class T>\nbool chmin(T& a, const T& b) {\n    if (b < a) { a = b; return true; }\n    return false;\n}\n// std::vector Declaration\ntemplate<typename T>\nvector<T> make_v(size_t a) { return vector<T>(a); }\ntemplate<typename T, typename... Ts>\nauto make_v(size_t a, Ts... ts) {\n    return vector<decltype(make_v<T>(ts...))>(a, make_v<T>(ts...));\n}\n// std::vector Declaration and Initialization\ntemplate<typename T>\nvector<T> make_vector(size_t a, T x) { return vector<T>(a, x); }\ntemplate<typename T, typename U, typename... Ts>\nauto make_vector(size_t a, U b, Ts... ts) {\n    return vector<decltype(make_vector<T>(b,ts...))>(a, make_vector<T>(b, ts...));\n}\n// std::vector Input\ntemplate<typename T>\nistream& operator>>(istream& is, vector<T>& v) {\n    for (auto &e : v) is >> e;\n    return is;\n}\n// std::vector Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const vector<T>& v) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : v) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n// std::array Debug\ntemplate<typename T, size_t n>\nostream& operator<<(ostream& os, const array<T, n>& v) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : v) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n// std::deque Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const deque<T>& d) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : d) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n// std::pair Debug\ntemplate<typename T, typename U>\nostream& operator<<(ostream& os, const pair<T, U>& p) {\n    os << \"(\" << p.first << \" \" << p.second << \")\";\n    return os;\n}\n// std::set Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const set<T>& st) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : st) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n// std::multiset Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const multiset<T>& st) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : st) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n// std::map Debug\ntemplate<typename T, typename U>\nostream& operator<<(ostream& os, const map<T, U>& mp) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : mp) {\n        os << (a ? \"\" : \" \");\n        os << e.first << \":\" << e.second;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n// std::tuple Debug\ntemplate<int N, class Tuple>\nvoid out(ostream& os, const Tuple& t){}\ntemplate<int N, class Tuple, class H, class ...Ts>\nvoid out(ostream& os, const Tuple& t) {\n    if (N) os << \" \";\n    os << get<N>(t);\n    out<N+1,Tuple,Ts...>(os, t);\n}\ntemplate<class ...Ts>\nostream& operator<<(ostream& os, const tuple<Ts...>& t) {\n    os << \"(\";\n    out<0,tuple<Ts...>,Ts...>(os, t);\n    os << \")\";\n    return os;\n}\n// Debug\n// Weighted edge\ntemplate<typename T>\nstruct edge {\n    int src, to;\n    T cost;\n    edge() {}\n    edge(int to, T cost) : src(-1), to(to), cost(cost) {}\n    edge(int src, int to, T cost) : src(src), to(to), cost(cost) {}\n    friend ostream& operator<<(ostream& os, const edge& e) {\n        return os << \"(\" << e.src << \"->\" << e.to << \":\" << e.cost << \")\";\n    }\n};\nusing LL = int64_t;\nconst int64_t MOD = 1e9+7;\nusing Real = double;\nReal EPS = 1e-8;\nusing Point = complex<Real>;\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(const Point& a, const Point& b) : a(a), b(b) {}\n    friend ostream& operator<<(ostream& os, Line& l) {\n        return os << \"[\" << l.a << \",\" << l.b << \"]\";\n    }\n};\nstruct Segment : Line {\n    Segment() = default;\n    Segment(const Point& a, const Point& b) : Line(a, b) {}\n};\ninline bool eq(Real a, Real b) { return abs(b - a) < EPS; }\nReal radian_to_degree(Real r) {\n    return r * 180.0 / M_PI;\n}\nReal degree_to_radian(Real d) {\n    return d * M_PI / 180.0;\n}\nPoint rotate(const Point &p, Real theta) {\n    return p * polar(1., theta);\n}\nReal cross(const Point& a, const Point& b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\nReal dot(const Point& a, const Point& b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\nPoint projection(const Line& l, const Point& p) {\n    Real A = dot(l.b - l.a, p - l.a),\n         B = dot(l.a - l.b, p - l.b);\n    return (A * l.b + B * l.a) / (A + B);\n}\nbool parallel(const Line& l1, const Line& l2) {\n    return eq(cross(l1.a - l1.b, l2.a - l2.b), 0.0);\n}\nbool orthogonal(const Line& l1, const Line& l2) {\n    return eq(dot(l1.a - l1.b, l2.a - l2.b), 0.0);\n}\nconst int COUNTER_CLOCKWISE = 1,\n          CLOCKWISE = -1,\n          ONLINE_BACK = 2,\n          ONLINE_FRONT = -2,\n          ON_SEGMENT = 0;\nint ccw(const Point& a, Point b, Point c) {\n    b = b - a, c = c - a;\n    if (cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0) return ONLINE_BACK;\n    if (norm(b) < norm(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nbool intersected(const Line& l, const Point& p) {\n    return abs(ccw(l.a, l.b, p)) != 1;\n}\nbool intersected(const Segment& s, const Point& p) {\n    return ccw(s.a, s.b, p) == 0;\n}\nbool intersected(const Line& l, const Segment& s) {\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\nbool intersected(const Segment& s1, const Segment& s2) {\n    return ccw(s1.a, s1.b, s2.a) * ccw(s1.a, s1.b, s2.b) <= 0 and\n           ccw(s2.a, s2.b, s1.a) * ccw(s2.a, s2.b, s1.b) <= 0;\n}\nReal distance(const Line& l, const Point& p) {\n    return abs(p - projection(l, p));\n}\nReal distance(const Segment& s, const Point& p) {\n    Point r = projection(s, p);\n    if (intersected(s, r)) return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\nReal distance(const Line &l, const Segment &s) {\n    if (intersected(l, s)) return 0;\n    return min(distance(l, s.a), distance(l, s.b));\n}\nReal distance(const Segment& s1, const Segment& s2) {\n    if (intersected(s1, s2)) return 0.0;\n    return min({ distance(s1, s2.a), distance(s1, s2.b),\n                 distance(s2, s1.a), distance(s2, s1.b) });\n}\nPoint crosspoint(const Line& l1, const Line& l2) {\n    Real A = cross(l2.a - l1.a, l2.b - l1.a),\n         B = cross(l2.b - l1.b, l2.a - l1.b);\n    return (A * l1.b + B * l1.a) / (A + B);\n}\nint main()\n{\n    int q; cin >> q;\n    while (q--) {\n        double x1, y1, x2, y2, x3, y3, x4, y4;\n        cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n        Segment l1{Point{x1, y1}, Point{x2, y2}},\n                l2{Point{x3, y3}, Point{x4, y4}};\n        if (parallel(l1, l2)) {\n            cout << 2 << endl;\n        } else if (orthogonal(l1, l2)) {\n            cout << 1 << endl;\n        } else {\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tlong double x0, y0, x1, y1, x2, y2, x3, y3; cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tlong double vec1_x = x1 - x0, vec1_y = y1 - y0, vec2_x = x3 - x2, vec2_y = y3 - y2;\n\t\tlong double cos_val = (vec1_x*vec2_x + vec1_y*vec2_y) / (hypot(vec1_x, vec1_y)*hypot(vec2_x, vec2_y));\n\t\tif (cos_val == 0) { cout << \"1\" << endl; continue; }\n\t\tif (cos_val == 1 || cos_val == -1) { cout << \"2\" << endl; continue; }\n\t\tcout << \"0\" << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int inf = 0x3f3f3f3f;\n#define dbg(x...) do { cout << \"\\033[32;1m\" << #x <<\" -> \"; err(x); } while (0)\nvoid err() { cout << \"\\033[39;0m\" << endl; }\ntemplate<class T, class... Ts> void err(const T& arg,const Ts&... args) { cout << arg << \" \"; err(args...); }\n\ntypedef long double db;\nconst db eps = 1e-8;\nconst db pi = acosl(-1.0);\nint sgn(db x){if(fabs(x) < eps) return 0; return x < 0 ? -1 : 1;}\nstruct Point{\n    db x, y;\n    Point(){}\n    Point(db x, db y):x(x), y(y){}\n    void input(){cin >> x >> y;}\n    Point operator - (const Point &b) const{\n        return Point(x - b.x, y - b.y);\n    }\n    Point operator + (const Point &b) const{\n        return Point(x + b.x, y + b.y);\n    }\n    db operator ^ (const Point&b)const{\n        return x * b.y - y * b.x;\n    }\n    db operator * (const Point &b) const{\n        return x * b.x + y * b.y;\n    }\n    db len2(){\n        return x * x + y * y;\n    }\n    db len(){\n        return sqrtl(len2());\n    }\n};\nstruct Line{\n    Point s, e;\n    Line(){};\n    Line(Point s, Point e) :s(s), e(e){}\n    void input(){ s.input(); e.input(); }\n    int isParallel(Line v) {\n        db val = (e - s) ^ (v.e - v.s);\n        if(sgn(val) == 0) return 2;\n        if(sgn(fabs(val) - (e - s).len() * (v.e - v.s).len()) == 0) return 1;\n        return 0;\n    }\n}l1, l2;\n\n\nint main(){\n#ifndef ONLINE_JUDGE\n//freopen(\"i.in\",\"r\",stdin);\n//  freopen(\"o.out\",\"w\",stdout);\n#endif\n    \n    int T;scanf(\"%d\", &T);\n    while(T--){\n        l1.input(); l2.input();\n        cout << l1.isParallel(l2) << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\n#include<queue>\n#include<iostream>\n#include<set>\n#include<map>\n#define re register\n#define ll long long\nusing namespace std;\ninline int gi(){\n\tint f=1,sum=0;char ch=getchar();\n\twhile(ch>'9'|| ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9'){sum=(sum<<3)+(sum<<1)+ch-'0';ch=getchar();}\n\treturn sum*f;\n}\nconst double eps=1e-10,Pi=acos(-1.0);\nstruct node{\n\tdouble x,y;\n\tnode operator+(node b){return (node){x+b.x,y+b.y};}\n\tnode operator-(node b){return (node){x-b.x,y-b.y};}\n\tnode operator*(double b){return (node){x*b,y*b};}\n\tdouble len(){return sqrt(x*x+y*y);}\n};\nint fh(double a){return fabs(a)<eps?0:a>eps?1:-1;}\ndouble cross(node a,node b){return a.x*b.y-a.y*b.x;}\ndouble dot(node a,node b){return a.x*b.x+a.y*b.y;}\nnode projection(node p1,node p2,node p){node v=p2-p1;return p1+v*(dot(v,p-p1)/dot(v,v));}\nnode reflection(node p1,node p2,node p){node P=projection(p1,p2,p);P=P*2-p;return P;}\nvoid Counter_Clockwise(node p1,node p2,node p){\n\tif(cross(p2-p1,p-p1)>eps){puts(\"COUNTER_CLOCKWISE\");return;}\n\tif(cross(p2-p1,p-p1)<-eps){puts(\"CLOCKWISE\");return;}\n\tif(dot(p2-p1,p-p1)<-eps){puts(\"ONLINE_BACK\");return;}\n\tif(dot(p2-p1,p2-p1)>=dot(p-p1,p2-p1)){puts(\"ON_SEGMENT\");return;}\n\tputs(\"ONLINE_FRONT\");\n}\nbool insegment(node A,node B,node p){\n\tif(fh(cross(B-A,p-A)))return false;\n\treturn ((fh(p.x-A.x)>=0 && fh(B.x-p.x)>=0) || (fh(p.x-A.x)<=0 && fh(B.x-p.x)<=0)) && ((fh(p.y-A.y)>=0 && fh(B.y-p.y)>=0) || (fh(p.y-A.y)<=0 && fh(B.y-p.y)<=0));\n}\nint parallel(node A1,node A2,node B1,node B2){\n\tif(!fh(cross(B2-B1,A2-A1)))return 2;\n\tif(!fh(dot(B2-B1,A2-A1)))return 1;\n\treturn 0;\n}\nbool intersection(node A1,node A2,node B1,node B2){\n\tif(!fh(cross(B2-B1,A2-A1))){\n\t\tif(insegment(A1,A2,B1) || insegment(A1,A2,B2) || insegment(B1,B2,A1) || insegment(B1,B2,A2))return true;\n\t\treturn false;\n\t}\n\treturn fh(cross(A1-B1,B2-B1)*cross(A2-B1,B2-B1))<=0 && (fh(cross(B1-A1,A2-A1)*cross(B2-A1,A2-A1))<=0);\n}\nint main(){\n\tnode p1,p2,p3,p4;\n\tint Q=gi();\n\twhile(Q--){\n\t\tp1.x=gi();p1.y=gi();p2.x=gi();p2.y=gi();\n\t\tp3.x=gi();p3.y=gi();p4.x=gi();p4.y=gi();\n\t\tprintf(\"%d\\n\",parallel(p1,p2,p3,p4));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#include <cstdio>\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a, b) (abs((a) - (b)) < EPS) // 二つのスカラーが等しいかどうか\n#define EQV(a, b) (EQ((a).X, (b).X) && EQ((a).Y, (b).Y)) // 二つのベクトルが等しいかどうか\nusing namespace std;\n\ntypedef complex<double> Point; // 点\ntypedef Point Vector; // ベクトル\n\nstruct Segment{ // 線分\n  Point p1, p2;\n  Segment(){};\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}; // p1,p2をセット\n};\n\ntypedef Segment Line; // 直線\n\ntypedef vector<Point> Polygon; // 多角形\n\ndouble dotproduct(Vector a, Vector b) // 内積\n{\n  return real((conj(a) * b));\n}\n\ndouble crossproduct(Vector a, Vector b) // 外積\n{\n  return imag(conj(a) * b);\n}\n\ndouble dist(Point p1, Point p2) // 二点間の距離\n{\n  return abs(p1 - p2);\n}\n\nPoint project(Line l, Point p) // 射影\n{\n  double r = dotproduct(p - l.p1, l.p2 - l.p1) / norm(l.p2 - l.p1);\n  return l.p1 + (l.p2 - l.p1) * r;\n}\n\nPoint reflect(Line l, Point p) // 反射\n{\n  return p + (project(l, p) - p) * 2.0;\n}\n\nbool isOrthogonal(Line l1, Line l2)\n{\n  return EQ(dotproduct(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\n\nbool isParallel(Line l1, Line l2)\n{\n  return EQ(crossproduct(l1.p1 - l1.p2, l2.p1 - l2.p2), 0.0);\n}\n\nint main()\n{\n  int n;\n  cin >> n;\n  for(int i = 0; i < n; i++){\n    Point a, b, c, d;\n    cin >> a.X >> a.Y >> b.X >> b.Y >> c.X >> c.Y >> d.X >> d.Y;\n    Line l1(a, b), l2(c, d);\n    if(isOrthogonal(l1, l2))\n      cout << \"1\" << endl;\n    else if(isParallel(l1, l2))\n      cout << \"2\" << endl;\n    else\n      cout << \"0\" << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <vector>\n#include <cmath>\n#include <iostream>\n\nconst double EPS=1e-10;\n\n#define equals(a, b) (fabs((a)-(b))<EPS)\n#define X real()\n#define Y imag()\n\nusing namespace std;\n\ntypedef complex<double> Point;\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\ntypedef Segment Line;\n\nstruct Circle {\n    Point c;\n    double r;\n    Circle(Point c=Point(), double r=0.0) :\n        c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) {\n    return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(Vector a,Vector b) {\n    return a.X*b.Y - a.Y*b.X;\n}\n\nint main(void) {\n    int n;\n    cin>>n;\n    while(n-->0) {\n        double x1,y1;\n        double x2,y2;\n        double x3,y3;\n        double x4,y4;\n        cin>>x1>>y1;\n        cin>>x2>>y2;\n        cin>>x3>>y3;\n        cin>>x4>>y4;\n        Segment s1,s2;\n        s1.p1=Point(x1,y1);\n        s1.p2=Point(x2,y2);\n        s2.p1=Point(x3,y3);\n        s2.p2=Point(x4,y4);\n        if(equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0)) {\n            cout<<\"1\"<<endl;\n        }\n        else if(equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0)) {\n            cout<<\"2\"<<endl;\n        }\n        else cout<<\"0\"<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cfloat>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <functional>\n#include <sstream>\n#include <string>\n#include <utility>\n#include <map>\n#include <memory>\n#include <set>\n#include <vector>\n#include <deque>\n#include <list>\n#include <stack>\n#include <queue>\n\nusing namespace std;\n\nclass Vector\n{\npublic:\n  int x;\n  int y;\n\n  Vector(){}\n  Vector( int x, int y ) : x(x), y(y) {}\n\n  Vector operator + ( const Vector v ) { return Vector( x + v.x, y + v.y ); }\n  Vector operator - ( const Vector v ) { return Vector( x - v.x, y - v.y ); }\n  Vector operator * ( const int k ) { return Vector( x * k, y * k ); }\n  bool operator < ( const Vector &v ) const { return x * x + y * y < v.x * v.x + v.y * v.y; }\n\n  double length() { return sqrt( norm() ); }\n  int norm() { return x * x + y * y; }\n\n  static int dot( Vector v1, Vector v2 ) { return v1.x * v2.x + v1.y * v2.y; }\n  static int cross( Vector v1, Vector v2 ) { return v1.x * v2.y - v1.y * v2.x; }\n};\n\nint main()\n{\n  int q;\n  cin >> q;\n\n  int x0, y0, x1, y1, x2, y2, x3, y3;\n  \n  for ( auto i = 0; i < q; ++i )\n    {\n      cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n      Vector p0( x0, y0 );\n      Vector p1( x1, y1 );\n      Vector p2( x2, y2 );\n      Vector p3( x3, y3 );\n\n      Vector p10 = p1 - p0;\n      Vector p32 = p3 - p2;\n\n      if ( Vector::dot( p10, p32 ) == 0 )\n        cout << \"1\" << endl;\n      else if ( Vector::cross( p10, p32 ) == 0 )\n        cout << \"2\" << endl;\n      else\n        cout << \"0\" << endl;\n    }\n          \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef ___Geometry_Library\n#define ___Geometry_Library\n\n// ------ Includes ------ //\n#include <cmath>\n#include <complex>\n#include <utility>\n#include <algorithm>\n\n// ------ Defines ------ //\ntypedef long double GType;\ntypedef std::complex<GType> Point;\ntypedef std::pair<Point, Point> Segment;\n\n// ------ Constants ------ //\nconst GType EPS = 1.0e-10L;\n\n// ------ Functions Level 1 ------ //\nGType dot(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).real();\n}\nGType cross(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).imag();\n}\n\n#endif\n\n#include <iostream>\nusing namespace std;\nint q, xa, ya, xb, yb; Segment s1, s2;\nint main() {\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> xa >> ya >> xb >> yb; s1 = make_pair(Point(xa, ya), Point(xb, yb));\n\t\tcin >> xa >> ya >> xb >> yb; s2 = make_pair(Point(xa, ya), Point(xb, yb));\n\t\tif (cross(s1.second - s1.first, s2.second - s2.first) < EPS) cout << 2 << endl;\n\t\telse if (dot(s1.second - s1.first, s2.second - s2.first) < EPS) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define range(i,a,b) for(int i = (a); i < (b); i++)\n#define rep(i,b) for(int i = 0; i < (b); i++)\n#define all(a) (a).begin(), (a).end()\n#define debug(x) cout << \"debug \" << x << endl;\nconst int INF = 100000000;\nusing namespace std;\n\ntypedef complex<double> Point;\ntypedef Point Vector;\n//???????????¨????§???????\nstruct Segment{ Point p1, p2; };\n//??´????????¨????§???????\ntypedef Segment Line;\n//????§???¢?????¨????§???????\ntypedef vector<Point> Polygon;\n\nnamespace std{\n    bool operator < (const Point &a, const Point &b){\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n    bool operator == (const Point &a, const Point &b){\n        return a.real() == b.real() && a.imag() == b.imag();\n    }\n}\n\nclass Circle{\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\n// ?¨±???????????????\n#define EPS (1e-10)\n// 2??????????????????????????????????????????\n//#define EQ(a,b) (abs((a)-(b)) < EPS)\n// 2??????????????????????????????????????????\n//#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n\n// ????????????a?????¶??????????±???????\n//double length = abs(a);\n\n// 2???a,b???????????¢????±???????\n//double distance = abs(a-b);\n\n/*\n// ????????????a?????????????????????????±???????\nPoint b = a / abs(a);\n\n// ????????????a?????????????????????n1,n2????±???????\nPoint n1 = a * Point(0, 1);\nPoint n2 = a * Point(0, -1);\n*/\n\n// 2??????????????????????????????????????????\nbool EQ(double a, double b){\n    return (abs(a - b) < EPS);\n}\n\n// 2??????????????????????????????????????????\nbool EQV(Vector a, Vector b){\n    return ( EQ(a.real(), b.real()) && EQ(a.imag(), b.imag()) );\n}\n\n// ?????? (dot product) : a???b = |a||b|cos??\ndouble dot(Point a, Point b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// ?????? (cross product) : a??b = |a||b|sin??\ndouble cross(Point a, Point b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// 2??´????????´????????? : a??\\b <=> dot(a, b) = 0\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return EQ( dot(a1-a2, b1-b2), 0.0 );\n}\nbool isOrthogonal(Line s1, Line s2) {\n    return isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 2??´?????????????????? : a//b <=> cross(a, b) = 0\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return EQ( cross(a1-a2, b1-b2), 0.0 );\n}\nbool isParallel(Line s1, Line s2) {\n    return isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// ???c?????´???a,b????????????????????????\nbool isPointOnLine(Point a, Point b, Point c) {\n    return EQ( cross(b-a, c-a), 0.0 );\n}\nbool isPointOnLine(Line s, Point c) {\n    return isPointOnLine(s.p1, s.p2, c);\n}\n\n// ???a,b???????????´?????¨???c??¨????????¢\ndouble distanceLPoint(Point a, Point b, Point c) {\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\ndouble distanceLPoint(Line s, Point c) {\n    return distanceLPoint(s.p1, s.p2, c);\n}\n\n// ???a,b???????????¨??????????????¨???c??¨????????¢\ndouble distanceLsPoint(Point a, Point b, Point c) {\n    if ( dot(b-a, c-a) < EPS ) return abs(c-a);\n    if ( dot(a-b, c-b) < EPS ) return abs(c-b);\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\ndouble distanceLsPoint(Segment s, Point c) {\n    return distanceLsPoint(s.p1, s.p2, c);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨???????????????????????????\nbool isIntersectedLs(Point a1, Point a2, Point b1, Point b2) {\n    return ( cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS ) &&\n        ( cross(b2-b1, a1-b1) * cross(b2-b1, a2-b1) < EPS );\n}\nbool isIntersectedLs(Segment s1, Segment s2) {\n    return isIntersectedLs(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨??????????????????????¨????\nPoint intersectionLs(Point a1, Point a2, Point b1, Point b2) {\n    Point b = b2-b1;\n    double d1 = abs(cross(b, a1-b1));\n    double d2 = abs(cross(b, a2-b1));\n    double t = d1 / (d1 + d2);\n\n    return a1 + (a2-a1) * t;\n}\nPoint intersectionLs(Segment s1, Segment s2) {\n    return intersectionLs(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// a1,a2???????????´?????¨b1,b2???????????´??????????????????\nbool isIntersectedL(Point a1, Point a2, Point b1, Point b2) {\n    return !EQ( cross(a1-a2, b1-b2), 0.0 );\n}\nbool isIntersectedL(Line l1, Line l2) {\n    return isIntersectedL(l1.p1, l1.p2, l2.p1, l2.p2);\n}\n\n// a1,a2???????????´?????¨b1,b2???????????´?????????????¨????\nPoint intersectionL(Point a1, Point a2, Point b1, Point b2) {\n    Point a = a2 - a1; Point b = b2 - b1;\n    return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\nPoint intersectionL(Line l1, Line l2) {\n    return intersectionL(l1.p1, l1.p2, l2.p1, l2.p2);\n}\n\n// ??????s1??¨??????s2????????¢\ndouble distanceLL(Segment s1, Segment s2){\n    if(isIntersectedLs(s1.p1, s1.p2, s2.p1, s2.p2) ) return 0.0;\n    return min(\n            min(distanceLsPoint(s1.p1, s1.p2, s2.p1),\n                distanceLsPoint(s1.p1, s1.p2, s2.p2)),\n            min(distanceLsPoint(s2.p1, s2.p2, s1.p1),\n                distanceLsPoint(s2.p1, s2.p2, s1.p2)) );\n}\n\n// ??????s???????????????p????°???±\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return Point(s.p1 + base * r);\n}\n\n//??????s???????±??????¨?????????p??????????§°??????\nPoint reflect(Segment s, Point p){\n    return Point(p + (project(s, p) - p) * 2.0);\n}\n\n//???p???angle?????????????¨???????????????¢\nPoint rotation(Point p, double angle){\n    double x, y;\n    x = p.real() * cos(angle) - p.imag() * sin(angle);\n    y = p.real() * sin(angle) + p.imag() * cos(angle);\n    return Point(x, y);\n}\n\nstatic const int kCounter_clockwise = 1;\n\nint main(){\n    int n;\n    cin >> n;\n    while(n--){\n        Segment s[2];\n        rep(i,2){\n            double a, b, c, d;\n            cin >> a >> b >> c >> d;\n            s[i] = Segment{Point(a, b), Point(c, d)};\n        }\n        if(isParallel(s[0], s[1])) cout << 2 << endl;\n        else if(isOrthogonal(s[0], s[1])) cout << 1 << endl;\n        else cout << 0 << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "\n#include <cmath>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include<vector>\n#include<cstring>\n#include<set>\n#include <cstdio>\n#include<queue>\n#include<map>\n#define WHITE 0\n#define GRAY  1\n#define BLACK 2\n#define endl '\\n'\n#define forup(i,a,n) for( int i =a; i < n; i++)\n#define llforup(i,a,n) for( ll i =a; i < n; i++)\n#define fordown(i,a,n) for( int i =a; i >= n; i--)\n#define fornot(i,a,n) for( int i=a;!n;i++)\n#define mod  (ll)(1e9+7)\n#define putnum(a) printf(\"%d\\n\",a)\nusing namespace std;\ntypedef long long ll;\ninline int readnum()\n{\n\tint p, data = 0; char ch = 0;\n\twhile ((ch != '-') &&( ch < '0' || ch>'9') )//注意运算优先级，逻辑与大于逻辑非\n\t\tch = getchar();//相当于正则表达式的搜索，跳过不需要的字符\n\tif (ch == '-')\n\t\tp = -1, ch = getchar();//不能与if平行放置，不懂为什么，可能是bug\n\telse p = 1;\n\twhile (ch >= '0' && ch <= '9') data = data * 10 + ch - '0', ch = getchar();//搜索需要的字符\n\treturn data * p;\n}\ninline int ReadPossitive()\n{\n\tchar ch; int data = 0;\n\tch = getchar();\n\twhile (ch == ' ' || ch == '\\n')ch = getchar();\n\twhile (ch != ' ' && ch != '\\n' && ch != EOF)\n\t{\n\t\tdata = data * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn data;\n}\n//并查集模板\nclass DisjointSet {\nprivate:\n\tvector<int>rank, parent;\npublic:\n\tDisjointSet(){}\n\tDisjointSet(int size)\n\t{\n\t\trank.resize(size, 0);//默认初始化为0，养成习惯写完整\n\t\tparent.resize(size, 0);\n\t\tforup(i, 0, size)MakeSet(i);\n\t}\n\tvoid MakeSet(int x)\n\t{\n\t\tparent[x] = x;\n\t\trank[x] = 0;\n\t}\n\tbool same(int x, int y)\n\t{\n\t\treturn Findroot(x) == Findroot(y);\n\t}\n\tvoid unite(int x, int y)\n\t{\n\t\tlink(Findroot(x), Findroot(y));\n\t}\n\tinline int Findroot(int x)\n\t{\n\t\twhile (x != parent[x])\n\t\t{\n\t\t\tx = parent[x];\n\t\t}\n\t\treturn x;\n\t}\n\tvoid link(int rootx, int rooty)\n\t{\n\t\tif (rank[rootx] < rank[rooty])parent[rootx] = parent[rooty];\n\t\telse\n\t\t{\n\t\t\tparent[rooty] = parent[rootx];\n\t\t\tif (rank[rootx] == rank[rooty])\n\t\t\t\trank[rootx]++;\n\t\t}\n\t}\n};\n\n//计算几何模板\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)//保留整数0\nclass Point {\npublic:\n\tdouble x, y;\npublic:\n\tPoint() {};\n\tPoint(double x,double y):x(x),y(y){}\n\tPoint operator +(Point &p) { return Point(x + p.x, y + p.y);}\n\tPoint operator -(Point& p) { return Point(x - p.x, y - p.y);}\n\tPoint operator *(double a) { return Point(a * x, a * y); }\n\tPoint operator /(double a) { return Point(x / a, y / a); }\n\tinline double abs() { return sqrt(norm()); }\n\tinline double norm() { return x * x + y * y; }\n\tbool operator <(const Point& p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(const Point& p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\nclass Vector :public Point{//公有继承\npublic:\n\tdouble dot(Point a, Point b)//点乘\n\t{\n\t\treturn a.x * b.x + a.y * b.y;\n\t}\n\tdouble cross(Point a, Point b)//叉乘\n\t{\n\t\treturn a.x * b.y - a.y * b.x;\n\t}\n};\nclass Line{\npublic:\n\tPoint p1, p2;\npublic:\n\tLine() {};\n\tLine(int p1x, int p1y, int p2x, int p2y)\n\t{\n\t\tp1.x = p1x; p1.y = p1y;\n\t\tp2.x = p2x; p2.y = p2y;\n\t}\n};\nclass LineOperation :public Vector{\npublic:\t\n\tLineOperation() {};\n\tbool isOrthogonal(Line s1, Line s2)\n\t{\n\t\treturn equals(dot(s1.p2-s1.p1, s2.p2 - s2.p1), 0.0);//操作符重载的返回值的内存分配机制尚不可知，似乎返回值没有分配内存，dot的参数不能用引用，否则报错。\n\t}\n\tbool isParallel(Line s1, Line s2)\n\t{\n\t\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);//外积判断平行，内积判断垂直。\n\t}\n};\n//E-mail 374656045@qq.com\n\nclass solve {\nprivate:\n\tint n;\npublic://采用邻接表建图,带权无向图\n\tsolve()\n\t{\n\t\tn = ReadPossitive();\n\t\tint x1, y1, x2, y2, x3, y3, x4, y4;\n\t\tLineOperation op;\n\t\tforup(i, 0, n)\n\t\t{\n\t\t\tx1 = readnum(); y1 = readnum();\n\t\t\tx2 = readnum(); y2 = readnum();\n\t\t\tx3 = readnum(); y3 = readnum();\n\t\t\tx4 = readnum(); y4 = readnum();\n\t\t\tLine s1(x1, y1, x2, y2), s2(x3, y3, x4, y4);\n\t\t\tif (op.isParallel(s1, s2))putnum(2);\n\t\t\telse if (op.isOrthogonal(s1, s2))putnum(1);\n\t\t\telse putnum(0);\n\t\t}\n\t}\n\t\n};\nint main(void)\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);//慎用，cin和scanf混用会导致非MSC++WA\n#ifdef DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tsolve solution;\n#ifdef DEBUG\n\tfclose(stdin);//关闭文件 \n\tfclose(stdout);//关闭文件 \n#endif\n\treturn 0;\n\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\n\nusing namespace std;\n\nint main(){\n\tint q;\n\tdouble x1,x2,x3,x4,y1,y2,y3,y4,slope1,slope2;\n\n\tscanf(\"%d\",&q);\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n\t\tif(x1 == x2 && x3 == x4){\n\t\t\tprintf(\"2\\n\");\n\t\t}else if(x1 == x2 && x3 != x4){\n\t\t\tif(y3 == y4)printf(\"1\\n\");\n\t\t\telse{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}else if(x1 != x2 && x3 == x4){\n\t\t\tif(y1 == y2)printf(\"1\\n\");\n\t\t\telse{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}else{\n\t\t\tslope1 = (y2-y1)/(x2-x1);\n\t\t\tslope2 = (y4-y3)/(x4-x3);\n\t\t\tif(slope1 == slope2){\n\t\t\t\tprintf(\"2\\n\");\n\t\t\t}else if(slope1*slope2 == -1){\n\t\t\t\tprintf(\"1\\n\");\n\t\t\t}else{\n\t\t\t\tprintf(\"0\\n\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing Point = complex< double >;\nconst double EPS = 1e-10, PI = acos(-1);\n\nbool eq(double a, double b){ return fabs(a-b) < EPS; }\n\nistream &operator>> (istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\nostream &operator<< (ostream &os, Point &p) {\n  return os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nbool operator<(const Point &a, const Point &b) {\n  return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n}\n\n// rotate Φ(rad)\n// x = r * cos(θ + Φ)\n//   = r * cos(θ) * cos(Φ) - r * sin(θ) * sin(Φ)\n//   = x * cos(Φ) - y * sin(Φ) (∵ cos(θ) = x/r, sin(θ) = y/r)  \nPoint rotate(double phi, const Point &p) {\n  double x = p.real(), y = p.imag();\n  return Point(x * cos(phi) - y * sin(phi), x * sin(phi) + y * cos(phi));\n}\n\ndouble radian_to_degree(double r) {\n  return (r * 180.0 / PI);\n}\n\ndouble degree_to_radian(double d) {\n  return (d * PI / 180.0);\n}\n\nstruct Line{\n  Point a, b;\n\n  Line() = default;\n\n  Line(Point a, Point b) : a(a), b(b){}\n\n  Line(double A, double B, double C){\n    //ax + by = c\n    if(eq(A, 0)){\n      a = Point(0, C/B), b = Point(1, C/B);\n    }else if(eq(B, 0)){\n      a = Point(C/A, 0), b = Point(C/A, 1);\n    }else{\n      a = Point(0, C/B), b = Point(C/A, 0);\n    }\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n  friend ostream &operator<<(ostream &os, Line &a) {\n    return os << a.a << \" to \" << a.b;\n  }\n};\n\nstruct Segment: Line{\n  Segment() = default;\n\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle() = default;\n\n  Circle(Point p, double r): p(p), r(r){}\n};\n\nusing Points = vector<Point>;\nusing Polygon = vector<Point>;\nusing Segments = vector<Segment>;\nusing Lines = vector<Line>;\nusing Circles = vector<Circle>;\n\ndouble cross(const Point &a, const Point &b) {\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(const Point& a, const Point &b) {\n  return a.real() * b.real() + a.imag() * b.imag();\n}\n\n//https://mathtrain.jp/projection\nPoint projection(const Line &l, const Point &p){\n  double t = dot(p - l.a, l.a-l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p){\n  double t = dot(p - l.a, l.b-l.a) / norm(l.a - l.b);\n  return l.a + (l.b - l.a) * t;\n}\n\nPoint reflection(const Line &l, const Point &p){\n  return p + (projection(l, p) - p) * 2.0;\n}\n\nint ccw(const Point &a, const Point &b, const Point &c) {\n  if(cross(b-a, c-a) > EPS) return 1;   // \"COUNTER_CLOCKWISE\"\n  if(cross(b-a, c-a) < -EPS) return -1; // \"CLOCKWISE\"\n  if(dot(b-a, c-a) < -EPS) return 2;    // \"ONLINE_BACK\" c-a-b\n  if(norm(b-a) < norm(c-a) - EPS) return -2;  // \"ONLINE_FRONT\" a-b-c\n  return 0;                         // \"ON_SEGMENT\" a-c-b\n}\n\nbool parallel(const Line &a, const Line &b){\n  return eq(cross(a.a-a.b, b.a-b.b), 0.0);\n}\nbool orthogonal(const Line &a, const Line &b){\n  return eq(dot(a.a-a.b, b.a-b.b), 0.0);\n}\nint main(){\n  int q;\n  cin >> q;\n  while(q--){\n    Line l1, l2;\n    cin >> l1 >> l2;\n    if(parallel(l1,l2)){\n      cout << 2 << endl;\n    }else if(orthogonal(l1,l2)){\n      cout << 1 << endl;\n    }else{\n      cout << 0 << endl;\n    }\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#pragma GCC optimize(\"Ofast\")\n\n// Begin Header {{{\nusing namespace std;\n\n#ifndef DEBUG\n#define dump(...)\n#endif\n\n#define all(x) x.begin(), x.end()\n#define rep(i, b, e) for (intmax_t i = (b), i##_limit = (e); i < i##_limit; ++i)\n#define reps(i, b, e) for (intmax_t i = (b), i##_limit = (e); i <= i##_limit; ++i)\n#define repr(i, b, e) for (intmax_t i = (b), i##_limit = (e); i >= i##_limit; --i)\n#define var(Type, ...) Type __VA_ARGS__; input(__VA_ARGS__)\n\nconstexpr size_t    operator\"\"_zu(unsigned long long value) { return value; };\nconstexpr intmax_t  operator\"\"_jd(unsigned long long value) { return value; };\nconstexpr uintmax_t operator\"\"_ju(unsigned long long value) { return value; };\n\nconstexpr int INF = 0x3f3f3f3f;\nconstexpr intmax_t LINF = 0x3f3f3f3f3f3f3f3f_jd;\n\ntemplate <class T, class Compare = less<>>\nusing MaxHeap = priority_queue<T, vector<T>, Compare>;\ntemplate <class T, class Compare = greater<>>\nusing MinHeap = priority_queue<T, vector<T>, Compare>;\n\ninline void input() {}\ntemplate <class Head, class... Tail>\ninline void input(Head&& head, Tail&&... tail) {\n    cin >> head;\n    input(forward<Tail>(tail)...);\n}\n\ntemplate <class T>\ninline istream& operator>>(istream &is, vector<T> &vec) {\n    for (auto &e: vec) {\n        is >> e;\n    }\n    return is;\n}\n\ninline void output() { cout << \"\\n\"; }\ntemplate <class Head, class... Tail>\ninline void output(Head&& head, Tail&&... tail) {\n    cout << head;\n    if (sizeof...(tail)) {\n        cout << \" \";\n    }\n    output(forward<Tail>(tail)...);\n}\n\ntemplate <class T>\ninline ostream& operator<<(ostream &os, const vector<T> &vec) {\n    static constexpr const char *delim[] = {\" \", \"\"};\n    for (const auto &e: vec) {\n        os << e << delim[&e == &vec.back()];\n    }\n    return os;\n}\n\ntemplate <class T>\ninline vector<T> makeVector(const T &initValue, size_t sz) {\n    return vector<T>(sz, initValue);\n}\n\ntemplate <class T, class... Args>\ninline auto makeVector(const T &initValue, size_t sz, Args... args) {\n    return vector<decltype(makeVector<T>(initValue, args...))>(sz, makeVector<T>(initValue, args...));\n}\n\ntemplate <class Func>\nclass FixPoint : Func {\npublic:\n    explicit constexpr FixPoint(Func&& f) noexcept : Func(forward<Func>(f)) {}\n\n    template <class... Args>\n    constexpr decltype(auto) operator()(Args&&... args) const {\n        return Func::operator()(*this, std::forward<Args>(args)...);\n    }\n};\n\ntemplate <class Func>\nstatic inline constexpr decltype(auto) makeFixPoint(Func&& f) noexcept {\n    return FixPoint<Func>{forward<Func>(f)};\n}\n\ntemplate <class Container>\nstruct reverse_t {\n    Container &c;\n    reverse_t(Container &c) : c(c) {}\n    auto begin() { return c.rbegin(); }\n    auto end() { return c.rend(); }\n};\n\ntemplate <class Container>\nauto reversed(Container &c) {\n    return reverse_t<Container>(c);\n}\n\ntemplate <class T>\ninline bool chmax(T &a, const T &b) noexcept {\n    return b > a && (a = b, true);\n}\n\ntemplate <class T>\ninline bool chmin(T &a, const T &b) noexcept {\n    return b < a && (a = b, true);\n}\n\ntemplate <class T>\ninline T diff(const T &a, const T &b) noexcept {\n    return a < b ? b - a : a - b;\n}\n// End Header }}}\n\n// Geometry {{{\nconst long double EPS = 1e-10;\nconst long double PI = acos(-1);\n\nstruct Real {\n    long double x;\n\n    Real(long double x = 0) : x(x) {}\n    Real(const Real& rhs) { x = rhs.x; }\n\n    Real operator+(const Real& rhs) const { return Real(x + rhs.x); }\n    Real& operator+=(const Real& rhs) { return x += rhs.x, *this; }\n    Real operator-(const Real& rhs) const { return Real(x - rhs.x); }\n    Real& operator-=(const Real& rhs) { return x -= rhs.x, *this; }\n    Real operator*(const Real& rhs) const { return Real(x * rhs.x); }\n    Real& operator*=(const Real& rhs) { return x *= rhs.x, *this; }\n    Real operator/(const Real& rhs) const { return Real(x / rhs.x); }\n    Real& operator/=(const Real& rhs) { return x /= rhs.x, *this; }\n    Real operator-() const { return Real(-x); }\n    Real& operator++() { return ++x, *this; }\n    Real& operator--() { return --x, *this; }\n    Real operator++(int) { Real tmp(x); return ++x, tmp; }\n    Real operator--(int) { Real tmp(x); return --x, tmp; }\n    bool operator==(const Real& rhs) const { return fabs(x - rhs.x) < EPS; }\n    bool operator!=(const Real& rhs) const { return !(*this == rhs); }\n    bool operator<(const Real& rhs) const { return (*this == rhs) ? false : x < rhs.x; }\n    bool operator>(const Real& rhs) const { return (*this == rhs) ? false : x > rhs.x; }\n    bool operator<=(const Real& rhs) const { return (*this == rhs) ? true : x < rhs.x; }\n    bool operator>=(const Real& rhs) const { return (*this == rhs) ? true : x > rhs.x; }\n\n    friend istream& operator>>(istream& is, Real& rhs) {\n        is >> rhs.x;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Real& rhs) {\n        os << rhs.x;\n        return os;\n    }\n\n    friend Real pow(const Real& n, const Real& p) { return pow(n.x, p.x); }\n    friend Real pow(Real n, intmax_t p) {\n        Real ret = 1;\n        for (; p > 0; p >>= 1) {\n            if (p & 1) ret *= n;\n            n *= n;\n        }\n        return ret;\n    }\n    friend Real abs(const Real& rhs) { return abs(rhs.x); }\n    friend Real sin(const Real& rhs) { return sin(rhs.x); }\n    friend Real cos(const Real& rhs) { return cos(rhs.x); }\n    friend Real tan(const Real& rhs) { return tan(rhs.x); }\n    friend Real asin(const Real& rhs) { return asin(rhs.x); }\n    friend Real acos(const Real& rhs) { return acos(rhs.x); }\n    friend Real atan(const Real& rhs) { return atan(rhs.x); }\n    friend Real atan2(const Real& lhs, const Real& rhs) { return atan2(lhs.x, rhs.x); }\n    friend Real sqrt(const Real& rhs) { return sqrt(rhs.x); }\n    friend Real ceil(const Real& rhs) { return ceil(rhs.x); }\n    friend Real floor(const Real& rhs) { return floor(rhs.x); }\n    friend Real round(const Real& rhs) { return round(rhs.x); }\n};\n\nusing real_t = Real;\n\nstruct Point {\n    real_t x, y;\n\n    Point(real_t x = 0, real_t y = 0) : x(x), y(y) {}\n\n    Point operator+(const Point& rhs) const { return Point(x + rhs.x, y + rhs.y); }\n    Point operator-(const Point& rhs) const { return Point(x - rhs.x, y - rhs.y); }\n    Point operator*(const real_t& rhs) const { return Point(x * rhs, y * rhs); }\n    Point operator/(const real_t& rhs) const { return Point(x / rhs, y / rhs); }\n    Point operator-() const { return Point(-x, -y); }\n    bool operator==(const Point& rhs) const { return x == rhs.x && y == rhs.y; }\n    bool operator!=(const Point& rhs) const { return !(*this == rhs); }\n    bool operator<(const Point& rhs) const { return (x == rhs.x) ? y < rhs.y : x < rhs.x; }\n    bool operator>(const Point& rhs) const { return (x == rhs.x) ? y > rhs.y : x > rhs.x; }\n    bool operator<=(const Point& rhs) const { return (*this == rhs) ? true : *this < rhs; }\n    bool operator>=(const Point& rhs) const { return (*this == rhs) ? true : *this > rhs; }\n\n    real_t norm() const { return x * x + y * y; }\n    real_t len() const { return sqrt(norm()); }\n\n    friend real_t dist(const Point& lhs, const Point& rhs) {\n        Point delta = lhs - rhs;\n        return delta.len();\n    }\n    friend real_t dot(const Point& lhs, const Point& rhs) {\n        return lhs.x * rhs.x + lhs.y * rhs.y;\n    }\n    friend real_t cross(const Point& lhs, const Point& rhs) {\n        return lhs.x * rhs.y - lhs.y * rhs.x;\n    }\n\n    friend istream& operator>>(istream& is, Point& rhs) {\n        is >> rhs.x >> rhs.y;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Point& rhs) {\n        os << rhs.x << ' ' << rhs.y;\n        return os;\n    }\n};\n\nusing Vector = Point;\n\nstruct Segment {\n    Point s, e;\n\n    Segment(Point s = Point(), Point e = Point()) : s(s), e(e) {}\n\n    bool operator==(const Segment& rhs) const { return s == rhs.s && e == rhs.e; }\n    bool operator!=(const Segment& rhs) const { return !(*this == rhs); }\n    real_t len() const { return dist(s, e); }\n\n    friend istream& operator>>(istream& is, Segment& rhs) {\n        is >> rhs.s >> rhs.e;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Segment& rhs) {\n        os << rhs.s << ' ' << rhs.e;\n        return os;\n    }\n};\n\nusing Line = Segment;\n\nbool parallel(const Vector& a, const Vector& b) {\n    return cross(a, b) == 0.0;\n}\nbool parallel(const Point& a1, const Point& a2, const Point& b1, const Point& b2) {\n    return parallel(a1 - a2, b1 - b2);\n}\nbool parallel(const Segment& s1, const Segment& s2) {\n    return parallel(s1.s, s1.e, s2.s, s2.e);\n}\n\nbool orthogonal(const Vector& a, const Vector& b) {\n    return dot(a, b) == 0.0;\n}\nbool orthogonal(const Point& a1, const Point& a2, const Point& b1, const Point& b2) {\n    return orthogonal(a1 - a2, b1 - b2);\n}\nbool orthogonal(const Segment& s1, const Segment& s2) {\n    return orthogonal(s1.s, s1.e, s2.s, s2.e);\n}\n// }}}\n\nsigned main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.setf(ios_base::fixed);\n    cout.precision(10);\n\n    var(size_t, Q);\n\n    while (Q--) {\n        var(Line, s1, s2);\n        if (parallel(s1, s2)) {\n            output(2);\n        } else if (orthogonal(s1, s2)) {\n            output(1);\n        } else {\n            output(0);\n        }\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#define eps 1e-9\n#define double long long\nusing namespace std;\nstruct point{\n\tdouble x,y;\n\tvoid read(){scanf(\"%lld%lld\",&x,&y);}\n\tvoid write(){printf(\"%.9f %.9f\\n\",x,y);}\n\tpoint(double X=0.0,double Y=0.0):x(X),y(Y){}\n\tpoint operator +(const point a)const{return point(x+a.x,y+a.y);}\n\tpoint operator -(const point a)const{return point(x-a.x,y-a.y);}\n\tpoint operator *(double a)const{return point(x*a,y*a);}\n\tpoint operator /(double a)const{return point(x/a,y/a);} \n};\ndouble dis(point a){return a.x*a.x+a.y*a.y;}\ndouble dot(point a,point b){return a.x*b.x+a.y*b.y;}\ndouble cross(point a,point b){return a.x*b.y-a.y*b.x;}\nshort int jiao(point a,point b)//2:px 1:cz 0:other\n{\n\tif(cross(a,b)==0) return 2;\n\tif(dot(a,b)==0) return 1;\n\treturn 0;\n}\npoint p1,p2,p3,p4;\nint main()\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tp1.read();p2.read();p3.read();p4.read();\n\t\tprintf(\"%d\\n\",jiao(p2-p1,p4-p3));\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nnamespace LCY{\n\t#define double long double\n\tconst double EPS=1e-10;\n\tinline int dcmp(double x){if(fabs(x)<EPS)return 0;return (x<0)?-1:1;}\n\tstruct Point{double x,y;Point(double _x=0,double _y=0){x=_x;y=_y;}};\n\tstruct Vector{double x,y;Vector(double _x=0,double _y=0){x=_x;y=_y;}};\n\t\n\tVector operator - (Point a,Point b){return Vector(a.x-b.x,a.y-b.y);}\n\tVector operator * (Vector a,double d){return Vector(a.x*d,a.y*d);}\n\tPoint operator + (Point a,Vector b){return Point(a.x+b.x,a.y+b.y);}\n\t\n\tinline double dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\n\tinline double cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\n\tinline double norm(Vector a){return dot(a,a);}\n\t\n\tstruct Line{\n\t\tPoint p1,p2;\n\t\tLine(Point _p1=Point(0,0),Point _p2=Point(0,0)){p1=_p1;p2=_p2;}\n\t};\n\tinline bool is_parallel(Line l1,Line l2){\n\t\treturn dcmp(cross(l2.p2-l2.p1,l1.p2-l1.p1))==0;\n\t}\n\tinline bool is_vertical(Line l1,Line l2){\n\t\treturn dcmp(dot(l2.p2-l2.p1,l1.p2-l1.p1))==0;\n\t}\n\t\n\tPoint project(Line l,Point p){\n\t\tVector base=l.p2-l.p1;\n\t\tdouble r=dot(p-l.p1,base)/norm(base);\n\t\treturn l.p1+base*r;\n\t}\n\tPoint reflect(Line l,Point p){\n\t\tPoint q=project(l,p);\n\t\tVector v=p-q;v.x=-v.x;v.y=-v.y;\n\t\treturn q+v;\n\t}\n\tint ccw(Vector v1,Vector v2){\n\t\tif(dcmp(cross(v1,v2))>0)return 1;//COUNTER_CLOCKWISE\n\t\telse if(dcmp(cross(v1,v2))<0)return 2;//CLOCKWISE\n\t\telse{\n\t\t\tif(dcmp(dot(v1,v2))<0)return 3;//ONLINE_BACK\n\t\t\telse{\n\t\t\t\tif(dcmp(norm(v1)-norm(v2))<0)return 4;//ONLINE_FRONT\n\t\t\t\telse return 5;//ON_SEGMENT\n\t\t\t}\n\t\t}\n\t}\n}\nusing namespace LCY;\nint main(){\n\tint n;cin>>n;while(n--){\n\t\tPoint p1,p2;cin>>p1.x>>p1.y>>p2.x>>p2.y;\n\t\tLine l1=Line(p1,p2);\n\t\tcin>>p1.x>>p1.y>>p2.x>>p2.y;\n\t\tLine l2=Line(p1,p2);\n\t\tif(is_parallel(l1,l2))cout<<2<<endl;\n\t\telse if(is_vertical(l1,l2))cout<<1<<endl;\n\t\telse cout<<0<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\n#define db double\n#define zero(x) (fabs(x)<eps)\n#define sgn(x) (zero(x)?0:((x)>0?1:-1))\nconst db eps=1e-10;\nstruct point{\n    db x,y;\n    point(){}\n    point(db x,db y):x(x),y(y){}\n    point operator + (point B){ return point(x+B.x,y+B.y); }\n    point operator - (point B){ return point(x-B.x,y-B.y); }\n    point operator * (db k){ return point(k*x,k*y); }\n    db operator * (point B){ return x*B.y-y*B.x; }\n    db operator ^ (point B){ return x*B.x+y*B.y; }\n    bool operator < (point B){ return (y>0)!=(B.y>0)?y>0:((*this)*B)>0; }\n};\ndb dis2(point A,point B){ return (A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y); }\nstruct line{\n    point A,B;\n    line(){}\n    line(point A,point B):A(A),B(B){}\n};\npoint projection(line l,point P){\n    point dir=l.B-l.A; P=P-l.A;\n    return dir*((P^dir)/dis2(l.A,l.B))+l.A;\n}\npoint reflection(line l,point P){\n    return projection(l,P)*2-P;\n}\nint direction(point P0,point P1,point P2){\n    db det=(P2-P0)*(P1-P0); return sgn(det);\n}\nbool parallel(line l1,line l2){\n    return zero((l1.B-l1.A)*(l2.B-l2.A));\n}\nbool orthogonal(line l1,line l2){\n    return zero((l1.B-l1.A)^(l2.B-l2.A));\n}\nint main(){\n    int q; scanf(\"%d\",&q);\n    while (q--){\n        db x1,y1,x2,y2; line l1,l2;\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2); l1=line(point(x1,y1),point(x2,y2));\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2); l2=line(point(x1,y1),point(x2,y2));\n        printf(\"%d\\n\",parallel(l1,l2)?2:orthogonal(l1,l2));\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//\n// Created by 李青坪 on 2018/11/27.\n//\n\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <set>\n\n#define EPSLON 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPSLON)\n\n#define MAXN 10000\n#define NIL -1\nusing namespace std;\n\n// 点\nclass Point {\npublic:\n    double x;\n    double y;\n\n    Point(){}\n    Point(double x, double y) : x(x), y(y) {}\n\n    Point operator+(Point &a) {\n        return Point(x + a.x, y + a.y);\n    }\n\n    Point operator-(Point &a) {\n        return Point(x - a.x, y - a.y);\n    }\n\n    Point operator*(Point &a) {\n        return Point(x * a.x, y * a.y);\n    }\n\n    Point operator/(Point &a) {\n        return Point(x / a.x, y / a.y);\n    }\n\n    double norm() {\n        return x * x + y * y;\n    }\n\n    double absVector() {\n        return sqrt(norm());\n    }\n\n    bool operator==(Point &a) const {\n        return equals(x, a.x) && equals(y, a.y);\n    }\n};\n\ntypedef Point Vector;\n\n// 线段\nclass Segment {\npublic:\n    Point a, b;\n};\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nint n;\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.a - s1.b, s2.a - s2.b), 0.0);\n}\n\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.a - s1.b, s2.a - s2.b), 0.0);\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    Segment s[2];\n    Point p[4];\n    for (int i = 0; i < n; ++i) {\n        double x, y;\n        for (int j = 0; j < 4; ++j) {\n            scanf(\"%lf %lf\", &x, &y);\n            p[j] = Point(x, y);\n        }\n        s[0].a = p[0];\n        s[0].b = p[1];\n        s[1].a = p[2];\n        s[1].b = p[3];\n        if (isParallel(s[0], s[1])){\n            printf(\"%d\\n\", 2);\n        } else if (isOrthogonal(s[0], s[1])){\n            printf(\"%d\\n\", 1);\n        } else{\n            printf(\"%d\\n\", 0);\n        }\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\nint q;\nstruct point\n{\n    double x,y;\n};\npoint vt(point a,point b)\n{\n    point vt;\n    vt.x=b.x-a.x;\n    vt.y=b.y-a.y;\n    return vt;\n}\nvoid test(point a,point b)\n{\n    if (a.x*b.y==a.y*b.x) cout<<2<<endl;\n    else if (a.x*b.x+a.y*b.y==0) cout<<1<<endl;\n    else cout<<0<<endl;\n}\nint main()\n{\n    cin>>q;\n    while (q--)\n    {\n        point p0,p1,p2,p3;\n        cin>>p0.x>>p0.y>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y;\n        point p01=vt(p0,p1);\n        point p23=vt(p2,p3);\n        test(p01,p23);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) begin(r),end(r)\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n#define vvl(v,w,h,init) vector<vector<ll>> v(w,vector<ll>(h,init))\n#define mp(a,b) make_pair(a,b)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\nusing pii = pair<int,int> ;\nusing pll = pair<ll,ll> ;\n\ntemplate<typename T>\nvoid O(T t){\n  cout << t << endl;\n}\n\n  const double EPS = 1e-8;\n  const double INF = 1e12;\n  typedef complex<double> P;//????´???°????????¢?????????????????¨?§£???\n  namespace std {\n    bool operator < (const P& a, const P& b) {//x????????????\n      return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n    bool sorty(const P& a, const P& b) {//y????????????\n      return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b);\n    }\n  }\n  double cross(const P& a, const P& b) {//??????\n    return imag(conj(a)*b);\n  }\n  double dot(const P& a, const P& b) {//??????\n    return real(conj(a)*b);\n  }\n\n  struct L : public vector<P> {//??´???\n    L(){};\n    L(const P &a, const P &b) {\n      push_back(a); push_back(b);\n    }\n  };\n\n  typedef vector<P> G;\n\n  struct C {//???\n    P p; double r;\n    C(){};\n    C(const P &p, double r) : p(p), r(r) { }\n  };\n\nint linejudge(const L &ab,const L &cd){\n  P a = ab[1] - ab[0],b = cd[1] - cd[0];\n  if(cross(a,b) < EPS){ // parallel\n    return 2;\n  }\n  else if(dot(a,b) < EPS){ //Orthogonal\n    return 1;\n  }\n  return 0;\n}\n\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  ll q;\n  cin >> q;\n  double x,y;\n  rep(i,q){\n    cin >> x >> y;\n    P a(x,y);\n    cin >> x >> y;\n    P b(x,y);\n    cin >> x >> y;\n    P c(x,y);\n    cin >> x >> y;\n    P d(x,y);\n    L ab(a,b),cd(c,d);\n    std::cout << linejudge(ab,cd) << std::endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i, n) for(int i=0;i<(n);++i)\n#define per(i, n) for(int i=(n)-1;i>=0;--i)\n#define repa(i, n) for(int i=1;i<(n);++i)\n#define foreach(i, n) for(auto &i:(n))\n#define pii pair<int, int>\n#define pll pair<long long, long long>\n#define all(x) (x).begin(), (x).end()\n#define bit(x) (1ll << (x))\nusing namespace std;\nusing ll = long long;\nconst ll MOD = (ll)1e9+7;\n//const ll MOD = 998244353;\n//const ll MOD = 924844033;\nconst int INF = (ll)1e9+7;\nconst ll INFLL = (ll)1e18;\nusing namespace std;\ntemplate<class t>\nusing vvector = vector<vector<t>>;\ntemplate<class t>\nusing vvvector = vector<vector<vector<t>>>;\ntemplate<class t>\nusing priority_queuer = priority_queue<t, vector<t>, greater<t>>;\ntemplate<class t, class u> bool chmax(t &a, u b){if(a<b){a=b;return true;}return false;}\ntemplate<class t, class u> bool chmin(t &a, u b){if(a>b){a=b;return true;}return false;}\n\n#ifdef DEBUG\n#define OUTPUT(x) (output(x), outendl())\n#else\n#define OUTPUT(x) (void)0\n#endif\n\nll modpow(ll x, ll b){\n\tll res = 1;\n\twhile(b){\n\t\tif(b&1)res = res * x % MOD;\n\t\tx = x * x % MOD;\n\t\tb>>=1;\n\t}\n\treturn res;\n}\n\nll modinv(ll x){\n\treturn modpow(x, MOD-2);\n}\n\nbool was_output = false;\ntemplate<class t>\nvoid output(t a){\n\tif(was_output)cout << \" \";\n\tcout << a;\n\twas_output = true;\n}\nvoid outendl(){\n\twas_output = false;\n\tcout << endl;\n}\n\n//below here\n\n\ntemplate<class t>\nclass Vector2{\n\tpublic:\n\t\tt x;\n\t\tt y;\n\t\tVector2():x(0), y(0){}\n\t\tVector2(t a, t b):x(a), y(b){}\n\t\tVector2(const Vector2 &o):x(o.x), y(o.y){}\n\n\t\tVector2& operator+=(Vector2 o){x+=o.x;y+=o.y;return *this;}\n\t\tVector2& operator-=(Vector2 o){x-=o.x;y-=o.y;return *this; }\n\t\tVector2& operator*=(t o){x*=o;y*=o;return *this;}\n\t\tVector2& operator/=(t o){x/=o;y/=o;return *this;}\n\n\t\tVector2 operator+(Vector2 o){return Vector2(*this)+=o;}\n\t\tVector2 operator-(Vector2 o){return Vector2(*this)-=o;}\n\t\tVector2 operator*(t o){return Vector2(*this)*=o;}\n\t\tVector2 operator/(t o){return Vector2(*this)/=o;}\n\n\t\tdouble abs(){\n\t\t\treturn sqrt(x*x+y*y);\n\t\t}\n\n\t\tVector2 normal(){\n\t\t\treturn (*this) / abs();\n\t\t}\n};\n\ntemplate<class t>\ndouble abs(Vector2<t> x){\n\treturn x.abs();\n}\n\ntemplate<class t>\ndouble dot(Vector2<t> x, Vector2<t> y){\n\treturn x.x * y.x + x.y * y.y;\n}\n\ntemplate<class t>\ndouble cross(Vector2<t> x, Vector2<t> y){\n\treturn x.x * y.y - x.y * y.x;\n}\n\ntemplate<class t>\nvoid output(Vector2<t> x){\n\tprintf(\"%lf %lf\\n\", x.x, x.y);\n}\n\n\ntemplate<class t>\nclass straight_line{\n\tpublic:\n\t\tusing vector2 = Vector2<t>;\n\t\tvector2 f;\n\t\tvector2 s;\n\t\tstraight_line(){\n\t\t\tf = vector2(0,0);\n\t\t\ts = vector2(1,0);\n\t\t}\n\t\tstraight_line(vector2 a,vector2 b){\n\t\t\tf = a;\n\t\t\ts = b;\n\t\t}\n\n\t\tvector2 projection(vector2 pos){\n\t\t\tpos -= f;\n\t\t\tvector2 n = (s-f).normal();\n\t\t\tvector2 res;\n\t\t\tres = n * dot(pos,n) + f;\n\t\t\treturn res;\n\t\t}\n\n\t\tvector2 reflection(vector2 pos){\n\t\t\tvector2 n;\n\t\t\tvector2 res;\n\t\t\tpos -= f;\n\t\t\tt x = f.y-s.y;\n\t\t\tt y = s.x-f.x;\n\t\t\tn = vector2(x,y).normal();\n\t\t\tres = pos + f - n * dot(pos,n) * 2;\n\t\t\treturn res;\n\t\t}\n};\n\nusing vector2 = Vector2<ll>;\n\nvector2 input_vector2(){\n\tdouble x,y;\n\tcin >> x >> y;\n\treturn vector2(x,y);\n}\n\ntemplate<class t>\nint cross_type(straight_line<t> a,straight_line<t> b){\n\tvector2 ap = a.s - a.f;\n\tvector2 bp = b.s - b.f;\n\tif(dot(ap,bp)==0)return 1;\n\tif(cross(ap,bp)==0)return 2;\n\treturn 0;\n}\n\nint func(){\n\tstraight_line<ll> a,b;\n\ta.f = input_vector2();\n\ta.s = input_vector2();\n\tb.f = input_vector2();\n\tb.s = input_vector2();\n\treturn cross_type(a,b);\n}\n\nint main(){\n\tint q;\n\tcin >> q;\n\trep(i,q){\n\t\tcout << func() << endl;\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS 1e-10\n#define equal(a,b) (fabs(a-b) < EPS)\n\nstruct Point{\n  double x,y;\n\n  Point(double x = 0,double y = 0) : x(x), y(y) {}\n\n  Point operator + (const Point &p)const{\n    return Point(x + p.x , y + p.y);\n  }\n\n  Point operator - (const Point &p)const{\n    return Point(x - p.x , y - p.y);\n  }\n\n  Point operator * (const double &k)const{\n    return Point(x * k , y * k);\n  }\n\n  Point operator / (const double &k)const{\n    return Point(x / k , y / k);\n  }\n\n  bool operator < (const Point &p)const{\n    if(x != p.x) return x < p.x;\n    else return y < p.y;\n  }\n\n  double dot(const Point &p)const{\n    return x*p.x + y*p.y;\n  }\n\n  double cross(const Point &p)const{\n    return x*p.y - p.x*y;\n  }\n\n  double dist(const Point &p)const{\n    return sqrt(pow(x-p.x,2) + pow(y-p.y,2));\n  }\n\n  double norm(){\n    return x*x + y*y;\n  }\n\n  double Abs(){\n    return sqrt(norm());\n  }\n};\n\ntypedef Point Vector;\n\nstruct Line{\n  Vector s,t;\n \n  Line(){}\n  Line(Vector s, Vector t) : s(s), t(t) {}\n\n  bool isOrthogonal(Line &l){\n    Vector a = t - s;\n    Vector b = l.t - l.s;\n    if(equal(a.dot(b),0.0)){\n      return true;\n    }else{\n      return false;\n    }\n  }\n\n  bool isParallel(Line &l){\n    Vector a = t - s;\n    Vector b = l.t - l.s;\n    if(equal(a.cross(b),0.0)){ \n      return true; \n    }else{\n      return false;\n    }\n  }\n\n  Point Projection(Point &p){\n    Vector u = t - s;\n    double v = u.dot(p - s) / u.norm();\n    return s + u * v;\n  }\n\n  Point CrossPoint(Line &l){\n    Vector v = l.t - l.s;\n    double a = abs(v.cross(s-l.s));\n    double b = abs(v.cross(t-l.s));\n    double c = a / (a + b);\n    return s + (t - s) * c;\n  }\n\n  Point Reflection(Point &p){\n    return p + (Projection(p) - p) * 2.0;\n  }\n};\n\nint main(){\n  int Q;\n  cin >> Q;\n  while(Q--){\n    Line s1,s2;\n    cin >> s1.s.x >> s1.s.y >> s1.t.x >> s1.t.y;\n    cin >> s2.s.x >> s2.s.y >> s2.t.x >> s2.t.y;\n    if(s1.isOrthogonal(s2)){\n      cout << 1 << endl;\n    }else if(s1.isParallel(s2)){\n      cout << 2 << endl;\n    }else{\n      cout << 0 << endl;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<climits>\n#include<ctime>\n#include<cstring>\n#include<numeric>\n\n#include<algorithm>\n#include<array>\n#include<cmath>\n#include<vector>\n\n#define ALL(v) (v).begin(),(v).end()\n#define REP(i,p,n) for(int i=p;i<(int)(n);++i)\n#define rep(i,n) REP(i,0,n)\n#define dump(a) (cerr << #a << \"=\" << (a) << endl)\n#define DUMP(list) cout << \"{ \"; for(auto nth : list){ cout << nth << \" \"; } cout << \"}\" << endl;\n\nusing namespace std;\n\ntypedef double Real;\nconst Real EPS = 1e-8;\nint sign(Real d) { return d > EPS ? 1 : d < -EPS ? -1 : 0; }\n\n//define class ...\n\nstruct Point {\n\tReal x, y;\n\tPoint(Real x_ = 0, Real y_ = 0):x(x_), y(y_) {}\n\n\tPoint operator+(const Point &p) const {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(const Point &p) const {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator*(Real s) const {\n\t\treturn Point(x * s, y * s);\n\t}\n\n\tPoint operator/(Real s) const {\n\t\treturn Point(x / s, y / s);\n\t}\n\n\tbool operator<(const Point &p) const {\n\t\treturn sign(x - p.x) == -1 || (sign(x - p.x) == 0 && sign(y - p.y) == -1);\n\t}\n\n\tbool operator==(const Point &p) const {\n\t\treturn sign(x - p.x) == 0 && sign(y - p.y) == 0;\n\t}\n};\n\nstruct Line : public array<Point, 2> { //??????\n\tLine(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Segment : public array<Point, 2> { //??´???\n\tSegment(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Circle {\n\tPoint c;\n\tPoint r;\n\tCircle(const Point &c_, Real r_): c(c_), r(r_) {}\n};\n\ntypedef vector<Point> Polygon;\n\n// define function\nPoint rotate90(const Point &p) { // ???????¨???¨???\n\treturn Point(-p.y, p.x);\n}\n\nPoint rotate(const Point &p, Real theta) {\n\tconst Real s = sin(theta), c = cos(theta);\n\treturn Point(c * p.x - s * p.y, s * p.x + c * p.y);\n}\n\nReal angle(const Point &p) {\n\treturn atan2(p.y, p.x);\n}\n\nReal norm(const Point &p) {\n\treturn p.x * p.x + p.y * p.y;\n}\n\nReal abs(const Point &p) {\n\treturn sqrt(norm(p));\n}\n\nReal dot(const Point &a, const Point &b) { // ??????\n\treturn a.x * b.x + a.y * b.y;\n}\n\nReal cross(const Point &a, const Point &b) { // ??????\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// define app function\n\nbool is_parallel(const Line &a, const Line &b) {\n\treturn sign( cross(a[1] - a[0], b[1] - b[0]) ) == 0; \n}\n\nbool is_orthogonal(const Line &a, const Line &b) {\n\treturn sign( dot(a[1] - a[0], b[1] - b[0]) ) == 0; \n}\n\nint main() {\n\tint n;\n\tcin >> n;\n\t\n\tvector<Point> p(4, Point(0, 0));\t\n\trep(i, n) {\n\t\trep(j, 4) {\n\t\t\tcin >> p[j].x >> p[j].y;\n\t\t}\n\t\t\n\t\tint ans = 0;\n\t\tconst Line a(p[0], p[1]), b(p[2], p[3]);\n\t\tif(is_parallel(a, b)) {\n\t\t\tans = 2;\n\t\t}\n\t\telse if(is_orthogonal(a, b)) {\n\t\t\tans = 1;\n\t\t}\n\t\telse {\n\t\t\tans = 0;\n\t\t}\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\npublic:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n};\n\ntypedef Point Vector;\n\nstruct Segment{\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nbool isOrthogonal(Vector a, Vector b){\n  return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n  return equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\nbool isOrthogonal(Segment s1, Segment s2){\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n  return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n  return equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\nbool isParallel(Segment s1, Segment s2){\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nint main(void){\n  int q;\n  int x0, y0, x1, y1, x2, y2, x3, y3;\n  cin >> q;\n  for(int i = 0; i < q; i++){\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n    Point *p0 = new Point(x0, y0);\n    Point *p1 = new Point(x1, y1);\n    Point *p2 = new Point(x2, y2);\n    Point *p3 = new Point(x3, y3);\n    if(isOrthogonal(*p0, *p1, *p2, *p3)) cout << 1 << endl;\n    else if(isParallel(*p0, *p1, *p2, *p3)) cout << 2 << endl;\n    else cout << 0 << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <math.h>\n\nusing namespace std;\n\nclass Point {\npublic:\n    int _x, _y;\n    Point(int x, int y): _x(x), _y(y){}\n    Point(const Point& a): _x(a._x), _y(a._y){}\n\n    Point operator+(const Point& a){\n        return Point(_x - a._x, _y - a._y);\n    }\n    Point operator-(const Point& a){\n        return Point(_x - a._x, _y - a._y);\n    }\n    void operator=(const Point& a){\n        _x = a._x;\n        _y = a._y;\n    }\n    double dot(const Point& a){\n        return (_x*a._x + _y*a._y);\n    }\n};\n\nbool isParallel(Point x1, Point x2){\n    return ( x1._x * x2._y - x1._y*x2._x == 0 );\n}\n\ntypedef Point Vec;\n\nint main(){\n    int q;\n\n    scanf(\"%d\",&q);\n    for(int i=0; i<q; ++i){\n        int ax,ay,bx,by,cx,cy,dx,dy;\n        scanf(\"%d %d %d %d %d %d %d %d\",&ax,&ay,&bx,&by,&cx,&cy,&dx,&dy);\n        Vec a(ax,ay), b(bx,by), c(cx,cy), d(dx,dy);\n        Vec x1(a-b), x2(c-d);\n        if( (int)x1.dot(x2) ==0 ){\n            cout << 1 << endl;\n        }\n        else if(isParallel(x1,x2)){\n            cout << 2 << endl;\n        }\n        else{\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "//Parallel/Orthogonal\n//#include<bits/stdc++.h>\n//#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<vector>\n//#include<random>\n#include<cstdlib>\n#include<ctime>\n#include<fstream>\n#include<map>\n#include<stack>\n#include<queue>\n#define FAST ios::sync_with_stdio(false)\n#define DEV_RND ((int)rand()*RAND_MAX+rand())\n#define RND(L,R) (DEV_RND%((R)-(L)+1)+(L))\n//#define abs(a) ((a)>=0?(a):-(a))\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define mem(a,b) memset(a,b,sizeof(a))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\n#define rep(i,a,n) for(int i=a;i<n;++i)\n#define repn(i,a,n,t) for(int i=a;i<n;i+=t)\n#define per(i,n,a) for(int i=n-1;i>=a;--i)\n#define pern(i,n,a,t) for(int i=n-1;i>=a;i-=t)\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\n#define li inline\n#define re register\nusing namespace std;\n//typedef uniform_int_distribution<int> RNDI;\ntypedef pair<int,int> PII;\ntypedef vector<int> VI;\ntypedef double db;\ntypedef long long ll;\ntypedef long double ld;\nconst int maxn = 1e5+5;\nconst int maxm = 100000+5;\nconst int inf=0x3f3f3f3f;\nconst double eps = 1e-9;\nconst double pi=acos(-1);\nconst int mod = 1e9+7;\n//int dir[4][2]={{-1,0},{1,0},{0,-1},{0,1}};\n//li int f(int x){return x==par[x]?par[x]:par[x]=f(par[x]);}\n//mt19937 eng(time(0));\nli ll lowbit(ll x){return x&(-x);}\nll gcd(ll a,ll b){return b?gcd(b,a%b):a;}\n//li int RND(int L,int R){RNDI rnd(L,R);return rnd(eng);}\nvoid ex_gcd(ll a,ll b,ll &d,ll &x,ll &y){if(!b){d=a,x=1,y=0;}else{ex_gcd(b,a%b,d,y,x);y-=x*(a/b);}}//x=(x%(b/d)+(b/d))%(b/d);\nli ll qpow(ll a,ll b,ll MOD=mod){ll res=1;a%=MOD;while(b>0){if(b&1)res=res*a%MOD;a=a*a%MOD;b>>=1;}return res;}\nli ll qmul(ll a,ll b,ll MOD=mod){return (a*b-(ll)((long double)a/MOD*b)*MOD+MOD)%MOD;}\nli ll Qpow(ll a,ll b,ll MOD){ll res=1;while(b>0){if(b&1) res=qmul(res,a,MOD);a=qmul(a,a,MOD);b>>=1;}return res;}\nli ll inv(ll x,ll p){return qpow(x,p-2,p);}\nli ll Jos(ll n,ll k,ll s=1){ll res=0;rep(i,1,n+1) res=(res+k)%i;return (res+s)%n;}\nli void debug(){ofstream fout(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\in.txt\");fout.close();}\nnamespace IO\n{\n\tli int read()\n\t{\n\t\tint x=0,sign=1;char c=getchar();\n\t\twhile(c>'9'||c<'0') {if(c=='-') sign=-1;c=getchar();}\n\t\twhile('0'<=c&&c<='9') x=x*10+c-'0',c=getchar();\n\t\treturn x*sign;\n\t}\n\ttemplate<typename T>\n\tli void write(T x,char t='\\n')\n\t{\n\t\tif(x<0){x=-x;putchar('-');};\n\t\tstatic int sta[25];int top=0;\n\t\tdo{sta[top++]=x%10,x/=10;}while(x);\n\t\twhile(top) putchar(sta[--top]+'0');\n\t\tputchar(t);\n\t}\n}\nusing namespace IO;\n/*-------------head-------------*/\nli int sign(db k){return k<-eps?-1:k>eps;}\nli int cmp(db a,db b){return sign(a-b);}\nli bool inmid(db l,db m,db r){return sign(l-m)*sign(r-m)<=0;}\n//点类 \nstruct P\n{\n\tdb x,y;\n\tP(){}\n\tP(db _x,db _y):x(_x),y(_y){}\n\tP operator + (const P& a) const {return (P){x+a.x,y+a.y};}\n\tP operator - (const P& a) const {return (P){x-a.x,y-a.y};}\n\tP operator * (db a) const {return (P){x*a,y*a};}\n\tP operator / (db a) const {return (P){x/a,y/a};}\n\tbool operator < (const P& a)const\n\t{return cmp(x,a.x)?cmp(x,a.x)==-1:cmp(y,a.y)==-1;}\n\tbool operator == (const P& a)const\n\t{return cmp(x,a.x)==0&&cmp(y,a.y)==0;}\n\tdb alpha(){return atan2(y,x);}\n\tdb abs2(){return x*x+y*y;}\n\tdb abs(){return sqrt(abs2());}\n\tdb disTo(P a){return (*this-a).abs();}\n\tdb dot(P a){return x*a.x+y*a.y;}\n\tdb det(P a){return x*a.y-y*a.x;}\n\tP unit(){return *this/abs();}\n\tP rot(db an){return (P){x*cos(an)-y*sin(an),x*sin(an)+y*cos(an)};}\n\tP rot90(){return (P){-y,x};}\n\tint quad() const {return sign(y)==1||(sign(y)==0&&sign(x)>=0);}\n\tvoid read(){db _x,_y;scanf(\"%lf%lf\",&_x,&_y);x=_x;y=_y;}\n\tvoid write(){printf(\"%.10f %.10f\\n\",x,y);}\n};\nbool angcmp(P a,P b){return a.quad()!=b.quad()?a.quad()<b.quad():sign(a.det(b))==-1;}\nbool inmid(P a,P m,P b){return inmid(a.x,m.x,b.x)&&inmid(a.y,m.y,b.y);}\ndb rad(P a,P b){return atan2l(a.det(b),a.dot(b));}\ndb cro(P q,P p1,P p2){return (p1.x-q.x)*(p2.y-q.y)-(p1.y-q.y)*(p2.x-q.x);}\nint croOp(P q,P p1,P p2){return sign(cro(q,p1,p2));}\n//直线相交 \nbool chkLL(P p1,P p2,P q1,P q2)\n{\n\tdb a1=cro(q1,q2,p1),a2=-cro(q1,q2,p2);\n\treturn sign(a1+a2)!=0;\n}\nP p1,p2,q1,q2;\nint n; \nli void solve()\n{\n\tp1.read(),p2.read();\n\tq1.read(),q2.read();\n\tif(chkLL(p1,p2,q1,q2))\n\t{\n\t\tif((p2-p1).dot(q2-q1)) write(0);\n\t\telse write(1);\n\t}\n\telse write(2);\n\t//puts(\"\");\n}\nint main()\n{\n\t//srand(time(0));debug();\n\t//clock_t start_time=clock();\n\t//freopen(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\in.txt\",\"r\",stdin);\n\tfor(int QwQ=read();QwQ;QwQ--) solve();\n\t//while(~scanf(\"%d\",&n)) solve();\n\t//cerr<<\"Time:\"<<clock()-start_time<<\"ms\\n\";\n\treturn 0;\n} \n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#define EPS (1e-10)\n#define equal(a,b)  fabs((a)-(b))<EPS\nusing namespace std;\nstruct Point{\n\tdouble x,y;\n\tPoint(double _x,double _y):x(_x),y(_y){  }\n\tPoint operator + (Point &a){\n\t\treturn Point(x+a.x,y+a.y);\n\t}\n\tPoint operator - (Point &a){\n\t\treturn Point(x-a.x,y-a.y);\n\t}\n\tPoint operator *(double k){\n\t\treturn Point (k*x,k*y);\n\t}\n\tPoint operator /(double k){\n\t\treturn Point(x/k,y/k);\n\t}\n\t\n\tfriend double norm(Point &a){\n\t\treturn a.x*a.x+a.y*a.y;\n\t}\n\tfriend double abs(Point &a){\n\t\treturn sqrt(norm(a));\n\t}\n\t\n\tfriend double dot(Point &a,Point &b){\n\t\treturn a.x*b.x+a.y*b.y;\n\t}\n\tfriend double cross(Point &a,Point &b){\n\t\treturn fabs(a.x*b.y-b.x*a.y);\n\t}\n};\ntypedef Point Vector;\nbool isOrthogonal(Vector &a,Vector & b){\n\treturn equal(cross(a,b),0.0);\n}\nbool isParallel(Vector &a,Vector &b){\n\treturn equal(dot(a,b),0.0);\n}\n\nint main(){\n\tint q;\n\tcin>>q;\n\twhile(q--){\n\t\tint x1,x2,y1,y2;\n\t\tcin>>x1>>y1>>x2>>y2;\n\t\tVector v1(x1-x2,y1-y2);\n\t\tcin>>x1>>y1>>x2>>y2;\n\t\tVector v2(x1-x2,y1-y2);\n\t\tif(isParallel(v1,v2)) cout<<1<<endl;\n\t\telse if(isOrthogonal(v1,v2)) cout<<2<<endl;\n\t\telse cout<<0<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include <sys/timeb.h>\n#include <fstream>\n\nusing namespace std;\n\n#define repl(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define rep(i,n) repl(i,0,n)\n#define replrev(i,a,b) for(int i=(int)(b)-1;i>=(int)(a);i--)\n#define reprev(i,n) replrev(i,0,n)\n#define repi(itr,ds) for(auto itr=ds.begin();itr!=ds.end();itr++)\n#define all(a) a.begin(),a.end()\n#define mp make_pair\n#define mt make_tuple\n#define INF 2000000000\n#define INFL 1000000000000000000LL\n#define EPS (1e-10)\n#define MOD 1000000007\n#define PI 3.1415926536\n#define RMAX 4294967295\n\ntypedef long long ll;\ntypedef pair<int, int> P;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<bool> vb;\ntypedef vector<char> vc;\ntypedef vector<string> vs;\ntypedef vector<double> vd;\ntypedef vector<P> vP;\ntypedef vector<vector<int> > vvi;\ntypedef vector<vector<bool> > vvb;\ntypedef vector<vector<ll> > vvll;\ntypedef vector<vector<char> > vvc;\ntypedef vector<vector<string> > vvs;\ntypedef vector<vector<double> > vvd;\ntypedef vector<vector<P> > vvP;\ntypedef priority_queue<int, vector<int>, greater<int> > pqli;\ntypedef priority_queue<ll, vector<ll>, greater<ll> > pqlll;\ntypedef priority_queue<P, vector<P>, greater<P> > pqlP;\ntypedef pair<int, pair<int, int> > Edge;\ntypedef vector<Edge> vE;\ntypedef priority_queue<Edge, vector<Edge>, greater<Edge> > pqlE;\n\n#define equals(a,b)(fabs((a)-(b))<EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS&&fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ntypedef vector<Point> Polygon;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) :c(c), r(r) {}\n};\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p1 - s1.p2, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p1 - s1.p2, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n\n// ??????s???????§°?????¨?????????p???????§°???\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n\treturn (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p2 - s.p1, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n\n// ????????????(p0,p1)???????????????p2?????????\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0\n\t\t&& ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n\tdouble base = sqrt(c.r*c.r - (pr - c.c).norm());\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n\ndouble arg(Vector p) {\n\treturn atan2(p.y, p.x);\n}\n\n// ?????¢a???????§?r\nVector polar(double a, double r) {\n\treturn Point(cos(r)*a, sin(r)*a);\n}\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = (c1.c - c2.c).abs();\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n// IN:2, ON:1, OUT:0\nint contain(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p;\n\t\tPoint b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS)return 1;\n\t\tif (a.y > b.y)swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\n// ??????\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tif (s.size() < 3)return s;\n\tsort(s.begin(), s.end());\n\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\t\n\tfor (int i = 2; i < s.size(); i++) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)l.push_back(u[i]);\n\t\n\treturn l;\n}\n\nint main() {\n\tcout << fixed << setprecision(14);\n\tint Q;\n\tcin >> Q;\n\trep(q, Q) {\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tif (isParallel(Point(x0, y0), Point(x1, y1), Point(x2, y2), Point(x3, y3))) {\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse if (isOrthogonal(Point(x0, y0), Point(x1, y1), Point(x2, y2), Point(x3, y3))) {\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct vec{\n    double x,y;\n    vec operator-(vec b){\n        vec& a = *this;\n        vec c;\n        c.x=a.x-b.x;c.y=a.y-b.y;\n        return c;\n    }\n};\n\ndouble inner_product(vec& a, vec& b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble outer_product(vec& a, vec& b){\n    return a.x*b.y-a.y*b.x;\n}\nconst double eps = 0.00001;\nint main(void){\n    vec p0,p1,p2,p3,v1,v2;\n    int q;\n    cin >> q;\n    for(int k=0;k<q;k++){\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        v1=p1-p0; v2=p3-p2;\n        double i,o;\n        i=inner_product(v1,v2);\n        o=outer_product(v1,v2);\n        if(abs(o)<eps){\n            cout << 2 << endl;\n        }else if(abs(i)<eps){\n            cout << 1 << endl;\n        }else{\n            cout << 0 << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <sstream>\n#include <map>\n#include <set>\n#include <cmath>\n\n#define REP(i,k,n) for(int i=k;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define INF 1<<30\n#define pb push_back\n#define mp make_pair\n#define EPS 1e-8\n#define equals(a,b) fabs((a) - (b)) < EPS\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\n\tPoint operator+(const Point &o) const { return Point(x+o.x, y+o.y); }\n\n\tPoint operator-(const Point &o) const { return Point(x-o.x, y-o.y); }\n\n\tPoint operator*(const double m) const { return Point(x*m, y*m); }\n\n\tPoint operator/(const double d) const { return Point(x/d, y/d); }\n\n\tbool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }\n\n\tbool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }\n};\n\nostream& operator << (ostream& os, const Point& p) {\n\tos << \"(\" << p.x << \", \" << p.y << \")\";\n\treturn os;\n}\n\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\ndouble atan(Point p) { return atan2(p.y, p.x); }\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble distancePP(Point p, Point o) { return sqrt(norm(o - p)); }\n\nint ccw(Point a, Point b, Point c) {\n\tb = b-a;\n\tc = c-a;\n\n\tif(cross(b, c) > 0.0) return +1;\t//conter clockwise\n\tif(cross(b, c) < 0.0) return -1;\t//clockwise\n\tif(dot(b, c) < 0.0) return +2;\t//a on Seg(b,c)\n\tif(norm(b) < norm(c)) return -2;\t//b on Seg(a,c)\n\treturn 0;\t//c on Seg(a,b)\n}\n\nstruct Line {\n\tPoint a, b;\n\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\tLine(Point a, Point b) : a(a), b(b) {}\n};\n\nostream& operator << (ostream& os, const Line& l) {\n\tos << \"(\" << l.a.x << \", \" << l.a.y << \")-(\" << l.b.x << \",\" << l.b.y << \")\";\n\treturn os;\n}\n\nbool isOrthogonal(Line l1, Line l2) { return equals(dot((l1.b - l1.a), (l2.b - l2.a)), 0.0); }\nbool isParallel(Line l1, Line l2) { return equals(cross((l1.b - l1.a), (l2.b - l2.a)), 0.0); }\n\nint main() {\n\tint q;\n\tcin >> q;\n\n\tLine l1, l2;\n\trep(i, q) {\n\t\tcin >> l1.a.x >> l1.a.y >> l1.b.x >> l1.b.y >> l2.a.x >> l2.a.y >> l2.b.x >> l2.b.y;\n\n\t\tif(isParallel(l1, l2)) {\n\t\t\tcout << 2 << endl;\n\t\t} else if(isOrthogonal(l1, l2)) {\n\t\t\tcout << 1 << endl;\n\t\t} else {\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <utility>\n\nusing namespace std;\n\nint main(void){\n\n    pair<double, double> p0, p1, p2, p3;\n    int n;\n    cin >> n;\n\n    while(n--){\n\n        cin >> p0.first >> p0.second;\n        cin >> p1.first >> p1.second;\n        cin >> p2.first >> p2.second;\n        cin >> p3.first >> p3.second;\n\n        double innerProduct = (p1.first - p0.first)*(p3.first - p2.first)\n            + (p1.second - p0.second)*(p3.second - p2.second);\n\n        double slope0 = (p1.second - p0.second)/(p1.first - p1.second);\n        double slope1 = (p3.second - p2.second)/(p3.first - p2.second);\n\n        if(slope0 == slope1){\n            cout << \"2\" << endl;\n        }else if(innerProduct == 0 ){\n            cout << \"1\" << endl;\n        }else{\n            cout << \"0\" << endl;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\nstruct Point\n{\n    ll x,y;\n    Point(){ x = y = 0.0; }\n    Point(ll _x, ll _y) : x(_x), y(_y){}\n\n    Point operator+ (Point p)\n    {\n        return Point(p.x + x, p.y + y);\n    }\n\n    Point operator- (Point p)\n    {\n        return Point(x - p.x, y - p.y);\n    }\n\n    ll operator* (Point p)\n    {\n        return p.x * x + p.y * y;\n    }\n\n    Point operator* (ll t)\n    {\n        return Point(x*t, y*t);\n    }\n\n    ll operator~ ()\n    {\n        return x * x + y * y;\n    }\n\n    ll operator% (Point p)\n    {\n        return x * p.y - y * p.x;\n    }\n\n};\n\nint main()\n{\n    Point p0,p1,p2,p3;\n    Point vec, vec1;\n    int q;\n    cin >> q;\n    while(q--)\n    {\n        cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n        vec = (p1 - p0);\n        vec1 = (p3 - p2);\n        if(vec * vec1 == 0) puts(\"1\"); // Cuando el producto punto es 0 son perpendiculares.\n        else if( vec.x * vec1.y == vec1.x * vec.y ) puts(\"2\"); // Cuando esta de la forma n(x,y) paralelo.\n        else puts(\"0\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// includes\n#include <bits/stdc++.h>\n\n// macros\n#define ll long long int\n#define pb emplace_back\n#define mk make_pair\n#define pq priority_queue\n#define FOR(i, a, b) for(int i=(a);i<(b);++i)\n#define rep(i, n) FOR(i, 0, n)\n#define rrep(i, n) for(int i=((int)(n)-1);i>=0;i--)\n#define irep(itr, st) for(auto itr = (st).begin(); itr != (st).end(); ++itr)\n#define irrep(itr, st) for(auto itr = (st).rbegin(); itr != (st).rend(); ++itr)\n#define vrep(v, i) for(int i = 0; i < (v).size(); i++)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) ((int)(x).size())\n#define UNIQUE(v) v.erase(unique(v.begin(), v.end()), v.end())\n#define FI first\n#define SE second\n#define dump(a, n) for(int i = 0; i < n; i++)cout << a[i] << \"\\n \"[i + 1 != n];\n#define dump2(a, n, m) for(int i = 0; i < n; i++)for(int j = 0; j < m; j++)cout << a[i][j] << \"\\n \"[j + 1 != m];\n#define bit(n) (1LL<<(n))\n#define INT(n) int n; cin >> n;\n#define LL(n) ll n; cin >> n;\n#define DOUBLE(n) double n; cin >> n;\nusing namespace std;\n\n//  types\ntypedef pair<int, int> P;\ntypedef pair<ll, int> Pl;\ntypedef pair<ll, ll> Pll;\ntypedef pair<double, double> Pd;\ntypedef complex<double> cd;\n \n// constants\nconst int inf = 1e9;\nconst ll linf = 1LL << 50;\nconst double EPS = 1e-10;\nconst int mod = 1e9 + 7;\nconst int dx[4] = {-1, 0, 1, 0};\nconst int dy[4] = {0, -1, 0, 1};\n\n// solve\ntemplate <class T>bool chmax(T &a, const T &b){if(a < b){a = b; return 1;} return 0;}\ntemplate <class T>bool chmin(T &a, const T &b){if(a > b){a = b; return 1;} return 0;}\ntemplate <typename T> istream &operator>>(istream &is, vector<T> &vec){for(auto &v: vec)is >> v; return is;}\ntemplate <typename T> ostream &operator<<(ostream &os, const vector<T>& vec){for(int i = 0; i < vec.size(); i++){ os << vec[i]; if(i + 1 != vec.size())os << \" \";} return os;}\ntemplate <typename T> ostream &operator<<(ostream &os, const set<T>& st){for(auto itr = st.begin(); itr != st.end(); ++itr){ os << *itr; auto titr = itr; if(++titr != st.end())os << \" \";} return os;}\ntemplate <typename T> ostream &operator<<(ostream &os, const unordered_set<T>& st){for(auto itr = st.begin(); itr != st.end(); ++itr){ os << *itr; auto titr = itr; if(++titr != st.end())os << \" \";} return os;}\ntemplate <typename T> ostream &operator<<(ostream &os, const multiset<T>& st){for(auto itr = st.begin(); itr != st.end(); ++itr){ os << *itr; auto titr = itr; if(++titr != st.end())os << \" \";} return os;}\ntemplate <typename T> ostream &operator<<(ostream &os, const unordered_multiset<T>& st){for(auto itr = st.begin(); itr != st.end(); ++itr){ os << *itr; auto titr = itr; if(++titr != st.end())os << \" \";} return os;}\ntemplate <typename T1, typename T2> ostream &operator<<(ostream &os, const pair<T1, T2> &p){os << p.first << \" \" << p.second; return os;}\ntemplate <typename T1, typename T2> ostream &operator<<(ostream &os, const map<T1, T2> &mp){for(auto itr = mp.begin(); itr != mp.end(); ++itr){ os << itr->first << \":\" << itr->second; auto titr = itr; if(++titr != mp.end())os << \" \"; } return os;}\ntemplate <typename T1, typename T2> ostream &operator<<(ostream &os, const unordered_map<T1, T2> &mp){for(auto itr = mp.begin(); itr != mp.end(); ++itr){ os << itr->first << \":\" << itr->second; auto titr = itr; if(++titr != mp.end())os << \" \"; } return os;}\n\nstruct point2d{\n  double x, y;\n  point2d(){}\n  point2d(double x, double y): x(x), y(y){}\n  point2d operator+(const point2d &r) const{\n    return point2d(x + r.x, y + r.y);\n  }\n  point2d operator-(const point2d &r) const{\n    return point2d(x - r.x, y - r.y);\n  }\n  point2d& operator+=(const point2d &r){\n    *this = *this + r;\n    return *this;\n  }\n  point2d& operator-=(const point2d &r){\n    *this = *this - r;\n    return *this;\n  }\n  bool operator==(const point2d &r) const{\n    return abs(x - r.x) < EPS && abs(y - r.y) < EPS;\n  }\n  bool operator!=(const point2d &r) const{\n    return !(*this == r);\n  }\n  bool operator<(const point2d &r) const{\n    if(abs(x - r.x) >= EPS)return x < r.x;\n    return y < r.y;\n  }\n};\n\npoint2d operator*(double x, const point2d &p){\n  return point2d(x * p.x, x * p.y);\n}\n\npoint2d operator/(const point2d &p, double x){\n  return point2d(p.x / x, p.y / x);\n}\n\ndouble norm(const point2d &a){\n  return sqrt(a.x * a.x + a.y * a.y);\n}\n\ndouble dis(const point2d &a, const point2d &b){\n  point2d c = a - b;\n  return norm(c);\n}\n\ndouble inner_product(const point2d &a, const point2d &b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble outer_product(const point2d &a, const point2d &b){\n  return a.x * b.y - a.y * b.x;\n}\n\ndouble cosine(const point2d &a, const point2d &b){\n  return inner_product(a, b) / norm(a) / norm(b);\n}\n\nstruct plane2d{\n  double a, b, c;\n  double norm;\n  plane2d(){}\n  plane2d(double a, double b, double c): a(a), b(b), c(c){}\n  plane2d(const point2d &p, const point2d &q){\n    point2d l = p - q;\n    a = l.y, b = - l.x;\n    c = - a * p.x - b * p.y;\n    build();\n  }\n  void build(){\n    norm = sqrt(a * a + b * b);\n  }\n  double dis(const point2d &p){\n    return abs(a * p.x + b * p.y + c) / norm;\n  }\n};\n\nbool parallel(const plane2d &p, const plane2d &q){\n  return abs(p.a * q.b - p.b * q.a) < EPS;\n}\n\nbool orthogonal(const plane2d &p, const plane2d &q){\n  return abs(p.a * q.a + p.b * q.b) < EPS;\n}\n\nint main(int argc, char const* argv[])\n{\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  INT(q);\n  rep(i, q){\n    point2d p[4];\n    rep(i, 4)cin >> p[i].x >> p[i].y;\n    plane2d pl1(p[0], p[1]), pl2(p[2], p[3]);\n    if(parallel(pl1, pl2))cout << 2 << endl;\n    else if(orthogonal(pl1, pl2))cout << 1 << endl;\n    else cout << 0 << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (std::abs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(0), y(0){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; ++i)\n\t{\n\t\tint x0, y0, x1, y1, x2, y2, x3, y3;\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tVector v1(x1 - x0, y1 - y0);\n\t\tVector v2(x3 - x2, y3 - y2);\n\t\tif (isParallel(v1, v2)) cout << 2 << endl;\n\t\telse if (isOrthogonal(v1, v2)) cout << 1 << endl;\n\t\telse cout << 0 << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n/*\n#include<algolithm>\n#include<array>\n#include<vector>\n*/\nusing namespace std;\n\ntypedef double Real;\nconstexpr Real EPS = 1e-8;\n\nint sign(Real d) {\n\tif (d>EPS) { return 1; }\n\tif (d<-EPS) { return -1; }\n\treturn 0;\n}\n\nstruct Point {\n\tReal x,y;\n\n\tPoint(Real x_=0, Real y_=0): x(x_), y(y_) {}\n\n\tPoint operator+(const Point &p) const {\n\t\treturn Point(x+p.x,y+p.y);\n\t}\n\tPoint operator-(const Point &p) const {\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n\tPoint operator*(Real s) const {\n\t\treturn Point(x*s,y*s);\n\t}\n\tPoint operator/(Real s) const {\n\t\treturn Point(x/s,y/s);\n\t}\n\tPoint operator<(const Point &p) const {\n\t\treturn sign(x - p.x) == -1 || (sign(x - p.x)==0 && sign(y - p.y)==-1);\n\t}\n\tPoint operator==(const Point &p) const { return sign(x-p.x) == 0 && sign(y - p.y)==0; }\n};\n\nstruct Line : public array<Point, 2> { //??????\n\tLine(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Segment : public array<Point, 2> { //??´???\n\tSegment(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Circle {\n\tPoint c;\n\tReal r;\n\tCircle(const Point &c_, Real r_): c(c_), r(r_) {}\n};\n\ntypedef vector<Point> Polygon;\n\n\n\n\n//--- solve ---\nPoint rotate90(const Point &p) { //???????¨???????\n\treturn Point(-p.y,p.x);\n}\n\nPoint rotate(const Point &p, Real theta) {\n\tconst Real s = sin(theta), c = cos(theta);\n\treturn Point(c*p.x - s*p.y, s*p.x + c*p.y);\n}\n\nReal angle(const Point &p) {\n\treturn atan2(p.y, p.x);\n}\n\nReal norm(const Point &p) {\n\treturn p.x * p.x + p.y * p.y;\n}\n\nReal abs(const Point &p) {\n\treturn sqrt(norm(p));\n}\n\nReal dot(const Point &a, const Point &b) { //??????\n\treturn a.x * b.x + a.y * b.y;\n}\n\nReal cross(const Point &a, const Point &b) { //??????\n\treturn a.x * b.y + a.y * b.x;\n}\n\nint main() {\n\tint N;\n\n\tcin >> N;\n\tfor(int i=0; i<N; i++) {\n\t\tint x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tPoint p[2];\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n\t\tp[0].x = x0 - x1;\n\t\tp[0].y = y0 - y1;\n\t\tp[1].x = x2 - x3;\n\t\tp[1].y = y2 - y3;\n\t\t\n\t\tReal res1 = dot(p[0],p[1]);\n\t\tReal res2 = cross(p[0],p[1]);\n\t\tif (res1 == 0) {\n\t\t\t//?????´\n\t\t\tcout << 1 << endl;\n\t\t}\n\t\telse if (res2 == 0) {\n\t\t\t//??????\n\t\t\tcout << 2 << endl;\n\t\t}\n\t\telse {\n\t\t\t//?????????\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\n\treturn EXIT_SUCCESS;\n}"
  },
  {
    "language": "Haskell",
    "code": "inner_product (ax,ay) (bx,by) = ax * bx + ay * by\nvabs (ax,ay) = sqrt (ax*ax+ay*ay)\nvmul a (ax,ay) = (a*ax,a*ay)\nvadd (ax,ay) (bx,by) = (ax+bx,ay+by)\nvsub (ax,ay) (bx,by) = (ax-bx,ay-by)\n\nvatan (x,y) = atan2 y x\nvnorm (x,y) = x*x+y*y\n\nans p0 p1 p2 p3 \n  | (abs ip) < 0.00000000001 = 1\n  | ((abs ip) > 0.99999999999) && ((abs ip) < 1.00000000001) = 2\n  | otherwise = 0\n--  = ip\n  where s1 = vsub p1 p0\n        s2 = vsub p3 p2\n        ip = (inner_product s1 s2) / (vabs s1) / (vabs s2)\n\nmain = do\n  getLine\n  c <- getContents\n  let i = map (map read) $ map words $ lines c :: [[Double]]\n      o = map (\\ [xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3] -> ans (xp0,yp0) (xp1,yp1) (xp2,yp2) (xp3,yp3) ) i\n  mapM_ print o"
  },
  {
    "language": "Haskell",
    "code": "import Control.Applicative ((<$>))\nimport Control.Monad\nimport Data.Complex\n\ntype Vector = Complex Double\n\neps :: Double\neps = 1e-7\n\ndot :: Vector -> Vector -> Double\ndot a b = realPart $ conjugate a * b\n\ncross :: Vector -> Vector -> Double\ncross a b = imagPart $ conjugate a * b\n\nreadWords :: Read a => IO [a]\nreadWords = map read . words <$> getLine\n\nmain :: IO ()\nmain = do\n  q <- readLn\n  qs <- replicateM q $ do\n    [x0,y0,x1,y1,x2,y2,x3,y3] <- readWords :: IO [Double]\n    let\n      p0 = x0:+y0\n      p1 = x1:+y1\n      p2 = x2:+y2\n      p3 = x3:+y3\n    return (p0,p1,p2,p3)\n\n  forM_ qs $ \\(p0,p1,p2,p3) -> do\n    let\n      para = abs ((p1-p0)`cross`(p3-p2)) < eps\n      orth = abs ((p1-p0)`dot`(p3-p2)) < eps\n    when para $ print 2\n    when orth $ print 1\n    when (not para && not orth) $ print 0"
  },
  {
    "language": "Haskell",
    "code": "inner_product (ax,ay) (bx,by) = ax * bx + ay * by\nvabs (ax,ay) = sqrt (ax*ax+ay*ay)\nvmul a (ax,ay) = (a*ax,a*ay)\nvadd (ax,ay) (bx,by) = (ax+bx,ay+by)\nvsub (ax,ay) (bx,by) = (ax-bx,ay-by)\n\nvatan (x,y) = atan2 y x\nvnorm (x,y) = x*x+y*y\n\nans p0 p1 p2 p3 =\n  let s1 = vsub p1 p0\n      s2 = vsub p3 p2\n      ip = (inner_product s1 s2) / (vabs s1) / (vabs s2)\n  in\n    case ip of\n      0         -> 1\n      1         -> 2\n      otherwise -> 0\n\nmain = do\n  getLine\n  c <- getContents\n  let i = map (map read) $ map words $ lines c :: [[Double]]\n      o = map (\\ [xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3] -> ans (xp0,yp0) (xp1,yp1) (xp2,yp2) (xp3,yp3) ) i\n  mapM_ print o"
  },
  {
    "language": "Haskell",
    "code": "import           Control.Applicative\nimport           Control.Monad\nimport qualified Data.ByteString.Char8 as B\n\nreadi :: B.ByteString -> Int\nreadi b | Just (n, _) <- B.readInt b = n\n\nnewtype Vector a =\n    Vector (a, a)\n    deriving (Eq, Show)\n\nvector :: a -> a -> Vector a\nvector x y = Vector (x, y)\n\nisOrthogonal :: (Num a, Eq a) => Vector a -> Vector a -> Bool\nisOrthogonal (Vector (x1, y1)) (Vector (x2, y2))\n    = (x1 * x2 + y1 * y2) == 0\n\nisParallel :: (Num a, Eq a) => Vector a -> Vector a -> Bool\nisParallel (Vector (x1, y1)) (Vector (x2, y2))\n    = (abs (x1 * y2) - abs (y1 * x2)) == 0\n\nsolve :: [[Int]] -> IO ()\nsolve [] = return ()\nsolve ([x0, y0, x1, y1, x2, y2, x3, y3]:ps) = do\n    let v1 = vector (x1 - x0) (y1 - y0)\n    let v2 = vector (x3 - x2) (y3 - y2)\n    case () of\n        _ | isParallel v1 v2   -> putStrLn \"2\"\n          | isOrthogonal v1 v2 -> putStrLn \"1\"\n          | otherwise          -> putStrLn \"0\"\n    solve ps\n\nmain :: IO ()\nmain = do\n    q <- readLn\n    qs <- fmap (fmap readi . B.words) <$> replicateM q B.getLine\n    solve qs\n\n"
  },
  {
    "language": "Haskell",
    "code": "import           Control.Applicative\nimport           Control.Monad\nimport qualified Data.ByteString.Char8 as B\nimport           Text.Printf\n\nreadi :: B.ByteString -> Int\nreadi b | Just (n, _) <- B.readInt b = n\n\ndot :: (Double, Double) -> (Double, Double) -> Double\n(a, b) `dot` (c, d) = a * c + b * d\n\ncross :: (Double, Double) -> (Double, Double) -> Double\n(a, b) `cross` (c, d) = a * d - b * c\n\nmain :: IO ()\nmain = do\n    n <- readLn\n    replicateM_ n $ do\n        [a,b,c,d,e,f,g,h] <- fmap (fromIntegral . readi) . B.words <$> B.getLine\n        let v1 = (c - a, d - b)\n        let v2 = (g - e, h - f)\n        case () of\n            _ | v1 `dot` v2   == 0 -> putStrLn \"1\"\n              | v1 `cross` v2 == 0 -> putStrLn \"2\"\n              | otherwise          -> putStrLn \"0\"\n\n"
  },
  {
    "language": "Haskell",
    "code": "inner_product (ax,ay) (bx,by) = ax * bx + ay * by\nvabs (ax,ay) = sqrt (ax*ax+ay*ay)\nvmul a (ax,ay) = (a*ax,a*ay)\nvadd (ax,ay) (bx,by) = (ax+bx,ay+by)\nvsub (ax,ay) (bx,by) = (ax-bx,ay-by)\n\nvatan (x,y) = atan2 y x\nvnorm (x,y) = x*x+y*y\n\nans p0 p1 p2 p3 \n  | (abs ip) < 0.000000001 = 1\n  | ((abs ip) > 0.999999999) && ((abs ip) < 1.000000001) = 2\n  | otherwise = 0\n  where s1 = vsub p1 p0\n        s2 = vsub p3 p2\n        ip = (inner_product s1 s2) / (vabs s1) / (vabs s2)\n\nmain = do\n  getLine\n  c <- getContents\n  let i = map (map read) $ map words $ lines c :: [[Double]]\n      o = map (\\ [xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3] -> ans (xp0,yp0) (xp1,yp1) (xp2,yp2) (xp3,yp3) ) i\n  mapM_ print o"
  },
  {
    "language": "Haskell",
    "code": "import           Control.Applicative\nimport           Control.Monad\nimport qualified Data.ByteString.Char8 as B\n\nreadi :: B.ByteString -> Int\nreadi b | Just (n, _) <- B.readInt b = n\n\nnewtype Vector a =\n    Vector (a, a)\n    deriving (Eq, Show)\n\nvector :: a -> a -> Vector a\nvector x y = Vector (x, y)\n\nisOrthogonal :: (Num a, Eq a) => Vector a -> Vector a -> Bool\nisOrthogonal (Vector (x1, y1)) (Vector (x2, y2))\n    = (x1 * x2 + y1 * y2) == 0\n\nisParallel :: (Num a, Ord a) => Vector a -> Vector a -> Bool\nisParallel (Vector (x1, y1)) (Vector (x2, y2))\n    = if x1 < x2\n      then (x1 * y2 - x2 * y1) == 0\n      else (x2 * y1 - x1 * y2) == 0\n\nsolve :: [[Int]] -> IO ()\nsolve [] = return ()\nsolve ([x0, y0, x1, y1, x2, y2, x3, y3]:ps) = do\n    let v1 = vector (x1 - x0) (y1 - y0)\n    let v2 = vector (x3 - x2) (y3 - y2)\n    case () of\n        _ | isParallel v1 v2   -> putStrLn \"2\"\n          | isOrthogonal v1 v2 -> putStrLn \"1\"\n          | otherwise          -> putStrLn \"0\"\n    solve ps\n\nmain :: IO ()\nmain = do\n    q <- readLn\n    qs <- fmap (fmap readi . B.words) <$> replicateM q B.getLine\n    solve qs\n\n"
  },
  {
    "language": "Haskell",
    "code": "inner_product (ax,ay) (bx,by) = ax * bx + ay * by\nvabs (ax,ay) = sqrt (ax*ax+ay*ay)\nvmul a (ax,ay) = (a*ax,a*ay)\nvadd (ax,ay) (bx,by) = (ax+bx,ay+by)\nvsub (ax,ay) (bx,by) = (ax-bx,ay-by)\n\nvatan (x,y) = atan2 y x\nvnorm (x,y) = x*x+y*y\n\nans p0 p1 p2 p3 \n  | (abs ip) < 0.00000001 = 1\n  | ((abs ip) > 0.99999999) && ((abs ip) < 1.00000001) = 2\n  | otherwise = 0\n  where s1 = vsub p1 p0\n        s2 = vsub p3 p2\n        ip = (inner_product s1 s2) / (vabs s1) / (vabs s2)\n\nmain = do\n  getLine\n  c <- getContents\n  let i = map (map read) $ map words $ lines c :: [[Double]]\n      o = map (\\ [xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3] -> ans (xp0,yp0) (xp1,yp1) (xp2,yp2) (xp3,yp3) ) i\n  mapM_ print o"
  },
  {
    "language": "Haskell",
    "code": "import Control.Monad\n\ndata Line = Vert Double | Line { slope :: Double\n                               , interact :: Double\n                               } deriving Show\n\nmain = do\n  n <- readLn\n  replicateM_ n solve\n\nsolve :: IO ()\nsolve = do\n  [x0,y0,x1,y1,x2,y2,x3,y3] <- fmap (map read.words) getLine\n  let (l1,l2) = (corrLine (x0,y0) (x1,y1), corrLine (x2,y2) (x3,y3))\n  putStrLn $ checkCrossAngle l1 l2\n\ncheckCrossAngle l1 l2\n  | isParallel l1 l2 = \"2\"\n  | isOrthogonal l1 l2 = \"1\"\n  | otherwise = \"0\"\n\nisVert :: Line -> Bool\nisVert (Vert _) = True\nisVert (Line _ _) = False\n\nisParallel :: Line -> Line -> Bool\nisParallel l1 l2\n  | isVert l1 = isVert l2\n  | isVert l2 = False\n  | otherwise = slope l1 == slope l2\n\nisOrthogonal :: Line -> Line -> Bool\nisOrthogonal l1 l2\n  | isVert l1 && isVert l2 = False\n  | isVert l1 = slope l2 == 0\n  | isVert l2 = slope l1 == 0\n  | otherwise = slope l1 * slope l2 == -1\n\ncorrLine (x1,y1) (x2,y2)\n  | x1 == x2 = Vert x1\n  | otherwise = Line a b\n  where a = (y2 - y1) / (x2 - x1)\n        b = y1 - a*x1"
  },
  {
    "language": "Haskell",
    "code": "import Control.Monad\nimport Data.Ratio ((%))\n\ndata Line = Vert Rational | Line { slope :: Rational\n                               , interact :: Rational\n                               } deriving Show\n\nmain = do\n  n <- readLn\n  replicateM_ n solve\n\nsolve :: IO ()\nsolve = do\n  [x0,y0,x1,y1,x2,y2,x3,y3] <- fmap (map read.words) getLine\n  let (l1,l2) = (corrLine (x0,y0) (x1,y1), corrLine (x2,y2) (x3,y3))\n  putStrLn $ checkCrossAngle l1 l2\n\ncheckCrossAngle l1 l2\n  | isParallel l1 l2 = \"2\"\n  | isOrthogonal l1 l2 = \"1\"\n  | otherwise = \"0\"\n\nisVert :: Line -> Bool\nisVert (Vert _) = True\nisVert (Line _ _) = False\n\nisParallel :: Line -> Line -> Bool\nisParallel l1 l2\n  | isVert l1 = isVert l2\n  | isVert l2 = False\n  | otherwise = slope l1 == slope l2\n\nisOrthogonal :: Line -> Line -> Bool\nisOrthogonal l1 l2\n  | isVert l1 && isVert l2 = False\n  | isVert l1 = slope l2 == 0\n  | isVert l2 = slope l1 == 0\n  | otherwise = slope l1 * slope l2 == -1\n\ncorrLine :: (Integer,Integer) -> (Integer, Integer) -> Line\ncorrLine (x1,y1) (x2,y2)\n  | x1 == x2 = Vert (x1%1)\n  | otherwise = Line a b\n  where a = (y2 - y1) % (x2 - x1)\n        b = (y1%1) - a*(x1%1)"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\n#define EPS 1e-10\n\nint main(void)\n{\n    int q;\n    double x[4], y[4];\n    double dx1, dy1, dx2, dy2;\n    double m1, m2;\n    int i;\n\n    scanf(\"%d\", &q);\n    while (q-- > 0){\n        for (i = 0; i < 4; i++){\n            scanf(\"%lf %lf\", &x[i], &y[i]);\n        }\n        dx1 = x[1] - x[0];\n        dy1 = y[1] - y[0];\n        dx2 = x[3] - x[2];\n        dy2 = y[3] - y[2];\n        m1 = dy1 / dx1;\n        m2 = dy2 / dx1;\n\n        if (fabs(m1 - m2) < EPS){\n            printf(\"2\\n\");\n        }\n        else if (fabs(dx1 * dx2 + dy1 * dy2) < EPS){\n            printf(\"1\\n\");\n        }\n        else {\n            printf(\"0\\n\");\n        }\n    }\n\n    return (0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nint main(void){\n   double  l0, l1;\n   int x0, y0, x1, y1, x2, y2, x3, y3, i, n;\n   scanf(\"%d\", &n);\nfor (i = 0; i < n; i++){\n    scanf(\"%d %d %d %d %d %d %d %d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n    if (x1 == x0 && x2 == x3){\n        printf(\"2\\n\");\n        continue;\n    }\n    if ((x1 == x0 && y2 == y3)||(x2 == x3 && y0 == y1)){\n        printf(\"1\\n\");\n        continue;\n    }\n    if (x1 == x0 || x2 == x3){\n        printf(\"0\\n\");\n        continue;\n    }\n    l0 = (y1 - y0) / (x1 - x0);\n    l1 = (y3 - y2) / (x3 - x2);\n    if (l0 == l1){\n        printf(\"2\\n\");\n    }else if (l0 * l1 == -1){\n        printf(\"1\\n\");\n    }else{\n        printf(\"0\\n\");\n    }\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ndouble get_radian(double x1, double y1, double x2, double y2) {\n\tif(fabs(x1-x2) < 0.00000001f) {\n\t\tif(fabs(y1-y2) < 0.00000001f) {\n\t\t\treturn 0.0f;\n\t\t} else if(y1 > y2) {\n\t\t\treturn 3 * M_PI / 2;\n\t\t} else {\n\t\t\treturn M_PI / 2;\n\t\t}\n\t} else if(fabs(y1-y2) < 0.00000001f) {\n\t\tif(fabs(x1-x2) < 0.00000001f) {\n\t\t\treturn 0.0f;\n\t\t} else if(x1 > x2) {\n\t\t\treturn M_PI;\n\t\t}\n\t\treturn 0.0;\n\t}\n\t\n\tif(x2 >= x1) {\n\t\tif(y2 >= y1) {\n\t\t\treturn atan((y2-y1)/(x2-x1));\n\t\t}\n\t\treturn 2 * M_PI + atan((y2-y1)/(x2-x1));\n\t} else {\n\t\tif(y2 >= y1) {\n\t\t\treturn M_PI - atan((y2-y1)/(x1-x2));\n\t\t}\n\t\treturn M_PI + atan((y2-y1)/(x2-x1));\n\t}\n}\n\nint main(void) {\n\tdouble x1,x2,x3,x4,y1,y2,y3,y4;\n\tdouble rad1, rad2;\n\tdouble rdiff;\n\tint i, n;\n\t\n\tscanf(\"%d\\n\", &n);\n\tfor(i=0;i<n;i++) {\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\\n\", &x1, &y1, &x2, &y2, &x3, &y3, &x4, &y4);\n\t\trad1 = get_radian(x1, y1, x2, y2);\n\t\trad2 = get_radian(x3, y3, x4, y4);\n\t\t\n\t\trdiff = fmod(2*M_PI+rad1-rad2, M_PI);\n\n\t\tif(fabs(rdiff) < 0.0000001f || fabs(rdiff-M_PI) < 0.0000001f) {\n\t\t\tprintf(\"2\\n\");\n\t\t} else if(fabs(rdiff-M_PI/2) < 0.0000001f) {\n\t\t\tprintf(\"1\\n\");\n\t\t} else {\n\t\t\tprintf(\"0\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <float.h>\n#include <math.h>\n#include <stdio.h>\n\nint rel_l_l( double x0, double y0, double x1, double y1, double x2, double y2, double x3, double y3, double *x, double *y ) {\n\tdouble a, b, c, d;\n\tint rel;\n\n\tif ( x0 != x1 ) {\n\t\ta = ( y0 - y1 ) / ( x0 - x1 );\n\t\tb = ( x0 * y1 - x1 * y0 ) / ( x0 - x1 );\n\t}\n\tif ( x2 != x3 ) {\n\t\tc = ( y2 - y3 ) / ( x2 - x3 );\n\t\td = ( x2 * y3 - x3 * y2 ) / ( x2 - x3 );\n\t}\n\n\trel = 0;\n\tif ( x0 == x1 ) {\n\t\t*x = x0;\n\t\tif ( x2 == x3 )\n\t\t\tif ( x0 == x2 )\n\t\t\t\trel = 2;\n\t\t\telse\n\t\t\t\trel = 1;\n\t\telse {\n\t\t\t*y = c * *x + d;\n\t\t\tif ( y2 == y3 )\n\t\t\t\trel = 3;\n\t\t}\n\t} else {\n\t\tif ( x2 == x3 ) {\n\t\t\t*x = x2;\n\t\t\tif ( y0 == y1 )\n\t\t\t\trel = 3;\n\t\t} else\n\t\t\tif ( a == c )\n\t\t\t\tif ( b == d )\n\t\t\t\t\trel = 2;\n\t\t\t\telse\n\t\t\t\t\trel = 1;\n\t\t\telse {\n\t\t\t\t*x = ( -b + d ) / ( a - c );\n\t\t\t\tif ( fabs( a * c + 1.0 ) < 1e-12 )\n\t\t\t\t\trel = 3;\n\t\t\t}\n\t\t*y = a * *x + b;\n\t}\n\n\treturn rel;\n}\n\nint main( void ) {\n\tint q;\n\n\tscanf( \"%d\", &q );\n\twhile ( q-- ) {\n\t\tint rel;\n\t\tdouble x0, y0, x1, y1, x2, y2, x3, y3, x, y;\n\n\t\tscanf( \"%lf %lf %lf %lf %lf %lf %lf %lf\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3 );\n\n\t\trel = rel_l_l( x0, y0, x1, y1, x2, y2, x3, y3, &x, &y );\n\n\t\tprintf( \"%d\\n\", rel == 0 ? 0 : rel == 1 || rel == 2 ? 2 : 1 );\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\n#define PREC 1e-12\n\nint main() {\n    int x, y, x0, y0, x1, y1, x2, y2, x3, y3;\n    int q;\n    double v1x, v1y, v2x, v2y, cosa;\n    int judge;\n\n    scanf(\"%d\", &q);\n    \n    while (q--) {\n        scanf(\"%d %d %d %d %d %d %d %d\",\n              &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n        v1x = x1 - x0;\n        v1y = y1 - y0;\n        v2x = x3 - x2;\n        v2y = y3 - y2;\n        cosa = (v1x*v2x + v1y*v2y) /\n            (sqrt(v1x*v1x+v1y*v1y) * sqrt(v2x*v2x+v2y*v2y));\n\n        if (fabs(cosa) < PREC) {\n            judge = 1;\n        }\n        else if (fabs(fabs(cosa) - 1.0) < PREC) {\n            judge = 2;\n        }\n        else {\n            judge = 0;\n        }\n        printf(\"%d\\n\", judge);\n    }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ndouble get_radian(double x1, double y1, double x2, double y2) {\n\tif(fabs(x1-x2) < 0.00000001f) {\n\t\tif(fabs(y1-y2) < 0.00000001f) {\n\t\t\treturn 0.0f;\n\t\t} else if(y1 > y2) {\n\t\t\treturn 3 * M_PI / 2;\n\t\t} else {\n\t\t\treturn M_PI / 2;\n\t\t}\n\t} else if(fabs(y1-y2) < 0.00000001f) {\n\t\tif(fabs(x1-x2) < 0.00000001f) {\n\t\t\treturn 0.0f;\n\t\t} else if(x1 > x2) {\n\t\t\treturn M_PI;\n\t\t}\n\t\treturn 0.0;\n\t}\n\t\n\tif(x2 >= x1) {\n\t\tif(y2 >= y1) {\n\t\t\treturn atan((y2-y1)/(x2-x1));\n\t\t}\n\t\treturn 2 * M_PI + atan((y2-y1)/(x2-x1));\n\t} else {\n\t\tif(y2 >= y1) {\n\t\t\treturn M_PI - atan((y2-y1)/(x1-x2));\n\t\t}\n\t\treturn M_PI + atan((y2-y1)/(x2-x1));\n\t}\n}\n\nint main(void) {\n\tdouble x1,x2,x3,x4,y1,y2,y3,y4;\n\tdouble rad1, rad2;\n\tdouble rdiff;\n\tint i, n;\n\t\n\tscanf(\"%d\\n\", &n);\n\tfor(i=0;i<n;i++) {\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\\n\", &x1, &y1, &x2, &y2, &x3, &y3, &x4, &y4);\n\t\trad1 = get_radian(x1, y1, x2, y2);\n\t\trad2 = get_radian(x3, y3, x4, y4);\n\t\t\n\t\trdiff = fmod(2*M_PI+rad1-rad2, M_PI);\n\n\t\tif(fabs(rdiff) < 0.0001 || fabs(rdiff-M_PI) < 0.0001) {\n\t\t\tprintf(\"2\\n\");\n\t\t} else if(fabs(rdiff-M_PI/2) < 0.0001) {\n\t\t\tprintf(\"1\\n\");\n\t\t} else {\n\t\t\tprintf(\"0\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n\ntypedef long long int int64;\n\n#define MAX(a,b) ((a)>(b)?(a):(b))\n#define MIN(a,b) ((a)<(b)?(a):(b))\n#define ABS(a) ((a)>(0)?(a):-(a))\n\ntypedef struct vector{\n  int64 x,y;\n} vec;\n\nint64 innerNorm(vec a,vec b){\n  return a.x*b.x+a.y*b.y;\n}\n\nint64 norm(vec a){\n  return a.x*a.x+a.y*a.y;\n}\n\nint isParallel(vec a,vec b){\n  int64 in=innerNorm(a,b);\n  int64 x=norm(a);\n  int64 y=norm(b);\n  return in*in==x*y;\n}\n\nint isOrthogonal(vec a,vec b){\n  return innerNorm(a,b)==0;\n}\n\nvoid run(void){\n  int query;\n  scanf(\"%d\",&query);\n  while(query--){\n    int a,b,c,d,p,q,r,s;\n    scanf(\"%d%d%d%d%d%d%d%d\",&a,&b,&c,&d,&p,&q,&r,&s);\n    vec aa,bb;\n    aa.x=c-a;\n    aa.y=d-b;\n    bb.x=r-p;\n    bb.y=s-q;\n    if(isParallel(aa,bb)){\n      printf(\"2\\n\");\n    } else if(isOrthogonal(aa,bb)){\n      printf(\"1\\n\");\n    } else {\n      printf(\"0\\n\");\n    }\n  }\n}\n\nint main(void){\n  run();\n  return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n// a.s, a.e, p?????????????????????\n// ???????¨???????????????????????????????  1\n// ????¨?????????????????????????????????? -1\n// p, a.s, a.e????????????????????? 2\n// a.s, a.e, p?????????????????????-2\n// ???p?????´???a???????????????????????? 0\nint ccw(LINE a,POINT p){\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0){\n\t\treturn -2;\n\t}else{\n\t\treturn  0;\n\t}\n}\n\n// ??????????????????\nint parallel(LINE a,LINE b){\n\tif(!cross(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ?????´????????????\nint orthogonal(LINE a,LINE b){\n\tif(!dot(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\nint main(){\n\tLINE a,b;\n\tint k;\n\tscanf(\"%d\",&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.s.x,&a.s.y,&a.e.x,&a.e.y);\n\t\tscanf(\"%lf%lf%lf%lf\",&b.s.x,&b.s.y,&b.e.x,&b.e.y);\n\t\tprintf(\"%s\\n\",orthogonal(a,b)+parallel(a,b)*2);\n\t}\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n/*\n\tLINE a;\n\tPOINT b;\n\tint k;\n\tchar s[5][100]={{\"ONLINE_FRONT\"},{\"CLOCKWISE\"},{\"ON_SEGMENT\"},{\"COUNTER_CLOCKWISE\"},{\"ONLINE_BACK\"}};\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tprintf(\"%s\\n\",s[ccw(a,b)+2]);\n\t}\n*/\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(){\n    int i, q, x1, y1, x2, y2, x3, y3, x4, y4;\n    scanf(\"%d\", &q);\n    for(i=0; i<q; i++){\n        scanf(\"%d%d%d%d%d%d%d%d\", &x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n        if((y2-y1)*(x4-x3)-(y4-y3)*(x2-x1)==0)\n         printf(\"2\\n\");\n       else if((y2-y1)* (y4-y3)+(x2-x1)*(x4-x3)==0)\n        printf(\"1\\n\");\n        else\n        printf(\"0\\n\");\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main()\n{\n\tint t,i,j;\n\tscanf(\"%d\",&t);\n\n\tfor(i=0;i<t;i++)\n\t{\n       int X[4],Y[4],x1,x2,y1,y2;\n\n       for(j=0;j<4;j++)\n\t   {\n\t   \tscanf(\"%d\",&X[j]);\n\t   \tscanf(\"%d\",&Y[j]);\n\t   }\n\n\n\t   x1=X[0]-X[1];\n\t   x2=X[2]-X[3];\n\t   y1=Y[0]-Y[1];\n\t   y2=Y[2]-Y[3];\n\n\n\t   if(x1==x2 && y1==y2)\n\t\t    printf(\"2\\n\");\n\t   else  if(x1==y2 && x2==y1)\n\t\t    printf(\"1\\n\");\n\t   else\n\t\tprintf(\"0\\n\");\n\n\n\n\t}\n\n\treturn 0;\n}\n\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#define y1 y11111\n\ndouble x1,y1,x2,y2,x3,y3,x4,y4;\nint main(){\n\tint q;\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t\tscanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n\t\tx2-=x1;\n\t\ty2-=y1;\n\t\tx4-=x3;\n\t\ty4-=y3;\n\t\tint r=x2*x4+y2*y4;\n\t\tint c=x2*y4-x4*y2;\n\t\tif(r==0)puts(\"1\");\n\t\telse if(c==0)puts(\"2\");\n\t\telse puts(\"0\");\n\t}\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main()\n{\n\n    int n,p,i;\n    long long\n    int x[4],y[4],s1x,s2x,s1y,s2y;\n    scanf(\"%d\",&n);\n    while(n--){\n        for(i=0;i<4;i++)\n            scanf(\"%lld %lld\",&x[i],&y[i]);\n        s2x=x[3]-x[2];\n        s1x=x[1]-x[0];\n        s2y=y[3]-y[2];\n        s1y=y[1]-y[0];\n        if(s1y*s2y + s1x*s2x==0)\n            printf(\"1\\n\");\n        else if(s1x*s2y - s1y*s2x==0)\n            printf(\"2\\n\");\n\n        else\n            printf(\"0\\n\");\n\n\n\n\n    }\n\n    return 0;\n\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ndouble get_radian(double x1, double y1, double x2, double y2) {\n\tif(fabs(x1-x2) < 0.00000001f) {\n\t\tif(fabs(y1-y2) < 0.00000001f) {\n\t\t\treturn 0.0f;\n\t\t} else if(y1 > y2) {\n\t\t\treturn 3 * M_PI / 2;\n\t\t} else {\n\t\t\treturn M_PI / 2;\n\t\t}\n\t} else if(fabs(y1-y2) < 0.00000001f) {\n\t\tif(fabs(x1-x2) < 0.00000001f) {\n\t\t\treturn 0.0f;\n\t\t} else if(x1 > x2) {\n\t\t\treturn M_PI;\n\t\t}\n\t\treturn 0.0;\n\t}\n\t\n\tif(x2 >= x1) {\n\t\tif(y2 >= y1) {\n\t\t\treturn atan((y2-y1)/(x2-x1));\n\t\t}\n\t\treturn 2 * M_PI + atan((y2-y1)/(x2-x1));\n\t} else {\n\t\tif(y2 >= y1) {\n\t\t\treturn M_PI - atan((y2-y1)/(x1-x2));\n\t\t}\n\t\treturn M_PI + atan((y2-y1)/(x2-x1));\n\t}\n}\n\nint main(void) {\n\tdouble x1,x2,x3,x4,y1,y2,y3,y4;\n\tdouble rad1, rad2;\n\tdouble rdiff;\n\tint i, n;\n\t\n\tscanf(\"%d\\n\", &n);\n\tfor(i=0;i<n;i++) {\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\\n\", &x1, &y1, &x2, &y2, &x3, &y3, &x4, &y4);\n\t\trad1 = get_radian(x1, y1, x2, y2);\n\t\trad2 = get_radian(x3, y3, x4, y4);\n\t\t\n\t\trdiff = fmod(2*M_PI+rad1-rad2, M_PI);\n\n\t\tif(fabs(rad1-rad2) < 0.0001) {\n\t\t\tprintf(\"2\\n\");\n\t\t} else if(fabs(rdiff-M_PI/2) < 0.0001) {\n\t\t\tprintf(\"1\\n\");\n\t\t} else {\n\t\t\tprintf(\"0\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\n#define EPS 1e-8\n\nint main(void)\n{\n    int q;\n    double x[4], y[4];\n    double dx1, dy1, dx2, dy2;\n    double m1, m2;\n    int i;\n\n    scanf(\"%d\", &q);\n    while (q-- > 0){\n        for (i = 0; i < 4; i++){\n            scanf(\"%lf %lf\", &x[i], &y[i]);\n        }\n        dx1 = x[1] - x[0];\n        dy1 = y[1] - y[0];\n        dx2 = x[3] - x[2];\n        dy2 = y[3] - y[2];\n        m1 = dy1 / dx1;\n        m2 = dy2 / dx1;\n\n        if (fabs(m1 - m2) < EPS){\n            printf(\"2\\n\");\n        }\n        else if (fabs(dx1 * dx2 + dy1 * dy2) < EPS){\n            printf(\"1\\n\");\n        }\n        else {\n            printf(\"0\\n\");\n        }\n    }\n\n    return (0);\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main()\n{\nint q,i,x1,y1,x2,y2,x3,y3,x4,y4;\ndouble m1,m2;\nscanf(\"%d\",&q);\nfor(i=1;i<=q;i++)\n{\nscanf(\"%d%d%d%d%d%d%d%d\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\nif((x2-x1)==0 && (x4-x3)==0)\n{\nprintf(\"2\\n\");\n}\nelse if(((x2-x1)==0 && (y4-y3)==0)||((x4-x3)==0 && (y2-y1)==0))\n{\nprintf(\"1\\n\");\n}\nelse if((x2-x1)==0 || (x4-x3)==0)\n{\nprintf(\"0\\n\");\n}\nelse\n{\nm1=(y2-y1)/((x2-x1)*1.00);\nm2=(y4-y3)/((x4-x3)*1.00);\nif(m1==m2)\n{\nprintf(\"2\\n\");\n}\nelse if(m1*m2==-1)\n{\nprintf(\"1\\n\");\n}\nelse\n{\nprintf(\"0\\n\");\n}\n}\n}\nreturn 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\n#define PREC 1e-12\n\nint main() {\n    int x, y, x0, y0, x1, y1, x2, y2, x3, y3;\n    int q;\n    double v1x, v1y, v2x, v2y, cosa;\n    int judge;\n\n    scanf(\"%d\", &q);\n    \n    while (q--) {\n        scanf(\"%d %d %d %d %d %d %d %d\",\n              &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n        v1x = x1 - x0;\n        v1y = y1 - y0;\n        v2x = x3 - x2;\n        v2y = y3 - y2;\n        cosa = (v1x*v2x + v1y*v2y) /\n            (sqrt(v1x*v1x+v1y*v1y) * sqrt(v2x*v2x+v2y*v2y));\n\n        if (fabs(cosa) < PREC) {\n            judge = 1;\n        }\n        else if (fabs(fabs(cosa) - 1.0) < PREC) {\n            judge = 2;\n        }\n        else {\n            judge = 0;\n        }\n        printf(\"%d\\n\",　judge);\n    }\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(){\n    int i, q, x1, y1, x2, y2, x3, y3, x4, y4;\n    scanf(\"%d\", &q);\n    for(i=0; i<q; i++){\n        scanf(\"%d%d%d%d%d%d%d%d\", &x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n        if((y2-y1)*(x4-x3)-(y4-y3)*(x2-x1)==0)puts(\"2\");\n        else if((y2-y1)*(y4-y3)+(x2-x1)*(x4-x3)==0)puts(\"1\");\n        else puts(\"0\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <math.h>\n#include <stdio.h>\n\nint rel_l_l( double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4 ) {\n\tint rel;\n\n\trel = 0;\n\tif ( fabs( ( x1 - x2 ) * ( x3 - x4 ) + ( y1 - y2 ) * ( y3 - y4 ) ) < 1e-10 )\n\t\trel = 1;\n\telse if ( fabs( ( x1 - x2 ) * ( y3 - y4 ) - ( y1 - y2 ) * ( x3 - x4 ) ) < 1e-10 ) {\n\t\trel = 2;\n\t\tif ( fabs( ( x1 - x3 ) * ( y3 - y4 ) - ( y1 - y3 ) * ( x3 - x4 ) ) < 1e-10 )\n\t\t\trel = 3;\n\t}\n\n\treturn rel;\n}\n\nint main( void ) {\n\tint q;\n\n\tscanf( \"%d\", &q );\n\twhile ( q-- ) {\n\t\tint rel;\n\t\tdouble x1, y1, x2, y2, x3, y3, x4, y4;\n\n\t\tscanf( \"%lf %lf %lf %lf %lf %lf %lf %lf\", &x1, &y1, &x2, &y2, &x3, &y3, &x4, &y4 );\n\n\t\trel = rel_l_l( x1, y1, x2, y2, x3, y3, x4, y4 );\n\t\tprintf( \"%d\\n\", rel >= 2 ? 2 : rel );\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\n#define EPS 1e-16\n\nint main(void)\n{\n    int q;\n    double x[4], y[4];\n    double dx1, dy1, dx2, dy2;\n    double m1, m2;\n    int i;\n\n    scanf(\"%d\", &q);\n    while (q-- > 0){\n        for (i = 0; i < 4; i++){\n            scanf(\"%lf %lf\", &x[i], &y[i]);\n        }\n        dx1 = x[1] - x[0];\n        dy1 = y[1] - y[0];\n        dx2 = x[3] - x[2];\n        dy2 = y[3] - y[2];\n        m1 = dy1 / dx1;\n        m2 = dy2 / dx1;\n\n        if (fabs(m1 - m2) < EPS){\n            printf(\"2\\n\");\n        }\n        else if (fabs(dx1 * dx2 + dy1 * dy2) < EPS){\n            printf(\"1\\n\");\n        }\n        else {\n            printf(\"0\\n\");\n        }\n    }\n\n    return (0);\n}"
  },
  {
    "language": "C",
    "code": "#include <math.h>\n#include <stdio.h>\n\nint rel_l_l( double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4 ) {\n\tint rel;\n\n\tif ( fabs( ( x1 - x2 ) * ( y3 - y4 ) - ( y1 - y2 ) * ( x3 - x4 ) ) < 1e-10 ) {\n\t\trel = 2;\n\t\tif ( fabs( ( x1 - x3 ) * ( y3 - y4 ) - ( y1 - y3 ) * ( x3 - x4 ) ) < 1e-10 )\n\t\t\trel = 3;\n\t} else {\n\t\trel = 0;\n\t\tif ( fabs( ( x1 - x2 ) * ( x3 - x4 ) + ( y1 - y2 ) * ( y3 - y4 ) ) < 1e-10 )\n\t\t\trel = 1;\n\t}\n\n\treturn rel;\n}\n\nint main( void ) {\n\tint q;\n\n\tscanf( \"%d\", &q );\n\twhile ( q-- ) {\n\t\tint rel;\n\t\tdouble x1, y1, x2, y2, x3, y3, x4, y4;\n\n\t\tscanf( \"%lf %lf %lf %lf %lf %lf %lf %lf\", &x1, &y1, &x2, &y2, &x3, &y3, &x4, &y4 );\n\n\t\trel = rel_l_l( x1, y1, x2, y2, x3, y3, x4, y4 );\n\t\tprintf( \"%d\\n\", rel >= 2 ? 2 : rel );\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main()\n{\nint q,i,x1,y1,x2,y2,x3,y3,x4,y4;\nscanf(\"%d\",&q);\nfor(i=1;i<=q;i++)\n{\nscanf(\"%d%d%d%d%d%d%d%d\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\nif((x2-x1)==0 && (x4-x3)==0)\n{\nprintf(\"2\\n\");\n}\nelse if(((x2-x1)==0 && (y4-y3)==0)||((x4-x3)==0 && (y2-y1)==0))\n{\nprintf(\"1\\n\");\n}\nelse if((x2-x1)==0 || (x4-x3)==0)\n{\nprintf(\"0\\n\");\n}\nelse\n{\nif(((y2-y1)*(x4-x3))-((y4-y3)*(x2-x1)))\n{\nprintf(\"2\\n\");\n}\nelse if(((x2-x1)*(x4-x3))+((y2-y1)*(y4-y3))==0)\n{\nprintf(\"1\\n\");\n}\nelse\n{\nprintf(\"0\\n\");\n}\n}\n}\nreturn 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main()\n{\n\tint t,i,j;\n\tscanf(\"%d\",&t);\n\n\tfor(i=0;i<t;i++)\n\t{\n       int X[4],Y[4],x1,x2,y1,y2;\n\n       for(j=0;j<4;j++)\n\t   {\n\t   \tscanf(\"%d\",&X[j]);\n\t   \tscanf(\"%d\",&Y[j]);\n\t   }\n\n\n\t   x1=X[0]-X[1];\n\t   x2=X[2]-X[3];\n\t   y1=Y[0]-Y[1];\n\t   y2=Y[2]-Y[3];\n\n\t   if((x1*y2)==(y1*x2))\n         printf(\"%d\\n\",2);\n\n\t   else  if((x1*x2)== (y2*y1))\n\t\t    printf(\"%d\\n\",1);\n\t   else\n\t\tprintf(\"%d\\n\",0);\n\n\n\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main()\n{\n    double q,i,x0,y0,x1,y1,x2,y2,x3,y3;\n    scanf(\"%lf\",&q);\n    for(i=1;i<=q;i++)\n    {\n        scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x0,&y0,&x1,&y1,&x2,&y2,&x3,&y3);\n        if((y0-y1)==0 && (x2-x3)==0)\n            printf(\"1\\n\");\n        else if((y1-y0)/(x1-x0)==(y2-y3)/(x2-x3))\n            printf(\"2\\n\");\n        else if((((y1-y0)/(x1-x0))*((y2-y3)/(x2-x3)))==-1)\n            printf(\"1\\n\");\n        else\n            printf(\"0\\n\");\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <math.h>\n#include <stdio.h>\n\nint rel_l_l( double x0, double y0, double x1, double y1, double x2, double y2, double x3, double y3, double *x, double *y ) {\n\tdouble a, b, c, d;\n\tint rel;\n\n\tif ( x0 != x1 ) {\n\t\ta = ( y0 - y1 ) / ( x0 - x1 );\n\t\tb = ( x0 * y1 - x1 * y0 ) / ( x0 - x1 );\n\t}\n\tif ( x2 != x3 ) {\n\t\tc = ( y2 - y3 ) / ( x2 - x3 );\n\t\td = ( x2 * y3 - x3 * y2 ) / ( x2 - x3 );\n\t}\n\n\trel = 0;\n\tif ( x0 == x1 ) {\n\t\t*x = x0;\n\t\tif ( x2 == x3 )\n\t\t\tif ( x0 == x2 )\n\t\t\t\trel = 2;\n\t\t\telse\n\t\t\t\trel = 1;\n\t\telse {\n\t\t\t*y = c * *x + d;\n\t\t\tif ( y2 == y3 )\n\t\t\t\trel = 3;\n\t\t}\n\t} else {\n\t\tif ( x2 == x3 ) {\n\t\t\t*x = x2;\n\t\t\tif ( y0 == y1 )\n\t\t\t\trel = 3;\n\t\t} else\n\t\t\tif ( a == c )\n\t\t\t\tif ( b == d )\n\t\t\t\t\trel = 2;\n\t\t\t\telse\n\t\t\t\t\trel = 1;\n\t\t\telse {\n\t\t\t\t*x = ( -b + d ) / ( a - c );\n\t\t\t\tif ( fabs( a * c + 1.0 ) < 1e-12 )\n\t\t\t\t\trel = 3;\n\t\t\t}\n\t\t*y = a * *x + b;\n\t}\n\n\treturn rel;\n}\n\nint main( void ) {\n\tint q;\n\n\tscanf( \"%d\", &q );\n\twhile ( q-- ) {\n\t\tint rel;\n\t\tdouble x0, y0, x1, y1, x2, y2, x3, y3, x, y;\n\n\t\tscanf( \"%lf %lf %lf %lf %lf %lf %lf %lf\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3 );\n\n\t\trel = rel_l_l( x0, y0, x1, y1, x2, y2, x3, y3, &x, &y );\n\n\t\tprintf( \"%d\\n\", rel == 0 ? 0 : rel == 1 || rel == 2 ? 2 : 1 );\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main()\n{\nlong long int q,i,x1,y1,x2,y2,x3,y3,x4,y4;\ndouble m1,m2;\nscanf(\"%d\",&q);\nfor(i=1;i<=q;i++)\n{\nscanf(\"%lld%lld%lld%lld%lld%lld%lld%lld\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\nif((x2-x1)==0 && (x4-x3)==0 && x1!=x3)\n{\nprintf(\"2\\n\");\n}\nelse if(((x2-x1)==0 && (y4-y3)==0)||((x4-x3)==0 && (y2-y1)==0))\n{\nprintf(\"1\\n\");\n}\nelse if((x2-x1)==0 || (x4-x3)==0)\n{\nprintf(\"0\\n\");\n}\nelse\n{\nm1=(y2-y1)/((x2-x1)*1.00);\nm2=(y4-y3)/((x4-x3)*1.00);\nif(m1==m2 && y1-(m1*x1)!=y3-(m2*x3))\n{\nprintf(\"2\\n\");\n}\nelse if(m1*m2==-1)\n{\nprintf(\"1\\n\");\n}\nelse\n{\nprintf(\"0\\n\");\n}\n}\n}\nreturn 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nint main(void){\n   double  l0, l1;\n   int x0, y0, x1, y1, x2, y2, x3, y3, i, n;\n   scanf(\"%d\", &n);\nfor (i = 0; i < n; i++){\n    scanf(\"%d %d %d %d %d %d %d %d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n    l0 = (y1 - y0) / (x1 - x0);\n    l1 = (y3 - y2) / (x3 - x2);\n    if (l0 == l1){\n        printf(\"2\\n\");\n    }else if (l0 * l1 == -1){\n        printf(\"1\\n\");\n    }else{\n        printf(\"0\\n\");\n    }\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main()\n{\nint q,i,x1,y1,x2,y2,x3,y3,x4,y4;\nscanf(\"%d\",&q);\nfor(i=1;i<=q;i++)\n{\nscanf(\"%d%d%d%d%d%d%d%d\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\nif((x2-x1)==0 && (x4-x3)==0)\n{\nprintf(\"2\\n\");\n}\nelse if(((x2-x1)==0 && (y4-y3)==0)||((x4-x3)==0 && (y2-y1)==0))\n{\nprintf(\"1\\n\");\n}\nelse if((x2-x1)==0 || (x4-x3)==0)\n{\nprintf(\"0\\n\");\n}\nelse\n{\nif(((y2-y1)*(x4-x3))-((y4-y3)*(x2-x1))==0)\n{\nprintf(\"2\\n\");\n}\nelse if(((x2-x1)*(x4-x3))+((y2-y1)*(y4-y3))==0)\n{\nprintf(\"1\\n\");\n}\nelse\n{\nprintf(\"0\\n\");\n}\n}\n}\nreturn 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main()\n{\nint q,i,x1,y1,x2,y2,x3,y3,x4,y4;\ndouble m1,m2;\nscanf(\"%d\",&q);\nfor(i=1;i<=q;i++)\n{\nscanf(\"%d%d%d%d%d%d%d%d\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\nif((x2-x1)==0 && (x4-x3)==0)\n{\nprintf(\"2\\n\");\n}\nelse if(((x2-x1)==0 && (y4-y3)==0)||((x4-x3)==0 && (y2-y1)==0))\n{\nprintf(\"1\\n\");\n}\nelse if((x2-x1)==0 || (x4-x3)==0)\n{\nprintf(\"0\\n\");\n}\nelse\n{\nm1=(y2-y1)/((x2-x1)*1.00);\nm2=(y4-y3)/((x4-x3)*1.00);\nif(m1==m2)\n{\nprintf(\"2\\n\");\n}\nelse if(m1*m2==-1)\n{\nprintf(\"1\\n\");\n}\nelse\n{\nprintf(\"0\\n\");\n}\n}\n}\nreturn 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nint main()\n{\n    long long int i,t,x1,x2,x3,x4,y1,y2,y3,y4;\n    scanf(\"%lld\",&t);\n\tfor(i=1;i<=t;i++)\n\t{\n\t\tscanf(\"%lld%lld%lld%lld%lld%lld%lld%lld\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n\t\tif((x2-x1)==0 && (x4-x3)==(y2-y1))\n\t\tprintf(\"1\\n\");\n\t\telse if((x4-x3)==0 && (y4-y3)==(x2-x1))\n\t\tprintf(\"1\\n\");\n\t\telse if(((x2-x1)==0 || (x4-x3)==0) && (y2-y1)==(y4-y3))\n\t\tprintf(\"2\\n\");\n\t\t else if(((y2-y1)/(x2-x1))==((y4-y3)/(x4-x3)))\n\t\t printf(\"2\\n\");\n\t\t else if(((y2-y1)/(x2-x1))*((y4-y3)/(x4-x3))==-1)\n\t\t printf(\"1\\n\");\n\t\t else \n\t\t printf(\"0\\n\");\n\t}\n   \n    return 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nint main(void){\n   double  l0, l1;\n   double x0, y0, x1, y1, x2, y2, x3, y3;\n   int i, n;\n   scanf(\"%d\", &n);\nfor (i = 0; i < n; i++){\n    scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n    if (x1 == x0 && x2 == x3){\n        printf(\"2\\n\");\n        continue;\n    }\n    if ((x1 == x0 && y2 == y3)||(x2 == x3 && y0 == y1)){\n        printf(\"1\\n\");\n        continue;\n    }\n    if (x1 == x0 || x2 == x3){\n        printf(\"0\\n\");\n        continue;\n    }\n    l0 = (y1 - y0) / (x1 - x0);\n    l1 = (y3 - y2) / (x3 - x2);\n    if (l0 == l1){\n        printf(\"2\\n\");\n    }else if (l0 * l1 == -1){\n        printf(\"1\\n\");\n    }else{\n        printf(\"0\\n\");\n    }\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main()\n{\n\n    int n,p,i;\n    long long\n    int x[4],y[4],s1x,s2x,s1y,s2y;\n    scanf(\"%d\",&n);\n    while(n--){\n        for(i=0;i<4;i++)\n            scanf(\"%lld %lld\",&x[i],&y[i]);\n        s2x=x[3]-x[2];\n        s1x=x[1]-x[0];\n        s2y=y[3]-y[2];\n        s1y=y[1]-y[0];\n        if(s1y*s2y + s1x*s2x==0)\n            printf(\"1\\n\");\n        else if(s1x*s2y - s1y*s2x==0)\n            printf(\"2\\n\");\n\n        else\n            printf(\"0\\n\");\n\n\n\n\n    }\n\n    return 0;\n\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main()\n{\n    int test;\n    scanf(\"%d\",&test);\n    while(test--)\n    {\n        int x1,y1,x2,y2,x3,y3,x4,y4;\n        scanf(\"%d%d%d%d%d%d%d%d\", &x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n        int X1,X2,Y1,Y2;\n        if((y2-y1)*(x4-x3)-(y4-y3)*(x2-x1)==0)\n            printf(\"2\\n\");\n        else if((y2-y1)*(y4-y3)+(x4-x3)*(x2-x1)==0)\n            printf(\"1\\n\");\n        else\n            printf(\"0\\n\");\n\n    }\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nint main(void){\n   int i, n, x0, y0, x1, y1, x2, y2, x3, y3, l0x, l0y, l1x, l1y;\n   scanf(\"%d\", &n);\nfor (i = 0; i < n; i++){\n    scanf(\"%d %d %d %d %d %d %d %d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n    l0x = x1 - x0;\n    l0y = y1 - y0;\n    l1x = x3 - x2;\n    l1y = y3 - y2;\n    if (l0x == 0 && l1x == 0){\n        printf(\"2\\n\");\n        continue;\n    }\n    if ((l0x == 0 && l1y == 0)||(l1x == 0 && l0y == 0)){\n        printf(\"1\\n\");\n        continue;\n    }\n    if (l0x == 0 || l1x == 0){\n        printf(\"0\\n\");\n        continue;\n    }\n    if (l0y / l0x == l1y / l1x){\n        printf(\"2\\n\");\n    }else if (l0y * l1y == -1 * l0x * l1x){\n        printf(\"1\\n\");\n    }else{\n        printf(\"0\\n\");\n    }\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <float.h>\n#include <math.h>\n#include <stdio.h>\n\nint rel_l_l( double x0, double y0, double x1, double y1, double x2, double y2, double x3, double y3, double *x, double *y ) {\n\tdouble a, b, c, d;\n\tint rel;\n\n\tif ( x0 != x1 ) {\n\t\ta = ( y0 - y1 ) / ( x0 - x1 );\n\t\tb = ( x0 * y1 - x1 * y0 ) / ( x0 - x1 );\n\t}\n\tif ( x2 != x3 ) {\n\t\tc = ( y2 - y3 ) / ( x2 - x3 );\n\t\td = ( x2 * y3 - x3 * y2 ) / ( x2 - x3 );\n\t}\n\n\trel = 0;\n\tif ( x0 == x1 ) {\n\t\t*x = x0;\n\t\tif ( x2 == x3 )\n\t\t\tif ( x0 == x2 )\n\t\t\t\trel = 2;\n\t\t\telse\n\t\t\t\trel = 1;\n\t\telse {\n\t\t\t*y = c * *x + d;\n\t\t\tif ( c == 0.0 )\n\t\t\t\trel = 3;\n\t\t}\n\t} else {\n\t\tif ( x2 == x3 ) {\n\t\t\t*x = x2;\n\t\t\tif ( a == 0.0 )\n\t\t\t\trel = 3;\n\t\t} else\n\t\t\tif ( a == c )\n\t\t\t\tif ( b == d )\n\t\t\t\t\trel = 2;\n\t\t\t\telse\n\t\t\t\t\trel = 1;\n\t\t\telse {\n\t\t\t\t*x = ( -b + d ) / ( a - c );\n\t\t\t\tif ( fabs( a * c + 1.0 ) < DBL_EPSILON )\n\t\t\t\t\trel = 3;\n\t\t\t}\n\t\t*y = a * *x + b;\n\t}\n\n\treturn rel;\n}\n\nint main( void ) {\n\tint q;\n\n\tscanf( \"%d\", &q );\n\twhile ( q-- ) {\n\t\tint rel;\n\t\tdouble x0, y0, x1, y1, x2, y2, x3, y3, x, y;\n\n\t\tscanf( \"%lf %lf %lf %lf %lf %lf %lf %lf\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3 );\n\n\t\trel = rel_l_l( x0, y0, x1, y1, x2, y2, x3, y3, &x, &y );\n\n\t\tprintf( \"%d\\n\", rel == 0 ? 0 : rel == 1 || rel == 2 ? 2 : 1 );\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main()\n{\nlong long int q,i,x1,y1,x2,y2,x3,y3,x4,y4;\ndouble m1,m2;\nscanf(\"%d\",&q);\nfor(i=1;i<=q;i++)\n{\nscanf(\"%lld%lld%lld%lld%lld%lld%lld%lld\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\nif((x2-x1)==0 && (x4-x3)==0 && x1!=x3)\n{\nprintf(\"2\\n\");\n}\nelse if(((x2-x1)==0 && (y4-y3)==0)||((x4-x3)==0 && (y2-y1)==0))\n{\nprintf(\"1\\n\");\n}\nelse if((x2-x1)==0 || (x4-x3)==0)\n{\nprintf(\"0\\n\");\n}\nelse\n{\nm1=(y2-y1)/((x2-x1)*1.00);\nm2=(y4-y3)/((x4-x3)*1.00);\nif(m1==m2 && y1-(m1*x1)!=y3-(m2*x3))\n{\nprintf(\"2\\n\");\n}\nelse if(m1*m2==-1)\n{\nprintf(\"1\\n\");\n}\nelse\n{\nprintf(\"0\\n\");\n}\n}\n}\nreturn 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n// a.s, a.e, p?????????????????????\n// ???????¨???????????????????????????????  1\n// ????¨?????????????????????????????????? -1\n// p, a.s, a.e????????????????????? 2\n// a.s, a.e, p?????????????????????-2\n// ???p?????´???a???????????????????????? 0\nint ccw(LINE a,POINT p){\n\tint cls = cross(make_vec(a.s,a.e),make_vec(a.s,p));\n\tif(cls > 0){\n\t\treturn  1;\n\t}else if(cls < 0){\n\t\treturn -1;\n\t}else if(dot(make_vec(a.s,a.e),make_vec(a.s,p)) < 0){\n\t\treturn  2;\n\t}else if(dot(make_vec(a.e,a.s),make_vec(a.e,p)) < 0){\n\t\treturn -2;\n\t}else{\n\t\treturn  0;\n\t}\n}\n\n// ??????????????????\nint parallel(LINE a,LINE b){\n\tif(!cross(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n// ?????´????????????\nint orthogonal(LINE a,LINE b){\n\tif(!dot(make_vec(a.s,a.e),make_vec(b.s,b.e)))\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\nint main(){\n\tLINE a,b;\n\tint k;\n\tscanf(\"%d\",&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.s.x,&a.s.y,&a.e.x,&a.e.y);\n\t\tscanf(\"%lf%lf%lf%lf\",&b.s.x,&b.s.y,&b.e.x,&b.e.y);\n\t\tprintf(\"%d\\n\",orthogonal(a,b)+parallel(a,b)*2);\n\t}\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n/*\n\tLINE a;\n\tPOINT b;\n\tint k;\n\tchar s[5][100]={{\"ONLINE_FRONT\"},{\"CLOCKWISE\"},{\"ON_SEGMENT\"},{\"COUNTER_CLOCKWISE\"},{\"ONLINE_BACK\"}};\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tprintf(\"%s\\n\",s[ccw(a,b)+2]);\n\t}\n*/\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main()\n{\n    int x0,y0,x1,y1,x2,y2,x3,y3,m1,m2,i,n,t;\n    scanf(\"%d\",&t);\n    for(i=0;i<t;i++){\n        scanf(\"%d%d%d%d%d%d%d%d\",&x0,&y0,&x1,&y1,&x2,&y2,&x3,&y3);\n        if(((y1-y0)*(x3-x2))-((y3-y2)*(x1-x0))==0)\n            printf(\"2\\n\");\n        else if(((y1-y0)*(y3-y2))+((x3-x2)*(x1-x0))==0)\n            printf(\"1\\n\");\n        else\n            printf(\"0\\n\");\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\n#define EPS 1e-6\n\nint main(void)\n{\n    int q;\n    double x[4], y[4];\n    double dx1, dy1, dx2, dy2;\n    double m1, m2;\n    int i;\n\n    scanf(\"%d\", &q);\n    while (q-- > 0){\n        for (i = 0; i < 4; i++){\n            scanf(\"%lf %lf\", &x[i], &y[i]);\n        }\n        dx1 = x[1] - x[0];\n        dy1 = y[1] - y[0];\n        dx2 = x[3] - x[2];\n        dy2 = y[3] - y[2];\n        m1 = dy1 / dx1;\n        m2 = dy2 / dx1;\n\n        if (fabs(m1 - m2) < EPS){\n            printf(\"2\\n\");\n        }\n        else if (fabs(dx1 * dx2 + dy1 * dy2) < EPS){\n            printf(\"1\\n\");\n        }\n        else {\n            printf(\"0\\n\");\n        }\n    }\n\n    return (0);\n}"
  },
  {
    "language": "C",
    "code": "\n#include <stdio.h>\n#include <math.h>\n\nint cross(double x0,double y0,double x1,double y1,double x2,double y2,double x3,double y3){\n  double a0=0,a1=0;\n  int b0=y1-y0;\n  int b1=x1-x0;\n  int b2=y3-y2;\n  int b3=x3-x2;\n  a0=(y1-y0)/(x1-x0);\n  a1=(y3-y2)/(x3-x2);\n  if(fabs(y2-y0)==fabs(y3-y1)) return 2; \n  else if((b0==0 && b3==0) || (b1==0 && b2==0)|| a0*a1==-1.0)    return 1;\n  else return 0;\n}\n\n\nint main(){\n  int number,i,m;\n  double x0,y0,x1,y1,x2,y2,x3,y3;\n  scanf(\"%d\",&number);\n  for(i=0;i<number;i++){\n    scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x0,&y0,&x1,&y1,&x2,&y2,&x3,&y3);\n    m=cross(x0,y0,x1,y1,x2,y2,x3,y3);\n    printf(\"%d\\n\",m);\n\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#define EPS 0.0000000002\n#define MAX 1010001000\n\ntypedef struct point{\n    double x, y;\n}point;\n\ntypedef struct line{\n    point st, en;\n}line;\n\ndouble norm(point a);\ndouble norm2(point a);\ndouble distans(point a, point b);\npoint sum_vector(point a, point b);\npoint diff_vector(point a, point b);\npoint minus_vector(point a);\ndouble dot(point a, point b);\ndouble prod(point a, point b);\n\npoint reflection(line a, point p);\npoint projection(line a, point p);\nint ccw(line a, point p);\n\npoint reflection(line a, point p)\n{\n    //直線aについて点pと線対称な点を返す\n    return sum_vector(projection(a, p), diff_vector(projection(a, p), p));\n}\n\npoint projection(line a, point p)\n{\n    //直線ab上に点pから垂線を下ろしたときの点h//\n    point h;\n    double k = dot(diff_vector(a.st, p), diff_vector(a.st, a.en))\n                / dot(diff_vector(a.en, a.st), diff_vector(a.en, a.st));\n    h.x = k * (a.en.x - a.st.x) + a.st.x;\n    h.y = k * (a.en.y - a.st.y) + a.st.y;\n    return h;\n}\n\ndouble norm(point a)\n{\n    //原点からの距離\n    return sqrt((a.x * a.x) + (a.y * a.y));\n}\n\ndouble norm2(point a)\n{\n    //原点からの距離の二乗\n    return (a.x * a.x) + (a.y * a.y);\n}\n\ndouble distans(point a, point b)\n{\n    //二点間の距離\n    point tmp = sum_vector(b, minus_vector(a));\n    return norm(tmp);\n}\n\npoint sum_vector(point a, point b)\n{\n    //ベクトルの和\n    a.x += b.x;\n    a.y += b.y;\n    return a;\n}\n\npoint diff_vector(point a, point b)\n{\n    //ベクトルの差\n    a.x -= b.x;\n    a.y -= b.y;\n    return a;\n}\n\npoint minus_vector(point a)\n{\n    //逆ベクトル\n    a.x *= -1;\n    a.y *= -1;\n    return a;\n}\n\ndouble dot(point a, point b)\n{\n    //内積\n    return (a.x * b.x) + (a.y * b.y);\n}\n\ndouble prod(point a, point b)\n{\n    //外積\n    return (a.x * b.y) - (b.x * a.y);\n}\n\nint ccw(line a, point p)\n{\n    //counter clockwise == 1\n    //clockwise == 2\n    //online back == 3\n    //online front == 4\n    //on segment == 5\n    int cls = prod(diff_vector(a.en, a.st), diff_vector(p, a.st));\n    if (cls > 0) {\n        return 1;\n    } else if (cls < 0) {\n        return 2;\n    } else if (dot(diff_vector(a.en, a.st), diff_vector(p, a.st)) < 0) {\n        return 3;\n    } else if (norm(diff_vector(a.st, a.en)) < norm(diff_vector(a.st, p))) {\n        return 4;\n    } else {\n        return 5;\n    }\n}\n\nint parallel(line a, line b)\n{\n    //並行で1,そうでなくて0\n    if (!prod(diff_vector(a.en, a.st), diff_vector(b.en, b.st))) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint orthogonal(line a, line b)\n{\n    //直行で1,そうでなくて0\n    if (!dot(diff_vector(a.en, a.st), diff_vector(b.en, b.st))) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n///////////////////////////////////////\n\nint main(void)\n{\n    line a, b;\n    int n, i;\n\n    scanf(\"%d\", &n);\n    for (i = 0; i < n; i++) {\n        scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\"\n                , &a.st.x, &a.st.y, &a.en.x, &a.en.y\n                , &b.st.x, &b.st.y, &b.en.x, &b.en.y);\n        if (parallel(a, b)) {\n            puts(\"2\");\n        } else {\n            printf(\"%d\\n\",orthogonal(a, b));\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nint main()\n{\n    long long int i,t,x1,x2,x3,x4,y1,y2,y3,y4;\n    scanf(\"%lld\",&t);\n\tfor(i=1;i<=t;i++)\n\t{\n\t\tscanf(\"%lld%lld%lld%lld%lld%lld%lld%lld\",&x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n\t\tif((x2-x1)==0 && (x4-x3)==(y2-y1))\n\t\tprintf(\"1\\n\");\n\t\telse if((x4-x3)==0 && (y4-y3)==(x2-x1))\n\t\tprintf(\"1\\n\");\n\t\telse if((x2-x1)==0 && (x4-x3)==0 && (y2-y1)==(y4-y3))\n\t\tprintf(\"2\\n\");\n\t\t else if(((y2-y1)/(x2-x1))==((y4-y3)/(x4-x3)))\n\t\t printf(\"2\\n\");\n\t\t else if(((y2-y1)/(x2-x1))*((y4-y3)/(x4-x3))==-1)\n\t\t printf(\"1\\n\");\n\t\t else \n\t\t printf(\"0\\n\");\n\t}\n   \n    return 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\n#define EPS 1e-14\n\nint main(void)\n{\n    int q;\n    double x[4], y[4];\n    double dx1, dy1, dx2, dy2;\n    double m1, m2;\n    int i;\n\n    scanf(\"%d\", &q);\n    while (q-- > 0){\n        for (i = 0; i < 4; i++){\n            scanf(\"%lf %lf\", &x[i], &y[i]);\n        }\n        dx1 = x[1] - x[0];\n        dy1 = y[1] - y[0];\n        dx2 = x[3] - x[2];\n        dy2 = y[3] - y[2];\n        m1 = dy1 / dx1;\n        m2 = dy2 / dx1;\n\n        if (fabs(m1 - m2) < EPS){\n            printf(\"2\\n\");\n        }\n        else if (fabs(dx1 * dx2 + dy1 * dy2) < EPS){\n            printf(\"1\\n\");\n        }\n        else {\n            printf(\"0\\n\");\n        }\n    }\n\n    return (0);\n}"
  },
  {
    "language": "C",
    "code": "#include <math.h>\n#include <stdio.h>\n\nint rel_l_l( double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4 ) {\n\tint rel;\n\n\trel = 0;\n\tif ( fabs( ( x1 - x2 ) * ( x3 - x4 ) + ( y1 - y2 ) * ( y3 - y4 ) ) < 1e-10 )\n\t\trel = 1;\n\telse if ( fabs( ( x1 - x2 ) * ( y3 - y4 ) - ( y1 - y2 ) * ( x3 - x4 ) ) < 1e-10 ) {\n\t\trel = 2;\n\t\tif ( fabs( ( x1 - x3 ) * ( y3 - y4 ) - ( y1 - y3 ) * ( x3 - x4 ) ) < 1e-10 )\n\t\t\trel = 3;\n\t}\n\n\treturn rel;\n}\n\nint main( void ) {\n\tint q;\n\n\tscanf( \"%d\", &q );\n\twhile ( q-- ) {\n\t\tint rel;\n\t\tdouble x1, y1, x2, y2, x3, y3, x4, y4;\n\n\t\tscanf( \"%lf %lf %lf %lf %lf %lf %lf %lf\", &x1, &y1, &x2, &y2, &x3, &y3, &x4, &y4 );\n\n\t\trel = rel_l_l( x1, y1, x2, y2, x3, y3, x4, y4 );\n\t\tprintf( \"%d\\n\", rel >= 2 ? 2 : rel );\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "\n#include <stdio.h>\n#include <math.h>\n\nint cross(double x0,double y0,double x1,double y1,double x2,double y2,double x3,double y3){\n  double a0=0,a1=0;\n  int b0=y1-y0;\n  int b1=x1-x0;\n  int b2=y3-y2;\n  int b3=x3-x2;\n  a0=(y1-y0)/(x1-x0);\n  a1=(y3-y2)/(x3-x2);\n  /*if(fabs(y2-y0)==fabs(y3-y1)) return 2; \n  else if((b0==0 && b3==0) || (b1==0 && b2==0)|| a0*a1==-1.0)    return 1;\n  else return 0;\n  */\n  if((y1-y0)*(x3-x2)-(y3-y2)*(x1-x0)==0) return 2;\n  else if((y1-y0)*(y3-y2)+(x1-x0)*(x3-x2)==0) return 1;\n  else return 0;\n  \n}\n\n\nint main(){\n  int number,i,m;\n  double x0,y0,x1,y1,x2,y2,x3,y3;\n  scanf(\"%d\",&number);\n  for(i=0;i<number;i++){\n    scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x0,&y0,&x1,&y1,&x2,&y2,&x3,&y3);\n    m=cross(x0,y0,x1,y1,x2,y2,x3,y3);\n    printf(\"%d\\n\",m);\n\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\nint cross(double x0,double y0,double x1,double y1,double x2,double y2,double x3,double y3){\n  double a0=0,a1=0;\n  int b0=y1-y0;\n  int b1=x1-x0;\n  int b2=y3-y2;\n  int b3=x3-x2;\n  a0=(y1-y0)/(x1-x0);\n  a1=(y3-y2)/(x3-x2);\n  if((y2-y0)==(y3-y1)) return 2; \n  else if((b0==0 && b3==0) || (b1==0 && b2==0)|| a0*a1==-1.0)    return 1;\n  \n  \n  else return 0;\n}\n\n\nint main(){\n  int number,i,m;\n  double x0,y0,x1,y1,x2,y2,x3,y3;\n  scanf(\"%d\",&number);\n  for(i=0;i<number;i++){\n    scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x0,&y0,&x1,&y1,&x2,&y2,&x3,&y3);\n    m=cross(x0,y0,x1,y1,x2,y2,x3,y3);\n    printf(\"%d\\n\",m);\n\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ndouble get_radian(double x1, double y1, double x2, double y2) {\n\tif(fabs(x1-x2) < 0.00000001f) {\n\t\tif(fabs(y1-y2) < 0.00000001f) {\n\t\t\treturn 0.0f;\n\t\t} else if(y1 > y2) {\n\t\t\treturn 3 * M_PI / 2;\n\t\t} else {\n\t\t\treturn M_PI / 2;\n\t\t}\n\t} else if(fabs(y1-y2) < 0.00000001f) {\n\t\tif(fabs(x1-x2) < 0.00000001f) {\n\t\t\treturn 0.0f;\n\t\t} else if(x1 > x2) {\n\t\t\treturn M_PI;\n\t\t}\n\t\treturn 0.0;\n\t}\n\t\n\tif(x2 >= x1) {\n\t\tif(y2 >= y1) {\n\t\t\treturn atan((y2-y1)/(x2-x1));\n\t\t}\n\t\treturn 2 * M_PI + atan((y2-y1)/(x2-x1));\n\t} else {\n\t\tif(y2 >= y1) {\n\t\t\treturn M_PI - atan((y2-y1)/(x1-x2));\n\t\t}\n\t\treturn M_PI + atan((y2-y1)/(x2-x1));\n\t}\n}\n\nint main(void) {\n\tdouble x1,x2,x3,x4,y1,y2,y3,y4;\n\tdouble rad1, rad2;\n\tdouble rdiff;\n\tint i, n;\n\t\n\tscanf(\"%d\\n\", &n);\n\tfor(i=0;i<n;i++) {\n\t\tscanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\\n\", &x1, &y1, &x2, &y2, &x3, &y3, &x4, &y4);\n\t\trad1 = get_radian(x1, y1, x2, y2);\n\t\trad2 = get_radian(x3, y3, x4, y4);\n\t\t\n\t\trdiff = fmod(2*M_PI+rad1-rad2, M_PI);\n\n\t\tif(fabs(rdiff) < 0.0001) {\n\t\t\tprintf(\"2\\n\");\n\t\t} else if(fabs(rdiff-M_PI/2) < 0.0001) {\n\t\t\tprintf(\"1\\n\");\n\t\t} else {\n\t\t\tprintf(\"0\\n\");\n\t\t}\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void){\n  double xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3;\n  int q;\n  scanf(\"%d\",&q);\n  for(int i=0;i<q;i++){\n    scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&xp0,&yp0,&xp1,&yp1,&xp2,&yp2,&xp3,&yp3);\n    if((yp1-yp0)*(xp3-xp2)==(yp3-yp2)*(xp1-xp0)){\n      printf(\"2\\n\");\n    }\n    else if((yp1-yp0)*(yp3-yp2)+(xp1-xp0)*(xp3-xp2)==0){\n      printf(\"1\\n\");\n    }\n    else{\n      printf(\"0\\n\");\n    }\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main() {\n    int n, x0, y0, x1, y1, x2, y2, x3, y3;\n    scanf(\"%d\", &n);\n    while(n--) {\n        scanf(\"%d%d%d%d%d%d%d%d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n        if ((x1-x0) * (y3-y2) - (y1-y0) * (x3-x2) == 0) puts(\"2\");\n        else if ((x1-x0) * (x3-x2) + (y1-y0) * (y3-y2) == 0) puts(\"1\");\n        else puts(\"0\");\n    }\n}\n\n"
  },
  {
    "language": "C",
    "code": "// AOJ CGL_2_A: Parallel/Orthogonal\n// 2018.5.2 bal4u\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ntypedef struct { double x, y; } PP;\ntypedef struct { PP s, e; } SEG, LINE;\n\n#define INF\t\t\t1e8\n#define EPS\t\t\t1e-8\n#define EQ(a,b)\t\t(fabs((a)-(b))<EPS)\n#define PPeQ(a,b)\t(EQ(a.x,b.x)&&EQ(a.y,b.y))\n\nint dcmp(double x) { if (fabs(x) < EPS) return 0; return x <= 0 ? -1 : 1; }\nPP vset(double x, double y) { PP r; r.x = x, r.y = y; return r; }\nPP vadd(PP p1, PP p2) { PP r; r.x = p1.x + p2.x, r.y = p1.y + p2.y; return r; }\nPP vsub(PP p1, PP p2) { PP r; r.x = p1.x - p2.x, r.y = p1.y - p2.y; return r; }\nPP vsmul(PP p, double k) { PP r; r.x = p.x * k, r.y = p.y * k; return r; }\nPP vmul(PP p1, PP p2) { PP r;\n\tr.x = p1.x * p2.x - p1.y * p2.y, r.y = p1.x * p2.y + p1.y * p2.x; return r; }\ndouble vabs(PP a) { return hypot(a.x, a.y); }\ndouble dist(PP p1, PP p2) {\treturn hypot(p1.x-p2.x, p1.y-p2.y); };\ndouble cross(PP a, PP b) { return a.x * b.y - a.y * b.x; }\ndouble dot(PP a, PP b) { return a.x * b.x + a.y * b.y; }\ndouble norm(PP a) { return a.x * a.x + a.y * a.y; }\n\n#if 1\n#define gc() getchar_unlocked()\n#else\n#define gc() getchar()\n#endif\nint in()\n{\n\tint n = 0, c = gc();\n\tif (c == '-') {\tc = gc();\n\t\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\t\treturn -n;\n\t}\n\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\treturn n;\n}\n\nint checkLL(LINE s1, LINE s2)\n{\n\tdouble dx1, dy1, dx2, dy2;\n\n\tdx1 = s1.e.x - s1.s.x, dy1 = s1.e.y - s1.s.y;\n\tdx2 = s2.e.x - s2.s.x, dy2 = s2.e.y - s2.s.y;\n\tif (EQ( dx2*dy1, dy2*dx1)) return 2;\t\t// parallel\n\tif (EQ(-dx1*dx2, dy1*dy2)) return 1;        // orthogonal\n\treturn 0;\n}\n\nint main()\n{\n\tint q, x, y, ans;\n\tPP p0, p1, p2, p3;\n\tLINE s1, s2;\n\n\tq = in();\n\twhile (q--) {\n\t\tx = in(), y = in(), p0 = vset(x, y);\n\t\tx = in(), y = in(), p1 = vset(x, y);\n\t\tx = in(), y = in(), p2 = vset(x, y);\n\t\tx = in(), y = in(), p3 = vset(x, y);\n\t\ts1.s = p0, s1.e = p1;\n\t\ts2.s = p2, s2.e = p3;\n\t\tans = checkLL(s1, s2);\n\t\tprintf(\"%d\\n\", ans);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint rel_l_l( double x0, double y0, double x1, double y1, double x2, double y2, double x3, double y3, double *x, double *y ) {\n\tdouble a, b, c, d;\n\tint rel;\n\n\tif ( x0 != x1 ) {\n\t\ta = ( y0 - y1 ) / ( x0 - x1 );\n\t\tb = ( x0 * y1 - x1 * y0 ) / ( x0 - x1 );\n\t}\n\tif ( x2 != x3 ) {\n\t\tc = ( y2 - y3 ) / ( x2 - x3 );\n\t\td = ( x2 * y3 - x3 * y2 ) / ( x2 - x3 );\n\t}\n\n\trel = 0;\n\tif ( x0 == x1 ) {\n\t\t*x = x0;\n\t\tif ( x2 == x3 )\n\t\t\tif ( x0 == x2 )\n\t\t\t\trel = 2;\n\t\t\telse\n\t\t\t\trel = 1;\n\t\telse {\n\t\t\t*y = c * *x + d;\n\t\t\tif ( c == 0.0 )\n\t\t\t\trel = 3;\n\t\t}\n\t} else {\n\t\tif ( x2 == x3 ) {\n\t\t\t*x = x2;\n\t\t\tif ( a == 0.0 )\n\t\t\t\trel = 3;\n\t\t} else\n\t\t\tif ( a == c )\n\t\t\t\tif ( b == d )\n\t\t\t\t\trel = 2;\n\t\t\t\telse\n\t\t\t\t\trel = 1;\n\t\t\telse {\n\t\t\t\t*x = ( -b + d ) / ( a - c );\n\t\t\t\tif ( a * c == -1.0 )\n\t\t\t\t\trel = 3;\n\t\t\t}\n\t\t*y = a * *x + b;\n\t}\n\n\treturn rel;\n}\n\nint main( void ) {\n\tint q;\n\n\tscanf( \"%d\", &q );\n\twhile ( q-- ) {\n\t\tint rel;\n\t\tdouble x0, y0, x1, y1, x2, y2, x3, y3, x, y;\n\n\t\tscanf( \"%lf %lf %lf %lf %lf %lf %lf %lf\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3 );\n\n\t\trel = rel_l_l( x0, y0, x1, y1, x2, y2, x3, y3, &x, &y );\n\n\t\tprintf( \"%d\\n\", rel == 0 ? 0 : rel == 1 || rel == 2 ? 2 : 1 );\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\nint main()\n{\n    int t, x1, x2, x3, x4, y1, y2, y3, y4;\n    double  m1, m2, temp;\n    scanf(\"%d\", &t);\n    while(t--)\n    {\n        scanf(\"%d %d %d %d %d %d %d %d\", &x1, &y1, &x2, &y2, &x3, &y3, &x4, &y4);\n\n        if(((x2-x1)*(x4-x3))+((y2-y1)*(y4-y3))==0)\n        {\n            printf(\"1\\n\");\n        }\n        else if(((x2-x1)*(x4-x3))==((y2-y1)*(y4-y3)))\n        {\n            printf(\"2\\n\");\n        }\n        else\n        {\n            printf(\"0\\n\");\n        }\n    }\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(){\n    int i, q, x1, y1, x2, y2, x3, y3, x4, y4;\n    scanf(\"%d\", &q);\n    for(i=0; i<q; i++){\n        scanf(\"%d%d%d%d%d%d%d%d\", &x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n        if((y2-y1)*(x4-x3)-(y4+y3)*(x2-x1)==0)puts(\"2\");\n        else if((y2-y1)*(y4-y3)+(x2-x1)*(x4-x3)==0)puts(\"1\");\n        else puts(\"0\");\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main()\n{\n    double q,i,x0,y0,x1,y1,x2,y2,x3,y3;\n    scanf(\"%lf\",&q);\n    for(i=1;i<=q;i++)\n    {\n        scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\",&x0,&y0,&x1,&y1,&x2,&y2,&x3,&y3);\n        if((y0-y1)==0 && (y2-y3)==0)\n            printf(\"2\\n\");\n        else if((y0-y1)==0 && (x2-x3)==0)\n            printf(\"1\\n\");\n        else if((y1-y0)/(x1-x0)==(y2-y3)/(x2-x3))\n            printf(\"2\\n\");\n        else if((((y1-y0)/(x1-x0))*((y2-y3)/(x2-x3)))==-1)\n            printf(\"1\\n\");\n        else\n            printf(\"0\\n\");\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\ntypedef struct { int x, y; } point_t;\ntypedef struct { point_t p0, p1; } segment_t;\n\nstatic int get_type(segment_t s1, segment_t s2) {\n  int k, l, m, n;\n\n  k = s1.p0.x - s1.p1.x;\n  l = s1.p0.y - s1.p1.y;\n  m = s2.p0.x - s2.p1.x;\n  n = s2.p0.y - s2.p1.y;\n  if (k * n == l * m) return 2;\n  if (-(k * m) == l * n) return 1;\n  return 0;\n}\n\nint main(int argc, char **argv) {\n  int q, i;\n  segment_t s1, s2;\n\n  scanf(\"%d\", &q);\n  for (i = 0; i < q; ++i) {\n    scanf(\"%d %d %d %d %d %d %d %d\",\n        &s1.p0.x, &s1.p0.y, &s1.p1.x, &s1.p1.y,\n        &s2.p0.x, &s2.p0.y, &s2.p1.x, &s2.p1.y);\n    printf(\"%d\\n\", get_type(s1, s2));\n  }\n}\n"
  },
  {
    "language": "C",
    "code": "main(a,b,c,d,e,f,g,h,n){scanf(\"%d\",&n);while(n--){scanf(\"%d%d%d%d%d%d%d%d\",&a,&b,&c,&d,&e,&f,&g,&h);if((c-a)*(g-e)==-(d-b)*(h-f)){printf(\"1\\n\");}else if((c-a)*(h-f)==(d-b)*(g-e)){printf(\"2\\n\");}else{printf(\"0\\n\");}}}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\nint main()\n{\n    int t, x1, x2, x3, x4, y1, y2, y3, y4;\n    double  m1, m2, temp;\n    scanf(\"%d\", &t);\n    while(t--)\n    {\n        scanf(\"%d %d %d %d %d %d %d %d\", &x1, &y1, &x2, &y2, &x3, &y3, &x4, &y4);\n\n        if(((x2-x1)*(x4-x3))+((y2-y1)*(y4-y3))==0)\n        {\n            printf(\"1\\n\");\n        }\n        else if(((x2-x1)*(y4-y3))==((y2-y1)*(x4-x3)))\n        {\n            printf(\"2\\n\");\n        }\n        else\n        {\n            printf(\"0\\n\");\n        }\n    }\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(){\n    int i, q, x1, y1, x2, y2, x3, y3, x4, y4;\n    scanf(\"%d\", &q);\n    for(i=0; i<q; i++){\n        scanf(\"%d%d%d%d%d%d%d%d\", &x1,&y1,&x2,&y2,&x3,&y3,&x4,&y4);\n        if((y2-y1)*(x4-x3)+(y4-y3)*(x2-x1)==0)puts(\"2\");\n        else if((y2-y1)*(y4-y3)+(x2-x1)*(x4-x3)==0)puts(\"1\");\n        else puts(\"0\");\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nint main(void){\n   int i, n, x0, y0, x1, y1, x2, y2, x3, y3, l0x, l0y, l1x, l1y;\n   scanf(\"%d\", &n);\nfor (i = 0; i < n; i++){\n    scanf(\"%d %d %d %d %d %d %d %d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n    l0x = x1 - x0;\n    l0y = y1 - y0;\n    l1x = x3 - x2;\n    l1y = y3 - y2;\n    if (l0x == 0 && l1x == 0){\n        printf(\"2\\n\");\n        continue;\n    }\n    if ((l0x == 0 && l1y == 0)||(l1x == 0 && l0y == 0)){\n        printf(\"1\\n\");\n        continue;\n    }\n    if (l0x == 0 || l1x == 0){\n        printf(\"0\\n\");\n        continue;\n    }\n    if (l0y * l1x == l1y * l0x){\n        printf(\"2\\n\");\n    }else if (l0y * l1y == -1 * l0x * l1x){\n        printf(\"1\\n\");\n    }else{\n        printf(\"0\\n\");\n    }\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\ndouble sd(double a[2], double b[2]);\n\nint main(void)\n{\n    double a[2], b[2], a1, a2;\n    int n, i;\n\n    scanf(\"%d\",&n);\n    for (i = 0; i < n; i++) {\n\n        scanf(\"%lf%lf\", &a[0], &a[1]);\n        scanf(\"%lf%lf\", &b[0], &b[1]);\n        a1 = sd(a, b);\n\n        scanf(\"%lf%lf\", &a[0], &a[1]);\n        scanf(\"%lf%lf\", &b[0], &b[1]);\n        a2 = sd(a, b);\n\n        if (a1 == a2) {\n            puts(\"2\");\n        } else if (a1 == 0 || a2 == 0) {\n            if (a2 == 1000000007 || a1 == 1000000007 ) {\n                puts(\"1\");\n            } else {\n                puts(\"0\");\n            }\n        } else {\n            if (a1 - 0.0000000002 < 1/a2 && 1/a2 < a1 + 0.0000000002 ) {\n                puts(\"1\");\n            } else {\n                puts(\"0\");\n            }\n        }\n\n    }\n    return 0;\n}\n\ndouble sd(double a[2], double b[2]) \n{\n    double inf = 1000000007;\n    if (a[0] == b[0]) {\n        return inf;\n    } else {\n        return (b[1] - a[1]) / (b[0] - a[0]);\n    }\n}"
  },
  {
    "language": "Kotlin",
    "code": "fun main(args: Array<String>) {\n\n    val q = readLine()!!.toInt()\n    repeat(q) {\n        val ps = readLine()!!.split(' ').map { it.toInt() }\n        val s1 = T2A.Segment(T2A.Point(ps[0], ps[1]), T2A.Point(ps[2], ps[3]))\n        val s2 = T2A.Segment(T2A.Point(ps[4], ps[5]), T2A.Point(ps[6], ps[7]))\n        println(if (s1.isOrthogonal(s2)) 1 else if (s1.isParallel(s2)) 2 else 0)\n    }\n\n}\n\nprivate class T2A {\n\n    data class Point(val x: Int, val y: Int) {\n\n        fun dot(p: Point): Int {\n            return x * p.x + y * p.y\n        }\n\n        fun cross(p: Point): Int {\n            return x * p.y - y * p.x\n        }\n\n        operator fun minus(p: Point): Point {\n            return Point(x - p.x, y - p.y)\n        }\n\n    }\n\n    data class Segment(val p1: Point, val p2: Point) {\n\n        fun isOrthogonal(s: Segment): Boolean {\n            return (p2 - p1).dot(s.p2 - s.p1) == 0\n        }\n\n        fun isParallel(s: Segment): Boolean {\n            return (p2 - p1).cross(s.p2 - s.p1) == 0\n        }\n\n    }\n\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nimport static java.lang.Integer.parseInt;\n\n/**\n * Segments/Lines - Parallel/Orthogonal\n */\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString line;\n\t\tString[] words;\n\n\t\twhile ((line = sc.nextLine()) != null && !line.isEmpty()) {\n\n\t\t\tint q = parseInt(line);\n\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble xp0 = sc.nextDouble();\n\t\t\t\tdouble yp0 = sc.nextDouble();\n\t\t\t\tdouble xp1 = sc.nextDouble();\n\t\t\t\tdouble yp1 = sc.nextDouble();\n\t\t\t\tdouble xp2 = sc.nextDouble();\n\t\t\t\tdouble yp2 = sc.nextDouble();\n\t\t\t\tdouble xp3 = sc.nextDouble();\n\t\t\t\tdouble yp3 = sc.nextDouble();\n\t\t\t\tsc.nextLine();\n\n\t\t\t\tSegment s1 = new Segment(new Point(xp0, yp0), new Point(xp1, yp1));\n\t\t\t\tSegment s2 = new Segment(new Point(xp2, yp2), new Point(xp3, yp3));\n\n\t\t\t\tboolean parallel = Geometries.isParallel(s1, s2);\n\t\t\t\tboolean orthogonal = Geometries.isOrthogonal(s1, s2);\n\n\t\t\t\tif (parallel) {\n\t\t\t\t\tSystem.out.println(2);\n\t\t\t\t} else if (orthogonal) {\n\t\t\t\t\tSystem.out.println(1);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(0);\n\t\t\t\t}\n\t\t\t}\n\t\t} //end while\n\t} //end main\n}\n\nclass Geometries {\n\n\tstatic double EPS = 1e-10;\n\n\t//\n\tstatic boolean equals(double a, double b) {\n\t\treturn Math.abs(a - b) < EPS;\n\t}\n\n\t//??´?????????\n\tstatic boolean isOrthogonal(Point a, Point b) {\n\t\treturn equals(a.inner(b), 0.0);\n\t}\n\n\tstatic boolean isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isOrthogonal(\n\t\t\t\ta1.subtract(a2),\n\t\t\t\tb1.subtract(b2)\n\t\t);\n\t}\n\n\tstatic boolean isOrthogonal(Segment s1, Segment s2) {\n\t\treturn isOrthogonal(\n\t\t\t\ts1.p2.subtract(s1.p1),\n\t\t\t\ts2.p2.subtract(s2.p1)\n\t\t);\n\t}\n\n\t//????????????\n\tstatic boolean isParallel(Point a, Point b) {\n\t\treturn equals(a.outer(b), 0.0);\n\t}\n\n\tstatic boolean isParallel(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isParallel(\n\t\t\t\ta1.subtract(a2),\n\t\t\t\tb1.subtract(b2)\n\t\t);\n\t}\n\n\tstatic boolean isParallel(Segment s1, Segment s2) {\n\t\treturn isParallel(\n\t\t\t\ts1.p2.subtract(s1.p1),\n\t\t\t\ts2.p2.subtract(s2.p1)\n\t\t);\n\t}\n}\n\nclass Point implements Comparable<Point> {\n\n\tstatic double EPS = 1e-10;\n\n\tdouble x, y;\n\n\tPoint() {\n\t\tthis(0.0, 0.0);\n\t}\n\n\tpublic Point(double x, double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\t@Override\n\tpublic int compareTo(Point p) {\n\t\tif (equals(p)) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tif (x != p.x) {\n\t\t\t\treturn Double.compare(y, p.y);\n\t\t\t} else {\n\t\t\t\treturn Double.compare(x, p.x);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tPoint p = (Point) obj;\n\t\treturn x - p.x < EPS && y - p.y < EPS;\n\t}\n\n\tPoint add(Point p) {\n\t\treturn (Point) new Point(x + p.x, y + p.y);\n\t}\n\n\tPoint subtract(Point p) {\n\t\treturn (Point) new Point(x - p.x, y - p.y);\n\t}\n\n\tPoint multiply(double k) {\n\t\treturn (Point) new Point(x * k, y * k);\n\t}\n\n\tPoint devide(double k) {\n\t\treturn (Point) new Point(x / k, y / k);\n\t}\n\n\tdouble inner(Point p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\n\tdouble outer(Point p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tdouble abs() {\n\t\treturn Math.sqrt(norm());\n\t}\n}\n\nclass Segment {\n\tPoint p1, p2;\n\n\tpublic Segment() {\n\t\tthis(new Point(), new Point());\n\t}\n\n\tpublic Segment(Point p1, Point p2) {\n\t\tthis.p1 = p1;\n\t\tthis.p2 = p2;\n\t}\n}\n\nclass Circle {\n\tPoint c;\n\tdouble r;\n\n\tpublic Circle() {\n\t\tthis(new Point(), 0.0);\n\t}\n\n\tpublic Circle(Point c, double r) {\n\t\tthis.c = c;\n\t\tthis.r = r;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int q;\n    double[] xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n    int i;\n    double s1x, s1y, s2x, s2y;\n\n    q = sc.nextInt();\n    xp0 = new double[q];\n    yp0 = new double[q];\n    xp1 = new double[q];\n    yp1 = new double[q];\n    xp2 = new double[q];\n    yp2 = new double[q];\n    xp3 = new double[q];\n    yp3 = new double[q];\n\n    for(i = 0;i < q;i++){\n      xp0[i] = sc.nextDouble();\n      yp0[i] = sc.nextDouble();\n      xp1[i] = sc.nextDouble();\n      yp1[i] = sc.nextDouble();\n      xp2[i] = sc.nextDouble();\n      yp2[i] = sc.nextDouble();\n      xp3[i] = sc.nextDouble();\n      yp3[i] = sc.nextDouble();\n    }\n\n    for(i = 0;i < q;i++){\n      s1x = xp1[i] - xp0[i];\n      s1y = yp1[i] - yp0[i];\n      s2x = xp3[i] - xp2[i];\n      s2y = yp3[i] - yp2[i];\n\n      if((s1y * s2x) == (s2y * s1x)){\n        System.out.println(\"2\");\n      }else if((s1x * s2x + s1y * s2y) == 0.0){\n        System.out.println(\"1\");\n      }else{\n        System.out.println(\"0\");\n      }\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\npublic class Main{\n    public static int check(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4){\n        if(x1 == x2){\n            if(x3 == x4)\n                return 2;\n            else if(y3 == y4)\n                return 1;\n            else\n                return 0;\n        }\n        else if(x3 == x4){\n            if(y1 == y2)\n                return 1;\n            else\n                return 0;\n        }\n        else{\n            if((double)(y2 - y1)/(x2 - x1) == (double)(y4 - y3)/(x4 - x3))\n                return 2;\n            else if((y1 - y2)*(y4 - y3) == (x2 - x1)*(x4 - x3))\n                return 1;\n            else\n                return 0;\n        }\n    }\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int q = sc.nextInt();\n        for(int i = 0 ; i < q ; i++){\n            int x1 = sc.nextInt();\n            int y1 = sc.nextInt();\n            int x2 = sc.nextInt();\n            int y2 = sc.nextInt();\n            int x3 = sc.nextInt();\n            int y3 = sc.nextInt();\n            int x4 = sc.nextInt();\n            int y4 = sc.nextInt();\n            System.out.println(check(x1, y1, x2, y2, x3, y3, x4, y4));\n        }\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\n\tpublic Main() {\n\t\tint q = in.nextInt();\n\t\tfor(int i=0;i<q;i++)new CGL_2A().doIt();\n\t}\n\n\tclass CGL_2A{\n\t\tfinal double EPS=1.0e-8;\n\t\tvoid doIt(){\n\t\t\tLine2D l1 = new Line2D.Double(in.nextDouble(),in.nextDouble(),in.nextDouble(),in.nextDouble());\n\t\t\tLine2D l2 = new Line2D.Double(in.nextDouble(),in.nextDouble(),in.nextDouble(),in.nextDouble());\n\t\t\tSystem.out.println(isParallel(l1, l2));\n\t\t}\n\n\t\tdouble cross(Point2D p1,Point2D p2){\n\t\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t\t}\n\n\t\tPoint2D diff(Point2D p1,Point2D p2){\n\t\t\treturn new Point2D.Double(p1.getX()-p2.getX(),p1.getY()-p2.getY());\n\t\t}\n\t\tboolean intersectLL(Line2D l1,Line2D l2){\n\t\t\treturn intersectLL(l1.getP1(),l1.getP2(),l2.getP1(),l2.getP2());\n\t\t}\n\t\tboolean intersectLL(Point2D a1,Point2D a2,Point2D b1,Point2D b2){\n\t\t\treturn (Math.abs(cross(diff(a2, a1), diff(b2, b1)))>EPS)||(Math.abs(cross(diff(a2, a1), diff(a1, b1)))<EPS);\n\t\t}\n\t\t\n\t\tprivate Point2D projection(Line2D l,Point2D p2){\n\t\t\tdouble kyori = l.getP1().distance(l.getP2());\n\t\t\tdouble angle = angle(l.getP1(),l.getP2(), p2);\n\t\t\tdouble t = l.getP1().distance(p2) * Math.cos(angle);\n\t\t\tPoint2D result = new Point2D.Double(l.getP1().getX()+(l.getP2().getX()-l.getP1().getX())*t/kyori,\n\t\t\t\t\tl.getP1().getY()+(l.getP2().getY()-l.getP1().getY())*t/kyori);\n\t\t\treturn result;\n\t\t}\n\n\t\tprivate double angle(Point2D p0, Point2D p1, Point2D p2){\n\t\t\treturn Math.atan2(p2.getY()-p0.getY(),p2.getX()-p0.getX())-\n\t\t\t\t\tMath.atan2(p1.getY()-p0.getY(),p1.getX()-p0.getX());\n\t\t}\n\t\t\n\t\tPoint2D intersectionPoint(Line2D l1,Line2D l2){\n\t\t\treturn intersectionPoint(l1.getP1(), l1.getP2(), l2.getP1(), l2.getP2()); \n\t\t}\n\t\t\n\t\tPoint2D intersectionPoint(Point2D a1,Point2D a2,Point2D b1,Point2D b2){\n\t\t\tPoint2D a=diff(a2,a1),\n\t\t\t\t\tb=diff(b2,b1);\n\t\t\treturn sum(a1, mul(cross(b, diff(b1,a1))/cross(b,a), a));\n\t\t}\n\t\t\n\t\tPoint2D mul(double n,Point2D p1){\n\t\t\treturn new Point2D.Double(p1.getX()*n,p1.getY()*n);\n\t\t}\n\t\t\n\t\tPoint2D sum(Point2D p1,Point2D p2){\n\t\t\treturn new Point2D.Double(p1.getX()+p2.getX(),p1.getY()+p2.getY());\n\t\t}\n\t\t\n\t\tboolean parallel(double x1,double y1,double x2,double y2,double x3,double y3,double x4,double y4){     \n\t\t    double kata1,kata2;\n\t\t    kata1=(y1-y2)/(x1-x2);\n\t\t    kata2=(y3-y4)/(x3-x4);\n\t\t    if(kata1==kata2){\n\t\t        return true;\n\t\t    }else{\n\t\t        return false;\n\t\t    }\n\t\t}\n\t\t\n\t\tboolean parallel(Line2D l1,Line2D l2){\n\t\t\treturn parallel(l1.getP1().getX(), l1.getP1().getY(), l1.getP2().getX(),l1.getP2().getY(),\n\t\t\t\t\tl2.getP1().getX(),l2.getP1().getY(),l2.getP2().getX(),l2.getP2().getY());\n\t\t}\n\t\t\n\t\tint isParallel(Line2D l1,Line2D l2){\n\t\t\tif(parallel(l1, l2))return 2;\n\t\t\tPoint2D n = projection(l1, l2.getP1());\n\t\t\tPoint2D s = intersectionPoint(l1, l2);\n\t\t\tif(Math.abs(n.getX()-s.getX())<EPS&&Math.abs(n.getY()-s.getY())<EPS)return 1;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int q;\n    double xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n    int i;\n    double s1x, s1y, s2x, s2y;\n\n    q = sc.nextInt();\n\n    for(i = 0;i < q;i++){\n      xp0 = sc.nextDouble();\n      yp0 = sc.nextDouble();\n      xp1 = sc.nextDouble();\n      yp1 = sc.nextDouble();\n      xp2 = sc.nextDouble();\n      yp2 = sc.nextDouble();\n      xp3 = sc.nextDouble();\n      yp3 = sc.nextDouble();\n\n      s1x = xp1 - xp0;\n      s1y = yp1 - yp0;\n      s2x = xp3 - xp2;\n      s2y = yp3 - yp2;\n\n      if((s1y / s1x) == (s2y / s2x)){\n        System.out.println(\"2\");\n      }else if((s1x * s2x + s1y * s2y) == 0){\n        System.out.println(\"1\");\n      }else{\n        System.out.println(\"0\");\n      }\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\n\tpublic Main() {\n\t\tint q = in.nextInt();\n\t\tfor(int i=0;i<q;i++)new CGL_2A().doIt();\n\t}\n\n\tclass CGL_2A{\n\t\tfinal double EPS=1.0e-8;\n\t\tvoid doIt(){\n\t\t\tLine2D l1 = new Line2D.Double(in.nextDouble(),in.nextDouble(),in.nextDouble(),in.nextDouble());\n\t\t\tLine2D l2 = new Line2D.Double(in.nextDouble(),in.nextDouble(),in.nextDouble(),in.nextDouble());\n\t\t\tSystem.out.println(isParallel(l1, l2));\n\t\t}\n\n\t\tdouble cross(Point2D p1,Point2D p2){\n\t\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t\t}\n\n\t\tPoint2D diff(Point2D p1,Point2D p2){\n\t\t\treturn new Point2D.Double(p1.getX()-p2.getX(),p1.getY()-p2.getY());\n\t\t}\n\t\tboolean intersectLL(Line2D l1,Line2D l2){\n\t\t\treturn intersectLL(l1.getP1(),l1.getP2(),l2.getP1(),l2.getP2());\n\t\t}\n\t\tboolean intersectLL(Point2D a1,Point2D a2,Point2D b1,Point2D b2){\n\t\t\treturn (Math.abs(cross(diff(a2, a1), diff(b2, b1)))>EPS)||(Math.abs(cross(diff(a2, a1), diff(a1, b1)))<EPS);\n\t\t}\n\n\t\tPoint2D intersectionPoint(Line2D l1,Line2D l2){\n\t\t\treturn intersectionPoint(l1.getP1(), l1.getP2(), l2.getP1(), l2.getP2()); \n\t\t}\n\n\t\tPoint2D intersectionPoint(Point2D a1,Point2D a2,Point2D b1,Point2D b2){\n\t\t\tPoint2D a=diff(a2,a1),\n\t\t\t\t\tb=diff(b2,b1);\n\t\t\treturn sum(a1, mul(cross(b, diff(b1,a1))/cross(b,a), a));\n\t\t}\n\n\t\tPoint2D mul(double n,Point2D p1){\n\t\t\treturn new Point2D.Double(p1.getX()*n,p1.getY()*n);\n\t\t}\n\n\t\tPoint2D sum(Point2D p1,Point2D p2){\n\t\t\treturn new Point2D.Double(p1.getX()+p2.getX(),p1.getY()+p2.getY());\n\t\t}\n\n\t\tboolean parallel(double x1,double y1,double x2,double y2,double x3,double y3,double x4,double y4){     \n\t\t\tdouble kata1=(y1-y2)/(x1-x2);\n\t\t\tdouble kata2=(y3-y4)/(x3-x4);\n\t\t\tif(kata1==kata2)return true;\n\t\t\tif((y1-y2==0&&y3-y4==0)||(x1-x2==0&&x3-x4==0))return true;\n\t\t\treturn false;\n\t\t}\n\t\tboolean parallel(Line2D l1,Line2D l2){\n\t\t\treturn parallel(l1.getP1().getX(), l1.getP1().getY(), l1.getP2().getX(),l1.getP2().getY(),\n\t\t\t\t\tl2.getP1().getX(),l2.getP1().getY(),l2.getP2().getX(),l2.getP2().getY());\n\t\t}\n\t\t\n\t\tboolean orthogonal(Line2D l1,Line2D l2){\n\t\t\treturn orthogonal(l1.getP1().getX(), l1.getP1().getY(), l1.getP2().getX(),l1.getP2().getY(),\n\t\t\t\t\tl2.getP1().getX(),l2.getP1().getY(),l2.getP2().getX(),l2.getP2().getY());\n\t\t}\n\t\tboolean orthogonal(double x1,double y1,double x2,double y2,double x3,double y3,double x4,double y4){\n\t\t\tdouble a=(y1-y2)/(x1-x2);\n\t\t\tdouble b=(y3-y4)/(x3-x4);\n\t\t\tif(a==-(1/b)||-(1/a)==b)return true;\n\t\t\treturn false;\n\t\t}\n\n\t\tint isParallel(Line2D l1,Line2D l2){\n\t\t\tif(parallel(l1, l2))return 2;\n\t\t\tif(orthogonal(l1, l2))return 1;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.*;\nimport java.util.concurrent.CountDownLatch;\n\nimport javax.sound.midi.MidiMessage;\n \npublic class Main {\n\t\tstatic long MOD=(long) (Math.pow(10, 9)+7);\n\tpublic static void main(String[] args){\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tInputReader sc=new InputReader(System.in);\n        int q = sc.nextInt();\n        Geometric geometric=new Geometric();\n        for(int i = 0 ; i < q ; i++){\n        \tint x0 = sc.nextInt();\n            int y0 = sc.nextInt();\n        \tint x1 = sc.nextInt();\n            int y1 = sc.nextInt();\n            int x2 = sc.nextInt();\n            int y2 = sc.nextInt();\n            int x3 = sc.nextInt();\n            int y3 = sc.nextInt();\n            int kummi=geometric.paralell_or_vertical((double)x0, (double)y0, (double)x1, (double)y1, (double)x2, (double)y2, (double)x3, (double)y3);\n            out.println(kummi);           \n        }\n        out.flush();\n\t}\n\tstatic class Geometric{\n\t\tstatic final double eps = 0.0000000001;\n\t\tdouble[] project(double x1, double y1, double x2, double y2, double px, double py){\n\t\t\t//(x1,y1)と(x2,y2)を直線lとして、(px,py)からlに下した垂線の足をもとめる。\n\t        if(y1 == y2) {\n\t        \tdouble[] ans= {px,y1};\n\t        \treturn ans;\n\t        \t}\n\t        else if(x1 == x2) {\n\t        \tdouble[] ans= {x1,py};\n\t        \treturn ans;\n\t        }\n\t        else{\n\t            double katamuki1 = (y2 - y1)/(x2 - x1);\n\t            double seppen1 = -katamuki1 * x1 + y1;\n\t            double katamuki2 = -1.0 / katamuki1;\n\t            double seppen2 = -katamuki2 * px + py;\n\t            double ansx = (seppen2 - seppen1)/(katamuki1 - katamuki2);\n\t            double ansy = ansx * katamuki1 + seppen1;\n\t            double[] ans= {ansx,ansy};\n\t            return ans;\n\t        }\n\t    }\n\t    double[] project2(double x1, double y1, double x2, double y2, double px, double py){\n\t    \t//(x1,y1)と(x2,y2)を直線lとして、lに対して(px,py)の対称な点をもとめる。\n\t        if(y1 == y2) {\n\t        \tdouble[] ans= {px,(py - 2*(py - y1))};\n\t        \treturn ans;\n\t        }\n\t        else if(x1 == x2) {\n\t        \tdouble[] ans= {(px - 2*(px - x1)),py};\n\t        \treturn ans;\n\t        }\n\t        else{\n\t            double katamuki1 = (y2 - y1)/(x2 - x1);\n\t            double seppen1 = -1.0 * katamuki1 * x1 + y1;\n\t            double katamuki2 = -1.0 / katamuki1;\n\t            double seppen2 = -1.0 * katamuki2 * px + py;\n\t            double ansx = (seppen2 - seppen1)/(katamuki1 - katamuki2);\n\t            double ansy = ansx * katamuki1 + seppen1;\n\t            double[] ans= {(px - 2*(px - ansx)),(py- 2 * (py - ansy))};\n\t            return ans;\n\t        }\n\t    }\n\t    public double d2(double x0,double y0,double x1,double y1){\n\t\t\treturn (x0-x1)*(x0-x1) + (y0-y1)*(y0-y1);\n\t\t}\n\t\t\n\t    int direction(double x0,double y0,double x1,double y1,double x2,double y2){\n\t\t\t//x0 y0を起点としてp1ベクトル（x1-x0,y1-y0）から見てp2ベクトルが、反時計回りなら１、時計回りなら２、反対方向なら３、\n\t    \t//同じ方向かつp2のほうが大きい場合４、以下の場合５．\n\t\t\tif(x1 == x0 && y1 == y0){\n\t\t\t\treturn 4;\n\t\t\t}\n\t\t\telse if(x2 == x0 && y2 == y0){\n\t\t\t\treturn 5;\n\t\t\t}\n\t\t\t\n\t\t\t//外積の第三成分 = |→p1||→p2|sinθ\n\t\t\tdouble det = (x1 -x0)*(y2-y0) - (x2 -x0)*(y1 - y0);\n\t\t\t\n\t\t\tif(det>eps){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse if(det<-eps){\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\telse{\t//同一直線状\n\t\t\t\tif((x1-x0 >0 == x2-x0 <0) && x1-x0 != 0){\t//反対側\n\t\t\t\t\treturn 3;\n\t\t\t\t}\n\t\t\t\telse if((y1-y0 >0 == y2-y0 <0) && y1-y0 != 0){\t//反対側\n\t\t\t\t\treturn 3;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdouble d10 = d2(x0,y0,x1,y1);\t//p1とp0の距離^2\n\t\t\t\t\tdouble d20 = d2(x0,y0,x2,y2);\t//p2とp0の距離^2\n\t\t\t\t\tif(d10 < d20){\t//p2のほうが遠い\n\t\t\t\t\t\treturn 4;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\treturn 5;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t    int paralell_or_vertical(double x0,double y0,double x1,double y1,double x2,double y2,double x3,double y3) {\n\t    \t//平行なら2　垂直なら1　それ以外は０を返す。\n\t    \tdouble naiseki=(x1-x0)*(x3-x2)+(y1-y0)*(y3-y2);\n\t    \tdouble d1=Math.sqrt(d2(x0, y0, x1, y1));\n\t    \tdouble d2=Math.sqrt(d2(x2, y2, x3, y3));\n\t    \tdouble cos=naiseki/(d1*d2);\n\t    \t\n\t    \tif (cos+eps>=1||cos-eps<=-1) {\n\t\t\t\treturn 2;\n\t\t\t}\n\t    \telse if(cos<eps&&cos>-eps){\n\t\t\t\treturn 1;\n\t\t\t}\n\t    \telse {\n\t\t\t\treturn 0;\n\t\t\t}\n\t    }\n\t}\n\tstatic class InputReader { \n\t\tprivate InputStream in;\n\t\tprivate byte[] buffer = new byte[1024];\n\t\tprivate int curbuf;\n\t\tprivate int lenbuf;\n\t\tpublic InputReader(InputStream in) {\n\t\t\tthis.in = in;\n\t\t\tthis.curbuf = this.lenbuf = 0;\n\t\t}\n \n\t\tpublic boolean hasNextByte() {\n\t\t\tif (curbuf >= lenbuf) {\n\t\t\t\tcurbuf = 0;\n\t\t\t\ttry {\n\t\t\t\t\tlenbuf = in.read(buffer);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t}\n\t\t\t\tif (lenbuf <= 0)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n \n\t\tprivate int readByte() {\n\t\t\tif (hasNextByte())\n\t\t\t\treturn buffer[curbuf++];\n\t\t\telse\n\t\t\t\treturn -1;\n\t\t}\n \n\t\tprivate boolean isSpaceChar(int c) {\n\t\t\treturn !(c >= 33 && c <= 126);\n\t\t}\n \n\t\tprivate void skip() {\n\t\t\twhile (hasNextByte() && isSpaceChar(buffer[curbuf]))\n\t\t\t\tcurbuf++;\n\t\t}\n \n\t\tpublic boolean hasNext() {\n\t\t\tskip();\n\t\t\treturn hasNextByte();\n\t\t}\n \n\t\tpublic String next() {\n\t\t\tif (!hasNext())\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tint b = readByte();\n\t\t\twhile (!isSpaceChar(b)) {\n\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t}\n \n\t\tpublic int nextInt() {\n\t\t\tif (!hasNext())\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\tint c = readByte();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = readByte();\n\t\t\tboolean minus = false;\n\t\t\tif (c == '-') {\n\t\t\t\tminus = true;\n\t\t\t\tc = readByte();\n\t\t\t}\n\t\t\tint res = 0;\n\t\t\tdo {\n\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\tres = res * 10 + c - '0';\n\t\t\t\tc = readByte();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn (minus) ? -res : res;\n\t\t}\n \n\t\tpublic long nextLong() {\n\t\t\tif (!hasNext())\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\tint c = readByte();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = readByte();\n\t\t\tboolean minus = false;\n\t\t\tif (c == '-') {\n\t\t\t\tminus = true;\n\t\t\t\tc = readByte();\n\t\t\t}\n\t\t\tlong res = 0;\n\t\t\tdo {\n\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\tres = res * 10 + c - '0';\n\t\t\t\tc = readByte();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn (minus) ? -res : res;\n\t\t}\n \n\t\tpublic double nextDouble() {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n \n\t\tpublic int[] nextIntArray(int n) {\n\t\t\tint[] a = new int[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\ta[i] = nextInt();\n\t\t\treturn a;\n\t\t}\n \n\t\tpublic long[] nextLongArray(int n) {\n\t\t\tlong[] a = new long[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\ta[i] = nextLong();\n\t\t\treturn a;\n\t\t}\n \n\t\tpublic char[][] nextCharMap(int n, int m) {\n\t\t\tchar[][] map = new char[n][m];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tmap[i] = next().toCharArray();\n\t\t\treturn map;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Main {\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tint q;\n\t\tdouble x0, y0, x1, y1, x2, y2, x3, y3;\n\t\t\n\t\tq = scan.nextInt();\n\t\t\n\t\tfor(int i = 0; i < q; i++) {\n\t\t\tx0 = scan.nextDouble();\n\t\t\ty0 = scan.nextDouble();\n\t\t\tx1 = scan.nextDouble();\n\t\t\ty1 = scan.nextDouble();\n\t\t\tx2 = scan.nextDouble();\n\t\t\ty2 = scan.nextDouble();\n\t\t\tx3 = scan.nextDouble();\n\t\t\ty3 = scan.nextDouble();\n\t\t\t\n\t\t\tif(y0 == y1) {\n\t\t\t\tif(y2 == y3) {\n\t\t\t\t\tSystem.out.println(2);\n\t\t\t\t\t\n\t\t\t\t} else if(x2 == x3) {\n\t\t\t\t\tSystem.out.println(1);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(0);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t} else if(x0 == x1) {\n\t\t\t\tif(x2 == x3) {\n\t\t\t\t\tSystem.out.println(2);\n\t\t\t\t\t\n\t\t\t\t} else if(y2 == y3) {\n\t\t\t\t\tSystem.out.println(1);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(0);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t} else {\t\t\t\t\n\t\t\t\tif(((y1 - y0) / (x1 - x0)) == ((y3 - y2) / (x3 - x2))) {\n\t\t\t\t\tSystem.out.println(2);\n\t\t\t\t\t\n\t\t\t\t} else if(((y1 - y0) / (x1 - x0) * (y3 - y2) / (x3 - x2)) == -1) {\n\t\t\t\t\tSystem.out.println(1);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(0);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tscan.close();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\nclass Point {\n\tdouble EPS = 0.0000000001;\n\tdouble x; double y;\n\tpublic Point(double ax, double ay){x=ax;y=ay;}\n\tpublic Point sum(Point p) { return new Point(x+p.x,y+y); }\n\tpublic Point diff(Point p) { return new Point(x-p.x,y-p.y); }\n\tpublic Point mult(double k) { return new Point(x*k,y*k); }\n\tpublic Point div(double k) { return new Point(x*(1.0/k),y*(1.0/k)); }\n\tpublic boolean equals(Point p){return Math.abs(x-p.x)<EPS && Math.abs(y-p.y)<EPS;}\n}\nclass Vector extends Point {\n\tpublic Vector(double ax, double ay) {super(ax,ay);}\n\tpublic Vector(Point p1, Point p2) {super(p1.x-p2.x,p2.x-p2.y);}\n\tpublic double norm() {return x*x+y*y;}\n\tpublic double abs() {return Math.sqrt(norm());}\n\t// TODO:\n\tpublic boolean isSmallerThan(Vector v) {return x!=v.x?x<v.x:y<v.y;}\n\tpublic double dotProduct(Vector v) {return x*v.x+y*v.y;}\n\tpublic double crossProduct(Vector v) {return x*v.y - y*v.x;}\n}\n\nclass Segment {\n\tPoint p1; Point p2;\n\tpublic Segment(Point ap1, Point ap2){p1=ap1;p2=ap2;}\n\tpublic double dotProduct(Segment s) {return (p1.x-p2.x)*(s.p1.x-s.p2.x)+(p1.x-p2.x)*(s.p1.x-s.p2.x);}\n\tpublic double crossProduct(Segment s) {return (p1.x-p2.x)*(s.p1.y-s.p2.y) - (p1.y-p2.y)*(s.p1.x-s.p2.x);}\n}\nclass Line extends Segment{public Line(Point ap1, Point ap2){super(ap1,ap2);}}\n\n\npublic class Main{\n\n\tstatic double EPS = 0.0000000001;\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint q = scan.nextInt();\n\t\tfor (int i=0;i<q;i++) {\n\t\t\tLine l1 = new Line(new Point(scan.nextDouble(),scan.nextDouble()), new Point(scan.nextDouble(),scan.nextDouble()));\n\t\t\tLine l2 = new Line(new Point(scan.nextDouble(),scan.nextDouble()), new Point(scan.nextDouble(),scan.nextDouble()));\n\t\t\tif (isOrthogonal(l1,l2)) {\n\t\t\t\tSystem.out.println(1);\n\t\t\t} else if (isParallel(l1,l2)) {\n\t\t\t\tSystem.out.println(2);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(0);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\tstatic boolean equals(double d1, double d2){return Math.abs(d1-d2)<EPS;}\n\tboolean isOrthogonal(Vector v1, Vector v2) {return equals(v1.dotProduct(v2),0.0);}\n\tstatic boolean isOrthogonal(Segment s1, Segment s2) {return equals(s1.dotProduct(s2),0.0);}\n\tboolean isParallel(Vector v1, Vector v2) {return equals(v1.crossProduct(v2),0.0);}\n\tstatic boolean isParallel(Segment s1, Segment s2) {return equals(s1.crossProduct(s2),0.0);}\n\t\n\tclass Circle {Point c;double r;Circle(Point ac, double ar){c=ac;ar=r;}}\n\tclass Polygon extends ArrayList<Point>{}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.NoSuchElementException;\n\npublic class Main {\n\tstatic FastScanner sc = new FastScanner();\n\tstatic final double ALLOWABLE_ERROR = 0;\n\n\tpublic static void main(String[] args) {\n\t\tint q = sc.nextInt();\n\t\t\n\t\tStringBuilder ans = new StringBuilder();\n\t\tfor(int i=0; i<q; i++) {\n\t\t\tdouble x0 = sc.nextDouble();\n\t\t\tdouble y0 = sc.nextDouble();\n\t\t\tdouble x1 = sc.nextDouble();\n\t\t\tdouble y1 = sc.nextDouble();\n\t\t\tdouble x2 = sc.nextDouble();\n\t\t\tdouble y2 = sc.nextDouble();\n\t\t\tdouble x3 = sc.nextDouble();\n\t\t\tdouble y3 = sc.nextDouble();\n\t\t\t\n\t\t\tif(x0 == x1) {\n\t\t\t\tif(x2 == x3) {\n\t\t\t\t\tans.append(2);\n\t\t\t\t} else if(y2 == y3) {\n\t\t\t\t\tans.append(1);\n\t\t\t\t} else {\n\t\t\t\t\tans.append(0);\n\t\t\t\t}\n\t\t\t} else if(y0 == y1) {\n\t\t\t\tif(x2 == x3) {\n\t\t\t\t\tans.append(1);\n\t\t\t\t} else if(y2 == y3) {\n\t\t\t\t\tans.append(2);\n\t\t\t\t} else {\n\t\t\t\t\tans.append(0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdouble a1 = (y1 - y0) / (x1 - x0);\n\t\t\t\tdouble a2 = (y3 - y2) / (x3 - x2);\n\t\t\t\t\n\t\t\t\tif(Math.abs(a2 - a1) < ALLOWABLE_ERROR) {\n\t\t\t\t\tans.append(2);\n\t\t\t\t} else if(Math.abs((a1 * a2) + 1) < ALLOWABLE_ERROR) {\n\t\t\t\t\tans.append(1);\n\t\t\t\t} else {\n\t\t\t\t\tans.append(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tans.append(\"\\n\");\n\t\t}\n\t\t\n\t\tSystem.out.print(ans);\n\t}\n\n\tstatic class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if(ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch(IOException e) {\n                    e.printStackTrace();\n                }\n                if(buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuilder sb = new StringBuilder();\n            int b = readByte();\n            while(isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n                b = readByte();\n            }\n            return sb.toString();\n        }\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n        public int nextInt(){\n            return Integer.parseInt(next());\n        }\n        public double nextDouble(){\n            return Double.parseDouble(next());\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "package aoj.library.CGL;\n\nimport java.util.Scanner;\n\nimport static java.lang.Integer.parseInt;\n\n/**\n * Segments/Lines - Parallel/Orthogonal\n */\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString line;\n\t\tString[] words;\n\n\t\twhile ((line = sc.nextLine()) != null && !line.isEmpty()) {\n\n\t\t\tint q = parseInt(line);\n\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble xp0 = sc.nextDouble();\n\t\t\t\tdouble yp0 = sc.nextDouble();\n\t\t\t\tdouble xp1 = sc.nextDouble();\n\t\t\t\tdouble yp1 = sc.nextDouble();\n\t\t\t\tdouble xp2 = sc.nextDouble();\n\t\t\t\tdouble yp2 = sc.nextDouble();\n\t\t\t\tdouble xp3 = sc.nextDouble();\n\t\t\t\tdouble yp3 = sc.nextDouble();\n\t\t\t\tsc.nextLine();\n\n\t\t\t\tSegment s1 = new Segment(new Point(xp0, yp0), new Point(xp1, yp1));\n\t\t\t\tSegment s2 = new Segment(new Point(xp2, yp2), new Point(xp3, yp3));\n\n\t\t\t\tboolean parallel = Geometries.isParallel(s1, s2);\n\t\t\t\tboolean orthogonal = Geometries.isOrthogonal(s1, s2);\n\n\t\t\t\tif (parallel) {\n\t\t\t\t\tSystem.out.println(2);\n\t\t\t\t} else if (orthogonal) {\n\t\t\t\t\tSystem.out.println(1);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(0);\n\t\t\t\t}\n\t\t\t}\n\t\t} //end while\n\t} //end main\n}\n\nclass Geometries {\n\n\tstatic double EPS = 1e-10;\n\n\t//\n\tstatic boolean equals(double a, double b) {\n\t\treturn Math.abs(a - b) < EPS;\n\t}\n\n\t//??´?????????\n\tstatic boolean isOrthogonal(Point a, Point b) {\n\t\treturn equals(a.inner(b), 0.0);\n\t}\n\n\tstatic boolean isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isOrthogonal(\n\t\t\t\ta1.subtract(a2),\n\t\t\t\tb1.subtract(b2)\n\t\t);\n\t}\n\n\tstatic boolean isOrthogonal(Segment s1, Segment s2) {\n\t\treturn isOrthogonal(\n\t\t\t\ts1.p2.subtract(s1.p1),\n\t\t\t\ts2.p2.subtract(s2.p1)\n\t\t);\n\t}\n\n\t//????????????\n\tstatic boolean isParallel(Point a, Point b) {\n\t\treturn equals(a.outer(b), 0.0);\n\t}\n\n\tstatic boolean isParallel(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isParallel(\n\t\t\t\ta1.subtract(a2),\n\t\t\t\tb1.subtract(b2)\n\t\t);\n\t}\n\n\tstatic boolean isParallel(Segment s1, Segment s2) {\n\t\treturn isParallel(\n\t\t\t\ts1.p2.subtract(s1.p1),\n\t\t\t\ts2.p2.subtract(s2.p1)\n\t\t);\n\t}\n}\n\nclass Point implements Comparable<Point> {\n\n\tstatic double EPS = 1e-10;\n\n\tdouble x, y;\n\n\tPoint() {\n\t\tthis(0.0, 0.0);\n\t}\n\n\tpublic Point(double x, double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\t@Override\n\tpublic int compareTo(Point p) {\n\t\tif (equals(p)) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tif (x != p.x) {\n\t\t\t\treturn Double.compare(y, p.y);\n\t\t\t} else {\n\t\t\t\treturn Double.compare(x, p.x);\n\t\t\t}\n\t\t}\n\t}\n\n//\t@Override\n//\tpublic boolean equals(Object obj) {\n//\t\tPoint p = (Point) obj;\n//\t\treturn x - p.x < EPS && y - p.y < EPS;\n//\t}\n\n\tPoint add(Point p) {\n\t\treturn (Point) new Point(x + p.x, y + p.y);\n\t}\n\n\tPoint subtract(Point p) {\n\t\treturn (Point) new Point(x - p.x, y - p.y);\n\t}\n\n\tPoint multiply(double k) {\n\t\treturn (Point) new Point(x * k, y * k);\n\t}\n\n\tPoint devide(double k) {\n\t\treturn (Point) new Point(x / k, y / k);\n\t}\n\n\tdouble inner(Point p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\n\tdouble outer(Point p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tdouble abs() {\n\t\treturn Math.sqrt(norm());\n\t}\n}\n\nclass Segment {\n\tPoint p1, p2;\n\n\tpublic Segment() {\n\t\tthis(new Point(), new Point());\n\t}\n\n\tpublic Segment(Point p1, Point p2) {\n\t\tthis.p1 = p1;\n\t\tthis.p2 = p2;\n\t}\n}\n\nclass Circle {\n\tPoint c;\n\tdouble r;\n\n\tpublic Circle() {\n\t\tthis(new Point(), 0.0);\n\t}\n\n\tpublic Circle(Point c, double r) {\n\t\tthis.c = c;\n\t\tthis.r = r;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\n\tpublic Main() {\n\t\tint q = in.nextInt();\n\t\tfor(int i=0;i<q;i++)new CGL_2A().doIt();\n\t}\n\n\tclass CGL_2A{\n\t\tfinal double EPS=1.0e-8;\n\t\tvoid doIt(){\n\t\t\tLine2D l1 = new Line2D.Double(in.nextDouble(),in.nextDouble(),in.nextDouble(),in.nextDouble());\n\t\t\tLine2D l2 = new Line2D.Double(in.nextDouble(),in.nextDouble(),in.nextDouble(),in.nextDouble());\n\t\t\tSystem.out.println(isParallel(l1, l2));\n\t\t}\n\n\t\tdouble cross(Point2D p1,Point2D p2){\n\t\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t\t}\n\n\t\tPoint2D diff(Point2D p1,Point2D p2){\n\t\t\treturn new Point2D.Double(p1.getX()-p2.getX(),p1.getY()-p2.getY());\n\t\t}\n\t\tboolean intersectLL(Line2D l1,Line2D l2){\n\t\t\treturn intersectLL(l1.getP1(),l1.getP2(),l2.getP1(),l2.getP2());\n\t\t}\n\t\tboolean intersectLL(Point2D a1,Point2D a2,Point2D b1,Point2D b2){\n\t\t\treturn (Math.abs(cross(diff(a2, a1), diff(b2, b1)))>EPS)||(Math.abs(cross(diff(a2, a1), diff(a1, b1)))<EPS);\n\t\t}\n\n\t\tPoint2D intersectionPoint(Line2D l1,Line2D l2){\n\t\t\treturn intersectionPoint(l1.getP1(), l1.getP2(), l2.getP1(), l2.getP2()); \n\t\t}\n\n\t\tPoint2D intersectionPoint(Point2D a1,Point2D a2,Point2D b1,Point2D b2){\n\t\t\tPoint2D a=diff(a2,a1),\n\t\t\t\t\tb=diff(b2,b1);\n\t\t\treturn sum(a1, mul(cross(b, diff(b1,a1))/cross(b,a), a));\n\t\t}\n\n\t\tPoint2D mul(double n,Point2D p1){\n\t\t\treturn new Point2D.Double(p1.getX()*n,p1.getY()*n);\n\t\t}\n\n\t\tPoint2D sum(Point2D p1,Point2D p2){\n\t\t\treturn new Point2D.Double(p1.getX()+p2.getX(),p1.getY()+p2.getY());\n\t\t}\n\n\t\tboolean parallel(double x1,double y1,double x2,double y2,double x3,double y3,double x4,double y4){     \n\t\t\tdouble kata1=(y1-y2)/(x1-x2);\n\t\t\tdouble kata2=(y3-y4)/(x3-x4);\n\t\t\tif(kata1==kata2)return true;\n\t\t\tif((y1-y2==0&&y3-y4==0)||(x1-x2==0&&x3-x4==0))return true;\n\t\t\treturn false;\n\t\t}\n\t\tboolean parallel(Line2D l1,Line2D l2){\n\t\t\treturn parallel(l1.getP1().getX(), l1.getP1().getY(), l1.getP2().getX(),l1.getP2().getY(),\n\t\t\t\t\tl2.getP1().getX(),l2.getP1().getY(),l2.getP2().getX(),l2.getP2().getY());\n\t\t}\n\t\tboolean orthogonal(Line2D l1,Line2D l2){\n\t\t\treturn orthogonal(l1.getP1().getX(), l1.getP1().getY(), l1.getP2().getX(),l1.getP2().getY(),\n\t\t\t\t\tl2.getP1().getX(),l2.getP1().getY(),l2.getP2().getX(),l2.getP2().getY());\n\t\t}\n\t\tboolean orthogonal(double x1,double y1,double x2,double y2,double x3,double y3,double x4,double y4){\n\t\t\tdouble a=(y1-y2)/(x1-x2);\n\t\t\tdouble b=(y3-y4)/(x3-x4);\n\t\t\tif(Math.abs(a-(-(1/b)))<EPS||Math.abs((-(1/a)-b))<EPS)return true;\n\t\t\tif(Math.abs((-(1/b))-a)<EPS||Math.abs(b-(-(1/a)))<EPS)return true;\n\t\t\treturn false;\n\t\t}\n\t\tint isParallel(Line2D l1,Line2D l2){\n\t\t\tif(parallel(l1, l2))return 2;\n\t\t\tif(orthogonal(l1, l2))return 1;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\n\tpublic Main() {\n\t\tint q = in.nextInt();\n\t\tfor(int i=0;i<q;i++)new CGL_2A().doIt();\n\t}\n\n\tclass CGL_2A{\n\t\tfinal double EPS=1.0e-8;\n\t\tvoid doIt(){\n\t\t\tLine2D l1 = new Line2D.Double(in.nextDouble(),in.nextDouble(),in.nextDouble(),in.nextDouble());\n\t\t\tLine2D l2 = new Line2D.Double(in.nextDouble(),in.nextDouble(),in.nextDouble(),in.nextDouble());\n\t\t\tSystem.out.println(isParallel(l1, l2));\n\t\t}\n\n\t\tdouble cross(Point2D p1,Point2D p2){\n\t\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t\t}\n\n\t\tPoint2D diff(Point2D p1,Point2D p2){\n\t\t\treturn new Point2D.Double(p1.getX()-p2.getX(),p1.getY()-p2.getY());\n\t\t}\n\t\tboolean intersectLL(Line2D l1,Line2D l2){\n\t\t\treturn intersectLL(l1.getP1(),l1.getP2(),l2.getP1(),l2.getP2());\n\t\t}\n\t\tboolean intersectLL(Point2D a1,Point2D a2,Point2D b1,Point2D b2){\n\t\t\treturn (Math.abs(cross(diff(a2, a1), diff(b2, b1)))>EPS)||(Math.abs(cross(diff(a2, a1), diff(a1, b1)))<EPS);\n\t\t}\n\n\t\tPoint2D intersectionPoint(Line2D l1,Line2D l2){\n\t\t\treturn intersectionPoint(l1.getP1(), l1.getP2(), l2.getP1(), l2.getP2()); \n\t\t}\n\n\t\tPoint2D intersectionPoint(Point2D a1,Point2D a2,Point2D b1,Point2D b2){\n\t\t\tPoint2D a=diff(a2,a1),\n\t\t\t\t\tb=diff(b2,b1);\n\t\t\treturn sum(a1, mul(cross(b, diff(b1,a1))/cross(b,a), a));\n\t\t}\n\n\t\tPoint2D mul(double n,Point2D p1){\n\t\t\treturn new Point2D.Double(p1.getX()*n,p1.getY()*n);\n\t\t}\n\n\t\tPoint2D sum(Point2D p1,Point2D p2){\n\t\t\treturn new Point2D.Double(p1.getX()+p2.getX(),p1.getY()+p2.getY());\n\t\t}\n\n\t\tboolean parallel(double x1,double y1,double x2,double y2,double x3,double y3,double x4,double y4){     \n\t\t\tdouble kata1=(y1-y2)/(x1-x2);\n\t\t\tdouble kata2=(y3-y4)/(x3-x4);\n\t\t\tif(kata1==kata2)return true;\n\t\t\treturn false;\n\t\t}\n\t\tboolean parallel(Line2D l1,Line2D l2){\n\t\t\treturn parallel(l1.getP1().getX(), l1.getP1().getY(), l1.getP2().getX(),l1.getP2().getY(),\n\t\t\t\t\tl2.getP1().getX(),l2.getP1().getY(),l2.getP2().getX(),l2.getP2().getY());\n\t\t}\n\t\t\n\t\tboolean orthogonal(Line2D l1,Line2D l2){\n\t\t\treturn orthogonal(l1.getP1().getX(), l1.getP1().getY(), l1.getP2().getX(),l1.getP2().getY(),\n\t\t\t\t\tl2.getP1().getX(),l2.getP1().getY(),l2.getP2().getX(),l2.getP2().getY());\n\t\t}\n\t\tboolean orthogonal(double x1,double y1,double x2,double y2,double x3,double y3,double x4,double y4){\n\t\t\tdouble a=(y1-y2)/(x1-x2);\n\t\t\tdouble b=(y3-y4)/(x3-x4);\n\t\t\tif(a==-(1/b)||-(1/a)==b)return true; \n\t\t\treturn false;\n\t\t}\n\n\t\tint isParallel(Line2D l1,Line2D l2){\n\t\t\tif(parallel(l1, l2))return 2;\n\t\t\tif(orthogonal(l1, l2))return 1;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nimport java.awt.geom.Point2D.Double;\n\nimport static java.lang.Integer.parseInt;\n\npublic class Main {\n\n  public static void main(String[] args) {\n    \n    new Main().run();\n  }\n\n  public void run() {\n    \n    try(BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {\n\n      int q = parseInt(br.readLine());\n\n      String[] lines;\n      Point2D[] p = new Point2D[4];\n      StringBuilder buf = new StringBuilder();\n\n      for(int i=0; i<q; i++) {\n        lines = br.readLine().split(\" \");\n        int x, y;\n        for(int j=0,k=0; j<p.length; j++) {\n          x = parseInt(lines[k++]);\n          y = parseInt(lines[k++]);\n          p[j] = new Point2D(x, y);\n        }\n\n        Vector v = new Vector();\n        if(v.isParallel(p[0], p[1], p[2], p[3]))\n          buf.append(2).append(\"\\n\");\n        else if(v.isOrthogonal(p[0], p[1], p[2], p[3]))\n          buf.append(1).append(\"\\n\");\n        else\n          buf.append(0).append(\"\\n\");\n      }\n\n      System.out.print(buf);\n    }\n    catch(IOException e) {\n      System.out.println(e);\n    }\n  }\n\n  private class Point2D extends Double {\n    private static final long serialVersionUID = 1L;\n    double EPS = 1e-10;\n\n    public Point2D() { super(); }\n    public Point2D(double x, double y) { super(x, y); }\n\n    public boolean equals (double a, double b) {\n      return Math.abs(a-b) < EPS;\n    }\n    public Point2D sum(Point2D b) {\n      return new Point2D(x+b.x, y+b.y);\n    }\n    public Point2D diff(Point2D b) {\n      return new Point2D(x-b.x, y-b.y);\n    }\n  }\n\n  private class Vector extends Point2D {\n\n    private static final long serialVersionUID = 1L;\n\n    public Vector() { super(); }\n    public Vector(double x, double y) { super(x, y); }\n\n    public double dot(Point2D a, Point2D b) {\n      return a.x * b.x + a.y * b.y;\n    }\n    public double cross(Point2D a, Point2D b) {\n      return a.x * b.y - a.y * b.x;\n    }\n    public boolean isOrthogonal(Point2D a, Point2D b) {\n      return equals(dot(a,b) , 0.0);\n    }\n    public boolean isOrthogonal(Point2D a1, Point2D a2, Point2D b1, Point2D b2) {\n      return isOrthogonal(a1.diff(a2), b1.diff(b2));\n    }\n    public boolean isParallel(Point2D a, Point2D b) {\n      return equals(cross(a, b), 0.0);\n    }\n    public boolean isParallel(Point2D a1, Point2D a2, Point2D b1, Point2D b2) {\n      return isParallel(a1.diff(a2), b1.diff(b2));\n    }\n  }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint q = sc.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint xp0 = sc.nextInt();\n\t\t\tint yp0 = sc.nextInt();\n\t\t\tint xp1 = sc.nextInt();\n\t\t\tint yp1 = sc.nextInt();\n\t\t\tint xp2 = sc.nextInt();\n\t\t\tint yp2 = sc.nextInt();\n\t\t\tint xp3 = sc.nextInt();\n\t\t\tint yp3 = sc.nextInt();\n\n\t\t\tint ax = xp1 - xp0;\n\t\t\tint ay = yp1 - yp0;\n\t\t\tint bx = xp3 - xp2;\n\t\t\tint by = yp3 - yp2;\n\t\t\tint dot = Geom.dot(ax, ay, bx, by);\n\t\t\tint cross = Geom.cross(ax, ay, bx, by);\n\n\t\t\tif (cross == 0) {\n\t\t\t\tSystem.out.println(\"2\");\n\t\t\t} else if (dot == 0) {\n\t\t\t\tSystem.out.println(\"1\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"0\");\n\t\t\t}\n\t\t}\n\n\t\tsc.close();\n\t}\n\t\n\t@SuppressWarnings(\"unused\")\n\tprivate static class Geom {\n\t\tstatic int dot(int xa, int ya, int xb, int yb) {\n\t\t\treturn xa * xb + ya * yb;\n\t\t}\n\n\t\tstatic int cross(int xa, int ya, int xb, int yb) {\n\t\t\treturn xa * yb - xb * ya;\n\t\t}\n\t\t\n\t\tstatic int sumofsquare(int xa, int ya) {\n\t\t\treturn xa * xa + ya * ya;\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nimport static java.lang.Integer.parseInt;\n\n/**\n * Segments/Lines - Parallel/Orthogonal\n */\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString line;\n\t\tString[] words;\n\n\t\twhile ((line = sc.nextLine()) != null && !line.isEmpty()) {\n\n\t\t\tint q = parseInt(line);\n\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble xp0 = sc.nextDouble();\n\t\t\t\tdouble yp0 = sc.nextDouble();\n\t\t\t\tdouble xp1 = sc.nextDouble();\n\t\t\t\tdouble yp1 = sc.nextDouble();\n\t\t\t\tdouble xp2 = sc.nextDouble();\n\t\t\t\tdouble yp2 = sc.nextDouble();\n\t\t\t\tdouble xp3 = sc.nextDouble();\n\t\t\t\tdouble yp3 = sc.nextDouble();\n\t\t\t\tsc.nextLine();\n\n\t\t\t\tSegment s1 = new Segment(new Point(xp0, yp0), new Point(xp1, yp1));\n\t\t\t\tSegment s2 = new Segment(new Point(xp2, yp2), new Point(xp3, yp3));\n\n\t\t\t\tboolean parallel = Geometries.isParallel(s1, s2);\n\t\t\t\tboolean orthogonal = Geometries.isOrthogonal(s1, s2);\n\n\t\t\t\tif (parallel) {\n\t\t\t\t\tSystem.out.println(2);\n\t\t\t\t} else if (orthogonal) {\n\t\t\t\t\tSystem.out.println(1);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(0);\n\t\t\t\t}\n\t\t\t}\n\t\t} //end while\n\t} //end main\n}\n\nclass Geometries {\n\n\tstatic double EPS = 1e-10;\n\n\t//\n\tstatic boolean equals(double a, double b) {\n\t\treturn Math.abs(a - b) < EPS;\n\t}\n\n\t//??´?????????\n\tstatic boolean isOrthogonal(Point a, Point b) {\n\t\treturn equals(a.inner(b), 0.0);\n\t}\n\n\tstatic boolean isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isOrthogonal(\n\t\t\t\ta1.subtract(a2),\n\t\t\t\tb1.subtract(b2)\n\t\t);\n\t}\n\n\tstatic boolean isOrthogonal(Segment s1, Segment s2) {\n\t\treturn isOrthogonal(\n\t\t\t\ts1.p2.subtract(s1.p1),\n\t\t\t\ts2.p2.subtract(s2.p1)\n\t\t);\n\t}\n\n\t//????????????\n\tstatic boolean isParallel(Point a, Point b) {\n\t\treturn equals(a.outer(b), 0.0);\n\t}\n\n\tstatic boolean isParallel(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isParallel(\n\t\t\t\ta1.subtract(a2),\n\t\t\t\tb1.subtract(b2)\n\t\t);\n\t}\n\n\tstatic boolean isParallel(Segment s1, Segment s2) {\n\t\treturn isParallel(\n\t\t\t\ts1.p2.subtract(s1.p1),\n\t\t\t\ts2.p2.subtract(s2.p1)\n\t\t);\n\t}\n}\n\nclass Point implements Comparable<Point> {\n\n\tstatic double EPS = 1e-10;\n\n\tdouble x, y;\n\n\tPoint() {\n\t\tthis(0.0, 0.0);\n\t}\n\n\tpublic Point(double x, double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\t@Override\n\tpublic int compareTo(Point p) {\n\t\tif (equals(p)) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tif (x != p.x) {\n\t\t\t\treturn Double.compare(y, p.y);\n\t\t\t} else {\n\t\t\t\treturn Double.compare(x, p.x);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tPoint p = (Point) obj;\n\t\treturn x - p.x < EPS && y - p.y < EPS;\n\t}\n\n\tPoint add(Point p) {\n\t\treturn (Point) new Point(x + p.x, y + p.y);\n\t}\n\n\tPoint subtract(Point p) {\n\t\treturn (Point) new Point(x - p.x, y - p.y);\n\t}\n\n\tPoint multiply(double k) {\n\t\treturn (Point) new Point(x * k, y * k);\n\t}\n\n\tPoint devide(double k) {\n\t\treturn (Point) new Point(x / k, y / k);\n\t}\n\n\tdouble inner(Point p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\n\tdouble outer(Point p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tdouble abs() {\n\t\treturn Math.sqrt(norm());\n\t}\n}\n\nclass Segment {\n\tPoint p1, p2;\n\n\tpublic Segment() {\n\t\tthis(new Point(), new Point());\n\t}\n\n\tpublic Segment(Point p1, Point p2) {\n\t\tthis.p1 = p1;\n\t\tthis.p2 = p2;\n\t}\n}\n\nclass Circle {\n\tPoint c;\n\tdouble r;\n\n\tpublic Circle() {\n\t\tthis(new Point(), 0.0);\n\t}\n\n\tpublic Circle(Point c, double r) {\n\t\tthis.c = c;\n\t\tthis.r = r;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.*;\n \npublic class Main implements Runnable {\n\t\n    public static void main(String[] args) {\n    \tnew Thread(null, new Main(), \"\", 16 * 1024 * 1024).start();\n    }\n    \n    public void run() {\n        FastScanner sc = new FastScanner();\n        \n        int q = sc.nextInt();\n        \n        for(int i=0;i<q;i++){\n        \tPoint p0 = new Point(sc.nextDouble(),sc.nextDouble());\n        \tPoint p1 = new Point(sc.nextDouble(),sc.nextDouble());\n        \tPoint p2 = new Point(sc.nextDouble(),sc.nextDouble());\n        \tPoint p3 = new Point(sc.nextDouble(),sc.nextDouble());\n        \tLine l1 = new Line(p0,p1);\n        \tLine l2 = new Line(p2,p3);\n        \t\n        \tif(l1.isParallel(l2)){\n        \t\tSystem.out.println(2);\n        \t}\n        \telse if(l1.isOrthogonal(l2)){\n        \t\tSystem.out.println(1);\n        \t}\n        \telse{\n        \t\tSystem.out.println(0);\n        \t}\n        }\n\n    }\n\n}\n\nclass Line {\n\tstatic final double allowableError = 0.00000001;\n\tdouble a;\n\tdouble b;\n\tdouble c;\n\t\n\t//2点p,qを通る直線\n\tpublic Line(Point p, Point q){\n\t\tif(p.y == q.y){\n\t\t\tthis.a = 0;\n\t\t\tthis.b = 1;\n\t\t\tthis.c = -(p.y);\n\t\t}\n\t\telse if(p.x == q.x){\n\t\t\tthis.a = 1;\n\t\t\tthis.b = 0;\n\t\t\tthis.c = -(p.x);\n\t\t}\n\t\telse{\n\t\t\tthis.a = p.y - q.y;\n\t\t\tthis.b = q.x - p.x;\n\t\t\tthis.c = - a*p.x - b*p.y;\n\t\t}\n\t}\n\t//ax+by+c=0\n\tpublic Line(double a, double b, double c){\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\t}\n\t//y=ax+c\n\tpublic Line(double a, double c){\n\t\tthis.a = a;\n\t\tthis.b = -1;\n\t\tthis.c = c;\n\t}\n\t\n\t//点pからの垂線の足\n\tpublic Point projection(Point p){\n\t\t//-bx+ay+d=0がこの直線と垂直でpを通る直線とし、dを求める\n\t\tdouble d = b*p.x - a*p.y;\n\t\treturn intersection(new Line(-b,a,d));\n\t}\n\t\n\t//点pと線対称な点\n\tpublic Point reflection(Point p){\n\t\tPoint proj = projection(p);\n\t\tdouble x = proj.x + (proj.x - p.x);\n\t\tdouble y = proj.y + (proj.y - p.y);\n\t\treturn new Point(x,y);\n\t}\n\t\n\t//直線lとの交点\n\tpublic Point intersection(Line l){\n\t\tif(a==0){ //b=1前提\n\t\t\tdouble x = (l.b*c - l.c)/l.a;\n\t\t\treturn new Point(x,-c);\n\t\t}\n\t\tif(l.a==0){ //l.b=1前提\n\t\t\tdouble x = (b*l.c - c)/a;\n\t\t\treturn new Point(x, -l.c);\n\t\t}\n\t\t\n\t\t//xの係数をlと等しくする\n\t\t//気持ちは double A = l.a;\n\t\tdouble mlt = l.a/a;\n\t\tdouble B = b * mlt;\n\t\tdouble C = c * mlt;\n\t\tdouble y = (l.c-C)/(B-l.b);\n\t\tdouble x = (-b*y-c)/a;\n\t\treturn new Point(x,y);\n\t}\n\t\n\t//直線lと平行かどうか\n\tboolean isParallel(Line l){\n\t\tif(Math.abs(a*l.b - l.a*b) < allowableError){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t//直線lと垂直かどうか\n\tboolean isOrthogonal(Line l){\n\t\tif(Math.abs(a*l.a + b*l.b) < allowableError){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tpublic void display(){\n\t\tSystem.out.println(a + \"x + \" + b + \"y + \" + c + \" = 0\");\n\t}\n\t\n}\n\n\nclass Point implements Comparable<Point>{\n\tdouble x,y;\n\t\n\tpublic Point(double a, double b){\n\t\tthis.x = a;\n\t\tthis.y = b;\n\t}\n\t\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tlong temp;\n\t\ttemp = Double.doubleToLongBits(x);\n\t\tresult = prime * result + (int) (temp ^ (temp >>> 32));\n\t\ttemp = Double.doubleToLongBits(y);\n\t\tresult = prime * result + (int) (temp ^ (temp >>> 32));\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tPoint other = (Point) obj;\n\t\tif (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))\n\t\t\treturn false;\n\t\tif (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\t\n\t@Override\n\tpublic int compareTo(Point o){\n\t\tif(x!=o.x){\n\t\t\treturn Double.compare(x,o.x);\n\t\t}\n\t\treturn Double.compare(y, o.y);\n\t}\n\t\t\n}\n\nclass FastScanner {\n\tprivate final InputStream in = System.in;\n\tprivate final byte[] buffer = new byte[1024];\n\tprivate int ptr = 0;\n\tprivate int buflen = 0;\n\tprivate boolean hasNextByte() {\n\t\tif (ptr < buflen) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tptr = 0;\n\t\t\ttry {\n\t\t\t\tbuflen = in.read(buffer);\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tif (buflen <= 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tprivate int readByte() {\n\t\tif (hasNextByte())\n\t\t\treturn buffer[ptr++];\n\t\telse\n\t\t\treturn -1;\n\t}\n\tprivate static boolean isPrintableChar(int c) {\n\t\treturn 33 <= c && c <= 126;\n\t}\n\tpublic boolean hasNext() {\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\n\t\t\tptr++;\n\t\treturn hasNextByte();\n\t}\n\tpublic String next() {\n\t\tif (!hasNext())\n\t\t\tthrow new NoSuchElementException();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint b = readByte();\n\t\twhile (isPrintableChar(b)) {\n\t\t\tsb.appendCodePoint(b);\n\t\t\tb = readByte();\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic long nextLong() {\n\t\tif (!hasNext())\n\t\t\tthrow new NoSuchElementException();\n\t\tlong n = 0;\n\t\tboolean minus = false;\n\t\tint b = readByte();\n\t\tif (b == '-') {\n\t\t\tminus = true;\n\t\t\tb = readByte();\n\t\t}\n\t\tif (b < '0' || '9' < b) {\n\t\t\tthrow new NumberFormatException();\n\t\t}\n\t\twhile (true) {\n\t\t\tif ('0' <= b && b <= '9') {\n\t\t\t\tn *= 10;\n\t\t\t\tn += b - '0';\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\n\t\t\t\treturn minus ? -n : n;\n\t\t\t} else {\n\t\t\t\tthrow new NumberFormatException();\n\t\t\t}\n\t\t\tb = readByte();\n\t\t}\n\t}\n\tpublic int nextInt() {\n\t\tlong nl = nextLong();\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\n\t\t\tthrow new NumberFormatException();\n\t\treturn (int) nl;\n\t}\n\tpublic int[] nextIntArray(int n){\n\t\tint[] a = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\treturn a;\n\t}\n\tpublic Integer[] nextIntegerArray(int n){\n\t\tInteger[] a = new Integer[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\treturn a;\n\t}\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nimport static java.lang.Integer.parseInt;\n\n/**\n * Segments/Lines - Parallel/Orthogonal\n */\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString line;\n\t\tString[] words;\n\n\t\tint q = sc.nextInt();\n\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tdouble xp0 = sc.nextDouble();\n\t\t\tdouble yp0 = sc.nextDouble();\n\t\t\tdouble xp1 = sc.nextDouble();\n\t\t\tdouble yp1 = sc.nextDouble();\n\t\t\tdouble xp2 = sc.nextDouble();\n\t\t\tdouble yp2 = sc.nextDouble();\n\t\t\tdouble xp3 = sc.nextDouble();\n\t\t\tdouble yp3 = sc.nextDouble();\n\t\t\tsc.nextLine();\n\n\t\t\tSegment s1 = new Segment(new Point(xp0, yp0), new Point(xp1, yp1));\n\t\t\tSegment s2 = new Segment(new Point(xp2, yp2), new Point(xp3, yp3));\n\n\t\t\tboolean parallel = Geometries.isParallel(s1, s2);\n\t\t\tboolean orthogonal = Geometries.isOrthogonal(s1, s2);\n\n\t\t\tif (parallel) {\n\t\t\t\tSystem.out.println(2);\n\t\t\t} else if (orthogonal) {\n\t\t\t\tSystem.out.println(1);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(0);\n\t\t\t}\n\t\t}\n\t} //end main\n}\n\nclass Geometries {\n\n\tstatic double EPS = 1e-10;\n\n\t//\n\tstatic boolean equals(double a, double b) {\n\t\treturn Math.abs(a - b) < EPS;\n\t}\n\n\t//??´?????????\n\tstatic boolean isOrthogonal(Point a, Point b) {\n\t\treturn equals(a.inner(b), 0.0);\n\t}\n\n\tstatic boolean isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isOrthogonal(\n\t\t\t\ta1.subtract(a2),\n\t\t\t\tb1.subtract(b2)\n\t\t);\n\t}\n\n\tstatic boolean isOrthogonal(Segment s1, Segment s2) {\n\t\treturn isOrthogonal(\n\t\t\t\ts1.p2.subtract(s1.p1),\n\t\t\t\ts2.p2.subtract(s2.p1)\n\t\t);\n\t}\n\n\t//????????????\n\tstatic boolean isParallel(Point a, Point b) {\n\t\treturn equals(a.outer(b), 0.0);\n\t}\n\n\tstatic boolean isParallel(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isParallel(\n\t\t\t\ta1.subtract(a2),\n\t\t\t\tb1.subtract(b2)\n\t\t);\n\t}\n\n\tstatic boolean isParallel(Segment s1, Segment s2) {\n\t\treturn isParallel(\n\t\t\t\ts1.p2.subtract(s1.p1),\n\t\t\t\ts2.p2.subtract(s2.p1)\n\t\t);\n\t}\n}\n\nclass Point implements Comparable<Point> {\n\n\tstatic double EPS = 1e-10;\n\n\tdouble x, y;\n\n\tPoint() {\n\t\tthis(0.0, 0.0);\n\t}\n\n\tpublic Point(double x, double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\t@Override\n\tpublic int compareTo(Point p) {\n\t\tif (equals(p)) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tif (x != p.x) {\n\t\t\t\treturn Double.compare(y, p.y);\n\t\t\t} else {\n\t\t\t\treturn Double.compare(x, p.x);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tPoint p = (Point) obj;\n\t\treturn x - p.x < EPS && y - p.y < EPS;\n\t}\n\n\tPoint add(Point p) {\n\t\treturn (Point) new Point(x + p.x, y + p.y);\n\t}\n\n\tPoint subtract(Point p) {\n\t\treturn (Point) new Point(x - p.x, y - p.y);\n\t}\n\n\tPoint multiply(double k) {\n\t\treturn (Point) new Point(x * k, y * k);\n\t}\n\n\tPoint devide(double k) {\n\t\treturn (Point) new Point(x / k, y / k);\n\t}\n\n\tdouble inner(Point p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\n\tdouble outer(Point p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tdouble abs() {\n\t\treturn Math.sqrt(norm());\n\t}\n}\n\nclass Segment {\n\tPoint p1, p2;\n\n\tpublic Segment() {\n\t\tthis(new Point(), new Point());\n\t}\n\n\tpublic Segment(Point p1, Point p2) {\n\t\tthis.p1 = p1;\n\t\tthis.p2 = p2;\n\t}\n}\n\nclass Circle {\n\tPoint c;\n\tdouble r;\n\n\tpublic Circle() {\n\t\tthis(new Point(), 0.0);\n\t}\n\n\tpublic Circle(Point c, double r) {\n\t\tthis.c = c;\n\t\tthis.r = r;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\t// TODO 自動生成されたメソッド・スタブ\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tint q = Integer.parseInt(br.readLine());\n\t\tfor(int i = 0; i < q; i++){\n\t\t\tString[] tmpArray = br.readLine().split(\" \");\n\n\t\t\tint px1 = Integer.parseInt(tmpArray[0]);\n\t\t\tint py1 = Integer.parseInt(tmpArray[1]);\n\t\t\tint px2 = Integer.parseInt(tmpArray[2]);\n\t\t\tint py2 = Integer.parseInt(tmpArray[3]);\n\t\t\tint px3 = Integer.parseInt(tmpArray[4]);\n\t\t\tint py3 = Integer.parseInt(tmpArray[5]);\n\t\t\tint px4 = Integer.parseInt(tmpArray[6]);\n\t\t\tint py4 = Integer.parseInt(tmpArray[7]);\n\n\t\t\tif(isParallel(px1, py1, px2, py2, px3, py3, px4, py4)){\n\t\t\t\tSystem.out.println(2);\n\t\t\t}\n\t\t\telse if(isOrthogonal(px1, py1, px2, py2, px3, py3, px4, py4)){\n\t\t\t\tSystem.out.println(1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(0);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic final double EPS = 0.0000001;\n\n\tstatic boolean isParallel(double px1, double py1, double px2, double py2, double px3, double py3, double px4, double py4){\n\t\tdouble vx1 = px2 - px1;\n\t\tdouble vy1 = py2 - py1;\n\t\tdouble vx2 = px4 - px3;\n\t\tdouble vy2 = py4 - py3;\n\n\t\tif(Math.abs(vx1*vx2) < EPS){\n\t\t\tif(Math.abs(vx1 + vx2) < EPS){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\telse if(Math.abs(vy1/vx1 - vy2/vx2) < EPS){\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\tstatic boolean isOrthogonal(double px1, double py1, double px2, double py2, double px3, double py3, double px4, double py4){\n\t\tdouble vx1 = px2 - px1;\n\t\tdouble vy1 = py2 - py1;\n\t\tdouble vx2 = px4 - px3;\n\t\tdouble vy2 = py4 - py3;\n\n\t\tdouble innerProduct = vx1*vx2 + vy1*vy2;\n\n\t\tif(Math.abs(innerProduct) < EPS){\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        new Solver().solve(new Scanner(System.in));\n//        new Solver().solve(new Scanner(ex));\n    }\n\n    private static final String ex = \"3\\n\" +\n            \"0 0 3 0 0 2 3 2\\n\" +\n            \"0 0 3 0 1 1 1 4\\n\" +\n            \"0 0 3 0 1 1 2 2\\n\";\n}\n\nclass Solver {\n    private static final double EPS = 1e-10;\n\n    void solve(Scanner scanner) {\n        int q = scanner.nextInt();\n        for (int i = 0; i < q; i ++) {\n            Vector u = new Vector(\n                    new Point(scanner.nextInt(), scanner.nextInt()),\n                    new Point(scanner.nextInt(), scanner.nextInt())\n            );\n            Vector v = new Vector(\n                    new Point(scanner.nextInt(), scanner.nextInt()),\n                    new Point(scanner.nextInt(), scanner.nextInt())\n            );\n\n            if (Math.abs(u.innerProduct(v)) < EPS) {\n                System.out.println(1);\n            } else if (Math.abs(u.outerProduct(v)) < EPS) {\n                System.out.println(2);\n            } else {\n                System.out.println(0);\n            }\n        }\n\n    }\n\n    private int[] splitInt(String s) {\n        String[] split = s.split(\" \");\n        int[] splitInt = new int[split.length];\n        for (int i = 0; i < split.length; i ++) {\n            splitInt[i] = Integer.parseInt(split[i]);\n        }\n        return splitInt;\n    }\n\n    private long[] splitLong(String s) {\n        String[] split = s.split(\" \");\n        long[] splitLong = new long[split.length];\n        for (int i = 0; i < split.length; i ++) {\n            splitLong[i] = Long.parseLong(split[i]);\n        }\n        return splitLong;\n    }\n}\n\nclass Point {\n    double x;\n    double y;\n\n    Point(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nclass Vector extends Point {\n    Vector(double x, double y) {\n        super(x, y);\n    }\n\n    Vector (Point from, Point to) {\n        this(to.x - from.x, to.y - from.y);\n    }\n\n    double innerProduct(Vector v) {\n        return this.x * v.x + this.y * v.y;\n    }\n\n    double outerProduct(Vector v) {\n        return this.x * v.y - this.y * v.x;\n    }\n\n    double abs() {\n        return Math.sqrt(x * x + y * y);\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n//import java.io.*;\nimport java.util.stream.IntStream;\n\n\npublic class Main{\n    static int sum=0;\n    public static void main (String args[]){\n        //初期処理\n        Scanner sc=new Scanner(System.in);\n        // BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        // try{\n            // int n = Integer.parseInt(br.readLine());\n        int n = sc.nextInt();\n\n        for(int i=0; i<n; i++){\n            Vector p0 = new Vector(sc.nextInt(), sc.nextInt());\n            Vector p1 = new Vector(sc.nextInt(), sc.nextInt());\n            Vector p2 = new Vector(sc.nextInt(), sc.nextInt());\n            Vector p3 = new Vector(sc.nextInt(), sc.nextInt());\n\n            Vector s1 = p0.minus(p1);\n            Vector s2 = p2.minus(p3);\n            if(Vector.cross(s1, s2)==0){\n                System.out.println(2);\n                continue;\n            }else if(Vector.dot(s1, s2)==0){\n                System.out.println(1);\n            }else{\n                System.out.println(0);\n            }\n        }\n\n    }\n}\n\nclass Vector{\n    public static double EPS = 1e-10;\n    public double x,y;\n\n    public Vector(){}\n    public Vector(double x, double y){this.x=x;this.y=y;}\n\n    public Vector plus(Vector p){return new Vector(this.x+p.x, this.y+p.y);}\n    public Vector minus(Vector p){return new Vector(this.x-p.x, this.y-p.y);}\n    public Vector multiple(Vector p){return new Vector(this.x*p.x, this.y*p.y);}\n    public Vector divide(Vector p){return new Vector(this.x/p.x, this.y/p.y);}\n\n    public double abs(){return Math.sqrt(this.norm());}\n    public double norm(){return x*x+y*y;}\n\n    \n    public static double dot(Vector a, Vector b){\n        return a.x*b.x+a.y*b.y;\n    }\n\n    public static double cross(Vector a, Vector b){\n        return a.x*b.y-a.y*b.x;\n    }\n    \n}\n"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int q;\n    double[] xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n    int i;\n    double s1x, s1y, s2x, s2y;\n\n    q = sc.nextInt();\n    xp0 = new double[q];\n    yp0 = new double[q];\n    xp1 = new double[q];\n    yp1 = new double[q];\n    xp2 = new double[q];\n    yp2 = new double[q];\n    xp3 = new double[q];\n    yp3 = new double[q];\n\n    for(i = 0;i < q;i++){\n      xp0[i] = sc.nextDouble();\n      yp0[i] = sc.nextDouble();\n      xp1[i] = sc.nextDouble();\n      yp1[i] = sc.nextDouble();\n      xp2[i] = sc.nextDouble();\n      yp2[i] = sc.nextDouble();\n      xp3[i] = sc.nextDouble();\n      yp3[i] = sc.nextDouble();\n    }\n\n    for(i = 0;i < q;i++){\n      s1x = xp1[i] - xp0[i];\n      s1y = yp1[i] - yp0[i];\n      s2x = xp3[i] - xp2[i];\n      s2y = yp3[i] - yp2[i];\n\n      if((s1y / s1x) == (s2y / s2x)){\n        System.out.println(\"2\");\n      }else if((s1x * s2x + s1y * s2y) == 0.0){\n        System.out.println(\"1\");\n      }else{\n        System.out.println(\"0\");\n      }\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\n\npublic class Main {\n\tstatic boolean debug = false;\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tUserScanner scan = new UserScanner();\n\t\tPrintWriter pwriter = new PrintWriter(System.out);\n\n\t\tGeometry geom = new Geometry();\n\n\t\tint q = scan.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint x0 = scan.nextInt();\n\t\t\tint y0 = scan.nextInt();\n\t\t\tint x1 = scan.nextInt();\n\t\t\tint y1 = scan.nextInt();\n\t\t\tgeom.setBaseLine(new Point(x1 - x0, y1 - y0));\n\t\t\tint x2 = scan.nextInt();\n\t\t\tint y2 = scan.nextInt();\n\t\t\tint x3 = scan.nextInt();\n\t\t\tint y3 = scan.nextInt();\n\t\t\tPoint ans = geom.rotateBaseX(new Point(x3 - x2, y3 - y2), true);\n\t\t\tif (ans.x == 0)\n\t\t\t\tpwriter.println(\"1\");\n\t\t\telse if (ans.y == 0)\n\t\t\t\tpwriter.println(\"2\");\n\t\t\telse\n\t\t\t\tpwriter.println(\"0\");\n\t\t}\n\t\tpwriter.flush();\n\n\t\tscan.close();\n\t\tSystem.exit(0);\n\t}\n}\n\nclass Point {\n\tpublic double x, y;\n\n\tpublic Point(double x, double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n}\n\nclass Geometry {\n\tdouble sin, cos;\n\n\tpublic void setBaseLine(Point v) {\n\t\tdouble t2 = v.x * v.x + v.y * v.y;\n\t\tsin = v.y / Math.sqrt(t2);\n\t\tcos = v.x / Math.sqrt(t2);\n\t}\n\n\tpublic boolean isSameLine(Point p0, Point p1, Point p2) {\n\t\tif ((p1.x - p0.x) * (p2.y - p0.y) == (p2.x - p0.x) * (p1.y - p0.y))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic Point rotateBaseX(Point p, boolean direction) {\n\t\tif (direction)\n\t\t\treturn new Point(round(p.x * cos + p.y * sin), round(-p.x * sin + p.y * cos));\n\t\telse\n\t\t\treturn new Point(round(p.x * cos - p.y * sin), round(p.x * sin + p.y * cos));\n\t}\n\n\tprivate double round(double d) {\n\t\treturn (double) Math.round(d * 1000000000) / 1000000000;\n\t}\n\n}\n\nclass UserScanner {\n\tprivate final InputStream in = System.in;\n\tprivate final byte[] buffer = new byte[1024];\n\tprivate int ptr = 0;\n\tprivate int buflen = 0;\n\n\tprivate boolean read() throws IOException {\n\t\tptr = 0;\n\t\tbuflen = in.read(buffer);\n\t\tif (buflen <= 0)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n\t}\n\n\tprivate byte getByte() throws IOException {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (isCtlSpace(buffer[ptr])) {\n\t\t\treturn -1;\n\t\t} else\n\t\t\treturn buffer[ptr++];\n\t}\n\n\tprivate void skipCtlSpace() throws IOException {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (isCtlSpace(buffer[ptr])) {\n\t\t\tptr++;\n\t\t\tskipCtlSpace();\n\t\t}\n\t}\n\n\tprivate boolean isCtlSpace(byte b) {\n\t\tif (b <= ' ' || b > '~')\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic void close() throws IOException {\n\t\tin.close();\n\t}\n\n\tpublic String next() throws IOException {\n\t\tskipCtlSpace();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tsb.appendCodePoint(b);\n\t\t}\n\t\treturn sb.toString();\n\t}\n\n\tpublic int nextInt() throws IOException {\n\t\tskipCtlSpace();\n\t\tint n = 0;\n\t\tboolean minus = false;\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tif (b == '-')\n\t\t\t\tminus = true;\n\t\t\telse {\n\t\t\t\tn *= 10;\n\t\t\t\tn += (b - '0');\n\t\t\t}\n\t\t}\n\t\tif (minus)\n\t\t\treturn n * -1;\n\t\telse\n\t\t\treturn n;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\nclass Point {\n\tdouble EPS = 0.0000000001;\n\tdouble x; double y;\n\tpublic Point(double ax, double ay){x=ax;y=ay;}\n\tpublic Point sum(Point p) { return new Point(x+p.x,y+y); }\n\tpublic Point diff(Point p) { return new Point(x-p.x,y-p.y); }\n\tpublic Point mult(double k) { return new Point(x*k,y*k); }\n\tpublic Point div(double k) { return new Point(x*(1.0/k),y*(1.0/k)); }\n\tpublic boolean equals(Point p){return Math.abs(x-p.x)<EPS && Math.abs(y-p.y)<EPS;}\n}\nclass Vector extends Point {\n\tpublic Vector(double ax, double ay) {super(ax,ay);}\n\tpublic Vector(Point p1, Point p2) {super(p1.x-p2.x,p2.x-p2.y);}\n\tpublic double norm() {return x*x+y*y;}\n\tpublic double abs() {return Math.sqrt(norm());}\n\t// TODO:\n\tpublic boolean isSmallerThan(Vector v) {return x!=v.x?x<v.x:y<v.y;}\n\tpublic double dotProduct(Vector v) {return x*v.x+y*v.y;}\n\tpublic double crossProduct(Vector v) {return x*v.y - y*v.x;}\n}\n\nclass Segment {\n\tPoint p1; Point p2;\n\tpublic Segment(Point ap1, Point ap2){p1=ap1;p2=ap2;}\n\tpublic double dotProduct(Segment s) {return (p1.x-p2.x)*(s.p1.x-s.p2.x)+(p1.y-p2.y)*(s.p1.y-s.p2.y);}\n\tpublic double crossProduct(Segment s) {return (p1.x-p2.x)*(s.p1.y-s.p2.y) - (p1.y-p2.y)*(s.p1.x-s.p2.x);}\n}\nclass Line extends Segment{public Line(Point ap1, Point ap2){super(ap1,ap2);}}\n\n\npublic class Main{\n\n\tstatic double EPS = 0.0000000001;\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint q = scan.nextInt();\n\t\tfor (int i=0;i<q;i++) {\n\t\t\tLine l1 = new Line(new Point(scan.nextDouble(),scan.nextDouble()), new Point(scan.nextDouble(),scan.nextDouble()));\n\t\t\tLine l2 = new Line(new Point(scan.nextDouble(),scan.nextDouble()), new Point(scan.nextDouble(),scan.nextDouble()));\n\t\t\tif (isOrthogonal(l1,l2)) {\n\t\t\t\tSystem.out.println(1);\n\t\t\t} else if (isParallel(l1,l2)) {\n\t\t\t\tSystem.out.println(2);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(0);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\tstatic boolean equals(double d1, double d2){return Math.abs(d1-d2)<EPS;}\n\tboolean isOrthogonal(Vector v1, Vector v2) {return equals(v1.dotProduct(v2),0.0);}\n\tstatic boolean isOrthogonal(Segment s1, Segment s2) {return equals(s1.dotProduct(s2),0.0);}\n\tboolean isParallel(Vector v1, Vector v2) {return equals(v1.crossProduct(v2),0.0);}\n\tstatic boolean isParallel(Segment s1, Segment s2) {return equals(s1.crossProduct(s2),0.0);}\n\t\n\tclass Circle {Point c;double r;Circle(Point ac, double ar){c=ac;ar=r;}}\n\tclass Polygon extends ArrayList<Point>{}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\n\tpublic Main() {\n\t\tint q = in.nextInt();\n\t\tfor(int i=0;i<q;i++)new CGL_2A().doIt();\n\t}\n\n\tclass CGL_2A{\n\t\tfinal double EPS=1.0e-8;\n\t\tvoid doIt(){\n\t\t\tLine2D l1 = new Line2D.Double(in.nextDouble(),in.nextDouble(),in.nextDouble(),in.nextDouble());\n\t\t\tLine2D l2 = new Line2D.Double(in.nextDouble(),in.nextDouble(),in.nextDouble(),in.nextDouble());\n\t\t\tSystem.out.println(isParallel(l1, l2));\n\t\t}\n\n\t\tdouble cross(Point2D p1,Point2D p2){\n\t\t\treturn p1.getX()*p2.getY()-p1.getY()*p2.getX();\n\t\t}\n\n\t\tPoint2D diff(Point2D p1,Point2D p2){\n\t\t\treturn new Point2D.Double(p1.getX()-p2.getX(),p1.getY()-p2.getY());\n\t\t}\n\t\tboolean intersectLL(Line2D l1,Line2D l2){\n\t\t\treturn intersectLL(l1.getP1(),l1.getP2(),l2.getP1(),l2.getP2());\n\t\t}\n\t\tboolean intersectLL(Point2D a1,Point2D a2,Point2D b1,Point2D b2){\n\t\t\treturn (Math.abs(cross(diff(a2, a1), diff(b2, b1)))>EPS)||(Math.abs(cross(diff(a2, a1), diff(a1, b1)))<EPS);\n\t\t}\n\t\t\n\t\tprivate Point2D projection(Line2D l,Point2D p2){\n\t\t\tdouble kyori = l.getP1().distance(l.getP2());\n\t\t\tdouble angle = angle(l.getP1(),l.getP2(), p2);\n\t\t\tdouble t = l.getP1().distance(p2) * Math.cos(angle);\n\t\t\tPoint2D result = new Point2D.Double(l.getP1().getX()+(l.getP2().getX()-l.getP1().getX())*t/kyori,\n\t\t\t\t\tl.getP1().getY()+(l.getP2().getY()-l.getP1().getY())*t/kyori);\n\t\t\treturn result;\n\t\t}\n\n\t\tprivate double angle(Point2D p0, Point2D p1, Point2D p2){\n\t\t\treturn Math.atan2(p2.getY()-p0.getY(),p2.getX()-p0.getX())-\n\t\t\t\t\tMath.atan2(p1.getY()-p0.getY(),p1.getX()-p0.getX());\n\t\t}\n\t\t\n\t\tPoint2D intersectionPoint(Line2D l1,Line2D l2){\n\t\t\treturn intersectionPoint(l1.getP1(), l1.getP2(), l2.getP1(), l2.getP2()); \n\t\t}\n\t\tPoint2D intersectionPoint(Point2D a1,Point2D a2,Point2D b1,Point2D b2){\n\t\t\tPoint2D a=diff(a2,a1),\n\t\t\t\t\tb=diff(b2,b1);\n\t\t\treturn sum(a1, mul(cross(b, diff(b1,a1))/cross(b,a), a));\n\t\t}\n\t\t\n\t\tPoint2D mul(double n,Point2D p1){\n\t\t\treturn new Point2D.Double(p1.getX()*n,p1.getY()*n);\n\t\t}\n\t\tPoint2D sum(Point2D p1,Point2D p2){\n\t\t\treturn new Point2D.Double(p1.getX()+p2.getX(),p1.getY()+p2.getY());\n\t\t}\n\n\t\tint isParallel(Line2D l1,Line2D l2){\n\t\t\tif(intersectLL(l1, l2)==false)return 2;\n\t\t\tPoint2D n = projection(l1, l2.getP1());\n\t\t\tPoint2D s = intersectionPoint(l1, l2);\n\t\t\tif(Math.abs(n.getX()-s.getX())<EPS&&Math.abs(n.getY()-s.getY())<EPS)return 1;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\n\npublic class Main {\n    static boolean debug = false;\n    \n    public static void main(String[] args) throws IOException {\n        UserScanner scan = new UserScanner();\n        PrintWriter pwriter = new PrintWriter(System.out);\n        \n        Geometry geom = new Geometry();\n        \n        int q = scan.nextInt();\n        \n        for(int i = 0; i < q; i++) {\n            int x0 = scan.nextInt();\n            int y0 = scan.nextInt();\n            int x1 = scan.nextInt();\n            int y1 = scan.nextInt();\n            \n            geom.setBaseLine(new Point(x1 - x0, y1 - y0));\n            \n            int x2 = scan.nextInt();\n            int y2 = scan.nextInt();\n            int x3 = scan.nextInt();\n            int y3 = scan.nextInt();\n            \n            Point ans = geom.rotateBaseX(new Point(x3 - x2, y3 - y2), true);\n            \n            if(ans.x == 0)\n                pwriter.println(\"1\");\n            else if(ans.y == 0)\n                pwriter.println(\"2\");\n            else\n                pwriter.println(\"0\");\n        }\n        pwriter.flush();\n        \n        scan.close();\n        System.exit(0);\n    }\n}\n\nclass Point {\n    public double x, y;\n    \n    public Point(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nclass Geometry {\n    double sin, cos;\n    \n    public void setBaseLine(Point v) {\n        double t2 = v.x * v.x + v.y * v.y;\n        sin = v.y / Math.sqrt(t2);\n        cos = v.x / Math.sqrt(t2);\n    }\n    \n    public boolean isSameLine(Point p0, Point p1, Point p2) {\n        if((p1.x - p0.x) * (p2.y - p0.y) == (p2.x - p0.x) * (p1.y - p0.y))\n            return true;\n        else\n            return false;\n    }\n    \n    public Point rotateBaseX(Point p, boolean direction) {\n        if(direction) \n            return new Point(round(p.x * cos + p.y * sin), round(-p.x * sin + p.y * cos));\n        else\n            return new Point(round(p.x * cos + p.y * sin), round(p.x * sin + p.y * cos));\n    }\n    \n    private double round(double d) {\n        return (double) Math.round(d * 1000000000) / 1000000000;\n    }\n}\n\nclass UserScanner {\n    private final InputStream in = System.in;\n    private final byte[] buffer = new byte[1024];\n    private int ptr = 0;\n    private int buflen = 0;\n    \n    private boolean read() throws IOException {\n        ptr = 0;\n        buflen = in.read(buffer);\n        if(buflen <= 0)\n            return false;\n        else\n            return true;\n    }\n    \n    private byte getByte() throws IOException {\n        if(ptr >= buflen)\n            read();\n        if(isCtlSpace(buffer[ptr])) {\n            return -1;\n        } else\n            return buffer[ptr++];\n    }\n    \n    private void skipCtlSpace() throws IOException {\n        if(ptr >= buflen)\n            read();\n        if(isCtlSpace(buffer[ptr])) {\n            ptr++;\n            skipCtlSpace();\n        }\n    }\n    \n    private boolean isCtlSpace(byte b) {\n        if(b <= ' ' || b > '~')\n            return true;\n        else \n            return false;\n    }\n    \n    public void close() throws IOException {\n        in.close();\n    }\n    \n    public String next() throws IOException {\n        skipCtlSpace();\n        StringBuilder sb = new StringBuilder();\n        byte b;\n        \n        while((b = getByte()) != -1) {\n            sb.appendCodePoint(b);\n        }\n        return sb.toString();\n    }\n    \n    public int nextInt() throws IOException {\n        skipCtlSpace();\n        int n = 0;\n        boolean minus = false;\n        byte b;\n        while((b = getByte()) != -1) {\n            if(b == '-')\n                minus = true;\n            else {\n                n *= 10;\n                n += (b - '0');\n            }\n        }\n        if(minus)\n            return n * -1;\n        else \n            return n;\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint q = scan.nextInt();\n\t\tfor(int i = 0; i < q; i++) {\n\t\t\tint[]p0 = new int[2];\n\t\t\tint[]p1 = new int[2];\n\t\t\tint[]p2 = new int[2];\n\t\t\tint[]p3 = new int[2];\n\t\t\tp0[0] = scan.nextInt();\n\t\t\tp0[1] = scan.nextInt();\n\t\t\tp1[0] = scan.nextInt();\n\t\t\tp1[1] = scan.nextInt();\n\t\t\tp2[0] = scan.nextInt();\n\t\t\tp2[1] = scan.nextInt();\n\t\t\tp3[0] = scan.nextInt();\n\t\t\tp3[1] = scan.nextInt();\n\t\t\tint[]u = vec(p0, p1);\n\t\t\tint[]v = vec(p2, p3);\n\t\t\tif(dot(u, v) == 0) {\n\t\t\t\tSystem.out.println(1);\n\t\t\t}else if(u[0] * v[1] - u[1] * v[0] == 0) {\n\t\t\t\tSystem.out.println(2);\n\t\t\t}else {\n\t\t\t\tSystem.out.println(0);\n\t\t\t}\n\t\t}\n\t}\n\tstatic int norm(int[]p) {\n\t\treturn p[0] * p[0] + p[1] * p[1];\n\t}\n\tstatic int[] vec(int[]p1, int[]p2) {\n\t\tint[]u = {p2[0] - p1[0], p2[1] - p1[1]};\n\t\treturn u;\n\t}\n\tstatic int dot(int[]u, int[]v) {\n\t\treturn u[0] * v[0] + u[1] * v[1];\n\t}\n\tstatic int cross(int[]u, int[]v) {\n\t\treturn u[0] * v[1] + u[1] * v[0];\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\nimport java.math.BigDecimal;\n\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tint q = stdIn.nextInt();\n\t\tfor(int i=0;i<q;i++){\n\t\t\tdouble x0 = stdIn.nextDouble();\n\t\t\tdouble y0 = stdIn.nextDouble();\n\t\t\tdouble x1 = stdIn.nextDouble();\n\t\t\tdouble y1 = stdIn.nextDouble();\n\t\t\tdouble x2 = stdIn.nextDouble();\n\t\t\tdouble y2 = stdIn.nextDouble();\n\t\t\tdouble x3 = stdIn.nextDouble();\n\t\t\tdouble y3 = stdIn.nextDouble();\n\t\t\tVector v1 = new Vector(x0,y0,x1,y1);\n\t\t\tVector v2 = new Vector(x2,y2,x3,y3);\n\t\t\tif(v1.judgeisOrthogonal(v2)){\n\t\t\t\tSystem.out.println(1);\n\t\t\t}\n\t\t\telse if(v1.judgeisParallel(v2)){\n\t\t\t\tSystem.out.println(2);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(0);\n\t\t\t}\n\n\t\t}\n\n\t}\t\n}\n\nclass Vector{\n\tpublic final double EPS = Math.pow(10,-8);\n\tpublic double x,y;\n\tfinal int cutoff = 9;\n\n\tVector( double x1 , double y1 , double x2 , double y2 ){\n\t\tthis.x = x2 - x1;\n\t\tthis.y = y2 - y1;\n\t}\n\n\tdouble dot( Vector a ){\t\n\t\treturn rounding(this.x * a.x + this.y * a.y);\n\t}\n\tdouble cross( Vector a ){\t\n\t\treturn rounding(this.x * a.y - this.y * a.x);\n\t}\n\n\tvoid add( Vector a ){\n\t\tthis.x = rounding(this.x + a.x);\n\t\tthis.y = rounding(this.y + a.y);\n\t}\n\tvoid sub( Vector a ){\n\t\tthis.x = rounding(this.x - a.x);\n\t\tthis.y = rounding(this.y - a.y);\n\t}\n\tvoid mul( double z ){\n\t\tthis.x = rounding(this.x * z);\n\t\tthis.y = rounding(this.y * z);\n\t}\n\tvoid div( double z ){\n\t\tthis.x = rounding(this.x / z);\n\t\tthis.y = rounding(this.y / z);\n\t}\n\n\tdouble abs(){\n\t\treturn Math.sqrt(norm());\n\t}\n\tdouble norm(){\n\t\treturn rounding(this.x * this.x + this.y * this.y);\n\t}\n\n\tvoid projection( Vector a ){\n\t\tif(judge(a.norm())){\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t}\n\t\telse{\n\t\t\tdouble cos = dot(a)/(abs() * a.abs());\n\t\t\tdouble frac = a.abs() * cos/abs();\n\t\t\tmul(frac);\n\t\t}\n\t}\n\tVector reflection( Vector a ){\n\t\tprojection(a);\n\t\treturn new Vector(a.x,a.y,this.x,this.y);\n\t}\n\n\tboolean judgeisOrthogonal( Vector a ){\t\n\t\treturn judge(dot(a)) ? true : false;\n\t}  \n\tboolean judgeisParallel( Vector a ){\t\n\t\treturn judge(cross(a)) ? true : false;\n\t}\n\n\tboolean judge( double a ){\t\t\n\t\treturn Math.abs(a)<EPS ? true : false;\n\t}\n\tdouble rounding(double a){\n\t\tBigDecimal bi = new BigDecimal(String.valueOf(a));\n\t\treturn bi.setScale(cutoff,BigDecimal.ROUND_HALF_UP).doubleValue();\n\t}\n} "
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.NoSuchElementException;\n\npublic class Main {\n\tstatic FastScanner sc = new FastScanner();\n\tstatic final double ALLOWABLE_ERROR = 0.00000001;\n\n\tpublic static void main(String[] args) {\n\t\tint q = sc.nextInt();\n\t\t\n\t\tStringBuilder ans = new StringBuilder();\n\t\tfor(int i=0; i<q; i++) {\n\t\t\tdouble x0 = sc.nextDouble();\n\t\t\tdouble y0 = sc.nextDouble();\n\t\t\tdouble x1 = sc.nextDouble();\n\t\t\tdouble y1 = sc.nextDouble();\n\t\t\tdouble x2 = sc.nextDouble();\n\t\t\tdouble y2 = sc.nextDouble();\n\t\t\tdouble x3 = sc.nextDouble();\n\t\t\tdouble y3 = sc.nextDouble();\n\t\t\t\n\t\t\tif(x0 == x1) {\n\t\t\t\tif(x2 == x3) {\n\t\t\t\t\tans.append(2);\n\t\t\t\t} else if(y2 == y3) {\n\t\t\t\t\tans.append(1);\n\t\t\t\t} else {\n\t\t\t\t\tans.append(0);\n\t\t\t\t}\n\t\t\t} else if(y0 == y1) {\n\t\t\t\tif(x2 == x3) {\n\t\t\t\t\tans.append(1);\n\t\t\t\t} else if(y2 == y3) {\n\t\t\t\t\tans.append(2);\n\t\t\t\t} else {\n\t\t\t\t\tans.append(0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdouble a1 = (y1 - y0) / (x1 - x0);\n\t\t\t\tdouble a2 = (y3 - y2) / (x3 - x2);\n\t\t\t\t\n\t\t\t\tif(a2 == a1) {\n\t\t\t\t\tans.append(2);\n\t\t\t\t} else if(a1 * a2 == -1) {\n\t\t\t\t\tans.append(1);\n\t\t\t\t} else {\n\t\t\t\t\tans.append(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tans.append(\"\\n\");\n\t\t}\n\t\t\n\t\tSystem.out.print(ans);\n\t}\n\n\tstatic class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if(ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch(IOException e) {\n                    e.printStackTrace();\n                }\n                if(buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuilder sb = new StringBuilder();\n            int b = readByte();\n            while(isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n                b = readByte();\n            }\n            return sb.toString();\n        }\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n        public int nextInt(){\n            return Integer.parseInt(next());\n        }\n        public double nextDouble(){\n            return Double.parseDouble(next());\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    int q;\n    double xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3;\n    int i;\n    double s1x, s1y, s2x, s2y;\n\n    q = sc.nextInt();\n\n    for(i = 0;i < q;i++){\n      xp0 = sc.nextDouble();\n      yp0 = sc.nextDouble();\n      xp1 = sc.nextDouble();\n      yp1 = sc.nextDouble();\n      xp2 = sc.nextDouble();\n      yp2 = sc.nextDouble();\n      xp3 = sc.nextDouble();\n      yp3 = sc.nextDouble();\n\n      s1x = xp1 - xp0;\n      s1y = yp1 - yp0;\n      s2x = xp3 - xp2;\n      s2y = yp3 - yp2;\n\n      if((s1y / s1x) == (s2y / s2x)){\n        System.out.println(\"2\");\n      }else if((s1x * s2x + s1y * s2y) == 0.0){\n        System.out.println(\"1\");\n      }else{\n        System.out.println(\"0\");\n      }\n    }\n\n    sc.close();\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.NoSuchElementException;\n\npublic class Main {\n\tstatic FastScanner sc = new FastScanner();\n\tstatic final double ALLOWABLE_ERROR = 0.00000001;\n\n\tpublic static void main(String[] args) {\n\t\tint q = sc.nextInt();\n\t\t\n\t\tStringBuilder ans = new StringBuilder();\n\t\tfor(int i=0; i<q; i++) {\n\t\t\tdouble x0 = sc.nextDouble();\n\t\t\tdouble y0 = sc.nextDouble();\n\t\t\tdouble x1 = sc.nextDouble();\n\t\t\tdouble y1 = sc.nextDouble();\n\t\t\tdouble x2 = sc.nextDouble();\n\t\t\tdouble y2 = sc.nextDouble();\n\t\t\tdouble x3 = sc.nextDouble();\n\t\t\tdouble y3 = sc.nextDouble();\n\t\t\t\n\t\t\tif(x0 == x1) {\n\t\t\t\tif(x2 == x3) {\n\t\t\t\t\tans.append(2);\n\t\t\t\t} else if(y2 == y3) {\n\t\t\t\t\tans.append(1);\n\t\t\t\t} else {\n\t\t\t\t\tans.append(0);\n\t\t\t\t}\n\t\t\t} else if(y0 == y1) {\n\t\t\t\tif(x2 == x3) {\n\t\t\t\t\tans.append(1);\n\t\t\t\t} else if(y2 == y3) {\n\t\t\t\t\tans.append(2);\n\t\t\t\t} else {\n\t\t\t\t\tans.append(0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdouble a1 = (y1 - y0) / (x1 - x0);\n\t\t\t\tdouble a2 = (y3 - y2) / (x3 - x2);\n\t\t\t\t\n\t\t\t\tif(Math.abs(a2 - a1) < ALLOWABLE_ERROR) {\n\t\t\t\t\tans.append(2);\n\t\t\t\t} else if(Math.abs((a1 * a2) + 1) < ALLOWABLE_ERROR) {\n\t\t\t\t\tans.append(1);\n\t\t\t\t} else {\n\t\t\t\t\tans.append(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tans.append(\"\\n\");\n\t\t}\n\t\t\n\t\tSystem.out.print(ans);\n\t}\n\n\tstatic class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if(ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch(IOException e) {\n                    e.printStackTrace();\n                }\n                if(buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuilder sb = new StringBuilder();\n            int b = readByte();\n            while(isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n                b = readByte();\n            }\n            return sb.toString();\n        }\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n        public int nextInt(){\n            return Integer.parseInt(next());\n        }\n        public double nextDouble(){\n            return Double.parseDouble(next());\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace CSharpSample01\n{\n\n    class Vector\n    {\n        public int x;\n        public int y;\n\n        public Vector(int x, int y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n    }\n    \n    class Program\n    {       \n        \n        static void Main(string[] args)\n        {\n            int q = int.Parse(Console.ReadLine());\n\n            var ans = new List<int>();\n\n            for(int i = 0; i < q; i++)\n            {\n                int[] data = Console.ReadLine().Split(' ').Select(x => int.Parse(x)).ToArray();\n                Vector a = new Vector(data[2] - data[0], data[3] - data[1]);\n                Vector b = new Vector(data[6] - data[4], data[7] - data[5]);\n\n                int k = 0;\n\n                if(a.x * b.x + a.y * b.y == 0)\n                {\n                    k = 1;\n                }\n                else if (a.x * b.y - a.y * b.x == 0)\n                {\n                    k = 2;\n                }\n\n                ans.Add(k);\n\n            }\n\n            foreach(var s in ans)\n            {\n                Console.WriteLine(s);\n            }\n\n        }\n    }\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing Aoj.CGL.Lib;\n \nnamespace Aoj.CGL.Chapter2A\n{\n    class Program\n    {\n        public static void Solve()\n        {\n            int n = int.Parse(Console.ReadLine());\n  \n            for (int i = 0; i < n; i++)\n            {\n                int[] input = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n \n                var seg1 = new Segment(input[0],input[1],input[2],input[3]);\n                var seg2 = new Segment(input[4],input[5],input[6],input[7]);\n \n                int answer = 0;\n                if (Segment.IsOrthogonal(seg1, seg2))\n                    answer = 1;\n                else if (Segment.IsParallel(seg1, seg2))\n                    answer = 2;\n \n                Console.WriteLine(answer);\n            }\n        }\n \n        public static void Main()\n        {\n            // Console.SetIn(new System.IO.StreamReader(\"ComputationalGeometry/Input/02_Segment_Line_A_01.txt\"));\n            // var sw = new Stopwatch();\n            // sw.Start();\n \n            Solve();\n \n            // Console.WriteLine(\"{0}ms\", sw.ElapsedMilliseconds);\n        }\n    }\n}\n \nnamespace Aoj.CGL.Lib\n{\n    using Line = Segment;\n \n    using Polygon = List<Point>;\n    //using Point = Vector;\n \n    public struct Point\n    {\n        private double _x;\n        private double _y;\n\n        public double X { get { return _x;} }\n        public double Y { get { return _y;} }\n\n        public Point(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n        public static Point operator +(Point p1, Point p2)\n        {\n            return new Point(p1.X + p2.X, p1.Y + p2.Y);\n        }\n \n        public static Point operator -(Point p1, Point p2)\n        {\n            return new Point(p1.X - p2.X, p1.Y - p2.Y);\n        }\n \n        public static Point operator *(Point p, double k)\n        {\n            return new Point(p.X * k, p.Y * k);\n        }\n \n        public static explicit operator Vector(Point p)\n        {\n            return new Vector(p.X, p.Y);\n        }\n \n        public static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsOrthogonal((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n \n        public static bool IsParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsParallel((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n    }\n \n    public struct Segment\n    {\n        public Point P1 { get; set; }\n        public Point P2 { get; set; }\n \n        public Segment(Point p1, Point p2)\n        {\n            P1 = p1;\n            P2 = p2;\n        }\n \n        public Segment(double x1, double y1, double x2, double y2)\n        {\n            P1 = new Point(x1, y1);\n            P2 = new Point(x2, y2);\n        }\n        public static bool IsOrthogonal(Segment s1, Segment s2)\n        {\n            return Vector.IsOrthogonal((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n \n        public static bool IsParallel(Segment s1, Segment s2)\n        {\n            return Vector.IsParallel((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n    }\n \n    public struct Circle\n    {\n        public Point P { get; set; }\n        public double R { get; set; }\n \n        public Circle(Point p, double r)\n        {\n            P = p;\n            R = r;\n        }\n    }\n \n    public struct Vector\n    {\n        double X { get; set; }\n        double Y { get; set; }\n \n        public Vector(double x, double y)\n        {\n            X = x;\n            Y = y;\n        }\n \n        public double Norm()\n        {\n            return X * X + Y * Y;\n        }\n \n        public double Abs()\n        {\n            return Math.Sqrt(Norm());\n        }\n \n        public static Vector operator +(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X + v2.X, v1.Y + v2.Y);\n        }\n \n        public static Vector operator -(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X - v2.X, v1.Y - v2.Y);\n        }\n \n        public static Vector operator *(Vector v, double k)\n        {\n            return new Vector(v.X * k, v.Y * k);\n        }\n \n        public static double Dot(Vector v1, Vector v2)\n        {\n            return v1.X * v2.X + v1.Y * v2.Y;\n        }\n \n        public static double Cross(Vector v1, Vector v2)\n        {\n            return v1.X * v2.Y - v1.Y * v2.X;\n        }\n \n        public static bool IsOrthogonal(Vector v1, Vector v2)\n        {\n            return Dot(v1, v2) == 0.0;\n        }\n \n        public static bool IsParallel(Vector v1, Vector v2)\n        {\n            return Cross(v1, v2) == 0.0;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing Aoj.CGL.Lib;\n\nnamespace Aoj.CGL.Chapter2A\n{\n    class Program\n    {\n        public static void Solve()\n        {\n            int n = int.Parse(Console.ReadLine());\n \n            for (int i = 0; i < n; i++)\n            {\n                int[] input = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n\n                var seg1 = new Segment(input[0],input[1],input[2],input[3]);\n                var seg2 = new Segment(input[4],input[5],input[6],input[7]);\n\n                int answer = 0;\n                if (Segment.IsOrthogonal(seg1, seg2))\n                    answer = 1;\n                else if (Segment.IsParallel(seg1, seg2))\n                    answer = 2;\n\n                Console.WriteLine(answer);\n            }\n        }\n\n        public static void Main()\n        {\n            // Console.SetIn(new System.IO.StreamReader(\"ComputationalGeometry/Input/02_Segment_Line_A_01.txt\"));\n            // var sw = new Stopwatch();\n            // sw.Start();\n\n            Solve();\n\n            // Console.WriteLine(\"{0}ms\", sw.ElapsedMilliseconds);\n        }\n    }\n}\n\nnamespace Aoj.CGL.Lib\n{\n    using Line = Segment;\n\n    using Polygon = List<Point>;\n    //using Point = Vector;\n\n    public struct Point\n    {\n        public double X { get; set; }\n        public double Y { get; set; }\n\n        public Point(double x, double y)\n        {\n            X = x;\n            Y = y;\n        }\n\n        public static Point operator +(Point p1, Point p2)\n        {\n            return new Point(p1.X + p2.X, p1.Y + p2.Y);\n        }\n\n        public static Point operator -(Point p1, Point p2)\n        {\n            return new Point(p1.X - p2.X, p1.Y - p2.Y);\n        }\n\n        public static Point operator *(Point p, double k)\n        {\n            return new Point(p.X * k, p.Y * k);\n        }\n\n        public static explicit operator Vector(Point p)\n        {\n            return new Vector(p.X, p.Y);\n        }\n\n        public static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsOrthogonal((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n\n        public static bool IsParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsParallel((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n    }\n\n    public struct Segment\n    {\n        public Point P1 { get; set; }\n        public Point P2 { get; set; }\n\n        public Segment(Point p1, Point p2)\n        {\n            P1 = p1;\n            P2 = p2;\n        }\n\n        public Segment(double x1, double y1, double x2, double y2)\n        {\n            P1 = new Point(x1, y1);\n            P2 = new Point(x2, y2);\n        }\n        public static bool IsOrthogonal(Segment s1, Segment s2)\n        {\n            return Vector.IsOrthogonal((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n\n        public static bool IsParallel(Segment s1, Segment s2)\n        {\n            return Vector.IsParallel((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n    }\n\n    public struct Circle\n    {\n        public Point P { get; set; }\n        public double R { get; set; }\n\n        public Circle(Point p, double r)\n        {\n            P = p;\n            R = r;\n        }\n    }\n\n    public struct Vector\n    {\n        double X { get; set; }\n        double Y { get; set; }\n\n        public Vector(double x, double y)\n        {\n            X = x;\n            Y = y;\n        }\n\n        public double Norm()\n        {\n            return X * X + Y * Y;\n        }\n\n        public double Abs()\n        {\n            return Math.Sqrt(Norm());\n        }\n\n        public static Vector operator +(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X + v2.X, v1.Y + v2.Y);\n        }\n\n        public static Vector operator -(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X - v2.X, v1.Y - v2.Y);\n        }\n\n        public static Vector operator *(Vector v, double k)\n        {\n            return new Vector(v.X * k, v.Y * k);\n        }\n\n        public static double Dot(Vector v1, Vector v2)\n        {\n            return v1.X * v2.X + v1.Y * v2.Y;\n        }\n\n        public static double Cross(Vector v1, Vector v2)\n        {\n            return v1.X * v2.Y - v1.Y * v2.X;\n        }\n\n        public static bool IsOrthogonal(Vector v1, Vector v2)\n        {\n            return Dot(v1, v2) == 0.0;\n        }\n\n        public static bool IsParallel(Vector v1, Vector v2)\n        {\n            return Cross(v1, v2) == 0.0;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n\nclass Program\n{\n  struct Vector\n  {\n    public int x, y;\n  }\n\n  private static bool isOrthogonal(Vector v1, Vector v2)\n  {\n    return v1.x*v2.x + v1.y*v2.y == 0;\n  }\n\n  private static bool isParallel(Vector v1, Vector v2)\n  {\n    return v2.x*v1.y - v2.y*v1.x == 0;\n  }\n  public static void Main()\n  {\n    int n = int.Parse(Console.ReadLine());\n\n    for(int i=0; i<n; i++)\n    {\n      string[] s = Console.ReadLine().Split(' ');\n      Vector v1, v2;\n      v1.x = int.Parse(s[2]) - int.Parse(s[0]);\n      v1.y = int.Parse(s[3]) - int.Parse(s[1]);\n      v2.x = int.Parse(s[6]) - int.Parse(s[4]);\n      v2.y = int.Parse(s[7]) - int.Parse(s[5]);\n\n      if(isOrthogonal(v1, v2)) {\n        Console.WriteLine(\"1\");\n      } else if(isParallel(v1, v2)) {\n        Console.WriteLine(\"2\");\n      } else {\n        Console.WriteLine(\"0\");\n      }\n    }\n  }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n//using System.Collections.Generic;\n//using System.Linq;\n//using Vector = CGL.Point;\n//using Line = CGL.Segment;\n//using Polygon = System.Collections.Generic.List<CGL.Point>;\n\n\nnamespace CGL\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var q = scan[0];\n            for (int i = 0; i < q; i++)\n            {\n                var t = scan;\n                var p = new Point[4];\n                for (int j = 0; j < 4; j++)\n                {\n                    p[j] = new Point(t[j * 2], t[j * 2 + 1]);\n                }\n\n                if ((p[1] - p[0]).Cross(p[3] - p[2]) == 0) Console.WriteLine(2);\n                else if ((p[1] - p[0]).Dot(p[3] - p[2]) == 0) Console.WriteLine(1);\n                else Console.WriteLine(0);\n            }\n        }\n\n        static int[] scan { get { return Array.ConvertAll(Console.ReadLine().Split(), int.Parse); } }\n    }\n    \n    struct Point\n    {\n        static readonly double EPS = 1E-10;\n        double x, y;\n        public Point(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public static Point operator +(Point a, Point b) { return new Point(a.x + b.x, a.y + b.y); }\n        public static Point operator -(Point a, Point b) { return new Point(a.x - b.x, a.y - b.y); }\n        public static Point operator *(double k, Point a) { return new Point(k * a.x, k * a.y); }\n        public static Point operator /(double k, Point a) { return new Point(a.x / k, a.y / k); }\n        \n        public double Abs { get { return Math.Sqrt(Norm); } }  \n        public double Norm { get { return x * x + y * y; } }\n\n        public static bool operator <(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Point a, Point b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Point a, Point b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public override bool Equals(object p){  return Math.Abs(x - ((Point)p).x) < EPS && Math.Abs(y - ((Point)p).y) < EPS; }\n        public override int GetHashCode(){ return x.GetHashCode() ^ y.GetHashCode(); }\n\n        public double Dot(Point p) { return x * p.x + y * p.y; }\n        public double Cross(Point p) { return x * p.y - y * p.x; }\n\n    }\n    struct Segment\n    {\n        Point p1, p2;\n        public Segment(Point p1, Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n    }\n    struct Circle\n    {\n        Point c; double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing static System.Console;\nusing System.Text;\nusing System.IO;\n\n\nnamespace AOJ\n{\n    using Vector = Point;\n    using Line = Segment;\n    using Polygon = List<Point>;\n\n    class Consts\n    {\n        public static readonly double EPS = 1e-10;\n    }\n    class Point\n    {\n        double x, y;\n        public double X { get { return this.x; } set { this.x = value; } }\n        public double Y { get { return this.y; } set { this.y = value; } }\n        public Point(double x = 0, double y = 0)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        static public Point operator +(Point p1, Point p2) => new Point(p1.x + p2.x, p1.y + p2.y);\n        static public Point operator -(Point p1, Point p2) => new Point(p1.x - p2.x, p1.y - p2.y);\n        static public Point operator *(Point p, double a) => new Point(a * p.x, a * p.y);\n        static public Point operator /(Point p, double a) => new Point(p.x / a, p.y / a);\n        static public bool operator <(Point p1, Point p2) => p1.x != p2.x ? p1.x < p2.x : p1.y < p2.y;\n        static public bool operator >(Point p1, Point p2) => p2 < p1;\n\n        static public bool operator ==(Point p1, Point p2) => (p1.x - p2.x) < Consts.EPS && (p1.y - p2.y) < Consts.EPS;\n        static public bool operator !=(Point p1, Point p2) => !(p1 == p2);\n\n        public double abs() => Math.Sqrt(norm());\n        public double norm() => this.x * this.x + this.y * this.y;\n\n        public override bool Equals(object obj)\n        {\n            if((object)obj==null || this.GetType()!=obj.GetType())\n            {\n                return false;\n            }\n            var c = (Point)obj;\n            return this == c;\n        }\n        public override int GetHashCode()\n        {\n            return this.x.GetHashCode() ^ this.y.GetHashCode();\n        }\n    }\n    struct Segment\n    {\n        public Point p1, p2;\n    }\n    class Circle\n    {\n        public Point c;\n        public double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n    }\n\n    class VecCalc\n    {\n        static bool equals(double a, double b) => Math.Abs(a - b) < Consts.EPS;\n        //内積\n        static public double dot(Vector a, Vector b)\n        {\n            return a.X * b.X + a.Y * b.Y;\n        }\n        //外積\n        static public double cross(Vector a, Vector b)\n        {\n            return a.X * b.Y - a.Y * b.X;\n        }\n        //直行判定\n        static public bool isOrthogonal(Vector a,Vector b)\n        {\n            return equals(dot(a, b), 0.0);\n        }\n        static public bool isOrthogonal(Point a1, Point a2, Point b1,Point b2)\n        {\n            return isOrthogonal(a1 - a2, b1 - b2);\n        }\n        static public bool isOrthogonal(Segment s1, Segment s2)\n        {\n            return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n        }\n        //平行判定\n        static public bool isParallel(Vector a, Vector b)\n        {\n            return equals(cross(a, b), 0.0);\n        }\n        static public bool isParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return isParallel(a1 - a2, b1 - b2);\n        }\n        static public bool isParallel(Segment s1, Segment s2)\n        {\n            return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n        }\n    }\n    class Program\n    {\n        static public long[] Sarray() { return ReadLine().Trim().Split().Select(long.Parse).ToArray(); }\n        static public List<long> Slist() { return ReadLine().Split().Select(long.Parse).ToList(); }\n\n\n        static void Main(string[] args)\n        {\n            var Q = Sarray()[0];\n            for (var i = 0; i < Q; ++i)\n            {\n                var ps = Sarray();\n                var s1 = new Point(ps[2] - ps[0], ps[3] - ps[1]);\n                var s2 = new Point(ps[6] - ps[4], ps[7] - ps[5]);\n                if (VecCalc.isOrthogonal(s1, s2))\n                    WriteLine(1);\n                else if (VecCalc.isParallel(s1, s2)) \n                    WriteLine(2);\n                else\n                    WriteLine(0);\n            }\n        }\n    }\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Text;\n\nnamespace CGL_2_A_ParallelOrthogonal\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tint inputCount = int.Parse (Console.ReadLine ());\n\n\t\t\tStringBuilder output = new StringBuilder (inputCount * 2);\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tint[] inputNum = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\n\t\t\t\tVector2 segment1 = new Vector2 (inputNum[0], inputNum[1]) - new Vector2 (inputNum[2], inputNum[3]);\n\t\t\t\tVector2 segment2 = new Vector2 (inputNum[4], inputNum[5]) - new Vector2 (inputNum[6], inputNum[7]);\n\n\t\t\t\tif (Vector2.IsParallel (segment1, segment2))\n\t\t\t\t{\n\t\t\t\t\toutput.Append (2);\n\t\t\t\t}\n\t\t\t\telse if (Vector2.IsOrthogonal (segment1, segment2))\n\t\t\t\t{\n\t\t\t\t\toutput.Append (1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\toutput.Append (0);\n\t\t\t\t}\n\n\t\t\t\toutput.AppendLine ();\n\t\t\t}\n\n\t\t\tConsole.Write (output);\n\t\t}\n\t}\n\n\tclass Vector2\n\t{\n\t\tpublic Vector2 ( decimal x, decimal y )\n\t\t{\n\t\t\tthis.X = x;\n\t\t\tthis.Y = y;\n\t\t}\n\n\t\tpublic decimal X { private set; get; }\n\t\tpublic decimal Y { private set; get; }\n\n\t\tpublic static Vector2 operator - ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X - ob2.X, ob1.Y - ob2.Y);\n\t\t}\n\n\t\tpublic decimal Length ()\n\t\t{\n\t\t\treturn X * X + Y * Y;\n\t\t}\n\t\tpublic Vector2 Normalize ()\n\t\t{\n\t\t\tdecimal length = this.Length ();\n\t\t\treturn new Vector2 (X / length, Y / length);\n\t\t}\n\t\tpublic static decimal DotProduct ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn ob1.X * ob2.X + ob1.Y * ob2.Y;\n\t\t}\n\t\tpublic static decimal CrossProduct ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn ob1.X * ob2.Y - ob1.Y * ob2.X;\n\t\t}\n\n\t\tpublic static bool IsOrthogonal ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn DotProduct (ob1, ob2) == 0;\n\t\t}\n\t\tpublic static bool IsParallel ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn CrossProduct (ob1, ob2) == 0;\n\t\t}\n\t}\n}\n "
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing static System.Console;\nusing static System.Math;\nusing static MyIO;\nusing static MyUtil;\n\nusing static Geometory;\nusing Vector = Geometory.Point;\nusing Line = Geometory.Segment;\n\npublic class A\n{\n\tpublic static void Main() => (new Solver()).Solve();\n}\n\npublic class Solver\n{\n\tpublic void Solve()\n\t{\n\t\tint Q = GetInt();\n\t\tvar ans = new int[Q];\n\t\tfor(int i = 0; i < Q; i++)\n\t\t\tans[i] = solve();\n\n\t\tWriteLine(string.Join(\"\\n\", ans));\n\t}\n\n\tprivate int solve()\n\t{\n\t\tvar p = Enumerable.Range(0, 4).Select(_ => new Point(GetDouble(), GetDouble())).ToArray();\n\t\tvar s1 = new Line(p[0], p[1]);\n\t\tvar s2 = new Line(p[2], p[3]);\n\t\treturn IsParallel(s1, s2) ? 2 : IsOrthogonal(s1, s2) ? 1 : 0;\n\t}\n}\n\npublic static class Geometory\n{\n\tprivate const double EPS = 1e-10;\n\tpublic static bool Equals(double a, double b) => Abs(a - b) < EPS;\n\n\tpublic class Point\n\t{\n\t\tpublic double X;\n\t\tpublic double Y;\t\t\n\t\tpublic Point(double x, double y)\n\t\t{\n\t\t\tX = x;\n\t\t\tY = y;\n\t\t}\n\t\n\t\tpublic double Abs() => Math.Sqrt(Norm());\n\t\tpublic double Norm() => X * X + Y * Y;\n\t\tpublic static Point operator+(Point p, Point q) => new Point(p.X + q.X, p.Y + q.Y);\n\t\tpublic static Point operator-(Point p, Point q) => new Point(p.X - q.X, p.Y - q.Y);\n\t\tpublic static Point operator*(Point p, double a) => new Point(a * p.X, a * p.Y);\n\t\tpublic static Point operator*(double a, Point p) => new Point(a * p.X, a * p.Y);\n\t\tpublic static Point operator/(Point p, double a) => new Point(p.X / a, p.Y / a);\n\t}\n\n\tpublic class Segment\n\t{\n\t\tpublic Point P1;\n\t\tpublic Point P2;\n\t\tpublic Segment(Point p1, Point p2)\n\t\t{\n\t\t\tP1 = p1;\n\t\t\tP2 = p2;\n\t\t}\n\t}\n\n\tpublic static double Dot(Vector a, Vector b) => a.X * b.X + a.Y * b.Y;\n\tpublic static double Cross(Vector a, Vector b) => a.X * b.Y - a.Y * b.X;\n\n\tpublic static bool IsOrthogonal(Vector a, Vector b) => Equals(Dot(a, b), 0.0);\n\tpublic static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2) => IsOrthogonal(a1 - a2, b1 - b2);\n\tpublic static bool IsOrthogonal(Segment s1, Segment s2) => Equals(Dot(s1.P2 - s1.P1, s2.P2 - s2.P1), 0.0);\n\tpublic static bool IsParallel(Vector a, Vector b) => Equals(Cross(a, b), 0.0);\n\tpublic static bool IsParallel(Point a1, Point a2, Point b1, Point b2) => IsParallel(a1 - a2, b1 - b2);\n\tpublic static bool IsParallel(Segment s1, Segment s2) => Equals(Cross(s1.P2 - s1.P1, s2.P2 - s2.P1), 0.0);\n}\n\npublic static class MyIO\n{\n\tprivate static string[] args = null;\n\tprivate static int num = -1;\n\tprivate static int used = -1;\n\n\tprivate static string getArg()\n\t{\n\t\tif(used == num)\n\t\t{\n\t\t\targs = Console.ReadLine().Split(' ');\n\t\t\tnum = args.Length;\n\t\t\tused = 0;\n\t\t}\n\t\treturn args[used++];\n\t}\n\n\tpublic static int GetInt() => int.Parse(getArg());\n\tpublic static long GetLong() => long.Parse(getArg());\n\tpublic static double GetDouble() => double.Parse(getArg());\n\tpublic static decimal GetDecimal() => decimal.Parse(getArg());\n\tpublic static string GetString() => getArg();\n\tpublic static char GetChar() => getArg()[0];\n\tpublic static int[] GetInts(long N) => Enumerable.Range(0, (int)N).Select(_ => GetInt()).ToArray();\n\tpublic static long[] GetLongs(long N) => Enumerable.Range(0, (int)N).Select(_ => GetLong()).ToArray();\n\tpublic static double[] GetDoubles(long N) => Enumerable.Range(0, (int)N).Select(_ => GetDouble()).ToArray();\n\tpublic static decimal[] GetDecimals(long N) => Enumerable.Range(0, (int)N).Select(_ => GetDecimal()).ToArray();\n\tpublic static string[] GetStrings(long N) => Enumerable.Range(0, (int)N).Select(_ => GetString()).ToArray();\n}\n\npublic static class MyUtil\n{\n\tpublic static void chmax<T>(ref T x, T y) where T : IComparable<T>\n\t{\n\t\tif(x.CompareTo(y) < 0)\n\t\t\tx = y;\n\t}\n\n\tpublic static void chmin<T>(ref T x, T y) where T : IComparable<T>\n\t{\n\t\tif(x.CompareTo(y) > 0)\n\t\t\tx = y;\n\t}\n\n\tpublic static void swap<T>(ref T x, ref T y)\n\t{\n\t\tT tmp = x;\n\t\tx = y;\n\t\ty = tmp;\n\t}\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int q = int.Parse(Console.ReadLine());\n\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < q; i++)\n            {\n                double[] input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n\n                MyPoint a = new MyPoint(input[0] - input[2], input[1] - input[3]);\n                MyPoint b = new MyPoint(input[4] - input[6], input[5] - input[7]);\n\n                if (dot(a, b) == 0.0) sb.AppendLine(\"1\");\n                else if (cross(a, b) == 0.0) sb.AppendLine(\"2\");\n                else sb.AppendLine(\"0\");\n            }\n            Console.Write(sb);\n        }\n\n        static double dot(MyPoint a, MyPoint b)\n        {\n            return a.x * b.x + a.y * b.y;\n        }\n\n        static double cross(MyPoint a, MyPoint b)\n        {\n            return a.x * b.y - a.y * b.x;\n        }\n    }\n\n    class MyPoint : IComparable<MyPoint>\n    {\n        static readonly double EPS = 1E-10;\n\n        internal double x, y;\n\n        public MyPoint(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public double Abs() { return Math.Sqrt(Norm()); }\n        public double Norm() { return x * x + y * y; }\n\n        public static MyPoint operator +(MyPoint a, MyPoint b) { return new MyPoint(a.x + b.x, a.y + b.y); }\n        public static MyPoint operator -(MyPoint a, MyPoint b) { return new MyPoint(a.x - b.x, a.y - b.y); }\n        public static MyPoint operator *(MyPoint p, double d) { return new MyPoint(p.x * d, p.y * d); }\n        public static MyPoint operator /(MyPoint p, double d) { return new MyPoint(p.x / d, p.y / d); }\n        public static bool operator <(MyPoint a, MyPoint b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(MyPoint a, MyPoint b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(MyPoint a, MyPoint b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(MyPoint a, MyPoint b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public int CompareTo(MyPoint other)\n        {\n            return x != other.x ? (int)(x - other.x) : (int)(y - other.y);\n        }\n\n        public override bool Equals(object obj)\n        {\n            MyPoint other = obj as MyPoint;\n            return Math.Abs(x - other.x) < EPS && Math.Abs(y - other.y) < EPS;\n        }\n\n        public override int GetHashCode()\n        {\n            return x.GetHashCode() ^ y.GetHashCode();\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"{0:f10} {1:f10}\", x, y);\n        }\n    }\n\n    class MyVector : MyPoint\n    {\n        public MyVector(double x, double y) : base(x, y) { }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Text;\n\nnamespace CGL_1_A_Projection\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tint inputCount = int.Parse (Console.ReadLine ());\n\n\t\t\tStringBuilder output = new StringBuilder (inputCount * 2);\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tint[] inputNum = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\n\t\t\t\tVector2 segment1 = new Vector2 (inputNum[0], inputNum[1]) - new Vector2 (inputNum[2], inputNum[3]);\n\t\t\t\tVector2 segment2 = new Vector2 (inputNum[4], inputNum[5]) - new Vector2 (inputNum[6], inputNum[7]);\n\n\t\t\t\tif (Vector2.IsParallel (segment1, segment2))\n\t\t\t\t{\n\t\t\t\t\toutput.Append (2);\n\t\t\t\t}\n\t\t\t\telse if (Vector2.IsOrthogonal (segment1, segment2))\n\t\t\t\t{\n\t\t\t\t\toutput.Append (1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\toutput.Append (0);\n\t\t\t\t}\n\n\t\t\t\toutput.AppendLine ();\n\t\t\t}\n\n\t\t\tConsole.Write (output);\n\t\t}\n\t}\n\n\tclass Vector2\n\t{\n\t\tpublic Vector2 ( double x, double y )\n\t\t{\n\t\t\tthis.X = x;\n\t\t\tthis.Y = y;\n\t\t}\n\n\t\tpublic double X { private set; get; }\n\t\tpublic double Y { private set; get; }\n\n\t\tpublic static Vector2 operator - ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X - ob2.X, ob1.Y - ob2.Y);\n\t\t}\n\n\t\tpublic double Length ()\n\t\t{\n\t\t\treturn X * X + Y * Y;\n\t\t}\n\t\tpublic Vector2 Normalize ()\n\t\t{\n\t\t\tdouble length = this.Length ();\n\t\t\treturn new Vector2 (X / length, Y / length);\n\t\t}\n\t\tpublic static double DotProduct ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\tVector2 normalize1 = ob1.Normalize ();\n\t\t\tVector2 normalize2 = ob2.Normalize ();\n\n\t\t\treturn normalize1.X * normalize2.X +\n\t\t\t\tnormalize1.Y * normalize2.Y;\n\t\t}\n\t\tpublic static double CrossProduct ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn ob1.X * ob2.Y - ob1.Y * ob2.X;\n\t\t}\n\n\t\tpublic static bool IsOrthogonal ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn DotProduct (ob1, ob2) == 0;\n\t\t}\n\t\tpublic static bool IsParallel ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn CrossProduct (ob1, ob2) == 0;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n//using System.Collections.Generic;\n//using System.Linq;\n//using Vector = CGL.Point;\n//using Line = CGL.Segment;\n//using Polygon = System.Collections.Generic.List<CGL.Point>;\n\n\nnamespace CGL\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var q = scan[0];\n            for (int i = 0; i < q; i++)\n            {\n                var t = scan;\n                var p = new Point[4];\n                for (int j = 0; j < 4; j++)\n                {\n                    p[j] = new Point(t[j * 2], t[j * 2 + 1]);\n                }\n\n                if ((p[1] - p[0]).Cross(p[3] - p[2]) == 0) Console.WriteLine(2);\n                else if ((p[1] - p[0]).Dot(p[3] - p[2]) == 0) Console.WriteLine(1);\n                else Console.WriteLine(0);\n            }\n        }\n\n        static int[] scan { get { return Array.ConvertAll(Console.ReadLine().Split(), int.Parse); } }\n    }\n    \n    struct Point\n    {\n        static readonly double EPS = 1E-10;\n        double x, y;\n        public Point(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public static Point operator +(Point a, Point b) { return new Point(a.x + b.x, a.y + b.y); }\n        public static Point operator -(Point a, Point b) { return new Point(a.x - b.x, a.y - b.y); }\n        public static Point operator *(double k, Point a) { return new Point(k * a.x, k * a.y); }\n        public static Point operator /(double k, Point a) { return new Point(a.x / k, a.y / k); }\n        \n        public double Abs { get { return Math.Sqrt(Norm); } }  \n        public double Norm { get { return x * x + y * y; } }\n\n        public static bool operator <(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Point a, Point b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Point a, Point b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public override bool Equals(object p){  return Math.Abs(x - ((Point)p).x) < EPS && Math.Abs(y - ((Point)p).y) < EPS; }\n        public override int GetHashCode(){ return x.GetHashCode() ^ y.GetHashCode(); }\n\n        public double Dot(Point p) { return x * p.x + y * p.y; }\n        public double Cross(Point p) { return x * p.y - y * p.x; }\n\n    }\n    /*struct Segment\n    {\n        Point p1, p2;\n        public Segment(Point p1, Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n    }\n    struct Circle\n    {\n        Point c; double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n\n    }*/\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing Aoj.CGL.Lib;\n  \nnamespace Aoj.CGL.Chapter2A\n{\n    class Program\n    {\n        public static void Solve()\n        {\n            int n = int.Parse(Console.ReadLine());\n   \n            for (int i = 0; i < n; i++)\n            {\n                int[] input = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n  \n                var seg1 = new Segment(input[0],input[1],input[2],input[3]);\n                var seg2 = new Segment(input[4],input[5],input[6],input[7]);\n  \n                int answer = 0;\n                if (Segment.IsOrthogonal(seg1, seg2))\n                    answer = 1;\n                else if (Segment.IsParallel(seg1, seg2))\n                    answer = 2;\n  \n                Console.WriteLine(answer);\n            }\n        }\n  \n        public static void Main()\n        {\n            // Console.SetIn(new System.IO.StreamReader(\"ComputationalGeometry/Input/02_Segment_Line_A_01.txt\"));\n            // var sw = new Stopwatch();\n            // sw.Start();\n  \n            Solve();\n  \n            // Console.WriteLine(\"{0}ms\", sw.ElapsedMilliseconds);\n        }\n    }\n}\n  \nnamespace Aoj.CGL.Lib\n{\n    using Line = Segment;\n\n    using Polygon = List<Point>;\n\n    public struct Point\n    {\n        private double _x;\n        private double _y;\n\n        public double X { get { return _x;} }\n        public double Y { get { return _y;} }\n\n        public Point(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n\n        public static Point operator +(Point p1, Point p2)\n        {\n            return new Point(p1.X + p2.X, p1.Y + p2.Y);\n        }\n\n        public static Point operator -(Point p1, Point p2)\n        {\n            return new Point(p1.X - p2.X, p1.Y - p2.Y);\n        }\n\n        public static Point operator *(Point p, double k)\n        {\n            return new Point(p.X * k, p.Y * k);\n        }\n\n        public static explicit operator Vector(Point p)\n        {\n            return new Vector(p.X, p.Y);\n        }\n\n        public static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsOrthogonal((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n\n        public static bool IsParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsParallel((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n    }\n\n    public struct Segment\n    {\n        private Point _p1;\n        private Point _p2;\n\n        public Point P1 { get{ return _p1; } }\n        public Point P2 { get{ return _p2; } }\n\n        public Segment(Point p1, Point p2)\n        {\n            _p1 = p1;\n            _p2 = p2;\n        }\n\n        public Segment(double x1, double y1, double x2, double y2)\n        {\n            _p1 = new Point(x1, y1);\n            _p2 = new Point(x2, y2);\n        }\n        public static bool IsOrthogonal(Segment s1, Segment s2)\n        {\n            return Vector.IsOrthogonal((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n\n        public static bool IsParallel(Segment s1, Segment s2)\n        {\n            return Vector.IsParallel((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n    }\n\n    public struct Circle\n    {\n        private Point _p;\n        private double _r;\n\n        public Point P { get { return _p; } }\n        public double R { get { return _r; } }\n\n        public Circle(Point p, double r)\n        {\n            _p = p;\n            _r = r;\n        }\n    }\n\n    public struct Vector\n    {\n        private double _x;\n        private double _y;\n\n        public double X { get { return _x;} }\n        public double Y { get { return _y;} }\n\n        public Vector(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n\n        public double Norm()\n        {\n            return X * X + Y * Y;\n        }\n\n        public double Abs()\n        {\n            return Math.Sqrt(Norm());\n        }\n\n        public static Vector operator +(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X + v2.X, v1.Y + v2.Y);\n        }\n\n        public static Vector operator -(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X - v2.X, v1.Y - v2.Y);\n        }\n\n        public static Vector operator *(Vector v, double k)\n        {\n            return new Vector(v.X * k, v.Y * k);\n        }\n\n        public static double Dot(Vector v1, Vector v2)\n        {\n            return v1.X * v2.X + v1.Y * v2.Y;\n        }\n\n        public static double Cross(Vector v1, Vector v2)\n        {\n            return v1.X * v2.Y - v1.Y * v2.X;\n        }\n\n        public static bool IsOrthogonal(Vector v1, Vector v2)\n        {\n            return Dot(v1, v2) == 0.0;\n        }\n\n        public static bool IsParallel(Vector v1, Vector v2)\n        {\n            return Cross(v1, v2) == 0.0;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Text;\n\nnamespace CGL_1_A_Projection\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tint inputCount = int.Parse (Console.ReadLine ());\n\n\t\t\tStringBuilder output = new StringBuilder (inputCount * 2);\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tint[] inputNum = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\n\t\t\t\tVector2 segment1 = new Vector2 (inputNum[0], inputNum[1]) - new Vector2 (inputNum[2], inputNum[3]);\n\t\t\t\tVector2 segment2 = new Vector2 (inputNum[4], inputNum[5]) - new Vector2 (inputNum[6], inputNum[7]);\n\n\t\t\t\tif (Vector2.IsParallel (segment1, segment2))\n\t\t\t\t{\n\t\t\t\t\toutput.Append (2);\n\t\t\t\t}\n\t\t\t\telse if (Vector2.IsOrthogonal (segment1, segment2))\n\t\t\t\t{\n\t\t\t\t\toutput.Append (1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\toutput.Append (0);\n\t\t\t\t}\n\n\t\t\t\toutput.AppendLine ();\n\t\t\t}\n\n\t\t\tConsole.Write (output);\n\t\t}\n\t}\n\n\tclass Vector2\n\t{\n\t\tpublic Vector2 ( decimal x, decimal y )\n\t\t{\n\t\t\tthis.X = x;\n\t\t\tthis.Y = y;\n\t\t}\n\n\t\tpublic decimal X { private set; get; }\n\t\tpublic decimal Y { private set; get; }\n\n\t\tpublic static Vector2 operator - ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X - ob2.X, ob1.Y - ob2.Y);\n\t\t}\n\n\t\tpublic decimal Length ()\n\t\t{\n\t\t\treturn X * X + Y * Y;\n\t\t}\n\t\tpublic Vector2 Normalize ()\n\t\t{\n\t\t\tdecimal length = this.Length ();\n\t\t\treturn new Vector2 (X / length, Y / length);\n\t\t}\n\t\tpublic static decimal DotProduct ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\tVector2 normalize1 = ob1.Normalize ();\n\t\t\tVector2 normalize2 = ob2.Normalize ();\n\n\t\t\treturn normalize1.X * normalize2.X +\n\t\t\t\tnormalize1.Y * normalize2.Y;\n\t\t}\n\t\tpublic static decimal CrossProduct ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn ob1.X * ob2.Y - ob1.Y * ob2.X;\n\t\t}\n\n\t\tpublic static bool IsOrthogonal ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn DotProduct (ob1, ob2) == 0;\n\t\t}\n\t\tpublic static bool IsParallel ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn CrossProduct (ob1, ob2) == 0;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nnamespace geometry\n{\n\tpublic class Point{\n\t\tpublic double x, y;\n\t\tpublic Point(){\n\t\t\tthis.x = this.y = 0;\n\t\t}\n\n\t\tpublic Point(double x, double y){\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tpublic static Point operator+(Point p1, Point p2){\n\t\t\treturn new Point (p1.x + p2.x, p1.y + p2.y);\n\t\t}\n\n\t\tpublic static Point operator-(Point p1, Point p2){\n\t\t\treturn new Point (p1.x - p2.x, p1.y - p2.y);\n\t\t}\n\n\t\tpublic static Point operator*(Point p1, double a){\n\t\t\treturn new Point (p1.x * a, p1.y * a);\n\t\t}\n\n\t\tpublic static Point operator/(Point p1, double a){\n\t\t\treturn new Point (p1.x / a, p1.y / a);\n\t\t}\n\n\t\tpublic double norm(){\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t}\n\n\t\tpublic double abs(){\n\t\t\treturn Math.Sqrt(norm()); \n\t\t}\n\n\t\tpublic Point Clone(){\n\t\t\tPoint clone = new Point (this.x, this.y);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tpublic class Line{\n\t\tpublic Point p1, p2;\n\t\tpublic Line(){\n\t\t\tthis.p1 = new Point ();\n\t\t\tthis.p2 = new Point ();\n\t\t}\n\n\t\tpublic Line(double p1x, double p1y, double p2x, double p2y){\n\t\t\tthis.p1 = new Point(p1x, p1y);\n\t\t\tthis.p2 = new Point(p2x, p2y);\n\t\t}\n\n\t\tpublic Line(Point p1, Point p2){\n\t\t\tthis.p1 = p1.Clone();\n\t\t\tthis.p2 = p2.Clone();\n\t\t}\n\n\t\tpublic Line Clone(){\n\t\t\tLine clone = new Line (this.p1, this.p2);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tpublic class Circle{\n\t\tpublic Point c;\n\t\tpublic double r;\n\t\tpublic Circle(){\n\t\t\tthis.c = new Point ();\n\t\t\tthis.r = 0.0;\n\t\t}\n\n\t\tpublic Circle(double cx, double cy, double r){\n\t\t\tthis.c.x = cx;\n\t\t\tthis.c.y = cy;\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic Circle(Point c, double r){\n\t\t\tthis.c = c.Clone();\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic Circle Clone(){\n\t\t\tCircle clone = new Circle (this.c, this.r);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tclass MainClass{\n\t\tstatic bool is_equal(double a, double b){\n\t\t\tif (Math.Abs (a - b) < 0.000001) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tstatic double dot(Point v1, Point v2){\n\t\t\treturn v1.x * v2.x + v1.y * v2.y;\n\t\t}\n\n\t\tstatic double cross(Point v1, Point v2){\n\t\t\treturn v1.x * v2.y - v1.y * v2.x;\n\t\t}\n\n\t\t// ??´?????????\n\t\tstatic bool is_orthogonal(Line s1, Line s2){\n\t\t\treturn is_equal(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n\t\t}\n\n\t\t// ????????????\n\t\tstatic bool is_parallel(Line s1, Line s2){\n\t\t\treturn is_equal(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n\t\t}\n\n\t\t/*\n\t\tstatic bool is_intersect_sl(Line s, Line sl){\n\t\t\treturn true;\n\t\t}\n\t\t*/\n\n\t\t// ?°???±??¢??°\n\t\tstatic Point project(Line s, Point p){\n\t\t\tPoint base_v = s.p2 - s.p1;\n\t\t\tdouble r = dot (p - s.p1, base_v) / base_v.norm ();\n\t\t\treturn s.p1 + base_v * r;\n\t\t}\n\n\t\t// ????°???¢??°\n\t\tstatic Point reflect(Line s, Point p){\n\t\t\treturn p + (project(s, p) - p) * 2;\n\t\t}\n\n\t\tstatic double get_distance_p2p(Point p1, Point p2){\n\t\t\treturn (p2 - p1).abs();\n\t\t}\n\n\t\tstatic double get_distance_l2p(Line l, Point p){\n\t\t\treturn Math.Abs (cross (l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs ();\n\t\t}\n\n\t\tstatic double get_distance_s2p(Line s, Point p){\n\t\t\tif (dot (s.p2 - s.p1, p - s.p1) < 0.0) {\n\t\t\t\treturn (p - s.p1).abs ();\n\t\t\t} else if (dot (s.p1 - s.p2, p - s.p2) < 0.0) {\n\t\t\t\treturn (p - s.p2).abs ();\n\t\t\t}\n\t\t\treturn get_distance_l2p (s, p);\n\t\t}\n\n\t\t/*\n\t\tstatic double get_distance_s2s(Line s, Line s){\n\t\t\tif (\n\t\t}\n\t\t*/\n\n\t\tstatic double[] input_line(){\n\t\t\tstring[] s = Console.ReadLine().Split(' ');\n\t\t\tdouble[] d = s.Select(i => double.Parse(i)).ToArray();\n\t\t\treturn d;\n\t\t}\n\n\t\t// ?°???±\n\t\tstatic void CGL_1_A(){\n\t\t\tdouble[] d = input_line ();\n\t\t\tLine l = new Line(d[0], d[1], d[2], d[3]);\n\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] p_pos = input_line ();\n\t\t\t\tPoint p1 = new Point (p_pos[0], p_pos[1]);\n\t\t\t\tPoint p2 = project (l, p1);\n\t\t\t\tConsole.WriteLine (\"{0} {1}\", p2.x, p2.y);\n\t\t\t}\n\t\t}\n\n\t\t// ????°?\n\t\tstatic void CGL_1_B(){\n\t\t\tdouble[] d = input_line ();\n\t\t\tLine l = new Line(d[0], d[1], d[2], d[3]);\n\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] p_pos = input_line ();\n\t\t\t\tPoint p1 = new Point (p_pos [0], p_pos [1]);\n\t\t\t\tPoint p2 = reflect (l, p1);\n\t\t\t\tConsole.WriteLine (\"{0} {1}\", p2.x, p2.y);\n\t\t\t}\n\t\t}\n\n\t\t// ??´????????´???/????????????\n\t\tstatic void CGL_2_A(){\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] s_pos = input_line ();\n\t\t\t\tLine s1 = new Line(s_pos[0], s_pos[1], s_pos[2], s_pos[3]);\n\t\t\t\tLine s2 = new Line(s_pos[4], s_pos[5], s_pos[6], s_pos[7]);\n\t\t\t\tif (is_parallel (s1, s2)) {\n\t\t\t\t\tConsole.Write (\"2\\n\");\n\t\t\t\t} else if (is_orthogonal (s1, s2)) {\n\t\t\t\t\tConsole.Write (\"1\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tConsole.Write (\"0\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\tstatic void CGL_2_D(){\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] s_pos = input_line ();\n\t\t\t\tLine s1 = new Line(s_pos[0], s_pos[1], s_pos[2], s_pos[3]);\n\t\t\t\tLine s2 = new Line(s_pos[4], s_pos[5], s_pos[6], s_pos[7]);\n\t\t\t}\n\t\t}\n\t\t*/\n\n\t\tpublic static void Main (string[] args){\n\t\t\t// ?°???±\n\t\t\t//CGL_1_A ();\n\t\t\t// ????°?\n\t\t\t//CGL_1_B ();\n\t\t\t// ??´????????´???/????????????\n\t\t\tCGL_2_A ();\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing static System.Math;\n\nnamespace CSharpSpiral {\n\tclass Program {\n\t\tstatic void Main(string[] args) {\n\t\t\tvar sw = new StreamWriter(Console.OpenStandardOutput()) {\n\t\t\t\tAutoFlush=\n#if DEBUG\n\t\t\ttrue\n#else\n\t\t\tfalse\n#endif\n\t\t\t};\n\t\t\tConsole.SetOut(sw);\n\t\t\tnew Program().Solve(new ConsoleInput(\n#if DEBUG\n\t\t\tnew StreamReader(\"../../../inputData.txt\")\n#else\n\t\t\tConsole.In\n#endif\n\t\t\t, ' '));\n\t\t\tConsole.Out.Flush();\n\t\t}\n\t\tpublic void Solve(ConsoleInput cin) {\n\t\t\tvar Q = cin.ReadInt;\n\t\t\tfor(int j = 0; j<Q; j++) {\n\t\t\t\tvar d = cin.ReadIntArray(8);\n\t\t\t\tvar s1 = new Vector2D(d[0], d[1])-new Vector2D(d[2], d[3]);\n\t\t\t\tvar s2 = new Vector2D(d[4], d[5])-new Vector2D(d[6], d[7]);\n\t\t\t\tif(Vector2D.outer(s1, s2)==0) Console.WriteLine(2);\n\t\t\t\telse if(Vector2D.inner(s1, s2)==0) Console.WriteLine(1);\n\t\t\t\telse Console.WriteLine(0);\n\t\t\t}\n\t\t}\n\t\tpublic struct Vector2D {\n\t\t\tpublic decimal x { get; set; }\n\t\t\tpublic decimal y { get; set; }\n\t\t\tpublic Vector2D(decimal xx, decimal yy) { x=xx; y=yy; }\n\t\t\tpublic static Vector2D operator -(Vector2D a, Vector2D b) => new Vector2D(a.x-b.x, a.y-b.y);\n\t\t\tpublic static Vector2D operator +(Vector2D a, Vector2D b) => new Vector2D(a.x+b.x, a.y+b.y);\n\t\t\tpublic static Vector2D operator *(Vector2D a, decimal k) => new Vector2D(a.x*k, a.y*k);\n\t\t\tpublic static decimal outer(Vector2D a, Vector2D b) => a.x*b.y-b.x*a.y;\n\t\t\tpublic static decimal inner(Vector2D a, Vector2D b) => a.x*b.x+a.y*b.y;\n\t\t\tpublic decimal Abs2() => x*x+y*y;\n\t\t\tpublic override string ToString() => $\"({x}, {y})\";\n\t\t}\n\t}\n\tstatic class ExtendClass {\n\t\tpublic static void Swap<T>(this T[] A, int x, int y) {\n\t\t\tvar tmp = A[x];\n\t\t\tA[x]=A[y];\n\t\t\tA[y]=tmp;\n\t\t}\n\t\tpublic static string Join<T>(this IEnumerable<T> X, string separator = \" \") => string.Join(separator, X);\n\t\tpublic static IEnumerable<int> Indices<T>(this T[] X) => Enumerable.Range(0, X.Length);\n\t\tpublic static IEnumerable<int> Indices<T>(this T[,] X, int dim)\n\t\t\t=> Enumerable.Range(0, X.GetLength(dim));\n\t\tpublic static string Join<T>(this T[,] X, string separatorD2 = \",\", string separatorD1 = \"\\n\")\n\t\t\t=> X.Indices(0).Select(\n\t\t\t\ti => X.Indices(1).Select(j => X[i, j]).Join(separatorD2)\n\t\t\t).Join(separatorD1);\n\t}\n\tclass ConsoleInput {\n\t\tprivate readonly TextReader _stream;\n\t\tprivate readonly char _separator = ' ';\n\t\tprivate readonly Queue<string> inputStream;\n\t\tpublic ConsoleInput(TextReader stream, char separator = ' ') {\n\t\t\tthis._separator=separator;\n\t\t\tthis._stream=stream;\n\t\t\tinputStream=new Queue<string>();\n\t\t}\n\t\tpublic string Read {\n\t\t\tget {\n\t\t\t\tif(inputStream.Count!=0) return inputStream.Dequeue();\n\t\t\t\tstring[] tmp = _stream.ReadLine().Split(_separator);\n\t\t\t\tfor(int i = 0; i<tmp.Length; ++i)\n\t\t\t\t\tinputStream.Enqueue(tmp[i]);\n\t\t\t\treturn inputStream.Dequeue();\n\t\t\t}\n\t\t}\n\t\tpublic string ReadLine { get { return _stream.ReadLine(); } }\n\t\tpublic int ReadInt { get { return int.Parse(Read); } }\n\t\tpublic long ReadLong { get { return long.Parse(Read); } }\n\t\tpublic double ReadDouble { get { return double.Parse(Read); } }\n\t\tpublic string[] ReadStrArray(long N) {\n\t\t\tvar ret = new string[N];\n\t\t\tfor(long i = 0; i<N; ++i)\n\t\t\t\tret[i]=Read;\n\t\t\treturn ret;\n\t\t}\n\t\tpublic int[] ReadIntArray(long N) { var ret = new int[N]; for(long i = 0; i<N; ++i) ret[i]=ReadInt; return ret; }\n\t\tpublic long[] ReadLongArray(long N) { var ret = new long[N]; for(long i = 0; i<N; ++i) ret[i]=ReadLong; return ret; }\n\t\tpublic double[] ReadDoubleArray(long N) { var ret = new double[N]; for(long i = 0; i<N; ++i) ret[i]=ReadDouble; return ret; }\n\t\tpublic bool isEOF {\n\t\t\tget { return _stream.Peek()==-1; }\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Text;\n\nnamespace CGL_1_A_Projection\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tint inputCount = int.Parse (Console.ReadLine ());\n\n\t\t\tStringBuilder output = new StringBuilder (inputCount * 2);\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tint[] inputNum = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\n\t\t\t\tVector2 segment1 = new Vector2 (inputNum[0], inputNum[1]) - new Vector2 (inputNum[2], inputNum[3]);\n\t\t\t\tVector2 segment2 = new Vector2 (inputNum[4], inputNum[5]) - new Vector2 (inputNum[6], inputNum[7]);\n\n\t\t\t\tif (Vector2.IsParallel (segment1, segment2))\n\t\t\t\t{\n\t\t\t\t\toutput.Append (2);\n\t\t\t\t}\n\t\t\t\telse if (Vector2.IsOrthogonal (segment1, segment2))\n\t\t\t\t{\n\t\t\t\t\toutput.Append (1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\toutput.Append (0);\n\t\t\t\t}\n\n\t\t\t\toutput.AppendLine ();\n\t\t\t}\n\n\t\t\tConsole.Write (output);\n\t\t}\n\t}\n\n\tclass Vector2\n\t{\n\t\tpublic Vector2 ( double x, double y )\n\t\t{\n\t\t\tthis.X = x;\n\t\t\tthis.Y = y;\n\t\t}\n\t\t\n\t\tpublic double X { private set; get; }\n\t\tpublic double Y { private set; get; }\n\n\t\tpublic static Vector2 operator - ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X - ob2.X, ob1.Y - ob2.Y);\n\t\t}\n\n\t\tpublic double Length ()\n\t\t{\n\t\t\treturn X * X + Y * Y;\n\t\t}\n\t\tpublic Vector2 Normalize ()\n\t\t{\n\t\t\tdouble length = this.Length ();\n\t\t\treturn new Vector2 (X / length, Y / length);\n\t\t}\n\t\tpublic static double DotProduct ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\tVector2 normalize1 = ob1.Normalize ();\n\t\t\tVector2 normalize2 = ob2.Normalize ();\n\n\t\t\treturn normalize1.X * normalize2.X +\n\t\t\t\tnormalize1.Y * normalize2.Y;\n\t\t}\n\t\tpublic static double CrossProduct ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn ob1.X * ob2.Y - ob1.Y * ob2.X;\n\t\t}\n\n\t\tpublic static bool IsOrthogonal ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn Math.Abs (DotProduct (ob1, ob2) - 0.0) < double.Epsilon;\n\t\t}\n\t\tpublic static bool IsParallel ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn Math.Abs (CrossProduct (ob1, ob2) - 0.0) < double.Epsilon;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "#region ZIPPER\nusing System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Linq;\nusing System.Text;\nusing sc = Scanner;\nusing Geometry;\nusing gl = Geometry.GeometryLibrary;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Solver solver = new Solver();\n        solver.Solve();\n#if DEBUG\n        System.Console.WriteLine(\"?¶?????????????????????????????????????????????????????????????\");\n        System.Console.ReadKey();\n#endif\n\n    }\n}\n/// <summary>\n/// ?¨??????\\????????????????????´???????????????????????????????????????\n/// </summary>\npublic static class Scanner\n{\n    public static string NextString()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return tmp;\n    }\n    public static int NextInt()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return int.Parse(tmp);\n    }\n    public static long NextLong()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return long.Parse(tmp);\n    }\n    public static double NextDouble()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return double.Parse(tmp);\n    }\n\n    public static string[] NextStrArray()\n    {\n        return Console.ReadLine().Split(' ');\n    }\n    public static int[] NextIntArray()\n    {\n\n        string[] s = NextStrArray();\n        int[] a = new int[s.Length];\n        for (int i = 0; i < a.Length; i++)\n        {\n            a[i] = int.Parse(s[i]);\n        }\n        return a;\n    }\n    public static long[] NextLongArray()\n    {\n        string[] s = NextStrArray();\n        long[] a = new long[s.Length];\n        for (int i = 0; i < a.Length; i++)\n        {\n            a[i] = long.Parse(s[i]);\n        }\n        return a;\n    }\n    public static double[] NextDoubleArray()\n    {\n        string[] s = NextStrArray();\n        double[] a = new double[s.Length];\n        for (int i = 0; i < a.Length; i++)\n        {\n            a[i] = double.Parse(s[i]);\n        }\n        return a;\n    }\n}\n#endregion ZIPPER\n\npublic class Solver\n{\n#region IGNORE_ME\n    public Solver()\n    {\n        //???????????¨?????????????????????????????????????????????\n    }\n#endregion IGNORE_ME\n\n    public void Solve()\n    {\n        int q = sc.NextInt();\n        Point[] p = new Point[4*q];\n        for (int i = 0; i < 4*q; i++)\n        {\n            p[i] = new Point(sc.NextInt(), sc.NextInt());\n        }\n        for (int i = 0; i < q; i++)\n        {\n            int s = 4*i;\n            if (gl.IsParallel(p[s], p[s + 1], p[s + 2], p[s + 3]))\n            {\n                Console.WriteLine(\"2\");\n            }\n            else if (gl.IsVertical(p[s], p[s + 1], p[s + 2], p[s + 3]))\n            {\n                Console.WriteLine(\"1\");\n            }\n            else\n                Console.WriteLine(\"0\");\n        }\n#if DEBUG\n        Console.WriteLine(\"\");//local check\n#endif\n    }\n}\nnamespace Geometry\n{\n    /// <summary>\n    /// ??????x,y??§?¨??????¨???(double???)\n    /// </summary>\n    public struct dPoint\n    {\n        public double x;\n        public double y;\n        public dPoint(int x, int y)\n        {\n            this.x = (double)x; this.y = (double)y;\n        }\n        public dPoint(double x, double y)\n        {\n            this.x = x; this.y = y;\n        }\n        public static dPoint operator +(dPoint p1, dPoint p2)\n        {\n            return new dPoint(p1.x + p2.x, p1.y + p2.y);\n        }\n        public static dPoint operator -(dPoint p1, dPoint p2)\n        {\n            return new dPoint(p1.x - p2.x, p1.y - p2.y);\n        }\n        public static dPoint operator *(double s, dPoint p)\n        {\n            return new dPoint(s * p.x, s * p.y);\n        }\n    }\n    /// <summary>\n    /// ??????x,y??§?¨??????¨???(int???)\n    /// </summary>\n    public struct Point\n    {\n        public int x;\n        public int y;\n        public Point(int x, int y)\n        {\n            this.x = x; this.y = y;\n        }\n        public static Point operator +(Point p1, Point p2)\n        {\n            return new Point(p1.x + p2.x, p1.y + p2.y);\n        }\n        public static Point operator -(Point p1, Point p2)\n        {\n            return new Point(p1.x - p2.x, p1.y - p2.y);\n        }\n        public static Point operator *(int s, Point p)\n        {\n            return new Point(s * p.x, s * p.y);\n        }\n    }\n\n    public static class GeometryLibrary\n    {\n\n\n        /// <summary>\n        /// ??????\n        /// </summary>\n        /// <returns></returns>\n        public static double Naiseki(dPoint p1, dPoint p2)\n        {\n            return p1.x * p2.x + p1.y * p2.y;\n        }\n        /// <summary>\n        /// ??????\n        /// </summary>\n        /// <returns></returns>\n        public static int Naiseki(Point p1, Point p2)\n        {\n            return p1.x * p2.x + p1.y * p2.y;\n        }\n        /// <summary>\n        /// ??´???p1,p2???????????????p????°???±\n        /// </summary>\n        /// <param name=\"p1\"></param>\n        /// <param name=\"p2\"></param>\n        /// <param name=\"p\"></param>\n        /// <returns></returns>\n        public static dPoint Projection(dPoint p1, dPoint p2, dPoint p)\n        {\n            dPoint a = p2 - p1;\n            dPoint b = p - p1;\n            double t = Naiseki(a, b) / Naiseki(a, a);\n            return t * a + p1 ;\n        }\n        /// <summary>\n        /// ??´???p1p2???????????????p???????°????p1,p2???????????´?????????????§°??????p????§????\n        /// </summary>\n        /// <param name=\"p1\"></param>\n        /// <param name=\"p2\"></param>\n        /// <param name=\"p\"></param>\n        /// <returns></returns>\n        public static dPoint Refrection(dPoint p1, dPoint p2, dPoint p)\n        {\n            return 2 * Projection(p1, p2, p) - p;\n        }\n\n        /// <summary>\n        /// p1p2??¨p3p4????????´????????????\n        /// </summary>\n        /// <param name=\"p1\"></param>\n        /// <param name=\"p2\"></param>\n        /// <param name=\"p3\"></param>\n        /// <param name=\"p4\"></param>\n        /// <returns></returns>\n        public static bool IsParallel(Point p1, Point p2, Point p3, Point p4)\n        {\n            Point a = p2 - p1;\n            Point b = p4 - p3;\n            if (Naiseki(a, b) * Naiseki(a, b) == Naiseki(a, a) * Naiseki(b, b)) return true;\n            return false;\n        }\n        public static bool IsVertical(Point p1, Point p2, Point p3, Point p4)\n        {\n            Point a = p2 - p1;\n            Point b = p4 - p3;\n            if (Naiseki(a, b) == 0) return true;\n            return false;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nclass A\n{\n\tstatic int[] Read() => Console.ReadLine().Split().Select(int.Parse).ToArray();\n\tstatic void Main() => Console.WriteLine(string.Join(\"\\n\", new int[int.Parse(Console.ReadLine())].Select(_ => Solve())));\n\n\tstatic long Solve()\n\t{\n\t\tvar h = Read();\n\t\tV p0 = new V(h[0], h[1]), p1 = new V(h[2], h[3]), p2 = new V(h[4], h[5]), p3 = new V(h[6], h[7]);\n\t\tV s1 = p1 - p0, s2 = p3 - p2;\n\n\t\treturn V.IsParallel(s1, s2) ? 2 : V.IsOrthogonal(s1, s2) ? 1 : 0;\n\t}\n}\n\nstruct V\n{\n\tpublic int X, Y;\n\tpublic V(int x, int y) { X = x; Y = y; }\n\n\tpublic static V operator -(V v) => new V(-v.X, -v.Y);\n\tpublic static V operator +(V v1, V v2) => new V(v1.X + v2.X, v1.Y + v2.Y);\n\tpublic static V operator -(V v1, V v2) => new V(v1.X - v2.X, v1.Y - v2.Y);\n\n\tpublic static bool IsParallel(V v1, V v2) => v1.X * v2.Y == v2.X * v1.Y;\n\tpublic static bool IsOrthogonal(V v1, V v2) => v1.X * v2.X == -v1.Y * v2.Y;\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    class Vector2D\n    {\n        internal double x, y;\n\n        public Vector2D(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int q = int.Parse(Console.ReadLine());\n\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < q; i++)\n            {\n                double[] input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n\n                Vector2D a = new Vector2D(input[0] - input[2], input[1] - input[3]);\n                Vector2D b = new Vector2D(input[4] - input[6], input[5] - input[7]);\n\n                if (Dot(a, b) == 0.0) sb.AppendLine(\"1\");\n                else if (Cross(a, b) == 0.0) sb.AppendLine(\"2\");\n                else sb.AppendLine(\"0\");\n            }\n            Console.Write(sb);\n        }\n\n        static double Dot(Vector2D a, Vector2D b)\n        {\n            return a.x * b.x + a.y * b.y;\n        }\n\n        static double Cross(Vector2D a, Vector2D b)\n        {\n            return a.x * b.y - a.y * b.x;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;//リストの使用\nusing System.Collections.Generic;\nclass Program\n{\n\tstatic void Main()\n\t{\n    long n = long.Parse(Console.ReadLine());\n    for(long i = 0; i < n; i++)\n    {\n\t\t  long[] nums = Array.ConvertAll(Console.ReadLine().Split(' '),long.Parse);\n      long vecXa = nums[2] - nums[0];\n      long vecYa = nums[3] - nums[1];\n      long vecXb = nums[6] - nums[4];\n      long vecYb = nums[7] - nums[5];\n      long dotNum = vecXa*vecXb + vecYa*vecYb;\n      if(dotNum == 0) Console.WriteLine(1);\n      else if(vecXa*vecYb == vecYa*vecXb) Console.WriteLine(2);\n      else Console.WriteLine(0);\n    }\n\t}\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\n\nclass Program\n{\n  struct Vector\n  {\n    public int x, y;\n  }\n\n  struct Segment\n  {\n    public int x1, y1, x2, y2;\n  }\n\n  private static bool isOrthogonal(Vector v1, Vector v2)\n  {\n    return v1.x*v2.x - v1.y*v2.y == 0;\n  }\n\n  private static bool isParallel(Vector v1, Vector v2)\n  {\n    return v2.x*v1.y - v2.y*v1.x == 0;\n  }\n  public static void Main()\n  {\n    int n = int.Parse(Console.ReadLine());\n\n    for(int i=0; i<n; i++)\n    {\n      string[] s = Console.ReadLine().Split(' ');\n      Vector v1, v2;\n      v1.x = int.Parse(s[2]) - int.Parse(s[0]);\n      v1.y = int.Parse(s[3]) - int.Parse(s[1]);\n      v2.x = int.Parse(s[6]) - int.Parse(s[4]);\n      v2.y = int.Parse(s[7]) - int.Parse(s[5]);\n\n      if(isOrthogonal(v1, v2)) {\n        Console.WriteLine(\"1\");\n      } else if(isParallel(v1, v2)) {\n        Console.WriteLine(\"2\");\n      } else {\n        Console.WriteLine(\"0\");\n      }\n    }\n  }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program {\n    static int ReadInt() { return int.Parse(Console.ReadLine()); }\n    static int[] ReadInts() { return Console.ReadLine().Split().Select(int.Parse).ToArray(); }\n    static string[] ReadStrings() { return Console.ReadLine().Split(); }\n\n    // ab ??¨ cd ????????????\n    static bool IsParallel(Vec2 a, Vec2 b, Vec2 c, Vec2 d) {\n        var ab = b - a;\n        var cd = d - c;\n        return ab.Cross(cd) == 0;\n    }\n\n    // ab ??¨ cd ????????´???\n    static bool IsOrthogonal(Vec2 a, Vec2 b, Vec2 c, Vec2 d) {\n        var ab = b - a;\n        var cd = d - c;\n        return ab.Dot(cd) == 0;\n    }\n\n    static int Calc(Vec2 a, Vec2 b, Vec2 c, Vec2 d) {\n        if (IsParallel(a, b, c, d)) return 2;\n        if (IsOrthogonal(a, b, c, d)) return 1;\n        return 0;\n    }\n\n    static void Main() {\n        var n = ReadInt();\n        for (int i = 0; i < n; i++) {\n            var ps = ReadInts();\n            var a = new Vec2(ps[0], ps[1]);\n            var b = new Vec2(ps[2], ps[3]);\n            var c = new Vec2(ps[4], ps[5]);\n            var d = new Vec2(ps[6], ps[7]);\n\n            Console.WriteLine(Calc(a, b, c, d));\n        }\n    }\n}\n\nstruct Vec2 {\n    public double X { get; private set; }\n    public double Y { get; private set; }\n\n    public Vec2(double x, double y) : this() {\n        X = x;\n        Y = y;\n    }\n\n    public override string ToString() {\n        return string.Format(\"({0}, {1})\", X, Y);\n    }\n\n    public static Vec2 operator+(Vec2 a, Vec2 b) {\n        return new Vec2(a.X + b.X, a.Y + b.Y);\n    }\n\n    public static Vec2 operator-(Vec2 a, Vec2 b) {\n        return new Vec2(a.X - b.X, a.Y - b.Y);\n    }\n\n    public static Vec2 operator*(Vec2 a, double t) {\n        return new Vec2(a.X * t, a.Y * t);\n    }\n\n    public static Vec2 operator*(double t, Vec2 a) {\n        return new Vec2(a.X * t, a.Y * t);\n    }\n\n    // a???b = |a||b|cos??\n    public double Dot(Vec2 other) {\n        return X * other.X + Y * other.Y;\n    }\n\n    public double Cross(Vec2 other) {\n        return X * other.Y - Y * other.X;\n    }\n\n    public Vec2 Normalized() {\n        var m = Magnitude();\n        if (m != 0 && m != 1) {\n            return new Vec2(X / m, Y / m);\n        }\n        return this;\n    }\n\n    public double Magnitude() {\n        return Math.Sqrt(X * X + Y * Y);\n    }\n\n    public double SqrMagnitude() {\n        return X * X + Y * Y;\n    }\n\n    public static double Distance(Vec2 a, Vec2 b) {\n        return (a - b).Magnitude();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\n//using System.Numerics;\nusing Enu = System.Linq.Enumerable;\n\npublic class Program\n{\n    public void Solve()\n    {\n        int NQ = Reader.Int();\n\n        for (int q = 0; q < NQ; q++)\n        {\n            var a = new Point(Reader.Int(), Reader.Int());\n            var b = new Point(Reader.Int(), Reader.Int());\n            var c = new Point(Reader.Int(), Reader.Int());\n            var d = new Point(Reader.Int(), Reader.Int());\n\n            if ((b - a).Det(d - c) == 0)\n                Console.WriteLine(2);\n            else if ((b - a).Dot(d - c) == 0)\n                Console.WriteLine(1);\n            else\n                Console.WriteLine(0);\n        }\n        Console.ReadLine();\n    }\n\n\n    public struct Point : IEquatable<Point>, IComparable<Point>\n    {\n        public static readonly double Eps = 1e-10;\n        public double X, Y;\n\n        public Point(double x, double y) { X = x; Y = y; }\n\n        public static Point operator +(Point a, Point b)\n        {\n            return new Point(Add(a.X, b.X), Add(a.Y, b.Y));\n        }\n        public static Point operator -(Point a, Point b)\n        {\n            return new Point(Add(a.X, -b.X), Add(a.Y, -b.Y));\n        }\n        public static Point operator *(Point p, double d)\n        {\n            return new Point(p.X * d, p.Y * d);\n        }\n        public double Dot(Point b) { return Add(X * b.X, Y * b.Y); }\n        public double Det(Point b) { return Add(X * b.Y, -Y * b.X); }\n        public bool Equals(Point b) { return X == b.X && Y == b.Y; }\n        public int CompareTo(Point b) { return X != b.X ? Math.Sign(X - b.X) : Math.Sign(Y - b.Y); }\n        public override int GetHashCode() { return (int)(X * 100000 + Y); }\n        public override string ToString() { return X + \", \" + Y; }\n\n        private static double Add(double a, double b)\n        {\n            if (Math.Abs(a + b) < Eps * (Math.Abs(a) + Math.Abs(b))) return 0;\n            return a + b;\n        }\n    }\n}\n\n\nclass Entry { static void Main() { new Program().Solve(); } }\nclass Reader\n{\n    private static TextReader reader = Console.In;\n    private static readonly char[] separator = { ' ' };\n    private static readonly StringSplitOptions op = StringSplitOptions.RemoveEmptyEntries;\n    private static string[] A = new string[0];\n    private static int i;\n    private static void Init() { A = new string[0]; }\n    public static void Set(TextReader r) { reader = r; Init(); }\n    public static void Set(string file) { reader = new StreamReader(file); Init(); }\n    public static bool HasNext() { return CheckNext(); }\n    public static string String() { return Next(); }\n    public static int Int() { return int.Parse(Next()); }\n    public static long Long() { return long.Parse(Next()); }\n    public static double Double() { return double.Parse(Next()); }\n    public static int[] IntLine() { return Array.ConvertAll(Split(Line()), int.Parse); }\n    public static int[] IntArray(int N) { return Enu.Range(0, N).Select(i => Int()).ToArray(); }\n    public static int[][] IntTable(int H) { return Enu.Range(0, H).Select(i => IntLine()).ToArray(); }\n    public static string[] StringArray(int N) { return Enu.Range(0, N).Select(i => Next()).ToArray(); }\n    public static string Line() { return reader.ReadLine().Trim(); }\n    private static string[] Split(string s) { return s.Split(separator, op); }\n    private static string Next() { CheckNext(); return A[i++]; }\n    private static bool CheckNext()\n    {\n        if (i < A.Length) return true;\n        string line = reader.ReadLine();\n        if (line == null) return false;\n        if (line == \"\") return CheckNext();\n        A = Split(line);\n        i = 0;\n        return true;\n    }\n}"
  },
  {
    "language": "JavaScript",
    "code": "// Vector2d\nvar Vector2D = class Vector2D {\n\tconstructor(x,y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n}\n\nVector2D.prototype.Init = function(x,y){\n\tthis.x = x;\n\tthis.y = y;\n}\n\n/*\n * v: Vector2D\n */\nfunction rotateVector90(v){\n\tvar r = new Vector2D();\n\tr.x = -v.y;\n\tr.y = v.x;\n\treturn r;\n}\n\n/*\n * get degree to radian return radian\n */\nfunction getDegreeToRadian(degree){\n\tvar pi = 3.14159265358979323846;\n\treturn degree * pi / 180;\n}\n\n/*\n * vec:Vector2D return Vector2D\n */\nfunction getRotateVector(vec,degree){\n\tvar radian = getDegreeToRadian(degree);\n\n\tvar sin = Math.sin(radian);\n\tvar cos = Math.cos(radian);\n\n\tvar r = new Vector2D();\n\tr.x = vec.x * cos - vec.y * sin;\n\tr.y = vec.x * sin + vec.y * cos;\n\n\treturn r;\n}\n\nfunction isEqualVectors(a,b){\n\treturn equalFloats(a.x - b.x,0) && equalFloats(a.y - b.y,0);\n}\n\n/**\n * vec:Vector2D\n * \n * return unitVector\n */\nfunction getUnitVector(vec){\n\tvar length = getVectorLength2D(vec);\n\tif(length > 0){\n\t\treturn getDivideVector(vec,length);\n\t}\n\treturn vec;\n}\n\n/**\n * return vector length\n * \n * vec:Vector2D\n */\nfunction getVectorLength2D(vec){\n\treturn Math.sqrt((vec.x * vec.x) + (vec.y * vec.y));\n}\n\nfunction getDivideVector(vec2D,length){\n\tvec2D.x = vec2D.x / length;\n\tvec2D.y = vec2D.y / length;\n\treturn vec2D;\n}\n\nfunction equalFloats(a,b){\n\tvar threshold = 1 / 8192;\n\treturn Math.abs(a - b) < threshold;\n}\n\nfunction isParallelVector(vectorA,vectorB){\n\tvar na = rotateVector90(vectorA);\n\treturn equalFloats(0,dotProduct2D(na,vectorB));\n}\n\nfunction isVerticalVector(vectorA,vectorB){\n\treturn equalFloats(0,dotProduct2D(vectorA,vectorB));\n}\n\nfunction subtractVector(vecA,vecB){\n\tvar vec = new Vector2D();\n\tvec.x = vecA.x - vecB.x;\n\tvec.y = vecA.y - vecB.y;\n\treturn vec;\n}\n\nfunction dotProduct2D(vecA,vecB){\n\treturn vecA.x * vecB.x + vecA.y * vecB.y;\n}\n\n/**\n * 外積\n * \n * @param vecA\n * @param vecB\n * @returns\n */\nfunction getCloss(vecA,vecB){\n\treturn vecA.x * vecB.y - vecA.y * vecB.x;;\n}\n\n/**\n * line segment\n * \n * point1:Vector2D point2:Vector2D\n */\nvar LineSegment2D = class LineSegment2D {\n\tconstructor(point1,point2){\n\t\tthis.point1 = point1;\n\t\tthis.point2 = point2;\n\t}\n}\n\nLineSegment2D.prototype.Init = function(point1,point2){\n\tthis.point1 = point1;\n\tthis.point2 = point2;\n}\n\n/*\n * Line Object\n */\nfunction Line(){\n\t// vector2D\n\tthis.base;\n\t// vector2D\n\tthis.direction\n}\n\nLine.prototype.Init = function(base,direction,color){\n\tthis.base = base;\n\tthis.direction = direction;\n}\n\n/**\n * Range\n */\nvar Range = class Range {\n\tconstructor(min,max){\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t}\n}\n\nfunction getMaxMinRange(range1,range2){\n\tvar range = new Range();\n\trange.min = range1.min < range2.min ? range1.min : range2.min;\n\trange.max = range1.max < range2.max ? range2.max : range1.max;\n\treturn range;\n}\n\nfunction getSortRange(range){\n\tvar sorted = new Range(range.min,range.max);\n\tif(range.min > range.max){\n\t\tsorted.min = range.max;\n\t\tsorted.max = range.min;\n\t}\n\treturn sorted;\n}\n\nfunction getNegateVector(vector){\n\tvector.x = -vector.x;\n\tvector.y = -vector.y;\n\treturn vector;\n}\n\nfunction getAddVector(vecA,vecB){\n\treturn new Vector2D(vecA.x + vecB.x,vecA.y + vecB.y);\n}\n\n/**\n * segment:segment onto:Vector2D\n * \n * return Range\n */\nfunction getProjectSegment(segment,onto){\n\tvar ontoUnitVec = getUnitVector(onto);\n\n\tvar range = new Range();\n\trange.min = dotProduct2D(ontoUnitVec,segment.point1);\n\trange.max = dotProduct2D(ontoUnitVec,segment.point2);\n\n\trange = getSortRange(range);\n\treturn range;\n}\n\nfunction isOverLappingRanges(range1,range2){\n\treturn overLapping(range1.min,range1.max,range2.min,range2.max);\n}\n\nfunction projectVector(project,onto){\n\tvar d = dotProduct2D(onto,onto);\n\tconsole.log(\"d = \" + d);\n\n\tif(0 < d){\n\t    var dp = dotProduct2D(project,onto);\n\t    console.log(\"dp = \" + dp);\n\t    return multiplyVector(onto,dp / d);\n\t}\n\treturn onto;\n}\n\nfunction getNorm(vec){\n\treturn vec.x * vec.x + vec.y * vec.y;\n}\n\n/**\n * point class\n */\nvar Point2D = class Point2D {\n\tconstructor(x,y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n}\n\nfunction addPoint(point1,point2){\n\treturn new Point2D(point1.x + point2.x,point1.y + point2.y);\n}\n\nfunction subtractPoint(point1,point2){\n\treturn new Point2D(point1.x - point2.x,point1.y - point2.y);\n}\n\nfunction multiplyPoint(point,scalar){\n\treturn new Point2D(point.x * scalar,point.y * scalar);\n}\n\n/**\n * segment : LineSegment2D\n * point : Point\n */\nfunction getProjectPoint(segment,point){\n\tvar vec1 = new Vector2D(segment.point2.x - segment.point1.x,segment.point2.y - segment.point1.y);\n\tvar vec2 = new Vector2D(point.x - segment.point1.x,point.y - segment.point1.y);\n\tvar rate = dotProduct2D(vec2,vec1) / getNorm(vec1);\n\tvar vec3 = multiplyVector(vec1,rate);\n\tvar project = new Point2D(segment.point1.x + vec3.x,segment.point1.y + vec3.y);\n\treturn project; \n}\n\nfunction getReflectionPoint(segment,point){\n\tvar projection = getProjectPoint(segment,point);\n\t// pから射影点までのベクトル\n\tvar vec = subtractPoint(projection,point);\n\t// 2倍したものが射影点になる\n\tvar refrectionPoint = multiplyPoint(vec,2);\n\t// 始点を足す\n\treturn addPoint(refrectionPoint,point);\n}\n\nfunction multiplyVector(vec,scalar){\n\tvar temp = new Vector2D();\n\ttemp.x = vec.x * scalar;\n\ttemp.y = vec.y * scalar;\n\treturn temp;\n}\n\nfunction clampOnRange(x,min,max){\n\tif(x < min){\n\t\treturn min;\n\t}else if(x > max){\n\t\treturn max;\n\t}else{\n\t\treturn x;\n\t}\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\n//var input = require('fs').readFileSync('input.txt', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\t\n// 消す\nArr.shift();\n\nArr.forEach(function(v){\n   var nums = v.split(\" \").map(Number);\n   var vecA = new Vector2D(nums[2] - nums[0],nums[3] - nums[1]);\n   var vecB = new Vector2D(nums[6] - nums[4],nums[7] - nums[5]);\n   var ans = \"0\";\n   \n   if(isParallelVector(vecA,vecB)){\n\t   ans = \"2\";\n   }\n   else if(isVerticalVector(vecA,vecB)){\n\t   ans = \"1\";\n   }\n   console.log(ans);\n});\n"
  },
  {
    "language": "Ruby",
    "code": "require 'matrix'\nq = gets.to_i\nx0, y0, x1, y1, x2, y2, x3, y3 = gets.split.map &:to_i\ns1 = Vector[ x1 - x0, y1 - y0, 0 ]\ns2 = Vector[ x3 - x2, y3 - y2, 0 ]\nif s1.inner_product(s1) == 0\n  puts 1\nelsif s1.cross_product(s2) == 0\n  puts 2\nelse\n  puts 0\nend"
  },
  {
    "language": "Ruby",
    "code": "require 'matrix'\nq = gets.to_i\nq.times do\n  x0, y0, x1, y1, x2, y2, x3, y3 = gets.split.map &:to_i\n  s1 = Vector[ x1 - x0, y1 - y0, 0 ]\n  s2 = Vector[ x3 - x2, y3 - y2, 0 ]\n  if s1.inner_product(s2) == 0\n    puts 1\n  elsif s1.cross_product(s2).norm == 0\n    puts 2\n  else\n    puts 0\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "_ = gets\nwhile l = gets do\n  ps = l.split(' ').map(&:to_i)\n  va = [ps[2] - ps[0], ps[3] - ps[1]]\n  vb = [ps[6] - ps[4], ps[7] - ps[5]]\n  sp = va[0] * vb[0] + va[1] * vb[1]\n  vp = va[0] * vb[1] - vb[0] * va[1]\n  if vp == 0\n    puts 2\n  elsif sp == 0\n    puts 1\n  else\n    puts 0\n  end\nend\n"
  },
  {
    "language": "Ruby",
    "code": "require 'matrix'\nq = gets.to_i\nx0, y0, x1, y1, x2, y2, x3, y3 = gets.split.map &:to_i\ns1 = Vector[ x1 - x0, y1 - y0, 0 ]\ns2 = Vector[ x3 - x2, y3 - y2, 0 ]\nif s1.inner_product(s1) == 0\n  puts 1\nelsif s1.cross_product(s2).norm == 0\n  puts 2\nelse\n  puts 0\nend"
  },
  {
    "language": "Ruby",
    "code": "eps = 1e-12\nq = gets.to_i\nq.times{\n  x0, y0, x1, y1, x2, y2, x3, y3 = gets.split.map(&:to_f)\n  v0x = x1 - x0\n  v0y = y1 - y0\n  v1x = x3 - x2\n  v1y = y3 - y2\n  ct = (v0x*v1x+v0y*v1y)/Math.sqrt(v0x**2+v0y**2)/Math.sqrt(v1x**2+v1y**2)\n  p ct\n  if (ct.abs - 1.0).abs < eps\n    puts 2\n  elsif ct.abs < eps \n    puts 1\n  else\n    puts 0\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "eps = 1e-12\nq = gets.to_i\nq.times{\n  x0, y0, x1, y1, x2, y2, x3, y3 = gets.split.map(&:to_f)\n  v0x = x1 - x0\n  v0y = y1 - y0\n  v1x = x3 - x2\n  v1y = y3 - y2\n  ct = (v0x*v1x+v0y*v1y)/Math.sqrt(v0x**2+v0y**2)/Math.sqrt(v1x**2+v1y**2)\n  if (ct.abs - 1.0).abs < eps\n    puts 2\n  elsif ct.abs < eps \n    puts 1\n  else\n    puts 0\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "def parallel? u, v\n  (u.conj * v).imag.zero?\nend\n\ngets.to_i.times do\n  p0, p1, p2, p3 = gets.split.map(&:to_i).each_slice(2).map {|a, b| a + b * 1i }\n  u, v = p1 - p0, p3 - p2\n  p [u, -u].any? {|z| parallel? z, v } ? 2 : [u * 1i, u * -1i].any? {|z| parallel? z, v } ? 1 : 0\nend"
  },
  {
    "language": "Ruby",
    "code": "q = gets.to_i\nq.times{\n  x0, y0, x1, y1, x2, y2, x3, y3 = gets.split.map(&:to_f)\n  v0x = x1 - x0\n  v0y = y1 - y0\n  v1x = x3 - x2\n  v1y = y3 - y2\n  ct = (v0x*v1x+v0y*v1y)/Math.sqrt(v0x**2+v0y**2)/Math.sqrt(v1x**2+v1y**2)\n  if ct == 1.0\n    puts 2\n  elsif ct == 0.0\n    puts 1\n  else\n    puts 0\n  end\n}"
  },
  {
    "language": "Ruby",
    "code": "require 'matrix'\nq = gets.to_i\nq.times do\n  x0, y0, x1, y1, x2, y2, x3, y3 = gets.split.map &:to_i\n  s1 = Vector[ x1 - x0, y1 - y0, 0 ]\n  s2 = Vector[ x3 - x2, y3 - y2, 0 ]\n  if s1.inner_product(s1) == 0\n    puts 1\n  elsif s1.cross_product(s2).norm == 0\n    puts 2\n  else\n    puts 0\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "require 'matrix'\nq = gets.to_i\nx0, y0, x1, y1, x2, y2, x3, y3 = gets.split.map &:to_i\ns1 = Vector[ x1 - x0, y1 - y0, 0 ]\ns2 = Vector[ x3 - x2, y3 - y2, 0 ]\nq.times do\n  if s1.inner_product(s1) == 0\n    puts 1\n  elsif s1.cross_product(s2).norm == 0\n    puts 2\n  else\n    puts 0\n  end\nend"
  },
  {
    "language": "Ruby",
    "code": "def check(x0, y0, x1, y1, x2, y2, x3, y3)\n  a1, b1, a2, b2 = x0 - x1, y0 - y1, x2 - x3, y2 - y3\n  if a1 * a2 + b1 * b2 == 0\n    puts \"1\"\n  elsif a1 * b2 - a2 * b1 == 0\n    puts \"2\"\n  else\n    puts \"0\"\n  end\nend\ndef main(input = STDIN)\n  input.gets.to_i.times{check(*input.gets.split(\" \").map(&:to_i))}\nend\nmain"
  },
  {
    "language": "Ruby",
    "code": "class Point\n  attr_accessor :x, :y\n  def initialize(x, y)\n    @x = x\n    @y = y\n  end\n\n  def -(p)\n    Point.new(x - p.x, y - p.y)\n  end\nend\n\ndef dot(a, b)\n  a.x * b.x + a.y * b.y\nend\n\ndef cross(a, b)\n  a.x * b.y - a.y * b.x\nend\n\nSegment = Struct.new('Segment', :p1, :p2)\n\ndef is_orthogonal?(s1, s2)\n  dot(s1.p2 - s1.p1, s2.p2 - s2.p1).zero?\nend\n\ndef is_parallel?(s1, s2)\n  cross(s1.p2 - s1.p1, s2.p2 - s2.p1).zero?\nend\n\nn = gets.to_i\nn.times do\n  x0, y0, x1, y1, x2, y2, x3, y3 = gets.split.map(&:to_i)\n  p0 = Point.new(x0, y0)\n  p1 = Point.new(x1, y1)\n  p2 = Point.new(x2, y2)\n  p3 = Point.new(x3, y3)\n  s1 = Segment.new(p0, p1)\n  s2 = Segment.new(p2, p3)\n  if is_orthogonal?(s1, s2)\n    puts 1\n  elsif is_parallel?(s1, s2)\n    puts 2\n  else\n    puts 0\n  end\nend\n"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"math\"\n\t\"math/cmplx\"\n\t\"os\"\n\t\"strconv\"\n)\n\nfunc getScanner(fp *os.File) *bufio.Scanner {\n\tscanner := bufio.NewScanner(fp)\n\tscanner.Split(bufio.ScanWords)\n\tscanner.Buffer(make([]byte, 1000005), 1000005)\n\treturn scanner\n}\nfunc getNextString(scanner *bufio.Scanner) string {\n\tscanner.Scan()\n\treturn scanner.Text()\n}\nfunc getNextInt(scanner *bufio.Scanner) int {\n\ti, _ := strconv.Atoi(getNextString(scanner))\n\treturn i\n}\nfunc getNextInt64(scanner *bufio.Scanner) int64 {\n\ti, _ := strconv.ParseInt(getNextString(scanner), 10, 64)\n\treturn i\n}\nfunc getNextUint64(scanner *bufio.Scanner) uint64 {\n\ti, _ := strconv.ParseUint(getNextString(scanner), 10, 64)\n\treturn i\n}\nfunc getNextFloat64(scanner *bufio.Scanner) float64 {\n\ti, _ := strconv.ParseFloat(getNextString(scanner), 64)\n\treturn i\n}\nfunc main() {\n\tfp := os.Stdin\n\twfp := os.Stdout\n\tcnt := 0\n\tif os.Getenv(\"MASPY\") == \"ますピ\" {\n\t\tfp, _ = os.Open(os.Getenv(\"BEET_THE_HARMONY_OF_PERFECT\"))\n\t\tcnt = 0\n\t}\n\tif os.Getenv(\"MASPYPY\") == \"ますピッピ\" {\n\t\twfp, _ = os.Create(os.Getenv(\"NGTKANA_IS_GENIUS10\"))\n\t}\n\tscanner := getScanner(fp)\n\twriter := bufio.NewWriter(wfp)\n\tsolve(scanner, writer)\n\tfor i := 0; i < cnt; i++ {\n\t\tfmt.Fprintln(writer, \"-----------------------------------\")\n\t\tsolve(scanner, writer)\n\t}\n\twriter.Flush()\n}\nfunc solve(scanner *bufio.Scanner, writer *bufio.Writer) {\n\teps := 1e-10\n\tq := getNextInt(scanner)\n\tfor i := 0; i < q; i++ {\n\t\txx := make([]float64, 4)\n\t\tyy := make([]float64, 4)\n\t\tfor i := 0; i < 4; i++ {\n\t\t\txx[i] = getNextFloat64(scanner)\n\t\t\tyy[i] = getNextFloat64(scanner)\n\t\t}\n\t\ts1 := complex(xx[1]-xx[0], yy[1]-yy[0])\n\t\ts2 := complex(xx[3]-xx[2], yy[3]-yy[2])\n\t\ts := s1 / s2\n\n\t\tif math.Abs(real(s)) < eps {\n\t\t\tfmt.Fprintln(writer, 1)\n\t\t\tcontinue\n\t\t}\n\t\tif math.Abs(imag(s)) < eps {\n\t\t\tfmt.Fprintln(writer, 2)\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Fprintln(writer, 0)\n\t}\n}\n\nfunc rotate(v complex128, theta float64) complex128 {\n\tr, th := cmplx.Polar(v)\n\tth += theta\n\treturn cmplx.Rect(r, th)\n}\n\n"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// test\nfunc Test() {\n\n\tinput := `3\n0 0 3 0 0 2 3 2\n0 0 3 0 1 1 1 4\n0 0 3 0 1 1 2 2`\n\tsolve(bufio.NewScanner(strings.NewReader(input)))\n}\n\n// main\nfunc main() {\n\tsolve(bufio.NewScanner(os.Stdin))\n\t//Test()\n}\n\n// logic\nfunc solve(sc *bufio.Scanner) {\n\n\n\tsc.Scan()\n\tq, _ := strconv.Atoi(sc.Text())\n\tresult := make([]int, q)\n\tfor i:=0; i < q; i++ {\n\t\tsc.Scan()\n\t\tvaluesStr := strings.Split(sc.Text(), \" \")\n\t\tvalues := make([]int, len(valuesStr))\n\t\tfor i, v := range valuesStr {\n\t\t\tvalues[i], _ = strconv.Atoi(v)\n\t\t}\n\t\tax := values[2] - values[0]\n\t\tbx := values[6] - values[4]\n\t\tay := values[3] - values[1]\n\t\tby := values[7] - values[5]\n\t\t// 内積=0: 90度\n\t\tdot := ax * bx + ay * by\n\t\tif dot == 0 {\n\t\t\tresult[i] = 1\n\t\t}\n\n\t\t// 外積=0: 180度\n\t\tcross := ax * by - ay * bx\n\t\tif cross == 0 {\n\t\t\tresult[i] = 2\n\t\t}\n\t}\n\n\tfor _, v := range result {\n\t\tfmt.Println(v)\n\t}\n}\n\n"
  },
  {
    "language": "OCaml",
    "code": "let to_array s = Str.split (Str.regexp_string \" \") s\n                 |> List.map float_of_string\n                 |> Array.of_list;;\nlet is_parallel x1 y1 x2 y2 x3 y3 x4 y4 =\n  let prod =(x2 -. x1) *. (y4 -. y3) -. (x4 -. x3) *. (y2 -. y1) in\n  if prod < (1e-10) && prod > -.(1e-10) then true else false;;\n\nlet is_orthogonal x1 y1 x2 y2 x3 y3 x4 y4 =\n  let inner_prod = (x2 -. x1) *. (x4 -. x3) +. (y2 -. y1) *. (y4 -. y3) in\n  if inner_prod < (1e-10) && inner_prod > -.(1e-10) then true else false\n\nlet rec read = function\n    0 -> ()\n  | i -> let l = read_line () |> to_array in\n         let (x1,y1,x2,y2,x3,y3,x4,y4) = (l.(0),l.(1),l.(2),l.(3),l.(4),l.(5),l.(6),l.(7))\n         in\n         let () = if is_parallel x1 y1 x2 y2 x3 y3 x4 y4 then print_endline \"2\"\n                  else if is_orthogonal x1 y1 x2 y2 x3 y3 x4 y4 then print_endline \"1\"\n                  else print_endline \"0\"\n         in read (i-1);;\nlet () = read_int () |> read;;"
  },
  {
    "language": "OCaml",
    "code": "module Geometry = struct\n\n  type t = { x : float; y : float }\n\n  let make x y = { x; y }\n\n  let eps = 1e-10\n\n  let equal_p a b = abs_float (a.x -. b.x) < eps && abs_float (a.y -. b.y) < eps\n\n  let sum a b = { x = a.x +. b.x; y = a.y +. b.y }\n\n  let diff a b = { x = a.x -. b.x; y = a.y -. b.y }\n\n  let multi p k = { x = p.x *. k; y = p.y *. k }\n\n  let div p k = { x = p.x /. k; y = p.y /. k }\n\n  let norm p = p.x *. p.x +. p.y *. p.y\n\n  let abs p = norm p |> sqrt\n\n  let dot a b = a.x *. b.x +. a.y *. b.y\n\n  let cross a b = a.x *. b.y -. a.y *. b.x\n\n  let project p1 p2 p =\n    let base = diff p2 p1 in\n    dot (diff p p1) base /. norm base |> multi base |> sum p1\n\n  let reflect p1 p2 p = multi (diff (project p1 p2 p) p) 2. |> sum p\n\n  let orthogonal_p (p0, p1) (p2, p3) = dot (diff p0 p1) (diff p2 p3) |> abs_float < eps\n\n  let parallel_p (p0, p1) (p2, p3) = cross (diff p0 p1) (diff p2 p3) |> abs_float < eps\n\n  let ccw p0 p1 p2 =\n    let a = diff p1 p0 in\n    let b = diff p2 p0 in\n    let c = cross a b in\n    if c > eps then 1 (* COUNTER_CLOCKWISE *)\n    else if c < (-. eps) then (-1) (* CLOCKWISE *)\n    else if dot a b < (-. eps) then 2 (* ONLINE_BACK *)\n    else if norm a < norm b then (-2) (* ONLINE_FRONT *)\n    else 0 (* ON_SEGMENT *)\n\n  let intersect_p (p0, p1) (p2, p3) =\n    ccw p0 p1 p2 * ccw p0 p1 p3 <= 0 && ccw p2 p3 p0 * ccw p2 p3 p1 <= 0\n\n  let cross_point (p0, p1) (p2, p3) =\n    let base = diff p3 p2 in\n    let d1 = diff p0 p2 |> cross base |> abs_float in\n    let d2 = diff p1 p2 |> cross base |> abs_float in\n    d1 /. (d1 +. d2) |> multi (diff p1 p0) |> sum p0\n\n  let distance s t =\n    if intersect_p s t then 0.\n    else\n      let p2p a b = diff a b |> abs in\n      let l2p (p0, p1) p =\n        cross (diff p1 p0) (diff p p0) /. p2p p1 p0 |> abs_float in\n      let s2p s p =\n        let (p0, p1) = s in\n        if dot (diff p1 p0) (diff p p0) < 0. then p2p p p0\n        else if dot (diff p0 p1) (diff p p1) < 0. then p2p p p1\n        else l2p s p in\n      let (p0, p1) = s in\n      let (p2, p3) = t in\n      min (min (s2p s p2) (s2p s p3)) (min (s2p t p0) (s2p t p1))\n\nend\n\nmodule IO = struct\n\n  (* @since 4.04.0 *)\n  let split_on_char sep s =\n    let open String in\n    let r = ref [] in\n    let j = ref (length s) in\n    for i = length s - 1 downto 0 do\n      if get s i = sep then begin\n        r := sub s (i + 1) (!j - i - 1) :: !r;\n        j := i\n      end\n    done;\n    sub s 0 !j :: !r\n\n  let read_fs () = read_line () |> split_on_char ' ' |> List.map float_of_string\n\nend\n\nopen Point\n\nlet () =\n  let q = read_int () in\n  for _ = 0 to q - 1 do\n    match IO.read_fs () with\n    | x0 :: y0 :: x1 :: y1 :: x2 :: y2 :: x3 :: y3 :: _ ->\n      let s = (make x0 y0, make x1 y1) in\n      let t = (make x2 y2, make x3 y3) in\n      print_endline\n        (if parallel_p s t then \"2\" else if orthogonal_p s t then \"1\" else \"0\")\n    | _ -> assert false\n  done"
  },
  {
    "language": "OCaml",
    "code": "module Point = struct\n\n  type t = { x : float; y : float }\n\n  let make x y = { x; y }\n\n  let equal_p a b = abs_float (a.x -. b.x) < 1e-10 && abs_float (a.y -. b.y) < 1e-10\n\n  let sum a b = { x = a.x +. b.x; y = a.y +. b.y }\n\n  let diff a b = { x = a.x -. b.x; y = a.y -. b.y }\n\n  let multi p k = { x = p.x *. k; y = p.y *. k }\n\n  let div p k = { x = p.x /. k; y = p.y /. k }\n\n  let norm p = p.x *. p.x +. p.y *. p.y\n\n  let abs p = norm p |> sqrt\n\n  let dot a b = a.x *. b.x +. a.y *. b.y\n\n  let cross a b = a.x *. b.y -. a.y *. b.x\n\n  let project p1 p2 p =\n    let base = diff p2 p1 in\n    dot (diff p p1) base /. norm base\n    |> multi base\n    |> sum p1\n\n  let reflect p1 p2 p =\n    multi (diff (project p1 p2 p) p) 2.\n    |> sum p\n\n  let parallel_p (p0, p1) (p2, p3) =\n    let a = diff p0 p1 in\n    let b = diff p2 p3 in\n    cross a b = 0.\n\n  let orthogonal_p (p0, p1) (p2, p3) =\n    let a = diff p0 p1 in\n    let b = diff p2 p3 in\n    dot a b = 0.\n\nend\n\nmodule IO = struct\n\n  (* @since 4.04.0 *)\n  let split_on_char sep s =\n    let open String in\n    let r = ref [] in\n    let j = ref (length s) in\n    for i = length s - 1 downto 0 do\n      if get s i = sep then begin\n        r := sub s (i + 1) (!j - i - 1) :: !r;\n        j := i\n      end\n    done;\n    sub s 0 !j :: !r\n\n  let read_fs () = read_line () |> split_on_char ' ' |> List.map float_of_string\n\nend\n\nopen Point\n\nlet () =\n  let q = read_int () in\n  for _ = 0 to q - 1 do\n    match IO.read_fs () with\n    | x0 :: y0 :: x1 :: y1 :: x2 :: y2 :: x3 :: y3 :: _ ->\n      let s = (make x0 y0, make x1 y1) in\n      let t = (make x2 y2, make x3 y3) in\n      print_endline\n        (if parallel_p s t then \"2\" else if orthogonal_p s t then \"1\" else \"0\")\n    | _ -> assert false\n  done"
  },
  {
    "language": "OCaml",
    "code": "module Geometry = struct\n\n  type t = { x : float; y : float }\n\n  let make x y = { x; y }\n\n  let eps = 1e-10\n\n  let equal_p a b = abs_float (a.x -. b.x) < eps && abs_float (a.y -. b.y) < eps\n\n  let sum a b = { x = a.x +. b.x; y = a.y +. b.y }\n\n  let diff a b = { x = a.x -. b.x; y = a.y -. b.y }\n\n  let multi p k = { x = p.x *. k; y = p.y *. k }\n\n  let div p k = { x = p.x /. k; y = p.y /. k }\n\n  let norm p = p.x *. p.x +. p.y *. p.y\n\n  let abs p = norm p |> sqrt\n\n  let dot a b = a.x *. b.x +. a.y *. b.y\n\n  let cross a b = a.x *. b.y -. a.y *. b.x\n\n  let project p1 p2 p =\n    let base = diff p2 p1 in\n    dot (diff p p1) base /. norm base |> multi base |> sum p1\n\n  let reflect p1 p2 p = multi (diff (project p1 p2 p) p) 2. |> sum p\n\n  let orthogonal_p (p0, p1) (p2, p3) = dot (diff p0 p1) (diff p2 p3) |> abs_float < eps\n\n  let parallel_p (p0, p1) (p2, p3) = cross (diff p0 p1) (diff p2 p3) |> abs_float < eps\n\n  let ccw p0 p1 p2 =\n    let a = diff p1 p0 in\n    let b = diff p2 p0 in\n    let c = cross a b in\n    if c > eps then 1 (* COUNTER_CLOCKWISE *)\n    else if c < (-. eps) then (-1) (* CLOCKWISE *)\n    else if dot a b < (-. eps) then 2 (* ONLINE_BACK *)\n    else if norm a < norm b then (-2) (* ONLINE_FRONT *)\n    else 0 (* ON_SEGMENT *)\n\n  let intersect_p (p0, p1) (p2, p3) =\n    ccw p0 p1 p2 * ccw p0 p1 p3 <= 0 && ccw p2 p3 p0 * ccw p2 p3 p1 <= 0\n\n  let cross_point (p0, p1) (p2, p3) =\n    let base = diff p3 p2 in\n    let d1 = diff p0 p2 |> cross base |> abs_float in\n    let d2 = diff p1 p2 |> cross base |> abs_float in\n    d1 /. (d1 +. d2) |> multi (diff p1 p0) |> sum p0\n\n  let distance s t =\n    if intersect_p s t then 0.\n    else\n      let p2p a b = diff a b |> abs in\n      let l2p (p0, p1) p =\n        cross (diff p1 p0) (diff p p0) /. p2p p1 p0 |> abs_float in\n      let s2p s p =\n        let (p0, p1) = s in\n        if dot (diff p1 p0) (diff p p0) < 0. then p2p p p0\n        else if dot (diff p0 p1) (diff p p1) < 0. then p2p p p1\n        else l2p s p in\n      let (p0, p1) = s in\n      let (p2, p3) = t in\n      min (min (s2p s p2) (s2p s p3)) (min (s2p t p0) (s2p t p1))\n\nend\n\nmodule IO = struct\n\n  (* @since 4.04.0 *)\n  let split_on_char sep s =\n    let open String in\n    let r = ref [] in\n    let j = ref (length s) in\n    for i = length s - 1 downto 0 do\n      if get s i = sep then begin\n        r := sub s (i + 1) (!j - i - 1) :: !r;\n        j := i\n      end\n    done;\n    sub s 0 !j :: !r\n\n  let read_fs () = read_line () |> split_on_char ' ' |> List.map float_of_string\n\nend\n\nopen Geometry\n\nlet () =\n  let q = read_int () in\n  for _ = 0 to q - 1 do\n    match IO.read_fs () with\n    | x0 :: y0 :: x1 :: y1 :: x2 :: y2 :: x3 :: y3 :: _ ->\n      let s = (make x0 y0, make x1 y1) in\n      let t = (make x2 y2, make x3 y3) in\n      print_endline\n        (if parallel_p s t then \"2\" else if orthogonal_p s t then \"1\" else \"0\")\n    | _ -> assert false\n  done"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.math;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nint readint() { return readln.chomp.to!int; }\nint[] readints() { return readln.split.map!(to!int).array; }\n\nstring calc(Vec2 a, Vec2 b, Vec2 c) {\n    auto ab = b - a;\n    auto ac = c - a;\n\n    auto d = ab.cross(ac);\n    if (d > 0) return \"COUNTER_CLOCKWISE\";\n    if (d < 0) return \"CLOCKWISE\";\n\n    // |ab||ac|cos(pi) で cos(pi) = -1 なので負なら逆向き\n    if (ab.dot(ac) < 0) return \"ONLINE_BACK\";\n\n    if (ab.magSq() >= ac.magSq()) return \"ON_SEGMENT\";\n    return \"ONLINE_FRONT\";\n}\n\nvoid main() {\n    auto xs = readints();\n    auto a = Vec2(xs[0], xs[1]);\n    auto b = Vec2(xs[2], xs[3]);\n\n    int q = readint();\n    for (int i = 0; i < q; i++) {\n        auto xy = readints();\n        auto c = Vec2(xy[0], xy[1]);\n        auto ans = calc(a, b, c);\n        writeln(ans);\n    }\n}\n\nstruct Vec2 {\n    immutable double x;\n    immutable double y;\n\n    this(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    Vec2 opNeg() { return Vec2(-this.x, -this.y); }\n    Vec2 opAdd(Vec2 other) { return Vec2(this.x + other.x, this.y + other.y); }\n    Vec2 opSub(Vec2 other) { return Vec2(this.x - other.x, this.y - other.y); }\n    Vec2 opMul(double d) { return Vec2(this.x * d, this.y * d); }\n\n    double dot(Vec2 other) { return this.x * other.x + this.y * other.y; }\n    double cross(Vec2 other) { return this.x * other.y - other.x * this.y; }\n    double mag() { return sqrt(magSq()); }\n    double magSq() { return this.x * this.x + this.y * this.y; }\n\n    Vec2 normalized() {\n        auto m = mag();\n        if (m != 0 && m != 1)\n            return Vec2(this.x / m, this.y / m);\n        return this;\n    }\n\n    static double distance(Vec2 a, Vec2 b) {\n        return (a - b).mag();\n    }\n}\n\n"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.math;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nint readint() { return readln.chomp.to!int; }\nint[] readints() { return readln.split.map!(to!int).array; }\n\nbool isParallel(Vec2 a, Vec2 b, Vec2 c, Vec2 d) {\n    auto ab = b - a;\n    auto cd = d - c;\n    return ab.cross(cd) == 0;\n}\n\nbool isOrthogonal(Vec2 a, Vec2 b, Vec2 c, Vec2 d) {\n    auto ab = b - a;\n    auto cd = d - c;\n    return ab.dot(cd) == 0;\n}\n\nint calc(Vec2 a, Vec2 b, Vec2 c, Vec2 d) {\n    if (isParallel(a, b, c, d)) return 2;\n    if (isOrthogonal(a, b, c, d)) return 1;\n    return 0;\n}\n\nvoid main() {\n    int n = readint();\n    for (int i = 0; i < n; i++) {\n        auto ps = readints();\n        auto a = Vec2(ps[0], ps[1]);\n        auto b = Vec2(ps[2], ps[3]);\n        auto c = Vec2(ps[4], ps[5]);\n        auto d = Vec2(ps[6], ps[7]);\n\n        writeln(calc(a, b, c, d));\n    }\n}\n\nstruct Vec2 {\n    immutable double x;\n    immutable double y;\n\n    this(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    Vec2 opNeg() { return Vec2(-this.x, -this.y); }\n    Vec2 opAdd(Vec2 other) { return Vec2(this.x + other.x, this.y + other.y); }\n    Vec2 opSub(Vec2 other) { return Vec2(this.x - other.x, this.y - other.y); }\n    Vec2 opMul(double d) { return Vec2(this.x * d, this.y * d); }\n\n    double dot(Vec2 other) { return this.x * other.x + this.y * other.y; }\n    double cross(Vec2 other) { return this.x * other.y - other.x * this.y; }\n    double mag() { return sqrt(magSq()); }\n    double magSq() { return this.x * this.x + this.y * this.y; }\n\n    Vec2 normalized() {\n        auto m = mag();\n        if (m != 0 && m != 1)\n            return Vec2(this.x / m, this.y / m);\n        return this;\n    }\n\n    static double distance(Vec2 a, Vec2 b) {\n        return (a - b).mag();\n    }\n}\n\n"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.math;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nint readint() {\n    return readln.chomp.to!int;\n}\n\nint[] readints() {\n    return readln.split.map!(to!int).array;\n}\n\nbool isParallel(Vec2 a, Vec2 b, Vec2 c, Vec2 d) {\n    auto ab = b - a;\n    auto cd = d - c;\n    return ab.cross(cd) == 0;\n}\n\nbool isOrthogonal(Vec2 a, Vec2 b, Vec2 c, Vec2 d) {\n    auto ab = b - a;\n    auto cd = d - c;\n    return ab.dot(cd) == 0;\n}\n\nint calc(Vec2 a, Vec2 b, Vec2 c, Vec2 d) {\n    if (isParallel(a, b, c, d))\n        return 2;\n    if (isOrthogonal(a, b, c, d))\n        return 1;\n\n    return 0;\n}\n\nvoid main() {\n    int n = readint();\n    for (int i = 0; i < n; i++) {\n        auto ps = readints();\n        auto a = Vec2(ps[0], ps[1]);\n        auto b = Vec2(ps[2], ps[3]);\n        auto c = Vec2(ps[4], ps[5]);\n        auto d = Vec2(ps[6], ps[7]);\n\n        writeln(calc(a, b, c, d));\n    }\n}\n\nstruct Vec2 {\n    immutable double x;\n    immutable double y;\n\n    this(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    Vec2 opAdd(Vec2 other) {\n        return Vec2(this.x + other.x, this.y + other.y);\n    }\n\n    Vec2 opSub(Vec2 other) {\n        return Vec2(this.x - other.x, this.y - other.y);\n    }\n\n    Vec2 opMul(double d) {\n        return Vec2(this.x * d, this.y * d);\n    }\n\n    double dot(Vec2 other) {\n        return this.x * other.x + this.y * other.y;\n    }\n\n    double cross(Vec2 other) {\n        return this.x * other.y - other.x * this.y;\n    }\n\n    double mag() {\n        return sqrt(magSq());\n    }\n\n    double magSq() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    Vec2 normalize() {\n        auto m = mag();\n        if (m != 0 && m != 1)\n            return Vec2(this.x / m, this.y / m);\n        return this;\n    }\n\n    static double distance(Vec2 a, Vec2 b) {\n        return (a - b).mag();\n    }\n}"
  },
  {
    "language": "Python",
    "code": "class Point(object):\n    __slots__ = [\"x\", \"y\"]\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n\nclass Vector(object):\n    __slots__ = [\"p1\", \"p2\", \"x\", \"y\"]\n\n    def __init__(self, p1: Point, p2: Point):\n        self.p1 = p1\n        self.p2 = p2\n        self.x = p2.x - p1.x\n        self.y = p2.y - p1.y\n\n    def dot(self, other: \"Vector\"):\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: \"Vector\"):\n        return self.x * other.y - self.y * other.x\n\n\nif __name__ == \"__main__\":\n    import sys\n    answer = []\n    append = answer.append\n    input()\n    for x1, y1, x2, y2, x3, y3, x4, y4 in (map(int, l.split()) for l in sys.stdin):\n        vector1 = Vector(Point(x1, y1), Point(x2, y2))\n        vector2 = Vector(Point(x3, y3), Point(x4, y4))\n        if vector1.dot(vector2) == 0:\n            append(1)\n        elif vector1.cross(vector2) == 0:\n            append(2)\n        else:\n            append(0)\n\n    print(*answer, sep=\"\\n\")\n"
  },
  {
    "language": "Python",
    "code": "from itertools import starmap\n\nq = int(input())\nwhile q:\n    q -= 1\n    p0, p1, p2, p3 = starmap(complex, zip(*[map(int, input().split())] * 2))\n    prod = (p1 - p0).conjugate() * (p3 - p2)\n    print(2 if abs(prod.imag) < 1e-6 else 1 if abs(prod.real) < 1e-6 else 0)"
  },
  {
    "language": "Python",
    "code": "import math\n\nEPS = 1e-10\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, point):\n        # + 演算子での挙動を指定\n        return Point(self.x+point.x, self.y+point.y)\n\n    def __sub__(self, point):\n        # - 演算子での挙動を指定\n        return Point(self.x-point.x, self.y-point.y)\n\n    def __mul__(self, a):\n        # * 演算子での挙動を指定\n        return Point(a*self.x, a*self.y)\n\n    def __truediv__(self, a):\n        # / 演算子での挙動を指定\n        return Point(self.x/a, self.y/a)\n\n    def __abs__(self):\n        # abs関数での挙動を指定\n        return math.sqrt(self.norm())\n\n    def norm(self):\n        return self.x**2+self.y**2\n\n    def __eq__(self, point):\n        # == 演算子での挙動を指定\n        return abs(self.x-point.x) < EPS and abs(self.y-point.y) <EPS\n\ndef dot(a, b):\n    return a.x*b.x+a.y*b.y\n\ndef cross(a, b):\n    return a.x*b.y - a.y*b.x\n\ndef isOrthogonal(a, b):\n    return dot(a, b) == 0\n\ndef isParallel(a, b):\n    return cross(a, b) == 0\n\nif __name__ == '__main__':\n    from sys import stdin\n    input = stdin.readline\n\n    q = int(input())\n\n    for _ in range(q):\n        x0, y0, x1, y1, x2, y2, x3, y3 = map(int, input().split())\n        a = Point(x0, y0)-Point(x1, y1)\n        b = Point(x2, y2)-Point(x3, y3)\n        if isOrthogonal(a, b):\n            print(1)\n        elif isParallel(a, b):\n            print(2)\n        else:\n            print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "class Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Line():\n    def __init__(self, x1, y1, x2, y2):\n        self.p1 = Point(x1, y1)\n        self.p2 = Point(x2, y2)\n\n    def get_slope(self):\n        if self.p1.x == self.p2.x:\n            return float('inf')\n        return (self.p2.y - self.p1.y)/(self.p2.x - self.p1.x)\n\nq = int(input())\nfor i in range(q):\n    x0, y0, x1, y1, x2, y2, x3, y3 = list(map(int, input().split(' ')))\n    line1, line2 = Line(x0, y0, x1, y1), Line(x2, y2, x3, y3)\n    a1, a2 = line1.get_slope(), line2.get_slope()\n    if a1 == a2: # 平行\n        print('2')\n    elif a1*a2 == -1.0:\n        print('1')\n    elif (a1 == float('inf') and a2 == 0) or (a1 == 0 and a2 == float('inf')):\n        print('1')\n    else:\n        print('0')\n"
  },
  {
    "language": "Python",
    "code": "n = int(input())\n\ndef dot(a,b):\n    return a[0] * b[0] + a[1] * b[1]\ndef s(a):\n    return a[0]**2 + a[1]**2\n\nfor i in range(n):\n    points = [int(j) for j in input().split()]\n    p0 = points[:2]\n    p1 = points[2:4]\n    p2 = points[4:6]\n    p3 = points[6:8]\n    a = [p0[0]-p1[0],p0[1]-p1[1]]\n    b = [p2[0]-p3[0],p2[1]-p3[1]]\n    c = dot(a,b)**2/(s(a) * s(b))\n    if c == 0: print(1)\n    elif c == 1: print(2)\n    else: print(0)"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport collections\nimport math\n\n\nclass Vector2(collections.namedtuple(\"Vector2\", [\"x\",  \"y\"])):\n\n    def __add__(self, other):\n        return Vector2(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector2(self.x - other.x, self.y - other.y)\n\n    def __neg__(self):\n        return Vector2(-self.x, -self.y)\n\n    def __pos__(self):\n        return Vector2(+self.x, +self.y)\n\n    def __abs__(self):  # norm\n        return math.sqrt(float(self.x * self.x + self.y * self.y))\n\n    def dot(self, other):  # dot product\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):  # cross product\n        return self.x * other.y - self.y * other.x\n\n\nif __name__ == '__main__':\n\n    n = int(input())\n    \n    for _ in range(n):\n        l = list(map(int, input().split()))\n        s1 = Vector2(l[2], l[3]) - Vector2(l[0], l[1])\n        s2 = Vector2(l[6], l[7]) - Vector2(l[4], l[5])\n\n        if abs(s1.dot(s2)) == 0:\n            print(1)\n        elif abs(s1.cross(s2)) == 0:\n            print(2)\n        else:\n            print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "q = int(raw_input())\nfor _ in xrange(q):\n  x0,y0,x1,y1,x2,y2,x3,y3 = map(float, raw_input().split())\n  ax = x1-x0\n  ay = y1-y0\n  bx = x3-x2\n  by = y3-y2\n  inner = ax*bx+ay*by\n  outer = ax*by-ay*bx\n  if inner == 0:\n    print 1\n  elif outer == 0:\n    print 2\n  else:\n    print 0"
  },
  {
    "language": "Python",
    "code": "from collections import defaultdict,deque\nimport sys,heapq,bisect,math,itertools,string,queue\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\ndef inp(): return int(input())\ndef inpl(): return list(map(int, input().split()))\ndef inpl_str(): return list(input().split())\n\n###########################\n#          幾何\n###########################\ndef sgn(a):\n    if a < -eps: return -1\n    if a >  eps: return  1\n    return 0\n\nclass Point:\n    def __init__(self,x,y):\n        self.x = x\n        self.y = y\n        pass\n\n    def tolist(self):\n        return [self.x,self.y]\n\n    def __add__(self,p):\n        return Point(self.x+p.x, self.y+p.y)\n    def __iadd__(self,p):\n        return self + p\n\n    def __sub__(self,p):\n        return Point(self.x - p.x, self.y - p.y)\n    def __isub__(self,p):\n        return self - p\n\n    def __truediv__(self,n):\n        return Point(self.x/n, self.y/n)\n    def __itruediv__(self,n):\n        return self / n\n\n    def __mul__(self,n):\n        return Point(self.x*n, self.y*n)\n    def __imul__(self,n):\n        return self * n\n\n    def __lt__(self,other):\n        tmp = sgn(self.x - other.x)\n        if tmp != 0:\n            return tmp < 0\n        else:\n            return sgn(self.y - other.y) < 0\n\n    def __eq__(self,other):\n        return sgn(self.x - other.x) == 0 and sgn(self.y - other.y) == 0\n\n    def abs(self):\n        return math.sqrt(self.x**2+self.y**2)\n\n    def dot(self,p):\n        return self.x * p.x + self.y*p.y\n\n    def det(self,p):\n        return self.x * p.y - self.y*p.x\n\n    def arg(self,p):\n        return math.atan2(y,x)\n\n# 点の進行方向 a -> b -> c\ndef iSP(a,b,c):\n    tmp = sgn((b-a).det(c-a))\n    if tmp > 0:   return 1   # 左に曲がる場合\n    elif tmp < 0: return -1  # 右に曲がる場合\n    else: # まっすぐ\n        if sgn((b-a).dot(c-a)) < 0: return -2 # c-a-b の順\n        if sgn((a-b).dot(c-b)) < 0: return  2 # a-b-c の順\n        return 0 # a-c-bの順\n\n# ab,cd の直線交差\ndef isToleranceLine(a,b,c,d):\n    if sgn((b-a).det(c-d)) != 0: return 1 # 交差する\n    else:\n        if sgn((b-a).det(c-a)) != 0: return 0 # 平行\n        else: return -1 # 同一直線\n\n# ab,cd の線分交差 重複，端点での交差もTrue\ndef isToleranceSegline(a,b,c,d):\n    return sgn(iSP(a,b,c)*iSP(a,b,d))<=0 and sgn(iSP(c,d,a)*iSP(c,d,b)) <= 0\n\n# 直線ab と 直線cd の交点 (存在する前提)\ndef Intersection(a,b,c,d):\n    tmp1 = (b-a)*((c-a).det(d-c))\n    tmp2 = (b-a).det(d-c)\n    return a+(tmp1/tmp2)\n\n# 直線ab と 点c の距離\ndef DistanceLineToPoint(a,b,c):\n    return abs(((c-a).det(b-a))/((b-a).abs()))\n\n# 線分ab と 点c の距離\ndef DistanceSeglineToPoint(a,b,c):\n    if sgn((b-a).dot(c-a)) < 0: # <cab が鈍角\n        return (c-a).abs()\n    if sgn((a-b).dot(c-b)) < 0: # <cba が鈍角\n        return (c-b).abs()\n    return DistanceLineToPoint(a,b,c)\n\n# 直線ab への 点c からの垂線の足\ndef Vfoot(a,b,c):\n    d = c + Point((b-a).y,-(b-a).x)\n    return Intersection(a,b,c,d)\n\n# 多角形の面積\ndef PolygonArea(Plist):\n    Plist = ConvexHull(Plist)\n    L = len(Plist)\n    S = 0\n    for i in range(L):\n        tmpS = (Plist[i-1].det(Plist[i]))/2\n        S += tmpS\n    return S\n\n# 多角形の重心\ndef PolygonG(Plist):\n    Plist = ConvexHull(Plist)\n    L = len(Plist)\n    S = 0\n    G = Point(0,0)\n    for i in range(L):\n        tmpS = (Plist[i-1].det(Plist[i]))/2\n        S += tmpS\n        G += (Plist[i-1]+Plist[i])/3*tmpS\n    return G/S\n\n# 凸法\ndef ConvexHull(Plist):\n    Plist.sort()\n    L = len(Plist)\n    qu = deque([])\n    quL = 0\n    for p in Plist:\n        while quL >= 2 and iSP(qu[quL-2],qu[quL-1],p) == 1:\n            qu.pop()\n            quL -= 1\n        qu.append(p)\n        quL += 1\n\n    qd = deque([])\n    qdL = 0\n    for p in Plist:\n        while qdL >= 2 and iSP(qd[qdL-2],qd[qdL-1],p) == -1:\n            qd.pop()\n            qdL -= 1\n        qd.append(p)\n        qdL += 1\n\n    qd.pop()\n    qu.popleft()\n    hidari = list(qd) + list(reversed(qu)) # 左端開始，左回りPlist\n    return hidari\n\nN = int(input())\nfor _ in range(N):\n    x0,y0,x1,y1,x2,y2,x3,y3 = inpl()\n    p0 = Point(x0,y0)\n    p1 = Point(x1,y1)\n    p2 = Point(x2,y2)\n    p3 = Point(x3,y3)\n    if isToleranceLine(p0,p1,p2,p3) <= 0:\n        print(2)\n    else:\n        p3 = p2 + Point((p3-p2).y,-(p3-p2).x)\n        if isToleranceLine(p0,p1,p2,p3) <= 0:\n            print(1)\n        else:\n            print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "# coding=utf-8\n\n\ndef line_slope(line_from, line_to):\n    try:\n        slope = (line_to[1] - line_from[1])/(line_to[0] - line_from[1])\n    except ZeroDivisionError:\n        slope = \"未定義\"\n    return slope\n\n\ndef is_parallel(l_from1, l_to1, l_from2, l_to2):\n    slope1 = line_slope(l_from1, l_to1)\n    slope2 = line_slope(l_from2, l_to2)\n    if slope1 == slope2:\n        return 1\n    return 0\n\n\ndef is_orthogonal(l_from1, l_to1, l_from2, l_to2):\n    slope1 = line_slope(l_from1, l_to1)\n    slope2 = line_slope(l_from2, l_to2)\n    if slope1 == \"未定義\":\n        if slope2 == 0:\n            return 1\n        return 0\n    if slope2 == \"未定義\":\n        if slope1 == 0:\n            return 1\n        return 0\n    if slope1 * slope2 == -1:\n        return 1\n    return 0\n\n\nif __name__ == '__main__':\n    Q = int(input())\n\n    for i in range(Q):\n        all_list = list(map(int, input().split()))\n        p0_list = all_list[:2]\n        p1_list = all_list[2:4]\n        p2_list = all_list[4:6]\n        p3_list = all_list[6:]\n\n        if is_parallel(p0_list, p1_list, p2_list, p3_list):\n            print(\"2\")\n        elif is_orthogonal(p0_list, p1_list, p2_list, p3_list):\n            print(\"1\")\n        else:\n            print(\"0\")\n\n"
  },
  {
    "language": "Python",
    "code": "#  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=jp\n#   Parallel/Orthogonal : python3\n#  2018.12.15 yonezawa\n\n#from collections import deque\nimport sys\ninput = sys.stdin.readline\n#import cProfile\nfrom math import cos,sin,radians,sqrt\n\ndef main():\n\n    for i in range(int(input())):\n        (x1,y1,x2,y2,x3,y3,x4,y4) = map(int,input().split())\n\n        inner = (x2-x1) * (x4-x3) + (y2-y1) * (y4-y3)\n        cross = (x2-x1) * (y4-y3) - (x4-x3) * (y2-y1)               \n        if inner == 0:\n            print(\"1\")\n        elif cross == 0:\n            print (\"2\")\n        else:\n            print(\"0\")\n\n    \nif __name__ == '__main__':\n    main()\n    #pr = cProfile.Profile()\n    #pr.runcall(main)\n    #pr.print_stats()\n"
  },
  {
    "language": "Python",
    "code": "n = int(input())\nfor i in range(n):\n    x0,y0,x1,y1,x2,y2,x3,y3 = map(float,input().split())\n    if x1 - x0 == 0:\n        if x3 -x2 == 0:\n            print('2')\n        elif y3 - y2 == 0:\n            print('1')\n        else:\n            print('0')\n    elif x3 - x2 == 0:\n        if y1 - y0 == 0:\n            print('1')\n        else:\n            print('0')\n    else:\n        a1 = (y1-y0)/(x1-x0)\n        a2 = (y3-y2)/(x3-x2)\n        if a1 * a2 == -1:\n            print('1')\n        elif a1 == a2 or a1 == -a2:\n            print('2')\n        else:\n            print('0')"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\n\nclass Vector:\n    def __init__(self, x=None, y=None):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k):\n        return Vector(self.x * k, self.y * k)\n\n    def __gt__(self, other):\n        return self.x > other.x and self.y > other.y\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    # usually cross operation return Vector but it returns scalor\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\nclass Segment:\n    def __init__(self, p1=Vector(0, 0), p2=Vector(1, 1)):\n        self.p1 = p1\n        self.p2 = p2\n\ndef is_orthogonal(*args, **kwargs):\n    # input two vectors with the startpoint (0, 0)\n    if len(args) == 2:\n        v1, v2 = args\n        return v1.dot(v2) == 0\n    # input two vectors with the startpoint (a1, b1) and endpoint (a2, b2)\n    elif len(args) == 4:\n        a1, a2, b1, b2 = args\n        return is_orthogonal(a1 - a2, b1 - b2)\n    # input two segments\n    elif len(kwargs) == 2:\n        v1 = kwargs['s1'].p1 - kwargs['s1'].p2\n        v2 = kwargs['s2'].p1 - kwargs['s2'].p2\n        return v1.dot(v2) == 0\n    else:\n        raise ArgsError\n\ndef is_parallel(*args, **kwargs):\n    # input two vectors with the startpoint (0, 0)\n    if len(args) == 2:\n        v1, v2 = args\n        return v1.cross(v2) == 0\n    # input two vectors with the startpoint (a1, b1) and endpoint (a2, b2)\n    elif len(args) == 4:\n        a1, a2, b1, b2 = args\n        return is_parallel(a1 - a2, b1 - b2)\n    # input two segments\n    elif len(kwargs) == 2:\n        v1 = kwargs['s1'].p1 - kwargs['s1'].p2\n        v2 = kwargs['s2'].p1 - kwargs['s2'].p2\n        return v1.cross(v2) == 0\n    else:\n        raise ArgsError\n\nfrom sys import stdin\n\ndef read_and_print_results(n):\n    for _ in range(n):\n        line = stdin.readline().strip().split()\n        p0 = Vector(int(line[0]), int(line[1]))\n        p1 = Vector(int(line[2]), int(line[3]))\n        p2 = Vector(int(line[4]), int(line[5]))\n        p3 = Vector(int(line[6]), int(line[7]))\n        s1 = Segment(p0, p1)\n        s2 = Segment(p2, p3)\n        if is_parallel(s1=s1, s2=s2):\n            print('2')\n        elif is_orthogonal(s1=s1, s2=s2):\n            print('1')\n        else:\n            print('0')\n\nn = int(input())\nread_and_print_results(n)\n"
  },
  {
    "language": "Python",
    "code": "for i in range(int(input())):\n    px0,py0,px1,py1,px2,py2,px3,py3 = map(lambda x:int(x),input().split(\" \"))  \n    print(1 if (px1-px0)*(px3-px2) == -(py1-py0)*(py3-py2) else(2 if (px1-px0)*(py3-py2) == (py1-py0)*(px3-px2) else 0))\n"
  },
  {
    "language": "Python",
    "code": "q=int(input())\n\nfor _ in [0]*q:\n    x0,y0,x1,y1,x2,y2,x3,y3=map(int,input().split())\n    a1=x1-x0\n    a2=x3-x2\n    b1=y1-y0\n    b2=y3-y2\n    parallel=a1*b2-a2*b1\n    orthogonal=a1*a2+b1*b2\n    if parallel==0:\n        print(\"2\")\n    elif orthogonal==0:\n        print(\"1\")\n    else:\n        print(\"0\")\n"
  },
  {
    "language": "Python",
    "code": "# coding=utf-8\n\n\ndef vector_product(vect1, vect2):\n    return [el1 * el2 for el1, el2 in zip(vect1, vect2)]\n\n\ndef inner_product(vect1, vect2):\n    return sum(vector_product(vect1, vect2))\n\n\ndef cross_product(vect1, vect2):\n    return vect1[0]*vect2[1] - vect1[1]*vect2[0]\n\n\ndef vector_minus(vect1, vect2):\n    return [el1 - el2 for el1, el2 in zip(vect1, vect2)]\n\n\ndef line_slope(line_from, line_to):\n    try:\n        slope = (line_to[1] - line_from[1])/(line_to[0] - line_from[0])\n    except ZeroDivisionError:\n        slope = \"未定義\"\n    return slope\n\n\n\"\"\"\ndef is_parallel(l_from1, l_to1, l_from2, l_to2):\n    slope1 = line_slope(l_from1, l_to1)\n    slope2 = line_slope(l_from2, l_to2)\n    if slope1 == slope2:\n        return 1\n    return 0\n\"\"\"\n\n\ndef is_parallel(l_from1, l_to1, l_from2, l_to2):\n    line1 = vector_minus(l_to1, l_from1)\n    line2 = vector_minus(l_to2, l_from2)\n    if cross_product(line1, line2) == 0:\n        return 1\n    return 0\n\n\ndef is_orthogonal(l_from1, l_to1, l_from2, l_to2):\n    line1 = vector_minus(l_to1, l_from1)\n    line2 = vector_minus(l_to2, l_from2)\n    if inner_product(line1, line2) == 0:\n        return 1\n    return 0\n\n\nif __name__ == '__main__':\n    Q = int(input())\n\n    for i in range(Q):\n        all_list = list(map(int, input().split()))\n        p0_list = all_list[:2]\n        p1_list = all_list[2:4]\n        p2_list = all_list[4:6]\n        p3_list = all_list[6:]\n\n        if is_parallel(p0_list, p1_list, p2_list, p3_list):\n            print(\"2\")\n        elif is_orthogonal(p0_list, p1_list, p2_list, p3_list):\n            print(\"1\")\n        else:\n            print(\"0\")\n\n"
  },
  {
    "language": "Python",
    "code": "import math,sys\ntry: sys.stdin = open('in.in','r')\nexcept: pass\n\nclass Point:\n\tdef __init__(self,x,y):\n\t\tself.x = x\n\t\tself.y = y\n\tdef __add__(self,p):\n\t\treturn Point(self.x+p.x,self.y+p.y)\n\tdef __sub__(self,p):\n\t\treturn Point(self.x-p.x,self.y-p.y)\n\tdef __mul__(self,p):\n\t\treturn Point(self.x*p,self.y*p)\n\ndef Dot(a,b):\n\treturn a.x*b.x + a.y*b.y\ndef Cross(a,b):\n\treturn a.x*b.y - a.y*b.x\ndef Dis(a,b):\n\treturn math.sqrt( (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y) )\ndef Dis2(a,b):\n\treturn (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y)\n\nq = int(input())\nfor i in range(q):\n\n\tx0,y0,x1,y1,x2,y2,x3,y3 = map(int,input().split())\n\tp0 = Point(x0,y0)\n\tp1 = Point(x1,y1)\n\tp2 = Point(x2,y2)\n\tp3 = Point(x3,y3)\n\n\tl1 = p0-p1\n\tl2 = p3-p2\n\n\tif Dot(l1,l2) == 0:\n\t\tprint('1')\n\telif Cross(l1,l2) == 0:\n\t\tprint('2')\n\telse:\n\t\tprint('0')\n\n"
  },
  {
    "language": "Python",
    "code": "def judge(x):\n    x0,y0,x1,y1,x2,y2,x3,y3 = map(float,x.split())\n    if x1 - x0 == 0:\n        if x3 -x2 == 0:\n            print('2')\n        elif y3 - y2 == 0:\n            print('1')\n        else:\n            print('0')\n    elif x3 - x2 == 0:\n        if y1 - y0 == 0:\n            print('1')\n        else:\n            print('0')\n    elif y1 - y0 == 0:\n        if y3 - y2 == 0:\n            print('2')\n        elif x3 - x2 == 0:\n            print('1')\n        else:\n            print('0')\n    elif y3 - y2 == 0:\n        if x1 - x0 == 0:\n            print('1')\n        else:\n            print('0')\n    else:\n        a1 = (y1-y0)/(x1-x0)\n        a2 = (y3-y2)/(x3-x2)\n        if a1 * a2 == -1:\n            print('1')\n        elif a1 == a2 or a1 == -a2:\n            print('2')\n        else:\n            print('0')\nn = int(input())            \nq = ['']*n\nfor i in range(n):\n    q[i] = input()\nfor i in range(n):        \n    judge(q[i])"
  },
  {
    "language": "Python",
    "code": "import math\n\nEPS = 1e-10\n\ndef equals(a, b):\n    return abs(a - b) < EPS\n\n\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __add__(self, p):\n        return Point(self.x + p.x, self.y + p.y)\n\n    def __sub__(self, p):\n        return Point(self.x - p.x, self.y - p.y)\n\n    def __mul__(self, a):\n        return Point(self.x * a, self.y * a)\n\n    def __rmul__(self, a):\n        return self * a\n\n    def __truediv__(self, a):\n        return Point(self.x / a, self.y / a)\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\n    def __lt__(self, p):\n        if self.x != p.x:\n            return self. x < p.x\n        else:\n            return self.y < p.y\n\n    def __eq__(self, p):\n        return equals(self.x, p.x) and equals(self.y, p.y)\n\n\nclass Segment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n\ndef dot(a, b):\n    return a.x * b.x + a.y * b.y\n\n\ndef cross(a, b):\n    return a.x * b.y - a.y * b.x\n\n\ndef isOrthogonal(s1, s2):\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0)\n\n\ndef isParallel(s1, s2):\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0)\n\n\nif __name__ == '__main__':\n    q = int(input())\n    ans = []\n    for i in range(q):\n        x0, y0, x1, y1, x2, y2, x3, y3 = [int(v) for v in input().split()]\n        s1 = Segment(Point(x0, y0), Point(x1, y1))\n        s2 = Segment(Point(x2, y2), Point(x3, y3))\n        if isParallel(s1, s2):\n            ans.append(2)\n        elif isOrthogonal(s1, s2):\n            ans.append(1)\n        else:\n            ans.append(0)\n\n    for v in ans:\n        print(v)\n"
  },
  {
    "language": "Python",
    "code": "class Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Line():\n    def __init__(self, x1, y1, x2, y2):\n        self.p1 = Point(x1, y1)\n        self.p2 = Point(x2, y2)\n\n    def get_slope(self):\n        if self.p1.x == self.p2.x:\n            return float('inf')\n        return (self.p2.y - self.p1.y)/(self.p2.x - self.p1.x)\n\nq = int(input())\nfor i in range(q):\n    x0, y0, x1, y1, x2, y2, x3, y3 = list(map(int, input().split(' ')))\n    line1, line2 = Line(x0, y0, x1, y1), Line(x2, y2, x3, y3)\n    a1, a2 = line1.get_slope(), line2.get_slope()\n    if a1 == a2: # 平行\n        print('2')\n    elif round(a1*a2, 8) == -1.0:\n        print('1')\n    elif (a1 == float('inf') and a2 == 0) or (a1 == 0 and a2 == float('inf')):\n        print('1')\n    else:\n        print('0')\n"
  },
  {
    "language": "Python",
    "code": "def dot(a,b):return a[0]*b[0] + a[1]*b[1]\ndef cross(a,b):return a[0]*b[1] - a[1]*b[0]\n\nq = int(input())\nfor i in range(q):\n    x0,y0,x1,y1,x2,y2,x3,y3 = [int(i) for i in input().split()]\n    a = [x1-x0,y1-y0]\n    b = [x3-x2,y3-y2]\n    if dot(a,b) == 0 : print(1)\n    elif cross(a,b) == 0 : print(2)\n    else : print(0)"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\n\nsys.setrecursionlimit(10 ** 9)\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\nINF=float('inf')\n\n# ベクトルの内積\ndef dot(a, b):\n    x1,y1=a\n    x2,y2=b\n    return x1*x2+y1*y2\n\n# ベクトルの外積\ndef cross(a, b):\n    x1,y1=a\n    x2,y2=b\n    return x1*y2-y1*x2\n\nQ=INT()\nfor _ in range(Q):\n    x1,y1,x2,y2,x3,y3,x4,y4=MAP()\n    # 2直線のベクトルを出しておく\n    # (今回は方向だけ分かればよくて向きはどっちでもいいので、x1-x2かx2-x1かはどっちでもいい。\n    # ただしxとyでどっちにするかは揃える。)\n    v1=(x1-x2, y1-y2)\n    v2=(x3-x4, y3-y4)\n    # 直交判定(内積が0)\n    if dot(v1, v2)==0:\n        print(1)\n    # 平行判定(外積が0)\n    elif cross(v1, v2)==0:\n        print(2)\n    else:\n        print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "class Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Line():\n    def __init__(self, x1, y1, x2, y2):\n        self.p1 = Point(x1, y1)\n        self.p2 = Point(x2, y2)\n\n    def get_slope(self):\n        if self.p1.x == self.p2.x:\n            return float('inf')\n        return (self.p2.y - self.p1.y)/(self.p2.x - self.p1.x)\n\nq = int(input())\nfor i in range(q):\n    x0, y0, x1, y1, x2, y2, x3, y3 = list(map(int, input().split(' ')))\n    line1, line2 = Line(x0, y0, x1, y1), Line(x2, y2, x3, y3)\n    a1, a2 = round(line1.get_slope(), 8), round(line2.get_slope(), 8)\n    if a1 == a2: # 平行\n        print('2')\n    elif a1*a2 == -1:\n        print('1')\n    elif (a1 == float('inf') and a2 == 0) or (a1 == 0 and a2 == float('inf')):\n        print('1')\n    else:\n        print('0')\n"
  },
  {
    "language": "Python",
    "code": "def para(ax,ay,bx,by):\n    return True if ax*by-bx*ay==0 else False\n\n\ndef otr(ax,ay,bx,by):\n    return True if ax*bx+ay*by==0 else False\n\n\nn=int(input())\nfor i in range(n):\n    x0,y0,x1,y1,x2,y2,x3,y3=map(int,input().split())\n    x1 -=x0\n    y1 -=y0\n    x3 -=x2\n    y3 -=y2\n    if para(x1,y1,x3,y3):print(2)\n    elif otr(x1,y1,x3,y3):print(1)\n    else:print(0)\n"
  },
  {
    "language": "Python",
    "code": "n = int(input())\nfor i in range(n):\n    x0,y0,x1,y1,x2,y2,x3,y3 = map(float,input().split())\n    if x1 - x0 == 0:\n        if x3 -x2 == 0:\n            print('2')\n        elif y3 - y2 == 0:\n            print('1')\n        else:\n            print('0')\n    elif x3 - x2 == 0:\n        if y1 - y0 == 0:\n            print('1')\n        else:\n            print('0')\n    elif y1 - y0 == 0:\n        if y3 - y2 == 0:\n            print('2')\n        elif x3 - x2 == 0:\n            print('1')\n        else:\n            print('0')\n    elif y3 - y2 == 0:\n        if x1 - x0 == 0:\n            print('1')\n        else:\n            print('0')\n    else:\n        a1 = (y1-y0)/(x1-x0)\n        a2 = (y3-y2)/(x3-x2)\n        if a1 * a2 == -1:\n            print('1')\n        elif a1 == a2 or a1 == -a2:\n            print('2')\n        else:\n            print('0')"
  },
  {
    "language": "Python",
    "code": "# coding: utf-8\n# Here your code !\n\nq = int(raw_input())\nfor i in xrange(q):\n    xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3 = map(float,raw_input().split())\n    if xp1 - xp0 == 0:\n        if xp3 - xp2 == 0:\n            print 2\n        elif yp3 - yp2 == 0:\n            print 1\n        else:\n            print 0\n    elif xp3 - xp2 == 0:\n        if xp1 - xp0 == 0:\n            print 2\n        elif yp1 - yp0 == 0:\n            print 1\n        else:\n            print 0\n    \n    else:\n        s1 = (yp1 - yp0, xp1 - xp0)\n        s2 = (yp3 - yp2, xp3 - xp2)\n        if s1[0]/s1[1] == s2[0]/s2[1]:\n            print 2\n        elif s1[0]*s2[0] + s1[1]*s2[1] == 0:\n            print 1\n        else:\n            print 0"
  },
  {
    "language": "Python",
    "code": "n = int(input())\nfor i in range(n):\n    x0,y0,x1,y1,x2,y2,x3,y3 = map(float,input().split())\n    if x1 - x0 == 0:\n        if x3 -x2 == 0:\n            print('2')\n        elif y3 - y2 == 0:\n            print('1')\n        else:\n            print('0')\n    elif x3 - x2 == 0:\n        if y1 - y0 == 0:\n            print('1')\n        else:\n            print('0')\n    else:\n        a1 = (y1-y0)/(x1-x0)\n        a2 = (y3-y2)/(x3-x2)\n        if a1 * a2 == 1:\n            print('1')\n        elif a1 == a2 or a1 == -a2:\n            print('2')\n        else:\n            print('0')"
  },
  {
    "language": "Python",
    "code": "q = int(input())\nfor _ in range(q):\n    x0, y0, x1, y1, x2, y2, x3, y3 = map(int, input().split())\n    dot = (x1 - x0)*(x3 - x2) + (y1 - y0)*(y3 - y2)\n    if dot == 0:\n        print(1)\n    elif ((x1 - x0)**2 + (y1 - y0)**2)*((x3 - x2)**2 + (y3 - y2)**2) == dot**2:\n        print(2)\n    else:\n        print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "# coding: utf-8\n# Here your code !\nq = int(raw_input())\nfor i in range(q):\n    l = map(float,raw_input().split())\n    if l[2] - l[0] == 0:\n        if l[6] - l[4] == 0:\n            print 2\n        elif l[7]-l[5] == 0:\n            print 1\n        else:\n            print 0\n    elif l[6] - l[4] == 0:\n        if l[2] - l[0] == 0:\n            print 2\n        elif l[3] - l[1] == 0:\n            print 1\n        else:\n            print 0\n    else:\n        s1 = (l[3] - l[1], l[2] - l[0])\n        s2 = (l[7] - l[5], l[6] - l[4])\n        if s1[0]/s1[1] == s2[0]/s2[1]:\n            print 2\n        elif s1[0]*s2[0] + s1[1]*s2[1] == 0:\n            print 1\n        else:\n            print 0"
  },
  {
    "language": "Python",
    "code": "# coding: utf-8\n# Here your code !\n\nq = int(raw_input())\nfor i in range(q):\n    xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3 = map(float,raw_input().split())\n    if xp1 - xp0 == 0:\n        if xp3 - xp2 == 0:\n            print 2\n        elif yp3 - yp2 == 0:\n            print 1\n        else:\n            print 0\n    elif xp3 - xp2 == 0:\n        if xp1 - xp0 == 0:\n            print 2\n        elif yp1 - yp0 == 0:\n            print 1\n        else:\n            print 0\n    \n    else:\n        s1 = (yp1 - yp0, xp1 - xp0)\n        s2 = (yp3 - yp2, xp3 - xp2)\n        if s1[0]/s1[1] == s2[0]/s2[1]:\n            print 2\n        elif s1[0]*s2[0] + s1[1]*s2[1] == 0:\n            print 1\n        else:\n            print 0"
  },
  {
    "language": "Python",
    "code": "import cmath\nimport math\nimport os\nimport sys\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nPI = cmath.pi\nTAU = cmath.pi * 2\nEPS = 1e-8\n\n\nclass Point:\n    \"\"\"\n    2次元空間上の点\n    \"\"\"\n\n    # 反時計回り側にある\n    CCW_COUNTER_CLOCKWISE = 1\n    # 時計回り側にある\n    CCW_CLOCKWISE = -1\n    # 線分の後ろにある\n    CCW_ONLINE_BACK = 2\n    # 線分の前にある\n    CCW_ONLINE_FRONT = -2\n    # 線分上にある\n    CCW_ON_SEGMENT = 0\n\n    def __init__(self, c: complex):\n        self.c = c\n\n    @property\n    def x(self):\n        return self.c.real\n\n    @property\n    def y(self):\n        return self.c.imag\n\n    @staticmethod\n    def from_rect(x: float, y: float):\n        return Point(complex(x, y))\n\n    @staticmethod\n    def from_polar(r: float, phi: float):\n        return Point(cmath.rect(r, phi))\n\n    def __add__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        return Point(self.c + p.c)\n\n    def __iadd__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        self.c += p.c\n        return self\n\n    def __sub__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        return Point(self.c - p.c)\n\n    def __isub__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        self.c -= p.c\n        return self\n\n    def __mul__(self, f: float):\n        return Point(self.c * f)\n\n    def __imul__(self, f: float):\n        self.c *= f\n        return self\n\n    def __truediv__(self, f: float):\n        return Point(self.c / f)\n\n    def __itruediv__(self, f: float):\n        self.c /= f\n        return self\n\n    def __repr__(self):\n        return \"({}, {})\".format(round(self.x, 10), round(self.y, 10))\n\n    def __neg__(self):\n        return Point(-self.c)\n\n    def __eq__(self, p):\n        return abs(self.c - p.c) < EPS\n\n    def __abs__(self):\n        return abs(self.c)\n\n    @staticmethod\n    def ccw(a, b, c):\n        \"\"\"\n        線分 ab に対する c の位置\n        線分上にあるか判定するだけなら on_segment とかのが速い\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\n        :param Point a:\n        :param Point b:\n        :param Point c:\n        \"\"\"\n        b = b - a\n        c = c - a\n        det = b.det(c)\n        if det > EPS:\n            return Point.CCW_COUNTER_CLOCKWISE\n        if det < -EPS:\n            return Point.CCW_CLOCKWISE\n        if b.dot(c) < -EPS:\n            return Point.CCW_ONLINE_BACK\n        if c.norm() - b.norm() > EPS:\n            return Point.CCW_ONLINE_FRONT\n        return Point.CCW_ON_SEGMENT\n\n    def dot(self, p):\n        \"\"\"\n        内積\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return self.x * p.x + self.y * p.y\n\n    def det(self, p):\n        \"\"\"\n        外積\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return self.x * p.y - self.y * p.x\n\n    def dist(self, p):\n        \"\"\"\n        距離\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return abs(self.c - p.c)\n\n    def norm(self):\n        \"\"\"\n        原点からの距離\n        :rtype: float\n        \"\"\"\n        return abs(self.c)\n\n    def phase(self):\n        \"\"\"\n        原点からの角度\n        :rtype: float\n        \"\"\"\n        return cmath.phase(self.c)\n\n    def angle(self, p, q):\n        \"\"\"\n        p に向いてる状態から q まで反時計回りに回転するときの角度\n        -pi <= ret <= pi\n        :param Point p:\n        :param Point q:\n        :rtype: float\n        \"\"\"\n        return (cmath.phase(q.c - self.c) - cmath.phase(p.c - self.c) + PI) % TAU - PI\n\n    def area(self, p, q):\n        \"\"\"\n        p, q となす三角形の面積\n        :param Point p:\n        :param Point q:\n        :rtype: float\n        \"\"\"\n        return abs((p - self).det(q - self) / 2)\n\n    def projection_point(self, p, q, allow_outer=False):\n        \"\"\"\n        線分 pq を通る直線上に垂線をおろしたときの足の座標\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=ja\n        :param Point p:\n        :param Point q:\n        :param allow_outer: 答えが線分の間になくても OK\n        :rtype: Point|None\n        \"\"\"\n        diff_q = q - p\n        # 答えの p からの距離\n        r = (self - p).dot(diff_q) / abs(diff_q)\n        # 線分の角度\n        phase = diff_q.phase()\n\n        ret = Point.from_polar(r, phase) + p\n        if allow_outer or (p - ret).dot(q - ret) < EPS:\n            return ret\n        return None\n\n    def reflection_point(self, p, q):\n        \"\"\"\n        直線 pq を挟んで反対にある点\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=ja\n        :param Point p:\n        :param Point q:\n        :rtype: Point\n        \"\"\"\n        # 距離\n        r = abs(self - p)\n        # pq と p-self の角度\n        angle = p.angle(q, self)\n        # 直線を挟んで角度を反対にする\n        angle = (q - p).phase() - angle\n        return Point.from_polar(r, angle) + p\n\n    def on_segment(self, p, q, allow_side=True):\n        \"\"\"\n        点が線分 pq の上に乗っているか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\n        :param Point p:\n        :param Point q:\n        :param allow_side: 端っこでギリギリ触れているのを許容するか\n        :rtype: bool\n        \"\"\"\n        if not allow_side and (self == p or self == q):\n            return False\n        # 外積がゼロ: 面積がゼロ == 一直線\n        # 内積がマイナス: p - self - q の順に並んでる\n        return abs((p - self).det(q - self)) < EPS and (p - self).dot(q - self) < EPS\n\n\nclass Line:\n    \"\"\"\n    2次元空間上の直線\n    \"\"\"\n\n    def __init__(self, a: float, b: float, c: float):\n        \"\"\"\n        直線 ax + by + c = 0\n        \"\"\"\n        self.a = a\n        self.b = b\n        self.c = c\n\n    @staticmethod\n    def from_gradient(grad: float, intercept: float):\n        \"\"\"\n        直線 y = ax + b\n        :param grad: 傾き\n        :param intercept: 切片\n        :return:\n        \"\"\"\n        return Line(grad, -1, intercept)\n\n    @staticmethod\n    def from_segment(p1, p2):\n        \"\"\"\n        :param Point p1:\n        :param Point p2:\n        \"\"\"\n        a = p2.y - p1.y\n        b = p1.x - p2.x\n        c = p2.y * (p2.x - p1.x) - p2.x * (p2.y - p1.y)\n        return Line(a, b, c)\n\n    @property\n    def gradient(self):\n        \"\"\"\n        傾き\n        \"\"\"\n        return INF if self.b == 0 else -self.a / self.b\n\n    @property\n    def intercept(self):\n        \"\"\"\n        切片\n        \"\"\"\n        return INF if self.b == 0 else -self.c / self.b\n\n    def is_parallel_to(self, l):\n        \"\"\"\n        平行かどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n        :param Line l:\n        \"\"\"\n        # 法線ベクトル同士の外積がゼロ\n        return abs(Point.from_rect(self.a, self.b).det(Point.from_rect(l.a, l.b))) < EPS\n\n    def is_orthogonal_to(self, l):\n        \"\"\"\n        直行しているかどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n        :param Line l:\n        \"\"\"\n        # 法線ベクトル同士の内積がゼロ\n        return abs(Point.from_rect(self.a, self.b).dot(Point.from_rect(l.a, l.b))) < EPS\n\n    def intersection_point(self, l):\n        \"\"\"\n        交差する点\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=ja\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=ja\n        FIXME: 誤差が気になる。EPS <= 1e-9 だと CGL_2_B ダメだった。\n        :param Line l:\n        :rtype: Point|None\n        \"\"\"\n        a1, b1, c1 = self.a, self.b, self.c\n        a2, b2, c2 = l.a, l.b, l.c\n        det = a1 * b2 - a2 * b1\n        if abs(det) < EPS:\n            # 並行\n            return None\n        x = (b1 * c2 - b2 * c1) / det\n        y = (a2 * c1 - a1 * c2) / det\n        return Point.from_rect(x, y)\n\n\nclass Segment:\n    \"\"\"\n    2次元空間上の線分\n    \"\"\"\n\n    def __init__(self, p1, p2):\n        \"\"\"\n        :param Point p1:\n        :param Point p2:\n        \"\"\"\n        self.p1 = p1\n        self.p2 = p2\n\n    def norm(self):\n        \"\"\"\n        線分の長さ\n        \"\"\"\n        return abs(self.p1 - self.p2)\n\n    def phase(self):\n        \"\"\"\n        p1 を原点としたときの p2 の角度\n        \"\"\"\n        return cmath.phase(self.p2 - self.p1)\n\n    def is_parallel_to(self, s):\n        \"\"\"\n        平行かどうか\n        TODO: verify\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n        :param Segment s:\n        :return:\n        \"\"\"\n        # 外積がゼロ\n        return abs((self.p1 - self.p2).det(s.p1 - s.p2)) < EPS\n\n    def is_orthogonal_to(self, s):\n        \"\"\"\n        直行しているかどうか\n        TODO: verify\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\n        :param Segment s:\n        :return:\n        \"\"\"\n        # 内積がゼロ\n        return abs((self.p1 - self.p2).dot(s.p1 - s.p2)) < EPS\n\n    def intersects_with(self, s, allow_side=True):\n        \"\"\"\n        交差するかどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=ja\n        :param Segment s:\n        :param allow_side: 端っこでギリギリ触れているのを許容するか\n        \"\"\"\n        if self.is_parallel_to(s):\n            # 並行なら線分の端点がもう片方の線分の上にあるかどうか\n            return (s.p1.on_segment(self.p1, self.p2, allow_side) or\n                    s.p2.on_segment(self.p1, self.p2, allow_side) or\n                    self.p1.on_segment(s.p1, s.p2, allow_side) or\n                    self.p2.on_segment(s.p1, s.p2, allow_side))\n        else:\n            # 直線同士の交点が線分の上にあるかどうか\n            p = l1.intersection_point(l2)\n            return p.on_segment(self.p1, self.p2, allow_side) and p.on_segment(s.p1, s.p2, allow_side)\n\n    def closest_point(self, p):\n        \"\"\"\n        線分上の、p に最も近い点\n        :param Point p:\n        \"\"\"\n        # p からおろした垂線までの距離\n        d = (p - self.p1).dot(self.p2 - self.p1) / self.norm()\n        # p1 より前\n        if d < EPS:\n            return self.p1\n        # p2 より後\n        if -EPS < d - self.norm():\n            return self.p2\n        # 線分上\n        return Point.from_polar(d, (self.p2 - self.p1).phase()) + self.p1\n\n    def dist(self, p):\n        \"\"\"\n        他の点との最短距離\n        :param Point p:\n        \"\"\"\n        return abs(p - self.closest_point(p))\n\n    def dist_segment(self, s):\n        \"\"\"\n        他の線分との最短距離\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=ja\n        :param Segment s:\n        \"\"\"\n        if self.intersects_with(s):\n            return 0.0\n        return min(\n            self.dist(s.p1),\n            self.dist(s.p2),\n            s.dist(self.p1),\n            s.dist(self.p2),\n        )\n\n    def has_point(self, p, allow_side=True):\n        \"\"\"\n        p が線分上に乗っているかどうか\n        :param Point p:\n        :param allow_side: 端っこでギリギリ触れているのを許容するか\n        \"\"\"\n        return p.on_segment(self.p1, self.p2, allow_side=allow_side)\n\n\nclass Polygon:\n    \"\"\"\n    2次元空間上の多角形\n    \"\"\"\n\n    def __init__(self, points):\n        \"\"\"\n        :param list of Point points:\n        \"\"\"\n        self.points = points\n\n    def iter2(self):\n        \"\"\"\n        隣り合う2点を順に返すイテレータ\n        :rtype: typing.Iterator[(Point, Point)]\n        \"\"\"\n        return zip(self.points, self.points[1:] + self.points[:1])\n\n    def iter3(self):\n        \"\"\"\n        隣り合う3点を順に返すイテレータ\n        :rtype: typing.Iterator[(Point, Point, Point)]\n        \"\"\"\n        return zip(self.points,\n                   self.points[1:] + self.points[:1],\n                   self.points[2:] + self.points[:2])\n\n    def area(self):\n        \"\"\"\n        面積\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A&lang=ja\n        \"\"\"\n        # 外積の和 / 2\n        dets = []\n        for p, q in self.iter2():\n            dets.append(p.det(q))\n        return abs(math.fsum(dets)) / 2\n\n    def is_convex(self, allow_straight=False, allow_collapsed=False):\n        \"\"\"\n        凸多角形かどうか\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B&lang=ja\n        :param allow_straight: 3点がまっすぐ並んでるのを許容するかどうか\n        :param allow_collapsed: 面積がゼロの場合を許容するか\n        \"\"\"\n        ccw = []\n        for a, b, c in self.iter3():\n            ccw.append(Point.ccw(a, b, c))\n        ccw = set(ccw)\n        if len(ccw) == 1:\n            if ccw == {Point.CCW_CLOCKWISE}:\n                return True\n            if ccw == {Point.CCW_COUNTER_CLOCKWISE}:\n                return True\n        if allow_straight and len(ccw) == 2:\n            if ccw == {Point.CCW_ONLINE_FRONT, Point.CCW_CLOCKWISE}:\n                return True\n            if ccw == {Point.CCW_ONLINE_FRONT, Point.CCW_COUNTER_CLOCKWISE}:\n                return True\n        if allow_collapsed and len(ccw) == 3:\n            return ccw == {Point.CCW_ONLINE_FRONT, Point.CCW_ONLINE_BACK, Point.CCW_ON_SEGMENT}\n        return False\n\n    def has_point_on_edge(self, p):\n        \"\"\"\n        指定した点が辺上にあるか\n        :param Point p:\n        :rtype: bool\n        \"\"\"\n        for a, b in self.iter2():\n            if p.on_segment(a, b):\n                return True\n        return False\n\n    def contains(self, p, allow_on_edge=True):\n        \"\"\"\n        指定した点を含むか\n        Winding Number Algorithm\n        https://www.nttpc.co.jp/technology/number_algorithm.html\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C&lang=ja\n        :param Point p:\n        :param bool allow_on_edge: 辺上の点を許容するか\n        \"\"\"\n        angles = []\n        for a, b in self.iter2():\n            if p.on_segment(a, b):\n                return allow_on_edge\n            angles.append(p.angle(a, b))\n        # 一周以上するなら含む\n        return abs(math.fsum(angles)) > EPS\n\n    @staticmethod\n    def convex_hull(points, allow_straight=False):\n        \"\"\"\n        凸包。x が最も小さい点のうち y が最も小さい点から反時計回り。\n        Graham Scan O(N log N)\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A&lang=ja\n        :param list of Point points:\n        :param allow_straight: 3点がまっすぐ並んでるのを許容するかどうか\n        :rtype: list of Point\n        \"\"\"\n        points = points[:]\n        points.sort(key=lambda p: (p.x, p.y))\n\n        # allow_straight なら 0 を許容する\n        det_lower = -EPS if allow_straight else EPS\n\n        sz = 0\n        #: :type: list of (Point|None)\n        ret = [None] * (N * 2)\n        for p in points:\n            while sz > 1 and (ret[sz - 1] - ret[sz - 2]).det(p - ret[sz - 1]) < det_lower:\n                sz -= 1\n            ret[sz] = p\n            sz += 1\n        floor = sz\n        for p in reversed(points[:-1]):\n            while sz > floor and (ret[sz - 1] - ret[sz - 2]).det(p - ret[sz - 1]) < det_lower:\n                sz -= 1\n            ret[sz] = p\n            sz += 1\n        ret = ret[:sz - 1]\n\n        if allow_straight and len(ret) > len(points):\n            # allow_straight かつ全部一直線のときに二重にカウントしちゃう\n            ret = points\n        return ret\n\n    @staticmethod\n    def diameter(points):\n        \"\"\"\n        直径\n        凸包構築 O(N log N) + カリパー法 O(N)\n        Verify: http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_B&lang=ja\n        :param list of Point points:\n        \"\"\"\n        # 反時計回り\n        points = Polygon.convex_hull(points, allow_straight=False)\n        if len(points) == 1:\n            return 0.0\n        if len(points) == 2:\n            return abs(points[0] - points[1])\n\n        # x軸方向に最も遠い点対\n        si = points.index(min(points, key=lambda p: (p.x, p.y)))\n        sj = points.index(max(points, key=lambda p: (p.x, p.y)))\n        n = len(points)\n\n        ret = 0.0\n        # 半周回転\n        i, j = si, sj\n        while i != sj or j != si:\n            ret = max(ret, abs(points[i] - points[j]))\n            ni = (i + 1) % n\n            nj = (j + 1) % n\n            # 2つの辺が並行になる方向にずらす\n            if (points[ni] - points[i]).det(points[nj] - points[j]) > 0:\n                j = nj\n            else:\n                i = ni\n        return ret\n\n\nQ = int(sys.stdin.buffer.readline())\nROWS = [list(map(int, sys.stdin.buffer.readline().split())) for _ in range(Q)]\n\nfor x0, y0, x1, y1, x2, y2, x3, y3 in ROWS:\n    l1 = Segment(Point.from_rect(x0, y0), Point.from_rect(x1, y1))\n    l2 = Segment(Point.from_rect(x2, y2), Point.from_rect(x3, y3))\n    if l1.is_parallel_to(l2):\n        print(2)\n    elif l1.is_orthogonal_to(l2):\n        print(1)\n    else:\n        print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "def judge(x):\n    x0,y0,x1,y1,x2,y2,x3,y3 = map(float,x.split())\n    if x1 - x0 == 0:\n        if x3 -x2 == 0:\n            print('2')\n        elif y3 - y2 == 0:\n            print('1')\n        else:\n            print('0')\n    elif x3 - x2 == 0:\n        if y1 - y0 == 0:\n            print('1')\n        else:\n            print('0')\n    elif y1 - y0 == 0:\n        if y3 - y2 == 0:\n            print('2')\n        elif x3 - x2 == 0:\n            print('1')\n        else:\n            print('0')\n    elif y3 - y2 == 0:\n        if x1 - x0 == 0:\n            print('1')\n        else:\n            print('0')\n    else:\n        a1 = (y1-y0)/(x1-x0)\n        a2 = (y3-y2)/(x3-x2)\n        if a1 * a2 == -1:\n            print('1')\n        elif a1 == a2 or a1 == -a2:\n            print('2')\n        else:\n            print('0')\nn = int(input())            \nq = ['']*n\nfor i in range(n):\n    q[i] = input()\nfor i in range(n):        \n    judge(q[i])"
  },
  {
    "language": "Python",
    "code": "# https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/all/CGL_2_A\n# 内積で判別すれば良い\n\n\nfrom math import sqrt, isclose\n\n\ndef euclid_norm(x, y):\n    return sqrt(pow(x, 2) + pow(y, 2))\n\n\ndef is_parallel(x0, y0, x1, y1, x2, y2, x3, y3):\n    x_v1 = x1 - x0\n    y_v1 = y1 - y0\n    x_v2 = x3 - x2\n    y_v2 = y3 - y2\n    dot = (x_v1 * x_v2 + y_v1 * y_v2) / \\\n        (euclid_norm(x_v1, y_v1) * euclid_norm(x_v2, y_v2))\n    # print(dot)\n    if isclose(dot, 1, rel_tol=1e-10) or isclose(dot, -1, rel_tol=1e-10):\n        return True\n    return False\n\n\ndef is_orhogonal(x0, y0, x1, y1, x2, y2, x3, y3):\n    x_v1 = x1 - x0\n    y_v1 = y1 - y0\n    x_v2 = x3 - x2\n    y_v2 = y3 - y2\n    dot = (x_v1 * x_v2 + y_v1 * y_v2) / \\\n        (euclid_norm(x_v1, y_v1) * euclid_norm(x_v2, y_v2))\n    # print(dot)\n    if isclose(dot, 0, rel_tol=1e-10):\n        return True\n    return False\n\n\n# load data\nN = int(input())\nfor i in range(N):\n    tmp = list(map(int, input().split()))\n    if is_parallel(*tmp):\n        print(2)\n    elif is_orhogonal(*tmp):\n        print(1)\n    else:\n        print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "def dot(vector1,vector2):\n    return vector1[0]*vector2[0]+vector1[1]*vector2[1]\n\nq = int(input())\nfor _ in range(q):\n    x1,y1,x2,y2,x3,y3,x4,y4 = map(int,input().split())\n    vector1 = [x1-x2,y1-y2]\n    vector2 = [x3-x4,y3-y4]\n    \n    if dot(vector1,vector2)==0:\n        print(1)\n    elif dot(vector1,vector2)**2==dot(vector1,vector1)*dot(vector2,vector2):\n        print(2)\n    else:\n        print(0)\n"
  },
  {
    "language": "Python",
    "code": "#内積0の場合直行している\n#外積0の場合平行\ndef main():\n  q = int(input())\n  for i in range(q):\n    print(parallel_orthogonal())\n\ndef parallel_orthogonal():\n  xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3 = map(int, input().split())\n  l1_start = complex(xp0, yp0)\n  l1_end = complex(xp1, yp1)\n  l2_start = complex(xp2, yp2)\n  l2_end = complex(xp3, yp3)\n\n  if 0 == dot(l1_end - l1_start, l2_end - l2_start):\n    return 1\n  if 0 == cross(l1_end - l1_start, l2_end - l2_start):\n    return 2\n  return 0\n\n# p0..p3がそれぞれ座標になっている\n\n#内積\ndef dot(a, b):\n  return a.real * b.real + a.imag * b.imag\n\n#外積\ndef cross(a, b):\n  return a.real * b.imag - a.imag * b.real\n\nmain()\n"
  },
  {
    "language": "Python",
    "code": "n = int(input())\nfor i in range(n):\n    x0,y0,x1,y1,x2,y2,x3,y3 = map(float,input().split())\n    if x1 - x0 == 0:\n        if x3 -x2 == 0:\n            print('2')\n        elif y3 - y2 == 0:\n            print('1')\n        else:\n            print('0')\n    elif x3 - x2 == 0:\n        if y1 - y0 == 0:\n            print('1')\n        else:\n            print('0')\n    elif y1 - y0 == 0:\n        if y3 - y2 == 0:\n            print('2')\n        elif x3 - x2 == 0:\n            print('1')\n        else:\n            print('0')\n    else:\n        a1 = (y1-y0)/(x1-x0)\n        a2 = (y3-y2)/(x3-x2)\n        if a1 * a2 == -1:\n            print('1')\n        elif a1 == a2 or a1 == -a2:\n            print('2')\n        else:\n            print('0')"
  },
  {
    "language": "Python",
    "code": "#! /usr/bin/env python3\n\nfrom typing import List\nfrom math import sqrt\n\nEPS = 1e-10\n\n\ndef float_equal(x: float, y: float) -> bool:\n    return abs(x - y) < EPS\n\n\nclass Point:\n\n    def __init__(self, x: float=0.0, y: float=0.0) -> None:\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Point):\n            return NotImplemented\n        return float_equal(self.x, other.x) and \\\n            float_equal(self.y, other.y)\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: 'Point') -> 'Point':\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k: float) -> 'Point':\n        return Point(self.x * k, self.y * k)\n\n    def __rmul__(self, k: float) -> 'Point':\n        return self * k\n\n    def __truediv__(self, k: float) -> 'Point':\n        return Point(self.x / k, self.y / k)\n\n    def __lt__(self, other: 'Point') -> bool:\n        return self.y < other.y \\\n            if abs(self.x - other.x) < EPS \\\n            else self.x < other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return sqrt(self.norm())\n\n    def dot(self, other: 'Point') -> float:\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: 'Point') -> float:\n        return self.x * other.y - self.y * other.x\n\n    def is_orthogonal(self, other: 'Point') -> bool:\n        return float_equal(self.dot(other), 0.0)\n\n    def is_parallel(self, other: 'Point') -> bool:\n        return float_equal(self.cross(other), 0.0)\n\n\nVector = Point\n\n\nclass Segment:\n\n    def __init__(self, p1: Point = None, p2: Point = None) -> None:\n        self.p1: Point = Point() if p1 is None else p1\n        self.p2: Point = Point() if p2 is None else p2\n\n    def __repr__(self) -> str:\n        return \"Segment({}, {})\".format(self.p1, self.p2)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Segment):\n            return NotImplemented\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def vector(self):\n        return self.p2 - self.p1\n\n    def is_orthogonal(self, other: 'Segment') -> bool:\n        return self.vector().is_orthogonal(other.vector())\n\n    def is_parallel(self, other: 'Segment') -> bool:\n        return self.vector().is_parallel(other.vector())\n\n\nLine = Segment\n\n\nclass Circle:\n\n    def __init__(self, c: Point=None, r: float=0.0) -> None:\n        self.c: Point = Point() if c is None else c\n        self.r: float = r\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Circle):\n            return NotImplemented\n        return self.c == other.c and self.r == other.r\n\n    def __repr__(self) -> str:\n        return \"Circle({}, {})\".format(self.c, self.r)\n\n\ndef classify(s1: Segment, s2: Segment) -> int:\n    if s1.is_parallel(s2):\n        return 2\n    elif s1.is_orthogonal(s2):\n        return 1\n    else:\n        return 0\n\n\ndef main() -> None:\n    q = int(input())\n    for _ in range(q):\n        s1, s2 = Segment(), Segment()\n        s1.p1.x, s1.p1.y, s1.p2.x, s1.p2.y, \\\n            s2.p1.x, s2.p1.y, s2.p2.x, s2.p2.y = \\\n            [int(x) for x in input().split()]\n        print(classify(s1, s2))\n\n\nif __name__ == \"__main__\":\n    main()\n"
  },
  {
    "language": "Python",
    "code": "def dot(a,b):return a[0]*b[0] + a[1]*b[1]\ndef cross(a,b):return a[0]*b[1] - a[1]*b[0]\n\nq = int(input())\nfor i in range(q):\n    x0,y0,x1,y1,x2,y2,x3,y3 = [int(i) for i in input().split()]\n    a = [x1-x0,y1-y0]\n    b = [x3-x2,y3-y2]\n    if dot(a,b) == 0 : print(1)\n    elif cross(a,b) == 0 : print(2)\n    else : print(0)\n    print(a,b,dot(a,b))"
  },
  {
    "language": "Python",
    "code": "import math\n\n\nclass Vector2():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, v):\n        return Vector2(self.x+v.x, self.y+v.y)\n\n    def __sub__(self, v):\n        return Vector2(self.x-v.x, self.y-v.y)\n\n    def __mul__(self, v):\n        return Vector2(self.x*v, self.y*v)\n\n    def __truediv__(self, v):\n        return Vector2(self.x/v, self.y/v)\n\n    def __abs__(self):\n        return math.sqrt(float(self.x*self.x+self.y*self.y))\n\n    def dot(self, v):\n        return self.x*v.x+self.y*v.y\n\n    def cross(self, v):\n        return self.x*v.y-self.y*v.x\n\n    def norm(self):\n        d = abs(self)\n        return Vector2(self.x/d, self.y/d)\n\n\nn = int(input())\nfor i in range(n):\n    x0, y0, x1, y1, x2, y2, x3, y3 = map(int, input().split())\n    v1 = Vector2(x1-x0, y1-y0).norm()\n    v2 = Vector2(x3-x2, y3-y2).norm()\n    d = v1.dot(v2)\n    c = v1.cross(v2)\n    if math.isclose(d, 0.0):\n        print(\"1\")\n    elif math.isclose(c, 0.0):\n        print(\"2\")\n    else:\n        print(\"0\")\n\n"
  },
  {
    "language": "Python",
    "code": "# coding=utf-8\n\n\ndef cross_product(vect1, vect2):\n    return vect1[0]*vect2[1] - vect1[1]*vect2[0]\n\n\ndef vector_minus(vect1, vect2):\n    return [el1 - el2 for el1, el2 in zip(vect1, vect2)]\n\n\ndef line_slope(line_from, line_to):\n    try:\n        slope = (line_to[1] - line_from[1])/(line_to[0] - line_from[0])\n    except ZeroDivisionError:\n        slope = \"未定義\"\n    return slope\n\n\n\"\"\"\ndef is_parallel(l_from1, l_to1, l_from2, l_to2):\n    slope1 = line_slope(l_from1, l_to1)\n    slope2 = line_slope(l_from2, l_to2)\n    if slope1 == slope2:\n        return 1\n    return 0\n\"\"\"\n\n\ndef is_parallel(l_from1, l_to1, l_from2, l_to2):\n    line1 = vector_minus(l_to1, l_from1)\n    line2 = vector_minus(l_to2, l_from2)\n    if cross_product(line1, line2) == 0:\n        return 1\n    return 0\n\n\ndef is_orthogonal(l_from1, l_to1, l_from2, l_to2):\n    slope1 = line_slope(l_from1, l_to1)\n    slope2 = line_slope(l_from2, l_to2)\n    if slope1 == \"未定義\":\n        if slope2 == 0:\n            return 1\n        return 0\n    if slope2 == \"未定義\":\n        if slope1 == 0:\n            return 1\n        return 0\n    if slope1 * slope2 == -1:\n        return 1\n    return 0\n\n\nif __name__ == '__main__':\n    Q = int(input())\n\n    for i in range(Q):\n        all_list = list(map(int, input().split()))\n        p0_list = all_list[:2]\n        p1_list = all_list[2:4]\n        p2_list = all_list[4:6]\n        p3_list = all_list[6:]\n\n        if is_parallel(p0_list, p1_list, p2_list, p3_list):\n            print(\"2\")\n        elif is_orthogonal(p0_list, p1_list, p2_list, p3_list):\n            print(\"1\")\n        else:\n            print(\"0\")\n\n"
  },
  {
    "language": "Python",
    "code": "n = int(input())\n\ndef cross(a, b):\n    return a[0]*b[1]-a[1]*b[0]\n    \ndef dot(a, b):\n    n = len(a)\n    if n != len(b):\n        return None\n    ans = 0\n    for i, j in zip(a, b):\n        ans += i*j\n    return ans\n    \nfor i in range(n):\n    pp = list(map(int, input().split()))\n    a = (pp[2]-pp[0], pp[3]-pp[1])\n    b = (pp[6]-pp[4], pp[7]-pp[5])\n    if cross(a, b) == 0:\n        print(2)\n    elif dot(a, b) == 0:\n        print(1)\n    else:\n        print(0)\n"
  },
  {
    "language": "Python",
    "code": "n = int(input())\n\ndef dot(a,b):\n    return a[0] * b[0] + a[1] * b[1]\n\nfrom math import sqrt\ndef s(a):\n    return a[0]**2 + a[1]**2\nfor i in range(n):\n    points = [int(j) for j in input().split()]\n    p0 = points[:2]\n    p1 = points[2:4]\n    a = [p0[0]-p1[0],p0[1]-p1[1]]\n    p2 = points[4:6]\n    p3 = points[6:8]\n    b = [p2[0]-p3[0],p2[1]-p3[1]]\n    c = dot(a,b)**2/(s(a) * s(b))\n    if c == 0:\n        print(1)\n    elif c == 1:\n        print(2)\n    else:\n        print(0)"
  },
  {
    "language": "Python",
    "code": "for t in xrange(input()):\n    x0, y0, x1, y1, x2, y2, x3, y3 = map(int, raw_input().split())\n    dx0 = x1 - x0\n    dy0 = y1 - y0\n    dx1 = x3 - x2\n    dy1 = y3 - y2\n    ov = dx0*dy1 - dy0*dx1\n    iv = dx0*dx1 + dy0*dy1\n    if iv == 0:\n        print 1\n    elif ov == 0:\n        print 2\n    else:\n        print 0"
  },
  {
    "language": "Python",
    "code": "n = int(input())\n\ndef dot(a,b):\n    return a[0] * b[0] + a[1] * b[1]\n\nfrom math import sqrt\ndef s(a):\n    return sqrt(a[0]**2 + a[1]**2)\n\nfor i in range(n):\n    points = [int(j) for j in input().split()]\n    p0 = points[:2]\n    p1 = points[2:4]\n    a = [p0[0]-p1[0],p0[1]-p1[1]]\n    p2 = points[4:6]\n    p3 = points[6:8]\n    b = [p2[0]-p3[0],p2[1]-p3[1]]\n    c = dot(a,b)/(s(a) * s(b))\n    if c == 0:\n        print(1)\n    elif c == 1:\n        print(2)\n    else:\n        print(0)"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n\nimport sys\nimport math\nimport itertools as it\nfrom collections import deque\n\nsys.setrecursionlimit(10000000)\n\nq = input()\n\nfor loop in range(q):\n    x0, y0, x1, y1, x2, y2, x3, y3 = map(int, raw_input().split())\n    a1, b1 = [x1 - x0, y1 - y0]\n    a2, b2 = [x3 - x2, y3 - y2]\n\n    if a1 * b2 - b1 * a2 == 0:\n        print 2\n    elif a1 * a2 + b1 * b2 == 0:\n        print 1\n    else:\n        print 0\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\n \n \ndef get_line(line_info):\n    for line_pair in line_info:\n        line_axis = tuple(map(int, line_pair))\n        p0, p1, p2, p3 = (x + y * 1j for x, y in zip(line_axis[::2], line_axis[1::2]))\n        # print(p0, p1, p2, p3)\n        if dot(p1 - p0, p3 - p2) == 0:\n            print('1')\n        elif cross(p1 - p0, p3 - p2) == 0:\n            print('2')\n        else:\n            print('0')\n    return line_info\n \n \ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n \n \ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n \n \nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    questions = int(_input[0])\n    lines = map(lambda x: x.split(), _input[1:])\n    ans = get_line(lines)"
  },
  {
    "language": "Python",
    "code": "def dot(a,b):return a[0]*b[0] + a[1]*b[1]\ndef cross(a,b):return a[0]*b[1] - a[1]*b[0]\n\nq = int(input())\nfor i in range(q):\n    x0,y0,x1,y1,x2,y2,x3,y3 = [int(i) for i in input().split()]\n    a = [x1-x0,y1-y0]\n    b = [x3-x2,y3-y1]\n    if dot(a,b) == 0 : print(1)\n    elif cross(a,b) == 0 : print(2)\n    else : print(0)"
  },
  {
    "language": "Python",
    "code": "# coding=utf-8\n\n\ndef line_slope(line_from, line_to):\n    try:\n        slope = (line_to[1] - line_from[1])/(line_to[0] - line_from[0])\n    except ZeroDivisionError:\n        slope = \"未定義\"\n    return slope\n\n\ndef is_parallel(l_from1, l_to1, l_from2, l_to2):\n    slope1 = line_slope(l_from1, l_to1)\n    slope2 = line_slope(l_from2, l_to2)\n    if slope1 == slope2:\n        return 1\n    return 0\n\n\ndef is_orthogonal(l_from1, l_to1, l_from2, l_to2):\n    slope1 = line_slope(l_from1, l_to1)\n    slope2 = line_slope(l_from2, l_to2)\n    if slope1 == \"未定義\":\n        if slope2 == 0:\n            return 1\n        return 0\n    if slope2 == \"未定義\":\n        if slope1 == 0:\n            return 1\n        return 0\n    if slope1 * slope2 == -1:\n        return 1\n    return 0\n\n\nif __name__ == '__main__':\n    Q = int(input())\n\n    for i in range(Q):\n        all_list = list(map(int, input().split()))\n        p0_list = all_list[:2]\n        p1_list = all_list[2:4]\n        p2_list = all_list[4:6]\n        p3_list = all_list[6:]\n\n        if is_parallel(p0_list, p1_list, p2_list, p3_list):\n            print(\"2\")\n        elif is_orthogonal(p0_list, p1_list, p2_list, p3_list):\n            print(\"1\")\n        else:\n            print(\"0\")\n\n"
  },
  {
    "language": "Python",
    "code": "n = int(input())\n\nfor i in range(n):\n    x0, y0, x1, y1, x2, y2, x3, y3 = map(int, input().split())\n    v0 = (x1 - x0, y1 - y0)\n    v1 = (x3 - x2, y3 - y2)\n\n    dot = v0[0] * v1[0] + v0[1] * v1[1]\n    cross = v0[0] * v1[1] - v0[1] * v1[0]\n\n    if dot == 0:\n        print(1)\n    elif cross == 0:\n        print(2)\n    else:\n        print(0)\n"
  },
  {
    "language": "Python",
    "code": "from math import sin, cos, atan2\n\ndef sgn(x, eps=1e-10):\n    if x < -eps: return -1\n    if -eps <= x <= eps: return 0\n    if eps < x: return 1\n\nclass Vector():\n    def __init__(self, x=0.0, y=0.0):\n        self.x = x\n        self.y = y\n\n    def arg(self):\n        return atan2(self.y, self.x)\n\n    def norm(self):\n        return (self.x**2 + self.y**2)**0.5\n\n    def rotate(self, t):\n        nx = self.x * cos(t) - self.y * sin(t)\n        ny = self.x * sin(t) + self.y * cos(t)\n        return Vector(nx, ny)\n\n    def counter(self):\n        nx = -self.x\n        ny = -self.y\n        return Vector(nx, ny)\n\n    def times(self, k):\n        nx = self.x * k\n        ny = self.y * k\n        return Vector(nx, ny)\n\n    def unit(self):\n        norm = self.norm()\n        nx = self.x / norm\n        ny = self.y / norm\n        return Vector(nx, ny)\n\n    def normal(self):\n        norm = self.norm()\n        nx = -self.y / norm\n        ny = self.x / norm\n        return Vector(nx, ny)\n\n    def add(self, other): #Vector, Vector -> Vector\n        nx = self.x + other.x\n        ny = self.y + other.y\n        return Vector(nx, ny)\n\n    def sub(self, other):\n        nx = self.x - other.x\n        ny = self.y - other.y\n        return Vector(nx, ny)\n\n    def dot(self, other): #Vector, Vector -> int\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other): #Vector, Vector -> int\n        return self.x * other.y - self.y * other.x\n\n    def __str__(self):\n        return '{:.9f}'.format(self.x) + ' ' + '{:.9f}'.format(self.y)\n\nclass Line():\n    def __init__(self, bgn=Vector(), end=Vector()):\n        self.bgn = bgn\n        self.end = end\n\n    def build(self, a, b, c): #ax + by == 1\n        assert sgn(a) != 0 or sgn(b) != 0\n        if sgn(b) == 0:\n            self.bgn = Vector(-c / a, 0.0)\n            self.end = Vector(-c / a, 1.0)\n        else:\n            self.v = Vector(0, -c / b)\n            self.u = Vector(1.0, -(a + b) / b)\n\n    def vec(self):\n        return self.end.sub(self.bgn)\n\n    def projection(self, point):\n        v = self.vec()\n        u = point.sub(self.bgn)\n        k = v.dot(u) / v.norm()\n        h = v.unit().times(k)\n        return self.bgn.add(h)\n\n    def refrection(self, point):\n        proj = self.projection(point)\n        return proj.sub(point).times(2).add(point)\n\n    def is_orthogonal(self, other):\n        v = self.vec()\n        u = other.vec()\n        if sgn(v.dot(u)) == 0:\n            return True\n        else:\n            return False\n\n    def is_parallel(self, other):\n        v = self.vec()\n        u = other.vec()\n        if sgn(v.cross(u)) == 0:\n            return True\n        else:\n            return False\n\nq = int(input())\nfor _ in range(q):\n    xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3 = map(int, input().split())\n    p0 = Vector(xp0, yp0)\n    p1 = Vector(xp1, yp1)\n    p2 = Vector(xp2, yp2)\n    p3 = Vector(xp3, yp3)\n    s1 = Line(p0, p1)\n    s2 = Line(p2, p3)\n    if s1.is_parallel(s2):\n        print(2)\n    elif s1.is_orthogonal(s2):\n        print(1)\n    else:\n        print(0)\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport pprint\n\n#fd = os.open('CGL_2_A.txt', os.O_RDONLY)\n#os.dup2(fd, sys.stdin.fileno())\n\ndef judge(lst):\n    x0, y0, x1, y1, x2, y2, x3, y3 = lst\n    v0 = (x1 - x0, y1 - y0)\n    v1 = (x3 - x2, y3 - y2)\n\n    dot = v0[0] * v1[0] + v0[1] * v1[1]\n    cross = v0[0] * v1[1] - v0[1] * v1[0]\n\n    if dot == 0:\n        print(1)\n    elif cross == 0:\n        print(2)\n    else:\n        print(0)\n\n\nN = int(input())\nfor i in range(N):\n    lst = list(map(int, input().split()))\n    judge(lst)"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n3\n0 0 3 0 0 2 3 2\n0 0 3 0 1 1 1 4\n0 0 3 0 1 1 2 2\n\noutput:\n2\n1\n0\n\"\"\"\n\nimport sys\n\n\ndef get_line(line_info):\n    for line_pair in line_info:\n        line_axis = tuple(map(int, line_pair))\n        p0, p1, p2, p3 = (x + y * 1j for x, y in zip(line_axis[::2], line_axis[1::2]))\n        # print(p0, p1, p2, p3)\n        if dot(p1 - p0, p3 - p2) == 0:\n            print('1')\n        elif cross(p1 - p0, p3 - p2) == 0:\n            print('2')\n        else:\n            print('0')\n    return line_info\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    questions = int(_input[0])\n    lines = map(lambda x: x.split(), _input[1:])\n    ans = get_line(lines)"
  },
  {
    "language": "Python",
    "code": "n = int(input())\ndef judge():\n    x0,y0,x1,y1,x2,y2,x3,y3 = map(float,input().split())\n    if x1 - x0 == 0:\n        if x3 -x2 == 0:\n            print('2')\n        elif y3 - y2 == 0:\n            print('1')\n        else:\n            print('0')\n    elif x3 - x2 == 0:\n        if y1 - y0 == 0:\n            print('1')\n        else:\n            print('0')\n    elif y1 - y0 == 0:\n        if y3 - y2 == 0:\n            print('2')\n        elif x3 - x2 == 0:\n            print('1')\n        else:\n            print('0')\n    elif y3 - y2 == 0:\n        if x1 - x0 == 0:\n            print('1')\n        else:\n            print('0')\n    else:\n        a1 = (y1-y0)/(x1-x0)\n        a2 = (y3-y2)/(x3-x2)\n        if a1 * a2 == -1:\n            print('1')\n        elif a1 == a2 or a1 == -a2:\n            print('2')\n        else:\n            print('0')\n\nfor i in range(n):\n    judge()"
  },
  {
    "language": "Python",
    "code": "n = int(input())\nfor i in range(n):\n    x0,y0,x1,y1,x2,y2,x3,y3 = map(float,input().split())\n    if x1 - x0 == 0:\n        if x3 -x2 == 0:\n            print('2')\n        elif y3 - y2 == 0:\n            print('1')\n        else:\n            print('0')\n    elif x3 - x2 == 0:\n        if y1 - y0 == 0:\n            print('1')\n        else:\n            print('0')\n    elif y1 - y0 == 0:\n        if y3 - y2 == 0:\n            print('2')\n        elif x3 - x2 == 0:\n            print('1')\n        else:\n            print('0')\n    elif y3 - y2 == 0:\n        elif x1 - x0 == 0:\n            print('1')\n        else:\n            print('0')\n    else:\n        a1 = (y1-y0)/(x1-x0)\n        a2 = (y3-y2)/(x3-x2)\n        if a1 * a2 == -1:\n            print('1')\n        elif a1 == a2 or a1 == -a2:\n            print('2')\n        else:\n            print('0')"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python3\n\nimport enum\n\n\nEPS = 1e-10\n\n\nclass LinesRelation(enum.Enum):\n    other = 0\n    orthogonal = 1\n    parallel = 2\n\n\ndef inner_product(v1, v2):\n    return v1.real * v2.real + v1.imag * v2.imag\n\n\ndef outer_product(v1, v2):\n    return v1.real * v2.imag - v1.imag * v2.real\n\n\ndef judge_lines_relation(l1_start, l1_end, l2_start, l2_end):\n    v1 = l1_end - l1_start\n    v2 = l2_end - l2_start\n    if abs(outer_product(v1, v2)) < EPS:\n        return LinesRelation.parallel\n    elif abs(inner_product(v1, v2)) < EPS:\n        return LinesRelation.orthogonal\n    else:\n        return LinesRelation.other\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3 = map(int, input().split())\n        l1_start = complex(xp0, yp0)\n        l1_end = complex(xp1, yp1)\n        l2_start = complex(xp2, yp2)\n        l2_end = complex(xp3, yp3)\n        print(judge_lines_relation(l1_start, l1_end, l2_start, l2_end).value)\n\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "language": "Python",
    "code": "import math\n\n\nclass Point:\n    EPS = 1 << 10\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Point(self.x+other.x, self.y+other.y)\n\n    def __sub__(self, other):\n        return Point(self.x-other.x, self.y-other.y)\n\n    def __mul__(self, other):\n        return Point(self.x*other.x, self.y*other.y)\n\n    def __floordiv__(self, other):\n        return Point(self.x/other.x, self.y/other.y)\n\n    def __abs__(self):\n        return math.sqrt(self.norm())\n\n    def norm(self):\n        return self.x**2 + self.y**2\n\n    def __eq__(self, other):\n        EPS = self.__class__.EPS\n        return abs(self.x-other.x) < EPS and abs(self.x-other.x) < EPS\n\n\nclass Vector(Point):\n    def __init__(self, x, y):\n        super().__init__(x, y)\n\n    def dot(self, other):\n        return self.x*other.x + self.y*other.y\n\n    def cross(self, other):\n        return self.x*other.y - self.y*other.x\n\n    def isOrthogonal(self, a, b):\n        return a.dot(b) == 0.0\n\n    def isParallel(self, a, b):\n        return a.cross(b) == 0.0\n\n    def __add__(self, other):\n        return Vector(self.x+other.x, self.y+other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x-other.x, self.y-other.y)\n\n    def __mul__(self, other):\n        return Vector(self.x*other.x, self.y*other.y)\n\n    def __floordiv__(self, other):\n        return Vector(self.x/other.x, self.y/other.y)\n\n\nclass Segment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n    def isOrthogonal(s1, s2):\n        return (s1.p2-s1.p1).dot(s2.p2-s2.p1) == 0.0\n\n    def isParallel(s1, s2):\n        return (s1.p2-s1.p1).cross(s2.p2-s2.p1) == 0.0\n\n\nclass Line(Segment):\n    pass\n\n\nclass Circle:\n    def __init__(self, c, r):\n        self.c = c\n        self.r = r\n\n\nclass Polygon:\n    def __init__(self, *points):\n        self.points = points\n\n\nn = int(input())\nfor i in range(n):\n    q = list(map(int, input().split()))\n    s = []\n    for j in range(2):\n        p0 = Vector(*q[j*4:j*4+2])\n        p1 = Vector(*q[j*4+2:j*4+4])\n        s.append(Segment(p0, p1))\n    if Segment.isOrthogonal(*s):\n        print(1)\n    elif Segment.isParallel(*s):\n        print(2)\n    else:\n        print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "from math import pi, cos, sin, atan2\nEPS = 10**(-9)\n\ndef eq(value1, value2):\n    return abs(value1-value2) <= EPS\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.arg = atan2(y, x) # -PI ~ PI\n    \n    def __str__(self):\n        return \"{0:.8f} {1:.8f}\".format(self.x, self.y)\n    \n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n    \n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n    \n    def __mul__(self, scal):\n        return Point(self.x*scal, self.y*scal)\n    \n    def __truediv__(self, scal):\n        return Point(self.x/scal, self.y/scal)\n    \n    def __eq__(self, other):\n        return eq(self.x, other.x) and eq(self.y, other.y)\n\n    # 原点からの距離\n    def __abs__(self):\n        return (self.x**2+self.y**2)**0.5\n    \n# 原点を中心にrad角だけ回転した点\ndef Rotation(vec: Point, rad):\n    return Point(vec.x*cos(rad)-vec.y*sin(rad), vec.x*sin(rad)+vec.y*cos(rad))\n\n\nclass Circle():\n    def __init__(self, p, r):\n        self.p = p\n        self.r = r\n\n\nclass Line():\n    # 点a, bを通る\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.arg = (a-b).arg % pi\n    \n    def __str__(self):\n        return \"[({0}, {1}) - ({2}, {3})]\".format(self.a.x, self.a.y, self.b.x, self.b.y)\n\n    # pointを通って平行\n    def par(self, point):\n        return Line(point, point+(self.a-self.b))\n\n    # pointを通って垂直\n    def tan(self, point):\n        return Line(point, point + Rotation(self.a-self.b, pi/2))\n\n\nclass Segment(Line):\n    def __init__(self, a, b):\n        super(Line, self).__init__(a, b)\n\n\n# 符号付き面積\ndef cross(vec1: Point, vec2: Point):\n    return vec1.x*vec2.y - vec1.y*vec2.x\n\n# 内積\ndef dot(vec1: Point, vec2: Point):\n    return vec1.x*vec2.x + vec1.y*vec2.y\n\n# 点a->b->cの回転方向\ndef ccw(a, b, c):\n    if cross(b-a, c-a) > EPS: return +1 # COUNTER_CLOCKWISE\n    if cross(b-a, c-a) < -EPS: return -1 # CLOCKWISE\n    if dot(c-a, b-a) < -EPS: return +2 # c -> a -> b\n    if abs(b-a) < abs(c-a): return -2 # a -> b -> c\n    return 0 # a -> c -> b\n\n\n# pのlへの射影\ndef projection(l, p):\n    t = dot(l.b-l.a, p-l.a) / abs(l.a-l.b)**2\n    return l.a + (l.b-l.a)*t\n\n# pのlによる反射\ndef reflection(l, p):\n    return p + (projection(l, p) - p)*2\n\ndef isPararell(l1, l2):\n    return eq(cross(l1.a-l1.b, l2.a-l2.b), 0)\n\ndef isVertical(l1, l2):\n    return eq(dot(l1.a-l1.b, l2.a-l2.b), 0)\n\n\ndef isIntersect_lp(l, p):\n    return abs(ccw(l.a, l.b, p)) != 1\n\ndef isIntersect_ll(l1, l2):\n    return not isPararell(l1, l2) or isIntersect_lp(l1, l2.a)\n\ndef isIntersect_sp(s, p):\n    return ccw(s.a, s.b, p) == 0\n\ndef isIntersect_ss(s1, s2):\n    return ccw(s1.a, s1.b, s2.a)*ccw(s1.a, s1.b, s2.b) <= 0 and ccw(s2.a, s2.b, s1.a)*ccw(s2.a, s2.b, s1.b) <= 0\n\ndef isIntersect_ls(l, s):\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS\n\ndef isIntersect_cp(c, p):\n    return abs(abs(c.p - p) - c.r) < EPS\n\ndef isIntersect_cl(c, l):\n    return distance_lp(l, c.p) <= c.r + EPS\n\ndef isIntersect_cs(c, s):\n    pass\n\ndef isIntersect_cc(c1, c2):\n    pass\n\n\ndef distance_pp(p1, p2):\n    return abs(p1-p2)\n\ndef distance_lp(l, p):\n    return abs(projection(l,p)-p)\n\ndef distance_ll(l1, l2):\n    return 0 if isIntersect_ll(l1, l2) else distance_lp(l1, l2.a)\n\ndef distance_sp(s, p):\n    r = projection(s, p)\n    if isIntersect_sp(s, r): return abs(r-p)\n    return min(abs(s.a-p), abs(s.b-p))\n\ndef distance_ss(s1, s2):\n    if isIntersect_ss(s1, s2): return 0\n    return min([distance_sp(s1, s2.a), distance_sp(s1, s2.b), distance_sp(s2, s1.a), distance_sp(s2, s1.b)])\n\ndef distance_ls(l, s):\n    if isIntersect_ls(l, s): return 0\n    return min(distance_lp(l, s.a), distance_lp(l, s.b))\n\n\ndef crosspoint_ll(l1, l2):\n    A = cross(l1.b - l1.a, l2.b - l2.a)\n    B = cross(l1.b - l1.a, l1.b - l2.a)\n    if eq(abs(A), 0) and eq(abs(B), 0): return l2.a\n    return l2.a + (l2.b - l2.a) * B / A\n\ndef crosspoint_ss(s1, s2):\n    return crosspoint_ll(s1, s2)\n\ndef crosspoint_lc(l, c):\n    if eq(distance_lp(l, c.p), c.r): return [c.p]\n    p = projection(l, c.p)\n    e = (l.b - l.a) / abs(l.b-l.a)\n    dis = (c.r**2-abs(p-c.p)**2)**0.5\n    return [p + e*dis, p - e*dis]\n\ndef crosspoint_sc(s, c):\n    pass\n\ndef crosspoint_cc(c1, c2):\n    d = abs(c1.p-c2.p)\n    if not abs(c1.r-c2.r) <= d <= c1.r+c2.r:\n        return []\n    mid_p = (c2.p * (c1.r**2-c2.r**2+d**2) + c1.p * (c2.r**2-c1.r**2+d**2)) / (2*d**2)\n    tanvec = Rotation(c1.p-c2.p, pi/2)\n    return crosspoint_lc(Line(mid_p, mid_p+tanvec), c1)\n\n\n# pからのcの接点\ndef tangent_cp(c, p):\n    return crosspoint_cc(c, Circle(p, (abs(p-c.p)**2 - c.r**2)**0.5))\n\n\n\n\n\nimport sys\ninput = sys.stdin.readline\n\ndef verify_1A():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    l = Line(Point(p1x, p1y), Point(p2x, p2y))\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        print(projection(l, p))\n\ndef verify_1B():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    l = Line(Point(p1x, p1y), Point(p2x, p2y))\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        print(reflection(l, p))\n\ndef verify_1C():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    p1 = Point(p1x, p1y); p2 = Point(p2x, p2y)\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        result = ccw(p1, p2, p)\n        if result == 1:\n            print(\"COUNTER_CLOCKWISE\")\n        elif result == -1:\n            print(\"CLOCKWISE\")\n        elif result == 2:\n            print(\"ONLINE_BACK\")\n        elif result == -2:\n            print(\"ONLINE_FRONT\")\n        else:\n            print(\"ON_SEGMENT\")\n\ndef verify_2A():\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y in Query:\n        l1 = Line(Point(p0x, p0y), Point(p1x, p1y))\n        l2 = Line(Point(p2x, p2y), Point(p3x, p3y))\n        if isPararell(l1, l2):\n            print(2)\n        elif isVertical(l1, l2):\n            print(1)\n        else:\n            print(0)\n\n\nverify_2A()\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=jp\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\nclass Point(object):\n    epsilon = 1e-10\n\n    def __init__(self, x=0.0, y=0.0):\n        if isinstance(x, tuple):\n            self.x = x[0]\n            self.y = x[1]\n        else:\n            self.x = x\n            self.y = y\n\n    # ????????????\n    def __add__(self, other):\n        return (self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return (self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return (other * self.x, other * self.y)\n\n    def __truediv__(self, other):\n        return (other / self.x, other / self.y)\n\n    def __lt__(self, other):\n        if self.x == other.x:\n            return self.y < other.y\n        else:\n            return self.x < other.x\n\n    def __eq__(self, other):\n        from math import fabs\n        if fabs(self.x - other.x) < Point.epsilon and fabs(self.y - other.y) < Point.epsilon:\n            return True\n        else:\n            return False\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        from math import sqrt\n        return sqrt(self.norm())\n\n\nclass Vector(Point):\n    @classmethod\n    def dot(cls, a, b):\n        return a.x * b.x + a.y * b.y\n\n    @classmethod\n    def cross(cls, a, b):\n        return a.x * b.y - a.y * b.x\n\n    @classmethod\n    def is_orthogonal(cls, a, b):\n        return Vector.dot(a, b) == 0.0\n\n    @classmethod\n    def is_parallel(cls, a, b):\n        return Vector.cross(a, b) == 0.0\n\n\nclass Segment(object):\n    def __init__(self, p1=Point(), p2=Point()):\n        if isinstance(p1, Point):\n            self.p1 = p1\n            self.p2 = p2\n        elif isinstance(p1, tuple):\n            self.p1 = Point(p1[0], p1[1])\n            self.p2 = Point(p2[0], p2[1])\n\n    @classmethod\n    def is_orthogonal(cls, s1, s2):\n        a = Vector(s1.p2 - s1.p1)\n        b = Vector(s2.p2 - s2.p1)\n        return Vector.is_orthogonal(a, b)\n\n    @classmethod\n    def is_parallel(cls, s1, s2):\n        a = Vector(s1.p2 - s1.p1)\n        b = Vector(s2.p2 - s2.p1)\n        return Vector.is_parallel(a, b)\n\n\nclass Line(Segment):\n    pass\n\n\nclass Cirle(object):\n    def __init__(self, c=Point(), r=0.0):\n        self.c = c\n        self.r = r\n\n\ndef solve(data):\n    x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3 = data\n    a = Segment((x_p0, y_p0), (x_p1, y_p1))\n    b = Segment((x_p2, y_p2), (x_p3, y_p3))\n    if Segment.is_orthogonal(a, b):\n        return 1\n    elif Segment.is_parallel(a, b):\n        return 2\n    else:\n        return 0\n\n\ndef main(args):\n    q = int(input())\n    for _ in range(q):\n        result = solve([int(x) for x in input().split()])\n        print(result)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n    "
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python3\n# CGL_2_A: Segments/Lines - Parallel/Orthogonal\n\n\ndef is_parallel(v1, v2):\n    return dot(orthogonal(v1), v2) == 0\n\n\ndef is_orthogonal(v1, v2):\n    return dot(v1, v2) == 0\n\n\ndef dot(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    return x1 * x2 + y1 * y2\n\n\ndef orthogonal(v):\n    x, y = v\n    return -y, x\n\n\ndef run():\n    q = int(input())\n\n    for _ in range(q):\n        x0, y0, x1, y1, x2, y2, x3, y3 = [int(i) for i in input().split()]\n\n        v1 = (x1-x0, y1-y0)\n        v2 = (x3-x2, y3-y2)\n\n        if is_parallel(v1, v2):\n            print(2)\n        elif is_orthogonal(v1, v2):\n            print(1)\n        else:\n            print(0)\n\n\nif __name__ == '__main__':\n    run()\n\n"
  },
  {
    "language": "Python",
    "code": "EPS = 10**(-9)\ndef is_equal(a,b):\n    return abs(a-b) < EPS\n\ndef norm(v,i):\n    import math\n    ret = 0\n    n = len(v)\n    for j in range(n):\n        ret += abs(v[j])**i\n    return math.pow(ret,1/i)\n\nclass Vector(list):\n    \"\"\"\n    ベクトルクラス\n    対応演算子\n    +  : ベクトル和 \n    -  : ベクトル差\n    *  : スカラー倍、または内積\n    /  : スカラー除法\n    ** : 外積\n    += : ベクトル和\n    -= : ベクトル差\n    *= : スカラー倍\n    /= : スカラー除法\n\n    メソッド\n    self.norm(i) : L{i}ノルムを計算\n    \"\"\"\n    def __add__(self,other):\n        n = len(self)\n        ret = [0]*n\n        for i in range(n):\n            ret[i] = super().__getitem__(i) + other.__getitem__(i)\n        return self.__class__(ret)\n    \n    def __radd__(self,other):\n        n = len(self)\n        ret = [0]*n\n        for i in range(n):\n            ret[i] = other.__getitem__(i) + super().__getitem__(i)\n        return self.__class__(ret)\n    \n    def __iadd__(self, other):\n        n = len(self)\n        for i in range(n):\n            self[i] += other.__getitem__(i)\n        return self\n\n    def __sub__(self,others):\n        n = len(self) \n        ret = [0]*n\n        for i in range(n):\n            ret[i] = super().__getitem__(i) - others.__getitem__(i)\n        return self.__class__(ret)\n\n    def __iadd__(self, other):\n        n = len(self)\n        for i in range(n):\n            self[i] -= other.__getitem__(i)\n        return self\n\n    def __rsub__(self,others):\n        n = len(self) \n        ret = [0]*n\n        for i in range(n):\n            ret[i] = others.__getitem__(i) - super().__getitem__(i)\n        return self.__class__(ret)\n    \n    def __mul__(self,other):\n        n = len(self)\n        if isinstance(other,list):\n            ret = 0\n            for i in range(n):\n                ret += super().__getitem__(i)*other.__getitem__(i)\n            return ret\n        else:\n            ret = [0]*n\n            for i in range(n):\n                ret[i] = super().__getitem__(i)*other\n            return self.__class__(ret)\n\n    def __rmul__(self,other):\n        n = len(self)\n        if isinstance(other,list):\n            ret = 0\n            for i in range(n):\n                ret += super().__getitem__(i)*other.__getitem__(i)\n            return ret\n        else:\n            ret = [0]*n\n            for i in range(n):\n                ret[i] = super().__getitem__(i)*other\n            return self.__class__(ret)\n    \n    \n    def __truediv__(self,other):\n        \"\"\"\n        ベクトルのスカラー除法\n        Vector/scalar\n        \"\"\"\n        n = len(self)\n        ret = [0]*n\n        for i in range(n):\n            ret[i] = super().__getitem__(i)/other\n        return self.__class__(ret)\n    \n    def norm(self,i):\n        \"\"\"\n        L{i}ノルム\n        self.norm(i)\n        \"\"\"\n        return norm(self,i)\n    \n    def __pow__(self,other):\n        \"\"\"\n        外積\n        self**other\n        \"\"\"\n        n = len(self)\n        ret = [0]*3\n        x = self[:]\n        y = other[:]\n        if n == 2:\n            x.append(0)\n            y.append(0)\n        if n == 2 or n == 3:\n            for i in range(3):\n                ret[0],ret[1],ret[2] = x[1]*y[2]-x[2]*y[1],x[2]*y[0]-x[0]*y[2],x[0]*y[1]-x[1]*y[0]\n            ret = Vector(ret)\n            if n == 2:\n                return ret.norm(2)\n            else:\n                return ret\n\nclass Segment:\n    \"\"\"\n    線分クラス\n    \"\"\"\n    def __init__(self,v1,v2):\n        self.v1 = v1\n        self.v2 = v2\n\n    def get_unit_vec(self):\n        return (self.v2-self.v1)/norm(self.v2-self.v1,2)\n    \n    def projection(self,vector):\n        unit_vec = self.get_unit_vec()\n        t = unit_vec*(vector-self.v1)\n        return self.v1 + t*unit_vec\n    \n    def is_vertical(self,other):\n        return is_equal(0,self.get_unit_vec()*other.get_unit_vec())\n    \n    def is_horizontal(self,other):\n        return is_equal(0,self.get_unit_vec()**other.get_unit_vec())\n    \n    def reflection(self,vector):\n        projection = self.projection(vector)\n        v = projection - vector\n        return projection + vector\n\nclass Line(Segment):\n    \"\"\"\n    直線クラス\n    \"\"\"\n    pass\n\n\nq = int(input())\nfor _ in range(q):\n    tmp = list(map(int,input().split()))\n    vectors = [0]*4\n    for j in range(4):\n        vectors[j] = Vector(tmp[j*2:(j+1)*2])\n    l1 = Line(vectors[0],vectors[1])\n    l2 = Line(vectors[2],vectors[3])\n\n    if l1.is_horizontal(l2):\n        print(2)\n    elif l1.is_vertical(l2):\n        print(1)\n    else:\n        print(0)\n\n\n"
  },
  {
    "language": "Python",
    "code": "n = int(input())\n\ndef dot(a,b):\n    return a[0] * b[0] + a[1] * b[1]\ndef s(a):\n    return a[0]**2 + a[1]**2\n\nfor i in range(n):\n    points = [int(j) for j in input().split()]\n    p0 = points[:2]\n    p1 = points[2:4]\n    p2 = points[4:6]\n    p3 = points[6:8]\n    a = [p0[0]-p1[0],p0[1]-p1[1]]\n    b = [p2[0]-p3[0],p2[1]-p3[1]]\n    c = dot(a,b)**2/(s(a) * s(b))\n    if c == 0: print(1)\n    elif c == 1: print(2)\n    else: print(0)"
  },
  {
    "language": "Python",
    "code": "def LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\ndef LIR(n): return [LI() for i in range(n)]\ndef MI(): return map(int, input().split())\n\n#1\n#1_A\n\"\"\"\nx,y,s,t = map(float, input().split())\na = int(input())\ns-=x\nt-=y\nwhile a:\n    a -= 1\n    p,q = map(float, input().split())\n    p-=x\n    q-=y\n    ans_x = s*(q*t+p*s)/(t*t+s*s)\n    ans_y = t*(q*t+p*s)/(t*t+s*s)\n    print(x+ans_x, y+ans_y)\n\"\"\"\n\n#1_B\n\"\"\"\np1x,p1y,c,d = MI()\nq = II()\nif p1x == c:\n    f = 0\nelif p1y == d:\n    f = 1\nelse:\n    f = 2\n    m = (d-p1y)/(c-p1x)\nfor _ in range(q):\n    px,py = MI()\n    if not f:\n        a = 2*p1x-px\n        b = py\n    elif f == 1:\n        a = px\n        b = 2*p1y-py\n    else:\n        a = (2*py+(1/m-m)*px+2*m*p1x-2*p1y)/(m+1/m)\n        b = -1/m*(a-px)+py\n    print(a,b)\n\"\"\"\n\n#1_C\n\"\"\"\ndef inner_product(a,b):\n    return a[0]*b[0]+a[1]*b[1]\n\ndef cross_product(a,b):\n    return a[0]*b[1]-a[1]*b[0]\np,q,c,d = MI()\na = [c-p,d-q]\nr = II()\nfor _ in range(r):\n    c,d = MI()\n    b = [c-p,d-q]\n    co = inner_product(a,b)\n    si = cross_product(a,b)\n    if si == 0:\n        if co >= 0:\n            if a[0]**2+a[1]**2 >= b[0]**2+b[1]**2:\n                print(\"ON_SEGMENT\")\n            else:\n                print(\"ONLINE_FRONT\")\n        else:\n            print(\"ONLINE_BACK\")\n    elif si > 0:\n        print(\"COUNTER_CLOCKWISE\")\n    else:\n        print(\"CLOCKWISE\")\n\"\"\"\n\n#2\n#2_A\ndef inner_product(a,b):\n    return a[0]*b[0]+a[1]*b[1]\n\ndef cross_product(a,b):\n    return a[0]*b[1]-a[1]*b[0]\nq = II()\nfor i in range(q):\n    s,t,a,b,x,y,c,d = MI()\n    a = [a-s,b-t]\n    b = [c-x,d-y]\n    co = inner_product(a,b)\n    si = cross_product(a,b)\n    if not si:\n        print(2)\n    elif not co:\n        print(1)\n    else:\n        print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __repr__(self):\n        return f\"({self.x},{self.y})\"\n\n\nclass Segment:\n    def __init__(self, x: Point, y: Point):\n        self.pt1 = x\n        self.pt2 = y\n        self.vector = self.pt2 - self.pt1\n\n    def dot(self, other):\n        return self.vector.x * other.vector.x + self.vector.y * other.vector.y\n\n    def cross(self, other):\n        return self.vector.x * other.vector.y - self.vector.y * other.vector.x\n\n    def __repr__(self):\n        return f\"{self.pt1},{self.pt2},{self.vector}\"\n\n\ndef main():\n        n = int(input())\n        for i in range(n):\n            p0_x, p0_y, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y = map(int, input().split())\n            seg_1 = Segment(Point(p0_x, p0_y), Point(p1_x, p1_y))\n            seg_2 = Segment(Point(p2_x, p2_y), Point(p3_x, p3_y))\n\n            if seg_1.dot(seg_2) == 0:\n                print('1')\n            elif seg_1.cross(seg_2) == 0:\n                print('2')\n            else:\n                print('0')\n        return\n\nmain()\n"
  },
  {
    "language": "Python",
    "code": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\nfor _ in [0] * n:\n    line_axis = tuple(map(int, readline().split()))\n    p0, p1, p2, p3 = (x + y * 1j for x, y in zip(line_axis[::2], line_axis[1::2]))\n    if dot(p1 - p0, p3 - p2) == 0:\n        print('1')\n    elif cross(p1 - p0, p3 - p2) == 0:\n        print('2')\n    else:\n        print('0')"
  },
  {
    "language": "Python",
    "code": "EPS = 1e-4\n\n#外積\ndef OuterProduct(one, two):\n\ttmp = one.conjugate() * two\n\treturn tmp.imag\n\n#内積\ndef InnerProduct(one, two):\n\ttmp = one.conjugate() * two\n\treturn tmp.real\n\ndef solve(a, b, c, d):\n\tif abs(OuterProduct(b-a, d-c)) <= EPS:\n\t\treturn 2\n\telif abs(InnerProduct(b-a, d-c)) <= EPS:\n\t\treturn 1\n\telse:\n\t\treturn 0\n\nn = int(input())\nfor _ in range(n):\n\tpp = list(map(int, input().split()))\n\tp = [complex(pp[i], pp[i+1]) for i in range(0, 8, 2)]\n\tprint(solve(p[0], p[1], p[2], p[3]))\n"
  },
  {
    "language": "Python",
    "code": "q=int(input())\nfor i in range(q):\n    L=input().split( )\n    x0=int(L[0])\n    y0=int(L[1])\n    x1=int(L[2])\n    y1=int(L[3])\n    x2=int(L[4])\n    y2=int(L[5])\n    x3=int(L[6])\n    y3=int(L[7])\n    vx1=x0-x1\n    vy1=y0-y1\n    vx2=x2-x3\n    vy2=y2-y3\n    if vx1*vy2-vx2*vy1==0:\n        print(2)\n    elif vx1*vx2+vy1*vy2==0:\n        print(1)\n    else:\n        print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "q = int(input())\n\n\ndef isParallel(u, v):\n    if u[0] == 0 or v[0] == 0:\n        if u[0] == 0 and v[0] == 0:\n            return True\n        else:\n            return False\n    else:\n        if u[0]*v[1] == u[1]*v[0]:\n            return True\n        else:\n            return False\n\n\ndef isOrthogonal(u, v):\n    if u[0]*v[0] + u[1]*v[1] == 0:\n        return True\n    else:\n        return False\n\n\nfor qi in range(q):\n    x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3= [int(i) for i in input().split()]\n    u = [x_p1-x_p0, y_p1-y_p0]\n    v = [x_p3-x_p2, y_p3-y_p2]\n    if isParallel(u, v):\n        print(2)\n    elif isOrthogonal(u, v):\n        print(1)\n    else:\n        print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Vector(Point):\n    pass\n\ndef point_to_vector(p1, p2):\n    x = p1.x - p2.x\n    y = p1.y - p2.y\n    return Vector(x, y)\n\ndef dot(v1, v2):\n    return v1.x * v2.x + v1.y * v2.y\n\ndef cross(v1, v2):\n    return v1.x * v2.y - v1.y * v2.x\n\ndef is_orth(v1, v2):\n    if dot(v1, v2) == 0:\n        return True\n    else:\n        return False\n\ndef is_pal(v1, v2):\n    if cross(v1, v2) == 0:\n        return True\n    else:\n        return False\n\nq = int(input())\nfor i in range(q):\n    temp = list(map(int, input().split()))\n    points = []\n    for j in range(0, 8, 2):\n        points.append(Point(temp[j], temp[j+1]))\n    v1 = point_to_vector(points[0], points[1])\n    v2 = point_to_vector(points[2], points[3])\n    if is_pal(v1, v2):\n        ans = 2\n    elif is_orth(v1, v2):\n        ans = 1\n    else:\n        ans = 0\n    print(ans)\n"
  },
  {
    "language": "Python",
    "code": "if __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3 = map(lambda x: int(x),\n                                                             input().split())\n        s1 = (x_p1 - x_p0, y_p1 - y_p0)\n        s2 = (x_p3 - x_p2, y_p3 - y_p2)\n\n        if s1[0] * s2[0] == - s1[1] * s2[1]:\n            print(1)\n        elif s1[0] * s2[1] == s1[1] * s2[0]:\n            print(2)\n        else:\n            print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\nreadline = stdin.readline\n\n\ndef main():\n    q = int(readline())\n    for i in range(q):\n        print(parallel_orthogonal())\n\n\ndef parallel_orthogonal():\n    xy = map(int, readline().split())\n    p0, p1, p2, p3 = [x + y * 1j for x, y in zip(*[xy] * 2)]\n    if 0 == dot(p1 - p0, p3 - p2):\n        return 1\n    if 0 == cross(p1 - p0, p3 - p2):\n        return 2\n    return 0\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\nmain()"
  },
  {
    "language": "Python",
    "code": "q=int(input())\n\nfor i in range(q):\n    xp0,yp0,xp1,yp1,xp2,yp2,xp3,yp3=map(int,input().split())\n    if xp0==xp1:\n        if xp2==xp3:\n            print(2)\n        elif yp2==yp3:\n            print(1)\n        else:\n            print(0)\n    elif xp2==xp3:\n        if xp1==xp0:\n            print(2)\n        elif yp0==yp1:\n            print(1)\n        else:\n            print(0)\n    else:\n        a1=(yp1-yp0)/(xp1-xp0)\n        a2=(yp3-yp2)/(xp3-xp2)\n        \n        #print(a1,a2)\n        if a2>=a1-0.0000001 and a2<=a1+0.0000001:\n            print(2)\n        elif a2*a1>=-1-0.0000001 and a2*a1<=-1+0.0000001:\n            print(1)\n        else:\n            print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "class Point:\n    def __init__(self,x,y):\n        self.x = x\n        self.y = y\n\n    def __add__(self,a):\n        return self.__class__(self.x+a.x,self.y+a.y)\n\n    def __sub__(self,a):\n        return self.__class__(self.x-a.x,self.y-a.y)\n\n    def __mul__(self,d):\n        return self.__class__(self.x*d,self.y*d)\n\n    def __truediv__(self,d):\n        return self.__class__(self.x/d,self.y/d)\n\n    def __str__(self):\n        return '%.10f %.10f'%(self.x,self.y)\n\n    def abs(self):\n        return self.norm()**(1.0/2.0)\n\n    def norm(self):\n        return (self.x*self.x+self.y*self.y)\n\n    def rotate(self,d):\n        r = math.pi*d/180.0\n        return self.__class__( self.x*math.cos(r)-self.y*math.sin(r),\n                               self.x*math.sin(r)+self.y*math.cos(r))\n\n    def dot(self,p)  :return (self.x*p.x+self.y*p.y)\n    def cross(self,p):return (self.x*p.y-self.y*p.x)\n\nclass Segment:\n    def __init__(self,p1,p2):\n        self.p1 = p1\n        self.p2 = p2\n\n    def __init__(self,a,b,c,d):\n        self.p1 = Point(a,b)\n        self.p2 = Point(c,d)\n\n    def parallel(self,s):\n        v1 = self.p2-self.p1\n        v2 = s.p2-s.p1\n        return v1.cross(v2)==0.0\n\n    def orthogonal(self,s):\n        v1 = self.p2-self.p1\n        v2 = s.p2-s.p1\n        return v1.dot(v2)==0.0\n\ndef project(s,p):\n    v = s.p2-s.p1\n    r = v.dot(p-s.p1)/v.norm()\n    return s.p1+v*r\n\ndef reflect(s,p):\n    return p+(project(s,p)-p)*2.0\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        a,b,c,d,e,f,g,h = map(float,input().split())\n        s = Segment(a,b,c,d)\n        t = Segment(e,f,g,h)\n        if s.parallel(t):print (2)\n        elif s.orthogonal(t):print (1)\n        else :print (0)\n\nif __name__ == '__main__':\n    main()\n\n\n"
  },
  {
    "language": "Python",
    "code": "\npoints=[]\nn=int(input())\npoints=input().split()\n\np0,q0,p1,q1,p2,q2,p3,q3=points\n\nfor i in range(n):\n    if (q1 - q0) * (p2 - p3) == (q2 - q3) * (p1 - p0):\n        print(2)\n    elif (q1 - q0) * (q2 - q3) + (p1 - p0) * (p2 - p3) == 1:\n        print(1)\n    else:\n        print(0)"
  },
  {
    "language": "Python",
    "code": "\nfrom math import sqrt\nclass Vector:\n    def __init__(self, ls):\n        \"\"\"ls = list\"\"\"\n        self.vec = ls\n\n    def __len__(self):\n        return len(self.vec)\n\n    def __getitem__(self, idx):\n        return self.vec[idx]\n\n    def __repr__(self):\n        return f'Vector({self.vec})'\n\n    def add(self, vec):\n        \"\"\"vec: Vector class\"\"\"\n        assert len(self) == len(vec)\n        ret = [a + b for a, b in zip(self.vec, vec.vec)]\n        return Vector(ret)\n\n    def sub(self, vec):\n        \"\"\"vec: Vector class\"\"\"\n        assert len(self) == len(vec)\n        ret = [a - b for a, b in zip(self.vec, vec.vec)]\n        return Vector(ret)\n\n    def mul(self, vec):\n        \"\"\"vec: Vector class\"\"\"\n        assert len(self) == len(vec)\n        ret = [a * b for a, b in zip(self.vec, vec.vec)]\n        return Vector(ret)\n\n    def norm(self):\n        tmp = sum([x * x for x in self.vec])\n        return sqrt(tmp)\n\n\ndef norm(vec):\n    \"\"\"\n    vec ... Vector class\n    \"\"\"\n    return vec.norm()\n\n\ndef cross(a, b):\n    \"\"\"\n    Outer product for 2d\n    a,b ... Vector class\n    \"\"\"\n    assert len(a) == 2 and len(b) == 2\n    first = a[0] * b[1]\n    second = a[1] * b[0]\n    return first - second\n\n\ndef dot(a, b):\n    return sum(a.mul(b))\n\ndef resolve():\n    Q = int(input())\n\n    for i in range(Q):\n        s, t, a, b, x, y, c, d = map(int, input().split())\n        P0 = Vector([s, t])\n        P1 = Vector([a, b])\n        P2 = Vector([x, y])\n        P3 = Vector([c, d])\n\n        line_a = P1.sub(P0)\n        line_b = P3.sub(P2)\n\n        if cross(line_a, line_b) == 0:\n            print(2)\n        elif dot(line_a, line_b) == 0:\n            print(1)\n        else:\n            print(0)\n\nif __name__ == '__main__':\n    resolve()\n\n"
  },
  {
    "language": "Python",
    "code": "EPS = 0.0000000001\n\nclass Point:\n    \n    global EPS\n    \n    def __init__(self, x = 0, y = 0):\n        self.x = x\n        self.y = y\n        \n        \n    def __add__(a, b):\n        s = a.x + b.x\n        t = a.y + b.y\n        return Point(s, t)\n        \n    def __sub__(a, b):\n        s = a.x - b.x\n        t = a.y - b.y\n        return Point(s, t)\n            \n    def __mul__(self, a):\n        s = a * self.x\n        t = a * self.y\n        return Point(s, t)\n        \n    def __truediv__(self, a):\n        s = self.x / a\n        t = self.y / a\n        return Point(s, t)\n            \n            \n            \n            \n    def norm(self):\n        return self.x * self.x + self.y * self.y\n        \n    def abs(self):\n        return self.norm() ** 0.5\n            \n    \n            \n            \n    def __eq__(self, other):\n        return abs(self.x - other.y) < self.EPS and abs(self.y - other.y) < self.EPS\n            \n            \n            \n    def dot(self, b):\n        return self.x * b.x + self.y * b.y\n        \n    def cross(self, b):\n        return self.x * b.y - self.y * b.x\n    \n    \n\ndef isOrthogonal(a, b):\n    return a.dot(b) == 0\n\ndef isParallel(a,b):\n    return a.cross(b) == 0\n\n\nn = int(input())\nfor i in range(n):\n    nums=list(map(int,input().split()))\n    a = Point(nums[0] - nums[2], nums[1] - nums[3])\n    b = Point(nums[4] - nums[6], nums[5] - nums[7])\n\n    if isParallel(a,b):\n        print(2)\n    elif isOrthogonal(a, b):\n        print(1)\n    else:\n        print(0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "Python",
    "code": "q = int(input())\neps = 1e-8\nfor _ in range(q):\n    xp0, yp0, xp1, yp1, xp2, yp2, xp3, yp3 = map(int, input().split())\n    v1 = complex(xp1 - xp0, yp1 - yp0)\n    v2 = complex(xp3 - xp2, yp3 - yp2)\n    temp = v1.conjugate() * v2\n    dot = temp.real\n    cross = temp.imag\n    \n    if  abs(dot) < eps:\n        print(\"1\")\n    elif abs(cross) < eps:\n        print(\"2\")\n    else:\n        print(\"0\")\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\nimport math\ninput = sys.stdin.readline\n\n\nclass Vector():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, vec):\n        return Vector(self.x+vec.x, self.y+vec.y)\n\n    def __sub__(self, vec):\n        return Vector(self.x-vec.x, self.y-vec.y)\n\n    def __mul__(self, sc):\n        return Vector(self.x*sc, self.y*sc)\n\n    def __truediv__(self, sc):\n        return Vector(self.x/sc, self.y/sc)\n\n    def __iadd__(self, vec):\n        self.x += vec.x\n        self.y += vec.y\n        return self\n\n    def __isub__(self, vec):\n        self.x -= vec.x\n        self.y -= vec.y\n        return self\n\n    def __imul__(self, sc):\n        self.x *= sc\n        self.y *= sc\n        return self\n\n    def __itruediv__(self, sc):\n        self.x /= sc\n        self.y /= sc\n        return self\n\n    def __str__(self):\n        return '{:.9f} {:.9f}'.format(self.x, self.y)\n\n    def __eq__(self, vec):\n        return self.x == vec.x and self.y == vec.y\n\n    def dot(self, vec):\n        return self.x * vec.x + self.y * vec.y\n\n    def cross(self, vec):\n        return self.x * vec.y - self.y * vec.x\n\n    def abs(self):\n        return (self.x*self.x + self.y*self.y)**0.5\n\n    def ortho(self):\n        return Vector(-self.y, self.x)\n\n\nfor _ in [0]*int(input()):\n    x0, y0, x1, y1, x2, y2, x3, y3 = map(int, input().split())\n    v = Vector(x1-x0, y1-y0)\n    u = Vector(x3-x2, y3-y2)\n\n    if v.cross(u) == 0:\n        print(2)\n    elif v.dot(u) == 0:\n        print(1)\n    else:\n        print(0)\n\n"
  },
  {
    "language": "Python",
    "code": "from itertools import starmap\nimport sys\nreadline = sys.stdin.readline\nq = int(readline())\nfor _ in [0] * q:\n    p0, p1, p2, p3 = starmap(complex, zip(*[map(int, readline().split())] * 2))\n    prod = (p1 - p0).conjugate() * (p3 - p2)\n    print(2 if abs(prod.imag) < 1e-6 else 1 if abs(prod.real) < 1e-6 else 0)"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/python3\n\nimport array\nfrom fractions import Fraction\nimport math\nimport os\nimport sys\n\n\ndef main():\n    Q = read_int()\n    for _ in range(Q):\n        x0, y0, x1, y1, x2, y2, x3, y3 = read_ints()\n        print(solve(Vec(x0, y0), Vec(x1, y1), Vec(x2, y2), Vec(x3, y3)))\n\n\nPARALLEL = 2\nORTHOGONAL = 1\nOTHER = 0\n\n\ndef solve(a, b, c, d):\n    u = b - a\n    v = d - c\n    if u.cross(v) == 0:\n        return PARALLEL\n    if u.dot(v) == 0:\n        return ORTHOGONAL\n    return OTHER\n\n\n###############################################################################\n# AUXILIARY FUNCTIONS\n\nclass Vec(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        super().__init__()\n\n    def __add__(self, other):\n        return Vec(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vec(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, scalar):\n        return Vec(self.x * scalar, self.y * scalar)\n\n    def __rmul__(self, scalar):\n        return Vec(self.x * scalar, self.y * scalar)\n\n    def __truediv__(self, scalar):\n        return Vec(self.x / scalar, self.y / scalar)\n\n    def __iadd__(self, other):\n        self.x += other.x\n        self.y += other.y\n        return self\n\n    def __isub__(self, other):\n        self.x -= other.x\n        self.y -= other.y\n        return self\n\n    def __imul__(self, scalar):\n        self.x *= scalar\n        self.y *= scalar\n        return self\n\n    def __idiv__(self, scalar):\n        self.x /= scalar\n        self.y /= scalar\n        return self\n\n    def __neg__(self):\n        return Vec(-self.x, -self.y)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def abs2(self):\n        return self.x * self.x + self.y * self.y\n\n    def __abs__(self):\n        return math.sqrt(float(self.abs2()))\n\n    def __str__(self):\n        return '({}, {})'.format(self.x, self.y)\n\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef read_int():\n    return int(inp())\n\n\ndef read_ints():\n    return [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\nif __name__ == '__main__':\n    main()\n\n"
  },
  {
    "language": "Python",
    "code": "# Vector class\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def is_orthogonal(self, v):\n        if self.x * v.x + self.y * v.y == 0:\n            return True\n        else:\n            return False\n    def is_parallel(self, v):\n        if self.x * v.y - self.y * v.x == 0:\n            return True\n        else:\n            return False\n\n# Acceptance of input and judge\n\nimport sys\n\nfile_input = sys.stdin\n\nq = map(int, file_input.readline().split())\n\nfor line in file_input:\n    x_p0, y_p0, x_p1, y_p1, x_p2, y_p2, x_p3, y_p3 = map(int, line.split())\n    s1 = Vector(x_p1 - x_p0, y_p1 - y_p0)\n    s2 = Vector(x_p3 - x_p2, y_p3 - y_p2)\n    if s1.is_parallel(s2):\n        print(2)\n    elif s1.is_orthogonal(s2):\n        print(1)\n    else:\n        print(0)"
  },
  {
    "language": "Python",
    "code": "import sys\nreadline = sys.stdin.readline\nn = int(readline())\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\nfor _ in [0] * n:\n    line_axis = tuple(map(int, readline().split()))\n    p0, p1, p2, p3 = (complex(x, y) for x, y in zip(line_axis[::2], line_axis[1::2]))\n    if dot(p1 - p0, p3 - p2) == 0:\n        print('1')\n    elif cross(p1 - p0, p3 - p2) == 0:\n        print('2')\n    else:\n        print('0')"
  },
  {
    "language": "Python",
    "code": "for _ in [0]*int(input()):\n    a,b,c,d,e,f,g,h=map(int,input().split())\n    print(1 if (c-a)*(g-e)==-(d-b)*(h-f) else(2 if (c-a)*(h-f)==(d-b)*(g-e) else 0))"
  },
  {
    "language": "Python",
    "code": "from itertools import starmap\nimport sys\nreadline = sys.stdin.readline\nq = int(readline())\nwhile q:\n    q -= 1\n    p0, p1, p2, p3 = starmap(complex, zip(*[map(int, readline().split())] * 2))\n    prod = (p1 - p0).conjugate() * (p3 - p2)\n    print(2 if abs(prod.imag) < 1e-6 else 1 if abs(prod.real) < 1e-6 else 0)"
  },
  {
    "language": "Rust",
    "code": "pub fn read<T: std::str::FromStr>() -> T {\n    let mut s = String::new();\n    std::io::stdin().read_line(&mut s).ok();\n    s.trim().parse().ok().unwrap()\n}\n\npub fn read_vec<T: std::str::FromStr>() -> Vec<T> {\n    read::<String>()\n        .split_whitespace()\n        .map(|e| e.parse().ok().unwrap())\n        .collect()\n}\n\npub fn read_vec2<T: std::str::FromStr>(n: u32) -> Vec<Vec<T>> {\n    (0..n).map(|_| read_vec()).collect()\n}\n\npub fn read_col<T: std::str::FromStr>(n: u32) -> Vec<T> {\n    (0..n).map(|_| read()).collect()\n}\n\nfn main() {\n    let q: u32 = read();\n\n    for _ in 0..q {\n        let v: Vec<i32> = read_vec();\n        let x1 = v[2] - v[0];\n        let y1 = v[3] - v[1];\n        let x2 = v[6] - v[4];\n        let y2 = v[7] - v[5];\n        if x1 * y2 == x2 * y1 {\n            println!(\"2\");\n        } else if x1 * x2 + y1 * y2 == 0 {\n            println!(\"1\");\n        } else {\n            println!(\"0\");\n        }\n    }\n}\n\n"
  },
  {
    "language": "Rust",
    "code": "use std::f64::consts::PI;\n\nconst EPS: f64 = 1e-8;\n\nfn main() {\n    let mut sc = Scanner::new();\n\n    let q = sc.next::<usize>();\n    for _ in 0..q {\n        let p0 = sc.next::<Pt>();\n        let p1 = sc.next::<Pt>();\n        let p2 = sc.next::<Pt>();\n        let p3 = sc.next::<Pt>();\n\n        let s1 = p1 - p0;\n        let s2 = p3 - p2;\n\n        let arg = (s1 / s2).arg();\n\n        let ans = if arg.abs() < EPS || ((arg + 2.0 * PI) % (2.0 * PI) - PI).abs() < EPS {\n            2\n        } else if (arg - PI / 2.).abs() < EPS || (arg + PI / 2.).abs() < EPS {\n            1\n        } else {\n            0\n        };\n\n        println!(\"{}\", ans);\n    }\n}\n\n//==========\n\nuse std::fmt::Debug;\nuse std::ops::{Add, Div, Mul, Sub};\n\n#[derive(PartialEq, Eq, Copy, Clone, Hash, Debug, Default)]\n#[repr(C)]\npub struct Complex<T> {\n    /// Real portion of the complex number\n    pub re: T,\n    /// Imaginary portion of the complex number\n    pub im: T,\n}\n\nimpl<T> Complex<T> {\n    #[inline]\n    pub fn new(re: T, im: T) -> Self {\n        Complex { re, im }\n    }\n}\n\nimpl Complex<f64> {\n    #[inline]\n    pub fn conj(&self) -> Self {\n        Self::new(self.re.clone(), -self.im.clone())\n    }\n\n    #[inline]\n    pub fn norm(&self) -> f64 {\n        self.re.hypot(self.im)\n    }\n\n    #[inline]\n    pub fn arg(&self) -> f64 {\n        self.im.atan2(self.re)\n    }\n\n    #[inline]\n    pub fn abs(&self) -> f64 {\n        self.im.atan2(self.re)\n    }\n}\n\nimpl<T: Add<Output = T>> Add for Complex<T> {\n    type Output = Self;\n    fn add(self, rhs: Self) -> Self::Output {\n        Self::new(self.re + rhs.re, self.im + rhs.im)\n    }\n}\n\nimpl<T: Sub<Output = T>> Sub for Complex<T> {\n    type Output = Self;\n    fn sub(self, rhs: Self) -> Self::Output {\n        Self::new(self.re - rhs.re, self.im - rhs.im)\n    }\n}\n\nimpl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T>> Mul for Complex<T> {\n    type Output = Self;\n    fn mul(self, rhs: Self) -> Self::Output {\n        Self::new(\n            self.re * rhs.re - self.im * rhs.im,\n            self.re * rhs.im + self.im * rhs.re,\n        )\n    }\n}\n\nimpl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T> + Div<Output = T>> Div\n    for Complex<T>\n{\n    type Output = Self;\n    fn div(self, rhs: Self) -> Self::Output {\n        let d = rhs.re * rhs.re + rhs.im * rhs.im;\n        Self::new(\n            (self.re * rhs.re + self.im * rhs.im) / d,\n            (self.im * rhs.re - self.re * rhs.im) / d,\n        )\n    }\n}\n\ntype Pt = Complex<f64>;\n\n//==========\n\npub struct Scanner {\n    buf: Vec<char>,\n    cur: usize,\n}\n\nimpl Scanner {\n    pub fn new() -> Scanner {\n        Scanner {\n            buf: vec![],\n            cur: 0,\n        }\n    }\n\n    fn fill(&mut self) {\n        let mut s = String::new();\n        let len = std::io::stdin().read_line(&mut s).unwrap();\n        if len == 0 {\n            panic!(\"unexpected EOF\");\n        }\n        for c in s.chars() {\n            self.buf.push(c);\n        }\n    }\n\n    pub fn next_char(&mut self) -> char {\n        'outer: loop {\n            if self.cur >= self.buf.len() {\n                self.fill();\n            }\n            while self.cur < self.buf.len() {\n                if !self.buf[self.cur].is_whitespace() {\n                    break 'outer;\n                }\n                self.cur += 1;\n            }\n        }\n        let ret = self.buf[self.cur];\n        self.cur += 1;\n        ret\n    }\n\n    pub fn next_word(&mut self) -> String {\n        'outer: loop {\n            if self.cur >= self.buf.len() {\n                self.fill();\n            }\n            while self.cur < self.buf.len() {\n                if !self.buf[self.cur].is_whitespace() {\n                    break 'outer;\n                }\n                self.cur += 1;\n            }\n        }\n\n        let mut s = String::new();\n        while self.cur < self.buf.len() && !self.buf[self.cur].is_whitespace() {\n            s.push(self.buf[self.cur]);\n            self.cur += 1;\n        }\n        s\n    }\n\n    pub fn next<T: Reader>(&mut self) -> T {\n        T::read(self)\n    }\n\n    pub fn next_vec_len<T: Reader>(&mut self) -> Vec<T> {\n        let n: usize = self.next();\n        self.next_vec(n)\n    }\n\n    pub fn next_vec<T: Reader>(&mut self, n: usize) -> Vec<T> {\n        (0..n).map(|_| self.next()).collect()\n    }\n}\n\npub trait Reader {\n    fn read(sc: &mut Scanner) -> Self;\n}\n\nimpl<T: Reader> Reader for Complex<T> {\n    fn read(sc: &mut Scanner) -> Self {\n        Self::new(sc.next(), sc.next())\n    }\n}\n\nimpl Reader for char {\n    fn read(sc: &mut Scanner) -> Self {\n        sc.next_char()\n    }\n}\n\nmacro_rules! impl_for_from_str {\n    ($typ:ty) => {\n        impl Reader for $typ {\n            fn read(sc: &mut Scanner) -> Self {\n                sc.next_word().parse().unwrap()\n            }\n        }\n    };\n}\n\nimpl_for_from_str!(i8);\nimpl_for_from_str!(u8);\nimpl_for_from_str!(i16);\nimpl_for_from_str!(u16);\nimpl_for_from_str!(i32);\nimpl_for_from_str!(u32);\nimpl_for_from_str!(i64);\nimpl_for_from_str!(u64);\n// impl_for_from_str!(i128);\n// impl_for_from_str!(u128);\nimpl_for_from_str!(isize);\nimpl_for_from_str!(usize);\nimpl_for_from_str!(f32);\nimpl_for_from_str!(f64);\nimpl_for_from_str!(String);\n\n"
  },
  {
    "language": "Rust",
    "code": "mod utils {\n    use std::error::Error;\n    use std::io::stdin;\n    use std::str::FromStr;\n\n    #[allow(dead_code)]\n    pub fn read_line<T>() -> Result<Vec<T>, Box<Error>>\n    where\n        T: FromStr,\n        T::Err: 'static + Error,\n    {\n        let mut line = String::new();\n        let _ = stdin().read_line(&mut line)?;\n        let parsed_line = line.split_whitespace()\n            .map(|x| x.parse::<T>())\n            .collect::<Result<Vec<T>, T::Err>>()?;\n\n        Ok(parsed_line)\n    }\n\n    #[allow(dead_code)]\n    pub fn read_lines<T>(n: usize) -> Result<Vec<Vec<T>>, Box<Error>>\n    where\n        T: FromStr,\n        T::Err: 'static + Error,\n    {\n        (0..n).map(|_| read_line()).collect()\n    }\n}\n\nfn solve() -> Result<(), Box<std::error::Error>> {\n    let n_queries = utils::read_line::<usize>()?[0];\n    let queries = utils::read_lines::<i32>(n_queries)?;\n\n    for q in queries {\n        let a = (q[2] - q[0], q[3] - q[1]);\n        let b = (q[6] - q[4], q[7] - q[5]);\n\n        let result = if a.0 * b.0 + a.1 * b.1 == 0 {\n            1\n        } else if a.0 * b.1 - a.1 * b.0 == 0 {\n            2\n        } else {\n            0\n        };\n\n        println!(\"{}\", result);\n    }\n\n    Ok(())\n}\n\nfn main() {\n    match solve() {\n        Err(err) => panic!(\"{}\", err),\n        _ => (),\n    };\n}\n\n"
  },
  {
    "language": "Rust",
    "code": "macro_rules ! input { ( source = $ s : expr , $ ( $ r : tt ) * ) => { let mut iter = $ s . split_whitespace ( ) ; input_inner ! { iter , $ ( $ r ) * } } ; ( iter = $ iter : ident , $ ( $ r : tt ) * ) => { let s = { use std :: io :: Read ; let mut s = String :: new ( ) ; std :: io :: stdin ( ) . read_to_string ( & mut s ) . unwrap ( ) ; s } ; let mut $ iter = s . split_whitespace ( ) ; input_inner ! { $ iter , $ ( $ r ) * } } ; ( $ ( $ r : tt ) * ) => { let s = { use std :: io :: Read ; let mut s = String :: new ( ) ; std :: io :: stdin ( ) . read_to_string ( & mut s ) . unwrap ( ) ; s } ; let mut iter = s . split_whitespace ( ) ; input_inner ! { iter , $ ( $ r ) * } } ; }\nmacro_rules ! input_inner { ( $ iter : expr ) => { } ; ( $ iter : expr , ) => { } ; ( $ iter : expr , mut $ var : ident : $ t : tt $ ( $ r : tt ) * ) => { let mut $ var = read_value ! ( $ iter , $ t ) ; input_inner ! { $ iter $ ( $ r ) * } } ; ( $ iter : expr , mut $ var : ident $ ( $ r : tt ) * ) => { input_inner ! { $ iter , mut $ var : usize $ ( $ r ) * } } ; ( $ iter : expr , $ var : ident : $ t : tt $ ( $ r : tt ) * ) => { let $ var = read_value ! ( $ iter , $ t ) ; input_inner ! { $ iter $ ( $ r ) * } } ; ( $ iter : expr , $ var : ident $ ( $ r : tt ) * ) => { input_inner ! { $ iter , $ var : usize $ ( $ r ) * } } ; }\nmacro_rules ! read_value { ( $ iter : expr , ( $ ( $ t : tt ) ,* ) ) => { ( $ ( read_value ! ( $ iter , $ t ) ) ,* ) } ; ( $ iter : expr , [ $ t : tt ; $ len : expr ] ) => { ( 0 ..$ len ) . map ( | _ | read_value ! ( $ iter , $ t ) ) . collect ::< Vec < _ >> ( ) } ; ( $ iter : expr , { chars : $ base : expr } ) => { read_value ! ( $ iter , String ) . chars ( ) . map ( | c | ( c as u8 - $ base as u8 ) as usize ) . collect ::< Vec < usize >> ( ) } ; ( $ iter : expr , { char : $ base : expr } ) => { read_value ! ( $ iter , { chars : $ base } ) [ 0 ] } ; ( $ iter : expr , chars ) => { read_value ! ( $ iter , String ) . chars ( ) . collect ::< Vec < char >> ( ) } ; ( $ iter : expr , char ) => { read_value ! ( $ iter , chars ) [ 0 ] } ; ( $ iter : expr , usize1 ) => { read_value ! ( $ iter , usize ) - 1 } ; ( $ iter : expr , $ t : ty ) => { $ iter . next ( ) . unwrap ( ) . parse ::<$ t > ( ) . unwrap ( ) } ; }\nuse std::ops::{Add, Div, Mul, Neg, Sub};\n#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, Hash)]\npub struct Complex<T> {\n    pub re: T,\n    pub im: T,\n}\nimpl<T> Complex<T> {\n    #[inline]\n    pub fn new(re: T, im: T) -> Complex<T> {\n        Complex { re: re, im: im }\n    }\n}\nimpl<T: Neg<Output = T>> Complex<T> {\n    #[inline]\n    pub fn conjugate(self) -> Complex<T> {\n        Self::new(self.re, -self.im)\n    }\n}\nimpl<T: Add<Output = T> + Mul<Output = T>> Complex<T> {\n    #[inline]\n    pub fn dot(self, other: Self) -> T {\n        self.re * other.re + self.im * other.im\n    }\n}\nimpl<T: Sub<Output = T> + Mul<Output = T>> Complex<T> {\n    #[inline]\n    pub fn cross(self, other: Self) -> T {\n        self.re * other.im - self.im * other.re\n    }\n}\nimpl Complex<f64> {\n    #[inline]\n    pub fn from_polar(r: f64, theta: f64) -> Self {\n        Complex::new(r * theta.cos(), r * theta.sin())\n    }\n    #[inline]\n    pub fn abs(self) -> f64 {\n        self.re.hypot(self.im)\n    }\n    #[inline]\n    pub fn unit(self) -> Self {\n        self / self.abs()\n    }\n    #[inline]\n    pub fn angle(self) -> f64 {\n        self.im.atan2(self.re)\n    }\n}\nimpl<T: Add<Output = T>> Add for Complex<T> {\n    type Output = Self;\n    fn add(self, other: Self) -> Self::Output {\n        Self::new(self.re + other.re, self.im + other.im)\n    }\n}\nimpl<T: Copy + Add<Output = T>> Add<T> for Complex<T> {\n    type Output = Self;\n    fn add(self, other: T) -> Self::Output {\n        Self::new(self.re + other, self.im + other)\n    }\n}\nimpl<T: Sub<Output = T>> Sub for Complex<T> {\n    type Output = Self;\n    fn sub(self, other: Self) -> Self::Output {\n        Self::new(self.re - other.re, self.im - other.im)\n    }\n}\nimpl<T: Copy + Sub<Output = T>> Sub<T> for Complex<T> {\n    type Output = Self;\n    fn sub(self, other: T) -> Self::Output {\n        Self::new(self.re - other, self.im - other)\n    }\n}\nimpl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T>> Mul for Complex<T> {\n    type Output = Self;\n    fn mul(self, other: Self) -> Self::Output {\n        Self::new(\n            self.re * other.re - self.im * other.im,\n            self.re * other.im + self.im * other.re,\n        )\n    }\n}\nimpl<T: Copy + Mul<Output = T>> Mul<T> for Complex<T> {\n    type Output = Self;\n    fn mul(self, other: T) -> Self::Output {\n        Self::new(self.re * other, self.im * other)\n    }\n}\nimpl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T> + Div<Output = T>> Div\n    for Complex<T>\n{\n    type Output = Self;\n    fn div(self, other: Self) -> Self::Output {\n        let d = other.re * other.re + other.im * other.im;\n        Self::new(\n            (self.re * other.re + self.im * other.im) / d,\n            (self.im * other.re - self.re * other.im) / d,\n        )\n    }\n}\nimpl<T: Copy + Div<Output = T>> Div<T> for Complex<T> {\n    type Output = Self;\n    fn div(self, other: T) -> Self::Output {\n        Self::new(self.re / other, self.im / other)\n    }\n}\nimpl<T: Neg<Output = T>> Neg for Complex<T> {\n    type Output = Self;\n    fn neg(self) -> Self::Output {\n        Self::new(-self.re, -self.im)\n    }\n}\npub type Point = Complex<f64>;\n#[derive(Clone, Debug, PartialEq)]\npub struct Line {\n    p1: Point,\n    p2: Point,\n}\nimpl Line {\n    pub fn new(p1: Point, p2: Point) -> Self {\n        Line { p1: p1, p2: p2 }\n    }\n    pub fn dir(&self) -> Point {\n        self.p2 - self.p1\n    }\n    pub fn projection(&self, p: Point) -> Point {\n        let e = self.dir().unit();\n        let t = (p - self.p1).dot(e);\n        self.p1 + e * t\n    }\n    pub fn reflection(&self, p: Point) -> Point {\n        p + (self.projection(p) - p) * 2.0\n    }\n    pub fn distance(&self, p: Point) -> f64 {\n        (p / self.dir().unit()).re\n    }\n    pub fn is_parallel(&self, other: &Self) -> bool {\n        Real(self.dir().cross(other.dir())) == Real(0.)\n    }\n    pub fn is_orthogonal(&self, other: &Self) -> bool {\n        Real(self.dir().dot(other.dir())) == Real(0.)\n    }\n}\npub const EPS: f64 = 1e-8;\n#[derive(Clone, Debug)]\npub struct Real(pub f64);\nimpl PartialEq for Real {\n    fn eq(&self, other: &Real) -> bool {\n        (self.0 - other.0).abs() < EPS\n    }\n}\nimpl PartialOrd for Real {\n    fn partial_cmp(&self, other: &Real) -> Option<std::cmp::Ordering> {\n        if self == other {\n            Some(std::cmp::Ordering::Equal)\n        } else {\n            self.partial_cmp(other)\n        }\n    }\n}\nfn main() {\n    input! { q, qs: [[(f64, f64); 4]; q] };\n    for ps in &qs {\n        let l1 = Line::new(Point::new(ps[0].0, ps[0].1), Point::new(ps[1].0, ps[1].1));\n        let l2 = Line::new(Point::new(ps[2].0, ps[2].1), Point::new(ps[3].0, ps[3].1));\n        let x = if l1.is_parallel(&l2) {\n            2\n        } else if l1.is_orthogonal(&l2) {\n            1\n        } else {\n            0\n        };\n        println!(\"{}\", x);\n    }\n}\n\n"
  }
]