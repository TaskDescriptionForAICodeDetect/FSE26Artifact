[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n\nint main() {\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    scanf(\"%lf %lf %lf %lf %lf %lf %lf %lf\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n\n    double dx1 = x1 - x0;\n    double dy1 = y1 - y0;\n    double dx2 = x3 - x2;\n    double dy2 = y3 - y2;\n\n    double dot_product = dx1 * dx2 + dy1 * dy2;\n    double cross_product = dx1 * dy2 - dy1 * dx2;\n\n    if (dot_product == 0 && cross_product != 0) {\n        printf(\"2\\n\");  // Parallel\n    } else if (dot_product == 0 && cross_product == 0) {\n        printf(\"1\\n\");  // Orthogonal\n    } else {\n        printf(\"0\\n\");  // Neither\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:13:59"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n\nint main() {\n    int x0, y0, x1, y1, x2, y2, x3, y3;\n    scanf(\"%d %d %d %d %d %d %d %d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n\n    int dx1 = x1 - x0;\n    int dy1 = y1 - y0;\n    int dx2 = x3 - x2;\n    int dy2 = y3 - y2;\n\n    int cross = dx1 * dx2 + dy1 * dy2;\n    int det = dx1 * dy2 - dx2 * dy1;\n\n    if (det == 0) {\n        printf(\"2\\n\");\n    } else if (cross == 0) {\n        printf(\"1\\n\");\n    } else {\n        printf(\"0\\n\");\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:14:09"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nstruct Point {\n    int x, y;\n};\n\nint main() {\n    Point p0, p1, p2, p3;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n\n    int dx1 = p1.x - p0.x;\n    int dy1 = p1.y - p0.y;\n    int dx2 = p3.x - p2.x;\n    int dy2 = p3.y - p2.y;\n\n    int cross = dx1 * dx2 + dy1 * dy2;\n    int det = dx1 * dy2 - dy1 * dx2;\n\n    if (det == 0) {\n        cout << \"2\" << endl;\n    } else if (cross == 0) {\n        cout << \"1\" << endl;\n    } else {\n        cout << \"0\" << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:14:20"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int x0 = scanner.nextInt();\n        int y0 = scanner.nextInt();\n        int x1 = scanner.nextInt();\n        int y1 = scanner.nextInt();\n        int x2 = scanner.nextInt();\n        int y2 = scanner.nextInt();\n        int x3 = scanner.nextInt();\n        int y3 = scanner.nextInt();\n\n        int dx1 = x1 - x0;\n        int dy1 = y1 - y0;\n        int dx2 = x3 - x2;\n        int dy2 = y3 - y2;\n\n        int crossProduct = dx1 * dx2 + dy1 * dy2;\n        int crossProductPerp = dx1 * dy2 - dx2 * dy1;\n\n        if (crossProductPerp == 0) {\n            System.out.println(\"2\");\n        } else if (crossProduct == 0) {\n            System.out.println(\"1\");\n        } else {\n            System.out.println(\"0\");\n        }\n    }\n}",
    "timestamp": "2025-08-05 22:14:33"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class LineRelationship {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        int x0 = scanner.nextInt();\n        int y0 = scanner.nextInt();\n        int x1 = scanner.nextInt();\n        int y1 = scanner.nextInt();\n        int x2 = scanner.nextInt();\n        int y2 = scanner.nextInt();\n        int x3 = scanner.nextInt();\n        int y3 = scanner.nextInt();\n        \n        int dx1 = x1 - x0;\n        int dy1 = y1 - y0;\n        int dx2 = x3 - x2;\n        int dy2 = y3 - y2;\n        \n        int dotProduct = dx1 * dx2 + dy1 * dy2;\n        int crossProduct = dx1 * dy2 - dy1 * dx2;\n        \n        if (crossProduct == 0) {\n            System.out.println(2);  // parallel\n        } else if (dotProduct == 0) {\n            System.out.println(1);  // orthogonal\n        } else {\n            System.out.println(0);  // neither\n        }\n        \n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 22:14:38"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nstruct Point {\n    int x, y;\n};\n\nint solve(Point p0, Point p1, Point p2, Point p3) {\n    int dx1 = p1.x - p0.x;\n    int dy1 = p1.y - p0.y;\n    int dx2 = p3.x - p2.x;\n    int dy2 = p3.y - p2.y;\n    \n    int dot_product = dx1 * dx2 + dy1 * dy2;\n    int cross_product = dx1 * dy2 - dy1 * dx2;\n    \n    if (cross_product == 0) return 2;\n    if (dot_product == 0) return 1;\n    \n    return 0;\n}\n\nint main() {\n    Point p0, p1, p2, p3;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y >> p2.x >> p2.y >> p3.x >> p3.y;\n    \n    cout << solve(p0, p1, p2, p3) << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:14:42"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def check_line_relationship(s1, s2):\n    # Unpack the points\n    p0, p1 = s1\n    p2, p3 = s2\n\n    # Calculate the direction vectors for the lines\n    v1 = (p1[0] - p0[0], p1[1] - p0[1])\n    v2 = (p3[0] - p2[0], p3[1] - p2[1])\n\n    # Calculate dot product and magnitudes\n    dot_product = v1[0] * v2[0] + v1[1] * v2[1]\n    magnitude1 = (v1[0]**2 + v1[1]**2) ** 0.5\n    magnitude2 = (v2[0]**2 + v2[1]**2) ** 0.5\n\n    # Check if the lines are parallel (cross product 0 implies parallel)\n    cross_product = v1[0] * v2[1] - v1[1] * v2[0]\n    if cross_product == 0:\n        print(2)\n        return\n\n    # Check if the lines are orthogonal\n    if dot_product == 0:\n        print(1)\n    else:\n        print(0)\n\n# Example usage:\ns1 = [(0, 0), (1, 1)]\ns2 = [(1, 0), (2, 1)]\ncheck_line_relationship(s1, s2)",
    "timestamp": "2025-08-13 09:36:52"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "public class LineRelation {\n    public static void main(String[] args) {\n        int[] p0 = {x0, y0};\n        int[] p1 = {x1, y1};\n        int[] p2 = {x2, y2};\n        int[] p3 = {x3, y3};\n\n        int dx1 = p1[0] - p0[0];\n        int dy1 = p1[1] - p0[1];\n        int dx2 = p3[0] - p2[0];\n        int dy2 = p3[1] - p2[1];\n\n        // Check if parallel\n        if (dy1 * dx2 == dy2 * dx1) {\n            System.out.println(2);\n        }\n        // Check if orthogonal\n        else if (dx1 * dx2 + dy1 * dy2 == 0) {\n            System.out.println(1);\n        }\n        // If neither\n        else {\n            System.out.println(0);\n        }\n    }\n}",
    "timestamp": "2025-08-13 09:36:55"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n\ntypedef struct {\n    int x;\n    int y;\n} Point;\n\nint determine_relationship(Point p0, Point p1, Point p2, Point p3) {\n    // Calculate direction vectors for s1 and s2\n    int dx1 = p1.x - p0.x;\n    int dy1 = p1.y - p0.y;\n    int dx2 = p3.x - p2.x;\n    int dy2 = p3.y - p2.y;\n\n    // Check for parallel: slopes are equal => dy1/dx1 == dy2/dx2 => dy1 * dx2 == dy2 * dx1\n    if (dy1 * dx2 == dy2 * dx1) {\n        return 2;\n    }\n    // Check for orthogonal: dot product is zero => dx1*dx2 + dy1*dy2 == 0\n    else if (dx1 * dx2 + dy1 * dy2 == 0) {\n        return 1;\n    }\n    // Neither parallel nor orthogonal\n    else {\n        return 0;\n    }\n}\n\nint main() {\n    Point p0, p1, p2, p3;\n    // Replace the input part as needed\n    scanf(\"%d %d %d %d %d %d %d %d\", &p0.x, &p0.y, &p1.x, &p1.y, &p2.x, &p2.y, &p3.x, &p3.y);\n\n    printf(\"%d\\n\", determine_relationship(p0, p1, p2, p3));\n    return 0;\n}",
    "timestamp": "2025-08-13 09:37:03"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve(p0, p1, p2, p3):\n    # Calculate line vectors\n    v1 = (p1[0] - p0[0], p1[1] - p0[1])\n    v2 = (p3[0] - p2[0], p3[1] - p2[1])\n    \n    # Calculate dot product\n    dot_product = v1[0] * v2[0] + v1[1] * v2[1]\n    \n    # Calculate magnitudes \n    magnitude1 = (v1[0]**2 + v1[1]**2)**0.5\n    magnitude2 = (v2[0]**2 + v2[1]**2)**0.5\n    \n    # Check if parallel (zero dot product when normalized)\n    if abs(v1[0] * v2[1] - v1[1] * v2[0]) < 1e-9:\n        return '2'\n    \n    # Check if orthogonal (dot product is zero)\n    if abs(dot_product) < 1e-9:\n        return '1'\n    \n    # Neither parallel nor orthogonal\n    return '0'\n\n# Read input\np0 = list(map(float, input().split()))\np1 = list(map(float, input().split()))\np2 = list(map(float, input().split()))\np3 = list(map(float, input().split()))\n\n# Print result\nprint(solve(p0, p1, p2, p3))",
    "timestamp": "2025-08-13 09:37:14"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "p0 = list(map(int, input().split()))\np1 = list(map(int, input().split()))\np2 = list(map(int, input().split()))\np3 = list(map(int, input().split()))\n\ndef cross_product(a, b):\n    return a[0] * b[1] - a[1] * b[0]\n\ndef dot_product(a, b):\n    return a[0] * b[0] + a[1] * b[1]\n\nv1 = (p1[0] - p0[0], p1[1] - p0[1])\nv2 = (p3[0] - p2[0], p3[1] - p2[1])\n\nif cross_product(v1, v2) == 0:\n    print(2)\nelif dot_product(v1, v2) == 0:\n    print(1)\nelse:\n    print(0)",
    "timestamp": "2025-08-13 09:37:23"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\nusing namespace std;\n\n// Function to calculate the dot product of two vectors\ndouble dotProduct(double x1, double y1, double x2, double y2) {\n    return x1 * x2 + y1 * y2;\n}\n\n// Function to calculate the cross product of two vectors\ndouble crossProduct(double x1, double y1, double x2, double y2) {\n    return x1 * y2 - y1 * x2;\n}\n\nint main() {\n    double x0, y0, x1, y1, x2, y2, x3, y3;\n    cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n    \n    // Vector s1: (x1-x0, y1-y0)\n    double vx1 = x1 - x0;\n    double vy1 = y1 - y0;\n    \n    // Vector s2: (x3-x2, y3-y2)\n    double vx2 = x3 - x2;\n    double vy2 = y3 - y2;\n    \n    // Calculate the cross product to check for parallelism\n    double cross = crossProduct(vx1, vy1, vx2, vy2);\n    \n    // Calculate the dot product to check for orthogonality\n    double dot = dotProduct(vx1, vy1, vx2, vy2);\n    \n    if (cross == 0) {\n        cout << \"2\" << endl; // Parallel\n    } else if (dot == 0) {\n        cout << \"1\" << endl; // Orthogonal\n    } else {\n        cout << \"0\" << endl; // Neither\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:52:53"
  }
]