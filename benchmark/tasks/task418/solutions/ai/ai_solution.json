[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    double weight;\n    double value;\n    double ratio;\n} Item;\n\nint compare(const void *a, const void *b) {\n    Item *itemA = (Item *)a;\n    Item *itemB = (Item *)b;\n    if (itemA->ratio < itemB->ratio) return 1;\n    if (itemA->ratio > itemB->ratio) return -1;\n    return 0;\n}\n\ndouble maximize_value(int N, double W, double *weights, double *values) {\n    Item *items = (Item *)malloc(N * sizeof(Item));\n    for (int i = 0; i < N; i++) {\n        items[i].weight = weights[i];\n        items[i].value = values[i];\n        items[i].ratio = values[i] / weights[i];\n    }\n\n    qsort(items, N, sizeof(Item), compare);\n\n    double remaining = W;\n    double total_value = 0.0;\n\n    for (int i = 0; i < N; i++) {\n        if (remaining <= 0) break;\n\n        double take = (items[i].weight < remaining) ? items[i].weight : remaining;\n        total_value += take * items[i].ratio;\n        remaining -= take;\n    }\n\n    free(items);\n    return total_value;\n}\n\nint main() {\n    int N;\n    double W;\n    scanf(\"%d %lf\", &N, &W);\n\n    double *weights = (double *)malloc(N * sizeof(double));\n    double *values = (double *)malloc(N * sizeof(double));\n\n    for (int i = 0; i < N; i++) {\n        scanf(\"%lf\", &weights[i]);\n    }\n    for (int i = 0; i < N; i++) {\n        scanf(\"%lf\", &values[i]);\n    }\n\n    double max_value = maximize_value(N, W, weights, values);\n    printf(\"%.6f\\n\", max_value);\n\n    free(weights);\n    free(values);\n    return 0;\n}",
    "timestamp": "2025-08-05 21:27:48"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Item {\n    double value, weight;\n    double ratio;\n};\n\nbool compareRatio(const Item &a, const Item &b) {\n    return a.ratio > b.ratio;\n}\n\ndouble maximizeValue(int N, double W, vector<double> &v, vector<double> &w) {\n    vector<Item> items(N);\n    for (int i = 0; i < N; ++i) {\n        items[i].value = v[i];\n        items[i].weight = w[i];\n        items[i].ratio = v[i] / w[i];\n    }\n    \n    sort(items.begin(), items.end(), compareRatio);\n    \n    double totalValue = 0.0;\n    double remainingWeight = W;\n    \n    for (int i = 0; i < N && remainingWeight > 0; ++i) {\n        double taken = min(items[i].weight, remainingWeight);\n        totalValue += taken * items[i].ratio;\n        remainingWeight -= taken;\n    }\n    \n    return totalValue;\n}\n\nint main() {\n    int N;\n    double W;\n    cin >> N >> W;\n    \n    vector<double> v(N), w(N);\n    for (int i = 0; i < N; ++i) {\n        cin >> v[i] >> w[i];\n    }\n    \n    cout.precision(10);\n    cout << maximizeValue(N, W, v, w) << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:28:06"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Comparator;\n\npublic class MaximumValue {\n    public static double solve(int N, double W, double[] v, double[] w) {\n        Item[] items = new Item[N];\n        for (int i = 0; i < N; i++) {\n            items[i] = new Item(v[i], w[i]);\n        }\n        \n        Arrays.sort(items, Comparator.comparingDouble(item -> -item.valuePerUnitWeight));\n        \n        double totalValue = 0.0;\n        double remainingWeight = W;\n        \n        for (int i = 0; i < N && remainingWeight > 0; i++) {\n            double taken = Math.min(1.0, remainingWeight / items[i].weight);\n            totalValue += taken * items[i].value;\n            remainingWeight -= taken * items[i].weight;\n        }\n        \n        return totalValue;\n    }\n    \n    static class Item {\n        double value;\n        double weight;\n        double valuePerUnitWeight;\n        \n        Item(double v, double w) {\n            this.value = v;\n            this.weight = w;\n            this.valuePerUnitWeight = v / w;\n        }\n    }\n}",
    "timestamp": "2025-08-05 21:28:20"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class MaximumValueOptimization {\n    public static double maximizeValue(int N, double[] w, double[] v, double W) {\n        List<Item> items = new ArrayList<>();\n        for (int i = 0; i < N; i++) {\n            items.add(new Item(w[i], v[i]));\n        }\n        \n        items.sort((a, b) -> Double.compare(b.valuePerWeight, a.valuePerWeight));\n        \n        double totalValue = 0;\n        double totalWeight = 0;\n        \n        for (Item item : items) {\n            if (totalWeight + item.weight <= W) {\n                totalValue += item.value;\n                totalWeight += item.weight;\n            } else {\n                double remainingCapacity = W - totalWeight;\n                totalValue += item.valuePerWeight * remainingCapacity;\n                break;\n            }\n        }\n        \n        return totalValue;\n    }\n    \n    static class Item {\n        double weight;\n        double value;\n        double valuePerWeight;\n        \n        Item(double weight, double value) {\n            this.weight = weight;\n            this.value = value;\n            this.valuePerWeight = value / weight;\n        }\n    }\n}",
    "timestamp": "2025-08-05 21:28:25"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ndouble max_value(int N, double *w, double *v, double W) {\n    int *indices = malloc(N * sizeof(int));\n    double *ratios = malloc(N * sizeof(double));\n    \n    for (int i = 0; i < N; i++) {\n        indices[i] = i;\n        ratios[i] = v[i] / w[i];\n    }\n    \n    for (int i = 0; i < N - 1; i++) {\n        for (int j = 0; j < N - i - 1; j++) {\n            if (ratios[j] < ratios[j + 1]) {\n                double temp_ratio = ratios[j];\n                ratios[j] = ratios[j + 1];\n                ratios[j + 1] = temp_ratio;\n                \n                int temp_index = indices[j];\n                indices[j] = indices[j + 1];\n                indices[j + 1] = temp_index;\n            }\n        }\n    }\n    \n    double total_value = 0.0;\n    double total_weight = 0.0;\n    \n    for (int i = 0; i < N; i++) {\n        int idx = indices[i];\n        \n        if (total_weight + w[idx] <= W) {\n            total_weight += w[idx];\n            total_value += v[idx];\n        } else {\n            double remaining_weight = W - total_weight;\n            total_value += ratios[i] * remaining_weight;\n            break;\n        }\n    }\n    \n    free(indices);\n    free(ratios);\n    \n    return total_value;\n}",
    "timestamp": "2025-08-05 21:28:31"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\ndouble solve(int N, vector<double>& w, vector<double>& v, double W) {\n    vector<pair<double, int>> ratio(N);\n    for (int i = 0; i < N; i++) {\n        ratio[i] = {v[i] / w[i], i};\n    }\n    \n    sort(ratio.rbegin(), ratio.rend());\n    \n    double result = 0.0;\n    double weight = 0.0;\n    \n    for (int i = 0; i < N; i++) {\n        int index = ratio[i].second;\n        if (weight + w[index] <= W) {\n            result += v[index];\n            weight += w[index];\n        } else {\n            double remaining = W - weight;\n            result += ratio[i].first * remaining;\n            break;\n        }\n    }\n    \n    return result;\n}\n\nint main() {\n    int N;\n    double W;\n    cin >> N >> W;\n    \n    vector<double> w(N), v(N);\n    for (int i = 0; i < N; i++) {\n        cin >> w[i] >> v[i];\n    }\n    \n    cout << fixed;\n    cout.precision(4);\n    cout << solve(N, w, v, W) << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:28:37"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "from scipy.optimize import linprog\n\ndef maximize_value(w, v, W):\n    N = len(w)\n    c = [-vi for vi in v]  # Coefficients for objective function (maximize v -> minimize -v)\n    A_ub = [w]            # Coefficients matrix for the inequality constraint\n    b_ub = [W]            # Right-hand side for the inequality constraint\n    bounds = [(0, 1) for _ in range(N)]  # Bounds for variables x_i\n\n    # Solve the linear programming problem\n    result = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs')\n    \n    # Maximize value\n    max_value = -result.fun\n    return max_value\n\n# Example usage\nw = [2, 1, 3]\nv = [3, 4, 5]\nW = 5\nprint(maximize_value(w, v, W))",
    "timestamp": "2025-08-13 06:36:18"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Arrays;\nimport java.util.Comparator;\n\npublic class MaxValueProblem {\n    static class Item {\n        double weight;\n        double value;\n        double ratio;\n\n        Item(double weight, double value) {\n            this.weight = weight;\n            this.value = value;\n            this.ratio = value / weight;\n        }\n    }\n\n    public static double getMaxValue(double[] weights, double[] values, double W) {\n        int N = weights.length;\n        Item[] items = new Item[N];\n        \n        for (int i = 0; i < N; i++) {\n            items[i] = new Item(weights[i], values[i]);\n        }\n\n        Arrays.sort(items, Comparator.comparingDouble(item -> -item.ratio));\n\n        double maxValue = 0.0;\n        for (Item item : items) {\n            if (W == 0) break;\n            double x_i = Math.min(1.0, W / item.weight);\n            maxValue += x_i * item.value;\n            W -= x_i * item.weight;\n        }\n\n        return maxValue;\n    }\n\n    public static void main(String[] args) {\n        double[] weights = {2, 3, 5};\n        double[] values = {3, 4, 5};\n        double W = 5;\n\n        double maxValue = getMaxValue(weights, values, W);\n        System.out.println(\"Maximum value: \" + maxValue);\n    }\n}",
    "timestamp": "2025-08-13 06:36:23"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\n// Comparator function for sorting items by value-to-weight ratio\nint cmp(const void *a, const void *b) {\n    double r1 = (*(double(*)[3])a)[2];\n    double r2 = (*(double(*)[3])b)[2];\n    return (r1 < r2) - (r1 > r2);\n}\n\ndouble maximizeValue(int n, double W, double weights[], double values[]) {\n    double items[n][3];\n    for (int i = 0; i < n; i++) {\n        items[i][0] = weights[i];\n        items[i][1] = values[i];\n        items[i][2] = values[i] / weights[i]; // value-to-weight ratio\n    }\n    \n    qsort(items, n, sizeof(items[0]), cmp);\n    \n    double maxValue = 0.0;\n    double currentWeight = 0.0;\n\n    for (int i = 0; i < n; i++) {\n        if (currentWeight + items[i][0] <= W) {\n            currentWeight += items[i][0];\n            maxValue += items[i][1];\n        } else {\n            double remainingWeight = W - currentWeight;\n            maxValue += items[i][2] * remainingWeight;\n            break;\n        }\n    }\n    \n    return maxValue;\n}\n\nint main() {\n    int N;\n    double W;\n    scanf(\"%d %lf\", &N, &W);\n    \n    double weights[N], values[N];\n    for (int i = 0; i < N; i++) {\n        scanf(\"%lf\", &weights[i]);\n    }\n    for (int i = 0; i < N; i++) {\n        scanf(\"%lf\", &values[i]);\n    }\n    \n    printf(\"%.6f\\n\", maximizeValue(N, W, weights, values));\n    return 0;\n}",
    "timestamp": "2025-08-13 06:36:29"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def maximize_value(N, W, w, v):\n    # Create DP table\n    dp = [[0] * (W + 1) for _ in range(N + 1)]\n    \n    # Fill DP table\n    for i in range(1, N + 1):\n        for j in range(W + 1):\n            # Don't take current item\n            dp[i][j] = dp[i-1][j]\n            \n            # Take current item if possible\n            if j >= w[i-1] and j <= W:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-w[i-1]] + v[i-1])\n    \n    # Return maximum value\n    return max(dp[N])",
    "timestamp": "2025-08-13 06:36:35"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def maximize_value(N, W, weights, values):\n    # Pair each value with its weight and sort by value per weight in descending order\n    items = sorted(zip(weights, values), key=lambda x: -x[1]/x[0])\n    max_value = 0.0\n    remaining_weight = W\n    \n    for w, v in items:\n        if remaining_weight <= 0:\n            break\n        # Take as much as possible of the best remaining item\n        take = min(w, remaining_weight)\n        max_value += take * (v / w)\n        remaining_weight -= take\n    \n    return max_value",
    "timestamp": "2025-08-13 06:36:42"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nstruct Item {\n    double value_per_weight;\n    int index;\n};\n\nbool compare(Item a, Item b) {\n    return a.value_per_weight > b.value_per_weight;\n}\n\ndouble fractionalKnapsack(int N, double W, vector<double>& weights, vector<double>& values) {\n    vector<Item> items(N);\n    for (int i = 0; i < N; ++i) {\n        items[i] = {values[i] / weights[i], i};\n    }\n\n    sort(items.begin(), items.end(), compare);\n\n    double max_value = 0.0;\n    double remaining_weight = W;\n    \n    for (int i = 0; i < N; ++i) {\n        if (remaining_weight <= 0) break;\n\n        int idx = items[i].index;\n        double weight_to_add = min(remaining_weight, weights[idx]);\n        max_value += weight_to_add * items[i].value_per_weight;\n        remaining_weight -= weight_to_add;\n    }\n\n    return max_value;\n}\n\nint main() {\n    int N;\n    double W;\n    cin >> N >> W;\n    vector<double> weights(N), values(N);\n    for (int i = 0; i < N; ++i) cin >> weights[i];\n    for (int i = 0; i < N; ++i) cin >> values[i];\n\n    double max_value = fractionalKnapsack(N, W, weights, values);\n    cout << max_value << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:33:00"
  }
]