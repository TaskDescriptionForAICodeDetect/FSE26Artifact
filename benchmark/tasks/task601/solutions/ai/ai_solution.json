[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    double x, y;\n} Point;\n\ntypedef struct {\n    Point center;\n    double radius;\n} Circle;\n\nvoid findTangentLines(Point p, Circle c, Point* tangent1, Point* tangent2) {\n    double dx = p.x - c.center.x;\n    double dy = p.y - c.center.y;\n    double dist = sqrt(dx*dx + dy*dy);\n\n    if (dist < c.radius) {\n        tangent1->x = tangent2->x = -1;\n        tangent1->y = tangent2->y = -1;\n        return;\n    }\n\n    double angle = atan2(dy, dx);\n    double theta = acos(c.radius / dist);\n\n    tangent1->x = c.center.x + c.radius * cos(angle + theta);\n    tangent1->y = c.center.y + c.radius * sin(angle + theta);\n    \n    tangent2->x = c.center.x + c.radius * cos(angle - theta);\n    tangent2->y = c.center.y + c.radius * sin(angle - theta);\n}",
    "timestamp": "2025-08-05 22:16:54"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ntypedef struct {\n    double x, y;\n} Point;\n\ntypedef struct {\n    Point center;\n    double radius;\n} Circle;\n\nvoid find_tangents(Point p, Circle c) {\n    double dx = p.x - c.center.x;\n    double dy = p.y - c.center.y;\n    double dx2 = dx * dx;\n    double dy2 = dy * dy;\n    double r2 = c.radius * c.radius;\n    double d2 = dx2 + dy2;\n    \n    if (d2 < r2) {\n        printf(\"No tangents: point is inside the circle.\\n\");\n        return;\n    }\n    \n    if (d2 == r2) {\n        printf(\"One tangent: point is on the circle.\\n\");\n        printf(\"Tangent line: %.2fx + %.2fy = %.2f\\n\", \n               dx, dy, dx * p.x + dy * p.y);\n        return;\n    }\n    \n    double d = sqrt(d2);\n    double r = c.radius;\n    double a = r2 / d;\n    double h = sqrt(r2 - a * a);\n    \n    double x1 = c.center.x + (a * dx - h * dy) / d;\n    double y1 = c.center.y + (a * dy + h * dx) / d;\n    double x2 = c.center.x + (a * dx + h * dy) / d;\n    double y2 = c.center.y + (a * dy - h * dx) / d;\n    \n    printf(\"Two tangent lines:\\n\");\n    printf(\"Line 1: %.2fx + %.2fy = %.2f\\n\", \n           (y1 - p.y), (p.x - x1), (x1 * p.y - y1 * p.x));\n    printf(\"Line 2: %.2fx + %.2fy = %.2f\\n\", \n           (y2 - p.y), (p.x - x2), (x2 * p.y - y2 * p.x));\n}\n\nint main() {\n    Point p = {0.0, 0.0};\n    Circle c = {{4.0, 0.0}, 2.0};\n    find_tangents(p, c);\n    return 0;\n}",
    "timestamp": "2025-08-05 22:17:15"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <utility>\n\nusing namespace std;\n\nstruct Point {\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n    Circle(Point c = Point(), double r = 0) : center(c), radius(r) {}\n};\n\nvector<pair<Point, Point>> findTangents(Point p, Circle c) {\n    vector<pair<Point, Point>> tangents;\n    double dx = p.x - c.center.x;\n    double dy = p.y - c.center.y;\n    double dsq = dx * dx + dy * dy;\n    double rsq = c.radius * c.radius;\n\n    if (dsq < rsq) {\n        return tangents;\n    }\n\n    double d = sqrt(dsq);\n    double a = rsq / d;\n    double h = sqrt(rsq - a * a);\n\n    double nx = dx / d;\n    double ny = dy / d;\n\n    double tx1 = a * nx - h * ny;\n    double ty1 = a * ny + h * nx;\n    double tx2 = a * nx + h * ny;\n    double ty2 = a * ny - h * nx;\n\n    Point t1(c.center.x + tx1, c.center.y + ty1);\n    Point t2(c.center.x + tx2, c.center.y + ty2);\n\n    tangents.push_back({p, t1});\n    tangents.push_back({p, t2});\n\n    return tangents;\n}\n\nint main() {\n    Point p;\n    Circle c;\n    cin >> p.x >> p.y;\n    cin >> c.center.x >> c.center.y >> c.radius;\n\n    auto tangents = findTangents(p, c);\n\n    for (const auto& tangent : tangents) {\n        cout << \"(\" << tangent.first.x << \", \" << tangent.first.y << \") -> \";\n        cout << \"(\" << tangent.second.x << \", \" << tangent.second.y << \")\\n\";\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:17:35"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Point {\n    double x, y;\n\n    Point(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nclass Circle {\n    Point center;\n    double radius;\n\n    Circle(Point center, double radius) {\n        this.center = center;\n        this.radius = radius;\n    }\n}\n\nclass Line {\n    double a, b, c;\n\n    Line(double a, double b, double c) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n    }\n}\n\npublic class TangentLines {\n    public static List<Line> findTangentLines(Point p, Circle c) {\n        List<Line> tangents = new ArrayList<>();\n        double dx = c.center.x - p.x;\n        double dy = c.center.y - p.y;\n        double dSquared = dx * dx + dy * dy;\n        double rSquared = c.radius * c.radius;\n\n        if (dSquared < rSquared) {\n            return tangents;\n        }\n\n        if (dSquared == rSquared) {\n            double a = dx;\n            double b = dy;\n            double lineC = -(a * p.x + b * p.y);\n            tangents.add(new Line(a, b, lineC));\n            return tangents;\n        }\n\n        double d = Math.sqrt(dSquared);\n        double r = c.radius;\n        double v = r * r / d;\n        double h = Math.sqrt(r * r - v * v);\n\n        double tx1 = p.x + (v * dx - h * dy) / d;\n        double ty1 = p.y + (v * dy + h * dx) / d;\n        double tx2 = p.x + (v * dx + h * dy) / d;\n        double ty2 = p.y + (v * dy - h * dx) / d;\n\n        double a1 = ty1 - p.y;\n        double b1 = p.x - tx1;\n        double c1 = tx1 * p.y - p.x * ty1;\n        tangents.add(new Line(a1, b1, c1));\n\n        double a2 = ty2 - p.y;\n        double b2 = p.x - tx2;\n        double c2 = tx2 * p.y - p.x * ty2;\n        tangents.add(new Line(a2, b2, c2));\n\n        return tangents;\n    }\n}",
    "timestamp": "2025-08-05 22:17:57"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.awt.geom.Point2D;\n\npublic class TangentLines {\n    public static Point2D[] findTangentPoints(Point2D p, Point2D circleCenter, double radius) {\n        double dx = circleCenter.getX() - p.getX();\n        double dy = circleCenter.getY() - p.getY();\n        double distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance < radius) {\n            return new Point2D[0];\n        }\n        \n        double angle = Math.atan2(dy, dx);\n        double tangentAngle = Math.acos(radius / distance);\n        \n        Point2D tangent1 = new Point2D.Double(\n            circleCenter.getX() + radius * Math.cos(angle + tangentAngle),\n            circleCenter.getY() + radius * Math.sin(angle + tangentAngle)\n        );\n        \n        Point2D tangent2 = new Point2D.Double(\n            circleCenter.getX() + radius * Math.cos(angle - tangentAngle),\n            circleCenter.getY() + radius * Math.sin(angle - tangentAngle)\n        );\n        \n        return new Point2D[]{tangent1, tangent2};\n    }\n}",
    "timestamp": "2025-08-05 22:18:02"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n\nstruct Point {\n    double x, y;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nstd::vector<Point> findTangentPoints(Point p, Circle c) {\n    std::vector<Point> tangentPoints;\n    double dx = c.center.x - p.x;\n    double dy = c.center.y - p.y;\n    double dist = std::sqrt(dx * dx + dy * dy);\n\n    if (dist < c.radius) return tangentPoints;\n\n    double angle = std::atan2(dy, dx);\n    double offsetAngle = std::acos(c.radius / dist);\n\n    Point t1, t2;\n    t1.x = c.center.x + c.radius * std::cos(angle + offsetAngle);\n    t1.y = c.center.y + c.radius * std::sin(angle + offsetAngle);\n    t2.x = c.center.x + c.radius * std::cos(angle - offsetAngle);\n    t2.y = c.center.y + c.radius * std::sin(angle - offsetAngle);\n\n    tangentPoints.push_back(t1);\n    tangentPoints.push_back(t2);\n\n    return tangentPoints;\n}",
    "timestamp": "2025-08-05 22:18:07"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import math\n\ndef find_tangent_lines(point, circle_center, circle_radius):\n    px, py = point\n    cx, cy = circle_center\n    cr = circle_radius\n\n    dx, dy = px - cx, py - cy\n    dist_sq = dx ** 2 + dy ** 2\n    r_sq = cr ** 2\n    if dist_sq <= r_sq:\n        return []  # No tangent lines if point is inside the circle or on the circle.\n\n    # Calculate tangents using line equations derived from geometry.\n    tangents = []\n\n    # For two tangents, we solve equations given the locus\n    # d = sqrt(dist_sq - r_sq) (distance from circle center to tangent line)\n    d = math.sqrt(dist_sq - r_sq)\n    # Normalize direction vector from center to point\n    norm = math.sqrt(dist_sq)\n    unx, uny = dx / norm, dy / norm\n\n    # Tangent points offsets\n    offset_x = cr * uny\n    offset_y = -cr * unx\n\n    # First tangent line passing through (tx1, ty1)\n    tx1 = cx + d * unx + offset_x\n    ty1 = cy + d * uny + offset_y\n\n    slope1 = (ty1 - py) / (tx1 - px) if tx1 - px != 0 else float('inf')\n    tangents.append({'point': (tx1, ty1), 'slope': slope1})\n\n    # Second tangent line passing through (tx2, ty2)\n    tx2 = cx + d * unx - offset_x\n    ty2 = cy + d * uny - offset_y\n\n    slope2 = (ty2 - py) / (tx2 - px) if tx2 - px != 0 else float('inf')\n    tangents.append({'point': (tx2, ty2), 'slope': slope2})\n\n    return tangents\n\n# Example usage:\npoint = (5, 5)\ncircle_center = (0, 0)\ncircle_radius = 3\n\ntangent_lines = find_tangent_lines(point, circle_center, circle_radius)\nfor tangent in tangent_lines:\n    print(f\"Tangent through point {tangent['point']} with slope {tangent['slope']}\")",
    "timestamp": "2025-08-13 09:49:56"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.awt.geom.Point2D;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class TangentLinesFromPointToCircle {\n\n    public static List<Line> findTangentLines(Point2D point, Circle circle) {\n        List<Line> tangents = new ArrayList<>();\n        \n        double dx = point.getX() - circle.getCenter().getX();\n        double dy = point.getY() - circle.getCenter().getY();\n        double distSq = dx * dx + dy * dy;\n        double radiusSq = circle.getRadius() * circle.getRadius();\n\n        if (distSq <= radiusSq) {\n            return tangents; // No tangents: the point is inside or on the circle\n        }\n\n        double distance = Math.sqrt(distSq);\n        double radialDistance = circle.getRadius() / distance;\n\n        double xTangentBase = radialDistance * dx;\n        double yTangentBase = radialDistance * dy;\n\n        double tangentDistance = Math.sqrt(distSq - radiusSq);\n\n        double xPerpendicular = tangentDistance * dy / distance;\n        double yPerpendicular = -tangentDistance * dx / distance;\n\n        Point2D tangentPoint1 = new Point2D.Double(\n            circle.getCenter().getX() + xTangentBase + xPerpendicular,\n            circle.getCenter().getY() + yTangentBase + yPerpendicular\n        );\n\n        Point2D tangentPoint2 = new Point2D.Double(\n            circle.getCenter().getX() + xTangentBase - xPerpendicular,\n            circle.getCenter().getY() + yTangentBase - yPerpendicular\n        );\n\n        tangents.add(new Line(point, tangentPoint1));\n        tangents.add(new Line(point, tangentPoint2));\n\n        return tangents;\n    }\n    \n    public static class Circle {\n        private Point2D center;\n        private double radius;\n\n        public Circle(Point2D center, double radius) {\n            this.center = center;\n            this.radius = radius;\n        }\n\n        public Point2D getCenter() {\n            return center;\n        }\n\n        public double getRadius() {\n            return radius;\n        }\n    }\n\n    public static class Line {\n        private Point2D startPoint;\n        private Point2D endPoint;\n\n        public Line(Point2D startPoint, Point2D endPoint) {\n            this.startPoint = startPoint;\n            this.endPoint = endPoint;\n        }\n\n        public Point2D getStartPoint() {\n            return startPoint;\n        }\n\n        public Point2D getEndPoint() {\n            return endPoint;\n        }\n    }\n}",
    "timestamp": "2025-08-13 09:50:00"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <math.h>\n\n// Structure to represent a point in 2D space\ntypedef struct {\n    double x, y;\n} Point;\n\n// Function to calculate the tangent points from a point to a circle\nvoid findTangentLines(Point p, Point c, double r) {\n    double dx = p.x - c.x;\n    double dy = p.y - c.y;\n    double dist_sq = dx * dx + dy * dy;\n    double r_sq = r * r;\n    if (dist_sq <= r_sq) {\n        printf(\"No tangents exist.\\n\");\n        return;\n    }\n    double dist = sqrt(dist_sq);\n    double angle_to_point = atan2(dy, dx);\n\n    double angle_offset = acos(r / dist);\n\n    double t1 = angle_to_point + angle_offset;\n    double t2 = angle_to_point - angle_offset;\n\n    Point tangent1 = {c.x + r * cos(t1), c.y + r * sin(t1)};\n    Point tangent2 = {c.x + r * cos(t2), c.y + r * sin(t2)};\n\n    printf(\"Tangent points on circle: (%f, %f) and (%f, %f)\\n\", tangent1.x, tangent1.y, tangent2.x, tangent2.y);\n}\n\nint main() {\n    Point p = {5.0, 0.0}; // Point outside the circle\n    Point c = {0.0, 0.0}; // Center of the circle\n    double r = 1.0;       // Radius of the circle\n\n    findTangentLines(p, c, r);\n\n    return 0;\n}",
    "timestamp": "2025-08-13 09:50:04"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Circle:\n    def __init__(self, center, radius):\n        self.center = center\n        self.radius = radius\n\ndef find_tangent_lines(point, circle):\n    # Distance between point and circle center\n    dx = point.x - circle.center.x\n    dy = point.y - circle.center.y\n    d = math.sqrt(dx**2 + dy**2)\n    \n    # Check if point is inside the circle\n    if d <= circle.radius:\n        return []\n    \n    # Angle between line connecting centers and tangent lines\n    angle = math.acos(circle.radius / d)\n    \n    # Angle of line connecting centers\n    center_angle = math.atan2(dy, dx)\n    \n    # Calculate tangent points\n    t1_angle = center_angle + angle\n    t2_angle = center_angle - angle\n    \n    tangent1_x = circle.center.x + circle.radius * math.cos(t1_angle)\n    tangent1_y = circle.center.y + circle.radius * math.sin(t1_angle)\n    \n    tangent2_x = circle.center.x + circle.radius * math.cos(t2_angle)\n    tangent2_y = circle.center.y + circle.radius * math.sin(t2_angle)\n    \n    return [\n        (Point(tangent1_x, tangent1_y), point),\n        (Point(tangent2_x, tangent2_y), point)\n    ]",
    "timestamp": "2025-08-13 09:50:14"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import math\n\ndef find_tangent_lines(p, c, r):\n    x0, y0 = p\n    cx, cy = c\n    dx = x0 - cx\n    dy = y0 - cy\n    d_squared = dx * dx + dy * dy\n    r_squared = r * r\n    \n    if d_squared < r_squared:\n        return []\n    elif d_squared == r_squared:\n        return [(x0, y0)]\n    \n    d = math.sqrt(d_squared)\n    a = r_squared / d\n    h = math.sqrt(r_squared - a * a)\n    \n    a_over_d = a / d\n    h_over_d = h / d\n    \n    x1 = cx + a_over_d * dx\n    y1 = cy + a_over_d * dy\n    \n    x2 = x1 - h_over_d * dy\n    y2 = y1 + h_over_d * dx\n    \n    x3 = x1 + h_over_d * dy\n    y3 = y1 - h_over_d * dx\n    \n    return [(x2, y2), (x3, y3)]",
    "timestamp": "2025-08-13 09:50:26"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <cmath>\n#include <utility>\n\nusing namespace std;\n\npair<pair<double, double>, pair<double, double>> findTangentLines(double px, double py, double cx, double cy, double r) {\n    double dx = px - cx;\n    double dy = py - cy;\n    double dist_sq = dx * dx + dy * dy;\n    double r_sq = r * r;\n    double k = r_sq / dist_sq;\n    double sqrt_k = sqrt(k);\n    double scale = sqrt(1 - k);\n\n    double t1x = cx + sqrt_k * dx + scale * -dy;\n    double t1y = cy + sqrt_k * dy + scale * dx;\n    double t2x = cx + sqrt_k * dx - scale * -dy;\n    double t2y = cy + sqrt_k * dy - scale * dx;\n\n    return {{t1x, t1y}, {t2x, t2y}};\n}\n\nint main() {\n    double px, py, cx, cy, r;\n    \n    cout << \"Enter the point coordinates (px, py): \";\n    cin >> px >> py;\n    cout << \"Enter the circle center coordinates (cx, cy) and radius r: \";\n    cin >> cx >> cy >> r;\n    \n    auto tangents = findTangentLines(px, py, cx, cy, r);\n    \n    cout << \"Tangent Points: \\n\";\n    cout << \"T1: (\" << tangents.first.first << \", \" << tangents.first.second << \")\\n\";\n    cout << \"T2: (\" << tangents.second.first << \", \" << tangents.second.second << \")\\n\";\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 11:55:05"
  }
]