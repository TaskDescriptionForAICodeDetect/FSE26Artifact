[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_N 1000\n\ntypedef struct {\n    char color;\n    int count;\n} Block;\n\nint simulate(char *s, int n, int pos, char new_color) {\n    char *temp = (char *)malloc((n + 1) * sizeof(char));\n    strcpy(temp, s);\n    temp[pos] = new_color;\n\n    int changed;\n    do {\n        changed = 0;\n        Block blocks[MAX_N];\n        int block_count = 0;\n        for (int i = 0; i < strlen(temp); ) {\n            char current = temp[i];\n            int count = 0;\n            while (i < strlen(temp) && temp[i] == current) {\n                i++;\n                count++;\n            }\n            blocks[block_count].color = current;\n            blocks[block_count].count = count;\n            block_count++;\n        }\n\n        char new_temp[MAX_N + 1];\n        int new_len = 0;\n        for (int i = 0; i < block_count; i++) {\n            if (blocks[i].count >= 4) {\n                changed = 1;\n            } else {\n                for (int j = 0; j < blocks[i].count; j++) {\n                    new_temp[new_len++] = blocks[i].color;\n                }\n            }\n        }\n        new_temp[new_len] = '\\0';\n        strcpy(temp, new_temp);\n    } while (changed);\n\n    int result = strlen(temp);\n    free(temp);\n    return result;\n}\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    char s[MAX_N + 1];\n    scanf(\"%s\", s);\n\n    int min_remain = N;\n    for (int i = 0; i < N; i++) {\n        char original = s[i];\n        for (char c = 'A'; c <= 'C'; c++) {\n            if (c == original) continue;\n            int remain = simulate(s, N, i, c);\n            if (remain < min_remain) {\n                min_remain = remain;\n            }\n        }\n    }\n\n    printf(\"%d\\n\", min_remain);\n    return 0;\n}",
    "timestamp": "2025-08-05 18:47:36"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class CharacterColorGame {\n    public static int minimumRemainingCharacters(String colors) {\n        int n = colors.length();\n        int minRemaining = n;\n\n        for (int pos = 0; pos < n; pos++) {\n            for (char newColor : new char[]{'R', 'B', 'Y'}) {\n                StringBuilder current = new StringBuilder(colors);\n                current.setCharAt(pos, newColor);\n                minRemaining = Math.min(minRemaining, simulateRemoval(current.toString()));\n            }\n        }\n\n        return minRemaining;\n    }\n\n    private static int simulateRemoval(String colors) {\n        StringBuilder sb = new StringBuilder(colors);\n        boolean changed;\n\n        do {\n            changed = false;\n            for (int i = 0; i < sb.length(); ) {\n                int start = i;\n                char currentColor = sb.charAt(i);\n                while (i < sb.length() && sb.charAt(i) == currentColor) {\n                    i++;\n                }\n\n                if (i - start >= 4) {\n                    sb.delete(start, i);\n                    changed = true;\n                    i = start;\n                }\n            }\n        } while (changed);\n\n        return sb.length();\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String colors = scanner.nextLine();\n        System.out.println(minimumRemainingCharacters(colors));\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 18:47:43"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring simulate(string s, int pos, char new_color) {\n    if (s[pos] == new_color) return s;\n    s[pos] = new_color;\n    bool changed;\n    do {\n        changed = false;\n        int n = s.size();\n        if (n < 4) break;\n        vector<bool> to_remove(n, false);\n        for (int i = 0; i <= n - 4; ++i) {\n            if (s[i] == s[i+1] && s[i] == s[i+2] && s[i] == s[i+3]) {\n                to_remove[i] = to_remove[i+1] = to_remove[i+2] = to_remove[i+3] = true;\n                changed = true;\n            }\n        }\n        if (changed) {\n            string new_s;\n            for (int i = 0; i < n; ++i) {\n                if (!to_remove[i]) new_s += s[i];\n            }\n            s = new_s;\n        }\n    } while (changed);\n    return s;\n}\n\nint main() {\n    int N;\n    string colors;\n    cin >> N >> colors;\n    \n    int min_remain = N;\n    for (int i = 0; i < N; ++i) {\n        for (char c : {'R', 'B', 'Y'}) {\n            string new_colors = simulate(colors, i, c);\n            if (new_colors.size() < min_remain) {\n                min_remain = new_colors.size();\n            }\n        }\n    }\n    cout << min_remain << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 18:48:01"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <limits.h>\n\n#define MAX_N 100\n\nchar colors[MAX_N];\nint n;\n\nint check_disappear(char* arr) {\n    int count = 1;\n    int remaining = n;\n    \n    for (int i = 1; i < n; i++) {\n        if (arr[i] == arr[i-1]) {\n            count++;\n        } else {\n            count = 1;\n        }\n        \n        if (count >= 4) {\n            int j = i;\n            while (j >= 0 && arr[j] == arr[i]) {\n                arr[j] = '*';\n                j--;\n                remaining--;\n            }\n            \n            i = j + 1;\n            count = 1;\n        }\n    }\n    \n    return remaining;\n}\n\nint solve() {\n    int min_remaining = INT_MAX;\n    \n    for (int pos = 0; pos < n; pos++) {\n        for (char new_color = 'R'; new_color <= 'Y'; new_color++) {\n            if (new_color == colors[pos]) continue;\n            \n            char temp[MAX_N];\n            strcpy(temp, colors);\n            temp[pos] = new_color;\n            \n            int remaining = check_disappear(temp);\n            min_remaining = (remaining < min_remaining) ? remaining : min_remaining;\n        }\n    }\n    \n    return min_remaining;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    scanf(\"%s\", colors);\n    \n    printf(\"%d\\n\", solve());\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 18:48:07"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <vector>\n#include <string>\n#include <algorithm>\n#include <climits>\n\nclass Solution {\npublic:\n    int minimumRemaining(int N, std::string colors) {\n        int minRemaining = N;\n        \n        for (int i = 0; i < N; i++) {\n            for (char newColor : {'R', 'B', 'Y'}) {\n                if (newColor == colors[i]) continue;\n                \n                std::string modifiedColors = colors;\n                modifiedColors[i] = newColor;\n                \n                int remaining = simulateRemoval(modifiedColors);\n                minRemaining = std::min(minRemaining, remaining);\n            }\n        }\n        \n        return minRemaining;\n    }\n    \nprivate:\n    int simulateRemoval(std::string& colors) {\n        bool change = true;\n        \n        while (change) {\n            change = false;\n            std::vector<bool> toRemove(colors.length(), false);\n            \n            for (int i = 0; i < colors.length(); i++) {\n                int count = 1;\n                \n                // Check consecutive characters\n                for (int j = i + 1; j < colors.length() && colors[j] == colors[i]; j++) {\n                    count++;\n                }\n                \n                if (count >= 4) {\n                    for (int j = i; j < colors.length() && colors[j] == colors[i] && count >= 4; j++) {\n                        toRemove[j] = true;\n                        count--;\n                    }\n                    change = true;\n                }\n            }\n            \n            // Remove marked characters\n            std::string newColors;\n            for (int i = 0; i < colors.length(); i++) {\n                if (!toRemove[i]) {\n                    newColors += colors[i];\n                }\n            }\n            \n            colors = newColors;\n        }\n        \n        return colors.length();\n    }\n};",
    "timestamp": "2025-08-05 18:48:15"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class GameCharacters {\n    public static int minRemainingCharacters(String colors) {\n        int minRemaining = Integer.MAX_VALUE;\n        char[] colorArray = colors.toCharArray();\n        int n = colorArray.length;\n        \n        for (int i = 0; i < n; i++) {\n            char originalColor = colorArray[i];\n            for (char newColor : new char[]{'R', 'B', 'Y'}) {\n                if (newColor == originalColor) continue;\n                colorArray[i] = newColor;\n                String newColors = new String(colorArray);\n                int remaining = simulate(newColors);\n                if (remaining < minRemaining) {\n                    minRemaining = remaining;\n                }\n            }\n            colorArray[i] = originalColor;\n        }\n        \n        return minRemaining == Integer.MAX_VALUE ? n : minRemaining;\n    }\n    \n    private static int simulate(String colors) {\n        StringBuilder sb = new StringBuilder(colors);\n        boolean changed;\n        \n        do {\n            changed = false;\n            for (int i = 0; i <= sb.length() - 4; ) {\n                int j = i;\n                while (j < sb.length() && sb.charAt(j) == sb.charAt(i)) {\n                    j++;\n                }\n                if (j - i >= 4) {\n                    sb.delete(i, j);\n                    changed = true;\n                } else {\n                    i++;\n                }\n            }\n        } while (changed);\n        \n        return sb.length();\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String colors = scanner.next();\n        System.out.println(minRemainingCharacters(colors));\n    }\n}",
    "timestamp": "2025-08-05 18:49:00"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def minimize_characters(colors):\n    def trigger_reaction(start_idx, end_idx):\n        length = len(colors)\n        i = start_idx - 1\n        j = end_idx + 1\n        while i >= 0 and j < length and colors[i] == colors[j]:\n            left_ch_count, right_ch_count = 1, 1\n            while i > 0 and colors[i] == colors[i - 1]:\n                i -= 1\n                left_ch_count += 1\n            while j < length - 1 and colors[j] == colors[j + 1]:\n                j += 1\n                right_ch_count += 1\n            if left_ch_count + right_ch_count >= 4:\n                i -= 1\n                j += 1\n            else:\n                break\n        return colors[:i + 1] + colors[j:]\n\n    n = len(colors)\n    min_remaining = n\n    \n    for i in range(n):\n        original_color = colors[i]\n        for new_color in ['R', 'B', 'Y']:\n            if new_color == original_color:\n                continue\n\n            colors[i] = new_color\n            modified_colors = colors[:]\n            start, end = i, i\n\n            # Check and trigger reaction\n            while start >= 0 and start - 1 >= 0 and modified_colors[start - 1] == new_color:\n                start -= 1\n            while end < n and end + 1 < n and modified_colors[end + 1] == new_color:\n                end += 1\n\n            if end - start + 1 >= 4:\n                modified_colors = trigger_reaction(start, end)\n\n            min_remaining = min(min_remaining, len(modified_colors))\n            colors[i] = original_color\n\n    return min_remaining\n\n# Example usage\ncolors = ['R', 'B', 'Y', 'R', 'R', 'B', 'R', 'Y', 'Y']\nprint(minimize_characters(colors))",
    "timestamp": "2025-08-13 00:58:46"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class ColorGame {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        scanner.nextLine();\n        String colors = scanner.nextLine();\n        System.out.println(findMinCharactersRemaining(N, colors));\n        scanner.close();\n    }\n\n    private static int findMinCharactersRemaining(int N, String colors) {\n        int minRemaining = N;\n        for (int i = 0; i < N; i++) {\n            for (char color : new char[]{'R', 'B', 'Y'}) {\n                if (colors.charAt(i) != color) {\n                    String newColors = colors.substring(0, i) + color + colors.substring(i + 1);\n                    int remaining = simulate(newColors);\n                    minRemaining = Math.min(minRemaining, remaining);\n                }\n            }\n        }\n        return minRemaining;\n    }\n\n    private static int simulate(String colors) {\n        List<Character> stack = new ArrayList<>();\n        for (char color : colors.toCharArray()) {\n            if (!stack.isEmpty() && stack.get(stack.size() - 1) == color) {\n                stack.add(color);\n                if (stack.size() >= 4 && sameColor(stack)) {\n                    while (!stack.isEmpty() && stack.get(stack.size() - 1) == color) {\n                        stack.remove(stack.size() - 1);\n                    }\n                }\n            } else {\n                stack.add(color);\n            }\n        }\n        return stack.size();\n    }\n\n    private static boolean sameColor(List<Character> stack) {\n        int size = stack.size();\n        char color = stack.get(size - 1);\n        for (int i = 1; i <= 4; i++) {\n            if (size - i < 0 || stack.get(size - i) != color) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
    "timestamp": "2025-08-13 00:58:53"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n\nvoid checkAndCollapse(char *arr, int *n) {\n    int i = 0;\n    while (i < *n) {\n        int count = 1;\n        char curr = arr[i];\n        while (i + count < *n && arr[i + count] == curr) {\n            ++count;\n        }\n        if (count >= 4) {\n            memmove(arr + i, arr + i + count, *n - (i + count));\n            *n -= count;\n            i = 0; // Start again to handle chain reactions\n        } else {\n            ++i;\n        }\n    }\n}\n\nint minRemainingChars(char *colors) {\n    int n = strlen(colors);\n    int minRemaining = n;\n\n    for (int i = 0; i < n; i++) {\n        char original = colors[i];\n        for (char newColor = 'R'; newColor <= 'Y'; ++newColor) {\n            if (newColor == original) continue;\n            colors[i] = newColor;\n            int len = n;\n            checkAndCollapse(colors, &len);\n            if (len < minRemaining) {\n                minRemaining = len;\n            }\n        }\n        colors[i] = original;\n    }\n    \n    return minRemaining;\n}\n\nint main() {\n    char colors[51];\n    scanf(\"%s\", colors);\n    printf(\"%d\\n\", minRemainingChars(colors));\n    return 0;\n}",
    "timestamp": "2025-08-13 00:58:56"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def simulate_game(colors):\n    while True:\n        removed = False\n        i = 0\n        while i < len(colors):\n            if i + 3 < len(colors) and colors[i] == colors[i+1] == colors[i+2] == colors[i+3]:\n                colors = colors[:i] + colors[i+4:]\n                removed = True\n                break\n            i += 1\n        if not removed:\n            break\n    return len(colors)\n\ndef solve_problem(colors):\n    min_remaining = len(colors)\n    colors_list = list(colors)\n    \n    for i in range(len(colors)):\n        for color in ['R', 'B', 'Y']:\n            if colors[i] != color:\n                test_colors = colors_list.copy()\n                test_colors[i] = color\n                remaining = simulate_game(test_colors)\n                min_remaining = min(min_remaining, remaining)\n    \n    return min_remaining\n\n# Example usage\nN = int(input())\ncolors = input().strip()\nresult = solve_problem(colors)\nprint(result)",
    "timestamp": "2025-08-13 00:59:06"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve():\n    import sys\n    from itertools import product\n\n    N = int(sys.stdin.readline())\n    S = sys.stdin.readline().strip()\n    colors = ['R', 'B', 'Y']\n    min_remain = N\n\n    for i in range(N):\n        original_color = S[i]\n        for c in colors:\n            if c == original_color:\n                continue\n            new_S = S[:i] + c + S[i+1:]\n            stack = []\n            changed = True\n            current = list(new_S)\n            \n            while changed:\n                changed = False\n                n = len(current)\n                if n < 4:\n                    break\n                i_start = 0\n                to_remove = set()\n                # Find consecutive sequences of 4 or more\n                for j in range(1, n+1):\n                    if j < n and current[j] == current[i_start]:\n                        continue\n                    else:\n                        if j - i_start >= 4:\n                            for k in range(i_start, j):\n                                to_remove.add(k)\n                            changed = True\n                        i_start = j\n                if to_remove:\n                    new_current = []\n                    for idx in range(n):\n                        if idx not in to_remove:\n                            new_current.append(current[idx])\n                    current = new_current\n            remain = len(current)\n            if remain < min_remain:\n                min_remain = remain\n    print(min_remain)\n\nsolve()",
    "timestamp": "2025-08-13 00:59:20"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint minRemainingCharacters(const string& characters) {\n    int N = characters.size();\n    int minRemaining = N;\n    \n    for(int i = 0; i < N; ++i) {\n        string colors = characters;\n        char originalColor = colors[i];\n        for(char newColor : {'R', 'B', 'Y'}) {\n            if(newColor != originalColor) {\n                colors[i] = newColor;\n                \n                bool changed = true;\n                while(changed) {\n                    changed = false;\n                    int start = 0;\n                    int end = 0;\n                    \n                    while(end < N) {\n                        while(end < N && colors[end] == colors[start]) ++end;\n                        \n                        if(end - start >= 4) {\n                            colors.erase(start, end - start);\n                            N = colors.size();\n                            changed = true;\n                            break;\n                        } else {\n                            start = end;\n                        }\n                    }\n                }\n                \n                minRemaining = min(minRemaining, static_cast<int>(colors.size()));\n            }\n        }\n    }\n    \n    return minRemaining;\n}\n\nint main() {\n    string characters;\n    cin >> characters;\n    cout << minRemainingCharacters(characters) << endl;\n    return 0;\n}",
    "timestamp": "2025-08-13 10:57:11"
  }
]