[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_K 1000000\n\nint isLunlun(int num) {\n    char str[10];\n    sprintf(str, \"%d\", num);\n    int len = strlen(str);\n    \n    for (int i = 0; i < len - 1; i++) {\n        if (abs(str[i] - str[i+1]) > 1) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint findKthLunlun(int K) {\n    if (K <= 10) return K - 1;\n    \n    int count = 10;\n    int current = 10;\n    \n    int queue[MAX_K];\n    int front = 0, rear = 0;\n    \n    for (int i = 1; i <= 9; i++) {\n        queue[rear++] = i;\n    }\n    \n    while (count < K) {\n        int num = queue[front++];\n        \n        int lastDigit = num % 10;\n        \n        if (lastDigit > 0) {\n            int newNum = num * 10 + (lastDigit - 1);\n            queue[rear++] = newNum;\n            count++;\n            if (count == K) return newNum;\n        }\n        \n        if (lastDigit < 9) {\n            int newNum = num * 10 + (lastDigit + 1);\n            queue[rear++] = newNum;\n            count++;\n            if (count == K) return newNum;\n        }\n    }\n    \n    return -1;\n}\n\nint main() {\n    int K;\n    scanf(\"%d\", &K);\n    \n    printf(\"%d\\n\", findKthLunlun(K));\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:33:25"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef long long ll;\n\ntypedef struct {\n    ll *data;\n    int size;\n    int capacity;\n} Queue;\n\nQueue* create_queue(int initial_capacity) {\n    Queue *q = (Queue*)malloc(sizeof(Queue));\n    q->data = (ll*)malloc(initial_capacity * sizeof(ll));\n    q->size = 0;\n    q->capacity = initial_capacity;\n    return q;\n}\n\nvoid enqueue(Queue *q, ll value) {\n    if (q->size == q->capacity) {\n        q->capacity *= 2;\n        q->data = (ll*)realloc(q->data, q->capacity * sizeof(ll));\n    }\n    q->data[q->size++] = value;\n}\n\nll dequeue(Queue *q) {\n    ll value = q->data[0];\n    memmove(q->data, q->data + 1, (q->size - 1) * sizeof(ll));\n    q->size--;\n    return value;\n}\n\nvoid free_queue(Queue *q) {\n    free(q->data);\n    free(q);\n}\n\nll find_kth_lunlun_number(int K) {\n    Queue *q = create_queue(10);\n    for (int i = 1; i <= 9; i++) {\n        enqueue(q, i);\n    }\n    \n    ll x = 0;\n    for (int i = 0; i < K; i++) {\n        x = dequeue(q);\n        ll last_digit = x % 10;\n        if (last_digit > 0) {\n            enqueue(q, x * 10 + (last_digit - 1));\n        }\n        enqueue(q, x * 10 + last_digit);\n        if (last_digit < 9) {\n            enqueue(q, x * 10 + (last_digit + 1));\n        }\n    }\n    free_queue(q);\n    return x;\n}\n\nint main() {\n    int K;\n    scanf(\"%d\", &K);\n    printf(\"%lld\\n\", find_kth_lunlun_number(K));\n    return 0;\n}",
    "timestamp": "2025-08-05 22:34:19"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <queue>\nusing namespace std;\n\nlong long findKthLunlunNumber(int K) {\n    queue<long long> q;\n    for (int i = 1; i <= 9; ++i) {\n        q.push(i);\n    }\n    \n    long long current;\n    for (int i = 1; i <= K; ++i) {\n        current = q.front();\n        q.pop();\n        long long lastDigit = current % 10;\n        if (lastDigit > 0) {\n            q.push(current * 10 + (lastDigit - 1));\n        }\n        q.push(current * 10 + lastDigit);\n        if (lastDigit < 9) {\n            q.push(current * 10 + (lastDigit + 1));\n        }\n    }\n    return current;\n}\n\nint main() {\n    int K;\n    cin >> K;\n    cout << findKthLunlunNumber(K) << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 22:34:30"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int K = sc.nextInt();\n        sc.close();\n\n        Queue<Long> queue = new LinkedList<>();\n        for (long i = 1; i <= 9; i++) {\n            queue.add(i);\n        }\n\n        long result = 0;\n        for (int i = 0; i < K; i++) {\n            result = queue.poll();\n            long lastDigit = result % 10;\n            if (lastDigit > 0) {\n                queue.add(result * 10 + (lastDigit - 1));\n            }\n            queue.add(result * 10 + lastDigit);\n            if (lastDigit < 9) {\n                queue.add(result * 10 + (lastDigit + 1));\n            }\n        }\n\n        System.out.println(result);\n    }\n}",
    "timestamp": "2025-08-05 22:34:41"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class LunlunNumber {\n    public static int findKthLunlunNumber(int K) {\n        if (K <= 9) return K;\n        \n        Queue<Integer> queue = new LinkedList<>();\n        for (int i = 1; i <= 9; i++) {\n            queue.offer(i);\n        }\n        \n        int count = 9;\n        while (count < K) {\n            int current = queue.poll();\n            int lastDigit = current % 10;\n            \n            for (int d : new int[]{lastDigit - 1, lastDigit + 1}) {\n                if (d >= 0 && d <= 9) {\n                    queue.offer(current * 10 + d);\n                    count++;\n                    if (count == K) {\n                        return current * 10 + d;\n                    }\n                }\n            }\n        }\n        \n        return -1;\n    }\n}",
    "timestamp": "2025-08-05 22:34:45"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "class Solution {\npublic:\n    int findKthLunlun(int K) {\n        if (K <= 9) return K;\n        \n        queue<long long> q;\n        for (int i = 1; i <= 9; i++) {\n            q.push(i);\n        }\n        \n        int count = 9;\n        while (!q.empty()) {\n            long long curr = q.front();\n            q.pop();\n            \n            int lastDigit = curr % 10;\n            \n            if (lastDigit > 0) {\n                long long num1 = curr * 10 + (lastDigit - 1);\n                q.push(num1);\n                count++;\n                if (count == K) return num1;\n            }\n            \n            if (lastDigit < 9) {\n                long long num2 = curr * 10 + (lastDigit + 1);\n                q.push(num2);\n                count++;\n                if (count == K) return num2;\n            }\n        }\n        \n        return -1;\n    }\n};",
    "timestamp": "2025-08-05 22:34:49"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "from collections import deque\n\ndef kth_lunlun_number(K):\n    queue = deque(range(1, 10))\n\n    for _ in range(K):\n        num = queue.popleft()\n        last_digit = num % 10\n        \n        if last_digit > 0:\n            queue.append(num * 10 + last_digit - 1)\n        \n        queue.append(num * 10 + last_digit)\n        \n        if last_digit < 9:\n            queue.append(num * 10 + last_digit + 1)\n\n    return num\n\n# Example usage:\n# K = 10\n# print(kth_lunlun_number(K))",
    "timestamp": "2025-08-13 11:24:54"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class LunlunNumber {\n  \n    public static long findKthLunlunNumber(int K) {\n        Queue<Long> queue = new LinkedList<>();\n        for (int i = 1; i <= 9; i++) {\n            queue.offer((long) i);\n        }\n\n        long lunlun = 0;\n        for (int i = 0; i < K; i++) {\n            lunlun = queue.poll();\n            long lastDigit = lunlun % 10;\n            \n            if (lastDigit > 0) {\n                queue.offer(lunlun * 10 + lastDigit - 1);\n            }\n            queue.offer(lunlun * 10 + lastDigit);\n            if (lastDigit < 9) {\n                queue.offer(lunlun * 10 + lastDigit + 1);\n            }\n        }\n        return lunlun;\n    }\n    \n    public static void main(String[] args) {\n        int K = 25; // Example\n        System.out.println(findKthLunlunNumber(K));\n    }\n}",
    "timestamp": "2025-08-13 11:25:02"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <queue>\n\nint main() {\n    int K;\n    scanf(\"%d\", &K);\n\n    std::queue<long long> lunlunQueue;\n\n    // Initialize the queue with single-digit lunlun numbers\n    for (int i = 1; i <= 9; i++) {\n        lunlunQueue.push(i);\n    }\n    \n    long long currentLunlunNumber = 0;\n    \n    // Generate lunlun numbers until we reach the K-th\n    for (int count = 0; count < K; count++) {\n        currentLunlunNumber = lunlunQueue.front();\n        lunlunQueue.pop();\n        \n        int lastDigit = currentLunlunNumber % 10;\n        \n        if (lastDigit > 0) {\n            lunlunQueue.push(currentLunlunNumber * 10 + (lastDigit - 1));\n        }\n        lunlunQueue.push(currentLunlunNumber * 10 + lastDigit);\n        if (lastDigit < 9) {\n            lunlunQueue.push(currentLunlunNumber * 10 + (lastDigit + 1));\n        }\n    }\n    \n    printf(\"%lld\\n\", currentLunlunNumber);\n    return 0;\n}",
    "timestamp": "2025-08-13 11:25:06"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function findKLunlunNumber(K) {\n    const queue = [];\n    for (let i = 1; i <= 9; i++) {\n        queue.push(i);\n    }\n\n    let count = 0;\n    while (queue.length > 0) {\n        const num = queue.shift();\n        count++;\n        if (count === K) return num;\n\n        const lastDigit = num % 10;\n        if (lastDigit > 0) {\n            queue.push(num * 10 + (lastDigit - 1));\n        }\n        queue.push(num * 10 + lastDigit);\n        if (lastDigit < 9) {\n            queue.push(num * 10 + (lastDigit + 1));\n        }\n    }\n    return -1;\n}",
    "timestamp": "2025-08-13 11:25:13"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def kthLunlunNumber(K):\n    if K <= 9:\n        return K\n\n    queue = list(range(1, 10))\n    count = 9\n\n    while count < K:\n        curr = queue.pop(0)\n        last_digit = curr % 10\n\n        for diff in [-1, 1]:\n            new_digit = last_digit + diff\n            if 0 <= new_digit <= 9:\n                new_num = curr * 10 + new_digit\n                queue.append(new_num)\n                count += 1\n\n                if count == K:\n                    return new_num\n\n    return -1",
    "timestamp": "2025-08-13 11:25:17"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "var kthLunlun = function(k) {\n    if (k <= 9) return k;\n    \n    let queue = Array.from({length: 9}, (_, i) => i + 1);\n    let count = 9;\n    \n    while (count < k) {\n        let curr = queue.shift();\n        let lastDigit = curr % 10;\n        \n        if (lastDigit > 0) {\n            let newNum = curr * 10 + (lastDigit - 1);\n            queue.push(newNum);\n            count++;\n            if (count === k) return newNum;\n        }\n        \n        if (lastDigit < 9) {\n            let newNum = curr * 10 + (lastDigit + 1);\n            queue.push(newNum);\n            count++;\n            if (count === k) return newNum;\n        }\n    }\n};",
    "timestamp": "2025-08-13 11:25:22"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "from collections import deque\n\ndef find_kth_lunlun_number(K):\n    queue = deque(range(1, 10))\n    count = 0\n    while queue:\n        num = queue.popleft()\n        count += 1\n        if count == K:\n            return num\n        last_digit = num % 10\n        for diff in [-1, 0, 1]:\n            next_digit = last_digit + diff\n            if 0 <= next_digit <= 9:\n                next_num = num * 10 + next_digit\n                queue.append(next_num)\n    return -1\n\nK = int(input())\nprint(find_kth_lunlun_number(K))",
    "timestamp": "2025-08-13 11:25:27"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function findKthLunlunNumber(K) {\n    let queue = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    let count = 0;\n    \n    while (queue.length > 0) {\n        const num = queue.shift();\n        count++;\n        \n        if (count === K) {\n            return num;\n        }\n        \n        const lastDigit = num % 10;\n        if (lastDigit > 0) {\n            queue.push(num * 10 + (lastDigit - 1));\n        }\n        queue.push(num * 10 + lastDigit);\n        if (lastDigit < 9) {\n            queue.push(num * 10 + (lastDigit + 1));\n        }\n    }\n    \n    return -1; // in case K is invalid\n}",
    "timestamp": "2025-08-13 11:25:32"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <queue>\n#include <vector>\n\nusing namespace std;\n\ntypedef long long ll;\n\nint main() {\n    int K;\n    cin >> K;\n\n    queue<ll> q;\n\n    for (int i = 1; i <= 9; ++i) {\n        q.push(i);\n    }\n    \n    ll lunlunNumber = 0;\n\n    for (int i = 0; i < K; ++i) {\n        lunlunNumber = q.front();\n        q.pop();\n        \n        int lastDigit = lunlunNumber % 10;\n        \n        if (lastDigit > 0) {\n            q.push(lunlunNumber * 10 + (lastDigit - 1));\n        }\n        \n        q.push(lunlunNumber * 10 + lastDigit);\n        \n        if (lastDigit < 9) {\n            q.push(lunlunNumber * 10 + (lastDigit + 1));\n        }\n    }\n\n    cout << lunlunNumber << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-13 12:03:33"
  }
]