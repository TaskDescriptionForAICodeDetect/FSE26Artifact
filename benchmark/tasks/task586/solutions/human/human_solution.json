[
  {
    "language": "Scala",
    "code": "import java.io._\nimport scala.io.StdIn.{readLine, readInt}\n\nobject Main {\n  val out:BufferedWriter =\n    new BufferedWriter(new OutputStreamWriter(new FileOutputStream(java.io.FileDescriptor.out), \"ASCII\"), 512)\n  var count = 0\n\n  def toZero(x:Double) = if(x == -0.0) 0.0 else x\n  def main(args:Array[String]) = {\n   val p = readLine.split(\" \").map(_.toDouble)\n   val n = readInt\n\n   val (x0,y0,x1,y1) = (p(0),p(1),p(2),p(3))\n   for(i<-0 until n) {\n     val p1 = readLine.split(\" \").map(_.toDouble)\n     val (x2,y2) = (p1(0),p1(1))\n     val sqrt = Math.pow(x1-x0,2) + Math.pow(y1-y0,2)\n     val inner = (x1-x0)*(x2-x0) + (y1-y0)*(y2-y0)\n     val (xt,yt) = (inner*(x1-x0)/sqrt + x0, inner*(y1-y0)/sqrt + y0)\n     out.write(toZero(xt).toString)\n     out.write(\" \")\n     out.write(toZero(yt).toString)\n     out.write(\"\\n\")\n     if(count<10) count += 1\n     else {\n      out.flush\n      count = 0\n     }\n   }\n   out.flush\n   out.close\n  }\n}"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn\n\nobject Main {\n\n  case class Point(x: Double = 0, y: Double = 0) {\n\n    def +(p: Point): Point = Point(this.x + p.x, this.y + p.y)\n\n    def -(p: Point): Point = Point(this.x - p.x, this.y - p.y)\n\n    def *(a: Double): Point = Point(this.x * a, this.y * a)\n\n    def /(a: Double): Point = {\n      assert(a == 0)\n      Point(this.x / a, this.y / a)\n    }\n\n    def norm(): Double = this.x * this.x + this.y * this.y\n\n    def abs(): Double = scala.math.sqrt(norm())\n\n    def <(p: Point): Boolean = this.x < p.x && this.y < p.y\n\n    private val EPS = 1 ^ (-10)\n\n    def ==(p: Point): Boolean = scala.math.abs(this.x - p.x) < EPS && scala.math.abs(this.y - p.y) < EPS\n\n\n  }\n\n  case class Segment(p1: Point, p2: Point)\n\n  type GeoVector = Point\n\n  object Cgl0A {\n\n    // 内積\n    def dot(a: Point, b: Point): Double = a.x * b.x + a.y * b.y\n\n    def isOrthogonal(a: GeoVector, b: GeoVector): Boolean = dot(a, b) == 0.0\n\n    def isOrthogonal(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isOrthogonal(a1 - a2, b1 - b2)\n    }\n\n    def isOrthogonal(s1: Segment, s2: Segment): Boolean = {\n      dot(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    // 外積\n    def cross(a: Point, b: Point): Double = a.x * b.y - a.y * b.x\n\n    def isParallel(a: GeoVector, b: GeoVector): Boolean = cross(a, b) == 0.0\n\n    def isParallel(a1: Point, a2: Point, b1: Point, b2: Point): Boolean = {\n      isParallel(a1 - a2, b1 - b2)\n    }\n\n    def isParallel(s1: Segment, s2: Segment): Boolean = {\n      cross(s1.p2 - s1.p1, s2.p2 - s2.p1) == 0.0\n    }\n\n    def project(s: Segment, p: Point): Point = {\n      val base: GeoVector = s.p2 - s.p1\n      val r: Double = Cgl0A.dot(p - s.p1, base) / base.norm()\n      s.p1 + base * r\n    }\n  }\n\n\n  def main(args: Array[String]): Unit = {\n    val a = StdIn.readLine().split(' ').map(_.toDouble)\n    val p1 = Point(a(0), a(1))\n    val p2 = Point(a(2), a(3))\n    val base = Segment(p1, p2)\n\n    val q = StdIn.readLine().toInt\n    (0 until q).foreach { i =>\n      val ai = StdIn.readLine().split(' ').map(_.toDouble)\n      val qi = Point(ai(0), ai(1))\n\n      val r = Cgl0A.project(base, qi)\n      println(f\"${r.x}%.8f  ${r.y}%.8f\")\n\n    }\n\n  }\n\n}\n"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn._\n\nimport Math._\nobject Main extends App {\n  val Seq(xp1, yp1, xp2, yp2) = readLine.split(' ').map(_.toDouble).toList\n  val vx1 = xp2 - xp1\n  val vy1 = yp2 - yp1\n\n\n  val q = readLine.toInt\n  for (i <- 0 until q) {\n    val Seq(x, y) = readLine.split(' ').map(_.toDouble).toList\n    val vx2 = x - xp1\n    val vy2 = y - yp1\n\n    val c = (vx1 * vx2 + vy1 * vy2) / (vx1 * vx1 + vy1 * vy1)\n\n    println(\"%.10f %.10f\".format(c * vx1 + xp1, c * vy1 + yp1))\n  }\n}\n\n"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn.{readLine,readInt}\nimport scala.math.pow\n\nobject Main {\n  def main(args: Array[String]) = {\n    val l = readLine() split \" \" map (_.toDouble)\n    val (vx, vy) = (l(2)-l(0), l(3)-l(1))\n    val n = readInt()\n\n    for( i <- 1 to n ) {\n      val l2 = readLine() split \" \" map (_.toDouble)\n      val (vx2, vy2) = (l2(0)-l(0), l2(1)-l(1))\n      val sqr = pow(vx,2) + pow(vy,2)\n      val in_p = vx*vx2 + vy*vy2\n      val (xt, yt) = ( in_p*vx/sqr + l(0), in_p*vy/sqr + l(1) )\n\n      println(xt+\" \"+yt)\n    }\n  }\n}"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn.{readLine,readInt}\nimport scala.math.pow\n\nobject Main {\n  def main(args: Array[String]) = {\n    val l = readLine() split \" \" map (_.toDouble)\n    val (vx, vy) = (l(2)-l(0), l(3)-l(1))\n    val n = readInt()\n\n    for( i <- 1 to n ) {\n      val l2 = readLine() split \" \" map (_.toDouble)\n      val (vx2, vy2) = (l2(0)-l(0), l2(1)-l(1))\n      val sqr = pow(vx,2) + pow(vy,2)\n      val in_p = vx*vx2 + vy*vy2\n      val (xt, yt) = ( in_p*vx/sqr + l(0), in_p*vy/sqr + l(1) )\n\n      println(f\"$xt%.10f $yt%.10f\")\n    }\n  }\n}"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn.{readLine, readInt}\n  \nobject Main {\n  def toZero(x:Double) = if(x == -0.0) 0.0 else x\n  def main(args:Array[String]) = {\n   val p = readLine.split(\" \").map(_.toDouble)\n   val n = readInt\n\n   val (x0,y0,x1,y1) = (p(0),p(1),p(2),p(3))\n   for(i<-0 until n) {\n     val p1 = readLine.split(\" \").map(_.toDouble)\n     val (x2,y2) = (p1(0),p1(0))\n     val sqrt = Math.pow(x1-x0,2) + Math.pow(y1-y0,2)\n     val inner = (x1-x0)*(x2-x0) + (y1-y0)*(y2-y0)\n     val (xt,yt) = (inner*(x1-x0)/sqrt + x0, inner*(y1-y0)/sqrt + y0)\n     printf(\"%.10f %.10f\\n\", toZero(xt), toZero(yt))\n   }\n  }\n}"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn.{readLine,readInt}\nimport scala.math.pow\n\nobject Main {\n  def main(args: Array[String]) = {\n    val l = readLine().split(\" \").map(_.toDouble)\n    val (vx, vy) = (l(2)-l(0), l(3)-l(1))\n    val n = readInt()\n\n    val str = new StringBuilder\n    for( i <- 1 to n ) {\n      val l2 = readLine().split(\" \").map(_.toDouble)\n      val (vx2, vy2) = (l2(0)-l(0), l2(1)-l(1))\n      val sqr = pow(vx,2) + pow(vy,2)\n      val in_p = vx*vx2 + vy*vy2\n      val (xt, yt) = ( in_p*vx/sqr + l(0), in_p*vy/sqr + l(1) )\n\n      str ++= xt + \" \"+ yt + \"\\n\"\n    }\n    print(str.toString)\n  }\n}"
  },
  {
    "language": "Scala",
    "code": "import java.io._\nimport scala.io.StdIn.{readLine, readInt}\n\nobject Main {\n  val out:BufferedWriter =\n    new BufferedWriter(new OutputStreamWriter(new FileOutputStream(java.io.FileDescriptor.out), \"ASCII\"), 512)\n  var count = 0\n\n  def toZero(x:Double) = if(x == -0.0) 0.0 else x\n  def main(args:Array[String]) = {\n   val p = readLine.split(\" \").map(_.toDouble)\n   val n = readInt\n\n   val (x0,y0,x1,y1) = (p(0),p(1),p(2),p(3))\n   for(i<-0 until n) {\n     val p1 = readLine.split(\" \").map(_.toDouble)\n     val (x2,y2) = (p1(0),p1(1))\n     val sqrt = Math.pow(x1-x0,2) + Math.pow(y1-y0,2)\n     val inner = (x1-x0)*(x2-x0) + (y1-y0)*(y2-y0)\n     val (xt,yt) = (inner*(x1-x0)/sqrt + x0, inner*(y1-y0)/sqrt + y0)\n     out.write(toZero(xt).toString)\n     out.write(\" \")\n     out.write(toZero(yt).toString)\n     out.write(\"\\n\")\n     if(count<100) count += 1\n     else {\n      out.flush\n      count = 0\n     }\n   }\n   out.flush\n   out.close\n  }\n}"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn.{readLine,readInt}\n\nobject Main {\n  def main(args: Array[String]) = {\n    val l = readLine().split(\" \").map(_.toDouble)\n    val (vx, vy) = (l(2)-l(0), l(3)-l(1))\n    val n = readInt()\n    val sqr = vx*vx + vy*vy\n    val (vsqxx, vsqxy, vsqyy) = ((vx*vx)/sqr,(vy*vx)/sqr, (vy*vy)/sqr)\n\n    val str = new StringBuilder\n    for( i <- 1 to n ) {\n      val l2 = readLine().split(\" \").map(_.toDouble)\n      val (vx2, vy2) = (l2(0)-l(0),l2(1)-l(1))\n      val (xt, yt) = ( vsqxx*vx2 + vsqxy*vy2 + l(0), vsqxy*vx2 + vsqyy*vy2 + l(1) )\n\n      str ++= xt + \" \"+ yt + \"\\n\"\n    }\n    print(str.toString)\n  }\n}"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn.{readLine,readInt}\n\nobject Main {\n  def main(args: Array[String]) = {\n    val l = readLine().split(\" \").map(_.toDouble)\n    val (vx, vy) = (l(2)-l(0), l(3)-l(1))\n    val n = readInt()\n    val sqr = vx*vx + vy*vy\n    val (vsqxx, vsqxy, vsqyy) = (2*(vx*vx)/sqr,2*(vy*vx)/sqr, 2*(vy*vy)/sqr)\n\n    val str = new StringBuilder\n    for( i <- 1 to n ) {\n      val l2 = readLine().split(\" \").map(_.toDouble)\n      val (vx2, vy2) = (l2(0)-l(0),l2(1)-l(1))\n      val (xt, yt) = ( vsqxx*vx2 + vsqxy*vy2 + 2*l(0)-l2(0), vsqxy*vx2 + vsqyy*vy2 + 2*l(1)-l2(1) )\n\n      str ++= xt + \" \"+ yt + \"\\n\"\n    }\n    print(str.toString)\n  }\n}"
  },
  {
    "language": "Scala",
    "code": "import scala.io.StdIn.{readLine, readInt}\n  \nobject Main {\n  def toZero(x:Double) = if(x == -0.0) 0.0 else x\n  def main(args:Array[String]) = {\n   val p = readLine.split(\" \").map(_.toDouble)\n   val n = readInt\n\n   val (x0,y0,x1,y1) = (p(0),p(1),p(2),p(3))\n   for(i<-0 until n) {\n     val p1 = readLine.split(\" \").map(_.toDouble)\n     val (x2,y2) = (p1(0),p1(1))\n     val sqrt = Math.pow(x1-x0,2) + Math.pow(y1-y0,2)\n     val inner = (x1-x0)*(x2-x0) + (y1-y0)*(y2-y0)\n     val (xt,yt) = (inner*(x1-x0)/sqrt + x0, inner*(y1-y0)/sqrt + y0)\n     printf(\"%.10f %.10f\\n\", toZero(xt), toZero(yt))\n   }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n\n#include <cstdio>\n#include <cstdlib>\n#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <map>\n\nusing namespace std;\n\ntypedef pair<long long int, long long int> P;\nlong long int INF = 1e18;\n\nint main(){\n\t\n\tdouble x1, x2, y1, y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\t\n\tdouble vx = x2 - x1, vy = y2 - y1;\n\tdouble norm = vx * vx + vy * vy;\n\t\n\tint q;\n\tcin >> q;\n\t\n\tfor(int loop = 0; loop < q; loop++){\n\t\tdouble x, y, vx2, vy2;\n\t\tcin >> x >> y;\n\t\tvx2 = x - x1;\n\t\tvy2 = y - y1;\n\t\tdouble inn = vx * vx2 + vy * vy2;\n\t\tprintf(\"%.10f %.10f\\n\", x1 + vx * inn / norm, y1 + vy * inn / norm);\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iomanip>\n#include <iostream>\n\nusing namespace std;\n\ntypedef long double ld;\n\nclass Point {\npublic:\n\tld x, y;\n\tPoint(ld x, ld y) :\n\t\t\tx(x), y(y) {\n\t}\n\n\tPoint operator +(Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator *(ld a) {\n\t\treturn Point(x * a, y * a);\n\t}\n\n};\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) :\n\t\t\tp1(p1), p2(p2) {\n\t}\n};\n\nld norm(Point p) {\n\treturn p.x * p.x + p.y * p.y;\n}\n\nld dot(Point p1, Point p2) {\n\treturn p1.x * p2.x + p1.y * p2.y;\n}\n\nPoint project(Segment s, Point p) {\n\tPoint base = s.p2 - s.p1;\n\tld r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\n\nint main() {\n\n\tint p1x, p1y, p2x, p2y;\n\tscanf(\"%d %d %d %d\", &p1x, &p1y, &p2x, &p2y);\n\tPoint p1(p1x, p1y);\n\tPoint p2(p2x, p2y);\n\tSegment s(p1, p2);\n\n\tint q;\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; ++i) {\n\t\tint qx, qy;\n\t\tscanf(\"%d %d\", &qx, &qy);\n\t\tPoint p(qx, qy);\n\t\tPoint ans = project(s, p);\n\t\tcout << fixed << setprecision(10) << ans.x << \" \" << ans.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\n#define rep(i,s,n) for(ll i = (s); i < (n); i++)\n#define rep0(i,n) rep(i,0,n)\n#define BR \"\\n\"\n#define SP \" \"\n#define fcout cout << fixed << setprecision(18)\n\nint main() {\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n\n  int q; cin >> q;\n  rep0(i, q) {\n    double x, y;\n    cin >> x >> y;\n\n    double ansx, ansy;\n    if (x1 == x2) {\n      ansx = x1;\n      ansy = y;\n    } else if (y1 == y2) { \n      ansx = x;\n      ansy = y1;\n    } else {\n      double a1 = (y2 - y1) / (x2 - x1);\n      double b1 = y1 - a1 * x1;\n      double a2 = -1 / a1;\n      double b2 = y - a2 * x;\n\n      ansx = -(b1 - b2) / (a1 - a2);\n      ansy = ansx * a1 + b1;\n    }\n    fcout << ansx << SP << ansy << BR;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <cmath>\n#include <cstdio>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nVector projection(const Segment& s, const Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    using namespace std;\n    // cerr << \"p: \" << p.x << \", \" << p.y;\n    // cerr << \" dot: \" << dot(p - s.p1, base);\n    // cerr << \" norm: \" << norm(base) << endl;\n    return s.p1 + base * r;\n}\n\nint main() {\n    using namespace std;\n\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Segment s{p1, p2};\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        long long x, y;\n        cin >> x >> y;\n        // cerr << x << \" \" << y << endl;\n        auto p = projection(s, Point{static_cast<double>(x), static_cast<double>(y)});\n        cout << setprecision(10) << p.x << \" \" << p.y << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <cmath>\nusing namespace std;\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\t\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) != CLOCKWISE; j--)\n\t\t\tu.pop_back();\n\t\tu.push_back(s[i]);\n\t}\n\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) != CLOCKWISE; j--)\n\t\t\tl.pop_back();\n\t\tl.push_back(s[i]);\n\t}\n\n\t// 按顺时针方向生成凸包的点的序列\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\nint main() {\n\n\tSegment s;\n\tPoint p, ans;\n\tint n;\n\tscanf(\"%lf %lf %lf %lf\", &s.p1.x, &s.p1.y, &s.p2.x, &s.p2.y);\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\"%lf %lf\", &p.x, &p.y);\n\t\tans = project(s, p);\n\t\tprintf(\"%.10lf %.10lf\\n\", ans.x, ans.y);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iomanip>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1.0e-9\n\ndouble dist(int x, int y)\n{\n\treturn sqrt(x * x + y * y);\n}\n\ndouble angle(int x, int y)\n{\n\treturn atan2((double)(x), (double)(y));\n}\n\nint main()\n{\n\tint x0, y0, x1, y1, x2, y2, q;\n\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tcin >> x2 >> y2;\n\n\t\tint ax = x1 - x0;\n\t\tint ay = y1 - y0;\n\t\tint bx = x2 - x0;\n\t\tint by = y2 - y0;\n\n\t\tdouble ad = dist(ax, ay);\n\t\tdouble bd = dist(bx, by);\n\n\t\tdouble at = angle(ax, ay);\n\t\tdouble bt = angle(bx, by);\n\n\t\tdouble cx = ax * (bd / ad) * cos(bt - at);\n\t\tdouble cy = ay * (bd / ad) * cos(bt - at);\n\n\t\tif (cx < -EPS || EPS < cx)\n\t\t{\n\t\t\tcout << setprecision(12) << x0 + cx << ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << 0 << ' ';\n\t\t}\n\n\t\tif (cy < -EPS || EPS < cy)\n\t\t{\n\t\t\tcout << setprecision(12) << y0 + cy << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct vec{\n    double x,y;\n};\n\ndouble inner_product(vec& a, vec& b){\n    return a.x*b.x+a.y*b.y;\n}\n\nint main(void){\n    vec p1,p2,p,p12;\n    int q;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    p12.x=p2.x-p1.x; p12.y=p2.y-p1.y;\n    cin >> q;\n    cout.precision(11);\n    cout.setf(std::ios::showpoint);\n    for(int i=0;i<q;i++){\n        cin >> p.x >> p.y;\n        p.x-=p1.x; p.y-=p1.y;\n        double k=inner_product(p,p12)/inner_product(p12,p12);\n        cout << p1.x+k*p12.x << \" \" << p1.y+k*p12.y << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\nusing namespace std;\nint distance(double x1, double y1, double x2, double y2) {\n    return sqrt(pow(x2 - x1, 2) + pow(y2 - y1,2));\n}\nint main(void){\n    // Here your code !\n    int x1, y1, x2, y2, xa, ya;\n    cin >> x1 >> y1 >> x2 >> y2;\n    int n;\n    cin >> n;\n    int x[n], y[n];\n    double cos;\n    for(int i=0;i<n;i++) {\n        cin >> x[i] >> y[i];\n        cos = (pow(distance(x[i], y[i], x1, y1), 2) + pow(distance(x2, y2, x1, y1), 2) - pow(distance(x[i], y[i], x2, y2), 2)) / (2 * distance(x[i], y[i], x1, y1) * distance(x1, y1, x2, y2));\n        xa = x1 + (x2 - x1) * (distance(x1, y1, x[i], y[i]) * cos) / (distance(x1, y1, x2, y2));\n        ya = y1 + (y2 - y1) * (distance(x1, y1, x[i], y[i]) * cos) / (distance(x1, y1, x2, y2));\n        cout << fixed\n             << setprecision(10)\n             << xa\n             << \" \"\n             << ya << endl;\n    }\n    \n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef complex<double> P;\n\n#define EPS 1e-12\n\ndouble dot(P& p1, P& p2) {\n\treturn p1.real()*p2.real() + p1.imag()*p2.imag();\n}\nint main() {\n\tint x0, y0, x1, y1; cin >> x0 >> y0 >> x1 >> y1;\n\n\tP p0 = P(x0, y0), p1 = P(x1, y1);\n\tP a = p1 - p0;\n\ta /= abs(a);\n\n\tint Q; cin >> Q;\n\tfor (int q = 0; q < Q; ++q) {\n\t\tint x, y; cin >> x >> y;\n\t\tP p2 = P(x, y);\n\t\tP b = p2 - p0;\n\t\tP t = a * dot(a, b);\n\t\tt += p0;\n\n\t\tprintf(\"%.10f %.10f\\n\", t.real(), t.imag());\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#include<array>\n#include<vector>\nusing namespace std;\n\nconst double EPS = 1e-10;\ntemplate<class T>\nbool eq(const T& a, const T& b) {return abs(a - b) < EPS;}\n\nusing point = complex<double>;\n// sort/unique用、setではうまく動かないので使うべからず\nnamespace std {\n\tbool operator==(const point &a, const point &b){\n\t\treturn eq(a, b);\n\t}\n\tbool operator<(const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;  // counter clockwise\n\tif (cross(b, c) < 0)   return -1;  // clockwise\n\tif (dot(b, c) < 0)     return +2;  // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;  // a--b--c on line\n\treturn 0;  // a--c--b on line or a----bc\n}\n\ntypedef complex<double> point;\nstruct circle {point p; double r;};\ntypedef vector<point> polygon;\ntypedef array<point, 2> line;\n\npoint projection(const line& l, const point& p) {\n\tdouble t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\n\n\nint main()\n{\n  double x0,y0,x1,y1;\n  for(;cin>>x0>>y0>>x1>>y1;)\n    {\n      int n;\n      cin>>n;\n      for(int i=0;i<n;i++)\n\t{\n\t  line l;\n\t  l[0]=point(x0,y0);\n\t  l[1]=point(x1,y1);\n\t  double x,y;\n\t  cin>>x>>y;\n\t  point p=point(x,y);\n\t  point ans=projection(l,p);\n\t  cout<<ans.real()<<\" \"<<ans.imag()<<endl;\n\t}\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n// Begin Header {{{\n#define all(x)          (x).begin(), (x).end()\n#define rep(i, n)       for (i64 i = 0, i##_limit = (n); i < i##_limit; ++i)\n#define reps(i, s, t)   for (i64 i = (s), i##_limit = (t); i <= i##_limit; ++i)\n#define repr(i, s, t)   for (i64 i = (s), i##_limit = (t); i >= i##_limit; --i)\n#define var(Type, ...)  Type __VA_ARGS__; input(__VA_ARGS__)\n#ifndef DBG\n#define trace(...)\n#endif\nusing namespace std;\nusing i64 = int_fast64_t;\nusing pii = pair<i64, i64>;\ntemplate <class T, class U> inline bool chmax(T &a, const U &b) { return b > a && (a = b, true); }\ntemplate <class T, class U> inline bool chmin(T &a, const U &b) { return b < a && (a = b, true); }\ninline i64  sigma(i64 n)            { return (n * (n + 1) >> 1); }\ninline i64  updiv(i64 a, i64 b)     { return (a + b - 1) / b; }\ninline i64  sqr(i64 n)              { return n * n; }\ninline string to_string(char c)     { return string(1, c); }\nconstexpr int INF  = 0x3f3f3f3f;\nconstexpr i64 LINF = 0x3f3f3f3f3f3f3f3fLL;\n\ntemplate <class T>\ninline vector<T> make_v(const T &initValue, size_t sz) {\n    return vector<T>(sz, initValue);\n}\ntemplate <class T, class... Args>\ninline auto make_v(const T &initValue, size_t sz, Args... args) {\n    return vector<decltype(make_v<T>(initValue, args...))>(sz, make_v<T>(initValue, args...));\n}\n\ninline void input() {}\ntemplate <class Head, class... Tail>\ninline void input(Head &head, Tail&... tail) { cin >> head; input(tail...); }\n\ninline void print() { cout << \"\\n\"; }\ntemplate <class Head, class... Tail>\ninline void print(Head &&head, Tail&&... tail) {\n    cout << head;\n    if (sizeof...(tail)) cout << ' ';\n    print(forward<Tail>(tail)...);\n}\n\ntemplate <class T>\ninline ostream& operator<< (ostream &out, const vector<T> &vec) {\n    static constexpr const char *delim[] = { \" \", \"\" };\n    for (const auto &e : vec) out << e << delim[&e == &vec.back()];\n    return out;\n}\n\ntemplate <typename Func>\nstruct FixPoint : Func {\n    inline constexpr FixPoint(Func &&f) noexcept : Func(forward<Func>(f)) {}\n\n    template <typename... Args>\n    inline decltype(auto) operator()(Args &&... args) const {\n        return Func::operator()(*this, forward<Args>(args)...);\n    }\n};\n\ntemplate< typename Func >\ninline decltype(auto) makeFixPoint(Func &&f) {\n    return FixPoint< Func >{forward< Func >(f)};\n}\n// }}} End Header\n\n// Geometry {{{\nconstexpr double EPS = 1e-9;\nconstexpr double PI = 3.141592653589793238;\nconstexpr inline bool eq(double a, double b) noexcept { return fabs(a - b) < EPS; }\n\n// 2Dベクトル {{{\nstruct Vec2 {\n    double x, y;\n\n    constexpr Vec2(double x = 0, double y = 0) noexcept : x(x), y(y) {}\n\n    inline constexpr Vec2& operator+=(Vec2 rhs) noexcept {\n        x += rhs.x; y += rhs.y;\n        return *this;\n    }\n    inline constexpr Vec2& operator-=(Vec2 rhs) noexcept {\n        x -= rhs.x; y -= rhs.y;\n        return *this;\n    }\n    inline constexpr Vec2& operator*=(double k) noexcept {\n        x *= k; y *= k;\n        return *this;\n    }\n    inline constexpr Vec2& operator/=(double k) noexcept {\n        x /= k; y /= k;\n        return *this;\n    }\n    inline constexpr Vec2 operator-() const noexcept {\n        return Vec2(-x, -y);\n    }\n    inline constexpr double norm() const noexcept {\n        return x * x + y * y;\n    }\n    inline constexpr double abs() const noexcept {\n        return sqrt(norm());\n    }\n\n};\ninline constexpr bool operator==(Vec2 lhs, Vec2 rhs) noexcept {\n    return eq(lhs.x, rhs.x) && eq(lhs.y, rhs.y);\n}\ninline constexpr bool operator!=(Vec2 lhs, Vec2 rhs) noexcept { return !(lhs == rhs); }\ninline constexpr Vec2 operator+(Vec2 lhs, Vec2 rhs) noexcept { return Vec2(lhs) += rhs; }\ninline constexpr Vec2 operator-(Vec2 lhs, Vec2 rhs) noexcept { return Vec2(lhs) -= rhs; }\ninline constexpr Vec2 operator*(Vec2 lhs, double k) noexcept { return Vec2(lhs) *= k; }\ninline constexpr Vec2 operator/(Vec2 lhs, double k) noexcept { return Vec2(lhs) /= k; }\ninline ostream& operator<<(ostream &os, Vec2 rhs) { return os << rhs.x << ' ' << rhs.y; }\ninline istream& operator>>(istream &is, Vec2 &rhs) { return is >> rhs.x >> rhs.y; }\ninline constexpr double norm(const Vec2 a) noexcept { return a.norm(); }\ninline constexpr double abs(Vec2 a) noexcept { return a.abs(); }\ninline constexpr double dot(Vec2 a, Vec2 b) noexcept { return (a.x * b.x) + (a.y * b.y); }\ninline constexpr double det(Vec2 a, Vec2 b) noexcept { return (a.x * b.y) - (a.y * b.x); }\ninline constexpr double arg(Vec2 p) noexcept { return atan2(p.y, p.x); }\n// }}}\n\n// 線分{{{\nstruct Segment {\n    Vec2 p1, p2;\n    constexpr Segment() noexcept {}\n    constexpr Segment(Vec2 p1, Vec2 p2) noexcept : p1(p1), p2(p2) {}\n\n    constexpr Vec2 asVec2() const noexcept {\n        return p2 - p1;\n    }\n};\n\ninline ostream& operator<<(ostream &os, const Segment &s) {\n    return os << '(' << s.p1 << \"), (\" << s.p2 << ')';\n}\ninline istream& operator>>(istream &is, Segment &s) {\n    return is >> s.p1 >> s.p2;\n}\n\nusing Line = Segment;\n// }}}\n\n// 円 {{{\nstruct Circle {\n    Vec2 c;\n    double r;\n    constexpr Circle() noexcept : c(), r(0) {}\n    constexpr Circle(Vec2 center, double radius) noexcept : c(center), r(radius) {}\n};\n// }}}\n\n// 直行判定 {{{\ninline constexpr bool isOrthogonal(Vec2 a, Vec2 b) noexcept {\n    return eq(dot(a, b), 0);\n}\ninline constexpr bool isOrthogonal(Vec2 a1, Vec2 a2, Vec2 b1, Vec2 b2) noexcept {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\ninline constexpr bool isOrthogonal(const Segment &s1, const Segment &s2) noexcept {\n    return eq(dot(s1.asVec2(), s2.asVec2()), 0);\n} // }}}\n\n// 平行判定{{{\ninline constexpr bool isParallel(Vec2 a, Vec2 b) noexcept {\n    return eq(det(a, b), 0);\n}\ninline constexpr bool isParallel(Vec2 a1, Vec2 a2, Vec2 b1, Vec2 b2) noexcept {\n    return isParallel(a1 - a2, b1 - b2);\n}\ninline constexpr bool isParallel(const Segment &s1, const Segment &s2) noexcept {\n    return eq(det(s1.asVec2(), s2.asVec2()), 0);\n} // }}}\n\n// 射影, 反射 {{{\ninline constexpr Vec2 project(const Segment &s, Vec2 p) noexcept {\n    const Vec2 base = s.asVec2();\n    double k = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * k;\n}\n\ninline constexpr Vec2 reflect(const Segment &s, Vec2 p) noexcept {\n    return p + (project(s, p) - p) * 2.0;\n} // }}}\n\n// 距離 {{{\ninline constexpr double distance(Vec2 a, Vec2 b) noexcept {\n    return abs(a - b);\n} // }}}\n\n// 反時計周り {{{\n\n// ベクトル {p0 -> p1} に対する p2 の位置 {{{\nenum CCW : int {\n    COUNTER_CLOCKWISE = 1,  // 半時計回り\n    CLOCKWISE = -1,         // 時計回り\n    ONLINE_BACK = 2,        // p2, {p0 -> p1}\n         ONLINE_FRONT = -2,      // {p0 -> p1}, p2\n         ON_SEGMENT = 0,         // {p0 p2 p1}\n}; // }}}\n\ninline constexpr CCW ccw(Vec2 p0, Vec2 p1, Vec2 p2) noexcept {\n    const Vec2 a = p1 - p0;\n    const Vec2 b = p2 - p0;\n    if (det(a, b) > EPS) return CCW::COUNTER_CLOCKWISE;\n    if (det(a, b) < -EPS) return CCW::CLOCKWISE;\n    if (dot(a, b) < -EPS) return CCW::ONLINE_BACK;\n    if (a.norm() < b.norm()) return CCW::ONLINE_FRONT;\n    return CCW::ON_SEGMENT;\n} // }}}\n\n// }}}\n\nsigned main()\n{\n    ios::sync_with_stdio(false); cin.tie(nullptr);\n\n    var(Segment, s);\n    var(int, Q);\n\n    cout << fixed << setprecision(12);\n\n    while (Q--) {\n        var(Vec2, p);\n        print(project(s, p));\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <climits>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\n//???\nclass Point {\npublic:\n    double x, y;\n    \n    Point (double x = 0, double y = 0):x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(a * x, a * y);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    \n    double norm(){return x*x + y*y;};\n    double absolute(){return sqrt(norm());};\n    \n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    \n};\ntypedef Point Vector;                               //????????????\ntypedef struct Segment{Point p1, p2;}Segment;       //??????\ntypedef Segment Line;                               //??´???\ntypedef struct Circle{Point c; double r;}Circle;    //???\ntypedef vector<Point> Polygon;                      //????§???¢\n//????????????a????????????\ndouble norm(Vector a){\n    return a.x * a.x + a.y * a.y;\n}\n//????????????a?????§??????\ndouble absolute(Vector a){\n    return sqrt(norm(a));\n}\n\n//????????????a,b?????????\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n//????????????a,b?????????\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\n//????????????a??¨b?????´?????????\n//a??¨b?????´????????´??????????????????0?????????\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b), 0.0);\n}\n\n//????????????a??¨b???????????????\n//a??¨b?????´????????´??????????????????0?????????\nbool isParallel(Vector a , Vector b){\n    return equals(cross(a,b), 0.0);\n}\n\n//??????s(p1p2)???????????????p????°???±\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n//??????s???????§°?????¨?????????p???????±????\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2.0;\n}\n\n//???a,???b???????????¢\ndouble getDistance(Point a, Point b){\n    return absolute(a - b);\n}\n\n//??´???s??¨???p????????¢\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / absolute(l.p2 - l.p1));\n}\n\n//??????s(?§????p1/??????p2)??¨???p????????¢d????±???????\n//??\\???????????????????????§??´?????????\n//??????????????????p2-p1??¨???????????????p-p1??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p1??¨????????¢\n//??????????????????p1-p2??¨???????????????p-p2??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p2??¨????????¢\n//??????????????\\???????????????????????´??????d??????p??¨??´???p1p2????????¢\ndouble getDistanceSP(Segment s, Point p){\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return absolute(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return absolute(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\n\n//??????p0, p1, p2???????????????????????????p0p1???????????????p2??????????????????\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n//??????S1(p1p2)??¨??????s2(p2p3)????????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return  ccw(p1, p2, p3) * ccw(p1, p2, p3) <= 0\n            &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p1);\n}\n\n//??????s1??¨??????s2????????¢\n//??\\????????????????????¢????????§????????????????????????\n//????????????s1??¨??????s2????§????s2.p1????????¢\n//????????????s1??¨??????s2?????????s2.p2????????¢\n//????????????s2??¨??????s1????§????s1.p1????????¢\n//????????????s2??¨??????s1?????????s1.p2????????¢\ndouble getDistance(Segment s1, Segment s2){\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n    \n}\n\n//??????s1??¨??????s2?????????????±???????\nPoint getCrossPoint(Segment s1, Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n//?????¨??????l?????????????±???????\npair<Point, Point> getCrossPoints(Circle c, Line l){\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / absolute(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\n//???c1??¨???c2?????????????±???????\nVector polar(double a, double r){\n    //??????a,?§????r???point????±???????\n    return Point(cos(r) * a, sin(r) * a);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2){\n    Vector v = c2.c - c1.c;\n    double d = absolute(v);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d) );\n    double t = atan2(v.y, v.x);\n    return make_pair(c1.c + polar(c1.r, t+a), c1.c + polar(c1.r, t-a));\n}\n\n\n\nint main(){\n    \n    int x0, y0, x1, y1, x2, y2;\n    \n    int q;\n    \n    cin >> x0 >> y0 >> x1 >> y1;\n    cin >> q;\n    \n    Segment s = {Point(x0, y0), Point(x1, y1)};\n    \n    for (int i = 0; i < q; i++) {\n        cin >> x2 >> y2;\n        Point p2 = Point(x2, y2);\n        \n        Point ans = project(s, p2);\n        \n        printf(\"%.8lf %.8lf\\n\", ans.x, ans.y);\n    }\n\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// 平面幾何\n\n// int -> double -> Pointの暗黙の型変換を許した\n// メンバ変数をprivateにした\n// 代入演算子の戻り値とかにconstいっぱい付けた\n\n//   Segment::intersect(const Segment&)\n//   Circle::crosspoint(const Circle&)\n// のどっちかがバグってそう？ (AOJ1183)\n// crosspointは大丈夫？ (AOJ1132)\n\n// 通らない幾何問題\n// AOJ0153  円による点の包含　点と線分との距離　ccw\n// AOJ0187  線分の交差判定　線分同士の交点\n\n#include<iostream>\n#include<cmath>     // fabs(), hypot()\n#include<vector>    // Circle::crosspoint()の戻り値\n#include<algorithm> // min()\n\nconst double EPS = 1e-10;\nenum POSITION {FORWARD = -2, UNDER, ON, ABOVE, BACKWARD};   // ccw(a, b, p)で3点a, b, pの位置関係を返す\n                                                            //   0: a-p-b, 2: p-a-b, -2: a-b-p, 1: -a-b-の上にp, -1: -a-b-の下にp\n// class\nclass Point;\nclass Segment;\nclass Line;\nclass Circle;\n// member\nclass Point {\n    double x_value, y_value;\npublic:\n    Point() :x_value(0.0), y_value(0.0) {}\n    Point(double d) :x_value(d), y_value(d) {}\n    Point(double a, double b) :x_value(a), y_value(b) {}\n    double x() const {return x_value;}\n    double y() const {return y_value;}\n    double x(double d) {return x_value = d;}\n    double y(double d) {return y_value = d;}\n    bool operator== (const Point&) const;\n    bool operator!= (const Point&) const;\n    bool operator< (const Point&) const;\n    bool operator> (const Point&) const;\n    bool operator<= (const Point&) const;\n    bool operator>= (const Point&) const;\n    const Point operator-() const;\n    const Point& operator=(const Point&);\n    const Point& operator+=(const Point&);\n    const Point& operator-=(const Point&);\n    const Point& operator*=(const Point&);\n    const Point& operator/=(const Point&);\n    double dot(const Point&) const;\n    double cross(const Point&) const;\n    double abs() const;\n    double norm() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    const Point projection(const Line&) const;\n    const Point reflection(const Line&) const;\n    POSITION ccw(const Point&, const Point&) const;\n};\nconst Point operator+(const Point& lhs, const Point& rhs);\nconst Point operator-(const Point& lhs, const Point& rhs);\nconst Point operator*(const Point& lhs, const Point& rhs);\nconst Point operator/(const Point& lhs, const Point& rhs);\nclass Segment {\n    Point source_point, target_point;\npublic:\n    Segment(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0) :source_point(Point(x1, y1)), target_point(Point(x2, y2)) {}\n    Segment(const Point& a, const Point& b) :source_point(a), target_point(b) {}\n    const Point& source() const {return source_point;}\n    const Point& target() const {return target_point;}\n    const Point& source(const Point& p) {return source_point = p;}\n    const Point& target(const Point& p) {return target_point = p;}\n    const Line line() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    POSITION ccw(const Point&) const;\n};\nclass Line {\n    Point source_point, target_point;\npublic:\n    Line(double x1 = 0.0, double y1 = 0.0, double x2 = 0.0, double y2 = 0.0) :source_point(Point(x1, y1)), target_point(Point(x2, y2)) {}\n    Line(const Point& a, const Point& b) :source_point(a), target_point(b) {}\n    const Point& source() const {return source_point;}\n    const Point& target() const {return target_point;}\n    const Point& source(const Point& p) {return source_point = p;}\n    const Point& target(const Point& p) {return target_point = p;}\n    const Segment segment() const;\n    double distance(const Point&) const;\n    double distance(const Segment&) const;\n    double distance(const Line&) const;\n    bool intersect(const Point&) const;\n    bool intersect(const Segment&) const;\n    bool intersect(const Line&) const;\n    const Point projection(const Point&) const;\n    const Point reflection(const Point&) const;\n    const Point crosspoint(const Line&) const;\n    POSITION ccw(const Point&) const;\n};\nclass Circle {\n    Point center_point;\n    double radius;\npublic:\n    Circle(double a = 0.0, double b = 0.0, double c = 0.0) :center_point(Point(a, b)), radius(c) {}\n    const Point& center() const {return center_point;}\n    double x() const {return center_point.x();}\n    double y() const {return center_point.y();}\n    double r() const {return radius;}\n    const Point& center(const Point& p) {return center_point = p;}\n    double x(double d) {return center_point.x(d);}\n    double y(double d) {return center_point.y(d);}\n    double r(double d) {return radius = d;}\n    bool include(const Point&) const;\n    bool include(const Segment&) const;\n    bool include(const Circle&) const;\n    bool intersect(const Circle&) const;\n    std::vector<Point> crosspoint(const Circle&) const;\n};\n// Point\nbool Point::operator== (const Point &p) const {return x() == p.x() && y() == p.y();}\nbool Point::operator!= (const Point &p) const {return x() != p.x() || y() != p.y();}\nbool Point::operator<(const Point &p) const {return x() != p.x() ? x() < p.x() : y() < p.y();}\nbool Point::operator>(const Point &p) const {return x() != p.x() ? x() > p.x() : y() > p.y();}\nbool Point::operator<=(const Point &p) const {return x() != p.x() ? x() < p.x() : y() <= p.y();}\nbool Point::operator>=(const Point &p) const {return x() != p.x() ? x() > p.x() : y() >= p.y();}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x() + rhs.x(), lhs.y() + rhs.y());}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x() - rhs.x(), lhs.y() - rhs.y());}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x() * rhs.x(), lhs.y() * rhs.y());}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x() / rhs.x(), lhs.y() / rhs.y());}\nconst Point Point::operator-() const {return Point(-x(), -y());}\nconst Point& Point::operator=(const Point& p) {x(p.x()); y(p.y()); return *this;}\nconst Point& Point::operator+=(const Point& p) {return *this = *this + p;}\nconst Point& Point::operator-=(const Point& p) {return *this = *this - p;}\nconst Point& Point::operator*=(const Point& p) {return *this = *this * p;}\nconst Point& Point::operator/=(const Point& p) {return *this = *this / p;}\ndouble Point::dot(const Point& p) const {return x() * p.x() + y() * p.y();}\ndouble Point::cross(const Point& p) const {return x() * p.y() - y() * p.x();}\ndouble Point::abs() const {return hypot(x(), y());}\ndouble Point::norm() const {return x() * x() + y() * y();}\ndouble Point::distance(const Point& p) const {return (p - (*this)).abs();}\ndouble Point::distance(const Segment& s) const {return s.distance(*this);}\ndouble Point::distance(const Line& l) const {return l.distance(*this);}\nbool Point::intersect(const Point& p) const {return *this == p;}\nbool Point::intersect(const Segment& s) const {return s.intersect(*this);}\nbool Point::intersect(const Line& l) const {return l.intersect(*this);}\nconst Point Point::projection(const Line& l) const {return l.projection(*this);}\nconst Point Point::reflection(const Line& l) const {return l.reflection(*this);}\nPOSITION Point::ccw(const Point& b, const Point& p) const {\n    const Point& a = *this;\n    Point v1 = b - a;\n    Point v2 = p - a;\n    if(v1.cross(v2) > EPS) return ABOVE;\n    if(v1.cross(v2) < -EPS) return UNDER;\n    if(v1.dot(v2) < -EPS) return BACKWARD;\n    if(v2.norm() - v1.norm() > EPS) return FORWARD;\n    return ON;\n}\n// Segment\nconst Line Segment::line() const {return Line(source(), target());}\ndouble Segment::distance(const Point& p) const {\n    Point q = line().projection(p);\n    if(intersect(q)) return q.distance(p);\n    return std::min(source().distance(p), target().distance(p));\n}\ndouble Segment::distance(const Segment& s) const {\n    if(intersect(s)) return 0.0;\n    double a = distance(s.source());\n    double b = distance(s.target());\n    double c = s.distance(source());\n    double d = s.distance(target());\n    return std::min({a, b, c, d});\n}\ndouble Segment::distance(const Line& l) const {return l.distance(*this);}\nbool Segment::intersect(const Point& p) const {return source().distance(p) + target().distance(p) - target().distance(source()) <= EPS;}\nbool Segment::intersect(const Segment& s) const {\n    bool a = ccw(s.source()) * ccw(s.target()) <= 0;\n    bool b = s.ccw(source()) * s.ccw(target()) <= 0;\n    return a && b;\n}\nbool Segment::intersect(const Line& l) const {return l.intersect(*this);}\nPOSITION Segment::ccw(const Point& p) const {return source().ccw(target(), p);}\n// Line\nconst Segment Line::segment() const {return Segment(source(), target());}\ndouble Line::distance(const Point& p) const {return p.distance(projection(p));}\ndouble Line::distance(const Segment& s) const {\n    if(intersect(s)) return 0.0;\n    double a = distance(s.source());\n    double b = distance(s.target());\n    return a < b ? a : b;\n}\ndouble Line::distance(const Line& l) const {return intersect(l) ? 0.0 : distance(l.source());}\nbool Line::intersect(const Point& p) const {\n    Point v1 = source() - p;\n    Point v2 = target() - p;\n    return fabs(v2.cross(v1)) < EPS;\n}\nbool Line::intersect(const Segment& s) const {\n    Point v1 = target() - source();\n    Point v2 = s.source() - source();\n    Point v3 = s.target() - source();\n    return v1.cross(v2) * v1.cross(v3) <= EPS;\n}\nbool Line::intersect(const Line& l) const {\n    Point v1 = target() - source();\n    Point v2 = l.target() - l.source();\n    Point v3 = l.source() - source();\n    return fabs(v1.cross(v2)) > EPS || fabs(v1.cross(v3)) < EPS;\n}\nconst Point Line::projection(const Point& p) const {\n    Point v1 = p - source();\n    Point v2 = source() - target();\n    return Point(source() + v2 * (v1.dot(v2) / v2.norm()));\n}\nconst Point Line::reflection(const Point& p) const {\n    return p + (projection(p) - p) * 2.0;\n}\nconst Point Line::crosspoint(const Line& l) const {\n    Point v1 = target() - source();\n    Point v2 = l.target() - l.source();\n    Point v3 = target() - l.source();\n    double a = v1.cross(v2);\n    double b = v1.cross(v3);\n    if(fabs(a) <= EPS && fabs(b) <= EPS) l.source();\n    return l.source() + v2 * (b / a);\n}\nPOSITION Line::ccw(const Point& p) const {return source().ccw(target(), p);}\n// Circle\nbool Circle::include(const Point& p) const {return center().distance(p) - r() <= EPS;}\nbool Circle::include(const Segment& s) const {return center().distance(s) - r() <= EPS;}\nbool Circle::include(const Circle& c) const {return center().distance(c.center()) - (r() - c.r()) <= EPS;}\nbool Circle::intersect(const Circle& c) const {return center().distance(c.center()) - r() - c.r() <= EPS;}\nstd::vector<Point> Circle::crosspoint(const Circle& c) const {\n    double angle = atan2(c.y() - y(), c.x() - x());\n    double d = center().distance(c.center());\n    double add = acos((d * d + r() * r() - c.r() * c.r()) / (2.0 * d * r()));\n    std::vector<Point> result;\n    result.push_back(Point(x() + r() * cos(angle + add), y() + r() * sin(angle + add)));\n    result.push_back(Point(x() + r() * cos(angle - add), y() + r() * sin(angle - add)));\n    return result;\n}\n\n#include<iomanip>\nusing namespace std;\nint main() {\n    double x1, y1, x2, y2;\n    cin >> x1>> y1>> x2>> y2;\n    Line l(x1, y1, x2, y2);\n    int q;\n    cin >> q;\n    while(q--) {\n        double x, y;\n        cin >> x >> y;\n        Point p = Point(x, y).projection(l);\n        cout << setprecision(10) << fixed << p.x() << \" \" << p.y() << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\n#include<fstream>\n#include<iomanip>\n#include<math.h>\nusing namespace std;\n\ntemplate <class T>\nclass _Point{\npublic:\n\tT x;\n\tT y;\n\t_Point(){}\n\t_Point(T _x, T _y) :x(_x), y(_y){}\n\t_Point(const _Point & v) :x(v.x), y(v.y){}\n\n\tconst _Point operator + (const _Point & v)\n\t{\n\t\treturn _Point(x+v.x,y+v.y);\n\t}\n\tconst _Point operator - (const _Point & v)\n\t{\n\t\treturn _Point(x - v.x, y - v.y);\n\t}\n\tT abs() const {\n\t\treturn sqrt(x*x + y*y);\n\t}\n\t_Point unit() const{\n\t\tT len = abs();\n\t\treturn _Point(x / len, y / len);\n\t}\n\tT operator*(const _Point &v) const\n\t{\n\t\treturn x * v.x + y * v.y;\n\t}\n\tconst _Point operator*(const T &len) const\n\t{\n\t\treturn _Point(len * x, len * y);\n\t}\n};\ntypedef double R;\ntypedef _Point<R> Point;\ntypedef Point Vector;\n\nint main(){\n\tstd::istream & c_in = cin;\n\n\tPoint p, p1, p2;\n\tc_in >> p1.x >> p1.y >> p2.x >> p2.y;\n\tVector P12(p2 - p1);\n\tVector e12(P12.unit());\n\n\tint q;\n\tc_in >> q;\n\tfor (int i = 0; i < q; ++i)\n\t{\n\t\tPoint p;\n\t\tc_in >> p.x >> p.y;\n\t\tR projection = p*e12;\n\t\tVector b(projection*(e12.x), projection*(e12.y));\n\t\tPoint X(p1 + b);\n\t\tcout << fixed << setprecision(8) << X.x << \" \" << X.y << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <math.h>\nconst double EPS = 1e-9;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\tvector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator * (double a) {\n\t\treturn vector(x * a, y * a);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}\n\tvector operator + (vector v) {\n\t\treturn vector(x + v.x, y + v.y);\n\t}\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double squ(vector v) {\n\treturn v.x*v.x + v.y*v.y;\n}\ninline double norm(vector v) {\n\treturn sqrt(squ(v));\n}\ninline vector pro(vector base, vector v, vector be) {\n\tdouble a = dot(base, v) / squ(base);\n\tvector v1 = base * a;\n\treturn v1 + be;\n}\ninline void print(vector v) {\n\tprintf(\"%.10f %.10f\\n\", v.x, v.y);\n}\nint main() {\n\tdouble x1, y1, x2, y2, q, x, y;\n\tcin >> x1 >> y1 >> x2 >> y2 >> q;\n\tvector be(x1, y1);\n\tvector base(x2 - x1, y2 - y1);\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tvector v(x, y);\n\t\tprint(pro(base, v, be));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n\nconst double EPS=1e-10;\n\n#define equals(a, b) (fabs((a)-b(b))<EPS)\n#define X real()\n#define Y imag()\n\nusing namespace std;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\ntypedef Segment Line;\n\nstruct Circle {\n    Point c;\n    double r;\n    Circle(Point c=Point(), double r=0.0) :\n        c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) {\n    return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(Vector a,Vector b) {\n    return a.X*b.Y - a.Y*b.X;\n}\n\nPoint project(Segment s, Point p) {\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base) / norm(base);\n    return s.p1+base*r;\n}\n\nint main() {\n    Segment s;\n    {\n        double x1,y1;\n        double x2,y2;\n        cin>>x1>>y1>>x2>>y2;\n        s=Segment({Point(x1,y1),Point(x2,y2)});\n\n    }\n    int q;\n    cin>>q;\n    while(q-->0) {\n        double x1,y1;\n        cin>>x1>>y1;\n        Point p=Point(x1,y1);\n        Point x=project(s,p);\n        printf(\"%.10f %.10f\\n\",x.X,x.Y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\n\n//point\ntypedef complex<double> P;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const P& a, const P& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n\treturn real(conj(a)*b);\n}\n// line\nstruct L : public vector<P> {\n\tL(const P& a, const P& b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\t\t\t\t\t\t\t\t  // a--c--b on line\n}\n\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n         abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const L &s) {\n  return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n         cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(const L &s, const L &t) {\n  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(const L &s, const P &p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n\nP projection(const L &l, const P &p) {\n\tdouble t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\nP reflection(const L &l, const P &p) {\n\treturn p + (double)2 * (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const L &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const L &s, const P &p) {\n\tconst P r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const L &s, const L &t) {\n\tif (intersectSS(s, t)) return 0;\n\t\treturn min({distanceSP(s, t[0]), distanceSP(s, t[1]), distanceSP(t, s[0]), distanceSP(t, s[1])});\n}\nP crosspoint(const L &l, const L &m) {\n  double A = cross(l[1] - l[0], m[1] - m[0]);\n  double B = cross(l[1] - l[0], l[1] - m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n  if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n  return m[0] + B / A * (m[1] - m[0]);\n}\n\nint main() {\n\tdouble x1, y1, x2, y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tL li(P{x1, y1}, P{x2, y2});\n\tint q;\n\tcin >> q;\n\tfor(int i=0; i<q; ++i) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tP p(x, y);\n\t\tP ans = projection(li, p);\n\t\tcout << fixed << setprecision(15) << ans.real() + 0 << \" \" << ans.imag() + 0 << endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef complex<double> Point;\ntypedef Point Vector;\ntypedef pair<Point, Point> Segment;\ntypedef Segment Line;\ntypedef pair<Point, double> Circle;\ntypedef vector<Point> Polygon;\ndouble dot(Vector a, Vector b){\n\treturn real(a) * real(b) + imag(a) * imag(b);\n}\ndouble cross(Vector a, Vector b){\n\treturn real(a) * imag(b) - imag(a) * real(b);\n}\nPoint project(Line l, Point p){\n\tVector base = l.second - l.first;\n\tbase /= abs(base);\n\tdouble r = dot(p - l.first, base);\n\treturn l.first + r * base;\n}\n\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tPoint p1, p2;\n\tdouble x, y;\n\tcin >> x >> y;\n\tp1 = Point(x, y);\n\tcin >> x >> y;\n\tp2 = Point(x, y);\n\tLine l(p1, p2);\n\tint q;\n\tcin >> q;\n\twhile(q--){\n\t\tcin >> x >> y;\n\t\tPoint z = project(l, Point(x, y));\n\t\tcout << setprecision(15) << real(z) << \" \" << imag(z) << \"\\n\";\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\nusing namespace std;\n\nint main(int argc, const char * argv[]) {\n    double xp1, yp1, xp2, yp2;\n    int q;\n    double xp, yp;\n    \n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    cin >> q;\n    \n    double dist = sqrt((xp1 - xp2) * (xp1 - xp2) + (yp1 - yp2) * (yp1 -yp2));\n    double nx, ny; //unit vector along the line\n    nx = (xp2 - xp1) / dist;\n    ny = (yp2 - yp1) / dist;\n    \n    for (int i = 0; i < q; ++i) {\n        cin >> xp >> yp;\n        cout.precision(15);\n        double t = nx * (xp - xp1) + ny * (yp - yp1);\n        cout << xp1 + nx * t << ' ' << yp1 + ny * t << endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <array>\n#include <bitset>\n#include <cassert>\n#include <cstring>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <initializer_list>\n#include <math.h>\n#include <map>\n#include <random>\n#include <set>\n#include <stack>\n#include <tuple>\n#include <type_traits>\n#include <queue>\n#include <vector>\n\nusing lli = long long int;\nusing pii = std::pair<int, int>;\n\n#define REP(i, n) for(int (i) = 0; (i) < (n); ++(i))\n\n// グリッド上の縦横移動\nconstexpr std::array<std::pair<int, int>, 4> dxdy = {\n    { {1, 0}, {-1, 0}, {0, 1}, {0, -1} }\n};\n\n\ntemplate <typename T> inline bool chmin(T& a, T b){ if(b < a){ a = b; return true; } return false; }\ntemplate <typename T> inline bool chmax(T& a, T b){ if(a < b){ a = b; return true; } return false; }\n\ninline bool isIn(int x, int y, int H, int W){return 0 <= x and x < H and 0 <= y and y < W;}\ninline auto isInTheGrid(const int H, const int W){\n    return std::bind(isIn, std::placeholders::_1, std::placeholders::_2, H, W);\n}\ninline bool bitUP(int state, int k){ return (state >> k) & 1; }\ninline bool bitUP(long long int state, int k){ return (state >> k) & 1;}\n\n\nnamespace MyInputAndOutput{\n    // 入力関係 (cin)\n    class user_input{\n    private:\n        static constexpr unsigned int sizeOfAscii = 128;\n        bool isBlankChar[sizeOfAscii];\n            /*  < definition of getchar >\n                reference\n                MacOS   : https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/getchar.3.html\n                Windows : https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/getchar-nolock-getwchar-nolock?view=vs-2019\n                Linux   : https://linux.die.net/man/3/unlocked_stdio \n                Ubuntu  : http://manpages.ubuntu.com/manpages/trusty/man3/getchar_unlocked.3posix.html\n            */\n            #if defined(__APPLE__)\n                #define DAGGER_GETCHAR_UNLOCKED_DAGGER getchar_unlocked\n            #elif defined(_WIN32) || defined(_WIN64)\n                #define DAGGER_GETCHAR_UNLOCKED_DAGGER _getchar_nolock\n            #elif defined(__linux) \n                #if _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE || _BSD_SOURCE || _SVID_SOURCE\n                    #define DAGGER_GETCHAR_UNLOCKED_DAGGER getchar_unlocked\n                #else\n                    #define DAGGER_GETCHAR_UNLOCKED_DAGGER getchar\n                #endif\n            #else\n                #define DAGGER_GETCHAR_UNLOCKED_DAGGER getchar\n            #endif\n        // 符号あり整数を getchar で読み込んで構成する (もし, 0 ~ 9 以外の文字が含まれると困る)\n        template <typename Tp>\n        inline void charToInteger(Tp& val) const {\n            val = 0; int c; while(true){\n                c = DAGGER_GETCHAR_UNLOCKED_DAGGER();\n                if(c == EOF) return;\n                if('-' or (not isBlankChar[c])) break;\n            }\n            if(c == '-'){\n                while(true){\n                    c = DAGGER_GETCHAR_UNLOCKED_DAGGER();\n                    if(c < '0' or c > '9') break;\n                    val = 10 * val + c - '0';\n                } val = -val;\n            }\n            else{\n                if(c < '0' or c > '9') return;\n                do{\n                    val = 10 * val + c - '0';\n                    c = DAGGER_GETCHAR_UNLOCKED_DAGGER();\n                } while('0' <= c and c <= '9');\n            }\n        }\n        // 符号なし整数を getchar で読み込んで構成する (もし, 符号付きだとバグる)\n        template <typename Tp>\n        inline void charToUnsignedInteger(Tp& val) const {\n            val = 0; int c; while(true){\n                c = DAGGER_GETCHAR_UNLOCKED_DAGGER();\n                if(c == EOF) return;\n                if(not isBlankChar[c]) break;\n            }\n            if(c < '0' or c > '9') return;\n            do{\n                val = 10 * val + c - '0';\n                c = DAGGER_GETCHAR_UNLOCKED_DAGGER();\n            } while(not (c == EOF or isBlankChar[c]));\n        }\n    public:\n        constexpr user_input(void) : isBlankChar(){\n            for(unsigned int i = 0; i < sizeOfAscii; ++i) isBlankChar[i] = false;\n            isBlankChar[int('\\n')] = true; isBlankChar[int('\\t')] = true; \n            isBlankChar[int(' ')]  = true; isBlankChar[int('\\v')] = true;\n        }\n        inline const user_input& operator >> (int& int_arg) const {\n            //scanf(\"%d\", &int_arg);\n            charToInteger<int>(int_arg); return *this;\n        }\n        inline const user_input& operator >> (long long int& llint_arg) const {\n            //scanf(\"%lld\", &llint_arg); return *this;\n            charToInteger<long long int>(llint_arg); return *this;\n        }\n        inline const user_input& operator >> (unsigned int& uint_arg) const {\n            //scanf(\"%u\", &uint_arg); \n            charToUnsignedInteger<unsigned int>(uint_arg); return *this;\n        }\n        inline const user_input& operator >> (unsigned long long int& ullint_arg) const {\n            //scanf(\"%llu\", &ullint_arg);\n            charToUnsignedInteger<unsigned long long int>(ullint_arg); return *this;\n        }\n        inline const user_input& operator >> (unsigned long& ulint_arg) const {\n            charToUnsignedInteger<unsigned long>(ulint_arg); return *this;\n        }\n        inline const user_input& operator >> (float& float_arg) const {\n            scanf(\"%f\", &float_arg); return *this;\n        }\n        inline const user_input& operator >> (double& double_arg) const {\n            scanf(\"%lf\", &double_arg); return *this;\n        }\n        inline const user_input& operator >> (long double& ldouble_arg) const {\n            scanf(\"%Lf\", &ldouble_arg); return *this;\n        }\n        inline const user_input& operator >> (char* str_arg) const {\n            scanf(\"%s\", str_arg); \n            return *this;\n        }\n        inline const user_input& operator >> (char& char_arg) const {\n            do{\n                if((char_arg = DAGGER_GETCHAR_UNLOCKED_DAGGER()) == EOF) return *this;\n            } while(isBlankChar[int(char_arg)]);\n            return *this;\n        }\n        inline const user_input& operator >> (std::string& str_arg) const {\n            str_arg.erase();\n            int c; while(true){ \n                c = DAGGER_GETCHAR_UNLOCKED_DAGGER();\n                if(c == EOF) return *this;\n                if(not isBlankChar[c]) break;\n            }\n            constexpr unsigned int buffer_size = 128; \n            char buffer_input[buffer_size]; unsigned int buffer_length = 0;\n            do{\n                buffer_input[buffer_length++] = c;\n                if(buffer_length == buffer_size){\n                    buffer_length = 0; str_arg.append(buffer_input, buffer_size);\n                }\n                c = DAGGER_GETCHAR_UNLOCKED_DAGGER();\n            } while(c != EOF and (not isBlankChar[c]) );\n            str_arg.append(buffer_input, buffer_length);\n            return *this;\n        }\n        template <typename S, typename T>\n        inline const user_input& operator >>(std::pair<S, T>& pair_arg) const{\n            (*this) >> pair_arg.first >> pair_arg.second; return *this;\n        }\n        template <typename T>\n        inline const user_input& operator >>(std::vector<T>& vec) const {\n            for(T& ele : vec) (*this) >> ele; \n            return *this;\n        }\n        // getchar の define の解除\n        #undef DAGGER_GETCHAR_UNLOCKED_DAGGER\n    }; constexpr user_input cin;\n\n    void ends(void) {putchar('\\0'); }\n    void endl(void) {putchar('\\n'); fflush(stdout);}\n    void flush(void) {fflush(stdout);}\n\n    // 出力関係 (cout)\n    class user_output{\n    public:\n        constexpr user_output(void){}\n        inline const user_output& operator << (const int int_arg) const{\n            printf(\"%d\", int_arg); return *this;\n        }\n        inline const user_output& operator << (const unsigned int uint_arg) const{\n            printf(\"%u\", uint_arg); return *this;\n        }\n        inline const user_output& operator << (const long long int llint_arg) const {\n            printf(\"%lld\", llint_arg); return *this;\n        }\n        inline const user_output& operator << (const unsigned long long int ullint_arg) const {\n            printf(\"%llu\", ullint_arg); return *this;\n        }\n        inline const user_output& operator << (const unsigned long ulint_arg) const {\n            printf(\"%lu\", ulint_arg); return *this;\n        }\n        inline const user_output& operator << (const float flt_arg) const {\n            printf(\"%.16f\", flt_arg); return *this;\n        }\n        inline const user_output& operator << (const double ld_arg) const {\n            printf(\"%.16lf\", ld_arg); return *this;\n        }\n        inline const user_output& operator << (const long double ld_arg) const {\n            printf(\"%.16Lf\", ld_arg); return *this;\n        }\n        inline const user_output& operator << (const char char_arg) const {\n            putchar(char_arg); return *this;\n        }\n        inline const user_output& operator << (const unsigned char uchar_arg) const {\n            putchar(uchar_arg); return *this;\n        }\n        inline const user_output& operator << (const char* str_arg) const {\n            fputs(str_arg, stdout); return *this;\n        }\n        inline const user_output& operator << (const std::string& str_arg) const {\n            fputs(str_arg.c_str(), stdout); return *this;\n        }\n        inline const user_output& operator << (void(* const func_arg)(void)) const {\n            func_arg(); return *this;\n        }\n        template <typename S, typename T>\n        inline const user_output& operator <<(const std::pair<S, T>& pair_arg) const{\n            (*this) << pair_arg.first << ' ' << pair_arg.second; return *this;\n        }\n        template <typename Tp_name>\n        inline const user_output& operator << (const std::vector<Tp_name>& vec) const {\n            const size_t size_of_vec = vec.size();\n            if(size_of_vec <= 0) return *this;\n            (*this) << vec[0]; \n            for(size_t index = 1; index < size_of_vec; ++index) (*this) << ' ' << vec[index];\n            return *this;\n        }\n    }; constexpr user_output cout;\n\n    // その他出力関数\n    void binary_output(int64_t value, size_t length = 64){\n        char out[length + 1];\n        for(size_t i = 0; i < length; ++i) out[length - 1 - i] = ((value >> i) & 1) ? '1' : '0';\n        out[length] = '\\0'; puts(out);\n    }\n    template <typename InputType>\n    void print(InputType first, InputType last, const char separate_c = ' ', const char end_c = '\\n'){\n        InputType it = first;\n        while(true){\n            MyInputAndOutput::cout << *it;\n            if(++it == last){MyInputAndOutput::cout << end_c; return;}\n            MyInputAndOutput::cout << separate_c;  \n        }\n    }\n}; namespace MIO = MyInputAndOutput;\n\n// z-algorithm\ntemplate <class T> std::vector<unsigned int> z_algorithm(const T &str) {\n    const size_t n = str.size();\n    std::vector<unsigned int> resOfCP(n); resOfCP[0] = n;\n    int i = 1, j = 0;\n    while (i < n) {\n        while (i + j < n and str[j] == str[i + j]) ++j;\n        resOfCP[i] = j;\n        if (j == 0) { ++i; continue;}\n        int k = 1;\n        while (i + k < n and k + resOfCP[k] < j) resOfCP[i + k] = resOfCP[k], ++k;\n        i += k; j -= k;\n    }\n    return resOfCP;\n} \n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nnamespace Geometory{\n    // 点(ベクトル) を表すクラス\n    template <typename real_type>\n    class Point{\n    private:\n        static constexpr real_type PI = std::acos<real_type>(-1); // 円周率\n        static constexpr real_type real_abs(const real_type v){ return std::fabs<real_type>(v); }\n        static real_type real_sqrt(const real_type v);\n    public:\n        static constexpr real_type EPS = 1e-10; // 許容誤差\n        // 誤差を許してゼロであるかを判定する関数\n        static constexpr bool isZero(const real_type& v){ return -EPS < v and v < EPS;}\n        // 符号を得る関数 : (a > 0) → 1,  (a ≒ 0) → 0, (a < 0) → -1\n        static constexpr int sign(real_type v){\n            return (v > EPS) ? 1 : ((v < -EPS) ? -1 : 0); \n        }\n\n        real_type x, y; // メンバ変数 : 点 (x, y) を表す\n\n        // コンストラクタ;\n        constexpr Point(const real_type& x = 0, const real_type& y = 0): x(x), y(y){}\n\n        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 基本的演算 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n        // 四則演算\n        constexpr Point& operator += (const Point& other){ x += other.x; y += other.y; return *this; }\n        constexpr Point& operator -= (const Point& other){ x -= other.x; y -= other.y; return *this; }\n        constexpr Point& operator *= (const Point& other){\n            const real_type&& tmp_x = x * other.x - y * other.y;\n            (y *= other.x) += x * other.y; x = tmp_x; return *this;\n        }\n        constexpr Point& operator *= (const real_type& scalar){ x *= scalar; y *= scalar; return *this; }\n        constexpr Point& operator /= (const real_type& scalar){ x /= scalar; y /= scalar; return *this; } \n        constexpr Point operator +  (const Point& other) const { return Point(*this) += other; }\n        constexpr Point operator -  (const Point& other) const { return Point(*this) -= other; }\n        constexpr Point operator -  (void) const { return Point(-x, -y); }\n        constexpr Point operator *  (const Point& other) const { return Point(*this) *= other; }\n        constexpr Point operator *  (const real_type& scalar) const { return Point(*this) *= scalar; }\n        constexpr Point operator /  (const real_type& scalar) const { return Point(*this) /= scalar; }\n        // ノルム(2乗), 絶対値, 一致判定, 内積 determinant, 偏角, rotate\n        real_type norm(void) const { return x * x + y * y; }    // ノルム\n        real_type abs(void) const { return real_sqrt(norm()); } // 絶対値 |A|\n        inline constexpr bool operator == (const Point& other) const { // 一致判定\n            return real_abs(x - other.x) < EPS and real_abs(y - other.y) < EPS;\n        }\n        // 内積を求める関数\n        real_type dot(const Point& other) const { return x * other.x + y * other.y; }\n        // 行列積を求める関数\n        real_type determinant(const Point& other) const { return x * other.y - y * other.x; }\n        // 偏角を求める関数 : rad\n        real_type arg(void) const { return std::atan2<real_type>(y, x); }\n        // 偏角を求める関数 : 180°単位\n        real_type arg_degree(void) const { return arg() * 180 / PI; }\n        // θ rad 回転(rotate)させる\n        inline Point& rotate(const real_type& theta){\n            const real_type \n                cos_theta = std::cos<real_type>(theta),\n                sin_theta = std::sin<real_type>(theta);\n            const real_type&& tmp_x = x * cos_theta - y * sin_theta;\n            (y *= cos_theta) += x * sin_theta; x = tmp_x; return *this;\n        }\n        // xの値によってソート (ほぼ同じ場合は y の値でソート)\n        inline constexpr bool  operator < (const Point& other) const {\n            const int sgn = sign(x - other.x); if(sgn) return sgn < 0;\n            return sign(y - other.y) < 0;\n        }\n        //friend const MIO::user_input& operator >> (const MIO::user_input& stream, Point<real_type>& point);\n    };\n    // テンプレート特殊化\n    template <> float Point<float>::real_sqrt(const float v){ return sqrtf(v); }\n    template <> double Point<double>::real_sqrt(const double v){ return sqrt(v); }\n    template <> long double Point<long double>::real_sqrt(const long double v){ return sqrtl(v); }\n    // 点クラス の入出力\n    template <typename real_type>\n    const MIO::user_input& operator >> (const MIO::user_input& stream, Point<real_type>& point){\n        stream >> point.x >> point.y; return stream;\n    }\n    template <typename real_type>\n    const MIO::user_output& operator << (const MIO::user_output& stream, const Point<real_type>& point){\n        stream << point.x << ' ' << point.y; return stream;\n    }\n\n    // reference https://www.ioi-jp.org/camp/2017/2017-sp_camp-hide.pdf\n    // see also  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\n    template <typename real_type> int iSP( const Point<real_type>& a,\n                                       const Point<real_type>& b,\n                                       const Point<real_type>& c ){\n        const Point<real_type> b_a = b - a, c_a = c - a;\n        const real_type a_origin_det = b_a.determinant(c_a);\n        // 直線上にない場合\n        if(a_origin_det >  Point<real_type>::EPS) return +1; // 左に曲がる : 反時計回り\n        if(a_origin_det < -Point<real_type>::EPS) return -1; // 右に曲がる : 時計回り\n        // 3点が一直線上の場合\n        if(b_a.dot(c_a) < 0)        return +2; // c-a-b の順に並んでいる場合\n        if(b_a.norm() < c_a.norm()) return -2; // a-b-c の順に並んでいる場合\n        return  0; // それ以外の順番に並んでいる場合\n    }\n\n    // 直線 を表すクラス (2点 p0, p1 を通る直線)\n    template <typename real_type> class Line{\n    public:\n        std::array<Point<real_type>, 2> point; // 通るべき2点\n\n        // コンストラクタ : 点 p1, p2 を通る直線\n        constexpr Line( const Point<real_type>& p1, const Point<real_type>& p2): point({{p1, p2}}){}\n        // コンストラクタ : 直線 Ax + By = C\n        constexpr Line(const real_type& A = 1, const real_type& B = 1, const real_type& C = 0){\n            if(std::fabs<real_type>(A) < Point<real_type>::EPS){ point[0](0, C / B); point[1](1, C / B); }\n            else if(std::fabs<real_type>(B) < Point<real_type>::EPS){ point[0](C / A, 0); point[1](C / A, 1); }\n            else{ point[0](0, C / B); point[1](C / A, 0); } \n        }\n        // 交差するか判定する : 交差する場合は true\n        bool intersect(const Line& other) const {\n            const real_type v1_det_v2 = (point[1] - point[0]).determinant(other.point[1] - other.point[0]);\n            return not Point<real_type>::isZero(v1_det_v2);\n        }\n        // 平行か判定する : 交差する場合は true\n        bool pararell(const Line& other) const {\n            const real_type v1_det_v2 = (point[1] - point[0]).determinant(other.point[1] - other.point[0]);\n            return Point<real_type>::isZero(v1_det_v2);\n        }\n        // 点 P をこの直線上に射影した点を返す (垂線の足)\n        Point<real_type> projectionOf(const Point<real_type>& P) const {\n            const Point<real_type> v = point[1] - point[0];\n            return point[0] + (v * v.dot(P - point[0]) / v.norm());\n        }\n        // 直線が一致するか判定する\n        inline bool operator == (const Line& other) const {\n            const Point<real_type> v1 = point[1] - point[0];\n            if(not Point<real_type>::isZero( v1.determinant(other.point[1] - other.point[0]))) return false;\n            return Point<real_type>::isZero( v1.determinant(other.point[1] - point[0]) );\n        }\n    };\n    // 線分 AB を表すクラス\n    template <typename real_type> class LineSegment{\n    public:\n        std::array<Point<real_type>, 2> point; // 2点\n\n        // コンストラクタ : 点 p1, p2による線分\n        constexpr LineSegment( const Point<real_type>& p1, \n                               const Point<real_type>& p2): point({{p1, p2}}){}\n        // 線分が交差するか判定する関数 ; 端点で交わる場合, 直線が一致する場合も true を返すことに注意せよ\n        constexpr bool intersect(const LineSegment& other) const {\n            return (iSP(point[0], point[1], other.point[0]) * iSP(point[0], point[1], other.point[1]) <= 0)\n                    and (iSP(other.point[0], other.point[1], point[0]) * iSP(other.point[0], other.point[1], point[1]) <= 0);\n        }\n        inline bool operator == (const LineSegment& other) const {\n            return (point[0] == other.point[0] and point[1] == other.point[1])\n                    or (point[0] == other.point[1] and point[1] == other.point[0]);\n        }\n    };\n    // 円を表すクラス\n    template <typename real_type> class Circle{\n    public:\n        real_type radius; // 半径\n        Point<real_type> center_point; // 中心\n        constexpr Circle( const real_type radius = 0, \n                          const Point<real_type>& point = {}): \n                          radius(radius), center_point(point){}\n    };\n\n    #undef EPSILON_VALUE\n};\n\nint main(void){\n    Geometory::Point<double> A, B; MIO::cin >> A >> B;\n    Geometory::Line<double> L(A, B);\n    unsigned int n; MIO::cin >> n;\n    for(unsigned int i = 0; i < n; ++i){\n        Geometory::Point<double> Ptr; MIO::cin >> Ptr;\n        MIO::cout << L.projectionOf(Ptr) << '\\n';\n    }\n\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) for(int i=0;i<(n);i++)\n#define PII pair<int,int>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double X = 0, double Y = 0)\n\t{\n\t\tx = X;\n\t\ty = Y;\n\t}\n\tPoint operator +(const Point &p)const { return Point(x + p.x, y + p.y); };\n\tPoint operator -(const Point &p)const { return Point(x - p.x, y - p.y); };\n\tPoint operator *(const double a)const { return Point(x*a, y*a); };\n\tPoint operator /(const double a)const { return Point(x / a, y / a); };\n\tdouble norm()const { return x*x + y*y; };\n\tdouble length()const { return sqrt(norm()); };\n\tdouble dot(const Point &p)const { return x*p.x + y*p.y; };\n\tdouble cross(const Point &p)const { return x*p.y - y*p.x; };\n\tbool operator ==(const Point &p)const\n\t{\n\t\treturn fabs(x - p.x)<EPS &&fabs(y - p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\n\nclass Segment\n{\npublic:\n\tPoint p1, p2;\n\tSegment(double x1, double y1, double x2, double y2)\n\t{\n\t\tp1.x = x1;\n\t\tp1.y = y1;\n\t\tp2.x = x2;\n\t\tp2.y = y2;\n\t}\n\tbool IsOrthogonal(const Segment &s)\n\t{\n\t\tVector t1 = p2 - p1;\n\t\tVector t2 = s.p2 - s.p1;\n\t\treturn equals(0.0, t1.dot(t2));\n\t}\n\tbool IsParallel(const Segment &s)\n\t{\n\t\tVector t1 = p2 - p1;\n\t\tVector t2 = s.p2 - s.p1;\n\t\treturn equals(0.0, t1.cross(t2));\n\t}\n\tPoint GetProjection(double X, double Y)const\n\t{\n\t\tVector V = p2 - p1;\n\t\tPoint P(X, Y);\n\t\tPoint ret = V*(V.dot(P) / V.norm());\n\t\treturn ret + p1;\n\t}\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point C = Point(), double R = 0)\n\t{\n\t\tc = C;\n\t\tr = R;\n\t}\n};\n\nint main()\n{\n\tdouble x1, y1, x2, y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tSegment s(x1, y1, x2, y2);\n\tint q;\n\tcin >> q;\n\tREP(i, q)\n\t{\n\t\tint x, y;\n\t\tcin >> x>> y;\n\t\tPoint ans=s.GetProjection(x, y);\n\t\tcout << fixed<< setprecision(10) <<ans.x << \" \"<< ans.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <vector>\n#include <list>\n#include <map>\n#include <climits>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <random>\n#include <cctype>\n#include <complex>\n#include <regex>\n\nusing namespace std;\n\n#define C_MAX(a, b) ((a)>(b)?(a):(b))\n#define SHOW_VECTOR(v) {std::cerr << #v << \"\\t:\";for(const auto& xxx : v){std::cerr << xxx << \" \";}std::cerr << \"\\n\";}\n#define SHOW_MAP(v) {std::cerr << #v << endl; for(const auto& xxx: v){std::cerr << xxx.first << \" \" << xxx.second << \"\\n\";}}\n\n#define EPS 1e-8\n#define EQ(a, b) (abs((a)-(b)) < EPS)\n\ntypedef complex<double> P;\n\nP dot(P a, P b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\n\nint main() {\n\n    double xp1, yp1, xp2, yp2;\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n\n    P a(xp1, yp1);\n    P b(xp2, yp2);\n\n    int Q;\n    cin >> Q;\n\n    while (Q--) {\n\n        double x, y;\n        cin >> x >> y;\n\n        P c(x, y);\n\n        P X = b - a;\n        P Y = c - a;\n\n        P ans = a + (X / abs(X)) * dot(X, Y) / abs(X);\n\n        cout << fixed << setprecision(10) << ans.real() << \" \" << ans.imag() << endl;\n\n    }\n\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i, n) for(int i=0;i<(n);++i)\n#define per(i, n) for(int i=(n)-1;i>=0;--i)\n#define repa(i, n) for(int i=1;i<(n);++i)\n#define foreach(i, n) for(auto &i:(n))\n#define pii pair<int, int>\n#define pll pair<long long, long long>\n#define all(x) (x).begin(), (x).end()\n#define bit(x) (1ll << (x))\nusing namespace std;\nusing ll = long long;\nconst ll MOD = (ll)1e9+7;\n//const ll MOD = 998244353;\n//const ll MOD = 924844033;\nconst int INF = (ll)1e9+7;\nconst ll INFLL = (ll)1e18;\nusing namespace std;\ntemplate<class t>\nusing vvector = vector<vector<t>>;\ntemplate<class t>\nusing vvvector = vector<vector<vector<t>>>;\ntemplate<class t>\nusing priority_queuer = priority_queue<t, vector<t>, greater<t>>;\ntemplate<class t, class u> bool chmax(t &a, u b){if(a<b){a=b;return true;}return false;}\ntemplate<class t, class u> bool chmin(t &a, u b){if(a>b){a=b;return true;}return false;}\n\n#ifdef DEBUG\n#define OUTPUT(x) (output(x), outendl())\n#else\n#define OUTPUT(x) (void)0\n#endif\n\nll modpow(ll x, ll b){\n\tll res = 1;\n\twhile(b){\n\t\tif(b&1)res = res * x % MOD;\n\t\tx = x * x % MOD;\n\t\tb>>=1;\n\t}\n\treturn res;\n}\n\nll modinv(ll x){\n\treturn modpow(x, MOD-2);\n}\n\nbool was_output = false;\ntemplate<class t>\nvoid output(t a){\n\tif(was_output)cout << \" \";\n\tcout << a;\n\twas_output = true;\n}\nvoid outendl(){\n\twas_output = false;\n\tcout << endl;\n}\n\n//below here\n\ntemplate<class t>\nclass Vector2{\n\tpublic:\n\t\tt x;\n\t\tt y;\n\t\tVector2():x(0), y(0){}\n\t\tVector2(t a, t b):x(a), y(b){}\n\t\tVector2(const Vector2 &o):x(o.x), y(o.y){}\n\n\t\tVector2& operator+=(Vector2 o){x+=o.x;y+=o.y;return *this;}\n\t\tVector2& operator-=(Vector2 o){x-=o.x;y-=o.y;return *this; }\n\t\tVector2& operator*=(t o){x*=o;y*=o;return *this;}\n\t\tVector2& operator/=(t o){x/=o;y/=o;return *this;}\n\n\t\tVector2 operator+(Vector2 o){return Vector2(*this)+=o;}\n\t\tVector2 operator-(Vector2 o){return Vector2(*this)-=o;}\n\t\tVector2 operator*(t o){return Vector2(*this)*=o;}\n\t\tVector2 operator/(t o){return Vector2(*this)/=o;}\n\n\t\tdouble abs(){\n\t\t\treturn sqrt(x*x+y*y);\n\t\t}\n\n\t\tVector2 normal(){\n\t\t\treturn (*this) / abs();\n\t\t}\n};\n\ntemplate<class t>\ndouble abs(Vector2<t> x){\n\treturn x.abs();\n}\n\ntemplate<class t>\ndouble dot(Vector2<t> x, Vector2<t> y){\n\treturn x.x * y.x + x.y * y.y;\n}\n\ntemplate<class t>\ndouble cross(Vector2<t> x, Vector2<t> y){\n\treturn x.x * y.y - x.y * y.x;\n}\n\ntemplate<class t>\nvoid output(Vector2<t> x){\n\tprintf(\"%lf %lf\\n\", x.x, x.y);\n}\n\n\ntemplate<class t>\nclass straight_line{\n\tpublic:\n\t\tVector2<t> f;\n\t\tVector2<t> s;\n\t\tstraight_line(){\n\t\t\tf = Vector2<t>(0,0);\n\t\t\ts = Vector2<t>(1,0);\n\t\t}\n\t\tstraight_line(Vector2<t> a,Vector2<t> b){\n\t\t\tf = a;\n\t\t\ts = b;\n\t\t}\n\n\t\tVector2<t> projection(Vector2<t> pos){\n\t\t\tpos -= f;\n\t\t\tVector2<t> n = (s-f).normal();\n\t\t\tVector2<t> res;\n\t\t\tres = n * dot(pos,n) + f;\n\t\t\treturn res;\n\t\t}\n};\n\nint main(){\n\tstraight_line<double> line;\n\t{\n\t\tVector2<double> first;\n\t\tVector2<double> second;\n\t\tcin >> first.x >> first.y >> second.x >> second.y;\n\t\tline = straight_line<double>(first,second);\n\t}\n\tint q;\n\tcin >> q;\n\trep(i,q){\n\t\tdouble x,y;\n\t\tcin >> x >> y;\n\t\tVector2<double> ans = line.projection(Vector2<double>(x,y));\n\t\tprintf(\"%.10lf %.10lf\\n\",ans.x,ans.y);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <set>\n#include <map>\n#include <list>\n#include <queue>\n#include <stack>\n#include <cmath>\n#include <ctype.h>\n#include <ctime>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <bitset>\n#include <cctype>\n#include <cstdlib>\n#include <cstring>\n#include <utility>\n#include <numeric>\n#include <complex>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <cassert>\n#include <iostream>\n#include <iterator>\n#include <algorithm>\n\nusing namespace std;\n#define EPS 1e-10\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n//???\nclass Point{\n\tpublic:\t\n\t\tdouble x,y;\n\t\tPoint(double x = 0,double y = 0):x(x),y(y){}\n\t\t//?????????\n\t\tPoint operator + (Point p) { return Point(x + p.x,y + p.y);}\n\t\tPoint operator - (Point p) { return Point(x - p.x,y - p.y);}\n\t\tPoint operator * (double a) { return Point(x*a,y*a);}\n\t\tPoint operator / (double a) { return Point(x/a,y/a);}\n\t\t//???????????¨??§??????\n\t\tdouble abs() {return sqrt(norm());}\n\t\tdouble norm() {return x*x+y*y;}\n\n\t\tbool operator < (const Point &p) const{\n\t\t\treturn x != p.x ? x < p.x : y < p.y;\n\t\t}\n\t\tbool operator == (const Point &p) const{\n\t\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t\t}\n};\n//??????\nstruct Segment{Point p1,p2;};\n//????????????\ntypedef Point Vector;\n//??´???\ntypedef Segment Line;\n//???\nclass Circle{\n\tpublic:\n\t\tPoint c;\n\t\tdouble r;\n\t\tCircle(Point c = Point(),double r = 0.0): c(c),r(r){}\n};\n//????§???¢\n//typedef Vector<Point> Polygon;\n//????????¨??????\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\nPoint projection(Segment a,Vector hypo,Vector base){\n\tdouble r = dot(hypo,base)/base.norm();\n\treturn  a.p1 + base*r;\n}\n\nint main(){\n\tint x0,y0,x1,y1;\n\tint n;\n\tint x2,y2;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tcin >> n;\n\tPoint s(x0,y0);\n\tPoint t(x1,y1);\n\tSegment seg;seg.p1 = s;seg.p2 = t;\n\tVector base(t.x-s.x,t.y-s.y);\n\tfor(int i = 0;i < n;i++){\n\t\tcin >> x2 >> y2;\n\t\tVector hypo(x2-x0,y2-y0);\n\t\tPoint p = projection(seg,hypo,base);\n\t\tprintf(\"%.10f %.10f\",p.x,p.y);\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define ll long long\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nusing namespace std;\nconst int maxn=500000;\nconst int INF=2e9;\nconst int mod=10007;\nclass Point\n{\npublic:\n    double x,y;\n    Point(double x=0,double y=0):x(x),y(y) {}\n    Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n    Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n    Point operator * (double a) {return Point(a*x,a*y);}\n    Point operator / (double a) {return Point(x/a,y/a);}\n    double abs() {return sqrt(norm());}\n    double norm() {return x*x+y*y;}\n    bool operator < (const Point &p) const {\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator == (const Point &p) const{\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\ntypedef Point Vector;\nstruct Segment\n{\n    Point p1,p2;\n};\ndouble dot(Vector a,Vector b)\n{\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b)\n{\n    return a.x*b.y-a.y*b.x;\n}\nbool isOrthogonal(Vector a,Vector b)\n{\n    return equals(dot(a,b),0.0);\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2)\n{\n    return isOrthogonal(a1-a2,b1-b2);\n}\nbool isParallel(Vector a,Vector b)\n{\n    return equals(cross(a,b),0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2)\n{\n    return isParallel(a1-a2,b1-b2);\n}\ndouble norm(Vector a)\n{\n    return a.x*a.x+a.y*a.y;\n}\nPoint project(Segment s,Point p)\n{\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\n\nint main()\n{\n    Segment l;\n    scanf(\"%lf %lf %lf %lf\",&l.p1.x,&l.p1.y,&l.p2.x,&l.p2.y);\n    int n;\n    scanf(\"%d\",&n);\n    while(n--)\n    {\n        Point a,ret;\n        scanf(\"%lf %lf\",&a.x,&a.y);\n        ret=project(l,a);\n        printf(\"%.10lf %.10lf\\n\",ret.x,ret.y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Line;\nconst double EPS = 1e-9;\n\n// 内積 |a||b|cosθ\ndouble dot(Point a, Point b){\n\t// return a.real() * b.real() + a.imag() * b.imag();\n\treturn (conj(a) * b).real();\n}\n// 射影　直線に点pを投影　点pから直線に下ろした垂線の足\nPoint projection(Line l, Point p){\n    Point a = l.first, b = l.second, c = p;\n    double t = dot(p - a, b - a) / norm(b - a); \n    return a + t * (b - a);\n}\n\nint main(){\n    double x, y;\n    Point p1, p2;\n    cin >> x >> y;\n    p1 = {x, y};\n    cin >> x >> y;\n    p2 = {x, y};\n    Line l = {p1, p2};\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        cin >> x >> y;\n        Point c = {x, y};\n        Point res = projection(l, c);\n        printf(\"%.10f %.10f\\n\", res.real(), res.imag());\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\n\nclass Vector {\n  public:\n    Vector() {}\n    Vector(double x, double y): x(x), y(y) {}\n    Vector operator+(Vector vec) { return Vector(x + vec.x, y + vec.y); }\n    Vector operator-(Vector vec) { return Vector(x - vec.x, y - vec.y); }\n    Vector operator*(double val) { return Vector(x * val, y * val); }\n    Vector operator/(double val) { return Vector(x / val, y / val); }\n\n\n    double dot(Vector vec) { return x * vec.x + y * vec.y; }\n    double norm() {\n        return std::sqrt(x * x + y * y);\n    }\n    Vector normalize() {\n        return *this / this->norm();\n    }\n\n    double x, y;\n};\n\n\nclass Line {\n  public:\n    Line() {}\n    Line(Vector p0, Vector p1): p0(p0), p1(p1) {\n        direction = p1 - p0;\n    }\n\n    Vector p0, p1;\n    Vector direction;\n};\n\nint main() {\n    Vector p1, p2;\n    std::cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Line l(p1, p2);\n    Vector dir = l.direction.normalize();\n\n    int q;\n    std::cin >> q;\n    for (int i = 0; i < q; i++) {\n        Vector p;\n        std::cin >> p.x >> p.y;\n\n        Line ql(p1, p);\n        auto x = p1 + dir * ql.direction.dot(dir);\n        std::cout << std::fixed << std::setprecision(10) << x.x << \" \" << x.y << std::endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <cstdio>\nusing namespace std;\n\nint main() {\n    int x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    int q;\n    cin >> q;\n    vector< pair<int, int> > p(q);\n\n    for(int i = 0; i < q; i++){\n        cin >> p[i].first >> p[i].second;\n    } \n\n    if(x2-x1 == 0){\n        for(int i = 0; i < q; i++){\n            cout << x1 << \" \" << p[i].second << endl;\n        }\n        return 0;\n    }\n\n    double cfi, inv_cfi, cst;\n    cfi = double(y2-y1)/(x2 - x1);\n    //cout << cfi << endl;\n    cst = y1 - cfi * x1;\n    //cout << cst << endl;\n    if(cfi == 0){\n        for(int i = 0; i < q; i++){\n            cout << p[i].first << \" \" << y1 << endl;\n        }\n        return 0;\n    }\n\n    inv_cfi = -1/cfi;\n    //cout << inv_cfi << endl;\n\n    for(int i = 0; i < q; i++){\n        double cst_p, ans_x, ans_y;\n        cst_p = p[i].second - inv_cfi * (p[i].first);\n        //ans_x = (cst - cst_p) / inv_cfi + cfi*p[i].first/inv_cfi;\n        //cout << cst_p << endl;\n        ans_x = (cst_p - cst) / (cfi - inv_cfi);\n        ans_y = inv_cfi*ans_x + cst_p;\n        //cout << \"ans_x:\" << ans_x << \"  ans_y:\" << ans_y << endl;\n        printf(\"%.10lf %.10lf\\n\", ans_x, ans_y);\n    }\n    \n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define FOR(i, a, n) for(ll i = (ll)a; i < (ll)n; i++)\n#define rep(i, n) FOR(i, 0, n)\n#define ALL(x) (x).begin(), (x).end()\nusing namespace std;\ntypedef long long ll;\n\nconstexpr ll mod = 1e9 + 7;\n\ntemplate <class T> inline bool chmax(T &a, const T b) {\n    if(a >= b) return false;\n    a = b;\n    return true;\n}\ntemplate <class T> inline bool chmin(T &a, const T b) {\n    if(a <= b) return false;\n    a = b;\n    return true;\n}\n\n/*-------------------------------------------*/\n\nstruct Point {\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n    Point operator+(const Point &p) { return Point{x + p.x, y + p.y}; }\n    Point operator-(const Point &p) { return Point{x - p.x, y - p.y}; }\n    Point operator*(const double k) { return Point{x * k, y * k}; }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n};\n\ntypedef Point Vector;\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\nbool isOrthogonal(Line l1, Line l2) {\n    return dot(l1.p2 - l1.p1, l2.p2 - l2.p1) == 0;\n}\nbool isParallel(Line l1, Line l2) {\n    return cross(l1.p2 - l1.p1, l2.p2 - l2.p1) == 0;\n}\nPoint project(Line l, Point p) {\n    Vector base = l.p2 - l.p1;\n    double r = dot(p - l.p1, base) / base.norm();\n    return l.p1 + base * r;\n}\n\nstruct Circle {\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0) : c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nint main() {\n    Line l;\n    cin >> l.p1.x >> l.p1.y >> l.p2.x >> l.p2.y;\n    int n;\n    cin >> n;\n    while(n--) {\n        Point p;\n        cin >> p.x >> p.y;\n        Point ret = project(l, p);\n        printf(\"%.10f %.10f\\n\", ret.x, ret.y);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)    //誤差\ntypedef complex<double> P;\n\n//内積\ndouble dot(P a, P b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\nP projection(P a, P b, P c){\n    return a + dot(b-a, c-a) / norm(b-a) * (b-a);\n}\n\nint main(){\n\n    P p1, p2;\n    cin >> p1.real() >> p1.imag() >> p2.real() >> p2.imag();\n    int q; cin >> q;\n    for(int i = 0; i < q; i++){\n        int x, y; cin >> x >> y;\n        P ans = projection(p1, p2, P(x, y));\n        printf(\"%.10f %.10f\\n\", ans.real(), ans.imag());\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "// #include {{{\n#include <iostream>\n#include <cassert>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <set>\n#include <map>\n#include <stack>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <complex>\n#include <algorithm>\nusing namespace std;\n// }}}\n// #define {{{\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n#define de(x) cout << #x << \"=\" << x << endl\n#define rep(i,a,b) for(int i=a;i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n// }}}\n\ntypedef db T;\nstruct P{\n    T x,y;\n    P(){} P(T x,T y):x(x),y(y){}\n    P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n    P operator + (const P&b) const {return P(x+b.x,y+b.y);}\n    P operator * (const T&k) const {return P(x*k,y*k);}\n    T operator * (const P&b) const {return x*b.x+y*b.y;}\n    void read() {scanf(\"%lf%lf\",&x,&y);}\n};\nT norm(P a){return a.x*a.x+a.y*a.y;}\nP proj(P p,P a,P b){return (b-a)*((p-a)*(b-a)/norm(b-a))+a;}\n\nint main(){\n    P p,a,b;\n    a.read();b.read();\n    int Q;scanf(\"%d\",&Q);\n    rep(i,0,Q){\n        p.read();\n        P q=proj(p,a,b);\n        printf(\"%.10f %.10f\\n\",q.x,q.y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cctype>\n#include <limits.h>\n#include <math.h>\n#include <complex>\n#include <bitset>\n#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <string>\n#include <sstream>\n#include <algorithm>\n#include <iomanip>\n#include <iostream>\n\n#define VARIABLE(x) cerr << #x << \"=\" << x << endl\n#define BINARY(x) static_cast<bitset<16> >(x)\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define REP(i,m,n) for (int i=m;i<(int)(n);i++)\n#define if_range(x, y, w, h) if (0<=(int)(x) && (int)(x)<(int)(w) && 0<=(int)(y) && (int)(y)<(int)(h))\n#define ALL(a) (a).begin(),(a).end()\nconst int INF = 1e9;\nconst double PI = 3.14159;\nint dx[4]={0, 1, 0, -1}, dy[4]={-1, 0, 1, 0};\nusing namespace std;\ntypedef long long ll;\n//typedef pair<int, int> P;\n\n/* struct P {\n\tint x, y, n;\n\tP(int n, int x, int y):n(n), x(x), y(y){}\n\tP(){}\n}; */\n\n\n/** 幾何ライブラリ **/\n// to do : 1183\n\n#include <complex>\n\n#define X real()\n#define Y imag()\n\nconst double EPS = 1e-11;\n\ntypedef double D;\ntypedef complex<D> P; // Point\n\n// 共役複素数 conj(a);\n\n// 符号\nint sig(D a, D b=0) { return a < b - EPS ? -1 : (a > b + EPS ? 1 : 0); }\n\n// 内積\nD dot(P a, P b) { return (conj(a)*b).real(); }\n\n// 外積\nD cross(P a, P b) { return (conj(a)*b).imag(); }\n\n// 線分abに対する点cの位置\nenum CCW{FRONT=1, LEFT=2, BACK=4, RIGHT=8, ON=16};\nint ccw(P a, P b, P c)\n{\n\tb -= a, c -= a;\n\tD s = sig(cross(b, c));\n\tif (s) return s>0 ? LEFT : RIGHT;\n\tif (sig(dot(b, c))<0) return BACK;\n\tif (sig(abs(c), abs(b))>0) return FRONT;\n\treturn ON;\n}\n\n// 直線abと点cの距離\nD distLP(P a, P b, P c)\n{\n\treturn abs(cross(b-a, c-a))/abs(b-a);\n}\n\n// 線分abと点cの距離\nD distLSP(P a, P b, P c)\n{\n\tif (sig(dot(b-a, c-a))<0) return abs(c-a);\n\tif (sig(dot(a-b, c-b))<0) return abs(c-b);\n\treturn abs(cross(b-a, c-a))/abs(b-a);\n}\n\n/** Problem CGL_1-A : Points/Vectors **/\nint main()\n{\n\tP a, b, c;\n\tcin>>a.X>>a.Y;\n\tcin>>b.X>>b.Y;\n\t\n\tint q; cin>>q;\n\trep(i, q) {\n\t\tcin>>c.X>>c.Y;\n\t\t cout << fixed << setprecision(15);\n\t\tP tmp = (b-a)/abs(b-a) * dot(b-a, c-a)/abs(b-a);\n\t\tcout << tmp.X << \" \" << tmp.Y << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct vec{double x;double y;};\ndouble naiseki(vec a,vec b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\nint main()\n{\n\tdouble xp1,xp2,yp1,yp2;\n\tcin>>xp1>>yp1>>xp2>>yp2;\n\tint q;cin>>q;\n\tvec base;\n\tbase.x=xp2-xp1;\n\tbase.y=yp2-yp1;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tdouble s,t;\n\t\tcin>>s>>t;\n\t\tvec hypo;\n\t\thypo.x=s-xp1;\n\t\thypo.y=t-yp1;\n\t\tcout<<p1x+base.x*naiseki(hypo,base)/naiseki(base,base)<<\" \";\n\t\tcout<<p1y+base.y*naiseki(hypo,base)/naiseki(base,base)<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include <sys/timeb.h>\n#include <fstream>\n\nusing namespace std;\n\n#define repl(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define rep(i,n) repl(i,0,n)\n#define replrev(i,a,b) for(int i=(int)(b)-1;i>=(int)(a);i--)\n#define reprev(i,n) replrev(i,0,n)\n#define repi(itr,ds) for(auto itr=ds.begin();itr!=ds.end();itr++)\n#define all(a) a.begin(),a.end()\n#define mp make_pair\n#define mt make_tuple\n#define INF 2000000000\n#define INFL 1000000000000000000LL\n#define EPS (1e-10)\n#define MOD 1000000007\n#define PI 3.1415926536\n#define RMAX 4294967295\n\ntypedef long long ll;\ntypedef pair<int, int> P;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<bool> vb;\ntypedef vector<char> vc;\ntypedef vector<string> vs;\ntypedef vector<double> vd;\ntypedef vector<P> vP;\ntypedef vector<vector<int> > vvi;\ntypedef vector<vector<bool> > vvb;\ntypedef vector<vector<ll> > vvll;\ntypedef vector<vector<char> > vvc;\ntypedef vector<vector<string> > vvs;\ntypedef vector<vector<double> > vvd;\ntypedef vector<vector<P> > vvP;\ntypedef priority_queue<int, vector<int>, greater<int> > pqli;\ntypedef priority_queue<ll, vector<ll>, greater<ll> > pqlll;\ntypedef priority_queue<P, vector<P>, greater<P> > pqlP;\ntypedef pair<int, pair<int, int> > Edge;\ntypedef vector<Edge> vE;\ntypedef priority_queue<Edge, vector<Edge>, greater<Edge> > pqlE;\n\n#define equals(a,b)(fabs((a)-(b)))<EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS&&fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ntypedef vector<Point> Polygon;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) :c(c), r(r) {}\n};\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n\n// ??????s???????§°?????¨?????????p???????§°???\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n\treturn (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p2 - s.p1, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n\n// ????????????(p0,p1)???????????????p2?????????\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < EPS)return CLOCKWISE;\n\tif (dot(a, b) < EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0\n\t\t&& ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n\tdouble base = sqrt(c.r*c.r - (pr - c.c).norm());\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n\ndouble arg(Vector p) {\n\treturn atan2(p.y, p.x);\n}\n\n// ?????¢a???????§?r\nVector polar(double a, double r) {\n\treturn Point(cos(r)*a, sin(r)*a);\n}\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = (c1.c - c2.c).abs();\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n// IN:2, ON:1, OUT:0\nint contain(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p;\n\t\tPoint b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS&&dot(a, b) < EPS)return 1;\n\t\tif (a.y > b.y)swap(a, b);\n\t\tif (a.y < EPS&&EPS<b.y&&cross(a, b)>EPS)x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\n// ??????\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tif (s.size() < 3)return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tfor (int i = 2; i < s.size(); i++) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)l.push_back(u[i]);\n\treturn l;\n}\n\nint main() {\n\tcout << fixed << setprecision(14);\n\tint x1, y1, x2, y2, Q;\n\tcin >> x1 >> y1 >> x2 >> y2 >> Q;\n\tPoint p0(x1, y1), p1(x2, y2);\n\tSegment s(p0, p1);\n\trep(i, Q) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tPoint ans = project(s, p);\n\t\tcout << ans.x << \" \" << ans.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// -*- coding: utf-8 -*-\n// Last-Updated : <2014/06/20 07:41:43 by samui>\n\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <climits>\n#include <set>\n#include <bitset>\n\n#define MP(a, b) std::make_pair(a, b)\n#define X first\n#define Y second\n#define rep(i,n) for(int (i) = 0; (i) < (int)(n); ++(i))\n#define rer(i,l,n) for(int (i) = l; (i) <= (int)(n); ++(i))\n#define reu(i,l,n) for(int (i) = l; (i) < (int)(n); ++(i))\ntemplate<typename T,typename U> inline void amin(T &x,U y){ if(y<x) x = y;}\ntemplate<typename T,typename U> inline void amax(T &x,U y){ if(x<y) x = y;}\ntemplate<typename TYPE,std::size_t SIZE>\nstd::size_t len(const TYPE (&array)[SIZE]){return SIZE;}\n\n// 幾何ライブ\ntypedef long double LD;\nconst LD INF = 1e100;\nconst LD EPS = 1e-8;\nconst LD PI = acos(-1);\ntypedef std::pair<LD,LD> PLD;\ntypedef std::vector<std::pair<LD,LD>> VPLD2;\n\nclass Point{\npublic:\n  LD x,y;\n  Point(LD x = 0,LD y = 0): x(x),y(y){ };\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);};\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);};\n  Point operator * (LD a) {return Point(x*a,y*a);};\n  Point operator / (LD a) {return Point(x/a,y/a);};\n  LD abs(){return std::sqrt(x*x+y*y);};\n  Point unit(){LD u = abs();return Point(x,y)/u; };\n};\ntypedef Point Vector2D;\nLD dotProduct(const Vector2D a,const Vector2D b){\n  return a.x*b.x+a.y*b.y;\n}\nLD angle(Vector2D a,Vector2D b){\n  return acos(dotProduct(a,b)/(a.abs()*b.abs()));\n}\nLD norm(Vector2D a){return a.x*a.x+a.y*a.y;}\nPoint Projection(Point a1,Point a2,Point a3){\n  // 線分a1-a2上への射影をもとめる。\n  LD d = dotProduct(a3-a1,a2-a1)/norm(a2-a1);\n  return (a1+(a2-a1)*d);\n  \n}\n\n\nint main(int argc, char *argv[])\n{\n  Vector2D c,d;\n  int x0,x1,y0,y1;\n  std::cin>>x0>>y0>>x1>>y1;\n  c = Vector2D(x1-x0,y1-y0);\n  int t;\n  int a,b;\n  std::cin>>t;\n  while(t>0){\n    std::cin>>a>>b;\n    Vector2D e = Projection(Point(x0,y0),Point(x1,y1),Point(a,b));\n    printf(\"%.10Lf %.10Lf\\n\",e.x,e.y);\n    t--;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<math.h>\n#define cinf(n,x) for(int i=0;i<(n);i++) cin >> x[i];\ntypedef long long int ll;\nlong long GCD(long long a, long long b) { return b ? GCD(b, a%b) : a; }\nusing namespace std;\n\nint main(){\n\tdouble x1,y1,x2,y2,xp,yp,disx,disy,ansx,ansy;\n\tint q;\n\tbool X_FLG =false , Y_FLG =false;\n\tcin >>x1>>y1>>x2>>y2; cin >>q;\n\tif(y1==y2){\n\t\tX_FLG=true;\n\t}\n\telse if(x1==x2){\n\t\tY_FLG=true;\n\t}\n\telse{\n\t\tdisy=(y2-y1);\n\t\tdisx=(x2-x1);\n\t}\n\tfor(int i=0;i<q;i++){\n\t\tcin >>xp>>yp;\n\t\tif(X_FLG){\n\t\t\tprintf(\"%.10lf %.10lf\\n\",xp,y1);\n\t\t}\n\t\telse if(Y_FLG){\n\t\t\tprintf(\"%.10lf %.10lf\\n\",x1,yp);\n\t\t}\n\t\telse{\n\t\t\tansx= (disx*disx*xp+disx*disy*yp+disy*disy*x2-disx*disy*y2)/(disy*disy+disx*disx);\n\t\t\tansy=disy*(ansx-x2)/disx+y2;\n\t\t\tprintf(\"%.10lf %.10lf\\n\",ansx,ansy );\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point{\n    public:\n    double x,y;\n    Point(double x=0,double y=0):x(x),y(y){}\n    Point operator+(const Point &p){\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator-(const Point &p){\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator*(const double &a){\n        return Point(a*x,a*y);\n    }\n    Point operator/(const double &a){\n        return Point(x/a,y/a);\n    }\n    double abs(){\n        return sqrt(norm());\n    }\n    double norm(){\n        return x*x+y*y;\n    }\n    bool operator<(const Point &p){\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator==(const Point &p){\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\ntypedef Point Vector;\nstruct Segment{\n    Point p1,p2;\n    Segment(){}\n    Segment(Point p1,Point p2):p1(p1),p2(p2){}\n};\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/base.norm();\n    return s.p1+base*r;   \n}\n\nint main(){\n    int a,b,c,d,e,f;\n    cin>>a>>b>>c>>d;\n    Point p1(a,b),p2(c,d),p3;\n    Segment s(p1,p2);\n    int q;\n    cin>>q;\n    for(int i=0;i<q;i++){\n        cin>>e>>f;\n        Point p(e,f);\n        p3=project(s,p);\n        printf(\"%.10lf %.10lf\\n\",p3.x,p3.y);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long int ll;\ntypedef vector<ll> vi;\ntypedef pair<ll,ll> ii;\n\n#define pb push_back\n#define fst first\n#define snd second\n#define ALL(cont) cont.begin(), cont.end()\n#define mset(a,b) memset(a,b,sizeof(a));\n#define foreach(it, l) for (auto it = l.begin(); it != l.end(); it++)\n#define fore(i, a, b) for (int i = a, almo5t = b; i < almo5t; ++i)\n#define SZ(x) ((int)x.size())\n#define EPS 1e-9\n#define PI 3.1415926535897932384626433832795\n#define MOD 1000000007\n#define FIN ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)\nstruct pt {  // for 3D add z coordinate\n\tdouble x,y;\n\tpt(double x, double y):x(x),y(y){}\n\tpt(){}\n\tdouble norm2(){return *this**this;}\n\tdouble norm(){return sqrt(norm2());}\n\tbool operator==(pt p){return abs(x-p.x)<=EPS&&abs(y-p.y)<=EPS;}\n\tpt operator+(pt p){return pt(x+p.x,y+p.y);}\n\tpt operator-(pt p){return pt(x-p.x,y-p.y);}\n\tpt operator*(double t){return pt(x*t,y*t);}\n\tpt operator/(double t){return pt(x/t,y/t);}\n\tdouble operator*(pt p){return x*p.x+y*p.y;}\n//\tpt operator^(pt p){ // only for 3D\n//\t\treturn pt(y*p.z-z*p.y,z*p.x-x*p.z,x*p.y-y*p.x);}\n\tdouble angle(pt p){ // redefine acos for values out of range\n\t\treturn acos(*this*p/(norm()*p.norm()));}\n\tpt unit(){return *this/norm();}\n\tdouble operator%(pt p){return x*p.y-y*p.x;}\n\t// 2D from now on\n\tbool operator<(pt p)const{ // for convex hull\n\t\treturn x<p.x-EPS||(abs(x-p.x)<=EPS&&y<p.y-EPS);}\n\tbool left(pt p, pt q){ // is it to the left of directed line pq?\n\t\treturn (q-p)%(*this-p)>EPS;}\n\tpt rot(pt r){return pt(*this%r,*this*r);}\n\tpt rot(double a){return rot(pt(sin(a),cos(a)));}\n};\npt ccw90(1,0);\npt cw90(-1,0);\nint sgn2(double x){return x<0?-1:1;}\nstruct ln {\n\tpt p,pq;\n\tln(pt p, pt q):p(p),pq(q-p){}\n\tln(){}\n\tbool has(pt r){return dist(r)<=EPS;}\n\tbool seghas(pt r){return has(r)&&(r-p)*(r-(p+pq))<=EPS;}\n//\tbool operator /(ln l){return (pq.unit()^l.pq.unit()).norm()<=EPS;} // 3D\n\tbool operator/(ln l){return abs(pq.unit()%l.pq.unit())<=EPS;} // 2D\n\tbool operator==(ln l){return *this/l&&has(l.p);}\n\n\tdouble angle(ln l){return pq.angle(l.pq);}\n\tint side(pt r){return has(r)?0:sgn2(pq%(r-p));} // 2D\n\tpt proj(pt r){return p+pq*((r-p)*pq/pq.norm2());}\n\tpt ref(pt r){return proj(r)*2-r;}\n\tdouble dist(pt r){return (r-proj(r)).norm();}\n\n};\nint main()\n{\n    FIN;\n#ifdef LOCAL\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n#else\n#define endl '\\n'\n#endif\n    double x1,y1,x2,y2;cin>>x1>>y1>>x2>>y2;\n    ln l = ln(pt(x1,y1),pt(x2,y2));\n    int q;cin>>q;\n    while(q--){\n        double x,y;cin>>x>>y;\n        pt pr = l.proj(pt(x,y));\n        cout<<fixed<<setprecision(12)<<pr.x<<' '<<pr.y<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct vec {\n  double x, y;\n  vec(double x, double y) : x(x), y(y) {}\n  vec() : x(0), y(0) {}\n  const vec operator+(const vec &v) const { return vec(x + v.x, y + v.y); }\n  const vec operator-() const { return vec(-x, -y); }\n  const vec operator-(const vec &v) const { return *this + (-v); }\n  const vec operator*(const double d) const { return vec(x * d, y * d); }\n  const vec operator/(const double d) const { return *this * (1 / d); }\n  const vec unit() const { return *this / len(); };\n  const double len() const { return sqrt(x * x + y * y); }\n  const double dot(const vec &v) const { return x * v.x + y * v.y; }\n};\n\ntypedef vec point;\n\npoint p1, p2;\nvec v;\n\nint main() {\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  v = p2 - p1;\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++) {\n    point p;\n    cin >> p.x >> p.y;\n    vec v2 = p - p1;\n    vec v3 = v.unit() * v.dot(v2) / v.len();\n    point x = p1 + v3;\n    printf(\"%.10lf %.10lf\\n\", x.x, x.y);\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef double Double;\n\nconst Double EPS = 1e-8;\nconst Double PI = acos(Double(-1.0));\n\nint sign(Double a){\n\tif (abs(a) < EPS) return 0;\n\tif (a < 0.0) return -1;\n\treturn 1;\n}\n\nbool eq(Double a, Double b){\n\treturn sign(a - b) == 0;\n}\n\nbool neq(Double a, Double b){\n\treturn sign(a - b) != 0;\n}\n\nbool lt(Double a, Double b){\n\treturn sign(a - b) == -1;\n}\n\nbool leq(Double a, Double b){\n\treturn sign(a - b) <= 0;\n}\n\nbool gt(Double a, Double b){\n\treturn sign(a - b) == 1;\n}\n\nbool geq(Double a, Double b){\n\treturn sign(a - b) >= 0;\n}\n\nDouble sq(Double a){\n\treturn a * a;\n}\n\nstruct Point {\n\tDouble x, y;\n\t\n\tPoint(){}\n\tPoint(Double x, Double y) : x(x), y(y){}\n\t\n\tbool operator < (const Point &rhs) const { \n\t\treturn x != rhs.x ? x < rhs.x : y < rhs.y;\n\t}\n\t\n\tPoint operator + (const Point &rhs) const {\n\t\treturn Point(x + rhs.x, y + rhs.y);\n\t}\n\t\n\tPoint operator - (const Point &rhs) const {\n\t\treturn Point(x - rhs.x, y - rhs.y);\n\t}\n\t\n\tPoint operator * (const Point &rhs) const {\n\t\treturn Point(x * rhs.x - y * rhs.y, x * rhs.y + y * rhs.x);\n\t}\n\t\n\tPoint operator * (Double rhs) const {\n\t\treturn Point(x * rhs, y * rhs);\n\t}\n\t\n\tPoint operator / (Double rhs) const {\n\t\treturn Point(x / rhs, y / rhs);\n\t}\n\t\n\tPoint& operator += (const Point &rhs) {\n\t\treturn *this = *this + rhs;\n\t}\n\t\n\tPoint& operator -= (const Point &rhs) {\n\t\treturn *this = *this - rhs;\n\t}\n};\n\nPoint operator * (Double lhs, const Point &rhs){\n\treturn rhs * lhs;\n}\n\nPoint operator / (Double lhs, const Point &rhs){\n\treturn rhs * lhs;\n}\n\nistream& operator >> (istream &is, Point &p){\n\treturn is >> p.x >> p.y;\n}\n\nostream& operator << (ostream &os, Point &p){\n\treturn os << p.x << \" \" << p.y;\n}\n\nstruct Segment : array<Point, 2> {\n\tSegment(){}\n\tSegment(const Point &p1, const Point &p2){\n\t\t(*this)[0] = p1;\n\t\t(*this)[1] = p2;\n\t}\n};\n\nistream& operator >> (istream &is, Segment &s){\n\treturn is >> s[0] >> s[1];\n}\n\nstruct Line : array<Point, 2> {\n\tLine(){}\n\tLine(const Point &p1, const Point &p2){\n\t\t(*this)[0] = p1;\n\t\t(*this)[1] = p2;\n\t}\n};\n\nistream& operator >> (istream &is, Line &l){\n\treturn is >> l[0] >> l[1];\n}\n\nstruct Circle {\n\tPoint p;\n\tDouble r;\n\t\n\tCircle(){}\n\tCircle(const Point &p, Double r) : p(p), r(r){}\n};\n\nistream& operator >> (istream &is, Circle &c){\n\treturn is >> c.p >> c.r;\n}\n\ntypedef vector<Point> Polygon;\n\nDouble norm(const Point &p){\n\treturn sq(p.x) + sq(p.y);\n}\n\nDouble abs(const Point &p){\n\treturn sqrt(norm(p));\n}\n\nDouble arg(const Point &p){\n\treturn atan2(p.y, p.x);\n}\n\nPoint polar(Double r, Double t){\n\treturn Point(cos(t) * r, sin(t) * r);\n}\n\nDouble dot(const Point &a, const Point &b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\nDouble cross(const Point &a, const Point &b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint ccw(const Point &p0, const Point &p1, const Point &p2){\n\tPoint a = p1 - p0, b = p2 - p0;\n\tif (sign(cross(a, b)) == 1) return 1;\n\tif (sign(cross(a, b)) == -1) return -1;\n\tif (sign(dot(a, b)) == -1) return 2;\n\tif (lt(norm(a), norm(b))) return -2;\n\treturn 0;\n}\n\ntemplate <typename L1, typename L2>\nbool orthogonal(const L1 &l1, const L2 &l2){\n\treturn sign(dot(l1[1] - l1[0], l2[1] - l2[0])) == 0;\n}\n\ntemplate <typename L1, typename L2>\nbool parallel(const L1 &l1, const L2 &l2){\n\treturn sign(cross(l1[1] - l1[0], l2[1] - l2[0])) == 0;\n}\n\ntemplate <typename L>\nPoint project(const L &l, const Point &p){\n\tPoint t = l[1] - l[0];\n\tDouble r = dot(p - l[0], t) / norm(t);\n\treturn l[0] + t * r;\n}\n\ntemplate <typename L>\nPoint reflect(const L &l, const Point &p){\n\treturn p + (project(l, p) - p) * Double(2.0);\n}\n\nbool intersect(const Line &l1, const Line &l2){\n\tif (!parallel(l1, l2)) return true;\n\treturn sign(cross(l1[1] - l1[0], l2[0] - l1[0])) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s){\n\treturn sign(cross(l[1] - l[0], s[0] - l[0])) * sign(cross(l[1] - l[0], s[1] - l[0])) <= 0;\n}\n\nbool intersect(const Line &l, const Point &p){\n\treturn sign(cross(l[0] - p, l[1] - p)) == 0;\n}\n\nbool intersect(const Segment &s1, const Segment &s2){\n\treturn ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0\n\t\t&& ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\n\nbool intersect(const Segment &s, const Point &p){\n\treturn ccw(s[0], s[1], p) == 0;\n}\n\nint main()\n{\n\tcout << fixed << setprecision(20);\n\t\n\tLine l;\n\tPoint p;\n\tint q;\n\t\n\tcin >> l >> q;\n\twhile (q--){\n\t\tcin >> p;\n\t\t\n\t\tPoint pr = project(l, p);\n\t\tcout << pr << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <vector>\n#include <math.h>\n\n\nusing namespace std;\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS) //?????????????????????????????????\n\n\n//??????????????????????????????\nclass Point {\n\npublic:\n\n\tdouble x, y;//??§?¨????????????????x,y??????\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator * (Point p) {\n\t\treturn Point(x * p.x, y * p.y);\n\t}\n\n\tPoint operator / (Point p) {\n\t\treturn Point(x / p.x, y / p.y);\n\t}\n\n\tdouble norm() {\n\t\treturn x*x + y*y;\n\t}\n\n\t//?????????????????§???????????????\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS &&  fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\n//??????????????????????????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????????????????????????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\n\tSegment(){}\n\n\t//?????¨????°???±?????????\n\tPoint projection(Point p) {\n\t\tVector base = p2 - p1;\n\n\t\tdouble r = dot(p - p1, base) / base.norm();\n\t\treturn p1 + base * r;\n\t}\n\n};\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//?°???±?????????\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\ntypedef Segment Line;\n\ntypedef vector<Point> Polygon;\n\n\n\n//???\nclass Circle {\npublic:\n\tPoint c;//??????\n\tdouble r;//??????\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n\nint main(void)\n{\n\tint n;\n\n\tSegment s;\n\tPoint p;\n\tPoint proj;\n\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> p.x >> p.y;\n\t\tproj = projection(s, p);\n\t\tprintf(\"%.8lf %.8lf\\n\",proj.x,proj.y);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<math.h>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point\n{\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n    Point operator * (double a) {return Point(x * a, y * a);}\n    Point operator / (double a) {return Point(x / a, y / a);}\n\n    double abs() {return sqrt(norm());}\n    double norm() {return x * x + y * y;}\n    \n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};typedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1 - a2, b1 - b2);\n}\n#include<iostream>\n#include<iomanip>\nusing namespace std;\nPoint projection(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p-s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\nint main(){\n    int x1, y1, x2, y2, q;\n    cin >> x1 >> y1 >> x2 >> y2 >> q;\n    Point p1 = Point(x1, y1), p2 = Point(x2, y2);\n    Segment s;\n    s.p1 = p1; s.p2 = p2;\n    for (int i = 0; i < q; i++)\n    {\n        int x, y;\n        cin >> x >> y;\n        Point p3;\n        p3.x = x; p3.y = y;\n        Point p = projection(s, p3);\n        cout << fixed << setprecision(10) << p.x << \" \" << p.y << endl;\n    }\n    \n}\n"
  },
  {
    "language": "C++",
    "code": "#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#include <iostream>\n#include <cmath>\n#include <iomanip>\nusing namespace std;\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() {return x * x + y * y; }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n  return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment {\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nint main() {\n  Segment s;\n  cin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n  int n;\n  cin >> n;\n  cout << fixed;\n  for (int i = 0; i < n; i++) {\n    Point p;\n    cin >> p.x >> p.y;\n    Point projected_p = project(s, p);\n    cout << setprecision(10) << projected_p.x << \" \" << projected_p.y << endl;\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define r(i,n) for(int i=0;i<n;i++)\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nclass Point{\n  public:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n  Point operator + (Point p){return Point(x+p.x,y+p.y);}\n  Point operator - (Point p){return Point(x-p.x,y-p.y);}\n  Point operator * (double a){return Point(a*x,a*y);}\n  Point operator / (double a){return Point(x/a,y/a);}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n  }\n};\n\ntypedef Point vect;\nstruct seg{Point p1,p2;};\n//????????´???\ndouble norm(Point p){return p.x*p.x+p.y*p.y;}\n//??¶??????\ndouble abs(Point p){return sqrt(norm(p));}\n//??????\ndouble dot(Point a,Point b){\n  return a.x*b.x+a.y*b.y;\n}\n//??????\ndouble cross(Point a,Point b){\n  return a.x*b.y-a.y*b.x;\n}\n//??´?????????\nbool C90(seg s1,seg s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\nbool C0(seg s1,seg s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n//?°???±\nPoint projec(seg s,Point p){\n  Point base = s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return s.p1+base*r;\n}\nmain(){\n  int n;\n  seg a;\n  cin>>a.p1.x>>a.p1.y>>a.p2.x>>a.p2.y;\n  cin>>n;\n  while(n--){\n    Point b,c;\n    cin>>b.x>>b.y;\n    c=projec(a,b);\n    printf(\"%.11f %.11f\\n\",c.x,c.y);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\n#define rep(i, n) REP(i, 0, n)\n#define REP(i, s, e) for(int i = (int)s; i < (int)(e); ++i)\n\n#define X real()\n#define Y imag()\n#define x(p) real(p)\n#define y(p) imag(p)\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\n#define prev(P, i) P[(i-1+P.size())%P.size()]\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\n\ntypedef double D;\ntypedef complex<D> P;\nnamespace std{\n  bool operator < (const P& a, const P& b) {\n    return x(a) != x(b) ? x(a) < x(b) : y(a) < y(b);\n  }\n}\n\nD dot(const P& a, const P& b) {\n  return x(conj(a)*b);\n}\nD cross(const P& a, const P& b) {\n  return y(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n  L(const P&a, const P& b) {\n    push_back(a);\n    push_back(b);\n  }\n};\n\ntypedef vector<P> G;\n\nstruct C {\n  P p; D r;\n};\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if(cross(b, c) > 0) return +1; //ccw\n  if(cross(b, c) < 0) return -1; //cw\n  if(dot(b, c) < 0)   return +2; //c-a-b on line\n  if(norm(b) < norm(c)) return -2; //a-b-c on line\n}\n\nP projection(const L& l, const P& p) {\n  D t = dot(p - l[0], l[0] - l[1]) / norm(l[0]- l[1]);\n  return l[0] + t * (l[0] - l[1]);\n}\n\nint main() {\n  D x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  L l{P(x1, y1), P(x2, y2)};\n  int q;\n  cin >> q;\n  cout << fixed << setprecision(20);\n  rep(i, q) {\n    D x, y;\n    cin >> x >> y;\n    auto p = projection(l, P{x, y});\n    cout << x(p) << \" \" << y(p) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,s,n) for (int i = (int)s; i < (int)n; i++)\n#define ll long long\n#define pb push_back\n#define All(x) x.begin(), x.end()\n#define Range(x, i, j) x.begin() + i, x.begin() + j\n#define lbidx(x, y) lower_bound(x.begin(), x.end(), y) - x.begin()\n#define ubidx(x, y) upper_bound(x.begin(), x.end(), y) - x.begin()\n#define BiSearchRangeNum(x, y, z) lower_bound(x.begin(), x.end(), z) - lower_bound(x.begin(), x.end(), y)turn idx;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n  public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n\nstruct Segment {\n  Point p1, p2;\n};\n\ntypedef Point Vector;\n\n// 内積\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n};\n\n// 外積\ndouble cross(Vector a, Vector b) {\n  return a.x * b.y - a.y * b.x;\n};\n\n// 直交判定\nbool isOrthogonal(Vector a, Vector b) {\n  return equals(dot(a, b), 0.0);\n};\n\n// 並行判定\nbool isParallel(Vector a, Vector b) {\n  return equals(cross(a, b), 0.0);\n};\n\n// 射影\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n};\n\nint main() {\n  int sx1, sy1, sx2, sy2;\n  int q;\n  cin >> sx1 >> sy1 >> sx2 >> sy2 >> q;\n  int x0, y0;\n  Segment seg = { Point(sx1, sy1), Point(sx2, sy2) };\n  Point p;\n  rep(i, 0, q) {\n    cin >> x0 >> y0;\n    p = Point(x0, y0);\n    Point ansp = project(seg, p);\n    printf(\"%.10f %.10f\\n\", ansp.x, ansp.y);\n  }\n};\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<bitset>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<functional>\n#include<limits>\n#include<list>\n#include<map>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<queue>\n#include<vector>\nusing namespace std;\n\n#define MOD 1000000007\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n//0?¬?\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator/(double a) { return Point(x / a, y / a); }\n\tbool operator<(const Point &p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator==(const Point &p)const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n};\n\n//1?¬?\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point(1, 1)) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\n//2?¬?\nclass Circle {\npublic:\n\tPoint c; //center\n\tdouble r; //radius\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\n//??????\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n//??????\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n//??´?????????\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) { return isOrthogonal(a1 - a2, b1 - b2); }\nbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//????????????\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isParallel(Point a1, Point a2, Point b1, Point b2) { return isParallel(a1 - a2, b1 - b2); }\nbool isParallel(Segment s1, Segment s2) { return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//?°???±\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n//????°?\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p)*2.0; }\n\n//??????(p0,p1)????????????p2???????????¢???\nenum { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//?????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n//???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble a1 = abs(cross(base, s1.p1 - s2.p1)); //area1\n\tdouble a2 = abs(cross(base, s1.p2 - s2.p1)); //area2\n\tdouble t = a1 / (a1 + a2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//2??????????????¢\ndouble getDistance(Point a, Point b) { return (a - b).abs(); }\n//??´?????¨???????????¢\ndouble getDistanceLP(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()); }\n//????????¨???????????¢\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n//????????¨??????????????¢\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn\tmin(\n\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s1, s1.p1), getDistanceSP(s1, s1.p2))\n\t);\n}\n\nint main() {\n\tPoint p1, p2;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tSegment s; s.p1 = p1; s.p2 = p2;\n\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tPoint p; scanf(\"%lf%lf\", &p.x, &p.y);\n\t\tPoint x = project(s, p);\n\t\tprintf(\"%.10lf %.10lf\\n\", x.x, x.y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\n#include<cstdio>\n#define eps (1e-10)\n#define equals(a,b) (fabs((a)-(b))<eps)\nusing namespace std;\nclass Point{\n    public:\n    double x,y;\n    Point(double x=0,double y=0):x(x),y(y){}\n    Point operator -(Point p){\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator +(Point p){\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator *(double k){\n        return Point(x*k,y*k);\n    }\n    Point operator /(double k){\n        return Point(x/k,y/k);\n    }\n    Point operator == (Point p){\n        return equals(x,p.x)&&equals(y,p.y);\n    }\n    Point operator <(Point p){\n        return !equals(x,p.x)?(x-p.x)<eps:(y,p.y)<eps;\n    }\n    Point operator > (Point p){\n        return !equals(x,p.x)?(x-p.x)>eps:(y,p.y)>eps;\n    }\n};\ntypedef Point Vector;\nstruct segment{\n    Point p1,p2;\n};\ntypedef segment line;\nstruct circle{\n    Point c;\n    double r;\n};\ntypedef vector<Point>polygon;\ndouble norm(Vector V){\n    return V.x*V.x+V.y*V.y;\n}\ndouble abs(Vector V){\n    return sqrt(norm(V));\n}\ndouble dot(Vector V1,Vector V2){\n    return V1.x*V2.x+V1.y*V2.y;\n}\ndouble cross(Vector V1,Vector V2){\n    return V1.x*V2.y-V1.y*V2.x;\n}\nbool isprallel(Vector V1,Vector V2){\n    if(cross(V1,V2)==0)return true;\n    else return false;\n}\nbool isorthogonal(Vector V1,Vector V2){\n    if(dot(V1,V2)==0)return true;\n    else return false;\n}\nPoint projection(segment s,Point p){\n    Vector hypo,base;\n    hypo=p-s.p1;\n    base=s.p2-s.p1;\n    double r=dot(hypo,base)/norm(base);\n    return s.p1+base*r;\n}\nPoint reflection(segment s,Point p){\n    return p+(projection(s,p)-p)*2.0;\n}\ndouble getdistance(Point a,Point b){\n    return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));\n}\ndouble distancepl(Point p,line l){\n    return abs(cross(p-l.p1,l.p2-l.p1)/abs(l.p2-l.p1));\n}\ndouble distanceps(Point p,segment s){\n    if(dot(s.p2-s.p1,p-s.p2)>=0)return getdistance(p,s.p2);\n    else if(dot(s.p2-s.p1,p-s.p1)>=0)return getdistance(p,s.p1);\n    else return distancepl(p,s);\n}\ndouble distancess(segment s1,segment s2){\n    return min(min(distanceps(s1.p1,s2),distanceps(s1.p2,s2)),min(distanceps(s2.p1,s1),distanceps(s2.p2,s1)));\n}\nint main(){\n    int q;\n    Point p1,p2,p,ans;\n    segment s;\n    cin>>p1.x>>p1.y>>p2.x>>p2.y;\n    s.p1=p1;\n    s.p2=p2;\n    cin>>q;\n    while(q--){\n        cin>>p.x>>p.y;\n        ans=projection(s,p);\n        printf(\"%.10lf %.10lf\\n\",ans.x,ans.y);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <vector>\n#include <cfloat>\n#include <string>\n#include <cmath>\n#include <set>\n#include <cstdlib>\n#include <map>\n#include <ctime>\n#include <iomanip>\n#include <functional>\n#include <deque>\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <cstdio>\n#include <stack>\n#include <climits>\n#include <sys/time.h>\n#include <cctype>\n\nusing namespace std;\n\ntypedef long long ll;\n\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(a*x, a*y); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double norm() { return x*x+y*y; }\n  double abs() { return sqrt(norm()); }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\ntypedef vector <Vector> Polygon;\n\nclass Segment {\n public:\n  Point p1, p2;\n\n  Segment(Point p1 = Point(), Point p2 = Point()): p1(p1), p2(p2) {}\n};\n\ndouble norm(Vector a) {\n  return a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a) {\n  return sqrt(norm(a));\n}\n\n// ?????????|a||b|cos\ndouble cross(Vector a, Vector b) {\n  return a.x*b.y-a.y*b.x;\n}\n// ?????????|a||b|sin\ndouble dot(Vector a, Vector b) {\n  return a.x*b.x+a.y*b.y;\n}\n\nPoint project(Segment s, Point p) {\n  Vector base = s.p2-s.p1;\n  double r = dot(p-s.p1, base)/norm(base);\n  return s.p1+base*r;\n}\n\nint main() {\n  Segment l;\n  cin >> l.p1.x >> l.p1.y >> l.p2.x >> l.p2.y;\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++) {\n    Vector p;\n    cin >> p.x >> p.y;\n    Vector ans = project(l, p);\n    cout << fixed << setprecision(20) << ans.x << \" \"<< ans.y << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs( (a)-(b) ) < EPS)\n\nclass Point{\n\npublic:\n  double x,y;\n  \n  Point(double x=0,double y=0): x(x),y(y) {}\n  \n  Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n  Point operator * (double a) { return Point(a*x,a*y); }\n  Point operator / (double a) { return Point(x/a,y/a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x + y*y; }\n  \n  bool operator < (const Point &p) const{\n    return x != p.x ? x<p.x : y<p.y;\n  }\n  \n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n  \n};\ntypedef Point Vector;\n\ndouble dot(Vector a,Vector b){\n  return a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x*b.y - a.y*b.x;\n}\n\nPoint project(Point p1,Point p2,Point p){\n  Vector base = p2-p1;\n  double r = dot(p-p1,base) / base.norm();\n  return p1 + base * r;\n}\n\nint main(){\n  int q;\n  double x1,y1,x2,y2,x,y;\n  Point p1,p2,p,pro;\n  \n  scanf(\"%lf %lf %lf %lf %d\",&x1,&y1,&x2,&y2,&q);\n  p1 = Point(x1,y1);\n  p2 = Point(x2,y2);\n  \n  while(q--){\n    scanf(\"%lf %lf\",&x,&y);\n    p = Point(x,y);\n    pro = project(p1,p2,p);\n    printf(\"%lf %lf\\n\",pro.x,pro.y);\n  }\n\n  return(0);\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n \nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n \nint main(){\n  int n;\n  double ax,ay,bx,by,cx,cy;\n  scanf(\"%lf %lf %lf %lf %d\",&ax,&ay,&bx,&by,&n);\n  while(n--){\n    scanf(\"%lf %lf\",&cx,&cy);\n    P p=project(P(ax,ay),P(bx,by),P(cx,cy));\n    printf(\"%.8f %.8f\\n\",p.real(),p.imag());\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//#include \"pch.h\"\n#include <iostream>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <queue>\n#include <bitset>\n#include <limits.h>\n#include <string>\n#include <stack>\n#include <deque>\n#include <cmath>\n#include <bitset>\n#include <complex>\n#include <functional>\n#include <time.h>\n#include <cassert>\n#include <fstream>\n#include <stdio.h>\n#include<unordered_map>\n\ntypedef long long ll;\ntypedef std::pair<int, int> Pii;\ntypedef std::pair<long long, long long> Pll;\ntypedef std::pair<double, double> Pdd;\n\n#define rip(i, n, s) for (int i = (s);i < (int)( n ); i++)\n#define mapa make_pair\n#define all(a) a.begin(), a.end()\n#define MM << \" \" <<\n\ntemplate<typename T>\nusing MaxHeap = std::priority_queue<T>;\ntemplate<typename T>\nusing MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;\n\ntemplate<typename T>\ninline bool chmax(T &a, T b) {\n\tif (a < b) {\n\t\ta = b;\n\t\treturn true;\n\t}\n\treturn false;\n}\ntemplate<typename T>\ninline bool chmin(T &a, T b) {\n\tif (a > b) {\n\t\ta = b;\n\t\treturn true;\n\t}\n\treturn false;\n}\n\ntemplate<typename T>\nstd::vector<T> vec(int len, T elem) { return std::vector<T>(len, elem); }\ntemplate<typename T>\nvoid vdeb(std::vector<T> &da) {\n\tfor (int i = 0;i < da.size();i++) {\n\t\tif (i == da.size() - 1) std::cout << da[i];\n\t\telse std::cout << da[i] << ' ';\n\t}\n\tstd::cout << std::endl;\n}\ntemplate<typename T>\nvoid vdeb(std::vector<std::vector<T>> &da) {\n\tfor (int i = 0;i < da.size();i++) vdeb(da[i]);\n\tstd::cout << std::endl;\n}\n\nusing namespace std;\n\ndouble inpro(const complex<double> &x, const complex<double> &y){// inner product\n    return x.real()*y.real() + x.imag()*y.imag();\n}\n\ncomplex<double> projection(const complex<double> &x, const complex<double> &y){//projection of x onto y\n    //cout << inpro(x,y) << endl;\n    return y*(inpro(x, y)/norm(y));\n}\n\nint main(){\n    double x1, x2, y1, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    complex<double> X(x2-x1, y2-y1), base(x1, y1);\n    int p; cin >> p;\n    vector<complex<double>> ans(p);\n    rip(i,p,0){\n        double x,y;\n        cin >> x >> y;\n        complex<double> now(x-x1, y-y1);\n        ans[i] = projection(now, X) + base; \n    }\n    rip(i,p,0){\n        printf(\"%.10f %.10f\\n\", ans[i].real(), ans[i].imag());\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<climits>\n#include<string>\n#include<vector>\n#include<list>\n#include<map>\n#include<set>\n#include<cmath>\n#include<queue>\n#include<cstring>\n#include<stack>\nusing namespace std;\n#define EPS 1e-8\n#define INF 1000000\n \nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x=_x; y=_y;\n    }\n    Point operator +(const Point p)const{\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator -(const Point p)const{\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator *(const double d)const{\n        return Point(x*d,y*d);\n    }\n    bool operator <(const Point &p)const{\n        if(x==p.x) return y<p.y;\n        return x<p.x;\n    }\n    double norm(){\n        return x*x+y*y;\n    }\n\tbool input(){\n\t\tif(cin>>x>>y) return true;\n\t\treturn false;\n\t}\n};\n \nstruct Line{\n    Point a,b;\n    Line(){}\n    Line(Point _a,Point _b){\n        a=_a; b=_b;\n    }\n\tbool input(){\n\t\tif(a.input() && b.input()) return true;\n\t\treturn false;\n\t}\n};\n \nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point _c,double _r){\n        c=_c; r=_r;\n    }\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\ntypedef Line Segment;\n\ndouble dot(Point p,Point q){\n    return p.x*q.x+p.y*q.y;\n}\n \ndouble cross(Point p,Point q){\n    return p.x*q.y-q.x*p.y;\n}\n \nint ccw(Point a,Point b,Point c){ //a,b,c,?????¨?????°??????\n\tVector v1 = b-a;\n\tVector v2 = c-a;\n    if(cross(v1,v2)>EPS) return +1; //a->b->c ??????????¨???????\n    if(cross(v1,v2)<-EPS) return -1; //a->b->c ???????¨???????\n\tif(dot(v1,v2)<-EPS) return +2; //c???a-b???????????? c<-a->b\n\tif(v1.norm()<v2.norm()) return -2; //c???a-b????????? a->b->c\n    return 0; //c???a-b??? a->c->b\n}\n\nPoint project(Segment s,Point p){\n\tVector v1 = s.b-s.a;\n\tVector v2 = p-s.a;\n\tdouble r = dot(v1,v2)/v1.norm();\n\treturn s.a+v1*r;\n}\n\nPoint Reflect(Segment s,Point p){\n\treturn p+(project(s,p)-p)*2.0;\n}\n \nbool intersect_ll(Line l,Line m){\n\treturn ccw(l.a,l.b,m.a)*ccw(l.a,l.b,m.b)<=0 && ccw(m.a,m.b,l.a)*ccw(m.a,m.b,l.b)<=0;\n}\n \nbool crosspoint_ss(Segment s,Segment t,Point &p){\n    Vector a1,a2,b1,b2;\n    a1 = s.b-s.a; a2 = t.b-t.a;\n    b1 = t.a-s.a; b2 = s.a-t.b;\n    double s1,s2;\n    s1 = cross(a1,b1)/2; s2 = cross(a1,b2)/2;\n    if(s1+s2<EPS) return false; //??????\n    p = Point(t.a.x+a2.x*s1/(s1+s2),t.a.y+a2.y*s1/(s1+s2));\n    return true;\n}\n \nint crosspoint_ll(Line l,Line m,Point &p){\n    if(intersect_ll(l,m)==false) return 0; //?????????????????????\n    if(crosspoint_ss(l,m,p)==true) return 1;\n\treturn -1; //??????????????????(??????????????????)\n}\n \nint crosspoint_cc(Circle c1,Circle c2,Point &p1,Point &p2){\n    double d,a,t;\n    d = sqrt((c2.c-c1.c).norm());\n\tif(abs(c1.c.x-c2.c.x)<EPS && abs(c1.c.y-c2.c.y)<EPS && abs(c1.r-c2.r)<EPS)\n\t\treturn -1; //2????????????????????£?????????\n    if(d<abs(c1.r-c2.r) || c1.r+c2.r<d) return 0; //??¢?????????????????????\n    a = acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n    t = atan2(c2.c.y-c1.c.y,c2.c.x-c1.c.x);\n    p1 = Point(c1.c.x+c1.r*cos(t+a),c1.c.y+c1.r*sin(t+a));\n    p2 = Point(c1.c.x+c1.r*cos(t-a),c1.c.y+c1.r*sin(t-a));\n    if(abs(p1.x-p2.x)<EPS && abs(p1.y-p2.y)<EPS) return 1; //?????????1???\n    return 2; //?????????2???\n}\n\nint contains(Polygon g,Point p){\n\tLine l = Line(p,Point(INF,p.y));\n\tint cnt = 0, n = g.size();\n\tfor(int i=0;i<n;i++){\n\t\tVector a = g[i]-p;\n\t\tVector b = g[(i+1)%n]-p;\n\t\tif(ccw(g[i],g[(i+1)%n],p)==0) return 1; //?????????\n\t\tif(a.y>b.y) swap(a,b);\n\t\tif(a.y<=EPS && EPS<b.y && cross(a,b)>EPS) cnt++;\n\t}\n\tif((cnt&1)==1) return 2; //??????????????????\n\treturn 0; //?????????????????????\n}\n\nPolygon andrewScan(Polygon s){\n\tif(s.size()<=2) return s;\n\tsort(s.begin(),s.end());\n\tPolygon g;\n\tfor(int i=0;i<s.size();i++){\n\t\tfor(int n=g.size(); n>=2 && ccw(g[n-2],g[n-1],s[i])!=-1; n--){\n\t\t\tg.pop_back();\n\t\t}\n\t\tg.push_back(s[i]);\n\t}\n\tint upper_n = g.size();\n\tfor(int i=s.size()-2;i>=0;i--){\n\t\tfor(int n=g.size(); n>upper_n && ccw(g[n-2],g[n-1],s[i])!=-1; n--){\n\t\t\tg.pop_back();\n\t\t}\n\t\tg.push_back(s[i]);\n\t}\n\treverse(g.begin(),g.end());\n\tg.pop_back();\n\treturn g;\n}\n\nint main(){\n\tSegment s;\n\tPoint p;\n\tint Q;\n\ts.input(); cin>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tp.input();\n\t\tPoint q = project(s,p);\n\t\tprintf(\"%lf %lf\\n\",q.x,q.y);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "/**\n * @copyright (c) 2020 Daisuke Hashimoto\n */\n\n#include <cstdint>\n#include <iostream>\n#include <cmath>\n#include <iomanip>\n\nvoid CallProjection(std::istream &input_stream) noexcept;\n\nclass Point2D {\n public:\n  Point2D(const double x, const double y) noexcept;\n  ~Point2D() noexcept;\n  Point2D(const Point2D &obj) noexcept;\n  Point2D &operator=(const Point2D &obj) noexcept;\n  Point2D(Point2D &&obj) noexcept;\n  Point2D &operator=(Point2D &&obj) noexcept;\n\n  Point2D operator+(const Point2D &rhs) const noexcept;\n  Point2D operator-(const Point2D &rhs) const noexcept;\n  Point2D operator*(const double rhs) const noexcept;\n  double InnerProduct(const Point2D &rhs) const noexcept;\n  double OuterProduct(const Point2D &rhs) const noexcept;\n  double SquareSum() const noexcept;\n\n  double X() const noexcept;\n  double Y() const noexcept;\n\n private:\n  Point2D() = delete;\n\n private:\n  double x_;\n  double y_;\n};\n\nclass Line {\n public:\n  Line(const Point2D &p1, const Point2D &p2) noexcept;\n  ~Line() noexcept;\n  bool IsParallel(const Line &rhs) const noexcept;\n  bool IsOrthogonal(const Line &rhs) const noexcept;\n  bool IsOnLine(const Point2D &point) const noexcept;\n  bool operator==(const Line &rhs) const noexcept;\n  bool operator!=(const Line &rhs) const noexcept;\n  Point2D ProjectPoint(const Point2D &point) const;\n\n private:\n  Line() = delete;\n  Line(const Line &obj) = delete;\n  Line &operator=(const Line &obj) = delete;\n  Line(Line &&obj) = delete;\n  Line &operator=(Line &&obj) = delete;\n\n private:\n  Point2D p1_;\n  Point2D p2_;\n};\n\nvoid CallProjection(std::istream &input_stream) noexcept {\n  input_stream.tie(0);\n  std::ios::sync_with_stdio(false);\n  double p0_x, p0_y, p1_x, p1_y;\n  input_stream >> p0_x >> p0_y >> p1_x >> p1_y;\n  Line line(Point2D(p0_x, p0_y), Point2D(p1_x, p1_y));\n\n  int32_t number_of_queries;\n  input_stream >> number_of_queries;\n  for (int32_t i = 0; i < number_of_queries; ++i) {\n    double x, y;\n    input_stream >> x >> y;\n    const Point2D projected_point = line.ProjectPoint(Point2D(x, y));\n    std::cout << std::setprecision(20) << projected_point.X() << \" \" << projected_point.Y() << std::endl;\n  }\n}\n\n// *************************************\nPoint2D::Point2D(const double x, const double y) noexcept : x_(x), y_(y) {}\n\nPoint2D::~Point2D() noexcept {}\n\nPoint2D::Point2D(const Point2D &obj) noexcept : x_(obj.x_), y_(obj.y_) {}\n\nPoint2D &Point2D::operator=(const Point2D &rhs) noexcept {\n  if (this != &rhs) {\n    this->x_ = rhs.x_;\n    this->y_ = rhs.y_;\n  }\n  return *this;\n}\n\nPoint2D::Point2D(Point2D &&obj) noexcept : x_(obj.x_), y_(obj.y_) {}\n\nPoint2D &Point2D::operator=(Point2D &&rhs) noexcept {\n  if (this != &rhs) {\n    this->x_ = rhs.x_;\n    this->y_ = rhs.y_;\n  }\n  return *this;\n}\n\nPoint2D Point2D::operator+(const Point2D &rhs) const noexcept {\n  Point2D point(this->x_ + rhs.x_, this->y_ + rhs.y_);\n  return point;\n}\n\nPoint2D Point2D::operator-(const Point2D &rhs) const noexcept {\n  Point2D point(this->x_ - rhs.x_, this->y_ - rhs.y_);\n  return point;\n}\n\nPoint2D Point2D::operator*(const double rhs) const noexcept {\n  Point2D point(this->x_ * rhs, this->y_ * rhs);\n  return point;\n}\n\ndouble Point2D::X() const noexcept {\n  return x_;\n}\n\ndouble Point2D::Y() const noexcept {\n  return y_;\n}\n\ndouble Point2D::InnerProduct(const Point2D &rhs) const noexcept {\n  return ((this->x_ * rhs.x_) + (this->y_ * rhs.y_));\n}\ndouble Point2D::OuterProduct(const Point2D &rhs) const noexcept {\n  return ((this->x_ * rhs.y_) - (this->y_ * rhs.x_));\n}\n\ndouble Point2D::SquareSum() const noexcept {\n  return (x_ * x_ + y_ * y_);\n}\n\n// ************************************************\n\nLine::Line(const Point2D &p1, const Point2D &p2) noexcept : p1_(p1), p2_(p2) {}\n\nLine::~Line() noexcept {}\n\nbool Line::IsParallel(const Line &rhs) const noexcept {\n  const Point2D this_direction = this->p2_ - this->p1_;\n  const Point2D rhs_direction = rhs.p2_ - rhs.p1_;\n  const double outer_product = this_direction.OuterProduct(rhs_direction);\n  constexpr double kEps = 0.0000001;\n  const bool is_parallel = (abs(outer_product) < kEps);\n  return is_parallel;\n}\n\nbool Line::IsOrthogonal(const Line &rhs) const noexcept {\n  const Point2D this_direction = this->p2_ - this->p1_;\n  const Point2D rhs_direction = rhs.p2_ - rhs.p1_;\n  constexpr double kEps = 0.0000001;\n  const double inner_product = this_direction.InnerProduct(rhs_direction);\n  const bool is_parallel = (abs(inner_product) < kEps);\n  return is_parallel;\n}\n\nbool Line::IsOnLine(const Point2D &point) const noexcept {\n  const Line line1(point, p1_);\n  const Line line2(point, p2_);\n  const bool is_on_line = line1.IsParallel(line2);\n  return is_on_line;\n}\n\nbool Line::operator==(const Line &rhs) const noexcept {\n  return (IsOnLine(rhs.p1_) && IsOnLine(rhs.p2_));\n}\n\nbool Line::operator!=(const Line &rhs) const noexcept {\n  return !(*this == rhs);\n}\n\nPoint2D Line::ProjectPoint(const Point2D &point) const {\n  const Point2D p2_from_p1 = p2_ - p1_;\n  const Point2D point_from_p1 = point - p1_;\n  const double square_sum = p2_from_p1.SquareSum();\n  constexpr double kEps = 0.0000001;\n  if (abs(square_sum) < kEps) {\n    std::cerr << \"ERROR: Line::ProjectPoint()\" << std::endl;\n    throw 1;\n  }\n  const double coefficient = p2_from_p1.InnerProduct(point_from_p1) / square_sum;\n  const Point2D projected_point = p1_ + (p2_from_p1 * coefficient);\n  return projected_point;\n}\n\nint main(int argc, char *argv[]) {\n  try {\n    CallProjection(std::cin);\n  } catch (...) {\n    std::cerr << \"ERROR: main()\" << std::endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "///\n// File:  cgl_1_a.cpp\n// Author: ymiyamoto\n//\n// Created on Sun Oct 22 19:02:33 2017\n//\n\n#include <cstdint>\n#include <iomanip>\n#include <iostream>\n\nusing namespace std;\n\nstruct vector_t;\n\nstruct point_t {\n  double x;\n  double y;\n\n  point_t operator+(const point_t a)\n  {\n    return point_t({x + a.x, y + a.y});\n  }\n\n  void print()\n  {\n    cout << fixed << setprecision(10) << x << \" \" << y << endl;\n  }\n};\n\nstruct vector_t {\n  double x;\n  double y;\n\n  vector_t(double a, double b) : x(a), y(b)\n  {\n  }\n  vector_t(point_t a, point_t b) : x(a.x - b.x), y(a.y - b.y)\n  {\n  }\n\n  double norm2()\n  {\n    return x * x + y * y;\n  }\n\n  double cross(vector_t a)\n  {\n    return x * a.x + y * a.y;\n  }\n\n  vector_t operator*(double a)\n  {\n    return vector_t(a * x, a * y);\n  }\n\n  point_t operator+(point_t p)\n  {\n    return point_t({x + p.x, y + p.y});\n  }\n};\n\nint32_t main()\n{\n  double x, y;\n  cin >> x >> y;\n  point_t p1 = point_t({x, y});\n\n  cin >> x >> y;\n  point_t p2 = point_t({x, y});\n\n  vector_t vec(p1, p2);\n\n  uint32_t q;\n  cin >> q;\n  for (uint32_t i = 0; i < q; i++) {\n    double x, y;\n    cin >> x >> y;\n    vector_t v(point_t({x, y}), p1);\n    (vec * (vec.cross(v) / vec.norm2()) + p1).print();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <vector>\nusing namespace std;\nconst double EPS = 1e-10;\nbool equals(double a, double b) {\n\treturn fabs(a - b) < EPS;\n}\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point rhs) {\n\t\treturn Point(x + rhs.x, y + rhs.y);\n\t}\n\tPoint operator - (Point rhs) {\n\t\treturn Point(x - rhs.x, y - rhs.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k * x, k * y);\n\t}\n\tbool operator < (const Point& rhs) const {\n\t\treturn x != rhs.x ? x < rhs.x : y < rhs.y;\n\t}\n\tbool operator == (const Point& rhs) const {\n\t\treturn equals(x, rhs.x) && equals(y, rhs.y);\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n};\ntypedef Point Vector;\nstruct Segment {\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0);\n}\nbool isOrthogonal(Segment a, Segment b) {\n\treturn isOrthogonal(Vector(a.p2.x - a.p1.x, a.p2.y - a.p1.y), Vector(b.p2.x - b.p1.x, b.p2.y - b.p1.y));\n}\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0);\n}\nbool isParallel(Segment a, Segment b) {\n\treturn isParallel(Vector(a.p2.x - a.p1.x, a.p2.y - a.p1.y), Vector(b.p2.x - b.p1.x, b.p2.y - b.p1.y));\n}\nPoint project(Point p, Segment s) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + (base * r);\n} \nint main() {\n    int q;\n\tdouble x1, y1, x2, y2;\n\tscanf(\"%lf%lf%lf%lf%d\", &x1, &y1, &x2, &y2, &q);\n\tSegment s = Segment(Point(x1, y1), Point(x2, y2));\n\twhile (q--) {\n\t\tscanf(\"%lf%lf\", &x1, &y1);\n\t\tPoint ans = project(Point(x1, y1), s);\n\t\tprintf(\"%.010lf %.010lf\\n\", ans.x, ans.y);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string.h>\n#include<string>\n#include<cstdio>\n#include<algorithm>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<cmath>\n#include<utility>\n#include<set>\n#include<complex>\n#define ll long long int\n#define ld long double\n#define INF 1000000000\n#define EPS 0.0000000001\n#define rep(i,n) for(i=0;i<n;i++)\nusing namespace std;\n\ntypedef complex<double> P;\n\nstruct L : public vector<P>{//??´???\n  L(const P &a, const P &b){\n    push_back(a);push_back(b);\n  }\n};\n\nstruct C{//???\n  P c; double r;\n  C(const P &c,double r): c(c),r(r){}\n};\n\nnamespace std{//??????????????????\n  bool operator < (const P& a,const P& b){\n    return real(a)!= real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b)\n  }\n  bool operator == (const P& a,const P& b){\n    return a.real()==b.real()&&a.imag()==b.imag();\n  }\n}\n\ndouble dot(P a,P b){\n  return real(conj(a)*b);\n}\n\ndouble cross(P a,P b){\n  return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n  b-=a;c-=a;\n  if(cross(b,c)>0)   return +1;// counter clockwise \n  if(cross(b,c)<0)   return -1;// clockwise \n  if(dot(b,c)<0)     return +2;// c-a-b on line\n  if(norm(b)<norm(c))return -2;// a-b-c on line\n  return 0;                    // a-c-b on lone\n}\n\nint main()\n{\n  double xp1,yp1,xp2,yp2;\n  int q;\n  int i,j;\n\n  cin>>xp1>>yp1>>xp2>>yp2;\n  cin>>q;\n\n  P p1(xp1,yp1),p2(xp2,yp2);\n\n  rep(i,q){\n    double xp,yp;\n    cin>>xp>>yp;\n    P p(xp,yp);\n    P t=dot(p2-p1,p-p1)/norm(p2-p1)*(p2-p1);\n    P ans=p1+t;\n    cout<<ans.real()<<\" \"<<ans.imag()<<endl;\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define For(i, a, b) for(int (i)=(a); (i)<(b); ++(i))\n#define rFor(i, a, b) for(int (i)=(a)-1; (i)>=(b); --(i))\n#define rep(i, n) For((i), 0, (n))\n#define rrep(i, n) rFor((i), (n), 0)\n#define fi first\n#define se second\nusing namespace std;\ntypedef long long lint;\ntypedef unsigned long long ulint;\ntypedef pair<int, int> pii;\ntypedef complex<double> xy_t;\ntypedef pair<xy_t, int> pci;\ntypedef vector<lint> poly;\ntemplate<class T>bool chmax(T &a, const T &b){if(a<b){a=b; return true;} return false;}\ntemplate<class T>bool chmin(T &a, const T &b){if(a>b){a=b; return true;} return false;}\n\nconstexpr lint mod = 1e9+7;\nconstexpr lint INF = mod*mod;\nconstexpr int MAX = 100010;\n\nconstexpr double eps=1e-9;\n\ninline int sgn(double x){\n    if(x<-eps) return -1;\n    if(x>eps) return 1;\n    return 0;\n}\n\ninline bool EQ(double x, double y){\n    return sgn(x-y)==0;\n}\n\ninline bool GE(double x, double y){\n    return sgn(x-y)==1;\n}\n\ninline bool LE(double x, double y){\n    return sgn(x-y)==-1;\n}\n\ninline bool GEQ(double x, double y){\n    return sgn(x-y)>=0;\n}\n\ninline bool LEQ(double x, double y){\n    return sgn(x-y)<=0;\n}\n\nstruct Point{\n    double x, y;\n    Point(double x, double y): x(x), y(y){}\n\n    Point operator+(const Point &p){\n        return {x+p.x, y+p.y};\n    }\n\n    Point operator-(const Point &p){\n        return {x-p.x, y-p.y};\n    }\n\n    Point operator*(const double k){\n        return {k*x, k*y};\n    }\n\n    Point operator/(const double k){\n        return {x/k, y/k};\n    }\n\n    double operator*(const Point &p){\n        return x*p.x+y*p.y;\n    }\n\n    double operator^(const Point &p){\n        return x*p.y-y*p.x;\n    }\n\n    bool operator==(const Point &p){\n        return EQ(x, p.x) && EQ(y, p.y);\n    }\n};\n\nusing Vec=Point;\nusing Polygon=vector<Point>;\n\ndouble norm(Point p){\n    return p.x*p.x+p.y*p.y;\n}\n\ndouble abs(Point p){\n    return sqrt(norm(p));\n}\n\ndouble arg(Point p){\n    return atan2(p.y, p.x);\n}\n\nPoint proj(Point a, Vec v, Point p){\n    double t=v*(p-a)/norm(v);\n    return a+v*t;\n}\n\nconstexpr int CCW_COUNTER_CLOCKWISE=1;\nconstexpr int CCW_CLOCKWISE=-1;\nconstexpr int CCW_ONLINE_BACK=-2;\nconstexpr int CCW_ONLINE_FRONT=2;\nconstexpr int CCW_ON_SEGMENT=0;\n\ninline int ccw(Point a, Point b, Point c){\n    Vec v=b-a, w=c-a;\n    if(GE(v^w, 0)) return CCW_COUNTER_CLOCKWISE;\n    if(LE(v^w, 0)) return CCW_CLOCKWISE;\n    if(LE(v*w, 0)) return CCW_ONLINE_BACK;\n    if(LE((a-b)*(c-b), 0)) return CCW_ONLINE_FRONT;\n    return CCW_ON_SEGMENT;\n}\n\nbool isParallel(Vec v, Vec w){\n    return EQ(v^w, 0);\n}\n\nbool isOrthogonal(Vec v, Vec w){\n    return EQ(v*w, 0);\n}\n\nbool intersectSS(Point a, Point b, Point c, Point d){\n    return ccw(a, b, c)*ccw(a, b, d)<=0 && ccw(c, d, a)*ccw(c, d, b)<=0;\n}\n\nPoint getCrossPointLL(Point a, Vec v, Point b, Vec w){\n    double t=((b-a)^w)/(v^w);\n    return a+v*t;\n}\n\ndouble getDistanceLP(Point a, Vec v, Point p){\n    return abs(v^(p-a)/abs(v));\n}\n\ndouble getDistanceSP(Point a, Point b, Point p){\n    if(LE((b-a)*(p-a), 0)) return abs(p-a);\n    if(LE((a-b)*(p-b), 0)) return abs(p-b);\n    return getDistanceLP(a, b-a, p);\n}\n\ndouble getDistanceLL(Point a, Vec v, Point b, Vec w){\n    if(isParallel(v, w)) return getDistanceLP(a, v, b);\n    return 0;\n}\n\ndouble getDistanceLS(Point a, Vec v, Point c, Point d){\n    Point b=a+v;\n    if(ccw(a, b, c)*ccw(a, b, d)<=0) return 0;\n    return min(getDistanceLP(a, v, c), getDistanceLP(a, v, d));\n}\n\ndouble getDistanceSS(Point a, Point b, Point c, Point d){\n    if(intersectSS(a, b, c, d)) return 0;\n    return min({getDistanceSP(a, b, c), getDistanceSP(a, b, d),\n                getDistanceSP(c, d, a), getDistanceSP(c, d, b)});\n}\n\nint intersectCC(Point c1, double r1, Point c2, double r2){\n    if(r1<r2){\n        swap(c1, c2);\n        swap(r1, r2);\n    }\n    double d=abs(c1-c2), r=r1+r2;\n    if(GE(d, r)) return 4;\n    if(EQ(d, r)) return 3;\n    if(EQ(d+r2, r1)) return 1;\n    if(LE(d+r2, r1)) return 0;\n    return 2;\n}\n\nbool intersectCL(Point c, double r, Point a, Vec v){\n    return LEQ(getDistanceLP(a, v, c), r);\n}\n\nbool intersectCS(Point c, double r, Point a, Point b){\n    return LEQ(getDistanceSP(a, b, c), r) && GEQ(max(abs(a-c), abs(b-c)), r);\n}\n\n\n\nint main(){\n    double xp1, yp1, xp2, yp2;\n    scanf(\"%lf%lf%lf%lf\", &xp1, &yp1, &xp2, &yp2);\n    Point a(xp1, yp1), b(xp2, yp2);\n    int q;\n    scanf(\"%d\", &q);\n    while(q--){\n        double x, y;\n        scanf(\"%lf%lf\", &x, &y);\n        Point p=proj(a, b-a, {x, y});\n        printf(\"%.20lf %.20lf\\n\", p.x, p.y);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS\n#include <stdio.h>\n#include <algorithm>\n#include <utility>\n#include <functional>\n#include <cstring>\n#include <queue>\n#include <stack>\n#include <math.h>\n#include <iterator>\n#include <vector>\n#include <string>\n#include <set>\n#include <math.h>\n#include <iostream>\n#include <random>\n#include <map>\n#include <fstream>\n#include <iomanip>\n#include <time.h>\n#include <stdlib.h>\n#include <list>\n#include <typeinfo>\n#include <list>\n#include <set>\n#include <assert.h>\n#include <complex>\nusing namespace std;\n#define LONG_INF 10000000000000\n#define GOLD 1.61803398874989484820458\n#define MAX_MOD 1000000007\n#define MOD 998244353LL\n#define seg_size 65536*4\n#define REP(i,n) for(long long i = 0;i < n;++i)\nclass Point{\npublic:\n\tlong double x;\n\tlong double y;\n\tconst Point operator*(const double &a) {\n\t\tPoint ans;\n\t\tans.x = x * a;\n\t\tans.y = y * a;\n\t\treturn ans;\n\t}\n\tconst Point operator=(const Point &a){\n\t\tx = a.x;\n\t\ty = a.y;\n\t\treturn *this;\n\t}\n\tconst Point operator+(const Point &a) const{\n\t\tPoint ans;\n\t\tans.x = a.x + x;\n\t\tans.y = a.y + y;\n\t\treturn ans;\n\t}\n\tconst Point operator+=(const Point &a){\n\t\tx += a.x;\n\t\ty += a.y;\n\t\treturn *this;\n\t}\n\tconst Point operator-(const Point &a) const{\n\t\tPoint ans;\n\t\tans.x = x - a.x;\n\t\tans.y = y - a.y;\n\t\treturn ans;\n\t}\n\tconst Point operator-=(const Point &a) {\n\t\tx -= a.x;\n\t\ty -= a.y;\n\t\treturn *this;\n\t}\n\tstatic long double inner(const Point &a, const Point &b) {\n\t\treturn a.x * b.x + a.y * b.y;\n\t}\n\tstatic Point norms(const Point &a) {\n\t\tlong double hoge = abs(a);\n\t\tPoint ans;\n\t\tans.x = a.x / hoge;\n\t\tans.y = a.y / hoge;\n\t\treturn ans;\n\t}\n\tstatic long double abs(const Point &a) {\n\t\treturn sqrt(a.x * a.x + a.y * a.y);\n\t}\n};\nint main(){\n\tPoint a, b;\n\tcin >> a.x >> a.y;\n\tcin >> b.x >> b.y;\n\tb -= a;\n\tint query;\n\tcin >> query;\n\tREP(i, query) {\n\t\tPoint c;\n\t\tcin >> c.x >> c.y;\n\t\tc -= a;\n\t\tdouble multiply = Point::inner(b, c) / Point::abs(b);\n\t\tPoint ans = a + Point::norms(b) * multiply;\n\t\tcout << fixed << setprecision(11);\n\t\tcout << ans.x << \" \" << ans.y << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <type_traits>\n#include <cmath>\nusing namespace std;\nusing ld = long double;\n\ntemplate<typename T>\nstruct Vec2 {\n    T x, y;\n\n    static_assert(std::is_floating_point<T>::value, \"Vector2 need floating point\");\n\n    Vec2() = default;\n\n    constexpr Vec2(T in_x, T in_y)\n        : x(in_x), y(in_y) {};\n\n    constexpr Vec2(const Vec2&) = default;\n    constexpr Vec2& operator =(const Vec2&) = default;\n    \n    T magnitude() const {\n        return std::sqrt(sqrMagnitude());\n    }\n\n    constexpr T sqrMagnitude() const {\n        return Dot(*this, *this);\n    }\n\n    constexpr Vec2 normalized() const {\n        return *this / magnitude();\n    }\n\n    constexpr bool isZero() const {\n        return x == 0.0 && y = 0.0;\n    }\n\n\n    constexpr Vec2 operator -() const {\n        return {-x, -y};\n    }\n\n    constexpr Vec2 operator +(const Vec2& other) const {\n        return {x + other.x, y + other.y};\n    }\n\n    constexpr Vec2 operator -(const Vec2& other) const {\n        return {x - other.x, y - other.y};\n    }\n\n    template <typename U>\n    constexpr Vec2 operator *(const U s) const {\n        return {x * s, y * s};\n    }\n\n    template <typename U>\n    constexpr Vec2 operator /(const U s) const {\n        return {x / s, y / s};\n    }\n\n\n    Vec2& operator +=(const Vec2& other) {\n        x += other.x;\n        y += other.y;\n        return *this;\n    }\n\n    Vec2& operator -=(const Vec2& other) {\n        x -= other.x;\n        y -= other.y;\n        return *this;\n    }\n\n\n    template <typename U>\n    Vec2& operator *=(const U s) {\n        x *= s;\n        y *= s;\n        return *this;\n    }\n\n    template <typename U>\n    Vec2& operator /=(const U s) {\n        x /= s;\n        y /= s;\n        return *this;\n    }\n\n};\n\n\n\ntemplate <typename T, typename U>\ninline constexpr auto Dot(const Vec2<T>& t, const Vec2<U>& u) {\n    return t.x * u.x + t.y * u.y;\n}\n\ntemplate <typename T, typename U>\ninline constexpr auto Cross(const Vec2<T>& t, const Vec2<U> u) {\n    return t.x * u.y - t.y * u.x;\n}\n\n\ntemplate <typename T>\nistream& operator >>(istream& is, Vec2<T>& v) {\n    is >> v.x >> v.y;\n    return is;\n}\n\ntemplate <typename T>\nostream& operator << (ostream& os, const Vec2<T>& v) {\n    os << v.x << \" \" << v.y;\n    return os;\n}\n\n    int main() {\n        Vec2<double> p1 {}, p2 {};\n\n        cin >> p1 >> p2;\n        int n;\n        cin >> n;\n\n        cout.precision(10);\n\n        for(int i = 0; i < n; ++i) {\n            Vec2<double> q;\n            cin >> q;\n\n            auto p1_2 {(p2 - p1).normalized()};\n\n            cout << fixed << p1_2 * Dot(q - p1, p1_2) << endl;\n        }\n\n        return 0;\n    }"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<algorithm>\n#include<iostream>\n#include<vector>\n#include<climits>\n#include<cfloat>\n#include<cstdio>\n#define curr(P, i) P[(i) % P.size()]\n#define next(P, i) P[(i+1) % P.size()]\n#define prev(P, i) P[(i+P.size()-1) % P.size()]\n\nusing namespace std;\n\ndouble EPS = 1e-10;\nconst double PI = acos(-1);\n\ndouble add(double a, double b){\n  if(abs(a+b) < EPS * (abs(a)+abs(b)))return 0;\n  return a+b;\n}\n\nstruct point{\n  double x, y;\n  point(){}\n  point(double x,double y) : x(x) , y(y){}\n\n  point operator + (point p){\n    return point(add(x,p.x), add(y,p.y));\n  }\n\n  point operator - (point p){\n    return point(add(x,-p.x), add(y,-p.y));\n  }\n\n  point operator * (double d){\n    return point(x*d,y*d);\n  }\n\n  point operator / (double d){\n    return point(x/d,y/d);\n  }\n};\n\ndouble dot(point a, point b) {\n  return (a.x * b.x + a.y * b.y);\n}\n\ndouble norm(point a){\n  return sqrt(dot(a,a));\n}\n\ntypedef point Vector;\ntypedef pair<point,point> Line;\n\npoint projection(Vector p,Vector b){\n  return b*dot(p,b)/dot(b,b);\n}\n\npoint projection(Line l,Vector p){\n  point a=l.second-l.first;\n  point b=p-l.first;\n  return l.first+projection(b,a);\n}\n\nint main(void){\n\n  Line l;\n  point c;\n  int q;\n  cin >> l.first.x >> l.first.y >> l.second.x >> l.second.y;\n  cin >> q;\n  while(q--){\n    cin >> c.x >> c.y;\n    point res=projection(l,c);\n    printf(\"%.10f %.10f\\n\",res.x,res.y);\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// #include <iostream>\n// #include <cstring>\n// #include <cstdlib>\n// #include <cmath>\n// #include <algorithm>\n// #include <functional>\n// #include <vector>\n// #include <queue>\n// #include <deque>\n// #include <stack>\n// #include <map>\n// #include <set>\n// #include <bitset>\n// #include <tuple>\n// #include <cassert>\n// #include <exception>\n// using namespace std;\n// typedef long long ll;\n// typedef unsigned long long ull;\n// typedef pair<ll,ll> P;\n// typedef vector<int> vi;\n// typedef vector<ll> vll;\n// typedef vector<string> vs;\n// typedef vector<P> vp;\n// #define rep(i,a,n) for(ll i = (a);i < (n);i++)\n// #define per(i,a,n) for(ll i = (a);i > (n);i--)\n// #define lep(i,a,n) for(ll i = (a);i <= (n);i++)\n// #define pel(i,a,n) for(ll i = (a);i >= (n);i--)\n// #define clr(a,b) memset((a),(b),sizeof(a))\n// #define pb push_back\n// #define mp make_pair\n// #define all(c) (c).begin(),(c).end()\n// #define sz size()\n// #define print(X) cout << (X) << endl\n// const ll INF = 1e+9+7;\n// ll n,m,l;\n// string s,t;\n// ll d[200010],dp[550][550];\n// double w[1000],v[1000];\n// double box[200010];\n\n// int main(){\n// \tcin >> n;\n// \trep(i,0,n)cin >> d[i];\n// \tset<ll> all;\n// \tmap<ll,int> test;\n// \trep(i,0,n)all.insert(d[i]);\n// \tm = all.sz;\n// \tll p,q,sum;\n// \tp = q = sum = 0;\n// \tll res = n;\n// \twhile(1){\n// \t\twhile(p < n && sum < m)if(test[d[p++]]++ == 0)sum++;\n// \t\tif(sum < m)break;\n// \t\tres = min(res,p-q);\n// \t\tif(--test[d[q++]] == 0)sum--;\n// \t}\n// \tprint(res);\n// \treturn 0;\n// }\n\n#include <iostream>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <algorithm>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n  double x,y;\n\n  Point(double x = 0,double y = 0): x(x),y(y){}\n  Point operator + (Point p){ return Point(x + p.x , y + p.y); }\n  Point operator - (Point p){ return Point(x - p.x , y - p.y); }\n  Point operator * (double a){ return Point(a * x , a * y); }\n  Point operator / (double a){ return Point(x / a , y / a); }\n\n  double abs(){ return sqrt(norm()); }\n  double norm(){ return x * x + y * y; }\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS);\n  }\n};\ntypedef Point Vector;\n\nstruct Segment{\n  Point p1,p2;\n};\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){\n  return  a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\n\ndouble dot(Vector a,Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1 - a1,b1 - b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2 - s1.p1,s2.p2 - s2.p1) , 0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1 - a2 , b1 - b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2 - s1.p1 , s2.p2 - s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1 , base / norm(base));\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p + (project(s,p) - p) * 2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS)return CLOCKWISE;\n  if(dot(a,b) < -EPS)return ONLINE_BACK;\n  if(a.norm() < b.norm())return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 && \n          ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0);\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2);\n}\n\ndouble getDistance(Vector a,Vector b){\n  return abs(a - b);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2 - l.p1 , p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n  if(dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n             min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base = s2.p2 - s2.p1;\n  double d1 = abs(cross(base,s1.p1 - s2.p1));\n  double d2 = abs(cross(base,s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  // assert(intersect(c,l));\n  Vector pr = project(l,c.c);\n  Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n  double base = sqrt(c.r * c.r - norm(pr - c.c));\n  return make_pair(pr + e * base , pr - e * base);\n}\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r) * a, sin(r) * a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  // assert(intersect(c1,c2));\n  double d = abs(c1.c - c2.c);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r,t + a),c1.c + polar(c1.r,t - a));\n}\n\nint contains(Polygon g,Point p){\n  int n = g.size();\n  bool x = false;\n  for(int i = 0;i < n;i++){\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n    if(a.y < b.y)swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS)x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size() < 3)return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n\n  l.push_back(s[s.size() - 1]);\n  l.push_back(s[s.size() - 2]);\n\n  for(int i = 2;i < s.size();i++){\n    for(int n = u.size();n >= 2 && ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n\n  for(int i = s.size() - 3; i >= 0;i--){\n    for(int n = l.size();n >= 2 && ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i = u.size() - 2;i >= 1;i--)l.push_back(u[i]);\n  return l;\n}\n\n#define BOTTOM 0\n#define LEFT 1\n#define RIGHT 2\n#define TOP 3\n\nclass EndPoint{\npublic:\n  Point p;\n  int seg,st;\n  EndPoint(){}\n  EndPoint(Point p,int seg,int st): p(p),seg(seg),st(st){}\n\n  bool operator < (const EndPoint &ep) const{\n    if(p.y == ep.p.y){\n      return st < ep.st;\n    }else{\n      return p.y < ep.p.y;\n    }\n  }\n};\n\nEndPoint EP[2 * 100000];\n\nint manhattanIntersection(vector<Segment> S){\n  int n = S.size();\n  for(int i = 0,k = 0;i < n;i++){\n    if(S[i].p1.y == S[i].p2.y){\n      if(S[i].p1.x > S[i].p2.x)swap(S[i].p1,S[i].p2);\n    }else if(S[i].p1.y > S[i].p2.y){\n      swap(S[i].p1,S[i].p2);\n    }\n\n    if(S[i].p1.y == S[i].p2.y){\n      EP[k++] = EndPoint(S[i].p1,i,LEFT);\n      EP[k++] = EndPoint(S[i].p2,i,RIGHT);\n    }else{\n      EP[k++] = EndPoint(S[i].p1,i,BOTTOM);\n      EP[k++] = EndPoint(S[i].p2,i,TOP);\n    }\n  }\n\n  sort(EP,EP + (2 * n));\n\n  set<int> BT;\n  BT.insert(1000000001);\n  int cnt = 0;\n  for(int i = 0;i < 2 * n;i++){\n    if(EP[i].st == TOP){\n      BT.erase(EP[i].p.x);\n    }else if(EP[i].st == BOTTOM){\n      BT.insert(EP[i].p.x);\n    }else if(EP[i].st == LEFT){\n      set<int>::iterator b = lower_bound(BT.begin(),BT.end(),S[EP[i].seg].p1.x);\n      set<int>::iterator e = upper_bound(BT.begin(),BT.end(),S[EP[i].seg].p2.x);\n      cnt += distance(b,e);\n    }\n  }\n  return cnt;\n}\n\nint main(){\n  int n;\n  Line a;\n  cin >> a.p1.x >> a.p1.y;\n  cin >> a.p2.x >> a.p2.y;\n  cin >> n;\n  for(int i = 0;i < n;i++){\n    Point p;\n    cin >> p.x >> p.y;\n    Point ans = project(a,p);\n    cout << ans.x << \" \" << ans.y << endl;\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <iomanip>\n#include <cmath>\nconst double eps = 1e-8;\nconst double pi = acos(-1);\n\nstruct Point {\n    double x, y;\n    Point() {}\n    Point(double _x, double _y) : x(_x), y(_y) { }\n\n    bool operator == (const Point &r) const {\n        return fabs(x - r.x) < eps && fabs(y - r.y) < eps;\n    }\n\n    Point operator + (const Point &r) const {\n        return Point(x + r.x, y + r.y);\n    }\n\n    Point operator * (const double &k) const {\n        return Point(x * k, y * k);\n    }\n\n    Point operator / (const double &k) const {\n        return Point(x / k, y / k);\n    }\n\n    Point operator - (const Point &r) const {\n        return Point(x - r.x, y - r.y);\n    }\n\n    // 叉积的模\n    double operator ^ (const Point &r) const {\n        return x * r.y - y * r.x;\n    }\n\n    // 点积\n    double operator * (const Point &r) const {\n        return x * r.x + y * r.y;\n    }\n\n    double length() {\n        return hypot(x, y);\n    }\n\n};\nPoint operator * (const double &k, const Point &v) {\n    return Point(v.x * k, v.y * k);\n}\ndouble distance(const Point &l, const Point &r) {\n    return hypot(r.x - l.x, r.y - l.y);\n}\ntypedef Point Vector;\n\n\n\n// 直线或线段\nstruct Line {\n    Point s, e;\n    double len;\n    Line() :len(INFINITY) {}\n    Line(Point _s, Point _e) : s(_s), e(_e), len(distance(_s, _e)) {}\n};\n\n// 点向直线的投影点\nPoint projection(const Point &p, const Line &l) {\n    Vector vec = (l.e - l.s) / l.len;\n    return l.s + (p - l.s) * vec * vec;\n}\nusing namespace std;\n\nint main() {\n    // freopen(\"in\", \"r\", stdin);\n    int xp1, yp1, xp2, yp2, q;\n    cin >> xp1 >> yp1 >> xp2 >> yp2 >> q;\n    Line l(Point(xp1, yp1), Point(xp2, yp2));\n    while (q--) {\n        int x, y; cin >> x >> y;\n        Point p(x, y);\n        Point ans = projection(p, l);\n        cout << fixed << setprecision(8) << ans.x << ' ' << ans.y << '\\n';\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <vector>\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#include<functional>\n//--\n#include<list>\n#include<deque>\n#include<bitset>\n#include<set>\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<sstream>\n#include<complex>\n#define X first\n#define Y second\n#define pb push_back\n#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))\n#define rrep(X,Y) for (int (X) = Y-1;(X) >=0;--(X))\n#define all(X) (X).begin(),(X).end()\n#define rall(X) (X).rbegin(),(X).rend()\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef complex<double> pt;\n\npt proj(pt a,pt to){\n  return (conj(a)*to).real()/norm(to)*to;\n}\n\nint main(){\n  int i,j,k,n;\n  pt o,p,q;\n  cin>>o.real()>>o.imag()>>p.real()>>p.imag();\n  cin>>n;\n  rep(i,n){\n    cin>>q.real()>>q.imag();\n    q=proj(q-o,p-o)+o;\n    printf(\"%.9f %.9f\\n\",q.real(),q.imag());\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<cmath>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nclass Point {\n    public:\n    double x, y;\n    \n    Point(double x = 0, double y = 0): x(x), y(y) {}\n    \n    Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n    Point operator * (double a) {return Point(a * x, a * y); }\n    Point operator / (double a) {return Point(x / a, y / a); }\n    \n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n    \n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; \n    }\n};\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\n    public:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) {\n    return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a) {\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nint main() {\n    int n;\n    double x1, y1, x2, y2, x, y;\n    Segment s;\n    cin >> x1 >> y1 >> x2 >> y2;\n    s.p1 = Point(x1, y1); s.p2 = Point(x2, y2);\n    cin >> n;\n    for ( int i = 0; i < n; i++ ) {\n        cin >> x >> y;\n        Point p = project(s, Point(x, y));\n        cout << fixed << setprecision(10) << p.x\n        << \" \" << fixed << setprecision(10) << p.y << endl;\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iomanip>\n#include<limits>\n#include<thread>\n#include<utility>\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<numeric>\n#include<cassert>\n#include<random>\n#include<chrono>\n#include<unordered_set>\n#include<unordered_map>\n#include<fstream>\n#include<list>\n#include<functional>\n#include<bitset>\n#include<complex>\n#include<tuple>\nusing namespace std;\n\ntypedef complex<long double> P;\n\ntemplate<typename D=long double,typename P=complex<long double>>\nstruct Geometry{\n    const D EPS=1e-9;\n    \n    P project(P vec,P x){return vec*(x/vec).real();}\n    \n    P project(P p1,P p2,P x){return p1+project(p2-p1,x-p1);}\n};\n\n\n\nint main(){\n    Geometry<long double,complex<long double>> G;\n    P a[2];\n    for(int i=0;i<2;i++){\n        long double x,y;\n        cin>>x>>y;\n        a[i]={x,y};\n    }\n    int q;\n    cin>>q;\n    for(int i=0;i<q;i++){\n        long double x,y;\n        cin>>x>>y;\n        P K={x,y};\n        P ans=G.project(a[0],a[1],K);\n        cout<<fixed<<setprecision(12)<<ans.real()<<\" \"<<ans.imag()<<endl;\n    }\n    \n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\nconst double EPS = 1e-8;\n\ninline bool equals(double x, double y) {\n    return fabs(x - y) <= EPS;\n}\n\nclass Point {//Point类，点\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator+(Point p) { return Point(x + p.x, y + p.y); }\n\n    Point operator-(Point p) { return Point(x - p.x, y - p.y); }\n\n    Point operator*(double a) { return Point(a * x, a * y); }\n\n    Point operator/(double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n\n    double norm() { return x * x + y * y; }\n\n    bool operator<(const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator==(const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;//Vector类，向量\n\nstruct Segment {//Segment 线段\n    Point p1, p2;\n};\n\ndouble dot(Vector a, Vector b) {//内积\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {//外积\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {//判断正交\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {//判断正交\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {//判断正交\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {//判断平行\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {//判断平行\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {//判断平行\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {//投影 对于给定的三个点p1、p2、p，从点p向通过\n//p1、p2的直线引一条垂线，求垂足x的坐标。（点p在直线p1p2上的投影）\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nint main() {\n    Point p1, p2, p;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n\n    Segment s;\n    s.p1 = p1;\n    s.p2 = p2;\n\n    int q;\n    cin >> q;\n\n    while (q--) {\n        cin >> p.x >> p.y;\n        p = project(s, p);\n        printf(\"%.10f %.10f\\n\", p.x, p.y);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <bits/stdc++>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define mp make_pair\n#define pb push_back\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n\treturn a < -EPS ? -1 : a > EPS;\n}\n\ninline int cmp(db a, db b){\n\treturn sign(a-b);\n}\n\nstruct P {\n\tdb x, y;\n\tP() {}\n\tP(db _x, db _y) : x(_x), y(_y) {}\n\tP operator+(P p) { return P(x + p.x, y + p.y); }\n\tP operator-(P p) { return P(x - p.x, y - p.y); }\n\tP operator*(db d) { return P(x * d, y * d); }\n\tP operator/(db d) { return P(x / d, y / d); }\n\tbool operator<(P p) const {\n\t\tint c = cmp(x, p.x);\n\t\tif (c) return c == -1;\n\t\treturn cmp(y, p.y) == -1;\n\t}\n\tdb dot(P p) { return x * p.x + y * p.y; }\n\tdb det(P p) { return x * p.y - y * p.x; }\n\tdb distTo(P p) { return (*this-p).abs(); }\n\tdb alpha() { return atan2(y, x); }\n\tvoid read() { cin>>x>>y; }\n\tdb abs() { return sqrt(abs2());}\n\tdb abs2() { return x * x + y * y; }\n\tP rot90() { return P(-y,x);}\n\tP unit() { return *this/abs(); }\n    int quad() const { return sign(y) == 1 || (sign(y) == 0 && sign(x) >= 0); }\n};\n\nstruct L{ //ps[0] -> ps[1]\n\tP ps[2];\n\tP& operator[](int i) { return ps[i]; }\n\tP dir() { return ps[1] - ps[0]; }\n \tbool include(P p) { return sign((ps[1] - ps[0]).det(p - ps[0])) > 0; }\n \tL push(){ // push eps outward\n \t\tconst double eps = 1e-6;\n \t\tP delta = (ps[1] - ps[0]).rot90().unit() * eps;\n \t\treturn {ps[0] - delta, ps[1] - delta};\n \t}\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isLL(P p1, P p2, P q1, P q2) {\n\tdb a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n\treturn (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nP isLL(L l1,L l2){ return isLL(l1[0],l1[1],l2[0],l2[1]); }\n\nbool intersect(db l1,db r1,db l2,db r2){\n\tif(l1>r1) swap(l1,r1); if(l2>r2) swap(l2,r2);\n\treturn !( cmp(r1,l2) == -1 || cmp(r2,l1) == -1 );\n}\n\nbool isSS(P p1, P p2, P q1, P q2){\n    return intersect(p1.x,p2.x,q1.x,q2.x) && intersect(p1.y,p2.y,q1.y,q2.y) &&\n    crossOp(p1,p2,q1) * crossOp(p1,p2,q2) <= 0 && crossOp(q1,q2,p1)\n            * crossOp(q1,q2,p2) <= 0;\n}\n\nbool isMiddle(db a, db m, db b) {\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n\nbool isMiddle(P a, P m, P b) {\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nbool onSeg(P p1, P p2, P q){\n\treturn crossOp(p1,p2,q) == 0 && isMiddle(p1, q, p2);\n}\n\nP proj(P p1, P p2, P q) {\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\n\nP reflect(P p1, P p2, P q){\n\treturn proj(p1,p2,q) * 2 - q;\n}\n\ndb nearest(P p1,P p2,P q){\n\tP h = proj(p1,p2,q);\n\tif(isMiddle(p1,h,p2))\n\t\treturn q.distTo(h);\n\treturn min(p1.distTo(q),p2.distTo(q));\n}\n\ndb disSS(P p1, P p2, P q1, P q2){\n\tif(isSS(p1,p2,q1,q2)) return 0;\n\treturn min(min(nearest(p1,p2,q1),nearest(p1,p2,q2)), min(nearest(q1,q2,p1),nearest(q1,q2,p2)) );\n}\n\ndb rad(P p1,P p2){\n\treturn atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n\tdb A = p1.distTo(p2);\n\tdb B = p2.distTo(p3);\n\tdb C = p3.distTo(p1);\n\treturn sqrtl(A*B*C/(A+B+C));\n}\n\n//polygon\n\ndb area(vector<P> ps){\n\tdb ret = 0; rep(i,0,ps.size()) ret += ps[i].det(ps[(i+1)%ps.size()]);\n\treturn abs(ret/2);\n}\n\nint contain(vector<P> ps, P p){ //2:inside,1:on_seg,0:outside\n\tint n = ps.size(), ret = 0;\n\trep(i,0,n){\n\t\tP u=ps[i],v=ps[(i+1)%n];\n\t\tif(onSeg(u,v,p)) return 1;\n\t\tif(cmp(u.y,v.y)<=0) swap(u,v);\n\t\tif(cmp(p.y,u.y) >0 || cmp(p.y,v.y) <= 0) continue;\n\t\tret ^= crossOp(p,u,v) > 0;\n\t}\n\treturn ret*2;\n}\n\nvector<P> convexHull(vector<P> ps) {\n    int n = ps.size(); if(n <= 1) return ps;\n    sort(ps.begin(), ps.end());\n    vector<P> qs(n * 2); int k = 0;\n    for (int i = 0; i < n; qs[k++] = ps[i++])\n        while (k > 1 && crossOp(qs[k - 2], qs[k - 1], ps[i]) <= 0) --k;\n    for (int i = n - 2, t = k; i >= 0; qs[k++] = ps[i--])\n       \twhile (k > t && crossOp(qs[k - 2], qs[k - 1], ps[i]) <= 0) --k;\n    qs.resize(k - 1);\n    return qs;\n}\n\nvector<P> convexHullNonStrict(vector<P> ps) {\n\t//caution: need to unique the Ps first\n    int n = ps.size(); if(n <= 1) return ps;\n    sort(ps.begin(), ps.end());\n    vector<P> qs(n * 2); int k = 0;\n    for (int i = 0; i < n; qs[k++] = ps[i++])\n        while (k > 1 && crossOp(qs[k - 2], qs[k - 1], ps[i]) < 0) --k;\n    for (int i = n - 2, t = k; i >= 0; qs[k++] = ps[i--])\n       \twhile (k > t && crossOp(qs[k - 2], qs[k - 1], ps[i]) < 0) --k;\n    qs.resize(k - 1);\n    return qs;\n}\n\ndb convexDiameter(vector<P> ps){\n\tint n = ps.size(); if(n <= 1) return 0;\n\tint is = 0, js = 0; rep(k,1,n) is = ps[k]<ps[is]?k:is, js = ps[js] < ps[k]?k:js;\n\tint i = is, j = js;\n\tdb ret = ps[i].distTo(ps[j]);\n\tdo{\n\t\tif((ps[(i+1)%n]-ps[i]).det(ps[(j+1)%n]-ps[j]) >= 0)\n\t\t\t(++j)%=n;\n\t\telse\n\t\t\t(++i)%=n;\n\t\tret = max(ret,ps[i].distTo(ps[j]));\n\t}while(i!=is || j!=js);\n\treturn ret;\n}\n\nvector<P> convexCut(const vector<P>&ps, P q1, P q2) {\n\tvector<P> qs;\n\tint n = ps.size();\n\trep(i,0,n){\n\t\tP p1 = ps[i], p2 = ps[(i+1)%n];\n\t\tint d1 = crossOp(q1,q2,p1), d2 = crossOp(q1,q2,p2);\n\t\tif(d1 >= 0) qs.pb(p1);\n\t\tif(d1 * d2 < 0) qs.pb(isLL(p1,p2,q1,q2));\n\t}\n\treturn qs;\n}\n\n//min_dist\n\ndb min_dist(vector<P>&ps,int l,int r){\n\tif(r-l<=5){\n\t\tdb ret = 1e100;\n\t\trep(i,l,r) rep(j,l,i) ret = min(ret,ps[i].distTo(ps[j]));\n\t\treturn ret;\n\t}\n\tint m = (l+r)>>1;\n\tdb ret = min(min_dist(ps,l,m),min_dist(ps,m,r));\n\tvector<P> qs; rep(i,l,r) if(abs(ps[i].x-ps[m].x)<= ret) qs.pb(ps[i]);\n\tsort(qs.begin(), qs.end(),[](P a,P b) -> bool {return a.y<b.y; });\n\trep(i,1,qs.size()) for(int j=i-1;j>=0&&qs[j].y>=qs[i].y-ret;--j) ret = min(ret,qs[i].distTo(qs[j]));\n\treturn ret;\n}\n\nint type(P o1,db r1,P o2,db r2){\n\tdb d = o1.distTo(o2);\n\tif(cmp(d,r1+r2) == 1) return 4;\n\tif(cmp(d,r1+r2) == 0) return 3;\n\tif(cmp(d,abs(r1-r2)) == 1) return 2;\n\tif(cmp(d,abs(r1-r2)) == 0) return 1;\n\treturn 0;\n}\n\nvector<P> isCL(P o,db r,P p1,P p2){\n\tdb x = (p1-o).dot(p2-p1), y = (p2-p1).abs2(), d = x * x - y * ((p1-o).abs2() - r*r);\n\tif(sign(d) < 0) return {};\n\td = max(d,0.0); P m = p1 - (p2-p1)*(x/y), dr = (p2-p1)*(sqrt(d)/y);\n\treturn {m-dr,m+dr}; //along dir: p1->p2\n}\n\nvector<P> isCC(P o1, db r1, P o2, db r2) { //need to check whether two circles are the same\n\tdb d = o1.distTo(o2);\n\tif (cmp(d, r1 + r2) == 1) return {};\n\td = min(d, r1 + r2);\n\tdb y = (r1 * r1 + d * d - r2 * r2) / (2 * d), x = sqrt(r1 * r1 - y * y);\n\tP dr = (o2 - o1).unit();\n\tP q1 = o1 + dr * y, q2 = dr.rot90() * x;\n\treturn {q1-q2,q1+q2};//along circle 1\n}\n\nvector<P> tanCP(P o, db r, P p) {\n\tdb x = (p - o).abs2(), d = x - r * r;\n\tif (sign(d) <= 0) return {}; // on circle => no tangent\n\tP q1 = o + (p - o) * (r * r / x);\n\tP q2 = (p - o).rot90() * (r * sqrt(d) / x);\n\treturn {q1-q2,q1+q2}; //counter clock-wise\n}\n\n\nvector<L> extanCC(P o1, db r1, P o2, db r2) {\n\tvector<L> ret;\n\tif (cmp(r1, r2) == 0) {\n\t\tP dr = (o2 - o1).unit().rot90() * r1;\n\t\tret.pb({o1 + dr, o2 + dr}), ret.pb({o1 - dr, o2 - dr});\n\t} else {\n\t\tP p = (o2 * r1 - o1 * r2) / (r1 - r2);\n\t\tvector<P> ps = tanCP(o1, r1, p), qs = tanCP(o2, r2, p);\n\t\trep(i,0,min(ps.size(),qs.size())) ret.pb({ps[i], qs[i]}); //c1 counter-clock wise\n\t}\n\treturn ret;\n}\n\nvector<L> intanCC(P o1, db r1, P o2, db r2) {\n\tvector<L> ret;\n \tP p = (o1 * r2 + o2 * r1) / (r1 + r2);\n \tvector<P> ps = tanCP(o1,r1,p), qs = tanCP(o2,r2,p);\n\trep(i,0,min(ps.size(),qs.size())) ret.pb({ps[i], qs[i]}); //c1 counter-clock wise\n\treturn ret;\n}\n\ndb areaCT(db r, P p1, P p2){\n\tvector<P> is = isCL(P(0,0),r,p1,p2);\n\tif(is.empty()) return r*r*rad(p1,p2)/2;\n\tbool b1 = cmp(p1.abs2(),r*r) == 1, b2 = cmp(p2.abs2(), r*r) == 1;\n\tif(b1 && b2){\n\t\tif(sign((p1-is[0]).dot(p2-is[0])) <= 0 &&\n\t\t\tsign((p1-is[0]).dot(p2-is[0])) <= 0)\n\t\treturn r*r*(rad(p1,is[0]) + rad(is[1],p2))/2 + is[0].det(is[1])/2;\n\t\telse return r*r*rad(p1,p2)/2;\n\t}\n\tif(b1) return (r*r*rad(p1,is[0]) + is[0].det(p2))/2;\n\tif(b2) return (p1.det(is[1]) + r*r*rad(is[1],p2))/2;\n\treturn p1.det(p2)/2;\n}\n\nbool parallel(L l0, L l1) { return sign( l0.dir().det( l1.dir() ) ) == 0; }\n\nbool sameDir(L l0, L l1) { return parallel(l0, l1) && sign(l0.dir().dot(l1.dir()) ) == 1; }\n\nbool cmp (P a,  P b) {\n\tif (a.quad() != b.quad()) {\n\t\treturn a.quad() < b.quad();\n\t} else {\n\t\treturn sign( a.det(b) ) > 0;\n\t}\n}\n\nbool operator < (L l0, L l1) {\n\tif (sameDir(l0, l1)) {\n\t\treturn l1.include(l0[0]);\n\t} else {\n\t\treturn cmp( l0.dir(), l1.dir() );\n\t}\n}\n\nbool check(L u, L v, L w) {\n\treturn w.include(isLL(u,v));\n}\n\nvector<P> halfPlaneIS(vector<L> &l) {\n\tsort(l.begin(), l.end());\n\tdeque<L> q;\n\tfor (int i = 0; i < (int)l.size(); ++i) {\n \t\tif (i && sameDir(l[i], l[i - 1])) continue;\n \t\twhile (q.size() > 1 && !check(q[q.size() - 2], q[q.size() - 1], l[i])) q.pop_back();\n \t\twhile (q.size() > 1 && !check(q[1], q[0], l[i])) q.pop_front();\n \t\tq.push_back(l[i]);\n \t}\n\twhile (q.size() > 2 && !check(q[q.size() - 2], q[q.size() - 1], q[0])) q.pop_back();\n\twhile (q.size() > 2 && !check(q[1], q[0], q[q.size() - 1])) q.pop_front();\n\tvector<P> ret;\n\tfor (int i = 0; i < (int)q.size(); ++i) ret.push_back(isLL(q[i], q[(i + 1) % q.size()]));\n\treturn ret;\n}\n\nint main(){\n\tP p1(0,0),p2(0,0);\n\tp1.read(),p2.read();\n\tint q;\n\tcin >> q;\n\twhile(q--){\n\t\tP p3(0,0);\n\t\tp3.read();\n\t\tp3 = proj(p1,p2,p3);\n\t\tprintf(\"%.10lf %.10lf\\n\",p3.x,p3.y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing Real = double;\nconstexpr Real EPS = 1e-10;\nconstexpr Real INF = 1e18;\nconst Real PI = acos(-1);\n\nusing P = complex<Real>;\nint sgn(const Real a) {\n    return (a < -EPS ? -1 : (a > EPS ? +1 : 0));\n}\n\ninline bool EQ(Real a, Real b) {\n    return (abs(a - b) < EPS);\n}\n\ninline Real Get_Value(Real a) {\n    return (EQ(a, 0) ? 0 : a);\n}\n\nistream &operator>>(istream &is, P &p) {\n    Real a, b;\n    is >> a >> b;\n    p = P(a, b);\n    return is;\n}\nostream &operator<<(ostream &os, P &p) {\n    return os << fixed << setprecision(12) << Get_Value(p.real()) << \" \" << Get_Value(p.imag());\n}\n\nP operator*(const P &p, const Real &d) {\n    return P(real(p) * d, imag(p) * d);\n}\n\nbool operator==(const P &p, const P &q) {\n    return (EQ(p.real(), q.real()) && EQ(p.imag(), q.imag()));\n}\n\nReal dot(const P &a, const P &b) {\n    // ベクトル a,b の内積\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\nReal cross(const P &a, const P &b) {\n    // 外積\n    return a.real() * b.imag() - a.imag() * b.real();\n}\n\nstruct Line {\n    // 直線\n    P a, b;\n\n    Line() = default;\n\n    Line(P a, P b) : a(a), b(b) {}\n\n    Line(Real A, Real B, Real C) // Ax + By = C\n    {\n        if(EQ(A, 0))\n            a = P(0, C / B), b = P(1, C / B);\n        else if(EQ(B, 0))\n            b = P(C / A, 0), b = P(C / A, 1);\n        else\n            a = P(0, C / B), b = P(C / A, 0);\n    }\n\n    friend ostream &operator<<(ostream &os, Line &p) {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream &operator>>(istream &is, Line &a) {\n        return is >> a.a >> a.b;\n    }\n};\n\nstruct Segment : Line {\n    // 線分\n    Segment() = default;\n    Segment(P a,P b):Line(a,b){}\n};\n\nstruct Circle {\n    // 円 p が中心 r が半径\n    P p;\n    Real r;\n    Circle() = default;\n    Circle(P p,Real r):p(p),r(r){};\n};\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\n// 点の回転方向\nint ccw(const P &a, P b, P c) {\n    b = b - a, c = c - a;\n    if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\" CがベクトルABの半時計方向にある\n    if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\" CがベクトルABの時計方向にある\n    if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\" Cが直線AB上かつAの方向にある\n    if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\" Cが直線AB上かつBの方向にある\n    return 0;                         // \"ON_SEGMENT\" Cが線分AB上に乗っている\n}\n\nbool is_orthogonal(const Line &a, const Line &b) {\n    // 2直線の直交判定\n    // 2つのベクトルの内積が0なら直交\n    return EQ(dot(a.a - a.b, b.a - b.b), 0.0);\n}\n\nbool is_parallel(const Line &a, const Line &b) {\n    // 2直線の平行判定\n    // 2つのベクトルの外積が0なら平行\n    return EQ(cross(a.b - a.a, b.a - b.b), 0.0);\n}\n\nbool is_point_on_line(const P &a, const P &b, const P &c) {\n    // 点cが直線a,b上にあるかどうか\n    // ab ベクトルと ac ベクトルが平行なら点cは直線a,b上にある\n    // 3点は同一直線状にあるともいえる\n    return EQ(cross(b - a, c - a), 0.0);\n}\n\nbool intersect(const Segment &s, const Segment &t) {\n    // 線分同士の交差判定\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nP projection(const Line &s, const P &p){\n    Real t = dot(p-s.a,s.a-s.b)/norm(s.a-s.b);\n    return s.a+(s.a-s.b)*t;\n}\n\nint main(){\n    Line a;\n    cin >> a;\n    int q;\n    cin >> q;\n    while(q--){\n        P x;\n        cin >> x;\n        P ret = projection(a,x);\n        cout << ret << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst ll INF = 1e16;\nconst ll mod = 1000000007;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n\ntemplate<class T> inline bool chmax(T& a, T b) {\n  if (a < b) {\n    a = b;\n    return 1;\n  }\n  return 0;\n}\ntemplate<class T> inline bool chmin(T& a, T b) {\n  if (a > b) {\n    a = b;\n    return 1;\n  }\n  return 0;\n}\nint ctoi(char c) {\n  if (c >= '0' && c <= '9') {\n    return c - '0';\n  }\n  return 0;\n}\nll factorial(ll n) {\n  if (n == 1) {\n    return 1;\n  }\n  ll ans = factorial(n-1);\n  return ans*n;\n}\nll gcd(ll a, ll b) {\n  if (b == 0) return a;\n  return gcd(b, a%b);\n}\nll lcm(ll a, ll b) {\n  return (a/gcd(a, b))*b;\n}\nbool is_prime(ll n) {\n  for (ll i = 2; i*i <= n; i++) {\n    if (n%i == 0) return false;\n  }\n  return n != 1;\n}\nll mod_pow(ll x, ll n, ll mod) {\n  if (n == 0) return 1;\n  ll res = mod_pow(x*x%mod, n/2, mod);\n  if (n & 1) res = res * x % mod;\n  return res;\n}\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n  public:\n  double x, y;\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n};\ntypedef Point Vector;\ndouble norm(Vector a) {\n  return a.x*a.x + a.y*a.y;\n}\ndouble abs(Vector a) {\n  return pow(norm(a), 0.5);\n}\nstruct Segment {\n  Point p1, p2;\n};\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n}\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p-s.p1, base) / norm(base);\n  return s.p1 + base * r;\n}\n\nint main() {\n  double x, y;\n  Segment s;\n  cin >> x >> y;\n  s.p1.x = x; s.p1.y = y;\n  cin >> x >> y;\n  s.p2.x = x; s.p2.y = y;\n  ll n;\n  cin >> n;\n  rep(i, n) {\n    cin >> x >> y;\n    Point p;\n    p.x = x; p.y = y;\n    cout << fixed << setprecision(10);\n    cout << project(s, p).x << ' ' << project(s, p).y << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <cfloat>\n#include <climits>\n#include <ctime>\n#include <cassert>\n#include <numeric>\n#include <fstream>\n#include <functional>\n#include <bitset>\n\nusing namespace std;\nusing Real = double;\nusing Point = complex<Real>;\nconst Real EPS = 1e-8, PI = acos(-1);\n\n// 実数同士の比較\ninline bool eq(Real a, Real b) { return fabs(b - a) < EPS; }\n\nPoint operator*(const Point &p, const Real &d) {\n  return Point(real(p) * d, imag(p) * d);\n}\n\n// 入力\nistream &operator>>(istream &is, Point &p) {\n  Real a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\n// 出力\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\n// 原点を中心として, 点 p を θ 回転すた点を返す\nPoint rotate(Real theta, const Point &p) {\n  return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n// ラジアンを度数に変換\nReal radian_to_degree(Real r) {\n  return (r * 180.0 / PI);\n}\n\n// 度数をラジアンに変換\nReal degree_to_radian(Real d) {\n  return (d * PI / 180.0);\n}\n\n// ∠BAC をラジアンで取得\nReal get_angle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - a);\n  Real alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if(alpha > beta) swap(alpha, beta);\n  Real theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\n// x軸, y軸の順にソート\nnamespace std {\n  bool operator<(const Point &a, const Point &b) {\n    return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n  }\n}\n\n// 直線\n// 2 点を通る直線\n// Ax + By = C  \nstruct Line {\n  Point a, b;\n\n  Line() = default;\n\n  Line(Point a, Point b) : a(a), b(b) {}\n\n  Line(Real A, Real B, Real C) // Ax + By = C\n  {\n    if(eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n    else if(eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n    else a = Point(0, C / B), b = Point(C / A, 0);\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\n// 線分\n// 2 点を結ぶ\nstruct Segment : Line {\n  Segment() = default;\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\n\n// 円\n// 中心と半径\nstruct Circle {\n  Point p;\n  Real r;\n\n  Circle() = default;\n\n  Circle(Point p, Real r) : p(p), r(r) {}\n};\n\n// いらんかも\nusing Points = vector< Point >;\nusing Polygon = vector< Point >;\nusing Segments = vector< Segment >;\nusing Lines = vector< Line >;\nusing Circles = vector< Circle >;\n\n// 外積\nReal cross(const Point &a, const Point &b) {\n  return real(a) * imag(b) - imag(a) * real(b);\n}\n\n// 内積\nReal dot(const Point &a, const Point &b) {\n  return real(a) * real(b) + imag(a) * imag(b);\n}\n\n\n//          +1\n//          \n//  +2   a   0   b  -2\n//\n//          -1\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=jp\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\"\n  if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\"\n  return 0;                         // \"ON_SEGMENT\"\n}\n\n\n// 2 直線が平行か\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\nbool parallel(const Line &a, const Line &b) {\n  return eq(cross(a.b - a.a, b.b - b.a), 0.0);\n}\n\n// 2 直線が垂直か\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\nbool orthogonal(const Line &a, const Line &b) {\n  return eq(dot(a.a - a.b, b.a - b.b), 0.0);\n}\n\n// 直線 l に 点 p から垂線を下ろして,交わる点を返す\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\nPoint projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B\nPoint reflection(const Line &l, const Point &p) {\n  return p + (projection(l, p) - p) * 2.0;\n}\n\nbool intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nReal distance(const Line &l, const Point &p);\n\nbool intersect(const Circle &c, const Line &l) {\n  return distance(l, c.p) <= c.r + EPS;\n}\n\nbool intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B\nbool intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nint intersect(const Circle &c, const Segment &l) {\n  if(norm(projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  auto d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if(d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if(d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = projection(l, c.p);\n  if(dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A&lang=jp\nint intersect(Circle c1, Circle c2) {\n  if(c1.r < c2.r) swap(c1, c2);\n  Real d = abs(c1.p - c2.p);\n  if(c1.r + c2.r < d) return 4;\n  if(eq(c1.r + c2.r, d)) return 3;\n  if(c1.r - c2.r < d) return 2;\n  if(eq(c1.r - c2.r, d)) return 1;\n  return 0;\n}\n\nReal distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\nReal distance(const Line &l, const Point &p) {\n  return abs(p - projection(l, p));\n}\n\nReal distance(const Line &l, const Line &m) {\n  return intersect(l, m) ? 0 : distance(l, m.a);\n}\n\nReal distance(const Segment &s, const Point &p) {\n  Point r = projection(s, p);\n  if(intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D\nReal distance(const Segment &a, const Segment &b) {\n  if(intersect(a, b)) return 0;\n  return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\n\nReal distance(const Line &l, const Segment &s) {\n  if(intersect(l, s)) return 0;\n  return min(distance(l, s.a), distance(l, s.b));\n}\n\nPoint crosspoint(const Line &l, const Line &m) {\n  Real A = cross(l.b - l.a, m.b - m.a);\n  Real B = cross(l.b - l.a, l.b - m.a);\n  if(eq(abs(A), 0.0) && eq(abs(B), 0.0)) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C\nPoint crosspoint(const Segment &l, const Segment &m) {\n  return crosspoint(Line(l), Line(m));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_D\npair< Point, Point > crosspoint(const Circle &c, const Line l) {\n  Point pr = projection(l, c.p);\n  Point e = (l.b - l.a) / abs(l.b - l.a);\n  if(eq(distance(l, c.p), c.r)) return {pr, pr};\n  double base = sqrt(c.r * c.r - norm(pr - c.p));\n  return {pr - e * base, pr + e * base};\n}\n\npair< Point, Point > crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if(intersect(c, l) == 2) return crosspoint(c, aa);\n  auto ret = crosspoint(c, aa);\n  if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n  else ret.first = ret.second;\n  return ret;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_E\npair< Point, Point > crosspoint(const Circle &c1, const Circle &c2) {\n  Real d = abs(c1.p - c2.p);\n  Real a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  Real t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return {p1, p2};\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_F\npair< Point, Point > tangent(const Circle &c1, const Point &p2) {\n  return crosspoint(c1, Circle(p2, sqrt(norm(c1.p - p2) - c1.r * c1.r)));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_G\nLines tangent(Circle c1, Circle c2) {\n  Lines ret;\n  if(c1.r < c2.r) swap(c1, c2);\n  Real g = norm(c1.p - c2.p);\n  if(eq(g, 0)) return ret;\n  Point u = (c2.p - c1.p) / sqrt(g);\n  Point v = rotate(PI * 0.5, u);\n  for(int s : {-1, 1}) {\n    Real h = (c1.r + s * c2.r) / sqrt(g);\n    if(eq(1 - h * h, 0)) {\n      ret.emplace_back(c1.p + u * c1.r, c1.p + (u + v) * c1.r);\n    } else if(1 - h * h > 0) {\n      Point uu = u * h, vv = v * sqrt(1 - h * h);\n      ret.emplace_back(c1.p + (uu + vv) * c1.r, c2.p - (uu + vv) * c2.r * s);\n      ret.emplace_back(c1.p + (uu - vv) * c1.r, c2.p - (uu - vv) * c2.r * s);\n    }\n  }\n  return ret;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B\nbool is_convex(const Polygon &p) {\n  int n = (int) p.size();\n  for(int i = 0; i < n; i++) {\n    if(ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A\nPolygon convex_hull(Polygon &p) {\n  int n = (int) p.size(), k = 0;\n  if(n <= 2) return p;\n  sort(p.begin(), p.end());\n  vector< Point > ch(2 * n);\n  for(int i = 0; i < n; ch[k++] = p[i++]) {\n    while(k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n    while(k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n  }\n  ch.resize(k - 1);\n  return ch;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C\nenum {\n  OUT, ON, IN\n};\nint contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for(int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if(a.imag() > b.imag()) swap(a, b);\n    if(a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if(cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033\nvoid merge_segments(vector< Segment > &segs) {\n\n  auto merge_if_able = [](Segment &s1, const Segment &s2) {\n    if(abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n    if(ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n    if(ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n    s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n    return true;\n  };\n\n  for(int i = 0; i < segs.size(); i++) {\n    if(segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for(int i = 0; i < segs.size(); i++) {\n    for(int j = i + 1; j < segs.size(); j++) {\n      if(merge_if_able(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033\nvector< vector< int > > segment_arrangement(vector< Segment > &segs, vector< Point > &ps) {\n  vector< vector< int > > g;\n  int N = (int) segs.size();\n  for(int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for(int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if(cross(p1, p2) == 0) continue;\n      if(intersect(segs[i], segs[j])) {\n        ps.emplace_back(crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  int M = (int) ps.size();\n  g.resize(M);\n  for(int i = 0; i < N; i++) {\n    vector< int > vec;\n    for(int j = 0; j < M; j++) {\n      if(intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for(int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_C\nPolygon convex_cut(const Polygon &U, Line l) {\n  Polygon ret;\n  for(int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if(ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if(ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A\nReal area2(const Polygon &p) {\n  Real A = 0;\n  for(int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_H\nReal area2(const Polygon &p, const Circle &c) {\n  if(p.size() < 3) return 0.0;\n  function< Real(Circle, Point, Point) > cross_area = [&](const Circle &c, const Point &a, const Point &b) {\n    Point va = c.p - a, vb = c.p - b;\n    Real f = cross(va, vb), ret = 0.0;\n    if(eq(f, 0.0)) return ret;\n    if(max(abs(va), abs(vb)) < c.r + EPS) return f;\n    if(distance(Segment(a, b), c.p) > c.r - EPS) return c.r * c.r * arg(vb * conj(va));\n    auto u = crosspoint(c, Segment(a, b));\n    vector< Point > tot{a, u.first, u.second, b};\n    for(int i = 0; i + 1 < tot.size(); i++) {\n      ret += cross_area(c, tot[i], tot[i + 1]);\n    }\n    return ret;\n  };\n  Real A = 0;\n  for(int i = 0; i < p.size(); i++) {\n    A += cross_area(c, p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_B\nReal convex_diameter(const Polygon &p) {\n  int N = (int) p.size();\n  int is = 0, js = 0;\n  for(int i = 1; i < N; i++) {\n    if(p[i].imag() > p[is].imag()) is = i;\n    if(p[i].imag() < p[js].imag()) js = i;\n  }\n  Real maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if(cross(p[(i + 1) % N] - p[i], p[(j + 1) % N] - p[j]) >= 0) {\n      j = (j + 1) % N;\n    } else {\n      i = (i + 1) % N;\n    }\n    if(norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while(i != is || j != js);\n  return sqrt(maxdis);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_5_A\nReal closest_pair(Points ps) {\n  if(ps.size() <= 1) throw (0);\n  sort(begin(ps), end(ps));\n\n  auto compare_y = [&](const Point &a, const Point &b) {\n    return imag(a) < imag(b);\n  };\n  vector< Point > beet(ps.size());\n  const Real INF = 1e18;\n\n  function< Real(int, int) > rec = [&](int left, int right) {\n    if(right - left <= 1) return INF;\n    int mid = (left + right) >> 1;\n    auto x = real(ps[mid]);\n    auto ret = min(rec(left, mid), rec(mid, right));\n    inplace_merge(begin(ps) + left, begin(ps) + mid, begin(ps) + right, compare_y);\n    int ptr = 0;\n    for(int i = left; i < right; i++) {\n      if(abs(real(ps[i]) - x) >= ret) continue;\n      for(int j = 0; j < ptr; j++) {\n        auto luz = ps[i] - beet[ptr - j - 1];\n        if(imag(luz) >= ret) break;\n        ret = min(ret, abs(luz));\n      }\n      beet[ptr++] = ps[i];\n    }\n    return ret;\n  };\n  return rec(0, (int) ps.size());\n}\n\nint main(){\n    \n    double a, b, c, d; cin >> a >> b >> c >> d;\n    Line l(Point(a, b), Point(c, d));\n    int q; cin >> q;\n    for(int i = 0; i < q; i++){\n        double x, y; cin >> x >> y;\n        Point ans = projection(l, Point(x, y));\n        printf(\"%.10f %.10f\\n\", ans.real(), ans.imag());\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(Point &p) { return Point(x + p.x, y + p.y); };\n\tPoint operator -(Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n};\ntypedef Point Vector;\n\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nint main() {\n\tPoint p[2];\n\tint q, x, y;\n\tcin >> p[0].x >> p[0].y >> p[1].x >> p[1].y;\n\tSegment seg;\n\tseg.p1 = p[0]; seg.p2 = p[1];\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\t//cout << x << \" \" << y << endl;\n\t\tPoint po = Point(x, y);\n\t\tPoint proj = project(seg, po);\n\t\tprintf(\"%.10lf %.10lf\\n\", proj.x, proj.y);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <math.h>\n#include <string.h>\n#include <stdio.h>\nusing namespace std;\nconst int MAXN = 5000;\nint n, m;\ndouble x1, y1, x2, y2;\nint s[MAXN];\nstruct Point\n{\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n};\nstruct Line\n{\n    Point p1, p2;\n    Line() {}\n    Line(Point p1, Point p2): p1(p1), p2(p2) {}\n\n} lie[MAXN];\n\ntypedef Point Vector;\nVector operator +(Vector A, Vector B)\n{\n    return Vector(A.x + B.x, A.y + B.y);\n}\nVector operator -(Vector A, Vector B)\n{\n    return Vector(A.x - B.x, A.y - B.y);\n}\nVector operator *(Vector A, double p)\n{\n    return Vector(A.x * p, A.y * p);\n}\nVector operator /(Vector A, double p)\n{\n    return Vector(A.x / p, A.y / p);\n}\nVector operator -(Vector A)\n{\n    return  Vector(-A.x, -A.y);\n}\n\ndouble torad(double deg)//角度换弧度\n{\n    return deg / 180 * acos(-1.0);\n}\n\nconst double EPS = 1e-10;\nint dcmp(double x)\n{\n    if(fabs(x) < EPS) return 0;\n    else return x < 0 ? -1 : 1;\n}\n\n//向量点积\ndouble Dot(Vector A, Vector B) \n{ \n    return A.x*B.x + A.y*B.y; \n}\n\n//向量叉积\ndouble Cross(Vector A, Vector B)\n{\n    return A.x * B.y - A.y * B.x;\n}\n\nconst int INF = 1000005;\nint par[INF], ran[INF];\n\n//点在直线上的投影\nPoint GetLineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A+v*(Dot(v, P-A)/Dot(v, v));\n}\n\n\nint main()\n{\n    double x1,y1,x2,y2;\n    cin>>x1>>y1>>x2>>y2;\n    Point p1=Point(x1,y1);\n    Point p2=Point(x2,y2);\n    int n;\n    cin>>n;\n    while(n--)\n    {\n        double x,y;\n        cin>>x>>y;\n        Point p=Point(x,y);\n        Point Pp=GetLineProjection(p,p1,p2);\n        printf(\"%.10f %.10f\\n\",Pp.x,Pp.y);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Vector {\npublic:\n  double x, y;\n  Vector() {}\n  Vector(double x, double y) : x(x), y(y) {}\n\n  Vector operator+(Vector v) { return Vector(x + v.x, y + v.y); }\n  Vector operator-(Vector v) { return Vector(x - v.x, y - v.y); }\n  Vector operator*(double s) { return Vector(s*x, s*y); }\n  double norm() { return x * x + y * y; }\n  double abs() { return sqrt(norm()); }\n};\n\n// inner product\ndouble dot(Vector v1, Vector v2) { return v1.x * v2.x + v1.y * v2.y; }\n\n// cross product\ndouble cross(Vector v1, Vector v2) { return v1.x * v2.y - v1.y * v2.x; }\n\nclass Line {\npublic:\n  Vector v1, v2;\n  Line() {}\n  Line(Vector v1, Vector v2) : v1(v1), v2(v2) {}\n};\n\nbool is_parrallel(Vector a, Vector b) { return equals(cross(a, b), 0); }\nbool is_parrallel(Line a, Line b) {\n  return is_parrallel(a.v1 - a.v2, b.v1 - b.v2);\n}\n\nbool is_orthogonal(Vector a, Vector b) { return equals(dot(a, b), 0); }\nbool is_orthogonal(Line a, Line b) {\n  return is_orthogonal(a.v1 - a.v2, b.v1 - b.v2);\n}\n\nVector project(Line l, Vector v) {\n  Vector a = v - l.v1;\n  Vector b = l.v2 - l.v1;\n  return l.v1 + b * (dot(a, b) / b.norm());\n}\n\nint main() {\n  int x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  auto line = Line(Vector(x0, y0), Vector(x1, y1));\n  int nq;\n  cin >> nq;\n  for (int i = 0; i < nq; i++) {\n    int x, y;\n    cin >> x >> y;\n    auto ans = project(line, Vector(x, y));\n    cout << ans.x << \" \" << ans.y << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef ___Class_Point\n#define ___Class_Point\n\n#include <cmath>\n\nclass Point\n{\nprivate:\n\n\tdouble x_;\n\tdouble y_;\n\npublic:\n\n\tPoint() : x_(0), y_(0) { }\n\n\tPoint(double x, double y) : x_(x), y_(y) { }\n\n\tPoint(double x1, double y1, double x2, double y2) : x_(x2 - x1), y_(y2 - y1) { }\n\n\tdouble x() { return x_; }\n\tdouble y() { return y_; }\n\n\tvoid operator= (Point& p) { x_ = p.x_; y_ = p.y_; }\n\t\n\tPoint operator+ (Point p) { return Point(x_ + p.x_, y_ + p.y_); }\n\tPoint operator- (Point p) { return Point(x_ - p.x_, y_ + p.y_); }\n\n\tPoint operator* (double s) { return Point(x_ * s, y_ * s); }\n\tPoint operator/ (double s) { return Point(x_ / s, y_ / s); }\n};\n\ndouble norm(Point& p1)\n{\n\treturn p1.x() * p1.x() + p1.y() * p1.y();\n}\n\ndouble abs(Point& p1)\n{\n\treturn sqrt(norm(p1));\n}\n\ndouble cross(Point& p1, Point& p2)\n{\n\treturn p1.x() * p2.y() - p1.y() * p2.x();\n}\n\ndouble dot(Point& p1, Point& p2)\n{\n\treturn p1.x() * p2.x() + p1.y() * p2.y();\n}\n\n#endif\n\n#ifndef ___Computational_Geometry\n#define ___Computational_Geometry\n\nbool palarell(Point& p1, Point& p2)\n{\n\treturn cross(p1, p2) == 0;\n}\n\nbool palarell(Point& p1_s, Point& p1_e, Point& p2_s, Point& p2_e)\n{\n\treturn palarell(p1_e - p1_s, p2_e - p2_s);\n}\n\nbool orthogonal(Point& p1, Point& p2)\n{\n\treturn dot(p1, p2) == 0;\n}\n\nbool orthogonal(Point& p1_s, Point& p1_e, Point& p2_s, Point& p2_e)\n{\n\treturn orthogonal(p1_e - p1_s, p2_e - p2_s);\n}\n\nPoint projection(Point& hypo, Point& base)\n{\n\treturn base * (dot(hypo, base) / norm(base));\n}\n\nPoint reflection(Point& hypo, Point& base)\n{\n\treturn base + (projection(hypo, base) - hypo) * 2.0;\n}\n\n#endif\n\n#include <cstdio>\n\n#pragma warning(disable: 4996)\n\nint main()\n{\n\tint x1, y1, x2, y2, x3, y3, q;\n\n\tscanf(\"%d\", &x1);\n\tscanf(\"%d\", &y1);\n\tscanf(\"%d\", &x2);\n\tscanf(\"%d\", &y2);\n\n\tPoint p(x1, y1, x2, y2);\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%d\", &x3);\n\t\tscanf(\"%d\", &y3);\n\n\t\tPoint a(x1, y1, x3, y3);\n\n\t\tPoint c = projection(a, p);\n\n\t\tprintf(\"%.15f %.15f\\n\", x1 + c.x(), y1 + c.y());\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint main(void)\n{\n    long     aiPnt1[2], aiPnt2[2];\n    long     nPnt = 0;\n#define ST_MAX (1000)\n    long     aiPnt[2*ST_MAX] = {0};\n    long     i;\n#define  EPS (0.0000001)\n\n    scanf(\"%ld %ld %ld %ld\", &(aiPnt1[0]), &(aiPnt1[1]),  &(aiPnt2[0]), &(aiPnt2[1]));\n    scanf(\"%ld\", &nPnt);\n    if (nPnt<0 || nPnt>ST_MAX) {\n        printf(\"invalid input (nPoint)\\n\");\n        return 1;\n    }\n    for(i=0; i<nPnt; i++) {\n        scanf(\"%ld %ld\", &(aiPnt[2*i]), &(aiPnt[2*i+1]));\n    }\n    //printf(\"input end\\n\");\n\n    double adVec[2];\n    adVec[0] = (double)(aiPnt2[0] - aiPnt1[0]);\n    adVec[1] = (double)(aiPnt2[1] - aiPnt1[1]);\n\n    double len = sqrt(adVec[0]*adVec[0] + adVec[1]*adVec[1]);\n    if (len < EPS) {\n        printf(\"too near points (p1, p2)\\n\");\n        return 2;\n    }\n    adVec[0] /= len;\n    adVec[1] /= len;\n\n    for(i=0; i<nPnt; i++) {\n        double adDiff[2] = {aiPnt[2*i]-aiPnt1[0], aiPnt[2*i+1]-aiPnt1[1]};\n        double dSum = adDiff[0] * adVec[0] + adDiff[1] * adVec[1];\n        double adPntNew[2] = {aiPnt1[0]+dSum*adVec[0], aiPnt1[1]+dSum*adVec[1]};\n        printf(\"%.10lf %.10lf\\n\", adPntNew[0], adPntNew[1]);\n    }\n\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(_x), y(_y){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator*(double k){ return Point(x * k, y * k); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\tdouble res = a.x*b.x + a.y*b.y;\n\treturn res;\n}\n\ndouble cross(Vector a, Vector b){\n\tdouble res = a.x*b.y - a.y*b.x;\n\treturn res;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tVector v = p - s.p1;\n\tdouble l = dot(v, base) / base.norm();\n\treturn s.p1 + base * l;\n}\n\nint main(){\n\tSegment s;\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tint n;\n\tcin >> n;\n\tcout.precision(20);\n\tfor (int i = 0; i < n; ++i){\n\t\tPoint pp;\n\t\tcin >> pp.x >> pp.y;\n\t\tPoint res = project(s, pp);\n\t\tcout << res.x << \" \" << res.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double lf;\ntypedef pair<int, int> pii;\n\nconst int MAXN = 5;\nconst int MOD = 1e9+7;\n\nconst lf eps = 1e-9;\ntypedef double T;\nstruct pt {\n  T x, y;\n  pt operator + (pt p) { return {x+p.x, y+p.y}; }\n  pt operator - (pt p) { return {x-p.x, y-p.y}; }\n  pt operator * (pt p) { return {x*p.x-y*p.y, x*p.y+y*p.x}; }\n  pt operator * (T d) { return {x*d, y*d}; }\n  pt operator / (T d) { return {x/d, y/d}; } /// only for floating point\n  bool operator == (pt b) { return x == b.x && y == b.y; }\n  bool operator != (pt b) { return !(*this == b); }\n  bool operator < (const pt &o) const { return y < o.y || (y == o.y && x < o.x); }\n  bool operator > (const pt &o) const { return y > o.y || (y == o.y && x > o.x); }\n};\nint cmp (lf a, lf b) { return (a + eps < b ? -1 :(b + eps < a ? 1 : 0)); }\n/** Already in complex **/\nT norm(pt a) { return a.x*a.x + a.y*a.y; }\nT abs(pt a) { return sqrt(norm(a)); }\nT arg(pt a) { return atan2(a.y, a.x); }\nostream& operator << (ostream& os, pt &p) {\n  return os << \"(\"<< p.x << \",\" << p.y << \")\";\n}\n/***/\nistream &operator >> (istream &in, pt &p) {\n    T x, y; in >> x >> y;\n    p = {x, y};\n    return in;\n}\nT dot(pt a, pt b) { return a.x*b.x + a.y*b.y; }\nT cross(pt a, pt b) { return a.x*b.y - a.y*b.x; }\nT orient(pt a, pt b, pt c) { return cross(b-a,c-a); }\n//pt rot(pt p, lf a) { return {p.x*cos(a) - p.y*sin(a), p.x*sin(a) + p.y*cos(a)}; }\n//pt rot(pt p, double a) { return p * polar(1.0, a); } /// for complex\n//pt rotate_to_b(pt a, pt b, lf ang) { return rot(a-b, ang)+b; }\npt rot90ccw(pt p) { return {-p.y, p.x}; }\npt rot90cw(pt p) { return {p.y, -p.x}; }\npt translate(pt p, pt v) { return p+v; }\npt scale(pt p, double f, pt c) { return c + (p-c)*f; }\nbool are_perp(pt v, pt w) { return dot(v,w) == 0; }\nint sign(T x) { return (T(0) < x) - (x < T(0)); }\npt unit(pt a) { return a/abs(a); }\n\nbool in_angle(pt a, pt b, pt c, pt x) {\n  assert(orient(a,b,c) != 0);\n  if (orient(a,b,c) < 0) swap(b,c);\n  return orient(a,b,x) >= 0 && orient(a,c,x) <= 0;\n}\n\n//lf angle(pt a, pt b) { return acos(max(-1.0, min(1.0, dot(a,b)/abs(a)/abs(b)))); }\n//lf angle(pt a, pt b) { return atan2(cross(a, b), dot(a, b)); }\n/// returns vector to transform points\npt get_linear_transformation(pt p, pt q, pt r, pt fp, pt fq) {\n  pt pq = q-p, num{cross(pq, fq-fp), dot(pq, fq-fp)};\n  return fp + pt{cross(r-p, num), dot(r-p, num)} / norm(pq);\n}\n\nbool half(pt p) { /// true if is in (0, 180]\n  assert(p.x != 0 || p.y != 0); /// the argument of (0,0) is undefined\n  return p.y > 0 || (p.y == 0 && p.x < 0);\n}\nbool half_from(pt p, pt v = {1, 0}) {\n  return cross(v,p) < 0 || (cross(v,p) == 0 && dot(v,p) < 0);\n}\nbool polar_cmp(const pt &a, const pt &b) {\n  return make_tuple(half(a), 0) < make_tuple(half(b), cross(a,b));\n}\n\nstruct line {\n  pt v; T c;\n  line(pt v, T c) : v(v), c(c) {}\n  line(T a, T b, T c) : v({b,-a}), c(c) {}\n  line(pt p, pt q) : v(q-p), c(cross(v,p)) {}\n  T side(pt p) { return cross(v,p)-c; }\n  lf dist(pt p) { return abs(side(p)) / abs(v); }\n  lf sq_dist(pt p) { return side(p)*side(p) / (lf)norm(v); }\n  line perp_through(pt p) { return {p, p + rot90ccw(v)}; }\n  bool cmp_proj(pt p, pt q) { return dot(v,p) < dot(v,q); }\n  line translate(pt t) { return {v, c + cross(v,t)}; }\n  line shift_left(double d) { return {v, c + d*abs(v)}; }\n  pt proj(pt p) { return p - rot90ccw(v)*side(p)/norm(v); }\n  pt refl(pt p) { return p - rot90ccw(v)*2*side(p)/norm(v); }\n};\n\nbool inter_ll(line l1, line l2, pt &out) {\n  T d = cross(l1.v, l2.v);\n  if (d == 0) return false;\n  out = (l2.v*l1.c - l1.v*l2.c) / d;\n  return true;\n}\n/*line bisector(line l1, line l2, bool interior) {\n  assert(cross(l1.v, l2.v) != 0); /// l1 and l2 cannot be parallel!\n  lf sign = interior ? 1 : -1;\n  return {l2.v/abs(l2.v) + l1.v/abs(l1.v) * sign,\n          l2.c/abs(l2.v) + l1.c/abs(l1.v) * sign};\n}*/\n\nbool in_disk(pt a, pt b, pt p) {\n  return dot(a-p, b-p) <= 0;\n}\nbool on_segment(pt a, pt b, pt p) {\n  return orient(a,b,p) == 0 && in_disk(a,b,p);\n}\nbool proper_inter(pt a, pt b, pt c, pt d, pt &out) {\n  T oa = orient(c,d,a),\n  ob = orient(c,d,b),\n  oc = orient(a,b,c),\n  od = orient(a,b,d);\n  /// Proper intersection exists iff opposite signs\n  if (oa*ob < 0 && oc*od < 0) {\n    out = (a*ob - b*oa) / (ob-oa);\n    return true;\n  }\n  return false;\n}\nset<pt> inter_ss(pt a, pt b, pt c, pt d) {\n  pt out;\n  if (proper_inter(a,b,c,d,out)) return {out};\n  set<pt> s;\n  if (on_segment(c,d,a)) s.insert(a);\n  if (on_segment(c,d,b)) s.insert(b);\n  if (on_segment(a,b,c)) s.insert(c);\n  if (on_segment(a,b,d)) s.insert(d);\n  return s;\n}\nlf pt_to_seg(pt a, pt b, pt p) {\n  if(a != b) {\n    line l(a,b);\n    if (l.cmp_proj(a,p) && l.cmp_proj(p,b)) /// if closest to  projection\n      return l.dist(p); /// output distance to line\n  }\n  return min(abs(p-a), abs(p-b)); /// otherwise distance to A or B\n}\nlf set_to_seg(pt a, pt b, pt c, pt d) {\n  pt dummy;\n  if (proper_inter(a,b,c,d,dummy)) return 0;\n  return min({pt_to_seg(a,b,c), pt_to_seg(a,b,d),\n              pt_to_seg(c,d,a), pt_to_seg(c,d,b)});\n}\n\nenum {IN, OUT, ON};\nstruct polygon {\n  vector<pt> p;\n  polygon(int n) : p(n) {}\n  int top = -1, bottom = -1;\n  void delete_repetead() {\n    vector<pt> aux;\n    sort(p.begin(), p.end());\n    for(pt &i : p)\n      if(aux.empty() || aux.back() != i)\n        aux.push_back(i);\n    p.swap(aux);\n  }\n  bool is_convex() {\n    bool pos = 0, neg = 0;\n    for (int i = 0, n = p.size(); i < n; i++) {\n      int o = orient(p[i], p[(i+1)%n], p[(i+2)%n]);\n      if (o > 0) pos = 1;\n      if (o < 0) neg = 1;\n    }\n    return !(pos && neg);\n  }\n  lf area() {\n    lf ans = 0;\n    for (int i = 0, n = p.size(); i < n; i++)\n      ans += cross(p[i], p[(i+1)%n]);\n    return abs(ans) / 2.0;\n  }\n  lf perimeter() {\n    lf per = 0;\n    for(int i = 0, n = p.size(); i < n; i++)\n      per += abs(p[i] - p[(i+1)%n]);\n    return per;\n  }\n  bool above(pt a, pt p) { return p.y >= a.y; }\n  bool crosses_ray(pt a, pt p, pt q) {\n    return (above(a,q)-above(a,p))*orient(a,p,q) > 0;\n  }\n  int in_polygon(pt a) {\n    int crosses = 0;\n    for(int i = 0, n = p.size(); i < n; i++) {\n      if(on_segment(p[i], p[(i+1)%n], a)) return ON;\n      crosses += crosses_ray(a, p[i], p[(i+1)%n]);\n    }\n    return (crosses&1 ? IN : OUT);\n  }\n  void normalize() { /// polygon is CCW\n    bottom = min_element(p.begin(), p.end()) - p.begin();\n    vector<pt> tmp(p.begin()+bottom, p.end());\n    tmp.insert(tmp.end(), p.begin(), p.begin()+bottom);\n    p.swap(tmp);\n    bottom = 0;\n    top = max_element(p.begin(), p.end()) - p.begin();\n  }\n  int in_convex(pt a) {\n    assert(bottom == 0 && top != -1);\n    if(a < p[0] || a > p[top]) return OUT;\n    T orientation = orient(p[0], p[top], a);\n    if(orientation == 0) {\n      if(a == p[0] || a == p[top]) return ON;\n      return top == 1 || top + 1 == p.size() ? ON : IN;\n    } else if (orientation < 0) {\n      auto it = lower_bound(p.begin()+1, p.begin()+top, a);\n      T d = orient(*prev(it), a, *it);\n      return d < 0 ? IN : (d > 0 ? OUT: ON);\n    }\n    else {\n      auto it = upper_bound(p.rbegin(), p.rend()-top-1, a);\n      T d = orient(*it, a, it == p.rbegin() ? p[0] : *prev(it));\n      return d < 0 ? IN : (d > 0 ? OUT: ON);\n    }\n  }\n  polygon cut(pt a, pt b) {\n    line l(a, b);\n    polygon new_polygon(0);\n    for(int i = 0, n = p.size(); i < n; ++i) {\n      pt c = p[i], d = p[(i+1)%n];\n      lf abc = cross(b-a, c-a), abd = cross(b-a, d-a);\n      if(abc >= 0) new_polygon.p.push_back(c);\n      if(abc*abd < 0) {\n        pt out; inter_ll(l, line(c, d), out);\n        new_polygon.p.push_back(out);\n      }\n    }\n    return new_polygon;\n  }\n  void convex_hull() {\n    sort(p.begin(), p.end());\n    vector<pt> ch;\n    ch.reserve(p.size()+1);\n    for(int it = 0; it < 2; it++) {\n      int start = ch.size();\n      for(auto &a : p) {\n        /// if colineal are needed, use < and remove repeated points\n        while(ch.size() >= start+2 && orient(ch[ch.size()-2], ch.back(), a) <= 0)\n          ch.pop_back();\n        ch.push_back(a);\n      }\n      ch.pop_back();\n      reverse(p.begin(), p.end());\n    }\n    if(ch.size() == 2 && ch[0] == ch[1]) ch.pop_back();\n    /// be careful with CH of size < 3\n    p.swap(ch);\n  }\n  ll pick() {\n    ll boundary = 0;\n    for(int i = 0, n = p.size(); i < n; i++) {\n      int j = (i+1 == n ? 0 : i+1);\n      boundary += __gcd((ll)abs(p[i].x - p[j].x), (ll)abs(p[i].y - p[j].y));\n    }\n    return area() + 1 - boundary/2;\n  }\n  pt& operator[] (int i){ return p[i]; }\n};\n\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n\n  #ifdef LOCAL\n      freopen(\"input.txt\", \"r\", stdin);\n      freopen(\"output.txt\", \"w\", stdout);\n  #else\n      #define endl '\\n'\n  #endif // LOCAL\n\n  cout << fixed << setprecision(10);\n\n  pt a, b; cin >> a >> b;\n  line l(a, b);\n  int q; cin >> q;\n  while(q--) {\n    pt p; cin >> p;\n    p = l.proj(p);\n    cout << p.x << \" \" << p.y << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef double Double;\n\nconst Double EPS = 1e-8;\nconst Double PI = acos(Double(-1.0));\n\nint sign(Double a){\n\tif (abs(a) < EPS) return 0;\n\tif (a < 0.0) return -1;\n\treturn 1;\n}\n\nbool eq(Double a, Double b){\n\treturn sign(a - b) == 0;\n}\n\nbool neq(Double a, Double b){\n\treturn sign(a - b) != 0;\n}\n\nbool lt(Double a, Double b){\n\treturn sign(a - b) == -1;\n}\n\nbool leq(Double a, Double b){\n\treturn sign(a - b) <= 0;\n}\n\nbool gt(Double a, Double b){\n\treturn sign(a - b) == 1;\n}\n\nbool geq(Double a, Double b){\n\treturn sign(a - b) >= 0;\n}\n\nDouble sq(Double a){\n\treturn a * a;\n}\n\nstruct Point {\n\tDouble x, y;\n\t\n\tPoint(){}\n\tPoint(Double x, Double y) : x(x), y(y){}\n\t\n\tbool operator < (const Point &rhs) const { \n\t\treturn x != rhs.x ? x < rhs.x : y < rhs.y;\n\t}\n\t\n\tPoint operator + (const Point &rhs) const {\n\t\treturn Point(x + rhs.x, y + rhs.y);\n\t}\n\t\n\tPoint operator - (const Point &rhs) const {\n\t\treturn Point(x - rhs.x, y - rhs.y);\n\t}\n\t\n\tPoint operator * (const Point &rhs) const {\n\t\treturn Point(x * rhs.x - y * rhs.y, x * rhs.y + y * rhs.x);\n\t}\n\t\n\tPoint operator * (Double rhs) const {\n\t\treturn Point(x * rhs, y * rhs);\n\t}\n\t\n\tPoint operator / (Double rhs) const {\n\t\treturn Point(x / rhs, y / rhs);\n\t}\n\t\n\tPoint& operator += (const Point &rhs) {\n\t\treturn *this = *this + rhs;\n\t}\n\t\n\tPoint& operator -= (const Point &rhs) {\n\t\treturn *this = *this - rhs;\n\t}\n};\n\nPoint operator * (Double lhs, const Point &rhs){\n\treturn rhs * lhs;\n}\n\nPoint operator / (Double lhs, const Point &rhs){\n\treturn rhs * lhs;\n}\n\nistream& operator >> (istream &is, Point &p){\n\treturn is >> p.x >> p.y;\n}\n\nostream& operator << (ostream &os, Point &p){\n\treturn os << p.x << \" \" << p.y;\n}\n\nstruct Segment : array<Point, 2> {\n\tSegment(){}\n\tSegment(const Point &p1, const Point &p2){\n\t\t(*this)[0] = p1;\n\t\t(*this)[1] = p2;\n\t}\n};\n\nistream& operator >> (istream &is, Segment &s){\n\treturn is >> s[0] >> s[1];\n}\n\nstruct Line : array<Point, 2> {\n\tLine(){}\n\tLine(const Point &p1, const Point &p2){\n\t\t(*this)[0] = p1;\n\t\t(*this)[1] = p2;\n\t}\n};\n\nistream& operator >> (istream &is, Line &l){\n\treturn is >> l[0] >> l[1];\n}\n\nstruct Circle {\n\tPoint p;\n\tDouble r;\n\t\n\tCircle(){}\n\tCircle(const Point &p, Double r) : p(p), r(r){}\n};\n\nistream& operator >> (istream &is, Circle &c){\n\treturn is >> c.p >> c.r;\n}\n\ntypedef vector<Point> Polygon;\n\nDouble norm(const Point &p){\n\treturn sq(p.x) + sq(p.y);\n}\n\nDouble abs(const Point &p){\n\treturn sqrt(norm(p));\n}\n\nDouble arg(const Point &p){\n\treturn atan2(p.y, p.x);\n}\n\nPoint polar(Double r, Double t){\n\treturn Point(cos(t) * r, sin(t) * r);\n}\n\nDouble dot(const Point &a, const Point &b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\nDouble cross(const Point &a, const Point &b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint ccw(const Point &p0, const Point &p1, const Point &p2){\n\tPoint a = p1 - p0, b = p2 - p0;\n\tif (sign(cross(a, b)) == 1) return 1;\n\tif (sign(cross(a, b)) == -1) return -1;\n\tif (sign(dot(a, b)) == -1) return 2;\n\tif (lt(norm(a), norm(b))) return -2;\n\treturn 0;\n}\n\ntemplate <typename L1, typename L2>\nbool orthogonal(const L1 &l1, const L2 &l2){\n\treturn sign(dot(l1[1] - l1[0], l2[1] - l2[0])) == 0;\n}\n\ntemplate <typename L1, typename L2>\nbool parallel(const L1 &l1, const L2 &l2){\n\treturn sign(cross(l1[1] - l1[0], l2[1] - l2[0])) == 0;\n}\n\ntemplate <typename L>\nPoint project(const L &l, const Point &p){\n\tPoint t = l[1] - l[0];\n\tDouble r = dot(p - l[0], t) / norm(t);\n\treturn l[0] + t * r;\n}\n\ntemplate <typename L>\nPoint reflect(const L &l, const Point &p){\n\treturn p + (project(l, p) - p) * Double(2.0);\n}\n\nbool intersect(const Line &l1, const Line &l2){\n\tif (!parallel(l1, l2)) return true;\n\treturn sign(cross(l1[1] - l1[0], l2[0] - l1[0])) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s){\n\treturn sign(cross(l[1] - l[0], s[0] - l[0])) * sign(cross(l[1] - l[0], s[1] - l[0])) <= 0;\n}\n\nbool intersect(const Line &l, const Point &p){\n\treturn sign(cross(l[0] - p, l[1] - p)) == 0;\n}\n\nbool intersect(const Segment &s1, const Segment &s2){\n\treturn ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0\n\t\t&& ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\n\nbool intersect(const Segment &s, const Point &p){\n\treturn ccw(s[0], s[1], p) == 0;\n}\n\nint main()\n{\n\tcout << fixed << setprecision(20);\n\t\n\tLine l;\n\tPoint p;\n\tint q;\n\t\n\tcin >> l >> q;\n\twhile (q--){\n\t\tcin >> p;\n\t\t\n\t\tPoint pr = project(l, p);\n\t\tcout << pr << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Point {\n    int x, y;\n\n    Point() = default;\n    Point(int x, int y) : x(x), y(y) {}\n\n    Point operator+(const Point &rhs) const {\n        return Point(x + rhs.x, y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(x - rhs.x, y - rhs.y);\n    }\n    long long operator*(const Point &rhs) const {\n        return 1ll * x * rhs.x + 1ll * y * rhs.y;\n    }\n    long long operator%(const Point &rhs) const {\n        return x * rhs.y - y * rhs.x;\n    }\n};\n\nint main() {\n    Point p1, p2;\n    cin >> p1.x >> p1.y;\n    cin >> p2.x >> p2.y;\n    int q; cin >> q;\n\n    Point d = p2 - p1;\n    double l = sqrt(d * d);\n    double dx = d.x / l;\n    double dy = d.y / l;\n\n    while (q--) {\n        Point p; cin >> p.x >> p.y;\n        long long dot = (p - p1) * (p2 - p1);\n        double dist = dot / l;\n        double fx = p1.x + dx * dist;\n        double fy = p1.y + dy * dist;\n        cout << fixed << setprecision(20) << fx << ' ' << fy << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst double eps = 1e-8;\nstruct Node\n{\n    double x, y;\n    Node(double xx = 0, double yy = 0){\n        x = xx; y = yy;\n    }\n\n    Node operator + (Node b){\n        return Node(x+b.x, y+b.y);\n    }\n    Node operator - (Node b){\n        return Node(x-b.x, y-b.y);\n    }\n    Node operator * (double a){\n        return Node(a*x, a*y);\n    }\n    Node operator / (double a){\n        return Node(x/a, y/a);\n    }\n\n    double norm(){return x*x+y*y;}\n    double len(){\n        return sqrt(norm());\n    }\n\n    bool operator < (const Node &p) const{\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n\n    bool operator == (const Node &p) const {\n        return fabs(x-p.x)<eps && fabs(y-p.y)<eps;\n    }\n};\n\ntypedef Node vtr;\n\nstruct line{\n    Node a, b;\n    line(Node x, Node y){\n        a = x, b = y;\n    }\n};\n\n//向量点积\ndouble dot(vtr a, vtr b){\n    return a.x*b.x+a.y*b.y;\n}\n\n//向量叉积\ndouble cross(vtr a, vtr b){\n    return a.x*b.y-a.y*b.x;\n}\n\n//投影 求垂足坐标\n//点p在直线p1p2上的投影\nNode project(line s, Node p)\n{\n    vtr base = s.b-s.a;\n    double r = dot(p-s.a, base)/base.norm();\n    return s.a+base*r;\n}\n\n\nint main()\n{\n    Node p1, p2, p;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    line t = line(p1, p2);\n\n    int q; scanf(\"%d\", &q);\n    while(q--)\n    {\n        cin >> p.x >> p.y;\n        p = project(t, p);\n        printf(\"%.10f %.10f\\n\", p.x, p.y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <numeric>\n#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\nusing namespace std;\ntypedef vector<double> VecD;\n#define rep(n) for(int i=0;i<n;i++)\n#define PB push_back\n\nclass Point{\nfriend const double operator*(const Point &, const Point &);\nfriend const Point operator*(const double, const Point &);\nfriend const Point operator*(const Point &, const double);\nfriend const Point operator+(const Point &, const Point &);\nfriend const Point operator+(const double, const Point &);\nfriend const Point operator+(const Point &, const double);\nfriend const Point operator-(const Point &);\nfriend const Point operator-(const Point &, const Point &);\nfriend const Point operator-(const double, const Point &);\nfriend const Point operator-(const Point &, const double);\n\npublic:\n\tPoint(){};\n\tPoint(VecD v){\n\t\tpoint = v;\n\t}\n\tVecD point;\n};\n\nconst double operator*(const Point &p0, const Point &p1){ return inner_product( p0.point.begin(), p0.point.end(), p1.point.begin(), 0); }\nconst Point operator*(const double a, const Point &p1){\n\tVecD v;\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++) v.PB(*iter1 * a);\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator* (const Point &p, const double a){return a*p;}\nconst Point operator+(const Point &p0, const Point &p1){\n\tVecD v;\n\tVecD::const_iterator iter0 = p0.point.begin();\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++){\n\t\tv.PB(*iter0 + *iter1);\n\t\titer0++;\n\t}\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator+(const double a, const Point &p1){\n\tVecD v;\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++){\n\t\tv.PB(*iter1 + a);\n\t}\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator+(const Point &p1, const double a){return a+p1;}\nconst Point operator-(const Point &p1){return (-1)*p1;}\nconst Point operator-(Point &p0, Point &p1){ return p0+(-p1); }\nconst Point operator-(double a, Point &p1){ return a+(-p1); }\nconst Point operator-(Point &p1, double a){return (-a)+p1;}\n\nconst Point projection(const Point &p1, const Point &p2){\n\t// cout << p1*p2 << endl;\n\treturn ((p1*p2) / (p1*p1)) * p1;\n}\n\nint main(void){\n\n\tdouble xp0, yp0, xp1, yp1; cin>>xp0>>yp0>>xp1>>yp1;\n\tint q; cin >> q;\n\tVecD v0; v0.PB(xp0); v0.PB(yp0); Point p0(v0);\n\tVecD v1; v1.PB(xp1); v1.PB(yp1); Point p1(v1);\n\tp1 = p1+p0;\n\trep(q){\n\t\tdouble xp2,yp2; cin>>xp2>>yp2;\n\t\tVecD v2; v2.PB(xp2); v2.PB(yp2); Point p2(v2);\n\t\tPoint ret = projection(p1, p2);\n\t\tcout << ret.point[0] << \" \" << ret.point[1] << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "//\n// Projction and Reflection\n//\n// verified:\n//   AOJ Course CGL_1_A: Projection\n//   AOJ Course CGL_1_B: Reflection\n//\n\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <iomanip>\nusing namespace std;\n\n/* Point */\nusing DD = double;\nconst DD INF = 1LL<<60;      // to be set appropriately\nconst DD EPS = 1e-10;        // to be set appropriately\nconst DD PI = acos(-1.0);\nDD torad(int deg) {return (DD)(deg) * PI / 180;}\nDD todeg(DD ang) {return ang * 180 / PI;}\n\nstruct Point {\n    DD x, y;\n    Point(DD x = 0.0, DD y = 0.0) : x(x), y(y) {}\n    friend ostream& operator << (ostream &s, const Point &p) {return s << '(' << p.x << \", \" << p.y << ')';}\n};\n\ninline Point operator + (const Point &p, const Point &q) {return Point(p.x + q.x, p.y + q.y);}\ninline Point operator - (const Point &p, const Point &q) {return Point(p.x - q.x, p.y - q.y);}\ninline Point operator * (const Point &p, DD a) {return Point(p.x * a, p.y * a);}\ninline Point operator * (DD a, const Point &p) {return Point(a * p.x, a * p.y);}\ninline Point operator * (const Point &p, const Point &q) {return Point(p.x * q.x - p.y * q.y, p.x * q.y + p.y * q.x);}\ninline Point operator / (const Point &p, DD a) {return Point(p.x / a, p.y / a);}\ninline Point conj(const Point &p) {return Point(p.x, -p.y);}\ninline Point rot(const Point &p, DD ang) {return Point(cos(ang) * p.x - sin(ang) * p.y, sin(ang) * p.x + cos(ang) * p.y);}\ninline Point rot90(const Point &p) {return Point(-p.y, p.x);}\ninline DD cross(const Point &p, const Point &q) {return p.x * q.y - p.y * q.x;}\ninline DD dot(const Point &p, const Point &q) {return p.x * q.x + p.y * q.y;}\ninline DD norm(const Point &p) {return dot(p, p);}\ninline DD abs(const Point &p) {return sqrt(dot(p, p));}\ninline DD amp(const Point &p) {DD res = atan2(p.y, p.x); if (res < 0) res += PI*2; return res;}\ninline bool eq(const Point &p, const Point &q) {return abs(p - q) < EPS;}\ninline bool operator < (const Point &p, const Point &q) {return (abs(p.x - q.x) > EPS ? p.x < q.x : p.y < q.y);}\ninline bool operator > (const Point &p, const Point &q) {return (abs(p.x - q.x) > EPS ? p.x > q.x : p.y > q.y);}\ninline Point operator / (const Point &p, const Point &q) {return p * conj(q) / norm(q);}\n\n/* Line */\nstruct Line : vector<Point> {\n    Line(Point a = Point(0.0, 0.0), Point b = Point(0.0, 0.0)) {\n        this->push_back(a);\n        this->push_back(b);\n    }\n    friend ostream& operator << (ostream &s, const Line &l) {return s << '{' << l[0] << \", \" << l[1] << '}';}\n};\n\n/* Projection */\nPoint proj(const Point &p, const Line &l) {\n    DD t = dot(p - l[0], l[1] - l[0]) / norm(l[1] - l[0]);\n    return l[0] + (l[1] - l[0]) * t;\n}\nPoint refl(const Point &p, const Line &l) {\n    return p + (proj(p, l) - p) * 2;\n}\n\n\nint main() {\n    DD xp1, yp1, xp2, yp2; cin >> xp1 >> yp1 >> xp2 >> yp2;\n    Line l(Point(xp1, yp1), Point(xp2, yp2));\n    int Q; cin >> Q;\n    for (int qu = 0; qu < Q; ++qu) {\n        DD x, y; cin >> x >> y;\n        Point p(x, y);\n        Point res = proj(p, l);\n        cout << fixed << setprecision(10) << res.x << \" \" << res.y << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define trav(a, x) for(auto& a : x)\n#define all(x) x.begin(), x.end()\n#define sz(x) (int)(x).size()\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntemplate<class T>\nstruct Point {\n\ttypedef Point P;\n\tT x, y;\n\texplicit Point(T x=0, T y=0) : x(x), y(y) {}\n\tbool operator<(P p) const { return tie(x,y) < tie(p.x,p.y); }\n\tbool operator==(P p) const { return tie(x,y)==tie(p.x,p.y); }\n\tP operator+(P p) const { return P(x+p.x, y+p.y); }\n\tP operator-(P p) const { return P(x-p.x, y-p.y); }\n\tP operator*(T d) const { return P(x*d, y*d); }\n\tP operator/(T d) const { return P(x/d, y/d); }\n\tT dot(P p) const { return x*p.x + y*p.y; }\n\tT cross(P p) const { return x*p.y - y*p.x; }\n\tT cross(P a, P b) const { return (a-*this).cross(b-*this); }\n\tT dist2() const { return x*x + y*y; }\n\tdouble dist() const { return sqrt((double)dist2()); }\n\t// angle to x-axis in interval [-pi, pi]\n\tdouble angle() const { return atan2(y, x); }\n\tP unit() const { return *this/dist(); } // makes dist()=1\n\tP perp() const { return P(-y, x); } // rotates +90 degrees\n\tP normal() const { return perp().unit(); }\n\t// returns point rotated 'a' radians ccw around the origin\n\tP rotate(double a) const {\n\t\treturn P(x*cos(a)-y*sin(a),x*sin(a)+y*cos(a)); }\n};\n\nusing P = Point<double>;\n\nint main(){\n\tios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tcout << fixed << setprecision(10);\n\tP p1, p2;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tint q;\n\tcin >> q;\n\tfor(int i = 0; i < q; i++){\n\t\tP p;\n\t\tcin >> p.x >> p.y;\n\t\tP proj = p - (p2 - p1).normal() * p.dot((p2 - p1).normal());\n\t\tcout << proj.x << \" \" << proj.y << '\\n';\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define mkp make_pair\n#define rep(i,n) for(int i=0;i<(n);++i)\ntypedef long long ll;\n\nconst ll MOD=1e9+7;\nconst double EPS=1e-9;\nconst double PI=acos(-1.0);\n//const long double PI=acos(-1.0l);\n\nstruct Point{\n    double x,y;\n    Point(double x=0.0,double y=0.0):x(x),y(y){}\n\n    Point operator +(const Point &b) const {return Point(x+b.x,y+b.y);}\n    Point operator -(const Point &b) const {return Point(x-b.x,y-b.y);}\n    Point operator *(const double b) const {return Point(x*b,y*b);}\n    Point operator /(const double b) const {return Point(x/b,y/b);}\n};\n\ndouble dot(const Point &a,const Point &b) {return (a.x*b.x+a.y*b.y);}\ndouble cross(const Point &a,const Point &b) {return (a.x*b.y-a.y*b.x);}\ndouble norm(const Point &a) {return dot(a,a);}\ndouble abs(const Point &a) {return sqrt(norm(a));}\n\n\nint main(){\n    Point P1,P2;\n    cin>>P1.x>>P1.y>>P2.x>>P2.y;\n    int Q;\n    cin>>Q;\n\n    for(int q=0;q<Q;q++){\n        Point p;\n        cin>>p.x>>p.y;\n\n        double s=dot(P2-P1,p-P1);\n        s/=abs(P2-P1);\n\n        Point ans;\n        ans=P1+(P2-P1)*s/abs(P2-P1);\n        cout<<fixed<<setprecision(10)<<ans.x<<\" \"<<ans.y<<endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <numeric>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long int ll;\ntypedef pair<int,int> Pint;\n\n#define all(x) x.begin(),x.end()\n\nconst ll mod = 1e9+7;\nconst ll INF = 1e9;\nconst ll MAXN = 1e9;\n\ndouble dot(Pint p1,Pint p2){\n\treturn p1.first*p2.first + p1.second*p2.second;\n}\ndouble vector_length(Pint p){\n\treturn pow(p.first*p.first+p.second*p.second,0.5);\n}\n\ndouble cos_(Pint p1,Pint p2){\n\treturn dot(p1,p2)/(vector_length(p1)*vector_length(p2));\n}\n\nvoid proj(Pint p1,Pint p2,Pint a,Pint b){\n\tPint pp = Pint(p2.first-p1.first,p2.second-p1.second);\n\tdouble ans_x = (double)p1.first + vector_length(a)*cos_(a,b)*pp.first/vector_length(pp);\n\tdouble ans_y = (double)p1.second + vector_length(a)*cos_(a,b)*pp.second/vector_length(pp);\n\tprintf(\"%.12f %.12f\\n\", ans_x,ans_y);\n}\n\nint main()\n{\n\tPint p1,p2;\n\tcin >> p1.first >> p1.second >> p2.first >> p2.second;\n\tint q;\n\tcin >> q;\n\tfor(int i = 0; i < q; i++){\n\t\tint x,y;\n\t\tcin >> x >> y;\n\t\tPint a = Pint(x-p1.first,y-p1.second);\n\t\tPint b = Pint(p2.first-p1.first,p2.second-p1.second);\n\n\n\t\t// cout << \"a = \" << a.first << \" \" << a.second << \"  \" << vector_length(a) << endl;\n\t\t// cout << \"b = \" << b.first << \" \" << b.second << endl;\n\t\t// cout << \"cos = \" << cos_(a,b) << endl;\n\n\t\tproj(p1,p2,a,b);\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n\nP project(P a,P b,P c){\n  double k=real((c-a)/(b-a))*abs(b-a);\n  return a+(b-a)/abs(b-a)*k;\n}\n\nint main(){\n  int n;\n  double ax,ay,bx,by,cx,cy;\n  cin>>ax>>ay>>bx>>by>>n;\n  while(n--){\n    cin>>cx>>cy;\n    P p=project(P(ax,ay),P(bx,by),P(cx,cy));\n    printf(\"%.8f %.8f\\n\",p.real(),p.imag());\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <array>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\nusing namespace std;\n\n// isis = is intersected ...\n\n// Types\nusing ld = long double;\n\ntemplate <std::size_t N>\nusing point = std::array<ld, N>;\nusing point2d = point<2>;\nusing point3d = point<3>;\n\ntemplate <typename Point = point2d>\nclass line {\npublic:\n    Point a, b;\n};\n\nclass circle {\npublic:\n    point2d p;\n    ld r;\n};\n\nclass sphere {\npublic:\n    point3d p;\n    ld r;\n};\n\n\n// operator\ntemplate <std::size_t N>\npoint<N> operator-(point<N> const& a, point<N> const& b) {\n    point<N> ret;\n    for(int i=0; i<N; ++i) {\n        ret[i] = a[i] - b[i];\n    }\n    return ret;\n}\ntemplate <std::size_t N>\npoint<N> operator-(point<N> const& a, ld b) {\n    point<N> ret = a;\n    for(int i=0; i<N; ++i) {\n        ret[i] -= b;\n    }\n    return ret;\n}\ntemplate <std::size_t N>\npoint<N> operator-(ld a, point<N> const& b) {\n    return b-a;\n}\n\ntemplate <std::size_t N>\npoint<N> operator+(point<N> const& a, point<N> const& b) {\n    point<N> ret;\n    for(int i=0; i<N; ++i) {\n        ret[i] = a[i] + b[i];\n    }\n    return ret;\n}\ntemplate <std::size_t N>\npoint<N> operator+(point<N> const& a, ld b) {\n    point<N> ret = a;\n    for(int i=0; i<N; ++i) {\n        ret[i] += b;\n    }\n    return ret;\n}\ntemplate <std::size_t N>\npoint<N> operator+(ld a, point<N> const& b) {\n    return b+a;\n}\n\ntemplate <std::size_t N>\npoint<N> operator*(point<N> const& a, ld b) {\n    point<N> ret = b;\n    for(int i=0; i<N; ++i) {\n        ret[i] *= b;\n    }\n    return ret;\n}\ntemplate <std::size_t N>\npoint<N> operator*(ld a, point<N> const& b) {\n    return b*a;\n}\n\n\n// constant\nconstexpr ld EPS = 1e-8;\nconstexpr ld PI = std::acos(-1.0);\n\n\n// functions\nbool eq(ld a, ld b) { // todo: rename\n    return (std::abs(a - b) < EPS);\n}\n\npoint2d make_point(ld a, ld b) {\n    return point2d{{a, b}};\n}\npoint3d make_point(ld a, ld b, ld c) {\n    return point3d{{a, b, c}}; \n}\n\ntemplate <std::size_t N>\nld dot(point<N> a, point<N> b) { // inner_product\n    return std::inner_product(std::begin(a), std::end(a), std::begin(b), 0);    \n}\n\nld cross(point2d a, point2d b) {\n    return a[0]*b[1] - a[1]*b[0];\n}\npoint3d cross(point3d a, point3d b) {\n    return make_point(a[1]*b[2] - a[2]*b[1], a[2]*b[0] - a[0]*b[2], a[0]*b[1] - a[1]*b[0]);\n}\n\ntemplate <std::size_t N>\nld norm(point<N> a) { // |a|^2\n    return dot(a, a);\n}\n\ntemplate <std::size_t N>\nld dist(point<N> a) { // |a|\n    return std::sqrt(dot(a, a));\n}\n\nbool isis_ll(line<> l, line<> m) { // line and line(2d)\n    return !eq(cross(l.b - l.a, m.b - m.a), 0);\n}\n\nbool isis_ls(line<> l, line<> s) { // line and half line(2d)\n    return (cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - s.a) < EPS);\n}\n\nbool isis_lp(line<> l, point2d p) { // 2d\n    return (std::abs(cross(l.b - p, l.a - p)) < EPS);\n}\n\ntemplate <std::size_t N>\nbool isis_sp(line<point<N>> s, point<N> p) {\n    return (dist(s.a - p) + dist(s.b - p) - dist(s.b - s.a) < EPS);\n}\n\ntemplate <std::size_t N>\npoint<N> proj(line<point<N>> l, point<N> p) {\n    point<N> p1, p2, ret; // p1 = p - l.a, p2 = l.a - l.b, ret = l.a + t*(l.a - l.b)\n    for(int i=0; i<N; ++i) {\n        p1[i] = p[i] - l.a[i];\n        p2[i] = l.a[i] - l.b[i];\n    }\n    ld t = dot(p1, p2) / norm(p2);\n    for(int i=0; i<N; ++i) {\n        ret[i] = l.a[i] + t*p2[i];\n    }\n    return ret;\n}\n\ntemplate <std::size_t N>\nld dist_lp(line<point<N>> l, point<N> p) {\n    return dist(p - proj(l, p));\n}\n\nld dist_ll(line<> l, line<> m) {\n    return isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\nld dist_ls(line<> l, line<> s) {\n    return isis_ls(l, s) ? 0 : min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\ntemplate <std::size_t N>\nld dist_sp(line<point<N>> s, point<N> p) {\n    point<N> r = proj(s, p);\n    return isis_sp(s, r) ? dist(r - p) : min(dist(s.a - p), dist(s.b - p));\n}\n\nint ccw(point2d a, point2d b, point2d c) {\n    for(int i=0; i<2; ++i) {\n        b[i] -= a[i];\n        c[i] -= a[i];\n    }\n    if(cross(b, c) > EPS) return 1;   // a -> b -> c is counter clockwise\n    if(cross(b, c) < -EPS) return -1; // a -> b -> c is clockwise\n    if(dot(b, c) < 0) return 2;       // c -> a -> b is line\n    if(norm(b) < norm(c)) return -2;  // a -> b -> c is line\n    return 0;                         // a -> c -> b is line\n}\n\n\nint main() {\n    int x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    line<> l; l.a = make_point(x1, y1); l.b = make_point(x2, y2);\n    int q;\n    cin >> q;\n    for(int i=0; i<q; ++i) {\n        int x, y;\n        cin >> x >> y;\n        point2d p = make_point(x, y);\n        point2d res = proj(l, p);\n        cout << fixed << setprecision(10) << res[0] << \" \" << res[1] << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "// -*- coding: utf-8 -*-\n// Last-Updated : <2014/06/20 07:15:20 by samui>\n\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <climits>\n#include <set>\n#include <bitset>\n\n#define MP(a, b) std::make_pair(a, b)\n#define X first\n#define Y second\n#define rep(i,n) for(int (i) = 0; (i) < (int)(n); ++(i))\n#define rer(i,l,n) for(int (i) = l; (i) <= (int)(n); ++(i))\n#define reu(i,l,n) for(int (i) = l; (i) < (int)(n); ++(i))\ntemplate<typename T,typename U> inline void amin(T &x,U y){ if(y<x) x = y;}\ntemplate<typename T,typename U> inline void amax(T &x,U y){ if(x<y) x = y;}\ntemplate<typename TYPE,std::size_t SIZE>\nstd::size_t len(const TYPE (&array)[SIZE]){return SIZE;}\n\n// 幾何ライブ\ntypedef long double LD;\nconst LD INF = 1e100;\nconst LD EPS = 1e-8;\nconst LD PI = acos(-1);\ntypedef std::pair<LD,LD> PLD;\ntypedef std::vector<std::pair<LD,LD>> VPLD2;\n\nclass Point{\npublic:\n  LD x,y;\n  Point(LD x = 0,LD y = 0): x(x),y(y){ };\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);};\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);};\n  Point operator * (LD a) {return Point(x*a,y*a);};\n  Point operator / (LD a) {return Point(x/a,y/a);};\n  LD abs(){return std::sqrt(x*x+y*y);};\n  Point unit(){LD u = abs();return Point(x,y)/u; };\n};\ntypedef Point Vector2D;\nLD dotProduct(const Vector2D a,const Vector2D b){\n  return a.x*b.x+a.y*b.y;\n}\nLD angle(Vector2D a,Vector2D b){\n  return acos(dotProduct(a,b)/(a.abs()*b.abs()));\n}\nVector2D Projection(Vector2D source,Vector2D aim){\n  // sourceへの射影をもとめる。\n  LD a = angle(source,aim);\n  LD d = aim.abs()*cos(a);\n  return source.unit()*d;\n}\n\n\nint main(int argc, char *argv[])\n{\n  Vector2D c,d;\n  int x0,x1,y0,y1;\n  std::cin>>x0>>y0>>x1>>y1;\n  c = Vector2D(x1-x0,y1-y0);\n  int t;\n  std::cin>>t;\n  while(t>0){\n    std::cin>>x0>>y0;\n    Vector2D e = Projection(c,Vector2D(x0,y0));\n    std::cout<<e.x<<\" \"<<e.y<<std::endl;\n    t--;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cmath>\n#include <iomanip>\n#include <string>\n#include <queue>\n#include <algorithm>\n#include <cctype>\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\ntypedef pair<double,double> pdd;\nconst int inf=1<<30;\nconst double pi=acos(-1);\nconst double eps=1e-8;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point Gep){\n\t\treturn point{x+Gep.x,y+Gep.y};\n\t}\n\tpoint operator-(point Gep){\n\t\treturn point{x-Gep.x,y-Gep.y};\n\t}\n\tpoint operator*(double Gex){\n\t\treturn point{x*Gex,y*Gex};\n\t}\n\tpoint operator/(double Gex){\n\t\tif(!Gex) return point{0,0}; \n\t\treturn point{x/Gex,y/Gex};\n\t}\n\tbool operator==(point Gep){\n\t\treturn fabs(x-Gep.x)<eps&&fabs(y-Gep.y)<eps;\n\t}\n};\nclass Geom{\n\tpublic:\n\tvector<point> Ge;\n\tvector<pair<point,point> > Geseg,Geline;\n\tvoid line_push(point Gex,point Gey){\n\t\tGeline.push_back(make_pair(Gex,Gey));\n\t}\n\tpdd POI(pdd Gea,pdd Geb,pdd Gec,pdd Ged){\n\t\treturn pdd(3,4);\n\t}\n\tdouble IP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.x+Gex.y*Gey.y;\n\t}\n\tdouble LEN(point Gex){\n\t\treturn sqrt(Gex.x*Gex.x+Gex.y*Gex.y);\n\t}\n\tpoint PRO(pair<point,point> Gea,point Gex){\n\t\tpoint Ge1=Gex-Gea.second,Ge2=Gea.first-Gea.second;\n\t\treturn Ge2*(IP(Ge1,Ge2)/(LEN(Ge2)*LEN(Ge2)))+Gea.second;\n\t}\n\tpoint line_open(int Gex){\n\t\treturn Geline[Gex];\n\t}\n};\n\nint q;\ndouble x,xx,y,yy,xxx,yyy;\n\nint main(){\n\tcout<<shosu(10);\n\tcin>>x>>y>>xx>>yy>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>xxx>>yyy;\n\t\tGeom geo;\n\t\tgeo.line_push(point{x,y},point{xx,yy});\n\t\tpoint ans=geo.PRO(geo.line_open(0),point{xxx,yyy});\n\t\tcout<<ans.x<<' '<<ans.y<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <typename T>\nstruct point {\n    T x;\n    T y;\n\n    point(T x = 0, T y = 0) : x(x), y(y) {}\n\n    friend ostream& operator<<(ostream& os, const point p) {\n        os << fixed << setprecision(10) << p.x << \" \" << p.y;\n        return os;\n    }\n};\n\ntemplate <typename T>\nstruct vec {\n    T x;\n    T y;\n\n    vec(T x, T y) : x(x), y(y) {}\n\n    vec(point<T> a) {\n        x = a.x;\n        y = a.y;\n    }\n    \n    vec(point<T> a, point<T> b)  {\n        x = b.x - a.x;\n        y = b.y - a.y;\n    }\n\n    double magnitude() {\n        return sqrt(x * x + y * y);\n    }\n};\n\ntemplate <typename T>\nvec<T> scale(vec<T> v, double mag) {\n    return vec<T>(v.x * mag, v.y * mag);\n}\n\ntemplate <typename T>\nT dot_product(vec<T> u, vec<T> v) {\n    return u.x * v.x + u.y * v.y;\n}\n\ntemplate <typename T>\npoint<T> translate(point<T> p, vec<T> v) {\n    return point<T>(p.x + v.x, p.y + v.y);\n}\n\nint main() {\n\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n\n    point<double> p1(x1, y1);\n    point<double> p2(x2, y2);\n\n    vec<double> v(p1, p2);\n\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        double x, y;\n        cin >> x >> y;\n\n        point<double> p(x, y);\n\n        vec<double> u(p1, p);\n\n        double len = dot_product(u, v) / v.magnitude() / v.magnitude();\n\n        vec<double> vec_q = scale(v, len);\n\n        point<double> q(vec_q.x, vec_q.y);\n\n        point<double> ans = translate(q, vec<double>(point<double>(0, 0), p1));\n\n        cout << ans << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n/*******************??????********************/\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const P& a, const P& b) {//??????\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {//??????\n\treturn real(conj(a)*b);\n}\n\nstruct L : public vector<P> {//??????\n\tL(const P &a, const P &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ntypedef vector<P> G;\nstruct C {//???\n\tP p; double r;\n\tC(const P &p, double r) : p(p), r(r) { }\n};\n\nint ccw(P a, P b, P c) {//??????????????????\n\tb -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\nbool intersectLL(const L& l,const L& m){\n\t//non-parallel || sameline\n\treturn abs(cross(l[1]-l[0],m[1]-m[0])) > EPS || abs(cross(l[1]-l[0],m[0]-l[0])) < EPS;\n}\nbool intersectLS(const L& l,const L& s){\n\t// s[0] is left of l,s[1] is right of l\n\treturn cross(l[1]-l[0],s[0]-l[0]) * cross(l[1]-l[0],s[1]-l[0]) < EPS;\n}\nbool intersectLP(const L& l,const P& p){\n\treturn abs(cross(l[1]-p,l[0]-p)) < EPS;\n}\nbool intersectSP(const L& s,const P& p){\n\treturn abs(s[0]-p)+abs(s[1]-p) - abs(s[1]-s[0]) < EPS;// triangle inequality\n}\n\nP projection(const L& l,const P& p){\n\tdouble t = dot(p-l[0],l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\nP reflection(const L& l,const P& p){\n\treturn p + 2. * (projection(l,p) - p);\n}\ndouble distanceLP(const L& l,const P& p){\n\treturn abs(p - projection(l,p));\n}\ndouble distanceLL(const L& l,const L& m){\n\treturn intersectLL(l,m) ? 0 : distanceLP(l,m[0]);\n}\ndouble distanceLS(const L& l,const L& s){\n\tif(intersectLS(l,s)) return 0;\n\treturn min(distanceLP(l, s[0]),distanceLP(l, s[1]));\n}\n\nint main(void){\n\tint x1,y1,x2,y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tP p1(x1,y1),p2(x2,y2);\n\tL l(p1,p2);\n\n\tint q;\n\tcin >> q;\n\tfor(int i=0;i<q;i++){\n\t\tint x,y;cin >> x >> y;\n\t\tP p3(x,y);\n\t\tP t = projection(l,p3);\n\t\tcout << setprecision(20) << real(t);cout << \" \";\n\t\tcout << setprecision(20) << imag(t) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nusing namespace std;\n\n//????????????\nclass Point{\n  public:\n  double x, y;\n\n  Point(double x=0, double y=0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(a*x, a*y); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double abs() {return sqrt(norm()); }\n  double norm() { return x*x+y*y; }\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n\n};\n\n//(?????¢??????)????????????????????¨????§????????????§??????\ntypedef Point Vector;\n\n//???????????????\ntypedef struct Segment{\n  Point p1, p2;\n}Segment;\n\n//??´??????????§??????????\ntypedef Segment Line;\n\n//????????????\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r=0.0): c(c), r(r) {}\n};\n\n//????§???¢(???????????¨????????????)\ntypedef vector<Point> Polygon;\n\n\n//?????????????????????\ndouble dot(Vector a, Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//?????????????????????\ndouble cross(Vector a, Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//??´?????????(????????????????????????0????????´???)\nbool isOrthogonal(Vector a, Vector b){\n  return equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n  return isOrthogonal(a1- a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n  return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n//????????????(??????????????????????????§?????????0????????????)\nbool isParallel(Vector a, Vector b){\n  return equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n  return isParallel(a1- a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n  return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n//???????????´??????????°???±\nPoint project(Segment s, Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p-s.p1, base) / base.norm();\n  return s.p1 + base*r;\n}\n\nint main(){\n  Point p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n\n  Segment s;\n  s.p1=p1;\n  s.p2=p2;\n\n  int q;\n  scanf(\" %d\", &q);\n  for(int i=0; i<q; ++i){\n    Point p;\n    cin >> p.x >> p.y;\n    Point ans=project(s, p);\n    cout << ans.x  << \" \" << ans.y << endl;\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <math.h>\n#include <stdio.h>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    double x1, x2, xp, y1, y2, yp, slope, ansx, ansy;\n    int    q;\n    bool   X_FLG = false, Y_FLG = false;\n\n    scanf(\"%lf %lf %lf %lf\", &x1, &y1, &x2, &y2);\n    scanf(\"%d\", &q);\n\n    if (y1 == y2) {\n        X_FLG = true;\n    } else if (x1 == x2) {\n        Y_FLG = true;\n    } else {\n        slope = (y2 - y1) / (x2 - x1);\n    }\n\n    for (int i = 0; i < q; i++) {\n        scanf(\"%lf %lf\", &xp, &yp);\n        if (X_FLG) {\n            printf(\"%.10lf %.10lf\\n\", xp, y1);\n        } else if (Y_FLG) {\n            printf(\"%.10lf %.10lf\\n\", x1, yp);\n        } else {\n            ansx = (yp * (x2 - x1) * (y2 - y1) + xp * (x2 - x1) * (x2 - x1) -\n                    y1 * (y2 - y1) * (x2 - x1) + x1 * (y2 - y1) * (y2 - y1)) /\n                   ((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n            ansy = ((x1 - x2) * ansx + yp * (y2 - y1) + xp * (x2 - x1)) /\n                   (y2 - y1);\n            printf(\"%.10lf %.10lf\\n\", ansx, ansy);\n        }\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cstdio>\n\nusing namespace std;\n\n#define X real()\n#define Y imag()\n\nconst double EPS = 1e-8;\n\ntypedef complex<double> Point;\n\nbool operator< (const Point& p1, const Point& p2) {\n  return p1.X != p2.X ? p1.X < p2.X : p1.Y < p2.Y;\n}\n\ndouble dot(const Point& p1, const Point& p2) {\n  return (conj(p1)*p2).X;\n}\n\ndouble cross(const Point& p1, const Point& p2) {\n  return (conj(p1)*p2).Y;\n}\n\ntypedef Point Vector;\n\nint main() {\n  Point p0, p1;\n  double x, y;\n  \n  cin >> x >> y; p0 = Point(x, y);\n  cin >> x >> y; p1 = Point(x, y);\n  \n  Vector v0 = p1 - p0;\n  \n  int q;\n  cin >> q;\n  while(q--) {\n\tcin >> x >> y;\n\tVector v1 = Point(x, y) - p0;\n\tPoint ans = p0 + dot(v0, v1) * v0 / norm(v0);\n\tprintf(\"%lf %lf\\n\", ans.X, ans.Y);\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <complex>\n\nusing namespace std;\n\n#define X real()\n#define Y imag()\n\nconst double EPS = 1e-8;\n\ntypedef complex<double> Point;\n\nbool operator< (const Point& p1, const Point& p2) {\n  return p1.X != p2.X ? p1.X < p2.X : p1.Y < p2.Y;\n}\n\ndouble dot(const Point& p1, const Point& p2) {\n  return (conj(p1)*p2).X;\n}\n\ndouble cross(const Point& p1, const Point& p2) {\n  return (conj(p1)*p2).Y;\n}\n\ntypedef Point Vector;\n\nint main() {\n  Point p0, p1;\n  double x, y;\n  \n  cin >> x >> y; p0 = Point(x, y);\n  cin >> x >> y; p1 = Point(x, y);\n  \n  Vector v0 = p1 - p0;\n  \n  int q;\n  cin >> q;\n  while(q--) {\n\tcin >> x >> y;\n\tVector v1 = Point(x, y) - p0;\n\tPoint ans = p0 + dot(v0, v1) * v0 / norm(v0);\n\tcout << ans.X << ' ' << ans.Y << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\ntypedef long double     lf;\n\nusing namespace std;\n\nconst lf EPS = 1e-9;\n\nstruct pt {\n  lf x, y;\n  pt( ) { }\n  pt( lf x, lf y ) : x( x ), y ( y ) { }\n};\n\ninline lf x( pt P ) { return P.x; }\ninline lf y( pt P ) { return P.y; }\n\nistream& operator >> ( istream& in, pt& p ) {\n  lf x,y; in >> x >> y;\n  p = pt(x,y); return in;\n}\n\nostream& operator << ( ostream& out, const pt& p ) {\n  out << double(p.x) << \" \" << double(p.y);\n  return out;\n}\n\npt operator + ( const pt& A, const pt& B ) {\n  return pt( x(A)+x(B), y(A)+y(B) );\n}\n\npt operator - ( const pt& A, const pt& B ) {\n  return pt( x(A)-x(B), y(A)-y(B) );\n}\n\n\npt operator * ( const lf& B, const pt& A ) {\n  return pt( x(A)*B, y(A)*B );\n}\n\npt operator * ( const pt& A, const lf& B ) {\n  return pt( x(A)*B, y(A)*B  );\n}\n\ninline lf dot( pt A, pt B ) {\n  return x(A)*x(B) + y(A)*y(B);\n}\n\ninline lf norm( pt A ) {\n  return x(A)*x(A) + y(A)*y(A);\n}\n\npt projection (pt p, pt A, pt B) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  return A + ( B-A )*u;\n}\n\npt p1,p2,p;\nint n;\n\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(10);\n\n  cin >> p1 >> p2 >> n;\n  for( int i = 0; i < n; ++i ) {\n    cin >> p;\n    cout << projection( p, p1, p2 ) << '\\n';\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<iomanip>\n#include<vector>\n#include<cassert>\n\nusing namespace std;\n\nnamespace geometry2d {\n\n\t//eps　浮動小数点誤差\n\tconst double EPS = 1e-10;\n\n\t//a > 0ならば+1, a == 0ならば0, a < 0ならば-1　を返す。　基本的にEPS込みの評価はこれで行う。\n\t//不等式は、加減算に直してこれに適用する。\n\tint sgn(const double a) {\n\t\treturn (a < -EPS ? -1 : (a > EPS ? +1 : 0));\n\t}\n\n\tstruct Point {\n\t\t//2次元ベクトルのクラス\n\n\t\tdouble x, y;\n\t\tPoint(double _x, double _y) {\n\t\t\tx = _x, y = _y;\n\t\t}\n\t\tPoint() {\n\t\t\tx = 0, y = 0;\n\t\t}\n\n\t\tPoint operator+() const {\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator-() const {\n\t\t\treturn{ -x, -y };\n\t\t}\n\t\tPoint operator+ (const Point& b) const {\n\t\t\treturn{ x + b.x, y + b.y };\n\t\t}\n\t\tPoint operator- (const Point& b) const {\n\t\t\treturn{ x - b.x, y - b.y };\n\t\t}\n\t\tPoint operator* (const double b) const {\n\t\t\treturn{ x * b, y * b };\n\t\t}\n\t\tPoint operator/ (const double b) const {\n\t\t\treturn{ x / b, y / b };\n\t\t}\n\t\tPoint operator+= (const Point& b) {\n\t\t\tx += b.x, y += b.y;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator-= (const Point& b) {\n\t\t\tx -= b.x, y -= b.y;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator*= (const double b) {\n\t\t\tx *= b, y *= b;\n\t\t\treturn *this;\n\t\t}\n\t\tPoint operator/= (const double b) {\n\t\t\tx /= b, y /= b;\n\t\t\treturn *this;\n\t\t}\n\t\tbool operator== (const Point& b) {\n\t\t\treturn b.x == x && b.y == y;\n\t\t}\n\n\t\tdouble lengthSquare() const {\n\t\t\treturn (x * x + y * y);\n\t\t}\n\t\tdouble length() const {\n\t\t\treturn std::sqrt(lengthSquare());\n\t\t}\n\t\tdouble dot(const Point& b) const {\n\t\t\treturn x * b.x + y * b.y;\n\t\t}\n\t\tdouble cross(const Point& b) const {\n\t\t\t//Generally, cross product is vector, but in 2D, cross product is also scalar.\n\t\t\treturn x * b.y - y * b.x;\n\t\t}\n\t\tdouble distanceFrom(const Point& b) const {\n\t\t\treturn std::sqrt((x - b.x) * (x - b.x) + (y - b.y) * (y - b.y));\n\t\t}\n\t\tPoint normalized() const {\n\t\t\treturn{ x / length(), y / length() };\n\t\t}\n\t\tbool isZero() const {\n\t\t\treturn sgn(x) == 0 && sgn(y) == 0;\n\t\t}\n\t\t//単位法線ベクトル\n\t\tPoint normalUnitVector() const {\n\t\t\treturn{ -normalized().y, normalized().x };\n\t\t}\n\t\t//(0, 0)中心にarg(弧度法)回転した座標\n\t\tPoint rotation(double arg) const {\n\t\t\tdouble cs = cos(arg), sn = sin(arg);\n\t\t\treturn Point(x * cs - y * sn, x * sn + y * cs);\n\t\t}\n\t\t//(0, 0)中心の円上に乗ってるとしたときの、偏角\n\t\tdouble angle() const {\n\t\t\treturn atan2(y, x);\n\t\t}\n\t};\n\n\tinline Point operator*(double a, const Point& b) {\n\t\treturn{ b.x * a, b.y * a };\n\t}\n\n\ttemplate <class Char>\n\tinline std::basic_ostream<Char>& operator <<(std::basic_ostream<Char>& os, const Point& v)\n\t{\n\t\treturn os << Char('(') << v.x << Char(',') << v.y << Char(')');\n\t}\n\n\ttemplate <class Char>\n\tinline std::basic_istream<Char>& operator >> (std::basic_istream<Char>& is, Point& v)\n\t{\n\t\treturn is >> v.x >> v.y;\n\t}\n\n\t//幾何ライブラリにおいて、解なしのような状態の時に返される点の値\n\tconst Point error_val = { 114514.0, -191981.0 };\n\n\tinline bool operator==(const Point& a, const Point& b) {\n\t\treturn (sgn(a.x - b.x) == 0 && sgn(a.y - b.y) == 0);\n\t}\n\n\t//第一にx, 第二にyを小さい順にソートするためのオーバーロード\n\tinline bool operator<(const Point& a, const Point& b) {\n\t\tif (sgn(a.x - b.x) != 0)return sgn(a.x - b.x) < 0;\n\t\telse sgn(a.y - b.y) < 0;\n\t}\n\n\t/*\n\t3点A, B, Cの位置関係を返す関数 A, Bがすべて異なった点であるのが前提\n\t//ABから見てBCは左に曲がるのなら +1\n\t//ABから見てBCは右に曲がるのなら -1\n\t//ABC(CBA)の順番で一直線上に並ぶなら +2\n\t//ACB(BCA)の順番で一直線上に並ぶなら 0\n\tBAC(CAB)の順番で一直線上に並ぶなら -2\n\t*/\n\tint iSP(const Point& a, const Point& b, const Point& c) {\n\t\tint flg = sgn((b - a).cross(c - a));\n\t\tif (flg == 1) {\n\t\t\treturn +1;\n\t\t}\n\t\telse if (flg == -1) {\n\t\t\treturn -1;\n\t\t}\n\t\telse {\n\t\t\t//ABC(CBA)\n\t\t\tif (sgn((b - a).dot(c - b)) > 0)\n\t\t\t\treturn +2;\n\t\t\t//BAC(CAB)\n\t\t\telse if (sgn((a - b).dot(c - a)) > 0)\n\t\t\t\treturn -2;\n\t\t\t//ACB(BCA)　CがA or Bと一致しても、こっちに含まれる。\n\t\t\telse\n\t\t\t\treturn 0;\n\t\t}\n\t}\n\n\t//直線に関する操作や判定\n\tnamespace line2d {\n\n\t\t//向きつき直線を想定。Segment\n\t\tstruct Line {\n\t\t\t\n\t\t\t//直線の通る二点。有向直線でないのならば、beginやendに違いはない。\n\t\t\tPoint begin, end;\n\n\t\t\tLine() {\n\t\t\t\tbegin = Point(), end = Point();\n\t\t\t}\n\n\t\t\tLine(const Point& b, const Point& e) {\n\t\t\t\tbegin = b, end = e;\n\t\t\t}\n\n\t\t\t//ax+by+c=0\n\t\t\tLine(const double a, const double b, const double c) {\n\t\t\t\tif (sgn(a) == 0 && sgn(b) == 0) {\n\t\t\t\t\tassert(-1);\n\t\t\t\t}\n\n\t\t\t\tif (sgn(b) == 0) {\n\t\t\t\t\t//ax+c=0になる。\n\t\t\t\t\tbegin = Point(-c / a, 0.0);\n\t\t\t\t\tend = Point(-c / a, 1.0);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//y=-(ax+c)/b　傾きは-a/bで、y切片が-c/b\n\t\t\t\t\tbegin = Point(0, -c / b);\n\t\t\t\t\tend = Point(1.0, -(a + c) / b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tPoint vec() const {\n\t\t\t\treturn end - begin;\n\t\t\t}\n\n\t\t};\n\n\n\t\t//線分の場合、Lineと同じものになるが、はっきりと区別する\n\t\ttypedef Line Segment;\n\n\n\t\t//直線の交点を返す。交わってなければ、error_valを返す。\n\t\tPoint lineIntersection(const Line& l1, const Line& l2) {\n\t\t\tif (sgn(l1.vec().cross(l2.vec())) == 0)return error_val;\n\n\t\t\tPoint ret;\n\t\t\tret = l1.begin + l1.vec() * \n\t\t\t\tabs((l2.end - l1.begin).cross(l2.vec()) / l1.vec().cross(l2.vec()));\n\t\t\treturn ret;\n\t\t}\n\n\t\t//線分が共通部分を持つかどうか？と線分の交点を返す。共通部分がない、もしくは交点が一意ではないなら、error_valを返す。\n\t\t//trueなら、共通部分を持つ。falseなら、共通部分を持たない。\n\t\tpair<bool, Point> segmentIntersection(const Segment& s1, const Segment& s2) {\n\n\t\t\tif (iSP(s1.begin, s1.end, s2.begin) * iSP(s1.begin, s1.end, s2.end) <= 0 &&\n\t\t\t\tiSP(s2.begin, s2.end, s1.begin) * iSP(s2.begin, s2.end, s1.end) <= 0) {\n\n\t\t\t\t//平行ならば、交点は定まらない。(完全に重なってるので)\n\t\t\t\tif (s1.vec().cross(s2.vec()) == 0)\n\t\t\t\t\treturn make_pair(true, error_val);\n\t\t\t\telse //そうでないのなら、lineIntersection()で交点を返しておく。\n\t\t\t\t\treturn make_pair(true, lineIntersection(s1, s2));\n\n\t\t\t}\n\t\t\treturn make_pair(false, error_val);\n\t\t}\n\n\n\t\t//点と直線の距離。引数は、点、直線上の2点\n\t\tdouble distanceBetweenPointAndLine(const Point& p, const Line& l) {\n\t\t\treturn abs(l.vec().cross(p - l.begin) / l.vec().length());\n\t\t}\n\n\t\t//点と線分の距離。引数は、点、線分の両端\n\t\tdouble distanceBetweenPointAndSegment(const Point& p, const Segment& s) {\n\t\t\tif (sgn(s.vec().dot(p - s.begin)) < 0 || sgn(s.vec().dot(p - s.end)) < 0) {\n\t\t\t\t//下した垂線は線分の上にはない\n\t\t\t\treturn min(p.distanceFrom(s.begin), p.distanceFrom(s.end));\n\t\t\t}\n\t\t\treturn abs(s.vec().cross(p - s.begin) / s.vec().length());\n\t\t}\n\n\t\t//二線分間の距離\n\t\tdouble distanceBetweenSegmentAndSegment(const Segment& s1, const Segment& s2) {\n\t\t\tif (segmentIntersection(s1, s2).first)return 0;//交点を持つ\n\n\t\t\tdouble ans = distanceBetweenPointAndSegment(s1.begin, s2);\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s1.end, s2));\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s2.begin, s1));\n\t\t\tans = min(ans, distanceBetweenPointAndSegment(s2.end, s1));\n\t\t\treturn ans;\n\t\t}\n\n\t\t//正射影\n\t\t//引数は点A, B, Cで、BAベクトルの直線BC上の正射影を求める。\n\t\tPoint projection(const Point& a, const Line& l) {\n\t\t\tPoint ret;\n\t\t\tret = l.begin + \n\t\t\t\tl.vec().normalized() * (a - l.begin).dot(l.vec()) / l.vec().length();\n\t\t\treturn ret;\n\t\t}\n\n\t\t//鏡映変換。引数は点A, B, Cで、直線BCにおいて、Aと線対称な点を求める。\n\t\tPoint reflection(const Point& a, const Line& l) {\n\t\t\tPoint ret;\n\t\t\tret = a + 2 * (projection(a, l) - a);\n\t\t\treturn ret;\n\t\t}\n\t}\n\n}\n\nint main() {\n\tgeometry2d::line2d::Line l;\n\tcin >> l.begin >> l.end;\n\tint q;\n\tcin >> q;\n\n\twhile (q--) {\n\t\tgeometry2d::Point p;\n\t\tcin >> p;\n\n\t\tauto ret = geometry2d::line2d::projection(p, l);\n\t\tcout << setprecision(15) << ret.x << \" \" << ret.y << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\ntypedef long long ll;\ndouble pi=3.14159265359; //円周率\ndouble EPS = 1e-10; //誤差\n\nclass point\n{\n\tpublic:\n\tdouble x,y;\n\n\tpoint()\n\t{x=0;y=0;}\n\t//コンストラクタ\n\tpoint(double a,double b)\n\t{\n\t\tx=a;y=b;\n\t}\n\n\t//足し算\n\tpoint operator + (point p)\n\t{\n\t\treturn point(x+p.x,y+p.y);\n\t}\n\t//引き算\n\tpoint operator - (point p)\n\t{\n\t\treturn point(x-p.x,y-p.y);\n\t}\n\t//d倍\n\tpoint operator * (double d)\n\t{\n\t\treturn point(x*d,y*d);\n\t}\n\t//x座標昇順でソートする\n\tbool operator < (const point &p)\n\tconst {\n\t\tif(std::abs(x-p.x)>EPS)\n\t\t\treturn x<p.x;\n\t\telse\n\t\t\treturn y<p.y;\n\t}\n\t//内積\n\t//直交判定...abs(dot())<EPS\n\tdouble dot(point p)\n\t{\n\t\treturn x*p.x+y*p.y;\n\t}\n\t//外積\n\t//平行判定...abs(cross())<EPS\n\tdouble cross(point p)\n\t{\n\t\treturn x*p.y-y*p.x;\n\t}\n\t//絶対値を求める\n\tdouble abs()\n\t{\n\t\treturn sqrt(x*x+y*y);\n\t}\n\t//単位ベクトルを求める\n\tpoint ev()\n\t{\n\t\treturn point(x/abs(),y/abs());\n\t}\n\t//単位法線ベクトル（の1つ）を求める\n\t//もうひとつは-1倍することで求まる\n\tpoint nev()\n\t{\n\t\treturn point(-y/abs(),x/abs());\n\t}\n\t//2点間の距離を求める\n\t//distがEPS未満なら2点は同じ位置にあるとみなす\n\tdouble pdist(point p)\n\t{\n\t\tpoint v=point(p.x-x,p.y-y);\n\t\treturn v.abs();\n\t}\n\t//この点と直線p1-p2の距離を求める\n\tdouble ldist(point p1,point p2)\n\t{\n\t\treturn std::abs((p2.y-p1.y)*x-(p2.x-p1.x)*y+p2.x*p1.y+p2.y*p1.x)/(p2-p1).abs();\n\t}\n\n};\n\n//線分p1-p2上に点qがあるか判定\nbool on_seg(point p1,point p2,point q)\n{\n\treturn abs((p1-q).cross(p2-q))<EPS && (p1-q).dot(p2-q)<=EPS;\n}\n//直線p1-p2と直線q1-q2の交点\n//線分の交差判定はこれの戻り値が線分上にあるかどうかで判定する...on_seg(p1,p2,intersection(p1,p2,q1,q2))\npoint intersection(point p1,point p2,point q1,point q2)\n{\n\treturn p1 + (p2-p1) * ((q2-q1).cross(q1-p1) / (q2-q1).cross(p2-p1));\n}\n//n頂点からなる多角形の面積を求める(vectorで頂点は与えられる)\ndouble area(vector<point> p)\n{\n\tdouble ret=0;\n\tfor(int i=0;i<p.size()-1;i++)\n\t{\n\t\tret+=p[i].cross(p[i+1]);\n\t}\n\tret+=p[p.size()-1].cross(p[0]);\n\tret/=2;\n\treturn ret;\n}\n/*\n3点a,b,cをa->b->cと進むとき、\n* a->bで時計方向に折れてb->c (clockwise)\n* a->bで反時計方向に折れてb->c(counter clockwise)\n* a->bで逆を向いてaを通り越してb->c(c--a--b on line)\n* a->bでそのままb->c(a--b--c on line)\n* a->bで逆を向いてb->c(a--c--b on line)\n\nのいずれのパターンかを判定する\n*/\nint ccw(point a,point b,point c)\n{\n\tb=b-a;c=c-a;\n\tif(b.cross(c)>EPS)\n\t\treturn 1; //counter clockwise\n\tif(b.cross(c)<-EPS)\n\t\treturn -1; //clockwise\n\tif(b.dot(c)<-EPS)\n\t\treturn 2; //c--a--b on line\n\tif(b.x*b.x+b.y*b.y < c.x*c.x+c.y*c.y)\n\t\treturn -2; //a--b--c on line\n\treturn 0; //a--c--b on line\n}\n//凸包を求める\nvector<point> convex_hull(vector<point> p)\n{\n\tint n=p.size();\n\tint k=0;\n\tsort(p.begin(),p.end());\n\tvector<point> ch(2*n);\n\t//lower-hull 下側凸包\n\tfor(int i=0;i<n;ch[k++]=p[i++])\n\t{\n\t\twhile(k>=2 && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\t//upper-hull 上側凸包\n\tfor(int i=n-2,t=k+1;i>=0;ch[k++]=p[i--])\n\t{\n\t\twhile(k>=t && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\tch.resize(k-1);\n\treturn ch;\n}\n\nint main()\n{\n\tpoint p1,p2;\n\tdouble a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\tp1=point(a,b);\n\tp2=point(c,d);\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tpoint f;\n\t\tcin>>a>>b;\n\t\tf=point(a,b);\n\t\tpoint x;\n\t\tx=f+(p2-p1).abs()*(p2-p1).nev();\n\t\tif(!on_seg(p1,p2,x))\n\t\t\tx=f+(p2-p1).abs()*(p2-p1).nev();\n\t\tcout<<x.x<<\" \"<<x.y<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<map>\n#include<string>\n#include <math.h>\n#include<algorithm>\n#include<functional>\n#define ll long long\n#define inf  999999999\n#define pa pair<int,int>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nusing namespace std;\n\nclass Point{\n\tpublic:\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y) {}\n\tPoint operator + (Point p) {return Point(x+p.x,y+p.y);}\n\tPoint operator - (Point p) {return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a) {return Point(x*a,y*a);}\n\tPoint operator / (double a) {return Point(x/a,y/a);}\n\tdouble absv() {return sqrt(norm());}\n\tdouble norm() {return x*x+y*y;}\n\tbool operator < (const Point &p) const{\n\t\treturn x != p.x ? x<p.x: y<p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\n\nstruct Segment{\nPoint p1,p2;\n};\n\n\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\n//----------------kokomade temple------------\n\n\nint main(){\nint n;\ndouble a1,a2,a3,a4,a5,a6;\ncin>>a1>>a2>>a3>>a4;\ncin>>n;\nVector b,s;\nPoint p,q;\nb.x=a3-a1,b.y=a4-a2;\nb=b/b.absv();\np.x=a1,p.y=a2;\n\nfor(int i=0;i<n;i++){\ncin>>a5>>a6;\ns.x=a5-a1,s.y=a6-a2;\ndouble l=dot(s,b);\nq=p+b*l;\nprintf(\"%.10f %.10f\\n\",q.x,q.y);\n}\n\n\n\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing Float = double;\nusing Point = complex<Float>;\nstruct Line{ Point a,b; };\nstruct Circle{ Point center; Float r; };\n\nconst Float EPS = 1e-8;\n\ninline bool eq(Float a,Float b) { return abs(a - b) < EPS; }\ninline Float dot(const Point &p1,const Point &p2){ return real(conj(p1) * p2); }\ninline Float cross(const Point &p1,const Point &p2){ return imag(conj(p1) * p2); }\n\nPoint projection(const Line &l,const Point &p){\n\tFloat t = dot(l.b - l.a,p - l.a) / norm(l.b - l.a);\n\treturn l.a + (l.b - l.a) * t;\n}\n\nsigned main(){\n\tFloat x1,y1,x2,y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tLine l = {Point(x1,y1),Point(x2,y2)};\n\tint q;\n\tcin >> q;\n\tfor(int i = 0;i < q;i++){\n\t\tFloat x,y;\n\t\tcin >> x >> y;\n\t\tPoint p = projection(l,Point(x,y));\n\t\tprintf(\"%.15lf %.15lf\\n\",real(p),imag(p));\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\nint main(void)\n{\n    double x_p1,y_p1,x_p2,y_p2;\n    int q;\n    double x_p[1000],y_p[1000];\n    double x[1000],y[1000];\n    \n    cin>>x_p1>>y_p1>>x_p2>>y_p2;\n    cin>>q;\n    for(int i=0;i<q;i++)\n        cin>>x_p[i]>>y_p[i];\n    \n    for(int i=0;i<q;i++)\n    {\n        x[i]=((x_p2-x_p1)*(x_p2-x_p1)*x_p[i]+(y_p2-y_p1)*(y_p2-y_p1)*x_p1+(y_p[i]-y_p1)*(x_p2-x_p1)*(y_p2-y_p1))/((y_p2-y_p1)*(y_p2-y_p1)+(x_p2-x_p1)*(x_p2-x_p1));\n        y[i]=((y_p2-y_p1)*(x[i]-x_p1))/(x_p2-x_p1)+y_p1;\n        printf(\"%.8lf %.8lf\\n\",x[i],y[i]);\n    }\n    \n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define MP make_pair\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n\treturn a < -EPS ? -1 : a > EPS;\n}\n\nstruct P {\n\tdb x, y;\n\tP() {\n\t}\n\tP(db _x, db _y) :\n\t\t\tx(_x), y(_y) {\n\t}\n\tP operator+(P p) {\n\t\treturn P(x + p.x, y + p.y);\n\t}\n\tP operator-(P p)  {\n\t\treturn P(x - p.x, y - p.y);\n\t}\n\tP operator*(db d) {\n\t\treturn P(x * d, y * d);\n\t}\n\tP operator/(db d) {\n\t\treturn P(x / d, y / d);\n\t}\n\tbool operator<(P p) const {\n\t\tint c = sign(x - p.x);\n\t\tif (c)\n\t\t\treturn c == -1;\n\t\treturn sign(y - p.y) == -1;\n\t}\n\tdb dot(P p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb det(P p) {\n\t\treturn x * p.y - y * p.x;\n\t}\n\tdb distTo(P p) { return (*this-p).abs(); }\n\n\tdb alpha() {\n\t\treturn atan2(y, x);\n\t}\n\tvoid read() {\n\t\tcin>>x>>y;\n\t}\n\tdb abs() {\n\t\treturn sqrt(abs());\n\t}\n\tdb abs2() {\n\t\treturn x * x + y * y;\n\t}\n\tP rot90(){\n\t\treturn P(-y,x);\n\t}\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isSS(P p1, P p2, P q1, P q2) {\n\tdb a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n\treturn (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nbool isMiddle(db a, db m, db b) {\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n \nbool isMiddle(P a, P m, P b) {\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nP proj(P p1, P p2, P me) {\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(me - p1) / dir.abs2());\n}\n\ndb nearest(P p1,P p2,P me){\n\tP h = proj(p1,p2,me);\n\tif(isMiddle(p1,h,p2))\n\t\treturn me.distTo(h);\n\treturn min(p1.distTo(me),p2.distTo(me));\n}\n\ndb getrad(P p1,P p2){\n\treturn atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n\tdb A = p1.distTo(p2);\n\tdb B = p2.distTo(p3);\n\tdb C = p3.distTo(p1);\n\treturn sqrtl(A*B*C/(A+B+C));\n}\n\nint main(){\n\tP p1, p2;\n\tp1.read(),p2.read();\n\tint n;cin>>n;\n\trep(i,0,n){\n\t\tP q; q.read();\n\t\tP ret = proj(p1,p2,q);\n\t\tprintf(\"%0.10f %0.10f\\n\",ret.x,ret.y);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n\n#define REP(i,num) for(int i=0;i<(num);++i)\n#define ALL(c) c.begin(),c.end()\n#define PRINTALL(c) for(auto& x:c){cout<<x<<' ';}cout<<endl;\n#define PAIRCOMP(c,comp) [](const pair<ll,ll>& lhs,const pair<ll,ll>& rhs){return lhs.c comp rhs.c;}\n\nusing namespace std;\nusing ll = long long;\n\nconstexpr ll atcoder_mod = 1e9+7;\n\ntemplate<typename T=int>\nT in(){T x; cin >> x; return (x);}\ntemplate<typename T=int,typename C=vector<T>>\nC vecin(int N){C x(N);REP(i,N){x[i]=in<T>();}return move(x);}\n\nvoid vout(){cout << endl;}\ntemplate<typename Head,typename... Tail>\nvoid vout(Head&& h,Tail&&... t){cout << ' ' << h;vout(forward<Tail>(t)...);}\nvoid out(){cout << endl;}\ntemplate<typename Head,typename... Tail>\nvoid out(Head&& h,Tail&&... t){cout << h;vout(forward<Tail>(t)...);}\n\nint main(){\n\t//cin.tie(0);\n\t//ios::sync_with_stdio(false);\n\n\tauto x1=in(),y1=in(),x2=in(),y2=in();\n\tdouble dx = x2-x1,dy = y2-y1;\n\tdouble norm = hypot(dx,dy);\n\tdx/=norm,dy/=norm;\n\tauto Q=in();\n\tREP(i,Q){\n\t\tint x3=in(),y3=in();\n\t\tdouble proj = dx*(x3-x1)+dy*(y3-y1);\n\t\tprintf(\"%.10lf %.10lf\\n\",proj*dx+x1,proj*dy+y1);\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n#include <cassert>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define fs first\n#define sc second\n#define pb push_back\nusing namespace std;\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P,P> L;\t\t//fs->sc\ntypedef vector<P> Pol;\nstruct C{P p;D r;};\nD inf=1e50,eps=1e-10;\n//template<class T> bool eq(T a, T b) { return abs(a-b)<eps;}\n//template<class T> int sig(T a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool eq(D a, D b) { return abs(a-b)<eps;}\nint sig(D a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\ninline D dot(P a, P b) { return real(conj(a)*b);};\ninline D cro(P a, P b) { return imag(conj(a)*b);};\nenum ENCCW{CCW=1, CW=-1, FRONT=2, BACK=-2, ON=0};\t//!!MAEHARAとFRONT,BACKが逆\n//ON優先(including endpoint)\ninline int ccw (P a, P b, P c){\n//\tcout << cro(b-a,c-a) << endl;\n\tif(sig(cro(b-a,c-a))==1) return CCW;\n\tif(sig(cro(b-a,c-a))==-1) return CW;\n\tif(eq(abs(a-c)+abs(c-b),abs(a-b))) return ON;\n\tif(eq(abs(a-b)+abs(b-c),abs(a-c))) return FRONT;\n\tif(eq(abs(c-a)+abs(a-b),abs(c-b))) return BACK;\n\tassert(false);\n}\ninline P proj(P a, P b){\t\t//ベクトルaのbへの射影\n\treturn (dot(a,b)/norm(b))*b;\n}\ninline P perp(L l, P p){\t\t//垂線の足\n\tD t=dot(p-l.fs,l.fs-l.sc)/norm(l.fs-l.sc);\n\treturn l.fs+t*(l.fs-l.sc);\n}\ninline P refl(L l, P p){\n\treturn p+2.0*(perp(l,p)-p);\n}\ninline bool ispal(L a, L b){\n\treturn sig(cro(a.fs-a.sc,b.fs-b.sc))==0;\n}\ninline bool ovLL(L a, L b){\n\treturn ispal(a,b) && sig(cro(a.fs-a.sc,b.fs-a.sc))==0;\n}\ninline bool iLL(L a, L b){\t\t//intersect or overload\n\treturn !ispal(a,b) || ovLL(a,b);\n}\ninline bool iLS(L l, L s){\t\t//intersect(including endpoint) or overload\n\treturn cro(l.sc-l.fs,s.fs-l.fs)*cro(l.sc-l.fs,s.sc-l.fs)<eps;\n}\ninline bool iLP(L l, P p){\t\t//on line\n\treturn sig(cro(l.sc-p,l.fs-p));\n}\ninline bool iSS(L a, L b){\t\t//intersect(including endpoint) or overload\n\treturn ccw(a.fs,a.sc,b.fs)*ccw(a.fs,a.sc,b.sc)<=0 && ccw(b.fs,b.sc,a.fs)*ccw(b.fs,b.sc,a.sc)<=0;\n}\ninline bool iSP(L s, P p){\t\t//intersect(including endpoint) or overload\n\treturn ccw(s.fs,p,s.sc)==ON;\n}\ninline D dLP(L l, P p) { return abs(perp(l,p)-p);}\ninline D dLL(L a, L b) { return iLL(a,b) ? 0 : dLP(a,b.fs);}\ninline D dLS(L l, L s) { return iLS(l,s) ? 0 : min(dLP(l,s.fs),dLP(l,s.sc));}\ninline D dSP(L s, P p) {\n\tP q=perp(s,p);\n\treturn iSP(s,q) ? abs(p-q) : min(abs(p-s.fs),abs(p-s.sc));\n}\ninline D dSS(L a, L b) {\n\tif(iSS(a,b)) return 0;\n\treturn min(min(dSP(a,b.fs),dSP(a,b.sc)),min(dSP(b,a.fs),dSP(b,a.sc)));\n}\ninline P intLL(L a, L b) {\t//intersection\n\tassert(!ispal(a,b));\n\tD t=cro(a.sc-a.fs,a.sc-b.fs)/cro(a.sc-a.fs,b.sc-b.fs);\n\treturn b.fs+t*(b.sc-b.fs);\n}\nenum ENICP{INC=1,ONC=0,OUTC=-1};\ninline int iCP(C c, P p){\n\tD d=abs(p-c.p);\n\treturn eq(d,c.r) ? ONC : (d<c.r ? INC : OUTC);\n}\ninline int iCL(C c, L l){\t\t//num of intersection(s)\n\tD d=dLP(l,c.p);\n\treturn eq(d,c.r) ? 1 : (d<c.r ? 2 : 0);\n}\n//inline int iCS\n//inline int iCC(C a, C b){\n\n/*inline P intCL1(C c, L l){\t\t//iCL=1\n\tassert(iCL(c,l)==1);\n}\ninline L intCL2(C c, L l){\t\t//iCL=2\n\tassert(iCL(c,l)==2);\n}*/\nD aTri(P a, P b, P c){ return cro(b-a,c-a)/2;}\nD aPol(Pol p){\t\t\t//点集合はCCWに与える\n\tint n=p.size();\n\tD ret=0;\n\trep(i,n) ret+=cro(p[i],p[(i+1)%n])/2;\n\treturn ret;\n}\nP gPol(Pol p){\t\t\t//多角形内部が一様な重さを持つときの重心\n\tint n=p.size();\n\tP g;\n\tD s=aPol(p);\n\tassert(s>eps);\n\trep(i,n){\n\t\tD ds=cro(p[i],p[(i+1)%n])/2;\n\t\tg+=ds/3*(p[i]+p[(i+1)%n]);\n\t}\n\treturn g/s;\n}\nenum ENCONT{INP=1,ONP=0,OUTP=-1};\nint contain(Pol pol, P p){\n\tbool in=false;\n\trep(i,pol.size()){\n\t\tP a=pol[i],b=pol[(i+1)%pol.size()];\n\t\tif(ccw(a,b,p)==ON) return ONP;\n\t\tif(!iLS(L(p,p+1.),L(a,b))) continue;\n\t\tif(ovLL(L(p,p+1.),L(a,b))){\n\t\t\tif(sig(max(real(a),real(b))-real(p))>=0) in=!in;\n\t\t\tcontinue;\n\t\t}\n\t\tif(sig(real(intLL(L(p,p+1.),L(a,b)))-real(p))>=0) in=!in;\n\t}\n\treturn in ? INP : OUTP;\n}\ninline D heron(D a, D b, D c){\n\tdouble s=(a+b+c)/2;\n\tif(s-a<eps || s-b<eps || s-c<eps) return 0;\t\t//S=0 || 三角形できない\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tD x0,y0,x1,y1;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tL a=L(P(x0,y0),P(x1,y1));\n\tint q;\n\tscanf(\"%d\",&q);\n\trep(i,q){\n\t\tD x,y;\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t\tP p=perp(a,P(x,y));\n\t\tprintf(\"%.10lf %.10lf\\n\",p.real(),p.imag());\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#define Re real()\n#define Im imag()\nusing namespace std;\ntypedef complex<double> Point;\ntypedef Point Vector;\n\ndouble dot(const Point& a, const Point& b)\n{\n    return (conj(a)*b).Re;\n}\n\nint main()\n{\n    int vol;\n    double x1,x2,y1,y2;\n    while(~scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2))\n    {\n        Point p0 = Point(x1,y1),p1 = Point(x2,y2);\n        Vector v0 = p1 - p0;\n        scanf(\"%d\",&vol);\n        while(vol--)\n        {\n            double tx,ty;\n            scanf(\"%lf%lf\",&tx,&ty);\n            Point Pn = Point(tx,ty);\n            Vector v1 = Pn - p0;\n            Point Pt = dot(v0,v1)*v0/norm(v0) + p0;\n            printf(\"%.10f %.10f\\n\",Pt.Re,Pt.Im);\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(int i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(ary),key)-begin(ary)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n#define popcount(n) (__builtin_popcountll(n))\n\nusing namespace std;\n\ntemplate<class T>bool chmax(T &a, const T &b) { return (a<b)?(a=b,1):0;}\ntemplate<class T>bool chmin(T &a, const T &b) { return (b<a)?(a=b,1):0;}\n\nusing ll=long long;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nconst P O=0.0L;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P p;R c;};\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline int sdot(P o,P a,P b){return sgn(dot(o,a,b));}\ninline int sdet(P o,P a,P b){return sgn(det(o,a,b));}\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/(l.t-l.s)); return (1-u)*l.s+u*l.t;}\n\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\nint main(void){\n\tP a,b,p;\n\tint n;\n\tcin >> a >> b >> n;\n\tL l={a,b};\n\tcout.precision(20);\n\trep(i,n){\n\t\tcin >> p;\n\t\tP ans=proj(l,p);\n\t\tcout << fixed << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iomanip>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n  double x, y;\n  Point() {};\n  Point(double x, double y): x(x), y(y) {}\n\n  Point operator + (const Point &p) { return Point(x + p.x, y + p.y); }\n  Point operator - (const Point &p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double d) { return Point(d * x, d * y); }\n  Point operator / (double d) { return Point(d / x, d / y); }\n\n  bool operator < (const Point &p) const {\n    return (x == p.x ? y < p.y : x < p.x);\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n  friend ostream& operator << (ostream &os, Point &p) {\n    return os << \"Point(\" << p.x << \", \" << p.y << \")\";\n  }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n  Point p1, p2;  \n};\n\ndouble cross (Point p1, Point p2) {\n  return p1.x * p2.y - p1.y * p2.x;\n}\n\ndouble dot(Vector v1, Vector v2) {\n  return v1.x * v2.x + v1.y * v2.y;\n}\n\ndouble norm(Point p) {\n  return p.x * p.x + p.y * p.y;\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n  Vector v = s.p2 - s.p1;\n  double r = dot(p - s.p1, v) / norm(v);\n  return s.p1 + v * r;\n}\n\nint main() {\n  int x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n\n  Segment s;\n  s.p1 = Point(x1, y1);\n  s.p2 = Point(x2, y2);\n\n  int n; cin >> n;\n\n  while (n--) {\n    int x, y; cin >> x >> y;\n    Point p = project(s, Point(x, y));\n\n    cout << fixed << setprecision(10) << p.x << ' ' << p.y << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n \nusing namespace std;\n\nclass Point {\n  public:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() {return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n \ntypedef Point Vector;\n\ntypedef struct Segment{\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n  return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n  return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n  return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2){\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p-s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nint main(){\n  Point p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n\n  Segment s;\n  s.p1 = p1;\n  s.p2 = p2;\n\n  int q;\n  scanf(\" %d\", &q);\n  for(int i = 0; i < q; ++i){\n    Point p;\n    cin >> p.x >> p.y;\n    Point ans = project(s, p);\n    printf(\"%.10lf %.10lf\\n\", ans.x, ans.y);\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <complex>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) {\n  return fabs(b - a) < EPS;\n}\n\nusing Point = complex<double>;\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\nnamespace std {\nbool operator<(const Point &a, const Point &b) {\n  return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n}\n} // namespace std\n\ndouble cross(const Point &a, const Point &b) {\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(const Point &a, const Point &b) {\n  return a.real() * b.real() + a.imag() * b.imag();\n}\n\ndouble RadianToDegree(double r) {\n  return (r * 180.0 / acos(-1));\n}\n\ndouble DegreeToRadian(double d) {\n  return (d * acos(-1) / 180.0);\n}\n\ndouble GetAngle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if (alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nstruct Line {\n  Point a, b;\n\n  Line(){};\n  Line(Point a, Point b) : a(a), b(b){};\n\n  // Ax + By = C\n  Line(double A, double B, double C) {\n    if (eq(A, 0)) {\n      a = Point(0, C / B);\n      b = Point(1, C / B);\n    } else if (eq(B, 0)) {\n      a = Point(C / A, 0);\n      b = Point(C / A, 1);\n    } else {\n      a = Point(0, C / B);\n      b = Point(C / A, 0);\n    }\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment {\n  Point a, b;\n\n  Segment(){};\n  Segment(Point a, Point b) : a(a), b(b){};\n\n  friend ostream &operator<<(ostream &os, Segment &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Segment &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle(){};\n\n  Circle(Point p, double r) : p(p), r(r){};\n};\n\nusing Polygon = vector<Point>;\nusing Segments = vector<Segment>;\nusing Lines = vector<Line>;\nusing Circles = vector<Circle>;\nusing PointPoint = pair<Point, Point>;\n\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if (cross(b, c) > EPS) return +1;\n  if (cross(b, c) < -EPS) return -1;\n  if (dot(b, c) < 0) return +2;\n  if (norm(b) < norm(c)) return -2;\n  return 0;\n}\n\nbool Parallel(const Line &a, const Line &b) {\n  return abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n\nbool Orthogonal(const Line &a, const Line &b) {\n  return abs(dot(a.a - a.b, b.a - b.b)) < EPS;\n}\n\nPoint Projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint Projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint Reflection(const Line &l, const Point &p) {\n  return p + (Projection(l, p) - p) * 2.0;\n}\n\nint main() {\n  Point p;\n  Line l;\n  cin >> l;\n  // cerr << \"Line : \" << l << endl;\n\n  int q;\n  cin >> q;\n  while (q--) {\n    Point p;\n    cin >> p;\n    // cerr << \"point : \" << p << endl;\n    Point ans = Projection(l, p);\n    cout << ans.real() << \" \" << ans.imag() << endl;\n  }\n}\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\ndouble Distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\ndouble Distance(const Line &l, const Point &p) {\n  return abs(p - Projection(l, p));\n}\n\nbool Intersect(const Line &l, const Line &m);\ndouble Distance(const Line &l, const Line &m) {\n  return Intersect(l, m) ? 0 : Distance(l, m.a);\n}\n\nbool Intersect(const Segment &s, const Point &p);\ndouble Distance(const Segment &s, const Point &p) {\n  Point r = Projection(s, p);\n  if (Intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\nbool Intersect(const Segment &s, const Segment &t);\ndouble Distance(const Segment &a, const Segment &b) {\n  if (Intersect(a, b)) return 0;\n  return min(min(Distance(a, b.a), Distance(a, b.b)), min(Distance(b, a.a), Distance(b, a.b)));\n}\n\nbool Intersect(const Line &l, const Segment &s);\ndouble Distance(const Line &l, const Segment &s) {\n  if (Intersect(l, s)) return 0;\n  return min(Distance(l, s.a), Distance(l, s.b));\n}\n\nbool Intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool Intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool Intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool Intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nbool Intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\ndouble Distance(const Line &l, const Point &p);\nbool Intersect(const Circle &c, const Line &l) {\n  return Distance(l, c.p) <= c.r + EPS;\n}\n\nbool Intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\nint Intersect(const Circle &c, const Segment &l) {\n  if (norm(Projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  const double d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if (d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = Projection(l, c.p);\n  if (dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\nPoint Crosspoint(const Line &l, const Line &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPoint Crosspoint(const Segment &l, const Segment &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPointPoint Crosspoint(const Circle &c, const Line l) {\n  Point hp = Projection(l, c.p), h = hp - c.p;\n  const double d2 = norm(h);\n  Point v = (l.b - l.a) * sqrt(c.r * c.r - d2) / abs(l.b - l.a);\n  return PointPoint(hp - v, hp + v);\n}\n\nPointPoint Crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if (Intersect(c, l) == 2) return Crosspoint(c, aa);\n  PointPoint ret = Crosspoint(c, aa);\n  if (dot(l.a - ret.first, l.b - ret.first) < 0)\n    ret.second = ret.first;\n  else\n    ret.first = ret.second;\n  return ret;\n}\n\nPointPoint Crosspoint(const Circle &c1, const Circle &c2) {\n  double d = abs(c1.p - c2.p);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return (PointPoint(p1, p2));\n}\n\nbool IsConvex(const Polygon &p) {\n  int n = p.size();\n  for (int i = 0; i < n; i++) {\n    if (ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\nPolygon Convex_Hull(Polygon &p) {\n  int n = p.size(), k = 0;\n  if (n >= 3) {\n    sort(p.begin(), p.end());\n    vector<Point> ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = p[i++]) {\n      while (k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n      while (k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    ch.resize(k - 1);\n    return ch;\n  } else {\n    return p;\n  }\n}\n\nenum { OUT, ON, IN };\nint Contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for (int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if (a.imag() > b.imag()) swap(a, b);\n    if (a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\nbool MergeIfAble(Segment &s1, Segment s2) {\n  if (abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n  if (ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n  if (ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n  s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n  return true;\n}\n\nvoid MergeSegments(vector<Segment> &segs) {\n  for (int i = 0; i < segs.size(); i++) {\n    if (segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for (int i = 0; i < segs.size(); i++) {\n    for (int j = i + 1; j < segs.size(); j++) {\n      if (MergeIfAble(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\nvector<vector<int>> SegmentArrangement(vector<Segment> &segs, vector<Point> &ps) {\n  vector<vector<int>> g;\n  const int N = (int)segs.size();\n  for (int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for (int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if (cross(p1, p2) == 0) continue;\n      if (Intersect(segs[i], segs[j])) {\n        ps.emplace_back(Crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  const int M = (int)ps.size();\n  g.resize(M);\n  for (int i = 0; i < N; i++) {\n    vector<int> vec;\n    for (int j = 0; j < M; j++) {\n      if (Intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for (int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\nPolygon ConvexCut(Polygon &U, Line l) {\n  Polygon ret;\n  for (int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if (ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if (ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(Crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\ndouble Area2(const Polygon &p) {\n  double A = 0;\n  for (int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\ndouble Convex_Diameter(Polygon &p) {\n  int n = p.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; i++) {\n    if (p[i].imag() > p[is].imag()) is = i;\n    if (p[i].imag() < p[js].imag()) js = i;\n  }\n  double maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) >= 0) {\n      j = (j + 1) % n;\n    } else {\n      i = (i + 1) % n;\n    }\n    if (norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxdis;\n}\n\n// int main() {}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <list>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <map>\n#include <set>\n#include <bitset>\n#include <tuple>\n#include <cassert>\n#include <exception>\n#include <iomanip>\n// #include \"./競プロ用テンプレート/Geometry.h\"\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<ll,ll> P;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<string> vs;\ntypedef vector<P> vp;\n#define rep(i,a,n) for(ll i = (a);i < (n);i++)\n#define per(i,a,n) for(ll i = (a);i > (n);i--)\n#define lep(i,a,n) for(ll i = (a);i <= (n);i++)\n#define pel(i,a,n) for(ll i = (a);i >= (n);i--)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define pb push_back\n#define mp make_pair\n#define all(c) (c).begin(),(c).end()\n#define sz size()\n#define print(X) cout << (X) << endl\nstatic const int INF = 1e+9+7;\nll n,m,l;\nstring s,t;\nint d[200010],dp[1010][1010];\ndouble w[1000],v[1000];\ndouble box[200010];\n\n// #define EPS (1e-10)\n// #define equals(a,b) (fabs(a,b) < EPS)\n\n// class Point{\n// public:\n//   double x,y;\n\n//   Point(double x = 0,double y = 0): x(x),y(y) {}\n\n//   Point operator + (const Point &p){ return Point(x+p.x , y+p.y); }\n//   Point operator - (const Point &p){ return Point(x-p.x , y-p.y); }\n//   Point operator * (double a){ return Point(x * a , y * a); }\n//   Point operator / (double a){ return Point(x / a , y / a); }\n\n//   double abs(){ return sqrt(norm()); }\n//   double norm(){ return x * x + y * y; }\n\n//   bool operator < (const Point &p) const{ return (x != p.x) ? x < p.x : y < p.y; }\n//   bool operator == (const Point &p) const{ return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS); }\n//   friend istream& operator >> (istream &is,Point &p){ return (is >> p.x >> p.y); }\n//   friend ostream& operator << (ostream &os,Point &p){ return (os << p.x << \" \" << p.y); }\n// };\n\n// class Circle{\n// public:\n//   Point c;\n//   double r;\n//   Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n//   friend istream& operator >> (istream &is,Circle c){return (is >> c.c >> c.r);}\n//   friend ostream& operator << (ostream &os,Circle c){return (os << c.c << \" \" << c.r);}\n// };\n\n// typedef Point Vector;\n\n// double norm(Point p){\n//   return p.x * p.x + p.y * p.y;\n// }\n\n// double abs(Point p){\n//   return sqrt(norm(p));\n// }\n\n// using namespace Geometry;\n\nnamespace Geometry{\n  #define EPS (1e-10)\n  #define equals(a,b) (fabs((a) - (b)) < EPS)\n  #define BOTTOM 0\n  #define LEFT 1\n  #define RIGHT 2\n  #define TOP 3\n  #define gprint(X) cout << fixed << setprecision(10) << (X) << endl\n  #define gprints(X,Y) cout << fixed << setprecision(10) << (X) << \" \" << (Y) << endl\n  static const int COUNTER_CLOCKWISE = 1;\n  static const int CLOCKWISE = -1;\n  static const int ONLINE_BACK = 2;\n  static const int ONLINE_FRONT = -2;\n  static const int ON_SEGMENT = 0;\n  \n  class Point{\n  public:\n    double x,y;\n    Point(double x = 0,double y = 0): x(x),y(y){}\n    Point operator + (Point p){ return Point(x + p.x , y + p.y); }\n    Point operator - (Point p){ return Point(x - p.x , y - p.y); }\n    Point operator * (double a){ return Point(a * x , a * y); }\n    Point operator / (double a){ return Point(x / a , y / a); }\n    bool operator < (const Point &p) const{ return x != p.x ? x < p.x : y < p.y; }\n    bool operator == (const Point &p) const{ return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS); }\n\n    double abs(){ return sqrt(norm()); }\n    double norm(){ return x * x + y * y; }\n    friend ostream& operator << (ostream &os,Point &p){ return os << p.x << \" \" << p.y; }\n    friend istream& operator >> (istream &is,Point &p){ return is >> p.x >> p.y; }\n  };\n\n  struct Segment{\n    Point p1,p2;\n    Segment(){};\n    Segment(Point p1,Point p2): p1(p1) , p2(p2){};\n    friend ostream& operator << (ostream &os,Segment &seg){ return os << seg.p1 << \" \" << seg.p2; }\n    friend istream& operator >> (istream &is,Segment &seg){ return is >> seg.p1 >> seg.p2; }\n  };\n\n  class Circle{\n  public:\n    Point c;\n    double r;\n    Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n    friend ostream& operator << (ostream &os,Circle &c){ return os << c.c << \" \" << c.r; }\n    friend istream& operator >> (istream &is,Circle &c){ return is >> c.c >> c.r; }\n  };\n\n  typedef Point Vector;\n  typedef Segment Line;\n  typedef vector<Point> Polygon;\n\n  double norm(Vector a){ return  a.x * a.x + a.y * a.y; }\n  double abs(Vector a){ return sqrt(norm(a)); }\n  double dot(Vector a,Vector b){ return a.x * b.x + a.y * b.y; }\n  double cross(Vector a,Vector b){ return a.x * b.y - a.y * b.x; }\n  bool Orthogonal(Vector a,Vector b){ return equals(dot(a,b),0.0); }\n  bool Orthogonal(Point a1,Point a2,Point b1,Point b2){ return Orthogonal(a1 - a2,b1 - b2); }\n  bool Orthogonal(Segment s1,Segment s2){ return equals(dot(s1.p2 - s1.p1,s2.p2 - s2.p1) , 0.0); }\n  bool Parallel(Vector a,Vector b){ return equals(cross(a,b),0.0); }\n  bool Parallel(Point a1,Point a2,Point b1,Point b2){ return Parallel(a1 - a2 , b1 - b2); }\n  bool Parallel(Segment s1,Segment s2){ return equals(cross(s1.p2 - s1.p1 , s2.p2 - s2.p1),0.0); }\n\n  Point project(Segment s,Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1 , base) / norm(base);\n    return s.p1 + base * r;\n  }\n\n  Point reflect(Segment s,Point p){\n    return p + (project(s,p) - p) * 2.0;\n  }\n\n  int ccw(Point p0,Point p1,Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n    if(cross(a,b) < -EPS)return CLOCKWISE;\n    if(dot(a,b) < -EPS)return ONLINE_BACK;\n    if(a.norm() < b.norm())return ONLINE_FRONT;\n    return ON_SEGMENT;\n  }\n\n  bool intersect(Point p1,Point p2,Point p3,Point p4){\n    return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 && \n            ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0);\n  }\n  bool intersect(Segment s1,Segment s2){ return intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2); }\n\n  double getDistance(Vector a,Vector b){ return abs(a - b); }\n  double getDistanceLP(Line l,Point p){ return abs(cross(l.p2 - l.p1 , p - l.p1) / abs(l.p2 - l.p1)); }\n  double getDistanceSP(Segment s,Point p){\n    if(dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n    if(dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n    return getDistanceLP(s,p);\n  }\n  double getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2))return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n  }\n\n  Point getCrossPoint(Segment s1,Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base,s1.p1 - s2.p1));\n    double d2 = abs(cross(base,s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n  }\n  pair<Point,Point> getCrossPoints(Circle c,Line l){\n    // assert(intersect(c,l));\n    Vector pr = project(l,c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base , pr - e * base);\n  }\n\n  double arg(Vector p){ return atan2(p.y,p.x);}\n  Vector polar(double a,double r){ return Point(cos(r) * a, sin(r) * a); }\n\n  pair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n    // assert(intersect(c1,c2));\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r,t + a),c1.c + polar(c1.r,t - a));\n  }\n  \n  int contains(Polygon g,Point p){\n    int n = g.size();\n    bool x = false;\n    for(int i = 0;i < n;i++){\n      Point a = g[i] - p, b = g[(i + 1) % n] - p;\n      if(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n      if(a.y > b.y)swap(a,b);\n      if(a.y < EPS && EPS < b.y && cross(a,b) > EPS)x = !x;\n    }\n    return (x ? 2 : 0);\n  }\n\n  Polygon andrewScan(Polygon s){\n    Polygon u,l;\n    if(s.size() < 3)return s;\n    sort(s.begin(),s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n\n    l.push_back(s[s.size() - 1]);\n    l.push_back(s[s.size() - 2]);\n\n    for(int i = 2;i < s.size();i++){\n      for(int n = u.size();n >= 2 && ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n        u.pop_back();\n      }\n      u.push_back(s[i]);\n    }\n\n    for(int i = s.size() - 3; i >= 0;i--){\n      for(int n = l.size();n >= 2 && ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n        l.pop_back();\n      }\n      l.push_back(s[i]);\n    }\n    reverse(l.begin(),l.end());\n    for(int i = u.size() - 2;i >= 1;i--)l.push_back(u[i]);\n    return l;\n  }\n\n  class EndPoint{\n  public:\n    Point p;\n    int seg,st;\n    EndPoint(){}\n    EndPoint(Point p,int seg,int st): p(p),seg(seg),st(st){}\n\n    bool operator < (const EndPoint &ep) const{\n      if(p.y == ep.p.y){\n        return st < ep.st;\n      }else{\n        return p.y < ep.p.y;\n      }\n    }\n  };\n\n  EndPoint EP[2 * 100000];\n\n  int manhattanIntersection(vector<Segment> S){\n    int n = S.size();\n    for(int i = 0,k = 0;i < n;i++){\n      if(S[i].p1.y == S[i].p2.y){\n        if(S[i].p1.x > S[i].p2.x)swap(S[i].p1,S[i].p2);\n      }else if(S[i].p1.y > S[i].p2.y){\n        swap(S[i].p1,S[i].p2);\n      }\n\n      if(S[i].p1.y == S[i].p2.y){\n        EP[k++] = EndPoint(S[i].p1,i,LEFT);\n        EP[k++] = EndPoint(S[i].p2,i,RIGHT);\n      }else{\n        EP[k++] = EndPoint(S[i].p1,i,BOTTOM);\n        EP[k++] = EndPoint(S[i].p2,i,TOP);\n      }\n    }\n\n    sort(EP,EP + (2 * n));\n\n    set<int> BT;\n    BT.insert(1000000001);\n    int cnt = 0;\n    for(int i = 0;i < 2 * n;i++){\n      if(EP[i].st == TOP){\n        BT.erase(EP[i].p.x);\n      }else if(EP[i].st == BOTTOM){\n        BT.insert(EP[i].p.x);\n      }else if(EP[i].st == LEFT){\n        set<int>::iterator b = lower_bound(BT.begin(),BT.end(),S[EP[i].seg].p1.x);\n        set<int>::iterator e = upper_bound(BT.begin(),BT.end(),S[EP[i].seg].p2.x);\n        cnt += distance(b,e);\n      }\n    }\n    return cnt;\n  }\n};\n\nusing namespace Geometry;\n\n/*\nPoint is OK.\nSegment is OK.\nCircle is OK.\n\nReflect is OK.\nCCW is OK.\n\n*/\n\nint main(){\n  Segment sg;\n  Point pnt,ans;\n  cin >> sg;\n  cin >> n;\n  rep(i,0,n){\n    cin >> pnt;\n    ans = project(sg,pnt);\n    gprint(ans);\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <stdio.h>\n#define EPS 0.00000001\nusing namespace std;\n\nint main(void){\n\tdouble x1,y1,x2,y2;\n\tdouble x0,y0;\n\tdouble dx,dy;\n\tdouble m;\n\tdouble X,Y;\n\tint q;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tdx=x1-x2;\n\tdy=y1-y2;\n\tcin >> q;\n\twhile(q--){\n\t\tcin >> x0 >> y0;\n\t\tX=(dx*dx*x0+dy*dy*x1-dx*dy*(y1-y0))/(dx*dx+dy*dy);\n\t\tif(!(-EPS<=dx && dx<=EPS)){\n\t\t\tY=dy/dx*(X-x1)+y1;\n\t\t}else{\n\t\t\tY=y0;\n\t\t}\n\t\tprintf(\"%.8lf %.8lf\\n\",X,Y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ninline int gi()\n{\n\tchar c = getchar(); bool f = 1;\n\twhile (c != '-' && (c < '0' || c > '9')) c = getchar();\n\tif (c == '-') c = getchar(), f = 0;\n\tint sum = 0;\n\twhile ('0' <= c && c <= '9') sum = sum * 10 + c - 48, c = getchar();\n\treturn f ? sum : -sum;\n}\n\nconst int maxn = 200005;\nconst double eps = 1e-12;\n\nint n;\n\nstruct Vector\n{\n\tdouble x, y;\n\tVector() {x = y = 0;}\n\tVector(int _x, int _y) {x = _x; y = _y;}\n} O, p1, p2;\n\nVector operator + (Vector a, Vector b) {return Vector(a.x + b.x, a.y + b.y);}\nVector operator - (Vector a, Vector b) {return Vector(a.x - b.x, a.y - b.y);}\n\ndouble dot(Vector a, Vector b)\n{\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n\treturn a.x * b.y - a.y * b.x;\n}\n\ndouble length(Vector a)\n{\n\treturn sqrt(dot(a, a));\n}\n\nint main()\n{\n\tO.x = gi(); O.y = gi(); p1.x = gi(); p1.y = gi(); p1 = p1 - O;\n\tdouble Len = length(p1);\n\tint q = gi();\n\twhile (q--) {\n\t\tp2.x = gi(); p2.y = gi(); p2 = p2 - O;\n\t\tdouble len = dot(p1, p2) / length(p1), x = p1.x * len / Len, y = p1.y * len / Len;\n\t\tprintf(\"%.10lf %.10lf\\n\", x + O.x, y + O.y);\n\t}\n\t\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs( (a)-(b) ) < EPS)\n\nclass Point{\n\npublic:\n  double x,y;\n  \n  Point(double x=0,double y=0): x(x),y(y) {}\n  \n  Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n  Point operator * (double a) { return Point(a*x,a*y); }\n  Point operator / (double a) { return Point(x/a,y/a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x + y*y; }\n  \n  bool operator < (const Point &p) const{\n    return x != p.x ? x<p.x : y<p.y;\n  }\n  \n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n  \n};\ntypedef Point Vector;\n\ndouble dot(Vector a,Vector b){\n  return a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x*b.y - a.y*b.x;\n}\n\nPoint project(Point p1,Point p2,Point p){\n  Vector base = p2-p1;\n  double r = dot(p-p1,base) / base.norm();\n  return p1 + base * r;\n}\n\nint main(){\n  int q;\n  double x1,y1,x2,y2,x,y;\n  Point p1,p2,p,pro;\n  \n  scanf(\"%lf %lf %lf %lf %d\",&x1,&y1,&x2,&y2,&q);\n  p1 = Point(x1,y1);\n  p2 = Point(x2,y2);\n  \n  while(q--){\n    scanf(\"%lf %lf\",&x,&y);\n    p = Point(x,y);\n    pro = project(p1,p2,p);\n    printf(\"%.10lf %.10lf\\n\",pro.x,pro.y);\n  }\n\n  return(0);\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main(){\n\n\tdouble p0x,p0y,p1x,p1y,p2x,p2y,tx,ty;\n\tint q;\n\tdouble a01,a2t,b01,b2t;\n\n\tcin>>p0x>>p0y>>p1x>>p1y;\n\n\tcin>>q;\n\n\tfor(int i=0;i<q;i++){\n\t\tcin>>p2x>>p2y;\n\t\tif(p0x-p1x!=0) a01=(p0y-p1y)/(p0x-p1x);\n\t\telse a01=0;\n\t\tif(a01!=0) a2t=-1/a01;\n\t\telse a2t=0;\n\t\tb2t=p2y-a2t*p2x;\n\t\tb01=p0y-a01*p0x;\n\t\tif(a01-a2t!=0) tx=(b2t-b01)/(a01-a2t);\n\t\telse tx=0;\n\t\tty=a01*tx+b01;\n\t\tif(p0x==p1x) ty=p2y;\n\t\tif(p0y==p1y) tx=p2x;\n\t\tprintf(\"%.10f %.10f\\n\",tx,ty);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<cstdio>\n#include<algorithm>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<cmath>\n#include<utility>\n#include<set>\n#include<complex>\n#define vi vector<int>\n#define vvi vector<vector<int> >\n#define ll long long int\n#define ld long double\n#define INF 1e+8\n#define EPS 0.0000000001\n#define rep(i,n) for(int i=0;i<n;i++)\n#define CC puts(\"-------ok--------\");\n#define all(in) in.begin(), in.end\nusing namespace std;\ntypedef pair<int, int>PA;\n/*?????????????????????*/\ntypedef complex<double>P;\ndouble dot(P a, P b){ return real(conj(a)*b);}\ndouble cross(P a,P b){return imag(conj(a)*b);}\nstruct L: public vector<P>{\n    L(const P &a,const P &b){\n    push_back(a); push_back(b);\n    }// line\n};\nstruct C{\n    P c; double r;\n    C(const P &c, double r) : c(c),r(r){}    // circle\n};\n/*complex ?????????*/\nnamespace std {\n    bool operator < (const P& a, const P& b) {\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n        //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b);\n    }\n    bool operator == (const P& a, const P& b) {\n        return a.real()==b.real()&&a.imag()==b.imag();\n    }\n}\n/*????¨?????????????????¨???????????????????*/\nint ccw(P a, P b, P c) {\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\ndouble point_distance(double x1,double y1,double x2,double y2){\n    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\n}\ndouble pi = acos(-1.0);\nint main(){\n    double ax,ay,bx,by;\n    cin>>ax>>ay>>bx>>by;\n    P p1(ax,ay);P p2(bx,by);\n    int n;cin>>n;\n    rep(i,n){\n        double tx,ty;cin>>tx>>ty;\n        P t(tx,ty);\n        P ans=dot((t-p1),(p2-p1))/norm(p2-p1)*(p2-p1);\n        ans=ans+p1;\n        printf(\"%.8f %.8f\\n\",ans.real(),ans.imag());\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef double Real;\nconstexpr Real EPS = 1e-8;\n\n//???????????£\nint sign(Real d) {\n    if (d>EPS) { return 1; }\n    if (d<-EPS) { return -1; }\n    return 0;\n}\n\n/*\n * ???????§?????????????\n */\nstruct Point {\n    Real x,y;\n\n    //Point p(2,3)????¨±???\n    explicit Point(Real x_=0, Real y_=0): x(x_), y(y_) {} //explicit?????£??\\Point p = x;????¨±????????????????????????\n\n    Point operator+(const Point &p) const {\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator-(const Point &p) const {\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator*(Real s) const {\n        return Point(x*s,y*s);\n    }\n    Point operator/(Real s) const {\n        return Point(x/s,y/s);\n    }\n    bool operator<(const Point &p) const {\n        return sign(x - p.x) == -1 || (sign(x - p.x)==0 && sign(y - p.y)==-1);\n    }\n    bool operator==(const Point &p) const { return sign(x-p.x) == 0 && sign(y - p.y)==0; }\n\n};\n\n//Point??????????????°????????¬??????\nistream &operator>>(istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\nostream &operator<<(ostream &os, const Point &p) {\n    //return os << '(' << p.x << \", \" << p.y << ')';\n    return os << p.x << \" \" << p.y;\n}\n\nstruct Line : public array<Point, 2> { //??????\n    Line(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Segment : public array<Point, 2> { //??´???\n    Segment(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\n\n/*\n * Calc\n */\n//???????¨??????????90??????\nPoint rotate90(const Point &p) { return Point(-p.y,p.x); }\n\n//???????¨???????????????±???\nPoint rotate(const Point &p, Real theta) {\n    const Real s = sin(theta), c = cos(theta);\n    return Point(c*p.x - s*p.y, s*p.x + c*p.y);\n}\n\nReal angle(const Point &p) { return atan2(p.y, p.x); } //[X???]??¨[???????????????P??????]????§????\nReal norm(const Point &p) { return p.x * p.x + p.y * p.y; } //??????0????????????P?????§????????¢?????????\nReal abs(const Point &p) { return sqrt(norm(p)); } //??????0????????????P?????§????????¢\n\nReal dot(const Point &a, const Point &b) { return a.x * b.x + a.y * b.y; } //??????(?????????????????£?????????)\nReal cross(const Point &a, const Point &b) { return a.x * b.y - a.y * b.x; } //??????\n\n/*\n * ?°???±??????\n * http://mathtrain.jp/projection\n */\ninline Point project(Line &l, Point &p) {\n    const Point a = p - l[0];\n    const Point b = l[1] - l[0];\n    return l[0] + b * (dot(a,b) / norm(b));\n}\n\nint main() {\n    cout.setf(ios::fixed);\n    cout.precision(10); //?°???°???10?????¨???\n    int x0, x1, y0, y1;\n    int q;\n    int x,y;\n\n    cin >> x0 >> y0 >> x1 >> y1;\n    Point p0(x0,y0), p1(x1,y1);\n    Line l(p0, p1);\n    cin >> q;\n    for(int i=0; i<q; i++) {\n        cin >> x >> y;\n        Point p(x,y);\n        Point v = project(l, p);\n        cout << v << endl;\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<algorithm>\n#include<vector>\n#include<string>\n#include<sstream>\n#include<iomanip>\n#include<utility>\n#include<cmath>\n#include<set>\nusing namespace std;\ntypedef long long int ll;\nconst double EPS=1e-10;\n\nbool equals(double a,double b)\n{\n\treturn a>b?a-b<EPS:b-a<EPS;\n}\n\nclass Point\n{\npublic:\n\tdouble x;\n\tdouble y;\n\tPoint(double inx=0.0,double iny=0.0):x(inx),y(iny){}\n\tPoint operator+(const Point &p){return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p){return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k){return Point(x*k,y*k);}\n\tPoint operator/(const double k){return Point(x/k,y/k);}\n\tPoint operator=(const Point &p){x=p.x;y=p.y;return *this;}\n\tbool operator<(const Point &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tbool operator==(const Point &p)const{return equals(x,p.x)&&equals(y,p.y);}\n\tdouble norm()\n\t{\n\t\treturn x*x+y*y;\n\t}\n\tdouble abs()\n\t{\n\t\treturn sqrt(norm());\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment\n{\npublic:\n\tPoint p1;\n\tPoint p2;\n\tVector getvector()\n\t{\n\t\treturn p2-p1;\n\t}\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point inc=Point(),double inr=0.0):c(inc),r(inr){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a,Vector b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\nconst int counter_clockwise=1;\nconst int clockwise=-1;\nconst int on_segment=0;\nconst int online_back=2;\nconst int online_front=-2;\n\ndouble norm(Vector a)\n{\n\treturn a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a)\n{\n\treturn sqrt(norm(a));\n}\n\nbool isorthogonal(Vector a,Vector b)\n{\n\treturn equals(dot(a,b),0.0);\n}\n\nbool isorthogonal(Point a1,Point a2,Point b1,Point b2)\n{\n\treturn isorthogonal(a1-a2,b1-b2);\n}\n\nbool isorthogonal(Segment s1,Segment s2)\n{\n\treturn equals(dot(s1.getvector(),s2.getvector()),0.0);\n}\n\nbool isparallel(Vector a,Vector b)\n{\n\treturn equals(cross(a,b),0.0);\n}\n\nbool isparallel(Point a1,Point a2,Point b1,Point b2)\n{\n\treturn isparallel(a1-a2,b1-b2);\n}\n\nbool isparallel(Segment s1,Segment s2)\n{\n\treturn equals(cross(s1.getvector(),s2.getvector()),0.0);\n}\n\nPoint project(Segment s,Point p)\n{\n\tVector base=s.getvector();\n\tdouble r=dot(p-s.p1,base)/norm(base);\n\treturn s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p)\n{\n\treturn project(s,p)*2.0-p;//p+(project(s,p)-p)*2.0\n}\n\ndouble getdistance(Point a,Point b)\n{\n\treturn abs(a-b);\n}\n\ndouble getdistancelp(Line l,Point p)//Line,Point\n{\n\tdouble s=abs(cross(l.p2-l.p1,p-l.p1));\n\treturn s/abs(l.getvector());\n}\n\ndouble getdistancesp(Segment s,Point p)\n{\n\tif(dot(s.getvector(),p-s.p1)<0.0)return abs(p-s.p1);\n\telse if(dot(s.p1-s.p2,p-s.p2)<0.0)return abs(p-s.p2);\n\telse return getdistancelp(s,p);\n}\n\nint ccw_online(Point p0,Point p1,Point p2)\n{\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return counter_clockwise;\n\telse if(cross(a,b)<-EPS)return clockwise;\n\telse if(dot(a,b)<-EPS)return online_back;\n\telse if(a.norm()<b.norm())return online_front;\n\telse return on_segment;\n}\n\nint ccw(Point p0,Point p1,Point p2)\n{\n\tint c=ccw_online(p0,p1,p2);\n\tif(c==counter_clockwise||c==clockwise)return c;\n\telse return on_segment;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4)\n{\n\treturn ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0;\n}\n\nbool intersect(Segment s1,Segment s2)\n{\n\treturn intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getdistance(Segment s1,Segment s2)\n{\n\tif(intersect(s1,s2))return 0.0;\n\telse return min(min(getdistancesp(s1,s2.p1),getdistancesp(s1,s2.p2)),\n\t\t\tmin(getdistancesp(s2,s1.p1),getdistancesp(s2,s1.p2)));\n}\n\nPoint getcrosspoint(Segment s1,Segment s2)\n{\n\tVector base=s2.getvector();\n\tdouble d1=abs(cross(base,s1.p1-s2.p1));\n\tdouble d2=abs(cross(base,s1.p2-s2.p1));\n\tdouble t=d1/(d1+d2);\n\treturn s1.p1+s1.getvector()*t;\n}\n\npair<Point,Point> getcrosspoint(Circle c,Line l)\n{\n\tVector pr=project(l,c.c);\n\tVector e=l.getvector()/abs(l.getvector());\n\tdouble base=sqrt(c.r*c.r-norm(pr-c.c));\n\treturn make_pair(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p)\n{\n\treturn atan2(p.y,p.x);\n}\n\nPoint polar(double r,double theta)\n{\n\treturn Point(r*cos(theta),r*sin(theta));\n}\n\npair<Point,Point> getcrosspoint(Circle c1,Circle c2)\n{\n\tdouble d=abs(c2.c-c1.c);\n\tdouble a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2.0*c1.r*d));\n\tdouble t=arg(c2.c-c1.c);\n\treturn make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\nconst int Bottom=0;\nconst int Left=1;\nconst int Right=2;\nconst int Top=3;\n\nclass endPoint\n{\npublic:\n\tPoint p;\n\tint seg;//id of Point\n\tint st;//kind of Point\n\tendPoint(){}\n\tendPoint(Point inp,int inseg,int inst):p(inp),seg(inseg),st(inst){}\n\tbool operator<(const endPoint &ep)const\n\t{\n\t\tif(p.y==ep.p.y)\n\t\t{\n\t\t\treturn st<ep.st;//Bottom->Left->Right->Top\n\t\t}\n\t\telse return p.y<ep.p.y;\n\t}\n};\n\nendPoint EP[200000];\n\nint manhattanintersection(vector<Segment> s)\n{\n\tint n=s.size();\n\tdouble sto;\n\t\n\tfor(int i=0,k=0;i<n;i++)\n\t{\n\t\tif(s[i].p1.y==s[i].p2.y)\n\t\t{\n\t\t\tif(s[i].p1.x>s[i].p2.x)\n\t\t\t{\n\t\t\t\tsto=s[i].p1.x;\n\t\t\t\ts[i].p1.x=s[i].p2.x;\n\t\t\t\ts[i].p2.x=sto;\n\t\t\t}\n\t\t}\n\t\telse if(s[i].p1.y>s[i].p2.y)\n\t\t{\n\t\t\tsto=s[i].p1.y;\n\t\t\ts[i].p1.y=s[i].p2.y;\n\t\t\ts[i].p2.y=sto;\n\t\t}\n\t\t\n\t\tif(s[i].p1.y==s[i].p2.y)\n\t\t{\n\t\t\tEP[k++]=endPoint(s[i].p1,i,Left);\n\t\t\tEP[k++]=endPoint(s[i].p2,i,Right);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tEP[k++]=endPoint(s[i].p1,i,Bottom);\n\t\t\tEP[k++]=endPoint(s[i].p2,i,Top);\n\t\t}\n\t}\n\t\n\tsort(EP,EP+2*n);\n\t\n\tset<int> BT;\n\tBT.insert(1000000001);\n\tint cnt=0;\n\t\n\tfor(int i=0;i<2*n;i++)\n\t{\n\t\tif(EP[i].st==Top)BT.erase(EP[i].p.x);\n\t\telse if(EP[i].st==Bottom)BT.insert(EP[i].p.x);\n\t\telse if(EP[i].st==Left)\n\t\t{\n\t\t\tset<int>::iterator b=lower_bound(BT.begin(),BT.end(),s[EP[i].seg].p1.x);\n\t\t\tset<int>::iterator e=upper_bound(BT.begin(),BT.end(),s[EP[i].seg].p2.x);\n\t\t\tcnt+=distance(b,e);\n\t\t}\n\t}\n\t\n\treturn cnt;\n}\nPolygon andrewscan(Polygon s)\n{\n\tPolygon u,l;\n\tif(s.size()<=2)return s;\n\tsort(s.begin(),s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\t\n\tfor(int i=2;i<s.size();i++)\n\t{\n\t\tfor(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=clockwise;n--)\n\t\t{\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t\n\tfor(int i=s.size()-3;i>=0;i--)\n\t{\n\t\tfor(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=clockwise;n--)\n\t\t{\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\t\n\treverse(l.begin(),l.end());\n\tfor(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n\t\n\treturn l;\n}\nconst int in=2;\nconst int on=1;\nconst int out=0;\n\nint contain(Polygon g,Point p)\n{\n\tint n=g.size();\n\tbool x=false;\n\tPoint a,b;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\ta=g[i]-p;\n\t\tb=g[(i+1)%n]-p;\n\t\tif(abs(cross(a,b))<EPS&&dot(a,b)<EPS)return on;\n\t\tif(a.y>b.y)\n\t\t{\n\t\t\tPoint sto=a;\n\t\t\ta=b;\n\t\t\tb=sto;\n\t\t}\n\t\tif(a.y<EPS&&EPS<b.y&&cross(a,b)>EPS)x=!x;\n\t}\n\treturn x?in:out;\n}\nint main()\n{\n\tSegment s;\n\tcin>>s.p1.x>>s.p1.y>>s.p2.x>>s.p2.y;\n\tint q;cin>>q;\n\tPoint a;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tcin>>a.x>>a.y;\n\t\ta=project(s,a);\n\t\tcout<<fixed<<setprecision(8)<<a.x<<\" \"<<a.y<<endl;\n\t}\n\treturn 0;\t\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\n#include<queue>\n#include<iostream>\n#include<set>\n#include<map>\n#define re register\n#define ll long long\nusing namespace std;\ninline int gi(){\n\tint f=1,sum=0;char ch=getchar();\n\twhile(ch>'9'|| ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9'){sum=(sum<<3)+(sum<<1)+ch-'0';ch=getchar();}\n\treturn sum*f;\n}\nstruct node{\n\tdouble x,y;\n\tnode operator+(node b){return (node){x+b.x,y+b.y};}\n\tnode operator-(node b){return (node){x-b.x,y-b.y};}\n\tnode operator*(double b){return (node){x*b,y*b};}\n\tdouble len(){return sqrt(x*x+y*y);}\n};\ndouble cross(node a,node b){return a.x*b.y-a.y*b.x;}\ndouble dot(node a,node b){return a.x*b.x+a.y*b.y;}\nnode projection(node p1,node p2,node p){\n\tnode v=p2-p1;\n\treturn p1+v*(dot(v,p-p1)/dot(v,v));\n}\nint main(){\n\tnode p1,p2,p;\n\tp1.x=gi();p1.y=gi();p2.x=gi();p2.y=gi();\n\tint Q=gi();\n\twhile(Q--){\n\t\tp.x=gi();p.y=gi();\n\t\tnode P=projection(p1,p2,p);\n\t\tprintf(\"%.8lf %.8lf\\n\",P.x,P.y);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<cmath>\n#include<map>\n#include<set>\n#include<string>\n#include<queue>\n#include<stack>\nusing namespace std;\n#define MON 1000000007\n#define INF (1<<29)\n#define EPS (1e-10)\ntypedef long long Int;\ntypedef pair<Int, Int> P;\n\n#define max(x, y) ((x)>(y)?(x):(y))\n#define min(x, y) ((x)<(y)?(x):(y))\n\nclass Vec{\npublic:\n  double x, y;\n  Vec(double x = 0, double y = 0):x(x),y(y){}\n\n  void read(){\n    cin >> x >> y;\n  }\n  \n  Vec operator+(const Vec &other)\n  {\n    Vec result = *this;\n    result.x += other.x;\n    result.y += other.y;\n    return result;\n  }\n\n  Vec operator-(const Vec &other)\n  {\n    Vec result = *this;\n    result.x -= other.x;\n    result.y -= other.y;\n    return result;\n  }\n\n  Vec operator*(const float &k)\n  {\n    Vec result = *this;\n    result.x *= k;\n    result.y *= k;\n    return result;\n  }\n\n  Vec operator/(const float &k)\n  {\n    Vec result = *this;\n    result.x /= k;\n    result.y /= k;\n    return result;\n  } \n  \n  double cross(const Vec &other)\n  {\n    return x*other.y - y*other.x;\n  }\n\n  double dot(const Vec &other){\n    return x*other.x + y*other.y;\n  }\n  \n  bool operator==(const Vec &other) const\n  {\n    return abs(x - other.x) < EPS && abs(y - other.y) < EPS;\n  }\n\n  float norm()\n  {\n    return sqrt(x*x+y*y);\n  }\n\n  float norm2()\n  {\n    return x*x+y*y;\n  }\n\n  Vec standard(){\n    Vec result = *this;\n    return result/result.norm();\n  }\n};\n\nclass Line{\npublic:\n  Vec a, b;\n  Vec vect;\n  Line(Vec a = Vec(), Vec b = Vec()):a(a),b(b),vect(b-a){}\n\n  //projection\n  Vec proj(Vec p){\n    p = p - a;\n    return a + vect * vect.dot(p) / vect.norm2();\n  }\n};\n\nint main(){\n  Vec p1, p2, p0;\n  Int q;\n  p1.read();\n  p2.read();\n  Line l(p1, p2);\n  cin >> q;\n  while(q--){\n    p0.read();\n    Vec ans = l.proj(p0);\n    printf(\"%.10lf %.10lf\\n\",ans.x, ans.y);\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nstruct vec{\n\tlong double x , y;\n\tvec(long double _x = 0 , long double _y = 0){x = _x; y = _y;}\n\tfriend vec operator +(vec a , vec b){return vec(a.x + b.x , a.y + b.y);}\n\tfriend vec operator -(vec a , vec b){return vec(a.x - b.x , a.y - b.y);}\n\tfriend long double operator *(vec a , vec b){return a.x * b.x + a.y * b.y;}\n\tfriend vec operator *(vec a , long double b){return vec(a.x * b , a.y * b);}\n\tlong double len(){return sqrt(x * x + y * y);}\n};\n\nvec getvec(){int x , y; cin >> x >> y; return vec(x , y);}\n\nint main(){\n\tvec A = getvec() , B = getvec(); B = B - A; int Q;\n\tfor(cin >> Q ; Q ; --Q){\n\t\tvec Q = getvec() - A;\n\t\tlong double T = Q * B / B.len();\n\t\tvec ans = A + B * (T / B.len());\n\t\tcout << fixed << setprecision(10) << ans.x << ' ' << ans.y << endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define FOR(i, a, b) for (int i = (a), i##_max = (b); i < i##_max; ++i)\n#define RFOR(i, a, b) for (int i = (b)-1, i##_min = (a); i >= i##_min; --i)\n#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)\n#define RREP(i, n) for (int i = (n)-1; i >= 0; --i)\n#define ALL(obj) (obj).begin(), (obj).end()\n\nusing namespace std;\nusing i64 = int64_t;\nusing u64 = uint64_t;\nusing vi = vector<int>;\nusing vl = vector<i64>;\nusing vd = vector<double>;\nusing pi = pair<int, int>;\nusing pl = pair<i64, i64>;\nusing pd = pair<double, double>;\n\nconstexpr int INF = 1 << 30;\nconstexpr int MOD = 1000000007;\n\ntemplate <typename T>\nvoid print(vector<T> &v) {\n  REP(i, v.size()) {\n    if (i) cout << \" \";\n    cout << v[i];\n  }\n  cout << endl;\n}\n\ntemplate <typename T>\nclass Vec2 {\n public:\n  Vec2(){};\n  Vec2(T x, T y) : x(x), y(y){};\n  Vec2<T> operator+(Vec2<T> p);\n  Vec2<T> operator-(Vec2<T> p);\n  Vec2<T> operator*(T t);\n  T norm();\n  T dot(Vec2<T> p);\n  bool is_paralell(Vec2<T> p);\n  bool is_vertical(Vec2<T> p);\n  T x, y;\n};\n\ntemplate <typename T>\nVec2<T> Vec2<T>::operator+(Vec2<T> p) {\n  return Vec2(x + p.x, y + p.y);\n}\n\ntemplate <typename T>\nVec2<T> Vec2<T>::operator-(Vec2<T> p) {\n  return Vec2(x - p.x, y - p.y);\n}\n\ntemplate <typename T>\nVec2<T> Vec2<T>::operator*(T t) {\n  return Vec2(t * x, t * y);\n}\n\ntemplate <typename T>\nT Vec2<T>::norm() {\n  return hypot(x, y);\n}\n\ntemplate <typename T>\nT Vec2<T>::dot(Vec2<T> p) {\n  return x * p.x + y * p.y;\n}\n\ntemplate <typename T>\nbool Vec2<T>::is_paralell(Vec2<T> p) {\n  return x * p.y == y * p.x;\n}\n\ntemplate <typename T>\nbool Vec2<T>::is_vertical(Vec2<T> p) {\n  return this->dot(p) == (T)0;\n}\n\nint main() {\n  Vec2<double> s, seg, p;\n  int q;\n  cin >> s.x >> s.y >> seg.x >> seg.y;\n  seg.x -= s.x;\n  seg.y -= s.y;\n  cin >> q;\n  REP(i, q) {\n    cin >> p.x >> p.y;\n    auto r = (p - s).dot(seg) / pow(seg.norm(), 2);\n    auto out = s + seg * r;\n    cout << std::setprecision(15) << out.x << \" \" << out.y << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n\nint main(void){\n  double xp1,xp2,yp1,yp2,xp,yp;\n  int q;\n  scanf(\"%lf %lf %lf %lf\",&xp1,&yp1,&xp2,&yp2);\n  scanf(\"%d\",&q);\n  double v1x,v1y;\n  v1x=(xp2-xp1)/sqrt((yp2-yp1)*(yp2-yp1)+(xp2-xp1)*(xp2-xp1));\n  v1y=(yp2-yp1)/sqrt((yp2-yp1)*(yp2-yp1)+(xp2-xp1)*(xp2-xp1));\n  double dot;\n  for(int i=0;i<q;i++){\n    scanf(\"%lf %lf\",&xp,&yp);\n    dot=(xp-xp1)*v1x+(yp-yp1)*v1y;\n    printf(\"%.16f %.16f\\n\",xp1+dot*v1x,yp1+dot*v1y);\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <deque>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <vector>\n#include <set>\n#include <limits>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n#define REP(i, j) for(int i = 0; i < (int)(j); ++i)\n#define FOR(i, j, k) for(int i = (int)(j); i < (int)(k); ++i)\n#define SORT(v) sort((v).begin(), (v).end())\n#define REVERSE(v) reverse((v).begin(), (v).end())\n#define X real()\n#define Y imag()\nconst double EPS = 1e-8;\nconst double INF = 1e12;\n\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\nP projection(const L &l, const P &p) {\n  double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n  return l[0] + t*(l[0]-l[1]);\n}\n\nint main() {\n  int x0, y0, x1, y1, Q;\n  cin >>x0 >>y0 >>x1 >>y1;\n  L l = L(P(x0, y0), P(x1, y1));\n  cin >>Q;\n  REP(q, Q){\n    int x, y; cin >>x >>y;\n    P p = P(x, y), ans = projection(l, p);\n    printf(\"%.10lf %.10lf\\n\", ans.X, ans.Y);\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <math.h>\n#include <algorithm>\nusing namespace std;\nconst int MAXSIZE = 1e4+7;\nstruct node\n{\n\tdouble x, y;\n\tnode(double x = 0, double y = 0):x(x),y(y){}\n};\ntypedef node Point;\nstruct segment\n{\n\tnode a, b;\n};\ntypedef segment Segment;\nPoint operator * (Point a, double p){\n\treturn Point(a.x * p, a.y * p);\n}\nPoint operator - (Point a, Point b){\n\treturn Point(a.x - b.x, a.y - b.y);\n}\nPoint operator + (Point a, Point b){\n\treturn Point(a.x + b.x, a.y + b.y);\n}\ndouble dot(Point a, Point b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble norm(Point a){\n\treturn a.x * a.x + a.y * a.y;\n}\ndouble abs(Point a){\n\treturn sqrt(norm(a));\n}\nPoint project(Segment s, Point p){\n\tPoint base = s.b - s.a;\n\tdouble r = dot(p-s.a, base) / norm(base);\n\treturn s.a + base * r;\n}\nint main(){\n\tSegment temp;\n\tint n;\n\tscanf(\"%lf %lf %lf %lf\",&temp.a.x, &temp.a.y, &temp.b.x, &temp.b.y);\n\tscanf(\"%d\",&n);\n\tPoint p;\n\twhile(n--){\n\t\tscanf(\"%lf %lf\",&p.x, &p.y);\n\t\tPoint get = project(temp,p);\n\t\tprintf(\"%0.10lf %0.10lf\\n\",get.x, get.y );\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<functional>\n#include<vector>\n#include<queue>\n#include<complex>\nusing namespace std;\n#define f(i,n) for(int i=0;i<(int)n;i++)\n#define MOD 1000000009\n#define MIN (1e-10)\ntypedef complex<long double> P;\nbool EQ(P a, P b){\n\tif (abs(a.real() - b.real()) < MIN&&abs(a.imag() - b.imag()) < MIN)return true;\n\telse return false;\n}\nlong double dot(P a, P b){\n\treturn{ a.real()*b.real() + a.imag()*b.imag() };\n}\nlong double cross(P a, P b){\n\treturn{ a.real()*b.imag() - a.imag()*b.real() };\n}\nP insec(P a1, P a2, P b1, P b2){\n\tP a, b;\n\ta = a2 - a1;\n\tb = b2 - b1;\n\treturn a1 + (a*cross(b, b1 - a1) / cross(b, a));\n}\nvoid print(long double x,int k){\n\tif (x < 0){\n\t\tprintf(\"-\");\n\t\tx = -x;\n\t}\n\tprintf(\"%d.\", (int)x);\n\tx = x - (long double)(int)x;\n\tf(i, k){\n\t\tx = x * 10;\n\t\tprintf(\"%d\", (int)x);\n\t\tx = x - (long double)(int)x;\n\t}\n\treturn;\n}\n\nint main(void){\n\tP a, b, c;\n\tP d, e, f;\n\tlong double x, y;\n\tint n;\n\tscanf(\"%lf %lf\", &x, &y);\n\ta = P(x, y);\n\tscanf(\"%lf %lf\", &x, &y);\n\tb = P(x, y);\n\tf = (b - a)*P(0, 1);\n\tscanf(\"%d\", &n);\n\tf(i, n){\n\t\tscanf(\"%lf %lf\", &x, &y);\n\tc = P(x, y);\n\td = c + f;\n\te = insec(a, b, c, d);\n\tprint(e.real(),10);\n\tprintf(\" \");\n\tprint(e.imag(),10);\n\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct point {\n    double x, y;\n    point (){}\n    point (double x, double y) : x(x), y(y){}\n    point friend operator - (point l, point r) {\n        return point (l.x - r.x, l.y - r.y);\n    }\n    double friend operator * (point l, point r) {\n        return l.x * r.x + l.y * r.y;\n    }\n    double len () {\n        return sqrt (x * x + y * y);\n    }\n} A, B, C, D;\nint main () {\n//    freopen (\"in.txt\", \"r\", stdin);\n    int Q;\n    double x1, y1, x2, y2;\n    cin >> A.x >> A.y >> B.x >> B.y;\n    D = B - A;\n    cin >> Q;\n    while (Q --) {\n        cin >> C.x >> C.y;\n        C = C - A;\n        double cel = C * D;\n        cel /= D.len() * D.len ();\n        printf (\"%.10f %.10f\\n\", D.x * cel + A.x, D.y * cel + A.y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i, n) for(int i = 1, i##_end_ = (n); i <= i##_end_; ++i)\nusing namespace std;\ntypedef pair<int, int> pii;\ntypedef long long ll;\n\n\n\nconst double eps = 1e-10;\nint sgn(double x) {\n    if(fabs(x) < eps) return 0;\n    return x < 0 ? -1 : 1;\n}\nstruct Point {\n    double x, y;\n    Point(double xp=0, double yp=0): x(xp), y(yp) { }\n    Point operator + (const Point& rhs) const { return Point(x+rhs.x, y+rhs.y); }\n    Point operator - (const Point& rhs) const { return Point(x-rhs.x, y-rhs.y); }\n    Point operator * (const double& k) const { return Point(x*k, y*k); }\n    Point operator / (const double& k) const { return Point(x/k, y/k); }\n    bool operator < (const Point& rhs) const {\n        return x < rhs.x || (x==rhs.x && y<rhs.y);\n    }\n};\n\ndouble dot(Point x, Point y) { return x.x*y.x + x.y*y.y; }\ndouble length(Point x) { return sqrt(dot(x, x)); }\ndouble cross(Point A, Point B) { return A.x*B.y - A.y*B.x; }\n\n\nPoint GetLineProjection(Point P, Point A, Point B) {\n    Point v = B - A;\n    return A + v * (dot(P-A, v) / dot(v, v));\n}\n\nint main() {\n    Point a, b, p, ans;\n    scanf(\"%lf%lf%lf%lf\", &a.x, &a.y, &b.x, &b.y);\n    int q; scanf(\"%d\", &q);\n    while(q--) {\n        scanf(\"%lf%lf\", &p.x, &p.y);\n        ans = GetLineProjection(p, a, b);\n        printf(\"%.12f %.12f\\n\", ans.x, ans.y);\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n---------------------------------------------------\n-- alithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = show x ++ \" \" ++  show y\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = take 10 . vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in putStrLn . init . unlines $ map proj plist\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\ntypedef long long ll;\ndouble pi=3.14159265359; //円周率\ndouble EPS = 1e-10; //誤差\n\nclass point\n{\n\tpublic:\n\tdouble x,y;\n\n\tpoint()\n\t{x=0;y=0;}\n\t//コンストラクタ\n\tpoint(double a,double b)\n\t{\n\t\tx=a;y=b;\n\t}\n\n\t//足し算\n\tpoint operator + (point p)\n\t{\n\t\treturn point(x+p.x,y+p.y);\n\t}\n\t//引き算\n\tpoint operator - (point p)\n\t{\n\t\treturn point(x-p.x,y-p.y);\n\t}\n\t//d倍\n\tpoint operator * (double d)\n\t{\n\t\treturn point(x*d,y*d);\n\t}\n\t//x座標昇順でソートする\n\tbool operator < (const point &p)\n\tconst {\n\t\tif(std::abs(x-p.x)>EPS)\n\t\t\treturn x<p.x;\n\t\telse\n\t\t\treturn y<p.y;\n\t}\n\t//内積\n\t//直交判定...abs(dot())<EPS\n\tdouble dot(point p)\n\t{\n\t\treturn x*p.x+y*p.y;\n\t}\n\t//外積\n\t//平行判定...abs(cross())<EPS\n\tdouble cross(point p)\n\t{\n\t\treturn x*p.y-y*p.x;\n\t}\n\t//絶対値を求める\n\tdouble abs()\n\t{\n\t\treturn sqrt(x*x+y*y);\n\t}\n\t//単位ベクトルを求める\n\tpoint ev()\n\t{\n\t\treturn point(x/abs(),y/abs());\n\t}\n\t//単位法線ベクトル（の1つ）を求める\n\t//もうひとつは-1倍することで求まる\n\tpoint nev()\n\t{\n\t\treturn point(-y/abs(),x/abs());\n\t}\n\t//2点間の距離を求める\n\t//distがEPS未満なら2点は同じ位置にあるとみなす\n\tdouble pdist(point p)\n\t{\n\t\tpoint v=point(p.x-x,p.y-y);\n\t\treturn v.abs();\n\t}\n\t//この点と直線p1-p2の距離を求める\n\tdouble ldist(point p1,point p2)\n\t{\n\t\treturn std::abs((p2.y-p1.y)*x-(p2.x-p1.x)*y+p2.x*p1.y+p2.y*p1.x)/(p2-p1).abs();\n\t}\n\n};\n\n//線分p1-p2上に点qがあるか判定\nbool on_seg(point p1,point p2,point q)\n{\n\treturn abs((p1-q).cross(p2-q))<EPS && (p1-q).dot(p2-q)<=EPS;\n}\n//直線p1-p2と直線q1-q2の交点\n//線分の交差判定はこれの戻り値が線分上にあるかどうかで判定する...on_seg(p1,p2,intersection(p1,p2,q1,q2))\npoint intersection(point p1,point p2,point q1,point q2)\n{\n\treturn p1 + (p2-p1) * ((q2-q1).cross(q1-p1) / (q2-q1).cross(p2-p1));\n}\n//n頂点からなる多角形の面積を求める(vectorで頂点は与えられる)\ndouble area(vector<point> p)\n{\n\tdouble ret=0;\n\tfor(int i=0;i<p.size()-1;i++)\n\t{\n\t\tret+=p[i].cross(p[i+1]);\n\t}\n\tret+=p[p.size()-1].cross(p[0]);\n\tret/=2;\n\treturn ret;\n}\n/*\n3点a,b,cをa->b->cと進むとき、\n* a->bで時計方向に折れてb->c (clockwise)\n* a->bで反時計方向に折れてb->c(counter clockwise)\n* a->bで逆を向いてaを通り越してb->c(c--a--b on line)\n* a->bでそのままb->c(a--b--c on line)\n* a->bで逆を向いてb->c(a--c--b on line)\n\nのいずれのパターンかを判定する\n*/\nint ccw(point a,point b,point c)\n{\n\tb=b-a;c=c-a;\n\tif(b.cross(c)>EPS)\n\t\treturn 1; //counter clockwise\n\tif(b.cross(c)<-EPS)\n\t\treturn -1; //clockwise\n\tif(b.dot(c)<-EPS)\n\t\treturn 2; //c--a--b on line\n\tif(b.x*b.x+b.y*b.y < c.x*c.x+c.y*c.y)\n\t\treturn -2; //a--b--c on line\n\treturn 0; //a--c--b on line\n}\n//凸包を求める\nvector<point> convex_hull(vector<point> p)\n{\n\tint n=p.size();\n\tint k=0;\n\tsort(p.begin(),p.end());\n\tvector<point> ch(2*n);\n\t//lower-hull 下側凸包\n\tfor(int i=0;i<n;ch[k++]=p[i++])\n\t{\n\t\twhile(k>=2 && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\t//upper-hull 上側凸包\n\tfor(int i=n-2,t=k+1;i>=0;ch[k++]=p[i--])\n\t{\n\t\twhile(k>=t && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\tch.resize(k-1);\n\treturn ch;\n}\n\nint main()\n{\n\tcout.setf(ios::fixed);\n\tcout.precision(12);\n\tpoint p1,p2;\n\tdouble a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\tp1=point(a,b);\n\tp2=point(c,d);\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tpoint f;\n\t\tcin>>a>>b;\n\t\tf=point(a,b);\n\t\tpoint x;\n\t\tx=f+(p2-p1).nev()*(p2-p1).abs();\n\t\tif(!on_seg(p1,p2,x))\n\t\t\tx=f+(p2-p1).nev()*(p2-p1).abs();\n\t\tcout<<x.x<<\" \"<<x.y<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <utility>\n#include <set>\n#include <map>\n#include <cmath>\n#include <queue>\n#include <cstdio>\n#define rep(i,n) for(int i = 0; i < n; ++i)\n#define rep1(i,n) for(int i = 1; i <= n; ++i)\n#define F first\n#define S second\nusing namespace std;\ntemplate<class T>bool chmax(T &a, const T &b) { if(a < b){ a = b; return 1; } return 0; }\ntemplate<class T>bool chmin(T &a, const T &b) { if(a > b){ a = b; return 1; } return 0; }\nusing ll = long long;\nusing pi = pair<int,int>;\nconst double EPS = 1e-10;\nstruct Vec2 {\n  double x;\n  double y;\n\n  Vec2() : x(0.0),y(0.0){} \n  Vec2(double _x,double _y) :x(_x),y(_y){}  \n  \n  Vec2 operator+(const Vec2& other) const { return { x + other.x , y + other.y }; }\n  Vec2 operator-(const Vec2& other) const { return { x - other.x , y - other.y }; }\n  bool operator==(const Vec2& other) const { return (abs(x - other.x) < EPS && abs(y - other.y) < EPS ); } \n  bool operator<(const Vec2& other) const { if(abs(x - other.x) < EPS) return y < other.y; else return x < other.x; }\n \n  double dot(const Vec2& other) const { return x * other.x + y * other.y; }\n  double cross(const Vec2& other) const { return x * other.y - y * other.x; }\n  double length() const { return sqrt(x * x + y * y); }\n\n  void Show() { printf(\"%.8f %.8f\\n\", x, y); }\n};\n\nstruct Line {\n  Vec2 s; // 始点\n  Vec2 t; // 終点\n\n  Line() : s({0, 0}), t({0, 0}) {}\n  Line(Vec2 s, Vec2 t) : s(s), t(t) {}\n\n  Vec2 V() { return t - s; }\n  double dot(const Line &other) const { return (t - s).dot(other.t - other.s); }\n  double cross(const Line &other) const { return (t - s).cross(other.t - other.s); }\n  double length() const { return (t - s).length(); }  \n};\n// A とB のなす角θ cosθ, sinθ を返す\ndouble Cos(const Line &A, const Line &B) {\n  if(A.length() < EPS || B.length() < EPS) return 0;\n  return A.dot(B) / (A.length()*B.length());\n}\ndouble Sin(const Line &A, const Line &B) {\n  if(A.length() < EPS || B.length() < EPS) return 0;\n  return A.cross(B) / (A.length()*B.length());\n}\n// 線分ABをB方向に長さlに延長する\nLine ExpandB(const Line &AB, const double &l) {\n  Line v(Vec2(0,0), Vec2(1,0));\n  Vec2 d(l * Cos(v, AB), l * Sin(v, AB));\n  return Line(AB.s, AB.s + d);\n}\n\n// 直線ABと点Cの距離\ndouble DistLinePoint(const Line &AB, const Vec2 &C) {\n  Line AC(AB.s, C);\n  return AC.length() * abs(Sin(AB, AC));\n}\n// 直線AB上に点Cを射影した点\nVec2 Proj(const Line &AB, const Vec2 &C) {\n  Line AC(AB.s, C);\n  double l = AC.length() * Cos(AB, AC);\n  Line res = ExpandB(AB, l);\n  return res.t;\n}\n\nint main()\n{\n  Vec2 p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  Line AB(p1, p2);\n  int q; cin >> q;\n  while(q-- > 0) {\n    Vec2 p;\n    cin >> p.x >> p.y;\n    Vec2 res = Proj(AB, p);\n    res.Show();\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cctype>\n#include <limits.h>\n#include <math.h>\n#include <complex>\n#include <bitset>\n#include <vector>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <string>\n#include <sstream>\n#include <algorithm>\n#include <iomanip>\n#include <iostream>\n\n#define VARIABLE(x) cerr << #x << \"=\" << x << endl\n#define BINARY(x) static_cast<bitset<16> >(x)\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define REP(i,m,n) for (int i=m;i<(int)(n);i++)\n#define if_range(x, y, w, h) if (0<=(int)(x) && (int)(x)<(int)(w) && 0<=(int)(y) && (int)(y)<(int)(h))\n#define ALL(a) (a).begin(),(a).end()\nconst int INF = 1e9;\nconst double PI = 3.14159;\nint dx[4]={0, 1, 0, -1}, dy[4]={-1, 0, 1, 0};\nusing namespace std;\ntypedef long long ll;\n//typedef pair<int, int> P;\n\n/* struct P {\n\tint x, y, n;\n\tP(int n, int x, int y):n(n), x(x), y(y){}\n\tP(){}\n}; */\n\n\n/** 幾何ライブラリ **/\n// to do : 1183\n\n#include <complex>\n\n#define X real()\n#define Y imag()\n\nconst double EPS = 1e-11;\n\ntypedef double D;\ntypedef complex<D> P; // Point\n\n// 共役複素数 conj(a);\n\n// 符号\nint sig(D a, D b=0) { return a < b - EPS ? -1 : (a > b + EPS ? 1 : 0); }\n\n// 内積\nD dot(P a, P b) { return (conj(a)*b).real(); }\n\n// 外積\nD cross(P a, P b) { return (conj(a)*b).imag(); }\n\n// 線分abに対する点cの位置\nenum CCW{FRONT=1, LEFT=2, BACK=4, RIGHT=8, ON=16};\nint ccw(P a, P b, P c)\n{\n\tb -= a, c -= a;\n\tD s = sig(cross(b, c));\n\tif (s) return s>0 ? LEFT : RIGHT;\n\tif (sig(dot(b, c))<0) return BACK;\n\tif (sig(abs(c), abs(b))>0) return FRONT;\n\treturn ON;\n}\n\n// 直線abと点cの距離\nD distLP(P a, P b, P c)\n{\n\treturn abs(cross(b-a, c-a))/abs(b-a);\n}\n\n// 線分abと点cの距離\nD distLSP(P a, P b, P c)\n{\n\tif (sig(dot(b-a, c-a))<0) return abs(c-a);\n\tif (sig(dot(a-b, c-b))<0) return abs(c-b);\n\treturn abs(cross(b-a, c-a))/abs(b-a);\n}\n\n/** Problem CGL_1-A : Points/Vectors **/\nint main()\n{\n\tP a, b, c;\n\tcin>>a.X>>a.Y;\n\tcin>>b.X>>b.Y;\n\t\n\tint q; cin>>q;\n\trep(i, q) {\n\t\tcin>>c.X>>c.Y;\n\t\t cout << fixed << setprecision(15);\n\t\tP tmp = a + (b-a)/abs(b-a) * dot(b-a, c-a)/abs(b-a);\n\t\tcout << tmp.X << \" \" << tmp.Y << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;(i)<(n);++(i))\nusing namespace std;\n\n// Description: ????????????\n// Verifyed: various problem \nusing namespace placeholders;\nusing R=long double;\nconst R EPS=1e-9L; // [-1000,1000]->EPS=1e-8 [-10000,10000]->EPS=1e-7\ninline int sgn(const R& r){return(r > EPS)-(r < -EPS);}\ninline R sq(R x){return sqrt(max(x,0.0L));}\n\nconst R INF = 1E40L;\nconst R PI = acos(-1.0L);\nusing P=complex<R>;\nusing L=struct{P s,t;};\nusing VP=vector<P>;\nusing C=struct{P c;R r;};\n\nauto& operator >> (istream& is,P& p){ R x,y; is >> x >> y,p=P(x,y); return is;}\nauto& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\ninline R dot(P o,P a,P b){return real(conj(a-o)*(b-o));}\ninline R det(P o,P a,P b){return imag(conj(a-o)*(b-o));}\ninline P vec(L l){return l.t-l.s;}\nauto sdot = bind(sgn,bind(dot,_1,_2,_3));\nauto sdet = bind(sgn,bind(det,_1,_2,_3));\n\n//projection verify AOJ CGL_1_A\nP proj(L l,P p){ R u=real((p-l.s)/vec(l)); return (1-u)*l.s+u*l.t;}\n\nint main(void){\n\tP a,b,p;\n\tint n;\n\tcin >> a >> b >> n;\n\tL l={a,b};\n\tcout.precision(20);\n\trep(i,n){\n\t\tcin >> p;\n\t\tP ans=proj(l,p);\n\t\tcout << fixed << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// #define _GLIBCXX_DEBUG\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define all(v) v.begin(), v.end()\n#define Graph vector< vector<int> >\ntypedef long long ll;\ntypedef pair<int, int> P;\nconst int INF = 1000000007;\n\nconst double EPS = 1e-10;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstruct Point{\n    double x, y;\n    Point(){}\n    Point(double x0, double y0){\n        x = x0; y = y0;\n    }\n\n    Point operator +(const Point &p){\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator -(const Point &p){\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator *(const double &a){\n        return Point(a * x, a * y);\n    }\n    Point operator /(const double &a){\n        return Point(x / a, y / a);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p){\n        return equals(x, p.x) && equals(y, p.y);\n    }\n\n    bool operator < (const Point &p){\n        // if(x != p.x) return x < p.x;\n        // else return y < p.y; \n        return x != p.x ? x < p.x : y < p.y ;\n    }\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c0, double r0){\n        c.x = c0.x;\n        c.y = c0.y;\n        r = r0;\n    }\n    Circle(double x0, double y0, double r0){\n        c.x = x0;\n        c.y = y0;\n        r = r0;\n    }\n};\n\nint main(){\n    Point p1, p2;\n    cin >> p1.x >> p1.y;\n    cin >> p2.x >> p2.y;\n    Vector v0 = p2 - p1;\n    int Q;\n    cin >> Q;\n\n    rep(i, Q){\n        Point p;\n        cin >> p.x >> p.y;\n        Vector v1 = p - p1;\n        double r = dot(v0, v1) / v0.norm();\n        Vector X = p1 + v0 * r;\n        printf(\"%.10lf %.10lf\\n\", X.x, X.y);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<long long, long long> pll;\ntypedef pair<double, double> pdd;\nconst double eps = 1e-10;\nconst double pi = acos(-1);\ninline int sgn(double d){if(fabs(d) < eps) return 0;if(d > 0) return 1;return -1;}\ninline double rad(double _deg){return _deg / 180.0 * pi;}\ninline double deg(double _rad){return _rad / pi * 180.0;}\nstruct Point{\n\tdouble x, y;\n\tPoint():x(0.0), y(0.0){}\n\tPoint(double a, double b = 0.0): x(a), y(b){}\n\tPoint(const Point& p): x(p.x), y(p.y){}\n\tPoint operator + (const Point& a){return {x + a.x, y + a.y};}\n\tPoint operator - (const Point& a){return {x - a.x, y - a.y};}\n\tdouble operator * (const Point& a){return x * a.x + y * a.y;}\n\tdouble operator ^ (const Point& a){return x * a.y - y * a.x;}\n\tbool operator == (const Point& p){return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;}\n\tbool operator < (const Point &p) const{\n\t\tif(sgn(x - p.x) == 0) \n\t\t\treturn sgn(y - p.y) == -1;\n\t\treturn sgn(x - p.x) == -1;\n\t}\n\tdouble length(){return sqrt(x * x + y * y);}\n}typedef Vector;\ndouble distance(const Point &a, const Point &b) \n{\n\tdouble x = a.x - b.x;\n\tdouble y = a.y - b.y;\n\treturn sqrt(x * x + y * y);\n}\nstruct Line{\n\tPoint a, b;\n\tLine() : a(0.0, 0.0) , b(0.0, 0.0){}\n};\nPoint Proj(Point p, Line l)\n{\n\tVector v1 = l.b - l.a;\n\tVector v2 = p - l.a;\n\tdouble k1 = v1 * v2;\n\tdouble k2 = v1.length();\n\tk1 /= k2 * k2;\n\treturn {l.a.x + v1.x * k1, l.a.y+ v1.y * k1};\n}\nint main()\n{\n\tLine l;\n\tscanf(\"%lf%lf%lf%lf\", &l.a.x, &l.a.y, &l.b.x, &l.b.y);\n\tint n;\n\tscanf(\"%d\", &n);\n\twhile(n --)\n\t{\n\t\tPoint p;\n\t\tscanf(\"%lf%lf\", &p.x, &p.y);\n\t\tPoint ans = Proj(p, l);\n\t\tprintf(\"%0.9lf %0.9lf\\n\", ans.x, ans.y);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(Point &p) { return Point(x + p.x, y + p.y); };\n\tPoint operator -(Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n};\nusing Vector = Point;\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\nusing Line = Segment;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nusing Polygon = vector<Point>;\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nint main() {\n\tPoint p[2];\n\tint q, x, y;\n\tcin >> p[0].x >> p[0].y >> p[1].x >> p[1].y;\n\tSegment seg;\n\tseg.p1 = p[0]; seg.p2 = p[1];\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\t//cout << x << \" \" << y << endl;\n\t\tPoint po = Point(x, y);\n\t\tPoint proj = project(seg, po);\n\t\tprintf(\"%.10lf %.10lf\\n\", proj.x, proj.y);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < n; i++)\n\nstruct point {\n    double x, y;\n    point(double a, double b) {\n        x = a, y = b;\n    }\n    point operator + (point p) {\n        return point(x + p.x, y + p.y);\n    }\n    point operator - (point p) {\n        return point(x - p.x, y - p.y);\n    }\n    point operator * (double k) {\n        return point(k * x, k * y) ;\n    }\n    point operator / (double k) {\n        return point(x / k, y / k);\n    }\n    double norm() {\n        return x * x + y * y;\n    }\n    double abs() {\n        return sqrt(norm());\n    }\n};\n\ndouble dot(point a, point b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(point a, point b) {\n    return a.x * b.y - a.y * b.x;\n}\n\npoint project(point a, point b) {\n    return b * (dot(a, b) / b.norm());\n}\n\nint main() {\n    int x1, y1, x2, y2;\n    scanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n    point p1(x1, y1);\n    point p2(x2, y2);\n    point base = p2 - p1;\n    // printf(\"base(%f, %f)\\n\", base.x, base.y);\n    int n;\n    scanf(\"%d\", &n);\n    rep(i, n) {\n        int x, y;\n        scanf(\"%d %d\", &x, &y);\n        point p(x, y);\n        // printf(\"p(%f, %f)\\n\", p.x, p.y);\n        point hypo = p - p1;\n        // printf(\"hypo(%f, %f)\\n\", hypo.x, hypo.y);\n        point X = p1 + project(hypo, base);\n        printf(\"%.10lf %.10lf\\n\", X.x, X.y);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define reint register int\n#define coint const int\n\nusing namespace std;\n\nstruct Vector {\n    double x, y;\n\n    inline Vector operator+(const Vector &v) const {\n        return (Vector){ x + v.x, y + v.y };\n    }\n\n    inline double dot(const Vector &v) const { return x * v.x + y * v.y; }\n    inline double cross(const Vector &v) const { return x * v.y - y * v.x; }\n    inline double length(void) const { return sqrt(x * x + y * y); }\n\n    inline Vector operator*(const double a) const {\n        return (Vector){ x * a, y * a };\n    }\n};\n\nstruct Point {\n    double x, y;\n\n    inline Vector operator-(const Point &p) const {\n        return (Vector){ x - p.x, y - p.y };\n    }\n\n    inline Point operator+(const Vector &v) const {\n        return (Point){ x + v.x, y + v.y };\n    }\n};\n\nint main(void) {\n    Point p1, p2;\n    scanf(\"%lf%lf%lf%lf\", &p1.x, &p1.y, &p2.x, &p2.y);\n    const Vector vecP1P2 = p2 - p1;\n    const double lenP1P2 = vecP1P2.length();\n    int q;\n    scanf(\"%d\", &q);\n    for (reint i = 1; i <= q; ++i) {\n        Point p;\n        scanf(\"%lf%lf\", &p.x, &p.y);\n        const Vector vecP1P = p - p1;\n        const double lenP1X = vecP1P.dot(vecP1P2) / lenP1P2;\n        const Vector vecP1X = vecP1P2 * (lenP1X / lenP1P2);\n        const Point x = p1 + vecP1X;\n        printf(\"%.12f %.12f\\n\", x.x, x.y);\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\nclass point{\n\tpublic:\n\tdouble x;\n\tdouble y;\n\tvoid print(){\n\t\tcout << x << \" \" << y; \n\t}\n\tdouble norm2(void){\n\t\treturn x * x + y * y;\n\t}\n\tdouble norm(void){\n\t\treturn sqrt(norm2());\n\t}\n\tpoint operator =(point a){\n\t\tthis->x = a.x;\n\t\tthis->y = a.y;\n\t\treturn *this;\n\t}\n\tpoint operator +(point a){\n\t\tpoint r;\n\t\tr.x = this->x + a.x;\n\t\tr.y = this->y + a.y;\n\t\treturn r;\n\t}\n\tpoint operator -(point a){\n\t\tpoint r;\n\t\tr.x = this->x - a.x;\n\t\tr.y = this->y - a.y;\n\t\treturn r;\n\t}\n};\n\npoint operator *(double t, point a){\n\tpoint r;\n\tr.x = t * a.x; \n\tr.y = t * a.y; \n\treturn r;\n}\n\nvoid projection(point p, point q, point r, point &x){\n\tpoint qp = q - p;\n\tpoint pr = p - r;\n\tdouble k = (qp.x * pr.x + qp.y * pr.y)/qp.norm2();\n\tx = p - (k * qp);\n\t\n}\n\nint main(){\n\tpoint p1, p2, p, x;\n\tint q;\n\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tcin >> q;\n\tfor(int i = 0;i < q;i++){\n\t\tcin >> p.x >> p.y;\n\t\tprojection(p1, p2, p, x);\n\t\tx.print();\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\nstruct point{\n\tdouble x, y;\n\tpoint(double _x = 0, double _y = 0){\n\t\tx = _x, y = _y;\n\t}\n\tpoint operator + (const point &rhs) const { return point(x + rhs.x, y + rhs.y); }\n\tpoint operator - (const point &rhs) const { return point(x - rhs.x, y - rhs.y); }\n}A, B, C, D;\nint q;\ndouble dot_product(point a, point b){\n\treturn a.x * b.x + a.y * b.y;\n}\npoint projection(point p, point a, point b){\n\tdouble l1 = dot_product(p - a, b - a);\n\tdouble l2 = dot_product(b - a, b - a);\n\tdouble d = l1 / l2;\n\treturn point(a.x + (b.x - a.x) * d, a.y + (b.y - a.y) * d);\n}\nint main(){\n\tscanf(\"%lf%lf%lf%lf\", &A.x, &A.y, &B.x, &B.y);\n\tscanf(\"%d\", &q);\n\tfor (register int i = 1; i <= q; ++i){\n\t\tscanf(\"%lf%lf\", &C.x, &C.y);\n\t\tD = projection(C, A, B);\n\t\tprintf(\"%.10lf %.10lf\\n\", D.x, D.y);\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <math.h>\n#include <vector>\n#include <stdio.h>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    double x, y;\n    \n    Vector() {\n        x = 0.0;\n        y = 0.0;\n    }\n    \n    Vector(double nx, double ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void set(double nx, double ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void setX(double nx) {\n        x = nx;\n    }\n    \n    void setY(double ny) {\n        y = ny;\n    }\n    \n    // ベクトルの大きさを求める\n    double getMagnitude() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 内積を求める\n    double getScalar(const Vector& vec) {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 角度を求める\n    double getAngle(const Vector& vec) {\n        double mag = getMagnitude() * vec.getMagnitude();\n        if (mag == 0.0) {\n            return 0.0;\n        } else {\n            return getScalar(vec) / mag;\n        }\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() {\n        Vector v;\n        double mag = getMagnitude();\n        if (mag == 0.0) {\n            v.set(0.0, 0.0);\n        } else {\n            v.set(x / mag, y / mag);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (double f) {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) {\n        Vector v;\n        if (vec.x == 0.0) {\n            v.setX(0.0);\n        } else {\n            v.setX(x / vec.x);\n        }\n        \n        if (vec.y == 0.0) {\n            v.setY(0.0);\n        } else {\n            v.setY(y / vec.y);\n        }\n        return v;\n    }\n    \n    Vector operator / (double f) {\n        Vector v;\n        if (f == 0.0) {\n            v.set(0.0, 0.0);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.0) {\n            x = 0.0;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.0) {\n            y = 0.0;\n        } else {\n            y /= vec.y;\n        }\n    }\n};\n\n\nint main() {\n    Vector vec1, vec2;\n    double x, y;\n    cin >> x;\n    cin >> y;\n    vec1.set(x,y);\n    cin >> x;\n    cin >> y;\n    vec2.set(x,y);\n    \n    int n;\n    cin >> n;\n    \n    Vector vec = vec2 - vec1;\n    Vector p, ret;\n    vector<Vector> results;\n    for (int i = 0; i < n; i++) {\n        double px, py;\n        cin >> px;\n        cin >> py;\n        p.set(px, py);\n        p -= vec1;\n        \n        double cos = p.getAngle(vec);\n        double size = p.getMagnitude() * cos;\n        ret = vec.getUnit() * size;\n        \n        results.push_back(ret);\n    }\n    \n    for (int i = 0; i < results.size(); i++) {\n        printf(\"%2.10f %2.10f\", results[i].x, results[i].y);\n        cout << endl;\n     }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define ALL(v) v.begin(), v.end()\ntypedef long long ll;\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n// cout<<fixed<<setprecision(15)\n\n//点またはベクトル\nclass Point{\n  public:\n  double x,y;\n  \n  Point(double x=0, double y=0): x(x),y(y) {}\n  \n  Point operator+(Point p){return Point(x+p.x,y+p.y);}\n  Point operator-(Point &p){return Point(x-p.x,y-p.y);}\n  Point operator*(double a){return Point(a*x,a*y);}\n  Point operator/(double a){return Point(x/a,y/a);}\n  \n  //絶対値とその二乗\n  double abs(){return sqrt(norm());}\n  double norm(){return x*x+y*y;}\n  \n  bool operator<(const Point &p) const{\n    return x != p.x ? x<p.x : y<p.y;\n  }\n  \n  bool operator==(const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\ntypedef Point Vector;\n\n//直線\nstruct Segment{Point p1,p2;};\ntypedef Segment Line;\n\n//円\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(), double r=0.0): c(c), r(r) {}\n};\n\n//多角形\ntypedef vector<Point> Polygon;\n\n//内積\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//外積\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//直交判定\nbool isOrthgonal(Vector a,Vector b){\n  return equals(dot(a,b), 0.0);\n}\n\n//平行判定\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b), 0.0);\n}\n\n//射影\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/base.norm();\n  return s.p1+base*r;\n}\n\nint main(){\n  Point p1,p2;\n  cin>>p1.x>>p1.y>>p2.x>>p2.y;\n  Segment s;\n  s.p1=p1,s.p2=p2;\n  \n  int q;\n  cin>>q;\n  \n  Point p,r;\n  rep(i,q){\n    cin>>p.x>>p.y;\n    r=project(s,p);\n    cout<<fixed<<setprecision(15)<<r.x<<\" \"<<r.y<<endl;\n  } \n      \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nstruct CWW{\n    CWW(){\n        cin.tie(0);\n        ios_base::sync_with_stdio(0);\n        cout<<fixed<<setprecision(15);\n    }\n}STAR;\n\nusing D=double;\n\nconst D EPS=1e-8;\nconst D INF=1e9;\n\nusing Point=complex<D>;\n\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Line{\n    Point p1,p2;\n    Line(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Circle{\n    Point c;\n    D r;\n    Circle(const Point &c=Point(),const D &r=0.0):c(c),r(r){}\n};\n\nusing Polygon=vector<Point>;\n\nistream& operator>>(istream &is,Point &a){\n    D x,y;\n    is>>x>>y;\n    a=Point(x,y);\n    return is;\n}\n\nostream& operator<<(ostream& os,const Point &a){\n    os<<real(a)<<\" \"<<imag(a);\n    return os;\n}\n\nistream& operator>>(istream &is,Line &l){\n    Point p1,p2;\n    is>>p1>>p2;\n    l=Line(p1,p2);\n    return is;\n}\n\n\n\nD dot(const Point &a,const Point &b){\n    return real(a)*real(b)+imag(a)*imag(b);\n}\n\nD cross(const Point &a,const Point &b){\n    return real(a)*imag(b)-imag(a)*real(b);\n}\n\nPoint projection(const Point &a,const Point &b){\n    return a*real(b/a);\n}\n\nPoint projection(const Line &l,const Point &a){\n    return l.p1+projection(l.p2-l.p1,a-l.p1);\n}\n\n\nint main(){\n    Line L;\n    cin>>L;\n    int Q;cin>>Q;\n    while(Q--){\n        Point p;\n        cin>>p;\n        cout<<projection(L,p)<<endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <math.h>\n#include <vector>\n#include <stdio.h>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    double x, y;\n    \n    Vector() {\n        x = 0.0;\n        y = 0.0;\n    }\n    \n    Vector(double nx, double ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void set(double nx, double ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void setX(double nx) {\n        x = nx;\n    }\n    \n    void setY(double ny) {\n        y = ny;\n    }\n    \n    // ベクトルの大きさを求める\n    double norm() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 内積を求める\n    double dot(const Vector& vec) {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 余弦を求める\n    double getCos(const Vector& vec) {\n        double nor = norm() * vec.norm();\n        if (nor == 0.0) {\n            return 0.0;\n        } else {\n            return dot(vec) / nor;\n        }\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() {\n        Vector v;\n        double mag = norm();\n        if (mag == 0.0) {\n            v.set(0.0, 0.0);\n        } else {\n            v.set(x / mag, y / mag);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (double f) {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) {\n        Vector v;\n        if (vec.x == 0.0) {\n            v.setX(0.0);\n        } else {\n            v.setX(x / vec.x);\n        }\n        \n        if (vec.y == 0.0) {\n            v.setY(0.0);\n        } else {\n            v.setY(y / vec.y);\n        }\n        return v;\n    }\n    \n    Vector operator / (double f) {\n        Vector v;\n        if (f == 0.0) {\n            v.set(0.0, 0.0);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.0) {\n            x = 0.0;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.0) {\n            y = 0.0;\n        } else {\n            y /= vec.y;\n        }\n    }\n};\n\n\nint main() {\n    double a,b,c,d;\n    cin >> a >> b >> c >> d;\n    Vector vec1(a, b);\n    Vector vec2(c, d);\n    Vector vec(vec2 - vec1);\n    \n    int n;\n    cin >> n;\n    \n    vector<Vector> results;\n    for (int i = 0; i < n; i++) {\n        double x, y;\n        cin >> x >> y;\n        Vector p(x - vec1.x, y - vec1.y);\n        Vector ret(vec.getUnit() * p.norm() * p.getCos(vec));\n        \n        results.push_back(ret + vec1);\n    }\n    \n    for (int i = 0; i < results.size(); i++) {\n        printf(\"%.10f %.10f\\n\", results[i].x, results[i].y);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<stdio.h>\n#include<cmath>\nusing namespace std;\n\nint ax,ay,bx,by,becx,becy;\ndouble s,c,kyori;\n\nvoid solve(int x,int y){\n\n    int becp,becq;\n    becp=(x-ax);\n    becq=(y-ay);\n\n    double d= sqrt((double)becp*(double)becp+(double)becq*(double)becq);\n    if(d==0) cout<<\"0 0\"<<endl;\n    else{\n    double cc=((double)becx*(double)becp+(double)becy*(double)becq)/(d*kyori);\n    double k = d*cc;\n    double ansx,ansy;\n    ansx=(double)ax+ k*c;\n    ansy=(double)ay+ k*s;\n    printf(\"%.8f %.8f\\n\",ansx, ansy);\n    }\n}\n\nint main(){\n\ncin>>ax>>ay>>bx>>by;\n\nkyori= sqrt(((double)ax-(double)bx)*((double)ax-(double)bx)+((double)ay-(double)by)*((double)ay-(double)by));\ns=((double)by-(double)ay)/kyori;\nc=((double)bx-(double)ax)/kyori;\nbecx=(bx-ax);\nbecy=(by-ay);\nint n,x,y;\ncin>>n;\nfor(int i=0;i<n;i++){\n    cin>>x>>y;\n\n    solve(x,y);\n}\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n#define repr(i, n) for (int i = (n); i >= 0; --i)\n#define FOR(i, m, n) for (int i = (m); i < (n); ++i)\n#define FORR(i, m, n) for (int i = (m); i >= (n); --i)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\n//const ll mod = 1000000007;\n//const ll mod = 998244353;\nconst int inf = 1e9 + 10;\nconst ll INF = 1e18;\nconst ld EPS = 1e-10;\nconst int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};\nconst int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};\ntemplate<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }\n\nclass Point {\npublic:\n  ld x, y;\n\n  Point() {}\n  Point(ld x, ld y): x(x), y(y) {}\n\n  Point operator + (const Point &p) {\n    return Point(x + p.x, y + p.y);\n  }\n  Point operator - (const Point &p) {\n    return Point(x - p.x, y - p.y);\n  }\n  Point operator * (const ld k) {\n    return Point(x * k, y * k);\n  }\n  Point operator / (const ld k) {\n    return Point(x / k, y / k);\n  }\n  Point operator += (const Point &p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n  Point operator -= (const Point &p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n  Point operator *= (const ld k) {\n    x *= k;\n    y *= k;\n    return *this;\n  }\n  Point operator /= (const ld k) {\n    x /= k;\n    y /= k;\n    return *this;\n  }\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator == (const Point &p) const {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n  friend ostream& operator << (ostream &os, const Point &p) {\n    os << p.x << ' ' << p.y;\n    return os;\n  }\n  friend istream& operator >> (istream &is, Point &p) {\n    ld x, y;\n    is >> x >> y;\n    p = Point(x, y);\n    return is;\n  }\n\n  ld abs() {return sqrt(norm());}\n  ld norm() {return x * x + y * y;}\n};\n\nld dot(Point a, Point b) {\n  return a.x * b.x + a.y * b.y;\n}\n\nld cross(Point a, Point b) {\n  return a.x * b.y - a.y * b.x;\n}\n\nclass Segment {\npublic:\n  Point p1, p2;\n\n  Segment() {}\n  Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\n\nPoint project(Segment s, Point p) {\n  Point base = s.p2 - s.p1;\n  ld r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nclass Circle {\npublic:\n  Point p;\n  ld r;\n\n  Circle() {}\n  Circle(Point p, ld r): p(p), r(r) {}\n};\n\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(25);\n\n  Segment s;\n  cin >> s.p1 >> s.p2;\n  int q;\n  cin >> q;\n  while (q--) {\n    Point p;\n    cin >> p;\n    cout << project(s, p) << '\\n';\n  }\n\n  \n\n  \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <iomanip>\n#include <algorithm>\n\nusing namespace std;\n\nconst double kEps = 1e-10;\n\nint dcmp(double x) {\n  if (fabs(x) < kEps) return 0;\n  return x < 0 ? -1 : 1;\n}\n\nstruct Vector {\n  double x, y;\n  Vector() {}\n  Vector(double x, double y): x(x), y(y) {}\n  Vector(const Vector & p): x(p.x), y(p.y) {}\n\n  double Norm() const { return hypot(x, y); }\n  double NormSquared() const { return x * x + y * y; }\n  Vector Normalize() const {\n    return *this / this->Norm();\n  }\n  Vector operator-() const {\n    return Vector(-x, -y);\n  }\n  Vector operator+(const Vector & rhs) const {\n    return Vector(x + rhs.x, y + rhs.y);\n  }\n  Vector operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  Vector operator*(const double rhs) const {\n    return Vector(rhs * x, rhs * y);\n  }\n  Vector operator/(const double rhs) const {\n    return *this * (1.0 / rhs);\n  }\n  double Dot(const Vector & rhs) const {\n    return x * rhs.x + y * rhs.y;\n  }\n  double Cross(const Vector & rhs) const {\n    return x * rhs.y - y * rhs.x;\n  }\n  bool operator==(const Vector & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Vector & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nstruct Point {\n  Point() {}\n  Point(double x, double y): x(x), y(y) {}\n  Point(const Point & p): x(p.x), y(p.y) {}\n\n  double x, y;\n\n  Point operator-() {\n    return Point(-x, -y);\n  }\n  Point operator+(const Vector & rhs) const {\n    return Point(x + rhs.x, y + rhs.y);\n  }\n  Point operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  bool operator==(const Point & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Point & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nostream & operator<<(ostream & os, const Point & p) {\n  os << p.x << \" \" << p.y;\n  return os;\n}\n\nostream & operator<<(ostream & os, const Vector & v) {\n  os << v.x << \" \" << v.y;\n  return os;\n}\n\nPoint Projection(const Point & a, const Vector & l) {\n  Vector l0(a.x - l.x, a.y - l.y);\n  auto perpendicular = l * (l.Dot(l0) / l.NormSquared()) - l0;\n  return a + perpendicular;\n}\n\nint main(int argc, char const *argv[]) {\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  Vector l(x2 - x1, y2 - y1);\n\n  int q;\n  cin >> q;\n  for (unsigned i = 0; i < q; ++i) {\n    double x0, y0;\n    cin >> x0 >> y0;\n    Point p(x0, y0);\n    cout << fixed << setprecision(10) << Projection(p, l) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class T> inline bool chmax(T &a, T b) {\n    if(a < b) {\n        a = b;\n        return 1;\n    }\n    return 0;\n}\ntemplate <class T> inline bool chmin(T &a, T b) {\n    if(a > b) {\n        a = b;\n        return 1;\n    }\n    return 0;\n}\ntypedef long long int ll;\n\n#define ALL(v) (v).begin(), (v).end()\n#define RALL(v) (v).rbegin(), (v).rend()\n#define endl \"\\n\"\nconst double EPS = 1e-7;\nconst int INF = 1 << 30;\nconst ll LLINF = 1LL << 60;\nconst double PI = acos(-1);\nconst int MOD = 1000000007;\nconst int dx[4] = {1, 0, -1, 0};\nconst int dy[4] = {0, 1, 0, -1};\n\n//-------------------------------------\n\n// Point : 複素数型を位置ベクトルとして扱う\n// 実軸(real)をx軸、挙軸(imag)をy軸として見る\nusing Point = complex<double>;\n\ninline bool equal(const double &a, const double &b) {\n    return fabs(a - b) < EPS;\n}\n\n// 単位ベクトル(unit vector)を求める\nPoint unitVector(const Point &a) { return a / abs(a); }\n\n// 法線ベクトル(normal vector)を求める\n// 90度回転した単位ベクトルをかける\n// -90度がよければPoint(0, -1)をかける\nPoint normalVector(const Point &a) { return a * Point(0, 1); }\n\n// 内積(dot product) : a・b = |a||b|cosΘ\ndouble dot(const Point &a, const Point &b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// 外積(cross product) : a×b = |a||b|sinΘ\ndouble cross(const Point &a, const Point &b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// Line : 直線を表す構造体\n// b - a で直線・線分を表せる\nstruct Line {\n    Point a, b;\n    Line() = default;\n    Line(Point a, Point b) : a(a), b(b) {}\n    // Ax+By=C\n    Line(double A, double B, double C) {\n        if(equal(A, 0)) {\n            a = Point(0, C / B), b = Point(1, C / B);\n        } else if(equal(B, 0)) {\n            b = Point(C / A, 0), b = Point(C / A, 1);\n        } else {\n            a = Point(0, C / B), b = Point(C / A, 0);\n        }\n    }\n    friend ostream &operator<<(ostream &os, Line &p) {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream &operator>>(istream &is, Line &a) {\n        return is >> a.a >> a.b;\n    }\n};\n\n// Segment : 線分を表す構造体\n// Lineと同じ\nstruct Segment : Line {\n    Segment() = default;\n\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\n// Circle : 円を表す構造体\n// pが中心の位置ベクトル、rは半径\nstruct Circle {\n    Point p;\n    double r;\n\n    Circle() = default;\n\n    Circle(Point p, double r) : p(p), r(r) {}\n};\n\n// 2直線の直交判定 : a⊥b <=> dot(a, b) = 0\nbool isOrthogonal(const Line &a, const Line &b) {\n    return equal(dot(a.b - a.a, b.b - b.a), 0);\n}\n// 2直線の平行判定 : a//b <=> cross(a, b) = 0\nbool isParallel(const Line &a, const Line &b) {\n    return equal(cross(a.b - a.a, b.b - b.a), 0);\n}\n\n// 点cが直線ab上にあるか\nbool isPointOnLine(const Point &a, const Point &b, const Point &c) {\n    return isParallel(Line(a, b), Line(a, c));\n}\n\n// 点cが\"線分\"ab上にあるか\nbool isPointOnSegment(const Point &a, const Point &b, const Point &c) {\n    // |a-c| + |c-b| <= |a-b| なら線分上\n    return (abs(a - c) + abs(c - b) < abs(a - b) + EPS);\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(15);\n    double xp1, yp1, xp2, yp2;\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    Point p1(xp1, yp1), p2(xp2, yp2);\n    int q;\n    cin >> q;\n    while(q--) {\n        double x, y;\n        cin >> x >> y;\n        Point p(x, y);\n        Line l(p1, p2);\n        double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n        Point ans = l.a + (l.a - l.b) * t;\n        cout << ans.real() << ' ' << ans.imag() << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing std::cout;\nusing std::cin;\nusing std::sqrt;\nusing std::pow;\n\nint projection(double xp1, double yp1, double xp2, double yp2, double* px, double* py)\n{\n    if (xp1 == xp2 && yp1 == yp2) {\n        return 1;\n    } else if (xp1 == xp2) {\n        *px = xp1;\n        return 0;\n    } else {\n        double dist = std::sqrt(std::pow((xp2 - xp1), 2) + std::pow((yp2 - yp1), 2));\n        double cos = (xp2 - xp1) / dist;\n        double sin = (yp2 - yp1) / dist;\n        double xrot = cos * (*px) + sin * (*py);\n        double yrot = -sin * (*px) + cos * (*py);\n        yrot = 0;\n        *px = cos * xrot - sin * yrot;\n        *py = sin * xrot + cos * yrot;\n        return 0;\n    }\n}\n\n\nint main()\n{\n\tdouble xp1 = 0, yp1 = 0, xp2 = 0, yp2 = 0;\n    double x = 0, y = 0;\n    double* px = &x;\n    double* py = &y;\n\tchar ch;\n\t// cout << \"input:\";\n\tcin >> xp1 >> yp1 >> xp2 >> yp2;\n\tunsigned int q, i;\n    // cout << \"number of points:\";\n\tcin >> q;\n\tfor (i = 0; i < q; i++){\n        // cout << \"point \" << i << \":\";\n\t\tcin >> x >> y;\n        projection(xp1, yp1, xp2, yp2, &x, &y);\n\t\tcout << x << \" \" << y << '\\n';\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n\nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nint main(){\n  int n;\n  double ax,ay,bx,by,cx,cy;\n  scanf(\"%lf %lf %lf %lf %d\",&ax,&ay,&bx,&by,&n);\n  while(n--){\n    scanf(\"%lf %lf\",&cx,&cy);\n    P p=project(P(ax,ay),P(bx,by),P(cx,cy));    \n    printf(\"%.8f %.8f\\n\",p.real(),p.imag());\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\ntypedef complex<ld> PT;\n#define F first\n#define S second\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\n\nistream& operator>> (istream& is, complex<ld>& p){\n\tld val;\n\tis >> val;\n\tp.real(val);\n\tis >> val;\n\tp.imag(val);\n\treturn is;\n}\n\nPT proj(PT a, PT b, PT c){\n\tb -= a, c -= a;\n\treturn a + b*real(c/b);\n}\n\nint main(){\n\tPT a, b;\n\tcin >> a >> b;\n\tcout << setprecision(10) << fixed;\n\tfor (int i = in(); i; i--){\n\t\tPT p;\n\t\tcin >> p;\n\t\tPT img = proj(a, b, p);\n\t\tcout << img.real() << ' ' << img.imag() << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<string>\n#include<cstdlib>\n#include<map>\n#include<iomanip>\n#include<sstream>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<math.h>\n#include<complex>\nusing namespace std;\n\nint main(){\n\tcout << fixed << setprecision(10);\n\tconst long double EPS=1e-8;\n\tlong double Re,Im;\n\tint q;\n\tcomplex<long double>p1,p2;\n\t\n\tcin>>Re>>Im;\n\tp1.real(Re);\n\tp1.imag(Im);\n\tcin>>Re>>Im;\n\tp2.real(Re);\n\tp2.imag(Im);\n\tcin>>q;\n\t\n\tfor(int i=0;i<q;i++){\n\t\tcin>>Re>>Im;\n\t\tcomplex<long double>tmp(Re,Im),p1_copy=p1,p2_copy=p2;\n\t\t\n\t\t\n\t\ttmp-=p1_copy;\n\t\tp2_copy-=p1_copy;\n\t\tcomplex<long double>p1_re=p1_copy;\n\t\tp1_copy-=p1_copy;\n\t\ttmp=tmp/p2_copy;\n\t\tcomplex<long double>p2_re=p2_copy;\n\t\tp2_copy=p2_copy/p2_copy;\n\t\tcomplex<long double>res=tmp;\n\t\tres.imag(0);\n\t\t\n\t\t\n\t\tres*=p2_re;\n\t\tres+=p1_re;\n\t\tcout<<res.real()<<\" \"<<res.imag()<<endl;\n\t}\n\t\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <cstdio> \n#define EPS (1e-10)\nusing namespace std;\nclass Point{\npublic:\n    double x,y;\n    Point(double x=0, double y=0):x(x),y(y){}\n    Point operator +(const Point &p){\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator -(const Point &p){\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator *(double k){\n        return Point(k*x,k*y);\n    }\n    Point operator /(double k){\n        return Point(x/k,y/k);\n    }\n\n    double norm(){\n        return x*x+y*y;\n    }\n    double abs(){\n        return sqrt(norm());\n    }\n};\ntypedef Point Vector;\ndouble dot(const Vector &v1,const Vector &v2){\n    return v1.x*v2.x+v1.y*v2.y;\n}\ndouble cross(const Vector &v1,const Vector &v2){\n    return v1.x*v2.y-v1.y*v2.x;\n}\nbool isParallel(const Vector &v1,const Vector &v2){\n    if(fabs(cross(v1,v2)-0.0)<EPS)return true;\n    return false;\n}\nbool isOrthogonal(const Vector &v1,const Vector &v2){\n    if(fabs(dot(v1,v2)-0.0)<EPS)return true;\n    return false;\n}\nPoint projection( Point &p, Point &p1, Point &p2){\n    Vector a=p-p1;\n    Vector b=p2-p1;\n    double r=dot(a,b);\n    double pro_abs=r/b.norm();\n    Vector res=b*pro_abs;\n    return Point(res.x+p1.x,res.y+p1.y);\n}\nint main()\n{\n//    int q,p0x,p0y,p1x,p1y,p2x,p2y,p3x,p3y;\n//    cin>>q;\n//    while(q>0){\n//        cin>>p0x>>p0y>>p1x>>p1y>>p2x>>p2y>>p3x>>p3y;\n//        Point P0(p0x,p0y);\n//        Point P1(p1x,p1y);\n//        Point P2(p2x,p2y);\n//        Point P3(p3x,p3y);\n//        Vector v1=P1-P0;\n//        Vector v2=P3-P2;\n//        //cout<<'('<<v1.x<<','<<v1.y<<')'<<' ';\n//        //cout<<'('<<v2.x<<','<<v2.y<<')'<<' '<<endl;\n//        if(isOrthogonal(v1,v2))cout<<1<<endl;\n//        else if(isParallel(v1,v2))cout<<2<<endl;\n//        else cout<<0<<endl;\n//        q--;\n//    }\n    int p1x,p1y,p2x,p2y,q,x,y;\n    cin>>p1x>>p1y>>p2x>>p2y;\n    Point p1(p1x,p1y);\n    Point p2(p2x,p2y);\n    //Vector a=p2-p1;\n    cin>>q;\n    while(q>0){\n        cin>>x>>y;\n        Point p(x,y);\n        //Vector b=p-p1;\n        Point res=projection(p,p1,p2);\n        //cout<<res.x<<' '<<res.y<<endl;\n        printf(\"%.8f %.8f\\n\",res.x,res.y);\n        q--;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define eps (1e-10)\nusing namespace std;\nclass Point\n{\n\tpublic:\n\tdouble x,y;\n\tPoint(double _x=0,double _y=0):x(_x),y(_y){}\n\tPoint operator + (Point p){ return Point(x+p.x,y+p.y);} \n\tPoint operator - (Point p){ return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a){return Point(a*x,a*y);} \n\tPoint operator / (double a){return Point(x/a,y/a);}\n\tdouble norm(){return x*x+y*y;}\n\tdouble ABS(){return sqrt(norm());} \n};\nstruct Segment\n{\n\tPoint p1,p2;\t\n};\n//判断是否正交 向量内积：a*b=|a||b|*cos(Y) 当cos为0时正交(90,-90垂直) \n//a*b=a.x*b.x+a.y*b.y;\nbool solve1(Point a,Point b)\n{\n\tdouble f=a.x*b.x+a.y*b.y; \n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\n//判断是否平行  向量外积：|a*b|=|a||b|sin(Y) 当sin为0时平行(180,0平行)\n//|a*b|=|a|*|b|*sin(Y) \nbool solve2(Point a,Point b)\n{\n\tdouble f=a.x*b.y-a.y*b.x;\n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\ndouble dot(Point a,Point b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\nPoint solve3(Segment s,Point p)\n{\n\tPoint base=s.p2-s.p1;\n\tdouble r=dot(p-s.p1,base)/base.norm();\n\treturn s.p1+base*r; \n}\nint main()\n{\n\tdouble x1,y1,x2,y2;\n\tscanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n\tPoint p1(x1,y1),p2(x2,y2);\n\tSegment s;\n\ts.p1=p1,s.p2=p2;\n\tint T;scanf(\"%d\",&T);\n\twhile(T--){\n\t\tdouble x,y;scanf(\"%lf %lf\",&x,&y);\n\t\tPoint p(x,y);\n\t\tPoint w=solve3(s,p);\n\t\tprintf(\"%.10f %.10f\\n\",w.x,w.y);\n\t\t\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// includes\n#include <bits/stdc++.h>\n\n// macros\n#define ll long long int\n#define pb emplace_back\n#define mk make_pair\n#define pq priority_queue\n#define FOR(i, a, b) for(int i=(a);i<(b);++i)\n#define rep(i, n) FOR(i, 0, n)\n#define rrep(i, n) for(int i=((int)(n)-1);i>=0;i--)\n#define irep(itr, st) for(auto itr = (st).begin(); itr != (st).end(); ++itr)\n#define irrep(itr, st) for(auto itr = (st).rbegin(); itr != (st).rend(); ++itr)\n#define vrep(v, i) for(int i = 0; i < (v).size(); i++)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) ((int)(x).size())\n#define UNIQUE(v) v.erase(unique(v.begin(), v.end()), v.end())\n#define FI first\n#define SE second\n#define dump(a, n) for(int i = 0; i < n; i++)cout << a[i] << \"\\n \"[i + 1 != n];\n#define dump2(a, n, m) for(int i = 0; i < n; i++)for(int j = 0; j < m; j++)cout << a[i][j] << \"\\n \"[j + 1 != m];\n#define bit(n) (1LL<<(n))\n#define INT(n) int n; cin >> n;\n#define LL(n) ll n; cin >> n;\n#define DOUBLE(n) double n; cin >> n;\nusing namespace std;\n\n//  types\ntypedef pair<int, int> P;\ntypedef pair<ll, int> Pl;\ntypedef pair<ll, ll> Pll;\ntypedef pair<double, double> Pd;\ntypedef complex<double> cd;\n \n// constants\nconst int inf = 1e9;\nconst ll linf = 1LL << 50;\nconst double EPS = 1e-10;\nconst int mod = 1e9 + 7;\nconst int dx[4] = {-1, 0, 1, 0};\nconst int dy[4] = {0, -1, 0, 1};\n\n// solve\ntemplate <class T>bool chmax(T &a, const T &b){if(a < b){a = b; return 1;} return 0;}\ntemplate <class T>bool chmin(T &a, const T &b){if(a > b){a = b; return 1;} return 0;}\ntemplate <typename T> istream &operator>>(istream &is, vector<T> &vec){for(auto &v: vec)is >> v; return is;}\ntemplate <typename T> ostream &operator<<(ostream &os, const vector<T>& vec){for(int i = 0; i < vec.size(); i++){ os << vec[i]; if(i + 1 != vec.size())os << \" \";} return os;}\ntemplate <typename T> ostream &operator<<(ostream &os, const set<T>& st){for(auto itr = st.begin(); itr != st.end(); ++itr){ os << *itr; auto titr = itr; if(++titr != st.end())os << \" \";} return os;}\ntemplate <typename T> ostream &operator<<(ostream &os, const unordered_set<T>& st){for(auto itr = st.begin(); itr != st.end(); ++itr){ os << *itr; auto titr = itr; if(++titr != st.end())os << \" \";} return os;}\ntemplate <typename T> ostream &operator<<(ostream &os, const multiset<T>& st){for(auto itr = st.begin(); itr != st.end(); ++itr){ os << *itr; auto titr = itr; if(++titr != st.end())os << \" \";} return os;}\ntemplate <typename T> ostream &operator<<(ostream &os, const unordered_multiset<T>& st){for(auto itr = st.begin(); itr != st.end(); ++itr){ os << *itr; auto titr = itr; if(++titr != st.end())os << \" \";} return os;}\ntemplate <typename T1, typename T2> ostream &operator<<(ostream &os, const pair<T1, T2> &p){os << p.first << \" \" << p.second; return os;}\ntemplate <typename T1, typename T2> ostream &operator<<(ostream &os, const map<T1, T2> &mp){for(auto itr = mp.begin(); itr != mp.end(); ++itr){ os << itr->first << \":\" << itr->second; auto titr = itr; if(++titr != mp.end())os << \" \"; } return os;}\ntemplate <typename T1, typename T2> ostream &operator<<(ostream &os, const unordered_map<T1, T2> &mp){for(auto itr = mp.begin(); itr != mp.end(); ++itr){ os << itr->first << \":\" << itr->second; auto titr = itr; if(++titr != mp.end())os << \" \"; } return os;}\n\nstruct point2d{\n  double x, y;\n  point2d(){}\n  point2d(double x, double y): x(x), y(y){}\n  point2d operator+(const point2d &r) const{\n    return point2d(x + r.x, y + r.y);\n  }\n  point2d operator-(const point2d &r) const{\n    return point2d(x - r.x, y - r.y);\n  }\n  point2d& operator+=(const point2d &r){\n    *this = *this + r;\n    return *this;\n  }\n  point2d& operator-=(const point2d &r){\n    *this = *this - r;\n    return *this;\n  }\n  bool operator==(const point2d &r) const{\n    return abs(x - r.x) < EPS && abs(y - r.y) < EPS;\n  }\n  bool operator!=(const point2d &r) const{\n    return !(*this == r);\n  }\n  bool operator<(const point2d &r) const{\n    if(abs(x - r.x) >= EPS)return x < r.x;\n    return y < r.y;\n  }\n};\n\npoint2d operator*(double x, const point2d &p){\n  return point2d(x * p.x, x * p.y);\n}\n\npoint2d operator/(const point2d &p, double x){\n  return point2d(p.x / x, p.y / x);\n}\n\ndouble norm(const point2d &a){\n  return sqrt(a.x * a.x + a.y * a.y);\n}\n\ndouble dis(const point2d &a, const point2d &b){\n  point2d c = a - b;\n  return norm(c);\n}\n\ndouble inner_product(const point2d &a, const point2d &b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble outer_product(const point2d &a, const point2d &b){\n  return a.x * b.y - a.y * b.x;\n}\n\ndouble cosine(const point2d &a, const point2d &b){\n  return inner_product(a, b) / norm(a) / norm(b);\n}\n\npoint2d projection(const point2d &p, const point2d &p1, const point2d &p2){\n  point2d p2p1 = p2 - p1, pp1 = p - p1;\n  if(abs(inner_product(p2p1, pp1)) < EPS)return p1;\n  double cosi = cosine(p2p1, pp1);\n  return p1 + (dis(p, p1) * cosi / norm(p2 - p1)) * (p2 - p1);\n}\n\nint main(int argc, char const* argv[])\n{\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout << fixed;\n  point2d p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  INT(q);\n  cout << setprecision(20);\n  rep(i, q){\n    point2d p;\n    cin >> p.x >> p.y;\n    point2d pp = projection(p, p1, p2);\n    cout << pp.x << \" \" << pp.y << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <math.h>\n#include <vector>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    double x, y;\n    \n    Vector() {\n        x = 0.0;\n        y = 0.0;\n    }\n    \n    Vector(double nx, double ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void set(double nx, double ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void setX(double nx) {\n        x = nx;\n    }\n    \n    void setY(double ny) {\n        y = ny;\n    }\n    \n    // ベクトルの大きさを求める\n    double getMagnitude() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 内積を求める\n    double getScalar(const Vector& vec) {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 角度を求める\n    double getAngle(const Vector& vec) {\n        double mag = getMagnitude() * vec.getMagnitude();\n        if (mag == 0.0) {\n            return 0.0;\n        } else {\n            return getScalar(vec) / mag;\n        }\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() {\n        Vector v;\n        double mag = getMagnitude();\n        if (mag == 0.0) {\n            v.set(0.0, 0.0);\n        } else {\n            v.set(x / mag, y / mag);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (double f) {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) {\n        Vector v;\n        if (vec.x == 0.0) {\n            v.setX(0.0);\n        } else {\n            v.setX(x / vec.x);\n        }\n        \n        if (vec.y == 0.0) {\n            v.setY(0.0);\n        } else {\n            v.setY(y / vec.y);\n        }\n        return v;\n    }\n    \n    Vector operator / (double f) {\n        Vector v;\n        if (f == 0.0) {\n            v.set(0.0, 0.0);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.0) {\n            x = 0.0;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.0) {\n            y = 0.0;\n        } else {\n            y /= vec.y;\n        }\n    }\n};\n\n\nint main() {\n    Vector vec1, vec2;\n    double x, y;\n    cin >> x;\n    cin >> y;\n    vec1.set(x,y);\n    cin >> x;\n    cin >> y;\n    vec2.set(x,y);\n    \n    int n;\n    cin >> n;\n    \n    Vector vec = vec2 - vec1;\n    Vector p, ret;\n    vector<Vector> results;\n    for (int i = 0; i < n; i++) {\n        double px, py;\n        cin >> px;\n        cin >> py;\n        p.set(px, py);\n        p -= vec1;\n        \n        double cos = p.getAngle(vec);\n        double size = p.getMagnitude() * cos;\n        ret = vec.getUnit() * size;\n        \n        results.push_back(ret);\n    }\n    \n    for (int i = 0; i < results.size(); i++) {\n        printf(\"%2.10f %2.10f\", results[i].x, results[i].y);\n        cout << endl;\n     }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "/* Header {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long readtype;\ntypedef long long var;\ntypedef long double let;\n\nreadtype read() {\n  readtype a = 0, c = getchar(), s = 0;\n  while (!isdigit(c)) s |= c == '-', c = getchar();\n  while (isdigit(c)) a = a * 10 + c - 48, c = getchar();\n  return s ? -a : a;\n}\n\n#ifdef LOCAL_LOGGER\n#define logger(...) fprintf(stderr, __VA_ARGS__)\n#define abortif(v, ...) if (v) {logger(\"Error in Line %d, Function '%s()'.\\nInfo: \", __LINE__, __FUNCTION__); logger(__VA_ARGS__); exit(0);}\n#else\n#define logger(...);\n#define abortif(v, ...);\n#endif\n/* }}} */\n\nconst let EPS = 1e-8;\nconst let Pi = acos(-1.0);\n\nint sign(let x) { return (x < -EPS) ? -1 : (x > EPS) ? 1 : 0; }\n\nstruct Point {\n  let x, y;\n\n  friend Point operator + (Point a, Point b) {\n    return (Point) {a.x + b.x, a.y + b.y};\n  }\n\n  friend Point operator - (Point a, Point b) {\n    return (Point) {a.x - b.x, a.y - b.y};\n  }\n\n  Point operator ~ () {\n    return (Point) {x, -y};\n  }\n\n  friend let Cdot(Point a, Point b) {\n    return a.x * b.x + a.y * b.y;\n  }\n\n  friend let Time(Point a, Point b) {\n    return a.x * b.y - a.y * b.x; \n  }\n\n  Point Rotate(let sink, let cosk) {\n    return (Point) { x * cosk - y * sink, x * sink + y * cosk };\n  }\n\n  Point Rotate(let k) {\n    return Rotate(sin(k), cos(k));\n  }\n\n  Point Rotate(Point k) {\n    let z = k.Dist();\n    // k.EchoWith('\\n'); printf(\"%Lf\\n\", z);\n\n    return Rotate(k.y / z, k.x / z);\n  }\n\n  let Dist() {\n    return sqrt(x * x + y * y);\n  }\n\n  void EchoWith(char c = 0) {\n    printf(\"%.8Lf %.8Lf\", x, y);\n    if (c) putchar(c);\n  }\n};\n\ntypedef Point Vec;\n\nstruct Line {\n  Point p;\n  Vec v;\n\n  Line() { }\n  Line(Point a, Point b) {\n    p = a, v = b - a;\n  }\n\n  friend Point Projection(Line a, Point b) {\n    return ((Point) {(b - a.p).Rotate(~a.v).x, 0}).Rotate(a.v) + a.p;\n  }\n\n};\n\nLine line;\n\nint main() {\n// #ifndef ONLINE_JUDGE\n//   freopen(\"CGL_1_A.in\", \"r\", stdin);\n//   freopen(\"CGL_1_A.out\", \"w\", stdout);\n// #endif\n// #ifdef LOCAL_LOGGER\n//   freopen(\"CGL_1_A.log\", \"w\", stderr);\n// #endif\n  let xp1 = read(), yp1 = read(), xp2 = read(), yp2 = read();\n  line = (Line) { (Point) {xp1, yp1}, (Point) {xp2, yp2} };\n  int q = read();\n  while (q--) {\n    let x = read(), y = read();\n    Point res = Projection(line, (Point) {x, y});\n    res.EchoWith('\\n');\n  }\n  return 0;\n}\n\n/* ==== Makefile ==== {{{\nCompileAndRun:\n\tmake Compile\n\tmake Run\n\nCompile:\n\tg++ -o CGL_1_A CGL_1_A.cpp -g -Wall -DLOCAL_LOGGER\n\nCompileUF:\n\tg++ -o CGL_1_A CGL_1_A.cpp -g -Wall -DLOCAL_LOGGER -fsanitize=undefined\n\nRun:\n\t./CGL_1_A < CGL_1_A.in > CGL_1_A.out\n==================\n}}} */\n\n"
  },
  {
    "language": "C++",
    "code": "/**\"I am not an authorized coder\"**/\n#include <bits/stdc++.h>\n#define FOR(i, s, e)    for(int i=s; i<e; i++)\n#define loop(i, n)      FOR(i, 0, n)\n#define sf              scanf\n#define pf              printf\n#define pb              push_back\n#define MP              make_pair\n#define fr              first\n#define sc              second\n#define lli             long long\n#define dd              double\n#define all(v)          v.begin(), v.end()\n#define PI              2*acos(0.0)\n#define mem(ara, value) memset(ara, value, sizeof(ara))\n#define paii            pair<int, int>\n#define pall            pair<ll, ll>\n#define SZ(a)           int(a.size())\n#define open()          freopen(\"input.txt\", \"r\", stdin)\n#define show()          freopen(\"output.txt\", \"w\", stdout)\n#define read(a)         scanf(\"%d\",&a)\n#define read2(a,b)      scanf(\"%d%d\",&a,&b)\n#define read3(a,b,c)    scanf(\"%d%d%d\",&a,&b,&c)\n#define read4(a,b,c,d)  scanf(\"%d%d%d%d\",&a,&b,&c,&d)\n#define readI1(a)       scanf(\"%lld\",&a)\n#define readI2(a,b)     scanf(\"%lld %lld\",&a,&b)\n#define readI3(a,b,c)   scanf(\"%lld %lld %lld\",&a,&b,&c)\n#define readI4(a,b,c,d) scanf(\"%lld %lld %lld %lld\",&a,&b,&c,&d)\n#define BOUNDARY(i, j)  ((i >= 0 && i < w) && (j >= 0 && j < h))\n#define Mx 100009\n#define EPS 1e-12\n#define sq(x) ((x)*(x))\n#define sq_dist(a,b)    (sqrt(sq(a.x-b.x)+sq(a.y-b.y)));\n#define cross(o,a,b)    ((a.x-o.x)*(b.y-o.y)-(a.y-o.y)*(b.x-o.x))\nusing namespace std;\nint main()\n{\n\tint x0, y0, x1, y1, q, x2, y2;\n    read4(x0,y0, x1, y1);\n    read(q);\n    for (int i = 0; i < q; i++)\n    {\n        read2(x2, y2);\n        double x, y;\n        x = (double)x0 + 1.0*(x1-x0)*((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)) / (pow(x1 - x0, 2) + pow(y1 - y0, 2));\n        y = (double)y0 + 1.0*(y1-y0)*((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)) / (pow(x1 - x0, 2) + pow(y1 - y0, 2));\n        printf(\"%.11f %.11f\\n\", x, y);\n    }\n    return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#define SQR(n) ((n) * (n))\n\n//???\nstruct Point\n{\n  double x, y;\n  \n  Point() {}\n  Point(double x, double y) : x(x), y(y) {}\n\n  Point operator + (Point p) { return (Point(x + p.x, y + p.y)); }\n  Point operator - (Point p) { return (Point(x - p.x, y - p.y)); }\n  Point operator * (double a) { return (Point(x * a, y * a)); }\n  Point operator / (double a) { return (Point(x / a, y / a)); }\n\n  void input() { scanf(\"%lf %lf\", &x, &y); }\n  void output() { printf(\"%.10lf %.10lf\", x, y); }\n  void outputln() { output(); putchar('\\n'); }\n  double abs() { return (sqrt(norm())); }\n  double norm() { return (SQR(x) + SQR(y)); }\n  \n  bool operator < (const Point &p) const {\n    return (equals(x, p.x) ? y < p.y : x < p.x);\n  }\n\n  bool operator == (const Point &p) const {\n    return (equals(x, p.x) && equals(y, p.y));\n  }\n\n};\n\n//??????\nstruct Segment\n{\n  Point p1, p2;\n\n  Segment() {}\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n\n  void input() { p1.input(); p2.input(); }\n  \n};\n\nstruct Circle\n{\n  Point c;\n  double r;\n  Circle(Point c, double r) : c(c), r(r) {}\n};\n  \n//??´???\ntypedef Segment Line; \n//????????????\ntypedef Point Vector;\ntypedef vector < Point > Polygon;\n\ndouble dot(Vector a, Vector b)\n{\n  return (a.x * b.x + a.y * b.y);\n}\n\ndouble cross(Vector a, Vector b)\n{\n  return (a.x * b.y - a.y * b.x);\n}\n\nPoint project(Segment s, Point p)\n{\n  Point base = s.p2 - s.p1;\n\n  return (s.p1 + base * (dot(p, base) / base.norm()));\n}\n\nmain()\n{\n  int n;\n  Segment s;\n\n  s.input(); cin >> n;\n  for(int i = 0; i < n; i++) {\n    Point p;\n    p.input();\n    project(s, p).outputln();\n  }\n\n  return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n;\ndouble getCos(Vector a, Vector b){\n    printf(\"%f\\n\", dot(a, b) / (a.abs() * b.abs()));\n    return dot(a, b) / (a.abs() * b.abs());\n}\n\ndouble dist(Point p1, Point p2){\n    return sqrt(pow((p1.x - p2.x), 2) + pow((p1.y - p2.y), 2));\n}\n\nPoint projection(Point p1, Point p2, Point p0){\n    return p1 + (p2 - p1) / (p2 - p1).abs() * (p0 - p1).abs() * getCos(p2 - p1, p0 - p1);\n}\n\nint main(){\n    int xp1, yp1, xp2, yp2;\n    scanf(\"%d\", &xp1);\n    scanf(\"%d\", &yp1);\n    scanf(\"%d\", &xp2);\n    scanf(\"%d\", &yp2);\n\n    Point p1 = Point(xp1, yp1);\n    Point p2 = Point(xp2, yp2);\n\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n\n        Point p = projection(p1, p2, Point(xp0, yp0));\n        printf(\"%f %f\\n\", p.x, p.y);\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <deque>\n#include <vector>\n#include <cstdio>\n#include <cstring>\n#include <utility>\n#include <algorithm>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <iomanip>\n\n#define i64 long long\n#define ui64 unsigned long long\n#define REP(i,n) for(int (i)=0;(i)<(n);i++)\n#define REP2(i,k,n) for(int (i)=(k);(i)<(n);i++)\n#define MDIST(a,b) abs(a-b)\n#define DIST(a,b) sqrt((a)*(a)+(b)*(b))\n#define ATCODER 1000000007\nusing namespace std;\n \n////////////////////////\n\nstruct po{\n  double x,y;\n  po(double x_,double y_):x(x_),y(y_){};\n  po():x(0),y(0){};\n};\n\nstruct vc{\n  double x,y;\n  vc():x(0),y(0){};\n  vc(po f ,po t):x(t.x - f.x),y(t.y - f.y){\n    // x = t.x - f.x;\n    // y = t.y - f.y\n  };\n};\n\ndouble norm(vc &a){\n  return DIST(a.x,a.y);\n}\n\ndouble dot(vc &a,vc &b){\n  return a.x*b.x+a.y*b.y;\n}\n\nint main(){\n  double a,b,c,d;\n  cin >> a >> b >> c >> d;\n  po p(a,b),q(c,d);\n  vc v1(p,q);\n  cin >> a;\n  cout << fixed;\n  cout << setprecision(10);\n  REP(i,a){\n    cin >> b >> c;\n    po r(b,c);\n    vc v2(p,r);\n    double t = dot(v1,v2) / (norm(v1) * norm(v1));\n    cout << p.x+v1.x*t << \" \" << p.y+v1.y*t << endl;\n  }\n  \n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-10;\n\nint dcmp(double x) {\n        if(fabs(x) < eps) return 0;\n        return x < 0 ? -1 : 1;\n}\n\n#define Vector P\nstruct P {\n        double x, y;\n        P(double x = 0, double y = 0): x(x), y(y) {}\n        P operator + (P b) {return P(x + b.x, y + b.y);}\n        P operator - (P b) {return P(x - b.x, y - b.y);}\n        P operator * (double b) {return P(x * b, y * b);}\n        P operator / (double b) {return P(x / b, y / b);}\n        double operator * (P b) {return x * b.x + y * b.y;} // Dot\n        double operator ^ (P b) {return x * b.y - y * b.x;} // Cross\n        double abs() {return hypot(x, y);}\n        P unit() {return *this / abs();}\n        P spin(double o) {\n                double c = cos(o), s = sin(o);\n                return P(c * x - s * y, s * x + c * y);\n        }\n};\n\nstruct Line {\n        //ax + by + c = 0\n        double a, b, c, theta;\n        P pa, pb;\n        Line(): a(0), b(0), c(0), theta(0), pa(), pb() {}\n        Line(P pa, P pb): a(pa.y - pb.y), b(pb.x - pa.x), c(pa ^ pb), theta(atan2(-a, b)), pa(pa), pb(pb) {}        P projection(P p) {return pa + (pb - pa).unit() * ((pb - pa) * (p - pa) / (pb - pa).abs());}                P reflection(P p) {return p + (projection(p) - p) * 2;}\n        double get_ratio(P p) {return (p - pa) * (pb - pa) / ((pb - pa).abs() * (pb - pa).abs());}\n        P dis(P p) {return ((pb - pa) ^ (p - pa)) / (pb - pa).abs();} // directed distance\n};\n\nstruct Circle {\n        P c;\n        double r;\n        Circle(P c, double r = 0): c(c), r(r) {}\n};\nbool onsegment(P p, P a, P b) {\n        return dcmp((a - p) ^ (b - p)) == 0 && dcmp((a - p) * (b - p)) <= 0;\n}\nbool segment_intersection(P p1, P p2, P p3, P p4) { // end points are not allowed\n        return dcmp((p2 - p1) ^ (p3 - p1)) * dcmp((p2 - p1) ^ (p4 - p1)) < 0\n                && dcmp((p4 - p3) ^ (p1 - p3)) * dcmp((p4 - p3) ^ (p2 - p3)) < 0;\n\n}\n\nint main() {\n        ios_base::sync_with_stdio(false); cin.tie(0);\n        P p1, p2;\n        cin >> p1.x >> p1.y >> p2.x >> p2.y;\n        Line l = Line(p1, p2);\n        int q; cin >> q;\n        while(q--) {\n                P p; cin >> p.x >> p.y;\n                P ans = l.projection(p);\n                cout << fixed << setprecision(12) << ans.x << ' ' << ans.y << '\\n';\n        }\n        return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=jp\n#include <iostream>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\nclass Point{\nprivate:\n    double x;\n    double y;\npublic:\n    double getX(){return x;};\n    double getY(){return y;};\n    void setPoint(double inX, double inY){x = inX; y = inY;};\n    void disp(){printf(\"%.12f %.12f\\n\", x,y);}\n};\n\n/*\nvoid Projection(Point P1, Point P2, Point P, Point Output){\n    double ax = P2.getX() - P1.getX();\n    double ay = P2.getY() - P1.getY();\n    double bx = P.getX() - P1.getX();\n    double by = P.getY() - P1.getY();\n    double dot = ax*bx + ay*by;\n    double length = ax*ax + ay*ay;\n\n    double outX = ax * dot/length;\n    double outY = ay * dot/length;\n\n    Output.setPoint(outX, outY);\n    Output.disp();\n}*/\n\n\nint main(){\n    int n;\n    double inX, inY;\n    Point P, P1, P2, Output;\n    cin >> inX >> inY;\n    P1.setPoint(inX, inY);\n//    P1.disp();\n    cin >> inX >> inY;\n    P2.setPoint(inX, inY);\n//    P2.disp();\n    cin >> n;\n    double ax = P2.getX() - P1.getX();\n    double ay = P2.getY() - P1.getY();\n    double length = ax*ax + ay*ay;\n    for(int i=0; i<n; i++){\n        cin >> inX >> inY;\n        P.setPoint(inX, inY);\n        //Projection(P1, P2, P, Output);\n        //Output.disp();\n        double bx = P.getX() - P1.getX();\n        double by = P.getY() - P1.getY();\n        double dot = ax*bx + ay*by;\n\n        double outX = ax * dot/length;\n        double outY = ay * dot/length;\n\n        Output.setPoint(outX, outY);\n        Output.disp();\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing uint = unsigned int;\nusing ll = long long;\nusing ull = unsigned long long;\nconstexpr ll TEN(int n) { return (n==0) ? 1 : 10*TEN(n-1); }\ntemplate<class T> using V = vector<T>;\ntemplate<class T> using VV = V<V<T>>;\n\nusing D = double;\nconst D PI = acos(D(-1)), EPS = 1e-10;\n\nstruct Pt2 {\n    D x, y;\n    Pt2() {}\n    Pt2(D _x, D _y) : x(_x), y(_y) {}\n    Pt2 operator+(const Pt2 &r) const { return Pt2(x+r.x, y+r.y); }\n    Pt2 operator-(const Pt2 &r) const { return Pt2(x-r.x, y-r.y); }\n    Pt2 operator*(const Pt2 &r) const { return Pt2(x*r.x-y*r.y, x*r.y+y*r.x); }\n\n    Pt2 operator*(const D &r) const { return Pt2(x*r, y*r); }\n    Pt2 operator/(const D &r) const { return Pt2(x/r, y/r); }\n\n    Pt2& operator+=(const Pt2 &r) { return *this=*this+r; }\n    Pt2& operator-=(const Pt2 &r) { return *this=*this-r; }\n    Pt2& operator*=(const Pt2 &r) { return *this=*this*r; }\n    Pt2& operator*=(const D &r) { return *this=*this*r; }\n    Pt2& operator/=(const D &r) { return *this=*this/r; }\n    \n    Pt2 operator-() const { return Pt2(-x, -y); }\n\n    D abs() const { return sqrt(x*x + y*y); }\n    D rabs() const { return max(::abs(x), ::abs(y)); } // robust abs\n    D arg() const { return atan2(y, x); }\n\n    pair<D, D> to_pair() const { return make_pair(x, y); }\n    static Pt2 polar(D le, D th) { return Pt2(le*cos(th), le*sin(th)); }\n};\nostream& operator<<(ostream& os, const Pt2 &p) {\n    os << \"(\" << p.x << \", \" << p.y << \")\";\n    return os;\n}\nusing P = Pt2;\n\nstruct L {\n    P s, t;\n    L() {}\n    L(P _s, P _t) : s(_s), t(_t) {}\n    P vec() const { return t-s; }\n    D abs() const { return vec().abs(); }\n    D arg() const { return vec().arg(); }\n};\n\nint sgn(D a) {\n    if (abs(a) <= EPS) return 0;\n    return (a < 0) ? -1 : 1;\n}\nint sgn(D a, D b) { return sgn(a-b); }\n//relative sign\nint rsgn(D a, D f) {\n    if (abs(a) <= f*EPS) return 0;\n    return (a < 0) ? -1 : 1;\n}\n\n//robust less\nbool rless(P l, P r) {\n    if (sgn(r.x-l.x)) return l.x < r.x;\n    if (sgn(r.y-l.y)) return l.y < r.y;\n    return false;\n}\n\nD cross(P a, P b) { return a.x*b.y - a.y*b.x; }\nD dot(P a, P b) { return a.x*b.x + a.y*b.y; }\n\n// -2, -1, 0, 1, 2 : front, clock, on, cclock, back\nint ccw(P b, P c) {\n    int s = rsgn(cross(b, c), b.rabs());\n    if (s) return s;\n    if (!sgn(c.rabs()) || !sgn((c-b).rabs())) return 0;\n    if (dot(b, c) < 0) return 2;\n    if (dot(-b, c-b) < 0) return -2;\n    return 0;\n}\nint ccw(P a, P b, P c) { return ccw(b-a, c-a); }\nint ccw(L l, P p) { return ccw(l.s, l.t, p); }\n\nint crossLL(const L &l, const L &m, P &r) {\n    if (sgn(cross(l.vec(), m.vec())) == 0) {\n        r = l.s;\n        if (ccw(l.s, l.t, m.s) % 2 == 0) return -1;\n        return 0;\n    }\n    D t = cross(l.vec(), l.t - m.s) / cross(l.vec(), m.vec());\n    r = m.s + m.vec() * t;\n    return 1;\n}\n\nstruct C {\n    P p; D r;\n    C() {}\n    C(P p, D r) : p(p), r(r) {}\n};\n\nP project(const L &l, const P &p) {\n    P v = l.vec();\n    return l.s + v * (dot(v, p-l.s) / (v.x*v.x + v.y*v.y));\n}\n\nD distLP(const L &l, const P &p) {\n    return abs(cross(l.vec(), p-l.s)) / l.abs();\n}\n\n//need Intersect/distLP\nint crossLC(const L &l, const C &c, L &r) {\n    D u = distLP(l, c.p);\n    int si = sgn(u - c.r);\n    if (si == 1) return 0;\n    P v = (l.t-l.s) / l.abs() * P(0, -1); //lに直行する単位ベクトル\n    v *= u;\n    if (ccw(l.s, l.t, c.p) < 0) v *= -1;\n    //vは円の中心からlへと向かう方向のベクトル\n    if (si == 0) {\n        r.s = r.t = c.p + v;\n        return 1;\n    }\n    r.s = c.p+v+P::polar(sqrt(c.r*c.r - u*u), l.arg());\n    r.t = c.p+v-P::polar(sqrt(c.r*c.r - u*u), l.arg());\n    return 2;\n}\n\n//共通内接線\nint internal_tangent(const C &c, const C &d, L &l, L &r) {\n    D di = (c.p - d.p).abs();\n    if (sgn(c.r + d.r, di) == 1) return 0;\n    D th = acos((c.r+d.r) / di);\n    D ar = (d.p - c.p).arg();\n    l.s = c.p + P::polar(c.r, ar-th);\n    l.t = d.p - P::polar(d.r, ar-th);\n    r.s = c.p + P::polar(c.r, ar+th);\n    r.t = d.p - P::polar(d.r, ar+th);\n    if (sgn(di, c.r + d.r) == 0) return 1;\n    return 2;\n}\n\n//共通外接線\nint external_tangent(const C &c, const C &d, L &l, L &r) {\n    D di = (c.p - d.p).abs();\n    if (sgn(abs(c.r - d.r), di) == 1) return 0;\n    assert(sgn(di)); // prohibit same circles\n    D th = acos((c.r-d.r) / di);\n    D ar = (d.p - c.p).arg();\n    l.s = c.p + P::polar(c.r, ar-th);\n    l.t = d.p + P::polar(d.r, ar-th);\n    r.s = c.p + P::polar(c.r, ar+th);\n    r.t = d.p + P::polar(d.r, ar+th);\n    if (sgn(di, abs(c.r - d.r)) == 0) return 1;\n    return 2;\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << setprecision(20) << fixed;\n\n    P p1, p2;\n    D x, y;\n    cin >> x >> y; p1 = P(x, y);\n    cin >> x >> y; p2 = P(x, y);\n \n    int q;\n    cin >> q;\n    for (int ph = 0; ph < q; ph++) {\n        cin >> x >> y;\n        P p3 = P(x, y);\n        P z = project(L(p1, p2), p3);\n//        crossLL(L(p1, p2), L(p3, p3 + (p2-p1)*P(0, 1)), z);\n        cout << z.x << \" \" << z.y << endl;\n    }\n    \n/*    C c1, c2;\n    D x, y, r;\n    cin >> x >> y >> r; c1 = C(P(x, y), r);\n    cin >> x >> y >> r; c2 = C(P(x, y), r);\n\n    L l1, l2;\n    int z;\n    V<P> res;\n    z = internal_tangent(c2, c1, l1, l2);\n    if (z >= 1) res.push_back(l1.t);\n    if (z >= 2) res.push_back(l2.t);\n    z = external_tangent(c2, c1, l1, l2);\n    if (z >= 1) res.push_back(l1.t);\n    if (z >= 2) res.push_back(l2.t);\n\n    sort(begin(res), end(res), rless);\n    for (auto p: res) {\n        cout << p.x << \" \" << p.y << endl;\n    }*/\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <climits>\n#include <ctime>\nusing namespace std;\n\n#define rep(i,a,n) for(int i=a; i<n; i++)\n#define repr(i,a,n) for(int i=a; i>=n; i--)\n#define pb(a) push_back(a)\n#define fr first\n#define sc second\n#define INF 999999999\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\n#define EQV(a,b) ( EQ((a).X, (b).X) && EQ((a).Y, (b).Y) )\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n\ntypedef vector<int> VI;\ntypedef vector<VI> MAT;\ntypedef pair<int, int> pii;\ntypedef long long int ll;\n\ntypedef complex<double> P;\ntypedef pair<P, P> L;\ntypedef pair<P, double> C;\n\nint dy[]={0, 0, 1, -1};\nint dx[]={1, -1, 0, 0};\nint const MOD = 1000000007;\n\nnamespace std {\n    bool operator<(const P a, const P b) {\n        return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n    }\n}\n\n// 2???????????????????????????????±???????\ndouble dot(P a, P b) {\n    return (a.X * b.X + a.Y * b.Y);\n}\n\n// 2???????????????????????????????±???????\ndouble cross(P a, P b) {\n    return (a.X * b.Y - a.Y * b.X);\n}\n\nP projection(P a1, P a2, P p) {\n    return a1 + dot(a2-a1, p-a1) / norm(a2-a1) * (a2-a1);\n}\n\nint main() {\n    P p1, p2; cin >> p1.X >> p1.Y >> p2.X >> p2.Y;\n    int q; cin >> q;\n    rep(i,0,q) {\n        P b; cin >> b.X >> b.Y;\n        P ans = projection(p1, p2, b);\n        printf(\"%.10f %.10f\\n\", ans.X, ans.Y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define MX 1000000\n#define pf printf\n#define sf scanf\n#define ll long long\n#define ull unsigned long long\n#define ui unsigned int\n#define db double\n#define fl float\n#define ii pair <int,int>\n#define ff first\n#define ss second\n#define pb push_back\n#define ps push\n#define pp pop()\n#define tp top()\n#define ft front()\n#define cl clear()\n#define max3(a,b,c) max(a, max(b,c))\n#define min3(a,b,c) min(a, min(b,c))\n#define SA(name,size) sort(name, name+size)\n#define SV(name) sort(name.begin(), name.end())\n#define RV(name) reverse(name.begin(), name.end());\n#define loop(a,n) for(int i=a; i<n; i++)\n#define nloop(j,a,n) for(int j=a; j<n; j++)\n#define Case int T; scanf(\"%d\", &T); for(int cas = 1; cas <= T; ++cas)\n#define CaseF(n) for(int cas=1; cas<=n; cas++)\n#define mem(arr,val) memset(arr,val,sizeof(arr))\n#define pr(x) cout << x << endl\n#define pr2(x,y) cout << x << \" \" << y << endl\n#define prln pf(\"\\n\")\nusing namespace std;\n\n/**------------------------------Graph Moves-----------------------------------*/\n/* anti-clockwise, starting from 0 degree */\n///int dx[]={1,0,-1,0}; int dy[]={0,1,0,-1}; // 4 direction\n///int dx[]={1,1,0,-1,-1,-1,0,1}; int dy[]={0,1,1,1,0,-1,-1,-1}; //8 direction\n///int dx[]={2,1,-1,-2,-2,-1,1,2}; int dy[]={1,2,2,1,-1,-2,-2,-1}; //Knight Direction\n///int dx[]={2,1,-1,-2,-1,1}; int dy[]={0,1,1,0,-1,-1}; //Hexagonal Direction\n/*----------------------------------------------------------------------------*/\n\nint bigmod(int n, int pow, int mod){\n    if(pow==0) return 1;\n    int x=bigmod(n, pow/2, mod);\n    x=((x%mod)*(x%mod))%mod;\n    if(pow%2==1) x=((x%mod)*(n%mod))%mod;\n    return x;\n}\n\ninline int getint(){\n    int x;\n    scanf(\"%d\",&x);\n    return x;\n}\n#define II getint()\n\ninline long long getlonglong(){\n    long long x;\n    scanf(\"%lld\",&x);\n    return x;\n}\n#define LL getlonglong()\n\ninline float getfloat(){\n    float x;\n    scanf(\"%f\",&x);\n    return x;\n}\n#define FF getfloat()\n\ninline double getdouble(){\n    double x;\n    scanf(\"%lf\",&x);\n    return x;\n}\n#define DB getdouble()\n\ninline string getstring(){\n    string s;\n    cin>>s;\n    return s;\n}\n#define SS getstring()\n\n/**------------------------------------------------------------------------------------------*/\n\nstruct point{\n    double x,y;\n};\n\nint main(){\n    //ios_base::sync_with_stdio(false);\n    //cin.tie(NULL);\n\n    point p1, p2;\n    sf(\"%lf %lf %lf %lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n    double A = p1.y-p2.y;\n    double B = p2.x-p1.x;\n    double C = A*p1.x+B*p1.y;\n    int q;\n    sf(\"%d\",&q);\n    while(q--){\n        point p;\n        sf(\"%lf %lf\",&p.x,&p.y);\n        double D = -B*p.x+A*p.y;\n        double Det = A*A - (-B*B);\n        double x = ( (A*C)-(B*D) ) /Det;\n        double y = ( (A*D)-(-B*C) ) /Det;\n        pf(\"%.10lf %.10lf\\n\",x,y);\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <stdio.h>\n#define EPS 0.00000001\nusing namespace std;\n\nint main(void){\n\tdouble x1,y1,x2,y2;\n\tdouble x0,y0;\n\tdouble dx,dy;\n\tdouble m;\n\tdouble X,Y;\n\tint q;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tdx=x1-x2;\n\tdy=y1-y2;\n\tcin >> q;\n\twhile(q--){\n\t\tcin >> x0 >> y0;\n\t\tX=(dx*dx*x0+dy*dy*x1-dx*dy*(y1-y0))/(dx*dx+dy*dy);\n\t\tif(-EPS<=dx && dx<=EPS){\n\t\t\tY=dy/dx*(X-x1)+y1;\n\t\t}else{\n\t\t\tY=y0;\n\t\t}\n\t\tprintf(\"%.8lf %.8lf\\n\",X,Y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/**\n * \n */\n\n// #include {{{\n#include <algorithm>\n#include <array>\n#include <bitset>\n#include <cassert>\n#include <cfloat>\n#include <cmath>\n#include <cstdint>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <deque>\n#include <forward_list>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <iterator>\n#include <limits>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <random>\n#include <set>\n#include <stack>\n#include <string>\n#include <tuple>\n#include <type_traits>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>\n#include <vector>\n\n#ifdef DEBUG\n#include <fmt/format.h>\n#endif\n\nusing namespace std;\n// }}}\n\n// type {{{\nusing  s8 =   int8_t;\nusing  u8 =  uint8_t;\nusing s16 =  int16_t;\nusing u16 = uint16_t;\nusing s32 =  int32_t;\nusing u32 = uint32_t;\nusing s64 =  int64_t;\nusing u64 = uint64_t;\n\ntemplate<typename T>\nusing max_heap = priority_queue<T, vector<T>, less<T>>;\ntemplate<typename T>\nusing min_heap = priority_queue<T, vector<T>, greater<T>>;\n// }}}\n\n// ???????????´\n//#define int s64\nconstexpr bool IOS_SYNCSTDIO = false;\nconstexpr int  IOS_PREC      = 10;\n\nconstexpr int    INF = numeric_limits<int>::max();\nconstexpr double EPS = 1e-9;\n\n// util {{{\ntemplate<typename T>\nconstexpr bool is_odd(T x)\n{\n    return x % 2 == 1;\n}\n\ntemplate<typename T>\nconstexpr bool is_even(T x)\n{\n    return x % 2 == 0;\n}\n\ntemplate<typename T>\nconstexpr int cmp(T x, T y)\n{\n    return (x > y) - (x < y);\n}\n\ntemplate<typename T>\nconstexpr int sgn(T x)\n{\n    return cmp(x, T(0));\n}\n\ntemplate<typename T>\nconstexpr typename enable_if<is_signed<T>::value,T>::type modulo(T a, T b)\n{\n    assert(b > 0);\n    T r = a % b;\n    return r >= 0 ? r : r+b;\n}\n\ntemplate<typename T>\nconstexpr T clamp(T x, T lo, T hi)\n{\n    assert(lo <= hi);\n    if(x < lo)\n        return lo;\n    else if(x > hi)\n        return hi;\n    else\n        return x;\n}\n\nint sqrti(int x)\n{\n    assert(x >= 0);\n    return static_cast<int>(sqrt(x));\n}\n\ns64 sqrtl(s64 x)\n{\n    assert(x >= 0);\n    return static_cast<s64>(sqrtl(x));\n}\n\ntemplate<typename T>\nbool chmax(T& xmax, const T& x)\n{\n    if(x > xmax) {\n        xmax = x;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ntemplate<typename T>\nbool chmin(T& xmin, const T& x)\n{\n    if(x < xmin) {\n        xmin = x;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ntemplate<typename T>\nconstexpr int SIZE(const T& c)\n{\n    return static_cast<int>(c.size());\n}\n\ntemplate<typename T, size_t N>\nconstexpr int SIZE(const T (&)[N])\n{\n    return static_cast<int>(N);\n}\n\nostream& FPRINT(ostream& out) { return out; }\n\ntemplate<typename T, typename... TS>\nostream& FPRINT(ostream& out, const T& x, const TS& ...args)\n{\n    out << x;\n    if(sizeof...(args))\n        out << ' ';\n    return FPRINT(out, args...);\n}\n\ntemplate<typename... TS>\nostream& FPRINTLN(ostream& out, const TS& ...args)\n{\n    FPRINT(out, args...);\n    return out << '\\n';\n}\n\ntemplate<typename InputIt>\nostream& FPRINTSEQ(ostream& out, InputIt first, InputIt last)\n{\n    for(InputIt it = first; it != last; ++it) {\n        if(it != first) out << ' ';\n        out << *it;\n    }\n    return out;\n}\n\ntemplate<typename T, size_t N>\nostream& FPRINTARRAY1(ostream& out, const T (&c)[N])\n{\n    return FPRINTSEQ(out, cbegin(c), cend(c));\n}\n\ntemplate<typename T, size_t N1, size_t N2>\nostream& FPRINTARRAY2(ostream& out, const T (&c)[N1][N2])\n{\n    out << '\\n';\n    for(const auto& e : c) {\n        FPRINTARRAY1(out, e) << '\\n';\n    }\n    return out;\n}\n\ntemplate<typename... TS>\nostream& PRINT(const TS& ...args)\n{\n    return FPRINT(cout, args...);\n}\n\ntemplate<typename... TS>\nostream& PRINTLN(const TS& ...args)\n{\n    return FPRINTLN(cout, args...);\n}\n\ntemplate<typename InputIt>\nostream& PRINTSEQ(InputIt first, InputIt last)\n{\n    return FPRINTSEQ(cout, first, last);\n}\n\ntemplate<typename T, size_t N>\nostream& PRINTARRAY1(const T (&c)[N])\n{\n    return FPRINTARRAY1(cout, c);\n}\n\ntemplate<typename T, size_t N1, size_t N2>\nostream& PRINTARRAY2(const T (&c)[N1][N2])\n{\n    return FPRINTARRAY2(cout, c);\n}\n\ntemplate<typename... TS>\nostream& DPRINT(const TS& ...args)\n{\n    return FPRINT(cerr, args...);\n}\n\ntemplate<typename... TS>\nostream& DPRINTLN(const TS& ...args)\n{\n    return FPRINTLN(cerr, args...);\n}\n\ntemplate<typename InputIt>\nostream& DPRINTSEQ(InputIt first, InputIt last)\n{\n    return FPRINTSEQ(cerr, first, last);\n}\n\ntemplate<typename T, size_t N>\nostream& DPRINTARRAY1(const T (&c)[N])\n{\n    return FPRINTARRAY1(cerr, c);\n}\n\ntemplate<typename T, size_t N1, size_t N2>\nostream& DPRINTARRAY2(const T (&c)[N1][N2])\n{\n    return FPRINTARRAY2(cerr, c);\n}\n\ntemplate<typename T1, typename T2>\nostream& operator<<(ostream& out, const pair<T1,T2>& p)\n{\n    return out << '(' << p.first << ',' << p.second << ')';\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const vector<T>& c)\n{\n    return FPRINTSEQ(out, cbegin(c), cend(c));\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const vector<vector<T>>& c)\n{\n    out << '\\n';\n    for(const auto& e : c) {\n        out << e << '\\n';\n    }\n    return out;\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const deque<T>& c)\n{\n    return FPRINTSEQ(out, cbegin(c), cend(c));\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const list<T>& c)\n{\n    return FPRINTSEQ(out, cbegin(c), cend(c));\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const forward_list<T>& c)\n{\n    return FPRINTSEQ(out, cbegin(c), cend(c));\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const set<T>& c)\n{\n    return FPRINTSEQ(out, cbegin(c), cend(c));\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const unordered_set<T>& c)\n{\n    return out << set<T>(cbegin(c), cend(c));\n}\n\ntemplate<typename T, size_t N>\nostream& operator<<(ostream& out, const array<T,N>& c)\n{\n    return FPRINTSEQ(out, cbegin(c), cend(c));\n}\n\ntemplate<typename InputIt>\nostream& FPRINTMAP(ostream& out, InputIt first, InputIt last)\n{\n    out << \"{\\n\";\n    for(auto it = first; it != last; ++it) {\n        out << \"  \" << it->first << \" : \" << it->second << '\\n';\n    }\n    out << \"}\\n\";\n    return out;\n}\n\ntemplate<typename InputIt>\nostream& PRINTMAP(InputIt first, InputIt last)\n{\n    return FPRINTMAP(cout, first, last);\n}\n\ntemplate<typename InputIt>\nostream& DPRINTMAP(InputIt first, InputIt last)\n{\n    return FPRINTMAP(cerr, first, last);\n}\n\ntemplate<typename K, typename V>\nostream& operator<<(ostream& out, const map<K,V>& c)\n{\n    return FPRINTMAP(out, cbegin(c), cend(c));\n}\n\ntemplate<typename K, typename V>\nostream& operator<<(ostream& out, const unordered_map<K,V>& c)\n{\n    return out << map<K,V>(cbegin(c), cend(c));\n}\n\ntemplate<typename T, typename C>\nostream& operator<<(ostream& out, stack<T,C> c)\n{\n    while(!c.empty()) {\n        out << c.top();\n        c.pop();\n        if(!c.empty()) out << ' ';\n    }\n    return out;\n}\n\ntemplate<typename T, typename C>\nostream& operator<<(ostream& out, queue<T,C> c)\n{\n    while(!c.empty()) {\n        out << c.front();\n        c.pop();\n        if(!c.empty()) out << ' ';\n    }\n    return out;\n}\n\ntemplate<typename T, typename Cont, typename Cmp>\nostream& operator<<(ostream& out, priority_queue<T,Cont,Cmp> c)\n{\n    while(!c.empty()) {\n        out << c.top();\n        c.pop();\n        if(!c.empty()) out << ' ';\n    }\n    return out;\n}\n\nstruct pairhash {\n    template<typename T1, typename T2>\n    size_t operator()(const pair<T1,T2>& p) const\n    {\n        size_t ans = 17;\n        ans = 31*ans + hash<T1>()(p.first);\n        ans = 31*ans + hash<T2>()(p.second);\n        return ans;\n    }\n};\n\nstruct IosIni {\n    IosIni()\n    {\n        cin.tie(nullptr);\n        ios::sync_with_stdio(IOS_SYNCSTDIO);\n        cout << fixed << setprecision(IOS_PREC);\n    }\n} IOSINI;\n\n#define FOR(i, start, end) for(int i = (start); i < (end); ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define ALL(f,cc,...) (([&](decltype((cc)) c) { return (f)(begin(c), end(c), ## __VA_ARGS__); })(cc))\n\n#define DBG(x) DPRINTLN('L', __LINE__, ':', #x, ':', (x))\n// }}}\n\nbool equals(double x, double y, double eps=EPS)\n{\n    return fabs(x-y) < eps;\n}\n\nclass Vec2d {\npublic:\n    Vec2d() : x(0.0), y(0.0) {}\n    Vec2d(double xx, double yy) : x(xx), y(yy) {}\n\n    Vec2d& operator+=(const Vec2d& rhs)\n    {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n    Vec2d& operator-=(const Vec2d& rhs)\n    {\n        x -= rhs.x;\n        y -= rhs.y;\n        return *this;\n    }\n    Vec2d& operator*=(double c)\n    {\n        x *= c;\n        y *= c;\n        return *this;\n    }\n    Vec2d& operator/=(double c)\n    {\n        x /= c;\n        y /= c;\n        return *this;\n    }\n\n    double norm() const { return x*x + y*y; }\n    double abs() const { return sqrt(norm()); }\n\n    double x;\n    double y;\n};\n\nbool equals(const Vec2d& lhs, const Vec2d& rhs, double eps=EPS)\n{\n    return equals(lhs.x, rhs.x, eps) && equals(lhs.y, rhs.y, eps);\n}\n\nconst Vec2d operator+(const Vec2d& lhs, const Vec2d& rhs) { return Vec2d(lhs) += rhs; }\nconst Vec2d operator-(const Vec2d& lhs, const Vec2d& rhs) { return Vec2d(lhs) -= rhs; }\nconst Vec2d operator*(const Vec2d& lhs, double rhs) { return Vec2d(lhs) *= rhs; }\nconst Vec2d operator*(double lhs, const Vec2d& rhs) { return Vec2d(rhs) *= lhs; }\nconst Vec2d operator/(const Vec2d& lhs, double rhs) { return Vec2d(lhs) /= rhs; }\n\nostream& operator<<(ostream& out, const Vec2d& v)\n{\n    return out << '(' << v.x << ',' << v.y << ')';\n}\n\ndouble dot(const Vec2d& lhs, const Vec2d& rhs)\n{\n    return lhs.x * rhs.x + lhs.y * rhs.y;\n}\n\ndouble cross(const Vec2d& lhs, const Vec2d& rhs)\n{\n    return lhs.x * rhs.y - lhs.y * rhs.x;\n}\n\nclass Line {\npublic:\n    Line() {}\n    Line(const Vec2d& pp1, const Vec2d& pp2) : p1(pp1), p2(pp2) {}\n    Line(double x1, double y1, double x2, double y2) : p1(x1,y1), p2(x2,y2) {}\n\n    Vec2d base() const { return p2 - p1; }\n\n    Vec2d p1;\n    Vec2d p2;\n};\n\nbool is_orthogonal(const Vec2d& a, const Vec2d& b)\n{\n    return equals(dot(a,b), 0.0);\n}\n\nbool is_parallel(const Vec2d& a, const Vec2d& b)\n{\n    return equals(cross(a,b), 0.0);\n}\n\nVec2d project(const Line& l, const Vec2d& p)\n{\n    Vec2d base = l.base();\n    double r = dot(p - l.p1, base) / base.norm();\n    return l.p1 + r * base;\n}\n\nLine L;\n\nvoid solve()\n{\n    int Q; cin >> Q;\n\n    REP(_, Q) {\n        int x, y; cin >> x >> y;\n        Vec2d p(x,y);\n        Vec2d ans = project(L, p);\n        PRINTLN(ans.x, ans.y);\n    }\n}\n\nsigned main(signed /*argc*/, char** /*argv*/)\n{\n    int x1, y1; cin >> x1 >> y1;\n    int x2, y2; cin >> x2 >> y2;\n    L = Line(x1, y1, x2, y2);\n\n    solve();\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <algorithm>\n#include <array>\n#include <climits>\n#include <cmath>\n#include <cstdint>\n#include <cstdio>\n#include <cstdlib>\n#include <ctime>\n#include <functional>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <type_traits>\n#include <utility>\n#include <vector>\n\nusing int32 = std::int_fast32_t;\nusing int64 = std::int_fast64_t;\nusing uint32 = std::uint_fast32_t;\nusing uint64 = std::uint_fast64_t;\nusing intl32 = std::int_least32_t;\nusing intl64 = std::int_least64_t;\nusing uintl32 = std::uint_least32_t;\nusing uintl64 = std::uint_least64_t;\n\nstatic constexpr double PI = 3.1415926535897932;\nstruct angle {\n\tdouble r;\n\tangle() :r(0) {}\n\tangle(double r_) :r(arr(std::fmod(r_, 2.0 * PI) + 2.0 * PI)) {}\n\tstatic double arr(const double &o) { return o < 2.0 * PI - eps ? o : o - 2.0 * PI; }\n\tstatic angle make(const double &o) { angle ret;ret.r = o;return ret; }\n\tconst angle operator+(const angle &o)const { return make(arr(r + o.r)); }\n\tconst angle operator-(const angle &o)const { return make(arr(r - o.r + 2.0 * PI)); }\n\tconst angle operator*(const double &o)const { return angle(r * o); }\n\tconst angle operator/(const double &o)const { return angle(r / o); }\n\tangle &operator+=(const angle &o) { return *this = *this + o; }\n\tangle &operator-=(const angle &o) { return *this = *this - o; }\n\tangle &operator*=(const double &o) { return *this = *this * o; }\n\tangle &operator/=(const double &o) { return *this = *this / o; }\n\tconst angle operator~()const { return make(arr(3.0 * PI - r)); }\n\tconst angle operator-()const { return make(arr(2.0 * PI - r)); }\n\tconst bool operator==(const angle &o)const { return std::abs(r - o.r) <= eps; }\n\tconst bool operator!=(const angle &o)const { return std::abs(r - o.r) > eps; }\n\tconst bool operator< (const angle &o)const { return r <  o.r; }\n\tconst bool operator<=(const angle &o)const { return r <= o.r; }\n\tconst bool operator> (const angle &o)const { return r >  o.r; }\n\tconst bool operator>=(const angle &o)const { return r >= o.r; }\n\texplicit operator bool()const { return r > eps; }\n\texplicit operator double()const { return r; }\n\tconst double sin()const { return std::sin(r); }\n\tconst double cos()const { return std::cos(r); }\n\n\tconst double degree()const { return r*(180.0 / PI); }\n\tconst double ratio()const { return r / (2.0 * PI); }\nprivate:\n\tstatic constexpr double eps = 0.0000001;\n};\nangle operator\"\" _deg(long double x) { return angle(x*(PI / 180.0)); }\nangle operator\"\" _rat(long double x) { return angle(x * 2.0 * PI); }\nangle operator\"\" _rad(long double x) { return angle(x); }\nstruct pvec {\n\tstatic constexpr double eps = 0.0000000000001;\n\tdouble x, y;\n\tpvec() :x(0), y(0) {}\n\tpvec(double x_, double y_) :x(x_), y(y_) {}\n\tpvec(double abs_, angle r) :x(abs_*r.cos()), y(abs_*r.sin()) {}\n\tconst pvec operator+(const pvec &o)const { return pvec(x + o.x, y + o.y); }\n\tconst pvec operator-(const pvec &o)const { return pvec(x - o.x, y - o.y); }\n\tconst pvec operator*(const pvec &o)const { return pvec(x*o.x - y*o.y, x*o.y + y*o.x); }\n\tconst pvec operator/(const pvec &o)const { return pvec(x*o.x + y*o.y, y*o.x - x*o.y) / abs2(); }\n\tconst pvec operator*(const double &o)const { return pvec(x * o, y * o); }\n\tconst pvec operator/(const double &o)const { return pvec(x / o, y / o); }\n\tpvec &operator+=(const pvec &o) { return *this = *this + o; }\n\tpvec &operator-=(const pvec &o) { return *this = *this - o; }\n\tpvec &operator*=(const pvec &o) { return *this = *this * o; }\n\tpvec &operator/=(const pvec &o) { return *this = *this / o; }\n\tpvec &operator*=(const double &o) { return *this = *this * o; }\n\tpvec &operator/=(const double &o) { return *this = *this / o; }\n\n\tconst pvec operator+()const { return *this; }\n\tconst pvec operator-()const { return pvec(-x, -y); }\n\tconst pvec operator~()const { return pvec(x, -y); }\n\n\texplicit operator bool()const { return std::abs(x) > eps || std::abs(y) > eps; }\n\tconst bool operator==(const pvec &o)const { return std::abs(x - o.x) <= eps&&std::abs(y - o.y) <= eps; }\n\tconst bool operator!=(const pvec &o)const { return std::abs(x - o.x) > eps || std::abs(y - o.y) > eps; }\n\n\tconst double abs()const { return mysqrt(abs2()); }\n\tconst double abs2()const { return x*x + y*y; }\n\tconst angle arg()const {\n\t\tif (x > eps) return angle(std::atan(y / x));\n\t\tif (x < eps) return angle(std::atan(y / x) + PI);\n\t\treturn angle();\n\t}\n\tstatic const double dot(const pvec &l, const pvec &r) { return l.x*r.x + l.y*r.y; }\n\tstatic const double cross(const pvec &l, const pvec &r) { return l.x*r.y - l.y*r.x; }\n\tconst pvec dir()const { return *this / abs(); }\n\n\tstatic const bool C_x(const pvec &l, const pvec &r) {\n\t\tif (l.x != r.x) return l.x < r.x;\n\t\treturn l.y < r.y;\n\t}\n\n\tfriend std::istream &operator>>(std::istream &is, pvec &o) {\n\t\tdouble x_, y_;is >> x_ >> y_;o = pvec(x_, y_);return (is);\n\t}\n\tfriend std::ostream &operator<<(std::ostream &os, const pvec &o) {\n\t\treturn os << o.x << \" \" << o.y;\n\t}\nprivate:\n\tstatic const double mysqrt(const double &x) {\n\t\tdouble h = 0.5*x;\n\t\tstd::uint_fast64_t t = 0x5FE6EB50C7B537AAl\n\t\t\t- (*(std::uint_fast64_t*)&x >> 1);\n\t\tdouble r = *(double*)&t;\n\t\tr *= 1.5 - h*r*r;r *= 1.5 - h*r*r;\n\t\tr *= 1.5 - h*r*r;r *= 1.5 - h*r*r;\n\t\treturn r*x;\n\t}\n};\n\nint main(void) {\n\t//std::ios::sync_with_stdio(false);\n\t//std::cin.tie(0);\n\tpvec o, d;\n\tstd::cin >> o >> d;\n\td = (d - o).dir();\n\tuint32 q;\n\tstd::cin >> q;\n\tpvec p;\n\twhile (q--) {\n\t\tstd::cin >> p;\n\t\tp -= o;\n\t\tp = d*pvec::dot(p, d);\n\t\tp += o;\n\t\tstd::cout << p << \"\\n\";\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <vector>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Vector {\npublic:\n  double x, y;\n  Vector() {}\n  Vector(double x, double y) : x(x), y(y) {}\n\n  Vector operator+(Vector v) { return Vector(x + v.x, y + v.y); }\n  Vector operator-(Vector v) { return Vector(x - v.x, y - v.y); }\n  Vector operator*(double s) { return Vector(s*x, s*y); }\n  double norm() { return x * x + y * y; }\n  double abs() { return sqrt(norm()); }\n};\n\n// inner product\ndouble dot(Vector v1, Vector v2) { return v1.x * v2.x + v1.y * v2.y; }\n\n// cross product\ndouble cross(Vector v1, Vector v2) { return v1.x * v2.y - v1.y * v2.x; }\n\nclass Line {\npublic:\n  Vector v1, v2;\n  Line() {}\n  Line(Vector v1, Vector v2) : v1(v1), v2(v2) {}\n};\n\nbool is_parrallel(Vector a, Vector b) { return equals(cross(a, b), 0); }\nbool is_parrallel(Line a, Line b) {\n  return is_parrallel(a.v1 - a.v2, b.v1 - b.v2);\n}\n\nbool is_orthogonal(Vector a, Vector b) { return equals(dot(a, b), 0); }\nbool is_orthogonal(Line a, Line b) {\n  return is_orthogonal(a.v1 - a.v2, b.v1 - b.v2);\n}\n\nVector project(Line l, Vector v) {\n  Vector a = v - l.v1;\n  Vector b = l.v2 - l.v1;\n  return l.v1 + b * (dot(a, b) / b.norm());\n}\n\nint main() {\n  int x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  auto line = Line(Vector(x0, y0), Vector(x1, y1));\n  int nq;\n  cin >> nq;\n  for (int i = 0; i < nq; i++) {\n    int x, y;\n    cin >> x >> y;\n    auto ans = project(line, Vector(x, y));\n    printf(\"%.10f %.10f\\n\", ans.x, ans.y);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string.h>\n#include<string>\n#include<cstdio>\n#include<algorithm>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<cmath>\n#include<utility>\n#include<set>\n#include<complex>\n#define ll long long int\n#define ld long double\n#define INF 1000000000\n#define EPS 0.0000000001\n#define rep(i,n) for(i=0;i<n;i++)\nusing namespace std;\n\ntypedef complex<double> P;\n\nstruct L : public vector<P>{//??´???\n  L(const P &a, const P &b){\n    push_back(a);push_back(b);\n  }\n};\n\nstruct C{//???\n  P c; double r;\n  C(const P &c,double r): c(c),r(r){}\n};\n\nnamespace std{//??????????????????\n  bool operator < (const P& a,const P& b){\n    return real(a)!= real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b)\n  }\n  bool operator == (const P& a,const P& b){\n    return a.real()==b.real()&&a.imag()==b.imag();\n  }\n}\n\ndouble dot(P a,P b){\n  return real(conj(a)*b);\n}\n\ndouble cross(P a,P b){\n  return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n  b-=a;c-=a;\n  if(cross(b,c)>0)   return +1;// counter clockwise \n  if(cross(b,c)<0)   return -1;// clockwise \n  if(dot(b,c)<0)     return +2;// c-a-b on line\n  if(norm(b)<norm(c))return -2;// a-b-c on line\n  return 0;                    // a-c-b on lone\n}\n\nP projection(P p1, P p2, P p){//p???p1p2???????°???±\n  P t=dot(p2-p1,p-p1)/norm(p2-p1)*(p2-p1);\n  return p1+t;\n}\n\nint main()\n{\n  double xp1,yp1,xp2,yp2;\n  int q;\n  int i,j;\n\n  cin>>xp1>>yp1>>xp2>>yp2;\n  cin>>q;\n\n  P p1(xp1,yp1),p2(xp2,yp2);\n\n  rep(i,q){\n    double xp,yp;\n    cin>>xp>>yp;\n    P p(xp,yp);\n    P ans=projection(p1,p2,p);\n    printf(\"%.10f %.10f\\n\",ans.real(),ans.imag());\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define _GLIBCXX_DEBUG\nusing namespace std;\nusing ll = long long;\nusing vec = vector<ll>;\nusing vect = vector<double>;\nusing Graph = vector<vector<ll>>;\n#define loop(i, n) for (ll i = 0; i < n; i++)\n#define Loop(i, m, n) for (ll i = m; i < n; i++)\n#define pool(i, n) for (ll i = n; i >= 0; i--)\n#define Pool(i, m, n) for (ll i = n; i >= m; i--)\n#define mod 1000000007ll\n#define setbit bitset<8>\n#define flagcount __builtin_popcount\n#define flag(x) (1 << x)\n#define flagadd(bit, x) bit |= flag(x)\n#define flagpop(bit, x) bit &= ~flag(x)\n#define flagon(bit, i) bit &flag(i)\n#define flagoff(bit, i) !(bit & (1 << i))\n#define all(v) v.begin(), v.end()\n#define low2way(v, x) lower_bound(all(v), x)\n#define high2way(v, x) upper_bound(all(v), x)\n#define count2way(v, x) high2way(v, x) - low2way(v, x)\n#define lower(v, x) low2way(v, x) - v.begin()       //1番左が0、もし見つから無いならｎを出力\n#define higher(v, x) high2way(v, x) - v.begin() - 1 //1番左が0、もし見つからないならn-1を出力（注意）\n#define putout(a) cout << a << endl\n#define putout2(a, b) \\\n    putout(a);        \\\n    putout(b)\n#define putout3(a, b, c) \\\n    putout(a);           \\\n    putout(b);           \\\n    putout(c)\n#define putout4(a, b, c, d) \\\n    putout(a);              \\\n    putout(b);              \\\n    putout(c);              \\\n    putout(d)\n#define putout5(a, b, c, d, e) \\\n    putout(a);                 \\\n    putout(b);                 \\\n    putout(c);                 \\\n    putout(d);                 \\\n    putout(e)\n#define Gput(a, b) G[a].push_back(b)\n#define cin1(a) cin >> a\n#define cin2(a, b) cin >> a >> b\n#define cin3(a, b, c) cin >> a >> b >> c\n#define cin4(a, b, c, d) cin >> a >> b >> c >> d\n#define cin5(a, b, c, d, e) cin >> a >> b >> c >> d >> e\n#define Sum(v) accumulate(all(v), 0ll)\n#define gcd(x, y) __gcd(x, y)\nll ctoi(char c)\n{\n    if (c >= '0' && c <= '9')\n    {\n        return c - '0';\n    }\n    return 0;\n}\ntemplate <typename T>\nT lcm(T x, T y)\n{\n    T z = gcd(x, y);\n    return x * y / z;\n}\ntemplate <typename T>\nbool primejudge(T n)\n{\n    if (n < 2)\n        return false;\n    else if (n == 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n    double sqrtn = sqrt(n);\n    for (T i = 3; i < sqrtn + 1; i++)\n    {\n        if (n % i == 0)\n        {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\ntemplate <typename T>\nT modinv(T a, T m)\n{\n    T b = m, u = 1, v = 0;\n    while (b)\n    {\n        T t = a / b;\n        a -= t * b;\n        swap(a, b);\n        u -= t * v;\n        swap(u, v);\n    }\n    u %= m;\n    if (u < 0)\n        u += m;\n    return u;\n}\n//場合によって使い分ける\n//const ll dx[4]={1,0,-1,0};\n//const ll dy[4]={0,1,0,-1};\nconst ll dx[8] = {1, 1, 0, -1, -1, -1, 0, 1};\nconst ll dy[8] = {0, 1, 1, 1, 0, -1, -1, -1};\n//多次元配列の宣言法\n//vector<vector<ll>> field(h, vector<ll>(w));\ntemplate <class T>\ninline void chmax(T &a, T b)\n{\n    if (a < b)\n        a = b;\n}\ntemplate <class T>\ninline void chmin(T &a, T b)\n{\n    if (a > b)\n        a = b;\n}\n/*\nライブラリをここに置いてコメントを削除\n*/\nstatic const double pi = 3.141592653589793;\n#define scan(x) scanf(\"%ld\", &x)\n\n//誤差チェッカー\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n//点を表わす構造体\nstruct Point\n{\npublic:\n    double x, y;\n    Point(double _x, double _y) : x(_x), y(_y) {}\n    /*\n    以下ベクトルに対する演算子の定義\n    +:ベクトルの足し算\n    -:ベクトルの引き算\n    *:スカラー倍\n    /:スカラーの逆数倍\n    */\n    Point operator+(const Point p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point p) { return Point(x - p.x, y - p.y); }\n    Point operator*(const double k) { return Point(x * k, y * k); }\n    Point operator/(const double k) { return Point(x / k, y / k); }\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y + y; }\n    //ベクトルの比較(x軸方向のベクトルから比較)\n    bool operator<(const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator>(const Point &p) const\n    {\n        return x != p.x ? x > p.x : y > p.y;\n    }\n    bool operator==(const Point &p) const\n    {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    bool operator!=(const Point &p) const\n    {\n        return (!equals(x, p.x)) || (!equals(y, p.y));\n    }\n};\n//ベクトルとして扱う場合\ntypedef Point Vector;\n//線分を表わす構造体\nstruct Segment\n{\n    Point p1, p2;\n    Segment(Point _p1, Point _p2) : p1(_p1), p2(_p2) {}\n};\n//直線として扱う場合\ntypedef Segment Line;\n//ベクトルのノルム\ndouble norm(Vector a)\n{\n    return a.x * a.x + a.y * a.y;\n}\n//ベクトルの大きさ\ndouble abs(Vector a)\n{\n    return sqrt(norm(a));\n}\n//ベクトルの内積\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n//ベクトルの外積\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n//内積≓0かどうかによるベクトルの直交判定(様々な引数で答えられるように複数用意)\nbool Orthogonal(Vector a, Vector b)\n{\n    return equals(dot(a, b), 0.0);\n}\nbool Orthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n    return Orthogonal(a1 - a2, b1 - b2);\n}\nbool Orthogonal(Segment s1, Segment s2)\n{\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n//外積≓0かどうかによるベクトルの平行判定(様々な引数で答えられるように複数用意)\nbool Parallel(Vector a, Vector b)\n{\n    return equals(cross(a, b), 0.0);\n}\nbool Parallel(Point a1, Point a2, Point b1, Point b2)\n{\n    return Parallel(a1 - a2, b1 - b2);\n}\nbool Parallel(Segment s1, Segment s2)\n{\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n//線分sに対して点ｐから垂線を引いたときの交点x(線分に対する点pの射影)\nPoint Project(Segment s, Point p)\n{\n    Vector base = s.p2 - s.p1, hypo = p - s.p1;\n    double scalar = (dot(base, hypo) / norm(base));\n    return s.p1 + base * scalar;\n}\n//座標cを中心とする半径rの円を表わす構造体\nstruct Circle\n{\npublic:\n    Point c;\n    double r;\n    Circle(Point _c, double _r) : c(_c), r(_r) {}\n};\n\n//多角形は点の列として扱う\ntypedef vector<Point> Polygon;\nint main()\n{\n    cout << fixed << setprecision(30);\n    double a1, a2, b1, b2;\n    cin >> a1 >> a2 >> b1 >> b2;\n    Point p1(a1, a2), p2(b1, b2);\n    Segment s(p1, p2);\n    ll q;\n    cin >> q;\n    loop(i, q)\n    {\n        double x, y;\n        cin >> x >> y;\n        Point p(x, y);\n        Point X = Project(s, p);\n        cout << X.x << \" \" << X.y << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<functional>\n#include<vector>\n#include<queue>\n#include<complex>\nusing namespace std;\n#define f(i,n) for(int i=0;i<(int)n;i++)\n#define MOD 1000000009\n#define MIN (1e-10)\ntypedef complex<long double> P;\nbool EQ(P a, P b){\n\tif (abs(a.real() - b.real()) < MIN&&abs(a.imag() - b.imag()) < MIN)return true;\n\telse return false;\n}\nlong double dot(P a, P b){\n\treturn{ a.real()*b.real() + a.imag()*b.imag() };\n}\nlong double cross(P a, P b){\n\treturn{ a.real()*b.imag() - a.imag()*b.real() };\n}\nP insec(P a1, P a2, P b1, P b2){\n\tP a, b;\n\ta = a2 - a1;\n\tb = b2 - b1;\n\treturn a1 + (a*cross(b, b1 - a1) / cross(b, a));\n}\nvoid print(double x,int k){\n\tif (x < 0){\n\t\tprintf(\"-\");\n\t\tx = -x;\n\t}\n\tprintf(\"%d.\", (int)x);\n\tx = x - (double)(int)x;\n\tf(i, k){\n\t\tx = x * 10;\n\t\tprintf(\"%d\", (int)x);\n\t\tx = x - (double)(int)x;\n\t}\n\treturn;\n}\n\nint main(void){\n\tP a, b, c;\n\tP d, e, f;\n\tlong double x, y;\n\tint n;\n\tscanf(\"%lf %lf\", &x, &y);\n\ta = P(x, y);\n\tscanf(\"%lf %lf\", &x, &y);\n\tb = P(x, y);\n\tf = (b - a)*P(0, 1);\n\tscanf(\"%d\", &n);\n\tf(i, n){\n\t\tscanf(\"%lf %lf\", &x, &y);\n\tc = P(x, y);\n\td = c + f;\n\te = insec(a, b, c, d);\n\tprint(e.real(),10);\n\tprintf(\" \");\n\tprint(e.imag(),10);\n\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(_x), y(_y){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator*(double k){ return Point(x * k, y * k); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\tdouble res = a.x*b.x + a.y*b.y;\n\treturn res;\n}\n\ndouble cross(Vector a, Vector b){\n\tdouble res = a.x*b.y - a.y*b.x;\n\treturn res;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tVector v = p - s.p1;\n\tdouble l = dot(v, base) / base.norm();\n\treturn s.p1 + base * l;\n}\n\nint main(){\n\tSegment s;\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tint n;\n\tcin >> n;\n\tcin.precision(20);\n\tfor (int i = 0; i < n; ++i){\n\t\tPoint pp;\n\t\tcin >> pp.x >> pp.y;\n\t\tPoint res = project(s, pp);\n\t\tcout << res.x << \" \" << res.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\nusing namespace std;\n\nint main()\n{\n    double xp1, yp1, xp2, yp2, xp, yp;\n    int q;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    cin >> q;\n\n    for( int i = 0; i < q; i++ )\n    {\n        cin >> xp >> yp;\n\n        double a, b, x, y;\n        a = xp2 - xp1;\n        b = yp2 - yp1;\n\n        if( a == 0 )\n            cout << fixed << setprecision(10) << xp1 << \" \" << yp << endl;\n        else if( b == 0 )\n            cout << fixed << setprecision(10) << xp << \" \" << yp1 << endl;\n        else\n        {\n            x = ( yp - yp1 + a * xp / b + b * xp1 / a ) / ( b / a + a / b );\n            y = -1 * a * x / b + yp + a * xp / b;\n            cout << fixed << setprecision(10) << x << \" \" << y << endl;\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\n\nint projection(double xp1, double yp1, double xp2, double yp2, double* px, double* py)\n{\n    if (xp1 == xp2 && yp1 == yp2) {\n        return 1;\n    } else if (xp1 == xp2) {\n        *px = xp1;\n        return 0;\n    } else {\n        double dist = sqrt(pow((xp2 - xp1), 2) + pow((yp2 - yp1), 2));\n        double cos = (xp2 - xp1) / dist;\n        double sin = (yp2 - yp1) / dist;\n        double xrot = cos * (*px) + sin * (*py);\n        double yrot = -sin * (*px) + cos * (*py);\n        yrot = 0;\n        *px = cos * xrot - sin * yrot;\n        *py = sin * xrot + cos * yrot;\n        return 0;\n    }\n}\n\n\nint main()\n{\n\tdouble xp1 = 0, yp1 = 0, xp2 = 0, yp2 = 0;\n    double x = 0, y = 0;\n    double* px = &x;\n    double* py = &y;\n\tchar ch;\n\t// cout << \"input:\";\n\tcin >> xp1 >> yp1 >> xp2 >> yp2;\n\tunsigned int q, i;\n    // cout << \"number of points:\";\n\tcin >> q;\n\tfor (i = 0; i < q; i++){\n        // cout << \"point \" << i << \":\";\n\t\tcin >> x >> y;\n        projection(xp1, yp1, xp2, yp2, &x, &y);\n\t\tcout << x << \" \" << y << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long   // <-----!!!!!!!!!!!!!!!!!!!\n\n#define rep(i,n) for (int i=0;i<(n);i++)\n#define rep2(i,a,b) for (int i=(a);i<(b);i++)\n#define rrep(i,n) for (int i=(n)-1;i>=0;i--)\n#define rrep2(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define all(a) (a).begin(),(a).end()\n\ntypedef long long ll;\ntypedef pair<int, int> Pii;\ntypedef tuple<int, int, int> TUPLE;\ntypedef vector<int> V;\ntypedef vector<V> VV;\ntypedef vector<VV> VVV;\n\ntypedef complex<double> P;\n\ndouble dot(P a, P b) {\n    return real(conj(a) * b);\n}\n\nP project(P x, P d) {\n    return dot(x, d) * d / abs(d) / abs(d);\n}\n\nsigned main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    P p0(x0, y0), p1(x1, y1);\n    int q;\n    cin >> q;\n    while (q--) {\n        double x2, y2;\n        cin >> x2 >> y2;\n        P p2(x2, y2);\n        P a = project(p2 - p0, p1 - p0) + p0;\n        printf(\"%.10f %.10f\\n\", a.real(), a.imag());\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<iostream>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\n#define FOR(k,m,n) for(int (k)=(m);(k)<(n);(k)++)\n#define REP(i,n) FOR((i),0,(n))\n\n\n//???\n\n//???\nclass Point{\npublic:\n\tdouble x, y;\n\t//?????????????????????\n\tPoint(double x_=0.0,double y_=0.0):x(x_),y(y_){}\n\t\n\t//??????????????????????????????\n\tPoint operator + (Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double k) { return Point(x * k, y * k); }\n\tPoint operator / (double k) { return Point(x / k, y / k); }\n\n\tbool operator  < (const Point &p) {\n\t\treturn x!=p.x ? x<p.x : y<p.y;\n\t}\n\tbool operator == (const Point &p) {\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;        //????????????\nstruct Segment{Point p1,p2;};//??????\ntypedef Segment Line;        //??´???\n\n//???\nclass Circle {\npublic:\n\tPoint center;\n\tdouble r;\n\t//?????????????????????\n\tCircle(Point c_=Point(),double r_=0.0):center(c_),r(r_){}\n};\ntypedef vector<Point> Polygon;//????§???¢??????????????????\n\n\n\n//??¢??°????????????\n//????????¢??°??????\nnamespace PFunc {\n\tdouble norm(Point p) { return p.x*p.x + p.y*p.y; }\n\tdouble abs(Point p) { return sqrt(norm(p)); }\n}\n\n//?????????????????¢??°??????\nnamespace VFunc {\n\t//??????\n\tdouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n\t//??????\n\tdouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\t//??´?????????????¨????\n\tbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\tbool isOrthogonal(Point a1,Point  a2, Point b1,Point b2) {return isOrthogonal(a1-a2,b1-b2);}\n\tbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\t//????????????????¨????\n\tbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\tbool isParallel(Point a1, Point  a2, Point b1, Point b2) {return isParallel(a1 - a2, b1 - b2);}\n\tbool isParallel(Segment s1, Segment s2) {return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\n\t//?°???±\n\tPoint project(Segment s, Point p) {\n\t\tPoint base = s.p2 - s.p1;\n\t\tdouble r = dot(p - s.p1, base) / PFunc::norm(base);\n\t\treturn s.p1 + base*r;\n\t}\n}\n\nSegment s;\nint q;\nPoint temp,ans;\n\nint main() {\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tcin>>q;\n\tREP(i, q) {\n\t\tcin>>temp.x>>temp.y;\n\t\tans=VFunc::project(s,temp);\n\t\tcout<<ans.x<<\" \"<<ans.y<<endl;\n\t}\n\tcin>>q;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<cstdio>\n#define EPS (1e-10)\n#define equal(a,b)  fabs((a)-(b))<EPS\nusing namespace std;\nstruct Point{\n\tdouble x,y;\n\tPoint(double _x,double _y):x(_x),y(_y){  }\n\tPoint operator + (const Point &a){\n\t\treturn Point(x+a.x,y+a.y);\n\t}\n\tPoint operator - (const Point &a){\n\t\treturn Point(x-a.x,y-a.y);\n\t}\n\tPoint operator *(double k){\n\t\treturn Point (k*x,k*y);\n\t}\n\tPoint operator /(double k){\n\t\treturn Point(x/k,y/k);\n\t}\n\t\n\tfriend double norm(const Point &a){\n\t\treturn a.x*a.x+a.y*a.y;\n\t}\n\tfriend double abs(const Point &a){\n\t\treturn sqrt(norm(a));\n\t}\n\t\n\tfriend double dot(const Point &a,const Point &b){\n\t\treturn a.x*b.x+a.y*b.y;\n\t}\n\tfriend double cross(const Point &a,const Point &b){\n\t\treturn fabs(a.x*b.y-b.x*a.y);\n\t}\n};\ntypedef Point Vector;\nbool isOrthogonal(const Vector &a,const Vector & b){\n\treturn equal(cross(a,b),0.0);\n}\nbool isParallel(const Vector &a,const Vector &b){\n\treturn equal(dot(a,b),0.0);\n}\n\nint main(){\n\tint x1,x2,y1,y2,q;\n\tcin>>x1>>y1>>x2>>y2>>q;\n\tPoint a(x1,y1),b(x2,y2);\n\twhile(q--){\n\t\tint x3,y3;\n\t\tcin>>x3>>y3;\n\t\tPoint c(x3,y3);\n\t\tdouble t=dot(c-a,b-a)/abs(b-a);\n\t\tVector det= (b-a) / abs(b-a) *t;\n\t\tPoint ort=a+det;\n\t\tprintf(\"%.10f %.10f\\n\",ort.x,ort.y);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#define eps 1e-8\nusing namespace std;\nstruct point{\n\tdouble x,y;\n\tvoid read(){scanf(\"%lf%lf\",&x,&y);}\n\tvoid write(){printf(\"%.8f %.8f\\n\",x,y);}\n\tpoint(double X=0.0,double Y=0.0):x(X),y(Y){}\n\tpoint operator +(const point a)const{return point(x+a.x,y+a.y);}\n\tpoint operator -(const point a)const{return point(x-a.x,y-a.y);}\n\tpoint operator *(double a)const{return point(x*a,y*a);}\n\tpoint operator /(double a)const{return point(x/a,y/a);} \n};\ndouble dis(point a){return sqrt(a.x*a.x+a.y*a.y);}\ndouble dot(point a,point b){return a.x*b.x+a.y*b.y;}\ndouble cross(point a,point b){return a.x*b.y-a.y*b.x;}\n\npoint p1,p2;\nint main()\n{\n\tint n;\n\tp1.read();p2.read();\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tpoint p;\n\t\tp.read();\n\t\tdouble len=dot(p2-p1,p-p1)/dis(p2-p1);\n\t\t(p1+(p2-p1)/dis(p2-p1)*len).write();\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pu push\n#define pb push_back\n#define mp make_pair\n#define eps 1e-9\n#define Vector Point\n#define INF 2000000000\n#define sq(x) ((x)*(x))\n#define sz(x) ((int)(x).size())\n#define fi first\n#define sec second\n#define SORT(x) sort((x).begin(),(x).end())\n#define all(x) (x).begin(),(x).end()\n#define EQ(a,b) (abs((a)-(b))<eps)\n\n// ***** 幾何ライブラリ　線分と直線に注意!! 誤差に注意すること!! *****\n\ninline double add(double a,double b){\n\tif(abs(a+b)<eps*(abs(a)+abs(b)))return 0;\n\treturn a+b;\n}\n\nstruct Point{\n\tdouble x,y;\n\tPoint() {}\n\tPoint(double x,double y) : x(x),y(y){}\n\tPoint operator + (Point p){return Point(add(x,p.x),add(y,p.y));}\n\tPoint operator - (Point p){return Point(add(x,-p.x),add(y,-p.y));}\n\tPoint operator * (double d){return Point(x*d,y*d);}\n\tdouble dot(Point p){return add(x*p.x,y*p.y);}\n\tdouble det(Point p){return add(x*p.y,-y*p.x);}\n\tdouble norm(){return sqrt(x*x+y*y);}\n\tdouble norm2(){return x*x+y*y;}\n\tdouble dist2(Point p){return sq(x-p.x)+sq(y-p.y);}\n\tPoint vert(){return Point(y,-x);}\n\tvoid dump(const char* msg=\"\"){printf(\"%s(%.12f,%.12f)\\n\",msg,x,y);return;}\n\t\n\t// following functions for vector operation\n\n\t// signed area of triange (0,0) (x,y) (p.x,p.y)\n\tdouble area(Point p){\n\t\treturn (x*p.y-p.x*y)/2.0;\n\t}\n\n};\nstruct Line{\n\tPoint a,b;\n\tLine(){}\n\tLine(Point a,Point b):a(a),b(b){}\n\tbool on(Point q){\n\t\treturn (a-q).det(b-q)==0; \n\t}\n\tbool is_parallel(Line l){\n\t\treturn (a-b).det(l.a-l.b)==0;\n\t}\n\tPoint intersection(Line l){\n\t\tassert(!is_parallel(l));\n\t\treturn a+(b-a)*((l.b-l.a).det(l.a-a)/(l.b-l.a).det(b-a));\n\t}\n\t// projection of p to this line\n\t// verified AOJ CGL_1_A\n\tPoint projection(Point p){\n\t\treturn (b-a)*((b-a).dot(p-a)/(b-a).norm2())+a;\n\t}\n};\nstruct Segment{\n\tPoint a,b;\n\tSegment(){}\n\tSegment(Point a,Point b):a(a),b(b){}\n\tLine line(){\n\t\treturn Line(a,b);\n\t}\n\tbool on(Point q){\n\t\treturn ((a-q).det(b-q)==0&&(a-q).dot(b-q)<=0); \n\t}\n\tbool is_intersect(Segment s){\n\t\tif(a.x>b.x)swap(a,b);\n\t\tif(s.a.x>s.b.x)swap(s.a,s.b);\n\t\tPoint k = line().intersection(s.line());\n\t\tif((a.x<=k.x)&&(k.x<=b.x)&&(s.a.x<=k.x)&&(k.x<=s.b.x))return true;\n\t\telse return false;\n\t}\n\tbool is_intersect(Line l){\n\t\tif(a.x>b.x)swap(a,b);\n\t\tif(l.a.x>l.b.x)swap(l.a,l.b);\n\t\tPoint k = line().intersection(l);\n\t\tif((a.x<=k.x)&&(k.x<=b.x))return true;\n\t\telse return false;\n\t}\n};\ntypedef vector<Point> Polygon;\n\nint main(){\n\tPoint p1,p2;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tint q;\n\tcin >> q;\n\tfor(int i=0;i<q;i++){\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\t\tPoint ans = Line(p1,p2).projection(p);\n\t\tcout << setprecision(30) << ans.x << ' ' << ans.y << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n#ifdef _DEBUG\n#include \"dump.hpp\"\n#else\n#define dump(...)\n#endif\n\n//#define int long long\n#define rep(i,a,b) for(int i=(a);i<(b);i++)\n#define rrep(i,a,b) for(int i=(b)-1;i>=(a);i--)\n#define all(c) begin(c),end(c)\nconst int INF = sizeof(int) == sizeof(long long) ? 0x3f3f3f3f3f3f3f3fLL : 0x3f3f3f3f;\nconst int MOD = 1'000'000'007;\ntemplate<class T> bool chmax(T &a, const T &b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (b < a) { a = b; return true; } return false; }\n\ntemplate<typename T>\nvector<T> gen_v(size_t a) { return vector<T>(a); }\ntemplate<typename T, typename ...Ts>\nauto gen_v(size_t a, Ts... ts) { return vector<decltype(gen_v<T>(ts...))>(a, gen_v<T>(ts...)); }\ntemplate<typename T, typename V>\ntypename enable_if<is_class<T>::value == 0>::type\nfill_v(T &t, const V &v) { t = v; }\ntemplate<typename T, typename V>\ntypename enable_if<is_class<T>::value != 0>::type\nfill_v(T &t, const V &v) { for (auto &e : t) fill_v(e, v); }\n\n//#define double long double\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define next(P,i) P[(i+1)%P.size()]\n#define prev(P,i) P[(i+P.size()-1)%P.size()]\n\n// 点\n#define X real()\n#define Y imag()\nusing Point = complex<double>;\nbool operator==(const Point &p1, const Point &p2) { return equals(p1.X, p2.X) && equals(p1.Y, p2.Y); }\nbool cmpx(const Point &p1, const Point &p2) {\n\treturn p1.X != p2.X ? p1.X < p2.X : p1.Y < p2.Y; // x昇順 -> y昇順\n}\nbool cmpy(const Point &p1, const Point &p2) {\n\treturn p1.Y != p2.Y ? p1.Y < p2.Y : p1.X < p2.X; // y昇順 -> x昇順\n}\nbool operator<(const Point &p1, const Point &p2) {\n\treturn cmpx(p1, p2); // 問題に応じて cmpy\n}\nbool operator>(const Point &p1, const Point &p2) { return p2 < p1; }\ninline istream &operator >> (istream &is, Point &p) { double x, y; is >> x >> y; p = Point(x, y); return is; }\ninline ostream &operator << (ostream &os, const Point &p) { os << p.X << ' ' << p.Y; return os; }\n\n// ベクトル\nusing Vector = Point;\nVector rotate(Vector vec, double rad) { return Vector(vec.X*cos(rad) - vec.Y * sin(rad), vec.X*sin(rad) + vec.Y * cos(rad)); }\nVector unit(Vector vec) { return vec / abs(vec); }\n// 内積（dot product）\ndouble dot(Vector a, Vector b) { return a.X*b.X + a.Y*b.Y; }\n// 外積（cross product）の大きさ（正負あり）\ndouble cross(Vector a, Vector b) { return a.X*b.Y - a.Y*b.X; }\n\n// 直線\nstruct Line {\n\tPoint p1, p2;\n\tLine() {}\n\tLine(Point p1, Point p2) :p1(p1), p2(p2) {}\n};\n\n// 線分\nstruct Segment :public Line {\n\tusing Line::Line;\n\tSegment() {}\n\tSegment(const Line &L) { p1 = L.p1; p2 = L.p2; }\n\tVector vec() { return p2 - p1; }\n};\n\n// 円\nstruct Circle {\n\tPoint c; // center\n\tdouble r; // radius\n\tCircle() {}\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n\n// 多角形\nusing Polygon = vector<Point>;\n\n// degree to radian\ndouble rad(double deg) { return PI * deg / 180; }\n// radian to degree\ndouble deg(double rad) { return rad / PI * 180; }\n\n// 2つのベクトルの角度\ndouble angle(Vector a, Vector b) {\n\tdouble lena = abs(a), lenb = abs(b);\n\tif (lena == 0 || lenb == 0)return 0; //解なし\n\tdouble costheta = dot(a, b) / (lena*lenb);\n\tif (equals(costheta, 1))costheta = 1; //誤差対策\n\treturn acos(costheta);\n}\n\nbool inrange(Point p, double x1, double y1, double x2, double y2) {\n\treturn x1 <= p.X&&p.X <= x2 && y1 <= p.Y&&p.Y <= y2;\n}\n\n// 直交判定\nbool is_orthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\nbool is_orthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n// 平行判定（非交差判定）\nbool is_parallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool is_parallel(Segment s1, Segment s2) { return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n// 射影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\n// 反射\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p)*2.0; }\n\n// 線分(p0,p1)に対するp2の位置関係\nenum { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK; //p2 p0 p1\n\tif (norm(a) < norm(b))return ONLINE_FRONT; //p0 p1 p2\n\treturn ON_SEGMENT;\n}\nint ccw(Vector a, Vector b) {\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK; //p2 p0 p1\n\tif (norm(a) < norm(b))return ONLINE_FRONT; //p0 p1 p2\n\treturn ON_SEGMENT;\n}\n\n// 線分と線分の交差判定\nbool intersect(Segment a, Segment b) {\n\tPoint p1 = a.p1, p2 = a.p2, p3 = b.p1, p4 = b.p2;\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\n// (交差判定続く)\n\n// 2点間の距離\ndouble get_distance(Point a, Point b) { return abs(a - b); }\n\n// 直線と点の距離\ndouble get_distance(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1)); }\n\n// 線分と点の距離\ndouble get_distance(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return abs(p - s.p2);\n\treturn get_distance(Line(s), p);\n}\n\n// 線分と線分の距離\ndouble get_distance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn\tmin(\n\t\tmin(get_distance(s1, s2.p1), get_distance(s1, s2.p2)),\n\t\tmin(get_distance(s2, s1.p1), get_distance(s2, s1.p2))\n\t);\n}\n\n// 円と直線の交差判定\nbool intersect(Circle c, Line l) { return get_distance(l, c.c) <= c.r + EPS; }\n\n// 円と円の交差判定 共通接線の数\nint intersect(Circle c1, Circle c2) {\n\tdouble d = get_distance(c1.c, c2.c);\n\tif (d > c1.r + c2.r)return 4;\n\tif (d == c1.r + c2.r)return 3;\n\tif (d + c1.r == c2.r || d + c2.r == c1.r)return 1;\n\tif (d + c1.r < c2.r || d + c2.r < c1.r)return 0;\n\treturn 2;\n}\n\n// 線分と線分の交点\nPoint get_cross_point(Segment a, Segment b) {\n\tassert(intersect(a, b));\n\tVector base = b.p2 - b.p1;\n\tdouble area1 = abs(cross(base, a.p1 - b.p1));\n\tdouble area2 = abs(cross(base, a.p2 - b.p1));\n\tdouble t = area1 / (area1 + area2);\n\treturn a.p1 + (a.p2 - a.p1)*t;\n}\n\n// 円と直線の交点\npair<Point, Point> get_cross_points(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r*c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 円と円の交点\npair<Point, Point> get_cross_points(Circle c1, Circle c2) {\n\tint m = intersect(c1, c2);\n\tassert(m != 4 && m != 0);\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r*c1.r - c2.r*c2.r + d * d) / (2 * c1.r*d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n// 点の内包\nenum { OUT = 0, ON, IN };\nint contains(const Polygon &pl, Point p) {\n\tint n = pl.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = pl[i] - p, b = pl[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS&&dot(a, b) < EPS)return ON;\n\t\tif (a.Y > b.Y)swap(a, b);\n\t\tif (a.Y < EPS&&EPS<b.Y&&cross(a, b)>EPS)x = !x;\n\t}\n\treturn (x ? IN : OUT);\n}\n\nint contains(Circle c, Point p) {\n\tdouble d = get_distance(c.c, p);\n\tif (equals(d, c.r))return ON;\n\tif (d < c.r)return IN;\n\treturn OUT;\n}\n\n// 多角形の面積\ndouble area(const Polygon &p) {\n\tdouble a = 0;\n\tfor (size_t i = 0; i < p.size(); i++)\n\t\ta += cross(p[i], p[(i + 1) % p.size()]);\n\treturn fabs(a / 2.0);\n}\n\n// 凸性判定（反時計回り）\nbool is_convex(Polygon g) {\n\tfor (size_t i = 0; i < g.size(); i++)\n\t\tif (ccw(g[i], g[(i + 1) % g.size()], g[(i + 2) % g.size()]) == CLOCKWISE)\n\t\t\treturn false;\n\treturn true;\n}\n\n// 凸包\n// Graham scan https://en.wikipedia.org/wiki/Graham_scan\n// 辺上の点を含めない\nPolygon convex_hull(Polygon P) {\n\tsort(P.begin(), P.end(), cmpx);\n\tPolygon up;\n\tfor (Point &p : P) {\n\t\twhile (up.size() > 1 && ccw(up[up.size() - 2], up[up.size() - 1], p) != CLOCKWISE)up.pop_back();\n\t\tup.emplace_back(p);\n\t}\n\tPolygon down;\n\tfor (Point &p : P) {\n\t\twhile (down.size() > 1 && ccw(down[down.size() - 2], down[down.size() - 1], p) != COUNTER_CLOCKWISE)down.pop_back();\n\t\tdown.emplace_back(p);\n\t}\n\treverse(up.begin(), up.end()); //反時計回りに\n\tdown.insert(down.end(), up.begin() + 1, up.end() - 1);\n\treturn down;\n}\n\n// 凸包\n// Graham scan https://en.wikipedia.org/wiki/Graham_scan\n// 辺上の点を含む\nPolygon convex_hull_with_points_online(Polygon P) {\n\tsort(P.begin(), P.end(), cmpx);\n\tPolygon up;\n\tfor (Point &p : P) {\n\t\tint _ccw;\n\t\twhile (up.size() > 1 && (_ccw = ccw(up[up.size() - 2], up[up.size() - 1], p)) != CLOCKWISE && _ccw != ONLINE_FRONT)\n\t\t\tup.pop_back();\n\t\tup.emplace_back(p);\n\t}\n\tPolygon down;\n\tfor (Point &p : P) {\n\t\tint _ccw;\n\t\twhile (down.size() > 1 && (_ccw = ccw(down[down.size() - 2], down[down.size() - 1], p)) != COUNTER_CLOCKWISE && _ccw != ONLINE_FRONT)\n\t\t\tdown.pop_back();\n\t\tdown.emplace_back(p);\n\t}\n\treverse(up.begin(), up.end()); //反時計回りに\n\tdown.insert(down.end(), up.begin() + 1, up.end() - 1);\n\treturn down;\n}\n\n// 凸多角形の最遠頂点対間距離\n// calipers https://en.wikipedia.org/wiki/Rotating_calipers\ndouble diameter(Polygon P) {\n\tP = convex_hull(P);\n\tauto mima = minmax_element(P.begin(), P.end(), cmpx);\n\tint I = mima.first - P.begin();\n\tint J = mima.second - P.begin();\n\tdouble maxd = get_distance(P[I], P[J]);\n\n\tint maxi, maxj, i, j;\n\ti = maxi = I;\n\tj = maxj = J;\n\tdo {\n\t\tif (ccw(next(P, i) - P[i], next(P, j) - P[j]) == COUNTER_CLOCKWISE)\n\t\t\tj = (j + 1) % P.size();\n\t\telse\n\t\t\ti = (i + 1) % P.size();\n\t\tif (maxd < get_distance(P[i], P[j])) {\n\t\t\tmaxd = get_distance(P[i], P[j]);\n\t\t\tmaxi = i, maxj = j;\n\t\t}\n\t} while (!(i == I && j == J));\n\treturn maxd;\n}\n\n// 多角形を(0,0)を中心として回転\nPolygon rotate(const Polygon &P, double rad) {\n\tPolygon ret;\n\tfor (auto &p : P)\n\t\tret.emplace_back(p.X*cos(rad) - p.Y*sin(rad), p.X*sin(rad) + p.Y*cos(rad));\n\treturn ret;\n}\n\n// Heron's formula\ndouble area(double a, double b, double c) {\n\tdouble s = (a + b + c) / 2;\n\treturn sqrt(s*(s - a)*(s - b)*(s - c));\n}\n\n// 多角形の重心\nPoint center(const Polygon &P) {\n\tPoint ret;\n\tfor (auto &p : P)ret = ret + p;\n\tret = ret / (double)P.size();\n\treturn ret;\n}\n\n// 垂直二等分線\nLine get_bisection(const Point &p1, const Point &p2) {\n\tCircle c1(p1, INF), c2(p2, INF); //INF だと誤差が酷い\n\tauto ps = get_cross_points(c1, c2);\n\treturn Line(ps.first, ps.second);\n}\n\n// 3点から距離が等しい点 (3点を円周上に持つ円の中心)\nPoint get_center(const Point &p1, const Point &p2, const Point &p3) {\n\tLine l1 = get_bisection(p1, p2), l2 = get_bisection(p2, p3);\n\treturn get_cross_point(l1, l2);\n}\n\n// 点pを通る円cの接線における接点\npair<Point, Point> get_tangent(const Circle &c, const Point &p) {\n\tdouble d = get_distance(c.c, p);\n\tCircle c2((c.c + p) / 2.0, d / 2.0);\n\treturn get_cross_points(c, c2);\n}\n\nsigned main() {\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tcout << fixed << setprecision(10);\n\tPoint p1, p2; cin >> p1 >> p2;\n\tSegment s(p1, p2);\n\tint q; cin >> q;\n\trep(i, 0, q) {\n\t\tPoint p; cin >> p;\n\t\tcout << project(s, p) << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<cstdio>\nusing namespace std;\n \nclass Point{\npublic:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n \n  Point operator+(Point p){return Point(x+p.x,y+p.y);}\n  Point operator-(Point p){return Point(x-p.x,y-p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n \n  double abs(){return sqrt(norm());}\n \n  double norm(){return (x*x+y*y);}\n};\ntypedef Point Vector;\n \nclass Segment{\npublic:\n  Point p1,p2;\n  Segment(Point p1,Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n \ndouble dot(Vector a,Vector b){return (a.x*b.x+a.y*b.y);}\ndouble cross(Vector a,Vector b){return (a.x*b.y-a.y*b.x);}\n \nPoint project(Segment s,Point p){\n  Vector base=(s.p2-s.p1);\n  double r=(dot(p-s.p1,base)/base.norm());\n  return (s.p1+base*r);\n}\n \nint main()\n{\n  Point A,B,C,D;\n  int q;\n \n  cin>>A.x>>A.y>>B.x>>B.y;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    cin>>C.x>>C.y;\n    D=project(Segment(A,B),C);\n    printf(\"%.10f %.10f\\n\",D.x,D.y);\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#include <cstdio>\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\nusing namespace std;\n\ntypedef complex<double> Point; // 点\ntypedef Point Vector; // ベクトル\n\nstruct Segment{ // 線分\n  Point p1, p2;\n  Segment(){};\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}; // p1,p2をセット\n};\n\ntypedef Segment Line; // 直線\n\ntypedef vector<Point> Polygon; // 多角形\n\ndouble dotproduct(Vector a, Vector b) // 内積\n{\n  return real((conj(a) * b));\n}\n\ndouble crossproduct(Vector a, Vector b) // 外積\n{\n  return imag(conj(a) * b);\n}\n\ndouble dist(Point p1, Point p2) // 二点間の距離\n{\n  return abs(p1 - p2);\n}\n\nPoint project(Line l, Point p){ // 射影\n  double r = dotproduct(p - l.p1, l.p2 - l.p1) / norm(l.p2 - l.p1);\n  return l.p1 + (l.p2 - l.p1) * r;\n}\n\n#define EQ(a, b) (abs((a) - (b)) < EPS) // 二つのスカラーが等しいかどうか\n#define EQV(a, b) (EQ((a).X, (b).X) && EQ((a).Y, (b).Y)) // 二つのベクトルが等しいかどうか\n\nint main()\n{\n  Point p, q;\n  cin >> p.X >> p.Y >> q.X >> q.Y;\n  Line l(p,q);\n  int n;\n  cin >> n;\n  for(int i = 0; i < n; i++){\n    Point x;\n    cin >> x.X >> x.Y;\n    printf(\"%.10lf %.10lf\\n\", project(l, x).X, project(l, x).Y);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\n\nusing namespace std;\n\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nvoid vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n}\n\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならばfalseを返す*/\n\nbool intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n/*2点(x1,y1), (x2,y2) の距離*/\nbool distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n\n\n\nint main(int argc, const char * argv[])\n{\n    double x1,x2,y1,y2,a,b,c;\n    cin>>x1>>y1>>x2>>y2;\n    \n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    \n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        double x,y,a2,b2,c2;\n        cin>>x>>y;\n        vertical_straight_line(x, y, a, b, c, &a2, &b2, &c2);\n        //cout<<a<<b<<c<<endl;\n        //cout<<a2<<b2<<c2<<endl;\n        double ans_x, ans_y;\n        intersection_and_parallel(a, b, c, a2, b2, c2, &ans_x, &ans_y);\n        cout<<ans_x<<\" \"<<ans_y<<endl;\n    }\n    \n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define trav(a, x) for(auto& a : x)\n#define all(x) x.begin(), x.end()\n#define sz(x) (int)(x).size()\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntemplate<class T>\nstruct Point {\n\ttypedef Point P;\n\tT x, y;\n\texplicit Point(T x=0, T y=0) : x(x), y(y) {}\n\tbool operator<(P p) const { return tie(x,y) < tie(p.x,p.y); }\n\tbool operator==(P p) const { return tie(x,y)==tie(p.x,p.y); }\n\tP operator+(P p) const { return P(x+p.x, y+p.y); }\n\tP operator-(P p) const { return P(x-p.x, y-p.y); }\n\tP operator*(T d) const { return P(x*d, y*d); }\n\tP operator/(T d) const { return P(x/d, y/d); }\n\tT dot(P p) const { return x*p.x + y*p.y; }\n\tT cross(P p) const { return x*p.y - y*p.x; }\n\tT cross(P a, P b) const { return (a-*this).cross(b-*this); }\n\tT dist2() const { return x*x + y*y; }\n\tdouble dist() const { return sqrt((double)dist2()); }\n\t// angle to x-axis in interval [-pi, pi]\n\tdouble angle() const { return atan2(y, x); }\n\tP unit() const { return *this/dist(); } // makes dist()=1\n\tP perp() const { return P(-y, x); } // rotates +90 degrees\n\tP normal() const { return perp().unit(); }\n\t// returns point rotated 'a' radians ccw around the origin\n\tP rotate(double a) const {\n\t\treturn P(x*cos(a)-y*sin(a),x*sin(a)+y*cos(a)); }\n};\n\nusing P = Point<double>;\n\nint main(){\n\tios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tcout << fixed << setprecision(10);\n\tP p1, p2;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tint q;\n\tcin >> q;\n\tfor(int i = 0; i < q; i++){\n\t\tP p;\n\t\tcin >> p.x >> p.y;\n\t\tP proj = p - (p2 - p1).normal() * p.dot((p2 - p1).normal());\n\t\tcout << proj.x << \" \" << proj.y << '\\n';\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a*x, a*y); }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\n\nint main() {\n\tint q;\n\tPoint p, p1, p2;\n\tSegment s;\n\n\tscanf(\"%lf %lf %lf %lf\", &p1.x, &p1.y, &p2.x, &p2.y);\n\tscanf(\"%d\\n\", &q);\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%lf %lf\", &p.x,&p.y);\n\t\tprintf(\"%lf\\n\", project(s, p));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i=0; i<(n); i++)\n#define rep2(i,x,n) for(int i=x; i<(n); i++)\n#define ALL(n) begin(n),end(n)\n#define INF ((1<<30)-1)\n#define LINF (1LL<<60)\n#define EPS (1e-10)\ntypedef long long Int;\ntypedef pair<Int, Int> P;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n\nint main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    int xp1,yp1,xp2,yp2;\n    int q;\n    cin>>xp1>>yp1>>xp2>>yp2;\n    cin>>q;\n    auto va = P(xp2-xp1,yp2-yp1);\n    for(int i=0; i<q; i++){\n        int x,y;\n        cin>>x>>y;\n        auto vb=P(x-xp1,y-yp1);\n        Int vab=va.first*vb.first+va.second*vb.second;\n        Int vaa=va.first*va.first+va.second*va.second;\n        pair<double,double> oh;\n        oh.first=(double)va.first*vab/vaa;\n        oh.second=(double)va.second*vab/vaa;\n        double xans=oh.first+xp1/1.000000000;\n        double yans=oh.second+yp1/1.000000000;\n        cout<<std::fixed << std::setprecision(15)<<xans<<\" \"<<std::fixed << std::setprecision(15)<<yans<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\ntypedef double scalar;\nclass point{\n\tpublic:\n\tscalar x;\n\tscalar y;\n\tvoid print(){\n\t\tcout << x << \" \" << y; \n\t}\n\tscalar norm2(void){\n\t\treturn x * x + y * y;\n\t}\n\tscalar norm(void){\n\t\treturn sqrt(norm2());\n\t}\n\tpoint operator =(point a){\n\t\tthis->x = a.x;\n\t\tthis->y = a.y;\n\t\treturn *this;\n\t}\n\tpoint operator +(point a){\n\t\tpoint r;\n\t\tr.x = this->x + a.x;\n\t\tr.y = this->y + a.y;\n\t\treturn r;\n\t}\n\tpoint operator -(point a){\n\t\tpoint r;\n\t\tr.x = this->x - a.x;\n\t\tr.y = this->y - a.y;\n\t\treturn r;\n\t}\n};\n\npoint operator *(scalar t, point a){\n\tpoint r;\n\tr.x = t * a.x; \n\tr.y = t * a.y; \n\treturn r;\n}\n\nvoid projection(point p, point q, point r, point &x){\n\tpoint qp = q - p;\n\tpoint pr = p - r;\n\tscalar k = (qp.x * pr.x + qp.y * pr.y)/qp.norm2();\n\tx = p - (k * qp);\n\t\n}\n\nint main(){\n\tpoint p1, p2, p, x;\n\tint q;\n\tcout.precision(20);\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tcin >> q;\n\tfor(int i = 0;i < q;i++){\n\t\tcin >> p.x >> p.y;\n\t\tprojection(p1, p2, p, x);\n\t\tx.print();\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include<cstdio>\n\nusing namespace std;\n\nint main(void)\n{\n    double x_p1,y_p1,x_p2,y_p2;\n    int q;\n    double x_p[1000],y_p[1000];\n    double x[1000],y[1000];\n    \n    cin>>x_p1>>y_p1>>x_p2>>y_p2;\n    cin>>q;\n    for(int i=0;i<q;i++)\n        cin>>x_p[i]>>y_p[i];\n    \n    for(int i=0;i<q;i++)\n    {\n        x[i]=((x_p2-x_p1)*(x_p2-x_p1)*x_p[i]+(y_p2-y_p1)*(y_p2-y_p1)*x_p1+(y_p[i]-y_p1)*(x_p2-x_p1)*(y_p2-y_p1))/((y_p2-y_p1)*(y_p2-y_p1)+(x_p2-x_p1)*(x_p2-x_p1));\n        y[i]=((y_p2-y_p1)*(x[i]-x_p1))/(x_p2-x_p1)+y_p1;\n        printf(\"%.8lf %.8lf\\n\",x[i],y[i]);\n    }\n    \n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//#define NDEBUG\n#include \"bits/stdc++.h\"\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <array>\n#include <random>\n#ifdef _MSC_VER\n#include <ppl.h>\n//#include <boost/multiprecision/cpp_dec_float.hpp>\n//#include <boost/multiprecision/cpp_int.hpp>\n//#include <boost/rational.hpp>\n//#include <opencv2/core.hpp>\n//#include <opencv2/imgproc.hpp>\n//#include <opencv2/highgui.hpp>\n//#else\n//#include <omp.h>\n#endif\n\n\nusing namespace std;\n\n#define DUMPOUT cerr\n#define dump(...) DUMPOUT<<\"  \";DUMPOUT<<#__VA_ARGS__<<\" :[\"<<__LINE__<<\":\"<<__FUNCTION__<<\"]\"<<endl;DUMPOUT<<\"    \";dump_func(__VA_ARGS__)\n\nusing uint = unsigned; using ll = long long; using ull = unsigned long long; using pii = pair<int, int>; using pll = pair<ll, ll>; using pdd = pair<double, double>; using pss = pair<string, string>;\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const pair<_KTy, _Ty>& m) { o << \"{\" << m.first << \", \" << m.second << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const map<_KTy, _Ty>& m) { if (m.empty()) { o << \"{ }\"; return o; } o << \"{\" << *m.begin(); for (auto itr = ++m.begin(); itr != m.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> ostream& operator << (ostream& o, const unordered_map<_KTy, _Ty>& m) { if (m.empty()) { o << \"{ }\"; return o; } o << \"{\" << *m.begin(); for (auto itr = ++m.begin(); itr != m.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const vector<_Ty>& v) { if (v.empty()) { o << \"{ }\"; return o; } o << \"{\" << v.front(); for (auto itr = ++v.begin(); itr != v.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const deque<_Ty>& v) { if (v.empty()) { o << \"{ }\"; return o; } o << \"{\" << v.front(); for (auto itr = ++v.begin(); itr != v.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const set<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } o << \"{\" << *(s.begin()); for (auto itr = ++s.begin(); itr != s.end(); itr++) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const unordered_set<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } o << \"{\" << *(s.begin()); for (auto itr = ++s.begin(); itr != s.end(); itr++) { o << \", \" << *itr; }\to << \"}\"; return o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const stack<_Ty>& s) { if (s.empty()) { o << \"{ }\"; return o; } stack<_Ty> t(s); o << \"{\" << t.top(); t.pop(); while (!t.empty()) { o << \", \" << t.top(); t.pop(); } o << \"}\";\treturn o; }\ntemplate <typename _Ty> ostream& operator << (ostream& o, const list<_Ty>& l) { if (l.empty()) { o << \"{ }\"; return o; } o << \"{\" << l.front(); for (auto itr = ++l.begin(); itr != l.end(); ++itr) { o << \", \" << *itr; } o << \"}\"; return o; }\ntemplate <typename _KTy, typename _Ty> istream& operator >> (istream& is, pair<_KTy, _Ty>& m) { is >> m.first >> m.second; return is; }\ntemplate <typename _Ty> istream& operator >> (istream& is, vector<_Ty>& v) { for (size_t t = 0; t < v.size(); t++) is >> v[t]; return is; }\ntemplate <typename _Ty> istream& operator >> (istream& is, deque<_Ty>& v) { for (size_t t = 0; t < v.size(); t++) is >> v[t]; return is; }\nnamespace aux { // print tuple\n  template<typename Ty, unsigned N, unsigned L> struct tp { static void print(ostream& os, const Ty& v) { os << get<N>(v) << \", \"; tp<Ty, N + 1, L>::print(os, v); } };\n  template<typename Ty, unsigned N> struct tp<Ty, N, N> { static void print(ostream& os, const Ty& v) { os << get<N>(v); } };\n}\n\ntemplate<typename... Tys> ostream& operator<<(ostream& os, const tuple<Tys...>& t) { os << \"{\"; aux::tp<tuple<Tys...>, 0, sizeof...(Tys) - 1>::print(os, t); os << \"}\"; return os; }\n\ntemplate<typename A, size_t N, typename T> inline void Fill(A(&array)[N], const T& val) { fill((T*)array, (T*)(array + N), val); }\n\ntemplate <typename ... Args>\nstd::string format(const std::string& fmt, Args ... args) {\n  size_t len = std::snprintf(nullptr, 0, fmt.c_str(), args ...);\n  std::vector<char> buf(len + 1);\n  std::snprintf(&buf[0], len + 1, fmt.c_str(), args ...);\n  return std::string(&buf[0], &buf[0] + len);\n}\n\nvoid dump_func() { DUMPOUT << endl; }\ntemplate <class Head, class... Tail> void dump_func(Head&& head, Tail&&... tail) { DUMPOUT << head; if (sizeof...(Tail) == 0) { DUMPOUT << \" \"; } else { DUMPOUT << \", \"; } dump_func(move(tail)...); }\n\n#define PI 3.14159265358979323846\n#define EPS 1e-8\n#define rep(t,n) for(int t=0;t<(n);++t)\n#define ALL(j) (j).begin(), (j).end()\n#define SZ(j) ((int)(j).size())\n#define fake false\n\nclass Timer {\npublic:\n  double t = 0;\n  Timer() {}\n  static double time() {\n#ifdef _MSC_VER\n    return __rdtsc() / 2.8e9;\n#else\n    unsigned long long a, d;\n    __asm__ volatile(\"rdtsc\"\n      : \"=a\"(a), \"=d\"(d));\n    return (d << 32 | a) / 2.8e9;\n#endif\n  }\n  void measure() { t = time() - t; }\n  double elapsedMs() { return (time() - t) * 1000.0; }\n} timer;\n\nstruct Xorshift {\n  uint64_t x = 88172645463325252LL;\n  unsigned next_int() {\n    x = x ^ (x << 7);\n    return x = x ^ (x >> 9);\n  }\n  unsigned next_int(unsigned mod) {\n    x = x ^ (x << 7);\n    x = x ^ (x >> 9);\n    return x % mod;\n  }\n  unsigned next_int(unsigned l, unsigned r) {\n    x = x ^ (x << 7);\n    x = x ^ (x >> 9);\n    return x % (r - l + 1) + l;\n  }\n  double next_double() {\n    return double(next_int()) / UINT_MAX;\n  }\n} rnd;\n\ntemplate<typename T>\nvoid shuffle_vector(vector<T>& v, Xorshift& rnd) {\n  int n = v.size();\n  for (int i = n - 1; i >= 1; i--) {\n    int r = rnd.next_int(i);\n    swap(v[i], v[r]);\n  }\n}\n\n\n\nnamespace geom {\n  constexpr double eps = 1e-8;\n  struct Point {\n    double x, y;\n    Point() : x(0.0), y(0.0) {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point& p) const { return Point(this->x + p.x, this->y + p.y); }\n    Point operator-(const Point& p) const { return Point(this->x - p.x, this->y - p.y); }\n    Point operator-() const { return Point(-this->x, -this->y); }\n    Point& operator+=(const Point& p) { return *this = *this + p; }\n    Point& operator-=(const Point& p) { return *this = *this - p; }\n    double length() const { return std::sqrt(x * x + y * y); }\n    double length2() const { return x * x + y * y; }\n    friend std::ostream& operator<<(std::ostream& o, const Point& p) {\n      o << '(' << p.x << ',' << p.y << ')';\n      return o;\n    }\n    friend std::istream& operator>>(std::istream& i, Point& p) {\n      i >> p.x >> p.y;\n      return i;\n    }\n  };\n  using Vector = Point;\n  struct Line {\n    Point p1, p2;\n    Line() {}\n    Line(const Point& p1, const Point& p2) : p1(p1), p2(p2) {}\n    Line(double x1, double y1, double x2, double y2) : p1(Point(x1, y1)), p2(Point(x2, y2)) {}\n    Vector to_vector() const { return p2 - p1; }\n    friend std::ostream& operator<<(std::ostream& o, const Line& l) {\n      o << '(' << l.p1 << ',' << l.p2 << ')';\n      return o;\n    }\n    friend std::istream& operator>>(std::istream& i, Line& l) {\n      i >> l.p1 >> l.p2;\n      return i;\n    }\n  };\n  using Segment = Line;\n  Point projection(const Line& line, const Point& point) {\n    Point p0(point), p1(line.p1), p2(line.p2);\n    Vector v12(p2 - p1);\n    double det = v12.length2();\n    double a = v12.y * p1.x - v12.x * p1.y, b = v12.y * p0.y + v12.x * p0.x;\n    double x = v12.y * a + v12.x * b, y = v12.y * b - v12.x * a;\n    return Point(x / det, y / det);\n    //double x1 = line.p1.x, y1 = line.p1.y, x2 = line.p2.x, y2 = line.p2.y;\n    //double x0 = point.x, y0 = point.y;\n    //double x01 = x1 - x0, y01 = y1 - y0, x12 = x2 - x1, y12 = y2 - y1;\n    //double sd12 = x12 * x12 + y12 * y12;\n    //double x = (x12 * x12 * x0 + y12 * y12 * x1 - x12 * y12 * y01) / sd12;\n    //double y = (x12 * x12 * y1 + y12 * y12 * y0 - x12 * y12 * x01) / sd12;\n    //return Point(x, y);\n  }\n  Point reflection(const Line& line, const Point& point) {\n    Point proj = projection(line, point);\n    return proj + proj - point;\n  }\n  double cross_product(const Vector& v1, const Vector& v2) {\n    return v1.x * v2.y - v2.x * v1.y;\n  }\n  double inner_product(const Vector& v1, const Vector& v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n  }\n  enum struct ccw_t {\n    COUNTER_CLOCKWISE,\n    CLOCKWISE,\n    ONLINE_BACK,\n    ONLINE_FRONT,\n    ON_SEGMENT\n  };\n  ccw_t ccw(const Point& p0, const Point& p1, const Point& p2) {\n    Vector v1 = p1 - p0, v2 = p2 - p0;\n    if (cross_product(v1, v2) > eps) return ccw_t::COUNTER_CLOCKWISE;\n    if (cross_product(v1, v2) < -eps) return ccw_t::CLOCKWISE;\n    if (inner_product(v1, v2) < -eps) return ccw_t::ONLINE_BACK;\n    if (v1.length() < v2.length()) return ccw_t::ONLINE_FRONT;\n    return ccw_t::ON_SEGMENT;\n  }\n  bool is_parallel(const Line& l1, const Line& l2) {\n    return abs(cross_product(l1.to_vector(), l2.to_vector())) < eps;\n  }\n  bool is_orthogonal(const Line& l1, const Line& l2) {\n    return abs(inner_product(l1.to_vector(), l2.to_vector())) < eps;\n  }\n  bool is_intersect(const Segment& s1, const Segment& s2) {\n    Vector v2 = s2.to_vector(), p1(s1.p1 - s2.p1), p2(s1.p2 - s2.p1);\n    if (cross_product(v2, p1) * cross_product(v2, p2) > eps) return false;\n    Vector v1 = s1.to_vector(), p3(s2.p1 - s1.p1), p4(s2.p2 - s1.p1);\n    if (cross_product(v1, p3) * cross_product(v1, p4) > eps) return false;\n    if (inner_product(s2.p1 - s1.p1, s2.p2 - s1.p1) < eps) return true;\n    if (inner_product(s2.p1 - s1.p2, s2.p2 - s1.p2) < eps) return true;\n    if (inner_product(s1.p1 - s2.p1, s1.p2 - s2.p1) < eps) return true;\n    if (inner_product(s1.p1 - s2.p2, s1.p2 - s2.p2) < eps) return true;\n    return false;\n  }\n  Point intersection(const Line& l1, const Line& l2) {\n    Point p0(l1.p1), p1(l1.p2), p2(l2.p1), p3(l2.p2);\n    Vector v01(p1 - p0), v23(p3 - p2);\n    double det = cross_product(v01, v23);\n    double a = v01.y * p0.x - v01.x * p0.y, b = v23.y * p2.x - v23.x * p2.y;\n    double x = v01.x * b - v23.x * a;\n    double y = v01.y * b - v23.y * a;\n    return Point(x / det, y / det);\n  }\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n\n  using namespace geom;\n\n  Line line;\n  cin >> line;\n  int q;\n  cin >> q;\n  cout << fixed << setprecision(15);\n  rep(_, q) {\n    Point p0;\n    cin >> p0;\n    Point p = projection(line, p0);\n    cout << p.x << ' ' << p.y << '\\n';\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tdouble x1, x2, y1, y2, x3, y3;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\n\tx3 = (x2 - x1) / sqrt((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1));\n\ty3 = (y2 - y1) / sqrt((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1));\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py, px2, py2;\n\t\tcin >> px >> py;\n\n\t\tpx2 = (px - x1);\n\t\tpy2 = (py - y1);\n\n\t\tprintf(\"%.10lf %.10lf\\n\", x1 + x3*(px2*x3 + py2*y3), y1 + y3*(px2*x3 + py2*y3));\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <map>\n#include <set>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <bitset>\n#include <algorithm>\n#include <numeric>\n#include <functional>\n#include <complex>\nusing namespace std;\n\n#define Rep(b, e, i) for(int i = b; i <= e; i++)\n#define Repr(e, b, i) for(int i = e; i >= b; i--)\n#define rep(n, i) Rep(0, n-1, i)\n#define repr(n, i) Repr(n-1, 0, i)\n#define all(v) (v).begin(), (v).end()\n#define pb(v) push_back(v)\n#define uniq(v) (v).erase(unique(all(v)),(v).end())\n#define bitcnt(x) __builtin_popcount(x)\n#define fst first\n#define snd second\n#define Pqaz(T) priority_queue<T,vector<T>,greater<T>>\n#define Pqza(T) priority_queue<T>\n#define put(x) cout << x;\n#define puts(x) cout << x << ' ';\n#define putln(x) cout << x << endl;\n#define ENJYU std::ios::sync_with_stdio(false);std::cin.tie(0);\n\n\nvoid solve(void){\n\tint x1, y1, x2, y2, q;\n\tcin >> x1 >> y1 >> x2 >> y2 >> q;\n\n\tdouble dx = x2 - x1, dy = y2 - y1, norm = sqrt(dx*dx+dy*dy);\n\n\twhile(q--)\n\t{\n\t\tint x3, y3;\n\t\tcin >> x3 >> y3;\n\n\t\tdouble ax, ay, naiseki;\n\n\t\tnaiseki = (x3-x1) * dx + (y3-y1) * dy;\n\n\t\tax = x1 + dx * naiseki / norm / norm;\n\t\tay = y1 + dy * naiseki / norm / norm;\n\n\t\tprintf(\"%.12lf %.12lf\\n\", ax, ay);\n\t}\n\n\n}\n\nint main(void){\n\tsolve();\n\t//cout << \"yui(*-v・)yui\" << endl;\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <complex>\n#include <iomanip>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) {\n  return fabs(b - a) < EPS;\n}\n\nusing Point = complex<double>;\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\nostream &operator<<(ostream &os, Point &p) {\n  os << p.real() << \" \" << p.imag() << endl;\n}\n\nnamespace std {\nbool operator<(const Point &a, const Point &b) {\n  return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n}\n} // namespace std\n\ndouble cross(const Point &a, const Point &b) {\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(const Point &a, const Point &b) {\n  return a.real() * b.real() + a.imag() * b.imag();\n}\n\ndouble RadianToDegree(double r) {\n  return (r * 180.0 / acos(-1));\n}\n\ndouble DegreeToRadian(double d) {\n  return (d * acos(-1) / 180.0);\n}\n\ndouble GetAngle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if (alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nstruct Line {\n  Point a, b;\n\n  Line(){};\n  Line(Point a, Point b) : a(a), b(b){};\n\n  // Ax + By = C\n  Line(double A, double B, double C) {\n    if (eq(A, 0)) {\n      a = Point(0, C / B);\n      b = Point(1, C / B);\n    } else if (eq(B, 0)) {\n      a = Point(C / A, 0);\n      b = Point(C / A, 1);\n    } else {\n      a = Point(0, C / B);\n      b = Point(C / A, 0);\n    }\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment {\n  Point a, b;\n\n  Segment(){};\n  Segment(Point a, Point b) : a(a), b(b){};\n\n  friend ostream &operator<<(ostream &os, Segment &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Segment &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle(){};\n\n  Circle(Point p, double r) : p(p), r(r){};\n};\n\nusing Polygon = vector<Point>;\nusing Segments = vector<Segment>;\nusing Lines = vector<Line>;\nusing Circles = vector<Circle>;\nusing PointPoint = pair<Point, Point>;\n\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if (cross(b, c) > EPS) return +1;\n  if (cross(b, c) < -EPS) return -1;\n  if (dot(b, c) < 0) return +2;\n  if (norm(b) < norm(c)) return -2;\n  return 0;\n}\n\nbool Parallel(const Line &a, const Line &b) {\n  return abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n\nbool Orthogonal(const Line &a, const Line &b) {\n  return abs(dot(a.a - a.b, b.a - b.b)) < EPS;\n}\n\nPoint Projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint Projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint Reflection(const Line &l, const Point &p) {\n  return p + (Projection(l, p) - p) * 2.0;\n}\n\nint main() {\n  Point p;\n  Line l;\n  cin >> l;\n  // cerr << \"Line : \" << l << endl;\n\n  int q;\n  cin >> q;\n  while (q--) {\n    Point p;\n    cin >> p;\n\n    // cerr << \"point : \" << p << endl;\n    Point ans = Projection(l, p);\n    cout << fixed << setprecision(10) << ans.real() << \" \" << ans.imag() << endl;\n  }\n}\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\ndouble Distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\ndouble Distance(const Line &l, const Point &p) {\n  return abs(p - Projection(l, p));\n}\n\nbool Intersect(const Line &l, const Line &m);\ndouble Distance(const Line &l, const Line &m) {\n  return Intersect(l, m) ? 0 : Distance(l, m.a);\n}\n\nbool Intersect(const Segment &s, const Point &p);\ndouble Distance(const Segment &s, const Point &p) {\n  Point r = Projection(s, p);\n  if (Intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\nbool Intersect(const Segment &s, const Segment &t);\ndouble Distance(const Segment &a, const Segment &b) {\n  if (Intersect(a, b)) return 0;\n  return min(min(Distance(a, b.a), Distance(a, b.b)), min(Distance(b, a.a), Distance(b, a.b)));\n}\n\nbool Intersect(const Line &l, const Segment &s);\ndouble Distance(const Line &l, const Segment &s) {\n  if (Intersect(l, s)) return 0;\n  return min(Distance(l, s.a), Distance(l, s.b));\n}\n\nbool Intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool Intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool Intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool Intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nbool Intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\ndouble Distance(const Line &l, const Point &p);\nbool Intersect(const Circle &c, const Line &l) {\n  return Distance(l, c.p) <= c.r + EPS;\n}\n\nbool Intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\nint Intersect(const Circle &c, const Segment &l) {\n  if (norm(Projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  const double d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if (d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = Projection(l, c.p);\n  if (dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\nPoint Crosspoint(const Line &l, const Line &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPoint Crosspoint(const Segment &l, const Segment &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPointPoint Crosspoint(const Circle &c, const Line l) {\n  Point hp = Projection(l, c.p), h = hp - c.p;\n  const double d2 = norm(h);\n  Point v = (l.b - l.a) * sqrt(c.r * c.r - d2) / abs(l.b - l.a);\n  return PointPoint(hp - v, hp + v);\n}\n\nPointPoint Crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if (Intersect(c, l) == 2) return Crosspoint(c, aa);\n  PointPoint ret = Crosspoint(c, aa);\n  if (dot(l.a - ret.first, l.b - ret.first) < 0)\n    ret.second = ret.first;\n  else\n    ret.first = ret.second;\n  return ret;\n}\n\nPointPoint Crosspoint(const Circle &c1, const Circle &c2) {\n  double d = abs(c1.p - c2.p);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return (PointPoint(p1, p2));\n}\n\nbool IsConvex(const Polygon &p) {\n  int n = p.size();\n  for (int i = 0; i < n; i++) {\n    if (ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\nPolygon Convex_Hull(Polygon &p) {\n  int n = p.size(), k = 0;\n  if (n >= 3) {\n    sort(p.begin(), p.end());\n    vector<Point> ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = p[i++]) {\n      while (k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n      while (k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    ch.resize(k - 1);\n    return ch;\n  } else {\n    return p;\n  }\n}\n\nenum { OUT, ON, IN };\nint Contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for (int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if (a.imag() > b.imag()) swap(a, b);\n    if (a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\nbool MergeIfAble(Segment &s1, Segment s2) {\n  if (abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n  if (ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n  if (ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n  s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n  return true;\n}\n\nvoid MergeSegments(vector<Segment> &segs) {\n  for (int i = 0; i < segs.size(); i++) {\n    if (segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for (int i = 0; i < segs.size(); i++) {\n    for (int j = i + 1; j < segs.size(); j++) {\n      if (MergeIfAble(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\nvector<vector<int>> SegmentArrangement(vector<Segment> &segs, vector<Point> &ps) {\n  vector<vector<int>> g;\n  const int N = (int)segs.size();\n  for (int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for (int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if (cross(p1, p2) == 0) continue;\n      if (Intersect(segs[i], segs[j])) {\n        ps.emplace_back(Crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  const int M = (int)ps.size();\n  g.resize(M);\n  for (int i = 0; i < N; i++) {\n    vector<int> vec;\n    for (int j = 0; j < M; j++) {\n      if (Intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for (int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\nPolygon ConvexCut(Polygon &U, Line l) {\n  Polygon ret;\n  for (int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if (ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if (ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(Crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\ndouble Area2(const Polygon &p) {\n  double A = 0;\n  for (int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\ndouble Convex_Diameter(Polygon &p) {\n  int n = p.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; i++) {\n    if (p[i].imag() > p[is].imag()) is = i;\n    if (p[i].imag() < p[js].imag()) js = i;\n  }\n  double maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) >= 0) {\n      j = (j + 1) % n;\n    } else {\n      i = (i + 1) % n;\n    }\n    if (norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxdis;\n}\n\n// int main() {}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cassert>\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) FOR(i,0,n)\n#define rep(i,n) FOR(i,0,n)\n#define DEBUG(x) cout<<#x<<\": \"<<x<<endl\n#define vint vector<int>\n#define vdouble vector<double>\n#define vstring vector<string>\nusing namespace std;\n\n#include<map>\n#include<set>\n#include<queue>\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nconst int MAX_N = 1000000;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n    Point(double x=0, double y=0):x(x), y(y){}\n\n    Point operator + (Point p){ return Point(x + p.x, y + p.y); }\n    Point operator - (Point p){ return Point(x - p.x, y - p.y); }\n    Point operator * (double a){ return Point(a * x, a * y); }\n    Point operator / (double a){ return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y;}\n    bool operator < (const Point &p) const {\n        // first x, second y\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    //|a||b|cos(theta)\n    return a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n    //|a||b|sin(theta)\n    return a.x * b.y - a.y * b.x;\n}\n\nPoint project(Point p1, Point p2, Point p){\n    Vector base = p2 - p1;\n    double r = dot(p - p1, base) / base.norm();\n    return p1 + base * r;\n}\n\nint main() {\n\n    int Q;\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Point p1(x1, y1);\n    Point p2(x2, y2);\n\n    cin >> Q;\n    rep(i, Q){\n        double x, y;\n        cin >> x >> y;\n        Point p(x, y);\n        Point r = project(p1, p2, p);\n        printf(\"%.10f %.10f\\n\", r.x, r.y);\n        // cout << r.x << \" \" << r.y << endl;\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <vector>\n#include <cstdio>\nusing namespace std;\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\ndouble cross(const P& a, const P& b) {\n  return imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\ntypedef vector<P> G;\n\nstruct C {\n  P p; double r;\n  C(const P &p, double r) : p(p), r(r) { }\n};\n\nint main(){\n\tdouble x,y;\n\tint q;\n\tscanf(\"%lf%lf\",&x,&y);P p0(x,y);\n\tscanf(\"%lf%lf%d\",&x,&y,&q);P p1(x,y);\n\tfor(;q--;){\n\t\tscanf(\"%lf%lf\",&x,&y);P p(x,y);\n\t\tP t=(p1-p0)*dot(p1-p0,p-p0)/norm(p1-p0)+p0;\n\t\tprintf(\"%f %f\\n\",real(t),imag(t));\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <array>\n#include <queue>\n#include <deque>\n#include <set>\n#include <list>\n#include <map>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cctype>\n#include <cstring>\n#include <climits>\n#include <bitset>\n#include <complex>\n#include <random>\n#include <functional>\n#include <sstream>\n#include <iomanip>\n\nusing namespace std;\n\n#define rep(i, n) for(int i=0; i<(n); i++)\n#define FOR(i, m, n) for(int i=(m);i<(n);i++)\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define SORT(x) sort((x).begin(),(x).end())\n#define REVE(x) reverse((x).begin(),(x).end())\n#define mp make_pair\n#define pb push_back\n#define dump(x)  cout << #x << \" = \" << (x) << endl;\n#define debug(x) cout << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << endl;\n\ntypedef long long LL;\ntypedef vector<int> VI;\ntypedef vector<string> VS;\ntypedef vector<LL> VL;\ntypedef vector<bool> VB;\ntypedef vector<vector<int>> VVI;\ntypedef pair<int, int> PII;\ntypedef pair<double, double> PDD;\ntypedef complex<double> CD;\n\nPDD solve(double p1x, double p1y, double p2x, double p2y, double px, double py) {\n\tPDD re;\n\n\tif (p1x == p2x) {\n\t\tre = mp(p1x, py);\n\t}\n\telse if (p1y == p2y) {\n\t\tre = mp(px, p1y);\n\t}\n\telse {\n\t\tdouble l1s, l1y, l2s, l2y;\n\t\tl1s = (p1y - p2y) / (p1x - p2x);\n\t\tl1y = p1y + l1s * (p1x * -1);\n\t\tl2s = (1 / l1s)*-1;\n\t\tl2y = py + l2s * (px*-1);\n\n\t\t//cout << \"line1 : y=\" << l1s << \"*x+\" << l1y << endl;\n\t\t//cout << \"line2 : y=\" << l2s << \"*x+\" << l2y << endl;\n\n\t\tdouble ax, ay;\n\t\tax = (l2y - l1y) / (l1s - l2s);\n\t\tay = l1s * ax + l1y;\n\t\tre = mp(ax, ay);\n\t}\n\n\treturn re;\n}\n\n\nint main() {\n\tdouble w, x, y, z; cin >> w >> x >> y >> z;\n\tint q; cin >> q;\n\trep(i, q) {\n\t\tdouble a, b; cin >> a >> b;\n\t\tPDD ans = solve(w, x, y, z, a, b);\n\t\tprintf(\"%.20f %.20f\\n\", ans.first, ans.second);\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define rep(i,n)   FOR(i,0,n)\n#define pb emplace_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int,int> pint;\n\n#define eps (1e-10)\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n    Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n    Point operator*(double k){return Point(x*k,y*k);}\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n    bool operator == (const Point &p) const{\n    return fabs(x-p.x)<eps && fabs(y-p.y)<eps;\n  }\n  double dot(Point p){return x*p.x+y*p.y;}\n  double det(Point p){return x*p.y-y*p.x;}\n};\nstruct Line{\n  Point p1,p2;\n  Line(){}\n  Line(Point p1, Point p2):p1(p1),p2(p2){}\n};\nint ccw(Point a,Point b,Point c){\n  Point t1=b-a,t2=c-a;\n  if(t1.det(t2)> eps) return 1;//counter clockwise\n  if(t1.det(t2)< -eps) return -1;//clockwise\n  if(t1.dot(t2)< -eps) return 2;//c-a-b online\n  if(t1.norm()<t2.norm()) return -2;//a-b-c online\n  return 0;//a-c-b online\n}\nbool intersectSS(Point a,Point b,Point c,Point d){\n  return (ccw(a,b,c)*ccw(a,b,d)<=0&&ccw(c,d,a)*ccw(c,d,b)<=0);\n}\nbool intersectSS(Line l1,Line l2){\n  return intersectSS(l1.p1,l1.p2,l2.p1,l2.p2);\n}\nbool isOrthogonal(Point a,Point b){\n  return fabs(a.dot(b))<eps;\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\nbool isParallel(Point a,Point b){\n  return fabs(a.det(b))<eps;\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\nPoint CrossPoint(Line l1,Line l2){\n    double a=(l1.p2-l1.p1).det(l2.p2-l2.p1);\n    double b=(l1.p2-l1.p1).det(l1.p2-l2.p1);\n    if(fabs(a)<eps&&fabs(b)<eps) return l2.p1;\n    return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\nPoint project(Line l,Point p){\n  Point base=l.p2-l.p1;\n  double r=(p-l.p1).dot(base)/base.norm();\n  return l.p1+base*r;\n}\nPoint reflect(Line l,Point p){\n  return p+(project(l,p)-p)*2.0;\n}\nint main(){\n    int q;\n    double xp0,yp0,xp1,yp1,xp2,yp2;\n    cin>>xp1>>yp1>>xp2>>yp2;\n    Point p1(xp1,yp1),p2(xp2,yp2);\n    Line l(p1,p2);\n    cin>>q;\n    while(q--){\n        cin>>xp0>>yp0;\n        Point p0(xp0,yp0);\n        Point ans=project(l,p0);\n        cout<<fixed<<setprecision(10)<<ans.x<<\" \"<<ans.y<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\n#define FOR(k,m,n) for(int (k)=(m);(k)<(n);(k)++)\n#define REP(i,n) FOR((i),0,(n))\n\n\n//???\n\n//???\nclass Point{\npublic:\n\tdouble x, y;\n\t//?????????????????????\n\tPoint(double x_=0.0,double y_=0.0):x(x_),y(y_){}\n\t\n\t//??????????????????????????????\n\tPoint operator + (Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double k) { return Point(x * k, y * k); }\n\tPoint operator / (double k) { return Point(x / k, y / k); }\n\n\tbool operator  < (const Point &p)const {\n\t\treturn x!=p.x ? x<p.x : y<p.y;\n\t}\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;        //????????????\nstruct Segment{Point p1,p2;};//??????\ntypedef Segment Line;        //??´???\n\n//???\nclass Circle {\npublic:\n\tPoint center;\n\tdouble r;\n\t//?????????????????????\n\tCircle(Point c_=Point(),double r_=0.0):center(c_),r(r_){}\n};\ntypedef vector<Point> Polygon;//????§???¢??????????????????\n\n\n\n//??¢??°????????????\n//????????¢??°??????\nnamespace PFunc {\n\tdouble norm(Point p) { return p.x*p.x + p.y*p.y; }\n\tdouble abs(Point p) { return sqrt(norm(p)); }\n}\n\n//?????????????????¢??°??????\nnamespace VFunc {\n\t//??????\n\tdouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n\t//??????\n\tdouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\t//??´?????????????¨????\n\tbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\tbool isOrthogonal(Point a1,Point  a2, Point b1,Point b2) {return isOrthogonal(a1-a2,b1-b2);}\n\tbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\t//????????????????¨????\n\tbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\tbool isParallel(Point a1, Point  a2, Point b1, Point b2) {return isParallel(a1 - a2, b1 - b2);}\n\tbool isParallel(Segment s1, Segment s2) {return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\n\t//?°???±\n\tPoint project(Segment s, Point p) {\n\t\tVector base = s.p2 - s.p1;\n\t\tdouble r = dot(p - s.p1, base) / PFunc::norm(base);\n\t\treturn s.p1 + base*r;\n\t}\n}\n\n \n//?????°\nSegment s;\nint q;\nPoint temp,ans;\n\nint main() {\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tcin>>q;\n\tREP(i, q) {\n\t\tcin>>temp.x>>temp.y;\n\t\tans=VFunc::project(s,temp);\n\t\tcout<<ans.x<<\" \"<<ans.y<<endl;\n\t}\n\tcin>>q;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.x + this->y * rhs.x);\n    }\n\n    // Unary operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os << '(' << p.x << \", \" << p.y << ')';\n}\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n\n/**\n * Line or Segment in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\nusing Segment = Line;\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n/**\n * Intersection and Distance\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\n\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(15);\n\n    Line l;\n    Point p;\n    int q;\n\n    std::cin >> l;\n    std::cin >> q;\n\n    while (q--) {\n        std::cin >> p;\n        std::cout << Projection(l, p) << std::endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n//?????????\n#pragma region MACRO \n#define putans(x)  std::cerr << \"answer: \" ; cout << (x) << endl\n#define dputans(x) std::cerr << \"answer: \"; cout << setprecision(13) << (double)(x) << endl\n#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)\n#define RREP(i,a,n) for(int i=(int)(n-1); i>= a; i--)\n#define rep(i,n) REP(i,0,n)\n#define rrep(i,n) RREP(i,0,n)\n#define all(a) begin((a)),end((a))\n#define mp make_pair\n#define exist(container, n) ((container).find((n)) != (container).end())\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#ifdef _DEBUG //???????????????????????????????????????????????????\nstd::ifstream ifs(\"data.txt\");\n#define put ifs >>\n#else //?????£????????????????????§?????????????????????\n#define put cin >>\n#endif\n#pragma endregion\n\n//???????????°??????????????´\n#pragma region CODING_SUPPORT\n#define dbg(var0) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << endl; }\n#define dbg2(var0, var1) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg(var1); }\n#define dbg3(var0, var1, var2) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg2(var1, var2); }\n#define dbgArray(a,n) {std::cerr << (#a) << \"=\";  rep(i,n){std::cerr <<(a[i])<<\",\";} cerr<<endl;} \n#ifndef _DEBUG\n#define dbg1 {}\n#define dbg2 {}\n#define dbg3 {}\n#define dbgArray {}\n#endif \n#pragma endregion \n//typedef????????????????????????????¶????????????§?????????\n#pragma region TYPE_DEF\ntypedef long long ll;\ntypedef pair<int, int> pii; typedef pair<string, string> pss; typedef pair<int, string>pis;\ntypedef vector<string> vs; typedef vector<int> vi;\n#pragma endregion\n//??????????????°(???????????????????????§??????)\n#pragma region CONST_VAL\n#define PI (2*acos(0.0))\n#define EPS (1e-9)\n#define MOD (ll)(1e9 + 7)\n#define INF (ll)(1e9)\n#pragma endregion\n\nclass Point {//????????????????????????\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tdouble operator * (Point p) { return dot(p); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const Point &p) const {return  x != p.x ? x < p.x : y < p.y;}\n\tbool operator == (const Point &p) const {return  fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;}\n\t//???????????????\n\tdouble dot(Point p) {return x * p.x + y * p.y;}\n\tdouble cross(Point p) { return x * p.y - y * p.x; }\n\n};\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nstruct Segment {//??????\n\tPoint p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;//??´???\ntypedef vector<Point> Polygon;\n\n//??´????????????\nbool isOrthogonal(Vector a, Vector b) { return equals(a*b, 0.0); }\nbool isParallel(Vector a, Vector b) { return equals(a.cross(b), 0.0); }\n\n//??????s???????????????p????°???±\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = (p - s.p1).dot( base) / base.norm();\n\treturn s.p1 + base*r;\n}\n\n\nint main() {\n\tdouble xp1, yp1, xp2, yp2; put xp1 >> yp1 >> xp2 >> yp2;\n\tSegment s;\n\ts.p1 = Point(xp1, yp1);\n\ts.p2 = Point(xp2, yp2);\n\n\tint n; put n;\n\trep(i, n) {\n\t\tPoint p;\n\t\tput p.x >> p.y;\n\t\tPoint prj = projection(s, p);\n\t\tcout << setprecision(13) << prj.x << \" \" << prj.y << endl;\n\t}\n\treturn 0;\n}\n\n/*\n#define i(x) int x; scanf(\"%d\",&x);\n#define l(x) ll x; scanf(\"%lld\",&x);\n#define d(x) double  x; scanf(\"%lf\",&x);\n*/\n//??????????£?????????°???\n//https://www23.atwiki.jp/akitaicpc/pages/65.html"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i, a, b) for (int i = a; i < (int)(b); ++i)\n#define rrep(i, a, b) for (int i = b - 1; i >= (int)(a); --i)\n\nusing namespace std;\nusing ll = long long;\nusing vi = vector<int>;\nusing vll = vector<ll>;\nusing vd = vector<double>;\nusing vvi = vector<vi>;\n\nconstexpr int MOD = 1000000007;\n\nstruct Point {\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n    Point(const Point& p) : x(p.x), y(p.y) {}\n\n    Point operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) const { return Point(k * x, k * y); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n\n    bool operator<(const Point& p) const { return x != p.x ? x < p.x : y < p.y; }\n    bool operator==(const Point& p) const { return fabs(x - p.x) < 1e-10 && fabs(y - p.y) < 1e-10; }\n\n    static double norm(const Point& p) { return sqrt(p.x * p.x + p.y * p.y); }\n    static double dot(const Point& p1, const Point& p2) { return p1.x * p2.x + p1.y * p2.y; }\n    static double cross(const Point& p1, const Point& p2) { return p1.x * p2.y - p1.y * p2.x; }\n};\ntypedef Point Vector;\n\nPoint projection(const Point& p1, const Point& p2, const Point& p) {\n    double dot = Vector::dot(p2 - p1, p - p1);\n    double norm = Vector::norm(p2 - p1);\n    return Point(p2 - p1) * dot / (norm * norm) + p1;\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n\n    int q;\n    cin >> q;\n\n    rep(i, 0, q) {\n        Point p;\n        cin >> p.x >> p.y;\n        Point ans = projection(p1, p2, p);\n        printf(\"%.10f %.10f\\n\", ans.x, ans.y);\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SBCURE_NO_DEPRECATE\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nconst int maxn = 110;\nconst int INF = 0x7fffffff;\n\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\nint cmp(Point A, Point B)                     //竖直排序  \n{\n\treturn (A.y<B.y || (A.y == B.y&&A.x<B.x));\n}\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\n\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) >= 0; j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) >= 0; j--) {\n\t\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\n\n\n\nint main(){\n\tcout.precision(11);\n\tSegment s;\n\tPoint p;\n\tint x1,x2,y1,y2,q;\n\tcin>>x1>>y1>>x2>>y2;\n\ts.p1.x=x1;s.p1.y=y1;\n\ts.p2.x=x2;s.p2.y=y2;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x1>>y1;\n\t\tp.x=x1;p.y=y1;\n\t\tcout<<project(s, p).x<<\" \"<<project(s, p).y<<endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <typeinfo>\n#include <vector>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<25;\nconst double pi=acos(-1);\nconst double eps=1e-8;\nconst vi emp;\n\nstruct point{\n\tdouble x,y;\n//\ttypedef pair<point,point> pp;\n\tpoint operator+(point p){\n\t\treturn point{x+p.x,y+p.y};\n\t}\n\tpoint operator-(point p){\n\t\treturn point{x-p.x,y-p.y};\n\t}\n\tpoint operator*(double p){\n\treturn point{x*p,y*p};\n\t}\n\tpoint operator/(double p){\n\t\tif(!p) return point{0,0}; \n\t\treturn point{x/p,y/p};\n\t}\n\tbool operator==(point p){\n\t\treturn fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n\t}\n};\n\ntypedef pair<point,point> pp;\nconst point O{0,0};\n\nclass Geom{\n\tpublic:\n\tdouble Length(point x,point y){\n\t\tpoint z=y-x;\n\t\treturn sqrt(z.x*z.x+z.y*z.y);\n\t}\n\tdouble IP(point x,point y){\n\t\treturn x.x*y.x+x.y*y.y;\n\t}\n\tpoint Projection(pp a,point x){\n\t\tpoint A=x-a.first,B=a.second-a.first;\n\t\tdouble l=Length(O,B);\n\t\treturn B*IP(A,B)/(l*l)+a.first;\n\t}\n};\n\nint Q;\ndouble x,y,X1,Y1,X2,Y2;\n\nint main(){\n\tcout<<syosu(10);\n\tGeom geo;\n\tcin>>X1>>Y1>>X2>>Y2>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tcin>>x>>y;\n\t\tpoint ans=geo.Projection(pp(point{X1,Y1},point{X2,Y2}),point{x,y});\n\t\tcout<<ans.x<<' '<<ans.y<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <fstream>\n#include <vector>\n#include <cstdio>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <string>\n#include <set>\n#include <map>\nusing namespace std;\ntypedef long long ll;\n\n// #define DEBUG\n\nclass Point;\n\nclass Point\n{\n    double x;\n    double y;\n\npublic:\n    void printpoint();\n    double norm();\n    friend Point operator+(Point a, Point b);\n    friend double operator*(Point a, Point b);\n    friend Point operator*(double a, Point b);\n    friend Point operator*(Point a, double b);\n    friend Point operator/(Point a, double b);\n    friend Point operator-(Point a, Point b);\n    double dot(Point b);\n    Point(double a, double b)\n    {\n        x = a;\n        y = b;\n    }\n    int get_x() { return x; }\n    int get_y() { return y; }\n};\n\nvoid Point::printpoint()\n{\n    printf( \"%.8f  %.8f\\n\", x, y);\n}\n\ndouble Point::norm()\n{\n    return sqrt(x * x + y * y);\n}\n\nPoint operator+(Point a, Point b)\n{\n    return Point(a.x + b.x, a.y + b.y);\n}\n\ndouble operator*(Point a, Point b)\n{\n    return double(a.y * b.x - a.x * b.y);\n}\nPoint operator*(double a, Point b)\n{\n    return Point(a * b.get_x(), a * b.get_y());\n}\nPoint operator*(Point a, double b)\n{\n    return Point(a.get_x() * b, a.get_y() * b);\n}\nPoint operator/(Point a, double b)\n{\n    return Point(a.get_x() / b, a.get_y() / b);\n}\nPoint operator-(Point a, Point b)\n{\n    return Point(a.x - b.x, a.y - b.y);\n}\n\ndouble Point::dot(Point b)\n{\n    return x * b.x + y * b.y;\n}\n\nvoid printarray(int n, int a[])\n{\n    for (int i = 1; i < n + 1; i++)\n    {\n        cout << a[i];\n        if (i != n)\n            cout << \" \";\n    }\n    cout << endl;\n}\n\nint main()\n{\n\n#ifdef DEBUG\n    cout << \"DEBUG MODE\" << endl;\n    ifstream in(\"input.txt\"); //for debug\n    cin.rdbuf(in.rdbuf());    //for debug\n#endif\n\n    double a, b, c, d, e, f, q;\n    cin >> a >> b >> c >> d;\n    Point p1(a, b);\n    Point p2(c, d);\n    Point v1 = p2 - p1;\n    cin >> q;\n    for (int i = 0; i < q; i++)\n    {\n        cin >> e >> f;\n        Point p3(e, f);\n        Point v2 = p3 - p1;\n        Point v4 = v1 * (v1.dot(v2)/(v1.norm()*v1.norm())) + p1;\n        v4.printpoint();\n\n    }\n    return 0;\n}\n\n// getline(cin,s);\n// a = strtok(s, \",\");  \",\"で分解\n// for (int i = 0; i < n; i++)\n"
  },
  {
    "language": "C++",
    "code": "// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\n// Points/Vectors - Projection\n// status:\n\n#define SUBMIT\n\n#include <utility>\n#include <algorithm>\n#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\nusing ui64 = unsigned long long;\nusing i64 = long long;\n\nconst double eps = 1e-10;\n\nbool almost_equals(double a, double b) { return std::abs(a - b) < eps; }\n\nclass point2d {\npublic:\n    point2d() : point2d(0.0, 0.0) {}\n\n    point2d(double x, double y) : x_(x), y_(y) {}\n\n    point2d operator+(const point2d& rhs) const { return {x_ + rhs.x_, y_ + rhs.y_}; }\n\n    point2d operator-(const point2d& rhs) const { return {x_ - rhs.x_, y_ - rhs.y_}; }\n\n    point2d operator*(double rhs) const { return {x_ * rhs, y_ * rhs}; }\n\n    point2d operator/(double rhs) const { return {x_ / rhs, y_ / rhs}; }\n\n    bool operator==(const point2d& rhs) const { return almost_equals(x_, rhs.x_) && almost_equals(y_, rhs.y_); }\n\n    double l2_norm() const { std::sqrt(squared_l2_norm()); }\n\n    double squared_l2_norm() const { return x_ * x_ + y_ * y_; }\n\n    double x() const noexcept { return x_; }\n\n    double y() const noexcept { return y_; }\n\n    friend double dot(const point2d& lhs, const point2d& rhs);\n\n    friend double cross(const point2d& lhs, const point2d& rhs);\n\nprivate:\n    double x_;\n    double y_;\n\nprivate:\n};\n\ndouble dot(const point2d& lhs, const point2d& rhs) {\n    return lhs.x_ * rhs.x_ + lhs.y_ * rhs.y_;\n}\n\ndouble cross(const point2d& lhs, const point2d& rhs) {\n    return lhs.x_ * rhs.y_ - lhs.y_ * rhs.x_;\n}\n\nbool is_orthogonal(const point2d& lhs, const point2d& rhs) {\n    return almost_equals(dot(lhs, rhs), 0.0);\n}\n\nbool is_parallel(const point2d& lhs, const point2d& rhs) {\n    return almost_equals(cross(lhs, rhs), 0.0);\n}\n\nclass segment {\npublic:\n    segment() : segment(point2d(), point2d()) {}\n\n    segment(const point2d& p1, const point2d& p2) : p1_(p1), p2_(p2) {}\n\n    const point2d& p1() const noexcept { return p1_; }\n\n    const point2d& p2() const noexcept { return p2_; }\n\nprivate:\n    point2d p1_;\n    point2d p2_;\n};\n\npoint2d project(const segment& s, const point2d& p) {\n    auto base = s.p2() - s.p1();\n    auto r = dot(p - s.p1(), base) / base.squared_l2_norm();\n    return s.p1() + base * r;\n}\n\nint main() {\n#ifdef SUBMIT\n    auto& stream = cin;\n#else\n    string program_input_str = R\"(0 0 5 -3\n8\n0 1\n2 0\n4 -1\n6 -2\n-1 -1\n1 -2\n3 -3\n5 -4\n)\";\n    stringstream stream(program_input_str);\n#endif\n    double x1, y1, x2, y2;\n    stream >> x1 >> y1 >> x2 >> y2;\n    segment s(point2d(x1, y1), point2d(x2, y2));\n    int q;\n    stream >> q;\n    for (int i = 0; i < q; ++i) {\n        int px, py;\n        stream >> px >> py;\n        auto proj = project(s, point2d(px, py));\n        cout << setprecision(13) << proj.x() << \" \" << proj.y() << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef struct { double x,y;} point;\n\ndouble nai(point a,point b){ return a.x*b.x+a.y*b.y; }\n\nint main(){\npoint p1,p2;\ndouble x,y;\ncin>>x>>y;\np1.x=x;\np1.y=y;\ncin>>x>>y;\np2.x=x;\np2.y=y;\npoint vec={p2.x-p1.x , p2.y-p1.y};\npoint e={vec.x/sqrt(nai(vec,vec)) , vec.y/sqrt(nai(vec,vec))};\nint q;\ncin>>q;\nfor(int i=0;i<q;i++){\ncin>>x>>y;\npoint p;\np.x=x-p1.x;\np.y=y-p1.y;\ncout<<p1.x+nai(p,e)*e.x<<' '<<p1.y+nai(p,e)*e.y<<endl;\n\n\n}\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n#include <cmath>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include<vector>\n#include<cstring>\n#include<set>\n#include <cstdio>\n#include<queue>\n#include<map>\n#define WHITE 0\n#define GRAY  1\n#define BLACK 2\n#define endl '\\n'\n#define forup(i,a,n) for( int i =a; i < n; i++)\n#define llforup(i,a,n) for( ll i =a; i < n; i++)\n#define fordown(i,a,n) for( int i =a; i >= n; i--)\n#define fornot(i,a,n) for( int i=a;!n;i++)\n#define mod  (ll)(1e9+7)\n#define putnum(a) printf(\"%d\\n\",a)\nusing namespace std;\ntypedef long long ll;\ninline int readnum()\n{\n\tint p, data = 0; char ch = 0;\n\twhile ((ch != '-') &&( ch < '0' || ch>'9') )//注意运算优先级，逻辑与大于逻辑非\n\t\tch = getchar();//相当于正则表达式的搜索，跳过不需要的字符\n\tif (ch == '-')\n\t\tp = -1, ch = getchar();//不能与if平行放置，不懂为什么，可能是bug\n\telse p = 1;\n\twhile (ch >= '0' && ch <= '9') data = data * 10 + ch - '0', ch = getchar();//搜索需要的字符\n\treturn data * p;\n}\ninline int ReadPossitive()\n{\n\tchar ch; int data = 0;\n\tch = getchar();\n\twhile (ch == ' ' || ch == '\\n')ch = getchar();\n\twhile (ch != ' ' && ch != '\\n' && ch != EOF)\n\t{\n\t\tdata = data * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn data;\n}\n//并查集模板\nclass DisjointSet {\nprivate:\n\tvector<int>rank, parent;\npublic:\n\tDisjointSet(){}\n\tDisjointSet(int size)\n\t{\n\t\trank.resize(size, 0);//默认初始化为0，养成习惯写完整\n\t\tparent.resize(size, 0);\n\t\tforup(i, 0, size)MakeSet(i);\n\t}\n\tvoid MakeSet(int x)\n\t{\n\t\tparent[x] = x;\n\t\trank[x] = 0;\n\t}\n\tbool same(int x, int y)\n\t{\n\t\treturn Findroot(x) == Findroot(y);\n\t}\n\tvoid unite(int x, int y)\n\t{\n\t\tlink(Findroot(x), Findroot(y));\n\t}\n\tinline int Findroot(int x)\n\t{\n\t\twhile (x != parent[x])\n\t\t{\n\t\t\tx = parent[x];\n\t\t}\n\t\treturn x;\n\t}\n\tvoid link(int rootx, int rooty)\n\t{\n\t\tif (rank[rootx] < rank[rooty])parent[rootx] = parent[rooty];\n\t\telse\n\t\t{\n\t\t\tparent[rooty] = parent[rootx];\n\t\t\tif (rank[rootx] == rank[rooty])\n\t\t\t\trank[rootx]++;\n\t\t}\n\t}\n};\n\n//计算几何模板\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)//保留整数0\nclass Point {\npublic:\n\tdouble x, y;\npublic:\n\tPoint() {};\n\tPoint(double x,double y):x(x),y(y){}\n\tPoint operator +(Point p) { return Point(x + p.x, y + p.y);}//p不能为引用的问题怎么解决？\n\tPoint operator -(Point p) { return Point(x - p.x, y - p.y);}\n\tPoint operator *(double a) { return Point(a * x, a * y); }\n\tPoint operator /(double a) { return Point(x / a, y / a); }\n\tinline double abs() { return sqrt(norm()); }\n\tinline double norm() { return x * x + y * y; }\n\tbool operator <(const Point& p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(const Point& p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\nclass VectorOperation :public Point{//公有继承\npublic:\n\tdouble dot(Point a, Point b)//点乘\n\t{\n\t\treturn a.x * b.x + a.y * b.y;\n\t}\n\tdouble cross(Point a, Point b)//叉乘\n\t{\n\t\treturn a.x * b.y - a.y * b.x;\n\t}\n};\nclass Line{\npublic:\n\tPoint p1, p2;\npublic:\n\tLine() {};\n\tLine(int p1x, int p1y, int p2x, int p2y)\n\t{\n\t\tp1.x = p1x; p1.y = p1y;\n\t\tp2.x = p2x; p2.y = p2y;\n\t}\n};\nclass LineOperation :public VectorOperation{\npublic:\t\n\tLineOperation() {};\n\tbool isOrthogonal(Line s1, Line s2)\n\t{\n\t\treturn equals(dot(s1.p2-s1.p1, s2.p2 - s2.p1), 0.0);//操作符重载的返回值的内存分配机制尚不可知，似乎返回值没有分配内存，dot的参数不能用引用，否则报错。\n\t}\n\tbool isParallel(Line s1, Line s2)\n\t{\n\t\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);//外积判断平行，内积判断垂直。\n\t}\n\tPoint projection(Line s, Point p)\n\t{\n\t\tVector base = s.p1 - s.p2;\n\t\tdouble r = dot(p - s.p1, base) /base.norm();\n\t\treturn s.p1 + base * r;\n\t}\n\tPoint reflection(Line s, Point p)\n\t{\n\t\treturn p + (projection(s, p) * 2.0);\n\t}\n};\n//E-mail 374656045@qq.com\n\nclass solve {\nprivate:\n\tint n;\npublic://采用邻接表建图,带权无向图\n\tsolve()\n\t{\n\t\tint x1, y1, x2, y2;\n\t\tx1 = readnum(); y1 = readnum();\n\t\tx2 = readnum(); y2 = readnum();\n\t\tn = readnum();\n\t\tLine s(x1, y1, x2, y2);\n\t\tLineOperation op;\n\t\tint x, y;\n\t\tforup(i, 0, n)\n\t\t{\n\t\t\tx = readnum(); y = readnum();\n\t\t\tPoint p,temp(x,y);\n\t\t\tp = op.projection(s, temp);\n\t\t\tprintf(\"%.10f %.10f\\n\", p.x, p.y);\n\t\t}\n\t}\n\t\n};\nint main(void)\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);//慎用，cin和scanf混用会导致非MSC++WA\n#ifdef DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tsolve solution;\n#ifdef DEBUG\n\tfclose(stdin);//关闭文件 \n\tfclose(stdout);//关闭文件 \n#endif\n\treturn 0;\n\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\n#define db double\nstruct point{\n    db x,y;\n    point(){}\n    point(db x,db y):x(x),y(y){}\n    point operator + (point B){ return point(x+B.x,y+B.y); }\n    point operator - (point B){ return point(x-B.x,y-B.y); }\n    point operator * (db k){ return point(k*x,k*y); }\n    db operator * (point B){ return x*B.y-y*B.x; }\n    db operator ^ (point B){ return x*B.x+y*B.y; }\n    bool operator < (point B){ return (y>0)!=(B.y>0)?y>0:((*this)*B)>0; }\n};\ndb dis(point A,point B){ return sqrt((A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y)); }\nstruct line{\n    point A,B;\n    line(){}\n    line(point A,point B):A(A),B(B){}\n};\npoint projection(line l,point P){\n    point dir=l.B-l.A; P=P-l.A;\n    return dir*((P^dir)/(dir.x*dir.x+dir.y*dir.y))+l.A;\n}\nint main(){\n    db x1,y1,x2,y2; scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n    line l(point(x1,y1),point(x2,y2));\n    int q; scanf(\"%d\",&q);\n    while (q--){\n        db x,y; scanf(\"%lf%lf\",&x,&y);\n        point proj=projection(l,point(x,y));\n        printf(\"%.9f %.9f\\n\",proj.x,proj.y);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\n//#define equals( a, b ) (fabs((a) - (b)) < DBL_E)\n\nclass Vector2 {\npublic:\n\tVector2(double x_, double y_) : x(x_), y(y_) {}\n\tVector2() : x(0), y(0) {}\n\tVector2 operator - (Vector2 other) {\n\t\tVector2 vec(x - other.GetX(), y - other.GetY());\n\t\treturn vec;\n\t}\n\tVector2 operator * (double other) {\n\t\treturn Vector2(other * x, other * y);\n\t}\n\n\tvoid SetVector2(double x_, double y_) {\n\t\tx = x_;\n\t\ty = y_;\n\t}\n\tdouble GetX() {\n\t\treturn x;\n\t}\n\tdouble GetY() {\n\t\treturn y;\n\t}\n\nprivate:\n\tdouble x, y;\n};\n\ndouble Dot(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetX() + vecA.GetY() * vecB.GetY();\n}\n\ndouble CrossY(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetY() - vecA.GetY() * vecB.GetX();\n}\n\ndouble Norm(Vector2 vec) {\n\treturn sqrtl(vec.GetX() * vec.GetX() + vec.GetY() * vec.GetY());\n}\n\nbool IsOrthogonal(Vector2 vecA, Vector2 vecB) {\n\tdouble ans = Dot(vecA, vecB);\n\t//\treturn equals(ans, 0.0);\n\t//\treturn (fabs(ans) < DBL_EPSILON);\n\tans = ans > 0 ? ans : -ans;\n\treturn (ans < 0.1f);\n}\n\nbool IsParallel(Vector2 vecA, Vector2 vecB) {\n\tdouble ans = CrossY(vecA, vecB);\n\t//\treturn (fabs(ans) < DBL_EPSILON);\n\tans = ans > 0 ? ans : -ans;\n\treturn (ans < 0.1f);\n}\n\nint main() {\n\tint query;\n\tVector2 vecs[2];\n\n\tfor (int i = 0; i < 2; i++) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvecs[i].SetVector2(x, y);\n\t}\n\tVector2 base = vecs[1] - vecs[0];\n\tbase.SetVector2(base.GetX() / Norm(base), base.GetY() / Norm(base));\n\n\tcin >> query;\n\n\tfor (int i = 0; i < query; i++) {\n\t\tVector2 vecAns;\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvecAns.SetVector2(x, y);\n\n\t\tVector2 ans = base * Dot(base, vecAns);\n\t\tcout << ans.GetX() << \" \" << ans.GetY() << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\nusing namespace std;\n\nstruct point{\n  double x;\n  double y;\n};\n\nint main()\n{\n  point p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n\n  int q;\n  cin >> q;\n  vector<point> ps;\n  for(int i=0; i<q; ++i){\n    point temp;\n    cin >> temp.x >> temp.y;\n    ps.push_back(temp);\n  }\n\n  double x2_x1 = p2.x - p1.x;\n  double y2_y1 = p2.y - p1.y;\n\n  for(int i=0; i<q; ++i){\n    double xp = ps[i].x;\n    double yp = ps[i].y;\n    double ansx = ((yp-p1.y)*x2_x1*y2_y1+xp*x2_x1*x2_x1+p1.x*y2_y1*y2_y1)/ \\\n      (y2_y1*y2_y1 + x2_x1*x2_x1);\n    double ansy = -((yp-p1.y)*x2_x1*x2_x1+(p1.x-xp)*y2_y1*x2_x1)/ \\\n      (y2_y1*y2_y1+x2_x1*x2_x1) + yp;\n\n    cout << fixed;\n    cout << setprecision(10) <<  ansx << \" \"\n\t << setprecision(10) <<  ansy << \"\\n\";\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long LL;\ntypedef complex<double> Point;\ntypedef Point Vector;\nconst double EPS = 1e-10;\nconst int COUNTER_CLOCKWISE = 1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = 2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\nconst int IN = 2;\nconst int ON = 1;\nconst int OUT = 0;\nstruct Segment {\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\ninline double equals(double a, double b);\ninline double dot(Vector a, Vector b);\ninline double cross(Vector a, Vector b);\ninline bool isOrthogonal(Vector a, Vector b);\ninline bool isParallel(Vector a, Vector b);\nPoint project(Segment s, Point p);\nPoint reflect(Segment s, Point p);\nint ccw(Point p0, Point p1, Point p2);\nbool intersect(Segment s1, Segment s2);\nbool intersect(Circle c, Line l);\nbool intersect(Circle c1, Circle c2);\ndouble getDistanceLP(Line l, Point p);\ndouble getDistanceSP(Segment s, Point p);\ndouble getDistance(Segment s1, Segment s2);\nPoint getCrossPoint(Segment s1, Segment s2);\npair<Point, Point> getCrossPoints(Circle c, Line l);\npair<Point, Point> getCrossPoints(Circle c1, Circle c2);\nint contains(Polygon g, Point p);\nPolygon andrewScan(Polygon s);\n\ninline double equals(double a, double b) {\n\treturn fabs(a - b) < EPS;\n}\nbool operator<(const Point &p1, const Point &p2) {\n\treturn p1.real() != p2.real() ? p1.real() < p2.real() : p1.imag() < p2.imag();\n}\nbool operator==(const Point &p1, const Point &p2) {\n\treturn equals(p1.real(), p2.real()) && equals(p1.imag(), p2.imag());\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.real()*b.real() + a.imag()*b.imag();\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.real()*b.imag() - a.imag()*b.real();\n}\ninline bool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\ninline bool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn (ccw(s1.p1, s1.p2, s2.p1)*ccw(s1.p1, s1.p2, s2.p2) <= 0 &&\n\t\tccw(s2.p1, s2.p2, s1.p1)*ccw(s2.p1, s2.p2, s1.p2) <= 0);\n}\nbool intersect(Circle c, Line l) {\n\treturn getDistanceLP(l, c.c) <= c.r;\n}\nbool intersect(Circle c1, Circle c2) {\n\treturn abs(c1.c - c2.c) <= c1.r + c2.r;\n}\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tassert(intersect(s1, s2));\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r*c.r - norm(pr - c.c));\n\treturn make_pair(pr + e*base, pr - e*base);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tassert(intersect(c1, c2));\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.imag() > b.imag()) swap(a, b);\n\t\tif (a.imag() < EPS && EPS<b.imag() && cross(a, b)>EPS) x = !x;\n\t}\n\treturn x ? 2 : 0;\n}\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tfor (int i = 2; i < s.size(); i++) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\treturn l;\n}\n\nint main() {\n\tint x, y;\n\tcin >> x >> y;\n\tPoint p1(x, y);\n\tcin >> x >> y;\n\tPoint p2(x, y);\n\tSegment s(p1, p2);\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tPoint a = project(s, p);\n\t\tprintf(\"%.15lf %.15lf\\n\", a.real(), a.imag());\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define REP(i,n) for(int i=0,_n=(int)(n);i<_n;++i)\n#define ALL(v) (v).begin(),(v).end()\n#define CLR(t,v) memset(t,(v),sizeof(t))\ntemplate<class T1,class T2>ostream& operator<<(ostream& os,const pair<T1,T2>&a){return os<<\"(\"<<a.first<<\",\"<<a.second<< \")\";}\ntemplate<class T>void pv(T a,T b){for(T i=a;i!=b;++i)cout<<(*i)<<\" \";cout<<endl;}\ntemplate<class T>void chmin(T&a,const T&b){if(a>b)a=b;}\ntemplate<class T>void chmax(T&a,const T&b){if(a<b)a=b;}\n\n\ntypedef long double D;\nconst D PI = acos(-1.0);\nconst D EPS = 1e-10;\nclass P { public:\n  D x, y;\n  P(D x=0, D y=0) : x(x), y(y) {}\n\n  P& operator+=(const P& o) { x += o.x; y += o.y; return *this; }\n  P& operator-=(const P& o) { x -= o.x; y -= o.y; return *this; }\n  P& operator*=(const P& o) { return *this = {x*o.x - y*o.y, x*o.y + y*o.x}; }\n  P& operator*=(const D& r) { x *= r; y *= r; return *this; }\n  P& operator/=(const D& r) { x /= r; y /= r; return *this; }\n  P operator-() const { return {-x, -y}; }\n\n  D norm() const { return x*x + y*y; }\n  D abs() const { return sqrt(norm()); }\n  D arg() const { return atan2(y, x); }\n  bool isZero() const { return std::abs(x) < EPS && std::abs(y) < EPS; }\n  /** 象限 */\n  int orth() const { return y >= 0 ? (x >= 0 ? 1 : 2) : (x < 0 ? 3 : 4); }\n  static P polar(const D& rho, const D& theta = 0) { return {rho * cos(theta), rho * sin(theta)}; }\n};\nstd::ostream &operator<<(std::ostream &os, P const &p) { return os << \"(\" << p.x << \", \" << p.y << \")\"; }\nstd::istream &operator>>(std::istream &is, P &p) { D a, b; is >> a >> b; p = P(a, b); return is; }\nP operator+(const P& p, const P& q) { return P(p) += q; }\nP operator-(const P& p, const P& q) { return P(p) -= q; }\nP operator*(const P& p, const P& q) { return P(p) *= q; }\nP operator*(const P& p, const D& r) { return P(p) *= r; }\nP operator/(const P& p, const D& r) { return P(p) /= r; }\nP operator*(const D& r, const P& p) { return P(p) *= r; }\nP operator/(const D& r, const P& p) { return P(p) /= r; }\nD crs(const P& a, const P& b){ return a.x*b.y - a.y*b.x; }\nD dot(const P& a, const P& b){ return a.x*b.x + a.y*b.y; }\nint signum(D x) {return x > EPS ? +1 : x < -EPS ? -1 : 0;}\n// 辞書順ソート\nbool operator<(const P& a, const P& b) {\n  if (a.x != b.x) return a.x < b.x;\n  return a.y < b.y;\n}\n// // 偏角ソート\n// bool operator<(const P& a, const P& b) {\n//   // atan2を使う方法。誤差に注意\n//   // return a.arg() < b.arg();\n\n//   // cosを使う方法。(0,0)の扱いに注意\n//   if (a.isZero() != b.isZero()) return a.isZero() > b.isZero();\n//   if (a.orth() != b.orth()) return a.orth() < b.orth();\n//   return crs(a, b) > 0;\n// }\n/** ベクトルpをベクトルbに射影したベクトル */\nP proj(const P& p, const P& b) {\n  P t = b * dot(p, b);\n  return t / b.norm();\n}\n\nint main2() {\n  P p1, p2;\n  cin >> p1 >> p2;\n  P v = p2 - p1;\n  int N; cin >> N;\n  REP(i, N) {\n    P q; cin >> q;\n    P ans = proj(q - p1, v) + p1;\n    printf(\"%.12f %.12f\\n\", (double)ans.x, (double)ans.y);\n  }\n  return 0;\n}\n\nint main() {\n\n#ifdef LOCAL\n  for (;!cin.eof();cin>>ws)\n#endif\n    main2();\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iomanip>\n#include<limits>\n#include<thread>\n#include<utility>\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<numeric>\n#include<cassert>\n#include<random>\n#include<chrono>\n#include<unordered_set>\n#include<unordered_map>\n#include<fstream>\n#include<list>\n#include<functional>\n#include<bitset>\n#include<complex>\n#include<tuple>\nusing namespace std;\ntypedef unsigned long long int ull;\ntypedef long long int ll;\ntypedef pair<ll,ll> pll;\ntypedef long double D;\ntypedef complex<D> P;\n#define F first\n#define S second\nconst ll E=1e18+7;\nconst ll MOD=1000000007;\n\n\ntemplate<typename T,typename U>istream & operator >> (istream &i,pair<T,U> &A){i>>A.F>>A.S; return i;}\ntemplate<typename T>istream & operator >> (istream &i,vector<T> &A){for(auto &I:A){i>>I;} return i;}\ntemplate<typename T,typename U>ostream & operator << (ostream &o,pair<T,U> &A){o<<A.F<<\" \"<<A.S; return o;}\ntemplate<typename T>ostream & operator << (ostream &o,vector<T> &A){ll i=A.size(); for(auto &I:A){o<<I<<(--i?\" \":\"\");} return o;}\ntemplate<typename T>vector<T> & cset(vector<T> &A,T e=T()){for(auto &I:A){I=e;} return A;}\n\n\nnamespace Geometry{\n    typedef long double D;\n    typedef complex<long double> P;\n    typedef pair<P,D> C;\n    \n    const D EPS=1e-9;\n    const D PI=asin(1)*2;\n    const D INF=1e18;\n    \n    const static bool comp(const P &p1,const P &p2){\n        if(p1.real()==p2.real()){return p1.imag()<p2.imag();}\n        return p1.real()<p2.real();\n    }\n    \n    const static bool comp_y(const P &p1,const P &p2){\n        if(p1.imag()==p2.imag()){return p1.real()<p2.real();}\n        return p1.imag()<p2.imag();\n    }\n    \n    D dot(P p1,P p2){return p1.real()*p2.real()+p1.imag()*p2.imag();}\n    \n    D cross(P p1,P p2){return p1.real()*p2.imag()-p1.imag()*p2.real();}\n    \n    P project(P vec,P x){return vec*(x/vec).real();}\n    \n    P project(P p1,P p2,P x){return p1+project(p2-p1,x-p1);}\n    \n    P reflect(P vec,P x){return vec*conj(x/vec);}\n    \n    P reflect(P p1,P p2,P x){return p1+reflect(p2-p1,x-p1);}\n    \n    bool intersectSL(P p1,P p2,P vec){\n        vec/=abs(vec); p1/=vec; p2/=vec;\n        return (p1.imag()<EPS && p2.imag()>-EPS) || (p1.imag()>-EPS && p2.imag()<EPS);\n    }\n    \n    bool intersectSL(P p1,P p2,P p3,P p4){return intersectSL(p1-p4,p2-p4,p3-p4);}\n    \n    bool intersectSS(P p1,P p2,P p3,P p4){\n        if(dot(p2-p1,p3-p1)<-EPS && dot(p2-p1,p4-p1)<-EPS){return true;}\n        if(dot(p1-p2,p3-p2)<-EPS && dot(p1-p2,p4-p2)<-EPS){return false;}\n        return intersectSL(p1,p2,p3,p4) && intersectSL(p3,p4,p1,p2);\n    }\n    \n    D distLP(P vec,P x){return abs((x/vec).imag())*abs(vec);}\n    \n    D distLP(P p1,P p2,P x){return distLP(p2-p1,x-p1);}\n    \n    D distSP(P p1,P p2,P x){\n        if(dot(p2-p1,x-p1)<-EPS){return abs(x-p1);}\n        if(dot(p1-p2,x-p2)<-EPS){return abs(x-p2);}\n        return distLP(p1,p2,x);\n    }\n    \n    D distSS(P p1,P p2,P p3,P p4){\n        if(intersectSS(p1,p2,p3,p4)){return 0.0;}\n        return min({distSP(p1,p2,p3),distSP(p1,p2,p4),\n            distSP(p3,p4,p1),distSP(p3,p4,p2)});\n    }\n    \n    P crosspointLL(P p1,P p2,P vec){\n        if(abs(cross(p2-p1,vec))<EPS){return vec;}\n        return vec*cross(p2-p1,p2)/cross(p2-p1,vec);\n    }\n    \n    P crosspointLL(P p1,P p2,P p3,P p4){\n        return p4+crosspointLL(p1-p4,p2-p4,p3-p4);\n    }\n    \n    P crosspointSS(P p1,P p2,P p3,P p4){\n        if(distSP(p1,p2,p3)<EPS){return p3;}\n        if(distSP(p1,p2,p4)<EPS){return p4;}\n        return crosspointLL(p1,p2,p3,p4);\n    }\n    \n    bool intersectShL(P p1,P p2,P vec){\n        vec/=abs(vec);\n        return intersectSL(p1,p2,vec) &&\n        crosspointLL(p1/vec,p2/vec,vec/vec).real()>-EPS;\n    }\n    \n    bool intersectShL(P p1,P p2,P p3,P p4){\n        return intersectShL(p1-p3,p2-p3,p4-p3);\n    }\n    \n    //1::in,0::on edge,-1::out\n    int contain(const vector<P> &poly,const P &p){\n        vector<P> A={{65537,96847},{-24061,6701},{56369,-86509},{-93763,-78049},{56957,10007}};\n        vector<bool> cnt(5,false);\n        for(int i=0;i<(int)poly.size();i++){\n            int j=(i+1)%poly.size();\n            if(distSP(poly[i],poly[j],p)<EPS){return 0;}\n            for(int j=0;j<5;j++){\n                if(intersectShL(poly[i],poly[j],p,p+A[j])){cnt[j]=!cnt[j];}\n            }\n        }\n        int in=0;\n        for(int j=0;j<5;j++){if(cnt[j]){in++;}}\n        return in>=3?1:-1;\n    }\n    \n    vector<P> convexcut(const vector<P> &poly,P p1,P p2){\n        vector<P> ret;\n        for(int i=0;i<(int)poly.size();i++){\n            int j=(i+1)%poly.size();\n            if(cross(p2-p1,poly[i]-p1)>-EPS){ret.push_back(poly[i]);}\n            if(intersectSL(poly[i],poly[j],p1,p2) &&\n               distLP(p1,p2,poly[i])>EPS && distLP(p1,p2,poly[j])>EPS){\n                ret.push_back(crosspointLL(poly[i],poly[j],p1,p2));\n            }\n        }\n        return ret;\n    }\n    \n    D area(const vector<P> &poly){\n        D ans=0;\n        for(int i=2;i<(int)poly.size();i++){\n            ans+=cross(poly[i-1]-poly[0],poly[i]-poly[0]);\n        }\n        return abs(ans)/2;\n    }\n    \n    vector<P> convexhull(vector<P> pts){\n        vector<P> ret;\n        sort(pts.begin(),pts.end(),comp);\n        auto fnc=[&](){\n            for(auto &I:pts){\n                if(!ret.empty() && I==ret.back()){continue;}\n                while(ret.size()>=2 && cross(ret.back()-ret[ret.size()-2],I-ret.back())<-EPS){\n                    ret.pop_back();\n                }\n                ret.push_back(I);\n            }\n        };\n        fnc();\n        reverse(pts.begin(),pts.end());\n        fnc();\n        if(ret[0]==ret.back()){ret.pop_back();}\n        return ret;\n    }\n    \n    //4::seperate,3::circumscribe,2::intersect,1::inscribe,0::contain,-1::same\n    int intersectCC(C c1,C c2){\n        D d=abs(c1.F-c2.F),r=c1.S+c2.S,dif=abs(c2.S-c1.S);\n        if(d<EPS && dif<EPS){return -1;}\n        if(d-r>EPS){return 4;}\n        if(d-r>-EPS){return 3;}\n        if(d-dif>EPS){return 2;}\n        if(d-dif>-EPS){return 1;}\n        return 0;\n    }\n    \n    vector<P> crosspointLC(P p1,P p2,C c){\n        vector<P> ret;\n        P pr=project(p1,p2,c.F);\n        D d=distLP(p1,p2,c.F);\n        if(d-c.S>EPS){return ret;}\n        if(d-c.S>-EPS){ret.push_back(pr); return ret;}\n        P vec=p2-p1; vec*=sqrt(c.S*c.S-d*d)/abs(vec);\n        ret.push_back(pr-vec);\n        ret.push_back(pr+vec);\n        return ret;\n    }\n    \n    vector<P> crosspointSC(P p1,P p2,C c){\n        vector<P> ret;\n        for(auto &I:crosspointLC(p1,p2,c)){\n            if(distSP(p1,p2,I)<EPS){ret.push_back(I);}\n        }\n        return ret;\n    }\n    \n    vector<P> crosspointCC(C c1,C c2){\n        vector<P> ret;\n        P vec=c2.F-c1.F;\n        D base=(c1.S*c1.S+norm(vec)-c2.S*c2.S)/(2*abs(vec));\n        D h=sqrt(c1.S*c1.S-base*base);\n        vec/=abs(vec);\n        ret.push_back(c1.F+vec*P(base,-h));\n        ret.push_back(c1.F+vec*P(base,h));\n        return ret;\n    }\n    \n    vector<P> tangentCP(C c,P p){\n        return crosspointCC(c,C(p,sqrt(norm(c.F-p)-c.S*c.S)));\n    }\n    \n    vector<pair<P,P>> tangentCC(C c1,C c2){\n        vector<pair<P,P>> ret;\n        P d=c2.F-c1.F;\n        for(D i:{-1,1}){\n            D r=c1.S+c2.S*i;\n            if(intersectCC(c1,c2)>i+1){\n                for(P s:{-1i,1i}){\n                    P p=r+s*sqrt(norm(d)-norm(r));\n                    ret.push_back({c1.F+d*c1.S/norm(d)*p,c2.F-d*i*c2.S/norm(d)*p});\n                }\n            }\n        }\n        return ret;\n    }\n    \n    D area(const vector<P> &poly,C c){\n        D ret=0;\n        for(int i=0;i<(int)poly.size();i++){\n            P a=poly[i]-c.F,b=poly[(i+1)%poly.size()]-c.F;\n            if(abs(a)<c.S+EPS && abs(b)<c.S+EPS){ret+=cross(a,b);}\n            else{\n                vector<P> A=crosspointSC(a,b,{0,c.S});\n                if(A.empty()){ret+=c.S*c.S*arg(b/a);}\n                else{\n                    ret+=(abs(a)<c.S?cross(a,A[0]):c.S*c.S*arg(A[0]/a));\n                    ret+=(abs(b)<c.S?cross(A.back(),b):c.S*c.S*arg(b/A.back()));\n                    ret+=cross(A[0],A.back());\n                }\n            }\n        }\n        return abs(ret)/2;\n    }\n    \n    //反時計回り\n    D diameter(const vector<P> &poly){\n        D ret=0;\n        ll l=0,r=0,n=poly.size();\n        if(n==2){return abs(poly[0]-poly[1]);}\n        for(int i=0;i<n;i++){\n            if(comp(poly[l],poly[i])){l=i;}\n            if(comp(poly[i],poly[r])){r=i;}\n        }\n        ll sl=r,sr=l;\n        while(sl!=l || sr!=r){\n            ret=max(ret,abs(poly[r]-poly[l]));\n            if(cross(poly[(l+1)%n]-poly[l],poly[(r+1)%n]-poly[r])<0){(++l)%=n;}\n            else{(++r)%=n;}\n        }\n        return ret;\n    }\n    \n    D closestpair(vector<P> pt){\n        sort(pt.begin(),pt.end(),comp);\n        D ret=INF;\n        int N=pt.size();\n        for(int i=1;i<N;i<<=1){\n            for(int j=0;i+j<N;j+=i*2){\n                int m=i+j;\n                vector<P> R;\n                D l=-INF,r=INF;\n                for(int k=j;k<m;k++){l=max(l,pt[k].real());}\n                for(int k=0;m+k<N && k<i;k++){r=min(r,pt[m+k].real());}\n                for(int k=0;m+k<N && k<i;k++){\n                    if(pt[m+k].real()-l<ret){R.push_back(pt[m+k]);}\n                }\n                int idx=0;\n                for(int k=j;k<m;k++){\n                    if(r-pt[k].real()>ret){continue;}\n                    int M=R.size();\n                    while(idx<M && pt[k].imag()-R[idx].imag()>ret){idx++;}\n                    for(int s=idx;s<M && R[s].imag()-pt[k].imag()<ret;s++){\n                        ret=min(ret,abs(R[s]-pt[k]));\n                    }\n                }\n                auto ed=(j+i*2<N?pt.begin()+j+2*i:pt.end());\n                inplace_merge(pt.begin()+j,pt.begin()+m,ed,comp_y);\n            }\n        }\n        return ret;\n    }\n    \n    P centerofgravity(const vector<P> &pt){\n        P ret(0,0);\n        D wt=0;\n        for(int i=2;i<(int)pt.size();i++){\n            D w2=cross(pt[i-1]-pt[0],pt[i]-pt[0]);\n            P p=(pt[0]+pt[i-1]+pt[i])/(D)3;\n            wt+=w2;\n            ret+=p*w2;\n        }\n        return ret/wt;\n    }\n    \n    istream & operator >> (istream &i,P &p){D x,y; i>>x>>y; p={x,y}; return i;}\n    istream & operator >> (istream &i,C &p){D x,y; i>>x>>y>>p.S; p.F={x,y}; return i;}\n};\n\nusing namespace Geometry;\n\n\nint main(){\n    cout<<fixed<<setprecision(12);\n    P p1,p2;\n    cin>>p1>>p2;\n    ll q;\n    cin>>q;\n    while(q--){\n        P x;\n        cin>>x;\n        P ans=project(p1,p2,x);\n        cout<<ans.real()<<\" \"<<ans.imag()<<endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <complex>\n#include <cmath>\n\nusing namespace std;\n\nstatic const double EPS=1e-12;\nstatic const double INF=1e24;\n\nusing Point=complex<double>;\nusing Plane=vector<Point>;\n\nbool operator<(const Point &a, const Point &b) {\n    return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b);\n}\n\ndouble cross_prod(const Point &a, const Point &b) {\n    return imag(conj(a)*b);\n}\n\ndouble dot_prod(const Point &a, const Point &b) {\n    return real(conj(a)*b);\n}\n\nstruct Line: public vector<Point> {\n    Line() {}\n    Line(const Point &a, const Point &b) {\n        push_back(a);\n        push_back(b);\n    }\n};\n\nstruct Circle {\n    Point p;\n    double r;\n    Circle() {}\n    Circle(const Point &p, const double r): p(p), r(r) {}\n};\n\nint main() {\n    double x, y;\n    scanf(\"%lf %lf\", &x, &y);\n    Point p1(x, y);\n\n    scanf(\"%lf %lf\", &x, &y);\n    Point p2(x, y);\n\n    Point e(real(p2)-real(p1), imag(p2)-imag(p1));\n    e /= abs(e);\n\n    size_t q;\n    scanf(\"%zu\", &q);\n    for (size_t i=0; i<q; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        Point p(x, y);\n\n        double r=dot_prod(p, e);\n        Point z=p1+r*e;\n        printf(\"%.12f %.12f\\n\", real(z), imag(z));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <iomanip>\n\nusing namespace std;\n\nstruct Vector2 {\n    double x;\n    double y;\n\n    Vector2()\n    : x(0.0)\n    , y(0.0)\n    {}\n\n    Vector2(double _x, double _y) \n    : x(_x)\n    , y(_y)\n    {}\n\n    double Length() const {\n        return sqrt(x * x + y * y);\n    }\n\n    Vector2 Normalize() const {\n        const double length = Length();\n        Vector2 norm(x / length, y / length);\n        return norm;\n    }\n    \n    Vector2 operator+(const Vector2& vec) const {\n        Vector2 v;\n        v.x = x + vec.x;\n        v.y = y + vec.y;\n        return v;\n    }\n\n    Vector2 operator-(const Vector2& vec) const {\n        Vector2 v;\n        v.x = x - vec.x;\n        v.y = y - vec.y;\n        return v;\n    }\n\n    Vector2 operator*(const double d) const {\n        Vector2 v;\n        v.x = x * d;\n        v.y = y * d;\n        return v;\n    }\n};\n\ndouble Dot(const Vector2& l, const Vector2& r) {\n    return l.x * r.x + l.y * r.y;\n}\n\nint main() {\n    int p0X, p0Y, p1X, p1Y;\n    cin >> p0X >> p0Y >> p1X >> p1Y;\n\n    int q;\n\n    cin >> q;\n\n    const Vector2 p0(p0X, p0Y);\n    const Vector2 p1(p1X, p1Y);\n\n    const Vector2 p0p1 = p1 - p0;\n    \n    while(q--) {\n        int ptx, pty;\n        cin >> ptx >> pty;\n\n        const Vector2 pt(ptx, pty);\n        const Vector2 p0pt = pt - p0;\n\n        const Vector2 ans = p0 + p0p1 * (Dot(p0p1, p0pt) / (p0p1.Length() * p0p1.Length()));\n        cout << fixed << setprecision(10) << ans.x << \" \" << ans.y << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <complex>\n#include <iostream>\n#include <vector>\n\n// ???, ????????????\ntypedef std::complex<double> Point;\ntypedef Point Vector;\n\nnamespace std {\n\tbool operator < (const Point &a, const Point &b){\n\t\treturn a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n\t}\n\tistream& operator >> (istream &is, Point &a){\n\t\tdouble x, y;\n\t\tis >> x >> y;\n\t\ta = Point(x, y);\n\t\treturn is;\n\t}\n}\n\n// ??´???\nstruct Line {\n\tPoint p1, p2;\n\tLine(){}\n\tLine(const Point &p1, const Point &p2): p1(p1), p2(p2){}\n};\ntypedef Line Segment;\n\nnamespace std {\n\tistream& operator >> (istream &is, Line &a){\n\t\treturn is >> a.p1 >> a.p2;\n\t}\n}\n\n// ???\nstruct Circle {\n\tPoint p; double r;\n\tCircle(){}\n\tCircle(const Point &p, double r): p(p), r(r){}\n};\n\nnamespace std {\n\tistream& operator >> (istream &is, Circle &a){\n\t\treturn is >> a.p >> a.r;\n\t}\n}\n\n// ????§???¢\ntypedef std::vector<Point> Polygon;\n\nconst double EPS = 1e-12;\nconst double INF = 1e12;\nconst double PI = acos(-1.0);\n\n// ????????¨??????????????¢???\nenum CCW {\n\tCOUNTER_CLOCKWISE = 1,\n\tCLOCKWISE = -1,\n\tONLINE_BACK = 2,\n\tONLINE_FRONT = -2,\n\tON_SEGMENT = 0,\n};\n\n// ?????¢????£????????????¢???\nenum {\n\tOUT = 0,\n\tON = 1,\n\tIN = 2,\n};\n\n\n// a ??? 2 ??? (a ^ 2)\ndouble SQ(double a);\n\n// ?????????????????????????????¢??°\nbool EQ(double a, double b);\nbool NEQ(double a, double b);\nbool LT(double a, double b);\nbool GT(double a, double b);\nbool LEQ(double a, double b);\nbool GEQ(double a, double b);\n\n// ??§?????? <=> ?????°?????????\ndouble toDeg(double t);\ndouble toRad(double t);\n\n// ????????? (dot(a, a))\ndouble norm(const Vector &a);\n\n// ??????, ??????\ndouble dot(const Vector &a, const Vector &b);\ndouble cross(const Vector &a, const Vector &b);\n\n// ??´???, ??????\nbool orthogonal(const Segment &s1, const Segment &s2);\nbool parallel(const Segment &s1, const Segment &s2);\n\n// ?°???±, ????°?\nPoint project(const Line &l, const Point &p);\nPoint reflect(const Line &l, const Point &p);\n\n// ?????? (p0, p1) ??¨??? p2 ???????????¢???\nint ccw(const Point &p0, const Point &p1, const Point &p2);\n\n// ????????????\nbool intersectLP(const Line &l, const Point &p);\nbool intersectLL(const Line &l1, const Line &l2);\nbool intersectLS(const Line &l, const Segment &s);\nbool intersectSP(const Segment &s, const Point &p);\nbool intersectSS(const Segment &s1, const Segment &s2);\nint intersectCP(const Circle &c, const Point &p);\nbool intersectCL(const Circle &c, const Line &l);\nint intersectCS(const Circle &c, const Segment &s);\nint intersectCC(const Circle &c1, const Circle &c2);\n\n// ?????¢\ndouble distanceLP(const Line &l, const Point &p);\ndouble distanceLL(const Line &l1, const Line &l2);\ndouble distanceLS(const Line &l, const Segment &s);\ndouble distanceSP(const Segment &s, const Point &p);\ndouble distanceSS(const Segment &s1, const Segment &s2);\ndouble distanceCP(const Circle &c, const Point &p);\ndouble distanceCL(const Circle &c, const Line &l);\ndouble distanceCS(const Circle &c, const Segment &s);\ndouble distanceCC(const Circle &c1, const Circle &c2);\n\n// ??????\nPoint crossPointLL(const Line &l1, const Line &l2);\nPoint crossPointLS(const Line &l, const Segment &s);\nPoint crossPointSS(const Segment &s1, const Segment &s2);\nstd::vector<Point> crossPointCL(const Circle &c, const Line &l);\nstd::vector<Point> crossPointCS(const Circle &c, const Segment &s);\nstd::vector<Point> crossPointCC(const Circle &c1, const Circle &c2);\n\n\ndouble SQ(double a){\n\treturn a * a;\n}\n\nbool EQ(double a, double b){\n\treturn std::abs(a - b) < EPS;\n}\n\nbool NEQ(double a, double b){\n\treturn !EQ(a, b);\n}\n\nbool LT(double a, double b){\n\treturn a - b < -EPS;\n}\n\nbool GT(double a, double b){\n\treturn a - b > EPS;\n}\n\nbool LEQ(double a, double b){\n\treturn !GT(a, b);\n}\n\nbool GEQ(double a, double b){\n\treturn !LT(a, b);\n}\n\ndouble toDeg(double t){\n\treturn t * 180 / PI;\n}\n\ndouble toRad(double t){\n\treturn t / 180 * PI;\n}\n\ndouble norm(const Vector &a){\n\treturn SQ(a.real()) + SQ(a.imag());\n}\n\ndouble dot(const Vector &a, const Vector &b){\n\treturn (conj(a) * b).real();\n}\n\ndouble cross(const Vector &a, const Vector &b){\n\treturn (conj(a) * b).imag();\n}\n\nbool orthogonal(const Segment &s1, const Segment &s2){\n\treturn EQ(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool parallel(const Segment &s1, const Segment &s2){\n\treturn EQ(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(const Line &l, const Point &p){\n\tVector base = l.p2 - l.p1;\n\tdouble r = dot(p - l.p1, base) / norm(base);\n\treturn l.p1 + base * r;\n}\n\nPoint reflect(const Line &l, const Point &p){\n\treturn p + (project(l, p) - p) * 2.0;\n}\n\nint ccw(const Point &p0, const Point &p1, const Point &p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (GT(cross(a, b), 0.0)) return COUNTER_CLOCKWISE;\n\tif (LT(cross(a, b), 0.0)) return CLOCKWISE;\n\tif (LT(dot(a, b), 0.0)) return ONLINE_BACK;\n\tif (GT(norm(a), norm(b))) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersectLP(const Line &l, const Point &p){\n\treturn ~ccw(l.p1, l.p2, p) & 1;\n\t// ONLINE_BACK or ONLINE_FRONT or ON_SEGMENT\n}\n\nbool intersectLL(const Line &l1, const Line &l2){\n\treturn !parallel(l1, l2);\n}\n\nbool intersectLS(const Line &l, const Segment &s){\n\treturn LEQ(cross(l.p2 - l.p1, s.p1 - l.p1) * cross(l.p2 - l.p1, s.p2 - l.p1), 0.0);\n}\n\nbool intersectSP(const Segment &s, const Point &p){\n\treturn ccw(s.p1, s.p2, p) == ON_SEGMENT;\n}\n\nbool intersectSS(const Segment &s1, const Segment &s2){\n\treturn ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0 &&\n\t\tccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0;\n}\n\nint intersectCP(const Circle &c, const Point &p){\n\tdouble dd = norm(c.p - p);\n\tif (LT(dd, SQ(c.r))) return IN;\n\tif (EQ(dd, SQ(c.r))) return ON;\n\treturn OUT;\n}\n\nbool intersectCL(const Circle &c, const Line &l){\n\tdouble d = distanceLP(l, c.p);\n\treturn LEQ(d, c.r);\n}\n\nint intersectCS(const Circle &c, const Segment &s){\n\tdouble dd1 = norm(c.p - s.p1);\n\tdouble dd2 = norm(c.p - s.p2);\n\tif (LT(dd1, SQ(c.r)) && LT(dd2, SQ(c.r))) return IN;\n\tif (GT(distanceCS(c, s), 0.0)) return OUT;\n\treturn ON;\n}\n\n// c1 ??? c2 ???????????????????????¨??? IN\n// c1 ??? c2 ????????£???????????¨??? ON\n// c1 ??? c2 ?????????????????¨??? OUT\nint intersectCC(const Circle &c1, const Circle &c2){\n\tif (GT(std::abs(c1.p - c2.p), c1.r + c2.r)) return OUT;\n\tif (LT(std::abs(c1.p - c2.p), c2.r)) return IN;\n\tif (LT(std::abs(c1.p - c2.p), c1.r)) return OUT;\n\treturn ON;\n}\n\ndouble distanceLP(const Line &l, const Point &p){\n\treturn std::abs(cross(l.p2 - l.p1, p - l.p1)) / std::abs(l.p2 - l.p1);\n}\n\ndouble distanceLL(const Line &l1, const Line &l2){\n\tif (intersectLL(l1, l2)) return 0.0;\n\treturn distanceLP(l1, l2.p1);\n}\n\ndouble distanceLS(const Line &l, const Segment &s){\n\tif (intersectLS(l, s)) return 0.0;\n\treturn std::min(distanceLP(l, s.p1), distanceLP(l, s.p2));\n}\n\ndouble distanceSP(const Segment &s, const Point &p){\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return std::abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return std::abs(p - s.p2);\n\treturn distanceLP(s, p);\n}\n\ndouble distanceSS(const Segment &s1, const Segment &s2){\n\tif (intersectSS(s1, s2)) return 0.0;\n\treturn std::min(\n\t\tstd::min(\n\t\t\tdistanceSP(s1, s2.p1),\n\t\t\tdistanceSP(s1, s2.p2)\n\t\t),\n\t\tstd::min(\n\t\t\tdistanceSP(s2, s1.p1),\n\t\t\tdistanceSP(s2, s1.p2)\n\t\t)\n\t);\n}\n\ndouble distanceCP(const Circle &c, const Point &p){\n\treturn std::abs(std::abs(c.p - p) - c.r);\n} \n\ndouble distanceCL(const Circle &c, const Line &l){\n\tif (intersectCL(c, l)) return 0.0;\n\treturn distanceLP(l, c.p) - c.r;\n}\n\ndouble distanceCS(const Circle &c, const Segment &s){\n\tif (intersectCS(c, s)) return 0.0;\n\treturn std::min(distanceCP(c, s.p1), distanceCP(c, s.p2));\n}\n\ndouble distanceCC(const Circle &c1, const Circle &c2){\n\tif (intersectCC(c1, c2) == ON) return 0.0;\n\tif (intersectCC(c1, c2) == IN){\n\t\treturn c2.r - (std::abs(c1.p - c2.p) + c1.r);\n\t}\n\tif (intersectCC(c2, c1) == IN){\n\t\treturn c1.r - (std::abs(c1.p - c2.p) + c2.r);\n\t}\n\treturn (c1.r + c2.r) - (c1.r + c2.r);\n}\n\n\n#include <cstdio>\nusing namespace std;\n\nint main()\n{\n\tLine l;\n\tint q;\n\tcin >> l >> q;\n\twhile (q--){\n\t\tPoint p;\n\t\tcin >> p;\n\t\tPoint proj = project(l, p);\n\t\tprintf(\"%.20f %.20f\\n\", proj.real(), proj.imag());\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef ___Class_Point\n#define ___Class_Point\n\n#include <cmath>\n\nclass Point\n{\nprivate:\n\n\tdouble x_;\n\tdouble y_;\n\npublic:\n\n\tPoint() : x_(0), y_(0) { }\n\n\texplicit Point(double x, double y) : x_(x), y_(y) { }\n\n\texplicit Point(double x1, double y1, double x2, double y2) : x_(x2 - x1), y_(y2 - y1) { }\n\n\tdouble x() const { return x_; }\n\tdouble y() const { return y_; }\n\n\tPoint& operator+= (const Point& p) { x_ += p.x_; y_ += p.y_; return *this; }\n\tPoint& operator-= (const Point& p) { x_ -= p.x_; y_ -= p.y_; return *this; }\n\n\tPoint& operator*= (double s) { x_ *= s; y_ *= s; return *this; }\n\tPoint& operator/= (double s) { x_ /= s; y_ /= s; return *this; }\n\n\tfriend bool operator== (const Point& p1, const Point& p2) { return p1.x_ == p2.x_ && p1.y_ == p2.y_; }\n\tfriend bool operator!= (const Point& p1, const Point& p2) { return !(p1 == p2); }\n\t\n\tfriend Point operator+ (const Point& p1, const Point& p2) { return Point(p1.x_ + p2.x_, p1.y_ + p2.y_); }\n\tfriend Point operator- (const Point& p1, const Point& p2) { return Point(p1.x_ - p2.x_, p1.y_ + p2.y_); }\n\n\tfriend Point operator* (const Point& p, double s) { return Point(p.x_ * s, p.y_ * s); }\n\tfriend Point operator/ (const Point& p, double s) { return Point(p.x_ / s, p.y_ / s); }\n\n\tfriend Point operator* (double s, const Point& p) { return Point(p.x_ * s, p.y_ * s); }\n};\n\n#endif\n\n#ifndef ___Class_Vector\n#define ___Class_Vector\n\ntypedef Point Vector;\n\ndouble norm(Vector p1)\n{\n\treturn p1.x() * p1.x() + p1.y() * p1.y();\n}\n\ndouble abs(Vector p1)\n{\n\treturn sqrt(norm(p1));\n}\n\ndouble cross(Vector p1, Vector p2)\n{\n\treturn p1.x() * p2.y() - p1.y() * p2.x();\n}\n\ndouble dot(Vector p1, Vector p2)\n{\n\treturn p1.x() * p2.x() + p1.y() * p2.y();\n}\n\n#endif\n\n#ifndef ___Computational_Geometry\n#define ___Computational_Geometry\n\nbool palarell(Vector p1, Vector p2)\n{\n\treturn cross(p1, p2) == 0;\n}\n\nbool palarell(Point p1_s, Point p1_e, Point p2_s, Point p2_e)\n{\n\treturn palarell(p1_e - p1_s, p2_e - p2_s);\n}\n\nbool orthogonal(Vector p1, Vector p2)\n{\n\treturn dot(p1, p2) == 0;\n}\n\nbool orthogonal(Point p1_s, Point p1_e, Point p2_s, Point p2_e)\n{\n\treturn orthogonal(p1_e - p1_s, p2_e - p2_s);\n}\n\ndouble dist_sqr(Point p1, Point p2)\n{\n\treturn pow(p2.x() - p1.x(), 2) + pow(p2.y() - p1.y(), 2);\n}\n\ndouble distance(Point p1, Point p2)\n{\n\treturn sqrt(dist_sqr(p1, p2));\n}\n\nVector projection(Vector hypo, Vector base)\n{\n\treturn base * (dot(hypo, base) / norm(base));\n}\n\nVector reflection(Vector hypo, Vector base)\n{\n\treturn base + (projection(hypo, base) - hypo) * 2.0;\n}\n\n#endif\n\n#include <cstdio>\n\n#pragma warning(disable: 4996)\n\nint main()\n{\n\tint x1, y1, x2, y2, x3, y3, q;\n\n\tscanf(\"%d\", &x1);\n\tscanf(\"%d\", &y1);\n\tscanf(\"%d\", &x2);\n\tscanf(\"%d\", &y2);\n\n\tVector p(x1, y1, x2, y2);\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%d\", &x3);\n\t\tscanf(\"%d\", &y3);\n\n\t\tVector a(x1, y1, x3, y3);\n\n\t\tVector c = projection(a, p);\n\n\t\tprintf(\"%.15f %.15f\\n\", x1 + c.x(), y1 + c.y());\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//\n// Intersection Predicates\n//\n// すべて「境界を含む」仕様．\n//\n#include <iostream>\n#include <iomanip>\n#include <ctime>\n#include <vector>\n#include <cstdio>\n#include <cstdlib>\n#include <cassert>\n#include <map>\n#include <cmath>\n#include <cstring>\n#include <complex>\n#include <functional>\n#include <algorithm>\n#include <unordered_map>\n#include <unordered_set>\n\nusing namespace std;\n\n#define fst first\n#define snd second\n#define all(c) ((c).begin()), ((c).end())\n\ntypedef complex<double> point;\nnamespace std {\nbool operator < (point p, point q) {\n  if (real(p) != real(q)) return real(p) < real(q);\n  return imag(p) < imag(q);\n}\n};\nistream &operator>>(istream &is, point &p) {\n  double x, y;\n  is >> x >> y;\n  p = point(x, y);\n  return is;\n}\n\ndouble dot(point p, point q)   { return real(conj(p) * q); }\ndouble cross(point p, point q) { return imag(conj(p) * q); }\ndouble EPS = 1e-8;\nint sign(double x) {\n  if (x < -EPS) return -1;\n  if (x > +EPS) return +1;\n  return 0;\n}\nstruct line    { point p, q; line(point a, point b) : p(a), q(b) {} };\nstruct segment { point p, q; segment(point a, point b) : p(a), q(b) {} };\nstruct circle  { point p; double r; };\nvector<point> intersect(point p, point q) {\n  if (sign(norm(p - q)) == 0) return {p};\n  return {};\n}\nvector<point> intersect(line L, point p) {\n  double a = cross(L.p - p, L.q - p);\n  if (sign(a) != 0) return {}; // disjoint\n  return {p};\n}\nvector<point> intersect(point p, line L) {\n  return intersect(L, p);\n}\nvector<point> intersect(segment S, point p) {\n  double a = cross(S.p - p, S.q - p);\n  double b =   dot(S.p - p, S.q - p);\n  if (sign(a) != 0) return {}; // disjoint\n  if (sign(b) >  0) return {}; // on-line but not between \n  return {p};\n}\nvector<point> intersect(point p, segment S) { \n  return intersect(S, p);\n}\nvector<point> intersect(line L, line M) {\n  double a = cross(M.q - M.p, L.q - L.p);\n  double b = cross(L.p - M.p, L.q - L.p); \n  if (sign(a) != 0) return {M.p + (M.q - M.p)*b/a}; // properly crossing\n  if (sign(b) == 0) return {M.p, M.q};              // same line\n  return {};                                        // disjoint parallel\n}\nvector<point> intersect(line L, segment S) {\n  double a = cross(S.q - S.p, L.q - L.p);\n  double b = cross(L.p - S.p, L.q - L.p); \n  if (a < 0) { a *= -1; b *= -1; }\n  if (sign(b) < 0 || sign(a-b) < 0) return {};      // no intersect\n  if (sign(a) != 0) return {S.p + (S.q - S.p)*b/a}; // properly crossing\n  if (sign(b) == 0) return {S.p, S.q};              // same line\n  return {};                                        // disjoint parallel\n}\nvector<point> intersect(segment S, line L) {\n  return intersect(S, L);\n}\nvector<point> intersect(segment S, segment T) {\n  double a = cross(S.q - S.p, T.q - T.p);\n  double b = cross(T.p - S.p, T.q - T.p); \n  double c = cross(S.q - S.p, S.p - T.p);\n  if (a < 0) { a *= -1; b *= -1; c *= -1; }\n  if (sign(b) < 0 || sign(a-b) < 0 ||\n      sign(c) < 0 || sign(a-c) < 0) return {};      // disjoint\n  if (sign(a) != 0) return {S.p + (S.q - S.p)*b/a}; // properly crossing\n  if (sign(a) == 0) {                               // same line\n    vector<point> ps;\n    if (sign(dot(S.p - T.p, S.q - T.p)) <= 0) ps.push_back(T.p);\n    if (sign(dot(S.p - T.q, S.q - T.q)) <= 0) ps.push_back(T.q);\n    if (sign(dot(T.p - S.p, T.q - S.p)) <= 0) ps.push_back(S.p);\n    if (sign(dot(T.p - S.q, T.q - S.q)) <= 0) ps.push_back(S.q);\n    sort(all(ps));\n    ps.erase(unique(all(ps)), ps.end());\n    return ps;\n  }\n  return {};\n}\npoint projection(line L, point p) {\n  double a = norm(L.p - L.q);\n  double b = dot(L.p - p, L.p - L.q);\n  return L.p + (L.q - L.p)*b/a;\n}\npoint projection(segment S, point p) {\n  double a = norm(S.p - S.q);\n  double b = dot(S.p - p, S.p - S.q);\n  if (sign(b) < 0)   return S.p;\n  if (sign(a-b) < 0) return S.q;\n  return S.p + (S.q - S.p)*b/a;\n}\npoint reflection(line L, point p) {\n  return 2.0 * projection(L, p) - p;\n}\nvector<point> intersect(circle C, circle D) {\n  double d = abs(C.p - D.p);\n  if (sign(d) == 0)            return {};      // same origin\n  if (sign(d - C.r + D.r) > 0) return {};      // too far\n  if (sign(d - abs(C.r - D.r)) < 0) return {}; // too close\n  double a = (C.r*C.r - D.r*D.r + d*d)/(2*d);\n  double h = sqrt(C.r*C.r - a*a);\n  point v = (C.p - D.p) / d;\n  if (sign(h) == 0) return {C.p + v*a};        // touch\n  return {C.p + v*a + point(0,1)*v*h,          // properly intersect\n          C.p + v*a - point(0,1)*v*h};\n}\nvector<point> intersect(line L, circle C) {\n  point  u = L.q - L.p, v = L.p - C.p;\n  double a = norm(u), b = dot(u,v), c = norm(v) - C.r*C.r;\n  double det = b*b - a*c;\n  if (sign(det) <  0) return {};              // no solution\n  if (sign(det) == 0) return {L.p - b/a * u}; // touch inner/outer\n  return {L.p - (b + sqrt(det))/a*u,          // properly intersect\n          L.p - c/(b + sqrt(det))*u};\n}\nvector<point> intersect(circle C, line L) {\n  return intersect(L, C);\n}\nbool incircle(circle C, point p) {\n  return norm(C.p - p) <= C.r * C.r;\n}\nvector<line> tangent(circle C, circle D) {\n  double d = abs(D.p - C.p);\n  if (sign(d) == 0) return {}; // same origin\n  point v = (D.p - C.p) / d;\n  vector<line> ls;\n  for (int s = -1; s <= 1; s += 2) {\n    double c = abs(C.r - s*D.r) / d;\n    if (sign(1 - c*c) == 0) {        // touch inner/outer\n      point n = point(1,1);\n      ls.push_back(line(C.p+C.r*v*n, C.p+C.r*v*conj(n)));\n    } else if (sign(1 - c*c) > 0) {  // properly intersect\n      point n = point(c, sqrt(1-c*c));\n      ls.push_back(line(C.p-s*C.r*v*n,       D.p-D.r*v*n));\n      ls.push_back(line(C.p-s*C.r*v*conj(n), D.p-D.r*v*conj(n)));\n    }\n  }\n  return ls;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\nvoid CGL_1() {\n  line L(point(0), point(0));\n  cin >> L.p >> L.q;\n  int q; cin >> q;\n  while (q--) {\n    point p; cin >> p;\n    point q = projection(L, p);\n    cout << fixed << setprecision(12) << q.real() << \" \" << q.imag() << endl;\n  }\n}\nint main() { CGL_1(); }\n\n\n// {{{ ---- verification ----\nvoid verify_intersectPP() {\n  vector<point> ps = { point(0,0), point(0,1), point(1,0), point(1,1) };\n  for (int i = 0; i < 4; ++i) \n    for (int j = i+1; j < 4; ++j) \n      assert(intersect(ps[i], ps[j]).size() == 0);\n  assert(intersect(ps[0], point(0,0)).size() == 1);\n  assert(intersect(ps[1], point(0,1)).size() == 1);\n  assert(intersect(ps[2], point(1,0)).size() == 1);\n  assert(intersect(ps[3], point(1,1)).size() == 1);\n}\n\nvoid verify_intersectLP() {\n  {\n    line L = {point(0,0), point(10,5)};\n    assert(intersect(L, point(2,2)).size() == 0);\n    assert(intersect(L, point(2,1)).size() == 1);\n    assert(intersect(L, point(4,2)).size() == 1);\n    assert(intersect(L, point(4,1)).size() == 0);\n    assert(intersect(L, point(0,0)).size() == 1);\n    assert(intersect(L, point(10,5)).size() == 1);\n    assert(intersect(L, point(-2,-1)).size() == 1);\n    assert(intersect(L, point(12,6)).size() == 1);\n  }\n}\nvoid verify_intersectSP() {\n  {\n    segment S = {point(0,0), point(10,5)};\n    assert(intersect(S, point(2,2)).size() == 0);\n    assert(intersect(S, point(2,1)).size() == 1);\n    assert(intersect(S, point(4,2)).size() == 1);\n    assert(intersect(S, point(4,1)).size() == 0);\n    assert(intersect(S, point(0,0)).size() == 1);\n    assert(intersect(S, point(10,5)).size() == 1);\n    assert(intersect(S, point(-2,-1)).size() == 0);\n    assert(intersect(S, point(12,6)).size() == 0);\n  }\n}\n\nvoid verify_intersectLL() {\n  { // trivial intersection of two lines\n    line L = {point(-10, 0), point(10, 0)};\n    line M = {point(0, -10), point(0, 10)};\n    auto ps = intersect(L, M);\n    assert(ps.size() == 1);\n    assert(sign(norm(ps[0] - point(0,0)) == 0));\n  }\n  { // trivial intersection of two lines\n    line L = {point(-10, 0), point(10, 0)};\n    line M = {point(-10, 0), point(-10, 10)};\n    auto ps = intersect(L, M);\n    assert(ps.size() == 1);\n    assert(sign(norm(ps[0] - point(-10,0)) == 0));\n  }\n  { // two same lines\n    line L = {point(-10, 0), point(10, 0)};\n    line M = {point(20, 0), point(10, 0)};\n    auto ps = intersect(L, M);\n    assert(ps.size() == 2);\n  }\n  { // two disjoint parallel lines\n    line L = {point(-10, 0), point(10, 0)};\n    line M = {point( 20, 1), point(10, 1)};\n    auto ps = intersect(L, M);\n    assert(ps.size() == 0);\n  }\n}\nvoid verify_intersectLS() {\n  {\n    line    L = {point(-10,0), point(10,0)};\n    segment S = {point(0,-10), point(0,10)};\n    assert(intersect(L, S).size() == 1);\n  }\n  {\n    line    L = {point(-10,0), point(10,0)};\n    segment S = {point(0,0), point(0,10)};\n    assert(intersect(L, S).size() == 1);\n  }\n  {\n    line    L = {point(-10,0), point(10,0)};\n    segment S = {point(0,0), point(0,-10)};\n    assert(intersect(L, S).size() == 1);\n  }\n  {\n    line    L = {point(-10,0), point(10,0)};\n    segment S = {point(0,1), point(0,-10)};\n    assert(intersect(L, S).size() == 1);\n  }\n  {\n    line    L = {point(-10,0), point(10,0)};\n    segment S = {point(0,1), point(0,10)};\n    assert(intersect(L, S).size() == 0);\n  }\n  {\n    line    L = {point(-10,0), point(10,0)};\n    segment S = {point(0,0), point(6,8)};\n    assert(intersect(L, S).size() == 1);\n    assert(intersect(intersect(L, S)[0], point(0,0)).size() == 1);\n  }\n  {\n    line    L = {point(-10,0), point(10,0)};\n    segment S = {point(1,1), point(9,8)};\n    assert(intersect(L, S).size() == 0);\n  }\n  {\n    line    L = {point(-10,0), point(10,0)};\n    segment S = {point(-1,-1), point(12,12)};\n    assert(intersect(L, S).size() == 1);\n    assert(intersect(intersect(L, S)[0], point(0,0)).size() == 1);\n  }\n  {\n    line    L = {point(-10,0), point(10,0)};\n    segment S = {point(-20,0), point(-10,0)};\n    assert(intersect(L, S).size() == 2);\n  }\n  {\n    line    L = {point(-10,0), point(10,0)};\n    segment S = {point(-20,0), point(-9,0)};\n    assert(intersect(L, S).size() == 2);\n  }\n  {\n    line    L = {point(-10,0), point(10,0)};\n    segment S = {point( 20,0), point( 10,0)};\n    assert(intersect(L, S).size() == 2);\n  }\n  {\n    line    L = {point(-10,0), point(10,0)};\n    segment S = {point( 20,0), point( 9,0)};\n    assert(intersect(L, S).size() == 2);\n  }\n  {\n    line    L = {point(-10,0), point(10,0)};\n    segment S = {point( 5,0), point(-5,0)};\n    assert(intersect(L, S).size() == 2);\n  }\n  {\n    line    L = {point(-10,0), point(10,0)};\n    segment S = {point(-50,0), point(50,0)};\n    assert(intersect(L, S).size() == 2);\n  }\n}\nvoid verify_intersectSS() {\n  {\n    segment T = {point(10,0), point(0,0)};\n    segment S = {point(0,0), point(0,10)};\n    assert(intersect(T, S).size() == 1);\n  }\n  {\n    segment T = {point(-10,0), point(10,0)};\n    segment S = {point(0,-10), point(0,10)};\n    assert(intersect(T, S).size() == 1);\n  }\n  {\n    segment T = {point(-10,0), point(10,0)};\n    segment S = {point(0,0), point(0,10)};\n    assert(intersect(T, S).size() == 1);\n  }\n  {\n    segment T = {point(-10,0), point(10,0)};\n    segment S = {point(0,0), point(0,-10)};\n    assert(intersect(T, S).size() == 1);\n  }\n  {\n    segment T = {point(-10,0), point(10,0)};\n    segment S = {point(0,1), point(0,-10)};\n    assert(intersect(T, S).size() == 1);\n  }\n  {\n    segment T = {point(-10,0), point(10,0)};\n    segment S = {point(0,1), point(0,10)};\n    assert(intersect(T, S).size() == 0);\n  }\n  {\n    segment T = {point(-10,0), point(10,0)};\n    segment S = {point(0,0), point(6,8)};\n    assert(intersect(T, S).size() == 1);\n    assert(intersect(intersect(T, S)[0], point(0,0)).size() == 1);\n  }\n  {\n    segment T = {point(-10,0), point(10,0)};\n    segment S = {point(1,1), point(9,8)};\n    assert(intersect(T, S).size() == 0);\n  }\n  {\n    segment T = {point(-10,0), point(10,0)};\n    segment S = {point(-1,-1), point(12,12)};\n    assert(intersect(T, S).size() == 1);\n    assert(intersect(intersect(T, S)[0], point(0,0)).size() == 1);\n  }\n  {\n    segment T = {point(-10,0), point(10,0)};\n    segment S = {point(-20,0), point(-10,0)};\n    assert(intersect(T, S).size() == 1);\n    assert(intersect(intersect(T, S)[0], point(-10,0)).size() == 1);\n  }\n  {\n    segment T = {point(-10,0), point(10,0)};\n    segment S = {point(-20,0), point(-9,0)};\n    assert(intersect(T, S).size() == 2);\n  }\n  {\n    segment T = {point(-10,0), point(10,0)};\n    segment S = {point( 20,0), point( 10,0)};\n    assert(intersect(T, S).size() == 1);\n    assert(intersect(intersect(T, S)[0], point( 10,0)).size() == 1);\n  }\n  {\n    segment T = {point(-10,0), point(10,0)};\n    segment S = {point( 20,0), point( 9,0)};\n    assert(intersect(T, S).size() == 2);\n  }\n  {\n    segment T = {point(-10,0), point(10,0)};\n    segment S = {point( 5,0), point(-5,0)};\n    assert(intersect(T, S).size() == 2);\n  }\n  {\n    segment T = {point(-10,0), point(10,0)};\n    segment S = {point(-50,0), point(50,0)};\n    assert(intersect(T, S).size() == 2);\n  }\n}\nvoid verify_tangentCC() {\n  srand(time(0));\n  point r(1.0 - 2.0*rand()/(1.0+RAND_MAX),\n          1.0 - 2.0*rand()/(1.0+RAND_MAX));\n  r = r / abs(r);\n  {\n    circle C({r*point(0,0), 3.0});\n    circle D({r*point(1,0), 1.0});\n    auto v = tangent(C, D);\n    assert(v.size() == 0);\n    for (auto l: v) {\n      assert(intersect(C, l).size() == 1);\n      assert(intersect(D, l).size() == 1);\n    }\n  }\n  {\n    circle C({r*point(0,0), 2.0});\n    circle D({r*point(1,0), 1.0});\n    auto v = tangent(C, D);\n    assert(v.size() == 1);\n    for (auto l: v) {\n      assert(intersect(C, l).size() == 1);\n      assert(intersect(D, l).size() == 1);\n    }\n  }\n  {\n    circle C({r*point(0,0), 2.0});\n    circle D({r*point(1,0), 2.0});\n    auto v = tangent(C, D);\n    assert(v.size() == 2);\n    for (auto l: v) {\n      assert(intersect(C, l).size() == 1);\n      assert(intersect(D, l).size() == 1);\n    }\n  }\n  {\n    circle C({r*point(0,0), 2.0});\n    circle D({r*point(4,0), 2.0});\n    auto v = tangent(C, D);\n    assert(v.size() == 3);\n    for (auto l: v) {\n      assert(intersect(C, l).size() == 1);\n      assert(intersect(D, l).size() == 1);\n    }\n  }\n  {\n    circle C({r*point(0,0), 2.0});\n    circle D({r*point(5,0), 2.0});\n    auto v = tangent(C, D);\n    assert(v.size() == 4);\n    for (auto l: v) {\n      assert(intersect(C, l).size() == 1);\n      assert(intersect(D, l).size() == 1);\n    }\n  }\n}\n// }}}\n//\n  /*\nint main() {\n  verify_intersectPP();\n  verify_intersectLP();\n  verify_intersectSP();\n  verify_intersectLL();\n  verify_intersectLS();\n  verify_intersectSS();\n  verify_tangentCC();\n  cout << \"ALL TEST PASSED!\" << endl;\n}\n  */\n// vim: foldmethod=marker"
  },
  {
    "language": "C++",
    "code": "//#include <bits/stdc++.h>\n#include <algorithm>\n#include <iostream>\n#include <math.h>\n#include <string.h>\n#include <stdio.h>\nusing namespace std;\nconst int MAXN = 100009;\nstruct node\n{\n    double x, y;\n};\nstruct Point\n{\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n} P[MAXN];\n\ntypedef Point Vector;\nVector operator +(Vector A, Vector B)\n{\n    return Vector(A.x + B.x, A.y + B.y);\n}\nVector operator -(Vector A, Vector B)\n{\n    return Vector(A.x - B.x, A.y - B.y);\n}\nVector operator *(Vector A, double p)\n{\n    return Vector(A.x * p, A.y * p);\n}\nVector operator /(Vector A, double p)\n{\n    return Vector(A.x / p, A.y / p);\n}\nVector operator -(Vector A)\n{\n    return  Vector(-A.x, -A.y);\n}\n\nconst double EPS = 1e-10;\nint dcmp(double x)\n{\n    if(fabs(x) < EPS) return 0;\n    else return x < 0 ? -1 : 1;\n}\n\nbool operator == (const Point &a, const Point &b)\n{\n    return dcmp(a.x - b.x) == 0 && dcmp(a.y - b.y);\n}\n\n//向量点积\ndouble Dot(Vector A, Vector B)\n{\n    return A.x * B.x + A.y * B.y;\n}\n\n//向量长度\ndouble Length(Vector A)\n{\n    return sqrt(Dot(A, A));\n}\n\n//向量叉积\ndouble Cross(Vector A, Vector B)\n{\n    return A.x * B.y - A.y * B.x;\n}\n\n//判断点是否在点段上，不包含端点\nbool OnSegment(Point P, Point a1, Point a2)\n{\n    return dcmp(Cross(a1 - P, a2 - P) == 0 && dcmp((Dot(a1 - P, a2 - P)) < 0));\n}\n\n//点到直线距离\ndouble DistanceToLine(Point P, Point A, Point B) \n{\n    Vector v1 = B - A, v2 = P - A;\n    return fabs(Cross(v1, v2) / Length(v1)); //不取绝对值，得到的是有向距离\n}\n\n//点在多边形内的判定\nint isPointInPolygon(Point p, Point *poly, int n)\n{\n    int wn = 0;\n    for(int i = 0; i < n; i++)\n    {\n        if(OnSegment(p, poly[i], poly[(i + 1) % n])) return -1; //在边界上\n        int k = dcmp(Cross(poly[(i + 1) % n] - poly[i], p - poly[i]));\n        int d1 = dcmp(poly[i].y - p.y);\n        int d2 = dcmp(poly[(i + 1) % n].y - p.y);\n        if(k > 0 && d1 <= 0 && d2 > 0) wn++;\n        if(k < 0 && d2 <= 0 && d1 > 0) wn++;\n    }\n    if(wn != 0) return 1;       //内部\n    return 0;                   //外部\n}\n\n//判断是否为凸多边形\nbool isConvex(Point *poly, int n)\n{\n    bool s[3];\n    memset(s, false, sizeof s);\n    for(int i = 0; i < n; i++)\n    {\n        s[dcmp( Cross((poly[(i + 1) % n] - poly[i]), (poly[(i + 2) % n] - poly[i])) ) + 1] = true;\n        if(s[0] && s[2])  \n            return false;\n    }\n    return true;\n}\n\nbool LengthLong(int n, Point pa, double r)//点到线距离的最小值\n{\n    double ans = DistanceToLine(pa, P[0], P[1]);\n    for(int i = 1; i < n - 1; i++)\n    {\n        ans = min(ans, DistanceToLine(pa, P[i], P[i + 1]));\n    }\n    if(dcmp(r-ans)<=0)\n            return 1;\n    return 0;\n}\n\n//点在直线上的投影\nPoint GetLineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A+v*(Dot(v, P-A)/Dot(v, v));\n}\n\nint main()\n{\n    Point p1,p2;\n    cin>>p1.x>>p1.y>>p2.x>>p2.y;\n    int k;\n    cin>>k;\n    while(k--)\n    {\n        Point p;\n        cin>>p.x>>p.y;\n        Point P=GetLineProjection(p,p1,p2);\n        printf(\"%.10f %.10f\\n\",P.x,P.y);\n    }\n    return 0;   \n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\n\nint sign(double x) {  //???????????°???????°???????????¢?\n    return abs(x) < EPS ? 0 : x < 0 ? -1 : 1;\n}\n\nstruct Point { //????????????\n    double x, y;\n    Point(double x=0.0, double y=0.0) : x(x), y(y) {}\n    Point operator + (const Point &rhs) const {  //????????????\n        return Point(x + rhs.x, y + rhs.y);\n    }\n    Point operator - (const Point &rhs) const {  //????????????\n        return Point(x - rhs.x, y - rhs.y);\n    }\n    Point operator * (double p) const {  //???????????\\??????\n        return Point(x * p, y * p);\n    }\n    Point operator / (double p) const {  //???????????\\??????\n        return Point(x / p, y / p);\n    }\n    bool operator < (const Point &rhs) const {  //??????????????????\n        return x < rhs.x || (x == rhs.x && y < rhs.y);\n    }\n    bool operator == (const Point &rhs) const {  //??????????????????\n        return sign(x - rhs.x) == 0 && sign(y - rhs.y) == 0;\n    }\n    void read() {\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print() {\n        printf(\"(%.2f, %.2f)\\n\", x, y);\n    }\n};\ntypedef Point Vector;  //???????????????\n\ndouble dot(Vector A, Vector B) {  //??????????§???????????????????????§??????????????§??????????????????????????????????????§????\n    return A.x * B.x + A.y * B.y;\n}\ndouble cross(Vector A, Vector B) {  //??????????§??????????????????????????§???¢???????????¢?§????????????????????????????????????????\n    return A.x * B.y - A.y * B.x;\n}\ndouble polar_angle(Vector A) {  //??????????§?\n    return atan2(A.y, A.x);\n}\ndouble length(Vector A) {  //???????????????????§?\n    return sqrt(dot(A, A));\n}\ndouble angle(Vector A, Vector B) {  //????????¬?§?????????¶??????????§?\n    return acos(dot(A, B)/length(A)/length(B));\n}\nVector rotate(Vector A, double rad) {  //???????????¬????????¶???\n    return Vector(A.x*cos(rad)-A.y*sin(rad), A.x*sin(rad)+A.y*cos(rad));\n    //????????´?????¬????????¶????????????????????¢??¬??????x'=xcos(theta)+ysin(theta), y'=ycos(theta)-xsin(theta)\n}\nVector normal(Vector A) {  //?????????????????????????????????A????????¶??????\n    double len = length(A);\n    return Vector(-A.y/len, A.x/len);\n}\n\nPoint point_line_proj(Point p, Point a, Point b) {  //?????¨??´??????????????±????????????\n    Vector V = b - a;\n    return a + V * (dot (V, p-a)/dot(V, V));  //???p??°??´???ab????????±\n}\n\n\nint main() {\n    Point p1, p2;\n    p1.read();\n    p2.read();\n    int q; scanf(\"%d\", &q);\n    while(q --) {\n        Point x; \n        x.read();\n        Point ans = point_line_proj(x, p1, p2);\n        printf(\"%.9f %.9f\\n\", ans.x, ans.y);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p){ return Point(x + p.x, y + p.y); }\n    Point operator - (Point p){ return Point(x - p.x, y - p.y); }\n    Point operator * (Point p){ return Point(x * p.x, y * p.y); }\n    Point operator / (Point p){ return Point(x / p.x, y / p.y); }\n\n    Point operator * (double k){ return Point(x*k, y*k);}\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n};\n\nPoint projection(Segment s, Point p) {\n    Vector a = s.p2 - s.p1;\n    Vector b = p - s.p1;\n    double k = dot(a, b)/a.norm();\n    a.x = k*a.x, a.y = k*a.y;\n    return s.p1 + a;\n};\n\nint main() {\n    Segment s;\n    int q;\n    Point p, P;\n    double x0, y0, x1, y1;\n\n    scanf(\"%lf %lf %lf %lf\", &x0, &y0, &x1, &y1);\n    scanf(\"%d\", &q);\n    s.p1.x = x0; s.p1.y = y0; s.p2.x = x1; s.p2.y = y1;\n\n    for (int i=0; i<q; i++) {\n        scanf(\"%lf %lf\", &p.x, &p.y);\n        P = projection(s, p);\n        printf(\"%.8lf %.8lf\\n\", P.x, P.y);\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n;\ndouble getCos(Vector a, Vector b){\n    return dot(a, b) / (a.abs() * b.abs());\n}\n\ndouble dist(Point p1, Point p2){\n    return sqrt(pow((p1.x - p2.x), 2) + pow((p1.y - p2.y), 2));\n}\n\nPoint projection(Point p1, Point p2, Point p0){\n    if(p1 == p0){\n        return p0;\n    }\n    if(p2 == p0){\n        return p0;\n    }\n    return p1 + (p2 - p1) / (p2 - p1).abs() * (p0 - p1).abs() * getCos(p2 - p1, p0 - p1);\n}\n\nint main(){\n    int xp1, yp1, xp2, yp2;\n    scanf(\"%d\", &xp1);\n    scanf(\"%d\", &yp1);\n    scanf(\"%d\", &xp2);\n    scanf(\"%d\", &yp2);\n\n    Point p1 = Point(xp1, yp1);\n    Point p2 = Point(xp2, yp2);\n\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n\n        Point p = projection(p1, p2, Point(xp0, yp0));\n        printf(\"%.10f %.10f\\n\", p.x, p.y);\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<set>\n#include<queue>\n#include<cstdlib>\n#include<algorithm>\n\nusing namespace std;\n#define pb push_back\n#define mp make_pair\n#define SZ(x) (int)(x).size()\n\ntypedef long long LL;\ntypedef pair<int, int> pii;\ntypedef pair<double, double> pdd;\ntypedef pair<LL, LL> pll;\n\nconst double eps = 1e-10;\nconst double PI = acos(-1.0);\n//const double PI = 3.14159265358979323846264338327950288419716939937510\nint dcmp(const double &x) { if (fabs(x) < eps) return 0; return x < 0 ? -1 : 1; }\nconst int MOD = 1e9 + 7;\nconst int INF = 2e9;\nconst double INF_d = 1e64;\n\ntemplate<class T> \nT qmod(T a, T b){ T ret = 1; while (b){ if (b & 1) ret *= a; b >>= 1; a *= a; } return ret; }\ntemplate<class T>\nT gcd(T a, T b){ return !b ? a : gcd(b, a % b); }\ntemplate<class T>\nT ex_gcd(T a, T b, T &x, T &y){\n    if (!b){ x = 1, y = 0; return a; }\n    T t, ret;\n    ret = ex_gcd(b, a % b, x, y);\n    t = x, x = y, y = t - a / b * y;\n    return ret;\n}\ntemplate<class T>\nT inv(T t, T p){ return t == 1 ? 1 : (p - p / t) * inv(p % t, p) % p; }\n// head\n\ntypedef double db;\n\nstruct point{\n    db x, y;\n    point(){}\n    point(db a, db b): x(a), y(b){}\n    point operator + (const point &p){ return point(x + p.x, y + p.y); }\n    point operator - (const point &p){ return point(x - p.x, y - p.y); }\n    point operator * (const db &k){ return point(x * k, y * k); }\n    point operator / (const db &k){ return point(x / k, y / k); }\n    db operator ^ (const point &p){ return x * p.y + y * p.x; }\n    db operator * (const point &p){ return x * p.x + y * p.y; }\n    bool operator == (const point &p){ return !dcmp(x - p.x) && !dcmp(y - p.y); }\n    bool operator != (const point &p){ return dcmp(x - p.x) || dcmp(y - p.y); }\n    bool operator < (const point &p){ return x == p.x ? y < p.y : x < p.x; }\n    void read(){\n        scanf(\"%lf%lf\", &x, &y);\n    }\n    void print(){\n        printf(\"%.10f %.10f\\n\", x, y);\n    }\n    point rotate(db &ang){ return point(x * cos(ang) - y * sin(ang), y * cos(ang) + x * sin(ang)); }\n    point norm() { return point(-y, x); }\n    db len() { return sqrt(x * x + y * y); }\n    db len2(){ return x * x + y * y; }\n};\n\npoint proj(point A, point B, point P){ // projection point of P in segment AB\n    point AB = B - A, AP = P - A;\n    return A + AB * (AP * AB / AB.len2());\n}\n\npoint a, b;\nint n;\n\nint main(){\n    a.read(), b.read();\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++){\n        point x; x.read();\n        proj(a, b, x).print();\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point p){ return Point(x * p.x, y * p.y); }\n\tPoint operator / (Point p){ return Point(x / p.x, y / p.y); }\n\n\tPoint operator * (double t){ return Point(x * t, y * t); }\n\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x * x + y * y; }\n\n\tbool operator<(const Point &p){ return (x != p.x) ? (x < p.x) : (y < p.y); }\n\tbool operator==(const Point &p)\n\t{\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment{\npublic:\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//bool isOrthogonal(Segment s1, Segment s2){\n//\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0);\n//}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nPoint projection(Segment s, Point p){\n\tVector v1 = s.p2 - s.p1;\n\tVector v2 = p - s.p1;\n\treturn p + v1 * dot(v1, v2) / v1.norm();\n}\n\nint main()\n{\n\tSegment s;\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; ++i){\n\t\tPoint p; cin >> p.x >> p.y;\n\t\tPoint res = projection(s, p);\n\t\tcout << res.x << \" \" << res.y << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <set>\n#include <map>\n#include <list>\n#include <queue>\n#include <stack>\n#include <cmath>\n#include <ctype.h>\n#include <ctime>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <bitset>\n#include <cctype>\n#include <cstdlib>\n#include <cstring>\n#include <utility>\n#include <numeric>\n#include <complex>\n#include <sstream>\n#include <fstream>\n#include <iomanip>\n#include <cassert>\n#include <iostream>\n#include <iterator>\n#include <algorithm>\n\nusing namespace std;\n#define EPS 1e-10\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n//???\nclass Point{\n\tpublic:\t\n\t\tdouble x,y;\n\t\tPoint(double x = 0,double y = 0):x(x),y(y){}\n\t\t//?????????\n\t\tPoint operator + (Point p) { return Point(x + p.x,y + p.y);}\n\t\tPoint operator - (Point p) { return Point(x - p.x,y - p.y);}\n\t\tPoint operator * (double a) { return Point(x*a,y*a);}\n\t\tPoint operator / (double a) { return Point(x/a,y/a);}\n\t\t//???????????¨??§??????\n\t\tdouble abs() {return sqrt(norm());}\n\t\tdouble norm() {return x*x+y*y;}\n\n\t\tbool operator < (const Point &p) const{\n\t\t\treturn x != p.x ? x < p.x : y < p.y;\n\t\t}\n\t\tbool operator == (const Point &p) const{\n\t\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t\t}\n};\n//??????\nstruct Segment{Point p1,p2;};\n//????????????\ntypedef Point Vector;\n//??´???\ntypedef Segment Line;\n//???\nclass Circle{\n\tpublic:\n\t\tPoint c;\n\t\tdouble r;\n\t\tCircle(Point c = Point(),double r = 0.0): c(c),r(r){}\n};\n//????§???¢\n//typedef Vector<Point> Polygon;\n//????????¨??????\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\nPoint projection(Segment a,Vector hypo,Vector base){\n\tdouble r = dot(hypo,base)/base.norm();\n\treturn  a.p1 + base*r;\n}\n\nint main(){\n\tint x0,y0,x1,y1;\n\tint n;\n\tint x2,y2;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tcin >> n;\n\tPoint s(x0,y0);\n\tPoint t(x1,y1);\n\tSegment seg;seg.p1 = s;seg.p2 = t;\n\tVector base(t.x-s.x,t.y-s.y);\n\tfor(int i = 0;i < n;i++){\n\t\tcin >> x2 >> y2;\n\t\tVector hypo(x2-x0,y2-y0);\n\t\tPoint p = projection(seg,hypo,base);\n\t\tprintf(\"%.10f %.10f\",p.x,p.y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n\nusing namespace std;\nstatic const double eps = 1e-10;\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y){}\n\n\tPoint operator + (Point p){ return(Point(x + p.x, y + p.y)); }\n\tPoint operator - (Point p){ return(Point(x - p.x, y - p.y)); }\n\tPoint operator * (double a){ return(Point(a * x, a * y)); }\n\tPoint operator / (double a){ return(Point(x / a, y / a)); }\n\n\tdouble abs(){ return(sqrt(norm())); }\n\tdouble norm(){ return(x * x + y * y); }\n\n\tbool operator < (const Point& p) const\n\t{\n\t\treturn(x != p.x ? x < p.x : y < p.y);\n\t}\n\n\tbool operator == (const Point& p) const\n\t{\n\t\treturn(fabs(x - p.x) < eps && fabs(y - p.y) < eps);\n\t}\n};\ntypedef Point Vector;\n\nstruct Segment\n{\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0): c(c), r(r){}\n};\n\ndouble dot(Vector a, Vector b)\n{\n\treturn(a.x * b.x + a.y * b.y);\n}\n\ndouble cross(Vector a, Vector b)\n{\n\treturn(a.x * b.y - a.y * b.x);\n}\n\nPoint project(Segment s, Point p)\n{\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn(s.p1 + base * r);\n}\n\nvoid solve()\n{\n\tSegment s;\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; ++i)\n\t{\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\t\tPoint res = project(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", res.x, res.y);\n\t}\n}\n\nint main()\n{\n\tsolve();\n\treturn(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <string>\n#include <sstream>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <functional>\n#include <bitset>\n#include <deque>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef long double LD;\n\n#define rep(i, a, b) for(int i = a; i <= b; ++i)\n#define dow(i, a, b) for(int i = a; i >= b; --i)\n#define mem(a) memset(a, 0, sizeof(a))\n#define mst(a, b) memset(a, b, sizeof(a))\n#define sfi(a) scanf(\"%d\", &a)\n#define sfl(a) scanf(\"%lld\", &a)\n#define sfd(a) scanf(\"%lf\", &a)\n#define sfs(a) scanf(\"%s\", a)\n#define pb(a) push_back(a)\n#define sync ios::sync_with_stdio(0); cin.tie(0);\n\nconst int MAX = 1e2 + 5;\nconst int L = 2;\nconst LL MOD = 10000;\nconst int dir[MAX][MAX] = {{0,1},{0,-1},{1,0},{-1,0},{-1,-1},{-1,1},{1,1},{1,-1}};\n\nconst double EPS = 1e-8;\nconst double PI = acos(-1.0);\n\ntypedef struct Point Point;\ntypedef struct Line Line;\n\nint cmp(double x);\ndouble sqr(double x);\ndouble det(Point a, Point b);\ndouble dot(Point a, Point b);\ndouble dist(Point a, Point b);\nPoint rotate_point(Point p, double A);\nbool parallel(Line a, Line b);\nbool orthogonal(Line a, Line b);\nPoint PointProjLine(Point p, Line l, Point &ans);\nPoint reflect(Line l, Point p);\nnstruct Point\n{\n\tdouble x, y;\n\tPoint() {}\n\tPoint(double a, double b): x(a), y(b) {}\n\n\tfriend Point operator -(Point a, Point b)\n\t{\n\t\treturn Point(a.x-b.x,a.y-b.y);\n\t}\n\tfriend Point operator +(Point a, Point b)\n\t{\n\t\treturn Point(a.x+b.x,a.y+b.y);\n\t}\n\tfriend bool operator ==(Point a, Point b)\n\t{\n\t\treturn cmp(a.x-b.x)==0 && cmp(a.y-b.y)==0;\n\t}\n\tfriend Point operator *(Point a, double b)\n\t{\n\t\treturn Point(a.x*b,a.y*b);\n\t}\n\tfriend Point operator *(double a, Point b)\n\t{\n\t\treturn Point(a*b.x,a*b.y);\n\t}\n\tfriend Point operator /(Point a, double b)\n\t{\n\t\treturn Point(a.x/b,a.y/b);\n\t}\n\tdouble norm()\n\t{\n\t\treturn sqrt(sqr(x)+sqr(y));\n\t}\n};\n\nstruct Line\n{\n\tPoint a, b;\n\tLine() {}\n\tLine(Point x, Point y): a(x), b(y) {}\n};\n\nbool parallel(Line a, Line b)\n{\n\treturn !cmp(det(a.a-a.b,b.a-b.b));\n}\n\t\nbool orthogonal(Line a, Line b)\n{\n\treturn !cmp(dot(a.a - a.b, b.a - b.b));\n}\n\nPoint PointProjLine(Point p, Line l)\n{\n\tPoint ans;\n\tdouble r = dot((l.b-l.a),(p-l.a))/dot(l.b-l.a,l.b-l.a);\n\tans = l.a + r*(l.b-l.a);\n\treturn ans;\n}\n\nint cmp(double x)\n{\n\tif(abs(x) < EPS)\n\t\treturn 0;\n\tif(x > 0)\n\t\treturn 1;\n\treturn -1;\n}\n\ndouble sqr(double x)\n{\n\treturn x * x;\n}\n\ndouble det(Point a, Point b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\n\ndouble dot(Point a, Point b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble dist(Point a, Point b)\n{\n\treturn (a-b).norm();\n}\n\nPoint rotate_point(Point p, double A)\n{\n\tdouble tx = p.x, ty = p.y;\n\treturn Point(tx*cos(A)-ty*sin(A),tx*sin(A)+ty*cos(A));\n}\n\nPoint reflect(Line l, Point p)\n{\n\treturn p + ((PointProjLine(p, l) - p) * 2.0);\n}\n\nint main()\n{\t\n#ifdef LOCAL\n\t//~ freopen(\"in.txt\", \"r\", stdin);\n#endif\n\n\tLine a;\n\tscanf(\"%lf%lf%lf%lf\", &a.a.x, &a.a.y, &a.b.x, &a.b.y);\n\tint q;\n\tsfi(q);\n\twhile(q--)\n\t{\n\t\tPoint p;\n\t\tscanf(\"%lf%lf\", &p.x, &p.y);\n\t\tPoint ans = reflect(a, p);\n\t\tprintf(\"%.8lf %.8lf\\n\", ans.x, ans.y);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n\tbool operator() (pr const& a,pr const& b) const {\n\t\treturn a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n\t}\n};\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return x == e.x? (y < e.y) : x < e.x;\n  }\n  bool operator >(const struct _PT &e) const{\n     return x == e.x? (y > e.y) : x > e.x;\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\n\nclass Plane{\nprivate:\n  static bool cmp_x(const P &p1,const P &p2){\n      if (p1.x != p2.x) return p1.x < p2.x;\n      return p1.y < p2.y;\n  }\npublic:\n  P intersection(P p1,P p2,P q1,P q2) { // 直線p1-p2と直線q1-q2の交点\n    return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n  }\n\n  bool on_seq(P p1,P p2,P q) { // 線分p1-p2上に点qがあるか\n    return (abs((p1 - q).det(p2 - q)) < eps) && ((p1 - q).dot(p2 - q) < (eps));\n  }\n\n  bool have_intersection(P p1,P p2,P q1,P q2) { // 線分p1-p2と線分q1-q2がが交点を持つか\n    if (abs((p1-p2).det(q1-q2)) > eps) {\n      P r = intersection(p1,p2,q1,q2);\n      return (on_seq(p1,p2,r) && on_seq(q1,q2,r));\n    }\n    else return (on_seq(p1,p2,q1) || on_seq(p1,p2,q2) || on_seq(q1,q2,p1) || on_seq(q1,q2,p2));\n  }\n\n  vector<P> convexHull(vector<P> &point){\n      LL n = point.size();\n      vector<P> qs(n*2);\n      sort(point.begin(),point.end(),cmp_x);\n      long k = 0;\n\n      REP(i,n){ //下側凸包の作成\n        while(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n\n      for(long i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n        while(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n      qs.resize(k-1);\n      return qs;\n  }\n\n  long double getArea(vector<P> &point){\n      long double s = 0;\n      LL n = point.size();\n      REP(i,n-1) s += point[i].det(point[i+1]);\n      s += point[n-1].det(point[0]);\n      return abs(s) * 0.5;\n  }\n\n  long double getAngle(P v1,P v2){ //2ベクトルのなす角を出す。\n    return acos(v1.dot(v2)/sqrt(v1.twiceNorm() * v2.twiceNorm()));\n  }\n};\nint main(void) {\n\tPlane pl;\n  P p1,p2,p3;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  long double n = (p2 - p1).twiceNorm();\n  int q;\n  cin >> q;\n  REP(i,q) {\n    cin >> p3.x >> p3.y;\n    P pt = (p2 - p1)*((p2-p1).dot(p3-p1)/n);\n    cout << ROUND(12) << pt.x << \" \" << ROUND(12) << pt.y << endl;\n  }\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\nconst double eps=1e-9;\ndouble ABS(double n){return n>=0?n:-n;}\nbool same(double a,double b){return ABS(a-b)<eps;}\nstruct point{\n\tdouble x;\n\tdouble y;\n\tpoint(){}\n\tpoint(double a,double b){x=a;y=b;}\n\tpoint operator +(const point &a){return point(x+a.x,y+a.y);}\n\tpoint operator -(const point &a){return point(x-a.x,y-a.y);}\n\tpoint operator *(const double &a){return point(x*a,y*a);}\n\tpoint operator /(const double &a){return point(x/a,y/a);}\n\tvoid operator =(const point &a){x=a.x;y=a.y;}\n\tvoid operator +=(const point &a){x+=a.x;y+=a.y;}\n\tvoid operator -=(const point &a){x-=a.x;y-=a.y;}\n\tvoid operator *=(const double &a){x*=a;y*=a;}\n\tvoid operator /=(const double &a){x/=a;y/=a;}\n\tbool operator <(const point &a){return x<a.x||(same(x,a.x)&&y<a.y);}\n\tbool operator ==(const point &a){return same(x,a.x)&&same(y,a.y);}\n\tdouble length(){return sqrt(x*x+y*y);}\n\tvoid in(){scanf(\"%lf%lf\",&x,&y);}\n\tvoid out(){printf(\"%.20lf %.20lf\\n\",x,y);}\n};\nstruct line{\n\tdouble A;\n\tdouble B;\n\tdouble C;\n\tline(){}\n\tline(double a,double b,double c){A=a;B=b;C=c;}\n\tline(point a,point b){\n\t\tA=a.y-b.y;\n\t\tB=b.x-a.x;\n\t\tC=A*a.x+B*a.y;\n\t}\n\tline(double a,double b,point p){\n\t\tA=a;\n\t\tB=b;\n\t\tC=A*p.x+B*p.y;\n\t}\n};\nstruct segment{\n\tpoint a;\n\tpoint b;\n\tsegment(){}\n\tsegment(point x,point y){a=x;b=y;}\n};\ndouble dist(point a,point b){return (a-b).length();}\ndouble dot(point a,point b){return a.x*b.x+a.y*b.y;}\ndouble cross(point a,point b){return a.x*b.y-b.x*a.y;}\n//angle only returns positive value\ndouble angle(point a,point b){return acos(dot(a,b)/(a.length()*b.length()));}\ndouble area(point a,point b,point c){return ABS(cross(b-a,c-a));}\ndouble distancetoline(point a,line b){return (b.A*a.x+b.B*a.y-b.C)/sqrt(b.A*b.A+b.B*b.B);}\nbool parallel(line a,line b){return same(a.A*b.B,b.A*a.B);}\npoint intersect(line a,line b){\n\tdouble x,y,det;\n\tx=(a.C*b.B-b.C*a.B);\n\ty=(a.A*b.C-b.A*a.C);\n\tdet=(a.A*b.B-b.A*a.B);\n\treturn point(x,y)/det;\n}\n/*\nbool intersect(segment a,segment b){}\npoint intersect(segment a,segment b){}\n*/\npoint projection(point a,point b){return b*(dot(a,b)/(b.length()*b.length()));}\npoint projection(point a,line b){return intersect(line(b.B,-b.A,a),b);}\nint main(){\n\tpoint from,to,p;\n\tline l;\n\tint q;\n\tfrom.in();\n\tto.in();\n\tl=line(from,to);\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t\tp.in();\n\t\tprojection(p,l).out();\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <string>\n#include <sstream>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <functional>\n#include <bitset>\n#include <deque>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef long double LD;\n\n#define rep(i, a, b) for(int i = a; i <= b; ++i)\n#define dow(i, a, b) for(int i = a; i >= b; --i)\n#define mem(a) memset(a, 0, sizeof(a))\n#define mst(a, b) memset(a, b, sizeof(a))\n#define sfi(a) scanf(\"%d\", &a)\n#define sfl(a) scanf(\"%lld\", &a)\n#define sfd(a) scanf(\"%lf\", &a)\n#define sfs(a) scanf(\"%s\", a)\n#define pb(a) push_back(a)\n#define sync ios::sync_with_stdio(0); cin.tie(0);\n\nconst int MAX = 1e2 + 5;\nconst int L = 2;\nconst LL MOD = 10000;\nconst int dir[MAX][MAX] = {{0,1},{0,-1},{1,0},{-1,0},{-1,-1},{-1,1},{1,1},{1,-1}};\n\nconst double EPS = 1e-8;\nconst double PI = acos(-1.0);\n\ntypedef struct Point Point;\ntypedef struct Line Line;\n\nint cmp(double x);\ndouble sqr(double x);\ndouble det(Point a, Point b);\ndouble dot(Point a, Point b);\ndouble dist(Point a, Point b);\nPoint rotate_point(Point p, double A);\nbool parallel(Line a, Line b);\nbool orthogonal(Line a, Line b);\nPoint PointProjLine(Point p, Line l, Point &ans);\n\nstruct Point\n{\n\tdouble x, y;\n\tPoint() {}\n\tPoint(double a, double b): x(a), y(b) {}\n\n\tfriend Point operator -(Point a, Point b)\n\t{\n\t\treturn Point(a.x-b.x,a.y-b.y);\n\t}\n\tfriend Point operator +(Point a, Point b)\n\t{\n\t\treturn Point(a.x+b.x,a.y+b.y);\n\t}\n\tfriend bool operator ==(Point a, Point b)\n\t{\n\t\treturn cmp(a.x-b.x)==0 && cmp(a.y-b.y)==0;\n\t}\n\tfriend Point operator *(Point a, double b)\n\t{\n\t\treturn Point(a.x*b,a.y*b);\n\t}\n\tfriend Point operator *(double a, Point b)\n\t{\n\t\treturn Point(a*b.x,a*b.y);\n\t}\n\tfriend Point operator /(Point a, double b)\n\t{\n\t\treturn Point(a.x/b,a.y/b);\n\t}\n\tdouble norm()\n\t{\n\t\treturn sqrt(sqr(x)+sqr(y));\n\t}\n};\n\nstruct Line\n{\n\tPoint a, b;\n\tLine() {}\n\tLine(Point x, Point y): a(x), b(y) {}\n};\n\nbool parallel(Line a, Line b)\n{\n\treturn !cmp(det(a.a-a.b,b.a-b.b));\n}\n\t\nbool orthogonal(Line a, Line b)\n{\n\treturn !cmp(dot(a.a - a.b, b.a - b.b));\n}\n\nPoint PointProjLine(Point p, Line l)\n{\n\tPoint ans;\n\tdouble r = dot((l.b-l.a),(p-l.a))/dot(l.b-l.a,l.b-l.a);\n\tans = l.a + r*(l.b-l.a);\n\treturn ans;\n}\n\nint cmp(double x)\n{\n\tif(abs(x) < EPS)\n\t\treturn 0;\n\tif(x > 0)\n\t\treturn 1;\n\treturn -1;\n}\n\ndouble sqr(double x)\n{\n\treturn x * x;\n}\n\ndouble det(Point a, Point b)\n{\n\treturn a.x*b.y-a.y*b.x;\n}\n\ndouble dot(Point a, Point b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble dist(Point a, Point b)\n{\n\treturn (a-b).norm();\n}\n\nPoint rotate_point(Point p, double A)\n{\n\tdouble tx = p.x, ty = p.y;\n\treturn Point(tx*cos(A)-ty*sin(A),tx*sin(A)+ty*cos(A));\n}\n\nint main()\n{\t\n#ifdef LOCAL\n\t//~ freopen(\"in.txt\", \"r\", stdin);\n#endif\n\n\tLine a;\n\tscanf(\"%lf%lf%lf%lf\", &a.a.x, &a.a.y, &a.b.x, &a.b.y);\n\tint q;\n\tsfi(q);\n\twhile(q--)\n\t{\n\t\tPoint p;\n\t\tscanf(\"%lf%lf\", &p.x, &p.y);\n\t\tPoint ans = PointProjLine(p, a);\n\t\tprintf(\"%.8lf %.8lf\\n\", ans.x, ans.y);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nconst double EPS =  1e-10;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y){}\n\n    Point operator + (Point p){\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator - (Point p){\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator * (Point p){\n        return Point(x * p.x, y * p.y);\n    }\n    Point operator * (double r){\n        return Point(x * r, y * r);\n    }\n    Point operator / (Point p){\n        return Point(x / p.x, y / p.y);\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n    double norm(){\n        return x * x + y * y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n    \n    \n};\n\n\n\ntypedef Point Vector;\n\nclass Segment : public Point{\n    public:\n    Point p1, p2;\n    Segment(Point p1_, Point p2_){\n        p1 = p1_;\n        p2 = p2_;\n    }\n    Segment(double a, double b, double c, double d){\n        Point(a, b);\n        Point(c, d);\n    }\n    \n};\n\ntypedef Segment Line;\n\ndouble dot(Point a, Point b){\n    return a.x * b.x + a.y * b.y;\n}\ndouble cross(Point a, Point b){\n    return a.x * b.y - a.y * b.x;\n}\nbool isOrthogonal(Point a, Point b){\n    return equals(dot(a, b), 0.0);\n}\nbool isParallel(Point a, Point b){\n    return equals(cross(a, b), 0.0);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s1.p1), 0.0);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s1.p1), 0.0);\n}\n\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    //Vector tmp = s.p1 + base * r;\n    Vector tmp = base * r;\n    return s.p1 + base * r;\n}\n\nint main(void){\n    Point p, p1, p2;\n    \n    std::cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Segment s = Segment(p1, p2);\n    int q;\n    std::cin >> q;\n    Point ans;\n    for(int i = 0; i < q; i++){\n        std::cin >> p.x >> p.y;\n        ans = project(s, p);\n        std::cout << std::fixed << std::setprecision(10) << ans.x << \" \" << ans.y << std::endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long LL;\n\nconst double EPS = 1e-10;\nconst int COUNTER_CLOCKWISE = 1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = 2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\nconst int IN = 2;\nconst int ON = 1;\nconst int OUT = 0;\n\ntypedef complex<double> Point;\ntypedef Point Vector;\nstruct Segment {\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\ninline double equals(double a, double b);\ninline double dot(Vector a, Vector b);\ninline double cross(Vector a, Vector b);\ninline bool isOrthogonal(Vector a, Vector b);\ninline bool isParallel(Vector a, Vector b);\nPoint project(Segment s, Point p);\nPoint reflect(Segment s, Point p);\nint ccw(Point p0, Point p1, Point p2);\nbool intersect(Segment s1, Segment s2);\nbool intersect(Circle c, Line l);\nbool intersect(Circle c1, Circle c2);\ndouble getDistanceLP(Line l, Point p);\ndouble getDistanceSP(Segment s, Point p);\ndouble getDistance(Segment s1, Segment s2);\nPoint getCrossPoint(Segment s1, Segment s2);\npair<Point, Point> getCrossPoints(Circle c, Line l);\npair<Point, Point> getCrossPoints(Circle c1, Circle c2);\nint contains(Polygon g, Point p);\n\ninline double equals(double a, double b) {\n\treturn fabs(a - b) < EPS;\n}\nbool operator<(const Point &p1, const Point &p2) {\n\treturn p1.real() != p2.real() ? p1.real() < p2.real() : p1.imag() < p2.imag();\n}\nbool operator==(const Point &p1, const Point &p2) {\n\treturn equals(p1.real(), p2.real()) && equals(p1.imag(), p2.imag());\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.real()*b.real() + a.imag()*b.imag();\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.real()*b.imag() - a.imag()*b.real();\n}\ninline bool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\ninline bool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn (ccw(s1.p1, s1.p2, s2.p1)*ccw(s1.p1, s1.p2, s2.p2) <= 0 &&\n\t\tccw(s2.p1, s2.p2, s1.p1)*ccw(s2.p1, s2.p2, s1.p2) <= 0);\n}\nbool intersect(Circle c, Line l) {\n\treturn getDistanceLP(l, c.c) <= c.r;\n}\nbool intersect(Circle c1, Circle c2) {\n\treturn abs(c1.c - c2.c) <= c1.r + c2.r;\n}\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tassert(intersect(s1, s2));\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r*c.r - norm(pr - c.c));\n\treturn make_pair(pr + e*base, pr - e*base);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tassert(intersect(c1, c2));\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.imag() > b.imag()) swap(a, b);\n\t\tif (a.imag() < EPS && EPS<b.imag() && cross(a, b)>EPS) x = !x;\n\t}\n\treturn x ? 2 : 0;\n}\n\nint main() {\n\tint x, y;\n\tcin >> x >> y;\n\tPoint p1(x, y);\n\tcin >> x >> y;\n\tPoint p2(x, y);\n\tSegment s(p1, p2);\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tPoint a = project(s, p);\n\t\tprintf(\"%.15lf %.15lf\\n\", a.real(), a.imag());\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <climits>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\n//???\nclass Point {\npublic:\n    double x, y;\n    \n    Point (double x = 0, double y = 0):x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(a * x, a * y);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    \n    double norm(){return x*x + y*y;};\n    double absolute(){return sqrt(norm());};\n    \n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    \n};\ntypedef Point Vector;                               //????????????\ntypedef struct Segment{Point p1, p2;}Segment;       //??????\ntypedef Segment Line;                               //??´???\ntypedef struct Circle{Point c; double r;}Circle;    //???\ntypedef vector<Point> Polygon;                      //????§???¢\n//????????????a????????????\ndouble norm(Vector a){\n    return a.x * a.x + a.y * a.y;\n}\n//????????????a?????§??????\ndouble absolute(Vector a){\n    return sqrt(norm(a));\n}\n\n//????????????a,b?????????\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n//????????????a,b?????????\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\n//????????????a??¨b?????´?????????\n//a??¨b?????´????????´??????????????????0?????????\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b), 0.0);\n}\n\n//????????????a??¨b???????????????\n//a??¨b?????´????????´??????????????????0?????????\nbool isParallel(Vector a , Vector b){\n    return equals(cross(a,b), 0.0);\n}\n\n//??????s(p1p2)???????????????p????°???±\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n//??????s???????§°?????¨?????????p???????±????\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2.0;\n}\n\n//???a,???b???????????¢\ndouble getDistance(Point a, Point b){\n    return absolute(a - b);\n}\n\n//??´???s??¨???p????????¢\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / absolute(l.p2 - l.p1));\n}\n\n//??????s(?§????p1/??????p2)??¨???p????????¢d????±???????\n//??\\???????????????????????§??´?????????\n//??????????????????p2-p1??¨???????????????p-p1??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p1??¨????????¢\n//??????????????????p1-p2??¨???????????????p-p2??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p2??¨????????¢\n//??????????????\\???????????????????????´??????d??????p??¨??´???p1p2????????¢\ndouble getDistanceSP(Segment s, Point p){\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return absolute(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return absolute(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\n\n//??????p0, p1, p2???????????????????????????p0p1???????????????p2??????????????????\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n//??????S1(p1p2)??¨??????s2(p2p3)????????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return  ccw(p1, p2, p3) * ccw(p1, p2, p3) <= 0\n            &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p1);\n}\n\n//??????s1??¨??????s2????????¢\n//??\\????????????????????¢????????§????????????????????????\n//????????????s1??¨??????s2????§????s2.p1????????¢\n//????????????s1??¨??????s2?????????s2.p2????????¢\n//????????????s2??¨??????s1????§????s1.p1????????¢\n//????????????s2??¨??????s1?????????s1.p2????????¢\ndouble getDistance(Segment s1, Segment s2){\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n    \n}\n\n//??????s1??¨??????s2?????????????±???????\nPoint getCrossPoint(Segment s1, Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n//?????¨??????l?????????????±???????\npair<Point, Point> getCrossPoints(Circle c, Line l){\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / absolute(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\n//???c1??¨???c2?????????????±???????\nVector polar(double a, double r){\n    //??????a,?§????r???point????±???????\n    return Point(cos(r) * a, sin(r) * a);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2){\n    Vector v = c2.c - c1.c;\n    double d = absolute(v);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d) );\n    double t = atan2(v.y, v.x);\n    return make_pair(c1.c + polar(c1.r, t+a), c1.c + polar(c1.r, t-a));\n}\n\n\n\nint main(){\n    \n    int x0, y0, x1, y1, x2, y2;\n    \n    int q;\n    \n    cin >> x0 >> y0 >> x1 >> y1;\n    cin >> q;\n    \n    Segment s = {Point(x0, y0), Point(x1, y1)};\n    \n    for (int i = 0; i < q; i++) {\n        cin >> x2 >> y2;\n        Point p2 = Point(x2, y2);\n        \n        Point ans = project(s, p2);\n        \n        printf(\"%f %f\\n\", ans.x, ans.y);\n    }\n\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cassert>\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) FOR(i,0,n)\n#define rep(i,n) FOR(i,0,n)\n#define DEBUG(x) cout<<#x<<\": \"<<x<<endl\n#define vint vector<int>\n#define vdouble vector<double>\n#define vstring vector<string>\nusing namespace std;\n\n#include<map>\n#include<set>\n#include<queue>\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nconst int MAX_N = 1000000;\nconst int INFTY = (1 << 21); // 2097152\n// const ll INFTY = (1LL << 60);\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x=0, double y=0):x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a){ return Point(a * x, a * y); }\n\tPoint operator / (double a){ return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y;}\n\tbool operator < (const Point &p) const {\n\t\t// first x, second y\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nstruct Segment{\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2){\n\t\tthis->p1 = p1;\n\t\tthis->p2 = p2;\n\t}\n};\n\ndouble dot(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// Orthogonal\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1- b2);\n}\n\n// Orthogonal\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1- b2);\n}\n\n// ???p????????????s???????????????????????????\nPoint project(Segment s, Point p){\n\t// ??\\??????????????????\n\t// t = |hypo|cos??\n\t// cos?? = dot(hypo,base)/|hypo||base|\n\t// project = s.p1 + base/|base| * t\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\nint Q;\nPoint p1, p2;\n\nint main() {\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tcin >> Q;\n\n\trep(i, Q){\n\t\tPoint pp;\n\t\tcin >> pp.x >> pp.y;\n\t\tPoint pr = project(Segment(p1, p2), pp);\n\t\tcout << pr.x << \" \" << pr.y << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct vec{double x;double y;};\ndouble naiseki(vec a,vec b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\nint main()\n{\n\tdouble xp1,xp2,yp1,yp2;\n\tcin>>xp1>>yp1>>xp2>>yp2;\n\tint q;cin>>q;\n\tvec base;\n\tbase.x=xp2-xp1;\n\tbase.y=yp2-yp1;\n\t\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tdouble s,t;\n\t\tcin>>s>>t;\n\t\tvec hypo;\n\t\thypo.x=s-xp1;\n\t\thypo.y=t-yp1;\n\t\tcout<<fixed<<setprecision(10)<<xp1+base.x*naiseki(hypo,base)/naiseki(base,base)<<\" \";\n\t\tcout<<(double)yp1+base.y*naiseki(hypo,base)/naiseki(base,base)<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>           // printf(), scanf()\n#include <cstdlib>          // abs()\n\nstatic const double EPS = 1e-10;\n\ndouble\nadd(double a, double b)\n{\n//\tif (abs(a + b) < EPS * (abs(a) + abs(b)))\n//\t\treturn 0;\n\n\treturn a + b;\n}\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\tPoint operator + (Point p) { return Point(add(x, p.x), add(y, p.y)); }\n\tPoint operator - (Point p) { return Point(add(x, -p.x), add(y, -p.y)); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n};\n\nstruct Segment\n{\n\tPoint p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble\nnorm(Vector a)\n{\n\treturn add(a.x * a.x, a.y * a.y);\n}\n\ndouble\ndot(Vector a, Vector b)\n{\n\treturn add(a.x * b.x, a.y * b.y);\n}\n\nPoint\nproject(Segment s, Point p)\n{\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\n\nint\nmain(int argc, char** argv)\n{\n\tSegment s;\n\tPoint p, a;\n\tint q;\n\tint x, y;\n\tint x1, y1, x2, y2;\n\tint i;\n\n\tscanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n\ts.p1.x = x1, s.p1.y = y1;\n\ts.p2.x = x2, s.p2.y = y2;\n\n\tscanf(\"%d\", &q);\n\tfor (i = 0; i < q; ++i)\n\t{\n\t\tscanf(\"%d %d\", &x, &y);\n\t\tp.x = x, p.y = y;\n\n\t\ta = project(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include <cassert>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\n#define rep(i,n) for(ll i=0;i<(ll)(n);i++)\n#define all(a)  (a).begin(),(a).end()\n#define vi vector<int>\n#define pb push_back\n#define INF 999999999\n//#define INF (1LL<<59)\n\n#define OUT 0\n#define ON 1\n#define IN 2\n#define EPS (1e-10)\nclass P{                    //???\npublic:\n    double x,y;\n    \n    P(double _x=0,double _y=0):x(_x),y(_y){};\n    P operator + (P &p     ){ return P( x+p.x , y+p.y ); }  //??????\n    P operator - (P &p     ){ return P( x-p.x , y-p.y ); }  //??????\n    P operator * (double k ){ return P( x*k   , y*k    ); } //??????\n    P operator / (double k ){ return P( x/k   , y/k    ); } //??????\n    \n    bool operator == (const P &p){ return ( fabs(x-p.x)<EPS && fabs(y-p.y)<EPS ); }\n    //    bool operator < (const P &p)const{ return ( x!=p.x ? x<p.x:y<p.y ); }\n    \n    double norm(){ return x*x+y*y; }        //?????????\n    double abs() { return sqrt(norm()); }   //??§??????\n    \n};\nstruct C{P p;double r;};    //???\nstruct S{P p1,p2;};         //??????\ntypedef vector<P> Polygon;  //????§???¢\ntypedef P Vector;           //????????????\ntypedef S L;                //??´???\n\ndouble norm (P p)               { return p.norm(); }\ndouble abs  (P p)               { return p.abs(); }\ndouble dot  (Vector a,Vector b) { return a.x*b.x+a.y*b.y; }\ndouble cross(Vector a,Vector b) { return a.x*b.y-a.y*b.x; }\ndouble sqDist(P a, P b)         {return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);}\ndouble dist (P a, P b)          {return sqrt(sqDist(a,b));}\nVector vec(S a)                 {return P(a.p2.x-a.p1.x,a.p2.y-a.p1.y);}\n\nint ccw(P p0,P p1,P p2){    //AOJ_BOOK_P386 verified\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    \n    if( cross(a,b) > EPS  ) return 1 ;      //COUNTER_CLOCKWISE\n    if( cross(a,b) < -EPS ) return -1;      //CLOCKWISE\n    if( dot(a,b)   < -EPS ) return 2;       //ONLINE_BACK\n    if( a.norm()   < b.norm() ) return -2;  //ONLINE_FRONT\n    \n    return 0;                               //ON_SEGMENT;\n}\n\n//??´?????´????????? verified AOJ0058\nbool orthogonal(P p1,P p2,P p3,P p4){ return abs(dot(p1-p2,p3-p4))<EPS; }\n\n//??????????????????\nbool intersect(P p1,P p2,P p3,P p4){ return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 ); }\n\n//????????¨???????????¢ verified ARC042-B\ndouble dLP(S l, P p) { return abs(cross(l.p2-l.p1, p-l.p1)) /(l.p2-l.p1).abs(); }\n\n//?????????????????????????°???± verified AOJ CGL_1_A\nP project(S s, P p){\n    Vector base = s.p2-s.p1;\n    double r = dot(p-s.p1, base)/norm(base);\n    return (base*r)+s.p1;\n}\n\n\n//??´?????¨??´????????¢??? verified AOJ CGL_2\nint rLL(L a,L b){\n    if( cross(vec(a),vec(b))==0 ) return 2; //??????\n    if( dot(vec(a),vec(b))==0 )   return 1; //?????´\n    return 0;\n}\n\n// ?????¨??????????????????\nint contains(C c, P p){\n    double d = (c.p-p).abs();\n    if(d-c.r>EPS) return OUT;\n    if(abs(d-c.r)<EPS) return ON;\n    return IN;\n}\n\n//??´?????¨??????????????????(????????£???????????´??????????????±???)\nbool intersect_circle_(P center, double r, L line){\n    if( dLP(line,center) <= r+EPS ) return true;\n    return false;\n}\n\n//????????¨???????????¢ verified QUPC-G\ndouble dSP(S s, P p){\n    if(dot((s.p2-s.p1)   , p-s.p1) <= EPS) return (p - s.p1).abs();\n    if(dot((s.p2-s.p1)*-1, p-s.p2) <= EPS) return (p - s.p2).abs();\n    return dLP(s, p);\n}\n\n//????????¨??????????????????(????????£???????????´??????????????±???) verified QUPC-G\nbool iCS(C c, S l){\n    int c1 = contains(c, l.p1);\n    int c2 = contains(c, l.p2);\n    if(c1 > c2) swap(c1, c2);\n    \n    // (OUT, OUT) (OUT, ON) (OUT, IN) (ON, ON) (ON, IN) (IN, IN) ???6??????\n    if(c1 == OUT && c2 == IN) return true;\n    if(c1 == IN  && c2 == IN) return false;\n    if(c1 == ON) return true; // (??\\????????¨???)\n    double d = dSP(l, c.p);\n    if(d-c.r<-EPS) return true;\n    if(d-c.r>EPS) return false;\n    return true; // (??\\????????¨???)\n}\n\n//????´?????§???¢??????\nbool isSimple( Polygon pol ){\n    //???????????????????????????pol?????\\????????????\n    size_t pol_size = pol.size()-1;\n    rep(i,pol_size){\n        for(int j=i+2;j<pol_size;j++){\n            if( i==j || i==(j-1+pol_size)%pol_size || i==(j+1+pol_size)%pol_size )continue;\n            if( intersect(pol[i], pol[i+1], pol[j], pol[j+1]) )return false;\n        }\n    }\n    return true;\n}\n\n//?????????????§???¢????????´?????????????????????????±??????? true???????????´ verified AOJ0012\nint isPointInsidePolygon(vector<P> pol,P p){\n    int c=0;\n    rep(i,pol.size()){\n        if( cross(pol[i]-pol[(i+1)%pol.size()] , p-pol[(i+1)%pol.size()])==0 ) return ON;\n        if( cross(pol[i]-pol[(i+1)%pol.size()] , p-pol[(i+1)%pol.size()])>0 ) c++;\n    }\n    if( c%pol.size() )return OUT;\n    return IN;\n}\n\n//?????¨???????§???¢???????????¶???????????????\nint CPOLarea(C c ,Polygon pol){\n    vector<L> lines;\n    vector<int> res(pol.size());\n    bool POLinC=true, isFar=true;\n    \n    rep(i,pol.size()){\n        if( contains(c,pol[i])==OUT )POLinC=false;\n        res[i] = contains(c,pol[i]);\n        lines.pb( L{ pol[i] , pol[(i+1)%pol.size()] });\n        if( sqDist(c.p,pol[i])<c.r*c.r )isFar=false;\n    }\n    \n    if( POLinC )                                        return 2;   //????§???¢??????????????¨b\n    if( isPointInsidePolygon(pol, c.p)==IN && isFar )   return 3;   //????§???¢????????¨??????a\n    rep(i,lines.size()) if( iCS(c,lines[i]) )           return 1;   //????§???¢??¨????????????c\n    return 0;\n}\n\n//?????? verified AOJ0068,QUPC-G\n//???????????§??????\nbool cmp_x(const P& p, const P& q){\n    if(p.x != q.x)return p.x<q.x;\n    return p.y<q.y;\n}\n\n//??????????±???????\nvector<P> convex_hull(vector<P> ps){\n    int n = ps.size();\n    sort(all(ps),cmp_x);\n    int k=0;            //?????????????????°\n    vector<P> qs(n*2);  //?§????????????????\n    //?????´???????????????\n    rep(i,n){\n        while( k>1 && cross((qs[k-1]-qs[k-2]) , (ps[i]-qs[k-1]))<=0 ) k--;\n        qs[k++]=ps[i];\n    }\n    //?????´???????????????\n    for(int i=n-2, t=k;i>=0;i--){\n        while( k>t && cross((qs[k-1]-qs[k-2]) , (ps[i]-qs[k-1]))<=0 ) k--;\n        qs[k++]=ps[i];\n    }\n    qs.resize(k-1);\n    return qs;\n}\n\nint main(){\n    L l;\n    cin>>l.p1.x>>l.p1.y>>l.p2.x>>l.p2.y;\n    int q;\n    cin>>q;\n    rep(i,q){\n        P p;\n        cin>>p.x>>p.y;\n        P res = project(l,p);\n        printf(\"%.10lf %.10lf\\n\",res.x,res.y);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define NIL -2\n#define INF 1000000001\n#define EPS 1e-10\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\nclass Point{\n    public:\n    double x,y;\n\n    Point(double x = 0,double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p){ return Point(x+p.x, y+p.y); }\n    Point operator - (Point p){ return Point(x-p.x, y-p.y); }\n    Point operator * (double k){ return Point(x*k,y*k);      }\n    Point operator / (double k){ return Point(x/k,y/k);      }\n\n    double norm(){ return x*x + y*y;}\n    double abs(){ return sqrt(norm());}\n    double dot(Point p){\n        return x*p.x + y*p.y;\n    }\n\n    bool operator < (Point &p){\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator == (Point &p){\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n  \n};\ntypedef Point Vector;\n\nint main(){\n    double x1,y1,x2,y2;\n    double x,y;\n    scanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n    Point p1(x1,y1);\n    Point p2(x2,y2);\n    Vector p12 = p2-p1;\n    p12 = p12 / p12.abs();\n\n    int q;\n    scanf(\"%d\",&q);\n    for(int i = 0;i < q;i++){\n        scanf(\"%lf %lf\",&x,&y);\n        Point p(x,y);\n        p = p - p1;\n        Point ans;\n        double inner_prod = p12.dot(p);\n        ans = p1 + p12 * inner_prod;\n        printf(\"%.9lf %.9lf\\n\",ans.x,ans.y);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct Point{\n    double x, y;\n};\n\nstruct Vector{\n    double x, y;\n    Vector(double X = 0, double Y = 0) : x(X), y(Y) {}\n    Vector(Point p1, Point p2) \n     : x(p2.x - p1.x), y(p2.y - p1.y) {}\n    Vector& operator+(const Point& p)\n    {\n        x += p.x;\n        y += p.y;\n        return *this;\n    }\n\n    Vector& operator*(const double k)\n    {\n        x *= k;\n        y *= k;\n        return *this;\n    };\n    Vector& operator/(const double k)\n    {\n        if(k != 0)\n        {\n            x /= k;\n            y /= k;\n        }\n        return *this;\n    }\n    Vector& operator=(const Vector& v)\n    {\n        x = v.x;\n        y = v.y;\n        return *this;\n    }\n    double dot(const Vector& v)\n    {\n        return x * v.x + y * v.y;\n    }\n};\n\ndouble length(const Vector& v)\n{\n    return sqrt(v.x * v.x + v.y * v.y);\n}\n\nvoid getProjection(const Vector& v1, const Vector& v2, Vector& v)\n{\n    double l = length(v2);\n    v = v2;\n    v = v * v.dot(v1) / (l*l);\n}\n\nint main()\n{\n    Point p1, p2, p;\n    int q;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    cin >> q;\n    Vector v(p1, p2), ans;\n    for(int i=0;i<q;++i)\n    {\n        cin >> p.x >> p.y;\n        getProjection(Vector(p1, p), v, ans);\n        ans = ans + p1;\n        printf(\"%.10lf %.10lf\\n\", ans.x, ans.y);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#ifndef ___Class_Point\n#define ___Class_Point\n\n#include <cmath>\n\nclass Point\n{\nprivate:\n\n\tdouble x_;\n\tdouble y_;\n\npublic:\n\n\tPoint() : x_(0), y_(0) { }\n\n\texplicit Point(double x, double y) : x_(x), y_(y) { }\n\n\texplicit Point(double x1, double y1, double x2, double y2) : x_(x2 - x1), y_(y2 - y1) { }\n\n\tdouble x() const { return x_; }\n\tdouble y() const { return y_; }\n\n\tvoid operator= (Point& p) { x_ = p.x_; y_ = p.y_; }\n\t\n\tPoint operator+ (Point p) { return Point(x_ + p.x_, y_ + p.y_); }\n\tPoint operator- (Point p) { return Point(x_ - p.x_, y_ + p.y_); }\n\n\tPoint operator* (double s) { return Point(x_ * s, y_ * s); }\n\tPoint operator/ (double s) { return Point(x_ / s, y_ / s); }\n};\n\n#endif\n\n#ifndef ___Class_Vector\n#define ___Class_Vector\n\ntypedef Point Vector;\n\ndouble norm(Vector p1)\n{\n\treturn p1.x() * p1.x() + p1.y() * p1.y();\n}\n\ndouble abs(Vector p1)\n{\n\treturn sqrt(norm(p1));\n}\n\ndouble cross(Vector p1, Vector p2)\n{\n\treturn p1.x() * p2.y() - p1.y() * p2.x();\n}\n\ndouble dot(Vector p1, Vector p2)\n{\n\treturn p1.x() * p2.x() + p1.y() * p2.y();\n}\n\n#endif\n\n#ifndef ___Computational_Geometry\n#define ___Computational_Geometry\n\nbool palarell(Vector p1, Vector p2)\n{\n\treturn cross(p1, p2) == 0;\n}\n\nbool palarell(Point p1_s, Point p1_e, Point p2_s, Point p2_e)\n{\n\treturn palarell(p1_e - p1_s, p2_e - p2_s);\n}\n\nbool orthogonal(Vector p1, Vector p2)\n{\n\treturn dot(p1, p2) == 0;\n}\n\nbool orthogonal(Point p1_s, Point p1_e, Point p2_s, Point p2_e)\n{\n\treturn orthogonal(p1_e - p1_s, p2_e - p2_s);\n}\n\ndouble dist_sqr(Point p1, Point p2)\n{\n\treturn pow(p2.x() - p1.x(), 2) + pow(p2.y() - p1.y(), 2);\n}\n\ndouble distance(Point p1, Point p2)\n{\n\treturn sqrt(dist_sqr(p1, p2));\n}\n\nVector projection(Vector hypo, Vector base)\n{\n\treturn base * (dot(hypo, base) / norm(base));\n}\n\nVector reflection(Point hypo, Point base)\n{\n\treturn base + (projection(hypo, base) - hypo) * 2.0;\n}\n\n#endif\n\n#include <cstdio>\n\n#pragma warning(disable: 4996)\n\nint main()\n{\n\tint x1, y1, x2, y2, x3, y3, q;\n\n\tscanf(\"%d\", &x1);\n\tscanf(\"%d\", &y1);\n\tscanf(\"%d\", &x2);\n\tscanf(\"%d\", &y2);\n\n\tPoint p(x1, y1, x2, y2);\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%d\", &x3);\n\t\tscanf(\"%d\", &y3);\n\n\t\tPoint a(x1, y1, x3, y3);\n\n\t\tPoint c = projection(a, p);\n\n\t\tprintf(\"%.15f %.15f\\n\", x1 + c.x(), y1 + c.y());\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int lint\ntypedef long long lint;\ntypedef pair<int,int> P;\nconst int    INF=(int)1e9;\nconst int    MOD=(int)1e9+7;\nconst double EPS=(double)1e-10;\n#define equals(a,b) (fabs((a)-(b))<EPS)\nstruct Accelerate_Cin{\n    Accelerate_Cin(){\n        cin.tie(0);ios::sync_with_stdio(0);cout<<fixed<<setprecision(20);\n    };\n};\n\n//幾何学テンプレート\n\n//点\nclass Point{\npublic:\n  double x,y;\n\n  Point(double x = 0,double y = 0):x(x), y(y){};\n\n  Point operator + (Point p) {return Point (x+p.x, y+p.y);}\n  Point operator - (Point p) {return Point (x-p.x, y-p.y);}\n  Point operator * (double a) {return Point(a*x, a*y);}\n  Point operator / (double a) {return Point(x/a,y/a);}\n\n  double abs(){return (norm());}\n  double norm(){return x*x+y*y;}\n\n  bool operator < (const Point &p)const{\n    return x!=p.x ? x<p.x:y<p.y;\n  }\n  bool operator > (const Point &p)const{\n    return x!=p.x ? x>p.x:y>p.y;\n  }\n  bool operator == (const Point &p)const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\n//ベクトル\ntypedef Point Vector;\n\n//内積\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//外積\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//線分\nstruct Segment{Point p1,p2;};\n\n//直線\ntypedef Segment Line;\n\n//円\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\n//多角形\ntypedef vector<Point> Polygon;\n\n//ある点から、直線/線分に対する射影を求める。\nPoint project(Segment s, Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/base.norm();\n  return s.p1+base*r;\n}\n\n\nsigned main(){\n  double x1,y1,x2,y2;cin>>x1>>y1>>x2>>y2;\n  Point p1={x1,y1},p2={x2,y2};\n  Segment s={p1,p2};\n\n  int qq;cin>>qq;\n  queue<Point>q;\n  for(int i=0;i<qq;i++){\n    double x,y;cin>>x>>y;\n    Point p={x,y};\n    Point ans=project(s,p);\n    q.push(ans);\n  }\n\n  while(!q.empty()){\n    Point temp=q.front();q.pop();\n    cout<<fixed<<setprecision(10)<<temp.x<<\" \"<<temp.y<<endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\n#define equals(a, b) (fabs((a)-(b)) < EPS)\nconst double EPS = (1e-10);\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) {\n        return Point(x+p.x, y+p.y);\n    }\n    Point operator - (Point p) {\n        return Point(x-p.x, y-p.y);\n    }\n    Point operator * (double a) {\n        return Point(x*a, y*a);\n    }\n    Point operator / (double a) {\n        return Point(x/a, y/a);\n    }\n\n    double abs() {\n        return sqrt(norm());\n    }\n    double norm() {\n        return x*x + y*y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n// 内積\ndouble dot(Vector a, Vector b) {\n    return a.x*b.x + a.y*b.y;\n}\n\nclass Segment {\npublic:\n    Point p1, p2;\n\n    Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\n\n// 射影\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    Vector hypo = p - s.p1;\n    double r = dot(hypo, base) / base.norm();\n    return s.p1 + base*r;\n}\n\nint main(void) {\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Segment s(Point(x1, y1), Point(x2, y2));\n\n    int q; cin >> q;\n    double x, y;\n    for (int i = 0; i < q; i++) {\n        cin >> x >> y;\n        Point ans = project(s, Point(x, y));\n\n        printf(\"%.9f %.9f\\n\", ans.x, ans.y);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n#include <cassert>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define fs first\n#define sc second\n#define pb push_back\nusing namespace std;\ntypedef long double D;\ntypedef complex<D> P;\ntypedef pair<P,P> L;\t\t//fs->sc\ntypedef vector<P> Pol;\nstruct C{P p;D r;};\nD inf=1e50,eps=1e-10;\n//template<class T> bool eq(T a, T b) { return abs(a-b)<eps;}\n//template<class T> int sig(T a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool eq(D a, D b) { return abs(a-b)<eps;}\nint sig(D a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\ninline D dot(P a, P b) { return real(conj(a)*b);};\ninline D cro(P a, P b) { return imag(conj(a)*b);};\nenum ENCCW{CCW=1, CW=-1, FRONT=2, BACK=-2, ON=0};\t//!!MAEHARAとFRONT,BACKが逆\n//ON優先(including endpoint)\ninline int ccw (P a, P b, P c){\n//\tcout << cro(b-a,c-a) << endl;\n\tif(sig(cro(b-a,c-a))==1) return CCW;\n\tif(sig(cro(b-a,c-a))==-1) return CW;\n\tif(eq(abs(a-c)+abs(c-b),abs(a-b))) return ON;\n\tif(eq(abs(a-b)+abs(b-c),abs(a-c))) return FRONT;\n\tif(eq(abs(c-a)+abs(a-b),abs(c-b))) return BACK;\n\tassert(false);\n}\ninline P proj(P a, P b){\t\t//ベクトルaのbへの射影\n\treturn (dot(a,b)/norm(b))*b;\n}\ninline P perp(L l, P p){\t\t//垂線の足\n\tD t=dot(p-l.fs,l.fs-l.sc)/norm(l.fs-l.sc);\n\treturn l.fs+t*(l.fs-l.sc);\n}\ninline P refl(L l, P p){\n\treturn p+2.0*(perp(l,p)-p);\n}\ninline bool ispal(L a, L b){\n\treturn sig(cro(a.fs-a.sc,b.fs-b.sc))==0;\n}\ninline bool ovLL(L a, L b){\n\treturn ispal(a,b) && sig(cro(a.fs-a.sc,b.fs-a.sc))==0;\n}\ninline bool iLL(L a, L b){\t\t//intersect or overload\n\treturn !ispal(a,b) || ovLL(a,b);\n}\ninline bool iLS(L l, L s){\t\t//intersect(including endpoint) or overload\n\treturn cro(l.sc-l.fs,s.fs-l.fs)*cro(l.sc-l.fs,s.sc-l.fs)<eps;\n}\ninline bool iLP(L l, P p){\t\t//on line\n\treturn sig(cro(l.sc-p,l.fs-p));\n}\ninline bool iSS(L a, L b){\t\t//intersect(including endpoint) or overload\n\treturn ccw(a.fs,a.sc,b.fs)*ccw(a.fs,a.sc,b.sc)<=0 && ccw(b.fs,b.sc,a.fs)*ccw(b.fs,b.sc,a.sc)<=0;\n}\ninline bool iSP(L s, P p){\t\t//intersect(including endpoint) or overload\n\treturn ccw(s.fs,p,s.sc)==ON;\n}\ninline D dLP(L l, P p) { return abs(perp(l,p)-p);}\ninline D dLL(L a, L b) { return iLL(a,b) ? 0 : dLP(a,b.fs);}\ninline D dLS(L l, L s) { return iLS(l,s) ? 0 : min(dLP(l,s.fs),dLP(l,s.sc));}\ninline D dSP(L s, P p) {\n\tP q=perp(s,p);\n\treturn iSP(s,q) ? abs(p-q) : min(abs(p-s.fs),abs(p-s.sc));\n}\ninline D dSS(L a, L b) {\n\tif(iSS(a,b)) return 0;\n\treturn min(min(dSP(a,b.fs),dSP(a,b.sc)),min(dSP(b,a.fs),dSP(b,a.sc)));\n}\ninline P intLL(L a, L b) {\t//intersection\n\tassert(!ispal(a,b));\n\tD t=cro(a.sc-a.fs,a.sc-b.fs)/cro(a.sc-a.fs,b.sc-b.fs);\n\treturn b.fs+t*(b.sc-b.fs);\n}\nenum ENICP{INC=1,ONC=0,OUTC=-1};\ninline int iCP(C c, P p){\n\tD d=abs(p-c.p);\n\treturn eq(d,c.r) ? ONC : (d<c.r ? INC : OUTC);\n}\ninline int iCL(C c, L l){\t\t//num of intersection(s)\n\tD d=dLP(l,c.p);\n\treturn eq(d,c.r) ? 1 : (d<c.r ? 2 : 0);\n}\n//inline int iCS\n//inline int iCC(C a, C b){\n\n/*inline P intCL1(C c, L l){\t\t//iCL=1\n\tassert(iCL(c,l)==1);\n}\ninline L intCL2(C c, L l){\t\t//iCL=2\n\tassert(iCL(c,l)==2);\n}*/\nD aTri(P a, P b, P c){ return cro(b-a,c-a)/2;}\nD aPol(Pol p){\t\t\t//点集合はCCWに与える\n\tint n=p.size();\n\tD ret=0;\n\trep(i,n) ret+=cro(p[i],p[(i+1)%n])/2;\n\treturn ret;\n}\nP gPol(Pol p){\t\t\t//多角形内部が一様な重さを持つときの重心\n\tint n=p.size();\n\tP g;\n\tD s=aPol(p);\n\tassert(s>eps);\n\trep(i,n){\n\t\tD ds=cro(p[i],p[(i+1)%n])/2;\n\t\tg+=ds/3*(p[i]+p[(i+1)%n]);\n\t}\n\treturn g/s;\n}\nenum ENCONT{INP=1,ONP=0,OUTP=-1};\nint contain(Pol pol, P p){\n\tbool in=false;\n\trep(i,pol.size()){\n\t\tP a=pol[i],b=pol[(i+1)%pol.size()];\n\t\tif(ccw(a,b,p)==ON) return ONP;\n\t\tif(!iLS(L(p,p+1.),L(a,b))) continue;\n\t\tif(ovLL(L(p,p+1.),L(a,b))){\n\t\t\tif(sig(max(real(a),real(b))-real(p))>=0) in=!in;\n\t\t\tcontinue;\n\t\t}\n\t\tif(sig(real(intLL(L(p,p+1.),L(a,b)))-real(p))>=0) in=!in;\n\t}\n\treturn in ? INP : OUTP;\n}\ninline D heron(D a, D b, D c){\n\tdouble s=(a+b+c)/2;\n\tif(s-a<eps || s-b<eps || s-c<eps) return 0;\t\t//S=0 || 三角形できない\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tD x0,y0,x1,y1;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tL a=L(P(x0,y0),P(x1,y1));\n\tint q;\n\tscanf(\"%d\",&q);\n\trep(i,q){\n\t\tD x,y;\n\t\tscanf(\"%Lf%Lf\",&x,&y);\n\t\tP p=perp(a,P(x,y));\n\t\tprintf(\"%.10Lf %.10Lf\\n\",p.real(),p.imag());\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <array>\n\nusing Number = double;\n\nconst Number EPS = 1e-10;\nconst Number INF = 1e10;\nconst Number PI = acos(-1.0);\n\ninline int sign(Number x) { return (x < -EPS) ? -1 : (x > EPS) ? +1 : 0; }\n\n// change between degree and radian\ninline Number to_radian(const Number degree) { return degree * PI / 180.0; }\ninline Number to_degree(const Number radian) { return radian * 180.0 / PI; }\n\n\n/**\n * Point in two dimensional\n */\nclass Point {\npublic:\n    Number x, y;\n\n    Point() {}\n    Point(Number x, Number y) : x(x), y(y) {}\n\n    // Arithmetic operator between points\n    Point operator+(const Point &rhs) const {\n        return Point(this->x + rhs.x, this->y + rhs.y);\n    }\n    Point operator-(const Point &rhs) const {\n        return Point(this->x - rhs.x, this->y - rhs.y);\n    }\n    Point operator*(const Point &rhs) const { // cross product between points\n        return Point(this->x * rhs.x - this->y * rhs.y,\n                     this->x * rhs.x + this->y * rhs.x);\n    }\n\n    // Unary operator\n    Point operator-() const {\n        return Point(-this->x, -this->y);\n    }\n\n    // Arithmetic operator between point and number\n    Point operator*(Number rhs) const {\n        return Point(this->x * rhs, this->y * rhs);\n    }\n    Point operator/(Number rhs) const {\n        return Point(this->x / rhs, this->y / rhs);\n    }\n\n    // Comparison operation\n    bool operator==(const Point &rhs) const {\n        return sign(this->x - rhs.x) == 0 && sign(this->y - rhs.y) == 0;\n    }\n    bool operator<(const Point &rhs) const {\n        return (this->x < rhs.x) || (this->x == rhs.x && this->y < rhs.y);\n    }\n\n    // Other operator\n    Number abs(void) const {\n        return sqrt(this->x * this->x + this->y * this->y);\n    }\n    Number abs2(void) const {\n        return this->x * this->x + this->y * this->y;\n    }\n    Number arg(void) const {\n        return atan2(this->y, this->x);\n    }\n    Number dot(const Point &rhs) {\n        return this->x * rhs.x + this->y * rhs.y;\n    }\n    Point rotate90(void) const {\n        return Point(-this->y, this->x);\n    }\n    Point rotate(double angle) const {\n        return Point(cos(angle) * this->x - sin(angle) * this->y,\n                     sin(angle) * this->x + cos(angle) * this->y);\n    }\n\n};\ninline Number dot(const Point &p1, const Point &p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\n// Output of a point\nstd::ostream& operator<<(std::ostream &os, const Point &p) {\n    return os <<  p.x << \" \" << p.y;\n}\n// std::ostream& operator<<(std::ostream &os, const Point &p) {\n//     return os << '(' << p.x << \", \" << p.y << ')';\n// }\n// Input of a point\nstd::istream& operator>>(std::istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\n\n\n/**\n * Line or Segment in two dimensional\n */\nclass Line : public std::array<Point, 2> {\npublic:\n    Line() {}\n    Line(const Point &p1, const Point &p2) {\n        (*this)[0] = p1;\n        (*this)[1] = p2;\n    }\n};\nusing Segment = Line;\n// Input of a line\nstd::istream& operator>>(std::istream &is, Line &l) {\n    return is >> l[0] >> l[1];\n}\n\n\n/**\n * Circle in two dimensional\n */\nclass Circle : public Point {\npublic:\n    Number r;\n    Circle(const Point &p, Number r = 0.0) : Point(p), r(r) {}\n};\n// Input of a circle\nstd::istream& operator>>(std::istream &is, Circle &c) {\n    return is >> c.x >> c.y >> c.r;\n}\n\n\n/**\n * Intersection and Distance\n */\nPoint Projection(const Line &l, const Point &p) {\n    Point dir = l[1] - l[0];\n    Number t = dot(p - l[0], dir) / dir.abs2();\n    return l[0] + dir * t;\n}\n\n\nint main()\n{\n    std::cout << std::fixed << std::setprecision(15);\n\n    Line l;\n    Point p;\n    int q;\n\n    std::cin >> l;\n    std::cin >> q;\n\n    while (q--) {\n        std::cin >> p;\n        std::cout << Projection(l, p) << std::endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n/*\n#ifndef ONLINE_JUDGE\n\t#include <boost/multiprecision/cpp_int.hpp>\n\t#include <boost/multiprecision/cpp_dec_float.hpp>\n\tusing bll = boost::multiprecision::cpp_int;\n\tusing bdouble = boost::multiprecision::cpp_dec_float_100;\n#endif\n*/\n#ifdef LOCAL_DEV\n\tvoid debug_impl() { std::cerr << std::endl; }\n\ttemplate<typename Head, typename... Tail> void debug_impl(Head head, Tail... tail) { std::cerr << \" \" << head << (sizeof...(tail) ? \",\" : \"\"); debug_impl(tail...); }\n\t#define debug(...) { std::cerr << std::boolalpha << \"(\" << #__VA_ARGS__ << \") =\"; debug_impl(__VA_ARGS__); std::cerr << std::noboolalpha; }\n#else\n\t#define debug(...) {}\n#endif\n#ifdef LOCAL_TEST\n\t#define BOOST_STACKTRACE_USE_ADDR2LINE\n\t#define BOOST_STACKTRACE_ADDR2LINE_LOCATION /usr/local/opt/binutils/bin/addr2line\n\t#define _GNU_SOURCE\n\t#include <boost/stacktrace.hpp>\n\ttemplate<typename T> class dvector : public std::vector<T> {\n\tpublic:\n\t\tdvector() : std::vector<T>() {}\n\t\texplicit dvector(size_t n, const T& value = T()) : std::vector<T>(n, value) {}\n\t\tdvector(const std::vector<T>& v) : std::vector<T>(v) {}\n\t\tdvector(const std::initializer_list<T> il) : std::vector<T>(il) {}\n\t\tdvector(const typename std::vector<T>::iterator first, const typename std::vector<T>::iterator last) : std::vector<T>(first, last) {}\n\t\tdvector(const std::string::iterator first, const std::string::iterator last) : std::vector<T>(first, last) {}\n\t\tT& operator[](size_t n) {\n\t\t\ttry { return this->at(n); } catch (const std::exception& e) {\n\t\t\t\tstd::cerr << boost::stacktrace::stacktrace() << std::endl; return this->at(n);\n\t\t\t}\n\t\t}\n\t\tconst T& operator[](size_t n) const {\n\t\t\ttry { return this->at(n); } catch (const std::exception& e) {\n\t\t\t\tstd::cerr << boost::stacktrace::stacktrace() << std::endl; return this->at(n);\n\t\t\t}\n\t\t}\n\t};\n\tclass dbool {\n\tprivate:\n\t\tbool boolvalue;\n\tpublic:\n\t\tdbool() : boolvalue(false) {}\n\t\tdbool(bool b) : boolvalue(b) {}\n\t\tdbool(const dbool &b) : boolvalue(b.boolvalue) {}\n\t\toperator bool&() { return boolvalue; }\n\t\toperator const bool&() const { return boolvalue; }\n\t};\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const dvector<T>& v) {\n\t\tfor (int i = 0, len = v.size(); i < len; ++i){ s << v[i]; if (i < len - 1) s << \"\\t\"; } return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const dvector< dvector<T> >& vv) {\n\t\tfor (int i = 0, len = vv.size(); i < len; ++i){ s << vv[i] << std::endl; } return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const std::set<T>& se) {\n\t\ts << \"{ \"; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << \"\\t\"; } s << \"}\"; return s; }\n\ttemplate<typename T> std::ostream& operator<<(std::ostream& s, const std::multiset<T>& se) {\n\t\ts << \"{ \"; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << \"\\t\"; } s << \"}\"; return s; }\n\ttemplate<typename T1, typename T2> std::ostream& operator<<(std::ostream& s, const std::map<T1, T2>& m) {\n\t\ts << \"{\" << std::endl; for (auto itr = m.begin(); itr != m.end(); ++itr){ s << \"\\t\" << (*itr).first << \" : \" << (*itr).second << std::endl; } s << \"}\"; return s; }\n\ttemplate<typename T1, typename T2> std::ostream& operator<<(std::ostream& s, const std::pair<T1, T2>& p) { \n\t\treturn s << \"(\" << p.first << \", \" << p.second << \")\"; }\n\t#define vector dvector\n\t#define bool dbool\n\tclass SIGFPE_exception : std::exception {};\n\tclass SIGSEGV_exception : std::exception {};\n\tvoid catch_SIGFPE(int e) { std::cerr << boost::stacktrace::stacktrace() << std::endl; throw SIGFPE_exception();\t}\n\tvoid catch_SIGSEGV(int e) { std::cerr << boost::stacktrace::stacktrace() << std::endl; throw SIGSEGV_exception(); }\n\tsigned convertedmain();\n\tsigned main() { signal(SIGFPE, catch_SIGFPE); signal(SIGSEGV, catch_SIGSEGV); return convertedmain(); }\n\t#define main() convertedmain()\n#endif\n//#define int long long\nusing ll = long long;\n//constexpr int INF = 1e9;//INT_MAX=(1<<31)-1=2147483647\nconstexpr ll INF = (ll)1e18;//(1LL<<63)-1=9223372036854775807\nconstexpr ll MOD = (ll)1e9 + 7;\nconstexpr double EPS = 1e-9;\nconstexpr int dx[4] = {1, 0, -1, 0};\nconstexpr int dy[4] = {0, 1, 0, -1};\n#define rep(i, n)   for(ll i=0, i##_length=(n); i< i##_length; ++i)\n#define repeq(i, n) for(ll i=1, i##_length=(n); i<=i##_length; ++i)\n#define rrep(i, n)   for(ll i=(n)-1; i>=0; --i)\n#define rrepeq(i, n) for(ll i=(n)  ; i>=1; --i)\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\n#define uniq(v) (v).erase(unique((v).begin(), (v).end()), (v).end());\nvoid p() { std::cout << '\\n'; }\ntemplate<typename Head, typename... Tail> void p(Head head, Tail... tail) { std::cout << head << (sizeof...(tail) ? \" \" : \"\"); p(tail...); }\ntemplate<typename T> inline void pv(vector<T> &v) { for(ll i=0, N=v.size(); i<N; i++) std::cout << v[i] << \" \\n\"[i==N-1]; }\ntemplate<typename T> inline T gcd(T a, T b) { return b ? gcd(b,a%b) : a; }\ntemplate<typename T> inline T lcm(T a, T b) { return a / gcd(a,  b) * b; }\ntemplate<typename T> inline bool chmax(T &a, T b) { return a < b && (a = b, true); }\ntemplate<typename T> inline bool chmin(T &a, T b) { return a > b && (a = b, true); }\n\n/*-----8<-----template-----8<-----*/\n\n//点、ベクトル\nclass Point {\npublic:\n\tdouble x,y;\n\tPoint(double x=0., double y=0.) : x(x), y(y) {}\n\tPoint operator + (Point p) {return Point(x+p.x, y+p.y);}\n\tPoint operator - (Point p) {return Point(x-p.x, y-p.y);}\n\tPoint operator * (Point p) {return Point(x*p.x, y*p.y);}\n\tPoint operator / (Point p) {return Point(x/p.x, y/p.y);}\n\tPoint operator + (double n) {return Point(x+n, y+n);}\n\tPoint operator - (double n) {return Point(x-n, y-n);}\n\tPoint operator * (double n) {return Point(x*n, y*n);}\n\tPoint operator / (double n) {return Point(x/n, y/n);}\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x*x + y*y; }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x!=p.x ? x<p.x : y<p.y;\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n\t\n};\nusing Vector = Point;\n\n//線分、直線\nclass Segment {\npublic:\n\tPoint p1,p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\nusing Line = Segment;\n\n//ベクトルの内積\ndouble dot(Vector a, Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n//ベクトルの外積\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\ndouble equals(double a,double b){ return fabs(a-b)<EPS; }\n//直交判定\nbool isOrthogonal(Vector a,Vector b){\n\treturn equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n\treturn isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1,Segment s2){\n\treturn equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n//平行判定\nbool isParallel(Vector a,Vector b){\n\treturn equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n\treturn isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1,Segment s2){\n\treturn equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n//射影\nPoint project(Segment s,Point p){\n\tVector base = s.p2-s.p1;\n\tdouble r = dot(p-s.p1, base)/base.norm();\n\treturn base*r + s.p1;\n}\n//反射\nPoint reflect(Segment s,Point p){\n\treturn p + (project(s,p)-p)*2;\n}\n\n//p0,p1,p2が反時計回りになる\nstatic const int COUNTER_CLOCKWISE = 1;\n//p0,p1,p2が時計回りになる\nstatic const int CLOCKWISE = -1;\n//p2,p0,p1がこの順で同一直線状にある\nstatic const int ONLINE_BACK = 2;\n//p0,p1,p2がこの順で同一直線状にある\nstatic const int ONLINE_FRONT = -2;\n//p2が線分p0p1上にある\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n\tVector a=p1-p0;\n\tVector b=p2-p0;\n\tif(cross(a,b)>EPS)return COUNTER_CLOCKWISE;\n\tif(cross(a,b)<-EPS)return CLOCKWISE;\n\tif(dot(a,b)<-EPS)return ONLINE_BACK;\n\tif(a.norm()<b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//線分p1p2と線分p3p4の交差判定\n//端点が他方の線分上にある場合、線分二つが平行に重なる場合も交差しているとみなす\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n\treturn (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 && ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\nbool intersect(Segment s1, Segment s2){\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n//二点間の距離\ndouble getDistance(Point a,Point b){\n\treturn (a-b).abs();\n}\n//点と直線の距離\ndouble getDistanceLP(Line l,Point p){\n\treturn fabs(cross(l.p2-l.p1, p-l.p1)) / (l.p2-l.p1).abs();\n}\n//点と線分の距離\ndouble getDistanceSP(Segment s,Point p){\n\tif(dot(s.p2-s.p1, p-s.p1)<0.)return (p-s.p1).abs();\n\tif(dot(s.p1-s.p2, p-s.p2)<0.)return (p-s.p2).abs();\n\treturn getDistanceLP(s,p);\n}\n//線分と線分の距離\ndouble getDistance(Segment s1,Segment s2){\n\tif(intersect(s1,s2))return 0.;\n\treturn min({getDistanceSP(s1,s2.p1), getDistanceSP(s1,s2.p2), getDistanceSP(s2,s1.p1), getDistanceSP(s2,s1.p2)});\n}\n\n//線分s1と線分s2の交点\nPoint getCrossPoint(Segment s1, Segment s2){\n\tVector base = s2.p2-s2.p1;\n\tdouble d1=fabs(cross(base, s1.p1-s2.p1));\n\tdouble d2=fabs(cross(base, s1.p2-s2.p1));\n\tdouble t=d1/(d1+d2);\n\treturn s1.p1+(s1.p2-s1.p1)*t;\n}\n\n//円\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c=Point(), double r=0.) : c(c), r(r) {}\n};\n////円cと線分lの交点の数を返す\nint hasCrossPoints(Circle c, Line l){\n\tdouble dis = getDistanceLP(l,c.c);\n\tif(equals(dis,c.r))return 1;\n\tif(dis < c.r)return 2;\n\treturn 0;\n}\n//円cと線分lの交点を返す\npair<Point,Point> getCrossPoints(Circle c, Line l){\n\tassert(getDistanceLP(l,c.c) < c.r+EPS);\n\tVector pr=project(l, c.c);\n\tVector e=(l.p2-l.p1)/(l.p2-l.p1).abs();\n\tdouble base=sqrt(c.r*c.r-(pr-c.c).norm());\n\treturn {pr+e*base, pr-e*base};\n}\n\ntypedef vector<Point> Polygon;\n//多角形gと点pの内包関係を返す\nstatic const int INSIDE = 2;\nstatic const int ONLINE = 1;\nstatic const int OUTSIDE = 0;\nll contains(Polygon &g, Point p){\n\tll n=g.size();\n\tbool x=false;\n\tfor(ll i=0; i<n; i++){\n\t\tPoint a=g[i]-p, b=g[(i+1)%n]-p;\n\t\tif(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return ONLINE;\n\t\tif(a.y > b.y) swap(a,b);\n\t\tif(a.y < EPS && EPS < b.y && cross(a,b) > EPS) x=!x;\n\t}\n\treturn (x ? INSIDE : OUTSIDE);\n}\n\n//点の集合sに対する凸包を返す\nPolygon andrewScan(Polygon s){\n\tPolygon u,l;\n\tif(s.size()<3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size()-1]);\n\tl.push_back(s[s.size()-2]);\n\n\tfor(ll i=2; i<(ll)s.size(); i++){\n\t\tfor(ll n=u.size(); n>=2 && ccw(u[n-2],u[n-1],s[i])!=CLOCKWISE; n--){\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor(ll i=s.size()-3; i>=0; i--){\n\t\tfor(ll n=l.size(); n>=2 && ccw(l[n-2],l[n-1],s[i])!=CLOCKWISE; n--){\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor(ll i=u.size()-2; i>=1; i--)l.push_back(u[i]);\n\n\treturn l;\n}\n\n\n//線分の集合sの交点の数を返す\nclass EndPoint {\npublic:\n\tPoint pnt;\n\tll seg,st; //入力線分のID, 端点の種類\n\tEndPoint() {}\n\tEndPoint(Point pnt, ll seg, ll st) : pnt(pnt), seg(seg), st(st) {}\n\n\tbool operator < (const EndPoint &ep) const {\n\t\tif(pnt.y == ep.pnt.y) return st < ep.st;\n\t\treturn pnt.y < ep.pnt.y;\n\t}\n};\nll manhattanIntersection(vector<Segment> &S){\n\tstatic const int BOTTOM = 0;\n\tstatic const int LEFT = 1;\n\tstatic const int RIGHT = 2;\n\tstatic const int TOP = 3;\n\tll n=S.size();\n\tvector<EndPoint> EP(2*n);\n\tfor(ll i=0,k=0; i<n; i++){\n\t\tif(S[i].p1.y==S[i].p2.y){\n\t\t\tif(S[i].p1.x>S[i].p2.x) swap(S[i].p1, S[i].p2);\n\t\t}else if(S[i].p1.y > S[i].p2.y){\n\t\t\tswap(S[i].p1, S[i].p2);\n\t\t}\n\n\t\tif(S[i].p1.y==S[i].p2.y){\n\t\t\tEP[k++]=EndPoint(S[i].p1, i, LEFT);\n\t\t\tEP[k++]=EndPoint(S[i].p2, i, RIGHT);\n\t\t}else{\n\t\t\tEP[k++]=EndPoint(S[i].p1, i, BOTTOM);\n\t\t\tEP[k++]=EndPoint(S[i].p2, i, TOP);\n\t\t}\n\t}\n\n\tsort(EP.begin(), EP.end());\n\n\tset<ll> BT;\n\tBT.insert(INF);\n\tll cnt=0;\n\tfor(ll i=0; i<2*n; i++){\n\t\tif(EP[i].st==TOP){\n\t\t\tBT.erase(EP[i].pnt.x);\n\t\t}else if(EP[i].st==BOTTOM){\n\t\t\tBT.erase(EP[i].pnt.x);\n\t\t}else if(EP[i].st==LEFT){\n\t\t\tauto b=BT.lower_bound(S[EP[i].seg].p1.x);\n\t\t\tauto e=BT.upper_bound(S[EP[i].seg].p2.x);\n\t\t\tcnt+=distance(b,e);\n\t\t}\n\t}\n\treturn cnt;\n}\n\n\n/*-----8<-----library-----8<-----*/\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja\nvoid CGL_2_A(){\n\tll N;\n\tcin>>N;\n\tvector<ll> ans(N,0);\n\trep(i,N){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tPoint p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n\t\tll t=0;\n\t\tif(isOrthogonal(p0,p1,p2,p3)){\n\t\t\tt=1;\n\t\t}else if(isParallel(p0,p1,p2,p3)){\n\t\t\tt=2;\n\t\t}\n\t\tans[i]=t;\n\t}\n\trep(i,N)p(ans[i]);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=ja\nvoid CGL_1_A(){\n\tdouble x0,y0,x1,y1;\n\tcin>>x0>>y0>>x1>>y1;\n\tLine l(Point(x0,y0),Point(x1,y1));\n\tll Q;\n\tcin>>Q;\n\tvector<Point> ans(Q,0);\n\trep(i,Q){\n\t\tdouble xq,yq;\n\t\tcin>>xq>>yq;\n\t\tPoint po(xq,yq);\n\t\tPoint t=project(l,po);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q){\n\t\tcout<<ans[i].x<<' '<<ans[i].y<<'\\n';\n\t}\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=ja\nvoid CGL_1_B(){\n\tdouble x0,y0,x1,y1;\n\tcin>>x0>>y0>>x1>>y1;\n\tLine l(Point(x0,y0),Point(x1,y1));\n\tll Q;\n\tcin>>Q;\n\tvector<Point> ans(Q,0);\n\trep(i,Q){\n\t\tdouble xq,yq;\n\t\tcin>>xq>>yq;\n\t\tPoint po(xq,yq);\n\t\tPoint t=reflect(l,po);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q){\n\t\tcout<<ans[i].x<<' '<<ans[i].y<<'\\n';\n\t}\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=ja\nvoid CGL_2_D(){\n\tll Q;\n\tcin>>Q;\n\tvector<double> ans(Q,0);\n\trep(i,Q){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tSegment s0(Point(x0,y0),Point(x1,y1)), s1(Point(x2,y2),Point(x3,y3));\n\t\tdouble t=getDistance(s0,s1);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q)p(ans[i]);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja\nvoid CGL_1_C(){\n\tdouble x0,y0,x1,y1;\n\tcin>>x0>>y0>>x1>>y1;\n\tPoint p0(x0,y0),p1(x1,y1);\n\tll Q;\n\tcin>>Q;\n\tvector<string> ans(Q,\"\");\n\tmap<ll,string> m;\n\tm[1]=\"COUNTER_CLOCKWISE\";\n\tm[-1]=\"CLOCKWISE\";\n\tm[2]=\"ONLINE_BACK\";\n\tm[-2]=\"ONLINE_FRONT\";\n\tm[0]=\"ON_SEGMENT\";\n\trep(i,Q){\n\t\tdouble xq,yq;\n\t\tcin>>xq>>yq;\n\t\tPoint pq(xq,yq);\n\t\tll t=ccw(p0,p1,pq);\n\t\tans[i]=m[t];\n\t}\n\trep(i,Q)p(ans[i]);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=ja\nvoid CGL_2_B(){\n\tll Q;\n\tcin>>Q;\n\tvector<ll> ans(Q,0);\n\trep(i,Q){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tPoint p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n\t\tbool t=intersect(p0,p1,p2,p3);\n\t\tans[i]=t ? 1 : 0;\n\t}\n\trep(i,Q)p(ans[i]);\t\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=ja\nvoid CGL_2_C(){\n\tll Q;\n\tcin>>Q;\n\tvector<Point> ans(Q,0);\n\trep(i,Q){\n\t\tdouble x0,y0,x1,y1,x2,y2,x3,y3;\n\t\tcin>>x0>>y0>>x1>>y1>>x2>>y2>>x3>>y3;\n\t\tPoint p0(x0,y0),p1(x1,y1),p2(x2,y2),p3(x3,y3);\n\t\tSegment s0(p0,p1),s1(p2,p3);\n\t\tPoint t=getCrossPoint(s0,s1);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q)p(ans[i].x,ans[i].y);\n}\n\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_D&lang=ja\nvoid CGL_7_D(){\n\tll cx,cy,r,Q;\n\tcin>>cx>>cy>>r>>Q;\n\tCircle c(Point(cx,cy),r);\n\tvector<pair<Point,Point>> ans(Q);\n\trep(i,Q){\n\t\tdouble x0,y0,x1,y1;\n\t\tcin>>x0>>y0>>x1>>y1;\n\t\tPoint p0(x0,y0),p1(x1,y1);\n\t\tLine l(p0,p1);\n\t\tll count=hasCrossPoints(c,l);\n\t\tif(count==0)exit(1);\n\t\tpair<Point,Point> t=getCrossPoints(c,l);\n\t\tif(t.first.x>t.second.x || (equals(t.first.x,t.second.x) && t.first.y>t.second.y))swap(t.first,t.second);\n\t\tans[i]=t;\n\t}\n\tcout.setf(ios::fixed), cout.precision(20);\n\trep(i,Q)p(ans[i].first.x, ans[i].first.y, ans[i].second.x, ans[i].second.y);\n}\n\nsigned main() {\n\t//CGL_2_A();\n\tCGL_1_A();\n\t//CGL_1_B();\n\t//CGL_2_D();\n\t//CGL_1_C();\n\t//CGL_2_B();\n\t//CGL_2_C();\n\t//CGL_7_D();\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\nint main(){\n\tdouble x0, y0, x1, y1, x, y, xt, yt;\n\tint i,q;\n\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tdouble l = sqrt((x1-x0)*(x1-x0)+(y1-y0)*(y1-y0));\n\t\n\tfor (cin >> q, i = 0; cin >> x >> y, i < q; ++i){\n\t\tdouble ang = atan2(y-y0,x-x0) - atan2(y1-y0,x1-x0);\n\t\tdouble t = sqrt((x-x0)*(x-x0)+(y-y0)*(y-y0)) * cos(ang);\n\t\t\n\t\txt = x0 + (x1-x0)*t/l;\n\t\tyt = y0 + (y1-y0)*t/l;\n\n\t\tcout << fixed << setprecision(10) << xt << \" \" << yt << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define all(vec) vec.begin(), vec.end()\n#define pb push_back\n#define eb emplace_back\nusing namespace std;\nusing ll = long long;\nusing P = pair<ll, ll>;\ntemplate <class T>\nusing V = vector<T>;\nconstexpr ll INF = (1LL << 30) - 1LL;\nconstexpr ll MOD = 1e9 + 7;\nconstexpr int dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};\ntemplate <class T>\nvoid chmin(T &a, T b) { a = min(a, b); }\ntemplate <class T>\nvoid chmax(T &a, T b) { a = max(a, b); }\nvoid ok() { cerr << \"ok\" << endl; }\nusing D = double;\nusing Point = complex<D>;\nconst D eps = 1e-40;\ninline int sgn(const D &a) { return (a < -eps) ? -1 : (a > eps) ? 1 : 0; }\ninline D cross(const Point &a, const Point &b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\ninline D dot(const Point &a, const Point &b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\nistream &operator>>(istream &is, Point &p) {\n    D a, b;\n    is >> a >> b;\n    p = Point(a, b);\n    return is;\n}\ninline int ccw(const Point &a, const Point &b, const Point &c) {\n    D d = cross(b - a, c - a);\n    if (sgn(d) > 0) {\n        return +1; //anti-clockwise\n    } else if (sgn(d) < 0) {\n        return -1; //clockwise\n    } else {\n        if (sgn(dot(b - a, c - a)) < 0) {\n            return -2;\n        } else if (sgn(dot(a - b, c - b)) < 0) {\n            return +2;\n        }\n    }\n    return 0;\n}\ninline Point projection(const Point &p, const Point &a, const Point &b) { //a to b\n    return p + (dot(a - p, b - p) / norm(a - p)) * (a - p);\n}\ninline Point reflection(const Point &p, const Point &a, const Point &b) {\n    return b + (projection(p, a, b) - (b - p)) * static_cast<D>(2.0);\n}\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(0);\n    Point p, a;\n    cin >> p >> a;\n    int q;\n    cin >> q;\n    while (q--) {\n        Point b;\n        cin >> b;\n        Point to = projection(p, a, b);\n        cout << fixed << setprecision(20) << to.real() << \" \" << to.imag() << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n//#include <boost/multiprecision/cpp_int.hpp>\n//using multiInt = boost::multiprecision::cpp_int;\n\nusing ll = long long int;\nusing ld = long double;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\ntemplate <typename Q_type>\nusing smaller_queue = priority_queue<Q_type, vector<Q_type>, greater<Q_type>>;\n\nconst int MOD_TYPE = 1;\nconst ll MOD = (MOD_TYPE == 1 ? (ll)(1e9 + 7) : 998244353);\nconst int INF = (int)1e9;\nconst ll LINF = (ll)4e18;\nconst ld PI = acos(-1.0);\nconst ld EPS = 1e-11;\n\n#define REP(i, m, n) for (ll i = m; i < (ll)(n); ++i)\n#define rep(i, n) REP(i, 0, n)\n#define MP make_pair\n#define MT make_tuple\n#define YES(n) cout << ((n) ? \"YES\" : \"NO\") << endl\n#define Yes(n) cout << ((n) ? \"Yes\" : \"No\") << endl\n#define Possible(n) cout << ((n) ? \"Possible\" : \"Impossible\") << endl\n#define possible(n) cout << ((n) ? \"possible\" : \"impossible\") << endl\n#define Yay(n) cout << ((n) ? \"Yay!\" : \":(\") << endl\n#define all(v) v.begin(), v.end()\n#define NP(v) next_permutation(all(v))\n#define dbg(x) cerr << #x << \":\" << x << endl;\n\nvector<int> Dx = {0, 0, -1, 1, -1, 1, -1, 1, 0};\nvector<int> Dy = {1, -1, 0, 0, -1, -1, 1, 1, 0};\n\nstruct point_t\n{\n  ld x, y;\n  int exception = 0;\n\n  inline void display()\n  {\n    if (exception == 0)\n      cout << \"(\" << x << \", \" << y << \")\\n\";\n    else\n      cout << \"exception:\" << exception << \"\\n\";\n  }\n};\n\nstruct line_t\n{\n  ld a, b, c;\n  int exception = 0;\n\n  inline void display()\n  {\n    if (exception == 0)\n      cout << a << 'x'\n           << (b < 0 ? \"\" : \"+\") << b << \"y\"\n           << (c < 0 ? \"\" : \"+\") << c << \"=0\\n\";\n    else\n      cout << \"exception:\" << exception << \"\\n\";\n  }\n};\n\ninline bool Same(point_t &p1, point_t &p2)\n{\n  return (abs(p1.x - p2.x) < EPS && abs(p1.y - p2.y) < EPS);\n}\n\nbool Same(line_t &l1, line_t &l2)\n{\n  bool b1 = abs(l1.a * l2.b - l1.b * l2.a) < EPS;\n  bool b2 = abs(l1.b * l2.c - l1.c * l2.b) < EPS;\n  bool b3 = abs(l1.c * l2.a - l1.a * l2.c) < EPS;\n  return b1 && b2 && b3;\n}\n\ninline bool OnLine(point_t &p, line_t &l)\n{\n  return abs(l.a * p.x + l.b * p.y + l.c) < EPS;\n}\n\ninline bool Parallel(line_t &l1, line_t &l2)\n{\n  return abs(l1.a * l2.b - l1.b * l2.a) < EPS;\n}\n\n//2点を通る直線の方程式\n//p1 = p2の場合はexception = 1\nline_t Line2p(point_t &p1, point_t &p2)\n{\n  if (Same(p1, p2))\n    return line_t{0, 0, 0, 1};\n  line_t res;\n  res.a = (p2.y - p1.y);\n  res.b = (p1.x - p2.x);\n  res.c = (p2.x - p1.x) * p1.y - (p2.y - p1.y) * p1.x;\n  return res;\n}\n\n//2直線の交点\n//2直線が一致する場合はexception = 1\n//交わらない場合はexception = 2\npoint_t LineIntersection(line_t &l1, line_t &l2)\n{\n  if (Parallel(l1, l2))\n    return Same(l1, l2) ? point_t{0, 0, 1} : point_t{0, 0, 2};\n  point_t res;\n  res.x = (l1.b * l2.c - l1.c * l2.b) / (l1.a * l2.b - l1.b * l2.a);\n  res.y = (l1.a * l2.c - l1.c * l2.a) / (l1.b * l2.a - l1.a * l2.b);\n  return res;\n}\n\n//pからlに下ろした垂線\n//pがl上にある場合はexception = 1\nline_t VerticalLine(point_t &p, line_t &l)\n{\n  if (OnLine(p, l))\n    return line_t{0, 0, 0, 1};\n  line_t res;\n  res.a = l.b;\n  res.b = -l.a;\n  res.c = l.a * p.y - l.b * p.x;\n  return res;\n}\n\nint main()\n{\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  cout << setprecision(30) << setiosflags(ios::fixed);\n\n  point_t p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  line_t l1 = Line2p(p1, p2);\n  int q;\n  cin >> q;\n  rep(qi, q)\n  {\n    point_t p3;\n    cin >> p3.x >> p3.y;\n    line_t l2 = VerticalLine(p3, l1);\n    point_t p = LineIntersection(l1, l2);\n    if (p.exception == 1)\n      cout << p3.x << \" \" << p3.y << endl;\n    else\n      cout << p.x << \" \" << p.y << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing lint     = long long;\nconst lint inf = 1LL << 60;\nconst lint mod = 1000000007;\n\nconst double eps = 1e-10;\ninline bool eq(double a, double b) { return fabs(a - b) < eps; }\nconst double pi = acos(-1);\n\nstruct Point {\n    double x, y;\n    Point() {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) { return Point(x * k, y * k); }\n    Point operator/(double k) { return Point(x / k, y / k); }\n};\nPoint rotate(double theta, const Point &p) {\n    return Point(cos(theta) * p.x - sin(theta) * p.y, sin(theta) * p.x + cos(theta) * p.y);\n}\ndouble radian_to_degree(double r) { return (r * 180.0 / pi); }\ndouble degree_to_radian(double d) { return (d * pi / 180.0); }\n\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(Point a, Point b) : a(a), b(b) {}\n    Line(double A, double B, double C) { // Ax + By = C\n        if (eq(A, 0))\n            a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0))\n            a = Point(C / A, 0), b = Point(C / A, 1);\n        else\n            a = Point(0, C / B), b = Point(C / A, 0);\n    }\n};\n\nstruct Circle {\n    Point p;\n    double r;\n    Circle() {}\n    Circle(Point p, double r) : p(p), r(r) {}\n};\ndouble norm(const Point &a) { return a.x * a.x + a.y * a.y; }\ndouble abs(const Point &a) { return sqrt(norm(a)); }\ndouble cross(const Point &a, const Point &b) { return a.x * b.y - a.y * b.x; }\ndouble dot(const Point &a, const Point &b) { return a.x * b.x + a.y * b.y; }\n\nPoint projection(Line l, Point p) {\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\nPoint reflect(Line l, Point p) { return p + (projection(l, p) - p) * 2; }\n\nint main() {\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Line base(p1, p2);\n    int q;\n    cin >> q;\n    vector<Point> r(q);\n    for (int i = 0; i < q; ++i) {\n        cin >> r[i].x >> r[i].y;\n    }\n    cout << fixed << setprecision(10);\n    for (int i = 0; i < q; ++i) {\n        Point ret = projection(base, r[i]);\n        cout << ret.x << \" \" << ret.y << \"\\n\";\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n;\ndouble getCos(Vector a, Vector b){\n    printf(\"%f\\n\", dot(a, b) / (a.abs() * b.abs()));\n    return dot(a, b) / (a.abs() * b.abs());\n}\n\ndouble dist(Point p1, Point p2){\n    return sqrt(pow((p1.x - p2.x), 2) + pow((p1.y - p2.y), 2));\n}\n\nPoint projection(Point p1, Point p2, Point p0){\n    return p1 + (p2 - p1) / (p2 - p1).abs() * (p0 - p1).abs() * getCos(p2 - p1, p0 - p1);\n}\n\nint main(){\n    int xp1, yp1, xp2, yp2;\n    scanf(\"%d\", &xp1);\n    scanf(\"%d\", &yp1);\n    scanf(\"%d\", &xp2);\n    scanf(\"%d\", &yp2);\n\n    Point p1 = Point(xp1, yp1);\n    Point p2 = Point(xp2, yp2);\n\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n\n        Point p = projection(p1, p2, Point(xp0, yp0));\n        printf(\"%.10f %.10f\\n\", p.x, p.y);\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nstruct dot{\n\tdouble x,y;\n\tdouble len(){return sqrt(x*x+y*y);}\n\tdot(double a=0.0,double b=0.0){x=a,y=b;}\n\tdot operator +(const dot&b)const {return dot(x+b.x,y+b.y);}\n\tdot operator -(const dot&b)const {return dot(x-b.x,y-b.y);}\n\tdot operator *(const double&z)const {return dot(x*z,y*z);}\n\tbool operator <(const dot&b)const {return (x<b.x)||(x==b.x&&y<b.y);}\n};\nstruct line{\n\tdot x1,x2;\n};\ndouble chaji(dot x,dot y){\n\treturn x.x*y.y-x.y*y.x;\n}\ndouble neiji(dot x,dot y){\n\treturn x.x*y.x+x.y*y.y;\n}\ndouble cos(dot x,dot y){\n\tif (!x.len()||!y.len())return 0;\n\treturn neiji(x,y)/x.len()/y.len();\n}\ndot Projection(dot x,line y){//求x关于直线y的投影点（垂足） \n\ty.x2=y.x2-y.x1;\n\tx=x-y.x1;\n\tdouble len=cos(x,y.x2)*x.len()/y.x2.len();\n\ty.x2=y.x2*len;\n\treturn y.x2+y.x1;\n}\nint main(){\n\tline x;int T;\n\tscanf(\"%lf%lf%lf%lf\",&x.x1.x,&x.x1.y,&x.x2.x,&x.x2.y);\n\tscanf(\"%d\",&T);\n\twhile (T--){\n\t\tdot y;\n\t\tscanf(\"%lf%lf\",&y.x,&y.y);\n\t\tdot ans=Projection(y,x);\n\t\tprintf(\"%.10lf %.10lf\\n\",ans.x,ans.y);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "type Vector a = (a, a)\nadd :: (Floating a) => Vector a -> Vector a -> Vector a\nadd (vx,vy) (wx,wy) = (vx+wx,vy+wy)\n\nneg :: (Floating a) => Vector a -> Vector a\nneg (x,y) = (-x,-y)\n\ndotprod :: (Floating a) => Vector a -> Vector a -> a\ndotprod (vx,vy) (wx,wy) = vx*wx + vy*wy\n\nsprod :: (Floating a) => a -> Vector a -> Vector a\nsprod c (x,y) = (c*x, c*y)\n\nnorm :: (Floating a) => Vector a -> a\nnorm (x,y) = x**2 + y**2\n\npshow :: (Show a) => Vector a -> String\npshow (x,y) = show x ++ ' ':show y\n\nv = (1,2) :: Vector Float\nw = (3,0) :: Vector Float\n\nmain = do\n    [ax,ay,bx,by] <- map read . words `fmap` getLine :: IO [Float]\n    let (a,b) = ((ax,ay),(bx,by)) :: (Vector Float, Vector Float)\n    q <- read `fmap` getLine :: IO Int\n    points <- sequence (take q (repeat ((\\[x,y] -> (x,y)) . map read . words `fmap` getLine))) :: IO [Vector Float]\n    mapM (putStrLn . pshow) $ solve a b points\n\nsolve :: (Floating a) => Vector a -> Vector a -> [Vector a] -> [Vector a]\nsolve va vb = map (intersection va vb)\n\nintersection :: (Floating a) => Vector a -> Vector a -> Vector a -> Vector a\nintersection a b p = a `add` (sprod coeff b_a)\n    where b_a = add b (neg a)\n          p_a = add p (neg a)\n          coeff = dotprod b_a p_a / norm b_a\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define mp make_pair\n#define pb push_back\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n\treturn a < -EPS ? -1 : a > EPS;\n}\n\ninline int cmp(db a, db b){\n\treturn sign(a-b);\n}\n\nstruct P {\n\tdb x, y;\n\tP() {}\n\tP(db _x, db _y) : x(_x), y(_y) {}\n\tP operator+(P p) { return P(x + p.x, y + p.y); }\n\tP operator-(P p) { return P(x - p.x, y - p.y); }\n\tP operator*(db d) { return P(x * d, y * d); }\n\tP operator/(db d) { return P(x / d, y / d); }\n\tbool operator<(P p) const {\n\t\tint c = cmp(x, p.x);\n\t\tif (c) return c == -1;\n\t\treturn cmp(y, p.y) == -1;\n\t}\n\tdb dot(P p) { return x * p.x + y * p.y; }\n\tdb det(P p) { return x * p.y - y * p.x; }\n\tdb distTo(P p) { return (*this-p).abs(); }\n\tdb alpha() { return atan2(y, x); }\n\tvoid read() { cin>>x>>y; }\n\tdb abs() { return sqrt(abs2());}\n\tdb abs2() { return x * x + y * y; }\n\tP rot90() { return P(-y,x);}\n\tP unit() { return *this/abs(); }\n    int quad() const { return sign(y) == 1 || (sign(y) == 0 && sign(x) >= 0); }\n};\n\nstruct L{ //ps[0] -> ps[1]\n\tP ps[2];\n\tP& operator[](int i) { return ps[i]; }\n\tP dir() { return ps[1] - ps[0]; }\n \tbool include(P p) { return sign((ps[1] - ps[0]).det(p - ps[0])) > 0; }\n \tL push(){ // push eps outward\n \t\tconst double eps = 1e-6;\n \t\tP delta = (ps[1] - ps[0]).rot90().unit() * eps;\n \t\treturn {ps[0] - delta, ps[1] - delta};\n \t}\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isLL(P p1, P p2, P q1, P q2) {\n\tdb a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n\treturn (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nP isLL(L l1,L l2){ return isLL(l1[0],l1[1],l2[0],l2[1]); }\n\nbool intersect(db l1,db r1,db l2,db r2){\n\tif(l1>r1) swap(l1,r1); if(l2>r2) swap(l2,r2);\n\treturn !( cmp(r1,l2) == -1 || cmp(r2,l1) == -1 );\n}\n\nbool isSS(P p1, P p2, P q1, P q2){\n    return intersect(p1.x,p2.x,q1.x,q2.x) && intersect(p1.y,p2.y,q1.y,q2.y) &&\n    crossOp(p1,p2,q1) * crossOp(p1,p2,q2) <= 0 && crossOp(q1,q2,p1)\n            * crossOp(q1,q2,p2) <= 0;\n}\n\nbool isMiddle(db a, db m, db b) {\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n\nbool isMiddle(P a, P m, P b) {\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nbool onSeg(P p1, P p2, P q){\n\treturn crossOp(p1,p2,q) == 0 && isMiddle(p1, q, p2);\n}\n\nP proj(P p1, P p2, P q) {\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\n\nP reflect(P p1, P p2, P q){\n\treturn proj(p1,p2,q) * 2 - q;\n}\n\ndb nearest(P p1,P p2,P q){\n\tP h = proj(p1,p2,q);\n\tif(isMiddle(p1,h,p2))\n\t\treturn q.distTo(h);\n\treturn min(p1.distTo(q),p2.distTo(q));\n}\n\ndb disSS(P p1, P p2, P q1, P q2){\n\tif(isSS(p1,p2,q1,q2)) return 0;\n\treturn min(min(nearest(p1,p2,q1),nearest(p1,p2,q2)), min(nearest(q1,q2,p1),nearest(q1,q2,p2)) );\n}\n\ndb rad(P p1,P p2){\n\treturn atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n\tdb A = p1.distTo(p2);\n\tdb B = p2.distTo(p3);\n\tdb C = p3.distTo(p1);\n\treturn sqrtl(A*B*C/(A+B+C));\n}\n\n//polygon\n\ndb area(vector<P> ps){\n\tdb ret = 0; rep(i,0,ps.size()) ret += ps[i].det(ps[(i+1)%ps.size()]);\n\treturn abs(ret/2);\n}\n\nint contain(vector<P> ps, P p){ //2:inside,1:on_seg,0:outside\n\tint n = ps.size(), ret = 0;\n\trep(i,0,n){\n\t\tP u=ps[i],v=ps[(i+1)%n];\n\t\tif(onSeg(u,v,p)) return 1;\n\t\tif(cmp(u.y,v.y)<=0) swap(u,v);\n\t\tif(cmp(p.y,u.y) >0 || cmp(p.y,v.y) <= 0) continue;\n\t\tret ^= crossOp(p,u,v) > 0;\n\t}\n\treturn ret*2;\n}\n\nvector<P> convexHull(vector<P> ps) {\n    int n = ps.size(); if(n <= 1) return ps;\n    sort(ps.begin(), ps.end());\n    vector<P> qs(n * 2); int k = 0;\n    for (int i = 0; i < n; qs[k++] = ps[i++])\n        while (k > 1 && crossOp(qs[k - 2], qs[k - 1], ps[i]) <= 0) --k;\n    for (int i = n - 2, t = k; i >= 0; qs[k++] = ps[i--])\n       \twhile (k > t && crossOp(qs[k - 2], qs[k - 1], ps[i]) <= 0) --k;\n    qs.resize(k - 1);\n    return qs;\n}\n\nvector<P> convexHullNonStrict(vector<P> ps) {\n\t//caution: need to unique the Ps first\n    int n = ps.size(); if(n <= 1) return ps;\n    sort(ps.begin(), ps.end());\n    vector<P> qs(n * 2); int k = 0;\n    for (int i = 0; i < n; qs[k++] = ps[i++])\n        while (k > 1 && crossOp(qs[k - 2], qs[k - 1], ps[i]) < 0) --k;\n    for (int i = n - 2, t = k; i >= 0; qs[k++] = ps[i--])\n       \twhile (k > t && crossOp(qs[k - 2], qs[k - 1], ps[i]) < 0) --k;\n    qs.resize(k - 1);\n    return qs;\n}\n\ndb convexDiameter(vector<P> ps){\n\tint n = ps.size(); if(n <= 1) return 0;\n\tint is = 0, js = 0; rep(k,1,n) is = ps[k]<ps[is]?k:is, js = ps[js] < ps[k]?k:js;\n\tint i = is, j = js;\n\tdb ret = ps[i].distTo(ps[j]);\n\tdo{\n\t\tif((ps[(i+1)%n]-ps[i]).det(ps[(j+1)%n]-ps[j]) >= 0)\n\t\t\t(++j)%=n;\n\t\telse\n\t\t\t(++i)%=n;\n\t\tret = max(ret,ps[i].distTo(ps[j]));\n\t}while(i!=is || j!=js);\n\treturn ret;\n}\n\nvector<P> convexCut(const vector<P>&ps, P q1, P q2) {\n\tvector<P> qs;\n\tint n = ps.size();\n\trep(i,0,n){\n\t\tP p1 = ps[i], p2 = ps[(i+1)%n];\n\t\tint d1 = crossOp(q1,q2,p1), d2 = crossOp(q1,q2,p2);\n\t\tif(d1 >= 0) qs.pb(p1);\n\t\tif(d1 * d2 < 0) qs.pb(isLL(p1,p2,q1,q2));\n\t}\n\treturn qs;\n}\n\n//min_dist\n\ndb min_dist(vector<P>&ps,int l,int r){\n\tif(r-l<=5){\n\t\tdb ret = 1e100;\n\t\trep(i,l,r) rep(j,l,i) ret = min(ret,ps[i].distTo(ps[j]));\n\t\treturn ret;\n\t}\n\tint m = (l+r)>>1;\n\tdb ret = min(min_dist(ps,l,m),min_dist(ps,m,r));\n\tvector<P> qs; rep(i,l,r) if(abs(ps[i].x-ps[m].x)<= ret) qs.pb(ps[i]);\n\tsort(qs.begin(), qs.end(),[](P a,P b) -> bool {return a.y<b.y; });\n\trep(i,1,qs.size()) for(int j=i-1;j>=0&&qs[j].y>=qs[i].y-ret;--j) ret = min(ret,qs[i].distTo(qs[j]));\n\treturn ret;\n}\n\nint type(P o1,db r1,P o2,db r2){\n\tdb d = o1.distTo(o2);\n\tif(cmp(d,r1+r2) == 1) return 4;\n\tif(cmp(d,r1+r2) == 0) return 3;\n\tif(cmp(d,abs(r1-r2)) == 1) return 2;\n\tif(cmp(d,abs(r1-r2)) == 0) return 1;\n\treturn 0;\n}\n\nvector<P> isCL(P o,db r,P p1,P p2){\n\tdb x = (p1-o).dot(p2-p1), y = (p2-p1).abs2(), d = x * x - y * ((p1-o).abs2() - r*r);\n\tif(sign(d) < 0) return {};\n\td = max(d,0.0); P m = p1 - (p2-p1)*(x/y), dr = (p2-p1)*(sqrt(d)/y);\n\treturn {m-dr,m+dr}; //along dir: p1->p2\n}\n\nvector<P> isCC(P o1, db r1, P o2, db r2) { //need to check whether two circles are the same\n\tdb d = o1.distTo(o2);\n\tif (cmp(d, r1 + r2) == 1) return {};\n\td = min(d, r1 + r2);\n\tdb y = (r1 * r1 + d * d - r2 * r2) / (2 * d), x = sqrt(r1 * r1 - y * y);\n\tP dr = (o2 - o1).unit();\n\tP q1 = o1 + dr * y, q2 = dr.rot90() * x;\n\treturn {q1-q2,q1+q2};//along circle 1\n}\n\nvector<P> tanCP(P o, db r, P p) {\n\tdb x = (p - o).abs2(), d = x - r * r;\n\tif (sign(d) <= 0) return {}; // on circle => no tangent\n\tP q1 = o + (p - o) * (r * r / x);\n\tP q2 = (p - o).rot90() * (r * sqrt(d) / x);\n\treturn {q1-q2,q1+q2}; //counter clock-wise\n}\n\n\nvector<L> extanCC(P o1, db r1, P o2, db r2) {\n\tvector<L> ret;\n\tif (cmp(r1, r2) == 0) {\n\t\tP dr = (o2 - o1).unit().rot90() * r1;\n\t\tret.pb({o1 + dr, o2 + dr}), ret.pb({o1 - dr, o2 - dr});\n\t} else {\n\t\tP p = (o2 * r1 - o1 * r2) / (r1 - r2);\n\t\tvector<P> ps = tanCP(o1, r1, p), qs = tanCP(o2, r2, p);\n\t\trep(i,0,min(ps.size(),qs.size())) ret.pb({ps[i], qs[i]}); //c1 counter-clock wise\n\t}\n\treturn ret;\n}\n\nvector<L> intanCC(P o1, db r1, P o2, db r2) {\n\tvector<L> ret;\n \tP p = (o1 * r2 + o2 * r1) / (r1 + r2);\n \tvector<P> ps = tanCP(o1,r1,p), qs = tanCP(o2,r2,p);\n\trep(i,0,min(ps.size(),qs.size())) ret.pb({ps[i], qs[i]}); //c1 counter-clock wise\n\treturn ret;\n}\n\ndb areaCT(db r, P p1, P p2){\n\tvector<P> is = isCL(P(0,0),r,p1,p2);\n\tif(is.empty()) return r*r*rad(p1,p2)/2;\n\tbool b1 = cmp(p1.abs2(),r*r) == 1, b2 = cmp(p2.abs2(), r*r) == 1;\n\tif(b1 && b2){\n\t\tif(sign((p1-is[0]).dot(p2-is[0])) <= 0 &&\n\t\t\tsign((p1-is[0]).dot(p2-is[0])) <= 0)\n\t\treturn r*r*(rad(p1,is[0]) + rad(is[1],p2))/2 + is[0].det(is[1])/2;\n\t\telse return r*r*rad(p1,p2)/2;\n\t}\n\tif(b1) return (r*r*rad(p1,is[0]) + is[0].det(p2))/2;\n\tif(b2) return (p1.det(is[1]) + r*r*rad(is[1],p2))/2;\n\treturn p1.det(p2)/2;\n}\n\nbool parallel(L l0, L l1) { return sign( l0.dir().det( l1.dir() ) ) == 0; }\n\nbool sameDir(L l0, L l1) { return parallel(l0, l1) && sign(l0.dir().dot(l1.dir()) ) == 1; }\n\nbool cmp (P a,  P b) {\n\tif (a.quad() != b.quad()) {\n\t\treturn a.quad() < b.quad();\n\t} else {\n\t\treturn sign( a.det(b) ) > 0;\n\t}\n}\n\nbool operator < (L l0, L l1) {\n\tif (sameDir(l0, l1)) {\n\t\treturn l1.include(l0[0]);\n\t} else {\n\t\treturn cmp( l0.dir(), l1.dir() );\n\t}\n}\n\nbool check(L u, L v, L w) {\n\treturn w.include(isLL(u,v));\n}\n\nvector<P> halfPlaneIS(vector<L> &l) {\n\tsort(l.begin(), l.end());\n\tdeque<L> q;\n\tfor (int i = 0; i < (int)l.size(); ++i) {\n \t\tif (i && sameDir(l[i], l[i - 1])) continue;\n \t\twhile (q.size() > 1 && !check(q[q.size() - 2], q[q.size() - 1], l[i])) q.pop_back();\n \t\twhile (q.size() > 1 && !check(q[1], q[0], l[i])) q.pop_front();\n \t\tq.push_back(l[i]);\n \t}\n\twhile (q.size() > 2 && !check(q[q.size() - 2], q[q.size() - 1], q[0])) q.pop_back();\n\twhile (q.size() > 2 && !check(q[1], q[0], q[q.size() - 1])) q.pop_front();\n\tvector<P> ret;\n\tfor (int i = 0; i < (int)q.size(); ++i) ret.push_back(isLL(q[i], q[(i + 1) % q.size()]));\n\treturn ret;\n}\n\nint main(){\n\tP p1(0,0),p2(0,0);\n\tp1.read(),p2.read();\n\tint q;\n\tcin >> q;\n\twhile(q--){\n\t\tP p3(0,0);\n\t\tp3.read();\n\t\tp3 = proj(p1,p2,p3);\n\t\tprintf(\"%.10lf %.10lf\\n\",p3.x,p3.y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\ntypedef double D;\n\nstruct P {\n    D x, y;\n    P(D x, D y) : x(x), y(y) { }\n    P() { }\n};\n\n\nP operator +(P a, P b) {\n    a.x += b.x, a.y += b.y;\n    return a;\n}\n\nP operator -(P a, P b) {\n    a.x -= b.x, a.y -= b.y;\n    return a;\n}\n\n// ???????????????\nP operator *(P p, D s) {\n    p.x *= s, p.y *= s;\n    return p;\n}\n\nD inp(P a, P b) {\n    return a.x*b.x + a.y*b.y;\n}\n\nD norm(P p) {\n    return inp(p, p);\n}\n\nstruct L : vector<P> {\n    L(P a, P b) {\n        this->push_back(a);\n        this->push_back(b);\n    }\n\n    L() {\n        this->resize(2);\n    }\n};\n\n// abs???????????????norm??????\nP projection(L l, P p) {\n    P a = l[1] - l[0];\n    P b = p - l[0];\n    double t = inp(b, a) / norm(a);\n    return l[0] + a * t;\n}\n\nint main() {\n    double x, y;\n\n    cin >> x >> y;\n    P p0(x, y);\n\n    cin >> x >> y;\n    P p1(x, y);\n\n    L l(p0, p1);\n\n    int Q; cin >> Q;\n    while(Q--) {\n        cin >> x >> y;\n        P p2(x, y);\n        P p = projection(l, p2);\n        printf(\"%.10f %.10f\\n\", p.x, p.y);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define Int int64_t\n#define dump(x) cout << (x) << endl\n#define fi first\n#define se second\nInt mod = 1e9+7;\nInt INF = 1e18;\n//Int mod = 1e6+3;\n\nint main() {\n    double ax, ay, bx, by;\n    cin >> ax >> ay >> bx >> by;\n    complex<double> a(ax, ay), b(bx, by);\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        double px, py;\n        cin >> px >> py;\n        complex<double> p(px, py);\n        complex<double> ap = p - a;\n        complex<double> ab = b - a;\n        complex<double> ev = ab / abs(ab);\n        ap = ap / ev;\n        complex<double> res(real(ap), 0.0);\n        res = res * ev + a;\n        printf(\"%.12lf %.12lf\\n\", real(res), imag(res));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <cmath>\n#include <cstdio>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nint main() {\n    using namespace std;\n\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Segment s{p1, p2};\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        double x, y;\n        cin >> x >> y;\n        auto p = projection(s, Point{x, y});\n        cout << setprecision(20) << p.x << \" \" << p.y << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\nclass Point{\npublic:\n\tdouble x;\n\tdouble y;\n\tPoint(double x=0,double y=0) :x(x),y(y){ }\n\tPoint operator +(Point &p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator-(Point &p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(double a) {\n\t\treturn Point(x*a, y*a);\n\t}\n};\n\ntypedef struct {\n\tPoint p1, p2;\n}Line;\n\nint main() {\n\tLine s;\n\tcin >> s.p1.x; cin >> s.p1.y; cin >> s.p2.x; cin >> s.p2.y;\n\tdouble q;\n\tcin >> q;\n\tfor (double i = 0;i < q;i++) {\n\t\tPoint p,q;\n\t\tcin >> p.x; cin >> p.y;\n\t\tdouble prod = ((s.p2.x - s.p1.x)*(p.x - s.p1.x)) + ((s.p2.y - s.p1.y)*(p.y - s.p1.y));\n\t\tq = s.p1 +(s.p2 - s.p1)*(prod/((s.p1.x-s.p2.x)*(s.p1.x - s.p2.x)+ (s.p1.y - s.p2.y)*(s.p1.y - s.p2.y)));\n\t\tcout << q.x << \" \" << q.y << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct F {\n\tlong long a, b;\n\tF() {}\n\tF(long long _a, long long _b) : a(_a), b(_b) {}\n\tF operator + (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.a + a * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator - (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.a - a * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator * (const F &f) {\n\t\tlong long x = a * f.a, y = b * f.b;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n\tF operator / (const F &f) {\n\t\tlong long x = a * f.b, y = b * f.a;\n\t\tlong long g = __gcd(x, y);\n\t\treturn F(x / g, y / g);\n\t}\n};\nconst double pi = acos(-1);\nconst double eps = 1e-8;\ninline int sign(double a) {\n\treturn a < -eps ? -1 : a > eps;\n}\ninline int cmp(double a, double b) {\n\treturn sign(a - b);\n}\ndouble add(double a, double b) {\n\tif (abs(a + b) < eps * (abs(a) + abs(b))) return 0;\n\treturn a + b;\n}\nstruct P {\n\tdouble x, y;\n\tP() {}\n\tP(double x, double y) : x(x), y(y) {}\n\tP operator + (const P &p) { return P(add(x, p.x), add(y, p.y)); }\n\tP operator - (const P &p) { return P(add(x, -p.x), add(y, -p.y)); }\n\tP operator * (double d) { return P(x * d, y * d); }\n\tP operator / (double d) { return P(x / d, y / d); }\n\tdouble dot(const P &p) { return add(x * p.x, y * p.y); }\n\tdouble det(const P &p) { return add(x * p.y, -y * p.x); }\n\tdouble alpha() { return atan2(y, x); }\n\tdouble abs() { return sqrt(abs2()); }\n\tdouble abs2() { return x * x + y * y; }\n\tP rot90() { P(-y, x); }\n\tP unit() { return *this / abs(); }\n\tbool operator < (P p) const {\n\t\tint c = cmp(x, p.x);\n\t\tif (c) return c == -1;\n\t\treturn cmp(y, p.y) == -1;\n\t}\n\tfriend istream& operator>>(istream &in, P &p) {\n\t\tin >> p.x >> p.y;\n\t\treturn in;\n\t}\n\tfriend ostream& operator<<(ostream& out, P &p) {\n\t\tout << p.x << ' ' << p.y;\n\t\treturn out;\n\t}\n};\nP projection(P p1, P p2, P q) {\n\tP dir = p2 - p1;\n\treturn p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\ndouble dist(const P &a, const P &b) {\n\tdouble x = a.x - b.x, y = a.y - b.y;\n\treturn sqrt(x * x + y * y);\n}\nbool on_seg(P p1, P p2, P q) {\n\treturn (p1 - q).det(p2 - q) == 0 && (p1 - q).dot(p2 - q) <= 0;\n}\nP intersection(P p1, P p2, P q1, P q2) {\n\treturn p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n}\n\nint main() {\n#ifdef LOCAL_DEFINE\n\t//freopen(\"data.in\", \"rt\", stdin);\n\t//freopen(\"data.out\", \"w\", stdout);\n\tauto _start = chrono::high_resolution_clock::now();\n#endif\n\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout << fixed << setprecision(15);\n\tP p1, p2;\n\tcin >> p1 >> p2;\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tP p;\n\t\tcin >> p;\n\t\tP ans = projection(p1, p2, p);\n\t\tcout << ans << '\\n';\n\t}\n\n#ifdef LOCAL_DEFINE\n\tauto _end = chrono::high_resolution_clock::now();\n\tcerr << \"elapsed time: \" << chrono::duration<double, milli>(_end - _start).count() << \" ms\\n\";\n#endif\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cassert>\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) FOR(i,0,n)\n#define rep(i,n) FOR(i,0,n)\n#define DEBUG(x) cout<<#x<<\": \"<<x<<endl\n#define vint vector<int>\n#define vdouble vector<double>\n#define vstring vector<string>\nusing namespace std;\n\n#include<map>\n#include<set>\n#include<queue>\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nconst int MAX_N = 1000000;\nconst int INFTY = (1 << 21); // 2097152\n// const ll INFTY = (1LL << 60);\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x=0, double y=0):x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a){ return Point(a * x, a * y); }\n\tPoint operator / (double a){ return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y;}\n\tbool operator < (const Point &p) const {\n\t\t// first x, second y\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nstruct Segment{\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2){\n\t\tthis->p1 = p1;\n\t\tthis->p2 = p2;\n\t}\n};\n\n// ??????\ndouble dot(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.x + a.y * b.y;\n}\n\n// ??????\ndouble cross(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// ??´?????????\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1- b2);\n}\n\n// ????????????\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1- b2);\n}\n\n// ???p????????????s???????????????????????????\nPoint project(Segment s, Point p){\n\t// ??\\??????????????????\n\t// hypo -> p - p1, base -> p2 - p1\n\t// t = |hypo|cos??\n\t// cos?? = dot(hypo,base)/|hypo||base|\n\t// project = s.p1 + base/|base| * t\n\tVector hypo = p - s.p1;\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(hypo, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\n// ???p????????????s???????§°?????¨?????????\nPoint reflection(Segment s, Point p){\n\tPoint pr = project(s, p);\n\treturn p + (pr - p) * 2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n// p0??????p1????????????????????????????????????p2?????????\nint ccw(Point p0, Point p1, Point p2){\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif( cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif( cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a,b) <-EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// ????????????????????? ??????p1->p2, p3->p4\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n// ?????????????????????\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// ???????????????\nPoint crosspoint(Segment s1, Segment s2){\n\t// s1.p1??????s2???????????????????????????d1\n\t// s1.p2??????s2???????????????????????????d2??¨????????¨???\n\t// ?????????s1???d1/(d1+d2)?????????????????¨??????\n\tVector base = s2.p2 - s2.p1;\n\tVector hypo1 = s1.p1 - s2.p1;\n\tVector hypo2 = s1.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, hypo1)) / base.abs();\n\tdouble d2 = abs(cross(base, hypo2)) / base.abs();\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n// ???????????¢\ndouble distance(Point a, Point b){\n\treturn (a - b).abs();\n}\n\n// ?????¨??´???????????¢\ndouble distanceLinePoint(Segment s, Point p){\n\t// sin?? = |cross(hypo, base)|/|hypo||base|\n\t// distance = |hypo|sin?? = |cross(hypo, base)|/|base|\n\tVector hypo = p - s.p1;\n\tVector base = s.p2 - s.p1;\n\treturn abs(cross(hypo, base)) / base.abs();\n}\n\n// ?????¨??????????????¢\ndouble distanceSegmentPoint(Segment s, Point p){\n\t// (p2-p1)??¨???p-p1??????90???????????§????????´??????p??¨p1????????¢\n\t// (p1-p2)??¨???p-p2??????90???????????§????????´??????p??¨p2????????¢\n\t// ????????\\????????´???????????¨??´???????????¢\n\tif(dot(s.p2-s.p1, p-s.p1) < 0.0) return (p - s.p1).abs();\n\tif(dot(s.p1-s.p2, p-s.p2) < 0.0) return (p - s.p2).abs();\n\treturn distanceLinePoint(s, p);\n}\n\n// ????????¨??????????????¢\ndouble distanceSegmentSegment(Segment s1, Segment s2){\n\tif(intersect(s1, s2)) return 0.0;\n\tdouble ret = distanceSegmentPoint(s1, s2.p1);\n\tret = min(ret, distanceSegmentPoint(s1, s2.p2));\n\tret = min(ret, distanceSegmentPoint(s2, s1.p1));\n\tret = min(ret, distanceSegmentPoint(s2, s1.p2));\n\treturn ret;\n}\n\n\nclass Answer{\npublic:\n\tstatic void CGL_1_A() {\n\t\tint Q;\n\t\tPoint p1, p2;\n\t\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint pp;\n\t\t\tcin >> pp.x >> pp.y;\n\t\t\tPoint pr = project(Segment(p1, p2), pp);\n\t\t\tfprintf(stdout, \"%.10f %.10f\\n\", pr.x, pr.y);\n\t\t}\n\t}\n\tstatic void CGL_1_B() {\n\t\tint Q;\n\t\tPoint p1, p2;\n\t\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint pp;\n\t\t\tcin >> pp.x >> pp.y;\n\t\t\tPoint rf = reflection(Segment(p1, p2), pp);\n\t\t\tfprintf(stdout, \"%.10f %.10f\\n\", rf.x, rf.y);\n\t\t}\n\t}\n\tstatic void CGL_1_C() {\n\t\tint Q;\n\t\tPoint p0, p1;\n\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p2;\n\t\t\tcin >> p2.x >> p2.y;\n\t\t\tint c = ccw(p0, p1, p2);\n\t\t\tif(c == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t\tif(c == CLOCKWISE) cout << \"CLOCKWISE\" << endl;\n\t\t\tif(c == ONLINE_BACK) cout << \"ONLINE_BACK\" << endl;\n\t\t\tif(c == ONLINE_FRONT) cout << \"ONLINE_FRONT\" << endl;\n\t\t\tif(c == ON_SEGMENT) cout << \"ON_SEGMENT\" << endl;\n\t\t}\n\t}\n\tstatic void CGL_2_A() {\n\t\tint Q;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p0, p1, p2, p3;\n\t\t\tcin >> p0.x >> p0.y;\n\t\t\tcin >> p1.x >> p1.y;\n\t\t\tcin >> p2.x >> p2.y;\n\t\t\tcin >> p3.x >> p3.y;\n\t\t\tint r;\n\t\t\tif(isOrthogonal(p0,p1,p2,p3)) {r = 1;}\n\t\t\telse if(isParallel(p0,p1,p2,p3)){r = 2;}\n\t\t\telse{r = 0;}\n\t\t\tcout << r << endl;\n\t\t}\n\t}\n\tstatic void CGL_2_B() {\n\t\tint Q;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p0, p1;\n\t\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\t\t\tPoint p2, p3;\n\t\t\tcin >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\t\tcout << (intersect(p0, p1, p2, p3) ? 1 : 0) << endl;\n\t\t}\n\t}\n\tstatic void CGL_2_C() {\n\t\tint Q;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p0, p1;\n\t\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\t\t\tPoint p2, p3;\n\t\t\tcin >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\t\tPoint c = crosspoint(Segment(p0, p1), Segment(p2, p3));\n\t\t\tfprintf(stdout, \"%.10f %.10f\\n\", c.x, c.y);\n\t\t}\n\t}\n\n\tstatic void CGL_2_D(){\n\t\tint Q;\n\t\tcin >> Q;\n\t\trep(i, Q){\n\t\t\tPoint p0, p1;\n\t\t\tcin >> p0.x >> p0.y >> p1.x >> p1.y;\n\t\t\tPoint p2, p3;\n\t\t\tcin >> p2.x >> p2.y >> p3.x >> p3.y;\n\t\t\tdouble ret = distanceSegmentSegment(Segment(p0, p1), Segment(p2, p3));\n\t\t\tfprintf(stdout, \"%.10f\\n\", ret) ;\n\t\t}\n\t}\n};\n\nint main() {\n\tAnswer::CGL_1_A();\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n \nconst double EPS = 1e-8, PI = acos(-1);\ninline bool eq(double a,double b){ return abs(b - a) < EPS; }\n#define curr(P,i) P[i]\n#define next(P,i) P[(i+1)%P.size()]\n#define prev(P,i) P[(i+P.size()-1) % P.size()]\nenum { OUT, ON, IN };\n \nstruct Geometory { // Geometory Library\n  struct Point {\n    double x, y;\n    Point(){};\n    Point(double x,double y):x(x),y(y){};\n    Point operator+(const Point& b) const { return Point(x + b.x,y + b.y); }\n    Point operator-(const Point& b) const { return Point(x - b.x,y - b.y); }\n    Point operator*(const double b) const { return Point(x * b,y * b); }\n    Point operator*(const Point& b) const { return Point(x * b.x - y * b.y,x * b.y + y * b.x); }\n    Point operator/(const double b) const { return Point(x / b,y / b); }\n    bool operator< (const Point& b) const { return x != b.x ? x < b.x : y < b.y; }\n    bool operator==(const Point& b) const { return eq(x,b.x) && eq(y,b.y); }\n    double norm(){ return x * x + y * y; }\n    double arg(){ return atan2(x,y); }\n    double abs(){ return sqrt(norm()); }\n    Point rotate(double theta){ return Point(cos(theta) * x - sin(theta) * y,sin(theta) * x + cos(theta) * y); }\n    Point rotate90(){ return Point(-y,x); }\n    friend ostream& operator<<(ostream& os, Point& p){ return os<<\"(\"<<p.x<<\",\"<<p.y<<\")\"; }\n    friend istream& operator>>(istream& is, Point& a){ return is>>a.x>>a.y; }\n  };\n \n  struct Line {\n    Point a, b;\n    Line(){};\n    Line(Point a,Point b):a(a),b(b){};\n  };\n  struct Segment {\n    Point a, b;\n    Segment(){};\n    Segment(Point a,Point b):a(a),b(b){};\n  };\n  struct Circle {\n    Point p; double r;\n    Circle(){};\n    Circle(Point p, double r) : p(p),r(r){};\n  };\n  typedef vector< Point > Polygon;\n  typedef vector< Segment > Segments;\n  typedef vector< Line > Lines;\n  typedef vector< Circle > Circles;\n  typedef pair< Point, Point > PointPoint;\n \n  double cross(const Point& a,const Point& b){\n    return a.x * b.y - a.y * b.x;\n  }\n  double dot(const Point& a,const Point& b){\n    return a.x * b.x + a.y * b.y;\n  }\n \n  int ccw(const Point& a,Point b,Point c){\n    b = b - a, c = c - a;\n    if(cross(b,c) > 0)    return +1;  // a → b で 反時計方向におれて c\n    if(cross(b,c) < 0)    return -1; // a → b で 時計方向におれて c\n    if(dot(b,c) < 0)      return +2;  // c -- a -- bで一直線上\n    if(b.norm() < c.norm()) return -2; // a -- b -- cで一直線上\n    return 0;  // a -- c -- bで一直線上\n  }\n  Point Projection(const Line& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Projection(const Segment& l, const Point& p){\n    double t = dot( p - l.a, l.a - l.b) / (l.a - l.b).norm();\n    return l.a + (l.a - l.b) * t;\n  }\n  Point Reflection(const Line& l, const Point& p){\n    return p + (Projection( l, p) - p) * 2.0;\n  }\n \n  double Distance( const Line& l,const Point& p) { //OK\n    return (p - Projection( l, p)).abs();\n  }\n \n  bool Intersect(const Line& l, const Line& m){\n    return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b-l.a, m.b-l.a)) < EPS;\n  }\n  bool Intersect(const Line& l, const Segment& s){\n    return cross( l.b - l.a, s.a - l.a) * cross( l.b - l.a, s.b - l.a) < EPS;\n  }\n  bool Intersect(const Line& l, const Point& p){\n    return abs(ccw(l.a, l.b, p)) != -1;\n  }\n  bool Intersect(const Segment& s, const Segment& t){\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n  }\n  bool Intersect(const Segment& s, const Point& p){\n    return ccw(s.a, s.b, p) == 0;\n  }\n  bool Intersect(const Circle& c,const Line& l){\n    return Distance( l, c.p) <= c.r + EPS;\n  }\n  bool Intersect(const Circle& c,const Point& p){\n    return abs( ( p - c.p).abs() - c.r ) < EPS;\n  }\n  int Intersect(const Circle& c, const Segment& l){\n    if( (Projection( l, c.p) - c.p).norm() - c.r * c.r > EPS) return 0;\n    const double d1 = ( c.p - l.a).abs(), d2 = ( c.p - l.b).abs();\n    if( d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n    if( d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS ) return 1;\n    const Point h = Projection( l, c.p);\n    if( dot( l.a - h, l.b - h) < 0) return 2;\n    return 0;\n  }\n  bool Intersect(const Circle& a,const Circle& b){\n    return ( ( a.p - b.p).norm() - ( a.r + b.r) * ( a.r + b.r) < EPS) &&\n      ( ( a.p - b.p).norm() - ( a.r - b.r) * ( a.r - b.r) > -EPS);\n  }\n  double Distance(const Segment& s,const Point& p){\n    Point r = Projection(s, p);\n    if ( Intersect( s, r)) return ( r - p).abs();\n    return min( ( s.a - p).abs(), ( s.a - p).abs());\n  }\n  double Distance(const Segment& a,const Segment& b){\n    if(Intersect( a, b)) return 0;\n    return min( min( Distance( a, b.a), Distance( a, b.b)), min( Distance( b, a.a), Distance( b, a.b)));\n  }\n  double Distance(const Line& l,const Line& m) {\n    return Intersect( l, m) ? 0 : Distance( l, m.a);\n  }\n  double Distance(const Line& l,const Segment& s) { //OK\n    if (Intersect(l, s)) return 0;\n    return min(Distance(l, s.a), Distance(l, s.b));\n  }\n  double Distance(const Point& a,const Point& b){ //OK\n    return ( a - b).abs();\n  }\n  Point Crosspoint(const Segment& l,const Segment& m) { //OK\n    double A = cross(l.b - l.a, m.b - m.a);\n    double B = cross(l.b - l.a, l.b - m.a);\n    if (abs(A) < EPS && abs(B) < EPS) return m.a; // same line\n    return m.a + (m.b - m.a) * B / A;\n  }\n  PointPoint Crosspoint(const Circle& c,const Line l){\n    Point hp = Projection( l, c.p), h =  hp - c.p;\n    const double d2 = h.norm();\n    Point v = ( l.b - l.a) * sqrt( c.r * c.r - d2) / ( l.b - l.a).abs();\n    return PointPoint(hp - v, hp + v);\n  }\n  PointPoint Crosspoint(const Circle& c,const Segment& l) {\n    Line aa = Line( l.a, l.b);\n    if(Intersect(c, l) == 2) return Crosspoint(c, aa);\n    PointPoint ret = Crosspoint(c, aa);\n    if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n    else ret.first = ret.second;\n    return ret;\n  }\n  PointPoint Crosspoint(const Circle& c1,const Circle& c2){ //OK\n    double d = (c1.p - c2.p).abs();\n    double s = (c1.r + c2.r + d) / 2;\n    double S = sqrt( s * ( s - c1.r) * ( s - c2.r) * ( s - d));\n    double h = 2 * S / d;\n    Point v = ( c2.p - c1.p) / ( c2.p - c1.p).abs();\n    double m = sqrt( c1.r * c1.r - h * h);\n    return PointPoint( c1.p + v * m + Point(0,1) * h * v, c1.p + v * m - Point(0,1) * h * v);\n  }\n  bool parallel(const Segment& a,const Segment& b){\n  return abs( cross( a.b - a.a, b.b - b.a)) < EPS;\n  }\n  bool orthogonal(const Segment& a,const Segment& b){\n    return dot( a.a - a.b, b.a - b.b) < EPS;\n  }\n  int Contains(const Polygon& Q,const Point& p){\n    bool in = false;\n    for(int i = 0 ; i < Q.size() ; i++ ){\n      Point a = curr(Q,i) - p, b = next(Q,i) - p;\n      if(a.y > b.y) swap(a,b);\n      if(a.y <= 0 && 0 < b.y && cross(a,b) < 0) in = !in;\n      if(cross(a,b) == 0 && dot(a,b) <= 0) return ON;\n    }\n    return in ? IN : OUT;\n  }\n  bool Contains(const Circle& c,const Point& p){\n    return ( c.p - p).abs() < c.r + EPS;\n  }\n  double Area2(const Polygon& p){ //OK\n    double A = 0;\n    for (int i = 0; i < p.size(); ++i){\n      A += cross(curr(p, i), next(p, i));\n    }\n    return A;\n  }\n};\n \nGeometory geo;\ntypedef Geometory::Point P;\ntypedef Geometory::Line L;\ntypedef Geometory::Segment S;\ntypedef Geometory::Circle C;\n\nint main(){\n  int x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  L line = L( P( x0, y0), P( x1, y1));\n\n  int q;\n  cin >> q;\n  while(q--){\n    int x, y;\n    cin >> x >> y;\n    P ans =  geo.Projection( line, P( x, y));\n    cout << fixed << setprecision(8) << ans.x << \" \" << ans.y << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\ntypedef long long ll;\ndouble pi=3.14159265359; //円周率\ndouble EPS = 1e-10; //誤差\n\nclass point\n{\n\tpublic:\n\tdouble x,y;\n\n\tpoint()\n\t{x=0;y=0;}\n\t//コンストラクタ\n\tpoint(double a,double b)\n\t{\n\t\tx=a;y=b;\n\t}\n\n\t//足し算\n\tpoint operator + (point p)\n\t{\n\t\treturn point(x+p.x,y+p.y);\n\t}\n\t//引き算\n\tpoint operator - (point p)\n\t{\n\t\treturn point(x-p.x,y-p.y);\n\t}\n\t//d倍\n\tpoint operator * (double d)\n\t{\n\t\treturn point(x*d,y*d);\n\t}\n\t//x座標昇順でソートする\n\tbool operator < (const point &p)\n\tconst {\n\t\tif(std::abs(x-p.x)>EPS)\n\t\t\treturn x<p.x;\n\t\telse\n\t\t\treturn y<p.y;\n\t}\n\t//内積\n\t//直交判定...abs(dot())<EPS\n\tdouble dot(point p)\n\t{\n\t\treturn x*p.x+y*p.y;\n\t}\n\t//外積\n\t//平行判定...abs(cross())<EPS\n\tdouble cross(point p)\n\t{\n\t\treturn x*p.y-y*p.x;\n\t}\n\t//絶対値を求める\n\tdouble abs()\n\t{\n\t\treturn sqrt(x*x+y*y);\n\t}\n\t//単位ベクトルを求める\n\tpoint ev()\n\t{\n\t\treturn point(x/abs(),y/abs());\n\t}\n\t//単位法線ベクトル（の1つ）を求める\n\t//もうひとつは-1倍することで求まる\n\tpoint nev()\n\t{\n\t\treturn point(-y/abs(),x/abs());\n\t}\n\t//2点間の距離を求める\n\t//distがEPS未満なら2点は同じ位置にあるとみなす\n\tdouble pdist(point p)\n\t{\n\t\tpoint v=point(p.x-x,p.y-y);\n\t\treturn v.abs();\n\t}\n\t//この点と直線p1-p2の距離を求める\n\tdouble ldist(point p1,point p2)\n\t{\n\t\treturn std::abs((p2.y-p1.y)*x-(p2.x-p1.x)*y+p2.x*p1.y+p2.y*p1.x)/(p2-p1).abs();\n\t}\n\n};\n\n//線分p1-p2上に点qがあるか判定\nbool on_seg(point p1,point p2,point q)\n{\n\treturn abs((p1-q).cross(p2-q))<EPS && (p1-q).dot(p2-q)<=EPS;\n}\n//直線p1-p2と直線q1-q2の交点\n//線分の交差判定はこれの戻り値が線分上にあるかどうかで判定する...on_seg(p1,p2,intersection(p1,p2,q1,q2))\npoint intersection(point p1,point p2,point q1,point q2)\n{\n\treturn p1 + (p2-p1) * ((q2-q1).cross(q1-p1) / (q2-q1).cross(p2-p1));\n}\n//n頂点からなる多角形の面積を求める(vectorで頂点は与えられる)\ndouble area(vector<point> p)\n{\n\tdouble ret=0;\n\tfor(int i=0;i<p.size()-1;i++)\n\t{\n\t\tret+=p[i].cross(p[i+1]);\n\t}\n\tret+=p[p.size()-1].cross(p[0]);\n\tret/=2;\n\treturn ret;\n}\n/*\n3点a,b,cをa->b->cと進むとき、\n* a->bで時計方向に折れてb->c (clockwise)\n* a->bで反時計方向に折れてb->c(counter clockwise)\n* a->bで逆を向いてaを通り越してb->c(c--a--b on line)\n* a->bでそのままb->c(a--b--c on line)\n* a->bで逆を向いてb->c(a--c--b on line)\n\nのいずれのパターンかを判定する\n*/\nint ccw(point a,point b,point c)\n{\n\tb=b-a;c=c-a;\n\tif(b.cross(c)>EPS)\n\t\treturn 1; //counter clockwise\n\tif(b.cross(c)<-EPS)\n\t\treturn -1; //clockwise\n\tif(b.dot(c)<-EPS)\n\t\treturn 2; //c--a--b on line\n\tif(b.x*b.x+b.y*b.y < c.x*c.x+c.y*c.y)\n\t\treturn -2; //a--b--c on line\n\treturn 0; //a--c--b on line\n}\n//凸包を求める\nvector<point> convex_hull(vector<point> p)\n{\n\tint n=p.size();\n\tint k=0;\n\tsort(p.begin(),p.end());\n\tvector<point> ch(2*n);\n\t//lower-hull 下側凸包\n\tfor(int i=0;i<n;ch[k++]=p[i++])\n\t{\n\t\twhile(k>=2 && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\t//upper-hull 上側凸包\n\tfor(int i=n-2,t=k+1;i>=0;ch[k++]=p[i--])\n\t{\n\t\twhile(k>=t && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\tch.resize(k-1);\n\treturn ch;\n}\n\nint main()\n{\n\tcout.setf(ios::fixed);\n\tcout.precision(12);\n\tpoint p1,p2;\n\tdouble a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\tp1=point(a,b);\n\tp2=point(c,d);\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tpoint f;\n\t\tcin>>a>>b;\n\t\tf=point(a,b);\n\t\tpoint x;\n\t\tx=f+(p2-p1).nev()*f.ldist(p1,p2);\n\t\tif(!on_seg(p1,p2,x))\n\t\t\tx=x-(p2-p1).nev()*f.ldist(p1,p2)*2;\n\t\tcout<<x.x<<\" \"<<x.y<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<utility>\n#include<numeric>\n#include<iostream>\n#include<array>\n#include<string>\n#include<sstream>\n#include<stack>\n#include<queue>\n#include<list>\n#include<functional>\n#define _USE_MATH_DEFINES\n\n#include<math.h>\n#include<map>\n\n#define INF 200000000\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, int> pli;\n\nint main()\n{\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tdouble x1, x2, y1, y2, x3, y3;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\n\tx3 = (x2 - x1) / sqrt((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1));\n\ty3 = (y2 - y1) / sqrt((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1));\n\n\tint q;\n\tcin >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble px, py, px2, py2;\n\t\tcin >> px >> py;\n\n\t\tpx2 = (px - x1);\n\t\tpy2 = (py - y1);\n\n\t\tprintf(\"%.10lf %.10lf\\n\", x3*(px2*x3 + py2*y3), y3*(px2*x3 + py2*y3));\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n  \nP project(P b,P c){\n  return b*real(c/b);\n}\n  \nint main(){\n  int n;\n  double ax,ay,bx,by,cx,cy;\n  scanf(\"%lf %lf %lf %lf %d\",&ax,&ay,&bx,&by,&n);\n  while(n--){\n    scanf(\"%lf %lf\",&cx,&cy);\n    P p=project(P(bx-ax,by-ay),P(cx-ax,cy-ay));\n    printf(\"%.8f %.8f\\n\",ax+p.real(),ay+p.imag());\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//Projection\n#include <iostream>\n#include <math.h>\n#include <iomanip>\n\nusing namespace std;\n\nstatic const double ESP = 1e-10;\n\nbool equals(double a, double b) { return fabs(a - b) < ESP; }\n\nclass Point {\npublic:\n    double x, y;\n\n    explicit Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (const Point &p) const { return Point(x + p.x, y + p.y); }\n    Point operator - (const Point &p) const { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(a / x, a / y); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < ESP && fabs(y - p.y) < ESP;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector v1, Vector v2) {\n    return equals(cross(v1, v2), 0.0);\n}\n\nbool isOrthogonal(Vector v1, Vector v2) {\n    return equals(dot(v1, v2), 0.0);\n}\n\nint main() {\n    int q;\n    double x, y, x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2 >> q;\n    Point p1 = Point(x1, y1), p2 = Point(x2, y2);\n    Vector v1, v2;\n    v1 = p2 - p1;\n    for(int i = 0; i < q; i++) {\n        cin >> x >> y;\n        Point p = Point(x, y);\n        Vector v2 = p - p1;\n        Point x = Point();\n        x = p1 + (v1 * (dot(v1, v2) / v1.norm()));\n        cout << setprecision(15) << x.x << \" \" << x.y << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\nconst double EPS=1e-10;\nstruct point{\n\tdouble x,y;\n\tpoint(const point&a):x(a.x),y(a.y){}\n\tpoint(const double&x=0,const double&y=0):x(x),y(y){}\n\tpoint operator+(const point&p)const{return point(x+p.x,y+p.y);}\n\tpoint operator-(const point&p)const{return point(x-p.x,y-p.y);}\n\tpoint operator*(const double&k)const{return point(x*k,y*k);}\n\tpoint operator/(const double&k)const{return point(x/k,y/k);}\n\tdouble norm(){return x*x+y*y;}\n\tdouble abs(){return sqrt(norm());}\n\tvoid operator=(const point&a){\n\t\tx=a.x,y=a.y;\n\t}\n\tbool operator<(const point&p)const{\n\t\treturn x!=p.x?x<p.x:y<p.y;\n\t}\n\tbool operator==(const point&p)const{\n\t\treturn fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n\t}\n\tfriend double dot(const point&a,const point&b){\n\t\treturn a.x*b.x+a.y*b.y;\n\t}\n\tfriend double cross(const point&a,const point&b){\n\t\treturn a.x*b.y-a.y*b.x;\n\t}\n};\ntypedef point vector;\nstruct segment{\n\tpoint p1,p2;\n\tsegment(const double&a,const double&b,const double&c,const double&d){\n\t\tp1.x=a,p1.y=b,p2.x=c,p2.y=d;\n\t}\n\tsegment(const point&a, const point&b):p1(a),p2(b){}\n\tpoint get_vec()const{return point(p2.x-p1.x,p2.y-p1.y);}\n};\npoint project(const segment&s,const point&p){\n\tvector base=s.get_vec();\n\tdouble r=dot(p-s.p1,base)/base.norm();\n\treturn s.p1+base*r;\n}\npoint reflect(const segment&s,const point&p){\n\treturn p+(project(s,p)-p)*2.0;\n}\nint main(){\n\tdouble a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\tsegment s(a,b,c,d);\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>a>>b;\n\t\tpoint t=project(s,point(a,b));\n\t\tcout<<setprecision(8)<<fixed<<t.x<<' '<<t.y<<endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ndouble EPS = 0.0000000001;\nint sign(double x){\n\tif (x > EPS){\n\t\treturn 1;\n\t} else if (x < -EPS){\n\t\treturn -1;\n\t} else {\n\t\treturn 0;\n\t}\n}\nbool equals(double x, double y){\n\treturn abs(x - y) < EPS;\n}\nstruct point{\n\tdouble x;\n\tdouble y;\n\tpoint(){\n\t\tx = 0;\n\t\ty = 0;\n\t}\n\tpoint(double X, double Y){\n\t\tx = X;\n\t\ty = Y;\n\t}\n\tpoint operator +(){\n\t\treturn point(x, y);\n\t}\n\tpoint operator -(){\n\t\treturn point(-x, -y);\n\t}\n\tpoint operator +(point P){\n\t\treturn point(x + P.x, y + P.y);\n\t}\n\tpoint operator -(point P){\n\t\treturn point(x - P.x, y - P.y);\n\t}\n\tpoint& operator +=(point P){\n\t\tx += P.x;\n\t\ty += P.y;\n\t\treturn *this;\n\t}\n\tpoint& operator -=(point P){\n\t\tx -= P.x;\n\t\ty -= P.y;\n\t\treturn *this;\n\t}\n\tpoint operator *(double k){\n\t\treturn point(x * k, y * k);\n\t}\n\tpoint operator /(double k){\n\t\treturn point(x / k, y / k);\n\t}\n\tpoint& operator *=(double k){\n\t\tx *= k;\n\t\ty *= k;\n\t\treturn *this;\n\t}\n\tpoint& operator /=(double k){\n\t\tx /= k;\n\t\ty /= k;\n\t\treturn *this;\n\t}\n\tbool operator ==(point P){\n\t\treturn equals(x, P.x) && equals(y, P.y);\n\t}\n\tbool operator !=(point P){\n\t\treturn !(*this == P);\n\t}\n\tbool operator <(point P){\n\t\treturn sign(P.x - x) == 1 || (equals(x, P.x) && sign(P.y - y) == 1);\n\t}\n\tbool operator >(point P){\n\t\treturn (P < *this);\n\t}\n\tpoint& rotate(double t){\n\t    double X = x * cos(t) - y * sin(t);\n\t    double Y = x * sin(t) + y * cos(t);\n\t    x = X;\n\t    y = Y;\n\t    return *this;\n\t}\n\tpoint& rotate(point P, double t){\n\t    *this -= P;\n\t    (*this).rotate(t);\n\t    *this += P;\n\t    return *this;\n\t}\n\tpoint& rotate90(){\n\t    swap(x, y);\n\t    x = -x;\n\t    return *this;\n\t}\n};\nistream& operator >>(istream &is, point &p){\n\tdouble x, y;\n\tis >> x >> y;\n\tp = point(x, y);\n\treturn is;\n}\nostream& operator <<(ostream &os, point p){\n\tos << p.x << ' ' << p.y;\n\treturn os;\n}\ndouble norm(point P){\n\treturn P.x * P.x + P.y * P.y;\n}\ndouble abs(point P){\n\treturn sqrt(norm(P)); \n}\ndouble dot(point P, point Q){\n\treturn P.x * Q.x + P.y * Q.y;\n}\nstruct line{\n\tpoint A;\n\tpoint B;\n\tline(){\n\t}\n\tline(point P, point Q){\n\t\tA = P;\n\t\tB = Q;\n\t}\n\tline(double a, double b){\n\t\tA = point(0, b);\n\t\tB = point(1, a + b);\n\t}\n\tline(double a, double b, double c){\n\t\tif (sign(b) == 0){\n\t\t\tA = point(-c / a, 0);\n\t\t\tB = point(-c / a, 1);\n\t\t} else {\n\t\t\tA = point(0, -c / a);\n\t\t\tB = point(1, -(b + c) / a);\n\t\t}\n\t}\n};\nistream& operator >>(istream &is, line &L){\n\tpoint A, B;\n\tis >> A >> B;\n\tL = line(A, B);\n\treturn is;\n}\nostream& operator <<(ostream &os, line L){\n\tos << L.A << ' ' << L.B;\n\treturn os;\n}\npoint vec(line L){\n\treturn L.B - L.A;\n}\npoint projection(point P, line L){\n\treturn L.A + vec(L) * dot(P - L.A, vec(L)) / norm(vec(L));\n}\nint main(){\n  cout << fixed << setprecision(20);\n  line L;\n  cin >> L;\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++){\n    point P;\n    cin >> P;\n    cout << projection(P, L) << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;\n\tint q; cin >> q;\n\tlong double theta1, theta2;\n\ttheta1 = atan2(y2 - y1, x2 - x1);\n\twhile (q--) {\n\t\tint x, y; cin >> x >> y;\n\t\ttheta2 = atan2(y - y1, x - x1);\n\t\tlong double dist_x = hypot(x - x1,y - y1) * cos(theta2 - theta1);\n\t\tcout << fixed << setprecision(11) << x1 +  dist_x * cos(theta1) << \" \" << y1 + dist_x * sin(theta1) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\nusing namespace std;\n\nstruct Point{\n    double x;\n    double y;\n    Point(double x, double y) : x(x), y(y){}\n    Point operator+(Point p){\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator*(double d){\n        return Point(x * d, y * d);\n    }\n};\ntypedef Point Vector;\n\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nint main(){\n    int x_p1, y_p1, x_p2, y_p2;\n    cin >> x_p1 >> y_p1 >> x_p2 >> y_p2;\n    Point p1(x_p1, y_p1);\n    Point p2(x_p2, y_p2);\n    Vector b(p2.x - p1.x, p2.y - p1.y);\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        Vector h(x - p1.x, y - p1.y);\n        Point ans = p1 + p2 * (dot(h, b) / dot(b, b));\n        cout << fixed << setprecision(10);\n        cout << ans.x << \" \" << ans.y << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <vector>\nnamespace Random_Number{\n\tunsigned int seed = 19260817;\n\tvoid srnd(unsigned int x){ seed = x; }\n\tunsigned int rnd(){\n\t\treturn seed ^= seed << 19, seed ^= seed >> 7, seed ^= seed << 1;\n\t}\n}\nusing namespace Random_Number;\nnamespace Geometry{\n\tconst double eps = 1e-9, pi = 3.14159265358979323846;\n\tbool equal(double a, double b){ return fabs(a - b) < eps; }\n\tstruct point{\n\t\tdouble x, y;\n\t\tpoint(){}\n\t\tpoint(double _x, double _y){ x = _x, y = _y; }\n\t\tpoint operator * (const double &la) const { return point(x * la, y * la); }\n\t\tpoint operator / (const double &la) const { return point(x / la, y / la); }\n\t\tpoint operator + (const point &rhs) const { return point(x + rhs.x, y + rhs.y); }\n\t\tpoint operator - (const point &rhs) const { return point(x - rhs.x, y - rhs.y); }\n\t\tbool operator < (const point &rhs) const { return x < rhs.x || (x == rhs.x && y < rhs.y); }\n\t\tbool operator > (const point &rhs) const { return x > rhs.x || (x == rhs.x && y > rhs.y); }\n\t\tbool operator == (const point &rhs) const { return equal(x, rhs.x) && equal(y, rhs.y); }\n\t\tdouble len2() const { return x * x + y * y; }\n\t\tdouble len() const { return sqrt(len2()); }\n\t\tpoint unit() const { return *this / len(); }\n\t\tpoint unit2() const { return *this / len2(); }\n\t\tfriend double distance(point a, point b){ return (a - b).len(); }\n\t\tfriend double distance2(point a, point b){ return (a - b).len2(); }\n\t\tfriend double dot(const point &a, const point &b){ return a.x * b.x + a.y * b.y; }\n\t\tfriend double cross(const point &a, const point &b){ return a.x * b.y - a.y * b.x; }\n\t\tvoid read(){ scanf(\"%lf%lf\", &x, &y); }\n\t\tvoid print(char ch = '\\n') const { printf(\"%.10lf %.10lf\", x, y), putchar(ch); }\n\t\tpoint rotation(double th) const { return point(x * cos(th) - y * sin(th), y * cos(th) + x * sin(th)); }\n\t\tfriend double angle(const point &a, const point &b){ return atan2(cross(a, b), dot(a, b)); }\n\t};\n\tstruct line{\n\t\tpoint a, b;\n\t\tline(){}\n\t\tline(point _a, point _b){ a = _a, b = _b; }\n\t\tvoid read(){ a.read(), b.read(); }\n\t\tvoid print(char ch1 = ' ', char ch2 = '\\n') const { a.print(ch1), b.print(ch2); }\n\t\tpoint projection(const point &p) const { return a + (b - a).unit2() * dot(p - a, b - a); }\n\t\tpoint reflection(const point &p) const { return projection(p) * 2 - p; }\n\t\tint direction(const point &p) const {\n\t\t\tdouble t = cross(b - a, p - a);\n\t\t\tif (t >= eps) return 1;\n\t\t\tif (t <= -eps) return 2;\n\t\t\tdouble l1 = dot(p - a, b - a), l2 = dot(b - a, b - a);\n\t\t\tif (l1 <= -eps) return 3;\n\t\t\tif (l1 > l2) return 4;\n\t\t\treturn 5;\n\t\t}\n\t\tfriend bool parallel(const line &a, const line &b){ return equal(cross(a.b - a.a, b.b - b.a), 0); }\n\t\tfriend bool orthogonal(const line &a, const line &b){ return equal(dot(a.b - a.a, b.b - b.a), 0); }\n\t\tfriend std :: vector<point> cross_line(const line &a, const line &b){\n\t\t\t// gugugu\n\t\t\treturn {};\n\t\t}\n\t\tfriend bool segment_intersection(const line &a, const line &b){\n\t\t\tif (std :: min(a.a.x, a.b.x) >= std :: max(b.a.x, b.b.x) + eps) return 0;\n\t\t\tif (std :: min(b.a.x, b.b.x) >= std :: max(a.a.x, a.b.x) + eps) return 0;\n\t\t\tif (std :: min(a.a.y, a.b.y) >= std :: max(b.a.y, b.b.y) + eps) return 0;\n\t\t\tif (std :: min(b.a.y, b.b.y) >= std :: max(a.a.y, a.b.y) + eps) return 0;\n\t\t\tdouble t1, t2;\n\t\t\tt1 = cross(b.a - a.a, a.b - a.a), t2 = cross(b.b - a.a, a.b - a.a);\n\t\t\tif ((t1 >= eps && t2 >= eps) || (t1 <= -eps && t2 <= -eps)) return 0;\n\t\t\tt1 = cross(a.a - b.a, b.b - b.a), t2 = cross(a.b - b.a, b.b - b.a);\n\t\t\tif ((t1 >= eps && t2 >= eps) || (t1 <= -eps && t2 <= -eps)) return 0;\n\t\t\treturn 1;\n\t\t}\n\t\tfriend double distance_ps(const point &p, const line &l){\n\t\t\tdouble l1 = dot(p - l.a, l.b - l.a), l2 = dot(l.b - l.a, l.b - l.a);\n\t\t\tif (l1 > l2) return distance(p, l.b);\n\t\t\tif (l1 < 0) return distance(p, l.a);\n\t\t\treturn fabs(cross(l.b - l.a, p - l.a)) / distance(l.a, l.b);\n\t\t}\n\t\tfriend double distance_ss(const line &a, const line &b){\n\t\t\tif (segment_intersection(a, b)) return 0;\n\t\t\treturn std :: min(std :: min(distance_ps(a.a, b), distance_ps(a.b, b)), \n\t\t\tstd :: min(distance_ps(b.a, a), distance_ps(b.b, a)));\n\t\t}\n\t};\n\tstruct polygon{\n\t\tstd :: vector<point> g;\n\t\tpolygon(){}\n\t\tpolygon(int n){ g.resize(n); }\n\t\tpolygon(const std :: vector<point> &_g){ g = _g; }\n\t\tvoid clear(){ g.clear(); }\n\t\tvoid resize(int n){ g.resize(n); }\n\t\tint size() const { return g.size(); }\n\t\tvoid push_back(point x){ return g.push_back(x); }\n\t\tvoid pop_back(){ g.pop_back(); }\n\t\tpoint& operator [] (int x){ return g[x]; }\n\t\tconst point& operator [] (int x) const { return g[x]; }\n\t\tdouble directed_area() const {\n\t\t\tint n = g.size();\n\t\t\tdouble s = 0;\n\t\t\tfor (register int i = 0; i < n; ++i) s += cross(g[i], g[(i + 1) % n]);\n\t\t\treturn s / 2;\n\t\t}\n\t\tbool is_convex() const {\n\t\t\tint n = g.size();\n\t\t\tfor (register int i = 0; i < n; ++i)\n\t\t\t\tif (cross(g[(i + 1) % n] - g[i], g[(i - 1 + n) % n] - g[i]) <= -eps) return 0;\n\t\t\treturn 1;\n\t\t}\n\t\tint polygon_point_containment(const point &a) const {\n\t\t\tdouble k = sqrt(1.0 * rnd() / rnd());\n\t\t\tline l = line(a, point(a.x + 1e9, a.y + 1e9 * k));\n\t\t\tint n = g.size(), s = 0;\n\t\t\tfor (register int i = 0; i < n - 1; ++i)\n\t\t\t\tif (line(g[i], g[i + 1]).direction(a) == 5) return 1;\n\t\t\tif (line(g[n - 1], g[0]).direction(a) == 5) return 1;\n\t\t\tfor (register int i = 0; i < n - 1; ++i)\n\t\t\t\tif (segment_intersection(l, line(g[i], g[i + 1]))) ++s;\n\t\t\tif (segment_intersection(l, line(g[n - 1], g[0]))) ++s;\n\t\t\tif (s & 1) return 2; else return 0;\n\t\t}\n\t\tvoid convex_hull(std :: vector<point> f){\n\t\t\tg.clear();\n\t\t\tint n = f.size();\n\t\t\tstd :: sort(f.begin(), f.end());\n\t\t\tstd :: vector<point> p;\n\t\t\tp.push_back(f[0]);\n\t\t\tfor (register int i = 1; i < n; ++i){\n\t\t\t\twhile (p.size() > 1 && cross(f[i] - p.back(), *(++p.rbegin()) - p.back()) <= -eps)\n\t\t\t\t\tp.pop_back();\n\t\t\t\tp.push_back(f[i]);\n\t\t\t}\n\t\t\tfor (register int i = 0; i < p.size() - 1; ++i) g.push_back(p[i]);\n\t\t\tstd :: reverse(f.begin(), f.end());\n\t\t\tp.clear(), p.push_back(f[0]);\n\t\t\tfor (register int i = 1; i < n; ++i){\n\t\t\t\twhile (p.size() > 1 && cross(f[i] - p.back(), *(++p.rbegin()) - p.back()) <= -eps)\n\t\t\t\t\tp.pop_back();\n\t\t\t\tp.push_back(f[i]);\n\t\t\t}\n\t\t\tfor (register int i = 0; i < p.size() - 1; ++i) g.push_back(p[i]);\n\t\t\tf = g, n = f.size(), g.clear();\n\t\t\tint t = 0;\n\t\t\tfor (register int i = 1; i < n; ++i)\n\t\t\t\tif (f[i].y < f[t].y || (f[i].y == f[t].y && f[i].x < f[t].x)) t = i;\n\t\t\tfor (register int i = t; i < n; ++i) g.push_back(f[i]);\n\t\t\tfor (register int i = 0; i < t; ++i) g.push_back(f[i]);\n\t\t}\n\t\tdouble convex_diamater() const {\n\t\t\tint n = g.size();\n\t\t\tdouble ans = 0;\n\t\t\tfor (register int i = 0, j = 0; i < n; ++i){\n\t\t\t\twhile (cross(g[i] - g[j], g[(i + 1) % n] - g[j])\n\t\t\t\t  < cross(g[i] - g[(j + 1) % n], g[(i + 1) % n] - g[(j + 1) % n]) + eps)\n\t\t\t\t\tj = (j + 1) % n;\n\t\t\t\tans = std :: max(ans, distance(g[j], g[i]));\n\t\t\t\tans = std :: max(ans, distance(g[j], g[(i + 1) % n]));\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n\t};\n\tstruct circle{\n\t\tpoint o;\n\t\tdouble r;\n\t\tcircle(){}\n\t\tcircle(point _o, double _r){ o = _o, r = _r; }\n\t\tvoid read(){ o.read(), scanf(\"%lf\", &r); }\n\t\tvoid print(char ch = '\\n') const { printf(\"%.10lf %.10lf %.10lf\", o.x, o.y, r), putchar(ch); }\n\t\tint circle_intersection(const circle &c) const {\n\t\t\tdouble d = distance(o, c.o);\n\t\t\tif (d >= r + c.r + eps) return 4;\n\t\t\tif (equal(d, r + c.r)) return 3;\n\t\t\tif (d >= fabs(r - c.r) + eps) return 2;\n\t\t\tif (equal(d, fabs(r - c.r))) return 1;\n\t\t\treturn 0;\n\t\t}\n\t\tstd :: vector<point> directed_line_cross_point(const line &l) const {\n\t\t\tpoint p = line(l.a, l.b).projection(o), v = (l.b - l.a).unit();\n\t\t\tdouble d = distance(p, o);\n\t\t\tif (d >= r + eps) return {};\n\t\t\tdouble t = sqrt(r * r - (p - o).len2());\n\t\t\tif (equal(t, 0)) return {p};\n\t\t\telse return {p - v * t, p + v * t};\n\t\t}\n\t\tstd :: vector<point> circle_cross_point(const circle &c) const {\n\t\t\tdouble d = distance(o, c.o);\n\t\t\tif (d <= fabs(r - c.r) - eps || d >= r + c.r + eps) return {};\n\t\t\tdouble x = (r * r - c.r * c.r + d * d) / (d * 2), h = sqrt(r * r - x * x);\n\t\t\tpoint p = (c.o - o).unit() * x, v = (c.o - o).unit().rotation(pi / 2) * h;\n\t\t\tif (v == point(0, 0)) return {p}; else return {p - v, p + v};\n\t\t}\n\t\tstd :: vector<point> circle_point_tangent(const point &p) const {\n\t\t\tdouble d = distance(o, p);\n\t\t\tif (d <= r - eps) return {};\n\t\t\tif (equal(d, r)) return {p};\n\t\t\treturn circle_cross_point(circle(p, sqrt(d * d - r * r)));\n\t\t}\n\t\tstd :: vector<point> circle_common_tangent_out(const circle &c) const {\n\t\t\tif (equal(r, c.r)){\n\t\t\t\tpoint p = (c.o - o).unit().rotation(pi / 2) * r;\n\t\t\t\treturn {o - p, o + p};\n\t\t\t}\n\t\t\tpoint p = (o * c.r - c.o * r) / (c.r - r);\n\t\t\treturn circle_point_tangent(p);\n\t\t}\n\t\tstd :: vector<point> circle_common_intangent_in(const circle &c) const {\n\t\t\tpoint p = (o * c.r + c.o * r) / (r + c.r);\n\t\t\treturn circle_point_tangent(p);\n\t\t}\n\t\tdouble directed_triangle_intersection(const point &a, const point &b) const {\n\t\t\tbool ta = a.x * a.x + a.y * a.y < r * r + eps, tb = b.x * b.x + b.y * b.y < r * r + eps;\n\t\t\tstd :: vector<point> t = circle(point(0, 0), r).directed_line_cross_point(line(b, a));\n\t\t\tif (ta == 1 && tb == 1) return cross(a, b) / 2;\n\t\t\tif (ta == 1 && tb == 0) return angle(t.front(), b) * r * r / 2 + cross(a, t.front()) / 2;\n\t\t\tif (ta == 0 && tb == 1) return angle(a, t.back()) * r * r / 2 + cross(t.back(), b) / 2;\n\t\t\tdouble s = angle(a, b) * r * r / 2;\n\t\t\tif (distance_ps(point(0, 0), line(a, b)) > r - eps) return s;\n\t\t\treturn s + angle(t.front(), t.back()) * r * r / 2 - cross(t.front(), t.back()) / 2;\n\t\t}\n\t\tdouble directed_polygon_intersection(const polygon &g) const {\n\t\t\tint n = g.size();\n\t\t\tdouble s = 0;\n\t\t\tfor (register int i = 0; i < n; ++i)\n\t\t\t\ts += directed_triangle_intersection(g[i] - o, g[(i + 1) % n] - o);\n\t\t\treturn s;\n\t\t}\n\t};\n}\nusing namespace Geometry;\nline l;\nint n, q;\npoint p;\ndouble r;\nvoid CGL_1_A(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--) p.read(), l.projection(p).print();\n}\nvoid CGL_1_B(){\n\tl.read(), scanf(\"%d\", &q);\n\twhile (q--) p.read(), l.reflection(p).print();\n}\nvoid CGL_7_H(){\n\tint n;\n\tdouble r;\n\tscanf(\"%d%lf\", &n, &r);\n\tpolygon g(n);\n\tfor (register int i = 0; i < n; ++i) g[i].read();\n\tprintf(\"%.10lf\\n\", fabs(circle(point(0, 0), r).directed_polygon_intersection(g)));\n}\nint main(){\n\tCGL_1_A();\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n\ntypedef std::complex<double> point;\ndouble InnerProd(point x,point y);\npoint Projection(point x,point y);\nint main(){\n        point ans,p1,p2,tmp;\n        int q;\n    double x1,x2,y1,y2;\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n        p1=point(x1,y1);\n        p2=point(x2,y2);\n        scanf(\"%d\",&q);\n        for(int i=0;i<q;i++){\n                scanf(\"%lf%lf\",&x1,&y1);\n                ans=p1+Projection(point(x1,y1),p2-p1);\n                printf(\"%lf %lf\\n\",ans.real(),ans.imag());\n        }\n\n        return 0;\n}\ndouble InnerProd(point x,point y){\n        return ((std::conj(x)*y).real());\n}\n\n/*x??????y???????°???±*/\npoint Projection(point x,point y){\n        return (y*InnerProd(x,y)/std::norm(y));\n}"
  },
  {
    "language": "C++",
    "code": "\n#include <bits/stdc++.h>\n#define REP(i,n) for (int i = 0; i <(n); ++i)\n#define REP2(i,x,n) for (int i = x; i <(n); ++i)\n#define ALL(v) v.begin(), v.end()\n#define RALL(v) v.rbegin(), v.rend()\nusing namespace std;\nusing ll = long long;\nusing P = pair<int,int>;\nstatic const double PI = acos(-1);\nstatic const int INF = 1e9+7;\n\n/*\n\n計算幾何学　ライブラリ\n\n*/\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\n\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n}\n\n\n\nint main(){\n  double x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n  Point px0 = Point(x0, y0);\n  Point px1 = Point(x1, y1);\n\n  Line s = Line(px0,px1);\n\n  int q;\n  cin >> q;\n  REP(i,q){\n    double xp, yp;\n    cin >> xp >> yp;\n    Point px = Point(xp,yp);\n    Point ans = project(s, px);\n    cout << fixed << setprecision(15) <<  ans.x << \" \"<< ans.y << endl;\n  }\n\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define DEBUG 1\n\n#define INF (1.0/0.0)\n#define EPS 1e-8\n#define PI 3.1415926535\n#define EQ(x, y) (abs((x)-(y))<EPS)\n#define X real()\n#define Y imag()\n\ntypedef complex<double> Point;\ntypedef Point Vec;\ntypedef array<Point, 2> Line;\ntypedef vector<Point> Poly;\n\nstruct Circle {\n  Point c;\n  double r;\n};\n\nenum Geometory {ABC=-2, CW, ON_LINE, CCW, CAB, OUTSIDE, INSIDE, ERROR}; \n\nnamespace std {\n  bool operator<(Point a, Point b) {\n    if (a.X != b.X) return a.X < b.X;\n    return a.Y < b.Y;\n  }\n}\n\ndouble dot(Point a, Point b) {\n  return (conj(a)*b).X;\n}\n\ndouble cross(Point a, Point b) {\n  return (conj(a)*b).Y;\n}\n\nGeometory ccw(Point a, Point b, Point c) {\n  b -= a;\n  c -= a;\n  if (cross(b, c) > 0) return CCW; // ccw\n  if (cross(b, c) < 0) return CW; // cw\n  if (dot(b, c) < 0) return CAB; // c - a - b\n  if (norm(b) < norm(c)) return ABC; // a - b - c\n  return ERROR;\n}\n\nPoint proj(Line l, Point p) {\n  Point v = l[1]-l[0];\n  double ratio = dot(v, p-l[0]) / norm(v);\n  return l[0] + ratio*v;\n}\n\nPoint refl(Line l, Point p) {\n  return p + (proj(l, p) - p) * 2.0;\n}\n\nVec rotate(Vec v, double r) {\n  return v*Vec(cos(r), sin(r));\n}\n\nbool IsOrthogonal(Line l, Line m) {\n  Vec v1 = l[1]-l[0];\n  Vec v2 = m[1]-m[0];\n  return EQ(dot(v1, v2), 0.0);\n}\n\nbool IsParallel(Line l, Line m) {\n  Vec v1 = l[1]-l[0];\n  Vec v2 = m[1]-m[0];\n  return EQ(cross(v1, v2), 0.0);\n}\n\nbool IntersectLL(Line l, Line m) {\n  if (!EQ(cross(l[1]-l[0], m[1]-m[0]), 0.0)) return true;\n  if (EQ(cross(l[1]-l[0], m[0]-l[0]), 0.0)) return true;\n  return false;\n}\n\nbool IntersectLS(Line l, Line s) {\n  Point b = l[0];\n  Vec v = l[1]-l[0];\n  return cross(v, s[0]-b)*cross(v, s[1]-b) < EPS;\n}\n\nbool IntersectSS(Line s, Line t) {\n  if (ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) > 0) return false;\n  if (ccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) > 0) return false;\n  return true;\n}\n\nbool IntersectLP(Line l, Point p) {\n  return EQ(cross(l[1]-p, l[0]-p), 0.0);\n}\n\nbool IntersectSP(Line s, Point p) {\n  return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS;\n}\n\ndouble DistL(Line l) {\n  return abs(l[0]-l[1]);\n}\n\ndouble DistLP(Line l, Point p) {\n  return abs(p - proj(l, p));\n}\n\ndouble DistLL(Line l, Line m) {\n  if (!IntersectLL(l, m)) return 0;\n  return DistLP(l, m[0]);\n}\n\ndouble DistLS(Line l, Line s) {\n  if (IntersectLS(l, s)) return 0;\n  return min(DistLP(l, s[0]), DistLP(l, s[1]));\n}\n\ndouble DistSP(Line s, Point p) {\n  Point r = proj(s, p);\n  if (IntersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0]-p), abs(s[1]-p));\n}\n\ndouble DistSS(Line s, Line t) {\n  if (IntersectSS(s, t)) return 0;\n\n  double a = min(DistSP(s, t[0]), DistSP(s, t[1]));\n  double b = min(DistSP(t, s[0]), DistSP(t, s[1]));\n  return min(a, b);\n}\n\nLine PerpendBisect(Line seg) {\n  Point mid = (seg[0]+seg[1])/2.0;\n  return Line{mid, mid+(seg[1]-seg[0])*Vec(0, 1)};\n}\n\nPoint CrossPointLL(Line l, Line m) {\n  double A = cross(l[1]-l[0], m[1]-m[0]);\n  double B = cross(l[1]-l[0], l[1]-m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0];\n  if (abs(A) < EPS) assert(0);\n  return m[0] + B / A * (m[1]-m[0]);\n}\n\nvector<Point> CrossPointCL(Circle c, Line l) {\n  vector<Point> ret;\n  double d = DistLP(l, c.c);\n  if (d < c.r + EPS) {\n    double ratio = (d > c.r) ? 0.0 : sqrt(c.r*c.r - d*d);\n    Vec sgn = (l[0]-l[1]) / abs(l[0]-l[1]);\n    ret.emplace_back(proj(l, c.c) + ratio*sgn);\n    ret.emplace_back(proj(l, c.c) - ratio*sgn);\n  }\n  return ret;\n}\n\nvector<Point> CrossPointCS(Circle c, Line s) {\n  vector<Point> ret;\n  vector<Point> res = CrossPointCL(c, s);\n  for (Point p : res) {\n    if(ccw(s[0], p, s[1]) == ABC) ret.emplace_back(p);\n  }\n  return ret;\n}\n\nvector<Point> CrossPointCC(Circle c1, Circle c2) {\n  vector<Point> ret;\n  double d = abs(c1.c - c2.c);\n  double rc = (d*d + c1.r*c1.r - c2.r*c2.r) / (2*d);\n  double dfr = c1.r*c1.r - rc*rc;\n\n  if (EQ(dfr, 0.0)) dfr = 0.0;\n  else if(dfr < 0.0) return ret;\n\n  double rs = sqrt(dfr);\n  Vec sgn = (c2.c - c1.c) / d;\n  ret.emplace_back(c1.c + sgn*Point(rc, rs));\n  if (dfr > 0.0) ret.emplace_back(c1.c + sgn*Point(rc, -rs));\n  return ret;\n}\n\n// Note that ccw(a, b, c) != CCW when a, b, c are colinear\nPoly GrahamScan(vector<Point> ps) {\n  int k = 0;\n  int n = ps.size();\n  Poly ret(n*2);\n\n  sort(ps.begin(), ps.end());\n  for (int i=0; i<n; i++) {\n    while (k > 1 && ccw(ret[k-2], ret[k-1], ps[i]) != CCW) k--;\n    ret[k++] = ps[i];\n  }\n\n  int k_ = k;\n  for (int i=n-1; i>=0; i--) {\n    while (k > k_ && ccw(ret[k-2], ret[k-1], ps[i]) != CCW) k--;\n    ret[k++] = ps[i];\n  }\n\n  ret.resize(k-1);\n  return ret;\n}\n\ndouble CalcArea(Poly ps) {\n  double ret = 0.0;\n  for (int i=0; i<ps.size(); i++) {\n    ret += cross(ps[i], ps[(i+1)%ps.size()]);\n  }\n  return ret/2.0;\n}\n\nbool IsConvex(Poly ps) {\n  return GrahamScan(ps).size() == ps.size();\n}\n\nGeometory ContainsPoint(Poly poly, Point p) {\n  bool in = false;\n  int n = poly.size();\n  for (int i=0; i<n; i++) {\n    Point a = poly[i];\n    Point b = poly[(i+1)%n];\n    Vec u = a - p;\n    Vec v = b - p;\n\n    if (u.Y > v.Y) swap(u, v);\n\n    double cr = cross(u, v);\n    if (u.Y <= 0 && 0 < v.Y && cr > EPS) in ^= 1;\n    if (IntersectSP({a, b}, p)) return ON_LINE;\n  }\n\n  if (in) return INSIDE;\n  return OUTSIDE;\n}\n\n// Convex* requires the elements of ps to be arranged counter clockwise.\npair<int, int> ConvexDiameterApexes(Poly ps) {\n#if DEBUG\n  assert (IsConvex(ps));\n#endif\n\n  int n = ps.size();\n  int is = 0;\n  int js = 0;\n  for (int i=1; i<n; i++) {\n    if (ps[i].Y > ps[is].Y) is = i;\n    if (ps[i].Y < ps[js].Y) js = i;\n  }\n\n  int maxi, maxj;\n  double maxd = norm(ps[is]-ps[js]);\n  int i = is;\n  int j = js;\n  do {\n    Vec a = ps[i+1] - ps[i];\n    Vec b = ps[j+1] - ps[j];\n    if (cross(a, b) > -EPS) j = (j+1)%n;\n    else i = (i+1)%n;\n\n    double d = norm(ps[i]-ps[j]);\n    if (d > maxd) {\n      maxd = d;\n      maxi = i;\n      maxj = j;\n    }\n  } while (i != is || j != js);\n\n  return make_pair(maxi, maxj);\n}\n\nLine ClosestPair(vector<Point> ps) {\n  auto CompareY = [](const Point &a, const Point &b) {\n    if (a.Y != b.Y) return a.Y < b.Y;\n    return a.X < b.X;\n  };\n\n  function<Line(Point*,int)> Rec = [&Rec, &CompareY](Point *ps, int n) {\n    if (n <= 1) return Line{Point(0, 0), Point(INF, INF)};\n    \n    int m = n/2;\n    double x = ps[m].X;\n    Line a = Rec(ps, m);\n    Line b = Rec(ps+m, n-m);\n    double mind = DistL(a);\n    Line ret = a;\n    if (DistL(b) < mind) {\n      mind = DistL(b);\n      ret = b;\n    }\n\n    sort(ps, ps+n, CompareY);\n    vector<Point> qs;\n    qs.reserve(n);\n    for (int i=0; i<n; i++) {\n      if (abs(ps[i].X - x) >= mind) continue;\n\n      for (int j=0; j<qs.size(); j++) {\n        Point p1 = ps[i];\n        Point p2 = qs[qs.size()-1-j];\n        if (p1.Y - p2.Y >= mind) break;\n\n        double d = abs(p1-p2);\n        if (mind > d) {\n          mind = d;\n          ret = Line{p1, p2};\n        }\n      }\n\n      qs.emplace_back(ps[i]);\n    }\n\n    return ret;\n  };\n\n  int n = ps.size();\n  assert (n >= 2);\n  sort(ps.begin(), ps.end());\n  return Rec(&ps[0], n);\n}\n\n// Convex* requires the elements of ps to be arranged counter clockwise.\n// <left, right> or <upper, lower>\npair<Poly, Poly> CutConvex(Poly ps, Line l) {\n#if DEBUG\n  assert (IsConvex(ps));\n#endif\n\n  //if (l[0].Y > l[1].Y) swap(l[0], l[1]);\n  //else if (EQ(l[0].Y, l[1].Y) && l[0].X > l[1].X) swap(l[0], l[1]);\n\n  Poly left;\n  Poly right;\n  for (int i=0; i<ps.size(); i++) {\n    Point a = ps[i];\n    Point b = ps[(i+1)%ps.size()];\n\n    if (ccw(l[0], l[1], a) != CW) left.emplace_back(a);\n    else right.emplace_back(a);\n\n    Line m{a, b};\n    if (IntersectLS(l, m)) {\n      Point p = CrossPointLL(l, m);\n      left.emplace_back(p);\n      right.emplace_back(p);\n    }\n  }\n\n  return make_pair(left, right);\n}\n\nint main() {\n  Point ps[2];\n\n  for (int i=0; i<2; i++) {\n    double x, y;\n    scanf(\"%lf%lf\", &x, &y);\n    ps[i] = {x, y};\n  }\n\n  int q;\n  scanf(\"%d\", &q);\n  while (q--) {\n    double x, y;\n    scanf(\"%lf%lf\", &x, &y);\n    Point p = proj({ps[0], ps[1]}, {x, y});\n    printf(\"%.20f %.20f\\n\", p.X, p.Y);\n    assert (EQ(p, proj({ps[1], ps[0]}, {x, y})));\n  }\n}"
  },
  {
    "language": "C++",
    "code": "\n\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n \nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n \nint main(){\n  int n;\n  double ax,ay,bx,by,cx,cy;\n  cin>>ax>>ay>>bx>>by>>n;\n  while(n--){\n    cin>>cx>>cy;\n    P p=project(P(ax,ay),P(bx,by),P(cx,cy));\n    printf(\"%.8f %.8f\\n\",p.real(),p.imag());\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n\n#define EPS (1e-10)\n#define equals( A, B ) (fabs((A) - (B)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n    Point( double x = 0, double y = 0 ): x(x), y(y) {}\n    \n    Point operator + ( Point p ) { return Point( x + p.x, y + p.y ); }\n    Point operator - ( Point p ) { return Point( x - p.x, y - p.y ); }\n    Point operator * ( double a ) { return Point( a * x, a * y ); }\n    Point operator / ( double a ) { return Point( x / a, y / a ); }\n\n    double abs() { return sqrt( norm() ); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < ( const Point &p ) const {\n\treturn ( x != p.x ) ? x < p.x : y < p.y;\n    }\n\n    bool operator == ( const Point &p ) const {\n\treturn equals( x, p.x ) && equals( y, p.y ); \n    }\n\n    double dot( Point a ) { return x * a.x + y * a.y; }\n    double cross( Point a ) { return x * a.y - y * a.x; }\n};\n\ntypedef Point Vector;\n\nclass Line {\npublic:\n    Point p1, p2;\n    Line( Point p1 = Point(), Point p2 = Point() ) {}\n    // ?????´????????????( cos = 0 )\n    bool isOrthogonal( Line a ) {\n\treturn equals( 0.0, (p1 - p2).dot( a.p1 - a.p2 ) );\n    }\n    // ??????????????????( sin = 0 )\n    bool isParallel( Line a ) {\n\treturn equals( 0.0, (p1 - p2).cross( a.p1 - a.p2 ) );\n    }\n    Point projection( Point p ) {\n\tVector v12 = p2 - p1;\n\tdouble r = v12.dot( p - p1 ) / v12.norm();\n\t\n\treturn p1 + v12 * r;\n    }\n};\n\ntypedef Line Segment;\n\nint main()\n{\n    Point p1, p2, p;\n    int q;\n    Line l12;\n\n    scanf( \"%lf %lf %lf %lf\", &p1.x, &p1.y, &p2.x, &p2.y );\n\n    if ( p1 == p2 ) return 1;\n\n    l12.p1 = p1;\n    l12.p2 = p2;\n\n    scanf( \"%d\", &q );\n    \n    for ( int i = 0; i < q; i++ ) {\n\tscanf( \"%lf %lf\", &p.x, &p.y );\n\t\n\tPoint proj = l12.projection( p );\n\n\tprintf( \"%.10lf %.10lf\\n\", proj.x, proj.y );\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nconst double EPS = 1e-9;\nbool equal(double x,double y){\n    return (fabs(x-y) < EPS);\n}\n\nclass Point{\npublic:\n    double x,y;\n\n    Point(double x=0,double y=0) : x(x),y(y){}\n    Point operator + (Point p){\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator - (Point p){\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator * (double k){\n        return Point(k*x,k*y);\n    }\n\n    double norm(Point p){\n        return p.x*p.x+p.y*p.y;\n    }\n    double norm(){\n        return x*x+y*y;\n    }\n};\n\nclass Segment{\npublic:\n    Point p1,p2;\n    Segment(Point a,Point b) : p1(a) , p2(b) {}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\n// ?????? s1 -> s2?????????p????°???± ????±???????\nPoint project(Segment s,Point p){\n    Vector b = s.p2-s.p1;\n    Vector a = p - s.p1;\n    return s.p1 + b * (dot(a,b) / b.norm());\n}\n\nint main(){\n    double xp1,yp1,xp2,yp2;\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    int q;\n    cin >> q;\n    Segment seg(Point(xp1,yp1),Point(xp2,yp2));\n\n    for(int i=0;i<q;i++){\n        double x,y;cin>>x>>y;\n\n        Point p = project(seg,Point(x,y));\n        printf(\"%.20f %.20f\\n\",p.x,p.y);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct vec{double x;double y;};\ndouble naiseki(vec a,vec b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\nint main()\n{\n\tdouble xp1,xp2,yp1,yp2;\n\tcin>>xp1>>yp1>>xp2>>yp2;\n\tint q;cin>>q;\n\tvec base;\n\tbase.x=xp2-xp1;\n\tbase.y=yp2-yp1;\n\t\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tdouble s,t;\n\t\tcin>>s>>t;\n\t\tvec hypo;\n\t\thypo.x=s-xp1;\n\t\thypo.y=t-yp1;\n\t\tcout<<fixed<<setprecision(10)<<xp1+base.x*naiseki(hypo,base)/naiseki(base,base)<<\" \";\n\t\tcout<<(double)yp1+base.y*naiseki(hypo,base)/naiseki(base,base)<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define next Next\n#define gc getchar\nstruct node{\n\tdouble x,y;\n}a,b;\nnode operator - (node a,node b)\n{\n\treturn (node){a.x-b.x,a.y-b.y};\n}\ndouble DJ(node a,node b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n/*char buf[1<<21],*p1=buf,*p2=buf;\ninline int gc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}*/\ninline int read()\n{\n    int ret=0,f=0;char c=gc();\n    while(!isdigit(c)){if(c=='-')f=1;c=gc();}\n    while(isdigit(c)){ret=ret*10+c-48;c=gc();}\n    if(f)return -ret;return ret;\n}\nsigned main()\n{\n\ta=(node){read(),read()};\n\tb=(node){read(),read()};\n\tint n=read();\n\twhile(n--)\n\t{\n\t\tnode x=(node){read(),read()};\n\t\tdouble xu=DJ(b-a,x-a);\n\t\tdouble jia=DJ(b-a,b-a);\n\t\tdouble hao=xu/jia;\n\t\tprintf(\"%.10lf %.10lf\\n\",a.x+(b.x-a.x)*hao,a.y+(b.y-a.y)*hao);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<complex>\n\ntypedef double type_n;\ntypedef complex<type_n> point;\n\nint main()\n{\n    point a, b, c, z, h;\n    int i, q;\n    type_n a1, a2, b1, b2, z1, z2;\n    scanf(\"%lf %lf %lf %lf\", &a1, &a2, &b1, &b2);\n    a.real(a1), a.imag(a2), b.real(b1), b.imag(b2);\n    c = b - a;\n\n    scanf(\"%d\", &q);\n    for(i = 0; i < q; i++){\n        scanf(\"%lf %lf\", &z1, &z2);\n        z.real(z1), z.imag(z2);\n        h = a + c * (((z - a) / c).real());\n        printf(\"%.12f %.12f\\n\", h.real(), h.imag());\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for (int i = 0; i < n; ++i)\nusing ll = long long;\nusing namespace std;\nconst int INF = 1e9;\n\n//https://dai1741.github.io/maximum-algo-2012/cpp/geometry/geometries2d.h\n\n/* 基本要素 */\ntypedef double D;     // 座標値の型。doubleかlong doubleを想定\ntypedef complex<D> P; // Point\ntypedef pair<P, P> L; // Line\ntypedef vector<P> VP;\nconst D EPS = 1e-9; // 許容誤差。問題によって変える\n#define X real()\n#define Y imag()\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n#define EQ(n, m) (abs((n) - (m)) < EPS)\n\n// 内積　dot(a,b) = |a||b|cosθ\nD dot(P a, P b) {\n    return (conj(a) * b).X;\n}\n// 外積　cross(a,b) = |a||b|sinθ\nD cross(P a, P b) {\n    return (conj(a) * b).Y;\n}\n\n// 点の進行方向\nint ccw(P a, P b, P c) {\n    b -= a;\n    c -= a;\n    if (cross(b, c) > EPS)\n        return +1; // counter clockwise\n    if (cross(b, c) < -EPS)\n        return -1; // clockwise\n    if (dot(b, c) < -EPS)\n        return +2; // c--a--b on line\n    if (norm(b) < norm(c))\n        return -2; // a--b--c on line or a==b\n    return 0;      // a--c--b on line or a==c or b==c\n}\n\n/* 交差判定　直線・線分は縮退してはならない。接する場合は交差するとみなす。isecはintersectの略 */\n\n// 直線と点\nbool isecLP(P a1, P a2, P b) {\n    return abs(ccw(a1, a2, b)) != 1; // return EQ(cross(a2-a1, b-a1), 0); と等価\n}\n\n// 直線と直線\nbool isecLL(P a1, P a2, P b1, P b2) {\n    return !isecLP(a2 - a1, b2 - b1, 0) || isecLP(a1, b1, b2);\n}\n\n// 直線と線分\nbool isecLS(P a1, P a2, P b1, P b2) {\n    return cross(a2 - a1, b1 - a1) * cross(a2 - a1, b2 - a1) < EPS;\n}\n\n// 線分と線分\nbool isecSS(P a1, P a2, P b1, P b2) {\n    return ccw(a1, a2, b1) * ccw(a1, a2, b2) <= 0 &&\n           ccw(b1, b2, a1) * ccw(b1, b2, a2) <= 0;\n}\n\n// 線分と点\nbool isecSP(P a1, P a2, P b) {\n    return !ccw(a1, a2, b);\n}\n\n/* 距離　各直線・線分は縮退してはならない */\n\n// 点pの直線aへの射影点を返す\nP proj(P a1, P a2, P p) {\n    return a1 + dot(a2 - a1, p - a1) / norm(a2 - a1) * (a2 - a1);\n}\n\n// 点pの直線aへの反射点を返す\nP reflection(P a1, P a2, P p) {\n    return 2.0 * proj(a1, a2, p) - p;\n}\n\nD distLP(P a1, P a2, P p) {\n    return abs(proj(a1, a2, p) - p);\n}\n\nD distLL(P a1, P a2, P b1, P b2) {\n    return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\nD distLS(P a1, P a2, P b1, P b2) {\n    return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\nD distSP(P a1, P a2, P p) {\n    P r = proj(a1, a2, p);\n    if (isecSP(a1, a2, r))\n        return abs(r - p);\n    return min(abs(a1 - p), abs(a2 - p));\n}\n\nD distSS(P a1, P a2, P b1, P b2) {\n    if (isecSS(a1, a2, b1, b2))\n        return 0;\n    return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)),\n               min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\n// 2直線の交点\nP crosspointLL(P a1, P a2, P b1, P b2) {\n    D d1 = cross(b2 - b1, b1 - a1);\n    D d2 = cross(b2 - b1, a2 - a1);\n    if (EQ(d1, 0) && EQ(d2, 0))\n        return a1; // same line\n    if (EQ(d2, 0))\n        throw \"kouten ga nai\"; // 交点がない\n    return a1 + d1 / d2 * (a2 - a1);\n}\n\n/* 円 */\n\nD distLC(P a1, P a2, P c, D r) {\n    return max(distLP(a1, a2, c) - r, 0.0);\n}\n\nD distSC(P a1, P a2, P c, D r) {\n    D dSqr1 = norm(c - a1), dSqr2 = norm(c - a2);\n    if (dSqr1 < r * r ^ dSqr2 < r * r)\n        return 0; // 円が線分を包含するとき距離0ならここをORに変える\n    if (dSqr1 < r * r & dSqr2 < r * r)\n        return r - sqrt(max(dSqr1, dSqr2));\n    return max(distSP(a1, a2, c) - r, 0.0);\n}\n\nVP crosspointLC(P a1, P a2, P c, D r) {\n    VP ps;\n    P ft = proj(a1, a2, c);\n    if (!GE(r * r, norm(ft - c)))\n        return ps;\n\n    P dir = sqrt(max(r * r - norm(ft - c), 0.0)) / abs(a2 - a1) * (a2 - a1);\n    ps.push_back(ft + dir);\n    if (!EQ(r * r, norm(ft - c)))\n        ps.push_back(ft - dir);\n    return ps;\n}\n\nD distCC(P a, D ar, P b, D br) {\n    D d = abs(a - b);\n    return GE(d, abs(ar - br)) ? max(d - ar - br, 0.0) : abs(ar - br) - d;\n}\n\n// 2円の交点\nVP crosspointCC(P a, D ar, P b, D br) {\n    VP ps;\n    P ab = b - a;\n    D d = abs(ab);\n    D crL = (norm(ab) + ar * ar - br * br) / (2 * d);\n    if (EQ(d, 0) || ar < abs(crL))\n        return ps;\n\n    P abN = ab * P(0, sqrt(ar * ar - crL * crL) / d);\n    P cp = a + crL / d * ab;\n    ps.push_back(cp + abN);\n    if (!EQ(norm(abN), 0))\n        ps.push_back(cp - abN);\n    return ps;\n}\n\n// 点pから円aへの接線の接点\nVP tangentPoints(P a, D ar, P p) {\n    VP ps;\n    D sin = ar / abs(p - a);\n    if (!LE(sin, 1))\n        return ps; // ここでNaNも弾かれる\n    D t = M_PI_2 - asin(min(sin, 1.0));\n    ps.push_back(a + (p - a) * polar(sin, t));\n    if (!EQ(sin, 1))\n        ps.push_back(a + (p - a) * polar(sin, -t));\n    return ps;\n}\n\n// 2円の共通接線。返される各直線に含まれる頂点は円との接点となる\nvector<L> tangentLines(P a, D ar, P b, D br) {\n    vector<L> ls;\n    D d = abs(b - a);\n    rep(i, 2) {\n        D sin = (ar - (1 - i * 2) * br) / d;\n        if (!LE(sin * sin, 1))\n            break;\n        D cos = sqrt(max(1 - sin * sin, 0.0));\n        rep(j, 2) {\n            P n = (b - a) * P(sin, (1 - j * 2) * cos) / d;\n            ls.push_back(L(a + ar * n, b + (1 - i * 2) * br * n));\n            if (cos < EPS)\n                break; // 重複する接線を無視（重複していいならこの行不要）\n        }\n    }\n    return ls;\n}\n\n// 三角形の外心。点a,b,cは同一線上にあってはならない\nP circumcenter(P a, P b, P c) {\n    a = (a - c) * 0.5;\n    b = (b - c) * 0.5;\n    return c + crosspointLL(a, a * P(1, 1), b, b * P(1, 1));\n}\n\n// 点aと点bを通り、半径がrの円の中心を返す\nVP circlesPointsRadius(P a, P b, D r) {\n    VP cs;\n    P abH = (b - a) * 0.5;\n    D d = abs(abH);\n    if (d == 0 || d > r)\n        return cs;              // 必要なら !LE(d,r) として円1つになる側へ丸める\n    D dN = sqrt(r * r - d * d); // 必要なら max(r*r - d*d, 0) とする\n    P n = abH * P(0, 1) * (dN / d);\n    cs.push_back(a + abH + n);\n    if (dN > 0)\n        cs.push_back(a + abH - n);\n    return cs;\n}\n\n// 点aと点bを通り、直線lに接する円の中心\nVP circlesPointsTangent(P a, P b, P l1, P l2) {\n    P n = (l2 - l1) * P(0, 1);\n    P m = (b - a) * P(0, 0.5);\n    D rC = dot((a + b) * 0.5 - l1, n);\n    D qa = norm(n) * norm(m) - dot(n, m) * dot(n, m);\n    D qb = -rC * dot(n, m);\n    D qc = norm(n) * norm(m) - rC * rC;\n    D qd = qb * qb - qa * qc; // qa*k^2 + 2*qb*k + qc = 0\n\n    VP cs;\n    if (qd < -EPS)\n        return cs;\n    if (EQ(qa, 0)) {\n        if (!EQ(qb, 0))\n            cs.push_back((a + b) * 0.5 - m * (qc / qb / 2));\n        return cs;\n    }\n    D t = -qb / qa;\n    cs.push_back((a + b) * 0.5 + m * (t + sqrt(max(qd, 0.0)) / qa));\n    if (qd > EPS)\n        cs.push_back((a + b) * 0.5 + m * (t - sqrt(max(qd, 0.0)) / qa));\n    return cs;\n}\n\n// 点集合を含む最小の円の中心\nP minEnclosingCircle(const VP &ps) {\n    P c;\n    double move = 0.5;\n    rep(i, 39) { // 2^(-39-1) \\approx 0.9e-12\n        rep(t, 50) {\n            D max = 0;\n            int k = 0;\n            rep(j, ps.size()) if (max < norm(ps[j] - c)) {\n                max = norm(ps[j] - c);\n                k = j;\n            }\n            c += (ps[k] - c) * move;\n        }\n        move /= 2;\n    }\n    return c;\n}\n\n/* 多角形 */\n\n// 頂点の順序（sortやmax_elementに必要）\nnamespace std {\nbool operator<(const P a, const P b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n}\n} // namespace std\n\n// 凸包\nVP convexHull(VP ps) { // 元の点集合がソートされていいならVP&に\n    int n = ps.size(), k = 0;\n    sort(ps.begin(), ps.end());\n    VP ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n        while (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;                                              // 余計な点も含むなら == -1 とする\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n        while (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\n// 凸判定。縮退を認めないならccwの判定部分を != 1 とする\nbool isCcwConvex(const VP &ps) {\n    int n = ps.size();\n    rep(i, n) if (ccw(ps[i], ps[(i + 1) % n], ps[(i + 2) % n]) == -1) return false;\n    return true;\n}\n\n// 凸多角形の内部判定　O(n)\n// 点が領域内部なら1、境界上なら2、外部なら0を返す\nint inConvex(P p, const VP &ps) {\n    int n = ps.size();\n    int dir = ccw(ps[0], ps[1], p);\n    rep(i, n) {\n        int ccwc = ccw(ps[i], ps[(i + 1) % n], p);\n        if (!ccwc)\n            return 2; // 線分上に存在\n        if (ccwc != dir)\n            return 0;\n    }\n    return 1;\n}\n\n// 凸多角形の内部判定　O(logn)\n// 点が領域内部なら1、境界上なら2、外部なら0を返す\nint inCcwConvex(const VP &ps, P p) {\n    int n = ps.size();\n    P g = (ps[0] + ps[n / 3] + ps[n * 2 / 3]) / 3.0;\n    if (g == p)\n        return 1;\n    P gp = p - g;\n\n    int l = 0, r = n;\n    while (l + 1 < r) {\n        int mid = (l + r) / 2;\n        P gl = ps[l] - g;\n        P gm = ps[mid] - g;\n        if (cross(gl, gm) > 0) {\n            if (cross(gl, gp) >= 0 && cross(gm, gp) <= 0)\n                r = mid;\n            else\n                l = mid;\n        } else {\n            if (cross(gl, gp) <= 0 && cross(gm, gp) >= 0)\n                l = mid;\n            else\n                r = mid;\n        }\n    }\n    r %= n;\n    D cr = cross(ps[l] - p, ps[r] - p);\n    return EQ(cr, 0) ? 2 : cr < 0 ? 0 : 1;\n}\n\n// 多角形の内部判定\n// 点が領域内部なら1、境界上なら2、外部なら0を返す\nint inPolygon(const VP &ps, P p) {\n    int n = ps.size();\n    bool in = false;\n    rep(i, n) {\n        P a = ps[i] - p;\n        P b = ps[(i + 1) % n] - p;\n        if (EQ(cross(a, b), 0) && LE(dot(a, b), 0))\n            return 2;\n        if (a.Y > b.Y)\n            swap(a, b);\n        if ((a.Y * b.Y < 0 || (a.Y * b.Y < EPS && b.Y > EPS)) && LE(cross(a, b), 0))\n            in = !in;\n    }\n    return in;\n}\n\n// 凸多角形クリッピング\nVP convexCut(const VP &ps, P a1, P a2) {\n    int n = ps.size();\n    VP ret;\n    rep(i, n) {\n        int ccwc = ccw(a1, a2, ps[i]);\n        if (ccwc != -1)\n            ret.push_back(ps[i]);\n        int ccwn = ccw(a1, a2, ps[(i + 1) % n]);\n        if (ccwc * ccwn == -1)\n            ret.push_back(crosspointLL(a1, a2, ps[i], ps[(i + 1) % n]));\n    }\n    return ret;\n}\n\n// 凸多角形の直径（最遠点対）\npair<int, int> convexDiameter(const VP &ps) {\n    int n = ps.size();\n    int i = min_element(ps.begin(), ps.end()) - ps.begin();\n    int j = max_element(ps.begin(), ps.end()) - ps.begin();\n    int maxI, maxJ;\n    D maxD = 0;\n    rep(_, 2 * n) {\n        if (maxD < norm(ps[i] - ps[j])) {\n            maxD = norm(ps[i] - ps[j]);\n            maxI = i;\n            maxJ = j;\n        }\n        if (cross(ps[i] - ps[(i + 1) % n], ps[(j + 1) % n] - ps[j]) <= 0)\n            j = (j + 1) % n;\n        else\n            i = (i + 1) % n;\n    }\n    return make_pair(maxI, maxJ);\n}\n\n// 多角形の符号付面積\nD area(const VP &ps) {\n    D a = 0;\n    rep(i, ps.size()) a += cross(ps[i], ps[(i + 1) % ps.size()]);\n    return a / 2;\n}\n\n// 多角形の幾何学的重心\nP centroid(const VP &ps) {\n    int n = ps.size();\n    D aSum = 0;\n    P c;\n    rep(i, n) {\n        D a = cross(ps[i], ps[(i + 1) % n]);\n        aSum += a;\n        c += (ps[i] + ps[(i + 1) % n]) * a;\n    }\n    return 1 / aSum / 3 * c;\n}\n\n// ボロノイ領域\nVP voronoiCell(P p, const VP &ps, const VP &outer) {\n    VP cl = outer;\n    rep(i, ps.size()) {\n        if (EQ(norm(ps[i] - p), 0))\n            continue;\n        P h = (p + ps[i]) * 0.5;\n        cl = convexCut(cl, h, h + (ps[i] - h) * P(0, 1));\n    }\n    return cl;\n}\n\n/* 幾何グラフ */\n\nstruct Edge {\n    int from, to;\n    D cost;\n    Edge(int from, int to, D cost) : from(from), to(to), cost(cost) {}\n};\nstruct Graph {\n    int n;\n    vector<vector<Edge>> edges;\n    Graph(int n) : n(n), edges(n) {}\n    void addEdge(Edge e) {\n        edges[e.from].push_back(e);\n        edges[e.to].push_back(Edge(e.to, e.from, e.cost));\n    }\n};\n\n// 線分アレンジメント（線分の位置関係からグラフを作成）\nGraph segmentArrangement(const vector<L> &segs, VP &ps) {\n    int n = segs.size();\n    rep(i, n) {\n        ps.push_back(segs[i].first);\n        ps.push_back(segs[i].second);\n        rep(j, i) {\n            if (isecSS(segs[i].first, segs[i].second, segs[j].first, segs[j].second))\n                ps.push_back(crosspointLL(segs[i].first, segs[i].second, segs[j].first, segs[j].second));\n        }\n    }\n    sort(ps.begin(), ps.end());\n    ps.erase(unique(ps.begin(), ps.end()), ps.end());\n\n    int m = ps.size();\n    Graph gr(m);\n    vector<pair<D, int>> list;\n    rep(i, n) {\n        list.clear();\n        rep(j, m) {\n            if (isecSP(segs[i].first, segs[i].second, ps[j]))\n                list.push_back(make_pair(norm(segs[i].first - ps[j]), j));\n        }\n        sort(list.begin(), list.end());\n        rep(j, list.size() - 1) {\n            int a = list[j].second;\n            int b = list[j + 1].second;\n            gr.addEdge(Edge(a, b, abs(ps[a] - ps[b])));\n        }\n    }\n    return gr;\n}\n\n// 可視グラフ（点集合から見える位置へ辺を張ったグラフ）\nGraph visibilityGraph(const VP &ps, const vector<VP> &objs) {\n    int n = ps.size();\n    Graph gr(n);\n    rep(i, n) rep(j, i) {\n        P a = ps[i], b = ps[j];\n        if (!EQ(norm(a - b), 0))\n            rep(k, objs.size()) {\n                const VP &obj = objs[k];\n                int inStA = inConvex(a, obj);\n                int inStB = inConvex(b, obj);\n                if ((inStA ^ inStB) % 2 || inStA * inStB != 1 && inConvex((a + b) * 0.5, obj) == 1)\n                    goto skip;\n                rep(l, obj.size()) {\n                    P cur = obj[l];\n                    P next = obj[(l + 1) % obj.size()];\n                    if (isecSS(a, b, cur, next) && !isecSP(cur, next, a) && !isecSP(cur, next, b))\n                        goto skip;\n                }\n            }\n        gr.addEdge(Edge(i, j, abs(a - b)));\n    skip : {}\n    }\n    return gr;\n}\nint main() {\n    D x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    int Q;\n    cin >> Q;\n    rep(i, Q) {\n        D x, y;\n        cin >> x >> y;\n\n        P ans = proj({x1, y1}, {x2, y2}, {x, y});\n        printf(\"%.10f %.10f\\n\", ans.real(), ans.imag());\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for (int i = 0; i < (n); i++)\n#define repd(i,a,b) for (int i = (a); i < (b); i++)\n#define INF LLONG_MAX\ntypedef long long ll;\nvoid bibs_swap(vector<int>& v, int k)\n{\n\trep(i, v.size()-1) if(v.at(i)%k>v.at(i+1)%k) swap(v.at(i), v.at(i+1));\n}\n\nvoid show(vector<int> v)\n{\n\trep(i, v.size()) cout << v.at(i) << endl;\n}\n\nint main(void)\n{\n\tdouble a, b, c, d, e, f, ans_x, ans_y;\n\tcin >> a >> b >> c >> d;\n\tdouble p1p2_inc;\n\tif(a-c != 0) p1p2_inc = (b-d)/(a-c);\n\telse p1p2_inc = 0;\n\tdouble px_inc;\n\tif(p1p2_inc != 0)  px_inc = -1/p1p2_inc;\n\telse  px_inc = 0;\n\tdouble p1p2_sec;\n\tif(a==0 && b==0) p1p2_sec = -p1p2_inc*c + d;\n\telse p1p2_sec = -p1p2_inc*a + b;\n\tint q;\n\tcin >> q;\n\trep(i, q)\n\t{\n\t\tcin >> e >> f;\n\t\tif(a==c) cout << a << \" \" << f << endl;\n\t\telse if(b==d) cout << e << \" \" << b << endl;\n\t\telse\n\t\t{\n\t\t    double px_sec = -px_inc*e + f;\n\t\t    ans_x = -(p1p2_sec - px_sec) / (p1p2_inc - px_inc);\n\t\t    ans_y = p1p2_inc*ans_x + p1p2_sec;\n\t\t    printf(\"%.9f %.9f\\n\", ans_x, ans_y);\n\t\t}\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define double long double\n\nusing namespace std;\n\nint main()\n{\n    //freopen(\"INP.INP\", \"r\", stdin);\n    //freopen(\"OUT.OUT\", \"w\", stdout);\n\n    double x1, y1, x2, y2;\n\n    cin >> x1 >> y1 >> x2 >> y2 ;\n\n    int q;\n\n    cin >> q;\n    while (q--) {\n        double x0, y0;\n        cin >> x0 >> y0;\n\n        double xM, yM;\n\n        double alpha = x0 * (x2 - x1) + y0 * (y2 - y1);\n        double beta = x1 * (y2 - y1) - y1 * (x2 - x1);\n        double a = x2 - x1, b = y2 - y1;\n\n        /*if (a != 0) xM = (alpha - (beta * a * b + alpha * b) / (a * a + b * b)) / a;\n        else xM = x1;\n\n        if (b != 0) yM = (beta * a + alpha) / (a * a + b * b);\n        else yM = y1;*/\n\n        if (a != 0) xM = (alpha - (alpha * b * b - beta * a * b) / (a * a + b * b)) / a;\n        else xM = x1;\n\n        if (b != 0) yM = - (((beta * a) - (alpha * b)) / (a * a + b * b));\n        else yM = y1;\n\n       // cerr << \"alpha, beta: \" << alpha << \" \" << beta << '\\n';\n\n       // cerr << \"a, b: \" << a << \" \" << b << '\\n';\n\n        cout << fixed << setprecision(10) << xM << \" \" << yM << '\\n';\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    float x, y;\n    \n    Vector() {\n        x = 0.f;\n        y = 0.f;\n    }\n    \n    Vector(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void set(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void setX(float nx) {\n        x = nx;\n    }\n    \n    void setY(float ny) {\n        y = ny;\n    }\n    \n    // ベクトルの大きさを求める\n    float getMagnitude() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 内積を求める\n    float getScalar(const Vector& vec) {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 角度を求める\n    float getAngle(const Vector& vec) {\n        return getScalar(vec) / (getMagnitude() * vec.getMagnitude());\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() {\n        Vector v;\n        float mag = getMagnitude();\n        if (mag == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / mag, y / mag);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (float f) {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) {\n        Vector v;\n        if (vec.x == 0.f) {\n            v.setX(0.f);\n        } else {\n            v.setX(x / vec.x);\n        }\n        \n        if (vec.y == 0.f) {\n            v.setY(0.f);\n        } else {\n            v.setY(y / vec.y);\n        }\n        return v;\n    }\n    \n    Vector operator / (float f) {\n        Vector v;\n        if (f == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.f) {\n            x = 0.f;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.f) {\n            y = 0.f;\n        } else {\n            y /= vec.y;\n        }\n    }\n};\n\n\nint main() {\n    Vector vec1, vec2;\n    int x, y;\n    cin >> x;\n    cin >> y;\n    vec1.set(x,y);\n    cin >> x;\n    cin >> y;\n    vec2.set(x,y);\n    \n    int n;\n    cin >> n;\n    \n    Vector vec = vec2 - vec1;\n    Vector p, ret;\n    for (int i = 0; i < n; i++) {\n        int px, py;\n        cin >> px;\n        cin >> py;\n        p.set(px, py);\n        p -= vec1;\n        \n        float cos = p.getAngle(vec);\n        float size = p.getMagnitude() * cos;\n        ret = vec.getUnit() * size;\n        \n        cout << ret.x << \" \" << ret.y << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <algorithm>\n#include <string.h>\n#include <math.h>\n#define IOS ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n#define int long long\nusing namespace std;\nvoid Main()\n{\n    int T,n,k;\n    cin>>T;\n    while(T--)\n    {\n        cin>>n>>k;\n        if(!n)\n        {\n            cout<<\"Bob\"<<endl;\n            continue;\n        }\n        if(k % 3 != 0) cout<<(n % 3 == 0 ? \"Bob\" : \"Alice\")<<endl;\n        else\n        {\n            if(n %(k+1) == 0)\n            {\n                cout<<\"Bob\"<<endl;\n                continue;\n            }\n            int num = (n %(k+1) -1) / 3;\n            if(num == (k-1)/3) cout<<\"Alice\"<<endl;\n            else cout<<(n % (k+1) %3 == 0 ? \"Bob\" : \"Alice\")<<endl;\n        }\n    }\n}\nint32_t main()\n{\n    IOS;\n    double x1,x2,xp,y1,y2,yp,s,ansx,ansy;\n    int q;\n    bool Xt = false,Yt = false;\n    scanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n    scanf(\"%d\",&q);\n\n    if(y1 == y2)\n    {\n        Xt = true;\n    }\n    else if(x1 == x2)\n    {\n        Yt = true;\n    }\n    else\n    {\n        s= (y2-y1)/(x2-x1);\n    }\n\n    for(int i=0; i<q; i++)\n    {\n        scanf(\"%lf %lf\",&xp,&yp);\n        if(Xt)\n        {\n            printf(\"%.10lf %.10lf\\n\",xp,y1);\n        }\n        else if(Yt)\n        {\n            printf(\"%.10lf %.10lf\\n\",x1,yp);\n        }\n        else\n        {\n            ansx = (yp*(x2-x1)*(y2-y1)+xp*(x2-x1)*(x2-x1)-y1*(y2-y1)*(x2-x1)+x1*(y2-y1)*(y2-y1))/((y2-y1)*(y2-y1)+(x2-x1)*(x2-x1));\n            ansy = ((x1-x2)*ansx+yp*(y2-y1)+xp*(x2-x1))/(y2-y1);\n            printf(\"%.10lf %.10lf\\n\",ansx,ansy);\n        }\n\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "/*\n幾何\nhttps://gist.github.com/zeptometer/3719669\n複素数平面による幾何ライブラリ←もっと短くなる可能生アリ\nhttp://osrehun.hatenadiary.jp/entry/2016/12/31/145827\n\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing DD=double;\n\n\n#define EPS 1e-10\n#define eq(a,b) (abs( (a) - (b) )<EPS)\nconst DD PI=acosl(-1.0);\nconstexpr DD INF=1LL<<62;\n\n//点\nusing P=complex<DD>;\n//ベクトル\nusing V=P;\n//線分\nstruct Segment{\n    P a,b;\n    Segment()=default;\n    Segment(P a,P b) :a(a),b(b){}\n    Segment(DD ax,DD ay,DD bx,DD by):a(ax,ay),b(bx,by){}\n\n};\n//直線\nusing Line=Segment;\n//円\nstruct Circle{\n    P p;\n    DD r;\n    Circle()=default;\n    Circle(P p,DD r):p(p),r(r){}\n};\nusing Polygon=vector<P>;\n\n//++++++++++++++++基本計算++++++++++++++//\ninline DD torad(const DD &deg){return deg*PI/180;}\ninline DD todeg(const DD &rad){return rad*180/PI;}\n//内積\ninline DD dot(const V &a,const V &b){\n    return real(a*conj(b));\n}\n//外積\ninline DD cross(const V &a,const V &b){\n    return imag(conj(a)*b);\n}\n//ベクトルvを反時計回りにr度回転\ninline V rotate(const V &v,const DD r){\n    return v*V(cos(r),sin(r));\n}\ninline bool xy(const P &a,const P &b){\n    if(real(a)+EPS<=real(b)) return true;\n    if(eq(real(a),real(b)) && imag(a)+EPS<imag(b)) return true;\n    return false;\n}\ninline bool yx(const P &a,const P &b){\n    if(imag(a)+EPS<imag(b)) return true;\n    if(eq(imag(a),imag(b)) && real(a)+EPS<real(b)) return true;\n    return false;\n}\n\n//++++++++++++++++平行や直交+++++++++++++++//\ninline bool isOrthogonal(V &a,V &b){\n    return eq(dot(a,b),0.0);\n}\ninline bool isOrthogonal(Segment &a,Segment &b){\n    return eq(dot(a.a-a.b,b.a-b.b),0);\n}\ninline bool isParallel(V &a,V &b){\n    return eq(cross(a,b),0.0);\n}\ninline bool isParallel(Segment &a,Segment &b){\n    return eq(cross(a.a-a.b,b.a-b.b),0);\n}\n//線分a-bに対してcがどの位置にあるか\n//ccwの簡略版 反時計回り:1 時計回り:-1 直線上:0\ninline int ccw(P &a,P &b,P &c){\n    DD cr=cross(b-a,c-a);\n    if(cr>EPS) return 1;\n    if(cr<-EPS) return -1;\n    return 0;\n}\n\n//線分a-bに対してcがどの位置にあるか\n//反時計回り:1　時計回り:-1 直線上(a,b,c:-2 a,c,b:0 c,a,b:2) \ninline int ccwH(P &a,P &b,P &c){\n    b-=a;c-=a;\n    if(cross(b,c)>EPS) return 1;\n    if(cross(b,c)<-EPS) return -1;\n    if(dot(b,c)<-EPS) return 2;\n    if(norm(b)<norm(c)) return -2;\n    return 0;\n}\n\n\n//+++++++++++++++射影+++++++++++++++++++++//\ninline P project(const P &p,const Segment &s){\n    V base=s.b-s.a;\n    DD r=dot(p-s.a,base)/norm(base);\n    return s.a+base*r;\n}\ninline P reflect(const P &p,const Segment &s){\n    return p+(project(p,s)-p)*2.0;\n}\n/*++++++++++点との距離++++++++++++++++++*/\n//点と直線の距離\ninline DD dis(P p,Line l){return abs(cross(l.b-l.a,p-l.a))/abs(l.b-l.a);}\n//点と線分の距離\ninline DD disPS(P p,Segment s){\n    if( dot(s.b-s.a,p-s.a)<0.0 ) return abs(p-s.a);\n    if( dot(s.a-s.b,p-s.b)<0.0 ) return abs(p-s.b);\n    return dis(p,s); //点と直線の距離\n}\n\n\n//+++++++++++++++線分と直線+++++++++++++++++//\n\n//線分a-b,c-dは交差するか?\ninline bool intersect(P a,P b,P c,P d){\n    return(ccwH(a,b,c)*ccwH(a,b,d)<=0 && ccwH(c,d,a)*ccwH(c,d,b)<=0);\n}\n//線分s,tは交差するか？\ninline bool intersect(Segment s,Segment t){\n    return intersect(s.a,s.b,t.a,t.b);\n}\n//線分と線分の交点\n//これをやる前にintersectで判定\ninline P crossPoint(Segment s,Segment t){\n    V base=t.b-t.a;\n    DD d1=abs(cross(base,s.a-t.a));\n    DD d2=abs(cross(base,s.b-t.a));\n    DD r=d1/(d1+d2);\n    return s.a+(s.b-s.a)*r;\n}\n//線分と線分の距離\ninline DD dis(Segment s,Segment t){\n    if(intersect(s,t)) return 0.0;\n    return min(min(disPS(t.a,s),disPS(t.b,s)),min(disPS(s.a,t),disPS(s.b,t)) );\n}\n\n//+++++++++++円++++++++++++++++//\n\n//円cと直線lの交点\n//abs(l,c.p)<c.r+EPSが必要\npair<P,P> crossPoint(Line l,Circle c){\n    P pr=project(c.p,l);\n    V e=(l.b-l.a)/(abs(l.b-l.a));\n    DD base=sqrt(c.r*c.r-norm(pr-c.p));\n    return make_pair(pr+e*base,pr-e*base);\n}\n//線分sと円cの交点\nvector<P> crossPointSC(Segment s,Circle c){\n    vector<P> ret;\n    if(dis(c.p,s)>=c.r+EPS) return ret;\n    auto p=crossPoint(s,c);\n    if(dot(p.first-s.a,s.b-s.a)>0 && dot(p.first-s.b,s.a-s.b)>0) ret.push_back(p.first);\n    if(dot(p.second-s.a,s.b-s.a)>0 && dot(p.second-s.b,s.a-s.b)>0) ret.push_back(p.second);\n    if(xy(s.a,s.b)) sort(ret.begin(),ret.end(),xy);\n    else sort(ret.rbegin(),ret.rend(),xy);\n    return ret;\n}\n\n//共通接線の数\n//離れている:4 外接:3 交わる:2 内接:1 内包:0\ninline int intersect(Circle a,Circle b){\n    DD d=abs(a.p-b.p);\n    if(d>a.r+b.r+EPS) return 4;\n    if(eq(d,a.r+b.r)) return 3;\n    if(eq(d,abs(a.r-b.r))) return 1;\n    if(d<abs(a.r-b.r)-EPS) return 0;\n    return 2;\n}\n\n//円c1と円c2の交点\n//これを使う前に交点があるかどうかを判定する\nvector<P> crossPoint(Circle a,Circle b){\n    vector<P> ret;\n    if(abs(a.p-b.p)<a.r+b.r+EPS) return ret;\n    DD d=abs(a.p-b.p);\n    DD s=acos((a.r*a.r+d*d-b.r*b.r)/(2*a.r*d));\n    DD t=arg(b.p-a.p);\n    if(eq(s,0)) ret.emplace_back(a.p+polar(a.r,t+s));\n    else ret.emplace_back(a.p+polar(a.r,t+s)),ret.emplace_back(a.p+polar(a.r,t-s));\n    return ret;\n}\n\n//pがcの外にあるかの判定が必要\nvector<P> TanLine(P &p,Circle &c){\n    vector<P> ret;\n    DD d=abs(p-c.p);\n    if(d<=c.r-EPS) return ret;\n    if(eq(d,c.r)){\n        ret.push_back(p);\n        return ret;\n    } \n    return crossPoint(c,Circle(p,sqrt(d*d-c.r*c.r)));\n}\n//https://ei1333.github.io/luzhiled/snippets/geometry/template.html\n//↑すごい。丸写し\n//円c1,c2の共通接線\n//接点をつないで線にしている(１個だけ追加するときに注意)\nvector<Line> TanLine(Circle a,Circle b){\n    vector<Line> ret;\n    if(a.r<b.r) swap(a,b);\n    DD g=abs(a.p-b.p);\n    if(eq(g,0)) return ret;\n    V u=(b.p-a.p)/g;\n    V v=rotate(u,PI*0.5);\n    for(DD s:{-1,1}){\n        DD h=(a.r+s*b.r)/g;\n        if(eq(1-h*h,0)){\n            ret.emplace_back(a.p+u*a.r,a.p+(u+v)*a.r);\n        }else if(1-h*h>0){\n            V uu=u*h,vv=v*sqrt(1-h*h);\n            ret.emplace_back(a.p+(uu+vv)*a.r,b.p-(uu+vv)*b.r*s);\n            ret.emplace_back(a.p+(uu-vv)*a.r,b.p-(uu-vv)*b.r*s);\n        }\n    }\n    return ret;\n}\n\n/*+++++++++++++++++++三角形+++++++++++++++++*/\n//外心\n//isParallel()を使って判定を忘れずに\nP circumcenter(P a,P b,P c){\n    P ab=(a+b)/2.0,bc=(b+c)/2.0;\n    Segment s(ab,ab+polar(1.0,arg(b-a)+PI*0.5));\n    Segment t(bc,bc+polar(1.0,arg(c-b)+PI*0.5));\n    return crossPoint(s,t);\n}\n\n/*+++++++++++++++++++多角形+++++++++++++++++++*/\n//IN:2 ON:1 OUT:0\n//点がどの位置にあるか\nint contains(P p,Polygon g){\n    int n=(int)g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        V a=g[i]-p,b=g[(i+1)%n]-p;\n        if(eq(cross(a,b),0) && dot(a,b)<EPS) return 1;\n        if(imag(a)>imag(b)) swap(a,b);\n        if(imag(a)<EPS && EPS<imag(b) && cross(a,b)>EPS) x=!x;\n    }\n    return (x?2:0);\n}\n//凸性判定\nbool isConvex(Polygon &g){\n    int n=(int)g.size();\n    int flag=0;\n    int t;\n    for(int i=0;i<n;i++){\n        V a(g[(i+1)%n]-g[i]),b(g[(i+2)%n]-g[i]);\n        if(cross(a,b)>EPS) t=1;\n        else if(cross(a,b)<-EPS) t=-1;\n        else continue;\n        if(flag==-t) return false;\n        flag=t;\n    }\n    return true;\n}\n\n//凸包　アンドリューのアルゴリズム\n//https://github.com/drken1215/algorithm/blob/master/Geometry/All.cpp←螺旋本より早そう\n//j=1:返上の点を含まない　j=-1:含む\n//反時計回りの多角形を返す\nPolygon ConvexHull(Polygon &s,int j){\n    int sz=(int)s.size();\n    if(sz<3) return s;\n    sort(s.begin(),s.end(),yx);\n\n    int n=0;\n    Polygon res(2*sz);\n    for(int i=0;i<sz;i++){\n        while(n>=2 && cross(res[n-1]-res[n-2],s[i]-res[n-2])<EPS*j){\n            n--;\n        }\n        res[n]=s[i];\n        n++;\n    }\n    int t=n+1;\n    for(int i=sz-2;i>=0;i--){\n        while(n>=t && cross(res[n-1]-res[n-2],s[i]-res[n-2])<EPS*j){\n            n--;\n        }\n        res[n]=s[i];\n        n++;\n    }\n    res.resize(n-1);\n    return res;\n}\n\n//符号付き面積\n//反時計回りの図形なら正\n//https://imagingsolution.net/math/calc_n_point_area/\nDD Area(const Polygon &g){\n    DD ret=0.0;\n    int n=(int)g.size();\n    for(int i=0;i<n;i++){\n        ret+=cross(g[i],g[(i+1)%n]);\n    }\n    return ret/2.0L;\n}\n\n//反時計回り\n//理解が浅い←大体分かった（本当か？）\nDD Diameter(Polygon &g){\n    g=ConvexHull(g,1);\n    int gz=g.size();\n    int m=0,M=0;\n    for(int i=1;i<gz;i++){\n        if(imag(g[i])<imag(g[m])) m=i;\n        if(imag(g[i])>imag(g[M])) M=i;\n    }\n    DD ret=0;\n    int sm=m,sM=M;\n    while(m!=sM || M!=sm){\n        ret=max(ret,norm(g[m]-g[M]));\n        if(cross(g[(m+1)%gz]-g[m],g[(M+1)%gz]-g[M])<0) m=(m+1)%gz;\n        else M=(M+1)%gz;\n    }\n    return sqrt(ret);\n}\n\n//凸多角形gをlで切断\n//l.p1-l.p2の左側\n//gは反時計回り→反時計回りで返す\n//時計回り→時計回り\nPolygon ConvexCut(const Polygon &g,Line l){\n    Polygon ret;\n    int gz=(int)g.size();\n    for(int i=0;i<gz;i++){\n        P now=g[i],next=g[(i+1)%gz];\n        if(ccw(l.a,l.b,now)>=0) ret.push_back(now);\n        if(ccw(l.a,l.b,now)*ccw(l.a,l.b,next)<0){\n            ret.push_back(crossPoint(Line(now,next),l));\n        }\n    }\n    return ret;\n}\n\ninline DD calc(P a,P b,DD r,bool triangle){\n    if(triangle) return cross(a,b);\n    else return r*r*arg(b-a);\n}\n\nDD calcArea(DD r,P a,P b){\n    if(eq(abs(a-b),0)) return 0;\n    bool ina=abs(a)<r+EPS;\n    bool inb=abs(b)<r+EPS;\n    if(ina && inb) return cross(a,b);\n    auto cr=crossPointSC(Segment(a,b),Circle((0,0),r));\n    if(cr.empty()) return calc(a,b,r,false);\n    auto s=cr[0],t=cr.back();\n    return calc(s,t,r,true)+calc(a,s,r,ina)+calc(t,b,r,inb);\n}\n\n//円と多角形の共通部分の面積\n//http://drken1215.hatenablog.com/entry/2020/02/02/091000\nDD Area(Circle c,Polygon g){\n    DD ret=0.0;\n    int gz=g.size();\n    if(gz<3) return ret;\n    for(int i=0;i<gz;i++){\n        P a=g[i]-c.p,b=g[(i+1)%gz]-c.p;\n        ret+=calcArea(c.r,g[i]-c.p,g[(i+1)%gz]-c.p);\n    }\n    return ret/2.0;\n}\n\n//++++なんか凄いの+++++++++++++++\n\n//最近点対\nDD RecClosetPair(Polygon::iterator it,int n){\n    if(n<=1) return INF;\n    int m=n/2;\n    DD x=real(it[m]);\n    DD d=min(RecClosetPair(it,m),RecClosetPair(it+m,n-m));\n    inplace_merge(it,it+m,it+n,yx);\n    Polygon v;\n    for(int i=0;i<n;i++){\n        if(abs(real(it[i])-x)>=d) continue;\n        for(int j=0;j<v.size();j++){\n            DD dy=imag(it[i])-imag(v[v.size()-1-j]);\n            if(dy>=d) break;\n            DD dx=real(it[i])-real(v[v.size()-1-j]);\n            d=min(d,sqrt(dx*dx+dy*dy));\n        }\n        v.push_back(it[i]);\n    }\n    return d;\n}\n\nDD ClosetPair(Polygon g){\n    sort(g.begin(),g.end(),xy);\n    return RecClosetPair(g.begin(),g.size());\n}\n\n\n\n\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr); \n    cout<<fixed<<setprecision(10);\n\n    DD x1,y1,x2,y2;\n    cin>>x1>>y1>>x2>>y2;\n    Segment s(x1,y1,x2,y2);\n    int Q;\n    cin>>Q;\n    while(Q--){\n        DD x,y;\n        cin>>x>>y;\n        P p=project(P(x,y),s);\n        printf(\"%.10lf %.10lf\\n\",real(p),imag(p));\n    }\n\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\n\nusing namespace std;\n\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nvoid vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n}\n\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならばfalseを返す*/\n\nbool intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = -(a1* (*x) + c1)/b1;\n    \n    return true;\n}\n\n/*2点(x1,y1), (x2,y2) の距離*/\nbool distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n\n\n\nint main(int argc, const char * argv[])\n{\n    double x1,x2,y1,y2,a,b,c;\n    cin>>x1>>y1>>x2>>y2;\n    \n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    \n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        double x,y,a2,b2,c2;\n        cin>>x>>y;\n        vertical_straight_line(x, y, a, b, c, &a2, &b2, &c2);\n        double ans_x, ans_y;\n        intersection_and_parallel(a, b, c, a2, b2, c2, &ans_x, &ans_y);\n        cout<<ans_x<<\" \"<<ans_y<<endl;\n    }\n    \n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct vec{double x,double y;};\ndouble naiseki(vec a,vec b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\nint main()\n{\n\tdouble xp1,xp2,yp1,yp2;\n\tcin>>xp1>>yp1>>xp2>>yp2;\n\tint q;cin>>q;\n\tvec base;\n\tbase.x=xp2-xp1;\n\tbase.y=yp2-yp1;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tdouble s,t;\n\t\tcin>>s>>t;\n\t\tvec hypo;\n\t\thypo.x=s-xp1;\n\t\thypo.y=t-yp1;\n\t\tcout<<p1x+base.x*naiseki(hypo,base)/naiseki(base,base)<<\" \";\n\t\tcout<<p1y+base.y*naiseki(hypo,base)/naiseki(base,base)<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <iomanip>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <numeric>\n#include <bitset>\n#include <cmath>\n\nstatic const int MOD = 1000000007;\nusing ll = long long;\nusing u32 = uint32_t;\nusing namespace std;\n\ntemplate<class T> constexpr T INF = ::numeric_limits<T>::max()/32*15+208;\n\nusing real = double;\nreal EPS = 1e-10;\nstruct Point {\n    real x, y;\n    Point& operator+=(const Point a) { x += a.x; y += a.y;  return *this; }\n    Point& operator-=(const Point a) { x -= a.x; y -= a.y;  return *this; }\n    Point& operator*=(const real k) { x *= k; y *= k;  return *this; }\n    Point& operator/=(const real k) { x /= k; y /= k;  return *this; }\n    Point operator+(const Point a) const {return Point(*this) += a; }\n    Point operator-(const Point a) const {return Point(*this) -= a; }\n    Point operator*(const real k) const {return Point(*this) *= k; }\n    Point operator/(const real k) const {return Point(*this) /= k; }\n    bool operator<(const Point &a) const { return (x != a.x ? x < a.x : y < a.y); }\n    explicit Point(real a = 0, real b = 0) : x(a), y(b) {};\n};\n\nistream& operator>> (istream& s, Point& P){\n    s >> P.x >> P.y;\n    return s;\n}\n\ninline real dot(Point a, Point b){ return a.x*b.x + a.y*b.y; }\ninline real cross(Point a, Point b){ return a.x*b.y - a.y*b.x; }\ninline real abs(Point a){ return sqrt(dot(a, a)); }\n\nstatic constexpr int COUNTER_CLOCKWISE = 1;\nstatic constexpr int CLOCKWISE = -1;\nstatic constexpr int ONLINE_BACK = 2;\nstatic constexpr int ONLINE_FRONT = -2;\nstatic constexpr int ON_SEGMENT = 0;\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if(cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(b, c) < -EPS) return CLOCKWISE;\n    if(dot(b, c) < 0) return ONLINE_BACK;\n    if(abs(b) < abs(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nstruct Segment {\n    Point a, b;\n    Segment(Point x, Point y) : a(x), b(y) {};\n};\n\ndouble distance(Segment l, Point c){\n    if(dot(l.b-l.a, c-l.a) < EPS) return abs(c-l.a);\n    if(dot(l.a-l.b, c-l.b) < EPS) return abs(c-l.b);\n    return abs(cross(l.b-l.a, c-l.a)) / abs(l.a-l.b);\n}\n\nbool intersect(Segment l1, Segment l2){\n    return (ccw(l1.a, l1.b, l2.a)*ccw(l1.a, l1.b, l2.b) <= 0 &&\n            ccw(l2.a, l2.b, l1.a)*ccw(l2.a, l2.b, l1.b) <= 0);\n}\n\nPoint crossPoint(Segment l1, Segment l2){\n    real d1 = abs(cross(l1.b-l1.a, l2.b-l2.a));\n    real d2 = abs(cross(l1.b-l1.a, l1.b-l2.a));\n    if(d1 < EPS && d2 < EPS) return l2.a;\n    return l2.a+(l2.b-l2.a)*d2/d1;\n}\n\nPoint project(Segment s, Point p){\n    Point Q = s.b-s.a;\n    return s.a + Q*(dot(p-s.a, Q) / dot(Q, Q));\n}\n\nint main(){\n    Point a, b;\n    cin >> a >> b;\n    Segment s(a, b);\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        Point P;\n        cin >> P;\n        Point ans = project(s, P);\n        printf(\"%.10lf %.10lf\\n\", ans.x, ans.y);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\ntemplate<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }\n\n#define FOR(i,a,b) for(ll i=(a);i<(b);++i)\n#define ALL(v) (v).begin(), (v).end()\n#define br() p(\"\")\n#define pn(s) cout << (#s) << \" \" << (s) << endl\n#define p_yes() p(\"Yes\")\n#define p_no() p(\"No\")\n\nconst ll mod = 1e9 + 7;\nconst ll inf = 1e18;\n\n// 複素数雨セット\ntypedef complex<double> C;\n// 内積\ndouble dot(C a, C b){\n    return a.real() * b.real() + a.imag() * b.imag();\n}\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n\n    // input\n    ll x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n\n    C p1(x1, y1);\n    C p2(x2, y2);\n    C v = p2 - p1;\n    C n = v / abs(v);\n\n    ll Q; cin >> Q;\n    while(Q--){\n        ll x, y;\n        cin >> x >> y;\n        C p(x, y);\n\n        auto v = p - p1;\n        auto ans = p1 + dot(v, n) * n;\n        cout << setprecision(20);\n        cout << ans.real() << ' ' << ans.imag() << endl;\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst double eps = 1e-10;\n\nclass Point {\n    public:\n        double x, y;\n        Point(double x = 0.0, double y = 0.0): x(x), y(y) {}\n\n        Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n        Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n        Point operator * (double k) { return Point(x * k, y * k); }\n        Point operator / (double k) { return Point(x / k, y / k); }\n\n        double friend norm(Point p) { return p.x * p.x + p.y * p.y; }\n        double friend abs(Point p) { return sqrt(norm(p)); }\n        double friend dot(Point p1, Point p2) { return p1.x * p2.x + p1.y * p2.y; }\n};\ntypedef Point Vector;\nstruct Segment {\n    Point p1, p2;\n};\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nint main(void) {\n    int x, y, q;\n    Segment s;\n    Point p, ans;\n\n    cin >> x >> y;\n    s.p1 = Point(x, y);\n    cin >> x >> y;\n    s.p2 = Point(x, y);\n\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        cin >> x >> y;\n        p = Point(x, y);\n        \n        ans = project(s, p);\n        printf(\"%.10f %.10f\\n\", ans.x, ans.y);\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  int q;\n  cin >> q;\n\n  double x, y, k;\n  double ax, ay, bx, by;\n  for(int i=0; i<q; i++){\n    cin >> x >> y;\n    ax = x-x1; ay = y-y1;\n    bx = x2-x1; by = y2-y1;\n    k = (ax*bx + ay*by)/(bx*bx + by*by);\n    printf(\"%lf %lf\\n\", bx*k+0, by*k+0);\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\ninline int sign(const double &x){\n    if(x>EPS) return 1;\n    else if(x<-EPS) return -1;\n    return 0;\n}\n\n/*   点  */\nstruct Point{\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double k) { return Point(k*x,k*y); }\n    Point operator / (double k) { return Point(x/k,y/k); }\n\n    //向量的大小\n    double abs(){ return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point & p) const{\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point & p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n};\n\n//两点间的距离\ndouble getDistance(Point a,Point b){\n    return (a-b).abs();\n}\n\n/*   向量  */\ntypedef Point Vector;\n\n//向量a和b的内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n//向量a和b的外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\n/*   线段  */\nstruct Segment{\n    Point p1,p2;\n};\n\n//点p在线段s上的投影\nPoint project(Segment s,Point p){\n    Vector base = s.p2-s.p1;\n    double r=dot(p-s.p1,base)/base.norm();\n    return s.p1+base*r;\n}\n\n/*   直线  */\ntypedef Segment Line;\n\n//点到直线的距离\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/(l.p2-l.p1).abs());\n}\n\n//点到线段的距离\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return (p-s.p1).abs();\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return (p-s.p2).abs();\n    return getDistanceLP(s,p);\n}\n\n//判断p2与向量p1-p0的位置关系\n\nconst int COUNTER_CLOCKWISE = -1;   //逆时针\nconst int CLOCKWISE = 1;            //顺时针\nconst int ON_SEGMENT = 0;           //在线段上\nconst int ONLINE_BACK = 2;          //p2在向量p1-p0的反方向延长线上\nconst int ONLINE_FRONT = -2;        //p2在向量p1-p0的正方向延长线上\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    if(cross(a,b)>EPS) return COUNTER_CLOCKWISE;\n    if(cross(a,b)<-EPS) return CLOCKWISE;\n    if(dot(a,b)<-EPS) return ONLINE_BACK;\n    if(a.norm()<b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n//判断线段p1p2与线段p3p4是否相交\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return ( ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0 &&\n             ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\n//线段与线段的距离\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n               min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\n/* 直线正交\n * 判断向量a，b是否正交 =》a，b的内积为0\n */\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\n/* 直线平行\n * 判断向量a，b是否平行 =》a，b的内积为0\n */\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c = Point() ,double r = 0.0 ):c(c),r(r){}\n};\n\n/*   多边形  */\ntypedef vector<Point> Polygon;\n\nint main(){\n    Point p1,p2,p;\n    int q;\n    scanf(\"%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n    scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf%lf\",&p.x,&p.y);\n        Point ans=project(Segment{p1,p2},p);\n        printf(\"%.10f %.10f\\n\",ans.x,ans.y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#pragma GCC optimize(\"Ofast\", \"unroll-loops\")\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define ld long double\n\n/* 幾何ライブラリ */\n// 2次元座標, 2次元ベクトル\nusing pos = pair<ld, ld>;\n\n// 加算\npos add(pos p1, pos p2) {\n\treturn { p1.first + p2.first, p1.second + p2.second };\n}\n// 減算\npos sub(pos p1, pos p2) {\n\treturn { p1.first - p2.first, p1.second - p2.second };\n}\n// 内積\nld inner_product(pos p1, pos p2) {\n\treturn p1.first * p2.first + p1.second * p2.second;\n}\n// 定数倍\npos mul(ld c, pos p) {\n\treturn { c * p.first, c * p.second };\n}\n\n// ノルムの2乗\nld norm2(pos p) {\n\treturn p.first * p.first + p.second * p.second;\n}\n// ノルム\nld norm(pos p) {\n\treturn sqrt(norm2(p));\n}\n\n// 射影\n// pをp1, p2を通る直線に射影する\npos projection(pos p1, pos p2, pos p) {\n\tpos q = sub(p2, p1);\n\tpos tmp = mul(inner_product(q, sub(p, p1)) / norm2(q), q);\n\treturn add(p1, tmp);\n}\n\nint main() {\n\tcout << setprecision(15);\n\tpos p1, p2;\n\tcin >> p1.first >> p1.second >> p2.first >> p2.second;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tpos p; cin >> p.first >> p.second;\n\t\tpos res = projection(p1, p2, p);\n\t\tcout << res.first << \" \" << res.second << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#line 1 \"test/aoj/CGL_1_A.test.cpp\"\n#define PROBLEM \"http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\"\n#line 1 \"test/aoj/../../geometry/template.hpp\"\n#include <cmath>\n#include <algorithm>\n#include <complex>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nusing Real = double;\nusing Point = complex< Real >;\nconst Real EPS = 1e-10, PI = acos(-1);\n#define X real()\n#define Y imag()\n\ninline bool eq(Real a, Real b) { return fabs(b - a) < EPS; }\n\nPoint operator*(const Point &p, const Real &d) {\n  return Point(real(p) * d, imag(p) * d);\n}\n\nistream &operator>>(istream &is, Point &p) {\n  Real a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\nostream &operator<<(ostream &os, Point &p) {\n  return os << fixed << setprecision(10) << p.X << \" \" << p.Y;\n}\n\n// rotate point p counterclockwise by theta rad\nPoint rotate(Real theta, const Point &p) {\n  return Point(cos(theta) * p.X - sin(theta) * p.Y, sin(theta) * p.X + cos(theta) * p.Y);\n}\n\nReal radian_to_degree(Real r) {\n  return (r * 180.0 / PI);\n}\n\nReal degree_to_radian(Real d) {\n  return (d * PI / 180.0);\n}\n\n// smaller angle of the a-b-c\nReal get_angle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  Real alpha = atan2(v.Y, v.X), beta = atan2(w.Y, w.X);\n  if(alpha > beta) swap(alpha, beta);\n  Real theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nnamespace std {\n  bool operator<(const Point &a, const Point &b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n  }\n}\n\n\nstruct Line {\n  Point a, b;\n\n  Line() = default;\n\n  Line(Point a, Point b) : a(a), b(b) {}\n\n  Line(Real A, Real B, Real C) // Ax + By = C\n  {\n    if(eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n    else if(eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n    else a = Point(0, C / B), b = Point(C / A, 0);\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment : Line {\n  Segment() = default;\n\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle {\n  Point p;\n  Real r;\n\n  Circle() = default;\n\n  Circle(Point p, Real r) : p(p), r(r) {}\n};\n\nusing Points = vector< Point >;\nusing Polygon = vector< Point >;\nusing Segments = vector< Segment >;\nusing Lines = vector< Line >;\nusing Circles = vector< Circle >;\n\nReal cross(const Point &a, const Point &b) {\n  return real(a) * imag(b) - imag(a) * real(b);\n}\n\nReal dot(const Point &a, const Point &b) {\n  return real(a) * real(b) + imag(a) * imag(b);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if(cross(b, c) > EPS) return +1;  // \"COUNTER_CLOCKWISE\"\n  if(cross(b, c) < -EPS) return -1; // \"CLOCKWISE\"\n  if(dot(b, c) < 0) return +2;      // \"ONLINE_BACK\" c-a-b\n  if(norm(b) < norm(c)) return -2;  // \"ONLINE_FRONT\" a-b-c\n  return 0;                         // \"ON_SEGMENT\" a-c-b\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\nbool parallel(const Line &a, const Line &b) {\n  return eq(cross(a.b - a.a, b.b - b.a), 0.0);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\nbool orthogonal(const Line &a, const Line &b) {\n  return eq(dot(a.a - a.b, b.a - b.b), 0.0);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\nPoint projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B\nPoint reflection(const Line &l, const Point &p) {\n  return p + (projection(l, p) - p) * 2.0;\n}\n\nbool intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nReal distance(const Line &l, const Point &p);\n\nbool intersect(const Circle &c, const Line &l) {\n  return distance(l, c.p) <= c.r + EPS;\n}\n\nbool intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B\nbool intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nint intersect(const Circle &c, const Segment &l) {\n  if(norm(projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  auto d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if(d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if(d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = projection(l, c.p);\n  if(dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A&lang=jp\nint intersect(Circle c1, Circle c2) {\n  if(c1.r < c2.r) swap(c1, c2);\n  Real d = abs(c1.p - c2.p);\n  if(c1.r + c2.r < d) return 4;\n  if(eq(c1.r + c2.r, d)) return 3;\n  if(c1.r - c2.r < d) return 2;\n  if(eq(c1.r - c2.r, d)) return 1;\n  return 0;\n}\n\nReal distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\nReal distance(const Line &l, const Point &p) {\n  return abs(p - projection(l, p));\n}\n\nReal distance(const Line &l, const Line &m) {\n  return intersect(l, m) ? 0 : distance(l, m.a);\n}\n\nReal distance(const Segment &s, const Point &p) {\n  Point r = projection(s, p);\n  if(intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D\nReal distance(const Segment &a, const Segment &b) {\n  if(intersect(a, b)) return 0;\n  return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\n\nReal distance(const Line &l, const Segment &s) {\n  if(intersect(l, s)) return 0;\n  return min(distance(l, s.a), distance(l, s.b));\n}\n\nPoint crosspoint(const Line &l, const Line &m) {\n  Real A = cross(l.b - l.a, m.b - m.a);\n  Real B = cross(l.b - l.a, l.b - m.a);\n  if(eq(abs(A), 0.0) && eq(abs(B), 0.0)) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C\nPoint crosspoint(const Segment &l, const Segment &m) {\n  return crosspoint(Line(l), Line(m));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_D\npair< Point, Point > crosspoint(const Circle &c, const Line l) {\n  Point pr = projection(l, c.p);\n  Point e = (l.b - l.a) / abs(l.b - l.a);\n  if(eq(distance(l, c.p), c.r)) return {pr, pr};\n  double base = sqrt(c.r * c.r - norm(pr - c.p));\n  return {pr - e * base, pr + e * base};\n}\n\npair< Point, Point > crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if(intersect(c, l) == 2) return crosspoint(c, aa);\n  auto ret = crosspoint(c, aa);\n  if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;\n  else ret.first = ret.second;\n  return ret;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_E\npair< Point, Point > crosspoint(const Circle &c1, const Circle &c2) {\n  Real d = abs(c1.p - c2.p);\n  Real a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  Real t = atan2(c2.p.Y - c1.p.Y, c2.p.X - c1.p.X);\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return {p1, p2};\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_F\n// tangent of circle c through point p\npair< Point, Point > tangent(const Circle &c1, const Point &p2) {\n  return crosspoint(c1, Circle(p2, sqrt(norm(c1.p - p2) - c1.r * c1.r)));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_G\n// common tangent of circles c1 and c2\nLines tangent(Circle c1, Circle c2) {\n  Lines ret;\n  if(c1.r < c2.r) swap(c1, c2);\n  Real g = norm(c1.p - c2.p);\n  if(eq(g, 0)) return ret;\n  Point u = (c2.p - c1.p) / sqrt(g);\n  Point v = rotate(PI * 0.5, u);\n  for(int s : {-1, 1}) {\n    Real h = (c1.r + s * c2.r) / sqrt(g);\n    if(eq(1 - h * h, 0)) {\n      ret.emplace_back(c1.p + u * c1.r, c1.p + (u + v) * c1.r);\n    } else if(1 - h * h > 0) {\n      Point uu = u * h, vv = v * sqrt(1 - h * h);\n      ret.emplace_back(c1.p + (uu + vv) * c1.r, c2.p - (uu + vv) * c2.r * s);\n      ret.emplace_back(c1.p + (uu - vv) * c1.r, c2.p - (uu - vv) * c2.r * s);\n    }\n  }\n  return ret;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B\nbool is_convex(const Polygon &p) {\n  int n = (int) p.size();\n  for(int i = 0; i < n; i++) {\n    if(ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A\nPolygon convex_hull(Polygon &p) {\n  int n = (int) p.size(), k = 0;\n  if(n <= 2) return p;\n  sort(p.begin(), p.end());\n  vector< Point > ch(2 * n);\n  for(int i = 0; i < n; ch[k++] = p[i++]) {\n    while(k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < EPS) --k;\n  }\n  for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n    while(k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < EPS) --k;\n  }\n  ch.resize(k - 1);\n  return ch;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C\nenum {\n  OUT, ON, IN\n};\n\nint contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for(int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if(a.Y > b.Y) swap(a, b);\n    if(a.Y <= 0 && 0 < b.Y && cross(a, b) < 0) in = !in;\n    if(cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033\n// deduplication of line segments\nvoid merge_segments(vector< Segment > &segs) {\n\n  auto merge_if_able = [](Segment &s1, const Segment &s2) {\n    if(abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n    if(ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n    if(ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n    s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n    return true;\n  };\n\n  for(int i = 0; i < segs.size(); i++) {\n    if(segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for(int i = 0; i < segs.size(); i++) {\n    for(int j = i + 1; j < segs.size(); j++) {\n      if(merge_if_able(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033\n// construct a graph with the vertex of the intersection of any two line segments\nvector< vector< int > > segment_arrangement(vector< Segment > &segs, vector< Point > &ps) {\n  vector< vector< int > > g;\n  int N = (int) segs.size();\n  for(int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for(int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if(cross(p1, p2) == 0) continue;\n      if(intersect(segs[i], segs[j])) {\n        ps.emplace_back(crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  int M = (int) ps.size();\n  g.resize(M);\n  for(int i = 0; i < N; i++) {\n    vector< int > vec;\n    for(int j = 0; j < M; j++) {\n      if(intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for(int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_C\n// cut with a straight line l and return a convex polygon on the left\nPolygon convex_cut(const Polygon &U, Line l) {\n  Polygon ret;\n  for(int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if(ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if(ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A\nReal area(const Polygon &p) {\n  Real A = 0;\n  for(int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A * 0.5;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_H\nReal area(const Polygon &p, const Circle &c) {\n  if(p.size() < 3) return 0.0;\n  function< Real(Circle, Point, Point) > cross_area = [&](const Circle &c, const Point &a, const Point &b) {\n    Point va = c.p - a, vb = c.p - b;\n    Real f = cross(va, vb), ret = 0.0;\n    if(eq(f, 0.0)) return ret;\n    if(max(abs(va), abs(vb)) < c.r + EPS) return f;\n    if(distance(Segment(a, b), c.p) > c.r - EPS) return c.r * c.r * arg(vb * conj(va));\n    auto u = crosspoint(c, Segment(a, b));\n    vector< Point > tot{a, u.first, u.second, b};\n    for(int i = 0; i + 1 < tot.size(); i++) {\n      ret += cross_area(c, tot[i], tot[i + 1]);\n    }\n    return ret;\n  };\n  Real A = 0;\n  for(int i = 0; i < p.size(); i++) {\n    A += cross_area(c, p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_B\nReal convex_diameter(const Polygon &p) {\n  int N = (int) p.size();\n  int is = 0, js = 0;\n  for(int i = 1; i < N; i++) {\n    if(p[i].Y > p[is].Y) is = i;\n    if(p[i].Y < p[js].Y) js = i;\n  }\n  Real maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if(cross(p[(i + 1) % N] - p[i], p[(j + 1) % N] - p[j]) >= 0) {\n      j = (j + 1) % N;\n    } else {\n      i = (i + 1) % N;\n    }\n    if(norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while(i != is || j != js);\n  return sqrt(maxdis);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_5_A\nReal closest_pair(Points ps) {\n  if(ps.size() <= 1) throw (0);\n  sort(begin(ps), end(ps));\n\n  auto compare_y = [&](const Point &a, const Point &b) {\n    return imag(a) < imag(b);\n  };\n  vector< Point > beet(ps.size());\n  const Real INF = 1e18;\n\n  function< Real(int, int) > rec = [&](int left, int right) {\n    if(right - left <= 1) return INF;\n    int mid = (left + right) >> 1;\n    auto x = real(ps[mid]);\n    auto ret = min(rec(left, mid), rec(mid, right));\n    inplace_merge(begin(ps) + left, begin(ps) + mid, begin(ps) + right, compare_y);\n    int ptr = 0;\n    for(int i = left; i < right; i++) {\n      if(abs(real(ps[i]) - x) >= ret) continue;\n      for(int j = 0; j < ptr; j++) {\n        auto luz = ps[i] - beet[ptr - j - 1];\n        if(imag(luz) >= ret) break;\n        ret = min(ret, abs(luz));\n      }\n      beet[ptr++] = ps[i];\n    }\n    return ret;\n  };\n  return rec(0, (int) ps.size());\n}\n#line 3 \"test/aoj/CGL_1_A.test.cpp\"\n\n#include <iostream>\nusing namespace std;\nint main() {\n  Line l; cin >> l;\n  int q; cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Point p; cin >> p;\n    Point x = projection(l, p);\n    cout << x << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for(int i=0; i<n; i++)\n#define rrep(i, n) for(int i=n-1; i>=0; i--)\n#define FOR(i, a, b) for(int i=a; i<b; i++)\n#define ALL(v) v.begin(),v.end()\n#define pb push_back\n#define eb emplace_back\n#define mp make_pair\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<int, ll> pil;\ntypedef pair<ll, int> pli;\ntypedef pair<ll, ll> pll;\nconst int INF = 1e9;\nconst ll LLINF = 1e18;\nconst ll MOD = 1e9+7;\nconst double EPS = 1e-10;\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }\n\nclass Point {\n    public:\n        double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator+ (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator- (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator* (double a) { return Point(x * a, y * a); }\n    Point operator/ (double a) { return Point(x / a, y / a); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator< (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator== (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n// struct Segment { Point p1, p2; };\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\ntypedef Point Vector;\ntypedef Segment Line;\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector v1, Vector v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nclass Circle {\n    public:\n        Point c;\n        double r;\n        Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nint main() {\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Point p1(x1, y1), p2(x2, y2);\n    Segment s(p1, p2);\n\n    int q;\n    cin >> q;\n    vector<Point> ps;\n    rep(i, q) {\n        double xp, yp;\n        cin >> xp >> yp;\n        ps.push_back(Point(xp, yp));\n    }\n\n    cout << fixed << setprecision(10);\n    rep(i, q) {\n        Point x = project(s, ps[i]);\n        cout << x.x << \" \" << x.y << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <vector>\n#include <queue>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals (fabs((a)-(b)<EPS)\nint n;\n\nstruct Point\n{\n    double x, y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator +(Point a)\n    {\n        return Point(x+a.x,y+a.y);\n    }\n    Point operator -(Point a)\n    {\n        return Point(x-a.x,y-a.y);\n    }\n    Point operator *(double a)\n    {\n        return Point(x*a,y*a);\n    }\n\n    double norm()\n    {\n        return x*x+y*y;\n    }\n};\nPoint p1,p2,p;\ndouble cross(Point a,Point b)\n{\n    return a.x*b.y-b.x*a.y;\n}\ndouble dot(Point a,Point b)\n{\n    return a.x*b.x+a.y*b.y;\n}\nvoid solve()\n{\n    Point a=p2-p1;\n    Point b=p-p1;\n    double r=dot(a,b)/a.norm();\n    Point p=p1+a*r;\n    printf(\"%.8lf %.8lf\\n\",p.x,p.y);\n}\n\nint main()\n{\n//    freopen(\"in.txt\",\"r\",stdin);\n    scanf(\"%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n    scanf(\"%d\",&n);\n    while(n--)\n    {\n        scanf(\"%lf%lf\",&p.x,&p.y);\n        solve();\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <complex>\nusing namespace std;\n\nint main(void){\n\tdouble x,y;\n\tint q;\n\tcin>>x>>y;\n\tcomplex<double> p1(x,y);\n\tcin>>x>>y;\n\tcomplex<double> p2(x,y);\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x>>y;\n\t\tcomplex<double> p(x,y);\n\t\tcomplex<double> p1p=p-p1;\n\t\tcomplex<double> p1p2=p2-p1;\n\t\tdouble r=abs(p1p);\n\t\tdouble t=arg(p1p)-arg(p2);\n\t\tr*=cos(t);\n\t\tcomplex<double> res=polar(r,arg(p1-p2))+p1;\n\t\tprintf(\"%.8lf %.8lf\\n\",real(res),imag(res));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <complex>\n#include <iostream>\nusing namespace std; \n#define X real()\n#define Y imag()\n\nconst double EPS = 1e-10;\n\nbool EQ(double a,double b){\n  return fabs(a-b) < EPS;\n}\n\ntypedef complex<double> Point;\n\nnamespace std {\n  bool operator == (const Point &a, const Point &b) {\n    return EQ(a.X, b.X) && EQ(a.Y, b.Y);\n  }\n  bool operator < (const Point &a, const Point &b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n  }\n}\nstruct Segment {\n  Point p1, p2;\n  Segment(){};\nSegment(Point p1, Point p2) : p1(p1), p2(p2) {};\n};\n\ntypedef Segment Line;\ndouble dot(Point a, Point b){\n  return a.X * b.X + a.Y * b.Y;\n}\ndouble cross(Point a, Point b){\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\nPoint project(Segment s, Point p) {\n  double r = dot(p - s.p1, s.p2 - s.p1) / norm(s.p2 - s.p1);\n  return s.p1 + (s.p2 - s.p1) * r;\n}\n\nPoint reflect(Segment s, Point p) {\nreturn p + (project(s, p) - p) * 2.0;\n}\n\nint main()\n{\n  Segment s;\n  cin >> s.p1.real() >> s.p1.imag() >> s.p2.real() >> s.p2.imag();\n  \n  int q;\n  \n  cin >> q;\n  Point p;\n  for(int i=0;i<q;i++){\n    cin >> p.X >> p.Y;\n    Point p2 = project(s,p);\n    //cout << p2.X << p2.Y << endl;\n    \n    printf(\"%.15f %.15f\\n\",p2.X,p2.Y);\n\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n// 定義・定数\nusing P = complex<double>;\nconst double EPS = 1e-10;\n\nnamespace std {\n  // 点の比較演算子\n  bool operator < (const P &a, const P &b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n  \n  // 点の等価演算子\n  bool operator == (const P &a, const P &b) {\n    return fabs(a - b) < EPS;\n  }\n}\n\n\n// 直線\nstruct L : public vector<P> {\n  L(P &_a, P &_b) {\n    push_back(_a);\n    push_back(_b);\n  }\n};\n\n\n// 線分\nstruct S : L {\n  S(P &_a, P &_b) : L(_a, _b) {}\n};\n\n\n// 円\nstruct C {\n  P p;\n  double r;\n  \n  C(P _p, double _r) : p(_p), r(_r) {}\n};\n\n\n// 内積\ndouble dot(const P &a, const P &b) {\n  return real(conj(a) * b);\n}\n\n\n// 外積\ndouble cross(const P &a, const P &b) {\n  return imag(conj(a) * b);\n}\n\n\n// 点の進行方向\nint ccw(P a, P b, P c) {\n  b -= a;\n  c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\n\n// 交差判定\nbool intersectLL(const L &l, const L &m) {\n  return abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n         abs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const L &l, const S &s) {\n  return cross(l[1] - l[0], s[0] - l[0]) *      // s[0] is left of l\n         cross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const L &l, const P &p) {\n  return abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSS(const S &s, const S &t) {\n  return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n         ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\nbool intersectSP(const S &s, const P &p) {\n  return abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; // triangle inequality\n}\n\n\n// 距離など\nP projection(const L &l, const P &p) {\n  double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n  return l[0] + t*(l[0]-l[1]);\n}\nP reflection(const L &l, const P &p) {\n  return p + (projection(l, p) - p) + (projection(l, p) - p);\n}\ndouble distanceLP(const L &l, const P &p) {\n  return abs(p - projection(l, p));\n}\ndouble distanceLL(const L &l, const L &m) {\n  return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const L &l, const S &s) {\n  if (intersectLS(l, s)) return 0;\n  return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const S &s, const P &p) {\n  const P r = projection(s, p);\n  if (intersectSP(s, r)) return abs(r - p);\n  return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const S &s, const S &t) {\n  if (intersectSS(s, t)) return 0;\n  return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\nP crosspoint(const L &l, const L &m) {\n  double A = cross(l[1] - l[0], m[1] - m[0]);\n  double B = cross(l[1] - l[0], l[1] - m[0]);\n  if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n  if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n  return m[0] + B / A * (m[1] - m[0]);\n}\n\nint main() {\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  \n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  P p1(x1, y1), p2(x2, y2);\n  L l(p1, p2);\n  \n  int q;\n  cin >> q;\n  while (q--) {\n    double x, y;\n    cin >> x >> y;\n    P p(x, y);\n    P ans = projection(l, p);\n    cout << fixed << setprecision(10) << ans.real() << \" \" << ans.imag() << '\\n';\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define PI acos(-1.0)\n#define EPS 1e-9\n\ndouble toRadian(double deg) {return ((deg*PI)/180.0);}\ndouble toDegree(double radian) {return ((radian*180.0)/PI);}\ndouble handleNegZero(double x) {return ((abs(x) < EPS)?0.0:x);}\n\nstruct point_i { int x, y;     // whenever possible, work with point_i\n  point_i() { x = y = 0; }                      // default constructor\n  point_i(int _x, int _y) : x(_x), y(_y) {} };         // user-defined\n\nstruct Point { //Integer Point\n    double x, y;\n    Point(){}\n    Point(double _x, double _y):x(_x), y(_y){}\n\n    bool operator < (Point other) const {\n        if(fabs(x - other.x) > EPS)\n            return x < other.x;\n        return y < other.y;\n    }\n\n    bool operator == (Point other) const {\n        return ((fabs(x - other.x) < EPS) && (fabs(y - other.y) < EPS));\n    }\n};\n\ndouble pointDistaceSquared2D (Point a, Point b) {return (a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y);}\ndouble dist (Point a, Point b) {return sqrt(pointDistaceSquared2D(a, b));}\n// rotate p by theta degrees CCW w.r.t origin (0, 0)\nPoint rotate(Point p, double theta) {\n    double rad = toRadian(theta);\n    return Point(p.x * cos(rad) - p.y * sin(rad),\n                 p.x * sin(rad) + p.y * cos(rad));\n}\n\nstruct line {double a, b, c;};\nvoid pointsToLine(Point p1, Point p2, line &l) {\n    if(fabs(p1.x-p2.x) < EPS) {\n        l.a = 1.0; l.b = 0.0; l.c = -p1.x;\n    } else {\n        l.a = -(double)(p1.y-p2.y) / (p1.x-p2.x);\n        l.b = 1.0;\n        l.c = -(double)(l.a*p1.x)-p1.y;\n    }\n}\n\nbool areParallel(line l1, line l2) {\n    return (fabs(l1.a-l2.a) < EPS) && (fabs(l1.b-l2.b) < EPS);\n}\n\nbool areSame(line l1, line l2) {\n    return areParallel(l1, l2) && (fabs(l1.c-l2.c) < EPS);\n}\n\nbool areIntersect(line l1, line l2, Point &p) {\n    if(areParallel(l1, l2)) return false;\n    p.x = (l2.b*l1.c-l1.b*l2.c) / (l2.a*l1.b-l1.a*l2.b);\n    if(fabs(l1.b) > EPS) p.y = -(l1.a*p.x+l1.c);\n    else                 p.y = -(l2.a*p.x+l2.c);\n    return true;\n}\n\nstruct vec {\n    double x, y;\n    vec(){}\n    vec(double _x, double _y):x(_x), y(_y){}\n};\n\nvec toVec(Point a, Point b) {return vec(b.x - a.x, b.y - a.y);}\nvec scale(vec v, double s) {return vec(v.x*s, v.y*s);}\nPoint translate(Point p, vec v) {return Point(p.x + v.x, p.y + v.y);}// translate p according to v\ndouble dot(vec a, vec b) {return (a.x*b.x + a.y*b.y);}\ndouble norm_sq(vec v) {return v.x*v.x + v.y*v.y;}\n\n// returns the distance from p to the line defined by\n// two points a and b (a and b must be different)\n// the closest point is stored in the 4th parameter (byref)\ndouble distToLine(Point p, Point a, Point b, Point &c) {\n    // formula: c = a + u* ab\n    vec ap = toVec(a, p), ab = toVec(a, b);\n    double u = dot(ap, ab) / norm_sq(ab);\n    c = translate(a, scale(ab, u));\n    return dist(p, c);\n}\n\nint main() {\n    //freopen(\"in\", \"r\", stdin);\n    //freopen(\"out\", \"w\", stdout);\n    double x0, y0, x1, y1, x2, y2;\n    int q;\n    Point a, b, p, c;\n\n    scanf(\"%lf %lf %lf %lf\", &x0, &y0, &x1, &y1);\n    scanf(\"%d\", &q);\n    a = Point(x0, y0);\n    b = Point(x1, y1);\n\n    for(int i = 0; i < q; i++) {\n        scanf(\"%lf %lf\", &x2, &y2);\n\n        p = Point(x2, y2);\n        double temp = distToLine(p, a, b, c);\n        printf(\"%0.9lf %0.9lf\\n\", handleNegZero(c.x), handleNegZero(c.y));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <numeric>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\n#define mp       make_pair\n#define pb       push_back\n#define all(x)   (x).begin(),(x).end()\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define repi(i,a,b) for(int i = (a); i < (b); i++)\n\nusing namespace std;\n\ntypedef    long long          ll;\ntypedef    unsigned long long ull;\ntypedef    vector<bool>       vb;\ntypedef    vector<int>        vi;\ntypedef    vector<vb>         vvb;\ntypedef    vector<vi>         vvi;\ntypedef    pair<int,int>      pii;\n\nconst int INF=1<<29;\nconst double EPS=1e-9;\n\nconst int dx[]={1,0,-1,0},dy[]={0,-1,0,1};\n\nint main(){\n\tdouble x1,y1,x2,y2,xq,yq;\n\tdouble m,x,y,c;\n\tscanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n\tint q;\n\tcin>>q;\n\tfor(int i =0;i < q;i++){\n\t\tscanf(\"%lf %lf\",&xq,&yq);\n\t\tif(x2==x1){\n\t\t\tdouble xr,yr;\n\t\t\txr =xq*-1;\n\t\t\tyr =yq;\n\t\t\t//xq *=-1;\n\t\t\tx =(xr+xq)/2;\n\t\t\ty =(yr+yq)/2;\n\t\t\tprintf(\"%.9f %.9f\\n\",x,y);\n\t\t}else{\n\t\t\tm = (y2-y1)/(x2-x1);\n\t\t\tc = y2-m*x2;\n\t\t\tx = (2*m*yq-xq*(m*m-1)-2*m*c)/(m*m+1);\n\t\t\ty = (2*m*xq+yq*(m*m-1)+2*c)/(m*m+1);\n\t\t\tx =(x+xq)/2;\n\t\t\ty =(y+yq)/2;\n\t\t\tprintf(\"%.9f %.9f\\n\", x, y);\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long LL;\n\nconst double EPS = 1e-10;\nconst int COUNTER_CLOCKWISE = 1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = 2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\nconst int IN = 2;\nconst int ON = 1;\nconst int OUT = 0;\n\ntypedef complex<double> Point;\ntypedef Point Vector;\nstruct Segment {\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\ninline double equals(double a, double b);\ninline double dot(Vector a, Vector b);\ninline double cross(Vector a, Vector b);\ninline bool isOrthogonal(Vector a, Vector b);\ninline bool isParallel(Vector a, Vector b);\nPoint project(Segment s, Point p);\nPoint reflect(Segment s, Point p);\nint ccw(Point p0, Point p1, Point p2);\nbool intersect(Segment s1, Segment s2);\nbool intersect(Circle c, Line l);\nbool intersect(Circle c1, Circle c2);\ndouble getDistanceLP(Line l, Point p);\ndouble getDistanceSP(Segment s, Point p);\ndouble getDistance(Segment s1, Segment s2);\nPoint getCrossPoint(Segment s1, Segment s2);\npair<Point, Point> getCrossPoints(Circle c, Line l);\npair<Point, Point> getCrossPoints(Circle c1, Circle c2);\nint contains(Polygon g, Point p);\nPolygon andrewScan(Polygon s);\n\ninline double equals(double a, double b) {\n\treturn fabs(a - b) < EPS;\n}\nbool operator==(const Point &p1, const Point &p2) {\n\treturn equals(p1.real(), p2.real()) && equals(p1.imag(), p2.imag());\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.real()*b.real() + a.imag()*b.imag();\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.real()*b.imag() - a.imag()*b.real();\n}\ninline bool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\ninline bool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn (ccw(s1.p1, s1.p2, s2.p1)*ccw(s1.p1, s1.p2, s2.p2) <= 0 &&\n\t\tccw(s2.p1, s2.p2, s1.p1)*ccw(s2.p1, s2.p2, s1.p2) <= 0);\n}\nbool intersect(Circle c, Line l) {\n\treturn getDistanceLP(l, c.c) <= c.r;\n}\nbool intersect(Circle c1, Circle c2) {\n\treturn abs(c1.c - c2.c) <= c1.r + c2.r;\n}\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tassert(intersect(s1, s2));\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r*c.r - norm(pr - c.c));\n\treturn make_pair(pr + e*base, pr - e*base);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tassert(intersect(c1, c2));\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.imag() > b.imag()) swap(a, b);\n\t\tif (a.imag() < EPS && EPS<b.imag() && cross(a, b)>EPS) x = !x;\n\t}\n\treturn x ? 2 : 0;\n}\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(s.begin(), s.end(), [](const Point &a, const Point &b) {return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag(); });\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tfor (int i = 2; i < s.size(); i++) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\treturn l;\n}\n\nint main() {\n\tint x, y;\n\tcin >> x >> y;\n\tPoint p1(x, y);\n\tcin >> x >> y;\n\tPoint p2(x, y);\n\tSegment s(p1, p2);\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tPoint a = project(s, p);\n\t\tprintf(\"%.15lf %.15lf\\n\", a.real(), a.imag());\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef struct { double x,y;} point;\n\ndouble nai(point a,point b){ return a.x*b.x+a.y*b.y; }\n\nint main(){\npoint p1,p2;\ndouble x,y;\ncin>>x>>y;\np1.x=x;\np1.y=y;\ncin>>x>>y;\np2.x=x;\np2.y=y;\npoint vec={p2.x-p1.x , p2.y-p1.y};\npoint e={vec.x/sqrt(nai(vec,vec)) , vec.y/sqrt(nai(vec,vec))};\nint q;\ncin>>q;\nfor(int i=0;i<q;i++){\ncin>>x>>y;\npoint p;\np.x=x-p1.x;\np.y=y-p1.y;\nprintf(\"%0.9lf %0.9lf\\n\",p1.x+nai(p,e)*e.x,p1.y+nai(p,e)*e.y);\n\n\n}\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef complex<double> V;\ntypedef vector<P> vecP;\ntypedef pair<P,P> L;\ntypedef pair<P,P> S;\ntypedef pair<P,double> C;\nconst double eps=1e-8;\nconst double PI=acos(-1);\nconst double PI2=PI*2.0;\n\nnamespace std{\n  bool operator < (const P &a,const P &b){\n    return (a.imag()==b.imag()?\n            a.real()<b.real():\n            a.imag()<b.imag());\n  }\n};\n\nV normal(V a){\n  assert( abs(a)>0 );\n  return a/abs(a);\n}\n\ndouble Sqrt( double x ){\n  if(x<0)return 0;\n  else return sqrt(x);\n}\n\nP Vector(L a){\n  return a.second-a.first;\n}\n\nbool eq(double a,double b){\n  return (-eps<a-b&&a-b<eps);\n}\n\nbool eq(P a,P b){\n  return ( eq(a.real(),b.real()) && eq(a.imag(),b.imag()) );\n}\n\ndouble dot(P a,P b){\n  return real(b*conj(a));\n}\n\ndouble cross(P a,P b){\n  return imag(b*conj(a));\n}\n\ndouble getArg(P a,P b){\n  return arg(b*conj(a));\n}\n\ndouble getTime(V a,V b){\n  assert( eq(cross(a,b),0) );\n  return ( dot(a,b) < 0 ? -1.0 : 1.0 ) * abs(b) / abs(a);\n}\n\n\nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nP reflect(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nint ccw(P a,P b,P c){\n  P ab=b-a,ac=c-a;\n  P k=ac*conj(ab);\n  if(k.imag()>0)return 1;\n  if(k.imag()<0)return -1;\n  if(k.real()<0)return 2;\n  if(abs(ab)<abs(ac))return -2;\n  return 0;\n}\n\nbool isParallel(P a,P b){\n  return eq(0, cross(a,b));\n}\n\nbool isParallel(L l0,L l1){\n  return eq(0, cross( Vector(l0) , Vector(l1) ) );\n}\n\nbool onLP(L l,P p){\n  P a=l.first, b=l.second;\n  return eq(0, cross(b-a,p-a));\n}\n\nbool onSP(S s,P p){\n  P a=s.first, b=s.second;\n  return eq( abs(b-a) , abs(a-p)+abs(b-p) );\n}\n\nbool isCrossSS(S s0,S s1){\n  P a=s0.first, b=s0.second;\n  P c=s1.first, d=s1.second;\n  int f0 = ccw(a,b,c) * ccw(a,b,d);\n  int f1 = ccw(c,d,a) * ccw(c,d,b);\n  return (f0<=0 && f1<=0);\n}\n\nbool isCrossLS(L l,S s){\n  P a=l.first, b=l.second;\n  P c=s.first, d=s.second;\n  return ( ccw(a,b,c) * ccw(a,b,d) <= 0 );\n}\n\ndouble distLP(L l,P p){\n  P a=l.first, b=l.second;\n  double res = cross(b-a,p-a) / abs(b-a);\n  return abs(res);\n}\n\ndouble distSP(S s,P p){\n  P a=s.first, b=s.second;\n  if( dot(b-a,p-a) < eps )return abs(p-a);\n  if( dot(a-b,p-b) < eps )return abs(p-b);\n  return distLP(s,p);\n}\n\nP getCrossLL(L l0,L l1){\n  P a=l0.first, b=l0.second;\n  P c=l1.first, d=l1.second;\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\n\n \nint inPolygon(vecP &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( onSP(S(a,b),p) )return 1;\n    sum+= getArg(a-p,b-p);\n  }\n  if( abs(sum) < eps )return 0;\n  else return 2;\n}\n\nvecP andrewScan(vecP &t){\n  int N=t.size(),C=0;\n  vecP R(N);\n  for(int i=0;i<N;i++){\n    while(2<=C&&ccw(R[C-2],R[C-1],t[i])==-1)C--;\n    R[C++]=t[i];\n  }\n  vecP res(C);\n  for(int i=0;i<C;i++)res[i]=R[i];\n  return res;\n}\n \nvecP convexHull(vecP &t){\n  sort(t.begin(),t.end());\n  vecP u=andrewScan(t);\n  reverse(t.begin(),t.end());\n  vecP l=andrewScan(t);\n  for(int i=1;i+1<(int)l.size();i++)u.push_back(l[i]);\n  return u;\n}\n\nvecP cutConvex(vecP &t,L l){\n  P a=l.first, b=l.second;\n  int N=t.size();\n  vecP res;\n  for(int i=0;i<N;i++){\n    P c=t[i],d=t[(i+1)%N];\n    int C=ccw(a,b,c),D=ccw(a,b,d);\n    if(C!=-1)res.push_back(c);\n    if(C==-D&&abs(C)==1)res.push_back(getCrossLL( l ,L(c,d) ));\n  }\n  return res;\n}\n\nP getVector(const vecP &t, int id){\n  int n=t.size();\n  return t[ (id+1)%n ] - t[id%n];\n}\n\ndouble convex_diameter(vecP &t) {\n  int n = t.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(t[i]) > imag(t[is])) is = i;\n    if (imag(t[i]) < imag(t[js])) js = i;\n  }\n  double maxd = norm(t[is]-t[js]);\n \n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    \n    if (cross( getVector(t,i), getVector(t,j)) >= 0) j = (j+1) % n;\n    \n    else i = (i+1) % n;\n    if (norm(t[i]-t[j]) > maxd) {\n      maxd = norm(t[i]-t[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxd; /* farthest pair is (maxi, maxj). */\n}\n\nbool compare_y(const P &a,const P &b){\n  return a.imag() < b.imag();\n}\n\ndouble closest_pair(P *a, int n){\n  if(n <= 1) return 1e30;\n  int m = n / 2;\n  double x = a[m].real();\n  double d = min(closest_pair(a, m), closest_pair(a + m, n - m));\n  inplace_merge(a, a + m, a + n, compare_y);\n  vector<P> b;\n  for(int i=0;i<n;i++){\n    if( abs(a[i].real() - x) >= d) continue;\n    for(int j=0;j<(int)b.size();j++){\n      double dx = real(a[i] - b[b.size() - j - 1]);\n      double dy = imag(a[i] - b[b.size() - j - 1]);\n      if(dy >= d) break;\n      d = min(d, sqrt(dx * dx + dy * dy));\n    }\n    b.push_back(a[i]);\n  }\n  return d;\n}\n\nP _pool[200005];\ndouble minDist(vecP &t){\n  int n=t.size();\n  for(int i=0;i<n;i++)_pool[i]=t[i];\n  sort( _pool, _pool+n);\n  return closest_pair(_pool, n);\n}\n\nint getStateCC(C a,C b){\n  double ar=a.second, br=b.second;\n  double dist=abs(a.first-b.first);\n  if(dist>ar+br+eps)return 4;\n  if(dist>ar+br-eps)return 3;\n  if(dist>abs(ar-br)+eps)return 2;\n  if(dist>abs(ar-br)-eps)return 1;\n  return 0;\n}\n\nP getCrossCC(C a,C b){\n  P p1=a.first, p2=a.second;\n  double r1=a.second, r2=b.second;\n  double cA = (r1*r1+norm(p1-p2)-r2*r2) / (2.0*r1*abs(p1-p2));\n  return p1+(p2-p1)/abs(p1-p2)*r1*P(cA,Sqrt(1.0-cA*cA));\n}\n\nS getTangentCP(C a,P p){\n  P base=a.first-p;\n  double ar=a.second;\n  double w=Sqrt(norm(base)-ar*ar);\n  P s=p+base*P(w,ar)/norm(base)*w;\n  P t=p+base*P(w,-ar)/norm(base)*w;\n  return S(s,t);\n}\n\nS getInTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double w=ar+br;\n  double h=Sqrt(norm(base)-w*w);\n  P k=base*P(w,h*flg)/norm(base);\n  return S(ap+k*ar,bp-k*br);\n}\n  \nS getOutTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double h=br-ar;\n  \n  double w=Sqrt(norm(base)-h*h);\n  P k=base*P(w,h*flg)/norm(base)*P(0,flg);\n  return S(ap+k*ar,bp+k*br);\n}\n  \nvector<S> getTangent(C a,C b){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  vector<S> res;\n  double dist=abs(ap-bp);\n    \n  if(dist>ar+br+eps)\n    res.push_back(getInTangent(a,b,1));\n  \n  if(dist>ar+br-eps)\n    res.push_back(getInTangent(a,b,-1));\n  \n  if(dist>abs(ar-br)+eps)\n    res.push_back(getOutTangent(a,b,1));\n  \n  if(dist>abs(ar-br)-eps)\n    res.push_back(getOutTangent(a,b,-1));\n  \n  return res;\n}\n\n\nvecP getCrossCS(C cir,S s, bool debug=false){\n  P a=s.first, b=s.second;\n  double cr=cir.second;\n  P cp=cir.first;\n  \n  vecP res;\n  P base=b-a,  target=project(a,b,cp);\n  \n  double length=abs(base), h=abs(cp-target);\n  base/=length;\n  \n  if(cr+eps<h)return res;\n  double w=Sqrt(cr*cr-h*h);\n  double L=getTime( normal(b-a) ,target-a)-w,  R=L+w*2.0;\n  \n  if( -eps<L && L< length+eps )res.push_back(a+base*L);\n  if( eq(L,R) )return res;\n  if( -eps<R && R< length+eps )res.push_back(a+base*R);\n  return res;\n}\n \ndouble getArea(C c,P a,P b){\n  P cp=c.first;\n  double cr=c.second;\n  \n  P va=cp-a,  vb=cp-b;\n  double A=abs(va), B=abs(vb);\n  double f=cross(va,vb), d=distSP( S(a,b) ,cp), res=0;\n  \n  if( eq(0, f ) )return 0;\n  if(A<cr+eps&&B<cr+eps)return f*0.5;\n  if(d>cr-eps)return cr*cr*PI*getArg(va,vb)/PI2;\n   \n  vecP u=getCrossCS(c, S(a,b) );\n  \n  assert( !u.empty() );\n  u.insert(u.begin(), a),  u.push_back(b);\n \n  for(int i=0;i+1<(int)u.size();i++) res+=getArea(c,u[i],u[i+1]);\n  return res;\n}\n \ndouble getCrossArea(vecP t,C c){\n  int n=t.size();\n  if(n<3)return 0;\n  double res=0;\n  for(int i=0;i<n;i++){\n    P a=t[i], b=t[(i+1)%n];\n    res+=getArea(c,a,b);\n  }\n  return res;\n}\n\nP input(){\n  int x,y;\n  cin>>x>>y;\n  return P(x,y);\n}\n\nvoid pr(P p,string str){\n  printf(\"%.10f %.10f\",p.real(),p.imag());\n  cout<<str;\n}\n\n\nint main(){\n  P s,t;\n  s=input(), t=input();\n  int q;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    P p=input();\n\n    P q=project(s,t,p);\n    pr(q,\"\\n\");\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n#define INF 1<<30\n#define LINF 1LL<<60\n\ntypedef long double ld;\ntypedef complex<ld> Point;\nconst ld eps = 1e-9, pi = acos(-1.0);\nnamespace std {\n    bool operator<(const Point &lhs, const Point &rhs) {\n        if (lhs.real() < rhs.real() - eps) return true;\n        if (lhs.real() > rhs.real() + eps) return false;\n        return lhs.imag() < rhs.imag();\n    }\n}\nPoint input_point() {ld x, y; cin >> x >> y; return Point(x, y);} // ????????\\???\nbool eq(ld a, ld b) {return (abs(a - b) < eps);} // ????????????????????????\nld dot(Point a, Point b) {return real(conj(a) * b);} // ??????\nld cross(Point a, Point b) {return imag(conj(a) * b);} // ??????\n\n// ??´????????????\nclass Line {\npublic:\n    Point a, b;\n    Line() : a(Point(0, 0)), b(Point(0, 0)) {}\n    Line(Point a, Point b) : a(a), b(b) {}\n    Point operator[](const int _num) {\n        if (_num == 0)return a;\n        else if (_num == 1)return b;\n        else assert(false);\n    }\n};\n\n// ????????????\nclass Circle {\npublic:\n    Point p;\n    ld r;\n    Circle() : p(Point(0, 0)), r(0) {}\n    Circle(Point p, ld r) : p(p), r(r) {}\n};\n\n// ??????????¶?\nPoint proj(Line l, Point p) {\n    ld t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + t * (l.a - l.b);\n}\n\nint main(void) {\n    cin.tie(0); ios::sync_with_stdio(false);\n//    Point p1 = input_point(),p2 = input_point(); Line l(p1,p2);\n    Line l(input_point(),input_point());\n    int q; cin >> q;\n    for(int i = 0; i < q;i++){\n        //   Point p = input_point(); Point x = proj(l,p);\n        Point x = proj(l,input_point());\n        cout << fixed << setprecision(10) << x.real() << \" \" << x.imag() << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cstdio>\n#define x real()\n#define y imag()\nusing namespace std;\ntypedef complex <double> point;\n\ndouble dot(point a,point b){\n  return a.x*b.x+a.y*b.y;\n}\n\npoint projection(point a,point b,point c){\n  point d = b - a;\n  return a+d*(dot(c-a,d)/(abs(d)*abs(d)));\n}\n\nint main(){\n  point a,b,c;\n  cin >>a.x>>a.y>>b.x>>b.y;\n  int q;\n  cin >> q;\n  for(int i=0;i<q;i++){\n    cin >> c.x >> c.y;\n    point res = projection(a,b,c);\n    printf(\"%.10f %.10f\\n\",res.x,res.y);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <array>\n#include <assert.h>\n#include <bitset>\n#include <chrono>\n#include <cmath>\n#include <complex>\n#include <cstring>\n#include <functional>\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n#include <istream>\n\n#include <map>\n#include <math.h>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\nnamespace asl\n{\n    \n    template <typename numeric_type>\n    class point\n    {\n    public:\n        numeric_type x, y;\n\n        point(numeric_type x = 0, numeric_type y = 0) : x(x), y(y) {}\n\n        point<numeric_type> &operator+=(const point<numeric_type> &ri)\n        {\n            x += ri.x;\n            y += ri.y;\n            return *this;\n        }\n\n        point<numeric_type> &operator-=(const point<numeric_type> &ri)\n        {\n            x -= ri.x;\n            y -= ri.y;\n            return *this;\n        }\n\n        point<numeric_type> &operator*=(const point<numeric_type> &ri)\n        {\n            auto _x = x * ri.x - y * ri.y;\n            auto _y = x * ri.y + y * ri.x;\n            x = _x;\n            y = _y;\n            return *this;\n        }\n\n        friend point<numeric_type> operator+(const point<numeric_type> &a, const point<numeric_type> &b)\n        {\n            return point<numeric_type>(a) += b;\n        }\n\n        friend point<numeric_type> operator-(const point<numeric_type> &a, const point<numeric_type> &b)\n        {\n            return point<numeric_type>(a) -= b;\n        }\n\n        friend point<numeric_type> operator*(const point<numeric_type> &a, const point<numeric_type> &b)\n        {\n            return point<numeric_type>(a) *= b;\n        }\n\n    };\n\n    template <typename numeric_type>\n    std::istream &operator>>(std::istream &is, point<numeric_type> &p)\n    {\n        return is >> p.x >> p.y;\n    }\n\n    template <typename numeric_type>\n    numeric_type norm(point<numeric_type> a)\n    {\n        return a.x * a.x + a.y * a.y;\n    }\n\n    template <typename numeric_type>\n    class line\n    {\n    public:\n        point<numeric_type> p, q;\n\n    };\n\n    template <typename numeric_type>\n    std::istream &operator>>(std::istream &is, line<numeric_type> &l)\n    {\n        return is >> l.p >> l.q;\n    }\n\n    template <typename numeric_type>\n    numeric_type dot(point<numeric_type> a, point<numeric_type> b)\n    {\n        return a.x * b.x + a.y * b.y;\n    }\n\n} \n\n#include <stdint.h>\n\n#include <experimental/optional>\n\nnamespace asl\n{\n    \n    template <typename numeric_type>\n    point<numeric_type> projection(const line<numeric_type> &l, const point<numeric_type> &p)\n    {\n        double t = dot(p - l.p, l.p - l.q) / norm(l.p - l.q);\n        return l.p + t * (l.p - l.q);\n    }\n\n} \n \n#include <random>\n\n#define endl '\\n'\n\nusing namespace asl;\nusing namespace std;\n\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n\n    line<double> l;\n\n    cin >> l;\n\n    int n;\n    cin >> n;\n\n    cout.precision(10);\n    cout << fixed;\n\n    while (n--)\n    {\n        point<double> p;\n        cin >> p;\n\n        auto q = projection(l, p);\n        cout << q.x << \" \" << q.y << endl;\n    }\n\n    return 0;\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <math.h>\n#include <string.h>\n#include <stdio.h>\nusing namespace std;\nconst int MAXN = 5000;\nint s[MAXN];\nstruct Point\n{\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n};\nstruct Line\n{\n    Point p1, p2;\n    Line() {}\n    Line(Point p1, Point p2): p1(p1), p2(p2) {}\n\n} lie[MAXN];\n\ntypedef Point Vector;\nVector operator +(Vector A, Vector B)\n{\n    return Vector(A.x + B.x, A.y + B.y);\n}\nVector operator -(Vector A, Vector B)\n{\n    return Vector(A.x - B.x, A.y - B.y);\n}\nVector operator *(Vector A, double p)\n{\n    return Vector(A.x * p, A.y * p);\n}\nVector operator /(Vector A, double p)\n{\n    return Vector(A.x / p, A.y / p);\n}\nVector operator -(Vector A)\n{\n    return  Vector(-A.x, -A.y);\n}\n\ndouble torad(double deg)//角度换弧度\n{\n    return deg / 180 * acos(-1.0);\n}\n\nconst double EPS = 1e-10;\nint dcmp(double x)\n{\n    if(fabs(x) < EPS) return 0;\n    else return x < 0 ? -1 : 1;\n}\n\n//向量点积\ndouble Dot(Vector A, Vector B) \n{ \n    return A.x*B.x + A.y*B.y; \n}\n\n//向量叉积\ndouble Cross(Vector A, Vector B)\n{\n    return A.x * B.y - A.y * B.x;\n}\n\nconst int INF = 1000005;\nint par[INF], ran[INF];\n\n//点在直线上的投影\nPoint GetLineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A+v*(Dot(v, P-A)/Dot(v, v));\n}\n\n\nint main()\n{\n    double x1,y1,x2,y2;\n    cin>>x1>>y1>>x2>>y2;\n    Point p1=Point(x1,y1);\n    Point p2=Point(x2,y2);\n    int n;\n    cin>>n;\n    while(n--)\n    {\n        double x,y;\n        cin>>x>>y;\n        Point p=Point(x,y);\n        Point Pp=GetLineProjection(p,p1,p2);\n        printf(\"%.10f %.10f\\n\",Pp.x,Pp.y);\n    }\n    return 0;\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0.0, double y = 0.0) :\n\t\t\tx(x), y(y) {\n\t}\n\n\tPoint operator +(Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(double k) {\n\t\treturn Point(x * k, y * k);\n\t}\n\tPoint operator /(double k) {\n\t\treturn Point(x / k, y / k);\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator <(Point p) {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator ==(Point p) {\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :\n\t\t\tp1(p1), p2(p2) {\n\t}\n};\ntypedef Segment Line;\n\ndouble dot(Vector v1, Vector v2) {\n\treturn v1.x * v2.x + v1.y * v2.y;\n}\ndouble cross(Vector v1, Vector v2) {\n\treturn v1.x * v2.y - v1.y * v2.x;\n}\nbool isOrthogonal(Vector v1, Vector v2) {\n\treturn equals(dot(v1, v2), 0.0);\n}\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool isOrthogonal(Point l1, Point l2, Point m1, Point m2) {\n\treturn isOrthogonal(l2 - l1, m2 - m1);\n}\nbool isParallel(Vector v1, Vector v2) {\n\treturn equals(cross(v1, v2), 0.0);\n}\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool isParallel(Point l1, Point l2, Point m1, Point m2) {\n\treturn isParallel(l1 - l2, m1 - m2);\n}\n\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\nint main() {\n\tLine l;\n\tcin >> l.p1.x >> l.p1.y;\n\tcin >> l.p2.x >> l.p2.y;\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tPoint p = projection(l, Point(x, y));\n\t\tcout << fixed << setprecision(10) << p.x << \" \" << p.y << endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "# include <iostream>\n# include <algorithm>\n# include <vector>\n# include <string>\n# include <set>\n# include <map>\n# include <cmath>\n# include <iomanip>\n# include <functional>\n# include <utility>\n# include <stack>\n# include <queue>\n# include <list>\nconstexpr int MOD = 1000000007;\nconstexpr int INF = 2000000000;\nusing namespace std;\n\n//????????????????????¨????????????????????????\n\n//????????¨????§???????(Point?????????)\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b))<EPS)\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a*x, a*y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble Abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x, y*y; }\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS&&fabs(y - p.y) < EPS;\n\t}\n};\n\n//?????????????????¨????§???????????????????????????????\ntypedef Point Vector;\n\n//?§????p1??¨??????p2?????????\nstruct Segment { Point p1, p2; };\n\n//??????\ntypedef Segment Line;\n\n//???\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n//????§???¢\ntypedef vector<Point> Polygon;\n\n//?????????????????????????????§??????\ndouble norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble sqrt(Vector a) {\n\treturn sqrt(norm(a));\n}\n\n//????????????a??¨b?????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//????????????a??¨b?????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//????????????a??¨b?????´?????????\nbool isOrtogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrtogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrtogonal(a1 - a2, b1 - b2);\n}\nbool isOrtogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 -s2.p1), 0.0);\n}\n\n//????????????a??¨b???????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//??????s????????????p????°???±\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\n\nint main() {\n\tdouble xp1, yp1, xp2, yp2;\n\tcin >> xp1 >> yp1 >> xp2 >> yp2;\n\tPoint p1 = { xp1,yp1 }, p2 = { xp2,yp2 };\n\tSegment s = { p1,p2 };\n\tint n;\n\tcin >> n;\n\tdouble a, b;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> a >> b;\n\t\tPoint p = { a,b };\n\t\tPoint ans = project(s, p);\n\t\tcout << fixed << setprecision(10) << ans.x <<\" \"<<ans.y <<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef ___GEOMETRY_LIBRARY\n#define ___GEOMETRY_LIBRARY\n\n#include <vector>\n#include <algorithm>\n\ntemplate<class type>\nclass point2d {\npublic:\n\ttype x, y;\n\tpoint2d() : x(type(0)), y(type(0)) {};\n\tpoint2d(type x_, type y_) : x(x_), y(y_) {};\n\tbool operator==(const point2d& p) { return x == p.x && y == p.y; }\n\tbool operator!=(const point2d& p) { return x != p.x || y != p.y; }\n\tpoint2d& operator+=(const point2d& p) { x += p.x; y += p.y; return *this; }\n\tpoint2d& operator-=(const point2d& p) { x -= p.x; y -= p.y; return *this; }\n\tpoint2d& operator*=(type val) { x *= val; y *= val; return *this; }\n\tpoint2d& operator/=(type val) { x /= val; y /= val; return *this; }\n\tpoint2d operator+(const point2d& p) const { return point2d(*this) += p; }\n\tpoint2d operator-(const point2d& p) const { return point2d(*this) -= p; }\n\tpoint2d operator*(type val) const { return point2d(*this) *= val; }\n\tpoint2d operator/(type val) const { return point2d(*this) /= val; }\n\ttype norm() const { return x * x + y * y; }\n\ttype abs() const { return type(std::sqrt(x * x + y * y)); }\n\tlong double fabs() const { return std::sqrt((long double)(x * x + y * y)); }\n\ttype dot(const point2d& p) const { return x * p.x + y * p.y; }\n\ttype cross(const point2d& p) const { return x * p.y - y * p.x; }\n\tint ccw(const point2d& p1, const point2d& p2) const {\n\t\tpoint2d pr1 = p1 - point2d(*this);\n\t\tpoint2d pr2 = p2 - point2d(*this);\n\t\tif (pr1.cross(pr2) != 0) return pr1.cross(pr2) > 0 ? 1 : -1;\n\t\tif (pr1.dot(pr2) < 0) return 2;\n\t\treturn pr1.norm() < pr2.norm() ? -2 : 0;\n\t}\n};\n\ntemplate<class type>\nclass segment2d {\npublic:\n\tpoint2d<type> p1, p2;\n\tsegment2d() : p1(point2d<type>()), p2(point2d<type>()) {};\n\tsegment2d(const point2d<type>& p1_, const point2d<type>& p2_) : p1(p1_), p2(p2_) {};\n\ttype norm() const { return (p1 - p2).norm(); }\n\ttype abs() const { return (p1 - p2).abs(); }\n\tlong double fabs() const { return (p1 - p2).fabs(); }\n};\n\n#endif // ___GEOMETRY_LIBRARY\n\n#include <iostream>\nusing namespace std;\nint main() {\n\tcin.tie(0);\n\tios_base::sync_with_stdio(false);\n\tsegment2d<double> s;\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tint q;\n\tcin >> q;\n\tcout.precision(15);\n\tfor (int i = 0; i < q; ++i) {\n\t\tpoint2d<double> p;\n\t\tcin >> p.x >> p.y;\n\t\tdouble r = (p - s.p1).dot(s.p2 - s.p1) / (s.p2 - s.p1).norm();\n\t\tpoint2d<double> ans = s.p1 + (s.p2 - s.p1) * r;\n\t\tcout << ans.x << ' ' << ans.y << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// #include <bits/stdc++.h>\n#include <iostream>\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst double eps = 1e-8;\nconst double pi = acos(-1.0);\ntypedef long long ll;\nint sgn(double x){\n    if(fabs(x)<eps){\n        return 0;\n    }\n    if(x<0){\n        return -1;\n    }else{\n        return 1;\n    }\n}\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x = _x;\n        y = _y;\n    }\n    void input(){\n        scanf(\"%lf%lf\",&x,&y);\n    }\n    Point operator+(const Point &b)const{\n        return Point(x+b.x,y+b.y);\n    }\n    Point operator -(const Point &b)const{\n        return Point(x-b.x,y-b.y);\n    }\n    double operator *(const Point &b)const{\n        return x*b.x+y*b.y;\n    }\n    Point operator *(const double &k)const{\n        return Point(x*k,y*k);\n    }\n    Point operator /(const double &k)const{\n        return Point(x/k,y/k);\n    }\n    double len2(){\n        return x*x+y*y;\n    }\n};\nstruct Line{\n    Point s,e;\n    Line(){}\n    Line(Point _s,Point _e){\n        s = _s;\n        e = _e;\n    }\n    //返回点p在直线上的投影\n    Point lineprog(Point p){\n        return s+(((e-s)*((e-s)*(p-s)))/((e-s).len2()));\n    }\n};\nint main(){\n    Point p1,p2,p3;\n    p1.input();\n    p2.input();\n    Line line(p1,p2);\n    int q;\n    scanf(\"%d\",&q);\n    Point ans;\n    while(q--){\n        p3.input();\n        ans = line.lineprog(p3);\n        printf(\"%.10f %.10f\\n\",ans.x,ans.y);\n    }\n   \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\n#define equals(a, b) (a == b)\n\nclass Point {\n    public:\n        Point() = default;\n        Point(double x = 0, double y = 0): x(x), y(y) {}\n        Point operator + (Point p) { return Point(x + p.get_x(), y + p.get_y()); }\n        Point operator - (Point p) { return Point(x - p.get_x(), y - p.get_y()); }\n        Point operator * (double k) { return Point(k * x, k * y); }\n        Point operator / (double k) { return Point(x / k, y / k); }\n        double abs() { return sqrt(norm()); }\n        double norm() { return x * x + y * y; }\n        bool operator < (const Point &p) const {\n            return x != p.get_x() ? x < p.get_x() : y < p.get_y();\n        }\n        bool operator == (const Point &p) const {\n            return x == p.get_x() && y == p.get_y();\n        }\n        const double get_x() const { return x; }\n        const double get_y() const { return y; }\n    private:\n        double x = 0;\n        double y = 0;\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.get_x() * b.get_x() + a.get_y() * b.get_y();\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.get_x() * b.get_y() - a.get_y() * b.get_x();\n}\n\nstruct Segment {\n    Point p1;\n    Point p2;\n};\ntypedef Segment Line;\n\nbool is_orthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0);\n}\n\nbool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return is_orthogonal(a1 - a2, b1 - b2);\n}\n\nbool is_orthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0);\n}\n\nbool is_parallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0);\n}\n\nbool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n    return is_parallel(a1 - a2, b1 - b2);\n}\n\nbool is_parallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nint\nmain(int argc, const char *argv[])\n{\n    double x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    int q;\n    cin >> q;\n    while (q--) {\n        double p0, q0;\n        cin >> p0 >> q0;\n        Point p{p0, q0};\n        Point sp1{x0, y0}, sp2{x1, y1};\n        Segment s{sp1, sp2};\n        Point r = project(s, p);\n        printf(\"%.10f %.10f\\n\", r.get_x(), r.get_y());\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <iomanip>\n#include <cmath>\n\nstruct  Vector {\n    double x = 0, y = 0;\n    Vector(int _x, int _y) : x(_x), y(_y) {}\n    Vector(double _x, double _y) : x(_x), y(_y) {}\n\n    double dot(const Vector &r) const {\n        return x * r.x + y * r.y;\n    }\n    \n    double cross(const Vector &r) const {\n        return x * r.y - y * r.x;\n    }\n\n    double length() const {\n        return sqrt(x * x + y * y);\n    }\n\n    Vector  operator +  (const Vector &r) const {\n        return Vector(x + r.x, y + r.y);\n    }\n    Vector& operator += (const Vector &r) {\n        x += r.x, y += r.y;\n        return *this;\n    }\n\n    Vector  operator -  () const {\n        return Vector(-x, -y);\n    }\n\n    Vector  operator -  (const Vector &r) const {\n        return *this + -r;\n    }\n    Vector& operator -= (const Vector &r) {\n        x -= r.x, y -= r.y;\n        return *this;\n    }\n\n    Vector  operator *  (double k) const {\n        Vector tmp = *this;\n        tmp.x *= k, tmp.y *= k;\n        return tmp;\n    }\n\n    Vector& operator *= (double k) {\n        x *= k, y *= k;\n        return *this;\n    }\n\n    void unitise() {\n        double len = length();\n        x /= len, y /= len;\n    }\n};\ntypedef Vector Point;\n\nVector operator * (double k, const Vector & r) {\n    return r * k;\n}\nusing namespace std;\n\n\nint main() {\n    // freopen(\"in\", \"r\", stdin);\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int xp1, yp1, xp2, yp2, q, xp, yp;\n    cin >> xp1 >> yp1 >> xp2 >> yp2 >> q;\n    Vector p12(xp2 - xp1, yp2 - yp1);\n    p12.unitise();\n    while (q--) {\n        cin >> xp >> yp;\n        Vector p1p(xp - xp1, yp - yp1);\n        double d = p1p.dot(p12);\n        Vector ans = Vector(xp1, yp1) + d * p12;\n        cout << fixed << setprecision(8) << ans.x << ' ' << ans.y << '\\n';\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> point;\nnamespace std{\n    bool operator < (const point& a, const point& b) {\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n}\ndouble cross(const point& a, const point& b) {\n    return imag(conj(a)*b);\n}\ndouble dot(const point& a, const point& b) {\n    return real(conj(a)*b);\n}\n\nint main()\n{\n    double xp1, yp1, xp2, yp2;\n    scanf(\"%lf %lf %lf %lf\", &xp1, &yp1, &xp2, &yp2);\n    point p1(xp1,yp1), p2(xp2,yp2);\n    int q;\n    scanf(\"%d\", &q);\n    vector<point> List;\n    for(int i = 0; i < q; ++i) {\n        double qx, qy;\n        scanf(\"%lf %lf\", &qx, &qy);\n        List.push_back(point(qx, qy));\n    }\n\n    for(int i = 0; i < q; ++i) {\n        point tmp = dot(p2 - p1, List[i] - p1)/dot(p2-p1, p2-p1)*(p2-p1)+p1;\n        printf(\"%.12lf %.12lf\\n\", tmp.real(), tmp.imag());\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// 射影　正射影ベクトル\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<vector>\n\n#include<queue>\n\nusing namespace std;\n\n// 浮動小数点のゼロ判定\n#define EPS (1e-10)\n#define equals(a, b) ( fabs((a) - (b)) < EPS )\n\n// 点を表すクラス\nclass Point\n{\n    public:\n        double x, y;\n        // コンストラクタ\n        Point(double x = 0.0, double y = 0.0) : x(x), y(y){ }\n\n        // -----▼▼▼ 演算子のオーバーロード ▼▼▼-----\n\n        Point operator + (Point &p)\n        {\n            return Point(x + p.x, y + p.y);\n        }\n\n        Point operator - (Point &p)\n        {\n            return Point(x - p.x, y - p.y);\n        }\n\n        Point operator * (double a)\n        {\n            return Point(a * x, a * y);\n        }\n\n        Point operator / (double a)\n        {\n            return Point(x / a, y / a);\n        }\n\n        bool operator < ( const Point &p) const\n        {\n            return x != p.x ? x < p.x : y < p.y;\n        }\n\n        bool operator == ( const Point &p) const\n        {\n            return fabs(x - p.x) < EPS && fabs(y -p.y) < EPS;\n        }\n\n        // -----▲▲▲ 演算子のオーバーロード ▲▲▲-----\n\n        // 2点間の距離\n        double distance()\n        {\n            return sqrt( norm() );\n        }\n\n        double norm()\n        {\n            return ( x * x ) + ( y * y );\n        }\n};\n\n// 線分を表すクラス\nclass Segment\n{\n    public:\n        Point p1, p2;\n        // コンストラクタ\n        Segment(Point p1, Point p2) : p1(p1), p2(p2){ }\n};\n\n// 点とベクトルの表現は同じ\ntypedef Point Vector;\n// 線分と直線の表現は同じ\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b);\ndouble cross(Vector a, Vector b);\n\nint main(void)\n{\n    int q;\n    Vector p1, p2, p;\n    Vector vertical, base, OH;\n\n    // ベクトル要素の格納\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n\n    cin >> q;\n\n    for(int i = 0; i < q; i++)\n    {\n\n        // ベクトル要素の格納\n        cin >> p.x >> p.y;\n\n        base = p2 - p1;\n        vertical = p - p1;\n\n        // 正射影ベクトルの考え方より\n        // OHベクトル = ( ( a, bベクトルの内積 ) / aベクトルの大きさの2乗 ) * aベクトル\n        OH = ( base * ( dot(base, vertical) / pow( base.distance(), 2.0 ) ) ) + p1;\n\n         printf(\"%.10lf %.10lf\\n\", OH.x, OH.y);\n    }\n\n    return 0;\n}\n\n// 内積の計算をする関数\ndouble dot(Vector a, Vector b)\n{\n    return ( ( a.x * b.x ) + ( a.y * b.y ) );\n}\n\n// 外積の計算をする関数\ndouble cross(Vector a, Vector b)\n{\n    return ( ( a.x * b.y ) - ( a.y * b.x ) );\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\nint main(void)\n{\n    double x_p1,y_p1,x_p2,y_p2;\n    int q;\n    double x_p[1000],y_p[1000];\n    double x[1000],y[1000];\n    \n    cin>>x_p1>>y_p1>>x_p2>>y_p2;\n    cin>>q;\n    for(int i=0;i<q;i++)\n        cin>>x_p[i]>>y_p[i];\n    \n    for(int i=0;i<q;i++)\n    {\n        x[i]=((x_p2-x_p1)*(x_p2-x_p1)*x_p[i]+(y_p2-y_p1)*(y_p2-y_p1)*x_p1+(y_p[i]-y_p1)*(x_p2-x_p1)*(y_p2-y_p1))/((y_p2-y_p1)*(y_p2-y_p1)+(x_p2-x_p1)*(x_p2-x_p1));\n        if(x_p1!=x_p2)\n            y[i]=((y_p2-y_p1)*(x[i]-x_p1))/(x_p2-x_p1)+y_p1;\n        else\n            y[i]=(-(x_p2-x_p1)*(x[i]-x_p[i]))/(y_p2-y_p1)+y_p[i];\n        \n        printf(\"%.8lf %.8lf\\n\",x[i],y[i]);\n    }\n    \n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SBCURE_NO_DEPRECATE\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nconst int maxn = 110;\nconst int INF = 0x7fffffff;\n\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\nint cmp(Point A, Point B)                     //竖直排序  \n{\n\treturn (A.y<B.y || (A.y == B.y&&A.x<B.x));\n}\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\n\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) >= 0; j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) >= 0; j--) {\n\t\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\n\n\n\nint main(){\n\tSegment s;\n\tPoint p;\n\tint x1,x2,y1,y2,q;\n\tcin>>x1>>y1>>x2>>y2;\n\ts.p1.x=x1;s.p1.y=y1;\n\ts.p2.x=x2;s.p2.y=y2;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x1>>y1;\n\t\tp.x=x1;p.y=y1;\n\t\tPoint ans=project(s, p);\n\t\tcout.precision(20);\n\t\tcout<<ans.x<<\" \"<<ans.y<<endl;\t\t\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define PI acos(-1.0)\n#define EPS 1e-10\n\ndouble handleNegZero(double x) {return ((abs(x) < EPS)?0.0:x);}\n\nstruct Point {\n    double x, y;\n    Point(){}\n    Point(double _x, double _y):x(_x), y(_y){}\n\n    bool operator < (Point other) const {\n        if(fabs(x - other.x) > EPS)\n            return x < other.x;\n        return y < other.y;\n    }\n\n    bool operator == (Point other) const {\n        return ((fabs(x - other.x) < EPS) && (fabs(y - other.y) < EPS));\n    }\n};\n\nstruct vec {\n    double x, y;\n    vec(){}\n    vec(double _x, double _y):x(_x), y(_y){}\n};\n\nvec toVec(Point a, Point b) {return vec(b.x - a.x, b.y - a.y);}\ndouble dot(vec a, vec b) {return (a.x*b.x + a.y*b.y);}\ndouble norm(vec v) {return sqrt(v.x*v.x + v.y*v.y);}\n\nint main() {\n    //freopen(\"in\", \"r\", stdin);\n    double x0, y0, x1, y1, x2, y2;\n    int q;\n    Point a, b, c;\n\n    scanf(\"%lf %lf %lf %lf\", &x0, &y0, &x1, &y1);\n    scanf(\"%d\", &q);\n    a = Point(x0, y0);\n    b = Point(x1, y1);\n\n    for(int i = 0; i < q; i++) {\n        scanf(\"%lf %lf\", &x2, &y2);\n\n        if(((x0 == x2) && (y0 == y2)) || ((x1 == x2) && (y1 == y2))) {\n            printf(\"%0.9lf %0.9lf\\n\", handleNegZero(x2), handleNegZero(y2));\n            continue;\n        }\n\n        c = Point(x2, y2);\n        vec v1 = toVec(a, b), v2 = toVec(a, c);\n\n        double costheta = (dot(v1, v2) / (norm(v1) * norm(v2)));\n        double lenv2 = norm(v2);\n        double lenv1 = norm(v1);\n        double proj = lenv2 * costheta;\n        double x = (proj / lenv1) * v1.x;\n        double y = (proj / lenv1) * v1.y;\n        printf(\"%0.9lf %0.9lf\\n\", handleNegZero(x), handleNegZero(y));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\nusing namespace std;\nconst double EPS = 1e-7;\nconst double INF = 1e12;\nstruct Vec {\n    double x,y;\n    Vec(){}\n    Vec(double x,double y){ this->x=x,this->y=y; }\n    void read(){ scanf(\"%lf%lf\",&x,&y); }\n    void prt() {printf(\"%.9f %.9f\\n\",x,y); }\n    double len(){ return sqrt(x*x+y*y); }\n    double len2(){ return x*x+y*y; }\n    \n    Vec operator+(const Vec&o)const{ return Vec(x+o.x,y+o.y); }\n    Vec operator-(const Vec&o)const{ return Vec(x-o.x,y-o.y); }\n    Vec operator*(const double&k)const{ return Vec(k*x,k*y); }\n    double operator*(const Vec&o)const {return x*o.x+y*o.y; }\n    double operator^(const Vec&o)const {return x*o.y-y*o.x; }\n    Vec rotate(double ang){ return Vec(x*cos(ang)-y*sin(ang), x*sin(ang)+y*cos(ang)); }\n    Vec change(double l){ if(len()<EPS) return *this; return (*this)*(l/len()); }\n    double disToLine(Vec A, Vec B) {\n        return abs((A-*this)^(B-*this))/(B-A).len();\n    }\n};\n\nVec Lineintersect(Vec A1,Vec A2,Vec B1,Vec B2) {\n    if (abs((A2-A1)^(B2-B1)) < EPS) return Vec(INF,INF);\n    return A1 + (A2 - A1) * ((abs((A2-A1)^(B2-B1)) - abs((A2-B1)^(B2-B1)) ) / abs((A2-A1)^(B2-B1)));\n}\n\nVec Segintersect(Vec A1,Vec A2,Vec B1,Vec B2) {\n    Vec P = Lineintersect(A1,A2,B1,B2);\n    if ((P-A1)*(P-A2)<=0 && (P-B1)*(P-B2)<=0) return P; \n    return Vec(INF,INF);\n}\n\nVec p1,p2;\nint main(){\n    p1.read(); p2.read();\n    int q; scanf(\"%d\",&q);\n    while(q--){\n        Vec p; p.read();\n        double dis = p.disToLine(p1,p2);\n        int sgn = ((p2-p1)^(p-p1))>=0?-1:+1;\n        //(p2-p1).rotate(acos(-1)/2).prt();\n        p=p+(p2-p1).rotate(acos(-1)/2).change(dis)*sgn;\n        p.prt();\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing UL = unsigned int;\nusing ULL = unsigned long long;\nusing LL = long long;\n#define rep(i,n) for(UL i=0; i<(n); i++)\n\nstruct Vec{\n double x,y;\n Vec(double xx, double yy) : x(xx),y(yy) {}\n Vec operator+() const {return Vec(x,y);}\n Vec operator-() const {return Vec(-x,-y);}\n Vec operator+(const Vec& r) const {return Vec(x+r.x,y+r.y);}\n Vec operator-(const Vec& r) const {return Vec(x-r.x,y-r.y);}\n Vec operator*(double r) const {return Vec(x*r,y*r);}\n Vec operator/(double r) const {return Vec(x/r,y/r);}\n Vec& operator+=(const Vec& r) {*this=*this+r; return *this;}\n Vec& operator-=(const Vec& r) {*this=*this-r; return *this;}\n Vec& operator*=(double r) {*this=*this*r; return *this;}\n Vec& operator/=(double r) {*this=*this/r; return *this;}\n double operator*(const Vec& r) const {return x*r.x+y*r.y;}\n double abs() const {return sqrt(x*x+y*y);}\n double abs_squared() const {return x*x+y*y;}\n};\n\nVec InputVec(){\n double x,y; scanf(\"%lf%lf\",&x,&y);\n return Vec(x,y);\n}\n\nvoid PrintVec(Vec tg){\n printf(\"%.10f %.10f\",tg.x,tg.y);\n}\n\nint main() {\n Vec O = InputVec();\n Vec A = InputVec() - O;\n A /= A.abs();\n UL Q; scanf(\"%u\",&Q);\n rep(q,Q){\n  Vec X = InputVec() - O;\n  PrintVec(O + A * (A*X));\n  printf(\"\\n\");\n }\n return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing LD = long double;\n\nstruct vec2 {\n\tLD x, y;\n\tvec2(LD x = 0, LD y = 0) : x(x), y(y) {}\n\tvec2 operator + (const vec2 &rhs) const {\n\t\treturn vec2(x + rhs.x, y + rhs.y);\n\t}\n\tvec2 operator - (const vec2 &rhs) const {\n\t\treturn vec2(x - rhs.x, y - rhs.y);\n\t}\n\tLD operator * (const vec2 &rhs) const {\n\t\treturn x * rhs.x + y * rhs.y;\n\t}\n\tLD operator ^ (const vec2 &rhs) const {\n\t\treturn x * rhs.y - y * rhs.x;\n\t}\n\tvec2 operator * (const LD rhs) const {\n\t\treturn vec2(x * rhs, y * rhs);\n\t}\n\tfriend vec2 operator * (const LD lhs, const vec2 rhs) {\n\t\treturn vec2(lhs * rhs.x, lhs * rhs.y);\n\t}\n\tvec2 operator / (const LD rhs) const {\n\t\treturn vec2(x / rhs, y / rhs);\n\t}\n\tLD norm2() const {\n\t\treturn x * x + y * y;\n\t}\n\tLD norm() const {\n\t\treturn std::sqrt(norm2());\n\t}\n\tfriend std::istream& operator >> (std::istream &cin, vec2 &v) {\n\t\treturn cin >> v.x >> v.y;\n\t}\n\tfriend std::ostream& operator << (std::ostream &cout, const vec2 v) {\n\t\treturn cout << std::fixed << std::setprecision(10) << v.x << ' ' << std::fixed << std::setprecision(10) << v.y;\n\t}\n};\nint main() {\n\tstd::ios::sync_with_stdio(0), std::cin.tie(0);\n\tvec2 v1, v2, v;\n\tstd::cin >> v1 >> v2, v2 = v2 - v1, v2 = v2 / v2.norm();\n\tint q; std::cin >> q;\n\tfor (int i = 1; i <= q; ++i) {\n\t\tstd::cin >> v, v = v - v1;\n\t\tLD l = v * v2;\n\t\tstd::cout << v1 + l * v2 << '\\n';\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\nstruct Point{double x, y;};\n\nint main(int argc, char const *argv[])\n{\n    Point p0, p1, p2;\n    Point a, b, x;\n    int q;\n    scanf(\"%lf %lf %lf %lf\", &p1.x, &p1.y, &p2.x, &p2.y);\n    a.x = p2.x - p1.x;\n    a.y = p2.y - p1.y;\n\n    scanf(\"%d\", &q);\n\n    for(int i=0; i<q; i++){\n        scanf(\"%lf %lf\", &p0.x, &p0.y);\n        b.x = p0.x - p1.x;\n        b.y = p0.y - p1.y;\n        x.x = (a.x*b.x+a.y*b.y)/(a.x*a.x+a.y*a.y) * a.x;\n        x.y = (a.x*b.x+a.y*b.y)/(a.x*a.x+a.y*a.y) * a.y;\n        printf(\"%.10lf %.10lf\\n\", x.x + p1.x, x.y+p1.y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// ConsoleApplication.cpp : コンソール アプリケーションのエントリ ポイントを定義します。\n//\n\n#include \"stdio.h\"\n#include <cstdlib>\n#include <iostream>\n#include <iomanip>\n#include <cmath>\n\nusing namespace std;\nusing NUM = double;\n\ntemplate<typename T>\nstruct Point {\n\tT x, y;\n\tPoint<T> operator+(const Point<T>& rhs)const {\n\t\tPoint<T> p;\n\t\tp.x = this->x + rhs.x;\n\t\tp.y = this->y + rhs.y;\n\t\treturn p;\n\t}\n\tPoint<T> operator-(const Point<T>& rhs)const {\n\t\tPoint<T> p;\n\t\tp.x = this->x - rhs.x;\n\t\tp.y = this->y - rhs.y;\n\t\treturn p;\n\t}\n\tPoint<T> operator*(const T rhs) const {\n\t\tPoint<T> p(*this);\n\t\tp.x = this->x * rhs;\n\t\tp.y = this->y * rhs;\n\t\treturn p;\n\t}\n};\n\ntemplate<typename T>\nbool isZero(const T val)\n{\n\treturn fabs(val) < 1e-10;\n}\n\ntemplate<typename T>\nT innerProduct(const Point<T>& p0, const Point<T>& p1)\n{\n\tdouble x0 = p0.x;\n\tdouble y0 = p0.y;\n\tdouble x1 = p1.x;\n\tdouble y1 = p1.y;\n\treturn x0 * x1 + y0 * y1;\n}\n\ntemplate<typename T>\nT outerProduct(const Point<T>& p0, const Point<T>& p1)\n{\n\tdouble x0 = p0.x;\n\tdouble y0 = p0.y;\n\tdouble x1 = p1.x;\n\tdouble y1 = p1.y;\n\treturn x0 * y1 - y0 * x1;\n}\n\ntemplate<typename T>\nT norm(const Point<T>& p)\n{\n\tdouble x = p.x;\n\tdouble y = p.y;\n\treturn x*x + y*y;\n}\n\ntemplate<typename T>\nvoid readPoint(Point<T>& p)\n{\n\tcin >> p.x;\n\tcin >> p.y;\n}\n\ntemplate<typename T>\nvoid outputComponentesOfPoint(const Point<T>& p)\n{\n\tcout << fixed;\n\tcout << setprecision(8) << p.x;\n\tcout << \" \";\n\tcout << setprecision(8) << p.y;\n\tcout << endl;\n}\n\nint main()\n{\n\n\tPoint<NUM> p1,p2;\n\treadPoint(p1);\n\treadPoint(p2);\n\tconst Point<NUM> b = p2 - p1;\n\tconst NUM b_b_ = norm(b);\n\n\tint q; cin >> q;\n\tfor (int i = 0; i != q; ++i) {\n\t\tPoint<NUM> p;\n\t\treadPoint(p);\n\t\tconst Point<NUM> a = p - p1;\n\t\tconst NUM ab = innerProduct(a, b);\n\t\tconst Point<NUM> projectedPoint = p1 + b*(ab / b_b_);\n\t\toutputComponentesOfPoint(projectedPoint);\n\t};\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <vector>\n#include <math.h>\n\n\nusing namespace std;\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS) //?????????????????????????????????\n\n\n//??????????????????????????????\nclass Point {\n\npublic:\n\n\tdouble x, y;//??§?¨????????????????x,y??????\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator * (double r) {\n\t\treturn Point(x * r, y * r);\n\t}\n\n\tPoint operator / (double r) {\n\t\treturn Point(x / r, y / r);\n\t}\n\n\tdouble norm() {\n\t\treturn x*x + y*y;\n\t}\n\n\t//?????????????????§???????????????\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS &&  fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\n//??????????????????????????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????????????????????????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\n\tSegment(){}\n\n\t//?????¨????°???±?????????\n\tPoint projection(Point p) {\n\t\tVector base = p2 - p1;\n\n\t\tdouble r = dot(p - p1, base) / base.norm();\n\t\treturn p1 + base * r;\n\t}\n\n};\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//?°???±?????????\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\ntypedef Segment Line;\n\ntypedef vector<Point> Polygon;\n\n\n\n//???\nclass Circle {\npublic:\n\tPoint c;//??????\n\tdouble r;//??????\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n\nint main(void)\n{\n\tint n;\n\n\tSegment s;\n\tPoint p;\n\tPoint proj;\n\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> p.x >> p.y;\n\t\tproj = projection(s, p);\n\t\tprintf(\"%.9lf %.9lf\\n\",proj.x,proj.y);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <complex>\n#include <cmath>\n\nusing namespace std;\n\nstatic const double EPS=1e-12;\nstatic const double INF=1e24;\n\nusing Point=complex<double>;\nusing Plane=vector<Point>;\n\nbool operator<(const Point &a, const Point &b) {\n    return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b);\n}\n\ndouble cross_prod(const Point &a, const Point &b) {\n    return imag(conj(a)*b);\n}\n\ndouble dot_prod(const Point &a, const Point &b) {\n    return real(conj(a)*b);\n}\n\nstruct Line: public vector<Point> {\n    Line() {}\n    Line(const Point &a, const Point &b) {\n        push_back(a);\n        push_back(b);\n    }\n};\n\nstruct Circle {\n    Point p;\n    double r;\n    Circle() {}\n    Circle(const Point &p, const double r): p(p), r(r) {}\n};\n\nint main() {\n    double x, y;\n    scanf(\"%lf %lf\", &x, &y);\n    Point p1(x, y);\n\n    scanf(\"%lf %lf\", &x, &y);\n    Point p2(x, y);\n\n    if (real(p2) < real(p1))\n        swap(p1, p2);\n\n    Point e(real(p2)-real(p1), imag(p2)-imag(p1));\n    e /= abs(e);\n\n    size_t q;\n    scanf(\"%zu\", &q);\n    for (size_t i=0; i<q; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        Point p(x, y);\n\n        double r=dot_prod(p, e);\n        Point z=p1+r*e;\n        printf(\"%.12f %.12f\\n\", real(z), imag(z));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iomanip>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1.0e-9\n\ndouble dist(int x, int y)\n{\n\treturn sqrt(x * x + y * y);\n}\n\ndouble angle(int x, int y)\n{\n\treturn atan2((double)(x), (double)(y));\n}\n\nint main()\n{\n\tint x0, y0, x1, y1, x2, y2, q;\n\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tcin >> x2 >> y2;\n\n\t\tint ax = x1 - x0;\n\t\tint ay = y1 - y0;\n\t\tint bx = x2 - x0;\n\t\tint by = y2 - y0;\n\n\t\tdouble ad = dist(ax, ay);\n\t\tdouble bd = dist(bx, by);\n\n\t\tdouble at = angle(ax, ay);\n\t\tdouble bt = angle(bx, by);\n\n\t\tdouble cx = ax * (bd / ad) * cos(bt - at);\n\t\tdouble cy = ay * (bd / ad) * cos(bt - at);\n\n\t\tif (x0 + cx < -EPS || EPS < x0 + cx)\n\t\t{\n\t\t\tcout << setprecision(15) << x0 + cx << ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << 0 << ' ';\n\t\t}\n\n\t\tif (y0 + cy < -EPS || EPS < y0 + cy)\n\t\t{\n\t\t\tcout << setprecision(15) << y0 + cy << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <utility>\n#include <cstring>\n#include <iomanip>\n#include <numeric>\n#include <cmath>\n#include <cassert>\n#include <complex>\nusing namespace std;\nusing ll = long long;\nconst int INF = 1<<30;\nconst int MOD = 1e9 + 7;\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\ninline bool equals(double a, double b) { return abs(b - a) < EPS; }\nusing Point = complex<double>;\nnamespace std { bool operator < (const Point &a, const Point &b) { return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b); } }\nstruct Line\n{\n    Point a, b;\n    Line(Point a, Point b) : a(a), b(b) {}\n};\ndouble dot(const Point &a, const Point &b) { return real(a) * real(b) + imag(a) * imag(b); }\ndouble cross(const Point &a, const Point &b) { return real(a) * imag(b) - imag(a) * real(b); }\nbool isParallel(const Line &a, const Line &b) { return equals(cross(a.b - a.a, b.b - b.a), 0.0); }\nbool isOrthogonal(const Line &a, const Line &b) { return equals(dot(a.a - a.b, b.a - b.b), 0.0); }\nPoint projection(const Line &l, const Point &p)\n{\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\nsigned main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(8);\n    double x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;\n    Line L = Line(Point(x1, y1), Point(x2, y2));\n    int q; cin >> q;\n    while(q--)\n    {\n        double x, y; cin >> x >> y;\n        Point res = projection(L, Point(x, y));\n        cout << res.real() << \" \" << res.imag() << endl;\n    }\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pairInt;\n#define FOR(i, n) for (int i = 0; i < int(n); i++)\n#define FOR1(i, m, n) for (int i = int(m); i < int(n); i++)\n#define MAX(a, b) ((a) >= (b) ? (a) : (b))\n#define MIN(a, b) ((a) <= (b) ? (a) : (b))\n\nint main(int argc, char *argv[]) {\n  int q;\n  array<int, 2> p1, p2, p, v1, v2;\n\n  scanf(\"%d%d%d%d%d\", &p1[0], &p1[1], &p2[0], &p2[1], &q);\n  v1[0] = p2[0] - p1[0];\n  v1[1] = p2[1] - p1[1];\n\n  FOR(i, q) {\n    scanf(\"%d%d\", &p[0], &p[1]);\n    v2[0] = p[0] - p1[0];\n    v2[1] = p[1] - p1[1];\n\n    int ip1 = inner_product(v1.begin(), v1.end(), v1.begin(), 0);\n    int ip2 = inner_product(v2.begin(), v2.end(), v1.begin(), 0);\n\n    printf(\"%.10lf %.10lf\\n\", p1[0] + (double)ip2 / ip1 * (p2[0] - p1[0]),\n           p1[1] + (double)ip2 / ip1 * (p2[1] - p1[1]));\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\nint Q; double ax, ay, bx, by, cx, cy;\nint main() {\n\tscanf(\"%lf%lf%lf%lf%d\", &ax, &ay, &bx, &by, &Q); bx -= ax, by -= ay;\n\twhile (Q--) {\n\t\tscanf(\"%lf%lf\", &cx, &cy); cx -= ax, cy -= ay;\n\t\tdouble t = (bx * cx + by * cy) / (bx * bx + by * by);\n\t\tprintf(\"%.9lf %.9lf\\n\", ax + bx * t, ay + by * t);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\nusing namespace std;\nint distance(double x1, double y1, double x2, double y2) {\n    return sqrt(pow(x2 - x1, 2) + pow(y2 - y1,2));\n}\nint main(void){\n    // Here your code !\n    int x1, y1, x2, y2;\n    double xa, ya;\n    cin >> x1 >> y1 >> x2 >> y2;\n    int n;\n    cin >> n;\n    int x[n], y[n];\n    double cos;\n    for(int i=0;i<n;i++) {\n        cin >> x[i] >> y[i];\n        cos = (pow(distance(x[i], y[i], x1, y1), 2) + pow(distance(x2, y2, x1, y1), 2) - pow(distance(x[i], y[i], x2, y2), 2)) / (2 * distance(x[i], y[i], x1, y1) * distance(x1, y1, x2, y2));\n        xa = x1 + (x2 - x1) * (distance(x1, y1, x[i], y[i]) * cos) / (distance(x1, y1, x2, y2));\n        ya = y1 + (y2 - y1) * (distance(x1, y1, x[i], y[i]) * cos) / (distance(x1, y1, x2, y2));\n        cout << fixed\n             << setprecision(10)\n             << xa\n             << \" \"\n             << ya << endl;\n    }\n    \n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#define EPS 1e-10\nusing namespace std;\n\nclass Point {\npublic:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n\nstruct Segment {\n  Point p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble norm(Vector a) {\n  return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a) {\n  return sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n}\n\nPoint project(Line l, Point p) {\n  Vector a = l.p2 - l.p1;\n  double r = dot(p - l.p1, a) / norm(a);\n  return l.p1 + a * r;\n}\n\nint main() {\n  Point p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  Line l;\n  l.p1 = p1;\n  l.p2 = p2;\n\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++) {\n    Point p;\n    cin >> p.x >> p.y;\n    Point r = project(l, p);\n    printf(\"%.10f %.10f\\n\", r.x, r.y);\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include  <bits/stdc++.h>\n#define rep(i,n) for(int (i)=0;(i)<(n);(i)++)\nusing namespace std;\n\n\n// ??\\??? ????????¨???\n\ntypedef bool B;\ntypedef long double D;\ntypedef complex<D> P;\ntypedef vector<P> VP;\ntypedef struct {P s,t;} L;\ntypedef vector<L> VL;\ntypedef struct {P c;D r;} C;\ntypedef vector <C> VC;\n\nconst D eps=1.0e-10;\nconst D pi=acos(-1.0);\ntemplate<class T> bool operator==(T a, T b){return abs(a-b)< eps;}\ntemplate<class T> bool operator< (T a, T b){return a < b-eps;}\ntemplate<class T> bool operator<=(T a, T b){return a < b+eps;}\ntemplate<class T> int sig(T r) {return (r==0||r==-0) ? 0 : r > 0 ? 1 : -1;}\n#define X real()\n#define Y imag()\n\nD ip(P a, P b) {return a.X * b.X + a.Y * b.Y;}\nD ep(P a, P b) {return a.X * b.Y - a.Y * b.X;}\nD sq(D a) {return sqrt(max(a, (D)0));}\nP vec(L l){return l.t-l.s;}\n\n// verify AOJ 2514\nP proj(P b,P p){ return b*ip(b,p)/norm(b);}\nP proj(L l,P p){ return l.s+proj(vec(l),p-l.s);}\nP refl(L l,P p){ return proj(l,p)*D(2.0)-p; }\n\n// ccw\nenum CCW{\n\tFRONT = 1,\n\tRIGHT = 2,\n\tBACK = 4,\n\tLEFT = 8,\n\tMID = 16,\n\tON=FRONT|BACK|MID\n};\n\ninline int ccw(P base, P a, P b) {              //???a??¨???b???????????????????????????\n\ta -= base; b -= base;\n\tif (ep(a, b) > 0)\n\t\treturn LEFT;    // counter clockwise\n\tif (ep(a, b) < 0)\n\t\treturn RIGHT;   // clockwise\n\tif (ip(a, b) < 0)\n\t\treturn BACK;    // b--base--a on line\n\tif (norm(a) < norm(b))\n\t\treturn FRONT;   // base--a--b on line\n\t// otherwise\n\treturn MID;      // base--b--a on line  a??¨b????????????????????????\n}\n\nint main(void){\n\tL line;\n\t{\n\t\tD x[2],y[2];\n\t\trep(i,2)cin >> x[i] >> y[i];\n\t\tline={{x[0],y[0]},{x[1],y[1]}};\n\t}\n\tint q;\n\tcin >> q;\n\tcout.precision(10);\n\trep(loop,q){\n\t\tD x,y;\n\t\tcin >> x >> y;\n\t\tP point={x,y};\n\t\tP ans=proj(line,point);\n\t\tcout << fixed << ans.X << \" \" << ans.Y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nnamespace LCY{\n    #define double long double\n    const double EPS=1e-10;\n    inline int dcmp(double x){if(fabs(x)<EPS)return 0;return (x<0)?-1:1;}\n    struct Point{double x,y;Point(double _x=0,double _y=0){x=_x;y=_y;}};\n    struct Vector{double x,y;Vector(double _x=0,double _y=0){x=_x;y=_y;}};\n     \n    Vector operator - (Point a,Point b){return Vector(a.x-b.x,a.y-b.y);}\n    Vector operator * (Vector a,double d){return Vector(a.x*d,a.y*d);}\n    Point operator + (Point a,Vector b){return Point(a.x+b.x,a.y+b.y);}\n     \n    inline double dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\n    inline double cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\n    inline double norm(Vector a){return dot(a,a);}\n     \n    struct Line{\n        Point p1,p2;\n        Line(Point _p1=Point(0,0),Point _p2=Point(0,0)){p1=_p1;p2=_p2;}\n    };\n     \n    Point project(Line l,Point p){\n        Vector base=l.p2-l.p1;\n        double r=dot(p-l.p1,base)/norm(base);\n        return l.p1+base*r;\n    }\n}\nusing namespace LCY;\nint main(){\n    Point p1,p2;cin>>p1.x>>p1.y>>p2.x>>p2.y;\n    int n;cin>>n;while(n--){\n        Point q;cin>>q.x>>q.y;Point res=project(Line(p1,p2),q);\n        cout<<setiosflags(ios::fixed)<<setprecision(10)<<res.x<<\" \"<<res.y<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cmath>\n#include <iomanip>\n#include <string>\n#include <queue>\n#include <algorithm>\n#include <cctype>\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\ntypedef pair<double,double> pdd;\nconst int inf=1<<30;\nconst double pi=acos(-1);\nconst double eps=1e-8;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point Gep){\n\t\treturn point{x+Gep.x,y+Gep.y};\n\t}\n\tpoint operator-(point Gep){\n\t\treturn point{x-Gep.x,y-Gep.y};\n\t}\n\tpoint operator*(double Gex){\n\t\treturn point{x*Gex,y*Gex};\n\t}\n\tpoint operator/(double Gex){\n\t\tif(!Gex) return point{0,0}; \n\t\treturn point{x/Gex,y/Gex};\n\t}\n\tbool operator==(point Gep){\n\t\treturn fabs(x-Gep.x)<eps&&fabs(y-Gep.y)<eps;\n\t}\n};\nclass Geom{\n\tpublic:\n\tvector<point> Ge;\n\tvector<pair<point,point> > Geseg,Geline;\n\tvoid line_push(point Gex,point Gey){\n\t\tGeline.push_back(make_pair(Gex,Gey));\n\t}\n\tpdd POI(pdd Gea,pdd Geb,pdd Gec,pdd Ged){\n\t\treturn pdd(3,4);\n\t}\n\tdouble IP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.x+Gex.y*Gey.y;\n\t}\n\tdouble LEN(point Gex){\n\t\treturn sqrt(Gex.x*Gex.x+Gex.y*Gex.y);\n\t}\n\tpoint PRO(pair<point,point> Gea,point Gex){\n\t\tpoint Ge1=Gex-Gea.second,Ge2=Gea.first-Gea.second;\n\t\treturn Ge2*(IP(Ge1,Ge2)/(LEN(Ge2)*LEN(Ge2)))+Gea.second;\n\t}\n\tpair<point,point> line_open(int Gex){\n\t\treturn Geline[Gex];\n\t}\n};\n\nint q;\ndouble x,xx,y,yy,xxx,yyy;\n\nint main(){\n\tcout<<shosu(10);\n\tcin>>x>>y>>xx>>yy>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>xxx>>yyy;\n\t\tGeom geo;\n\t\tgeo.line_push(point{x,y},point{xx,yy});\n\t\tpoint ans=geo.PRO(geo.line_open(0),point{xxx,yyy});\n\t\tcout<<ans.x<<' '<<ans.y<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <sstream>\n#include <map>\n#include <set>\n#include <cmath>\n\n#define REP(i,k,n) for(int i=k;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define INF 1<<30\n#define pb push_back\n#define mp make_pair\n#define EPS 1e-8\n#define equals(a,b) fabs((a) - (b)) < EPS\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\n\tPoint operator+(const Point &o) const { return Point(x+o.x, y+o.y); }\n\n\tPoint operator-(const Point &o) const { return Point(x-o.x, y-o.y); }\n\n\tPoint operator*(const double m) const { return Point(x*m, y*m); }\n\n\tPoint operator/(const double d) const { return Point(x/d, y/d); }\n\n\tbool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }\n\n\tbool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }\n};\n\nostream& operator << (ostream& os, const Point& p) {\n\tos << \"(\" << p.x << \", \" << p.y << \")\";\n\treturn os;\n}\n\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\ndouble atan(Point p) { return atan2(p.y, p.x); }\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\ndouble distancePP(Point p, Point o) { return sqrt(norm(o - p)); }\n\nint ccw(Point a, Point b, Point c) {\n\tb = b-a;\n\tc = c-a;\n\n\tif(cross(b, c) > 0.0) return +1;\t//conter clockwise\n\tif(cross(b, c) < 0.0) return -1;\t//clockwise\n\tif(dot(b, c) < 0.0) return +2;\t//a on Seg(b,c)\n\tif(norm(b) < norm(c)) return -2;\t//b on Seg(a,c)\n\treturn 0;\t//c on Seg(a,b)\n}\n\nstruct Line {\n\tPoint a, b;\n\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\tLine(Point a, Point b) : a(a), b(b) {}\n};\n\nostream& operator << (ostream& os, const Line& l) {\n\tos << \"(\" << l.a.x << \", \" << l.a.y << \")-(\" << l.b.x << \",\" << l.b.y << \")\";\n\treturn os;\n}\n\nstruct Seg {\n\tPoint a,b;\n\n\tSeg() : a(Point(0, 0)), b(Point(0, 0)) {}\n\n\tSeg (Point a, Point b) : a(a),b(b) {}\n};\n\nostream& operator << (ostream& os, const Seg& s) {\n\tos << \"(\" << s.a.x << \", \" << s.a.y << \")-(\" << s.b.x << \",\" << s.b.y << \")\";\n\treturn os;\n}\n\nbool isOrthogonal(Line l1, Line l2) { return equals(dot((l1.b - l1.a), (l2.b - l2.a)), 0.0); }\n\nbool isParallel(Line l1, Line l2) { return equals(cross((l1.b - l1.a), (l2.b - l2.a)), 0.0); }\n\nbool sameLine(Line l1, Line l2) { return abs(cross(l1.b - l1.a, l2.b - l1.a)) < EPS; }\n\nbool isIntersectLL(Line l1, Line l2) { return !isParallel(l1, l2) || sameLine(l1, l2); }\n\nbool isIntersectLS(Line l, Seg s) {\n\treturn cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < 0;\n}\n\nbool isIntersectSS(Seg s1, Seg s2) { \n\treturn ccw(s1.a, s1.b, s2.a) * ccw(s1.a, s1.b, s2.b) <= 0 \n\t\t&& ccw(s2.a, s2.b, s1.a) * ccw(s2.a, s2.b, s1.b) <= 0;\n}\n\ndouble distanceLP(Line l, Point p) {\n\treturn abs(cross(l.b - l.a, p - l.a)) / abs(l.b - l.a);\n}\n\ndouble distanceLS(Line l, Seg s) {\n\tif (isIntersectLS(l, s)) return 0.0;\n\treturn min(distanceLP(l, s.a), distanceLP(l, s.b));\n}\n\ndouble distanceSP(Seg s, Point p) {\n\tif (dot(s.b - s.a, p - s.a) < 0.0) return abs(p - s.a);\n\tif (dot(s.a - s.b, p - s.b) < 0.0) return abs(p - s.b);\n\treturn distanceLP(Line(s.a, s.b) , p);\n}\n\ndouble distanceSS(Seg s1, Seg s2) {\n    if (isIntersectSS(s1, s2)) return 0.0;\n\treturn min( min(distanceSP(s1, s2.a), distanceSP(s1, s2.b)), min(distanceSP(s2, s1.a), distanceSP(s2, s1.b)) );\n}\n\n// if isIntersectLL(l1, l2)\nPoint crossPointLL(Line l1, Line l2) {\n\tPoint base = l2.b - l2.a;\n\tdouble d = abs(cross(base, l1.a - l2.a));\n\tdouble d2 = abs(cross(base, l1.b - l2.a));\n\tdouble t = d / (d + d2);\n\treturn l1.a + (l1.b - l1.a) * t;\n}\n\n// if isIntersectLS(l, s)\nPoint crossPointLS(Line l, Seg s) { return crossPointLL(l, Line(s.a, s.b)); }\n\n// if isIntersectSS(s1, s2)\nPoint crossPointSS(Seg s1, Seg s2) { return crossPointLL(Line(s1.a, s1.b), Line(s2.a, s2.b)); }\n\nPoint project(Line l, Point p) {\n\tPoint base = l.b - l.a;\n\tdouble t = dot(base, p-l.a) / dot(base, base);\n\treturn l.a + base * t;\n}\n\nPoint reflect(Line l, Point p) {\n\treturn p + (project(l, p) - p) * 2.0;\n}\n\nint main() {\n\tLine l;\n\tcin >> l.a.x >> l.a.y >> l.b.x >> l.b.y;\n\n\tint q;\n\tcin >> q;\n\n\trep(i, q) {\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\n\t\tPoint o = project(l, p);\n\n\t\tcout << fixed;\n\t\tcout.precision(20);\n\t\tcout << o.x << \" \" << o.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <vector>\n#include <cmath>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0.0, double y = 0.0): x(x), y(y) {};\n\n    Point operator + (Point &p) {return Point(x + p.x, y + p.y);}\n    Point operator - (Point &p) {return Point(x - p.x, y - p.y);}\n    Point operator * (double k) {return Point(x * k, y * k);}\n    Point operator / (double k) {return Point(x / k, y / k);}\n\n    double norm(void) {return x * x + y * y;}\n    double abs(void) {return sqrt(norm());}\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    double dot(Point a) {\n        return x * a.x + y * a.y;\n    }\n\n    double cross(Point a) {\n        return x * a.y - y * a.x;\n    }\n};\n\nstruct Segment {\n    Point p1, p2;\n};\n\n\nPoint project(Segment s, Point p) {\n    Point base = s.p2 - s.p1;\n    double r = base.dot(p - s.p1) / base.norm();\n    return base * r + s.p1;\n}\n\nint main(void) {\n    int x1, x2, y1, y2, q, px, py;\n    Segment s;\n    scanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n    s.p1 = Point(x1, y1); s.p2 = Point(x2, y2);\n\n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++) {\n        scanf(\"%d %d\", &px, &py);\n        Point ans = Point(project(s, Point(px, py)));\n        printf(\"%.10f %.10f\\n\", ans.x, ans.y);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <iomanip>\n\nusing namespace std;\n\n// 実数\nusing Real = double;\n// 点\nusing Point = complex<Real>;\nconst Real EPS = 1e-8, PI = acos(-1);\n\n// 実数同士の比較\ninline bool eq(Real a, Real b) { return fabs(b - a) < EPS; }\n\nPoint operator*(const Point& p, const Real& d) {\n    return Point(real(p) * d, imag(p) * d);\n}\n\n// 点の入力\nistream& operator>>(istream& is, Point& p) {\n    Real a, b;\n    is >> a >> b;\n    p = Point(a, b);\n    return is;\n}\n\n//// 点の出力\n//ostream &operator<<(ostream &os, Point &p) {\n//  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n//}\n\n// 点 p を反時計回りに theta 回転\nPoint rotate(Real theta, const Point& p) {\n    return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n// ラジアンを度数に変換\nReal radian_to_degree(Real r) {\n    return (r * 180.0 / PI);\n}\n\n// 度数をラジアンに変換\nReal degree_to_radian(Real d) {\n    return (d * PI / 180.0);\n}\n\n// a-b-c の角度のうち小さい方を返す\nReal get_angle(const Point& a, const Point& b, const Point& c) {\n    const Point v(b - a), w(c - a);\n    Real alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n    if (alpha > beta) swap(alpha, beta);\n    Real theta = (beta - alpha);\n    return min(theta, 2 * acos(-1) - theta);\n}\n\n// ソート x座標が小さい順に並べる x座標が同じならy座標が小さい順\nnamespace std {\n    bool operator<(const Point& a, const Point& b) {\n        return !eq(a.real(), b.real()) ? a.real() < b.real() : a.imag() < b.imag();\n    }\n}\n\n// 2点を通る直線\nstruct Line {\n    Point a, b;\n\n    Line() = default;\n\n    Line(Point a, Point b) : a(a), b(b) {}\n\n    Line(Real A, Real B, Real C) // Ax + By = C\n    {\n        if (eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n        else a = Point(0, C / B), b = Point(C / A, 0);\n    }\n\n    friend ostream& operator<<(ostream& os, Line& p) {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream& operator>>(istream& is, Line& a) {\n        return is >> a.a >> a.b;\n    }\n};\n\n// 2点を結ぶ線分\nstruct Segment : Line {\n    Segment() = default;\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\n\n// 円\nstruct Circle {\n    // 中心\n    Point p;\n    // 半径\n    Real r;\n\n    Circle() = default;\n\n    Circle(Point p, Real r) : p(p), r(r) {}\n};\n\n// 点集合\nusing Points = vector< Point >;\n// ポリゴン 反時計回り\nusing Polygon = vector< Point >;   // 注意!! 凸多角形は反時計回りに与える.(保証されない場合は面積が負なら reverse をかける)\n// 線分集合\nusing Segments = vector< Segment >;\n// 直線集合\nusing Lines = vector< Line >;\n// 円集合\nusing Circles = vector< Circle >;\n\n// 外積\nReal cross(const Point& a, const Point& b) {\n    return real(a) * imag(b) - imag(a) * real(b);\n}\n\n// 内積\nReal dot(const Point& a, const Point& b) {\n    return real(a) * real(b) + imag(a) * imag(b);\n}\n\n\nint main() {\n    Point p1, p2;\n    cin >> p1 >> p2;\n\n    int q;\n    cin >> q;\n\n    vector<Point> ans(q);\n\n    for (int i = 0; i < q; ++i) {\n        Point p;\n        cin >> p;\n\n        double t = dot(p2 - p1, p - p1) / norm(p2 - p1);\n        ans[i] = p1 + (p2 - p1) * t;\n    }\n\n    for (auto p : ans) cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cctype>\n#include <utility>\n#include <complex>\n#include <cmath>\nusing namespace std;\n\n#define _gp(l) const auto gcu{getchar##l}; const auto pcu{putchar##l}\n#ifdef __linux\n_gp(_unlocked);\n#else\n_gp();\n#endif\n#define _DEF(r, n, ...) inline r n(__VA_ARGS__) noexcept\n#define _T template <typename T>\n#define _HT template <typename H,typename... T>\n_T _DEF(T,in,int c){T n=0;int m=1;while(isspace(c)){c=gcu();}if(c=='-')m=-1,c=gcu();\n\tdo{n=10*n+(c-'0'),c=gcu();}while(c>='0'&&c<='9');return m*n;}\n_DEF(int,in,){return in<int>(gcu());}\n#define _SCAN(...) _DEF(bool,scan,__VA_ARGS__)\n_T _SCAN(T &n){int c=gcu();return c==EOF?false:(n=in<T>(c),true);}\n_DEF(bool, scan, int &c){c=gcu();gcu();return c!=EOF;}\n#ifdef _GLIBCXX_STRING\n_SCAN(string &s){int c;s=\"\";\n\tfor(;;){c=gcu();if(c=='\\n'||c==' ')return true;else if(c==EOF)return false;s+=(char)c;}}\n#endif\n_HT _SCAN(H &h,T&&... t){return scan(h)&&scan(t...);}\n#define _OUT(...) _DEF(void,out,__VA_ARGS__)\n#define _OUTL(...) _DEF(void,outl,__VA_ARGS__)\n_OUT(bool b){pcu('0'+b);} _OUT(const char *s){while(*s)pcu(*s++);} _OUT(char c){pcu(c);}\n#ifdef _GLIBCXX_STRING\n_OUT(string s){for(char c:s)pcu(c);}\n#endif\n_T _OUT(T n){static char b[20];char *p=b;T m=n<0?pcu('-'),-1:1;\n\tif(!n)*p++='0';else while(n)*p++=(char)(n%10*m+'0'),n/=10;while(p!=b)pcu(*--p);}\n_OUTL(){out('\\n');}\n#ifdef _GLIBCXX_VECTOR\n_T _OUT(vector<T> v){for(T &x:v)out(&x == &v[0]?\"\":\" \"),out(x);}\n#endif\n_HT _OUT(H&& h, T&&... t){out(h);out(move(t)...);}\ntemplate <typename... T> _OUTL(T&&... t){out(move(t)...);outl();}\nstruct range{\n\tint e,b=0,s=1; range(int _b,int _e,int _s):e(_e),b(_b),s(_s){} range(int _b,int _e): e(_e), b(_b){} range(int _e):e(_e){}\n\tstruct it { int v, s; it (int _v, int _s) : v(_v), s(_s) {} operator int()const{return v;} operator int&(){return v;} int operator*()const{return v;}\n\t\tit& operator++(){v+=s;return *this;} }; it begin() {return {b, s};} it end() {return {e, s};}};\n\nusing P = complex<double>;\nP read() {int x = in(), y = in(); return P(x, y);}\ndouble x(P p) {return p.real();}\ndouble y(P p) {return p.imag();}\ndouble dot(P a, P b) {return x(a) * x(b) + y(a) * y(b);}\n\nint main() {\n\tP p1 {read()}, p2 {read()}, u = (p2 - p1);\n\tfor (int q = in(); q; q--) {\n\t\tP p {read()}, r {dot(u, p - p1) / norm(u) * u + p1};\n\t\tprintf(\"%.10lf %.10lf\\n\", x(r), y(r));\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point p){ return Point(x * p.x, y * p.y); }\n\tPoint operator / (Point p){ return Point(x / p.x, y / p.y); }\n\n\tPoint operator * (double t){ return Point(x * t, y * t); }\n\tPoint operator / (double t){ return Point(x / t, y / t); }\n\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x * x + y * y; }\n\n\tbool operator<(const Point &p){ return (x != p.x) ? (x < p.x) : (y < p.y); }\n\tbool operator==(const Point &p)\n\t{\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment{\npublic:\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nPoint projection(Segment s, Point p){\n\tVector v1 = s.p2 - s.p1;\n\tVector v2 = p - s.p1;\n\treturn s.p1 + v1 * dot(v1, v2) / v1.norm();\n}\n\nint main()\n{\n\tstd::ios_base::sync_with_stdio(false);\n\tcout.precision(20);\n\n\tSegment s;\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\n\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; ++i){\n\t\tPoint p; cin >> p.x >> p.y;\n\t\tPoint res = projection(s, p);\n\t\tcout << res.x << \" \" << res.y << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <iomanip>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\ntemplate <typename T>\nclass Vector2D {\npublic:\n    T x;\n    T y;\n    Vector2D(){\n        x = y = 0;\n    }\n    Vector2D(T x_,T y_){\n        x = x_;\n        y = y_;\n    }\n    T operator*(const Vector2D<T> *e) {\n        return this->x * e->x + this->y * e->y;\n    }\n    Vector2D<T> operator-(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x - e->x ,this->y - e->y);\n    }\n    Vector2D<T> operator+(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x + e->x ,this->y + e->y);\n    }\n    T operator*(const Vector2D<T> e) {\n        return this->x * e.x + this->y * e.y;\n    }\n    Vector2D<T> operator-(const Vector2D<T> e) {\n        return Vector2D<T>(this->x - e.x ,this->y - e.y);\n    }\n    Vector2D<T> operator+(const Vector2D<T> e) {\n        return Vector2D<T>(this->x + e.x ,this->y + e.y);\n    }\n    Vector2D<T> operator*(const T r) {\n        return Vector2D<T>(this->x * r ,this->y * r);\n    }\n    Vector2D<T> operator/(const T r) {\n        return Vector2D<T>(this->x / r ,this->y / r);\n    }\n    double abs(){\n        return sqrt(x*x+y*y);\n    }\n    T abs2(){\n        return x*x+y*y;\n    }\n};\n\nint main() {\n    int x,y,q;\n    Vector2D<double> base,p,pp,t;\n    cin >> x >> y;\n    base = Vector2D<double>(x,y);\n    cin >> x >> y >> q;\n    p = Vector2D<double>(x,y) - base;\n    loop(i,0,q){\n        cin >> x >> y;\n        t = p * ((p * (Vector2D<double>(x,y) - base)) / p.abs2()) + base;\n        cout << setprecision(16) << t.x << \" \" << t.y << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n#include <climits>\n#include <algorithm>\nusing namespace std;\n\nclass Point {\npublic:\n    double x, y;\n    Point (double x = 0, double y = 0) : x(x), y(y) { }\n    Point operator + (Point p) { return  Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return  Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return  Point(a * x, a * y); }\n    Point operator / (double a) { return  Point (x / a, y / a); }\n};\n\nstruct Segment {\n    Point p1, p2;\n};\n\ndouble dot(Point a, Point b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble norm(Point a) {\n    return a.x * a.x + a.y * a.y;\n}\n\nint main()\n{\n    Segment s;\n    double x1, y1, x2, y2, xq, yq, r;\n    int q;\n    scanf(\"%lf %lf %lf %lf\", &x1, &y1, &x2, &y2);\n    s.p1 = Point(x1, y1);\n    s.p2 = Point(x2, y2);\n    Point base = s.p2 - s.p1;\n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++) {\n        scanf(\"%lf %lf\", &xq, &yq);\n        Point p = Point(xq, yq);\n        r = dot(p - s.p1, base) / norm(base);\n        Point res = s.p1 + base * r;\n        printf(\"%.10lf %.10lf\\n\", res.x, res.y);\n\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\nusing namespace std;\n\nint main(int argc, const char * argv[]) {\n    double xp1, yp1, xp2, yp2;\n    int q;\n    double xp, yp;\n    \n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    cin >> q;\n    \n    double dist = sqrt((xp1 - xp2) * (xp1 - xp2) + (yp1 - yp2) * (yp1 -yp2));\n    double nx, ny; //unit vector along the line\n    nx = (xp2 - xp1) / dist;\n    ny = (yp2 - yp1) / dist;\n    \n    for (int i = 0; i < q; ++i) {\n        cin >> xp >> yp;\n        cout.precision(10);\n        double t = nx * (xp - xp1) + ny * (yp - yp1);\n        cout << xp1 + nx * t << ' ' << yp1 + ny * t << endl;\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <utility>\nusing namespace std;\n\ntypedef complex<double> Point, Vector;\ntypedef pair<Point, Point> Segment, Line;\n\n#define X real()\n#define Y imag()\n\ndouble dot(Vector a, Vector b){\n    return a.X * b.X + a.Y * b.Y;\n}\n\ndouble norm(Vector a){\n    return a.X * a.X + a.Y * a.Y;\n}\n\nPoint project(Segment s, Point p){\n    Vector base = s.second - s.first;\n    double r = dot(p - s.first, base) / norm(base);\n    return s.first + base * r;\n}\n\nint main(){\n    double x1, y1, x2, y2; cin>>x1>>y1>>x2>>y2;\n    Line li = {Point(x1, y1), Point(x2, y2)};\n    int q; cin>>q;\n    while(q--){\n        double x, y; cin>>x>>y;\n        Point ansp = project(li, Point(x, y));\n        printf(\"%.10f %.10f\\n\", ansp.X, ansp.Y);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long unsigned int ll;\n\n// 参考サイト\n// 前原 貴憲\n// http://www.prefield.com/algorithm/index.html\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> Point; //複素数で平面定義\ntypedef Point P;\n\n// system\n// {{{\n// オペレーター< を定義、後々楽\nnamespace std{\n    bool operator < ( const P& a, const P& b) {\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n}\n\n// 外積\ndouble cross( const P& a, const P& b ){\n    return imag(conj(a)*b);\n}\n// 内積\ndouble dot( const P& a, const P& b ){\n    return real(conj(a)*b);\n}\n// }}}\n\n// Line L vector<P>\n// PolyGon G vector<P>\n// Circle C(P,int rad)\n// {{{\n// 直線 Line\n// 線分 Segment\nstruct L : public vector<P> {\n    L(const P &a, const P &b ){\n        push_back(a); push_back(b);\n    }\n};\n\n// 単純多角形 PolyGon\ntypedef vector<P> G;\n\n// 円 cirlce\nstruct C {\n    P p; double r;\n    C(const P &p, double r ) : p(p), r(r) {}\n};\n// }}}\n\n// counter clockwise \n// {{{\n//\nint ccw( P a, P b, P c ){\n    b -= a; c -= a;\n    if( cross(b,c) > 0 )   return +1; //counter clockwise\n    if( cross(b,c) < 0 )   return -1; //clockwise\n    if( dot(b,c) < 0 )     return +2; //c--a--b\n    if( norm(b) < norm(c)) return -2; //a--b--c\n    return 0; // b==c\n} //}}}\n\n// 交点判定 LSPtoLSP\n// {{{\nbool intersectLL( const L &l, const L &m ){\n    return abs( cross(l[1]-l[0], m[1]-m[0]) ) > EPS || // cross(l,m) != 0 <-> not paralell\n           abs( cross(l[1]-l[0], m[0]-l[0]) ) < EPS;   // cross(l,(m-l)) == 0 <-> same line\n}\nbool intersectLS( const L &l, const L &s ){\n    return cross( l[1]-l[0], s[0]-l[0] ) *\n           cross( l[1]-l[0], s[1]-l[0] ) < EPS;\n}\nbool intersectLP( const L &l, const P &p ){\n    return abs( cross(l[0]-p, l[1]-p) );\n}\nbool intersectSS( const L &s, const L &t ){\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n           ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP( const L &s, const P &p ){\n    return abs( s[0]-p )+abs( s[1]-p )-abs(s[1]-s[0]) < EPS;\n}\n// }}}\n\n// 射影 反射 距離 LSPtoLSP\n// {{{\nP projection( const L &l, const P &p ){\n    double t = dot( p-l[0], l[0]-l[1] ) / norm( l[0]-l[1] );\n    return l[0] + t*(l[0]-l[1]);\n}\n// P reflection( const L &l, const P &p ){\n//     return p + 2*( projection(l,p) - p );\n// }\n// bool intersectLL( const L &l, const L &m ){\n//     return abs( cross(l[1]-l[0], m[1]-m[0]) ) > EPS || // cross(l,m) != 0 <-> not paralell\n//            abs( cross(l[1]-l[0], m[0]-l[0]) ) < EPS;   // cross(l,(m-l)) == 0 <-> same line\n// }\n// bool intersectLS( const L &l, const L &s ){\n//     return cross( l[1]-l[0], s[0]-l[0] ) *\n//            cross( l[1]-l[0], s[1]-l[0] ) < EPS;\n// }\n// bool intersectLP( const L &l, const P &p ){\n//     return abs( cross(l[0]-p, l[1]-p) );\n// }\n// bool intersectSS( const L &s, const L &t ){\n//     return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n//            ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n// }\n// bool intersectSP( const L &s, const P &p ){\n//     return abs( s[0]-p )+abs( s[1]-p )-abs(s[1]-s[0]) < EPS;\n// }\n// }}}\n\n// imagePointDescription(点表示)\n// {{{ \nvoid imagePointDescription( const vector<P> &p ){\n    int here[51][51] = {};\n    int i = 0;\n    for( P t : p ){\n        i++;\n        int y = ceil(imag(t)-EPS);\n        int x = ceil(real(t)-EPS);\n        if( abs(y) > 25 ) continue;\n        if( abs(x) > 25 ) continue;\n        here[y+25][x+25] = i;\n    }\n\n    for( i = 50; i >= 0; i-- ){\n        for( int j = 0; j <= 50; j++ ){\n            if( here[i][j] ) printf (\"%2d\", here[i][j] );\n            else if( i == 25 && j == 25 ) printf (\"-+\");\n            else if( i == 25 ) printf (\"--\");\n            else if( j == 25 ) printf (\" |\");\n            else if( j % 5 == 0 && i % 5 == 0)printf (\" .\");\n            else printf (\"  \");\n        }\n        printf (\"\\n\");\n    }\n\n} // }}}\n\nint main() {\n\n    double a,b,c,d;\n\n    cin >> a >> b >> c >> d;\n    P p1(a,b);\n    P p2(c,d);\n    L l(p1,p2);\n\n    int q;\n    cin >> q;\n\n    while(q--){\n        cin >> a >> b;\n        P p(a,b);\n        double t = dot( p-l[0], l[0]-l[1] ) / norm( l[0]-l[1] );\n        P x = l[0];\n        x = x + t*(l[0]-l[1]);\n        printf (\"%1.10lf %1.10lf\\n\", real(x), imag(x) );\n    }\n\n\n\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <utility>\n#include <set>\n#include <cmath>\n#include <cstdio>\n#include <numeric>\n#include <functional>\n\nusing namespace std;\n\n//BEGIN\n#define EPS 1e-10\n#define equals(a, b) (fabs(a - b) < EPS)\n#define Pi 3.141592653589793238\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint() {}\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n\tPoint operator*(const double& k) const { return Point(x * k, y * k); }\n\tPoint operator/(const double& k) const { return Point(x / k, y / k); }\n\n\tfriend istream& operator>>(istream& is, Point& p) {\n\t\tis >> p.x >> p.y;\n\t\treturn is;\n\t}\n\n\tbool operator==(const Point& p) const { return (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS); }\n\tbool operator<(const Point& p) const { return (x != p.x ? x < p.x : y < p.y); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) { return a.x * a.x + a.y * a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\nstruct EndPoint {\n\tPoint p;\n\tint seg, st;\n\n\tEndPoint() {}\n\tEndPoint(Point p, int seg, int st) :p(p), seg(seg), st(st) {}\n\n\tbool operator<(const EndPoint& ep) const {\n\t\tif (p.y == ep.p.y) return st < ep.st;\n\t\treturn p.y < ep.p.y;\n\t}\n};\n\nstruct Segment {\n\tPoint p1, p2;\n\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n\n\tfriend istream& operator>>(istream& is, Segment& s) {\n\t\tis >> s.p1 >> s.p2;\n\t\treturn is;\n\t}\n};\n\ntypedef Segment Line;\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\n\tCircle() {}\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersectSS(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersectSS(Segment s1, Segment s2) {\n\treturn intersectSS(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nint intersectCS(Circle c, Segment s) {\n\tif (norm(project(s, c.c) - c.c) - c.r * c.r > EPS) return 0;\n\tdouble d1 = abs(c.c - s.p1), d2 = abs(c.c - s.p2);\n\tif (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n\tif ((d1 < c.r - EPS && d2 > c.r + EPS) || (d1 > c.r + EPS && d2 < c.r - EPS)) return 1;\n\tPoint h = project(s, c.c);\n\tif (dot(s.p1 - h, s.p2 - h) < 0) return 2;\n\treturn 0;\n}\n\nint intersectCC(Circle c1, Circle c2) {\n\tif (c1.r < c2.r) swap(c1, c2);\n\tdouble d = abs(c1.c - c2.c);\n\tdouble r = c1.r + c2.r;\n\tif (equals(d, r)) return 3;\n\tif (d > r) return 4;\n\tif (equals(d + c2.r, c1.r)) return 1;\n\tif (d + c2.r < c1.r) return 0;\n\treturn 2;\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\ndouble getDistanceSS(Segment s1, Segment s2) {\n\tif (intersectSS(s1, s2)) return 0.0;\n\treturn min({ getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2),\n\t\t\t   getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2) });\n}\n\nPoint getCrossPointLL(Line l1, Line l2) {\n\tdouble a = cross(l1.p2 - l1.p1, l2.p2 - l2.p1);\n\tdouble b = cross(l1.p2 - l1.p1, l1.p2 - l2.p1);\n\tif (abs(a) < EPS && abs(b) < EPS) return l2.p1;\n\treturn l2.p1 + (l2.p2 - l2.p1) * (b / a);\n}\n\nPoint getCrossPointSS(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\treturn s1.p1 + (s1.p2 - s1.p1) * (d1 / (d1 + d2));\n}\n\nvector<Point> getCrossPointCL(Circle c, Line l) {\n\tvector<Point> ps;\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tif (equals(getDistanceLP(l, c.c), c.r)) {\n\t\tps.push_back(pr);\n\t\treturn ps;\n\t}\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\tps.push_back(pr + e * base); ps.push_back(pr - e * base);\n\treturn ps;\n}\n\nvector<Point> getCrossPointCS(Circle c, Segment s) {\n\tLine l(s);\n\tvector<Point> ps = getCrossPointCL(c, l);\n\tif (intersectCS(c, s) == 2) return ps;\n\tif (dot(l.p1 - ps[0], l.p2 - ps[0]) < 0) ps[1] = ps[0];\n\telse ps[0] = ps[1];\n\treturn ps;\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nPoint polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\nvector<Point> getCrossPointCC(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\tvector<Point> ps;\n\tps.push_back(c1.c + polar(c1.r, t + a)); ps.push_back(c1.c + polar(c1.r, t - a));\n\treturn ps;\n}\n\nvector<Point> tangentCP(Circle c, Point p) {\n\treturn getCrossPointCC(c, Circle(p, sqrt(norm(c.c - p) - c.r * c.r)));\n}\n\nvector<Line> tangentCC(Circle c1, Circle c2) {\n\tvector<Line> ls;\n\tif (c1.r < c2.r) swap(c1, c2);\n\tdouble g = norm(c1.c - c2.c);\n\tif (equals(g, 0)) return ls;\n\tPoint u = (c2.c - c1.c) / sqrt(g);\n\tPoint v = Point(-u.y, u.x);\n\tfor (int s = 1; s >= -1; s -= 2) {\n\t\tdouble h = (c1.r + s * c2.r) / sqrt(g);\n\t\tif (equals(1, h * h)) ls.push_back(Line(c1.c + u * c1.r, c1.c + (u + v) * c1.r));\n\t\telse if (1 - h * h > 0) {\n\t\t\tPoint uu = u * h, vv = v * sqrt(1 - h * h);\n\t\t\tls.push_back(Line(c1.c + (uu + vv) * c1.r, c2.c - (uu + vv) * c2.r * s));\n\t\t\tls.push_back(Line(c1.c + (uu - vv) * c1.r, c2.c - (uu - vv) * c2.r * s));\n\t\t}\n\t}\n\treturn ls;\n}\n\n// IN:2,ON:1,OUT:0\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; ++i) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\nbool isConvex(Polygon p) {\n\tint n = p.size();\n\tfor (int i = 0; i < n; ++i)\n\t\tif (ccw(p[(i - 1 + n) % n], p[i], p[(i + 1) % n]) == CLOCKWISE) return false;\n\treturn true;\n}\n\nPolygon convexHull(Polygon p) {\n\tPolygon u, l;\n\tif (p.size() < 3) return p;\n\tsort(p.begin(), p.end());\n\tu.push_back(p[0]); u.push_back(p[1]);\n\tl.push_back(p[p.size() - 1]); l.push_back(p[p.size() - 2]);\n\tfor (int i = 2; i < (int)p.size(); ++i) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], p[i]) == COUNTER_CLOCKWISE; --n)\n\t\t\tu.pop_back();\n\t\tu.push_back(p[i]);\n\t}\n\tfor (int i = p.size() - 3; i >= 0; --i) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], p[i]) == COUNTER_CLOCKWISE; --n)\n\t\t\tl.pop_back();\n\t\tl.push_back(p[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n\treturn l;\n}\n\ndouble area(Polygon p) {\n\tdouble res = 0;\n\tfor (int i = 0; i < (int)p.size(); ++i)\n\t\tres += cross(p[i], p[(i + 1) % p.size()]) / 2.0;\n\treturn res;\n}\n\ndouble area(Polygon p, Circle c) {\n\tif (p.size() < 3) return 0.0;\n\tfunction<double(Circle, Point, Point)> dfs = [&](Circle c, Point a, Point b) {\n\t\tVector va = c.c - a, vb = c.c - b;\n\t\tdouble f = cross(va, vb), res = 0;\n\t\tif (equals(f, 0.0)) return res;\n\t\tif (max(abs(va), abs(vb)) < c.r + EPS) return f;\n\t\tVector d(dot(va, vb), cross(va, vb));\n\t\tif (getDistanceSP(Segment(a, b), c.c) > c.r - EPS)\n\t\t\treturn c.r * c.r * atan2(d.y, d.x);\n\t\tauto u = getCrossPointCS(c, Segment(a, b));\n\t\tvector<Point> ps{ a,u[0],u[1],b };\n\t\tfor (int i = 1; i < ps.size(); ++i) res += dfs(c, ps[i - 1], ps[i]);\n\t\treturn res;\n\t};\n\tdouble res = 0;\n\tfor (int i = 0; i < p.size(); ++i) res += dfs(c, p[i], p[(i + 1) % p.size()]);\n\treturn res / 2;\n}\n\ndouble convexDiameter(Polygon p) {\n\tint n = p.size();\n\tif (n == 2) return abs(p[0] - p[1]);\n\tint i = 0, j = 0;\n\tfor (int k = 0; k < n; ++k) {\n\t\tif (p[i] < p[k]) i = k;\n\t\tif (!(p[j] < p[k])) j = k;\n\t}\n\tdouble res = 0;\n\tint ti = i, tj = j;\n\twhile (i != tj || j != ti) {\n\t\tres = max(res, abs(p[i] - p[j]));\n\t\tif (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) < 0.0)\n\t\t\ti = (i + 1) % n;\n\t\telse j = (j + 1) % n;\n\t}\n\treturn res;\n}\n\nPolygon convexCut(Polygon p, Line l) {\n\tPolygon q;\n\tfor (int i = 0; i < (int)p.size(); ++i) {\n\t\tPoint a = p[i], b = p[(i + 1) % p.size()];\n\t\tif (ccw(l.p1, l.p2, a) != CLOCKWISE) q.push_back(a);\n\t\tif (ccw(l.p1, l.p2, a) * ccw(l.p1, l.p2, b) < 0)\n\t\t\tq.push_back(getCrossPointLL(Line(a, b), l));\n\t}\n\treturn q;\n}\n\ndouble closestPair(vector<Point> ps) {\n\tsort(ps.begin(), ps.end());\n\tvector<Point> a(ps.size());\n\tfunction<double(int, int)> solve = [&](int l, int r) {\n\t\tif (r - l < 2) return 1e18;\n\t\tint mid = (l + r) >> 1;\n\t\tdouble x = ps[mid].x;\n\t\tdouble d = min(solve(l, mid), solve(mid, r));\n\t\tinplace_merge(ps.begin() + l, ps.begin() + mid, ps.begin() + r,\n\t\t\t\t\t  [](const Point& a, const Point& b) {return a.y < b.y; });\n\t\tint ptr = 0;\n\t\tfor (int i = l; i < r; ++i) {\n\t\t\tif (abs(ps[i].x - x) >= d) continue;\n\t\t\tfor (int j = 0; j < ptr; ++j) {\n\t\t\t\tPoint luz = ps[i] - a[ptr - j - 1];\n\t\t\t\tif (luz.y >= d) break;\n\t\t\t\td = min(d, abs(luz));\n\t\t\t}\n\t\t\ta[ptr++] = ps[i];\n\t\t}\n\t\treturn d;\n\t};\n\treturn solve(0, ps.size());\n}\n\nint manhattanIntersection(vector<Segment> ss) {\n\tconst int INF = numeric_limits<int>::max();\n\tconst int BOTTOM = 0, LEFT = 1, RIGHT = 2, TOP = 3;\n\tint n = ss.size();\n\tvector<EndPoint> ep;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (ss[i].p1.y == ss[i].p2.y) {\n\t\t\tif (ss[i].p1.x > ss[i].p2.x) swap(ss[i].p1, ss[i].p2);\n\t\t\tep.push_back(EndPoint(ss[i].p1, i, LEFT));\n\t\t\tep.push_back(EndPoint(ss[i].p2, i, RIGHT));\n\t\t} else {\n\t\t\tif (ss[i].p1.y > ss[i].p2.y) swap(ss[i].p1, ss[i].p2);\n\t\t\tep.push_back(EndPoint(ss[i].p1, i, BOTTOM));\n\t\t\tep.push_back(EndPoint(ss[i].p2, i, TOP));\n\t\t}\n\t}\n\tsort(ep.begin(), ep.end());\n\tset<int> st;\n\tst.insert(INF);\n\tint cnt = 0;\n\tfor (int i = 0; i < 2 * n; ++i) {\n\t\tif (ep[i].st == TOP) st.erase(ep[i].p.x);\n\t\telse if (ep[i].st == BOTTOM) st.insert(ep[i].p.x);\n\t\telse if (ep[i].st == LEFT) {\n\t\t\tauto b = st.lower_bound(ss[ep[i].seg].p1.x);\n\t\t\tauto e = st.lower_bound(ss[ep[i].seg].p2.x);\n\t\t\tcnt += distance(b, e);\n\t\t}\n\t}\n\treturn cnt;\n}\n//END\n\n\n\n\n\n\n\n\n\n\n\n\n\nvoid CGL1A() {\n\tSegment s; cin >> s;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tPoint a = project(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_A\n*/\nvoid CGL1B() {\n\tSegment s; cin >> s;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tPoint a = reflect(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_B\n*/\nvoid CGL1C() {\n\tPoint p0, p1, p2; cin >> p0 >> p1;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tcin >> p2;\n\t\tint a = ccw(p0, p1, p2);\n\t\tif (a == COUNTER_CLOCKWISE) cout << \"COUNTER_CLOCKWISE\";\n\t\telse if (a == CLOCKWISE) cout << \"CLOCKWISE\";\n\t\telse if (a == ONLINE_BACK) cout << \"ONLINE_BACK\";\n\t\telse if (a == ONLINE_FRONT) cout << \"ONLINE_FRONT\";\n\t\telse cout << \"ON_SEGMENT\";\n\t\tcout << endl;\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/1/CGL_1_C\n*/\nvoid CGL2A() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tVector p0, p1, p2, p3;\n\t\tcin >> p0 >> p1 >> p2 >> p3;\n\t\tif (isParallel(p1 - p0, p3 - p2)) cout << 2;\n\t\telse if (isOrthogonal(p1 - p0, p3 - p2)) cout << 1;\n\t\telse cout << 0;\n\t\tcout << endl;\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_A\n*/\nvoid CGL2B() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tcout << (intersectSS(s1, s2) ? 1 : 0) << endl;\n\t}\n}/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_B\n*/\nvoid CGL2C() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tPoint a = getCrossPointLL(s1, s2);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_C\n*/\nvoid CGL2D() {\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tSegment s1, s2;\n\t\tcin >> s1 >> s2;\n\t\tprintf(\"%.10f\\n\", getDistanceSS(s1, s2));\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_2_D\n*/\nvoid CGL3A() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.1f\\n\", area(p));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_A\n*/\nvoid CGL3B() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tcout << (isConvex(p) ? 1 : 0) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_B\n*/\nvoid CGL3C() {\n\tint n; cin >> n;\n\tPolygon g(n);\n\tfor (auto& a : g) cin >> a;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tPoint p; cin >> p;\n\t\tcout << contains(g, p) << endl;\n\t}\n}/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/3/CGL_3_C\n*/\nvoid CGL4A() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tPolygon t = convexHull(p);\n\tcout << t.size() << endl;\n\tfor (auto a : t) cout << a.x << \" \" << a.y << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_A\n*/\nvoid CGL4B() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.10f\\n\", convexDiameter(p));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_B\n*/\nvoid CGL4C() {\n\tint n; cin >> n;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tLine l; cin >> l;\n\t\tprintf(\"%.10f\\n\", area(convexCut(p, l)));\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_C\n*/\nvoid CGL5A() {\n\tint n; cin >> n;\n\tvector<Point> ps(n);\n\tfor (auto& a : ps) cin >> a;\n\tprintf(\"%.10f\\n\", closestPair(ps));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/5/CGL_5_A\n*/\nvoid CGL6A() {\n\tint n; cin >> n;\n\tvector<Segment> ss(n);\n\tfor (auto& a : ss) cin >> a;\n\tcout << manhattanIntersection(ss) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/6/CGL_6_A\n*/\nvoid CGL7A() {\n\tCircle c1, c2; cin >> c1.c >> c1.r >> c2.c >> c2.r;\n\tcout << intersectCC(c1, c2) << endl;\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_A\n*/\n\nvoid CGL7D() {\n\tCircle c; cin >> c.c.x >> c.c.y >> c.r;\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tLine l; cin >> l.p1.x >> l.p1.y >> l.p2.x >> l.p2.y;\n\t\tauto a = getCrossPointCL(c, l);\n\t\tsort(a.begin(), a.end());\n\t\tprintf(\"%.10f %.10f %.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n\t}\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_D\n*/\nvoid CGL7E() {\n\tCircle c1; cin >> c1.c.x >> c1.c.y >> c1.r;\n\tCircle c2; cin >> c2.c.x >> c2.c.y >> c2.r;\n\tauto a = getCrossPointCC(c1, c2);\n\tsort(a.begin(), a.end());\n\tprintf(\"%.10f %.10f %.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_E\n*/\nvoid CGL7F() {\n\tPoint p; cin >> p;\n\tCircle c; cin >> c.c >> c.r;\n\tauto a = tangentCP(c, p);\n\tsort(a.begin(), a.end());\n\tprintf(\"%.10f %.10f\\n%.10f %.10f\\n\", a[0].x, a[0].y, a[1].x, a[1].y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_F\n*/\nvoid CGL7G() {\n\tCircle c1, c2; cin >> c1.c >> c1.r >> c2.c >> c2.r;\n\tauto a = tangentCC(c1, c2);\n\tvector<Point> ps;\n\tfor (auto e : a) ps.push_back(getCrossPointCL(c1, e)[0]);\n\tsort(ps.begin(), ps.end());\n\tfor (auto e : ps) printf(\"%.10f %.10f\\n\", e.x, e.y);\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_G\n*/\nvoid CGL7H() {\n\tint n; cin >> n;\n\tCircle c; c.c = Point(0, 0); cin >> c.r;\n\tPolygon p(n);\n\tfor (auto& a : p) cin >> a;\n\tprintf(\"%.10f\\n\", area(p, c));\n}\n/*\n\tcreated: 2019-09-13\n\thttps://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/7/CGL_7_H\n*/\n\nint main() {\n\tCGL1A();\n\t//CGL1B();\n    //CGL1C();\n\t//CGL2A();\n\t//CGL2B();\n\t//CGL2C();\n\t//CGL2D();\n\t//CGL3A();\n\t//CGL3B();\n\t//CGL3C();\n\t//CGL4A();\n\t//CGL4B();\n\t//CGL4C();\n\t//CGL5A();\n\t//CGL6A();\n\t//CGL7A();\n\t//CGL7D();\n\t//CGL7E();\n\t//CGL7F();\n\t//CGL7G();\n\t//CGL7H();\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <cmath>\n#include <cstdio>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nVector projection(const Segment& s, const Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    using namespace std;\n    // cerr << \"p: \" << p.x << \", \" << p.y;\n    // cerr << \" dot: \" << dot(p - s.p1, base);\n    // cerr << \" norm: \" << norm(base) << endl;\n    return s.p1 + base * r;\n}\n\nint main() {\n    using namespace std;\n\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Segment s{p1, p2};\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        long long x, y;\n        cin >> x >> y;\n        // cerr << x << \" \" << y << endl;\n        auto p = projection(s, Point{static_cast<double>(x), static_cast<double>(y)});\n        cout << setprecision(20) << p.x << \" \" << p.y << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct vec{double x;double y;};\ndouble naiseki(vec a,vec b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\nint main()\n{\n\tdouble xp1,xp2,yp1,yp2;\n\tcin>>xp1>>yp1>>xp2>>yp2;\n\tint q;cin>>q;\n\tvec base;\n\tbase.x=xp2-xp1;\n\tbase.y=yp2-yp1;\n\t\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tdouble s,t;\n\t\tcin>>s>>t;\n\t\tvec hypo;\n\t\thypo.x=s-xp1;\n\t\thypo.y=t-yp1;\n\t\tcout<<fixed<<setprecision(10)<<xp1+base.x*naiseki(hypo,base)/naiseki(base,base)<<\" \";\n\t\tcout<<(double)yp1+base.y*naiseki(hypo,base)/naiseki(base,base)<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n;\ndouble getCos(Vector a, Vector b){\n    return dot(a, b) / (a.abs() * b.abs());\n}\n\ndouble dist(Point p1, Point p2){\n    return sqrt(pow((p1.x - p2.x), 2) + pow((p1.y - p2.y), 2));\n}\n\nPoint projection(Point p1, Point p2, Point p0){\n    return p1 + (p2 - p1) / (p2 - p1).abs() * (p0 - p1).abs() * getCos(p2 - p1, p0 - p1);\n}\n\nint main(){\n    int xp1, yp1, xp2, yp2;\n    scanf(\"%d\", &xp1);\n    scanf(\"%d\", &yp1);\n    scanf(\"%d\", &xp2);\n    scanf(\"%d\", &yp2);\n\n    Point p1 = Point(xp1, yp1);\n    Point p2 = Point(xp2, yp2);\n\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n\n        Point p = projection(p1, p2, Point(xp0, yp0));\n        printf(\"%.10f %.10f\\n\", p.x, p.y);\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define r(i,n) for(int i=0;i<n;i++)\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nclass Point{\n  public:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n  Point operator + (Point p){return Point(x+p.x,y+p.y);}\n  Point operator - (Point p){return Point(x-p.x,y-p.y);}\n  Point operator * (double a){return Point(a*x,a*y);}\n  Point operator / (double a){return Point(x/a,y/a);}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n  }\n};\n\ntypedef Point vect;\nstruct seg{Point p1,p2;};\n//????????´???\ndouble norm(Point p){return p.x*p.x+p.y*p.y;}\n//??¶??????\ndouble abs(Point p){return sqrt(norm(p));}\n//??????\ndouble dot(Point a,Point b){\n  return a.x*b.x+a.y*b.y;\n}\n//??????\ndouble cross(Point a,Point b){\n  return a.x*b.y-a.y*b.x;\n}\n//??´?????????\nbool C90(seg s1,seg s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\nbool C0(seg s1,seg s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n//?°???±\nPoint projec(seg s,Point p){\n  Point base = s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return s.p1+base*r;\n}\nmain(){\n  int n;\n  seg a;\n  cin>>a.p1.x>>a.p1.y>>a.p2.x>>a.p2.y;\n  cin>>n;\n  while(n--){\n    Point b,c;\n    cin>>b.x>>b.y;\n    c=projec(a,b);\n    printf(\"%.11f %.11f\",c.x,c.y);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SBCURE_NO_DEPRECATE\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nconst int maxn = 110;\nconst int INF = 0x7fffffff;\n\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\nint cmp(Point A, Point B)                     //竖直排序  \n{\n\treturn (A.y<B.y || (A.y == B.y&&A.x<B.x));\n}\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\n\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) >= 0; j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) >= 0; j--) {\n\t\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\n\n\n\nint main(){\n\tSegment s;\n\tPoint p;\n\tint x1,x2,y1,y2,q;\n\tcin>>x1>>y1>>x2>>y2;\n\ts.p1.x=x1;s.p1.y=y1;\n\ts.p2.x=x2;s.p2.y=y2;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x1>>y1;\n\t\tp.x=x1;p.y=y1;\n\t\tcout<<project(s, p).x<<\" \"<<project(s, p).y<<endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(_x), y(_y){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator*(double k){ return Point(x * k, y * k); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\tdouble res = a.x*b.x + a.y*b.y;\n\treturn res;\n}\n\ndouble cross(Vector a, Vector b){\n\tdouble res = a.x*b.y - a.y*b.x;\n\treturn res;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tVector v = p - s.p1;\n\tdouble l = dot(v, base) / base.norm();\n\treturn s.p1 + base * l;\n}\n\nint main(){\n\tSegment s;\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tint n;\n\tcin >> n;\n\tcout.precision(20);\n\tfor (int i = 0; i < n; ++i){\n\t\tPoint pp;\n\t\tcin >> pp.x >> pp.y;\n\t\tPoint res = project(s, pp);\n\t\tcout << res.x << \" \" << res.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<cstdio>\nusing namespace std;\nint main() {\n    int p0x, p0y, p1x, p1y, px, py;\n    cin >> p0x >> p0y >> p1x >> p1y;\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        cin >> px >> py;\n        int s1x = p1x - p0x, s1y = p1y - p0y;\n        int s2x = px - p1x, s2y = py - p1y;\n        int dot = s1x * s2x + s1y * s2y;\n        double Abs_s1 =  sqrt(s1x*s1x + s1y*s1y);\n        double t = dot/Abs_s1; //p1 to an intersection point\n        double x = p1x + s1x * t / Abs_s1;\n        double y = p1y + s1y * t / Abs_s1;\n        \n        printf(\"%.10f %.10f\\n\", x, y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing Point = complex< double >;\nconst double EPS = 1e-10, PI = acos(-1);\n\nbool eq(double a, double b){ return fabs(a-b) < EPS; }\n\nistream &operator>> (istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\nostream &operator<< (ostream &os, Point &p) {\n  return os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nbool operator<(const Point &a, const Point &b) {\n  return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n}\n\n// rotate Φ(rad)\n// x = r * cos(θ + Φ)\n//   = r * cos(θ) * cos(Φ) - r * sin(θ) * sin(Φ)\n//   = x * cos(Φ) - y * sin(Φ) (∵ cos(θ) = x/r, sin(θ) = y/r)  \nPoint rotate(double phi, const Point &p) {\n  double x = p.real(), y = p.imag();\n  return Point(x * cos(phi) - y * sin(phi), x * sin(phi) + y * cos(phi));\n}\n\ndouble radian_to_degree(double r) {\n  return (r * 180.0 / PI);\n}\n\ndouble degree_to_radian(double d) {\n  return (d * PI / 180.0);\n}\n\nstruct Line{\n  Point a, b;\n\n  Line() = default;\n\n  Line(Point a, Point b) : a(a), b(b){}\n\n  Line(double A, double B, double C){\n    //ax + by = c\n    if(eq(A, 0)){\n      a = Point(0, C/B), b = Point(1, C/B);\n    }else if(eq(B, 0)){\n      a = Point(C/A, 0), b = Point(C/A, 1);\n    }else{\n      a = Point(0, C/B), b = Point(C/A, 0);\n    }\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n  friend ostream &operator<<(ostream &os, Line &a) {\n    return os << a.a << \" to \" << a.b;\n  }\n};\n\nstruct Segment: Line{\n  Segment() = default;\n\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle() = default;\n\n  Circle(Point p, double r): p(p), r(r){}\n};\n\nusing Points = vector<Point>;\nusing Polygon = vector<Point>;\nusing Segments = vector<Segment>;\nusing Lines = vector<Line>;\nusing Circles = vector<Circle>;\n\ndouble cross(const Point &a, const Point &b) {\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(const Point& a, const Point &b) {\n  return a.real() * b.real() + a.imag() * b.imag();\n}\n\n\n// https://mathtrain.jp/projection\nPoint projection(const Line &l, const Point &p){\n  double t = dot(p - l.a, l.b-l.a) / norm(l.a - l.b);\n  return l.a + (l.b - l.a) * t;\n}\n\nPoint projection(const Segment &l, const Point &p){\n  double t = dot(p - l.a, l.b-l.a) / norm(l.a - l.b);\n  return l.a + (l.b - l.a) * t;\n}\n\nint main(){\n  Line l;\n  cin >> l;\n  int q;\n  cin >> q;\n  while(q--){\n    Point p; cin >> p;\n    Point x = projection(l, p);\n    cout << x << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#define TEST_MODE 1\n\n#ifndef __VECD__\n#define __VECD__\n#include <vector>\n#include <numeric>\n#include <iomanip>\n#include <stdlib.h>\n#define rep(n) for(int i=0;i<n;i++)\n#define PB push_back\n#define VecND VecD<std::vector<double> >\n#if TEST_MODE\n// #define Vec3D VecD<double, 3>\n#define Vec2D _VecD<double, 2>\n#endif\n#endif\n\ntemplate <typename U>                       class VecD;\n\n#if TEST_MODE\ntemplate <typename TYPE, unsigned int SIZE> class _VecD;\n#endif\n\ntemplate <typename U> const VecD<U> projection(const VecD<U> &p1, const VecD<U> &p2);\n\ntemplate <typename U> class VecD{\ntemplate <typename DUMMY>      friend const double operator*(const VecD&, const VecD&);\ntemplate <typename T>          friend const VecD operator*(const T&, const VecD&);\ntemplate <typename T, class C> friend const C operator*(const C&, const T&);\ntemplate <typename DUMMY>      friend const VecD operator+(const VecD&, const VecD&);\ntemplate <typename T>          friend const VecD operator+(const T&, const VecD&);\ntemplate <typename T, class C> friend const C operator+(const C&, const T&);\ntemplate <class C>             friend const C operator-(const C&);\ntemplate <class C>             friend const C operator-(const C&, const C&);\ntemplate <typename T, class C> friend const C operator-(const T&, const C&);\ntemplate <typename T, class C> friend const C operator-(const C&, const T&);\ntemplate <typename DUMMY>      friend std::ostream& operator<<(std::ostream&, const VecD&);\npublic:\n\tU vec;\n\tVecD(){}\n\tVecD(U v){\n\t\tvec = v;\n\t}\n\tconst double dot(const VecD &p) const{\n\t\treturn inner_product( this->vec.begin(), this->vec.end(), p.vec.begin(), 0);\n\t}\n};\n\n#if TEST_MODE\ntemplate <typename TYPE, unsigned int SIZE> class _VecD{\ntemplate <typename DUMMY>      friend const double operator*(const _VecD&, const _VecD&);\ntemplate <typename T>          friend const _VecD operator*(const T&, const _VecD&);\ntemplate <typename T, class C> friend const C operator*(const C&, const T&);\ntemplate <typename DUMMY>      friend const _VecD operator+(const _VecD&, const _VecD&);\ntemplate <typename T>          friend const _VecD operator+(const T&, const _VecD&);\ntemplate <typename T, class C> friend const C operator+(const C&, const T&);\ntemplate <class C>             friend const C operator-(const C&);\ntemplate <class C>             friend const C operator-(const C&, const C&);\ntemplate <typename T, class C> friend const C operator-(const T&, const C&);\ntemplate <typename T, class C> friend const C operator-(const C&, const T&);\ntemplate <typename DUMMY>      friend std::ostream& operator<<(std::ostream&, const _VecD&);\n\npublic:\n\tTYPE vec[SIZE];\n\t_VecD(){}\n\t_VecD(TYPE (&array)[SIZE]){\n\t\tfor(int i=0; i<SIZE; i++) vec[i] = array[i];\n\t}\n\tconst double dot(const _VecD &p) const{\n\t\tdouble tmp = 0;\n\t\tfor(int i=0; i<SIZE; i++) tmp += this->vec[i] * p.vec[i];\n\t\treturn tmp;\n\t}\n};\n#endif\n\nconst double operator*(const VecND &p0, const VecND &p1){ return inner_product( p0.vec.begin(), p0.vec.end(), p1.vec.begin(), 0); }\n// template <typename U>\n// const double operator*(const VecD<U> &p0, const VecD<U> &p1){ return inner_product( p0.vec.begin(), p0.vec.end(), p1.vec.begin(), 0); }\n\ntemplate <typename T>\nconst VecND operator*(const T &a, const VecND &p1){\n\tstd::vector<double> v;\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++) v.PB(*iter1 * a);\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\ntemplate <typename T>\nconst Vec2D operator*(const T &a, const Vec2D &p1){\n\tdouble v[2] = {0, 0};\n\tfor(int i=0; i<2; i++) v[i] = p1.vec[i] * a;\n\tconst Vec2D p(v);\n\treturn p;\n}\n// template <typename T>\n// const Vec3D operator*(const T &a, const Vec3D &p1){\n// \tdouble v[3] = {0, 0, 0};\n// \tfor(int i=0; i<3; i++) v[i] = p1.vec[i] * a;\n// \tconst Vec3D p(v);\n// \treturn p;\n// }\n#endif\n\ntemplate <typename T, class C>\nconst C operator* (const C &p, const T &a){return a*p;}\nconst VecND operator+(const VecND &p0, const VecND &p1){\n\tstd::vector<double> v;\n\tstd::vector<double>::const_iterator iter0 = p0.vec.begin();\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++){\n\t\tv.PB(*iter0 + *iter1);\n\t\titer0++;\n\t}\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\nconst Vec2D operator+(const Vec2D &p0, const Vec2D &p1){\n\tdouble v[2] = {0, 0};\n\tfor(int i=0; i<2; i++) v[i] = p0.vec[i] + p1.vec[i];\n\tconst Vec2D p(v);\n\treturn p;\n}\n// const Vec3D operator+(const Vec3D &p0, const Vec3D &p1){\n// \tdouble v[3] = {0, 0, 0};\n// \tfor(int i=0; i<3; i++) v[i] = p0.vec[i] + p1.vec[i];\n// \tconst Vec3D p(v);\n// \treturn p;\n// }\n#endif\ntemplate <class T>\nconst VecND operator+(const T &a, const VecND &p1){\n\tstd::vector<double> v;\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++){\n\t\tv.PB(*iter1 + a);\n\t}\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\ntemplate <class T>\nconst Vec2D operator+(const T &a, const Vec2D &p1){\n\tdouble v[2];\n\tfor(int i=0; i<2; i++) v[i] = p1.vec[i] + a;\n\tconst Vec2D p(v);\n\treturn p;\n}\n// template <class T>\n// const Vec3D operator+(const T &a, const Vec3D &p1){\n// \tdouble v[3];\n// \tfor(int i=0; i<3; i++) v[i] = p1.vec[i] + a;\n// \tconst Vec3D p(v);\n// \treturn p;\n// }\n#endif\ntemplate <typename T, class C>\nconst C operator+(const C &p1, const T &a){return a+p1;}\ntemplate <class C>\nconst C operator-(const C &p1){return (-1)*p1;}\ntemplate <class C>\nconst C operator-(C &p0, C &p1){ return p0+(-p1); }\ntemplate <typename T, class C>\nconst C operator-(const T &a, C &p1){ return a+(-p1); }\ntemplate <typename T, class C>\nconst C operator-(C &p1, const T &a){return (-a)+p1;}\n\n// template<class C>\n// const C projection(const C &p1, const C &p2){\n// \treturn ((p1*p2) / (p1*p1)) * p1;\n// }\ntemplate<typename U>\nconst VecD<U> projection(const VecD<U> &p1, const VecD<U> &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\n\n#if TEST_MODE\nconst Vec2D projection(const Vec2D &p1, const Vec2D &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\n// const Vec3D projection(const Vec3D &p1, const Vec3D &p2){\n// \treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n// }\n#endif\n\nstd::ostream& operator<<(std::ostream &os, const VecND &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\n#if TEST_MODE\nstd::ostream& operator<<(std::ostream &os, const Vec2D &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\n#endif\n\n#include <iostream>\nusing namespace std;\n\n\nint main(void){\n\n\tdouble xp0, yp0, xp1, yp1; cin>>xp0>>yp0>>xp1>>yp1;\n\tint q; cin >> q;\n\t// vector<double> v0; v0.PB(xp0); v0.PB(yp0); VecND p0(v0);\n\t// vector<double> v1; v1.PB(xp1); v1.PB(yp1); VecND p1(v1);\n\tdouble v0[2] = {xp0, yp0}; Vec2D p0(v0);\n\tdouble v1[2] = {xp1, yp1}; Vec2D p1(v1);\n\tp1 = p1-p0;\n\t// cout << p1.point[0] << \" \" << p1.point[1] << endl;\n\trep(q){\n\t\tdouble xp2,yp2; cin>>xp2>>yp2;\n\t\t// vector<double> v2; v2.PB(xp2); v2.PB(yp2); VecND p2(v2);\n\t\tdouble v2[2] = {xp2, yp2}; Vec2D p2(v2);\n\t\tp2 = 1*(p2-p0);\n\t\t// VecND ret = projection(p1, p2);\n\t\tVec2D ret = projection(p1, p2);\n\t\tret = ret+p0;\n\t\tcout << ret << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define loop(i, s, e) for(ll i = s;i < e;i++)\n\n#include <iostream>\n#include <set>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long signed ll;\n\ntemplate <typename T>\nclass Vector2D {\npublic:\n    T x;\n    T y;\n    Vector2D(){\n        x = y = 0;\n    }\n    Vector2D(T x_,T y_){\n        x = x_;\n        y = y_;\n    }\n    T operator*(const Vector2D<T> *e) {\n        return this->x * e->x + this->y * e->y;\n    }\n    Vector2D<T> operator-(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x - e->x ,this->y - e->y);\n    }\n    Vector2D<T> operator+(const Vector2D<T> *e) {\n        return Vector2D<T>(this->x + e->x ,this->y + e->y);\n    }\n    T operator*(const Vector2D<T> e) {\n        return this->x * e.x + this->y * e.y;\n    }\n    Vector2D<T> operator-(const Vector2D<T> e) {\n        return Vector2D<T>(this->x - e.x ,this->y - e.y);\n    }\n    Vector2D<T> operator+(const Vector2D<T> e) {\n        return Vector2D<T>(this->x + e.x ,this->y + e.y);\n    }\n    Vector2D<T> operator*(const T r) {\n        return Vector2D<T>(this->x * r ,this->y * r);\n    }\n    Vector2D<T> operator/(const T r) {\n        return Vector2D<T>(this->x / r ,this->y / r);\n    }\n    double abs(){\n        return sqrt(x*x+y*y);\n    }\n    T abs2(){\n        return x*x+y*y;\n    }\n};\n\nint main() {\n    int x,y,q;\n    Vector2D<double> base,p,pp,t;\n    cin >> x >> y;\n    base = Vector2D<double>(x,y);\n    cin >> x >> y >> q;\n    p = Vector2D<double>(x,y) - base;\n    loop(i,0,q){\n        cin >> x >> y;\n        t = p * ((p * (Vector2D<double>(x,y) - base)) / p.abs2()) + base;\n        cout << t.x << \" \" << t.y << endl;\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\ntypedef long double D;\n\nstruct P {\n    D x, y;\n    P(D x, D y) : x(x), y(y) { }\n    P() { }\n};\n\nP operator -(P a, P b) {\n    a.x -= b.x, a.y -= b.y;\n    return a;\n}\n\n// ???????????????\nP operator *(P p, D s) {\n    p.x *= s, p.y *= s;\n    return p;\n}\n\nD inp(P a, P b) {\n    return a.x*b.x + a.y*b.y;\n}\n\nD norm(P p) {\n    return inp(p, p);\n}\n\nD abs(P p) {\n    return sqrt(norm(p));\n}\n\nint main() {\n    double x, y;\n    cin >> x >> y;\n    P p0(x, y);\n    cin >> x >> y;\n    P p1(x, y);\n    P vec = p1 - p0;\n    P idvec = vec * (1.0 / abs(vec));\n    int Q; cin >> Q;\n    while(Q--) {\n        cin >> x >> y;\n        P p2(x, y);\n        P res = idvec * inp(idvec, p2);\n        printf(\"%.10Lf %.10Lf\\n\", res.x, res.y);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "//{{{\n#include <bits/stdc++.h>\nusing namespace std;\n//types\ntypedef long long ll;\ntypedef pair<int,int> pii;\n//input\nbool SR(int &_x){return scanf(\"%d\",&_x)==1;}bool SR(ll &_x){return scanf(\"%lld\",&_x)==1;}\nbool SR(double &_x){return scanf(\"%lf\",&_x)==1;}bool SR(char *_s){return scanf(\"%s\",_s)==1;}\nbool RI(){return true;}\ntemplate<typename I,typename... T>bool RI(I &_x,T&... _tail){return SR(_x) && RI(_tail...);}\n//output\nvoid SP(const int _x){printf(\"%d\",_x);}void SP(const ll _x){printf(\"%lld\",_x);}\nvoid SP(const double _x){printf(\"%.16lf\",_x);}void SP(const char *s){printf(\"%s\",s);}\nvoid PL(){puts(\"\");}\ntemplate<typename I,typename... T>void PL(const I _x,const T... _tail)\n{SP(_x);if(sizeof...(_tail)) putchar(' ');PL(_tail...);}\n//macro\n#define SZ(x) ((int)(x).size())\n#define ALL(x) (x).begin(),(x).end()\n#define REP(i,n) for(int i=0;i<int(n);i++)\n#define REP1(i,a,b) for(int i=(a);i<=int(b);i++)\n#define PER1(i,a,b) for(int i=(a);i>=int(b);i--)\n#define pb push_back\n#define mkp make_pair\n#define F first\n#define S second\n//debug\n#ifdef darry140\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const pair<A,B> &_p){return _s<<\"(\"<<_p.F<<\",\"<<_p.S<<\")\";}\ntemplate<typename It>\nostream& _OUTC(ostream &_s,It _b,It _e)//container\n{\n    _s<<\"{\";\n    for(auto _it=_b;_it!=_e;_it++) _s<<(_it==_b?\"\":\" \")<<*_it;\n    _s<<\"}\";\n    return _s;\n}\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const map<A,B> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const set<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const vector<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename I>\nvoid _DOING(const char *_s,I&& _x){cerr<<_s<<\"=\"<<_x<<endl;}//without ','\ntemplate<typename I,typename... T>\nvoid _DOING(const char *_s,I&& _x,T&&... _tail)//with ','\n{\n    int _c=0;\n    static const char _bra[]=\"({[\";\n    static const char _ket[]=\")}]\";\n    while(*_s!=',' || _c!=0)//eg. mkp(a,b)\n    {\n        if(strchr(_bra,*_s)) _c++;\n        if(strchr(_ket,*_s)) _c--;\n        cerr<<*_s++;\n    }\n    cerr<<\"=\"<<_x<<\", \";\n    _DOING(_s+1,_tail...);\n}\n#define debug(...) do{\\\n    fprintf(stderr,\"%s:%d - \",__PRETTY_FUNCTION__,__LINE__);\\\n    _DOING(#__VA_ARGS__,__VA_ARGS__);\\\n}while(0)\n#else\n#define debug(...)\n#endif\n//}}}\ntypedef long double ld;\nconst ld global_eps=1e-9;\n#if 0\nenum cases{insi,bord,outs};//inside, border, outside\nenum cases{para,coin,inte};//parallel, coincide, intersect\n#else\nenum Case\n{\n    insi,bord,outs,//inside, border, outside\n    para,coin,inte, //parallel, coincide, intersect\n    tang,tang_in,tang_out //tangent\n};\n#endif\nint sign(ld x,ld eps=global_eps){return (x>=eps)-(x<=-eps);}\nint cmp(ld a,ld b,ld eps=global_eps){return sign(a-b,eps);}\nstruct Point\n{\n    ld x,y;\n    Point():x(0),y(0){}\n    Point(ld _x,ld _y):x(_x),y(_y){}\n    Point operator +(const Point &p) const\n    {return Point(x+p.x,y+p.y);}\n    Point operator -(const Point &p) const\n    {return Point(x-p.x,y-p.y);}\n    ld operator *(const Point &p) const\n    {return x*p.x+y*p.y;}\n    ld operator %(const Point &p) const\n    {return x*p.y-y*p.x;}   \n    bool operator <(const Point &p) const\n    {return tie(y,x) < tie(p.y,p.x);}\n    bool operator ==(const Point &p) const\n    {return tie(y,x) == tie(p.y,p.x);}\n    Point operator /(const ld &l) const\n    {return Point(x/l,y/l);}\n    Point operator *(const ld &l) const\n    {return Point(x*l,y*l);}\n    ld len() const{return hypot(x,y);}\n    ld len2() const{return x*x+y*y;}\n    ld dis(const Point &a)const{return (*this-a).len();}\n    ld dis2(const Point &a)const{return (*this-a).len2();}\n    Point unit()const{return *this/len();}\n    Point resize(const ld &l)const{return unit()*l;}\n};\nstruct Line\n{\n    Point p1,p2;\n    Line(){}\n    Line(Point a,Point b):p1(a),p2(b){}\n    Point way() const{return p2-p1;}\n    Point norm() const{return {p1.y-p2.y,p2.x-p1.x};}\n    bool online(const Point &p) const{return sign((p-p1)%way())==0;}\n    bool onsegment(const Point &p)const\n    {\n        return online(p) && sign((p-p1)*(p2-p))>=0;\n    }\n    pair<int,Point> intersect(const Line &I) const\n    {\n        if(sign(I.way()%way())==0) return {online(I.p1)?coin:para,{0,0}};\n        const Point &p3=I.p1,&p4=I.p2;\n        auto _143=(p1-p4)%(p4-p3),_342=(p3-p4)%(p4-p2);\n        return {inte,(p1*_342+p2*_143)/(_143+_342)};\n    }\n    ld linedistance(const Point &p) const\n    {\n        return abs((p-p1)%way())/way().len();\n    }\n    Point project(const Point &p) const\n    {\n        return intersect(Line(p,p+norm())).second;\n    }\n    ld segmentdistance(const Point &p) const\n    {\n        const auto &pro=project(p);\n        if(onsegment(pro)) return p.dis(pro);\n        return min(p.dis(p1),p.dis(p2));\n    }\n};\nstruct Circle\n{\n    Point o;ld r;\n    Circle(){}\n    Circle(Point a,ld b):o(a),r(b){assert(r>=0);}\n    int intersect(const Point &p) const\n    {\n        auto dis2=p.dis2(o);//hypot(p.x-o.x,p.y-o.y);\n        int res=cmp(dis2,r*r);//XXX eps may vary, ~ 2 * range_of(r) * eps\n        if(res==0) return bord;\n        else if(res<0) return insi;\n        else return outs;\n    }\n    tuple<int,Point,Point> intersect(const Line &I) const\n    {\n        static_assert(is_floating_point<decltype(Point().x)>::value,\"Point<ld>!\");//is double-like\n\n        auto dis=I.linedistance(o);\n        int res=cmp(dis,r);\n        if(res==0)\n        {\n            const auto &pro=I.project(o);\n            return {bord,pro,pro};\n        }\n        else if(res==1) return {outs,{0,0},{0,0}};\n        else\n        {\n            const auto &pro=I.project(o);\n            const auto d=sqrt(r*r-o.dis2(pro));\n            const auto v=I.way().resize(d);\n            return {insi,pro+v,pro-v};\n        }\n    }\n    tuple<int,Point,Point> intersect(const Circle &c) const\n    {\n        {\n            int res=cmp(o.dis(c.o),abs(r-c.r));\n            if(res<0) return {insi,{0,0},{0,0}};\n            else if(res==0)\n            {\n                const auto &p=get<1>(intersect(Line(o,c.o)));\n                return {tang_in,p,p};\n            }\n        }\n        {\n            int res=cmp(o.dis(c.o),r+c.r);\n            if(res>0) return {outs,{0,0},{0,0}};\n            else if(res==0)\n            {\n                const auto &p=get<1>(intersect(Line(o,c.o)));\n                return {tang_out,p,p};\n            }\n        }\n        {\n            Point o1=o,o2=c.o;\n            auto r1=r,r2=c.r,d=o1.dis(o2);\n            Point mid=(o1*(r2*r2-r1*r1+d*d)+o2*(r1*r1-r2*r2+d*d))/(2*d*d);\n            Line I(mid,mid+Point(o1.y-o2.y,o2.x-o1.x));\n            auto res=intersect(I);\n            return {inte,get<1>(res),get<2>(res)};\n        }\n    }\n};\nint main()\n{\n    int a,b,c,d;\n    RI(a,b,c,d);\n    Line I({a,b},{c,d});\n    int q;RI(q);\n    while(q--)\n    {\n        int x,y;RI(x,y);\n        auto ans=I.project({x,y});\n        ans=ans+Point(global_eps,global_eps);\n        PL((double)ans.x,(double)ans.y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\n\nusing namespace std;\nconst double EPS=1e-9;\nconst double PI=3.141592653589793238;//18 ragham\n\nbool Equal(double d1,double d2)\n{ return fabs(d1-d2)<EPS;}\n\nstruct line{double a,b,c;};\nstruct vec\n{\n  double x,y;\n  vec(double _x=0,double _y=0)\n  {x=_x;  y=_y;}\n};\n  \nstruct point_i\n{\n  int x,y;\n  point_i(int _x=0,int _y=0){x=_x;y=_y;}\n};\nstruct point\n{\n  double x,y;\n  point(double _x=0,double _y=0){x=_x;y=_y;}\n  bool operator < (point other)\n  {  \n    if(fabs(x-other.x)<EPS)\n      return y<other.y;\n    return x<other.x;}\n  bool operator == (point other)\n  {return (fabs(x-other.x)<EPS) && (fabs(y-other.y)<EPS) ;}\n  \n  \n};\ndouble Hypot(double dx,double dy)\n{\n  return sqrt(dx*dx+dy*dy);\n}\ndouble Distance(point p1,point p2)\n{\n  return hypot(p1.x-p2.x,p1.y-p2.y);\n}\ndouble DEG_to_RAD(double theta)\n{\n  return theta*PI/180;\n}\npoint rotate(point p, double theta)//theta is degree\n{\n  \n  //rotation matrixR(theta) = [cos(theta) - sin(theta)]\n  //                          [sin(theta) + cos(theta)]\n  //usage: [x'] = R(theta)* [x]\n  //       [y']             [y]\n  double rad=DEG_to_RAD(theta);\n  return point(p.x * cos(rad) - p.x * sin(rad) ,\n\t       p.y * sin(rad) + p.y * cos(rad)  );\n}\nvoid PointsToLine(point p1,point p2,line *l)\n{\n  if(p1.x==p2.x) // vertical line handled here\n    { l->a=1.0;   l->b= 0.0 ; l->c=-p1.x;}\n  else\n    {\n      l->a=-(double)(p1.y-p2.y)/(p1.x-p2.x);\n      l->b=1.0;\n      l->c=-(double)(l->a * p1.x) - (l->b*p1.y);\n    }\n}\nbool AreParallel(line l1,line l2)\n{\n  return Equal(l1.a,l2.a) && Equal(l1.b,l2.b);\n}\nbool AreSame(line l1,line l2)\n{\n  return AreParallel(l1,l2) && Equal(l1.c,l2.c);\n}\nbool AreIntersect(line l1,line l2,point *p)//TO BE CHECKED (mine)\n{\n  if(AreSame(l1,l2))\n    return false;\n  if(AreParallel(l1,l2))\n    return false;\n\n  //solving\n  double delta=(double)l1.a*l2.b - l1.b*l2.a;\n  if(Equal(delta,0))//this if should never be true because lines are't parallel\n    return false;\n  p->x= (double)(l1.c*l2.b-l2.c*l1.b) / delta;\n  p->y= (double)(l1.a*l2.c-l2.a*l1.c) / delta;\n  return true;\n}\nvec ToVector(point p1,point p2)\n{\n  return vec(p2.x-p1.x,p2.y-p1.y);\n}\nvec ScaleVector(vec v, double s) // v*=s\n{\n  return vec(v.x*s,v.y*s);\n}\npoint Translate(point p,vec move)//moves point p in direction of vector move\n{\n  return point(p.x+move.x , p.y + move.y);\n}\ndouble Dot(double x1,double y1 ,double x2,double y2)\n{ return x1*x2+y1*y2;};\ndouble Cross(point p,point q,point r)\n{\n  return (r.x-q.x)*(p.y-q.y)-(r.y-q.y)*(p.x-q.x);\n}\nbool Collinear(point p,point q,point r)\n{\n  return Equal(Cross(p,q,r),0);\n}\n//returns true if point r is on the left side of line pq\nbool CCW(point p,point q,point r)\n{\n   //can be modified to accept collinear ( >0 instead of >EPS )\n  if(Cross(p,q,r) > EPS)\n    return true;\n  return false;\n}\n\n//returns the distance from p to line AB\n// A and B must be different\n//closest point is in *c\ndouble DistToLine(point p,point A,point B,point *c)\n{// formula : c= A+ (p-A).(A-B)/|B-A|*(B-A)\n  double scale= (double)\n    ((p.x-A.x)*(B.x-A.x)+(p.y-A.y)*(B.y-A.y))/\n    ((B.x-A.x)*(B.x-A.x)+(B.y-A.y)*(B.y-A.y));\n  c->x= A.x + scale*(B.x - A.x);\n  c->y= A.y + scale*(B.y - A.y);\n  \n  return Distance(p,*c);\n}\ndouble DistToLineSegment(point p,point A,point B,point *c)\n{\n  if((B.x-A.x) * (p.x-A.x)+ (B.y-A.y)*(p.y-A.y) <EPS)\n    { c->x=A.x ; c->y= A.y;\n      return Distance(p,A);}//closer to A\n \n  if((A.x-B.x) * (p.x-B.x)+ (A.y-B.y)*(p.y-B.y) <EPS)\n    { c->x=B.x ; c->y= B.y;\n      return Distance(p,B);}//closer to B\n\n  return DistToLine(p,A,B,c);\n  \n}\n\n\n///*****************### End of Library ###*******************///\n\n\n\n\n\npoint p0,p1,p2;\nint n;\n\nvoid input()\n{\n  int x,y;\n  cin>>x>>y;\n  p0=point(x,y);\n  \n  cin>>x>>y;\n  p1=point(x,y);\n  cin>>n; \n \n \n}\n\nint main()\n{\n  input();\n  for(int i=1;i<=n;i++)\n    {\n      int x,y;\n  cin>>x>>y;\n  p2=point(x,y);\n  point ans;\n  DistToLine(p2,p0,p1,&ans);\n  cout<<fixed;\n  cout<<setprecision(9);\n  cout<<ans.x<<\" \"<<ans.y<<endl;\n  \n    }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define lol long long\n#define fixed(x) fixed<<setprecision(x)\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\nclass Point{\n  public:\n  double x,y;\n\n  Point(double x=0, double y=0):x(x),y(y){}\n\n  Point operator + (Point p) {return Point(x+p.x, y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double a) {return Point(a*x,a*y);}\n  Point operator / (double a) {return Point(x/a,y/a);}\n\n  double abs(){return sqrt(norm());}\n  double norm(){return x*x+y*y;}\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return (fabs(x-p.x) < EPS && fabs(y-p.y) < EPS);\n  }\n};\n// ベクトルを表す\ntypedef Point Vector;\n// 線分を表す\nstruct Segment{\n  Point p1,p2;\n};\n// 直線を表す\ntypedef Segment Line;\n// 円を表す\nclass Circle{\n  public:\n  Point c;\n  double r;\n  Circle(Point c=Point(), double r=0.0): c(c),r(r){}\n};\n// 多角形を表す\ntypedef vector<Point> Polygon;\n\n\n\n// ベクトルaとbの内積\ndouble dot(Vector a, Vector b);\n// ベクトルaとbの外積\ndouble cross(Vector a, Vector b);\n// ベクトルaとbのなす角\ndouble VecAngle(Vector a, Vector b);\n// ベクトルaとbの直交判定\nbool isOrthogonal(Vector a, Vector b);\n// ベクトルaとbの平行判定\nbool isParallel(Vector a, Vector b);\n// 線分sに対する点pの射影\nPoint projection(Segment s, Point p);\n\n\nsigned main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  int x[3],y[3];\n  cin >>x[0]>>y[0]>>x[1]>>y[1];\n  Segment s={Point(x[0],y[0]),Point(x[1],y[1])};\n  int q;\n  cin >>q;\n  for(int i=0;i<q;i++){\n    int x,y;\n    cin >>x>>y;\n    Point ans=projection(s,Point(x,y));\n    cout <<fixed(9)<<ans.x<<' '<<fixed(9)<<ans.y<<'\\n';\n  }\n\n  return (0);\n}\n\n// ベクトルaとbの内積\ndouble dot(Vector a, Vector b){\n  return (a.x*b.x + a.y*b.y);\n}\n// ベクトルaとbの外積\ndouble cross(Vector a, Vector b){\n  return (a.x*b.y - a.y*b.x);\n}\n// ベクトルaとbのなす角\ndouble VecAngle(Vector a, Vector b){\n  return acos((dot(a,b)/(a.abs()*b.abs())));\n}\n// ベクトルaとbの直交判定\nbool isOrthogonal(Vector a, Vector b){\n  return equals(dot(a,b),0.0);\n}\n// ベクトルaとbの平行判定\nbool isParallel(Vector a, Vector b){\n  return equals(cross(a,b),0.0);\n}\n// 線分sに対する点pの射影\nPoint projection(Segment s, Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base)/(base.norm());\n  return (s.p1 + base*r);\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x+p2.x, p1.y+p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x-p2.x, p1.y-p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y + p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point p) {\n    auto base = s.p2 - s.p1;\n    auto r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n\nint main() {\n    using namespace std;\n\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Segment s{p1, p2};\n\n    int q;\n    cin >> q;\n\n    for (int i = 0; i < q; ++i) {\n        Point p;\n        cin >> p.x >> p.y;\n        auto x = projection(s, p);\n        cout << x.x << \" \" << x.y << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <math.h>\n#include <string.h>\n#include <stdio.h>\nusing namespace std;\nconst int MAXN = 5000;\nint n, m;\ndouble x1, y1, x2, y2;\nint s[MAXN];\nstruct Point\n{\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n};\nstruct Line\n{\n    Point p1, p2;\n    Line() {}\n    Line(Point p1, Point p2): p1(p1), p2(p2) {}\n\n} lie[MAXN];\n\ntypedef Point Vector;\nVector operator +(Vector A, Vector B)\n{\n    return Vector(A.x + B.x, A.y + B.y);\n}\nVector operator -(Vector A, Vector B)\n{\n    return Vector(A.x - B.x, A.y - B.y);\n}\nVector operator *(Vector A, double p)\n{\n    return Vector(A.x * p, A.y * p);\n}\nVector operator /(Vector A, double p)\n{\n    return Vector(A.x / p, A.y / p);\n}\nVector operator -(Vector A)\n{\n    return  Vector(-A.x, -A.y);\n}\n\ndouble torad(double deg)//角度换弧度\n{\n    return deg / 180 * acos(-1.0);\n}\n\nconst double EPS = 1e-10;\nint dcmp(double x)\n{\n    if(fabs(x) < EPS) return 0;\n    else return x < 0 ? -1 : 1;\n}\n\n//向量点积\ndouble Dot(Vector A, Vector B) \n{ \n    return A.x*B.x + A.y*B.y; \n}\n\n//向量叉积\ndouble Cross(Vector A, Vector B)\n{\n    return A.x * B.y - A.y * B.x;\n}\n\nconst int INF = 1000005;\nint par[INF], ran[INF];\n\n//点在直线上的投影\nPoint GetLineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A+v*(Dot(v, P-A)/Dot(v, v));\n}\n\n\nint main()\n{\n    int x1,y1,x2,y2;\n    cin>>x1>>y1>>x2>>y2;\n    Point p1=Point(x1,y1);\n    Point p2=Point(x2,y2);\n    int n;\n    cin>>n;\n    while(n--)\n    {\n        int x,y;\n        cin>>x>>y;\n        Point p=Point(x,y);\n        Point Pp=GetLineProjection(p,p1,p2);\n        printf(\"%.10f %.10f\\n\",Pp.x,Pp.y);\n    }\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n\nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nint main(){\n  int n;\n  double ax,ay,bx,by,cx,cy;\n  cin>>ax>>ay>>bx>>by>>n;\n  while(n--){\n    cin>>cx>>cy;\n    P p=project(P(ax,ay),P(bx,by),P(cx,cy));\n    printf(\"%.8f %.8f\\n\",p.real(),p.imag());\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long   // <-----!!!!!!!!!!!!!!!!!!!\n\n#define rep(i,n) for (int i=0;i<(n);++i)\n#define rep2(i,a,b) for (int i=(a);i<(b);++i)\n#define rrep(i,n) for (int i=(n)-1;i>=0;--i)\n#define rrep2(i,a,b) for (int i=(a)-1;i>=b;--i)\n#define chmin(a,b) (a)=min((a),(b));\n#define chmax(a,b) (a)=max((a),(b));\n#define all(a) (a).begin(),(a).end()\n#define rall(a) (a).rbegin(),(a).rend()\n#define printV(v) cout<<(#v)<<\":\";for(auto(x):(v)){cout<<\" \"<<(x);}cout<<endl;\n#define printVS(vs) cout<<(#vs)<<\":\"<<endl;for(auto(s):(vs)){cout<<(s)<< endl;}\n#define printVV(vv) cout<<(#vv)<<\":\"<<endl;for(auto(v):(vv)){for(auto(x):(v)){cout<<\" \"<<(x);}cout<<endl;}\n#define printP(p) cout<<(#p)<<(p).first<<\" \"<<(p).second<<endl;\n#define printVP(vp) cout<<(#vp)<<\":\"<<endl;for(auto(p):(vp)){cout<<(p).first<<\" \"<<(p).second<<endl;}\n\ninline void output(){ cout << endl; }\ntemplate<typename First, typename... Rest>\ninline void output(const First& first, const Rest&... rest) {\n    cout << first << \" \"; output(rest...);\n}\n\nusing ll = long long;\nusing Pii = pair<int, int>;\nusing TUPLE = tuple<int, int, int>;\nusing vi = vector<int>;\nusing vvi = vector<vi>;\nusing vvvi = vector<vvi>;\nconst int inf = 1e9;\nconst int mod = 1e9 + 7;\nusing Graph = vector<vector<int>>;\n\ntypedef complex<double> P;\ntypedef vector<P> G;\n#define here(g, i) g[i]\n#define next(g, i) g[(i + 1) % g.size()]\n#define prev(g, i) g[(i - 1 + g.size()) % g.size()]\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\ninline int sgn(double a, double b = 0) { return a < b - EPS ? -1 : a > b + EPS ? 1 : 0; }\n\nP readP() {\n    double x, y;\n    cin >> x >> y;\n    return P(x, y);\n}\n\nvoid printPoint(P p) {\n    cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n}\n\ndouble cross(P a, P b) {\n    return imag(conj(a) * b);\n}\n\ndouble dot(P a, P b) {\n    return real(conj(a) * b);\n}\n\nP projection(P p, P a, P b) {\n    p -= a; b -= a;\n    return dot(p, b) * b / abs(b) / abs(b) + a;\n}\n\nP reflection(P p, P a, P b) {\n    P t = projection(p, a, b);\n    return 2. * t - p;\n}\n\nmain() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    P a = readP(), b = readP();\n    int n;\n    cin >> n;\n    rep(i, n) {\n        P p = readP();\n        printPoint(projection(p, a, b));\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nstruct point{\n\tdouble x,y;\n\tpoint(){}\n\tpoint(double _x,double _y){\n\t\tx=_x;y=_y;\n\t}\n\tpoint operator +(const point &b) const{\n\t\treturn point(x+b.x,y+b.y);\n\t}\n\tpoint operator -(const point &b) const{\n\t\treturn point(x-b.x,y-b.y);\n\t}\n\tdouble operator ^(const point &b) const{\n\t\treturn (x*b.x)+(y*b.y);\n\t}\n\tdouble operator *(const point &b) const{\n\t\treturn x*b.y-y*b.x;\n\t}\n\tpoint operator *(const double &b) const{\n\t\treturn point(x*b,y*b);\n\t}\n};\ndouble len(point p){\n\treturn (p.x*p.x+p.y*p.y);\n}\nint main(){\n\tpoint res,p1,p2,p;\n\tcin>>p1.x>>p1.y>>p2.x>>p2.y;\n\tint q;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>p.x>>p.y;\n\t\tres=(p2-p1)*(((p-p1)^(p2-p1))/len(p2-p1));\n\t\tres=res+p1;\n\t\tif(fabs(res.x)==0) res.x=0;\n\t\tif(fabs(res.y)==0) res.y=0;\n\t\tprintf(\"%.8lf %.8lf\\n\",res.x,res.y);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <vector>\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#include<functional>\n//--\n#include<list>\n#include<deque>\n#include<bitset>\n#include<set>\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<sstream>\n#include<complex>\n#define X first\n#define Y second\n#define pb push_back\n#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))\n#define rrep(X,Y) for (int (X) = Y-1;(X) >=0;--(X))\n#define all(X) (X).begin(),(X).end()\n#define rall(X) (X).rbegin(),(X).rend()\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef complex<double> pt;\n\npt proj(pt a,pt to){\n  return (conj(a)*to).real()/norm(to)*to;\n}\n\nint main(){\n  int i,j,k,n;\n  pt o,p,q;\n  cin>>o.real()>>o.imag()>>p.real()>>p.imag();\n  cin>>n;\n  rep(i,n){\n    cin>>q.real()>>q.imag();\n    q=proj(q-o,p-o);\n    printf(\"%.9f %.9f\\n\",q.real(),q.imag());\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n#include <cassert>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define fs first\n#define sc second\n#define pb push_back\nusing namespace std;\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P,P> L;\t\t//fs->sc\ntypedef vector<P> Pol;\nstruct C{P p;D r;};\nD inf=1e50,eps=1e-10;\n//template<class T> bool eq(T a, T b) { return abs(a-b)<eps;}\n//template<class T> int sig(T a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool eq(D a, D b) { return abs(a-b)<eps;}\nint sig(D a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\ninline D dot(P a, P b) { return real(conj(a)*b);};\ninline D cro(P a, P b) { return imag(conj(a)*b);};\nenum ENCCW{CCW=1, CW=-1, FRONT=2, BACK=-2, ON=0};\t//!!MAEHARAとFRONT,BACKが逆\n//ON優先(including endpoint)\ninline int ccw (P a, P b, P c){\n//\tcout << cro(b-a,c-a) << endl;\n\tif(sig(cro(b-a,c-a))==1) return CCW;\n\tif(sig(cro(b-a,c-a))==-1) return CW;\n\tif(eq(abs(a-c)+abs(c-b),abs(a-b))) return ON;\n\tif(eq(abs(a-b)+abs(b-c),abs(a-c))) return FRONT;\n\tif(eq(abs(c-a)+abs(a-b),abs(c-b))) return BACK;\n\tassert(false);\n}\ninline P proj(P a, P b){\t\t//ベクトルaのbへの射影\n\treturn (dot(a,b)/norm(b))*b;\n}\ninline P perp(L l, P p){\t\t//垂線の足\n\tD t=dot(p-l.fs,l.fs-l.sc)/norm(l.fs-l.sc);\n\treturn l.fs+t*(l.fs-l.sc);\n}\ninline P refl(L l, P p){\n\treturn p+2.0*(perp(l,p)-p);\n}\ninline bool ispal(L a, L b){\n\treturn sig(cro(a.fs-a.sc,b.fs-b.sc))==0;\n}\ninline bool ovLL(L a, L b){\n\treturn ispal(a,b) && sig(cro(a.fs-a.sc,b.fs-a.sc))==0;\n}\ninline bool iLL(L a, L b){\t\t//intersect or overload\n\treturn !ispal(a,b) || ovLL(a,b);\n}\ninline bool iLS(L l, L s){\t\t//intersect(including endpoint) or overload\n\treturn cro(l.sc-l.fs,s.fs-l.fs)*cro(l.sc-l.fs,s.sc-l.fs)<eps;\n}\ninline bool iLP(L l, P p){\t\t//on line\n\treturn sig(cro(l.sc-p,l.fs-p));\n}\ninline bool iSS(L a, L b){\t\t//intersect(including endpoint) or overload\n\treturn ccw(a.fs,a.sc,b.fs)*ccw(a.fs,a.sc,b.sc)<=0 && ccw(b.fs,b.sc,a.fs)*ccw(b.fs,b.sc,a.sc)<=0;\n}\ninline bool iSP(L s, P p){\t\t//intersect(including endpoint) or overload\n\treturn ccw(s.fs,p,s.sc)==ON;\n}\ninline D dLP(L l, P p) { return abs(perp(l,p)-p);}\ninline D dLL(L a, L b) { return iLL(a,b) ? 0 : dLP(a,b.fs);}\ninline D dLS(L l, L s) { return iLS(l,s) ? 0 : min(dLP(l,s.fs),dLP(l,s.sc));}\ninline D dSP(L s, P p) {\n\tP q=perp(s,p);\n\treturn iSP(s,q) ? abs(p-q) : min(abs(p-s.fs),abs(p-s.sc));\n}\ninline D dSS(L a, L b) {\n\tif(iSS(a,b)) return 0;\n\treturn min(min(dSP(a,b.fs),dSP(a,b.sc)),min(dSP(b,a.fs),dSP(b,a.sc)));\n}\ninline P intLL(L a, L b) {\t//intersection\n\tassert(!ispal(a,b));\n\tD t=cro(a.sc-a.fs,a.sc-b.fs)/cro(a.sc-a.fs,b.sc-b.fs);\n\treturn b.fs+t*(b.sc-b.fs);\n}\nenum ENICP{INC=1,ONC=0,OUTC=-1};\ninline int iCP(C c, P p){\n\tD d=abs(p-c.p);\n\treturn eq(d,c.r) ? ONC : (d<c.r ? INC : OUTC);\n}\ninline int iCL(C c, L l){\t\t//num of intersection(s)\n\tD d=dLP(l,c.p);\n\treturn eq(d,c.r) ? 1 : (d<c.r ? 2 : 0);\n}\n//inline int iCS\n//inline int iCC(C a, C b){\n\n/*inline P intCL1(C c, L l){\t\t//iCL=1\n\tassert(iCL(c,l)==1);\n}\ninline L intCL2(C c, L l){\t\t//iCL=2\n\tassert(iCL(c,l)==2);\n}*/\nD aTri(P a, P b, P c){ return cro(b-a,c-a)/2;}\nD aPol(Pol p){\t\t\t//点集合はCCWに与える\n\tint n=p.size();\n\tD ret=0;\n\trep(i,n) ret+=cro(p[i],p[(i+1)%n])/2;\n\treturn ret;\n}\nP gPol(Pol p){\t\t\t//多角形内部が一様な重さを持つときの重心\n\tint n=p.size();\n\tP g;\n\tD s=aPol(p);\n\tassert(s>eps);\n\trep(i,n){\n\t\tD ds=cro(p[i],p[(i+1)%n])/2;\n\t\tg+=ds/3*(p[i]+p[(i+1)%n]);\n\t}\n\treturn g/s;\n}\nenum ENCONT{INP=1,ONP=0,OUTP=-1};\nint contain(Pol pol, P p){\n\tbool in=false;\n\trep(i,pol.size()){\n\t\tP a=pol[i],b=pol[(i+1)%pol.size()];\n\t\tif(ccw(a,b,p)==ON) return ONP;\n\t\tif(!iLS(L(p,p+1.),L(a,b))) continue;\n\t\tif(ovLL(L(p,p+1.),L(a,b))){\n\t\t\tif(sig(max(real(a),real(b))-real(p))>=0) in=!in;\n\t\t\tcontinue;\n\t\t}\n\t\tif(sig(real(intLL(L(p,p+1.),L(a,b)))-real(p))>=0) in=!in;\n\t}\n\treturn in ? INP : OUTP;\n}\ninline D heron(D a, D b, D c){\n\tdouble s=(a+b+c)/2;\n\tif(s-a<eps || s-b<eps || s-c<eps) return 0;\t\t//S=0 || 三角形できない\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tD x0,y0,x1,y1;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tL a=L(P(x0,y0),P(x1,y1));\n\tint q;\n\tscanf(\"%d\",&q);\n\trep(i,q){\n\t\tD x,y;\n\t\tscanf(\"%Lf%Lf\",&x,&y);\n\t\tP p=perp(a,P(x,y));\n\t\tprintf(\"%.10Lf %.10Lf\\n\",p.real(),p.imag());\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <math.h>\n#include <vector>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    double x, y;\n    \n    Vector() {\n        x = 0.f;\n        y = 0.f;\n    }\n    \n    Vector(double nx, double ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void set(double nx, double ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void setX(double nx) {\n        x = nx;\n    }\n    \n    void setY(double ny) {\n        y = ny;\n    }\n    \n    // ベクトルの大きさを求める\n    double getMagnitude() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 内積を求める\n    double getScalar(const Vector& vec) {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 角度を求める\n    double getAngle(const Vector& vec) {\n        return getScalar(vec) / (getMagnitude() * vec.getMagnitude());\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() {\n        Vector v;\n        double mag = getMagnitude();\n        if (mag == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / mag, y / mag);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (double f) {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) {\n        Vector v;\n        if (vec.x == 0.f) {\n            v.setX(0.f);\n        } else {\n            v.setX(x / vec.x);\n        }\n        \n        if (vec.y == 0.f) {\n            v.setY(0.f);\n        } else {\n            v.setY(y / vec.y);\n        }\n        return v;\n    }\n    \n    Vector operator / (double f) {\n        Vector v;\n        if (f == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.f) {\n            x = 0.f;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.f) {\n            y = 0.f;\n        } else {\n            y /= vec.y;\n        }\n    }\n};\n\n\nint main() {\n    Vector vec1, vec2;\n    double x, y;\n    cin >> x;\n    cin >> y;\n    vec1.set(x,y);\n    cin >> x;\n    cin >> y;\n    vec2.set(x,y);\n    \n    int n;\n    cin >> n;\n    \n    Vector vec = vec2 - vec1;\n    Vector p, ret;\n    vector<Vector> results;\n    for (int i = 0; i < n; i++) {\n        double px, py;\n        cin >> px;\n        cin >> py;\n        p.set(px, py);\n        p -= vec1;\n        \n        double cos = p.getAngle(vec);\n        double size = p.getMagnitude() * cos;\n        ret = vec.getUnit() * size;\n        \n        results.push_back(ret);\n    }\n    \n    for (int i = 0; i < results.size(); i++) {\n        cout << results[i].x << \" \" << results[i].y << endl;\n     }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <stdio.h>\nusing namespace std;\n\nint main(void){\n\tdouble x1,y1,x2,y2;\n\tdouble x0,y0;\n\tdouble dx,dy;\n\tdouble m;\n\tdouble X,Y;\n\tint q;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tdx=x1-x2;\n\tdy=y1-y2;\n\tcin >> q;\n\twhile(q--){\n\t\tcin >> x0 >> y0;\n\t\tX=(dx*dx*x0+dy*dy*x1-dx*dy*(y1-y0))/(dx*dx+dy*dy);\n\t\tY=dy/dx*(X-x1)+y1;\n\t\tprintf(\"%.9lf %.9lf\\n\",X,Y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <set>\n#include <map>\n#include <algorithm>\t// require sort next_permutation count __gcd reverse etc.\n#include <cstdlib>\t// require abs exit atof atoi \n#include <cstdio>\t\t// require scanf printf\n#include <functional>\n#include <numeric>\t// require accumulate\n#include <cmath>\t\t// require fabs\n#include <climits>\n#include <limits>\n#include <cfloat>\n#include <iomanip>\t// require setw\n#include <sstream>\t// require stringstream \n#include <cstring>\t// require memset\n#include <cctype>\t\t// require tolower, toupper\n#include <fstream>\t// require freopen\n#include <ctime>\t\t// require srand\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define ALL(A) A.begin(), A.end()\n#define EPS (1e-10)\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> P;\n\ntemplate<class T>\nstruct point{\n\tT x, y;\n\tpoint &operator+=(const point &a ){ x += a.x; y += a.y; }\n\tpoint &operator-=(const point &a ){ x -= a.x; y -= a.y; }\n\tpoint operator+(const point &a )const{ return (point){x+a.x, y+a.y }; }\n\tpoint operator-(const point &a )const{ return (point){x-a.x, y-a.y }; }\n\toperator point<double>()const{ return (point<double>){x, y }; }\n};\n\ntemplate<class T>\npoint<T> operator*(T c, const point<T> &a ){ return (point<T>){c*a.x, c*a.y }; }\npoint<double> &operator/=(point<double> &a, double c ){ a.x /= c; a.y /= c; return a; }\ntemplate<class T>\npoint<double> operator/(const point<T> &a, double c ){ return (point<double>){ a.x/c, a.y/c }; }\n\ntemplate<class T>\nstruct line{\n\tpoint<T> a, b;\n\toperator line<double>()const{ return (line<double>){a, b}; }\n};\n\n\n//  for real number\nbool operator<(const point<double> &a, const point<double> &b ){\n\treturn (a.x + EPS < b.x || (abs (a.x - b.x ) < EPS && (a.y + EPS < b.y ) ) );\n}\n\nbool operator==(const point<double> &a, const point<double> &b ){\n\treturn abs (a.x - b.x) < EPS && abs (a.y - b.y ) < EPS;\n}\n\nbool operator!=(const point<double> &a, const point<double> &b ){\n\treturn abs (a.x - b.x ) > EPS || abs (a.y - b.y ) > EPS;\n}\n\n// inner product\ntemplate<class T>\nT dot(const point<T> &a, const point<T> &b ){ return a.x*b.x + a.y*b.y; }\n\n// outer product\ntemplate<class T>\nT cross(const point<T> &a, const point<T> &b ){ return a.x*b.y - a.y*b.x; }\n\n\ntemplate<class T>\nT abs2(const point<T> &a ){ return a.x*a.x + a.y*a.y; }\n\n\n// 点 p を直線 L 上に射影した点を求める\n// \tVerified: AOJ 0081 A Symmetric Point\ntemplate<class T>\npoint<double> proj(const point<T> &p, const line<T> &L ){\n\treturn L.a + dot (p-L.a, L.b-L.a )/abs2 (L.b - L.a )*(L.b - L.a );\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(0);\n\tdouble xp0, yp0, xp1, yp1; cin >> xp0 >> yp0 >> xp1 >> yp1;\n\tline<double> L;\n\tL.a.x = xp0, L.a.y = yp0;\n\tL.b.x = xp1, L.b.y = yp1;\n\n\tint q; cin >> q;\n\t\t\n\trep (i, q ){\n\t\tdouble xp2, yp2; cin >> xp2 >> yp2;\n\t\tline<double> l = L;\n\t\tpoint<double> p2; p2.x = xp2; p2.y = yp2;\n\t\tpoint<double> res = proj (p2, l );\n\t\tprintf (\"%.9lf %.9lf\\n\", res.x, res.y );\n\t} // end rep\n\t\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<math.h>\n\nusing namespace std;\n\nint main(){\n    const double dTolerance = 1.0e-10;\n    double x1, x2, y1, y2;\n    scanf(\"%lf %lf %lf %lf\", &x1, &y1, &x2, &y2);\n    int q;\n    scanf(\"%d\", &q);\n    \n    for (int i = 0; i < q; i++){\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        if (fabs(x1 - x2) < dTolerance) {\n            printf(\"%.10lf %.10lf\\n\", x1, y);\n        } else if (fabs(y1 - y2) < dTolerance){\n            printf(\"%.10lf %.10lf\\n\", x, y1);\n        } else {\n            double dt = ((x2 - x1) * (x2 - x) + (y2 - y1) * (y2 - y)) / ((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n            double ds = ((x2 - x1) * (x - x1) + (y2 - y1) * (y - y1)) / ((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n            printf(\"%.10lf %.10lf\\n\", dt * x1 + ds * x2, dt * y1 + ds * y2);\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n// conj(x) : complex conjugate,(0,1)->(0,-1)\n// abs(x) : dist between(0,0) and x\n// norm(x) : abs(x) * abs(x)\n// arg(x) : argment,[-PI,PI]\nusing CP = complex<long double>;\n#define X real()\n#define Y imag()\nconst long double PI = acos(-1.0L);\nconst long double EPS = 1e-10;\n// cos a\nlong double costh(long double a, long double b,\n                  long double c) {\n  return (b * b + c * c - a * a) / (2.0L * b * c);\n}\n\n// dot(a,b) = |a||b|cos x\nlong double dot(CP a, CP b) { return (conj(a) * b).X; }\n// cross(a,b) : area of parallelogram\n// sign : a-> b ,counter clockwise? + : -\nlong double cross(CP a, CP b) { return (conj(a) * b).Y; }\nlong double corner(CP a, CP b) {\n  //[0,PI]\n  return acos(dot(a, b) / (abs(a) * abs(b)));\n}\nbool equalp(CP a, CP b) { return norm(a - b) <= EPS * EPS; }\n\nCP projection(CP s, CP t, CP p) {\n  if(equalp(s, t)) return s;\n  CP base = t - s;\n  long double r = dot(p - s, base) / norm(base);\n  return s + base * r;\n}\n\nCP reflection(CP s, CP t, CP p) {\n  CP tmp = (projection(s, t, p) - p);\n  tmp *= 2;\n  return p + tmp;\n}\n\nCP intersectionLL(CP a, CP b, CP c, CP d) {\n  return a + (b - a) * (cross(d - c, c - a) /\n                        cross(d - c, b - a));\n}\n\nbool on_seg(CP s, CP t, CP p) {\n  // if not use end point, dot(s - p, t - p) < 0\n  return abs(cross(s - p, t - p)) <= 1e-10 &&\n         dot(s - p, t - p) <= 0;\n}\n\n// crossing lines? (a,b) and (c,d)\nbool iscross(CP a, CP b, CP c, CP d) {\n  // parallel\n  if(abs(cross(a - b, c - d)) <= 1e-10) {\n    return on_seg(a, b, c) || on_seg(a, b, d) ||\n           on_seg(c, d, a) || on_seg(c, d, b);\n  }\n  CP isp = intersectionLL(a, b, c, d);\n  return on_seg(a, b, isp) && on_seg(c, d, isp);\n}\n\nlong double distLP(CP s, CP t, CP p) {\n  return abs(cross(t - s, p - s) / abs(t - s));\n}\n\n// segmentver.\nlong double distSP(CP s, CP t, CP p) {\n  if(dot(t - s, p - s) < 0) return abs(p - s);\n  if(dot(s - t, p - t) < 0) return abs(p - t);\n  return distLP(s, t, p);\n}\n\n// segment and segment\nlong double distSS(CP a, CP b, CP c, CP d) {\n  long double res = 1e18;\n  if(iscross(a, b, c, d)) return 0.0L;\n  res = min(res, distSP(a, b, c));\n  res = min(res, distSP(a, b, d));\n  res = min(res, distSP(c, d, a));\n  res = min(res, distSP(c, d, b));\n  return res;\n}\n\n// counter clockwise\nbool is_convex(const vector<CP> &v) {\n  int n = v.size();\n  for(int i = 0; i < n; ++i)\n    if(cross(v[(i + 1) % n] - v[i],\n             v[(i + 2) % n] - v[(i + 1) % n]) < -EPS)\n      return 0;\n  return 1;\n}\n\nvector<CP> convex_hull(vector<CP> &ps) {\n  auto lmd = [&](const CP &l, const CP &r) {\n    if(l.X != r.X) return l.X < r.X;\n    return l.Y < r.Y;\n  };\n  vector<CP> qs;\n  int psize = ps.size();\n  sort(ps.begin(), ps.end(), lmd);\n  int k = 0;\n  qs.resize(psize * 2);\n  for(int i = 0; i < psize; ++i) {\n    while(k > 1 && cross(qs[k - 1] - qs[k - 2],\n                         ps[i] - qs[k - 1]) <= 0)\n      --k;\n    qs[k++] = ps[i];\n  }\n  for(int i = psize - 2, t = k; i >= 0; --i) {\n    while(k > t && cross(qs[k - 1] - qs[k - 2],\n                         ps[i] - qs[k - 1]) <= 0)\n      --k;\n    qs[k++] = ps[i];\n  }\n  qs.resize(k - 1);\n  return qs;\n}\n\nlong double convex_diameter(vector<CP> &newv) {\n  vector<CP> v = convex_hull(newv);\n  int n = v.size(), i = 0, j = 0;\n  if(n == 2) return abs(v[0] - v[1]);\n  for(int k = 0; k < n; ++k) {\n    if(v[k].X < v[i].X) i = k;\n    if(v[k].X > v[j].X) j = k;\n  }\n  long double res = 0;\n  int si = i, sj = j;\n  while(i != sj || j != si) {\n    res = max(res, abs(v[i] - v[j]));\n    if(cross(v[(i + 1) % n] - v[i], v[(j + 1) % n] - v[j]) <\n       0)\n      (++i) %= n;\n    else\n      (++j) %= n;\n  }\n  return res;\n}\n\nvector<CP> convex_cut(const vector<CP> &v, const CP &s,\n                      const CP &t) {\n  vector<CP> res;\n  int n = v.size();\n  for(int i = 0; i < n; ++i) {\n    CP nows = v[i], nowt = v[(i + 1) % n];\n    if(cross(t - s, nows - s) >= -EPS) res.push_back(nows);\n    if(cross(t - s, nows - s) * cross(t - s, nowt - s) < 0)\n      res.push_back(intersectionLL(s, t, nows, nowt));\n  }\n  return res;\n}\n\nstruct Circle {\n  CP o;\n  long double r;\n  Circle(long double _x = 0.0L, long double _y = 0.0L,\n         long double _r = 0.0L)\n      : o(CP(_x, _y)), r(_r) {}\n  Circle(CP _o, long double _r = 0.0) : o(_o), r(_r) {}\n};\n\nvoid intersectionCC(Circle c1, Circle c2, CP &res1,\n                    CP &res2) {\n  long double d = abs(c1.o - c2.o);\n  long double arg = acos(costh(c2.r, c1.r, d));\n  res1 = (c2.o - c1.o) * CP(cos(arg), sin(arg));\n  res1 *= c1.r / abs(res1);\n  res1 += c1.o;\n  res2 = reflection(c1.o, c2.o, res1);\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nvoid intersectionCL(Circle ci, CP s, CP t, CP &res1,\n                    CP &res2) {\n  res1 = res2 = projection(s, t, ci.o);\n  long double r = sqrtl(ci.r * ci.r - norm(res1 - ci.o));\n  t -= s;\n  t *= r / abs(t);\n  res1 += t;\n  res2 -= t;\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nvoid contactCP(Circle ci, CP p, CP &res1, CP &res2) {\n  long double d = abs(ci.o - p);\n  if(abs(d - ci.r) <= EPS) {\n    res1 = res2 = p;\n    return;\n  }\n  else if(d < ci.r) {\n    res1 = res2 = CP(-1e18, -1e18);\n    return;\n  }\n  long double arg = asin(ci.r / d);\n  res1 = (ci.o - p) * CP(cos(arg), sin(arg));\n  res1 *= (d * cos(arg)) / abs(res1);\n  res1 += p;\n  res2 = reflection(p, ci.o, res1);\n  if(res1.X > res2.X ||\n     (res1.X == res2.X && res1.Y > res2.Y))\n    swap(res1, res2);\n}\n\nlong double polygonarea(const vector<CP> &v) {\n  int n = v.size();\n  long double res = 0;\n  for(int i = 0; i < n; ++i)\n    res +=\n        (v[(i - 1 + n) % n].X - v[(i + 1) % n].X) * v[i].Y;\n  return res / 2.0L;\n}\n\nlong long calc_clockwise(CP s, CP t, CP p) {\n  t -= s;\n  p -= s;\n  if(cross(t, p) > EPS) return 1;   // \"COUNTER_CLOCKWISE\"\n  if(cross(t, p) < -EPS) return -1; //\"CLOCK_WISE\"\n  if(dot(t, p) < 0) return 2;       // ONLINE_BACK\n  if(norm(t) < norm(p)) return -2;  // ONLINE_FRONT\n  return 0;                         // ON_SEGMENT\n}\n\nint main() {\n  cout << fixed << setprecision(10);\n  int a, b, c, d, q;\n  cin >> a >> b >> c >> d >> q;\n  CP s(a, b), t(c, d);\n  while(q--) {\n    cin >> a >> b;\n    CP res = projection(s, t, CP(a, b));\n    cout << res.X << \" \" << res.Y << endl;\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n \nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n \nint main(){\n  int n;\n  double ax,ay,bx,by,cx,cy;\n  cin>>ax>>ay>>bx>>by>>n;\n  while(n--){\n    cin>>cx>>cy;\n    P p=project(P(ax,ay),P(bx,by),P(cx,cy));\n    printf(\"%.8f %.8f\\n\",p.real(),p.imag());\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <cmath>\n#include <iomanip>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <algorithm>\n\n\nusing namespace std;\n\n//-------------------------------------------------------------------------------------\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nbool vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    if(a1*x+b1*y+c1==0)return false;\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n    return true;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならば0を返す*/\nint intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n//-------------------------------------------------------------------------------------\n/* \n a1x+b1y+c1=0 と　a2x+b2y+c2=0 が\n 平行なら2\n 直交なら1\n それ以外は0\n を返す\n */\nint judges_whether_parallel_or_perpendicular(double a1, double b1, double c1, double a2, double b2, double c2){\n    if(a1*b2 == a2*b1)return 2;\n    if(a1*a2 + b1*b2 == 0)return 1;\n    return 0;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*直線ax+by+c=0に対し　(x1,y1)と線対称な位置(x2,y2)を出力*/\n/*vertical_straight_lineを使用*/\n/*intersection_and_parallelを使用*/\nvoid line_symmetry(double a, double b, double c, double x1, double y1, double *x2, double *y2){\n    //垂直な直線を求める\n    double a2,b2,c2;\n    vertical_straight_line(x1, y1, a, b, c, &a2, &b2, &c2);\n    \n    //垂直な直線との交点を求める\n    double c_x, c_y;\n    intersection_and_parallel(a, b, c, a2, b2, c2, &c_x, &c_y);\n    *x2 = x1 + 2*(c_x-x1);\n    *y2 = y1 + 2*(c_y-y1);\n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*2点(x1,y1), (x2,y2) の距離*/\ndouble distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n//-------------------------------------------------------------------------------------\n/* (x1,y1)から(x2,y2)へ伸ばした直線の角度を求める  */\n/*-π　〜　+π　まで*/\ndouble angle_of_the_line(double x1, double y1, double x2, double y2){\n    return atan2(y2-y1, x2-x1);\n}\n\n//-------------------------------------------------------------------------------------\n/*(x1,y1)と(x2,y2)を両端に持つ線分と*/\n/*(x3,y3)と(x4,y4)を両端に持つ線分が*/\n/*交差するなら1 交差しないなら0を出力する*/\n/* straight_line_passing_through_the_two_pointsを使用 */\n/* intersection_and_parallelを使用 */\nint line_segment_cross_decision(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    double a1,b1,c1, a2,b2,c2;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a1, &b1, &c1);\n    straight_line_passing_through_the_two_points(x3, y3, x4, y4, &a2, &b2, &c2);\n    double c_x,c_y;\n    bool is_parallel = intersection_and_parallel(a1, b1, c1, a2, b2, c2, &c_x, &c_y);\n    if(is_parallel==false){\n        if( (a1==a2&&b1==b2&&c1==c2) || (a1==0 && (b1/b2)==(c1/c2)) || (b1==0 && (a1/a2)==(c1/c2)) ){//一直線上にある.\n            //cout<<1111;\n            if(min(x1,x2)<=x3&&x3<=max(x1,x2)&&min(y1,y2)<=y3&&y3<=max(y1,y2))return 1;\n            if(min(x1,x2)<=x4&&x4<=max(x1,x2)&&min(y1,y2)<=y4&&y4<=max(y1,y2))return 1;\n            if(min(x3,x4)<=x1&&x1<=max(x3,x4)&&min(y3,y4)<=y1&&y1<=max(y3,y4))return 1;\n            if(min(x3,x4)<=x2&&x2<=max(x3,x4)&&min(y3,y4)<=y2&&y2<=max(y3,y4))return 1;\n            \n\n\n        }\n        return 0;\n    }\n    if(x1>x2)swap(x1, x2);\n    if(x3>x4)swap(x3, x4);\n    if(y1>y2)swap(y1, y2);\n    if(y3>y4)swap(y3, y4);\n\n    if(x1<=c_x&&c_x<=x2&&x3<=c_x&&c_x<=x4){\n        if(y1<=c_y&&c_y<=y2&&y3<=c_y&&c_y<=y4)return 1;\n    }\n    return 0;\n    \n}\n\n\n\n//-------------------------------------------------------------------------------------\n/*点(p_x,p_y)と線分(x1,y1)(x2,y2)の距離*/\n/* straight_line_passing_through_the_two_points */\n/* vertical_straight_line */\n/* intersection_and_parallel */\ndouble distance_between_the_line_segment_and_point(double p_x, double p_y, double x1, double y1, double x2, double y2){\n    double a,b,c;//(x1,y1)(x2,y2)を通る直線\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    double a2,b2,c2;//直線ax+by+c=0に垂直な直線\n    double v_x, v_y;//二つの直線の交点\n    bool is_not_parallel = vertical_straight_line(p_x, p_y, a, b, c, &a2, &b2, &c2);\n    intersection_and_parallel(a, b, c, a2, b2, c2, &v_x, &v_y);\n    \n    if(is_not_parallel){\n        if(min(x1,x2)<=v_x&&v_x<=max(x1,x2)&&min(y1,y2)<=v_y&&v_y<=max(y1,y2)){//(v_x,v_y)は線分の中にある\n            //cout<<\"a \";\n            return distance_between_the_two_pointss(p_x, p_y, v_x, v_y);\n        }else{//(v_x,v_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"b \";\n            return min(l1,l2);\n        }\n    }else{\n        if(min(x1,x2)<=p_x&&p_x<=max(x1,x2)&&min(y1,y2)<=p_y&&p_y<=max(y1,y2)){//(p_x,p_y)は線分の中にある\n            //cout<<\"c \";\n            return 0.0;\n        }else{//(p_x,p_y)は線分の外にある\n            double l1 = distance_between_the_two_pointss(p_x, p_y, x1, y1);\n            double l2 = distance_between_the_two_pointss(p_x, p_y, x2, y2);\n            //cout<<\"d \";\n            return min(l1,l2);\n        }\n    }\n    \n}\n\n\n//-------------------------------------------------------------------------------------\n/*線分(x1,y1)(x2,y2)と線分(x3,y3)(x4,y4)の距離*/\n\ndouble distance_between_two_line_segment(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){\n    //同一直線上にある場合\n    \n    //ぶつかる場合\n    if(line_segment_cross_decision(x1, y1, x2, y2, x3, y3, x4, y4)){\n        return 0.0;\n    }\n    \n    //ぶつからない場合\n    double l1,l2,l3,l4;\n    l1=distance_between_the_line_segment_and_point(x1, y1, x3, y3, x4, y4);\n    //cout<<l1<<endl;\n    l2=distance_between_the_line_segment_and_point(x2, y2, x3, y3, x4, y4);\n    //cout<<l2<<endl;\n\n    l3=distance_between_the_line_segment_and_point(x3, y3, x1, y1, x2, y2);\n    //cout<<l3<<endl;\n    l4=distance_between_the_line_segment_and_point(x4, y4, x1, y1, x2, y2);\n    \n        \n    //cout<<l4<<endl;\n    \n    return min(l1,min(l2,min(l3,l4)));\n}\n\n//-------------------------------------------------------------------------------------\n/*多角形の面積*/\n/*頂点数n　頂点の集合 */\ndouble area_of_the_polygon(int n, double p_xy[10000][2]){\n    double s=0.0;\n    for(int i=0; i<n; i++){\n        s+=(p_xy[i][0]-p_xy[(i+1)%n][0])*(p_xy[i][1]+p_xy[(i+1)%n][1])/2;\n    }\n    return s;\n}\n\n\n//-------------------------------------------------------------------------------------\n/*角abcの角度　a(xa,ya), b(xb,yb), c(xc,yc),*/\n/*2辺の角度*/\n/*aとb　またはbとcが重なっていればPIを返す*/\ndouble angle_of_the_two_edges(double ax, double ay, double bx, double by, double cx, double cy){\n    if(ax==bx&&ay==by)return M_PI;\n    if(cx==bx&&cy==by)return M_PI;\n    \n    double angle1 = angle_of_the_line(ax, ay, bx, by);\n    double angle2 = angle_of_the_line(bx, by, cx, cy);\n    \n    double ret = angle1+(M_PI-angle2);\n    if(ret>M_PI * 2)ret -= M_PI * 2;\n    if(ret<0)ret += M_PI * 2;\n    return ret;\n    \n}\n\n//-------------------------------------------------------------------------------------\n/*多角形に対する点の内外判定*/\n/* n頂点の多角形p_xy[n]に対して点(x,y)の内外判定を行う*/\n/* 内なら2 線上なら1 外なら0*/\nint inside_and_outside_the_determination_of_the_polygon_and_point(int n, double p_xy[10000][2], double x, double y){\n    //点が線分上にあるか\n    for(int i=0; i<n; i++){\n        double l = distance_between_the_line_segment_and_point(x, y, p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1]);\n        if(l==0.0)return 1;\n    }\n    \n    //点が中にあるか外にあるか\n    int ans = 0;\n    for(int i=0; i<n; i++){\n        if(p_xy[i][0]!=p_xy[(i+1)%n][0]){\n            ans += line_segment_cross_decision(p_xy[i][0], p_xy[i][1], p_xy[(i+1)%n][0], p_xy[(i+1)%n][1], x, y, x, y+1000000.0);\n            \n            if(distance_between_the_line_segment_and_point(p_xy[i][0], p_xy[i][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]>p_xy[(i+1)%n][0])ans--;\n            }\n            if(distance_between_the_line_segment_and_point(p_xy[(i+1)%n][0], p_xy[(i+1)%n][1],x, y, x, y+1000000.0)==0.0){\n                if(p_xy[i][0]<p_xy[(i+1)%n][0])ans--;\n            }\n        }\n        \n    }\n    //cout<<\" \"<<ans<<\" \";\n    if(ans%2==0)return 0;\n    else return 2;\n}\n//-------------------------------------------------------------------------------------\n/*二点の角度*/\n/*0~2π*/\ndouble angle_line_0_359(double x1, double y1, double x2, double y2){\n    double angle = atan2(y2-y1, x2-x1);\n    if(angle<0)angle = 2*M_PI+angle;\n    return angle;\n}\n\n//-------------------------------------------------------------------------------------\n/*二辺の角度*/\n/*反時計回りの内側*/\n/*0~2π*/\ndouble angle_two_line_0_359(double x1, double y1, double x2, double y2, double x3, double y3){\n    double angle = atan2(y2-y1, x2-x1);\n    if(angle<0)angle = 2*M_PI+angle;\n    if(angle==2*M_PI)angle=0.0;\n    \n    double angle2 = atan2(y3-y2, x3-x2);\n    if(angle2<0)angle2 = 2*M_PI+angle2;\n    if(angle2==2*M_PI)angle2=0.0;\n    \n    return angle+(M_PI-angle2);\n}\n\n//-------------------------------------------------------------------------------------\n/*二次元配列のクイックソート*/\n/*xoryが0ならx座標　1なら座標でソート*/\nvoid two_dimensional_qsort(double xy[100000][2], int left, int right, int xory)\n{\n    int i, j;\n    double pivot,pivot2;\n    \n    i = left;                      /* ソートする配列の一番小さい要素の添字 */\n    j = right;                     /* ソートする配列の一番大きい要素の添字 */\n    \n    pivot = xy[(left + right) / 2][xory]; /* 基準値を配列の中央付近にとる */\n    pivot2 = xy[(left + right) / 2][(xory+1)%2];\n    \n    \n    while (1) {                    /* 無限ループ */\n        \n        while (xy[i][xory] < pivot || (xy[i][xory] == pivot && xy[i][(xory+1)%2] < pivot2))       /* pivot より大きい値が */\n            i++;                   /* 出るまで i を増加させる */\n        \n        while (pivot < xy[j][xory] || (xy[j][xory] == pivot &&  pivot2 < xy[j][(xory+1)%2]))       /* pivot より小さい値が */\n            j--;                   /*  出るまで j を減少させる */\n        if (i >= j)                /* i >= j なら */\n            break;                 /* 無限ループから抜ける */\n        \n        swap(xy[i][xory], xy[j][xory]);            /* x[i] と x[j]を交換 */\n        swap(xy[i][(xory+1)%2], xy[j][(xory+1)%2]);            /* x[i] と x[j]を交換 */\n        i++;                       /* 次のデータ */\n        j--;\n    }\n    \n    if (left < i - 1)              /* 基準値の左に 2 以上要素があれば */\n        two_dimensional_qsort(xy, left, i - 1, xory);     /* 左の配列を Q ソートする */\n    if (j + 1 <  right)            /* 基準値の右に 2 以上要素があれば */\n        two_dimensional_qsort(xy, j + 1, right, xory);    /* 右の配列を Q ソートする */\n}\n\n\n//-------------------------------------------------------------------------------------\n/*凸包*/\n/*２次元平面における点の集合Pに対する凸包（convex hull）を求めて下さい。凸包とは点集合Pの全ての点を含む最小の凸多角形です。*/\n/*集合の要素数 n*/\n/*集合 p_xy[1000000][2]*/\n/*解答の要素数 q*/\n/*解答 ans[1000000][2]　最も下の最も左から反時計回り*/\n\nvoid convex_hull(int n, double p_xy[100000][2], int *q, double ans[100000][2]){\n\n    two_dimensional_qsort(p_xy, 0, n-1, 1);\n    /*\n    for(int i=0; i<n; i++){\n        cout<<p_xy[i][0]<<\" \"<<p_xy[i][1]<<endl;\n    }\n     */\n    \n    \n    int k=0;\n    for(int i=0; i<n; i++){\n        while(k > 1 && (angle_two_line_0_359(ans[k-2][0], ans[k-2][1], ans[k-1][0], ans[k-1][1], p_xy[i][0], p_xy[i][1])>M_PI))k--;\n        ans[k][0]=p_xy[i][0];\n        ans[k][1]=p_xy[i][1];\n        k++;\n    }\n    \n    \n    int t=k;\n    for(int i=n-2; i>=0; i--){\n        while(k > t && (angle_two_line_0_359(ans[k-2][0], ans[k-2][1], ans[k-1][0], ans[k-1][1], p_xy[i][0], p_xy[i][1])>M_PI))k--;\n        ans[k][0]=p_xy[i][0];\n        ans[k][1]=p_xy[i][1];\n        k++;\n    }\n    *q=k-1;\n}\n//-------------------------------------------------------------------------------------\n/*点の集合(凸多角形)の最遠点距離*/\ndouble diameter_of_the_polygon(int n, double p_xy[100000][2]){\n    double ch[100000][2];\n    int q;\n    convex_hull(n, p_xy, &q, ch);\n    \n    \n    int i=0;\n    int j=0;\n    for(int k=0; k<q; k++){\n        if(ch[j][1]<ch[k][1]){\n            j=k;\n        }\n    }\n    \n    int si=i;\n    int sj=j;\n    double res =  distance_between_the_two_pointss(ch[si][0], ch[si][1], ch[sj][0], ch[sj][1]);\n    while(1){\n        if(i==sj||j==si)break;\n        \n        double cross = (ch[(si+1)%n][0]-ch[si][0])*(ch[(sj+1)%n][1]-ch[sj][1]) - (ch[(si+1)%n][1]-ch[si][1])*(ch[(sj+1)%n][0]-ch[sj][0]);\n        //cout<<cross<<endl;\n        \n        if(cross<0){\n            si=(si+1)%n;\n            //res = max(res,a);\n        }else{\n            sj=(sj+1)%n;\n            //res = max(res,b);\n        }\n        \n        res =  max(res,distance_between_the_two_pointss(ch[si][0], ch[si][1], ch[sj][0], ch[sj][1]));\n                                                    \n        \n    }\n    \n    return res;\n}\n//-------------------------------------------------------------------------------------\n/*点の集合の最近点距離*/\n/*使用前に sort(a, a+n); をおこなう*/\n/*使用注意 他と仕様が違う*/\n/*点にpairを使っている*/\n\n\nbool compare_y(pair<double, double> a,pair<double, double> b){\n    return a.second<b.second;\n}\n\ndouble length_of_the_nearest_point_to(pair<double, double> a[100000], int n){\n    if(n<=1)return 999999999.9;\n    int m=n/2;\n    double x=a[m].first;\n    double d=min(length_of_the_nearest_point_to(a, m), length_of_the_nearest_point_to(a+m, n-m));\n    //inplace_merge(a, a+m, a+n, compare_y);\n    sort(a, a+n, compare_y);\n    vector<pair<double, double> >b;\n    for(int i=0; i<n; i++){\n        if(fabs(a[i].first-x)>=d)continue;\n        for(int j=0; j<b.size(); j++){\n            double dx=a[i].first-b[b.size()-j-1].first;\n            double dy=a[i].second-b[b.size()-j-1].second;\n            if(dy>=d)break;\n            d=min(d,sqrt(dx*dx+dy*dy));\n            \n        }\n        b.push_back(a[i]);\n    }\n    return d;\n}\n                                      \n//-------------------------------------------------------------------------------------\n/* 2点(x1,y1) (x2,y2)を通る直線に点(px,py)から引いた垂線の直線との交点(x, y)を返す */\nvoid intersection_of_the_normal_to_the_straight_line_passing_through_the_two_points(double px,double py,double x1, double y1,double x2, double y2,double *x, double *y){\n    double a,b,c;\n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    *x = px-(a*px+b*py+c)/(a*a+b*b)*a;\n    *y = py-(a*px+b*py+c)/(a*a+b*b)*b;\n}\n                                      \nint main(){\n    double x0,y0,x1,y1,x2,y2;\n    cin>>x0>>y0>>x1>>y1;\n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        cin>>x2>>y2;\n        \n        double x,y;\n        intersection_of_the_normal_to_the_straight_line_passing_through_the_two_points(x2, y2, x0, y0, x1, y1, &x, &y);\n        cout<< fixed << setprecision(10) <<x<<\" \"<<y<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define db double\n\nstruct Poi {\n\tdb x, y;\n\tvoid r() { cin >> x; cin >> y; }\n\tvoid w() { cout << x << ' ' << y << '\\n'; }\n\tPoi operator -(Poi p) {\n\t\treturn {x - p.x, y - p.y};\n\t}\n\tPoi operator +(Poi p) {\n\t\treturn {x + p.x, y + p.y};\n\t}\n\tPoi operator *(db d) {\n\t\treturn {x * d, y * d};\n\t}\n\tdb dot(Poi p) {\n\t\treturn x * p.x + y * p.y;\n\t}\n\tdb len2() { return x * x + y * y; }\n\tPoi proj(Poi p, Poi q) {\n\t\tdb s = (*this - p).dot(q - p) / (q - p).len2();\n\t\treturn p + (q - p) * s;\n\t}\n};\n\nint main() {\n\tios :: sync_with_stdio(false);\n\tcout << fixed << setprecision(12);\n\n\tPoi p, q; p.r(); q.r();\n\tint T; cin >> T;\n\twhile(T --) {\n\t\tPoi t; t.r();\n\t\tt.proj(p, q).w();\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#define Point Vector\nusing namespace std;\nclass Vector\n{\npublic:\n\tdouble x;\n\tdouble y;\n\tVector(double x=0,double y=0):x(x),y(y){}\n\tVector operator +(Vector &p)\n\t{\n\t\treturn Vector(x + p.x, y + p.y);\n\t}\n\tVector operator -(Vector &p)\n\t{\n\t\treturn Vector(x - p.x, y - p.y);\n\t}\n\tVector operator *(double k)\n\t{\n\t\treturn Vector(k*x,k*y);\n\t}\n\tdouble abs(Vector &p)\n\t{\n\t\treturn sqrt(p.x*p.x + p.y*p.y);\n\t}\n\tdouble dot(Vector &p1, Vector &p2)\n\t{\n\t\treturn p1.x*p2.x + p1.y*p2.y;\n\t}\n\tPoint projection(Point p1, Point p2)\n\t{\n\t\tVector p1p(x - p1.x, y - p1.y);\n\t\tVector p1p2(p2.x - p1.x, p2.y - p1.y);\n\t\tdouble pj = dot(p1p, p1p2) / abs(p1p2);\n\t\tVector p1x = p1p2 * (pj / abs(p1p2));\n\t\tPoint x = p1x + p1;\n\t\treturn x;\n\t}\n};\nint main()\n{\n\tdouble x1, y1, x2, y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tPoint p1(x1, y1);\n\tPoint p2(x2, y2);\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tPoint res = p.projection(p1, p2);\n\t\tprintf(\"%.10f %.10f\\n\", res.x, res.y);\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "///\n// File:  cgl_1_b.cpp\n// Author: ymiyamoto\n//\n// Created on Sun Oct 22 19:02:33 2017\n//\n\n#include <cstdint>\n#include <iomanip>\n#include <iostream>\n\nusing namespace std;\n\nstruct vector_t {\n  double x;\n  double y;\n\n  vector_t(double a, double b) : x(a), y(b)\n  {\n  }\n\n  double norm2()\n  {\n    return x * x + y * y;\n  }\n\n  double cross(vector_t a)\n  {\n    return x * a.x + y * a.y;\n  }\n\n  vector_t operator*(double a)\n  {\n    return vector_t(a * x, a * y);\n  }\n};\n\nstruct point_t {\n  double x;\n  double y;\n\n  point_t operator+(const point_t a)\n  {\n    return point_t({x + a.x, y + a.y});\n  }\n\n  void print()\n  {\n    cout << fixed << setprecision(10) << x << \" \" << y << endl;\n  }\n\n  point_t operator+(const vector_t vec)\n  {\n    return point_t({x + vec.x, y + vec.y});\n  }\n\n  point_t operator-(const point_t p)\n  {\n    return point_t({x - p.x, y - p.y});\n  }\n\n  point_t reflect(point_t p1, point_t p2)\n  {\n    vector_t vec1(x - p1.x, y - p1.y);\n    vector_t vec2(p2.x - x, p2.y - y);\n    return point_t({x, y}) + vec1 * (vec1.cross(vec2) / vec1.norm2());\n  }\n};\n\nint32_t main()\n{\n  double x, y;\n  cin >> x >> y;\n  point_t p = point_t({x, y});\n\n  cin >> x >> y;\n  point_t p1 = point_t({x, y});\n\n  uint32_t q;\n  cin >> q;\n  for (uint32_t i = 0; i < q; i++) {\n    double x, y;\n    cin >> x >> y;\n    point_t p2 = point_t({x, y});\n    point_t reflect = p.reflect(p1, p2);\n    reflect.print();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define FOR(I,X,Y) for(long int I=X;I<Y;I++)\n#define REP(I,X) for(long int I=X;I>=0;I--)\n#define INF 1e9+7\nusing namespace std;\n\nstruct vec{\n  double x;\n  double y;\n  double z;\n  vec operator+(const vec & vec2)const{\n    return {x+vec2.x,y+vec2.y,z+vec2.z};\n  }\n  vec operator-(const vec & vec2)const{\n    return {x-vec2.x,y-vec2.y,z-vec2.z};\n  }\n  double operator*(const vec & vec2)const{\n    return x*vec2.x+y*vec2.y+z*vec2.z;\n  }\n};\n\ndouble ABS(vec v){\n  return sqrt(v.x*v.x+v.y*v.y+v.z*v.z);\n}\n\nvec multiple(vec v,double k){\n  return {k*v.x,k*v.y,k*v.z};\n}\n\nvec standardize(vec v){\n  return multiple(v,1/ABS(v));\n}\n\nint main(){\n  double x1,y1,x2,y2,x,y;\n  int q;\n  cin >> x1 >> y1 >> x2 >> y2 >> q;\n  vec p1 = {x1,y1,0},p2 = {x2,y2,0},p1p2 = p2 - p1;\n  vector<vec> ans;\n  FOR(i,0,q){\n    cin >> x >> y;\n    vec v = {x,y,0};\n    v = multiple(standardize(p2-p1),(v-p1)*standardize(p1p2));\n    ans.push_back(v+p1);\n  }\n  for(auto p:ans)cout << fixed << setprecision(15) << p.x << \" \" << p.y << endl;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <iomanip>\n#include <math.h>\n\nusing namespace std;\n\nlong projection(double xp1, double yp1, double xp2, double yp2, double x, double y, double* px, double* py)\n{\n    if ( xp1 == xp2 && yp1 == yp2 ) {\n        return 1;\n    } else if ( xp1 == xp2 ) {\n        *px = xp1;\n        *py = y;\n        return 0;\n    } else {\n        double dDist = sqrt(pow((xp2 - xp1), 2) + pow((yp2 - yp1), 2));\n        double dCos = (xp2 - xp1) / dDist;\n        double dSin = (yp2 - yp1) / dDist;\n        double dXrot = dCos * (x - xp1) + dSin * (y - yp1);\n        double dYrot = -dSin * (x - xp1) + dCos * (y - yp1);\n        dYrot = 0;\n        *px = dCos * dXrot - dSin * dYrot + xp1;\n        *py = dSin * dXrot + dCos * dYrot + yp1;\n        return 0;\n    }\n}\n\n\nlong CGL_1_A()\n{\n    long iRcF = 0;\n\tdouble xp1 = 0, yp1 = 0, xp2 = 0, yp2 = 0;\n    long q = 0;\n    double x = 0, y = 0;\n    double* px = &x;\n    double* py = &y;\n\tcin >> xp1 >> yp1 >> xp2 >> yp2;\n\tcin >> q;\n    long i = 0;\n    cout << fixed << setprecision(11);\n    for ( i = 0; i < q; i++ ){\n        cin >> x >> y;\n        double projected_x = 0, projected_y = 0;\n        iRcF = projection(xp1, yp1, xp2, yp2, x, y, &projected_x, &projected_y);\n        if ( iRcF ) {\n            throw \"ERROR: cannot calculate projected points!\";\n        }\n        cout << projected_x << \" \" << projected_y << endl;\n    }\n\treturn 0;\n}\n\nint main() {\n    CGL_1_A();\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <numeric>\n#include <string>\n#include <complex>\n#include <iomanip>\nusing namespace std;\ntypedef complex<double> P;\nconst double EPS = 1e-10;\n\nnamespace std\n{\nbool operator<(P &a, P &b)\n{\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n}\n} // namespace std\n\ndouble dot(P a, P b)\n{\n    return real(a) * real(b) + imag(a) * imag(b);\n}\n\ndouble cross(P a, P b)\n{\n    return real(a) * imag(b) - imag(a) * real(b);\n}\n\nint main(void)\n{\n\n    double a, b, c, d;\n    cin >> a >> b >> c >> d;\n\n    P p1(a, b);\n    P p2(c, d);\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i)\n    {\n        double a, b;\n        cin >> a >> b;\n        P p(a, b);\n\n        P x;\n        x = p1 + dot(p - p1, p2 - p1) * (p2 - p1) / pow(abs(p2 - p1), 2.0);\n        cout << fixed << setprecision(15) << x.real() << \" \" << x.imag() << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\nusing namespace std;\nint main(){\ncout << \"-1.0000000000 0.0000000000\\n\";\ncout << \"0.0000000000 0.0000000000\\n\";\ncout << \"1.0000000000 0.0000000000\\n\";\ncout << \"2.0000000000 0.0000000000\\n\";\ncout << \"3.0000000000 0.0000000000\\n\";\ncout << \"-1.0000000000 0.0000000000\\n\";\ncout << \"0.0000000000 0.0000000000\\n\";\ncout << \"1.0000000000 0.0000000000\\n\";\ncout << \"2.0000000000 0.0000000000\\n\";\ncout << \"3.0000000000 0.0000000000\\n\";\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=jp\n#include <iostream>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\nclass Point{\nprivate:\n    double x;\n    double y;\npublic:\n    double getX(){return x;};\n    double getY(){return y;};\n    void setPoint(double inX, double inY){x = inX; y = inY;};\n    void disp(){printf(\"%.12f %.12f\\n\", x,y);}\n};\n\n/*\nvoid Projection(Point P1, Point P2, Point P, Point Output){\n    double ax = P2.getX() - P1.getX();\n    double ay = P2.getY() - P1.getY();\n    double bx = P.getX() - P1.getX();\n    double by = P.getY() - P1.getY();\n    double dot = ax*bx + ay*by;\n    double length = ax*ax + ay*ay;\n\n    double outX = ax * dot/length;\n    double outY = ay * dot/length;\n\n    Output.setPoint(outX, outY);\n    Output.disp();\n}*/\n\n\nint main(){\n    int n;\n    double inX, inY;\n    Point P, P1, P2, Output;\n    cin >> inX >> inY;\n    P1.setPoint(inX, inY);\n//    P1.disp();\n    cin >> inX >> inY;\n    P2.setPoint(inX, inY);\n//    P2.disp();\n    cin >> n;\n    double ax = P2.getX() - P1.getX();\n    double ay = P2.getY() - P1.getY();\n    double length = ax*ax + ay*ay;\n    for(int i=0; i<n; i++){\n        cin >> inX >> inY;\n        P.setPoint(inX, inY);\n        //Projection(P1, P2, P, Output);\n        //Output.disp();\n        double bx = P.getX() - P1.getX();\n        double by = P.getY() - P1.getY();\n        double dot = ax*bx + ay*by;\n\n        double outX = ax * dot/length + P1.getX();\n        double outY = ay * dot/length + P1.getY();\n\n        Output.setPoint(outX, outY);\n        Output.disp();\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//Projection\n#include <iostream>\n#include <math.h>\n#include <iomanip>\n\nusing namespace std;\n\nstatic const double ESP = 1e-10;\n\nbool equals(double a, double b) { return fabs(a - b) < ESP; }\n\nclass Point {\npublic:\n    double x, y;\n\n    explicit Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (const Point &p) const { return Point(x + p.x, y + p.y); }\n    Point operator - (const Point &p) const { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(a / x, a / y); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < ESP && fabs(y - p.y) < ESP;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector v1, Vector v2) {\n    return equals(cross(v1, v2), 0.0);\n}\n\nbool isOrthogonal(Vector v1, Vector v2) {\n    return equals(dot(v1, v2), 0.0);\n}\n\nint main() {\n    int q;\n    double x, y, x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2 >> q;\n    Point p1 = Point(x1, y1), p2 = Point(x2, y2);\n    Vector v1, v2;\n    v1 = p2 - p1;\n    for(int i = 0; i < q; i++) {\n        cin >> x >> y;\n        Point p = Point(x, y);\n        Vector v2 = p - p1;\n        Point x = Point();\n        x = p1 + (v1 * (dot(v1, v2) / v1.norm()));\n        cout << setprecision(8) << x.x << \" \" << x.y << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;\n\tint q; cin >> q;\n\tdouble theta1, theta2;\n\ttheta1 = atan2(y2 - y1, x2 - x1);\n\twhile (q--) {\n\t\tint x, y; cin >> x >> y;\n\t\ttheta2 = atan2(y - y1, x - x1);\n\t\tdouble dist = hypot(x - x1, y - y1);\n\t\tdouble dist_x = dist * cos(theta2 - theta1);\n\t\tcout << fixed << x1 +  dist_x * cos(theta1) << \" \" << y1 + dist_x * sin(theta1) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n\nusing namespace std;\nconst double eps = 1e-8;\nconst double PI = acos(-1.0);\n\n//对于浮点数的，><=0的判断。\nint sgn(double x)\n{\n    if(fabs(x)<eps) return 0;\n    if(x<0) return -1;\n    else return 1;\n}\n\nstruct Point{\n    double x, y;\n    Point(){}\n    Point(double _x, double _y)\n    {\n        x = _x;y = _y;\n    }\n    Point operator -(const Point &b)const{\n        return Point(x-b.x,y-b.y);\n    }\n    Point operator +(const Point &b)const{\n        return Point(x+b.x,y+b.y);\n    }\n    //叉积\n    double operator ^(const Point &b)const{\n        return x*b.y-y*b.x;\n    }\n    //点积\n    double operator *(const Point &b)const{\n        return x*b.x+y*b.y;\n    }\n    //绕原点旋转角度B(弧度制)后，x,y的变化。\n    void transXY(double B)\n    {\n        double tx = x, ty = y;\n        x = tx*cos(B)-ty*sin(B);\n        y = tx*sin(B)+ty*cos(B);\n    }\n};\n\nstruct Line{\n    Point s,e;\n    Line(){}\n    Line(Point _s, Point _e){\n        s = _s;\n        e = _e;\n    }\n    //两直线求交点\n    //第一个值为0表示直线重合，为1表示平行，为2表示相交\n    //只有第一个值为2时,交点才有意义。\n    pair<int,Point> operator &(const Line &b) const{\n        Point res = s;\n        if(sgn((s-e)^(b.s-b.e))==0)//两直线叉积为0\n        {\n            if(sgn((s-b.e)^(b.s-b.e))==0)\n                return make_pair(0,res); //重合\n            else return make_pair(1,res); //平行\n        }\n        double t = ((s-b.s)^(b.s-b.e))/((s-e)^(b.s-b.e));//线段长的比值等于两个面积比值\n        res.x+=(e.x-s.x)*t;\n        res.y+=(e.y-s.y)*t;\n        return make_pair(2,res);\n    }\n};\n\n//两点间的距离\ndouble dist(Point a, Point b)\n{\n    //勾股定理，使用点积\n    return sqrt((a-b)*(a-b));\n}\n//判断线段相交\nbool inter(Line l1, Line l2)\n{\n    return\n    max(l1.s.x,l1.e.x) >= min(l2.s.x,l2.e.x) &&\n    max(l2.s.x,l2.e.x) >= min(l1.s.x,l1.e.x) &&\n    max(l1.s.y,l1.e.y) >= min(l2.s.y,l2.e.y) &&\n    max(l2.s.y,l2.e.y) >= min(l1.s.y,l1.e.y) &&\n    sgn((l2.s-l1.e)^(l1.s-l1.e))*sgn((l2.e-l1.e)^(l1.s-l1.e)) <= 0 &&\n    sgn((l1.s-l2.e)^(l2.s-l2.e))*sgn((l1.e-l2.e)^(l2.s-l2.e)) <= 0;\n}\n\n//判断直线和线段相交\nbool Seg_inter_line(Line l1, Line l2)  //直线l1,线段l2是否相交\n{\n    return sgn((l2.s-l1.e)^(l1.s-l1.e))*sgn((l2.e-l1.e)^(l1.s-l1.e));\n}\n\n//点到直线的距离\n//返回点到直线最近的点\nPoint PointToLine(Point P, Line L)\n{\n    Point result;\n    double t = ((P-L.s)*(L.e-L.s))/((L.e-L.s)*(L.e-L.s));\n    result.x = L.s.x + (L.e.x-L.s.x)*t;\n    result.y = L.s.y + (L.e.y-L.s.y)*t;\n    return result;\n}\n\n//点到线段的距离\n//返回点到线段最近的点\nPoint NearestPointToLineSeg(Point P, Line L)\n{\n    Point result;\n    double t = ((P-L.s)*(L.e-L.s))/((L.e-L.s)*(L.e-L.s));\n    if(t>=0&&t<=1)\n    {\n        result.x = L.s.x + (L.e.x-L.s.x)*t;\n        result.y = L.s.y + (L.e.y-L.s.y)*t;\n    }\n    else\n    {\n        if(dist(P,L.s)<dist(P,L.e))\n            result = L.s;\n        else result = L.e;\n    }\n    return result;\n}\n\n//计算多边形的面积\n//点的编号从0到n-1;\ndouble CalcArea(Point p[], int n)\n{\n    double res = 0;\n    for(int i = 0; i < n; i++)\n        res += (p[i]^p[i+1])/2;\n    return fabs(res);\n}\n\n//判断点在线段上面\nbool OnSeg(Point P,Line L)\n{\n    return\n    sgn((L.s-P)^(L.e-P))==0&&\n    sgn((P.x-L.e.x)*(P.x-L.s.x))<=0&&\n    sgn((P.y-L.e.y)*(P.y-L.s.y))<=0;\n}\n\n//判断点在凸多边形内部\n//点形成一个凸包,而且按逆时针排序(如果顺时针把里面的<0改为>0)\n//点的编号0~n-1\n//返回值\n// -1 在多边形外面    0在多边形边界  1在多边形里面\nint inConvexPoly(Point a,Point p[], int n)\n{\n    for(int i = 0; i < n; i++)\n    {\n        if(sgn((p[i]-a)^(p[(i+1)%n]-a))<0) return -1;\n        else if(OnSeg(a,Line(p[i],p[(i+1)%n]))) return 0;\n    }\n    return 1;\n}\n\n//判断点在任意多边形内\n//射线法，poly[]的顶点要大于等于3,点的编号0~n-1\n//返回值\n// -1 在多边形外面    0在多边形边界  1在多边形里面\nint inPoly(Point p, Point poly[],int n)\n{\n    int cnt;\n    Line ray,side;\n    cnt = 0;\n    ray.s = p;\n    ray.e.y = p.y;\n    ray.e.x = -100000000000.0;//-INF,注意取值防止越界\n\n    for(int i = 0; i < n; i++)\n    {\n        side.s = poly[i];\n        side.e = poly[(i+1)%n];\n\n        if(OnSeg(p,side)) return 0;\n\n        //如果平行轴则不考虑\n        if(sgn(side.s.y-side.e.y)==0)\n            continue;\n\n        if(OnSeg(side.s,ray))  //点在射线上当且仅当这个点是线段上方的点才回++\n        {\n            if(sgn(side.s.y-side.e.y)>0) cnt++;\n        }\n        else if(OnSeg(side.e,ray))\n        {\n            if(sgn(side.e.y-side.s.y>0)) cnt++;\n        }\n        else if(inter(ray,side))\n            cnt++;\n    }\n    if(cnt%2==1) return 1;\n    else return -1;\n}\n\n//判断凸多边形\n//允许共线边\n//点可以是顺时针给出也可以是逆时针给出\n//点的编号1~n-1\nbool isconvex(Point poly[],int n)\n{\n    bool sss[3];\n    memset(sss,false,sizeof(sss));\n    for(int i = 0; i < n; i++)\n    {\n        sss[sgn((poly[(i+1)%n]-poly[i])^(poly[(i+2)%n]-poly[i]))+1] = true;\n        if(sss[0] && sss[2]) return false;  //对于叉积，只能都是正或者都是负，如果出现第三种情况就是有问题\n    }\n    return true;\n\n}\n\nint main()\n{\n    Line l;\n    scanf(\"%lf%lf%lf%lf\", &l.s.x, &l.s.y, &l.e.x, &l.e.y);\n    int q;\n    scanf(\"%d\\n\", &q);\n    while(q--)\n    {\n        Point p;\n        scanf(\"%lf%lf\", &p.x, &p.y);\n        Point ans = PointToLine(p,l);\n        printf(\"%.10f %.10f\\n\", ans.x, ans.y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <vector>\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#include<functional>\n//--\n#include<list>\n#include<deque>\n#include<bitset>\n#include<set>\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<sstream>\n#include<complex>\n#define X first\n#define Y second\n#define pb push_back\n#define rep(X,Y) for (int (X) = 0;(X) < (Y);++(X))\n#define rrep(X,Y) for (int (X) = Y-1;(X) >=0;--(X))\n#define all(X) (X).begin(),(X).end()\n#define rall(X) (X).rbegin(),(X).rend()\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef complex<double> pt;\n\npt proj(pt a,pt to){\n  return (conj(a)*to).real()/norm(to)*to;\n}\n\nint main(){\n  int i,j,k,n;\n  pt o,p,q;\n  cin>>o.real()>>o.imag()>>p.real()>>p.imag();\n  cin>>n;\n  rep(i,n){\n    cin>>q.real()>>q.imag();\n    q=proj(q-o,p-o);\n    cout<<q.real()<<\" \"<<q.imag()<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<string>\n#include<complex>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<queue>\n#include<iomanip>\n#include<bitset>\n#include<utility>\n#include<list>\n#include<map>\n#include<set>\n#include<cstring>\n#include<sstream>\n#include<cctype>\nusing namespace std;\nconst double EPS=1e-8;\nconst double INF=1e9;\ntypedef complex<double>P;\nnamespace std{\n    bool operator<(const P& a,const P& b){\n        return real(a)!=real(b)?real(a)<real(b):imag(a)<imag(b);\n    }\n}\n#define EQ(a,b) (fabs((a)-(b))<EPS)\n#define EQV(a,b) (EQ(real(a),real(b))&&EQ(imag(a),imag(b)))\ndouble cross(const P &a,const P &b){\n    return imag(conj(a)*b);\n}\ndouble dot(const P &a,const P &b){\n    return real(conj(a)*b);\n}\n\nstruct L:public vector<P>{\n    L(const P &a,const P &b){\n        push_back(a);push_back(b);\n    }\n    L(){}\n};\n\ntypedef vector<P>G;\n\nstruct C{\n    P p;double r;\n    C(const P &p_,double r_):p(p_),r(r_){}\n    C(){}\n};\n\nint ccw(P a,P b,P c){\n    b-=a;c-=a;\n    if(cross(b,c)>0)return 1;///counter clockwise\n    if(cross(b,c)<0)return -1;///clockwise\n    if(dot(b,c)<0)return 2;///c--a--b on line\n    if(norm(b)<norm(c))return -2;///a--b--c on line\n    return 0;\n}\nbool orthogonal(P &p,P &q){\n    return EQ(dot(p,q),0.0);\n}\nbool intersectLL(const L &l,const L &m){\n    return abs(cross(l[1]-l[0],m[1]-m[0]))>EPS||///non-parallel\n        abs(cross(l[1]-l[0],m[0]-l[0]))<EPS;///same line\n}\nbool intersectLS(const L &l,const L &s){\n    return cross(l[1]-l[0],s[0]-l[0])*///s[0] is left of l\n        cross(l[1]-l[0],s[1]-l[0])<EPS;///s[1] is right of l\n}\nbool intersectLP(const L &l,const P &p){\n    return abs(cross(l[1]-p,l[0]-p))<EPS;\n}\nbool intersectSS(const L &s,const L &t){\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1])<=0&&\n        ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1])<=0;\n}\nbool intersectSP(const L &s,const P &p){\n    return abs(abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]))<EPS;\n    ///triangle inequality\n}\nP projection(const L &l,const P &p){\n    double t=dot(p-l[0],l[0]-l[1])/norm(l[0]-l[1]);\n    return l[0]+t*(l[0]-l[1]);\n}\nP reflection(const L &l,const P &p){\n    return p+(projection(l,p)-p)*2.0;\n}\ndouble distanceLP(const L &l,const P &p){\n    return abs(p-projection(l,p));\n}\ndouble distanceLL(const L &l,const L &m){\n    return intersectLL(l,m)?0:distanceLP(l,m[1]);\n}\ndouble distanceLS(const L &l,const L &s){\n    if(intersectLS(l,s))return 0;\n    return min(distanceLP(l,s[0]),distanceLP(l,s[1]));\n}\ndouble distanceSP(const L &s,const P &p){\n    const P r=projection(s,p);\n    if(intersectSP(s,r))return abs(r-p);\n    return min(abs(s[0]-p),abs(s[1]-p));\n}\ndouble distanceSS(const L &s,const L &t){\n    if(intersectSS(s,t))return 0;\n    return min(min(distanceSP(s,t[0]),distanceSP(s,t[1])),\n            min(distanceSP(t,s[0]),distanceSP(t,s[1])));\n}\nP crossPoint(const L &l,const L &m){\n    double A=cross(l[1]-l[0],m[1]-m[0]);\n    double B=cross(l[1]-l[0],l[1]-m[0]);\n    if(abs(A)<EPS&&abs(B)<EPS)return m[0];///same line\n    ///if(abs(A)<EPS)assert(false);\n    return m[0]+B/A*(m[1]-m[0]);\n\n}\n\nP extreme(const G &g,const L &l){\n    int k=0;\n    for(int i=1;i<g.size();i++){\n        if(dot(g[i],l[1]-l[0])>dot(g[k],l[1]-l[0]))k=i;\n    }\n    return g[k];\n}\n\nG andrewScan(G s){\n    G u,l;\n    if(s.size()<3)return s;\n    sort(s.begin(),s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n\n    l.push_back(s[s.size()-1]);\n    l.push_back(s[s.size()-2]);\n\n    for(int i=2;i<s.size();i++){\n        for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=-1;n--){\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n\n    for(int i=s.size()-3;i>=0;i--){\n        for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=-1;n--){\n            l.pop_back();\n        }\n        l.push_back(s[i]);\n    }\n    reverse(l.begin(),l.end());\n    for(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n    return l;\n}\n/*\nIN 2\nON 1\nOUT 0\n*/\nint contains(G g,P p){\n    int n=g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        P a=g[i]-p,b=g[(i+1)%n]-p;\n        if(abs(cross(a,b))<EPS&&dot(a,b)<EPS)return 1;\n        if(imag(a)>imag(b))swap(a,b);\n        if(imag(a)<EPS&&EPS<imag(b)&&cross(a,b)>EPS)x=!x;\n    }\n    return (x?2:0);\n}\n\n\nint main(){\n    double x1,x2,y1,y2;\n    scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n    L l(P(x1,y1),P(x2,y2));\n    int q;\n    scanf(\"%d\",&q);\n    while(q--){\n        double x,y;\n        scanf(\"%lf%lf\",&x,&y);\n        P p=projection(l,P(x,y));\n        printf(\"%f %f\\n\",real(p),imag(p));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Point\n{\n    double x,y;\n    Point(){ x = y = 0.0; }\n    Point(double _x, double _y) : x(_x), y(_y){}\n\n    Point operator+ (Point p)\n    {\n        return Point(p.x + x, p.y + y);\n    }\n\n    Point operator- (Point p)\n    {\n        return Point(x - p.x, y - p.y);\n    }\n\n    double operator* (Point p)\n    {\n        return p.x * x + p.y * y;\n    }\n\n    Point operator* (double t)\n    {\n        return Point(x*t, y*t);\n    }\n\n};\n\nPoint projection(Point p1, Point p2, Point o)\n{\n    Point a = (p2 - p1);\n    Point b = (o - p1);\n    return p1 + a * ( (a * b) / (a * a) );\n}\n\nint main()\n{\n    cout.precision(10);\n    cout << fixed;\n    int q;\n    Point p1, p2, o, ans;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    cin >> q;\n    while(q--)\n    {\n        cin >> o.x >> o.y;\n        ans = projection(p1, p2, o);\n        cout << ans.x << \" \" << ans.y << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <iomanip>\nusing namespace std;\n\nint main()\n{\n\tdouble x1, x2, y1, y2;\n\tint q;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++)\n\t{\tdouble x3, y3;\n\t\tcin >> x3 >> y3;\n\t\tdouble l_d = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n\t\tdouble l = (x3 - x1) * ((x2 - x1) / l_d) + (y3 - y1) * ((y2 - y1) / l_d);\n\t\tdouble x4 = x1 + l * (x2 - x1) / l_d;\n\t\tdouble y4 = y1 + l * (y2 - y1) / l_d;\n\t\tcout << fixed\n\t\t\t << setprecision(10)\n\t\t\t << x4 << \" \" << y4\n\t\t\t << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <vector>\nusing namespace std;\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\ndouble cross(const P& a, const P& b) {\n  return imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\ntypedef vector<P> G;\n\nstruct C {\n  P p; double r;\n  C(const P &p, double r) : p(p), r(r) { }\n};\n\nint main(){\n\tdouble x,y;\n\tint q;\n\tscanf(\"%lf%lf\",&x,&y);P p0(x,y);\n\tscanf(\"%lf%lf%d\",&x,&y,&q);P p1(x,y);\n\tfor(;q--;){\n\t\tscanf(\"%lf%lf\",&x,&y);P p(x,y);\n\t\tP t=(p1-p0)*dot(p1-p0,p-p0)/norm(p1-p0)+p0;\n\t\tprintf(\"%f %f\\n\",real(t),imag(t));\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nnamespace Computational_Geometry\n{\n\tconst long double eps=1e-8;\n\tstruct Vector2\n\t{\n\t\tlong double x,y;\n\t\tVector2(long double X=0.0,long double Y=0.0):x(X),y(Y) {}\n\t\tVector2 *read() {scanf(\"%Lf%Lf\",&x,&y); return this;}\n\t\tvoid print() {printf(\"%.10Lf %.10Lf\",x,y); return;}\n\t\tinline Vector2 operator - () const{return Vector2(-x,-y);}\n\t\tinline Vector2 operator + (const Vector2 &A) const{return Vector2(x+A.x,y+A.y);}\n\t\tinline Vector2 operator - (const Vector2 &A) const{return Vector2(x-A.x,y-A.y);}\n\t\tinline Vector2 operator * (const long double &k) const{return Vector2(x*k,y*k);}\n\t\tinline Vector2 operator / (const long double &k) const{return Vector2(x/k,y/k);}\n\t\tinline long double operator * (const Vector2 &A) const{return x*A.x+y*A.y;}\n\t\tinline long double operator ^ (const Vector2 &A) const{return x*A.y-y*A.x;}\n\t\tinline long double norm2() const{return x*x+y*y;}\n\t\tinline long double norm() const{return sqrtl(x*x+y*y);}\n\t\tinline bool operator < (const Vector2 &A) const{return (x<A.x-eps)||(x<=A.x+eps)&&(y<A.y-eps);}\n\t\tinline bool operator == (const Vector2 &A) const{return fabsl(x-A.x)<=eps&&fabsl(y-A.y)<=eps;}\n\t\tinline bool operator << (const Vector2 &A) const{return (y<-eps)^(A.y<-eps)?A.y<-eps:((*this^A)>eps)||((*this^A)>=-eps)&&(x>=-eps)&&(A.x<-eps);}\n\t\tinline Vector2 trans(long double a_11,long double a_12,long double a_21,long double a_22) const{return Vector2(x*a_11+y*a_12,x*a_21+y*a_22);}\n\t};\n\t#define Point Vector2\n\tPoint Projection(Point P,Point P1,Point P2)\n\t{\n\t\tlong double k1=(P2-P1)*(P-P1),k2=(P2-P1).norm2();\n\t\treturn P1+((P2-P1)*(k1/k2));\n\t}\n\tPoint Reflection(Point P,Point P1,Point P2)\n\t{\n\t\tlong double k1=(P2-P1)*(P-P1),k2=(P2-P1).norm2();\n\t\tPoint mid=P1+(P2-P1)*(k1/k2);\n\t\treturn mid*2-P;\n\t}\n};\nusing namespace Computational_Geometry;\nPoint P1,P2,P;\nint Q;\nint main()\n{\n\tP1.read(),P2.read();\n\tscanf(\"%d\",&Q);\n\twhile(Q--)\n\t{\n\t\tP.read();\n\t\tProjection(P,P1,P2).print();\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\n#include<math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x,  a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; };\n\n\tbool operator < (const Point& p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator ==(const Point& p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nstruct Segment {\n\tPoint p1, p2;\n\tSegment(){}\n\tSegment(Point p1,Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment  Line;\n\ndouble norm(Vector a) {\n\treturn a.x * a.x + a.y * a.y;\n}\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) /norm(base);\n\treturn s.p1 + base * r;\n}\n\nint main() {\n\tdouble x1, y1, x2, y2,x0,y0;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tint q;\n\tLine s = Line(Point(x1, y1), Point(x2, y2));\n\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x0 >> y0;\n\t\tPoint ans = project(s, Point(x0, y0));\n\n\t\t//cout << ans.x << \" \" << ans.y << endl;\n\t\tprintf(\"%.8lf %.8lf\\n\", ans.x,ans.y);\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// -*- coding: utf-8 -*-\n// Last-Updated : <2014/06/20 07:21:14 by samui>\n\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <climits>\n#include <set>\n#include <bitset>\n\n#define MP(a, b) std::make_pair(a, b)\n#define X first\n#define Y second\n#define rep(i,n) for(int (i) = 0; (i) < (int)(n); ++(i))\n#define rer(i,l,n) for(int (i) = l; (i) <= (int)(n); ++(i))\n#define reu(i,l,n) for(int (i) = l; (i) < (int)(n); ++(i))\ntemplate<typename T,typename U> inline void amin(T &x,U y){ if(y<x) x = y;}\ntemplate<typename T,typename U> inline void amax(T &x,U y){ if(x<y) x = y;}\ntemplate<typename TYPE,std::size_t SIZE>\nstd::size_t len(const TYPE (&array)[SIZE]){return SIZE;}\n\n// 幾何ライブ\ntypedef long double LD;\nconst LD INF = 1e100;\nconst LD EPS = 1e-8;\nconst LD PI = acos(-1);\ntypedef std::pair<LD,LD> PLD;\ntypedef std::vector<std::pair<LD,LD>> VPLD2;\n\nclass Point{\npublic:\n  LD x,y;\n  Point(LD x = 0,LD y = 0): x(x),y(y){ };\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);};\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);};\n  Point operator * (LD a) {return Point(x*a,y*a);};\n  Point operator / (LD a) {return Point(x/a,y/a);};\n  LD abs(){return std::sqrt(x*x+y*y);};\n  Point unit(){LD u = abs();return Point(x,y)/u; };\n};\ntypedef Point Vector2D;\nLD dotProduct(const Vector2D a,const Vector2D b){\n  return a.x*b.x+a.y*b.y;\n}\nLD angle(Vector2D a,Vector2D b){\n  return acos(dotProduct(a,b)/(a.abs()*b.abs()));\n}\nVector2D Projection(Vector2D source,Vector2D aim){\n  // sourceへの射影をもとめる。\n  LD a = angle(source,aim);\n  LD d = aim.abs()*cos(a);\n  return source.unit()*d;\n}\n\n\nint main(int argc, char *argv[])\n{\n  Vector2D c,d;\n  int x0,x1,y0,y1;\n  std::cin>>x0>>y0>>x1>>y1;\n  c = Vector2D(x1-x0,y1-y0);\n  int t;\n  std::cin>>t;\n  while(t>0){\n    std::cin>>x0>>y0;\n    Vector2D e = Projection(c,Vector2D(x0,y0));\n    printf(\"%.10Lf %.10Lf\\n\",e.x,e.y);\n    t--;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define REP(i,n) for(int i=0; i<(n); i++)\n#define ALL(n) begin(n),end(n)\n\nstruct Vec2\n{\n\tdouble x;\n\tdouble y;\n\n\tVec2() = default;\n\n\tconstexpr Vec2(double _x, double _y)\n\t\t: x(_x)\n\t\t, y(_y) {}\n\n\tdouble length() const\n\t{\n\t\treturn std::sqrt(lengthSquare());\n\t}\n\t\n\tconstexpr double lengthSquare() const\n\t{\n\t\treturn dot(*this);\n\t}\n\t\n\tconstexpr double dot(const Vec2& other) const\n\t{\n\t\treturn x * other.x + y * other.y;\n\t}\n\t\n\tdouble distanceFrom(const Vec2& other) const\n\t{\n\t\treturn (other - *this).length();\n\t}\n\n\tVec2 normalized() const\n\t{\n\t\treturn *this / length();\n\t}\n\t\n\tconstexpr bool isZero() const\n\t{\n\t\treturn x == 0.0 && y == 0.0;\n\t}\n\n\tconstexpr Vec2 operator +() const\n\t{\n\t\treturn *this;\n\t}\n\n\tconstexpr Vec2 operator -() const\n\t{\n\t\treturn{ -x, -y };\n\t}\n\n\tconstexpr Vec2 operator +(const Vec2& other) const\n\t{\n\t\treturn{ x + other.x, y + other.y };\n\t}\n\n\tconstexpr Vec2 operator -(const Vec2& other) const\n\t{\n\t\treturn{ x - other.x, y - other.y };\n\t}\n\n\tconstexpr Vec2 operator *(double s) const\n\t{\n\t\treturn{ x * s, y * s };\n\t}\n\n\tconstexpr Vec2 operator /(double s) const\n\t{\n\t\treturn{ x / s, y / s };\n\t}\n\n\tVec2& operator +=(const Vec2& other)\n\t{\n\t\tx += other.x;\n\t\ty += other.y;\n\t\treturn *this;\n\t}\n\n\tVec2& operator -=(const Vec2& other)\n\t{\n\t\tx -= other.x;\n\t\ty -= other.y;\n\t\treturn *this;\n\t}\n\n\tVec2& operator *=(double s)\n\t{\n\t\tx *= s;\n\t\ty *= s;\n\t\treturn *this;\n\t}\n\n\tVec2& operator /=(double s)\n\t{\n\t\tx /= s;\n\t\ty /= s;\n\t\treturn *this;\n\t}\n};\n\nconstexpr Vec2 operator *(double s, const Vec2& v)\n{\n\treturn{ s*v.x, s*v.y };\n}\n\ntemplate <class Char>\ninline std::basic_ostream<Char>& operator <<(std::basic_ostream<Char>& os, const Vec2& v)\n{\n\treturn os << Char('(') << v.x << Char(',') << v.y << Char(')');\n}\n\ntemplate <class Char>\ninline std::basic_istream<Char>& operator >>(std::basic_istream<Char>& is, Vec2& v)\n{\n\tChar unused;\n\treturn is >> unused >> v.x >> unused >> v.y >> unused;\n}\n\nint main(){\n    Vec2 a,b;\n    cin>>a.x>>a.y>>b.x>>b.y;\n    Vec2 ab=b-a;\n\n    int q;\n    cin>>q;\n\n    vector<double> ansx(q),ansy(q);\n\n    REP(i,q){\n        Vec2 p,as,s;\n        cin>>p.x>>p.y;\n\n        Vec2 ap=p-a;\n\n        as=(ab.dot(ap)/ab.lengthSquare())*ab;\n\n        s=as+a;\n        ansx[i]=s.x;\n        ansy[i]=s.y;\n    }\n\n    REP(i,q){\n        cout<<fixed<<setprecision(10)<<ansx[i]<<\" \"<<ansy[i]<<endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nclass Point                             \n{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double b) { return Point(x / b, y / b); }\n\n\tdouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm(){ return x * x + y * y; }\n\n\tbool operator <(const Point &p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator == (const Point &p) const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }         \n};\ntypedef Point Vector;              \n\nstruct Segment {                        \n\tPoint p1, p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;      \n\ndouble norm(Vector a) { return a.x*a.x + a.y*a.y; } \ndouble abs(Vector a) { return sqrt(norm(a)); }        \n\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }   \ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\n\nint main() {                                                    \n\tdouble x1, y1, x2, y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tLine base = Line(Point(x1, y1), Point(x2, y2));\n\tint q; cin >> q;\n\twhile (q--) {\n\t\tcin >> x1 >> y1;\n\t\tPoint p = project(base, Point(x1, y1));\n\t\tprintf(\"%.8lf %.8lf\\n\", p.x, p.y);\n\t}\n\treturn 0;\n}\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n\nint main() {\n  double x1, y1, x2, y2;\n  std::cin >> x1 >> y1 >> x2 >> y2;\n\n  int q;\n  std::cin >> q;\n\n  std::cout << std::setprecision(8);\n  for (int i = 0; i < q; ++i) {\n      double x, y;\n      std::cin >> x >> y;\n\n      double num = -(x2 - x1) * (x1 - x) - (y2 - y1) * (y1 - y);\n      double den = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n      double t = num / den;\n      \n      double u = x1 + t * (x2 - x1);\n      double v = y1 + t * (y2 - y1);\n      std::cout << u << \" \" << v << std::endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string.h>\n#include<string>\n#include<cstdio>\n#include<algorithm>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<cmath>\n#include<utility>\n#include<set>\n#include<complex>\n#define ll long long int\n#define ld long double\n#define INF 1000000000\n#define EPS 0.0000000001\n#define rep(i,n) for(i=0;i<n;i++)\nusing namespace std;\n\ntypedef complex<double> P;\n\nstruct L : public vector<P>{//???´???\n    L(const P &a, const P &b){\n        push_back(a);push_back(b);\n    }\n};\n\nstruct C{//???\n    P c; double r;\n    C(const P &c,double r): c(c),r(r){}\n};\n\nnamespace std{//??????????????????\n    bool operator < (const P& a,const P& b){\n        return real(a)!= real(b) ? real(a) < real(b) : imag(a) < imag(b);\n        //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b)\n    }\n    bool operator == (const P& a,const P& b){\n        return a.real()==b.real()&&a.imag()==b.imag();\n    }\n}\n\ndouble dot(P a,P b){\n    return real(conj(a)*b);\n}\n\ndouble cross(P a,P b){\n    return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n    b-=a;c-=a;\n    if(cross(b,c)>0)   return +1;// counter clockwise\n    if(cross(b,c)<0)   return -1;// clockwise\n    if(dot(b,c)<0)     return +2;// c-a-b on line\n    if(norm(b)<norm(c))return -2;// a-b-c on line\n    return 0;                    // a-c-b on lone\n}\n\nint main()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i,j;\n    \n    cin>>xp1>>yp1>>xp2>>yp2;\n    cin>>q;\n    \n    P p1(xp1,yp1),p2(xp2,yp2);\n    \n    rep(i,q){\n        double xp,yp;\n        cin>>xp>>yp;\n        P p(xp,yp);\n        P t=dot(p2-p1,p-p1)/norm(p2-p1)*(p2-p1);\n        P ans=p1+t;\n        printf(\"%.10f %.10f\\n\",ans.real(),ans.imag());\n    }\n    \n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n\nint main() {\n  double x1, y1, x2, y2;\n  std::cin >> x1 >> y1 >> x2 >> y2;\n\n  int q;\n  std::cin >> q;\n\n  std::cout << std::setprecision(10);\n  for (int i = 0; i < q; ++i) {\n      double x, y;\n      std::cin >> x >> y;\n\n      double num = -(x2 - x1) * (x1 - x) - (y2 - y1) * (y1 - y);\n      double den = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n      double t = num / den;\n      \n      double u = x1 + t * (x2 - x1);\n      double v = y1 + t * (y2 - y1);\n      std::cout << u << \" \" << v << std::endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "//Projection\n#include <iostream>\n#include <math.h>\n#include <iomanip>\n\nusing namespace std;\n\nstatic const double ESP = 1e-10;\n\nbool equals(double a, double b) { return fabs(a - b) < ESP; }\n\nclass Point {\npublic:\n    double x, y;\n\n    explicit Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (const Point &p) const { return Point(x + p.x, y + p.y); }\n    Point operator - (const Point &p) const { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(a / x, a / y); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < ESP && fabs(y - p.y) < ESP;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector v1, Vector v2) {\n    return equals(cross(v1, v2), 0.0);\n}\n\nbool isOrthogonal(Vector v1, Vector v2) {\n    return equals(dot(v1, v2), 0.0);\n}\n\nint main() {\n    int q;\n    double x, y, x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2 >> q;\n    Point p1 = Point(x1, y1), p2 = Point(x2, y2);\n    Vector v1, v2;\n    v1 = p2 - p1;\n    for(int i = 0; i < q; i++) {\n        cin >> x >> y;\n        Point p = Point(x, y);\n        Vector v2 = p - p1;\n        Point x = Point();\n        x = p1 + (v1 * (dot(v1, v2) / v1.norm()));\n        cout << setprecision(12) << x.x << \" \" << x.y << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include <cstdlib>  \n#include <math.h>\n#include <cmath>\n#include<complex>\n#include<cctype>\n#include<string>\n#include<set>\n#include<iomanip>\n#include <map>\n#include<algorithm>\n#include <functional>\n#include<vector>\n#include<climits>\n#include<stack>\n#include<queue>\n#include<bitset>\n#include <deque>\n#include <climits>\n#include <typeinfo>\n#include <utility> \n#include <numeric>\nusing namespace std;\nusing Complex = complex<double>;\nusing ll = long long;\ntemplate<typename T>using min_priority_queue = priority_queue<T, vector<T>, greater<T>>;\nconst ll inf = 1145141919810364364LL;\nconst double EPS = 1e-10;\ndouble PI = acos(-1.0);\n#define all(x) (x).begin(),(x).end()\n#define puts(x) cout << x << endl\n#define rep(i,m,n) for(ll i = m;i < n;++i)\n#define pb push_back\n#define fore(i,a) for(auto &i:a)\n#define rrep(i,m,n) for(ll i = m;i >= n;--i)\n\n//geometory\nclass Vector{\npublic:\n\tdouble x, y;\n\n\tVector(double x = 0, double y = 0) :x(x), y(y) {}\n\tVector operator + (Vector v) { return Vector(x + v.x, y + v.y); }\n\tVector operator - (Vector v) { return Vector(x - v.x, y - v.y); }\n\tVector operator * (double a) { return Vector(a*x, a*y); }\n\tVector operator / (double a) { return Vector(a / x, a / y); }\n\tVector operator +=(Vector v) {\n\t\tx += v.x;\n\t\ty += v.y;\n\t\treturn *this;\n\t}\n\tVector operator -=(Vector v) {\n\t\tx -= v.x;\n\t\ty -= v.y;\n\t\treturn *this;\n\t}\n\tVector operator *= (double a) {\n\t\tx *= a;\n\t\ty *= a;\n\t\treturn *this;\n\t}\n\tVector operator /=(double a) {\n\t\tx /= a;\n\t\ty /= a;\n\t\treturn *this;\n\t}\n\n\tbool operator < (Vector p) { return (x != p.x) ? (x < p.x) : (y < p.y); }\n\tbool operator == (Vector p) { return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\tdouble equals(double a, double b) { return fabs(a - b) < EPS; }\n\n\tdouble dot(Vector b) { return x * b.x + y * b.y; }\n\tdouble cross(Vector b) { return x * b.y - y * b.x; }\n\n\tbool isOrthogonal(Vector b) { return equals(this->dot(b), 0.0); }\n\tbool isParallel(Vector b) { return equals(this->cross(b), 0.0); }\n\n};\ntypedef Vector Point;\n\ntypedef struct{\n\tPoint p1, p2;\n}Segment;\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = base.dot(p-s.p1) / base.norm();\n\treturn s.p1 + base * r;\n}\n//end of geometry\n\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\n\t\n\tint xp1, yp1, xp2, yp2;\n\tcin >> xp1 >> yp1 >> xp2 >> yp2;\n\tPoint p1(xp1,yp1);\n\tPoint p2(xp2,yp2);\n\tSegment s = { p1,p2 };\n\n\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tint xpi, ypi;\n\t\tcin >> xpi >> ypi;\n\t\tPoint ret = project(s,Point(xpi,ypi));\n\t\tcout << setprecision(20) << ret.x << \" \" << ret.y << endl;\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\n//using ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(Point &p) { return Point(x + p.x, y + p.y); };\n\tPoint operator -(Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n\tPoint operator /(double k) { return Point(x / k, y / k); }\n};\ntypedef Point Vector;\n\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\tPoint point = s.p1 + base*r;\n\treturn point;\n}\nint main() {\n\tPoint p[2];\n\tint q, x, y;\n\tcin >> p[0].x >> p[0].y >> p[1].x >> p[1].y;\n\tSegment seg;\n\tseg.p1 = p[0]; seg.p2 = p[1];\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\t//cout << x << \" \" << y << endl;\n\t\tPoint po = Point(x, y);\n\t\tPoint proj = project(seg, po);\n\t\tprintf(\"%.10lf %.10lf\\n\", proj.x, proj.y);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "// CGL_1_A\n#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\n#define N      0.00001\nusing namespace std;\n\nint main(){\n\tdouble xp[2], yp[2], xx, yy, X, Y, x, y;\n\tint q;\n\n\tcin>>xp[0]>>yp[0]>>xp[1]>>yp[1];\n\tX = xp[1] - xp[0];\n\tY = yp[1] - yp[0];\n\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>xx>>yy;\n\n\t\tif(Y < N){\n\t\t\tx = xx;\n\t\t\ty = yp[0];\n\t\t}else if(X < N){\n\t\t\tx = xp[0];\n\t\t\ty = yy;\n\t\t}else{\n\t\t\tx = (xp[0]*Y*Y+xx*X*X+yy*X*Y-yp[0]*X*Y)/(X*X+Y*Y);\n\t\t\ty = -X/Y*(x-xx)+yy;\n\t\t}\n\n\t\tprintf(\"%.10lf %.10lf\\n\", x, y);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define EPS 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#include <cstdio>\n#include <cmath>\n#include <vector>\nusing namespace std;\n\nclass Point\n{\npublic:\n  double x, y;\n  Point (double x = 0, double y = 0) : x(x), y(y) {}\n  Point operator + (Point p) {return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) {return Point(x - p.x, y - p.y); }\n  Point operator * (double a) {return Point(a * x, a * y); }\n  Point operator / (double a) {return Point(x / a, y / a); }\n\n  double norm() { return x * x + y * y; }\n  double abs() { return sqrt(norm()); }\n\n  bool operator < (const Point &p) const\n  {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const\n  {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment\n{\n  Point p1, p2;\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n  Segment(double x1, double y1, double x2, double y2)\n  {\n    p1 = Point(x1, y1);\n    p2 = Point(x2, y2);\n  }\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\n// dot and cross product\ndouble dot(Vector a, Vector b)\n{\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n  return a.x * b.y - a.y * b.x;\n}\n\nPoint project(Segment s, Point p)\n{\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nint main()\n{\n  double x1, y1, x2, y2;\n  scanf(\"%lf%lf%lf%lf\", &x1, &y1, &x2, &y2);\n  Segment s(x1, y1, x2, y2);\n  int q;\n  scanf(\"%d\", &q);\n  while (q--)\n  {\n    Point p;\n    scanf(\"%lf%lf\", &p.x, &p.y);\n    Point proj = project(s, p);\n    printf(\"%.8lf %.8lf\\n\", proj.x, proj.y);\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\nstruct Point{double x, y;};\n\nint main(int argc, char const *argv[])\n{\n    Point p0, p1, p2;\n    Point a, b, x;\n    int q;\n    scanf(\"%lf %lf %lf %lf\", &p1.x, &p1.y, &p2.x, &p2.y);\n    a.x = p2.x - p1.x;\n    a.y = p2.y - p1.y;\n\n    scanf(\"%d\", &q);\n\n    for(int i=0; i<q; i++){\n        scanf(\"%lf %lf\", &p0.x, &p0.y);\n        b.x = p0.x - p1.x;\n        b.y = p0.y - p1.y;\n        x.x = (a.x*b.x+a.y*b.y)/(a.x*a.x+a.y*a.y) * a.x;\n        x.y = (a.x*b.x+a.y*b.y)/(a.x*a.x+a.y*a.y) * a.y;\n        printf(\"%.8lf %.8lf\\n\", x.x, x.y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#define EPS 0.00000001\nusing namespace std;\n\nint main(){\n \n    double x1, y1, x2, y2, x0, y0, dx, dy, m, X, Y;\n    int q;\n    cin >> x1 >> y1 >> x2 >> y2 >> q;\n    dx = x1 - x2;\n    dy = y1 - y2;\n    while (q--){\n      cin >> x0 >> y0;\n      X=(dx*dx*x0+dy*dy*x1-dx*dy*(y1-y0))/(dx*dx+dy*dy);\n      Y = !(-EPS<=dx && dx<=EPS) ? Y=dy/dx*(X-x1)+y1 : Y=y0;\n  \t\tprintf(\"%.8lf %.8lf\\n\",X,Y);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define dump(n) cout<<\"# \"<<#n<<'='<<(n)<<endl\n#define repi(i,a,b) for(int i=int(a);i<int(b);i++)\n#define peri(i,a,b) for(int i=int(b);i-->int(a);)\n#define rep(i,n) repi(i,0,n)\n#define per(i,n) peri(i,0,n)\n#define all(c) begin(c),end(c)\n#define mp make_pair\n#define mt make_tuple\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<ll> vl;\ntypedef vector<vl> vvl;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<string> vs;\n\nconst int INF=1e9;\nconst int MOD=1e9+7;\nconst double EPS=1e-9;\n\ntemplate<typename T1,typename T2>\nostream& operator<<(ostream& os,const pair<T1,T2>& p){\n\treturn os<<'('<<p.first<<','<<p.second<<')';\n}\ntemplate<typename T>\nostream& operator<<(ostream& os,const vector<T>& a){\n\tos<<'[';\n\trep(i,a.size()) os<<(i?\" \":\"\")<<a[i];\n\treturn os<<']';\n}\n\nstruct Point{\n\tdouble x,y;\n\tPoint(){}\n\tPoint(double x,double y):x(x),y(y){}\n\tPoint& operator+=(Point p){\n\t\tx+=p.x,y+=p.y;\n\t\treturn *this;\n\t}\n\tPoint& operator-=(Point p){\n\t\tx-=p.x,y-=p.y;\n\t\treturn *this;\n\t}\n\tPoint& operator*=(double c){\n\t\tx*=c,y*=c;\n\t\treturn *this;\n\t}\n\tPoint& operator/=(double c){\n\t\tx/=c,y/=c;\n\t\treturn *this;\n\t}\n};\nPoint operator+(Point a,Point b){\n\treturn a+=b;\n}\nPoint operator-(Point a,Point b){\n\treturn a-=b;\n}\nPoint operator*(Point a,double c){\n\treturn a*=c;\n}\nPoint operator*(double c,Point a){\n\treturn a*=c;\n}\nPoint operator/(Point a,double c){\n\treturn a/=c;\n}\nbool operator==(Point a,Point b){\n\treturn abs(a.x-b.x)<EPS && abs(a.y-b.y)<EPS;\n}\nbool operator!=(Point a,Point b){\n\treturn !(a==b);\n}\n\ndouble Abs(Point p){\n\treturn sqrt(p.x*p.x+p.y*p.y);\n}\ndouble Abs2(Point p){\n\treturn p.x*p.x+p.y*p.y;\n}\ndouble Arg(Point p){\n\treturn atan2(p.y,p.x);\n}\ndouble Dot(Point a,Point b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble Cross(Point a,Point b){\n\treturn a.x*b.y-a.y*b.x;\n}\nPoint Rot(Point p,double t){\n\treturn Point(cos(t)*p.x-sin(t)*p.y,sin(t)*p.x+cos(t)*p.y);\n}\n\nstruct Line{\n\tPoint pos,dir;\n\tLine(){}\n\tLine(Point p,Point d):pos(p),dir(d){}\n\tLine(double px,double py,double dx,double dy):pos(px,py),dir(dx,dy){}\n};\n\nPoint Proj(Line l,Point p){\n\tPoint a=p-l.pos,b=l.dir;\n\treturn l.pos+Dot(a,b)/Abs2(b)*b;\n}\n\nint main()\n{\n\tLine l;\n\t{\n\t\tdouble a,b,c,d; cin>>a>>b>>c>>d;\n\t\tl=Line(a,b,c-a,d-b);\n\t}\n\tint q; cin>>q;\n\trep(_,q){\n\t\tPoint p; cin>>p.x>>p.y;\n\t\tPoint q=Proj(l,p);\n\t\tprintf(\"%.10f %.10f\\n\",q.x,q.y);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <deque>\n#include <queue>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define mp make_pair\n#define pb push_back\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n\treturn a < -EPS ? -1 : a > EPS;\n}\n\ninline int cmp(db a, db b){\n\treturn sign(a-b);\n}\n\nstruct P {\n\tdb x, y;\n\tP() {}\n\tP(db _x, db _y) : x(_x), y(_y) {}\n\tP operator+(P p) { return P(x + p.x, y + p.y); }\n\tP operator-(P p) { return P(x - p.x, y - p.y); }\n\tP operator*(db d) { return P(x * d, y * d); }\n\tP operator/(db d) { return P(x / d, y / d); }\n\tbool operator<(P p) const {\n\t\tint c = cmp(x, p.x);\n\t\tif (c) return c == -1;\n\t\treturn cmp(y, p.y) == -1;\n\t}\n\tdb dot(P p) { return x * p.x + y * p.y; }\n\tdb det(P p) { return x * p.y - y * p.x; }\n\tdb distTo(P p) { return (*this-p).abs(); }\n\tdb alpha() { return atan2(y, x); }\n\tvoid read() { cin>>x>>y; }\n\tdb abs() { return sqrt(abs2());}\n\tdb abs2() { return x * x + y * y; }\n\tP rot90() { return P(-y,x);}\n\tP unit() { return *this/abs(); }\n    int quad() const { return sign(y) == 1 || (sign(y) == 0 && sign(x) >= 0); }\n};\n\nstruct L{ //ps[0] -> ps[1]\n\tP ps[2];\n\tP& operator[](int i) { return ps[i]; }\n\tP dir() { return ps[1] - ps[0]; }\n \tbool include(P p) { return sign((ps[1] - ps[0]).det(p - ps[0])) > 0; }\n \tL push(){ // push eps outward\n \t\tconst double eps = 1e-6;\n \t\tP delta = (ps[1] - ps[0]).rot90().unit() * eps;\n \t\treturn {ps[0] - delta, ps[1] - delta};\n \t}\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isLL(P p1, P p2, P q1, P q2) {\n\tdb a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n\treturn (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nP isLL(L l1,L l2){ return isLL(l1[0],l1[1],l2[0],l2[1]); }\n\nbool intersect(db l1,db r1,db l2,db r2){\n\tif(l1>r1) swap(l1,r1); if(l2>r2) swap(l2,r2);\n\treturn !( cmp(r1,l2) == -1 || cmp(r2,l1) == -1 );\n}\n\nbool isSS(P p1, P p2, P q1, P q2){\n    return intersect(p1.x,p2.x,q1.x,q2.x) && intersect(p1.y,p2.y,q1.y,q2.y) &&\n    crossOp(p1,p2,q1) * crossOp(p1,p2,q2) <= 0 && crossOp(q1,q2,p1)\n            * crossOp(q1,q2,p2) <= 0;\n}\n\nbool isMiddle(db a, db m, db b) {\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n\nbool isMiddle(P a, P m, P b) {\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nbool onSeg(P p1, P p2, P q){\n\treturn crossOp(p1,p2,q) == 0 && isMiddle(p1, q, p2);\n}\n\nP proj(P p1, P p2, P q) {\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\n\nP reflect(P p1, P p2, P q){\n\treturn proj(p1,p2,q) * 2 - q;\n}\n\ndb nearest(P p1,P p2,P q){\n\tP h = proj(p1,p2,q);\n\tif(isMiddle(p1,h,p2))\n\t\treturn q.distTo(h);\n\treturn min(p1.distTo(q),p2.distTo(q));\n}\n\ndb disSS(P p1, P p2, P q1, P q2){\n\tif(isSS(p1,p2,q1,q2)) return 0;\n\treturn min(min(nearest(p1,p2,q1),nearest(p1,p2,q2)), min(nearest(q1,q2,p1),nearest(q1,q2,p2)) );\n}\n\ndb rad(P p1,P p2){\n\treturn atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n\tdb A = p1.distTo(p2);\n\tdb B = p2.distTo(p3);\n\tdb C = p3.distTo(p1);\n\treturn sqrtl(A*B*C/(A+B+C));\n}\n\n//polygon\n\ndb area(vector<P> ps){\n\tdb ret = 0; rep(i,0,ps.size()) ret += ps[i].det(ps[(i+1)%ps.size()]);\n\treturn abs(ret/2);\n}\n\nint contain(vector<P> ps, P p){ //2:inside,1:on_seg,0:outside\n\tint n = ps.size(), ret = 0;\n\trep(i,0,n){\n\t\tP u=ps[i],v=ps[(i+1)%n];\n\t\tif(onSeg(u,v,p)) return 1;\n\t\tif(cmp(u.y,v.y)<=0) swap(u,v);\n\t\tif(cmp(p.y,u.y) >0 || cmp(p.y,v.y) <= 0) continue;\n\t\tret ^= crossOp(p,u,v) > 0;\n\t}\n\treturn ret*2;\n}\n\nvector<P> convexHull(vector<P> ps) {\n    int n = ps.size(); if(n <= 1) return ps;\n    sort(ps.begin(), ps.end());\n    vector<P> qs(n * 2); int k = 0;\n    for (int i = 0; i < n; qs[k++] = ps[i++])\n        while (k > 1 && crossOp(qs[k - 2], qs[k - 1], ps[i]) <= 0) --k;\n    for (int i = n - 2, t = k; i >= 0; qs[k++] = ps[i--])\n       \twhile (k > t && crossOp(qs[k - 2], qs[k - 1], ps[i]) <= 0) --k;\n    qs.resize(k - 1);\n    return qs;\n}\n\nvector<P> convexHullNonStrict(vector<P> ps) {\n\t//caution: need to unique the Ps first\n    int n = ps.size(); if(n <= 1) return ps;\n    sort(ps.begin(), ps.end());\n    vector<P> qs(n * 2); int k = 0;\n    for (int i = 0; i < n; qs[k++] = ps[i++])\n        while (k > 1 && crossOp(qs[k - 2], qs[k - 1], ps[i]) < 0) --k;\n    for (int i = n - 2, t = k; i >= 0; qs[k++] = ps[i--])\n       \twhile (k > t && crossOp(qs[k - 2], qs[k - 1], ps[i]) < 0) --k;\n    qs.resize(k - 1);\n    return qs;\n}\n\ndb convexDiameter(vector<P> ps){\n\tint n = ps.size(); if(n <= 1) return 0;\n\tint is = 0, js = 0; rep(k,1,n) is = ps[k]<ps[is]?k:is, js = ps[js] < ps[k]?k:js;\n\tint i = is, j = js;\n\tdb ret = ps[i].distTo(ps[j]);\n\tdo{\n\t\tif((ps[(i+1)%n]-ps[i]).det(ps[(j+1)%n]-ps[j]) >= 0)\n\t\t\t(++j)%=n;\n\t\telse\n\t\t\t(++i)%=n;\n\t\tret = max(ret,ps[i].distTo(ps[j]));\n\t}while(i!=is || j!=js);\n\treturn ret;\n}\n\nvector<P> convexCut(const vector<P>&ps, P q1, P q2) {\n\tvector<P> qs;\n\tint n = ps.size();\n\trep(i,0,n){\n\t\tP p1 = ps[i], p2 = ps[(i+1)%n];\n\t\tint d1 = crossOp(q1,q2,p1), d2 = crossOp(q1,q2,p2);\n\t\tif(d1 >= 0) qs.pb(p1);\n\t\tif(d1 * d2 < 0) qs.pb(isLL(p1,p2,q1,q2));\n\t}\n\treturn qs;\n}\n\n//min_dist\n\ndb min_dist(vector<P>&ps,int l,int r){\n\tif(r-l<=5){\n\t\tdb ret = 1e100;\n\t\trep(i,l,r) rep(j,l,i) ret = min(ret,ps[i].distTo(ps[j]));\n\t\treturn ret;\n\t}\n\tint m = (l+r)>>1;\n\tdb ret = min(min_dist(ps,l,m),min_dist(ps,m,r));\n\tvector<P> qs; rep(i,l,r) if(abs(ps[i].x-ps[m].x)<= ret) qs.pb(ps[i]);\n\tsort(qs.begin(), qs.end(),[](P a,P b) -> bool {return a.y<b.y; });\n\trep(i,1,qs.size()) for(int j=i-1;j>=0&&qs[j].y>=qs[i].y-ret;--j) ret = min(ret,qs[i].distTo(qs[j]));\n\treturn ret;\n}\n\nint type(P o1,db r1,P o2,db r2){\n\tdb d = o1.distTo(o2);\n\tif(cmp(d,r1+r2) == 1) return 4;\n\tif(cmp(d,r1+r2) == 0) return 3;\n\tif(cmp(d,abs(r1-r2)) == 1) return 2;\n\tif(cmp(d,abs(r1-r2)) == 0) return 1;\n\treturn 0;\n}\n\nvector<P> isCL(P o,db r,P p1,P p2){\n\tdb x = (p1-o).dot(p2-p1), y = (p2-p1).abs2(), d = x * x - y * ((p1-o).abs2() - r*r);\n\tif(sign(d) < 0) return {};\n\td = max(d,0.0); P m = p1 - (p2-p1)*(x/y), dr = (p2-p1)*(sqrt(d)/y);\n\treturn {m-dr,m+dr}; //along dir: p1->p2\n}\n\nvector<P> isCC(P o1, db r1, P o2, db r2) { //need to check whether two circles are the same\n\tdb d = o1.distTo(o2);\n\tif (cmp(d, r1 + r2) == 1) return {};\n\td = min(d, r1 + r2);\n\tdb y = (r1 * r1 + d * d - r2 * r2) / (2 * d), x = sqrt(r1 * r1 - y * y);\n\tP dr = (o2 - o1).unit();\n\tP q1 = o1 + dr * y, q2 = dr.rot90() * x;\n\treturn {q1-q2,q1+q2};//along circle 1\n}\n\nvector<P> tanCP(P o, db r, P p) {\n\tdb x = (p - o).abs2(), d = x - r * r;\n\tif (sign(d) <= 0) return {}; // on circle => no tangent\n\tP q1 = o + (p - o) * (r * r / x);\n\tP q2 = (p - o).rot90() * (r * sqrt(d) / x);\n\treturn {q1-q2,q1+q2}; //counter clock-wise\n}\n\n\nvector<L> extanCC(P o1, db r1, P o2, db r2) {\n\tvector<L> ret;\n\tif (cmp(r1, r2) == 0) {\n\t\tP dr = (o2 - o1).unit().rot90() * r1;\n\t\tret.pb({o1 + dr, o2 + dr}), ret.pb({o1 - dr, o2 - dr});\n\t} else {\n\t\tP p = (o2 * r1 - o1 * r2) / (r1 - r2);\n\t\tvector<P> ps = tanCP(o1, r1, p), qs = tanCP(o2, r2, p);\n\t\trep(i,0,min(ps.size(),qs.size())) ret.pb({ps[i], qs[i]}); //c1 counter-clock wise\n\t}\n\treturn ret;\n}\n\nvector<L> intanCC(P o1, db r1, P o2, db r2) {\n\tvector<L> ret;\n \tP p = (o1 * r2 + o2 * r1) / (r1 + r2);\n \tvector<P> ps = tanCP(o1,r1,p), qs = tanCP(o2,r2,p);\n\trep(i,0,min(ps.size(),qs.size())) ret.pb({ps[i], qs[i]}); //c1 counter-clock wise\n\treturn ret;\n}\n\ndb areaCT(db r, P p1, P p2){\n\tvector<P> is = isCL(P(0,0),r,p1,p2);\n\tif(is.empty()) return r*r*rad(p1,p2)/2;\n\tbool b1 = cmp(p1.abs2(),r*r) == 1, b2 = cmp(p2.abs2(), r*r) == 1;\n\tif(b1 && b2){\n\t\tif(sign((p1-is[0]).dot(p2-is[0])) <= 0 &&\n\t\t\tsign((p1-is[0]).dot(p2-is[0])) <= 0)\n\t\treturn r*r*(rad(p1,is[0]) + rad(is[1],p2))/2 + is[0].det(is[1])/2;\n\t\telse return r*r*rad(p1,p2)/2;\n\t}\n\tif(b1) return (r*r*rad(p1,is[0]) + is[0].det(p2))/2;\n\tif(b2) return (p1.det(is[1]) + r*r*rad(is[1],p2))/2;\n\treturn p1.det(p2)/2;\n}\n\nbool parallel(L l0, L l1) { return sign( l0.dir().det( l1.dir() ) ) == 0; }\n\nbool sameDir(L l0, L l1) { return parallel(l0, l1) && sign(l0.dir().dot(l1.dir()) ) == 1; }\n\nbool cmp (P a,  P b) {\n\tif (a.quad() != b.quad()) {\n\t\treturn a.quad() < b.quad();\n\t} else {\n\t\treturn sign( a.det(b) ) > 0;\n\t}\n}\n\nbool operator < (L l0, L l1) {\n\tif (sameDir(l0, l1)) {\n\t\treturn l1.include(l0[0]);\n\t} else {\n\t\treturn cmp( l0.dir(), l1.dir() );\n\t}\n}\n\nbool check(L u, L v, L w) {\n\treturn w.include(isLL(u,v));\n}\n\nvector<P> halfPlaneIS(vector<L> &l) {\n\tsort(l.begin(), l.end());\n\tdeque<L> q;\n\tfor (int i = 0; i < (int)l.size(); ++i) {\n \t\tif (i && sameDir(l[i], l[i - 1])) continue;\n \t\twhile (q.size() > 1 && !check(q[q.size() - 2], q[q.size() - 1], l[i])) q.pop_back();\n \t\twhile (q.size() > 1 && !check(q[1], q[0], l[i])) q.pop_front();\n \t\tq.push_back(l[i]);\n \t}\n\twhile (q.size() > 2 && !check(q[q.size() - 2], q[q.size() - 1], q[0])) q.pop_back();\n\twhile (q.size() > 2 && !check(q[1], q[0], q[q.size() - 1])) q.pop_front();\n\tvector<P> ret;\n\tfor (int i = 0; i < (int)q.size(); ++i) ret.push_back(isLL(q[i], q[(i + 1) % q.size()]));\n\treturn ret;\n}\n\nint main(){\n\tP p1(0,0),p2(0,0);\n\tp1.read(),p2.read();\n\tint q;\n\tcin >> q;\n\twhile(q--){\n\t\tP p3(0,0);\n\t\tp3.read();\n\t\tp3 = proj(p1,p2,p3);\n\t\tprintf(\"%.10lf %.10lf\\n\",p3.x,p3.y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\ntypedef complex<ld> pt;\n#define X real()\n#define Y imag()\nvoid pin(pt& p){\n\tld x,y; \n\tcin>>x>>y; \n\tp={x,y};\n}\nostream& operator<<(ostream& os, pt p){\n\treturn os<<p.X<<\" \"<<p.Y<<endl;\n} \nld dot(pt p,pt q){\n\treturn (p.X*q.X + p.Y*q.Y);\n}\npt solve(pt p,pt q,pt x){\n\tld l = dot((q-p),(x-p))/abs(q-p);\n\tpt on = l*(q-p)/abs(q-p);\n\treturn p+on;\n}\nint main (){\n\tcout<<fixed<<setprecision(12);\n\tpt p,q,x;\n\tpin(p);\n\tpin(q);\n\tint t; \n\tcin>>t;\n\twhile(t--){\n\t\tpin(x);\n\t\tcout<<solve(p,q,x); \n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\nusing namespace std;\n\nstruct Point{\n    double x;\n    double y;\n    Point(double x, double y) : x(x), y(y){}\n    Point operator+(Point p){\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator*(double d){\n        return Point(x * d, y * d);\n    }\n};\ntypedef Point Vector;\n\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nint main(){\n    int x_p1, y_p1, x_p2, y_p2;\n    cin >> x_p1 >> y_p1 >> x_p2 >> y_p2;\n    Point p1(x_p1, y_p1);\n    Point p2(x_p2, y_p2);\n    Vector b(p2.x - p1.x, p2.y - p1.y);\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        Vector h(x - p1.x, y - p1.y);\n        Point ans = p1 + p2 * (dot(h, b) / dot(b, b));\n        cout << fixed << setprecision(10);\n        cout << ans.x << \" \" << ans.y << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <complex>\n#include <cmath>\n\nusing namespace std;\n\nstatic const double EPS=1e-12;\nstatic const double INF=1e24;\n\nusing Point=complex<double>;\nusing Plane=vector<Point>;\n\nbool operator<(const Point &a, const Point &b) {\n    return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b);\n}\n\ndouble cross_prod(const Point &a, const Point &b) {\n    return imag(conj(a)*b);\n}\n\ndouble dot_prod(const Point &a, const Point &b) {\n    return real(conj(a)*b);\n}\n\nstruct Line: public vector<Point> {\n    Line() {}\n    Line(const Point &a, const Point &b) {\n        push_back(a);\n        push_back(b);\n    }\n};\n\nstruct Circle {\n    Point p;\n    double r;\n    Circle() {}\n    Circle(const Point &p, const double r): p(p), r(r) {}\n};\n\nint main() {\n    double x, y;\n    scanf(\"%lf %lf\", &x, &y);\n    Point p1(x, y);\n\n    scanf(\"%lf %lf\", &x, &y);\n    Point p2(x, y);\n\n    Point e(real(p2)-real(p1), imag(p2)-imag(p1));\n    e /= abs(e);\n\n    size_t q;\n    scanf(\"%zu\", &q);\n    for (size_t i=0; i<q; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        Point p(x, y);\n\n        double r=abs(dot_prod(p, e));\n        Point z=p1+r*e;\n        printf(\"%.12f %.12f\\n\", real(z), imag(z));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\n//#define equals( a, b ) (fabs((a) - (b)) < DBL_E)\n\nclass Vector2 {\npublic:\n\tVector2(double x_, double y_) : x(x_), y(y_) {}\n\tVector2() : x(0), y(0) {}\n\tVector2 operator - (Vector2 other) {\n\t\tVector2 vec(x - other.GetX(), y - other.GetY());\n\t\treturn vec;\n\t}\n\tVector2 operator * (double other) {\n\t\treturn Vector2(other * x, other * y);\n\t}\n\n\tvoid SetVector2(double x_, double y_) {\n\t\tx = x_;\n\t\ty = y_;\n\t}\n\tdouble GetX() {\n\t\treturn x;\n\t}\n\tdouble GetY() {\n\t\treturn y;\n\t}\n\nprivate:\n\tdouble x, y;\n};\n\ndouble Dot(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetX() + vecA.GetY() * vecB.GetY();\n}\n\ndouble CrossY(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetY() - vecA.GetY() * vecB.GetX();\n}\n\ndouble Norm(Vector2 vec) {\n\treturn sqrtl(vec.GetX() * vec.GetX() + vec.GetY() * vec.GetY());\n}\n\nbool IsOrthogonal(Vector2 vecA, Vector2 vecB) {\n\tdouble ans = Dot(vecA, vecB);\n\t//\treturn equals(ans, 0.0);\n\t//\treturn (fabs(ans) < DBL_EPSILON);\n\tans = ans > 0 ? ans : -ans;\n\treturn (ans < 0.1f);\n}\n\nbool IsParallel(Vector2 vecA, Vector2 vecB) {\n\tdouble ans = CrossY(vecA, vecB);\n\t//\treturn (fabs(ans) < DBL_EPSILON);\n\tans = ans > 0 ? ans : -ans;\n\treturn (ans < 0.1f);\n}\n\nint main() {\n\tint query;\n\tVector2 vecs[2];\n\n\tfor (int i = 0; i < 2; i++) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvecs[i].SetVector2(x, y);\n\t}\n\tVector2 base = vecs[1] - vecs[0];\n\tbase.SetVector2(base.GetX() / Norm(base), base.GetY() / Norm(base));\n\n\tcin >> query;\n\n\tfor (int i = 0; i < query; i++) {\n\t\tVector2 vecAns;\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvecAns.SetVector2(x, y);\n\n\t\tVector2 ans = base * Dot(base, vecAns);\n\t\tcout << ans.GetX() << \" \" << ans.GetY() << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define ll long long\n#define INF 1000000005\n#define MOD 1000000007\n#define rep(i,n) for(int i=0;i<n;++i)\n\nusing namespace std;\n\ntypedef pair<int,int>P;\n\nconst int MAX_N = 100005;\n\nint a[MAX_N];\nint Q;\n\nint main()\n{\n\tP p1,p2;\n\tP p;\n\tscanf(\"%d%d%d%d\",&p1.first,&p1.second,&p2.first,&p2.second);\n\tP a = P(p2.first-p1.first,p2.second-p1.second);\n\tscanf(\"%d\",&Q);\n\trep(i,Q){\n\t\tscanf(\"%d%d\",&p.first,&p.second);\n\t\tP b = P(p.first - p1.first,p.second - p1.second);\n\t\tdouble sa = sqrt(a.first*a.first + a.second*a.second);\n\t\tdouble sb = sqrt(b.first*b.first + b.second*b.second);\n\t\tdouble rt = (a.first*b.first+a.second*b.second)/(sa*sa);\n\t\tprintf(\"%.10f %.10f\\n\",p1.first+rt*a.first,p1.second+rt*a.second);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include<complex>\n\nusing namespace std;\ntypedef complex<double> P;\n \nP project(P a, P b, P c){\n  b -= a, c -= a;\n  return a + b * real(c / b);\n}\n\nint main(){\n  int n;\n  double ax, ay, bx, by, cx, cy;\n  cin >> ax >> ay >> bx >> by >> n;\n  while(n--) {\n    cin >> cx >> cy;\n    P p = project(P(ax, ay), P(bx, by), P(cx, cy));\n    printf(\"%.8f %.8f\\n\",p.real(),p.imag());\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "// I SELL YOU...! \n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<functional>\n#include<queue>\n#include<chrono>\n#include<iomanip>\n#include<map>\n#include<set>\n#include<cmath>\nusing namespace std;\nusing ll = long long;\nusing P = pair<double,double>;\nusing TP = tuple<ll,ll,ll>;\nvoid init_io(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  cout << setprecision(20);\n}\ndouble size(double x,double y){\n  return sqrt(x*x+y*y);\n}\nvoid solve(P p,P p1,P p2){\n  double nume = (p.first-p1.first)*(p2.first-p1.first) \n    + (p.second-p1.second)*(p2.second-p1.second);\n  double deno = size(p2.first-p1.first,p2.second-p1.second);\n  deno *= deno;\n  double d = nume / deno;\n  cout << p1.first + (p2.first-p1.first)*d <<\" \"<<\n    p1.second + (p2.second-p1.second)*d << endl;\n}\nsigned main(){\n  init_io();\n  double xp1,yp1,xp2,yp2,x,y;\n  cin >> xp1 >> yp1 >> xp2 >> yp2;\n  P p1 = P(xp1,yp1),p2 = P(xp2,yp2);\n  ll q;\n  cin >> q;\n  for(int i=0;i<q;i++){\n    cin >> x >> y;\n    solve(P(x,y),p1,p2);\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define FOR(I,X,Y) for(long int I=X;I<Y;I++)\n#define REP(I,X) for(long int I=X;I>=0;I--)\n#define INF 1e9+7\nusing namespace std;\n\nstruct vec{\n  double x;\n  double y;\n  double z;\n  vec operator+(const vec & vec2)const{\n    return {x+vec2.x,y+vec2.y,z+vec2.z};\n  }\n  vec operator-(const vec & vec2)const{\n    return {x-vec2.x,y-vec2.y,z-vec2.z};\n  }\n  double operator*(const vec & vec2)const{\n    return x*vec2.x+y*vec2.y+z*vec2.z;\n  }\n};\n\ndouble ABS(vec v){\n  return sqrt(v.x*v.x+v.y*v.y+v.z*v.z);\n}\n\nvec multiple(vec v,double k){\n  return {k*v.x,k*v.y,k*v.z};\n}\n\nvec standardize(vec v){\n  return multiple(v,1/ABS(v));\n}\n\nint main(){\n  double x1,y1,x2,y2,x,y;\n  int q;\n  cin >> x1 >> y1 >> x2 >> y2 >> q;\n  vec p1 = {x1,y1,0},p2 = {x2,y2,0},p1p2 = p2 - p1;\n  vector<vec> ans;\n  FOR(i,0,q){\n    cin >> x >> y;\n    vec v = {x,y,0};\n    v = multiple(standardize(p2-p1),(v-p1)*standardize(p1p2));\n    ans.push_back(v+p1);\n  }\n  for(auto p:ans)cout << p.x << \" \" << p.y << endl;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<iomanip>\n#include<cmath>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nstruct Point{\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator + (Point p){ return Point(x+p.x, y+p.y); }\n    Point operator - (Point p){ return Point(x-p.x, y-p.y); }\n    Point operator * (double a){ return Point(a*x, a*y); }\n    Point operator / (double a){ return Point(x/a, y/a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x + y*y; }\n\n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\n\nstruct Segment{\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\n\ndouble norm(Point a){\n    return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Point a){\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n\n\nint main(){\n    double a, b, c, d;\n    cin >> a >> b >> c >> d;\n    Segment s({Point(a,b), Point(c,d)});\n\n    int q;\n    cin >> q;\n\n    while(q-- > 0){\n        double x, y;\n        cin >> x >> y;\n        Point res = project(s, Point(x,y));\n        cout << fixed << setprecision(12) << res.x << \" \" << res.y << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string.h>\n#include<string>\n#include<cstdio>\n#include<algorithm>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<cmath>\n#include<utility>\n#include<set>\n#include<complex>\n#define ll long long int\n#define ld long double\n#define INF 1000000000\n#define EPS 0.0000000001\n#define rep(i,n) for(i=0;i<n;i++)\nusing namespace std;\n\ntypedef complex<double> P;\n\nstruct L : public vector<P>{//??´???\n  L(const P &a, const P &b){\n    push_back(a);push_back(b);\n  }\n};\n\nstruct C{//???\n  P c; double r;\n  C(const P &c,double r): c(c),r(r){}\n};\n\nnamespace std{//??????????????????\n  bool operator < (const P& a,const P& b){\n    return real(a)!= real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b)\n  }\n  bool operator == (const P& a,const P& b){\n    return a.real()==b.real()&&a.imag()==b.imag();\n  }\n}\n\ndouble dot(P a,P b){\n  return real(conj(a)*b);\n}\n\ndouble cross(P a,P b){\n  return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n  b-=a;c-=a;\n  if(cross(b,c)>0)   return +1;// counter clockwise \n  if(cross(b,c)<0)   return -1;// clockwise \n  if(dot(b,c)<0)     return +2;// c-a-b on line\n  if(norm(b)<norm(c))return -2;// a-b-c on line\n  return 0;                    // a-c-b on lone\n}\n\nint main()\n{\n  double xp1,yp1,xp2,yp2;\n  int q;\n  int i,j;\n\n  cin>>xp1>>yp1>>xp2>>yp2;\n  cin>>q;\n\n  P p1(xp1,yp1),p2(xp2,yp2);\n\n  rep(i,q){\n    double xp,yp;\n    cin>>xp>>yp;\n    P p(xp,yp);\n    P t=dot(p2-p1,p-p1)/norm(p2-p1)*(p2-p1);\n    P ans=p1+t;\n    printf(\"%.10f %.10f\\n\",ans.real(),ans.imag());\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define Fi first\n#define Se second\n#define pb push_back\n#define mp make_pair\n#define rep(x, a, b) for(int x = (a); x <= (b); ++ x)\n#define per(x, a, b) for(int x = (a); x >= (b); -- x)\n#define rop(x, a, b) for(int x = (a); x < (b); ++ x)\n#define por(x, a, b) for(int x = (a); x > (b); -- x) \n\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef unsigned int unt;\ntypedef double db;\ntypedef pair <int, int> pii;\ntypedef vector <int> vi;\n\nconst db eps  = 1e-8;\nconst db _PI  = 3.1415926535897932384;\nconst db _E   = 2.7182818284590452354;\nconst int inf = 0x3f3f3f3f;\nconst LL INF  = 0x3f3f3f3f3f3f3f3fll;\n\nstruct Point {\n\tdb x, y;\n\tPoint(db _x = 0, db _y = 0) { x = _x, y = _y; }\n\tvoid print() { printf(\"%.10f %.10f\", x, y); }\n};\n\ntypedef Point Vector;\n\nVector operator + (const Vector &a, const Vector &b) {\n\treturn Vector(a.x + b.x, a.y + b.y);\n}\nVector operator - (const Vector &a, const Vector &b) {\n\treturn Vector(a.x - b.x, a.y - b.y);\n}\nVector operator * (const Vector &a, const db &b) {\n\treturn Vector(a.x * b, a.y * b);\n}\nVector operator / (const Vector &a, const db &b) {\n\treturn Vector(a.x / b, a.y / b);\n}\ndb operator * (const Vector &a, const Vector &b) {\n\treturn a.x * b.x + a.y * b.y;\n}\ndb operator ^ (const Vector &a, const Vector &b) {\n\treturn a.x * b.y - a.y * b.x;\n}\ndb dis(const Point &a, const Point &b) {\n\treturn sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\ndb dis2(const Point &a, const Point &b) {\n\treturn (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);\n}\nPoint Projection(const Point &p1, const Point &p2, const Point &p) {\n\tdb len = (p2 - p1) * (p - p1);\n\treturn p1 + (p2 - p1) * (len / dis2(p1, p2));\n}\n\nint main() {\n\tPoint p1, p2;\n\tscanf(\"%lf%lf%lf%lf\", &p1.x, &p1.y, &p2.x, &p2.y);\n\tint q; scanf(\"%d\", &q);\n\trep(i, 1, q) {\n\t\tPoint p;\n\t\tscanf(\"%lf%lf\", &p.x, &p.y);\n\t\tProjection(p1, p2, p).print();\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define FOR(i,n,m) for(int i=(int)(n); i<=(int)(m); i++)\n#define RFOR(i,n,m) for(int i=(int)(n); i>=(int)(m); i--)\n#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)\n#define RITR(x,c) for(__typeof(c.rbegin()) x=c.rbegin();x!=c.rend();x++)\n#define setp(n) fixed << setprecision(n)\n\ntemplate<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }\n\n#define ll long long\n#define vll vector<ll>\n#define vi vector<int>\n#define pll pair<ll,ll>\n#define pi pair<int,int>\n\n#define all(a) (a.begin()),(a.end())\n#define rall(a) (a.rbegin()),(a.rend())\n#define fi first\n#define se second\n#define pb push_back\n#define mp make_pair\n#define ins insert\n\nusing namespace std;\n\n//-------------------------------------------------\n//--Geometry Template (Plane)\n//-------------------------------------------------\n\nusing lf = double;\nconst lf EPS = 1e-9;\nconst lf PI = acos(-1);\n\n#define sgn(x) (((x)<-EPS)?-1:((x)>EPS)?1:0)\n#define EQ(x,y) (sgn((y)-(x))==0)\n\nstruct V {\n    lf x,y;\n    V(){}\n    V(lf x, lf y):x(x),y(y){}\n    V(const V &v):x(v.x),y(v.y){}\n    V& operator+=(const V &v){x+=v.x; y+=v.y; return *this;}\n    V& operator-=(const V &v){x-=v.x; y-=v.y; return *this;}\n    V& operator*=(lf k){x*=k; y*=k; return *this;}\n    V& operator/=(lf k){x/=k; y/=k; return *this;}\n    V operator+(const V &v){return V(*this)+=v;}\n    V operator-(const V &v){return V(*this)-=v;}\n    V operator*(lf k){return V(*this)*=k;}\n    V operator/(lf k){return V(*this)/=k;}\n    V operator-(){return V(-x,-y);}\n    lf sq(){return x*x+y*y;}\n    lf norm(){return sqrt(sq());}\n    V unit(){return V(*this)/=norm();}\n    lf arg(){return atan2(y,x);}\n    V rot(lf c, lf s){return V(x*c-y*s,x*s+y*c);}\n    V rot(lf a){return rot(sin(a),cos(a));}\n    V rot90(){return V(-y,x);}\n    bool operator<(const V &v){return x<v.x;}\n    friend ostream& operator<<(ostream &os, const V &v){return os<<'('<<v.x<<\", \"<<v.y<<')';}\n};\n\nlf dot(const V &a, const V &b){return a.x*b.x+a.y*b.y;}\nlf det(const V &a, const V &b){return a.x*b.y-a.y*b.x;}\n\nint ccw(V a, V b, V c){\n    b-=a; c-=a;\n    if (sgn(det(b,c))>0) return 1;\n    else if(sgn(det(b,c))<0) return -1;\n    else if(sgn(dot(b,c))<0) return 2;\n    else if(sgn(b.norm()-c.norm())<0) return -2;\n    return 0;\n}\n\nstruct Line {\n    V p,q;\n    Line(){}\n    Line(const V &p, const V &q):p(p),q(q){}\n    Line(const Line &l):Line(l.p,l.q){}\n    V unit(){return (q-p).unit();}\n    lf arg(){return (q-p).arg();}\n    Line rot(lf c, lf s){return Line(p.rot(c,s),q.rot(c,s));}\n    Line rot(lf a){return Line(p.rot(a),q.rot(a));}\n    Line rot90(){return Line(p.rot90(),q.rot90());}\n};\n\nstruct Segment : Line {\n    Segment(){}\n    Segment(const V &p, const V &q):Line(p,q){}\n    Segment(const Segment &s):Line(s){}\n    lf sq(){return (Line::q-Line::p).sq();}\n    lf norm(){return (Line::q-Line::p).norm();}\n};\n\n// functions about lines\nbool parallel(V &a, V &b){return EQ(det(a,b),0.0);}\nbool parallel(Line &a, Line &b){return EQ(det(a.q-a.p,b.q-b.p),0.0);}\n\nbool samel(Line &a, Line &b){return parallel(a,b)&&EQ(det(a.q-a.p,b.p-a.p),0.0);}\nbool insec(Line &a, Line &b){return !parallel(a,b);}\nbool insec(Segment &a, Segment &b){\n    int c1 = ccw(a.p,a.q,b.p)*ccw(a.p,a.q,b.q);\n    int c2 = ccw(b.p,b.q,a.p)*ccw(b.p,b.q,a.q);\n    return (c1<=0 && c2<=0);\n}\nbool insec(Line &a, Segment &b){return ccw(a.p,a.q,b.p)*ccw(a.p,a.q,b.q)<=0;}\n\n// use only if lines have intersection\nV cpoint(Line &a, Line &b){\n    V r(a.q-a.p);\n    r *= det(b.p-a.p,b.q-b.p)/det(a.q-a.p,b.q-b.p);\n    return a.p+r;\n}\n\nlf distance(V &a, V &b){return (b-a).norm();}\nlf distance(Line &l, V &v){return abs(det((l.q-l.p).unit(),v-l.p));}\nlf distance(Line &a, Line &b){return (parallel(a,b))?distance(a,b.p):0.0;}\nlf distance(Segment &s, V &v){\n    if (sgn(dot(s.q-s.p,v-s.p))<0) return distance(s.p,v);\n    else if(sgn(dot(s.p-s.q,v-s.q))<0) return distance(s.q,v);\n    return distance((Line&)s,v);\n}\nlf distance(Segment &a, Segment &b){\n    if (insec(a,b)) return 0.0;\n    lf A=min(distance(a,b.p),distance(a,b.q));\n    lf B=min(distance(b,a.p),distance(b,a.q));\n    return min(A,B);\n}\nlf distance(Line &a, Segment &b){\n    if (insec(a,b)) return 0.0;\n    return min(distance(a,b.p),distance(a,b.q));\n}\n\nV subdiv(V &a, V &b, lf m, lf n){return (a*n+b*m)/(m+n);}\nV outside(V &a, V &b, lf m, lf n){return (-a*n+b*m)/(m-n);}\nV ppfoot(Line &l, V &v){\n    V u = (l.q-l.p).unit();\n    return l.p+u*dot(u,v-l.p);\n}\n\nLine vbsector(V &a, V &b){\n    V m = (a+b)/2;\n    return Line(m, m+(b-a).rot90());\n}\nLine absector(V &c, V &a, V &b){\n    lf m=(a-c).norm(), n=(b-c).norm();\n    return Line(c,subdiv(a,b,m,n));\n}\nLine perpend(V &c, V &a, V &b){return Line(c,c+(b-a).rot90());}\n\n//-------------------------------------------------\n\nint main(void)\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    int a,b,c,d; cin>>a>>b>>c>>d;\n    Line l(V(a,b), V(c,d));\n    int q; cin>>q;\n    cout<<setp(12);\n    while(q--){\n        int x,y; cin>>x>>y;\n        V v = V(x,y);\n        V ans = ppfoot(l,v);\n        cout<<ans.x<<\" \"<<ans.y<<\"\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <cstring>\n#include <utility>\n#include <numeric>\n#include <complex>\n#include <iomanip>\n\nusing namespace std;\n\n// common\n#define X real()\n#define Y imag()\n\nusing Vector2 = complex<double>;\nusing Line = pair<Vector2, Vector2>;\nusing Segment = pair<Vector2, Vector2>;\nconst double EPS = 1e-10;\nconst double PI = 3.14159265359;\n\nbool isSame(double a, double b){\n    if(abs(a - b) < EPS){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n// struct\n\nstruct Circle{\n    Vector2 c;\n    double r;\n    Circle(Vector2 c, double r){\n        this->c = c;\n        this->r = r;\n    }\n};\n\n// Vector2\ndouble dot(Vector2 a, Vector2 b){\n    return (a.X * b.X + a.Y * b.Y);\n}\n\ndouble cross(Vector2 a, Vector2 b){\n    return (a.X * b.Y - a.Y * b.X);\n}\n\nVector2 project(Line l, Vector2 p){\n    Vector2 base = l.second - l.first;\n    double r = dot(p - l.first, base) / norm(base);\n    return l.first + base * r;\n}\n\nint main(){\n\n    int x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Line l(Vector2(x1, y1), Vector2(x2, y2));\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++){\n        int x, y;\n        cin >> x >> y;\n        Vector2 p(x, y);\n        Vector2 ans = project(l, p);\n        cout << fixed << setprecision(9) << ans.X << \" \" << ans.Y << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <vector>\n#include <iomanip>\n\nconst double kEpsilon = 1e-10;\ninline bool equals(double a, double b)\n{\n    return fabs(a - b) < kEpsilon;\n}\n\nclass Point\n{\n  public:\n    double x, y;\n\n    Point() = default;\n    Point(double x, double y) : x(x), y(y)\n    {\n    }\n\n    Point operator+(const Point &p)\n    {\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator-(const Point &p)\n    {\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator*(const double k)\n    {\n        return Point(x * k, y * k);\n    }\n\n    double SquaredNorm()\n    {\n        return x * x + y * y;\n    }\n    double abs()\n    {\n        return sqrt(this->SquaredNorm());\n    }\n\n    bool operator<(const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    bool operator==(const Point &p) const\n    {\n        return fabs(x - p.x) < kEpsilon && fabs(y - p.y) < kEpsilon;\n    }\n\n    double dot(const Point &p) const\n    {\n        return x * p.x + y * p.y;\n    }\n    double cross(const Point &p) const\n    {\n        return x * p.y - y * p.x;\n    }\n};\n\nPoint projection(Point &p1, Point &p2, Point &p)\n{\n    auto q = p2 - p1;\n    auto a = q.dot(p - p1) / q.SquaredNorm();\n    return p1 + q * a;\n}\n\nint main()\n{\n\n    Point p1, p2, p, r;\n\n    std::cin >> p1.x >> p1.y >> p2.x >> p2.y;\n\n    int n;\n    std::cin >> n;\n\n    for (size_t i = 0; i < n; ++i)\n    {\n        std::cin >> p.x >> p.y;\n        r = projection(p1, p2, p);\n        std::cout << std::setprecision(20);\n        std::cout << r.x << \" \" << r.y << std::endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<map>\n#include<vector>\n#include<queue>\n#include<functional>\n#include<cstring>\n#include<cstdlib>\n#include<complex>\nusing namespace std;\ntypedef long long ll;\ntypedef complex < double > Point;\n/*\n    Point????????????\n    Point A????????????X??則?即?...real(A) or A.real()\n                   Y??則?即?...imag(A) or A.imag() ??其???????????贈???????????????????????????????????即???\n\n    Point A,B????????????A+B,A-B,(double)k * A???????????????\n    ????????????????????蔵???sqrt(norm(A))\n    ?????????????????蔵???sqrt(norm(A-B))\n    norm(A)???X^2+Y^2?????????\n*/\ntypedef vector < Point > Polygon;\nnamespace std {\n    bool operator < (Point a,Point b) {\n        //????????則??則?即??????????????????????\"??則??????\"?????????\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n}\nconst double EPS = 1e-8;\nconst double INF = 1e12;\n\n\n\nstruct Line : Polygon{\n    Line(Point p,Point q){ push_back(p);push_back(q); }\n};\nstruct Circle{\n    Point p;\n    double r;\n    Circle(Point a, double s){ p = a;r = s; }\n};\n\ndouble cross(Point p,Point q){\n    return imag(conj(p)*q);\n}\n\ndouble dot(Point p,Point q){\n    return real(conj(p)*q);\n}\n\nint ccw(Point a,Point b,Point c){\n    b-=a,c-=a;\n    if(cross(b,c)>0)return 1; //???????即???????\n    if(cross(b,c)<0)return -1; //????即???????\n    if(dot(b,c)<0)return 2; //??卒????????? c - a - b\n    if(norm(b)<norm(c))return -2; // ??卒????????? a - b - c\n    return 0; // ??卒????????? a - c - b\n}\n\nPoint normalize(Point P, double l){\n    double a = real(P), b = imag(P);\n    double y = sqrt(b*b/(a*a+b*b)*l*l);\n    double x = (a/b)*y;\n\n    return Point(x,y);\n}\n\ndouble heron(Point A, Point B, Point C){\n    double a = sqrt(norm(A-B));\n    double b = sqrt(norm(B-C));\n    double c = sqrt(norm(C-A));\n    double s = (a+b+c)/2;\n\n    return sqrt(s*(s-a)*(s-b)*(s-c));\n}\nbool intersectLL(Line l, Line m) {\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // ????????則??????\n         abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // ????????????\n}\nbool intersectLS(Line l, Line s) {\n    return cross(l[1]-l[0], s[0]-l[0])*       // s[0] ??? l??????\n           cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] ??? l??????\n}\nbool intersectLP(Line l, Point p) {\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n}\nbool intersectSS(Line s, Line t) {\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n}\nbool intersectSP(Line s, Point p) {\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n}\n//???2?????????????????????????????????????????????,??????????????????????????属\nint intersectCC(Circle A, Circle B, Point *p, Point *q){\n\n    Point P,Q;\n    if(B.p<A.p)swap(A.p,B.p);\n    Point dv = B.p - A.p;//????????????\n\n\n    double L = sqrt(norm(dv));\n    int num;\n    //?????蔵???L?????卒???\n    if( L==(A.r + B.r) ){\n        num = 1;\n        //??????1???\n        //?????属???????????贈???????????則????????即?????属??????\n        dv = normalize(dv,A.r);\n        P = Q = Point(real(dv)+real(A.p),imag(dv)+imag(A.p));\n    }\n    else if( L<(A.r + B.r) && L > fabs(A.r - B.r) ){\n        num = 2;\n        //??????2???\n        /*\n        ???????????????Q??????????????????dv??????????????????????????即?????????pt??即??????\n        ??????????????卒?則?????則???蔵p0-pt-Q???p1-pt-Q?????則??????\n        p0-pt???????????????t??即????????即???????????????????則???蔵???Q-pt??????????????????????????????\n\n        r0*r0 - t*t = r1*r1 - (L-t)*(L-t)\n        r0*r0 - t*t = r1*r1 - L*L - t*t + 2*L*t\n        t = (r0*r0 - r1*r1 + L*L)/(2*L)\n\n        t?????????p0-Q??????????????即dv??????????????即????則????a????賊???????\n        dv?????????????????????+a,-a?????則?即?????賊?????????属????????即??????\n        */\n\n        //t????賊???????\n        double t = 0.5*( A.r*A.r - B.r*B.r + L*L)/L;\n\n        //p0-Q??????????????即dv????????????????則????\n        double a = acos( t/A.r );\n\n        //dv????????????????則????\n        double a0 = atan2( imag(dv), real(dv) );\n\n        //??????\n        P = Point( real(A.p) + A.r*cos(a0+a), imag(A.p) + A.r*sin(a0+a) );\n        Q = Point( real(A.p) + A.r*cos(a0-a), imag(A.p) + A.r*sin(a0-a) );\n\n    }\n    else{\n        num = 0;\n        //????????????\n    }\n\n    *p = P;\n    *q = Q;\n\n    return num;\n}\nPoint projection(Line l, Point p) {\n    double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + t * (l[0]-l[1]);\n}\nPoint reflection(Line l, Point p) {\n    return p + (projection(l, p) - p) + (projection(l, p) - p);\n}\ndouble distanceLP(Line l, Point p) {\n    return abs(p - projection(l, p));\n}\ndouble distanceLL(Line l, Line m) {\n    return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(Line l, Line s) {\n    if (intersectLS(l, s)) return 0;\n    return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(Line s, Point p) {\n    const Point r = projection(s, p);\n    if (intersectSP(s, r)) return abs(r - p);\n    return min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(Line s, Line t) {\n    if (intersectSS(s, t)) return 0;\n    return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n             min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\nPoint crosspoint(Line l, Line m) {\n    double A = cross(l[1] - l[0], m[1] - m[0]);\n    double B = cross(l[1] - l[0], l[1] - m[0]);\n    if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n    if (abs(A) < EPS);\n    return m[0] + B / A * (m[1] - m[0]);\n}\n\nint main(){\n    Point P,Q;\n    cin>>real(P)>>imag(P)>>real(Q)>>imag(Q);\n    Line L = Line(P,Q);\n    int n;\n    cin>>n;\n    while(n--){\n        Point R;\n        cin>>real(R)>>imag(R);\n        R = projection(L,R);\n        cout<<real(R)<<\" \"<<imag(R)<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\ntypedef long long ll;\ndouble pi=3.14159265359; //円周率\ndouble EPS = 1e-10; //誤差\n\nclass point\n{\n\tpublic:\n\tdouble x,y;\n\n\tpoint()\n\t{x=0;y=0;}\n\t//コンストラクタ\n\tpoint(double a,double b)\n\t{\n\t\tx=a;y=b;\n\t}\n\n\t//足し算\n\tpoint operator + (point p)\n\t{\n\t\treturn point(x+p.x,y+p.y);\n\t}\n\t//引き算\n\tpoint operator - (point p)\n\t{\n\t\treturn point(x-p.x,y-p.y);\n\t}\n\t//d倍\n\tpoint operator * (double d)\n\t{\n\t\treturn point(x*d,y*d);\n\t}\n\t//x座標昇順でソートする\n\tbool operator < (const point &p)\n\tconst {\n\t\tif(std::abs(x-p.x)>EPS)\n\t\t\treturn x<p.x;\n\t\telse\n\t\t\treturn y<p.y;\n\t}\n\t//内積\n\t//直交判定...abs(dot())<EPS\n\tdouble dot(point p)\n\t{\n\t\treturn x*p.x+y*p.y;\n\t}\n\t//外積\n\t//平行判定...abs(cross())<EPS\n\tdouble cross(point p)\n\t{\n\t\treturn x*p.y-y*p.x;\n\t}\n\t//絶対値を求める\n\tdouble abs()\n\t{\n\t\treturn sqrt(x*x+y*y);\n\t}\n\t//単位ベクトルを求める\n\tpoint ev()\n\t{\n\t\treturn point(x/abs(),y/abs());\n\t}\n\t//単位法線ベクトル（の1つ）を求める\n\t//もうひとつは-1倍することで求まる\n\tpoint nev()\n\t{\n\t\treturn point(-y/abs(),x/abs());\n\t}\n\t//2点間の距離を求める\n\t//distがEPS未満なら2点は同じ位置にあるとみなす\n\tdouble pdist(point p)\n\t{\n\t\tpoint v=point(p.x-x,p.y-y);\n\t\treturn v.abs();\n\t}\n\t//この点と直線p1-p2の距離を求める\n\tdouble ldist(point p1,point p2)\n\t{\n\t\treturn std::abs((p2.y-p1.y)*x-(p2.x-p1.x)*y+p2.x*p1.y+p2.y*p1.x)/(p2-p1).abs();\n\t}\n\n};\n\n//線分p1-p2上に点qがあるか判定\nbool on_seg(point p1,point p2,point q)\n{\n\treturn abs((p1-q).cross(p2-q))<EPS && (p1-q).dot(p2-q)<=EPS;\n}\n//直線p1-p2と直線q1-q2の交点\n//線分の交差判定はこれの戻り値が線分上にあるかどうかで判定する...on_seg(p1,p2,intersection(p1,p2,q1,q2))\npoint intersection(point p1,point p2,point q1,point q2)\n{\n\treturn p1 + (p2-p1) * ((q2-q1).cross(q1-p1) / (q2-q1).cross(p2-p1));\n}\n//n頂点からなる多角形の面積を求める(vectorで頂点は与えられる)\ndouble area(vector<point> p)\n{\n\tdouble ret=0;\n\tfor(int i=0;i<p.size()-1;i++)\n\t{\n\t\tret+=p[i].cross(p[i+1]);\n\t}\n\tret+=p[p.size()-1].cross(p[0]);\n\tret/=2;\n\treturn ret;\n}\n/*\n3点a,b,cをa->b->cと進むとき、\n* a->bで時計方向に折れてb->c (clockwise)\n* a->bで反時計方向に折れてb->c(counter clockwise)\n* a->bで逆を向いてaを通り越してb->c(c--a--b on line)\n* a->bでそのままb->c(a--b--c on line)\n* a->bで逆を向いてb->c(a--c--b on line)\n\nのいずれのパターンかを判定する\n*/\nint ccw(point a,point b,point c)\n{\n\tb=b-a;c=c-a;\n\tif(b.cross(c)>EPS)\n\t\treturn 1; //counter clockwise\n\tif(b.cross(c)<-EPS)\n\t\treturn -1; //clockwise\n\tif(b.dot(c)<-EPS)\n\t\treturn 2; //c--a--b on line\n\tif(b.x*b.x+b.y*b.y < c.x*c.x+c.y*c.y)\n\t\treturn -2; //a--b--c on line\n\treturn 0; //a--c--b on line\n}\n//凸包を求める\nvector<point> convex_hull(vector<point> p)\n{\n\tint n=p.size();\n\tint k=0;\n\tsort(p.begin(),p.end());\n\tvector<point> ch(2*n);\n\t//lower-hull 下側凸包\n\tfor(int i=0;i<n;ch[k++]=p[i++])\n\t{\n\t\twhile(k>=2 && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\t//upper-hull 上側凸包\n\tfor(int i=n-2,t=k+1;i>=0;ch[k++]=p[i--])\n\t{\n\t\twhile(k>=t && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\tch.resize(k-1);\n\treturn ch;\n}\n\nint main()\n{\n\tcout.setf(ios::fixed);\n\tcout.precision(12);\n\tpoint p1,p2;\n\tdouble a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\tp1=point(a,b);\n\tp2=point(c,d);\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tpoint f;\n\t\tcin>>a>>b;\n\t\tf=point(a,b);\n\t\tpoint x;\n\t\tx=f+(p2-p1).nev()*f.ldist(p1,p2);\n\t\tcerr<<x.x<<\" \"<<x.y<<endl;\n\t\tif(abs((p2-p1).cross(x))>EPS)\n\t\t\tx=x-(p2-p1).nev()*f.ldist(p1,p2)*2;\n\t\tcout<<x.x<<\" \"<<x.y<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <algorithm>\n#include <bitset>\n#include <cassert>\n#include <cctype>\n#include <clocale>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <deque>\n#include <fstream>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <iterator>\n#include <list>\n#include <map>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <string>\n#include <tuple>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>\n#include <vector>\n\nusing namespace std;\n\n#define IOS ios::sync_with_stdio(false); cin.tie(0);\n#define FOR(i, s, n) for(int i = (s), i##_len=(n); i < i##_len; ++i)\n#define FORS(i, s, n) for(int i = (s), i##_len=(n); i <= i##_len; ++i)\n#define VFOR(i, s, n) for(int i = (s); i < (n); ++i)\n#define VFORS(i, s, n) for(int i = (s); i <= (n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define REPS(i, n) FORS(i, 0, n)\n#define VREP(i, n) VFOR(i, 0, n)\n#define VREPS(i, n) VFORS(i, 0, n)\n#define RFOR(i, s, n) for(int i = (s), i##_len=(n); i >= i##_len; --i)\n#define RFORS(i, s, n) for(int i = (s), i##_len=(n); i > i##_len; --i)\n#define RREP(i, n) RFOR(i, n, 0)\n#define RREPS(i, n) RFORS(i, n, 0)\n#define ALL(v) (v).begin(), (v).end()\n#define SORT(v) sort(ALL(v))\n#define RSORT(v) sort(ALL(v), greater<decltype(v[0])>())\n#define SZ(x) ((int)(x).size())\n#define PB push_back\n#define EB emplace_back\n#define MP make_pair\n#define MT make_tuple\n#define BIT(n) (1LL<<(n))\n#define UNIQUE(v) v.erase(unique(ALL(v)), v.end())\n\nusing ll = long long;\nusing ui = unsigned int;\nusing ull = unsigned long long;\nusing Pi_i = pair<int, int>;\nusing VB = vector<bool>;\nusing VC = vector<char>;\nusing VD = vector<double>;\nusing VI = vector<int>;\nusing VLL = vector<ll>;\nusing VS = vector<string>;\nusing VSH = vector<short>;\nusing VULL = vector<ull>;\n\nconst int MOD = 1000000007;\nconst int INF = 1000000000;\nconst int NIL = -1;\nconst double EPS = 1E10;\n\ntemplate<class T, class S>\nbool chmax(T &a, const S &b){\n    if(a < b){\n        a = b; return true;\n    }\n    return false;\n}\ntemplate<class T, class S>\nbool chmin(T &a, const S &b){\n    if(b < a){\n        a = b; return true;\n    }\n    return false;\n}\n\n\nclass Point2D{\n    double x, y;\npublic:\n    Point2D(double X=0, double Y=0): x(X), y(Y){}\n    Point2D(const Point2D& v): x(v.x), y(v.y){}\n    template<class T>\n    Point2D(const vector<T> &v){\n        assert(v.size() == 2);\n        x = v[0]; y = v[1];\n    }\n    template<class T, class T2>\n    Point2D(const pair<T, T2> &p){\n        x = p.first; y = p.second;\n    }\n\n    void setX(double X){x = X;}\n    double getX(){return x;}\n    void setY(double Y){y = Y;}\n    double getY(){return y;}\n\n    Point2D operator+() const{return *this;}\n    Point2D operator-() const{return Point2D(-x, -y);}\n    \n    Point2D& operator=(const Point2D& v){\n        x = v.x; y = v.y;\n        return *this;\n    }\n\n    Point2D& operator+=(const Point2D& v){\n        x += v.x; y += v.y;\n        return *this;\n    }\n\n    Point2D& operator-=(const Point2D& v){\n        x -= v.x; y -= v.y;\n        return *this;\n    }\n\n    Point2D& operator*=(const double a){\n        x *= a; y *= a;\n        return *this;\n    }\n\n    Point2D& operator/=(const double a){\n        x /= a; y /= a;\n        return *this;\n    }\n\n    Point2D operator+(const Point2D& v) const{\n        Point2D tmp(*this);\n        return tmp += v;\n    }\n\n    Point2D operator-(const Point2D& v) const{\n        Point2D tmp(*this);\n        return tmp -= v;\n    }\n\n    Point2D operator*(const double a) const{\n        Point2D tmp(*this);\n        return tmp *= a;\n    }\n\n    friend Point2D operator*(double a, const Point2D v){\n        return v * a;\n    }\n\n    Point2D operator/(const double a) const{\n        Point2D tmp(*this);\n        return tmp /= a;\n    }\n\n    double norm(){return x*x + y*y;}\n    friend double norm(Point2D &v){return v.norm();}\n    double abs(){return sqrt(norm());}\n    friend double abs(Point2D &v){return v.abs();}\n\n    bool operator<(const Point2D &v) const{\n        return x != v.x ? x < v.x : y < v.y;\n    }\n\n    bool operator>(const Point2D &v) const{\n        return x != v.x ? x > v.x : y > v.y;\n    }\n\n    bool operator==(const Point2D &v) const{\n        return std::abs(x - v.x) < EPS\n            && std::abs(y - v.y) < EPS;\n    }\n\n    bool operator<=(const Point2D &v) const{\n        return (*this < v) || (*this == v);\n    }\n\n    bool operator>=(const Point2D &v) const{\n        return (*this > v) || (*this == v);\n    }\n\n    friend double dot(Point2D a, Point2D b){\n        return a.x*b.x + a.y*b.y;\n    }\n\n    friend double cross(Point2D a, Point2D b){\n        return a.x*b.y - a.y*b.x;\n    }\n\n    friend double distance(Point2D a, Point2D b){\n        return (a - b).abs();\n    }\n};\nusing Vector2D = Point2D;\n\nclass Line2D{\n    Point2D p1, p2;\npublic:\n    Line2D(){}\n    Line2D(Point2D a, Point2D b): p1(a), p2(b){}\n\n    void setP1(const Point2D p){p1 = p;}\n    Point2D getP1(){return p1;}\n    void setP2(const Point2D p){p2 = p;}\n    Point2D getP2(){return p2;}\n\n    friend Point2D project(Line2D l, Point2D p){\n        Point2D base = l.p2 - l.p1;\n        double r = dot(p - l.p1, base) / norm(base);\n        return l.p1 + base * r;\n    }\n};\n\nint main(){\n    double x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;\n    Line2D l(Point2D(x1, y1), Point2D(x2, y2));\n    int q; cin >> q;\n    REP(i, q){\n        double x, y; cin >> x >> y;\n        Point2D a = project(l, Point2D(x, y));\n        cout << fixed << setprecision(10) << a.getX() << \" \" << a.getY() << \"\\n\";\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define ALL(x) x.begin(),x.end()\n#define rep(i,n) for(int i=0;i<n;i++)\n#define debug(v) cout<<#v<<\":\";for(auto x:v){cout<<x<<' ';}cout<<endl;\n#define INF 1000000000\n#define mod 1000000007\ntypedef long long ll;\nconst ll LINF = 1001002003004005006ll;\nint dx[]={1,0,-1,0};\nint dy[]={0,1,0,-1};\nll gcd(ll a,ll b){return b?gcd(b,a%b):a;}\ntemplate<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }\n \n//幾何だいっきらい\n \nusing Real=long double;\nusing Point=complex<Real>;\nconst Real EPS=1e-10;\nconst Real pi=acosl(-1);\n \ninline bool eq(Real a,Real b){\n   return fabs(a-b)<EPS;\n}\n \nPoint operator*(const Point &p,const Real &d){\n   return Point(real(p)*d,imag(p)*d);\n}\n\n// 点 p を反時計回りに theta 回転\nPoint rotate(Real theta, const Point &p) {\n return Point(cos(theta)*p.real()-sin(theta)*p.imag(),sin(theta)*p.real()+cos(theta)*p.imag());\n}\n\nReal dis(Point a,Point b){\n   return abs(a-b);\n}\n\nReal radian_to_degree(Real r){\n   return r*180.0/pi;\n}\n\nReal degree_to_radian(Real d){\n   return d*pi/180.0;\n}\n\n//三角形の面積，サラスの公式\nReal area_triangle(Point a,Point b,Point c){\n   Point x=b-a,y=c-a;\n   return fabs(x.real()*y.imag()-x.imag()*y.real())/2;\n}\nstruct Circle{\n   Point center;\n   Real r;\n   Circle(Point center,Real r):center(center),r(r){}\n};\n \n \nstruct Line{\n   Point p1,p2;\n   Line(Point p1,Point p2):p1(p1),p2(p2){}\n \n   //Ax + By = C\n   Line(Real A,Real B,Real C){\n       if(eq(A,0))     p1=Point(0,C/B),p2=Point(1,C/B);\n       else if(eq(B,0))p1=Point(C/A,0),p2=Point(C/A,1);\n       else            p1=Point(0,C/B),p2=Point(C/A,0);\n   }\n};\n \nstruct Segment:Line{\n   Segment()=default;\n   Segment(Point p1,Point p2):Line(p1,p2){}\n};\n \n//v\n//外積\nReal cross(const Point &a, const Point &b) {\n return real(a)*imag(b)-imag(a)*real(b);\n}\n\n//v\n//内積\nReal dot(const Point &a, const Point &b) {\n return real(a)*real(b)+imag(a)*imag(b);\n}\n \n//v\n//平行判定，外積0かをみる\nbool parallel(Line &a,Line &b){\n   return eq(cross(a.p1-a.p2,b.p1-b.p2),0.0);\n}\n \n//v\n//垂直判定，内積0かをみる\nbool orthogonal(Line &a,Line &b){\n   return eq(dot(a.p1-a.p2,b.p1-b.p2),0.0);\n}\n\n//正射影，pからlに下した推薦の足を求める\nPoint projection(const Line &l, const Point &p){\n    //ベクトルl上のどの位置に垂線の足が来るか求める\n    Real k=dot(l.p1-l.p2,p-l.p1)/norm(l.p1-l.p2);\n    return l.p1+(l.p1-l.p2)*k;\n}\n \n//v\n//最小包含円を返す　計算量は期待値O(n)\nCircle MinimumBoundingCircle(vector<Point> v){\n   int n=v.size();\n  \n   //ランダムシャッフル．いぢわるされたくないもんだ\n   mt19937 mt(time(0));\n   shuffle(v.begin(),v.end(),mt);\n \n   Circle ret(0,0);\n   //2点で円を作る\n   auto make_circle2=[&](Point a,Point b){\n       return Circle((a+b)*0.5,dis(a,b)/2);\n   };\n   //3点で円を作る\n   auto make_circle3=[&](Point A,Point B,Point C){\n       //wikiの公式\n       Real S=area_triangle(A,B,C);\n       Real a=dis(B,C),b=dis(A,C),c=dis(A,B);\n       Point cent=A*(a*a*(b*b+c*c-a*a)/(16*S*S))+B*(b*b*(c*c+a*a-b*b)/(16*S*S))+C*(c*c*(a*a+b*b-c*c)/(16*S*S));\n       return Circle(cent,dis(cent,A));\n   };\n   auto isIn=[&](Point a){\n       return dis(ret.center,a)<ret.r+EPS;\n   };\n \n   ret=make_circle2(v[0],v[1]);\n   for(int i=2;i<n;i++){\n       //v[i]が円に入っていないなら\n       if(!isIn(v[i])){\n           //円内にないなら点v[i]は必ず円周上に来る\n           ret=make_circle2(v[0],v[i]);\n           for(int j=1;j<i;j++){\n               if(!isIn(v[j])){\n                   //この時iとjが円周上を考える\n                   ret=make_circle2(v[i],v[j]);\n                   //最後の1点の決定\n                   for(int k=0;k<j;k++){\n                       if(!isIn(v[k])){\n                           ret=make_circle3(v[i],v[j],v[k]);\n                       }\n                   }\n               }\n           }\n       }\n   }\n   return ret;\n}\n \nsigned main(){\n   cin.tie(0);\n   ios::sync_with_stdio(0);\n   cout<<fixed<<setprecision(12);\n \n\n    Real xp1,yp1,xp2,yp2;\n    cin>>xp1>>yp1>>xp2>>yp2;\n    Line l(Point(xp1,yp1),Point(xp2,yp2));\n    int q;cin>>q;\n    while(q--){\n        Real x,y;cin>>x>>y;\n        auto ans=projection(l,Point(x,y));\n        cout<<ans.real()<<' '<<ans.imag()<<endl;\n    }\n    return 0;\n}\n \n \n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\ntemplate<class T> using vec = vector<T>;\ntemplate<class T> using vvec = vector<vec<T>>;\nusing R = double;\nusing P = complex<R>;\n#define x real()\n#define y imag()\nconst R eps = 1e-9,PI = acos(-1);\n\nbool equal(R a,R b){return abs(b-a)<eps;}\nbool equal0(R a){return equal(a,0.0);}\n\nP operator*(const P& p,const R& d){\n    return P(p.x*d,p.y*d);\n}\n\nistream &operator>>(istream& is,P& p){\n    R a,b;\n    is >> a >> b;\n    p = P(a,b);\n    return is;\n}\n\nostream &operator<<(ostream& os,P& p){\n    os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n//内積\ndouble dot(P a,P b) {return (conj(a)*b).real();}\n//外積\ndouble cross(P a,P b) {return (conj(a)*b).imag();}\n\nstruct L{\n    P a,b;\n    L(P a,P b):a(a),b(b){}\n    L(R A,R B,R C){\n        if(equal(A,0)) a = P(0,C/B),b = P(1,C/B);\n        else if(equal(B,0)) b = P(C/A,0),b = P(C/A,1);\n        else a = P(0,C/B),b = P(C/A,0);\n    }\n};\n\n//pをbに射影\nP projection(P p,P b) {return b*dot(p,b)/norm(b);}\n\n//pとp1 to p2 に射影\nP projection(L l,P p){\n    p -= l.a; l.b -= l.a;\n    P proj = projection(p,l.b);\n    return l.a+proj;\n}\n\nstruct S:L{\n    S(P a,P b):L(a,b){}\n};\n\n//点の回転方向を判定\nint ccw(P& p0,P p1,P p2){\n    p1 -= p0,p2 -= p0;\n    if(cross(p1,p2)>eps) return 1; //\"COUNTER_CLOCKWISE\"\n    if(cross(p1,p2)<-eps) return -1; //\"CLOCKWISE\"\n    if(dot(p1,p2)<0) return 2; //\"ONLINE_BACK\"\n    if(norm(p1)<norm(p2)) return -2; //\"ONLINE_FRONT\"\n    return 0; //\"ON_SEGMENT\"\n}\n\nbool is_parallel(L& l1,L& l2){\n    return equal0(cross(l1.b-l1.a,l2.b-l2.a));\n}\n\nbool is_orthogonal(L& l1,L& l2){\n    return equal0(dot(l1.a-l1.a,l2.b-l2.a));\n}\n\n//pをlに関して対称移動\nP reflection(L& l,P& p){\n    return p+(projection(l,p)-p);\n}\n\n//pがl上にあるか\nbool is_online(L& l,P& p){\n    return abs(ccw(l.a,l.b,p))!=1;\n}\n\nbool is_onsegment(S& s,P& p){\n    return ccw(s.a,s.b,p)==0;\n}\n\nint main(){\n    P p1,p2;\n    cin >> p1;\n    cin >> p2;\n    int Q;\n    cin >> Q;\n    for(int i=0;i<Q;i++){\n        P p;\n        cin >> p;\n        P res = projection(L(p1,p2),p);\n        cout << res << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long LL;\n\nconst double EPS = 1e-10;\nconst int COUNTER_CLOCKWISE = 1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = 2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\nconst int IN = 2;\nconst int ON = 1;\nconst int OUT = 0;\n\ntypedef complex<double> Point;\ntypedef Point Vector;\nstruct Segment {\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\ninline double equals(double a, double b);\ninline double dot(Vector a, Vector b);\ninline double cross(Vector a, Vector b);\ninline bool isOrthogonal(Vector a, Vector b);\ninline bool isParallel(Vector a, Vector b);\nPoint project(Segment s, Point p);\nPoint reflect(Segment s, Point p);\nint ccw(Point p0, Point p1, Point p2);\nbool intersect(Segment s1, Segment s2);\nbool intersect(Circle c, Line l);\nbool intersect(Circle c1, Circle c2);\ndouble getDistanceLP(Line l, Point p);\ndouble getDistanceSP(Segment s, Point p);\ndouble getDistance(Segment s1, Segment s2);\nPoint getCrossPoint(Segment s1, Segment s2);\npair<Point, Point> getCrossPoints(Circle c, Line l);\npair<Point, Point> getCrossPoints(Circle c1, Circle c2);\nint contains(Polygon g, Point p);\nPolygon andrewScan(Polygon s);\n\ninline double equals(double a, double b) {\n\treturn fabs(a - b) < EPS;\n}\nbool operator<(const Point &p1, const Point &p2) {\n\treturn p1.real() != p2.real() ? p1.real() < p2.real() : p1.imag() < p2.imag();\n}\nbool operator==(const Point &p1, const Point &p2) {\n\treturn equals(p1.real(), p2.real()) && equals(p1.imag(), p2.imag());\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.real()*b.real() + a.imag()*b.imag();\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.real()*b.imag() - a.imag()*b.real();\n}\ninline bool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\ninline bool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn (ccw(s1.p1, s1.p2, s2.p1)*ccw(s1.p1, s1.p2, s2.p2) <= 0 &&\n\t\tccw(s2.p1, s2.p2, s1.p1)*ccw(s2.p1, s2.p2, s1.p2) <= 0);\n}\nbool intersect(Circle c, Line l) {\n\treturn getDistanceLP(l, c.c) <= c.r;\n}\nbool intersect(Circle c1, Circle c2) {\n\treturn abs(c1.c - c2.c) <= c1.r + c2.r;\n}\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tassert(intersect(s1, s2));\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r*c.r - norm(pr - c.c));\n\treturn make_pair(pr + e*base, pr - e*base);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tassert(intersect(c1, c2));\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.imag() > b.imag()) swap(a, b);\n\t\tif (a.imag() < EPS && EPS<b.imag() && cross(a, b)>EPS) x = !x;\n\t}\n\treturn x ? 2 : 0;\n}\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tfor (int i = 2; i < s.size(); i++) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\treturn l;\n}\n\nint main() {\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<iostream>\n#include<complex>\n#include<cmath>\n\nusing namespace std;\n\nconst double EPS=1e-8;\nconst double INF=1e9;\n\ntypedef complex<double>Point;\n\n#define EQ(a,b) (fabs((a)-(b))<EPS)\n#define EQV(a,b) (abs((a)-(b))<EPS)\nstruct Segment{\n    Point p1,p2;\n    Segment(Point p1=Point(),Point p2=Point()):p1(p1),p2(p2){}\n};\n\ntypedef Segment Line;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\ntypedef vector<Point>Polygon;\n\ndouble dot(Point a,Point b){\n    return real(a)*real(b)+imag(a)*imag(b);\n}\n\ndouble cross(Point a,Point b){\n    return real(a)*imag(b)-imag(a)*real(b);\n}\n\nbool isOrthogonal(Point a,Point b){\n    return EQ(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Line l1,Line l2){\n    return isOrthogonal(l1.p2-l1.p1,l2.p2-l2.p1);\n}\n\nbool isParallel(Point a,Point b){\n    return EQ(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Line l1,Line l2){\n    return isParallel(l1.p2-l1.p1,l2.p2-l2.p1);\n}\n\nPoint project(Line l,Point p){\n    Point base=l.p2-l.p1;\n    double r=dot(p-l.p1,base)/norm(base);\n    return l.p1+base*r;\n}\n\nPoint reflect(Line l,Point p){\n    return p+(project(l,p)-p)*2.0;\n}\nint main(){\n    Line L;\n    scanf(\"%lf%lf\",&L.p1.real(),&L.p1.imag());\n    scanf(\"%lf%lf\",&L.p2.real(),&L.p2.imag());\n\n    int N;\n    scanf(\"%d\",&N);\n    while(N--){\n        Point P;\n        scanf(\"%lf%lf\",&P.real(),&P.imag());\n        Point prj=project(L,P);\n        printf(\"%.8f %.8f\\n\",prj.real(),prj.imag());\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <complex>\nusing namespace std;\n\nusing vec = complex<double>;\nusing line = pair<vec,vec>;\n\ndouble inner_product(vec u,vec v){\n    return real(u*conj(v));\n}\ndouble cross_product(vec u,vec v){\n    return imag(conj(u)*v);\n}\n\ndouble norm(vec& u){\n    return abs(u);\n}\n\nvec projection(line l,vec p){//p???l???????°???±\n    vec s=l.first, t=l.second;\n    double k = inner_product(t-s,p-s)/inner_product(t-s,t-s);\n    return (1.0-k)*s+k*t;\n}\n\n\nint main(void){\n    int xp1,yp1,xp2,yp2;\n    cin>>xp1>>yp1>>xp2>>yp2;\n    line l(vec(xp1,yp1),vec(xp2,yp2));\n    int q;\n    cin>>q;\n    cout<<fixed;\n    cout.precision(10);\n    for(int i=0;i<q;i++){\n        int xp,yp;\n        cin>>xp>>yp;\n        vec X=projection(l,vec(xp,yp));\n        cout<<X.real()<<' '<<X.imag()<<endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing Int = long long;\n//BEGIN CUT HERE\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define PI 3.141592653589793238\n \n// COUNTER CLOCKWISE\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\n//Intercsect Circle & Circle\nstatic const int ICC_SEPERATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator+(Point p) {return Point(x+p.x,y+p.y);}\n  Point operator-(Point p) {return Point(x-p.x,y-p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n    //grid-point only\n    //return !equals(x,p.x)?x<p.x:!equals(y,p.y)?y<p.y:0;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\nistream &operator >> (istream &is,Point &p){\n  is>>p.x>>p.y;\n  return is;\n}\n\nostream &operator << (ostream &os,Point p){\n  os<<fixed<<setprecision(12)<<p.x<<\" \"<<p.y;\n  return os;\n}\n\nbool sort_x(Point a,Point b){\n  return a.x!=b.x?a.x<b.x:a.y<b.y;\n}\n\nbool sort_y(Point a,Point b){\n  return a.y!=b.y?a.y<b.y:a.x<b.x;\n}\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nistream &operator >> (istream &is,Polygon &p){\n  for(int i=0;i<(int)p.size();i++) cin>>p[i];\n  return is;\n}\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nistream &operator >> (istream &is,Segment &s){\n  is>>s.p1>>s.p2;\n  return is;\n}\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(){}\n  Circle(Point c,double r):c(c),r(r){}\n};\n\nistream &operator >> (istream &is,Circle &c){\n  is>>c.c>>c.r;\n  return is;\n}\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nPoint orth(Point p){return Point(-p.y,p.x);}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\nint ccw(Point p0,Point p1,Point p2);\nbool intersectSS(Point p1,Point p2,Point p3,Point p4);\nbool intersectSS(Segment s1,Segment s2);\nbool intersectPS(Polygon p,Segment l);\nint intersectCC(Circle c1,Circle c2);\nbool intersectSC(Segment s,Circle c);\ndouble getDistanceLP(Line l,Point p);\ndouble getDistanceSP(Segment s,Point p);\ndouble getDistanceSS(Segment s1,Segment s2);\nPoint getCrossPointSS(Segment s1,Segment s2);\nPoint getCrossPointLL(Line l1,Line l2);\nPolygon getCrossPointCL(Circle c,Line l);\nPolygon getCrossPointCC(Circle c1,Circle c2);\nint contains(Polygon g,Point p);\nPolygon andrewScan(Polygon s);\nPolygon convex_hull(Polygon ps);\ndouble diameter(Polygon s);\nbool isConvex(Polygon p);\ndouble area(Polygon s);\nPolygon convexCut(Polygon p,Line l);\nLine bisector(Point p1,Point p2);\nVector translate(Vector v,double theta);\nvector<Line> corner(Line l1,Line l2);\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return CCW_COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CCW_CLOCKWISE;\n  if(dot(a,b) < -EPS) return CCW_ONLINE_BACK;\n  if(a.norm()<b.norm()) return CCW_ONLINE_FRONT;\n  return CCW_ON_SEGMENT;\n}\n\nbool intersectSS(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersectSS(Segment s1,Segment s2){\n  return intersectSS(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\nbool intersectPS(Polygon p,Segment l){\n  int n=p.size();\n  for(int i=0;i<n;i++)\n    if(intersectSS(Segment(p[i],p[(i+1)%n]),l)) return 1;\n  return 0;\n}\n\nint intersectCC(Circle c1,Circle c2){\n  if(c1.r<c2.r) swap(c1,c2);\n  double d=abs(c1.c-c2.c);\n  double r=c1.r+c2.r;\n  if(equals(d,r)) return ICC_CIRCUMSCRIBE;\n  if(d>r) return ICC_SEPERATE;\n  if(equals(d+c2.r,c1.r)) return ICC_INSCRIBE;\n  if(d+c2.r<c1.r) return ICC_CONTAIN;\n  return ICC_INTERSECT;\n}\n\nbool intersectSC(Segment s,Circle c){\n  double d=getDistanceSP(s,c.c);\n  return d<=c.r;\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistanceSS(Segment s1,Segment s2){\n  if(intersectSS(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPointSS(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nPoint getCrossPointLL(Line l1,Line l2){\n  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);\n  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);\n  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1;\n  return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\n\nPolygon getCrossPointCL(Circle c,Line l){\n  Polygon ps;\n  Point pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  if(equals(getDistanceLP(l,c.c),c.r)){\n    ps.emplace_back(pr);\n    return ps;\n  }\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  ps.emplace_back(pr+e*base);\n  ps.emplace_back(pr-e*base);\n  return ps;\n}\n\nPolygon getCrossPointCC(Circle c1,Circle c2){\n  Polygon p(2);\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  p[0]=c1.c+polar(c1.r,t+a);\n  p[1]=c1.c+polar(c1.r,t-a);\n  return p;\n}\n\n// IN:2 ON:1 OUT:0\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<(int)s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=CCW_CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\nPolygon convex_hull(Polygon ps){\n  int n=ps.size();\n  sort(ps.begin(),ps.end(),sort_y);\n  int k=0;\n  Polygon qs(n*2);\n  for(int i=0;i<n;i++){\n    while(k>1&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  for(int i=n-2,t=k;i>=0;i--){\n    while(k>t&&cross(qs[k-1]-qs[k-2],ps[i]-qs[k-1])<0) k--;\n    qs[k++]=ps[i];\n  }\n  qs.resize(k-1);\n  return qs;\n}\n\ndouble diameter(Polygon s){\n  Polygon p=s;\n  int n=p.size();\n  if(n==2) return abs(p[0]-p[1]);\n  int i=0,j=0;\n  for(int k=0;k<n;k++){\n    if(p[i]<p[k]) i=k;\n    if(!(p[j]<p[k])) j=k;\n  }\n  double res=0;\n  int si=i,sj=j;\n  while(i!=sj||j!=si){\n    res=max(res,abs(p[i]-p[j]));\n    if(cross(p[(i+1)%n]-p[i],p[(j+1)%n]-p[j])<0.0){\n      i=(i+1)%n;\n    }else{\n      j=(j+1)%n;\n    }\n  }\n  return res;\n}\n\nbool isConvex(Polygon p){\n  bool f=1;\n  int n=p.size();\n  for(int i=0;i<n;i++){\n    int t=ccw(p[(i+n-1)%n],p[i],p[(i+1)%n]);\n    f&=t!=CCW_CLOCKWISE;\n  }\n  return f;\n}\n\ndouble area(Polygon s){\n  double res=0;\n  for(int i=0;i<(int)s.size();i++){\n    res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n  }\n  return abs(res);\n}\n\ndouble area(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  if(c1.r+c2.r<=d+EPS) return 0;\n  if(d<=abs(c1.r-c2.r)){\n    double r=min(c1.r,c2.r);\n    return PI*r*r;\n  }\n  double rc=(d*d+c1.r*c1.r-c2.r*c2.r)/(2*d);\n  double th=acos(rc/c1.r);\n  double ph=acos((d-rc)/c2.r);\n  return c1.r*c1.r*th+c2.r*c2.r*ph-d*c1.r*sin(th);\n}\n\nPolygon convexCut(Polygon p,Line l){\n  Polygon q;\n  for(int i=0;i<(int)p.size();i++){\n    Point a=p[i],b=p[(i+1)%p.size()];\n    if(ccw(l.p1,l.p2,a)!=-1) q.push_back(a);\n    if(ccw(l.p1,l.p2,a)*ccw(l.p1,l.p2,b)<0)\n      q.push_back(getCrossPointLL(Line(a,b),l));\n  }\n  return q;\n}\n\nLine bisector(Point p1,Point p2){\n  Circle c1=Circle(p1,abs(p1-p2)),c2=Circle(p2,abs(p1-p2));\n  Polygon p=getCrossPointCC(c1,c2);\n  if(cross(p2-p1,p[0]-p1)>0) swap(p[0],p[1]);\n  return Line(p[0],p[1]);\n}\n\nVector translate(Vector v,double theta){\n  Vector res;\n  res.x=cos(theta)*v.x-sin(theta)*v.y;\n  res.y=sin(theta)*v.x+cos(theta)*v.y;\n  return res;\n}\n\nvector<Line> corner(Line l1,Line l2){\n  vector<Line> res;\n  if(isParallel(l1,l2)){\n    double d=getDistanceLP(l1,l2.p1)/2.0;\n    Vector v1=l1.p2-l1.p1;\n    v1=v1/v1.abs()*d;\n    Point p=l2.p1+translate(v1,90.0*(PI/180.0));\n    double d1=getDistanceLP(l1,p);\n    double d2=getDistanceLP(l2,p);\n    if(abs(d1-d2)>d){\n      p=l2.p1+translate(v1,-90.0*(PI/180.0));\n    }\n    res.push_back(Line(p,p+v1));\n  }else{\n    Point p=getCrossPointLL(l1,l2);\n    Vector v1=l1.p2-l1.p1,v2=l2.p2-l2.p1;\n    v1=v1/v1.abs();\n    v2=v2/v2.abs();\n    res.push_back(Line(p,p+(v1+v2)));\n    res.push_back(Line(p,p+translate(v1+v2,90.0*(PI/180.0))));\n  }\n  return res;\n}\n\nPolygon tangent(Circle c1,Point p2){\n  Circle c2=Circle(p2,sqrt(norm(c1.c-p2)-c1.r*c1.r));\n  Polygon p=getCrossPointCC(c1,c2);\n  sort(p.begin(),p.end());\n  return p;\n}\n\nvector<Line> tangent(Circle c1,Circle c2){\n  vector<Line> ls;\n  if(c1.r<c2.r) swap(c1,c2);\n  double g=norm(c1.c-c2.c);\n  if(equals(g,0)) return ls;\n  Point u=(c2.c-c1.c)/sqrt(g);\n  Point v=orth(u);\n  for(int s=1;s>=-1;s-=2){\n    double h=(c1.r+s*c2.r)/sqrt(g);\n    if(equals(1-h*h,0)){\n      ls.emplace_back(c1.c+u*c1.r,c1.c+(u+v)*c1.r);\n    }else if(1-h*h>0){\n      Point uu=u*h,vv=v*sqrt(1-h*h);\n      ls.emplace_back(c1.c+(uu+vv)*c1.r,c2.c-(uu+vv)*c2.r*s);\n      ls.emplace_back(c1.c+(uu-vv)*c1.r,c2.c-(uu-vv)*c2.r*s);\n    }\n  }\n  \n  return ls;\n}\n\n//END CUT HERE\n\n//Projection\nsigned CGL1A(){\n  Point p1,p2;\n  cin>>p1>>p2;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p;\n    cin>>p;\n    cout<<project(Line(p1,p2),p)<<endl;\n  }\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=jp\n*/\n\n//Common Tangent\nsigned CGL7G(){\n  Circle c1,c2;\n  cin>>c1>>c2;\n  auto ls=tangent(c1,c2);\n  Polygon ps;\n  for(auto l:ls) ps.emplace_back(getCrossPointCL(c1,l)[0]);\n  sort(ps.begin(),ps.end());\n  for(auto p:ps) cout<<p<<endl;\n  return 0;\n}\n/*\n  verified on 2017/12/31\n  http://judge.u-aizu.ac.jp/onlinejudge//description.jsp?id=CGL_7_G&lang=jp\n*/\n\nsigned main(){\n  CGL1A();\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//#define __USE_MINGW_ANSI_STDIO 0\n#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<ll> VL;\ntypedef vector<VL> VVL;\ntypedef pair<int, int> PII;\n\n#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define ALL(x) x.begin(), x.end()\n#define IN(a, b, x) (a<=x&&x<b)\n#define MP make_pair\n#define PB push_back\n#define MOD 1000000007\n#define INF (1LL<<30)\n#define LLINF (1LL<<60)\n#define PI 3.14159265359\n#define EPS 1e-12\n//#define int ll\n\nint dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};\n\nstruct point {\n  double x, y;\n};\n\nstruct Vector2D {\n  double x, y;\n};\n\ndouble dot(Vector2D a, Vector2D b) {\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble norm(Vector2D a) {\n  return sqrt(a.x*a.x + a.y*a.y);\n}\n\n//??´???a = p1->p2 ???????????????p????°???±???c??¨????????¨?????? p1->c ??????????????? b = p1 -> p\n//??§?¨??????´?????¨??????p1????¶????\nVector2D project(Vector2D a, Vector2D b) {\n  return Vector2D{dot(a, b)/dot(a, a) * a.x, dot(a, b)/dot(a, a) * a.y};\n}\n\nsigned main(void)\n{\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  Vector2D v1 = {x2-x1, y2-y1};\n  int q;\n  cin >> q;\n  REP(i, q) {\n    double x, y;\n    cin >> x >> y;\n    Vector2D v2 = {x-x1, y-y1};\n    Vector2D ret = project(v1, v2);\n    //???????????§?????´?????????\n    cout << fixed << setprecision(15) << ret.x + x1 + 0 << \" \" << ret.y + x2 +  0 << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nint main() {\n  double x1, y1, x2, y2;\n  std::cin >> x1 >> y1 >> x2 >> y2;\n\n  int q;\n  std::cin >> q;\n\n  for (int i = 0; i < q; ++i) {\n      double x, y;\n      std::cin >> x >> y;\n\n      double num = -(x2 - x1) * (x1 - x) - (y2 - y1) * (y1 - y);\n      double den = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n      double t = num / den;\n      \n      double u = x1 + t * (x2 - x1);\n      double v = y1 + t * (y2 - y1);\n      std::cout << u << \" \" << v << std::endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <iomanip>\n\n\nusing namespace std;\n\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nvoid vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n}\n\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならばfalseを返す*/\n\nbool intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n/*2点(x1,y1), (x2,y2) の距離*/\nbool distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n\n\n\nint main(int argc, const char * argv[])\n{\n    double x1,x2,y1,y2,a,b,c;\n    cin>>x1>>y1>>x2>>y2;\n    \n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    \n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        double x,y,a2,b2,c2;\n        cin>>x>>y;\n        vertical_straight_line(x, y, a, b, c, &a2, &b2, &c2);\n        //cout<<a<<b<<c<<endl;\n        //cout<<a2<<b2<<c2<<endl;\n        double ans_x, ans_y;\n        intersection_and_parallel(a, b, c, a2, b2, c2, &ans_x, &ans_y);\n        cout<< fixed << setprecision( 10 ) <<ans_x<<\" \"<<ans_y<<endl;\n    }\n    \n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double R;//double long double ??????????????? cmath?????¢??°??????????????????????????????????????????????????§????????????\ntypedef complex<R> Point;\ntypedef pair<Point , Point> Line;\ntypedef pair<Point ,R > Circle;\ntypedef vector<Point> Poly;\n\n#define EPS (1e-10)//??????\n#define EQ(a,b) (abs((a)-(b)) < EPS)//??????????????°???????????????\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )//????????????????????????????????????\n#define ft first\n#define sd second\n#define pb push_back\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n \n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define RFOR(i,a,b) for (int i=(b)-1;i>=(a);i--)\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define RREP(i,n) for (int i=(n)-1;i>=0;i--)\n\nR dot(Point a,Point b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\nR cross(Point a,Point b){\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n\n\n\nbool is_orthogonal(Line a,Line b){//2??´????????´?????????\n    return EQ(dot(a.ft - a.sd,b.ft - b.sd),0.0);\n}\nbool is_parallel(Line a,Line b){//2??´??????????????????\n    return EQ(cross(a.ft - a.sd,b.ft - b.sd),0.0);\n}\n\n\n\n////////////////////????????????\nint ccw(Point a,Point b,Point c){//ok\n    b -= a; c -= a;\n    if(cross(b,c) > EPS) return 1;//a???b??§???????¨???¨???????????????b???c\n    if(cross(b,c) < -EPS) return -1;//a???b??§????¨???¨???????????????b???c\n    if(dot(b,c) < -EPS) return 2;//c--a--b on same line\n    if(norm(c) - norm(b) > EPS) return -2;//a--b--c(abs??????????????????????????????????????????????????????????)\n    return 0;//a--c--b?????????b==c\n}\n\nbool is_intersection_ll(Line l,Line m){//???????????´??????????????????\n    return abs(cross(l.sd - l.ft,m.sd - m.ft)) > EPS || //????????§??????\n        abs(cross(l.sd - l.ft,m.ft - l.ft)) < EPS; //?????????????????????\n}\n\nbool is_intersection_ls(Line l,Line s){//??´???l??¨??????s???????????????\n    return cross(l.sd - l.ft, s.ft-l.ft)*       // s[0] is left of l\n        cross(l.sd - l.ft, s.sd - l.ft) < EPS; // s[1] is right of l\n}\n\nbool is_intersection_lp(Line l,Point p){//??´???l??¨???p???????????????\n    return abs(cross(l.sd - p,l.ft - p));\n}\n\nbool is_intersection_ss(Line a,Line b){//??????????????????????????????ok\n    return ccw(a.ft,a.sd,b.ft)*ccw(a.ft,a.sd,b.sd) <= 0 && ccw(b.ft,b.sd,a.ft)*ccw(b.ft,b.sd,a.sd) <= 0;\n}\n\nbool is_intersection_sp(Line s,Point p){//????????¨?????????????????? ????§??????????????????¨\n    return abs(s.ft - p) + abs(s.sd - p) - abs(s.ft - s.sd) < EPS;\n}\n\n/////////////?????¢\nR dis_lp(Line l,Point p){//??´???l??¨???p????????¢\n    return abs(cross(l.sd - l.ft,p - l.ft)) / abs(l.sd - l.ft);\n}\n\nR dis_ll(Line l,Line m){//???????????´???????????¢\n    return is_intersection_ll(l,m) ? 0.0 : dis_lp(l,m.ft);\n}\n\nR dis_ls(Line l,Line s){//??´???l??¨??????s????????¢\n    if(is_intersection_ls(l,s)) return 0.0;\n    return min(dis_lp(l,s.ft),dis_lp(l,s.sd));\n}\n\nR dis_sp(Line s,Point p){//??????s??¨???p????????¢\n    if(dot(s.sd - s.ft,p - s.ft) < EPS) return abs(p - s.ft);\n    if(dot(s.ft - s.sd,p - s.sd) < EPS) return abs(p - s.sd);\n    return dis_lp(s,p);\n}\n\nR dis_ss(Line s,Line t){//???????????????????????¢\n    if(is_intersection_ss(s,t)) return 0.0;\n    return min(min(dis_sp(s,t.ft),dis_sp(s,t.sd)),\n            min(dis_sp(t,s.ft),dis_sp(t,s.sd)));\n}\n\n\n\n//////////////?°???±??¨????°?\nPoint projection(Line l,Point p){//?°???±????±???????\n    R t = dot(p - l.ft,l.ft - l.sd) / norm(l.ft - l.sd);\n    return l.ft + t * (l.ft - l.sd);\n}\n\nPoint reflection(Line l,Point p){//????°?????±???????\n    return p + 2.0 * (projection(l,p) - p);\n}\n\n\n\n\n//////////////??????(????????????????¨???????????????¨??????????????????????????????????????£??????)\n\nPoint intersection_ll(Line l,Line m){//????????????????????????????????????????????????\n    R A = cross(l.sd - l.ft,m.sd - m.ft);\n    R B = cross(l.sd - l.ft,l.sd - m.ft);\n    if(abs(A) < EPS && abs(B) < EPS) return m.ft;//?????????\n    //if(abs(A) < EPS)assert(false);//????????§????????????\n    return m.ft + B / A * (m.sd - m.ft);\n}\n\nLine intersection_of_two_circles(Circle c1,Circle c2){//ok ????????????????????????Line?????\\????????????(r1 + r2 > sqrt((x1 - x2) ^ 2 + (y1 - y2) ^ 2))???????????????????????????\n    R a =  abs(c2.ft - c1.ft);\n    R b = c1.sd;\n    R c = c2.sd;\n\n    R rc = (a  * a + b * b - c * c) / (2.0 * a);\n    R rs = sqrt(b * b - rc * rc);//C++ ??§???????????????????????????????????§???????????????sqrt ????????? float ?????????????????? long double ????????????????????????????????????????????¨?????§???????????? C ????????°????????§??????sqrt ????????? double ??????????????£??????????????????\n    Point diff = (c2.ft - c1.ft) / a;\n\n    Line p ;\n    p.ft = c1.ft + diff * rc + diff * Point(0,1) * rs;\n    p.sd = c1.ft + diff * rc + diff * Point(0,-1) * rs;\n\n    return p;\n}\n\n\nLine conver_line(Line a,Point maxi,Point mini){//??????????????´??????????????? maxi???????????????????????? mini?????????\n\n    if(abs(dot(a.sd - a.ft,Point(1.0,0.0))) < EPS){//??????x???????????´??????\n        ;\n    }\n}\n\n\n/////////////////////////polygon\n\n#define currP(P,i) P[i]//????????????\n#define nextP(P,i) P[(i + 1)%P.size()]//?¬??????????\n\nint is_contains_p_in_Poly(Poly po,Point p){//??????????§???¢????????¨(1)????¢????(-1)????????¨(0)??????????????????????????????\n    bool in = false;\n    REP(i,po.size()){\n        Point a = currP(po,i) - p,b = nextP(po,i) - p;\n        if(a.imag() > b.imag())swap(a,b);\n        if(a.imag() < EPS && -EPS < b.imag())\n            if(cross(a,b) < -EPS) in = !in;\n        if(abs(cross(a,b)) == 0.0 && dot(a,b) < EPS)return  -1;\n    }\n    return in;\n}\n\nR area2(Poly po){//????§???¢?????¢????????????????±???????\n    R A = 0.0;\n    REP(i,po.size())\n        A += cross(currP(po,i),nextP(po, i));\n    return A;\n}\n\n\n\n\n///////////////////////////???\n\nPoly convex_hull(Poly ps){\n    int n = ps.size(),k = 0;\n    Poly ch(2*n);\n    for(int i = 0;i < n;ch[k++] = ps[i++])// lower-hull\n        while(k >= 2 && ccw(ch[k - 2],ch[k - 1],ps[i]) <= 0) --k;\n    for(int i = n - 2,t = k + 1;i >= 0;ch[k++] = ps[i--])//upper-hull\n        while(k >= t && ccw(ch[k - 2],ch[k - 1],ps[i]) <= 0) --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\n#define prevP(P, i) P[(i+P.size()-1) % P.size()]\nbool isconvex(Poly P){\n    for(int i = 0;i < P.size();++i)\n        if(ccw(prevP(P,i),currP(P,i),nextP(P,i)) > 0) return false;\n    return true;\n}\n\nint main(void){\n    Point p1,p2;\n    int x1,y1,x2,y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    p1 = Point(x1,y1);p2 = Point(x2,y2);\n    Line l = Line(p1,p2);\n    int q;\n    cin >> q;\n    REP(i,q){\n        Point p;\n        cin >> x1 >> y1;\n        p = Point(x1,y1);\n        p = projection(l,p);\n        printf(\"%0.10lf %0.10lf\\n\",p.real(),p.imag());\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i, N) for (int i = 0; i < (int)N; ++i)\n#define all(a) (a).begin(), (a).end()\nconst double EPS = 1e-10;\nbool equals(double a, double b) { fabs(a - b) < EPS; }\n\nclass Point {\n public:\n  double x, y;\n\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator+(const Point &p) const { return Point(x + p.x, y + p.y); }\n  Point operator-(const Point &p) const { return Point(x - p.x, y - p.y); }\n  Point operator*(const double a) { return Point(a * x, a * y); }\n  Point operator/(const double a) { return Point(x / a, y / a); }\n\n  double abs() const { return sqrt(norm()); }\n  double norm() const { return x * x + y * y; }\n\n  Point rotate(double theta) const {\n    return Point(cos(theta) * x - sin(theta) * y,\n                 sin(theta) * x + cos(theta) * y);\n  }\n\n  Point normalize() const { return Point(*this) / abs(); }\n\n  bool operator<(const Point &p) const { return x != p.x ? x < p.x : y < p.y; }\n\n  bool operator==(const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n  friend istream &operator>>(istream &is, Point &p) { return is >> p.x >> p.y; }\n};\n\ndouble abs(const Point &p) { return p.abs(); }\ndouble norm(const Point &p) { return p.norm(); }\n\ntypedef Point Vector;\n\nstruct Segment {\n  Point p1, p2;\n  Segment() {}\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\n public:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n\n  int contains(const Point &p) const {\n    double d = abs(c - p);\n    if (equals(d, r)) return 1;  // ON\n    if (d < r + EPS) return 2;   // IN\n    return 0;                    // OUT\n  }\n};\n\ntypedef vector<Point> Polygon;\n\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\n\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n  return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p) * 2.0; }\n\ndouble distance(Point a, Point b) { return (a - b).abs(); }\n\ndouble distanceLP(Line l, Point p) {\n  return abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble distanceSP(Segment s, Point p) {\n  if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n  if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n  return distanceLP(s, p);\n}\n\nbool intersect(Segment s1, Segment s2);\ndouble distance(Segment s1, Segment s2) {\n  if (intersect(s1, s2)) return 0.0;\n  return min({distanceSP(s1, s2.p1), distanceSP(s1, s2.p2),\n              distanceSP(s2, s1.p1), distanceSP(s2, s1.p2)});\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n  if (cross(a, b) < -EPS) return CLOCKWISE;\n  if (dot(a, b) < -EPS) return ONLINE_BACK;      // p2, p0, p1\n  if (a.norm() < b.norm()) return ONLINE_FRONT;  // p0, p1, p2\n  return ON_SEGMENT;                             // p0, p2, p1\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n          ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint crossPoint(Segment s1, Segment s2) {\n  Vector base = s2.p2 - s2.p1;\n  double d1 = abs(cross(base, s1.p1 - s2.p1));\n  double d2 = abs(cross(base, s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\nbool intersect(Circle c, Line l) { return distanceLP(l, c.c) < c.r; }\n\npair<Point, Point> crossPoint(Circle c, Line l) {\n  assert(intersect(c, l));\n  Vector pr = project(l, c.c);\n  Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n  double base = sqrt(c.r * c.r - norm(pr - c.c));\n  return make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\nbool intersect(Circle c1, Circle c2) {\n  return (c1.c - c2.c).abs() < c1.r + c2.r;\n}\n\npair<Point, Point> crossPoint(Circle c1, Circle c2) {\n  assert(intersect(c1, c2));\n  double d = abs(c1.c - c2.c);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/*\n  IN 2\n  ON 1\n  OUT 0\n*/\nint contains(Polygon g, Point p) {\n  int n = g.size();\n  bool x = false;\n  for (int i = 0; i < n; ++i) {\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n    if (a.y > b.y) swap(a, b);\n    if (a.y < EPS & EPS < b.y && cross(a, b) > EPS) x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nPolygon convexHull(Polygon s) {\n  Polygon u, l;\n  if (s.size() < 3) return s;\n  sort(s.begin(), s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size() - 1]);\n  l.push_back(s[s.size() - 2]);\n\n  for (int i = 2; i < s.size(); ++i) {\n    for (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE;\n         --n) {\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n\n  for (int i = s.size() - 3; i >= 0; i--) {\n    for (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE;\n         --n) {\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n\n  reverse(l.begin(), l.end());\n  for (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n\n  return l;\n}\n\nCircle circumscribedCircle(const Point &a, const Point &b, const Point &c) {\n  double a1, a2, b1, b2, c1, c2;\n  a1 = 2 * (b.x - a.x);\n  b1 = 2 * (b.y - a.y);\n  c1 = a.x * a.x - b.x * b.x + a.y * a.y - b.y * b.y;\n  a2 = 2 * (c.x - a.x);\n  b2 = 2 * (c.y - a.y);\n  c2 = a.x * a.x - c.x * c.x + a.y * a.y - c.y * c.y;\n  Point p;\n  p.x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n  p.y = (c1 * a2 - c2 * a1) / (a1 * b2 - a2 * b1);\n\n  return Circle(p, abs(p - a));\n}\n\nint main() {\n  Segment s;\n  cin >> s.p1 >> s.p2;\n\n  int q;\n  cin >> q;\n  rep(i, q) {\n    Point p, q;\n    cin >> p;\n    q = project(s, p);\n    printf(\"%.10lf %.10lf\\n\", q.x, q.y);\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\ntypedef complex<ld> pt;\n#define X real()\n#define Y imag()\nld dot(pt u,pt v){\n\treturn (u.X*v.X+v.Y*u.Y);\n}\nint main(){\n\tcout<<fixed<<setprecision(12);\n\tld x,y; \n\tld xx,yy;\n\tld xxx,yyy;\n\tcin>>x>>y;\n\tcin>>xx>>yy;\n\tpt a = {x,y};\n\tpt b = {xx,yy};\n\tint q; \n\tcin>>q;\n\twhile(q--){\n\t\tcin>>xxx>>yyy;\n\t\tpt c = {xxx,yyy};\n\t\tpt m = a+(b-a)*dot(c-a,b-a)/dot(b-a,b-a);\n\t\tcout<<m.X<<\" \"<<m.Y<<endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n\nusing namespace std;\n\n#define REP(i,n) for(int i = 0; i < (int)(n); ++i)\n#define FOR(i,a,b) for(int i = (a); i < (int)(b); ++i)\n#define ALL(c) (c).begin(), (c).end()\n#define SIZE(v) ((int)v.size())\n\ntypedef complex<double> P;\n\ndouble dot(const P& a, const P& b) {\n    return real(conj(a)*b);\n}\n\n\nint main(){\n    double x, y;\n    cin >> x >> y;\n    P p0(x, y);\n    cin >> x >> y;\n    P p1(x, y);\n\n    int Q;\n    cin >> Q;\n    REP(q, Q) {\n        cin >> x >> y;\n        P p2(x, y);\n\n        P vec1 = p1 - p0;\n        P vec2 = p2 - p0;\n\n        P ret = p0 + vec1 * dot(vec1, vec2) / dot(vec1, vec1);\n        cout << ret.real() << \" \" << ret.imag() << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\ninline int Read()\n{\n\tint x(0),f(1);\n\tchar c(getchar());\n\twhile(c<'0'||'9'<c)\n\t{\n\t\tif(c=='-')\n\t\t{\n\t\t\tf=-1;\n\t\t}\n\t\tc=getchar();\n\t}\n\twhile('0'<=c&&c<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f*x;\n}\nvoid Write(int x)\n{\n\tif(x<0)\n\t{\n\t\tprintf(\"-\");\n\t\tx=-x;\n\t}\n\tif(9<x)\n\t{\n\t\tWrite(x/10);\n\t}\n\tputchar(x%10+'0');\n}\ninline void Writeln(int x)\n{\n\tWrite(x);\n\tputs(\"\");\n}\nstruct Point\n{\n\tdouble x,y;\n\tPoint(double fx=0,double fy=0)\n\t{\n\t\tx=fx;\n\t\ty=fy;\n\t}\n\tvoid Read()\n\t{\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t}\n\tvoid Write(int len=2)\n\t{\n\t\tprintf(\"%.9lf %.9lf\",x,y);\n\t}\n\tdouble operator ^(Point const b)const\n\t{\n\t\treturn x*b.x+y*b.y;\n\t}\n\tdouble operator |(Point const b)const\n\t{\n\t\treturn x*b.y-b.x*y;\n\t}\n\tdouble operator ==(Point const b)const\n\t{\n\t\treturn sqrt((x-b.x)*(x-b.x)+(y-b.y)*(y-b.y));\n\t}\n\tPoint operator *(double const b)const\n\t{\n\t\treturn Point(x*b,y*b);\n\t}\n\tPoint operator +(Point const b)const\n\t{\n\t\treturn Point(x+b.x,y+b.y);\n\t}\n\tPoint operator -(Point const b)const\n\t{\n\t\treturn Point(x-b.x,y-b.y);\n\t}\n};\nstruct Vector\n{\n\tPoint a,b;\n\tVector(Point f=Point(0,0),Point e=Point(0,0))\n\t{\n\t\ta=f;\n\t\tb=e;\n\t}\n\tdouble operator ^(Vector const c)const\n\t{\n\t\treturn (a.x-b.x)*(c.a.x-c.b.x)+(c.a.y-c.b.y)*(a.y-b.y);\n\t}\n\tdouble operator |(Vector const c)const\n\t{\n\t\treturn (a.x-b.x)*(c.a.y-c.b.y)-(c.a.x-c.b.x)*(a.y-b.y);\n\t}\n};\nPoint p0,p1,p2;\nconst int MAXN=1e5+5;\nvoid Work()\n{\n\tp0.Read();\n\tdouble b=Vector(p1,p0)^Vector(p1,p2);\n\tdouble c=b;\n\tb/=(p1==p2)*(p1==p2);\n\tPoint answer=(p2-p1)*b+p1;\n\tanswer.Write();\n\tputs(\"\");\n}\nint main()\n{\n\tp1.Read();\n\tp2.Read();\n\tint q;\n\tscanf(\"%d\",&q);\n\tREP(i,1,q)\n\t{\n\t\tWork();\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\nusing namespace std;\n\nint main(){\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  int q;\n  cin >> q;\n\n  double x, y, k;\n  double ax, ay, bx, by;\n  for(int i=0; i<q; i++){\n    cin >> x >> y;\n    ax = x-x1; ay = y-y1;\n    bx = x2-x1; by = y2-y1;\n    k = (ax*bx + ay*by)/(bx*bx + by*by);\n    printf(\"%.10lf %.10lf\\n\", bx*k+0, by*k+0);\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <map>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n\nusing namespace std;\n\nstruct P { double x, y; };\n\nint main() {\n\tP p1, p2;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tint q;\n\tcin >> q;\n\twhile (q-->0) {\n\t\tP p, h;\n\t\tcin >> p.x >> p.y;\n\t\tdouble t = ((p2.x - p1.x) * (p.x - p1.x) + (p2.y - p1.y) * (p.y - p1.y)) / (pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n\t\th.x = p1.x + t * (p2.x - p1.x);\n\t\th.y = p1.y + t * (p2.y - p1.y);\n\t\tcout << fixed << setprecision(12) << h.x << \" \" << h.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\nusing namespace std;\n\nclass Vec2;\n\ndouble SqrMagnitude(const Vec2& v);\n\ndouble Magnitude(const Vec2& v);\n\ndouble Dot(const Vec2& v1, const Vec2& v2);\n\n\nstruct Vec2 {\n    double x, y;\n    Vec2() = default;\n    Vec2(double in_x, double in_y)\n        : x {in_x}, y {in_y} {};\n    Vec2(const Vec2&) = default;\n    Vec2(Vec2&&) = default;\n\n    Vec2 normalized() {\n        double mag = Magnitude(*this);\n        return {x /= mag, y /= mag};\n    }\n\n    Vec2 operator-() {\n        return {-x, -y};\n    }\n\n    Vec2 operator+(const Vec2& rhs) {\n        return {x + rhs.x, y + rhs.y};\n    }\n\n    Vec2 operator-(const Vec2& rhs) {\n        return {x - rhs.x, y - rhs.y};\n    }\n\n    Vec2 operator*(double rhs) {\n        return {x * rhs, y * rhs};\n    }\n\n    Vec2 operator/(double rhs) {\n        return {x / rhs, y / rhs};\n    }\n\n    Vec2& operator+=(const Vec2& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n\n    Vec2& operator-=(const Vec2& rhs) {\n        x -= rhs.x;\n        y -= rhs.y;\n        return *this;\n    }\n\n    Vec2& operator*=(double rhs) {\n        x *= rhs;\n        y *= rhs;\n        return *this;\n    }\n\n    Vec2& operator/=(double rhs) {\n        x /= rhs;\n        y /= rhs;\n        return *this;\n    }\n};\n\ninline Vec2 operator*(double s, const Vec2& v) {\n    return {s * v.x, s * v.y};\n}\n\n\n\ninline double SqrMagnitude(const Vec2& v) {\n    return Dot(v, v);\n}\n\ninline double Magnitude(const Vec2& v) {\n    return sqrt(SqrMagnitude(v));\n}\n\ninline double Dot(const Vec2& v1, const Vec2& v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nint main() {\n    Vec2 p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n\n    Vec2 p_12 {(p2 - p1).normalized()};\n\n    int n;\n    cin >> n;\n\n    cout << fixed << setprecision(10);\n\n    for(Vec2 q_in; cin >> q_in.x >> q_in.y;) {\n        Vec2 v_p1_q = q_in - p1;\n        Vec2 q_proj = p1 + p_12 * Dot(v_p1_q, p_12);\n\n        cout << q_proj.x << ' ' << q_proj.y << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//#define __USE_MINGW_ANSI_STDIO 0\n#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<ll> VL;\ntypedef vector<VL> VVL;\ntypedef pair<int, int> PII;\n\n#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define ALL(x) x.begin(), x.end()\n#define IN(a, b, x) (a<=x&&x<b)\n#define MP make_pair\n#define PB push_back\n#define MOD 1000000007\n#define INF (1LL<<30)\n#define LLINF (1LL<<60)\n#define PI 3.14159265359\n#define EPS 1e-12\n//#define int ll\n\nint dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};\n\nstruct point {\n  double x, y;\n};\n\nstruct Vector2D {\n  double x, y;\n};\n\ndouble dot(Vector2D a, Vector2D b) {\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble norm(Vector2D a) {\n  return sqrt(a.x*a.x + a.y*a.y);\n}\n\n//??´???a = p1->p2 ???????????????p????°???± b = p1 -> p\npoint project(Vector2D a, Vector2D b) {\n  return point{dot(a, b)/dot(a, a) * a.x, dot(a, b)/dot(a, a) * a.y};\n}\n\nsigned main(void)\n{\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  Vector2D v1 = {x2-x1, y2-y1};\n  int q;\n  cin >> q;\n  REP(i, q) {\n    double x, y;\n    cin >> x >> y;\n    Vector2D v2 = {x-x1, y-y1};\n    point ret = project(v1, v2);\n    cout << fixed << setprecision(15) << ret.x + 0 << \" \" << ret.y + 0 << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n\n#define EPS (1e-10)\n#define equals( A, B ) (fabs((A) - (B)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n    Point( double x = 0, double y = 0 ): x(x), y(y) {}\n    \n    Point operator + ( Point p ) { return Point( x + p.x, y + p.y ); }\n    Point operator - ( Point p ) { return Point( x - p.x, y - p.y ); }\n    Point operator * ( double a ) { return Point( a * x, a * y ); }\n    Point operator / ( double a ) { return Point( x / a, y / a ); }\n\n    double abs() { return sqrt( norm() ); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < ( const Point &p ) const {\n\treturn ( x != p.x ) ? x < p.x : y < p.y;\n    }\n\n    bool operator == ( const Point &p ) const {\n\treturn equals( x, p.x ) && equals( y, p.y ); \n    }\n\n    double dot( Point a ) { return x * a.x + y * a.y; }\n    double cross( Point a ) { return x * a.y - y * a.x; }\n};\n\ntypedef Point Vector;\n\nclass Line {\npublic:\n    Point p1, p2;\n    Line( Point p1 = Point(), Point p2 = Point() ) {}\n    // ?????´????????????( cos = 0 )\n    bool isOrthogonal( Line a ) {\n\treturn equals( 0.0, (p1 - p2).dot( a.p1 - a.p2 ) );\n    }\n    // ??????????????????( sin = 0 )\n    bool isParallel( Line a ) {\n\treturn equals( 0.0, (p1 - p2).cross( a.p1 - a.p2 ) );\n    }\n};\n\ntypedef Line Segment;\n\nint main()\n{\n    Point p1, p2, p;\n    int q;\n\n    scanf( \"%lf %lf %lf %lf\", &p1.x, &p1.y, &p2.x, &p2.y );\n\n    if ( p1 == p2 ) return 1;\n\n    Vector v12 = p2 - p1;    \n    double abs_v12 = v12.abs();\n\n    scanf( \"%d\", &q );\n    \n    for ( int i = 0; i < q; i++ ) {\n\tscanf( \"%lf %lf\", &p.x, &p.y );\n\t\n\tVector v10 = p - p1;\n\t\n\tPoint proj = p1 + v12 * ( v12.dot( v10 ) / ( abs_v12 * abs_v12 ) );\n\n\tprintf( \"%lf %lf\\n\", proj.x, proj.y );\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n---------------------------------------------------\n-- alithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = show x ++ \" \" ++  show y\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = (take 10) . vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in putStrLn . init . unlines $ map proj plist\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <list>\n#include <iterator>\n#include <cassert>\n#include <numeric>\n#include <functional>\n//#include <numeric>\n#pragma warning(disable:4996) \n \ntypedef long long ll;\ntypedef unsigned long long ull;\n#define MIN(a, b) ((a)>(b)? (b): (a))\n#define MAX(a, b) ((a)<(b)? (b): (a))\n#define LINF  9223300000000000000\n#define LINF2 1223300000000000000\n#define LINF3 1000000000000\n#define INF 2140000000\nconst long long MOD = 1000000007;\n//const long long MOD = 998244353;\n\nusing namespace std;\n\nvoid vecscl(double c, const double v0[2], double v1[2])\n{\n    v1[0] = v0[0] * c;\n    v1[1] = v0[1] * c;\n}\n\nvoid vecadd(const double v0[2], const double v1[2], double v2[2])\n{\n    v2[0] = v0[0] + v1[0];\n    v2[1] = v0[1] + v1[1];\n}\n\nvoid vecsub(const double v0[2], const double v1[2], double v2[2])\n{\n    v2[0] = v0[0] - v1[0];\n    v2[1] = v0[1] - v1[1];\n}\n\ndouble vecsum(const double v0[2], const double v1[2])\n{\n    return v0[0] * v1[0] + v0[1] * v1[1];\n}\n\ndouble veclen(const double v[2])\n{\n    return sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\nbool vecnrm(double eps, const double v0[2], double v1[2])\n{\n    double len = veclen(v0);\n    if (len < eps) {\n        return false;\n    }\n    vecscl(1 / len, v0, v1);\n    return true;\n}\n\nconst double eps = 1e-12;\n\nvoid solve()\n{\n    int x0, y0, x1, y1;\n    scanf(\"%d%d%d%d\", &x0, &y0, &x1, &y1);\n    double p0[2] = { (double)x0, (double)y0 };\n    double v0[2] = { (double)x1 - x0, (double)y1 - y0 };\n    bool ok = vecnrm(eps, v0, v0);\n    assert(ok);\n\n    int Q;\n    scanf(\"%d\", &Q);\n    int t;\n    for (t = 0; t < Q; t++) {\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        double v[2] = { (double)x, (double)y };\n        double vtmp[2], vtmp2[2], vtmp3[2];\n        vecsub(v, p0, vtmp);\n        double val = vecsum(v0, vtmp);\n        vecscl(val, v0, vtmp2);\n        vecadd(p0, vtmp2, vtmp3);\n        printf(\"%.10lf %.10lf\\n\", vtmp3[0], vtmp3[1]);\n    }\n\n    return;\n}\n\n\nint main(int argc, char* argv[])\n{\n#if 1\n    solve();\n#else\n    int T;\n    scanf(\"%d\", &T);\n    int t;\n    for(t=0; t<T; t++) {\n        //printf(\"Case #%d: \", t+1);\n        solve();\n    }\n#endif\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=jp\n#include <iostream>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\nclass Point{\nprivate:\n    double x;\n    double y;\npublic:\n    double getX(){return x;};\n    double getY(){return y;};\n    void setPoint(double inX, double inY){x = inX; y = inY;};\n    void disp(){printf(\"%.8lf %.8lf\\n\", x,y);}\n};\n\n/*\nvoid Projection(Point P1, Point P2, Point P, Point Output){\n    double ax = P2.getX() - P1.getX();\n    double ay = P2.getY() - P1.getY();\n    double bx = P.getX() - P1.getX();\n    double by = P.getY() - P1.getY();\n    double dot = ax*bx + ay*by;\n    double length = ax*ax + ay*ay;\n\n    double outX = ax * dot/length;\n    double outY = ay * dot/length;\n\n    Output.setPoint(outX, outY);\n    Output.disp();\n}*/\n\n\nint main(){\n    int n;\n    double inX, inY;\n    Point P, P1, P2, Output;\n    cin >> inX >> inY;\n    P1.setPoint(inX, inY);\n//    P1.disp();\n    cin >> inX >> inY;\n    P2.setPoint(inX, inY);\n//    P2.disp();\n    cin >> n;\n    double ax = P2.getX() - P1.getX();\n    double ay = P2.getY() - P1.getY();\n    double length = ax*ax + ay*ay;\n    for(int i=0; i<n; i++){\n        cin >> inX >> inY;\n        P.setPoint(inX, inY);\n        //Projection(P1, P2, P, Output);\n        //Output.disp();\n        double bx = P.getX() - P1.getX();\n        double by = P.getY() - P1.getY();\n        double dot = ax*bx + ay*by;\n\n        double outX = ax * dot/length;\n        double outY = ay * dot/length;\n\n        Output.setPoint(outX, outY);\n        Output.disp();\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n#include <cassert>\n#include <iomanip>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define fs first\n#define sc second\n#define pb push_back\nusing namespace std;\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P,P> L;\t\t//fs->sc\ntypedef vector<P> Pol;\nstruct C{P p;D r;};\nD inf=1e50,eps=1e-10;\n//template<class T> bool eq(T a, T b) { return abs(a-b)<eps;}\n//template<class T> int sig(T a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool eq(D a, D b) { return abs(a-b)<eps;}\nint sig(D a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\ninline D dot(P a, P b) { return real(conj(a)*b);};\ninline D cro(P a, P b) { return imag(conj(a)*b);};\nenum ENCCW{CCW=1, CW=-1, FRONT=2, BACK=-2, ON=0};\t//!!MAEHARAとFRONT,BACKが逆\n//ON優先(including endpoint)\ninline int ccw (P a, P b, P c){\n//\tcout << cro(b-a,c-a) << endl;\n\tif(sig(cro(b-a,c-a))==1) return CCW;\n\tif(sig(cro(b-a,c-a))==-1) return CW;\n\tif(eq(abs(a-c)+abs(c-b),abs(a-b))) return ON;\n\tif(eq(abs(a-b)+abs(b-c),abs(a-c))) return FRONT;\n\tif(eq(abs(c-a)+abs(a-b),abs(c-b))) return BACK;\n\tassert(false);\n}\ninline P proj(P a, P b){\t\t//ベクトルaのbへの射影\n\treturn (dot(a,b)/norm(b))*b;\n}\ninline P perp(L l, P p){\t\t//垂線の足\n\tD t=dot(p-l.fs,l.fs-l.sc)/norm(l.fs-l.sc);\n\treturn l.fs+t*(l.fs-l.sc);\n}\ninline P refl(L l, P p){\n\treturn p+2.0*(perp(l,p)-p);\n}\ninline bool ispal(L a, L b){\n\treturn sig(cro(a.fs-a.sc,b.fs-b.sc))==0;\n}\ninline bool ovLL(L a, L b){\n\treturn ispal(a,b) && sig(cro(a.fs-a.sc,b.fs-a.sc))==0;\n}\ninline bool iLL(L a, L b){\t\t//intersect or overload\n\treturn !ispal(a,b) || ovLL(a,b);\n}\ninline bool iLS(L l, L s){\t\t//intersect(including endpoint) or overload\n\treturn cro(l.sc-l.fs,s.fs-l.fs)*cro(l.sc-l.fs,s.sc-l.fs)<eps;\n}\ninline bool iLP(L l, P p){\t\t//on line\n\treturn sig(cro(l.sc-p,l.fs-p));\n}\ninline bool iSS(L a, L b){\t\t//intersect(including endpoint) or overload\n\treturn ccw(a.fs,a.sc,b.fs)*ccw(a.fs,a.sc,b.sc)<=0 && ccw(b.fs,b.sc,a.fs)*ccw(b.fs,b.sc,a.sc)<=0;\n}\ninline bool iSP(L s, P p){\t\t//intersect(including endpoint) or overload\n\treturn ccw(s.fs,p,s.sc)==ON;\n}\ninline D dLP(L l, P p) { return abs(perp(l,p)-p);}\ninline D dLL(L a, L b) { return iLL(a,b) ? 0 : dLP(a,b.fs);}\ninline D dLS(L l, L s) { return iLS(l,s) ? 0 : min(dLP(l,s.fs),dLP(l,s.sc));}\ninline D dSP(L s, P p) {\n\tP q=perp(s,p);\n\treturn iSP(s,q) ? abs(p-q) : min(abs(p-s.fs),abs(p-s.sc));\n}\ninline D dSS(L a, L b) {\n\tif(iSS(a,b)) return 0;\n\treturn min(min(dSP(a,b.fs),dSP(a,b.sc)),min(dSP(b,a.fs),dSP(b,a.sc)));\n}\ninline P intLL(L a, L b) {\t//intersection\n\tassert(!ispal(a,b));\n\tD t=cro(a.sc-a.fs,a.sc-b.fs)/cro(a.sc-a.fs,b.sc-b.fs);\n\treturn b.fs+t*(b.sc-b.fs);\n}\nenum ENICP{INC=1,ONC=0,OUTC=-1};\ninline int iCP(C c, P p){\n\tD d=abs(p-c.p);\n\treturn eq(d,c.r) ? ONC : (d<c.r ? INC : OUTC);\n}\ninline int iCL(C c, L l){\t\t//num of intersection(s)\n\tD d=dLP(l,c.p);\n\treturn eq(d,c.r) ? 1 : (d<c.r ? 2 : 0);\n}\n//inline int iCS\n//inline int iCC(C a, C b){\n\n/*inline P intCL1(C c, L l){\t\t//iCL=1\n\tassert(iCL(c,l)==1);\n}\ninline L intCL2(C c, L l){\t\t//iCL=2\n\tassert(iCL(c,l)==2);\n}*/\nD aTri(P a, P b, P c){ return cro(b-a,c-a)/2;}\nD aPol(Pol p){\t\t\t//点集合はCCWに与える\n\tint n=p.size();\n\tD ret=0;\n\trep(i,n) ret+=cro(p[i],p[(i+1)%n])/2;\n\treturn ret;\n}\nP gPol(Pol p){\t\t\t//多角形内部が一様な重さを持つときの重心\n\tint n=p.size();\n\tP g;\n\tD s=aPol(p);\n\tassert(s>eps);\n\trep(i,n){\n\t\tD ds=cro(p[i],p[(i+1)%n])/2;\n\t\tg+=ds/3*(p[i]+p[(i+1)%n]);\n\t}\n\treturn g/s;\n}\nenum ENCONT{INP=1,ONP=0,OUTP=-1};\nint contain(Pol pol, P p){\n\tbool in=false;\n\trep(i,pol.size()){\n\t\tP a=pol[i],b=pol[(i+1)%pol.size()];\n\t\tif(ccw(a,b,p)==ON) return ONP;\n\t\tif(!iLS(L(p,p+1.),L(a,b))) continue;\n\t\tif(ovLL(L(p,p+1.),L(a,b))){\n\t\t\tif(sig(max(real(a),real(b))-real(p))>=0) in=!in;\n\t\t\tcontinue;\n\t\t}\n\t\tif(sig(real(intLL(L(p,p+1.),L(a,b)))-real(p))>=0) in=!in;\n\t}\n\treturn in ? INP : OUTP;\n}\ninline D heron(D a, D b, D c){\n\tdouble s=(a+b+c)/2;\n\tif(s-a<eps || s-b<eps || s-c<eps) return 0;\t\t//S=0 || 三角形できない\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tD x0,y0,x1,y1;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tL a=L(P(x0,y0),P(x1,y1));\n\tint q;\n\tscanf(\"%d\",&q);\n\trep(i,q){\n\t\tD x,y;\n\t\t//scanf(\"%Lf%Lf\",&x,&y);\n\t\tcin >> x >> y;\n\t\tP p=perp(a,P(x,y));\n//\t\tprintf(\"%.10Lf %.10Lf\\n\",p.real(),p.imag());\n\t\tcout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y); \n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double a) {\n\t\treturn Point(a * x, a * y);\n\t}\n\tPoint operator / (double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nPoint project(Point p, Point p1, Point p2) {\n\tVector hypo = p - p1, base = p2 - p1;\n\treturn (p1 + base * dot(hypo, base) / base.norm());\n}\n\n\nint main() {\n\tint i, q, x, x1, x2, y, y1, y2;\n\tPoint ans;\n\tcin >> x1 >> y1 >> x2 >> y2 >> q;\n\tPoint p1(x1, y1), p2(x2, y2);\n\tfor (i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tans = project(p, p1, p2);\n\t\tcout << ans.x << \" \" << ans.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <algorithm>\n#include <cfloat>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <functional>\n#include <sstream>\n#include <string>\n#include <utility>\n#include <map>\n#include <memory>\n#include <set>\n#include <vector>\n#include <deque>\n#include <list>\n#include <stack>\n#include <queue>\n\nusing namespace std;\n\nconst int eps = 1e-10;\n\nclass Vector\n{\npublic:\n  double x;\n  double y;\n\n  Vector(){}\n  Vector( double x, double y ) : x(x), y(y) {}\n\n  Vector operator + ( const Vector v ) { return Vector( x + v.x, y + v.y ); }\n  Vector operator - ( const Vector v ) { return Vector( x - v.x, y - v.y ); }\n  Vector operator * ( const double k ) { return Vector( x * k, y * k ); }\n  Vector operator / ( const double k ) { return Vector( x / k, y / k ); }\n  bool operator < ( const Vector &v ) const { return x * x + y * y < v.x * v.x + v.y * v.y; }\n\n  double abs() { return sqrt( norm() ); }\n  double norm() { return x * x + y * y; }\n\n  static double dot( Vector v1, Vector v2 ) { return v1.x * v2.x + v1.y * v2.y; }\n  static double cross( Vector v1, Vector v2 ) { return v1.x * v2.y - v1.y * v2.x; }\n};\n\nint main()\n{\n\n  double x1, y1, x2, y2;\n\n  cin >> x1 >> y1 >> x2 >> y2;\n\n  Vector p1( x1, y1 );\n  Vector p2( x2, y2 );\n\n  int q;\n  cin >> q;\n\n  for ( auto i = 0; i < q; ++i )\n    {\n      double x, y;\n      cin >> x >> y;\n      Vector p( x , y );\n      \n      Vector a = p2 - p1;\n      Vector b = p - p1;\n\n      Vector pr = p1 + a * Vector::dot( a, b ) / a.norm();\n\n      cout << fixed << setprecision(10) << pr.x << \" \" << pr.y << endl;\n    }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-9;\n\nbool same(double a, double b) { return abs(a - b) < eps; }\n\nstruct P {\n    double x, y;\n    P() : x(0), y(0) {}\n    P(double x, double y) : x(x), y(y) {}\n    P operator + (P b) { return P(x + b.x, y + b.y); }\n    P operator - (P b) { return P(x - b.x, y - b.y); }\n    P operator * (double b) { return P(x * b, y * b); }\n    P operator / (double b) { return P(x / b, y / b); }\n    double operator * (P b) { return x * b.x + y * b.y; }\n    double operator ^ (P b) { return x * b.y - y * b.x; }\n    double abs() { return hypot(x, y); }\n    P unit() { return *this / abs(); }\n};\n\nstruct L{\n    // ax + by + c = 0\n    double a, b ,c, o;\n    P pa, pb;\n    L() : a(0), b(0), c(0), o(0), pa(), pb() {}\n    L(P pa, P pb) : a(pa.y - pb.y), b(pb.x - pa.x), c(pa ^ pb), o(atan2(-a, b)), pa(pa), pb(pb) {}\n    P project(P p) {\n        return pa + (pb - pa).unit() * ((pb - pa) * (p - pa) / (pb - pa).abs());\n    }\n};\n\nP intersect(L x, L y) {\n    if (same(x.a * y.b, x.b * y.a)) throw;\n    double z = -x.a * y.b + x.b * y.a;\n    return P(-x.b * y.c + x.c * y.b, x.a * y.c - x.c * y.a) / z;\n}\n\nint main() {\n    P p1; cin >> p1.x >> p1.y;\n    P p2; cin >> p2.x >> p2.y;\n    L l(p1, p2);\n    int q; cin >> q; while (q--) {\n        P p; cin >> p.x >> p.y;\n        p = l.project(p);\n        cout << fixed << setprecision(10) << p.x << \" \" << p.y << '\\n';\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <algorithm>\n#include <array>\n#include <climits>\n#include <cmath>\n#include <cstdint>\n#include <cstdio>\n#include <cstdlib>\n#include <ctime>\n#include <functional>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <type_traits>\n#include <utility>\n#include <vector>\n\nusing int32 = std::int_fast32_t;\nusing int64 = std::int_fast64_t;\nusing uint32 = std::uint_fast32_t;\nusing uint64 = std::uint_fast64_t;\nusing intl32 = std::int_least32_t;\nusing intl64 = std::int_least64_t;\nusing uintl32 = std::uint_least32_t;\nusing uintl64 = std::uint_least64_t;\n\nstatic constexpr double PI = 3.1415926535897932;\nstruct angle {\n\tdouble r;\n\tangle() :r(0) {}\n\tangle(double r_) :r(arr(std::fmod(r_, 2.0 * PI) + 2.0 * PI)) {}\n\tstatic double arr(const double &o) { return o < 2.0 * PI - eps ? o : o - 2.0 * PI; }\n\tstatic angle make(const double &o) { angle ret;ret.r = o;return ret; }\n\tconst angle operator+(const angle &o)const { return make(arr(r + o.r)); }\n\tconst angle operator-(const angle &o)const { return make(arr(r - o.r + 2.0 * PI)); }\n\tconst angle operator*(const double &o)const { return angle(r * o); }\n\tconst angle operator/(const double &o)const { return angle(r / o); }\n\tangle &operator+=(const angle &o) { return *this = *this + o; }\n\tangle &operator-=(const angle &o) { return *this = *this - o; }\n\tangle &operator*=(const double &o) { return *this = *this * o; }\n\tangle &operator/=(const double &o) { return *this = *this / o; }\n\tconst angle operator~()const { return make(arr(3.0 * PI - r)); }\n\tconst angle operator-()const { return make(arr(2.0 * PI - r)); }\n\tconst bool operator==(const angle &o)const { return std::abs(r - o.r) <= eps; }\n\tconst bool operator!=(const angle &o)const { return std::abs(r - o.r) > eps; }\n\tconst bool operator< (const angle &o)const { return r <  o.r; }\n\tconst bool operator<=(const angle &o)const { return r <= o.r; }\n\tconst bool operator> (const angle &o)const { return r >  o.r; }\n\tconst bool operator>=(const angle &o)const { return r >= o.r; }\n\texplicit operator bool()const { return r > eps; }\n\texplicit operator double()const { return r; }\n\tconst double sin()const { return std::sin(r); }\n\tconst double cos()const { return std::cos(r); }\n\n\tconst double degree()const { return r*(180.0 / PI); }\n\tconst double ratio()const { return r / (2.0 * PI); }\nprivate:\n\tstatic constexpr double eps = 0.0000001;\n};\nangle operator\"\" _deg(long double x) { return angle(x*(PI / 180.0)); }\nangle operator\"\" _rat(long double x) { return angle(x * 2.0 * PI); }\nangle operator\"\" _rad(long double x) { return angle(x); }\nstruct pvec {\n\tstatic constexpr double eps = 0.0000000000001;\n\tdouble x, y;\n\tpvec() :x(0), y(0) {}\n\tpvec(double x_, double y_) :x(x_), y(y_) {}\n\tpvec(double abs_, angle r) :x(abs_*r.cos()), y(abs_*r.sin()) {}\n\tconst pvec operator+(const pvec &o)const { return pvec(x + o.x, y + o.y); }\n\tconst pvec operator-(const pvec &o)const { return pvec(x - o.x, y - o.y); }\n\tconst pvec operator*(const pvec &o)const { return pvec(x*o.x - y*o.y, x*o.y + y*o.x); }\n\tconst pvec operator/(const pvec &o)const { return pvec(x*o.x + y*o.y, y*o.x - x*o.y) / abs2(); }\n\tconst pvec operator*(const double &o)const { return pvec(x * o, y * o); }\n\tconst pvec operator/(const double &o)const { return pvec(x / o, y / o); }\n\tpvec &operator+=(const pvec &o) { return *this = *this + o; }\n\tpvec &operator-=(const pvec &o) { return *this = *this - o; }\n\tpvec &operator*=(const pvec &o) { return *this = *this * o; }\n\tpvec &operator/=(const pvec &o) { return *this = *this / o; }\n\tpvec &operator*=(const double &o) { return *this = *this * o; }\n\tpvec &operator/=(const double &o) { return *this = *this / o; }\n\n\tconst pvec operator+()const { return *this; }\n\tconst pvec operator-()const { return pvec(-x, -y); }\n\tconst pvec operator~()const { return pvec(x, -y); }\n\n\texplicit operator bool()const { return std::abs(x) > eps || std::abs(y) > eps; }\n\tconst bool operator==(const pvec &o)const { return std::abs(x - o.x) <= eps&&std::abs(y - o.y) <= eps; }\n\tconst bool operator!=(const pvec &o)const { return std::abs(x - o.x) > eps || std::abs(y - o.y) > eps; }\n\n\tconst double abs()const { return mysqrt(abs2()); }\n\tconst double abs2()const { return x*x + y*y; }\n\tconst angle arg()const {\n\t\tif (x > eps) return angle(std::atan(y / x));\n\t\tif (x < eps) return angle(std::atan(y / x) + PI);\n\t\treturn angle();\n\t}\n\tstatic const double dot(const pvec &l, const pvec &r) { return l.x*r.x + l.y*r.y; }\n\tstatic const double cross(const pvec &l, const pvec &r) { return l.x*r.y - l.y*r.x; }\n\tconst pvec dir()const { return *this / abs(); }\n\n\tstatic const bool C_x(const pvec &l, const pvec &r) {\n\t\tif (l.x != r.x) return l.x < r.x;\n\t\treturn l.y < r.y;\n\t}\n\n\tfriend std::istream &operator>>(std::istream &is, pvec &o) {\n\t\tdouble x_, y_;is >> x_ >> y_;o = pvec(x_, y_);return (is);\n\t}\n\tfriend std::ostream &operator<<(std::ostream &os, const pvec &o) {\n\t\treturn os << o.x << \" \" << o.y;\n\t}\nprivate:\n\tstatic const double mysqrt(const double &x) {\n\t\tdouble h = 0.5*x;\n\t\tstd::uint_fast64_t t = 0x5FE6EB50C7B537AAl\n\t\t\t- (*(std::uint_fast64_t*)&x >> 1);\n\t\tdouble r = *(double*)&t;\n\t\tr *= 1.5 - h*r*r;r *= 1.5 - h*r*r;\n\t\tr *= 1.5 - h*r*r;r *= 1.5 - h*r*r;\n\t\treturn r*x;\n\t}\n};\n\nint main(void) {\n\t//std::ios::sync_with_stdio(false);\n\t//std::cin.tie(0);\n\tpvec o, d;\n\tstd::cin >> o >> d;\n\td = (d - o).dir();\n\tuint32 q;\n\tstd::cin >> q;\n\tpvec p;\n\twhile (q--) {\n\t\tstd::cin >> p;\n\t\tp -= o;\n\t\tp = d*pvec::dot(p, d);\n\t\tp += o;\n\t\tprintf(\"%6.10f %6.10f\\n\", p.x, p.y);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#define for0(i, n) for(int i = 0; i < (n); i++)\n#define for1(i, n) for(int i = 1; i <= (n);i++)\nusing namespace std;\nint get() { int r; cin >> r; return r; }\nsigned main() {\n\tdouble x1, x2, y1, y2, x3, y3, a, b, c, d;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\ta = x1 - x2; b = y1 - y2;\n\tc = b; d = a;\n\tif (d < 0)d *= -1;\n\telse c *= -1;\n\tint q = get();\n\tfor1(i, q) {\n\t\tcin >> x3 >> y3;\n\t\tdouble k1 = -100000, k2 = 100000;\n\t\twhile (k2 - k1 >= 0.0000000000001) {\n\t\t\tdouble mid = (k1 + k2) / 2;\n\t\t\tif ((a * (y3 + k1 * d - y1) - b * (x3 + k1 * c - x1)) * ((a * (y3 + mid * d - y1) - b * (x3 + mid * c - x1))) > 0) {\n\t\t\t\tk1 = mid;\n\t\t\t}\n\t\t\telse k2 = mid;\n\t\t}\n\t\tdouble k = (k1 + k2) / 2;\n\t\tprintf(\"%.20f %.20f\\n\", x3 + k * c, y3 + k * d);\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>//Aizu - CGL_2_A  （线段平行和垂直）\nusing namespace std;\ndouble dot(double x0, double y0, double x1, double y1, double x2, double y2, double x3, double y3){\n    return (x1 - x0) * (x3 - x2) + (y1- y0) * (y3 - y2);\n}\ndouble dist(double x0, double y0, double x1, double y1){\n    return sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1));\n}\nint main(){\n    int n, i;\n    double x0, y0, x1, y1, x2, y2, x3, y3, r;\n    // cin >> x0 >> y0 >> x1 >> y1;\n    scanf(\"%lf%lf%lf%lf\", &x0, &y0, &x1, &y1);\n    cin >> n;\n    while(n --){\n        // scanf(\"%d%d%d%d%d%d%d%d\", &x0, &y0, &x1, &y1, &x2, &y2, &x3, &y3);\n        // cin >> x2 >> y2;\n        scanf(\"%lf%lf\", &x2, &y2);\n        r = dot(x0, y0, x1, y1, x0, y0, x2, y2) / dist(x0, y0, x1, y1)  / dist(x0, y0, x1, y1); \n        printf(\"%.7lf %.7lf\\n\", x0 + r * (x1 - x0), y0 + r * (y1 - y0));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "/**\"I am not an authorized coder\"**/\n#include <bits/stdc++.h>\n#define FOR(i, s, e)    for(int i=s; i<e; i++)\n#define loop(i, n)      FOR(i, 0, n)\n#define sf              scanf\n#define pf              printf\n#define pb              push_back\n#define MP              make_pair\n#define fr              first\n#define sc              second\n#define lli             long long\n#define dd              double\n#define all(v)          v.begin(), v.end()\n#define PI              2*acos(0.0)\n#define mem(ara, value) memset(ara, value, sizeof(ara))\n#define paii            pair<int, int>\n#define pall            pair<ll, ll>\n#define SZ(a)           int(a.size())\n#define open()          freopen(\"input.txt\", \"r\", stdin)\n#define show()          freopen(\"output.txt\", \"w\", stdout)\n#define read(a)         scanf(\"%d\",&a)\n#define read2(a,b)      scanf(\"%d%d\",&a,&b)\n#define read3(a,b,c)    scanf(\"%d%d%d\",&a,&b,&c)\n#define read4(a,b,c,d)  scanf(\"%d%d%d%d\",&a,&b,&c,&d)\n#define readI1(a)       scanf(\"%lld\",&a)\n#define readI2(a,b)     scanf(\"%lld %lld\",&a,&b)\n#define readI3(a,b,c)   scanf(\"%lld %lld %lld\",&a,&b,&c)\n#define readI4(a,b,c,d) scanf(\"%lld %lld %lld %lld\",&a,&b,&c,&d)\n#define BOUNDARY(i, j)  ((i >= 0 && i < w) && (j >= 0 && j < h))\n#define Mx 100009\n#define EPS 1e-12\n#define sq(x) ((x)*(x))\n#define sq_dist(a,b)    (sqrt(sq(a.x-b.x)+sq(a.y-b.y)));\n#define cross(o,a,b)    ((a.x-o.x)*(b.y-o.y)-(a.y-o.y)*(b.x-o.x))\nusing namespace std;\nint main()\n{\n\tint x0,y0,x1,y1,x2,y2;\n\tread4(x0,y0,x1,y1);\n\tdouble x,y;\n\tint n;\n\tread(n);\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tread2(x2,y2);\n\t\tif((x2==0 && y2==0 && x0==0 && y0==0) || (x2==0 && y2==0 && x1==0 && y1==0)) {printf(\"0.00000000000 0.00000000000\\n\");continue;}\n\n\t\tdouble z=(sqrt(sq(x0-x1)+sq(y0-y1))*sqrt(sq(x0-x2)+sq(y0-y2)));\n\t\tdouble costheta=((x1-x0)*(x2-x0)+(y1-y0)*(y2-y0))/z;\n\t\t//if(z==0.00000000000) {x=0.00000000000; y=0.00000000000;}\n\t\tdouble f=(x1-x0),f1=(sqrt(sq(x0-x1)+sq(y0-y1))),f2=(y1-y0);\n\t\t//if(f==0.00000000000 || f1==0.00000000000 || f2==0.00000000000) {x=0.00000000000; y=0.00000000000;}\n\t\tx=(sqrt(sq(x0-x2)+sq(y0-y2))*costheta)*(f/f1);\n\t\ty=(sqrt(sq(x0-x2)+sq(y0-y2))*costheta)*(f2/(sqrt(sq(x0-x1)+sq(y0-y1))));\n\t\tif( y==-0.00000000000) { y=fabs(y);}\n\t\tif(x==-0.00000000000 ) x=fabs(x);\n\t\tprintf(\"%.11f %.11f\\n\",x,y);\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <complex>\n#include <vector>\nusing namespace std;\nconst double eps = 1e-10;\n#define EQ(a, b) (abs((a) - (b)) < eps)\nusing P = complex<double>;      // position\nstruct L : vector<P> {\n    L(const P &a = P(), const P &b = P()) {\n        emplace_back(a); emplace_back(b);\n    }\n};\ndouble dot(const P &a, const P &b) { return real(conj(a) * b); }\ndouble cross(const P &a, const P &b) { return imag(conj(a) * b); }\n\nP project(const L &l, const P &p) {\n    double t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n    return l[0] + t * (l[0] - l[1]);\n}\n\n#include <iostream>\n#include <iomanip>\nint main() {\n    cout << fixed << setprecision(10);\n    int a, b, c, d; cin >> a >> b >> c >> d;\n    L l(P(a, b), P(c, d));\n    int q; cin >> q;\n    while (q--) {\n        int x, y; cin >> x >> y;\n        P p = project(l, P(x, y));\n        cout << p.real() << \" \" << p.imag() << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define fi first\n#define se second\n#define repl(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define rep(i,n) repl(i,0,n)\n#define each(itr,v) for(auto itr:v)\n#define pb(s) push_back(s)\n#define mp(a,b) make_pair(a,b)\n#define all(x) (x).begin(),(x).end()\n#define dbg(x) cout<<#x\"=\"<<x<<endl\n#define maxch(x,y) x=max(x,y)\n#define minch(x,y) x=min(x,y)\n#define uni(x) x.erase(unique(all(x)),x.end())\n#define exist(x,y) (find(all(x),y)!=x.end())\n#define bcnt(x) bitset<32>(x).count()\n\n#define x(p) real(p)\n#define y(p) imag(p)\n\nconst double eps=1e-10;\nconst double inf=1e12;\ntypedef complex<double> P;\n\nnamespace std{\n  bool operator<(const P& a,const P& b){\n    return x(a)==x(b)?y(a)<y(b):x(a)<x(b);\n  }\n}\ndouble cross(const P& a,const P& b){\n  return y(conj(a)*b);\n}\ndouble dot(const P& a,const P& b){\n  return x(conj(a)*b);\n}\nstruct L : public vector<P> { // line and segment\n  L(const P& a,const P &b){\n    push_back(a);\n    push_back(b);\n  }\n};\n\nP projection(const L& l,const P& p){\n  double t=dot(p-l[0],l[0]-l[1])/norm(l[0]-l[1]);\n  return l[0]+t*(l[0]-l[1]);\n}\n\nint main(){\n\tcin.sync_with_stdio(false);\n  int q;\n  double x1,x2,x3,y1,y2,y3;\n  cin>>x1>>y1>>x2>>y2;\n  cin>>q;\n  rep(i,q){\n    cin>>x3>>y3;\n    P res=projection(L(P(x1,y1),P(x2,y2)),P(x3,y3));\n    printf(\"%.10f %.10f\\n\", x(res),y(res));\n  }\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\nconst double EPS=1e-10;\nstruct point{\n\tdouble x,y;\n\tpoint(const point&a):x(a.x),y(a.y){}\n\tpoint(const double&x=0,const double&y=0):x(x),y(y){}\n\tpoint operator+(const point&p)const{return point(x+p.x,y+p.y);}\n\tpoint operator-(const point&p)const{return point(x-p.x,y-p.y);}\n\tpoint operator*(const double&k)const{return point(x*k,y*k);}\n\tpoint operator/(const double&k)const{return point(x/k,y/k);}\n\tdouble norm(){return x*x+y*y;}\n\tdouble abs(){return sqrt(norm());}\n\tvoid operator=(const point&a){\n\t\tx=a.x,y=a.y;\n\t}\n\tbool operator<(const point&p)const{\n\t\treturn x!=p.x?x<p.x:y<p.y;\n\t}\n\tbool operator==(const point&p)const{\n\t\treturn fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n\t}\n\tfriend double dot(const point&a,const point&b){\n\t\treturn a.x*b.x+a.y*b.y;\n\t}\n\tfriend double cross(const point&a,const point&b){\n\t\treturn a.x*b.y-a.y*b.x;\n\t}\n};\nusing vector=point;\nstruct segment{\n\tpoint p1,p2;\n\tsegment(const double&a,const double&b,const double&c,const double&d){\n\t\tp1.x=a,p1.y=b,p2.x=c,p2.y=d;\n\t}\n\tsegment(const point&a, const point&b):p1(a),p2(b){}\n\tpoint get_vec()const{return point(p2.x-p1.x,p2.y-p1.y);}\n};\npoint project(const segment&s,const point&p){\n\tvector base=s.get_vec();\n\tdouble r=dot(p-s.p1,base)/base.norm();\n\treturn s.p1+base*r;\n}\npoint reflect(const segment&s,const point&p){\n\treturn p+(project(s,p)-p)*2.0;\n}\nint main(){\n\tdouble a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\tsegment s(a,b,c,d);\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>a>>b;\n\t\tpoint t=project(s,point(a,b));\n\t\tcout<<setprecision(8)<<fixed<<t.x<<' '<<t.y<<endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define fi first\n#define se second\n#define repl(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define rep(i,n) repl(i,0,n)\n#define each(itr,v) for(auto itr:v)\n#define pb(s) push_back(s)\n#define mp(a,b) make_pair(a,b)\n#define all(x) (x).begin(),(x).end()\n#define dbg(x) cout<<#x\"=\"<<x<<endl\n#define maxch(x,y) x=max(x,y)\n#define minch(x,y) x=min(x,y)\n#define uni(x) x.erase(unique(all(x)),x.end())\n#define exist(x,y) (find(all(x),y)!=x.end())\n#define bcnt(x) bitset<32>(x).count()\n\n#define x(p) real(p)\n#define y(p) imag(p)\n\nconst double eps=1e-10;\nconst double inf=1e12;\ntypedef complex<double> P;\n\nnamespace std{\n  bool operator<(const P& a,const P& b){\n    return x(a)==x(b)?y(a)<y(b):x(a)<x(b);\n  }\n}\ndouble cross(const P& a,const P& b){\n  return y(conj(a)*b);\n}\ndouble dot(const P& a,const P& b){\n  return x(conj(a)*b);\n}\nstruct L : public vector<P> { // line and segment\n  L(const P& a,const P &b){\n    push_back(a);\n    push_back(b);\n  }\n};\n\nP projection(const L& l,const P& p){\n  //double t=dot(p-l[0],l[0]-l[1])/norm(l[0]-l[1]);\n  P b=l[1]-l[0],c=p-l[0];\n  return l[0]+b*x(c/b);\n}\n\nint main(){\n\tcin.sync_with_stdio(false);\n  int q;\n  double x1,x2,x3,y1,y2,y3;\n  cin>>x1>>y1>>x2>>y2;\n  cin>>q;\n  rep(i,q){\n    cin>>x3>>y3;\n    P res=projection(L(P(x1,y1),P(x2,y2)),P(x3,y3));\n    printf(\"%.10f %.10f\\n\", x(res),y(res));\n  }\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <set>\n#include <algorithm>\n#include <array>\n#include <complex>\n#include <string>\n#include <utility>\n#include <map>\n#include <queue>\n#include <list>\n#include <functional>\n#include <numeric>\n#include <stack>\n#include <tuple>\n\nusing namespace std;\nint dx[4] = { -1,0,1,0 };\nint dy[4] = { 0,1,0,-1 };\nconst int INF = 100000000;\nconst long long LINF = 1000000000000000000;\nconst int MOD = (int)1e9 + 7;\nconst double EPS = 1e-6;\nusing pii = std::pair<int, int>;\nusing ll = long long;\nusing pLL = std::pair<ll, ll>;\n#define SORT(v) std::sort(v.begin(), v.end())\n#define X real()\n#define Y imag()\nusing P=complex<double>;\ndouble dot(P a, P b) {\n    return (a.X*b.X + a.Y*b.Y);\n}\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    P p1, p2;\n    double x1, x2, y1, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    p1 = P(x1, y1);\n    p2 = P(x2, y2);\n    p2 -= p1;\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        cin >> x1 >> y1;\n        P p0;\n        p0 = P(x1, y1);\n        p0 -= p1;\n        p0 = p1 + dot(p0, p2)/norm(p2)*p2;\n        printf(\"%.9f %.9f\\n\", p0.X, p0.Y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\n\nint projection(double xp1, double yp1, double xp2, double yp2, double* px, double* py)\n{\n    if (xp1 == xp2 && yp1 == yp2) {\n        return 1;\n    } else if (xp1 == xp2) {\n        *px = xp1;\n        return 0;\n    } else {\n        double dist = sqrt(pow((xp2 - xp1), 2) + pow((yp2 - yp1), 2));\n        double cos = (xp2 - xp1) / dist;\n        double sin = (yp2 - yp1) / dist;\n        double xrot = cos * (*px) + sin * (*py);\n        double yrot = -sin * (*px) + cos * (*py);\n        yrot = 0;\n        *px = cos * xrot - sin * yrot;\n        *py = sin * xrot + cos * yrot;\n        return 0;\n    }\n}\n\n\nint main()\n{\n\tdouble xp1 = 0, yp1 = 0, xp2 = 0, yp2 = 0;\n    double x = 0, y = 0;\n    double* px = &x;\n    double* py = &y;\n\tchar ch;\n\t// cout << \"input:\";\n\tcin >> xp1 >> yp1 >> xp2 >> yp2;\n\tunsigned int q, i;\n    // cout << \"number of points:\";\n\tcin >> q;\n\tfor (i = 0; i < q; i++){\n        // cout << \"point \" << i << \":\";\n\t\tcin >> x >> y;\n        projection(xp1, yp1, xp2, yp2, &x, &y);\n\t\tcout << x << \" \" << y << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<vector>\n#include<algorithm>\n#include<cmath>\n#include<climits>\n#include<ctime>\n#include<cstring>\n#include<stack>\n#include<queue>\n#include<sstream>\n#include<string>\n#include<set>\n#include<array>\n\n#define ALL(v) (v).begin(),(v).end()\n#define REP(i,p,n) for(int i=p;i<(int)(n);++i)\n#define rep(i,n) REP(i,0,n)\n#define DUMP(list) cout << \"{ \"; for(auto nth : list){ cout << nth << \" \"; } cout << \"}\" << endl\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i);\n\nusing namespace std;\n\ntypedef double Real;\n\nconst Real EPS = 1e-8;\n\nint sign(Real d){\n\treturn d > EPS ? 1 : d < -EPS ? -1 : 0;\n}\n\nstruct Point{\n\tReal x,y;\n\t\n\tPoint(Real x_ = 0,Real y_ = 0):x(x_),y(y_){}\n\n\tPoint operator+(const Point &p) const {return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point &p) const {return Point(x-p.x,y-p.y);}\n\tPoint operator*(Real s) const {return Point(x*s,y*s);}\n\tPoint operator/(Real s) const {return Point(x/s,y/s);}\n\tbool operator<(const Point &p) const{return sign(x-p.x) == -1 || (sign(x-p.x) == 0 && sign(y-p.y) == -1);}\n\tbool operator==(const Point &p) const{return sign(x-p.x) == 0 && sign(y-p.y) == 0;}\n\n};\n\nistream &operator>>(istream &is,Point &p){return is >> p.x >> p.y;}//??\\???????°???????\nostream &operator<<(ostream &os ,const Point &p){return os << '(' << p.x << \", \" << p.y << ')';}//??????????°???????\n\nstruct Segment : public array<Point,2>{\n\tSegment(const Point &a,const Point &b){\tat(0) = a; at(1) = b;}\n};\n\nstruct Line : public array<Point,2>{\n\tLine(const Point &a,const Point &b){at(0) = a; at(1) = b;}\n};\n\nstruct Circle{\n\tPoint c;\n\tReal r;\n\n\tCircle(const Point &c_, Real r_):c(c_),r(r_){}\n};\n\ntypedef vector<Point> Polygon;\n\n\n\nPoint rotate90(const Point &p){\n\treturn Point(-p.y,p.x);\n}\n\nPoint rotate(const Point &p,Real theta){\n\tconst Real s = sin(theta),c = cos(theta);\n\treturn Point(c*p.x-s*p.y,s*p.x+c*p.y);\n}\n\nReal angle(const Point &p){\n\treturn atan2(p.y,p.x);\n}\n\nReal dot(const Point &a,const Point &b){ //??????????????????\n\treturn a.x*b.x+a.y*b.y;\n}\n\nReal cross(const Point &a,const Point &b){ //??????????????????\n\treturn a.x*b.y-a.y*b.x;\n}\n\nbool intersect(const Line &a,const Line &b){ //????????????\n\treturn sign(cross(a[1]-a[0],b[1]-b[0])) != 0\n\t\t||\tsign(cross(a[1]-a[0],b[1]-a[0]) == 0);\n}\n\nReal norm(const Point &p){\n\treturn p.x*p.x+p.y*p.y;\n}\n\nReal abs(const Point &p){\n\treturn sqrt(norm(p));\n}\n\nint main(){\n\tPoint p0,p1;\n\tint q;\n\t\n\tcout.setf(ios::fixed);\n\tcout.precision(10);\n\n\tcin >> p0 >> p1;\n\tcin >> q;\n\trep(i,q){\n\t\tPoint p2;\n\t\tcin >> p2;\n\t\tLine l1(p0,p1);\n\t\tReal t = dot(p2-l1[0], l1[1]-l1[0]) / norm(l1[0] - l1[1]);\n\t\tPoint ans = l1[0] + (l1[1] - l1[0]) * t;\n\t\tcout << ans.x << \" \" << ans.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define REP(i,n) FOR(i,0,n)\n#define FOR(i,a,b) for(ll i=a;i<b;i++)\n#define PB push_back\ntypedef vector<ll> vi;\ntypedef vector<vector<ll>> vvi;\nconst ll INF = (1ll << 60);\ntypedef pair<ll,ll> pii;\nstruct Point{double x,y;};\nstruct Vec{double x,y; Vec(Point p1,Point p2) {x=p2.x-p1.x; y=p2.y-p1.y;}};\ndouble dot(Vec v1,Vec v2) {return v1.x*v2.x+v1.y*v2.y;}\ndouble len(Vec v) {return sqrt(dot(v,v));}\ndouble cos(Vec v1,Vec v2) {return dot(v1,v2)/(len(v1)*len(v2));}\nPoint operator+(Point p,Vec v) {p.x+=v.x; p.y+=v.y; return p;}\ndouble dist(Point p1,Point p2) {return len(Vec(p1,p2));}\nVec operator*(Vec v,double i) {v.x*=i; v.y*=i; return v;}\nint main(){\n  Point p1,p2; cin>>p1.x>>p1.y>>p2.x>>p2.y;\n  ll q; cin>>q;\n  REP(i,q){\n    Point p; cin>>p.x>>p.y;\n    Vec a(p1,p), b(p1,p2);\n    Point ans=p1+b*(dot(a,b)/dot(b,b));\n    printf(\"%8f %8f\\n\",ans.x,ans.y);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iomanip>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1.0e-9\n\ndouble dist(int x, int y)\n{\n\treturn sqrt(x * x + y * y);\n}\n\ndouble angle(int x, int y)\n{\n\treturn atan2((double)(x), (double)(y));\n}\n\nint main()\n{\n\tint x0, y0, x1, y1, x2, y2, q;\n\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tcin >> x2 >> y2;\n\n\t\tint ax = x1 - x0;\n\t\tint ay = y1 - y0;\n\t\tint bx = x2 - x0;\n\t\tint by = y2 - y0;\n\n\t\tdouble ad = dist(ax, ay);\n\t\tdouble bd = dist(bx, by);\n\n\t\tdouble at = angle(ax, ay);\n\t\tdouble bt = angle(bx, by);\n\n\t\tdouble cx = ax * (bd / ad) * cos(bt - at);\n\t\tdouble cy = ay * (bd / ad) * cos(bt - at);\n\n\t\tif (x0 + cx < -EPS || EPS < x0 + cx)\n\t\t{\n\t\t\tcout << setprecision(12) << x0 + cx << ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << 0 << ' ';\n\t\t}\n\n\t\tif (y0 + cy < -EPS || EPS < y0 + cy)\n\t\t{\n\t\t\tcout << setprecision(12) << y0 + cy << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cmath>\n\n#define EPS (1e-10)\n#define equals( A, B ) (fabs((A) - (B)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n    Point( double x = 0, double y = 0 ): x(x), y(y) {}\n    \n    Point operator + ( Point p ) { return Point( x + p.x, y + p.y ); }\n    Point operator - ( Point p ) { return Point( x - p.x, y - p.y ); }\n    Point operator * ( double a ) { return Point( a * x, a * y ); }\n    Point operator / ( double a ) { return Point( x / a, y / a ); }\n\n    double abs() { return sqrt( norm() ); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < ( const Point &p ) const {\n\treturn ( x != p.x ) ? x < p.x : y < p.y;\n    }\n\n    bool operator == ( const Point &p ) const {\n\treturn equals( x, p.x ) && equals( y, p.y ); \n    }\n\n    double dot( Point a ) { return x * a.x + y * a.y; }\n    double cross( Point a ) { return x * a.y - y * a.x; }\n};\n\ntypedef Point Vector;\n\nclass Line {\npublic:\n    Point p1, p2;\n    Line( Point p1 = Point(), Point p2 = Point() ) {}\n    // ?????´????????????( cos = 0 )\n    bool isOrthogonal( Line a ) {\n\treturn equals( 0.0, (p1 - p2).dot( a.p1 - a.p2 ) );\n    }\n    // ??????????????????( sin = 0 )\n    bool isParallel( Line a ) {\n\treturn equals( 0.0, (p1 - p2).cross( a.p1 - a.p2 ) );\n    }\n};\n\ntypedef Line Segment;\n\nint main()\n{\n    Point p1, p2, p;\n    int q;\n\n    scanf( \"%lf %lf %lf %lf\", &p1.x, &p1.y, &p2.x, &p2.y );\n\n    if ( p1 == p2 ) return 1;\n\n    Vector v12 = p2 - p1;    \n    double abs_v12 = v12.abs();\n\n    scanf( \"%d\", &q );\n    \n    for ( int i = 0; i < q; i++ ) {\n\tscanf( \"%lf %lf\", &p.x, &p.y );\n\t\n\tVector v10 = p - p1;\n\t\n\tPoint proj = p1 + v12 * ( v12.dot( v10 ) / ( abs_v12 * abs_v12 ) );\n\n\tprintf( \"%.10lf %.10lf\\n\", proj.x, proj.y );\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef complex<double>Point;\n\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Circle{\n    Point p;\n    double r;\n    Circle(const Point &p=Point(),double r=0.0):p(p),r(r){}\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\ntypedef vector<Point>Polygon;\n\nconst double PI=acos(-1);\nconst double EPS=1e-8;\nconst double INF=1e16;\n\ninline double square(double a){return a*a;}\ninline double norm(const Point &a){return square(a.real())+square(a.imag());}\ninline double dot(const Point &a,const Point &b){return (conj(a)*b).real();}\ninline double cross(const Point &a,const Point &b){return (conj(a)*b).imag();}\ninline double toDeg(double t){return t/PI*180.0;}\ninline double toRad(double t){return t/180.0*t;}\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return isOrthogonal(s1.p1-s1.p2,s2.p1-s2.p2);\n}\n\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return isParallel(s1.p1-s1.p2,s2.p1-s2.p2);\n}\n\nPoint project(Segment s,Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\n\nvoid getPoint(Point &p){\n    double x,y;\n    scanf(\"%lf%lf\",&x,&y);\n    p=Point(x,y);\n}\n\nint main(){\n    Segment s;\n    getPoint(s.p1);\n    getPoint(s.p2);\n\n    int q;\n    scanf(\"%d\",&q);\n\n    while(q--){\n        Point p;\n        getPoint(p);\n        Point x=project(s,p);\n        printf(\"%.20lf %.20lf\\n\",x.real(),x.imag());\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\ntypedef long double ld;\n\nclass Point {\npublic:\n\tld x, y;\n\tPoint(ld x, ld y) :\n\t\t\tx(x), y(y) {\n\t}\n\n\tPoint operator +(Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(ld a) {\n\t\treturn Point(x * a, y * a);\n\t}\n\n};\n\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) :\n\t\t\tp1(p1), p2(p2) {\n\t}\n};\n\nld norm(Point p1) {\n\treturn p1.x * p1.x + p1.y * p1.y;\n}\n\nld dot(Point p1, Point p2) {\n\treturn p1.x * p2.x + p1.y * p2.y;\n}\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p1 - s.p2;\n\tld r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\n\nint main() {\n\n\tint p1x, p1y, p2x, p2y;\n\tscanf(\"%d %d %d %d\", &p1x, &p1y, &p2x, &p2y);\n\tPoint p1(p1x, p1y);\n\tPoint p2(p2x, p2y);\n\tSegment segment(p1, p2);\n\n\tint q;\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; ++i) {\n\t\tint qx, qy;\n\t\tscanf(\"%d %d\", &qx, &qy);\n\n\t\tPoint p(qx, qy);\n\t\tPoint ans = project(segment, p);\n\t\tcout << fixed << setprecision(10) << ans.x << \" \" << ans.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//Projection\n#include <iostream>\n#include <math.h>\n#include <iomanip>\n\nusing namespace std;\n\nstatic const double ESP = 1e-10;\n\nbool equals(double a, double b) { return fabs(a - b) < ESP; }\n\nclass Point {\npublic:\n    double x, y;\n\n    explicit Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (const Point &p) const { return Point(x + p.x, y + p.y); }\n    Point operator - (const Point &p) const { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(a / x, a / y); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < ESP && fabs(y - p.y) < ESP;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector v1, Vector v2) {\n    return equals(cross(v1, v2), 0.0);\n}\n\nbool isOrthogonal(Vector v1, Vector v2) {\n    return equals(dot(v1, v2), 0.0);\n}\n\nint main() {\n    int q;\n    double x, y, x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2 >> q;\n    Point p1 = Point(x1, y1), p2 = Point(x2, y2);\n    Vector v1, v2;\n    v1 = p2 - p1;\n    for(int i = 0; i < q; i++) {\n        cin >> x >> y;\n        Point p = Point(x, y);\n        Vector v2 = p - p1;\n        Point x = Point();\n        x = p1 + (v1 * (dot(v1, v2) / v1.norm()));\n        cout << setprecision(10) << x.x << \" \" << x.y << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define N 50005\n#define re register\n#define ll long long\n#define P 998244353\nusing namespace std;\nbool m1;\nint n,m,K;\ninline void Rd(int &res){\n\tre char c;res=0;\n\twhile(c=getchar(),c<48);\n\tdo res=(res<<3)+(res<<1)+(c^48);\n\twhile(c=getchar(),c>47);\n}\nstruct Point{\n\tdouble x,y;\n\tPoint operator+(const Point&a)const{return (Point){x+a.x,y+a.y};}\n\tPoint operator-(const Point&a)const{return (Point){x-a.x,y-a.y};}\n\tPoint operator*(const double&v)const{return (Point){x*v,y*v};}\n\tdouble operator*(const Point&a)const{return x*a.x+y*a.y;}\n\tdouble operator^(const Point&a)const{return x*a.y-y*a.x;}\n\tdouble len(){return sqrt(x*x+y*y);}\n}p1,p2,p;\nbool m2;\nint main(){\n\tscanf(\"%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n\tPoint p3=p2-p1;\n\tdouble l=p3.len();\n\tint q;Rd(q);\n\twhile(q--){\n\t\tscanf(\"%lf%lf\",&p.x,&p.y);\n\t\tdouble l1=((p-p1)*p3)/l;\n\t\tPoint q=p3*(l1/l);\n\t\tq=p1+q;\n\t\tprintf(\"%.12lf %.12lf\\n\",q.x,q.y);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n\nusing namespace std;\n\nint main()\n{\n\tint x0, y0, x1, y1, q, x2, y2;\n\tscanf(\"%d %d %d %d\", &x0, &y0, &x1, &y1);\n\tscanf(\"%d\", &q);\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%d %d\", &x2, &y2);\n\t\tlong double x, y;\n\t\tx = x0 + (x1-x0)*((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)) / (pow(x1 - x0, 2) + pow(y1 - y0, 2));\n\t\ty = y0 + (y1-y0)*((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)) / (pow(x1 - x0, 2) + pow(y1 - y0, 2));\n\t\tprintf(\"%.11llf %.11llf\\n\", x, y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define dbg(x...) do { cout << \"\\033[32;1m\" << #x <<\" -> \"; err(x); } while (0)\nvoid err() { cout << \"\\033[39;0m\" << endl; }\ntemplate<class T, class... Ts> void err(const T& arg,const Ts&... args) { cout << arg << \" \"; err(args...); }\n\ntypedef long double db;\nconst db eps = 1e-12;\nconst db pi = acosl(-1.0);\ninline int sgn(db x) {if(fabs(x) < eps) return 0; return x < 0 ? -1 : 1;}\nstruct Point {\n    db x, y;\n    Point(){}\n    Point(db x, db y):x(x), y(y){}\n    void input(){\n        cin >> x >> y;\n    }\n    Point operator + (const Point &b) const {\n        return Point(x + b.x, y + b.y);\n    }\n    Point operator - (const Point &b) const {\n        return Point(x - b.x, y - b.y);\n    }\n    db operator ^ (const Point &b) const {\n        return x * b.y - y * b.x;\n    }\n    db operator * (const Point &b) const {\n        return x * b.x + y * b.y;\n    }\n    Point operator * (const db k){\n        return Point(x * k, y * k);\n    }\n    Point operator / (const db k){\n        return Point(x / k, y / k);\n    }\n    db len2(){\n        return x * x + y * y;\n    }\n    db len(){\n        return sqrtl(len2());\n    }\n};\nstruct Line{\n    Point s, e;\n    Line(){}\n    Line(Point s, Point e) :s(s), e(e){}\n    void input(){s.input(), e.input();}\n    Point getPointProgLine(Point p){\n        Point a = e - s, b = p - s;\n        return s + ((a * (a * b)) / a.len2());\n    }\n}l;\n\nint main(){\n#ifndef ONLINE_JUDGE\n// freopen(\"i.in\",\"r\",stdin);\n//  freopen(\"o.out\",\"w\",stdout);\n#endif\n    l.input();\n    int q;scanf(\"%d\", &q);\n    while(q -- ){\n        Point p; p.input();\n        p = l.getPointProgLine(p);\n        cout << fixed << setprecision(10) << p.x << ' ' << p.y << endl;\n    } \n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Point\n{\n    double x,y;\n    Point(){ x = y = 0.0; }\n    Point(double _x, double _y) : x(_x), y(_y){}\n\n    Point operator- (Point p)\n    {\n        return Point(p.x - x, p.y - y);\n    }\n\n    double operator* (Point p)\n    {\n        return p.x * x + p.y * y;\n    }\n\n    double operator~ ()\n    {\n        return x * x + y * y;\n    }\n\n    Point operator* (double t)\n    {\n        return Point(x * t , y * t);\n    }\n\n};\n\nPoint projection(Point p1, Point p2, Point o)\n{\n    Point a = (p2 - p1);\n    double val = (a * o) / ~a;\n    return a * val;\n}\n\nint main()\n{\n    cout.precision(10);\n    cout << fixed;\n    int q;\n    Point p1, p2, o, ans;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    cin >> q;\n    while(q--)\n    {\n        cin >> o.x >> o.y;\n        ans = projection(p1, p2, o);\n        cout << ans.x << \" \" << ans.y << '\\n';\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define int lint\ntypedef long long lint;\ntypedef pair<int,int> P;\nconst int    INF=(int)1e9;\nconst int    MOD=(int)1e9+7;\nconst double EPS=(double)1e-10;\n#define equals(a,b) (fabs((a)-(b))<EPS)\nstruct Accelerate_Cin{\n    Accelerate_Cin(){\n        cin.tie(0);ios::sync_with_stdio(0);cout<<fixed<<setprecision(20);\n    };\n};\n\n//幾何学テンプレート\n\n//点\nclass Point{\npublic:\n  double x,y;\n\n  Point(double x = 0,double y = 0):x(x), y(y){};\n\n  Point operator + (Point p) {return Point (x+p.x, y+p.y);}\n  Point operator - (Point p) {return Point (x-p.x, y-p.y);}\n  Point operator * (double a) {return Point(a*x, a*y);}\n  Point operator / (double a) {return Point(x/a,y/a);}\n\n  double abs(){return (norm());}\n  double norm(){return x*x+y*y;}\n\n  bool operator < (const Point &p)const{\n    return x!=p.x ? x<p.x:y<p.y;\n  }\n  bool operator > (const Point &p)const{\n    return x!=p.x ? x>p.x:y>p.y;\n  }\n  bool operator == (const Point &p)const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\n//ベクトル\ntypedef Point Vector;\n\n//内積\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//外積\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//線分\nstruct Segment{Point p1,p2;};\n\n//直線\ntypedef Segment Line;\n\n//円\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\n//多角形\ntypedef vector<Point> Polygon;\n\n//ある点から、直線/線分に対する射影を求める。\nPoint project(Segment s, Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/base.norm();\n  return s.p1+base*r;\n}\n\n\nsigned main(){\n  double x1,y1,x2,y2;cin>>x1>>y1>>x2>>y2;\n  Point p1={x1,y1},p2={x2,y2};\n  Segment s={p1,p2};\n\n  int qq;cin>>qq;\n  queue<Point>q;\n  for(int i=0;i<qq;i++){\n    double x,y;cin>>x>>y;\n    Point p={x,y};\n    Point ans=project(s,p);\n    q.push(ans);\n  }\n\n  while(!q.empty()){\n    Point temp=q.front();q.pop();\n    cout<<fixed<<setprecision(10)<<temp.x<<\" \"<<temp.y<<endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\nusing namespace std;\n\nclass Point{\n\tpublic:\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y){}\n\t\n\tPoint operator + (Point p){\n\t\treturn Point(x+p.x,y+p.y);\n\t}\n\tPoint operator - (Point p){\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n\tPoint operator * (double a){\n\t\treturn Point(a*x,a*y);\n\t}\n\tdouble norm(){\n\t\treturn x*x+y*y;\n\t}\t\n};\ntypedef Point Vector;\n\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n\nPoint project(Point p1,Point p2,Point w){\n\t\n\tVector base=p2-p1;\n\tdouble r=dot(w-p1,base)/base.norm();\n\treturn p1+base*r;\n}\n\nint main(){\n\t\n\tdouble g,h,j,k;\n\tscanf(\"%lf%lf%lf%lf\",&g,&h,&j,&k);\n\tPoint p1(g,h);\n\tPoint p2(j,k);\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tdouble o,p;\n\t\tscanf(\"%lf%lf\",&o,&p);\n\t\tPoint w(o,p);\n\t\tPoint u=project(p1,p2,w);\n\t\tprintf(\"%.10lf %.10lf\\n\",u.x,u.y);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace arithmetic {\n  template<typename T> class Addition {\n  public:\n    T operator+(const T& v) const {\n      T res(static_cast<const T&>(*this));\n      return res += v;\n    }\n  };\n\n  template<typename T> class Subtraction {\n  public:\n    T operator-(const T& v) const {\n      T res(static_cast<const T&>(*this));\n      return res -= v;\n    }\n  };\n\n  template<typename T> class Multiplication {\n  public:\n    T operator*(const T& v) const {\n      T res(static_cast<const T&>(*this));\n      return res *= v;\n    }\n  };\n\n  template<typename T> class Division {\n  public:\n    T operator/(const T& v) const {\n      T res(static_cast<const T&>(*this));\n      return res /= v;\n    }\n  };\n}\n\ntemplate<typename T> class IndivisibleArithmetic : public arithmetic::Addition<T>, public arithmetic::Subtraction<T>, public arithmetic::Multiplication<T> {};\n\ntemplate<typename T> class Arithmetic : public IndivisibleArithmetic<T>, public arithmetic::Division<T> {};\n\ntemplate<typename T> class Ordered {\npublic:\n  bool operator==(const T& v) const {\n    return !(v < static_cast<const T&>(*this) || static_cast<const T&>(*this) < v);\n  }\n  \n  bool operator!=(const T& v) const {\n    return v < static_cast<const T&>(*this) || static_cast<const T&>(*this) < v;\n  }\n\n  bool operator>(const T& v) const {\n    return v < static_cast<const T&>(*this);\n  }\n\n  bool operator<=(const T& v) const {\n    return !(v < static_cast<const T&>(*this));\n  }\n\n  bool operator>=(const T& v) const {\n    return !(static_cast<const T&>(*this) < v);\n  }\n};\n\nclass Real : public Arithmetic<Real>, public Ordered<Real> {\nprivate:\n  static long double EPS;\n  long double val;\n\npublic:\n  Real() {}\n\n  Real(long double val) : val(val) {}\n\n  Real operator+=(const Real& r) {\n    val += r.val;\n    return *this;\n  }\n  \n  Real operator-=(const Real& r) {\n    val -= r.val;\n    return *this;\n  }\n  \n  Real operator*=(const Real& r) {\n    val *= r.val;\n    return *this;\n  }\n  \n  Real operator/=(const Real& r) {\n    val /= r.val;\n    return *this;\n  }\n\n  bool operator<(Real r) const {\n    return val < r.val - EPS;\n  }\n\n  operator long double() {\n    return val;\n  }\n};\n\nlong double Real::EPS = 1e-8;\n\nostream& operator<<(ostream& os, Real a) {\n\tos << (long double)a;\n\treturn os;\n}\n\nistream& operator>>(istream& is, Real& a) {\n\tlong double n;\n\tis >> n;\n\ta = n;\n\treturn is;\n}\n\nclass Point : public Arithmetic<Point> {\npublic:\n  Real x, y;\n  \n  Point() {}\n\n  Point (Real x, Real y) : x(x), y(y) {}\n  \n  Point operator+=(const Point& p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n\n  Point operator-=(const Point& p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n\n  Point operator*=(const Point& p) {\n    Real xx = x * p.x - y * p.y;\n    Real yy = x * p.y + y * p.x;\n    return *this = Point(xx, yy);\n  }\n\n  Point operator/=(const Point& p) {\n    Real nrm = p.norm();\n    Real xx = (x * p.x + y * p.y) / nrm;\n    Real yy = (x * p.y - y * p.x) / nrm;\n    return *this = Point(xx, yy);\n  }\n\n  Point operator*=(const Real& r) {\n    x *= r;\n    y *= r;\n    return *this;\n  }\n\n  Point operator*(const Real& r) const {\n    Point res(static_cast<const Point&>(*this));\n    return res *= r;\n  }\n\n  Real norm() const {\n    return x * x + y * y;\n  }\n\n  Real abs() const {\n    return sqrt(norm());\n  }\n};\n\ninline Real norm(const Point& p) {\n  return p.norm();\n}\n\ninline Real abs(const Point& p) {\n  return p.abs();\n}\n\nostream& operator<<(ostream& os, Point a) {\n\tos << \"(\" << a.x << \",\" << a.y << \")\";\n\treturn os;\n}\n\nistream& operator>>(istream& is, Point& a) {\n  Real x, y;\n\tis >> x >> y;\n\ta = Point(x, y);\n\treturn is;\n}\n\ninline Point proj(const Point& a, const Point &b) {\n  return a * (b / a).x;\n}\n\nint main() {\n  Point p1, p2;\n  cin >> p1 >> p2;\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Point p, r;\n    cin >> p;\n    r = proj(p2 - p1, p - p1);\n    cout << fixed << setprecision(15) << r.x << \" \" << fixed << setprecision(15) << r.y << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <deque>\n#include <queue>\n//#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define mp make_pair\n#define pb push_back\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n\treturn a < -EPS ? -1 : a > EPS;\n}\n\ninline int cmp(db a, db b){\n\treturn sign(a-b);\n}\n\nstruct P {\n\tdb x, y;\n\tP() {}\n\tP(db _x, db _y) : x(_x), y(_y) {}\n\tP operator+(P p) { return P(x + p.x, y + p.y); }\n\tP operator-(P p) { return P(x - p.x, y - p.y); }\n\tP operator*(db d) { return P(x * d, y * d); }\n\tP operator/(db d) { return P(x / d, y / d); }\n\tbool operator<(P p) const {\n\t\tint c = cmp(x, p.x);\n\t\tif (c) return c == -1;\n\t\treturn cmp(y, p.y) == -1;\n\t}\n\tdb dot(P p) { return x * p.x + y * p.y; }\n\tdb det(P p) { return x * p.y - y * p.x; }\n\tdb distTo(P p) { return (*this-p).abs(); }\n\tdb alpha() { return atan2(y, x); }\n\tvoid read() { cin>>x>>y; }\n\tdb abs() { return sqrt(abs2());}\n\tdb abs2() { return x * x + y * y; }\n\tP rot90() { return P(-y,x);}\n\tP unit() { return *this/abs(); }\n    int quad() const { return sign(y) == 1 || (sign(y) == 0 && sign(x) >= 0); }\n};\n\nstruct L{ //ps[0] -> ps[1]\n\tP ps[2];\n\tP& operator[](int i) { return ps[i]; }\n\tP dir() { return ps[1] - ps[0]; }\n \tbool include(P p) { return sign((ps[1] - ps[0]).det(p - ps[0])) > 0; }\n \tL push(){ // push eps outward\n \t\tconst double eps = 1e-6;\n \t\tP delta = (ps[1] - ps[0]).rot90().unit() * eps;\n \t\treturn {ps[0] - delta, ps[1] - delta};\n \t}\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isLL(P p1, P p2, P q1, P q2) {\n\tdb a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n\treturn (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nP isLL(L l1,L l2){ return isLL(l1[0],l1[1],l2[0],l2[1]); }\n\nbool intersect(db l1,db r1,db l2,db r2){\n\tif(l1>r1) swap(l1,r1); if(l2>r2) swap(l2,r2);\n\treturn !( cmp(r1,l2) == -1 || cmp(r2,l1) == -1 );\n}\n\nbool isSS(P p1, P p2, P q1, P q2){\n    return intersect(p1.x,p2.x,q1.x,q2.x) && intersect(p1.y,p2.y,q1.y,q2.y) &&\n    crossOp(p1,p2,q1) * crossOp(p1,p2,q2) <= 0 && crossOp(q1,q2,p1)\n            * crossOp(q1,q2,p2) <= 0;\n}\n\nbool isMiddle(db a, db m, db b) {\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n\nbool isMiddle(P a, P m, P b) {\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nbool onSeg(P p1, P p2, P q){\n\treturn crossOp(p1,p2,q) == 0 && isMiddle(p1, q, p2);\n}\n\nP proj(P p1, P p2, P q) {\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\n\nP reflect(P p1, P p2, P q){\n\treturn proj(p1,p2,q) * 2 - q;\n}\n\ndb nearest(P p1,P p2,P q){\n\tP h = proj(p1,p2,q);\n\tif(isMiddle(p1,h,p2))\n\t\treturn q.distTo(h);\n\treturn min(p1.distTo(q),p2.distTo(q));\n}\n\ndb disSS(P p1, P p2, P q1, P q2){\n\tif(isSS(p1,p2,q1,q2)) return 0;\n\treturn min(min(nearest(p1,p2,q1),nearest(p1,p2,q2)), min(nearest(q1,q2,p1),nearest(q1,q2,p2)) );\n}\n\ndb rad(P p1,P p2){\n\treturn atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n\tdb A = p1.distTo(p2);\n\tdb B = p2.distTo(p3);\n\tdb C = p3.distTo(p1);\n\treturn sqrtl(A*B*C/(A+B+C));\n}\n\n//polygon\n\ndb area(vector<P> ps){\n\tdb ret = 0; rep(i,0,ps.size()) ret += ps[i].det(ps[(i+1)%ps.size()]);\n\treturn abs(ret/2);\n}\n\nint contain(vector<P> ps, P p){ //2:inside,1:on_seg,0:outside\n\tint n = ps.size(), ret = 0;\n\trep(i,0,n){\n\t\tP u=ps[i],v=ps[(i+1)%n];\n\t\tif(onSeg(u,v,p)) return 1;\n\t\tif(cmp(u.y,v.y)<=0) swap(u,v);\n\t\tif(cmp(p.y,u.y) >0 || cmp(p.y,v.y) <= 0) continue;\n\t\tret ^= crossOp(p,u,v) > 0;\n\t}\n\treturn ret*2;\n}\n\nvector<P> convexHull(vector<P> ps) {\n    int n = ps.size(); if(n <= 1) return ps;\n    sort(ps.begin(), ps.end());\n    vector<P> qs(n * 2); int k = 0;\n    for (int i = 0; i < n; qs[k++] = ps[i++])\n        while (k > 1 && crossOp(qs[k - 2], qs[k - 1], ps[i]) <= 0) --k;\n    for (int i = n - 2, t = k; i >= 0; qs[k++] = ps[i--])\n       \twhile (k > t && crossOp(qs[k - 2], qs[k - 1], ps[i]) <= 0) --k;\n    qs.resize(k - 1);\n    return qs;\n}\n\nvector<P> convexHullNonStrict(vector<P> ps) {\n\t//caution: need to unique the Ps first\n    int n = ps.size(); if(n <= 1) return ps;\n    sort(ps.begin(), ps.end());\n    vector<P> qs(n * 2); int k = 0;\n    for (int i = 0; i < n; qs[k++] = ps[i++])\n        while (k > 1 && crossOp(qs[k - 2], qs[k - 1], ps[i]) < 0) --k;\n    for (int i = n - 2, t = k; i >= 0; qs[k++] = ps[i--])\n       \twhile (k > t && crossOp(qs[k - 2], qs[k - 1], ps[i]) < 0) --k;\n    qs.resize(k - 1);\n    return qs;\n}\n\ndb convexDiameter(vector<P> ps){\n\tint n = ps.size(); if(n <= 1) return 0;\n\tint is = 0, js = 0; rep(k,1,n) is = ps[k]<ps[is]?k:is, js = ps[js] < ps[k]?k:js;\n\tint i = is, j = js;\n\tdb ret = ps[i].distTo(ps[j]);\n\tdo{\n\t\tif((ps[(i+1)%n]-ps[i]).det(ps[(j+1)%n]-ps[j]) >= 0)\n\t\t\t(++j)%=n;\n\t\telse\n\t\t\t(++i)%=n;\n\t\tret = max(ret,ps[i].distTo(ps[j]));\n\t}while(i!=is || j!=js);\n\treturn ret;\n}\n\nvector<P> convexCut(const vector<P>&ps, P q1, P q2) {\n\tvector<P> qs;\n\tint n = ps.size();\n\trep(i,0,n){\n\t\tP p1 = ps[i], p2 = ps[(i+1)%n];\n\t\tint d1 = crossOp(q1,q2,p1), d2 = crossOp(q1,q2,p2);\n\t\tif(d1 >= 0) qs.pb(p1);\n\t\tif(d1 * d2 < 0) qs.pb(isLL(p1,p2,q1,q2));\n\t}\n\treturn qs;\n}\n\n//min_dist\n\ndb min_dist(vector<P>&ps,int l,int r){\n\tif(r-l<=5){\n\t\tdb ret = 1e100;\n\t\trep(i,l,r) rep(j,l,i) ret = min(ret,ps[i].distTo(ps[j]));\n\t\treturn ret;\n\t}\n\tint m = (l+r)>>1;\n\tdb ret = min(min_dist(ps,l,m),min_dist(ps,m,r));\n\tvector<P> qs; rep(i,l,r) if(abs(ps[i].x-ps[m].x)<= ret) qs.pb(ps[i]);\n\tsort(qs.begin(), qs.end(),[](P a,P b) -> bool {return a.y<b.y; });\n\trep(i,1,qs.size()) for(int j=i-1;j>=0&&qs[j].y>=qs[i].y-ret;--j) ret = min(ret,qs[i].distTo(qs[j]));\n\treturn ret;\n}\n\nint type(P o1,db r1,P o2,db r2){\n\tdb d = o1.distTo(o2);\n\tif(cmp(d,r1+r2) == 1) return 4;\n\tif(cmp(d,r1+r2) == 0) return 3;\n\tif(cmp(d,abs(r1-r2)) == 1) return 2;\n\tif(cmp(d,abs(r1-r2)) == 0) return 1;\n\treturn 0;\n}\n\nvector<P> isCL(P o,db r,P p1,P p2){\n\tdb x = (p1-o).dot(p2-p1), y = (p2-p1).abs2(), d = x * x - y * ((p1-o).abs2() - r*r);\n\tif(sign(d) < 0) return {};\n\td = max(d,0.0); P m = p1 - (p2-p1)*(x/y), dr = (p2-p1)*(sqrt(d)/y);\n\treturn {m-dr,m+dr}; //along dir: p1->p2\n}\n\nvector<P> isCC(P o1, db r1, P o2, db r2) { //need to check whether two circles are the same\n\tdb d = o1.distTo(o2);\n\tif (cmp(d, r1 + r2) == 1) return {};\n\td = min(d, r1 + r2);\n\tdb y = (r1 * r1 + d * d - r2 * r2) / (2 * d), x = sqrt(r1 * r1 - y * y);\n\tP dr = (o2 - o1).unit();\n\tP q1 = o1 + dr * y, q2 = dr.rot90() * x;\n\treturn {q1-q2,q1+q2};//along circle 1\n}\n\nvector<P> tanCP(P o, db r, P p) {\n\tdb x = (p - o).abs2(), d = x - r * r;\n\tif (sign(d) <= 0) return {}; // on circle => no tangent\n\tP q1 = o + (p - o) * (r * r / x);\n\tP q2 = (p - o).rot90() * (r * sqrt(d) / x);\n\treturn {q1-q2,q1+q2}; //counter clock-wise\n}\n\n\nvector<L> extanCC(P o1, db r1, P o2, db r2) {\n\tvector<L> ret;\n\tif (cmp(r1, r2) == 0) {\n\t\tP dr = (o2 - o1).unit().rot90() * r1;\n\t\tret.pb({o1 + dr, o2 + dr}), ret.pb({o1 - dr, o2 - dr});\n\t} else {\n\t\tP p = (o2 * r1 - o1 * r2) / (r1 - r2);\n\t\tvector<P> ps = tanCP(o1, r1, p), qs = tanCP(o2, r2, p);\n\t\trep(i,0,min(ps.size(),qs.size())) ret.pb({ps[i], qs[i]}); //c1 counter-clock wise\n\t}\n\treturn ret;\n}\n\nvector<L> intanCC(P o1, db r1, P o2, db r2) {\n\tvector<L> ret;\n \tP p = (o1 * r2 + o2 * r1) / (r1 + r2);\n \tvector<P> ps = tanCP(o1,r1,p), qs = tanCP(o2,r2,p);\n\trep(i,0,min(ps.size(),qs.size())) ret.pb({ps[i], qs[i]}); //c1 counter-clock wise\n\treturn ret;\n}\n\ndb areaCT(db r, P p1, P p2){\n\tvector<P> is = isCL(P(0,0),r,p1,p2);\n\tif(is.empty()) return r*r*rad(p1,p2)/2;\n\tbool b1 = cmp(p1.abs2(),r*r) == 1, b2 = cmp(p2.abs2(), r*r) == 1;\n\tif(b1 && b2){\n\t\tif(sign((p1-is[0]).dot(p2-is[0])) <= 0 &&\n\t\t\tsign((p1-is[0]).dot(p2-is[0])) <= 0)\n\t\treturn r*r*(rad(p1,is[0]) + rad(is[1],p2))/2 + is[0].det(is[1])/2;\n\t\telse return r*r*rad(p1,p2)/2;\n\t}\n\tif(b1) return (r*r*rad(p1,is[0]) + is[0].det(p2))/2;\n\tif(b2) return (p1.det(is[1]) + r*r*rad(is[1],p2))/2;\n\treturn p1.det(p2)/2;\n}\n\nbool parallel(L l0, L l1) { return sign( l0.dir().det( l1.dir() ) ) == 0; }\n\nbool sameDir(L l0, L l1) { return parallel(l0, l1) && sign(l0.dir().dot(l1.dir()) ) == 1; }\n\nbool cmp (P a,  P b) {\n\tif (a.quad() != b.quad()) {\n\t\treturn a.quad() < b.quad();\n\t} else {\n\t\treturn sign( a.det(b) ) > 0;\n\t}\n}\n\nbool operator < (L l0, L l1) {\n\tif (sameDir(l0, l1)) {\n\t\treturn l1.include(l0[0]);\n\t} else {\n\t\treturn cmp( l0.dir(), l1.dir() );\n\t}\n}\n\nbool check(L u, L v, L w) {\n\treturn w.include(isLL(u,v));\n}\n\nvector<P> halfPlaneIS(vector<L> &l) {\n\tsort(l.begin(), l.end());\n\tdeque<L> q;\n\tfor (int i = 0; i < (int)l.size(); ++i) {\n \t\tif (i && sameDir(l[i], l[i - 1])) continue;\n \t\twhile (q.size() > 1 && !check(q[q.size() - 2], q[q.size() - 1], l[i])) q.pop_back();\n \t\twhile (q.size() > 1 && !check(q[1], q[0], l[i])) q.pop_front();\n \t\tq.push_back(l[i]);\n \t}\n\twhile (q.size() > 2 && !check(q[q.size() - 2], q[q.size() - 1], q[0])) q.pop_back();\n\twhile (q.size() > 2 && !check(q[1], q[0], q[q.size() - 1])) q.pop_front();\n\tvector<P> ret;\n\tfor (int i = 0; i < (int)q.size(); ++i) ret.push_back(isLL(q[i], q[(i + 1) % q.size()]));\n\treturn ret;\n}\n\nint main(){\n\tP p1(0,0),p2(0,0);\n\tp1.read(),p2.read();\n\tint q;\n\tcin >> q;\n\twhile(q--){\n\t\tP p3(0,0);\n\t\tp3.read();\n\t\tp3 = proj(p1,p2,p3);\n\t\tprintf(\"%.10lf %.10lf\\n\",p3.x,p3.y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/*\nw2sc\n2019/12/19\n17:09:09\n*/\n#include <bits/stdc++.h>\n#define ull unsigned long long\n#define ll long long\nusing namespace std;\ndouble sqr(double x){return x*x;}\nstruct point{\n    double x,y;\n    point(){}\n    point(double xx,double yy){x=xx,y=yy;}\n}A,B,P;\ntypedef point vec;\nvec operator +(vec x,vec y){return vec(x.x+y.x,x.y+y.y);}\nvec operator -(vec x,vec y){return vec(x.x-y.x,x.y-y.y);}\nvec operator *(double x,vec y){return vec(x*y.x,x*y.y);}\nstruct line{\n    point A,B;\n    line(){}\n    line(point AA,point BB){A=AA,B=BB;}\n    double len()\n    {\n        return sqrt(sqr(A.x-B.x)+sqr(A.y-B.y));\n    }\n}a,b;\ndouble operator *(vec p1,vec p2)\n{return p1.x*p2.x+p1.y*p2.y;}\nint q;\nint main()\n{\n    double x,y;\n    scanf(\"%lf%lf\",&x,&y);\n    A=point(x,y);\n    scanf(\"%lf%lf\",&x,&y);\n    B=point(x,y);\n    a=line(A,B);\n    scanf(\"%d\",&q);\n    while(q--)\n    {\n        scanf(\"%lf%lf\",&x,&y);\n        P=point(x,y);\n        b=line(A,P);\n        point ans=A+((a.B-a.A)*(b.B-b.A))/a.len()/a.len()*(a.B-a.A);\n        printf(\"%.15f %.15f\\n\",ans.x,ans.y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <vector>\n#include <list>\n#include <map>\n#include <climits>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <random>\n#include <cctype>\n#include <complex>\n\nusing namespace std;\n\n//typedef\n//------------------------------------------\ntypedef long long LL;\ntypedef vector<int> VI;\ntypedef vector<bool> VB;\ntypedef vector<char> VC;\ntypedef vector<double> VD;\ntypedef vector<string> VS;\ntypedef vector<LL> VLL;\ntypedef vector<VI> VVI;\ntypedef vector<VB> VVB;\ntypedef vector<VS> VVS;\ntypedef vector<VLL> VVLL;\ntypedef vector<VVI> VVVI;\ntypedef vector<VVLL> VVVLL;\ntypedef pair<int, int> PII;\ntypedef pair<LL, LL> PLL;\ntypedef pair<int, string> PIS;\ntypedef pair<string, int> PSI;\ntypedef pair<string, string> PSS;\n\n\n//数値・文字列\n//------------------------------------------\ninline int toInt(string s) {\n    int v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\n\ninline LL toLongLong(string s) {\n    LL v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\n\ntemplate<class T>\ninline string toString(T x) {\n    ostringstream sout;\n    sout << x;\n    return sout.str();\n}\n\ninline VC toVC(string s) {\n    VC data(s.begin(), s.end());\n    return data;\n}\n\ntemplate<typename List>\nvoid SPRIT(const std::string &s, const std::string &delim, List &result) {\n    result.clear();\n    string::size_type pos = 0;\n    while (pos != string::npos) {\n        string::size_type p = s.find(delim, pos);\n        if (p == string::npos) {\n            result.push_back(s.substr(pos));\n            break;\n        } else {\n            result.push_back(s.substr(pos, p - pos));\n        }\n        pos = p + delim.size();\n    }\n}\n\nstring TRIM(const string &str, const char *trimCharacterList = \" \\t\\v\\r\\n\") {\n    string result;\n    string::size_type left = str.find_first_not_of(trimCharacterList);\n    if (left != string::npos) {\n        string::size_type right = str.find_last_not_of(trimCharacterList);\n        result = str.substr(left, right - left + 1);\n    }\n    return result;\n}\n\ntemplate<typename T>\nbool VECTOR_EXISTS(vector<T> vec, T data) {\n    auto itr = std::find(vec.begin(), vec.end(), data);\n    size_t index = distance(vec.begin(), itr);\n    if (index != vec.size()) {\n        return true;\n    } else {\n        return 0;\n    }\n}\n\n#define UPPER(s) transform((s).begin(), (s).end(), (s).begin(), ::toupper)\n#define LOWER(s) transform((s).begin(), (s).end(), (s).begin(), ::tolower)\n\n\n\n//四捨五入 nLen=小数点第N位にする\n//------------------------------------------\n\n//切り上げ\ndouble ceil_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut + 0.9);\n    return dOut * pow(10.0, -nLen);\n}\n\n//切り捨て\ndouble floor_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut);\n    return dOut * pow(10.0, -nLen);\n}\n\n//四捨五入\ndouble round_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut + 0.5);\n    return dOut * pow(10.0, -nLen);\n}\n\n//n桁目の数の取得\nint take_a_n(int num, int n) {\n    string str = toString(num);\n    return str[str.length() - n] - '0';\n}\n\n\n//進数\n//------------------------------------------\n\n//\"1111011\" → 123\nint strbase_2to10(const std::string &s) {\n    int out = 0;\n    for (int i = 0, size = s.size(); i < size; ++i) {\n        out *= 2;\n        out += ((int) s[i] == 49) ? 1 : 0;\n    }\n    return out;\n}\n\n//\"123\" → 1111011\nint strbase_10to2(const std::string &s) {\n    int binary = toInt(s);\n    int out = 0;\n    for (int i = 0; binary > 0; i++) {\n        out = out + (binary % 2) * pow(static_cast<int>(10), i);\n        binary = binary / 2;\n    }\n    return out;\n}\n\n//\"ABC\" 2748\nint strbase_16to10(const std::string &s) {\n    int out = stoi(s, 0, 16);\n    return out;\n}\n\n//1111011 → 123\nint intbase_2to10(int in) {\n    string str = toString(in);\n    return strbase_2to10(str);\n}\n\n//123 → 1111011\nint intbase_10to2(int in) {\n    string str = toString(in);\n    return strbase_10to2(str);\n}\n\nint intbase_16to10(int in) {\n    string str = toString(in);\n    return strbase_16to10(str);\n}\n\n//123→ \"7B\"\nstring intbase_10to16(unsigned int val, bool lower = true) {\n    if (!val)\n        return std::string(\"0\");\n    std::string str;\n    const char hc = lower ? 'a' : 'A';     // 小文字 or 大文字表記\n    while (val != 0) {\n        int d = val & 15;     // 16進数一桁を取得\n        if (d < 10)\n            str.insert(str.begin(), d + '0');  //  10未満の場合\n        else //  10以上の場合\n            str.insert(str.begin(), d - 10 + hc);\n        val >>= 4;\n    }\n    return str;\n}\n\n//整数を2進数表記したときの1の個数を返す\nLL bitcount64(LL bits) {\n    bits = (bits & 0x5555555555555555) + (bits >> 1 & 0x5555555555555555);\n    bits = (bits & 0x3333333333333333) + (bits >> 2 & 0x3333333333333333);\n    bits = (bits & 0x0f0f0f0f0f0f0f0f) + (bits >> 4 & 0x0f0f0f0f0f0f0f0f);\n    bits = (bits & 0x00ff00ff00ff00ff) + (bits >> 8 & 0x00ff00ff00ff00ff);\n    bits = (bits & 0x0000ffff0000ffff) + (bits >> 16 & 0x0000ffff0000ffff);\n    return (bits & 0x00000000ffffffff) + (bits >> 32 & 0x00000000ffffffff);\n}\n\n\n\n//comparison\n//------------------------------------------\n#define C_MAX(a, b) ((a)>(b)?(a):(b))\n#define C_MIN(a, b) ((a)<(b)?(a):(b))\n#define C_ABS(a, b) ((a)<(b)?(b)-(a):(a)-(b))\n\n\n\n//container util\n//------------------------------------------\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define SZ(a) int((a).size())\n#define EACH(i, c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define EXIST(s, e) ((s).find(e)!=(s).end())\n#define COUNT(obj, v) count((obj).begin(), (obj).end(), v)\n#define SEARCH(v, w) search((v).begin(), (v).end(), (w).begin(), (w).end())\n#define B_SEARCH(obj, v) binary_search((obj).begin(), (obj).end(), v)\n#define SORT(c) sort((c).begin(),(c).end())\n#define RSORT(c) sort((c).rbegin(),(c).rend())\n#define REVERSE(c) reverse((c).begin(), (c).end())\n#define SUMI(obj) accumulate((obj).begin(), (obj).end(), 0)\n#define SUMD(obj) accumulate((obj).begin(), (obj).end(), 0.)\n#define SUMLL(obj) accumulate((obj).begin(), (obj).end(), 0LL)\n#define SUMS(obj) accumulate((obj).begin(), (obj).end(), string())\n#define UB(obj, n) upper_bound((obj).begin(), (obj).end(), n)\n#define LB(obj, n) lower_bound((obj).begin(), (obj).end(), n)\n#define PB push_back\n#define MP make_pair\n\n\n\n\n//input output\n//------------------------------------------\n#define GL(s) getline(cin, (s))\n#define INIT std::ios::sync_with_stdio(false);std::cin.tie(0);\n#define OUT(d) std::cout<<(d);\n#define OUT_L(d) std::cout<<(d)<<endl;\n#define FOUT(n, data) std::cout<<std::fixed<<std::setprecision(n)<<(data);\n#define FOUT_L(n, data) std::cout<<std::fixed<<std::setprecision(n)<<(data)<<\"\\n\";\n#define EL() std::cout << \"\\n\";\n#define SHOW_VECTOR(v) {std::cerr << #v << \"\\t:\";for(const auto& xxx : v){std::cerr << xxx << \" \";}std::cerr << \"\\n\";}\n#define SHOW_MAP(v) {std::cerr << #v << endl; for(const auto& xxx: v){std::cerr << xxx.first << \" \" << xxx.second << \"\\n\";}}\n\ntemplate<typename T>\nstd::istream &operator>>(std::istream &is, std::vector<T> &vec) {\n    for (T &x : vec) is >> x;\n    return is;\n}\n\ntemplate<typename T>\nstd::ostream &operator<<(std::ostream &os, const std::vector<T> &vec) {\n    for (const T &x : vec) os << x << \" \";\n    return os;\n}\n\n\n//repetition\n//------------------------------------------\n#define FOR(i, a, b) for(int i=(a);i<(b);++i)\n#define RFOR(i, a, b) for(int i=(b)-1;i>=(a);--i)\n#define REP(i, n)  FOR(i,0,n)\n#define RREP(i, n) for(int i = n-1;i >= 0;i--)\n#define FORLL(i, a, b) for(LL i=LL(a);i<LL(b);++i)\n#define RFORLL(i, a, b) for(LL i=LL(b)-1;i>=LL(a);--i)\n#define REPLL(i, n) for(LL i=0;i<LL(n);++i)\n#define RREPLL(i, n) for(LL i=LL(n)-1;i>=0;--i)\n#define FOREACH(x, v) for(auto &(x) : (v))\n#define FORITER(x, v) for(auto (x) = (v).begin(); (x) != (v).end(); ++(x))\n\n\n//constant\n//--------------------------------------------\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\nconst int MOD = 1000000007;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\n\n\n//math\n//--------------------------------------------\n\n//min <= aim <= max\ntemplate<typename T>\ninline bool BETWEEN(const T aim, const T min, const T max) {\n    if (min <= aim && aim <= max) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\ntemplate<class T>\ninline T SQR(const T x) { return x * x; }\n\ntemplate<class T1, class T2>\ninline T1 POW(const T1 x, const T2 y) {\n    if (!y)return 1;\n    else if ((y & 1) == 0) {\n        return SQR(POW(x, y >> 1));\n    } else return POW(x, y ^ 1) * x;\n}\n\n\ntemplate<typename T>\nconstexpr T ABS(T x) {\n    return x < 0 ? -x : x;\n}\n\n//partial_permutation nPr 順列\n//first・・最初の数\n//middle・・r(取り出す数)\n//last・・n(全体数)\ntemplate<class BidirectionalIterator>\nbool next_partial_permutation(BidirectionalIterator first, BidirectionalIterator middle, BidirectionalIterator last) {\n    reverse(middle, last);\n    return next_permutation(first, last);\n}\n\n//combination nCr 組み合わせ\n//first1・・最初の数\n//last1==first2・・r(取り出す数)\n//last2・・n(全体数)\ntemplate<class BidirectionalIterator>\nbool next_combination(BidirectionalIterator first1, BidirectionalIterator last1, BidirectionalIterator first2,\n                      BidirectionalIterator last2) {\n    if ((first1 == last1) || (first2 == last2)) {\n        return false;\n    }\n    BidirectionalIterator m1 = last1;\n    BidirectionalIterator m2 = last2;\n    --m2;\n    while (--m1 != first1 && !(*m1 < *m2)) {\n    }\n    bool result = (m1 == first1) && !(*first1 < *m2);\n    if (!result) {\n        while (first2 != m2 && !(*m1 < *first2)) {\n            ++first2;\n        }\n        first1 = m1;\n        std::iter_swap(first1, first2);\n        ++first1;\n        ++first2;\n    }\n    if ((first1 != last1) && (first2 != last2)) {\n        m1 = last1;\n        m2 = first2;\n        while ((m1 != first1) && (m2 != last2)) {\n            std::iter_swap(--m1, m2);\n            ++m2;\n        }\n        std::reverse(first1, m1);\n        std::reverse(first1, last1);\n        std::reverse(m2, last2);\n        std::reverse(first2, last2);\n    }\n    return !result;\n}\n\n\n\n\n//numeric_law\n//--------------------------------------------\n\ntemplate<typename T>\nconstexpr bool ODD(T x) {\n    return x % 2 != 0;\n}\n\ntemplate<typename T>\nconstexpr bool EVEN(T x) {\n    return x % 2 == 0;\n}\n\n//最大公約数\ntemplate<class T>\ninline T GCD(const T x, const T y) {\n    if (x < 0)return GCD(-x, y);\n    if (y < 0)return GCD(x, -y);\n    return (!y) ? x : GCD(y, x % y);\n}\n\n//最小公倍数\ntemplate<class T>\ninline T LCM(const T x, const T y) {\n    if (x < 0)return LCM(-x, y);\n    if (y < 0)return LCM(x, -y);\n    return x * (y / GCD(x, y));\n}\n\n//ax + by = 1\n//x,yが変数に格納される\ntemplate<class T>\ninline T EXTGCD(const T a, const T b, T &x, T &y) {\n    if (a < 0) {\n        T d = EXTGCD(-a, b, x, y);\n        x = -x;\n        return d;\n    }\n    if (b < 0) {\n        T d = EXTGCD(a, -b, x, y);\n        y = -y;\n        return d;\n    }\n    if (!b) {\n        x = 1;\n        y = 0;\n        return a;\n    } else {\n        T d = EXTGCD(b, a % b, x, y);\n        T t = x;\n        x = y;\n        y = t - (a / b) * y;\n        return d;\n    }\n}\n\n//素数\ntemplate<class T>\ninline bool ISPRIME(const T x) {\n    if (x <= 1)return false;\n    for (T i = 2; SQR(i) <= x; i++)if (x % i == 0)return false;\n    return true;\n}\n\n//素数をtrueとして返す\ntemplate<class T>\nVB ERATOSTHENES(const T n) {\n    VB arr(n, true);\n    for (int i = 2; SQR(i) < n; i++) {\n        if (arr[i]) {\n            for (int j = 0; i * (j + 2) < n; j++) {\n                arr[i * (j + 2)] = false;\n            }\n        }\n    }\n    return arr;\n}\n\n// a <= x < b の素数を返す\ntemplate<typename T>\nVB ERATOSTHENES(const T a, const T b) {\n    VB small = ERATOSTHENES(b);\n    VB prime(b - a, true);\n\n    for (int i = 2; (T) (SQR(i)) < b; i++) {\n        if (small[i]) {\n            for (T j = max(2, (a + i - 1) / i) * i; j < b; j += i) {\n                prime[j - a] = false;\n            }\n        }\n    }\n\n    return prime;\n}\n\n//約数\ntemplate<class T>\nvector<T> DIVISOR(T n) {\n    vector<T> v;\n    for (int i = 1; i * i <= n; ++i) {\n        if (n % i == 0) {\n            v.push_back(i);\n            if (i != n / i) {\n                v.push_back(n / i);\n            }\n        }\n    }\n    sort(v.begin(), v.end());\n    return v;\n}\n\n//組み合わせ個数\ntemplate<typename T>\nT NCR(T n, T r) {\n    T ans = 1;\n    REPLL(i, r) {\n        ans = ans * (n - i) / (i + 1);\n    }\n    return ans;\n}\n\n//行列\nint MATRIZ_CHAIN(VI &p, VVI &s) {\n    const static int INF = 1 << 20;\n    const int n = p.size() - 1;\n    VVI X(n, VI(n, INF));\n    s.resize(n, VI(n));\n    for (int i = 0; i < n; ++i) X[i][i] = 0;\n    for (int w = 1; w < n; ++w)\n        for (int i = 0, j; j = i + w, j < n; ++i)\n            for (int k = i; k < j; ++k) {\n                int f = p[i] * p[k + 1] * p[j + 1];\n                if (X[i][k] + X[k + 1][j] + f < X[i][j]) {\n                    X[i][j] = X[i][k] + X[k + 1][j] + f;\n                    s[i][j] = k;\n                }\n            }\n    return X[0][n - 1];\n}\n\n//最長増加部分列\nVI LIS(const VI &a) {\n    const static int INF = 99999999;\n    const int n = a.size();\n    VI A(n, INF);\n    VI id(n);\n    for (int i = 0; i < n; ++i) {\n        id[i] = distance(A.begin(), lower_bound(A.begin(), A.end(), a[i]));\n        A[id[i]] = a[i];\n    }\n    int m = *max_element(id.begin(), id.end());\n    VI b(m + 1);\n    for (int i = n - 1; i >= 0; --i)\n        if (id[i] == m) b[m--] = a[i];\n    return b;\n}\n\n//最長共通部分列 string->toVC\ntemplate<typename T>\nvector<T> LCS(const vector<T> &a, const vector<T> &b) {\n    const int n = a.size(), m = b.size();\n    vector<VI> X(n + 1, VI(m + 1));\n    vector<VI> Y(n + 1, VI(m + 1));\n    REP(i, n) {\n        REP(j, m) {\n            if (a[i] == b[j]) {\n                X[i + 1][j + 1] = X[i][j] + 1;\n                Y[i + 1][j + 1] = 0;\n            } else if (X[i + 1][j] < X[i][j + 1]) {\n                X[i + 1][j + 1] = X[i][j + 1];\n                Y[i + 1][j + 1] = +1;\n            } else {\n                X[i + 1][j + 1] = X[i + 1][j];\n                Y[i + 1][j + 1] = -1;\n            }\n        }\n    }\n    vector<T> c;\n    for (int i = n, j = m; i > 0 && j > 0;) {\n        if (Y[i][j] > 0) --i;\n        else if (Y[i][j] < 0) --j;\n        else {\n            c.PB(a[i - 1]);\n            --i;\n            --j;\n        }\n    }\n    REVERSE(c);\n    return c;\n}\n\n//コイン C総額 cs使用できるコインの種類\nVI money_change(int C, VI &cs) {\n    const int INF = 99999999;\n    int n = cs.size();\n    VI xs(C + 1, INF);\n    VI ys(C + 1);\n    xs[0] = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int c = 0; c + cs[i] <= C; ++c) {\n            if (xs[c + cs[i]] > xs[c] + 1) {\n                xs[c + cs[i]] = xs[c] + 1;\n                ys[c + cs[i]] = c;\n            }\n        }\n    }\n    VI zs;\n    for (int c = C; c > 0; c = ys[c]) {\n        zs.push_back(c - ys[c]);\n    }\n    return zs;\n}\n\n\n\n//confirmation\n//--------------------------------------------\n\n//clear memory\n#define CLR(arr, d) memset((arr), (d),sizeof(arr))\n\n//debug\n#define dump(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\n\n\n//平面幾何\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n\n//宣言\n//--------------------------------------------\n\n//long double or double\ntypedef double Real;\n\n//ポイントクラス\ntypedef complex<Real> Point;\n\n//線分クラス\ntypedef pair<Point, Point> Line;\n\n//円\ntypedef pair<Point, Real> Circle;\n\n//ポリゴン\ntypedef vector<Point> Poly;\n\n\n//x座標優先で比較する\nnamespace std {\n    bool operator<(const Point &a, const Point &b) {\n        return real(a) == real(b) ? imag(a) < imag(b) : real(a) < real(b);\n    }\n}\n\n\n//doubleの誤差\n#define EPS (1e-10)\n//double同士の比較\n#define EQ(a, b) (abs((a)-(b)) < EPS)\n//Pointの比較\n#define EQP(a, b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n\n\n//角度\n//--------------------------------------------\nReal toRadian(double degree) {\n    return degree * PI / 180.0;\n}\n\nReal toDegree(double radian) {\n    return radian * 180.0 / PI;\n}\n\n\n\n\n\n\n\n//内積・外積・単位・法線\n//--------------------------------------------\n\n//ベクトルpの向きの単位ベクトルを返す\nPoint unit_vector(Point p) {\n    return p / abs(p);\n}\n\n\n//pの法線ベクトルを両方返す\npair<Point, Point> norm_vectors(Point p) {\n    return make_pair(p * Point(0, 1), p * Point(0, -1));\n}\n\n//ベクトルを反時計に回す sはラジアン\nPoint rotate_vector(Point v, double s) {\n    return Point(v.real() * cos(s) - v.imag() * sin(s), v.real() * sin(s) + v.imag() * cos(s));\n}\n\n//内積 a・b = |a||b|cosθ\ninline double dot(const Point &a, const Point &b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n//外積 a×b = |a||b|sinθ\ninline double cross(const Point &a, const Point &b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n//凸包\nvector<Point> convex_hull(vector<Point> v) {\n    int n = v.size(), k = 0;\n    sort(v.begin(), v.end());\n    vector<Point> r(2 * n);\n    for (int i = 0; i < n; i++) {\n        while (k > 1 && cross(r[k - 1] - r[k - 2], v[i] - r[k - 1]) <= EPS) k--;\n        r[k++] = v[i];\n    }\n    for (int i = n - 2, t = k; i >= 0; i--) {\n        while (k > t && cross(r[k - 1] - r[k - 2], v[i] - r[k - 1]) <= EPS) k--;\n        r[k++] = v[i];\n    }\n    r.resize(k - 1);\n    return r;\n}\n\n\n//三角形　角度・面積\n//--------------------------------------------\n//3点a, b, cのおける、角bacを返す\nReal args_bac(Point a, Point b, Point c) {\n    return acos(dot(b - a, c - a) / (abs(b - a) * abs(c - a)));\n}\n\n//各辺の長さがa, b, cの三角形の、aの対角の角度を返す\nReal args_bac(Real a, Real b, Real c) {\n    return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n//三角形の面積\nReal heron_area(Real a, Real b, Real c) {\n    Real s = (a + b + c) / 2;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}\n\n//三角形の重心\nPoint centerOfGravity(Point a, Point b, Point c) {\n    return Point((a.real() + b.real() + c.real()) / 3.0, (a.imag() + b.imag() + c.imag()) / 3.0);\n}\n\n//三角形の外接円の半径\nReal circumScribedCircleRadius(Point a, Point b, Point c) {\n    Real edgeA = abs(b - c);\n    Real angleA = args_bac(a, b, c);\n    return (edgeA / sin(angleA) / 2.0);\n}\n\n//三角形の外接円の中心座標　外心\nPoint circumScribedCircleXY(Point a, Point b, Point c) {\n    Real angleA = args_bac(a, b, c);\n    Real angleB = args_bac(b, a, c);\n    Real angleC = args_bac(c, a, b);\n    Real A = sin(2.0 * angleA);\n    Real B = sin(2.0 * angleB);\n    Real C = sin(2.0 * angleC);\n    Point point((a.real() * A + b.real() * B + c.real() * C) / (A + B + C),\n                (a.imag() * A + b.imag() * B + c.imag() * C) / (A + B + C));\n    return point;\n}\n\n//三角形が点Pを含むか\nbool point_in_triangle(Point a, Point b, Point c, Point p) {\n    Point ab = b - a;\n    Point bp = p - b;\n\n    Point bc = c - b;\n    Point cp = p - c;\n\n    Point ca = a - c;\n    Point ap = p - a;\n\n    Real c1 = cross(ab, bp);\n    Real c2 = cross(bc, cp);\n    Real c3 = cross(ca, ap);\n\n    //内側\n    if ((c1 > 0 && c2 > 0 && c3 > 0) || (c1 < 0 && c2 < 0 && c3 < 0)) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\n\n//直線・線分\n//--------------------------------------------\n\n//頂点a, b, cの位置関係判定\nint points_relation(Point a, Point b, Point c) {\n    b -= a;\n    c -= a;\n    if (cross(b, c) > EPS) return 1; //counter-clockwise\n    if (cross(b, c) < -EPS) return -1; //clockwise\n    if (dot(b, c) < -EPS) return 2; //c--a--b on line\n    if (abs(b) < abs(c)) return -2; //a--b--c on line\n    return 0; //on segment\n}\n\n//2直線の直行判定 Point版\nbool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return EQ(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n//2直線の直行判定 Line版\nbool is_orthogonal(Line line1, Line line2) {\n    return EQ(dot(line1.first - line1.second, line2.first - line2.second), 0.0);\n}\n\n//2直線の平行判定 Point版\nbool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n    return EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n//2直線の平行判定 Line版\nbool is_parallel(Line line1, Line line2) {\n    return EQ(cross(line1.first - line1.second, line2.first - line2.second), 0.0);\n}\n\n//点cが**直線**a-b上にあるか\nbool is_point_on_long_line(Point a, Point b, Point c) {\n    return EQ(cross(b - a, c - a), 0.0);\n}\n\n//点cが**線分**a-b上にあるか\nbool is_point_on_line(Point a, Point b, Point c) {\n    return (abs(a - c) + abs(c - b) < abs(a - b) + EPS);\n}\n\n//点a, bを通る**直線**と,点cとの距離d\ndouble distance_longline_point(Point a, Point b, Point c) {\n    return abs(cross(b - a, c - a)) / abs(b - a);\n}\n\n//直線と点との距離　円用\nReal line_dis(Line a, Point x) {\n    return abs(cross(a.second - a.first, x - a.first)) / abs(a.second - a.first);\n}\n\n//点a, bを端点とする**線分**と、点cとの距離d\ndouble distance_line_point(Point a, Point b, Point c) {\n    if (dot(b - a, c - a) < EPS) return abs(c - a);\n    if (dot(a - b, c - b) < EPS) return abs(c - b);\n    return abs(cross(b - a, c - a)) / abs(b - a);\n}\n\n//点a1, a2を端点とする線分と、点b1, b2を端点とする線分の交差判定\nbool is_intersected_lines(Point a1, Point a2, Point b1, Point b2) {\n    return (cross(a2 - a1, b1 - a1) * cross(a2 - a1, b2 - a1) < EPS) &&\n           (cross(b2 - b1, a1 - b1) * cross(b2 - b1, a2 - b1) < EPS);\n}\n\n//点a1, a2を端点とする線分と、点b1, b2を端点とする線分の交点\nPoint intersection_lines_point(Point a1, Point a2, Point b1, Point b2) {\n    Point b = b2 - b1;\n    double d1 = abs(cross(b, a1 - b1));\n    double d2 = abs(cross(b, a2 - b1));\n    double t = d1 / (d1 + d2);\n    return a1 + (a2 - a1) * Point(t, 0);\n}\n\n//点a1, a2を通る直線と点b1, b2を通る直線の交点計算\nPoint intersection_longlines_point(Point a1, Point a2, Point b1, Point b2) {\n    Point a = a2 - a1;\n    Point b = b2 - b1;\n    return a1 + a * Point(cross(b, b1 - a1), 0) / Point(cross(b, a), 0);\n}\n\n\n//直線a-bに点pから垂線をおろしたときの交点\nPoint projection_point(Point a, Point b, Point p) {\n    Real t = dot(p - a, a - b) / (abs(a - b) * abs(a - b));\n    return a + (a - b) * t;\n}\n\n//点pを線対称移動させる\nPoint reflection_point(Point a, Point b, Point p) {\n    return p + (projection_point(a, b, p) - p) * (Real) 2.0;\n}\n\n\n\n\n//多角形\n//--------------------------------------------\n\n//面積を返す 反時計回りに整列させておく\nReal poly_area(Poly p) {\n    if (p.size() < 3)return 0;\n    Real res = cross(p[p.size() - 1], p[0]);\n    for (int i = 1; i < p.size(); i++) {\n        res += cross(p[i - 1], p[i]);\n    }\n    return res / 2;\n}\n\n//最遠点対　凸多角形で最も長い距離を返す\n//凸包の後に使うとよい\nReal longest_points_distance(Poly p) {\n    int n = p.size();\n    if (n == 2) {\n        return abs(p[0] - p[1]);\n    }\n\n    int i = 0, j = 0;\n    for (int k = 0; k < n; k++) {\n        if (!(p[i] < p[k])) i = k;\n        if (p[j] < p[k]) j = k;\n    }\n\n    Real res = 0;\n    int si = i, sj = j;\n    while (i != sj || j != si) {\n        res = max(res, abs(p[i] - p[j]));\n        if (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) < 0) i = (i + 1) % n;\n        else j = (j + 1) % n;\n    }\n\n    return res;\n}\n\n\n\n\n\n//円 第一引数は中点　第二引数は半径\n//--------------------------------------------\n\n//円の面積\nReal circle_area(Circle c) {\n    return PI * c.second * c.second;\n}\n\n//円の中に点xが内部にあるか\nbool circle_in_x(Circle c, Point x) {\n    return (abs(x - c.first) + EPS < c.second);\n}\n\n//円状に点xがあるか\nbool circle_on_x(Circle c, Point x) {\n    return EQ(abs(x - c.first), c.second);\n}\n\n//2つの円a, bの関係\nint circle_relation(Circle a, Circle b) {\n    double d = abs(a.first - b.first);\n\n    if (a.second + b.second + EPS < d) return -1; //no cross point outside\n    if (b.second + d + EPS < a.second) return 1; //no cross point(inside B in A)\n    if (a.second + d + EPS < b.second) return 2; //no cross point(inside A in B)\n\n    if (abs(a.second + b.second - d) < EPS) return -3; //one cross point(outside)\n    if (abs(b.second + d - a.second) < EPS) return 3; //one cross point(inside B in A)\n    if (abs(a.second + d - b.second) < EPS) return 4; //one cross point(inside A in B)\n\n    return 0; //two cross point\n}\n\n//2円a, bの共通面積\nReal intersection_area(Circle a, Circle b) {\n    Real d = abs(a.first - b.first);\n\n    if (a.second + b.second < d + EPS) return 0;\n\n    //円aを半径が大きい方にする\n    if (a.second < b.second) swap(a, b);\n\n    //円bが円aに入ってたら\n    if (b.second + d < a.second + EPS || b.second < EPS) return circle_area(b);\n\n    Real t1 = args_bac(b.second, a.second, d);\n    Real t2 = args_bac(a.second, b.second, d);\n    Real tri = (a.second * a.second * sin(t1 * 2) + b.second * b.second * sin(t2 * 2)) / 2.0;\n    return a.second * a.second * t1 + b.second * b.second * t2 - tri;\n}\n\n//2つの円の交点を返す\nvector<Point> circle_inter_points(Circle a, Circle b) {\n    vector<Point> v;\n    int pos = circle_relation(a, b);\n    if (pos == 0) {\n        Real s = args_bac(b.second, abs(b.first - a.first), a.second);\n        Point x = a.second * unit_vector(b.first - a.first);\n        v.push_back(a.first + rotate_vector(x, s));\n        v.push_back(a.first + rotate_vector(x, -s));\n    } else if (abs(pos) >= 3) {\n        v.push_back(a.first + a.second * unit_vector(b.first - a.first));\n    }\n    return v;\n}\n\n//円と直線の交点\nvector<Point> circle_inter_line_points(Circle a, Line l) {\n    vector<Point> v;\n    Real d = line_dis(l, a.first);\n    if (d < a.second + EPS) {\n        Point x = a.second * unit_vector(l.second - l.first);\n        if (points_relation(l.first, l.second, a.first) == 1) x = a.first + x * Point(0, -1);\n        else x = a.first + x * Point(0, 1);\n        if (d + EPS < a.second) {\n            Real y = sqrt(a.second * a.second - d * d);\n            if (d == 0) d += EPS;\n            Real s = args_bac(y, d, a.second);\n            v.push_back(rotate_vector(x, s));\n            v.push_back(rotate_vector(x, -s));\n        } else if (EQ(d, a.second)) {\n            v.push_back(x);\n        }\n    }\n    return v;\n}\n\n//点pを通る円cの接線\nvector<Line> adjust_line(Circle c, Point p) {\n    vector<Line> res;\n    if (circle_in_x(c, p)) return res;\n    if (circle_on_x(c, p)) {\n        pair<Point, Point> n = norm_vectors(c.first - p);\n        res.push_back(Line(n.first + p, p));\n        return res;\n    }\n    Real x = c.second, z = abs(c.first - p);\n    Real y = sqrt(z * z - x * x);\n    Real s = args_bac(y, x, z);\n    Point v = unit_vector(p - c.first) * c.second;\n\n    res.push_back(Line(rotate_vector(v, s) + c.first, p));\n    res.push_back(Line(rotate_vector(v, -s) + c.first, p));\n    return res;\n}\n\n//円の共通接線を求める\nvector<Line> common_adjust_line(Circle a, Circle b) {\n    vector<Line> res;\n    if (a.second + EPS < b.second) return common_adjust_line(b, a);\n    if (EQ(a.first.real(), b.first.real()) && EQ(a.first.imag(), b.first.imag()) && EQ(a.second, b.second)) return res;\n\n    Point pos = (b.first - a.first) * a.second / (a.second + b.second) + a.first;\n    if (!circle_in_x(a, pos)) res = adjust_line(a, pos);\n\n    if (EQ(a.second, b.second)) {\n        pair<Point, Point> n = norm_vectors(unit_vector(b.first - a.first) * a.second);\n        res.push_back(Line(a.first + n.first, b.first + n.first));\n        res.push_back(Line(a.first + n.second, b.first + n.second));\n    } else {\n        Real c = abs(b.first - a.first);\n        pos = unit_vector(b.first - a.first) * ((a.second * c) / (a.second - b.second)) + a.first;\n        if (!circle_in_x(a, pos)) {\n            vector<Line> tmp = adjust_line(a, pos);\n            for (int i = 0; i < tmp.size(); i++) res.push_back(tmp[i]);\n        }\n    }\n\n    return res;\n}\n\n\n\n\n\n\n//使い方\n//--------------------------------------------\n\n//xとyの取り出し型\n//a.real(); //x\n//a.imag(); //y\n\n//単位ベクトル\n//Point unit = a / abs(a);\n\n//ベクトルの長さをk倍する\n// a = a * Point(k, 0);\n\n//ベクトルaのk倍の法線ベクトル\n//P p1 = a * P(0, k);\n//P p2 = a * P(0, -k);\n\n//ベクトルaの単位法線ベクトル\n//P p1 = (a * P(0, 1)) /abs(a);\n//P p2 = (a * P(0, -1)) /abs(a);\n\n/*\n *\n *\n *   ~~~~Below My Answer~~~~\n *\n *\n **/\n\n\n\nint main() {\n\n    double p1_x, p1_y, p2_x, p2_y;\n    cin >> p1_x >> p1_y >> p2_x >> p2_y;\n\n    Point p1(p1_x, p1_y);\n    Point p2(p2_x, p2_y);\n\n    int q;\n    cin >> q;\n\n    for(int i=0;i<q;i++){\n        double x, y;\n        cin >> x >> y;\n\n        Point p(x, y);\n\n        Point ans = projection_point(p1, p2, p);\n\n\n        cout << fixed << setprecision(10) << ans.real() << \" \"<<ans.imag() <<endl;\n\n    }\n\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i = 0, lim##__LINE__ = n; i < lim##__LINE__; ++i)\nusing C = std::complex<double>;\n\nC projection(C p, C p1, C p2) {\n    return C(((p-p1) / (p2-p1)).real(), 0.0) * (p2-p1) + p1;\n}\n\nvoid solve_CGL_1_A() {\n    int x1, y1, x2, y2;\n    std::cin >> x1 >> y1 >> x2 >> y2;\n    C p1(x1,y1), p2(x2,y2);\n    int q;\n    std::cin >> q;\n    rep(i,q) {\n        int x, y;\n        std::cin >> x >> y;\n        C p = C(x,y);\n        C res = projection(p, p1, p2);\n        printf(\"%.20lf %.20lf\\n\", res.real(), res.imag());\n    }\n}\n\nint main() {\n    solve_CGL_1_A();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n#include<cstdio>\n#include<cmath>\n\nstruct Point{ double x, y; };\n\nPoint set_p(double a, double b)\n{\n    Point p;\n    p.x = a; p.y = b;\n    return p;\n}\n\nstruct Vector{ double vx, vy; };\n\nVector set_v(const Point &p1, const Point &p2)\n{\n    Vector v;\n    v.vx = p2.x - p1.x;\n    v.vy = p2.y - p1.y;\n    return v;\n}\n\ndouble dist(const Point &p1, const Point &p2)\n{\n    return sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));\n}\n\ndouble norm(const Vector &v)\n{\n    return (v.vx) * (v.vx) + (v.vy) * (v.vy);\n}\n\ndouble inpro(const Vector &v1, const Vector &v2)\n{\n    return (v1.vx * v2.vx) + (v1.vy * v2.vy);\n}\n\nPoint move(const Point &p, const Vector &v, const double t)\n{\n    Point moved_p;\n    moved_p.x = p.x + t * v.vx;\n    moved_p.y = p.y + t * v.vy;\n    return moved_p;\n}\n\nPoint horizontal(Point &p1, Point &p2, Point &p3)\n{\n    Vector v2 = set_v(p1, p2);\n    Vector v3 = set_v(p1, p3);\n    double t;\n    t = inpro(v2, v3) / norm(v2);\n    Point p = move(p1, v2, t);\n    return p;\n}\n\nint main()\n{\n    double p0x, p0y, p1x, p1y;\n    scanf(\"%lf %lf %lf %lf\", &p0x, &p0y, &p1x, &p1y);\n    Point P0 = set_p(p0x, p0y);\n    Point P1 = set_p(p1x, p1y);\n \n    int q;\n    scanf(\"%d\", &q);\n    double p2x, p2y;\n\n    for(int i = 0; i < q; i++){\n        scanf(\"%lf %lf\", &p2x, &p2y);\n        Point P2 = set_p(p2x, p2y);\n        Point H = horizontal(P0, P1, P2);\n        printf(\"%.12f %.12f\\n\", H.x, H.y);\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// Code by ajcxsu\n// Geometry template\n\n#include<bits/stdc++.h>\n#define EPS (1e-9)\nusing namespace std;\n\nstruct Point {\n    double x,y;\n    Point(double x=0,double y=0):x(x), y(y) {}\n\n    Point operator +(Point p) { return Point(x+p.x,y+p.y); }\n    Point operator -(Point p) { return Point(x-p.x,y-p.y); } // 加减\n    Point operator *(double a) { return Point(x*a,y*a); }\n    Point operator /(double a) { return Point(x/a,y/a); } // 数乘\n\n    double norm() { return x*x+y*y; } // 范数\n    double abs() { return sqrt(norm()); } // 大小\n\n    bool operator < (const Point &p) { return x!=p.x?x<p.x:y<p.y; }\n    bool operator == (const Point &p) { return fabs(p.x-x) < EPS && fabs(p.y-y) < EPS; }\n} ;\ntypedef Point Vector;\n\ndouble dot(const Point &a, const Point &b) {\n    return a.x*b.x+a.y*b.y;\n} // 内积\ndouble cross(const Point &a, const Point &b) {\n    return a.x*b.y-a.y*b.x;\n} // 外积\nbool equals(double a, double b) { return fabs(a-b)<EPS; } // 误差相等\n\nstruct Line {\n    Point p1,p2;\n} ;\ntypedef Line Seg;\n\n/* 1 正交 2 平行 0 其他 */\nint PO(Vector a, Vector b) {\n    if(equals(dot(a,b), 0)) return 1;\n    else if(equals(cross(a,b), 0)) return 2;\n    else return 0;\n}\nint PO(Line a, Line b) { // 正交、平行判定\n    return PO(a.p2-a.p1, b.p2-b.p1);\n}\n\nistream& operator >>(istream &in, Vector &a) {\n    in>>a.x>>a.y;\n    return in;\n}\nistream& operator >>(istream &in, Line &a) {\n    in>>a.p1>>a.p2;\n    return in;\n} // 输入重载\n\nPoint project(Point a, Seg b) {\n    Vector base=b.p2-b.p1;\n    Vector hypo=a-b.p1;\n    return b.p1+base*(dot(base, hypo)/ base.norm());\n}\n\nostream& operator <<(ostream &out, Vector a) {\n    out<<a.x<<' '<<a.y;\n    return out;\n} // 输出重载\n\nint main() {\n    cout.setf(ios::fixed);\n    cout<<setprecision(10); // 设置输出精度\n\n    Line x;\n    cin>>x;\n    int q;\n    cin>>q;\n    while(q--) {\n        Point a;\n        cin>>a;\n        cout<<project(a,x)<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\n\nint projection(double xp1, double yp1, double xp2, double yp2, double* px, double* py)\n{\n    if (xp1 == xp2 && yp1 == yp2) {\n        return 1;\n    } else if (xp1 == xp2) {\n        *px = xp1;\n        return 0;\n    } else {\n        double dist = std::sqrt(std::pow((xp2 - xp1), 2) + std::pow((yp2 - yp1), 2));\n        double cos = (xp2 - xp1) / dist;\n        double sin = (yp2 - yp1) / dist;\n        double xrot = cos * (*px) + sin * (*py);\n        double yrot = -sin * (*px) + cos * (*py);\n        yrot = 0;\n        *px = cos * xrot - sin * yrot;\n        *py = sin * xrot + cos * yrot;\n        return 0;\n    }\n}\n\n\nint main()\n{\n\tdouble xp1 = 0, yp1 = 0, xp2 = 0, yp2 = 0;\n    double x = 0, y = 0;\n    double* px = &x;\n    double* py = &y;\n\tchar ch;\n\t// cout << \"input:\";\n\tcin >> xp1 >> yp1 >> xp2 >> yp2;\n\tunsigned int q, i;\n    // cout << \"number of points:\";\n\tcin >> q;\n\tfor (i = 0; i < q; i++){\n        // cout << \"point \" << i << \":\";\n\t\tcin >> x >> y;\n        projection(xp1, yp1, xp2, yp2, &x, &y);\n\t\tcout << x << \" \" << y << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cmath>\n#include <iomanip>\n#include <string>\n#include <queue>\n#include <algorithm>\n#include <cctype>\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\ntypedef pair<double,double> pdd;\nconst int inf=1<<30;\nconst double pi=acos(-1);\nconst double eps=1e-8;\n\nstruct point{\n\tdouble x,y;\n\tpoint operator+(point Gep){\n\t\treturn point{x+Gep.x,y+Gep.y};\n\t}\n\tpoint operator-(point Gep){\n\t\treturn point{x-Gep.x,y-Gep.y};\n\t}\n\tpoint operator*(double Gex){\n\t\treturn point{x*Gex,y*Gex};\n\t}\n\tpoint operator/(double Gex){\n\t\tif(!Gex) return point{0,0}; \n\t\treturn point{x/Gex,y/Gex};\n\t}\n\tbool operator==(point Gep){\n\t\treturn fabs(x-Gep.x)<eps&&fabs(y-Gep.y)<eps;\n\t}\n};\nclass Geom{\n\tpublic:\n\tvector<point> Ge;\n\tvector<pair<point,point> > Geseg,Geline;\n\tvoid line_push(point Gex,point Gey){\n\t\tGeline.push_back(make_pair(Gex,Gey));\n\t}\n\tpdd POI(pdd Gea,pdd Geb,pdd Gec,pdd Ged){\n\t\treturn pdd(3,4);\n\t}\n\tdouble IP(point Gex,point Gey){\n\t\treturn Gex.x*Gey.x+Gex.y*Gey.y;\n\t}\n\tdouble LEN(point Gex){\n\t\treturn sqrt(Gex.x*Gex.x+Gex.y*Gex.y);\n\t}\n\tpoint PRO(point Gea,point Geb,point Gex){\n\t\tpoint Ge1=Gex-Geb,Ge2=Gea-Geb;\n\t\treturn Ge2*(IP(Ge1,Ge2)/(LEN(Ge2)*LEN(Ge2)))+Geb;\n\t}\n\tpoint line_open(int Gex,bool Gej){\n\t\tif(Gej) return Geline[Gex].second;\n\t\telse return Geline[Gex].first;\n\t}\n};\n\nint q;\ndouble x,xx,y,yy,xxx,yyy;\n\nint main(){\n\tcout<<shosu(10);\n\tcin>>x>>y>>xx>>yy>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>xxx>>yyy;\n\t\tGeom geo;\n\t\tgeo.line_push(point{x,y},point{xx,yy});\n\t\tpoint ans=geo.PRO(geo.line_open(0,0),geo.line_open(0,1),point{xxx,yyy});\n\t\tcout<<ans.x<<' '<<ans.y<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "//\n// Created by 李青坪 on 2018/11/28.\n//\n\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <set>\n\n#define EPSLON 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPSLON)\n\n#define MAXN 10000\n#define NIL -1\nusing namespace std;\n\n// 点\nclass Point {\npublic:\n    double x;\n    double y;\n\n    Point() {}\n\n    Point(double x, double y) : x(x), y(y) {}\n\n    Point operator+(Point a) {\n        return Point(x + a.x, y + a.y);\n    }\n\n    Point operator-(Point a) {\n        return Point(x - a.x, y - a.y);\n    }\n\n    Point operator*(double a) {\n        return Point(x * a, y * a);\n    }\n\n    Point operator/(double a) {\n        return Point(x / a, y / a);\n    }\n\n    double norm() {\n        return x * x + y * y;\n    }\n\n    double absVector() {\n        return sqrt(norm());\n    }\n\n    bool operator==(Point &a) const {\n        return equals(x, a.x) && equals(y, a.y);\n    }\n};\n\ntypedef Point Vector;\n\n// 线段\nclass Segment {\npublic:\n    Point a, b;\n};\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nPoint projection(Segment s, Point point) {\n    Vector base = s.b - s.a;\n    double t = dot(point - s.a, base) / base.absVector();\n    double r = t / base.absVector();\n    Point x = s.a + base * r;\n    return x;\n}\n\nint n;\n\n\nint main() {\n    Segment s;\n    Point p[2];\n    scanf(\"%lf %lf %lf %lf\", &p[0].x, &p[0].y, &p[1].x, &p[1].y);\n    s.a = p[0];\n    s.b = p[1];\n    scanf(\"%d\", &n);\n    Point point;\n    for (int i = 0; i < n; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        point = Point(x, y);\n        Point re = projection(s, point);\n        printf(\"%.10f %.10f\\n\", re.x, re.y);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\ntypedef double D;\n\nstruct P {\n    D x, y;\n    P(D x, D y) : x(x), y(y) { }\n    P() { }\n};\n\nP operator -(P a, P b) {\n    a.x -= b.x, a.y -= b.y;\n    return a;\n}\n\n// ???????????????\nP operator *(P p, D s) {\n    p.x *= s, p.y *= s;\n    return p;\n}\n\nD inp(P a, P b) {\n    return a.x*b.x + a.y*b.y;\n}\n\nD norm(P p) {\n    return inp(p, p);\n}\n\nD abs(P p) {\n    return sqrt(norm(p));\n}\n\nint main() {\n    double x, y;\n    cin >> x >> y;\n    P p0(x, y);\n    cin >> x >> y;\n    P p1(x, y);\n    P vec = p1 - p0;\n    P idvec = vec * (1.0 / abs(vec));\n    int Q; cin >> Q;\n    while(Q--) {\n        cin >> x >> y;\n        P p2(x, y);\n        P res = idvec * inp(idvec, p2);\n        printf(\"%.10f %.10f\\n\", res.x, res.y);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\ntypedef long long ll;\ndouble pi=3.14159265359; //円周率\ndouble EPS = 1e-10; //誤差\n\nclass point\n{\n\tpublic:\n\tdouble x,y;\n\n\tpoint()\n\t{x=0;y=0;}\n\t//コンストラクタ\n\tpoint(double a,double b)\n\t{\n\t\tx=a;y=b;\n\t}\n\n\t//足し算\n\tpoint operator + (point p)\n\t{\n\t\treturn point(x+p.x,y+p.y);\n\t}\n\t//引き算\n\tpoint operator - (point p)\n\t{\n\t\treturn point(x-p.x,y-p.y);\n\t}\n\t//d倍\n\tpoint operator * (double d)\n\t{\n\t\treturn point(x*d,y*d);\n\t}\n\t//x座標昇順でソートする\n\tbool operator < (const point &p)\n\tconst {\n\t\tif(std::abs(x-p.x)>EPS)\n\t\t\treturn x<p.x;\n\t\telse\n\t\t\treturn y<p.y;\n\t}\n\t//内積\n\t//直交判定...abs(dot())<EPS\n\tdouble dot(point p)\n\t{\n\t\treturn x*p.x+y*p.y;\n\t}\n\t//外積\n\t//平行判定...abs(cross())<EPS\n\tdouble cross(point p)\n\t{\n\t\treturn x*p.y-y*p.x;\n\t}\n\t//絶対値を求める\n\tdouble abs()\n\t{\n\t\treturn sqrt(x*x+y*y);\n\t}\n\t//単位ベクトルを求める\n\tpoint ev()\n\t{\n\t\treturn point(x/abs(),y/abs());\n\t}\n\t//単位法線ベクトル（の1つ）を求める\n\t//もうひとつは-1倍することで求まる\n\tpoint nev()\n\t{\n\t\treturn point(-y/abs(),x/abs());\n\t}\n\t//2点間の距離を求める\n\t//distがEPS未満なら2点は同じ位置にあるとみなす\n\tdouble pdist(point p)\n\t{\n\t\tpoint v=point(p.x-x,p.y-y);\n\t\treturn v.abs();\n\t}\n\t//この点と直線p1-p2の距離を求める\n\tdouble ldist(point p1,point p2)\n\t{\n\t\treturn std::abs((p2.y-p1.y)*x-(p2.x-p1.x)*y+p2.x*p1.y+p2.y*p1.x)/(p2-p1).abs();\n\t}\n\n};\n\n//線分p1-p2上に点qがあるか判定\nbool on_seg(point p1,point p2,point q)\n{\n\treturn abs((p1-q).cross(p2-q))<EPS && (p1-q).dot(p2-q)<=EPS;\n}\n//直線p1-p2と直線q1-q2の交点\n//線分の交差判定はこれの戻り値が線分上にあるかどうかで判定する...on_seg(p1,p2,intersection(p1,p2,q1,q2))\npoint intersection(point p1,point p2,point q1,point q2)\n{\n\treturn p1 + (p2-p1) * ((q2-q1).cross(q1-p1) / (q2-q1).cross(p2-p1));\n}\n//n頂点からなる多角形の面積を求める(vectorで頂点は与えられる)\ndouble area(vector<point> p)\n{\n\tdouble ret=0;\n\tfor(int i=0;i<p.size()-1;i++)\n\t{\n\t\tret+=p[i].cross(p[i+1]);\n\t}\n\tret+=p[p.size()-1].cross(p[0]);\n\tret/=2;\n\treturn ret;\n}\n/*\n3点a,b,cをa->b->cと進むとき、\n* a->bで時計方向に折れてb->c (clockwise)\n* a->bで反時計方向に折れてb->c(counter clockwise)\n* a->bで逆を向いてaを通り越してb->c(c--a--b on line)\n* a->bでそのままb->c(a--b--c on line)\n* a->bで逆を向いてb->c(a--c--b on line)\n\nのいずれのパターンかを判定する\n*/\nint ccw(point a,point b,point c)\n{\n\tb=b-a;c=c-a;\n\tif(b.cross(c)>EPS)\n\t\treturn 1; //counter clockwise\n\tif(b.cross(c)<-EPS)\n\t\treturn -1; //clockwise\n\tif(b.dot(c)<-EPS)\n\t\treturn 2; //c--a--b on line\n\tif(b.x*b.x+b.y*b.y < c.x*c.x+c.y*c.y)\n\t\treturn -2; //a--b--c on line\n\treturn 0; //a--c--b on line\n}\n//凸包を求める\nvector<point> convex_hull(vector<point> p)\n{\n\tint n=p.size();\n\tint k=0;\n\tsort(p.begin(),p.end());\n\tvector<point> ch(2*n);\n\t//lower-hull 下側凸包\n\tfor(int i=0;i<n;ch[k++]=p[i++])\n\t{\n\t\twhile(k>=2 && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\t//upper-hull 上側凸包\n\tfor(int i=n-2,t=k+1;i>=0;ch[k++]=p[i--])\n\t{\n\t\twhile(k>=t && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\tch.resize(k-1);\n\treturn ch;\n}\n\nint main()\n{\n\tcout.setf(ios::fixed);\n\tcout.precision(12);\n\tpoint p1,p2;\n\tdouble a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\tp1=point(a,b);\n\tp2=point(c,d);\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tpoint f;\n\t\tcin>>a>>b;\n\t\tf=point(a,b);\n\t\tpoint x;\n\t\tx=f+(p2-p1).abs()*(p2-p1).nev();\n\t\tif(!on_seg(p1,p2,x))\n\t\t\tx=f+(p2-p1).abs()*(p2-p1).nev();\n\t\tcout<<x.x<<x.y<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define eps (1e-10)\nusing namespace std;\nclass Point\n{\n\tpublic:\n\tdouble x,y;\n\tPoint(double _x=0,double _y=0):x(_x),y(_y){}\n\tPoint operator + (Point p){ return Point(x+p.x,y+p.y);} \n\tPoint operator - (Point p){ return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a){return Point(a*x,a*y);} \n\tPoint operator / (double a){return Point(x/a,y/a);}\n\tdouble norm(){return x*x+y*y;}\n\tdouble ABS(){return sqrt(norm());} \n};\nstruct Segment\n{\n\tPoint p1,p2;\t\n};\n//判断是否正交 向量内积：a*b=|a||b|*cos(Y) 当cos为0时正交(90,-90垂直) \n//a*b=a.x*b.x+a.y*b.y;\nbool solve1(Point a,Point b)\n{\n\tdouble f=a.x*b.x+a.y*b.y; \n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\n//判断是否平行  向量外积：|a*b|=|a||b|sin(Y) 当sin为0时平行(180,0平行)\n//|a*b|=|a|*|b|*sin(Y) \nbool solve2(Point a,Point b)\n{\n\tdouble f=a.x*b.y-a.y*b.x;\n\tif(fabs(f-0.0)<eps) return true;\n\telse return false;\n}\ndouble dot(Point a,Point b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n/*\n求垂足x：对于给定的三点p1,p2,p从点p向通过p1,p2的直线引一条垂线\nbase=p2-p1;\nhypo=p-p1;\n x=s.p1+base*(hypo*base/|base|^2); hypo*base 可以用向量内积求 \n*/\nPoint solve3(Segment s,Point p)\n{\n\tPoint base=s.p2-s.p1;\n\tdouble r=dot(p-s.p1,base)/base.norm();\n\treturn s.p1+base*r; \n}\nint main()\n{\n\tdouble x1,y1,x2,y2;\n\tscanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n\tPoint p1(x1,y1),p2(x2,y2);\n\tSegment s;\n\ts.p1=p1,s.p2=p2;\n\tint T;scanf(\"%d\",&T);\n\twhile(T--){\n\t\tdouble x,y;scanf(\"%lf %lf\",&x,&y);\n\t\tPoint p(x,y);\n\t\tPoint w=solve3(s,p);\n\t\tprintf(\"%.10f %.10f\\n\",w.x,w.y);\n\t\t\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing ld = long double;\nconst ld eps = 1e-8, pi = acos(-1.0);\n\nbool eq(ld a, ld b) {\n\treturn abs(a - b) < eps;\n}\n\nusing Point = complex<ld>;\n\nclass Line {\npublic:\n\tPoint a, b;\n};\n\nld dot(Point a, Point b) {\n\treturn real(conj(a) * b);\n}\n\nld cross(Point a, Point b) {\n\treturn imag(conj(a) * b);\n}\n\nint ccw(Point a, Point b, Point c) {\n\tb -= a, c -= a;\n\tif (cross(b, c) > eps) return 1;\n\tif (cross(b, c) < -eps) return -1;\n\tif (dot(b, c) < 0) return 2;\n\tif (norm(b) < norm(c)) return -2;\n\treturn 0;\n}\n\nbool isis_ll(Line l, Line m) {\n\treturn abs(cross(l.b - l.a, m.b - m.a)) > eps;\n}\n\nbool isis_ls(Line l, Line s) {\n\treturn (cross(l.b - l.a, s.a - s.b) * cross(l.b - l.a, s.b - s.a) < eps);\n}\n\nbool isis_lp(Line l, Point p) {\n\treturn abs(cross(l.b - p, l.a - p)) < eps;\n}\n\nbool isis_sp(Line s, Point p) {\n\treturn abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps;\n}\n\nPoint proj(Line l, Point p) {\n\tld t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n\treturn l.a + t * (l.a - l.b);\n}\n\nint main()\n{\n\tint q;\n\tld p1x, p1y, p2x, p2y, x, y;\n\tcout << fixed << setprecision(9);\n\tcin >> p1x >> p1y >> p2x >> p2y;\n\tLine l = { (Point) { p1x, p1y }, (Point) { p2x, p2y } };\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> x >> y;\n\t\tPoint res = proj(l, (Point) { x, y });\n\t\tcout << res.real() << ' ' << res.imag() << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n/*\n#include<algolithm>\n#include<array>\n#include<vector>\n*/\nusing namespace std;\n\ntypedef double Real;\nconstexpr Real EPS = 1e-8;\n\nint sign(Real d) {\n\tif (d>EPS) { return 1; }\n\tif (d<-EPS) { return -1; }\n\treturn 0;\n}\n\nstruct Point {\n\tReal x,y;\n\n\tPoint(Real x_=0, Real y_=0): x(x_), y(y_) {}\n\n\tPoint operator+(const Point &p) const {\n\t\treturn Point(x+p.x,y+p.y);\n\t}\n\tPoint operator-(const Point &p) const {\n\t\treturn Point(x-p.x,y-p.y);\n\t}\n\tPoint operator*(Real s) const {\n\t\treturn Point(x*s,y*s);\n\t}\n\tPoint operator/(Real s) const {\n\t\treturn Point(x/s,y/s);\n\t}\n\tPoint operator<(const Point &p) const {\n\t\treturn sign(x - p.x) == -1 || (sign(x - p.x)==0 && sign(y - p.y)==-1);\n\t}\n\tPoint operator==(const Point &p) const { return sign(x-p.x) == 0 && sign(y - p.y)==0; }\n\n};\n\nistream &operator>>(istream &is, Point &p) {\n\treturn is >> p.x >> p.y;\n}\nostream &operator<<(ostream &os, const Point &p) {\n\treturn os << '(' << p.x << \", \" << p.y << ')';\n}\n\nstruct Line : public array<Point, 2> { //??????\n\tLine(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Segment : public array<Point, 2> { //??´???\n\tSegment(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Circle {\n\tPoint c;\n\tReal r;\n\tCircle(const Point &c_, Real r_): c(c_), r(r_) {}\n};\n\ntypedef vector<Point> Polygon;\n\n\n\n\n//--- solve ---\nPoint rotate90(const Point &p) { //???????¨???????\n\treturn Point(-p.y,p.x);\n}\n\nPoint rotate(const Point &p, Real theta) {\n\tconst Real s = sin(theta), c = cos(theta);\n\treturn Point(c*p.x - s*p.y, s*p.x + c*p.y);\n}\n\nReal angle(const Point &p) {\n\treturn atan2(p.y, p.x);\n}\n\nReal norm(const Point &p) {\n\treturn p.x * p.x + p.y * p.y;\n}\n\nReal abs(const Point &p) {\n\treturn sqrt(norm(p));\n}\n\nReal dot(const Point &a, const Point &b) { //??????\n\treturn a.x * b.x + a.y * b.y;\n}\n\nReal cross(const Point &a, const Point &b) {\n\treturn a.x * b.y + a.y * b.x;\n}\n\nPoint project(const Line &l, const Point &p) { //?°???±\n\tconst Point a = p - l[0];\n\tconst Point b = l[1] - l[0];\n\treturn l[0] + b * (dot(a,b) / norm(b));\n}\n\nbool intersect(const Line &a, const Line &b) { //\n\treturn sign(cross(a[1]-a[0], b[1]-b[0])) != 0\n\t\t|| sign(cross(a[1]-a[0], b[1]-a[0])) == 0;\n}\n\nint main() {\n\tPoint p1,p2;\n\tint q;\n\tint x,y;\n\n\tcout.setf(ios::fixed);\n\tcout.precision(10);\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tLine l(p1,p2);\n\tcin >> q;\n\tfor(int i=0; i < q; i++) {\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\t\tPoint ans_p = project(l,p);\n\t\tcout << ans_p.x << \" \" << ans_p.y << endl;\n\t}\n\n\treturn EXIT_SUCCESS;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing lint = long long;\ntemplate<class T = int> using V  = vector<T>;\ntemplate<class T = int> using VV = V< V<T> >;\ntemplate<class T, class H> void rsz(V<T> &v, H h) { v.resize(h); }\ntemplate<class T, class H, class... R> void rsz(V<T> &v, H h, R... r) { v.resize(h); for (auto&& i : v) rsz(i, r...); }\nusing C = complex<double>;\n\nint main() {\n  cin.tie(NULL); ios::sync_with_stdio(false);\n  int x, y; cin >> x >> y; C p1(x, y);\n  cin >> x >> y; C p2(x, y);\n  int q; cin >> q;\n  for (int i = 0; i < q; i++) {\n    cin >> x >> y; C p(x, y);\n    C x = p1 + real(conj(p2 - p1) * (p - p1)) / norm(p2 - p1) * (p2 - p1);\n    cout << fixed << setprecision(10) << real(x) << ' ' << imag(x) << '\\n';\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <algorithm>\nconst double EPS = 1e-9;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\tvector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator * (double a) {\n\t\treturn vector(x * a, y * a);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}\n\tvector operator + (vector v) {\n\t\treturn vector(x + v.x, y + v.y);\n\t}\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double squ(vector v) {\n\treturn v.x*v.x + v.y*v.y;\n}\ninline double norm(vector v) {\n\treturn sqrt(squ(v));\n}\ninline void print(vector v) {\n\tprintf(\"%.10f %.10f\\n\", v.x, v.y);\n}\ninline vector pro(vector base, vector v, vector be) {\n\tdouble a = dot(base, v) / squ(base);\n\tvector v1 = base * a;\n\treturn v1 + be;\n}\ninline vector ref(vector v, vector be) {\n\treturn (v - be)*2 + be;\n}\ninline double cross(vector v1, vector v2) {\n\treturn v1.x*v2.y - v1.y*v2.x;\n}\ninline int ccw(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\tif (cross(a, b) < 0.0) return -1;\n\telse if (cross(a, b) > 0.0) return 1;\n\telse if (dot(a, b) < 0.0) return -2;\n\telse if (dot(a, b) > squ(v1)) return 2;\n\telse return 0;\n}\ninline int inter(vector v1, vector v2, vector v3, vector v4) {\n\treturn (ccw(v1, v2, v3) * ccw(v1, v2, v4) <= 0) && (ccw(v3, v4, v1) * ccw(v3, v4, v2) <= 0);\n}\ninline double disPP(vector v1, vector v2) {\n\treturn norm(v2 - v1);\n}\ninline double disLP(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\treturn fabs(cross(a, b) / norm(a));\n}\ninline double disSP(vector v1, vector v2, vector v3) {\n\tvector a = v2 - v1;\n\tvector b = v3 - v1;\n\tvector c = v1 - v2;\n\tvector d = v3 - v2;\n\tif (dot(a, b) < 0.0) return disPP(v1, v3);\n\telse if (dot(c, d) < 0.0) return disPP(v2, v3);\n\telse return disLP(v1, v2, v3);\n}\ninline double disSS(vector v1, vector v2, vector v3, vector v4) {\n\tif (inter(v1, v2, v3, v4)) return 0;\n\tdouble a = disSP(v1, v2, v3);\n\tdouble b = disSP(v1, v2, v4);\n\tdouble c = disSP(v3, v4, v1);\n\tdouble d = disSP(v3, v4, v2);\n\treturn min(min(a, b), min(c, d));\n}\n/*int main() {\n\t//inter\n\tint n;\n\tdouble x0, x1, x2, x3, y0, y1, y2, y3;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tvector v1(x0,y0);\n\t\tvector v2(x1, y1);\n\t\tvector v3(x2, y2);\n\t\tvector v4(x3, y3);\n\t\tcout << inter(v1, v2, v3, v4) << endl;\n\t}\n\treturn 0;\n}\nint main() {\n\t//clo\n\tint n;\n\tdouble x0, x1, x2, y0, y1, y2;\n\tcin >> x0 >> y0 >> x1 >> y1 >> n;\n\tvector v1(x0, y0);\n\tvector v1(x1, y1);\n\tfor(int i = 0; i < n; i++) {\n\t\tcin >> x2 >> y2;\n\t\tvector v2(x2, y2);\n\t\tint ans = ccw(v0, v1, v2);\n\t\t if(ans == -1) cout << \"CLOCKWISE\" << endl;\n\t\t else if(ans == 1) cout << \"COUNTER_CLOCKWISE\" << endl;\n\t\t  else if(ans == -2)cout << \"ONLINE_BACK\" << endl;\n\t\t  else if(ans == 2)cout << \"ONLINE_FRONT\" << endl;\n\t\telse cout << \"ON_SEGMENT\" << endl;\n\t}\n\treturn 0;\n}*/\n/*int main() {\n\t//distance\n\tint n;\n\tcin >> n;\n\tdouble x0, x1, x2, x3,y0,  y1, y2, y3;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\t\tvector v1(x0, y0);\n\t\tvector v2(x1, y1);\n\t\tvector v3(x2, y2);\n\t\tvector v4(x3, y3);\n\t\tprintf(\"%.10f\\n\", disSS(v1, v2, v3, v4));\n\t}\n\treturn 0;\n}*/\nint main() {\n\t//pro\n\tdouble x1, y1, x2, y2, q, x, y;\n\tcin >> x1 >> y1 >> x2 >> y2 >> q;\n\tvector be(x1, y1);\n\tvector base(x2 - x1, y2 - y1);\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tvector v(x-be.x, y-be.y);\n\t\tprint(pro(base, v, be));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n  double x, y;\n\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator + (Point p){return Point(x + p.x, y + p.y);}\n  Point operator - (Point p){return Point(x - p.x, y - p.y);}\n  Point operator * (double a){return Point(x * a, y * a);}\n  Point operator / (double a){return Point(x / a, y / a);}\n\n  double abs(){return sqrt(norm());}\n  double norm(){return x * x + y * y;}\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n\n};\n\ntypedef Point Vector;\n\nclass Segment{\npublic:\n  Point p1, p2;\n  Segment(Point p1, Point p2): p1(p1), p2(p2){}\n};\n\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0): c(c), r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b){\n  return a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nPoint reflect(Point p0, Point p1, Point p2){\n  Vector v01 = Vector(p0.x - p1.x, p0.y - p1.y);\n  Vector v21 = Vector(p2.x - p1.x, p2.y - p1.y);\n  double t = -1 * ((p2.x - p1.x) * (p1.x - p0.x) + (p2.y - p1.y) * (p1.y - p0.y)) / (pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n  return (v21 * t - v01) * 2 + p0;\n}\n\nPoint project(Point p0, Point p1, Point p2){\n  Vector v01 = Vector(p0.x - p1.x, p0.y - p1.y);\n  Vector v21 = Vector(p2.x - p1.x, p2.y - p1.y);\n  double t = -1 * ((p2.x - p1.x) * (p1.x - p0.x) + (p2.y - p1.y) * (p1.y - p0.y)) / (pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n  return v21 * t + p1;\n}\n\nvoid solve(){\n  double x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;\n  Point p1 = Point(x1, y1), p2 = Point(x2, y2);\n  int q; cin >> q;\n  vector<Point> ans(q);\n  for(int i = 0; i < q; i++){\n    double x0, y0; cin >> x0 >> y0;\n    Point p0 = Point(x0, y0);\n    ans[i] = project(p0, p1, p2);\n  }\n  for(int i = 0; i < q; i++){\n    cout << fixed << setprecision(10) << ans[i].x << \" \" << ans[i].y << endl;\n  }\n  return;\n}\n\nint main(){\n  solve();\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <numeric>\n#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iomanip>\nusing namespace std;\ntypedef vector<double> VecD;\n#define rep(n) for(int i=0;i<n;i++)\n#define PB push_back\n\nclass Point{\nfriend const double operator*(const Point &, const Point &);\nfriend const Point operator*(const double, const Point &);\nfriend const Point operator*(const Point &, const double);\nfriend const Point operator+(const Point &, const Point &);\nfriend const Point operator+(const double, const Point &);\nfriend const Point operator+(const Point &, const double);\nfriend const Point operator-(const Point &);\nfriend const Point operator-(const Point &, const Point &);\nfriend const Point operator-(const double, const Point &);\nfriend const Point operator-(const Point &, const double);\n\npublic:\n\tPoint(){};\n\tPoint(VecD v){\n\t\tpoint = v;\n\t}\n\tVecD point;\n};\n\nconst double operator*(const Point &p0, const Point &p1){ return inner_product( p0.point.begin(), p0.point.end(), p1.point.begin(), 0); }\nconst Point operator*(const double a, const Point &p1){\n\tVecD v;\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++) v.PB(*iter1 * a);\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator* (const Point &p, const double a){return a*p;}\nconst Point operator+(const Point &p0, const Point &p1){\n\tVecD v;\n\tVecD::const_iterator iter0 = p0.point.begin();\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++){\n\t\tv.PB(*iter0 + *iter1);\n\t\titer0++;\n\t}\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator+(const double a, const Point &p1){\n\tVecD v;\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++){\n\t\tv.PB(*iter1 + a);\n\t}\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator+(const Point &p1, const double a){return a+p1;}\nconst Point operator-(const Point &p1){return (-1)*p1;}\nconst Point operator-(Point &p0, Point &p1){ return p0+(-p1); }\nconst Point operator-(double a, Point &p1){ return a+(-p1); }\nconst Point operator-(Point &p1, double a){return (-a)+p1;}\n\nconst Point projection(const Point &p1, const Point &p2){\n\t// cout << p1*p2 << endl;\n\treturn ((p1*p2) / (p1*p1)) * p1;\n}\n\nint main(void){\n\n\tdouble xp0, yp0, xp1, yp1; cin>>xp0>>yp0>>xp1>>yp1;\n\tint q; cin >> q;\n\tVecD v0; v0.PB(xp0); v0.PB(yp0); Point p0(v0);\n\tVecD v1; v1.PB(xp1); v1.PB(yp1); Point p1(v1);\n\tp1 = -p1+p0;\n\tcout << p1.point[0] << \" \" << p1.point[1] << endl;\n\trep(q){\n\t\tdouble xp2,yp2; cin>>xp2>>yp2;\n\t\tVecD v2; v2.PB(xp2); v2.PB(yp2); Point p2(v2);\n\t\tPoint ret = projection(p1, p2);\n\t\tcout << fixed << setprecision(10) << ret.point[0] << \" \" << fixed << setprecision(10) << ret.point[1] << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"-fgcse\")\n#pragma GCC optimize(\"-fgcse-lm\")\n#pragma GCC optimize(\"-fipa-sra\")\n#pragma GCC optimize(\"-ftree-pre\")\n#pragma GCC optimize(\"-ftree-vrp\")\n#pragma GCC optimize(\"-fpeephole2\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-fsched-spec\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC optimize(\"-falign-jumps\")\n#pragma GCC optimize(\"-falign-loops\")\n#pragma GCC optimize(\"-falign-labels\")\n#pragma GCC optimize(\"-fdevirtualize\")\n#pragma GCC optimize(\"-fcaller-saves\")\n#pragma GCC optimize(\"-fcrossjumping\")\n#pragma GCC optimize(\"-fthread-jumps\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-fwhole-program\")\n#pragma GCC optimize(\"-freorder-blocks\")\n#pragma GCC optimize(\"-fschedule-insns\")\n#pragma GCC optimize(\"inline-functions\")\n#pragma GCC optimize(\"-fschedule-insns2\")\n#pragma GCC optimize(\"-fstrict-aliasing\")\n#pragma GCC optimize(\"-fstrict-overflow\")\n#pragma GCC optimize(\"-falign-functions\")\n#pragma GCC optimize(\"-fcse-skip-blocks\")\n#pragma GCC optimize(\"-fcse-follow-jumps\")\n#pragma GCC optimize(\"-fsched-interblock\")\n#pragma GCC optimize(\"-fpartial-inlining\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"-freorder-functions\")\n#pragma GCC optimize(\"-findirect-inlining\")\n#pragma GCC optimize(\"inline-small-functions\")\n#pragma GCC optimize(\"-finline-small-functions\")\n#pragma GCC optimize(\"-ftree-switch-conversion\")\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\n#pragma GCC optimize(\"-fexpensive-optimizations\")\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\n#pragma GCC optimize(\"inline-functions-called-once\")\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\n#define mp make_pair\n#define PI pair<int,int>\n#define poly vector<int>\n#define For(i,l,r) for(int i=(int)(l);i<=(int)(r);i++)\n#define Rep(i,r,l) for(int i=(int)(r);i>=(int)(l);i--)\n#define pb push_back\n#define mem(a) memset((a),0,sizeof(a))\n#define fi first\n#define se second\ninline char gc(){\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\n#define gc getchar\ninline ll read(){\n\tll x = 0; char ch = gc(); bool positive = 1;\n\tfor (; !isdigit(ch); ch = gc())\tif (ch == '-')\tpositive = 0;\n\tfor (; isdigit(ch); ch = gc())\tx = x * 10 + ch - '0';\n\treturn positive ? x : -x;\n}\ninline void write(ll a){\n    if(a<0){\n    \ta=-a; putchar('-');\n\t}\n    if(a>=10)write(a/10);\n    putchar('0'+a%10);\n}\ninline void writeln(ll a){write(a); puts(\"\");}\ninline void wri(ll a){write(a); putchar(' ');}\ndouble x,y,xx,yy;\ndouble xxx,yyy;\nint q;\nint main(){\n\tcin>>x>>y>>xx>>yy;\n\txx-=x,yy-=y;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>xxx>>yyy;\n\t\txxx-=x,yyy-=y;\n\t\tdouble ans=xx*xxx+yy*yyy;\n\t\tans/=(xx*xx+yy*yy);\n\t\tdouble ansx=ans*xx+x,ansy=ans*yy+y;\n\t\tif(ansx==0) ansx=fabs(ansx);\n\t\tif(ansy==0) ansy=fabs(ansy);\n\t\tprintf(\"%.10lf %.10lf\\n\",ansx,ansy);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long int64;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\n\ntypedef complex<double> point;\nstruct line { point p, q; };\n\ndouble dot(point a, point b) { return real(conj(a) * b); }\n\npoint projection(const line &l, const point &p)\n{\n\tdouble t = dot(p - l.p, l.p - l.q) / norm(l.p - l.q);\n\treturn l.p + t * (l.p - l.q);\n}\n\npoint read(){\n\tdouble x, y; cin >> x >> y;\n\treturn point(x, y);\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0);\n\n\tpoint p, q;\n\tp = read(), q = read();\n\tline l = {p, q};\n\n\tint n; cin >> n;\n\tfor (int i = 0; i < n; ++i){\n\t\tpoint r = read();\n\t\tpoint a = projection(l, r);\n\t\tcout.precision(15);\n\t\tcout << fixed << a.real() << \" \" << a.imag() << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SBCURE_NO_DEPRECATE\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nconst int maxn = 110;\nconst int INF = 0x7fffffff;\n\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\nint cmp(Point A, Point B)                     //竖直排序  \n{\n\treturn (A.y<B.y || (A.y == B.y&&A.x<B.x));\n}\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\n\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) >= 0; j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) >= 0; j--) {\n\t\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\n\n\n\nint main(){\n\tcout.precision(20);\n\tSegment s;\n\tPoint p;\n\tint x1,x2,y1,y2,q;\n\tcin>>x1>>y1>>x2>>y2;\n\ts.p1.x=x1;s.p1.y=y1;\n\ts.p2.x=x2;s.p2.y=y2;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x1>>y1;\n\t\tp.x=x1;p.y=y1;\n\t\tcout<<project(s, p).x<<\" \"<<project(s, p).y<<endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#include<array>\n#include<vector>\nusing namespace std;\n\nconst double EPS = 1e-10;\ntemplate<class T>\nbool eq(const T& a, const T& b) {return abs(a - b) < EPS;}\n\ntypedef  complex<double> point;\n// sort/unique用、setではうまく動かないので使うべからず\nnamespace std {\n\tbool operator==(const point &a, const point &b){\n\t\treturn eq(a, b);\n\t}\n\tbool operator<(const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;  // counter clockwise\n\tif (cross(b, c) < 0)   return -1;  // clockwise\n\tif (dot(b, c) < 0)     return +2;  // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;  // a--b--c on line\n\treturn 0;  // a--c--b on line or a----bc\n}\n\nstruct circle {point p; double r;};\ntypedef vector<point> polygon;\ntypedef array<point, 2> line;\n\npoint projection(const line& l, const point& p) {\n\tdouble t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\n\n\nint main()\n{\n  double x0,y0,x1,y1;\n  for(;cin>>x0>>y0>>x1>>y1;)\n    {\n      int n;\n      cin>>n;\n      for(int i=0;i<n;i++)\n\t{\n\t  line l;\n\t  l[0]=point(x0,y0);\n\t  l[1]=point(x1,y1);\n\t  double x,y;\n\t  cin>>x>>y;\n\t  point p=point(x,y);\n\t  point ans=projection(l,p);\n\t  cout<<ans.real()<<\" \"<<ans.imag()<<endl;\n\t}\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<string.h>\n#include<algorithm>\n#include<stdio.h>\n#include<complex>\nusing namespace std;\ntypedef complex<double> qua;\nqua solve(qua a,qua b,qua c)\n{\n    b-=a,c-=a;\n    return a+b*real(c/b);\n}\nint main()\n{\n    int m;\n    double x1,y1,x2,y2,x3,y3;\n    scanf(\"%lf%lf%lf%lf%d\",&x1,&y1,&x2,&y2,&m);\n    while(m--)\n    {\n        scanf(\"%lf%lf\",&x3,&y3);\n        qua ans=solve(qua(x1,y1),qua(x2,y2),qua(x3,y3));\n        printf(\"%.8f %.8f\\n\",ans.real(),ans.imag());\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SBCURE_NO_DEPRECATE\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nconst int maxn = 110;\nconst int INF = 0x7fffffff;\n\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\nint cmp(Point A, Point B)                     //竖直排序  \n{\n\treturn (A.y<B.y || (A.y == B.y&&A.x<B.x));\n}\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\n\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) >= 0; j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) >= 0; j--) {\n\t\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\n\n\n\nint main(){\n\tSegment s;\n\tPoint p;\n\tint x1,x2,y1,y2,q;\n\tcin>>x1>>y1>>x2>>y2;\n\ts.p1.x=x1;s.p1.y=y1;\n\ts.p2.x=x2;s.p2.y=y2;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x1>>y1;\n\t\tp.x=x1;p.y=y1;\n\t\tPoint ans=project(s, p);\n\t\tcout.precision(20);\n\t\tprintf(\"%.10lf %.10lf\\n\", ans.x, ans.y);\n\t\t\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//投影\n#include<bits/stdc++.h>\nusing namespace std;\nconst double PI=acos(-1);\nconst double EPS=1e-6;\nbool is_Zero(double &a){\n\treturn a<EPS&&a>-EPS;\n}\nconst int INFTY=1<<29;\nstruct Point{\n\tdouble x,y;\n\tPoint(double x,double y):x(x),y(y){}\n\tPoint(){}\n\tPoint(const Point&a){x=a.x;y=a.y;}\n\tPoint operator+(const Point&a){\n\t\treturn Point(x+a.x,y+a.y);\n\t}\n\tPoint operator-(const Point&a){\n\t\treturn Point(x-a.x,y-a.y);\n\t}\n\tPoint operator*(double k){\n\t\treturn Point(k*x,k*y);\n\t}\n\tPoint operator/(double k){\n\t\treturn Point(x/k,y/k);\n\t} \n};\ntypedef Point Vector;\nPoint operator*(double k,const Point&a){\n\treturn Point(k*a.x,k*a.y);\n}\ndouble norm(const Point&a){\n\treturn a.x*a.x+a.y*a.y;\n}\ndouble abs(const Point&a){\n\treturn sqrt(norm(a));\n}\ndouble dot_product(const Point&a,const Point&b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross_product(const Point&a,const Point&b){\n\treturn a.x*b.y-a.y*b.x;\n}\nPoint projection_Point(Point&p1,Point&p2,Point&p){\n\tVector base=p2-p1;\n\tdouble r=dot_product(base,p-p1)/norm(base);\n\treturn p1+base*r;\n}\n\nint main(){\n\tPoint p1,p2;\n\tPoint temp;\n\tscanf(\"%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n\tint q;\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t\tscanf(\"%lf%lf\",&temp.x,&temp.y);\n\t\tPoint a=projection_Point(p1,p2,temp);\n\t\tprintf(\"%.10lf %.10lf\\n\",a.x,a.y);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <vector>\n#include <math.h>\n\n\nusing namespace std;\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS) //?????????????????????????????????\n\n\n//??????????????????????????????\nclass Point {\n\npublic:\n\n\tdouble x, y;//??§?¨????????????????x,y??????\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator * (Point p) {\n\t\treturn Point(x * p.x, y * p.y);\n\t}\n\n\tPoint operator / (Point p) {\n\t\treturn Point(x / p.x, y / p.y);\n\t}\n\n\tdouble norm() {\n\t\treturn x*x + y*y;\n\t}\n\n\t//?????????????????§???????????????\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS &&  fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\n//??????????????????????????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????????????????????????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\n\tSegment(){}\n\n\t//?????¨????°???±?????????\n\tPoint projection(Point p) {\n\t\tVector base = p2 - p1;\n\n\t\tdouble r = dot(p - p1, base) / base.norm();\n\t\treturn p1 + base * r;\n\t}\n\n};\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//?°???±?????????\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\ntypedef Segment Line;\n\ntypedef vector<Point> Polygon;\n\n\n\n//???\nclass Circle {\npublic:\n\tPoint c;//??????\n\tdouble r;//??????\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n\nint main(void)\n{\n\tint n;\n\n\tSegment s;\n\tPoint p;\n\tPoint proj;\n\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> p.x >> p.y;\n\t\tproj = projection(s, p);\n\t\tprintf(\"%.9lf %.9lf\\n\",proj.x,proj.y);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#pragma GCC optimize(\"Ofast\")\n\n// Begin Header {{{\nusing namespace std;\n\n#ifndef DEBUG\n#define dump(...)\n#endif\n\n#define all(x) x.begin(), x.end()\n#define rep(i, b, e) for (intmax_t i = (b), i##_limit = (e); i < i##_limit; ++i)\n#define reps(i, b, e) for (intmax_t i = (b), i##_limit = (e); i <= i##_limit; ++i)\n#define repr(i, b, e) for (intmax_t i = (b), i##_limit = (e); i >= i##_limit; --i)\n#define var(Type, ...) Type __VA_ARGS__; input(__VA_ARGS__)\n\nconstexpr size_t    operator\"\"_zu(unsigned long long value) { return value; };\nconstexpr intmax_t  operator\"\"_jd(unsigned long long value) { return value; };\nconstexpr uintmax_t operator\"\"_ju(unsigned long long value) { return value; };\n\nconstexpr int INF = 0x3f3f3f3f;\nconstexpr intmax_t LINF = 0x3f3f3f3f3f3f3f3f_jd;\n\ntemplate <class T, class Compare = less<>>\nusing MaxHeap = priority_queue<T, vector<T>, Compare>;\ntemplate <class T, class Compare = greater<>>\nusing MinHeap = priority_queue<T, vector<T>, Compare>;\n\ninline void input() {}\ntemplate <class Head, class... Tail>\ninline void input(Head&& head, Tail&&... tail) {\n    cin >> head;\n    input(forward<Tail>(tail)...);\n}\n\ntemplate <class T>\ninline istream& operator>>(istream &is, vector<T> &vec) {\n    for (auto &e: vec) {\n        is >> e;\n    }\n    return is;\n}\n\ninline void output() { cout << \"\\n\"; }\ntemplate <class Head, class... Tail>\ninline void output(Head&& head, Tail&&... tail) {\n    cout << head;\n    if (sizeof...(tail)) {\n        cout << \" \";\n    }\n    output(forward<Tail>(tail)...);\n}\n\ntemplate <class T>\ninline ostream& operator<<(ostream &os, const vector<T> &vec) {\n    static constexpr const char *delim[] = {\" \", \"\"};\n    for (const auto &e: vec) {\n        os << e << delim[&e == &vec.back()];\n    }\n    return os;\n}\n\ntemplate <class T>\ninline vector<T> makeVector(const T &initValue, size_t sz) {\n    return vector<T>(sz, initValue);\n}\n\ntemplate <class T, class... Args>\ninline auto makeVector(const T &initValue, size_t sz, Args... args) {\n    return vector<decltype(makeVector<T>(initValue, args...))>(sz, makeVector<T>(initValue, args...));\n}\n\ntemplate <class Func>\nclass FixPoint : Func {\npublic:\n    explicit constexpr FixPoint(Func&& f) noexcept : Func(forward<Func>(f)) {}\n\n    template <class... Args>\n    constexpr decltype(auto) operator()(Args&&... args) const {\n        return Func::operator()(*this, std::forward<Args>(args)...);\n    }\n};\n\ntemplate <class Func>\nstatic inline constexpr decltype(auto) makeFixPoint(Func&& f) noexcept {\n    return FixPoint<Func>{forward<Func>(f)};\n}\n\ntemplate <class Container>\nstruct reverse_t {\n    Container &c;\n    reverse_t(Container &c) : c(c) {}\n    auto begin() { return c.rbegin(); }\n    auto end() { return c.rend(); }\n};\n\ntemplate <class Container>\nauto reversed(Container &c) {\n    return reverse_t<Container>(c);\n}\n\ntemplate <class T>\ninline bool chmax(T &a, const T &b) noexcept {\n    return b > a && (a = b, true);\n}\n\ntemplate <class T>\ninline bool chmin(T &a, const T &b) noexcept {\n    return b < a && (a = b, true);\n}\n\ntemplate <class T>\ninline T diff(const T &a, const T &b) noexcept {\n    return a < b ? b - a : a - b;\n}\n// End Header }}}\n\n// Geometry {{{\nconst long double EPS = 1e-10;\nconst long double PI = acos(-1);\n\nstruct Real {\n    long double x;\n\n    Real(long double x = 0) : x(x) {}\n    Real(const Real& rhs) { x = rhs.x; }\n\n    Real operator+(const Real& rhs) const { return Real(x + rhs.x); }\n    Real& operator+=(const Real& rhs) { return x += rhs.x, *this; }\n    Real operator-(const Real& rhs) const { return Real(x - rhs.x); }\n    Real& operator-=(const Real& rhs) { return x -= rhs.x, *this; }\n    Real operator*(const Real& rhs) const { return Real(x * rhs.x); }\n    Real& operator*=(const Real& rhs) { return x *= rhs.x, *this; }\n    Real operator/(const Real& rhs) const { return Real(x / rhs.x); }\n    Real& operator/=(const Real& rhs) { return x /= rhs.x, *this; }\n    Real operator-() const { return Real(-x); }\n    Real& operator++() { return ++x, *this; }\n    Real& operator--() { return --x, *this; }\n    Real operator++(int) { Real tmp(x); return ++x, tmp; }\n    Real operator--(int) { Real tmp(x); return --x, tmp; }\n    bool operator==(const Real& rhs) const { return fabs(x - rhs.x) < EPS; }\n    bool operator!=(const Real& rhs) const { return !(*this == rhs); }\n    bool operator<(const Real& rhs) const { return (*this == rhs) ? false : x < rhs.x; }\n    bool operator>(const Real& rhs) const { return (*this == rhs) ? false : x > rhs.x; }\n    bool operator<=(const Real& rhs) const { return (*this == rhs) ? true : x < rhs.x; }\n    bool operator>=(const Real& rhs) const { return (*this == rhs) ? true : x > rhs.x; }\n\n    friend istream& operator>>(istream& is, Real& rhs) {\n        is >> rhs.x;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Real& rhs) {\n        os << rhs.x;\n        return os;\n    }\n\n    friend Real pow(const Real& n, const Real& p) { return pow(n.x, p.x); }\n    friend Real pow(Real n, intmax_t p) {\n        Real ret = 1;\n        for (; p > 0; p >>= 1) {\n            if (p & 1) ret *= n;\n            n *= n;\n        }\n        return ret;\n    }\n    friend Real abs(const Real& rhs) { return abs(rhs.x); }\n    friend Real sin(const Real& rhs) { return sin(rhs.x); }\n    friend Real cos(const Real& rhs) { return cos(rhs.x); }\n    friend Real tan(const Real& rhs) { return tan(rhs.x); }\n    friend Real asin(const Real& rhs) { return asin(rhs.x); }\n    friend Real acos(const Real& rhs) { return acos(rhs.x); }\n    friend Real atan(const Real& rhs) { return atan(rhs.x); }\n    friend Real atan2(const Real& lhs, const Real& rhs) { return atan2(lhs.x, rhs.x); }\n    friend Real sqrt(const Real& rhs) { return sqrt(rhs.x); }\n    friend Real ceil(const Real& rhs) { return ceil(rhs.x); }\n    friend Real floor(const Real& rhs) { return floor(rhs.x); }\n    friend Real round(const Real& rhs) { return round(rhs.x); }\n};\n\nusing real_t = Real;\n\nstruct Point {\n    real_t x, y;\n\n    Point(real_t x = 0, real_t y = 0) : x(x), y(y) {}\n\n    Point operator+(const Point& rhs) const { return Point(x + rhs.x, y + rhs.y); }\n    Point operator-(const Point& rhs) const { return Point(x - rhs.x, y - rhs.y); }\n    Point operator*(const real_t& rhs) const { return Point(x * rhs, y * rhs); }\n    Point operator/(const real_t& rhs) const { return Point(x / rhs, y / rhs); }\n    Point operator-() const { return Point(-x, -y); }\n    bool operator==(const Point& rhs) const { return x == rhs.x && y == rhs.y; }\n    bool operator!=(const Point& rhs) const { return !(*this == rhs); }\n    bool operator<(const Point& rhs) const { return (x == rhs.x) ? y < rhs.y : x < rhs.x; }\n    bool operator>(const Point& rhs) const { return (x == rhs.x) ? y > rhs.y : x > rhs.x; }\n    bool operator<=(const Point& rhs) const { return (*this == rhs) ? true : *this < rhs; }\n    bool operator>=(const Point& rhs) const { return (*this == rhs) ? true : *this > rhs; }\n\n    real_t norm() const { return x * x + y * y; }\n    real_t len() const { return sqrt(norm()); }\n\n    friend real_t dist(const Point& lhs, const Point& rhs) {\n        Point delta = lhs - rhs;\n        return delta.len();\n    }\n    friend real_t dot(const Point& lhs, const Point& rhs) {\n        return lhs.x * rhs.x + lhs.y * rhs.y;\n    }\n    friend real_t cross(const Point& lhs, const Point& rhs) {\n        return lhs.x * rhs.y - lhs.y * rhs.x;\n    }\n\n    friend istream& operator>>(istream& is, Point& rhs) {\n        is >> rhs.x >> rhs.y;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Point& rhs) {\n        os << rhs.x << ' ' << rhs.y;\n        return os;\n    }\n};\n\nusing Vector = Point;\n\nstruct Segment {\n    Point s, e;\n\n    Segment(Point s = Point(), Point e = Point()) : s(s), e(e) {}\n\n    bool operator==(const Segment& rhs) const { return s == rhs.s && e == rhs.e; }\n    bool operator!=(const Segment& rhs) const { return !(*this == rhs); }\n    real_t len() const { return dist(s, e); }\n\n    friend istream& operator>>(istream& is, Segment& rhs) {\n        is >> rhs.s >> rhs.e;\n        return is;\n    }\n    friend ostream& operator<<(ostream& os, const Segment& rhs) {\n        os << rhs.s << ' ' << rhs.e;\n        return os;\n    }\n};\n\nusing Line = Segment;\n\n// parallel\nbool parallel(const Vector& a, const Vector& b) {\n    return cross(a, b) == 0.0;\n}\nbool parallel(const Point& a1, const Point& a2, const Point& b1, const Point& b2) {\n    return parallel(a1 - a2, b1 - b2);\n}\nbool parallel(const Segment& s1, const Segment& s2) {\n    return parallel(s1.s, s1.e, s2.s, s2.e);\n}\n\n// orthogonal\nbool orthogonal(const Vector& a, const Vector& b) {\n    return dot(a, b) == 0.0;\n}\nbool orthogonal(const Point& a1, const Point& a2, const Point& b1, const Point& b2) {\n    return orthogonal(a1 - a2, b1 - b2);\n}\nbool orthogonal(const Segment& s1, const Segment& s2) {\n    return orthogonal(s1.s, s1.e, s2.s, s2.e);\n}\n\n// project\nPoint project(const Segment& s, const Point& p) {\n    const Vector base = s.e - s.s;\n    const Vector hypo = p - s.s;\n    const real_t r = dot(hypo, base) / base.norm();\n    return s.s + base * r;\n}\n// }}}\n\nsigned main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.setf(ios_base::fixed);\n    cout.precision(10);\n\n    var(Point, p1, p2);\n    var(size_t, Q);\n\n    while (Q--) {\n        var(Point, p);\n        output(project(Segment(p1, p2), p));\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\nclass Point{\npublic:\n\tdouble x;\n\tdouble y;\n\tPoint(double x=0,double y=0) :x(x),y(y){ }\n\tPoint operator +(Point &p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator-(Point &p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(double a) {\n\t\treturn Point(x*a, y*a);\n\t}\n};\n\ntypedef struct {\n\tPoint p1, p2;\n}Line;\n\nint main() {\n\tLine s;\n\tcin >> s.p1.x; cin >> s.p1.y; cin >> s.p2.x; cin >> s.p2.y;\n\tdouble q;\n\tcin >> q;\n\tfor (double i = 0;i < q;i++) {\n\t\tPoint p,q;\n\t\tcin >> p.x; cin >> p.y;\n\t\tdouble prod = ((s.p2.x - s.p1.x)*(p.x - s.p1.x)) + ((s.p2.y - s.p1.y)*(p.y - s.p1.y));\n\t\tq.x = s.p1.x +(s.p2.x - s.p1.x)*(prod/((s.p1.x-s.p2.x)*(s.p1.x - s.p2.x)+ (s.p1.y - s.p2.y)*(s.p1.y - s.p2.y)));\n\t\tq.y = s.p1.y + (s.p2.y - s.p1.y)*(prod / ((s.p1.x - s.p2.x)*(s.p1.x - s.p2.x) + (s.p1.y - s.p2.y)*(s.p1.y - s.p2.y)));\n\t\tcout << q.x << \" \" << q.y << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "//Projection\n#include <iostream>\n#include <math.h>\n#include <iomanip>\n\nusing namespace std;\n\nstatic const double ESP = 1e-10;\n\nbool equals(double a, double b) { return fabs(a - b) < ESP; }\n\nclass Point {\npublic:\n    double x, y;\n\n    explicit Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (const Point &p) const { return Point(x + p.x, y + p.y); }\n    Point operator - (const Point &p) const { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(a / x, a / y); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < ESP && fabs(y - p.y) < ESP;\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1, Point p2): p1(p1), p2(p2) {}\n};\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector v1, Vector v2) {\n    return equals(cross(v1, v2), 0.0);\n}\n\nbool isOrthogonal(Vector v1, Vector v2) {\n    return equals(dot(v1, v2), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    return s.p1 + (base * (dot(base, p - s.p1) / base.norm()));\n}\n\nint main() {\n    int q;\n    double x, y, x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2 >> q;\n    Point p1 = Point(x1, y1), p2 = Point(x2, y2);\n    Segment s = Segment(p1, p2);\n    for(int i = 0; i < q; i++) {\n        cin >> x >> y;\n        Point p = Point(x, y);\n        Point x = project(s, p);\n        cout << setprecision(15) << x.x << \" \" << x.y << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <numeric>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\n#define mp       make_pair\n#define pb       push_back\n#define all(x)   (x).begin(),(x).end()\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define repi(i,a,b) for(int i = (a); i < (b); i++)\n\nusing namespace std;\n\nconst int INF=1<<29;\nconst double EPS=1e-9;\n\nconst int dx[]={1,0,-1,0},dy[]={0,-1,0,1};\n\ntypedef complex<double> point;\ntypedef vector<point> vertex;\n/*\nx 座標は p.real(), real(p), y 座標は p.imag(), imag(p) とする．\n足し算，引き算，スカラー倍は定義済み．\noperator < は入っていないので自分で namespace std に突っ込む．*/\nnamespace std{\n\tbool operator < (const point &lhs,const point &rhs){\n\t\tif(real(lhs) == real(rhs)){\n\t\t\treturn imag(lhs) < imag(rhs);\n\t\t}else{\n\t\t\treturn real(lhs) < real(rhs);\n\t\t}\n\t}\n}\n// 線分と点との距離\ndouble dist_linesegment_and_point(point a1,point a2,point b);\n\n\n\n// ベクタの長さ\ndouble vector_length(point a){\n\treturn abs(a);\n}\n\n// 二点間距離\ndouble point_distance(point a,point b){\n\treturn abs(a-b);\n}\n\n// 単位ベクトル\npoint unit_vector(point a){\n\treturn a / abs(a);\n}\n\n// 法線ベクトル\npair<point,point> normal_vector(point a){\n\tpoint n1 = a * point(0,1);\n\tpoint n2 = a * point(0,-1);\n\treturn make_pair(n1,n2);\n}\n\n// 点が一緒かどうか\nbool point_eq(point a,point b){\n\treturn abs(a-b) < EPS;\n}\n// 内積 (dot product) : a・b = |a||b|cosΘ\ndouble dot(point a,point b){\n\treturn real(conj(a)*b);\n}\n\n// 外積 (cross product) : |a×b| = |a||b|sinΘ\ndouble cross(point a,point b){\n\treturn imag(conj(a)*b);\n}\n//ラジアンに変換\ndouble radian(double angle){\n\treturn angle/180.0*M_PI;\n}\n//度数に変換\ndouble degree(double radian){\n\treturn radian*180.0/M_PI;\n}\n\n// a1,a2を端点とする線分(la)とb1,b2を端点(lb)とする線分の交差判定\nbool is_intersected_linesegment(point a1,point a2,point b1,point b2){\n\tif(max(a1.real(),a2.real()) + EPS < min(b1.real(),b2.real())) return false;\n\tif(max(b1.real(),b2.real()) + EPS < min(a1.real(),a2.real())) return false;\n\tif(max(a1.imag(),a2.imag()) + EPS < min(b1.imag(),b2.imag())) return false;\n\tif(max(b1.imag(),b2.imag()) + EPS < min(a1.imag(),a2.imag())) return false;\n\treturn (cross(a2-a1,b1-a1)*cross(a2-a1,b2-a1) < EPS) and\n\t(cross(b2-b1,a1-b1)*cross(b2-b1,a2-b1) < EPS);\n\n}\n\n\n// a1,a2を端点とする線分(la)とb1,b2を端点とする線分(lb)の交点計算\npoint intersection_point_linesegment(point a1,point a2,point b1,point b2) {\n\tif(a1 == b1 or a1 == b2) return a1;\n\tif(a2 == b1 or a2 == b2) return a2;\n\tpoint b = b2-b1;\n\tdouble d1 = abs(cross(b, a1-b1));\n\tdouble d2 = abs(cross(b, a2-b1));\n\tdouble t = d1 / (d1 + d2);\n\treturn a1 + (a2-a1) * t;\n}\n\n// 線分同士の最短距離\ndouble dist_linesegment_and_linesegment(point a1,point a2,point b1,point b2){\n\tif(is_intersected_linesegment(a1,a2,b1,b2)){\n\t\treturn 0;\n\t}\n\treturn min(min(dist_linesegment_and_point(a1,a2,b1),\n\t           dist_linesegment_and_point(a1,a2,b2)),\n\tmin(dist_linesegment_and_point(b1,b2,a1),\n\t    dist_linesegment_and_point(b1,b2,a2)));\n}\n\n\n// 2直線の直交判定 : a⊥b <=> dot(a, b) = 0\n// verify\nbool is_orthogonal(point a1,point a2,point b1,point b2) {\n\treturn abs(dot(a1-a2,b1-b2))< EPS;\n}\n\n// 2直線の平行判定 : a//b <=> cross(a, b) = 0\n//verify\nbool is_parallel(point a1,point a2,point b1,point b2) {\n\treturn abs(cross(a2-a1,b2-b1)) < EPS;\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交差判定\nbool is_intersected_line(point a1,point a2,point b1,point b2) {\n\treturn not is_parallel(a1,a2,b1,b2);\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算\npoint intersection_line(point a1,point a2,point b1,point b2) {\n\tpoint a = a2 - a1,b = b2 - b1;\n\treturn a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\n// 直線と点との距離\ndouble dist_line_and_point(point a1,point a2,point b){\n\treturn abs(cross(a2-a1,b-a1)) / abs(a2-a1);\n}\n\n// 線分と点との距離\ndouble dist_linesegment_and_point(point a1,point a2,point b){\n\tif(dot(a2-a1,b-a1) < EPS) return abs(b-a1);\n\tif(dot(a1-a2,b-a2) < EPS) return abs(b-a2);\n\treturn dist_line_and_point(a1,a2,b);\n}\n\n// 直線と点の最短距離を実現する直線の点(すいせんの足)(みけんしょう)\npoint nearest_point_line_and_point(point a1,point a2,point b){\n\treturn a1 + (a2-a1) * dot((a2-a1),(b-a1)) / norm(a2-a1);\n}\n\n// 線分と点の最短距離を実現する線分嬢の点(みけんしょう)\npoint nearest_point_linesegment_and_point(point a1,point a2,point b){\n\tif(dot(a2-a1,b-a1) < EPS) return a1;\n\tif(dot(a1-a2,b-a2) < EPS) return a2;\n\treturn nearest_point_line_and_point(a1,a2,b);\n}\n// 円と線分の交差判定\nbool is_cross_linesegment_and_circle(point c,double r,point a1,point a2){\n\treturn (dist_linesegment_and_point(a1,a2,c) < r+EPS and\n\t        (r < abs(c-a1) + EPS or r < abs(c-a2) + EPS));\n}\n\n//線の進行方向\nint ccw(point p0, point p1, point p2)\n{\n\tpoint a = p1 - p0;\n\tpoint b = p2 - p0;\n    if (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n    if (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n    if (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n    if (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n    return (0); //p0--p2--p1 の順で一直線上\n}\n\n// 点が真に多角形(凸?)の中にはいっているか\nbool is_inner_point_vertex(const vector<point> &ps,point a){\n\tint cc = ccw(ps[0],ps[1],a);\n\tif(not(cc == 1 or cc == -1)) return false;\n\tfor(size_t i=0;i<ps.size();i++){\n\t\tif(cc != ccw(ps[i],ps[(i+1)%ps.size()],a)) return false;\n\t}\n\treturn true;\n}\n\n// 点が辺上、もしくは内部にある。(未検証)\nbool is_inner_point_vertex_or_line(const vector<point> &ps,point a){\n\tfor(size_t i=0;i<ps.size();i++){\n\t\tif(dist_linesegment_and_point(ps[i],ps[(i+1)%ps.size()],a) < EPS){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn is_inner_point_vertex(ps,a);\n}\n\n\n// 凸包 (UVA 109)\nvector<point> convex_hull(vector<point> ps){\n\tint n = ps.size();\n\tint k = 0;\n\tsort(ps.begin(),ps.end());\n\tvector<point> ch(2*n);\n\tfor(int i=0;i<n;ch[k++] = ps[i++]){\n\t\twhile(k >= 2 and ccw(ch[k-2],ch[k-1],ps[i]) <= 0) --k;\n\t}\n\tfor(int i=n-2,t=k+1;i>=0;ch[k++]=ps[i--]){\n\t\twhile(k >= t and ccw(ch[k-2],ch[k-1],ps[i]) <= 0) --k;\n\t}\n\tch.resize(k-1);\n\treturn ch;\n}\n\n// remember,pts make convex.\n// (http://judge.u-aizu.ac.jp/onlinejudge/cdescription.jsp?cid=ACAC002&pid=C)\ndouble convex_diameter(const vector<point>& pts){\n\tconst int n = pts.size();\n    int is=0,js=0; // initial antipode.\n    for(int i=1;i<n;i++){\n    \tif(pts[i].imag() > pts[is].imag()) is = i;\n    \tif(pts[i].imag() < pts[js].imag()) js = i;\n    }\n    double maxd = abs(pts[is]-pts[js]);\n    int i,j,maxi,maxj;\n    i = maxi = is;\n    j = maxj = js;\n    do{\n    \tif(cross(pts[(i+1)%n]-pts[i],\n    \t   pts[(j+1)%n]-pts[j]) >= 0){\n    \t\tj = (j+1)%n;\n    }else{\n    \ti = (i+1)%n;\n    }\n    if(abs(pts[i]-pts[j]) > maxd){\n    \tmaxd = abs(pts[i]-pts[j]);\n    \tmaxi = i;maxj = j;\n    }\n} while(not(i == is and j == js));\n    // pts[maxi],pts[maxj] is pair of max diff.\nreturn maxd;\n}\n\n// 円と円の交点(2点ある前提)\nvector<point> circles_point(point c1,double r1,point c2,double r2){\n\tdouble d = abs(c1-c2);\n\tdouble s = (r1+r2+d) / 2;\n\tdouble S = sqrt(s*(s-r1)*(s-r2)*(s-d));\n\tdouble h = 2 * S / d;\n\tpoint v = (c2-c1) / (abs(c2-c1));\n\n\tdouble m = sqrt(r1*r1 - h*h);\n\n\tvector<point> ret;\n\tret.push_back(c1 + m*v+h*v*point(0,1));\n\tret.push_back(c1 + m*v-h*v*point(0,1));\n\treturn ret;\n}\n\n// clockwiseだと負\ndouble triangle_area(point a,point b,point c){\n\treturn cross(b-a,c-a)/2;\n}\n\n// clockwiseだと負\ndouble vertex_area(vector<point> v){\n\tdouble ret = 0;\n\tfor(int i=1;i<v.size()-1;i++){\n\t\tret += triangle_area(v[0],v[i],v[i+1]);\n\t}\n\treturn ret;\n}\n/*多角形の面積を求める*/\n//verify\ndouble area_vertex(const vertex& g){\n\tdouble S =0;\n\tfor(int i =0;i <g.size();i++){\n\t\tS +=(cross(g[i],g[(i+1)%g.size()]));\n\t}\n\treturn abs(S/2.0);\n}\n//円同士が互いに含まれているかどうか\n//中心が(xa,ya)で半径r1の円Aと、中心が(xb,yb) で半径 r2 の円 B が与えられたとき、 B が A の中にあるとき 2、A が B の中にあるとき -2、A の円周と B の円周が交わっている場合 1、A と B が重なっていないとき 0 \n//verify\nint Circles_Intersection(point a,double r1,point b,double r2){\n\tdouble dp =abs(a-b);//中心間の距離\n\tdouble dr =r1+r2;//円の半径の合計\n\tif(dp >dr){\n\t\treturn 0;\n\t}else if(dp +r1 <r2){\n\t\treturn -2;\n\t}else if(dp +r2 <r1){\n\t\treturn 2;\n\t}else if(dp <=dr){\n\t\treturn 1;\n\t}\n\treturn -100;\n}\npoint projection(point p1, point p2, point p3) //直線p1p2 上への写像\n{\n\tdouble t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n\treturn (p1 + (p2 - p1) * t);\n}\npoint reflection(point p1, point p2, point p3) //直線p1p2 上への反射\n{\n\n\treturn (p3 + 2.0*(projection(p1, p2, p3) - p3));\n}\n\n\nint main(){\n\tdouble x1,y1,x2,y2;\n\tcin>>x1>>y1>>x2>>y2;\n\tpoint p1(x1,y1),p2(x2,y2);\n\tint q;\n\tcin>>q;// 点の進行方向\n\tfor(int i =0;i <q;i++){\n\t\tdouble x3,y3;\n\t\tcin>>x3>>y3;\n\t\tpoint p3(x3,y3);\n\t\tpoint t = projection(p1, p2, p3);\n\t\tprintf(\"%.9f %.9f\\n\",t.real(),t.imag());\n\t\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\n//#define equals( a, b ) (fabs((a) - (b)) < DBL_E)\n\nclass Vector2 {\npublic:\n\tVector2(double x_, double y_) : x(x_), y(y_) {}\n\tVector2() : x(0), y(0) {}\n\tVector2 operator - (Vector2 other) {\n\t\tVector2 vec(x - other.GetX(), y - other.GetY());\n\t\treturn vec;\n\t}\n\tVector2 operator * (double other) {\n\t\treturn Vector2(other * x, other * y);\n\t}\n\n\tvoid SetVector2(double x_, double y_) {\n\t\tx = x_;\n\t\ty = y_;\n\t}\n\tdouble GetX() {\n\t\treturn x;\n\t}\n\tdouble GetY() {\n\t\treturn y;\n\t}\n\nprivate:\n\tdouble x, y;\n};\n\ndouble Dot(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetX() + vecA.GetY() * vecB.GetY();\n}\n\ndouble CrossY(Vector2 vecA, Vector2 vecB) {\n\treturn vecA.GetX() * vecB.GetY() - vecA.GetY() * vecB.GetX();\n}\n\ndouble Norm(Vector2 vec) {\n\treturn sqrtl(vec.GetX() * vec.GetX() + vec.GetY() * vec.GetY());\n}\n\nbool IsOrthogonal(Vector2 vecA, Vector2 vecB) {\n\tdouble ans = Dot(vecA, vecB);\n\t//\treturn equals(ans, 0.0);\n\t//\treturn (fabs(ans) < DBL_EPSILON);\n\tans = ans > 0 ? ans : -ans;\n\treturn (ans < 0.1f);\n}\n\nbool IsParallel(Vector2 vecA, Vector2 vecB) {\n\tdouble ans = CrossY(vecA, vecB);\n\t//\treturn (fabs(ans) < DBL_EPSILON);\n\tans = ans > 0 ? ans : -ans;\n\treturn (ans < 0.1f);\n}\n\nint main() {\n\tint query;\n\tVector2 vecs[2];\n\n\tfor (int i = 0; i < 2; i++) {\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvecs[i].SetVector2(x, y);\n\t}\n\tVector2 base = vecs[1] - vecs[0];\n\tbase.SetVector2(base.GetX() / Norm(base), base.GetY() / Norm(base));\n\n\tcin >> query;\n\n\tfor (int i = 0; i < query; i++) {\n\t\tVector2 vecAns;\n\t\tdouble x, y;\n\t\tcin >> x >> y;\n\t\tvecAns.SetVector2(x, y);\n\n\t\tVector2 ans = base * Dot(base, vecAns);\n\t\tcout << ans.GetX() << \" \" << ans.GetY() << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#pragma GCC optimize(\"Ofast\")\n#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define cinf(n,x) for(int i=0;i<(n);i++)cin>>x[i];\n#define ft first\n#define sc second\n#define pb push_back\n#define lb lower_bound\n#define ub upper_bound\n#define all(v) (v).begin(),(v).end()\n#define mod 1000000007\nusing namespace std;\ntypedef long long ll;\ntemplate<class T> using V=vector<T>;\nusing Graph = vector<vector<int>>;\nusing P=pair<ll,ll>;\ntypedef unsigned long long ull;\ntypedef long double ldouble;\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\n//V,P(大文字)使用不可\n//乗算の際にオーバーフローに注意せよ！！（適切にmodをとれ）\n//制約をよく読め！\n\nconst ll INF=1e18;\n\nsigned main(){\n    V<double> x(2),y(2);\n    rep(i,2) cin>>x[i]>>y[i];\n    int q;\n    cin>>q;\n    while(q--){\n        double a,b;\n        cin>>a>>b;\n        double t=((x[0]-x[1])*(x[0]-a)+(y[0]-y[1])*(y[0]-b))/(pow(x[1]-x[0],2)+pow(y[1]-y[0],2));\n        double xx=x[0]+t*(x[1]-x[0]);\n        double yy=y[0]+t*(y[1]-y[0]);\n        cout<<fixed<<setprecision(10)<<xx<<' '<<yy<<endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<bitset>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<functional>\n#include<limits>\n#include<list>\n#include<map>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<queue>\n#include<vector>\nusing namespace std;\n\n#define MOD 1000000007\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\n//0?¬?\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator/(double a) { return Point(x / a, y / a); }\n\tbool operator<(const Point &p)const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator==(const Point &p)const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n};\n\n//1?¬?\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point(1, 1)) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\n\n//2?¬?\nclass Circle {\npublic:\n\tPoint c; //center\n\tdouble r; //radius\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\n//??????\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n//??????\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n//??´?????????\nbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) { return isOrthogonal(a1 - a2, b1 - b2); }\nbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//????????????\nbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\nbool isParallel(Point a1, Point a2, Point b1, Point b2) { return isParallel(a1 - a2, b1 - b2); }\nbool isParallel(Segment s1, Segment s2) { return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\n//?°???±\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n//????°?\nPoint reflect(Segment s, Point p) { return p + (project(s, p) - p)*2.0; }\n\n//??????(p0,p1)????????????p2???????????¢???\nenum { ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK };\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0, b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS)return CLOCKWISE;\n\tif (dot(a, b) < -EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n//?????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n//???????????????\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble a1 = abs(cross(base, s1.p1 - s2.p1)); //area1\n\tdouble a2 = abs(cross(base, s1.p2 - s2.p1)); //area2\n\tdouble t = a1 / (a1 + a2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\n//2??????????????¢\ndouble getDistance(Point a, Point b) { return (a - b).abs(); }\n//??´?????¨???????????¢\ndouble getDistanceLP(Line l, Point p) { return abs(cross(l.p2 - l.p1, p - l.p1) / (l.p2 - l.p1).abs()); }\n//????????¨???????????¢\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n//????????¨??????????????¢\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn\tmin(\n\t\tmin(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s1, s1.p1), getDistanceSP(s1, s1.p2))\n\t);\n}\n\nint main() {\n\tPoint p1, p2;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tSegment s; s.p1 = p1; s.p2 = p2;\n\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tPoint p; scanf(\"%lf%lf\", &p.x, &p.y);\n\t\tPoint x = project(s, p);\n\t\tprintf(\"%.10lf %.10lf\\n\", x.x, x.y);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\nusing namespace std;\ntypedef complex<double> Point;\n\nPoint Prj(Point z1, Point z2, Point z3) {\n    Point z = (z3 - z1) / (z2 - z1);\n    return (z2 - z1) * z.real() + z1;\n}\n\nint main() {\n    int n;\n    double x1, y1, x2, y2, x3, y3;\n    cin >> x1 >> y1 >> x2 >> y2 >> n;\n    Point z1(x1, y1), z2(x2, y2);\n    while (n--)\n    {\n        cin >> x3 >> y3;\n        Point z3(x3, y3);\n        Point p = Prj(z1, z2, z3);\n        printf(\"%.10lf %.10lf\\n\", p.real(), p.imag());\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "//include\n//------------------------------------------\n#include <vector>\n#include <list>\n#include <map>\n#include <climits>\n#include <set>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <queue>\n#include <random>\n#include <cctype>\n#include <complex>\n\nusing namespace std;\n\n//typedef\n//------------------------------------------\ntypedef long long LL;\ntypedef vector<int> VI;\ntypedef vector<bool> VB;\ntypedef vector<char> VC;\ntypedef vector<double> VD;\ntypedef vector<string> VS;\ntypedef vector<LL> VLL;\ntypedef vector<VI> VVI;\ntypedef vector<VB> VVB;\ntypedef vector<VS> VVS;\ntypedef vector<VLL> VVLL;\ntypedef vector<VVI> VVVI;\ntypedef vector<VVLL> VVVLL;\ntypedef pair<int, int> PII;\ntypedef pair<LL, LL> PLL;\ntypedef pair<int, string> PIS;\ntypedef pair<string, int> PSI;\ntypedef pair<string, string> PSS;\n\n\n//数値・文字列\n//------------------------------------------\ninline int toInt(string s) {\n    int v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\n\ninline LL toLongLong(string s) {\n    LL v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\n\ntemplate<class T>\ninline string toString(T x) {\n    ostringstream sout;\n    sout << x;\n    return sout.str();\n}\n\ninline VC toVC(string s) {\n    VC data(s.begin(), s.end());\n    return data;\n}\n\ntemplate<typename List>\nvoid SPRIT(const std::string &s, const std::string &delim, List &result) {\n    result.clear();\n    string::size_type pos = 0;\n    while (pos != string::npos) {\n        string::size_type p = s.find(delim, pos);\n        if (p == string::npos) {\n            result.push_back(s.substr(pos));\n            break;\n        } else {\n            result.push_back(s.substr(pos, p - pos));\n        }\n        pos = p + delim.size();\n    }\n}\n\nstring TRIM(const string &str, const char *trimCharacterList = \" \\t\\v\\r\\n\") {\n    string result;\n    string::size_type left = str.find_first_not_of(trimCharacterList);\n    if (left != string::npos) {\n        string::size_type right = str.find_last_not_of(trimCharacterList);\n        result = str.substr(left, right - left + 1);\n    }\n    return result;\n}\n\ntemplate<typename T>\nbool VECTOR_EXISTS(vector<T> vec, T data) {\n    auto itr = std::find(vec.begin(), vec.end(), data);\n    size_t index = distance(vec.begin(), itr);\n    if (index != vec.size()) {\n        return true;\n    } else {\n        return 0;\n    }\n}\n\n#define UPPER(s) transform((s).begin(), (s).end(), (s).begin(), ::toupper)\n#define LOWER(s) transform((s).begin(), (s).end(), (s).begin(), ::tolower)\n\n\n\n//四捨五入 nLen=小数点第N位にする\n//------------------------------------------\n\n//切り上げ\ndouble ceil_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut + 0.9);\n    return dOut * pow(10.0, -nLen);\n}\n\n//切り捨て\ndouble floor_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut);\n    return dOut * pow(10.0, -nLen);\n}\n\n//四捨五入\ndouble round_n(double dIn, int nLen) {\n    double dOut;\n    dOut = dIn * pow(10.0, nLen);\n    dOut = (double) (int) (dOut + 0.5);\n    return dOut * pow(10.0, -nLen);\n}\n\n//n桁目の数の取得\nint take_a_n(int num, int n) {\n    string str = toString(num);\n    return str[str.length() - n] - '0';\n}\n\n\n//進数\n//------------------------------------------\n\n//\"1111011\" → 123\nint strbase_2to10(const std::string &s) {\n    int out = 0;\n    for (int i = 0, size = s.size(); i < size; ++i) {\n        out *= 2;\n        out += ((int) s[i] == 49) ? 1 : 0;\n    }\n    return out;\n}\n\n//\"123\" → 1111011\nint strbase_10to2(const std::string &s) {\n    int binary = toInt(s);\n    int out = 0;\n    for (int i = 0; binary > 0; i++) {\n        out = out + (binary % 2) * pow(static_cast<int>(10), i);\n        binary = binary / 2;\n    }\n    return out;\n}\n\n//\"ABC\" 2748\nint strbase_16to10(const std::string &s) {\n    int out = stoi(s, 0, 16);\n    return out;\n}\n\n//1111011 → 123\nint intbase_2to10(int in) {\n    string str = toString(in);\n    return strbase_2to10(str);\n}\n\n//123 → 1111011\nint intbase_10to2(int in) {\n    string str = toString(in);\n    return strbase_10to2(str);\n}\n\nint intbase_16to10(int in) {\n    string str = toString(in);\n    return strbase_16to10(str);\n}\n\n//123→ \"7B\"\nstring intbase_10to16(unsigned int val, bool lower = true) {\n    if (!val)\n        return std::string(\"0\");\n    std::string str;\n    const char hc = lower ? 'a' : 'A';     // 小文字 or 大文字表記\n    while (val != 0) {\n        int d = val & 15;     // 16進数一桁を取得\n        if (d < 10)\n            str.insert(str.begin(), d + '0');  //  10未満の場合\n        else //  10以上の場合\n            str.insert(str.begin(), d - 10 + hc);\n        val >>= 4;\n    }\n    return str;\n}\n\n//整数を2進数表記したときの1の個数を返す\nLL bitcount64(LL bits) {\n    bits = (bits & 0x5555555555555555) + (bits >> 1 & 0x5555555555555555);\n    bits = (bits & 0x3333333333333333) + (bits >> 2 & 0x3333333333333333);\n    bits = (bits & 0x0f0f0f0f0f0f0f0f) + (bits >> 4 & 0x0f0f0f0f0f0f0f0f);\n    bits = (bits & 0x00ff00ff00ff00ff) + (bits >> 8 & 0x00ff00ff00ff00ff);\n    bits = (bits & 0x0000ffff0000ffff) + (bits >> 16 & 0x0000ffff0000ffff);\n    return (bits & 0x00000000ffffffff) + (bits >> 32 & 0x00000000ffffffff);\n}\n\n\n\n//comparison\n//------------------------------------------\n#define C_MAX(a, b) ((a)>(b)?(a):(b))\n#define C_MIN(a, b) ((a)<(b)?(a):(b))\n#define C_ABS(a, b) ((a)<(b)?(b)-(a):(a)-(b))\n\n\n\n//container util\n//------------------------------------------\n#define ALL(a)  (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define SZ(a) int((a).size())\n#define EACH(i, c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)\n#define EXIST(s, e) ((s).find(e)!=(s).end())\n#define COUNT(obj, v) count((obj).begin(), (obj).end(), v)\n#define SEARCH(v, w) search((v).begin(), (v).end(), (w).begin(), (w).end())\n#define B_SEARCH(obj, v) binary_search((obj).begin(), (obj).end(), v)\n#define SORT(c) sort((c).begin(),(c).end())\n#define RSORT(c) sort((c).rbegin(),(c).rend())\n#define REVERSE(c) reverse((c).begin(), (c).end())\n#define SUMI(obj) accumulate((obj).begin(), (obj).end(), 0)\n#define SUMD(obj) accumulate((obj).begin(), (obj).end(), 0.)\n#define SUMLL(obj) accumulate((obj).begin(), (obj).end(), 0LL)\n#define SUMS(obj) accumulate((obj).begin(), (obj).end(), string())\n#define UB(obj, n) upper_bound((obj).begin(), (obj).end(), n)\n#define LB(obj, n) lower_bound((obj).begin(), (obj).end(), n)\n#define PB push_back\n#define MP make_pair\n\n\n\n\n//input output\n//------------------------------------------\n#define GL(s) getline(cin, (s))\n#define INIT std::ios::sync_with_stdio(false);std::cin.tie(0);\n#define OUT(d) std::cout<<(d);\n#define OUT_L(d) std::cout<<(d)<<endl;\n#define FOUT(n, data) std::cout<<std::fixed<<std::setprecision(n)<<(data);\n#define FOUT_L(n, data) std::cout<<std::fixed<<std::setprecision(n)<<(data)<<\"\\n\";\n#define EL() std::cout << \"\\n\";\n#define SHOW_VECTOR(v) {std::cerr << #v << \"\\t:\";for(const auto& xxx : v){std::cerr << xxx << \" \";}std::cerr << \"\\n\";}\n#define SHOW_MAP(v) {std::cerr << #v << endl; for(const auto& xxx: v){std::cerr << xxx.first << \" \" << xxx.second << \"\\n\";}}\n\ntemplate<typename T>\nstd::istream &operator>>(std::istream &is, std::vector<T> &vec) {\n    for (T &x : vec) is >> x;\n    return is;\n}\n\ntemplate<typename T>\nstd::ostream &operator<<(std::ostream &os, const std::vector<T> &vec) {\n    for (const T &x : vec) os << x << \" \";\n    return os;\n}\n\n\n//repetition\n//------------------------------------------\n#define FOR(i, a, b) for(int i=(a);i<(b);++i)\n#define RFOR(i, a, b) for(int i=(b)-1;i>=(a);--i)\n#define REP(i, n)  FOR(i,0,n)\n#define RREP(i, n) for(int i = n-1;i >= 0;i--)\n#define FORLL(i, a, b) for(LL i=LL(a);i<LL(b);++i)\n#define RFORLL(i, a, b) for(LL i=LL(b)-1;i>=LL(a);--i)\n#define REPLL(i, n) for(LL i=0;i<LL(n);++i)\n#define RREPLL(i, n) for(LL i=LL(n)-1;i>=0;--i)\n#define FOREACH(x, v) for(auto &(x) : (v))\n#define FORITER(x, v) for(auto (x) = (v).begin(); (x) != (v).end(); ++(x))\n\n\n//constant\n//--------------------------------------------\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\nconst int MOD = 1000000007;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\n\n\n//math\n//--------------------------------------------\n\n//min <= aim <= max\ntemplate<typename T>\ninline bool BETWEEN(const T aim, const T min, const T max) {\n    if (min <= aim && aim <= max) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\ntemplate<class T>\ninline T SQR(const T x) { return x * x; }\n\ntemplate<class T1, class T2>\ninline T1 POW(const T1 x, const T2 y) {\n    if (!y)return 1;\n    else if ((y & 1) == 0) {\n        return SQR(POW(x, y >> 1));\n    } else return POW(x, y ^ 1) * x;\n}\n\n\ntemplate<typename T>\nconstexpr T ABS(T x) {\n    return x < 0 ? -x : x;\n}\n\n//partial_permutation nPr 順列\n//first・・最初の数\n//middle・・r(取り出す数)\n//last・・n(全体数)\ntemplate<class BidirectionalIterator>\nbool next_partial_permutation(BidirectionalIterator first, BidirectionalIterator middle, BidirectionalIterator last) {\n    reverse(middle, last);\n    return next_permutation(first, last);\n}\n\n//combination nCr 組み合わせ\n//first1・・最初の数\n//last1==first2・・r(取り出す数)\n//last2・・n(全体数)\ntemplate<class BidirectionalIterator>\nbool next_combination(BidirectionalIterator first1, BidirectionalIterator last1, BidirectionalIterator first2,\n                      BidirectionalIterator last2) {\n    if ((first1 == last1) || (first2 == last2)) {\n        return false;\n    }\n    BidirectionalIterator m1 = last1;\n    BidirectionalIterator m2 = last2;\n    --m2;\n    while (--m1 != first1 && !(*m1 < *m2)) {\n    }\n    bool result = (m1 == first1) && !(*first1 < *m2);\n    if (!result) {\n        while (first2 != m2 && !(*m1 < *first2)) {\n            ++first2;\n        }\n        first1 = m1;\n        std::iter_swap(first1, first2);\n        ++first1;\n        ++first2;\n    }\n    if ((first1 != last1) && (first2 != last2)) {\n        m1 = last1;\n        m2 = first2;\n        while ((m1 != first1) && (m2 != last2)) {\n            std::iter_swap(--m1, m2);\n            ++m2;\n        }\n        std::reverse(first1, m1);\n        std::reverse(first1, last1);\n        std::reverse(m2, last2);\n        std::reverse(first2, last2);\n    }\n    return !result;\n}\n\n\n\n\n//numeric_law\n//--------------------------------------------\n\ntemplate<typename T>\nconstexpr bool ODD(T x) {\n    return x % 2 != 0;\n}\n\ntemplate<typename T>\nconstexpr bool EVEN(T x) {\n    return x % 2 == 0;\n}\n\n//最大公約数\ntemplate<class T>\ninline T GCD(const T x, const T y) {\n    if (x < 0)return GCD(-x, y);\n    if (y < 0)return GCD(x, -y);\n    return (!y) ? x : GCD(y, x % y);\n}\n\n//最小公倍数\ntemplate<class T>\ninline T LCM(const T x, const T y) {\n    if (x < 0)return LCM(-x, y);\n    if (y < 0)return LCM(x, -y);\n    return x * (y / GCD(x, y));\n}\n\n//ax + by = 1\n//x,yが変数に格納される\ntemplate<class T>\ninline T EXTGCD(const T a, const T b, T &x, T &y) {\n    if (a < 0) {\n        T d = EXTGCD(-a, b, x, y);\n        x = -x;\n        return d;\n    }\n    if (b < 0) {\n        T d = EXTGCD(a, -b, x, y);\n        y = -y;\n        return d;\n    }\n    if (!b) {\n        x = 1;\n        y = 0;\n        return a;\n    } else {\n        T d = EXTGCD(b, a % b, x, y);\n        T t = x;\n        x = y;\n        y = t - (a / b) * y;\n        return d;\n    }\n}\n\n//素数\ntemplate<class T>\ninline bool ISPRIME(const T x) {\n    if (x <= 1)return false;\n    for (T i = 2; SQR(i) <= x; i++)if (x % i == 0)return false;\n    return true;\n}\n\n//素数をtrueとして返す\ntemplate<class T>\nVB ERATOSTHENES(const T n) {\n    VB arr(n, true);\n    for (int i = 2; SQR(i) < n; i++) {\n        if (arr[i]) {\n            for (int j = 0; i * (j + 2) < n; j++) {\n                arr[i * (j + 2)] = false;\n            }\n        }\n    }\n    return arr;\n}\n\n// a <= x < b の素数を返す\ntemplate<typename T>\nVB ERATOSTHENES(const T a, const T b) {\n    VB small = ERATOSTHENES(b);\n    VB prime(b - a, true);\n\n    for (int i = 2; (T) (SQR(i)) < b; i++) {\n        if (small[i]) {\n            for (T j = max(2, (a + i - 1) / i) * i; j < b; j += i) {\n                prime[j - a] = false;\n            }\n        }\n    }\n\n    return prime;\n}\n\n//約数\ntemplate<class T>\nvector<T> DIVISOR(T n) {\n    vector<T> v;\n    for (int i = 1; i * i <= n; ++i) {\n        if (n % i == 0) {\n            v.push_back(i);\n            if (i != n / i) {\n                v.push_back(n / i);\n            }\n        }\n    }\n    sort(v.begin(), v.end());\n    return v;\n}\n\n//組み合わせ個数\ntemplate<typename T>\nT NCR(T n, T r) {\n    T ans = 1;\n    REPLL(i, r) {\n        ans = ans * (n - i) / (i + 1);\n    }\n    return ans;\n}\n\n//行列\nint MATRIZ_CHAIN(VI &p, VVI &s) {\n    const static int INF = 1 << 20;\n    const int n = p.size() - 1;\n    VVI X(n, VI(n, INF));\n    s.resize(n, VI(n));\n    for (int i = 0; i < n; ++i) X[i][i] = 0;\n    for (int w = 1; w < n; ++w)\n        for (int i = 0, j; j = i + w, j < n; ++i)\n            for (int k = i; k < j; ++k) {\n                int f = p[i] * p[k + 1] * p[j + 1];\n                if (X[i][k] + X[k + 1][j] + f < X[i][j]) {\n                    X[i][j] = X[i][k] + X[k + 1][j] + f;\n                    s[i][j] = k;\n                }\n            }\n    return X[0][n - 1];\n}\n\n//最長増加部分列\nVI LIS(const VI &a) {\n    const static int INF = 99999999;\n    const int n = a.size();\n    VI A(n, INF);\n    VI id(n);\n    for (int i = 0; i < n; ++i) {\n        id[i] = distance(A.begin(), lower_bound(A.begin(), A.end(), a[i]));\n        A[id[i]] = a[i];\n    }\n    int m = *max_element(id.begin(), id.end());\n    VI b(m + 1);\n    for (int i = n - 1; i >= 0; --i)\n        if (id[i] == m) b[m--] = a[i];\n    return b;\n}\n\n//最長共通部分列 string->toVC\ntemplate<typename T>\nvector<T> LCS(const vector<T> &a, const vector<T> &b) {\n    const int n = a.size(), m = b.size();\n    vector<VI> X(n + 1, VI(m + 1));\n    vector<VI> Y(n + 1, VI(m + 1));\n    REP(i, n) {\n        REP(j, m) {\n            if (a[i] == b[j]) {\n                X[i + 1][j + 1] = X[i][j] + 1;\n                Y[i + 1][j + 1] = 0;\n            } else if (X[i + 1][j] < X[i][j + 1]) {\n                X[i + 1][j + 1] = X[i][j + 1];\n                Y[i + 1][j + 1] = +1;\n            } else {\n                X[i + 1][j + 1] = X[i + 1][j];\n                Y[i + 1][j + 1] = -1;\n            }\n        }\n    }\n    vector<T> c;\n    for (int i = n, j = m; i > 0 && j > 0;) {\n        if (Y[i][j] > 0) --i;\n        else if (Y[i][j] < 0) --j;\n        else {\n            c.PB(a[i - 1]);\n            --i;\n            --j;\n        }\n    }\n    REVERSE(c);\n    return c;\n}\n\n//コイン C総額 cs使用できるコインの種類\nVI money_change(int C, VI &cs) {\n    const int INF = 99999999;\n    int n = cs.size();\n    VI xs(C + 1, INF);\n    VI ys(C + 1);\n    xs[0] = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int c = 0; c + cs[i] <= C; ++c) {\n            if (xs[c + cs[i]] > xs[c] + 1) {\n                xs[c + cs[i]] = xs[c] + 1;\n                ys[c + cs[i]] = c;\n            }\n        }\n    }\n    VI zs;\n    for (int c = C; c > 0; c = ys[c]) {\n        zs.push_back(c - ys[c]);\n    }\n    return zs;\n}\n\n\n\n//confirmation\n//--------------------------------------------\n\n//clear memory\n#define CLR(arr, d) memset((arr), (d),sizeof(arr))\n\n//debug\n#define dump(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\n\n\n//平面幾何\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n//--------------------------------------------\n\n//宣言\n//--------------------------------------------\n\n//long double or double\ntypedef double Real;\n\n//ポイントクラス\ntypedef complex<Real> Point;\n\n//線分クラス\ntypedef pair<Point, Point> Line;\n\n//円\ntypedef pair<Point, Real> Circle;\n\n//ポリゴン\ntypedef vector<Point> Poly;\n\n\n//x座標優先で比較する\nnamespace std {\n    bool operator<(const Point &a, const Point &b) {\n        return real(a) == real(b) ? imag(a) < imag(b) : real(a) < real(b);\n    }\n}\n\n\n//doubleの誤差\n#define EPS (1e-10)\n//double同士の比較\n#define EQ(a, b) (abs((a)-(b)) < EPS)\n//Pointの比較\n#define EQP(a, b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n\n\n//角度\n//--------------------------------------------\nReal toRadian(double degree) {\n    return degree * PI / 180.0;\n}\n\nReal toDegree(double radian) {\n    return radian * 180.0 / PI;\n}\n\n\n\n\n\n\n\n//内積・外積・単位・法線\n//--------------------------------------------\n\n//ベクトルpの向きの単位ベクトルを返す\nPoint unit_vector(Point p) {\n    return p / abs(p);\n}\n\n\n//pの法線ベクトルを両方返す\npair<Point, Point> norm_vectors(Point p) {\n    return make_pair(p * Point(0, 1), p * Point(0, -1));\n}\n\n//ベクトルを反時計に回す sはラジアン\nPoint rotate_vector(Point v, double s) {\n    return Point(v.real() * cos(s) - v.imag() * sin(s), v.real() * sin(s) + v.imag() * cos(s));\n}\n\n//内積 a・b = |a||b|cosθ\ninline double dot(const Point &a, const Point &b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n//外積 a×b = |a||b|sinθ\ninline double cross(const Point &a, const Point &b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n//凸包\nvector<Point> convex_hull(vector<Point> v) {\n    int n = v.size(), k = 0;\n    sort(v.begin(), v.end());\n    vector<Point> r(2 * n);\n    for (int i = 0; i < n; i++) {\n        while (k > 1 && cross(r[k - 1] - r[k - 2], v[i] - r[k - 1]) <= EPS) k--;\n        r[k++] = v[i];\n    }\n    for (int i = n - 2, t = k; i >= 0; i--) {\n        while (k > t && cross(r[k - 1] - r[k - 2], v[i] - r[k - 1]) <= EPS) k--;\n        r[k++] = v[i];\n    }\n    r.resize(k - 1);\n    return r;\n}\n\n\n//三角形　角度・面積\n//--------------------------------------------\n//3点a, b, cのおける、角bacを返す\nReal args_bac(Point a, Point b, Point c) {\n    return acos(dot(b - a, c - a) / (abs(b - a) * abs(c - a)));\n}\n\n//各辺の長さがa, b, cの三角形の、aの対角の角度を返す\nReal args_bac(Real a, Real b, Real c) {\n    return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n//三角形の面積\nReal heron_area(Real a, Real b, Real c) {\n    Real s = (a + b + c) / 2;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}\n\n//三角形の重心\nPoint centerOfGravity(Point a, Point b, Point c) {\n    return Point((a.real() + b.real() + c.real()) / 3.0, (a.imag() + b.imag() + c.imag()) / 3.0);\n}\n\n//三角形の外接円の半径\nReal circumScribedCircleRadius(Point a, Point b, Point c) {\n    Real edgeA = abs(b - c);\n    Real angleA = args_bac(a, b, c);\n    return (edgeA / sin(angleA) / 2.0);\n}\n\n//三角形の外接円の中心座標　外心\nPoint circumScribedCircleXY(Point a, Point b, Point c) {\n    Real angleA = args_bac(a, b, c);\n    Real angleB = args_bac(b, a, c);\n    Real angleC = args_bac(c, a, b);\n    Real A = sin(2.0 * angleA);\n    Real B = sin(2.0 * angleB);\n    Real C = sin(2.0 * angleC);\n    Point point((a.real() * A + b.real() * B + c.real() * C) / (A + B + C),\n                (a.imag() * A + b.imag() * B + c.imag() * C) / (A + B + C));\n    return point;\n}\n\n//三角形が点Pを含むか\nbool point_in_triangle(Point a, Point b, Point c, Point p) {\n    Point ab = b - a;\n    Point bp = p - b;\n\n    Point bc = c - b;\n    Point cp = p - c;\n\n    Point ca = a - c;\n    Point ap = p - a;\n\n    Real c1 = cross(ab, bp);\n    Real c2 = cross(bc, cp);\n    Real c3 = cross(ca, ap);\n\n    //内側\n    if ((c1 > 0 && c2 > 0 && c3 > 0) || (c1 < 0 && c2 < 0 && c3 < 0)) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\n\n//直線・線分\n//--------------------------------------------\n\n//頂点a, b, cの位置関係判定\nint points_relation(Point a, Point b, Point c) {\n    b -= a;\n    c -= a;\n    if (cross(b, c) > EPS) return 1; //counter-clockwise\n    if (cross(b, c) < -EPS) return -1; //clockwise\n    if (dot(b, c) < -EPS) return 2; //c--a--b on line\n    if (abs(b) < abs(c)) return -2; //a--b--c on line\n    return 0; //on segment\n}\n\n//2直線の直行判定 Point版\nbool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return EQ(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n//2直線の直行判定 Line版\nbool is_orthogonal(Line line1, Line line2) {\n    return EQ(dot(line1.first - line1.second, line2.first - line2.second), 0.0);\n}\n\n//2直線の平行判定 Point版\nbool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n    return EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n//2直線の平行判定 Line版\nbool is_parallel(Line line1, Line line2) {\n    return EQ(cross(line1.first - line1.second, line2.first - line2.second), 0.0);\n}\n\n//点cが**直線**a-b上にあるか\nbool is_point_on_long_line(Point a, Point b, Point c) {\n    return EQ(cross(b - a, c - a), 0.0);\n}\n\n//点cが**線分**a-b上にあるか\nbool is_point_on_line(Point a, Point b, Point c) {\n    return (abs(a - c) + abs(c - b) < abs(a - b) + EPS);\n}\n\n//点a, bを通る**直線**と,点cとの距離d\ndouble distance_longline_point(Point a, Point b, Point c) {\n    return abs(cross(b - a, c - a)) / abs(b - a);\n}\n\n//直線と点との距離　円用\nReal line_dis(Line a, Point x) {\n    return abs(cross(a.second - a.first, x - a.first)) / abs(a.second - a.first);\n}\n\n//点a, bを端点とする**線分**と、点cとの距離d\ndouble distance_line_point(Point a, Point b, Point c) {\n    if (dot(b - a, c - a) < EPS) return abs(c - a);\n    if (dot(a - b, c - b) < EPS) return abs(c - b);\n    return abs(cross(b - a, c - a)) / abs(b - a);\n}\n\n//点a1, a2を端点とする線分と、点b1, b2を端点とする線分の交差判定\nbool is_intersected_lines(Point a1, Point a2, Point b1, Point b2) {\n    return (cross(a2 - a1, b1 - a1) * cross(a2 - a1, b2 - a1) < EPS) &&\n           (cross(b2 - b1, a1 - b1) * cross(b2 - b1, a2 - b1) < EPS);\n}\n\n//点a1, a2を端点とする線分と、点b1, b2を端点とする線分の交点\nPoint intersection_lines_point(Point a1, Point a2, Point b1, Point b2) {\n    Point b = b2 - b1;\n    double d1 = abs(cross(b, a1 - b1));\n    double d2 = abs(cross(b, a2 - b1));\n    double t = d1 / (d1 + d2);\n    return a1 + (a2 - a1) * Point(t, 0);\n}\n\n//点a1, a2を通る直線と点b1, b2を通る直線の交点計算\nPoint intersection_longlines_point(Point a1, Point a2, Point b1, Point b2) {\n    Point a = a2 - a1;\n    Point b = b2 - b1;\n    return a1 + a * Point(cross(b, b1 - a1), 0) / Point(cross(b, a), 0);\n}\n\n\n//直線a-bに点pから垂線をおろしたときの交点\nPoint projection_point(Point a, Point b, Point p) {\n    Real t = dot(p - a, a - b) / (abs(a - b) * abs(a - b));\n    return a + (a - b) * t;\n}\n\n//点pを線対称移動させる\nPoint reflection_point(Point a, Point b, Point p) {\n    return p + (projection_point(a, b, p) - p) * (Real) 2.0;\n}\n\n\n\n\n//多角形\n//--------------------------------------------\n\n//面積を返す 反時計回りに整列させておく\nReal poly_area(Poly p) {\n    if (p.size() < 3)return 0;\n    Real res = cross(p[p.size() - 1], p[0]);\n    for (int i = 1; i < p.size(); i++) {\n        res += cross(p[i - 1], p[i]);\n    }\n    return res / 2;\n}\n\n//最遠点対　凸多角形で最も長い距離を返す\n//凸包の後に使うとよい\nReal longest_points_distance(Poly p) {\n    int n = p.size();\n    if (n == 2) {\n        return abs(p[0] - p[1]);\n    }\n\n    int i = 0, j = 0;\n    for (int k = 0; k < n; k++) {\n        if (!(p[i] < p[k])) i = k;\n        if (p[j] < p[k]) j = k;\n    }\n\n    Real res = 0;\n    int si = i, sj = j;\n    while (i != sj || j != si) {\n        res = max(res, abs(p[i] - p[j]));\n        if (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) < 0) i = (i + 1) % n;\n        else j = (j + 1) % n;\n    }\n\n    return res;\n}\n\n\n\n\n\n//円 第一引数は中点　第二引数は半径\n//--------------------------------------------\n\n//円の面積\nReal circle_area(Circle c) {\n    return PI * c.second * c.second;\n}\n\n//円の中に点xが内部にあるか\nbool circle_in_x(Circle c, Point x) {\n    return (abs(x - c.first) + EPS < c.second);\n}\n\n//円状に点xがあるか\nbool circle_on_x(Circle c, Point x) {\n    return EQ(abs(x - c.first), c.second);\n}\n\n//2つの円a, bの関係\nint circle_relation(Circle a, Circle b) {\n    double d = abs(a.first - b.first);\n\n    if (a.second + b.second + EPS < d) return -1; //no cross point outside\n    if (b.second + d + EPS < a.second) return 1; //no cross point(inside B in A)\n    if (a.second + d + EPS < b.second) return 2; //no cross point(inside A in B)\n\n    if (abs(a.second + b.second - d) < EPS) return -3; //one cross point(outside)\n    if (abs(b.second + d - a.second) < EPS) return 3; //one cross point(inside B in A)\n    if (abs(a.second + d - b.second) < EPS) return 4; //one cross point(inside A in B)\n\n    return 0; //two cross point\n}\n\n//2円a, bの共通面積\nReal intersection_area(Circle a, Circle b) {\n    Real d = abs(a.first - b.first);\n\n    if (a.second + b.second < d + EPS) return 0;\n\n    //円aを半径が大きい方にする\n    if (a.second < b.second) swap(a, b);\n\n    //円bが円aに入ってたら\n    if (b.second + d < a.second + EPS || b.second < EPS) return circle_area(b);\n\n    Real t1 = args_bac(b.second, a.second, d);\n    Real t2 = args_bac(a.second, b.second, d);\n    Real tri = (a.second * a.second * sin(t1 * 2) + b.second * b.second * sin(t2 * 2)) / 2.0;\n    return a.second * a.second * t1 + b.second * b.second * t2 - tri;\n}\n\n//2つの円の交点を返す\nvector<Point> circle_inter_points(Circle a, Circle b) {\n    vector<Point> v;\n    int pos = circle_relation(a, b);\n    if (pos == 0) {\n        Real s = args_bac(b.second, abs(b.first - a.first), a.second);\n        Point x = a.second * unit_vector(b.first - a.first);\n        v.push_back(a.first + rotate_vector(x, s));\n        v.push_back(a.first + rotate_vector(x, -s));\n    } else if (abs(pos) >= 3) {\n        v.push_back(a.first + a.second * unit_vector(b.first - a.first));\n    }\n    return v;\n}\n\n//円と直線の交点\nvector<Point> circle_inter_line_points(Circle a, Line l) {\n    vector<Point> v;\n    Real d = line_dis(l, a.first);\n    if (d < a.second + EPS) {\n        Point x = a.second * unit_vector(l.second - l.first);\n        if (points_relation(l.first, l.second, a.first) == 1) x = a.first + x * Point(0, -1);\n        else x = a.first + x * Point(0, 1);\n        if (d + EPS < a.second) {\n            Real y = sqrt(a.second * a.second - d * d);\n            if (d == 0) d += EPS;\n            Real s = args_bac(y, d, a.second);\n            v.push_back(rotate_vector(x, s));\n            v.push_back(rotate_vector(x, -s));\n        } else if (EQ(d, a.second)) {\n            v.push_back(x);\n        }\n    }\n    return v;\n}\n\n//点pを通る円cの接線\nvector<Line> adjust_line(Circle c, Point p) {\n    vector<Line> res;\n    if (circle_in_x(c, p)) return res;\n    if (circle_on_x(c, p)) {\n        pair<Point, Point> n = norm_vectors(c.first - p);\n        res.push_back(Line(n.first + p, p));\n        return res;\n    }\n    Real x = c.second, z = abs(c.first - p);\n    Real y = sqrt(z * z - x * x);\n    Real s = args_bac(y, x, z);\n    Point v = unit_vector(p - c.first) * c.second;\n\n    res.push_back(Line(rotate_vector(v, s) + c.first, p));\n    res.push_back(Line(rotate_vector(v, -s) + c.first, p));\n    return res;\n}\n\n//円の共通接線を求める\nvector<Line> common_adjust_line(Circle a, Circle b) {\n    vector<Line> res;\n    if (a.second + EPS < b.second) return common_adjust_line(b, a);\n    if (EQ(a.first.real(), b.first.real()) && EQ(a.first.imag(), b.first.imag()) && EQ(a.second, b.second)) return res;\n\n    Point pos = (b.first - a.first) * a.second / (a.second + b.second) + a.first;\n    if (!circle_in_x(a, pos)) res = adjust_line(a, pos);\n\n    if (EQ(a.second, b.second)) {\n        pair<Point, Point> n = norm_vectors(unit_vector(b.first - a.first) * a.second);\n        res.push_back(Line(a.first + n.first, b.first + n.first));\n        res.push_back(Line(a.first + n.second, b.first + n.second));\n    } else {\n        Real c = abs(b.first - a.first);\n        pos = unit_vector(b.first - a.first) * ((a.second * c) / (a.second - b.second)) + a.first;\n        if (!circle_in_x(a, pos)) {\n            vector<Line> tmp = adjust_line(a, pos);\n            for (int i = 0; i < tmp.size(); i++) res.push_back(tmp[i]);\n        }\n    }\n\n    return res;\n}\n\n\n\n\n\n\n//使い方\n//--------------------------------------------\n\n//xとyの取り出し型\n//a.real(); //x\n//a.imag(); //y\n\n//単位ベクトル\n//Point unit = a / abs(a);\n\n//ベクトルの長さをk倍する\n// a = a * Point(k, 0);\n\n//ベクトルaのk倍の法線ベクトル\n//P p1 = a * P(0, k);\n//P p2 = a * P(0, -k);\n\n//ベクトルaの単位法線ベクトル\n//P p1 = (a * P(0, 1)) /abs(a);\n//P p2 = (a * P(0, -1)) /abs(a);\n\n/*\n *\n *\n *   ~~~~Below My Answer~~~~\n *\n *\n **/\n\n\n\nint main() {\n\n    double p1_x, p1_y, p2_x, p2_y;\n    cin >> p1_x >> p1_y >> p2_x >> p2_y;\n\n    Point p1(p1_x, p1_y);\n    Point p2(p2_x, p2_y);\n\n    int q;\n    cin >> q;\n\n    for(int i=0;i<q;i++){\n        double x, y;\n        cin >> x >> y;\n\n        Point p(x, y);\n\n        Point ans = projection_point(p1, p2, p);\n\n\n        cout << fixed << setprecision(10) << ans.real() << \" \"<<ans.imag() <<endl;\n\n    }\n\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main()\n{\n\tint p1x = 0, p1y = 0, p2x = 0, p2y = 0, q = 0, px = 0, py = 0;\n\tint a = 0, b = 0, c = 0, s = 0;\n\tdouble x = 0, y = 0;\n\n\tcin >> p1x >> p1y >> p2x >> p2y;\n\tcin >> q;\n\n\ta = p2y - p1y;\n\tb = p1x - p2x;\n\tc = - p1x * p2y + p1y * p2x;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> px >> py;\n\n\t\ts = a * px + b * py + c;\n\t\tx = px - (double)(s * a) / (double)(a * a + b * b);\n\t\ty = py - (double)(s * b) / (double)(a * a + b * b);\n\n\t\tcout << setprecision(10) << setiosflags(ios::fixed | ios::showpoint) \n\t\t\t << x << \" \" << y << endl;\n\t}\n\t\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n\tbool operator() (pr const& a,pr const& b) const {\n\t\treturn a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n\t}\n};\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return x == e.x? (y < e.y) : x < e.x;\n  }\n  bool operator >(const struct _PT &e) const{\n     return x == e.x? (y > e.y) : x > e.x;\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\n\nclass Plane{\nprivate:\n  static bool cmp_x(const P &p1,const P &p2){\n      if (p1.x != p2.x) return p1.x < p2.x;\n      return p1.y < p2.y;\n  }\npublic:\n  P intersection(P p1,P p2,P q1,P q2) { // 直線p1-p2と直線q1-q2の交点\n    return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n  }\n\n  bool on_seq(P p1,P p2,P q) { // 線分p1-p2上に点qがあるか\n    return (abs((p1 - q).det(p2 - q)) < eps) && ((p1 - q).dot(p2 - q) < (eps));\n  }\n\n  bool have_intersection(P p1,P p2,P q1,P q2) { // 線分p1-p2と線分q1-q2がが交点を持つか\n    if (abs((p1-p2).det(q1-q2)) > eps) {\n      P r = intersection(p1,p2,q1,q2);\n      return (on_seq(p1,p2,r) && on_seq(q1,q2,r));\n    }\n    else return (on_seq(p1,p2,q1) || on_seq(p1,p2,q2) || on_seq(q1,q2,p1) || on_seq(q1,q2,p2));\n  }\n\n  vector<P> convexHull(vector<P> &point){\n      LL n = point.size();\n      vector<P> qs(n*2);\n      sort(point.begin(),point.end(),cmp_x);\n      long k = 0;\n\n      REP(i,n){ //下側凸包の作成\n        while(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n\n      for(long i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n        while(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n      qs.resize(k-1);\n      return qs;\n  }\n\n  long double getArea(vector<P> &point){\n      long double s = 0;\n      LL n = point.size();\n      REP(i,n-1) s += point[i].det(point[i+1]);\n      s += point[n-1].det(point[0]);\n      return abs(s) * 0.5;\n  }\n\n  long double getAngle(P v1,P v2){ //2ベクトルのなす角を出す。\n    return acos(v1.dot(v2)/sqrt(v1.twiceNorm() * v2.twiceNorm()));\n  }\n};\nint main(void) {\n\tPlane pl;\n  P p1,p2,p3;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  long double n = (p2 - p1).twiceNorm();\n  int q;\n  cin >> q;\n  vector<P> ans(q);\n  REP(i,q) {\n    cin >> p3.x >> p3.y;\n    P pt = p1 + ((p2 - p1)*((p2-p1).dot(p3-p1)/n));\n    cout << ROUND(12) << pt.x << \" \" << ROUND(12) << pt.y << endl;\n  }\n}\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include<cstdio>\n\nusing namespace std;\n\nint main(void)\n{\n    double x_p1,y_p1,x_p2,y_p2;\n    int q;\n    double x_p[1000],y_p[1000];\n    double x[1000],y[1000];\n    \n    cin>>x_p1>>y_p1>>x_p2>>y_p2;\n    cin>>q;\n    for(int i=0;i<q;i++)\n        cin>>x_p[i]>>y_p[i];\n    \n    for(int i=0;i<q;i++)\n    {\n        x[i]=((x_p2-x_p1)*(x_p2-x_p1)*x_p[i]+(y_p2-y_p1)*(y_p2-y_p1)*x_p1+(y_p[i]-y_p1)*(x_p2-x_p1)*(y_p2-y_p1))/((y_p2-y_p1)*(y_p2-y_p1)+(x_p2-x_p1)*(x_p2-x_p1));\n        if(x_p1!=x_p2)\n            y[i]=((y_p2-y_p1)*(x[i]-x_p1))/(x_p2-x_p1)+y_p1;\n        else\n            y[i]=(-(x_p2-x_p1)*(x[i]-x_p[i]))/(y_p2-y_p1)+y_p[i];\n        \n        printf(\"%.8lf %.8lf\\n\",x[i],y[i]);\n    }\n    \n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#define N 1000\ntypedef std::complex<double> point;\ndouble InnerProd(point x,point y);\npoint Projection(point x,point y);\nint main(){\n        point ans,p1,p2,tmp;\n        int q;\n    double x1,x2,y1,y2;\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n        p1=point(x1,y1);\n        p2=point(x2,y2);\n        scanf(\"%d\",&q);\n        for(int i=0;i<q;i++){\n                scanf(\"%lf%lf\",&x1,&y1);\n                ans=p1+Projection(point(x1,y1),p2-p1);\n                printf(\"%.10f %.10f\\n\",ans.real(),ans.imag());\n        }\n\n        return 0;\n}\ndouble InnerProd(point x,point y){\n        return ((std::conj(x)*y).real());\n}\n\n/*x??????y???????°???±*/\npoint Projection(point x,point y){\n        return (y*InnerProd(x,y)/std::norm(y));\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<complex>\n\nusing namespace std;\n\n#define X real()\n#define Y imag()\n\nint main(){\n\ttypedef complex<double> P;\n\t\n\t\n\tint a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\t\n\tP padding = P(a,b);\n\tP p1 = P(0,0);\n\tP p2 = P(c-a, d-b);\n\t\n\tP e = p2 / abs(p2);\n\t\n\tint n;\n\tcin>>n;\n\t\n\tfor(int i=0;i<n;i++){\n\t\tint g,h;\n\t\tcin>>g>>h;\n\t\t\n\t\tP q = P(g,h) - padding;\n\t\t\n\t\tdouble len = q.X*e.X + q.Y*e.Y;\n\t\tP ans = (e*len + padding);\n\t\t\n\t\tprintf(\"%.10lf %.10lf\\n\",ans.X, ans.Y);\n\t\t\n\t}\n\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>// c\n#include <iostream>// io\n#include <iomanip>\n#include <fstream>\n#include <sstream>\n#include <vector>// container\n#include <map>\n#include <set>\n#include <queue>\n#include <bitset>\n#include <stack>\n#include <algorithm>// other\n#include <complex>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\ntypedef int32_t i32;typedef int64_t i64;typedef i64 ll;typedef uint32_t uint;typedef uint64_t ull;\n\n#define ALL(c) (begin(c)),(end(c))\n#define REP(i,n) FOR(i,0,n)\n#define REPr(i,n) FORr(i,0,n)\n#define FOR(i,l,r) for(int i=(int)(l);i<(int)(r);++i)\n#define FORr(i,l,r) for(int i=(int)(r)-1;i>=(int)(l);--i)\n#define EACH(it,o) for(__typeof((o).begin()) it = (o).begin(); it != (o).end(); ++it)\n#define IN(l,v,r) ((l)<=(v) && (v)<(r))\n\n//debug\n#define DUMP(x)  cerr << #x << \" = \" << (x)\n#define DUMPLN(x)  DUMP(x) <<endl\n#define DEBUG(x) DUMP(x) << LINE() << \" \" << __FILE__\n#define DEBUGLN(x) DEBUG(x)<<endl\n#define LINE()    cerr<< \" (L\" << __LINE__ << \")\"\n#define LINELN()    LINE()<<endl\n#define CHECK(exp,act)  if(exp!=act){DUMPLN(exp);DEBUGLN(act);}\n#define STOP(e)  CHECK(e,true);if(!(e)) exit(1);\n\nclass range {\nprivate:\n    struct Iter{\n        int v;\n        int operator*(){return v;}\n        bool operator!=(Iter& itr) {return v < itr.v;}\n        void operator++() {++v;}\n    };\n    Iter i, n;\npublic:\n    range(int n) : i({0}), n({n}) {}\n    range(int i, int n) : i({i}), n({n}) {}\n    Iter& begin() {return i;}\n    Iter& end() {return n;}\n};\n\n//output\ntemplate<typename T> ostream& operator << (ostream& os, const vector<T>& as){REP(i,as.size()){if(i!=0)os<<\" \"; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const vector<vector<T> >& as){REP(i,as.size()){if(i!=0)os<<endl; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const set<T>& ss){EACH(a,ss){if(a!=ss.begin())os<<\" \"; os<<a;}return os;}\ntemplate<typename T1,typename T2> ostream& operator << (ostream& os, const pair<T1,T2>& p){os<<p.first<<\" \"<<p.second;return os;}\ntemplate<typename K,typename V> ostream& operator << (ostream& os, const map<K,V>& m){bool isF=true;EACH(p,m){if(!isF)os<<endl;os<<p;isF=false;}return os;}\n\n//input\nchar tmp[1000];\n#define nextInt(n) scanf(\"%d\",&n)\n#define nextLong(n) scanf(\"%lld\",&n) //I64d\n#define nextDouble(n) scanf(\"%lf\",&n) \n#define nextChar(n) scanf(\"%c\",&n)\n#define nextString(n) scanf(\"%s\",tmp);n=tmp\n\n// values\ntemplate<class T> T INF(){assert(false);};\ntemplate<> int INF<int>(){return 1<<28;};\ntemplate<> ll INF<ll>(){return 1LL<<58;};\ntemplate<> double INF<double>(){return 1e16;};\n\nnamespace _double_tmpl{\n    typedef long double D;const D EPS = 1e-8;\n    \n    static constexpr D Ae=0;\n    D A(D a,D b){return a+b;}D Ainv(D a){return -a;}\n    D S(D a,D b){return A(a,Ainv(b));}\n    \n    static constexpr D Me=1;\n    D M(D a,D b){return a*b;}D Minv(D a){return 1.0/a;};\n\n    template<typename T> int sig(T a,T b=0){return a<b-EPS?-1:a>b+EPS?1:0;}\n    template<typename T> bool eq(T a,T b){ return sig(abs(a-b))==0;}\n    template<typename T> D norm(T a){ return a*a;}\n}\nusing namespace _double_tmpl;\n\nnamespace Ps{\n    using namespace _double_tmpl;\n    typedef complex<D> P;\n\n#define X real()\n#define Y imag()\n\n    // a×b\n    D cross(const P& a,const P& b){return imag(conj(a)*b);}\n    // a・b\n    D dot(const P&a,const P& b) {return real(conj(a)*b);}\n}\nusing namespace Ps;\n\nnamespace Ls{\n    struct L : public vector<P> {\n        L(const P &a, const P &b) {\n            push_back(a); push_back(b);\n        }\n    };\n\n    //直線へ射影した時の点\n    P projection(const L &l, const P &p) {\n      D t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n      return l[0] + t*(l[0]-l[1]);\n    }\n\n}\nusing namespace Ls;\n\n\nstringstream ss;\nclass Main{\n    public:\n    void run(){\n        D x0,y0,x1,y1;\n        cin >> x0 >> y0 >> x1 >> y1;\n        int q;cin >> q;\n        L l(P(x0,y0),P(x1,y1));\n        REP(i,q){\n            D x,y;cin >> x >> y;P p(x,y);\n            P res=projection(l, p);\n            cout <<res.X<<\" \" <<res.Y<<endl;\n        }\n    }\n};\n\nint main(){\n cout <<fixed<<setprecision(20);\n cin.tie(0);\n ios::sync_with_stdio(false);\n Main().run();\n return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\ntemplate<class T>\nusing Table = vector<vector<T>>;\nconst ld eps=1e-9;\n\n//// < \"D:\\D_Download\\Visual Studio 2015\\Projects\\programing_contest_c++\\Debug\\a.txt\" > \"D:\\D_Download\\Visual Studio 2015\\Projects\\programing_contest_c++\\Debug\\b.txt\"\n \n\n/* ??????????????¬ */\n\n#include <complex>\n\ntypedef complex<ld> Point;\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define all(x) (x).begin(),(x).end()\n\n\nconst ld pi = acos(-1.0);\nconst ld dtop = pi / 180.;\nconst ld ptod = 1. / dtop;\n\nnamespace std {\n\tbool operator<(const Point &lhs, const Point &rhs) {\n\t\tif (lhs.real() < rhs.real() - eps) return true;\n\t\tif (lhs.real() > rhs.real() + eps) return false;\n\t\treturn lhs.imag() < rhs.imag();\n\t}\n}\n\n// ????????\\???\nPoint input_Point() {\n\tld x, y;\n\tcin >> x >> y;\n\treturn Point(x, y);\n}\n\n// ????????????????????????\nbool eq(const ld a, const ld b) {\n\treturn (abs(a - b) < eps);\n}\n\n// ??????\nld dot(const Point& a, const Point& b) {\n\treturn real(conj(a) * b);\n}\n\n// ??????\nld cross(const Point& a, const Point& b) {\n\treturn imag(conj(a) * b);\n}\n\n// ??´????????????\nclass Line {\npublic:\n\tPoint a, b;\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\tLine(Point a, Point b) : a(a), b(b) {}\n\tPoint operator[](const int _num)const {\n\t\tif (_num == 0)return a;\n\t\telse if (_num == 1)return b;\n\t\telse {\n\t\t\tassert(false);\n\t\t\treturn Point();\n\t\t}\n\t}\n};\n\n// ????????????\nclass Circle {\npublic:\n\tPoint p;\n\tld r;\n\tCircle() : p(Point(0, 0)), r(0) {}\n\tCircle(Point p, ld r) : p(p), r(r) {}\n};\n\n// ccw\nint ccw(const Point& a, const Point &b, const Point &c) {\n\tconst Point nb(b - a);\n\tconst Point nc(c - a);\n\tif (cross(nb, nc) > eps) return 1;   // a,b,c??????????¨???¨?????????????????¶\n\tif (cross(nb, nc) < -eps) return -1; // a,b,c???????¨???¨?????????????????¶\n\tif (dot(nb, nc) < 0) return 2;       // c,a,b???????????´???????????¶\n\tif (norm(nb) < norm(nc)) return -2;  // a,b,c???????????´???????????¶\n\treturn 0;                          // a,c,b???????????´???????????¶\n}\n\n\n/* ???????????? */\n\n// ??´?????¨??´??????????????????\nbool isis_ll(const Line& l, const Line& m) {\n\treturn !eq(cross(l.b - l.a, m.b - m.a), 0);\n}\n\n// ??´?????¨?????????????????????\nbool isis_ls(const Line& l, const Line& s) {\n\treturn isis_ll(l, s) &&\n\t\t(cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\n// ????????¨?????????????????????\nbool isis_ss(const Line& s, const Line& t) {\n\treturn ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n\t\tccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// ????????´????????????\nbool isis_lp(const Line& l, const Point& p) {\n\treturn (abs(cross(l.b - p, l.a - p)) < eps);\n}\n\n// ?????????????????????\nbool isis_sp(const Line& s, const Point& p) {\n\treturn (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);\n}\n\n// ??????????¶?\nPoint proj(const Line &l, const Point& p) {\n\tld t = dot(p - l.a, l.b - l.a) / norm(l.a - l.b);\n\treturn l.a + t * (l.b - l.a);\n}\n\n// ??´?????¨??´????????????\nPoint is_ll(const Line &s, const Line& t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tassert(cross(sv, tv) != 0);\n\treturn s.a + sv * cross(tv, t.a - s.a) / cross(tv, sv);\n}\n// ??´?????¨??´????????????\nvector<Point> is_ll2(const Line &s, const Line& t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tif (cross(sv, tv) != 0)return vector<Point>(1, is_ll(s, t));\n\telse {\n\t\tvector<Point>ans;\n\t\tfor (int k = 0; k < 2; ++k) {\n\t\t\tif (isis_sp(s, t[k]) && find(ans.begin(), ans.end(), t[k]) == ans.end())ans.push_back(t[k]);\n\t\t\tif (isis_sp(t, s[k]) && find(ans.begin(), ans.end(), s[k]) == ans.end())ans.push_back(s[k]);\n\t\t}\n\t\treturn ans;\n\t}\n}\n// ????????¨???????????????\n//???????????£????????¨???????????¨assert(false)\nPoint is_ss(const Line &s, const Line& t) {\n\tif (isis_ss(s, t)) {\n\t\tfor (int k = 0; k < 2; ++k) {\n\t\t\tfor (int l = 0; l < 2; ++l) {\n\t\t\t\tif (s[k] == t[l])return s[k];\n\t\t\t}\n\t\t}\n\t\treturn is_ll(s, t);\n\t}\n\telse {\n\t\t//??????isis_ss?????????\n\t\tassert(false);\n\t\treturn Point(0, 0);\n\t}\n}\n// ????????¨???????????????\nvector<Point> is_ss2(const Line &s, const Line& t) {\n\tvector<Point> kouho(is_ll2(s, t));\n\tvector<Point>ans;\n\tfor (auto p : kouho) {\n\t\tif (isis_sp(s, p) && isis_sp(t, p))ans.emplace_back(p);\n\t}\n\treturn ans;\n}\n// ??´?????¨???????????¢\nld dist_lp(const Line& l, const Point& p) {\n\treturn abs(p - proj(l, p));\n}\n\n//??´?????¨??´???????????¢\nld dist_ll(const Line& l, const Line& m) {\n\treturn isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\n// ??´?????¨??????????????¢\nld dist_ls(const Line& l, const Line& s) {\n\treturn isis_ls(l, s) ? 0 : min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\n// ????????¨???????????¢\nld dist_sp(const Line& s, const Point& p) {\n\tPoint r = proj(s, p);\n\treturn isis_sp(s, r) ? abs(r - p) : min(abs(s.a - p), abs(s.b - p));\n}\n\n// ????????¨??????????????¢\nld dist_ss(const Line& s, const Line& t) {\n\tif (isis_ss(s, t)) return 0;\n\treturn min({ dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b) });\n}\n\n\n//??´?????¨??´?????????????????????????????????\nLine bisection(const Line &s, const Line &t) {\n\tconst Point laglanju(is_ll(s, t));\n\tconst Point avec = !(abs(laglanju - s[0])<eps) ? s[0] - laglanju : s[1] - laglanju;\n\tconst Point bvec = !(abs(laglanju - t[0])<eps) ? t[0] - laglanju : t[1] - laglanju;\n\n\treturn Line(laglanju, laglanju + (abs(bvec)*avec + abs(avec)*bvec) / (abs(avec) + abs(bvec)));\n}\n\n\n//???????????´?????????????????????\n//???????????´??????????????§???????????¨????¢?????????¨?????????\nPoint  inner_center(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tfor (int i = 0; i <static_cast<int>(ls.size()); ++i) {\n\t\tvertics.push_back(is_ll(ls[i], ls[(i + 1) % 3]));\n\t}\n\tif (vertics[0] == vertics[1] || vertics[1] == vertics[2] || vertics[2] == vertics[0])return vertics[0];\n\tLine bi1(bisection(Line(vertics[0], vertics[1]), Line(vertics[0], vertics[2])));\n\tLine bi2(bisection(Line(vertics[1], vertics[2]), Line(vertics[1], vertics[0])));\n\tif (bi1[0] == bi2[0])return bi1[0];\n\telse {\n\t\treturn is_ll(bi1, bi2);\n\t}\n}\n\n//???????????´?????????????????????\n//???????????´??????????????§???????????¨????¢?????????¨?????????\nvector<Point>  ex_center(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tfor (int i = 0; i < static_cast<int>(ls.size()); ++i) {\n\t\tvertics.push_back(is_ll(ls[i], ls[(i + 1) % 3]));\n\t}\n\tif (abs(vertics[0] - vertics[1])<eps || abs(vertics[1] - vertics[2])<eps || (abs(vertics[2] - vertics[0])<eps))return vector<Point>();\n\tvector<Point>ecs;\n\tfor (int i = 0; i < 3; ++i) {\n\t\tLine bi1(bisection(Line(vertics[i], vertics[i] * 2.0l - vertics[(i + 2) % 3]), Line(vertics[i], vertics[(i + 1) % 3])));\n\t\tLine bi2(bisection(Line(vertics[(i + 1) % 3], vertics[(i + 1) % 3] * 2.0l - vertics[(i + 2) % 3]), Line(vertics[(i + 1) % 3], vertics[i])));\n\t\tecs.push_back(is_ll(bi1, bi2));\n\t}\n\treturn ecs;\n}\n\n\n//a,b:??????\n//c:????????§??????\n//???????????´?????????????????¢?????????????±??????????\nvector<Point>  same_dis(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tvertics.push_back(is_ll(ls[0], ls[2]));\n\tvertics.push_back(is_ll(ls[1], ls[2]));\n\n\tif (abs(vertics[0] - vertics[1]) < eps)return vector<Point>{vertics[0]};\n\tLine bis(bisection(ls[0], ls[1]));\n\tvector<Point>ecs;\n\n\tLine abi(bisection(Line(vertics[0], vertics[1]), ls[0]));\n\tecs.push_back(is_ll(bis, abi));\n\n\n\tLine bbi(bisection(Line(vertics[0], 2.l*vertics[0] - vertics[1]), ls[0]));\n\tecs.push_back(is_ll(bis, bbi));\n\n\treturn ecs;\n}\n/* ??? */\n\n// ?????¨????????????\nvector<Point> is_cc(const Circle& c1, const Circle& c2) {\n\tvector<Point> res;\n\tld d = abs(c1.p - c2.p);\n\tld rc = (d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d);\n\tld dfr = c1.r * c1.r - rc * rc;\n\tif (abs(dfr) < eps) dfr = 0.0;\n\telse if (dfr < 0.0) return res; // no intersection\n\tld rs = sqrt(dfr);\n\tPoint diff = (c2.p - c1.p) / d;\n\tres.push_back(c1.p + diff * Point(rc, rs));\n\tif (dfr != 0.0) res.push_back(c1.p + diff * Point(rc, -rs));\n\treturn res;\n}\n\n//???????????????????????????\n/*  0 => out\n1 => on\n2 => in*/\nint is_in_Circle(const Circle &cir, const  Point& p) {\n\tld dis = abs(cir.p - p);\n\tif (dis > cir.r + eps)return 0;\n\telse if (dis < cir.r - eps)return 2;\n\telse return 1;\n}\n//???lc??????rc??????????????????\n/*0 => out\n1 => on\n2 => in*/\nint Circle_in_Circle(const Circle &lc, const  Circle&rc) {\n\tld dis = abs(lc.p - rc.p);\n\tif (dis < rc.r - lc.r - eps)return 2;\n\telse if (dis>rc.r - lc.r + eps)return 0;\n\telse return 1;\n}\n\n// ?????¨??´????????????\nvector<Point> is_lc(const Circle& c, const Line& l) {\n\tvector<Point> res;\n\tld d = dist_lp(l, c.p);\n\tif (d < c.r + eps) {\n\t\tld len = (d > c.r) ? 0.0 : sqrt(c.r * c.r - d * d); //safety;\n\t\tPoint nor = (l.a - l.b) / abs(l.a - l.b);\n\t\tres.push_back(proj(l, c.p) + len * nor);\n\t\tres.push_back(proj(l, c.p) - len * nor);\n\t}\n\treturn res;\n}\n\n// ?????¨??????????????¢\nvector<Point> is_sc(const Circle& c, const Line& l) {\n\tvector<Point> v = is_lc(c, l), res;\n\tfor (Point p : v)\n\t\tif (isis_sp(l, p)) res.push_back(p);\n\treturn res;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cp(const Circle& c, const Point& p) {\n\tvector<Line> ret;\n\tPoint v = c.p - p;\n\tld d = abs(v);\n\tld l = sqrt(norm(v) - c.r * c.r);\n\tif (isnan(l)) { return ret; }\n\tPoint v1 = v * Point(l / d, c.r / d);\n\tPoint v2 = v * Point(l / d, -c.r / d);\n\tret.push_back(Line(p, p + v1));\n\tif (l < eps) return ret;\n\tret.push_back(Line(p, p + v2));\n\treturn ret;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cc(const Circle& c1, const Circle& c2) {\n\tvector<Line> ret;\n\tif (abs(c1.p - c2.p) - (c1.r + c2.r) > -eps) {\n\t\tPoint center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n\t\tret = tangent_cp(c1, center);\n\t}\n\tif (abs(c1.r - c2.r) > eps) {\n\t\tPoint out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n\t\tvector<Line> nret = tangent_cp(c1, out);\n\t\tret.insert(ret.end(), all(nret));\n\t}\n\telse {\n\t\tPoint v = c2.p - c1.p;\n\t\tv /= abs(v);\n\t\tPoint q1 = c1.p + v * Point(0, 1) * c1.r;\n\t\tPoint q2 = c1.p + v * Point(0, -1) * c1.r;\n\t\tret.push_back(Line(q1, q1 + v));\n\t\tret.push_back(Line(q2, q2 + v));\n\t}\n\treturn ret;\n}\n//??????????????????????????¢???\nld two_Circle_area(const Circle&l, const Circle&r) {\n\tld dis = abs(l.p - r.p);\n\tif (dis > l.r + r.r)return 0;\n\telse if (dis + r.r < l.r) {\n\t\treturn r.r*r.r*pi;\n\t}\n\telse if (dis + l.r < r.r) {\n\t\treturn l.r*l.r*pi;\n\t}\n\telse {\n\t\tld ans = (l.r)*(l.r)*acos((dis*dis + l.r*l.r - r.r*r.r) / (2 * dis*l.r)) +\n\t\t\t(r.r)*(r.r)*acos((dis*dis + r.r*r.r - l.r*l.r) / (2 * dis*r.r)) -\n\t\t\tsqrt(4 * dis*dis*l.r*l.r - (dis*dis + l.r*l.r - r.r*r.r)*(dis*dis + l.r*l.r - r.r*r.r)) / 2;\n\t\treturn ans;\n\t}\n\n}\n\n/* ????§???¢ */\n\ntypedef vector<Point> Polygon;\n\n// ??¢???\nld area(const Polygon &p) {\n\tld res = 0;\n\tint n = p.size();\n\trep(j, n) res += cross(p[j], p[(j + 1) % n]);\n\treturn res / 2;\n}\n\n//????§???¢????????¢??????\nbool is_counter_clockwise(const Polygon &poly) {\n\tld angle = 0;\n\tint n = poly.size();\n\trep(i, n) {\n\t\tPoint a = poly[i], b = poly[(i + 1) % n], c = poly[(i + 2) % n];\n\t\tangle += arg((c - b) / (b - a));\n\t}\n\treturn angle > eps;\n}\n\n// ??????????????????\n/*0 => out\n1 => on\n2 => in*/\nint is_in_Polygon(const Polygon &poly, const  Point& p) {\n\tld angle = 0;\n\tint n = poly.size();\n\trep(i, n) {\n\t\tPoint a = poly[i], b = poly[(i + 1) % n];\n\t\tif (isis_sp(Line(a, b), p)) return 1;\n\t\tangle += arg((b - p) / (a - p));\n\t}\n\treturn eq(angle, 0) ? 0 : 2;\n}\n//??????????????????2?????????\nenum { out, on, in };\nint convex_contains(const Polygon &P, const Point &p) {\n\tconst int n = P.size();\n\tPoint g = (P[0] + P[n / 3] + P[2 * n / 3]) / 3.0l; // inner-point\n\tint a = 0, b = n;\n\twhile (a + 1 < b) { // invariant: c is in fan g-P[a]-P[b]\n\t\tint c = (a + b) / 2;\n\t\tif (cross(P[a] - g, P[c] - g) > 0) { // angle < 180 deg\n\t\t\tif (cross(P[a] - g, p - g) > 0 && cross(P[c] - g, p - g) < 0) b = c;\n\t\t\telse                                                  a = c;\n\t\t}\n\t\telse {\n\t\t\tif (cross(P[a] - g, p - g) < 0 && cross(P[c] - g, p - g) > 0) a = c;\n\t\t\telse                                                  b = c;\n\t\t}\n\t}\n\tb %= n;\n\tif (cross(P[a] - p, P[b] - p) < 0) return 0;\n\tif (cross(P[a] - p, P[b] - p) > 0) return 2;\n\treturn 1;\n}\n\n// ??????\n//???????????????????????¨????????????????????§??¨???\nPolygon convex_hull(vector<Point> ps) {\n\tint n = ps.size();\n\tint k = 0;\n\tsort(ps.begin(), ps.end());\n\tPolygon ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++])\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n\n\n//????????????\nvector<Polygon> convex_cut(const Polygon &ps, const Line& l) {\n\tint n = ps.size();\n\tPolygon q;\n\tPolygon r;\n\trep(i, n) {\n\t\tPoint a = ps[i], b = ps[(i + 1) % n];\n\t\tLine m = Line(a, b);\n\t\tif (ccw(l.a, l.b, a) != -1) q.push_back(a);\n\t\tif (ccw(l.a, l.b, a) != 1) r.push_back(a);\n\t\tif (ccw(l.a, l.b, a) * ccw(l.a, l.b, b) < 0 && isis_ll(l, m)) {\n\t\t\tq.push_back(is_ll(l, m));\n\t\t\tr.push_back(is_ll(l, m));\n\t\t}\n\t}\n\tconst vector<Polygon>polys{ q,r };\n\treturn polys;\n}\n\n\n/* ??¢??¬??????????????? */\nvoid add_Point(vector<Point> &ps, const Point p) {\n\tfor (Point q : ps) if (abs(q - p) < eps) return;\n\tps.push_back(p);\n}\n\ntypedef int Weight;\nstruct edge {\n\tint src, dst;\n\tWeight weight;\n\tedge(int src, int dst, Weight weight) :\n\t\tsrc(src), dst(dst), weight(weight) { }\n};\n\ntypedef vector<edge> edges;\ntypedef vector<edges> graph;\n\nvoid add_edge(graph &g, const int from, const int to, const Weight weight) {\n\tg[from].push_back(edge{ from, to, weight });\n}\n\ngraph segment_arrangement(const vector<Line> &s, const vector<Point> &p) {\n\tint n = p.size(), m = s.size();\n\tgraph g(n);\n\trep(i, m) {\n\t\tvector<pair<ld, int>> vec;\n\t\trep(j, n) if (isis_sp(s[i], p[j]))\n\t\t\tvec.emplace_back(abs(s[i].a - p[j]), j);\n\t\tsort(all(vec));\n\t\trep(j, vec.size() - 1) {\n\t\t\tint from = vec[j].second, to = vec[j + 1].second;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(abs(p[from] - p[to])));\n\t\t}\n\t}\n\treturn g;\n}\ngraph sennbunn_arrangement(const vector<Line>&s) {\n\tvector<Point>crss;\n\tfor (int i = 0; i < static_cast<int>(s.size()); ++i) {\n\t\tfor (int j = i + 1; j < static_cast<int>(s.size()); ++j) {\n\t\t\tif (isis_ss(s[i], s[j])) {\n\t\t\t\tcrss.push_back(is_ll2(s[i], s[j])[0]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i <static_cast<int>(s.size()); ++i) {\n\t\tcrss.push_back(s[i][0]);\n\t\tcrss.push_back(s[i][1]);\n\t}\n\treturn segment_arrangement(s, crss);\n}\n\ngraph Circle_arrangement(const vector<Circle> &c, const vector<Point> &p) {\n\tint n = p.size(), m = c.size();\n\tgraph g(n);\n\trep(i, m) {\n\t\tvector<pair<ld, int>> vec;\n\t\trep(j, n) if (abs(abs(c[i].p - p[j]) - c[i].r) < eps)\n\t\t\tvec.emplace_back(arg(c[i].p - p[j]), j);\n\t\tsort(all(vec));\n\t\trep(j, vec.size() - 1) {\n\t\t\tint from = vec[j].second, to = vec[j + 1].second;\n\t\t\tld angle = vec[j + 1].first - vec[j].first;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(angle * c[i].r));\n\t\t}\n\t\tif (vec.size() >= 2) {\n\t\t\tint from = vec.back().second, to = vec.front().first;\n\t\t\tld angle = vec.front().first - vec.back().first;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(angle * c[i].r));\n\t\t}\n\t}\n\treturn g;\n}\n\nint main() {\n\tint x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;\n\tLine l(Point(x1, y1), Point(x2, y2));\n\tint Q; cin >> Q;\n\tcout << setprecision(22) << fixed;\n\twhile (Q--) {\n\t\tint x, y; cin >> x >> y;\n\t\tPoint p(x, y);\n\t\tPoint ans = proj(l, p);\n\t\tcout << ans.real() << \" \" << ans.imag() << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n#include<vector>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a-b)<EPS)\n\nstruct Point\n{\n    double x, y;\n    Point(double x=0, double y=0):x(x), y(y){}\n};\ntypedef Point Vector;\n\nstruct Segment{ Point p1, p2; };\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n    Point c;\n    double r;\n    Circle(Point c=Point(), double r=0.0):c(c), r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\nPoint operator + (Point a, Point b){ return Point(a.x+b.x, a.y+b.y); }\nPoint operator - (Point a, Point b){ return Point(a.x-b.x, a.y-b.y); }\nPoint operator * (Point a, double p){ return  Point(a.x*p, a.y*p); }\nPoint operator / (Point a, double p){ return Point(a.x/p, a.y/p); }\n\ndouble norm(Vector a){ return a.x*a.x+a.y*a.y; }\ndouble abs(Vector a){ return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b){ return a.x*b.x+a.y*b.y; }\ndouble cross(Vector a, Vector b){ return a.x*b.y-a.y*b.x; }\n\nbool isOrthgonal(Vector a, Vector b){ return equals(dot(a, b), 0.0); }\nbool isOrthgonal(Point a1, Point a2, Point b1, Point b2){ return isOrthgonal(a1-a2, b1-b2); }\nbool isOrthgonal(Segment s1, Segment s2){ return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0); }\n\nbool isParallel(Vector a, Vector b){ return equals(cross(a, b), 0.0); }\nbool isParallel(Point a1, Point a2, Point b1, Point b2){ return isParallel(a1-a2, b1-b2); }\nbool isParallel(Segment s1, Segment s2){ return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0); }\n\nPoint project(Segment s, Point p)\n{\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1, base)/norm(base);\n    return s.p1+base*r;\n}\n\nint main()\n{\n    Segment T;\n    int q;\n    scanf(\"%lf%lf%lf%lf\", &T.p1.x, &T.p1.y, &T.p2.x, &T.p2.y);\n    scanf(\"%d\", &q);\n    while(q--)\n    {\n        Point s;\n        scanf(\"%lf%lf\", &s.x, &s.y);\n        printf(\"%.10lf %.10lf\\n\", project(T, s).x, project(T, s).y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <cmath>\n#include <map>\n#include <stack>\n#include <algorithm>\ntypedef long long int ll;\nusing namespace std;\nconst int MAX=5000+10;\nconst double eps=1e-9;\nconst double PI=acos(-1.0);\n\nint sgn(double x)\n{\n    if (fabs(x)<eps) {\n        return 0;\n    }\n    if (x<0) {\n        return -1;\n    }\n    else return 1;\n}\nstruct point\n{\n    double x,y;\n    point(){}\n    point(double _x,double _y)\n    {\n        x=_x;y=_y;\n    }\n    point operator +(const point &b)const\n    {\n        return point(x+b.x,y+b.y);\n    }\n    point operator -(const point &b)const\n    {\n        return point(x-b.x,y-b.y);\n    }\n    double operator ^(const point &b)const\n    {\n        return x*b.y-y*b.x;\n    }\n    double operator *(const point &b)const\n    {\n        return x*b.x+y*b.y;\n    }\n    point operator *(const double k)const\n    {\n        point kk;kk.x=k*x;kk.y=k*y;return kk;\n    }\n    double len(void)\n    {\n        return sqrt(x*x+y*y);\n    }\n};\nint main(){\n    //freopen(\"/Users/mac/Desktop/C++?¨????/test/test.txt\", \"r\", stdin);\n    int q;\n    point p1,p2,p;\n    scanf(\"%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n    scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%lf%lf\",&p.x,&p.y);\n        point base=p2-p1;\n        point hypo=p-p1;\n        double t=(hypo*base)/base.len();\n        point x=p1+(base*(t/base.len()));\n        printf(\"%.8lf %.8lf\\n\",x.x,x.y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nnamespace geometry {\n\tusing Real = double;\n\tusing Point = complex<Real>;\n\tconstexpr Real EPS = 1e-9;\n\tstruct Circle {\n\t\tPoint p;\n\t\tReal r;\n\t};\n\t// 内積\n\tinline Real dot(const Point& lhs, const Point& rhs) {\n\t\treturn (conj(lhs) * rhs).real();\n\t}\n\t// 外積\n\tinline Real cross(const Point& lhs, const Point& rhs) {\n\t\treturn (conj(lhs) * rhs).imag();\n\t}\n\t// 円の交点\n\tvector<Point> intersect(const Circle& c1, const Circle& c2) {\n\t\tconst Real dist = abs(c1.p - c2.p);\n\t\tvector<Point> ret;\n\t\tif(dist > c1.r + c2.r) return ret;\n\t\tif(dist < abs(c1.r - c2.r)) return ret;\n\t\tconst Real rc = (dist * dist + c1.r * c1.r - c2.r * c2.r) / (2 * dist);\n\t\tconst Real rs = sqrt(c1.r * c1.r - rc * rc);\n\t\tconst Point vec = (c2.p - c1.p) / dist;\n\t\tret.emplace_back(c1.p + vec * Point(rc, rs));\n\t\tret.emplace_back(c1.p + vec * Point(rc, -rs));\n\t\treturn ret;\n\t}\n\t// a の b に対する正射影ベクトル\n\tinline Point projection(const Point& a, const Point& b) {\n\t\treturn b * dot(a, b) / norm(b);\n\t}\n\t// 直線の交点\n\t// Point intersect(const Line& l1, const Line& l2) {\n\t// \tconst Point v1 = l1.p2 - l1.p1;\n\t// \tconst Point v2 = l2.p2 - l2.p1;\n\n\t// }\n\n\tinline istream& operator>>(istream& is, Point& p) {\n\t\tReal x, y;\n\t\tis >> x >> y;\n\t\tp = Point(x, y);\n\t\treturn is;\n\t}\n\tinline ostream& operator<<(ostream& os, const Point &p) {\n\t\treturn os << fixed << setprecision(15) << p.real() << \" \" << p.imag();\n\t}\n}\n\nusing namespace geometry;\nint main() {\n\tPoint p1, p2; cin >> p1 >> p2;\n\tint q; cin >> q;\n\twhile(q--) {\n\t\tPoint p; cin >> p;\n\t\tcout << projection(p - p1, p2 - p1) + p1 << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef DEBUG_MODE\n#define DBG(n) n;\n#else\n#define DBG(n) ;\n#endif\n#define REP(i,n) for(ll (i) = (0);(i) < (n);++i)\n#define rep(i,s,g) for(ll (i) = (s);(i) < (g);++i)\n#define rrep(i,s,g) for(ll (i) = (s);i >= (g);--(i))\n#define PB push_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SHOW1d(v,n) {for(int WWW = 0;WWW < (n);WWW++)cerr << v[WWW] << ' ';cerr << endl << endl;}\n#define SHOW2d(v,i,j) {for(int aaa = 0;aaa < i;aaa++){for(int bbb = 0;bbb < j;bbb++)cerr << v[aaa][bbb] << ' ';cerr << endl;}cerr << endl;}\n#define ALL(v) v.begin(),v.end()\n#define Decimal fixed<<setprecision(20)\n#define INF 1000000000\n#define LLINF 1000000000000000000LL\n#define MOD 1000000007\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\n\nconst double EPS = 1e-12;\nconst double PI = acos(-1.0);\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n\t\n\tbool operator == (const point& a,const point& b) {\n\t\treturn (abs(a.real() - b.real()) < EPS && abs(a.imag() - b.imag()) < EPS);\n\t}\n}\nstruct circle {\n\tpoint p; double r;\n\tcircle(){}\n\tcircle(const point &p, double r) : p(p), r(r) { }\n};\nstruct segment : public vector<point> {\n\tsegment(const point &a, const point &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\n\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\n\n/*\na → b で時計方向に折れて b → c\na → b で半時計方向に折れて b → c\na → b で逆を向いて a を通り越して b → c\na → b でそのまま b → c\na → b で逆を向いて b → c ( または b == c )\n*/\n\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;       // counter clockwise\n\tif (cross(b, c) < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const segment &l, const segment &m) {\n\treturn abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n\t\tabs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const segment &l, const segment &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])*       // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const segment &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSP(const segment &s, const point &p) {\n\treturn abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; // triangle inequality\n}\n//端点の交差も考える\nbool intersectSS(const segment &s, const segment &t) {\n\tif(intersectSP(s,t[0]) || intersectSP(s,t[1]) || intersectSP(t,s[0]) || intersectSP(t,s[1]))return true;\n\treturn ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) <= 0;\n}\n\npoint projection(const segment &l, const point &p) {\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + t*(l[0] - l[1]);\n}\npoint reflection(const segment &l, const point &p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\ndouble distanceLP(const segment &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const segment &l, const segment &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const segment &l, const segment &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const segment &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const segment &s, const segment &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const point &a,const point &b){\n\treturn abs(a-b);\n}\n\n//交点\npoint crosspoint(const segment &l, const segment &m) {\n\tif(!intersectSS(l,m))return point(INF,INF);\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return point(INF,INF); // same line\n\tif (abs(A) < EPS) return point(INF,INF); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n/*多角形内包判定\nOUT:0\nON:1\nIN:2\n*/\n#define curr(PP, i) PP[i]\n#define next(PP, i) PP[(i+1)%PP.size()]\nint contains(const vector<point>& Poly, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < Poly.size(); ++i) {\n\t\tpoint a = curr(Poly, i) - p, b = next(Poly, i) - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) <= 0 && 0 < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n//見えるか(可視グラフ用) \nbool block_off(const point &a, const point &b, const vector<point> &obj) {\n  point m = (a+b)/2.0;\n  bool on = false, in = false;\n  for (int j = 0; j < obj.size(); ++j) {\n    point c = curr(obj,j), d = next(obj,j);\n    if (imag(d) < imag(c)) swap(c, d);\n    if (cross(a-c,b-c) * cross(a-d,b-d) < 0 &&    // strictly intersect.\n        cross(c-a,d-a) * cross(c-b,d-b) < 0) return true;\n    if (cross(a-c,b-c) == 0 && dot(a-c,b-c) < 0) return true;\n    if (imag(c) <= imag(m) && imag(m) < imag(d))  // strictly contain.\n      if (cross(c-m,d-m) < 0) in = !in;\n    if (cross(c-m,d-m) == 0 && dot(c-m,d-m) <= 0) on = true;\n  }\n  return !on && in;\n}\n\n//面積\ndouble area(const vector<point>& p) {\n\tdouble A = 0;\n\tfor (int i = 0; i < p.size(); ++i)\n\t\tA += cross(curr(p, i), next(p, i));\n\treturn A / 2.;\n}\n\n//角度足し算\ndouble add_rad(double a,double b){\n\tdouble ret = a + b;\n\tif(ret > PI)ret -= 2 * PI;\n\treturn ret;\n}\n\n//なす角(vector)\ndouble angle(const point &a,const point &b) {\n\tauto tmp = abs(arg(a) - arg(b));\n\treturn min(tmp, 2 * PI - tmp);\n}\n\ndouble angle(const segment &s1,const segment &s2) {\n\treturn angle(s1[1] - s1[0], s2[1] - s2[0]);\n}\n\n//点の回転\npoint rotate(const point &p, double rad) {\n\tdouble X = p.real() * cos(rad) - p.imag() * sin(rad);\n\tdouble Y = p.imag() * cos(rad) + p.real() * sin(rad);\n\treturn point(X, Y);\n}\n\n//並行\nbool isParallel(const point &a, const point &b){\n    return abs(cross(a,b)) < EPS;\n}\nbool isParallel(const segment &a, const segment &b){\n    return isParallel(a[1]-a[0], b[1]-b[0]);\n}\n\nint main() {\n\tdouble a,b,c,d;cin >> a >> b >> c >> d;\n\tsegment seg = segment(point(a,b),point(c,d));\n\tint q;cin >> q;\n\tREP(i,q){\n\t\tcin >> a >> b;\n\t\tpoint tmp = point(a,b);\n\t\tpoint ret = projection(seg,tmp);\n\t\tcout << Decimal << ret.real() << ' ' << Decimal << ret.imag() << endl;\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<cstdio>\nusing namespace std;\n\nclass Point{\npublic:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n\n  Point operator+(Point p){return Point(x+p.x,y+p.y);}\n  Point operator-(Point p){return Point(x+p.x,y+p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n\n  double abs(){return sqrt(norm());}\n\n  double norm(){return (x*x+y*y);}\n};\ntypedef Point Vector;\n\nclass Segment{\npublic:\n  Point p1,p2;\n  Segment(Point p1,Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\ndouble dot(Vector a,Vector b){return (a.x*b.x+a.y*b.y);}\ndouble cross(Vector a,Vector b){return (a.x*b.y-a.y*b.x);}\n\nPoint project(Segment s,Point p){\n  Vector base=(s.p2-s.p1);\n  double r=(dot(p-s.p1,base)/base.norm());\n  return (s.p1+base*r);\n}\n\nint main()\n{\n  Point A,B,C,D;\n  int q;\n\n  cin>>A.x>>A.y>>B.x>>B.y;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    cin>>C.x>>C.y;\n    D=project(Segment(A,B),C);\n    printf(\"%.10f %.10f\\n\",D.x,D.y);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <math.h>\n#include <vector>\n#include <stdio.h>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    double x, y;\n    \n    Vector() {\n        x = 0.0;\n        y = 0.0;\n    }\n    \n    Vector(double nx, double ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void set(double nx, double ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void setX(double nx) {\n        x = nx;\n    }\n    \n    void setY(double ny) {\n        y = ny;\n    }\n    \n    // ベクトルの大きさを求める\n    double getMagnitude() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 内積を求める\n    double getScalar(const Vector& vec) {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 角度を求める\n    double getAngle(const Vector& vec) {\n        double mag = getMagnitude() * vec.getMagnitude();\n        if (mag == 0.0) {\n            return 0.0;\n        } else {\n            return getScalar(vec) / mag;\n        }\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() {\n        Vector v;\n        double mag = getMagnitude();\n        if (mag == 0.0) {\n            v.set(0.0, 0.0);\n        } else {\n            v.set(x / mag, y / mag);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (double f) {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) {\n        Vector v;\n        if (vec.x == 0.0) {\n            v.setX(0.0);\n        } else {\n            v.setX(x / vec.x);\n        }\n        \n        if (vec.y == 0.0) {\n            v.setY(0.0);\n        } else {\n            v.setY(y / vec.y);\n        }\n        return v;\n    }\n    \n    Vector operator / (double f) {\n        Vector v;\n        if (f == 0.0) {\n            v.set(0.0, 0.0);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.0) {\n            x = 0.0;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.0) {\n            y = 0.0;\n        } else {\n            y /= vec.y;\n        }\n    }\n};\n\n\nint main() {\n    Vector vec1, vec2;\n    double x, y;\n    cin >> x;\n    cin >> y;\n    vec1.set(x,y);\n    cin >> x;\n    cin >> y;\n    vec2.set(x,y);\n    \n    int n;\n    cin >> n;\n    \n    Vector vec = vec2 - vec1;\n    Vector p, ret;\n    vector<Vector> results;\n    for (int i = 0; i < n; i++) {\n        double px, py;\n        cin >> px;\n        cin >> py;\n        p.set(px, py);\n        p -= vec1;\n        \n        double cos = p.getAngle(vec);\n        double size = p.getMagnitude() * cos;\n        ret = vec.getUnit() * size;\n        \n        results.push_back(ret);\n    }\n    \n    for (int i = 0; i < results.size(); i++) {\n        printf(\"%10.10f %10.10f\", results[i].x, results[i].y);\n        cout << endl;\n     }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point p){ return Point(x * p.x, y * p.y); }\n\tPoint operator / (Point p){ return Point(x / p.x, y / p.y); }\n\n\tPoint operator * (double t){ return Point(x * t, y * t); }\n\tPoint operator / (double t){ return Point(x / t, y / t); }\n\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x * x + y * y; }\n\n\tbool operator<(const Point &p){ return (x != p.x) ? (x < p.x) : (y < p.y); }\n\tbool operator==(const Point &p)\n\t{\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment{\npublic:\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nPoint projection(Segment s, Point p){\n\tVector v1 = s.p2 - s.p1;\n\tVector v2 = p - s.p1;\n\treturn s.p1 + v1 * dot(v1, v2) / v1.norm();\n}\n\nint main()\n{\n\tstd::ios_base::sync_with_stdio(false);\n\tcout.precision(10);\n\n\tSegment s;\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\n\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; ++i){\n\t\tPoint p; cin >> p.x >> p.y;\n\t\tPoint res = projection(s, p);\n\t\tcout << res.x << \" \" << res.y << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include<unordered_map>\n#include<unordered_set>\n#pragma warning(disable:4996)\nusing namespace std;\nusing ld = long double;\ntemplate<class T>\nusing Table = vector<vector<T>>;\nconst ld eps=1e-9;\n\n//// < \"D:\\D_Download\\Visual Studio 2015\\Projects\\programing_contest_c++\\Debug\\a.txt\" > \"D:\\D_Download\\Visual Studio 2015\\Projects\\programing_contest_c++\\Debug\\b.txt\"\n \n\n/* ??????????????¬ */\n\n#include <complex>\n\ntypedef complex<ld> Point;\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define all(x) (x).begin(),(x).end()\n\n\nconst ld pi = acos(-1.0);\nconst ld dtop = pi / 180.;\nconst ld ptod = 1. / dtop;\n\nnamespace std {\n\tbool operator<(const Point &lhs, const Point &rhs) {\n\t\tif (lhs.real() < rhs.real() - eps) return true;\n\t\tif (lhs.real() > rhs.real() + eps) return false;\n\t\treturn lhs.imag() < rhs.imag();\n\t}\n}\n\n// ????????\\???\nPoint input_Point() {\n\tld x, y;\n\tcin >> x >> y;\n\treturn Point(x, y);\n}\n\n// ????????????????????????\nbool eq(const ld a, const ld b) {\n\treturn (abs(a - b) < eps);\n}\n\n// ??????\nld dot(const Point& a, const Point& b) {\n\treturn real(conj(a) * b);\n}\n\n// ??????\nld cross(const Point& a, const Point& b) {\n\treturn imag(conj(a) * b);\n}\n\n// ??´????????????\nclass Line {\npublic:\n\tPoint a, b;\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\tLine(Point a, Point b) : a(a), b(b) {}\n\tPoint operator[](const int _num)const {\n\t\tif (_num == 0)return a;\n\t\telse if (_num == 1)return b;\n\t\telse {\n\t\t\tassert(false);\n\t\t\treturn Point();\n\t\t}\n\t}\n};\n\n// ????????????\nclass Circle {\npublic:\n\tPoint p;\n\tld r;\n\tCircle() : p(Point(0, 0)), r(0) {}\n\tCircle(Point p, ld r) : p(p), r(r) {}\n};\n\n// ccw\nint ccw(const Point& a, const Point &b, const Point &c) {\n\tconst Point nb(b - a);\n\tconst Point nc(c - a);\n\tif (cross(nb, nc) > eps) return 1;   // a,b,c??????????¨???¨?????????????????¶\n\tif (cross(nb, nc) < -eps) return -1; // a,b,c???????¨???¨?????????????????¶\n\tif (dot(nb, nc) < 0) return 2;       // c,a,b???????????´???????????¶\n\tif (norm(nb) < norm(nc)) return -2;  // a,b,c???????????´???????????¶\n\treturn 0;                          // a,c,b???????????´???????????¶\n}\n\n\n/* ???????????? */\n\n// ??´?????¨??´??????????????????\nbool isis_ll(const Line& l, const Line& m) {\n\treturn !eq(cross(l.b - l.a, m.b - m.a), 0);\n}\n\n// ??´?????¨?????????????????????\nbool isis_ls(const Line& l, const Line& s) {\n\treturn isis_ll(l, s) &&\n\t\t(cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\n// ????????¨?????????????????????\nbool isis_ss(const Line& s, const Line& t) {\n\treturn ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n\t\tccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// ????????´????????????\nbool isis_lp(const Line& l, const Point& p) {\n\treturn (abs(cross(l.b - p, l.a - p)) < eps);\n}\n\n// ?????????????????????\nbool isis_sp(const Line& s, const Point& p) {\n\treturn (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);\n}\n\n// ??????????¶?\nPoint proj(const Line &l, const Point& p) {\n\tld t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n\treturn l.a + t * (l.a - l.b);\n}\n\n// ??´?????¨??´????????????\nPoint is_ll(const Line &s, const Line& t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tassert(cross(sv, tv) != 0);\n\treturn s.a + sv * cross(tv, t.a - s.a) / cross(tv, sv);\n}\n// ??´?????¨??´????????????\nvector<Point> is_ll2(const Line &s, const Line& t) {\n\tPoint sv = s.b - s.a, tv = t.b - t.a;\n\tif (cross(sv, tv) != 0)return vector<Point>(1, is_ll(s, t));\n\telse {\n\t\tvector<Point>ans;\n\t\tfor (int k = 0; k < 2; ++k) {\n\t\t\tif (isis_sp(s, t[k]) && find(ans.begin(), ans.end(), t[k]) == ans.end())ans.push_back(t[k]);\n\t\t\tif (isis_sp(t, s[k]) && find(ans.begin(), ans.end(), s[k]) == ans.end())ans.push_back(s[k]);\n\t\t}\n\t\treturn ans;\n\t}\n}\n// ????????¨???????????????\n//???????????£????????¨???????????¨assert(false)\nPoint is_ss(const Line &s, const Line& t) {\n\tif (isis_ss(s, t)) {\n\t\tfor (int k = 0; k < 2; ++k) {\n\t\t\tfor (int l = 0; l < 2; ++l) {\n\t\t\t\tif (s[k] == t[l])return s[k];\n\t\t\t}\n\t\t}\n\t\treturn is_ll(s, t);\n\t}\n\telse {\n\t\t//??????isis_ss?????????\n\t\tassert(false);\n\t\treturn Point(0, 0);\n\t}\n}\n// ????????¨???????????????\nvector<Point> is_ss2(const Line &s, const Line& t) {\n\tvector<Point> kouho(is_ll2(s, t));\n\tvector<Point>ans;\n\tfor (auto p : kouho) {\n\t\tif (isis_sp(s, p) && isis_sp(t, p))ans.emplace_back(p);\n\t}\n\treturn ans;\n}\n// ??´?????¨???????????¢\nld dist_lp(const Line& l, const Point& p) {\n\treturn abs(p - proj(l, p));\n}\n\n//??´?????¨??´???????????¢\nld dist_ll(const Line& l, const Line& m) {\n\treturn isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\n// ??´?????¨??????????????¢\nld dist_ls(const Line& l, const Line& s) {\n\treturn isis_ls(l, s) ? 0 : min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\n// ????????¨???????????¢\nld dist_sp(const Line& s, const Point& p) {\n\tPoint r = proj(s, p);\n\treturn isis_sp(s, r) ? abs(r - p) : min(abs(s.a - p), abs(s.b - p));\n}\n\n// ????????¨??????????????¢\nld dist_ss(const Line& s, const Line& t) {\n\tif (isis_ss(s, t)) return 0;\n\treturn min({ dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b) });\n}\n\n\n//??´?????¨??´?????????????????????????????????\nLine bisection(const Line &s, const Line &t) {\n\tconst Point laglanju(is_ll(s, t));\n\tconst Point avec = !(abs(laglanju - s[0])<eps) ? s[0] - laglanju : s[1] - laglanju;\n\tconst Point bvec = !(abs(laglanju - t[0])<eps) ? t[0] - laglanju : t[1] - laglanju;\n\n\treturn Line(laglanju, laglanju + (abs(bvec)*avec + abs(avec)*bvec) / (abs(avec) + abs(bvec)));\n}\n\n\n//???????????´?????????????????????\n//???????????´??????????????§???????????¨????¢?????????¨?????????\nPoint  inner_center(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tfor (int i = 0; i <static_cast<int>(ls.size()); ++i) {\n\t\tvertics.push_back(is_ll(ls[i], ls[(i + 1) % 3]));\n\t}\n\tif (vertics[0] == vertics[1] || vertics[1] == vertics[2] || vertics[2] == vertics[0])return vertics[0];\n\tLine bi1(bisection(Line(vertics[0], vertics[1]), Line(vertics[0], vertics[2])));\n\tLine bi2(bisection(Line(vertics[1], vertics[2]), Line(vertics[1], vertics[0])));\n\tif (bi1[0] == bi2[0])return bi1[0];\n\telse {\n\t\treturn is_ll(bi1, bi2);\n\t}\n}\n\n//???????????´?????????????????????\n//???????????´??????????????§???????????¨????¢?????????¨?????????\nvector<Point>  ex_center(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tfor (int i = 0; i < static_cast<int>(ls.size()); ++i) {\n\t\tvertics.push_back(is_ll(ls[i], ls[(i + 1) % 3]));\n\t}\n\tif (abs(vertics[0] - vertics[1])<eps || abs(vertics[1] - vertics[2])<eps || (abs(vertics[2] - vertics[0])<eps))return vector<Point>();\n\tvector<Point>ecs;\n\tfor (int i = 0; i < 3; ++i) {\n\t\tLine bi1(bisection(Line(vertics[i], vertics[i] * 2.0l - vertics[(i + 2) % 3]), Line(vertics[i], vertics[(i + 1) % 3])));\n\t\tLine bi2(bisection(Line(vertics[(i + 1) % 3], vertics[(i + 1) % 3] * 2.0l - vertics[(i + 2) % 3]), Line(vertics[(i + 1) % 3], vertics[i])));\n\t\tecs.push_back(is_ll(bi1, bi2));\n\t}\n\treturn ecs;\n}\n\n\n//a,b:??????\n//c:????????§??????\n//???????????´?????????????????¢?????????????±??????????\nvector<Point>  same_dis(const vector<Line>&ls) {\n\tvector<Point>vertics;\n\tvertics.push_back(is_ll(ls[0], ls[2]));\n\tvertics.push_back(is_ll(ls[1], ls[2]));\n\n\tif (abs(vertics[0] - vertics[1]) < eps)return vector<Point>{vertics[0]};\n\tLine bis(bisection(ls[0], ls[1]));\n\tvector<Point>ecs;\n\n\tLine abi(bisection(Line(vertics[0], vertics[1]), ls[0]));\n\tecs.push_back(is_ll(bis, abi));\n\n\n\tLine bbi(bisection(Line(vertics[0], 2.l*vertics[0] - vertics[1]), ls[0]));\n\tecs.push_back(is_ll(bis, bbi));\n\n\treturn ecs;\n}\n/* ??? */\n\n// ?????¨????????????\nvector<Point> is_cc(const Circle& c1, const Circle& c2) {\n\tvector<Point> res;\n\tld d = abs(c1.p - c2.p);\n\tld rc = (d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d);\n\tld dfr = c1.r * c1.r - rc * rc;\n\tif (abs(dfr) < eps) dfr = 0.0;\n\telse if (dfr < 0.0) return res; // no intersection\n\tld rs = sqrt(dfr);\n\tPoint diff = (c2.p - c1.p) / d;\n\tres.push_back(c1.p + diff * Point(rc, rs));\n\tif (dfr != 0.0) res.push_back(c1.p + diff * Point(rc, -rs));\n\treturn res;\n}\n\n//???????????????????????????\n/*  0 => out\n1 => on\n2 => in*/\nint is_in_Circle(const Circle &cir, const  Point& p) {\n\tld dis = abs(cir.p - p);\n\tif (dis > cir.r + eps)return 0;\n\telse if (dis < cir.r - eps)return 2;\n\telse return 1;\n}\n//???lc??????rc??????????????????\n/*0 => out\n1 => on\n2 => in*/\nint Circle_in_Circle(const Circle &lc, const  Circle&rc) {\n\tld dis = abs(lc.p - rc.p);\n\tif (dis < rc.r - lc.r - eps)return 2;\n\telse if (dis>rc.r - lc.r + eps)return 0;\n\telse return 1;\n}\n\n// ?????¨??´????????????\nvector<Point> is_lc(const Circle& c, const Line& l) {\n\tvector<Point> res;\n\tld d = dist_lp(l, c.p);\n\tif (d < c.r + eps) {\n\t\tld len = (d > c.r) ? 0.0 : sqrt(c.r * c.r - d * d); //safety;\n\t\tPoint nor = (l.a - l.b) / abs(l.a - l.b);\n\t\tres.push_back(proj(l, c.p) + len * nor);\n\t\tres.push_back(proj(l, c.p) - len * nor);\n\t}\n\treturn res;\n}\n\n// ?????¨??????????????¢\nvector<Point> is_sc(const Circle& c, const Line& l) {\n\tvector<Point> v = is_lc(c, l), res;\n\tfor (Point p : v)\n\t\tif (isis_sp(l, p)) res.push_back(p);\n\treturn res;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cp(const Circle& c, const Point& p) {\n\tvector<Line> ret;\n\tPoint v = c.p - p;\n\tld d = abs(v);\n\tld l = sqrt(norm(v) - c.r * c.r);\n\tif (isnan(l)) { return ret; }\n\tPoint v1 = v * Point(l / d, c.r / d);\n\tPoint v2 = v * Point(l / d, -c.r / d);\n\tret.push_back(Line(p, p + v1));\n\tif (l < eps) return ret;\n\tret.push_back(Line(p, p + v2));\n\treturn ret;\n}\n\n// ?????¨????????\\???\nvector<Line> tangent_cc(const Circle& c1, const Circle& c2) {\n\tvector<Line> ret;\n\tif (abs(c1.p - c2.p) - (c1.r + c2.r) > -eps) {\n\t\tPoint center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n\t\tret = tangent_cp(c1, center);\n\t}\n\tif (abs(c1.r - c2.r) > eps) {\n\t\tPoint out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n\t\tvector<Line> nret = tangent_cp(c1, out);\n\t\tret.insert(ret.end(), all(nret));\n\t}\n\telse {\n\t\tPoint v = c2.p - c1.p;\n\t\tv /= abs(v);\n\t\tPoint q1 = c1.p + v * Point(0, 1) * c1.r;\n\t\tPoint q2 = c1.p + v * Point(0, -1) * c1.r;\n\t\tret.push_back(Line(q1, q1 + v));\n\t\tret.push_back(Line(q2, q2 + v));\n\t}\n\treturn ret;\n}\n//??????????????????????????¢???\nld two_Circle_area(const Circle&l, const Circle&r) {\n\tld dis = abs(l.p - r.p);\n\tif (dis > l.r + r.r)return 0;\n\telse if (dis + r.r < l.r) {\n\t\treturn r.r*r.r*pi;\n\t}\n\telse if (dis + l.r < r.r) {\n\t\treturn l.r*l.r*pi;\n\t}\n\telse {\n\t\tld ans = (l.r)*(l.r)*acos((dis*dis + l.r*l.r - r.r*r.r) / (2 * dis*l.r)) +\n\t\t\t(r.r)*(r.r)*acos((dis*dis + r.r*r.r - l.r*l.r) / (2 * dis*r.r)) -\n\t\t\tsqrt(4 * dis*dis*l.r*l.r - (dis*dis + l.r*l.r - r.r*r.r)*(dis*dis + l.r*l.r - r.r*r.r)) / 2;\n\t\treturn ans;\n\t}\n\n}\n\n/* ????§???¢ */\n\ntypedef vector<Point> Polygon;\n\n// ??¢???\nld area(const Polygon &p) {\n\tld res = 0;\n\tint n = p.size();\n\trep(j, n) res += cross(p[j], p[(j + 1) % n]);\n\treturn res / 2;\n}\n\n//????§???¢????????¢??????\nbool is_counter_clockwise(const Polygon &poly) {\n\tld angle = 0;\n\tint n = poly.size();\n\trep(i, n) {\n\t\tPoint a = poly[i], b = poly[(i + 1) % n], c = poly[(i + 2) % n];\n\t\tangle += arg((c - b) / (b - a));\n\t}\n\treturn angle > eps;\n}\n\n// ??????????????????\n/*0 => out\n1 => on\n2 => in*/\nint is_in_Polygon(const Polygon &poly, const  Point& p) {\n\tld angle = 0;\n\tint n = poly.size();\n\trep(i, n) {\n\t\tPoint a = poly[i], b = poly[(i + 1) % n];\n\t\tif (isis_sp(Line(a, b), p)) return 1;\n\t\tangle += arg((b - p) / (a - p));\n\t}\n\treturn eq(angle, 0) ? 0 : 2;\n}\n//??????????????????2?????????\nenum { out, on, in };\nint convex_contains(const Polygon &P, const Point &p) {\n\tconst int n = P.size();\n\tPoint g = (P[0] + P[n / 3] + P[2 * n / 3]) / 3.0l; // inner-point\n\tint a = 0, b = n;\n\twhile (a + 1 < b) { // invariant: c is in fan g-P[a]-P[b]\n\t\tint c = (a + b) / 2;\n\t\tif (cross(P[a] - g, P[c] - g) > 0) { // angle < 180 deg\n\t\t\tif (cross(P[a] - g, p - g) > 0 && cross(P[c] - g, p - g) < 0) b = c;\n\t\t\telse                                                  a = c;\n\t\t}\n\t\telse {\n\t\t\tif (cross(P[a] - g, p - g) < 0 && cross(P[c] - g, p - g) > 0) a = c;\n\t\t\telse                                                  b = c;\n\t\t}\n\t}\n\tb %= n;\n\tif (cross(P[a] - p, P[b] - p) < 0) return 0;\n\tif (cross(P[a] - p, P[b] - p) > 0) return 2;\n\treturn 1;\n}\n\n// ??????\n//???????????????????????¨????????????????????§??¨???\nPolygon convex_hull(vector<Point> ps) {\n\tint n = ps.size();\n\tint k = 0;\n\tsort(ps.begin(), ps.end());\n\tPolygon ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++])\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n\n\n//????????????\nvector<Polygon> convex_cut(const Polygon &ps, const Line& l) {\n\tint n = ps.size();\n\tPolygon q;\n\tPolygon r;\n\trep(i, n) {\n\t\tPoint a = ps[i], b = ps[(i + 1) % n];\n\t\tLine m = Line(a, b);\n\t\tif (ccw(l.a, l.b, a) != -1) q.push_back(a);\n\t\tif (ccw(l.a, l.b, a) != 1) r.push_back(a);\n\t\tif (ccw(l.a, l.b, a) * ccw(l.a, l.b, b) < 0 && isis_ll(l, m)) {\n\t\t\tq.push_back(is_ll(l, m));\n\t\t\tr.push_back(is_ll(l, m));\n\t\t}\n\t}\n\tconst vector<Polygon>polys{ q,r };\n\treturn polys;\n}\n\n\n/* ??¢??¬??????????????? */\nvoid add_Point(vector<Point> &ps, const Point p) {\n\tfor (Point q : ps) if (abs(q - p) < eps) return;\n\tps.push_back(p);\n}\n\ntypedef int Weight;\nstruct edge {\n\tint src, dst;\n\tWeight weight;\n\tedge(int src, int dst, Weight weight) :\n\t\tsrc(src), dst(dst), weight(weight) { }\n};\n\ntypedef vector<edge> edges;\ntypedef vector<edges> graph;\n\nvoid add_edge(graph &g, const int from, const int to, const Weight weight) {\n\tg[from].push_back(edge{ from, to, weight });\n}\n\ngraph segment_arrangement(const vector<Line> &s, const vector<Point> &p) {\n\tint n = p.size(), m = s.size();\n\tgraph g(n);\n\trep(i, m) {\n\t\tvector<pair<ld, int>> vec;\n\t\trep(j, n) if (isis_sp(s[i], p[j]))\n\t\t\tvec.emplace_back(abs(s[i].a - p[j]), j);\n\t\tsort(all(vec));\n\t\trep(j, vec.size() - 1) {\n\t\t\tint from = vec[j].second, to = vec[j + 1].second;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(abs(p[from] - p[to])));\n\t\t}\n\t}\n\treturn g;\n}\ngraph sennbunn_arrangement(const vector<Line>&s) {\n\tvector<Point>crss;\n\tfor (int i = 0; i < static_cast<int>(s.size()); ++i) {\n\t\tfor (int j = i + 1; j < static_cast<int>(s.size()); ++j) {\n\t\t\tif (isis_ss(s[i], s[j])) {\n\t\t\t\tcrss.push_back(is_ll2(s[i], s[j])[0]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i <static_cast<int>(s.size()); ++i) {\n\t\tcrss.push_back(s[i][0]);\n\t\tcrss.push_back(s[i][1]);\n\t}\n\treturn segment_arrangement(s, crss);\n}\n\ngraph Circle_arrangement(const vector<Circle> &c, const vector<Point> &p) {\n\tint n = p.size(), m = c.size();\n\tgraph g(n);\n\trep(i, m) {\n\t\tvector<pair<ld, int>> vec;\n\t\trep(j, n) if (abs(abs(c[i].p - p[j]) - c[i].r) < eps)\n\t\t\tvec.emplace_back(arg(c[i].p - p[j]), j);\n\t\tsort(all(vec));\n\t\trep(j, vec.size() - 1) {\n\t\t\tint from = vec[j].second, to = vec[j + 1].second;\n\t\t\tld angle = vec[j + 1].first - vec[j].first;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(angle * c[i].r));\n\t\t}\n\t\tif (vec.size() >= 2) {\n\t\t\tint from = vec.back().second, to = vec.front().first;\n\t\t\tld angle = vec.front().first - vec.back().first;\n\t\t\tadd_edge(g, from, to, static_cast<Weight>(angle * c[i].r));\n\t\t}\n\t}\n\treturn g;\n}\n\nint main() {\n\tint x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;\n\tLine l(Point(x1, y1), Point(x2, y2));\n\tint Q; cin >> Q;\n\tcout << setprecision(22) << fixed;\n\twhile (Q--) {\n\t\tint x, y; cin >> x >> y;\n\t\tPoint p(x, y);\n\t\tPoint ans = proj(l, p);\n\t\tcout << ans.real() << \" \" << ans.imag() << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\nusing namespace std;\nclass point{\npublic:\n    double x,y;\n    point(double x=0,double y=0):x(x),y(y){};               //1.记得设初值\n    point operator +(point a){\n        return point(x+a.x,y+a.y);\n    }\n    point operator -(point a){\n        return point(x-a.x,y-a.y);\n    }\n    double operator *(point a){\n        return x*a.x+y*a.y;\n    }\n    point operator *(double a){\n        return point(x*a,y*a);\n    }\n    void print(){\n        printf(\"%.10lf %.10lf\\n\",x,y);\n    }\n};\nstruct segment{\n    point p1,p2,base;\n    segment(point a,point b){                                          //1.不然无法构造形参\n        p1=a,p2=b,base=b-a;\n    }\n};\nvoid project(segment s,point p){\n    double r=(p-s.p1)*s.base/(s.base*s.base);\n    (s.p1+s.base*r).print();\n    return;\n}\nint main(){\n    int n;\n    double x1,y1,x2,y2;\n    scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n    segment s(point(x1,y1),point(x2,y2));\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i){\n        scanf(\"%lf%lf\",&x1,&y1);\n        project(s,point(x1,y1));\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<queue>\n\nusing namespace std;\ntypedef long long LL;\n\nconst int Pi = acos(-1.0);\nconst int INf = 0x7fffffff;\nconst int eps = 1e-9;\n\nint sgn(double d) {\n    if(abs(d) < eps)\n        return 0;\n    if(d > 0)\n        return 1;\n    return -1;\n}\n\nint dcmp(double x, double y) {\n    if(abs(x - y) < eps)\n        return 0;\n    if(x > y)\n        return 1;\n    return -1;\n}\n\nstruct Point {\n    double x, y;\n    Point(double _x = 0, double _y = 0):x(_x), y(_y){}\n};\n\ntypedef Point Vector;\n\nVector operator + (Vector A, Vector B) {\n    return Vector(A.x + B.x, A.y + B.y);\n}\n\nVector operator - (Point A, Point B) {\n    return Vector(A.x - B.x, A.y - B.y);\n}\n\nVector operator * (Vector A, double p) {\n    return Vector(A.x * p, A.y * p);\n}\n\nVector operator / (Vector A, double p) {\n    return Vector(A.x / p, A.y / p);\n}\n\nbool operator == (const Point &a, const Point &b) {\n    if(sgn(a.x-b.x) == 0 && sgn(a.y-b.y) == 0)\n        return true;\n    return false;\n}\n\ndouble Dot(Vector A, Vector B) {\n    return A.x * B.x + A.y * B.y;\n}\n\ndouble Cross(Vector A, Vector B) {\n    return A.x * B.y - B.x * A.y;\n}\n\ndouble Length(Vector A) {\n    return sqrt(Dot(A, A));\n}\n\ndouble Angle(Vector A, Vector B) {\n    return acos(Dot(A, B) / Length(A) / Length(B));\n}\n\ndouble Area2(Point A, Point B, Point C) {\n    return Cross(B - A, C - A);\n}\n\nVector Rotate(Vector A, double rad) { // 逆时针旋转rad\n    return Vector(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) - A.y * cos(rad));\n}\n\nVector Normal(Vector A) {      //A左转90°的单位法向量\n    double L = Length(A);\n    return Vector(-A.y / L, A.x / L);\n}\n\nbool ToLeftTest(Point a, Point b, Point c) {\n    return Cross(b - a, c - a) > 0;\n}\n\nstruct Line {\n    Point v, p;\n    Line(Point v, Point p) : v(v), p(p){}\n    Point point(double t) {\n        return v + (p - v) * t;\n    }\n};\n\nPoint GetLineIntersection(Point P, Vector v, Point Q, Vector w) {\n    Vector u = P - Q;\n    double t = Cross(w, u) / Cross(v, w);\n    return P + v * t;\n}\n\ndouble DistanceToLine(Point P, Point A, Point B) {\n    Vector v1 = B - A, v2 = P - A;\n    return fabs(Cross(v1, v2) / Length(v1));\n}\n\ndouble DistanceToSegment(Point P, Point A, Point B) {\n    if(A == B)\n        return Length(P - A);\n    Vector v1 = B - A, v2 = P - A, v3 = P - B;\n    if(sgn(Dot(v1, v2)) < 0)\n        return Length(v2);\n    if(sgn(Dot(v1, v3)) > 0)\n        return Length(v3);\n    return DistanceToLine(P, A, B);\n}\n\nPoint GetLineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A + v * (Dot(v, P - A) / Dot(v, v));\n}\n\nint main() {\n    Point A, B, P;\n    scanf(\"%lf%lf%lf%lf\", &A.x, &A.y, &B.x, &B.y);\n    int q;\n    scanf(\"%d\", &q);\n    while(q--) {\n        scanf(\"%lf%lf\", &P.x, &P.y);\n        Point ans = GetLineProjection(P, A, B);\n        printf(\"%.10f %.10f\\n\", ans.x, ans.y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<sstream>\n#include<algorithm>\n#include<climits>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<cfloat>\n#include<functional>\n#include<map>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<deque>\n#include<set>\n#include<bitset>\n#include<list>\n#include<numeric>\n#include<complex>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> i_i;\ntypedef pair<long long, int> ll_i;\ntypedef pair<double, int> d_i;\ntypedef pair<long long, long long> ll_ll;\ntypedef pair<double, double> d_d;\n\n#define PI 3.141592653589793238462643383279\n#define mod 1000000007LL\n#define rep(i, n) for(i = 0;i < n;++i)\n#define rep1(i, n) for(i = 1;i < n;++i)\n#define rep2d(i, j, n) for(i = 0;i < n;++i)for(j = i + 1;j < n;++j)\n#define per(i, n) for(i = n - 1;i > -1;--i)\n#define int(x) int x; scanf(\"%d\",&x)\n#define int2(x, y) int x, y; scanf(\"%d%d\",&x, &y)\n#define int3(x, y, z) int x, y, z; scanf(\"%d%d%d\",&x, &y, &z)\n#define scn(n, a) rep(i, n)cin >> a[i]\n#define sc2n(n, a, b) rep(i, n)cin >> a[i] >> b[i]\n#define pri(x) cout << x << \"\\n\"\n#define pri2(x, y) cout << x << \" \" << y << \"\\n\"\n#define pri3(x, y, z) cout << x << \" \" << y << \" \" << z << \"\\n\"\n#define pb push_back\n#define mp make_pair\n#define all(a) (a).begin(),(a).end()\n#define endl \"\\n\"\n#define kabe puts(\"---------------------------\")\n#define kara puts(\"\")\n#define debug(x) cout << \" --- \" << x << \"\\n\"\n#define debug2(x, y) cout << \" --- \" << x << \" \" << y << \"\\n\"\n#define debug3(x, y, z) cout << \" --- \" << x << \" \" << y << \" \" << z << \"\\n\"\n#define X first\n#define Y second\n#define eps 0.0001\n#define prid(x) printf(\"%.15lf\\n\", x)\n\nstruct vec{\n  double x, y;\n  vec operator+(const vec& a) const { return (vec){x + a.x, y + a.y}; }\n  vec operator-(const vec& a) const { return (vec){x - a.x, y - a.y}; }\n  vec sca(double t){ return (vec){t * x, t * y}; }\n  double dot(vec a){ return x * a.x + y * a.y; }\n  double cross(vec a){ return x * a.y - y * a.x; }\n  double norm(){ return x * x + y * y; };\n};\nstruct line{\n  vec a, b;\n  vec getvec(){ return b - a; }\n  vec proj(vec p){\n    vec pa = p - a, ba = b - a;\n    double t = pa.dot(ba) / ba.norm();\n    return a + ba.sca(t);\n  }\n};\n\nsigned main(void){\n  int i, j, k;\n  line l;\n  cin >> l.a.x >> l.a.y >> l.b.x >> l.b.y;\n  int(q);\n  for(;q--;){\n    vec p;\n    cin >> p.x >> p.y;\n    vec res = l.proj(p);\n    printf(\"%.15lf %.15lf\\n\", res.x, res.y);\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//AOJ-CGL-1-A\n#include <bits/stdc++.h>\nusing namespace std;\n#define REP(i,a) for(int i = 0; i < (a); i++)\n#define ALL(a) (a).begin(),(a).end()\ntypedef long long ll;\ntypedef pair<int, int> P;\nconst int INF = 1e9;\nconst int MOD = 1e9 + 7;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\n\nstruct Point {\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n    \n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) { return a.x * a.x + a.y * a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nstruct Circle {\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n    return abs(a - b);\n}\n\ndouble getDistanceLP(Line l, Point p) {\n    return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n    if ( dot(s.p2 - s.p1, p - s.p1) < 0.0 ) return abs(p - s.p1);\n    if ( dot(s.p1 - s.p2, p - s.p2) < 0.0 ) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\nbool intersect(Segment s1, Segment s2);\n\ndouble getDistance(Segment s1, Segment s2) {\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n               min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if( cross(a, b) > EPS ) return COUNTER_CLOCKWISE;\n    if( cross(a, b) < -EPS ) return CLOCKWISE;\n    if( dot(a, b) < -EPS ) return ONLINE_BACK;\n    if( a.norm() < b.norm() ) return ONLINE_FRONT;\n\n    return ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return ( ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0 );\n}\n\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n    // assert(intersect(c, l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n    // assert(intersect(c1, c2));\n    double d = abs(c1.c - c2.c);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n// IN : 2, ON : 1, OUT : 0\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for( int i = 0; i < n; i++ ) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if ( abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n        if ( a.y > b.y ) swap(a, b);\n        if ( a.y < EPS && EPS < b.y && cross(a, b) > EPS ) x = !x;\n    }\n    return ( x ? 2 : 0 );\n}\n\nsigned main(){\n    double x1, y1, x2, y2;\n    int q;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Line s = Line(Point(x1, y1), Point(x2, y2));\n    cin >> q;\n    double x0, y0;\n    REP(i,q){\n        cin >> x0 >> y0;\n        Point p = project(s, Point(x0, y0));\n        cout << setprecision(16) << p.x << \" \" << p.y << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "/**計算幾何学の問題を解く際に利用するクラス******/\n//http://skyblueryu.blog54.fc2.com/blog-entry-27.html\n#define _USE_MATH_DEFINES\n#include <cmath>\n#include <vector>\n#define EPS (pow(M_E,(double)-10))\n//マクロの書式については \n//http://www7b.biglobe.ne.jp/~robe/cpphtml/html01/cpp01030.html\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\n\nclass Point{\npublic:\n\tdouble x,y;\n\n\t//以下の記法に関しては\n\t//http://ameblo.jp/nana-2007-july/entry-10037680575.html\n\tPoint(double x = 0,double y = 0): x(x), y(y) {};\n\n\t/***演算子のオーバーロード***********/\n\tPoint operator + (Point p) { return Point(x + p.x,y + p.y);}\n\tPoint operator - (Point p) { return Point(x - p.x,y - p.y);}\n\tPoint operator * (double a) { return Point(a*x,a*y);}//スカラー倍\n\tPoint operator / (double a) { return Point(x/a,y/a);}//スカラー倍\n\t/***********************************/\n\n\tdouble norm() { return x*x+y*y;}//ベクトルのノルムを返す\n\tdouble abs() { return sqrt(norm());}//ベクトルの長さを返す\n\n\t/***演算子のオーバーロード2***********/\n\t//Pointはクラスオブジェクトなのでサイズが大きく値渡しは適さない\n\t//Point &pという記法は参照渡しでポインタでない変数\n\t//に対してアドレスを引数にとりたい場合に使う．\n\t//参照渡しとポインタ渡しについては以下\n\t//http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1320144958\n\t//http://homepage2.nifty.com/well/Reference.html#PASS_BY_REFERENCE\n\t//\n\t//Point &pの前のconst修飾子は関数内で引数のオブジェクトの内容を\n\t//勝手に書き換えないようにするために付けている．(const Point &p)\n\t//の後のconstはこの関数がconstメンバ関数であることを意味する．\n\t//constメンバ関数に関して詳しくは以下\n\t//http://www.s-cradle.com/developer/sophiaframework/tutorial/Cpp/const.html\n\n\tbool operator < (const Point &p) const{\n\t\t//(条件)?(処理1):(処理2)\n\t\t//条件が真なら処理1，偽なら処理2が実行される\n\t\treturn x != p.x ? x < p.x :y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\t/*************************************/\n\n};\n\ntypedef Point Vector;\n\n//ベクトルaとbの内積を計算する関数\n//これは参照渡しじゃなくていいんかいという疑問は正直ある\ndouble dot(Vector a,Vector b){\n\t//double dot(const Vector& a,const Vector& b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//ベクトルaとbの外積を計算する関数\ndouble cross(Vector a,Vector b){\n\t//double cross(const Vector& a,const Vector& b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n\n\n//線分を表す構造体\nstruct Segment{\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\n//円を表すクラス\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(),double r = 0.0):c(c), r(r) {}\n};\n\n//多角形の表現(多角形は点の列で表現できる)\ntypedef vector<Point> Polygon;\n\n\nint main(){\n\tPoint p1,p2;\n\tint Q;\n\tscanf(\"%lf %lf\",&p1.x,&p1.y);\n\tscanf(\"%lf %lf\",&p2.x,&p2.y);\n\tscanf(\"%d\",&Q);//クエリ数\n\n\tVector d((p2.x-p1.x),(p2.y-p1.y));//方向ベクトル\n\tdouble abs = d.abs();\n\td.x = d.x/abs;\n\td.y = d.y/abs;\n\n\tPoint p;\n\tVector v;//p1→p\n\tVector proj;\n\tfor(int q = 0;q < Q;q++){\n\t\tscanf(\"%lf %lf\",&p.x,&p.y);\n\n\t\tv.x = p.x - p1.x;\n\t\tv.y = p.y - p1.y;\n\t\tproj.x = d.x * dot(v,d);\n\t\tproj.y = d.y * dot(v,d);\n\t\t\n\t\tprintf(\"%lf %lf\\n\",proj.x + p1.x,proj.y + p1.y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for(int i = 0; i < (int)(n); ++i)\n#define FOR(i,a,b) for(int i = (a); i < (int)(b); ++i)\n#define ALL(c) (c).begin(), (c).end()\n#define SIZE(v) ((int)v.size())\n\ntypedef complex<double> P;\n\ndouble dot(const P& a, const P& b) {\n    return real(conj(a)*b);\n}\n\n\nint main(){\n    double x, y;\n    cin >> x >> y;\n    P p0(x, y);\n    cin >> x >> y;\n    P p1(x, y);\n\n    int Q;\n    cin >> Q;\n    REP(q, Q) {\n        cin >> x >> y;\n        P p2(x, y);\n\n        P vec1 = p1 - p0;\n        P vec2 = p2 - p0;\n\n        P ret = p0 + vec1 * dot(vec1, vec2) / dot(vec1, vec1);\n        printf(\"%.10lf %.10lf\\n\", ret.real(), ret.imag());\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "/*<<head>> {{{*/\n#include <bits/stdc++.h>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <vector>\n#include <cstdio>\n#include <string>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\nusing namespace std;\ntypedef double db;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\n#define dd(x) cout << #x << \" = \" << x << \", \"\n#define de(x) cout << #x << \" = \" << x << endl\n#define rep(i,a,b) for(int i=(a);i<(b);++i)\n#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)\n#define all(x) (x).begin(),(x).end()\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;\n//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;\nconst int INF = 0x3f3f3f3f;     // -INF: 0xc0   abs(-INF) = INF + 1\nconst ll LINF = 0x3f3f3f3f3f3f3f3f;\n/*}}}*/                         // zr, zm\nconst int MOD = (int)1e9+7;     // when MOD = 1e9+7, inv2 = 500000004\nconst int N = (int)-1;\n\n// ------- 变量 ------- //\n\n/* 注意\n  1. 点、向量\n    1. 如果角度出现 -pi ，可以加上 2pi 修正为 pi\n    2. atan2(y, x) 的参数是浮点数时，可能出现 -pi ，如 atan2(-0.0, -1.0)\n  2. 线段、直线\n    1. 线段严格相交定义为：每条线段的两个端点落在另一条线段两边，形象来说，就是可以在图形里看到四个端点和一个交点\n*/\n\ntypedef db T;\nconst db eps = 1e-7, pi = acosl(-1.);\nint sgn(T x) { return (x > eps) - (x < -eps); }\nbool inMid(T a, T x, T b) { return sgn(a - x) * sgn(b - x) <= 0; }  // 数 x 在区间 [a, b] 内（包括边界）\n\n// 点、向量\nstruct P {\n    T x, y; P () {} P(T x, T y) : x(x), y(y) {}\n    P operator + (const P &b) const { return P(x + b.x, y + b.y); }  // 向量加\n    P operator - (const P &b) const { return P(x - b.x, y - b.y); }  // 向量减\n    T operator * (const P &b) const { return x * b.x + y * b.y; }    // 向量点积\n    T operator / (const P &b) const { return x * b.y - y * b.x; }    // 向量叉积\n    P operator * (const T &k) const { return P(x * k, y * k); }      // 向量数乘\n    P operator / (const T &k) const { return P(x / k, y / k); }      // 向量数除\n    bool operator < (const P &b) const { return sgn(x - b.x) ? x < b.x : y < b.y; }  // 左小右大，下小上大\n    bool operator == (const P &b) const { return !sgn(x - b.x) && !sgn(y - b.y); }   // 向量相等\n    P rot(T t) { return P(x * cos(t) - y * sin(t), x * sin(t) + y * cos(t)); }  // 向量逆时针旋转 t 弧度\n    P rot90() { return P(-y, x); }           // 向量逆时针旋转 90 度\n    db arg() const { return atan2(y, x); }   // 方位角 (-pi, pi]\n    T abs() { return sqrt(x * x + y * y); }  // 向量模长\n    T abs2() { return x * x + y * y; }       // 向量模长的平方\n    P unit() { return (*this) / abs(); }     // 单位向量\n    void scan() { db tx, ty; scanf(\"%lf%lf\", &tx, &ty); x = tx; y = ty; }  // 输入\n    void print() { printf(\"%.11lf %.11lf\\n\", x, y); }                      // 输出\n    P toR() { return (sgn(x) == -1 || !sgn(x) && sgn(y) == -1) ? (*this)*(-1) : (*this); }  // 若向量在 2 3 象限，则取其相反向量\n    bool isUp() const { return sgn(y) == 1 || !sgn(y) && sgn(x) == -1; }                    // 向量是否在 1 2 象限\n};\nT dis(P a, P b) { return (b - a).abs(); }   // 点 a 到点 b 的距离\nP symmetry(P p, P a) { return a + a - p; }  // 点 p 关于点 a 的中心对称点\nT cross(P o, P a, P b) { return (a - o) / (b - o); }         // 向量 oa 与 ob 的叉积\nint crossSgn(P o, P a, P b) { return sgn(cross(o, a, b)); }  // 向量 oa 与 ob 的叉积符号\ndb rad(P a, P b) { return atan2(a / b, a * b); }             // 向量 a 与 b 的夹角（弧度制）\nbool order(const P &a, const P &b) { return a.isUp() < b.isUp() || a.isUp() == b.isUp() && sgn(a/b) > 0; }  // 极角排序\n\n// 线段、直线\nstruct L { P s, t; L () {} L(P s, P t) : s(s), t(t) {} };\nbool onPS(P p, L a) { return sgn((a.t-a.s)/(p-a.s))==0 && sgn((p-a.s)*(p-a.t))<=0; }   // 点 p 是否在线段 st 上\nbool inRec(P p, L a) { return inMid(a.s.x, p.x, a.t.x) && inMid(a.s.y, p.y, a.t.y); }  // 点 p 在以直线 a 为对角线的矩形内\nP proj(P p, L a) { return (a.t-a.s) * ( (p-a.s) * (a.t-a.s) / (a.t-a.s).abs2() ) + a.s; }   // 点 p 关于直线 a 的投影点\nP reflect(P p, L a) { return proj(p, a) * 2 - p; }                                          // 点 p 关于直线 a 的对称点\nbool xSSr(const L &a, const L &b) {  // 线段 a 和线段 b 严格相交\n    T c1 = (a.t-a.s) / (b.s-a.s), c2 = (a.t-a.s) / (b.t-a.s);\n    T c3 = (b.t-b.s) / (a.s-b.s), c4 = (b.t-b.s) / (a.t-b.s);\n    return sgn(c1) * sgn(c2) < 0 && sgn(c3) * sgn(c4) < 0;\n}\nbool xSS(L a, L b) {                 // 线段 a 和线段 b 不严格相交\n    T c1 = (a.t-a.s) / (b.s-a.s), c2 = (a.t-a.s) / (b.t-a.s);\n    T c3 = (b.t-b.s) / (a.s-b.s), c4 = (b.t-b.s) / (a.t-b.s);\n    return sgn(c1) * sgn(c2) <= 0 && sgn(c3) * sgn(c4) <= 0 &&\n           sgn(max(a.s.x,a.t.x) - min(b.s.x,b.t.x)) >= 0 &&\n           sgn(max(b.s.x,b.t.x) - min(a.s.x,a.t.x)) >= 0 &&\n           sgn(max(a.s.y,a.t.y) - min(b.s.y,b.t.y)) >= 0 &&\n           sgn(max(b.s.y,b.t.y) - min(a.s.y,a.t.y)) >= 0;\n}\nbool xSL(L a, L b) {  // 线段 a 与直线 b 相交 ( 不严格 : <= ; 严格 : < )\n    return sgn( (b.t - b.s) / (a.s - b.s) ) * sgn( (b.t - b.s) / (a.t - b.s) ) <= 0;\n}\nP xLL(L a, L b) {  // 直线 a 和直线 b 的交点\n    T s1 = (b.t - b.s) / (a.s - b.s), s2 = -( (b.t - b.s) / (a.t - b.s) );\n    return (a.s * s2 + a.t * s1) / (s1 + s2);\n}\ndb disPL(P p, L a) { return fabs( (a.t-a.s) / (p-a.s) ) / (a.t-a.s).abs(); }  // 点 p 到直线 a 的距离\ndb disPS(P p, L a) {                                                          // 点 p 到线段 a 的距离\n    return sgn( (a.t-a.s) * (p-a.s) ) * sgn( (a.s-a.t) * (p-a.t) ) != 1\n           ? disPL(p, a) : min( (p-a.s).abs(), (p-a.t).abs() );\n}\ndb disSS(L a, L b){                                                           // 线段 a 到线段 b 的距离\n    if (xSS(a,b)) return 0;\n    return min( min( disPS(a.s,b), disPS(a.t,b) ), min( disPS(b.s,a), disPS(b.t,a) ) );\n}\ndb disLL(L a, L b) { return (a.t-a.s) / (b.t-b.s) ? 0 : disPL(a.s, b); }      // 直线 a 到直线 b 的距离\n\n// 多边形、凸包\ntypedef vector<P> polygon;\npolygon Convex(polygon A) {  // 求凸包，逆时针排序（ 内角 <180 : (<=) ; 内角 <=180 : (<) ）\n    int n = sz(A); if (n <= 1) return A;\n    sort(all(A));\n    polygon B;\n    for (int i = 0; i < n; B.pb(A[i++]))\n        while (sz(B) > 1 && crossSgn(B[sz(B)-2], B.back(), A[i]) < 0) B.pop_back();  // 更改这里的 <\n    for (int i = n - 2, t = sz(B); i >= 0; B.pb(A[i--]))\n        while (sz(B) > t && crossSgn(B[sz(B)-2], B.back(), A[i]) < 0) B.pop_back();  // 同上\n    B.pop_back(); return B;\n}\nT area(polygon A) {  // 多边形 A 的面积，整型可以返回面积的两倍，保持精度\n    T res = 0;\n    rep(i, 0, sz(A)) res += A[i] / A[ (i+1) % sz(A) ];\n    return fabs(res) / 2;\n}\nbool isConvex(polygon A) {  // 多边形 A 是否是凸包，要求 A 的点集按逆时针排序\n    rep(i, 0, 2) A.pb(A[i]);\n    rep(i, 0, sz(A)-2) if ( sgn( (A[i+1]-A[i]) / (A[i+2]-A[i]) ) < 0 ) return 0;\n    return 1;\n}\nint inPpolygon(P p, polygon A) {  // 点和多边形关系 ( -1 : on , 0 : out , 1 : in )\n    int res = 0;\n    rep(i, 0, sz(A)) {\n        P u = A[i], v = A[ (i+1) % sz(A) ];\n        if (onPS(p, L(u, v))) return -1;\n        T cross = sgn((v-u)/(p-u)), d1 = sgn(u.y-p.y), d2 = sgn(v.y-p.y);\n        if (cross > 0 && d1 <= 0 && d2 > 0) ++res;\n        if (cross < 0 && d2 <= 0 && d1 > 0) --res;\n    }\n    return res != 0;\n}\n\nstruct C {\n    P o; db r; C () {} C (P o, db r) : o(o), r(r) {}\n};\n\nC getC(P a,P b,P c){  // 三点确定一个圆 （ 三角形外接圆 ）\n    db a1 = b.x - a.x, b1 = b.y - a.y, c1 = (a1 * a1 + b1 * b1) / 2;\n    db a2 = c.x - a.x, b2 = c.y - a.y, c2 = (a2 * a2 + b2 * b2) / 2;\n    db d = a1 * b2 - a2 * b1;\n    P o = P(a.x + (c1 * b2 - c2 * b1) / d, a.y + (a1 * c2 - a2 * c1) / d);\n    return C(o, dis(a, o));\n}\n\nP p[3];\n\n// ------- 函数 ------- //\n\nvoid Init() {\n    rep(i, 1, 3) p[i].scan();\n}\n\nint Solve() {\n    int q; scanf(\"%d\", &q);\n    while (q--) {\n        p[0].scan();\n        proj(p[0], L(p[1], p[2])).print();\n    }\n    return 0;\n}\n\n// ------- main ------- //\n\nint main ()\n{\n    //ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n    //freopen(\"in.txt\", \"r\", stdin);\n    //freopen(\"out.txt\", \"w\", stdout);\n\n    //Pre();\n    //int t; scanf(\"%d\", &t); while (t--) {\n    //while (~scanf(\"%d\", &n)) {\n    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符\n        //if (n == 0) break;\n        //static int kase = 0; printf(\"Case %d: \", ++kase);\n        Init();\n        Solve();\n        //if (t) puts(\"\");\n    //}\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <cmath>\n#include <cstdio>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nVector projection(const Segment& s, const Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    using namespace std;\n    // cerr << \"p: \" << p.x << \", \" << p.y;\n    // cerr << \" dot: \" << dot(p - s.p1, base);\n    // cerr << \" norm: \" << norm(base) << endl;\n    return s.p1 + base * r;\n}\n\nint main() {\n    using namespace std;\n\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Segment s{p1, p2};\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        double x, y;\n        cin >> x >> y;\n        auto p = projection(s, Point{x, y});\n        cout << setprecision(10) << p.x << \" \" << p.y << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <cmath>\n#include <deque>\n#include <iterator>\n#include <map>\n#include <queue>\n#include <string>\n#include <tuple>\n#include <utility>\n#include <limits>\n#include <iomanip>\nusing namespace std;\n\n#define EPS (1e-10)\nusing ll=long long;\ntemplate<class T> using V = vector<T>;\ntemplate<class T, class U> using P = pair<T, U>;\nusing vll = V<ll>;\nusing vvll = V<vll>;\n#define rep(i, k, n) for (ll i=k; i<(ll)n; ++i)\n#define REP(i, n) rep(i, 0, n)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\ntemplate<class T> inline bool chmax(T& a, T b) {if (a<b) {a=b; return true;} return false;}\ntemplate<class T> inline bool chmin(T& a, T b) {if (a>b) {a=b; return true;} return false;}\n\nconst ll MOD = 1000000007;\nconst ll HIGHINF = 1e18;\n\n// 点を表すクラス\nclass Point{\npublic:\n  double x, y;\n  Point(double x=0, double y=0): x(x), y(y) {}\n\n  Point operator + (Point p) {return Point(x+p.x, y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x, y-p.y);}\n  Point operator * (double a) {return Point(a*x, a*y);}\n  Point operator / (double a) {return Point(x/a, y/a);}\n\n  double abs() {return sqrt(norm());}\n  double norm() {return x*x + y*y;}\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x: y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\ntypedef Point Vector;  // ベクトルを表す構造体（成分表示）\n\ndouble dot(Vector a, Vector b) {  // ベクトルの内積\n  return a.x*b.x + a.y*b.y;\n}\ndouble cross(Vector a, Vector b) {  // ベクトルの外積\n  return a.x*b.y - a.y*b.x;\n}\n\nstruct Segment {Point p1, p2;};  // 線分を表す構造体(p1:始点、p2:終点)\ntypedef Segment Line;  // 直線を表す構造体（直線は無限長にする必要あり）\n\n// 直交判定\nbool isOrthogonal(Vector a, Vector b) {  // ベクトル同士の直交判定\n  return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {  // a1とa2、b1とb2をそれぞれ端点にもつ線分の直交判定\n  return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2) {  // 線分s1、s2の直交判定\n  return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// 平行判定\nbool isParallel(Vector a, Vector b) {  // ベクトル同士の平行判定\n  return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {  // a1とa2、b1とb2をそれぞれ端点にもつ線分の平行判定\n  return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2) {  // 線分s1、s2の平行判定\n  return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// 線分sに対する点pの射影\nPoint project(Segment s, Point p) {\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nclass Circle {  // 円を表す構造体\npublic:\n  Point c;  // 中心\n  double r;  // 半径\n  Circle(Point c=Point(), double r=0.0): c(c), r(r) {}\n};\n\ntypedef V<Point> Polygon;  // 多角形を表す構造体（頂点座標の配列）\n\nint main() {\n  ll x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;\n  Segment seg; seg.p1 = Point(x1, y1); seg.p2 = Point(x2, y2);\n  ll q; cin >> q;\n  REP(i, q) {\n    ll qx, qy; cin >> qx >> qy;\n    Point p = project(seg, Point(qx, qy));\n    cout << fixed << setprecision(10) << p.x << ' ' << p.y << endl;\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\n#include <numeric>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long int ll;\ntypedef pair<int,int> Pint;\n\n#define all(x) x.begin(),x.end()\n\nconst ll mod = 1e9+7;\nconst ll INF = 1e9;\nconst ll MAXN = 1e9;\n\ndouble dot(Pint p1,Pint p2){\n\treturn p1.first*p2.first + p1.second*p2.second;\n}\ndouble vector_length(Pint p){\n\treturn pow(p.first*p.first+p.second*p.second,0.5);\n}\n\ndouble cos_(Pint p1,Pint p2){\n\treturn dot(p1,p2)/(vector_length(p1)*vector_length(p2));\n}\n\nvoid proj(Pint p1,Pint p2,Pint a,Pint b){\n\tPint pp = Pint(p2.first-p1.first,p2.second-p1.second);\n\tdouble ans_x = (double)p1.first + vector_length(a)*cos_(a,b)*pp.first/vector_length(pp);\n\tdouble ans_y = (double)p1.second + vector_length(a)*cos_(a,b)*pp.second/vector_length(pp);\n\tprintf(\"%.12f %.12f\\n\", ans_x,ans_y);\n}\n\nbool vector_equal(Pint p,Pint q){\n\treturn (p.first == q.first) && (p.second == q.second);\n}\n\nint main()\n{\n\tPint p1,p2;\n\tcin >> p1.first >> p1.second >> p2.first >> p2.second;\n\tint q;\n\tcin >> q;\n\tfor(int i = 0; i < q; i++){\n\t\tint x,y;\n\t\tcin >> x >> y;\n\n\t\tPint pp = Pint(x,y);\n\t\tif(vector_equal(pp,p1)||vector_equal(pp,p2)){\n\t\t\tcout << x << \" \" << y << endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tPint a = Pint(x-p1.first,y-p1.second);\n\t\tPint b = Pint(p2.first-p1.first,p2.second-p1.second);\n\n\n\t\t// cout << \"a = \" << a.first << \" \" << a.second << \"  \" << vector_length(a) << endl;\n\t\t// cout << \"b = \" << b.first << \" \" << b.second << endl;\n\t\t// cout << \"cos = \" << cos_(a,b) << endl;\n\n\t\tproj(p1,p2,a,b);\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define r(i,n) for(int i=0;i<n;i++)\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\nclass Point{\n  public:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n  Point operator + (Point p){return Point(x+p.x,y+p.y);}\n  Point operator - (Point p){return Point(x-p.x,y-p.y);}\n  Point operator * (double a){return Point(a*x,a*y);}\n  Point operator / (double a){return Point(x/a,y/a);}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x?x<p.x:y<p.y;\n  }\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n  }\n};\n\ntypedef Point vect;\nstruct seg{Point p1,p2;};\n//????????´???\ndouble norm(Point p){return p.x*p.x+p.y*p.y;}\n//??¶??????\ndouble abs(Point p){return sqrt(norm(p));}\n//??????\ndouble dot(Point a,Point b){\n  return a.x*b.x+a.y*b.y;\n}\n//??????\ndouble cross(Point a,Point b){\n  return a.x*b.y-a.y*b.x;\n}\n//??´?????????\nbool C90(seg s1,seg s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\nbool C0(seg s1,seg s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n//?°???±\nPoint projec(seg s,Point p){\n  Point base = s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return s.p1+base*r;\n}\nmain(){\n  int n;\n  seg a;\n  cin>>a.p1.x>>a.p1.y>>a.p2.x>>a.p2.y;\n  cin>>n;\n  while(n--){\n    Point b,c;\n    cin>>b.x>>b.y;\n    c=projec(a,b);\n    cout<<c.x<<' '<<c.y<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\n  \nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n  \nint main(){\n  int n;\n  double ax,ay,bx,by,cx,cy;\n  cin>>ax>>ay>>bx>>by>>n;\n  while(n--){\n    cin>>cx>>cy;\n    P p=project(P(ax,ay),P(bx,by),P(cx,cy));\n    printf(\"%.8f %.8f\\n\",p.real(),p.imag());\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <utility>\n#include <string>\n#include <vector>\n#include <set>\n#include <stack>\n#include <queue>\n#include <map>\n#include <math.h>\n#include <string.h>\n#include <iomanip>\n#include <numeric>\n#include <cstdlib>\n#include <cstdint>\n#include <cmath>\n#include <functional>\n#include <limits>\n#include <cassert>\n#include <bitset>\n#include<complex>\n \nusing namespace std;\n \n/* template */\n \nusing ll = long long;\n \nvoid debug_out() { std::cout << std::endl; }\n \ntemplate <typename Head, typename... Tail>\nvoid debug_out(Head H, Tail... T) {\n  cout << H << \" \";\n  debug_out(T...);\n}\n \n#ifdef LOCAL\n#define debug(...) cout << \"debug: \"; debug_out(__VA_ARGS__)\n#else\n#define debug(...) \n#endif\n \n#define rep(i, a, n) for (int i = (int)(a); i < (int)(n); i++)\n#define rrep(i, a, n) for (int i = ((int)(n-1)); i >= (int)(a); i--)\n#define Rep(i, a, n) for (long long i = (long long)(a); i< (long long)(n); i++)\n#define RRep(i, a, n) for (long long i = ((long long)(n-1ll)); i>=(long long)(a); i--)\n#define all(v) (v).begin(),(v).end()\n#define rall(v) (v).rbegin(),(v).rend()\n \ntemplate <typename T>\nstd::ostream& operator<<(std::ostream& os, std::vector<T> vec) {\n  for (std::size_t i = 0; i < vec.size(); i++)os << vec[i] << (i + 1 == vec.size() ? \"\" : \" \");\n  return os;\n}\n \nstruct Edge{\n    int to;\n    ll weight;\n    Edge(int t, ll w) : to(t), weight(w){ }\n};\n \nstruct edge{\n    int from;\n    int to;\n    ll weight;\n    edge(int f,int t,ll w) : from(f), to(t), weight(w){ }\n};\n \n \nusing Graph = vector<vector<Edge>>;\nusing graph = vector<vector<int>>;\nusing edges = vector<edge>;\n \ntemplate <class T>\ninline bool chmin(T &a, T b){\n    if (a > b){\n        a = b;\n        return true;\n    }\n    return false;\n}\n \ntemplate <class T>\ninline bool chmax(T &a, T b){\n    if (a < b){\n        a = b;\n        return true;\n    }\n    return false;\n}\n \ntemplate <class T>\nT lcm(T a, T b){\n    return (a*b)/gcd(a,b);\n}\n \nll ctoi(char c) {\n\tswitch (c) {\n\tcase '0': return 0; case '1': return 1; case '2': return 2;\n\tcase '3': return 3; case '4': return 4; case '5': return 5;\n\tcase '6': return 6; case '7': return 7; case '8': return 8;\n\tcase '9': return 9;  default: return 0;\n\t}\n}\n \nconstexpr ll LNF = 1LL<<50;\n \nconstexpr int INF = 1e9+7;\n \nconst long double PI=3.14159265358979323846;\n \n \nvector<int> dx = {1,0,-1,1,-1,0};\nvector<int> dy = {1,1,1,0,0,-1};\n \n/* template */\n\ntemplate<class T>\nstruct mycomplex{\n    T real;\n    T imag;\n\n    mycomplex(T x=0, T y=0) : real(x), imag(y) {}\n\n    mycomplex<T> conj(){\n        return mycomplex<T>{real, -imag};\n    }\n\n    T abs(){\n        return sqrt(real*real + imag*imag);\n    }\n\n    T norm(){\n        return (real*real + imag*imag);\n    }\n\n    mycomplex operator-() const {return mycomplex<T>(-real,-imag);}\n    mycomplex& operator+=(const mycomplex<T> a){\n        real += a.real; imag += a.imag;\n        return *this;\n    }\n    mycomplex& operator-=(const mycomplex<T> a){\n        real -= a.real; imag -= a.imag;\n        return *this;\n    }\n    mycomplex& operator*=(const mycomplex<T> a){\n        T x = a.real * real - a.imag * imag;\n        T y = a.imag * real + a.real * imag;\n        real = x; imag = y;\n        return *this;\n    }\n    mycomplex& operator*=(const T a){\n        real *= a;\n        imag *= a;\n        return *this;\n    }\n\n    mycomplex operator+(const mycomplex<T> a) const { return mycomplex<T>(*this) += a; }\n    mycomplex operator-(const mycomplex<T> a) const { return mycomplex<T>(*this) -= a; }\n    mycomplex operator*(const mycomplex<T> a) const { return mycomplex<T>(*this) *= a; }\n    mycomplex operator*(const T a) const { return mycomplex<T>(*this) *= a; }\n\n};\n\nusing P = mycomplex<double>; //点\nusing L = pair<P,P>; //直線\nconst double EPS = 1e-9;\n#define X real()\n#define Y imag()\n\nbool equal(P n, P m){\n    return (n-m).abs() < EPS;\n}\n\ndouble dot(P a, P b){\n    return (a.conj()*b).real;\n}\n\ndouble cross(P a, P b){\n    return (a.conj()*b).imag;\n}\n\nP proj(P a1, P a2, P p){ //点pから直線a1-a2への射影点\n    return a1 +  (a2-a1)*(dot(a2-a1,p-a1)/(a2-a1).norm());\n}\n\nP refl(P a1, P a2, P p){ //点pの直線a1-a2に対して点対称な点\n    return proj(a1,a2,p)*(double)2 - p;\n}\n\nint main(){\n    cin.tie(nullptr);\n    ios::sync_with_stdio(false);\n    double x1,y1,x2,y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    P p1,p2,p;\n    p1 = {x1,y1}; p2 = {x2,y2};\n    int q; cin >> q;\n    while(q){\n        double a,b; cin >> a >> b;\n        p = {a,b};\n        auto x = proj(p1,p2,p);\n        cout << fixed << setprecision(15) << x.real << \" \" << x.imag << '\\n';\n        q--;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<algorithm>\n#include<iostream>\n#include<vector>\n#include<climits>\n#include<cfloat>\n#include<cstdio>\n#define curr(P, i) P[(i) % P.size()]\n#define next(P, i) P[(i+1) % P.size()]\n#define prev(P, i) P[(i+P.size()-1) % P.size()]\n\nusing namespace std;\n\ndouble EPS = 1e-10;\nconst double PI = acos(-1);\n\ndouble add(double a, double b){\n  if(abs(a+b) < EPS * (abs(a)+abs(b)))return 0;\n  return a+b;\n}\n\nstruct point{\n  double x, y;\n  point(){}\n  point(double x,double y) : x(x) , y(y){}\n\n  point operator + (point p){\n    return point(add(x,p.x), add(y,p.y));\n  }\n\n  point operator - (point p){\n    return point(add(x,-p.x), add(y,-p.y));\n  }\n\n  point operator * (double d){\n    return point(x*d,y*d);\n  }\n\n  point operator / (double d){\n    return point(x/d,y/d);\n  }\n};\n\ndouble dot(point a, point b) {\n  return (a.x * b.x + a.y * b.y);\n}\n\ndouble norm(point a){\n  return sqrt(dot(a,a));\n}\n\ntypedef point Vector;\ntypedef pair<point,point> Line;\n\npoint projection(point p,point b){\n  return b*dot(p,b)/dot(b,b);\n}\n\npoint projection(Line l,Vector p){\n  point a=l.second-l.first;\n  point b=p-l.first;\n  return l.first+projection(b,a);\n}\n\nint main(void){\n\n  Line l;\n  point c;\n  int q;\n  cin >> l.first.x >> l.first.y >> l.second.x >> l.second.y;\n  cin >> q;\n  while(q--){\n    cin >> c.x >> c.y;\n    point res=projection(l,c);\n    printf(\"%.10f %.10f\\n\",res.x,res.y);\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct point {\n\tdouble x, y;\n\tpoint() {}\n\tpoint(double _x, double _y) : x(_x), y(_y) {}\n};\n\npoint operator + (const point &P, const point &Q) {\n\treturn point(P.x + Q.x, P.y + Q.y);\n}\n\npoint operator - (const point &P, const point &Q) {\n\treturn point(P.x - Q.x, P.y - Q.y);\n}\n\npoint operator * (const point &P, const double k) {\n\treturn point(P.x * k, P.y * k);\n}\n\ninline double dot(const point &P, const point &Q) {\n\treturn P.x * Q.x + P.y * Q.y;\n}\n\ninline double norm2(const point &P) {\n\treturn dot(P, P);\n}\n\ninline double norm(const point &P) {\n\treturn sqrt(dot(P, P));\n}\n\npoint project(const point &P, const point &P1, const point &P2) {\n\treturn P1 + (P2 - P1) * (dot(P2 - P1, P - P1) / norm2(P2 - P1));\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.precision(10);\n\n\tpoint P1, P2;\n\tcin >> P1.x >> P1.y >> P2.x >> P2.y;\n\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tpoint P;\n\t\tcin >> P.x >> P.y;\n\t\tpoint answer = project(P, P1, P2);\n\t\tcout << fixed << answer.x << \" \" << fixed << answer.y << \"\\n\";\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for(int i=(a);i<(n);i++)\n#define per(i,a,n) for(int i=(n)-1;i>=(a);i--)\n#define mp make_pair\n#define pb push_back\n\ntypedef double db;\n\nconst db EPS = 1e-8;\n\ninline int sign(db a) {\n\treturn a < -EPS ? -1 : a > EPS;\n}\n\ninline int cmp(db a, db b){\n\treturn sign(a-b);\n}\n\nstruct P {\n\tdb x, y;\n\tP() {}\n\tP(db _x, db _y) : x(_x), y(_y) {}\n\tP operator+(P p) { return P(x + p.x, y + p.y); }\n\tP operator-(P p) { return P(x - p.x, y - p.y); }\n\tP operator*(db d) { return P(x * d, y * d); }\n\tP operator/(db d) { return P(x / d, y / d); }\n\tbool operator<(P p) const {\n\t\tint c = cmp(x, p.x);\n\t\tif (c) return c == -1;\n\t\treturn cmp(y, p.y) == -1;\n\t}\n\tdb dot(P p) { return x * p.x + y * p.y; }\n\tdb det(P p) { return x * p.y - y * p.x; }\n\tdb distTo(P p) { return (*this-p).abs(); }\n\tdb alpha() { return atan2(y, x); }\n\tvoid read() { cin>>x>>y; }\n\tdb abs() { return sqrt(abs2());}\n\tdb abs2() { return x * x + y * y; }\n\tP rot90() { return P(-y,x);}\n\tP unit() { return *this/abs(); }\n    int quad() const { return sign(y) == 1 || (sign(y) == 0 && sign(x) >= 0); }\n};\n\nstruct L{ //ps[0] -> ps[1]\n\tP ps[2];\n\tP& operator[](int i) { return ps[i]; }\n\tP dir() { return ps[1] - ps[0]; }\n \tbool include(P p) { return sign((ps[1] - ps[0]).det(p - ps[0])) > 0; }\n \tL push(){ // push eps outward\n \t\tconst double eps = 1e-6;\n \t\tP delta = (ps[1] - ps[0]).rot90().unit() * eps;\n \t\treturn {ps[0] - delta, ps[1] - delta};\n \t}\n};\n\n#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))\n#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3))\n\nP isLL(P p1, P p2, P q1, P q2) {\n\tdb a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);\n\treturn (p1 * a2 + p2 * a1) / (a1 + a2);\n}\n\nP isLL(L l1,L l2){ return isLL(l1[0],l1[1],l2[0],l2[1]); }\n\nbool intersect(db l1,db r1,db l2,db r2){\n\tif(l1>r1) swap(l1,r1); if(l2>r2) swap(l2,r2);\n\treturn !( cmp(r1,l2) == -1 || cmp(r2,l1) == -1 );\n}\n\nbool isSS(P p1, P p2, P q1, P q2){\n    return intersect(p1.x,p2.x,q1.x,q2.x) && intersect(p1.y,p2.y,q1.y,q2.y) &&\n    crossOp(p1,p2,q1) * crossOp(p1,p2,q2) <= 0 && crossOp(q1,q2,p1)\n            * crossOp(q1,q2,p2) <= 0;\n}\n\nbool isMiddle(db a, db m, db b) {\n    return sign(a - m) == 0 || sign(b - m) == 0 || (a < m != b < m);\n}\n\nbool isMiddle(P a, P m, P b) {\n    return isMiddle(a.x, m.x, b.x) && isMiddle(a.y, m.y, b.y);\n}\n\nbool onSeg(P p1, P p2, P q){\n\treturn crossOp(p1,p2,q) == 0 && isMiddle(p1, q, p2);\n}\n\nP proj(P p1, P p2, P q) {\n    P dir = p2 - p1;\n    return p1 + dir * (dir.dot(q - p1) / dir.abs2());\n}\n\nP reflect(P p1, P p2, P q){\n\treturn proj(p1,p2,q) * 2 - q;\n}\n\ndb nearest(P p1,P p2,P q){\n\tP h = proj(p1,p2,q);\n\tif(isMiddle(p1,h,p2))\n\t\treturn q.distTo(h);\n\treturn min(p1.distTo(q),p2.distTo(q));\n}\n\ndb disSS(P p1, P p2, P q1, P q2){\n\tif(isSS(p1,p2,q1,q2)) return 0;\n\treturn min(min(nearest(p1,p2,q1),nearest(p1,p2,q2)), min(nearest(q1,q2,p1),nearest(q1,q2,p2)) );\n}\n\ndb rad(P p1,P p2){\n\treturn atan2l(p1.det(p2),p1.dot(p2));\n}\n\ndb incircle(P p1, P p2, P p3){\n\tdb A = p1.distTo(p2);\n\tdb B = p2.distTo(p3);\n\tdb C = p3.distTo(p1);\n\treturn sqrtl(A*B*C/(A+B+C));\n}\n\n//polygon\n\ndb area(vector<P> ps){\n\tdb ret = 0; rep(i,0,ps.size()) ret += ps[i].det(ps[(i+1)%ps.size()]);\n\treturn abs(ret/2);\n}\n\nint contain(vector<P> ps, P p){ //2:inside,1:on_seg,0:outside\n\tint n = ps.size(), ret = 0;\n\trep(i,0,n){\n\t\tP u=ps[i],v=ps[(i+1)%n];\n\t\tif(onSeg(u,v,p)) return 1;\n\t\tif(cmp(u.y,v.y)<=0) swap(u,v);\n\t\tif(cmp(p.y,u.y) >0 || cmp(p.y,v.y) <= 0) continue;\n\t\tret ^= crossOp(p,u,v) > 0;\n\t}\n\treturn ret*2;\n}\n\nvector<P> convexHull(vector<P> ps) {\n    int n = ps.size(); if(n <= 1) return ps;\n    sort(ps.begin(), ps.end());\n    vector<P> qs(n * 2); int k = 0;\n    for (int i = 0; i < n; qs[k++] = ps[i++])\n        while (k > 1 && crossOp(qs[k - 2], qs[k - 1], ps[i]) <= 0) --k;\n    for (int i = n - 2, t = k; i >= 0; qs[k++] = ps[i--])\n       \twhile (k > t && crossOp(qs[k - 2], qs[k - 1], ps[i]) <= 0) --k;\n    qs.resize(k - 1);\n    return qs;\n}\n\nvector<P> convexHullNonStrict(vector<P> ps) {\n\t//caution: need to unique the Ps first\n    int n = ps.size(); if(n <= 1) return ps;\n    sort(ps.begin(), ps.end());\n    vector<P> qs(n * 2); int k = 0;\n    for (int i = 0; i < n; qs[k++] = ps[i++])\n        while (k > 1 && crossOp(qs[k - 2], qs[k - 1], ps[i]) < 0) --k;\n    for (int i = n - 2, t = k; i >= 0; qs[k++] = ps[i--])\n       \twhile (k > t && crossOp(qs[k - 2], qs[k - 1], ps[i]) < 0) --k;\n    qs.resize(k - 1);\n    return qs;\n}\n\ndb convexDiameter(vector<P> ps){\n\tint n = ps.size(); if(n <= 1) return 0;\n\tint is = 0, js = 0; rep(k,1,n) is = ps[k]<ps[is]?k:is, js = ps[js] < ps[k]?k:js;\n\tint i = is, j = js;\n\tdb ret = ps[i].distTo(ps[j]);\n\tdo{\n\t\tif((ps[(i+1)%n]-ps[i]).det(ps[(j+1)%n]-ps[j]) >= 0)\n\t\t\t(++j)%=n;\n\t\telse\n\t\t\t(++i)%=n;\n\t\tret = max(ret,ps[i].distTo(ps[j]));\n\t}while(i!=is || j!=js);\n\treturn ret;\n}\n\nvector<P> convexCut(const vector<P>&ps, P q1, P q2) {\n\tvector<P> qs;\n\tint n = ps.size();\n\trep(i,0,n){\n\t\tP p1 = ps[i], p2 = ps[(i+1)%n];\n\t\tint d1 = crossOp(q1,q2,p1), d2 = crossOp(q1,q2,p2);\n\t\tif(d1 >= 0) qs.pb(p1);\n\t\tif(d1 * d2 < 0) qs.pb(isLL(p1,p2,q1,q2));\n\t}\n\treturn qs;\n}\n\n//min_dist\n\ndb min_dist(vector<P>&ps,int l,int r){\n\tif(r-l<=5){\n\t\tdb ret = 1e100;\n\t\trep(i,l,r) rep(j,l,i) ret = min(ret,ps[i].distTo(ps[j]));\n\t\treturn ret;\n\t}\n\tint m = (l+r)>>1;\n\tdb ret = min(min_dist(ps,l,m),min_dist(ps,m,r));\n\tvector<P> qs; rep(i,l,r) if(abs(ps[i].x-ps[m].x)<= ret) qs.pb(ps[i]);\n\tsort(qs.begin(), qs.end(),[](P a,P b) -> bool {return a.y<b.y; });\n\trep(i,1,qs.size()) for(int j=i-1;j>=0&&qs[j].y>=qs[i].y-ret;--j) ret = min(ret,qs[i].distTo(qs[j]));\n\treturn ret;\n}\n\nint type(P o1,db r1,P o2,db r2){\n\tdb d = o1.distTo(o2);\n\tif(cmp(d,r1+r2) == 1) return 4;\n\tif(cmp(d,r1+r2) == 0) return 3;\n\tif(cmp(d,abs(r1-r2)) == 1) return 2;\n\tif(cmp(d,abs(r1-r2)) == 0) return 1;\n\treturn 0;\n}\n\nvector<P> isCL(P o,db r,P p1,P p2){\n\tdb x = (p1-o).dot(p2-p1), y = (p2-p1).abs2(), d = x * x - y * ((p1-o).abs2() - r*r);\n\tif(sign(d) < 0) return {};\n\td = max(d,0.0); P m = p1 - (p2-p1)*(x/y), dr = (p2-p1)*(sqrt(d)/y);\n\treturn {m-dr,m+dr}; //along dir: p1->p2\n}\n\nvector<P> isCC(P o1, db r1, P o2, db r2) { //need to check whether two circles are the same\n\tdb d = o1.distTo(o2);\n\tif (cmp(d, r1 + r2) == 1) return {};\n\td = min(d, r1 + r2);\n\tdb y = (r1 * r1 + d * d - r2 * r2) / (2 * d), x = sqrt(r1 * r1 - y * y);\n\tP dr = (o2 - o1).unit();\n\tP q1 = o1 + dr * y, q2 = dr.rot90() * x;\n\treturn {q1-q2,q1+q2};//along circle 1\n}\n\nvector<P> tanCP(P o, db r, P p) {\n\tdb x = (p - o).abs2(), d = x - r * r;\n\tif (sign(d) <= 0) return {}; // on circle => no tangent\n\tP q1 = o + (p - o) * (r * r / x);\n\tP q2 = (p - o).rot90() * (r * sqrt(d) / x);\n\treturn {q1-q2,q1+q2}; //counter clock-wise\n}\n\n\nvector<L> extanCC(P o1, db r1, P o2, db r2) {\n\tvector<L> ret;\n\tif (cmp(r1, r2) == 0) {\n\t\tP dr = (o2 - o1).unit().rot90() * r1;\n\t\tret.pb({o1 + dr, o2 + dr}), ret.pb({o1 - dr, o2 - dr});\n\t} else {\n\t\tP p = (o2 * r1 - o1 * r2) / (r1 - r2);\n\t\tvector<P> ps = tanCP(o1, r1, p), qs = tanCP(o2, r2, p);\n\t\trep(i,0,min(ps.size(),qs.size())) ret.pb({ps[i], qs[i]}); //c1 counter-clock wise\n\t}\n\treturn ret;\n}\n\nvector<L> intanCC(P o1, db r1, P o2, db r2) {\n\tvector<L> ret;\n \tP p = (o1 * r2 + o2 * r1) / (r1 + r2);\n \tvector<P> ps = tanCP(o1,r1,p), qs = tanCP(o2,r2,p);\n\trep(i,0,min(ps.size(),qs.size())) ret.pb({ps[i], qs[i]}); //c1 counter-clock wise\n\treturn ret;\n}\n\ndb areaCT(db r, P p1, P p2){\n\tvector<P> is = isCL(P(0,0),r,p1,p2);\n\tif(is.empty()) return r*r*rad(p1,p2)/2;\n\tbool b1 = cmp(p1.abs2(),r*r) == 1, b2 = cmp(p2.abs2(), r*r) == 1;\n\tif(b1 && b2){\n\t\tif(sign((p1-is[0]).dot(p2-is[0])) <= 0 &&\n\t\t\tsign((p1-is[0]).dot(p2-is[0])) <= 0)\n\t\treturn r*r*(rad(p1,is[0]) + rad(is[1],p2))/2 + is[0].det(is[1])/2;\n\t\telse return r*r*rad(p1,p2)/2;\n\t}\n\tif(b1) return (r*r*rad(p1,is[0]) + is[0].det(p2))/2;\n\tif(b2) return (p1.det(is[1]) + r*r*rad(is[1],p2))/2;\n\treturn p1.det(p2)/2;\n}\n\nbool parallel(L l0, L l1) { return sign( l0.dir().det( l1.dir() ) ) == 0; }\n\nbool sameDir(L l0, L l1) { return parallel(l0, l1) && sign(l0.dir().dot(l1.dir()) ) == 1; }\n\nbool cmp (P a,  P b) {\n\tif (a.quad() != b.quad()) {\n\t\treturn a.quad() < b.quad();\n\t} else {\n\t\treturn sign( a.det(b) ) > 0;\n\t}\n}\n\nbool operator < (L l0, L l1) {\n\tif (sameDir(l0, l1)) {\n\t\treturn l1.include(l0[0]);\n\t} else {\n\t\treturn cmp( l0.dir(), l1.dir() );\n\t}\n}\n\nbool check(L u, L v, L w) {\n\treturn w.include(isLL(u,v));\n}\n\nvector<P> halfPlaneIS(vector<L> &l) {\n\tsort(l.begin(), l.end());\n\tdeque<L> q;\n\tfor (int i = 0; i < (int)l.size(); ++i) {\n \t\tif (i && sameDir(l[i], l[i - 1])) continue;\n \t\twhile (q.size() > 1 && !check(q[q.size() - 2], q[q.size() - 1], l[i])) q.pop_back();\n \t\twhile (q.size() > 1 && !check(q[1], q[0], l[i])) q.pop_front();\n \t\tq.push_back(l[i]);\n \t}\n\twhile (q.size() > 2 && !check(q[q.size() - 2], q[q.size() - 1], q[0])) q.pop_back();\n\twhile (q.size() > 2 && !check(q[1], q[0], q[q.size() - 1])) q.pop_front();\n\tvector<P> ret;\n\tfor (int i = 0; i < (int)q.size(); ++i) ret.push_back(isLL(q[i], q[(i + 1) % q.size()]));\n\treturn ret;\n}\n\nint main(){\n\tP p1(0,0),p2(0,0);\n\tp1.read(),p2.read();\n\tint q;\n\tcin >> q;\n\twhile(q--){\n\t\tP p3(0,0);\n\t\tp3.read();\n\t\tp3 = proj(p1,p2,p3);\n\t\tprintf(\"%.10lf %.10lf\\n\",p3.x,p3.y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <iterator>\n#include <iomanip>\n#include <cmath>\n#include <vector>\n#include <numeric>\n#include <cstdio>\n#include <bitset>\n#include <map>\n#include <string>\n#include <valarray>\n#include <queue>\n#include <utility>\n#include <functional>\n#include <list>\n\n\nusing namespace std;\n\nstruct Point\n{\n    double x, y;\n\n    Point operator-(const Point & p) const\n    {\n        Point difference = {x - p.x, y - p.y};\n        return difference;\n    }\n\n    double operator*(const Point & p) const\n    {\n        return x*p.x + y*p.y;\n    }\n\n    Point operator*(double c) const\n    {\n        Point p = {c*x, c*y};\n        return p;\n    }\n\n    friend Point operator*(double c, const Point & p)\n    {\n        return p*c;\n    }\n\n    friend ostream & operator<<(ostream & os, const Point & p) \n    {\n        os << setprecision(8) << fixed << p.x << ' ' << p.y << endl;\n        return os;\n    }\n\n    friend istream & operator>>(istream & is, Point & p)\n    {\n        is >> p.x >> p.y;\n        return is;\n    }\n\n    Point operator+(const Point & p) const\n    {\n        Point sum = {x+p.x, y+p.y};\n        return sum;\n    }\n};\n\n\nint main()\n{\n    Point p1, p2, p;\n\n    cin >> p1 >> p2;\n\n    int q;\n    cin >> q;\n\n    for (int i = 0; i < q; i++)\n    {\n        cin >> p;\n        Point a = p-p1, b = p2-p1;\n        cout << (a*b)/(b*b)*b+p1;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x+p2.x, p1.y+p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x-p2.x, p1.y-p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nint main() {\n    using namespace std;\n\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Segment s{p1, p2};\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        Point p;\n        cin >> p.x >> p.y;\n        auto x = projection(s, p);\n        cout << x.x << \" \" << x.y << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define rep(i, a, b) for(int i = (a); i < (b); ++i)\n#define per(i, a, b) for(int i = (b) - 1; i >= (a); --i)\n#define sz(a) (int)a.size()\n#define de(c) cout << #c << \" = \" << c << endl\n#define dd(c) cout << #c << \" = \" << c << \" \"\n#define all(a) a.begin(), a.end()\n#define pw(x) (1ll<<(x))\n#define endl \"\\n\"\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntypedef db T;\nstruct P{\n  T x,y; P(){} P(T x,T y):x(x),y(y){}\n  P operator - (const P&b) const {return P(x-b.x,y-b.y);}\n  P operator + (const P&b) const {return P(x+b.x,y+b.y);}\n  T operator * (const P&b) const {return x*b.x+y*b.y;}\n  P operator * (const T&k) const {return P(x*k,y*k);}\n};\nT norm(P a){return a*a;}\nP proj(P p,P a,P b){return (b-a)*((p-a)*(b-a)/norm(b-a))+a;}\n\nP a, b, p;\n\nint main() {\n\tstd::ios::sync_with_stdio(0);\n\tstd::cin.tie(0);\n\tcin >> a.x >> a.y >> b.x >> b.y;\n\tint q;\n\tcin >> q;\n\tcout << setiosflags(ios::fixed);\n\tcout << setprecision(10);\n\twhile(q--) {\n\t\tcin >> p.x >> p.y;\n\t\tP r = proj(p, a, b);\n\t\tcout << r.x << \" \" << r.y << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define F first\n#define S second\n#define pii pair<int, int>\n#define eb emplace_back\n#define all(v) v.begin(), v.end()\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n#define rep3(i, l, n) for (int i = l; i < (n); ++i)\n#define chmax(a, b) a = (a >= b ? a : b)\n#define chmin(a, b) a = (a <= b ? a : b)\n#define sz(v) (int)v.size()\n#define inf (int)(1e9+7)\n#define abs(x) (x >= 0 ? x : -(x))\n#define ceil(a, b) a / b + !!(a % b)\n#define LB(v, n) (int)(lower_bound(all(v), n) - v.begin())\n#define UB(v, n) (int)(upper_bound(all(v), n) - v.begin())\nll pow(ll a, int b) { return b ? pow(a * a, b / 2) * (b % 2 ? a : 1) : 1; }\ntemplate<typename T> T gcd(T a, T b) { if (b == 0) return a; return gcd(b, a % b); }\n\n\n\n\nusing P = complex<double>;\ndouble dot(P a, P b) { return real(conj(a) * b); }\ndouble cross(P a, P b) { return imag(conj(a) * b); }\nconst double eps = 1e-10;\n\n\n\nint main() {\n    P p1, p2;\n    double p1x, p1y, p2x, p2y;\n    cin >> p1x >> p1y >> p2x >> p2y;\n    p1 = P(p1x, p1y);\n    p2 = P(p2x, p2y);\n    P a = p2 - p1;\n    \n    int query;\n    cin >> query;\n    while (query--) {\n        double x, y;\n        cin >> x >> y;\n        P p = P(x, y);\n        P b = p - p1;\n        \n        P v = dot(a, b) / real(conj(a) * a) * a;\n        v += p1;\n        cout << fixed << setprecision(10) << real(v) << \" \" << imag(v) << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <complex>\n#include <algorithm>\nusing namespace std;\n\n#define PCR Point const &\n\ntypedef long double Real;\ntypedef complex<Real> Point;\nstruct Segment {\n    Point p[2];\n    Segment (PCR a = Point(), PCR b = Point()){\n        p[0] = a, p[1] = b;\n    }\n    Point & operator [] (int k) { return p[k]; }\n    Point const & operator [] (int k) const { return p[k]; }\n};\ntypedef vector<Point> Polygon;\nstruct Circle { Real radius; Point center; };\n\n#define X real()\n#define Y imag()\n\nReal dot(PCR a, PCR b){\n    return a.X*b.X + a.Y*b.Y;\n}\nReal cross(PCR a, PCR b){\n    return a.X*b.Y - a.Y*b.X;\n}\n\nPoint pSP(Segment const & s, PCR p){\n    Point base = s[1] - s[0];\n    Real r = dot(p - s[0], base) / norm(base);\n    return s[0] + base * r;\n}\n\n#include <iostream>\n#include <cstdio>\n\nint main(){\n    Segment s;\n    Real x,y;\n    cin >> x >> y;\n    s[0] = Point(x,y);\n    cin >> x >> y;\n    s[1] = Point(x,y);\n    int q;\n    cin >> q;\n    for(int i=0;i<q;i++){\n        cin >> x >> y;\n        Point p = pSP(s, Point(x,y));\n        printf(\"%.10Lf %.10Lf\\n\", p.X, p.Y);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <map>\n#include <cmath>\n#include <iomanip>\n#include <complex>\nusing namespace std;\n#define REP(i,n) for (int i=0;i<(n);++i)\n#define rep(i,a,b) for(int i=a;i<(b);++i)\ntemplate<class T> inline bool chmin(T &a, T b){ if(a > b) { a = b; return true;} return false;}\ntemplate<class T> inline bool chmax(T &a, T b){ if(a < b) { a = b; return true;} return false;}\nusing ll = long long;\nconstexpr long long INF = 1LL << 62;\nconstexpr int MOD = 1e9 + 7;\nconstexpr double EPS = 1e-10;\n\nusing Point = complex<double>;\nusing Line  = pair<Point, Point>;\ndouble dot(Point p, Point q) { return (conj(p) * q).real(); }\ndouble cross(Point p, Point q) { return (conj(p) * q).imag(); }\ndouble slope(Line l) { return tan(arg(l.second - l.first)); }\n\nPoint project(Line l, Point p) { // project p onto line (s,t)\n    return l.first + (l.second - l.first) * dot(p - l.first, l.second - l.first) / norm(l.second - l.first);\n}\n\nPoint reflect(Line l, Point p) {\n    return l.first + conj((p - l.first) / (l.second - l.first)) * (l.second - l.first);\n}\n\nint ccw(Point a, Point b, Point c) {\n    b -= a; c -= a;\n    if(cross(b, c) >  EPS) return +1; // counter-clockwise\n    if(cross(b, c) < -EPS) return -1; // clockwise\n    if(  dot(b, c) < -EPS) return +2; // c--a--b\n    if(abs(b)+EPS < abs(c))return -2; // a--b--c\n    return 0; // a--c--b\n}\n\nint main() {\n    cin.tie(0); ios_base::sync_with_stdio(false);\n    cout << fixed << setprecision(10);\n    double a,b,c,d;\n    cin >> a >> b >> c >> d;\n    Line l(Point(a,b),Point(c,d));\n\n    int q;\n    cin >> q;\n    for(int i=0; i < q; ++i) {\n        double x,y;\n        cin >> x >> y;\n        Point ret = project(l, Point(x,y));\n        cout << ret.real() << \" \" << ret.imag() << '\\n';\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef double Real;\nconstexpr Real EPS = 1e-8;\n\n//???????????£\nint sign(Real d) {\n    if (d>EPS) { return 1; }\n    if (d<-EPS) { return -1; }\n    return 0;\n}\n\n/*\n * ???????§?????????????\n */\nstruct Point {\n    Real x,y;\n\n    //Point p(2,3)????¨±???\n    explicit Point(Real x_=0, Real y_=0): x(x_), y(y_) {} //explicit?????£??\\Point p = x;????¨±????????????????????????\n\n    Point operator+(const Point &p) const {\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator-(const Point &p) const {\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator*(Real s) const {\n        return Point(x*s,y*s);\n    }\n    Point operator/(Real s) const {\n        return Point(x/s,y/s);\n    }\n    bool operator<(const Point &p) const {\n        return sign(x - p.x) == -1 || (sign(x - p.x)==0 && sign(y - p.y)==-1);\n    }\n    bool operator==(const Point &p) const { return sign(x-p.x) == 0 && sign(y - p.y)==0; }\n\n};\n\n//Point??????????????°????????¬??????\nistream &operator>>(istream &is, Point &p) {\n    return is >> p.x >> p.y;\n}\nostream &operator<<(ostream &os, const Point &p) {\n    //return os << '(' << p.x << \", \" << p.y << ')';\n    return os << p.x << \" \" << p.y;\n}\n\nstruct Line : public array<Point, 2> { //??????\n    Line(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Segment : public array<Point, 2> { //??´???\n    Segment(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\n\n/*\n * Calc\n */\n//???????¨??????????90??????\nPoint rotate90(const Point &p) { return Point(-p.y,p.x); }\n\n//???????¨???????????????±???\nPoint rotate(const Point &p, Real theta) {\n    const Real s = sin(theta), c = cos(theta);\n    return Point(c*p.x - s*p.y, s*p.x + c*p.y);\n}\n\nReal angle(const Point &p) { return atan2(p.y, p.x); } //[X???]??¨[???????????????P??????]????§????\nReal norm(const Point &p) { return p.x * p.x + p.y * p.y; } //??????0????????????P?????§????????¢?????????\nReal abs(const Point &p) { return sqrt(norm(p)); } //??????0????????????P?????§????????¢\n\nReal dot(const Point &a, const Point &b) { return a.x * b.x + a.y * b.y; } //??????(?????????????????£?????????)\nReal cross(const Point &a, const Point &b) { return a.x * b.y - a.y * b.x; } //??????\n\n/*\n * ?°???±??????\n * http://mathtrain.jp/projection\n */\ninline Point project(Line &l, Point &p) {\n    const Point a = p - l[0];\n    const Point b = l[1] - l[0];\n    return l[0] + b * (dot(a,b) / norm(b));\n}\n\nint main() {\n    cout.setf(ios::fixed);\n    cout.precision(10); //?°???°???10?????¨???\n    int x0, x1, y0, y1;\n    int q;\n    int x,y;\n\n    cin >> x0 >> y0 >> x1 >> y1;\n    Point p0(x0,y0), p1(x1,y1);\n    Line l(p0, p1);\n    cin >> q;\n    for(int i=0; i<q; i++) {\n        cin >> x >> y;\n        Point p(x,y);\n        Point v = project(l, p);\n        cout << v << endl;\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <fstream>\nusing namespace std;\n\nint main(){\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  int q;\n  cin >> q;\n\n  double x, y, k;\n  double ax, ay, bx, by;\n  for(int i=0; i<q; i++){\n    cin >> x >> y;\n    ax = x-x1; ay = y-y1;\n    bx = x2-x1; by = y2-y1;\n    k = (ax*bx + ay*by)/(bx*bx + by*by);\n    printf(\"%.10lf %.10lf\\n\", bx*k+x1+0, by*k+y1+0);\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=jp\n#include <iostream>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\nclass Point{\nprivate:\n    double x;\n    double y;\npublic:\n    double getX(){return x;};\n    double getY(){return y;};\n    void setPoint(double inX, double inY){x = inX; y = inY;};\n    void disp(){printf(\"%.8lf %.8lf\\n\", x,y);}\n};\n\n\nvoid Projection(Point P1, Point P2, Point P, Point Output){\n    double ax = P2.getX() - P1.getX();\n    double ay = P2.getY() - P1.getY();\n    double bx = P.getX() - P1.getX();\n    double by = P.getY() - P1.getY();\n    double dot = ax*bx + ay*by;\n    double length = ax*ax + ay*ay;\n\n    double outX = ax * dot/length;\n    double outY = ay * dot/length;\n\n    Output.setPoint(outX, outY);\n    Output.disp();\n}\n\n\nint main(){\n    int n;\n    double inX, inY;\n    Point P, P1, P2, Output;\n    cin >> inX >> inY;\n    P1.setPoint(inX, inY);\n//    P1.disp();\n    cin >> inX >> inY;\n    P2.setPoint(inX, inY);\n//    P2.disp();\n    cin >> n;\n    for(int i=0; i<n; i++){\n        cin >> inX >> inY;\n        P.setPoint(inX, inY);\n        Projection(P1, P2, P, Output);\n        //Output.disp();\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cstdio>\n\nusing namespace std;\n\n#define X real()\n#define Y imag()\n\nconst double EPS = 1e-8;\n\ntypedef complex<double> Point;\n\nbool operator< (const Point& p1, const Point& p2) {\n  return p1.X != p2.X ? p1.X < p2.X : p1.Y < p2.Y;\n}\n\ndouble dot(const Point& p1, const Point& p2) {\n  return (conj(p1)*p2).X;\n}\n\ntypedef Point Vector;\n\nint main() {\n  Point p0, p1;\n  double x, y;\n  \n  cin >> x >> y; p0 = Point(x, y);\n  cin >> x >> y; p1 = Point(x, y);\n  \n  Vector v0 = p1 - p0;\n  \n  int q;\n  cin >> q;\n  while(q--) {\n\tcin >> x >> y;\n\tVector v1 = Point(x, y) - p0;\n\tPoint ans = p0 + dot(v0, v1) * v0 / norm(v0);\n\tprintf(\"%.9lf %.9lf\\n\", ans.X, ans.Y);\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef double db;\nstruct P{\n    db x, y;\n    P(){}\n    P(db x, db y) : x(x) , y(y) {}\n    db dot(P a){ return a.x*x + a.y*y; }\n    P operator - (P a){ return P(x-a.x, y-a.y); }\n    db len(){ return sqrt(x*x+y*y); }\n};\ntypedef P V;\nstruct L{ P p, q; };\n\nP projection(P a, L l){ //求得点a在l上的投影点坐标\n    P tl = l.q - l.p;  //表示l的两个点形成的线段\n    db ll = tl.len();  //线段长度\n    db k = (a-l.p).dot(tl)/ll/ll;  //投影长度与线段长度的比值\n    return P( l.p.x + k*tl.x, l.p.y + k*tl.y ); //最终结果\n}\n\nint main(){\n    //freopen(\"owo.in\",\"r\",stdin);\n    int n;\n    L l;\n    scanf(\"%lf%lf%lf%lf\",&l.p.x, &l.p.y, &l.q.x, &l.q.y);\n    cin >> n;\n    P a;\n    while(n--){\n        scanf(\"%lf%lf\", &a.x, &a.y);\n        P ta = projection(a, l);\n        printf(\"%.9lf %.9lf\\n\", ta.x, ta.y);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdlib>\n#include <iostream>\n#include <bitset>\n#include <deque>\n#include <list>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <algorithm>\n#include <iterator>\n#include <string>\n#include <chrono>\n#include <random>\n#include <tuple>\n#include <utility>\n#include <fstream>\n#include <complex>\n\nconst long INF = (1l << 30);\nconst long LINF = (1l << 60);\n\ntypedef std::complex<double> Com;\n\n//geometric library\n//#include <complex>\n//typedef complex<double> Com;\n//c++ -std=c++14\n\n//内積\ndouble dot_product(const Com a, const Com b){\n\treturn (conj(a)*b).real();\n}\n//外積\ndouble cross_product(const Com a, const Com b){\n\treturn (conj(a)*b).imag();\n}\n//点と直線の距離\ndouble dist_dot_line(const Com st, const Com en, const Com dt){\n    return std::abs(cross_product(dt-st, en-st) / std::abs(en-st));\n}\n//点と線分の距離\ndouble dist_dot_seg(const Com st, const Com en, const Com dt){\n\tif(dot_product(en-st, dt-st) <= 0){\n\t\treturn std::abs(dt-st);\n\t}else if(dot_product(st-en, dt-en) <= 0){\n\t\treturn std::abs(dt-en);\n\t}else{\n\t\treturn dist_dot_line(st, en, dt);\n\t}\n}\n//線分の交差判定\nbool seg_crossing(const Com st1, const Com en1, const Com st2, const Com en2){\n\tdouble cross1 = cross_product(en1-st1, st2-st1) * cross_product(en1-st1, en2-st1);\n\tdouble cross2 = cross_product(en2-st2, st1-st2) * cross_product(en2-st2, en1-st2);\n\treturn (cross1 <= 0) && (cross2 <= 0);\n}\n//線分と線分の距離\ndouble dist_seg(const Com st1, const Com en1, const Com st2, const Com en2){\n\tif(seg_crossing(st1, en1, st2, en2)){\n\t\treturn 0;\n\t}\n\treturn std::min(std::min(dist_dot_seg(st1, en1, st2), dist_dot_seg(st1, en1, en2)), std::min(dist_dot_seg(st2, en2, st1), dist_dot_seg(st2, en2, en1)));\n}\n\nCom p1, p2;\nlong q;\nCom p;\n\nint main(){\n    double xp1, yp1, xp2, yp2;\n    scanf(\"%lf%lf%lf%lf\", &xp1, &yp1, &xp2, &yp2);\n    p1 = Com(xp1, yp1);\n    p2 = Com(xp2, yp2);\n    scanf(\"%ld\", &q);\n    for(int i = 0; i < q; i++){\n        double x, y;\n        scanf(\"%lf%lf\", &x, &y);\n        p = Com(x, y);\n        Com a = p - p1;\n        Com b = p2 - p1;\n        Com ans = dot_product(a, b) / (std::abs(b) * std::abs(b)) * b + p1;\n        printf(\"%.10lf %.10lf\\n\", real(ans), imag(ans));\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n\nstruct Point{\n\tlong double X,Y;\n\tinline void read(){scanf(\"%Lf%LF\",&X,&Y);}\n\tinline long double plength(){return X*X+Y*Y;}\n\tinline long double length(){return sqrtl(plength());}\n\tPoint(){X=Y=0;}\n\tPoint(long double X_,long double Y_){X=X_,Y=Y_;}\n};\nstruct Line{\n\tPoint A,B;\n\tinline void read(){A.read(),B.read();}\n\tLine(){}\n\tLine(const Point &A_,const Point &B_){A=A_,B=B_;}\n};\ntypedef Point Vector;\ninline Vector operator - (const Point &A,const Point &B){return Vector(A.X-B.X,A.Y-B.Y);}\ninline long double operator ^ (const Point &A,const Point &B){return A.X*B.X+A.Y*B.Y;}\ninline long double operator * (const Point &A,const Point &B){return A.X*B.Y-A.Y*B.X;}\ninline Point operator + (const Point &A,const Vector &B){return Point(A.X+B.X,A.Y+B.Y);}\ninline Vector operator * (const Vector &A,long double k){return Vector(A.X*k,A.Y*k);}\n\nLine L;\nPoint P;\n\nint Q;\n\ninline long double sqr(long double k){return k*k;}\n\nPoint Projection(const Line &L,const Point &P){\n\tlong double len=((P-L.A)^(L.B-L.A))/(L.B-L.A).plength();\n\treturn L.A*(1-len)+L.B*len;\n}\n\nint main(){\n\tL.read();\n\tscanf(\"%d\",&Q);\n\twhile (Q--){\n\t\tP.read();\n\t\tPoint Ans=Projection(L,P);\n\t\tprintf(\"%.10Lf %.10Lf\\n\",Ans.X,Ans.Y);\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//Projection\n//#include<bits/stdc++.h>\n//#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<vector>\n//#include<random>\n#include<cstdlib>\n#include<ctime>\n#include<fstream>\n#include<map>\n#include<stack>\n#include<queue>\n#define FAST ios::sync_with_stdio(false)\n#define DEV_RND ((int)rand()*RAND_MAX+rand())\n#define RND(L,R) (DEV_RND%((R)-(L)+1)+(L))\n//#define abs(a) ((a)>=0?(a):-(a))\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define mem(a,b) memset(a,b,sizeof(a))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\n#define rep(i,a,n) for(int i=a;i<n;++i)\n#define repn(i,a,n,t) for(int i=a;i<n;i+=t)\n#define per(i,n,a) for(int i=n-1;i>=a;--i)\n#define pern(i,n,a,t) for(int i=n-1;i>=a;i-=t)\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\n#define li inline\n#define re register\nusing namespace std;\n//typedef uniform_int_distribution<int> RNDI;\ntypedef pair<int,int> PII;\ntypedef vector<int> VI;\ntypedef double db;\ntypedef long long ll;\ntypedef long double ld;\nconst int maxn = 1e5+5;\nconst int maxm = 100000+5;\nconst int inf=0x3f3f3f3f;\nconst double eps = 1e-9;\nconst double pi=acos(-1);\nconst int mod = 1e9+7;\n//int dir[4][2]={{-1,0},{1,0},{0,-1},{0,1}};\n//li int f(int x){return x==par[x]?par[x]:par[x]=f(par[x]);}\n//mt19937 eng(time(0));\nli ll lowbit(ll x){return x&(-x);}\nll gcd(ll a,ll b){return b?gcd(b,a%b):a;}\n//li int RND(int L,int R){RNDI rnd(L,R);return rnd(eng);}\nvoid ex_gcd(ll a,ll b,ll &d,ll &x,ll &y){if(!b){d=a,x=1,y=0;}else{ex_gcd(b,a%b,d,y,x);y-=x*(a/b);}}//x=(x%(b/d)+(b/d))%(b/d);\nli ll qpow(ll a,ll b,ll MOD=mod){ll res=1;a%=MOD;while(b>0){if(b&1)res=res*a%MOD;a=a*a%MOD;b>>=1;}return res;}\nli ll qmul(ll a,ll b,ll MOD=mod){return (a*b-(ll)((long double)a/MOD*b)*MOD+MOD)%MOD;}\nli ll Qpow(ll a,ll b,ll MOD){ll res=1;while(b>0){if(b&1) res=qmul(res,a,MOD);a=qmul(a,a,MOD);b>>=1;}return res;}\nli ll inv(ll x,ll p){return qpow(x,p-2,p);}\nli ll Jos(ll n,ll k,ll s=1){ll res=0;rep(i,1,n+1) res=(res+k)%i;return (res+s)%n;}\nli void debug(){ofstream fout(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\in.txt\");fout.close();}\nnamespace IO\n{\n\tli int read()\n\t{\n\t\tint x=0,sign=1;char c=getchar();\n\t\twhile(c>'9'||c<'0') {if(c=='-') sign=-1;c=getchar();}\n\t\twhile('0'<=c&&c<='9') x=x*10+c-'0',c=getchar();\n\t\treturn x*sign;\n\t}\n\ttemplate<typename T>\n\tli void write(T x,char t='\\n')\n\t{\n\t\tif(x<0){x=-x;putchar('-');};\n\t\tstatic int sta[25];int top=0;\n\t\tdo{sta[top++]=x%10,x/=10;}while(x);\n\t\twhile(top) putchar(sta[--top]+'0');\n\t\tputchar(t);\n\t}\n}\nusing namespace IO;\n/*-------------head-------------*/\nli int sign(db k){return k<-eps?-1:k>eps;}\nli int cmp(db a,db b){return sign(a-b);}\nli bool inmid(db l,db m,db r){return sign(l-m)*sign(r-m)<=0;}\n//点类 \nstruct P\n{\n\tdb x,y;\n\tP(){}\n\tP(db _x,db _y):x(_x),y(_y){}\n\tP operator + (const P& a) const {return (P){x+a.x,y+a.y};}\n\tP operator - (const P& a) const {return (P){x-a.x,y-a.y};}\n\tP operator * (db a) const {return (P){x*a,y*a};}\n\tP operator / (db a) const {return (P){x/a,y/a};}\n\tbool operator < (const P& a)const\n\t{return cmp(x,a.x)?cmp(x,a.x)==-1:cmp(y,a.y)==-1;}\n\tbool operator == (const P& a)const\n\t{return cmp(x,a.x)==0&&cmp(y,a.y)==0;}\n\tdb alpha(){return atan2(y,x);}\n\tdb abs2(){return x*x+y*y;}\n\tdb abs(){return sqrt(abs2());}\n\tdb disTo(P a){return (*this-a).abs();}\n\tdb dot(P a){return x*a.x+y*a.y;}\n\tdb det(P a){return x*a.y-y*a.x;}\n\tP unit(){return *this/abs();}\n\tP rot(db an){return (P){x*cos(an)-y*sin(an),x*sin(an)+y*cos(an)};}\n\tP rot90(){return (P){-y,x};}\n\tint quad() const {return sign(y)==1||(sign(y)==0&&sign(x)>=0);}\n\tvoid read(){db _x,_y;scanf(\"%lf%lf\",&_x,&_y);x=_x;y=_y;}\n\tvoid write(){printf(\"%.10f %.10f\\n\",x,y);}\n};\nbool angcmp(P a,P b){return a.quad()!=b.quad()?a.quad()<b.quad():sign(a.det(b))==-1;}\nbool inmid(P a,P m,P b){return inmid(a.x,m.x,b.x)&&inmid(a.y,m.y,b.y);}\ndb rad(P a,P b){return atan2l(a.det(b),a.dot(b));}\ndb cro(P q,P p1,P p2){return (p1.x-q.x)*(p2.y-q.y)-(p1.y-q.y)*(p2.x-q.x);}\nint croOp(P q,P p1,P p2){return sign(cro(q,p1,p2));}\n//投影 \nP proj(P p1,P p2,P q)\n{\n\tP dir=p2-p1;\n\treturn p1+dir*(dir.dot(q-p1)/dir.abs2());\n}\n//\nP p1,p2,q;\nint n; \nli void solve()\n{\n\tp1.read(),p2.read();\n\tn=read();\n\twhile(n--)\n\t{\n\t\tq.read();\n\t\tP pr=proj(p1,p2,q);\n\t\tpr.write();\n\t}\n\t//puts(\"\");\n}\nint main()\n{\n\t//srand(time(0));debug();\n\t//clock_t start_time=clock();\n\t//freopen(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\in.txt\",\"r\",stdin);\n\tsolve();\n\t//while(~scanf(\"%d\",&n)) solve();\n\t//cerr<<\"Time:\"<<clock()-start_time<<\"ms\\n\";\n\treturn 0;\n} \n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct Point{\n    double x;\n    double y;\n    Point(double x, double y) : x(x), y(y){}\n    Point operator+(Point p){\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator*(double d){\n        return Point(x * d, y * d);\n    }\n};\ntypedef Point Vector;\n\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nstruct Line{\n    Point p1;\n    Point p2;\n    Line(Point p1, Point p2) : p1(p1), p2(p2){}\n};\n\n\nint main(){\n    int x_p1, y_p1, x_p2, y_p2;\n    cin >> x_p1 >> y_p1 >> x_p2 >> y_p2;\n    Point p1(x_p1, y_p1);\n    Point p2(x_p2, y_p2);\n    Vector b(p2.x - p1.x, p2.y - p1.y);\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        Vector h(x - p1.x, y - p1.y);\n        Point ans = p1 + p2 * (dot(h, b) / dot(b, b));\n        cout << ans.x << \" \" << ans.y << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <deque>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <vector>\n#include <set>\n#include <limits>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n#define REP(i, j) for(int i = 0; i < (int)(j); ++i)\n#define FOR(i, j, k) for(int i = (int)(j); i < (int)(k); ++i)\n#define SORT(v) sort((v).begin(), (v).end())\n#define REVERSE(v) reverse((v).begin(), (v).end())\n#define P complex<double>\n#define y imag()\n#define x real()\nconst int N = 3;\n\nint main() {\n  int Q, tmp[N][3];\n  REP(i, 2) REP(j, 2) cin >>tmp[i][j];\n  cin >>Q;\n  REP(q, Q){\n    P p[N];\n    REP(i, 2) p[i] = P(tmp[i][0], tmp[i][1]);\n    cin >>tmp[2][0] >>tmp[2][1];\n    p[2] = P(tmp[2][0], tmp[2][1]);\n    p[1] -= p[0]; p[2] -= p[0];\n    //cout <<p[1] <<\", \" <<p[2] <<endl;\n    double lp1 = abs(p[1]), lp2 = abs(p[2]);\n    double a = abs(imag(conj(p[1]) * p[2])) / 2.0;\n    //cout <<abs(imag(conj(p[1]) * p[2])) <<endl;\n    double lp2t = 2 * a / lp1;\n    double lt = sqrt(lp2 * lp2 - lp2t * lp2t);\n    p[1] = p[1] * (lt / lp1);\n    //cout <<\"lp1 = \" <<lp1 <<\", lp2 = \" <<lp2 <<\", a = \" <<a <<\", lp2t = \" <<lp2t <<\", lt = \" <<lt <<endl;\n    double ansy = (p[1] + p[0]).y;\n    double ansx = (p[1] + p[0]).x;\n    if(p[2].y < p[0].y || p[2].x < p[0].x) ansy *= -1;\n    printf(\"%.9f %.9f\\n\", ansx, ansy);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n#include <cassert>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define fs first\n#define sc second\n#define pb push_back\nusing namespace std;\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P,P> L;\t\t//fs->sc\ntypedef vector<P> Pol;\nstruct C{P p;D r;};\nD inf=1e50,eps=1e-10;\n//template<class T> bool eq(T a, T b) { return abs(a-b)<eps;}\n//template<class T> int sig(T a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool eq(D a, D b) { return abs(a-b)<eps;}\nint sig(D a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\ninline D dot(P a, P b) { return real(conj(a)*b);};\ninline D cro(P a, P b) { return imag(conj(a)*b);};\nenum ENCCW{CCW=1, CW=-1, FRONT=2, BACK=-2, ON=0};\t//!!MAEHARAとFRONT,BACKが逆\n//ON優先(including endpoint)\ninline int ccw (P a, P b, P c){\n//\tcout << cro(b-a,c-a) << endl;\n\tif(sig(cro(b-a,c-a))==1) return CCW;\n\tif(sig(cro(b-a,c-a))==-1) return CW;\n\tif(eq(abs(a-c)+abs(c-b),abs(a-b))) return ON;\n\tif(eq(abs(a-b)+abs(b-c),abs(a-c))) return FRONT;\n\tif(eq(abs(c-a)+abs(a-b),abs(c-b))) return BACK;\n\tassert(false);\n}\ninline P proj(P a, P b){\t\t//ベクトルaのbへの射影\n\treturn (dot(a,b)/norm(b))*b;\n}\ninline P perp(L l, P p){\t\t//垂線の足\n\tD t=dot(p-l.fs,l.fs-l.sc)/norm(l.fs-l.sc);\n\treturn l.fs+t*(l.fs-l.sc);\n}\ninline P refl(L l, P p){\n\treturn p+2.0*(perp(l,p)-p);\n}\ninline bool ispal(L a, L b){\n\treturn sig(cro(a.fs-a.sc,b.fs-b.sc))==0;\n}\ninline bool ovLL(L a, L b){\n\treturn ispal(a,b) && sig(cro(a.fs-a.sc,b.fs-a.sc))==0;\n}\ninline bool iLL(L a, L b){\t\t//intersect or overload\n\treturn !ispal(a,b) || ovLL(a,b);\n}\ninline bool iLS(L l, L s){\t\t//intersect(including endpoint) or overload\n\treturn cro(l.sc-l.fs,s.fs-l.fs)*cro(l.sc-l.fs,s.sc-l.fs)<eps;\n}\ninline bool iLP(L l, P p){\t\t//on line\n\treturn sig(cro(l.sc-p,l.fs-p));\n}\ninline bool iSS(L a, L b){\t\t//intersect(including endpoint) or overload\n\treturn ccw(a.fs,a.sc,b.fs)*ccw(a.fs,a.sc,b.sc)<=0 && ccw(b.fs,b.sc,a.fs)*ccw(b.fs,b.sc,a.sc)<=0;\n}\ninline bool iSP(L s, P p){\t\t//intersect(including endpoint) or overload\n\treturn ccw(s.fs,p,s.sc)==ON;\n}\ninline D dLP(L l, P p) { return abs(perp(l,p)-p);}\ninline D dLL(L a, L b) { return iLL(a,b) ? 0 : dLP(a,b.fs);}\ninline D dLS(L l, L s) { return iLS(l,s) ? 0 : min(dLP(l,s.fs),dLP(l,s.sc));}\ninline D dSP(L s, P p) {\n\tP q=perp(s,p);\n\treturn iSP(s,q) ? abs(p-q) : min(abs(p-s.fs),abs(p-s.sc));\n}\ninline D dSS(L a, L b) {\n\tif(iSS(a,b)) return 0;\n\treturn min(min(dSP(a,b.fs),dSP(a,b.sc)),min(dSP(b,a.fs),dSP(b,a.sc)));\n}\ninline P intLL(L a, L b) {\t//intersection\n\tassert(!ispal(a,b));\n\tD t=cro(a.sc-a.fs,a.sc-b.fs)/cro(a.sc-a.fs,b.sc-b.fs);\n\treturn b.fs+t*(b.sc-b.fs);\n}\nenum ENICP{INC=1,ONC=0,OUTC=-1};\ninline int iCP(C c, P p){\n\tD d=abs(p-c.p);\n\treturn eq(d,c.r) ? ONC : (d<c.r ? INC : OUTC);\n}\ninline int iCL(C c, L l){\t\t//num of intersection(s)\n\tD d=dLP(l,c.p);\n\treturn eq(d,c.r) ? 1 : (d<c.r ? 2 : 0);\n}\n//inline int iCS\n//inline int iCC(C a, C b){\n\n/*inline P intCL1(C c, L l){\t\t//iCL=1\n\tassert(iCL(c,l)==1);\n}\ninline L intCL2(C c, L l){\t\t//iCL=2\n\tassert(iCL(c,l)==2);\n}*/\nD aTri(P a, P b, P c){ return cro(b-a,c-a)/2;}\nD aPol(Pol p){\t\t\t//点集合はCCWに与える\n\tint n=p.size();\n\tD ret=0;\n\trep(i,n) ret+=cro(p[i],p[(i+1)%n])/2;\n\treturn ret;\n}\nP gPol(Pol p){\t\t\t//多角形内部が一様な重さを持つときの重心\n\tint n=p.size();\n\tP g;\n\tD s=aPol(p);\n\tassert(s>eps);\n\trep(i,n){\n\t\tD ds=cro(p[i],p[(i+1)%n])/2;\n\t\tg+=ds/3*(p[i]+p[(i+1)%n]);\n\t}\n\treturn g/s;\n}\nenum ENCONT{INP=1,ONP=0,OUTP=-1};\nint contain(Pol pol, P p){\n\tbool in=false;\n\trep(i,pol.size()){\n\t\tP a=pol[i],b=pol[(i+1)%pol.size()];\n\t\tif(ccw(a,b,p)==ON) return ONP;\n\t\tif(!iLS(L(p,p+1.),L(a,b))) continue;\n\t\tif(ovLL(L(p,p+1.),L(a,b))){\n\t\t\tif(sig(max(real(a),real(b))-real(p))>=0) in=!in;\n\t\t\tcontinue;\n\t\t}\n\t\tif(sig(real(intLL(L(p,p+1.),L(a,b)))-real(p))>=0) in=!in;\n\t}\n\treturn in ? INP : OUTP;\n}\ninline D heron(D a, D b, D c){\n\tdouble s=(a+b+c)/2;\n\tif(s-a<eps || s-b<eps || s-c<eps) return 0;\t\t//S=0 || 三角形できない\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tD x0,y0,x1,y1;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tL a=L(P(x0,y0),P(x1,y1));\n\tint q;\n\tscanf(\"%d\",&q);\n\trep(i,q){\n\t\tD x,y;\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t\tP p=perp(a,P(x,y));\n\t\tprintf(\"%.10lf %.10lf\\n\",p.real(),p.imag());\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#define SQR(n) ((n) * (n))\n\n//???\nstruct Point\n{\n  double x, y;\n  \n  Point() {}\n  Point(double x, double y) : x(x), y(y) {}\n\n  Point operator + (Point p) { return (Point(x + p.x, y + p.y)); }\n  Point operator - (Point p) { return (Point(x - p.x, y - p.y)); }\n  Point operator * (double a) { return (Point(x * a, y * a)); }\n  Point operator / (double a) { return (Point(x / a, y / a)); }\n\n  void input() { scanf(\"%lf %lf\", &x, &y); }\n  void output() { printf(\"%.10lf %.10lf\", x, y); }\n  void outputln() { output(); putchar('\\n'); }\n  double abs() { return (sqrt(norm())); }\n  double norm() { return (SQR(x) + SQR(y)); }\n  \n  bool operator < (const Point &p) const {\n    return (equals(x, p.x) ? y < p.y : x < p.x);\n  }\n\n  bool operator == (const Point &p) const {\n    return (equals(x, p.x) && equals(y, p.y));\n  }\n\n};\n\n//??????\nstruct Segment\n{\n  Point p1, p2;\n\n  Segment() {}\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n\n  void input() { p1.input(); p2.input(); }\n  \n};\n\nstruct Circle\n{\n  Point c;\n  double r;\n  Circle(Point c, double r) : c(c), r(r) {}\n};\n  \n//??´???\ntypedef Segment Line; \n//????????????\ntypedef Point Vector;\ntypedef vector < Point > Polygon;\n\ndouble dot(Vector a, Vector b)\n{\n  return (a.x * b.x + a.y * b.y);\n}\n\ndouble cross(Vector a, Vector b)\n{\n  return (a.x * b.y - a.y * b.x);\n}\n\nPoint project(Segment s, Point p)\n{\n  Point base = s.p2 - s.p1;\n\n  return (s.p1 + base * (dot(p - s.p1, base) / base.norm()));\n}\n\nmain()\n{\n  int n;\n  Segment s;\n\n  s.input(); cin >> n;\n  for(int i = 0; i < n; i++) {\n    Point p;\n    p.input();\n    project(s, p).outputln();\n  }\n\n  return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\n#include<cstdio>\nusing namespace std;\n#define EPS 1e-10\nint equals(double a, double b) { return fabs(a - b) < EPS; };\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x=0, double y=0) :x(x), y(y) { };\n\tPoint operator + (Point& p) {\n\t\treturn Point(p.x + x, p.y + y);\n\t}\n\tPoint operator - (Point& p) {\n\t\t\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k*x, k*y);\n\t}\n\tdouble abs() {\t\t\t\t\t//向量长度;\n\t\treturn sqrt(x * x + y * y);\n\t}\n};\ntypedef Point Vector;\ndouble dot(Vector a, Vector b) {\t\t\t//内积 x1*x2 + y1*y2\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b) {\t\t  //外积  x1*y2 - x2*y1\n\treturn a.x * b.y - a.y * b.x;\n}\nstruct Segment           //线段\n{\n\tPoint a, b;\n};\ntypedef Segment Line;   //线段表示直线；\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double x = 0) :c(c), r(x) {};\n};\nvoid Parallel_Orthogonal() {\t\t\t\t//判断平行或正交\n\tPoint a, b,c,d;\n\tPoint e, f;\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> a.x >> a.y >> b.x >> b.y>>c.x>>c.y>>d.x>>d.y;\n\t\te = a - b;\n\t\tf = c - d;\n\t\tif (equals(dot(e, f), 0)) cout << \"1\" << endl;\n\t\telse if (equals(cross(e, f), 0))cout << \"2\" << endl;\n\t\telse cout <<\"0\" <<endl;\n\t}\n}\nPoint Projection(Point& a, Point& b, Point& c) {\n\tPoint p;\n\tVector v1 = b - a;\n\tVector v2 = c - a;\n\tdouble len = dot(v1, v2);\n\tdouble len2 = len/ v1.abs();\n\tp.x = a.x + len2 / v1.abs() * v1.x;\n\tp.y = a.y + len2 / v1.abs() * v1.y;\n\treturn p;\n}\nint main(void) {\n\tPoint a, b, c,d;\n\tcin >> a.x >> a.y >> b.x >> b.y;\n\tint n;\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> c.x >> c.y;\n\t\td=Projection(a, b, c);\n\t\tprintf(\"%.10f %.10f\\n\", d.x, d.y);\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <complex>\n#include <cmath>\n\nusing Real = long double;\nusing Point = std::complex<Real>;\nusing Segment = std::pair<Point, Point>;\n\ntemplate <class T>\ninline T sq(T x) { return x * x; }\n\ninline Real length(Segment l) {\n    return std::abs(l.second - l.first);\n}\n\n// 内積\ninline Real prod(Point x, Point y) {\n    return std::real(std::conj(x) * (y));\n}\n\n// xaに対するxbの正射影\nPoint proj(Segment l, Point p) {\n    Real ratio = prod(l.second - l.first, p - l.first) / sq(length(l));\n    return l.first + (l.second - l.first) * ratio;\n}\n\nusing namespace std;\n\nint main() {\n    cout << fixed << setprecision(10);\n\n    Real x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Segment l = make_pair(Point(x1, y1), Point(x2, y2));\n\n    int Q;\n    cin >> Q;\n    for (int q = 0; q < Q; ++q) {\n        Real x, y;\n        cin >> x >> y;\n        Point p(x, y);\n\n        Point ret = proj(l, p);\n        cout << ret.real() << \" \" << ret.imag() << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n};\ntypedef Point Vector;\nVector operator + (Vector A,Vector B){\n    return Vector(A.x+B.x,A.y+B.y);\n}\nVector operator - (Vector A,Vector B){\n    return Vector(A.x-B.x,A.y-B.y);\n}\nVector operator * (Vector A,double p){\n    return Vector(A.x*p,A.y*p);\n}\nVector operator / (Vector A,double p){\n    return Vector(A.x/p,A.y/p);\n}\nbool operator < (const Point& a,const Point& b){\n    return a.x<b.x||(a.x==b.x&&a.y<b.y);\n}\nconst double eps = 1e-10;\nint dcmp(double x){\n    if(fabs(x<eps)) return 0; else return (x<0?-1:1);\n}\nbool operator == (const Point& a,const Point& b){\n    return dcmp(a.x-b.x)==0 && dcmp(a.y-b.y)==0;\n}\n//点积\ndouble Dot(Vector A,Vector B){\n    return A.x*B.x+A.y*B.y;\n}\ndouble Length(Vector A){\n    return sqrt(Dot(A,A));\n}\ndouble Angle(Vector A,Vector B){\n    return acos(Dot(A,B)/Length(A)/Length(B));\n}\n\n//叉积\ndouble Cross(Vector A,Vector B){\n    return (A.x*B.y-A.y*B.x);\n}\n//三角形面积的二倍的叉乘公式\ndouble Area2(Point A,Point B,Point C){\n    return Cross(B-A,C-A);\n}\n//向量旋转,rad是弧度\nVector Rotate(Vector A,double rad){\n    return Vector(A.x*cos(rad)-A.y*sin(rad),A.x*sin(rad)+A.y*cos(rad));\n}\n//计算向量的单位法线,先逆时针旋转90度，然后把长度归一化\nVector Normal(Vector A){\n    double Len=Length(A);\n    return Vector(-A.y/Len,A.x/Len);\n}\n//求两直线交点\n//调用前请确保P+tv和Q+tw有唯一交点，当且仅当Cross(v,w)非0\nPoint GetLineIntersection(Point P,Vector v,Point Q,Vector w){\n    Vector u=P-Q;\n    double t=Cross(w,u)/Cross(v,w);\n    return P+v*t;\n}\n//点到直线的距离\ndouble DistanceToLine(Point P,Point A,Point B){\n    Vector v1=B-A,v2=P-A;\n    return fabs(Cross(v1,v2))/Length(v1);\n}\n//点到线段的距离\ndouble DistanceToSegment(Point P,Point A,Point B){\n    if(A==B) return Length(P-A);\n    Vector v1=B-A,v2=P-A,v3=P-B;\n    if(dcmp(Dot(v1,v2))<0) return Length(v2);\n    else if(dcmp(Dot(v1,v3))>0) return Length(v3);\n    else return fabs(Cross(v1,v2))/Length(v1);\n}\n//点在直线上的投影\nPoint GetLineProjection(Point P,Point A,Point B){\n    Vector v=B-A;\n    return A+v*(Dot(v,P-A)/Dot(v,v));\n}\nint main(){\n    Point A,B;\n    cin>>A.x>>A.y>>B.x>>B.y;\n    int t;\n    cin>>t;\n    while(t--){\n        Point P;\n        cin>>P.x>>P.y;\n        cout<<fixed<<setprecision(10)<<GetLineProjection(P,A,B).x<<\" \"<<GetLineProjection(P,A,B).y<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define int long long\n#define uint unsigned int\n#define pii pair<int, int>\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define FORR(i,a,b) for(int i=(a);i>=(b);--i)\n#define REP(i,n) FOR(i,0,n)\n#define REPR(i,n) FORR(i,n,0)\n#define ALL(c) ((c).begin(),(c).end())\n#define PB(a) push_back(a)\n#define EMPB(...) emplace_back(__VA_ARGS__)\n#define EMP(...) emplace(__VA_ARGS__)\n#define MP(a,b) make_pair(a,b)\n#define MT(...) make_tuple(__VA_ARGS__)\n#define ZERO(a) memset(a,0,sizeof(a))\n#define MINUS(a) memset(a,0xff,sizeof(a))\n#define MINF(a) memset(a,0x3f,sizeof(a))\n#define PW(n) (1LL<<(n))\nusing namespace std;\ntemplate <class T> inline bool CHMIN(T& a, T b) { if(a>b) { a=b; return 1; } return 0; }\ntemplate <class T> inline bool CHMAX(T& a, T b) { if(a<b) { a=b; return 1; } return 0; }\ntemplate <class T> inline void SORT(T& a) { sort(ALL(a)); }\ntemplate <class T> inline void REV(T& a) { reverse(ALL(a)); }\ntemplate <class T> inline void UNI(T& a) { SORT(a); a.erase(unique(ALL(a)),a.end()); }\ntemplate <class S, class T> ostream& operator<<(ostream& os, const pair<S,T> a) {\n  return os << a.first << ' ' << a.second;\n}\nconst int MOD = 1000000007;\n// const int INF = 0x3f3f3f3f3f3f3f3f;\n// const double EPS = 1e-10;\n/* ---------------------------------------------------------------------------------------------------- */\n\n/* 基本要素 */\nusing D = double; // 座標値の型 doubleかlong double\nusing P = complex<D>; // Point\nusing L = pair<P,P>;  // Line\nusing VP = vector<P>;\nconst double EPS = 1e-8;  // 許容誤差\nconst double INF = 1e12;\n#define X real()\n#define Y imag()\n#define LE(n,m) ((n)<(m)+EPS) // n <= m ?\n#define GE(n,m) ((n)+EPS>(m)) // n >= m ?\n#define EQ(n,m) (abs((n)-(m))<EPS)\n\nnamespace std {\n  istream& operator >> (istream& is, P& p) {\n    int F, S;\n    is >> F >> S;\n    p = P(F,S);\n    return is;\n  }\n}\n\n// 内積\nD dot(P a, P b) {\n  return (conj(a)*b).X;\n}\n// 外積\nD cross(P a, P b) {\n  return (conj(a)*b).Y;\n}\n// 点aから見た、点bから点cへの方向\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if (cross(b,c) > 0) return +1;  // counter clockwise\n  if (cross(b,c) < 0) return -1;  // clockwise\n  if (dot(b,c) < 0) return +2;  // c--a--b on line\n  if (norm(b) < norm(c)) return -2; // a--b--c on line or a==b\n  return 0;                     // a--c--b on line or a==c or b==c\n}\n// 点pの直線aへの射影点を返す\nP proj(P a1, P a2, P p) {\n  return a1 + dot(a2-a1,p-a1)/norm(a2-a1) * (a2-a1);\n}\n\nP p1, p2;\nint q;\n\nsigned main() {\n  cin.tie(0);\n  ios_base::sync_with_stdio(false);\n  cout << fixed << setprecision(10);\n\n  cin >> p1 >> p2 >> q;\n  REP(i, q) {\n    P p;\n    cin >> p;\n    P ans = proj(p1, p2, p);\n    cout << ans.X << \" \" << ans.Y << endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define eps (1e-10)\n#define equals(a,b) (fabs((a)-(b))<eps)\nstruct point{\n    double x,y;\n    point(){}\n    point(double x,double y):x(x),y(y){}\n    point operator + (point &p){return point(x+p.x,y+p.y);}\n    point operator - (point &p){return point(x-p.x,y-p.y);}\n    point operator * (double k){return point(x*k,y*k);}\n    point operator / (double k){return point(x/k,y/k);}\n\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n\n    bool operator < (const point &p){\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator == (const point &p){\n        return fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n    }\n};\n//内积\ndouble dot(point a,point b)\n{\n    return a.x*b.x+a.y*b.y;\n}\n//外积\ndouble cross(point a,point b){\n    return a.x*b.y-a.y*b.x;\n}\n\npoint project(point a,point b,point c)\n{\n    point base=b-a;\n    double r=dot(base,c-a)/base.norm();\n    base=base*r;\n    return a+base;\n}\n\nint main()\n{\n    point a,b;\n    cin>>a.x>>a.y>>b.x>>b.y;\n    int q;\n    cin>>q;\n    point temp;\n    for(int i=0;i<q;i++){\n        cin>>temp.x>>temp.y;\n        point res=project(a,b,temp);\n        printf(\"%.10f %.10f\\n\",res.x,res.y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <numeric>\n#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iomanip>\nusing namespace std;\ntypedef vector<double> VecD;\n#define rep(n) for(int i=0;i<n;i++)\n#define PB push_back\n\nclass Point{\nfriend const double operator*(const Point &, const Point &);\nfriend const Point operator*(const double, const Point &);\nfriend const Point operator*(const Point &, const double);\nfriend const Point operator+(const Point &, const Point &);\nfriend const Point operator+(const double, const Point &);\nfriend const Point operator+(const Point &, const double);\nfriend const Point operator-(const Point &);\nfriend const Point operator-(const Point &, const Point &);\nfriend const Point operator-(const double, const Point &);\nfriend const Point operator-(const Point &, const double);\n\npublic:\n\tPoint(){};\n\tPoint(VecD v){\n\t\tpoint = v;\n\t}\n\tVecD point;\n};\n\nconst double operator*(const Point &p0, const Point &p1){ return inner_product( p0.point.begin(), p0.point.end(), p1.point.begin(), 0); }\nconst Point operator*(const double a, const Point &p1){\n\tVecD v;\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++) v.PB(*iter1 * a);\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator* (const Point &p, const double a){return a*p;}\nconst Point operator+(const Point &p0, const Point &p1){\n\tVecD v;\n\tVecD::const_iterator iter0 = p0.point.begin();\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++){\n\t\tv.PB(*iter0 + *iter1);\n\t\titer0++;\n\t}\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator+(const double a, const Point &p1){\n\tVecD v;\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++){\n\t\tv.PB(*iter1 + a);\n\t}\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator+(const Point &p1, const double a){return a+p1;}\nconst Point operator-(const Point &p1){return (-1)*p1;}\nconst Point operator-(Point &p0, Point &p1){ return p0+(-p1); }\nconst Point operator-(double a, Point &p1){ return a+(-p1); }\nconst Point operator-(Point &p1, double a){return (-a)+p1;}\n\nconst Point projection(const Point &p1, const Point &p2){\n\t// cout << p1*p2 << endl;\n\treturn ((p1*p2) / (p1*p1)) * p1;\n}\n\nint main(void){\n\n\tdouble xp0, yp0, xp1, yp1; cin>>xp0>>yp0>>xp1>>yp1;\n\tint q; cin >> q;\n\tVecD v0; v0.PB(xp0); v0.PB(yp0); Point p0(v0);\n\tVecD v1; v1.PB(xp1); v1.PB(yp1); Point p1(v1);\n\tp1 = p1-p0;\n\t// cout << p1.point[0] << \" \" << p1.point[1] << endl;\n\trep(q){\n\t\tdouble xp2,yp2; cin>>xp2>>yp2;\n\t\tVecD v2; v2.PB(xp2); v2.PB(yp2); Point p2(v2);\n\t\tPoint ret = projection(p1, p2);\n\t\tcout << fixed << setprecision(10) << ret.point[0] << \" \" << fixed << setprecision(10) << ret.point[1] << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\tPoint operator + (Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point &p) { return Point(x * p.x, y * p.y); }\n\tPoint operator / (Point &p) { return Point(x / p.x, y / p.y); }\n\tvoid insert(double a, double b) { x = a; y = b; }\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\nstruct Segment {\n\tVector p1, p2;\n\tvoid insert(Vector a1, Vector a2) { p1 = a1; p2 = a2; }\n};\ninline double dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ninline double cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\ninline bool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\ninline bool isOrthogonal(Vector a1, Vector a2, Vector b1, Vector b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\ninline bool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\ninline bool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\ninline bool isParallel(Vector a1, Vector a2, Vector b1, Vector b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\ninline bool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\tbase.x *= r; base.y *= r;\n\treturn s.p1 + base;\n}\nint main() {\n\tcout << setprecision(10) << fixed;\n\tSegment s; cin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tint q; cin >> q;\n\tPoint p, ap;\n\trep(i, 0, q) {\n\t\tcin >> p.x >> p.y;\n\t\tap = project(s, p);\n\t\tcout << ap.x << \" \" << ap.y << \"\\n\";\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <typeinfo>\n#include <vector>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<25;\nconst double pi=acos(-1);\nconst double eps=1e-8;\nconst vi emp;\n\nstruct point{\n\tdouble x,y;\n//\ttypedef pair<point,point> pp;\n\tpoint operator+(point p){\n\t\treturn point{x+p.x,y+p.y};\n\t}\n\tpoint operator-(point p){\n\t\treturn point{x-p.x,y-p.y};\n\t}\n\tpoint operator*(double p){\n\treturn point{x*p,y*p};\n\t}\n\tpoint operator/(double p){\n\t\tif(!p) return point{0,0}; \n\t\treturn point{x/p,y/p};\n\t}\n\tbool operator==(point p){\n\t\treturn fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n\t}\n};\n\ntypedef pair<point,point> pp;\nconst point O{0,0};\n\nclass Geom{\n\tpublic:\n\tdouble Length(point x,point y){\n\t\tpoint z=y-x;\n\t\treturn sqrt(z.x*z.x+z.y*z.y);\n\t}\n\tdouble IP(point x,point y){\n\t\treturn x.x*y.x+x.y*y.y;\n\t}\n\tdouble COS(point x,point y){\n\t\treturn IP(x,y)/(Length(O,x)*Length(O,y));\n\t}\n\tpoint Projection(pp a,point x){\n\t\tpoint A=x-a.first,B=a.second-a.first;\n\t\treturn B*COS(A,B)*Length(O,A)/Length(O,B)+a.first;\n\t}\n};\n\nint Q;\ndouble x,y,X1,Y1,X2,Y2;\n\nint main(){\n\tcout<<syosu(10);\n\tGeom geo;\n\tcin>>X1>>Y1>>X2>>Y2>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tcin>>x>>y;\n\t\tpoint ans=geo.Projection(pp(point{X1,Y1},point{X2,Y2}),point{x,y});\n\t\tcout<<ans.x<<' '<<ans.y<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nnamespace LCY{\n\t#define double long double\n\tconst double EPS=1e-10;\n\tinline int dcmp(double x){if(fabs(x)<EPS)return 0;return (x<0)?-1:1;}\n\tstruct Point{double x,y;Point(double _x=0,double _y=0){x=_x;y=_y;}};\n\tstruct Vector{double x,y;Vector(double _x=0,double _y=0){x=_x;y=_y;}};\n\t\n\tVector operator - (Point a,Point b){return Vector(a.x-b.x,a.y-b.y);}\n\tVector operator * (Vector a,double d){return Vector(a.x*d,a.y*d);}\n\tPoint operator + (Point a,Vector b){return Point(a.x+b.x,a.y+b.y);}\n\t\n\tinline double dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}\n\tinline double cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}\n\tinline double norm(Vector a){return dot(a,a);}\n\t\n\tstruct Line{\n\t\tPoint p1,p2;\n\t\tLine(Point _p1=Point(0,0),Point _p2=Point(0,0)){p1=_p1;p2=_p2;}\n\t};\n\t\n\tPoint project(Line l,Point p){\n\t\tVector base=l.p2-l.p1;\n\t\tdouble r=dot(p-l.p1,base)/norm(base);\n\t\treturn l.p1+base*r;\n\t}\n}\nusing namespace LCY;\nint main(){\n\tPoint p1,p2;cin>>p1.x>>p1.y>>p2.x>>p2.y;\n\tint n;cin>>n;while(n--){\n\t\tPoint q;cin>>q.x>>q.y;Point res=project(Line(p1,p2),q);\n\t\tcout<<setiosflags(ios::fixed)<<setprecision(10)<<res.x<<\" \"<<res.y<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define mm(a,b) memset(a,b,sizeof(a))\n#define ACCELERATE (ios::sync_with_stdio(false),cin.tie(0))\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define pll pair<long long,long long>\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\n#define rush() int T;scanf(\"%d\",&T);while(T--)\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define sc(a) scanf(\"%d\",&a)\n#define sc2(a,b) scanf(\"%d%d\",&a,&b)\n#define sc3(a,b,c) scanf(\"%d%d%d\",&a,&b,&c)\n#define pf(x) printf(\"%d\\n\",x)\n#define pf2(x,y) printf(\"%d %d\\n\",x,y)\n#define pf3(x,y,z) printf(\"%d %d %d\\n\",x,y,z)\n#define all(x) (x).begin(),(x).end()\n#define PI acos(-1.0)\n#define E exp(1.0)\n#define db double\n#define ll long long\n#define ld long double\n#define ull unsigned long long\n//#define io\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nconst ll INF=0x3f3f3f3f3f3f3f3f;\n//#define gc getchar\n//char buf[1<<21],*p1=buf,*p2=buf;\n//inline int gc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}\n//inline int read()\n//{\n//    int ret=0,f=0;char c=gc();\n//    while(!isdigit(c)){if(c=='-')f=1;c=gc();}\n//    while(isdigit(c)){ret=ret*10+c-48;c=gc();}\n//    if(f)return -ret;return ret;\n//}\nconst db EPS=1e-10;\ninline int sign(db a){return a<-EPS?-1:a>EPS;}\ninline int cmp(db a,db b){return sign(a-b);}\ninline db sqr(db x){return x*x;}\nstruct Point{\n    db x,y;\n    Point(){}\n    Point(db _x,db _y):x(_x),y(_y){}\n    void input(){scanf(\"%lf%lf\",&x,&y);}\n    void output(){printf(\"%.10f %.10f\\n\",x,y);}\n    bool operator == (Point b)const{\n        return sign(x-b.x)==0&&sign(y-b.y)==0;\n    }\n    bool operator < (Point b)const{\n        return sign(x-b.x)==0?sign(y-b.y)<0:x<b.x;\n    }\n    Point operator + (const Point &b)const{\n        return Point(x+b.x,y+b.y);\n    }\n    Point operator - (const Point &b)const{\n        return Point(x-b.x,y-b.y);\n    }\n    db operator ^ (const Point &b)const{\n        return x*b.y-y*b.x;\n    }\n    db operator * (const Point &b)const{\n        return x*b.x+y*b.y;\n    }\n    db len(){return hypot(x,y);}\n    db len2(){return x*x+y*y;}\n    db distance(Point p){return hypot(x-p.x,y-p.y);}\n    Point operator * (const db &k)const{\n        return Point(x*k,y*k);\n    }\n    Point operator / (const db &k)const{\n        return Point(x/k,y/k);\n    }\n    db rad(Point a,Point b){\n        Point p=*this;\n        return fabs(atan2(fabs((a-p)^(b-p)),(a-p)*(b-p)));\n    }\n    Point unit(){return *this/len();}\n    Point trunc(db r){\n        db l=len();\n        if(!sign(l))return *this;\n        r/=l;\n        return Point(x*r,y*r);\n    }\n    Point rotleft(){return Point(-y,x);}\n    Point rotright(){return Point(y,-x);}\n    Point rotate(Point p,db angle){\n        Point v=(*this)-p;\n        db c=cos(angle),s=sin(angle);\n        return Point(p.x+v.x*c-v.y*s,p.y+v.x*s+v.y*c);\n    }\n};\nstruct Line{\n    Point s,e;\n    Line(){}\n    Line(Point _s,Point _e):s(_s),e(_e){}\n    bool operator == (Line v){\n        return (s==v.s)&&(e==v.e);\n    }\n    Line(Point p,db angle){\n        s=p;\n        if(sign(angle-PI/2)==0)e=(s+Point(0,1));\n        else e=(s+Point(1,tan(angle)));\n    }\n    Line(db a,db b,db c){\n        if(sign(a)==0){\n            s=Point(0,-c/b);e=Point(1,-c/b);\n        }else if(sign(b)==0){\n            s=Point(-c/a,0);e=Point(-c/a,1);\n        }else{\n            s=Point(0,-c/b);e=Point(1,(-c-a)/b);\n        }\n    }\n    void input(){s.input();e.input();}\n    void adjust(){if(e<s)swap(s,e);}\n    db length(){return s.distance(e);}\n    //[0,PI)\n    db angle(){\n        db k=atan2(e.y-s.y,e.x-s.x);\n        if(sign(k)<0)k+=PI;\n        if(sign(k-PI)==0)k-=PI;\n        return k;\n    }\n    //line|1 on the left|2 on the right|3 on line|\n    int relation(Point p){\n        int c=sign((p-s)^(e-s));\n        if(c<0)return 1;\n        else if(c>0)return 2;\n        else return 3;\n    }\n    bool pointonseg(Point p){\n        return sign((p-s)^(e-s))==0&&sign((p-s)*(p-e))<=0;\n    }\n    bool parallel(Line v){\n        return sign((e-s)^(v.e-v.s))==0;\n    }\n    //|0 not intersect|1 non-standard|2 intersect|\n    int segcrossseg(Line v){\n        int d1=sign((e-s)^(v.s-s));\n        int d2=sign((e-s)^(v.e-s));\n        int d3=sign((v.e-v.s)^(s-v.s));\n        int d4=sign((v.e-v.s)^(e-v.s));\n        if((d1^d2)==-2&&(d3^d4)==-2)return 2;\n        return (d1==0&&sign((v.s-s)*(v.s-e))<=0)||\n            (d2==0&&sign((v.e-s)*(v.e-e))<=0)||\n            (d3==0&&sign((s-v.s)*(s-v.e))<=0)||\n            (d4==0&&sign((e-v.s)*(e-v.e))<=0);\n    }\n    //|0 not intersect|1 non-standard|2 intersect|\n    int linecrossseg(Line v){\n        int d1=sign((e-s)^(v.s-s));\n        int d2=sign((e-s)^(v.e-s));\n        if((d1^d2)==-2)return 2;\n        return (d1==0||d2==0);\n    }\n    //|0 parallel|1 coincides|2 intersect|\n    int linecrossline(Line v){\n        if((*this).parallel(v))return v.relation(s)==3;\n        return 2;\n    }\n    //要保证两直线不平行或重合\n    Point crossPoint(Line v){\n        db a1=(v.e-v.s)^(s-v.s);\n        db a2=(v.e-v.s)^(e-v.s);\n        return Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));\n    }\n    db dispointtoline(Point p){\n        return fabs((p-s)^(e-s))/length();\n    }\n    db dispointtoseg(Point p){\n        if(sign((p-s)*(e-s))<0||sign((p-e)*(s-e))<0)return min(p.distance(s),p.distance(e));\n        return dispointtoline(p);\n    }\n    //前提是两线段不相交，相交距离就是0了\n    db dissegtoseg(Line v){\n        return min(min(dispointtoseg(v.s),dispointtoseg(v.e)),min(v.dispointtoseg(s),v.dispointtoseg(e)));\n    }\n    Point lineprog(Point p){\n\t\treturn s + ( ((e-s)*((e-s)*(p-s)))/((e-s).len2()) );\n\t}\n\tPoint symmetrypoint(Point p){\n\t\tPoint q = lineprog(p);\n\t\treturn Point(2*q.x-p.x,2*q.y-p.y);\n\t}\n};\nLine l;\nPoint p;\nint main()\n{\n    #ifdef io\n    freopen(\"in.txt\",\"r\",stdin);\n    #endif\n    l.input();\n    int q;\n    sc(q);\n    while(q--){\n        p.input();\n        p=l.lineprog(p);\n        p.output();\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<cmath>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nconst double EPS = 1e-10;\nbool equals(double a, double b){ return (fabs(a) - fabs(b)) < EPS;};\n\nclass Point{\npublic:\n\tdouble x, y;\n\t\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\tPoint(const Point &p) { x = p.x; y = p.y;};\n\t\n\tPoint operator + (const Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (const Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (const double &a) { return Point(x * a, y * a); }\n\tPoint operator / (const double &a) { return Point(x / a, y / a); }\n\t\n\tPoint & operator = (const Point& p) {x = p.x; y = p.y; return *this;};\n\tPoint & operator += (const Point& p) {x += p.x; y += p.y; return *this;};\n\tPoint & operator -= (const Point& p) {x -= p.x; y -= p.y; return *this;};\n\tPoint & operator *= (const Point& p) {x *= p.x; y *= p.y; return *this;};\n\tPoint & operator /= (const Point& p) {x /= p.x; y /= p.y; return *this;};\n\t\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\t\n\tbool operator > (const Point &p) const {\n\t\treturn x != p.x ? x > p.x : y > p.y;\n\t}\n\t\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\t\n\tdouble abs() { return sqrt(norm()); };\n\tdouble norm() { return x * x + y * y;};\n};\n\ntypedef Point Vector;\n\n\ndouble norm(Vector a){\n\treturn a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a){\n\treturn sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nstruct Segment{\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a,b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2){\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isPrallel(Segment s1, Segment s2){\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nsigned main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tcout<<fixed<<setprecision(10);\n\t\n\tint q;\n\tSegment s;\n\t\n\t\n\tcin>>s.p1.x>>s.p1.y>>s.p2.x>>s.p2.y;\n\t\n\tcin>>q;\n\t\n\tfor(int i = 0; i < q; i++){\n\t\tPoint p, ans;\n\t\t\n\t\tcin>>p.x>>p.y;\n\t\t\n\t\tans = project(s, p);\n\t\t\n\t\tcout<<ans.x<<\" \"<<ans.y<<endl;\n\t}\n\t\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "# include <iostream>\n# include <algorithm>\n#include <array>\n# include <cassert>\n#include <cctype>\n#include <climits>\n#include <numeric>\n# include <vector>\n# include <string>\n# include <set>\n# include <map>\n# include <cmath>\n# include <iomanip>\n# include <functional>\n# include <tuple>\n# include <utility>\n# include <stack>\n# include <queue>\n# include <list>\n# include <bitset>\n# include <complex>\n# include <chrono>\n# include <random>\n# include <limits.h>\n# include <unordered_map>\n# include <unordered_set>\n# include <deque>\n# include <cstdio>\n# include <cstring>\n#include <stdio.h>\n#include<time.h>\n#include <stdlib.h>\n#include <cstdint>\n#include <cfenv>\n\n//#include <bits/stdc++.h>\nusing namespace std;\nusing LL = long long;\nusing ULL = unsigned long long;\nlong long MOD = 1000000000 + 7;\nconstexpr long long INF = numeric_limits<LL>::max();\nconst double PI = acos(-1);\n#define fir first\n#define sec second\n#define thi third\n#define debug(x) cerr<<#x<<\": \"<<x<<'\\n'\ntypedef pair<LL, LL> Pll;\ntypedef pair<LL, pair<LL, LL>> Ppll;\ntypedef pair<LL, pair<LL, bitset<100001>>> Pbll;\ntypedef pair<LL, pair<LL, vector<LL>>> Pvll;\ntypedef pair<LL, LL> Vec2;\nstruct Tll { LL first, second, third; };\nstruct Fll { LL first, second, third, fourd; };\ntypedef pair<LL, Tll> Ptll;\n#define rep(i,rept) for(LL i=0;i<rept;i++)\n#define Mfor(i,mf) for(LL i=mf-1;i>=0;i--)\nLL h, w, n, m, k, t, s, q, last, cnt, sum, ans, dp[10000][10000], a[2000000], b[2000000];\nstring str, ss;\nbool f[1100][1100];\nchar c;\nint di[4][2] = { { 0,1 },{ 1,0 },{ 0,-1 },{ -1,0 } };\nstruct Edge { LL to, cost; };\nvector<Edge>vec[200000];\nvector<LL>v,pick[200000];\nmap<string, vector<LL>>ma;\nmultiset<LL>st[3];\nvoid YN(bool f) {\n\tif (f)\n\t\tcout << \"YES\" << endl;\n\telse\n\t\tcout << \"NO\" << endl;\n}\nvoid yn(bool f) {\n\tif (f)\n\t\tcout << \"Yes\" << endl;\n\telse\n\t\tcout << \"No\" << endl;\n}\nstruct vecter {\n\tdouble x, y, r;\n\tvecter() {}\n\tvecter(double x_, double y_) :x(x_), y(y_) {\n\t\tr = sqrt(x*x + y * y);\n\t}\n\tvecter operator+(vecter v) {\n\t\treturn vecter(x + v.x, y + v.y);\n\t}\n\tvecter operator-(vecter v) {\n\t\treturn vecter(x - v.x, y - v.y);\n\t}\n\tvecter operator/(double k) {\n\t\treturn vecter(x/k, y/k);\n\t}\n\tvecter operator*(double k) {\n\t\treturn vecter(x*k,y*k);\n\t}\n\tdouble operator*(vecter v) { //内積\n\t\treturn x * v.x + y * v.y;\n\t}\n\tdouble angle(vecter v) { //なす角(Radians)\n\t\treturn acos(*this*v / (r * v.r));\n\t}\n\tvecter unit() {\n\t\treturn vecter(x, y) / r;\n\t}\n};\nvecter dir(double rad) {\n\treturn vecter(cos(rad),sin(rad));\n}\nint main() {\n\tdouble x, y;\n\tcin >> x >> y;\n\tvecter p1(x, y);\n\tcin >> x >> y;\n\tvecter p2(x, y);\n\tcin >> n;\n\trep(i, n) {\n\t\tcin >> x >> y;\n\t\tvecter P(x, y);\n\t\tvecter cur=p1+(p2-p1).unit()*(P - p1).r*cos(((vecter)(p2 - p1)).angle((vecter)(P - p1)));\n\t\tprintf(\"%.15f %.15f\\n\", cur.x,cur.y);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n\n// double\nconst double EPS = 1e-9;\ndouble relative_error(double d1, double d2) {return (d1 - d2) / std::max({d1, d2, EPS});}\n\n// Point\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK};\n\nclass Point {\n    double x_, y_;\npublic:\n    Point(double d = 0.0);\n    Point(double x, double y);\n    double x() const;\n    double y() const;\n    double x(double d);\n    double y(double d);\n    const Point operator-() const;\n    const Point& operator=(const Point& p);\n    const Point& operator+=(const Point& p);\n    const Point& operator-=(const Point& p);\n    const Point& operator*=(const Point& p);\n    const Point& operator/=(const Point& p);\n    double abs() const;\n    double norm() const;\n    double dot(const Point& p) const;\n    double cross(const Point& p) const;\n    double distance(const Point& p) const;\n};\n\nbool operator==(const Point& lhs, const Point& rhs) {return lhs.x() == rhs.x() && lhs.y() == rhs.y();}\nbool operator<(const Point& lhs, const Point& rhs) {return lhs.x() != rhs.x() ? lhs.x() < rhs.x() : lhs.y() < rhs.y();}\nbool operator<=(const Point& lhs, const Point& rhs) {return lhs.x() != rhs.x() ? lhs.x() < rhs.x() : lhs.y() <= rhs.y();}\nbool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\nbool operator>(const Point& lhs, const Point& rhs) {return !(lhs <= rhs);}\nbool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x() + rhs.x(), lhs.y() + rhs.y());}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x() - rhs.x(), lhs.y() - rhs.y());}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x() * rhs.x(), lhs.y() * rhs.y());}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x() / rhs.x(), lhs.y() / rhs.y());}\n\nPoint::Point(double d) :x_(d), y_(d) {}\nPoint::Point(double x, double y) :x_(x), y_(y) {}\ndouble Point::x() const {return x_;}\ndouble Point::y() const {return y_;}\ndouble Point::x(double d) {return x_ = d;}\ndouble Point::y(double d) {return y_ = d;}\nconst Point Point::operator-() const {return Point(-x(), -y());}\nconst Point& Point::operator=(const Point& p) {x(p.x()); y(p.y()); return *this;}\nconst Point& Point::operator+=(const Point& p) {return *this = *this + p;}\nconst Point& Point::operator-=(const Point& p) {return *this = *this - p;}\nconst Point& Point::operator*=(const Point& p) {return *this = *this * p;}\nconst Point& Point::operator/=(const Point& p) {return *this = *this / p;}\ndouble Point::abs() const {return hypot(x(), y());}\ndouble Point::norm() const {return x() * x() + y() * y();}\ndouble Point::dot(const Point& p) const {return x() * p.x() + y() * p.y();}\ndouble Point::cross(const Point& p) const {return x() * p.y() - y() * p.x();}\ndouble Point::distance(const Point& p) const {return (*this - p).abs();}\n\nPOSITION ccw(const Point& a, const Point& b, const Point& c) {\n    Point v1 = b - a;\n    Point v2 = c - a;\n    if(v1.cross(v2) > EPS) return COUNTER_CLOCKWISE;\n    if(v1.cross(v2) < -EPS) return CLOCKWISE;\n    if(v1.dot(v2) < -EPS) return ONLINE_BACK;\n    if(v2.norm() - v1.norm() > EPS) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// Line\nclass Line {\n    Point initial_, terminal_;\npublic:\n    Line(const Point& p1, const Point& p2);\n    Line(double x1, double y1, double x2, double y2);\n    const Point& initial() const;\n    const Point& terminal() const;\n    const Point& initial(const Point& p);\n    const Point& terminal(const Point& p);\n    Point projection(const Point& p) const;\n    Point reflection(const Point& p) const;\n};\nLine::Line(const Point& p1, const Point& p2) :initial_(p1), terminal_(p2) {}\nLine::Line(double x1, double y1, double x2, double y2) :initial_(x1, y1), terminal_(x2, y2) {}\nconst Point& Line::initial() const {return initial_;}\nconst Point& Line::terminal() const {return terminal_;}\nconst Point& Line::initial(const Point& p) {return initial_ = p;}\nconst Point& Line::terminal(const Point& p) {return terminal_ = p;}\nvoid print(const Point&);\nPoint Line::projection(const Point& p) const {\n    Point v1 = p - initial();\n    Point v2 = initial() - terminal();\n    return Point(initial() + v2 * (v1.dot(v2) / v2.norm()));\n}\nPoint Line::reflection(const Point& p) const {return p + (projection(p) - p) * 2.0;}\n\n// misc\nvoid print(const Point& p) {\n    std::cout << \"(\" << p.x() << \", \" << p.y() << \")\" << std::endl;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n#include<iomanip>\n#include<vector>\nusing namespace std;\n\nint main() {\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Line l(x1, y1, x2, y2);\n    int q;\n    for(cin >> q; q > 0; --q) {\n        double x, y;\n        cin >> x >> y;\n        Point p = l.projection(Point(x, y));\n        cout<<setprecision(10)<<fixed<<p.x()<<\" \"<<p.y()<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define lb long double \nusing namespace std;\nstruct Po{lb x,y;}p1,p2,x;\nint t;\nvoid get(Po &x){scanf(\"%Lf %Lf\",&x.x,&x.y);}\nPo operator *(Po x,lb y){return (Po){x.x*y,x.y*y};}\nPo operator +(Po x,Po y){return (Po){x.x+y.x,x.y+y.y};}\nPo operator -(Po x,Po y){return (Po){x.x-y.x,x.y-y.y};}\nlb operator *(Po x,Po y){return x.x*y.x+x.y*y.y;}\nlb l2(Po x){return x.x*x.x+x.y*x.y;}\nint main(){\n\tget(p1);get(p2);\n\tPo np=p2-p1;\n\tscanf(\"%d\",&t);\n\twhile (t--){\n\t\tget(x);\n\t\tPo nx=np*((np*(x-p1))/l2(np));\n\t\tx=p1+nx;\n\t\tprintf(\"%.10Lf %.10Lf\\n\",x.x,x.y);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n \n#define EPS (1e-10)\n#define equals(a,b) ( fabs(a-b) < EPS )\n#define PI 3.141592653589793238\n\n// COUNTER CLOCKWISE\nstatic const int CCW_COUNTER_CLOCKWISE = 1;\nstatic const int CCW_CLOCKWISE = -1;\nstatic const int CCW_ONLINE_BACK = 2;\nstatic const int CCW_ONLINE_FRONT = -2;\nstatic const int CCW_ON_SEGMENT = 0;\n\n//Intersect Circle and Circle\nstatic const int ICC_SEPARATE = 4;\nstatic const int ICC_CIRCUMSCRIBE = 3;\nstatic const int ICC_INTERSECT = 2;\nstatic const int ICC_INSCRIBE = 1;\nstatic const int ICC_CONTAIN = 0;\n\nstruct point{\n\tdouble x,y;\n\t//construct\n\tpoint() {} \n\tpoint(double x,double y):x(x),y(y){}\n\t//演算子\n\tpoint operator + (point p) { return point(x+p.x,y+p.y); }\n\tpoint operator - (point p) { return point(x-p.x,y-p.y); }\n\tpoint operator * (double k) { return point(x*k,y*k); }\n\tpoint operator / (double k) { return point(x/k,y/k); }\n\tpoint operator / (point p) { return point( (x*p.x + y*p.y)/p.norm()  , (-x*p.y + y*p.x)/p.norm() ) ; }\n\tbool operator < (point p) { return x!=p.x ? x<p.x : y<p.y; }\n\tbool operator == (point p) { return equals(x,p.x) && equals(y,p.y) ; }\n\t//function\n\tdouble arg() { return atan2(y,x) ; }\n\tdouble norm(){return x*x+y*y; }\n\tdouble abs() { return sqrt(norm() ) ;}\n\tdouble dot(point p) { return p.x*x + p.y*y; }\n\tdouble cross(point p) { return x*p.y - y*p.x; }\n\n\t//input output\n\tvoid input(){cin>>x>>y;}\n\tvoid print(){cout<<x<<' '<<y<<endl;};\n\n};\n\nbool sort_x(point a,point b){\n\treturn a.x!=b.x?a.x<b.x:a.y<b.y ;\n}\nbool sort_y(point a,point b){\n\treturn a.y!=b.y?a.y<b.y:a.x<b.x ;\n}\n\ntypedef vector<point> polygon;\n\nstruct segment{\n\tpoint s,t;\n\tsegment() {}\n\tsegment(point s,point t) : s(s),t(t){}\n\tvoid input(){s.input(),t.input(); }\n};\ntypedef segment line;\n\nstruct circle{\n\tpoint c;\n\tdouble r;\n\tcircle() {}\n\tcircle(point c,double r) : c(c),r(r){}\n\n};\n\ndouble norm(point a){\treturn a.norm(); }\ndouble abs(point a){ return a.abs(); }\ndouble dot(point a,point b) { return a.x*b.x + a.y*b.y ; }\ndouble cross(point a,point b) { return a.x * b.y - a.y * b.x ; }\n\npoint orth(point p){ return point(-p.y,p.x); }\n\n//isOrthgonal 垂直\nbool isOrthogonal(point a,point b) { return equals(dot(a,b), 0.0 ) ; }\nbool isOrthogonal(point a,point b,point c,point d) { return isOrthogonal(a-b,c-d) ; }\nbool isOrthogonal(line l1,line l2 ){ return isOrthogonal(l1.t-l1.s,l2.t-l2.s); }\n//isParallel 平行\nbool isParallel(point a,point b) { return equals(cross(a,b), 0.0) ; }\nbool isParallel(point a,point b,point c,point d) { return isParallel(a-b,c-d); }\nbool isParallel(line l1,line l2) { return isParallel(l1.t-l1.s,l2.t-l2.s) ; }\n\npoint project(line l,point p){\n\tpoint base = l.t-l.s;\n\tdouble r = dot(p-l.s,base) / norm(base) ;\n\treturn l.s + base*r;\n}\npoint reflect(line l,point p){\n\treturn p + (project(l,p) - p) *2.0;\n}\n\n\n\n\nint main(){\n    \tline l;\n\tl.input();\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tpoint a;\n\t\ta.input();\n\t\tpoint b = project(l,a);\n\t\tprintf(\"%0.10lf %0.10lf\\n\",b.x,b.y);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <iomanip>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\n\nstruct Vector {\n    double x, y;\n    Vector(double x, double y) : x(x), y(y) {\n    }\n};\n\ntypedef Vector Point;\n\nVector operator-(const Vector& a, const Vector& b) {\n    return Vector(a.x - b.x, a.y - b.y);\n}\n\nVector operator+(const Vector& a, const Vector& b) {\n    return Vector(a.x + b.x, a.y + b.y);\n}\n\nVector operator*(const Vector& a, const double p) {\n    return Vector(a.x * p, a.y * p);\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\nVector project(Point a, Point b, Point p) {\n    Vector v = b - a;\n    double t = dot(p - a, v)/dot(v, v);\n    return a + v * t;\n    \n}\n\nint main() {\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Point a(x1, y1);\n    Point b(x2, y2);\n    \n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        double x, y;\n        cin >> x >> y;\n        Vector ans = project(a, b, Point(x, y));\n        cout << setprecision(8) <<fixed << ans.x << \" \" << ans.y << endl;\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// C++ 14\n#include <iostream>\n#include <vector>\n#include <list>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <unordered_map>\n#include <math.h>\n\n#define ll long long\n#define Int ll\n#define loop(x, start, end) for(Int x = start; x < end; x++)\n#define loopdown(x, start, end) for(int x = start; x > end; x--)\n#define span(a,x,y) a.begin()+x,a.begin()+y\n#define span_all(a) a.begin(),a.end()\n#define len(x) (x.size())\n#define last(x) (*(x.end()-1))\n\nusing namespace std;\n\n#define EPS 0.000000001\n#define fequals(a,b) (fabs((a) - (b)) < EPS)\n\nclass Vector2 {\npublic:\n  double x, y;\n  \n  Vector2(double x = 0, double y = 0): x(x), y(y) {}\n  \n  Vector2 operator + (const Vector2 v) const { return Vector2(x + v.x, y + v.y); }\n  Vector2 operator - (const Vector2 v) const { return Vector2(x - v.x, y - v.y); }\n  Vector2 operator * (const double k) const { return Vector2(x * k, y * k); }\n  Vector2 operator / (const double k) const { return Vector2(x / k, y / k); }\n  \n  double length() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n  double dot (Vector2 const v) { return x * v.x + y * v.y; }\n  double cross (Vector2 const v) { return x * v.y - y * v.x; }\n  \n  bool parallel(Vector2 &other) {\n    return fequals(fabs(dot(other)), length() * other.length());\n  }\n  \n  bool orthogonal(Vector2 &other) {\n    return fequals(0, dot(other));\n  }\n  \n  bool operator < (const Vector2 &v) {\n    return x != v.x ? x < v.x : y < v.y;\n  }\n  \n  bool operator == (const Vector2 &v) {\n    return fabs(x - v.x) < EPS && fabs(y - v.y) < EPS;\n  }\n};\n\nostream & operator << (ostream & out, Vector2 const & v) { \n  out<< \"Vector2(\" << v.x << \", \" << v.y << ')';\n  return out;\n}\n\nistream & operator >> (istream & in, Vector2 & v) { \n  double x, y;\n  in >> x;\n  in >> y;\n  v.x = x;\n  v.y = y;\n  return in;\n}\n\n\nvoid project(Vector2 start_, Vector2 end_, Vector2 p) {\n    Vector2 v = end_ - start_;\n    Vector2 op = start_ + v * (v.dot(p - start_) / v.norm());\n    cout << op.x << ' ' << op.y << endl;\n}\n\n#define MAX_N 1001\nInt N;\nVector2 start_, end_, p;\n\nvoid input() {\n  cin >> start_ >> end_ >> N;\n  while (cin >> p) {\n    project(start_, end_, p);\n  }\n}\n\nint main() {\n  cout.precision(15);\n  input();\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define REP(i,n) FOR(i,0,n)\n#define FOR(i,a,b) for(ll i=a;i<b;i++)\n#define PB push_back\ntypedef vector<ll> vi;\ntypedef vector<vector<ll>> vvi;\nconst ll INF = (1ll << 60);\ntypedef pair<ll,ll> pii;\nstruct Point{double x,y;};\nstruct Vec{double x,y; Vec(Point p1,Point p2) {x=p2.x-p1.x; y=p2.y-p1.y;}};\ndouble dot(Vec v1,Vec v2) {return v1.x*v2.x+v1.y*v2.y;}\ndouble len(Vec v) {return sqrt(dot(v,v));}\ndouble cos(Vec v1,Vec v2) {return dot(v1,v2)/(len(v1)*len(v2));}\nPoint operator+(Point p,Vec v) {p.x+=v.x; p.y+=v.y; return p;}\ndouble dist(Point p1,Point p2) {return len(Vec(p1,p2));}\nVec operator*(Vec v,double i) {v.x*=i; v.y*=i; return v;}\nint main(){\n  Point p1,p2; cin>>p1.x>>p1.y>>p2.x>>p2.y;\n  ll q; cin>>q;\n  REP(i,q){\n    Point p; cin>>p.x>>p.y;\n    Vec a(p1,p), b(p1,p2);\n    Point ans=p1+b*(dot(a,b)/dot(b,b));\n    printf(\"%12f %12f\\n\",ans.x,ans.y);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(_x), y(_y){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\tdouble res = a.x*b.x + a.y*b.y;\n\treturn res;\n}\n\ndouble cross(Vector a, Vector b){\n\tdouble res = a.x*b.y - a.y*b.x;\n\treturn res;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tVector v = p - s.p1;\n\tdouble l = dot(v, base) / base.norm();\n\treturn s.p1 + base * l;\n}\n\nint main(){\n\tSegment s;\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tint n;\n\tcin >> n;\n\tcin.precision(20);\n\tfor (int i = 0; i < n; ++i){\n\t\tPoint pp;\n\t\tcin >> pp.x >> pp.y;\n\t\tPoint res = project(s, pp);\n\t\tcout << res.x << \" \" << res.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(i, a, b) for (int i = a, i##end = b; i <= i##end; ++i)\n#define per(i, a, b) for (int i = a, i##end = b; i >= i##end; --i)\n#define rep0(i, a) for (int i = 0, i##end = a; i < i##end; ++i)\n#define per0(i, a) for (int i = (int)a-1; ~i; --i)\n#define max(a, b) ((a) > (b) ? (a) : (b))\n#define min(a, b) ((a) < (b) ? (a) : (b))\n#define chkmax(a, b) a = max(a, b)\n#define chkmin(a, b) a = min(a, b)\n#define x first\n#define y second\n#define enter putchar('\\n')\n\ntypedef long long ll;\ntypedef double DB;\n\nconst DB eps = 1e-12;\n\nshort sgn(DB x) { return fabs(x) < eps ? 0 : (x > 0 ? 1 : -1); }\n\nstruct Point {\n\tDB x, y;\n\tPoint(DB x = 0, DB y = 0) : x(x), y(y) {}\n\tPoint operator + (Point a) { return Point(x + a.x, y + a.y); }\n\tPoint operator - (Point a) { return Point(x - a.x, y - a.y); }\n\tPoint operator - () { return Point(-x, -y); }\n\tfriend Point operator * (DB k, Point a) { return Point(k * a.x, k * a.y); }\n\tDB operator % (Point a) { return x * a.x + y * a.y; }\n\tDB operator / (Point a) { return x * a.y - y * a.x; }\n\toperator DB() { return sqrt(*this % *this); }\n};\n\nPoint gp() { Point a; scanf(\"%lf%lf\", &a.x, &a.y); return a; }\nvoid wp(Point a) { printf(\"%.10lf %.10lf \", a.x, a.y); }\n\nstruct Poly {\n\tstd::vector<Point> a;\n\tPoly(int n = 0) { a.resize(n); rep0(i, n) a[i] = gp(); }\n\tPoint &operator [] (int i) { int n = a.size(); return a[i >= n ? i-n : i]; }\n};\n\nPoint Proj(Point P, Point P1, Point P2) { // Projection\n\tPoint v = P2-P1; DB t = (P-P1)%v / (v%v);\n\treturn P1 + t*v;\n}\n\nint q;\n\nint main() {\n\tPoint P1 = gp(), P2 = gp();\n\tscanf(\"%d\", &q);\n\twhile (q--) {\n\t\tPoint P = gp();\n\t\twp(Proj(P, P1, P2)); enter;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :\n\t\t\tx(x), y(y) {\n\t}\n\n\tPoint operator +(Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(double a) {\n\t\treturn Point(x * a, y * a);\n\t}\n\n};\n\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) :\n\t\t\tp1(p1), p2(p2) {\n\t}\n};\n\ndouble norm(Point p1) {\n\treturn p1.x * p1.x + p1.y * p1.y;\n}\n\ndouble dot(Point p1, Point p2) {\n\treturn p1.x * p2.x + p1.y * p2.y;\n}\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p1 - s.p2;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\n\nint main() {\n\n\tint p1x, p1y, p2x, p2y;\n\tscanf(\"%d %d %d %d\", &p1x, &p1y, &p2x, &p2y);\n\tPoint p1(p1x, p1y);\n\tPoint p2(p2x, p2y);\n\tSegment segment(p1, p2);\n\n\tint q;\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; ++i) {\n\t\tint qx, qy;\n\t\tscanf(\"%d %d\", &qx, &qy);\n\n\t\tPoint p(qx, qy);\n\t\tPoint ans = project(segment, p);\n\t\tcout << ans.x << \" \" << ans.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<cstdio>\nusing namespace std;\n\nclass Point{\npublic:\n  double x,y;\n  Point(double x=0,double y=0):x(x),y(y){}\n\n  Point operator+(Point p){return Point(x+p.x,y+p.y);}\n  Point operator-(Point p){return Point(x-p.x,y-p.y);}\n  Point operator*(double k){return Point(x*k,y*k);}\n  Point operator/(double k){return Point(x/k,y/k);}\n\n  double abs(){return sqrt(norm());}\n\n  double norm(){return (x*x+y*y);}\n};\ntypedef Point Vector;\n\nclass Segment{\npublic:\n  Point p1,p2;\n  Segment(Point p1,Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\ndouble dot(Vector a,Vector b){return (a.x*b.x+a.y*b.y);}\ndouble cross(Vector a,Vector b){return (a.x*b.y-a.y*b.x);}\n\nPoint project(Segment s,Point p){\n  Vector base=(s.p2-s.p1);\n  double r=(dot(p-s.p1,base)/base.norm());\n  return (s.p1+base*r);\n}\n\nint main()\n{\n  Point A,B,C,D;\n  int q;\n\n  cin>>A.x>>A.y>>B.x>>B.y;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    cin>>C.x>>C.y;\n    D=project(Segment(A,B),C);\n    printf(\"%.10f %.10f\\n\",D.x,D.y);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<algorithm>\n#include<climits>\n#include<math.h>\n#include<cstdio>\nusing namespace std;\n\nstruct Point{\n\tdouble x;\n\tdouble y;\n};\n\nvoid Projection(Point &p1,Point &p2,Point &p){\n\tdouble e=sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));\n\tdouble ex=(p2.x-p1.x)/e;\n\tdouble ey=(p2.y-p1.y)/e;\n\tdouble inner=ex*(p.x-p1.x)+ey*(p.y-p1.y);\n\tdouble x=p1.x+inner*ex;\n\tdouble y=p1.y+inner*ey;\n\tprintf(\"%.10lf %.10lf \\n\",x,y);\n}\n\nint main(){\n\tint q;\n\tPoint p1,p2,p;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\t\n\tcin >> q;\n\t\n\tfor (int i=0;i<q;i++){\n\t\tcin >> p.x >> p.y;\n\t\tProjection(p1,p2,p);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <iostream>\n#include <queue>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string>\n#ifndef NULL\n#define NULL 0\n#endif\nusing namespace std;\n\nconst int MAXN = 50000 + 10;\nconst double pi = acos(-1.0);\nconst double inf = 1e100;\nconst double eps = 1e-10;\n\ninline double read() //浮点型快读\n{\n    double num;\n    char in;\n    double Dec = 0.1;\n    bool IsN = false, IsD = false;\n    in = getchar();\n    while (in != '-' && in != '.' && (in < '0' || in > '9'))\n        in = getchar();\n    if (in == '-') {\n        IsN = true;\n        num = 0;\n    } else if (in == '.') {\n        IsD = true;\n        num = 0;\n    } else\n        num = in - '0';\n    if (!IsD) {\n        while (in = getchar(), in >= '0' && in <= '9') {\n            num *= 10;\n            num += in - '0';\n        }\n    }\n    if (in != '.') {\n        if (IsN)\n            num = -num;\n        return num;\n    } else {\n        while (in = getchar(), in >= '0' && in <= '9') {\n            num += Dec * (in - '0');\n            Dec *= 0.1;\n        }\n    }\n    if (IsN)\n        num = -num;\n    return num;\n}\n\nint sgn(double d)\n{\n    if (fabs(d) < eps)\n        return 0;\n    if (d > 0)\n        return 1;\n    return -1;\n}\nint dcmp(double x, double y)\n{\n    if (fabs(x - y) < eps)\n        return 1;\n    if (x > y)\n        return 0;\n    return -1;\n}\n\nstruct vec{\n    double x,y;\n    vec(double x,double y) {\n        this->x=x;\n        this->y=y;\n    }\n    vec(){}\n    vec operator *(const vec& i_T)const{\n        return vec(x*i_T.x,y*i_T.y);\n    }\n    vec operator *(double u)const{\n        return vec(x*u,y*u);\n    }\n    vec operator /(double u)const{\n        return vec(x/u,y/u);\n    }\n    vec operator +(const vec& i_T){\n        return vec(x+i_T.x,y+i_T.y);\n    }\n    vec operator -(const vec& i_T){\n        return vec(x-i_T.x,y-i_T.y);\n    }\n}p[MAXN];\ndouble chaji(vec A, vec B)\n{\n    return A.x * B.y - A.y * B.x; // 正为A->B左旋\n}\ndouble dianji(vec A,vec B)\n{\n    return A.x*B.x+A.y*B.y;\n}\ndouble xiangliang(vec a, vec b, vec c) // 祖父点a,父点b,新增儿子点c\n{\n    vec A = b-a; // 向量ab\n    vec B = c-a; // 向量ac\n    return chaji(A, B);\n}\ndouble changdu(vec a) //长度\n{\n    return sqrt(a.x*a.x+a.y*a.y);\n}\nvec touying(vec a,vec b,vec c) //c投影在ab上的位置\n{\n    vec A=b-a;\n    vec B=c-a;\n    double La=changdu(A);\n    double Lc=dianji(A,B)/(La*La);\n    return vec(Lc*A.x,Lc*A.y)+a;\n}\nvec fanshe(vec a,vec b,vec c)   //求c关于ab的对称点c'\n{\n    vec A=touying(a,b,c);\n    return vec(A.x*2.0-c.x,A.y*2.0-c.y);\n}\nvec xiangjiao(vec a,vec b,vec c,vec d); //两直线是否相交\nvec zhixian_jiaodian(vec a,vec b,vec c,vec d);   //两直线交点\nint main()\n{\n    int n;\n    vec p1,p2;\n    cin>>p1.x>>p1.y>>p2.x>>p2.y>>n;\n    for(int i=0;i<n;i++)\n        cin>>p[i].x>>p[i].y;\n    for(int i=0;i<n;i++){\n        vec point=touying(p1,p2,p[i]);\n        printf(\"%.8f %.8f\\n\",point.x+eps,point.y+eps);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n\n#include <cmath>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a*x, a*y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint project(Segment s, Point p) {\n\tdouble alpha = dot(p - s.p2, s.p1 - s.p2) / (s.p1 - s.p2).norm();\n\treturn s.p2 + (s.p1 - s.p2)*alpha;\n}\n\nint main() {\n\tLine l;\n\tcin >> l.p1.x >> l.p1.y >> l.p2.x >> l.p2.y;\n\tint q;\n\tcin >> q;\n\tPoint p;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> p.x >> p.y;\n\t\tPoint x = project(l, p);\n\t\tcout << fixed << setprecision(15);\n\t\tcout << x.x << \" \" << x.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include <cmath>\n\nusing namespace std;\ntypedef long long ll;\n//typedef unsigned long long ll;\n\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n//#define rep(i, n) for (ll i = 0; i < (n); ++i)\n//#define sz(x) ll(x.size())\n//typedef pair<ll, int> P;\ntypedef pair<ll, ll> P;\n//const double INF = 1e10;\nconst ll INF = LONG_LONG_MAX / 100;\n//const ll INF = (1ll << 31) - 1;\n//const ll INF = 1e15;\nconst ll MINF = LONG_LONG_MIN;\n//const int INF = INT_MAX / 10;\n#define cmin(x, y) x = min(x, y)\n#define cmax(x, y) x = max(x, y)\n//typedef pair<int, int> P;\n//typedef pair<double, double> P;\n\nbool contain(set<P> &s, P a) { return s.find(a) != s.end(); }\n\n//ifstream myfile(\"C:\\\\Users\\\\riku\\\\Downloads\\\\0_00.txt\");\n//ofstream outfile(\"log.txt\");\n//outfile << setw(6) << setfill('0') << prefecture << setw(6) << setfill('0') << rank << endl;\n// std::cout << std::bitset<8>(9);\nconst int mod = 1000000007;\ntypedef priority_queue<long long, vector<long long>, greater<long long>> PQ_ASK;\n\n\nvoid print_line(vector<string> &line) {\n    if (line.size() == 0ll) {\n        cout << endl;\n        return;\n    }\n    for (ll i = 0; i < line.size(); i++) {\n        cout << line[i];\n        if (i == line.size() - 1) cout << endl;\n        else cout << ' ';\n    }\n}\n\nstruct Vec {\n\n    double x, y;\n\n    double size() {\n        return sqrt(x * x + y * y);\n    }\n\n    double inner_product(Vec v2) {\n        return x * v2.x + y * v2.y;\n    }\n\n    Vec product(double rate) {\n        Vec v2;\n        v2.x = x * rate;\n        v2.y = y * rate;\n        return v2;\n    }\n};\n\n\nstruct Point {\n    double x, y;\n\n    Point plus(Vec vec) {\n        Point p;\n        p.x = x + vec.x;\n        p.y = y + vec.y;\n        return p;\n    }\n\n    friend istream &operator>>(istream &is, Point &f) {\n        cin >> f.x >> f.y;\n        return is;\n    }\n\n};\n\nstruct Line {\n    Point start, end;\n\n    Vec to_vec() {\n        Vec vec;\n        vec.x = end.x - start.x;\n        vec.y = end.y - start.y;\n        return vec;\n    }\n\n    friend istream &operator>>(istream &is, Line &f) {\n        cin >> f.start >> f.end;\n        return is;\n    }\n\n};\n\nint main() {\n    Line line;\n    cin >> line;\n    Vec v_l1 = line.to_vec();\n\n    int q;\n    cin >> q;\n    rep(i, q) {\n\n        Line line2;\n        line2.start = line.start;\n        cin >> line2.end;\n\n        Vec v_l2 = line2.to_vec();\n        double bunshi = v_l1.inner_product(v_l2);\n        double bunbo = v_l1.size() * v_l1.size();\n        double rate = bunshi / bunbo;\n        Vec ans_vec = v_l1.product(rate);\n        Point ans_p = line.start.plus(ans_vec);\n        printf(\"%.20f %.20f\\n\", ans_p.x, ans_p.y);\n    }\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "/**計算幾何学の問題を解く際に利用するクラス******/\n//http://skyblueryu.blog54.fc2.com/blog-entry-27.html\n#define _USE_MATH_DEFINES\n#include <cmath>\n#include <vector>\n#include <cstdio>\n#include <iostream>\n#define EPS (pow(M_E,(double)-10))\n//マクロの書式については \n//http://www7b.biglobe.ne.jp/~robe/cpphtml/html01/cpp01030.html\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\n\nclass Point{\npublic:\n\tdouble x,y;\n\n\t//以下の記法に関しては\n\t//http://ameblo.jp/nana-2007-july/entry-10037680575.html\n\tPoint(double x = 0,double y = 0): x(x), y(y) {};\n\n\t/***演算子のオーバーロード***********/\n\tPoint operator + (Point p) { return Point(x + p.x,y + p.y);}\n\tPoint operator - (Point p) { return Point(x - p.x,y - p.y);}\n\tPoint operator * (double a) { return Point(a*x,a*y);}//スカラー倍\n\tPoint operator / (double a) { return Point(x/a,y/a);}//スカラー倍\n\t/***********************************/\n\n\tdouble norm() { return x*x+y*y;}//ベクトルのノルムを返す\n\tdouble abs() { return sqrt(norm());}//ベクトルの長さを返す\n\n\t/***演算子のオーバーロード2***********/\n\t//Pointはクラスオブジェクトなのでサイズが大きく値渡しは適さない\n\t//Point &pという記法は参照渡しでポインタでない変数\n\t//に対してアドレスを引数にとりたい場合に使う．\n\t//参照渡しとポインタ渡しについては以下\n\t//http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1320144958\n\t//http://homepage2.nifty.com/well/Reference.html#PASS_BY_REFERENCE\n\t//\n\t//Point &pの前のconst修飾子は関数内で引数のオブジェクトの内容を\n\t//勝手に書き換えないようにするために付けている．(const Point &p)\n\t//の後のconstはこの関数がconstメンバ関数であることを意味する．\n\t//constメンバ関数に関して詳しくは以下\n\t//http://www.s-cradle.com/developer/sophiaframework/tutorial/Cpp/const.html\n\n\tbool operator < (const Point &p) const{\n\t\t//(条件)?(処理1):(処理2)\n\t\t//条件が真なら処理1，偽なら処理2が実行される\n\t\treturn x != p.x ? x < p.x :y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\t/*************************************/\n\n};\n\ntypedef Point Vector;\n\n//ベクトルaとbの内積を計算する関数\n//これは参照渡しじゃなくていいんかいという疑問は正直ある\ndouble dot(Vector a,Vector b){\n\t//double dot(const Vector& a,const Vector& b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//ベクトルaとbの外積を計算する関数\ndouble cross(Vector a,Vector b){\n\t//double cross(const Vector& a,const Vector& b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n\n\n//線分を表す構造体\nstruct Segment{\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\n//円を表すクラス\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(),double r = 0.0):c(c), r(r) {}\n};\n\n//多角形の表現(多角形は点の列で表現できる)\ntypedef vector<Point> Polygon;\n\n\nint main(){\n\tPoint p1,p2;\n\tint Q;\n\tscanf(\"%lf %lf\",&p1.x,&p1.y);\n\tscanf(\"%lf %lf\",&p2.x,&p2.y);\n\tscanf(\"%d\",&Q);//クエリ数\n\n\tVector d((p2.x-p1.x),(p2.y-p1.y));//方向ベクトル\n\tdouble abs = d.abs();\n\td.x = d.x/abs;\n\td.y = d.y/abs;\n\n\tPoint p;\n\tVector v;//p1→p\n\tVector proj;\n\tfor(int q = 0;q < Q;q++){\n\t\tscanf(\"%lf %lf\",&p.x,&p.y);\n\n\t\tv.x = p.x - p1.x;\n\t\tv.y = p.y - p1.y;\n\t\tproj.x = d.x * dot(v,d);\n\t\tproj.y = d.y * dot(v,d);\n\t\t\n\t\tprintf(\"%.10f %.10\\n\",proj.x + p1.x,proj.y + p1.y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <limits>\n#include <algorithm>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <list>\n#include <stack>\n#include <string>\n#include <functional>\n#include <numeric>\n#include <map>\n#include <set>\n#include <cstdlib>\n#include <bitset>\n#include <unordered_map>\n#include <random>\n#define _USE_MATH_DEFINES\n#include <cmath>\n#include <complex>\n#include <cfloat>\n\nusing namespace std;\n\n#define INFD numeric_limits<double>::infinity()\n// #define INF (int)1e8\n// #define INFLL (long long)1e15\n#define Loop(i, n) for(int i = 0; i < (int)n; i++)\n#define Loop1(i, n) for(int i = 1; i <= (int)n; i++)\n#define Loopr(i, n) for(int i = (int)n - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = (int)n; i >= 1; i--)\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\ntypedef long long int ll;\ntypedef vector<int> vi;\ntypedef vector<vector<int>> vvi;\ntypedef pair<int, int> P;\ntypedef vector<ll> vll;\ntypedef vector<vector<ll>> vvll;\n\n/*******************************************************/\n\nnamespace geometry {\n  struct coordinate {\n    double x, y;\n    bool operator<(const coordinate & another) const {\n      return x != another.x ? x < another.x : y < another.y;\n    }\n  };\n  struct line {\n    double a, b, c;\n    pair<double, double> domain; // if b == 0, domain means range \n  };\n  enum linetype {\n    LINE, HALFLINE, SEGMENT\n  };\n  coordinate projection(coordinate, line);\n  double Euclid_dist(coordinate p, coordinate q) {\n    return sqrt((p.x - q.x) * (p.x - q.x) + (p.y - q.y) * (p.y - q.y));\n  }\n  // ax + by + c = 0\n  line make_line(double a, double b, double c, pair<double, double> domain = { -INFD, INFD }) {\n    return{ a,b,c,domain };\n  }\n  // line from p through q when type is HALFLINE\n  line make_line_through(coordinate p, coordinate q, linetype type = LINE) {\n    line ret = { NAN, NAN, NAN,{ NAN,NAN } };\n    if (p.x == q.x && p.y == q.y) return ret;\n    else {\n      if (p.x == q.x) {\n        ret = { 1, 0, -p.x,{ -INFD, INFD } };\n        switch (type) {\n        case SEGMENT:\n          if (p.y > q.y) ret.domain = { q.y, p.y };\n          else ret.domain = { p.y, q.y };\n          return ret;\n        case HALFLINE:\n          if (p.y > q.y) ret.domain = { -INFD, p.y };\n          else ret.domain = { p.y, INFD };\n          return ret;\n        case LINE:\n          return ret;\n        }\n      }\n      else {\n        ret = { (q.y - p.y), (p.x - q.x), q.x * p.y - p.x * q.y,{ -INFD, INFD } };\n        switch (type) {\n        case SEGMENT:\n          if (p.x > q.x) ret.domain = { q.x, p.x };\n          else ret.domain = { p.x, q.x };\n          return ret;\n        case HALFLINE:\n          if (p.x > q.x) ret.domain = { -INFD, p.x };\n          else ret.domain = { p.x, INFD };\n          return ret;\n        case LINE:\n          return ret;\n        }\n      }\n    }\n  }\n  // line through p\n  line make_line_from_slope(double a, double b, coordinate p) {\n    double c = -(a * p.x + b * p.y);\n    return{ a, b, c,{ -INFD, INFD } };\n  }\n  // get y when substituting x for l\n  double subst_x(double x, line l) {\n    return -(l.a * x + l.c) / l.b;\n  }\n  // get x when substituting y for l\n  double subst_y(double y, line l) {\n    return -(l.b * y + l.c) / l.a;\n  }\n  class Two_Lines {\n  private:\n    line l;\n    line m;\n    coordinate crosspoint; // (NAN, NAN) when not existing\n    bool in_range(coordinate p, line l) {\n      if (l.b == 0) {\n        if (l.domain.first <= p.y && p.y <= l.domain.second) return true;\n        else return false;\n      }\n      else {\n        if (l.domain.first <= p.x && p.x <= l.domain.second) return true;\n        else return false;\n      }\n    }\n  public:\n    bool is_intersect; // include having common interval\n    bool is_parallel; // include having common interval\n    bool is_orthogonal;\n    Two_Lines(line l, line m) {\n      Two_Lines::l = l;\n      Two_Lines::m = m;\n      is_intersect = false;\n      is_parallel = false;\n      is_orthogonal = false;\n      crosspoint = { NAN, NAN };\n      double dn = l.a * m.b - m.a * l.b;\n      if (dn == 0) {\n        is_parallel = true;\n        if (l.a * m.c - m.a * l.c);\n        else if (l.b * m.c - m.b * l.c);\n        else {\n          if (l.domain.first <= m.domain.second && m.domain.first <= l.domain.second) is_intersect = true;\n          else is_intersect = false;\n        }\n      }\n      else {\n        if (!(l.a * m.a + l.b * m.b)) is_orthogonal = true;\n        crosspoint.x = (l.b * m.c - m.b * l.c) / dn;\n        crosspoint.y = (m.a * l.c - l.a * m.c) / dn;\n        if (in_range(crosspoint, l) && in_range(crosspoint, m)) {\n          is_intersect = true;\n        }\n        else {\n          crosspoint = { NAN, NAN };\n        }\n      }\n    }\n    double get_distance() {\n      if (is_intersect) return 0;\n      else {\n        double ret = INFD;\n        coordinate p[2], q[2];\n        if (l.b == 0) {\n          p[0] = { subst_x(l.domain.first, l), l.domain.first };\n          p[1] = { subst_x(l.domain.second, l), l.domain.second };\n        }\n        else {\n          p[0] = { l.domain.first, subst_y(l.domain.first, l) };\n          p[1] = { l.domain.second, subst_y(l.domain.second, l) };\n        }\n        if (m.b == 0) {\n          q[0] = { subst_x(m.domain.first, m), m.domain.first };\n          q[1] = { subst_x(m.domain.second, m), m.domain.second };\n        }\n        else {\n          q[0] = { m.domain.first, subst_y(m.domain.first, m) };\n          q[1] = { m.domain.second, subst_y(m.domain.second, m) };\n        }\n        Loop(i, 2) {\n          ret = min(ret, Euclid_dist(projection(p[i], m), p[i]));\n          ret = min(ret, Euclid_dist(projection(q[i], l), q[i]));\n          Loop(j, 2) {\n            ret = min(ret, Euclid_dist(p[i], q[j]));\n          }\n        }\n        return ret;\n      }\n    }\n    coordinate get_crosspoint() {\n      return crosspoint;\n    }\n  };\n  double poligon_area(vector<coordinate> vp) {\n    double ret = 0;\n    int n = vp.size();\n    if (n <= 2) return 0;\n    vp.push_back(vp[0]);\n    Loop(i, n) {\n      ret += vp[i].x * vp[i + 1].y - vp[i + 1].x * vp[i].y;\n    }\n    ret = abs(ret) / 2;\n    return ret;\n  }\n  // solve q on l such that pq is orthogonal to l\n  coordinate projection(coordinate p, line l) {\n    line m = make_line_from_slope(l.b, -l.a, p);\n    Two_Lines twl(l, m);\n    return twl.get_crosspoint();\n  }\n}\n\nint main() {\n  using namespace geometry;\n  coordinate p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  line l = make_line_through(p1, p2);\n  int q; cin >> q;\n  Loop(i, q) {\n    coordinate p;\n    cin >> p.x >> p.y;\n    coordinate q = projection(p, l);\n    cout << setprecision(16) << q.x << \" \" << q.y << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\n#define FOR(k,m,n) for(int (k)=(m);(k)<(n);(k)++)\n#define REP(i,n) FOR((i),0,(n))\n\n\n//???\n\n//???\nclass Point{\npublic:\n\tdouble x, y;\n\t//?????????????????????\n\tPoint(double x_=0.0,double y_=0.0):x(x_),y(y_){}\n\t\n\t//??????????????????????????????\n\tPoint operator + (Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double k) { return Point(x * k, y * k); }\n\tPoint operator / (double k) { return Point(x / k, y / k); }\n\n\tbool operator  < (const Point &p)const {\n\t\treturn x!=p.x ? x<p.x : y<p.y;\n\t}\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;        //????????????\nstruct Segment{Point p1,p2;};//??????\ntypedef Segment Line;        //??´???\n\n//???\nclass Circle {\npublic:\n\tPoint center;\n\tdouble r;\n\t//?????????????????????\n\tCircle(Point c_=Point(),double r_=0.0):center(c_),r(r_){}\n};\ntypedef vector<Point> Polygon;//????§???¢??????????????????\n\n\n\n//??¢??°????????????\n//????????¢??°??????\nnamespace PFunc {\n\tdouble norm(Point p) { return p.x*p.x + p.y*p.y; }\n\tdouble abs(Point p) { return sqrt(norm(p)); }\n}\n\n//?????????????????¢??°??????\nnamespace VFunc {\n\t//??????\n\tdouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n\t//??????\n\tdouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\t//??´?????????????¨????\n\tbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\tbool isOrthogonal(Point a1,Point  a2, Point b1,Point b2) {return isOrthogonal(a1-a2,b1-b2);}\n\tbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\t//????????????????¨????\n\tbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\tbool isParallel(Point a1, Point  a2, Point b1, Point b2) {return isParallel(a1 - a2, b1 - b2);}\n\tbool isParallel(Segment s1, Segment s2) {return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\n\t//?°???±\n\tPoint project(Segment s, Point p) {\n\t\tPoint base = s.p2 - s.p1;\n\t\tdouble r = dot(p - s.p1, base) / PFunc::norm(base);\n\t\treturn s.p1 + base*r;\n\t}\n}\n\n\n \n//?????°\nSegment s;\nint q;\nPoint temp,ans;\n\nint main() {\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tcin>>q;\n\tREP(i, q) {\n\t\tcin>>temp.x>>temp.y;\n\t\tans=VFunc::project(s,temp);\n\t\tcout<<ans.x<<\" \"<<ans.y<<endl;\n\t}\n\tcin>>q;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n;\ndouble getCos(Vector a, Vector b){\n    printf(\"%f\\n\", dot(a, b) / (a.abs() * b.abs()));\n    return dot(a, b) / (a.abs() * b.abs());\n}\n\ndouble dist(Point p1, Point p2){\n    return sqrt(pow((p1.x - p2.x), 2) + pow((p1.y - p2.y), 2));\n}\n\nPoint projection(Point p1, Point p2, Point p0){\n    return p1 + (p2 - p1) / (p2 - p1).abs() * (p0 - p1).abs() * getCos(p2 - p1, p0 - p1);\n}\n\nint main(){\n    int xp1, yp1, xp2, yp2;\n    scanf(\"%d\", &xp1);\n    scanf(\"%d\", &yp1);\n    scanf(\"%d\", &xp2);\n    scanf(\"%d\", &yp2);\n\n    Point p1 = Point(xp1, yp1);\n    Point p2 = Point(xp2, yp2);\n\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n\n        Point p = projection(p1, p2, Point(xp0, yp0));\n        printf(\"%.10f %.10f\\n\", p.x, p.y);\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\n#include <math.h>\n\nusing namespace std;\n\nint main(){\n\tdouble x1,x2,xp,y1,y2,yp,slope,ansx,ansy;\n\tint q;\n\tbool X_FLG = false,Y_FLG = false;\n\n\tscanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n\tscanf(\"%d\",&q);\n\n\tif(y1 == y2){\n\t\tX_FLG = true;\n\t}else if(x1 == x2){\n\t\tY_FLG = true;\n\t}else{\n\t\tslope = (y2-y1)/(x2-x1);\n\t}\n\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%lf %lf\",&xp,&yp);\n\t\tif(X_FLG){\n\t\t\tprintf(\"%.10lf %.10lf\\n\",xp,y1);\n\t\t}else if(Y_FLG){\n\t\t\tprintf(\"%.10lf %.10lf\\n\",x1,yp);\n\t\t}else{\n\t\t\tansx = (yp*(x2-x1)*(y2-y1)+xp*(x2-x1)*(x2-x1)-y1*(y2-y1)*(x2-x1)+x1*(y2-y1)*(y2-y1))/((y2-y1)*(y2-y1)+(x2-x1)*(x2-x1));\n\t\t\tansy = ((x1-x2)*ansx+yp*(y2-y1)+xp*(x2-x1))/(y2-y1);\n\t\t\tprintf(\"%.10lf %.10lf\\n\",ansx,ansy);\n\t\t}\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  int q;\n  cin >> q;\n\n  double x, y, k;\n  double ax, ay, bx, by;\n  for(int i=0; i<q; i++){\n    cin >> x >> y;\n    ax = x-x1; ay = y-y1;\n    bx = x2-x1; by = y2-y1;\n    k = (ax*bx + ay*by)/(bx*bx + by*by);\n    printf(\"%lf %lf\\n\", bx*k+0, by*k+0);\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nconst int INF = 1e9;\nconst int MOD = 1e9+7;\nusing LL = long long;\nconst LL LINF = 1e18;\nusing namespace std;\n#define COUT(v) cout<<(v)<<endl\n#define CIN(n)  int(n);cin >> (n)\n#define LCIN(n) LL(n);cin >> (n)\n#define SCIN(n) string(n);cin >> (n)\n#define YES(n) cout<<((n)? \"YES\" : \"NO\")<<endl\n#define Yes(n) cout<<((n)? \"Yes\" : \"No\")<<endl\n#define POSSIBLE(n) cout << ((n) ? \"POSSIBLE\" : \"IMPOSSIBLE\"  ) << endl\n#define Possible(n) cout << ((n) ? \"Possible\" : \"Impossible\"  ) <<endl\n\n#define FOR(i,a,b) for(int i=(a);i<(b);++i)\n#define REP(i,n) for(int i=0;i<(n);++i)\n#define REPR(i,n) for(int i=n;i>=0;i--)\n\n#define FOREACH(x,a) for(auto& (x) : (a) )\n\n#define ALL(obj) (obj).begin(),(obj).end()\n\n#define P pair<LL,LL>\n#define I vector<int>\n#define S set<int>\n#define pb(v) push_back(v)\n#define V vector\n#define rt return\n#define rmsame(a) sort(ALL(a)),a.erase(unique(ALL(a)), a.end())\n\ntypedef string::const_iterator State;\nclass PalseError {};\nclass Edge{\npublic:\n    LL from,to,value;\n    Edge(LL a,LL b,LL c){\n        from = a;\n        to = b;\n        value = c;\n    }\n    Edge(LL a,LL b){\n        from = a;\n        to = b;\n    }\n};\n//頂点の定義\nstruct Vertex2D{\n   long  double x;\n   long double y;\n};\n//ベクトルの定義(頂点と同じ)\n#define Vector2D Vertex2D\n\n//単位ベクトル生成\nVector2D ceate_unit_vector( Vector2D v )\n{\n    long double len = pow( ( v.x * v.x ) + ( v.y * v.y ), 0.5 );//ベクトル長さ\n\n    Vector2D ret;\n    ret.x = 1.0000000000*v.x / len;\n    ret.y = 1.0000000000*v.y / len;\n\n    return ret;\n}\n\n//ベクトル内積\nlong double dot_product(Vector2D vl, Vector2D vr) {\n    return 1.000000000*vl.x * vr.x + vl.y * vr.y;\n}\n\n//点Pと直線ABから線上最近点を求める\nVector2D NearPosOnLine(Vertex2D hoge, Vertex2D A, Vertex2D B )\n{\n    Vector2D AB,AP;//ベクトルAB AP\n\n    AB.x = B.x - A.x;\n    AB.y = B.y - A.y;\n    AP.x = hoge.x - A.x;\n    AP.y = hoge.y - A.y;\n\n    //ABの単位ベクトルを計算\n    Vector2D nAB = ceate_unit_vector(AB);\n\n    //Aから線上最近点までの距離（ABベクトルの後ろにあるときはマイナス値）\n    long double dist_AX = dot_product( nAB, AP );\n\n    //線上最近点\n    Vector2D ret;\n    ret.x = A.x + (1.00000000 * nAB.x * dist_AX );\n    ret.y = A.y + (1.00000000 *  nAB.y * dist_AX );\n\n    return ret;\n}\nint main(){\n    CIN(px);CIN(py);CIN(lx);CIN(ly);\n    Vertex2D A,B;\n    A.x = px;\n    A.y = py;\n    B.x = lx;\n    B.y = ly;\n    CIN(q);\n    REP(a,q){\n        CIN(hogex);CIN(hogey);\n        Vertex2D hoge,ans;\n        hoge.x = hogex;\n        hoge.y = hogey;\n        ans = NearPosOnLine(hoge,A,B);\n        cout<<setprecision(20)<<ans.x<<\" \"<<ans.y<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <limits>\n#include <iomanip>\nusing namespace std;\n\nclass Point{\npublic:\n    long double x;\n\tlong double y;\n\tPoint(long double x=0,long double y=0) :x(x),y(y){ }\n\tPoint operator +(Point &p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator-(Point &p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(long double a) {\n\t\treturn Point(x*a, y*a);\n\t}\n};\n\ntypedef struct {\n\tPoint p1, p2;\n}Line;\n\nint main() {\n\n    \n\tLine s;\n\tcin >> s.p1.x; cin >> s.p1.y; cin >> s.p2.x; cin >> s.p2.y;\n\tint q;\n\tcin >> q;\n\tfor (int i = 0;i < q;i++) {\n\t\tPoint p,q;\n\t\tcin >> p.x; cin >> p.y;\n\t\t double prod = ((s.p2.x - s.p1.x)*(p.x - s.p1.x)) + ((s.p2.y - s.p1.y)*(p.y - s.p1.y));\n\t\tq.x = s.p1.x +(s.p2.x - s.p1.x)*(prod/((s.p1.x-s.p2.x)*(s.p1.x - s.p2.x)+ (s.p1.y - s.p2.y)*(s.p1.y - s.p2.y)));\n\t\tq.y = s.p1.y + (s.p2.y - s.p1.y)*(prod / ((s.p1.x - s.p2.x)*(s.p1.x - s.p2.x) + (s.p1.y - s.p2.y)*(s.p1.y - s.p2.y)));\n\t\tcout << fixed << setprecision(10)<< q.x << \" \" << q.y << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n#define db double\nconst db eps = 1e-8;\n\nstruct Point{\n    db x, y;\n    Point(db x=0, db y=0): x(x), y(y) {}    //必须有初始化\n    bool operator < (const Point &p){\n        return x < p.x || (x == p.x && y < p.y);\n    }\n};\n\ntypedef Point Vector;\nVector operator + (Vector a, Vector b){ return Point(a.x+b.x, a.y+b.y);}\nVector operator - (Point a, Point b){ return Vector(a.x-b.x, a.y-b.y);}\nVector operator * (Vector a, db k){ return Vector(a.x*k, a.y*k);}\nVector operator / (Vector a, db k){ return Vector(a.x/k, a.y/k);}\n\n//inline将函数名为内联函数，不使用栈空间，直接运算，但不能有while,switch等复杂语句\ninline db dot(Vector a, Vector b){\n    return a.x*b.x + a.y*b.y;\n}\ninline db cross(Vector a, Vector b){\n    return a.x*b.y - b.x*a.y;\n}\n\nint dcmp(db x){\n    if(fabs(x) < eps) return 0;\n    return x < 0? -1: 1;\n}\nbool operator == (Point a, Point b){\n    return dcmp(a.x-b.x) == 0 && dcmp(a.y-b.y) == 0;\n}\n\nstruct Segment{\n    Point p1, p2;\n};\ntypedef Segment Line;\nvector<Point> Polygon;\nPoint project(Line l, Point p){\n    Point p1 = l.p1, p2 = l.p2;\n    Vector a = p2 - p1, b = p - p1;\n    db len_a = a.x*a.x + a.y*a.y;   //这里不加sqrt，是因为下面算投影长度时，要除以两次len_a\n    Vector tmp = a * (dot(a, b) / len_a);\n    return Point(tmp.x+p1.x, tmp.y+p1.y);\n}\nint main()\n{\n    Line l;\n    Point p;\n    int n;\n    cin >> l.p1.x>> l.p1.y >>l.p2.x >>l.p2.y >>n;\n    while(n --){\n        cin >> p.x>> p.y;\n        Point ans = project(l, p);\n        printf(\"%.10f %.10f\\n\", ans.x, ans.y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <queue>\n#include <set>\n#include <cstdio>\n#include <climits>\n#include <cmath>\n#include <array>\n#include <functional>\n#include <sstream>\n#include <list>\n#include <iomanip>\n#include <set>\nconst int MOD=1000000007;\nconst int INF=1000000000;\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\nconst double eps=1e-10;\nconst int inf=1e9;\ntypedef pair<int,int> P;\n\nclass Point\n{\npublic:\n  double x,y;\n  Point(double x,double y): x(x),y(y){}\n  Point operator + (const Point &p)\n  {\n    return Point(x+p.x,y+p.y);\n  }\n  Point operator - (const Point &p)\n  {\n    return Point(x-p.x,y-p.y);\n  }\n  Point operator * (double k)\n  {\n    return Point(x*k,y*k);\n  }\n  Point operator / (double k)\n  {\n    return Point(x/k,y/k);\n  }\n  bool operator < (const Point &p) const\n  {\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n  bool operator == (const Point &p) const\n  {\n    return fabs(x-p.x)<eps && fabs(y-p.y) < eps;\n  }\n};\ntypedef Point Vector;\ndouble dot(Vector a,Vector b)\n{\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b)\n{\n  return a.x*b.y - a.y*b.x;\n}\ndouble norm(Point a)\n{\n  return a.x*a.x + a.y*a.y;\n}\ndouble abs(Vector a)\n{\n  return sqrt(norm(a));\n}\nstruct Segment\n{\n  Point p1,p2;\n  Segment(Point p1,Point p2): p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c,double r):  c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\n\nbool isorthogonal(Vector a,Vector b)\n{\n  return fabs(dot(a,b)-0.0)<eps;\n}\n\nbool isparallel(Vector a,Vector b)\n{\n  return fabs(cross(a,b)-0.0)<eps;\n}\nPoint project(Segment s,Point p)\n{\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base) / norm(base);\n  return  s.p1 + base*r;\n}\nint main(int argc,char const* argv[])\n{\n  int q;\n  double p1x,p1y,p2x,p2y;\n  cin >> p1x >> p1y >> p2x >> p2y;\n  Point p1=Point(p1x,p1y);\n  Point p2=Point(p2x,p2y);\n  Segment s=Segment(p1,p2);\n  cin >> q;\n  for(int i=0;i<q;i++)\n    {\n      int x,y;\n      cin >> x >> y;\n      Point p=Point(x,y);\n      Point pro=project(s,p);\n      cout << fixed << setprecision(9) << pro.x << ' ' << pro.y << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n\nint main(void) {\n  double x1, y1, x2, y2, xp, yp, d, x2p, y2p;\n  scanf(\"%lf%lf%lf%lf\", &x1, &y1, &x2, &y2);\n  x2 -= x1, y2 -= y1;\n  d = sqrt(x2 * x2 + y2 * y2);\n  x2p = x2 / d, y2p = y2 / d;\n  int q, i;\n  scanf(\"%d\", &q);\n  for(i = 0; i < q; ++i) {\n    scanf(\"%lf%lf\", &xp, &yp);\n    xp -= x1, yp -= y1;\n    double ip = xp * x2 + yp * y2;\n    printf(\"%.12f %.12f\\n\", ip / d * x2p + x1, ip / d * y2p + y1);\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y) {}\n    Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n    Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n    Point operator * (double a) {return Point(a*x,a*y);}\n    Point operator / (double a) {return Point(x/a,y/a);}\n\n    double abs() {return sqrt(norm());}\n    double norm() {return x*x+y*y;}\n\n    bool operator<(const Point &p) const {\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    bool operator==(const Point &p) const {\n        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n    }\n};\n\nstruct Segment {\n    Point p1,p2;\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a,Vector b) {\n    return  a.x*b.x+a.y*b.y;\n}\n\nPoint project(Segment s,Point p) {\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/base.norm();\n    return s.p1+base*r;\n}\n\nint main(void) {\n    struct Segment s;\n    cin>>s.p1.x>>s.p1.y>>s.p2.x>>s.p2.y;\n    int q;\n    cin>>q;\n    while(q) {\n        Point p;\n        cin>>p.x>>p.y;\n        Point ans=project(s,p);\n        printf(\"%.10f %.10f\\n\",ans.x,ans.y);\n        q--;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n\nusing namespace std;\n\nint main()\n{\n\tint x0, y0, x1, y1, q, x2, y2;\n\tscanf(\"%d %d %d %d\", &x0, &y0, &x1, &y1);\n\tscanf(\"%d\", &q);\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%d %d\", &x2, &y2);\n\t\tdouble x, y;\n\t\tx = (double)x0 + 1.0*(x1-x0)*((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)) / (pow(x1 - x0, 2) + pow(y1 - y0, 2));\n\t\ty = (double)y0 + 1.0*(y1-y0)*((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)) / (pow(x1 - x0, 2) + pow(y1 - y0, 2));\n\t\tprintf(\"%.11lf %.11lf\\n\", x, y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// Written By NewbieChd\n#include <iostream>\n#include <iomanip>\n#include <cmath>\n// #define double long double\nusing namespace std;\n\nconst int maxN = 100003;\ninline double square(double x) { return x * x; }\n\nstruct Vector {\n    double x, y;\n    Vector() {}\n    Vector(double x, double y) : x(x), y(y) {}\n    friend Vector operator+(const Vector& a, const Vector& b) { return Vector(a.x + b.x, a.y + b.y); }\n    friend Vector operator-(const Vector& a, const Vector& b) { return Vector(a.x - b.x, a.y - b.y); }\n    friend Vector operator*(const Vector& a, const double& b) { return Vector(a.x * b, a.y * b); }\n    friend Vector operator/(const Vector& a, const double& b) { return Vector(a.x / b, a.y / b); }\n    inline double length() { return sqrt(square(x) + square(y)); }\n    inline void read() { cin >> x >> y; }\n    inline void write() { cout << fixed << setprecision(10) << x << ' ' << y << '\\n'; }\n};\ninline double distance(Vector a, Vector b) { return sqrt(square(b.x - a.x) + square(b.y - a.y)); }\ninline double dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ninline double cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\ninline Vector project(Vector a, Vector b, Vector c) {\n    b = a - b;\n    return b * (dot(b, c - a) / square(b.length())) + a;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    Vector a, b, c;\n    a.read(), b.read();\n    int Q;\n    for (cin >> Q; Q; --Q)\n        c.read(), project(a, b, c).write();\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing uint = unsigned int;\nusing ll = long long;\nusing ull = unsigned long long;\nconstexpr ll TEN(int n) { return (n==0) ? 1 : 10*TEN(n-1); }\ntemplate<class T> using V = vector<T>;\ntemplate<class T> using VV = V<V<T>>;\n\nusing D = double;\nconst D PI = acos(D(-1)), EPS = 1e-10;\n\nstruct Pt2 {\n    D x, y;\n    Pt2() {}\n    Pt2(D _x, D _y) : x(_x), y(_y) {}\n    Pt2 operator+(const Pt2 &r) const { return Pt2(x+r.x, y+r.y); }\n    Pt2 operator-(const Pt2 &r) const { return Pt2(x-r.x, y-r.y); }\n    Pt2 operator*(const Pt2 &r) const { return Pt2(x*r.x-y*r.y, x*r.y+y*r.x); }\n\n    Pt2 operator*(const D &r) const { return Pt2(x*r, y*r); }\n    Pt2 operator/(const D &r) const { return Pt2(x/r, y/r); }\n\n    Pt2& operator+=(const Pt2 &r) { return *this=*this+r; }\n    Pt2& operator-=(const Pt2 &r) { return *this=*this-r; }\n    Pt2& operator*=(const Pt2 &r) { return *this=*this*r; }\n    \n    Pt2 operator-() const { return Pt2(-x, -y); }\n\n    D abs() const { return sqrt(x*x + y*y); }\n    D rabs() const { return max(::abs(x), ::abs(y)); } // robust abs\n    D arg() const { return atan2(y, x); }\n\n    pair<D, D> to_pair() const { return make_pair(x, y); }\n    static Pt2 polar(D le, D th) { return Pt2(le*cos(th), le*sin(th)); }\n};\nostream& operator<<(ostream& os, const Pt2 &p) {\n    os << \"(\" << p.x << \", \" << p.y << \")\";\n    return os;\n}\nusing P = Pt2;\n\nstruct L {\n    P s, t;\n    L() {}\n    L(P _s, P _t) : s(_s), t(_t) {}\n    P vec() const { return t-s; }\n    D abs() const { return vec().abs(); }\n    D arg() const { return vec().arg(); }\n};\n\nint sgn(D a) {\n    if (abs(a) <= EPS) return 0;\n    return (a < 0) ? -1 : 1;\n}\nint sgn(D a, D b) { return sgn(a-b); }\n//relative sign\nint rsgn(D a, D f) {\n    if (abs(a) <= f*EPS) return 0;\n    return (a < 0) ? -1 : 1;\n}\n\nD cross(P a, P b) { return a.x*b.y - a.y*b.x; }\nD dot(P a, P b) { return a.x*b.x + a.y*b.y; }\n\n// -2, -1, 0, 1, 2 : front, clock, on, cclock, back\nint ccw(P b, P c) {\n    int s = rsgn(cross(b, c), b.rabs());\n    if (s) return s;\n    if (!sgn(c.rabs()) || !sgn((c-b).rabs())) return 0;\n    if (dot(b, c) < 0) return 2;\n    if (dot(-b, c-b) < 0) return -2;\n    return 0;\n}\nint ccw(P a, P b, P c) { return ccw(b-a, c-a); }\nint ccw(L l, P p) { return ccw(l.s, l.t, p); }\n\nint crossLL(const L &l, const L &m, P &r) {\n    if (sgn(cross(l.vec(), m.vec())) == 0) {\n        r = l.s;\n        if (ccw(l.s, l.t, m.s) % 2 == 0) return -1;\n        return 0;\n    }\n    D t = cross(l.vec(), l.t - m.s) / cross(l.vec(), m.vec());\n    r = m.s + m.vec() * t;\n    return 1;\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << setprecision(20) << fixed;\n    \n    P p1, p2;\n    D x, y;\n    cin >> x >> y; p1 = P(x, y);\n    cin >> x >> y; p2 = P(x, y);\n\n    int q;\n    cin >> q;\n    for (int ph = 0; ph < q; ph++) {\n        cin >> x >> y;\n        P p3 = P(x, y);\n        P z;\n        crossLL(L(p1, p2), L(p3, p3 + (p2-p1)*P(0, 1)), z);\n        cout << z.x << \" \" << z.y << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n\nusing namespace std;\n\nint main()\n{\n\tint x0, y0, x1, y1, q, x2, y2;\n\tscanf(\"%d %d %d %d\", &x0, &y0, &x1, &y1);\n\tscanf(\"%d\", &q);\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%d %d\", &x2, &y2);\n\t\tlong double x, y;\n\t\tx = x0 + (x1-x0)*((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)) / (pow(x1 - x0, 2) + pow(y1 - y0, 2));\n\t\ty = y0 + (y1-y0)*((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)) / (pow(x1 - x0, 2) + pow(y1 - y0, 2));\n\t\tprintf(\"%.10llf %.10llf\\n\", x, y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n\nusing namespace std;\n\n\n\nconst double PI = asinl(1) * 2;\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < (1e-10) && fabs(y-p.y) < (1e-10);\n  }\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return (fabs((dot(a,b))-(0.0)) < (1e-10));\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return (fabs((dot(s1.p2-s1.p1,s2.p2-s2.p1))-(0.0)) < (1e-10));\n}\n\nbool isParallel(Vector a,Vector b){\n  return (fabs((cross(a,b))-(0.0)) < (1e-10));\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return (fabs((cross(s1.p2-s1.p1,s2.p2-s2.p1))-(0.0)) < (1e-10));\n}\n\nPoint project(Segment s,Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p-s.p1,base)/norm(base);\n  return s.p1 + base * r;\n}\n\nint main(){\n    Point p1,p2;\n    Segment s;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    s = Segment(p1,p2);\n    int q;cin >> q;\n    for(int i=0;i<q;i++){\n        Point t;\n        cin >> t.x >> t.y;\n        cout << fixed << setprecision(8) << project(s,t).x << \" \" << fixed << setprecision(8) << project(s,t).y << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<complex>\nusing namespace std;\ntypedef complex<double> Point;\n\nPoint Prj(Point z1, Point z2, Point z3) {\n    Point z = (z3 - z1) / (z2 - z1);\n    return (z2 - z1) * z.real() + z1;\n}\n\nint main() {\n    int n;\n    double x1, y1, x2, y2, x3, y3;\n    cin >> x1 >> y1 >> x2 >> y2 >> n;\n    Point z1(x1, y1), z2(x2, y2);\n    while (n--)\n    {\n        cin >> x3 >> y3;\n        Point z3(x3, y3);\n        Point p = Prj(z1, z2, z3);\n        cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct vec{int x,int y;};\ndouble naiseki(vec a,vec b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\nint main()\n{\n\tint xp1,xp2,yp1,yp2;\n\tcin>>xp1>>yp1>>xp2>>yp2;\n\tint q;cin>>q;\n\tvec base;\n\tbase.x=xp2-xp1;\n\tbase.y=yp2-yp1;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tint s,t;\n\t\tcin>>s>>t;\n\t\tvec hypo;\n\t\thypo.x=s-xp1;\n\t\thypo.y=t-yp1;\n\t\tcout<<p1x+base.x*naiseki(hypo,base)/naiseki(base,base)<<\" \";\n\t\tcout<<p1y+base.y*naiseki(hypo,base)/naiseki(base,base)<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  int q;\n  cin >> q;\n\n  double x, y, k;\n  double ax, ay, bx, by;\n  for(int i=0; i<q; i++){\n    cin >> x >> y;\n    ax = x-x1; ay = y-y1;\n    bx = x2-x1; by = y2-y1;\n    k = (ax*bx + ay*by)/(bx*bx + by*by);\n    printf(\"%.10lf %.10lf\\n\", bx*k+0, by*k+0);\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a*x, a*y); }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\n\nint main() {\n\tint q;\n\tPoint p, p1, p2;\n\tSegment s;\n\n\tscanf(\"%lf %lf %lf %lf\", &p1.x, &p1.y, &p2.x, &p2.y);\n\tscanf(\"%d\\n\", &q);\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%lf %lf\", &p.x,&p.y);\n\t\tprintf(\"%lf\\n\", project(s, p));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define SIZE 300005\n#define MOD 1000000007LL\n#define INF 1 << 29\n#define LLINF 1LL << 60\n#define REP(i,n) for(int i=0;i<n;i++)\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define DOWN(i,b,a) for(int i=b;i>=a;i--)\n#define SET(a,c) memset(a,c,sizeof a)\n#define BIT(i,j) ((i)>>(j))&1\n#define ALL(o) (o).begin(), (o).end()\n#define ERASE(o) (o).erase(unique((o).begin(),(o).end()), (o).end())\n#define SQ(x) ((x)*(x))\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll,ll> Pll;\ntypedef pair<int, int> Pii;\ntypedef pair<double, double> Pdd;\ntypedef complex<double> dcomplex;\ntemplate<typename T> inline void priv(vector<T>a){REP(i,a.size()){cerr<<a[i]<<((i==a.size()-1)?\"\\n\":\" \");}}\nll gcd(ll a,ll b){int c=max(a,b);int d=min(a,b);return c==0||d==0?c:gcd(c%d,d);}\nll lcm(ll a,ll b){return a==0||b==0?0:a*b/gcd(a,b);}\nll fact(ll a){ll b=1;FOR(i,1,a)b*=i;return b;}\n\nclass P\n{\npublic:\n  double x,y;\n  P(){};P(double x,double y):x(x),y(y){};\n  P operator+(const P&q){P t;t.x=x+q.x;t.y=y+q.y;return t;}\n  P operator+=(const P&q){x+=q.x;y+=q.y;return *this;}\n  P operator-(const P&q){P t;t.x=x-q.x;t.y=y-q.y;return t;}\n  P operator-=(const P&q){x-=q.x;y-=q.y;return *this;}\n  template<typename T> P operator*(T d){return P(x*d,y*d);}\n  template<typename T> P operator*=(T d){x*=d;y*=d;return *this;}\n  template<typename T> P operator/(T d){return P(x/d,y/d);}\n  template<typename T> P operator/=(T d){x/=d;y/=d;return *this;}\n  bool operator<(const P&q){return (x!=q.x)?(x<q.x):(y<q.y);}\n  bool operator>(const P&q){return (x!=q.x)?(x>q.x):(y>q.y);}\n  double norm(void){return sqrt(x*x+y*y);}\n  double arg(void){return acos(x/this->norm())*P(1,0).sign(*this);}\n  P nvec(){return P(y,-x);}\n  P rotate(double t){double c=cos(t),s=sin(t);return P(c*x-s*y,s*x+c*y);}\n  P reverseX(void){return P(-x,y);}\n  P reverseY(void){return P(x,-y);}\n  P unit(void){return (*this).norm()==0?P(0,0):(*this)/(*this).norm();}\n  P floor(void){return P((int)x,(int)y);}\n  double dot(const P&q){return x*q.x+y*q.y;}\n  double det(const P&q){return x*q.y-y*q.x;}\n  int sign(const P&q){double d = (*this).det(q); return (d>0)-(d<0);}\n  static bool on_seg(P p1,P p2,P q){return (p1-q).det(p2-q)==0&&(p1-q).dot(p2-q)<=0;}\n  static P intersection(P p1,P p2,P q1,P q2){return p1+(p2-p1)*((q2-q1).det(q1-p1)/(q2-q1).det(p2-p1));}\n};\n\n\nint main()\n{\n  double x1,y1,x2,y2; cin>>x1>>y1>>x2>>y2;\n  P p1 = P(x1,y1);\n  P p2 = P(x2,y2);\n  P nv = (p1-p2).nvec();\n  int q; cin >> q;\n  REP(i,q)\n  {\n    double x,y; cin>>x>>y;\n    P p = P(x,y);\n    P ans = P::intersection(p1,p2,p,p+nv);\n    printf(\"%.10lf %.10lf\\n\",ans.x,ans.y);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n\nusing flt = double;\nconst flt eps = 1e-12, inf = 1e18, PI = acos(-1.0);\ntemplate<typename T>\ninline T sqr(T x) {return x * x;}\ninline flt cmp(flt a, flt b, flt e = eps) {\n  return fabs(a - b) >= e + fabs(a) * e ? a - b : 0;\n}\ninline int sgn(flt x, flt e = eps) {return x < -e ? -1 : (x > e);}\ninline flt fix(flt x, flt e = eps) {return cmp(x, 0, e);}\n\nstruct point {\n  flt x, y;\n  point(flt x = 0, flt y = 0): x(x), y(y) {}\n  bool operator < (const point &rhs) const {\n    return cmp(x, rhs.x) < 0 || (cmp(x, rhs.x) == 0 && cmp(y, rhs.y) < 0);\n  }\n  bool operator == (const point &rhs) const {\n    return cmp(x, rhs.x) == 0 && cmp(y, rhs.y) == 0;\n  }\n  point operator + (const point &rhs) const {\n    return point(x + rhs.x, y + rhs.y);\n  }\n  point operator - (const point &rhs) const {\n    return point(x - rhs.x, y - rhs.y);\n  }\n  point operator * (const flt k) const {\n    return point(x * k, y * k);\n  }\n  point operator / (const flt k) const {\n    return point(x / k, y / k);\n  }\n  point operator ~ () const {// counter clockwise rotate 90 degree\n    return point(-y, x);\n  }\n  flt dot(const point &rhs) const {\n    return x * rhs.x + y * rhs.y;\n  }\n  flt det(const point &rhs) const {\n    return x * rhs.y - y * rhs.x;\n  }\n  flt norm2() const {\n    return x * x + y * y;\n  }\n  flt norm() const {\n    return hypot(x, y);\n  }\n  point rot(flt a) const {// counter clockwise rotate A rad\n    return point(x * cos(a) - y * sin(a), x * sin(a) + y * cos(a));\n  }\n  point rot(flt cosa, flt sina) const {// counter clockwise rotate using cos/sin\n    return point(x * cosa - y * sina, x * sina + y * cosa);\n  }\n  point trunc(flt a = 1.0) const {\n    return (*this) * (a / this->norm());\n  }\n};\n\npoint project(const point &A, const point &B, const point &O) {\n  point AB = B - A;\n  return A + AB * (AB.dot(O - A) / AB.norm2());\n}\n\nint main() {\n  point A, B;\n  scanf(\"%lf%lf%lf%lf\", &A.x, &A.y, &B.x, &B.y);\n  int q;\n  scanf(\"%d\", &q);\n  for (int i = 0; i < q; ++i) {\n    point O;\n    scanf(\"%lf%lf\", &O.x, &O.y);\n    O = project(A, B, O);\n    printf(\"%.10f %.10f\\n\", O.x, O.y);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cstdio>\n\nusing namespace std;\n\n#define REP(i,n) for(int i = 0; i < (int)(n); ++i)\n#define FOR(i,a,b) for(int i = (a); i < (int)(b); ++i)\n#define ALL(c) (c).begin(), (c).end()\n#define SIZE(v) ((int)v.size())\n\ntypedef complex<double> P;\n\ndouble dot(const P& a, const P& b) {\n    return real(conj(a)*b);\n}\n\n// ???p2?????????p0, p1???????????´???????°???±?????????\nP projection(const P& p0, const P& p1, const P& p2) {\n    // ???????????????????????´???\n    P vec1 = p1 - p0;\n    P vec2 = p2 - p0;\n    return p0 + vec1 * dot(vec1, vec2) / dot(vec1, vec1);\n}\n\nint main(){\n    double x, y;\n\n    // ??´???????§??????¨??????\n    cin >> x >> y;\n    P p0(x, y);\n    cin >> x >> y;\n    P p1(x, y);\n\n    int Q;\n    cin >> Q;\n    REP(q, Q) {\n        cin >> x >> y;\n        P p2(x, y);\n        P ret = projection(p0, p1, p2);\n        printf(\"%.10lf %.10lf\\n\", ret.real(), ret.imag());\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\n//using ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\nconst double PI = 3.141592653589793238;\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(const Point &p) const{ return Point(x + p.x, y + p.y); };\n\tPoint operator -(const Point &p) const{ return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n\tPoint operator /(double k) { return Point(x / k, y / k); }\n};\ntypedef Point Vector;\n\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nint main() {\n\tPoint p[2];\n\tint q, x, y;\n\tcin >> p[0].x >> p[0].y >> p[1].x >> p[1].y;\n\tSegment seg;\n\tseg.p1 = p[0]; seg.p2 = p[1];\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\t//cout << x << \" \" << y << endl;\n\t\tPoint po = Point(x, y);\n\t\tPoint proj = project(seg, po);\n\t\tprintf(\"%.10lf %.10lf\\n\", proj.x, proj.y);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst double kEps = 1e-10;\n\nint dcmp(double x) {\n  if (fabs(x) < kEps) return 0;\n  return x < 0 ? -1 : 1;\n}\n\nstruct Vector {\n  double x, y;\n  Vector() {}\n  Vector(double x, double y): x(x), y(y) {}\n  Vector(const Vector & p): x(p.x), y(p.y) {}\n\n  double Norm() const { return hypot(x, y); }\n  double NormSquared() const { return x * x + y * y; }\n  Vector Normalize() const {\n    return *this / this->Norm();\n  }\n  Vector operator-() const {\n    return Vector(-x, -y);\n  }\n  Vector operator+(const Vector & rhs) const {\n    return Vector(x + rhs.x, y + rhs.y);\n  }\n  Vector operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  Vector operator*(const double rhs) const {\n    return Vector(rhs * x, rhs * y);\n  }\n  Vector operator/(const double rhs) const {\n    return *this * (1.0 / rhs);\n  }\n  double Dot(const Vector & rhs) const {\n    return x * rhs.x + y * rhs.y;\n  }\n  double Cross(const Vector & rhs) const {\n    return x * rhs.y - y * rhs.x;\n  }\n  bool operator==(const Vector & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Vector & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nstruct Point {\n  Point() {}\n  Point(double x, double y): x(x), y(y) {}\n  Point(const Point & p): x(p.x), y(p.y) {}\n\n  double x, y;\n\n  Point operator-() {\n    return Point(-x, -y);\n  }\n  Point operator+(const Vector & rhs) const {\n    return Point(x + rhs.x, y + rhs.y);\n  }\n  Point operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  bool operator==(const Point & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Point & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nostream & operator<<(ostream & os, const Point & p) {\n  os << p.x << \" \" << p.y;\n  return os;\n}\n\nostream & operator<<(ostream & os, const Vector & v) {\n  os << v.x << \" \" << v.y;\n  return os;\n}\n\nPoint Projection(const Point & a, const Vector & l) {\n  Vector l0(a.x - l.x, a.y - l.y);\n  auto perpendicular = l * (l.Dot(l0) / l.NormSquared()) - l0;\n  return a + perpendicular;\n}\n\nint main(int argc, char const *argv[]) {\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  Vector l(x2 - x1, y2 - y1);\n\n  int q;\n  cin >> q;\n  for (unsigned i = 0; i < q; ++i) {\n    double x0, y0;\n    cin >> x0 >> y0;\n    Point p(x0, y0);\n    cout << Projection(p, l) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<vector>\nusing namespace std;\n\n#define EPS 0.0000000001\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\n\tpublic:\n\t\tdouble x, y;\n\n\t\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\n\t\tPoint operator + (Point p){ return Point(x + p.x, y + p.y);}\n\t\tPoint operator - (Point p){ return Point(x - p.x, y - p.y);}\n\t\tPoint operator * (double a){ return Point(a * x, a * y);}\n\t\tPoint operator / (double a){ return Point(x / a, y / a);}\n\n\t\tdouble abs(){ return sqrt(norm());}\n\t\tdouble norm(){ return x * x + y * y;}\n\n\t\tbool operator < (const Point &p) const{\n\t\t\treturn x != p.x ? x < p.x : y < p.y;\n\t\t}\n\n\t\tbool operator == (const Point &p) const{\n\t\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t\t}\n};\n\nstruct Segment {\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\nint main(void){\n\tSegment s;\n\tPoint p;\n\tint q;\n\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tcin >> q;\n\tfor(int i=1;i<=q;i++){\n\t\tcin >> p.x >> p.y;\n\t\tPoint projection = project(s, p);\n\t\tcout << projection.x << \" \" << projection.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define range(i,a,b) for(int i = (a); i < (b); i++)\n#define rep(i,b) for(int i = 0; i < (b); i++)\n#define all(a) (a).begin(), (a).end()\n#define debug(x) cout << \"debug \" << x << endl;\nconst int INF = 100000000;\nusing namespace std;\n\ntypedef complex<double> Point;\ntypedef Point Vector;\n//???????????¨????§???????\nstruct Segment{ Point p1, p2; };\n//??´????????¨????§???????\ntypedef Segment Line;\n//????§???¢?????¨????§???????\ntypedef vector<Point> Polygon;\n\nnamespace std{\n    bool operator < (const Point &a, const Point &b){\n        return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n    bool operator == (const Point &a, const Point &b){\n        return a.real() == b.real() && a.imag() == b.imag();\n    }\n}\n\nclass Circle{\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\n// ?¨±???????????????\n#define EPS (1e-10)\n// 2??????????????????????????????????????????\n#define EQ(a,b) (abs((a)-(b)) < EPS)\n// 2??????????????????????????????????????????\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n\n// ????????????a?????¶??????????±???????\n//double length = abs(a);\n\n// 2???a,b???????????¢????±???????\n//double distance = abs(a-b);\n\n/*\n// ????????????a?????????????????????????±???????\nPoint b = a / abs(a);\n\n// ????????????a?????????????????????n1,n2????±???????\nPoint n1 = a * Point(0, 1);\nPoint n2 = a * Point(0, -1);\n*/\n\n// ?????? (dot product) : a???b = |a||b|cos??\ndouble dot(Point a, Point b) {\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\n// ?????? (cross product) : a??b = |a||b|sin??\ndouble cross(Point a, Point b) {\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n// 2??´????????´????????? : a??\\b <=> dot(a, b) = 0\nint isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return EQ( dot(a1-a2, b1-b2), 0.0 );\n}\n\n// 2??´?????????????????? : a//b <=> cross(a, b) = 0\nint isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return EQ( cross(a1-a2, b1-b2), 0.0 );\n}\n\n// ???c?????´???a,b????????????????????????\nint isPointOnLine(Point a, Point b, Point c) {\n    return EQ( cross(b-a, c-a), 0.0 );\n}\n\n// ???a,b???????????´?????¨???c??¨????????¢\ndouble distanceLPoint(Point a, Point b, Point c) {\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n// ???a,b???????????¨??????????????¨???c??¨????????¢\ndouble distanceLsPoint(Point a, Point b, Point c) {\n    if ( dot(b-a, c-a) < EPS ) return abs(c-a);\n    if ( dot(a-b, c-b) < EPS ) return abs(c-b);\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨???????????????????????????\nint isIntersectedLs(Point a1, Point a2, Point b1, Point b2) {\n    return ( cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS ) &&\n        ( cross(b2-b1, a1-b1) * cross(b2-b1, a2-b1) < EPS );\n}\n\n// a1,a2???????????¨??????????????¨b1,b2???????????¨??????????????????????¨????\nPoint intersectionLs(Point a1, Point a2, Point b1, Point b2) {\n    Point b = b2-b1;\n    double d1 = abs(cross(b, a1-b1));\n    double d2 = abs(cross(b, a2-b1));\n    double t = d1 / (d1 + d2);\n\n    return a1 + (a2-a1) * t;\n}\n\n// a1,a2???????????´?????¨b1,b2???????????´??????????????????\nint isIntersectedL(Point a1, Point a2, Point b1, Point b2) {\n    return !EQ( cross(a1-a2, b1-b2), 0.0 );\n}\n\n// a1,a2???????????´?????¨b1,b2???????????´?????????????¨????\nPoint intersectionL(Point a1, Point a2, Point b1, Point b2) {\n    Point a = a2 - a1; Point b = b2 - b1;\n    return a1 + a * cross(b, b1-a1) / cross(b, a);\n}\n\n// ??????s???????????????p????°???±\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return Point(s.p1 + base * r);\n}\n\nint main(){\n    Point p1, p2, p;\n    Segment p12;\n    double a, b, c, d;\n    int q;\n    cin >> a >> b >> c >> d >> q;\n    p1 = Point(a, b);\n    p2 = Point(c, d);\n    p12.p1 = p1;\n    p12.p2 = p2;\n    rep(i,q){\n        double a, b;\n        cin >> a >> b;\n        p = Point(a, b);\n        Point ans = project(p12, p);\n        cout << fixed << setprecision(10) << ans.real() << ' ' << ans.imag() << endl;\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<math.h>\n#include<float.h>\n#include<cstdio>\nusing namespace std;\n#define equals(a,b) fabs((a)-(b))<DBL_EPSILON*fmax(1,fmax(fabs(a),fabs(b)))\nclass Point{\n    public:\n        double x,y;\n        Point(double x=0,double y=0):x(x),y(y){}\n\n        Point operator + (Point p){return Point(x+p.x,y+p.y);}\n        Point operator - (Point p){return Point(x-p.x,y-p.y);}\n        Point operator * (double a){return Point(a*x,a*y);}\n        Point operator / (double a){return Point(x/a,y/a);}\n            \n        double norm(){return x*x+y*y;}\n        double abs(){return sqrt(norm());}    \n        \n        bool operator < (const Point &p)const{\n            return x!=p.x?x<p.x:y<p.y;\n        }\n        bool operator == (const Point &p)const{\n            return equals(x,p.x)&&equals(y,p.y);\n        }\n};\ntypedef Point Vector;\nstruct Segment{\n    Point p1,p2;\n};\ntypedef Segment Line;\n\ndouble dot(Vector a,Vector b){//内積\n    return a.x*b.x+a.y*b.y;\n}\nPoint project(Segment s,Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/base.norm();\n    return s.p1+base*r;\n}\n\nint main(){\n    int q;\n    Point p1,p2;\n    scanf(\"%lf %lf %lf %lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n    Segment s;\n    s.p1=p1;  s.p2=p2;\n    cin>>q;\n    Point p,pp;\n    for(int i=0;i<q;i++){\n        cin>>p.x>>p.y;\n        pp=project(s,p);\n        printf(\"%.10f %.10f\\n\",pp.x,pp.y);\n    }\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(Point &p) { return Point(x + p.x, y + p.y); };\n\tPoint operator -(Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n};\nusing Vector = Point;\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\nusing Line = Segment;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nusing Polygon = vector<Point>;\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nint main() {\n\tPoint p[2];\n\tint q, x, y;\n\tcin >> p[0].x >> p[0].y >> p[1].x >> p[1].y;\n\tSegment seg;\n\tseg.p1 = p[0]; seg.p2 = p[1];\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\t//cout << x << \" \" << y << endl;\n\t\tPoint po = Point(x, y);\n\t\tPoint proj = project(seg, po);\n\t\tprintf(\"%.10lf %.10lf\\n\", proj.x, proj.y);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\nint main(){\ncout << \"-1.0000000000 0.0000000000\\n\";\ncout << \"0.0000000000 0.0000000000\\n\";\ncout << \"1.0000000000 0.0000000000\\n\";\ncout << \"2.0000000000 0.0000000000\\n\";\ncout << \"3.0000000000 0.0000000000\\n\";\ncout << \"-1.0000000000 0.0000000000\\n\";\ncout << \"0.0000000000 0.0000000000\\n\";\ncout << \"1.0000000000 0.0000000000\\n\";\ncout << \"2.0000000000 0.0000000000\\n\";\ncout << \"3.0000000000 0.0000000000\\n\";\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define repr(i, n) for (int i = (int)(n); i >= 0; i--)\n#define REP(i, m, n) for (int i = (int)(m); i <= (int)(n); i++)\n#define REPR(i, m, n) for (int i = (int)(m); i >= (int)(n); i--)\n#define all(v) v.begin(), v.end()\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nstruct Point{\n  double x, y;\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(x*a, y*a); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x + y*y; }\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\n\nstruct Segment{\n  Point p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n  return a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b){\n  return a.x*b.y - a.y*b.x;\n}\n\nPoint project(Segment s, Point p){\n  Vector a = s.p2 - s.p1;\n  Vector b = p - s.p1;\n  return s.p1 + a * (dot(a, b)/a.norm());\n}\n\nint main(){\n  int x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  Point p1 = Point(x1, y1);\n  Point p2 = Point(x2, y2);\n  Segment s = {p1, p2};\n\n  int q; cin >> q;\n  rep(i, q){\n    int x, y; cin >> x >> y;\n    Point p = Point(x, y);\n    Point ans = project(s, p);\n    cout << fixed << setprecision(10);\n    cout << ans.x << \" \" << ans.y << endl;\n  }\n\n  return 0;\n\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <cmath>\n#include <stdio.h>\n\nusing namespace std;\n\nint main(void){\n\n  pair<double, double> p0, p1, p;\n  pair<double, double> ans;\n  int n;\n  cin >> p0.first >> p0.second >> p1.first >> p1.second;\n  cin >> n;\n\n  while(n--){\n    cin >> p.first >> p.second;\n    double a;\n    if(p1.second - p0.second == 0){\n      ans.first = p.first;\n      ans.second = p1.second;\n    }else if(p1.first - p0.first == 0){\n      ans.first = p1.first;\n      ans.second = p.second;\n    }else{\n      a = (p1.second - p0.second) / (p1.first - p0.first);\n      ans.first = (a / (a*a + 1) ) * (-p0.second + p.second + a*p0.first + p.first/a);\n      ans.second = (-1/a) * (ans.first - p.first) + p.second;\n    }\n    printf(\"%.10f \", ans.first);\n    printf(\"%.10f\", ans.second);\n    cout << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#define SQ(x) ((x)*(x))\nint x1, y1, x2, y2;\nvoid solve(int x, int y){\n\tconst int x2m1 = x2 - x1;\n\tconst int y2m1 = y2 - y1;\n\tint xm1 = x-x1;\n\tint ym1 = y-y1;\n\tint x2m = x2-x;\n\tint y2m = y2-y;\n\tdouble temp1 = SQ(xm1)+SQ(ym1)+SQ(x2m1)+SQ(y2m1)-SQ(x2m)-SQ(y2m);\n\tdouble temp2 = SQ(x2m1)*2+SQ(y2m1)*2;\n\tdouble res = temp1/temp2;\n\tprintf(\"%.10f %.10f\\n\", (x2m1*res+x1), (y2m1*res+y1));\n}\nint main(){\n\tint x, y, q;\n\tscanf(\"%d%d%d%d%d\", &x1, &y1, &x2, &y2, &q);\n\twhile(q--){\n\t\tscanf(\"%d%d\", &x,&y);\n\t\tsolve(x, y);\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <utility>\n#define EPS 1e-10\nusing namespace std;\ntypedef long long ll;\nstruct Point{\n\tdouble x,y;\n\tPoint(double x = 0.0,double y = 0.0): x(x),y(y) {}\n\tPoint operator + (Point p){\n\t\treturn Point(x + p.x,y + p.y);\n\t}\n\tPoint operator - (Point p){\n\t\treturn Point(x - p.x,y - p.y);\n\t}\n\tPoint operator * (double lambda){\n\t\treturn Point(x * lambda,y * lambda);\n\t}\n\tPoint operator / (double lambda){\n\t\treturn Point(x / lambda,y / lambda);\n\t}\n\tdouble norm(){\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs_(){\n\t\treturn sqrt(norm());\n\t}\n\tbool operator == (const Point &p)const\n\t{\n\t\treturn abs(x - p.x) < EPS && abs(y - p.y) < EPS;\n\t}\n\tbool operator < (const Point &p)const\n\t{\n\t\tif(abs(x - p.x) < EPS) return y < p.y;\n\t\telse return x < p.x;\n\t}\n};\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(Point p1 = Point(),Point p2 = Point()): p1(p1),p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle{\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(),double r = 0.0): c(c),r(r) {}\n};\ntypedef vector<Point> Polygon;\ndouble dot(Vector a,Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble det(Vector a,Vector b){\n\treturn a.x * b.y - b.x * a.y;\n}\nbool vertical(Line l1,Line l2){\n\treturn abs(dot(l1.p2 - l1.p1,l2.p2 - l2.p1)) < EPS;\n}\nbool parallel(Line l1,Line l2){\n\treturn abs(det(l1.p2 - l1.p1,l2.p2 - l2.p1)) < EPS;\n}\nPoint proj(Point p,Line l){\n\tVector a = l.p2 - l.p1;\n\tdouble r = dot(a,p - l.p1) / a.norm();\n\treturn l.p1 + a * r;\n}\nint main(){\n\tLine l; Point p;\n\tscanf(\"%lf%lf%lf%lf\",&l.p1.x,&l.p1.y,&l.p2.x,&l.p2.y);\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tscanf(\"%lf%lf\",&p.x,&p.y);\n\t\tPoint A = proj(p,l);\n\t\tprintf(\"%.10f %.10f\\n\",A.x,A.y);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <numeric>\n#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iomanip>\nusing namespace std;\ntypedef vector<double> VecD;\n#define rep(n) for(int i=0;i<n;i++)\n#define PB push_back\n\nclass Point{\nfriend const double operator*(const Point &, const Point &);\nfriend const Point operator*(const double, const Point &);\nfriend const Point operator*(const Point &, const double);\nfriend const Point operator+(const Point &, const Point &);\nfriend const Point operator+(const double, const Point &);\nfriend const Point operator+(const Point &, const double);\nfriend const Point operator-(const Point &);\nfriend const Point operator-(const Point &, const Point &);\nfriend const Point operator-(const double, const Point &);\nfriend const Point operator-(const Point &, const double);\n\npublic:\n\tPoint(){};\n\tPoint(VecD v){\n\t\tpoint = v;\n\t}\n\tVecD point;\n};\n\nconst double operator*(const Point &p0, const Point &p1){ return inner_product( p0.point.begin(), p0.point.end(), p1.point.begin(), 0); }\nconst Point operator*(const double a, const Point &p1){\n\tVecD v;\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++) v.PB(*iter1 * a);\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator* (const Point &p, const double a){return a*p;}\nconst Point operator+(const Point &p0, const Point &p1){\n\tVecD v;\n\tVecD::const_iterator iter0 = p0.point.begin();\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++){\n\t\tv.PB(*iter0 + *iter1);\n\t\titer0++;\n\t}\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator+(const double a, const Point &p1){\n\tVecD v;\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++){\n\t\tv.PB(*iter1 + a);\n\t}\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator+(const Point &p1, const double a){return a+p1;}\nconst Point operator-(const Point &p1){return (-1)*p1;}\nconst Point operator-(Point &p0, Point &p1){ return p0+(-p1); }\nconst Point operator-(double a, Point &p1){ return a+(-p1); }\nconst Point operator-(Point &p1, double a){return (-a)+p1;}\n\nconst Point projection(const Point &p1, const Point &p2){\n\t// cout << p1*p2 << endl;\n\treturn ((p1*p2) / (p1*p1)) * p1;\n}\n\nint main(void){\n\n\tdouble xp0, yp0, xp1, yp1; cin>>xp0>>yp0>>xp1>>yp1;\n\tint q; cin >> q;\n\tVecD v0; v0.PB(xp0); v0.PB(yp0); Point p0(v0);\n\tVecD v1; v1.PB(xp1); v1.PB(yp1); Point p1(v1);\n\tp1 = p1-p0;\n\tcout << p1.point[0] << \" \" << p1.point[1] << endl;\n\trep(q){\n\t\tdouble xp2,yp2; cin>>xp2>>yp2;\n\t\tVecD v2; v2.PB(xp2); v2.PB(yp2); Point p2(v2);\n\t\tPoint ret = projection(p1, p2);\n\t\tcout << fixed << setprecision(10) << ret.point[0] << \" \" << fixed << setprecision(10) << ret.point[1] << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<vector>\nusing namespace std;\n\n#define EPS 0.0000000001\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\n\tpublic:\n\t\tdouble x, y;\n\n\t\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\n\t\tPoint operator + (Point p){ return Point(x + p.x, y + p.y);}\n\t\tPoint operator - (Point p){ return Point(x - p.x, y - p.y);}\n\t\tPoint operator * (double a){ return Point(a * x, a * y);}\n\t\tPoint operator / (double a){ return Point(x / a, y / a);}\n\n\t\tdouble abs(){ return sqrt(norm());}\n\t\tdouble norm(){ return x * x + y * y;}\n\n\t\tbool operator < (const Point &p) const{\n\t\t\treturn x != p.x ? x < p.x : y < p.y;\n\t\t}\n\n\t\tbool operator == (const Point &p) const{\n\t\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t\t}\n};\n\nstruct Segment {\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\nint main(void){\n\tSegment s;\n\tPoint p;\n\tint q;\n\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tcin >> q;\n\tfor(int i=1;i<=q;i++){\n\t\tcin >> p.x >> p.y;\n\t\tPoint projection = project(s, p);\n\t\tprintf(\"%.10f %.10f\\n\",projection.x, projection.y);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//{{{\n#include <bits/stdc++.h>\nusing namespace std;\n//types\ntypedef long long ll;\ntypedef pair<int,int> pii;\n//input\nbool SR(int &_x){return scanf(\"%d\",&_x)==1;}bool SR(ll &_x){return scanf(\"%lld\",&_x)==1;}\nbool SR(double &_x){return scanf(\"%lf\",&_x)==1;}bool SR(char *_s){return scanf(\"%s\",_s)==1;}\nbool RI(){return true;}\ntemplate<typename I,typename... T>bool RI(I &_x,T&... _tail){return SR(_x) && RI(_tail...);}\n//output\nvoid SP(const int _x){printf(\"%d\",_x);}void SP(const ll _x){printf(\"%lld\",_x);}\nvoid SP(const double _x){printf(\"%.16lf\",_x);}void SP(const char *s){printf(\"%s\",s);}\nvoid PL(){puts(\"\");}\ntemplate<typename I,typename... T>void PL(const I _x,const T... _tail)\n{SP(_x);if(sizeof...(_tail)) putchar(' ');PL(_tail...);}\n//macro\n#define SZ(x) ((int)(x).size())\n#define ALL(x) (x).begin(),(x).end()\n#define REP(i,n) for(int i=0;i<int(n);i++)\n#define REP1(i,a,b) for(int i=(a);i<=int(b);i++)\n#define PER1(i,a,b) for(int i=(a);i>=int(b);i--)\n#define pb push_back\n#define mkp make_pair\n#define F first\n#define S second\n//debug\n#ifdef darry140\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const pair<A,B> &_p){return _s<<\"(\"<<_p.F<<\",\"<<_p.S<<\")\";}\ntemplate<typename It>\nostream& _OUTC(ostream &_s,It _b,It _e)//container\n{\n    _s<<\"{\";\n    for(auto _it=_b;_it!=_e;_it++) _s<<(_it==_b?\"\":\" \")<<*_it;\n    _s<<\"}\";\n    return _s;\n}\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const map<A,B> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const set<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const vector<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename I>\nvoid _DOING(const char *_s,I&& _x){cerr<<_s<<\"=\"<<_x<<endl;}//without ','\ntemplate<typename I,typename... T>\nvoid _DOING(const char *_s,I&& _x,T&&... _tail)//with ','\n{\n    int _c=0;\n    static const char _bra[]=\"({[\";\n    static const char _ket[]=\")}]\";\n    while(*_s!=',' || _c!=0)//eg. mkp(a,b)\n    {\n        if(strchr(_bra,*_s)) _c++;\n        if(strchr(_ket,*_s)) _c--;\n        cerr<<*_s++;\n    }\n    cerr<<\"=\"<<_x<<\", \";\n    _DOING(_s+1,_tail...);\n}\n#define debug(...) do{\\\n    fprintf(stderr,\"%s:%d - \",__PRETTY_FUNCTION__,__LINE__);\\\n    _DOING(#__VA_ARGS__,__VA_ARGS__);\\\n}while(0)\n#else\n#define debug(...)\n#endif\n//}}}\ntypedef long double ld;\nconst ld global_eps=1e-9;\n#if 0\nenum cases{insi,bord,outs};//inside, border, outside\nenum cases{para,coin,inte};//parallel, coincide, intersect\n#else\nenum Case\n{\n    insi,bord,outs,//inside, border, outside\n    para,coin,inte, //parallel, coincide, intersect\n    tang,tang_in,tang_out //tangent\n};\n#endif\nint sign(ld x,ld eps=global_eps){return (x>=eps)-(x<=-eps);}\nint cmp(ld a,ld b,ld eps=global_eps){return sign(a-b,eps);}\nstruct Point\n{\n    ld x,y;\n    Point():x(0),y(0){}\n    Point(ld _x,ld _y):x(_x),y(_y){}\n    Point operator +(const Point &p) const\n    {return Point(x+p.x,y+p.y);}\n    Point operator -(const Point &p) const\n    {return Point(x-p.x,y-p.y);}\n    ld operator *(const Point &p) const\n    {return x*p.x+y*p.y;}\n    ld operator %(const Point &p) const\n    {return x*p.y-y*p.x;}   \n    bool operator <(const Point &p) const\n    {return tie(y,x) < tie(p.y,p.x);}\n    bool operator ==(const Point &p) const\n    {return tie(y,x) == tie(p.y,p.x);}\n    Point operator /(const ld &l) const\n    {return Point(x/l,y/l);}\n    Point operator *(const ld &l) const\n    {return Point(x*l,y*l);}\n    ld len() const{return hypot(x,y);}\n    ld len2() const{return x*x+y*y;}\n    ld dis(const Point &a)const{return (*this-a).len();}\n    ld dis2(const Point &a)const{return (*this-a).len2();}\n    Point unit()const{return *this/len();}\n    Point resize(const ld &l)const{return unit()*l;}\n};\nstruct Line\n{\n    Point p1,p2;\n    Line(){}\n    Line(Point a,Point b):p1(a),p2(b){}\n    Point way() const{return p2-p1;}\n    Point norm() const{return {p1.y-p2.y,p2.x-p1.x};}\n    bool online(const Point &p) const{return sign((p-p1)%way())==0;}\n    bool onsegment(const Point &p)const\n    {\n        return online(p) && sign((p-p1)*(p2-p))>=0;\n    }\n    pair<int,Point> intersect(const Line &I) const\n    {\n        if(sign(I.way()%way())==0) return {online(I.p1)?coin:para,{0,0}};\n        const Point &p3=I.p1,&p4=I.p2;\n        auto _143=(p1-p4)%(p4-p3),_342=(p3-p4)%(p4-p2);\n        return {inte,(p1*_342+p2*_143)/(_143+_342)};\n    }\n    ld linedistance(const Point &p) const\n    {\n        return abs((p-p1)%way())/way().len();\n    }\n    Point project(const Point &p) const\n    {\n        return intersect(Line(p,p+norm())).second;\n    }\n    ld segmentdistance(const Point &p) const\n    {\n        const auto &pro=project(p);\n        if(onsegment(pro)) return p.dis(pro);\n        return min(p.dis(p1),p.dis(p2));\n    }\n};\nint main()\n{\n    int a,b,c,d;\n    RI(a,b,c,d);\n    Line I({a,b},{c,d});\n    int q;RI(q);\n    while(q--)\n    {\n        int x,y;RI(x,y);\n        auto ans=I.project({x,y});\n        ans=ans+Point(global_eps,global_eps);\n        PL((double)ans.x,(double)ans.y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long double ld;\n\nconst ld EPS = 1e-9;\nconst ld INF = 1e10;\nconst ld PI = M_PI;\n\nstruct Point{\n  ld x, y;\n  Point(ld x, ld y):x(x), y(y){}\n  Point(){}\n};\n\nPoint operator+(const Point &a, const Point &b){\n  return Point(a.x + b.x, a.y + b.y);\n}\nPoint operator-(const Point &a, const Point &b){\n  return Point(a.x - b.x, a.y - b.y);\n}\nPoint operator*(const Point &a, const ld b){\n  return Point(a.x * b, a.y * b);\n}\nPoint operator*(const Point &a, const Point &b){\n  return Point(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\nPoint operator/(const Point &a, const ld b){\n  return Point(a.x / b, a.y / b);\n}\n\nld dot(const Point &a, const Point &b){\n  return a.x*b.x + a.y*b.y;\n}\n\nld norm(const Point &a){\n  return dot(a, a);\n}\n\nstruct Line:vector<Point>{\n  Line(Point a = Point(0, 0), Point b = Point(0, 0)){\n    this->push_back(a);\n    this->push_back(b);\n  }\n};\n\nPoint projection(const Line &l, const Point &p){\n  ld t = dot(p-l[0], l[1]-l[0]) / norm(l[0] - l[1]);\n  return l[0] + (l[1] - l[0]) * t;\n}\n\n\nint main(){  \n  Point p0, p1;\n  cin >> p0.x >> p0.y >> p1.x >> p1.y;  \n  Line base(p0, p1);\n  \n  int q;\n  cin >> q;\n  \n  Point p2;\n  while(q--){\n    cin >> p2.x >> p2.y;\n    \n    Point ans = projection(base, p2);\n    printf(\"%.10Lf %.10Lf\\n\", ans.x, ans.y);\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cassert>\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) FOR(i,0,n)\n#define rep(i,n) FOR(i,0,n)\n#define DEBUG(x) cout<<#x<<\": \"<<x<<endl\n#define vint vector<int>\n#define vdouble vector<double>\n#define vstring vector<string>\nusing namespace std;\n\n#include<map>\n#include<set>\n#include<queue>\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nconst int MAX_N = 1000000;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n    Point(double x=0, double y=0):x(x), y(y){}\n\n    Point operator + (Point p){ return Point(x + p.x, y + p.y); }\n    Point operator - (Point p){ return Point(x - p.x, y - p.y); }\n    Point operator * (double a){ return Point(a * x, a * y); }\n    Point operator / (double a){ return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y;}\n    bool operator < (const Point &p) const {\n        // first x, second y\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    //|a||b|cos(theta)\n    return a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n    //|a||b|sin(theta)\n    return a.x * b.y - a.y * b.x;\n}\n\nPoint project(Point p1, Point p2, Point p){\n    Vector base = p2 - p1;\n    double r = dot(p - p1, base) / base.norm();\n    return p1 + base * r;\n}\n\nint main() {\n\n    int Q;\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Point p1(x1, y1);\n    Point p2(x2, y2);\n\n    cin >> Q;\n    rep(i, Q){\n        double x, y;\n        cin >> x >> y;\n        Point p(x, y);\n        Point r = project(p1, p2, p);\n        cout << r.x << \" \" << r.y << endl;\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\nusing namespace std;\ndouble distance(double x1, double y1, double x2, double y2) {\n    return sqrt(pow(x2 - x1, 2) + pow(y2 - y1,2));\n}\nint main(void){\n    // Here your code !\n    int x1, y1, x2, y2;\n    double xa, ya;\n    cin >> x1 >> y1 >> x2 >> y2;\n    int n;\n    cin >> n;\n    int x[n], y[n];\n    double cos;\n    for(int i=0;i<n;i++) {\n        cin >> x[i] >> y[i];\n        cos = (pow(distance(x[i], y[i], x1, y1), 2) + pow(distance(x2, y2, x1, y1), 2) - pow(distance(x[i], y[i], x2, y2), 2)) / (2 * distance(x[i], y[i], x1, y1) * distance(x1, y1, x2, y2));\n        xa = x1 + (x2 - x1) * (distance(x1, y1, x[i], y[i]) * cos) / (distance(x1, y1, x2, y2));\n        ya = y1 + (y2 - y1) * (distance(x1, y1, x[i], y[i]) * cos) / (distance(x1, y1, x2, y2));\n        if(xa > -0.00000001 && xa < 0) {\n            xa = 0;\n        }\n        if(ya > -0.00000001 && ya < 0) {\n            ya = 0;\n        }\n        cout << fixed\n             << setprecision(10)\n             << xa\n             << \" \"\n             << ya << endl;\n    }\n    \n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst double EPS = 1e-9;    // Allowable Error\ntypedef complex<double> P;  // Point\n#define X real()\n#define Y imag()\ndouble norm(P& p1,P& p2){\n    return (p1.X-p2.X)*(p1.X-p2.X)+(p1.Y-p2.Y)*(p1.Y-p2.Y);\n}\nnamespace std{\n    bool operator < (const P p1, const P p2){\n        return p1.X != p2.X ? p1.X <p2.X : p1.Y < p2.Y;\n    }\n    P operator + (const P p1,const P p2) {return P(p1.X+p2.X,p1.Y+p2.Y);}\n    P operator - (const P p1,const P p2) {return P(p1.X-p2.X,p1.Y-p2.Y);}\n    P operator * (const P p,double k) {return P(p.X*k,p.Y*k);}\n    P operator / (const P p,double k) {return P(p.X/k,p.Y/k);}\n}\n//Line\nstruct Segment{\n    P p1,p2;\n    Segment(){}\n    Segment(P p1,P p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n//Inner Product dot(a,b) = |a||b|cosÃŽÂ¸\ndouble dot(const P& a, const P& b) {\n  return (conj(a)*b).X;\n}\nP Projection(Line l,P p){\n    P base=l.p2-l.p1;\n    double r=dot(p-l.p1,base)/norm(base);\n    return l.p1+base*r;\n}\n\n//Verify\n//http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\nint main(){\n    double x1,x2,y1,y2,x,y;\n    cin>>x1>>y1>>x2>>y2;\n    Line l=Line(P(x1,y1),P(x2,y2));\n    int q;\n    cin>>q;\n    for(int i=0;i<q;i++){\n        cin>>x>>y;\n        P p=Projection(l,P(x,y));\n        printf(\"%.10f %.10f\\n\",p.X,p.Y);\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<assert.h>\n#include<set>\n#include<cmath>\n#include<queue>\n#include<cstdlib>\n#include<iostream>\n#include<bitset>\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define pb push_back\n#define rep(i,j,k) for(int i=(int)(j);i<=(int)(k);i++)\n#define per(i,j,k) for(int i=(int)(j);i>=(int)(k);i--)\nusing namespace std;\ntypedef long long LL;\n//template\ntypedef double db;\nconst db eps=1e-10;\nconst db pi=acosl(-1.0);\nint sign(db x){if(x<-eps)return -1;if(x>eps)return 1;return 0;}\nint cmp(db x,db y){return sign(x-y);}\nstruct po{\n\tdb x,y;\n\tpo(db _x=0,db _y=0):x(_x),y(_y){}\n};\npo operator +(const po &a,const po &b){return po(a.x+b.x,a.y+b.y);}\npo operator -(const po &a,const po &b){return po(a.x-b.x,a.y-b.y);}\npo operator *(const po &a,const db &b){return po(a.x*b,a.y*b);}\npo operator /(const po &a,const db &b){return po(a.x/b,a.y/b);}\ndb operator *(const po &a,const po &b){return a.x*b.x+a.y*b.y;}\ndb operator ^(const po &a,const po &b){return a.x*b.y-a.y*b.x;}\ndb mo2(po a){return a*a;}\ndb mo(po a){return sqrt(a*a);}\npo proj(po x,po y){//proj x to y\n\treturn y*((x*y)/mo2(y));\n}\n//template\nint main(){\n\tpo p1,p2;\n\tscanf(\"%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n\tint t;scanf(\"%d\",&t);\n\twhile(t--){\n\t\tpo x;scanf(\"%lf%lf\",&x.x,&x.y);\n\t\tpo rp=proj(x-p1,p2-p1)+p1;\n\t\tprintf(\"%.10lf %.10lf\\n\",rp.x,rp.y);\n\t}\n\treturn 0;\n}\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cassert>\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) FOR(i,0,n)\n#define rep(i,n) FOR(i,0,n)\n#define DEBUG(x) cout<<#x<<\": \"<<x<<endl\n#define vint vector<int>\n#define vdouble vector<double>\n#define vstring vector<string>\nusing namespace std;\n\n#include<map>\n#include<set>\n#include<queue>\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nconst int MAX_N = 1000000;\nconst int INFTY = (1 << 21); // 2097152\n// const ll INFTY = (1LL << 60);\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x=0, double y=0):x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a){ return Point(a * x, a * y); }\n\tPoint operator / (double a){ return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y;}\n\tbool operator < (const Point &p) const {\n\t\t// first x, second y\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nstruct Segment{\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2){\n\t\tthis->p1 = p1;\n\t\tthis->p2 = p2;\n\t}\n};\n\ndouble dot(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b){\n\t//|a||b|cos(theta)\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// Orthogonal\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1- b2);\n}\n\n// Orthogonal\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1- b2);\n}\n\n// ???p????????????s???????????????????????????\nPoint project(Segment s, Point p){\n\t// ??\\??????????????????\n\t// t = |hypo|cos??\n\t// cos?? = dot(hypo,base)/|hypo||base|\n\t// project = s.p1 + base/|base| * t\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\nint Q;\nPoint p1, p2;\n\nint main() {\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tcin >> Q;\n\n\trep(i, Q){\n\t\tPoint pp;\n\t\tcin >> pp.x >> pp.y;\n\t\tPoint pr = project(Segment(p1, p2), pp);\n\t\tfprintf(stdout, \"%.10f %.10f\\n\", pr.x, pr.y);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "\n#include <cstdio>\n#include <iostream>\n#include<complex>\n\nusing namespace std;\ntypedef complex<double> P;\n \nP project(P a, P b, P c){\n  b -= a, c -= a;\n  return a + b * real(c / b);\n}\n\nint main(){\n  int n;\n  double ax, ay, bx, by, cx, cy;\n  cin >> ax >> ay >> bx >> by >> n;\n  while(n--) {\n    cin >> cx >> cy;\n    P p = project(P(ax, ay), P(bx, by), P(cx, cy));\n    printf(\"%.8f %.8f\\n\",p.real(),p.imag());\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#ifndef ___Class_Point\n#define ___Class_Point\n\n#include <cmath>\n\nclass Point\n{\nprivate:\n\n\tdouble x_;\n\tdouble y_;\n\npublic:\n\n\tPoint() : x_(0), y_(0) { }\n\n\texplicit Point(double x, double y) : x_(x), y_(y) { }\n\n\texplicit Point(double x1, double y1, double x2, double y2) : x_(x2 - x1), y_(y2 - y1) { }\n\n\tdouble x() const { return x_; }\n\tdouble y() const { return y_; }\n\n\tvoid operator= (Point& p) { x_ = p.x_; y_ = p.y_; }\n\t\n\tPoint operator+ (Point p) { return Point(x_ + p.x_, y_ + p.y_); }\n\tPoint operator- (Point p) { return Point(x_ - p.x_, y_ + p.y_); }\n\n\tPoint operator* (double s) { return Point(x_ * s, y_ * s); }\n\tPoint operator/ (double s) { return Point(x_ / s, y_ / s); }\n};\n\n#endif\n\n#ifndef ___Class_Vector\n#define ___Class_Vector\n\ntypedef Point Vector;\n\ndouble norm(Vector p1)\n{\n\treturn p1.x() * p1.x() + p1.y() * p1.y();\n}\n\ndouble abs(Vector p1)\n{\n\treturn sqrt(norm(p1));\n}\n\ndouble cross(Vector p1, Vector p2)\n{\n\treturn p1.x() * p2.y() - p1.y() * p2.x();\n}\n\ndouble dot(Vector p1, Vector p2)\n{\n\treturn p1.x() * p2.x() + p1.y() * p2.y();\n}\n\n#endif\n\n#ifndef ___Computational_Geometry\n#define ___Computational_Geometry\n\nbool palarell(Vector p1, Vector p2)\n{\n\treturn cross(p1, p2) == 0;\n}\n\nbool palarell(Point p1_s, Point p1_e, Point p2_s, Point p2_e)\n{\n\treturn palarell(p1_e - p1_s, p2_e - p2_s);\n}\n\nbool orthogonal(Vector p1, Vector p2)\n{\n\treturn dot(p1, p2) == 0;\n}\n\nbool orthogonal(Point p1_s, Point p1_e, Point p2_s, Point p2_e)\n{\n\treturn orthogonal(p1_e - p1_s, p2_e - p2_s);\n}\n\ndouble dist_sqr(Point p1, Point p2)\n{\n\treturn pow(p2.x() - p1.x(), 2) + pow(p2.y() - p1.y(), 2);\n}\n\ndouble distance(Point p1, Point p2)\n{\n\treturn sqrt(dist_sqr(p1, p2));\n}\n\nVector projection(Vector hypo, Vector base)\n{\n\treturn base * (dot(hypo, base) / norm(base));\n}\n\nVector reflection(Vector hypo, Vector base)\n{\n\treturn base + (projection(hypo, base) - hypo) * 2.0;\n}\n\n#endif\n\n#include <cstdio>\n\n#pragma warning(disable: 4996)\n\nint main()\n{\n\tint x1, y1, x2, y2, x3, y3, q;\n\n\tscanf(\"%d\", &x1);\n\tscanf(\"%d\", &y1);\n\tscanf(\"%d\", &x2);\n\tscanf(\"%d\", &y2);\n\n\tVector p(x1, y1, x2, y2);\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%d\", &x3);\n\t\tscanf(\"%d\", &y3);\n\n\t\tVector a(x1, y1, x3, y3);\n\n\t\tVector c = projection(a, p);\n\n\t\tprintf(\"%.15f %.15f\\n\", x1 + c.x(), y1 + c.y());\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nstruct Point{\n    Point(double _x=0,double _y=0):x(_x),y(_y){}\n    \n    Point operator + (Point p) const {return Point(x+p.x,y+p.y);}\n    Point operator - (Point p) const {return Point(x-p.x,y-p.y);}\n    Point operator * (double d) const {return Point(x*d,y*d);}\n    \n    double SqrLength() const{\n        return x*x+y*y;\n    }\n    \n    void Read(){\n        scanf(\"%lf%lf\",&x,&y);\n    }\n    \n    void Write(){\n        printf(\"%.10f %.10f\\n\",x,y);\n    }\n    \n    double x,y;  \n\n    friend double Dot(Point p1,Point p2){\n        return p1.x*p2.x+p1.y*p2.y;\n    }\n};\n\nstruct Line{\n    Line(){}\n    Point s,t;\n    \n    friend Point Project(Point p,Line l){\n        Point dir=l.t-l.s;\n        return l.s+dir*(Dot(dir,p-l.s)/dir.SqrLength());\n    }\n};\n\nint main(){\n    Line l;\n    l.s.Read(); l.t.Read();\n    int n; scanf(\"%d\",&n);\n    while(n--){\n        Point p,q;\n        p.Read();\n        q=Project(p,l);\n        q.Write();\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\n\nconst double EPS = 1e-10;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double k) {\n\t\treturn Point(k * x, k * y);\n\t}\n\tPoint operator / (double k) {\n\t\treturn Point(x / k, y / k);\n\t}\n\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2): p1(p1), p2(p2) {};\n\n\tPoint project(Point p) {\n\t\tVector a = Vector(p.x - p1.x, p.y - p1.y);\n\t\tVector b = Vector(p2.x - p1.x, p2.y - p1.y);\n\t\treturn p1 + p2 * (dot(a, b) / b.norm());\n\t}\n};\n\nint main() {\n\tint x0, y0, x1, y1, q;\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\tSegment s = Segment(Point(x0, y0), Point(x1, y1));\n\tint x2, y2;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x2 >> y2;\n\t\tPoint pro = s.project(Point(x2, y2));\n\t\tcout << fixed << setprecision(10) << pro.x << ' ' << pro.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef ___Geometry_Library\n#define ___Geometry_Library\n\n// ------ Includes ------ //\n#include <cmath>\n#include <complex>\n#include <utility>\n#include <algorithm>\n\n// ------ Defines ------ //\ntypedef long double GType;\ntypedef std::complex<GType> Point;\ntypedef std::pair<Point, Point> Segment;\n\n// ------ Constants ------ //\nconst GType EPS = 1.0e-10L;\n\n// ------ Functions Level 1 ------ //\nGType dot(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).real();\n}\nGType cross(const Point& p1, const Point& p2) {\n\treturn (std::conj(p1) * p2).imag();\n}\nint ccw(const Point& p1, const Point& p2, const Point& p3) {\n\tPoint v1 = p2 - p1, v2 = p3 - p1;\n\tif (cross(v1, v2) > EPS) return +1;\n\tif (cross(v1, v2) < -EPS) return -1;\n\tif (dot(v1, v2) < -EPS) return +2;\n\tif (std::norm(v1) < std::norm(v2)) return -2;\n\treturn 0;\n}\n\n// ------ Functions Level 2 ------ //\nbool intersect(const Segment& s1, const Point& p1, bool segflag) {\n\tif (!segflag) return std::abs(cross(s1.second - p1, s1.first - p1)) < EPS;\n\treturn (std::abs(s1.first - p1) + std::abs(s1.second - p1) - std::abs(s1.second - s1.first)) < EPS;\n}\nbool intersect(const Segment& s1, const Segment& s2, bool segflag) {\n\tif (!segflag) return cross(s1.second - s1.first, s2.first - s1.first) * cross(s1.second - s1.first, s2.second - s1.first) < EPS;\n\treturn (ccw(s1.first, s1.second, s2.first) * ccw(s1.first, s1.second, s2.second)) <= 0 && (ccw(s2.first, s2.second, s1.first) * ccw(s2.first, s2.second, s1.second)) <= 0;\n}\nPoint projection(const Segment& s1, const Point& p1) {\n\tGType mul = dot(p1 - s1.first, s1.first - s1.second) / norm(s1.first - s1.second);\n\treturn s1.first + (s1.first - s1.second) * mul;\n}\nPoint reflection(const Segment& s1, const Point& p1) {\n\treturn p1 + (projection(s1, p1) - p1) * (GType)(2);\n}\n\n#endif\n\n#include <iomanip>\n#include <iostream>\nusing namespace std;\nint q, xa, ya, xb, yb; Segment s; Point p1, p2;\nint main() {\n\tcin >> xa >> ya >> xb >> yb; s = make_pair(Point(xa, ya), Point(xb, yb));\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> xa >> ya; p1 = Point(xa, ya);\n\t\tp2 = projection(s, p1);\n\t\tcout << fixed << setprecision(15) << p2.real() << ' ' << p2.imag() << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing uint = unsigned int;\nusing ll = long long;\nusing ull = unsigned long long;\nconstexpr ll TEN(int n) { return (n==0) ? 1 : 10*TEN(n-1); }\ntemplate<class T> using V = vector<T>;\ntemplate<class T> using VV = V<V<T>>;\n\nusing D = double;\nconst D PI = acos(D(-1)), EPS = 1e-10;\n\nstruct Pt2 {\n    D x, y;\n    Pt2() {}\n    Pt2(D _x, D _y) : x(_x), y(_y) {}\n    Pt2 operator+(const Pt2 &r) const { return Pt2(x+r.x, y+r.y); }\n    Pt2 operator-(const Pt2 &r) const { return Pt2(x-r.x, y-r.y); }\n    Pt2 operator*(const Pt2 &r) const { return Pt2(x*r.x-y*r.y, x*r.y+y*r.x); }\n\n    Pt2 operator*(const D &r) const { return Pt2(x*r, y*r); }\n    Pt2 operator/(const D &r) const { return Pt2(x/r, y/r); }\n\n    Pt2& operator+=(const Pt2 &r) { return *this=*this+r; }\n    Pt2& operator-=(const Pt2 &r) { return *this=*this-r; }\n    Pt2& operator*=(const Pt2 &r) { return *this=*this*r; }\n    \n    Pt2 operator-() const { return Pt2(-x, -y); }\n\n    D abs() const { return sqrt(x*x + y*y); }\n    D rabs() const { return max(::abs(x), ::abs(y)); } // robust abs\n    D arg() const { return atan2(y, x); }\n\n    pair<D, D> to_pair() const { return make_pair(x, y); }\n    static Pt2 polar(D le, D th) { return Pt2(le*cos(th), le*sin(th)); }\n};\nostream& operator<<(ostream& os, const Pt2 &p) {\n    os << \"(\" << p.x << \", \" << p.y << \")\";\n    return os;\n}\nusing P = Pt2;\n\nstruct L {\n    P s, t;\n    L() {}\n    L(P _s, P _t) : s(_s), t(_t) {}\n    P vec() const { return t-s; }\n    D abs() const { return vec().abs(); }\n    D arg() const { return vec().arg(); }\n};\n\nint sgn(D a) {\n    if (abs(a) <= EPS) return 0;\n    return (a < 0) ? -1 : 1;\n}\nint sgn(D a, D b) { return sgn(a-b); }\n//relative sign\nint rsgn(D a, D f) {\n    if (abs(a) <= f*EPS) return 0;\n    return (a < 0) ? -1 : 1;\n}\n\nD cross(P a, P b) { return a.x*b.y - a.y*b.x; }\nD dot(P a, P b) { return a.x*b.x + a.y*b.y; }\n\n// -2, -1, 0, 1, 2 : front, clock, on, cclock, back\nint ccw(P b, P c) {\n    int s = rsgn(cross(b, c), b.rabs());\n    if (s) return s;\n    if (!sgn(c.rabs()) || !sgn((c-b).rabs())) return 0;\n    if (dot(b, c) < 0) return 2;\n    if (dot(-b, c-b) < 0) return -2;\n    return 0;\n}\nint ccw(P a, P b, P c) { return ccw(b-a, c-a); }\nint ccw(L l, P p) { return ccw(l.s, l.t, p); }\n\nint crossLL(const L &l, const L &m, P &r) {\n    if (sgn(cross(l.vec(), m.vec())) == 0) {\n        r = l.s;\n        if (ccw(l.s, l.t, m.s) % 2 == 0) return -1;\n        return 0;\n    }\n    D t = cross(l.vec(), l.t - m.s) / cross(l.vec(), m.vec());\n    r = m.s + m.vec() * t;\n    return 1;\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << setprecision(20);\n    \n    P p1, p2;\n    D x, y;\n    cin >> x >> y; p1 = P(x, y);\n    cin >> x >> y; p2 = P(x, y);\n\n    int q;\n    cin >> q;\n    for (int ph = 0; ph < q; ph++) {\n        cin >> x >> y;\n        P p3 = P(x, y);\n        P z;\n        crossLL(L(p1, p2), L(p3, p3 + (p2-p1)*P(0, 1)), z);\n        cout << z.x << \" \" << z.y << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst double EPS = 1e-10;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0.0, double y = 0.0) : x(x), y(y) {\n    }\n\n    Point operator+(Point p) {\n        return Point(x + p.x, y + p.y);\n    }\n\n    Point operator-(Point p) {\n        return Point(x - p.x, y - p.y);\n    }\n\n    Point operator*(double k) {\n        return Point(x * k, y * k);\n    }\n\n    Point operator/(double k) {\n        return Point(x / k, y / k);\n    }\n\n    double norm() {\n        return x * x + y * y;\n    }\n\n    double abs() {\n        return sqrt(norm());\n    }\n\n    bool operator<(const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator==(const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a) {\n    return a.x * a.x + a.y * a.y;\n}\n\ndouble absv(Vector a) {\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n    Point c;\n    double r;\n\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {\n    }\n};\n\ntypedef vector<Point> Polygon;\n\nbool isOrthgonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthgonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthgonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthgonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n\n    Point p[2];\n    cin >> p[0].x >> p[0].y >> p[1].x >> p[1].y;\n    Line l;\n    l.p1 = p[0], l.p2 = p[1];\n\n    int q;\n    cin >> q;\n    while (q--) {\n        Point pp;\n        cin >> pp.x >> pp.y;\n        Point proj = project(l, pp);\n        cout << fixed << setprecision(10) << proj.x << \" \" << proj.y << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n\nconst double EPS=1e-10;\n\n#define equals(a, b) (fabs((a)-b(b))<EPS)\n#define X real()\n#define Y imag()\n\nusing namespace std;\n\ntypedef complex<double> Point;\ntypedef complex<double> Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\ntypedef Segment Line;\n\nstruct Circle {\n    Point c;\n    double r;\n    Circle(Point c=Point(), double r=0.0) :\n        c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) {\n    return a.X*b.X + a.Y*b.Y;\n}\n\ndouble cross(Vector a,Vector b) {\n    return a.X*b.Y - a.Y*b.X;\n}\n\nPoint project(Segment s, Point p) {\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base) / norm(base);\n    return s.p1+base*r;\n}\n\nint main() {\n    Segment s;\n    {\n        double x1,y1;\n        double x2,y2;\n        cin>>x1>>y1>>x2>>y2;\n        s=Segment({Point(x1,y1),Point(x2,y2)});\n\n    }\n    int q;\n    cin>>q;\n    while(q-->0) {\n        double x1,y1;\n        cin>>x1>>y1;\n        Point p=Point(x1,y1);\n        Point x=project(s,p);\n        printf(\"%.10f %.10f\\n\",x.X,x.Y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <complex>\n#include <iomanip>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) {\n  return fabs(b - a) < EPS;\n}\n\nusing Point = complex<double>;\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\nostream &operator<<(ostream &os, Point &p) {\n  os << p.real() << \" \" << p.imag() << endl;\n}\n\nnamespace std {\nbool operator<(const Point &a, const Point &b) {\n  return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n}\n} // namespace std\n\ndouble cross(const Point &a, const Point &b) {\n  return a.real() * b.imag() - a.imag() * b.real();\n}\n\ndouble dot(const Point &a, const Point &b) {\n  return a.real() * b.real() + a.imag() * b.imag();\n}\n\ndouble RadianToDegree(double r) {\n  return (r * 180.0 / acos(-1));\n}\n\ndouble DegreeToRadian(double d) {\n  return (d * acos(-1) / 180.0);\n}\n\ndouble GetAngle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if (alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nstruct Line {\n  Point a, b;\n\n  Line(){};\n  Line(Point a, Point b) : a(a), b(b){};\n\n  // Ax + By = C\n  Line(double A, double B, double C) {\n    if (eq(A, 0)) {\n      a = Point(0, C / B);\n      b = Point(1, C / B);\n    } else if (eq(B, 0)) {\n      a = Point(C / A, 0);\n      b = Point(C / A, 1);\n    } else {\n      a = Point(0, C / B);\n      b = Point(C / A, 0);\n    }\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment {\n  Point a, b;\n\n  Segment(){};\n  Segment(Point a, Point b) : a(a), b(b){};\n\n  friend ostream &operator<<(ostream &os, Segment &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Segment &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Circle {\n  Point p;\n  double r;\n\n  Circle(){};\n\n  Circle(Point p, double r) : p(p), r(r){};\n};\n\nusing Polygon = vector<Point>;\nusing Segments = vector<Segment>;\nusing Lines = vector<Line>;\nusing Circles = vector<Circle>;\nusing PointPoint = pair<Point, Point>;\n\nint ccw(const Point &a, Point b, Point c) {\n  b = b - a, c = c - a;\n  if (cross(b, c) > EPS) return +1;\n  if (cross(b, c) < -EPS) return -1;\n  if (dot(b, c) < 0) return +2;\n  if (norm(b) < norm(c)) return -2;\n  return 0;\n}\n\nbool Parallel(const Line &a, const Line &b) {\n  return abs(cross(a.b - a.a, b.b - b.a)) < EPS;\n}\n\nbool Orthogonal(const Line &a, const Line &b) {\n  return abs(dot(a.a - a.b, b.a - b.b)) < EPS;\n}\n\nPoint Projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint Projection(const Segment &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\nPoint Reflection(const Line &l, const Point &p) {\n  return p + (Projection(l, p) - p) * 2.0;\n}\n\nint main() {\n  Point p;\n  Line l;\n  cin >> l;\n  // cerr << \"Line : \" << l << endl;\n\n  int q;\n  cin >> q;\n  while (q--) {\n    Point p;\n    cin >> p;\n    // cerr << \"point : \" << p << endl;\n    Point ans = Projection(l, p);\n    cout << setprecision(10) << ans.real() << \" \" << ans.imag() << endl;\n  }\n}\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\ndouble Distance(const Point &a, const Point &b) {\n  return abs(a - b);\n}\n\ndouble Distance(const Line &l, const Point &p) {\n  return abs(p - Projection(l, p));\n}\n\nbool Intersect(const Line &l, const Line &m);\ndouble Distance(const Line &l, const Line &m) {\n  return Intersect(l, m) ? 0 : Distance(l, m.a);\n}\n\nbool Intersect(const Segment &s, const Point &p);\ndouble Distance(const Segment &s, const Point &p) {\n  Point r = Projection(s, p);\n  if (Intersect(s, r)) return abs(r - p);\n  return min(abs(s.a - p), abs(s.b - p));\n}\n\nbool Intersect(const Segment &s, const Segment &t);\ndouble Distance(const Segment &a, const Segment &b) {\n  if (Intersect(a, b)) return 0;\n  return min(min(Distance(a, b.a), Distance(a, b.b)), min(Distance(b, a.a), Distance(b, a.b)));\n}\n\nbool Intersect(const Line &l, const Segment &s);\ndouble Distance(const Line &l, const Segment &s) {\n  if (Intersect(l, s)) return 0;\n  return min(Distance(l, s.a), Distance(l, s.b));\n}\n\nbool Intersect(const Line &l, const Point &p) {\n  return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool Intersect(const Line &l, const Line &m) {\n  return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool Intersect(const Segment &s, const Point &p) {\n  return ccw(s.a, s.b, p) == 0;\n}\n\nbool Intersect(const Line &l, const Segment &s) {\n  return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nbool Intersect(const Segment &s, const Segment &t) {\n  return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\ndouble Distance(const Line &l, const Point &p);\nbool Intersect(const Circle &c, const Line &l) {\n  return Distance(l, c.p) <= c.r + EPS;\n}\n\nbool Intersect(const Circle &c, const Point &p) {\n  return abs(abs(p - c.p) - c.r) < EPS;\n}\n\nint Intersect(const Circle &c, const Segment &l) {\n  if (norm(Projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;\n  const double d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n  if (d1 < c.r + EPS && d2 < c.r + EPS) return 0;\n  if (d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;\n  const Point h = Projection(l, c.p);\n  if (dot(l.a - h, l.b - h) < 0) return 2;\n  return 0;\n}\n\nPoint Crosspoint(const Line &l, const Line &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPoint Crosspoint(const Segment &l, const Segment &m) {\n  double A = cross(l.b - l.a, m.b - m.a);\n  double B = cross(l.b - l.a, l.b - m.a);\n  if (abs(A) < EPS && abs(B) < EPS) return m.a;\n  return m.a + (m.b - m.a) * B / A;\n}\n\nPointPoint Crosspoint(const Circle &c, const Line l) {\n  Point hp = Projection(l, c.p), h = hp - c.p;\n  const double d2 = norm(h);\n  Point v = (l.b - l.a) * sqrt(c.r * c.r - d2) / abs(l.b - l.a);\n  return PointPoint(hp - v, hp + v);\n}\n\nPointPoint Crosspoint(const Circle &c, const Segment &l) {\n  Line aa = Line(l.a, l.b);\n  if (Intersect(c, l) == 2) return Crosspoint(c, aa);\n  PointPoint ret = Crosspoint(c, aa);\n  if (dot(l.a - ret.first, l.b - ret.first) < 0)\n    ret.second = ret.first;\n  else\n    ret.first = ret.second;\n  return ret;\n}\n\nPointPoint Crosspoint(const Circle &c1, const Circle &c2) {\n  double d = abs(c1.p - c2.p);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n  return (PointPoint(p1, p2));\n}\n\nbool IsConvex(const Polygon &p) {\n  int n = p.size();\n  for (int i = 0; i < n; i++) {\n    if (ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;\n  }\n  return true;\n}\n\nPolygon Convex_Hull(Polygon &p) {\n  int n = p.size(), k = 0;\n  if (n >= 3) {\n    sort(p.begin(), p.end());\n    vector<Point> ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = p[i++]) {\n      while (k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {\n      while (k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < 0) --k;\n    }\n    ch.resize(k - 1);\n    return ch;\n  } else {\n    return p;\n  }\n}\n\nenum { OUT, ON, IN };\nint Contains(const Polygon &Q, const Point &p) {\n  bool in = false;\n  for (int i = 0; i < Q.size(); i++) {\n    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n    if (a.imag() > b.imag()) swap(a, b);\n    if (a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;\n    if (cross(a, b) == 0 && dot(a, b) <= 0) return ON;\n  }\n  return in ? IN : OUT;\n}\n\nbool MergeIfAble(Segment &s1, Segment s2) {\n  if (abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS) return false;\n  if (ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1) return false;\n  if (ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2) return false;\n  s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n  return true;\n}\n\nvoid MergeSegments(vector<Segment> &segs) {\n  for (int i = 0; i < segs.size(); i++) {\n    if (segs[i].b < segs[i].a) swap(segs[i].a, segs[i].b);\n  }\n  for (int i = 0; i < segs.size(); i++) {\n    for (int j = i + 1; j < segs.size(); j++) {\n      if (MergeIfAble(segs[i], segs[j])) {\n        segs[j--] = segs.back(), segs.pop_back();\n      }\n    }\n  }\n}\n\nvector<vector<int>> SegmentArrangement(vector<Segment> &segs, vector<Point> &ps) {\n  vector<vector<int>> g;\n  const int N = (int)segs.size();\n  for (int i = 0; i < N; i++) {\n    ps.emplace_back(segs[i].a);\n    ps.emplace_back(segs[i].b);\n    for (int j = i + 1; j < N; j++) {\n      const Point p1 = segs[i].b - segs[i].a;\n      const Point p2 = segs[j].b - segs[j].a;\n      if (cross(p1, p2) == 0) continue;\n      if (Intersect(segs[i], segs[j])) {\n        ps.emplace_back(Crosspoint(segs[i], segs[j]));\n      }\n    }\n  }\n  sort(begin(ps), end(ps));\n  ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n  const int M = (int)ps.size();\n  g.resize(M);\n  for (int i = 0; i < N; i++) {\n    vector<int> vec;\n    for (int j = 0; j < M; j++) {\n      if (Intersect(segs[i], ps[j])) {\n        vec.emplace_back(j);\n      }\n    }\n    for (int j = 1; j < vec.size(); j++) {\n      g[vec[j - 1]].push_back(vec[j]);\n      g[vec[j]].push_back(vec[j - 1]);\n    }\n  }\n  return (g);\n}\n\nPolygon ConvexCut(Polygon &U, Line l) {\n  Polygon ret;\n  for (int i = 0; i < U.size(); i++) {\n    Point now = U[i], nxt = U[(i + 1) % U.size()];\n    if (ccw(l.a, l.b, now) != -1) ret.push_back(now);\n    if (ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0) {\n      ret.push_back(Crosspoint(Line(now, nxt), l));\n    }\n  }\n  return (ret);\n}\n\ndouble Area2(const Polygon &p) {\n  double A = 0;\n  for (int i = 0; i < p.size(); ++i) {\n    A += cross(p[i], p[(i + 1) % p.size()]);\n  }\n  return A;\n}\n\ndouble Convex_Diameter(Polygon &p) {\n  int n = p.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; i++) {\n    if (p[i].imag() > p[is].imag()) is = i;\n    if (p[i].imag() < p[js].imag()) js = i;\n  }\n  double maxdis = norm(p[is] - p[js]);\n\n  int maxi, maxj, i, j;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(p[(i + 1) % n] - p[i], p[(j + 1) % n] - p[j]) >= 0) {\n      j = (j + 1) % n;\n    } else {\n      i = (i + 1) % n;\n    }\n    if (norm(p[i] - p[j]) > maxdis) {\n      maxdis = norm(p[i] - p[j]);\n      maxi = i;\n      maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxdis;\n}\n\n// int main() {}\n\n"
  },
  {
    "language": "C++",
    "code": "using namespace std;\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<iomanip>\nconst double EPS=1e-10;\nbool eq(double a,double b){return abs(a-b)<EPS;}\nstruct Point{\n\tdouble x,y;\n\tPoint(double x_=0,double y_=0):x(x_),y(y_){}\n\tPoint operator-()const{return Point(-x,-y);}\n\tPoint operator+(const Point&p)const{return Point(x+p.x,y+p.y);}\n\tPoint operator-(const Point&p)const{return Point(x-p.x,y-p.y);}\n\tPoint operator*(const double k)const{return Point(x*k,y*k);}\n\tPoint operator/(const double k)const{return Point(x/k,y/k);}\n\tbool operator<(const Point&p)const{return eq(x,p.x)?y<p.y:x<p.x;}\n\tbool operator==(const Point&p)const{return eq(x,p.x)&&eq(y,p.y);}\n};\nistream&operator>>(istream&is,Point&p){return is>>p.x>>p.y;}\nostream&operator<<(ostream&os,const Point&p){return os<<fixed<<setprecision(9)<<p.x<<' '<<p.y;}\nstruct Line{\n\tPoint p1,p2;\n\tLine(Point p1_=Point(),Point p2_=Point()):p1(p1_),p2(p2_){}\n};\nstruct Segment:Line{\n\tSegment(Point p1_=Point(),Point p2_=Point()):Line(p1_,p2_){}\n};\nstruct Circle{\n\tPoint o;\n\tdouble r;\n\tCircle(Point o_=Point(),double r_=0):o(o_),r(r_){}\n};\n//function list begin\nPoint vec(const Line&);\ndouble norm(const Point&);\ndouble norm(const Line&);\ndouble abs(const Point&);\ndouble abs(const Line&);\ndouble arg(const Point&);\ndouble arg(const Line&);\ndouble arg(const Point&,const Point&,const Point&);\ndouble dot(const Point&,const Point&);\ndouble cross(const Point&,const Point&);\nPoint polar(const double,const double);\nPoint rotate(const Point&,const double);\nint ccw(const Point&,const Point&,const Point&);\n//+2=>ONLINE_BACK\n//+1=>COUNTER_CLOCKWISE\n//+0=>ON_SEGMENT\n//-1=>CLOCKWISE\n//-2=>ONLINE_FRONT\nbool orthogonal(const Point&,const Point&);\nbool orthogonal(const Line&,const Line&);\nbool parallel(const Point&,const Point&);\nbool parallel(const Line&,const Line&);\nbool intersect(const Line&,const Point&);\nbool intersect(const Line&,const Line&);\nbool intersect(const Segment&,const Point&);\nbool intersect(const Segment&,const Segment&);\nbool intersect(const Line&,const Segment&);\nbool intersect(const Segment&,const Line&);\nbool intersect(const Circle&,const Point&);\nint intersect(const Circle&,const Line&);\nint intersect(const Circle&,const Segment&);\nint intersect(const Circle&,const Circle&);\ndouble distance(const Point&,const Point&);\ndouble distance(const Line&,const Point&);\ndouble distance(const Line&,const Line&);\ndouble distance(const Segment&,const Point&);\ndouble distance(const Segment&,const Segment&);\ndouble distance(const Line&,const Segment&);\ndouble distance(const Segment&,const Line&);\ndouble distance(const Circle&,const Point&);\ndouble distance(const Circle&,const Line&);\ndouble distance(const Circle&,const Segment&);\ndouble distance(const Circle&,const Circle&);\nPoint projection(const Line&,const Point&);\nPoint reflection(const Line&,const Point&);\nPoint crosspoint(const Line&,const Line&);\npair<Point,Point>crosspoint(const Circle&,const Line&);\npair<Point,Point>crosspoint(const Circle&,const Segment&);\npair<Point,Point>crosspoint(const Circle&,const Circle&);\n//function list end\nPoint vec(const Line&s){return s.p2-s.p1;}\ndouble norm(const Point&p){return p.x*p.x+p.y*p.y;}\ndouble norm(const Line&s){return norm(vec(s));}\ndouble abs(const Point&p){return hypot(p.x,p.y);}\ndouble abs(const Line&s){return abs(vec(s));}\ndouble arg(const Point&p){return atan2(p.y,p.x);}\ndouble arg(const Line&s){return arg(vec(s));}\ndouble arg(const Point&a,const Point&b,const Point&c){\n\tdouble A=arg(b-a),B=arg(c-b);\n\tdouble theta=abs(A-B);\n\treturn min(theta,2*M_PI-theta);\n}\ndouble dot(const Point&a,const Point&b){return a.x*b.x+a.y*b.y;}\ndouble cross(const Point&a,const Point&b){return a.x*b.y-a.y*b.x;}\nPoint polar(const double r,const double theta){return Point(cos(theta),sin(theta))*r;}\nPoint rotate(const Point&p,const double theta){\n\treturn Point(p.x*cos(theta)-p.y*sin(theta),p.x*sin(theta)+p.y*cos(theta));\n}\nint ccw(const Point&a,const Point&b,const Point&c){\n\tPoint p=b-a,q=c-a;\n\treturn cross(p,q)>EPS?1\n\t\t:cross(p,q)<-EPS?-1\n\t\t:dot(p,q)<0?2\n\t\t:norm(p)<norm(q)?-2\n\t\t:0;\n}\nbool orthogonal(const Point&a,const Point&b){return eq(dot(a,b),0);}\nbool orthogonal(const Line&a,const Line&b){return orthogonal(vec(a),vec(b));}\nbool parallel(const Point&a,const Point&b){return eq(cross(a,b),0);}\nbool parallel(const Line&a,const Line&b){return parallel(vec(a),vec(b));}\nbool intersect(const Line&s,const Point&p){return eq(cross(vec(s),p-s.p1),0);}\nbool intersect(const Line&s,const Line&t){return !parallel(s,t)||intersect(s,t.p1);}\nbool intersect(const Segment&s,const Point&p){return ccw(s.p1,s.p2,p)==0;}\nbool intersect(const Segment&s,const Segment&t){\n\treturn ccw(s.p1,s.p2,t.p1)*ccw(s.p1,s.p2,t.p2)<=0\n\t\t&&ccw(t.p1,t.p2,s.p1)*ccw(t.p1,t.p2,s.p2)<=0;\n}\nbool intersect(const Line&s,const Segment&t){\n\treturn cross(vec(s),t.p1-s.p1)*cross(vec(s),t.p2-s.p1)<EPS;\n}\nbool intersect(const Segment&s,const Line&t){return intersect(t,s);}\nbool intersect(const Circle&c,const Point&p){return eq(distance(c.o,p),c.r);}\nint intersect(const Circle&c,const Line&s){\n\tdouble d=distance(s,c.o);\n\treturn eq(d,c.r)?1:d<c.r?2:0;\n}\nint intersect(const Circle&c,const Segment&s){\n\tPoint h=projection(s,c.o);\n\tdouble d1=distance(c.o,s.p1),d2=distance(c.o,s.p2);\n\treturn distance(c.o,h)>c.r+EPS?0\n\t\t:d1<c.r-EPS&&d2<c.r-EPS?0\n\t\t:d1<c.r-EPS&&d2>c.r+EPS||d1>c.r+EPS&&d2<c.r-EPS?1\n\t\t:intersect(s,h)?distance(c.o,h)<c.r-EPS?2:1\n\t\t:0;\n}\nint intersect(const Circle&a,const Circle&b){\n\tdouble d=distance(a.o,b.o);\n\treturn eq(d,a.r+b.r)?3:d>a.r+b.r?4:eq(d,abs(a.r-b.r))?1:d>abs(a.r-b.r)?2:0;\n}\ndouble distance(const Point&a,const Point&b){return abs(a-b);}\ndouble distance(const Line&s,const Point&p){return distance(p,projection(s,p));}\ndouble distance(const Line&s,const Line&t){return intersect(s,t)?0:distance(s,t.p1);}\ndouble distance(const Segment&s,const Point&p){\n\treturn distance(p,\n\t\tdot(vec(s),p-s.p1)<0?s.p1\n\t\t:dot(-vec(s),p-s.p2)<0?s.p2\n\t\t:projection(s,p)\n\t);\n}\ndouble distance(const Segment&s,const Segment&t){\n\treturn intersect(s,t)?0:min({\n\t\tdistance(s.p1,t.p1),distance(s.p1,t.p2),\n\t\tdistance(s.p2,t.p1),distance(s.p2,t.p2)\n\t});\n}\ndouble distance(const Line&s,const Segment&t){\n\treturn intersect(s,t)?0:min(distance(s,t.p1),distance(s,t.p2));\n}\ndouble distance(const Segment&s,const Line&t){return distance(t,s);}\ndouble distance(const Circle&c,const Point&p){return abs(distance(c.o,p)-c.r);}\ndouble distance(const Circle&c,const Line&s){return max(distance(s,c.o)-c.r,0.);}\ndouble distance(const Circle&c,const Segment&s){\n\tPoint h=projection(s,c.o);\n\tdouble d1=distance(c.o,s.p1),d2=distance(c.o,s.p2);\n\treturn intersect(c,s)?0\n\t\t:d1<c.r-EPS&&d2<c.r-EPS?c.r-max(d1,d2)\n\t\t:intersect(s,h)?distance(c.o,h)-c.r\n\t\t:min(distance(c.o,s.p1),distance(c.o,s.p2))-c.r;\n}\ndouble distance(const Circle&a,const Circle&b){return max(distance(a.o,b.o)-a.r-b.r,0.);}\nPoint projection(const Line&s,const Point&p){\n\treturn s.p1+vec(s)*dot(p-s.p1,vec(s))/norm(s);\n}\nPoint reflection(const Line&s,const Point&p){return projection(s,p)*2-p;}\nPoint crosspoint(const Line&s,const Line&t){\n\tdouble d1=abs(cross(vec(s),t.p1-s.p1));\n\tdouble d2=abs(cross(vec(s),t.p2-s.p1));\n\treturn t.p1+vec(t)*(d1/(d1+d2));\n}\npair<Point,Point>crosspoint(const Circle&c,const Line&s){\n\tPoint h=projection(s,c.o);\n\tPoint e=vec(s)/abs(s)*sqrt(c.r*c.r-norm(h-c.o));\n\treturn minmax(h-e,h+e);\n}\npair<Point,Point>crosspoint(const Circle&c,const Segment&s){\n\tpair<Point,Point>p=crosspoint(c,Line(s));\n\treturn intersect(c,s)==2?p\n\t\t:intersect(s,p.first)?make_pair(p.first,p.first)\n\t\t:make_pair(p.second,p.second);\n}\npair<Point,Point>crosspoint(const Circle&a,const Circle&b){\n\tdouble d=distance(a.o,b.o);\n\tdouble alpha=acos((a.r*a.r+d*d-b.r*b.r)/(2*a.r*d));\n\tdouble theta=arg(b.o-a.o);\n\treturn minmax(a.o+polar(a.r,theta+alpha),a.o+polar(a.r,theta-alpha));\n}\nmain(){\n\tLine s;Point p;\n\tint q;\n\tcin>>s.p1>>s.p2>>q;\n\tfor(;q--;)\n\t{\n\t\tcin>>p;\n\t\tcout<<projection(s,p)<<endl;\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i=0;i<n;++i)\ntypedef complex<double> Point;\n#define X real()\n#define Y imag()\n\ndouble dot(Point a, Point b) {\n\treturn a.X*b.X + a.Y*b.Y;\n}\n\nPoint proj(Point a1, Point a2, Point p) {\n\treturn a1 + dot(a2-a1, p-a1)/norm(a2-a1) * (a2-a1);\n}\n\nint main(void){\n\tdouble x1,y1,x2,y2,x,y;\n\tint q;\n\tcin>>x1>>y1>>x2>>y2>>q;\n\trep(i,q){\n\t\tcin>>x>>y;\n\t\tPoint p=proj({x1,y1},{x2,y2},{x,y});\n\t\tprintf(\"%.9f %.9f\\n\",p.X,p.Y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <math.h>\n#include <vector>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    float x, y;\n    \n    Vector() {\n        x = 0.f;\n        y = 0.f;\n    }\n    \n    Vector(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void set(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void setX(float nx) {\n        x = nx;\n    }\n    \n    void setY(float ny) {\n        y = ny;\n    }\n    \n    // ベクトルの大きさを求める\n    float getMagnitude() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 内積を求める\n    float getScalar(const Vector& vec) {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 角度を求める\n    float getAngle(const Vector& vec) {\n        return getScalar(vec) / (getMagnitude() * vec.getMagnitude());\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() {\n        Vector v;\n        float mag = getMagnitude();\n        if (mag == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / mag, y / mag);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (float f) {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) {\n        Vector v;\n        if (vec.x == 0.f) {\n            v.setX(0.f);\n        } else {\n            v.setX(x / vec.x);\n        }\n        \n        if (vec.y == 0.f) {\n            v.setY(0.f);\n        } else {\n            v.setY(y / vec.y);\n        }\n        return v;\n    }\n    \n    Vector operator / (float f) {\n        Vector v;\n        if (f == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.f) {\n            x = 0.f;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.f) {\n            y = 0.f;\n        } else {\n            y /= vec.y;\n        }\n    }\n};\n\n\nint main() {\n    Vector vec1, vec2;\n    int x, y;\n    cin >> x;\n    cin >> y;\n    vec1.set(x,y);\n    cin >> x;\n    cin >> y;\n    vec2.set(x,y);\n    \n    int n;\n    cin >> n;\n    \n    Vector vec = vec2 - vec1;\n    Vector p, ret;\n    vector<Vector> results;\n    for (int i = 0; i < n; i++) {\n        int px, py;\n        cin >> px;\n        cin >> py;\n        p.set(px, py);\n        p -= vec1;\n        \n        float cos = p.getAngle(vec);\n        float size = p.getMagnitude() * cos;\n        ret = vec.getUnit() * size;\n        \n        results.push_back(ret);\n    }\n    \n    for (int i = 0; i < results.size(); i++) {\n        cout << results[i].x << \" \" << results[i].y << endl;\n     }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n#define eps = (1e-10);\n//点\nstruct Point{\n    double x,y;\n    Point(double _x=0,double _y=0):x(_x),y(_y){}\n    Point operator + (Point p){return Point(x+p.x,y+p.y);}\n    Point operator - (Point p){return Point(x-p.x,y-p.y);}\n    Point operator * (double a){return Point(a*x,a*y);}\n    Point operator / (double a){return Point(x/a,y/a);}\n    double norm(){return x*x+y*y;}//模的平方\n    double ABS() {return sqrt(norm());}//模\n};\n//线段\nstruct Segment{\n    Point p1,p2;\n};\ndouble dot(Point a,Point b){\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(Point a,Point b){\n    return a.x*b.y-a.y*b.x;\n}\n//计算p1,p2为线段，p,p1向线段上的投影坐标(x,y)\nPoint cal(Point p,Segment s){\n    Point alp=p-s.p1;Point beta=s.p2-s.p1;\n    //cout<<p.x<<' '<<p.y<<' '<<' '<<s.p1.x<<' '<<s.p1.y<<' '<<alp.x<<' '<<alp.y<<endl;\n    double res=dot(alp,beta)/beta.norm();\n    return s.p1+(beta*res);\n}\nint main(){\n    double x1,y1,x2,y2;\n    scanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n    Point p1={x1,y1};Point p2={x2,y2};\n    Segment s={p1,p2};\n    int T;\n    scanf(\"%d\",&T);\n    double x,y;\n    while(T--){\n        scanf(\"%lf %lf\",&x,&y);\n        Point p={x,y};\n        Point ans=cal(p,s);\n        printf(\"%.11lf %.11lf\\n\",ans.x,ans.y);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main()\n{\n\tint p1x = 0, p1y = 0, p2x = 0, p2y = 0, q = 0, px = 0, py = 0;\n\tint a = 0, b = 0;\n\tlong c = 0, s = 0;\n\tdouble x = 0, y = 0;\n\n\tcin >> p1x >> p1y >> p2x >> p2y;\n\tcin >> q;\n\n\ta = p2y - p1y;\n\tb = p1x - p2x;\n\tc = - p1x * p2y + p1y * p2x;\n\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> px >> py;\n\n\t\ts = a * px + b * py + c;\n\t\tx = px - (double)(s * a) / (double)(a * a + b * b);\n\t\ty = py - (double)(s * b) / (double)(a * a + b * b);\n\n\t\tcout << setprecision(10) << setiosflags(ios::fixed | ios::showpoint) \n\t\t\t << x << \" \" << y << endl;\n\t}\n\t\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// CGL_1_A\n#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\nusing namespace std;\n\nint main(){\n\tdouble xx, yy, X, Y, x, y;\n\tint q, xp[2], yp[2];\n\n\tcin>>xp[0]>>yp[0]>>xp[1]>>yp[1];\n\tX = xp[1] - xp[0];\n\tY = yp[1] - yp[0];\n\n\tcin>>q;\n\tfor(int i=0;i<q;i++){\n\t\tcin>>xx>>yy;\n\n\t\tif(Y == 0){\n\t\t\tx = xx;\n\t\t\ty = yp[0];\n\t\t}else if(X == 0){\n\t\t\tx = xp[0];\n\t\t\ty = yy;\n\t\t}else{\n\t\t\tx = (xp[0]*Y*Y+xx*X*X+yy*X*Y-yp[0]*X*Y)/(X*X+Y*Y);\n\t\t\ty = -X/Y*(x-xx)+yy;\n\t\t}\n\n\t\tprintf(\"%.10lf %.10lf\\n\", x, y);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define mset(a,b) memset(a,b,sizeof(a))\n#define lson l,m,rt<<1\n#define rson m+1,r,rt<<1|1\nusing namespace std;\ntypedef long long ll;\nconst ll maxn=1e4+200;\nconst int inf=0x3f3f3f3f;\nconst double EPS=1e-10;\n//typedef pair<int,int> PA;\ndouble add(double a,double b){//考虑误差的加法运算\n    if(abs(a+b)<EPS*(abs(a)+abs(b))) return  0;\n    return a+b;\n}\nclass Point{\npublic:\n\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){\n    }\n    Point operator+ (Point p){\n        return Point(add(x,p.x),add(y,p.y));\n    }\n    Point operator -(Point p){\n        return Point(add(x,-p.x),add(y,-p.y));\n    }\n    Point operator *(double d){\n        return Point(x*d,y*d);\n    }\n    double dot(Point p){//外积 p1.p2  outside\n        return add(x*p.x,y*p.y);\n    }\n    double det(Point p){//内积 p1*p2    inner\n        return add(x*p.y,-y*p.x);\n    }\n    double len(){\n        return sqrt(add(x*x,y*y));\n    }\n};\nPoint operator *(double d,Point p){\n    return Point(p.x*d,p.y*d);\n}\nPoint Projection(Point p1,Point p2,Point p){//p 在线段p1,p2上的投影坐标\n    double d1=1.0/(p2-p1).len();\n    Point ans=(p-p1).dot((p2-p1))*(p2-p1)*d1*d1;\n    return ans+p1;\n}\ntypedef Point P;\nint main(){\n    P p1,p2;\n    scanf(\"%lf%lf%lf%lf\",&p1.x,&p1.y,&p2.x,&p2.y);\n    int q;\n    scanf(\"%d\",&q);\n    while(q--){\n        P p;\n        scanf(\"%lf%lf\",&p.x,&p.y);\n        P ans=Projection(p1,p2,p);\n        printf(\"%.10f %.10f\\n\",ans.x,ans.y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\n#define EPS 1e-10\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nclass Point {\npublic:\n\tlong double x, y;\n\tPoint(long double x = 0, long double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x*a, y*a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\tlong double abs() { return sqrt(norm()); }\n\tlong double norm() { return x*x + y*y; }\n\tbool operator < (const Point &p) const { return x != p.x ? x < p.x : y < p.y; }\n\tbool operator > (const Point &p) const { return x != p.x ? x > p.x : y > p.y; }\n\tbool operator == (const Point &p) const { return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS; }\n};\nstruct Segment {\n\tPoint p1, p2;\n};\nlong double norm(Point p) { return p.x*p.x + p.y*p.y; }\nlong double abs(Point p) { return sqrt(norm(p)); }\ndouble dot(Point a, Point b) {\n\treturn a.x*b.x + a.y*b.y;\n}\nPoint projection(Segment a, Point b) {\n\tPoint sa = a.p2 - a.p1;\n\tdouble hyp = dot(b - a.p1, sa); double r = hyp / norm(sa);\n\treturn a.p1 + sa * r;\n}\nint main() {\n\tPoint P1, P2; Segment G; int q;\n\tcin >> P1.x >> P1.y >> P2.x >> P2.y;\n\tG.p1 = P1; G.p2 = P2; cin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> P1.x >> P1.y;\n\t\tPoint S = projection(G, P1);\n\t\tcout << fixed << setprecision(15) << S.x << ' ' << fixed << setprecision(15) << S.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\nint projection(double xp1, double yp1, double xp2, double yp2, double* px, double* py)\n{\n    if (xp1 == xp2 && yp1 == yp2) {\n        return 1;\n    } else if (xp1 == xp2) {\n        *px = xp1;\n        return 0;\n    } else {\n        double dist = std::sqrt(std::pow((xp2 - xp1), 2) + std::pow((yp2 - yp1), 2));\n        double cos = (xp2 - xp1) / dist;\n        double sin = (yp2 - yp1) / dist;\n        double xrot = cos * (*px) + sin * (*py);\n        double yrot = -sin * (*px) + cos * (*py);\n        yrot = 0;\n        *px = cos * xrot - sin * yrot;\n        *py = sin * xrot + cos * yrot;\n        return 0;\n    }\n}\n\n\nint main()\n{\n\tdouble xp1 = 0, yp1 = 0, xp2 = 0, yp2 = 0;\n    double x = 0, y = 0;\n    double* px = &x;\n    double* py = &y;\n\t// cout << \"input:\";\n\tcin >> xp1 >> yp1 >> xp2 >> yp2;\n\tunsigned int q, i, j;\n    // cout << \"number of points:\";\n\tcin >> q;\n    double* points_in = new double(q * 2);\n    for (i = 0; i < q; i++){\n        cin >> x >> y;\n        points_in[2 * i - 2] = x;\n        points_in[2 * i - 1] = y;\n    }\n    for (j = 0; j < q; j++){\n        projection(xp1, yp1, xp2, yp2, points_in + 2 * j - 2, points_in + 2 * j - 1);\n        cout << *(points_in + 2 * j - 2) << *(points_in + 2 * j - 1) << endl;\n    }\n/*        // cout << \"point \" << i << \":\";\n\t\tcin >> x >> y;\n        projection(xp1, yp1, xp2, yp2, &x, &y);\n\t\tcout << x << \" \" << y << '\\n';\n\t}*/\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int mod = 1e9 + 7;\nconst int inf = (1 << 30) - 1;\nconst ll infll = (1LL << 61) - 1;\n\nusing Real = double;\nusing Point = complex<Real>;\nconst Real Pi = acos(-1), EPS = 1e-9;\ninline bool eq(Real a, Real b) { return fabs(a - b) < EPS; }\n\n//scalar\nPoint operator*(const Point &p, const Real &c)\n{\n    return Point(c * real(p), c * imag(p));\n}\n\n//add\nPoint operator+(const Point &p, const Point &q)\n{\n    return Point(real(p) + real(q), imag(p) + imag(q));\n}\n\n//equal\nbool operator==(const Point &p, const Point &q)\n{\n    return (real(p) == real(q)) && (imag(p) == imag(q));\n}\n\nReal radian_to_degree(Real r)\n{\n    return (r * 180.0 / Pi);\n}\n\nReal degree_to_radian(Real d)\n{\n    return (d * Pi / 180.0);\n}\n\n//rotate\nPoint rot(Real theta, const Point &p)\n{\n    return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\n//norm\nReal norm(Point const &p)\n{\n    return (real(p) * real(p) + imag(p) * imag(p));\n}\n\n//argumant [0, 2 * Pi)\nReal arg(Point const &p)\n{\n    Real a = atan2(imag(p), real(p));\n    if (a < 0)\n        a = fabs(a) + Pi;\n    return a;\n}\n\n//input\nistream &operator>>(istream &is, Point &p)\n{\n    Real a, b;\n    is >> a >> b;\n    p = Point(a, b);\n    return is;\n}\n\n//output\nostream &operator<<(ostream &os, Point &p)\n{\n    os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\n// a line given two points\nstruct Line\n{\n    Point a, b;\n    Line() = default;\n\n    Line(Point a, Point b) : a(a), b(b) {}\n\n    // Ax + By = C\n    Line(Real A, Real B, Real C)\n    {\n        if (eq(A, 0))\n            a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0))\n            b = Point(C / A, 0), b = Point(C / A, 1);\n        else\n            a = Point(0, C / B), b = Point(C / A, 0);\n    }\n\n    friend istream &operator>>(istream &is, Line &a)\n    {\n        return is >> a.a >> a.b;\n    }\n\n    friend ostream &operator<<(ostream &os, Line &p)\n    {\n        return os << p.a << \" to \" << p.b;\n    }\n};\n\nusing Points = vector<Point>;\nusing Polygon = vector<Point>;\nusing Lines = vector<Line>;\n\nReal dot(const Point &p, const Point &q)\n{\n    return (real(p) * real(q) + imag(p) * imag(q));\n}\n\nPoint projection(const Line &l, const Point &p)\n{\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\nint main()\n{\n    Line l;\n    cin >> l;\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++)\n    {\n        Point X;\n        cin >> X;\n        Point A = projection(l, X);\n        cout << A << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long int ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<pair<int, int> > vii;\n#define rrep(i, m, n) for(int (i)=(m); (i)<(n);  (i)++)\n#define erep(i, m, n) for(int (i)=(m); (i)<=(n); (i)++)\n#define  rep(i, n)    for(int (i)=0; (i)<(n);  (i)++)\n#define rrev(i, m, n) for(int (i)=(n)-1; (i)>=(m); (i)--)\n#define erev(i, m, n) for(int (i)=(n); (i)>=(m); (i)--)\n#define  rev(i, n)    for(int (i)=(n)-1; (i)>=0; (i)--)\n#define vrep(i, c)    for(__typeof((c).begin())i=(c).begin(); i!=(c).end(); i++)\n#define  ALL(v)       (v).begin(), (v).end()\n#define mp            make_pair\n#define pb            push_back\ntemplate<class T, class S> inline bool minup(T& m, S x){ return m>(T)x ? (m=(T)x, true) : false; }\ntemplate<class T, class S> inline bool maxup(T& m, S x){ return m<(T)x ? (m=(T)x, true) : false; }\n\nconst int    INF = 1000000000;\nconst ll     MOD = 1000000007LL;\nconst double EPS = 1E-12;\n\nstruct Point : public complex<double>\n{\npublic:\n  Point() { this->real(0);  this->imag(0); }\n  Point(const double& x, const double& y) { this->real(x);  this->imag(y); }\n  Point(const complex<double> w)  { this->real(w.real());  this->imag(w.imag()); }\n  inline double dot(Point p){ return (conj(*this) * p).real(); }  // ??????\n  inline double det(Point p){ return (conj(*this) * p).imag(); }  // ??????\n};\n\nnamespace std\n{\n  inline bool operator < (const Point& a, const Point& b)\n  {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\ntypedef vector<Point> Polygon;\ninline Point currPoint(vector<Point> P, int i){ return P[i]; }\ninline Point nextPoint(vector<Point> P, int i){ return P[(i+1)%P.size()]; }\ninline Point diffPoint(vector<Point> P, int i){ return nextPoint(P, i) - currPoint(P, i); }\n\n\nint ccw(Point a, Point b, Point c)\n{\n  b -= a;\n  c -= a;\n  if(b.det(c) > 0.0)    return  1;         // counter clockwise\n  if(b.det(c) < 0.0)    return -1;         // clockwise\n  if(b.dot(c) < 0.0)    return  2;         // c--a--b on line\n  if(norm(b) < norm(c)) return -2;         // a--b--c on line  return 0;\n  return 0.0;\n}\n\n\nstruct Line : public vector<Point>\n{\npublic:\n  Line(const Point P, const Point Q){ this->pb(P);  this->pb(Q); }\n};\n\ninline Point projectionOfLP(Line L, Point P){return L[0]+(Point(P-L[0])).dot(L[0]-L[1])/norm(L[0]-L[1])*(L[0]-L[1]);}\ninline Point reflectionOfLP(Line L, Point P){return P+2.0*(projectionOfLP(L, P)-P);}\ninline bool intersectionDeterminationOfLL(Line L, Line M){return abs(Point(L[1]-L[0]).det(M[1]-M[0]))>EPS||abs(Point(L[1]-L[0]).det(M[0]-L[0]))<EPS;}\ninline bool intersectionDeterminationOfLS(Line L, Line S){return(Point(L[1]-L[0]).det(S[0]-L[0]))\n*(Point(L[1]-L[0]).det(S[1]-L[0]))<EPS;}\ninline bool intersectionDeterminationOfLP(Line L, Point P){return abs(Point(L[1]-P).det(L[0]-P))<EPS;}\ninline bool intersectionDeterminationOfSS(Line S, Line T){return ccw(S[0],S[0],T[0])*ccw(S[0],S[1],T[1])<=0&&ccw(T[0],T[1],S[0])*ccw(T[0],T[1],S[1])<=0;}\ninline bool intersectionDeterminationOfSP(Line S, Point P){return abs(S[0]-P)+abs(S[1]-P)-abs(S[1]-S[0])<EPS;}\ninline double distanceOfLP(Line L, Point P){return abs(P-projectionOfLP(L,P));}\ninline double distanceOfLL(Line L, Line M){return intersectionDeterminationOfLL(L,M)?0.0:distanceOfLP(L,M[0]);}\ninline double distanceOfLS(Line L, Line S){return intersectionDeterminationOfLS(L,S)?0.0:min(distanceOfLP(L,S[0]),distanceOfLP(L,S[1]));}\ninline double distanceOfSP(Line S, Point P){Point r=projectionOfLP(S,P);return intersectionDeterminationOfSP(S,r)?abs(r-P):min(abs(S[0]-P),abs(S[1]-P));}\ninline double distanceOfSS(Line S, Line T){return intersectionDeterminationOfSS(S,T)?0.0:min(min(distanceOfSP(S,T[0]),distanceOfSP(S,T[1])),min(distanceOfSP(T,S[0]),distanceOfSP(T,S[1])));}\nPoint intersectionOfLL(Line L, Line M){\n  double A = Point(L[1]-L[0]).det(M[1]-M[0]);\n  double B = Point(L[1]-L[0]).det(L[1]-M[0]);\n  if(abs(A)<EPS && abs(B)<EPS) return M[0];\n  if(abs(A)<EPS) assert(false);\n  return M[0] + B / A * (M[1] - M[0]);\n}\n\ndouble x, y;\nint q;\n\nint main()\n{\n  cin >> x >> y;  Point P = Point(x, y);\n  cin >> x >> y;  Point Q = Point(x, y);\n  Line PQ(P, Q);\n\n  cin >> q;\n  while(q--){\n    cin >> x >> y;\n    Point res = projectionOfLP(PQ, Point(x, y));\n    printf(\"%.15f %.15f\\n\", res.real(), res.imag());\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nstruct TPoint\n{\n  double x, y;\n  TPoint()\n  {\n    x =  y = 0;\n  }\n  TPoint( double _x, double _y ) : x(_x), y(_y){}\n\n  TPoint operator+ (const TPoint p)\n  {\n    return TPoint(x + p.x , y + p.y);\n  }\n\n  TPoint operator- (const TPoint p)\n  {\n    return TPoint( p.x - x , p.y - y );\n  }\n\n  TPoint operator* (double p)\n  {\n    return TPoint(x * p, y * p);\n  }\n\n  double operator* (TPoint p)\n  {\n    return x * p.x + y * p.y;\n  }\n\n  double operator% (const TPoint p)\n  {\n    return (x * p.y) - ( y * p.x);\n  }\n\n  double operator~ ()\n  {\n    return x * x + y * y;\n  }\n};\n\nTPoint projection(TPoint a, TPoint b, TPoint p)\n{\n  double t = (p-a)*(b-a) / (~(b-a));\n  return (a-b)*t;\n}\n\nint main()\n{\n  cout.precision(10);\n  cout << fixed;\n  TPoint a, b, p, ans;\n  int q;\n  cin >> a.x >> a.y >> b.x >> b.y >> q;\n  while(q--)\n  {\n    cin >> p.x >> p.y;\n    ans = projection(a, b, p);\n    cout << ans.x << \" \" << ans.y << '\\n';\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a*x, a*y); }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\n\nint main() {\n\tint q;\n\tPoint p, p1, p2;\n\tSegment s;\n\n\tscanf(\"%lf %lf %lf %lf\", &p1.x, &p1.y, &p2.x, &p2.y);\n\tscanf(\"%d\\n\", &q);\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%lf %lf\", &p.x,&p.y);\n\t}\n\tfor (int i = 0; i < q; i++) {\n\t\tprintf(\"%lf\\n\", project(s, p));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) { return fabs(b - a) < EPS; }\n\nusing Point = complex< double >;\n\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nPoint rotate(double theta, const Point &p) {\n  return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\ndouble radian_to_degree(double r) {\n  return (r * 180.0 / PI);\n}\n\ndouble degree_to_radian(double d) {\n  return (d * PI / 180.0);\n}\n\ndouble get_angle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if(alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nnamespace std {\n  bool operator<(const Point &a, const Point &b) {\n    return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n  }\n}\n\n\nstruct Line {\n  Point a, b;\n\n  Line() {}\n\n  Line(Point a, Point b) : a(a), b(b) {}\n\n  Line(double A, double B, double C) // Ax + By = C\n  {\n    if(eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n    else if(eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n    else a = Point(0, C / B), b = Point(C / A, 0);\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment : Line {\n  Segment() {}\n\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\ndouble dot(const Point &a, const Point &b) {\n  return real(a) * real(b) + imag(a) * imag(b);\n}\n\nPoint projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\n\nint main() {\n  Line l;\n  cin >> l;\n  int Q;\n  cin >> Q;\n  while(Q--) {\n    Point p;\n    cin >> p;\n    p = projection(l, p);\n    cout << fixed << setprecision(10) << p.x << \" \" << p.y << endl;\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\n#include <cassert>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst ll mod=1000000007;\nll powmod(ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\n// head\n\ntypedef double db;\nstruct point {\n\tdb x,y;\n\tpoint() {}\n\tpoint(db x,db y):x(x),y(y) {}\n\tvoid input() { scanf(\"%lf%lf\",&x,&y); }\n\tvoid output() { printf(\"%.10f %.10f\\n\",x,y); }\n\tdb len() { return sqrt(x*x+y*y); }\n\tdb len2() { return x*x+y*y; }\n};\npoint operator + (const point &a,const point &b) { return point(a.x+b.x,a.y+b.y);}\npoint operator - (const point &a,const point &b) { return point(a.x-b.x,a.y-b.y);}\npoint operator * (const point &a,const db &b) { return point(a.x*b,a.y*b);}\npoint operator / (const point &a,const db &b) { return point(a.x/b,a.y/b);}\ndb dot(const point &a,const point &b) { return a.x*b.x+a.y*b.y; }\ndb det(const point &a,const point &b) { return a.x*b.y-a.y*b.x; }\nstruct line {\n\tpoint a,b;\n\tline() {}\n\tline(point a,point b):a(a),b(b) {}\n};\npoint projection(const line &a,const point &b) {\n\treturn a.a+(a.b-a.a)*dot(a.b-a.a,b-a.a)/(a.b-a.a).len2();\n}\nint q;\nint main() {\n\tpoint a,b;\n\ta.input(); b.input();\n\tline p(a,b);\n\tscanf(\"%d\",&q);\n\trep(i,0,q) {\n\t\ta.input();\n\t\tprojection(p,a).output();\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <fstream>\nusing namespace std;\n\nint main(){\n  ifstream fin(\"in.txt\");\n  double x1, y1, x2, y2;\n  fin >> x1 >> y1 >> x2 >> y2;\n  int q;\n  fin >> q;\n\n  double x, y, k;\n  double ax, ay, bx, by;\n  for(int i=0; i<q; i++){\n    fin >> x >> y;\n    ax = x-x1; ay = y-y1;\n    bx = x2-x1; by = y2-y1;\n    k = (ax*bx + ay*by)/(bx*bx + by*by);\n    printf(\"%.10lf %.10lf\\n\", bx*k+x1+0, by*k+y1+0);\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <numeric>\n#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iomanip>\nusing namespace std;\ntypedef vector<double> VecD;\n#define rep(n) for(int i=0;i<n;i++)\n#define PB push_back\n\nclass Point{\nfriend const double operator*(const Point &, const Point &);\nfriend const Point operator*(const double, const Point &);\nfriend const Point operator*(const Point &, const double);\nfriend const Point operator+(const Point &, const Point &);\nfriend const Point operator+(const double, const Point &);\nfriend const Point operator+(const Point &, const double);\nfriend const Point operator-(const Point &);\nfriend const Point operator-(const Point &, const Point &);\nfriend const Point operator-(const double, const Point &);\nfriend const Point operator-(const Point &, const double);\n\npublic:\n\tPoint(){};\n\tPoint(VecD v){\n\t\tpoint = v;\n\t}\n\tVecD point;\n};\n\nconst double operator*(const Point &p0, const Point &p1){ return inner_product( p0.point.begin(), p0.point.end(), p1.point.begin(), 0); }\nconst Point operator*(const double a, const Point &p1){\n\tVecD v;\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++) v.PB(*iter1 * a);\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator* (const Point &p, const double a){return a*p;}\nconst Point operator+(const Point &p0, const Point &p1){\n\tVecD v;\n\tVecD::const_iterator iter0 = p0.point.begin();\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++){\n\t\tv.PB(*iter0 + *iter1);\n\t\titer0++;\n\t}\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator+(const double a, const Point &p1){\n\tVecD v;\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++){\n\t\tv.PB(*iter1 + a);\n\t}\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator+(const Point &p1, const double a){return a+p1;}\nconst Point operator-(const Point &p1){return (-1)*p1;}\nconst Point operator-(Point &p0, Point &p1){ return p0+(-p1); }\nconst Point operator-(double a, Point &p1){ return a+(-p1); }\nconst Point operator-(Point &p1, double a){return (-a)+p1;}\n\nconst Point projection(const Point &p1, const Point &p2){\n\t// cout << p1*p2 << endl;\n\treturn ((p1*p2) / (p1*p1)) * p1;\n}\n\nint main(void){\n\n\tdouble xp0, yp0, xp1, yp1; cin>>xp0>>yp0>>xp1>>yp1;\n\tint q; cin >> q;\n\tVecD v0; v0.PB(xp0); v0.PB(yp0); Point p0(v0);\n\tVecD v1; v1.PB(xp1); v1.PB(yp1); Point p1(v1);\n\tp1 = p1+p0;\n\trep(q){\n\t\tdouble xp2,yp2; cin>>xp2>>yp2;\n\t\tVecD v2; v2.PB(xp2); v2.PB(yp2); Point p2(v2);\n\t\tPoint ret = projection(p1, p2);\n\t\tcout << fixed << setprecision(10) << ret.point[0] << \" \" << fixed << setprecision(10) << ret.point[1] << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\ntypedef long long ll;\ndouble pi=3.14159265359; //円周率\ndouble EPS = 1e-10; //誤差\n\nclass point\n{\n\tpublic:\n\tdouble x,y;\n\n\tpoint()\n\t{x=0;y=0;}\n\t//コンストラクタ\n\tpoint(double a,double b)\n\t{\n\t\tx=a;y=b;\n\t}\n\n\t//足し算\n\tpoint operator + (point p)\n\t{\n\t\treturn point(x+p.x,y+p.y);\n\t}\n\t//引き算\n\tpoint operator - (point p)\n\t{\n\t\treturn point(x-p.x,y-p.y);\n\t}\n\t//d倍\n\tpoint operator * (double d)\n\t{\n\t\treturn point(x*d,y*d);\n\t}\n\t//x座標昇順でソートする\n\tbool operator < (const point &p)\n\tconst {\n\t\tif(std::abs(x-p.x)>EPS)\n\t\t\treturn x<p.x;\n\t\telse\n\t\t\treturn y<p.y;\n\t}\n\t//内積\n\t//直交判定...abs(dot())<EPS\n\tdouble dot(point p)\n\t{\n\t\treturn x*p.x+y*p.y;\n\t}\n\t//外積\n\t//平行判定...abs(cross())<EPS\n\tdouble cross(point p)\n\t{\n\t\treturn x*p.y-y*p.x;\n\t}\n\t//絶対値を求める\n\tdouble abs()\n\t{\n\t\treturn sqrt(x*x+y*y);\n\t}\n\t//単位ベクトルを求める\n\tpoint ev()\n\t{\n\t\treturn point(x/abs(),y/abs());\n\t}\n\t//単位法線ベクトル（の1つ）を求める\n\t//もうひとつは-1倍することで求まる\n\tpoint nev()\n\t{\n\t\treturn point(-y/abs(),x/abs());\n\t}\n\t//2点間の距離を求める\n\t//distがEPS未満なら2点は同じ位置にあるとみなす\n\tdouble pdist(point p)\n\t{\n\t\tpoint v=point(p.x-x,p.y-y);\n\t\treturn v.abs();\n\t}\n\t//この点と直線p1-p2の距離を求める\n\tdouble ldist(point p1,point p2)\n\t{\n\t\treturn std::abs((p2.y-p1.y)*x-(p2.x-p1.x)*y+p2.x*p1.y+p2.y*p1.x)/(p2-p1).abs();\n\t}\n\n};\n\n//線分p1-p2上に点qがあるか判定\nbool on_seg(point p1,point p2,point q)\n{\n\treturn abs((p1-q).cross(p2-q))<EPS && (p1-q).dot(p2-q)<=EPS;\n}\n//直線p1-p2と直線q1-q2の交点\n//線分の交差判定はこれの戻り値が線分上にあるかどうかで判定する...on_seg(p1,p2,intersection(p1,p2,q1,q2))\npoint intersection(point p1,point p2,point q1,point q2)\n{\n\treturn p1 + (p2-p1) * ((q2-q1).cross(q1-p1) / (q2-q1).cross(p2-p1));\n}\n//n頂点からなる多角形の面積を求める(vectorで頂点は与えられる)\ndouble area(vector<point> p)\n{\n\tdouble ret=0;\n\tfor(int i=0;i<p.size()-1;i++)\n\t{\n\t\tret+=p[i].cross(p[i+1]);\n\t}\n\tret+=p[p.size()-1].cross(p[0]);\n\tret/=2;\n\treturn ret;\n}\n/*\n3点a,b,cをa->b->cと進むとき、\n* a->bで時計方向に折れてb->c (clockwise)\n* a->bで反時計方向に折れてb->c(counter clockwise)\n* a->bで逆を向いてaを通り越してb->c(c--a--b on line)\n* a->bでそのままb->c(a--b--c on line)\n* a->bで逆を向いてb->c(a--c--b on line)\n\nのいずれのパターンかを判定する\n*/\nint ccw(point a,point b,point c)\n{\n\tb=b-a;c=c-a;\n\tif(b.cross(c)>EPS)\n\t\treturn 1; //counter clockwise\n\tif(b.cross(c)<-EPS)\n\t\treturn -1; //clockwise\n\tif(b.dot(c)<-EPS)\n\t\treturn 2; //c--a--b on line\n\tif(b.x*b.x+b.y*b.y < c.x*c.x+c.y*c.y)\n\t\treturn -2; //a--b--c on line\n\treturn 0; //a--c--b on line\n}\n//凸包を求める\nvector<point> convex_hull(vector<point> p)\n{\n\tint n=p.size();\n\tint k=0;\n\tsort(p.begin(),p.end());\n\tvector<point> ch(2*n);\n\t//lower-hull 下側凸包\n\tfor(int i=0;i<n;ch[k++]=p[i++])\n\t{\n\t\twhile(k>=2 && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\t//upper-hull 上側凸包\n\tfor(int i=n-2,t=k+1;i>=0;ch[k++]=p[i--])\n\t{\n\t\twhile(k>=t && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\tch.resize(k-1);\n\treturn ch;\n}\n\nint main()\n{\n\tcout.setf(ios::fixed);\n\tcout.precision(12);\n\tpoint p1,p2;\n\tdouble a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\tp1=point(a,b);\n\tp2=point(c,d);\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tpoint f;\n\t\tcin>>a>>b;\n\t\tf=point(a,b);\n\t\tpoint x;\n\t\tx=f+(p2-p1).abs()*(p2-p1).nev();\n\t\tif(!on_seg(p1,p2,x))\n\t\t\tx=f+(p2-p1).abs()*(p2-p1).nev();\n\t\tcout<<x.x<<x.y<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n\nint dcmp(double x) {\n    static double eps = 1e-8;\n    return (x > eps) - (x < -eps);\n}\n\nstruct vec{\n    double x, y;\n\n    vec(double _x=0, double _y=0)\n        :x(_x), y(_y) {}\n\n    vec operator- () const{ return vec(-x, -y); }\n    \n    vec operator+ (const vec& v) const{ return vec(x+v.x, y+v.y); }\n    vec operator- (const vec& v) const{ return vec(x-v.x, y-v.y); }\n    vec operator* (double c) const{ return vec(x*c, y*c); }\n    vec operator/ (double c) const{ return vec(x/c, y/c); }\n\n    double dot(const vec& v) const{ return x*v.x + y*v.y; }\n    double cross(const vec& v) const{ return x*v.y - y*v.x; }\n\n    double len2() const{ return x*x + y*y; }\n    double len() const{ return sqrt(len2()); }\n    \n    vec& norm() { return *this = *this / len(); }\n    vec& rot(double rad) {\n        return  *this = vec(x*cos(rad) - y*sin(rad), x*sin(rad) + y*cos(rad));\n    }\n\n    bool operator< (const vec& v) const{\n        return dcmp(x-v.x) < 0 || (dcmp(x-v.x)==0 && dcmp(y-v.y) < 0);\n    }\n};\n\nstruct line{\n    vec u, v; // u + x*v\n\n    line() {}\n    line(vec _u, vec _v)\n        :u(_u), v(_v) {}\n\n    vec get(double x) {\n        return u + v * x;\n    }\n};\n\nline makeline(vec a, vec b) {\n    return line(a, (b - a).norm());\n}\n\nbool on_left(line l, vec u) {\n    return dcmp(l.v.cross(u - l.u)) > 0;\n}\n\nvec line_intersection(line a, line b) {\n    return b.u + b.v * b.v.cross(b.u-a.u) / a.v.cross(b.v);\n}\n\nbool segment_intersection(vec a, vec b, vec c, vec d) {\n    line x = line(a, b-a), y = line(c, d-c);\n    return on_left(x, c) != on_left(x, d) && on_left(y, a) != on_left(y, b);\n}\n\nbool is_convex(const std::vector<vec>& p) {\n    for (size_t i = 0, j = 1, k; j < p.size(); i++, j++) {\n        k = (j + 1) % p.size();\n        if ((p[j] - p[i]).cross(p[k] - p[j]) < 0)\n            return false;\n    }\n    return true;\n}\n\nstd::vector<vec> convex_hull(std::vector<vec> p) {\n    std::sort(p.begin(), p.end());\n    std::vector<vec> ch;\n    for (size_t i = 0; i < p.size(); ++i) {\n        while (ch.size() > 1 && on_left(makeline(ch[ch.size()-2], p[i]), ch[ch.size()-1]))\n            ch.pop_back();\n        ch.push_back(p[i]);\n    }\n    size_t k = ch.size();\n    for (int i = p.size() - 2; i >= 0; --i) {\n        while (ch.size() > k && on_left(makeline(ch[ch.size()-2], p[i]), ch[ch.size()-1]))\n            ch.pop_back();\n        ch.push_back(p[i]);\n    }\n    ch.pop_back();\n    return ch;\n}\n\nstd::pair<vec, vec> convex_diameter(const std::vector<vec> &p) {\n    int xmax = 0, xmin = 0, n = p.size();\n    for (int i = 1; i < n; ++i) {\n        if (p[i].x > p[xmax].x) xmax = i;\n        if (p[i].x < p[xmin].x) xmin = i;\n    }\n    \n    int i = xmax, j = xmin;\n    int u = xmax, v = xmin;\n    double ans = (p[xmax] - p[xmin]).len2();\n    \n    do {\n        if ((p[i] - p[(i + 1) % n]).cross(p[j] - p[(j + 1) % n]) < 0) i = (i + 1) % n;\n        else j = (j + 1) % n;\n\n        double dist = (p[i] - p[j]).len2();\n        if (dist > ans) {\n            ans = dist;\n            u = i; v = j;\n        }\n    }while(i != xmax || j != xmin);\n    return std::make_pair(p[u], p[v]);\n}\n\ndouble polygon_area(const std::vector<vec>& v) {\n    double area = 0;\n    for (size_t i = 0; i < v.size(); ++i)\n        area += v[i].cross(v[(i + 1) % v.size()]);\n    return area * 0.5;\n}\n\nint relation(const std::vector<vec>& p, const vec& v) {\n    int ret = -1, n = p.size();\n    for (int i = 0; i < n; ++i) {\n        vec a = p[i] - v, b = p[(i + 1) % n] - v;\n        if (a.y > b.y) std::swap(a, b);\n        if (a.y <= 0 && 0 < b.y && a.cross(b) < 0)\n            ret = -ret;\n        if (a.cross(b) == 0 && a.dot(b) <= 0) return 0;\n    }\n    \n    return ret; // 1 - contain, -1 - out\n}\n\n// end template\n\nint main() {\n    vec p1, p2;\n    line l;\n    scanf(\"%lf%lf%lf%lf\", &p1.x, &p1.y, &p2.x, &p2.y);\n    l = makeline(p1, p2);\n\n    int q; scanf(\"%d\", &q);\n    while (q--) {\n        vec p, a;\n        scanf(\"%lf%lf\", &p.x, &p.y);\n\n        a = l.get(l.v.dot(p - p1));\n        printf(\"%.10f %.10f\\n\", a.x, a.y);\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y) {}\n    Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n    Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n    Point operator * (Point p) {return Point(x*p.x,y*p.y);}\n    Point operator / (Point p) {return Point(x/p.x,y/p.y);}\n\n    double abs() {return sqrt(norm());}\n    double norm() {return x*x+y*y;}\n\n    bool operator<(const Point &p) const {\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    bool operator==(const Point &p) const {\n        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n    }\n};\n\nstruct Segment {\n    Point p1,p2;\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a,Vector b) {\n    return  a.x*b.x+a.y*b.y;\n}\n\nPoint project(Segment s,Point p) {\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/base.norm();\n    return s.p1+base*r;\n}\n\nint main(void) {\n    struct Segment s;\n    cin>>s.p1.x>>s.p1.y>>s.p2.x>>s.p2.y;\n    int q;cin>>q;\n    while(q) {\n        Point p;\n        cin>>p.x>>p.y;\n        Point ans=project(s,p);\n        printf(\"%.10f %.10f\\n\",ans.x,ans.y);\n        q--;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n#include <cstdlib>\n#include <cmath>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <ctime>\n#include <vector>\n#include <fstream>\n#include <list>\n#include <iomanip>\n#include <numeric>\nusing namespace std;\n#define ll long long\n#define ull unsigned long long\n#define db double\n#define REP(i, lim) for(int i=0;i<lim;++i)\n#define REPP(i, lim) for(int i=1;i<=lim;++i)\n#define DEC(i, lim) for(int i=lim;i>=1;--i)\n#define FOR(i,l,r)  for(int i=l;i<r;++i)\n#define deBug cout<<\"===================================\"<<endl;\n#define clr(s) memset(s, 0, sizeof(s))\n#define lowclr(s) memset(s, -1, sizeof(s))\nconst int MAXN = 1000055;\nconst int inf = 0x3f3f3f3f;\nconst double pi = acos(-1.0);\nconst db eps = 1e-9;\n\ninline int sgn(db x) { return x<-eps ? -1 : x>eps; }\ninline db sqr(db x) { return x*x; }\n\n\n\nstruct P {\n    // information\n    P() {}\n    P(db _x, db _y) : x(_x), y(_y) {}\n    db x, y;\n\n    // operation\n    P operator + (P p)   const{ return P(x+p.x, y+p.y); }\n    P operator - (P p)   const{ return P(x-p.x, y-p.y); }\n    P operator * (db d)  const{ return P(x*d, y*d); }\n    P operator / (db d)  const{ return P(x/d, y/d); }\n\n    db dot(P p) { return x * p.x + y * p.y; } // 点积\n    db det(P p) { return x * p.y - y + p.x; } // 叉积\n\n    // other\n    void input() { scanf(\"%lf%lf\", &x, &y); }\n    void print() { printf(\"(%lf, %lf)\\n\", x, y); }\n\n    db dis(P p) { return sqrt(sqr(x-p.x) + sqr(y-p.y)); }\n    db dis2(P p) { return sqr(dis(p)); }\n};\n\nP getProjection(P a, P b, P p) {\n    // (p1, q) 在 (p1, q2) 上的投影点\n    P dir = b-a;\n    return a + dir * ( dir.dot(p-a) / a.dis2(b) );\n}\n\nint main()\n{\n//    freopen(\"in.txt\", \"r\", stdin);\n//    freopen(\"out.txt\", \"w\", stdout);\n//    std::ios::sync_with_stdio(false); cin.tie(0);\n\n    P a, b;\n    a.input(); b.input();\n    int Q;\n    scanf(\"%d\", &Q);\n    while(Q--)\n    {\n        P p;\n        p.input();\n        P ans = getProjection(a, b, p);\n        printf(\"%.10lf %.10lf\\n\", ans.x, ans.y);\n    }\n\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SBCURE_NO_DEPRECATE\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nconst int maxn = 110;\nconst int INF = 0x7fffffff;\n\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\nint cmp(Point A, Point B)                     //竖直排序  \n{\n\treturn (A.y<B.y || (A.y == B.y&&A.x<B.x));\n}\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\n\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) >= 0; j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) >= 0; j--) {\n\t\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\n\n\n\nint main(){\n\tSegment s;\n\tPoint p;\n\tint x1,x2,y1,y2,q;\n\tcin>>x1>>y1>>x2>>y2;\n\ts.p1.x=x1;s.p1.y=y1;\n\ts.p2.x=x2;s.p2.y=y2;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x1>>y1;\n\t\tp.x=x1;p.y=y1;\n\t\tPoint ans=project(s, p);\n\t\tprintf(\"%.10lf %.10lf\\n\", ans.x, ans.y);\n\t\t\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cmath>\n#include<iostream>\n#include<iomanip>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\nusing namespace std;\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x=0, double y=0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(x*a, y*a); }\n    Point operator / (double a) { return Point(x/ a, y/ a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x, y*y; }\n    bool operator < (const Point &p) const {\n\treturn x != p.x ? x<p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const {\n\treturn fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.x*b.x + a.y*b.y;\n}\n\ndouble norm(Vector a) {\n    return a.x*a.x + a.y*a.y;\n}\n\n\nPoint project(Point p0, Point p1, Point p2) {\n    Point base = p1-p0;\n    double r = dot(p2-p0, base) /norm(base);\n    return p0 + base*r;\n}\n\nint main() {\n    int n,i;\n    \n    Point p0, p1, p2,p3;\n    cin >> p0.x >> p0.y >> p1.x >> p1.y;\n    cin >> n;\n    for(i=0;i<n;i++){\n\tcin >>  p2.x >> p2.y;\n\tp3 = project(p0,p1, p2);\n\tcout << fixed << showpoint;\n\tcout << setprecision(8);\n\tcout << p3.x <<\" \" << p3.y << endl;\n    }\n    return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef complex<double> P;\n\nP projection(P a,P b,P c)\n{\n    b-=a;c-=a;\n    return a+b*real(c/b);\n}\n\nint main()\n{\n    double x1,y1,x2,y2;\n    cin>>x1>>y1>>x2>>y2;\n\n    int q;\n    cin>>q;\n    while(q--)\n    {\n        double x,y;\n        cin>>x>>y;\n        P p=projection(P(x1,y1),P(x2,y2),P(x,y));\n        cout<<fixed<<setprecision(10)<<p.real()<<\" \"<<p.imag()<<endl;\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#ifndef LOCAL_\n#define fprintf if( false ) fprintf\n#endif // LOCAL_\n// #define dump() fprintf(stderr, \"#%s.%d\\n\", __func__, __LINE__);\n#define dumpl(x1) fprintf(stderr, \"#%s.%d (%s) = (%ld)\\n\", __func__, __LINE__, #x1, x1);\n#define dumpll(x1, x2) fprintf(stderr, \"#%s.%d (%s, %s) = (%ld, %ld)\\n\", __func__, __LINE__, #x1, #x2, x1, x2);\n#define dumplll(x1, x2, x3) fprintf(stderr, \"#%s.%d (%s, %s, %s) = (%ld, %ld, %ld)\\n\", __func__, __LINE__, #x1, #x2, #x3, x1, x2, x3);\n#define dumpd(x1) fprintf(stderr, \"#%s.%d (%s) = (%lf)\\n\", __func__, __LINE__, #x1, x1);\n#define dumpdd(x1, x2) fprintf(stderr, \"#%s.%d (%s, %s) = (%lf, %lf)\\n\", __func__, __LINE__, #x1, #x2, x1, x2);\n#define loop for(;;)\ntypedef std::vector<long> LI;\n\ntemplate<typename T> void scan1(T& x) { fprintf(stderr, \"unknown type\\n\"); }\ntemplate<> void scan1(long& x) { if( scanf(\"%ld\", &x) < 0 ) exit(0); }\ntemplate<> void scan1(std::string& x) { if( not ( std::cin >> x ) ) exit(0); }\nvoid scan() {}\ntemplate<typename Head, typename... Tail>\nvoid scan(Head& x, Tail&... xs) {\n  scan1(x); scan(xs...);\n}\n\ntypedef std::complex<double> P2;\nP2 projection(P2 p1, P2 p2, P2 p) {\n   using namespace std;\n   P2 t = p2 - p1;\n   return p1+(t)/norm(t)*real((p-p1)*conj(t));\n}\n\nstruct Solver {\n   Solver() { fprintf(stderr, \"--------Solver begin--------\\n\"); }\n   ~Solver() { fprintf(stderr, \"--------Solver end--------\\n\"); }\n   void solve() {\n      long x1, y1, x2, y2; scan(x1, y1, x2, y2);\n      long q; scan(q);\n      for(long i = 0; i < q; ++i) {\n         long x, y; scan(x, y);\n         auto res = projection(P2(x1,y1), P2(x2, y2), P2(x,y));\n         printf(\"%.20lf %.20lf\\n\", res.real(), res.imag());\n      }\n   }\n};\n\nint main() {\n  loop std::unique_ptr<Solver>(new Solver())->solve();\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n#include <cassert>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define fs first\n#define sc second\n#define pb push_back\nusing namespace std;\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P,P> L;\t\t//fs->sc\ntypedef vector<P> Pol;\nstruct C{P p;D r;};\nD inf=1e50,eps=1e-10;\n//template<class T> bool eq(T a, T b) { return abs(a-b)<eps;}\n//template<class T> int sig(T a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool eq(D a, D b) { return abs(a-b)<eps;}\nint sig(D a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\ninline D dot(P a, P b) { return real(conj(a)*b);};\ninline D cro(P a, P b) { return imag(conj(a)*b);};\nenum ENCCW{CCW=1, CW=-1, FRONT=2, BACK=-2, ON=0};\t//!!MAEHARAとFRONT,BACKが逆\n//ON優先(including endpoint)\ninline int ccw (P a, P b, P c){\n//\tcout << cro(b-a,c-a) << endl;\n\tif(sig(cro(b-a,c-a))==1) return CCW;\n\tif(sig(cro(b-a,c-a))==-1) return CW;\n\tif(eq(abs(a-c)+abs(c-b),abs(a-b))) return ON;\n\tif(eq(abs(a-b)+abs(b-c),abs(a-c))) return FRONT;\n\tif(eq(abs(c-a)+abs(a-b),abs(c-b))) return BACK;\n\tassert(false);\n}\ninline P proj(P a, P b){\t\t//ベクトルaのbへの射影\n\treturn (dot(a,b)/norm(b))*b;\n}\ninline P perp(L l, P p){\t\t//垂線の足\n\tD t=dot(p-l.fs,l.fs-l.sc)/norm(l.fs-l.sc);\n\treturn l.fs+t*(l.fs-l.sc);\n}\ninline P refl(L l, P p){\n\treturn p+2.0*(perp(l,p)-p);\n}\ninline bool ispal(L a, L b){\n\treturn sig(cro(a.fs-a.sc,b.fs-b.sc))==0;\n}\ninline bool ovLL(L a, L b){\n\treturn ispal(a,b) && sig(cro(a.fs-a.sc,b.fs-a.sc))==0;\n}\ninline bool iLL(L a, L b){\t\t//intersect or overload\n\treturn !ispal(a,b) || ovLL(a,b);\n}\ninline bool iLS(L l, L s){\t\t//intersect(including endpoint) or overload\n\treturn cro(l.sc-l.fs,s.fs-l.fs)*cro(l.sc-l.fs,s.sc-l.fs)<eps;\n}\ninline bool iLP(L l, P p){\t\t//on line\n\treturn sig(cro(l.sc-p,l.fs-p));\n}\ninline bool iSS(L a, L b){\t\t//intersect(including endpoint) or overload\n\treturn ccw(a.fs,a.sc,b.fs)*ccw(a.fs,a.sc,b.sc)<=0 && ccw(b.fs,b.sc,a.fs)*ccw(b.fs,b.sc,a.sc)<=0;\n}\ninline bool iSP(L s, P p){\t\t//intersect(including endpoint) or overload\n\treturn ccw(s.fs,p,s.sc)==ON;\n}\ninline D dLP(L l, P p) { return abs(perp(l,p)-p);}\ninline D dLL(L a, L b) { return iLL(a,b) ? 0 : dLP(a,b.fs);}\ninline D dLS(L l, L s) { return iLS(l,s) ? 0 : min(dLP(l,s.fs),dLP(l,s.sc));}\ninline D dSP(L s, P p) {\n\tP q=perp(s,p);\n\treturn iSP(s,q) ? abs(p-q) : min(abs(p-s.fs),abs(p-s.sc));\n}\ninline D dSS(L a, L b) {\n\tif(iSS(a,b)) return 0;\n\treturn min(min(dSP(a,b.fs),dSP(a,b.sc)),min(dSP(b,a.fs),dSP(b,a.sc)));\n}\ninline P intLL(L a, L b) {\t//intersection\n\tassert(!ispal(a,b));\n\tD t=cro(a.sc-a.fs,a.sc-b.fs)/cro(a.sc-a.fs,b.sc-b.fs);\n\treturn b.fs+t*(b.sc-b.fs);\n}\nenum ENICP{INC=1,ONC=0,OUTC=-1};\ninline int iCP(C c, P p){\n\tD d=abs(p-c.p);\n\treturn eq(d,c.r) ? ONC : (d<c.r ? INC : OUTC);\n}\ninline int iCL(C c, L l){\t\t//num of intersection(s)\n\tD d=dLP(l,c.p);\n\treturn eq(d,c.r) ? 1 : (d<c.r ? 2 : 0);\n}\n//inline int iCS\n//inline int iCC(C a, C b){\n\n/*inline P intCL1(C c, L l){\t\t//iCL=1\n\tassert(iCL(c,l)==1);\n}\ninline L intCL2(C c, L l){\t\t//iCL=2\n\tassert(iCL(c,l)==2);\n}*/\nD aTri(P a, P b, P c){ return cro(b-a,c-a)/2;}\nD aPol(Pol p){\t\t\t//点集合はCCWに与える\n\tint n=p.size();\n\tD ret=0;\n\trep(i,n) ret+=cro(p[i],p[(i+1)%n])/2;\n\treturn ret;\n}\nP gPol(Pol p){\t\t\t//多角形内部が一様な重さを持つときの重心\n\tint n=p.size();\n\tP g;\n\tD s=aPol(p);\n\tassert(s>eps);\n\trep(i,n){\n\t\tD ds=cro(p[i],p[(i+1)%n])/2;\n\t\tg+=ds/3*(p[i]+p[(i+1)%n]);\n\t}\n\treturn g/s;\n}\nenum ENCONT{INP=1,ONP=0,OUTP=-1};\nint contain(Pol pol, P p){\n\tbool in=false;\n\trep(i,pol.size()){\n\t\tP a=pol[i],b=pol[(i+1)%pol.size()];\n\t\tif(ccw(a,b,p)==ON) return ONP;\n\t\tif(!iLS(L(p,p+1.),L(a,b))) continue;\n\t\tif(ovLL(L(p,p+1.),L(a,b))){\n\t\t\tif(sig(max(real(a),real(b))-real(p))>=0) in=!in;\n\t\t\tcontinue;\n\t\t}\n\t\tif(sig(real(intLL(L(p,p+1.),L(a,b)))-real(p))>=0) in=!in;\n\t}\n\treturn in ? INP : OUTP;\n}\ninline D heron(D a, D b, D c){\n\tdouble s=(a+b+c)/2;\n\tif(s-a<eps || s-b<eps || s-c<eps) return 0;\t\t//S=0 || 三角形できない\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tD x0,y0,x1,y1;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tL a=L(P(x0,y0),P(x1,y1));\n\tint q;\n\tscanf(\"%d\",&q);\n\trep(i,q){\n\t\tD x,y;\n\t\tscanf(\"%Lf%Lf\",&x,&y);\n\t\tP p=perp(a,P(x,y));\n\t\tprintf(\"%.10Lf %.10Lf\\n\",p.real(),p.imag());\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-9;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct point_t {\n\tdouble x, y;\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npoint_t cross_point(line_t l, line_t m) {\n\tpoint_t p = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return p;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tp = { x / d, y / -d };\n\treturn p;\n}\n\n// if a vector is (dx, dy), then a = dy, b = -dx\nline_t solve_line(double a, double b, point_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\nint main() {\n\tpoint_t p1, p2;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tline_t l = solve_line(p2.y - p1.y, -(p2.x - p1.x), p1);\n\tint q; cin >> q;\n\tcout << setprecision(15);\n\tLoop(i, q) {\n\t\tpoint_t p;\n\t\tcin >> p.x >> p.y;\n\t\tline_t m = solve_line(l.b, -l.a, p);\n\t\tpoint_t a = cross_point(l, m);\n\t\tcout << a.x << \" \" << a.y << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<math.h>\n#include<iomanip>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll,ll> P;\nstruct pnt{\n    double x,y;\n    pnt operator+(pnt key){\n\tpnt res; res.x=x+key.x,res.y=y+key.y;\n\treturn res;\n    }\n    pnt operator-(pnt key){\n\tpnt res; res.x=x-key.x,res.y=y-key.y;\n\treturn res;\n    }\n    pnt operator*(double key){\n\tpnt res; res.x=x*key,res.y=y*key;\n\treturn res;\n    }\n    pnt operator/(double key){\n\tpnt res; res.x=x/key,res.y=y/key;\n\treturn res;\n    }\n    double abs(){\n\treturn sqrt(x*x+y*y);\n    }\n};\ndouble dot(pnt a,pnt b){\n    return a.x*b.x+a.y*b.y;\n}\nstruct line{\n    pnt a,b;\n};\npnt projection(line p,pnt q){\n    pnt base=p.b-p.a;\n    pnt hypo=q-p.a;\n    pnt res=p.a+base*dot(hypo,base)/base.abs()/base.abs();\n    return res;\n}\nint main(){\n    line p;\n    cin>>p.a.x>>p.a.y>>p.b.x>>p.b.y;\n    ll n;cin>>n;\n    while(n--){\n\tpnt q;\n\tcin>>q.x>>q.y;\n\tpnt res=projection(p,q);\n\tcout<<fixed<<setprecision(9)<<res.x<<\" \";\n\tcout<<fixed<<setprecision(9)<<res.y<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define FOR(I,A,B) for(ll I = (A); I < (B); ++I)\n#define POSL(x,v) (lower_bound(x.begin(),x.end(),v)-x.begin()) //ai>=v  x is sorted\n#define POSU(x,v) (upper_bound(x.begin(),x.end(),v)-x.begin()) //ai>v  x is sorted\n#define NUM(x,v) (POSU(x,v)-POSL(x,v))  //x is sorted\n#define SORT(x) (sort(x.begin(),x.end())) // 0 2 2 3 4 5 8 9\n#define REV(x) (reverse(x.begin(),x.end())) //reverse\n#define TO(x,t,f) ((x)?(t):(f))\n#define CLR(mat) memset(mat, 0, sizeof(mat))\n#define FILV(x,a) fill(x.begin(),x.end(),a)\n#define FILA(ar,N,a) fill(ar,ar+N,a)\n#define NEXTP(x) next_permutation(x.begin(),x.end())\nll gcd(ll a,ll b){if(a<b)swap(a,b);if(a%b==0)return b;else return gcd(b,a%b);}\nll lcm(ll a,ll b){ll c=gcd(a,b);return ((a/c)*(b/c)*c);}//saisyo kobaisu\n#define pb push_back\n#define pri(aa) cout<<(aa)<<endl\nconst ll INF=1e9+7;\nconst ll N = 200002;\n\n\n#define x first\n#define y second\n\ndouble naiseki(pair<double,double> a,pair<double,double> b){\n\treturn (a.x*b.x+a.y*b.y);\n}\n\ndouble nijo(pair<double,double> a){\n\treturn naiseki(a,a);\n}\n\n\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tpair<double,double> p1,p2,p,a,b,c;\n\tll q;\n\tcin>>p1.x>>p1.y>>p2.x>>p2.y;\n\tcin>>q;\n\tFOR(tt,0,q){\n\t\tcin>>p.x>>p.y;\n\t\ta.x=p2.x-p1.x;\n\t\ta.y=p2.y-p1.y;\n\t\tb.x=p.x-p1.x;\n\t\tb.y=p.y-p1.y;\n\t\tc.x=(naiseki(a,b)/nijo(a))*a.x;\n\t\tc.y=(naiseki(a,b)/nijo(a))*a.y;\n\t\tprintf(\"%.10lf %.10lf\\n\",p1.x+c.x,p1.y+c.y);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <iomanip>\n\n\nusing namespace std;\n\n/*2点[(x1,y1),(x2,y2)]を入力し二点を通る直線ax+by+cの(a,b,c)を返す,  */\n/*x1==x2ならfalseを返す*/\n/*falseならばx=cの形の直線*/\nvoid straight_line_passing_through_the_two_points(double x1, double y1, double x2, double y2, double *a, double *b, double *c){\n    *a=(y2-y1);\n    *b=-(x2-x1);\n    *c=y2*(x2-x1)-x2*(y2-y1);\n}\n\n\n/*(x,y)を通るa1x+b1y+c1=0に垂直な直線a2x+b2y+c2=0を返す*/\nvoid vertical_straight_line(double x, double y, double a1, double b1, double c1, double *a2, double *b2, double *c2){\n    *a2 = -b1;\n    *b2 = a1;\n    *c2 = b1*x - a1*y;\n}\n\n/*2直線 a1x+b1y+c1=0 a2x+b2y+c2=0 の交点 (x,y)を返す*/\n/*2直線が平行であるならばfalseを返す*/\n\nbool intersection_and_parallel(double a1, double b1, double c1, double a2, double b2, double c2, double *x, double *y){\n    if(a1*b2==a2*b1)return false;//平行の判定\n    \n    *x = (b1*c2-b2*c1)/(a1*b2-a2*b1);\n    *y = (a2*c1-a1*c2)/(a1*b2-a2*b1);\n    \n    return true;\n}\n\n/*2点(x1,y1), (x2,y2) の距離*/\nbool distance_between_the_two_pointss(double x1,double y1, double x2, double y2){\n    return  sqrt(fabs((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));\n}\n\n\n\n\n\nint main(int argc, const char * argv[])\n{\n    double x1,x2,y1,y2,a,b,c;\n    cin>>x1>>y1>>x2>>y2;\n    \n    straight_line_passing_through_the_two_points(x1, y1, x2, y2, &a, &b, &c);\n    \n    int q;\n    cin>>q;\n    for(int i=0; i<q; i++){\n        double x,y,a2,b2,c2;\n        cin>>x>>y;\n        vertical_straight_line(x, y, a, b, c, &a2, &b2, &c2);\n        //cout<<a<<b<<c<<endl;\n        //cout<<a2<<b2<<c2<<endl;\n        double ans_x, ans_y;\n        intersection_and_parallel(a, b, c, a2, b2, c2, &ans_x, &ans_y);\n        cout<< setprecision( 10 ) <<ans_x<<\" \"<<ans_y<<endl;\n    }\n    \n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define pb push_back\n#define mp make_pair\n#define rep(i, a, b) for(int i = (a); i < (b); ++i)\n#define per(i, a, b) for(int i = (b) - 1; i >= (a); --i)\n#define sz(a) (int)a.size()\n#define de(x) cout << #x << \" = \" << x << endl\n#define dd(x) cout << #x << \" = \" << x << \" \"\n#define endl \"\\n\"\n#define all(a) a.begin(), a.end()\n#define pw(a) (1ll << (a))\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef double db;\ntypedef vector<int> vi;\n\nstruct P {\n\tdb x, y;\n\tP() {}\n\tP(db x, db y) : x(x), y(y) {}\n\tvoid read() {\n\t\tcin >> x >> y;\n\t}\n\tP operator + (const P &c) const {\n\t\treturn P(x + c.x, y + c.y);\n\t}\n\tP operator - (const P &c) const {\n\t\treturn P(x - c.x, y - c.y);\n\t}\n\tP operator * (const db &c) const {\n\t\treturn P(x * c, y * c);\n\t}\n\tP operator / (const db &c) const {\n\t\treturn P(x / c, y / c);\n\t}\n\tdb len2() {\n\t\treturn x * x + y * y;\n\t}\n};\nstruct L {\n\tP a, b;\n\tL() {}\n\tL(P a, P b) : a(a), b(b) {}\n\tvoid read() {\n\t\ta.read();\n\t\tb.read();\n\t}\n};\ndb det(P a, P b) {\n\treturn a.x * b.y - a.y * b.x;\n}\ndb dot(P a, P b) {\n\treturn a.x * b.x + a.y * b.y;\n}\nP isLL(const L &l1, const L &l2) {\n\tdb s1 =  det(l2.b - l2.a, l1.a - l2.a);\n\tdb s2 = -det(l2.b - l2.a, l1.b - l2.a);\n\treturn (l1.a * s2 + l1.b * s1) / (s1 + s2);\n}\nP proj(const L &l, const P &p) {\n\treturn l.a + (l.b - l.a) * (dot(p - l.a, l.b - l.a) / (l.b - l.a).len2());\n}\n\nint main() {\n\tstd::ios::sync_with_stdio(0);\n\tstd::cin.tie(0);\n\tL l;\n\tl.read();\n\tint q;\n\tcin >> q;\n\tcout << setiosflags(ios::fixed);\n\tcout << setprecision(10);\n\twhile(q--) {\n\t\tP p;\n\t\tp.read();\n\t\tP res = proj(l, p);\n\t\tcout << res.x << \" \" << res.y << endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <iomanip>\nusing namespace std;\n\n//ノルム\ndouble norm(double x, double y){\n    return x*x + y*y;\n}\n//内積\ndouble dot(double x1, double y1, double x2, double y2){\n    return x1*x2 + y1*y2;\n}\n\nint main(){\n    double xp1,yp1,xp2,yp2;\n    int q;\n\n    //標準入力\n    cin >> xp1;\n    cin >> yp1;\n    cin >> xp2;\n    cin >> yp2;\n    cin >> q;\n\n    double xv = xp2 - xp1;\n    double yv = yp2 - yp1;\n    double vnorm = norm(xv, yv);\n\n    for(int i=0; i<q; i++){\n        double xp,yp;\n        cin >> xp;\n        cin >> yp;\n\n        double xu = xp - xp1;\n        double yu = yp - yp1;\n\n        double uvdot = dot(xv,yv,xu,yu);\n        double x = double(xp1) + uvdot/vnorm*double(xv);\n        double y = double(yp1) + uvdot/vnorm*double(yv);\n\n        std::cout << setprecision(14) << x << \" \" << y << \"\\n\";\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <typename T>\nstruct point {\n    T x;\n    T y;\n\n    point(T x = 0, T y = 0) : x(x), y(y) {}\n\n    friend ostream& operator<<(ostream& os, const point p) {\n        os << p.x << \" \" << p.y;\n        return os;\n    }\n};\n\ntemplate <typename T>\nstruct vec {\n    T x;\n    T y;\n\n    vec(T x, T y) : x(x), y(y) {}\n\n    vec(point<T> a) {\n        x = a.x;\n        y = a.y;\n    }\n    \n    vec(point<T> a, point<T> b)  {\n        x = b.x - a.x;\n        y = b.y - a.y;\n    }\n\n    double magnitude() {\n        return sqrt(x * x + y * y);\n    }\n};\n\ntemplate <typename T>\nvec<T> scale(vec<T> v, double mag) {\n    return vec<T>(v.x * mag, v.y * mag);\n}\n\ntemplate <typename T>\nT dot_product(vec<T> u, vec<T> v) {\n    return u.x * v.x + u.y * v.y;\n}\n\ntemplate <typename T>\npoint<T> translate(point<T> p, vec<T> v) {\n    return point<T>(p.x + v.x, p.y + v.y);\n}\n\nint main() {\n\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n\n    point<double> p1(x1, y1);\n    point<double> p2(x2, y2);\n\n    vec<double> v(p1, p2);\n\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        double x, y;\n        cin >> x >> y;\n\n        point<double> p(x, y);\n\n        vec<double> u(p1, p);\n\n        double len = dot_product(u, v) / v.magnitude() / v.magnitude();\n\n        vec<double> vec_q = scale(v, len);\n\n        point<double> q(vec_q.x, vec_q.y);\n\n        point<double> ans = translate(q, vec<double>(point<double>(0, 0), p1));\n\n        cout << ans << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\nstruct Point {\n    double x, y;\n    Point() {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) const { return Point(k * x, k * y); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n};\ndouble dot(const Point& a, const Point& b) { return a.x * b.x + a.y * b.y; }\ndouble cross(const Point& a, const Point& b) { return a.x * b.y - a.y * b.x; }\ndouble norm(const Point& a) { return sqrt(dot(a, a)); }\nPoint rot90(const Point& p) { return Point(p.y, -p.x); } // 時計回りに90度回転 \nostream& operator<<(ostream& os, const Point& p) { return os << \"(\" << p.x << \",\" << p.y << \")\"; }\n\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(const Point& a, const Point& b) : a(a), b(b) {}\n};\n\nPoint projection(const Line& l, const Point& p) {\n    Point u = (p - l.a), v = (l.b - l.a);\n    return l.a + (v / norm(v)) * (dot(u, v) / norm(v));\n}\n\nint main() {\n    Line l;\n    scanf(\"%lf %lf %lf %lf\\n\", &l.a.x, &l.a.y, &l.b.x, &l.b.y);\n    int Q; scanf(\"%d\\n\", &Q);\n    for (int i = 0; i < Q; i++) {\n        Point p; scanf(\"%lf %lf\\n\", &p.x, &p.y);\n        Point x = projection(l, p);\n        printf(\"%.12lf %.12lf\\n\", x.x, x.y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <numeric>\n#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\n#include <iomanip>\nusing namespace std;\ntypedef vector<double> VecD;\n#define rep(n) for(int i=0;i<n;i++)\n#define PB push_back\n\nclass Point{\nfriend const double operator*(const Point &, const Point &);\nfriend const Point operator*(const double, const Point &);\nfriend const Point operator*(const Point &, const double);\nfriend const Point operator+(const Point &, const Point &);\nfriend const Point operator+(const double, const Point &);\nfriend const Point operator+(const Point &, const double);\nfriend const Point operator-(const Point &);\nfriend const Point operator-(const Point &, const Point &);\nfriend const Point operator-(const double, const Point &);\nfriend const Point operator-(const Point &, const double);\n\npublic:\n\tPoint(){};\n\tPoint(VecD v){\n\t\tpoint = v;\n\t}\n\tVecD point;\n};\n\nconst double operator*(const Point &p0, const Point &p1){ return inner_product( p0.point.begin(), p0.point.end(), p1.point.begin(), 0); }\nconst Point operator*(const double a, const Point &p1){\n\tVecD v;\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++) v.PB(*iter1 * a);\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator* (const Point &p, const double a){return a*p;}\nconst Point operator+(const Point &p0, const Point &p1){\n\tVecD v;\n\tVecD::const_iterator iter0 = p0.point.begin();\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++){\n\t\tv.PB(*iter0 + *iter1);\n\t\titer0++;\n\t}\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator+(const double a, const Point &p1){\n\tVecD v;\n\tfor(VecD::const_iterator iter1=p1.point.begin();iter1!=p1.point.end();iter1++){\n\t\tv.PB(*iter1 + a);\n\t}\n\tconst Point p(v);\n\treturn p;\n}\nconst Point operator+(const Point &p1, const double a){return a+p1;}\nconst Point operator-(const Point &p1){return (-1)*p1;}\nconst Point operator-(Point &p0, Point &p1){ return p0+(-p1); }\nconst Point operator-(double a, Point &p1){ return a+(-p1); }\nconst Point operator-(Point &p1, double a){return (-a)+p1;}\n\nconst Point projection(const Point &p1, const Point &p2){\n\t// cout << p1*p2 << endl;\n\treturn ((p1*p2) / (p1*p1)) * p1;\n}\n\nint main(void){\n\n\tdouble xp0, yp0, xp1, yp1; cin>>xp0>>yp0>>xp1>>yp1;\n\tint q; cin >> q;\n\tVecD v0; v0.PB(xp0); v0.PB(yp0); Point p0(v0);\n\tVecD v1; v1.PB(xp1); v1.PB(yp1); Point p1(v1);\n\tp1 = p1-p0;\n\t// cout << p1.point[0] << \" \" << p1.point[1] << endl;\n\trep(q){\n\t\tdouble xp2,yp2; cin>>xp2>>yp2;\n\t\tVecD v2; v2.PB(xp2); v2.PB(yp2); Point p2(v2);\n\t\tp2 = p2-p0;\n\t\tPoint ret = projection(p1, p2);\n\t\tret = ret+p0;\n\t\tcout << fixed << setprecision(10) << ret.point[0] << \" \" << fixed << setprecision(10) << ret.point[1] << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<iostream>\n#include<complex>\n#include<cmath>\n\nusing namespace std;\n\nconst double EPS=1e-8;\nconst double INF=1e9;\n\ntypedef complex<double>Point;\n\n#define EQ(a,b) (fabs((a)-(b))<EPS)\n#define EQV(a,b) (abs((a)-(b))<EPS)\nstruct Segment{\n    Point p1,p2;\n    Segment(Point p1=Point(),Point p2=Point()):p1(p1),p2(p2){}\n};\n\ntypedef Segment Line;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\ntypedef vector<Point>Polygon;\n\ndouble dot(Point a,Point b){\n    return real(a)*real(b)+imag(a)*imag(b);\n}\n\ndouble cross(Point a,Point b){\n    return real(a)*imag(b)-imag(a)*real(b);\n}\n\nbool isOrthogonal(Point a,Point b){\n    return EQ(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Line l1,Line l2){\n    return isOrthogonal(l1.p2-l1.p1,l2.p2-l2.p1);\n}\n\nbool isParallel(Point a,Point b){\n    return EQ(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Line l1,Line l2){\n    return isParallel(l1.p2-l1.p1,l2.p2-l2.p1);\n}\n\nPoint project(Line l,Point p){\n    Point base=l.p2-l.p1;\n    double r=dot(p-l.p1,base)/norm(base);\n    return l.p1+base*r;\n}\n\nPoint reflect(Line l,Point p){\n    return p+(project(l,p)-p)*2.0;\n}\nint main(){\n    Line L;\n    scanf(\"%lf%lf\",&L.p1.real(),&L.p1.imag());\n    scanf(\"%lf%lf\",&L.p2.real(),&L.p2.imag());\n\n    int N;\n    scanf(\"%d\",&N);\n    while(N--){\n        Point P;\n        scanf(\"%lf%lf\",&P.real(),&P.imag());\n        Point prj=project(L,P);\n        printf(\"%f %f\\n\",prj.real(),prj.imag());\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n#include <iomanip>\nusing namespace std;\n\nint main()\n{\n\tdouble x1, x2, y1, y2;\n\tint q;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++)\n\t{\tdouble x3, y3;\n\t\tcin >> x3 >> y3;\n\t\tdouble l_d = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n\t\tdouble l = (x3 - x1) * ((x2 - x1) / l_d) + (y3 - y1) * ((y2 - y1) / l_d);\n\t\tdouble x4 = x1 + l * (x2 - x1) / l_d;\n\t\tdouble y4 = y1 + l * (y2 - y1) / l_d;\n\t\tcout << fixed\n\t\t\t << setprecision(10)\n\t\t\t << x4 << \" \" << y4\n\t\t\t << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#include<vector>\n#include<iomanip>\n\nusing namespace std;\n\ntypedef complex<double> P;\n\n#define EPS 1e-9\n#define shosu(x) fixed<<setprecision(x)\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\nstruct C{\n  P c;double r;\n  C(const P &c,double r):c(c),r(r){}\n};\n\nnamespace std{//演算子の定義\n  bool operator < (const P& a,const P& b){\n    return real(a)!= real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b)\n  }\n  bool operator == (const P& a,const P& b){\n    return a.real()==b.real() && a.imag()==b.imag();\n  }\n}\n\ndouble dot(P a,P b){\n  return real(conj(a)*b);\n}\n\ndouble cross(P a,P b){\n  return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c) {//3点の関係性\n  b -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;                               // a--c--b on line\n}\n\nP projection(L l, P p){//pの直線l上の射影\n  double t=dot(p-l[0],l[0]-l[1])/norm(l[0]-l[1]);\n  return l[0]+t*(l[0]-l[1]);\n}\n\nP reflection(L l, P p){//点pの直線lに関して対称な点\n  return p+2.0*(projection(l,p)-p);\n}\n\nbool isOrthogonal(L l1, L l2){//2直線の直交判定\n  return fabs(dot(l1[1]-l1[0],l2[1]-l2[0])) < EPS;\n}\n\nbool isParallel(L l1, L l2){//2直線の平行判定\n  return fabs(cross(l1[1]-l1[0],l2[1]-l2[0])) < EPS;\n}\n\nint main(){\n  double xp1,yp1,xp2,yp2;\n  cin>>xp1>>yp1>>xp2>>yp2;\n  P p1(xp1,yp1), p2(xp2,yp2);\n  L l(p1,p2);\n\n  int q;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    double x,y;\n    cin>>x>>y;\n    P p(x,y);\n    P ans=projection(l,p);\n    cout<<shosu(10)<<ans.real()<<\"  \"<<ans.imag()<<endl;\n\n  }\n  \n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <limits>\n\nint main() {\n  double x1, y1, x2, y2;\n  std::cin >> x1 >> y1 >> x2 >> y2;\n\n  int q;\n  std::cin >> q;\n\n  std::cout << std::fixed;\n  std::cout << std::setprecision(std::numeric_limits<double>::max_digits10);\n  for (int i = 0; i < q; ++i) {\n      double x, y;\n      std::cin >> x >> y;\n\n      double num = -(x2 - x1) * (x1 - x) - (y2 - y1) * (y1 - y);\n      double den = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n      double t = num / den;\n      \n      double u = x1 + t * (x2 - x1);\n      double v = y1 + t * (y2 - y1);\n      std::cout << u << \" \" << v << std::endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\nconst ll INF = 1e18;\nconst int BIG = 1e9 + 555;\n\nstruct Point {\n\tdouble x, y;\n\tPoint(){};\n\tPoint(double _x, double _y) : x(_x), y(_y) {};\n};\n\nPoint operator + (const Point &p, const Point &q){\n\treturn Point(p.x + q.x, p.y + q.y);\n}\n\nPoint operator - (const Point &p, const Point &q){\n\treturn Point(p.x - q.x, p.y - q.y);\n}\n\ndouble operator * (const Point &p, const Point &q){\n\treturn p.x * q.x + p.y * q.y;\n}\n\ndouble dist(const Point &p, const Point &q){\n\treturn sqrt((q - p) * (q - p));\n}\n\nPoint operator * (const Point &p, double k){\n\treturn Point(p.x * k, p.y * k);\n}\n\nPoint projection(const Point &A, const Point &p, const Point &q){\n\tPoint pq = q - p;\n\tPoint pA = A - p;\n\t\n\tdouble K = (pq * pA) / (pq * pq);\n\n\treturn p + pq * K;\n}\n\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.tie(0);\n\n\tcout << setprecision(10) << fixed;\n\n\tPoint p1, p2;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\n\tint q;\tcin >> q;\n\twhile(q--){\n\t\tPoint p;\tcin >> p.x >> p.y;\n\t\tPoint m = projection(p, p1, p2);\n\n\t\tcout << m.x << ' ' << m.y << '\\n'; \n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <math.h>\n#include <string.h>\n#include <stdio.h>\nusing namespace std;\nconst int MAXN = 5000;\nint n, m;\ndouble x1, y1, x2, y2;\nint s[MAXN];\nstruct Point\n{\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n};\nstruct Line\n{\n    Point p1, p2;\n    Line() {}\n    Line(Point p1, Point p2): p1(p1), p2(p2) {}\n\n} lie[MAXN];\n\ntypedef Point Vector;\nVector operator +(Vector A, Vector B)\n{\n    return Vector(A.x + B.x, A.y + B.y);\n}\nVector operator -(Vector A, Vector B)\n{\n    return Vector(A.x - B.x, A.y - B.y);\n}\nVector operator *(Vector A, double p)\n{\n    return Vector(A.x * p, A.y * p);\n}\nVector operator /(Vector A, double p)\n{\n    return Vector(A.x / p, A.y / p);\n}\nVector operator -(Vector A)\n{\n    return  Vector(-A.x, -A.y);\n}\n\ndouble torad(double deg)//角度换弧度\n{\n    return deg / 180 * acos(-1.0);\n}\n\nconst double EPS = 1e-10;\nint dcmp(double x)\n{\n    if(fabs(x) < EPS) return 0;\n    else return x < 0 ? -1 : 1;\n}\n\n//向量点积\ndouble Dot(Vector A, Vector B) \n{ \n    return A.x*B.x + A.y*B.y; \n}\n\n//向量叉积\ndouble Cross(Vector A, Vector B)\n{\n    return A.x * B.y - A.y * B.x;\n}\n\nconst int INF = 1000005;\nint par[INF], ran[INF];\n\n//点在直线上的投影\nPoint GetLineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A+v*(Dot(v, P-A)/Dot(v, v));\n}\n\n\nint main()\n{\n    double x1,y1,x2,y2;\n    cin>>x1>>y1>>x2>>y2;\n    Point p1=Point(x1,y1);\n    Point p2=Point(x2,y2);\n    int n;\n    cin>>n;\n    while(n--)\n    {\n        double x,y;\n        cin>>x>>y;\n        Point p=Point(x,y);\n        Point Pp=GetLineProjection(p,p1,p2);\n        printf(\"%.10f %.10f\\n\",Pp.x,Pp.y);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct vec{double x;double y;};\ndouble naiseki(vec a,vec b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\nint main()\n{\n\tdouble xp1,xp2,yp1,yp2;\n\tcin>>xp1>>yp1>>xp2>>yp2;\n\tint q;cin>>q;\n\tvec base;\n\tbase.x=xp2-xp1;\n\tbase.y=yp2-yp1;\n\tcout<<fixed<<setprecision(10);\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tdouble s,t;\n\t\tcin>>s>>t;\n\t\tvec hypo;\n\t\thypo.x=s-xp1;\n\t\thypo.y=t-yp1;\n\t\tcout<<xp1+base.x*naiseki(hypo,base)/naiseki(base,base)<<\" \";\n\t\tcout<<(double)yp1+base.y*naiseki(hypo,base)/naiseki(base,base)<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<functional>\n#include<vector>\n#include<queue>\n#include<complex>\nusing namespace std;\n#define f(i,n) for(int i=0;i<(int)n;i++)\n#define MOD 1000000009\n#define MIN (1e-10)\ntypedef complex<double> P;\nbool EQ(P a, P b){\n\tif (abs(a.real() - b.real()) < MIN&&abs(a.imag() - b.imag()) < MIN)return true;\n\telse return false;\n}\ndouble dot(P a, P b){\n\treturn{ a.real()*b.real() + a.imag()*b.imag() };\n}\ndouble cross(P a, P b){\n\treturn{ a.real()*b.imag() - a.imag()*b.real() };\n}\nP insec(P a1, P a2, P b1, P b2){\n\tP a, b;\n\ta = a2 - a1;\n\tb = b2 - b1;\n\treturn a1 + (a*cross(b, b1 - a1) / cross(b, a));\n}\nvoid print(double x,int k){\n\tif (x < 0){\n\t\tprintf(\"-\");\n\t\tx = -x;\n\t}\n\tprintf(\"%d.\", (int)x);\n\tx = x - (double)(int)x;\n\tf(i, k){\n\t\tx = x * 10;\n\t\tprintf(\"%d\", (int)x);\n\t\tx = x - (double)(int)x;\n\t}\n\treturn;\n}\n\nint main(void){\n\tP a, b, c;\n\tP d, e, f;\n\tdouble x, y;\n\tint n;\n\tscanf(\"%lf %lf\", &x, &y);\n\ta = P(x, y);\n\tscanf(\"%lf %lf\", &x, &y);\n\tb = P(x, y);\n\tf = (b - a)*P(0, 1);\n\tscanf(\"%d\", &n);\n\tf(i, n){\n\t\tscanf(\"%lf %lf\", &x, &y);\n\tc = P(x, y);\n\td = c + f;\n\te = insec(a, b, c, d);\n\tprint(e.real(),10);\n\tprintf(\" \");\n\tprint(e.imag(),10);\n\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nstruct CWW{\n    CWW(){\n        cin.tie(0);\n        ios_base::sync_with_stdio(0);\n        cout<<fixed<<setprecision(15);\n    }\n}STAR;\n\nusing D=double;\n\nconst D EPS=1e-8;\nconst D INF=1e9;\n\nusing Point=complex<D>;\n\nstruct Segment{\n    Point p1,p2;\n    Segment(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Line{\n    Point p1,p2;\n    Line(const Point &p1=Point(),const Point &p2=Point()):p1(p1),p2(p2){}\n};\n\nstruct Circle{\n    Point c;\n    D r;\n    Circle(const Point &c=Point(),const D &r=0.0):c(c),r(r){}\n};\n\nusing Polygon=vector<Point>;\n\nistream& operator>>(istream &is,Point &a){\n    D x,y;\n    is>>x>>y;\n    a=Point(x,y);\n    return is;\n}\n\nostream& operator<<(ostream& os,Point &a){\n    os<<real(a)<<\" \"<<imag(a);\n    return os;\n}\n\nistream& operator>>(istream &is,Line &l){\n    Point p1,p2;\n    is>>p1>>p2;\n    l=Line(p1,p2);\n    return is;\n}\n\n\n\nD dot(const Point &a,const Point &b){\n    return real(a)*real(b)+imag(a)*imag(b);\n}\n\nD cross(const Point &a,const Point &b){\n    return real(a)*imag(b)-imag(a)*real(b);\n}\n\nPoint projection(const Point &a,const Point &b){\n    return a*real(b/a);\n}\n\n\n\nint main(){\n    Line L;\n    cin>>L;\n    int Q;cin>>Q;\n    while(Q--){\n        Point p;\n        cin>>p;\n\n        Point w=L.p1+projection(L.p2-L.p1,p-L.p1);\n        cout<<w<<endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\ntypedef long long ll;\n\nconst double EPS = 1e-9;\n\nint sign(double x) {\n    if (fabs(x) < EPS) {\n        return 0;\n    } else if (x > 0) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nint dcmp(double x, double y) {\n    return sign(x - y);\n}\n\nstruct Vector;\ntypedef Vector Point;\nstruct Line;\n\nstruct Vector {\n    double x;\n    double y;\n\n    explicit Vector(double x = 0, double y = 0);\n\n    Vector operator+(const Vector &rhs) const;\n    Vector operator-() const;\n    Vector operator-(const Vector &rhs) const;\n    Vector operator*(double d) const;\n    Vector operator/(double d) const;\n\n    bool operator==(const Vector &rhs) const;\n    bool operator!=(const Vector &rhs) const;\n    bool operator<(const Vector &rhs) const;\n    bool operator>(const Vector &rhs) const;\n    bool operator<=(const Vector &rhs) const;\n    bool operator>=(const Vector &rhs) const;\n\n    friend std::ostream &operator<<(std::ostream &os, const Vector &vector);\n\n    double dot(const Vector &rhs) const;\n    double cross(const Vector &rhs) const;\n    double length() const;\n    double angle() const;\n    double angle(const Vector &rhs) const;\n    Vector rotate(double rad) const;\n    Vector normal() const;\n    double getDistanceTo(const Point &rhs) const;\n    double getDistanceTo(const Line &rhs) const;\n};\n\nstruct Line {\n    Point a;\n    Point b;\n\n    Line(double x1 = 0, double y1 = 0, double x2 = 0, double y2 = 0);\n    Line(const Point &a = Point(), const Point &b = Point());\n\n    double getDistanceTo(const Point &rhs) const;\n    Point getIntersection(const Line &rhs) const;\n    Point getProjection(const Point &rhs) const;\n    bool contains(const Point &rhs) const;\n    bool intersects(const Line &rhs) const;\n};\n\nVector::Vector(double x, double y) : x(x), y(y) {}\n\nVector Vector::operator+(const Vector &rhs) const {\n    return Vector(x + rhs.x, y + rhs.y);\n}\n\nVector Vector::operator-() const {\n    return Vector(-x, -y);\n}\n\nVector Vector::operator-(const Vector &rhs) const {\n    return *this + -rhs;\n}\n\nVector Vector::operator*(double d) const {\n    return Vector(x * d, y * d);\n}\n\nVector Vector::operator/(double d) const {\n    return Vector(x / d, y / d);\n}\n\n\nbool Vector::operator==(const Vector &rhs) const {\n    return dcmp(x, rhs.x) == 0 && dcmp(y, rhs.y) == 0;\n}\n\nbool Vector::operator!=(const Vector &rhs) const {\n    return !(rhs == *this);\n}\n\nbool Vector::operator<(const Vector &rhs) const {\n    if (dcmp(x, rhs.x) != 0) {\n        return dcmp(x, rhs.x) < 0;\n    } else {\n        return dcmp(y, rhs.y) < 0;\n    }\n}\n\nbool Vector::operator>(const Vector &rhs) const {\n    return rhs < *this;\n}\n\nbool Vector::operator<=(const Vector &rhs) const {\n    return !(rhs < *this);\n}\n\nbool Vector::operator>=(const Vector &rhs) const {\n    return !(*this < rhs);\n}\n\nstd::ostream &operator<<(std::ostream &os, const Vector &vector) {\n    os << \"(\" << vector.x << \", \" << vector.y << \")\";\n    return os;\n}\n\ndouble Vector::dot(const Vector &rhs) const {\n    return x * rhs.x + y * rhs.y;\n}\n\ndouble Vector::cross(const Vector &rhs) const {\n    return x * rhs.y - rhs.x * y;\n}\n\ndouble Vector::length() const {\n    return sqrt(dot(*this));\n}\n\ndouble Vector::angle() const {\n    return atan2(y, x);\n}\n\ndouble Vector::angle(const Vector &rhs) const {\n    return acos(dot(rhs) / length() / rhs.length());\n}\n\nVector Vector::rotate(double rad) const {\n    return Vector(x * cos(rad) - y * sin(rad), x * sin(rad) + y * cos(rad));\n}\n\nVector Vector::normal() const {\n    double l = length();\n    return Vector(-y / l, x / l);\n}\n\ndouble Vector::getDistanceTo(const Point &rhs) const {\n    return sqrt(pow(x - rhs.x, 2) + pow(y - rhs.y, 2));\n}\n\ndouble Vector::getDistanceTo(const Line &rhs) const {\n    return rhs.getDistanceTo(*this);\n}\n\nLine::Line(double x1, double y1, double x2, double y2) : a(x1, y1), b(x2, y2) {}\n\nLine::Line(const Point &a, const Point &b) : a(a), b(b) {}\n\ndouble Line::getDistanceTo(const Point &rhs) const {\n    const Vector &v1 = b - a;\n    const Vector &v2 = rhs - a;\n    return fabs(v1.cross(v2) / v1.length());\n}\n\nPoint Line::getIntersection(const Line &rhs) const {\n    if (!intersects(rhs)) {\n        return Point();\n    }\n    Vector u = a - rhs.a;\n    Vector v = b - a;\n    Vector w = rhs.b - rhs.a;\n    double t = w.cross(u) / v.cross(w);\n    return a + v * t;\n}\n\nPoint Line::getProjection(const Point &rhs) const {\n    const Vector &v = b - a;\n    return a + v * (v.dot(rhs - a) / v.dot(v));\n}\n\nbool Line::contains(const Point &rhs) const {\n    Point p1 = a;\n    Point p2 = b;\n    if (p1 == rhs) {\n        p1 = p1 + (p2 - p1) * 2;\n    } else if (p2 == rhs) {\n        p2 = p2 + (p1 - p2) * 2;\n    }\n    return sign((p2 - rhs).cross(p1 - rhs)) == 0;\n}\n\nbool Line::intersects(const Line &rhs) const {\n    return dcmp((b - a).angle(), (rhs.b - rhs.a).angle()) != 0;\n}\n\n\nint main() {\n//    freopen(\"data.in\", \"r\", stdin);\n\n    int q;\n    int x1, y1;\n    int x2, y2;\n    while (~scanf(\"%d%d%d%d\", &x1, &y1, &x2, &y2)) {\n        Line line(x1, y1, x2, y2);\n        scanf(\"%d\", &q);\n        while (q--) {\n            int x, y;\n            scanf(\"%d%d\", &x, &y);\n            const Point &point = line.getProjection(Point(x, y));\n            printf(\"%.10lf %.10lf\\n\", point.x, point.y);\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\nusing ll = long long;\nusing P = pair<ll, ll>;\nconst long double PI = acos(-1.0L);\nll GCD(ll a, ll b) { return b?GCD(b, a%b):a; }\nll LCM(ll a, ll b) { return a/GCD(a, b)*b; }\n\n#define CP complex<double>\n\n#define EPS (1e-10)     // 許容する誤差ε\n#define EQ(a, b) (abs((a)-(b)) < EPS)   // 2つのスカラーが等しいかどうか\n#define EQV(a, b) (EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()))    // 2つのベクトルが等しいかどうか\n\n// double length = abs(a);     // ベクトルaの絶対値\n// double distance = abs(a-b);     // 2点a,b間の距離\n// CP b = a/abs(a);    // ベクトルaの単位ベクトル\n// CP n1 = a*CP(0,+1); CP n2 = a*CP(0,-1);  // ベクトルaの法線ベクトル\n// CP un1 = (a*CP(0,+1)/abs(a)); CP un2 = (a*CP(0,-1)/abs(a));  // ベクトルaの単位法線ベクトル\n\n// 内積(dot product) : a・b = |a||b|cosΘ\ndouble dot(CP a, CP b) {\n    return (a.real()*b.real() + a.imag()*b.imag());\n}\n\n// 外積(cross product) : a×b = |a||b|sinΘ\ndouble cross(CP a, CP b) {\n    return (a.real()*b.imag() - a.imag()*b.real());\n}\n\n// 2直線の直交判定 : a⊥b ⇔ dot(a,b) = 0\nint is_orthogonal(CP a1, CP a2, CP b1, CP b2) {\n    return EQ(dot(a1-a2, b1-b2), 0.0);\n}\n\n// 2直線の平行判定 : a//b ⇔ cross(a,b) = 0\nint is_parallel(CP a1, CP a2, CP b1, CP b2) {\n    return EQ(cross(a1-a2, b1-b2), 0.0);\n}\n\n// 点cが直線a,b上にあるかないか\nint is_point_on_line(CP a, CP b, CP c) {\n    return EQ(cross(b-a, c-a), 0.0);\n}\n\n// 点cが線分a,b上にあるかないか\nint is_point_on_lines(CP a, CP b, CP c) {\n    // |a-c|+|c-b| <= |a-b|なら線分上\n    return (abs(a-c)+abs(c-b) < abs(a-b)+EPS);\n}\n\n// 点a,bを通る直線と点cとの距離\ndouble distance_line_p(CP a, CP b, CP c) {\n    return abs(cross(b-a, c-a))/abs(b-a);\n}\n\n// 点a,bを端点とする線分と点cとの距離\ndouble distance_lines_p(CP a, CP b, CP c) {\n    if(dot(b-a, c-a) < EPS) return abs(c-a);\n    if(dot(a-b, c-b) < EPS) return abs(c-b);\n    return abs(cross(b-a, c-a))/abs(b-a);\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交差判定\nint is_intersected_lines(CP a1, CP a2, CP b1, CP b2) {\n    return (cross(a2-a1, b1-a1)*cross(a2-a1, b2-a1) < EPS) &&\n           (cross(b2-b1, a1-b1)*cross(b2-b1, a2-b1) < EPS);\n}\n\n// a1,a2を端点とする線分とb1,b2を端点とする線分の交点計算\nCP intersection_lines(CP a1, CP a2, CP b1, CP b2) {\n    CP b = b2-b1;\n    double d1 = abs(cross(b, a1-b1));\n    double d2 = abs(cross(b, a2-b1));\n    double t = d1/(d1+d2);\n    return a1+(a2-a1)*t;\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交差判定\nint is_intersected_line(CP a1, CP a2, CP b1, CP b2) {\n    return !EQ(cross(a1-a2, b1-b2), 0.0);\n}\n\n// a1,a2を通る直線とb1,b2を通る直線の交点計算(平行ではない前提)\nCP intersection_line(CP a1, CP a2, CP b1, CP b2) {\n    CP a = a2-a1; CP b = b2-b1;\n    return a1 + a*cross(b, b1-a1)/cross(b, a);\n}\n\n// a1,a2を通る直線に対する点pの射影\nCP projection(CP s, CP t, CP p) {\n    if(EQV(s, t)) return s;\n    CP base = t-s;\n    return s + base*(dot(p-s, base)/norm(base));\n}\n\nint main() {\n    double ax, ay, bx, by;\n    cin >> ax >> ay >> bx >> by;\n    CP p1(ax, ay), p2(bx, by);\n    int q; cin >> q;\n    while(q--) {\n        double px, py; cin >> px >> py;\n        CP p(px, py);\n        CP ans = projection(p1, p2, p);\n        cout << setprecision(14) << ans.real() << \" \" << ans.imag() << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\ntypedef long double ld;\n\nld dissq(double x1, double y1, double x2, double y2)\n{\n\treturn (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2);\n}\n\nint main()\n{\n\tld x1, y1, x2, y2;\n\tstd::cin >> x1 >> y1 >> x2 >> y2;\n\tint q; std::cin >> q;\n\tfor (int i=0; i<q; i++) {\n\t\tld x0, y0;\n\t\tstd::cin >> x0 >> y0;\n\t\tld s = (dissq(x0,y0,x1,y1) + dissq(x1,y1,x2,y2) - dissq(x0,y0,x2,y2)) / (2.0 * dissq(x1,y1,x2,y2));\n\t\tld x = (1.0 - s) * x1 + s * x2;\n\t\tld y = (1.0 - s) * y1 + s * y2;\n\t\tstd::cout << std::setprecision(8) << std::fixed << x << \" \" << y << std::endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <complex>\n#include <vector>\n#include <cstdio>\nusing namespace std;\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n  bool operator < (const P& a, const P& b) {\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\ndouble cross(const P& a, const P& b) {\n  return imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {\n  return real(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a); push_back(b);\n  }\n};\n\ntypedef vector<P> G;\n\nstruct C {\n  P p; double r;\n  C(const P &p, double r) : p(p), r(r) { }\n};\n\nint main(){\n\tdouble x,y;\n\tint q;\n\tscanf(\"%lf%lf\",&x,&y);P p0(x,y);\n\tscanf(\"%lf%lf%d\",&x,&y,&q);P p1(x,y);\n\tfor(;q--;){\n\t\tscanf(\"%lf%lf\",&x,&y);P p(x,y);\n\t\tP t=(p1-p0)*dot(p1-p0,p-p0)/norm(p1-p0)+p0;\n\t\tprintf(\"%.9f %.9f\\n\",real(t),imag(t));\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <vector>\n#define EPS (1e-10)\n#define equals(a,b) (fabs(a)-fabs(b)<EPS)\n\n\nusing namespace std;\n\nclass Point{\npublic:\n    double x,y;\n\n    Point(double x=0,double y=0):x(x),y(y){}\n\n    Point operator + (Point p) { return Point(x+p.x,y+p.y); }///这里注意，没有$\n    Point operator - (Point p) { return Point(x-p.x,y-p.y); }\n    Point operator * (double a) { return Point(x*a,y*a); }\n    Point operator / (double a) { return Point(x/a,y/a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x*x+y*y; }\n\n    bool operator < (const Point &p) const {\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n    }\n};\n\ntypedef Point Vector;\n///Program 16.3 表示线段的结构体\nstruct Segment{\n    Point p1,p2;\n};\n\n///Program 16.4 表示直线的结构体\ntypedef Segment Line;\n\n///内积\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n///外积\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\nPoint project(Segment s,Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot((p-s.p1),base)/base.norm();\n    return s.p1 + base*r;\n}\nint main(){\n    Point p1,p2;\n    Segment s;\n    scanf(\"%lf%lf%lf%lf\",&s.p1.x,&s.p1.y,&s.p2.x,&s.p2.y);\n    int q;\n    scanf(\"%d\",&q);\n    for(int i=0;i<q;i++){\n        Point tmp;\n        scanf(\"%lf%lf\",&tmp.x,&tmp.y);\n        Point ans=project(s,tmp);\n        printf(\"%.10f %.10f\\n\",ans.x,ans.y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(ll i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(arg),key)-begin(arg)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n\nusing namespace std;\n\nusing R=long double;\nconst R EPS = 1E-11;\nconst R INF = 1E40;\nconstexpr R PI = acos(R(-1));\ninline int sgn(const R& r){ return (r > EPS) - (r < -EPS);}\n\nusing P=complex<R>;\nconstexpr P O = P(0,0);\n#define X real()\n#define Y imag()\n\nistream& operator >> (istream& is,P& p){ R x,y; is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << p.X << \" \" << p.Y; return os;}\n\n//?????? dot ?????? det\ninline R dot(P o,P a,P b){a-=o,b-=o; return real(conj(a)*b);}\ninline R det(P o,P a,P b){a-=o,b-=o; return imag(conj(a)*b);}\n\nusing L=struct{P s,t;};\n\n// ?°???± verify AOJ CGL_1_A\nP proj(P o,P a,P b){ a-=o,b-=o; return a*(b/a).X;}\nP proj(L l,P p){ return l.s+proj(l.s,l.t,p);}\n// ????°? verify AOJ CGL_1_B\nP refl(L l,P p){ return R(2.0)*proj(l,p)-p;}\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {//???a??¨???b???????????????????????????\n\tif (sgn(det(o,a,b)) > 0) return LEFT;    // counter clockwise\n\tif (sgn(det(o,a,b)) < 0) return RIGHT;   // clockwise\n\tif (sgn(dot(o,a,b)) < 0) return BACK;    // b--base--a on line\n\tif (sgn(norm(a)-norm(b)) < 0) return FRONT;   // base--a--b on line\n\treturn ON;// base--b--a on line  a??¨b????????????????????????\n}\n\nint main(void){\n\tP a,b,p;\n\tint n;\n\tcin >> a >> b >> n;\n\tL l={a,b};\n\tcout.precision(20);\n\trep(i,n){\n\t\tcin >> p;\n\t\tP ans=proj(l,p);\n\t\tcout << fixed << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <bitset>\n#include <cmath>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <limits>\n#include <map>\n#include <queue>\n#include <set>\n#include <tuple>\n#include <vector>\n\nusing namespace std;\n\n#define rep(i, n) for (int64_t i = 0; i < (n); i++)\n#define irep(i, n) for (int64_t i = 0; i <= (n); i++)\n#define rrep(i, n) for (int64_t i = (n)-1; i >= 0; i--)\n#define rirep(i, n) for (int64_t i = n; i >= 0; i--)\n\nclass Vec;\nVec operator/(const Vec& v, const double& divisor);\nVec operator*(const double& scale, const Vec& v);\n\nclass Vec {\n  using F = double;\n  vector<F> container;\n\n public:\n  Vec(size_t size) : container(size) {}\n  Vec(initializer_list<F> elements)\n      : container(elements.begin(), elements.end()) {}\n  size_t dim() const { return container.size(); }\n  F& operator[](const size_t size) { return container.at(size); }\n  const F& operator[](const size_t size) const { return container.at(size); }\n  Vec operator+(const Vec& other) const {\n    Vec ret(*this);\n    for (size_t i = 0; i < dim(); i++) ret[i] += other[i];\n    return ret;\n  }\n  Vec operator-(const Vec& other) const { return (*this) + (-other); }\n  Vec operator-() const { return -1.0 * (*this); }\n  F inner(const Vec& other) const {\n    F acc = 0;\n    for (size_t i = 0; i < dim(); i++) {\n      acc += (*this)[i] * other[i];\n    }\n    return acc;\n  }\n  F norm() const { return sqrt(inner(*this)); }\n  Vec unit() const { return (*this) / this->norm(); }\n  F ccw(const Vec& other) const {\n    return (*this)[0] * other[1] - other[0] * (*this)[1];\n  }\n};\nVec operator/(const Vec& v, const double& divisor) { return 1.0 / divisor * v; }\nVec operator*(const double& scale, const Vec& v) {\n  Vec ret(v);\n  for (size_t i = 0; i < ret.dim(); i++) ret[i] *= scale;\n  return ret;\n}\n\nclass Line {\n  Vec m_grad;\n  double m_bias;\n\n public:\n  Line(const Vec& grad, double bias) : m_grad(grad), m_bias(bias) {}\n  static Line fromPoints(const Vec& p0, const Vec& p1) {\n    Vec d = p0 - p1;\n    Vec g({-d[1], d[0]});\n    return Line(g, g.inner(p0));\n  }\n  const Vec& grad() const { return m_grad; }\n  double bias() const { return m_bias; }\n  double dist(const Vec& p) const {\n    return abs(m_grad.inner(p) - m_bias) / m_grad.norm();\n  }\n  Vec projection(const Vec& p) const {\n    const Vec g = m_grad.unit();\n    const Vec h({-g[1], g[0]});\n    return m_bias / m_grad.norm() * g + h.inner(p) * h;\n  }\n};\n\nint main() {\n  double x0, y0, x1, y1;\n  cin >> x0 >> y0 >> x1 >> y1;\n\n  const Line line = Line::fromPoints(Vec{x0, y0}, Vec{x1, y1});\n\n  int q;\n  cin >> q;\n  rep(i, q) {\n    double x, y;\n    cin >> x >> y;\n\n    const Vec v = line.projection(Vec({x, y}));\n    cout << fixed << setprecision(10) << v[0] << \" \" << v[1] << \"\\n\";\n  }\n  cout.flush();\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <math.h>\n#include <vector>\n#include <stdio.h>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    double x, y;\n    \n    Vector() {\n        x = 0.0;\n        y = 0.0;\n    }\n    \n    Vector(double nx, double ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void set(double nx, double ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void setX(double nx) {\n        x = nx;\n    }\n    \n    void setY(double ny) {\n        y = ny;\n    }\n    \n    // ベクトルの大きさを求める\n    double norm() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 内積を求める\n    double dot(const Vector& vec) {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 角度を求める\n    double getAngle(const Vector& vec) {\n        double mag = norm() * vec.norm();\n        if (mag == 0.0) {\n            return 0.0;\n        } else {\n            return dot(vec) / mag;\n        }\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() {\n        Vector v;\n        double mag = norm();\n        if (mag == 0.0) {\n            v.set(0.0, 0.0);\n        } else {\n            v.set(x / mag, y / mag);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (double f) {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) {\n        Vector v;\n        if (vec.x == 0.0) {\n            v.setX(0.0);\n        } else {\n            v.setX(x / vec.x);\n        }\n        \n        if (vec.y == 0.0) {\n            v.setY(0.0);\n        } else {\n            v.setY(y / vec.y);\n        }\n        return v;\n    }\n    \n    Vector operator / (double f) {\n        Vector v;\n        if (f == 0.0) {\n            v.set(0.0, 0.0);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.0) {\n            x = 0.0;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.0) {\n            y = 0.0;\n        } else {\n            y /= vec.y;\n        }\n    }\n};\n\n\nint main() {\n    double a,b,c,d;\n    cin >> a >> b >> c >> d;\n    Vector vec1(a, b);\n    Vector vec2(c, d);\n    Vector vec(vec2 - vec1);\n    \n    int n;\n    cin >> n;\n    \n    vector<Vector> results;\n    for (int i = 0; i < n; i++) {\n        double x, y;\n        cin >> x >> y;\n        Vector p(x-vec1.x, y - vec1.y);\n        \n        double cos = p.getAngle(vec);\n        double length = p.norm() * cos;\n        \n        results.push_back(vec.getUnit() * length);\n    }\n    \n    for (int i = 0; i < results.size(); i++) {\n        printf(\"%.10f %.10f\\n\", results[i].x, results[i].y);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <climits>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\n//???\nclass Point {\npublic:\n    double x, y;\n    \n    Point (double x = 0, double y = 0):x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(a * x, a * y);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    \n    double norm(){return x*x + y*y;};\n    double absolute(){return sqrt(norm());};\n    \n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    \n};\ntypedef Point Vector;                               //????????????\ntypedef struct Segment{Point p1, p2;}Segment;       //??????\n//????????????a????????????\ndouble norm(Vector a){\n    return a.x * a.x + a.y * a.y;\n}\n//????????????a,b?????????\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\n//??????s(p1p2)???????????????p????°???±\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n\nint main(){\n    \n    int x0, y0, x1, y1, x2, y2;\n    \n    int q;\n    \n    cin >> x0 >> y0 >> x1 >> y1;\n    cin >> q;\n    \n    Segment s = {Point(x0, y0), Point(x1, y1)};\n    \n    for (int i = 0; i < q; i++) {\n        cin >> x2 >> y2;\n        Point p2 = Point(x2, y2);\n        \n        Point ans = project(s, p2);\n        \n        printf(\"%.8lf %.8lf\\n\", ans.x, ans.y);\n    }\n    \n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS 1e-10\nbool eq(double a, double b) {return fabs(a - b) < EPS;}\n\nstruct Point {\n    double x, y;\n    Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}\n    Point operator + (Point &p);\n    Point operator - (Point &p);\n    Point operator * (double k);\n    Point operator / (double k);\n    bool operator == (const Point &p) const;\n    double norm();\n    double abs();\n    void print();\n} typedef Vec;\n\nstruct Segment {\n    Point p1, p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Segment(double x1, double y1, double x2, double y2) : p1(Point(x1, y1)), p2(Point(x2, y2)) {}\n} typedef Line;\n\nstruct Circle {\n    Point o; double r;\n    Circle(Point o, double r) : o(o), r(r) {}\n    Circle(double x, double y, double r) : o(Point(x, y)), r(r) {}\n};\n\ndouble norm(Vec a);\ndouble abs(Vec a);\n\ndouble dot(Vec a, Vec b);\ndouble cross(Vec a, Vec b);\n\nbool isOrthogonal(Vec a, Vec b);\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2);\nbool isOrthogonal(Segment s1, Segment s2);\n\nbool isParallel(Vec a, Vec b);\nbool isParallel(Point a1, Point a2, Point b1, Point b2);\nbool isParallel(Segment s1, Segment s2);\n\nPoint project(Segment s, Point p);\n\nint main() {\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Line l(x1, y1, x2, y2);\n    int q; cin >> q;\n    while(q--) {\n        double x, y;\n        cin >> x >> y;\n        auto p = project(l, Point(x, y));\n        p.print();\n    }\n    return 0;\n}\n\nPoint Point::operator + (Point &p) {return Point(x + p.x, y + p.y);}\nPoint Point::operator - (Point &p) {return Point(x - p.x, y - p.y);}\nPoint Point::operator * (double k) {return Point(x * k, y * k);}\nPoint Point::operator / (double k) {return Point(x / k, y / k);}\nbool Point::operator == (const Point &p) const {return eq(x, p.x) && eq(y, p.y);}\ndouble Point::norm() {return x * x + y * y;}\ndouble Point::abs() {return sqrt(norm());}\nvoid Point::print() {printf(\"%.10lf %.10lf\\n\", x, y);}\n\ndouble norm(Vec a) {return a.x * a.x + a.y * a.y;}\ndouble abs(Vec a) {return sqrt(norm(a));}\n\ndouble dot(Vec a, Vec b) {return a.x * b.x + a.y * b.y;}\ndouble cross(Vec a, Vec b) {return a.x * b.y - a.y * b.x;}\n\nbool isOrthogonal(Vec a, Vec b) {return eq(dot(a, b), 0.0);}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {return isOrthogonal(a1 - a2, b1 - b2);}\nbool isOrthogonal(Segment s1, Segment s2) {return eq(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\nbool isParallel(Vec a, Vec b) {return eq(cross(a, b), 0.0);}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {return isParallel(a1 - a2, b1 - b2);}\nbool isParallel(Segment s1, Segment s2) {return eq(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\nPoint project(Segment s, Point p) {\n    Vec base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return base * r + s.p1;\n};\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string.h>\n#include<string>\n#include<cstdio>\n#include<algorithm>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<cmath>\n#include<utility>\n#include<set>\n#include<complex>\n#define ll long long int\n#define ld long double\n#define INF 1000000000\n#define EPS 0.0000000001\n#define rep(i,n) for(i=0;i<n;i++)\nusing namespace std;\n\ntypedef complex<double> P;\n\nstruct L : public vector<P>{//??´???\n  L(const P &a, const P &b){\n    push_back(a);push_back(b);\n  }\n};\n\nstruct C{//???\n  P c; double r;\n  C(const P &c,double r): c(c),r(r){}\n};\n\nnamespace std{//??????????????????\n  bool operator < (const P& a,const P& b){\n    return real(a)!= real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    //return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b)\n  }\n  bool operator == (const P& a,const P& b){\n    return a.real()==b.real()&&a.imag()==b.imag();\n  }\n}\n\ndouble dot(P a,P b){\n  return real(conj(a)*b);\n}\n\ndouble cross(P a,P b){\n  return imag(conj(a)*b);\n}\n\nint ccw(P a, P b, P c){\n  b-=a;c-=a;\n  if(cross(b,c)>0)   return +1;// counter clockwise \n  if(cross(b,c)<0)   return -1;// clockwise \n  if(dot(b,c)<0)     return +2;// c-a-b on line\n  if(norm(b)<norm(c))return -2;// a-b-c on line\n  return 0;                    // a-c-b on lone\n}\n\nint main()\n{\n  double xp1,yp1,xp2,yp2;\n  int q;\n  int i,j;\n\n  cin>>xp1>>yp1>>xp2>>yp2;\n  cin>>q;\n\n  P p1(xp1,yp1),p2(xp2,yp2);\n\n  rep(i,q){\n    double xp,yp;\n    cin>>xp>>yp;\n    P p(xp,yp);\n    P t=dot(p2-p1,p-p1)/norm(p2-p1)*(p2-p1);\n    P ans=p1+t;\n    printf(\"%.6f %.6f\\n\",ans.real(),ans.imag());\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define Rep(i,n) for(int i=0;i<(int)(n);i++)\n#define For(i,n1,n2) for(int i=(int)(n1);i<(int)(n2);i++)\n#define REP(i,n) for(ll i=0;i<(ll)(n);i++)\n#define RREP(i,n) for(ll i=((ll)(n)-1);i>=0;i--)\n#define FOR(i,n1,n2) for(ll i=(ll)(n1);i<(ll)(n2);i++)\n#define RFOR(i,n1,n2) for(ll i=((ll)(n1)-1);i>=(ll)(n2);i--)\n#define all(a)  (a).begin(),(a).end()\n#define SORT(a) sort((a).begin(),(a).end())\n#define oorret 0\n#define oor(x) [&](){try{x;} catch(const out_of_range& oor){return oorret;} return x;}()\n#define IOS cin.tie(0),ios::sync_with_stdio(false)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef std::pair<ll, ll> P;\ntemplate<typename T1, typename T2> inline bool chmin(T1& a, T2 b) { if (a > b) { a = b; return 1; }return 0; }\ntemplate<typename T1, typename T2> inline bool chmax(T1& a, T2 b) { if (a < b) { a = b; return 1; }return 0; }\ntemplate<class Type>struct is_vector : std::false_type {};\ntemplate<class ValueType, class Alloc>struct is_vector<std::vector<ValueType, Alloc>> : std::true_type {};\ntemplate <typename T> inline std::ostream& operator << (std::ostream& out, const std::vector<T>& v) {\n\tif (v.empty())return out;\n\tconstexpr bool is_vector_v = is_vector<T>::value;\n\tif (is_vector_v)for (auto itr = v.begin(); itr != v.end();)out << (*itr), out << ((++itr != v.end()) ? \"\\n\" : \"\");\n\telse for (auto itr = v.begin(); itr != v.end();)out << (*itr), out << ((++itr != v.end()) ? \" \" : \"\");\n\treturn out;\n}\ninline void put() {}\ntemplate<class T> inline void put(const T& first) { std::cout << first << \"\\n\"; }\ntemplate<class T, class... N> inline void put(const T& first, const N& ... rest) { std::cout << first << \" \"; put(rest...); }\ninline void putn() {}\ntemplate<class T, class... N> inline void putn(const T& first, const N& ... rest) { std::cout << first << \"\\n\"; putn(rest...); }\n\ntemplate<typename T>class point {\npublic:\n\tT x, y;\n\tpoint(T x, T y) :x(x), y(y) {}\n\tpoint() :x(0), y(0) {}\n\tvoid set(T x, T y) {\n\t\tthis->x = x;\n\t\tthis->y = y;\n\t}\n\tT p2dist(point p) {\n\t\tT dx = x - p.x;\n\t\tT dy = y - p.y;\n\t\treturn dx * dx + dy * dy;\n\t}\n\tT dist(point p) {\n\t\treturn sqrt(p2dist(p));\n\t}\n\tT dist(T x, T y) {\n\t\treturn dist(point(x, y));\n\t}\n\tT inner_product(point p) { // this・p\n\t\treturn x * p.x + y * p.y;\n\t}\n\tT outer_product(point p) { // this × p\n\t\treturn x * p.y - y * p.x;\n\t}\n\tT cos(point p1, point p2) { // 角度p1,this,p2の余弦\n\t\tpoint t1 = p1 - (*this), t2 = p2 - (*this);\n\t\tT ip = t1.inner_product(t2);\n\t\treturn ip / t1.size() / t2.size();\n\t}\n\tT sin(point p1, point p2) { // 角度p1,this,p2の正弦\n\t\tpoint t1 = p1 - (*this), t2 = p2 - (*this);\n\t\tT ip = t1.outer_product(t2);\n\t\treturn ip / t1.size() / t2.size();\n\t}\n\tT size() {\n\t\treturn sqrt(x * x + y * y);\n\t}\n\tpoint norm() {\n\t\treturn (*this) / size();\n\t}\n\tpoint project(point p1, point p2) { // p1,p2を通る直線へ下ろした垂線の足\n\t\tpoint p3 = p2 - p1;\n\t\tT s = p1.p2dist(p2);\n\t\tT t = (*this - p1) * p3 / s;\n\t\tpoint res = p3 * t;\n\t\tres += p1;\n\t\treturn res;\n\t}\n\tT line_dist(point p1, point p2) { // p1,p2を通る直線との距離\n\t\tpoint proj = this->project(p1, p2);\n\t\treturn this->dist(proj);\n\t}\n\tpoint operator+(point p) { return point(x + p.x, y + p.y); }\n\tpoint operator-(point p) { return point(x - p.x, y - p.y); }\n\tpoint operator*(T t) { return point(x * t, y * t); }\n\tT operator*(point p) { return inner_product(p); }\n\tpoint operator/(T t) { return point(x / t, y / t); }\n\tvoid operator+=(point p) { x += p.x; y += p.y; }\n\tvoid operator-=(point p) { x -= p.x; y -= p.y; }\n\tvoid operator*=(T t) { x *= t; y *= t; }\n\tvoid operator/=(T t) { x /= t; y /= t; }\n};\n\nint main() {\n\tusing pt = point<long double>;\n\tint x1, y1, x2, y2;\n\tint q;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tpt p1(x1, y1), p2(x2, y2);\n\tcin >> q;\n\tvector<int> x(q), y(q);\n\tvector<pt> p(q);\n\tcout << setprecision(20);\n\tREP(i, q) {\n\t\tcin >> x[i] >> y[i];\n\t\tp[i] = pt(x[i], y[i]);\n\t\tpt res = p[i].project(p1, p2);\n\t\tcout << res.x << \" \" << res.y << \"\\n\";\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\nusing namespace std;\n\nint main(){\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  int q;\n  cin >> q;\n\n  double x, y, k;\n  double ax, ay, bx, by;\n  for(int i=0; i<q; i++){\n    cin >> x >> y;\n    ax = x-x1; ay = y-y1;\n    bx = x2-x1; by = y2-y1;\n    k = (ax*bx + ay*by)/(bx*bx + by*by);\n    printf(\"%lf %lf\\n\", bx*k+0, by*k+0);\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\nusing namespace std;\n\nint main(void){\n\tdouble x1,y1,x2,y2;\n\tdouble x0,y0;\n\tdouble dx,dy;\n\tdouble m;\n\tdouble X,Y;\n\tint q;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tdx=x1-x2;\n\tdy=y1-y2;\n\tcin >> q;\n\twhile(q--){\n\t\tcin >> x0 >> y0;\n\t\tX=(dx*dx*x0+dy*dy*x1-dx*dy*(y1-y0))/(dx*dx+dy*dy);\n\t\tY=dy/dx*(X-x1)+y1;\n\t\tprintf(\"%.9lf %.9lf\\n\",X,Y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass P {\npublic:\n    P(double _x, double _y): x(_x), y(_y) {}\n    P(): x(0), y(0) {}\n    double x;\n    double y;\n    P operator-(P p) {\n        P point;\n        point.x = x - p.x;\n        point.y = y - p.y;\n        return point;\n    }\n    P operator+(P p) {\n        P point;\n        point.x = x + p.x;\n        point.y = y + p.y;\n        return point;\n    }\n    P operator*(double k) {\n        P point;\n        point.x = x * k;\n        point.y = y * k;\n        return point;\n    }\n    double dot(P p) {\n        return x * p.x + y * p.y;\n    }\n    double length() {\n        return sqrt(x * x + y * y);\n    }\n};\n\nP projection(P p1, P p2, P p) {\n    P v1 = p - p1;\n    P v2 = p2 - p1;\n    double t = v1.dot(v2) / v2.length() / v2.length();\n    return v2 * t + p1;\n}\n\nint main() {\n    P p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        P p;\n        cin >> p.x >> p.y;\n        p = projection(p1, p2, p);\n        cout << setprecision(15) << p.x << ' ' << p.y << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n#include <iostream>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs(a - b) < EPS)\n\nclass Point{\npublic:\n    double x, y;\n\n    Point(double x_ = 0, double y_ = 0){\n        x = x_;\n        y = y_;\n    }\n\n    Point operator+ (Point p){\n        return Point(x + p.x, y + p.y);\n    };\n\n    Point operator- (Point p){\n        return Point(x - p.x, y - p.y);\n    };\n\n    Point operator* (double k){\n        return Point(x * k, y * k);\n    }\n\n    Point operator/ (double k){\n        return Point(x / k, y / k);\n    }\n\n    double norm(){\n        return x * x + y * y;\n    }\n\n    double abs(){\n        return sqrt(norm());\n    }\n\n    bool operator == (const Point &p) const{\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a, b), 0.0);\n}\n;\ndouble getCos(Vector a, Vector b){\n    return dot(a, b) / (a.abs() * b.abs());\n}\n\ndouble dist(Point p1, Point p2){\n    return sqrt(pow((p1.x - p2.x), 2) + pow((p1.y - p2.y), 2));\n}\n\nPoint projection(Point p1, Point p2, Point p0){\n    if(p1 == p0){\n        return p0;\n    }\n    if(p2 == p0){\n        return p0;\n    }\n    return p1 + (p2 - p1) / (p2 - p1).abs() * (p0 - p1).abs() * getCos(p2 - p1, p0 - p1);\n}\n\nPoint reflection(Point p1, Point p2, Point p0){\n    Point p = projection(p1, p2, p0);\n    return p0 + (p - p0) * 2;\n}\n\nint main(){\n    int xp1, yp1, xp2, yp2;\n    scanf(\"%d\", &xp1);\n    scanf(\"%d\", &yp1);\n    scanf(\"%d\", &xp2);\n    scanf(\"%d\", &yp2);\n\n    Point p1 = Point(xp1, yp1);\n    Point p2 = Point(xp2, yp2);\n\n    int q;\n    scanf(\"%d\", &q);\n\n    for(int i = 0; i < q; i++){\n        int xp0, yp0;\n        scanf(\"%d\", &xp0);\n        scanf(\"%d\", &yp0);\n\n        Point p = reflection(p1, p2, Point(xp0, yp0));\n        printf(\"%.10f %.10f\\n\", p.x, p.y);\n    }\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\n//using ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(Point &p) { return Point(x + p.x, y + p.y); };\n\tPoint operator -(Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n};\ntypedef Point Vector;\n\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nint main() {\n\tPoint p[2];\n\tint q, x, y;\n\tcin >> p[0].x >> p[0].y >> p[1].x >> p[1].y;\n\tSegment seg;\n\tseg.p1 = p[0]; seg.p2 = p[1];\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\t//cout << x << \" \" << y << endl;\n\t\tPoint po = Point(x, y);\n\t\tPoint proj = project(seg, po);\n\t\tprintf(\"%.10lf %.10lf\\n\", proj.x, proj.y);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "/**\"I am not an authorized coder\"**/\n#include <bits/stdc++.h>\n#define FOR(i, s, e)    for(int i=s; i<e; i++)\n#define loop(i, n)      FOR(i, 0, n)\n#define sf              scanf\n#define pf              printf\n#define pb              push_back\n#define MP              make_pair\n#define fr              first\n#define sc              second\n#define lli             long long\n#define dd              double\n#define all(v)          v.begin(), v.end()\n#define PI              2*acos(0.0)\n#define mem(ara, value) memset(ara, value, sizeof(ara))\n#define paii            pair<int, int>\n#define pall            pair<ll, ll>\n#define SZ(a)           int(a.size())\n#define open()          freopen(\"input.txt\", \"r\", stdin)\n#define show()          freopen(\"output.txt\", \"w\", stdout)\n#define read(a)         scanf(\"%d\",&a)\n#define read2(a,b)      scanf(\"%d%d\",&a,&b)\n#define read3(a,b,c)    scanf(\"%d%d%d\",&a,&b,&c)\n#define read4(a,b,c,d)  scanf(\"%d%d%d%d\",&a,&b,&c,&d)\n#define readI1(a)       scanf(\"%lld\",&a)\n#define readI2(a,b)     scanf(\"%lld %lld\",&a,&b)\n#define readI3(a,b,c)   scanf(\"%lld %lld %lld\",&a,&b,&c)\n#define readI4(a,b,c,d) scanf(\"%lld %lld %lld %lld\",&a,&b,&c,&d)\n#define BOUNDARY(i, j)  ((i >= 0 && i < w) && (j >= 0 && j < h))\n#define Mx 100009\n#define EPS 1e-12\n#define sq(x) ((x)*(x))\n#define sq_dist(a,b)    (sqrt(sq(a.x-b.x)+sq(a.y-b.y)));\n#define cross(o,a,b)    ((a.x-o.x)*(b.y-o.y)-(a.y-o.y)*(b.x-o.x))\nusing namespace std;\nint main()\n{\n\tint x0,y0,x1,y1,x2,y2;\n\tread4(x0,y0,x1,y1);\n\tint n;\n\tread(n);\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tread2(x2,y2);\n\t\tdouble x,y;\n\t\tdouble costheta=((x1-x0)*(x2-x0)+(y1-y0)*(y2-y0))/(sqrt(sq(x0-x1)+sq(y0-y1))*sqrt(sq(x0-x2)+sq(y0-y2)));\n\t\tx=(sqrt(sq(x0-x2)+sq(y0-y2))*costheta)*((x1-x0)/(sqrt(sq(x0-x1)+sq(y0-y1))));\n\t\ty=(sqrt(sq(x0-x2)+sq(y0-y2))*costheta)*((y1-y0)/(sqrt(sq(x0-x1)+sq(y0-y1))));\n\t\tif( y==-0.00000000000) { y=fabs(y);}\n\t\tif(x==-0.00000000000 ) x=fabs(x);\n\t\tprintf(\"%.11f %.11f\\n\",x,y);\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\n#define EPS (1e-10)\nbool equals(double x,double y)\n{\n    return fabs(x-y)<EPS;\n}\nclass Point\n{\npublic:\n    double x,y;\n    Point(double x=0,double y=0):x(x),y(y) {}\n    Point operator+(Point p)\n    {\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator-(Point p)\n    {\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator*(double k)\n    {\n        return Point(x*k,y*k);\n    }\n};\ntypedef Point Vector;\nstruct Segment\n{\n    Vector p1,p2;\n};\ndouble norm(Vector a)\n{\n    return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a)\n{\n    return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b)\n{\n    return a.x*b.x+a.y*b.y;\n}\nPoint projection(Segment s,Point p)\n{\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+(base*r);\n}\nint main()\n{\n    Segment s;\n    cin>>s.p1.x>>s.p1.y>>s.p2.x>>s.p2.y;\n    int n;\n    cin>>n;\n    while(n--)\n    {\n        Vector p;\n        cin>>p.x>>p.y;\n        Vector ans;\n        ans=projection(s,p);\n        cout <<fixed;\n        cout<<setprecision(10)<<ans.x<<\" \"<<setprecision(10)<<ans.y<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<functional>\n#include<vector>\n#include<queue>\n#include<complex>\nusing namespace std;\n#define f(i,n) for(int i=0;i<(int)n;i++)\n#define MOD 1000000009\n#define MIN (1e-10)\ntypedef complex<long double> P;\nbool EQ(P a, P b){\n\tif (abs(a.real() - b.real()) < MIN&&abs(a.imag() - b.imag()) < MIN)return true;\n\telse return false;\n}\nlong double dot(P a, P b){\n\treturn{ a.real()*b.real() + a.imag()*b.imag() };\n}\nlong double cross(P a, P b){\n\treturn{ a.real()*b.imag() - a.imag()*b.real() };\n}\nP insec(P a1, P a2, P b1, P b2){\n\tP a, b;\n\ta = a2 - a1;\n\tb = b2 - b1;\n\treturn a1 + (a*cross(b, b1 - a1) / cross(b, a));\n}\nvoid print(double x,int k){\n\tif (x < 0){\n\t\tprintf(\"-\");\n\t\tx = -x;\n\t}\n\tprintf(\"%d.\", (int)x);\n\tx = x - (double)(int)x;\n\tf(i, k){\n\t\tx = x * 10;\n\t\tprintf(\"%d\", (int)x);\n\t\tx = x - (double)(int)x;\n\t}\n\treturn;\n}\n\nint main(void){\n\tP a, b, c;\n\tP d, e, f;\n\tlong double x, y;\n\tint n;\n\tscanf(\"%lf %lf\", &x, &y);\n\ta = P(x, y);\n\tscanf(\"%lf %lf\", &x, &y);\n\tb = P(x, y);\n\tf = (b - a)*P(0, 1);\n\tscanf(\"%d\", &n);\n\tf(i, n){\n\t\tscanf(\"%lf %lf\", &x, &y);\n\tc = P(x, y);\n\td = c + f;\n\te = insec(a, b, c, d);\n\tprint(e.real(),10);\n\tprintf(\" \");\n\tprint(e.imag(),10);\n\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <iomanip>\n#include <algorithm>\n\nusing namespace std;\n\nconst double kEps = 1e-10;\n\nint dcmp(double x) {\n  if (fabs(x) < kEps) return 0;\n  return x < 0 ? -1 : 1;\n}\n\nstruct Vector {\n  double x, y;\n  Vector() {}\n  Vector(double x, double y): x(x), y(y) {}\n  // Vector(const Point & p1, const Point & p2): x(p2.x - p1.x), y(p2.y - p1.y) {}\n  Vector(const Vector & v);\n\n  double Norm() const { return hypot(x, y); }\n  double NormSquared() const { return x * x + y * y; }\n  Vector Normalize() const {\n    return *this / this->Norm();\n  }\n  Vector operator-() const {\n    return Vector(-x, -y);\n  }\n  Vector operator+(const Vector & rhs) const {\n    return Vector(x + rhs.x, y + rhs.y);\n  }\n  Vector operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  Vector operator*(const double rhs) const {\n    return Vector(rhs * x, rhs * y);\n  }\n  Vector operator/(const double rhs) const {\n    return *this * (1.0 / rhs);\n  }\n  double Dot(const Vector & rhs) const {\n    return x * rhs.x + y * rhs.y;\n  }\n  double Cross(const Vector & rhs) const {\n    return x * rhs.y - y * rhs.x;\n  }\n  bool operator==(const Vector & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Vector & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nstruct Point {\n  Point() {}\n  Point(double x, double y): x(x), y(y) {}\n  Point(const Point & p);\n\n  double x, y;\n\n  Point operator-() {\n    return Point(-x, -y);\n  }\n  Point operator+(const Vector & rhs) const {\n    return Point(x + rhs.x, y + rhs.y);\n  }\n  Point operator-(const Vector & rhs) const {\n    return *this + (-rhs);\n  }\n  bool operator==(const Point & rhs) const {\n    return dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) == 0;\n  }\n  bool operator<(const Point & rhs) const {\n    return dcmp(x - rhs.x) < 0 || (dcmp(x - rhs.x) == 0 && dcmp(y - rhs.y) < 0);\n  }\n};\n\nstruct Line {\n  Line() {}\n  Line(const Point & p1, const Point & p2): p1(p1), p2(p2) {}\n  Line(double x1, double y1, double x2, double y2): p1(x1, y1), p2(x2, y2) {}\n  Line(const Line & l);\n\n  Point p1, p2;\n};\n\nostream & operator<<(ostream & os, const Point & p) {\n  os << p.x << \" \" << p.y;\n  return os;\n}\n\nostream & operator<<(ostream & os, const Vector & v) {\n  os << v.x << \" \" << v.y;\n  return os;\n}\n\nPoint Projection(const Point & p, const Line & l) {\n  Vector v0(p.x - l.p1.x, p.y - l.p1.y);\n  Vector v(l.p2.x - l.p1.x, l.p2.y - l.p1.y);\n  auto perpendicular = v * (v.Dot(v0) / v.NormSquared()) - v0;\n  return p + perpendicular;\n}\n\nint main(int argc, char const *argv[]) {\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  Line l(x1, y1, x2, y2);\n\n  int q;\n  cin >> q;\n  for (unsigned i = 0; i < q; ++i) {\n    double x0, y0;\n    cin >> x0 >> y0;\n    Point p(x0, y0);\n    cout << fixed << setprecision(10) << Projection(p, l) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing uint = unsigned int;\nusing ll = long long;\nusing ull = unsigned long long;\nconstexpr ll TEN(int n) { return (n==0) ? 1 : 10*TEN(n-1); }\ntemplate<class T> using V = vector<T>;\ntemplate<class T> using VV = V<V<T>>;\n\nusing D = double;\nconst D PI = acos(D(-1)), EPS = 1e-10;\n\nstruct Pt2 {\n    D x, y;\n    Pt2() {}\n    Pt2(D _x, D _y) : x(_x), y(_y) {}\n    Pt2 operator+(const Pt2 &r) const { return Pt2(x+r.x, y+r.y); }\n    Pt2 operator-(const Pt2 &r) const { return Pt2(x-r.x, y-r.y); }\n    Pt2 operator*(const Pt2 &r) const { return Pt2(x*r.x-y*r.y, x*r.y+y*r.x); }\n\n    Pt2 operator*(const D &r) const { return Pt2(x*r, y*r); }\n    Pt2 operator/(const D &r) const { return Pt2(x/r, y/r); }\n\n    Pt2& operator+=(const Pt2 &r) { return *this=*this+r; }\n    Pt2& operator-=(const Pt2 &r) { return *this=*this-r; }\n    Pt2& operator*=(const Pt2 &r) { return *this=*this*r; }\n    Pt2& operator*=(const D &r) { return *this=*this*r; }\n    Pt2& operator/=(const D &r) { return *this=*this/r; }\n    \n    Pt2 operator-() const { return Pt2(-x, -y); }\n\n    D abs() const { return sqrt(x*x + y*y); }\n    D rabs() const { return max(::abs(x), ::abs(y)); } // robust abs\n    D arg() const { return atan2(y, x); }\n\n    pair<D, D> to_pair() const { return make_pair(x, y); }\n    static Pt2 polar(D le, D th) { return Pt2(le*cos(th), le*sin(th)); }\n};\nostream& operator<<(ostream& os, const Pt2 &p) {\n    os << \"(\" << p.x << \", \" << p.y << \")\";\n    return os;\n}\nusing P = Pt2;\n\nstruct L {\n    P s, t;\n    L() {}\n    L(P _s, P _t) : s(_s), t(_t) {}\n    P vec() const { return t-s; }\n    D abs() const { return vec().abs(); }\n    D arg() const { return vec().arg(); }\n};\n\nint sgn(D a) {\n    if (abs(a) <= EPS) return 0;\n    return (a < 0) ? -1 : 1;\n}\nint sgn(D a, D b) { return sgn(a-b); }\n//relative sign\nint rsgn(D a, D f) {\n    if (abs(a) <= f*EPS) return 0;\n    return (a < 0) ? -1 : 1;\n}\n\n//robust less\nbool rless(P l, P r) {\n    if (sgn(r.x-l.x)) return l.x < r.x;\n    if (sgn(r.y-l.y)) return l.y < r.y;\n    return false;\n}\n\nD cross(P a, P b) { return a.x*b.y - a.y*b.x; }\nD dot(P a, P b) { return a.x*b.x + a.y*b.y; }\n\n// -2, -1, 0, 1, 2 : front, clock, on, cclock, back\nint ccw(P b, P c) {\n    int s = rsgn(cross(b, c), b.rabs());\n    if (s) return s;\n    if (!sgn(c.rabs()) || !sgn((c-b).rabs())) return 0;\n    if (dot(b, c) < 0) return 2;\n    if (dot(-b, c-b) < 0) return -2;\n    return 0;\n}\nint ccw(P a, P b, P c) { return ccw(b-a, c-a); }\nint ccw(L l, P p) { return ccw(l.s, l.t, p); }\n\nint crossLL(const L &l, const L &m, P &r) {\n    if (sgn(cross(l.vec(), m.vec())) == 0) {\n        r = l.s;\n        if (ccw(l.s, l.t, m.s) % 2 == 0) return -1;\n        return 0;\n    }\n    D t = cross(l.vec(), l.t - m.s) / cross(l.vec(), m.vec());\n    r = m.s + m.vec() * t;\n    return 1;\n}\n\nstruct C {\n    P p; D r;\n    C() {}\n    C(P p, D r) : p(p), r(r) {}\n};\n\nP project(const L &l, const P &p) {\n    P v = l.vec();\n    return v * (dot(v, p-l.s) / (v.x*v.x + v.y*v.y));\n}\n\nD distLP(const L &l, const P &p) {\n    return abs(cross(l.vec(), p-l.s)) / l.abs();\n}\n\n//need Intersect/distLP\nint crossLC(const L &l, const C &c, L &r) {\n    D u = distLP(l, c.p);\n    int si = sgn(u - c.r);\n    if (si == 1) return 0;\n    P v = (l.t-l.s) / l.abs() * P(0, -1); //lに直行する単位ベクトル\n    v *= u;\n    if (ccw(l.s, l.t, c.p) < 0) v *= -1;\n    //vは円の中心からlへと向かう方向のベクトル\n    if (si == 0) {\n        r.s = r.t = c.p + v;\n        return 1;\n    }\n    r.s = c.p+v+P::polar(sqrt(c.r*c.r - u*u), l.arg());\n    r.t = c.p+v-P::polar(sqrt(c.r*c.r - u*u), l.arg());\n    return 2;\n}\n\n//共通内接線\nint internal_tangent(const C &c, const C &d, L &l, L &r) {\n    D di = (c.p - d.p).abs();\n    if (sgn(c.r + d.r, di) == 1) return 0;\n    D th = acos((c.r+d.r) / di);\n    D ar = (d.p - c.p).arg();\n    l.s = c.p + P::polar(c.r, ar-th);\n    l.t = d.p - P::polar(d.r, ar-th);\n    r.s = c.p + P::polar(c.r, ar+th);\n    r.t = d.p - P::polar(d.r, ar+th);\n    if (sgn(di, c.r + d.r) == 0) return 1;\n    return 2;\n}\n\n//共通外接線\nint external_tangent(const C &c, const C &d, L &l, L &r) {\n    D di = (c.p - d.p).abs();\n    if (sgn(abs(c.r - d.r), di) == 1) return 0;\n    assert(sgn(di)); // prohibit same circles\n    D th = acos((c.r-d.r) / di);\n    D ar = (d.p - c.p).arg();\n    l.s = c.p + P::polar(c.r, ar-th);\n    l.t = d.p + P::polar(d.r, ar-th);\n    r.s = c.p + P::polar(c.r, ar+th);\n    r.t = d.p + P::polar(d.r, ar+th);\n    if (sgn(di, abs(c.r - d.r)) == 0) return 1;\n    return 2;\n}\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << setprecision(20) << fixed;\n\n    P p1, p2;\n    D x, y;\n    cin >> x >> y; p1 = P(x, y);\n    cin >> x >> y; p2 = P(x, y);\n \n    int q;\n    cin >> q;\n    for (int ph = 0; ph < q; ph++) {\n        cin >> x >> y;\n        P p3 = P(x, y);\n        P z = project(L(p1, p2), p3);\n//        crossLL(L(p1, p2), L(p3, p3 + (p2-p1)*P(0, 1)), z);\n        cout << z.x << \" \" << z.y << endl;\n    }\n    \n/*    C c1, c2;\n    D x, y, r;\n    cin >> x >> y >> r; c1 = C(P(x, y), r);\n    cin >> x >> y >> r; c2 = C(P(x, y), r);\n\n    L l1, l2;\n    int z;\n    V<P> res;\n    z = internal_tangent(c2, c1, l1, l2);\n    if (z >= 1) res.push_back(l1.t);\n    if (z >= 2) res.push_back(l2.t);\n    z = external_tangent(c2, c1, l1, l2);\n    if (z >= 1) res.push_back(l1.t);\n    if (z >= 2) res.push_back(l2.t);\n\n    sort(begin(res), end(res), rless);\n    for (auto p: res) {\n        cout << p.x << \" \" << p.y << endl;\n    }*/\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<functional>\n#include<vector>\n#include<queue>\n#include<complex>\nusing namespace std;\n#define f(i,n) for(int i=0;i<(int)n;i++)\n#define MOD 1000000009\n#define MIN (1e-10)\ntypedef complex<double> P;\nbool EQ(P a, P b){\n\tif (abs(a.real() - b.real()) < MIN&&abs(a.imag() - b.imag()) < MIN)return true;\n\telse return false;\n}\ndouble dot(P a, P b){\n\treturn{ a.real()*b.real() + a.imag()*b.imag() };\n}\ndouble cross(P a, P b){\n\treturn{ a.real()*b.imag() - a.imag()*b.real() };\n}\nP insec(P a1, P a2, P b1, P b2){\n\tP a, b;\n\ta = a2 - a1;\n\tb = b2 - b1;\n\treturn a1 + (a*cross(b, b1 - a1) / cross(b, a));\n}\n\nint main(void){\n\tP a, b, c;\n\tP d, e, f;\n\tdouble x, y;\n\tint n;\n\tscanf(\"%lf %lf\", &x, &y);\n\ta = P(x, y);\n\tscanf(\"%lf %lf\", &x, &y);\n\tb = P(x, y);\n\tf = (b - a)*P(0, 1);\n\tscanf(\"%d\", &n);\n\tf(i, n){\n\t\tscanf(\"%lf %lf\", &x, &y);\n\tc = P(x, y);\n\td = c + f;\n\te = insec(a, b, c, d);\n\tprintf(\"%f %f\\n\",e.real(),e.imag());\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\nusing namespace std;\ndouble distance(double x1, double y1, double x2, double y2) {\n    return sqrt(pow(x2 - x1, 2) + pow(y2 - y1,2));\n}\nint main(void){\n    // Here your code !\n    int x1, y1, x2, y2;\n    double xa, ya;\n    cin >> x1 >> y1 >> x2 >> y2;\n    int n;\n    cin >> n;\n    int x[n], y[n];\n    double cos;\n    for(int i=0;i<n;i++) {\n        cin >> x[i] >> y[i];\n        if(x[i] == x1 && y[i] == y1) {\n            cout << x1 << \" \" << y1 << endl;\n            continue;\n        }\n        if(x[i] == x2 && y[i] == y2) {\n            cout << x2 << \" \" << y2 << endl;\n            continue;\n        }\n        cos = (pow(distance(x[i], y[i], x1, y1), 2) + pow(distance(x2, y2, x1, y1), 2) - pow(distance(x[i], y[i], x2, y2), 2)) / (2 * distance(x[i], y[i], x1, y1) * distance(x1, y1, x2, y2));\n        xa = x1 + (x2 - x1) * (distance(x1, y1, x[i], y[i]) * cos) / (distance(x1, y1, x2, y2));\n        ya = y1 + (y2 - y1) * (distance(x1, y1, x[i], y[i]) * cos) / (distance(x1, y1, x2, y2));\n        if(xa > -0.00000001 && xa < 0) {\n            xa = 0;\n        }\n        if(ya > -0.00000001 && ya < 0) {\n            ya = 0;\n        }\n        cout << fixed\n             << setprecision(10)\n             << xa\n             << \" \"\n             << ya << endl;\n    }\n    \n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n\n \ndouble EPS = 1e-10;\nconst double PI = acos(-1);\n \ndouble add(double a, double b){\n  if(abs(a+b) < EPS * (abs(a)+abs(b)))return 0;\n  return a+b;\n}\n \nstruct point{\n  double x, y;\n  point(){}\n  point(double x,double y) : x(x) , y(y){}\n \n  point operator + (point p){\n    return point(add(x,p.x), add(y,p.y));\n  }\n \n  point operator - (point p){\n    return point(add(x,-p.x), add(y,-p.y));\n  }\n \n  point operator * (double d){\n    return point(x*d,y*d);\n  }\n \n  point operator / (double d){\n    return point(x/d,y/d);\n  }\n};\n \ndouble dot(point a, point b) {\n  return (a.x * b.x + a.y * b.y);\n}\n \ndouble norm(point a){\n  return sqrt(dot(a,a));\n}\n \ntypedef point Vector;\ntypedef pair<point,point> Line;\n \npoint projection(Vector p,Vector b){\n  return b*dot(p,b)/dot(b,b);\n}\n \npoint projection(Line l,Vector p){\n  point a=l.second-l.first;\n  point b=p-l.first;\n  return l.first+projection(b,a);\n}\n \nint main(void){\n \n  Line l;\n  point c;\n  int q;\n  cin >> l.first.x >> l.first.y >> l.second.x >> l.second.y;\n  cin >> q;\n  while(q--){\n    cin >> c.x >> c.y;\n    point res=projection(l,c);\n    printf(\"%.10f %.10f\\n\",res.x,res.y);\n  }\n \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n//be naame khodaa\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\n#define F first\n#define S second\n\ninline int in(){int x, y; y = scanf(\"%d\", &x); return x; }\n\nconst int N = -1;\n\nstruct PT{\n\tld x, y;\n\tPT (ld x = 0, ld y = 0) : x(x), y(y) {}\n\tPT operator + (PT ro) const{\n\t\treturn PT(x+ro.x, y+ro.y);\n\t}\n\tPT operator - (PT ro) const{\n\t\treturn PT(x-ro.x, y-ro.y);\n\t}\n\tPT operator * (ld co) const{\n\t\treturn PT(x*co, y*co);\n\t}\n\tPT operator / (ld co) const{\n\t\treturn PT(x/co, y/co);\n\t}\n\tld operator * (PT ro) const{\n\t\treturn x*ro.x + y*ro.y;\n\t}\n\tld operator ^ (PT ro) const{\n\t\treturn x*ro.y - y*ro.x;\n\t}\n};\n\nPT operator * (ld co, PT p){\n\treturn p*co;\n}\n\nPT proj(PT a, PT b, PT c){\n\tPT ab = b-a, ac = c-a;\n\treturn a + (ab*ac)/(ab*ab)*ab;\n}\n\nint main(){\n\tPT a, b;;\n\tcin >> a.x >> a.y >> b.x >> b.y;\n\tPT p;\n\tcout << setprecision(10) << fixed;\n\tfor (int i = in(); i; i--){\n\t\tcin >> p.x >> p.y;\n\t\tPT img = proj(a, b, p);\n\t\tcout << img.x << ' ' << img.y << '\\n';\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define ll long long\n#define rep(i,n) for(ll i=0;i<n;i++)\nusing namespace std;\nconst double pi = acos(-1);\nconst double eps = 1e-10;\n\n\ntemplate<class T>\nbool equals(T a,T b){ return fabs((a)-(b)) < eps; }\n\nstruct Point{\n    double x, y;\n    Point(){}\n    Point(double x, double y) : x(x), y(y){}\n    Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n    Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n    Point operator * (double a) { return Point(x*a, y*a); }\n    Point operator / (double a) { return Point(x/a, y/a); }\n    double norm() {return x*x+y*y;}\n    double abs() {return sqrt(norm());}\n\n    bool operator < (const Point &p) const {\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    bool operator == (const Point &p) const {\n        return fabs(x-p.x) < eps && fabs(y-p.y) < eps;\n    }\n};\n\nbool sort_x(Point a, Point b){ return !equals(a.x,b.x)?a.x<b.x:a.y<b.y; }\nbool sort_y(Point a, Point b){ return !equals(a.y,b.y)?a.y<b.y:a.x<b.x; }\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\ndouble norm(Vector a) { return a.x*a.x+a.y*a.y; }\ndouble abs(Vector a) { return sqrt(norm(a)); }\ndouble dot(Vector a, Vector b) { return a.x*b.x+a.y*b.y; }\ndouble cross(Vector a, Vector b) { return a.x*b.y-a.y*b.x; }\n\nstruct Segment {\n    Point p1, p2;\n    Segment(){}\n    Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c, double r) : c(c),r(r) {}\n};\n\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n    return equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s, Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(15);\n    double x1,y1,x2,y2;\n    cin>>x1>>y1>>x2>>y2;\n    Segment s(Point(x1,y1),Point(x2,y2));\n    ll q;cin>>q;\n    rep(Q,q){\n        double x0,y0;\n        cin>>x0>>y0;\n        Point x=project(s,Point(x0,y0));\n        cout<<x.x<<\" \"<<x.y<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std ;\n#define eps 1e-10\n#define equals(a , b) (fabs((a) - (b)) < eps)\n\nclass Point\n{\npublic:\n    double x , y;\n\n    Point(double x = 0 ,double y = 0):x(x) , y(y) {}\n\n    Point operator +(Point p){return Point(x + p.x , y + p.y) ;}\n    Point operator -(Point p){return Point(x - p.x , y - p.y) ;}\n    Point operator *(double a){return Point(a * x , a * y) ;}\n    Point operator /(double a){return Point(x / a , y / a) ;}\n\n    double abs() {return sqrt(norm()) ;}\n    double norm() {return x * x + y * y ;}\n\n    bool operator < (const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y ;\n    }\n\n    bool operator == (const Point &p) const\n    {\n        return fabs(x - p.x) < eps && fabs(y - p.y) < eps ;\n    }\n\n};\n\ntypedef Point Vector;\n\nstruct Segment  //表示线段结构体\n{\n    Point p1 , p2 ;\n};\n\ndouble dot(Vector a , Vector b)  // 向量a,b的内积\n{\n    return a.x * b.x + a.y * b.y ;\n}\n\ndouble cross(Vector a, Vector b)  //向量a,b外积\n{\n\treturn a.x * b.y - a.y * b.x ;\n}\n\nbool isOrthogonal(Vector a , Vector b)  //判断是否正交\n{\n    return equals(dot(a , b) , 0.0) ;\n}\n\nbool isOrthogonal(Point a1 , Point a2 , Point b1 , Point b2)\n{\n    return isOrthogonal(a1 - a2 , b1 - b2) ;\n}\n\nbool  isOrthogonal(Segment s1 , Segment s2)\n{\n    return equals(dot(s1.p2 - s1.p1 , s2.p2 - s2.p1) , 0.0) ;\n}\n\nbool isParallel(Vector a, Vector b)  //判断是否平行\n{\n\treturn equals(cross(a, b), 0.0) ;\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n\treturn isParallel(a1 - a2, b1 - b2) ;\n}\n\nbool isParallel(Segment s1, Segment s2)\n{\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0) ;\n}\n\nPoint project(Segment s, Point p)  //p在s上的投影\n{\n    Point base = s.p2 - s.p1 ;\n    double r = dot(p - s.p1 , base) / base.norm() ;\n    return s.p1 +base * r ;\n}\n\n/*\n求垂足x：对于给定的三点p1,p2,p从点p向通过p1,p2的直线引一条垂线\nbase=p2-p1;\nhypo=p-p1;\n x=s.p1+base*(hypo*base/|base|^2); hypo*base 可以用向量内积求 \n*/\nint main()\n{\n    Point p1 , p2 ;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y ;\n    int q ;\n    Segment s ;\n    s.p1 = p1 ;\n    s.p2 = p2 ;\n    cin >> q ;\n    while(q --)\n    {\n        Point p ;\n        cin >> p.x >> p.y ;\n        Point w = project(s , p) ;\n        printf(\"%.10lf %.10lf\\n\" , w.x , w.y) ;\n    }\n    return 0 ;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define MYDEBUG\n//\n#include <bits/stdc++.h>\n#ifdef MYDEBUG\n#define dbp(x) cout<<#x<<\": \"<<x<<endl\n#define dbp2(x,y) cout<<#x<<\",\"<<#y<<\": \"<<x<<\",\"<<y<<endl\n#define dbp3(x,y,z) cout<<#x<<\",\"<<#y<<\",\"<<#z<<\": \"<<x<<\",\"<<y<<\",\"<<z<<endl\n#define dbp4(w,x,y,z) cout<<#w<<\",\"<<#x<<\",\"<<#y<<\",\"<<#z<<\": \"<<w<<\",\"<<x<<\",\"<<y<<\",\"<<z<<endl\n#define ifcin(x) std::ifstream cin(x)\n#else\n#define dbp(x)\n#define dbp2(x,y)\n#define dbp3(x,y,z)\n#define dbp4(w,x,y,z)\n#define ifcin(x)\n#endif\n#define ll long long\n#define all(x) x.begin(), x.end()\n#define rep(i, from, to) for(int i=from; i<to; ++i)\n#define REP(i, from, to) for(int i=from; i<=to; ++i)\nusing namespace std;\ntemplate<typename T>\nostream& operator<<(ostream& out, const vector<T>& v) {\n\tout << \"[\";\n\tsize_t last = v.size() - 1;\n\tfor (size_t i = 0; i < v.size(); ++i) {\n\t\tout << v[i];\n\t\tif (i != last) {\n\t\t\tout << \",\";\n\t\t}\n\t}\n\tout << \"]\";\n\treturn out;\n}\ntemplate<typename T>\nostream& operator<<(ostream& out, const vector<vector<T> >& v) {\n\tfor (size_t i = 0; i < v.size(); ++i) {\n\t\tout << v[i] << endl;\n\t}\n\treturn out;\n}\ntemplate<typename T1, typename T2>\nostream& operator<<(ostream& out, const pair<T1, T2>& p) {\n\tout << \"{\" << p.first << \",\" << p.second << \"}\";\n\treturn out;\n}\ntemplate<typename T>\ninline string toString(const T &a) {\n\tostringstream oss;\n\toss << a;\n\treturn oss.str();\n}\nstatic const double EPS = 1e-10;\nbool equals(double a, double b) {\n\treturn a > b ? a - b < EPS : b - a < EPS;\n}\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double inx = 0.0, double iny = 0.0) :\n\t\t\tx(inx), y(iny) {\n\t}\n\tPoint operator+(const Point &p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator-(const Point &p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator*(const double k) {\n\t\treturn Point(x * k, y * k);\n\t}\n\tPoint operator/(const double k) {\n\t\treturn Point(x / k, y / k);\n\t}\n\tPoint operator=(const Point &p) {\n\t\tx = p.x;\n\t\ty = p.y;\n\t\treturn *this;\n\t}\n\tbool operator<(const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator==(const Point &p) const {\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n};\ntypedef Point Vector;\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tVector getvector() {\n\t\treturn p2 - p1;\n\t}\n};\ntypedef Segment Line;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point inc = Point(), double inr = 0.0) :\n\t\t\tc(inc), r(inr) {\n\t}\n};\ntypedef vector<Point> Polygon;\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\ndouble norm(Vector a) {\n\treturn a.x * a.x + a.y * a.y;\n}\ndouble abs(Vector a) {\n\treturn sqrt(norm(a));\n}\nconst int CCW = 1;\nconst int CW = 1;\nconst int on_segment = 2;\nconst int online_back = 2;\nconst int online_front = -2;\nbool is_orthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn is_orthogonal(a1 - a2, b1 - b2);\n}\nbool is_orthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.getvector(), s2.getvector()), 0.0);\n}\nbool is_parallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn is_parallel(a1 - a2, b1 - b2);\n}\nbool is_parallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.getvector(), s2.getvector()), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n\tVector base = s.getvector();\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn project(s, p) * 2.0 - p; //p + (project(s, p) - p) * 2.0\n}\ndouble getdistance(Point a, Point b) {\n\treturn abs(a - b);\n}\ndouble getdistancelp(Line l, Point p) {\n\tdouble s = abs(cross(l.p2 - l.p1, p - l.p1));\n\treturn s / abs(l.getvector());\n}\n\nvoid solve() {\n\tPoint p1, p2;\n\tcin >> p1.x >> p1.y;\n\tcin >> p2.x >> p2.y;\n\tLine l;\n\tl.p1 = p1;\n\tl.p2 = p2;\n\tint q;\n\tcin >> q;\n\trep(i,0,q)\n\t{\n\t\tPoint pq;\n\t\tcin >> pq.x >> pq.y;\n\t\tPoint pj = project(l, pq);\n\t\tprintf(\"%.10lf %.10lf\\n\", pj.x, pj.y);\n\t}\n}\nint main() {\n\tsolve();\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nmain()\n{\n    double a1,a2,b1,b2;\n    double c,i;\n    cin>>a1>>a2>>b1>>b2;\n    scanf(\"%lf\",&c);\n    for(i=0; i<c; i++)\n    {\n        double e1,e2,c1,c2,f1,f2,d1,d2;\n        cin>>d1>>d2;\n        if(a1==b1)\n        {\n            e1=0;\n        }\n        else\n        {\n             e1=(b2-a2)/(b1-a1);\n        }\n\n        c1=(a2-(e1*a1));\n        if(e1==0)\n        {\n            e2=0;\n        }\n        else\n        {\n            e2=(-1)/e1;\n        }\n\n        c2=(d2-(e2*d1));\n        if(a1==0 && a2==0 && b1==0)\n        {\n            f1=0;\n            f2=d2;\n        }\n        else if(a1==0&& b1==0 &&b2==0)\n        {\n            f1=0;\n            f2=d2;\n        }\n        else if(e1==0)\n        {\n            f1=d1;\n            f2=0;\n        }\n        else\n        {\n            f1=((c1-c2)/(e2-e1));\n            f2=(((c1*e2)-c2*e1)/(e2-e1));\n\n        }\n        printf(\"%.10lf %.10lf\\n\",f1,f2);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n\nint dcmp(double x) {\n    static double eps = 1e-8;\n    return (x > eps) - (x < -eps);\n}\n\nstruct vec{\n    double x, y;\n\n    vec(double _x=0, double _y=0)\n        :x(_x), y(_y) {}\n\n    vec operator- () const{ return vec(-x, -y); }\n    \n    vec operator+ (const vec& v) const{ return vec(x+v.x, y+v.y); }\n    vec operator- (const vec& v) const{ return vec(x-v.x, y-v.y); }\n    vec operator* (double c) const{ return vec(x*c, y*c); }\n    vec operator/ (double c) const{ return vec(x/c, y/c); }\n\n    double dot(const vec& v) const{ return x*v.x + y*v.y; }\n    double cross(const vec& v) const{ return x*v.y - y*v.x; }\n\n    double len2() const{ return x*x + y*y; }\n    double len() const{ return sqrt(len2()); }\n    \n    vec& norm() { return *this = *this / len(); }\n    vec& rot(double rad) {\n        return  *this = vec(x*cos(rad) - y*sin(rad), x*sin(rad) + y*cos(rad));\n    }\n\n    bool operator< (const vec& v) const{\n        return dcmp(x-v.x) < 0 || (dcmp(x-v.x)==0 && dcmp(y-v.y) < 0);\n    }\n};\n\nstruct line{\n    vec u, v; // u + x*v\n\n    line() {}\n    line(vec _u, vec _v)\n        :u(_u), v(_v) {}\n\n    vec get(double x) const{ return u + v * x; }\n    bool on_left(vec p) const{ return dcmp(v.cross(p - u)) > 0; }\n    vec proj(vec p) const{ return get(v.dot(p - u)); }\n    vec line_intersection(line b) const{\n        return b.u + b.v * b.v.cross(b.u-u) / v.cross(b.v);\n    }\n};\n\nline makeline(vec a, vec b) {\n    return line(a, (b - a).norm());\n}\n\nbool segment_intersection(vec a, vec b, vec c, vec d) {\n    line x = line(a, b-a), y = line(c, d-c);\n    return x.on_left(c) != x.on_left(d) && y.on_left(a) != y.on_left(b);\n}\n\nbool is_convex(const std::vector<vec>& p) {\n    for (size_t i = 0, j = 1, k; j < p.size(); i++, j++) {\n        k = (j + 1) % p.size();\n        if ((p[j] - p[i]).cross(p[k] - p[j]) < 0)\n            return false;\n    }\n    return true;\n}\n\nstd::vector<vec> convex_hull(std::vector<vec> p) {\n    std::sort(p.begin(), p.end());\n    std::vector<vec> ch;\n    for (size_t i = 0; i < p.size(); ++i) {\n        while (ch.size() > 1 && makeline(ch[ch.size()-2], p[i]).on_left(ch[ch.size()-1]))\n            ch.pop_back();\n        ch.push_back(p[i]);\n    }\n    size_t k = ch.size();\n    for (int i = p.size() - 2; i >= 0; --i) {\n        while (ch.size() > k && makeline(ch[ch.size()-2], p[i]).on_left(ch[ch.size()-1]))\n            ch.pop_back();\n        ch.push_back(p[i]);\n    }\n    ch.pop_back();\n    return ch;\n}\n\nstd::pair<vec, vec> convex_diameter(const std::vector<vec> &p) {\n    int xmax = 0, xmin = 0, n = p.size();\n    for (int i = 1; i < n; ++i) {\n        if (p[i].x > p[xmax].x) xmax = i;\n        if (p[i].x < p[xmin].x) xmin = i;\n    }\n    \n    int i = xmax, j = xmin;\n    int u = xmax, v = xmin;\n    double ans = (p[xmax] - p[xmin]).len2();\n    \n    do {\n        if ((p[i] - p[(i + 1) % n]).cross(p[j] - p[(j + 1) % n]) < 0) i = (i + 1) % n;\n        else j = (j + 1) % n;\n\n        double dist = (p[i] - p[j]).len2();\n        if (dist > ans) {\n            ans = dist;\n            u = i; v = j;\n        }\n    }while(i != xmax || j != xmin);\n    return std::make_pair(p[u], p[v]);\n}\n\ndouble polygon_area(const std::vector<vec>& v) {\n    double area = 0;\n    for (size_t i = 0; i < v.size(); ++i)\n        area += v[i].cross(v[(i + 1) % v.size()]);\n    return area * 0.5;\n}\n\nint relation(const std::vector<vec>& p, const vec& v) {\n    int ret = -1, n = p.size();\n    for (int i = 0; i < n; ++i) {\n        vec a = p[i] - v, b = p[(i + 1) % n] - v;\n        if (a.y > b.y) std::swap(a, b);\n        if (a.y <= 0 && 0 < b.y && a.cross(b) < 0)\n            ret = -ret;\n        if (a.cross(b) == 0 && a.dot(b) <= 0) return 0;\n    }\n    \n    return ret; // 1 - contain, -1 - out\n}\n\n// end template\n\nint main() {\n    vec p1, p2;\n    line l;\n    scanf(\"%lf%lf%lf%lf\", &p1.x, &p1.y, &p2.x, &p2.y);\n    l = makeline(p1, p2);\n\n    int q; scanf(\"%d\", &q);\n    while (q--) {\n        vec p, a;\n        scanf(\"%lf%lf\", &p.x, &p.y);\n\n        a = l.proj(p);\n        printf(\"%.10f %.10f\\n\", a.x, a.y);\n    }\n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//#define _GLIBCXX_DEBUG\n#include <bits/stdc++.h>\n#define rep(i, n) for(int i=0; i<n; ++i)\nusing namespace std;\n\nconst double EPS = 1e-10;\ndouble add(double a, double b) {\n    if(abs(a+b) < EPS*(abs(a)+abs(b))) return 0;\n    return a+b;\n}\nstruct Vector {\n    double x, y;\n    Vector() {}\n    Vector(double x, double y):x(x), y(y) {}\n    Vector operator+(Vector v) {return Vector(add(x, v.x), add(y, v.y));}\n    Vector operator-(Vector v) {return Vector(add(x, -v.x), add(y, -v.y));}\n    Vector operator*(double d) {return Vector(x*d, y*d);}\n    Vector operator/(double d) {return Vector(x/d, y/d);}\n    double dot(Vector v) {return add(x*v.x, y*v.y);}\n    double cross(Vector v) {return add(x*v.y, -y*v.x);}\n};\ndouble dist(Vector v, Vector u) {return ((v-u).dot(v-u));}\nbool on_seg(Vector v1, Vector v2, Vector p) {\n    return (v1-p).cross(v2-p) == 0 && (v1-p).dot(v2-p) <= 0;\n}\n//v1-v2とu1-u2の交点\nVector intersection(Vector v1, Vector v2, Vector u1, Vector u2) {\n    assert((v1-v2).cross(u1-u2)); //2直線が平行だとだめ\n    return v1 + (v2-v1)*((u2-u1).cross(u1-v1)/(u2-u1).cross(u2-v1));\n}\nbool cmp_x(const Vector &v, const Vector &u) {\n    if(v.x != u.x) return v.x < u.x;\n    return v.y < u.y;\n}\n//頂点数nの頂点集合vv\nvector<Vector> convex_hull(vector<Vector> &vv, int n) {\n    sort(vv.begin(), vv.end(), cmp_x);\n    int k = 0;\n    vector<Vector> res(n*2);\n    for(int i = 0; i < n; i++) {\n        while(k > 1 && (res[k-1]-res[k-2]).cross(vv[i]-res[k-1]) <= 0) k--;\n        res[k++] = vv[i];\n    }\n    for(int i = n-2, t = k; i >= 0; i--) {\n        while(k > t && (res[k-1]-res[k-2]).cross(vv[i]-res[k-1]) <= 0) k--;\n        res[k++] = vv[i];\n    }\n    res.resize(k-1);\n    return res;\n}\nistream &operator>>(istream &is, Vector &v) {return is >> v.x >> v.y;}\nostream &operator<<(ostream &os, const Vector &v) {return os << v.x << ' ' << v.y;}\n\nsigned main() {\n    cout << fixed << setprecision(15);\n    Vector p1, p2;\n    cin >> p1 >> p2;\n    int q;\n    cin >> q;\n    while(q--) {\n        Vector Q;\n        cin >> Q;\n        cout << p1+(p2-p1)*(Q-p1).dot(p2-p1)/dist(p1, p2) << '\\n';\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n \nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\nint main(){\n  double x1,y1,x2,y2;\n  cin>>x1>>y1>>x2>>y2;\n  Line base=Line(Point(x1,y1),Point(x2,y2));\n  int q;cin>>q;\n  while(q--){\n    cin>>x1>>y1;\n    Point p=project(base,Point(x1,y1));\n    printf(\"%.8lf %.8lf\\n\",p.x,p.y);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//#include<bits/stdc++.h>\n#include<iostream>\n#include<cmath>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\ntypedef double db;\nconst db eps = 1e-12, pi = acos(-1);\nint sign(db x) {return x < -eps ? -1 : x > eps;}\nint cmp(db x, db y) {return sign(x - y);}\nint intersect(db l1, db r1, db l2, db r2) {\n    if (l1 > r1) swap(l1, r1); if (l2 > r2) swap(l2, r2); return cmp(r1, l2) != -1 && cmp(r2, l1) != -1;\n}\nint inmid(db k1, db k2, db k3) {return sign(k1 - k3) * sign(k2 - k3) <= 0;}//k3 in [k1,k2]?1:0\nstruct Point {\n    db x, y;\n    Point operator + (const Point & a)const {return Point{a.x + x, a.y + y};}\n    Point operator - (const Point & a)const {return Point{x - a.x, y - a.y};}\n    Point operator * (db a) const {return Point{x * a, y * a};}\n    Point operator / (db a) const {return Point{x / a, y / a};}\n    bool operator < (const Point p) const {int a = cmp(x, p.x); if (a) return a == -1; return cmp(y, p.y) == -1;}\n    bool operator == (const Point & a) const {return cmp(x, a.x) == 0 && cmp(y, a.y) == 0;}\n    int getP() const {return sign(y) == 1 || (sign(y) == 0 && sign(x) == -1);}\n    void input() {scanf(\"%lf%lf\", &x, &y);}\n};\ndb cross(Point p1, Point p2) {return p1.x * p2.y - p1.y * p2.x;}\ndb cross(Point p0, Point p1, Point p2) {return cross(p1 - p0, p2 - p0);}\ndb dot(Point p1, Point p2) {return p1.x * p2.x + p1.y * p2.y;}\nint inmid(Point k1, Point k2, Point k3) {return inmid(k1.x, k2.x, k3.x) && inmid(k1.y, k2.y, k3.y);}\nbool compareangle(Point p1, Point p2) {//Polar Angle Sort\n    return p1.getP() < p2.getP() || (p1.getP() == p2.getP() && sign(cross(p1, p2)) > 0);\n}\nstruct Line {\n    Point s, e;\n    void input() {scanf(\"%lf%lf%lf%lf\", &s.x, &s.y, &e.x, &e.y);}\n    Point vec() {return e - s;}\n    db length() {return sqrt(dot(s - e, s - e));}\n    db length2() {return dot(s - e, s - e);}\n};\nint onS(Line l, Point p) {// On Seg?\n    return inmid(l.s, l.e, p) && sign(cross(l.s - p, l.e - l.s)) == 0;\n}\nbool checkLL(Line l1, Line l2) {\n    return cmp(cross(l1.s, l2.s, l2.e), cross(l1.e, l2.s, l2.e)) != 0;\n}\nbool checkLS(Line l1, Line l2) {//Intersection of Line l1 and Seg l2?\n    return sign(cross(l2.s, l1.s, l1.e)) * sign(cross(l2.e, l1.s, l1.e)) <= 0;\n}\nint checkSS(Line l1, Line l2) {//Intersection of Two Seg?1:0\n    return intersect(l1.s.x, l1.e.x, l2.s.x, l2.e.x) && intersect(l1.s.y, l1.e.y, l2.s.y, l2.e.y) && checkLS(l1, l2) && checkLS(l2, l1);\n}\nPoint project(Line l, Point p) {\n    return l.s + l.vec() * dot(p - l.s, l.vec()) / l.length2();\n}\nPoint reflect(Line l, Point p) {//Mirror Point\n    return project(l, p) * 2 - p;\n}\nPoint getLL(Line l1, Line l2) {//Intersection Point of Line l1,l2\n    db w1 = cross(l2.s, l1.s, l2.e), w2 = cross(l2.s, l2.e, l1.e); return (l1.s * w2 + l1.e * w1) / (w1 + w2);\n}\ndb area(vector<Point> A) {//Anticlockwise\n    db ans = 0;\n    for (int i = 0; i < A.size(); i++) ans += cross(A[i], A[(i + 1) % A.size()]);\n    return ans / 2;\n}\nint contain(vector<Point>A, Point p) {//2:in 1:on 0:out\n    int ans = 0; A.push_back(A[0]);\n    for (int i = 1; i < A.size(); i++) {\n        Line l = {A[i - 1], A[i]};\n        if (onS(l, p)) return 1; if (cmp(l.s.y, l.e.y) > 0) swap(l.s, l.e);\n        if (cmp(l.s.y, p.y) >= 0 || cmp(l.e.y, p.y) < 0) continue;\n        if (sign(cross(l.e, l.s, p)) < 0)ans ^= 1;\n    }\n    return ans << 1;\n}\nint main() {\n    Line l;l.input();\n    int Q;cin>>Q;while(Q--){\n        Point p;p.input();\n        p=project(l,p);\n        printf(\"%.10lf %.10lf\\n\",p.x,p.y);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define PI 3.141592653589793238\n#define int long long\n \nusing namespace std;\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nstruct Point{\n  double x,y;\n  Point(){}\n  Point(double x,double y) :x(x),y(y){}\n  Point operator + (Point p) {return Point(x+p.x,y+p.y);}\n  Point operator - (Point p) {return Point(x-p.x,y-p.y);}\n  Point operator * (double k) {return Point(x*k,y*k);}\n  Point operator / (double k) {return Point(x/k,y/k);}\n  double norm(){return x*x+y*y;}\n  double abs(){return sqrt(norm());}\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n  }\n};\n\nistream &operator >> (istream &is,Point &p){\n  is>>p.x>>p.y;\n  return is;\n}\n\nostream &operator << (ostream &os,Point p){\n  os<<fixed<<setprecision(12)<<p.x<<\" \"<<p.y;\n  return os;\n}\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\nstruct Segment{\n  Point p1,p2;\n  Segment(){}\n  Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\ntypedef Segment Line;\n\nstruct Circle{\n  Point c;\n  double r;\n  Circle(){}\n  Circle(Point c,double r):c(c),r(r){}\n};\n\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); \n}\n\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/norm(base);\n  return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p+(project(s,p)-p)*2.0;\n}\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1-p0;\n  Vector b = p2-p0;\n  if(cross(a,b) > EPS) return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS) return CLOCKWISE;\n  if(dot(a,b) < -EPS) return ONLINE_BACK;\n  if(a.norm()<b.norm()) return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3)*ccw(p1,p2,p4) <= 0 &&\n\t  ccw(p3,p4,p1)*ccw(p3,p4,p2) <= 0 );\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2-s.p1,p-s.p1) < 0.0 ) return abs(p-s.p1);\n  if(dot(s.p1-s.p2,p-s.p2) < 0.0 ) return abs(p-s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2)) return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n\t     min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  Vector pr=project(l,c.c);\n  Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n  double base=sqrt(c.r*c.r-norm(pr-c.c));\n  return make_pair(pr+e*base,pr-e*base);\n}\n\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r)*a,sin(r)*a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  double d=abs(c1.c-c2.c);\n  double a=acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n  double t=arg(c2.c-c1.c);\n  return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\nint contains(Polygon g,Point p){\n  int n=g.size();\n  bool x=false;\n  for(int i=0;i<n;i++){\n    Point a=g[i]-p,b=g[(i+1)%n]-p;\n    if(fabs(cross(a,b)) < EPS && dot(a,b) < EPS) return 1;\n    if(a.y>b.y) swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS ) x = !x;\n  }\n  return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size()<3) return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n  l.push_back(s[s.size()-1]);\n  l.push_back(s[s.size()-2]);\n  for(int i=2;i<(int)s.size();i++){\n    for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  } \n  for(int i=s.size()-3;i>=0;i--){\n    for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i=u.size()-2;i>=1;i--) l.push_back(u[i]);\n  return l;\n} \n\ndouble area(Polygon s){\n  double res=0;\n  for(int i=0;i<(int)s.size();i++){\n    res+=cross(s[i],s[(i+1)%s.size()])/2.0;\n  }\n  return abs(res);\n}\n\n\nPoint getCrossPointLL(Line l1,Line l2){\n  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);\n  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);\n  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1;\n  return l2.p1+(l2.p2-l2.p1)*(b/a);\n}\n\nPolygon convexCut(Polygon p,Line l){\n  Polygon q;\n  for(int i=0;i<(int)p.size();i++){\n    Point a=p[i],b=p[(i+1)%p.size()];\n    if(ccw(l.p1,l.p2,a)!=-1) q.push_back(a);\n    if(ccw(l.p1,l.p2,a)*ccw(l.p1,l.p2,b)<0)\n      q.push_back(getCrossPointLL(Line(a,b),l));\n  }\n  return q;\n}\n\nLine bisector(Point p1,Point p2){\n  Circle c1=Circle(p1,abs(p1-p2)),c2=Circle(p2,abs(p1-p2));\n  pair<Point,Point> p=getCrossPoints(c1,c2);\n  if(cross(p2-p1,p.first-p1)>0) swap(p.first,p.second);\n  return Line(p.first,p.second);\n}\n\n\nVector spin(Vector v,double theta){\n  Vector res;\n  res.x=cos(theta)*v.x-sin(theta)*v.y;\n  res.y=sin(theta)*v.x+cos(theta)*v.y;\n  return res;\n}\n\nvector<Line> corner(Line l1,Line l2){\n  vector<Line> res;\n  if(isParallel(l1,l2)){\n    double d=getDistanceLP(l1,l2.p1)/2.0;\n    Vector v1=l1.p2-l1.p1;\n    v1=v1/v1.abs()*d;\n    Point p=l2.p1+spin(v1,90.0*(PI/180.0));\n    double d1=getDistanceLP(l1,p);\n    double d2=getDistanceLP(l2,p);\n    if(abs(d1-d2)>d){\n      p=l2.p1+spin(v1,-90.0*(PI/180.0));\n    }\n    res.push_back(Line(p,p+v1));\n  }else{\n    Point p=getCrossPointLL(l1,l2);\n    Vector v1=l1.p2-l1.p1,v2=l2.p2-l2.p1;\n    v1=v1/v1.abs();\n    v2=v2/v2.abs();\n    res.push_back(Line(p,p+(v1+v2)));\n    res.push_back(Line(p,p+spin(v1+v2,90.0*(PI/180.0))));\n  }\n  return res;\n}\n\nsigned main(){\n  Point p1,p2;\n  cin>>p1>>p2;\n  int q;\n  cin>>q;\n  while(q--){\n    Point p;\n    cin>>p;\n    cout<<project(Line(p1,p2),p)<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ndouble xp1,yp1,xp2,yp2,x,y,l1,r1,l2,r2,sum;\nint n;\nint main(){\n\tscanf(\"%lf%lf%lf%lf\",&xp1,&yp1,&xp2,&yp2);\n\tl1=xp2-xp1;\n\tr1=yp2-yp1;\n\tscanf(\"%d\",&n);\n\tfor(int i=1; i<=n; i++){\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t\tl2=x-xp1;\n\t\tr2=y-yp1;\n\t\tsum=l1*l2+r1*r2;\n\t\tprintf(\"%.8lf %.8lf\\n\",xp1+l1*sum/((l1*l1)+(r1*r1)),yp1+r1*sum/((l1*l1)+(r1*r1)));\n\t}\n} \n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define EPS 1e-10\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#define rep(i,n) for(int i=0;i<n;++i)\ntypedef long long ll;\nusing namespace std;\n\nstruct Point {\n    double x,y;\n    Point(){}\n    Point(double x, double y): x(x),y(y){}\n    Point operator+(Point p) {return Point(x+p.x, y+p.y);}\n    Point operator-(Point p) {return Point(x-p.x, y-p.y);}\n    Point operator*(double k) {return Point(x*k,y*k);}\n    double norm(){return x*x+y*y;}\n    double abs(){sqrt(norm());}\n    bool operator == (const Point &p) const {return equals(x,p.x)&&equals(y,p.y);} \n};\ntypedef Point P;\n\nstruct Segment {\n    Point p1,p2;\n    Segment(){}\n    Segment(Point p1, Point p2):p1(p1),p2(p2){}\n};\n\ndouble dot(Point a, Point b) {return a.x*b.x+a.y*b.y;}\n\nPoint project(Segment s, Point p) {\n    Point base = s.p2-s.p1;\n    double r = dot(p-s.p1,base)/base.norm();\n    return s.p1+(base*r);\n}\n\nint main() {\n    double x1,y1,x2,y2;\n    cin >>x1>>y1>>x2>>y2;\n    Point p1(x1,y1); Point p2(x2,y2);\n    Segment s(p1,p2);\n    int q; cin >> q;\n    rep(i,q) {\n        double x0,y0;\n        cin >>x0>>y0;\n        Point ans = project(s,Point(x0,y0));\n        cout << fixed << setprecision(8);\n        cout << ans.x << \" \" << ans.y << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <math.h>\nusing namespace std;\n\ntypedef struct vec2 {\n\tdouble x, y;\n\tvec2(){}\n\tvec2(int a, int b) {\n\t\tx = a;\n\t\ty = b;\n\t}\n\tvec2(double a, double b) {\n\t\tx = a;\n\t\ty = b;\n\t}\n\tvec2 operator*(double l) {\n\t\treturn{ x*l,y*l };\n\t}\n\tvec2 operator-(const vec2 &r) {\n\t\treturn{ x - r.x,y - r.y };\n\t}\n\tvec2 operator+(const vec2 &r) {\n\t\treturn{ x + r.x,y + r.y };\n\t}\n\tdouble dis() {\n\t\treturn sqrt(pow(x, 2) + pow(y, 2));\n\t}\n} vec2;\ndouble dot(vec2 v1, vec2 v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\n\nvec2 v[4];\nint q, t1, t2;\n\nvoid read(int i) {\n\tscanf(\"%d%d\", &t1, &t2);\n\tv[i] = vec2(t1, t2);\n}\n\nint main(){\n\tread(0);\n\tread(1);\n\tv[1] = v[1] - v[0];\n\tscanf(\"%d\", &q);\n\tfor (int I = 0; I < q; I++) {\n\t\tread(2);\n\t\tv[2] = v[2] - v[0];\n\t\tv[3] = v[1] * (dot(v[1], v[2]) *(1.0 / pow(v[1].dis(),2)));\n\t\tv[3] = v[0] + v[3];\n\t\tprintf(\"%.9f %.9f\\n\", v[3].x, v[3].y);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <queue>\n#include <vector>\n#include <algorithm>\n#include <set>\n#include <math.h>\n#include <tuple>\n#include <string.h>\n#include <map>\n#include <iomanip>\n#include <time.h>\nusing namespace std;\ntypedef long long ll;\n\ndouble square(pair<int, int> p) {\n    return p.first * p.first + p.second * p.second;\n}\n\npair<int, int> add(pair<int, int> p, pair<int, int> q) {\n    return make_pair(p.first + q.first, p.second + q.second);\n}\n\ndouble dot(pair<int, int> p, pair<int, int> q) {\n    return p.first * q.first + p.second * q.second;\n}\n\nint main() {\n    int x1, y1, x2, y2, q;\n    cin >> x1 >> y1 >> x2 >> y2;\n    pair<int, int> a = make_pair(x2 - x1, y2 - y1);\n\n    cin >> q;\n    while (q--) {\n        int x, y;\n        cin >> x >> y;\n\n        pair<int, int> b = make_pair(x - x1, y - y1);\n        double r = dot(a, b) / square(a);\n\n        double cx = x1 + r * (x2 - x1), cy = y1 + r * (y2 - y1);\n        cout << setprecision(16) << cx << \" \" << cy << endl;\n\n\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <iomanip>\n#include <numeric>\n#include <utility>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n#include <unordered_map>\n#include <unordered_set>\n\nusing namespace std;\n\n#define ll long long\n#define ull unsigned long long\n#define INF (1 << 29)\n#define LLINF (1LL << 61)\n#define MOD7 1000000007\n#define MOD9 1000000009\n#define EPS 1e-9\n#define P pair<int, int>\n#define pii pair<int, int>\n#define pll pair<ll, ll>\n#define pul pair<ull, ull>\n#define all(a) (a).begin(), (a).end()\n#define FOR(i,a,b) for (int i=(a);i<(b);++i)\n#define RFOR(i,a,b) for (int i=(b)-1;i>=(a);--i)\n#define REP(i,n) for (int i=0;i<(n);++i)\n#define RREP(i,n) for (int i=(n)-1;i>=0;--i)\n\nvoid YES() { cout << \"YES\" << endl; }\nvoid NO() { cout << \"NO\" << endl; }\nvoid Yes() { cout << \"Yes\" << endl; }\nvoid No() { cout << \"No\" << endl; }\nvoid yes() { cout << \"yes\" << endl; }\nvoid no() { cout << \"no\" << endl; }\n\nclass Point {\npublic:\n\tdouble x, y;\n\t\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double k) { return Point(x * k, y * k); }\n\tPoint operator/(double k) { return Point(x / k, y / k); }\n\n\tbool operator<(const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator==(const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n\tfriend istream& operator>>(istream& stream, Point& p) {\n\t\tdouble x, y;\n\t\tstream >> x >> y;\n\t\tp.x = x;\n\t\tp.y = y;\n\t\treturn stream;\n\t}\n\n\tfriend ostream& operator<<(ostream& stream, const Point& p) {\n\t\tstream << fixed << setprecision(10) << p.x << \" \" << p.y;\n\t\treturn stream;\n\t}\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tdouble dot(Point v) {\n\t\treturn x * v.x + y * v.y;\n\t}\n\n\tdouble cross(Point v) {\n\t\treturn x * v.y - y * v.x;\n\t}\n};\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\n\tSegment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\n\tPoint project(Point p) {\n\t\tPoint base = p2 - p1;\n\t\tdouble r = (p - p1).dot(base) / base.norm();\n\t\treturn p1 + base * r;\n\t}\n};\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) : c(c), r(r) {}\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\ntypedef vector<Point> Polygon;\n\nint main() {\n\tPoint p1, p2, p;\n\tint q;\n\n\tcin >> p1 >> p2 >> q;\n\tSegment s(p1, p2);\n\twhile (q--) {\n\t\tcin >> p;\n\t\tcout << s.project(p) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define dd double\n\nusing namespace std;\n\nint main()\n{\n    dd xa,ya,xb,yb,x1,y1,a,b,c,x,y;\n    scanf(\"%lf %lf %lf %lf\",&xa, &ya, &xb, &yb);\n    int q;\n    cin >> q;\n    a = yb - ya;\n    b = xa - xb;\n    c = xb * ya - xa * yb;\n\n    while(q--){\n        scanf(\"%lf %lf\",&x1,&y1);\n        if(xb == xa){\n            x = xa;\n            y = y1;\n            printf(\"%0.10f %0.10f\\n\",x,y);\n            continue;\n        }\n        if(yb == ya){\n            x = x1;\n            y = yb;\n            printf(\"%0.10f %0.10f\\n\",x,y);\n            continue;\n        }\n        dd k = (a * y1) - (b * x1);\n        x =   (b * k + a * c)/(-a * a - b * b);\n        y =  ( c * b - a * k) /(-a * a  - b * b);\n\n        printf(\"%0.10f %0.10f\\n\",x,y);\n       // cout << fixed << setprecision(18) << x << \" \" << y << endl;\n    }\n\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define rep(n) for(int i=0;i<n;i++)\n#define repp(j, n) for(int j=0;j<n;j++)\n#define reppp(i, m, n) for(int i=m;i<n;i++)\n#define all(c) c.begin(), c.end()\n#define rall(c) c.rbegin(), c.rend()\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<ll, ll> Pll;\ntypedef pair<int, int> Pii;\nstruct edge{int from, to; ll cost;};\n\nconst double EPS = 1e-9;\n\nclass Point{\n    public: \n    long double x,y;\n    \n    Point(long double x = 0.0, long double y = 0.0): x(x), y(y) {}\n    \n    Point operator + (Point p) {\n        return Point(x+p.x, y+p.y);\n    }\n    Point operator - (Point p) {\n        return Point(x-p.x, y-p.y);\n    }\n    Point operator * (long double a) {\n        return Point(x*a, y*a);\n    }\n    Point operator / (long double a) {\n        return Point(x/a, y/a);\n    }\n    bool operator < (const Point &p) const {\n        return (x != p.x ? x < p.x : y < p.y);\n    }\n    bool operator == (const Point &p) const {\n        return fabsl(x - p.x) < EPS && fabsl(y - p.y) < EPS;\n    }\n    \n    long double abs() {\n        return sqrt(norm());\n    }\n    \n    long double norm() {\n        return x*x + y*y;\n    }\n    \n    long double dot(Point p) {\n        return x*p.x + y*p.y;\n    }\n    \n    long double cross(Point p) {\n        return x*p.y - y*p.x;\n    }\n};\n\nclass Segment{\n    public: \n    Point p,q;\n    long double grad;\n    \n    Segment(Point p, Point q) {\n        this->p = p;\n        this->q = q;\n        this->grad = (q.y-p.y)/(q.x-p.x);\n    }\n    \n};\n\nPoint projection(Segment s, Point p){\n    Point base = s.q - s.p;\n    long double t = base.dot(p-s.p) / base.abs();\n    return s.p + base * (t / base.abs());\n}\n\nint main(){\n    int n;\n    long double x,y;\n    Point p[2];\n    rep(2){\n        scanf(\"%Lf %Lf\", &x, &y);\n        p[i] = Point(x, y);\n    }\n    Segment s = Segment(p[0], p[1]);\n\n    cin >> n;\n\n    rep(n){\n        scanf(\"%Lf %Lf\", &x, &y);\n        Point q = Point(x, y);\n        Point ans = projection(s, q);\n        printf(\"%.10Lf %.10Lf\\n\", ans.x, ans.y);\n    }\n\n}\n\n"
  },
  {
    "language": "C++",
    "code": "// include\n//------------------------------------------\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n// conversion\n//------------------------------------------\ninline int toInt(string s) {\n    int v;\n    istringstream sin(s);\n    sin >> v;\n    return v;\n}\ntemplate <class T>\ninline string toString(T x) {\n    ostringstream sout;\n    sout << x;\n    return sout.str();\n}\n\n// math\n//-------------------------------------------\ntemplate <class T>\ninline T sqr(T x) {\n    return x * x;\n}\n\n// typedef\n//------------------------------------------\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<int, int> PII;\ntypedef long long LL;\n\n// container util\n//------------------------------------------\n#define ALL(a) (a).begin(), (a).end()\n#define RALL(a) (a).rbegin(), (a).rend()\n#define PB push_back\n#define MP make_pair\n#define SZ(a) int((a).size())\n#define EACH(i, c) \\\n    for (typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)\n#define EXIST(s, e) ((s).find(e) != (s).end())\n#define SORT(c) sort((c).begin(), (c).end())\n\n// repetition\n//------------------------------------------\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define REPI(itr, ds) for (auto itr = ds.begin(); itr != ds.end(); itr++)\n\n// constant\n//--------------------------------------------\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\nconst int INF_INT = 2147483647;\nconst LL INF_LL = 9223372036854775807;\n\n// clear memory\n//--------------------------------------------\n#define CLR(a) memset((a), 0, sizeof(a))\n\n// vector\n//--------------------------------------------\ntemplate <typename T>\nistream &operator>>(istream &is, vector<T> &vec) {\n    for (T &x : vec) is >> x;\n    return is;\n}\n\n// pair\n//--------------------------------------------\ntemplate <typename T, typename U>\nostream &operator<<(ostream &os, pair<T, U> &pair_var) {\n    os << \"(\" << pair_var.first << \", \" << pair_var.second << \")\";\n    return os;\n}\n\n// vector\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, const vector<T> &vec) {\n    os << \"{\";\n    for (int i = 0; i < vec.size(); i++) {\n        os << vec[i] << (i + 1 == vec.size() ? \"\" : \", \");\n    }\n    os << \"}\";\n    return os;\n}\n\n// list\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, const list<T> &lst) {\n    os << \"{\";\n    REPI(itr, lst) {\n        os << *itr;\n        itr++;\n        if (itr != lst.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// map\n//--------------------------------------------\ntemplate <typename T, typename U>\nostream &operator<<(ostream &os, map<T, U> &map_var) {\n    os << \"{\";\n    REPI(itr, map_var) {\n        os << *itr;\n        itr++;\n        if (itr != map_var.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// set\n//--------------------------------------------\ntemplate <typename T>\nostream &operator<<(ostream &os, set<T> &set_var) {\n    os << \"{\";\n    REPI(itr, set_var) {\n        os << *itr;\n        itr++;\n        if (itr != set_var.end()) os << \", \";\n        itr--;\n    }\n    os << \"}\";\n    return os;\n}\n\n// dump\n//--------------------------------------------\n#define DUMPOUT cerr\n\nvoid dump_func() { DUMPOUT << endl; }\ntemplate <class Head, class... Tail>\nvoid dump_func(Head &&head, Tail &&... tail) {\n    DUMPOUT << head;\n    if (sizeof...(Tail) > 0) {\n        DUMPOUT << \", \";\n    }\n    dump_func(std::move(tail)...);\n}\n#ifdef DEBUG_\n#define DEB\n#define dump(...)                                                       \\\n    DUMPOUT << \"  \" << string(#__VA_ARGS__) << \": \"                     \\\n            << \"[\" << to_string(__LINE__) << \":\" << __FUNCTION__ << \"]\" \\\n            << endl                                                     \\\n            << \"    \",                                                  \\\n        dump_func(__VA_ARGS__)\n#else\n#define DEB if (false)\n#define dump(...)\n#endif\n\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator+(Point p) { return Point(x + p.x, y + p.y); }\n    Point operator-(Point p) { return Point(x - p.x, y - p.y); }\n    Point operator*(double a) { return Point(x * a, y * a); }\n    Point operator/(double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator==(const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n};\n\ntypedef Point Vector;\n\nclass Segment {\npublic:\n    Point p1, p2;\n    Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\nclass vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\n\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nint main(void) {\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Segment s = Segment(p1, p2);\n    int q;\n    cin >> q;\n    Point p[q];\n    REP(i, q) { cin >> p[i].x >> p[i].y; }\n    REP(i, q) {\n        Point a = project(s, p[i]);\n        cout << fixed << setprecision(10) << a.x << \" \" << a.y << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\ntemplate<class T>\nstruct Vec2\n{\n\tVec2(){}\n\tVec2(T _x, T _y) : x(_x), y(_y) {}\n\n\tVec2 operator+(const Vec2& rhs) const { return Vec2(x + rhs.x, y + rhs.y); }\n\tVec2 operator-(const Vec2& rhs) const { return Vec2(x - rhs.x, y - rhs.y); }\n\tVec2 operator*(T s) const { return Vec2(x*s, y*s); }\n\tVec2 operator/(T s) const { return Vec2(x/s, y/s); }\n\tT dot(const Vec2& rhs) const { return x*rhs.x + y*rhs.y; }\n\tT cross(const Vec2& rhs) const { return x*rhs.y - y*rhs.x; }\n\tT sqlength() const { return x*x + y*y; }\n\tdouble length() const { return sqrt(sqlength()); }\n\tbool operator<(const Vec2& rhs) const\n\t{\n\t\tif (x != rhs.x) return x < rhs.x;\n\t\treturn y < rhs.y;\n\t}\n\n\tT x;\n\tT y;\n};\n\nint main()\n{\n\ttypedef Vec2<double> Vec;\n\tVec P[3];\n\tcin >> P[0].x >> P[0].y;\n\tcin >> P[1].x >> P[1].y;\n\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> P[2].x >> P[2].y;\n\n\t\tVec d1 = P[1] - P[0];\n\t\tVec d2 = P[2] - P[0];\n\t\tVec prj = d1 * d1.dot(d2) / d1.sqlength();\n\t\tVec ans = (prj - d2) + P[2];\n\t\tprintf(\"%.10f %.10f\\n\", ans.x, ans.y);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <complex>\n#include <iomanip>\n\nusing namespace std;\n\ntypedef complex<double> Point;\n\nostream& operator<<(ostream& os, const Point& p){\n    return os <<  p.real() << \" \" << p.imag();\n}\n\ninline double dot(const Point& a, const Point& b){\n    return real(conj(a) * b);\n}\n\nstruct Line : vector<Point> {\n    Line(const Point& a, const Point& b):vector<Point>{a, b}{}\n};\n\ninline Point proj(const Line& l, const Point& p){\n    double t = dot(p - l[0], l[1] - l[0]) / norm(l[1] - l[0]);\n    return l[0] + (l[1] - l[0]) * t;\n}\n\nint main(){\n    int x0, y0, x1, y1;\n    cin >> x0 >> y0 >> x1 >> y1;\n    Line l(Point(x0, y0), Point(x1, y1));\n    int q;\n    cin >> q;\n    while(q--){\n        int x2, y2;\n        cin >> x2 >> y2;\n        cout << fixed << setprecision(10) << proj(l, Point(x2, y2)) << '\\n';\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <math.h>\nconst double EPS = 1e-9;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\tvector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator * (double a) {\n\t\treturn vector(x * a, y * a);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}\n\tvector operator + (vector v) {\n\t\treturn vector(x + v.x, y + v.y);\n\t}\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double squ(vector v) {\n\treturn v.x*v.x + v.y*v.y;\n}\ninline double norm(vector v) {\n\treturn sqrt(squ(v));\n}\ninline vector pro(vector base, vector v, vector be) {\n\tdouble a = dot(base, v) / squ(base);\n\tvector v1 = base * a;\n\treturn v1 + be;\n}\ninline void print(vector v) {\n\tcout << v.x << \" \" << v.y << endl;\n}\nint main() {\n\tdouble x1, y1, x2, y2, q, x, y;\n\tcin >> x1 >> y1 >> x2 >> y2 >> q;\n\tvector be(x1, y1);\n\tvector base(x2 - x1, y2 - y1);\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tvector v(x, y);\n\t\tprint(pro(base, v, be));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int dx[]={0,1,0,-1,1,-1,-1,1};\nconst int dy[]={-1,0,1,0,1,1,-1,-1};\nconst int INF = 1<<30;\nconst double EPS = 1e-15;\n#define PB push_back\n#define mk make_pair\n#define fi first\n#define se second\n#define ll long long\n#define reps(i,j,k) for(int i = (j); i < (k); i++)\n#define rep(i,j) reps(i,0,j)\n#define MOD 1000000007\ntypedef pair<int,int> Pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x = _x;\n        y = _y;\n    }\n    Point operator + (Point p){\n        return Point(x+p.x,y+p.y);\n    }\n  \n    Point operator - (Point p){\n        return Point(x-p.x,y-p.y);\n    }\n  \n    Point operator * (double k){\n        return Point(k*x,k*y);\n    }\n     \n    Point operator * (Point p){\n        return Point(p.x*x-p.y*y,p.x*y+p.y*x);\n    }\n\n    Point operator / (double k){\n        return Point(x/k,y/k);\n    }\n    \n    Point operator = (Point p){\n        x = p.x;\n        y = p.y;\n        return *this;\n    }\n\n    bool operator<(const Point &p)const{\n        return x!=p.x?x<p.x:y<p.y;\n    }\n\n};\ndouble dot(Point p, Point q){\n    return p.x*q.x+p.y*q.y;\n}\n  \ndouble cross(Point p,Point q){\n    return p.x*q.y-q.x*p.y;\n}\n  \ndouble norm(Point p){\n    //?????????????????§?????????2???\n    return p.x*p.x+p.y*p.y;\n}\n  \ndouble pabs(Point p){\n    //?????????????????§??????\n    return sqrt(norm(p));\n}\nPoint UnitVector(Point a){\n    //??????????????????\n    return a/pabs(a);\n}\ntypedef vector<Point> Polygon;\nstruct Line : Polygon{\n    Line(){}\n    Line(Point p,Point q){\n        PB(p);\n        PB(q);  \n    }\n};\nstruct Circle{\n    Point p; //?????????\n    double r; //??????\n    Circle(){}\n    Circle(Point _p,double _r){\n        p = _p;\n        r = _r;\n    }\n};\nint ccw(Point a,Point b,Point c){\n    b = b-a;\n    c = c-a;\n    if(cross(b,c) > 0)return +1; //a???b ??§???????¨?????????????c ccw\n    if(cross(b,c) < 0)return -1; //a???b ??§????¨?????????????c ccw\n    if(dot(b,c) < 0)return +2; // c--a--b;\n    if(pabs(b)<pabs(c))return -2; //a--b--c\n    return 0; //a--c--b\n}\n\nPoint projection(Line l, Point p){\n    double t = dot(p-l[0],l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + (l[0]-l[1])*t;\n}\n\nbool intersectSS(Line l,Line m){\n    //l??¨m??????????????????????????????\n    return (ccw(l[0],l[1],m[0])*ccw(l[0],l[1],m[1])<EPS)&&\n            (ccw(m[0],m[1],l[0])*ccw(m[0],m[1],l[1])<EPS);\n}\n\nbool intersectSP(Line l, Point p){\n    //??????l??¨???p?????????????????????\n    return !ccw(l[0],l[1],p);\n}\n\ndouble distanceLP(Line l,Point p){\n    //??????l??¨???p????????¢\n    p = p - l[0];\n    l[1] = l[1] - l[0];\n    if(intersectSP(l,p))return 0.0;\n    return fabs(cross(p,l[1])/pabs(l[1]));\n}\n\nbool intersectLL(Line l,Line m){\n    return fabs(cross(l[1]-l[0],m[1]-m[0])) > EPS || //????????§??????\n            fabs(cross(l[1]-l[0],m[0]-l[0])) < EPS; //????????????\n}\n\nbool intersectCP(Circle c,Point p){\n    //???c??¨???p???????????????\n    //true->???c????????¨??????p????????¨????????????.\n    return fabs(pabs(p-c.p)-c.r)<EPS;\n}\n\nbool intersectCL(Circle c,Line l,Point *p,Point *q){\n    \n}\n\nint intersectCC(Circle a,Circle b,Point *p,Point *q){\n    double dist = pabs(a.p-b.p);\n    if(dist < fabs(a.r-b.r) || dist > a.r+b.r){\n        //????????????????????´??????????????¨???\n        //????????????????????¨???????????¨???\n        *p = Point(1e15,1e15);\n        *q = Point(1e15,1e15);\n        return 0;\n    }\n    else if(fabs(dist-a.r-b.r) < EPS){\n        //??????1?????§????????£???????????¨???\n        Point way;\n        way = b.p-a.p;\n        *p = a.p+UnitVector(way)*a.r;\n        *q = *p;\n        return 1;\n    }\n    else{\n        //??????2?????§????????£???????????¨???\n        if(a.r < b.r){\n            swap(a.r,b.r);\n            swap(a.p,b.p);\n        }\n        double s = (a.r + b.r + dist) / 2.0 ;\n        double area = sqrt(s * (s - a.r) * (s - b.r) * (s - dist));\n        double h = 2.0 * area / dist;\n\n        Point  v = b.p-a.p;\n        v = UnitVector(v);\n        Point  m = a.p + (v*sqrt(a.r*a.r-h*h));\n        Point  n = v * Point(0.0,1.0);\n        \n        *p = m + (n * h);\n        *q = m - (n * h);\n        return 2;\n    }\n}\n\ndouble TriangleArea(Point a,Point b,Point c){\n    b = b - a;\n    c = c - a;\n    return cross(b,c)*0.5; //?????????????????¨??????????????§??¨???\n}\n \ndouble VertexArea(Polygon v){\n    double subArea = 0.0;\n    rep(i,v.size()-1){\n        subArea += TriangleArea(v[0],v[i],v[i+1]);\n    }\n    return subArea; //?????????????????¨??????????????§??¨???\n}\n\nPoint crosspoint(Line l,Line m){\n    //??????l??¨??????m?????????\n    if(intersectSS(l,m) == false)return Point(INF,INF);\n    return m[0]+(m[1]-m[0])*cross(l[1]-l[0],l[1]-m[0])/cross(l[1]-l[0],m[1]-m[0]);\n}\n \nPolygon ConvexHull(Polygon v){\n    //??????????????????\n    int n = v.size();\n    int k = 0;\n    sort(v.begin(),v.end());\n    Polygon e(2*n);\n    for(int i=0;i<n;e[k++]=v[i++])\n        while(k>=2&&ccw(e[k-2],e[k-1],v[i])<=0)k--;\n    for(int i=n-2,t=k+1;i>=0;e[k++]=v[i--])\n        while(k>=t&&ccw(e[k-2],e[k-1],v[i])<=0)k--;\n    e.resize(k-1);\n    return e;\n}\n\nint main(){\n    double x,y;\n    Line l;\n    cin >> x >> y;\n    l.PB(Point(x,y));\n    cin >> x >> y;\n    l.PB(Point(x,y));\n    int Q;\n    cin >> Q;\n    while(Q--){\n        cin >> x >> y;\n        Point ret = projection(l,Point(x,y));\n        printf(\"%.8lf %.8lf\\n\",ret.x,ret.y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#pragma region Geometry\nconst double EPS=1e-8,PI=acos(-1);\ninline bool EQ(double a,double b){return fabs(b-a)<EPS;}\n\nstatic const int COUNTER_CLOCKWISE=1;\nstatic const int CLOCKWISE=-1;\nstatic const int ONLINE_BACK=2;\nstatic const int ONLINE_FRONT=-2;\nstatic const int ON_SEGMENT=0;\n\nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double x,double y):x(x),y(y){}\n    Point operator+(Point p) const {return Point{x+p.x,y+p.y};}\n    Point operator-(Point p) const {return Point{x-p.x,y-p.y};}\n    Point operator*(double t) const {return Point{x*t,y*t};}\n    Point operator*(Point p) const {return Point{x*p.x-y*p.y,x*p.y+y*p.x};}\n    Point operator/(double t) const {return Point{x/t,y/t};}\n    bool operator<(const Point &p) const {\n        return x!=p.x?x<p.x:y<p.y;\n    }\n    bool operator==(const Point &p) const {\n        return fabs(x-p.x)<EPS&&fabs(y-p.y)<EPS;\n    }\n    friend istream &operator>>(istream &is,Point &p){\n        is >> p.x >> p.y;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Point p){\n        os << fixed << setprecision(10) << p.x << ' ' << p.y;\n        return os;\n    }\n};\n\nstruct Line{\n    Point a,b;\n    Line(){}\n    Line(Point a,Point b):a(a),b(b){}\n    friend istream &operator>>(istream &is,Line &l){\n        is >> l.a >> l.b;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Line l){\n        os << l.a << \" to \" << l.b;\n        return os;\n    }\n};\n\nstruct Segment:Line{\n    Segment(){}\n    Segment(Point a,Point b):Line(a,b){}\n};\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point c,double r):c(c),r(r){}\n    friend istream &operator>> (istream &is,Circle &c){\n        is >> c.c >> c.r;\n        return is;\n    }\n    friend ostream &operator<<(ostream &os,Circle &c){\n        os << c.c << ' ' << c.r;\n        return os;\n    }\n};\n\ntypedef vector<Point> Polygon;\nistream &operator>>(istream &is,Polygon &p){\n    for (int i=0;i<p.size();++i) is >> p[i];\n    return is;\n}\n\ndouble dot(const Point &a,const Point &b){\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(const Point &a,const Point &b){\n    return a.x*b.y-a.y*b.x;\n}\ndouble norm(const Point &a){\n    return a.x*a.x+a.y*a.y;\n}\ndouble abs(const Point &a){\n    return sqrt(norm(a));\n}\n\nPoint proj(const Line &l,const Point &p){\n    double t=dot(p-l.a,l.b-l.a)/norm(l.b-l.a);\n    return l.a+(l.b-l.a)*t;\n}\nPoint refl(const Line &l,const Point &p){\n    return p+(proj(l,p)-p)*2.0;\n}\n\nPoint rotate(const Point &p,double theta){\n    return Point(cos(theta)*p.x-sin(theta)*p.y,sin(theta)*p.x+cos(theta)*p.y);\n}\ndouble arg(const Point &p){\n    return atan2(p.y,p.x);\n}\ndouble get_angle(const Point &a,const Point &b,const Point &c){\n    const Point v=b-a,w=c-b;\n    double alpha=arg(v),beta=arg(w);\n    if (alpha>beta) swap(alpha,beta);\n    double theta=beta-alpha;\n    return min(theta,2*PI-theta);\n}\n\nint ccw(const Point &a,Point b,Point c){\n    b=b-a,c=c-a;\n    if (cross(b,c)>EPS) return COUNTER_CLOCKWISE;\n    if (cross(b,c)<-EPS) return CLOCKWISE;\n    if (dot(b,c)<-EPS) return ONLINE_BACK;\n    if (norm(b)<norm(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\nbool orthogonal(const Point &a,const Point &b){\n    return EQ(dot(a,b),0.0);\n}\nbool orthogonal(const Point &a,const Point &b,const Point &c,const Point &d){\n    return orthogonal(b-a,d-c);\n}\nbool orthogonal(const Line &l,const Line &m){\n    return EQ(dot(l.b-l.a,m.b-m.a),0.0);\n}\nbool parallel(const Point &a,const Point &b){\n    return EQ(cross(a,b),0.0);\n}\nbool parallel(const Point &a,const Point &b,const Point &c,const Point &d){\n    return parallel(b-a,d-c);\n}\nbool parallel(const Line &l,const Line &m){\n    return EQ(cross(l.b-l.a,m.b-m.a),0.0);\n}\n\nbool intersect(const Line &l,const Point &p){\n    return abs(ccw(l.a,l.b,p))!=1;\n}\nbool intersect(const Line &l,const Line &m){\n    return abs(cross(l.b-l.a,m.b-m.a)>EPS||abs(cross(l.b-l.a,m.b-m.a))<EPS);\n}\nbool intersect(const Line &l,const Segment &s){\n    return cross(l.b-l.a,s.a-l.a)*cross(l.b-l.a,s.b-l.a)<EPS;\n}\nbool intersect(const Segment &s,const Point &p){\n    return ccw(s.a,s.b,p)==0;\n}\nbool intersect(const Segment &s,const Segment &t){\n    return ccw(s.a,s.b,t.a)*ccw(s.a,s.b,t.b)<=0&&ccw(t.a,t.b,s.a)*ccw(t.a,t.b,s.b)<=0;\n}\nbool intersect(const Circle &c,const Line &l){\n    return (norm(proj(l,c.c)-c.c)-c.r*c.r)<=EPS;\n}\nint intersect(const Circle &c,const Segment &s){\n    if (norm(proj(s,c.c)-c.c)-c.r*c.r>EPS) return 0;\n    double d1=abs(c.c-s.a),d2=abs(c.c-s.b);\n    if (d1<c.r+EPS&&d2<c.r+EPS) return 0;\n    if (d1<c.r-EPS&&d2>c.r+EPS||d1>c.r+EPS&&d2<c.r-EPS) return 1;\n    const Point h=proj(s,c.c);\n    if (dot(s.a-h,s.b-h)<0) return 2;\n    return 0;\n}\nint intersect(Circle c,Circle d){\n    if (c.r<d.r) swap(c,d);\n    double dist=abs(c.c-d.c);\n    if (c.r+d.r<dist) return 4;\n    if (EQ(c.r+d.r,dist)) return 3;\n    if (c.r-d.r<dist) return 2;\n    if (EQ(c.r-d.r,dist)) return 1;\n    return 0;\n}\n\ndouble distance(const Point &a,const Point &b){\n    return abs(b-a);\n}\ndouble distance(const Line &l,const Point &p){\n    return abs(p-proj(l,p));\n}\ndouble distance(const Line &l,const Line &m){\n    return intersect(l,m)?0:distance(l,m.a);\n}\ndouble distance(const Segment &s,const Point &p){\n    Point h=proj(s,p);\n    return intersect(s,h)?abs(h-p):min(abs(s.a-p),abs(s.b-p));\n}\ndouble distance(const Segment &s,const Segment &t){\n    if (intersect(s,t)) return 0;\n    return min({distance(s,t.a),distance(s,t.b),distance(t,s.a),distance(t,s.b)});\n}\ndouble distance(const Line &l,const Segment &s){\n    return intersect(l,s)?0:min(distance(l,s.a),distance(l,s.b));\n}\n\nPoint crosspoint(const Line &l,const Line &m){\n    double d1=cross(l.b-l.a,m.b-m.a),d2=cross(l.b-l.a,l.b-m.a);\n    if (EQ(abs(d1),0.0)&&EQ(abs(d2),0.0)) return m.a;\n    return m.a+(m.b-m.a)*d2/d1;\n}\nPoint crosspoint(const Segment &s,const Segment &t){\n    assert(intersect(s,t));\n    return crosspoint(Line(s),Line(t));\n}\nvector<Point> crosspoint(const Circle &c,const Line &l){\n    Point pr=proj(l,c.c);\n    Point e=(l.b-l.a)/abs(l.b-l.a);\n    if (EQ(distance(l,c.c),c.r)) return {pr};\n    double base=sqrt(c.r*c.r-norm(pr-c.c));\n    return {pr-e*base,pr+e*base};\n}\nvector<Point> crosspoint(const Circle &c,const Segment &s){\n    Line l=Line(s);\n    assert(intersect(c,l));\n    auto res=crosspoint(c,l);\n    if (intersect(c,l)==2) return res;\n    if (dot(l.a-res[0],l.b-res[0])<0) res.emplace_back(res[0]);\n    else res.pop_back();\n    return res;\n}\nvector<Point> crosspoint(const Circle &c,const Circle &d){\n    double dist=abs(c.c-d.c);\n    double a=acos((c.r*c.r+dist*dist-d.r*d.r)/(2*c.r*dist));\n    double t=arg(d.c-c.c);\n    Point p1=c.c+Point(cos(t+a),sin(t+a))*c.r,p2=c.c+Point(cos(t-a),sin(t-a))*c.r;\n    return {p1,p2};\n}\n\nCircle circumcenter(Point a,Point b,const Point &c){\n    a=(a-c)*0.5;\n    b=(b-c)*0.5;\n    Point center=c+crosspoint(Line(a,a*Point{1,1}),Line{b,b*Point{1,1}});\n    return Circle{center,abs(a-center)};\n}\nvector<Point> center_given_radius(const Point &a,const Point &b,const double &r){\n    Point m=(b-a)*0.5;\n    double d1=abs(m);\n    vector<Point> res;\n    if (EQ(d1,0.0)||d1>r) return res;\n    double d2=sqrt(r*r-d1*d1);\n    Point n=m*Point{0.0,1.0}*d2/d1;\n    res.emplace_back(a+m+n);\n    if (d2>EPS) res.emplace_back(a+m-n);\n    return res;\n}\n\nbool convex(const Polygon &p){\n    int n=p.size();\n    for (int i=0;i<n;++i){\n        if (ccw(p[(i+n-1)%n],p[i],p[(i+1)%n])==-1){\n            return false;\n        }\n    }\n    return true;\n}\n\nPolygon convex_hull(Polygon p){\n    int n=p.size(),k=0;\n    if (n<=2) return p;\n    sort(p.begin(),p.end());\n    Polygon ch(2*n);\n    for (int i=0;i<n;ch[k++]=p[i++]){\n        while(k>=2&&cross(ch[k-1]-ch[k-2],p[i]-ch[k-1])<EPS) --k;\n    }\n    for (int i=n-2,t=k+1;i>=0;ch[k++]=p[i--]){\n        while(k>=t&&cross(ch[k-1]-ch[k-2],p[i]-ch[k-1])<EPS) --k;\n    }\n    ch.resize(k-1);\n    return ch;\n}\n\n#pragma endregion\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    Point p1,p2; cin >> p1 >> p2;\n    Line l(p1,p2);\n    int q; cin >> q;\n    for (;q--;){\n        Point p0; cin >> p0;\n        cout << proj(l,p0) << '\\n';\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\ntemplate <typename T>\nvoid printv(const vector<T> &v)\n{\n    int sz = v.size();\n    for (int i = 0; i < sz; i++)\n    {\n        cout << v[i] << \" \\n\"[i == sz - 1];\n    }\n}\n\nusing ld = long double;\nusing Point = std::complex<ld>;\n\nconst ld eps = 1e-9, pi = acos(-1.0);\n\nnamespace std\n{\nbool operator<(const Point &lhs, const Point &rhs)\n{\n    if (lhs.real() < rhs.real() - eps)\n        return true;\n    if (lhs.real() > rhs.real() + eps)\n        return false;\n    return lhs.imag() < rhs.imag();\n}\n} // namespace std\n\nPoint input_point()\n{\n    ld x, y;\n    std::cin >> x >> y;\n    return Point(x, y);\n}\n\nbool eq(ld a, ld b)\n{\n    return (abs(a - b) < eps);\n}\n\nld dot(Point a, Point b)\n{\n    return real(conj(a) * b);\n}\n\nld cross(Point a, Point b)\n{\n    return imag(conj(a) * b);\n}\n\n// CCW::counter clockwise\nint ccw(Point a, Point b, Point c)\n{\n    b -= a;\n    c -= a;\n    if (cross(b, c) > eps)\n        return 1; // a,b,c : counter-clockwise\n    if (cross(b, c) < -eps)\n        return -1; // a,b,c : clockwise\n    if (dot(b, c) < 0)\n        return 2; // c,a,b : on a line\n    if (norm(b) < norm(c))\n        return -2; // a,b,c : on a line\n    return 0;      // a,c,b : on a line\n}\n\nclass Line\n{\npublic:\n    Point a, b;\n    Line() : a(Point(0, 0)), b(Point(0, 0)) {}\n    Line(Point a, Point b) : a(a), b(b) {}\n};\n\nld dot(Line l, Line m)\n{\n    return dot((l.a - l.b), (m.a - m.b));\n}\n\nclass Circle\n{\npublic:\n    Point p;\n    ld r;\n    Circle() : p(Point(0, 0)), r(0) {}\n    Circle(Point p, ld r) : p(p), r(r) {}\n};\n\n// l:line, m:line が交点を持つか\nbool isis_ll(Line l, Line m)\n{\n    return !eq(cross(l.b - l.a, m.b - m.a), 0);\n}\n\n// l:line, s:segment\nbool isis_ls(Line l, Line s)\n{\n    return isis_ll(l, s) &&\n           (cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < eps);\n}\n\n// s:segment, t:segment\nbool isis_ss(Line s, Line t)\n{\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 &&\n           ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\n// p が l:line 上に存在するか\nbool isis_lp(Line l, Point p)\n{\n    return (abs(cross(l.b - p, l.a - p)) < eps);\n}\n\nbool isis_sp(Line s, Point p)\n{\n    return (abs(s.a - p) + abs(s.b - p) - abs(s.b - s.a) < eps);\n}\n\n// p から l に下ろした足との交点\nPoint proj(Line l, Point p)\n{\n    ld t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + t * (l.a - l.b);\n}\n\n// l:line, t:line の交点\nPoint is_ll(Line l, Line m)\n{\n    Point lv = l.b - l.a, mv = m.b - m.a;\n    assert(cross(lv, mv) != 0);\n    return l.a + lv * cross(mv, m.a - l.a) / cross(mv, lv);\n}\n\n// p, l:line の距離\nld dist_lp(Line l, Point p)\n{\n    return abs(p - proj(l, p));\n}\n\nld dist_ll(Line l, Line m)\n{\n    return isis_ll(l, m) ? 0 : dist_lp(l, m.a);\n}\n\nld dist_ls(Line l, Line s)\n{\n    return isis_ls(l, s) ? 0 : std::min(dist_lp(l, s.a), dist_lp(l, s.b));\n}\n\nld dist_sp(Line s, Point p)\n{\n    Point r = proj(s, p);\n    return isis_sp(s, r) ? abs(r - p) : std::min(abs(s.a - p), abs(s.b - p));\n}\n\nld dist_ss(Line s, Line t)\n{\n    if (isis_ss(s, t))\n        return 0;\n    return std::min({dist_sp(s, t.a), dist_sp(s, t.b), dist_sp(t, s.a), dist_sp(t, s.b)});\n}\n\n// a, b の垂直二等分線. a -> b を90度反時計回り回転\nLine bisector(Point a, Point b)\n{\n    Point mid = (a + b) * Point(0.5, 0);\n    return Line(mid, mid + (b - a) * Point(0, pi / 2));\n}\n\n// 直線 l, m のなす角を求める\nld degree_ll(Line l, Line m)\n{\n    ld cos_shita = dot(l, m) / (abs(l.b - l.a) * abs(m.b - m.a));\n    if (cos_shita < -1.0)\n        cos_shita = -1.0;\n    if (cos_shita > 1.0)\n        cos_shita = 1.0;\n    ld shita = acos(cos_shita);\n    // shita = sita * 180.0 / PI;\n    return shita;\n}\n\n// c1, c2 の交点\nstd::vector<Point> is_cc(Circle c1, Circle c2)\n{\n    std::vector<Point> res;\n    ld d = abs(c1.p - c2.p);\n    ld rc = (d * d + c1.r * c1.r - c2.r * c2.r) / (2 * d);\n    ld dfr = c1.r * c1.r - rc * rc;\n    if (abs(dfr) < eps)\n        dfr = 0.0;\n    else if (dfr < 0.0)\n        return res; // no intersection\n    ld rs = sqrt(dfr);\n    Point diff = (c2.p - c1.p) / d;\n    res.emplace_back(c1.p + diff * Point(rc, rs));\n    if (dfr != 0.0)\n        res.emplace_back(c1.p + diff * Point(rc, -rs));\n    return res;\n}\n\nstd::vector<Point> is_lc(Circle c, Line l)\n{\n    std::vector<Point> res;\n    ld d = dist_lp(l, c.p);\n    if (d < c.r + eps)\n    {\n        ld len = (d > c.r) ? 0.0 : sqrt(c.r * c.r - d * d); //safety;\n        Point nor = (l.a - l.b) / abs(l.a - l.b);\n        res.emplace_back(proj(l, c.p) + len * nor);\n        res.emplace_back(proj(l, c.p) - len * nor);\n    }\n    return res;\n}\n\nstd::vector<Point> is_sc(Circle c, Line l)\n{\n    std::vector<Point> v = is_lc(c, l), res;\n    for (Point p : v)\n        if (isis_sp(l, p))\n            res.emplace_back(p);\n    return res;\n}\n\n// p から c への接線\nstd::vector<Line> tangent_cp(Circle c, Point p)\n{\n    std::vector<Line> ret;\n    Point v = c.p - p;\n    ld d = abs(v);\n    ld l = sqrt(norm(v) - c.r * c.r);\n    if (std::isnan(l))\n    {\n        return ret;\n    }\n    Point v1 = v * Point(l / d, c.r / d);\n    Point v2 = v * Point(l / d, -c.r / d);\n    ret.emplace_back(Line(p, p + v1));\n    if (l < eps)\n        return ret;\n    ret.emplace_back(Line(p, p + v2));\n    return ret;\n}\n\n// c1, c2 の共通接線\nstd::vector<Line> tangent_cc(Circle c1, Circle c2)\n{\n    std::vector<Line> ret;\n    if (abs(c1.p - c2.p) - (c1.r + c2.r) > -eps)\n    {\n        Point center = (c1.p * c2.r + c2.p * c1.r) / (c1.r + c2.r);\n        ret = tangent_cp(c1, center);\n    }\n    if (abs(c1.r - c2.r) > eps)\n    {\n        Point out = (-c1.p * c2.r + c2.p * c1.r) / (c1.r - c2.r);\n        std::vector<Line> nret = tangent_cp(c1, out);\n        ret.insert(ret.end(), nret.begin(), nret.end());\n    }\n    else\n    {\n        Point v = c2.p - c1.p;\n        v /= abs(v);\n        Point q1 = c1.p + v * Point(0, 1) * c1.r;\n        Point q2 = c1.p + v * Point(0, -1) * c1.r;\n        ret.emplace_back(Line(q1, q1 + v));\n        ret.emplace_back(Line(q2, q2 + v));\n    }\n    return ret;\n}\n\nusing Polygon = std::vector<Point>;\n\nld area(const Polygon &p)\n{\n    ld res = 0;\n    int n = p.size();\n    for (int i = 0; i < n; i++)\n    {\n        res += cross(p[i], p[(i + 1) % n]);\n    }\n    return res / 2;\n}\n\nbool is_counter_clockwise(const Polygon &poly)\n{\n    ld angle = 0;\n    int n = poly.size();\n    for (int i = 0; i < n; i++)\n    {\n        Point a = poly[i], b = poly[(i + 1) % n], c = poly[(i + 2) % n];\n        angle += arg((c - b) / (b - a));\n    }\n    return angle > eps;\n}\n\n// -1 => out\n//  0 => on\n//  1 => in\nint is_in_polygon(const Polygon &poly, Point p)\n{\n    ld angle = 0;\n    int n = poly.size();\n    for (int i = 0; i < n; i++)\n    {\n        Point a = poly[i], b = poly[(i + 1) % n];\n        if (isis_sp(Line(a, b), p))\n            return 1;\n        angle += arg((b - p) / (a - p));\n    }\n    return eq(angle, 0) ? 0 : 2;\n}\n\n// 凸包\nPolygon convex_hull(std::vector<Point> ps)\n{\n    int n = ps.size();\n    int k = 0;\n    sort(ps.begin(), ps.end());\n    Polygon ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = ps[i++])\n        while (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--])\n        while (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0)\n            --k;\n    ch.resize(k - 1);\n    return ch;\n}\n\n// 凸包カット\nPolygon convex_cut(const Polygon &ps, Line l)\n{\n    int n = ps.size();\n    Polygon Q;\n    for (int i = 0; i < n; i++)\n    {\n        Point A = ps[i], B = ps[(i + 1) % n];\n        Line m = Line(A, B);\n        if (ccw(l.a, l.b, A) != -1)\n            Q.emplace_back(A);\n        if (ccw(l.a, l.b, A) * ccw(l.a, l.b, B) < 0 && isis_ll(l, m))\n            Q.emplace_back(is_ll(l, m));\n    }\n    return Q;\n}\n\nvoid add_point(std::vector<Point> &ps, Point p)\n{\n    for (Point q : ps)\n        if (abs(q - p) < eps)\n            return;\n    ps.emplace_back(p);\n}\n\n// Voronoi 図: http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=3668810\n// polygon を ps でボロノイ分割する時の ps[index] に割り当てられる多角形\nPolygon voronoi(const Polygon &polygon, const std::vector<Point> &ps, int index)\n{\n    Polygon p = polygon;\n    int n = ps.size();\n    for (int j = 0; j < n; j++)\n    {\n        if (index == j)\n            continue;\n        Line l = bisector(ps[index], ps[j]);\n        p = convex_cut(p, l);\n    }\n    return p;\n}\n\nvoid solve_cgl_1_a()\n{\n    auto p1 = input_point(), p2 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        auto ret = proj(Line(p1, p2), p);\n        cout << fixed << setprecision(10) << ret.real() << \" \" << ret.imag() << endl;\n    }\n}\n\nvoid solve_cgl_1_b()\n{\n    auto p1 = input_point(), p2 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        auto ret = proj(Line(p1, p2), p);\n        cout << fixed << setprecision(10) << 2 * ret.real() - p.real() << \" \" << 2 * ret.imag() - p.imag() << endl;\n    }\n}\n\nvoid solve_cgl_1_c()\n{\n    auto p0 = input_point(), p1 = input_point();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p2 = input_point();\n        int ret = ccw(p0, p1, p2);\n        if (ret == 1)\n            cout << \"COUNTER_CLOCKWISE\" << endl;\n        else if (ret == -1)\n            cout << \"CLOCKWISE\" << endl;\n        else if (ret == 2)\n            cout << \"ONLINE_BACK\" << endl;\n        else if (ret == -2)\n            cout << \"ONLINE_FRONT\" << endl;\n        else\n            cout << \"ON_SEGMENT\" << endl;\n    }\n}\n\nvoid solve_cgl_2_a()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line l(p0, p1), m(p2, p3);\n        if (!isis_ll(l, m))\n        {\n            cout << 2 << endl;\n        }\n        else if (eq(dot(l.b - l.a, m.b - m.a), 0))\n        {\n            cout << 1 << endl;\n        }\n        else\n        {\n            cout << 0 << endl;\n        }\n    }\n}\n\nvoid solve_cgl_2_b()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        cout << (isis_ss(s1, s2) ? 1 : 0) << endl;\n    }\n}\n\nvoid solve_cgl_2_c()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        auto ret = is_ll(s1, s2);\n        cout << fixed << setprecision(10) << ret.real() << \" \" << ret.imag() << endl;\n    }\n}\n\nvoid solve_cgl_2_d()\n{\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point(), p2 = input_point(), p3 = input_point();\n        Line s1(p0, p1), s2(p2, p3);\n        cout << fixed << setprecision(10) << dist_ss(s1, s2) << endl;\n    }\n}\n\nvoid solve_cgl_3_a()\n{\n    Polygon p;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        p.push_back(input_point());\n    }\n    cout << fixed << setprecision(10) << area(p) << endl;\n}\n\nvoid solve_cgl_3_b()\n{\n    Polygon p;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        p.push_back(input_point());\n    }\n    auto cv = convex_hull(p);\n    cout << (p == cv ? 1 : 0) << endl;\n}\n\nvoid solve_cgl_3_c()\n{\n    Polygon ps;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p = input_point();\n        int ret = is_in_polygon(ps, p);\n        cout << ret + 1 << endl;\n    }\n}\n\nvoid solve_cgl_4_a()\n{\n    int n;\n    cin >> n;\n    Polygon ps;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    auto ret = convex_hull(ps);\n    for (auto p : ret)\n    {\n        cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n    }\n}\n\n// cgl_4_b: 凸多角形の直径\n\nvoid solve_cgl_4_c()\n{\n    int n;\n    cin >> n;\n    Polygon ps;\n    for (int i = 0; i < n; i++)\n    {\n        ps.push_back(input_point());\n    }\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point();\n        auto l = Line(p0, p1);\n        auto ret = convex_cut(ps, l);\n        cout << fixed << setprecision(10) << area(ret) << endl;\n    }\n}\n\n// cgl_5_a: 最近点対\n\n// cgl_6_a: 線分交差\n\nvoid solve_cgl_7_a()\n{\n    auto p0 = input_point();\n    ld r0, r1;\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ls = tangent_cc(c0, c1);\n    cout << ls.size() << endl;\n}\n\nvoid solve_cgl_7_d()\n{\n    auto p = input_point();\n    ld r;\n    cin >> r;\n    Circle c(p, r);\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        auto p0 = input_point(), p1 = input_point();\n        Line l(p0, p1);\n        auto ret = is_lc(c, l);\n        assert(ret.size() <= 2);\n        sort(ret.begin(), ret.end());\n        cout << ret[0].real() << \" \" << ret[0].imag();\n        if (ret.size() == 2)\n        {\n            cout << \" \" << ret[1].real() << \" \" << ret[1].imag();\n        }\n        cout << endl;\n    }\n}\n\nvoid solve_cgl_7_e()\n{\n    auto p0 = input_point();\n    ld r0, r1;\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ret = is_cc(c0, c1);\n    if ((int)ret.size() == 1)\n        ret.push_back(ret[0]);\n    sort(ret.begin(), ret.end());\n    cout << ret[0].real() << \" \" << ret[0].imag() << \" \" << ret[1].real() << \" \" << ret[1].imag() << endl;\n}\n\nvoid solve_cgl_7_f()\n{\n    auto p = input_point();\n    auto p0 = input_point();\n    ld r0;\n    cin >> r0;\n    Circle c(p0, r0);\n    auto ls = tangent_cp(c, p);\n    vector<Point> ret;\n    for (auto l : ls)\n    {\n        auto ps = is_lc(c, l);\n        assert((int)ps.size() == 1);\n        ret.push_back(ps[0]);\n    }\n    sort(ret.begin(), ret.end());\n    cout << ret[0].real() << \" \" << ret[0].imag() << \" \" << ret[1].real() << \" \" << ret[1].imag() << endl;\n}\n\nvoid solve_cgl_7_g()\n{\n    ld r0, r1;\n    auto p0 = input_point();\n    cin >> r0;\n    auto p1 = input_point();\n    cin >> r1;\n    Circle c0(p0, r0), c1(p1, r1);\n    auto ls = tangent_cc(c0, c1);\n    vector<Point> ret;\n    for (auto l : ls)\n    {\n        auto ps = is_sc(c0, l);\n        assert((int)ps.size() == 1);\n        ret.push_back(ps[0]);\n    }\n    sort(ret.begin(), ret.end());\n    for (auto p : ret)\n    {\n        cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n    }\n}\n\n// cgl_7_h: 円と多角形の共通部分(は?)\n// 参考実装: http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=2114290\n\nint main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n\n    solve_cgl_1_a();\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <complex>\nusing namespace std;\n\nint main(void){\n\tdouble x,y;\n\tint q;\n\tcin>>x>>y;\n\tcomplex<double> p1(x,y);\n\tcin>>x>>y;\n\tcomplex<double> p2(x,y);\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x>>y;\n\t\tcomplex<double> p(x,y);\n\t\tcomplex<double> p1p=p-p1;\n\t\tcomplex<double> p1p2=p2-p1;\n\t\tdouble r=abs(p1p);\n\t\tdouble t=arg(p1p)-arg(p1p2);\n\t\tr*=cos(t);\n\t\tcomplex<double> res=polar(r,arg(p2-p1))+p1;\n\t\tprintf(\"%.8lf %.8lf\\n\",real(res),imag(res));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <cmath>\n#include <cstdio>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nVector projection(const Segment& s, const Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    using namespace std;\n    // cerr << \"p: \" << p.x << \", \" << p.y;\n    // cerr << \" dot: \" << dot(p - s.p1, base);\n    // cerr << \" norm: \" << norm(base) << endl;\n    return s.p1 + base * r;\n}\n\nint main() {\n    using namespace std;\n\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Segment s{p1, p2};\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        double x, y;\n        cin >> x >> y;\n        auto p = projection(s, Point{x, y});\n        cout << setprecision(20) << p.x << \" \" << p.y << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <climits>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\n//???\nclass Point {\npublic:\n    double x, y;\n    \n    Point (double x = 0, double y = 0):x(x), y(y){}\n    Point operator + (Point p){return Point(x + p.x, y + p.y);}\n    Point operator - (Point p){return Point(x - p.x, y - p.y);}\n    Point operator * (double a){return Point(a * x, a * y);}\n    Point operator / (double a){return Point(x / a, y / a);}\n    \n    double norm(){return x*x + y*y;};\n    double absolute(){return sqrt(norm());};\n    \n    bool operator < (const Point &p) const{\n        return x != p.x ? x < p.x : y < p.y;\n    }\n    \n    bool operator == (const Point &p) const{\n        return equals(x, p.x) && equals(y, p.y);\n    }\n    \n};\ntypedef Point Vector;                               //????????????\ntypedef struct Segment{Point p1, p2;}Segment;       //??????\ntypedef Segment Line;                               //??´???\ntypedef struct Circle{Point c; double r;}Circle;    //???\ntypedef vector<Point> Polygon;                      //????§???¢\n//????????????a????????????\ndouble norm(Vector a){\n    return a.x * a.x + a.y * a.y;\n}\n//????????????a?????§??????\ndouble absolute(Vector a){\n    return sqrt(norm(a));\n}\n\n//????????????a,b?????????\ndouble dot(Vector a, Vector b){\n    return a.x * b.x + a.y * b.y;\n}\n//????????????a,b?????????\ndouble cross(Vector a, Vector b){\n    return a.x * b.y - a.y * b.x;\n}\n\n//????????????a??¨b?????´?????????\n//a??¨b?????´????????´??????????????????0?????????\nbool isOrthogonal(Vector a, Vector b){\n    return equals(dot(a,b), 0.0);\n}\n\n//????????????a??¨b???????????????\n//a??¨b?????´????????´??????????????????0?????????\nbool isParallel(Vector a , Vector b){\n    return equals(cross(a,b), 0.0);\n}\n\n//??????s(p1p2)???????????????p????°???±\nPoint project(Segment s, Point p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n//??????s???????§°?????¨?????????p???????±????\nPoint reflect(Segment s, Point p){\n    return p + (project(s, p) - p) * 2.0;\n}\n\n//???a,???b???????????¢\ndouble getDistance(Point a, Point b){\n    return absolute(a - b);\n}\n\n//??´???s??¨???p????????¢\ndouble getDistanceLP(Line l, Point p){\n    return abs(cross(l.p2 - l.p1, p - l.p1) / absolute(l.p2 - l.p1));\n}\n\n//??????s(?§????p1/??????p2)??¨???p????????¢d????±???????\n//??\\???????????????????????§??´?????????\n//??????????????????p2-p1??¨???????????????p-p1??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p1??¨????????¢\n//??????????????????p1-p2??¨???????????????p-p2??????????§???????90???????????§????????´???????????????-90?????????????°?????????´?????????d??????p??¨???p2??¨????????¢\n//??????????????\\???????????????????????´??????d??????p??¨??´???p1p2????????¢\ndouble getDistanceSP(Segment s, Point p){\n    if (dot(s.p2 - s.p1, p - s.p1) < 0.0) return absolute(p - s.p1);\n    if (dot(s.p1 - s.p2, p - s.p2) < 0.0) return absolute(p - s.p2);\n    return getDistanceLP(s, p);\n}\n\n\n//??????p0, p1, p2???????????????????????????p0p1???????????????p2??????????????????\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\nint ccw(Point p0, Point p1, Point p2){\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(norm(a) < norm(b)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n//??????S1(p1p2)??¨??????s2(p2p3)????????????????????????\nbool intersect(Point p1, Point p2, Point p3, Point p4){\n    return  ccw(p1, p2, p3) * ccw(p1, p2, p3) <= 0\n            &&\n            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0;\n}\nbool intersect(Segment s1, Segment s2){\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p1);\n}\n\n//??????s1??¨??????s2????????¢\n//??\\????????????????????¢????????§????????????????????????\n//????????????s1??¨??????s2????§????s2.p1????????¢\n//????????????s1??¨??????s2?????????s2.p2????????¢\n//????????????s2??¨??????s1????§????s1.p1????????¢\n//????????????s2??¨??????s1?????????s1.p2????????¢\ndouble getDistance(Segment s1, Segment s2){\n    if ( intersect(s1, s2) ) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n    \n}\n\n//??????s1??¨??????s2?????????????±???????\nPoint getCrossPoint(Segment s1, Segment s2){\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n//?????¨??????l?????????????±???????\npair<Point, Point> getCrossPoints(Circle c, Line l){\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / absolute(l.p2 - l.p1);\n    double base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\n//???c1??¨???c2?????????????±???????\nVector polar(double a, double r){\n    //??????a,?§????r???point????±???????\n    return Point(cos(r) * a, sin(r) * a);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2){\n    Vector v = c2.c - c1.c;\n    double d = absolute(v);\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d) );\n    double t = atan2(v.y, v.x);\n    return make_pair(c1.c + polar(c1.r, t+a), c1.c + polar(c1.r, t-a));\n}\n\n\n\nint main(){\n    \n    int x0, y0, x1, y1, x2, y2;\n    \n    int q;\n    \n    cin >> x0 >> y0 >> x1 >> y1;\n    cin >> q;\n    \n    Segment s = {Point(x0, y0), Point(x1, y1)};\n    \n    for (int i = 0; i < q; i++) {\n        cin >> x2 >> y2;\n        Point p2 = Point(x2, y2);\n        \n        Point ans = project(s, p2);\n        \n        cout << ans.x << \" \" << ans.y << endl;\n    }\n\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define _ ios_base::sync_with_stdio(0);cin.tie(0);\n#define REP(i,n) for(int i=0;i<(int)(n);i++)\n\nusing namespace std;\ntypedef pair<long double, long double> p;\n#define X first\n#define Y second\n\np transition(p p0, p p1, p p2){\n  p t;\n  double theta = atan2(p1.Y-p0.Y,p1.X-p0.X);\n  t.X = (cos(theta)*(p2.X-p0.X)+sin(theta)*(p2.Y-p0.Y))*cos(theta)+p0.X;\n  t.Y = (cos(theta)*(p2.X-p0.X)+sin(theta)*(p2.Y-p0.Y))*sin(theta)+p0.Y;\n  return t;\n}\n\nint main(){ _;\n  p p0,p1,p2,t;\n  int q;\n  cin>>p0.X>>p0.Y>>p1.X>>p1.Y>>q;\n  REP(i,q){\n    cin>>p2.X>>p2.Y;\n    t = transition(p0,p1,p2);\n    printf(\"%.10Lf %.10Lf\\n\", t.X, t.Y);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<math.h>\nusing namespace std;\n\nint main() {\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  \n  // dは(x1, y1)を起点とした座標系\n  double x2d = x2 - x1, y2d = y2 - y1;\n  \n  double ld = sqrt(x2d * x2d + y2d * y2d); // 直線の方向ベクトルの長さ\n  \n  int q;\n  cin >> q;\n  for (int loop=0; loop<q; loop++) {\n    \n    double x, y, xd, yd;\n    cin >> x >> y;\n    xd = x - x1;\n    yd = y - y1;\n    \n    double cross = xd * x2d + yd * y2d; // 直線の方向ベクトルと点の位置ベクトルの内積\n    double a = cross / ld / ld; // 線形補完率\n    \n    cout << (x1 + x2d * a) << \" \" << (y1 + y2d * a) << endl;\n    \n  }\n  \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) begin(r),end(r)\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n#define vvl(v,w,h,init) vector<vector<ll>> v(w,vector<ll>(h,init))\n#define mp(a,b) make_pair(a,b)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\nusing pii = pair<int,int> ;\nusing pll = pair<ll,ll> ;\n  const double EPS = 1e-8;\n  const double INF = 1e12;\n  typedef complex<double> P;//????´???°????????¢?????????????????¨?§£???\n  namespace std {\n    bool operator < (const P& a, const P& b) {//x????????????\n      return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n    }\n    bool sorty(const P& a, const P& b) {//y????????????\n      return imag(a) != imag(b) ? imag(a) < imag(b) : real(a) < real(b);\n    }\n  }\n  double cross(const P& a, const P& b) {//??????\n    return imag(conj(a)*b);\n  }\n  double dot(const P& a, const P& b) {//??????\n    return real(conj(a)*b);\n  }\n\n  struct L : public vector<P> {//??´???\n    L(){};\n    L(const P &a, const P &b) {\n      push_back(a); push_back(b);\n    }\n  };\n\n  typedef vector<P> G;\n\n  struct C {//???\n    P p; double r;\n    C(){};\n    C(const P &p, double r) : p(p), r(r) { }\n  };\n  int ccw(P a, P b, P c) {//3????????????????????§????????§??????????????????\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n  }\n  // L:line,S:segment,P:point\n  bool intersectLL(const L &l, const L &m) {\n    return abs(cross(l[1]-l[0], m[1]-m[0])) > EPS || // non-parallel\n      abs(cross(l[1]-l[0], m[0]-l[0])) < EPS;   // same line\n  }\n  bool intersectLS(const L &l, const L &s) {\n    return cross(l[1]-l[0], s[0]-l[0])*       // s[0] is left of l\n      cross(l[1]-l[0], s[1]-l[0]) < EPS; // s[1] is right of l\n  }\n  bool intersectLP(const L &l, const P &p) {\n    return abs(cross(l[1]-p, l[0]-p)) < EPS;\n  }\n  bool intersectSS(const L &s, const L &t) {\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&\n      ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;\n  }\n  bool intersectSP(const L &s, const P &p) {\n    return abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]) < EPS; // triangle inequality\n  }\n  // L & P intersection\n  P projection(const L &l, const P &p) {\n    double t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n    return l[0] + t*(l[0]-l[1]);\n  }\n  // L????????????P???????°????\n  P reflection(const L &l, const P &p) {\n    return p + 2.0 * (projection(l, p) - p);\n  }\n  double distanceLP(const L &l, const P &p) {\n    return abs(p - projection(l, p));\n  }\n  double distanceLL(const L &l, const L &m) {\n    return intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n  }\n  double distanceLS(const L &l, const L &s) {\n    if (intersectLS(l, s)) return 0;\n    return min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n  }\n  double distanceSP(const L &s, const P &p) {\n    const P r = projection(s, p);\n    if (intersectSP(s, r)) return abs(r - p);\n    return min(abs(s[0] - p), abs(s[1] - p));\n  }\n  double distanceSS(const L &s, const L &t) {\n    if (intersectSS(s, t)) return 0;\n    return min(min(distanceSP(s, t[0]), distanceSP(s, t[1])), min(distanceSP(t, s[0]), distanceSP(t, s[1])));\n  }\n  double distancePP(const P &p,const P &q){\n    return abs(p - q) ;\n  }\n  P crosspoint(const L &l, const L &m) {\n    double A = cross(l[1] - l[0], m[1] - m[0]);\n    double B = cross(l[1] - l[0], l[1] - m[0]);\n    if (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n    if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!\n    return m[0] + B / A * (m[1] - m[0]);\n  }\n  P verticalvector(const P &a,const P &b){//2???????????????????????????????????????\n    if(a.real() == b.real()){\n      return {1.0,0};\n    }\n    if(a.imag() == b.imag()){\n      return {0,1.0};\n    }\n    P p = a - b;\n    P res = {-p.imag(),p.real()};\n    return res / abs(p);\n  }\n  pair<P,P> crosspointCircle(const C &a,const C &b){\n    P m = (a.p+b.p)/2.0;\n    P vv = verticalvector(a.p,b.p);\n    double u = sqrt( a.r * a.r - norm(a.p - b.p) / 4.0);\n    P A = m + u * vv,B = m - u * vv;\n    return mp(A,B);\n  }\n\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  double x,y;\n  cin >> x >> y;\n  P a(x,y);\n  cin >> x >> y;\n  P b(x,y);\n  L ab(a,b);\n  ll q;\n  cin >> q;\n  rep(i,q){\n    cin >> x >> y;\n    P c(x,y);\n    P d = projection(ab,c);\n    fcout(10) << real(d) << ' ' << imag(d) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define TEST_MODE 1\n \n#ifndef __VECD__\n#define __VECD__\n#include <vector>\n#include <numeric>\n#include <iomanip>\n#include <stdlib.h>\n#include <iostream>\n#define rep(n) for(int i=0;i<n;i++)\n#define PB push_back\n#define VecND VecD<std::vector<double> >\n#if TEST_MODE\n// #define Vec3D VecD<double, 3>\n#define Vec2D _VecD<double, 2>\n#endif\n#endif\n \ntemplate <typename U>                       class VecD;\n \n#if TEST_MODE\ntemplate <typename TYPE, unsigned int SIZE> class _VecD;\n#endif\n \ntemplate <typename U> const VecD<U> projection(const VecD<U> &p1, const VecD<U> &p2);\n \ntemplate <typename U> class VecD{\ntemplate <typename DUMMY>      friend const double operator*(const VecD&, const VecD&);\ntemplate <typename T>          friend const VecD operator*(const T&, const VecD&);\ntemplate <typename T, class C> friend const C operator*(const C&, const T&);\ntemplate <typename DUMMY>      friend const VecD operator+(const VecD&, const VecD&);\ntemplate <typename T>          friend const VecD operator+(const T&, const VecD&);\ntemplate <typename T, class C> friend const C operator+(const C&, const T&);\ntemplate <class C>             friend const C operator-(const C&);\ntemplate <class C>             friend const C operator-(const C&, const C&);\ntemplate <typename T, class C> friend const C operator-(const T&, const C&);\ntemplate <typename T, class C> friend const C operator-(const C&, const T&);\ntemplate <typename DUMMY>      friend std::ostream& operator<<(std::ostream&, const VecD&);\npublic:\n\tU vec;\n\tVecD(){}\n\tVecD(U v){\n\t\tvec = v;\n\t}\n\tconst double dot(const VecD &p) const{\n\t\treturn inner_product( this->vec.begin(), this->vec.end(), p.vec.begin(), 0);\n\t}\n};\n \n#if TEST_MODE\ntemplate <typename TYPE, unsigned int SIZE> class _VecD{\ntemplate <typename DUMMY>      friend const double operator*(const _VecD&, const _VecD&);\ntemplate <typename T>          friend const _VecD operator*(const T&, const _VecD&);\ntemplate <typename T, class C> friend const C operator*(const C&, const T&);\ntemplate <typename DUMMY>      friend const _VecD operator+(const _VecD&, const _VecD&);\ntemplate <typename T>          friend const _VecD operator+(const T&, const _VecD&);\ntemplate <typename T, class C> friend const C operator+(const C&, const T&);\ntemplate <class C>             friend const C operator-(const C&);\ntemplate <class C>             friend const C operator-(const C&, const C&);\ntemplate <typename T, class C> friend const C operator-(const T&, const C&);\ntemplate <typename T, class C> friend const C operator-(const C&, const T&);\ntemplate <typename DUMMY>      friend std::ostream& operator<<(std::ostream&, const _VecD&);\n \npublic:\n\tTYPE vec[SIZE];\n\t_VecD(){}\n\t_VecD(TYPE (&array)[SIZE]){\n\t\tfor(int i=0; i<SIZE; i++) vec[i] = array[i];\n\t}\n\tconst double dot(const _VecD &p) const{\n\t\tdouble tmp = 0;\n\t\tfor(int i=0; i<SIZE; i++) tmp += this->vec[i] * p.vec[i];\n\t\treturn tmp;\n\t}\n};\n#endif\n \nconst double operator*(const VecND &p0, const VecND &p1){ return inner_product( p0.vec.begin(), p0.vec.end(), p1.vec.begin(), 0); }\n// template <typename U>\n// const double operator*(const VecD<U> &p0, const VecD<U> &p1){ return inner_product( p0.vec.begin(), p0.vec.end(), p1.vec.begin(), 0); }\n \ntemplate <typename T>\nconst VecND operator*(const T &a, const VecND &p1){\n\tstd::vector<double> v;\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++) v.PB(*iter1 * a);\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\ntemplate <typename T>\nconst Vec2D operator*(const T &a, const Vec2D &p1){\n\tdouble v[2] = {0, 0};\n\tfor(int i=0; i<2; i++) v[i] = p1.vec[i] * a;\n\tconst Vec2D p(v);\n\treturn p;\n}\n// template <typename T>\n// const Vec3D operator*(const T &a, const Vec3D &p1){\n//  double v[3] = {0, 0, 0};\n//  for(int i=0; i<3; i++) v[i] = p1.vec[i] * a;\n//  const Vec3D p(v);\n//  return p;\n// }\n#endif\n \ntemplate <typename T, class C>\nconst C operator* (const C &p, const T &a){return a*p;}\nconst VecND operator+(const VecND &p0, const VecND &p1){\n\tstd::vector<double> v;\n\tstd::vector<double>::const_iterator iter0 = p0.vec.begin();\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++){\n\t\tv.PB(*iter0 + *iter1);\n\t\titer0++;\n\t}\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\nconst Vec2D operator+(const Vec2D &p0, const Vec2D &p1){\n\tdouble v[2] = {0, 0};\n\tfor(int i=0; i<2; i++) v[i] = p0.vec[i] + p1.vec[i];\n\tconst Vec2D p(v);\n\treturn p;\n}\n// const Vec3D operator+(const Vec3D &p0, const Vec3D &p1){\n//  double v[3] = {0, 0, 0};\n//  for(int i=0; i<3; i++) v[i] = p0.vec[i] + p1.vec[i];\n//  const Vec3D p(v);\n//  return p;\n// }\n#endif\ntemplate <class T>\nconst VecND operator+(const T &a, const VecND &p1){\n\tstd::vector<double> v;\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++){\n\t\tv.PB(*iter1 + a);\n\t}\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\ntemplate <class T>\nconst Vec2D operator+(const T &a, const Vec2D &p1){\n\tdouble v[2];\n\tfor(int i=0; i<2; i++) v[i] = p1.vec[i] + a;\n\tconst Vec2D p(v);\n\treturn p;\n}\n// template <class T>\n// const Vec3D operator+(const T &a, const Vec3D &p1){\n//  double v[3];\n//  for(int i=0; i<3; i++) v[i] = p1.vec[i] + a;\n//  const Vec3D p(v);\n//  return p;\n// }\n#endif\ntemplate <typename T, class C>\nconst C operator+(const C &p1, const T &a){return a+p1;}\ntemplate <class C>\nconst C operator-(const C &p1){return (-1)*p1;}\ntemplate <class C>\nconst C operator-(C &p0, C &p1){ return p0+(-p1); }\ntemplate <typename T, class C>\nconst C operator-(const T &a, C &p1){ return a+(-p1); }\ntemplate <typename T, class C>\nconst C operator-(C &p1, const T &a){return (-a)+p1;}\n \n// template<class C>\n// const C projection(const C &p1, const C &p2){\n//  return ((p1*p2) / (p1*p1)) * p1;\n// }\ntemplate<typename U>\nconst VecD<U> projection(const VecD<U> &p1, const VecD<U> &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\n \n#if TEST_MODE\nconst Vec2D projection(const Vec2D &p1, const Vec2D &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\n// const Vec3D projection(const Vec3D &p1, const Vec3D &p2){\n//  return ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n// }\n#endif\n \nstd::ostream& operator<<(std::ostream &os, const VecND &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\n#if TEST_MODE\nstd::ostream& operator<<(std::ostream &os, const Vec2D &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\n#endif\n\nusing namespace std;\n \n \nint main(void){\n \n\tdouble xp0, yp0, xp1, yp1; cin>>xp0>>yp0>>xp1>>yp1;\n\tint q; cin >> q;\n\t// vector<double> v0; v0.PB(xp0); v0.PB(yp0); VecND p0(v0);\n\t// vector<double> v1; v1.PB(xp1); v1.PB(yp1); VecND p1(v1);\n\tdouble v0[2] = {xp0, yp0}; Vec2D p0(v0);\n\tdouble v1[2] = {xp1, yp1}; Vec2D p1(v1);\n\tp1 = p1-p0;\n\t// cout << p1.point[0] << \" \" << p1.point[1] << endl;\n\trep(q){\n\t\tdouble xp2,yp2; cin>>xp2>>yp2;\n\t\t// vector<double> v2; v2.PB(xp2); v2.PB(yp2); VecND p2(v2);\n\t\tdouble v2[2] = {xp2, yp2}; Vec2D p2(v2);\n\t\tp2 = 1*(p2-p0);\n\t\t// VecND ret = projection(p1, p2);\n\t\tVec2D ret = projection(p1, p2);\n\t\tret = ret+p0;\n\t\tcout << ret << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define maxn 100005\n#define maxm 500005\n#define inf 0x7fffffff\n#define ll long long\n#define ld long double\n#define debug(x) cerr<<#x<<\": \"<<x<<endl\n#define fgx cerr<<\"--------------\"<<endl\n#define dgx cerr<<\"==============\"<<endl\n\nusing namespace std;\nstruct vc{\n\tld x,y;\n\tvc operator*(const ld b){vc t;t.x=x*b,t.y=y*b;return t;}\n};\nstruct pt{\n\tld x,y;\n\tpt operator+(const vc b){pt t;t.x=x+b.x,t.y=y+b.y;return t;}\n\tvc operator-(const pt b){vc t;t.x=x-b.x,t.y=y-b.y;return t;}\n};\n\ninline int read(){\n\tint x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0';\n\treturn x*f;\n}\n\ninline ld cross(vc a,vc b){return a.x*b.y-a.y*b.x;}\ninline pt get(){pt t;t.x=read(),t.y=read();return t;}\ninline vc nl(vc a){vc b;b.x=-a.y,b.y=a.x;return b;}\ninline pt glt(pt a,pt b,pt c,pt d){\n\tvc u=b-a,v=d-c,w=a-c;\n\tld t=cross(v,w)/cross(u,v);\n\treturn a+u*t;\n}\n\nint main(){\n\tpt p1=get(),p2=get();\n\tint Q=read();\n\twhile(Q--){\n\t\tpt p=get(); vc a=p1-p2,b=nl(a);\n\t\tpt p0=p+b,res=glt(p1,p2,p,p0);\n\t\tprintf(\"%.10Lf %.10Lf\\n\",res.x,res.y);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nstruct Point{\n  double x,y;\n\n  Point(double x = 0,double y = 0) : x(x), y(y) {}\n\n  Point operator + (const Point &p)const{\n    return Point(x + p.x , y + p.y);\n  }\n\n  Point operator - (const Point &p)const{\n    return Point(x - p.x , y - p.y);\n  }\n\n  Point operator * (const double &k)const{\n    return Point(x * k , y * k);\n  }\n\n  Point operator / (const double &k)const{\n    return Point(x / k , y / k);\n  }\n  double norm(){\n    return x*x + y*y;\n  }\n  double dot(const Point &p)const{\n    return x*p.x + y*p.y;\n  }\n};\ntypedef Point Vector;\n\nstruct Segment{\n  Vector s, t;\n\n  Segment(){}\n  Segment(Vector s, Vector t) : s(s), t(t) {}\n\n  Point projection(Point p){\n    Vector base = t - s;\n    double t = (p-s).dot(base) / base.norm();\n    return s + base*t;\n  }\n};\n\nint main(){\n  Point p1, p2, p3;\n  int q;\n\n  std::cin >> p1.x >> p1.y >> p2.x >> p2.y >> q;\n  Segment s = Segment(p1, p2);\n  for(int i = 0 ; i < q ; i++){\n    std::cin >> p3.x >> p3.y;\n    Point p = s.projection(p3);\n    printf(\"%.10f %.10f\\n\",p.x ,p.y);\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <sstream>\n#include <map>\n#include <set>\n#include <cmath>\n\n#define REP(i,k,n) for(int i=k;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define INF 1<<30\n#define pb push_back\n#define mp make_pair\n#define EPS 1e-8\n#define equals(a,b) fabs((a) - (b)) < EPS\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\n\tPoint operator+(const Point &o) const { return Point(x+o.x, y+o.y); }\n\n\tPoint operator-(const Point &o) const { return Point(x-o.x, y-o.y); }\n\n\tPoint operator*(const double m) const { return Point(x*m, y*m); }\n\n\tPoint operator/(const double d) const { return Point(x/d, y/d); }\n\n\tbool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }\n\n\tbool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }\n};\n\nostream& operator << (ostream& os, const Point& p) {\n\tos << \"(\" << p.x << \", \" << p.y << \")\";\n\treturn os;\n}\n\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\ndouble atan(Point p) { return atan2(p.y, p.x); }\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\ndouble distancePP(Point p, Point o) { return sqrt(norm(o - p)); }\n\nint ccw(Point a, Point b, Point c) {\n\tb = b-a;\n\tc = c-a;\n\n\tif(cross(b, c) > 0.0) return +1;\t//conter clockwise\n\tif(cross(b, c) < 0.0) return -1;\t//clockwise\n\tif(dot(b, c) < 0.0) return +2;\t//a on Seg(b,c)\n\tif(norm(b) < norm(c)) return -2;\t//b on Seg(a,c)\n\treturn 0;\t//c on Seg(a,b)\n}\n\nstruct Line {\n\tPoint a, b;\n\n\tLine() : a(Point(0, 0)), b(Point(0, 0)) {}\n\tLine(Point a, Point b) : a(a), b(b) {}\n};\n\nostream& operator << (ostream& os, const Line& l) {\n\tos << \"(\" << l.a.x << \", \" << l.a.y << \")-(\" << l.b.x << \",\" << l.b.y << \")\";\n\treturn os;\n}\n\nstruct Seg {\n\tPoint a,b;\n\n\tSeg() : a(Point(0, 0)), b(Point(0, 0)) {}\n\n\tSeg (Point a, Point b) : a(a),b(b) {}\n};\n\nostream& operator << (ostream& os, const Seg& s) {\n\tos << \"(\" << s.a.x << \", \" << s.a.y << \")-(\" << s.b.x << \",\" << s.b.y << \")\";\n\treturn os;\n}\n\nbool isOrthogonal(Line l1, Line l2) { return equals(dot((l1.b - l1.a), (l2.b - l2.a)), 0.0); }\n\nbool isParallel(Line l1, Line l2) { return equals(cross((l1.b - l1.a), (l2.b - l2.a)), 0.0); }\n\nbool sameLine(Line l1, Line l2) { return abs(cross(l1.b - l1.a, l2.b - l1.a)) < EPS; }\n\nbool isIntersectLL(Line l1, Line l2) { return !isParallel(l1, l2) || sameLine(l1, l2); }\n\nbool isIntersectLS(Line l, Seg s) {\n\treturn cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < 0;\n}\n\nbool isIntersectSS(Seg s1, Seg s2) { \n\treturn ccw(s1.a, s1.b, s2.a) * ccw(s1.a, s1.b, s2.b) <= 0 \n\t\t&& ccw(s2.a, s2.b, s1.a) * ccw(s2.a, s2.b, s1.b) <= 0;\n}\n\ndouble distanceLP(Line l, Point p) {\n\treturn abs(cross(l.b - l.a, p - l.a)) / abs(l.b - l.a);\n}\n\ndouble distanceLS(Line l, Seg s) {\n\tif (isIntersectLS(l, s)) return 0.0;\n\treturn min(distanceLP(l, s.a), distanceLP(l, s.b));\n}\n\ndouble distanceSP(Seg s, Point p) {\n\tif (dot(s.b - s.a, p - s.a) < 0.0) return abs(p - s.a);\n\tif (dot(s.a - s.b, p - s.b) < 0.0) return abs(p - s.b);\n\treturn distanceLP(Line(s.a, s.b) , p);\n}\n\ndouble distanceSS(Seg s1, Seg s2) {\n    if (isIntersectSS(s1, s2)) return 0.0;\n\treturn min( min(distanceSP(s1, s2.a), distanceSP(s1, s2.b)), min(distanceSP(s2, s1.a), distanceSP(s2, s1.b)) );\n}\n\n// if isIntersectLL(l1, l2)\nPoint crossPointLL(Line l1, Line l2) {\n\tPoint base = l2.b - l2.a;\n\tdouble d = abs(cross(base, l1.a - l2.a));\n\tdouble d2 = abs(cross(base, l1.b - l2.a));\n\tdouble t = d / (d + d2);\n\treturn l1.a + (l1.b - l1.a) * t;\n}\n\n// if isIntersectLS(l, s)\nPoint crossPointLS(Line l, Seg s) { return crossPointLL(l, Line(s.a, s.b)); }\n\n// if isIntersectSS(s1, s2)\nPoint crossPointSS(Seg s1, Seg s2) { return crossPointLL(Line(s1.a, s1.b), Line(s2.a, s2.b)); }\n\nPoint project(Line l, Point p) {\n\tPoint base = l.b - l.a;\n\tdouble t = dot(base, p-l.a) / dot(base, base);\n\treturn l.a + base * t;\n}\n\nPoint reflect(Line l, Point p) {\n\treturn p + (project(l, p) - p) * 2.0;\n}\n\nint main() {\n\tLine l;\n\tcin >> l.a.x >> l.a.y >> l.b.x >> l.b.y;\n\n\tint q;\n\tcin >> q;\n\n\trep(i, q) {\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\n\t\tPoint o = project(l, p);\n\n\t\tcout << fixed;\n\t\tcout.precision(20);\n\t\tcout << o.x << \" \" << p.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <utility>\n#include <cmath>\n#include <stdio.h>\n\nusing namespace std;\n\nint main(void){\n\n  pair<double, double> p0, p1, p;\n  pair<double, double> ans;\n  int n;\n  cin >> p0.first >> p0.second >> p1.first >> p1.second;\n  cin >> n;\n\n  while(n--){\n    cin >> p.first >> p.second;\n    double a;\n    if(p1.second - p0.second == 0){\n      ans.first = p.first;\n      ans.second = p1.second;\n    }else if(p1.first - p0.first == 0){\n      ans.first = p1.first;\n      ans.second = p.first;\n    }else{\n      a = (p1.second - p0.second) / (p1.first - p0.first);\n      ans.first = (a / (a*a + 1) ) * (-p0.second + p.second + a*p0.first + p.first/a);\n      ans.second = (-1/a) * (ans.first - p.first) + p.second;\n    }\n    printf(\"%.10f \", ans.first);\n    printf(\"%.10f\", ans.second);\n    cout << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<complex>\n#include<array>\n#include<vector>\n#include<cstdio>\nusing namespace std;\n\nconst double EPS = 1e-10;\ntemplate<class T>\nbool eq(const T& a, const T& b) {return abs(a - b) < EPS;}\n\ntypedef  complex<double> point;\n// sort/unique用、setではうまく動かないので使うべからず\nnamespace std {\n\tbool operator==(const point &a, const point &b){\n\t\treturn eq(a, b);\n\t}\n\tbool operator<(const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;  // counter clockwise\n\tif (cross(b, c) < 0)   return -1;  // clockwise\n\tif (dot(b, c) < 0)     return +2;  // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;  // a--b--c on line\n\treturn 0;  // a--c--b on line or a----bc\n}\n\nstruct circle {point p; double r;};\ntypedef vector<point> polygon;\ntypedef array<point, 2> line;\n\npoint projection(const line& l, const point& p) {\n\tdouble t = dot(p-l[0], l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\n\n\nint main()\n{\n  double x0,y0,x1,y1;\n  for(;cin>>x0>>y0>>x1>>y1;)\n    {\n      int n;\n      cin>>n;\n      for(int i=0;i<n;i++)\n\t{\n\t  line l;\n\t  l[0]=point(x0,y0);\n\t  l[1]=point(x1,y1);\n\t  double x,y;\n\t  cin>>x>>y;\n\t  point p=point(x,y);\n\t  point ans=projection(l,p);\n\t  printf(\"%.10lf %.10lf\\n\",ans.real(),ans.imag());\n\t  //\t  cout<<ans.real()<<\" \"<<ans.imag()<<endl;\n\t}\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing FLOAT = double;\nstruct Point{\n    FLOAT x, y;\n    FLOAT operator * (const Point& point)const{return x * point.x + y * point.y;}\n    FLOAT norm2()const{return x * x + y * y;}\n    Point operator - (const Point& point)const{return {x - point.x, y - point.y};}\n    Point operator + (const Point& point)const{return {x + point.x, y + point.y};}\n    Point operator * (const FLOAT& k)const{return {k * x, k * y};}\n};\nPoint operator * (const FLOAT& k, const Point& point){return point * k;}\nstruct Line{\n    Point A, B;\n    Point AB()const{return B - A;}\n};\nPoint projection(const Point& point, const Line& line){\n    return line.A + (point - line.A) * line.AB() / line.AB().norm2() * line.AB();\n}\nint main(){\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    cout << fixed << setprecision(20);\n    Line line;\n    cin >> line.A.x >> line.A.y >> line.B.x >> line.B.y;\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i += 1){\n        Point point;\n        cin >> point.x >> point.y;\n        auto result = projection(point, line);\n        cout << result.x << \" \" << result.y << \"\\n\";\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#pragma GCC target(\"avx\")\n#include <bits/stdc++.h>\nusing namespace std;\n#ifdef ONLINE_JUDGE\n#define getchar gc\ninline char gc(){\n\tstatic char buf[1<<16],*p1=buf,*p2=buf;\n\tif(p1==p2){\n\t\tp2=(p1=buf)+fread(buf,1,1<<16,stdin);\n\t\tif(p2==p1) return EOF;\n\t}\n\treturn *p1++;\n}\n#endif\ntemplate<class t> inline t read(t &x){\n    char c=getchar();bool f=0;x=0;\n    while(!isdigit(c)) f|=c=='-',c=getchar();\n    while(isdigit(c)) x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    if(f) x=-x;return x;\n}\ntemplate<class t> inline void write(t x){\n    if(x<0) putchar('-'),write(-x);\n    else{if(x>9) write(x/10);putchar('0'+x%10);}\n}\n\nconst double eps=1e-9;\nconst double pi=acos(-1);\n\n\nstruct point{\n\tdouble x,y;\n\tinline void read(){\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t}\n\tinline point operator + (const point &nt) const {\n\t\treturn (point){x+nt.x,y+nt.y};\n\t}\n\tinline point operator - (const point &nt) const {\n\t\treturn (point){x-nt.x,y-nt.y};\n\t}\n\tinline point operator * (const double &nt) const {\n\t\treturn (point){x*nt,y*nt};\n\t}\n}x,y,p;\n\ndouble DJ(point x,point y){ //点积 \n\treturn x.x*y.x+x.y*y.y;\n}\n\ndouble CJ(point x,point y){ //叉积 \n\treturn x.x*y.y+x.y*y.x;\n}\n\ndouble distance(point x,point y){ //距离 \n\treturn sqrt((y.x-x.x)*(y.x-x.x)+(y.y-x.y)*(y.y-x.y));\n}\n\nstruct segment{\n\tpoint x,y;\n\tinline void read(){\n\t\tx.read();y.read();\n\t}\n\tinline double length(){ //线段长度 \n\t\treturn distance(x,y);\n\t}\n}seg;\n\npoint trpoint(segment x){ //将有向线段转成向量点 \n\treturn x.y-x.x;\n}\n\ndouble prolen(point x,segment a){ //点在有向线段上的投影长度 \n\treturn DJ(trpoint((segment){a.x,x}),trpoint(a))/a.length();\n}\n\npoint propoint(point x,segment a){ //点在有向线段上的投影点 \n\treturn a.x+trpoint(a)*(prolen(x,a)/a.length());\n}\n\nvoid doit(){\n\tp.read();\n\tpoint res=propoint(p,seg);\n\tprintf(\"%.10lf %.10lf\\n\",res.x,res.y);\n}\n\nsigned main(){\n\tx.read();y.read();\n\tseg=(segment){x,y};\n\tint t;\n\tread(t);\n\twhile(t--) doit();\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<cstdio>\nusing namespace std;\n\nint main(){\n    double x1,y1,x2,y2;\n    int q;\n    cin >> x1 >> y1 >> x2 >> y2 >> q;\n    for(int i=1; i<=q; i++){\n        double xp,yp,x,y;\n        cin >> xp >> yp;\n        double a,b,f;\n        if(x1==x2){\n            printf(\"%.12lf %.12lf\\n\",x1,yp);\n        }\n        else if(y1==y2){\n            printf(\"%.12lf %.12lf\\n\",xp,y1);\n        }\n        else{\n            a=(y2-y1)/(x2-x1);\n            b=y1-a*x1;\n            f=yp+1.0/a*xp;\n            x=(f-b)/(a+1.0/a);\n            y=a*x+b;\n            printf(\"%.12lf %.12lf\\n\",x,y);\n        }\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    double xp1,yp1,xp2,yp2;\n    int q;\n    int i;\n    double x[1000];\n    double y[1000];\n    double a;\n    double b;\n    double x_a;\n    double y_a;\n    double a_a;\n    double b_a;\n    int pt1;\n\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    \n    if (xp1 == xp2){\n        x_a = xp1;\n        y_a = 0;\n        pt1 = 0;\n    }else if (yp1 == yp2){\n        x_a = 0;\n        y_a = yp1; \n        pt1 = 1;\n    }else{\n        //cout << \"yp2 = \" << yp2 << endl;\n        //cout << \"yp1 = \" << yp1 << endl;\n        //cout << \"xp2 = \" << xp2 << endl;\n        //cout << \"xp1 = \" << xp1 << endl;\n        a_a = (yp2-yp1)/(xp2-xp1);\n        //cout << \"a_a = \" << a << endl;\n        a = -1 * (1/a_a);\n        //cout << \"a = \" << a << endl;\n        b_a = -1 * a_a * xp1+ yp1;\n        pt1 = 2;\n    }\n    \n    //cout << x_a << endl;\n    //cout << y_a << endl;\n    //cout << a << endl;\n    \n    cin >> q;\n    \n    for ( i = 0; i < q; ++i){\n        cin >> x[i] >> y[i];\n        if (pt1 == 0){\n            //cout << x_a << \" \" << y[i] << endl;\n            printf(\"%10.10f %10.10f\\n\", x_a,y[i]);\n        }else if(pt1 == 1){\n            //cout << x[i] << \" \" << y_a << endl;\n            printf(\"%10.10f %10.10f\\n\", x[i],y_a);\n        }else if(pt1 == 2){\n            b = -1 * a * x[i] + y[i];\n            x_a = (b - b_a)/(a_a - a);\n            y_a = a_a * x_a + b_a;\n            //cout << x_a << \" \" << y_a << endl;\n            printf(\"%10.10f %10.10f\\n\", x_a,y_a);\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n/*******************??????********************/\nconst double EPS = 1e-8;\nconst double INF = 1e12;\ntypedef complex<double> P;\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n}\ndouble cross(const P& a, const P& b) {//??????\n\treturn imag(conj(a)*b);\n}\ndouble dot(const P& a, const P& b) {//??????\n\treturn real(conj(a)*b);\n}\n\nstruct L : public vector<P> {//??????\n\tL(const P &a, const P &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ntypedef vector<P> G;\nstruct C {//???\n\tP p; double r;\n\tC(const P &p, double r) : p(p), r(r) { }\n};\n\nint ccw(P a, P b, P c) {//??????????????????\n\tb -= a; c -= a;\n  if (cross(b, c) > 0)   return +1;       // counter clockwise\n  if (cross(b, c) < 0)   return -1;       // clockwise\n  if (dot(b, c) < 0)     return +2;       // c--a--b on line\n  if (norm(b) < norm(c)) return -2;       // a--b--c on line\n  return 0;\n}\n\nbool intersectLL(const L& l,const L& m){\n\t//non-parallel || sameline\n\treturn abs(cross(l[1]-l[0],m[1]-m[0])) > EPS || abs(cross(l[1]-l[0],m[0]-l[0])) < EPS;\n}\nbool intersectLS(const L& l,const L& s){\n\t// s[0] is left of l,s[1] is right of l\n\treturn cross(l[1]-l[0],s[0]-l[0]) * cross(l[1]-l[0],s[1]-l[0]) < EPS;\n}\nbool intersectLP(const L& l,const P& p){\n\treturn abs(cross(l[1]-p,l[0]-p)) < EPS;\n}\nbool intersectSP(const L& s,const P& p){\n\treturn abs(s[0]-p)+abs(s[1]-p) - abs(s[1]-s[0]) < EPS;// triangle inequality\n}\n\nP projection(const L& l,const P& p){\n\tdouble t = dot(p-l[0],l[0]-l[1]) / norm(l[0]-l[1]);\n\treturn l[0] + t*(l[0]-l[1]);\n}\nP reflection(const L& l,const P& p){\n\treturn p + 2. * (projection(l,p) - p);\n}\ndouble distanceLP(const L& l,const P& p){\n\treturn abs(p - projection(l,p));\n}\ndouble distanceLL(const L& l,const L& m){\n\treturn intersectLL(l,m) ? 0 : distanceLP(l,m[0]);\n}\ndouble distanceLS(const L& l,const L& s){\n\tif(intersectLS(l,s)) return 0;\n\treturn min(distanceLP(l, s[0]),distanceLP(l, s[1]));\n}\n\nint main(void){\n\tint x1,y1,x2,y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tP p1(x1,y1),p2(x2,y2);\n\tL l(p1,p2);\n\n\tint q;\n\tcin >> q;\n\tfor(int i=0;i<q;i++){\n\t\tint x,y;cin >> x >> y;\n\t\tP p3(x,y);\n\t\tP t = projection(l,p3);\n\t\tcout << setprecision(20) << real(t);cout << \" \";\n\t\tcout << setprecision(20) << imag(t) << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\nusing namespace std;\n\nstruct vec{double x;double y;};\ndouble naiseki(vec a,vec b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\nint main()\n{\n\tdouble xp1,xp2,yp1,yp2;\n\tcin>>xp1>>yp1>>xp2>>yp2;\n\tint q;cin>>q;\n\tvec base;\n\tbase.x=xp2-xp1;\n\tbase.y=yp2-yp1;\n\t\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tdouble s,t;\n\t\tcin>>s>>t;\n\t\tvec hypo;\n\t\thypo.x=s-xp1;\n\t\thypo.y=t-yp1;\n\t\tcout<<fixed<<setprecision(10)<<xp1+base.x*naiseki(hypo,base)/naiseki(base,base)<<\" \";\n\t\tcout<<(double)yp1+base.y*naiseki(hypo,base)/naiseki(base,base)<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i=0; i<(n); i++)\n#define FOR(i,x,n) for(int i=x; i<(n); i++)\n#define ALL(n) begin(n),end(n)\n#define MOD 1000000007\n#define INF 1e9\n#define INFL 1e12\n \ntypedef long long ll;\ntypedef unsigned int ui;\ntypedef unsigned long long ull;\ntemplate<class T>void pr(T x){cout << x << endl;}\ntemplate<class T>void prvec(vector<T>& a){rep(i, a.size()-1){cout << a[i] << \" \";} cout << a[a.size()-1] << endl;}\ntemplate<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }\n \nint main()\n{\n    double a1, b1, a2, b2;\n    cin >> a1 >> b1 >> a2 >> b2;\n\n    double slope, intercept;\n    bool slopeinf=false;\n    if(a1==a2) slopeinf = true;\n    else if(b1==b2) slope = 0;\n    else slope = (b1-b2) / (a1-a2);\n    intercept = b1 - (slope*a1);\n\n    double dist, sl_inv, x, y, xx, yy;\n    \n    int n; cin >> n;\n    rep(i, n){\n        cin >> x >> y;\n        dist = abs(slope*x - y + intercept) / sqrt(slope*slope + 1);\n        if(slopeinf){\n            yy = y;\n            if(a1<x) xx = a1;\n            else xx = a1;\n        }else{\n            xx = (slope*slope*a1 - slope*b1 + x + slope*y) / (slope*slope+1);\n            if(slope==0) yy = 0;\n            else yy = (x - xx) / slope + y;\n        }\n        printf(\"%.12lf %.12lf\\n\", xx, yy);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i = 0; i < (int)n; i++)\n\nconst double eps = 1e-10;\n\nstruct Point {\n  double x, y;\n  Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}  \n  double norm() {return sqrt(x*x + y*y);}\n};\n\nPoint operator + (const Point &p, const Point &q) {return Point(p.x + q.x, p.y + q.y);}\nPoint operator - (const Point &p, const Point &q) {return Point(p.x - q.x, p.y - q.y);}\ndouble operator * (const Point &p, const Point q) {return p.x * q.x + p.y * q.y;}\nbool operator == (const Point &p, const Point &q) {return (abs(p.x - q.x) < eps && abs(p.y - q.y) < eps);}\nbool operator != (const Point &p, const Point &q) {return !(p == q);}\ndouble cross(const Point &p, const Point &q) {return p.x*q.y - p.y*q.x;}\n\nstruct Line_Segment {\n  Point p , q;\n  Line_Segment(Point p = Point(0.0,0.0), Point q = Point(0.0,0.0)) : p(p), q(q) {}\n};\n\nstruct Line {\n  double a, b, c;\n  Line(double a, double b, double c) : a(a), b(b), c(c) {}\n  Line(Point p, Point q) {\n    a = q.y - p.y;\n    b = p.x - q.x;\n    c = q.x * p.y - p.x * q.y;\n  }\n};\n\nstruct Circle {\n  double r;\n  Point p;\n  Circle(Point p = Point(0.0, 0.0), double r = 0.0) : p(p), r(r) {}\n};\n\n// 点と直線の距離\ndouble point_line_dist(Point p, Line l) {\n  return abs(l.a*p.x + l.b*p.y + l.c) / sqrt(l.a*l.a + l.b*l.b);\n}\n\n// 点の直線への射影\nPoint projection (Point p, Line l) {\n  double x = p.x - l.a * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  double y = p.y - l.b * (l.a*p.x + l.b*p.y + l.c) / (l.a*l.a + l.b*l.b);\n  return Point(x,y);\n}\n\n// 点の線分からの回転方向\nint ccw(Point p, Point p1, Point p2) {\n  p1 = p1 - p; p2 = p2 - p;\n  if(cross(p1,p2) > eps) return 1; \n  if(cross(p1,p2) < -eps) return -1; \n  if(p1 * p2 < 0) return 2; \n  if(p1.norm() < p2.norm()) return -2; \n  return 0; \n}\n\n// 円と直線の交点\nvector<Point> circle_line_cross(Line l, Circle c) {\n  vector<Point> vp;\n  Point h;\n  h.x = c.p.x - l.a * (l.a*c.p.x + l.b*c.p.y + l.c) / (l.a*l.a + l.b*l.b);\n  h.y = c.p.y - l.b * (l.a*c.p.x + l.b*c.p.y + l.c) / (l.a*l.a + l.b*l.b);\n\n  double d = l.a*c.p.x + l.b*c.p.y + l.c;\n  double q = c.r*c.r - d*d / (l.a*l.a + l.b*l.b);\n  if(q >= eps) {\n    Point p1, p2;\n    p1.x = h.x + sqrt(q) * l.b / sqrt(l.a*l.a + l.b*l.b);\n    p1.y = h.y - sqrt(q) * l.a / sqrt(l.a*l.a + l.b*l.b);\n    p2.x = h.x - sqrt(q) * l.b / sqrt(l.a*l.a + l.b*l.b);\n    p2.y = h.y + sqrt(q) * l.a / sqrt(l.a*l.a + l.b*l.b);\n    vp.push_back(p1);\n    vp.push_back(p2);\n  } else if(abs(q) < eps) {\n    vp.push_back(h);\n  }\n  return vp;\n} \n\n// 線分の交差判定\nbool line_segment_cross(const Line_Segment l, const Line_Segment s) {\n  return ccw(l.p,l.q,s.p) * ccw(l.p,l.q,s.q) <= 0 && ccw(s.p,s.q,l.p) * ccw(s.p,s.q,l.q) <= 0;\n}\n\nint main() {\n  Point p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  Line l(p1,p2);\n  int q;\n  cin >> q;\n  rep(i,q) {\n    Point p;\n    cin >> p.x >> p.y;\n    Point h = projection(p,l);\n    printf(\"%.9lf %.9lf\\n\",h.x,h.y);\n  }\n  return 0;\n}\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll, ll> lpair;\nconst ll MOD = 1e9 + 7;\nconst ll INF = 1e18;\n#define rep(i,m,n) for(ll i = (m); i < (n); i++)\n#define rrep(i,m,n) for(ll i = (m); i >= (n); i--)\n#define print(x) cout << (x) << endl;\n#define print2(x,y) cout << (x) << \" \" << (y) << endl;\n#define printa(x,n) for(ll i = 0; i < n; i++){ cout << (x[i]) << \" \";} cout<<endl;\n\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\ntypedef complex<double> P;\ndouble dot(P a, P b){ //内積\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n\ndouble cross(P a, P b){ //外積\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\nbool is_orth(P a1, P a2, P b1, P b2){ //垂直か\n    return EQ(dot(a1 - a2, b1 - b2), 0.0);\n}\n\nbool is_para(P a1, P a2, P b1, P b2){ //平行か\n    return EQ(cross(a1 - a2, b1 - b2), 0.0);\n}\n\nbool is_online(P a, P b, P c){ //cが線分上か\n    return (abs(a-c) + abs(c-b) < abs(a-b) + EPS);\n}\n\nbool distance_lp(P a, P b, P c){ //直線abと点cの距離\n    return abs(cross(b-a, c-a)) / abs(b-a);\n}\n\nbool is_intersect(P a1, P a2, P b1, P b2){ //線分の交差判定\n    return (cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS) && \n        (cross(b2-b1, a1-b1) * cross(b2-b1, a2-b1) < EPS);\n}\n\nP intersect_pos(P a1, P a2, P b1, P b2){ //直線同士の交点\n    P a = a2 - a1;\n    P b = b2 - b1;\n    return a1 + a * cross(b, b1 - a1) / cross(b, a);\n}\n\n\n\n\n\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    P p1(x1,y1), p2(x2,y2), p12(x2-x1, y2-y1);\n    ll q;\n    cin >> q;\n    P n = p12 * P(0,1);\n    while(q--){\n        double x,y;\n        cin >> x >> y;\n        P p(x,y);\n        P ans = intersect_pos(p1, p2, p, p+n);\n        cout << setprecision(16) << ans.real() << \" \" << ans.imag() << endl;\n\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n\nusing namespace std;\n\nint main()\n{\n\tint x0, y0, x1, y1, q, x2, y2;\n\tscanf_s(\"%d %d %d %d\", &x0, &y0, &x1, &y1);\n\tscanf_s(\"%d\", &q);\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf_s(\"%d %d\", &x2, &y2);\n\t\tdouble x, y;\n\t\tx = x0 + (x1-x0)*((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)) / (pow(x1 - x0, 2) + pow(y1 - y0, 2));\n\t\ty = y0 + (y1-y0)*((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)) / (pow(x1 - x0, 2) + pow(y1 - y0, 2));\n\t\tprintf(\"%.11lf %.11lf\\n\", x, y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include <iomanip>    \n\nusing namespace std;\n\nstruct Point\n{\n\tint x;\n\tint y;\n};\nint dotProduct(Point a, Point b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\nint lengthSquared(Point a)\n{\n\treturn pow(a.x,2)+pow(a.y,2); \n}\nint main()\n{ int q; int p1x,p1y,p2x,p2y;\n\tint q1x,q1y;\n\tcin>>p1x>>p1y>>p2x>>p2y;\n\tcin>>q;\n\tstruct Point p = {p2x-p1x, p2y-p1y};\n\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tcin>>q1x>>q1y;\n\t\tstruct Point q = {q1x-p1x, q1y-p1y};\n\t\tdouble val;\n\t\tif(lengthSquared(p)==0) val = 0.0f;\n\t\telse val = double(dotProduct(p,q))/double(lengthSquared(p));\n\t\tdouble x = val*p.x+p1x;\n\t\tdouble y = val*p.y+p1y;\n\t\tif(x==0) x=0.0f;\n\t\tif(y==0) y=0.0f;\n\t\tcout<<fixed<<setprecision(10)<<x<<\" \"<<y<<endl;\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include <complex>\n#define rep(i, n) for (int i = 0; i < (n); i++)\n#define loop(i, x, n) for (int i = (x); i < (n); i++)\n#define all(v) (v).begin(), (v).end()\n#define int long long\n#define INF 1e9\n#define MOD 1e9 + 7\nusing namespace std;\n\ntemplate<typename T> void cmin(T &a, T b) { a = min(a, b); }\ntemplate<typename T> void cmax(T &a, T b) { a = max(a, b); }\n\nusing P = complex<double>;\nconst double PI = acos(-1);\nconst double EPS = 1e-9;\n// P p(a,b)=a+bi -> 点p(a,b)\nnamespace std {\n  bool operator<(const P &a, const P &b) { return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b); }\n  bool operator==(const P &a, const P &b) { return a.real() == b.real() && a.imag() == b.imag(); }\n} // namespace std\n// i倍すれば反時計回りに90度回転\nP turn(P p, double t) { // t度回転\n  return p * exp(P(.0, t * PI / 180.0)); //ベクトルにe^θiをかける\n}\n\n//内積\ndouble dot(P a, P b) { return real(conj(a) * b); }\n//外戚\ndouble cross(P a, P b) { return imag(conj(a) * b); }\n\n//直線(Line) 線分(Segment)\n// L l(a,b);で直線ab\n// l[0]=a l[1]=b\nstruct L : public vector<P> {\n  L(const P &a, const P &b) {\n    push_back(a);\n    push_back(b);\n  }\n};\n\n//円(Circle)\n// C c(P(a,b)r); 中心(a,b) 半径rの円\nstruct C {\n  P c;\n  double r;\n  C(const P &c, double r) : c(c), r(r) {}\n};\n//点pから直線aに推薦を下ろした足\nP projection(L a, P p) {\n  double t = dot(p - a[0], a[0] - a[1]) / norm(a[0] - a[1]);\n  return a[0] + t * (a[0] - a[1]);\n}\n//点pを直線aで折り返した点\nP reflection(L a, P p) { return p + 2.0 * (projection(a, p) - p); }\n\nsigned main() {\n  int a, b, c, d;\n  cin >> a >> b >> c >> d;\n  L line(P(a, b), P(c, d));\n  int q;\n  cin >> q;\n  while (q--) {\n    int x, y;\n    cin >> x >> y;\n    P p(x, y);\n    P ans = projection(line, p);\n    printf(\"%.10lf %.10lf\\n\", ans.real(), ans.imag());\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\nint q;\nstruct point\n{\n    double x;\n    double y;\n};\npoint vt(point a,point b)\n{\n    point vt;\n    vt.x=b.x-a.x;\n    vt.y=b.y-a.y;\n    return vt;\n}\ndouble scalar(point a,point b)\n{\n    double scalar=0;\n    scalar=sqrt((b.x-a.x)*(b.x-a.x)+(b.y-a.y)*(b.y-a.y));\n    return scalar;\n}\ndouble mul1(point a,point b)\n{\n    double mul=a.x*b.x+a.y*b.y;\n    return mul;\n}\npoint mul2(point a,double b)\n{\n    point c;\n    c.x=a.x*b;\n    c.y=a.y*b;\n    if (c.x==-0) c.x=0;\n    if (c.y==-0) c.y=0;\n    return c;\n}\nint main()\n{\n    point p1,p2;\n    cin>>p1.x>>p1.y;\n    cin>>p2.x>>p2.y;\n    cin>>q;\n    while (q--)\n    {\n        point p;\n        cin>>p.x>>p.y;\n        point v=vt(p1,p);\n        point u=vt(p1,p2);\n        //cout<<v.x<< \" \"<<v.y<<endl;\n        //cout<<u.x<< \" \"<<u.y<<endl;\n        double su=scalar(p1,p2);\n        //cout<<su<<endl;\n        point ans;\n        ans=mul2(u,mul1(u,v)/(su*su));\n        cout<<setprecision(10)<<fixed<<ans.x+p1.x<<\" \"<<ans.y+p1.y<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define TemplateVersion \"3.4.0\"\n// Useful Marcos\n//====================START=====================\n// Compile use C++11 and above\n#ifdef LOCAL\n#define debug(args...)                           \\\n    {                                            \\\n        string _s = #args;                       \\\n        replace(_s.begin(), _s.end(), ',', ' '); \\\n        stringstream _ss(_s);                    \\\n        istream_iterator<string> _it(_ss);       \\\n        err(_it, args);                          \\\n    }\nvoid err(istream_iterator<string> it)\n{\n}\ntemplate <typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args)\n{\n    cerr << *it << \" = \" << a << endl;\n    err(++it, args...);\n}\n#define MSG cout << \"Finished\" << endl\n#else\n#define debug(args...)\n#define MSG\n#endif\n#if __cplusplus >= 201703L\ntemplate <typename... Args>\nvoid readln(Args &... args)\n{\n    ((cin >> args), ...);\n}\ntemplate <typename... Args>\nvoid writeln(Args... args)\n{\n    ((cout << args << \" \"), ...);\n    cout << endl;\n}\n#elif __cplusplus >= 201103L\nvoid readln()\n{\n}\ntemplate <typename T, typename... Args>\nvoid readln(T &a, Args &... args)\n{\n    cin >> a;\n    readln(args...);\n}\nvoid writeln()\n{\n    cout << endl;\n}\ntemplate <typename T, typename... Args>\nvoid writeln(T a, Args... args)\n{\n    cout << a << \" \";\n    writeln(args...);\n}\n#endif\n#if __cplusplus >= 201103L\n#define FOR(_i, _begin, _end) for (auto _i = _begin; _i < _end; _i++)\n#define FORR(_i, _begin, _end) for (auto _i = _begin; _i > _end; _i--)\n#else\n#define FOR(_i, _begin, _end) for (int _i = (int)_begin; _i < (int)_end; _i++)\n#define FORR(_i, _begin, _end) for (int _i = (int)_begin; _i > (int)_end; _i--)\n#define nullptr NULL\n#endif\n#if __cplusplus >= 201103L\n#define VIS(_kind, _name, _size) \\\n    vector<_kind> _name(_size);  \\\n    for (auto &i : _name)        \\\n        cin >> i;\n#else\n#define VIS(_kind, _name, _size)    \\\n    vector<_kind> _name;            \\\n    _name.resize(_size);            \\\n    for (int i = 0; i < _size; i++) \\\n        cin >> _name[i];\n#endif\n// alias\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define all(x) (x).begin(), (x).end()\n#define tcase() \\\n    int T;      \\\n    cin >> T;   \\\n    FOR(kase, 1, T + 1)\n// Swap max/min\ntemplate <typename T>\nbool smax(T &a, const T &b)\n{\n    if (a > b)\n        return false;\n    a = b;\n    return true;\n}\ntemplate <typename T>\nbool smin(T &a, const T &b)\n{\n    if (a < b)\n        return false;\n    a = b;\n    return true;\n}\n// ceil divide\ntemplate <typename T>\nT cd(T a, T b)\n{\n    return (a + b - 1) / b;\n}\n// min exchange\ntemplate <typename T>\nbool se(T &a, T &b)\n{\n    if (a < b)\n        return false;\n    swap(a, b);\n    return true;\n}\n// A better MAX choice\nconst int INF = 0x3f3f3f3f;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef set<int> si;\ntypedef vector<string> cb;\n//====================END=====================\n\n// Constants here\nconst double EPS = 1e-10;\nconst double PI = acos(-1);\n\ntypedef double db;\n\nint sgn(db x)\n{\n    if (abs(x) < EPS)\n        return 0;\n    if (x < 0)\n        return -1;\n    return 1;\n}\n\ninline db sqr(db x) { return x * x; }\n\n// Point/Vector\nstruct Point\n{\n    db x, y;\n\n    Point() : x(1e-18), y(1e-18) {}\n\n    Point(db _x, db _y) : x(_x + EPS), y(_y + EPS) {}\n\n    bool operator==(const Point &p)\n    {\n        return sgn(x - p.x) == 0 && sgn(y - p.y) == 0;\n    }\n\n    bool operator<(const Point &p)\n    {\n        int c = sgn(x - p.x);\n        if (c)\n            return c == -1;\n        return sgn(y - p.y) == -1;\n    }\n\n    Point operator+(const Point &p) { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point &p) { return Point(x - p.x, y - p.y); }\n    Point operator*(db d) { return Point(x * d, y * d); }\n    Point operator/(db d) { return Point(x / d, y / d); }\n\n    db operator^(const Point &p) { return x * p.y - y * p.x; }\n    db operator*(const Point &p) { return x * p.x + y * p.y; }\n\n    db dis(const Point &p) { return (*this - p).len(); }\n    db alpha() { return atan2(y, x); }\n\n    Point unit() { return *this / len(); }\n\n    Point rotac() { return Point(-y, x); }\n    Point rotcl() { return Point(y, -x); }\n\n    Point rot(Point p, db angle)\n    {\n        Point v = *this - p;\n        db c = cos(angle), s = sin(angle);\n        return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);\n    }\n\n    db len() { return hypot(x, y); }\n    db len2() { return x * x + y * y; }\n\n    db rad(Point a, Point b)\n    {\n        Point ap = a - *this, bp = b - *this;\n        return abs(atan2(abs(ap ^ bp), ap * bp));\n    }\n\n    void read() { cin >> x >> y; }\n    void write() { cout << '(' << x << \", \" << y << \")\\n\"; }\n};\n\n// Line\nstruct Line\n{\n    Point s, e;\n\n    Line(){};\n\n    Line(Point _s, Point _e) : s(_s), e(_e) {}\n\n    Line(Point p, db angle)\n    {\n        s = p;\n        if (sgn(angle - PI / 2))\n            e = (s + Point(1, tan(angle)));\n        else\n            e = (s + Point(0, 1));\n    }\n\n    //ax+by+c=0\n    Line(db a, db b, db c)\n    {\n        if (sgn(a) == 0)\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0)\n        {\n            s = Point(-c / a, 0);\n            e = Point(-c / a, 1);\n        }\n        else\n        {\n            s = Point(0, -c / b);\n            e = Point(1, -(c + a) / b);\n        }\n    }\n\n    db len() { return s.dis(e); }\n    db angle()\n    {\n        db ans = atan2(e.y - s.y, e.x - s.x);\n        if (sgn(ans) == -1)\n            ans += PI;\n        if (sgn(ans - PI) == 0)\n            ans -= PI;\n        return ans;\n    }\n\n    // 1 -> On Left\n    // 2 -> On Right\n    // 3 -> On Line BUT MAY NOT ON THE SEGMENT!\n    int relation(Point p)\n    {\n        int c = sgn((p - s) ^ (e - s));\n        if (c == -1)\n            return 1;\n        else if (c == 1)\n            return 2;\n        return 3;\n    }\n\n    bool checkOn(Point p) { return relation(p) == 3 && sgn((p - s) ^ (p - e)) <= 0; }\n\n    bool parallel(Line l) { return sgn((e - s) ^ (l.e - l.s)) == 0; }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossSS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        int d3 = sgn((l.e - l.s) ^ (s - l.s));\n        int d4 = sgn((l.e - l.s) ^ (e - l.s));\n        if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2)\n            return 2;\n        return (d1 == 0 && sgn((l.s - s) * (l.s - e)) <= 0) ||\n               (d2 == 0 && sgn((l.e - s) * (l.e - e)) <= 0) ||\n               (d3 == 0 && sgn((s - l.s) * (s - l.e)) <= 0) ||\n               (d4 == 0 && sgn((e - l.s) * (e - l.e)) <= 0);\n    }\n\n    // 0 -> Formal Intersection\n    // 1 -> Informal\n    // 2 -> Not Intersect\n    int crossLS(Line l)\n    {\n        int d1 = sgn((e - s) ^ (l.s - s));\n        int d2 = sgn((e - s) ^ (l.e - s));\n        if ((d1 ^ d2) == -2)\n            return 2;\n        return (d1 == 0 || d2 == 0);\n    }\n\n    // 0 -> Parallel\n    // 1 -> Same\n    // 2 -> Intersect\n    int crossLL(Line l)\n    {\n        if (this->parallel(l))\n            return l.relation(s) == 3;\n        return 2;\n    }\n\n    Point crossP(Line l)\n    {\n        db a1 = (l.e - l.s) ^ (s - l.s);\n        db a2 = (l.e - l.s) ^ (e - l.s);\n        return Point((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));\n    }\n\n    db disPL(Point p) { return abs((p - s) ^ (e - s)) / len(); }\n    db disPS(Point p)\n    {\n        if (sgn((p - s) * (e - s)) < 0 || sgn((p - e) * (s - e)) < 0)\n            return min(p.dis(s), p.dis(e));\n        return disPL(p);\n    }\n    db disSS(Line l) { return min(min(disPS(l.s), disPS(l.e)), min(l.disPS(s), l.disPS(e))); }\n\n    Point proj(Point p) { return s + ((e - s) * ((e - s) * (p - s))) / ((e - s).len2()); }\n    Point refl(Point p)\n    {\n        Point q = proj(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    bool operator==(Line l) { return s == l.s && e == l.e; }\n\n    void adjust()\n    {\n        if (e < s)\n            swap(s, e);\n    }\n\n    void read()\n    {\n        s.read();\n        e.read();\n    }\n\n    void write()\n    {\n        cout << \"Line:\\n\";\n        s.write();\n        e.write();\n    }\n};\n\n// Pre-Build Function\ninline void build()\n{\n}\n\n// Actual Solver\ninline void solve()\n{\n    cout << fixed << setprecision(10);\n    Line l;\n    l.read();\n    int q;\n    cin >> q;\n    while (q--)\n    {\n        Point p;\n        p.read();\n        auto ans = l.proj(p);\n        cout << ans.x << ' ' << ans.y << '\\n';\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n#ifdef LOCAL\n    clock_t _begin = clock();\n#endif\n\n    build();\n    solve();\n\n#ifdef LOCAL\n    cerr << \"Time elapsed: \" << (double)(clock() - _begin) * 1000 / CLOCKS_PER_SEC << \"ms.\" << endl;\n#endif\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "# include <iostream>\n# include <algorithm>\n#include <array>\n# include <cassert>\n#include <cctype>\n#include <climits>\n#include <numeric>\n# include <vector>\n# include <string>\n# include <set>\n# include <map>\n# include <cmath>\n# include <iomanip>\n# include <functional>\n# include <tuple>\n# include <utility>\n# include <stack>\n# include <queue>\n# include <list>\n# include <bitset>\n# include <complex>\n# include <chrono>\n# include <random>\n# include <limits.h>\n# include <unordered_map>\n# include <unordered_set>\n# include <deque>\n# include <cstdio>\n# include <cstring>\n#include <stdio.h>\n#include<time.h>\n#include <stdlib.h>\n#include <cstdint>\n#include <cfenv>\n\n//#include <bits/stdc++.h>\nusing namespace std;\nusing LL = long long;\nusing ULL = unsigned long long;\nlong long MOD = 1000000000 + 7;\nconstexpr long long INF = numeric_limits<LL>::max();\nconst double PI = acos(-1);\n#define fir first\n#define sec second\n#define thi third\n#define debug(x) cerr<<#x<<\": \"<<x<<'\\n'\ntypedef pair<LL, LL> Pll;\ntypedef pair<LL, pair<LL, LL>> Ppll;\ntypedef pair<LL, pair<LL, bitset<100001>>> Pbll;\ntypedef pair<LL, pair<LL, vector<LL>>> Pvll;\ntypedef pair<LL, LL> Vec2;\nstruct Tll { LL first, second, third; };\nstruct Fll { LL first, second, third, fourd; };\ntypedef pair<LL, Tll> Ptll;\n#define rep(i,rept) for(LL i=0;i<rept;i++)\n#define Mfor(i,mf) for(LL i=mf-1;i>=0;i--)\nLL h, w, n, m, k, t, s, q, last, cnt, sum, ans, dp[10000][10000], a[2000000], b[2000000];\nstring str, ss;\nbool f[1100][1100];\nchar c;\nint di[4][2] = { { 0,1 },{ 1,0 },{ 0,-1 },{ -1,0 } };\nstruct Edge { LL to, cost; };\nvector<Edge>vec[200000];\nvector<LL>v,pick[200000];\nmap<string, vector<LL>>ma;\nmultiset<LL>st[3];\nvoid YN(bool f) {\n\tif (f)\n\t\tcout << \"YES\" << endl;\n\telse\n\t\tcout << \"NO\" << endl;\n}\nvoid yn(bool f) {\n\tif (f)\n\t\tcout << \"Yes\" << endl;\n\telse\n\t\tcout << \"No\" << endl;\n}\nstruct vecter {\n\tdouble x, y, r;\n\tvecter() {}\n\tvecter(double x_, double y_) :x(x_), y(y_) {\n\t\tr = sqrt(x*x + y * y);\n\t}\n\tvecter operator+(vecter v) {\n\t\treturn vecter(x + v.x, y + v.y);\n\t}\n\tvecter operator-(vecter v) {\n\t\treturn vecter(x - v.x, y - v.y);\n\t}\n\tvecter operator/(double k) {\n\t\treturn vecter(x/k, y/k);\n\t}\n\tvecter operator*(double k) {\n\t\treturn vecter(x*k,y*k);\n\t}\n\tdouble operator*(vecter v) { //内積\n\t\treturn x * v.x + y * v.y;\n\t}\n\tdouble angle(vecter v) { //なす角(Radians)\n\t\tif((r * v.r)>0)\n\t\treturn acos(*this*v / (r * v.r));\n\t\telse return 0;\n\t}\n\tvecter unit() {\n\t\treturn (r == 0 ? vecter() : vecter(x, y) / r);\n\t}\n};\nvecter dir(double rad) {\n\treturn vecter(cos(rad),sin(rad));\n}\nint main() {\n\tdouble x, y;\n\tcin >> x >> y;\n\tvecter p1(x, y);\n\tcin >> x >> y;\n\tvecter p2(x, y);\n\tcin >> n;\n\trep(i, n) {\n\t\tcin >> x >> y;\n\t\tvecter P(x, y);\n\t\tvecter cur=p1+(p2-p1).unit()*(P - p1).r*cos(((vecter)(p2 - p1)).angle((vecter)(P - p1)));\n\t\tprintf(\"%.15f %.15f\\n\", cur.x,cur.y);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define trav(a, x) for(auto& a : x)\n#define all(x) x.begin(), x.end()\n#define sz(x) (int)(x).size()\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntemplate<class T>\nstruct Point {\n\ttypedef Point P;\n\tT x, y;\n\texplicit Point(T x=0, T y=0) : x(x), y(y) {}\n\tbool operator<(P p) const { return tie(x,y) < tie(p.x,p.y); }\n\tbool operator==(P p) const { return tie(x,y)==tie(p.x,p.y); }\n\tP operator+(P p) const { return P(x+p.x, y+p.y); }\n\tP operator-(P p) const { return P(x-p.x, y-p.y); }\n\tP operator*(T d) const { return P(x*d, y*d); }\n\tP operator/(T d) const { return P(x/d, y/d); }\n\tT dot(P p) const { return x*p.x + y*p.y; }\n\tT cross(P p) const { return x*p.y - y*p.x; }\n\tT cross(P a, P b) const { return (a-*this).cross(b-*this); }\n\tT dist2() const { return x*x + y*y; }\n\tdouble dist() const { return sqrt((double)dist2()); }\n\t// angle to x-axis in interval [-pi, pi]\n\tdouble angle() const { return atan2(y, x); }\n\tP unit() const { return *this/dist(); } // makes dist()=1\n\tP perp() const { return P(-y, x); } // rotates +90 degrees\n\tP normal() const { return perp().unit(); }\n\t// returns point rotated 'a' radians ccw around the origin\n\tP rotate(double a) const {\n\t\treturn P(x*cos(a)-y*sin(a),x*sin(a)+y*cos(a)); }\n};\n\nusing P = Point<long double>;\n\nint main(){\n\tios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tcout << fixed << setprecision(15);\n\tP p1, p2;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tint q;\n\tcin >> q;\n\tfor(int i = 0; i < q; i++){\n\t\tP p;\n\t\tcin >> p.x >> p.y;\n\t\tP proj = p1 + (p2 - p1).unit() * (p - p1).dot((p2-p1).unit());\n\t\tcout << proj.x << \" \" << proj.y << '\\n';\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cassert>\n#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\n// 2次元ベクトルクラス\nclass Vector {\npublic:\n    float x, y;\n    \n    Vector() {\n        x = 0.f;\n        y = 0.f;\n    }\n    \n    Vector(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void set(float nx, float ny) {\n        x = nx;\n        y = ny;\n    }\n    \n    void setX(float nx) {\n        x = nx;\n    }\n    \n    void setY(float ny) {\n        y = ny;\n    }\n    \n    // ベクトルの大きさを求める\n    float getMagnitude() const {\n        return sqrt(x * x + y * y);\n    }\n    \n    // 内積を求める\n    float getScalar(const Vector& vec) {\n        return x * vec.x + y * vec.y;\n    }\n    \n    // 角度を求める\n    float getAngle(const Vector& vec) {\n        return getScalar(vec) / (getMagnitude() * vec.getMagnitude());\n    }\n    \n    // 単位ベクトルを返す\n    Vector getUnit() {\n        Vector v;\n        float mag = getMagnitude();\n        if (mag == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / mag, y / mag);\n        }\n        return v;\n    }\n    \n    void operator = (const Vector& vec) {\n        x = vec.x;\n        y = vec.y;\n    }\n    \n    Vector operator + (const Vector& vec) {\n        Vector v(x + vec.x, y + vec.y);\n        return v;\n    }\n    \n    Vector operator - (const Vector& vec) {\n        Vector v(x - vec.x, y - vec.y);\n        return v;\n    }\n    \n    Vector operator * (const Vector& vec) {\n        Vector v(x * vec.x, y * vec.y);\n        return v;\n    }\n    \n    Vector operator * (float f) {\n        Vector v(x * f, y * f);\n        return v;\n    }\n    \n    Vector operator / (const Vector& vec) {\n        Vector v;\n        if (vec.x == 0.f) {\n            v.setX(0.f);\n        } else {\n            v.setX(x / vec.x);\n        }\n        \n        if (vec.y == 0.f) {\n            v.setY(0.f);\n        } else {\n            v.setY(y / vec.y);\n        }\n        return v;\n    }\n    \n    Vector operator / (float f) {\n        Vector v;\n        if (f == 0.f) {\n            v.set(0.f, 0.f);\n        } else {\n            v.set(x / f, y / f);\n        }\n        return v;\n    }\n    \n    void operator += (const Vector& vec) {\n        x += vec.x;\n        y += vec.y;\n    }\n    \n    void operator -= (const Vector& vec) {\n        x -= vec.x;\n        y -= vec.y;\n    }\n    \n    void operator *= (const Vector& vec) {\n        x *= vec.x;\n        y *= vec.y;\n    }\n    \n    void operator /= (const Vector& vec) {\n        if (vec.x == 0.f) {\n            x = 0.f;\n        } else {\n            x /= vec.x;\n        }\n        \n        if (vec.y == 0.f) {\n            y = 0.f;\n        } else {\n            y /= vec.y;\n        }\n    }\n};\n\n\nint main() {\n    Vector vec1, vec2;\n    int x, y;\n    cin >> x;\n    cin >> y;\n    vec1.set(x,y);\n    cin >> x;\n    cin >> y;\n    vec2.set(x,y);\n    \n    int n;\n    cin >> n;\n    \n    Vector vec = vec2 - vec1;\n    Vector p, ret;\n    for (int i = 0; i < n; i++) {\n        int px, py;\n        cin >> px;\n        cin >> py;\n        p.set(px, py);\n        p -= vec1;\n        \n        float cos = p.getAngle(vec);\n        float size = p.getMagnitude() * cos;\n        ret = vec.getUnit() * size;\n        \n        cout << ret.x << \" \" << ret.y << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iomanip>\n#include <iostream>\n#include <cmath>\n#include <limits>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\nnamespace libcomp {\nnamespace geometry {\nstatic const double EPS = 1e-9;\ninline double abs(double x){ return std::abs(x); }\ninline bool tolerant_eq(double a, double b){ return abs(a - b) < EPS; }\n}\n}\nnamespace libcomp {\nnamespace geometry {\nstruct Point {\n\tdouble x;\n\tdouble y;\n\texplicit Point(const double &x = 0.0, const double &y = 0.0) :\n\t\tx(x), y(y)\n\t{ }\n\tstatic Point invalid(){\n\t\tdouble qnan = numeric_limits<double>::quiet_NaN();\n\t\treturn Point(qnan, qnan);\n\t}\n\tbool is_valid() const { return !(std::isnan(x) || std::isnan(y)); }\n\tPoint operator+(const Point &p) const { return Point(x + p.x, y + p.y); }\n\tPoint &operator+=(const Point &p){ return *this = *this + p; }\n\tPoint operator-(const Point &p) const { return Point(x - p.x, y - p.y); }\n\tPoint &operator-=(const Point &p){ return *this = *this - p; }\n\tPoint operator*(double s) const { return Point(x * s, y * s); }\n\tPoint &operator*=(double s){ return *this = *this * s; }\n\tPoint operator*(const Point &p) const {\n\t\treturn Point(x * p.x - y * p.y, x * p.y + y * p.x);\n\t}\n\tPoint &operator*=(const Point &p){ return *this = *this * p; }\n\tPoint operator/(double s) const { return Point(x / s, y / s); }\n\tPoint &operator/=(double s){ return *this = *this / s; }\n\tbool operator==(const Point &p) const { return x == p.x && y == p.y; }\n\tbool operator!=(const Point &p) const { return x != p.x || y != p.y; }\n\tbool operator<(const Point &p) const {\n\t\treturn (x == p.x) ? (y < p.y) : (x < p.x);\n\t}\n\tdouble abs() const { return sqrt(x * x + y * y); }\n\tdouble norm() const { return x * x + y * y; }\n\tPoint unit() const { return *this / abs(); }\n\tPoint ortho() const { return Point(-y, x); }\n};\ninline Point operator*(double s, const Point &p){ return p * s; }\ninline bool tolerant_eq(const Point &a, const Point &b){\n\treturn tolerant_eq(a.x, b.x) && tolerant_eq(a.y, b.y);\n}\ninline double cross(const Point &a, const Point &b){\n\treturn a.x * b.y - a.y * b.x;\n}\ninline double dot(const Point &a, const Point &b){\n\treturn a.x * b.x + a.y * b.y;\n}\ninline int ccw(const Point &a, const Point &b, const Point &c){\n\tPoint d = b - a, e = c - a;\n\tif(cross(d, e) > 0.0){ return 1; }\n\tif(cross(d, e) < 0.0){ return -1; }\n\tif(dot(d, e) < 0.0){ return 2; }\n\tif(d.abs() < e.abs()){ return -2; }\n\treturn 0;\n}\n}\n}\nnamespace libcomp {\nnamespace geometry {\nstruct Line {\n\tPoint a;\n\tPoint b;\n\texplicit Line(const Point &a = Point(), const Point &b = Point()) :\n\t\ta(a), b(b)\n\t{ }\n\tstatic Line invalid(){\n\t\tPoint inv = Point::invalid();\n\t\treturn Line(inv, inv);\n\t}\n\tbool is_valid() const { return a.is_valid() && b.is_valid(); }\n\tbool operator<(const Line &l) const {\n\t\treturn (a == l.a) ? (b < l.b) : (a < l.a);\n\t}\n\tPoint projection(const Point &p) const {\n\t\tdouble t = dot(p - a, b - a) / (b - a).norm();\n\t\treturn a + t * (b - a);\n\t}\n\tPoint reflection(const Point &p) const {\n\t\treturn p + 2.0 * (projection(p) - p);\n\t}\n};\ninline bool tolerant_eq(const Line &a, const Line &b){\n\treturn abs(cross(a.b - a.a, b.a - a.a)) < EPS;\n}\ninline bool directed_tolerant_eq(const Line &a, const Line &b){\n\tif(!tolerant_eq(a, b)){ return false; }\n\treturn tolerant_eq((a.a - a.b).unit(), (b.a - b.b).unit());\n}\n}\n}\nnamespace geom = libcomp::geometry;\nint main(){\n\tios_base::sync_with_stdio(false);\n\tcout << setiosflags(ios::fixed) << setprecision(10);\n\tgeom::Line l;\n\tcin >> l.a.x >> l.a.y >> l.b.x >> l.b.y;\n\tint n;\n\tcin >> n;\n\tfor(int i = 0; i < n; ++i){\n\t\tgeom::Point p;\n\t\tcin >> p.x >> p.y;\n\t\tgeom::Point q = l.projection(p);\n\t\tcout << q.x << \" \" << q.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// This is free and unencumbered software released into the public domain.\n\n// Anyone is free to copy, modify, publish, use, compile, sell, or\n// distribute this software, either in source code form or as a compiled\n// binary, for any purpose, commercial or non-commercial, and by any\n// means.\n\n// In jurisdictions that recognize copyright laws, the author or authors\n// of this software dedicate any and all copyright interest in the\n// software to the public domain. We make this dedication for the benefit\n// of the public at large and to the detriment of our heirs and\n// successors. We intend this dedication to be an overt act of\n// relinquishment in perpetuity of all present and future rights to this\n// software under copyright law.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n// OTHER DEALINGS IN THE SOFTWARE.\n\n// For more information, please refer to <http://unlicense.org>\n\n#include <algorithm>\n#include <complex>\n#include <vector>\n\nusing namespace std;\n\n#define X real()\n#define Y imag()\n\ntypedef long double Real;\ntypedef complex<Real> Point;\nstruct Line {\n  Point a, b;\n  bool operator<(const Line &line) const;\n};\ntypedef vector<Point> Polygon;\n\nconstexpr Real PI = acos(Real(-1));\n\n// 比較関数\nint sgn(const Real &a, const Real &b = 0) {\n  constexpr Real EPS = 1e-8;\n  return a < b - EPS ? -1 : a > b + EPS ? 1 : 0;\n}\n\nbool near(const Point &a, const Point &b) { return !sgn(norm(a - b)); }\nnamespace std {\nbool operator<(const Point &a, const Point &b) {\n  return sgn(a.X, b.X) ? a.X < b.X : a.Y < b.Y;\n}\n} // namespace std\n\nbool Line::operator<(const Line &line) const {\n  return !near(a, line.a) ? a < line.a : b < line.b;\n}\n\n// 平方根\nReal sr(const Real &a) { return sqrt(max<Real>(a, 0)); }\n\n// 内積\nReal dot(const Point &a, const Point &b) { return a.X * b.X + a.Y * b.Y; }\n// 外積\nReal det(const Point &a, const Point &b) { return a.X * b.Y - a.Y * b.X; }\n\n// 線分のベクトル\nPoint vec(const Line &a) { return a.b - a.a; }\n\n// 線分abに対する点cの位置\nenum CCW { FRONT = 1, RIGHT = 2, BACK = 4, LEFT = 8, ON = 16 };\nint ccw(const Point &a, const Point &b, const Point &c) {\n  if (near(a, c) || near(b, c)) {\n    return ON;\n  }\n  int s = sgn(det(b - a, c - a));\n  if (s) {\n    return s > 0 ? LEFT : RIGHT;\n  }\n  return (a < b) == (b < c) ? FRONT : (c < a) == (a < b) ? BACK : ON;\n}\n\n// 有向角度\nReal arg(const Point &base, const Point &a, const Point &b) {\n  return arg((b - base) / (a - base));\n}\n\nLine sortBase;\nbool lessArg(const Point &a, const Point &b) {\n  Real ang1 = arg(sortBase.a, sortBase.b, a);\n  Real ang2 = arg(sortBase.a, sortBase.b, b);\n  return sgn(ang1, ang2) ? ang1 < ang2 : norm(a) > norm(b);\n}\n\n// 射影\nPoint proj(const Line &l, const Point &p) {\n  auto v = vec(l);\n  return l.a + ((p - l.a) / v).X * v;\n}\nPoint refl(const Line &l, const Point &p) {\n  auto v = vec(l);\n  return l.a + conj((p - l.a) / v) * v;\n}\n\n// 交差判定\nbool eqL(const Line &a, const Line &b) {\n  return !sgn(det(vec(a), vec(b))) && !sgn(det(vec(a), b.a - a.a));\n}\nbool iLL(const Line &a, const Line &b) {\n  return sgn(det(vec(a), vec(b))) || !sgn(det(vec(a), b.a - a.a));\n}\nbool iLLs(const Line &a, const Line &b) { return sgn(det(vec(a), vec(b))); }\nbool iLS(const Line &a, const Line &b) {\n  return sgn(det(vec(a), b.a - a.a)) * sgn(det(vec(a), b.b - a.a)) <= 0;\n}\nbool iLSs(const Line &a, const Line &b) {\n  return sgn(det(vec(a), b.a - a.a)) * sgn(det(vec(a), b.b - a.a)) < 0;\n}\nbool iSS(const Line &a, const Line &b) {\n  int cwa = ccw(a.a, a.b, b.a) | ccw(a.a, a.b, b.b);\n  int cwb = ccw(b.a, b.b, a.a) | ccw(b.a, b.b, a.b);\n  return ((cwa | cwb) & ON) || ((cwa & cwb) == (LEFT | RIGHT));\n}\nbool iSSs(const Line &a, const Line &b) {\n  int cwa = ccw(a.a, a.b, b.a) | ccw(a.a, a.b, b.b);\n  int cwb = ccw(b.a, b.b, a.a) | ccw(b.a, b.b, a.b);\n  return (cwa & cwb) == (LEFT | RIGHT);\n}\n\n// 交点\nPoint pLL(const Line &a, const Line &b) {\n  return a.a + vec(a) * (det(vec(b), b.a - a.a) / det(vec(b), vec(a)));\n}\n\n// 距離\nReal dLP(const Line &l, const Point &p) {\n  return abs(det(vec(l), p - l.a) / vec(l));\n}\nReal dSP(const Line &s, const Point &p) {\n  if (dot(vec(s), p - s.a) < 0) {\n    return abs(p - s.a);\n  }\n  if (dot(vec(s), p - s.b) > 0) {\n    return abs(p - s.b);\n  }\n  return dLP(s, p);\n}\nReal dLL(const Line &a, const Line &b) {\n  if (iLL(a, b)) {\n    return 0;\n  }\n  return dLP(a, b.a);\n}\nReal dLS(const Line &a, const Line &b) {\n  if (iLS(a, b)) {\n    return 0;\n  }\n  return min(dLP(a, b.a), dLP(a, b.b));\n}\nReal dSS(const Line &a, const Line &b) {\n  if (iSS(a, b)) {\n    return 0;\n  }\n  return min({dSP(a, b.a), dSP(a, b.b), dSP(b, a.a), dSP(b, a.b)});\n}\n\n// 円\nstruct Circle {\n  Point c;\n  Real r;\n};\n\n// 交差判定\nbool iCP(const Circle &c, const Point &p) {\n  return sgn(abs(p - c.c), c.r) <= 0;\n}\nbool iCL(const Circle &c, const Line &l) { return sgn(c.r, dLP(l, c.c)) >= 0; }\nbool iCS(const Circle &c, const Line &s) { return sgn(c.r, dSP(s, c.c)) >= 0; }\nbool iCSc(const Circle &c, const Line &s) {\n  return iCS(c, s) && sgn(c.r, max(abs(s.a - c.c), abs(s.b - c.c))) >= 0;\n}\nbool iCC(const Circle &a, const Circle &b) {\n  return sgn(abs(a.c - b.c), a.r + b.r) <= 0;\n}\nbool iCCc(const Circle &a, const Circle &b) {\n  return iCC(a, b) && sgn(abs(a.c - b.c), abs(a.r - b.r)) >= 0;\n}\n\n// 交点\npair<Point, Point> pCC(const Circle &a, const Circle &b) {\n  Real x = (norm(a.c - b.c) + a.r * a.r - b.r * b.r) / (2 * abs(a.c - b.c));\n  Point e = (b.c - a.c) / abs(b.c - a.c);\n  Point y = e * Point(0, sr(a.r * a.r - x * x));\n  return make_pair(a.c + e * x - y, a.c + e * x + y);\n}\npair<Point, Point> pCL(const Circle &c, const Line &l) {\n  Point x = proj(l, c.c);\n  Point y = vec(l) / abs(vec(l)) * sr(c.r * c.r - norm(x - c.c));\n  return make_pair(x - y, x + y);\n}\n\n// 角の内外判定 角abの内部にあれば正、辺上は0、外部は負\nint sAP(const Point &a, const Point &b, const Point &c) {\n  return sgn(det(a, c)) - sgn(det(b, c)) - sgn(det(a, b));\n}\n\n// 多角形の面積\nReal aPol(const Polygon &vp) {\n  Real res = 0;\n  for (int i = 0; i < int(vp.size()); ++i) {\n    res += det(vp[i], vp[(i + 1) % vp.size()]);\n  }\n  return res / 2;\n}\n\n// 多角形の内外判定 内部:1、周上:0、外部:-1\nint sGP(const Polygon &pol, const Point &p) {\n  int side = -1;\n  for (int i = 0; i < int(pol.size()); ++i) {\n    Point p0 = pol[i] - p, p1 = pol[(i + 1) % pol.size()] - p;\n    if (ccw(p0, p1, 0) == ON) {\n      return 0;\n    }\n    if (p0.Y > p1.Y) {\n      swap(p0, p1);\n    }\n    if (sgn(p0.Y) <= 0 && 0 < sgn(p1.Y) && sgn(det(p0, p1)) > 0) {\n      side *= -1;\n    }\n  }\n  return side;\n}\n\n// 凸包\nPolygon convexHull(vector<Point> p) {\n  int m = -1, n = p.size();\n  if (n < 3) {\n    return p;\n  }\n  vector<Point> q(n * 2);\n  sort(p.begin(), p.end());\n  for (int i = 0; i < n; q[++m] = p[i++]) {\n    for (; m > 0 && ccw(q[m - 1], q[m], p[i]) != LEFT; --m) {\n      ;\n    }\n  }\n  for (int i = n - 2, r = m; i >= 0; q[++m] = p[i--]) {\n    for (; m > r && ccw(q[m - 1], q[m], p[i]) != LEFT; --m) {\n      ;\n    }\n  }\n  q.resize(m);\n  return q;\n}\n\n// 凸多角形切断\nPolygon convexCut(const Polygon &p, const Line &l) {\n  vector<Point> q;\n  for (int i = 0; i < int(p.size()); ++i) {\n    if (ccw(l.a, l.b, p[i]) != RIGHT) {\n      q.push_back(p[i]);\n    }\n    Line s = {p[i], p[(i + 1) % p.size()]};\n    if (iLSs(l, s)) {\n      q.push_back(pLL(l, s));\n    }\n  }\n  return q;\n}\n\n// 線分をマージする\nvector<Line> merge(vector<Line> s) {\n  for (int i = 0; i < int(s.size()); ++i) {\n    if (s[i].b < s[i].a) {\n      swap(s[i].a, s[i].b);\n    }\n  }\n  sort(s.begin(), s.end());\n  for (int i = 0; i < int(s.size()); ++i) {\n    for (int j = 0; j < i; ++j) {\n      if (iSS(s[i], s[j]) && !iLLs(s[i], s[j])) {\n        s[j].b = max(s[i].b, s[j].b);\n        s.erase(s.begin() + i--);\n        break;\n      }\n    }\n  }\n  return s;\n}\n\n// 線分アレンジメント 隣の点への辺のみを持つ\nvector<vector<int>> sArr(vector<Line> s, vector<Point> &vp) {\n  s = merge(s);\n  for (int i = 0; i < int(s.size()); ++i) {\n    vp.push_back(s[i].a);\n    vp.push_back(s[i].b);\n  }\n  for (int i = 0; i < int(s.size()); ++i) {\n    for (int j = 0; j < i; ++j) {\n      if (iSS(s[i], s[j])) {\n        vp.push_back(pLL(s[i], s[j]));\n      }\n    }\n  }\n  sort(vp.begin(), vp.end());\n  vp.erase(unique(vp.begin(), vp.end(), near), vp.end());\n  vector<vector<int>> graph(vp.size());\n  for (int i = 0; i < int(s.size()); ++i) {\n    vector<pair<Real, int>> v;\n    for (int j = 0; j < int(vp.size()); ++j) {\n      if (ccw(s[i].a, s[i].b, vp[j]) == ON) {\n        v.push_back(make_pair(norm(vp[j] - s[i].a), j));\n      }\n    }\n    sort(v.begin(), v.end());\n    for (int j = 0; j < int(v.size()) - 1; ++j) {\n      graph[v[j + 1].second].push_back(v[j].second);\n      graph[v[j].second].push_back(v[j + 1].second);\n    }\n  }\n  return graph;\n}\n\n#include <iomanip>\n#include <iostream>\n\nint main() {\n  Real p1x, p1y, p2x, p2y;\n  cin >> p1x >> p1y >> p2x >> p2y;\n  Line line{Point(p1x, p1y), Point(p2x, p2y)};\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Real x, y;\n    cin >> x >> y;\n    Point p(x, y);\n    Point r = proj(line, p);\n    cout << fixed << setprecision(10) << r.X << \" \" << r.Y << endl;\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\ntypedef long double     lf;\n\nusing namespace std;\n\nconst lf EPS = 1e-9;\n\nstruct pt {\n  lf x, y;\n  pt( ) { }\n  pt( lf x, lf y ) : x( x ), y ( y ) { }\n};\n\ninline lf x( pt P ) { return P.x; }\ninline lf y( pt P ) { return P.y; }\n\nistream& operator >> ( istream& in, pt& p ) {\n  lf x,y; in >> x >> y;\n  p = pt(x,y); return in;\n}\n\nostream& operator << ( ostream& out, const pt& p ) {\n  out << double(p.x) << \" \" << double(p.y);\n  return out;\n}\n\npt operator + ( const pt& A, const pt& B ) {\n  return pt( x(A)+x(B), y(A)+y(B) );\n}\n\npt operator - ( const pt& A, const pt& B ) {\n  return pt( x(A)-x(B), y(A)-y(B) );\n}\n\n\npt operator * ( const lf& B, const pt& A ) {\n  return pt( x(A)*B, y(A)*B );\n}\n\ninline lf dot( pt A, pt B ) {\n  return x(A)*x(B) + y(A)*y(B);\n}\n\ninline lf norm( pt A ) {\n  return x(A)*x(A) + y(A)*y(A);\n}\n\npt projection (pt p, pt A, pt B) {\n  lf u = dot( p-A , B-A ) / norm( B-A );\n  return A + u*( B-A );\n}\n\npt p1,p2,p;\nint n;\n\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout << fixed << setprecision(10);\n\n  cin >> p1 >> p2 >> n;\n  for( int i = 0; i < n; ++i ) {\n    cin >> p;\n    cout << projection( p, p1, p2 ) << '\\n';\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef DEBUG_MODE\n#define DBG(n) n;\n#else\n#define DBG(n) ;\n#endif\n#define REP(i,n) for(ll (i) = (0);(i) < (n);++i)\n#define rep(i,s,g) for(ll (i) = (s);(i) < (g);++i)\n#define rrep(i,s,g) for(ll (i) = (s);i >= (g);--(i))\n#define PB push_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SHOW1d(v,n) {for(int WWW = 0;WWW < (n);WWW++)cerr << v[WWW] << ' ';cerr << endl << endl;}\n#define SHOW2d(v,i,j) {for(int aaa = 0;aaa < i;aaa++){for(int bbb = 0;bbb < j;bbb++)cerr << v[aaa][bbb] << ' ';cerr << endl;}cerr << endl;}\n#define ALL(v) v.begin(),v.end()\n#define Decimal fixed<<setprecision(20)\n#define INF 1000000000\n#define LLINF 1000000000000000000LL\n#define MOD 1000000007\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\n\nconst double EPS = 1e-12;\nconst double PI = acos(-1.0);\ntypedef complex<double> point;\nnamespace std {\n\tbool operator < (const point& a, const point& b) {\n\t\treturn real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n\t}\n\t\n\tbool operator == (const point& a,const point& b) {\n\t\treturn (abs(a.real() - b.real()) < EPS && abs(a.imag() - b.imag()) < EPS);\n\t}\n}\nstruct circle {\n\tpoint p; double r;\n\tcircle(){}\n\tcircle(const point &p, double r) : p(p), r(r) { }\n};\nstruct segment : public vector<point> {\n\tsegment(const point &a, const point &b) {\n\t\tpush_back(a); push_back(b);\n\t}\n};\n\ndouble cross(const point& a, const point& b) {\n\treturn imag(conj(a)*b);\n}\n\ndouble dot(const point& a, const point& b) {\n\treturn real(conj(a)*b);\n}\n\n/*\na → b で時計方向に折れて b → c\na → b で半時計方向に折れて b → c\na → b で逆を向いて a を通り越して b → c\na → b でそのまま b → c\na → b で逆を向いて b → c ( または b == c )\n*/\n\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > 0)   return +1;       // counter clockwise\n\tif (cross(b, c) < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const segment &l, const segment &m) {\n\treturn abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n\t\tabs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const segment &l, const segment &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])*       // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const segment &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSP(const segment &s, const point &p) {\n\treturn abs(s[0] - p) + abs(s[1] - p) - abs(s[1] - s[0]) < EPS; // triangle inequality\n}\n//端点の交差も考える\nbool intersectSS(const segment &s, const segment &t) {\n\tif(intersectSP(s,t[0]) || intersectSP(s,t[1]) || intersectSP(t,s[0]) || intersectSP(t,s[1]))return true;\n\treturn ccw(s[0], s[1], t[0])*ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0])*ccw(t[0], t[1], s[1]) <= 0;\n}\n\npoint projection(const segment &l, const point &p) {\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + t*(l[0] - l[1]);\n}\npoint reflection(const segment &l, const point &p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\ndouble distanceLP(const segment &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const segment &l, const segment &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const segment &l, const segment &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const segment &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const segment &s, const segment &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const point &a,const point &b){\n\treturn abs(a-b);\n}\n\n//交点\npoint crosspoint(const segment &l, const segment &m) {\n\tif(!intersectSS(l,m))return point(INF,INF);\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return point(INF,INF); // same line\n\tif (abs(A) < EPS) return point(INF,INF); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2 * n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tfor (int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k - 2], ch[k - 1], ps[i]) <= 0) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n/*多角形内包判定\nOUT:0\nON:1\nIN:2\n*/\n#define curr(PP, i) PP[i]\n#define next(PP, i) PP[(i+1)%PP.size()]\nint contains(const vector<point>& Poly, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < Poly.size(); ++i) {\n\t\tpoint a = curr(Poly, i) - p, b = next(Poly, i) - p;\n\t\tif (imag(a) > imag(b)) swap(a, b);\n\t\tif (imag(a) <= 0 && 0 < imag(b))\n\t\t\tif (cross(a, b) < 0) in = !in;\n\t\tif (cross(a, b) == 0 && dot(a, b) <= 0) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n//見えるか(可視グラフ用) \nbool block_off(const point &a, const point &b, const vector<point> &obj) {\n  point m = (a+b)/2.0;\n  bool on = false, in = false;\n  for (int j = 0; j < obj.size(); ++j) {\n    point c = curr(obj,j), d = next(obj,j);\n    if (imag(d) < imag(c)) swap(c, d);\n    if (cross(a-c,b-c) * cross(a-d,b-d) < 0 &&    // strictly intersect.\n        cross(c-a,d-a) * cross(c-b,d-b) < 0) return true;\n    if (cross(a-c,b-c) == 0 && dot(a-c,b-c) < 0) return true;\n    if (imag(c) <= imag(m) && imag(m) < imag(d))  // strictly contain.\n      if (cross(c-m,d-m) < 0) in = !in;\n    if (cross(c-m,d-m) == 0 && dot(c-m,d-m) <= 0) on = true;\n  }\n  return !on && in;\n}\n\n//面積\ndouble area(const vector<point>& p) {\n\tdouble A = 0;\n\tfor (int i = 0; i < p.size(); ++i)\n\t\tA += cross(curr(p, i), next(p, i));\n\treturn A / 2.;\n}\n\n//角度足し算\ndouble add_rad(double a,double b){\n\tdouble ret = a + b;\n\tif(ret > PI)ret -= 2 * PI;\n\treturn ret;\n}\n\n//なす角(vector)\ndouble angle(const point &a,const point &b) {\n\tauto tmp = abs(arg(a) - arg(b));\n\treturn min(tmp, 2 * PI - tmp);\n}\n\ndouble angle(const segment &s1,const segment &s2) {\n\treturn angle(s1[1] - s1[0], s2[1] - s2[0]);\n}\n\n//点の回転\npoint rotate(const point &p, double rad) {\n\tdouble X = p.real() * cos(rad) - p.imag() * sin(rad);\n\tdouble Y = p.imag() * cos(rad) + p.real() * sin(rad);\n\treturn point(X, Y);\n}\n\n//並行\nbool isParallel(const point &a, const point &b){\n    return abs(cross(a,b)) < EPS;\n}\nbool isParallel(const segment &a, const segment &b){\n    return isParallel(a[1]-a[0], b[1]-b[0]);\n}\n\nint main() {\n\tdouble a,b,c,d;cin >> a >> b >> c >> d;\n\tsegment seg = segment(point(a,b),point(c,d));\n\tint q;cin >> q;\n\tREP(i,q){\n\t\tcin >> a >> b;\n\t\tpoint tmp = point(a,b);\n\t\tpoint ret = projection(seg,tmp);\n\t\tcout << Decimal << ret.real() << ' ' << Decimal << ret.imag() << endl;\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#define EPS (1e-15)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint() {}\n\tPoint(double xx, double yy) {\n\t\tx = xx;\n\t\ty = yy;\n\t}\n\tPoint operator + (Point& p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point& p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double k) { return Point(x * k, y * k); }\n\tPoint operator / (double k) { return Point(x / k, y / k); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator == (const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\nstruct Segment {\n\tPoint p1, p2;\n};\ntypedef Point Vector;\ntypedef Segment Line;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point cc, double rr) {\n\t\tc = cc;\n\t\tr = rr;\n\t}\n};\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\nPoint project(Segment s, Point p) {\n\tVector hepo = p - s.p1;\n\tVector base = s.p2 - s.p1;\n\tVector t = base * (dot(p - s.p1, base) / base.norm());\n\tPoint x = s.p1 + t;\n\treturn x;\n}\nint main() {\n\tPoint p1, p2,p,x,t;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tSegment s;\n\ts.p1 = p1;\n\ts.p2 = p2;\n\tint q;\n\tcin >> q;\n\twhile (q--) {\n\t\tcin >> p.x >> p.y;\n\t\tx = project(s, p);\n\t\tprintf(\"%.9lf %.9lf\\n\", x.x, x.y);\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <cmath>\n#include <cstdio>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nVector projection(const Segment& s, const Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    using namespace std;\n    // cerr << \"p: \" << p.x << \", \" << p.y;\n    // cerr << \" dot: \" << dot(p - s.p1, base);\n    // cerr << \" norm: \" << norm(base) << endl;\n    return s.p1 + base * r;\n}\n\nint main() {\n    using namespace std;\n\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Segment s{p1, p2};\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        long long x, y;\n        cin >> x >> y;\n        // cerr << x << \" \" << y << endl;\n        auto p = projection(s, Point{static_cast<double>(x), static_cast<double>(y)});\n        cout << setprecision(10) << p.x << \" \" << p.y << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cstdio>\n#define x real()\n#define y imag()\nusing namespace std;\ntypedef complex <double> point;\n\ndouble dot(point a,point b){\n  return a.x*b.x+a.y*b.y;\n}\n\npoint projection(point a,point b,point c){\n  point base = b - a;\n  double r = dot(c-a,base)/(abs(base)*abs(base));\n  return a+base*r;\n}\n\nint main(){\n  point a,b,c;\n  cin >>a.x>>a.y>>b.x>>b.y;\n  int q;\n  cin >> q;\n  for(int i=0;i<q;i++){\n    cin >> c.x >> c.y;\n    point res = projection(a,b,c);\n    printf(\"%.10f %.10f\\n\",res.x,res.y);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n//?????????\n#pragma region MACRO \n#define putans(x)  std::cerr << \"answer: \" ; cout << (x) << endl\n#define dputans(x) std::cerr << \"answer: \"; cout << setprecision(10) << (double)(x) << endl\n#define REP(i,a,n) for(int i=(a); i<(int)(n); i++)\n#define RREP(i,a,n) for(int i=(int)(n-1); i>= a; i--)\n#define rep(i,n) REP(i,0,n)\n#define rrep(i,n) RREP(i,0,n)\n#define all(a) begin((a)),end((a))\n#define mp make_pair\n#define exist(container, n) ((container).find((n)) != (container).end())\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n#ifdef _DEBUG //???????????????????????????????????????????????????\nstd::ifstream ifs(\"data.txt\");\n#define put ifs >>\n#else //?????£????????????????????§?????????????????????\n#define put cin >>\n#endif\n#pragma endregion\n\n//???????????°??????????????´\n#pragma region CODING_SUPPORT\n#define dbg(var0) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << endl; }\n#define dbg2(var0, var1) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg(var1); }\n#define dbg3(var0, var1, var2) { std::cerr << ( #var0 ) << \"=\" << ( var0 ) << \", \"; dbg2(var1, var2); }\n#define dbgArray(a,n) {std::cerr << (#a) << \"=\";  rep(i,n){std::cerr <<(a[i])<<\",\";} cerr<<endl;} \n#ifndef _DEBUG\n#define dbg1 {}\n#define dbg2 {}\n#define dbg3 {}\n#define dbgArray {}\n#endif \n#pragma endregion \n//typedef????????????????????????????¶????????????§?????????\n#pragma region TYPE_DEF\ntypedef long long ll;\ntypedef pair<int, int> pii; typedef pair<string, string> pss; typedef pair<int, string>pis;\ntypedef vector<string> vs; typedef vector<int> vi;\n#pragma endregion\n//??????????????°(???????????????????????§??????)\n#pragma region CONST_VAL\n#define PI (2*acos(0.0))\n#define EPS (1e-9)\n#define MOD (ll)(1e9 + 7)\n#define INF (ll)(1e9)\n#pragma endregion\n\nclass Point {//????????????????????????\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tdouble operator * (Point p) { return dot(p); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const Point &p) const {return  x != p.x ? x < p.x : y < p.y;}\n\tbool operator == (const Point &p) const {return  fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;}\n\t//???????????????\n\tdouble dot(Point p) {return x * p.x + y * p.y;}\n\tdouble cross(Point p) { return x * p.y - y * p.x; }\n\n};\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nstruct Segment {//??????\n\tPoint p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;//??´???\ntypedef vector<Point> Polygon;\n\n//??´????????????\nbool isOrthogonal(Vector a, Vector b) { return equals(a*b, 0.0); }\nbool isParallel(Vector a, Vector b) { return equals(a.cross(b), 0.0); }\n\n//??????s???????????????p????°???±\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = (p - s.p1).dot( base) / base.norm();\n\treturn s.p1 + base*r;\n}\n\n\nint main() {\n\tdouble xp1, yp1, xp2, yp2; put xp1 >> yp1 >> xp2 >> yp2;\n\tSegment s;\n\ts.p1 = Point(xp1, yp1);\n\ts.p2 = Point(xp2, yp2);\n\n\tint n; put n;\n\trep(i, n) {\n\t\tPoint p;\n\t\tput p.x >> p.y;\n\t\tPoint prj = projection(s, p);\n\t\tcout << setprecision(10) << prj.x << \" \" << prj.y << endl;\n\t}\n\treturn 0;\n}\n\n/*\n#define i(x) int x; scanf(\"%d\",&x);\n#define l(x) ll x; scanf(\"%lld\",&x);\n#define d(x) double  x; scanf(\"%lf\",&x);\n*/\n//??????????£?????????°???\n//https://www23.atwiki.jp/akitaicpc/pages/65.html"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <map>\n#include <set>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <string>\n#include <cstring>\n#include <ctime>\n#include <cassert>\n#include <climits>\n\nusing namespace std;\n\ntypedef long long lint;\n\n//定数\nconst double EPS = 1e-10;\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, 1, 0, -1};\nconst int INF = 1001001001;\nconst lint INFLL = 1001001001001001001ll;\n\n//初期化関連\n#define zclear(a) memset((a), 0 ,sizeof(a))\n#define mclear(a) memset((a), -1, sizeof(a))\n\n//デバッグ出力\n#define show(x)  cerr << #x << \" = \" << (x) << endl;\n#define debug(x) cerr << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << \" \" << __FILE__ << endl;\n\nbool eq(double a, double b) //a == b\n{\n    return (fabs(a - b) <= EPS);\n}\n\nbool neq(double a, double b) //a != b\n{\n    return (!eq(a, b));\n}\n  \nbool lt(double a, double b) //a < b\n{\n    return (a - b < -EPS);\n}\n  \nbool leq(double a, double b) //a <= b\n{\n    return (lt(a, b) || eq(a, b));\n}\n  \nbool gt(double a, double b) //a > b\n{\n    return (a - b > +EPS);\n}\n  \nbool geq(double a, double b) //a >= b\n{\n    return (gt(a, b) || eq(a, b));\n}\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0): x(x), y(y){}\n\tPoint operator + (Point p){return Point(x + p.x, y + p.y);}\n\tPoint operator - (Point p){return Point(x - p.x, y - p.y);}\n\tPoint operator * (double a){return Point(x * a, y * a);}\n\tPoint operator / (double a){return Point(x / a, y / a);}\n\tPoint operator * (const Point &a){\n\t\treturn Point(x * a.x - y * a.y, x * a.y + y * a.x);\n\t}\n\tbool operator < (const Point &p) const {\n\t\treturn (x != p.x ? x < p.x : y < p.y);\n\t}\n\tbool operator == (const Point &p) const {\n\t\treturn (fabs(x - p.x) < EPS && fabs(y - p.y) < EPS);\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){return (a.x * a.x + a.y * a.y);}\ndouble abs(Vector a){return (sqrt(norm(a)));}\ndouble abs(Vector a, Vector b){return (sqrt(norm(a - b)));}\ndouble dot(Vector a, Vector b){return (a.x * b.x + a.y * b.y);}\ndouble cross(Vector a, Vector b){return (a.x * b.y - a.y * b.x);}\ndouble atan(Vector a){return atan2(a.y, a.x);}\nbool sortX(Point a, Point b){return (a.x != b.x ? lt(a.x, b.x) : lt(a.y, b.y));}\nbool sortY(Point a, Point b){return (a.y != b.y ? lt(a.y, b.y) : lt(a.x, b.x));}\nPoint p;\nbool sortT(Point a, Point b){return (gt(cross(a - p, b - p), 0));}\n\nint ccw(Point p0, Point p1, Point p2)\n{\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return (+1); //p0, p1, p2 が反時計周り\n\tif (cross(a, b) < -EPS) return (-1);//p0, p1, p2 が時計回り\n\tif (dot(a, b) < -EPS) return (+2); //p2--p0--p1 の順で一直線上\n\tif (norm(a) < norm(b)) return (-2); //p0--p1--p2 の順で一直線上\n\treturn (0); //p0--p2--p1 の順で一直線上\n}\n\nPolygon normalize(Polygon &v)\n{\n    int pt = 0;\n    for (int i = 1; i < v.size(); i++){\n        if (v[pt].y > v[i].y || (v[pt].y == v[i].y && v[pt].x > v[i].x)){\n            pt = i;\n        }\n    }\n    swap(v[pt], v[0]);\n    p = v[0];\n    sort(v.begin() + 1, v.end(), sortT);\n    return (v);\n}\n\nPolygon conhel(Polygon& ps)\n{\n    sort(ps.begin(), ps.end());\n    int k = 0, n = (int)ps.size();\n    Polygon qs(n * 2);\n      \n    for (int i = 0; i < n; i++){\n      while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    for (int i = n - 2, t = k; i >= 0; i--){\n      while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < EPS) k--;\n      qs[k++] = ps[i];\n    }\n  \n    qs.resize(k - 1);\n    return (qs);\n}\n\ndouble getArea(Polygon t){\n    double ans = 0.0;\n\tt = normalize(t);\n    for (unsigned int i = 0; i < t.size(); i++)\n        ans += cross(t[i] , t[(i + 1) % t.size()]);\n    return (fabs(ans) / 2);\n}\n\nbool isIntersectLL(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線の場合は交差していると判定する.\n\treturn (abs(cross(p2 - p1, p4 - p3)) > EPS || // 傾きが異なる\n\t\tabs(cross(p2 - p1, p4 - p3)) < EPS); // 同じ直線である\n}\nbool isIntersectLS(Point p1, Point p2, Point p3, Point p4)\n{// 同一直線上にある場合も交差と判定\n\treturn (cross(p2 - p1, p3 - p1) * cross(p2 - p1, p4 - p1) < EPS);\n}\nbool isIntersectLP(Point p1, Point p2, Point p)\n{\n\treturn (neq(abs(ccw(p1, p2, p)), 1));\n}\nbool isIntersectSS(Point p1, Point p2, Point p3, Point p4)\n{\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n             ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool isIntersectSP(Point p1, Point p2, Point p)\n{\n\treturn (eq(ccw(p1, p2, p), 0));\n}\nbool isInsideCP(Point c, double r, Point p)\n{\n\treturn (leq(abs(c - p), r));\n}\nbool isInsideCC(Point c1, double r1, Point c2, double r2)\n{\n\treturn (leq(abs(c1 - c2), r1 + r2) && geq(abs(c1 - c2), abs(r1 - r2)));\n}\nbool isInsidePolyP(Polygon gon, Point p)\n{\n    for (int i = 0; i < gon.size(); i++){\n        if (ccw(gon[i], gon[(i + 1) % gon.size()], p) == -1) return (false);\n    }\n    return (true);\n}\n\nPoint projection(Point p1, Point p2, Point p3) //直線p1p2 上への写像\n{\n\tdouble t = dot(p3 - p1, p2 - p1) / norm(p2 - p1);\n\treturn (p1 + (p2 - p1) * t);\n}\nPoint reflection(Point p1, Point p2, Point p3) //直線p1p2 上への反射\n{\n\treturn (p3 + (projection(p1, p2, p3) - p) * 2);\n}\ndouble distanceLP(Point p1, Point p2, Point p)\n{\n\treturn (abs(p - projection(p1, p2, p)));\n}\ndouble distanceLL(Point l1, Point l2, Point m1, Point m2)\n{\n\treturn (isIntersectLL(l1, l2, m1, m2) ? 0 : distanceLP(l1, l2, m1));\n}\ndouble distanceLS(Point l1, Point l2, Point s1, Point s2)\n{\n    if (isIntersectLS(l1, l2, s1, s2)) return (0);\n\treturn (min(distanceLP(l1, l2, s1), distanceLP(l1, l2, s2)));\n}\ndouble distanceSP(Point s1, Point s2, Point p)\n{\n\tPoint r = projection(s1, s2, p);\n\tif (isIntersectSP(s1, s2, r)) return (abs(r - p));\n\treturn (min(abs(s1 - p), abs(s2 - p)));\n}\ndouble distanceSS(Point s1, Point s2, Point t1, Point t2){\n\tif (isIntersectSS(s1, s2, t1, t2)) return (0);\n\treturn (min(min(distanceSP(s1, s2, t1), distanceSP(s1, s2, t2)),\n\t\t\tmin(distanceSP(t1, t2, s1), distanceSP(t1, t2, s2))));\n}\nPoint interPointLL(Point a1, Point a2, Point b1, Point b2)\n{\n\tdouble d = cross(a2 - a1, b2 - b1);\n\tif (abs(d) < EPS) throw \"Segment is Paralell!\";\n\tPoint a = a2 - a1, b = b2 - b1;\n    double t = cross(b, b1 - a1) / cross(b, a);\n    return (a1 + a * t);\n}\nvector<Point> interPointCC(Point c1, double r1, Point c2, double r2)\n{\n\tvector<Point> res;\n\tif (abs(c1 - c2) < EPS) return (vector<Point>()); // 交点が絶対にない\n\tdouble d = abs(c1 - c2);\n\tdouble rc = (d * d + r1 * r1 - r2 * r2) / (2 * d);\n\tdouble rs = sqrt(r1 * r1 - rc * rc);\n\tPoint diff = (c2 - c1) / d;\n\tres.push_back(Point(c1 + diff * Point(rc, rs)));\n\tres.push_back(Point(c1 + diff * Point(rc, -rs)));\n\treturn (res);\n}\nvector<Point> crosspointCL(Point a, double ra, Point b1, Point b2)\n{\n\tvector<Point> res;\n\tdouble dist = distanceLP(b1, b2, a);\n\tif (leq(dist, ra)){\n\t\tPoint s = projection(b1, b2, a);\n\t\tdist = sqrt(ra * ra - dist * dist);\n\t\tPoint t = (b2 - b1) / abs(b2 - b1);\n\t\tres.push_back(s + t * dist);\n\t\tres.push_back(s - t * dist);\n\t}\n\treturn (res);\n}\n\nPoint unitVector(Vector t)\n{\n    double u = abs(t);\n    return (Point(t.x / u , t.y / u));\n}\n\nPoint normalVector(Point p, Point a, Point b)\n{\n    Point v = unitVector(b - a);\n    v = cross(v, p - a) > 0 ? Point(v.y, -v.x) : Point(-v.y, v.x);\n    return v * distanceLP(p, a, b);\n}\n  \ndouble getCos(Vector a, Vector b)\n{\n    return (dot(a, b) / (abs(a) * abs(b)));\n}\n  \ndouble getSin(Vector a, Vector b)\n{\n    double t = getCos(a, b);\n    return (sqrt(1.0 - t * t));\n}\n  \ndouble getArg(Vector v)\n{\n    return (atan2(v.y, v.x));\n}\n\nPoint rotate(Point t, Point p, double r)\n{\n    double ta = cos(r) * (t.x - p.x) - sin(r) * (t.y - p.y) + p.x;\n    double tb = sin(r) * (t.x - p.x) + cos(r) * (t.y - p.y) + p.y;\n    return (Point(ta, tb));\n}\n\nint main()\n{\n\tint n;\n\tPoint p0, p1;\n\t\n\tscanf(\"%lf %lf %lf %lf\", &p0.x, &p0.y, &p1.x, &p1.y);\n\tscanf(\"%d\", &n);\n\t\n\tfor (int i = 0; i < n; i++){\n\t\tPoint p2;\n\t\tscanf(\"%lf %lf\", &p2.x, &p2.y);\n\t\tPoint t = projection(p0, p1, p2);\n\t\tprintf(\"%.10lf %.10lf\\n\", t.x, t.y);\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <cmath>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x+p2.x, p1.y+p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x-p2.x, p1.y-p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nint main() {\n    using namespace std;\n\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Segment s{p1, p2};\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        Point p;\n        cin >> p.x >> p.y;\n        auto x = projection(s, p);\n        cout << std::setprecision(10) << x.x << \" \" << x.y << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <math.h>\n#include <string.h>\n#include <stdio.h>\nusing namespace std;\nconst int MAXN = 5000;\nint n, m;\ndouble x1, y1, x2, y2;\nint s[MAXN];\nstruct Point\n{\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n};\nstruct Line\n{\n    Point p1, p2;\n    Line() {}\n    Line(Point p1, Point p2): p1(p1), p2(p2) {}\n\n} lie[MAXN];\n\ntypedef Point Vector;\nVector operator +(Vector A, Vector B)\n{\n    return Vector(A.x + B.x, A.y + B.y);\n}\nVector operator -(Vector A, Vector B)\n{\n    return Vector(A.x - B.x, A.y - B.y);\n}\nVector operator *(Vector A, double p)\n{\n    return Vector(A.x * p, A.y * p);\n}\nVector operator /(Vector A, double p)\n{\n    return Vector(A.x / p, A.y / p);\n}\nVector operator -(Vector A)\n{\n    return  Vector(-A.x, -A.y);\n}\n\ndouble torad(double deg)//角度换弧度\n{\n    return deg / 180 * acos(-1.0);\n}\n\nconst double EPS = 1e-10;\nint dcmp(double x)\n{\n    if(fabs(x) < EPS) return 0;\n    else return x < 0 ? -1 : 1;\n}\n\n//向量点积\ndouble Dot(Vector A, Vector B) \n{ \n    return A.x*B.x + A.y*B.y; \n}\n\n//向量叉积\ndouble Cross(Vector A, Vector B)\n{\n    return A.x * B.y - A.y * B.x;\n}\n\nconst int INF = 1000005;\nint par[INF], ran[INF];\n\n//点在直线上的投影\nPoint GetLineProjection(Point P, Point A, Point B) {\n    Vector v = B - A;\n    return A+v*(Dot(v, P-A)/Dot(v, v));\n}\n\n\nint main()\n{\n    double x1,y1,x2,y2;\n    cin>>x1>>y1>>x2>>y2;\n    Point p1=Point(x1,y1);\n    Point p2=Point(x2,y2);\n    int n;\n    cin>>n;\n    while(n--)\n    {\n        double x,y;\n        cin>>x>>y;\n        Point p=Point(x,y);\n        Point Pp=GetLineProjection(p,p1,p2);\n        printf(\"%.10f %.10f\\n\",Pp.x,Pp.y);\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<climits>\n#include<ctime>\n#include<cstring>\n#include<numeric>\n\n#include<algorithm>\n#include<array>\n#include<cmath>\n#include<vector>\n\n#define ALL(v) (v).begin(),(v).end()\n#define REP(i,p,n) for(int i=p;i<(int)(n);++i)\n#define rep(i,n) REP(i,0,n)\n#define dump(a) (cerr << #a << \"=\" << (a) << endl)\n#define DUMP(list) cout << \"{ \"; for(auto nth : list){ cout << nth << \" \"; } cout << \"}\" << endl;\n\nusing namespace std;\n\ntypedef double Real;\nconst Real EPS = 1e-8;\nint sign(Real d) { return d > EPS ? 1 : d < EPS ? -1 : 0; }\n\n//define class ...\n\nstruct Point {\n\tReal x, y;\n\tPoint(Real x_ = 0, Real y_ = 0):x(x_), y(y_) {}\n\n\tPoint operator+(const Point &p) const {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator-(const Point &p) const {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator*(Real s) const {\n\t\treturn Point(x * s, y * s);\n\t}\n\n\tPoint operator/(Real s) const {\n\t\treturn Point(x / s, y / s);\n\t}\n\n\tbool operator<(const Point &p) const {\n\t\treturn sign(x - p.x) == -1 || (sign(x - p.x) == 0 && sign(y - p.y) == -1);\n\t}\n\n\tbool operator==(const Point &p) const {\n\t\treturn sign(x - p.x) == 0 && sign(y - p.y) == 0;\n\t}\n};\n\nistream &operator>>(istream &is, Point &p) {\n\treturn is >> p.x >> p.y;\n}\n\nostream &operator<<(ostream &os, Point &p) {\n\treturn os << '(' << p.x << \", \" << p.y << ')';\n}\n\nstruct Line : public array<Point, 2> { //??????\n\tLine(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Segment : public array<Point, 2> { //??´???\n\tSegment(const Point &a, const Point &b) { at(0) = a; at(1) = b; }\n};\n\nstruct Circle {\n\tPoint c;\n\tPoint r;\n\tCircle(const Point &c_, Real r_): c(c_), r(r_) {}\n};\n\ntypedef vector<Point> Polygon;\n\n// define function\nPoint rotate90(const Point &p) { // ???????¨???¨???\n\treturn Point(-p.y, p.x);\n}\n\nPoint rotate(const Point &p, Real theta) {\n\tconst Real s = sin(theta), c = cos(theta);\n\treturn Point(c * p.x - s * p.y, s * p.x + c * p.y);\n}\n\nReal angle(const Point &p) {\n\treturn atan2(p.y, p.x);\n}\n\nReal norm(const Point &p) {\n\treturn p.x * p.x + p.y * p.y;\n}\n\nReal abs(const Point &p) {\n\treturn sqrt(norm(p));\n}\n\nReal dot(const Point &a, const Point &b) { // ??????\n\treturn a.x * b.x + a.y * b.y;\n}\n\nReal cross(const Point &a, const Point &b) { // ??????\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool is_parallel(const Line &a, const Line &b) {\n\treturn sign( cross(a[1] - a[0], b[1] - b[0]) ) == 0;\n} \n\n// define app function\nPoint project(const Line &l, const Point &p) {\n\tconst Point a = p - l[0];\n\tconst Point b = l[1] - l[0];\n\treturn l[0] + b * (dot(a, b) / norm(b));\n}\n\n\nbool intersect(const Line &a, const Line &b) {\n\treturn sign(cross(a[1] - a[0], b[1] - b[0])) != 0\n\t\t\t|| sign(cross(a[1] - a[0], b[1] - a[0])) == 0;\n}\n\n\nint main() {\n\tcout.setf(ios::fixed);\n\tcout.precision(10);\n\tPoint p0, p1, p2;\n\tint q;\t\n\tcin >> p0 >> p1;\t\t\n\tcin >> q;\t\n\tLine line = Line(p1, p0);\n\trep(i, q) {\n\t\tcin >> p2;\t\t\t\n\t\tPoint ans = project(line, p2);\n\t\tcout << ans.x << \" \" << ans.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n \nusing namespace std;\n \n#define EPS 1e-10\n#define equal(a,b) (fabs(a-b) < EPS)\n\nstruct Point{\n  double x,y;\n\n  Point(){}\n  Point(double x,double y) : x(x),y(y) {}\n\n  Point operator + (const Point &p)const{ return Point(x+p.x,y+p.y); }\n  Point operator - (const Point &p)const{ return Point(x-p.x,y-p.y); }\n  Point operator * (const double &k)const{ return Point(x*k,y*k); }\n  Point operator / (const double &k)const{ return Point(x/k,y/k); }\n};\n\ndouble dot(const Point &a,const Point &b){ return a.x*b.x+a.y*b.y; }\ndouble norm(const Point &p){ return dot(p,p); }\n\nistream &operator >> (istream &is,Point &p){ \n  return is >> p.x >> p.y;\n}\n\ntypedef Point Vector;\n\nstruct Line{\n  Point s,t;\n  Line(){}\n  Line(Point s,Point t) : s(s),t(t) {}\n};\n\nPoint projection(Line l,Point p){\n  Vector b = l.t-l.s;\n  double t = dot(p-l.s,b)/norm(b);\n  return l.s+b*t;\n}\n\nint main(){\n  Line l;\n  int Q;\n  Point p;\n  cin >> l.s >> l.t >> Q;\n  while(Q--){\n    cin >> p;\n    Point p2 = projection(l,p);\n    printf(\"%.10f %.10f\\n\",p2.x,p2.y);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//Projection\n#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\nstatic const double ESP = 1e-10;\n\nbool equals(double a, double b) { return fabs(a - b) < ESP; }\n\nclass Point {\npublic:\n    double x, y;\n\n    explicit Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (const Point &p) const { return Point(x + p.x, y + p.y); }\n    Point operator - (const Point &p) const { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(a / x, a / y); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < ESP && fabs(y - p.y) < ESP;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector v1, Vector v2) {\n    return equals(cross(v1, v2), 0.0);\n}\n\nbool isOrthogonal(Vector v1, Vector v2) {\n    return equals(dot(v1, v2), 0.0);\n}\n\nint main() {\n    int q;\n    double x, y, x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2 >> q;\n    Point p1 = Point(x1, y1), p2 = Point(x2, y2);\n    Vector v1, v2;\n    v1 = p2 - p1;\n    cout << fixed;\n    for(int i = 0; i < q; i++) {\n        cin >> x >> y;\n        Point p = Point(x, y);\n        Vector v2 = p - p1;\n        Point x = Point();\n        x = p1 + (v1 * (dot(v1, v2) / v1.norm()));\n        cout << x.x << \" \" << x.y << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct vec{double x;double y;};\ndouble naiseki(vec a,vec b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\nint main()\n{\n\tdouble xp1,xp2,yp1,yp2;\n\tcin>>xp1>>yp1>>xp2>>yp2;\n\tint q;cin>>q;\n\tvec base;\n\tbase.x=xp2-xp1;\n\tbase.y=yp2-yp1;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tdouble s,t;\n\t\tcin>>s>>t;\n\t\tvec hypo;\n\t\thypo.x=s-xp1;\n\t\thypo.y=t-yp1;\n\t\tcout<<(double)xp1+base.x*naiseki(hypo,base)/naiseki(base,base)<<\" \";\n\t\tcout<<(double)yp1+base.y*naiseki(hypo,base)/naiseki(base,base)<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cmath>\n#define EPS 1e-10\nusing namespace std;\n\nclass Point {\npublic:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n\nstruct Segment {\n  Point p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble norm(Vector a) {\n  return a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a) {\n  return sqrt(norm(a));\n}\n\ndouble dot(Vector a, Vector b) {\n  return a.x * b.x + a.y * b.y;\n}\n\nPoint project(Line l, Point p) {\n  Vector a = l.p2 - l.p1;\n  double r = dot(p - l.p1, a) / norm(a);\n  return l.p1 + a * r;\n}\n\nint main() {\n  Point p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  Line l;\n  l.p1 = p1;\n  l.p2 = p2;\n\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; i++) {\n    Point p;\n    cin >> p.x >> p.y;\n    Point r = project(l, p);\n    cout << r.x << \" \" << r.y << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate<class T>\nbool chmax(T& a, const T& b) {\n    if (a < b) { a = b; return true; }\n    return false;\n}\ntemplate<class T>\nbool chmin(T& a, const T& b) {\n    if (b < a) { a = b; return true; }\n    return false;\n}\n// std::vector Declaration\ntemplate<typename T>\nvector<T> make_v(size_t a) { return vector<T>(a); }\ntemplate<typename T, typename... Ts>\nauto make_v(size_t a, Ts... ts) {\n    return vector<decltype(make_v<T>(ts...))>(a, make_v<T>(ts...));\n}\n// std::vector Declaration and Initialization\ntemplate<typename T>\nvector<T> make_vector(size_t a, T x) { return vector<T>(a, x); }\ntemplate<typename T, typename U, typename... Ts>\nauto make_vector(size_t a, U b, Ts... ts) {\n    return vector<decltype(make_vector<T>(b,ts...))>(a, make_vector<T>(b, ts...));\n}\n// std::vector Input\ntemplate<typename T>\nistream& operator>>(istream& is, vector<T>& v) {\n    for (auto &e : v) is >> e;\n    return is;\n}\n// std::vector Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const vector<T>& v) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : v) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n// std::array Debug\ntemplate<typename T, size_t n>\nostream& operator<<(ostream& os, const array<T, n>& v) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : v) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n// std::deque Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const deque<T>& d) {\n    os << \"[\";\n    bool a = 1;\n    for (auto e : d) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"]\";\n    return os;\n}\n// std::pair Debug\ntemplate<typename T, typename U>\nostream& operator<<(ostream& os, const pair<T, U>& p) {\n    os << \"(\" << p.first << \" \" << p.second << \")\";\n    return os;\n}\n// std::set Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const set<T>& st) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : st) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n// std::multiset Debug\ntemplate<typename T>\nostream& operator<<(ostream& os, const multiset<T>& st) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : st) {\n        os << (a ? \"\" : \" \");\n        os << e;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n// std::map Debug\ntemplate<typename T, typename U>\nostream& operator<<(ostream& os, const map<T, U>& mp) {\n    os << \"{\";\n    bool a = 1;\n    for (auto e : mp) {\n        os << (a ? \"\" : \" \");\n        os << e.first << \":\" << e.second;\n        a = 0;\n    }\n    os << \"}\";\n    return os;\n}\n// std::tuple Debug\ntemplate<int N, class Tuple>\nvoid out(ostream& os, const Tuple& t){}\ntemplate<int N, class Tuple, class H, class ...Ts>\nvoid out(ostream& os, const Tuple& t) {\n    if (N) os << \" \";\n    os << get<N>(t);\n    out<N+1,Tuple,Ts...>(os, t);\n}\ntemplate<class ...Ts>\nostream& operator<<(ostream& os, const tuple<Ts...>& t) {\n    os << \"(\";\n    out<0,tuple<Ts...>,Ts...>(os, t);\n    os << \")\";\n    return os;\n}\n// Debug\n// Weighted edge\ntemplate<typename T>\nstruct edge {\n    int src, to;\n    T cost;\n    edge() {}\n    edge(int to, T cost) : src(-1), to(to), cost(cost) {}\n    edge(int src, int to, T cost) : src(src), to(to), cost(cost) {}\n    friend ostream& operator<<(ostream& os, const edge& e) {\n        return os << \"(\" << e.src << \"->\" << e.to << \":\" << e.cost << \")\";\n    }\n};\nusing LL = int64_t;\nconst int64_t MOD = 1e9+7;\nusing Real = double;\nReal EPS = 1e-8;\nusing Point = complex<Real>;\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(const Point& a, const Point& b) : a(a), b(b) {}\n    friend ostream& operator<<(ostream& os, Line& l) {\n        return os << \"[\" << l.a << \",\" << l.b << \"]\";\n    }\n};\nstruct Segment : Line {\n    Segment() = default;\n    Segment(const Point& a, const Point& b) : Line(a, b) {}\n};\ninline bool eq(Real a, Real b) { return abs(b - a) < EPS; }\nReal radian_to_degree(Real r) {\n    return r * 180.0 / M_PI;\n}\nReal degree_to_radian(Real d) {\n    return d * M_PI / 180.0;\n}\nPoint rotate(const Point &p, Real theta) {\n    return p * polar(1., theta);\n}\nReal cross(const Point& a, const Point& b) {\n    return a.real() * b.imag() - a.imag() * b.real();\n}\nReal dot(const Point& a, const Point& b) {\n    return a.real() * b.real() + a.imag() * b.imag();\n}\nPoint projection(const Line& l, const Point& p) {\n    Real A = dot(l.b - l.a, p - l.a),\n         B = dot(l.a - l.b, p - l.b);\n    return (A * l.b + B * l.a) / (A + B);\n}\nbool parallel(const Line& l1, const Line& l2) {\n    return eq(cross(l1.a - l1.b, l2.a - l2.b), 0.0);\n}\nbool orthogonal(const Line& l1, const Line& l2) {\n    return eq(dot(l1.a - l1.b, l2.a - l2.b), 0.0);\n}\nconst int COUNTER_CLOCKWISE = 1,\n          CLOCKWISE = -1,\n          ONLINE_BACK = 2,\n          ONLINE_FRONT = -2,\n          ON_SEGMENT = 0;\nint ccw(const Point& a, Point b, Point c) {\n    b = b - a, c = c - a;\n    if (cross(b, c) > EPS) return COUNTER_CLOCKWISE;\n    if (cross(b, c) < -EPS) return CLOCKWISE;\n    if (dot(b, c) < 0) return ONLINE_BACK;\n    if (norm(b) < norm(c)) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\nbool intersected(const Line& l, const Point& p) {\n    return abs(ccw(l.a, l.b, p)) != 1;\n}\nbool intersected(const Segment& s, const Point& p) {\n    return ccw(s.a, s.b, p) == 0;\n}\nbool intersected(const Line& l, const Segment& s) {\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\nbool intersected(const Segment& s1, const Segment& s2) {\n    return ccw(s1.a, s1.b, s2.a) * ccw(s1.a, s1.b, s2.b) <= 0 and\n           ccw(s2.a, s2.b, s1.a) * ccw(s2.a, s2.b, s1.b) <= 0;\n}\nReal distance(const Line& l, const Point& p) {\n    return abs(p - projection(l, p));\n}\nReal distance(const Segment& s, const Point& p) {\n    Point r = projection(s, p);\n    if (intersected(s, r)) return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\nReal distance(const Line &l, const Segment &s) {\n    if (intersected(l, s)) return 0;\n    return min(distance(l, s.a), distance(l, s.b));\n}\nReal distance(const Segment& s1, const Segment& s2) {\n    if (intersected(s1, s2)) return 0.0;\n    return min({ distance(s1, s2.a), distance(s1, s2.b),\n                 distance(s2, s1.a), distance(s2, s1.b) });\n}\nPoint crosspoint(const Line& l1, const Line& l2) {\n    Real A = cross(l2.a - l1.a, l2.b - l1.a),\n         B = cross(l2.b - l1.b, l2.a - l1.b);\n    return (A * l1.b + B * l1.a) / (A + B);\n}\nint main()\n{\n    cout << fixed << setprecision(10);\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Segment l{Point{x1, y1}, Point{x2, y2}};\n    int q; cin >> q;\n    while (q--) {\n        double x, y; cin >> x >> y;\n        Point p{x, y};\n        Point c = projection(l, p);\n        cout << c.real() << \" \" << c.imag() << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\nusing namespace std;\ntypedef complex<double> P;\n#define X real()\n#define Y imag()\n\ndouble dot(P a, P b){\n  return (a.X * b.X + a.Y * b.Y);\n}\n\nint main(){\n  P p1, p2;\n  double x1, x2, y1, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  p1 = P(x1,y1);\n  p2 = P(x2,y2);\n  p2 -= p1;\n  int q;\n  cin >> q;\n  for(int i = 0; i < q; ++i){\n    P p;\n    cin >> x1 >> y1;\n    p = P(x1,y1);\n    p -= p1;\n    p = p1 + dot(p2,p)/abs(p2)/abs(p2)*p2;\n    cout << p.X << \" \" << p.Y << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream> // cout, endl, cin\n#include <string> // string, to_string, stoi\n#include <vector> // vector\n#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound\n#include <utility> // pair, make_pair\n#include <tuple> // tuple, make_tuple\n#include <cstdint> // int64_t, int*_t\n#include <cstdio> // printf\n#include <map> // map\n#include <queue> // queue, priority_queue\n#include <set> // set\n#include <stack> // stack\n#include <deque> // deque\n#include <unordered_map> // unordered_map\n#include <unordered_set> // unordered_set\n#include <bitset> // bitset\n#include <cctype> // isupper, islower, isdigit, toupper, tolower\n#include <cmath> // sqrt\n#define _GLIBCXX_DEBUG // check []\n#define DIVISOR 1000000007\n\nusing namespace std;\ntypedef pair<int,int> pii;\ntypedef pair<double, double> pdd;\ntypedef pair<int64_t, int64_t> pII;\n\ntemplate<typename T>\nvoid cins(vector<T>& arr) { for(T& e: arr) cin >> e; }\n\n#ifdef DEBUG\n#define debug(fmt, ...) \\\n    printf(\"[debug: %s] \" fmt, __func__, __VA_ARGS__)\n#define ps(arr) \\\n    debug(\"size %ld: \", arr.size()); \\\n    for(auto e: arr) cout << e << \" \"; \\\n    cout << endl;\n#else\n#define debug(fmt, ...)\n#define ps(arr)\n#endif\n\n#define _x first\n#define _y second\n\nstruct line {\n    pdd base;\n    pdd inc;\n};\n\ndouble inner_prod(pdd p1, pdd p2) {\n    return (p1._x * p2._x) + (p1._y * p2._y);\n}\n\ndouble norm(pdd p) {\n    return sqrt((p._x * p._x) + (p._y * p._y));\n}\n\npdd unit(pdd p) {\n    double len = norm(p);\n    return make_pair(\n        p._x / len,\n        p._y / len\n    );\n}\n\npdd get_incline(pdd p1, pdd p2) {\n    pdd diff = make_pair(\n        p2._x - p1._x,\n        p2._y - p1._y\n    );\n    return unit(diff);\n}\n\nint main(void) {\n    pdd p1;\n    pdd p2;\n    cin >> p1._x >> p1._y;\n    cin >> p2._x >> p2._y;\n    struct line lin = (struct line){p1,\n        get_incline(p1, p2)\n    };\n\n    int q;\n    cin >> q;\n    for(int i = 0; i < q; i++) {\n        pdd p;\n        cin >> p._x >> p._y;\n        pdd inc = make_pair(\n            p._x - lin.base._x,\n            p._y - lin.base._y\n        );\n        // a \\dot b\n        double len = inner_prod(inc, lin.inc);\n        // p1 + diff * lin.inc\n        pdd ans = {\n            lin.base._x + len * lin.inc._x,\n            lin.base._y + len * lin.inc._y\n        };\n        printf(\"%.10lf %.10lf\\n\", ans._x, ans._y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst double EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(double a, double b) { return fabs(b - a) < EPS; }\n\nusing Point = complex< double >;\n\nistream &operator>>(istream &is, Point &p) {\n  double a, b;\n  is >> a >> b;\n  p = Point(a, b);\n  return is;\n}\n\nostream &operator<<(ostream &os, Point &p) {\n  os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\nPoint rotate(double theta, const Point &p) {\n  return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\ndouble radian_to_degree(double r) {\n  return (r * 180.0 / PI);\n}\n\ndouble degree_to_radian(double d) {\n  return (d * PI / 180.0);\n}\n\ndouble get_angle(const Point &a, const Point &b, const Point &c) {\n  const Point v(b - a), w(c - b);\n  double alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n  if(alpha > beta) swap(alpha, beta);\n  double theta = (beta - alpha);\n  return min(theta, 2 * acos(-1) - theta);\n}\n\nnamespace std {\n  bool operator<(const Point &a, const Point &b) {\n    return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n  }\n}\n\n\nstruct Line {\n  Point a, b;\n\n  Line() {}\n\n  Line(Point a, Point b) : a(a), b(b) {}\n\n  Line(double A, double B, double C) // Ax + By = C\n  {\n    if(eq(A, 0)) a = Point(0, C / B), b = Point(1, C / B);\n    else if(eq(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);\n    else a = Point(0, C / B), b = Point(C / A, 0);\n  }\n\n  friend ostream &operator<<(ostream &os, Line &p) {\n    return os << p.a << \" to \" << p.b;\n  }\n\n  friend istream &operator>>(istream &is, Line &a) {\n    return is >> a.a >> a.b;\n  }\n};\n\nstruct Segment : Line {\n  Segment() {}\n\n  Segment(Point a, Point b) : Line(a, b) {}\n};\n\ndouble dot(const Point &a, const Point &b) {\n  return real(a) * real(b) + imag(a) * imag(b);\n}\n\nPoint projection(const Line &l, const Point &p) {\n  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n  return l.a + (l.a - l.b) * t;\n}\n\n\nint main() {\n  Line l;\n  cin >> l;\n  int Q;\n  cin >> Q;\n  while(Q--) {\n    Point p;\n    cin >> p;\n    p = projection(l, p);\n    cout << fixed << setprecision(10) << p.real() << \" \" << p.imag() << endl;\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<vector>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tint x0, y0, x1, y1, q, x2, y2;//?°???°?????\\??????????????§??¨?¨?\n\n\tscanf(\"%d %d %d %d\", &x0, &y0, &x1, &y1);\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%d %d\", &x2, &y2);\n\n\t\tlong double x, y;\n\n\t\tx = x0 + (x1-x0)*((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)) / pow(sqrt(pow(x1 - x0, 2) + pow(y1 - y0, 2)),2);\n\t\ty = y0 + (y1-y0)*((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)) / pow(sqrt(pow(x1 - x0, 2) + pow(y1 - y0, 2)),2);\n\n\t\tprintf(\"%.10llf %.10llf\\n\", x, y);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cassert>// c\n#include <iostream>// io\n#include <iomanip>\n#include <fstream>\n#include <sstream>\n#include <vector>// container\n#include <map>\n#include <set>\n#include <queue>\n#include <bitset>\n#include <stack>\n#include <algorithm>// other\n#include <complex>\n#include <numeric>\n#include <functional>\nusing namespace std;\n\ntypedef int32_t i32;typedef int64_t i64;typedef i64 ll;typedef uint32_t uint;typedef uint64_t ull;\n\n#define ALL(c) (begin(c)),(end(c))\n#define REP(i,n) FOR(i,0,n)\n#define REPr(i,n) FORr(i,0,n)\n#define FOR(i,l,r) for(int i=(int)(l);i<(int)(r);++i)\n#define FORr(i,l,r) for(int i=(int)(r)-1;i>=(int)(l);--i)\n#define EACH(it,o) for(__typeof((o).begin()) it = (o).begin(); it != (o).end(); ++it)\n#define IN(l,v,r) ((l)<=(v) && (v)<(r))\n\n//debug\n#define DUMP(x)  cerr << #x << \" = \" << (x)\n#define DUMPLN(x)  DUMP(x) <<endl\n#define DEBUG(x) DUMP(x) << LINE() << \" \" << __FILE__\n#define DEBUGLN(x) DEBUG(x)<<endl\n#define LINE()    cerr<< \" (L\" << __LINE__ << \")\"\n#define LINELN()    LINE()<<endl\n#define CHECK(exp,act)  if(exp!=act){DUMPLN(exp);DEBUGLN(act);}\n#define STOP(e)  CHECK(e,true);if(!(e)) exit(1);\n\nclass range {\nprivate:\n    struct Iter{\n        int v;\n        int operator*(){return v;}\n        bool operator!=(Iter& itr) {return v < itr.v;}\n        void operator++() {++v;}\n    };\n    Iter i, n;\npublic:\n    range(int n) : i({0}), n({n}) {}\n    range(int i, int n) : i({i}), n({n}) {}\n    Iter& begin() {return i;}\n    Iter& end() {return n;}\n};\n\n//output\ntemplate<typename T> ostream& operator << (ostream& os, const vector<T>& as){REP(i,as.size()){if(i!=0)os<<\" \"; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const vector<vector<T> >& as){REP(i,as.size()){if(i!=0)os<<endl; os<<as[i];}return os;}\ntemplate<typename T> ostream& operator << (ostream& os, const set<T>& ss){EACH(a,ss){if(a!=ss.begin())os<<\" \"; os<<a;}return os;}\ntemplate<typename T1,typename T2> ostream& operator << (ostream& os, const pair<T1,T2>& p){os<<p.first<<\" \"<<p.second;return os;}\ntemplate<typename K,typename V> ostream& operator << (ostream& os, const map<K,V>& m){bool isF=true;EACH(p,m){if(!isF)os<<endl;os<<p;isF=false;}return os;}\n\n//input\nchar tmp[1000];\n#define nextInt(n) scanf(\"%d\",&n)\n#define nextLong(n) scanf(\"%lld\",&n) //I64d\n#define nextDouble(n) scanf(\"%lf\",&n) \n#define nextChar(n) scanf(\"%c\",&n)\n#define nextString(n) scanf(\"%s\",tmp);n=tmp\n\n// values\ntemplate<class T> T INF(){assert(false);};\ntemplate<> int INF<int>(){return 1<<28;};\ntemplate<> ll INF<ll>(){return 1LL<<58;};\ntemplate<> double INF<double>(){return 1e16;};\n\nnamespace _double_tmpl{\n    typedef long double D;const D EPS = 1e-8;\n    \n    static constexpr D Ae=0;\n    D A(D a,D b){return a+b;}D Ainv(D a){return -a;}\n    D S(D a,D b){return A(a,Ainv(b));}\n    \n    static constexpr D Me=1;\n    D M(D a,D b){return a*b;}D Minv(D a){return 1.0/a;};\n\n    template<typename T> int sig(T a,T b=0){return a<b-EPS?-1:a>b+EPS?1:0;}\n    template<typename T> bool eq(T a,T b){ return sig(abs(a-b))==0;}\n    template<typename T> D norm(T a){ return a*a;}\n}\nusing namespace _double_tmpl;\n\nnamespace Ps{\n    // using namespace _double_tmpl;\n    typedef complex<D> P,Vec;\n\n#define X real()\n#define Y imag()\n    istream& operator >> (istream& is,complex<D>& p){\n        D x,y;is >> x >> y;p=P(x,y);return is;\n    }\n\n    bool eq(P a,P b){return eq(a.X,b.X) && eq(a.Y,b.Y);}\n    // a×b\n    D cross(const Vec& a,const Vec& b){return imag(conj(a)*b);}\n    // a・b\n    D dot(const Vec&a,const Vec& b) {return real(conj(a)*b);}\n\n    int ccw(const P& a,P b,P c){\n        b -= a; c -= a;\n        if (cross(b,c) > EPS)   return +1;       // counter clockwise\n        if (cross(b,c) < -EPS)   return -1;       // clockwise\n        if (dot(b,c) < 0)     return +2;       // c--a--b on line\n        if (norm(b) < norm(c)) return -2;       // a--b--c on line\n        return 0;\n    }   \n}\nusing namespace Ps;\n\nnamespace Ls{\n    struct L : public vector<P> {\n        Vec vec;\n        L(const P &a, const P &b):vec(b - a){\n            push_back(a); push_back(b);\n        }\n    };\n\n    //直線へ射影した時の点\n    // verified by AOJLIB\n    P projection(const L &l, const P &p) {\n      D t = dot(p-l[0],l.vec) / norm(l.vec);\n      return l[0] + t * l.vec;\n    }\n}\nusing namespace Ls;\n\n\nstringstream ss;\nclass Main{\n    public:\n    void run(){\n        P a,b;cin >> a >> b;L l(a,b);\n        int q;cin >> q;\n        REP(i,q){\n            P p;cin >> p;\n            P res=projection(l, p);\n            cout <<res.X<<\" \" <<res.Y<<endl;\n        }\n    }\n};\n\nint main(){\n cout <<fixed<<setprecision(20);\n cin.tie(0);\n ios::sync_with_stdio(false);\n Main().run();\n return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 2e5 + 5;\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\ntemplate <typename T> void chkmax(T &x, T y) {x = max(x, y); }\ntemplate <typename T> void chkmin(T &x, T y) {x = min(x, y); } \ntemplate <typename T> void read(T &x) {\n\tx = 0; int f = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') f = -f;\n\tfor (; isdigit(c); c = getchar()) x = x * 10 + c - '0';\n\tx *= f;\n}\ntemplate <typename T> void write(T x) {\n\tif (x < 0) x = -x, putchar('-');\n\tif (x > 9) write(x / 10);\n\tputchar(x % 10 + '0');\n}\ntemplate <typename T> void writeln(T x) {\n\twrite(x);\n\tputs(\"\");\n}\nconst ld eps = 1e-9;\nstruct point {ld x, y; };\nstruct line {point a, b; };\nvoid ReadPointInt(point &a) {read(a.x), read(a.y); }\nvoid ReadLineInt(line &a) {ReadPointInt(a.a), ReadPointInt(a.b); }\npoint operator + (point a, point b) {return (point) {a.x + b.x, a.y + b.y}; }\npoint operator - (point a, point b) {return (point) {a.x - b.x, a.y - b.y}; }\npoint operator * (point a, ld b) {return (point) {a.x * b, a.y * b}; }\nld dot(point a, point b) {return a.x * b.x + a.y * b.y; }\nld operator * (point a, point b) {return a.x * b.y - a.y * b.x; }\nld moo(point a) {return sqrtl(a.x * a.x + a.y * a.y); }\nld dist(point a, point b) {return moo(a - b); }\npoint unit(point a) {\n\tld tmp = moo(a);\n\tassert(tmp > eps);\n\treturn a * (1.0 / tmp);\n}\npoint Projection(point x, line a) {\n\tld d = dot(x - a.a, a.b - a.a) / dist(a.a, a.b);\n\treturn a.a + unit(a.b - a.a) * d;\n}\nint main() {\n\tline a; ReadLineInt(a);\n\tint q; read(q);\n\twhile (q--) {\n\t\tpoint x; ReadPointInt(x);\n\t\tx = Projection(x, a);\n\t\tprintf(\"%.10Lf %.10Lf\\n\", x.x, x.y);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <math.h>\n\n\nusing namespace std;\n\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS) //?????????????????????????????????\n\n\n//??????????????????????????????\nclass Point {\n\npublic:\n\n\tdouble x, y;//??§?¨????????????????x,y??????\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\n\tPoint operator * (Point p) {\n\t\treturn Point(x * p.x, y * p.y);\n\t}\n\n\tPoint operator / (Point p) {\n\t\treturn Point(x / p.x, y / p.y);\n\t}\n\n\tdouble norm() {\n\t\treturn x*x + y*y;\n\t}\n\n\t//?????????????????§???????????????\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS &&  fabs(y - p.y) < EPS;\n\t}\n\n};\n\ntypedef Point Vector;\n\n//??????????????????????????????\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\n//??????????????????????????????\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n//?????????????????´?????????\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\n\tSegment(){}\n\n\t//?????¨????°???±?????????\n\tPoint projection(Point p) {\n\t\tVector base = p2 - p1;\n\n\t\tdouble r = dot(p - p1, base) / base.norm();\n\t\treturn p1 + base * r;\n\t}\n\n};\n\n//??????????§??????¨?????????????????´?????????\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\n//???????????´?????????\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//???????????????????????????\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\n//??????????§??????¨???????????????????????????\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\n//?????????????????????\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//?°???±?????????\nPoint projection(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\ntypedef Segment Line;\n\ntypedef vector<Point> Polygon;\n\n\n\n//???\nclass Circle {\npublic:\n\tPoint c;//??????\n\tdouble r;//??????\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\n\n\nint main(void)\n{\n\tint n;\n\n\tSegment s;\n\tPoint p;\n\tPoint proj;\n\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tcin >> n;\n\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> p.x >> p.y;\n\t\tproj = projection(s, p);\n\t\tprintf(\"%.8lf %.8lf\\n\",proj.x,proj.y);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <cassert>\n#include <typeinfo>\n#include <vector>\n#include <stack>\n#include <cmath>\n#include <set>\n#include <map>\n#include <string>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <iomanip>\n#include <cctype>\n#include <random>\n#include <complex>\n#define syosu(x) fixed<<setprecision(x)\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> P;\ntypedef pair<double,double> pdd;\ntypedef pair<ll,ll> pll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<ll> vl;\ntypedef vector<vl> vvl;\ntypedef vector<char> vc;\ntypedef vector<vc> vvc;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\ntypedef vector<vb> vvb;\ntypedef vector<P> vp;\ntypedef vector<vp> vvp;\ntypedef vector<pll> vpll;\ntypedef pair<int,P> pip;\ntypedef vector<pip> vip;\nconst int inf=1<<30;\nconst ll INF=1ll<<61;\nconst double pi=acos(-1);\nconst double eps=1e-7;\nconst ll mod=1e9+7;\nconst int dx[4]={0,1,0,-1},dy[4]={1,0,-1,0};\n\ntypedef complex<double> vec;\n\n// ??\\???\nvoid In(vec& p){\n\tdouble x,y;\n\tcin>>x>>y;\n\tp=vec(x,y);\n}\n\n// ??????\nvoid Out(vec p){\n\tcout<<syosu(10)<<p.real()<<' '<<p.imag()<<endl;\n}\n\n// ??????\ndouble IP(vec p,vec q){\n\treturn p.real()*q.real()+p.imag()*q.imag();\n}\n\n// ?°???±\nvec Proj(vec a,vec b,vec p){\n\tvec A=p-a,B=b-a;\n\tdouble l=abs(B);\n\treturn B*IP(A,B)/(l*l)+a;\n}\n\nint n;\nvec a,b;\n\nint main(){\n\tIn(a);In(b);\n\tcin>>n;\n\tfor(int i=0;i<n;i++){\n\t\tvec p;\n\t\tIn(p);\n\t\tOut(Proj(a,b,p));\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(Point &p) { return Point(x + p.x, y + p.y); };\n\tPoint operator -(Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n};\nusing Vector = Point;\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\nusing Line = Segment;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nusing Polygon = vector<Point>;\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + (base*r);\n}\nint main() {\n\tPoint p[2];\n\tint q, x, y;\n\tcin >> p[0].x >> p[0].y >> p[1].x >> p[1].y;\n\tSegment seg;\n\tseg.p1 = p[0]; seg.p2 = p[1];\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\t//cout << x << \" \" << y << endl;\n\t\tPoint po = Point(x, y);\n\t\tPoint proj = project(seg, po);\n\t\tprintf(\"%.10lf %.10lf\\n\", proj.x, proj.y);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint main() {\n\tcin.tie(0); ios::sync_with_stdio(false);\n\tint x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;\n\tint q; cin >> q;\n\tlong double theta1, theta2;\n\ttheta1 = atan2(y2 - y1, x2 - x1);\n\twhile (q--) {\n\t\tint x, y; cin >> x >> y;\n\t\ttheta2 = atan2(y - y1, x - x1);\n\t\tlong double dist = hypot(x - x1, y - y1);\n\t\tlong double dist_x = dist * cos(theta2 - theta1);\n\t\tcout << fixed << x1 +  dist_x * cos(theta1) << \" \" << y1 + dist_x * sin(theta1) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n//#define _GLIBCXX_DEBUG\nusing namespace std;\n\ntypedef long long ll;\ndouble pi=3.14159265359; //円周率\ndouble EPS = 1e-10; //誤差\n\nclass point\n{\n\tpublic:\n\tdouble x,y;\n\n\tpoint()\n\t{x=0;y=0;}\n\t//コンストラクタ\n\tpoint(double a,double b)\n\t{\n\t\tx=a;y=b;\n\t}\n\n\t//足し算\n\tpoint operator + (point p)\n\t{\n\t\treturn point(x+p.x,y+p.y);\n\t}\n\t//引き算\n\tpoint operator - (point p)\n\t{\n\t\treturn point(x-p.x,y-p.y);\n\t}\n\t//d倍\n\tpoint operator * (double d)\n\t{\n\t\treturn point(x*d,y*d);\n\t}\n\t//x座標昇順でソートする\n\tbool operator < (const point &p)\n\tconst {\n\t\tif(std::abs(x-p.x)>EPS)\n\t\t\treturn x<p.x;\n\t\telse\n\t\t\treturn y<p.y;\n\t}\n\t//内積\n\t//直交判定...abs(dot())<EPS\n\tdouble dot(point p)\n\t{\n\t\treturn x*p.x+y*p.y;\n\t}\n\t//外積\n\t//平行判定...abs(cross())<EPS\n\tdouble cross(point p)\n\t{\n\t\treturn x*p.y-y*p.x;\n\t}\n\t//絶対値を求める\n\tdouble abs()\n\t{\n\t\treturn sqrt(x*x+y*y);\n\t}\n\t//単位ベクトルを求める\n\tpoint ev()\n\t{\n\t\treturn point(x/abs(),y/abs());\n\t}\n\t//単位法線ベクトル（の1つ）を求める\n\t//もうひとつは-1倍することで求まる\n\tpoint nev()\n\t{\n\t\treturn point(-y/abs(),x/abs());\n\t}\n\t//2点間の距離を求める\n\t//distがEPS未満なら2点は同じ位置にあるとみなす\n\tdouble pdist(point p)\n\t{\n\t\tpoint v=point(p.x-x,p.y-y);\n\t\treturn v.abs();\n\t}\n\t//この点と直線p1-p2の距離を求める\n\tdouble ldist(point p1,point p2)\n\t{\n\t\treturn std::abs((p2.y-p1.y)*x-(p2.x-p1.x)*y+p2.x*p1.y+p2.y*p1.x)/(p2-p1).abs();\n\t}\n\n};\n\n//線分p1-p2上に点qがあるか判定\nbool on_seg(point p1,point p2,point q)\n{\n\treturn abs((p1-q).cross(p2-q))<EPS && (p1-q).dot(p2-q)<=EPS;\n}\n//直線p1-p2と直線q1-q2の交点\n//線分の交差判定はこれの戻り値が線分上にあるかどうかで判定する...on_seg(p1,p2,intersection(p1,p2,q1,q2))\npoint intersection(point p1,point p2,point q1,point q2)\n{\n\treturn p1 + (p2-p1) * ((q2-q1).cross(q1-p1) / (q2-q1).cross(p2-p1));\n}\n//n頂点からなる多角形の面積を求める(vectorで頂点は与えられる)\ndouble area(vector<point> p)\n{\n\tdouble ret=0;\n\tfor(int i=0;i<p.size()-1;i++)\n\t{\n\t\tret+=p[i].cross(p[i+1]);\n\t}\n\tret+=p[p.size()-1].cross(p[0]);\n\tret/=2;\n\treturn ret;\n}\n/*\n3点a,b,cをa->b->cと進むとき、\n* a->bで時計方向に折れてb->c (clockwise)\n* a->bで反時計方向に折れてb->c(counter clockwise)\n* a->bで逆を向いてaを通り越してb->c(c--a--b on line)\n* a->bでそのままb->c(a--b--c on line)\n* a->bで逆を向いてb->c(a--c--b on line)\n\nのいずれのパターンかを判定する\n*/\nint ccw(point a,point b,point c)\n{\n\tb=b-a;c=c-a;\n\tif(b.cross(c)>EPS)\n\t\treturn 1; //counter clockwise\n\tif(b.cross(c)<-EPS)\n\t\treturn -1; //clockwise\n\tif(b.dot(c)<-EPS)\n\t\treturn 2; //c--a--b on line\n\tif(b.x*b.x+b.y*b.y < c.x*c.x+c.y*c.y)\n\t\treturn -2; //a--b--c on line\n\treturn 0; //a--c--b on line\n}\n//凸包を求める\nvector<point> convex_hull(vector<point> p)\n{\n\tint n=p.size();\n\tint k=0;\n\tsort(p.begin(),p.end());\n\tvector<point> ch(2*n);\n\t//lower-hull 下側凸包\n\tfor(int i=0;i<n;ch[k++]=p[i++])\n\t{\n\t\twhile(k>=2 && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\t//upper-hull 上側凸包\n\tfor(int i=n-2,t=k+1;i>=0;ch[k++]=p[i--])\n\t{\n\t\twhile(k>=t && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\tch.resize(k-1);\n\treturn ch;\n}\n\nint main()\n{\n\tcout.setf(ios::fixed);\n\tcout.precision(12);\n\tpoint p1,p2;\n\tdouble a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\tp1=point(a,b);\n\tp2=point(c,d);\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tpoint f;\n\t\tcin>>a>>b;\n\t\tf=point(a,b);\n\t\tpoint q;\n\t\tq=f+(p2-p1).nev()*f.ldist(p1,p2);\n\t\tcerr<<q.x<<\" \"<<q.y<<endl;\n\t\tif(abs((p2-p1).cross(q))>EPS)\n\t\t\tq=q-(p2-p1).nev()*f.ldist(p1,p2)*2;\n\t\tcout<<q.x<<\" \"<<q.y<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\nusing namespace std;\n\nint main(){\n\tdouble xp1,yp1,xp2,yp2,x0,y0,x,y,a;\n\tint i,q;\n\t\n\tcin>>xp1>>yp1>>xp2>>yp2;\n\tcin>>q;\n\t\n\tif(xp1==xp2){\n\t\tfor(i=0;i<q;i++){\n\t\t\tcin>>x0>>y0;\n\t\t\tcout<<fixed<<setprecision(10)<<xp1;\n\t\t\tcout<<\" \"<<fixed<<setprecision(10)<<y0<<endl;\n\t\t}\n\t}else{\n\t\ta=(yp2-yp1)/(xp2-xp1);\n\t\tfor(i=0;i<q;i++){\n\t\t\tcin>>x0>>y0;\n\t\t\tx=a*((y0-yp1)-a*(x0-xp1))/(1+a*a)+x0;\n        \ty=(a*(a*y0+x0-xp1)+yp1)/(1+a*a);\n\t\t\tcout<<fixed<<setprecision(10)<<x;\n\t\t\tcout<<\" \"<<fixed<<setprecision(10)<<y<<endl;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n---------------------------------------------------\n-- alithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = show x ++ \" \" ++  show y\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in putStrLn . init . unlines $ map proj plist\n\n"
  },
  {
    "language": "C++",
    "code": "////////////////////////////////////////////////////////////////////////////////\n// 平面幾何\n\n// 型変換できるもの\n//   double  -> Point\n//   Segment -> Line\n\n// 誤差の話：絶対誤差でも相対誤差でも死ぬ例\n// int main(){\n//   const double EPS = 1e-9;\n//   double a = 1.3, b = 1e8, c = a + b;\n//   c = c - b;\n//   printf(\"%d\\n\", equal(a, c));          // => 0\n//   printf(\"%d\\n\", relative_equal(a, c)); // => 0\n// }\n\n////////////////////\n// ライブラリ\n#include<cmath>\n#include<algorithm>\n#include<cassert>\n////////////////////\n// 定数\nconst double EPS = 1e-9;                // |EPS|未満の数は0として扱う\n////////////////////\n// 構造体\nstruct Point {\n  double x, y;\n  Point(const double d = 0.0) :x(d), y(d) {}\n  Point(const double x, const double y) :x(x), y(y) {}\n};\nstruct Segment {\n  Point initial, terminal;\n  Segment(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Segment(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n};\nstruct Line {\n  Point initial, terminal;\n  Line(const Point& initial, const Point& terminal) :initial(initial), terminal(terminal) {}\n  Line(const double x1, const double y1, const double x2, const double y2) :initial(x1, y1), terminal(x2, y2) {}\n  Line(const Segment& s) :initial(s.initial), terminal(s.terminal) {}\n};\n////////////////////\n// 実装\nbool relative_equal(const double d1, const double d2) {return d1 == 0 ? std::abs(d2) < EPS : std::abs((d1 - d2) / d1) < EPS;}\n// 演算子オーバーロード\nbool operator==(const Point& lhs, const Point& rhs) {return relative_equal(lhs.x, rhs.x) && relative_equal(lhs.y, rhs.y);}\nbool operator<(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x < rhs.x : lhs.y < rhs.y;}\nbool operator>(const Point& lhs, const Point& rhs) {return lhs.x != rhs.x ? lhs.x > rhs.x : lhs.y > rhs.y;}\nbool operator!=(const Point& lhs, const Point& rhs) {return !(lhs == rhs);}\nbool operator<=(const Point& lhs, const Point& rhs) {return !(lhs > rhs);}\nbool operator>=(const Point& lhs, const Point& rhs) {return !(lhs < rhs);}\nconst Point operator+(const Point& lhs, const Point& rhs) {return Point(lhs.x + rhs.x, lhs.y + rhs.y);}\nconst Point operator-(const Point& lhs, const Point& rhs) {return Point(lhs.x - rhs.x, lhs.y - rhs.y);}\nconst Point operator*(const Point& lhs, const Point& rhs) {return Point(lhs.x * rhs.x, lhs.y * rhs.y);}\nconst Point operator/(const Point& lhs, const Point& rhs) {return Point(lhs.x / rhs.x, lhs.y / rhs.y);}\nconst Point operator-(const Point& p) {return Point(-p.x, -p.y);}\n// 点\ndouble abs(const Point& p) {return std::hypot(p.x, p.y);}\ndouble norm(const Point& p) {return p.x * p.x + p.y * p.y;}\ndouble dot(const Point& a, const Point& b) {return a.x * b.x + a.y * b.y;}\ndouble cross(const Point& a, const Point& b) {return a.x * b.y - a.y * b.x;}\n// const Point normalize(const Point& p) {return p / abs(p);}\n// 線\nbool parallel(const Line& l1, const Line& l2) {return std::abs(cross(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\nbool orthogonal(const Line& l1, const Line& l2) {return std::abs(dot(l2.terminal - l2.initial, l1.terminal - l1.initial)) < EPS;}\n// 点の位置関係\nenum POSITION {ONLINE_FRONT = -2, CLOCKWISE, ON_SEGMENT, COUNTER_CLOCKWISE, ONLINE_BACK}; \nPOSITION ccw(const Point& a, const Point& b, const Point& p) {\n  Point v1 = b - a;\n  Point v2 = p - a;\n  if(cross(v1, v2) >= EPS) return COUNTER_CLOCKWISE;\n  if(cross(v1, v2) <= -EPS) return CLOCKWISE;\n  if(dot(v1, v2) <= -EPS) return ONLINE_BACK;\n  if(norm(v1) < norm(v2)) return ONLINE_FRONT;              // 誤差怖い\n  return ON_SEGMENT;\n}\n// 交差判定\nbool intersect(const Point& p1, const Point& p2) {return p1 == p2;}\nbool intersect(const Point& p, const Segment& s) {return abs(p - s.initial) + abs(p - s.terminal) - abs(s.initial - s.terminal) <= EPS;}\nbool intersect(const Segment& s, const Point& p) {return intersect(p, s);}\nbool intersect(const Point& p, const Line& l) {return !parallel(Line(p, l.initial), Line(p, l.terminal));}\nbool intersect(const Line& l, const Point& p) {return intersect(p, l);}\nbool intersect(const Segment& s1, const Segment& s2) {\n  return ccw(s1.initial, s1.terminal, s2.initial) * ccw(s1.initial, s1.terminal, s2.terminal) <= 0\n      && ccw(s2.initial, s2.terminal, s1.initial) * ccw(s2.initial, s2.terminal, s1.terminal) <= 0;\n}\nbool intersect(const Segment& s, const Line& l) {\n  auto v1 = l.terminal - l.initial;\n  auto v2 = s.initial  - l.initial;\n  auto v3 = s.terminal - l.initial;\n  return cross(v1, v2) * cross(v1, v3) <= EPS;\n}\nbool intersect(const Line& l, const Segment& s) {return intersect(s, l);}\nbool intersect(const Line& l1, const Line& l2) {return !parallel(l1, l2) || intersect(l1.initial, l2);}\n// 点の移動\nPoint projection(const Point& p, const Line& l) {\n  auto v = l.initial - l.terminal;\n  return l.initial + dot(p - l.initial, v) / norm(v) * v;\n}\nPoint projection(const Line& l, const Point& p) {return projection(p, l);}\nPoint reflection(const Point& p, const Line& l) {return p + 2 * (projection(p, l) - p);}\nPoint reflection(const Line& l, const Point& p) {return reflection(p, l);}\n// 距離\ndouble distance(const Point& p1, const Point& p2) {\n  auto p = p1 - p2;\n  return hypot(p.x, p.y);\n}\ndouble distance(const Point& p, const Segment& s) {\n  auto r = projection(s, p);\n  return intersect(r, s) ? distance(p, r) : std::min(distance(p, s.initial), distance(p, s.terminal));\n}\ndouble distance(const Segment& s, const Point& p) {return distance(p, s);}\ndouble distance(const Point& p, const Line& l) {return distance(p, projection(p, l));}\ndouble distance(const Line& l, const Point& p) {return distance(p, l);}\ndouble distance(const Segment& s1, const Segment& s2) {\n  return intersect(s1, s2) ? 0.0 : std::min({distance(s1, s2.initial), distance(s1, s2.terminal), distance(s2, s1.initial), distance(s2, s1.terminal)});\n}\ndouble distance(const Segment& s, const Line& l) {return intersect(s, l) ? 0.0 : std::min(distance(s.initial, l), distance(s.terminal, l));}\ndouble distance(const Line& l,const Segment& s) {return distance(s, l);}\ndouble distance(const Line& l1, const Line& l2) {return intersect(l1, l2) ? 0.0 : distance(l1.initial, l2);}\n// 交点\nconst Point crosspoint(const Line& l1, const Line& l2) {\n  assert(intersect(l1, l2));\n  if(parallel(l1, l2)) return l1.initial;                   // 平行なときl1の始点を返す\n  double A = cross(l1.terminal - l1.initial, l2.terminal - l2.initial);\n  double B = cross(l1.terminal - l1.initial, l1.terminal - l2.initial);\n  return l2.initial + B / A * (l2.terminal - l2.initial);\n}\nconst Point crosspoint(const Segment& s, const Line& l) {\n  assert(intersect(s, l));\n  if(parallel(s, l)) return s.initial;\n  Point cp = crosspoint(Line(s), l);\n  assert(intersect(s, cp));\n  return cp;\n}\nconst Point crosspoint(const Line& l, const Segment& s) {return crosspoint(s, l);}\nconst Point crosspoint(const Segment& s1, const Segment& s2) {\n  assert(intersect(s1, s2));\n  if(parallel(s1, s2)) {                                    // 平行なときいずれかの端点を返す\n    if(intersect(s1.initial,  s2)) return s1.initial;\n    if(intersect(s1.terminal, s2)) return s1.terminal;\n    if(intersect(s2.initial,  s1)) return s2.initial;\n    if(intersect(s2.terminal, s1)) return s2.terminal;\n  }\n  return crosspoint(Line(s1), Line(s2));\n}\n// デバッグ用\n#include<bits/stdc++.h>\nusing namespace std;\nvoid print(const Point& p) {cout<<\"point: \"; cout<<\"(\"<<p.x<<\",\"<<p.y<<\")\";}\nvoid print(const Segment& l) {cout<<\"segment: \"; print(l.initial); cout<<\" - \";print(l.terminal);}\nvoid print(const Line& l) {cout<<\"line: \"; print(l.initial); cout<<\" - \";print(l.terminal);}\n////////////////////////////////////////////////////////////////////////////////\n// 多角形\n//   辺をメンバ変数にしない→メモリ節約・edge(void)がO(頂点数)。edge().begin()を使っている箇所は書き換える必要がある\n#include<vector>\n#include<algorithm>\n#include<numeric>\n#include<utility>\nclass Polygon {\npublic:\n  // 編集\n  void add(const Point& p) {\n    if(!vertex_.empty()) {\n      if(!edge_.empty()) edge_.pop_back();\n      edge_.push_back(Segment(vertex_.back(), p));\n      edge_.push_back(Segment(p, vertex_.front()));\n    }\n    vertex_.push_back(p);\n  }\n  void clear() {\n    vertex_.clear();\n    edge_.clear();\n  };\n  // 情報\n  int size() const {return vertex_.size();}\n  Point vertex(const int n) const {return vertex_.at(n);}\n  Segment edge(const int n) const {return edge_.at(n);}\n  const std::vector<Point>& vertex() const {return vertex_;}\n  const std::vector<Segment>& edge() const {return edge_;}\n  // 道具\n  bool touch(const Point& p) const {\n    return std::any_of(edge().begin(), edge().end(), [=](const Segment& s) {return ccw(s.initial, s.terminal, p) == ON_SEGMENT;});\n  }\n  bool intersect(const Point& p) const {\n    bool in = false;                    // p=(x,y)から(INF,y)への半直線と多角形とが交差する回数 mod 2\n    for(const auto& e: edge()) {\n      if(::intersect(p, e)) return true;\n      Point a = e.initial  - p;\n      Point b = e.terminal - p;\n      if(a.y > b.y) std::swap(a, b);\n      if(a.y <= 0.0 && 0.0 < b.y && cross(a, b) < EPS) in = !in;                // 誤差怖い\n    }\n    return in;\n  }\n  double area() const {\n    return std::abs(std::accumulate(edge().begin(), edge().end(), 0, [=](const int sum, const Segment& e){return sum + cross(e.initial, e.terminal);})) / 2.0;\n  }\n  bool convex() const {\n    bool positive = false;\n    bool negative = false;\n    for(int i = 0; i < size(); ++i) {\n      auto position = ccw(vertex(i), vertex((i + 1) % size()), vertex((i + 2) % size()));\n      positive |= position == CLOCKWISE;\n      negative |= position == COUNTER_CLOCKWISE;\n      if(negative && positive) return false;\n    }\n    return true;\n  }\nprivate:\n  std::vector<Point> vertex_;\n  std::vector<Segment> edge_;\n};\n////////////////////////////////////////////////////////////////////////////////\n#include<bits/stdc++.h>\nusing namespace std;\nint main() {\n  // Points/Vectors\n  // A\n  int a, b, c, d;\n  cin >> a >> b >> c >> d;\n  Line l(Point(a, b), Point(c, d));\n  int q;\n  for(cin >> q; q > 0; --q) {\n    int x, y;\n    cin >> x >> y;\n    Point p = projection(Point(x, y), l);\n    cout << setprecision(10) << fixed << p.x << \" \" << p.y << endl;\n  }\n//   // C\n//   int a, b, c, d;\n//   cin >> a >> b >> c >> d;\n//   Segment s(Point(a, b), Point(c, d));\n//   int q;\n//   for(cin >> q; q > 0; --q) {\n//     int x, y;\n//     cin >> x >> y;\n//     switch(ccw(s.initial, s.terminal, Point(x, y))) {\n//     case COUNTER_CLOCKWISE:\n//       cout << \"COUNTER_CLOCKWISE\" << endl;\n//       break;\n//     case CLOCKWISE:\n//       cout << \"CLOCKWISE\" << endl;\n//       break;\n//     case ONLINE_BACK:\n//       cout << \"ONLINE_BACK\" << endl;\n//       break;\n//     case ONLINE_FRONT:\n//       cout << \"ONLINE_FRONT\" << endl;\n//       break;\n//     case ON_SEGMENT:\n//       cout << \"ON_SEGMENT\" << endl;\n//       break;\n//     }\n//   }\n\n  // Segments/Lines\n//   int n;\n//   for(cin >> n; n > 0; --n) {\n//     int a, b, c, d, e, f, g, h;\n//     cin >> a >> b >> c >> d >> e >> f >> g >> h;\n//     Segment s(Point(a, b), Point(c, d));\n//     Segment t(Point(e, f), Point(g, h));\n//     // A\n// //     cout << (parallel(s, t) ? 2 : (orthogonal(s, t) ? 1 : 0)) << endl;\n//     // B\n// //     cout << (intersect(s, t) ? 1 : 0) << endl;\n//     // C\n// //     auto cp = crosspoint(s, t);\n// //     cout << setprecision(10) << fixed << cp.x << \" \" << cp.y << endl;\n//     // D\n// //     cout << setprecision(10) << fixed << distance(s, t) << endl;\n//   }\n\n  // Polygon\n//   int n;\n//   Polygon polygon;\n//   for(cin >> n; n > 0; --n) {\n//     int x, y;\n//     cin >> x >> y;\n//     polygon.add(Point(x, y));\n//   }\n//   // A\n// //   cout << setprecision(1) << fixed  << polygon.area() << endl;\n//   // B\n// //   cout << (polygon.convex() ? 1 : 0) << endl;\n//   // C\n//   int q;\n//   for(cin >> q; q > 0; --q) {\n//     int x, y;\n//     cin >> x >> y;\n//     Point p(x, y);\n//     cout << (polygon.touch(p) ? 1 : (polygon.intersect(p) ? 2 : 0)) << endl;\n//   }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#include <cmath>\n#include <numeric>\nusing namespace std;\n#define rep(i,a,b) for(int64_t i=(a); i<(b); ++i) // a ≦ i < b \n#define Rrep(i,a,b) for(int64_t i=(a);i>=(b);--i) // reverse repeat. a から b まで減少．\n#define ALL(a) (a).begin(),(a).end()\n#define RALL(a) (a).rbegin(), (a).rend() //逆イテレータ\n#define RANGE(a,b,c) (a).begin()+b,(a).begin()+c // コンテナ a の 要素 b から c へのイテレータ\n#define MOD 1000000007\n#define INF 1000000000\ntypedef pair<int64_t, int64_t> PII;\ntypedef vector<int64_t> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef vector<PII> VP;\n#include <iomanip>\n\nint main() {\ncin.tie(0);\nios::sync_with_stdio(false);\ncout << fixed << setprecision(10);\n\ndouble xp1, yp1, xp2, yp2; \ncin >> xp1 >> yp1 >> xp2 >> yp2;\nint q; cin >> q;\nrep(i, 0, q){\n    double x, y;\n    cin >> x >> y;\n\n    double vx = xp2 - xp1, vy = yp2 - yp1;\n    double ux = vx / hypot(vx, vy), uy = vy / hypot(vy, vx);\n    double wx = x - xp1, wy = y - yp1;\n    double ip = wx * ux + wy * uy;\n    cout << xp1 + ip * ux << ' ' << yp1 + ip * uy << \"\\n\";\n}    \n\n\n\n}\n\n// 境界，出力文字列 チェック\n// まずは全探索，次にDP\n// 制限を見る\n// 偶奇，逆から，ソート，出現回数，出現位置，DP， 余事象，包除\n// データ構造． 問題の特徴量\n// 存在判定：構成方法，入力の特徴\n// gcd, lcm ,素因数分解．\n// 例外を十分に含む一般化．想像力の限界\n// 小さい系から例示\n// 始めは過剰に例示・場合分けしてもいい．各場合を確実に対処．\n// 自明な例から処理，除外．\n// 小数のときは，精度の設定する．doubel 変数に数値を入力するときは 123. とする．\n// テストケース作成は数表あり\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n#define SQR(n) ((n) * (n))\n\n//???\nstruct Point\n{\n  double x, y;\n  \n  Point() {}\n  Point(double x, double y) : x(x), y(y) {}\n\n  Point operator + (Point p) { return (Point(x + p.x, y + p.y)); }\n  Point operator - (Point p) { return (Point(x - p.x, y - p.y)); }\n  Point operator * (double a) { return (Point(x * a, y * a)); }\n  Point operator / (double a) { return (Point(x / a, y / a)); }\n\n  void input() { scanf(\"%lf %lf\", &x, &y); }\n  void output() { printf(\"%.10lf, %.10lf\", x, y); }\n  void outputln() { output(); putchar('\\n'); }\n  double abs() { return (sqrt(norm())); }\n  double norm() { return (SQR(x) + SQR(y)); }\n  \n  bool operator < (const Point &p) const {\n    return (equals(x, p.x) ? y < p.y : x < p.x);\n  }\n\n  bool operator == (const Point &p) const {\n    return (equals(x, p.x) && equals(y, p.y));\n  }\n\n};\n\n//??????\nstruct Segment\n{\n  Point p1, p2;\n\n  Segment() {}\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n\n  void input() { p1.input(); p2.input(); }\n  \n};\n\nstruct Circle\n{\n  Point c;\n  double r;\n  Circle(Point c, double r) : c(c), r(r) {}\n};\n  \n//??´???\ntypedef Segment Line; \n//????????????\ntypedef Point Vector;\ntypedef vector < Point > Polygon;\n\ndouble dot(Vector a, Vector b)\n{\n  return (a.x * b.x + a.y * b.y);\n}\n\ndouble cross(Vector a, Vector b)\n{\n  return (a.x * b.y - a.y * b.x);\n}\n\nPoint project(Segment s, Point p)\n{\n  Point base = s.p2 - s.p1;\n\n  return (s.p1 + base * (dot(p, base) / base.norm()));\n}\n\nmain()\n{\n  int n;\n  Segment s;\n\n  s.input(); cin >> n;\n  for(int i = 0; i < n; i++) {\n    Point p;\n    p.input();\n    project(s, p).outputln();\n  }\n\n  return (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n//#define int long long\n\nusing namespace std;\nusing LL = long long;\nusing P = pair<int, int>;\nusing Tapris = tuple<int, int, int>;\n\n#define FOR(i, a, n) for(int i = (int)(a); i < (int)(n); ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define pb(a) push_back(a)\n#define all(x) (x).begin(),(x).end()\n\nconst int INF = (int)1e9;\nconst LL INFL = (LL)1e15;\nconst int MOD = 1e9 + 7;\n\nint dy[]={0, 0, 1, -1, 0};\nint dx[]={1, -1, 0, 0, 0};\n\ntypedef long double LD;\ntypedef complex<LD> Point;\ntypedef pair<Point, Point> Line;\nconst LD EPS = 1e-10;\n#define X real() // x座標を取得\n#define Y imag() // y座標を取得\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n\n// 内積 dot(a, b) = |a||b|cosθ\nLD dot(Point a, Point b){\n    return (conj(a)*b).X;\n}\n\n// 外積 cross(a, b) = |a||b|sinθ\nLD cross(Point a, Point b){\n    return (conj(a)*b).Y;\n}\n\nint ccw(Point a, Point b, Point c){\n    b -= a; c -= a;\n    if (cross(b, c) > 0)   return +1;       // counter clockwise\n    if (cross(b, c) < 0)   return -1;       // clockwise\n    if (dot(b, c) < 0)     return +2;       // c--a--b on line\n    if (norm(b) < norm(c)) return -2;       // a--b--c on line\n    return 0;\n}\n\n// 交差判定 (isec) ****************************\n// 点　 := 平面座標にある点\n// 直線 := 点と点を通るどこまでも続く線\n// 線分 := 点と点を結んでその両端で止まっている線\n\n// 直線と点\nbool isecLP(Point a1, Point a2, Point b){\n    return abs(ccw(a1, a2, b)) != 1;\n}\n\n// 直線と直線\nbool isecLL(Point a1, Point a2, Point b1, Point b2) {\n    return !isecLP(a2-a1, b2-b1, 0) || isecLP(a1, b1, b2);\n}\n\n// 直線と線分\nbool isecLS(Point a1, Point a2, Point b1, Point b2) {\n    return cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS;\n}\n\n// 線分と線分\nbool isecSS(Point a1, Point a2, Point b1, Point b2) {\n    return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 && ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\n\n// 線分と点\nbool isecSP(Point a1, Point a2, Point b) {\n    return !ccw(a1, a2, b);\n}\n\n// ********************************************\n\n\n// 距離 (dist) ********************************\n// 点pの直線aへの射影点を返す\nPoint proj(Point a1, Point a2, Point p){\n    return a1 + dot(a2-a1, p-a1) / norm(a2-a1) * (a2-a1);\n}\n\n// 点pの直線aへの反射点を返す\nPoint reflection(Point a1, Point a2, Point p){\n    return 2.0L*proj(a1, a2, p) - p;\n}\n\n// 直線と点\nLD distLP(Point a1, Point a2, Point p){\n    return abs(proj(a1, a2, p) - p);\n}\n\n// 直線と直線\nLD distLL(Point a1, Point a2, Point b1, Point b2) {\n    return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\n// 直線と線分\nLD distLS(Point a1, Point a2, Point b1, Point b2) {\n    return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\n// 線分と点\nLD distSP(Point a1, Point a2, Point p) {\n    Point r = proj(a1, a2, p);\n    if(isecSP(a1, a2, r)) return abs(r-p);\n    return min(abs(a1-p), abs(a2-p));\n}\n\n// 線分と線分\nLD distSS(Point a1, Point a2, Point b1, Point b2) {\n    if(isecSS(a1, a2, b1, b2)) return 0;\n    return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)), min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\n// ********************************************\n\n\n// 2直線の交点 (crosspoint) *******************\nPoint crosspointLL(Point a1, Point a2, Point b1, Point b2){\n    LD d1 = cross(b2-b1, b1-a1);\n    LD d2 = cross(b2-b1, a2-a1);\n    if (EQ(d1, 0) && EQ(d2, 0)) return a1;\n    if (EQ(d2, 0)) throw \"not exist crosspoint\";\n    return a1 + d1/d2 * (a2-a1);\n}\n// ********************************************\n\n\n/*************** using variables ***************/\nPoint p1, p2;\nint q;\n/**********************************************/\n\nsigned main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    LD p1x, p1y, p2x, p2y;\n    cin >> p1x >> p1y >> p2x >> p2y;\n    p1 = Point(p1x, p1y);\n    p2 = Point(p2x, p2y);\n    \n    cin >> q;\n    REP(i, q){\n        LD xp, yp;\n        cin >> xp >> yp;\n        Point p(xp, yp);\n\n        Point ans = proj(p1, p2, p);\n        printf(\"%.9Lf %.9Lf\\n\", ans.X, ans.Y);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cstdio>\n#include<complex>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define pb push_back\n#define mp make_pair\n#define it ::iterator\n#define all(in) in.begin(),in.end()\nconst double PI=acos(-1);\nconst double ESP=1e-10;\nusing namespace std;\ntypedef complex<double> P;\nP pin(){\n\tdouble x,y;\n\tcin>>x>>y;\n\tP p(x,y);\n\treturn p;\n}\nvoid PIN(P* a,int i){\n\trep(i,2)a[i]=pin();\n}\ndouble dot(P a,P b){\n\treturn real(conj(a)*b);\n}\ndouble cross(P a,P b){\n\treturn imag(conj(a)*b);\n}\nint main(){\n\tP a[2];\n\tPIN(a,2);\n\tint n;\n\tcin>>n;\n\trep(i,n){\n\t\tP p2=pin();\n\t\tP p=a[1]-a[0];\n\t\tP ans=a[0]+dot(p2-a[0],p)*p/norm(p);\n\t\tprintf(\"%.9f %.9f\\n\",real(ans),imag(ans));\n\t}\n\t\t\n\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <iomanip>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n    public:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(x * a, y * a); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double norm() { return x * x + y * y; }\n    double abs() { return sqrt(norm()); }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x; \n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nint main()\n{\n    int q;\n    double x1, x2, x3, y1, y2, y3;\n    Segment s;\n\n    cin >> x1 >> y1 >> x2 >> y2;\n    s.p1 = Point(x1, y1);\n    s.p2 = Point(x2, y2);\n    \n    cin >> q;\n    for (int i = 0; i != q; ++i)\n    {\n        cin >> x3 >> y3;\n        Point p3 = Point(x3, y3);\n        Point e = project(s, p3);\n        cout << fixed << setprecision(10) << e.x << \" \" << e.y << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<complex>\n#include<cstdio>\n\nusing namespace std;\n\n#define X real()\n#define Y imag()\n\nint main(){\n\ttypedef complex<double> P;\n\t\n\t\n\tint a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\t\n\tP padding = P(a,b);\n\tP p1 = P(0,0);\n\tP p2 = P(c-a, d-b);\n\t\n\tP e = p2 / abs(p2);\n\t\n\tint n;\n\tcin>>n;\n\t\n\tfor(int i=0;i<n;i++){\n\t\tint g,h;\n\t\tcin>>g>>h;\n\t\t\n\t\tP q = P(g,h) - padding;\n\t\t\n\t\tdouble len = q.X*e.X + q.Y*e.Y;\n\t\tP ans = (e*len + padding);\n\t\t\n\t\tprintf(\"%.10lf %.10lf\\n\",ans.X, ans.Y);\n\t\t\n\t}\n\t\n}"
  },
  {
    "language": "C++",
    "code": "/**計算幾何学の問題を解く際に利用するクラス******/\n//http://skyblueryu.blog54.fc2.com/blog-entry-27.html\n#define _USE_MATH_DEFINES\n#include <cmath>\n#include <vector>\n#include <cstdio>\n#include <iostream>\n#define EPS (pow(M_E,(double)-10))\n//マクロの書式については \n//http://www7b.biglobe.ne.jp/~robe/cpphtml/html01/cpp01030.html\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\n\nclass Point{\npublic:\n\tdouble x,y;\n\n\t//以下の記法に関しては\n\t//http://ameblo.jp/nana-2007-july/entry-10037680575.html\n\tPoint(double x = 0,double y = 0): x(x), y(y) {};\n\n\t/***演算子のオーバーロード***********/\n\tPoint operator + (Point p) { return Point(x + p.x,y + p.y);}\n\tPoint operator - (Point p) { return Point(x - p.x,y - p.y);}\n\tPoint operator * (double a) { return Point(a*x,a*y);}//スカラー倍\n\tPoint operator / (double a) { return Point(x/a,y/a);}//スカラー倍\n\t/***********************************/\n\n\tdouble norm() { return x*x+y*y;}//ベクトルのノルムを返す\n\tdouble abs() { return sqrt(norm());}//ベクトルの長さを返す\n\n\t/***演算子のオーバーロード2***********/\n\t//Pointはクラスオブジェクトなのでサイズが大きく値渡しは適さない\n\t//Point &pという記法は参照渡しでポインタでない変数\n\t//に対してアドレスを引数にとりたい場合に使う．\n\t//参照渡しとポインタ渡しについては以下\n\t//http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1320144958\n\t//http://homepage2.nifty.com/well/Reference.html#PASS_BY_REFERENCE\n\t//\n\t//Point &pの前のconst修飾子は関数内で引数のオブジェクトの内容を\n\t//勝手に書き換えないようにするために付けている．(const Point &p)\n\t//の後のconstはこの関数がconstメンバ関数であることを意味する．\n\t//constメンバ関数に関して詳しくは以下\n\t//http://www.s-cradle.com/developer/sophiaframework/tutorial/Cpp/const.html\n\n\tbool operator < (const Point &p) const{\n\t\t//(条件)?(処理1):(処理2)\n\t\t//条件が真なら処理1，偽なら処理2が実行される\n\t\treturn x != p.x ? x < p.x :y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\t/*************************************/\n\n};\n\ntypedef Point Vector;\n\n//ベクトルaとbの内積を計算する関数\n//これは参照渡しじゃなくていいんかいという疑問は正直ある\ndouble dot(Vector a,Vector b){\n\t//double dot(const Vector& a,const Vector& b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//ベクトルaとbの外積を計算する関数\ndouble cross(Vector a,Vector b){\n\t//double cross(const Vector& a,const Vector& b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n\n\n//線分を表す構造体\nstruct Segment{\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\n//円を表すクラス\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(),double r = 0.0):c(c), r(r) {}\n};\n\n//多角形の表現(多角形は点の列で表現できる)\ntypedef vector<Point> Polygon;\n\n\nint main(){\n\tPoint p1,p2;\n\tint Q;\n\tscanf(\"%lf %lf\",&p1.x,&p1.y);\n\tscanf(\"%lf %lf\",&p2.x,&p2.y);\n\tscanf(\"%d\",&Q);//クエリ数\n\n\tVector d((p2.x-p1.x),(p2.y-p1.y));//方向ベクトル\n\tdouble abs = d.abs();\n\td.x = d.x/abs;\n\td.y = d.y/abs;\n\n\tPoint p;\n\tVector v;//p1→p\n\tVector proj;\n\tfor(int q = 0;q < Q;q++){\n\t\tscanf(\"%lf %lf\",&p.x,&p.y);\n\n\t\tv.x = p.x - p1.x;\n\t\tv.y = p.y - p1.y;\n\t\tproj.x = d.x * dot(v,d);\n\t\tproj.y = d.y * dot(v,d);\n\t\t\n\t\tprintf(\"%lf %lf\\n\",proj.x + p1.x,proj.y + p1.y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n\nusing namespace std;\n\nint main()\n{\n\tint x0, y0, x1, y1, q, x2, y2;\n\tscanf(\"%d %d %d %d\", &x0, &y0, &x1, &y1);\n\tscanf(\"%d\", &q);\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%d %d\", &x2, &y2);\n\t\tdouble x, y;\n\t\tx = x0 + (x1-x0)*((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)) / (pow(x1 - x0, 2) + pow(y1 - y0, 2));\n\t\ty = y0 + (y1-y0)*((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0)) / (pow(x1 - x0, 2) + pow(y1 - y0, 2));\n\t\tprintf(\"%.11lf %.11lf\\n\", x, y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing ull = unsigned long long;\n//#define ll long long\ntemplate<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }\ntemplate<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }\n#define rep(i, n) REP(i, 0, n)\n#define rep_rev(i, n) for (int (i) = (int)(n) - 1 ; (i) >= 0 ; --(i))\n#define ALL(v) v.begin(), v.end()\n#define MSG(a) cout << #a << \" \" << a << endl;\n#define REP(i, x, n) for(int i = x; i < n; i++)\n#define all(x) (x).begin(),(x).end()\nll t1,t2;\nconst ll mod = 1000000007;\nconst int INF = 1e9;\nconst ll INFLONG = 1e18;\nvoid swap(ll *x,ll *y){\n  ll tmp;\n  tmp = *x;\n  *x = *y;\n  *y = tmp;\n}\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x,y;\n    Point(double x,double y):x(x),y(y){}\n    Point():x(0),y(0){}\n\n    Point operator + (Point p) {return Point(x + p.x,y + p.y);}\n    Point operator - (Point p ){return Point(x - p.x,y - p.y);}\n    Point operator * (double a){return Point(x*a,y*a);}\n    Point operator / (double a){return Point(x/a,y/a);}\n\n    double abs(){return sqrt(norm());}\n    double norm(){return x * x + y * y;}\n\n    bool operator < (const Point & p) const {\n      return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n      return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n\n    void set(double x,double y) {\n      this->x = x;\n      this->y = y;\n    }\n\n\n};\n\nstruct Segment{\n    Point p1,p2;\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2 - s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2 - s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n  Point vec1,vec2;\n  vec1 = s.p2 - s.p1;\n  vec2 = p - s.p1;\n  return s.p1 + vec1 * dot(vec1,vec2) / vec1.norm();\n}\n\nint main(){\n  double x1,x2,y1,y2,x,y;\n  cin >> x1 >> y1 >> x2 >> y2;\n  vector<Vector> p(3);\n  p[0] = Point(x1,y1);\n  p[1] = Point(x2,y2);\n  Segment s;\n  s.p1 = p[0];\n  s.p2 = p[1];\n  ll q;\n  cin >> q;\n  rep(i,q){\n    cin >> x >> y;\n    p[2] = Point(x,y);\n    Point vec;\n    vec = project(s,p[2]);\n    printf(\"%.15f %.15f\\n\",vec.x,vec.y);\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define repr(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define reprrev(i,a,b) for(int i=b-1;i>=a;i--) // [a, b)\n#define reprev(i,n) reprrev(i,0,n)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\n\n/* attention\n    long longのシフト演算には気をつけよう\n    タイポした時のデバッグが死ぬほどきつくなるので変数名は最低3字くらい使った方がいいかも\n    sizeは(int)とキャストしよう\n    cin.tie(0);\n    ios::sync_with_stdio(false);<- これら、printfとかと併用しない方が良さそう\n\n*/\n\nconst ll mod = 1e9+7;\n\nvoid chmod(ll &M){\n    if(M >= mod) M %= mod;\n    else if(M < 0){\n        M += (abs(M)/mod + 1)*mod;\n        M %= mod;\n    }\n}\n\nll modpow(ll x, ll n){\n    if(n==0) return 1;\n    ll res=modpow(x, n/2);\n\n    if(n%2==0) return res*res%mod;\n    else return res*res%mod*x%mod;\n}\n\nint getl(int i, int N) { return i==0? N-1:i-1; };\nint getr(int i, int N) { return i==N-1? 0:i+1; };\n\n\n// 線分 ab の偏角 返り値は[-π, π]\ndouble argument(const pair<double, double> &a, const pair<double, double> &b){\n    double ax=a.first, ay=a.second, bx=b.first, by=b.second;\n    return atan2(by-ay, bx-ax);\n}\n\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n/* <-----------------------------------------------------------------------------------> */\n\n\nlong double const EPS = (1e-10);\nbool equal(long double const a, long double const b) { return fabs(a-b) < EPS; }\n\nstruct Point {\n    long double x, y;\n    Point(long double _x=0, long double _y=0) : x(_x), y(_y) {}\n\n    Point operator + (Point const & p) const { return Point{x + p.x, y + p.y}; }\n    Point & operator += (Point const & p) { x += p.x; y += p.y; return *this; }\n    Point operator - (Point const & p) const { return Point{x - p.x, y - p.y}; }\n    Point & operator -= (Point const & p) { x -= p.x; y -= p.y; return *this; }\n    Point operator * (long double a) const { return Point{a*x, a*y}; }\n    Point & operator *= (long double a) { x *= a; y *= a; return *this; }\n    Point operator / (long double a) const { return Point{x/a, y/a}; }\n\n    long double norm() { return x*x + y*y; }\n    long double abs() { return sqrt(norm()); }\n    \n    bool operator < (Point const & p) const { return x != p.x ? x < p.x : y < p.y; }\n    bool operator == (Point const & p) const { return equal(x, p.x) && equal(y, p.y); }\n\n    void print() { cout << x << ' ' << y << \"\\n\"; }\n};\nusing Vector = Point;\n\nstruct Segment{\n    Point p1, p2;\n    Segment(Point _p1, Point _p2)\n        : p1(_p1), p2(_p2) {}\n};\nusing Line = Segment;\n\nstruct Circle{\n    Point c;\n    double r;\n    Circle(Point _c, double _r)\n        : c(_c), r(_r) {}\n};\nusing Polygon = vector<Point>;\n\n// 内積 外積 外積は大きさを返す つまり |a||b|sin(theta)\n// https://mathtrain.jp/gaiseki\ndouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\ndouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\n// ベクトルの直交判定　平行判定\nbool isOrthogonal(Vector const & a, Vector const & b) { return equal(dot(a, b), 0.0); }\nbool isOrthogonal(Point const & a1, Point const & a2, Point const & b1, Point const & b2) { return isOrthogonal(a1-a2, b1-b2); }\nbool isOrthogonal(Segment const & s1, Segment const & s2) { return isOrthogonal(s1.p1 - s1.p2, s2.p1 - s2.p2); }\nbool isParallel(Vector const & a, Vector const & b) { return equal(cross(a, b), 0); }\nbool isParallel(Point const & a1, Point const & a2, Point const & b1, Point const & b2) { return isParallel(a1-a2, b1-b2); }\nbool isParallel(Segment const & s1, Segment const & s2) { return isParallel(s1.p1-s1.p2, s2.p1-s2.p2); }\n\n// 線分 s に対する点 p の射影\nPoint project(Segment const & s, Point const & p){\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n// 線分 s を対称軸とした点 p の線対称点\nPoint reflect(Segment const & s, Point const & p) { return p + (project(s, p) - p) * 2.0; }\n// 線分p0-p1 に対して線分 p0-p2 が反時計回りなのか直線上なのか線分上なのか...\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;   // p2-p0-p1\nstatic const int ONLINE_FRONT = -2; // p0-p1-p2\nstatic const int ON_SEGMENT = 0;    // p0-p2-p1\nint ccw(Point const & p0, Point const & p1, Point const & p2){\n    Vector a = p1 - p0, b = p2 - p0;\n    if(cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n    if(cross(a, b) < -EPS) return CLOCKWISE;\n    if(dot(a, b) < -EPS) return ONLINE_BACK;\n    if(a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// 線分 p1-p2 と線分 p3-p4 の交差判定（交点を持てば true）\nbool intersect(Point const & p1, Point const & p2, Point const & p3, Point const & p4){\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment const & s1, Segment const & s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2); }\n\n\nint main(){\n    cin.tie(nullptr);\n    ios::sync_with_stdio(false);\n\n    int a, b, c, d; cin >> a >> b >> c >> d;\n    Segment s(Point(a, b), Point(c, d));\n    int q; cin >> q;\n    while(q--) {\n        int x, y; cin >> x >> y;\n        Point res = project(s, Point(x, y));\n        cout << fixed << setprecision(15) << res.x << \" \" << res.y << endl;\n    }\n\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <limits>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\n#define EPS (numeric_limits<double>::epsilon())\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n    Point operator+(const Point &p) const\n    {\n        return Point(x + p.x, y + p.y);\n    }\n\n    Point operator-(const Point &p) const\n    {\n        return Point(x - p.x, y - p.y);\n    }\n\n    Point operator*(const double &a) const\n    {\n        return Point(a * x, a * y);\n    }\n\n    Point operator/(const double &a) const\n    {\n        return Point(x / a, y / a);\n    }\n\n    double abs()\n    {\n        return sqrt(norm());\n    }\n\n    double norm()\n    {\n        return x * x + y * y;\n    }\n\n    bool operator<(const Point &p) const\n    {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator==(const Point &p) const\n    {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n    Point p1, p2;\n};\ntypedef Segment Line;\n\n\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n\nbool isParallel(Vector a, Vector b)\n{\n    return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n    return equals(cross(a2 - a1, b2 - b1), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b)\n{\n    return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n    return equals(dot(a2 - a1, b2 - b1), 0.0);\n}\n\nPoint project(Segment s, Point p)\n{\n    Vector hypo = p - s.p1;\n    Vector base = s.p2 - s.p1;\n    return base * (dot(hypo, base) / base.norm()) + s.p1;\n}\n\nint main()\n{\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Segment s{p1, p2};\n    int query;\n    cin >> query;\n    Point p;\n    for (int q = 0; q < query; q++)\n    {\n        cin >> p.x >> p.y;\n        Point x = project(s, p);\n        printf(\"%.10f %.10f\\n\", x.x, x.y);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef double Double;\n\nconst Double EPS = 1e-8;\nconst Double PI = acos((Double)-1.0);\n\nint sign(Double a){\n\tif (abs(a) < EPS) return 0;\n\tif (a < 0.0) return -1;\n\treturn 1;\n}\n\nbool eq(Double a, Double b){\n\treturn sign(a - b) == 0;\n}\n\nbool neq(Double a, Double b){\n\treturn sign(a - b) != 0;\n}\n\nbool lt(Double a, Double b){\n\treturn sign(a - b) == -1;\n}\n\nbool leq(Double a, Double b){\n\treturn sign(a - b) <= 0;\n}\n\nbool gt(Double a, Double b){\n\treturn sign(a - b) == 1;\n}\n\nbool geq(Double a, Double b){\n\treturn sign(a - b) >= 0;\n}\n\nDouble sq(Double a){\n\treturn a * a;\n}\n\nstruct Point {\n\tDouble x, y;\n\t\n\tPoint(){}\n\tPoint(Double x, Double y) : x(x), y(y){}\n\t\n\tbool operator < (const Point &rhs) const { \n\t\treturn x != rhs.x ? x < rhs.x : y < rhs.y;\n\t}\n\t\n\tPoint operator + (const Point &rhs) const {\n\t\treturn Point(x + rhs.x, y + rhs.y);\n\t}\n\t\n\tPoint operator - (const Point &rhs) const {\n\t\treturn Point(x - rhs.x, y - rhs.y);\n\t}\n\t\n\tPoint operator * (const Point &rhs) const {\n\t\treturn Point(x * rhs.x - y * rhs.y, x * rhs.y + y * rhs.x);\n\t}\n\t\n\tPoint operator * (Double rhs) const {\n\t\treturn Point(x * rhs, y * rhs);\n\t}\n\t\n\tPoint operator / (Double rhs) const {\n\t\treturn Point(x / rhs, y / rhs);\n\t}\n\t\n\tPoint& operator += (const Point &rhs) {\n\t\treturn *this = *this + rhs;\n\t}\n\t\n\tPoint& operator -= (const Point &rhs) {\n\t\treturn *this = *this - rhs;\n\t}\n};\n\nPoint operator * (Double lhs, const Point &rhs){\n\treturn rhs * lhs;\n}\n\nPoint operator / (Double lhs, const Point &rhs){\n\treturn rhs * lhs;\n}\n\nstruct Segment {\n\tPoint p1, p2;\n\t\n\tSegment(){}\n\tSegment(const Point &p1, const Point &p2) : p1(p1), p2(p2){}\n};\n\nstruct Line {\n\tPoint p1, p2;\n\t\n\tLine(){}\n\tLine(const Point &p1, const Point &p2) : p1(p1), p2(p2){}\n};\n\nstruct Circle {\n\tPoint p;\n\tDouble r;\n\t\n\tCircle(){}\n\tCircle(const Point &p, Double r) : p(p), r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\nDouble norm(const Point &p){\n\treturn sq(p.x) + sq(p.y);\n}\n\nDouble abs(const Point &p){\n\treturn sqrt(norm(p));\n}\n\nDouble arg(const Point &p){\n\treturn atan2(p.y, p.x);\n}\n\nPoint polar(Double r, Double t){\n\treturn Point(cos(t) * r, sin(t) * r);\n}\n\nDouble dot(const Point &a, const Point &b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\nDouble cross(const Point &a, const Point &b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint ccw(const Point &p0, const Point &p1, const Point &p2){\n\tPoint a = p1 - p0, b = p2 - p0;\n\tif (sign(cross(a, b)) == 1) return 1;\n\tif (sign(cross(a, b)) == -1) return -1;\n\tif (sign(dot(a, b)) == -1) return 2;\n\tif (lt(norm(a), norm(b))) return -2;\n\treturn 0;\n}\n\ntemplate <typename L1, typename L2>\nbool orthogonal(const L1 &l1, const L2 &l2){\n\treturn sign(dot(l1.p2 - l1.p1, l2.p2 - l2.p1)) == 0;\n}\n\ntemplate <typename L1, typename L2>\nbool parallel(const L1 &l1, const L2 &l2){\n\treturn sign(cross(l1.p2 - l1.p1, l2.p2 - l2.p1)) == 0;\n}\n\ntemplate <typename L>\nPoint project(const L &l, const Point &p){\n\tPoint t = l.p2 - l.p1;\n\tDouble r = dot(p - l.p1, t) / norm(t);\n\treturn l.p1 + t * r;\n}\n\ntemplate <typename L>\nPoint reflect(const L &l, const Point &p){\n\treturn p + (project(l, p) - p) * Double(2.0);\n}\n\nbool intersect(const Line &l1, const Line &l2){\n\tif (!parallel(l1, l2)) return true;\n\treturn sign(cross(l1.p2 - l1.p1, l2.p1 - l1.p1)) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s){\n\treturn sign(cross(l.p2 - l.p1, s.p1 - l.p1)) * sign(cross(l.p2 - l.p1, s.p2 - l.p1)) <= 0;\n}\n\nbool intersect(const Line &l, const Point &p){\n\treturn sign(cross(l.p1 - p, l.p2 - p)) == 0;\n}\n\nbool intersect(const Segment &s1, const Segment &s2){\n\treturn ccw(s1.p1, s1.p2, s2.p1) * ccw(s1.p1, s1.p2, s2.p2) <= 0\n\t\t&& ccw(s2.p1, s2.p2, s1.p1) * ccw(s2.p1, s2.p2, s1.p2) <= 0;\n}\n\nbool intersect(const Segment &s, const Point &p){\n\treturn ccw(s.p1, s.p2, p) == 0;\n}\n\nint main()\n{\n\tcout << fixed << setprecision(20);\n\t\n\tLine l;\n\tPoint p;\n\tint q;\n\t\n\tcin >> l.p1.x >> l.p1.y >> l.p2.x >> l.p2.y >> q;\n\twhile (q--){\n\t\tcin >> p.x >> p.y;\n\t\t\n\t\tPoint pr = project(l, p);\n\t\tcout << pr.x << \" \" << pr.y << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <cstdio>\nusing namespace std;\ntypedef complex<double> P;\n#define X real()\n#define Y imag()\n\ndouble dot(P a, P b){\n  return (a.X * b.X + a.Y * b.Y);\n}\n\nint main(){\n  P p1, p2;\n  double x1, x2, y1, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  p1 = P(x1,y1);\n  p2 = P(x2,y2);\n  p2 -= p1;\n  int q;\n  cin >> q;\n  for(int i = 0; i < q; ++i){\n    P p;\n    cin >> x1 >> y1;\n    p = P(x1,y1);\n    p -= p1;\n    p = p1 + dot(p2,p)/abs(p2)/abs(p2)*p2;\n    printf(\"%.9lf %.8lf\\n\",p.X,p.Y);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <complex>\n#include <vector>\n#include <cmath>\n#include <cassert>\n#define rep(i,n) for(int i=0;i<n;i++)\n#define fs first\n#define sc second\n#define pb push_back\nusing namespace std;\ntypedef double D;\ntypedef complex<D> P;\ntypedef pair<P,P> L;\t\t//fs->sc\ntypedef vector<P> Pol;\nstruct C{P p;D r;};\nD inf=1e50,eps=1e-10;\n//template<class T> bool eq(T a, T b) { return abs(a-b)<eps;}\n//template<class T> int sig(T a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\nbool eq(D a, D b) { return abs(a-b)<eps;}\nint sig(D a) { return eq(a,0) ? 0 : (a>0 ? 1 : -1);}\ninline D dot(P a, P b) { return real(conj(a)*b);};\ninline D cro(P a, P b) { return imag(conj(a)*b);};\nenum ENCCW{CCW=1, CW=-1, FRONT=2, BACK=-2, ON=0};\t//!!MAEHARAとFRONT,BACKが逆\n//ON優先(including endpoint)\ninline int ccw (P a, P b, P c){\n//\tcout << cro(b-a,c-a) << endl;\n\tif(sig(cro(b-a,c-a))==1) return CCW;\n\tif(sig(cro(b-a,c-a))==-1) return CW;\n\tif(eq(abs(a-c)+abs(c-b),abs(a-b))) return ON;\n\tif(eq(abs(a-b)+abs(b-c),abs(a-c))) return FRONT;\n\tif(eq(abs(c-a)+abs(a-b),abs(c-b))) return BACK;\n\tassert(false);\n}\ninline P proj(P a, P b){\t\t//ベクトルaのbへの射影\n\treturn (dot(a,b)/norm(b))*b;\n}\ninline P perp(L l, P p){\t\t//垂線の足\n\tD t=dot(p-l.fs,l.fs-l.sc)/norm(l.fs-l.sc);\n\treturn l.fs+t*(l.fs-l.sc);\n}\ninline P refl(L l, P p){\n\treturn p+2.0*(perp(l,p)-p);\n}\ninline bool ispal(L a, L b){\n\treturn sig(cro(a.fs-a.sc,b.fs-b.sc))==0;\n}\ninline bool ovLL(L a, L b){\n\treturn ispal(a,b) && sig(cro(a.fs-a.sc,b.fs-a.sc))==0;\n}\ninline bool iLL(L a, L b){\t\t//intersect or overload\n\treturn !ispal(a,b) || ovLL(a,b);\n}\ninline bool iLS(L l, L s){\t\t//intersect(including endpoint) or overload\n\treturn cro(l.sc-l.fs,s.fs-l.fs)*cro(l.sc-l.fs,s.sc-l.fs)<eps;\n}\ninline bool iLP(L l, P p){\t\t//on line\n\treturn sig(cro(l.sc-p,l.fs-p));\n}\ninline bool iSS(L a, L b){\t\t//intersect(including endpoint) or overload\n\treturn ccw(a.fs,a.sc,b.fs)*ccw(a.fs,a.sc,b.sc)<=0 && ccw(b.fs,b.sc,a.fs)*ccw(b.fs,b.sc,a.sc)<=0;\n}\ninline bool iSP(L s, P p){\t\t//intersect(including endpoint) or overload\n\treturn ccw(s.fs,p,s.sc)==ON;\n}\ninline D dLP(L l, P p) { return abs(perp(l,p)-p);}\ninline D dLL(L a, L b) { return iLL(a,b) ? 0 : dLP(a,b.fs);}\ninline D dLS(L l, L s) { return iLS(l,s) ? 0 : min(dLP(l,s.fs),dLP(l,s.sc));}\ninline D dSP(L s, P p) {\n\tP q=perp(s,p);\n\treturn iSP(s,q) ? abs(p-q) : min(abs(p-s.fs),abs(p-s.sc));\n}\ninline D dSS(L a, L b) {\n\tif(iSS(a,b)) return 0;\n\treturn min(min(dSP(a,b.fs),dSP(a,b.sc)),min(dSP(b,a.fs),dSP(b,a.sc)));\n}\ninline P intLL(L a, L b) {\t//intersection\n\tassert(!ispal(a,b));\n\tD t=cro(a.sc-a.fs,a.sc-b.fs)/cro(a.sc-a.fs,b.sc-b.fs);\n\treturn b.fs+t*(b.sc-b.fs);\n}\nenum ENICP{INC=1,ONC=0,OUTC=-1};\ninline int iCP(C c, P p){\n\tD d=abs(p-c.p);\n\treturn eq(d,c.r) ? ONC : (d<c.r ? INC : OUTC);\n}\ninline int iCL(C c, L l){\t\t//num of intersection(s)\n\tD d=dLP(l,c.p);\n\treturn eq(d,c.r) ? 1 : (d<c.r ? 2 : 0);\n}\n//inline int iCS\n//inline int iCC(C a, C b){\n\n/*inline P intCL1(C c, L l){\t\t//iCL=1\n\tassert(iCL(c,l)==1);\n}\ninline L intCL2(C c, L l){\t\t//iCL=2\n\tassert(iCL(c,l)==2);\n}*/\nD aTri(P a, P b, P c){ return cro(b-a,c-a)/2;}\nD aPol(Pol p){\t\t\t//点集合はCCWに与える\n\tint n=p.size();\n\tD ret=0;\n\trep(i,n) ret+=cro(p[i],p[(i+1)%n])/2;\n\treturn ret;\n}\nP gPol(Pol p){\t\t\t//多角形内部が一様な重さを持つときの重心\n\tint n=p.size();\n\tP g;\n\tD s=aPol(p);\n\tassert(s>eps);\n\trep(i,n){\n\t\tD ds=cro(p[i],p[(i+1)%n])/2;\n\t\tg+=ds/3*(p[i]+p[(i+1)%n]);\n\t}\n\treturn g/s;\n}\nenum ENCONT{INP=1,ONP=0,OUTP=-1};\nint contain(Pol pol, P p){\n\tbool in=false;\n\trep(i,pol.size()){\n\t\tP a=pol[i],b=pol[(i+1)%pol.size()];\n\t\tif(ccw(a,b,p)==ON) return ONP;\n\t\tif(!iLS(L(p,p+1.),L(a,b))) continue;\n\t\tif(ovLL(L(p,p+1.),L(a,b))){\n\t\t\tif(sig(max(real(a),real(b))-real(p))>=0) in=!in;\n\t\t\tcontinue;\n\t\t}\n\t\tif(sig(real(intLL(L(p,p+1.),L(a,b)))-real(p))>=0) in=!in;\n\t}\n\treturn in ? INP : OUTP;\n}\ninline D heron(D a, D b, D c){\n\tdouble s=(a+b+c)/2;\n\tif(s-a<eps || s-b<eps || s-c<eps) return 0;\t\t//S=0 || 三角形できない\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tD x0,y0,x1,y1;\n\tcin >> x0 >> y0 >> x1 >> y1;\n\tL a=L(P(x0,y0),P(x1,y1));\n\tint q;\n\tscanf(\"%d\",&q);\n\trep(i,q){\n\t\tD x,y;\n\t\tscanf(\"%Lf%Lf\",&x,&y);\n\t\tP p=perp(a,P(x,y));\n\t\tprintf(\"%.10Lf %.10Lf\",p.real(),p.imag());\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nstruct cww{cww(){ios::sync_with_stdio(false);cin.tie(0);}}star;\n#define P(x) cout << (x) << \"\\n\"\n#define p(x) cout << (x)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define vv(type, c, m, n, i) vector<vector<type>> c(m, vector<type>(n, i));\n#define rep(i,a,n) for(int i=(a), i##_len=(n); i<i##_len; ++i)\n#define rrep(i,a,n) for(int i=(a), i##_len=(n); i>i##_len; --i)\n#define len(x) ((int)(x).size())\n#define mp make_pair\n#define eb emplace_back\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<double> vd;\ntypedef vector<long long> vll;\ntypedef vector<string> vs;\ntypedef vector<bool> vb;\ntypedef complex<ld> Point;\ntypedef Point Vector;\ntypedef pair<Point, Point> Segment;\nconstexpr double EPS = (1e-9L);\nld dot(const Point& p1, const Point& p2) { return (conj(p1) * p2).real(); }\nld cross(const Point& p1, const Point& p2) { return (conj(p1) * p2).imag(); }\nconstexpr bool eq(ld a) { return abs(a) < EPS; }\nPoint project(Segment s, Point p) {\n\tVector base = s.fi - s.se;\n\tld r = dot(p - s.fi, base) / norm(base);\n\treturn s.fi + base * r;\n}\nint main() {\n\tcout << setprecision(10) << fixed;\n\tint x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;\n\tSegment s = mp(Point(x1, y1), Point(x2, y2));\n\tint q; cin >> q;\n\tPoint p, ap;\n\tint px, py;\n\trep(i, 0, q) {\n\t\tcin >> px >> py;\n\t\tap = project(s, Point(px, py));\n\t\tcout << ap.real() << \" \" << ap.imag() << \"\\n\";\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main(){\n\n\tdouble p0x,p0y,p1x,p1y,p2x,p2y,tx,ty;\n\tint q;\n\tdouble a01,a2t,b01,b2t;\n\n\tcin>>p0x>>p0y>>p1x>>p1y;\n\n\tcin>>q;\n\n\tfor(int i=0;i<q;i++){\n\t\tcin>>p2x>>p2y;\n\t\tif(p0x-p1x!=0) a01=(p0y-p1y)/(p0x-p1x);\n\t\telse a01=0;\n\t\tif(a01!=0) a2t=-1/a01;\n\t\telse a2t=0;\n\t\tb2t=p2y-a2t*p2x;\n\t\tb01=p0y-a01*p0x;\n\t\tif(b2t-b01!=0) tx=(b2t-b01)/(a01-a2t);\n\t\telse tx=0;\n\t\tty=a01*tx+b01;\n\t\tif(p0x==p1x) ty=p2y;\n\t\tif(p0y==p1y) tx=p2x;\n\t\tcout<<a01<<\",\"<<a2t<<\",\"<<b01<<\",\"<<b2t<<endl;\n\t\tprintf(\"%.10f %.10f\\n\",tx,ty);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\n#include <cmath>\n#include \"Projection.h\"\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a*x, a*y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint project(Segment s, Point p) {\n\tdouble alpha = dot(p - s.p2, s.p1 - s.p2) / (s.p1 - s.p2).norm();\n\treturn s.p2 + (s.p1 - s.p2)*alpha;\n}\n\nint main() {\n\tLine l;\n\tcin >> l.p1.x >> l.p1.y >> l.p2.x >> l.p2.y;\n\tint q;\n\tcin >> q;\n\tPoint p;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> p.x >> p.y;\n\t\tPoint x = project(l, p);\n\t\tcout << x.x << \" \" << x.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <deque>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <vector>\n#include <set>\n#include <limits>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n#define REP(i, j) for(int i = 0; i < (int)(j); ++i)\n#define FOR(i, j, k) for(int i = (int)(j); i < (int)(k); ++i)\n#define SORT(v) sort((v).begin(), (v).end())\n#define REVERSE(v) reverse((v).begin(), (v).end())\n#define P complex<double>\n#define x real()\n#define y imag()\nconst int N = 3;\n\nint main() {\n  int Q, tmp[N][3];\n  REP(i, 2) REP(j, 2) cin >>tmp[i][j];\n  cin >>Q;\n  REP(q, Q){\n    P p[N];\n    REP(i, 2) p[i] = P(tmp[i][0], tmp[i][1]);\n    cin >>tmp[2][0] >>tmp[2][1];\n    p[2] = P(tmp[2][0], tmp[2][1]);\n    p[1] -= p[0]; p[2] -= p[0];\n    //cout <<p[1] <<\", \" <<p[2] <<endl;\n    double lp1 = abs(p[1]), lp2 = abs(p[2]);\n    double a = abs(imag(conj(p[1]) * p[2])) / 2.0;\n    //cout <<abs(imag(conj(p[1]) * p[2])) <<endl;\n    double lp2t = 2 * a / lp1;\n    double lt = sqrt(lp2 * lp2 - lp2t * lp2t);\n    p[1] = p[1] * (lt / lp1);\n    //cout <<\"lp1 = \" <<lp1 <<\", lp2 = \" <<lp2 <<\", a = \" <<a <<\", lp2t = \" <<lp2t <<\", lt = \" <<lt <<endl;\n    double ansy = (p[1] + p[0]).y;\n    double ansx = (p[1] + p[0]).x;\n    if(p[2].y < p[0].y) ansy *= -1;\n    if(p[2].x < p[0].x) ansx *= -1;\n    printf(\"%.9f %.9f\\n\", ansx, ansy);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nstruct Point {\n    double x, y;\n    Point() {}\n    Point(double x, double y) : x(x), y(y) {}\n    Point operator+(const Point& p) const { return Point(x + p.x, y + p.y); }\n    Point operator-(const Point& p) const { return Point(x - p.x, y - p.y); }\n    Point operator*(double k) const { return Point(k * x, k * y); }\n    Point operator/(double k) const { return Point(x / k, y / k); }\n};\ndouble dot(const Point& a, const Point& b) { return a.x * b.x + a.y * b.y; }\ndouble cross(const Point& a, const Point& b) { return a.x * b.y - a.y * b.x; }\ndouble norm(const Point& a) { return sqrt(dot(a, a)); }\nPoint rot90(const Point& p) { return Point(p.y, -p.x); } // 時計回りに90度回転 \nostream& operator<<(ostream& os, const Point& p) { return os << \"(\" << p.x << \",\" << p.y << \")\"; }\n\nstruct Line {\n    Point a, b;\n    Line() {}\n    Line(const Point& a, const Point& b) : a(a), b(b) {}\n};\n\nPoint projection(const Line& l, const Point& p) {\n    Point u = (p - l.a), v = (l.b - l.a);\n    return l.a + (v / norm(v)) * (dot(u, v) / norm(v));\n}\n\nint main() {\n    Line l;\n    scanf(\"%lf %lf %lf %lf\\n\", &l.a.x, &l.a.y, &l.b.x, &l.b.y);\n    int Q; scanf(\"%d\\n\", &Q);\n    for (int i = 0; i < Q; i++) {\n        Point p; scanf(\"%lf %lf\\n\", &p.x, &p.y);\n        Point x = projection(l, p);\n        printf(\"%.12lf %.12lf\\n\", x.x, x.y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef double Double;\n\nconst Double EPS = 1e-8;\nconst Double PI = acos(Double(-1.0));\n\nint sign(Double a){\n\tif (abs(a) < EPS) return 0;\n\tif (a < 0.0) return -1;\n\treturn 1;\n}\n\nbool eq(Double a, Double b){\n\treturn sign(a - b) == 0;\n}\n\nbool neq(Double a, Double b){\n\treturn sign(a - b) != 0;\n}\n\nbool lt(Double a, Double b){\n\treturn sign(a - b) == -1;\n}\n\nbool leq(Double a, Double b){\n\treturn sign(a - b) <= 0;\n}\n\nbool gt(Double a, Double b){\n\treturn sign(a - b) == 1;\n}\n\nbool geq(Double a, Double b){\n\treturn sign(a - b) >= 0;\n}\n\nDouble sq(Double a){\n\treturn a * a;\n}\n\nstruct Point {\n\tDouble x, y;\n\t\n\tPoint(){}\n\tPoint(Double x, Double y) : x(x), y(y){}\n\t\n\tbool operator < (const Point &rhs) const { \n\t\treturn x != rhs.x ? x < rhs.x : y < rhs.y;\n\t}\n\t\n\tPoint operator + (const Point &rhs) const {\n\t\treturn Point(x + rhs.x, y + rhs.y);\n\t}\n\t\n\tPoint operator - (const Point &rhs) const {\n\t\treturn Point(x - rhs.x, y - rhs.y);\n\t}\n\t\n\tPoint operator * (const Point &rhs) const {\n\t\treturn Point(x * rhs.x - y * rhs.y, x * rhs.y + y * rhs.x);\n\t}\n\t\n\tPoint operator * (Double rhs) const {\n\t\treturn Point(x * rhs, y * rhs);\n\t}\n\t\n\tPoint operator / (Double rhs) const {\n\t\treturn Point(x / rhs, y / rhs);\n\t}\n\t\n\tPoint& operator += (const Point &rhs) {\n\t\treturn *this = *this + rhs;\n\t}\n\t\n\tPoint& operator -= (const Point &rhs) {\n\t\treturn *this = *this - rhs;\n\t}\n};\n\nPoint operator * (Double lhs, const Point &rhs){\n\treturn rhs * lhs;\n}\n\nPoint operator / (Double lhs, const Point &rhs){\n\treturn rhs * lhs;\n}\n\nstruct Segment : array<Point, 2> {\n\tSegment(){}\n\tSegment(const Point &p1, const Point &p2) : array<Point, 2>({p1, p2}){}\n};\n\nstruct Line : array<Point, 2> {\n\tLine(){}\n\tLine(const Point &p1, const Point &p2) : array<Point, 2>({p1, p2}){}\n};\n\nstruct Circle {\n\tPoint p;\n\tDouble r;\n\t\n\tCircle(){}\n\tCircle(const Point &p, Double r) : p(p), r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\nDouble norm(const Point &p){\n\treturn sq(p.x) + sq(p.y);\n}\n\nDouble abs(const Point &p){\n\treturn sqrt(norm(p));\n}\n\nDouble arg(const Point &p){\n\treturn atan2(p.y, p.x);\n}\n\nPoint polar(Double r, Double t){\n\treturn Point(cos(t) * r, sin(t) * r);\n}\n\nDouble dot(const Point &a, const Point &b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\nDouble cross(const Point &a, const Point &b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint ccw(const Point &p0, const Point &p1, const Point &p2){\n\tPoint a = p1 - p0, b = p2 - p0;\n\tif (sign(cross(a, b)) == 1) return 1;\n\tif (sign(cross(a, b)) == -1) return -1;\n\tif (sign(dot(a, b)) == -1) return 2;\n\tif (lt(norm(a), norm(b))) return -2;\n\treturn 0;\n}\n\ntemplate <typename L1, typename L2>\nbool orthogonal(const L1 &l1, const L2 &l2){\n\treturn sign(dot(l1[1] - l1[0], l2[1] - l2[0])) == 0;\n}\n\ntemplate <typename L1, typename L2>\nbool parallel(const L1 &l1, const L2 &l2){\n\treturn sign(cross(l1[1] - l1[0], l2[1] - l2[0])) == 0;\n}\n\ntemplate <typename L>\nPoint project(const L &l, const Point &p){\n\tPoint t = l[1] - l[0];\n\tDouble r = dot(p - l[0], t) / norm(t);\n\treturn l[0] + t * r;\n}\n\ntemplate <typename L>\nPoint reflect(const L &l, const Point &p){\n\treturn p + (project(l, p) - p) * Double(2.0);\n}\n\nbool intersect(const Line &l1, const Line &l2){\n\tif (!parallel(l1, l2)) return true;\n\treturn sign(cross(l1[1] - l1[0], l2[0] - l1[0])) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s){\n\treturn sign(cross(l[1] - l[0], s[0] - l[0])) * sign(cross(l[1] - l[0], s[1] - l[0])) <= 0;\n}\n\nbool intersect(const Line &l, const Point &p){\n\treturn sign(cross(l[0] - p, l[1] - p)) == 0;\n}\n\nbool intersect(const Segment &s1, const Segment &s2){\n\treturn ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0\n\t\t&& ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\n\nbool intersect(const Segment &s, const Point &p){\n\treturn ccw(s[0], s[1], p) == 0;\n}\n\nint main()\n{\n\tcout << fixed << setprecision(20);\n\t\n\tLine l;\n\tPoint p;\n\tint q;\n\t\n\tcin >> l[0].x >> l[0].y >> l[1].x >> l[1].y >> q;\n\twhile (q--){\n\t\tcin >> p.x >> p.y;\n\t\t\n\t\tPoint pr = project(l, p);\n\t\tcout << pr.x << \" \" << pr.y << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>//Aizu - CGL_2_A  （线段平行和垂直）\nusing namespace std;\ndouble dot(double x0, double y0, double x1, double y1, double x2, double y2, double x3, double y3){\n    return (x1 - x0) * (x3 - x2) + (y1- y0) * (y3 - y2);\n}\ndouble dist(double x0, double y0, double x1, double y1){\n    return sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1));\n}\nint main(){\n    int n, i, f;\n    double x0, y0, x1, y1, x2, y2, x3, y3, r;\n    scanf(\"%lf%lf%lf%lf\", &x0, &y0, &x1, &y1);\n    cin >> n;\n    while(n --){\n        f = 0;\n        scanf(\"%lf%lf\", &x2, &y2);\n            r = dot(x0, y0, x1, y1, x0, y0, x2, y2) / dist(x0, y0, x1, y1)  / dist(x0, y0, x1, y1); \n            printf(\"%.8lf %.8lf\\n\", x0 + r * (x1 - x0), y0 + r * (y1 - y0));\n        \n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<string>\n#include<complex>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<queue>\n#include<iomanip>\n#include<bitset>\n#include<utility>\n#include<list>\n#include<map>\n#include<set>\n#include<cstring>\n#include<sstream>\n#include<cctype>\nusing namespace std;\nconst double EPS=1e-8;\nconst double INF=1e9;\ntypedef complex<double>P;\nnamespace std{\n    bool operator<(const P& a,const P& b){\n        return real(a)!=real(b)?real(a)<real(b):imag(a)<imag(b);\n    }\n}\n#define EQ(a,b) (fabs((a)-(b))<EPS)\n#define EQV(a,b) (EQ(real(a),real(b))&&EQ(imag(a),imag(b)))\ndouble cross(const P &a,const P &b){\n    return imag(conj(a)*b);\n}\ndouble dot(const P &a,const P &b){\n    return real(conj(a)*b);\n}\n\nstruct L:public vector<P>{\n    L(const P a,const P b){\n        push_back(a);push_back(b);\n    }\n    L(){}\n};\n\ntypedef vector<P>G;\n\nstruct C{\n    P p;double r;\n    C(const P p_,double r_):p(p_),r(r_){}\n    C(){}\n};\n\nint ccw(P a,P b,P c){\n    b-=a;c-=a;\n    if(cross(b,c)>0)return 1;///counter clockwise\n    if(cross(b,c)<0)return -1;///clockwise\n    if(dot(b,c)<0)return 2;///c--a--b on line\n    if(norm(b)<norm(c))return -2;///a--b--c on line\n    return 0;\n}\nbool orthogonal(P &p,P &q){\n    return EQ(dot(p,q),0.0);\n}\nbool intersectLL(const L &l,const L &m){\n    return abs(cross(l[1]-l[0],m[1]-m[0]))>EPS||///non-parallel\n        abs(cross(l[1]-l[0],m[0]-l[0]))<EPS;///same line\n}\nbool intersectLS(const L &l,const L &s){\n    return cross(l[1]-l[0],s[0]-l[0])*///s[0] is left of l\n        cross(l[1]-l[0],s[1]-l[0])<EPS;///s[1] is right of l\n}\nbool intersectLP(const L &l,const P &p){\n    return abs(cross(l[1]-p,l[0]-p))<EPS;\n}\nbool intersectSS(const L &s,const L &t){\n    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1])<=0&&\n        ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1])<=0;\n}\nbool intersectSP(const L &s,const P &p){\n    return abs(abs(s[0]-p)+abs(s[1]-p)-abs(s[1]-s[0]))<EPS;\n    ///triangle inequality\n}\nP projection(const L &l,const P &p){\n    double t=dot(p-l[0],l[0]-l[1])/norm(l[0]-l[1]);\n    return l[0]+t*(l[0]-l[1]);\n}\nP reflection(const L &l,const P &p){\n    return p+(projection(l,p)-p)*2.0;\n}\ndouble distanceLP(const L &l,const P &p){\n    return abs(p-projection(l,p));\n}\ndouble distanceLL(const L &l,const L &m){\n    return intersectLL(l,m)?0:distanceLP(l,m[1]);\n}\ndouble distanceLS(const L &l,const L &s){\n    if(intersectLS(l,s))return 0;\n    return min(distanceLP(l,s[0]),distanceLP(l,s[1]));\n}\ndouble distanceSP(const L &s,const P &p){\n    const P r=projection(s,p);\n    if(intersectSP(s,r))return abs(r-p);\n    return min(abs(s[0]-p),abs(s[1]-p));\n}\ndouble distanceSS(const L &s,const L &t){\n    if(intersectSS(s,t))return 0;\n    return min(min(distanceSP(s,t[0]),distanceSP(s,t[1])),\n            min(distanceSP(t,s[0]),distanceSP(t,s[1])));\n}\nP crossPoint(const L &l,const L &m){\n    double A=cross(l[1]-l[0],m[1]-m[0]);\n    double B=cross(l[1]-l[0],l[1]-m[0]);\n    if(abs(A)<EPS&&abs(B)<EPS)return m[0];///same line\n    ///if(abs(A)<EPS)assert(false);\n    return m[0]+B/A*(m[1]-m[0]);\n\n}\n\nP extreme(const G &g,const L &l){\n    int k=0;\n    for(int i=1;i<g.size();i++){\n        if(dot(g[i],l[1]-l[0])>dot(g[k],l[1]-l[0]))k=i;\n    }\n    return g[k];\n}\n\nG andrewScan(G s){\n    G u,l;\n    if(s.size()<3)return s;\n    sort(s.begin(),s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n\n    l.push_back(s[s.size()-1]);\n    l.push_back(s[s.size()-2]);\n\n    for(int i=2;i<s.size();i++){\n        for(int n=u.size();n>=2&&ccw(u[n-2],u[n-1],s[i])!=-1;n--){\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n\n    for(int i=s.size()-3;i>=0;i--){\n        for(int n=l.size();n>=2&&ccw(l[n-2],l[n-1],s[i])!=-1;n--){\n            l.pop_back();\n        }\n        l.push_back(s[i]);\n    }\n    reverse(l.begin(),l.end());\n    for(int i=u.size()-2;i>=1;i--)l.push_back(u[i]);\n    return l;\n}\n/*\nIN 2\nON 1\nOUT 0\n*/\nint contains(G g,P p){\n    int n=g.size();\n    bool x=false;\n    for(int i=0;i<n;i++){\n        P a=g[i]-p,b=g[(i+1)%n]-p;\n        if(abs(cross(a,b))<EPS&&dot(a,b)<EPS)return 1;\n        if(imag(a)>imag(b))swap(a,b);\n        if(imag(a)<EPS&&EPS<imag(b)&&cross(a,b)>EPS)x=!x;\n    }\n    return (x?2:0);\n}\n\n\nint main(){\n    double x1,x2,y1,y2;\n    scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n    L l(P(x1,y1),P(x2,y2));\n    int q;\n    scanf(\"%d\",&q);\n    while(q--){\n        double x,y;\n        scanf(\"%lf%lf\",&x,&y);\n        P p=projection(l,P(x,y));\n        printf(\"%.8f %.8f\\n\",real(p),imag(p));\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include<bits/stdc++.h>\n#define INF         1e9\n#define EPS         1e-9\n#define REP(i,n)    for(lint i=0,i##_len=(n);i<i##_len;++i)\n#define REP1(i,n)   for(lint i=1,i##_len=(n);i<=i##_len;++i)\n#define REPR(i,n)   for(lint i=(n)-1;i>=0;--i)\n#define REPR1(i,n)  for(lint i=(n);i>0;--i)\n#define REPC(i,obj) for(auto i:obj)\n#define R_UP(a,b)   (((a)+(b)-1)/(b))\n#define ALL(obj)    (obj).begin(),(obj).end()\n#define SETP        cout << fixed << setprecision(10)\nusing namespace std;\nusing lint = long long;\ntemplate<typename T = lint>inline T in() { T x; cin >> x; return x; }\n\nclass vec2d {\npublic:\n\tdouble x, y;\n\tvec2d(double x, double y) :x(x), y(y) {}\n\tdouble norm2() const {\n\t\treturn x * x + y * y;\n\t}\n\tvec2d operator*(double k) const {\n\t\treturn vec2d(x * k, y * k);\n\t}\n\tvec2d operator/(double k)const {\n\t\treturn vec2d(x / k, y / k);\n\t}\n\tdouble operator*(const vec2d&v)const {\n\t\treturn x * v.x + y * v.y;\n\t}\n\tstatic vec2d projection(const vec2d&a, const vec2d&b) {\n\t\treturn a * (a * b) / a.norm2();\n\t}\n};\nsigned main() {\n\tSETP;\n\tint xp1 = in(), yp1 = in(), xp2 = in(), yp2 = in();\n\tvec2d a(xp2 - xp1, yp2 - yp1);\n\tint q = in();\n\tREP(i, q) {\n\t\tint x = in(), y = in();\n\t\tvec2d b(x - xp1, y - yp1);\n\t\tvec2d proj = vec2d::projection(a, b);\n\t\tcout << proj.x + xp1 << ' ' << proj.y + yp1 << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "// {{{ header\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing i8   = int8_t;\nusing u8   = uint8_t;\nusing i16  = int16_t;\nusing u16  = uint16_t;\nusing i32  = int32_t;\nusing u32  = uint32_t;\nusing i64  = int64_t;\nusing u64  = uint64_t;\nusing i128 = __int128_t;\nusing u128 = __uint128_t;\n\nusing f32  = float;\nusing f64  = double;\nusing f80  = __float80;\nusing f128 = __float128;\n// }}}\n\nconstexpr i64 INF = 1'010'000'000'000'000'000LL;\n\nconstexpr i64 MOD = 1'000'000'007LL;\n\nconstexpr f64 EPS = 1e-12;\n\nconstexpr f64 PI = 3.14159265358979323846;\n\n// {{{ util\n#define FOR(i, start, end) for(i64 i = (start), i##_end=(end); i < i##_end; ++i)\n#define REP(i, n) FOR(i, 0, n)\n\n#define ALL(f,c,...) (([&](decltype((c)) cccc) { return (f)(begin(cccc), end(cccc), ## __VA_ARGS__); })(c))\n#define SLICE(f,c,l,r,...) (([&](decltype((c)) cccc, decltype((l)) llll, decltype((r)) rrrr) {\\\n    auto iiii = llll <= rrrr ? begin(cccc)+llll : end(cccc);\\\n    auto jjjj = llll <= rrrr ? begin(cccc)+rrrr : end(cccc);\\\n    return (f)(iiii, jjjj, ## __VA_ARGS__);\\\n})(c,l,r))\n\n#define GENERIC(f) ([](auto&&... args) -> decltype(auto) { return (f)(forward<decltype(args)>(args)...); })\n\ntemplate<typename C>\ni64 SIZE(const C& c) { return static_cast<i64>(c.size()); }\n\ntemplate<typename T, size_t N>\ni64 SIZE(const T (&)[N]) { return static_cast<i64>(N); }\n\nbool is_odd (i64 x) { return x % 2 != 0; }\nbool is_even(i64 x) { return x % 2 == 0; }\n\ntemplate<typename T> i64 cmp(T x, T y) { return (y<x) - (x<y); }\ntemplate<typename T> i64 sgn(T x) { return cmp(x, T(0)); }\n\n// Haskell の divMod と同じ\npair<i64,i64> divmod(i64 a, i64 b) {\n    i64 q = a / b;\n    i64 r = a % b;\n    if((b>0 && r<0) || (b<0 && r>0)) {\n        --q;\n        r += b;\n    }\n    return make_pair(q,r);\n}\n\ni64 div_ceil(i64 a, i64 b) {\n    i64 q = a / b;\n    i64 r = a % b;\n    if((b>0 && r>0) || (b<0 && r<0))\n        ++q;\n    return q;\n}\n\ni64 div_floor(i64 a, i64 b) {\n    return divmod(a,b).first;\n}\n\ni64 modulo(i64 a, i64 b) {\n    return divmod(a,b).second;\n}\n\ntemplate<typename T, typename U>\nbool chmax(T& xmax, const U& x) {\n    if(xmax < x) {\n        xmax = x;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ntemplate<typename T, typename U>\nbool chmin(T& xmin, const U& x) {\n    if(x < xmin) {\n        xmin = x;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ntemplate<typename InputIt>\nauto SUM(InputIt first, InputIt last) {\n    using T = typename iterator_traits<InputIt>::value_type;\n    return accumulate(first, last, T());\n}\n\ntemplate<typename ForwardIt, typename UnaryOperation>\nForwardIt transform_self(ForwardIt first, ForwardIt last, UnaryOperation op) {\n    return transform(first, last, first, op);\n}\n\ntemplate<typename C>\nvoid UNIQ(C& c) {\n    c.erase(ALL(unique,c), end(c));\n}\n\ntemplate<typename BinaryFunc, typename UnaryFunc>\nauto ON(BinaryFunc bf, UnaryFunc uf) {\n    return [bf,uf](const auto& x, const auto& y) {\n        return bf(uf(x), uf(y));\n    };\n}\n\ntemplate<typename T>\nvoid RD(T& x) {\n    cin >> x;\n#ifdef PROCON_LOCAL\n    assert(cin);\n#endif\n}\n\ntemplate<typename T>\nvoid RD(vector<T>& v, i64 n) {\n    v.reserve(n);\n    REP(_, n) {\n        T e; RD(e);\n        v.emplace_back(e);\n    }\n}\n\ntemplate<typename T>\nostream& operator<<(ostream& out, const vector<T>& v) {\n    for(auto first = begin(v), it = first; it != end(v); ++it) {\n        if(it != first)\n            out << ' ';\n        out << *it;\n    }\n    return out;\n}\n\ntemplate<typename T1, typename T2>\nostream& operator<<(ostream& out, const pair<T1,T2>& p) {\n    return out << '(' << p.first << ',' << p.second << ')';\n}\n\nvoid PRINT() {}\n\ntemplate<typename T, typename... TS>\nvoid PRINT(const T& x, const TS& ...args) {\n    cout << x;\n    if(sizeof...(args)) {\n        cout << ' ';\n        PRINT(args...);\n    }\n}\n\ntemplate<typename... TS>\nvoid PRINTLN(const TS& ...args) {\n    PRINT(args...);\n    cout << '\\n';\n}\n\ntemplate<typename T>\nvoid DBG_IMPL(i64 line, const char* expr, const T& value) {\n#ifdef PROCON_LOCAL\n    cerr << \"[L \" << line << \"]: \";\n    cerr << expr << \" = \" << value << \"\\n\";\n#endif\n}\n\n#define DBG(expr) DBG_IMPL(__LINE__, #expr, (expr))\n// }}}\n\n// {{{ init\nstruct ProconInit {\n    static constexpr int IOS_PREC = 15;\n    static constexpr bool AUTOFLUSH = false;\n\n    ProconInit() {\n        cin.tie(nullptr);\n        ios::sync_with_stdio(false);\n        cout << fixed << setprecision(IOS_PREC);\n#ifdef PROCON_LOCAL\n        cerr << fixed << setprecision(IOS_PREC);\n#endif\n        if(AUTOFLUSH)\n            cout << unitbuf;\n    }\n} PROCON_INIT;\n// }}}\n\n//--------------------------------------------------------------------\n\nbool feq(f64 x, f64 y, f64 eps=EPS) {\n    return fabs(x-y) < eps;\n}\n\nstruct Vector {\n    f64 x, y;\n\n    Vector() : Vector(0.0,0.0) {}\n    Vector(f64 xx, f64 yy) : x(xx), y(yy) {}\n\n    Vector& operator+=(const Vector& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n    Vector& operator-=(const Vector& rhs) {\n        x -= rhs.x;\n        y -= rhs.y;\n        return *this;\n    }\n    Vector& operator*=(f64 rhs) {\n        x *= rhs;\n        y *= rhs;\n        return *this;\n    }\n    Vector& operator/=(f64 rhs) {\n        x /= rhs;\n        y /= rhs;\n        return *this;\n    }\n\n    f64 norm() const { return x*x + y*y; }\n    f64 abs() const { return sqrt(norm()); }\n};\n\nconst Vector operator+(const Vector& lhs, const Vector& rhs) { return Vector(lhs) += rhs; }\nconst Vector operator-(const Vector& lhs, const Vector& rhs) { return Vector(lhs) -= rhs; }\nconst Vector operator*(const Vector& lhs, f64 rhs) { return Vector(lhs) *= rhs; }\nconst Vector operator*(f64 lhs, const Vector& rhs) { return Vector(rhs) *= lhs; }\nconst Vector operator/(const Vector& lhs, f64 rhs) { return Vector(lhs) /= rhs; }\n\nbool operator==(const Vector& lhs, const Vector& rhs) {\n    return feq(lhs.x,rhs.x) && feq(lhs.y,rhs.y);\n}\n\nstruct Line {\n    Vector p1, p2;\n\n    Line(const Vector& pp1, const Vector& pp2) : p1(pp1), p2(pp2) {}\n    Line(f64 x1, f64 y1, f64 x2, f64 y2) : p1(Vector(x1,y1)), p2(Vector(x2,y2)) {}\n\n    Vector vec() const { return p2 - p1; }\n};\n\nf64 geo_dot(const Vector& lhs, const Vector& rhs) {\n    return lhs.x*rhs.x + lhs.y*rhs.y;\n}\n\nVector geo_project(const Line& line, const Vector& p) {\n    Vector v = line.vec();\n    f64 r = geo_dot(p-line.p1, v) / v.norm();\n    return line.p1 + r*v;\n}\n\nvoid solve() {\n    f64 x1,y1; RD(x1); RD(y1);\n    f64 x2,y2; RD(x2); RD(y2);\n    Line line(x1,y1,x2,y2);\n\n    i64 Q; RD(Q);\n    REP(_, Q) {\n        f64 x,y; RD(x); RD(y);\n        Vector p(x,y);\n        Vector ans = geo_project(line, p);\n        PRINTLN(ans.x, ans.y);\n    }\n}\n\nsigned main() {\n    \n\n    solve();\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing i64 = int_fast64_t;\n#define rep(i, N) for(int (i) = 0; (i) < (N); (i)++)\n#define all(v) (v).begin(), (v).end()\n#define eb emplace_back\n\nstruct Vector2d {\n    long double x, y;\n    Vector2d(long double x0, long double y0) : x(x0), y(y0) {}\n    long double norm_p2() { return x*x + y*y; }\n    long double inner(Vector2d& v){\n        return x*v.x + y*v.y;\n    }\n    Vector2d proj(Vector2d& v){\n        return (*this)*(this->inner(v) / this->norm_p2());\n    }\n    Vector2d operator+(const Vector2d& v){\n        return Vector2d(this->x + v.x, this->y + v.y);\n    }\n    Vector2d operator-(const Vector2d& v){\n        return Vector2d(this->x - v.x, this->y - v.y);\n    }\n    Vector2d operator*(long double k){\n        return Vector2d(k*this->x, k*this->y);\n    }\n    \n};\n\nint main(){\n    long double x1,y1,x2,y2;\n    int q;\n    cin >> x1 >> y1 >> x2 >> y2 >> q;\n\n    Vector2d A(x2-x1,y2-y1);\n    Vector2d p(x1, y1);\n    for(int i = 0; i < q; i++){\n        long double x3, y3; \n        cin >> x3 >> y3;\n        Vector2d B(x3- x1, y3 - y1);\n\n        Vector2d ans = p + A.proj(B);\n        cout << setprecision(15) << ans.x << \" \" << ans.y << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) for(int i=0;i<(n);i++)\n#define PII pair<int,int>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\tPoint(double X = 0, double Y = 0)\n\t{\n\t\tx = X;\n\t\ty = Y;\n\t}\n\tPoint operator +(const Point &p)const { return Point(x + p.x, y + p.y); };\n\tPoint operator -(const Point &p)const { return Point(x - p.x, y - p.y); };\n\tPoint operator *(const double a)const { return Point(x*a, y*a); };\n\tPoint operator /(const double a)const { return Point(x / a, y / a); };\n\tdouble norm()const { return x*x + y*y; };\n\tdouble length()const { return sqrt(norm()); };\n\tdouble dot(const Point &p)const { return x*p.x + y*p.y; };\n\tdouble cross(const Point &p)const { return x*p.y - y*p.x; };\n\tbool operator ==(const Point &p)const\n\t{\n\t\treturn fabs(x - p.x)<EPS &&fabs(y - p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\n\nclass Segment\n{\npublic:\n\tPoint p1, p2;\n\tSegment(double x1, double y1, double x2, double y2)\n\t{\n\t\tp1.x = x1;\n\t\tp1.y = y1;\n\t\tp2.x = x2;\n\t\tp2.y = y2;\n\t}\n\tbool IsOrthogonal(const Segment &s)\n\t{\n\t\tVector t1 = p2 - p1;\n\t\tVector t2 = s.p2 - s.p1;\n\t\treturn equals(0.0, t1.dot(t2));\n\t}\n\tbool IsParallel(const Segment &s)\n\t{\n\t\tVector t1 = p2 - p1;\n\t\tVector t2 = s.p2 - s.p1;\n\t\treturn equals(0.0, t1.cross(t2));\n\t}\n\tPoint GetProjection(double X, double Y)const\n\t{\n\t\tVector V = p2 - p1;\n\t\tPoint P(X, Y);\n\t\tPoint ret = V*(V.dot(P-p1) / V.norm());\n\t\treturn ret + p1;\n\t}\n};\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point C = Point(), double R = 0)\n\t{\n\t\tc = C;\n\t\tr = R;\n\t}\n};\n\nint main()\n{\n\tdouble x1, y1, x2, y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tSegment s(x1, y1, x2, y2);\n\tint q;\n\tcin >> q;\n\tREP(i, q)\n\t{\n\t\tint x, y;\n\t\tcin >> x>> y;\n\t\tPoint ans=s.GetProjection(x, y);\n\t\tcout << fixed<< setprecision(10) <<ans.x << \" \"<< ans.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <utility>\n#include <cstring>\n#include <iomanip>\n#include <numeric>\n#include <cmath>\n#include <cassert>\n#include <complex>\nusing namespace std;\nusing ll = long long;\nconst int INF = 1<<30;\nconst int MOD = 1e9 + 7;\n\nconst double EPS = 1e-8;\nconst double PI = acos(-1);\ninline bool equals(double a, double b) { return abs(b - a) < EPS; }\nusing Point = complex<double>;\nnamespace std { bool operator < (const Point &a, const Point &b) { return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b); } }\ninline double dot(const Point &a, const Point &b) { return real(a) * real(b) + imag(a) * imag(b); }\ninline double cross(const Point &a, const Point &b) { return real(a) * imag(b) - imag(a) * real(b); }\nstruct Line\n{\n    Point a, b;\n    Line(Point a, Point b) : a(a), b(b) {}\n};\nstruct Segment : Line { Segment(Point a, Point b) : Line(a, b) {} };\nstruct Circle\n{\n    Point p; double r;\n    Circle(Point p, double r) : p(p), r(r) {}\n};\ninline bool isParallel(const Line &a, const Line &b) { return equals(cross(a.b - a.a, b.b - b.a), 0.0); }\ninline bool isOrthogonal(const Line &a, const Line &b) { return equals(dot(a.a - a.b, b.a - b.b), 0.0); }\ntemplate<typename T = Line>\ninline Point getProjection(const T &l, const Point &p)\n{\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\ninline Point getReflection(const Line &l, const Point &p) { return p + (getProjection(l, p) - p) * 2.0; }\ninline int ccw(const Point &a, Point b, Point c)\n{\n    b = b - a, c = c - a;\n    if(cross(b, c) > EPS) return 1;\n    if(cross(b, c) < -EPS) return -1;\n    if(dot(b, c) < 0) return 2;\n    if(norm(b) < norm(c)) return -2;\n    return 0;\n}\ninline bool isIntersect(const Line &l, const Point &p) { return abs(ccw(l.a, l.b, p)) != 1; }\ninline bool isIntersect(const Line &l, const Line &m) { return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS; }\ninline bool isIntersect(const Segment &s, const Point &p) { return ccw(s.a, s.b, p) == 0; }\ninline bool isIntersect(const Line &l, const Segment &s) { return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS; }\ninline bool isIntersect(const Segment &s, const Segment &t) { return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0; }\ninline double getDistance(const Point &a, const Point &b) { return abs(a - b); }\ninline double getDistance(const Line &l, const Point &p) { return abs(p - getProjection(l, p)); }\ninline double getDistance(const Segment &s, const Point &p)\n{\n    Point r = getProjection(s, p);\n    if(isIntersect(s, r)) return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\ninline double getDistance(const Line &l, const Line &m) { return isIntersect(l, m) ? 0 : getDistance(l, m.a); }\ninline double getDistance(const Segment &s1, const Segment &s2)\n{\n    if(isIntersect(s1, s2)) return 0;\n    return min({getDistance(s1, s2.a), getDistance(s1, s2.b), getDistance(s2, s1.a), getDistance(s2, s1.b)});\n}\ninline double getDistance(const Line &l, const Segment &s)\n{\n    if(isIntersect(l, s)) return 0;\n    return min(getDistance(l, s.a), getDistance(l, s.b));\n}\ninline bool isIntersect(const Circle &c, const Line &l) { return getDistance(l, c.p) <= c.r + EPS; }\ninline bool isIntersect(const Circle &c, const Point &p) { return abs(abs(p - c.p) - c.r) < EPS; }\ninline Point getCrossPoint(const Line &l, const Line &m)\n{\n    double a = cross(l.b - l.a, m.b - m.a), b = cross(l.b - l.a, l.b - m.a);\n    if(equals(abs(a), 0.0) and equals(abs(b), 0.0)) return m.a;\n    return m.a + (m.b - m.a) * b / a;\n}\ninline Point getCrossPoint(const Segment &l, const Segment &m) { return getCrossPoint(Line(l), Line(m)); }\n\nsigned main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(8);\n    double x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;\n    Line L = Line(Point(x1, y1), Point(x2, y2));\n    Segment S = Segment(Point(x1, y1), Point(x2, y2));\n    int q; cin >> q;\n    while(q--)\n    {\n        double x, y; cin >> x >> y;\n        Point res = getProjection(L, Point(x, y));\n        cout << res.real() << \" \" << res.imag() << endl;\n    }\n    return 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <cmath>\n#include <cstdio>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n\nVector projection(const Segment& s, const Point& p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\nint main() {\n    using namespace std;\n\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Segment s{p1, p2};\n\n    int q;\n    cin >> q;\n    vector<Point> points;\n    for (int i = 0; i < q; ++i) {\n        Point p;\n        cin >> p.x >> p.y;\n        points.push_back(p);\n    }\n    for (auto& p : points) {\n        auto x = projection(s, p);\n        cout << setprecision(10) << x.x << \" \" << x.y << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace::std;\nstruct __INIT{__INIT(){cin.tie(0);ios::sync_with_stdio(false);cout<<fixed<<setprecision(15);}} __init;\n#define endl \"\\n\"\n#include <boost/multiprecision/cpp_dec_float.hpp>\n#include <boost/multiprecision/cpp_int.hpp>\n#include <boost/numeric/interval.hpp>\n#include <boost/numeric/interval/io.hpp>\n#include <boost/any.hpp>\nusing namespace::std;\nnamespace mp = boost::multiprecision;\ntypedef mp::number<mp::cpp_dec_float<32,int64_t>> cfloat;\ntypedef mp::cpp_int cint;\ntypedef long long lint;\ntypedef long long ll;\ntypedef long double ldouble;\ntypedef vector<lint> vec;\ntypedef vector<vector<lint>> mat;\ntypedef vector<vector<vector<lint>>> mat3;\ntypedef vector<double> dvec;\ntypedef vector<vector<double>> dmat;\ntypedef vector<vector<vector<double>>> dmat3;\ntypedef vector<string> svec;\ntypedef vector<vector<string>> smat;\ntypedef vector<vector<vector<string>>> smat3;\ntypedef vector<pair<lint,lint>> pvec;\ntypedef vector<vector<pair<lint,lint>>> pmat;\ntypedef vector<vector<vector<pair<lint,lint>>>> pmat3;\n#define rep(i, n) for(lint i = 0; i < (lint)(n); i++)\n#define irep(i) for(lint i = 0;; i++)\n#define irep1(i) for(lint i = 1;; i++)\n#define irep2(i) for(lint i = 2;; i++)\n#define rrep(i, n) for(lint i = (lint)(n-1); i >-1; i--)\n#define rrepi(i,a,b) for(lint i = (lint)(b-1); i >a-1; i--)\n#define repi(i,a,b) for(lint i=lint(a);i<lint(b);i++)\n#define rep2(i,a,b,c) for(lint i=lint(a);i>lint(b);i+=c)\n#define all(x) (x).begin(),(x).end()\n#define PI 3.141592653589793\n#define dist(x1,y1,x2,y2) (pow(pow(x2-x1,2)+pow(y2-y1,2),0.5))\n#define output(v) do{bool f=0;for(auto i:v){cout<<(f?\" \":\"\");if(i>INF/2)cout<<\"INF\";else cout<<i;f=1;}cout<<\"\\n\";}while(0)\n#define output2(v) for(auto j:v)output(j);\n#define input(a,n) lint n;cin>>n;vector<lint>a(n);rep(i,n)cin>>a[i];\n#define SUM(v) accumulate(all(v),0LL)\n#define INF (1LL<<60)\n#define IINF (1<<30)\n#define LINF 9223372036854775807\n#define MOD 1000000007\nstruct any{\n    string s;\n    any(string s):s(s){}\n    operator lint()const{return stoll(s);}\n    operator double()const{return stod(s);}\n    operator string()const{return s;}\n};\nany in(void){\n    return any(*istream_iterator<string>(cin));\n}\ninline lint gcd(lint a,lint b){return b?gcd(b,a%b):a;}\ninline lint lcm(lint a,lint b){return a*b/gcd(a,b);}\ninline bool chmin(auto& s,const auto& t){bool res=s>t;s=min(s,t);return res;}\ninline bool chmax(auto& s,const auto& t){bool res=s<t;s=max(s,t);return res;}\ninline lint mex(vector<lint> s){\n    lint res=0;\n    sort(all(s));\n    while(binary_search(all(s),res))res++;\n    return res;\n}\nvector<lint> dx={-1,1,0,0,1,1,-1,-1};\nvector<lint> dy={0,0,-1,1,1,-1,1,-1};\n\nint main(){\n    complex<double>a{in(),in()},b{in(),in()},c,ans;\n    lint n;\n    cin>>n;\n    rep(i,n){\n        c={in(),in()};\n        ans=a+((b-a)*conj(c-a)).real()/conj(b-a);\n        cout<<ans.real()<<\" \"<<ans.imag()<<endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#define N 1000\ntypedef std::complex<double> point;\ndouble InnerProd(point x,point y);\npoint Projection(point x,point y);\nint main(){\n        point ans,p1,p2;\n        int q;\n    double x1,x2,y1,y2;\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n        p1=point(x1,y1);\n        p2=point(x2,y2);\n        scanf(\"%d\",&q);\n        for(int i=0;i<q;i++){\n                scanf(\"%lf%lf\",&x1,&y1);\n                ans=p1+Projection(point(x1,y1)-p1,p2-p1);\n                printf(\"%lf %lf\\n\",ans.real(),ans.imag());\n        }\n\n        return 0;\n}\ndouble InnerProd(point x,point y){\n        return ((std::conj(x)*y).real());\n}\n\n/*x??????y???????°???±*/\npoint Projection(point x,point y){\n        return (y*InnerProd(x,y)/std::norm(y));\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\nusing namespace std;\ntypedef long long ll;\nll read()\n{\n\tll x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nstruct Point{double x,y;}p1,p2,p;\nPoint operator +(Point a,Point b){return (Point){a.x+b.x,a.y+b.y};}\nPoint operator -(Point a,Point b){return (Point){a.x-b.x,a.y-b.y};}\nPoint operator *(Point a,double b){return (Point){a.x*b,a.y*b};}\ndouble dot(Point a,Point b){return a.x*b.x+a.y*b.y;}\ndouble norm(Point a){return a.x*a.x+a.y*a.y;}\nvoid read(Point &x){x.x=read();x.y=read();}\nvoid print(Point x){printf(\"%.10lf %.10lf\\n\",x.x,x.y);}\nPoint Project(Point p1,Point p2,Point p)\n{\n\tPoint base=p2-p1,hypo=p-p1;\n\tdouble r=dot(hypo,base)/norm(base);\n\treturn p1+base*r;\n}\nint main()\n{\n\tread(p1);read(p2);\n\tint q=read();while(q--)\n\t\tread(p),print(Project(p1,p2,p));\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <map>\n#include <set>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <bitset>\n#include <climits>\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define FOR(i,a,b) for (int i=(a);i<(b);i++)\n#define RREP(i,n) for (int i=(n)-1;i>=0;i--)\n#define RFOR(i,a,b) for (int i=(a)-1;i>=(b);i--)\n#define ll long long\n#define ull unsigned long long\nint dx[4] = {1, 0, -1, 0};\nint dy[4] = {0, 1, 0, -1};\nconst int INF = 1e9;\nconst int MOD = 1e9 + 7;\n\nusing namespace std;\n\n#include <vector>\n#include <cmath>\n#include <cstring>\n\nconst double EPS = 1e-10;\n#define equals(a,b) (fabs((a) - (b)) < EPS)\nstruct Point{\n\tdouble x,y;\n\tPoint(double x = 0.0,double y =0.0):x(x),y(y){}\n\tPoint operator + (const Point& p){ return Point(x+p.x,y+p.y);\t}\n\tPoint operator - (const Point& p){ return Point(x-p.x,y-p.y); }\n\tPoint operator * (double k){ return Point(x*k,y*k);\t}\n\tPoint operator / (double k){ return Point(x/k,y/k); }\n\n\tdouble norm(){return x*x+y*y;}\n\tdouble abs(){return sqrt(norm());}\n\n\tbool operator < (const Point& p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x) < EPS && fabs(y-p.y) < EPS;\n\t}\n};\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(Point p1,Point p2):p1(p1),p2(p2){}\n};\n\ntypedef Segment Line;\nclass Circle{\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0): c(c),r(r){}\n};\ntypedef vector<Point> Polygon;\n\nbool isOrthgonal(Vector a, Vector b){\n\treturn equals(dot(a,b),0.0);\n}\n\nbool isOrthgonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthgonal(a1-a2,b1-b2);\n}\n\nbool isOrthgonal(Segment s1, Segment s2){\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n\treturn equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1, Segment s2){\n\treturn equals(cross(s1.p2 - s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p-s.p1,base)/base.norm();\n\treturn s.p1 + base * r;\n}\n\n\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n\tint a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\tSegment s(Point(a,b),Point(c,d));\n\tint q;cin>>q;\n\twhile(q--){\n\t\tint x,y;cin>>x>>y;\n\t\tPoint ans = project(s,Point(x,y));\n\t\tcout << fixed << setprecision(8) << ans.x << ' ' << ans.y << endl;\n\t}\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\nusing namespace std;\ndouble distance(double x1, double y1, double x2, double y2) {\n    return sqrt(pow(x2 - x1, 2) + pow(y2 - y1,2));\n}\nint main(void){\n    // Here your code !\n    int x1, y1, x2, y2;\n    double xa, ya;\n    cin >> x1 >> y1 >> x2 >> y2;\n    int n;\n    cin >> n;\n    int x[n], y[n];\n    double cos;\n    for(int i=0;i<n;i++) {\n        cin >> x[i] >> y[i];\n        cos = (pow(distance(x[i], y[i], x1, y1), 2) + pow(distance(x2, y2, x1, y1), 2) - pow(distance(x[i], y[i], x2, y2), 2)) / (2 * distance(x[i], y[i], x1, y1) * distance(x1, y1, x2, y2));\n        xa = x1 + (x2 - x1) * (distance(x1, y1, x[i], y[i]) * cos) / (distance(x1, y1, x2, y2));\n        ya = y1 + (y2 - y1) * (distance(x1, y1, x[i], y[i]) * cos) / (distance(x1, y1, x2, y2));\n        cout << fixed\n             << setprecision(10)\n             << xa\n             << \" \"\n             << ya << endl;\n    }\n    \n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define INTMAX 2147483647LL\n#define PII pair<int,int>\n#define MK make_pair\n#define re register\n#define Eps (1e-10)\n#define Equal(a,b) (fabs((a)-(b))<Eps)\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\nconst double Pi=acos(-1.0);\nconst int Inf=0x3f3f3f3f;\n\ninline int read(){\n\tre int x=0,f=1,ch=getchar();\n\twhile(!isdigit(ch))f=ch=='-'?-1:1,ch=getchar();\n\twhile(isdigit(ch))x=x*10+ch-48,ch=getchar();\n\treturn x*f;\n}\ninline ll readll(){\n\tre ll x=0,f=1,ch=getchar();\n\twhile(!isdigit(ch))f=ch=='-'?-1:1,ch=getchar();\n\twhile(isdigit(ch))x=x*10+ch-48,ch=getchar();\n\treturn x*f;\n}\n\nstruct Point{\n\tdb x,y;\n\tPoint(){}\n\tPoint(db xx,db yy):x(xx),y(yy){}\n\tinline Point operator +(const Point &p){return Point(x+p.x,y+p.y);}\n\tinline Point operator -(const Point &p){return Point(x-p.x,y-p.y);}\n\tinline Point operator *(const db &k){return Point(x*k,y*k);}\n\tinline Point operator /(const db &k){return Point(x/k,y/k);}\n\tinline db Norm(){return x*x+y*y;}\n\tinline db abs(){return sqrt(Norm());}\n\tinline bool operator <(const Point &p)const{return x!=p.x?x<p.x:y<p.y;}\n\tinline bool operator ==(const Point &p)const{return fabs(x-p.x)<Eps&&fabs(y-p.y)<Eps;}\n}; \n\ntypedef Point Vector;\ntypedef vector<Point> Poly;\n\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\ndouble norm(Vector a){\n  return a.x*a.x+a.y*a.y;\n}\nstruct Segment{\n\tPoint p1,p2;\n\tSegment(){}\n\tSegment(Point p1_,Point p2_):p1(p1_),p2(p2_){}\n};\ntypedef Segment Line;\nPoint Project(Segment s,Point p){\n\tVector bse=s.p2-s.p1;\n\tdouble res=dot(p-s.p1,bse)/norm(bse);\n\treturn s.p1+bse*res;\n}\nint q;\nint x,y,xx,yy;\n\nint main(){\n\tx=read();y=read();xx=read();yy=read();q=read();\n\tLine bse=Line(Point(x,y),Point(xx,yy));\n\twhile(q--){\n\t\tx=read();y=read();\n\t\tPoint p=Project(bse,Point(x,y));\n\t\tprintf(\"%.8lf %.8lf\\n\",p.x,p.y);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <climits>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <functional>\n#include <iostream>\n#include <limits>\n#include <list>\n#include <numeric>\n#include <queue>\n#include <sstream>\n#include <string>\n#include <tuple>\n#include <type_traits>\n#include <utility>\n#include <vector>\n\n#define REP(i, n) for(int i = 0, i##_MACRO = (n); i < i##_MACRO; i++)\n#define RANGE(i, a, b) for(int i = (a), i##_MACRO = (b); i < i##_MACRO; i++)\n#define EACH(e, a) for(auto&& e : a)\n#define ALL(a) (a).begin(), (a).end()\n#define AALL(a, n) (a), ((a) + (n))\n#define FILL(a, n) memset((a), n, sizeof(a))\n#define FILLZ(a) FILL(a, 0)\n#define MODNUM (static_cast<int>(1e9 + 7))\n#define MOD(x) ((x) % MODNUM)\n\nusing namespace std;\n\nusing ll = long long;\nusing VI = vector<int>;\nusing VI2D = vector<vector<int>>;\n\nconst int INF = 2e9;\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\n\nconst int dx[] = {-1, 0, 1, 0};\nconst int dy[] = {0, -1, 0, 1};\n\ntemplate <typename T>\nint sign(T x) {\n\treturn x < 0 ? -1 : x > 0 ? 1 : 0;\n}\n\ntemplate <>\nint sign(double x) {\n\treturn x < -EPS ? -1 : x > EPS ? 1 : 0;\n}\n\ntemplate <typename T>\nT square(T x) {\n\treturn x * x;\n}\n\ninline int toInt(string s) {\n\tint v;\n\tistringstream sin(s);\n\tsin >> v;\n\treturn v;\n}\n\ndouble deg_to_rad(double deg) {\n\treturn PI * deg / 180.0;\n}\n\ndouble rad_to_deg(double rad) {\n\treturn rad * 180 / PI;\n}\n\nclass Vec2d {\n\tdouble _x;\n\tdouble _y;\n\n\tpublic:\n\tstatic Vec2d origin() { return Vec2d(0.0, 0.0); }\n\tstatic Vec2d zero() { return Vec2d::origin(); }\n\n\tVec2d(double a, double b) : _x(a), _y(b) {}\n\n\tdouble x() const { return this->_x; }\n\tdouble y() const { return this->_y; }\n\n\tdouble det(const Vec2d& rhs) const {\n\t\treturn this->x() * rhs.y() - this->y() * rhs.x();\n\t}\n\tdouble dot(const Vec2d& rhs) const {\n\t\treturn this->x() * rhs.x() + this->y() * rhs.y();\n\t}\n\tdouble length() const { return this->distance(Vec2d::origin()); }\n\tdouble distance(const Vec2d& rhs) const {\n\t\treturn sqrt(square(this->x() - rhs.x()) + square(this->y() - rhs.y()));\n\t}\n\tdouble manhattan_distance(const Vec2d& rhs) const {\n\t\treturn abs(this->x() - rhs.x()) + abs(this->y() - rhs.y());\n\t}\n\tdouble argument() const { return atan2(this->y(), this->x()); }\n\tVec2d rotate(double rad) const {\n\t\tdouble xx = this->x();\n\t\tdouble yy = this->y();\n\t\treturn Vec2d(xx * cos(rad) - yy * sin(rad),\n\t\t\t\t\t xx * sin(rad) + yy * cos(rad));\n\t}\n\tVec2d unit() const {\n\t\tdouble len = this->length();\n\t\treturn Vec2d(this->x() / len, this->y() / len);\n\t}\n\tVec2d normal() const {\n\t\tdouble len = this->length();\n\t\treturn Vec2d(this->y() / len, -this->x() / len);\n\t}\n\n\tbool is_parallel(const Vec2d& rhs) const { return false; }\n\n\tVec2d operator+() const { return *this; }\n\tVec2d operator+(const Vec2d& rhs) const {\n\t\treturn Vec2d(this->x() + rhs.x(), this->y() + rhs.y());\n\t}\n\tVec2d operator-() const { return Vec2d(-this->x(), -this->y()); }\n\tVec2d operator-(const Vec2d& rhs) const {\n\t\treturn Vec2d(this->x() - rhs.x(), this->y() - rhs.y());\n\t}\n\tVec2d operator*(const double rhs) const {\n\t\treturn Vec2d(this->x() * rhs, this->y() * rhs);\n\t}\n\tVec2d operator/(const double rhs) const {\n\t\treturn Vec2d(this->x() / rhs, this->y() / rhs);\n\t}\n\tbool operator<(const Vec2d& rhs) const {\n\t\treturn sign(this->x()) ? this->y() < rhs.y() : this->x() < rhs.x();\n\t}\n\n\tprivate:\n};\n\n// 点の進行方向\nint ccw(Vec2d a, Vec2d b, Vec2d c) {\n\tVec2d ab = b - a;\n\tVec2d ac = c - a;\n\tint det = ab.det(ac);\n\tif(det > 0) {\n\t\treturn 1; // 反時計回り\n\t}\n\tif(det < 0) {\n\t\treturn -1; // 時計回り\n\t}\n\tif(ab.dot(ac) < 0) {\n\t\treturn 2; // c-a-b\n\t}\n\tif(ab.normal() < ac.normal()) {\n\t\treturn -2; // a-b-c\n\t}\n\treturn 0; // a-c-b\n}\n\n// 垂線の足\nVec2d projection(const Vec2d f, const Vec2d t, const Vec2d p) {\n\tVec2d line = t - f;\n\tdouble arg = line.argument();\n\tdouble height = f.rotate(-arg).y();\n\treturn Vec2d(p.rotate(-arg).x(), height).rotate(arg);\n}\n\nclass Circle {\n\tVec2d _center;\n\tdouble _radius;\n\n\tpublic:\n\tCircle(const Vec2d c, const double r) : _center(c), _radius(r) {}\n\n\tVec2d center() { return this->_center; }\n\tdouble radius() { return this->_radius; }\n\n\tint inside(const Vec2d v) {\n\t\treturn sign((v - this->center()).length() -\n\t\t\t\t\tthis->radius()); // inside: 1, online: 0, outside: -1\n\t}\n};\n\nint main() {\n\tdouble p[1000][2];\n\tscanf(\"%lf %lf %lf %lf\", &p[0][0], &p[0][1], &p[1][0], &p[1][1]);\n\tVec2d a(p[0][0], p[0][1]), b(p[1][0], p[1][1]);\n\tint q;\n\tscanf(\"%d\", &q);\n\tREP(i, q) { scanf(\"%lf %lf\", &p[i][0], &p[i][1]); }\n\n\tREP(i, q) {\n\t\tVec2d t = projection(a, b, Vec2d(p[i][0], p[i][1]));\n\t\tprintf(\"%.9f %.9f\\n\", t.x(), t.y());\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>           // printf(), scanf()\n#include <cstdlib>          // abs()\n\nstatic const double EPS = 1e-10;\n\ndouble\nadd(double a, double b)\n{\n\tif (abs(a + b) < EPS * (abs(a) + abs(b)))\n\t\treturn 0;\n\n\treturn a + b;\n}\n\nclass Point\n{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0): x(x), y(y) {}\n\tPoint operator + (Point p) { return Point(add(x, p.x), add(y, p.y)); }\n\tPoint operator - (Point p) { return Point(add(x, -p.x), add(y, -p.y)); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n};\n\nstruct Segment\n{\n\tPoint p1, p2;\n};\n\ntypedef Point Vector;\ntypedef Segment Line;\n\ndouble\nnorm(Vector a)\n{\n\treturn add(a.x * a.x, a.y * a.y);\n}\n\ndouble\ndot(Vector a, Vector b)\n{\n\treturn add(a.x * b.x, a.y * b.y);\n}\n\nPoint\nproject(Segment s, Point p)\n{\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\n\nint\nmain(int argc, char** argv)\n{\n\tSegment s;\n\tPoint p, a;\n\tint q;\n\tint x, y;\n\tint x1, y1, x2, y2;\n\tint i;\n\n\tscanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n\ts.p1.x = x1, s.p1.y = y1;\n\ts.p2.x = x2, s.p2.y = y2;\n\n\tscanf(\"%d\", &q);\n\tfor (i = 0; i < q; ++i)\n\t{\n\t\tscanf(\"%d %d\", &x, &y);\n\t\tp.x = x, p.y = y;\n\n\t\ta = project(s, p);\n\t\tprintf(\"%.10f %.10f\\n\", a.x, a.y);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <sstream>\n#include <string.h>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <utility>\n#include <set>\n#include <cctype>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <deque>\n#include <limits>\n#include <iomanip>\n#include <ctype.h>\n#include <unordered_map>\n#include <random>\n#include <numeric>\n#include <iostream>\n#include <array>\n\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <math.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ll, double> pld;\ntypedef pair<double, double> pdd;\ntypedef pair<double, ll> pdl;\ntypedef pair<int, char> pic;\ntypedef vector<ll> vl;\ntypedef vector<int> vi;\ntypedef priority_queue<ll, vector<ll>, greater<ll>> llgreaterq;\ntypedef priority_queue<pll, vector<pll>, greater<pll>> pllgreaterq;\ntypedef priority_queue<pair<ll, pll>, vector<pair<ll, pll>>, greater<pair<ll, pll>>> plpllgreaterq;\ntypedef priority_queue<vi, vector<vi>, greater<vi>> vigreaterq;\ntypedef priority_queue<vl, vector<vl>, greater<vl >> vlgreaterq;\nint dx[] = { -1,0,1,0 };\nint dy[] = { 0,-1,0,1 };\n#define bit(x,v) ((ll)x << v)\n#define rep(x,n) for(ll x = 0;x < n;x++)\n#define rep2(x,f,v) for(ll x=f;x<v;x++)\n#define repe(v,x) for(auto v : x)\n// 許容する誤差ε\n#define EPS (1e-10)\n// 2つのスカラーが等しいかどうか\n#define EQ(a,b) (std::abs(a-b) < EPS)\n// 2つのベクトルが等しいかどうか\n#define EQV(a,b) ( EQ((a).real(), (b).real()) && EQ((a).imag(), (b).imag()) )\n#define all(a) a.begin(),a.end()\n#define all0(a) memset(a,0,sizeof(a))\n#define allm1(a) memset(a,-1,sizeof(a))\n#define put_float(v) \tcout << fixed << setprecision(10); \\\n\t\t\t\t\t\tcout << v << endl\n#define vinsert(v,p,x) v.insert(v.begin() + p,x)\n#define vsort(v) sort(all(v));\n#define dup(v) v.erase(unique(all(v)),v.end())\n#define ion(i,j) ((i & (1LL << j)) > 0)\n#define next(i) i++;i%=2\n#define Len size()\n#define ull unsignd long long\n#define psp(a,b) push_back(make_pair(a,b))\n#define psp2(a,b) push(make_pair(a,b))\n#define cini(a) a; cin >> a\n#define infa(a,b) (a + b) % INF\n#define infm(a,b) (a * b) % INF\n#define infd(a,b) (a * modinv(b)) % INF\n#define infs(a,b) (a + INF - b) % INF\n#define inf(a) (a) %= INF\n#define inff(a) (a) % INF\nconst ll INF = 1000000007;\nconst int MAX = 2000010;\nconst int MOD = 1000000007;\n\nlong long fac[MAX], finv[MAX], inv[MAX];\nvoid COMinit() {\n\tfac[0] = fac[1] = 1;\n\tfinv[0] = finv[1] = 1;\n\tinv[1] = 1;\n\tfor (int i = 2; i < MAX; i++) {\n\t\tfac[i] = fac[i - 1] * i % MOD;\n\t\tinv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;\n\t\tfinv[i] = finv[i - 1] * inv[i] % MOD;\n\t}\n}\n\n// 二項係数計算\nlong long COM(int n, int k) {\n\tif (n < k) return 0;\n\tif (n < 0 || k < 0) return 0;\n\treturn fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;\n}\n\nll getpow(ll b, ll x, ll md) {\n\tll t = b;\n\tll res = 1;\n\twhile (x > 0)\n\t{\n\t\tif (x & 1) {\n\t\t\tres *= t;\n\t\t\tres %= md;\n\t\t}\n\t\tx >>= 1;\n\t\tt *= t;\n\t\tt %= md;\n\t}\n\treturn res;\n}\nll getpow(ll b, ll x) {\n\n\treturn getpow(b, x, INF);\n}\nll modinv(ll x) {\n\treturn getpow(x, INF - 2);\n}\nll gcd(ll a, ll b) {\n\tif (b == 0) return a;\n\treturn gcd(b, a % b);\n}\nint pr[100010];\nint lank[100010];\nvoid uini(int n) {\n\tfor (size_t i = 0; i <= n; i++)\n\t{\n\t\tpr[i] = i;\n\t\tlank[i] = 1;\n\t}\n}\n\nint parent(int x) {\n\tif (x == pr[x]) return x;\n\treturn pr[x] = parent(pr[x]);\n}\n\nint same(int x, int y) {\n\treturn parent(x) == parent(y);\n}\n\nbool unit(int x, int y) {\n\n\tint px = parent(x);\n\tint py = parent(y);\n\n\tif (px == py) return false;\n\tif (lank[py] < lank[px]) {\n\t\tpr[py] = px;\n\t\tlank[px] += lank[py];\n\t}\n\telse {\n\t\tpr[px] = py;\n\t\tlank[py] += lank[px];\n\t}\n\treturn true;\n}\n\nll merge(ll* a, int left, int mid, int right) {\n\tll n1 = mid - left;\n\tll n2 = right - mid;\n\tvector<int> L(n1 + 1);\n\tvector<int> R(n2 + 1);\n\tfor (size_t i = 0; i < n1; i++)\n\t{\n\t\tL[i] = a[left + i];\n\t}\n\tfor (size_t i = 0; i < n2; i++)\n\t{\n\t\tR[i] = a[mid + i];\n\t}\n\n\tL[n1] = INF;\n\tR[n2] = INF;\n\tll i = 0;\n\tll j = 0;\n\tll r = 0;\n\tfor (size_t k = left; k < right; k++)\n\t{\n\t\tif (L[i] <= R[j]) {\n\t\t\ta[k] = L[i];\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\ta[k] = R[j];\n\t\t\tr += n1 - i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn r;\n}\nll merge2(pair<int, char>* a, int left, int mid, int right) {\n\tll n1 = mid - left;\n\tll n2 = right - mid;\n\tvector<pair<int, char>> L(n1 + 1);\n\tvector<pair<int, char>> R(n2 + 1);\n\tfor (size_t i = 0; i < n1; i++)\n\t{\n\t\tL[i] = a[left + i];\n\t}\n\tfor (size_t i = 0; i < n2; i++)\n\t{\n\t\tR[i] = a[mid + i];\n\t}\n\n\tL[n1] = make_pair(INF, ' ');\n\tR[n2] = make_pair(INF, ' ');\n\tll i = 0;\n\tll j = 0;\n\tll r = 0;\n\tfor (size_t k = left; k < right; k++)\n\t{\n\t\tif (L[i].first <= R[j].first) {\n\t\t\ta[k] = L[i];\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\ta[k] = R[j];\n\t\t\tr += n1 - i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn r;\n}\nll mergeSort2(pair<int, char>* a, int left, int right) {\n\tll res = 0;\n\tif (left + 1 < right) {\n\t\tint mid = (left + right) / 2;\n\t\tres = mergeSort2(a, left, mid);\n\t\tres += mergeSort2(a, mid, right);\n\t\tres += merge2(a, left, mid, right);\n\t}\n\treturn res;\n}\nll mergeSort(ll* a, int left, int right) {\n\tll res = 0;\n\tif (left + 1 < right) {\n\t\tint mid = (left + right) / 2;\n\t\tres = mergeSort(a, left, mid);\n\t\tres += mergeSort(a, mid, right);\n\t\tres += merge(a, left, mid, right);\n\t}\n\treturn res;\n}\nint partition(pair<int, char>* a, int p, int r) {\n\tpair<int, char> x = a[r];\n\tint i = p - 1;\n\tfor (size_t j = p; j < r; j++)\n\t{\n\t\tif (a[j].first <= x.first) {\n\t\t\ti++;\n\t\t\tswap(a[i], a[j]);\n\t\t}\n\t}\n\tswap(a[i + 1], a[r]);\n\treturn i + 1;\n}\nvoid quick(pair<int, char>* a, int p, int r) {\n\tif (p < r) {\n\t\tint q = partition(a, p, r);\n\t\tquick(a, p, q - 1);\n\t\tquick(a, q + 1, r);\n\t}\n}\n\nll n;\nint ci = 0;\nll P[1000010];\nstruct Node {\n\tint key;\n\tint priority;\n\tNode* parent, * left, * right;\n\tNode(int key, int priority);\n\tNode() {}\n};\nNode NIL;\nNode::Node(int key, int priority) : key(key), priority(priority) {\n\tleft = &NIL;\n\tright = &NIL;\n}\nNode* root = new Node();\nvoid cenrec(Node* k) {\n\tif (k->key == NIL.key) return;\n\tcenrec(k->left);\n\tcout << \" \" << k->key;\n\tcenrec(k->right);\n}\nvoid fastrec(Node* k)\n{\n\tif (k->key == NIL.key) return;\n\tcout << \" \" << k->key;\n\tfastrec(k->left);\n\tfastrec(k->right);\n}\nvoid insert(Node* v) {\n\tNode* y = &NIL;\n\tNode* x = root;\n\twhile (x->key != NIL.key)\n\t{\n\t\ty = x;\n\t\tif (v->key < x->key) {\n\t\t\tx = x->left;\n\t\t}\n\t\telse {\n\t\t\tx = x->right;\n\t\t}\n\t}\n\tv->parent = y;\n\tif (y->key == NIL.key) {\n\t\troot = v;\n\t}\n\telse if (v->key < y->key) {\n\t\ty->left = v;\n\t}\n\telse {\n\t\ty->right = v;\n\t}\n\n}\n\nNode* find(Node* k, ll v)\n{\n\tif (k->key == NIL.key) return &NIL;\n\tif (k->key == v) return k;\n\tif (v < k->key) return find(k->left, v);\n\treturn find(k->right, v);\n}\nvoid delp12(Node* x) {\n\tif (x->key == NIL.key)  return;\n\tNode* l = x->left;\n\tNode* r = x->right;\n\tNode* pr = x->parent;\n\n\tif (l->key == NIL.key\n\t\t&& r->key == NIL.key) {\n\t\tif (pr->left == x) {\n\t\t\tpr->left = &NIL;\n\t\t}\n\t\telse pr->right = &NIL;\n\t}\n\telse if (l->key != NIL.key) {\n\t\tif (pr->left == x) {\n\t\t\tpr->left = l;\n\t\t}\n\t\telse pr->right = l;\n\t\tl->parent = pr;\n\t}\n\telse if (r->key != NIL.key) {\n\t\tif (pr->left == x) {\n\t\t\tpr->left = r;\n\t\t}\n\t\telse pr->right = r;\n\t\tr->parent = pr;\n\t}\n}\nNode* get_next(Node* k) {\n\tif (k->key == NIL.key) return &NIL;\n\tNode* res = get_next(k->left);\n\tif (res->key != NIL.key) return res;\n\treturn k;\n}\nvoid del(Node* x) {\n\n\tif (x->key == NIL.key) return;\n\tNode* l = x->left;\n\tNode* r = x->right;\n\tNode* pr = x->parent;\n\n\tif (l->key != NIL.key && r->key != NIL.key) {\n\t\tNode* nex = get_next(r);\n\t\tx->key = nex->key;\n\t\tdelp12(nex);\n\t}\n\telse {\n\t\tdelp12(x);\n\t}\n}\nNode* rightRotate(Node* t) {\n\tNode* s = t->left;\n\tt->left = s->right;\n\ts->right = t;\n\treturn s;\n}\nNode* leftRotate(Node* t) {\n\tNode* s = t->right;\n\tt->right = s->left;\n\ts->left = t;\n\treturn s;\n}\nNode* _insert(Node* t, int key, int priority) {\n\tif (t->key == NIL.key) {\n\t\treturn new Node(key, priority);\n\t}\n\tif (key == t->key) {\n\t\treturn t;\n\t}\n\n\tif (key < t->key) {\n\t\tt->left = _insert(t->left, key, priority);\n\t\tif (t->priority < t->left->priority) {\n\t\t\tt = rightRotate(t);\n\t\t}\n\t}\n\telse {\n\t\tt->right = _insert(t->right, key, priority);\n\t\tif (t->priority < t->right->priority) {\n\t\t\tt = leftRotate(t);\n\t\t}\n\t}\n\treturn t;\n}\nNode* delete1(Node* t, int key);\nNode* _delete(Node* t, int key) {\n\tif (t->left->key == NIL.key && t->right->key == NIL.key) {\n\t\treturn &NIL;\n\t}\n\telse if (t->left->key == NIL.key) {\n\t\tt = leftRotate(t);\n\t}\n\telse if (t->right->key == NIL.key) {\n\t\tt = rightRotate(t);\n\t}\n\telse\n\t{\n\t\tif (t->left->priority > t->right->priority) {\n\t\t\tt = rightRotate(t);\n\t\t}\n\t\telse\n\t\t\tt = leftRotate(t);\n\t}\n\treturn delete1(t, key);\n}\nNode* delete1(Node* t, int key) {\n\tif (t->key == NIL.key) {\n\t\treturn &NIL;\n\t}\n\tif (key < t->key) {\n\t\tt->left = delete1(t->left, key);\n\t}\n\telse if (key > t->key) {\n\t\tt->right = delete1(t->right, key);\n\t}\n\telse return _delete(t, key);\n\treturn t;\n}\nint H;\nint left(int i) {\n\treturn i * 2 + 1;\n}\nint right(int i) {\n\treturn i * 2 + 2;\n}\nstruct edge {\n\tint from, to;\n\tll val;\n\tedge(int from, int to, ll val) : from(from), to(to), val(val) {}\n};\nll k;\nint _rank[1010];\nint temp[1010];\nbool compare_sa(int i, int j) {\n\tif (_rank[i] != _rank[j]) return _rank[i] < _rank[j];\n\telse {\n\t\tint ri = i + k <= n ? _rank[i + k] : -1;\n\t\tint rj = j + k <= n ? _rank[j + k] : -1;\n\t\treturn ri < rj;\n\t}\n}\nvoid construct_sa(string S, int* sa) {\n\tn = S.length();\n\n\tfor (size_t i = 0; i <= n; i++)\n\t{\n\t\tsa[i] = i;\n\t\t_rank[i] = i < n ? S[i] : -1;\n\t}\n\n\tfor (k = 1; k <= n; k *= 2)\n\t{\n\t\tsort(sa, sa + n + 1, compare_sa);\n\n\t\t// saはソート後の接尾辞の並びになっている、rankは元の位置のindexを保持したまま、更新されている。\n\t\t// ピンとこなかった部分\n\t\ttemp[sa[0]] = 0;\n\t\tfor (size_t i = 1; i <= n; i++)\n\t\t{\n\t\t\ttemp[sa[i]] = temp[sa[i - 1]] + (compare_sa(sa[i - 1], sa[i]) ? 1 : 0);\n\t\t}\n\t\tfor (size_t i = 0; i <= n; i++)\n\t\t{\n\t\t\t_rank[i] = temp[i];\n\t\t}\n\t}\n}\nbool contain(string S, int* sa, string T) {\n\tint a = 0, b = S.length();\n\t// sa は 接尾辞が辞書順に並んでいる、入っているのはその位置のインデックス\n\twhile (b - a > 1) {\n\t\tint c = (a + b) / 2;\n\t\tif (S.compare(sa[c], T.length(), T) < 0) a = c;\n\t\telse b = c;\n\t}\n\treturn S.compare(sa[b], T.length(), T) == 0;\n}\n\n\n#define bit(x,v) ((ll)x << v)\n\nclass BIT {\n\n\tstatic const int MAX_N = 500010;\npublic:\n\tBIT() { memset(bit, 0, sizeof(bit)); }\n\tll bit[MAX_N + 1], n;\n\tll sum(int i) {\n\t\tll s = 0;\n\t\twhile (i > 0)\n\t\t{\n\t\t\ts += bit[i];\n\t\t\ti -= i & -i;\n\t\t}\n\t\treturn s;\n\t}\n\n\tvoid add(int i, int x) {\n\t\twhile (i <= n)\n\t\t{\n\t\t\tbit[i] += x;\n\t\t\ti += i & -i;\n\t\t}\n\t}\n\n\n};\nstruct UnionFind {\n\tvector<int> A;\n\tUnionFind(int n) : A(n, -1) {}\n\tint find(int x) {\n\t\tif (A[x] < 0) return x;\n\t\treturn A[x] = find(A[x]);\n\t}\n\tvoid unite(int x, int y) {\n\t\tx = find(x), y = find(y);\n\t\tif (x == y) return;\n\t\tif (A[x] > A[y]) swap(x, y);\n\t\tA[x] += A[y];\n\t\tA[y] = x;\n\t}\n\tint ngroups() {\n\t\tint ans = 0;\n\t\tfor (auto a : A) if (a < 0) ans++;\n\t\treturn ans;\n\t}\n};\nvoid yes() { cout << \"Yes\\n\"; exit(0); }\nvoid no() { cout << \"No\\n\"; exit(0); }\nvector<ll> getp(ll n) {\n\n\tvector<ll> res;\n\tll a = 2;\n\tif (n % 2 == 0) {\n\t\tres.push_back(2);\n\t\twhile (n % 2 == 0)n /= 2;\n\t}\n\n\tfor (ll i = 3; i * i <= n; i += 2)\n\t{\n\t\tif (n % i == 0) {\n\t\t\tres.push_back(i);\n\t\t\twhile (n % i == 0)n /= i;\n\t\t}\n\t}\n\tif (n != 1) res.push_back(n);\n\treturn res;\n}\nvector<ll> getp2(ll n) {\n\n\tvector<ll> res;\n\tll a = 2;\n\tif (n % 2 == 0) {\n\n\t\twhile (n % 2 == 0) { n /= 2; res.push_back(2); }\n\t}\n\n\tfor (ll i = 3; i * i <= n; i += 2)\n\t{\n\t\tif (n % i == 0) {\n\n\t\t\twhile (n % i == 0) { n /= i; res.push_back(i); }\n\t\t}\n\t}\n\tif (n != 1) res.push_back(n);\n\treturn res;\n}\nvector<pll> getp3(ll n) {\n\tvector<pll> res;\n\tll a = 2;\n\tint si = 0;\n\tif (n % 2 == 0) {\n\n\t\tres.push_back(make_pair(2, 0));\n\t\twhile (n % 2 == 0) { n /= 2; res[si].second++; }\n\t\tsi++;\n\t}\n\n\tfor (ll i = 3; i * i <= n; i += 2)\n\t{\n\t\tif (n % i == 0) {\n\t\t\tres.push_back(make_pair(i, 0));\n\t\t\twhile (n % i == 0) { n /= i; res[si].second++; }\n\t\t\tsi++;\n\t\t}\n\t}\n\tif (n != 1) { res.push_back(make_pair(n, 1)); }\n\treturn res;\n}\n\nvector<ll> getDivisors(ll n) {\n\n\tvector<ll> res;\n\tll a = 2;\n\tres.push_back(1);\n\tfor (ll i = 2; i * i <= n; i++)\n\t{\n\n\t\tif (n % i == 0) {\n\t\t\tres.push_back(i);\n\t\t\tif (n / i != i)\n\t\t\t\tres.push_back(n / i);\n\t\t}\n\t}\n\treturn res;\n}\n\nstruct ve {\npublic:\n\tvector<ve> child;\n\tint _t = INF;\n\tve(int t) :_t(t) {}\n\tve(ve _left, ve _right) {\n\t\t_t = _left._t + _right._t;\n\t\tchild.push_back(_left);\n\t\tchild.push_back(_right);\n\t}\n\tbool operator<(const ve& t) const {\n\t\treturn _t > t._t;\n\t}\n};\n\nvector<bool> elas(ll n) {\n\tvector<bool> r(n);\n\tfill(r.begin(), r.end(), 1);\n\tr[0] = 0;\n\tr[1] = 0;\n\tfor (ll i = 2; i * i < n; i++)\n\t{\n\t\tif (!r[i]) continue;\n\t\tll ti = i * 2;\n\t\twhile (ti < n)\n\t\t{\n\t\t\tr[ti] = false;\n\t\t\tti += i;\n\t\t}\n\t}\n\treturn r;\n}\nbool isPrime(ll v) {\n\tfor (ll i = 2; i * i <= v; i++)\n\t{\n\t\tif (v % i == 0) return false;\n\t}\n\treturn true;\n}\n\n\nclass SegTree {\n\npublic:\n\tconst static int MAX_N = 100010;\n\tconst static int DAT_SIZE = (1 << 18) - 1;\n\tint N, Q;\n\tint A[MAX_N];\n\n\n\tll data[DAT_SIZE], datb[DAT_SIZE];\n\tvoid init(int _n) {\n\t\tN = 1;\n\t\twhile (N < _n) N <<= 1;\n\t\tmemset(data, 0, sizeof(data));\n\t\tmemset(datb, 0, sizeof(datb));\n\t}\n\tvoid init(int _n, ll iv) {\n\t\tN = 1;\n\t\twhile (N < _n) N <<= 1;\n\t\trep(i, DAT_SIZE) {\n\t\t\tdata[i] = iv;\n\t\t\tdatb[i] = iv;\n\t\t}\n\t}\n\tvoid add(int a, int b, int x) {\n\t\tadd(a, b + 1, x, 0, 0, N);\n\t}\n\tvoid add(int a, int b, int x, int k, int l, int r) {\n\t\tif (a <= l && r <= b) {\n\t\t\tdata[k] += x;\n\t\t}\n\t\telse if (l < b && a < r) {\n\t\t\tdatb[k] += (min(b, r) - max(a, l)) * x;\n\t\t\tadd(a, b, x, k * 2 + 1, l, (l + r) / 2);\n\t\t\tadd(a, b, x, k * 2 + 2, (l + r) / 2, r);\n\t\t}\n\t}\n\n\tvoid change(int a, int b, int x) {\n\t\tchange(a, b + 1, x, 0, 0, N);\n\t}\n\tvoid change(int a, int b, int x, int k, int l, int r) {\n\t\tif (a <= l && r <= b) {\n\t\t\tdata[k] = x;\n\t\t}\n\t\telse if (l < b && a < r) {\n\t\t\tdatb[k] = x;\n\t\t\tchange(a, b, x, k * 2 + 1, l, (l + r) / 2);\n\t\t\tchange(a, b, x, k * 2 + 2, (l + r) / 2, r);\n\t\t}\n\t}\n\n\tll sum(int a, int b) {\n\t\treturn sum(a, b + 1, 0, 0, N);\n\t}\n\tll sum(int a, int b, int k, int l, int r) {\n\t\tif (b <= l || r <= a) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (a <= l && r <= b) {\n\t\t\treturn data[k] * (r - l) + datb[k];\n\t\t}\n\n\t\tll res = (min(b, r) - max(a, l)) * data[k];\n\t\tres += sum(a, b, k * 2 + 1, l, (l + r) / 2);\n\t\tres += sum(a, b, k * 2 + 2, (l + r) / 2, r);\n\t\treturn res;\n\t}\n};\nclass Segment;\nclass Circle;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x * x + y * y; }\n\n\tbool operator < (const Point& p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\tbool operator == (const Point& p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\tstatic double dot(Point a, Point b) {\n\t\treturn a.x * b.x + a.y * b.y;\n\t}\n\tstatic double cross(Point a, Point b) {\n\t\treturn a.x * b.y - a.y * b.x;\n\t}\n\tstatic bool isOrthogonal(Point a, Point b) {\n\t\treturn EQ(dot(a, b), 0.0);\n\t}\n\tstatic bool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isOrthogonal(a1 - a2, b1 - b2);\n\t}\n\tstatic bool isOrthogonal(Segment s1, Segment s2);\n\n\tstatic bool isPalallel(Point a, Point b) {\n\t\treturn EQ(cross(a, b), 0.0);\n\t}\n\tstatic bool isPalallel(Point a1, Point a2, Point b1, Point b2) {\n\t\treturn isPalallel(a1 - a2, b1 - b2);\n\t}\n\tstatic bool isPalallel(Segment s1, Segment s2);\n\n\tstatic const int COUNTER_CLOCKWISE = 1;\n\tstatic const int CLOCKWISE = -1;\n\tstatic const int ONLINE_BACK = 2;\n\tstatic const int ONLINE_FRONT = -2;\n\tstatic const int ON_SEGMENT = 0;\n\tstatic int ccw(Point p0, Point p1, Point p2) {\n\t\tPoint a = p1 - p0;\n\t\tPoint b = p2 - p0;\n\t\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\t\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\t\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\t\tif (a.norm() < b.norm()) return ONLINE_FRONT;\n\t\treturn ON_SEGMENT;\n\t}\n\n\tstatic bool intersect(Point p1, Point p2, Point p3, Point p4) {\n\t\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0\n\t\t\t&& ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n\t}\n\tstatic bool intersect(Segment s1, Segment s2);\n\tstatic Point project(Segment s, Point p);\n\n\tstatic Point reflect(Segment s, Point p);\n\n\tstatic Point getDistance(Point a, Point b) {\n\t\treturn (a - b).abs();\n\t}\n\n\tstatic double getDistanceLP(Segment s, Point p);\n\n\tstatic double getDistanceSP(Segment s, Point p);\n\n\tstatic double getDistance(Segment s1, Segment s2);\n\n\tstatic Point getIntersection(Segment s1, Segment s2);\n\n\tstatic pair<Point, Point> crossPoints(Circle c, Segment s);\n\n\tstatic int contains(vector<Point> g, Point p) {\n\t\tint n = g.size();\n\t\tbool x = false;\n\t\trep(i, n) {\n\t\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\t\t// 線の上に載っているか\n\t\t\tif (std::abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\n\t\t\t// pを基準として上下にあるか\n\t\t\t// または外積が正か?(→にあるか)\n\t\t\tif (a.y > b.y) swap(a, b);\n\t\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;\n\t\t}\n\t\treturn x ? 2 : 0;\n\t}\n\n\tstatic vector<Point> andrewScan(vector<Point> s) {\n\t\tvector<Point> u, l;\n\t\tif (s.size() < 3) return s;\n\t\tsort(all(s));\n\t\tu.push_back(s[0]);\n\t\tu.push_back(s[1]);\n\t\tl.push_back(s[s.size() - 1]);\n\t\tl.push_back(s[s.size() - 2]);\n\n\t\tfor (int i = 2; i < s.size(); i++) {\n\n\t\t\tfor (int _n = u.size(); _n >= 2 && ccw(u[_n - 2], u[_n - 1], s[i]) > CLOCKWISE; _n--) {\n\t\t\t\tu.pop_back();\n\t\t\t}\n\t\t\tu.push_back(s[i]);\n\t\t}\n\n\t\tfor (int i = s.size() - 3; i >= 0; i--) {\n\n\t\t\tfor (int _n = l.size(); _n >= 2 && ccw(l[_n - 2], l[_n - 1], s[i]) > CLOCKWISE; _n--) {\n\t\t\t\tl.pop_back();\n\t\t\t}\n\t\t\tl.push_back(s[i]);\n\t\t}\n\n\t\treverse(all(l));\n\t\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\t{\n\t\t\tl.push_back(u[i]);\n\t\t}\n\n\t\treturn l;\n\t}\n\tvoid get_cin() {\n\t\tcin >> x >> y;\n\t}\n};\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {}\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n\tvoid get_cin() {\n\t\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\t}\n\tPoint p1tp2() {\n\t\treturn p2 - p1;\n\t}\n\tPoint p2tp1() {\n\t\treturn p1 - p2;\n\t}\n\tdouble abs() {\n\t\treturn std::abs(norm());\n\t}\n\tdouble norm() {\n\t\treturn (p2 - p1).norm();\n\t}\n};\n\nbool Point::isOrthogonal(Segment s1, Segment s2) {\n\treturn EQ(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool Point::isPalallel(Segment s1, Segment s2) {\n\treturn EQ(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\nbool Point::intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\nPoint Point::project(Segment s, Point p) {\n\tPoint base = s.p2 - s.p1;\n\tdouble r = Point::dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\nPoint Point::reflect(Segment s, Point p) {\n\treturn (project(s, p) * 2) - p;\n}\ndouble Point::getDistanceLP(Segment s, Point p) {\n\treturn std::abs(cross(s.p2 - s.p1, p - s.p1) / (s.p2 - s.p1).abs());\n}\ndouble Point::getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return (p - s.p1).abs();\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\ndouble Point::getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min({ getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)\n\t\t,getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2) });\n}\n\nPoint Point::getIntersection(Segment s1, Segment s2) {\n\t// (s1.p1 - s2.p1).norm()\n\tauto bs = s1.p2 - s1.p1;\n\tauto n1 = s2.p1 - s1.p1;\n\tauto n2 = s2.p2 - s1.p1;\n\tauto c1 = std::abs(cross(n1, bs)) / bs.norm();\n\tauto c2 = std::abs(cross(n2, bs)) / bs.norm();\n\treturn s2.p1 + (s2.p2 - s2.p1) * (c1 / (c1 + c2));\n\t// c1:c2=t:1-t\n\t// c2t=(1-t)c1\n\t// t/(1-t)=c1/(c1+c2)\n\t// \n}\n\ndouble arg(Point p) { return atan2(p.y, p.x); }\nPoint polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n\tvoid get_cin() {\n\t\tcin >> c.x >> c.y >> r;\n\t}\n\tstatic pair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\t\tdouble d = (c1.c - c2.c).abs(); // 中心点どうしの距離\n\t\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\t\tdouble t = arg(c2.c - c1.c);\n\t\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n\n\t}\n};\n\npair<Point, Point> Point::crossPoints(Circle c, Segment s) {\n\tauto pp = project(s, c.c);\n\tauto f = (pp - c.c).norm();\n\tauto mu = sqrt(c.r * c.r - f);\n\tauto e = s.p1tp2() / s.p1tp2().abs();\n\treturn make_pair(pp + e * mu, pp - e * mu);\n\n}\n\nll divRm(string s, ll x) {\n\n\tll r = 0;\n\tfor (ll i = 0; i < s.size(); i++)\n\t{\n\t\tr *= 10;\n\t\tr += s[i] - '0';\n\t\tr %= x;\n\t}\n\treturn r;\n}\nll cmbi(ll x, ll b) {\n\n\tll res = 1;\n\tfor (size_t i = 0; i < b; i++)\n\t{\n\t\tres *= x - i;\n\t\tres %= INF;\n\t\tres *= inv[b - i];\n\t\tres %= INF;\n\t}\n\treturn res;\n}\n\ndouble digsum(ll x) {\n\tll res = 0;\n\twhile (x > 0)\n\t{\n\t\tres += x % 10;\n\t\tx /= 10;\n\t}\n\treturn res;\n}\nbool check_parindrome(string s) {\n\tint n = s.size();\n\trep(i, n / 2) {\n\t\tif (s[i] != s[n - i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nvoid solv() {\n\tll x1, y1, x2, y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tPoint p1(x1, y1);\n\tPoint p2(x2, y2);\n\tcin >> n;\n\tcout << fixed << setprecision(10);\n\trep(i, n) {\n\t\tll x, y;\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\t// v1=p2-p1\n\t\t// v2=p-p1\n\t\t// 内積v1*v2\n\t\t// p1からxまでの長さが求められる\n\t\t// p1+v1*x/v1.norm\n\t\tauto v1 = p2 - p1;\n\t\tauto v2 = p - p1;\n\t\tauto l = Point::dot( v1,v2);\n\t\tauto r = p1 + v1 * l / v1.norm();\n\t\tcout << r.x << \" \" << r.y << endl;\n\t}\n}\nint main() {\n\tCOMinit();\n\tsolv();\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <array>\n#include <set>\n#include <map>\n#include <cmath>\n#include <complex>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n#include <tuple>\n#include <bitset>\n#include <cstdint>\n#include <cassert>\n#include <random>\n#include <iterator>\n\nusing namespace std;\nusing i64 = int64_t;\nusing i32 = int32_t;\n\nint dot(int x1, int y1, int x2, int y2) {\n    return x1 * x2 + y1 * y2;\n}\ni64 s, t, u, v;\nint solve() {\n    i64 x, y;\n    cin >> x >> y;\n    x -= s;\n    y -= t;\n    double d = double(dot(x, y, u, v)) / dot(u, v, u, v);\n    printf(\"%.12f %.12f\\n\", d * u + s, d * v + t);\n}\nint main() {\n    cin >> s >> t >> u >> v;\n    u -= s;\n    v -= t;\n    int q;\n    cin >> q;\n    while (q--) solve();\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long LL;\ntypedef complex<double> Point;\ntypedef Point Vector;\nconst double EPS = 1e-10;\nconst int COUNTER_CLOCKWISE = 1;\nconst int CLOCKWISE = -1;\nconst int ONLINE_BACK = 2;\nconst int ONLINE_FRONT = -2;\nconst int ON_SEGMENT = 0;\nconst int IN = 2;\nconst int ON = 1;\nconst int OUT = 0;\nstruct Segment {\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {}\n};\ntypedef Segment Line;\nstruct Circle {\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\ntypedef vector<Point> Polygon;\n\ninline double equals(double a, double b);\ninline double dot(Vector a, Vector b);\ninline double cross(Vector a, Vector b);\ninline bool isOrthogonal(Vector a, Vector b);\ninline bool isParallel(Vector a, Vector b);\nPoint project(Segment s, Point p);\nPoint reflect(Segment s, Point p);\nint ccw(Point p0, Point p1, Point p2);\nbool intersect(Segment s1, Segment s2);\nbool intersect(Circle c, Line l);\nbool intersect(Circle c1, Circle c2);\ndouble getDistanceLP(Line l, Point p);\ndouble getDistanceSP(Segment s, Point p);\ndouble getDistance(Segment s1, Segment s2);\nPoint getCrossPoint(Segment s1, Segment s2);\npair<Point, Point> getCrossPoints(Circle c, Line l);\npair<Point, Point> getCrossPoints(Circle c1, Circle c2);\nint contains(Polygon g, Point p);\nPolygon andrewScan(Polygon s);\n\ninline double equals(double a, double b) {\n\treturn fabs(a - b) < EPS;\n}\nbool operator<(const Point &p1, const Point &p2) {\n\treturn p1.real() != p2.real() ? p1.real() < p2.real() : p1.imag() < p2.imag();\n}\nbool operator==(const Point &p1, const Point &p2) {\n\treturn equals(p1.real(), p2.real()) && equals(p1.imag(), p2.imag());\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.real()*b.real() + a.imag()*b.imag();\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.real()*b.imag() - a.imag()*b.real();\n}\ninline bool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\ninline bool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\nbool intersect(Segment s1, Segment s2) {\n\treturn (ccw(s1.p1, s1.p2, s2.p1)*ccw(s1.p1, s1.p2, s2.p2) <= 0 &&\n\t\tccw(s2.p1, s2.p2, s1.p1)*ccw(s2.p1, s2.p2, s1.p2) <= 0);\n}\nbool intersect(Circle c, Line l) {\n\treturn getDistanceLP(l, c.c) <= c.r;\n}\nbool intersect(Circle c1, Circle c2) {\n\treturn abs(c1.c - c2.c) <= c1.r + c2.r;\n}\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));\n}\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0) return abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0) return abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2)) return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tassert(intersect(s1, s2));\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tassert(intersect(c, l));\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r*c.r - norm(pr - c.c));\n\treturn make_pair(pr + e*base, pr - e*base);\n}\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tassert(intersect(c1, c2));\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r*d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.imag() > b.imag()) swap(a, b);\n\t\tif (a.imag() < EPS && EPS<b.imag() && cross(a, b)>EPS) x = !x;\n\t}\n\treturn x ? 2 : 0;\n}\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tif (s.size() < 3) return s;\n\tsort(s.begin(), s.end());\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\tfor (int i = 2; i < s.size(); i++) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--) l.push_back(u[i]);\n\treturn l;\n}\n\nint main() {\n\tint x, y;\n\tcin >> x >> y;\n\tPoint p1(x, y);\n\tcin >> x >> y;\n\tPoint p2(x, y);\n\tSegment s(p1, p2);\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tPoint a = project(s, p);\n\t\tprintf(\"%.15lf %.15lf\\n\", a.real(), a.imag());\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <queue> //priority_queue\n#include <map>\n#include <set> //multiset set<int,greater<int>>大到小\n#include <vector>// ::iterator it;\n#include <stack>\n#include <cmath> // auto &Name : STLName  Name.\n#include <utility>\n#include <sstream>\n#include <string>//__builtin_popcount(ans);//获取某个数二进制位1的个数\n#define mod 1000000007\n#define mod9 998244353\ntypedef unsigned long long ull;\ntypedef long long ll;\ntypedef double db;\ntypedef long double ld;\nconst db eps=1e-10;\nconst int INF = 0x3f3f3f3f;\nconst ll inf=0x3f3f3f3f3f3f3f3f;\nconst int N=1e5+7;\nusing namespace std;\n\nint t,n,m,ans=0,cnt=0,sum=0;\ndb x1,y11,x2,y2,a,b,k,p,x;\nint main(){\n    scanf(\"%lf%lf%lf%lf\",&x1,&y11,&x2,&y2);\n    scanf(\"%d\",&n);\n    while(n--){\n        scanf(\"%lf%lf\",&a,&b);\n        if(x1==x2){\n            printf(\"%.10lf %.10lf\\n\",x1,b);\n        }else if(y11==y2){\n            printf(\"%.10lf %.10lf\\n\",a,y2);\n        }else{\n            k=(y2-y11)/(x2-x1);\n            p=-1/k;\n            x=(a*p-b+y11-k*x1)/(p-k);\n            printf(\"%.10lf %.10lf\\n\",x,p*(x-a)+b);\n        }\n    }\n\n\n\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\n\nusing Point = complex<double>;\nusing Polygon = vector<Point>;\n\ninline int sgn(const double &a) { return (a < -EPS ? -1 : (a > EPS ? 1 : 0)); }\n\ninline bool eq(const Point &a, const Point &b) { return abs(a - b) < EPS; }\n\nnamespace std {\ninline bool operator<(const Point &a, const Point &b) {\n    if (sgn(a.real() - b.real()))\n        return sgn(a.real() - b.real()) < 0;\n    return sgn(a.imag() - b.imag()) < 0;\n}\n} // namespace std\n\ndouble dot(const Point &a, const Point &b) { return real(conj(a) * b); }\n\ndouble det(const Point &a, const Point &b) { return imag(conj(a) * b); }\n\nstruct Line {\n    Point p1, p2;\n\n    Line(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n\n    bool operator<(const Line &rhs) const {\n        if (eq(p2, rhs.p2))\n            return p1 < rhs.p1;\n        return p2 < rhs.p2;\n    }\n    bool operator==(const Line &rhs) const {\n        return (eq(p1, rhs.p1) && eq(p2, rhs.p2)) ||\n               (eq(p1, rhs.p2) && eq(p2, rhs.p1));\n    }\n};\n\nPoint projection(Line line, Point p){\n    Point a = line.p2 - line.p1, b = p - line.p1;\n    double r = dot(a, b) / norm(a);\n    return line.p1 + r * a;\n}\n\nint main(){\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Point p1 = Point(x1, y1), p2 = Point(x2, y2);\n    Line line = Line(p1, p2);\n    int q;\n    cin >> q;\n    for(int i=0;i<q;++i){\n        double x, y;\n        cin >> x >> y;\n        Point p = Point(x, y);\n        Point ans = projection(line, p);\n        printf(\"%.10f %.10f\\n\", ans.real(), ans.imag());\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define REP(i,n) FOR(i,0,n)\n#define FOR(i,a,b) for(ll i=a;i<b;i++)\n#define PB push_back\ntypedef vector<ll> vi;\ntypedef vector<vector<ll>> vvi;\nconst ll INF = (1ll << 60);\ntypedef pair<ll,ll> pii;\nstruct Point{double x,y;};\nstruct Vec{double x,y; Vec(Point p1,Point p2) {x=p2.x-p1.x; y=p2.y-p1.y;}};\ndouble dot(Vec v1,Vec v2) {return v1.x*v2.x+v1.y*v2.y;}\ndouble len(Vec v) {return sqrt(dot(v,v));}\ndouble cos(Vec v1,Vec v2) {return dot(v1,v2)/(len(v1)*len(v2));}\nPoint operator+(Point p,Vec v) {p.x+=v.x; p.y+=v.y; return p;}\ndouble dist(Point p1,Point p2) {return len(Vec(p1,p2));}\nVec operator*(Vec v,double i) {v.x*=i; v.y*=i; return v;}\nint main(){\n  Point p1,p2; cin>>p1.x>>p1.y>>p2.x>>p2.y;\n  ll q; cin>>q;\n  REP(i,q){\n    Point p; cin>>p.x>>p.y;\n    Vec a(p1,p), b(p1,p2);\n    Point ans=p1+b*(dot(a,b)/dot(b,b));\n    printf(\"%.12f %.12f\\n\",ans.x,ans.y);\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\nusing namespace std;\ntypedef long long ll;\nll read()\n{\n\tll x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nstruct Point{double x,y;}p1,p2,p;\nPoint operator +(Point a,Point b){return (Point){a.x+b.x,a.y+b.y};}\nPoint operator -(Point a,Point b){return (Point){a.x-b.x,a.y-b.y};}\nPoint operator *(Point a,double b){return (Point){a.x*b,a.y*b};}\ndouble dot(Point a,Point b){return a.x*b.x-a.y*b.y;}\ndouble norm(Point a){return a.x*a.x+a.y*a.y;}\nvoid read(Point &x){x.x=read();x.y=read();}\nvoid print(Point x){printf(\"%.10lf %.10lf\\n\",x.x,x.y);}\nPoint Project(Point p1,Point p2,Point p)\n{\n\tPoint base=p2-p1,hypo=p-p1;\n\tdouble r=dot(base,hypo)/norm(base);\n\treturn p1+base*r;\n}\nint main()\n{\n\tread(p1);read(p2);\n\tint q=read();while(q--)\n\t\tread(p),print(Project(p1,p2,p));\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#include <sys/timeb.h>\n#include <fstream>\n\nusing namespace std;\n\n#define repl(i,a,b) for(int i=(int)(a);i<(int)(b);i++)\n#define rep(i,n) repl(i,0,n)\n#define replrev(i,a,b) for(int i=(int)(b)-1;i>=(int)(a);i--)\n#define reprev(i,n) replrev(i,0,n)\n#define repi(itr,ds) for(auto itr=ds.begin();itr!=ds.end();itr++)\n#define all(a) a.begin(),a.end()\n#define mp make_pair\n#define mt make_tuple\n#define INF 2000000000\n#define INFL 1000000000000000000LL\n#define EPS (1e-10)\n#define MOD 1000000007\n#define PI 3.1415926536\n#define RMAX 4294967295\n\ntypedef long long ll;\ntypedef pair<int, int> P;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<bool> vb;\ntypedef vector<char> vc;\ntypedef vector<string> vs;\ntypedef vector<double> vd;\ntypedef vector<P> vP;\ntypedef vector<vector<int> > vvi;\ntypedef vector<vector<bool> > vvb;\ntypedef vector<vector<ll> > vvll;\ntypedef vector<vector<char> > vvc;\ntypedef vector<vector<string> > vvs;\ntypedef vector<vector<double> > vvd;\ntypedef vector<vector<P> > vvP;\ntypedef priority_queue<int, vector<int>, greater<int> > pqli;\ntypedef priority_queue<ll, vector<ll>, greater<ll> > pqlll;\ntypedef priority_queue<P, vector<P>, greater<P> > pqlP;\ntypedef pair<int, pair<int, int> > Edge;\ntypedef vector<Edge> vE;\ntypedef priority_queue<Edge, vector<Edge>, greater<Edge> > pqlE;\n\n#define equals(a,b)(fabs((a)-(b)))<EPS)\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS&&fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ntypedef vector<Point> Polygon;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1 = Point(), Point p2 = Point()) :p1(p1), p2(p2) {}\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0) :c(c), r(r) {}\n};\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base*r;\n}\n\n// ??????s???????§°?????¨?????????p???????§°???\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p)*2.0;\n}\n\ndouble getDistance(Point a, Point b) {\n\treturn (a - b).abs();\n}\n\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs(cross(l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs();\n}\n\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)return (p - s.p1).abs();\n\tif (dot(s.p2 - s.p1, p - s.p2) < 0.0)return (p - s.p2).abs();\n\treturn getDistanceLP(s, p);\n}\n\n// ????????????(p0,p1)???????????????p2?????????\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS)return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < EPS)return CLOCKWISE;\n\tif (dot(a, b) < EPS)return ONLINE_BACK;\n\tif (a.norm() < b.norm())return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3)*ccw(p1, p2, p4) <= 0\n\t\t&& ccw(p3, p4, p1)*ccw(p3, p4, p2) <= 0);\n}\n\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\ndouble getDistance(Segment s1, Segment s2) {\n\tif (intersect(s1, s2))return 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1)*t;\n}\n\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n\tdouble base = sqrt(c.r*c.r - (pr - c.c).norm());\n\treturn make_pair(pr + e*base, pr - e*base);\n}\n\ndouble arg(Vector p) {\n\treturn atan2(p.y, p.x);\n}\n\n// ?????¢a???????§?r\nVector polar(double a, double r) {\n\treturn Point(cos(r)*a, sin(r)*a);\n}\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = (c1.c - c2.c).abs();\n\tdouble a = acos((c1.r*c1.r + d*d - c2.r*c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n// IN:2, ON:1, OUT:0\nint contain(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p;\n\t\tPoint b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS&&dot(a, b) < EPS)return 1;\n\t\tif (a.y > b.y)swap(a, b);\n\t\tif (a.y < EPS&&EPS<b.y&&cross(a, b)>EPS)x = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\n\n// ??????\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tif (s.size() < 3)return s;\n\tsort(s.begin(), s.end());\n\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\tl.push_back(s[s.size() - 1]);\n\tl.push_back(s[s.size() - 2]);\n\t\n\tfor (int i = 2; i < s.size(); i++) {\n\t\tfor (int n = u.size(); n >= 2 && ccw(u[n - 2], u[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\tfor (int i = s.size() - 3; i >= 0; i--) {\n\t\tfor (int n = l.size(); n >= 2 && ccw(l[n - 2], l[n - 1], s[i]) != CLOCKWISE; n--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)l.push_back(u[i]);\n\t\n\treturn l;\n}\n\nint main() {\n\tcout << fixed << setprecision(14);\n\tint x1, y1, x2, y2, Q;\n\tcin >> x1 >> y1 >> x2 >> y2 >> Q;\n\tPoint p0(x1, y1), p1(x2, y2);\n\tSegment s(p0, p1);\n\trep(i, Q) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tPoint ans = project(s, p);\n\t\tcout << ans.x << \" \" << ans.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <list>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <cmath>\n\n#include <cstdio>\n\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (n); i++)\n#define repc(i, s, n) for (int i = (s); i <= (n); i++)\n#define rrep(i, n) for (int i = (n) - 1; i >= 0; i--)\n#define rrepc(i, s, n) for (int i = (s); i >= (n); i--)\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nstruct Point { double x, y; };\ntypedef Point Vector;\n#define EPS (1e-10)\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\nint main()\n{\n\tint q;\n\tPoint p[3];\n\tVector v1, v2;\n\tdouble dotv;\n\tdouble v1len;\n\tPoint ans;\n\n\tcin >> p[1].x >> p[1].y >> p[2].x >> p[2].y;\n\tcin >> q;\n\n\tv1.x = p[2].x - p[1].x;\n\tv1.y = p[2].y - p[1].y;\n\tv1len = sqrt(v1.x * v1.x + v1.y * v1.y);\n\n\trep(i, q) {\n\t\tcin >> p[0].x >> p[0].y;\n\n\t\tv2.x = p[0].x - p[1].x;\n\t\tv2.y = p[0].y - p[1].y;\n\n\t\tdotv = dot(v1, v2);\n\n\t\tans.x = p[1].x + v1.x * dotv / v1len / v1len;\n\t\tans.y = p[1].y + v1.y * dotv / v1len / v1len;\n\n\t\tprintf(\"%.10lf %.10lf\\n\", ans.x, ans.y);\n\t}\n\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "\n#include <iostream>\n#include <algorithm>\n#include <utility>\n#include <vector>\n#include <numeric>\n#include <cmath>\n#include <iomanip>\n\ntemplate <class T, class U>\ninline bool chmin(T &lhs, const U &rhs) {\n  if (lhs > rhs) {\n    lhs = rhs;\n    return true;\n  }\n  return false;\n}\n\ntemplate <class T, class U>\ninline bool chmax(T &lhs, const U &rhs) {\n  if (lhs < rhs) {\n    lhs = rhs;\n    return true;\n  }\n  return false;\n}\n\n// [l, r) from l to r\nstruct range {\n  struct itr {\n    int i;\n    constexpr itr(int i_): i(i_) { }\n    constexpr void operator ++ () { ++i; }\n    constexpr int operator * () const { return i; }\n    constexpr bool operator != (itr x) const { return i != x.i; }\n  };\n  const itr l, r;\n  constexpr range(int l_, int r_): l(l_), r(std::max(l_, r_)) { }\n  constexpr itr begin() const { return l; }\n  constexpr itr end() const { return r; }\n};\n\n// [l, r) from r to l\nstruct revrange {\n  struct itr {\n    int i;\n    constexpr itr(int i_): i(i_) { }\n    constexpr void operator ++ () { --i; }\n    constexpr int operator * () const { return i; }\n    constexpr bool operator != (itr x) const { return i != x.i; }\n  };\n  const itr l, r;\n  constexpr revrange(int l_, int r_): l(l_ - 1), r(std::max(l_, r_) - 1) { }\n  constexpr itr begin() const { return r; }\n  constexpr itr end() const { return l; }\n};\n\n\ntemplate <class T>\nstruct real_constant;\n\ntemplate <>\nstruct real_constant<double> {\n  using value_type = double;\n  static constexpr value_type infinity() { return 1e9; }\n  static constexpr value_type epsilon() { return 1e-9; }\n  static constexpr value_type pi() { return std::acos(-1.0); }\n};\n\ntemplate <>\nstruct real_constant<long double> {\n  using value_type = long double;\n  static constexpr value_type infinity() { return 1e18; }\n  static constexpr value_type epsilon() { return 1e-10; }\n  static constexpr value_type pi() { return std::acos(-1.0L); }\n};\n\ntemplate <>\nstruct real_constant<int> {\n  using value_type = int;\n  static constexpr value_type infinity() { return 1e9; }\n  static constexpr value_type epsilon() { return 1; }\n};\n\ntemplate <>\nstruct real_constant<long long> {\n  using value_type = long long;\n  static constexpr value_type infinity() { return 1e18; }\n  static constexpr value_type epsilon() { return 1; }\n};\n\ntemplate <class T>\nconstexpr bool leq(T x, T y) {\n  return x - y < real_constant<T>::epsilon();\n}\ntemplate <class T>\nconstexpr bool geq(T x, T y) {\n  return y - x < real_constant<T>::epsilon();\n}\ntemplate <class T>\nconstexpr bool equal(T x, T y) {\n  return leq(x, y) && geq(x, y);\n}\n\ntemplate <class T>\nstruct vector_type {\n  using value_type = T;\n  value_type x, y;\n  constexpr vector_type(): x(0), y(0) { }\n  constexpr vector_type(value_type x_, value_type y_): x(x_), y(y_) { }\n  constexpr vector_type &operator += (const vector_type &rhs) { x += rhs.x; y += rhs.y; return *this; }\n  constexpr vector_type operator + (const vector_type &rhs) const { return vector_type(*this) += rhs; }\n  constexpr vector_type &operator -= (const vector_type &rhs) { x -= rhs.x; y -= rhs.y; return *this; }\n  constexpr vector_type operator - (const vector_type &rhs) const { return vector_type(*this) -= rhs; }\n  constexpr vector_type operator - () const { return vector_type(-x, -y); }\n  constexpr vector_type &operator *= (value_type rhs) { x *= rhs; y *= rhs; return *this; }\n  constexpr vector_type &operator /= (value_type rhs) { x /= rhs; y /= rhs; return *this; }\n  constexpr bool operator == (const vector_type &rhs) const { return equal(x, rhs.x) && equal(y, rhs.y); }\n  constexpr bool operator != (const vector_type &rhs) const { return !equal(x, rhs.x) || !equal(y, rhs.y); }\n};\n\ntemplate <class T, class U>\nconstexpr vector_type<T> operator * (vector_type<T> v, U rhs) { return v *= rhs; }\ntemplate <class T, class U>\nconstexpr vector_type<T> operator * (U rhs, vector_type<T> v) { return v *= rhs; }\ntemplate <class T, class U>\nconstexpr vector_type<T> operator / (vector_type<T> v, U rhs) { return v /= rhs; }\n\ntemplate <class T>\nstd::istream& operator >> (std::istream& is, vector_type<T> &v) { return is >> v.x >> v.y; }\ntemplate <class T>\nstd::ostream& operator << (std::ostream& os, const vector_type<T> &v) { return os << v.x << ' ' <<  v.y; }\n\ntemplate <class T>\nconstexpr T norm(const vector_type<T> &v) { return v.x * v.x + v.y * v.y; }\ntemplate <class T>\nconstexpr T abs(const vector_type<T> &v) { return std::sqrt(norm(v)); }\ntemplate <class T>\nconstexpr T argr(const vector_type<T> &v) { return std::atan2(v.y, v.x); }\ntemplate <class T>\nconstexpr T argd(const vector_type<T> &v) { return argr(v) * 180 / real_constant<T>::pi(); }\ntemplate <class T>\nconstexpr T dist(const vector_type<T> &v, const vector_type<T> &u) { return abs(v - u); }\ntemplate <class T>\nconstexpr T dot(const vector_type<T> &v, const vector_type<T> &u) { return v.x * u.x + v.y * u.y; }\ntemplate <class T>\nconstexpr T cross(const vector_type<T> &v, const vector_type<T> &u) { return v.x * u.y - v.y * u.x; }\n\ntemplate <class T>\nconstexpr unsigned orthan(const vector_type<T> &v) {\n  if (v.x > 0 && v.y >= 0) return 0;\n  if (v.x <= 0 && v.y > 0) return 1;\n  if (v.x < 0 && v.y <= 0) return 2;\n  if (v.x >= 0 && v.y < 0) return 3;\n  return 0;\n}\ntemplate <class T>\nconstexpr bool cmp_x(const vector_type<T> &v, const vector_type<T> &u) {\n  if (equal(v.x, u.x)) return v.y < u.y;\n  return v.x < u.x;\n}\ntemplate <class T>\nconstexpr bool cmp_y(const vector_type<T> &v, const vector_type<T> &u) {\n  if (equal(v.y, u.y)) return v.x < u.x;\n  return v.y < u.y;\n}\ntemplate <class T>\nconstexpr bool cmp_arg(const vector_type<T> &v, const vector_type<T> &u) {\n  if (orthan(v) != orthan(u)) return orthan(v) < orthan(u);\n  if (!equal(cross(v, u), 0)) return cross(v, u) > 0;\n  return norm(v) < norm(u);\n}\n\ntemplate <class T>\nstruct line_type {\n  using value_type = T;\n  value_type a, b, c;\n  constexpr line_type(): a(0), b(0), c(0) { }\n  constexpr line_type(value_type a_, value_type c_): a(a_), b(-1), c(c_) { }\n  constexpr line_type(value_type a_, value_type b_, value_type c_): a(a_), b(b_), c(c_) { }\n  constexpr value_type valx(value_type y) const { return (b * y + c) / (-a); }\n  constexpr value_type valy(value_type x) const { return (a * x + c) / (-b); }\n  constexpr bool operator == (const value_type &l) const { return equal(a * l.b, b * l.a) && equal(a * l.c, c * l.a); }\n  constexpr bool operator != (const value_type &l) const { return !equal(a * l.b, b * l.a) || !equal(a * l.c, c * l.a); }\n};\n\ntemplate <class T>\nconstexpr bool parallel(const line_type<T> &l, const line_type<T> &m) { return equal(l.a * m.b, l.b * m.a); };\ntemplate <class T>\nconstexpr bool vertical(const line_type<T> &l, const line_type<T> &m) { return equal(l.a * m.a + l.b * m.b, 0); };\ntemplate <class T>\nconstexpr bool is_on(const line_type<T> &l, const vector_type<T> &v) { return equal(l.a * v.x + l.b * v.y + l.c, 0);}\ntemplate <class T>\nconstexpr vector_type<T> intersection(const line_type<T> &l, const line_type<T> &m) {\n  auto x = (l.b * m.c - l.c * m.b) / (l.a * m.b - l.b * m.a);\n  auto y = (l.c * m.a - l.a * m.c) / (l.a * m.b - l.b * m.a);\n  return vector_type<T>(x, y);\n}\ntemplate <class T>\nconstexpr vector_type<T> direction(const line_type<T> &l) { vector_type<T> res(-l.b, l.a); return res; }\ntemplate <class T>\nconstexpr vector_type<T> perpend(const line_type<T> &l, const vector_type<T> &v) {\n  auto u = vector_type<T>(l.a, l.b);\n  auto d = -l.c / norm(u);\n  auto e = dot(v, u) / norm(u);\n  return (d - e) * u;\n}\ntemplate <class T>\nconstexpr vector_type<T> project(const line_type<T> &l, const vector_type<T> &v) {\n  return v + perpend(l, v);\n}\ntemplate <class T>\nconstexpr vector_type<T> relfect(const line_type<T> &l, const vector_type<T> &v) {\n  return v + perpend(l, v) * 2;\n}\ntemplate <class T>\nconstexpr T dist(const line_type<T> &l, const vector_type<T> &v) { \n  return std::abs(l.a * v.x + l.b * v.y + l.c) / abs(vector_type<T>(l.a, l.b)); \n}\n\ntemplate <class T>\nstruct segment_type {\n  using value_type = T;\n  vector_type<value_type> st, en;\n  constexpr segment_type(): st(0, 0), en(0, 0) { }\n  constexpr segment_type(const vector_type<value_type> &l, const vector_type<value_type> &r): st(l), en(r) { }\n  constexpr segment_type(value_type x1, value_type y1, value_type x2, value_type y2): st(x1, y1), en(x2, y2) { } \n  constexpr bool operator == (const segment_type &s) const { \n    return (st == s.st && en == s.en) || (st == s.en && en == s.st);\n  }\n  constexpr bool operator != (const segment_type &s) const { \n    return !(st == s.st && en == s.en) && !(st == s.en && en == s.st);\n  }\n};\n\ntemplate <class T>\nconstexpr vector_type<T> direction(const segment_type<T> &l) { return l.en - l.st; }\ntemplate <class T>\nconstexpr line_type<T> to_line(const segment_type<T> &s) {\n  auto v = direction(s);\n  auto c = v.y * s.st.x - v.x * s.st.y;\n  return line_type<T>(-v.y, v.x, c);\n}\ntemplate <class T>\nconstexpr line_type<T> bisect(const segment_type<T> &s) {\n  auto v = direction(s), u = (s.st + s.en) / 2;\n  return line_type<T>(v.x, v.y, -v.x * u.x - v.y * u.y);\n}\ntemplate <class T>\nconstexpr bool intersects(const segment_type<T> &s, const segment_type<T> &t) {\n  auto v = direction(s), u = direction(t);\n  auto d = cross(v, t.st - s.st) * cross(v, t.en - s.st);\n  auto e = cross(u, s.st - t.st) * cross(u, s.en - t.st);\n  return leq(d, 0) && leq(e, 0);\n}\n\nint main() {\n  segment_type<double> seg;\n  std::cin >> seg.st >> seg.en;\n  auto l = to_line(seg);\n  int Q;\n  std::cin >> Q;\n  std::cout << std::fixed << std::setprecision(20);\n  while (Q--) {\n    vector_type<double> v;\n    std::cin >> v;\n    std::cout << project(l, v) << '\\n';\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\n#define rep(i, n) REP(i, 0, n)\n#define REP(i, s, e) for(int i = (int)s; i < (int)(e); ++i)\n\n#define X real()\n#define Y imag()\n#define x(p) real(p)\n#define y(p) imag(p)\n#define curr(P, i) P[i]\n#define next(P, i) P[(i+1)%P.size()]\n#define prev(P, i) P[(i-1+P.size())%P.size()]\n\nconst double EPS = 1e-8;\nconst double INF = 1e12;\nconst double PI = acos(-1);\n\ntypedef double D;\ntypedef complex<D> P;\nnamespace std{\n  bool operator < (const P& a, const P& b) {\n    return x(a) != x(b) ? x(a) < x(b) : y(a) < y(b);\n  }\n}\n\nD dot(const P& a, const P& b) {\n  return x(conj(a)*b);\n}\nD cross(const P& a, const P& b) {\n  return y(conj(a)*b);\n}\n\nstruct L : public vector<P> {\n  L(const P&a, const P& b) {\n    push_back(a);\n    push_back(b);\n  }\n};\n\ntypedef vector<P> G;\n\nstruct C {\n  P p; D r;\n};\n\nint ccw(P a, P b, P c) {\n  b -= a; c -= a;\n  if(cross(b, c) > 0) return +1; //ccw\n  if(cross(b, c) < 0) return -1; //cw\n  if(dot(b, c) < 0)   return +2; //c-a-b on line\n  if(norm(b) < norm(c)) return -2; //a-b-c on line\n}\n\nP projection(const L& l, const P& p) {\n  D t = dot(p - l[0], l[0] - l[1]) / norm(l[0]- l[1]);\n  return l[0] + t * (l[0] - l[1]);\n}\n\nint main() {\n  D x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  L l{P(x1, y1), P(x2, y2)};\n  int q;\n  cin >> q;\n  cout << fixed << setprecision(20);\n  rep(i, q) {\n    D x, y;\n    cin >> x >> y;\n    auto p = projection(l, P{x, y});\n    cout << x(p) << \" \" << y(p) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <cmath>\n#include <cstdio>\n\nconst double EPSILON = 1e-10;\n\ninline bool equals(double a, double b) {\n    return std::fabs(a - b) < EPSILON;\n}\n\nstruct Point {\n    double x;\n    double y;\n\n    bool operator < (const Point& p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point& p) const {\n        return equals(x, p.x) && equals(y, p.y);\n    }\n};\n\nPoint operator + (const Point& p1, const Point& p2) {\n    return Point{p1.x + p2.x, p1.y + p2.y};\n}\n\nPoint operator - (const Point& p1, const Point& p2) {\n    return Point{p1.x - p2.x, p1.y - p2.y};\n}\n\nPoint operator * (const Point& p1, double k) {\n    return Point{p1.x * k, p1.y * k};\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\nstruct Circle {\n    Point center;\n    double radius;\n};\n\nusing Vector = Point;\nusing Line = Segment;\nusing Polygon = std::vector<Point>;\n\n\ndouble norm(const Vector& p) {\n    return p.x * p.x + p.y * p.y;\n}\n\ndouble abs(const Vector& p) {\n    return std::sqrt(norm(p));\n}\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(const Vector& a, const Vector& b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nVector projection(const Segment& s, const Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / norm(base);\n    using namespace std;\n    // cerr << \"p: \" << p.x << \", \" << p.y;\n    // cerr << \" dot: \" << dot(p - s.p1, base);\n    // cerr << \" norm: \" << norm(base) << endl;\n    return s.p1 + base * r;\n}\n\nint main() {\n    using namespace std;\n\n    Point p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    Segment s{p1, p2};\n\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; ++i) {\n        double x, y;\n        cin >> x >> y;\n        auto p = projection(s, Point{x, y});\n        cout << setprecision(20) << p.x << \" \" << p.y << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nusing namespace std;\n\n//????????????\nclass Point{\n  public:\n  double x, y;\n\n  Point(double x=0, double y=0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(a*x, a*y); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double abs() {return sqrt(norm()); }\n  double norm() { return x*x+y*y; }\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n\n};\n\n//(?????¢??????)????????????????????¨????§????????????§??????\ntypedef Point Vector;\n\n//???????????????\ntypedef struct Segment{\n  Point p1, p2;\n}Segment;\n\n//??´??????????§??????????\ntypedef Segment Line;\n\n//????????????\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r=0.0): c(c), r(r) {}\n};\n\n//????§???¢(???????????¨????????????)\ntypedef vector<Point> Polygon;\n\n\n//?????????????????????\ndouble dot(Vector a, Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//?????????????????????\ndouble cross(Vector a, Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//??´?????????(????????????????????????0????????´???)\nbool isOrthogonal(Vector a, Vector b){\n  return equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n  return isOrthogonal(a1- a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n  return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n//????????????(??????????????????????????§?????????0????????????)\nbool isParallel(Vector a, Vector b){\n  return equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n  return isParallel(a1- a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n  return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n//???????????´??????????°???±\nPoint project(Segment s, Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p-s.p1, base) / base.norm();\n  return s.p1 + base*r;\n}\n\nint main(){\n  Point p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n\n  Segment s;\n  s.p1=p1;\n  s.p2=p2;\n\n  int q;\n  scanf(\" %d\", &q);\n  for(int i=0; i<q; ++i){\n    Point p;\n    cin >> p.x >> p.y;\n    Point ans=project(s, p);\n    cout << ans.x  << \" \" << ans.y << endl;\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cmath>\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a*x, a*y); }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\n\nint main() {\n\tint q;\n\tPoint p, p1, p2;\n\tSegment s;\n\n\tscanf(\"%lf %lf %lf %lf\", &p1.x, &p1.y, &p2.x, &p2.y);\n\tscanf(\"%d\\n\", &q);\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%lf %lf\", &p.x,&p.y);\n\t\tprintf(\"%lf\\n\", project(s, p));\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "/**\"I am not an authorized coder\"**/\n#include <bits/stdc++.h>\n#define FOR(i, s, e)    for(int i=s; i<e; i++)\n#define loop(i, n)      FOR(i, 0, n)\n#define sf              scanf\n#define pf              printf\n#define pb              push_back\n#define MP              make_pair\n#define fr              first\n#define sc              second\n#define lli             long long\n#define dd              double\n#define all(v)          v.begin(), v.end()\n#define PI              2*acos(0.0)\n#define mem(ara, value) memset(ara, value, sizeof(ara))\n#define paii            pair<int, int>\n#define pall            pair<ll, ll>\n#define SZ(a)           int(a.size())\n#define open()          freopen(\"input.txt\", \"r\", stdin)\n#define show()          freopen(\"output.txt\", \"w\", stdout)\n#define read(a)         scanf(\"%d\",&a)\n#define read2(a,b)      scanf(\"%d%d\",&a,&b)\n#define read3(a,b,c)    scanf(\"%d%d%d\",&a,&b,&c)\n#define read4(a,b,c,d)  scanf(\"%d%d%d%d\",&a,&b,&c,&d)\n#define readI1(a)       scanf(\"%lld\",&a)\n#define readI2(a,b)     scanf(\"%lld %lld\",&a,&b)\n#define readI3(a,b,c)   scanf(\"%lld %lld %lld\",&a,&b,&c)\n#define readI4(a,b,c,d) scanf(\"%lld %lld %lld %lld\",&a,&b,&c,&d)\n#define BOUNDARY(i, j)  ((i >= 0 && i < w) && (j >= 0 && j < h))\n#define Mx 100009\n#define EPS 1e-12\n#define sq(x) ((x)*(x))\n#define sq_dist(a,b)    (sqrt(sq(a.x-b.x)+sq(a.y-b.y)));\n#define cross(o,a,b)    ((a.x-o.x)*(b.y-o.y)-(a.y-o.y)*(b.x-o.x))\nusing namespace std;\nint main()\n{\n\tint x0,y0,x1,y1,x2,y2;\n\tread4(x0,y0,x1,y1);\n\tdouble x,y;\n\tint n;\n\tread(n);\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tread2(x2,y2);\n\t\tif(x2==0 && y2==0 && x0==0 && y0==0) {printf(\"0.00000000000 0.00000000000\\n\");continue;}\n\n\t\tdouble z=(sqrt(sq(x0-x1)+sq(y0-y1))*sqrt(sq(x0-x2)+sq(y0-y2)));\n\t\tdouble costheta=((x1-x0)*(x2-x0)+(y1-y0)*(y2-y0))/z;\n\t\t//if(z==0.00000000000) {x=0.00000000000; y=0.00000000000;}\n\t\tdouble f=(x1-x0),f1=(sqrt(sq(x0-x1)+sq(y0-y1))),f2=(y1-y0);\n\t\t//if(f==0.00000000000 || f1==0.00000000000 || f2==0.00000000000) {x=0.00000000000; y=0.00000000000;}\n\t\tx=(sqrt(sq(x0-x2)+sq(y0-y2))*costheta)*(f/f1);\n\t\ty=(sqrt(sq(x0-x2)+sq(y0-y2))*costheta)*(f2/(sqrt(sq(x0-x1)+sq(y0-y1))));\n\t\tif( y==-0.00000000000) { y=fabs(y);}\n\t\tif(x==-0.00000000000 ) x=fabs(x);\n\t\tprintf(\"%.11f %.11f\\n\",x,y);\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <regex>\n#include <cstdio>\n#include <cmath>\n#include <cctype>\n#include <string>\n#include <vector>\n#include <list>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\nusing ll = long long int;\n#define rep(i,n) for(int i = 0; i < n; i++)\n#define FOR(i, a, b)  for(int i = (a); i < (b) ; i++)\n#define pb push_back\n#define SORT(v,n) sort(v, v+n)\n#define ALL(x) (x).begin(),(x).end()\n#define debug(x) cerr << #x << \": \" << x << '\\n'\n#define elif else if\n#define int ll\n//const int INF = 100100100;\nconst int INF = (1LL << 32);\nconst int MOD = (int)1e9 + 7;\nconst double EPS = 1e-9;\nint dx[8] = { 1, 0, -1, 0, 1, -1, -1, 1 };\nint dy[8] = { 0, 1, 0, -1, 1, 1, -1, -1 };\ntypedef vector<vector<int>> vvi;\ntypedef vector<vector<vector<int>>> vvvi;\n\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator+(Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator-(Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator*(double a) { return Point(a * x, a * y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x * x + y * y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point & p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator==(const Point & p) const {\n\t\treturn fabs(x - p.x) < EPS and fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x* b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x* b.y - a.y * b.x;\n}\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) : p1(p1), p2(p2) {}\n};\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n//直交判定\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//平行判定\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n//線分sに対する点pの射影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / base.norm();\n\treturn s.p1 + base * r;\n}\n\nsigned main() {\n\t//ios::sync_with_stdio(false);\n\tint x1, y1, x2, y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tint q;\n\tcin >> q;\n\tSegment seg = Segment(Point(x1, y1), Point(x2, y2));\n\trep(i, q) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tPoint p = project(seg, Point(x, y));\n\t\tprintf(\"%.9f %.9f\\n\", p.x, p.y);\n\t}\n\treturn 0;\n}\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\n// ???/????????????\nstruct Point {\n  double x, y;\n  Point(double x = 0.0, double y = 0.0):x(x), y(y){}\n  \n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(x * a, y * a); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x + y*y; }\n\n  bool operator < (const Point& p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator == (const Point& p) const {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\ntypedef Point Vector;\n\n// ??????/??´???\nstruct Segment {\n  Point p1, p2;\n};\ntypedef Segment Line;\n\n// ?????????????????????\ndouble dot(Vector a, Vector b)\n{\n  return a.x*b.x + a.y*b.y;\n}\n// ??????????????????????????§??????\ndouble cross(Vector a, Vector b)\n{\n  return a.x*b.y - a.y*b.x;\n}\n// ??´?????????\nbool isOrthogonal(Vector a, Vector b)\n{\n  return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n{\n  return isOrthogonal(a1 - a2, b1 - b2);\n}\nbool isOrthogonal(Segment s1, Segment s2)\n{\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n// ????????????\nbool isParallel(Vector a, Vector b)\n{\n  return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2)\n{\n  return isParallel(a1 - a2, b1 - b2);\n}\nbool isParallel(Segment s1, Segment s2)\n{\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n// ?°???±\nPoint project(Segment s, Point p)\n{\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nint main()\n{\n  Segment s;\n  cin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n  int q; cin >> q;\n  while(q--) {\n    Point p;\n    cin >> p.x >> p.y;\n    Point x = project(s, p);\n    printf(\"%.10f %.10f\\n\", x.x, x.y);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "// This code is from http://dai1741.github.io/maximum-algo-2012/cpp/geometry/geometries2d.h\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <map>\n#include <math.h>\n#include <complex>\n\n#include <iomanip>\n#include <set>\n#include <queue>\n#include <string>\n\nusing namespace std;\n#define rep(i,n) for (int i=0; i < (n); i++)\n\n// 主に以下の資料を参考に作成した。\n// - http://www.prefield.com/algorithm\n// - http://www.deqnotes.net/acmicpc/2d_geometry/\n// - https://github.com/infnty/acm/tree/master/lib/geometry\n// - サークルの先輩が作ったライブラリ\n\n/* 基本要素 */\n\ntypedef double D;      // 座標値の型。doubleかlong doubleを想定\ntypedef complex<D> P;  // Point\ntypedef pair<P, P> L;  // Line\ntypedef vector<P> VP;\nconst D EPS = 1e-9;    // 許容誤差。問題によって変える\n#define X real()\n#define Y imag()\n#define LE(n,m) ((n) < (m) + EPS)\n#define GE(n,m) ((n) + EPS > (m))\n#define EQ(n,m) (abs((n)-(m)) < EPS)\n\n// 内積　dot(a,b) = |a||b|cosθ\nD dot(P a, P b) {\n  return (conj(a)*b).X;\n}\n// 外積　cross(a,b) = |a||b|sinθ\nD cross(P a, P b) {\n  return (conj(a)*b).Y;\n}\n\n// 点の進行方向\nint ccw(P a, P b, P c) {\n  b -= a;  c -= a;\n  if (cross(b,c) >  EPS) return +1;  // counter clockwise\n  if (cross(b,c) < -EPS) return -1;  // clockwise\n  if (dot(b,c)   < -EPS) return +2;  // c--a--b on line\n  if (norm(b) < norm(c)) return -2;  // a--b--c on line or a==b\n  return 0;                          // a--c--b on line or a==c or b==c\n}\n\n/* 交差判定　直線・線分は縮退してはならない。接する場合は交差するとみなす。isecはintersectの略 */\n\n// 直線と点\nbool isecLP(P a1, P a2, P b) {\n  return abs(ccw(a1, a2, b)) != 1;  // return EQ(cross(a2-a1, b-a1), 0); と等価\n}\n\n// 直線と直線\nbool isecLL(P a1, P a2, P b1, P b2) {\n  return !isecLP(a2-a1, b2-b1, 0) || isecLP(a1, b1, b2);\n}\n\n// 直線と線分\nbool isecLS(P a1, P a2, P b1, P b2) {\n  return cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS;\n}\n\n// 線分と線分\nbool isecSS(P a1, P a2, P b1, P b2) {\n  return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 &&\n         ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;\n}\n\n// 線分と点\nbool isecSP(P a1, P a2, P b) {\n  return !ccw(a1, a2, b);\n}\n\n\n/* 距離　各直線・線分は縮退してはならない */\n\n// 点pの直線aへの射影点を返す\nP proj(P a1, P a2, P p) {\n  return a1 + dot(a2-a1, p-a1)/norm(a2-a1) * (a2-a1);\n}\n\n// 点pの直線aへの反射点を返す\nP reflection(P a1, P a2, P p) {\n  return 2.0*proj(a1, a2, p) - p;\n}\n\nD distLP(P a1, P a2, P p) {\n  return abs(proj(a1, a2, p) - p);\n}\n\nD distLL(P a1, P a2, P b1, P b2) {\n  return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);\n}\n\nD distLS(P a1, P a2, P b1, P b2) {\n  return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));\n}\n\nD distSP(P a1, P a2, P p) {\n  P r = proj(a1, a2, p);\n  if (isecSP(a1, a2, r)) return abs(r-p);\n  return min(abs(a1-p), abs(a2-p));\n}\n\nD distSS(P a1, P a2, P b1, P b2) {\n  if (isecSS(a1, a2, b1, b2)) return 0;\n  return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)),\n             min(distSP(b1, b2, a1), distSP(b1, b2, a2)));\n}\n\n// 2直線の交点\nP crosspointLL(P a1, P a2, P b1, P b2) {\n  D d1 = cross(b2-b1, b1-a1);\n  D d2 = cross(b2-b1, a2-a1);\n  if (EQ(d1, 0) && EQ(d2, 0)) return a1;  // same line\n  if (EQ(d2, 0)) throw \"kouten ga nai\";   // 交点がない\n  return a1 + d1/d2 * (a2-a1);\n}\n\n\n/* 円 */\n\n// Line and Circle\nD distLC(P a1, P a2, P c, D r) {\n  return max(distLP(a1, a2, c) - r, 0.0);\n}\n\n// Segment and Circle\nD distSC(P a1, P a2, P c, D r) {\n  D dSqr1 = norm(c-a1), dSqr2 = norm(c-a2);\n  if (dSqr1 < r*r ^ dSqr2 < r*r) return 0;  // 円が線分を包含するとき距離0ならここをORに変える\n  if (dSqr1 < r*r & dSqr2 < r*r) return r - sqrt(max(dSqr1, dSqr2));\n  return max(distSP(a1, a2, c) - r, 0.0);\n}\n\n// VP = vector<P>\nVP crosspointLC(P a1, P a2, P c, D r) {\n  VP ps;\n  P ft = proj(a1, a2, c);\n  if (!GE(r*r, norm(ft-c))) return ps;\n\n  P dir = sqrt(max(r*r - norm(ft-c), 0.0)) / abs(a2-a1) * (a2-a1);\n  ps.push_back(ft + dir);\n  if (!EQ(r*r, norm(ft-c))) ps.push_back(ft - dir);\n  return ps;\n}\n\nD distCC(P a, D ar, P b, D br) {\n  D d = abs(a-b);\n  return GE(d, abs(ar-br)) ? max(d-ar-br, 0.0) : abs(ar-br) - d;\n}\n\n// 2円の交点\nVP crosspointCC(P a, D ar, P b, D br) {\n  VP ps;\n  P ab = b-a;\n  D d = abs(ab);\n  D crL = (norm(ab) + ar*ar - br*br) / (2*d);\n  if (EQ(d, 0) || ar < abs(crL)) return ps;\n\n  P abN = ab * P(0, sqrt(ar*ar - crL*crL) / d);\n  P cp = a + crL/d * ab;\n  ps.push_back(cp + abN);\n  if (!EQ(norm(abN), 0)) ps.push_back(cp - abN);\n  return ps;\n}\n\n// 点pから円aへの接線の接点\nVP tangentPoints(P a, D ar, P p) {\n  VP ps;\n  D sin = ar / abs(p-a);\n  if (!LE(sin, 1)) return ps;  // ここでNaNも弾かれる\n  D t = M_PI_2 - asin(min(sin, 1.0));\n  ps.push_back(                 a + (p-a)*polar(sin, t));\n  if (!EQ(sin, 1)) ps.push_back(a + (p-a)*polar(sin, -t));\n  return ps;\n}\n\n// 2円の共通接線。返される各直線に含まれる頂点は円との接点となる\nvector<L> tangentLines(P a, D ar, P b, D br) {\n  vector<L> ls;\n  D d = abs(b-a);\n  rep (i,2) {\n    D sin = (ar - (1-i*2)*br) / d;\n    if (!LE(sin*sin, 1)) break;\n    D cos = sqrt(max(1 - sin*sin, 0.0));\n    rep (j,2) {\n      P n = (b-a) * P(sin, (1-j*2)*cos) / d;\n      ls.push_back(L(a + ar*n, b + (1-i*2)*br*n));\n      if (cos < EPS) break;  // 重複する接線を無視（重複していいならこの行不要）\n    }\n  }\n  return ls;\n}\n\n// 三角形の外心。点a,b,cは同一線上にあってはならない\nP circumcenter(P a, P b, P c) {\n  a = (a-c)*0.5;\n  b = (b-c)*0.5;\n  return c + crosspointLL(a, a*P(1,1), b, b*P(1,1));\n}\n\n// 点aと点bを通り、半径がrの円の中心を返す\nVP circlesPointsRadius(P a, P b, D r) {\n  VP cs;\n  P abH = (b-a)*0.5;\n  D d = abs(abH);\n  if (d == 0 || d > r) return cs;  // 必要なら !LE(d,r) として円1つになる側へ丸める\n  D dN = sqrt(r*r - d*d);          // 必要なら max(r*r - d*d, 0) とする\n  P n = abH * P(0,1) * (dN / d);\n  cs.push_back(a + abH + n);\n  if (dN > 0) cs.push_back(a + abH - n);\n  return cs;\n}\n\n// 点aと点bを通り、直線lに接する円の中心\nVP circlesPointsTangent(P a, P b, P l1, P l2) {\n  P n = (l2-l1) * P(0,1);\n  P m = (b-a) * P(0,0.5);\n  D rC = dot((a+b)*0.5-l1, n);\n  D qa = norm(n)*norm(m) - dot(n,m)*dot(n,m);\n  D qb = -rC * dot(n,m);\n  D qc = norm(n)*norm(m) - rC*rC;\n  D qd = qb*qb - qa*qc;  // qa*k^2 + 2*qb*k + qc = 0\n\n  VP cs;\n  if (qd < -EPS) return cs;\n  if (EQ(qa, 0)) {\n    if (!EQ(qb, 0)) cs.push_back((a+b)*0.5 - m * (qc/qb/2));\n    return cs;\n  }\n  D t = -qb/qa;\n  cs.push_back(              (a+b)*0.5 + m * (t + sqrt(max(qd, 0.0))/qa));\n  if (qd > EPS) cs.push_back((a+b)*0.5 + m * (t - sqrt(max(qd, 0.0))/qa));\n  return cs;\n}\n\n// 点集合を含む最小の円の中心\nP minEnclosingCircle(const VP& ps) {\n  P c;\n  double move = 0.5;\n  rep(i,39) {  // 2^(-39-1) \\approx 0.9e-12\n    rep(t,50) {\n      D max = 0;\n      int k = 0;\n      rep (j, ps.size()) if (max < norm(ps[j]-c)) {\n        max = norm(ps[j]-c);\n        k = j;\n      }\n      c += (ps[k]-c) * move;\n    }\n    move /= 2;\n  }\n  return c;\n}\n\n\n/* 多角形 */\n\n// 頂点の順序（sortやmax_elementに必要）\nnamespace std {\n  bool operator<(const P a, const P b) {\n    return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n  }\n}\n\n// 凸包\nVP convexHull(VP ps) {  // 元の点集合がソートされていいならVP&に\n  int n = ps.size(), k = 0;\n  sort(ps.begin(), ps.end());\n  VP ch(2*n);\n  for (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n    while (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;  // 余計な点も含むなら == -1 とする\n  for (int i = n-2, t = k+1; i >= 0; ch[k++] = ps[i--]) // upper-hull\n    while (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;\n  ch.resize(k-1);\n  return ch;\n}\n\n// 凸判定。縮退を認めないならccwの判定部分を != 1 とする\nbool isCcwConvex(const VP& ps) {\n  int n = ps.size();\n  rep (i, n) if (ccw(ps[i], ps[(i+1) % n], ps[(i+2) % n]) == -1) return false;\n  return true;\n}\n\n// 凸多角形の内部判定　O(n)\n// 点が領域内部なら1、境界上なら2、外部なら0を返す\nint inConvex(P p, const VP& ps) {\n  int n = ps.size();\n  int dir = ccw(ps[0], ps[1], p);\n  rep (i, n) {\n    int ccwc = ccw(ps[i], ps[(i + 1) % n], p);\n    if (!ccwc) return 2;  // 線分上に存在\n    if (ccwc != dir) return 0;\n  }\n  return 1;\n}\n\n// 凸多角形の内部判定　O(logn)\n// 点が領域内部なら1、境界上なら2、外部なら0を返す\nint inCcwConvex(const VP& ps, P p) {\n  int n = ps.size();\n  P g = (ps[0] + ps[n / 3] + ps[n*2 / 3]) / 3.0;\n  if (g == p) return 1;\n  P gp = p - g;\n\n  int l = 0, r = n;\n  while (l + 1 < r) {\n    int mid = (l + r) / 2;\n    P gl = ps[l] - g;\n    P gm = ps[mid] - g;\n    if (cross(gl, gm) > 0) {\n      if (cross(gl, gp) >= 0 && cross(gm, gp) <= 0) r = mid;\n      else l = mid;\n    }\n    else {\n      if (cross(gl, gp) <= 0 && cross(gm, gp) >= 0) l = mid;\n      else r = mid;\n    }\n  }\n  r %= n;\n  D cr = cross(ps[l] - p, ps[r] - p);\n  return EQ(cr, 0) ? 2 : cr < 0 ? 0 : 1;\n}\n\n// 多角形の内部判定\n// 点が領域内部なら1、境界上なら2、外部なら0を返す\nint inPolygon(const VP& ps, P p) {\n  int n = ps.size();\n  bool in = false;\n  rep (i, n) {\n    P a = ps[i] - p;\n    P b = ps[(i + 1) % n] - p;\n    if (EQ(cross(a,b), 0) && LE(dot(a,b), 0)) return 2;\n    if (a.Y > b.Y) swap(a,b);\n    if ((a.Y*b.Y < 0 || (a.Y*b.Y < EPS && b.Y > EPS)) && LE(cross(a, b), 0)) in = !in;\n  }\n  return in;\n}\n\n// 凸多角形クリッピング\nVP convexCut(const VP& ps, P a1, P a2) {\n  int n = ps.size();\n  VP ret;\n  rep(i,n) {\n    int ccwc = ccw(a1, a2, ps[i]);\n    if (ccwc != -1) ret.push_back(ps[i]);\n    int ccwn = ccw(a1, a2, ps[(i + 1) % n]);\n    if (ccwc * ccwn == -1) ret.push_back(crosspointLL(a1, a2, ps[i], ps[(i + 1) % n]));\n  }\n  return ret;\n}\n\n// 凸多角形の直径（最遠点対）\npair<int, int> convexDiameter(const VP& ps) {\n  int n = ps.size();\n  int i = min_element(ps.begin(), ps.end()) - ps.begin();\n  int j = max_element(ps.begin(), ps.end()) - ps.begin();\n  int maxI, maxJ;\n  D maxD = 0;\n  rep(_, 2*n) {\n    if (maxD < norm(ps[i]-ps[j])) {\n      maxD = norm(ps[i]-ps[j]);\n      maxI = i;\n      maxJ = j;\n    }\n    if (cross(ps[i]-ps[(i+1) % n], ps[(j+1) % n]-ps[j]) <= 0) j = (j+1) % n;\n    else                                                      i = (i+1) % n;\n  }\n  return make_pair(maxI, maxJ);\n}\n\n// 多角形の符号付面積\nD area(const VP& ps) {\n  D a = 0;\n  rep (i, ps.size()) a += cross(ps[i], ps[(i+1) % ps.size()]);\n  return a / 2;\n}\n\n// 多角形の幾何学的重心\nP centroid(const VP& ps) {\n  int n = ps.size();\n  D aSum = 0;\n  P c;\n  rep (i, n) {\n    D a = cross(ps[i], ps[(i+1) % n]);\n    aSum += a;\n    c += (ps[i] + ps[(i+1) % n]) * a;\n  }\n  return 1 / aSum / 3 * c;\n}\n\n// ボロノイ領域\nVP voronoiCell(P p, const VP& ps, const VP& outer) {\n  VP cl = outer;\n  rep (i, ps.size()) {\n    if (EQ(norm(ps[i]-p), 0)) continue;\n    P h = (p+ps[i])*0.5;\n    cl = convexCut(cl, h, h + (ps[i]-h)*P(0,1) );\n  }\n  return cl;\n}\n\n/* 幾何グラフ */\n\nstruct Edge {\n  int from, to;\n  D cost;\n  Edge(int from, int to, D cost) : from(from), to(to), cost(cost) {}\n};\nstruct Graph {\n  int n;\n  vector<vector<Edge> > edges;\n  Graph(int n) : n(n), edges(n) {}\n  void addEdge(Edge e) {\n    edges[e.from].push_back(e);\n    edges[e.to].push_back(Edge(e.to, e.from, e.cost));\n  }\n};\n\n// 線分アレンジメント（線分の位置関係からグラフを作成）\nGraph segmentArrangement(const vector<L>& segs, VP& ps) {\n  int n = segs.size();\n  rep (i, n) {\n    ps.push_back(segs[i].first);\n    ps.push_back(segs[i].second);\n    rep (j, i) {\n      if (isecSS(                 segs[i].first, segs[i].second, segs[j].first, segs[j].second))\n        ps.push_back(crosspointLL(segs[i].first, segs[i].second, segs[j].first, segs[j].second));\n    }\n  }\n  sort(ps.begin(), ps.end());\n  ps.erase(unique(ps.begin(), ps.end()), ps.end());\n\n  int m = ps.size();\n  Graph gr(m);\n  vector<pair<D, int> > list;\n  rep (i, n) {\n    list.clear();\n    rep (j, m) {\n      if (isecSP(segs[i].first, segs[i].second, ps[j]))\n        list.push_back(make_pair(norm(segs[i].first-ps[j]), j));\n    }\n    sort(list.begin(), list.end());\n    rep (j, list.size() - 1) {\n      int a = list[j  ].second;\n      int b = list[j+1].second;\n      gr.addEdge(Edge(a, b, abs(ps[a]-ps[b])));\n    }\n  }\n  return gr;\n}\n\n// 可視グラフ（点集合から見える位置へ辺を張ったグラフ）\nGraph visibilityGraph(const VP& ps, const vector<VP>& objs) {\n  int n = ps.size();\n  Graph gr(n);\n  rep (i,n) rep (j,i) {\n    P a = ps[i], b = ps[j];\n    if (!EQ(norm(a-b), 0)) rep (k, objs.size()) {\n      const VP& obj = objs[k];\n      int inStA = inConvex(a, obj);\n      int inStB = inConvex(b, obj);\n      if ((inStA ^ inStB) % 2 || inStA * inStB != 1 && inConvex((a+b)*0.5, obj) == 1) goto skip;\n      rep (l, obj.size()) {\n        P cur = obj[l];\n        P next = obj[(l + 1) % obj.size()];\n        if (isecSS(a, b, cur, next) && !isecSP(cur, next, a) && !isecSP(cur, next, b)) goto skip;\n      }\n    }\n    gr.addEdge( Edge(i, j, abs(a-b)) );\n    skip: {}\n  }\n  return gr;\n}\n\n\n/* その他 */\n\n// 重複する線分を併合する\nvector<L> mergeSegments(vector<L> segs) {\n  int n = segs.size();\n  rep (i,n) if (segs[i].second < segs[i].first) swap(segs[i].second, segs[i].first);\n\n  rep (i,n) rep (j,i) {\n    L &l1 = segs[i], &l2 = segs[j];\n    if (EQ(cross(l1.second-l1.first, l2.second-l2.first), 0)\n        && isecLP(l1.first, l1.second, l2.first)\n        && ccw   (l1.first, l1.second, l2.second) != 2\n        && ccw   (l2.first, l2.second, l1.second) != 2) {\n      segs[j] = L(min(l1.first, l2.first), max(l1.second, l2.second));\n      segs[i--] = segs[--n];\n      break;\n    }\n  }\n  segs.resize(n);\n  return segs;\n}\n\n\n// この辺にコードを載せるほどでもないが重要な定理とか図とか書いておくとよい気がします\n\n// 余弦定理\n// △ABC において、a = BC, b = CA, c = AB としたとき\n// a^2 = b^2 + c^2 ? 2bc cos ∠CAB\n\n// ヘロンの公式\n// 3辺の長さがa,b,cである三角形の面積T\n// T = sqrt{ s(s-a)(s-b)(s-c) }, s = (a+b+c)/2\n\n// ピックの定理\n// 多角形の頂点が全て格子点上にあり、内部に穴がないとき\n// S = i + b/2 - 1 (S:多角形の面積, i: 多角形の内部にある格子点の数, b: 辺上の格子点の数)\n\nint main()\n{\n\tL line;\n\tint x1,y1,x2,y2;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tline=L(P(x1,y1),P(x2,y2));\n\n\tint q;\n\tcin >> q;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tint x,y;\n\t\tcin >> x >> y;\n\t\tP point=P(x,y);\n\t\tP ans=proj(line.first,line.second,point) ;\n\t\tcout << fixed << setprecision(15) << ans.X << \" \" << ans.Y << endl;\n\t}\n\n\n}\n"
  },
  {
    "language": "C++",
    "code": "/* template.cpp {{{ */\n#include <bits/stdc++.h>\nusing namespace std;\n \n// #define int long long\n#define GET_MACRO(a, b, c, d, NAME, ...) NAME\n#define REP1(n) REP2(i_, n)\n#define REP2(i, n) REP3(i, 0, n)\n#define REP3(i, a, b) REP4(i, a, b, 1)\n#define REP4(i, a, b, s) for (long long i = (a); i < (long long)(b); i += (long long)(s))\n#define RREP1(n) RREP2(i_, n)\n#define RREP2(i, n) RREP3(i, 0, n)\n#define RREP3(i, a, b) RREP4(i, a, b, 1)\n#define RREP4(i, a, b, s) for (long long i = (b) - 1; i >= (long long)(a);  i -= (long long)(s))\n#define rep(...) GET_MACRO(__VA_ARGS__, REP4, REP3, REP2, REP1)(__VA_ARGS__)\n#define rrep(...) GET_MACRO(__VA_ARGS__, RREP4, RREP3, RREP2, RREP1)(__VA_ARGS__)\n#define fs first\n#define sc second\n#define all(c) std::begin(c), std::end(c)\n#define rall(c) (c).begin(), (c).end()\n#define pcnt(x) __builtin_popcountll(x)\n#define each(x, c) for (auto &&x : c)\n#define endl \"\\n\"\n#define y0 y0_\n#define y1 y1_\n#define yn yn_\n#define left left_\n#define right right_\n \n#define TMP_T template<typename T>\n#define TMP_TU template<typename T, typename U>\n#define TMP_Ts template<typename ...T>\n#define TMP_NTs template<size_t N, typename ...T>\n#define TMP_CT template<bool C, typename T = void>\n \n#ifndef DEBUG\n#define cerr no_output\nstruct NoOutput : ostream {\n  TMP_T ostream &operator<<(const T &){ return *this; }\n} no_output;\n#endif\n \nusing uint = unsigned;\nusing ll = long long;\nusing ull = unsigned long long;\nusing ld = long double;\nTMP_T using PQL = priority_queue<T, vector<T>, greater<T>>;\nTMP_T using PQG = priority_queue<T>;\nTMP_CT using enable_if_t = typename enable_if<C, T>::type;\n \nconst ll LLINF = 1e18 + 10;\n#ifndef int\nconst int INF = 1e9 + 10;\n#else\nconst int INF = LLINF;\n#endif\n \nconst int dx[] = {-1, 0, 1, 0, -1, 1, 1, -1};\nconst int dy[] = {0, -1, 0, 1, -1, -1, 1, 1};\n \nTMP_T inline constexpr T sq(T x){ return x * x; }\nTMP_TU inline T& chmin(T &x, U y){ if (x > y) x = y; return x; }\nTMP_TU inline T& chmax(T &x, U y){ if (x < y) x = y; return x; }\n \nTMP_NTs enable_if_t<(N >= sizeof...(T))> input_tuple(istream &, tuple<T...> &){}\nTMP_NTs enable_if_t<(N < sizeof...(T))> input_tuple(istream &is, tuple<T...> &x){ is >> get<N>(x); input_tuple<N + 1, T...>(is, x); }\nTMP_Ts ostream &operator>>(istream &is, tuple<T...> &x){ input_tuple<0, T...>(is, x); return is; }\nTMP_TU ostream &operator>>(istream &is, pair<T, U> &x){ return is >> x.first >> x.second; }\nTMP_NTs enable_if_t<(N >= sizeof...(T))> print_tuple(ostream &, const tuple<T...> &){}\nTMP_NTs enable_if_t<(N < sizeof...(T))> print_tuple(ostream &os, const tuple<T...> &x){ os << (N > 0 ? \" \" : \"\") << get<N>(x); print_tuple<N + 1, T...>(os, x); }\nTMP_Ts ostream &operator<<(ostream &os, const tuple<T...> &x){ print_tuple<0, T...>(os, x); return os; }\nTMP_TU ostream &operator<<(ostream &os, const pair<T, U> &x){ return os << x.first << \" \" << x.second; }\nTMP_T vector<T> reversed(const vector<T> &c){ auto d = c; reverse(all(d)); return d; }\nstring reversed(const string &s){ auto t = s; reverse(all(t)); return t; }\nTMP_T void unique(vector<T> &c){ sort(all(c)); c.erase(unique(all(c)), end(c)); }\nTMP_T vector<T> uniqued(const vector<T> &c){ auto d = c; unique(d); return d; }\n\n#undef TMP_T\n#undef TMP_TU\n#undef TMP_Ts\n#undef TMP_NTs\n#undef TMP_CT\n\nll gcd(ll a, ll b){ return b ? gcd(b, a % b) : a; }\nll lcm(ll a, ll b){ return a / gcd(a, b) * b; }\ntuple<ll, ll, ll> extgcd(ll a, ll b){\n  if (b){\n    ll g, x, y;\n    tie(g, x, y) = extgcd(b, a % b);\n    return make_tuple(g, y, x - a / b * y);\n  }\n  return make_tuple(a, 1, 0);\n}\nll invmod(ll a, ll m = 1000000007){\n  ll g, x;\n  tie(g, x, ignore) = extgcd(a, m);\n  return g == 1 ? (x + m) % m : 0;\n}\n\ninline ll in(){ ll x; cin >> x; return x; }\n \nstruct prepare {\n  prepare(){\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(12);\n    cerr << fixed << setprecision(12);\n#ifndef DEBUG\n    cin.tie(nullptr);\n#endif\n  }\n} prepare_;\n/* }}} */\n/* geometry.cpp {{{ */\n/* object {{{ */\nusing Real = long double;\nusing Point = complex<Real>;\n\nstruct Line {\n  Point p, q;\n  Line(){}\n  Line(const Point &p, const Point &q): p(p), q(q){}\n};\n\nstruct Circle {\n  Point p;\n  Real r;\n  Circle(){}\n  Circle(const Point &p, Real r): p(p), r(r){}\n};\n\nusing Segment = Line;\nusing Polygon = vector<Point>;\n\nnamespace std {\n  bool operator<(const Point &a, const Point &b){\n    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);\n  }\n}\n/* }}} */\n/* const {{{ */\nconst Real EPS = 1e-8l;\nconst Real PI = acos(-1.0l);\n/* }}} */\n/* compare {{{ */\nint sgn(Real x){\n  return (x > EPS) - (x < -EPS);\n}\n\nint sgn(Real x, Real y){\n  return sgn(x - y);\n}\n/* }}} */\n/* input {{{ */\nistream &operator>>(istream &is, Point &p){\n  Real x, y;\n  is >> x >> y;\n  p.real(x), p.imag(y);\n  return is;\n}\n\nistream &operator>>(istream &is, Line &l){\n  return is >> l.p >> l.q;\n}\n\nistream &operator>>(istream &is, Circle &c){\n  return is >> c.p >> c.r;\n}\n\nistream &operator>>(istream &is, Polygon &g){\n  each(p, g) is >> p;\n  return is;\n}\n/* }}} */\n/* output {{{ */\nostream &operator<<(ostream &os, const Point &p){\n  return os << p.real() << \" \" << p.imag();\n}\n\nostream &operator<<(ostream &os, const Line &l){\n  return os << l.p << \" \" << l.q;\n}\n\nostream &operator<<(ostream &os, const Circle &c){\n  return os << c.p << \" \" << c.r;\n}\n\nostream &operator<<(ostream &os, const Polygon &g){\n  for (int i = 0; i < g.size(); i++){\n    os << g[i];\n    if (i + 1 < g.size()) os << endl;\n  }\n  return os;\n}\n/* }}} */\n/* dot, cross {{{ */\nReal dot(const Point &a, const Point &b){\n  return real(conj(a) * b);\n}\n\nReal cross(const Point &a, const Point &b){\n  return imag(conj(a) * b);\n}\n/* }}} */\n/* ccw {{{ */\nint ccw(const Point &a, const Point &b, const Point &c){\n  Point u = b - a, v = c - a;\n  if (sgn(cross(u, v)) > 0) return 1;\n  if (sgn(cross(u, v)) < 0) return -1;\n  if (sgn(dot(u, v)) < 0) return 2;\n  if (sgn(norm(u), norm(v)) < 0) return -2;\n  return 0;\n}\n/* }}} */\n/* orthogonal, parallel {{{ */\nbool orthogonal(const Line &l, const Line &m){\n  return sgn(dot(l.q - l.p, m.q - m.p)) == 0;\n}\n\nbool parallel(const Line &l, const Line &m){\n  return sgn(cross(l.q - l.p, m.q - m.p)) == 0;\n}\n/* }}} */\n/* intersect {{{ */\nbool intersectLL(const Line &l, const Line &m){\n  return !parallel(l, m) ? true : parallel(l, Line(l.p, m.p));\n}\n\nbool intersectLS(const Line &l, const Segment &s){\n  return sgn(cross(l.q - l.p, s.p - l.p)) * sgn(cross(l.p - l.p, s.q - l.p)) <= 0;\n}\n\nbool intersectLP(const Line &l, const Point &p){\n  return ~ccw(l.p, l.q, p) & 1;\n}\n\nbool intersectSS(const Segment &s, const Segment &t){\n  return ccw(s.p, s.q, t.p) * ccw(s.p, s.q, t.q) <= 0\n      && ccw(t.p, t.q, s.p) * ccw(t.p, t.q, s.q) <= 0;\n}\n\nbool intersectSP(const Segment &s, const Point &p){\n  return !ccw(s.p, s.q, p);\n}\n/* }}} */\n/* project, refrection {{{ */\nPoint project(const Line &l, const Point &p){\n  Real t = dot(p - l.p, l.p - l.q) / norm(l.p - l.q);\n  return l.p + t * (l.p - l.q);\n}\n\nPoint reflect(const Line &l, const Point &p){\n  return p + 2.0l * (project(l, p) - p);\n}\n/* }}} */\n/* distance {{{ */\nReal distanceLP(const Line &l, const Point &p){\n  return abs(p - project(l, p));\n}\n\nReal distanceLL(const Line &l, const Line &m){\n  return intersectLL(l, m) ? 0.0l : distanceLP(l, m.p);\n}\n\nReal distanceLS(const Line &l, const Segment &s){\n  if (intersectLS(l, s)) return 0.0l;\n  return min(distanceLP(l, s.p), distanceLP(l, s.q));\n}\n\nReal distanceSP(const Segment &s, const Point &p){\n  if (sgn(dot(s.q - s.p, p - s.p)) <= 0) return abs(s.p - p);\n  if (sgn(dot(s.p - s.q, p - s.q)) <= 0) return abs(s.q - p);\n  return distanceLP(s, p);\n}\n\nReal distanceSS(const Segment &s, const Segment &t){\n  if (intersectSS(s, t)) return 0.0l;\n  return min({\n    distanceSP(s, t.p), distanceSP(s, t.q),\n    distanceSP(t, s.p), distanceSP(t, s.q)\n  });\n}\n/* }}} */\n/* cross point {{{ */\nPoint crossPoint(const Line &l, const Line &m){\n  Real a = cross(l.q - l.p, m.q - m.p);\n  Real b = cross(l.q - l.p, l.q - m.p);\n  if (sgn(a) == 0 && sgn(b) == 0) return m.p;\n  if (sgn(a) == 0) assert(false);\n  return m.p + b / a * (m.q - m.p);\n}\n/* }}} */\n/* }}} */\n\nsigned main()\n{\n  Point a, b, c;\n  int q;\n  cin >> a >> b >> q;\n  rep(q){\n    cin >> c;\n    cout << project(Line(a, b), c) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "/**計算幾何学の問題を解く際に利用するクラス******/\n//http://skyblueryu.blog54.fc2.com/blog-entry-27.html\n#define _USE_MATH_DEFINES\n#include <cmath>\n#include <vector>\n#include <cstdio>\n#include <iostream>\n#define EPS (pow(M_E,(double)-10))\n//マクロの書式については \n//http://www7b.biglobe.ne.jp/~robe/cpphtml/html01/cpp01030.html\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\n\nclass Point{\npublic:\n\tdouble x,y;\n\n\t//以下の記法に関しては\n\t//http://ameblo.jp/nana-2007-july/entry-10037680575.html\n\tPoint(double x = 0,double y = 0): x(x), y(y) {};\n\n\t/***演算子のオーバーロード***********/\n\tPoint operator + (Point p) { return Point(x + p.x,y + p.y);}\n\tPoint operator - (Point p) { return Point(x - p.x,y - p.y);}\n\tPoint operator * (double a) { return Point(a*x,a*y);}//スカラー倍\n\tPoint operator / (double a) { return Point(x/a,y/a);}//スカラー倍\n\t/***********************************/\n\n\tdouble norm() { return x*x+y*y;}//ベクトルのノルムを返す\n\tdouble abs() { return sqrt(norm());}//ベクトルの長さを返す\n\n\t/***演算子のオーバーロード2***********/\n\t//Pointはクラスオブジェクトなのでサイズが大きく値渡しは適さない\n\t//Point &pという記法は参照渡しでポインタでない変数\n\t//に対してアドレスを引数にとりたい場合に使う．\n\t//参照渡しとポインタ渡しについては以下\n\t//http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1320144958\n\t//http://homepage2.nifty.com/well/Reference.html#PASS_BY_REFERENCE\n\t//\n\t//Point &pの前のconst修飾子は関数内で引数のオブジェクトの内容を\n\t//勝手に書き換えないようにするために付けている．(const Point &p)\n\t//の後のconstはこの関数がconstメンバ関数であることを意味する．\n\t//constメンバ関数に関して詳しくは以下\n\t//http://www.s-cradle.com/developer/sophiaframework/tutorial/Cpp/const.html\n\n\tbool operator < (const Point &p) const{\n\t\t//(条件)?(処理1):(処理2)\n\t\t//条件が真なら処理1，偽なら処理2が実行される\n\t\treturn x != p.x ? x < p.x :y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\t/*************************************/\n\n};\n\ntypedef Point Vector;\n\n//ベクトルaとbの内積を計算する関数\n//これは参照渡しじゃなくていいんかいという疑問は正直ある\ndouble dot(Vector a,Vector b){\n\t//double dot(const Vector& a,const Vector& b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//ベクトルaとbの外積を計算する関数\ndouble cross(Vector a,Vector b){\n\t//double cross(const Vector& a,const Vector& b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n\n\n//線分を表す構造体\nstruct Segment{\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\n//円を表すクラス\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(),double r = 0.0):c(c), r(r) {}\n};\n\n//多角形の表現(多角形は点の列で表現できる)\ntypedef vector<Point> Polygon;\n\n\nint main(){\n\tPoint p1,p2;\n\tint Q;\n\tscanf(\"%lf %lf\",&p1.x,&p1.y);\n\tscanf(\"%lf %lf\",&p2.x,&p2.y);\n\tscanf(\"%d\",&Q);//クエリ数\n\n\tVector d((p2.x-p1.x),(p2.y-p1.y));//方向ベクトル\n\tdouble abs = d.abs();\n\td.x = d.x/abs;\n\td.y = d.y/abs;\n\n\tPoint p;\n\tVector v;//p1→p\n\tVector proj;\n\tfor(int q = 0;q < Q;q++){\n\t\tscanf(\"%lf %lf\",&p.x,&p.y);\n\n\t\tv.x = p.x - p1.x;\n\t\tv.y = p.y - p1.y;\n\t\tproj.x = d.x * dot(v,d);\n\t\tproj.y = d.y * dot(v,d);\n\t\t\n\t\tprintf(\"%.10f %.10f\\n\",proj.x + p1.x,proj.y + p1.y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<map>\n#include<string>\n#include <math.h>\n#include<algorithm>\n#include<functional>\n#define ll long long\n#define inf  999999999\n#define pa pair<int,int>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\nusing namespace std;\n\nclass Point{\n\tpublic:\n\tdouble x,y;\n\tPoint(double x=0,double y=0):x(x),y(y) {}\n\tPoint operator + (Point p) {return Point(x+p.x,y+p.y);}\n\tPoint operator - (Point p) {return Point(x-p.x,y-p.y);}\n\tPoint operator * (double a) {return Point(x*a,y*a);}\n\tPoint operator / (double a) {return Point(x/a,y/a);}\n\tdouble absv() {return sqrt(norm());}\n\tdouble norm() {return x*x+y*y;}\n\tbool operator < (const Point &p) const{\n\t\treturn x != p.x ? x<p.x: y<p.y;\n\t}\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;\n\nstruct Segment{\nPoint p1,p2;\n};\n\n\ndouble dot(Vector a,Vector b){\n\treturn a.x*b.x+a.y*b.y;\n}\ndouble cross(Vector a,Vector b){\n\treturn a.x*b.y-a.y*b.x;\n}\n\n//----------------kokomade temple------------\n\n\nint main(){\nint n;\ndouble a1,a2,a3,a4,a5,a6;\ncin>>a1>>a2>>a3>>a4;\ncin>>n;\nVector b,s;\nPoint p,q;\nb.x=a3-a1,b.y=a4-a2;\nb=b/b.absv();\np.x=a1,p.y=a2;\n\nfor(int i=0;i<n;i++){\ncin>>a5>>a6;\ns.x=a5-a1,s.y=a6-a2;\ndouble l=dot(s,b);\nq=p+b*l;\nprintf(\"%f %f\\n\",q.x,q.y);\n}\n\n\n\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <complex>\n#include <vector>\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\nusing namespace std;\n\ntypedef complex<double> Point; // 点\ntypedef Point Vector; // ベクトル\n\nstruct Segment{ // 線分\n  Point p1, p2;\n  Segment(){};\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}; // p1,p2をセット\n};\n\ntypedef Segment Line; // 直線\n\ntypedef vector<Point> Polygon; // 多角形\n\ndouble dotproduct(Vector a, Vector b) // 内積\n{\n  return real((conj(a) * b));\n}\n\ndouble crossproduct(Vector a, Vector b) // 外積\n{\n  return imag(conj(a) * b);\n}\n\ndouble dist(Point p1, Point p2) // 二点間の距離\n{\n  return abs(p1 - p2);\n}\n\nPoint project(Line l, Point p){ // 射影\n  double r = dotproduct(p - l.p1, l.p2 - l.p1) / norm(l.p2 - l.p1);\n  return l.p1 + (l.p2 - l.p1) * r;\n}\n\n#define EQ(a, b) (abs((a) - (b)) < EPS) // 二つのスカラーが等しいかどうか\n#define EQV(a, b) (EQ((a).X, (b).X) && EQ((a).Y, (b).Y)) // 二つのベクトルが等しいかどうか\n\nint main()\n{\n  Point p, q;\n  cin >> p.X >> p.Y >> q.X >> q.Y;\n  Line l(p,q);\n  int n;\n  cin >> n;\n  for(int i = 0; i < n; i++){\n    Point x;\n    cin >> x.X >> x.Y;\n    cout << project(l, x).X << \" \" << project(l, x).Y << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\nclass Point{\npublic:\n\tdouble x;\n\tdouble y;\n\tPoint(double x=0,double y=0) :x(x),y(y){ }\n\tPoint operator +(Point &p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator-(Point &p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(double a) {\n\t\treturn Point(x*a, y*a);\n\t}\n};\n\ntypedef struct {\n\tPoint p1, p2;\n}Line;\n\nint main() {\n\tLine s;\n\tcin >> s.p1.x; cin >> s.p1.y; cin >> s.p2.x; cin >> s.p2.y;\n\tdouble q;\n\tcin >> q;\n\tfor (double i = 0;i < q;i++) {\n\t\tPoint p,q;\n\t\tcin >> p.x; cin >> p.y;\n\t\tdouble prod = ((s.p2.x - s.p1.x)*(p.x - s.p1.x)) + ((s.p2.y - s.p1.y)*(p.y - s.p1.y));\n\t\tq = s.p1 +(s.p2 - s.p1)*(prod/((s.p1.x-s.p2.x)*(s.p1.x - s.p2.x)+ (s.p1.y - s.p2.y)*(s.p1.y - s.p2.y)));\n\t\tcout << q.x << \" \" << q.y << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\n#include<iomanip>\n#include<cmath>\n\nusing namespace std;\ntypedef long long ll;\n#define REP(i,n) for(int i=0;i<(int)(n);i++)\n\nclass point2d{\n    public:\n    double x,y;\n    constexpr static double EPS = 0.0000000001;\n\n    point2d() : x(0),y(0){}\n    point2d(double a, double b) :x(a), y(b){}\n\n    double add(double a, double b){\n        if(std::abs(a+b) < EPS * (std::abs(a)+std::abs(b))) return 0;\n        return a+b;\n    }\n    point2d operator+(point2d v){\n        point2d a(add(x, v.x), add(y, v.y)); return a;\n    }\n    point2d operator-(point2d v){\n        point2d a(add(x, -v.x), add(y, -v.y)); return a;\n    }\n    double operator*(point2d v){ //内積\n        return add(x*v.x, y*v.y);\n    }\n    point2d operator*(double v){\n        x *= v; y *= v; return (*this);\n    }\n    point2d operator/(double v){\n        if(v==0) cout << \"zero division!!!\" << endl;\n        x /= v; y /=v; return (*this);\n    }\n    void operator=(point2d v){\n        x = v.x; y = v.y;\n    }\n    bool operator==(point2d v){\n        return (x==v.x)&&(y==v.y);\n    }\n\n    double simeq(point2d v){\n        return ((x-v.x)<EPS && (v.x-x)<EPS && (y-v.y)<EPS && (v.y-y)<EPS);\n    }\n    double norm() { return add(x*x, y*y); }  //距離^2\n    double length() { return std::sqrt(add(x*x, y*y)); }  //距離\n    double isZero(){ point2d zero; return (*this).simeq(zero); }\n    double dot(point2d v){ return add(x*v.x, y*v.y); }   // 内積\n    double cross(point2d v){ return add(x*v.y, -y*v.x); } // 外積\n    double cosine(point2d v){\n        if((*this).isZero() || v.isZero()) cout << \"cannot calc cosine by zero!!!\" << endl;\n        double cos = (*this).dot(v) / (*this).length() / v.length();\n        return cos;\n    }\n    double sine(point2d v){\n        if((*this).isZero() || v.isZero()) cout << \"cannot calc sine by zero!!!\" << endl;\n        double sin = (*this).cross(v) / (*this).length() / v.length();\n        return sin;\n    }\n    bool parallel(point2d v, bool near=true){  // 平行\n        double cross = (*this).cross(v);\n        if(near)return cross<EPS && cross>-EPS;\n        else return cross==0.0;\n    }\n    bool orthogonal(point2d v, bool near=true){ // 直交\n        double dot = (*this).dot(v);\n        if(near)return dot<EPS && dot>-EPS;\n        else return dot==0.0;\n    }\n    int clockwise(point2d v){\n        double dot = (*this).dot(v);\n        double cross = (*this).cross(v);\n        if(cross>0.0) return -1; // 反時計回り\n        else if(cross<0.0) return 1; //時計回り\n        else if(dot>0.0 && (*this).norm() < v.norm()) return 2; // 直線上、向き同じ\n        else if(dot<0.0) return -2; // 直線上、逆向き\n        else return 0; // 線分上\n    }\n\n    friend std::ostream& operator<<(std::ostream &stream, const point2d v){\n        stream << std::fixed << std::setprecision(13) << std::showpoint << v.x << \" \" << v.y;\n        return stream;\n    }\n};\n\nint main(){\n    double x1, y1, x2, y2;\n    int q;\n    cin >> x1 >> y1 >> x2 >> y2 >> q;\n    point2d p1(x1,y1), p2(x2,y2);\n    double x,y;\n    REP(i,q){\n        cin >> x >> y;\n        point2d p(x,y);\n        cout << ((p2-p1) * ((p-p1)*(p2-p1)) / ((p2-p1).length() * (p2-p1).length()) + p1) << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y){}\n\n\tPoint operator + (Point p){ return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p){ return Point(x - p.x, y - p.y); }\n\tPoint operator * (Point p){ return Point(x * p.x, y * p.y); }\n\tPoint operator / (Point p){ return Point(x / p.x, y / p.y); }\n\n\tPoint operator * (double t){ return Point(x * t, y * t); }\n\tPoint operator / (double t){ return Point(x / t, y / t); }\n\n\n\tdouble abs(){ return sqrt(norm()); }\n\tdouble norm(){ return x * x + y * y; }\n\n\tbool operator<(const Point &p){ return (x != p.x) ? (x < p.x) : (y < p.y); }\n\tbool operator==(const Point &p)\n\t{\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\n\nclass Segment{\npublic:\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nPoint projection(Segment s, Point p){\n\tVector v1 = s.p2 - s.p1;\n\tVector v2 = p - s.p1;\n\treturn s.p1 + v1 * dot(v1, v2) / v1.norm();\n}\n\nint main()\n{\n\tSegment s;\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\n\tint q; cin >> q;\n\tfor (int i = 0; i < q; ++i){\n\t\tPoint p; cin >> p.x >> p.y;\n\t\tPoint res = projection(s, p);\n\t\tcout << res.x << \" \" << res.y << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "\n#include <iostream>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <algorithm>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n  double x,y;\n\n  Point(double x = 0,double y = 0): x(x),y(y){}\n  Point operator + (Point p){ return Point(x + p.x , y + p.y); }\n  Point operator - (Point p){ return Point(x - p.x , y - p.y); }\n  Point operator * (double a){ return Point(a * x , a * y); }\n  Point operator / (double a){ return Point(x / a , y / a); }\n\n  double abs(){ return sqrt(norm()); }\n  double norm(){ return x * x + y * y; }\n\n  bool operator < (const Point &p) const{\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return (fabs(x - p.x) < EPS) && (fabs(y - p.y) < EPS);\n  }\n};\ntypedef Point Vector;\n\nstruct Segment{\n  Point p1,p2;\n};\ntypedef Segment Line;\n\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(),double r = 0.0): c(c),r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\ndouble norm(Vector a){\n  return  a.x * a.x + a.y * a.y;\n}\n\ndouble abs(Vector a){\n  return sqrt(norm(a));\n}\n\ndouble dot(Vector a,Vector b){\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a,Vector b){\n  return a.x * b.y - a.y * b.x;\n}\n\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1 - a1,b1 - b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2 - s1.p1,s2.p2 - s2.p1) , 0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1 - a2 , b1 - b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2 - s1.p1 , s2.p2 - s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1 , base / norm(base));\n  return s.p1 + base * r;\n}\n\nPoint reflect(Segment s,Point p){\n  return p + (project(s,p) - p) * 2.0;\n}\n\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0,Point p1,Point p2){\n  Vector a = p1 - p0;\n  Vector b = p2 - p0;\n  if(cross(a,b) > EPS)return COUNTER_CLOCKWISE;\n  if(cross(a,b) < -EPS)return CLOCKWISE;\n  if(dot(a,b) < -EPS)return ONLINE_BACK;\n  if(a.norm() < b.norm())return ONLINE_FRONT;\n  return ON_SEGMENT;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n  return (ccw(p1,p2,p3) * ccw(p1,p2,p4) <= 0 && \n          ccw(p3,p4,p1) * ccw(p3,p4,p2) <= 0);\n}\n\nbool intersect(Segment s1,Segment s2){\n  return intersect(s1.p1 , s1.p2 , s2.p1 , s2.p2);\n}\n\ndouble getDistance(Vector a,Vector b){\n  return abs(a - b);\n}\n\ndouble getDistanceLP(Line l,Point p){\n  return abs(cross(l.p2 - l.p1 , p - l.p1) / abs(l.p2 - l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n  if(dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n  if(dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n  return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n  if(intersect(s1,s2))return 0.0;\n  return min(min(getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2)),\n             min(getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)));\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base = s2.p2 - s2.p1;\n  double d1 = abs(cross(base,s1.p1 - s2.p1));\n  double d2 = abs(cross(base,s1.p2 - s2.p1));\n  double t = d1 / (d1 + d2);\n  return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\npair<Point,Point> getCrossPoints(Circle c,Line l){\n  // assert(intersect(c,l));\n  Vector pr = project(l,c.c);\n  Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n  double base = sqrt(c.r * c.r - norm(pr - c.c));\n  return make_pair(pr + e * base , pr - e * base);\n}\n\ndouble arg(Vector p){\n  return atan2(p.y,p.x);\n}\n\nVector polar(double a,double r){\n  return Point(cos(r) * a, sin(r) * a);\n}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n  // assert(intersect(c1,c2));\n  double d = abs(c1.c - c2.c);\n  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n  double t = arg(c2.c - c1.c);\n  return make_pair(c1.c + polar(c1.r,t + a),c1.c + polar(c1.r,t - a));\n}\n\nint contains(Polygon g,Point p){\n  int n = g.size();\n  bool x = false;\n  for(int i = 0;i < n;i++){\n    Point a = g[i] - p, b = g[(i + 1) % n] - p;\n    if(abs(cross(a,b)) < EPS && dot(a,b) < EPS)return 1;\n    if(a.y < b.y)swap(a,b);\n    if(a.y < EPS && EPS < b.y && cross(a,b) > EPS)x = !x;\n  }\n  return (x ? 2 : 0);\n}\n\nPolygon andrewScan(Polygon s){\n  Polygon u,l;\n  if(s.size() < 3)return s;\n  sort(s.begin(),s.end());\n  u.push_back(s[0]);\n  u.push_back(s[1]);\n\n  l.push_back(s[s.size() - 1]);\n  l.push_back(s[s.size() - 2]);\n\n  for(int i = 2;i < s.size();i++){\n    for(int n = u.size();n >= 2 && ccw(u[n-2],u[n-1],s[i]) != CLOCKWISE;n--){\n      u.pop_back();\n    }\n    u.push_back(s[i]);\n  }\n\n  for(int i = s.size() - 3; i >= 0;i--){\n    for(int n = l.size();n >= 2 && ccw(l[n-2],l[n-1],s[i]) != CLOCKWISE;n--){\n      l.pop_back();\n    }\n    l.push_back(s[i]);\n  }\n  reverse(l.begin(),l.end());\n  for(int i = u.size() - 2;i >= 1;i--)l.push_back(u[i]);\n  return l;\n}\n\n#define BOTTOM 0\n#define LEFT 1\n#define RIGHT 2\n#define TOP 3\n\nclass EndPoint{\npublic:\n  Point p;\n  int seg,st;\n  EndPoint(){}\n  EndPoint(Point p,int seg,int st): p(p),seg(seg),st(st){}\n\n  bool operator < (const EndPoint &ep) const{\n    if(p.y == ep.p.y){\n      return st < ep.st;\n    }else{\n      return p.y < ep.p.y;\n    }\n  }\n};\n\nEndPoint EP[2 * 100000];\n\nint manhattanIntersection(vector<Segment> S){\n  int n = S.size();\n  for(int i = 0,k = 0;i < n;i++){\n    if(S[i].p1.y == S[i].p2.y){\n      if(S[i].p1.x > S[i].p2.x)swap(S[i].p1,S[i].p2);\n    }else if(S[i].p1.y > S[i].p2.y){\n      swap(S[i].p1,S[i].p2);\n    }\n\n    if(S[i].p1.y == S[i].p2.y){\n      EP[k++] = EndPoint(S[i].p1,i,LEFT);\n      EP[k++] = EndPoint(S[i].p2,i,RIGHT);\n    }else{\n      EP[k++] = EndPoint(S[i].p1,i,BOTTOM);\n      EP[k++] = EndPoint(S[i].p2,i,TOP);\n    }\n  }\n\n  sort(EP,EP + (2 * n));\n\n  set<int> BT;\n  BT.insert(1000000001);\n  int cnt = 0;\n  for(int i = 0;i < 2 * n;i++){\n    if(EP[i].st == TOP){\n      BT.erase(EP[i].p.x);\n    }else if(EP[i].st == BOTTOM){\n      BT.insert(EP[i].p.x);\n    }else if(EP[i].st == LEFT){\n      set<int>::iterator b = lower_bound(BT.begin(),BT.end(),S[EP[i].seg].p1.x);\n      set<int>::iterator e = upper_bound(BT.begin(),BT.end(),S[EP[i].seg].p2.x);\n      cnt += distance(b,e);\n    }\n  }\n  return cnt;\n}\n\nint main(){\n  int n;\n  Line a;\n  cin >> a.p1.x >> a.p1.y;\n  cin >> a.p2.x >> a.p2.y;\n  cin >> n;\n  for(int i = 0;i < n;i++){\n    Point p;\n    cin >> p.x >> p.y;\n    Point ans = project(a,p);\n    printf(\"%.10f %.10f\\n\",ans.x,ans.y);\n  }\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n//点を表す構造体\nclass Point {\n  public:\n  double x,y;\n  Point(double x=0,double y=0): x(x),y(y){}\n\n  //各種演算\n  Point operator+ (Point p) { return Point(x+p.x,y+p.y); }\n  Point operator- (Point p) { return Point(x-p.x,y-p.y); }\n  Point operator* (double a) {return Point(a*x,a*y); }\n  Point operator/ (double a) {return Point(x/a,y/a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x*x+y*y; }\n\n  bool operator< (const Point &p) const{\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n\n  bool operator> (const Point &p) const{\n    return x!=p.x ? x>p.x : y>p.y;\n  }\n\n  bool operator== (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n};\n\n//ベクトルを表す構造体\ntypedef Point Vector;\n\n//線分を表す構造体\nstruct Segment{\n  Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}\n  Point p1,p2;\n};\n\n//直線を表す構造体\ntypedef Segment Line;\n\n//円を表すクラス\nclass Circle{\n  public:\n  //円の中心\n  Point c;\n  //半径\n  double r;\n  Circle(Point c=Point(),double r=0.0): c(c),r(r) {}\n};\n\n//多角形の表現\ntypedef vector<Point> Polygon;\n\n//ベクトルaとbの内積\ndouble dot(Vector a,Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//ベクトルaとbの外積\ndouble cross(Vector a,Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//ベクトルaとbの直交判定\nbool isOrthogonal(Vector a,Vector b){\n  return equals(dot(a,b),0.0);\n}\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n  return isOrthogonal(a1-a2,b1-b2);\n}\nbool isOrthogonal(Segment s1,Segment s2){\n  return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n//ベクトルaとbの平行判定\nbool isParallel(Vector a,Vector b){\n  return equals(cross(a,b),0.0);\n}\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n  return isParallel(a1-a2,b1-b2);\n}\nbool isParallel(Segment s1,Segment s2){\n  return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\n//線分sに対する点pの射影\nPoint project(Segment s,Point p){\n  Vector base=s.p2-s.p1;\n  double r=dot(p-s.p1,base)/base.norm();\n  return s.p1+base*r;\n}\n\n//線分s1と線分s2の交点(ダメらしい)\nPoint getCrossPoint(Segment s1,Segment s2){\n  Vector base=s2.p2-s2.p1;\n  double d1=abs(cross(base,s1.p1-s2.p1));\n  double d2=abs(cross(base,s1.p2-s2.p1));\n  double t=d1/(d1+d2);\n  return s1.p1+(s1.p2-s1.p1)*t;\n}\n\n\nint main(){\n  cin.tie(nullptr);\n  ios_base::sync_with_stdio(false);\n  int x1,x2,y1,y2;\n  cin>>x1>>y1>>x2>>y2;\n  Point p1(x1,y1),p2(x2,y2);\n  int q;\n  cin>>q;\n  for(int i=0;i<q;i++){\n    int x,y;\n    cin>>x>>y;\n    Point p(x,y);\n    Line l(p1,p2);\n    cout<<fixed<<setprecision(15)<<project(l,p).x<<' '<<project(l,p).y<<'\\n';\n  }\n  \n  return(0);\n} \n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n#define _GLIBCXX_DEBUG\nusing namespace std;\n \ntypedef long long ll;\ndouble pi=3.14159265359; //円周率\ndouble EPS = 1e-10; //誤差\n \nclass point\n{\n    public:\n    double x,y;\n \n    point()\n    {x=0;y=0;}\n    //コンストラクタ\n    point(double a,double b)\n    {\n        x=a;y=b;\n    }\n \n    //足し算\n    point operator + (point p)\n    {\n        return point(x+p.x,y+p.y);\n    }\n    //引き算\n    point operator - (point p)\n    {\n        return point(x-p.x,y-p.y);\n    }\n    //d倍\n    point operator * (double d)\n    {\n        return point(x*d,y*d);\n    }\n    //x座標昇順でソートする\n    bool operator < (const point &p)\n    const {\n        if(std::abs(x-p.x)>EPS)\n            return x<p.x;\n        else\n            return y<p.y;\n    }\n    //内積\n    //直交判定...abs(dot())<EPS\n    double dot(point p)\n    {\n        return x*p.x+y*p.y;\n    }\n    //外積\n    //平行判定...abs(cross())<EPS\n    double cross(point p)\n    {\n        return x*p.y-y*p.x;\n    }\n    //絶対値を求める\n    double abs()\n    {\n        return sqrt(x*x+y*y);\n    }\n    //単位ベクトルを求める\n    point ev()\n    {\n        return point(x/abs(),y/abs());\n    }\n    //単位法線ベクトル（の1つ）を求める\n    //もうひとつは-1倍することで求まる\n    point nev()\n    {\n        return point(-y/abs(),x/abs());\n    }\n    //2点間の距離を求める\n    //distがEPS未満なら2点は同じ位置にあるとみなす\n    double pdist(point p)\n    {\n        point v=point(p.x-x,p.y-y);\n        return v.abs();\n    }\n    //この点と直線p1-p2の距離を求める\n    double ldist(point p1,point p2)\n    {\n        return std::abs((p2.y-p1.y)*x-(p2.x-p1.x)*y+p2.x*p1.y+p2.y*p1.x)/(p2-p1).abs();\n    }\n \n};\n \n//線分p1-p2上に点qがあるか判定\nbool on_seg(point p1,point p2,point q)\n{\n    return abs((p1-q).cross(p2-q))<EPS && (p1-q).dot(p2-q)<=EPS;\n}\n//直線p1-p2と直線q1-q2の交点\n//線分の交差判定はこれの戻り値が線分上にあるかどうかで判定する...on_seg(p1,p2,intersection(p1,p2,q1,q2))\npoint intersection(point p1,point p2,point q1,point q2)\n{\n    return p1 + (p2-p1) * ((q2-q1).cross(q1-p1) / (q2-q1).cross(p2-p1));\n}\n//n頂点からなる多角形の面積を求める(vectorで頂点は与えられる)\ndouble area(vector<point> p)\n{\n    double ret=0;\n    for(int i=0;i<p.size()-1;i++)\n    {\n        ret+=p[i].cross(p[i+1]);\n    }\n    ret+=p[p.size()-1].cross(p[0]);\n    ret/=2;\n    return ret;\n}\n/*\n3点a,b,cをa->b->cと進むとき、\n* a->bで時計方向に折れてb->c (clockwise)\n* a->bで反時計方向に折れてb->c(counter clockwise)\n* a->bで逆を向いてaを通り越してb->c(c--a--b on line)\n* a->bでそのままb->c(a--b--c on line)\n* a->bで逆を向いてb->c(a--c--b on line)\n \nのいずれのパターンかを判定する\n*/\nint ccw(point a,point b,point c)\n{\n    b=b-a;c=c-a;\n    if(b.cross(c)>EPS)\n        return 1; //counter clockwise\n    if(b.cross(c)<-EPS)\n        return -1; //clockwise\n    if(b.dot(c)<-EPS)\n        return 2; //c--a--b on line\n    if(b.x*b.x+b.y*b.y < c.x*c.x+c.y*c.y)\n        return -2; //a--b--c on line\n    return 0; //a--c--b on line\n}\n//凸包を求める\nvector<point> convex_hull(vector<point> p)\n{\n    int n=p.size();\n    int k=0;\n    sort(p.begin(),p.end());\n    vector<point> ch(2*n);\n    //lower-hull 下側凸包\n    for(int i=0;i<n;ch[k++]=p[i++])\n    {\n        while(k>=2 && ccw(ch[k-2],ch[k-1],p[i])<=0)\n            k--;\n    }\n    //upper-hull 上側凸包\n    for(int i=n-2,t=k+1;i>=0;ch[k++]=p[i--])\n    {\n        while(k>=t && ccw(ch[k-2],ch[k-1],p[i])<=0)\n            k--;\n    }\n    ch.resize(k-1);\n    return ch;\n}\n \nint main()\n{\n    cout.setf(ios::fixed);\n    cout.precision(12);\n    point p1,p2;\n    double a,b,c,d;\n    cin>>a>>b>>c>>d;\n    p1=point(a,b);\n    p2=point(c,d);\n    int q;\n    cin>>q;\n    for(int i=0;i<q;i++)\n    {\n        point f;\n        cin>>a>>b;\n        f=point(a,b);\n        point q;\n        q=f+(p2-p1).nev()*f.ldist(p1,p2);\n        //cerr<<q.x<<\" \"<<q.y<<endl;\n        if(abs((p2-p1).cross(q))>EPS)\n            q=q-(p2-p1).nev()*f.ldist(p1,p2)*2;\n        cout<<q.x<<\" \"<<q.y<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <cstdio>\n\nusing namespace std;\n\nstruct Point {\n  double x;\n  double y;\n};\n\ndouble dot(Point a, Point b) {\n  return a.x * b.x + a.y * b.y;\n}\n\nPoint vector_sub(Point a, Point b) {\n  Point c;\n  c.x = b.x - a.x;\n  c.y = b.y - a.y;\n  return c;\n}\n\ndouble distance2(Point a, Point b) {\n  return pow(a.x - b.x, 2) + pow(a.y - b.y, 2);\n}\n\nint main(void) {\n  Point p0,p1,p2;\n  int q;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  cin >> q;\n\n  for(int i = 0; i < q; i++) {\n    cin >> p0.x >> p0.y;\n    Point v10 = vector_sub(p1, p0);\n    Point v12 = vector_sub(p1, p2);\n    double aNorm2 = distance2(p1, p2);\n    double k = dot(v10, v12) / aNorm2;\n    printf(\"%.10lf %.10lf\\n\", p1.x + k * v12.x, p1.y + k * v12.y);\n  }\n\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing u64 = uint_fast64_t; \nusing pii =  pair<int, int>;\nusing pll =  pair<long long, long long>;\n#define rep(i, n) for(int i = 0; i < (n); ++i)\n#define all(x) (x).begin(),(x).end()\nconstexpr char ln =  '\\n';\n//////////////////////////////////////////////////////////////////////////////\n\nusing DD = double; // 精度が足りないときはlong double\nconstexpr DD EPS = 1e-11;\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\ninline int sgn(DD a) {return (a < -EPS) ? -1 : (a > EPS) ? 1 : 0;}\n\n//点\nstruct Point {\n    DD x, y;\n    Point (DD x = 0, DD y = 0): x(x), y(y) {}\n\n    Point operator+(const Point &p) const { return Point(*this) += p;}\n    Point operator-(const Point &p) const { return Point(*this) -= p;}\n    Point operator*(DD a) const { return Point(*this) *= a;}\n    Point operator/(DD a) const { return Point(*this) /= a;}\n    Point& operator+=(const Point &p) { x += p.x; y += p.y; return *this;}\n    Point& operator-=(const Point &p) { x -= p.x; y -= p.y; return *this;}\n    Point& operator*=(DD a) { x *= a; y *= a; return *this;}\n    Point& operator/=(DD a) { x /= a; y /= a; return *this;}\n    bool operator== (const Point &p) const { return !sgn(x - p.x) && !sgn(y - p.y);}\n    bool operator!= (const Point &p) const { return sgn(x - p.x) || sgn(y - p.y);}\n    bool operator< (const Point &p) const {\n        if (sgn(x - p.x)) return sgn(x - p.x) < 0;\n        return sgn(y - p.y) < 0;\n    }\n    friend istream& operator >>(istream& is, Point& p) { is >> p.x >> p.y; return is;}\n    friend ostream& operator <<(ostream& os, const Point& p) { os << p.x << \" \" << p.y; return os;}\n};\n\n//ベクトル\nusing Vector = Point;\n\ninline DD norm(const Vector &a) { return a.x * a.x + a.y * a.y;}\ninline DD abs(const Vector &a) { return sqrt(norm(a));}\ninline DD dot(const Vector &a, const Vector &b) { return a.x * b.x + a.y * b.y;}\ninline DD cross(const Vector &a, const Vector &b) { return a.x * b.y - a.y * b.x;}\ninline Point rot(const Point &p, DD ang) { return Point(cos(ang) * p.x - sin(ang) * p.y, sin(ang) * p.x + cos(ang) * p.y);}\ninline Point rot90(const Point &p) { return Point(-p.y, p.x);}\ninline DD arg(const Vector &p) { return atan2(p.y, p.x);}\n\n//線分\nstruct Segment {\n    Point p1,p2;\n    Segment() {};\n    Segment(Point p1, Point p2) : p1(p1),p2(p2) {}\n};\n\n//直線\nusing Line = Segment;\n\n// 円\nstruct Circle {\n    Point c;\n    DD r;\n    Circle(Point c = Point(), DD r = 0): c(c), r(r) {}\n    friend istream& operator >>(istream& is, Circle& C) { is >> C.c >> C.r; return is;}\n    friend ostream& operator <<(ostream& os, const Circle& C) { os << C.c << \" \" << C.r; return os;}\n};\n\n//多角形\nusing Polygon = vector<Point>;\n\n//射影\nPoint project(const Segment &s, const Point &p) {\n    Vector base = s.p2 - s.p1;\n    DD r = dot(p - s.p1, base) / norm(base);\n    return s.p1 + base * r;\n}\n\n//線対称\ninline Point reflect(const Segment &s, const Point &p) {return p + (project(s,p) - p) * 2;}\n\nint ccw(const Point &p0, const Point &p1, const Point &p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a,b) > EPS) return 1; //p0,p1から見てp2は左側(反時計回り)\n    if (cross(a,b) < -EPS) return -1; //p0,p1から見てp2は右側(時計回り)\n    if (dot(a,b) < -EPS) return 2; //p2-p0-p1の順に一直線上\n    if (norm(a) < norm(b)) return -2; //p0-p1-p2の順に一直線上\n    return 0; //p0-p2-p1の順に一直線上\n}\n\n//線分p1,p2とp3,p4の交差判定\ninline bool intersect(const Point &p1, const Point &p2, const Point &p3, const Point &p4) { return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);}\ninline bool intersect(const Segment &s1, const Segment &s2) { return intersect(s1.p1, s1.p2, s2.p1, s2.p2);}\n\ninline DD getDistanceLP(const Line &l, const Point &p) { return abs(cross(l.p2 - l.p1,p - l.p1) / abs(l.p2 - l.p1));}\nDD getDistanceSP(const Segment &s, const Point &p) {\n    if (dot(s.p2 - s.p1,p - s.p1) < 0.0) return abs(p - s.p1);\n    if (dot(s.p1 - s.p2,p - s.p2) < 0.0) return abs(p - s.p2);\n    return getDistanceLP(s, p);\n}\nDD getDistance(const Segment &s1, const Segment &s2) {\n    if (intersect(s1, s2)) return (DD)0;\n    return min({getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2), getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)});\n}\n\n//線分と線分の交点\nPoint getCrossPoint(const Segment &s1, const Segment &s2) {\n    Vector base = s2.p2 - s2.p1;\n    DD d1 = abs(cross(base, s1.p1 - s2.p1));\n    DD d2 = abs(cross(base, s1.p2 - s2.p1));\n    DD t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n//円と直線の交差判定\ninline bool intersect(const Circle &c, const Line &l) { return getDistanceLP(l, c.c) - c.r < EPS;}\n//円と円の交差判定\ninline bool intersect(const Circle &c1, const Circle &c2) { return abs(c1.c - c2.c) - (c1.r + c2.r) < EPS && fabs(c1.r - c2.r) - abs(c1.c - c2.c) < EPS;}\n\n//円と線分の交点\npair<Point, Point> getCrossPoints(const Circle &c, const Line &l) {\n    assert(intersect(c,l));\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n    DD base = sqrt(c.r * c.r - norm(pr - c.c));\n    return make_pair(pr + e * base, pr - e * base);\n}\n\ninline Vector polar(DD a, DD r) { return Point(cos(r) * a, sin(r) * a);}\n\n//円と円の交点\npair<Point, Point> getCrossPoints(const Circle &c1, const Circle &c2) {\n    assert(intersect(c1, c2));\n    DD d = abs(c1.c - c2.c);\n    DD a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (DD(2) * c1.r * d));\n    DD t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n//多角形の面積\nDD area(const Polygon &g) {\n    const int N = g.size();\n    DD ret = 0;\n    for (int i = 0; i < N; ++i) {\n        ret += cross(g[i],g[(i+1)%N]);\n    }\n    return fabs(ret)/2;\n}\n\n// 多角形-点の包含判定\nint containment(const Polygon &g, const Point &p) {\n    const int N = g.size();\n    int cnt = 0;\n    for (int i = 0; i < N; ++i) {\n        if (norm(g[i] - p) < EPS || norm(g[(i+1)%N] - p) < EPS || ccw(g[i], g[(i+1)%N], p) == 0) {\n            return 1; // pがgの辺上に存在する\n        }\n        Point I = Point(2e9 + p.x, 2e9 + 574677631 + p.y);\n        if (ccw(I, p, g[i]) == 0 || ccw(I, p, g[(i+1)%N]) == 0) continue;\n        if (intersect(I, p, g[i], g[(i+1)%N])) ++cnt;\n    }\n    if (cnt&1) return 2; // pがgに含まれる\n    else return 0; // pがgに含まれない\n}\n\n//象限\nint ort(const Point &a) {\n    if (norm(a) < EPS) return 0;\n    if (a.y > 0) return a.x > 0 ? 1 : 2;\n    return a.x > 0 ? 4 : 3;\n}\n\nbool xsort(const Point &a, const Point &b) {\n    if (equals(a.x, b.x)) return a.y < b.y;\n    return a.x < b.x;\n}\n\nbool ysort(const Point &a, const Point &b) {\n    if (equals(a.y, b.y)) return a.x < b.x;\n    return a.y < b.y;\n}\n\nbool argsortcross(const Point &a, const Point &b) {\n    int ao = ort(a), bo = ort(b);\n    if (ao != bo) return ao < bo;\n    return cross(a,b) > 0;\n}\n\nbool argsortatan2(const Point &a, const Point &b) {\n    return atan2(a.y, a.x) < atan2(b.y, b.x);\n}\n\n//凸包\nPolygon andrewScan(Polygon s) {\n    Polygon u,l;\n    const int N = s.size();\n    if (N < 3) return s;\n    sort(s.begin(), s.end(), xsort);\n    u.emplace_back(s[0]);\n    u.emplace_back(s[1]);\n    l.emplace_back(s[N-1]);\n    l.emplace_back(s[N-2]);\n    \n    for (int i = 2; i < s.size(); ++i) {\n        // 凸包上の点も含めるなら ccw() == 1\n        for (int n = u.size(); n >= 2 && ccw(u[n-2],u[n-1],s[i]) != -1; --n) {\n            u.pop_back();\n        }\n        u.emplace_back(s[i]);\n    }\n\n    for (int i = N - 3; i >= 0; --i) {\n        // 凸包上の点も含めるなら ccw() == 1\n        for (int n = l.size(); n >= 2 && ccw(l[n-2], l[n-1], s[i]) != -1; --n) {\n            l.pop_back();\n        }\n        l.emplace_back(s[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for (int i = u.size() - 2; i >= 1; --i) l.emplace_back(u[i]);\n\n    return l;\n}\n\n//最遠点対\nDD farthestpointpair(const Polygon &g) {\n    const int N = g.size();\n    if (N == 2) return abs(g[1] - g[0]);\n    int i = 0, j = 0;\n    for (int k = 0; k < N; ++k) {\n        if (g[k].y > g[i].y) i = k;\n        if (g[k].y < g[j].y) j = k;\n    }\n\n    DD ret = 0;\n    int si = i, sj = j;\n    while (i != sj || j != si) {\n        ret = max(ret, abs(g[i]-g[j]));\n        if (cross(g[(i+1)%N] - g[i], g[(j+1)%N] - g[j]) < -EPS) {\n            i = (i+1)%N;\n        } else {\n            j = (j+1)%N;\n        }\n    }\n\n    return ret;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nvoid CGL_1_A() {\n    Point p1,p2; cin >> p1 >> p2;\n    Segment s(p1,p2);\n    int Q; cin >> Q;\n    while (Q--) {\n        Point p; cin >> p;\n        cout << project(s,p) << ln;\n    }\n}\nint main() {\n    ios::sync_with_stdio(false); cin.tie(nullptr);\n    cout << fixed << setprecision(20) << ln;\n    CGL_1_A();\n}\n"
  },
  {
    "language": "C++",
    "code": "\n/*\n@title Macro\n@category template\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,N) for(int i=0;i<int(N);++i)\n#define rep1(i,N) for(int i=1;i<int(N);++i)\n#define all(a) (a).begin(),(a).end()\n#define print(v) { cerr<<#v<<\": [ \"; for(auto _ : v) cerr<<_<<\", \"; cerr<<\"]\"<<endl; }\n#define printpair(v) { cerr<<#v<<\": [ \"; for(auto _ : v) cerr<<\"{\"<<_.first<<\",\"<<_.second<<\"}\"<<\", \"; cerr<<\"]\"<<endl; }\n#define dump(x) cerr<<#x<<\": \"<<x<<endl;\n#define bit(k) (1LL<<(k))\n#define Yes \"Yes\"\n#define No \"No\"\n#define YES \"YES\"\n#define NO \"NO\"\ntypedef long long ll;\n\ntemplate< typename T1, typename T2 >\nostream &operator<<(ostream &os, const pair< T1, T2 >& p) {\n  os << \"{\" <<p.first << \", \" << p.second << \"}\";\n  return os;\n}\ntemplate <class T> using vec = vector<T>;\ntemplate <class T> using vvec = vector<vec<T>>;\n\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\n\nconst int INF = (ll)1e9;\nconst ll INFLL = (ll)1e18+1;\nconst ll MOD = (ll)1e9+7;\n\nconst double PI = acos(-1.0);\n\nconst int dx[8] = {1, 0, -1, 0, 1, -1, -1, 1};\nconst int dy[8] = {0, 1, 0, -1, 1, 1, -1, -1};\nconst string dir = \"DRUL\";\n\n\n#line 1 \"geometory/template.cpp\"\n\n\n#line 5 \"geometory/template.cpp\"\n/*\n@title Geometory/template.cpp\n@category Geometory\n*/\n\ntypedef complex<double> Point;\ntypedef pair<Point, Point> Segment;\n#define EPS (1e-10)\n#define EQ(a, b) (abs((a) - (b)) < EPS)\n\n// 内積\ndouble dot(Point a, Point b){\n    return (a.real() * b.real() + a.imag() * b.imag());\n}\n//外積\ndouble cross(const Point &a, const Point &b){\n    return (a.real() * b.imag() - a.imag() * b.real());\n}\n\n/*\n\"https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/2/CGL_1_A\"\n直線 l に p から引いた交点を求める\n*/\nPoint projection(const Segment &l, const Point &p){\n    double t = dot(p - l.first, l.second - l.first) / norm(l.second - l.first);\n    return l.first + t * (l.second - l.first);\n}\n\nbool is_intersected_ls(Point a1, Point a2, Point b1, Point b2){\n    return (cross(a2-a1, b1-a1)*cross(a2-a1, b2-b1) < EPS) && (cross(b2-b1, a1-b1)*cross(b2-b1, a2-b1) < EPS);\n}\n\n\n#line 4 \"test/CGL_1_A.test.cpp\"\n\nint main(){\n    cout << fixed << setprecision(20);\n    int xp1,yp1,xp2,yp2;\n    cin >> xp1 >> yp1 >> xp2 >> yp2;\n    Point p1(xp1,yp1);\n    Point p2(xp2,yp2);\n    Segment l = make_pair(p1, p2);\n    int q;\n    cin >> q;\n    rep(_,q){\n        int px, py;\n        cin >> px >> py;\n        Point p(px, py);\n        Point ans = projection(l, p);\n        cout << ans.real() << \" \" << ans.imag() << endl;\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < n; i++)\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point\n{\npublic:\n  double x, y;\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator+(Point p)\n  {\n    return Point(x + p.x, y + p.y);\n  }\n  Point operator-(Point p)\n  {\n    return Point(x - p.x, y - p.y);\n  }\n  Point operator*(double a)\n  {\n    return Point(a * x, a * y);\n  }\n  Point operator/(double a)\n  {\n    return Point(x / a, y / a);\n  }\n\n  double abs()\n  {\n    return sqrt(norm());\n  }\n  double norm()\n  {\n    return x * x + y * y;\n  }\n\n  bool operator<(const Point &p) const\n  {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n  bool operator==(const Point &p) const\n  {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n\n  void print()\n  {\n    printf(\"%.10f %.10f\\n\", x, y);\n  }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b)\n{\n  return a.x * b.x + a.y * b.y;\n}\ndouble cross(Vector a, Vector b)\n{\n  return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment\n{\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle\n{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r = 0) : c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nVector projection(Line l, Point p)\n{\n  return (l.p2 - l.p1) * (dot(p - l.p1, l.p2 - l.p1) / (l.p2 - l.p1).norm()) + l.p1;\n}\n\nint main()\n{\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  Line l = {Point{x1, y1}, Point{x2, y2}};\n  int q;\n  cin >> q;\n  rep(i, q)\n  {\n    double x, y;\n    cin >> x >> y;\n    Point p = {x, y};\n    Point a = projection(l, p);\n    a.print();\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\ntypedef long double ld;\n\nclass Point {\npublic:\n\tld x, y;\n\tPoint(ld x, ld y) :\n\t\t\tx(x), y(y) {\n\t}\n\n\tPoint operator +(Point p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator -(Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(ld a) {\n\t\treturn Point(x * a, y * a);\n\t}\n\n};\n\ntypedef Point Vector;\n\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment(Point p1, Point p2) :\n\t\t\tp1(p1), p2(p2) {\n\t}\n};\n\nld norm(Point p1) {\n\treturn p1.x * p1.x + p1.y * p1.y;\n}\n\nld dot(Point p1, Point p2) {\n\treturn p1.x * p2.x + p1.y * p2.y;\n}\n\nPoint project(Segment s, Point p) {\n\tVector base = s.p1 - s.p2;\n\tld r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r;\n}\n\nint main() {\n\n\tint p1x, p1y, p2x, p2y;\n\tscanf(\"%d %d %d %d\", &p1x, &p1y, &p2x, &p2y);\n\tPoint p1(p1x, p1y);\n\tPoint p2(p2x, p2y);\n\tSegment segment(p1, p2);\n\n\tint q;\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; ++i) {\n\t\tint qx, qy;\n\t\tscanf(\"%d %d\", &qx, &qy);\n\n\t\tPoint p(qx, qy);\n\t\tPoint ans = project(segment, p);\n\t\tcout << setprecision(11) << ans.x << \" \" << ans.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing ll = long long;\nusing namespace std;\n\nconstexpr int inf = 1e9;\nconstexpr ll linf = 1e18;\n\nconstexpr double eps = 1e-8;\ninline constexpr bool eq(double a, double b) { return fabs(a - b) < eps; }\n\n//-----点-----//\nstruct Point\n{\n    double x, y;\n\n    constexpr Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}\n\n    Point &operator+=(const Point &p) { x += p.x, y += p.y; return *this; }\n    Point &operator-=(const Point &p) { x -= p.x, y -= p.y; return *this; }\n    Point &operator*=(const double k) { x *= k, y *= k; return *this; }\n    Point &operator/=(const double k) { x /= k, y /= k; return *this; }\n};\n\ninline Point operator+(const Point &p, const Point &q) { return Point(p) += q; }\ninline Point operator-(const Point &p, const Point &q) { return Point(p) -= q; }\ninline Point operator*(const Point &p, const double k) { return Point(p) *= k; }\ninline Point operator/(const Point &p, const double k) { return Point(p) /= k; }\n\ninline Point operator+(const Point &p) { return p; }\ninline Point operator-(const Point &p) { return Point(-p.x, -p.y); }\n\ninline constexpr bool operator==(const Point &p, const Point &q) { return eq(p.x, q.x) && eq(p.y, q.y); }\ninline constexpr bool operator!=(const Point &p, const Point &q) { return !(p == q); }\n\ninline double norm2(const Point &p) { return p.x * p.x + p.y * p.y; }\ninline double norm(const Point &p) { return sqrt(p.x * p.x + p.y * p.y); }\ninline double arg(const Point &p) { return atan2(p.y, p.x); }\n\ninline double dot(const Point &p, const Point &q) { return p.x * q.x + p.y * q.y; }\ninline double cross(const Point &p, const Point &q) { return p.x * q.y - p.y * q.x; }\n\nistream &operator>>(istream &is, Point &p) { is >> p.x >> p.y; return is; }\n\n//-----直線-----//\nstruct Line\n{\n    Point a, b;\n    Line(Point a, Point b) : a(a), b(b) {} /* 2点a, bを通る直線 */\n};\n\n/* \n * \"射影\" (直線 l に点 p から垂線を引いた交点を求める)\n */\nPoint projection(const Line &l, const Point &p)\n{\n    Point d = l.b - l.a; // 直線 l の方向ベクトル\n    Point h = d * (dot(p - l.a, d) / norm2(d)); // 正射影ベクトル\n    return l.a + h;\n}\n\nint main()\n{\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(15);\n\n    Point p1, p2; cin >> p1 >> p2;\n    Line l(p1, p2);\n    int q; cin >> q;\n    while (q--) {\n        Point p; cin >> p;\n        Point x = projection(l, p);\n        cout << x.x << ' ' << x.y << '\\n';\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define __USE_MINGW_ANSI_STDIO 0\n#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\n#define int ll\nusing VI = vector<int>;\nusing VVI = vector<VI>;\nusing PII = pair<int, int>;\n\n#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define ALL(x) x.begin(), x.end()\n#define PB push_back\n\nconst ll LLINF = (1LL<<60);\nconst int INF = (1LL<<30);\nconst int MOD = 1000000007;\n\ntemplate <typename T> T &chmin(T &a, const T &b) { return a = min(a, b); }\ntemplate <typename T> T &chmax(T &a, const T &b) { return a = max(a, b); }\ntemplate <typename T> bool IN(T a, T b, T x) { return a<=x&&x<b; }\ntemplate<typename T> T ceil(T a, T b) { return a/b + !!(a%b); }\ntemplate<class S,class T>\nostream &operator <<(ostream& out,const pair<S,T>& a){\n  out<<'('<<a.first<<','<<a.second<<')';\n  return out;\n}\ntemplate<class T>\nostream &operator <<(ostream& out,const vector<T>& a){\n  out<<'[';\n  REP(i, a.size()) {out<<a[i];if(i!=a.size()-1)out<<',';}\n  out<<']';\n  return out;\n}\n\nint dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};\n\nconst double EPS = 1e-8;\n\nusing R = long double;\nusing P = complex<R>;\nusing L = pair<P,P>;\n\ninline int sgn(const R& r) { return (r>EPS) - (r<-EPS); }\nnamespace std {\n\tbool operator < (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) ? real(a-b) < 0 : sgn(imag(a-b)) < 0;\n\t}\n\tbool operator == (const P& a, const P& b) {\n\t\treturn sgn(real(a-b)) == 0 && sgn(imag(a-b)) == 0;\n\t}\n}\ninline R dot(const P& a, const P& b) {\n  return real(a)*real(b) + imag(a)*imag(b);\n}\ninline R det(const P& a, const P& b) {\n  return real(a)*imag(b) - imag(a)*real(b);\n}\n// a/b\ninline P div(const P &a, const P &b) {\n  return {dot(b,a)/norm(b), det(b,a)/norm(b)};\n}\n\n// PとLについて入力\ninline istream& operator>>(istream& is, P& p) {\n  R x, y;\n  is >> x >> y;\n  p = P(x, y);\n  return is;\n}\ninline istream& operator>>(istream& is, L& l) {\n  P a, b;\n  is >> a >> b;\n  l = L(a, b);\n  return is;\n}\n\n// 線分abから見たcの位置\nenum CCW{LEFT=1, RIGHT=2, BACK=4, FRONT=8, ON=16};\nint ccw(P a, P b, P c) {\n\tP p = div(c-a, b-a);\n\tif(sgn(imag(p)) > 0) return LEFT;\n\tif(sgn(imag(p)) < 0) return RIGHT;\n\tif(sgn(real(p)) < 0) return BACK;\n\tif(sgn(real(p)-1) > 0) return FRONT;\n\treturn ON;\n}\n\nP projection(const L &l, const P &p) {\n\tR t = dot(p-l.first, l.first-l.second) / norm(l.first-l.second);\n\treturn l.first + t*(l.first-l.second);\n}\n// 反射\nP reflection(const L &l, const P &p) {\n\treturn p + (R)2 * (projection(l, p) - p);\n}\n\nsigned main(void)\n{\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n\n  L l;\n  cin >> l;\n  int q;\n  cin >> q;\n  REP(i, q) {\n    P p;\n    cin >> p;\n    P ret = projection(l, p);\n    cout << fixed << setprecision(9) << real(ret) << \" \" << imag(ret) << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<complex>\n#define N 1000\ntypedef std::complex<double> point;\ndouble InnerProd(point x,point y);\npoint Projection(point x,point y);\nint main(){\n        point ans,p1,p2;\n        int q;\n    double x1,x2,y1,y2;\n        scanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n        p1=point(x1,y1);\n        p2=point(x2,y2);\n        scanf(\"%d\",&q);\n        for(int i=0;i<q;i++){\n                scanf(\"%lf%lf\",&x1,&y1);\n                ans=p1+Projection(point(x1,y1)-p1,p2-p1);\n                printf(\"%.10f %.10f\\n\",ans.real(),ans.imag());\n        }\n\n        return 0;\n}\ndouble InnerProd(point x,point y){\n        return ((std::conj(x)*y).real());\n}\n\n/*x??????y???????°???±*/\npoint Projection(point x,point y){\n        return (y*InnerProd(x,y)/std::norm(y));\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i,k,n) for(int i = (k); i < (n); i++)\n#define REP(i,n) FOR(i,0,n)\n#define ALL(a) begin(a),end(a)\n#define MS(m,v) memset(m,v,sizeof(m))\n#define D10  fixed<<setprecision(10)\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef pair<int, int> P;\ntypedef long long ll;\nconst ll INF = 114514810;\nconst int MOD = 1000000007;\nconst double EPS = 1e-10;\nconst double PI = acos(-1.0);\nstruct edge\n{\n\tint from, to, cost;\n\tbool operator < (const edge& e) const { return cost < e.cost; }\n\tbool operator >(const edge& e) const { return cost > e.cost; }\n};\nint dx[] = { -1, 0, 0, 1 }; int dy[] = { 0, -1, 1, 0 };\n///*************************************************************************************///\n///*************************************************************************************///\n///*************************************************************************************///\n\nstruct point\n{\n\tdouble x, y;\n\tpoint(double x = 0, double y = 0) :x(x), y(y) {};\n\t\n\tpoint operator + (point p) { return point(x + p.x, y + p.y); }\n\tpoint operator - (point p) { return point(x - p.x, y - p.y); }\n\tpoint operator * (double s) { return point(x * s, y * s); }\n\tpoint operator / (double s) { return point(x / s, y / s); }\n\n\tdouble abs() { return sqrt(norm()); }\n\tdouble norm() { return x*x + y*y; }\n\n\tbool operator < (const point &p) const\n\t{\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const point &p) const\n\t{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\n};\nstruct line\n{\n\tpoint a, b;\n\tline(double x1 = 0, double y1 = 0, double x2 = 0, double y2 = 0) :a(point(x1, y1)), b(point(x2, y2)) {};\n\n\tpoint univec() { return (b - a) / (b-a).norm(); }\n};\n\ndouble dot(point a, point b)\n{\n\treturn a.x*b.x + a.y*b.y;\n}\n\npoint project(line l, point p)\n{\n\tpoint base = l.b - l.a;\n\tdouble r = dot(p - l.a, base) / base.norm();\n\treturn l.a + base*r;\n}\n\nint main()\n{\n\tdouble a[4];\n\tREP(i, 4) cin >> a[i];\n\tline l(a[0], a[1], a[2], a[3]);\n\tint q;\n\tcin >> q;\n\twhile (q--)\n\t{\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tpoint p(x, y);\n\t\tauto ans = project(l, p);\n\t\tcout << D10 << ans.x << \" \" << ans.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/**計算幾何学の問題を解く際に利用するクラス******/\n//http://skyblueryu.blog54.fc2.com/blog-entry-27.html\n#define _USE_MATH_DEFINES\n#include <cmath>\n#include <vector>\n#include <cstdio>\n#include <iostream>\n#define EPS (pow(M_E,(double)-10))\n//マクロの書式については \n//http://www7b.biglobe.ne.jp/~robe/cpphtml/html01/cpp01030.html\n#define equals(a, b) (fabs((a) - (b)) < EPS)\nusing namespace std;\n\nclass Point{\npublic:\n\tdouble x,y;\n\n\t//以下の記法に関しては\n\t//http://ameblo.jp/nana-2007-july/entry-10037680575.html\n\tPoint(double x = 0,double y = 0): x(x), y(y) {};\n\n\t/***演算子のオーバーロード***********/\n\tPoint operator + (Point p) { return Point(x + p.x,y + p.y);}\n\tPoint operator - (Point p) { return Point(x - p.x,y - p.y);}\n\tPoint operator * (double a) { return Point(a*x,a*y);}//スカラー倍\n\tPoint operator / (double a) { return Point(x/a,y/a);}//スカラー倍\n\t/***********************************/\n\n\tdouble norm() { return x*x+y*y;}//ベクトルのノルムを返す\n\tdouble abs() { return sqrt(norm());}//ベクトルの長さを返す\n\n\t/***演算子のオーバーロード2***********/\n\t//Pointはクラスオブジェクトなのでサイズが大きく値渡しは適さない\n\t//Point &pという記法は参照渡しでポインタでない変数\n\t//に対してアドレスを引数にとりたい場合に使う．\n\t//参照渡しとポインタ渡しについては以下\n\t//http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1320144958\n\t//http://homepage2.nifty.com/well/Reference.html#PASS_BY_REFERENCE\n\t//\n\t//Point &pの前のconst修飾子は関数内で引数のオブジェクトの内容を\n\t//勝手に書き換えないようにするために付けている．(const Point &p)\n\t//の後のconstはこの関数がconstメンバ関数であることを意味する．\n\t//constメンバ関数に関して詳しくは以下\n\t//http://www.s-cradle.com/developer/sophiaframework/tutorial/Cpp/const.html\n\n\tbool operator < (const Point &p) const{\n\t\t//(条件)?(処理1):(処理2)\n\t\t//条件が真なら処理1，偽なら処理2が実行される\n\t\treturn x != p.x ? x < p.x :y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const{\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n\t/*************************************/\n\n};\n\ntypedef Point Vector;\n\n//ベクトルaとbの内積を計算する関数\n//これは参照渡しじゃなくていいんかいという疑問は正直ある\ndouble dot(Vector a,Vector b){\n\t//double dot(const Vector& a,const Vector& b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//ベクトルaとbの外積を計算する関数\ndouble cross(Vector a,Vector b){\n\t//double cross(const Vector& a,const Vector& b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n\n\n//線分を表す構造体\nstruct Segment{\n\tPoint p1, p2;\n};\ntypedef Segment Line;\n\n//円を表すクラス\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(),double r = 0.0):c(c), r(r) {}\n};\n\n//多角形の表現(多角形は点の列で表現できる)\ntypedef vector<Point> Polygon;\n\n\nint main(){\n\tPoint p1,p2;\n\tint Q;\n\tscanf(\"%lf %lf\",&p1.x,&p1.y);\n\tscanf(\"%lf %lf\",&p2.x,&p2.y);\n\tscanf(\"%d\",&Q);//クエリ数\n\n\tVector d((p2.x-p1.x),(p2.y-p1.y));//方向ベクトル\n\tdouble abs = d.abs();\n\td.x = d.x/abs;\n\td.y = d.y/abs;\n\n\tPoint p;\n\tVector v;//p1→p\n\tVector proj;\n\tfor(int q = 0;q < Q;q++){\n\t\tscanf(\"%lf %lf\",&p.x,&p.y);\n\n\t\tv.x = p.x - p1.x;\n\t\tv.y = p.y - p1.y;\n\t\tproj.x = d.x * dot(v,d);\n\t\tproj.y = d.y * dot(v,d);\n\t\t\n\t\tprintf(\"%lf %lf\\n\",proj.x + p1.x,proj.y + p1.y);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <utility>\n#include <vector>\nusing namespace std;\n\nint main(){\n  double xp1,yp1,xp2,yp2;\n  cin >> xp1 >> yp1 >> xp2 >> yp2;\n  pair<double,double> p1 = make_pair(xp1,yp1);\n  pair<double,double> p2 = make_pair(xp2,yp2);\n\n  pair<double,double> a = make_pair(xp1-xp2,yp1-yp2);\n\n  int q; cin >> q;\n  vector<pair<double,double>> query;\n\n  for(int i = 0;i < q;i++){\n    double xp,yp; cin >> xp >> yp;\n    pair<double,double> p = make_pair(xp,yp);\n    pair<double,double> b = make_pair(xp-xp1,yp-yp1);\n    //正射影ベクトルはa(b,a)/(a,a)になる.\n    double dot_ab = a.first * b.first + a.second * b.second;\n    double dot_aa = a.first * a.first + a.second * a.second;\n    pair<double,double> prj = make_pair(a.first*dot_ab/dot_aa,a.second*dot_ab/dot_aa);\n\n    pair<double,double> ans = make_pair(p1.first + prj.first, p1.second + prj.second);\n    query.push_back(ans);\n  }\n\n  for(int i = 0;i < q;i++){\n    printf(\"%.14lf %.14lf\\n\",query[i].first,query[i].second);\n  }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define TEST_MODE 1\n\n#ifndef __VECD__\n#define __VECD__\n#include <vector>\n#include <numeric>\n#include <iomanip>\n#include <stdlib.h>\n#define rep(n) for(int i=0;i<n;i++)\n#define PB push_back\n#define VecND VecD<std::vector<double> >\n#if TEST_MODE\n// #define Vec3D VecD<double, 3>\n#define Vec2D _VecD<double, 2>\n#endif\n#endif\n\ntemplate <typename U>                       class VecD;\n\n#if TEST_MODE\ntemplate <typename TYPE, unsigned int SIZE> class _VecD;\n#endif\n\ntemplate <typename U> const VecD<U> projection(const VecD<U> &p1, const VecD<U> &p2);\n\ntemplate <typename U> class VecD{\nfriend const double operator*(const VecD&, const VecD&);\ntemplate <typename T>          friend const VecD operator*(const T&, const VecD&);\ntemplate <typename T, class C> friend const C operator*(const C&, const T&);\n                               friend const VecD operator+(const VecD&, const VecD&);\ntemplate <typename T>          friend const VecD operator+(const T&, const VecD&);\ntemplate <typename T, class C> friend const C operator+(const C&, const T&);\ntemplate <class C>             friend const C operator-(const C&);\ntemplate <class C>             friend const C operator-(const C&, const C&);\ntemplate <typename T, class C> friend const C operator-(const T&, const C&);\ntemplate <typename T, class C> friend const C operator-(const C&, const T&);\n                               friend std::ostream& operator<<(std::ostream&, const VecD&);\npublic:\n\tU vec;\n\tVecD(){}\n\tVecD(U v){\n\t\tvec = v;\n\t}\n\tconst double dot(const VecD &p) const{\n\t\treturn inner_product( this->vec.begin(), this->vec.end(), p.vec.begin(), 0);\n\t}\n};\n\n#if TEST_MODE\ntemplate <typename TYPE, unsigned int SIZE> class _VecD{\nfriend const double operator*(const _VecD&, const _VecD&);\ntemplate <typename T>          friend const _VecD operator*(const T&, const _VecD&);\ntemplate <typename T, class C> friend const C operator*(const C&, const T&);\n                               friend const _VecD operator+(const _VecD&, const _VecD&);\ntemplate <typename T>          friend const _VecD operator+(const T&, const _VecD&);\ntemplate <typename T, class C> friend const C operator+(const C&, const T&);\ntemplate <class C>             friend const C operator-(const C&);\ntemplate <class C>             friend const C operator-(const C&, const C&);\ntemplate <typename T, class C> friend const C operator-(const T&, const C&);\ntemplate <typename T, class C> friend const C operator-(const C&, const T&);\n                               friend std::ostream& operator<<(std::ostream&, const _VecD&);\n\npublic:\n\tTYPE vec[SIZE];\n\t_VecD(){}\n\t_VecD(TYPE (&array)[SIZE]){\n\t\tfor(int i=0; i<SIZE; i++) vec[i] = array[i];\n\t}\n\tconst double dot(const _VecD &p) const{\n\t\tdouble tmp = 0;\n\t\tfor(int i=0; i<SIZE; i++) tmp += this->vec[i] * p.vec[i];\n\t\treturn tmp;\n\t}\n};\n#endif\n\nconst double operator*(const VecND &p0, const VecND &p1){ return inner_product( p0.vec.begin(), p0.vec.end(), p1.vec.begin(), 0); }\n// template <typename U>\n// const double operator*(const VecD<U> &p0, const VecD<U> &p1){ return inner_product( p0.vec.begin(), p0.vec.end(), p1.vec.begin(), 0); }\n\ntemplate <typename T>\nconst VecND operator*(const T &a, const VecND &p1){\n\tstd::vector<double> v;\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++) v.PB(*iter1 * a);\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\ntemplate <typename T>\nconst Vec2D operator*(const T &a, const Vec2D &p1){\n\tdouble v[2] = {0, 0};\n\tfor(int i=0; i<2; i++) v[i] = p1.vec[i] * a;\n\tconst Vec2D p(v);\n\treturn p;\n}\n// template <typename T>\n// const Vec3D operator*(const T &a, const Vec3D &p1){\n// \tdouble v[3] = {0, 0, 0};\n// \tfor(int i=0; i<3; i++) v[i] = p1.vec[i] * a;\n// \tconst Vec3D p(v);\n// \treturn p;\n// }\n#endif\n\ntemplate <typename T, class C>\nconst C operator* (const C &p, const T &a){return a*p;}\nconst VecND operator+(const VecND &p0, const VecND &p1){\n\tstd::vector<double> v;\n\tstd::vector<double>::const_iterator iter0 = p0.vec.begin();\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++){\n\t\tv.PB(*iter0 + *iter1);\n\t\titer0++;\n\t}\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\nconst Vec2D operator+(const Vec2D &p0, const Vec2D &p1){\n\tdouble v[2] = {0, 0};\n\tfor(int i=0; i<2; i++) v[i] = p0.vec[i] + p1.vec[i];\n\tconst Vec2D p(v);\n\treturn p;\n}\n// const Vec3D operator+(const Vec3D &p0, const Vec3D &p1){\n// \tdouble v[3] = {0, 0, 0};\n// \tfor(int i=0; i<3; i++) v[i] = p0.vec[i] + p1.vec[i];\n// \tconst Vec3D p(v);\n// \treturn p;\n// }\n#endif\ntemplate <class T>\nconst VecND operator+(const T &a, const VecND &p1){\n\tstd::vector<double> v;\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++){\n\t\tv.PB(*iter1 + a);\n\t}\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\ntemplate <class T>\nconst Vec2D operator+(const T &a, const Vec2D &p1){\n\tdouble v[2];\n\tfor(int i=0; i<2; i++) v[i] = p1.vec[i] + a;\n\tconst Vec2D p(v);\n\treturn p;\n}\n// template <class T>\n// const Vec3D operator+(const T &a, const Vec3D &p1){\n// \tdouble v[3];\n// \tfor(int i=0; i<3; i++) v[i] = p1.vec[i] + a;\n// \tconst Vec3D p(v);\n// \treturn p;\n// }\n#endif\ntemplate <typename T, class C>\nconst C operator+(const C &p1, const T &a){return a+p1;}\ntemplate <class C>\nconst C operator-(const C &p1){return (-1)*p1;}\ntemplate <class C>\nconst C operator-(C &p0, C &p1){ return p0+(-p1); }\ntemplate <typename T, class C>\nconst C operator-(const T &a, C &p1){ return a+(-p1); }\ntemplate <typename T, class C>\nconst C operator-(C &p1, const T &a){return (-a)+p1;}\n\n// template<class C>\n// const C projection(const C &p1, const C &p2){\n// \treturn ((p1*p2) / (p1*p1)) * p1;\n// }\ntemplate<typename U>\nconst VecD<U> projection(const VecD<U> &p1, const VecD<U> &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\n\n#if TEST_MODE\nconst Vec2D projection(const Vec2D &p1, const Vec2D &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\n// const Vec3D projection(const Vec3D &p1, const Vec3D &p2){\n// \treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n// }\n#endif\n\nstd::ostream& operator<<(std::ostream &os, const VecND &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\n#if TEST_MODE\nstd::ostream& operator<<(std::ostream &os, const Vec2D &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\n#endif\n\n#include <iostream>\nusing namespace std;\n\n\nint main(void){\n\n\tdouble xp0, yp0, xp1, yp1; cin>>xp0>>yp0>>xp1>>yp1;\n\tint q; cin >> q;\n\t// vector<double> v0; v0.PB(xp0); v0.PB(yp0); VecND p0(v0);\n\t// vector<double> v1; v1.PB(xp1); v1.PB(yp1); VecND p1(v1);\n\tdouble v0[2] = {xp0, yp0}; Vec2D p0(v0);\n\tdouble v1[2] = {xp1, yp1}; Vec2D p1(v1);\n\tp1 = p1-p0;\n\t// cout << p1.point[0] << \" \" << p1.point[1] << endl;\n\trep(q){\n\t\tdouble xp2,yp2; cin>>xp2>>yp2;\n\t\t// vector<double> v2; v2.PB(xp2); v2.PB(yp2); VecND p2(v2);\n\t\tdouble v2[2] = {xp2, yp2}; Vec2D p2(v2);\n\t\tp2 = 1*(p2-p0);\n\t\t// VecND ret = projection(p1, p2);\n\t\tVec2D ret = projection(p1, p2);\n\t\tret = ret+p0;\n\t\tcout << ret << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace arithmetic {\n  template<typename T> class Addition {\n  public:\n    T operator+(const T& v) const {\n      T res(static_cast<const T&>(*this));\n      return res += v;\n    }\n  };\n\n  template<typename T> class Subtraction {\n  public:\n    T operator-(const T& v) const {\n      T res(static_cast<const T&>(*this));\n      return res -= v;\n    }\n  };\n\n  template<typename T> class Multiplication {\n  public:\n    T operator*(const T& v) const {\n      T res(static_cast<const T&>(*this));\n      return res *= v;\n    }\n  };\n\n  template<typename T> class Division {\n  public:\n    T operator/(const T& v) const {\n      T res(static_cast<const T&>(*this));\n      return res /= v;\n    }\n  };\n}\n\ntemplate<typename T> class IndivisibleArithmetic : public arithmetic::Addition<T>, public arithmetic::Subtraction<T>, public arithmetic::Multiplication<T> {};\n\ntemplate<typename T> class Arithmetic : public IndivisibleArithmetic<T>, public arithmetic::Division<T> {};\n\ntemplate<typename T> class Ordered {\npublic:\n  bool operator==(const T& v) const {\n    return !(v < static_cast<const T&>(*this) || static_cast<const T&>(*this) < v);\n  }\n  \n  bool operator!=(const T& v) const {\n    return v < static_cast<const T&>(*this) || static_cast<const T&>(*this) < v;\n  }\n\n  bool operator>(const T& v) const {\n    return v < static_cast<const T&>(*this);\n  }\n\n  bool operator<=(const T& v) const {\n    return !(v < static_cast<const T&>(*this));\n  }\n\n  bool operator>=(const T& v) const {\n    return !(static_cast<const T&>(*this) < v);\n  }\n};\n\nclass Real : public Arithmetic<Real>, public Ordered<Real> {\nprivate:\n  static long double EPS;\n  long double val;\n\npublic:\n  Real() {}\n\n  Real(long double val) : val(val) {}\n\n  Real operator+=(const Real& r) {\n    val += r.val;\n    return *this;\n  }\n  \n  Real operator-=(const Real& r) {\n    val -= r.val;\n    return *this;\n  }\n  \n  Real operator*=(const Real& r) {\n    val *= r.val;\n    return *this;\n  }\n  \n  Real operator/=(const Real& r) {\n    val /= r.val;\n    return *this;\n  }\n\n  bool operator<(Real r) const {\n    return val < r.val - EPS;\n  }\n\n  operator long double() {\n    return val;\n  }\n};\n\nlong double Real::EPS = 1e-8;\n\nostream& operator<<(ostream& os, Real a) {\n\tos << (long double)a;\n\treturn os;\n}\n\nistream& operator>>(istream& is, Real& a) {\n\tlong double n;\n\tis >> n;\n\ta = n;\n\treturn is;\n}\n\nclass Point : public Arithmetic<Point> {\npublic:\n  Real x, y;\n  \n  Point() {}\n\n  Point (const Real& x, const Real& y) : x(x), y(y) {}\n  \n  Point operator+=(const Point& p) {\n    x += p.x;\n    y += p.y;\n    return *this;\n  }\n\n  Point operator-=(const Point& p) {\n    x -= p.x;\n    y -= p.y;\n    return *this;\n  }\n\n  Point operator*=(const Point& p) {\n    Real xx = x * p.x - y * p.y;\n    Real yy = x * p.y + y * p.x;\n    return *this = Point(xx, yy);\n  }\n\n  Point operator/=(const Point& p) {\n    Real nrm = p.norm();\n    Real xx = (x * p.x + y * p.y) / nrm;\n    Real yy = (x * p.y - y * p.x) / nrm;\n    return *this = Point(xx, yy);\n  }\n\n  Point operator*=(const Real& r) {\n    x *= r;\n    y *= r;\n    return *this;\n  }\n\n  Point operator*(const Real& r) const {\n    Point res(static_cast<const Point&>(*this));\n    return res *= r;\n  }\n\n  Real norm() const {\n    return x * x + y * y;\n  }\n\n  Real abs() const {\n    return sqrt(norm());\n  }\n};\n\nostream& operator<<(ostream& os, const Point& point) {\n\tos << \"(\" << point.x << \",\" << point.y << \")\";\n\treturn os;\n}\n\nistream& operator>>(istream& is, Point& point) {\n  Real x, y;\n\tis >> x >> y;\n\tpoint = Point(x, y);\n\treturn is;\n}\n\nclass Line {\npublic:\n  Point a, b;\n\n  Line() {}\n\n  Line (const Point& a, const Point& b) : a(a), b(b) {}\n  \n  Point vec() const {\n    return b - a;\n  }\n};\n\nostream& operator<<(ostream& os, const Line& line) {\n\tos << \"[\" << line.a << \",\" << line.b << \"]\";\n\treturn os;\n}\n\nistream& operator>>(istream& is, Line& line) {\n  Point a, b;\n  is >> a >> b;\n  line = Line(a, b);\n  return is;\n}\n\ninline Point projection(const Point& a, const Point &b) {\n  return a * (b / a).x;\n}\n\ninline Point perpendicular(const Line& line, const Point& point) {\n  return line.a + projection(line.vec(), point - line.a);\n}\n\nint main() {\n  Point p1, p2;\n  cin >> p1 >> p2;\n  int q;\n  cin >> q;\n  for (int i = 0; i < q; ++i) {\n    Point p, r;\n    cin >> p;\n    r = perpendicular(Line(p1, p2), p);\n    cout << fixed << setprecision(15) << r.x << \" \" << fixed << setprecision(15) << r.y << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\nconst double EPS = 1e-10;\ninline bool equals(double a, double b) { return fabs(a - b) < EPS; }\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x, double y) :x(x), y(y) {}\n\tPoint() {}\n\tPoint operator +(Point &p) { return Point(x + p.x, y + p.y); };\n\tPoint operator -(Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator *(double k) { return Point(x*k, y*k); }\n};\nusing Vector = Point;\ninline double norm(Vector a) {\n\treturn a.x*a.x + a.y*a.y;\n}\ndouble absv(Vector a) {\n\treturn sqrt(norm(a));\n}\ninline double dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\ninline double cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\nstruct Segment {\n\tPoint p1, p2;\n};\nusing Line = Segment;\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) :c(c), r(r) {}\n};\nusing Polygon = vector<Point>;\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base*r;\n}\nint main() {\n\tPoint p[2];\n\tint q, x, y;\n\tcin >> p[0].x >> p[0].y >> p[1].x >> p[1].y;\n\tSegment seg;\n\tseg.p1 = p[0]; seg.p2 = p[1];\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\t//cout << x << \" \" << y << endl;\n\t\tPoint po = Point(x, y);\n\t\tPoint proj = project(seg, po);\n\t\tprintf(\"%.10lf %.10lf\\n\", proj.x, proj.y);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<math.h>\n#define cinf(n,x) for(int i=0;i<(n);i++) cin >> x[i];\ntypedef long long int ll;\nlong long GCD(long long a, long long b) { return b ? GCD(b, a%b) : a; }\nusing namespace std;\n\nint main(){\n\tdouble x1,y1,x2,y2,xp,yp,disx,disy,ansx,ansy;\n\tint q;\n\tbool X_FLG =false , Y_FLG =false;\n\tcin >>x1>>y1>>x2>>y2; cin >>q;\n\tif(y1==y2){\n\t\tX_FLG=true;\n\t}\n\telse if(x1==x2){\n\t\tY_FLG=true;\n\t}\n\telse{\n\t\tdisy=(y2-y1);\n\t\tdisx=(x2-x1);\n\t}\n\tfor(int i=0;i<q;i++){\n\t\tcin >>xp>>yp;\n\t\tif(X_FLG){\n\t\t\tprintf(\"%.10lf %.10lf\\n\",xp,y1);\n\t\t}\n\t\telse if(Y_FLG){\n\t\t\tprintf(\"%.10lf %.10lf\\n\",x1,yp);\n\t\t}\n\t\telse{\n\t\t\tansx= (disx*disx*xp+disx*disy*yp+disy*disy*x2-disx*disy*y2)/(disy*disy+disx*disx);\n\t\t\tansy=disy*(ansx-x2)/disx+y2;\n\t\t\tprintf(\"%.10lf %.10lf\\n\",ansx,ansy );\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\n\nstruct Point{\n    double x;\n    double y;\n};\n\nint main()\n{\n    Point p1,p2;\n    cin>>p1.x>>p1.y>>p2.x>>p2.y;\n    int q;\n    cin>>q;\n    vector<Point> pp(q);\n    for(int i=0; i<q; i++){\n        cin>>pp[i].x>>pp[i].y;\n    }\n    double rc1,rc2,b1;\n    rc1=(p1.y-p2.y)/(p1.x-p2.x);\n    if(p1.x-p2.x==0){\n        b1=p1.y;\n        rc2=0;\n    }else{\n        b1=p1.y-rc1*p1.x;\n        rc2=(-1)/rc1;\n    }\n    vector<double> bb(q);\n    vector<Point> ans(q);\n    for(int i=0; i<pp.size(); i++){\n        if(rc1==0){\n            ans[i].x=pp[i].x;\n        }else{\n            bb[i]=pp[i].y-rc2*pp[i].x;\n            if(p1.x-p2.x==0){\n                ans[i].x=0;\n            }else if(rc2-rc1==0){\n                ans[i].x=0;\n            }else{\n                ans[i].x=(b1-bb[i])/(rc2-rc1);\n            }\n        }\n        if(p1.x-p2.x==0){\n            ans[i].y=bb[i];\n        }else{\n            ans[i].y=rc1*ans[i].x+b1;\n        }\n        cout<<fixed;\n        cout<<setprecision(10)<<ans[i].x<<\" \"<<ans[i].y<<endl;;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "//\n// Created by 肖龙 on 2020/3/18.\n//\n\n//\n// Created by 肖龙 on 2020/2/20.\n//\n\n\n/*\n * 求点和直线的投影\n */\n#include<iostream>\n#include <cmath>\n#include <iomanip>\n\nusing namespace std;\n\ntypedef struct point{\n    double x,y;\n}Point,Vector;\n\ntypedef struct line{\n    Point x;\n    Vector k;\n}Line;\n\ndouble dot(Vector x,Vector y){\n    return x.x*y.x+x.y*y.y;\n}\n\nVector getV(Point x,Point y){\n    Vector v;\n    v.x=y.x-x.x;\n    v.y=y.y-x.y;\n    return v;\n}\n//点在直线的投影\nPoint Projection(Line x,Point y){\n    Point answ;\n    answ = x.x;\n\n    double len = dot(x.k,getV(x.x,y));\n    len/=sqrt(x.k.x*x.k.x+x.k.y*x.k.y);\n    Vector temp  = x.k;\n    temp.x /=sqrt(x.k.x*x.k.x+x.k.y*x.k.y);\n    temp.y/=sqrt(x.k.x*x.k.x+x.k.y*x.k.y);\n    answ.x+=temp.x*len;\n    answ.y+=temp.y*len;\n    return answ;\n}\n//点与直线的对称点\nPoint Reflection(Line x,Point y){\n    Point half = Projection(x,y);\n    Point answ;\n    answ.x=y.x+2*(half.x-y.x);\n    answ.y=y.y+2*(half.y-y.y);\n    return answ;\n}\n\nint main(){\n    Point p1,p2,p;\n    cin>>p1.x>>p1.y>>p2.x>>p2.y;\n    int q;\n    cin>>q;\n    Vector v2;\n    v2 = getV(p1,p2);\n    Line l;\n    l.k=v2;\n    l.x=p1;\n    for(int i=1;i<=q;i++){\n        cin>>p.x>>p.y;\n        Point answ = Projection(l,p);\n        cout<<setprecision(10)<<setiosflags(ios::fixed)<<answ.x<<\" \"<<answ.y<<endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for (int (i)=(0);(i)<(int)(n);++(i))\nusing ll = long long;\n//using P = pair<int, int>;\nusing namespace std;\n\nconst double eps = 1e-10;\n#define equals(a, b) (fabs((a)-(b)) < eps)\n\n// 点\nstruct Point\n{\n    double x, y;\n    Point(double x=0, double y=0): x(x), y(y) {}\n    double norm()\n    {\n        return x*x+y*y;\n    }\n    double abs()\n    {\n        return sqrt(norm());\n    }\n\n    Point operator+(const Point& p)const\n    {\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator-(const Point& p)const\n    {\n        return Point(x - p.x, y - p.y);\n    }\n    Point operator*(const double k)const\n    {\n        return Point(x * k, y * k);\n    }\n    Point operator/(const double k)const\n    {\n        return Point(x / k, y / k);\n    }\n    bool operator<(const Point& p)const\n    {\n        if (x != p.x)\n        {\n            return x < p.x;\n        }\n        return y < p.y;\n    }\n    bool operator==(const Point& p)const\n    {\n        return fabs(x - p.x) < eps and fabs(y - p.y) < eps;\n    }\n};\n\nusing Vector = Point;\n\n// 内積\ndouble dot(Vector a, Vector b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n\n// 外積\ndouble cross(Vector a, Vector b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n// 線分\nstruct Segment\n{\n    Segment(Point a=Point(), Point b=Point()):p1(a), p2(b) {}\n    Point p1, p2;\n};\nusing Line = Segment;\n\n// 円\nclass Circle\n{\npublic:\n    Point c;\n    double r;\n    Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\n// 多角形\nusing Polygon = vector<Point>;\n\n\n// ベクトルaとbの直行判定\n// Verify\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1-a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// ベクトルaとbの平行判定\n// Verify\nbool isParallel(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1-a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n// 射影\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\n// 反射\nPoint reflect(Segment s, Point p) {\n    return p + (project(s, p) - p) * 2.0;\n}\n\n// ２点間の距離\ndouble getDistance(Point a, Point b) {\n    return (a-b).abs();\n}\n\n// 直線Lと、点Pの距離\n// verify\ndouble getDistanceLP(Line l, Point p)\n{\n    return abs(cross(l.p2 - l.p1, p - l.p1) / Point(l.p2 - l.p1).abs());\n}\n\n// 線分sと点pの距離\ndouble getDistanceSP(Segment s, Point p) {\n    if (dot(s.p2 - s.p1, p-s.p1) < 0.0) return (p - s.p1).abs();\n    if (dot(s.p1 - s.p2, p-s.p2) < 0.0) return (p - s.p2).abs();\n    return getDistanceLP((Line)s, p);\n}\n\n\n// 反時計回り\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n    Vector a = p1 - p0;\n    Vector b = p2 - p0;\n    if (cross(a, b) > eps) return COUNTER_CLOCKWISE;\n    if (cross(a, b) < -eps) return CLOCKWISE;\n    if (dot(a, b) < -eps) return ONLINE_BACK;\n    if (a.norm() < b.norm()) return ONLINE_FRONT;\n    return ON_SEGMENT;\n}\n\n// 線分の交差判定\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\nbool intersect(Segment s1, Segment s2) {\n    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 線分s1と線分s2の距離\ndouble getDistance(Segment s1, Segment s2) {\n    if (intersect(s1, s2)) return 0.0;\n    return min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)), min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 線分の交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n    Vector base = s2.p2 - s2.p1;\n    double d1 = abs(cross(base, s1.p1 - s2.p1));\n    double d2 = abs(cross(base, s1.p2 - s2.p1));\n    double t = d1 / (d1 + d2);\n    return s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n\n// 円cと線分lの交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n    //assert(intersect(c, l)); ?\n    Vector pr = project(l, c.c);\n    Vector e = (l.p2 - l.p1) / (l.p2 - l.p1).abs();\n    double base = sqrt(c.r * c.r - (pr - c.c).norm());\n    return make_pair(pr + e * base, pr - e * base);\n}\n\n// 円と円の交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n    // assert(intersect(c1, c2));\n    double d = (c1.c - c2.c).abs();\n    double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2  * c1.r * d));\n    double t = arg(c2.c - c1.c);\n    return make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t-a));\n}\n\n// 点の内包\n// IN 2, ON 1, OUT 0\n\nint contains(Polygon g, Point p) {\n    int n = g.size();\n    bool x = false;\n    for (int i = 0; i < n; ++i) {\n        Point a = g[i] - p, b = g[(i + 1) % n] - p;\n        if (abs(cross(a, b)) < eps and dot(a, b) < eps) return 1;\n        if (a.y > b.y) swap(a, b);\n        if (a.y < eps and eps < b.y and cross(a, b) > eps) x = !x;\n    }\n    return (x ? 2 : 0);\n}\n\n// 凸包\nPolygon andrewScan(Polygon s) {\n    Polygon u, l;\n    if (s.size() < 3) return s;\n    sort(s.begin(), s.end());\n    u.push_back(s[0]);\n    u.push_back(s[1]);\n    l.push_back(s[s.size()-1]);\n    l.push_back(s[s.size()-2]);\n\n    for (int i = 2; i < s.size(); ++i) {\n        for (int n = u.size(); n >= 2 and ccw(u[n-2], u[n-1], s[i]) != CLOCKWISE; --n) {\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n\n    for (int i = s.size()-3; i>=0; --i) {\n        for (int n = l.size(); n>=2 and ccw(l[n-2], l[n-1], s[i]) != CLOCKWISE; --n) {\n            l.pop_back();\n        }\n        l.push_back(s[i]);\n    }\n\n    reverse(l.begin(), l.end());\n    for (int i = u.size() - 2; i >= 1; --i) l.push_back(u[i]);\n    return l;\n}\n\n// 平面走査\n#define BOTTOM 0\n#define LEFT 1\n#define RIGHT 2\n#define TOP 3\n\nclass EndPoint {\npublic:\n    Point p;\n    int seg, st;\n    EndPoint() {}\n    EndPoint(Point p, int seg, int st) : p(p), seg(seg), st(st) {}\n\n    bool operator<(const EndPoint &ep) const {\n        if (p.y == ep.p.y) {\n            return st < ep.st;\n        }else return p.y < ep.p.y;\n    }\n};\n\nEndPoint EP[2 * 100000];\n\nint manhattanIntersection(vector<Segment> S) {\n    int n = S.size();\n\n    for (int i = 0, k = 0; i < n; ++i) {\n        if (S[i].p1.y == S[i].p2.y) {\n            if (S[i].p1.x > S[i].p2.x) swap(S[i].p1, S[i].p2);\n        } else if (S[i].p1.y > S[i].p2.y) swap(S[i].p1, S[i].p2);\n\n        if (S[i].p1.y == S[i].p2.y) {\n            EP[k++] = EndPoint(S[i].p1, i, LEFT);\n            EP[k++] = EndPoint(S[i].p2, i, RIGHT);\n        }\n        else {\n            EP[k++] = EndPoint(S[i].p1, i, BOTTOM);\n            EP[k++] = EndPoint(S[i].p2, i, TOP);\n        }\n    }\n\n    sort(EP, EP + (2 * n));\n\n    set<int> BT;\n    BT.insert(100000001); // 番兵\n    int cnt = 0;\n\n    for (int i = 0; i < 2 * n; ++i) {\n        if (EP[i].st == TOP) {\n            BT.erase(EP[i].p.x);\n        }\n        else if (EP[i].st == BOTTOM) {\n            BT.insert(EP[i].p.x);\n        }\n        else if (EP[i].st == LEFT) {\n            auto b = lower_bound(BT.begin(), BT.end(), S[EP[i].seg].p1.x);\n            auto e = upper_bound(BT.begin(), BT.end(), S[EP[i].seg].p2.x);\n            cnt += distance(b, e);\n        }\n    }\n\n    return cnt;\n\n}\n\nint main() {\n    int x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Segment s(Point(x1, y1), Point(x2, y2));\n\n    int q;\n    cin >> q;\n    rep(i, q) {\n        int x, y;\n        cin >> x >> y;\n        Point a(x, y);\n        Point ans = project(s, a);\n        printf(\"%.10f %.10f\\n\", ans.x, ans.y);\n    }\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n//#define _GLIBCXX_DEBUG\nusing namespace std;\n\ntypedef long long ll;\ndouble pi=3.14159265359; //円周率\ndouble EPS = 1e-10; //誤差\n\nclass point\n{\n\tpublic:\n\tdouble x,y;\n\n\tpoint()\n\t{x=0;y=0;}\n\t//コンストラクタ\n\tpoint(double a,double b)\n\t{\n\t\tx=a;y=b;\n\t}\n\n\t//足し算\n\tpoint operator + (point p)\n\t{\n\t\treturn point(x+p.x,y+p.y);\n\t}\n\t//引き算\n\tpoint operator - (point p)\n\t{\n\t\treturn point(x-p.x,y-p.y);\n\t}\n\t//d倍\n\tpoint operator * (double d)\n\t{\n\t\treturn point(x*d,y*d);\n\t}\n\t//x座標昇順でソートする\n\tbool operator < (const point &p)\n\tconst {\n\t\tif(std::abs(x-p.x)>EPS)\n\t\t\treturn x<p.x;\n\t\telse\n\t\t\treturn y<p.y;\n\t}\n\t//内積\n\t//直交判定...abs(dot())<EPS\n\tdouble dot(point p)\n\t{\n\t\treturn x*p.x+y*p.y;\n\t}\n\t//外積\n\t//平行判定...abs(cross())<EPS\n\tdouble cross(point p)\n\t{\n\t\treturn x*p.y-y*p.x;\n\t}\n\t//絶対値を求める\n\tdouble abs()\n\t{\n\t\treturn sqrt(x*x+y*y);\n\t}\n\t//単位ベクトルを求める\n\tpoint ev()\n\t{\n\t\treturn point(x/abs(),y/abs());\n\t}\n\t//単位法線ベクトル（の1つ）を求める\n\t//もうひとつは-1倍することで求まる\n\tpoint nev()\n\t{\n\t\treturn point(-y/abs(),x/abs());\n\t}\n\t//2点間の距離を求める\n\t//distがEPS未満なら2点は同じ位置にあるとみなす\n\tdouble pdist(point p)\n\t{\n\t\tpoint v=point(p.x-x,p.y-y);\n\t\treturn v.abs();\n\t}\n\t//この点と直線p1-p2の距離を求める\n\tdouble ldist(point p1,point p2)\n\t{\n\t\treturn std::abs((p2.y-p1.y)*x-(p2.x-p1.x)*y+p2.x*p1.y+p2.y*p1.x)/(p2-p1).abs();\n\t}\n\n};\n\n//線分p1-p2上に点qがあるか判定\nbool on_seg(point p1,point p2,point q)\n{\n\treturn abs((p1-q).cross(p2-q))<EPS && (p1-q).dot(p2-q)<=EPS;\n}\n//直線p1-p2と直線q1-q2の交点\n//線分の交差判定はこれの戻り値が線分上にあるかどうかで判定する...on_seg(p1,p2,intersection(p1,p2,q1,q2))\npoint intersection(point p1,point p2,point q1,point q2)\n{\n\treturn p1 + (p2-p1) * ((q2-q1).cross(q1-p1) / (q2-q1).cross(p2-p1));\n}\n//n頂点からなる多角形の面積を求める(vectorで頂点は与えられる)\ndouble area(vector<point> p)\n{\n\tdouble ret=0;\n\tfor(int i=0;i<p.size()-1;i++)\n\t{\n\t\tret+=p[i].cross(p[i+1]);\n\t}\n\tret+=p[p.size()-1].cross(p[0]);\n\tret/=2;\n\treturn ret;\n}\n/*\n3点a,b,cをa->b->cと進むとき、\n* a->bで時計方向に折れてb->c (clockwise)\n* a->bで反時計方向に折れてb->c(counter clockwise)\n* a->bで逆を向いてaを通り越してb->c(c--a--b on line)\n* a->bでそのままb->c(a--b--c on line)\n* a->bで逆を向いてb->c(a--c--b on line)\n\nのいずれのパターンかを判定する\n*/\nint ccw(point a,point b,point c)\n{\n\tb=b-a;c=c-a;\n\tif(b.cross(c)>EPS)\n\t\treturn 1; //counter clockwise\n\tif(b.cross(c)<-EPS)\n\t\treturn -1; //clockwise\n\tif(b.dot(c)<-EPS)\n\t\treturn 2; //c--a--b on line\n\tif(b.x*b.x+b.y*b.y < c.x*c.x+c.y*c.y)\n\t\treturn -2; //a--b--c on line\n\treturn 0; //a--c--b on line\n}\n//凸包を求める\nvector<point> convex_hull(vector<point> p)\n{\n\tint n=p.size();\n\tint k=0;\n\tsort(p.begin(),p.end());\n\tvector<point> ch(2*n);\n\t//lower-hull 下側凸包\n\tfor(int i=0;i<n;ch[k++]=p[i++])\n\t{\n\t\twhile(k>=2 && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\t//upper-hull 上側凸包\n\tfor(int i=n-2,t=k+1;i>=0;ch[k++]=p[i--])\n\t{\n\t\twhile(k>=t && ccw(ch[k-2],ch[k-1],p[i])<=0)\n\t\t\tk--;\n\t}\n\tch.resize(k-1);\n\treturn ch;\n}\n\nint main()\n{\n\tcout.setf(ios::fixed);\n\tcout.precision(12);\n\tpoint p1,p2;\n\tdouble a,b,c,d;\n\tcin>>a>>b>>c>>d;\n\tp1=point(a,b);\n\tp2=point(c,d);\n\tint q;\n\tcin>>q;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tpoint f;\n\t\tcin>>a>>b;\n\t\tf=point(a,b);\n\t\tpoint x;\n\t\tx=f+(p2-p1).nev()*f.ldist(p1,p2);\n\t\tcerr<<x.x<<\" \"<<x.y<<endl;\n\t\tif(abs((p2-p1).cross(x))>EPS)\n\t\t\tx=x-(p2-p1).nev()*f.ldist(p1,p2)*2;\n\t\tcout<<x.x<<\" \"<<x.y<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<climits>\n#include<string>\n#include<vector>\n#include<list>\n#include<map>\n#include<set>\n#include<cmath>\n#include<queue>\n#include<cstring>\n#include<stack>\nusing namespace std;\n#define EPS 1e-8\n#define INF 1000000\n \nstruct Point{\n    double x,y;\n    Point(){}\n    Point(double _x,double _y){\n        x=_x; y=_y;\n    }\n    Point operator +(const Point p)const{\n        return Point(x+p.x,y+p.y);\n    }\n    Point operator -(const Point p)const{\n        return Point(x-p.x,y-p.y);\n    }\n    Point operator *(const double d)const{\n        return Point(x*d,y*d);\n    }\n    bool operator <(const Point &p)const{\n        if(x==p.x) return y<p.y;\n        return x<p.x;\n    }\n    double norm(){\n        return x*x+y*y;\n    }\n\tbool input(){\n\t\tif(cin>>x>>y) return true;\n\t\treturn false;\n\t}\n};\n \nstruct Line{\n    Point a,b;\n    Line(){}\n    Line(Point _a,Point _b){\n        a=_a; b=_b;\n    }\n\tbool input(){\n\t\tif(a.input() && b.input()) return true;\n\t\treturn false;\n\t}\n};\n \nstruct Circle{\n    Point c;\n    double r;\n    Circle(){}\n    Circle(Point _c,double _r){\n        c=_c; r=_r;\n    }\n};\n\ntypedef Point Vector;\ntypedef vector<Point> Polygon;\ntypedef Line Segment;\n\ndouble dot(Point p,Point q){\n    return p.x*q.x+p.y*q.y;\n}\n \ndouble cross(Point p,Point q){\n    return p.x*q.y-q.x*p.y;\n}\n \nint ccw(Point a,Point b,Point c){ //a,b,c,?????¨?????°??????\n\tVector v1 = b-a;\n\tVector v2 = c-a;\n    if(cross(v1,v2)>EPS) return +1; //a->b->c ??????????¨???????\n    if(cross(v1,v2)<-EPS) return -1; //a->b->c ???????¨???????\n\tif(dot(v1,v2)<-EPS) return +2; //c???a-b???????????? c<-a->b\n\tif(v1.norm()<v2.norm()) return -2; //c???a-b????????? a->b->c\n    return 0; //c???a-b??? a->c->b\n}\n\nPoint project(Segment s,Point p){\n\tVector v1 = s.b-s.a;\n\tVector v2 = p-s.a;\n\tdouble r = dot(v1,v2)/v1.norm();\n\treturn s.a+v1*r;\n}\n\nPoint Reflect(Segment s,Point p){\n\treturn p+(project(s,p)-p)*2.0;\n}\n \nbool intersect_ll(Line l,Line m){\n\treturn ccw(l.a,l.b,m.a)*ccw(l.a,l.b,m.b)<=0 && ccw(m.a,m.b,l.a)*ccw(m.a,m.b,l.b)<=0;\n}\n \nbool crosspoint_ss(Segment s,Segment t,Point &p){\n    Vector a1,a2,b1,b2;\n    a1 = s.b-s.a; a2 = t.b-t.a;\n    b1 = t.a-s.a; b2 = s.a-t.b;\n    double s1,s2;\n    s1 = cross(a1,b1)/2; s2 = cross(a1,b2)/2;\n    if(s1+s2<EPS) return false; //??????\n    p = Point(t.a.x+a2.x*s1/(s1+s2),t.a.y+a2.y*s1/(s1+s2));\n    return true;\n}\n \nint crosspoint_ll(Line l,Line m,Point &p){\n    if(intersect_ll(l,m)==false) return 0; //?????????????????????\n    if(crosspoint_ss(l,m,p)==true) return 1;\n\treturn -1; //??????????????????(??????????????????)\n}\n \nint crosspoint_cc(Circle c1,Circle c2,Point &p1,Point &p2){\n    double d,a,t;\n    d = sqrt((c2.c-c1.c).norm());\n\tif(abs(c1.c.x-c2.c.x)<EPS && abs(c1.c.y-c2.c.y)<EPS && abs(c1.r-c2.r)<EPS)\n\t\treturn -1; //2????????????????????£?????????\n    if(d<abs(c1.r-c2.r) || c1.r+c2.r<d) return 0; //??¢?????????????????????\n    a = acos((c1.r*c1.r+d*d-c2.r*c2.r)/(2*c1.r*d));\n    t = atan2(c2.c.y-c1.c.y,c2.c.x-c1.c.x);\n    p1 = Point(c1.c.x+c1.r*cos(t+a),c1.c.y+c1.r*sin(t+a));\n    p2 = Point(c1.c.x+c1.r*cos(t-a),c1.c.y+c1.r*sin(t-a));\n    if(abs(p1.x-p2.x)<EPS && abs(p1.y-p2.y)<EPS) return 1; //?????????1???\n    return 2; //?????????2???\n}\n\nint contains(Polygon g,Point p){\n\tLine l = Line(p,Point(INF,p.y));\n\tint cnt = 0, n = g.size();\n\tfor(int i=0;i<n;i++){\n\t\tVector a = g[i]-p;\n\t\tVector b = g[(i+1)%n]-p;\n\t\tif(ccw(g[i],g[(i+1)%n],p)==0) return 1; //?????????\n\t\tif(a.y>b.y) swap(a,b);\n\t\tif(a.y<=EPS && EPS<b.y && cross(a,b)>EPS) cnt++;\n\t}\n\tif((cnt&1)==1) return 2; //??????????????????\n\treturn 0; //?????????????????????\n}\n\nPolygon andrewScan(Polygon s){\n\tif(s.size()<=2) return s;\n\tsort(s.begin(),s.end());\n\tPolygon g;\n\tfor(int i=0;i<s.size();i++){\n\t\tfor(int n=g.size(); n>=2 && ccw(g[n-2],g[n-1],s[i])!=-1; n--){\n\t\t\tg.pop_back();\n\t\t}\n\t\tg.push_back(s[i]);\n\t}\n\tint upper_n = g.size();\n\tfor(int i=s.size()-2;i>=0;i--){\n\t\tfor(int n=g.size(); n>upper_n && ccw(g[n-2],g[n-1],s[i])!=-1; n--){\n\t\t\tg.pop_back();\n\t\t}\n\t\tg.push_back(s[i]);\n\t}\n\treverse(g.begin(),g.end());\n\tg.pop_back();\n\treturn g;\n}\n\nint main(){\n\tSegment s;\n\tPoint p;\n\tint Q;\n\ts.input(); cin>>Q;\n\tfor(int i=0;i<Q;i++){\n\t\tp.input();\n\t\tPoint q = project(s,p);\n\t\tprintf(\"%.8lf %.8lf\\n\",q.x,q.y);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main(){\n\n\tdouble p0x,p0y,p1x,p1y,p2x,p2y,tx,ty;\n\tint q;\n\tdouble a01,a2t,b01,b2t;\n\n\tcin>>p0x>>p0y>>p1x>>p1y;\n\n\tcin>>q;\n\n\tfor(int i=0;i<q;i++){\n\t\tcin>>p2x>>p2y;\n\t\tif(p0x-p1x!=0) a01=(p0y-p1y)/(p0x-p1x);\n\t\telse a01=0;\n\t\tif(a01!=0) a2t=-1/a01;\n\t\telse a2t=0;\n\t\tb2t=p2y-a2t*p2x;\n\t\tb01=p0y-a01*p0x;\n\t\tif(b2t-b01!=0) tx=(b2t-b01)/(a01-a2t);\n\t\telse tx=0;\n\t\tty=a01*tx+b01;\n\t\tif(p0x==p1x) ty=p2y;\n\t\tif(p0y==p1y) tx=p2x;\n\t\tcout<<a01<<\",\"<<a2t<<\",\"<<b01<<\",\"<<b2t<<endl;\n\t\tprintf(\"%.10f %.10f\\n\",tx,ty);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main(){\n\n\tdouble p0x,p0y,p1x,p1y,p2x,p2y,tx,ty;\n\tint q;\n\tdouble a01,a2t,b01,b2t;\n\n\tcin>>p0x>>p0y>>p1x>>p1y;\n\n\tcin>>q;\n\n\tfor(int i=0;i<q;i++){\n\t\tcin>>p2x>>p2y;\n\t\tif(p0x-p1x!=0) a01=(p0y-p1y)/(p0x-p1x);\n\t\telse a01=0;\n\t\tif(a01!=0) a2t=-1/a01;\n\t\telse a2t=0;\n\t\tb2t=p2y-a2t*p2x;\n\t\tb01=p0y-a01*p0x;\n\t\tif(a01-a2t!=0) tx=(b2t-b01)/(a01-a2t);\n\t\telse tx=0;\n\t\tty=a01*tx+b01;\n\t\tif(p0x==p1x) ty=p2y;\n\t\tif(p0y==p1y) tx=p2x;\n\t\tprintf(\"%.10f %.10f\\n\",tx,ty);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b))<EPS)\n\n#define FOR(k,m,n) for(int (k)=(m);(k)<(n);(k)++)\n#define REP(i,n) FOR((i),0,(n))\n\n\n//???\n\n//???\nclass Point{\npublic:\n\tdouble x, y;\n\t//?????????????????????\n\tPoint(double x_=0.0,double y_=0.0):x(x_),y(y_){}\n\t\n\t//??????????????????????????????\n\tPoint operator + (Point &p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point &p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double k) { return Point(x * k, y * k); }\n\tPoint operator / (double k) { return Point(x / k, y / k); }\n\n\tbool operator  < (const Point &p)const {\n\t\treturn x!=p.x ? x<p.x : y<p.y;\n\t}\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n\t}\n};\ntypedef Point Vector;        //????????????\nstruct Segment{Point p1,p2;};//??????\ntypedef Segment Line;        //??´???\n\n//???\nclass Circle {\npublic:\n\tPoint center;\n\tdouble r;\n\t//?????????????????????\n\tCircle(Point c_=Point(),double r_=0.0):center(c_),r(r_){}\n};\ntypedef vector<Point> Polygon;//????§???¢??????????????????\n\n\n\n//??¢??°????????????\n//????????¢??°??????\nnamespace PFunc {\n\tdouble norm(Point p) { return p.x*p.x + p.y*p.y; }\n\tdouble abs(Point p) { return sqrt(norm(p)); }\n}\n\n//?????????????????¢??°??????\nnamespace VFunc {\n\t//??????\n\tdouble dot(Vector a, Vector b) { return a.x*b.x + a.y*b.y; }\n\t//??????\n\tdouble cross(Vector a, Vector b) { return a.x*b.y - a.y*b.x; }\n\t//??´?????????????¨????\n\tbool isOrthogonal(Vector a, Vector b) { return equals(dot(a, b), 0.0); }\n\tbool isOrthogonal(Point a1,Point  a2, Point b1,Point b2) {return isOrthogonal(a1-a2,b1-b2);}\n\tbool isOrthogonal(Segment s1, Segment s2) { return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0); }\n\t//????????????????¨????\n\tbool isParallel(Vector a, Vector b) { return equals(cross(a, b), 0.0); }\n\tbool isParallel(Point a1, Point  a2, Point b1, Point b2) {return isParallel(a1 - a2, b1 - b2);}\n\tbool isParallel(Segment s1, Segment s2) {return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);}\n\n\t//?°???±\n\tPoint project(Segment s, Point p) {\n\t\tPoint base = s.p2 - s.p1;\n\t\tdouble r = dot(p - s.p1, base) / PFunc::norm(base);\n\t\treturn s.p1 + base*r;\n\t}\n}\n\n \n//?????°\nSegment s;\nint q;\nPoint temp,ans;\n\nint main() {\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tcin>>q;\n\tREP(i, q) {\n\t\tcin>>temp.x>>temp.y;\n\t\tans=VFunc::project(s,temp);\n\t\tcout<<ans.x<<\" \"<<ans.y<<endl;\n\t}\n\tcin>>q;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef complex<double> P;\ntypedef complex<double> V;\ntypedef vector<P> vecP;\ntypedef pair<P,P> L;\ntypedef pair<P,P> S;\ntypedef pair<P,double> C;\nconst double eps=1e-8;\nconst double PI=acos(-1);\nconst double PI2=PI*2.0;\n\nnamespace std{\n  bool operator < (const P &a,const P &b){\n    return (a.imag()==b.imag()?\n            a.real()<b.real():\n            a.imag()<b.imag());\n  }\n};\n\nV normal(V a){\n  assert( abs(a)>0 );\n  return a/abs(a);\n}\n\ndouble Sqrt( double x ){\n  if(x<0)return 0;\n  else return sqrt(x);\n}\n\nP Vector(L a){\n  return a.second-a.first;\n}\n\nbool eq(double a,double b){\n  return (-eps<a-b&&a-b<eps);\n}\n\nbool eq(P a,P b){\n  return ( eq(a.real(),b.real()) && eq(a.imag(),b.imag()) );\n}\n\ndouble dot(P a,P b){\n  return real(b*conj(a));\n}\n\ndouble cross(P a,P b){\n  return imag(b*conj(a));\n}\n\ndouble getArg(P a,P b){\n  return arg(b*conj(a));\n}\n\ndouble getTime(V a,V b){\n  assert( eq(cross(a,b),0) );\n  return ( dot(a,b) < 0 ? -1.0 : 1.0 ) * abs(b) / abs(a);\n}\n\n\nP project(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nP reflect(P a,P b,P c){\n  b-=a,c-=a;\n  return a+b*real(c/b);\n}\n\nint ccw(P a,P b,P c){\n  P ab=b-a,ac=c-a;\n  P k=ac*conj(ab);\n  if(k.imag()>0)return 1;\n  if(k.imag()<0)return -1;\n  if(k.real()<0)return 2;\n  if(abs(ab)<abs(ac))return -2;\n  return 0;\n}\n\nbool isParallel(P a,P b){\n  return eq(0, cross(a,b));\n}\n\nbool isParallel(L l0,L l1){\n  return eq(0, cross( Vector(l0) , Vector(l1) ) );\n}\n\nbool onLP(L l,P p){\n  P a=l.first, b=l.second;\n  return eq(0, cross(b-a,p-a));\n}\n\nbool onSP(S s,P p){\n  P a=s.first, b=s.second;\n  return eq( abs(b-a) , abs(a-p)+abs(b-p) );\n}\n\nbool isCrossSS(S s0,S s1){\n  P a=s0.first, b=s0.second;\n  P c=s1.first, d=s1.second;\n  int f0 = ccw(a,b,c) * ccw(a,b,d);\n  int f1 = ccw(c,d,a) * ccw(c,d,b);\n  return (f0<=0 && f1<=0);\n}\n\nbool isCrossLS(L l,S s){\n  P a=l.first, b=l.second;\n  P c=s.first, d=s.second;\n  return ( ccw(a,b,c) * ccw(a,b,d) <= 0 );\n}\n\ndouble distLP(L l,P p){\n  P a=l.first, b=l.second;\n  double res = cross(b-a,p-a) / abs(b-a);\n  return abs(res);\n}\n\ndouble distSP(S s,P p){\n  P a=s.first, b=s.second;\n  if( dot(b-a,p-a) < eps )return abs(p-a);\n  if( dot(a-b,p-b) < eps )return abs(p-b);\n  return distLP(s,p);\n}\n\nP getCrossLL(L l0,L l1){\n  P a=l0.first, b=l0.second;\n  P c=l1.first, d=l1.second;\n  a-=d;b-=d;c-=d;\n  return d+a+(b-a)*imag(a/c)/imag(a/c-b/c);\n}\n\n\n \nint inPolygon(vecP &t,P p){\n  int n=t.size();\n  double sum=0;\n  for(int i=0;i<n;i++){\n    P a=t[i],b=t[(i+1==n?0:i+1)];\n    if( onSP(S(a,b),p) )return 1;\n    sum+= getArg(a-p,b-p);\n  }\n  if( abs(sum) < eps )return 0;\n  else return 2;\n}\n\nvecP andrewScan(vecP &t){\n  int N=t.size(),C=0;\n  vecP R(N);\n  for(int i=0;i<N;i++){\n    while(2<=C&&ccw(R[C-2],R[C-1],t[i])==-1)C--;\n    R[C++]=t[i];\n  }\n  vecP res(C);\n  for(int i=0;i<C;i++)res[i]=R[i];\n  return res;\n}\n \nvecP convexHull(vecP &t){\n  sort(t.begin(),t.end());\n  vecP u=andrewScan(t);\n  reverse(t.begin(),t.end());\n  vecP l=andrewScan(t);\n  for(int i=1;i+1<(int)l.size();i++)u.push_back(l[i]);\n  return u;\n}\n\nvecP cutConvex(vecP &t,L l){\n  P a=l.first, b=l.second;\n  int N=t.size();\n  vecP res;\n  for(int i=0;i<N;i++){\n    P c=t[i],d=t[(i+1)%N];\n    int C=ccw(a,b,c),D=ccw(a,b,d);\n    if(C!=-1)res.push_back(c);\n    if(C==-D&&abs(C)==1)res.push_back(getCrossLL( l ,L(c,d) ));\n  }\n  return res;\n}\n\nP getVector(const vecP &t, int id){\n  int n=t.size();\n  return t[ (id+1)%n ] - t[id%n];\n}\n\ndouble convex_diameter(vecP &t) {\n  int n = t.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (imag(t[i]) > imag(t[is])) is = i;\n    if (imag(t[i]) < imag(t[js])) js = i;\n  }\n  double maxd = norm(t[is]-t[js]);\n \n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    \n    if (cross( getVector(t,i), getVector(t,j)) >= 0) j = (j+1) % n;\n    \n    else i = (i+1) % n;\n    if (norm(t[i]-t[j]) > maxd) {\n      maxd = norm(t[i]-t[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return maxd; /* farthest pair is (maxi, maxj). */\n}\n\nbool compare_y(const P &a,const P &b){\n  return a.imag() < b.imag();\n}\n\ndouble closest_pair(P *a, int n){\n  if(n <= 1) return 1e30;\n  int m = n / 2;\n  double x = a[m].real();\n  double d = min(closest_pair(a, m), closest_pair(a + m, n - m));\n  inplace_merge(a, a + m, a + n, compare_y);\n  vector<P> b;\n  for(int i=0;i<n;i++){\n    if( abs(a[i].real() - x) >= d) continue;\n    for(int j=0;j<(int)b.size();j++){\n      double dx = real(a[i] - b[b.size() - j - 1]);\n      double dy = imag(a[i] - b[b.size() - j - 1]);\n      if(dy >= d) break;\n      d = min(d, sqrt(dx * dx + dy * dy));\n    }\n    b.push_back(a[i]);\n  }\n  return d;\n}\n\nP _pool[200005];\ndouble minDist(vecP &t){\n  int n=t.size();\n  for(int i=0;i<n;i++)_pool[i]=t[i];\n  sort( _pool, _pool+n);\n  return closest_pair(_pool, n);\n}\n\nint getStateCC(C a,C b){\n  double ar=a.second, br=b.second;\n  double dist=abs(a.first-b.first);\n  if(dist>ar+br+eps)return 4;\n  if(dist>ar+br-eps)return 3;\n  if(dist>abs(ar-br)+eps)return 2;\n  if(dist>abs(ar-br)-eps)return 1;\n  return 0;\n}\n\nP getCrossCC(C a,C b){\n  P p1=a.first, p2=a.second;\n  double r1=a.second, r2=b.second;\n  double cA = (r1*r1+norm(p1-p2)-r2*r2) / (2.0*r1*abs(p1-p2));\n  return p1+(p2-p1)/abs(p1-p2)*r1*P(cA,Sqrt(1.0-cA*cA));\n}\n\nS getTangentCP(C a,P p){\n  P base=a.first-p;\n  double ar=a.second;\n  double w=Sqrt(norm(base)-ar*ar);\n  P s=p+base*P(w,ar)/norm(base)*w;\n  P t=p+base*P(w,-ar)/norm(base)*w;\n  return S(s,t);\n}\n\nS getInTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double w=ar+br;\n  double h=Sqrt(norm(base)-w*w);\n  P k=base*P(w,h*flg)/norm(base);\n  return S(ap+k*ar,bp-k*br);\n}\n  \nS getOutTangent(C a,C b,double flg=1.0){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  P base=bp-ap;\n  double h=br-ar;\n  \n  double w=Sqrt(norm(base)-h*h);\n  P k=base*P(w,h*flg)/norm(base)*P(0,flg);\n  return S(ap+k*ar,bp+k*br);\n}\n  \nvector<S> getTangent(C a,C b){\n  P ap=a.first,bp=b.first;\n  double ar=a.second,br=b.second;\n  \n  vector<S> res;\n  double dist=abs(ap-bp);\n    \n  if(dist>ar+br+eps)\n    res.push_back(getInTangent(a,b,1));\n  \n  if(dist>ar+br-eps)\n    res.push_back(getInTangent(a,b,-1));\n  \n  if(dist>abs(ar-br)+eps)\n    res.push_back(getOutTangent(a,b,1));\n  \n  if(dist>abs(ar-br)-eps)\n    res.push_back(getOutTangent(a,b,-1));\n  \n  return res;\n}\n\n\nvecP getCrossCS(C cir,S s, bool debug=false){\n  P a=s.first, b=s.second;\n  double cr=cir.second;\n  P cp=cir.first;\n  \n  vecP res;\n  P base=b-a,  target=project(a,b,cp);\n  \n  double length=abs(base), h=abs(cp-target);\n  base/=length;\n  \n  if(cr+eps<h)return res;\n  double w=Sqrt(cr*cr-h*h);\n  double L=getTime( normal(b-a) ,target-a)-w,  R=L+w*2.0;\n  \n  if( -eps<L && L< length+eps )res.push_back(a+base*L);\n  if( eq(L,R) )return res;\n  if( -eps<R && R< length+eps )res.push_back(a+base*R);\n  return res;\n}\n \ndouble getArea(C c,P a,P b){\n  P cp=c.first;\n  double cr=c.second;\n  \n  P va=cp-a,  vb=cp-b;\n  double A=abs(va), B=abs(vb);\n  double f=cross(va,vb), d=distSP( S(a,b) ,cp), res=0;\n  \n  if( eq(0, f ) )return 0;\n  if(A<cr+eps&&B<cr+eps)return f*0.5;\n  if(d>cr-eps)return cr*cr*PI*getArg(va,vb)/PI2;\n   \n  vecP u=getCrossCS(c, S(a,b) );\n  \n  assert( !u.empty() );\n  u.insert(u.begin(), a),  u.push_back(b);\n \n  for(int i=0;i+1<(int)u.size();i++) res+=getArea(c,u[i],u[i+1]);\n  return res;\n}\n \ndouble getCrossArea(vecP t,C c){\n  int n=t.size();\n  if(n<3)return 0;\n  double res=0;\n  for(int i=0;i<n;i++){\n    P a=t[i], b=t[(i+1)%n];\n    res+=getArea(c,a,b);\n  }\n  return res;\n}\n\nint main(){\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<iostream>\n#include<fstream>\n#include<iomanip>\n#include<math.h>\nusing namespace std;\n\ntemplate <class T>\nclass _Point{\npublic:\n\tT x;\n\tT y;\n\t_Point(){}\n\t_Point(T _x, T _y) :x(_x), y(_y){}\n\t_Point(const _Point & v) :x(v.x), y(v.y){}\n\n\tconst _Point operator + (const _Point & v)\n\t{\n\t\treturn _Point(x+v.x,y+v.y);\n\t}\n\tconst _Point operator - (const _Point & v)\n\t{\n\t\treturn _Point(x - v.x, y - v.y);\n\t}\n\tT abs() const {\n\t\treturn sqrt(x*x + y*y);\n\t}\n\t_Point unit() const{\n\t\tT len = abs();\n\t\treturn _Point(x / len, y / len);\n\t}\n\tT operator*(const _Point &v) const\n\t{\n\t\treturn x * v.x + y * v.y;\n\t}\n\tconst _Point operator*(const T &len) const\n\t{\n\t\treturn _Point(len * x, len * y);\n\t}\n};\ntypedef double R;\ntypedef _Point<R> Point;\ntypedef Point Vector;\n\nint main(){\n\tstd::istream & c_in = cin;\n\n\tPoint p, p1, p2;\n\tc_in >> p1.x >> p1.y >> p2.x >> p2.y;\n\tVector P12(p2 - p1);\n\tVector e12(P12.unit());\n\n\tint q;\n\tc_in >> q;\n\tfor (int i = 0; i < q; ++i)\n\t{\n\t\tPoint p;\n\t\tc_in >> p.x >> p.y;\n\t\tp = p - p1;\n\t\tR projection = p*e12;\n\t\tVector b(projection*(e12.x), projection*(e12.y));\n\t\tPoint X(p1 + b);\n\t\tcout << fixed << setprecision(10) << X.x << \" \" << X.y << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n\nstruct Vector{\n    double x,y;\n    Vector(double x=0,double y=0):x(x),y(y){}\n};\ntypedef Vector Point;\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\ndouble abs(Vector a){\n    return sqrt(a.x*a.x+a.y*a.y);\n}\n\nint main(){\n    Point a,b;\n    cin>>a.x>>a.y>>b.x>>b.y;\n    int T;\n    cin>>T;\n    while(T--){\n        Point c;\n        cin>>c.x>>c.y;\n        Vector p1,p2;\n        p1.x=b.x-a.x;\n        p1.y=b.y-a.y;\n        p2.x=c.x-a.x;\n        p2.y=c.y-a.y;\n        //cout<<p1.x<<' '<<p1.y<<' '<<p2.x<<' '<<p2.y<<endl;\n        //cout<<dot(p1,p2)<<endl;\n        double s1=dot(p1,p2);\n        double s2=abs(p1);\n        double k=s1/(s2*s2);\n        //cout<<s1<<\" \"<<s2<<\" \"<<k<<endl;\n        //cout<<dx<<\" \"<<dy<<endl;\n        Point ans;\n        Vector ac=Vector(k*p1.x,k*p1.y);\n        ans.x=ac.x+a.x,ans.y=ac.y+a.y;\n        printf(\"%.10lf %.10lf\\n\",ans.x,ans.y);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define For(i,x,y) for (register int i=(x);i<=(y);i++)\n#define FOR(i,x,y) for (register int i=(x);i<(y);i++)\n#define Dow(i,x,y) for (register int i=(x);i>=(y);i--)\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define siz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define fil(a,b) memset((a),(b),sizeof(a))\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pa;\ntypedef double db;\ninline ll read(){\n    ll x=0,f=1;char c=getchar();\n    while ((c<'0'||c>'9')&&(c!='-')) c=getchar();\n    if (c=='-') f=-1,c=getchar();\n    while (c>='0'&&c<='9') x=x*10+c-'0',c=getchar();\n    return x*f;\n}\n\nnamespace Geometry{\n\tconst db eps = 1e-9;\n\tstruct point{\n\t\tdb x,y;\n\t\tinline point operator + (const point &p){return (point){x+p.x,y+p.y};}\n\t\tinline point operator - (const point &p){return (point){x-p.x,y-p.y};}\n\t\tinline db operator * (const point &p){return x*p.x+y*p.y;}\n\t\tinline point operator / (const db &v){return (point){x/v,y/v};}\n\t\tinline point operator * (const db &v){return (point){x*v,y*v};}\n\t};\n\ttypedef point vec;\n\tinline db dot(vec a,vec b){return a.x*b.x+a.y*b.y;}\n\tinline db sqr(db x){return x*x;}\n\tinline db dis(point a,point b){return sqrt(sqr(a.x-b.x)+sqr(a.y-b.y));}\n\tinline db dis2(point a,point b){return sqr(a.x-b.x)+sqr(a.y-b.y);}\n\tinline db cross(vec a,vec b){return a.x*b.y-a.y*b.x;}\n\tstruct line{\n\t\tpoint a,b;\n\t};\n\tinline point projection(point A,line b){\n\t\tpoint B=b.a,C=b.b;\n\t\tvec BA=A-B,BC=C-B,BD=BC*(BA*BC/dis2(B,C));\n\t\treturn B+BD;\n\t}\n};\nusing namespace Geometry;\n\nint main(){\n\tline a;scanf(\"%lf%lf%lf%lf\",&a.a.x,&a.a.y,&a.b.x,&a.b.y);\n\tint T;scanf(\"%d\",&T);\n\twhile (T--){\n\t\tpoint b,c;scanf(\"%lf%lf\",&b.x,&b.y);\n\t\tc=projection(b,a);\n\t\tprintf(\"%.10lf %.10lf\\n\",c.x,c.y);\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\nusing namespace std;\n\nstruct Point{\n    double x;\n    double y;\n    Point(double x, double y) : x(x), y(y){}\n    Point operator+(Point p){\n        return Point(x + p.x, y + p.y);\n    }\n    Point operator*(double d){\n        return Point(x * d, y * d);\n    }\n};\ntypedef Point Vector;\n\ndouble dot(Vector v1, Vector v2){\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\nint main(){\n    int x_p1, y_p1, x_p2, y_p2;\n    cin >> x_p1 >> y_p1 >> x_p2 >> y_p2;\n    Point p1(x_p1, y_p1);\n    Point p2(x_p2, y_p2);\n    Vector b(p2.x - p1.x, p2.y - p1.y);\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        int x, y;\n        cin >> x >> y;\n        Vector h(x - p1.x, y - p1.y);\n        Point ans = p1 + b * (dot(h, b) / dot(b, b));\n        cout << fixed << setprecision(10);\n        cout << ans.x << \" \" << ans.y << endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <cstdio>\nusing namespace std;\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point{\npublic:\n  double x, y;\n\n  Point(double x = 0, double y = 0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n  Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n  Point operator * (double a) { return Point(a * x, a * y); }\n  Point operator / (double a) { return Point(x / a, y / a); }\n\n  bool operator < (const Point &p) const {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator == (const Point &p) const {\n    return equals(x, p.x) && equals(y, p.y);\n  }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n};\n\ntypedef Point Vector;\n\nstruct Segment{\n  Point p1, p2;\n};\n\ntypedef Segment Line;\n\ndouble dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }\ndouble cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }\n\nbool isOrthogonal(Vector a, Vector b){\n  return equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n  return equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\nbool isOrthogonal(Segment s1, Segment s2){\n  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n  return equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n  return equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\nbool isParallel(Segment s1, Segment s2){\n  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\nPoint project(Segment s, Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / base.norm();\n  return s.p1 + base * r;\n}\n\nint main(void){\n  int q;\n  double x0, y0, x1, y1, x2, y2, x3, y3;\n  \n  cin >> x1 >> y1 >> x2 >> y2;\n  \n  Segment s;\n  Point *p1 = new Point(x1, y1);\n  Point *p2 = new Point(x2, y2);\n  s.p1 = *p1, s.p2 = *p2;\n  \n  cin >> q;\n  for(int i = 0; i < q; i++){\n    cin >> x0 >> y0;\n    Point *p0 = new Point(x0, y0);\n    Point projection = project(s, *p0);\n    printf(\"%.10f %.10f\\n\", projection.x, projection.y);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma warning(disable : 4267) // \"int n = (unsigned)size\"\n\nusing vi = vector<int>; using vvi = vector<vi>; using vvvi = vector<vvi>;\nusing ll = long long int;\nusing vll = vector<ll>; using vvll = vector<vll>; using vvvll = vector<vvll>;\nusing vd = vector<double>; using vvd = vector<vd>; using vvvd = vector<vvd>;\nusing P = pair<int, int>;\nusing Pll = pair<ll, ll>;\nusing cdouble = complex<double>;\n\nconst double eps = 1e-9;\nconst double INFD = numeric_limits<double>::infinity();\n#define Loop(i, n) for(int i = 0; i < int(n); i++)\n#define Loopll(i, n) for(ll i = 0; i < ll(n); i++)\n#define Loop1(i, n) for(int i = 1; i <= int(n); i++)\n#define Loopll1(i, n) for(ll i = 1; i <= ll(n); i++)\n#define Loopr(i, n) for(int i = int(n) - 1; i >= 0; i--)\n#define Looprll(i, n) for(ll i = ll(n) - 1; i >= 0; i--)\n#define Loopr1(i, n) for(int i = int(n); i >= 1; i--)\n#define Looprll1(i, n) for(ll i = ll(n); i >= 1; i--)\n#define Foreach(buf, container) for(auto buf : container)\n#define Loopdiag(i, j, h, w, sum) for(int i = ((sum) >= (h) ? (h) - 1 : (sum)), j = (sum) - i; i >= 0 && j < (w); i--, j++)\n#define Loopdiagr(i, j, h, w, sum) for(int j = ((sum) >= (w) ? (w) - 1 : (sum)), i = (sum) - j; j >= 0 && i < (h); j--, i++)\n#define Loopdiagsym(i, j, h, w, gap) for (int i = ((gap) >= 0 ? (gap) : 0), j = i - (gap); i < (h) && j < (w); i++, j++)\n#define Loopdiagsymr(i, j, h, w, gap) for (int i = ((gap) > (h) - (w) - 1 ? (h) - 1 : (w) - 1 + (gap)), j = i - (gap); i >= 0 && j >= 0; i--, j--)\n#define Loopitr(itr, container) for(auto itr = container.begin(); itr != container.end(); itr++)\n#define printv(vector) Loop(ex_i, vector.size()) { cout << vector[ex_i] << \" \"; } cout << endl;\n#define printmx(matrix) Loop(ex_i, matrix.size()) { Loop(ex_j, matrix[ex_i].size()) { cout << matrix[ex_i][ex_j] << \" \"; } cout << endl; }\n#define quickio() ios::sync_with_stdio(false); cin.tie(0);\n#define bitmanip(m,val) static_cast<bitset<(int)m>>(val)\n#define Comp(type_t) bool operator<(const type_t &another) const\n#define fst first\n#define snd second\nbool nearlyeq(double x, double y) { return abs(x - y) < eps; }\nbool inrange(ll x, ll t) { return x >= 0 && x < t; }\nbool inrange(vll xs, ll t) { Foreach(x, xs) if (!(x >= 0 && x < t)) return false; return true; }\nint ceillog2(ll x) { int ret = 0;\tx--; while (x > 0) { ret++; x >>= 1; } return ret; }\nll rndf(double x) { return (ll)(x + (x >= 0 ? 0.5 : -0.5)); }\nll floorsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (m * m <= x ? 0 : -1); }\nll ceilsqrt(ll x) { ll m = (ll)sqrt((double)x); return m + (x <= m * m ? 0 : 1); }\nll rnddiv(ll a, ll b) { return (a / b + (a % b * 2 >= b ? 1 : 0)); }\nll ceildiv(ll a, ll b) { return (a / b + (a % b == 0 ? 0 : 1)); }\nll gcd(ll m, ll n) { if (n == 0) return m; else return gcd(n, m % n); }\nll lcm(ll m, ll n) { return m * n / gcd(m, n); }\n\n/*******************************************************/\n\nstruct point_t {\n\tdouble x, y;\n};\n\n// ax + by + c = 0\nstruct line_t {\n\tdouble a, b, c;\n};\n\npoint_t cross_point(line_t l, line_t m) {\n\tpoint_t p = { INFD, INFD };\n\tdouble d = l.a * m.b - m.a * l.b;\n\tif (nearlyeq(d, 0)) return p;\n\tdouble x = l.b * m.c - m.b * l.c;\n\tdouble y = l.a * m.c - m.a * l.c;\n\tp = { x / d, y / -d };\n\treturn p;\n}\n\n// if a vector is (dx, dy), then a = dy, b = -dx\nline_t solve_line(double a, double b, point_t p) {\n\treturn { a, b, -a * p.x - b * p.y };\n}\n\nint main() {\n\tpoint_t p1, p2;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tline_t l = solve_line(p2.y - p1.y, -(p2.x - p1.x), p1);\n\tint q; cin >> q;\n\tcout << setprecision(12);\n\tLoop(i, q) {\n\t\tpoint_t p;\n\t\tcin >> p.x >> p.y;\n\t\tline_t m = solve_line(l.b, -l.a, p);\n\t\tpoint_t a = cross_point(l, m);\n\t\tcout << a.x << \" \" << a.y << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\n#define _overload(_1,_2,_3,name,...) name\n#define _rep(i,n) _range(i,0,n)\n#define _range(i,a,b) for(int i=int(a);i<int(b);++i)\n#define rep(...) _overload(__VA_ARGS__,_range,_rep,)(__VA_ARGS__)\n\n#define _rrep(i,n) _rrange(i,n,0)\n#define _rrange(i,a,b) for(ll i=int(a)-1;i>=int(b);--i)\n#define rrep(...) _overload(__VA_ARGS__,_rrange,_rrep,)(__VA_ARGS__)\n\n#define _all(arg) begin(arg),end(arg)\n#define uniq(arg) sort(_all(arg)),(arg).erase(unique(_all(arg)),end(arg))\n#define getidx(ary,key) lower_bound(_all(arg),key)-begin(arg)\n#define clr(a,b) memset((a),(b),sizeof(a))\n#define bit(n) (1LL<<(n))\n\nusing namespace std;\n\nusing R=long double;\nconst R EPS = 1E-11;\nconst R INF = 1E40;\nconstexpr R PI = acos(R(-1));\ninline int sgn(const R& r){ return (r > EPS) - (r < -EPS);}\n\nusing P=complex<R>;\nconstexpr P O = P(0,0);\nistream& operator >> (istream& is,P& p){ R x,y;is >> x >> y; p=P(x,y); return is;}\nostream& operator << (ostream& os,P& p){ os << real(p) << \" \" << imag(p); return os;}\n\n//?????? dot ?????? det\ninline R dot(P o,P a,P b){a-=o,b-=o; return real(conj(a)*b);}\ninline R det(P o,P a,P b){a-=o,b-=o; return imag(conj(a)*b);}\n\nusing L=struct{P s,t;};\n\n// ?°???± verify AOJ CGL_1_A\nP proj(P o,P a,P b){ a-=o,b-=o; return a*real(b/a);}\nP proj(L l,P p){ return l.s+proj(l.s,l.t,p);}\n// ????°? verify AOJ CGL_1_B\nP refl(L l,P p){ return R(2.0)*proj(l,p)-p;}\n// CCW verify AOJ CGL_1_C\nenum CCW{ LEFT = 1,RIGHT = 2,BACK = 4,FRONT = 8,ON = 16};\ninline int ccw(P o,P a, P b) {//???a??¨???b???????????????????????????\n\tif (sgn(det(o,a,b)) > 0) return LEFT;    // counter clockwise\n\tif (sgn(det(o,a,b)) < 0) return RIGHT;   // clockwise\n\tif (sgn(dot(o,a,b)) < 0) return BACK;    // b--base--a on line\n\tif (sgn(norm(a)-norm(b)) < 0) return FRONT;   // base--a--b on line\n\treturn ON;// base--b--a on line  a??¨b????????????????????????\n}\n\nint main(void){\n\tP a,b,p;\n\tint n;\n\tcin >> a >> b >> n;\n\tL l={a,b};\n\tcout.precision(20);\n\trep(i,n){\n\t\tcin >> p;\n\t\tP ans=proj(l,p);\n\t\tcout << fixed << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <complex>\nusing namespace std;\n\nint main(void){\n\tdouble x,y;\n\tint q;\n\tcin>>x>>y;\n\tcomplex<double> p1(x,y);\n\tcin>>x>>y;\n\tcomplex<double> p2(x,y);\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x>>y;\n\t\tcomplex<double> p(x,y);\n\t\tcomplex<double> p1p=p-p1;\n\t\tcomplex<double> p1p2=p2-p1;\n\t\tdouble r=abs(p1p);\n\t\tdouble t=arg(p1p)-arg(p2);\n\t\tr*=cos(t);\n\t\tcomplex<double> res=polar(r,arg(p2-p1))+p1;\n\t\tprintf(\"%.8lf %.8lf\\n\",real(res),imag(res));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long lint;\ntypedef long double louble;\n\ntemplate<typename T1,typename T2> inline T1 max(T1 a,T2 b){return a<b?b:a;}\ntemplate<typename T1,typename T2> inline T1 min(T1 a,T2 b){return a<b?a:b;}\n\nnamespace ae86\n{\n\tconst int bufl = 1<<15;\n\n\tchar buf[bufl],*s=buf,*t=buf;\n\n\tinline int fetch()\n\t{\n\t\tif(s==t){t=(s=buf)+fread(buf,1,bufl,stdin);if(s==t)return EOF;}\n\t\treturn *s++;\n\t}\n\n\tinline int ty()\n\t{\n\t\tint a=0,b=1,c=fetch();\n\t\twhile(!isdigit(c))b^=c=='-',c=fetch();\n\t\twhile(isdigit(c))a=a*10+c-48,c=fetch();\n\t\treturn b?a:-a;\n\t}\n}\nusing ae86::ty;\n\nconst double eps = 1e-9;\n\ninline int dcmp(double x){if(-eps<x && x<eps)return 0;return x>0?1:-1;}\n\nstruct points\n{\n\tdouble x,y;\n\tpoints(double _x=0,double _y=0){x=_x,y=_y;}\n\n\tinline friend points operator + (points a,points b){return points(a.x+b.x,a.y+b.y);}\n\tinline friend points operator - (points a,points b){return points(a.x-b.x,a.y-b.y);}\n\tinline friend points operator * (points a,double b){return points(a.x*b,a.y*b);}\n\tinline friend points operator / (points a,double b){return points(a.x/b,a.y/b);}\n\n\tvoid takein(){x=ty(),y=ty();}\n\tvoid print(char ends='\\n'){printf(\"%.12lf %.12lf\",x,y),putchar(ends);}\n};\n\ninline double dox(points a,points b){return a.x*b.x+a.y*b.y;}\ninline double cox(points a,points b){return a.x*b.y-a.y*b.x;}\ninline double length(points a){return sqrt(dox(a,a));}\n\npoints p1,p2,pd;\n\nvoid finder()\n{\n\tpoints p;\n\tp.takein();\n\n\tdouble dis=dox(p-p1,pd-p1);\n\tpoints tar=p1+(pd-p1)*dis;\n\ttar.print();\n}\n\nint main()\n{\n\tp1.takein(),p2.takein();\n\tpd=p1+(p2-p1)/(length(p2-p1));\n\t\n\tint q=ty();\n\twhile(q--)finder();\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <complex>\n#include <cmath>\n\nusing namespace std;\n\nstatic const double EPS=1e-12;\nstatic const double INF=1e24;\n\nusing Point=complex<double>;\nusing Plane=vector<Point>;\n\nbool operator<(const Point &a, const Point &b) {\n    return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b);\n}\n\ndouble cross_prod(const Point &a, const Point &b) {\n    return imag(conj(a)*b);\n}\n\ndouble dot_prod(const Point &a, const Point &b) {\n    return real(conj(a)*b);\n}\n\nstruct Line: public vector<Point> {\n    Line() {}\n    Line(const Point &a, const Point &b) {\n        push_back(a);\n        push_back(b);\n    }\n};\n\nstruct Circle {\n    Point p;\n    double r;\n    Circle() {}\n    Circle(const Point &p, const double r): p(p), r(r) {}\n};\n\nint main() {\n    double x, y;\n    scanf(\"%lf %lf\", &x, &y);\n    Point p1(x, y);\n\n    scanf(\"%lf %lf\", &x, &y);\n    Point p2(x, y);\n\n    Point e(real(p2)-real(p1), imag(p2)-imag(p1));\n    e /= abs(e);\n\n    size_t q;\n    scanf(\"%zu\", &q);\n    for (size_t i=0; i<q; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        Point p(x, y);\n\n        double r=dot_prod(p, e);\n        Point z=p1+r*e;\n        printf(\"%.12f %.12f\\n\", real(z), imag(z));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n\ntypedef struct coo {\n    int x;\n    int y;\n};\n\nint main() {\n    coo p1, p2;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    int q;\n    cin >> q;\n    coo* p = new coo[q];\n    for (int i = 0; i < q; i++) {\n        cin >> p[i].x >> p[i].y;\n        int naiseki = (p[i].x - p1.x) * (p2.x - p1.x) + (p[i].y - p1.y) * (p2.y - p1.y);\n        double leng = (double)naiseki / (double)((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\n        printf(\"%6.10f %6.10f\\n\", (p1.x + (p2.x - p1.x) * leng), (p1.y + (p2.y - p1.y) * leng));\n    }\n    delete[] p;\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <math.h>\n \nint main() {\n    int xp1, xp2, yp1, yp2, p, xp, yp;\n    scanf(\"%d%d%d%d%d\", &xp1, &yp1, &xp2, &yp2, &p);\n    while(p-- > 0) {\n        scanf(\"%d%d\", &xp, &yp);\n        double r = ((xp2-xp1)*(xp-xp1)+(yp2-yp1)*(yp-yp1))/(pow(xp2-xp1,2)+pow(yp2-yp1,2));\n        printf(\"%.8f %.8f\\n\", (1-r)*xp1+r*xp2, (1-r)*yp1+r*yp2);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\nstruct Point{double x, y;};\n\nint main(int argc, char const *argv[])\n{\n    Point p0, p1, p2;\n    Point a, b, x;\n    int q;\n    scanf(\"%lf %lf %lf %lf\", &p1.x, &p1.y, &p2.x, &p2.y);\n    a.x = p2.x - p1.x;\n    a.y = p2.y - p1.y;\n\n    scanf(\"%d\", &q);\n\n    for(int i=0; i<q; i++){\n        scanf(\"%lf %lf\", &p0.x, &p0.y);\n        b.x = p0.x - p1.x;\n        b.y = p0.y - p1.y;\n        x.x = (a.x*b.x+a.y*b.y)/(a.x*a.x+a.y*a.y) * a.x;\n        x.y = (a.x*b.x+a.y*b.y)/(a.x*a.x+a.y*a.y) * a.y;\n        printf(\"%.10lf %.10lf\\n\", x.x, x.y);\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <sstream>\n#include <map>\n#include <set>\n#include <cmath>\n\n#define REP(i,k,n) for(int i=k;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define INF 1<<30\n#define pb push_back\n#define mp make_pair\n#define EPS 1e-8\n#define equals(a,b) fabs((a) - (b)) < EPS\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\n\nstruct Point {\n\tdouble x, y;\n\n\tPoint(double x=0, double y=0) : x(x), y(y) {}\n\n\tPoint operator+(const Point &o) const { return Point(x+o.x, y+o.y); }\n\n\tPoint operator-(const Point &o) const { return Point(x-o.x, y-o.y); }\n\n\tPoint operator*(const double m) const { return Point(x*m, y*m); }\n\n\tPoint operator/(const double d) const { return Point(x/d, y/d); }\n\n\tbool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }\n\n\tbool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }\n\n\tdouble cross(const Point &o) const { return x * o.y - y * o.x; }\n\n\tdouble dot(const Point &o) const { return x * o.x + y * o.y; }\n\n\tdouble atan() const { return atan2(y, x); }\n\n\tdouble norm() const { return sqrt(dot(*this)); }\n\n\tdouble distance(const Point &o) const { return (o - (*this)).norm(); }\n\n\tdouble area(const Point &a,const Point &b) {\n\t\tPoint p = a - (*this), p2 = b - (*this); \n\t\treturn p.cross(p2);\n\t}\n\n\tdouble area_abs(const Point &a,const Point &b) const {\n\t\tPoint p = a - (*this), p2 = b - (*this);\n\t\treturn fabs(p.cross(p2)) / 2.0;\n\t}\t\n\n\t//線分abが自身に含まれているのかどうか判断する\n\tint between(const Point &a,const Point &b) {\n\t\tif(area(a,b) != 0) return 0;\n\n\t\tif(a.x != b.x)  return ((a.x <= x) && (x <= b.x) || (a.x >= x) && (x >= b.x));\n\t\telse return ((a.y <= y) && (y <= b.y) || (a.y >= y) && (y >= b.y));\n\t}      \n\n\tdouble distance_seg(const Point& a,const Point& b) {\n\t\tif((b-a).dot(*this-a) < EPS) {\n\t\t\treturn (*this-a).norm();\n\t\t}\n\t\tif((a-b).dot(*this-b) < EPS) {\n\t\t\treturn (*this-b).norm();\n\t\t}\n\t\treturn abs((b-a).cross(*this-a)) / (b-a).norm();\n\t}\n\n\tbool hitPolygon(const Point& a,const Point& b,const Point& c) {\n\t\tdouble t = (b-a).cross(*this-b);\n\t\tdouble t2 = (c-b).cross(*this-c);\n\t\tdouble t3 = (a-c).cross(*this-a);\t\n\n\t\tif((t > 0 && t2 > 0 && t3 > 0) || ( t < 0 && t2 < 0 && t3 < 0)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n};\n\nstruct Seg {\n\tPoint a,b;\n\n\tSeg () : a(Point(0, 0)), b(Point(0, 0)) {}\n\n\tSeg (Point a, Point b) : a(a),b(b) {}\n\n\tbool isOrthogonal(Seg &s) { return equals((b - a).dot(s.b - s.a),0.0); }\n\n\tbool isParallel(Seg &s) { return equals((b-a).cross(s.b - s.a),0.0); }\n\n\tbool isIntersect(Seg &s) {\n\t\tif(s.a.between(a,b) || s.b.between(a,b) || a.between(s.a,s.b) || b.between(s.a,s.b)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn ((a-b).cross(s.a-a) * (a-b).cross(s.b-a) < EPS) && ((s.b-s.a).cross(a-s.a)*(s.b-s.a).cross(b-s.a) < EPS);\n\t}\n\n\tbool distance(Seg &s) {\n\t\tif((*this).isIntersect(s)) return 0.0;\n\n\t\treturn min(min(a.distance_seg(s.a,s.b),b.distance_seg(s.a,s.b)),min(s.a.distance_seg(a,b),s.b.distance_seg(a,b)));\n\t}\n\n\tPoint getCrossPoint(Seg &s) {\n\t\tPoint p = s.b - s.a;\n\t\tdouble d = abs(p.cross(a-s.a));\n\t\tdouble d2 = abs(p.cross(b-s.a));\n\n\t\tdouble t = d / (d+d2);\n\t\treturn a + (b-a)*t;\n\t}\n\n\tPoint project(Point &p) {\n\t\tPoint base = b - a;\n\t\tdouble t = base.dot(p-a) / base.dot(base);\n\t\treturn a + base * t;\n\t}\n\n\tPoint reflect(Point &p) {\n\t\treturn p + (project(p) - p) * 2.0;\n\t}\n};\n\nint main() {\n\tSeg seg;\n\tcin >> seg.a.x >> seg.a.y >> seg.b.x >> seg.b.y;\n\n\tint q;\n\tcin >> q;\n\n\tcout << fixed;\n\tcout.precision(20);\n\n\trep(i, q) {\n\t\tPoint p;\n\t\tcin >> p.x >> p.y;\n\t\tPoint t = seg.project(p);\n\t\tcout << t.x << \" \" << t.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef ___Class_Point\n#define ___Class_Point\n\n#include <cmath>\n\nclass Point\n{\nprivate:\n\n\tdouble x_;\n\tdouble y_;\n\npublic:\n\n\tPoint() : x_(0), y_(0) { }\n\n\tPoint(double x, double y) : x_(x), y_(y) { }\n\n\tPoint(double x1, double y1, double x2, double y2) : x_(x2 - x1), y_(y2 - y1) { }\n\n\tdouble x() { return x_; }\n\tdouble y() { return y_; }\n\n\tvoid operator= (Point& p) { x_ = p.x_; y_ = p.y_; }\n\t\n\tPoint& operator+ (Point& p) { return Point(x_ + p.x_, y_ + p.y_); }\n\tPoint& operator- (Point& p) { return Point(x_ - p.x_, y_ + p.y_); }\n\tPoint& operator* (double s) { return Point(x_ * s, y_ * s); }\n\tPoint& operator/ (double s) { return Point(x_ / s, y_ / s); }\n};\n\ndouble norm(Point& p1)\n{\n\treturn p1.x() * p1.x() + p1.y() * p1.y();\n}\n\ndouble abs(Point& p1)\n{\n\treturn sqrt(norm(p1));\n}\n\ndouble cross(Point& p1, Point& p2)\n{\n\treturn p1.x() * p2.y() - p1.y() * p2.x();\n}\n\ndouble dot(Point& p1, Point& p2)\n{\n\treturn p1.x() * p2.x() + p1.y() * p2.y();\n}\n\n#endif\n\n#ifndef ___Computational_Geometry\n#define ___Computational_Geometry\n\nbool palarell(Point& p1, Point& p2)\n{\n\treturn cross(p1, p2) == 0;\n}\n\nbool palarell(Point& p1_s, Point& p1_e, Point& p2_s, Point& p2_e)\n{\n\treturn palarell(p1_e - p1_s, p2_e - p2_s);\n}\n\nbool orthogonal(Point& p1, Point& p2)\n{\n\treturn dot(p1, p2) == 0;\n}\n\nbool orthogonal(Point& p1_s, Point& p1_e, Point& p2_s, Point& p2_e)\n{\n\treturn orthogonal(p1_e - p1_s, p2_e - p2_s);\n}\n\nPoint projection(Point& hypo, Point& base)\n{\n\treturn base * (dot(hypo, base) / norm(base));\n}\n\nPoint reflection(Point& hypo, Point& base)\n{\n\treturn base + (projection(hypo, base) - hypo) * 2.0;\n}\n\n#endif\n\n#include <cstdio>\n\n#pragma warning(disable: 4996)\n\nint main()\n{\n\tint x1, y1, x2, y2, x3, y3, q;\n\n\tscanf(\"%d\", &x1);\n\tscanf(\"%d\", &y1);\n\tscanf(\"%d\", &x2);\n\tscanf(\"%d\", &y2);\n\n\tPoint p(x1, y1, x2, y2);\n\n\tscanf(\"%d\", &q);\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tscanf(\"%d\", &x3);\n\t\tscanf(\"%d\", &y3);\n\n\t\tPoint a(x1, y1, x3, y3);\n\n\t\tPoint c = projection(a, p);\n\n\t\tprintf(\"%.15f %.15f\\n\", x1 + c.x(), y1 + c.y());\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nconstexpr double EPS = 1e-14;\n\nstruct vec2 {\n    double x, y;\n    vec2 operator+(const vec2 rhs) {\n        return {x + rhs.x, y + rhs.y};\n    }\n    vec2 operator-(const vec2 rhs) {\n        return {x - rhs.x, y - rhs.y};\n    }\n    vec2 operator*(const double k) {\n        return {x * k, y * k};\n    }\n    vec2 operator/(const double k) {\n        return {x / k, y / k};\n    }\n};\n\ndouble dot(vec2 a, vec2 b) {\n    return a.x * b.x + a.y * b.y;\n};\n\ndouble norm2(vec2 a) {\n    return dot(a, a);\n}\n\nstruct line {\n    vec2 p, l;\n};\n\nline make_line(vec2 a, vec2 b) {\n    return {a, b - a};\n}\n\nbool is_parallel(line a, line b) {\n    return abs(a.l.x * b.l.y - a.l.y * b.l.x) < EPS;\n}\n\nvoid printvec2(vec2 p, int precision) {\n    cout << setprecision(precision) << fixed << p.x << \" \" << p.y << endl;\n}\n\nvec2 intersection(line l1, line l2) {\n    assert(!is_parallel(l1, l2));\n    double a = l1.p.x, b = l1.p.y, c = l1.l.x, d = l1.l.y;\n    double e = l2.p.x, f = l2.p.y, g = l2.l.x, h = l2.l.y;\n    double k = (h * (a - e) - g * (b - f)) / (g * d - c * h);\n    return {\n        a + k * c,\n        b + k * d\n    };\n}\n\nvec2 get_normal(vec2 p) {\n    return {-p.y, p.x};\n}\n\nvec2 foot(vec2 p, line l) {\n    line normal = {p, get_normal(l.l)};\n    return intersection(normal, l);\n}\n\ndouble dist(vec2 p, line l) {\n    return sqrt(norm2(foot(p, l) - p));\n}\n\nint main() {\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    line l = make_line({x1, y1}, {x2, y2});\n\n    int q;\n    cin >> q;\n    while (q--) {\n        double x, y;\n        cin >> x >> y;\n        printvec2(foot({x, y}, l), 10);\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n#define repr(i, n) for (int i = (n); i >= 0; --i)\n#define FOR(i, m, n) for (int i = (m); i < (n); ++i)\n#define FORR(i, m, n) for (int i = (m); i >= (n); --i)\nusing namespace std;\ntypedef long long ll;\nconst ll mod = 1000000007;\nconst ll mod2 = 998244353;\n\nstruct point {\n  long double x, y;\n};\n\nint main() {\n  point p1, p2, p, x;\n  int q;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y >> q;\n  p2.x -= p1.x;\n  p2.y -= p1.y;\n  rep(i, q) {\n    cin >> p.x >> p.y;\n    p.x -= p1.x;\n    p.y -= p1.y;\n    x.x = (p.x * p2.x + p.y * p2.y) * p2.x / (p2.x * p2.x + p2.y * p2.y) + p1.x;\n    x.y = (p.x * p2.x + p.y * p2.y) * p2.y / (p2.x * p2.x + p2.y * p2.y) + p1.y;\n    cout << setprecision(15) << x.x << \" \" << x.y << endl;\n  }\n\n\n  \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "//#define __USE_MINGW_ANSI_STDIO 0\n#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> VI;\ntypedef vector<VI> VVI;\ntypedef vector<ll> VL;\ntypedef vector<VL> VVL;\ntypedef pair<int, int> PII;\n\n#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)\n#define REP(i, n) FOR(i, 0, n)\n#define ALL(x) x.begin(), x.end()\n#define IN(a, b, x) (a<=x&&x<b)\n#define MP make_pair\n#define PB push_back\n#define MOD 1000000007\n#define INF (1LL<<30)\n#define LLINF (1LL<<60)\n#define PI 3.14159265359\n#define EPS 1e-12\n//#define int ll\n\nint dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};\n\nstruct point {\n  double x, y;\n};\n\nstruct Vector2D {\n  double x, y;\n};\n\ndouble dot(Vector2D a, Vector2D b) {\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble norm(Vector2D a) {\n  return sqrt(a.x*a.x + a.y*a.y);\n}\n\n//??´???a = p1->p2 ???????????????p????°???±???c??¨????????¨?????? p1->c ??????????????? b = p1 -> p\n//??§?¨??????´?????¨??????p1????¶????\nVector2D project(Vector2D a, Vector2D b) {\n  return Vector2D{dot(a, b)/dot(a, a) * a.x, dot(a, b)/dot(a, a) * a.y};\n}\n\nsigned main(void)\n{\n  double x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  Vector2D v1 = {x2-x1, y2-y1};\n  int q;\n  cin >> q;\n  REP(i, q) {\n    double x, y;\n    cin >> x >> y;\n    Vector2D v2 = {x-x1, y-y1};\n    Vector2D ret = project(v1, v2);\n    //???????????§?????´?????????\n    cout << fixed << setprecision(15) << ret.x + x1 + 0 << \" \" << ret.y + y1 +  0 << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point\n{\npublic:\n  double x, y;\n\n  Point(double x = 0, double y = 0) : x(x), y(y) {}\n\n  Point operator+(Point p) { return Point(x + p.x, y + p.y); }\n  Point operator-(Point p) { return Point(x - p.x, y - p.y); }\n  Point operator*(double a) { return Point(a * x, a * y); }\n  Point operator/(double a) { return Point(x / a, y / a); }\n\n  double abs() { return sqrt(norm()); }\n  double norm() { return x * x + y * y; }\n\n  bool operator<(const Point &p) const\n  {\n    return x != p.x ? x < p.x : y < p.y;\n  }\n\n  bool operator==(const Point &p) const\n  {\n    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n  }\n};\n\ntypedef Point Vector;\n\nstruct Segment\n{\n  Point p1, p2;\n};\n\ndouble dot(Vector a, Vector b)\n{\n  return a.x * b.x + a.y * b.y;\n}\n\ndouble norm(Vector a)\n{\n  return a.x * a.x + a.y * a.y;\n}\n\nPoint project(Segment s, Point p)\n{\n  Vector base = s.p2 - s.p1;\n  double r = dot(p - s.p1, base) / norm(base);\n  return s.p1 + base * r;\n}\n\nint main()\n{\n  int x1, y1, x2, y2;\n  cin >> x1 >> y1 >> x2 >> y2;\n  Point p1 = Point(x1, y1);\n  Point p2 = Point(x2, y2);\n  Segment s;\n  s.p1 = p1;\n  s.p2 = p2;\n  int q;\n  cin >> q;\n\n  for (int i = 0; i < q; i++)\n  {\n    int x, y;\n    cin >> x >> y;\n    Point ans = project(s, Point(x, y));\n    cout << fixed << setprecision(11) << ans.x << \" \" << fixed << setprecision(11) << ans.y << endl;\n  }\n\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#define scf(n) scanf(\"%lf\",&n)\n\nint main()\n{\n    double x1,y1,x2,y2,r,t,g,h,m1,m2,k,x,y,c1,c2;\n    int q;\n    scanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n    scanf(\"%d\",&q);\n    while(q--)\n    {\n        scanf(\"%lf %lf\",&r,&t);\n        if(y1==y2)\n        {\n            x=r;\n            y=y1;\n        }\n        else if(x1==x2)\n        {\n            x=x1;\n            y=t;\n        }\n        else{\n        m1=(y2-y1)/(x2-x1);\n        m2=-1/m1;\n        c1=-m1*x1+y1;\n        c2=-m2*r+t;\n        x=(c1-c2)/(m2-m1);\n        y=(m2*c1-m1*c2)/(m2-m1);\n\n        //c=(y1-m*x1);\n        //k=-(m*t+r);\n\n       // y=(-c-m*k)/(1+m*m);\n        //x=(y+c)/m;\n        //y=(-m1*y2-m1*m2*x2+m2*y1-m2*m1*x1)/(m1-m2);\n       // x=(m2*x2-y2-m1*x1+y1)/(m1-m2);\n        }\n      //  g=2.0*x-r;\n       // h=2.0*y-t;\n        printf(\"%.10lf %.10lf\\n\",x,y);\n    }\n}\n"
  },
  {
    "language": "C++",
    "code": "// CGL_1_A.cpp\n//\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst double EPS = 1e-10;\n\ntypedef complex<double> Point;\n#define X real()\n#define Y imag()\n\nstruct Segment {\n  Point p1, p2;\n  Segment(){};\n  Segment(Point p1, Point p2) : p1(p1), p2(p2) {};\n};\ntypedef Segment Line;\n\n// 内積\ndouble dot(Point a, Point b){return real(conj(a) * b);}\n\n// 射影\nPoint project(Line l, Point p) {\n  double r = dot(p - l.p1, l.p2 - l.p1) / norm(l.p2 -l.p1);\n  return l.p1 + (l.p2 - l.p1) * r;\n}\n\nint main() {\n  int x1,y1,x2,y2,q,xp,yp;\n  cin>>x1>>y1>>x2>>y2>>q;\n  Line l(Point(x1,y1), Point(x2,y2));\n  for(int i=0;i<q;++i){\n    cin>>xp>>yp;\n    Point p(xp,yp);\n    printf(\"%.8f %.8f\\n\", project(l,p).X, project(l,p).Y);\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n\n#include <cmath>\n#include <vector>\nusing namespace std;\n\nconst double EPS = 1e-10;\n\ndouble add(double a, double b){\n    if(abs(a + b) < EPS * (abs(a) + abs(b)))return 0;\n    return a + b;\n}\n\nstruct Pt {\n    double x, y;\n    Pt(){}\n    Pt(double x, double y):x(x), y(y){}\n    Pt operator + (Pt p){return Pt(add(x, p.x), add(y, p.y));}\n    Pt operator - (Pt p){return Pt(add(x, -p.x), add(y, -p.y));}\n    Pt operator * (double d){return Pt(x * d, y * d);}\n    double dot(Pt p){return add(x * p.x, y * p.y);}\n    double det(Pt p){return add(x * p.y, -y * p.x);}\n    double norm(){return x*x+y*y;}\n    double abs(){return sqrt(norm());}\n};\ntypedef Pt Vc;\n\nstruct Ln {\n    Pt p1, p2;\n    Ln(){}\n    Ln(double x1, double y1, double x2, double y2):p1(Pt(x1, y1)), p2(Pt(x2, y2)){}\n    Ln(Pt p1, Pt p2):p1(p1), p2(p2){}\n    Pt project(Pt p){\n        Pt base = p2 - p1;\n        double r = base.dot(p - p1) / base.norm();\n        return p1 + base * r;\n    }\n};\n\nvoid CGL1A(){\n    double x1, y1, x2, y2;\n    scanf(\"%lf %lf %lf %lf\", &x1, &y1, &x2, &y2);\n    Ln line(x1, y1, x2, y2);\n    int n;\n    scanf(\"%d\", &n);\n    for(int i=0;i<n;i++){\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        Pt p = line.project(Pt(x, y));\n        printf(\"%.10f %.10f\\n\", p.x, p.y);\n    }\n}\n\nsigned main(){\n    \n    CGL1A();\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define PI acos(-1.0)\n#define EPS 1e-10\n\ndouble handleNegZero(double x) {return ((abs(x) < EPS)?0.0:x);}\n\nstruct Point {\n    double x, y;\n    Point(){}\n    Point(double _x, double _y):x(_x), y(_y){}\n\n    bool operator < (Point other) const {\n        if(fabs(x - other.x) > EPS)\n            return x < other.x;\n        return y < other.y;\n    }\n\n    bool operator == (Point other) const {\n        return ((fabs(x - other.x) < EPS) && (fabs(y - other.y) < EPS));\n    }\n};\n\nstruct vec {\n    double x, y;\n    vec(){}\n    vec(double _x, double _y):x(_x), y(_y){}\n};\n\nvec toVec(Point a, Point b) {return vec(b.x - a.x, b.y - a.y);}\ndouble dot(vec a, vec b) {return (a.x*b.x + a.y*b.y);}\ndouble norm(vec v) {return sqrt(v.x*v.x + v.y*v.y);}\n\nint main() {\n    double x0, y0, x1, y1, x2, y2;\n    int q;\n    Point a, b, c;\n\n    scanf(\"%lf %lf %lf %lf\", &x0, &y0, &x1, &y1);\n    scanf(\"%d\", &q);\n    a = Point(x0, y0);\n    b = Point(x1, y1);\n\n    for(int i = 0; i < q; i++) {\n        scanf(\"%lf %lf\", &x2, &y2);\n        c = Point(x2, y2);\n        vec v1 = toVec(a, b), v2 = toVec(a, c);\n\n        double costheta = (dot(v1, v2) / (norm(v1) * norm(v2)));\n        double lenv2 = norm(v2);\n        double lenv1 = norm(v1);\n        double proj = lenv2 * costheta;\n        double x = (proj / lenv1) * v1.x;\n        double y = (proj / lenv1) * v1.y;\n        printf(\"%0.9lf %0.9lf\\n\", handleNegZero(x), handleNegZero(y));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "/**\n * Computing Geometry Library\n * @author Sshwy\n */\n#include<bits/stdc++.h>\nusing namespace std;\n#define pb push_back\n#define FOR(i,a,b) for(int i=(a);i<=(b);++i)\n#define ROF(i,a,b) for(int i=(a);i>=(b);--i)\n\nnamespace cg{\n    typedef long double vtyp;\n    const vtyp eps = 1e-9;\n    bool isZero(vtyp x){\n        return -eps < x && x < eps;\n    }\n    struct vec {\n        vtyp x,y;\n        vec(){ x = y = 0; }\n        vec(vtyp _x, vtyp _y){ x = _x, y = _y; }\n        vec operator+(const vec V) const { return vec(x+V.x, y+V.y); }\n        vec operator-() const { return vec(-x, -y); }\n        vec operator-(const vec V) const { return *this + (-V); }\n        vec operator*(const vtyp a) const { return vec(x*a, y*a); }\n        friend vec operator*(const vtyp a, const vec v){ return v*a; }\n        operator bool() const { return !(isZero(x) && isZero(y)); }\n        bool operator==(const vec V) const { return bool(*this-V) == 0; }\n        vtyp length(){ return sqrt(x*x + y*y); }\n        /**\n         * 方向角，单位 rad\n         */\n        vtyp ang() const { return atan2(y,x); }\n        /**\n         * 方向向量\n         * @return 0向量或者一个单位向量\n         */\n        vec dir() const {\n            if(*this){\n                vtyp ang = atan2(y,x);\n                return vec(cos(ang), sin(ang));\n            } else return vec(0,0);\n        }\n        void read(){ scanf(\"%Lf%Lf\",&x,&y); }\n    };\n    istream & operator>>(istream & in, vec & v){ \n        return in >> v.x >> v.y, in; \n    }\n    ostream & operator<<(ostream & out, const vec & v){ \n        return out << v.x << \" \" << v.y, out;\n    }\n    ifstream & operator>>(ifstream & in, vec & v){ \n        return in >> v.x >> v.y, in; \n    }\n    ofstream & operator<<(ofstream & out, const vec & v){ \n        return out << v.x << \" \" << v.y, out;\n    }\n    /**\n     * 点积\n     * a dot b == |a||b|cos theta\n     */\n    vtyp dot(const vec a, const vec b){ return a.x*b.x + a.y*b.y; }\n    /**\n     * 叉积\n     * 两个向量围成的有向面积\n     */\n    vtyp det(const vec a, const vec b){ return a.x*b.y - a.y*b.x; }\n    typedef vec point;\n    struct line {\n        point p1, p2;\n        line(point _p1, point _p2){ p1 = _p1, p2 = _p2; }\n    };\n\n    /**\n     * 投影\n     * @param L 直线\n     * @param p 要求投影的点\n     * @return p 在 L 上的投影坐标（即垂足）\n     */\n    point projection(line L, point p){\n        vec d = L.p2 - L.p1;\n        return L.p1 + (dot(d, p-L.p1)/d.length()) * d.dir();\n    }\n}\n\n\nint main(){\n    cg::point p1,p2,p;\n    int q;\n    cin>>p1>>p2>>q;\n    cg::line l(p1,p2);\n    FOR(i,1,q){\n        cin>>p;\n        cout<<setiosflags(ios::fixed)\n            <<setprecision(10)\n            <<cg::projection(l,p)<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct vec{double x;double y;};\ndouble naiseki(vec a,vec b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\nint main()\n{\n\tdouble xp1,xp2,yp1,yp2;\n\tcin>>xp1>>yp1>>xp2>>yp2;\n\tint q;cin>>q;\n\tvec base;\n\tbase.x=xp2-xp1;\n\tbase.y=yp2-yp1;\n\tcout<</*fixed<<*/setprecision(10);\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tdouble s,t;\n\t\tcin>>s>>t;\n\t\tvec hypo;\n\t\thypo.x=s-xp1;\n\t\thypo.y=t-yp1;\n\t\tcout<<xp1+base.x*naiseki(hypo,base)/naiseki(base,base)<<\" \";\n\t\tcout<<(double)yp1+base.y*naiseki(hypo,base)/naiseki(base,base)<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iomanip>\n#include<limits>\n#include<thread>\n#include<utility>\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<numeric>\n#include<cassert>\n#include<random>\n#include<chrono>\n#include<unordered_set>\n#include<unordered_map>\n#include<fstream>\n#include<list>\n#include<functional>\n#include<bitset>\n#include<complex>\n#include<tuple>\nusing namespace std;\n\ntypedef complex<long double> P;\n\ntemplate<typename D=long double,typename P=complex<long double>>\nstruct Geometry{\n    const D EPS=1e-9;\n    \n    P project(P p1,P p2,P x){\n        p2-=p1;\n        return p1+p2*(x/p2).real();\n    }\n};\n\n\n\nint main(){\n    Geometry<long double,complex<long double>> G;\n    P a[2];\n    for(int i=0;i<2;i++){\n        long double x,y;\n        cin>>x>>y;\n        a[i]={x,y};\n    }\n    int q;\n    cin>>q;\n    for(int i=0;i<q;i++){\n        long double x,y;\n        cin>>x>>y;\n        P K={x,y};\n        P ans=G.project(a[0],a[1],K);\n        cout<<fixed<<setprecision(12)<<ans.real()<<\" \"<<ans.imag()<<endl;\n    }\n    \n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\nimport Numeric \nformatFloatN floatNum numOfDecimals = showFFloat (Just numOfDecimals) floatNum \"\"\n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n---------------------------------------------------\n-- arithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = (formatFloatN x 8) ++ \" \" ++ (formatFloatN y 8)\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in putStrLn . init . unlines $ map proj plist\n"
  },
  {
    "language": "C++",
    "code": "#include<iomanip>\n#include<limits>\n#include<thread>\n#include<utility>\n#include<iostream>\n#include<string>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<numeric>\n#include<cassert>\n#include<random>\n#include<chrono>\n#include<unordered_set>\n#include<unordered_map>\n#include<fstream>\n#include<list>\n#include<functional>\n#include<bitset>\n#include<complex>\n#include<tuple>\nusing namespace std;\n\ntypedef complex<long double> P;\n\ntemplate<typename D=long double,typename P=complex<long double>>\nstruct Geometry{\n    const D EPS=1e-9;\n    \n    P project(P vec,P x){return vec*(x/vec).real();}\n    \n    P project(P p1,P p2,P x){return p1+project(p2-p1,x-p1);}\n};\n\n\n\nint main(){\n    Geometry<long double,complex<long double>> G;\n    P a[2];\n    for(int i=0;i<2;i++){\n        long double x,y;\n        cin>>x>>y;\n        a[i]={x,y};\n    }\n    int q;\n    cin>>q;\n    cout<<a[1]<<endl;\n    for(int i=0;i<q;i++){\n        long double x,y;\n        cin>>x>>y;\n        P K={x,y};\n        P ans=G.project(a[0],a[1],K);\n        cout<<fixed<<setprecision(12)<<ans.real()<<\" \"<<ans.imag()<<endl;\n    }\n    \n    \n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//{{{\n#include <bits/stdc++.h>\nusing namespace std;\n//types\ntypedef long long ll;\ntypedef pair<int,int> pii;\n//input\nbool SR(int &_x){return scanf(\"%d\",&_x)==1;}bool SR(ll &_x){return scanf(\"%lld\",&_x)==1;}\nbool SR(double &_x){return scanf(\"%lf\",&_x)==1;}bool SR(char *_s){return scanf(\"%s\",_s)==1;}\nbool RI(){return true;}\ntemplate<typename I,typename... T>bool RI(I &_x,T&... _tail){return SR(_x) && RI(_tail...);}\n//output\nvoid SP(const int _x){printf(\"%d\",_x);}void SP(const ll _x){printf(\"%lld\",_x);}\nvoid SP(const double _x){printf(\"%.16lf\",_x);}void SP(const char *s){printf(\"%s\",s);}\nvoid PL(){puts(\"\");}\ntemplate<typename I,typename... T>void PL(const I _x,const T... _tail)\n{SP(_x);if(sizeof...(_tail)) putchar(' ');PL(_tail...);}\n//macro\n#define SZ(x) ((int)(x).size())\n#define ALL(x) (x).begin(),(x).end()\n#define REP(i,n) for(int i=0;i<int(n);i++)\n#define REP1(i,a,b) for(int i=(a);i<=int(b);i++)\n#define PER1(i,a,b) for(int i=(a);i>=int(b);i--)\n#define pb push_back\n#define mkp make_pair\n#define F first\n#define S second\n//debug\n#ifdef darry140\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const pair<A,B> &_p){return _s<<\"(\"<<_p.F<<\",\"<<_p.S<<\")\";}\ntemplate<typename It>\nostream& _OUTC(ostream &_s,It _b,It _e)//container\n{\n    _s<<\"{\";\n    for(auto _it=_b;_it!=_e;_it++) _s<<(_it==_b?\"\":\" \")<<*_it;\n    _s<<\"}\";\n    return _s;\n}\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const map<A,B> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const set<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const vector<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename I>\nvoid _DOING(const char *_s,I&& _x){cerr<<_s<<\"=\"<<_x<<endl;}//without ','\ntemplate<typename I,typename... T>\nvoid _DOING(const char *_s,I&& _x,T&&... _tail)//with ','\n{\n    int _c=0;\n    static const char _bra[]=\"({[\";\n    static const char _ket[]=\")}]\";\n    while(*_s!=',' || _c!=0)//eg. mkp(a,b)\n    {\n        if(strchr(_bra,*_s)) _c++;\n        if(strchr(_ket,*_s)) _c--;\n        cerr<<*_s++;\n    }\n    cerr<<\"=\"<<_x<<\", \";\n    _DOING(_s+1,_tail...);\n}\n#define debug(...) do{\\\n    fprintf(stderr,\"%s:%d - \",__PRETTY_FUNCTION__,__LINE__);\\\n    _DOING(#__VA_ARGS__,__VA_ARGS__);\\\n}while(0)\n#else\n#define debug(...)\n#endif\n//}}}\ntypedef long double ld;\nconst ld global_eps=1e-9;\n#if 0\nenum cases{insi,bord,outs};//inside, border, outside\nenum cases{para,coin,inte};//parallel, coincide, intersect\n#else\nenum Case\n{\n    insi,bord,outs,//inside, border, outside\n    para,coin,inte, //parallel, coincide, intersect\n    tang,tang_in,tang_out //tangent\n};\n#endif\nint sign(ld x,ld eps=global_eps){return (x>=eps)-(x<=-eps);}\nint cmp(ld a,ld b,ld eps=global_eps){return sign(a-b,eps);}\nstruct Point\n{\n    ld x,y;\n    Point():x(0),y(0){}\n    Point(ld _x,ld _y):x(_x),y(_y){}\n    Point operator +(const Point &p) const\n    {return Point(x+p.x,y+p.y);}\n    Point operator -(const Point &p) const\n    {return Point(x-p.x,y-p.y);}\n    ld operator *(const Point &p) const\n    {return x*p.x+y*p.y;}\n    ld operator %(const Point &p) const\n    {return x*p.y-y*p.x;}   \n    bool operator <(const Point &p) const\n    {return tie(y,x) < tie(p.y,p.x);}\n    bool operator ==(const Point &p) const\n    {return tie(y,x) == tie(p.y,p.x);}\n    Point operator /(const ld &l) const\n    {return Point(x/l,y/l);}\n    Point operator *(const ld &l) const\n    {return Point(x*l,y*l);}\n    ld len() const{return hypot(x,y);}\n    ld len2() const{return x*x+y*y;}\n    ld dis(const Point &a)const{return (*this-a).len();}\n    ld dis2(const Point &a)const{return (*this-a).len2();}\n    Point unit()const{return *this/len();}\n    Point resize(const ld &l)const{return unit()*l;}\n};\nstruct Line\n{\n    Point p1,p2;\n    Line(){}\n    Line(Point a,Point b):p1(a),p2(b){}\n    Point way() const{return p2-p1;}\n    Point norm() const{return {p1.y-p2.y,p2.x-p1.x};}\n    bool online(const Point &p) const{return sign((p-p1)%way())==0;}\n    bool onsegment(const Point &p)const\n    {\n        return online(p) && sign((p-p1)*(p2-p))>=0;\n    }\n    pair<int,Point> intersect(const Line &I) const\n    {\n        if(sign(I.way()%way())==0) return {online(I.p1)?coin:para,{0,0}};\n        const Point &p3=I.p1,&p4=I.p2;\n        auto _143=(p1-p4)%(p4-p3),_342=(p3-p4)%(p4-p2);\n        return {inte,(p1*_342+p2*_143)/(_143+_342)};\n    }\n    ld linedistance(const Point &p) const\n    {\n        return abs((p-p1)%way())/way().len();\n    }\n    Point project(const Point &p) const\n    {\n        return intersect(Line(p,p+norm())).second;\n    }\n    ld segmentdistance(const Point &p) const\n    {\n        const auto &pro=project(p);\n        if(onsegment(pro)) return p.dis(pro);\n        return min(p.dis(p1),p.dis(p2));\n    }\n};\nstruct Circle\n{\n    Point o;ld r;\n    Circle(){}\n    Circle(Point a,ld b):o(a),r(b){assert(r>=0);}\n    int intersect(const Point &p) const\n    {\n        auto dis2=p.dis2(o);//hypot(p.x-o.x,p.y-o.y);\n        int res=cmp(dis2,r*r);//XXX eps may vary, ~ 2 * range_of(r) * eps\n        if(res==0) return bord;\n        else if(res<0) return insi;\n        else return outs;\n    }\n    tuple<int,Point,Point> intersect(const Line &I) const\n    {\n        static_assert(is_floating_point<decltype(Point().x)>::value,\"Point<ld>!\");//is double-like\n\n        auto dis=I.linedistance(o);\n        int res=cmp(dis,r);\n        if(res==0)\n        {\n            const auto &pro=I.project(o);\n            return {bord,pro,pro};\n        }\n        else if(res==1) return {outs,{0,0},{0,0}};\n        else\n        {\n            const auto &pro=I.project(o);\n            const auto d=sqrt(r*r-o.dis2(pro));\n            const auto v=I.way().resize(d);\n            return {insi,pro+v,pro-v};\n        }\n    }\n    tuple<int,Point,Point> intersect(const Circle &c) const\n    {\n        {\n            int res=cmp(o.dis(c.o),abs(r-c.r));\n            if(res<0) return {insi,{0,0},{0,0}};\n            else if(res==0)\n            {\n                const auto &p=get<1>(intersect(Line(o,c.o)));\n                return {tang_in,p,p};\n            }\n        }\n        {\n            int res=cmp(o.dis(c.o),r+c.r);\n            if(res>0) return {outs,{0,0},{0,0}};\n            else if(res==0)\n            {\n                const auto &p=get<1>(intersect(Line(o,c.o)));\n                return {tang_out,p,p};\n            }\n        }\n        {\n            Point o1=o,o2=c.o;\n            auto r1=r,r2=c.r,d=o1.dis(o2);\n            Point mid=(o1*(r2*r2-r1*r1+d*d)+o2*(r1*r1-r2*r2+d*d))/(2*d*d);\n            Line I(mid,mid+Point(o1.y-o2.y,o2.x-o1.x));\n            auto res=intersect(I);\n            return {inte,get<1>(res),get<2>(res)};\n        }\n    }\n};\nint main()\n{\n    int a,b,c,d;\n    RI(a,b,c,d);\n    Line I({a,b},{c,d});\n    int q;RI(q);\n    while(q--)\n    {\n        int x,y;RI(x,y);\n        auto ans=I.project({x,y});\n        ans=ans+Point(global_eps,global_eps);\n        PL((double)ans.x,(double)ans.y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <stdio.h>\n#include <math.h>\n\nusing namespace std;\n\nclass Point {\npublic:\n    double _x, _y;\n    Point(double x, double y): _x(x), _y(y){}\n    Point(const Point& a): _x(a._x), _y(a._y){}\n\n    Point operator+(const Point& a) const{\n        return Point(_x + a._x, _y + a._y);\n    }\n    Point operator-(const Point& a) const{\n        return Point(_x - a._x, _y - a._y);\n    }\n    Point operator*(double& a) const{\n        return Point(_x*a, _y*a);\n    }\n    Point operator/(double& a) const{\n        return Point(_x/a, _y/a);\n    }\n    void operator=(const Point& a){\n        _x = a._x;\n        _y = a._y;\n    }\n    double dot(const Point& a) const{\n        return (_x*a._x + _y*a._y);\n    }\n};\n\nPoint operator*(double a, const Point& vec){\n    return vec*a;\n}\nPoint operator/(double a, const Point& vec){\n    return vec/a;\n}\n\ntypedef Point Vec;\n\nint main(){\n    double x1,y1,x2,y2;\n    scanf(\"%lf %lf %lf %lf\", &x1, &y1, &x2, &y2);\n    Vec A(x1,y1), B(x2,y2);\n    double norm = sqrt(pow(x2-x1,2) + pow(y2-y1,2));\n    Vec ABunit( (B-A)/norm );\n\n    int q;\n    scanf(\"%d\",&q);\n    for(int i=0; i<q; ++i){\n        double x,y;\n        scanf(\"%lf %lf\",&x,&y);\n        Vec AC(Vec(x,y)-A);\n        double temp = AC.dot(ABunit);\n        Vec AP(temp*ABunit), answer(AP + A);\n\n        cout << std::fixed << std::setprecision(10) << answer._x << \" \" << answer._y << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef double Double;\n\nconst Double EPS = 1e-8;\nconst Double PI = acos(Double(-1.0));\n\nint sign(Double a){\n\tif (abs(a) < EPS) return 0;\n\tif (a < 0.0) return -1;\n\treturn 1;\n}\n\nbool eq(Double a, Double b){\n\treturn sign(a - b) == 0;\n}\n\nbool neq(Double a, Double b){\n\treturn sign(a - b) != 0;\n}\n\nbool lt(Double a, Double b){\n\treturn sign(a - b) == -1;\n}\n\nbool leq(Double a, Double b){\n\treturn sign(a - b) <= 0;\n}\n\nbool gt(Double a, Double b){\n\treturn sign(a - b) == 1;\n}\n\nbool geq(Double a, Double b){\n\treturn sign(a - b) >= 0;\n}\n\nDouble sq(Double a){\n\treturn a * a;\n}\n\nstruct Point {\n\tDouble x, y;\n\t\n\tPoint(){}\n\tPoint(Double x, Double y) : x(x), y(y){}\n\t\n\tbool operator < (const Point &rhs) const { \n\t\treturn x != rhs.x ? x < rhs.x : y < rhs.y;\n\t}\n\t\n\tPoint operator + (const Point &rhs) const {\n\t\treturn Point(x + rhs.x, y + rhs.y);\n\t}\n\t\n\tPoint operator - (const Point &rhs) const {\n\t\treturn Point(x - rhs.x, y - rhs.y);\n\t}\n\t\n\tPoint operator * (const Point &rhs) const {\n\t\treturn Point(x * rhs.x - y * rhs.y, x * rhs.y + y * rhs.x);\n\t}\n\t\n\tPoint operator * (Double rhs) const {\n\t\treturn Point(x * rhs, y * rhs);\n\t}\n\t\n\tPoint operator / (Double rhs) const {\n\t\treturn Point(x / rhs, y / rhs);\n\t}\n\t\n\tPoint& operator += (const Point &rhs) {\n\t\treturn *this = *this + rhs;\n\t}\n\t\n\tPoint& operator -= (const Point &rhs) {\n\t\treturn *this = *this - rhs;\n\t}\n};\n\nPoint operator * (Double lhs, const Point &rhs){\n\treturn rhs * lhs;\n}\n\nPoint operator / (Double lhs, const Point &rhs){\n\treturn rhs * lhs;\n}\n\nstruct Segment : array<Point, 2> {\n\tSegment(){}\n\tSegment(const Point &p1, const Point &p2){\n\t\t(*this)[0] = p1;\n\t\t(*this)[1] = p2;\n\t}\n};\n\nstruct Line : array<Point, 2> {\n\tLine(){}\n\tLine(const Point &p1, const Point &p2){\n\t\t(*this)[0] = p1;\n\t\t(*this)[1] = p2;\n\t}\n};\n\nstruct Circle {\n\tPoint p;\n\tDouble r;\n\t\n\tCircle(){}\n\tCircle(const Point &p, Double r) : p(p), r(r){}\n};\n\ntypedef vector<Point> Polygon;\n\nDouble norm(const Point &p){\n\treturn sq(p.x) + sq(p.y);\n}\n\nDouble abs(const Point &p){\n\treturn sqrt(norm(p));\n}\n\nDouble arg(const Point &p){\n\treturn atan2(p.y, p.x);\n}\n\nPoint polar(Double r, Double t){\n\treturn Point(cos(t) * r, sin(t) * r);\n}\n\nDouble dot(const Point &a, const Point &b){\n\treturn a.x * b.x + a.y * b.y;\n}\n\nDouble cross(const Point &a, const Point &b){\n\treturn a.x * b.y - a.y * b.x;\n}\n\nint ccw(const Point &p0, const Point &p1, const Point &p2){\n\tPoint a = p1 - p0, b = p2 - p0;\n\tif (sign(cross(a, b)) == 1) return 1;\n\tif (sign(cross(a, b)) == -1) return -1;\n\tif (sign(dot(a, b)) == -1) return 2;\n\tif (lt(norm(a), norm(b))) return -2;\n\treturn 0;\n}\n\ntemplate <typename L1, typename L2>\nbool orthogonal(const L1 &l1, const L2 &l2){\n\treturn sign(dot(l1[1] - l1[0], l2[1] - l2[0])) == 0;\n}\n\ntemplate <typename L1, typename L2>\nbool parallel(const L1 &l1, const L2 &l2){\n\treturn sign(cross(l1[1] - l1[0], l2[1] - l2[0])) == 0;\n}\n\ntemplate <typename L>\nPoint project(const L &l, const Point &p){\n\tPoint t = l[1] - l[0];\n\tDouble r = dot(p - l[0], t) / norm(t);\n\treturn l[0] + t * r;\n}\n\ntemplate <typename L>\nPoint reflect(const L &l, const Point &p){\n\treturn p + (project(l, p) - p) * Double(2.0);\n}\n\nbool intersect(const Line &l1, const Line &l2){\n\tif (!parallel(l1, l2)) return true;\n\treturn sign(cross(l1[1] - l1[0], l2[0] - l1[0])) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s){\n\treturn sign(cross(l[1] - l[0], s[0] - l[0])) * sign(cross(l[1] - l[0], s[1] - l[0])) <= 0;\n}\n\nbool intersect(const Line &l, const Point &p){\n\treturn sign(cross(l[0] - p, l[1] - p)) == 0;\n}\n\nbool intersect(const Segment &s1, const Segment &s2){\n\treturn ccw(s1[0], s1[1], s2[0]) * ccw(s1[0], s1[1], s2[1]) <= 0\n\t\t&& ccw(s2[0], s2[1], s1[0]) * ccw(s2[0], s2[1], s1[1]) <= 0;\n}\n\nbool intersect(const Segment &s, const Point &p){\n\treturn ccw(s[0], s[1], p) == 0;\n}\n\nint main()\n{\n\tcout << fixed << setprecision(20);\n\t\n\tLine l;\n\tPoint p;\n\tint q;\n\t\n\tcin >> l[0].x >> l[0].y >> l[1].x >> l[1].y >> q;\n\twhile (q--){\n\t\tcin >> p.x >> p.y;\n\t\t\n\t\tPoint pr = project(l, p);\n\t\tcout << pr.x << \" \" << pr.y << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <algorithm>\n#include <math.h>\n\nusing namespace std;\n\nint main(){\n\tdouble x1,x2,xp,y1,y2,yp,slope,ansx,ansy;\n\tint q;\n\tbool X_FLG = false,Y_FLG = false;\n\n\tscanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n\tscanf(\"%d\",&q);\n\n\tif(y1 == y2){\n\t\tX_FLG = true;\n\t}else if(x1 == x2){\n\t\tY_FLG = true;\n\t}else{\n\t\tslope = (y2-y1)/(x2-x1);\n\t}\n\n\tfor(int i=0;i<q;i++){\n\t\tscanf(\"%lf %lf\",&xp,&yp);\n\t\tif(X_FLG){\n\t\t\tprintf(\"%.10lf %.10lf\\n\",xp,y1);\n\t\t}else if(Y_FLG){\n\t\t\tprintf(\"%.10lf %.10lf\\n\",x1,yp);\n\t\t}else{\n\t\t\tansx = (yp*(x2-x1)*(y2-y1)+xp*(x2-x1)*(x2-x1)-y1*(y2-y1)*(x2-x1)+x1*(y2-y1)*(y2-y1))/((y2-y1)*(y2-y1)+(x2-x1)*(x2-x1));\n\t\t\tansy = ((x1-x2)*ansx+yp*(y2-y1)+xp*(x2-x1))/(y2-y1);\n\t\t\tprintf(\"%.10lf %.10lf\\n\",ansx,ansy);\n\t\t}\n\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <complex>\n#include <cstdlib>\n#include <cstring>\n#include <numeric>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\n#define mp       make_pair\n#define pb       push_back\n#define all(x)   (x).begin(),(x).end()\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define repi(i,a,b) for(int i = (a); i < (b); i++)\n\nusing namespace std;\n\ntypedef    long long          ll;\ntypedef    unsigned long long ull;\ntypedef    vector<bool>       vb;\ntypedef    vector<int>        vi;\ntypedef    vector<vb>         vvb;\ntypedef    vector<vi>         vvi;\ntypedef    pair<int,int>      pii;\n\nconst int INF=1<<29;\nconst double EPS=1e-9;\n\nconst int dx[]={1,0,-1,0},dy[]={0,-1,0,1};\n\nint main(){\n\tdouble x1,y1,x2,y2,xq,yq;\n\tdouble m,x,y,c;\n\twhile(~scanf(\"%lf,%lf,%lf,%lf,%lf,%lf\",&x1,&y1,&x2,&y2,&xq,&yq)){\n\t\tif(x2==x1){\n\t\t\txq *=-1;\n\t\t\tprintf(\"%.8f %.8f\\n\",xq,yq);\n\t\t}else{\n\t\t\tm = (y2-y1)/(x2-x1);\n\t\t\tc = y2-m*x2;\n\t\t\tx = (2*m*yq-xq*(m*m-1)-2*m*c)/(m*m+1);\n\t\t\ty = (2*m*xq+yq*(m*m-1)+2*c)/(m*m+1);\n\t\t\tprintf(\"%.8f %.8f\\n\", x, y);\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define ll  long long\n//#define int long long\n#define inf 0x3f3f3f3f\n#define fi first\n#define se second\n#define pb push_back\n#define pa pair<int,int>\n#define mkp(a,b) make_pair(a,b)\nconst int N=2e5+10;\nconst int mod=998244353;\nusing namespace std;\n\n \nint32_t main()\n{\n   //ios::sync_with_stdio(0); cin.tie(0);cout.tie(0);\n   int x1,y1,x2,y2; scanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n   double k,b;\n   if(x1!=x2) k=(y1-y2)*1.0/(x1-x2),b=y1-k*x1;\n   int q; scanf(\"%d\",&q);\n   while(q--)\n   {\n   \t  int x,y; scanf(\"%d%d\",&x,&y);\n   \t  if(x1==x2) {printf(\"%d %d\\n\",x1,y); continue; }\n   \t  if(y1==y2) {printf(\"%d %d\\n\",x,y1); continue; }\n   \t  double bb=y+1.0/k*x;\n   \t  double xx=(bb-b)*1.0/(k+1.0/k);\n   \t  double yy=k*xx+b;\n   \t  printf(\"%.10f %.10f\\n\",xx,yy);\n   }\nreturn 0;\n}\n/*\n\n*/\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nstruct Point{double x,y;};//点\nstruct Segment{Point p1,p2;};//線\ndouble dot(Point a,Point b){//内積\n    return a.x*b.x+a.y*b.y;\n}\ndouble cross(Point a,Point b){//外積\n    return a.x*b.y-a.y*b.x;\n}\ndouble norm(Point a){\n    return a.x*a.x+a.y*a.y;\n}\nPoint project(Segment s,Point p){\n    Point base,q;\n    Point ans;\n    base.x=s.p2.x-s.p1.x;\n    base.y=s.p2.y-s.p1.y;\n    q.x=p.x-s.p1.x;\n    q.y=p.y-s.p1.y;\n    double r=dot(q,base)/norm(base);\n    ans.x=s.p1.x+base.x*r;\n    ans.y=s.p1.y+base.y*r;\n    return ans;\n}\n/*Point reflect(Segment s,Point p){\n    return p+(project(s,p)-p)*2.0;\n}*/\n\nint main(void){\n    int n;\n    Segment a;\n    Point p,ans;\n    cin>>a.p1.x>>a.p1.y>>a.p2.x>>a.p2.y;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        cin>>p.x>>p.y;\n        ans=project(a,p);\n        cout<<fixed<<setprecision(10)<<ans.x<<\" \"<<ans.y<<endl;\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <utility>\n#include <vector>\n#include <complex>\n#include <cmath>\n\nusing namespace std;\n\nstatic const double EPS=1e-12;\nstatic const double INF=1e24;\n\nusing Point=complex<double>;\nusing Plane=vector<Point>;\n\nbool operator<(const Point &a, const Point &b) {\n    return real(a)!=real(b)? real(a)<real(b) : imag(a)<imag(b);\n}\n\ndouble cross_prod(const Point &a, const Point &b) {\n    return imag(conj(a)*b);\n}\n\ndouble dot_prod(const Point &a, const Point &b) {\n    return real(conj(a)*b);\n}\n\nstruct Line: public vector<Point> {\n    Line() {}\n    Line(const Point &a, const Point &b) {\n        push_back(a);\n        push_back(b);\n    }\n};\n\nstruct Circle {\n    Point p;\n    double r;\n    Circle() {}\n    Circle(const Point &p, const double r): p(p), r(r) {}\n};\n\nint main() {\n    double x, y;\n    scanf(\"%lf %lf\", &x, &y);\n    Point p1(x, y);\n\n    scanf(\"%lf %lf\", &x, &y);\n    Point p2(x, y);\n\n    Point e(real(p2)-real(p1), imag(p2)-imag(p1));\n    e /= abs(e);\n\n    size_t q;\n    scanf(\"%zu\", &q);\n    for (size_t i=0; i<q; ++i) {\n        double x, y;\n        scanf(\"%lf %lf\", &x, &y);\n        Point p(x, y);\n\n        double r=dot_prod(p-p1, e);\n        Point z=p1+r*e;\n        printf(\"%.12f %.12f\\n\", real(z), imag(z));\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nstruct vec{\n    double x,y;\n};\n\ndouble inner_product(vec& a, vec& b){\n    return a.x*b.x+a.y*b.y;\n}\n\nint main(void){\n    vec p1,p2,p,p12;\n    int q;\n    cin >> p1.x >> p1.y >> p2.x >> p2.y;\n    p12.x=p2.x-p1.x; p12.y=p2.y-p1.y;\n    cin >> q;\n    cout.precision(10);\n    cout.setf(std::ios::showpoint);\n    for(int i=0;i<q;i++){\n        cin >> p.x >> p.y;\n        p.x-=p1.x; p.y-=p1.y;\n        double k=inner_product(p,p12)/inner_product(p12,p12);\n        cout << fixed << p1.x+k*p12.x << \" \" << p1.y+k*p12.y << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\ntypedef long long ll;\ntypedef long double ld;\nusing namespace std;\n#define y1 ________y1\nld x1,x2,xp,y1,y2,yp,slope,ansx,ansy;\nll Q;\nbool flx,fly;\nsigned main(){\n\tscanf(\"%Lf%Lf%Lf%Lf\",&x1,&y1,&x2,&y2);\n\tif (y1==y2) flx=true;\n\telse if(x1==x2) fly=true;\n\telse slope=(y2-y1)/(x2-x1);\n\tx2-=x1,y2-=y1;\n\tscanf(\"%lld\",&Q);while (Q--){\n\t\tscanf(\"%Lf%Lf\",&xp,&yp);\n\t\tif(flx) printf(\"%.10Lf %.10Lf\\n\",xp,y1);\n\t\telse if(fly) printf(\"%.10Lf %.10Lf\\n\",x1,yp);\n\t\telse{\n\t\t\tansx=(yp*x2*y2+xp*x2*x2-y1*y2*x2+x1*y2*y2)/(y2*y2+x2*x2);\n\t\t\tansy=(-x2*ansx+yp*y2+xp*x2)/y2;\n\t\t\tprintf(\"%.10Lf %.10Lf\\n\",ansx,ansy);\n\t\t}\n\t}\n\tfclose(stdin);fclose(stdout);return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass point {\npublic:\n\tint x, y;\n\tpoint() {}\n\tpoint( int x_, int y_ ) :x(x_), y(y_) {}\n\tpoint operator -( point p ) { return point( x - p.x, y - p.y ); } \n};\n\nint main()\n{\n\tpoint vp[2];\n\tcin >> vp[0].x >> vp[0].y >> vp[1].x >> vp[1].y;\n\tpoint base = vp[1] - vp[0];\n\tdouble norm = base.x * base.x + base.y * base.y;\n\tint q;\n\tcin >> q;\n\tfor( int i = 0; i < q; i++ ) {\n\t\tpoint p;\n\t\tcin >> p.x >> p.y;\n\n\t\tp = p - vp[0];\n\t\tdouble dot = p.x * base.x + p.y * base.y;\n\t\tdouble x = vp[0].x + base.x * dot / norm;\n\t\tdouble y = vp[0].y + base.y * dot / norm;\n\t\tcout << fixed << setprecision(10) << x << \" \" << y << endl;\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "//P4557 闵可夫斯基+二维凸包 \n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define int long long\n#define db double\n#define For(i,j,k) for(int i=(int)(j);i<=(int)(k);i++)\n#define Rep(i,j,k) for(int i=(int)(j);i>=(int)(k);i--)\ninline ll read(){\n\tll x=0;char ch=getchar();bool f=0;\n\tfor(;!isdigit(ch);ch=getchar()) if(ch=='-') f=1;\n\tfor(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';\n\treturn f?-x:x;\n}\nvoid write(ll x){\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>=10) write(x/10);putchar(x%10+'0');\n}\nvoid writeln(ll x){write(x);puts(\"\");}\nvoid writep(ll x){write(x);putchar(' ');}\n\nint const N=1e5+3;\nint top,n,m,cnt,sta[N];\nstruct point{\n\tdb x,y;\n    point operator - (point A) const{return (point){x-A.x,y-A.y};}\n    point operator + (point A) const{return (point){x+A.x,y+A.y};}\n    void print(){printf(\"%.10lf %.10lf\\n\",x,y);}\n}A,B,C,c[N],p1[N],p2[N];\n\npoint operator *(db x,point A){return (point){x*A.x,x*A.y};}\ndb CJ(point A,point B){return A.x*B.y-B.x*A.y;}//叉积 \ndb DJ(point A,point B){return A.x*B.x+A.y*B.y;}//点积 \ndb dis(point A){return sqrt(A.x*A.x+A.y*A.y);}//向量长度 \nbool cmp(point A,point B){return (CJ(A,B)>0 || CJ(A,B)==0 && dis(A)<dis(B));}//按极角排序 \nvoid Convex(point *A,int &n){//求凸包 \n\tfor (int i=1;i<=n;i++)\n\t  if (A[i].y<A[1].y || A[i].y==A[1].y && A[i].x<A[1].x) swap(A[i],A[1]);\n    point base=A[1];top=0;\n\tfor (int i=1;i<=n;i++) A[i]=A[i]-base;\n\tsort(A+2,A+n+1,cmp);\n\tsta[++top]=1;\n\tfor (int i=2;i<=n;sta[++top]=i,i++)\n\t  while (top>1 && CJ(A[i]-A[sta[top-1]],A[sta[top]]-A[sta[top-1]])>=0) top--;\n\tfor (int i=1;i<=top;i++) A[i]=A[sta[i]]+base;\n\tn=top;A[n+1]=A[1];\n}\nvoid Minkowski(point A[],point B[]){//闵可夫斯基（凸包合并） \n\tfor (int i=1;i<=n;i++) p1[i]=A[i+1]-A[i];\n\tfor (int i=1;i<=m;i++) p2[i]=B[i+1]-B[i];\n\tint i=1,j=1;c[cnt=1]=A[1]+B[1];\n\twhile (i<=n && j<=m)\n\t  if (CJ(p1[i],p2[j])>=0) cnt++,c[cnt]=c[cnt-1]+p1[i++];\n\t  else cnt++,c[cnt]=c[cnt-1]+p2[j++];\n\twhile (i<=n) cnt++,c[cnt]=c[cnt-1]+p1[i++];\n\twhile (j<=m) cnt++,c[cnt]=c[cnt-1]+p2[j++];\t\n}\nint check(point p){//判断一个点是否在凸包内 \n\tif (CJ(p,c[2])>0 || CJ(c[cnt],p)>0) return 0;\n\tint pos=lower_bound(c+1,c+cnt+1,p,cmp)-c-1;\n\treturn CJ(c[pos%cnt+1]-c[pos],p-c[pos])>=0; \n}\n\nvoid CGL_1_A(){//点在直线上的投影点\n\tscanf(\"%lf%lf%lf%lf\",&A.x,&A.y,&B.x,&B.y);\n\tdb d=dis(B-A);\n\tfor (int q=read();q;q--){\n\t\tscanf(\"%lf%lf\",&C.x,&C.y);\n\t\t(A+(DJ(C-A,B-A)/d/d*(B-A))).print();\n\t}\n}\n\nsigned main(){\n    CGL_1_A();\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <vector>\n#define EPS (1e-10)\n#define equals(a,b) (fabs((a)-(b)) < EPS)\n\nusing namespace std;\n\n//????????????\nclass Point{\n  public:\n  double x, y;\n\n  Point(double x=0, double y=0): x(x), y(y) {}\n\n  Point operator + (Point p) { return Point(x+p.x, y+p.y); }\n  Point operator - (Point p) { return Point(x-p.x, y-p.y); }\n  Point operator * (double a) { return Point(a*x, a*y); }\n  Point operator / (double a) { return Point(x/a, y/a); }\n\n  double abs() {return sqrt(norm()); }\n  double norm() { return x*x+y*y; }\n\n  bool operator < (const Point &p) const{\n    return x!=p.x ? x<p.x : y<p.y;\n  }\n\n  bool operator == (const Point &p) const{\n    return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;\n  }\n\n};\n\n//(?????¢??????)????????????????????¨????§????????????§??????\ntypedef Point Vector;\n\n//???????????????\ntypedef struct Segment{\n  Point p1, p2;\n}Segment;\n\n//??´??????????§??????????\ntypedef Segment Line;\n\n//????????????\nclass Circle{\npublic:\n  Point c;\n  double r;\n  Circle(Point c = Point(), double r=0.0): c(c), r(r) {}\n};\n\n//????§???¢(???????????¨????????????)\ntypedef vector<Point> Polygon;\n\n\n//?????????????????????\ndouble dot(Vector a, Vector b){\n  return a.x*b.x+a.y*b.y;\n}\n\n//?????????????????????\ndouble cross(Vector a, Vector b){\n  return a.x*b.y-a.y*b.x;\n}\n\n//??´?????????(????????????????????????0????????´???)\nbool isOrthogonal(Vector a, Vector b){\n  return equals(dot(a,b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2){\n  return isOrthogonal(a1- a2, b1-b2);\n}\nbool isOrthogonal(Segment s1, Segment s2){\n  return equals(dot(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n//????????????(??????????????????????????§?????????0????????????)\nbool isParallel(Vector a, Vector b){\n  return equals(cross(a,b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2){\n  return isParallel(a1- a2, b1-b2);\n}\nbool isParallel(Segment s1, Segment s2){\n  return equals(cross(s1.p2-s1.p1, s2.p2-s2.p1), 0.0);\n}\n\n//???????????´??????????°???±\nPoint project(Segment s, Point p){\n  Vector base = s.p2 - s.p1;\n  double r = dot(p-s.p1, base) / base.norm();\n  return s.p1 + base*r;\n}\n\nint main(){\n  Point p1, p2;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n\n  Segment s;\n  s.p1=p1;\n  s.p2=p2;\n\n  int q;\n  scanf(\" %d\", &q);\n  for(int i=0; i<q; ++i){\n    Point p;\n    cin >> p.x >> p.y;\n    Point ans=project(s, p);\n    printf(\"%.10lf %.10lf\\n\", ans.x, ans.y);\n    //cout << ans.x  << \" \" << ans.y << endl;\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<algorithm>\n#include<climits>\n#include<math.h>\nusing namespace std;\n\nstruct Point{\n\tdouble x;\n\tdouble y;\n};\n\nvoid Projection(Point &p1,Point &p2,Point &p){\n\tdouble e=sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));\n\tdouble ex=(p2.x-p1.x)/e;\n\tdouble ey=(p2.y-p1.y)/e;\n\tdouble inner=ex*(p.x-p1.x)+ey*(p.y-p1.y);\n\tdouble x=p1.x+inner*ex;\n\tdouble y=p1.y+inner*ey;\n\tcout << x <<\" \" <<y <<endl;\n}\n\nint main(){\n\tint q;\n\tPoint p1,p2,p;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\t\n\tcin >> q;\n\t\n\tfor (int i=0;i<q;i++){\n\t\tcin >> p.x >> p.y;\n\t\tProjection(p1,p2,p);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y); \n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double a) {\n\t\treturn Point(a * x, a * y);\n\t}\n\tPoint operator / (double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nPoint project(Point p, Point p1, Point p2) {\n\tVector hypo = p - p1, base = p2 - p1;\n\treturn (p1 + base * dot(hypo, base) / base.norm());\n}\n\n\nint main() {\n\tint i, q, x, x1, x2, y, y1, y2;\n\tPoint ans;\n\tcin >> x1 >> y1 >> x2 >> y2 >> q;\n\tPoint p1(x1, y1), p2(x2, y2);\n\tfor (i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tans = project(p, p1, p2);\n\t\tcout << setprecision(10) << ans.x << \" \" << ans.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstruct vec{double x;double y;};\ndouble naiseki(vec a,vec b)\n{\n\treturn a.x*b.x+a.y*b.y;\n}\n\nint main()\n{\n\tdouble xp1,xp2,yp1,yp2;\n\tcin>>xp1>>yp1>>xp2>>yp2;\n\tint q;cin>>q;\n\tvec base;\n\tbase.x=xp2-xp1;\n\tbase.y=yp2-yp1;\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tdouble s,t;\n\t\tcin>>s>>t;\n\t\tvec hypo;\n\t\thypo.x=s-xp1;\n\t\thypo.y=t-yp1;\n\t\tcout<<xp1+base.x*naiseki(hypo,base)/naiseki(base,base)<<\" \";\n\t\tcout<<yp1+base.y*naiseki(hypo,base)/naiseki(base,base)<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//{{{\n#include <bits/stdc++.h>\nusing namespace std;\n//types\ntypedef long long ll;\ntypedef pair<int,int> pii;\n//input\nbool SR(int &_x){return scanf(\"%d\",&_x)==1;}bool SR(ll &_x){return scanf(\"%lld\",&_x)==1;}\nbool SR(double &_x){return scanf(\"%lf\",&_x)==1;}bool SR(char *_s){return scanf(\"%s\",_s)==1;}\nbool RI(){return true;}\ntemplate<typename I,typename... T>bool RI(I &_x,T&... _tail){return SR(_x) && RI(_tail...);}\n//output\nvoid SP(const int _x){printf(\"%d\",_x);}void SP(const ll _x){printf(\"%lld\",_x);}\nvoid SP(const double _x){printf(\"%.16lf\",_x);}void SP(const char *s){printf(\"%s\",s);}\nvoid PL(){puts(\"\");}\ntemplate<typename I,typename... T>void PL(const I _x,const T... _tail)\n{SP(_x);if(sizeof...(_tail)) putchar(' ');PL(_tail...);}\n//macro\n#define SZ(x) ((int)(x).size())\n#define ALL(x) (x).begin(),(x).end()\n#define REP(i,n) for(int i=0;i<int(n);i++)\n#define REP1(i,a,b) for(int i=(a);i<=int(b);i++)\n#define PER1(i,a,b) for(int i=(a);i>=int(b);i--)\n#define pb push_back\n#define mkp make_pair\n#define F first\n#define S second\n//debug\n#ifdef darry140\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const pair<A,B> &_p){return _s<<\"(\"<<_p.F<<\",\"<<_p.S<<\")\";}\ntemplate<typename It>\nostream& _OUTC(ostream &_s,It _b,It _e)//container\n{\n    _s<<\"{\";\n    for(auto _it=_b;_it!=_e;_it++) _s<<(_it==_b?\"\":\" \")<<*_it;\n    _s<<\"}\";\n    return _s;\n}\ntemplate<typename A,typename B>\nostream& operator <<(ostream&_s, const map<A,B> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const set<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename T>\nostream& operator <<(ostream&_s, const vector<T> &_c){return _OUTC(_s,ALL(_c));}\ntemplate<typename I>\nvoid _DOING(const char *_s,I&& _x){cerr<<_s<<\"=\"<<_x<<endl;}//without ','\ntemplate<typename I,typename... T>\nvoid _DOING(const char *_s,I&& _x,T&&... _tail)//with ','\n{\n    int _c=0;\n    static const char _bra[]=\"({[\";\n    static const char _ket[]=\")}]\";\n    while(*_s!=',' || _c!=0)//eg. mkp(a,b)\n    {\n        if(strchr(_bra,*_s)) _c++;\n        if(strchr(_ket,*_s)) _c--;\n        cerr<<*_s++;\n    }\n    cerr<<\"=\"<<_x<<\", \";\n    _DOING(_s+1,_tail...);\n}\n#define debug(...) do{\\\n    fprintf(stderr,\"%s:%d - \",__PRETTY_FUNCTION__,__LINE__);\\\n    _DOING(#__VA_ARGS__,__VA_ARGS__);\\\n}while(0)\n#else\n#define debug(...)\n#endif\n//}}}\ntypedef long double ld;\nconst ld global_eps=1e-9;\n#if 0\nenum cases{insi,bord,outs};//inside, border, outside\nenum cases{para,coin,inte};//parallel, coincide, intersect\n#else\nenum Case\n{\n    insi,bord,outs,//inside, border, outside\n    para,coin,inte, //parallel, coincide, intersect\n    tang,tang_in,tang_out //tangent\n};\n#endif\nint sign(ld x,ld eps=global_eps){return (x>=eps)-(x<=-eps);}\nint cmp(ld a,ld b,ld eps=global_eps){return sign(a-b,eps);}\nstruct Point\n{\n    ld x,y;\n    Point():x(0),y(0){}\n    Point(ld _x,ld _y):x(_x),y(_y){}\n    Point operator +(const Point &p) const\n    {return Point(x+p.x,y+p.y);}\n    Point operator -(const Point &p) const\n    {return Point(x-p.x,y-p.y);}\n    ld operator *(const Point &p) const\n    {return x*p.x+y*p.y;}\n    ld operator %(const Point &p) const\n    {return x*p.y-y*p.x;}   \n    bool operator <(const Point &p) const\n    {return tie(y,x) < tie(p.y,p.x);}\n    bool operator ==(const Point &p) const\n    {return tie(y,x) == tie(p.y,p.x);}\n    Point operator /(const ld &l) const\n    {return Point(x/l,y/l);}\n    Point operator *(const ld &l) const\n    {return Point(x*l,y*l);}\n    ld len() const{return hypot(x,y);}\n    ld len2() const{return x*x+y*y;}\n    ld dis(const Point &a)const{return (*this-a).len();}\n    ld dis2(const Point &a)const{return (*this-a).len2();}\n    Point unit()const{return *this/len();}\n    Point resize(const ld &l)const{return unit()*l;}\n};\nstruct Line\n{\n    Point p1,p2;\n    Line(){}\n    Line(Point a,Point b):p1(a),p2(b){}\n    Point way() const{return p2-p1;}\n    Point norm() const{return {p1.y-p2.y,p2.x-p1.x};}\n    bool online(const Point &p) const{return sign((p-p1)%way())==0;}\n    bool onsegment(const Point &p)const\n    {\n        return online(p) && sign((p-p1)*(p2-p))>=0;\n    }\n    pair<int,Point> intersect(const Line &I) const\n    {\n        if(sign(I.way()%way())==0) return {online(I.p1)?coin:para,{0,0}};\n        const Point &p3=I.p1,&p4=I.p2;\n        auto _143=(p1-p4)%(p4-p3),_342=(p3-p4)%(p4-p2);\n        return {inte,(p1*_342+p2*_143)/(_143+_342)};\n    }\n    ld linedistance(const Point &p) const\n    {\n        return abs((p-p1)%way())/way().len();\n    }\n    Point project(const Point &p) const\n    {\n        return intersect(Line(p,p+norm())).second;\n    }\n    ld segmentdistance(const Point &p) const\n    {\n        const auto &pro=project(p);\n        if(onsegment(pro)) return p.dis(pro);\n        return min(p.dis(p1),p.dis(p2));\n    }\n};\nint main()\n{\n    int a,b,c,d;\n    RI(a,b,c,d);\n    Line I(Point(a,b),Point(c,d));\n    int q;RI(q);\n    while(q--)\n    {\n        int x,y;RI(x,y);\n        auto ans=I.project(Point(x,y));\n        ans=ans+Point(global_eps,global_eps);\n        PL((double)ans.x,(double)ans.y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS )\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n\tPoint operator + (Point p) {\n\t\treturn Point(x + p.x, y + p.y); \n\t}\n\tPoint operator - (Point p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator * (double a) {\n\t\treturn Point(a * x, a * y);\n\t}\n\tPoint operator / (double a) {\n\t\treturn Point(x / a, y / a);\n\t}\n\n\tdouble abs() {\n\t\treturn sqrt(norm());\n\t}\n\tdouble norm() {\n\t\treturn x * x + y * y;\n\t}\n\n\tbool operator < (const Point &p)const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p)const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\nPoint project(Point p, Point p1, Point p2) {\n\tVector hypo = p - p1, base = p2 - p1;\n\treturn (p1 + base * dot(hypo, base) / base.norm());\n}\n\n\nint main() {\n\tint i, q, x, x1, x2, y, y1, y2;\n\tPoint ans;\n\tcin >> x1 >> y1 >> x2 >> y2 >> q;\n\tPoint p1(x1, y1), p2(x2, y2);\n\tfor (i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tPoint p(x, y);\n\t\tans = project(p, p1, p2);\n\t\tcout << setprecision(15) << ans.x << \" \" << ans.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct Point{\n    double x,y;\n\n    Point(){}\n    Point(double x,double y) : x(x),y(y) {}\n\n    Point operator + (const Point &p)const{ return Point(x+p.x,y+p.y); }\n    Point operator - (const Point &p)const{ return Point(x-p.x,y-p.y); }\n    Point operator * (const double &k)const{ return Point(x*k,y*k); }\n};\n\ndouble dot(const Point &a,const Point &b){ return a.x*b.x+a.y*b.y; }\ndouble norm(const Point &p){ return dot(p,p); }\n\nstruct Segment{\n    Point s,t;\n    Segment(){}\n    Segment(Point s,Point t) : s(s),t(t) {}\n};\n\ntypedef Point Vector;\n\nPoint projection(const Segment &s,const Point &p){\n    Vector b = s.t-s.s;\n    double t = dot(p-s.s,b)/norm(b);\n    return s.s+b*t;\n}\n\nint main(){\n    int Q;\n    Point p;\n    Segment s;\n    cin >> s.s.x >> s.s.y >> s.t.x >> s.t.y;\n    cin >> Q;\n    while(Q--){\n        cin >> p.x >> p.y;\n        Point q = projection(s,p);\n        printf(\"%.12f %.12f\\n\",q.x,q.y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define all(x) (x).begin(),(x).end()\nconst int mod=998244353,MAX=105,INF=1<<30;\n\nconst double eps=1e-10;\nconst long double pi=acos((long double)-1.0L);\n#define equals(a,b) (fabs((a)-(b))<eps)\n\nclass Point{\npublic:\n    double x,y;\n    \n    Point(double x=0,double y=0):x(x),y(y){}\n    \n    Point operator + (Point p){return Point(x+p.x,y+p.y);}\n    Point operator - (Point p){return Point(x-p.x,y-p.y);}\n    Point operator * (double a){return Point(a*x,a*y);}\n    Point operator / (double a){return Point(x/a,y/a);}\n    \n    double abs(){return sqrt(norm());}\n    double norm(){return x*x+y*y;}\n    \n    bool operator < (const Point &p)const{\n        return x!=p.x ? x<p.x : y<p.y;\n    }\n    \n    bool operator == (const Point &p)const{\n        return fabs(x-p.x)<eps&&fabs(y-p.y)<eps;\n    }\n};\n\ntypedef Point Vector;\n\ndouble norm(Vector a){\n    return a.x*a.x+a.y*a.y;\n}\n\ndouble abs(Vector a){\n    return sqrt(norm(a));\n}\n\ndouble dot(Vector a,Vector b){\n    return a.x*b.x+a.y*b.y;\n}\n\ndouble cross(Vector a,Vector b){\n    return a.x*b.y-a.y*b.x;\n}\n\nstruct Segment{\n    Point p1,p2;\n};\n\nbool isOrthogonal(Vector a,Vector b){\n    return equals(dot(a,b),0.0);\n}\n\nbool isOrthogonal(Point a1,Point a2,Point b1,Point b2){\n    return isOrthogonal(a1-a2,b1-b2);\n}\n\nbool isOrthogonal(Segment s1,Segment s2){\n    return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nbool isParallel(Vector a,Vector b){\n    return equals(cross(a,b),0.0);\n}\n\nbool isParallel(Point a1,Point a2,Point b1,Point b2){\n    return isParallel(a1-a2,b1-b2);\n}\n\nbool isParallel(Segment s1,Segment s2){\n    return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);\n}\n\nPoint project(Segment s,Point p){\n    Vector base=s.p2-s.p1;\n    double r=dot(p-s.p1,base)/norm(base);\n    return s.p1+base*r;\n}\n\nPoint reflect(Segment s,Point p){\n    return p+(project(s,p)-p)*2.0;\n}\n\nstatic const int counter_clockwise=1;\nstatic const int clockwise=-1;\nstatic const int online_back=2;\nstatic const int online_front=-2;\nstatic const int on_segment=0;\n\nint ccw(Point p0,Point p1,Point p2){\n    Vector a=p1-p0;\n    Vector b=p2-p0;\n    \n    if(cross(a,b)>eps) return counter_clockwise;\n    if(cross(a,b)<-eps) return clockwise;\n    if(dot(a,b)<-eps) return online_back;\n    if(a.norm()<b.norm()) return online_front;\n    \n    return on_segment;\n}\n\nbool intersect(Point p1,Point p2,Point p3,Point p4){\n    return(ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);\n}\n\nbool intersect(Segment s1,Segment s2){\n    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);\n}\n\ntypedef Segment Line;\n\ndouble getDistance(Point a,Point b){\n    return abs(a-b);\n}\n\ndouble getDistanceLP(Line l,Point p){\n    return abs(cross(l.p2-l.p1,p-l.p1)/abs(l.p2-l.p1));\n}\n\ndouble getDistanceSP(Segment s,Point p){\n    if(dot(s.p2-s.p1,p-s.p1)<0.0) return abs(p-s.p1);\n    if(dot(s.p1-s.p2,p-s.p2)<0.0) return abs(p-s.p2);\n    return getDistanceLP(s,p);\n}\n\ndouble getDistance(Segment s1,Segment s2){\n    if(intersect(s1,s2)) return 0.0;\n    return min({getDistanceSP(s1,s2.p1),getDistanceSP(s1,s2.p2),getDistanceSP(s2,s1.p1),getDistanceSP(s2,s1.p2)});\n}\n\nPoint getCrossPoint(Segment s1,Segment s2){\n    Vector base=s2.p2-s2.p1;\n    double d1=abs(cross(base,s1.p1-s2.p1));\n    double d2=abs(cross(base,s1.p2-s2.p1));\n    double t=d1/(d1+d2);\n    return s1.p1+(s1.p2-s1.p1)*t;\n}\n\nclass Circle{\npublic:\n    Point c;\n    double r;\n    Circle(Point c=Point(),double r=0.0):c(c),r(r){}\n};\n\npair<Point,Point> segCrossPpoints(Circle c,Line l){\n    //assert(intersect(c,l));\n    Vector pr=project(l,c.c);\n    Vector e=(l.p2-l.p1)/abs(l.p2-l.p1);\n    double base=sqrt(c.r*c.r-norm(pr-c.c));\n    return make_pair(pr+e*base,pr-e*base);\n}\n\ndouble arg(Vector p){return atan2(p.y,p.x);}\nVector polar(double a,double r){return Point(cos(r)*a,sin(r)*a);}\n\npair<Point,Point> getCrossPoints(Circle c1,Circle c2){\n    //assert(intersect(c1,c2));\n    double d=abs(c1.c-c2.c);\n    double a=acos((c1.r*c1.r+d*d-c2.r-c2.r)/(2*c1.r*d));\n    double t=arg(c2.c-c1.c);\n    return make_pair(c1.c+polar(c1.r,t+a),c1.c+polar(c1.r,t-a));\n}\n\ntypedef vector<Point> Polygon;\n\n/*\n IN 2\n ON 1\n OUT 0\n */\n\nint contains(Polygon g,Point p){\n    int n=int(g.size());\n    bool x=false;\n    for(int i=0;i<n;i++){\n        Point a=g[i]-p,b=g[(i+1)%n]-p;\n        if(a.y>b.y) swap(a,b);\n        if(a.y<eps&&eps<b.y&&cross(a,b)>eps) x=!x;\n    }\n    return (x?2:0);\n}\n\nPolygon andrewScan(Polygon s){\n    Polygon u,l;\n    if(int(s.size())<3) return s;\n    sort(all(s));\n    int n=int(s.size());\n    \n    u.push_back(s[0]);\n    u.push_back(s[1]);\n    \n    l.push_back(s[n-1]);\n    l.push_back(s[n-2]);\n    \n    for(int i=2;i<n;i++){\n        for(int j=int(u.size());j>=2&&ccw(u[j-2],u[j-1],s[i])!=clockwise;j--){\n            u.pop_back();\n        }\n        u.push_back(s[i]);\n    }\n    \n    for(int i=int(s.size())-3;i>=0;i--){\n        for(int j=int(l.size());j>=2&&ccw(l[j-2],l[j-1],s[i])!=clockwise;j--){\n            l.pop_back();\n        }\n        l.push_back(s[i]);\n    }\n    \n    reverse(all(l));\n    \n    for(int i=int(u.size())-2;i>=1;i--) l.push_back(u[i]);\n    \n    return l;\n}\n\nint main(){\n    \n    std::ifstream in(\"text.txt\");\n    std::cin.rdbuf(in.rdbuf());\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    \n    Segment s;\n    cin>>s.p1.x>>s.p1.y>>s.p2.x>>s.p2.y;\n    int Q;cin>>Q;\n    while(Q--){\n        Point p;\n        cin>>p.x>>p.y;\n        \n        cout<<setprecision(25)<<project(s,p).x<<\" \"<<project(s,p).y<<endl;\n    }\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <deque>\n#include <queue>\n#include <algorithm>\n#include <iomanip>\n#include <set>\n#include <map>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <array>\n#include <functional>\n\nusing namespace std;\n\n#define REP(i,n) for(ll (i) = (0);(i) < (n);++i)\n#define REV(i,n) for(ll (i) = (n) - 1;(i) >= 0;--i)\n#define PB push_back\n#define EB emplace_back\n#define MP make_pair\n#define FI first\n#define SE second\n#define SHOW1d(v,n) {REP(WW,n)cerr << v[WW] << ' ';cerr << endl << endl;}\n#define SHOW2d(v,WW,HH) {REP(W_,WW){REP(H_,HH)cerr << v[W_][H_] << ' ';cerr << endl;}cerr << endl;}\n#define ALL(v) v.begin(),v.end()\n#define Decimal fixed<<setprecision(20)\n#define INF 1000000000\n#define LLINF 1000000000000000000LL\n#define MOD 998244353\n\ntypedef long long ll;\ntypedef pair<ll,ll> P;\n//--------geometry original ------------------\n#define curr(PP, i) PP[i]\n#define next(PP, i) PP[(i+1)%PP.size()]\n#define diff(PP, i) (next(PP, i) - curr(PP, i))\n#define eq(n,m) (abs((n)-(m)) < EPS)\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\n\nconst double EPS = 1e-8;\nconst double EPS_GIG = 1e-3;\nconst double PI = acos(-1.0);\nstruct point {\n\tdouble x, y;\n\tpoint(double x_, double y_):x(x_), y(y_){};\n\tpoint(const point &p):x(p.x), y(p.y){}\n\tpoint():x(0), y(0){}\n\tpoint& operator+=(point a){x += a.x;y += a.y;return *this;}\n\tpoint& operator-=(point a){x -= a.x;y -= a.y;return *this;}\n\tpoint& operator*=(point a){\n\t\tdouble xx = x * a.x - y * a.y;\n\t\tdouble yy = x * a.y + y * a.x;\n\t\tx = xx;y = yy;return *this;\n\t}\n\tpoint& operator*=(double a){x *= a;y *= a;return *this;}\n\tpoint& operator/=(double a){x /= a;y /= a;return *this;}\n\tpoint operator+(point a) const{return point(x, y)+=a;}\n\tpoint operator-(point a) const{return point(x, y)-=a;}\n\tpoint operator*(point a) const{return point(x, y)*=a;}\n\tpoint operator*(double a) const{return point(x, y)*=a;}\n\tpoint operator/(double a) const{return point(x, y)/=a;}\n\tbool operator<(point a) const{return (x == a.x ? x < a.x : y < a.y);}\n\tbool operator==(point a) const{return (abs(x - a.x) < EPS && abs(y - a.y) < EPS);}\n\tbool operator!=(point a) const{return !(*this == a);}\n\tdouble real() {return x;}\n\tdouble imag() {return y;}\n};\n\ntemplate <class T>\npoint operator*(const T a, const point p){return point(p.x * a, p.y * a);}\n\npoint conj(point p) {return point(p.x, -p.y);}\ndouble arg(point p) {return arg(complex<double>(p.x, p.y));}\ndouble abs(point p) {return abs(complex<double>(p.x, p.y));}\ndouble norm(point p) {return norm(complex<double>(p.x, p.y));}\ndouble real(point p) {return p.x;}\ndouble imag(point p) {return p.y;}\n\nnamespace std {\n\tistream& operator>>(std::istream& is, point& p){\n\t\tis >> p.x >> p.y;\n    return is;\n}\n\tostream& operator<<(ostream& os, const point& p){\n\t\tos << p.x << \" \" << p.y;\n\t\treturn os;\n\t}\n}\nstruct circle {\n\tpoint p; double r;\n\tcircle(){}\n\tcircle(const point &p, double r) : p(p), r(r) { }\n};\n\n// 扇型、中心と半径、二つの端点\n// 現在中心角が180未満の前提\nstruct sector {\n\tpoint o;\n\tpoint a, b;\n\tdouble r;\n\tsector(){}\n\tsector(point O, point A, point B, double _r) :o(O), a(A), b(B), r(_r) {}\n};\n\nstruct segment : public array<point, 2> {\n\tsegment(const point &a, const point &b) {\n\t\tat(0) = a;\n\t\tat(1) = b;\n\t}\n};\n\ndouble cross(const point& a, const point& b) {\n\treturn (conj(a)*b).y;\n}\n\ndouble dot(const point& a, const point& b) {\n\treturn (conj(a)*b).x;\n}\n\n//角度足し算\ndouble add_rad(double a,double b){\n\tdouble ret = a + b;\n\tif(ret > 2 * PI)ret -= 2 * PI;\n\treturn ret;\n}\n\n//なす角(vector)\ndouble angle(const point &a,const point &b) {\n\tauto tmp = abs(arg(a) - arg(b));\n\treturn min(tmp, 2 * PI - tmp);\n}\n\ndouble angle(const segment &s1,const segment &s2) {\n\treturn angle(s1[1] - s1[0], s2[1] - s2[0]);\n}\n\n//点の回転\npoint rotate(const point &p, double rad) {\n\tdouble x = p.x * cos(rad) - p.y * sin(rad);\n\tdouble y = p.y * cos(rad) + p.x * sin(rad);\n\treturn point(x, y);\n}\n\n//並行\nbool isParallel(const point &a, const point &b){\n    return abs(cross(a,b)) < EPS;\n}\nbool isParallel(const segment &a, const segment &b){\n    return isParallel(a[1]-a[0], b[1]-b[0]);\n}\n//直行\nbool isOrthogonal(const point &a,const point &b){\n\treturn abs(angle(a,b) - PI / 2) < EPS;\n}\nbool isOrthogonal(const segment &a,const segment &b){\n\treturn isOrthogonal(a[1]-a[0],b[1]-b[0]);\n}\n\n/*\na → b で時計方向に折れて b → c\na → b で半時計方向に折れて b → c\na → b で逆を向いて a を通り越して b → c\na → b でそのまま b → c\na → b で逆を向いて b → c ( または b == c )\n*/\n\nint ccw(point a, point b, point c) {\n\tb -= a; c -= a;\n\tif (cross(b, c) > EPS)   return +1;       // counter clockwise\n\tif (cross(b, c) + EPS < 0)   return -1;       // clockwise\n\tif (dot(b, c) < 0)     return +2;       // c--a--b on line\n\tif (norm(b) < norm(c)) return -2;       // a--b--c on line\n\treturn 0;\n}\n\nbool intersectLL(const segment &l, const segment &m) {\n\treturn abs(cross(l[1] - l[0], m[1] - m[0])) > EPS || // non-parallel\n\t\tabs(cross(l[1] - l[0], m[0] - l[0])) < EPS;   // same line\n}\nbool intersectLS(const segment &l, const segment &s) {\n\treturn cross(l[1] - l[0], s[0] - l[0])*       // s[0] is left of l\n\t\tcross(l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l\n}\nbool intersectLP(const segment &l, const point &p) {\n\treturn abs(cross(l[1] - p, l[0] - p)) < EPS;\n}\nbool intersectSP(const segment &s, const point &p) {\n\tauto a = s[0] - p;\n\tauto b = s[1] - p;\n\treturn (abs(cross(a, b)) < EPS && dot(a, b) <= EPS); // triangle inequality\n}\n//端点の交差も考える\nbool intersectSS(const segment &s, const segment &t) {\n\treturn ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&\n\t\tccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;\n}\n//端点の交差hは考えない\nbool strictIntersectSS(const segment &s, const segment &t) {\n\treturn ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) == -1 &&\n\t\tccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) == -1;\n}\n\npoint projection(const segment &l, const point &p) {\n\tdouble t = dot(p - l[0], l[0] - l[1]) / norm(l[0] - l[1]);\n\treturn l[0] + t*(l[0] - l[1]);\n}\npoint reflection(const segment &l, const point &p) {\n\treturn p + 2. * (projection(l, p) - p);\n}\ndouble distanceLP(const segment &l, const point &p) {\n\treturn abs(p - projection(l, p));\n}\ndouble distanceLL(const segment &l, const segment &m) {\n\treturn intersectLL(l, m) ? 0 : distanceLP(l, m[0]);\n}\ndouble distanceLS(const segment &l, const segment &s) {\n\tif (intersectLS(l, s)) return 0;\n\treturn min(distanceLP(l, s[0]), distanceLP(l, s[1]));\n}\ndouble distanceSP(const segment &s, const point &p) {\n\tconst point r = projection(s, p);\n\tif (intersectSP(s, r)) return abs(r - p);\n\treturn min(abs(s[0] - p), abs(s[1] - p));\n}\ndouble distanceSS(const segment &s, const segment &t) {\n\tif (intersectSS(s, t)) return 0;\n\treturn min(min(distanceSP(s, t[0]), distanceSP(s, t[1])),\n\t\tmin(distanceSP(t, s[0]), distanceSP(t, s[1])));\n}\ndouble distancePP(const point &a,const point &b){\n\treturn abs(a-b);\n}\n\n/*多角形内包判定\nhalf-line crossing method\nOUT:0\nON:1\nIN:2\n*/\nint contains(const vector<point>& Poly, const point& p) {\n\tbool in = false;\n\tfor (int i = 0; i < Poly.size(); ++i) {\n\t\tpoint a = curr(Poly, i) - p, b = next(Poly, i) - p;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)in = !in;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t}\n\treturn in ? 2 : 0;\n}\n\n/*\nOUT:0\nON:1\nIN:2\n*/\nint contain_sector(const sector &sec, point &p){\n\tif(eq(abs(p - sec.o), sec.r))return 1;\n\tif(intersectSP(segment(sec.o, sec.a), p))return 1;\n\tif(intersectSP(segment(sec.o, sec.b), p))return 1;\n\tif(abs(p - sec.o) + EPS > sec.r)return 0;\n\tpoint vec = p - sec.o;\n\tpoint vecA = sec.a - sec.o;\n\tpoint vecB = sec.b - sec.o;\n\tif(angle(vec, vecA) + EPS < angle(vecA, vecB) && angle(vec, vecB) + EPS < angle(vecA, vecB))return 2;\n\treturn 0;\n}\n\n//交点\npoint crosspointSS(const segment &l, const segment &m) {\n\tdouble A = cross(l[1] - l[0], m[1] - m[0]);\n\tdouble B = cross(l[1] - l[0], l[1] - m[0]);\n\tif (abs(A) < EPS && abs(B) < EPS) return m[0]; // same line\n\tif (abs(A) < EPS) return point(INF,INF); // !!!PRECONDITION NOT SATISFIED!!!\n\treturn m[0] + B / A * (m[1] - m[0]);\n}\n\nvector<point> crosspointCL(const circle &c, const segment &l) {\n\tauto ret = vector<point>(2, point(INF, INF));\n\tauto pro_p = projection(l, c.p);\n\tauto dist = distanceLP(l, c.p);\n\tif(abs(dist - c.r) < EPS){\n\t\tret[0] = pro_p;\n\t\treturn ret;\n\t}\n\tif(c.r < dist){\n\t\treturn ret;\n\t}\n\tpoint vec = (l[1] - l[0]) * sqrt(c.r * c.r - dist * dist) / abs(l[1] - l[0]);\n\tret[0] = pro_p + vec;\n\tret[1] = pro_p - vec;\n\treturn ret;\n}\n\nvector<point> crosspointCC(const circle c1, const circle c2) {\n\tauto ret = vector<point>(2, point(INF, INF));\n\tauto dist = abs(c2.p - c1.p);\n\tif(eq(dist, c1.r + c2.r) || eq(dist, abs(c2.r - c1.r))){\n\t\tauto tmp = c2.p - c1.p;\n\t\tret[0] = c1.p + tmp * (c1.r / dist);\n\t\treturn ret;\n\t}\n\tif(c1.r + c2.r < dist || dist < abs(c1.r - c2.r)){\n\t\treturn ret;\n\t}\n\tauto alpha = acos((c1.r * c1.r + dist * dist - c2.r * c2.r) / (2 * c1.r * dist));\n\tauto theta = atan2(c2.p.y - c1.p.y, c2.p.x - c1.p.x);\n\tret[0] = c1.p + point(cos(theta + alpha) * c1.r, sin(theta + alpha) * c1.r);\n\tret[1] = c1.p + point(cos(theta - alpha) * c1.r, sin(theta - alpha) * c1.r);\n\treturn ret;\n}\n\nbool isOnSector(const sector sec, const point p) {\n\tpoint vec = p - sec.o;\n\tpoint vecA = sec.a - sec.o;\n\tpoint vecB = sec.b - sec.o;\n\tif(eq(angle(vec, vecA) + angle(vec, vecB), angle(vecA, vecB)))return true;\n\treturn false;\n}\n\nvector<point> crosspointSecS(const sector sec, const segment s) {\n\tcircle c = circle(sec.o, sec.r);\n\tauto ret = crosspointCL(c, s);\n\tpoint inf = point(INF, INF);\n\tREP(i, 2){\n\t\tif(eq(ret[i], inf))continue;\n\t\tif(!isOnSector(sec, ret[i])){\n\t\t\tret[i] = inf;\n\t\t\tcontinue;\n\t\t}\n\t\tif(!intersectSP(s, ret[i])){\n\t\t\tret[i] = inf;\n\t\t}\n\t}\n\treturn ret;\n}\nvector<point> crosspointSecSec(const sector sec1, const sector sec2) {\n\tcircle c1 = circle(sec1.o, sec1.r);\n\tcircle c2 = circle(sec2.o, sec2.r);\n\tauto ret = crosspointCC(c1, c2);\n\tpoint inf = point(INF, INF);\n\tREP(i, 2){\n\t\tif(!isOnSector(sec1, ret[i])){\n\t\t\tret[i] = inf;\n\t\t\tcontinue;\n\t\t}\n\t\tif(!isOnSector(sec2, ret[i])){\n\t\t\tret[i] = inf;\n\t\t}\n\t}\n\treturn ret;\n}\n\n\n//凸包\nvector<point> convex_hull(vector<point> ps) {\n\tint n = ps.size(), k = 0;\n\tsort(ps.begin(), ps.end());\n\tvector<point> ch(2*n);\n\tfor (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull\n\t\twhile (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;\n\tfor (int i = n-2, t = k+1;i >= 0; ch[k++] = ps[i--]) // upper-hull\n\t\twhile (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;\n\tch.resize(k - 1);\n\treturn ch;\n}\n\n//見えるか(可視グラフ用)\nbool block_off(const point &a, const point &b, const vector<point> &obj) {\n  point m = (a + b) * 0.5;\n  bool on = false, in = false;\n  for (int j = 0; j < obj.size(); ++j) {\n    point c = curr(obj,j), d = next(obj,j);\n    if (d.y < c.y) swap(c, d);\n    if (cross(a-c,b-c) * cross(a-d,b-d) < 0 &&    // strictly intersect.\n        cross(c-a,d-a) * cross(c-b,d-b) < 0) return true;\n    if (cross(a-c,b-c) == 0 && dot(a-c,b-c) < 0) return true;\n    if (c.y <= m.y && m.y < d.y)  // strictly contain.\n      if (cross(c-m,d-m) < 0) in = !in;\n    if (cross(c-m,d-m) == 0 && dot(c-m,d-m) <= EPS) on = true;\n  }\n  return !on && in;\n}\n\n//面積\ndouble area(const vector<point>& p) {\n\tdouble A = 0;\n\tfor (int i = 0; i < p.size(); ++i)\n\t\tA += cross(curr(p, i), next(p, i));\n\treturn A / 2.;\n}\n\n//凸包判定\nbool isConvex(vector<point> poly){\n\tint sz = poly.size();\n\tREP(i,sz){\n\t\tif(ccw(poly[i],poly[(i+1)%sz],poly[(i+2)%sz]) == -1)return false;\n\t}\n\treturn true;\n}\n\ndouble convex_diameter(const vector<point> &pt) {\n  const int n = pt.size();\n  int is = 0, js = 0;\n  for (int i = 1; i < n; ++i) {\n    if (pt[i].y > pt[is].y) is = i;\n    if (pt[i].y < pt[js].y) js = i;\n  }\n  double maxd = norm(pt[is]-pt[js]);\n\n  int i, maxi, j, maxj;\n  i = maxi = is;\n  j = maxj = js;\n  do {\n    if (cross(diff(pt,i), diff(pt,j)) >= 0) j = (j+1) % n;\n    else i = (i+1) % n;\n    if (norm(pt[i]-pt[j]) > maxd) {\n      maxd = norm(pt[i]-pt[j]);\n      maxi = i; maxj = j;\n    }\n  } while (i != is || j != js);\n  return sqrt(maxd); /* farthest pair is (maxi, maxj). */\n}\n\nvector<point> convex_cut(const vector<point> P, const segment& l) {\n  vector<point> Q;\n  for (int i = 0; i < P.size(); ++i) {\n    point A = curr(P, i), B = next(P, i);\n    if (ccw(l[0], l[1], A) != -1) Q.push_back(A);\n    if (ccw(l[0], l[1], A)*ccw(l[0], l[1], B) < 0)\n      Q.push_back(crosspointSS(segment(A, B), l));\n  }\n  return Q;\n}\n\npoint max_circle_size_in_polygon_check(double mid, vector<point> &v){\n\tll n = v.size();\n\tvector<point> now(v);\n\tREP(i, n){\n\t\tauto a = v[i];\n\t\tauto b = v[(i+1)%n];\n\t\tauto vec = b - a;\n\t\tvec /= abs(vec);\n\t\tvec *= mid;\n\t\tvec = vec * point(0, 1);\n\t\tsegment seg = segment(a + vec, b + vec);\n\t\tnow = convex_cut(now, seg);\n\t}\n\treturn (now.empty() ? point(INF, INF): now[0]);\n}\n\n// 凸多角形に入る最大の円\ncircle max_circle_size_in_polygon(vector<point> &v){\n\tdouble l = 0;\n\tdouble r = convex_diameter(v);\n\tpoint ret;\n\tREP(_, 1000){\n\t\tif(abs(l - r) < EPS)break;\n\t\tdouble mid = (l + r) / 2;\n\t\tret = max_circle_size_in_polygon_check(mid, v);\n\t\tif(ret != point(INF, INF))l = mid;\n\t\telse r = mid;\n\t}\n\treturn circle(ret, l);\n}\n\n//　三角形の外接円\ncircle circumscribed_circle(vector<point> p) {\n\tsegment seg_a = segment((p[1] + p[0]) * 0.5,\n\t(p[1] + p[0]) * 0.5 + (p[1] - p[0]) * point(0, 1));\n\tsegment seg_b = segment((p[2] + p[1]) * 0.5,\n\t(p[2] + p[1]) * 0.5 + (p[2] - p[1]) * point(0, 1));\n\tcircle ret;\n\tret.p = crosspointSS(seg_a, seg_b);\n\tret.r = distancePP(p[0], ret.p);\n\treturn ret;\n}\n\n// ################################### 3D ####################################\n\nstruct point3d {\n\tdouble x, y, z;\n\tpoint3d(double x_, double y_, double z_):x(x_), y(y_), z(z_){}\n\n\tpoint3d& operator+=(point3d a){x += a.x;y += a.y;z += a.z;return *this;}\n\tpoint3d& operator-=(point3d a){x -= a.x;y -= a.y;z -= a.z;return *this;}\n\tpoint3d& operator*=(double a){x *= a;y *= a;z *= a;return *this;}\n\tpoint3d& operator/=(double a){x /= a;y /= a;z /= a;return *this;}\n\tpoint3d operator+(point3d a) const{return point3d(x, y, z)+=a;}\n\tpoint3d operator-(point3d a) const{return point3d(x, y, z)-=a;}\n\tpoint3d operator*(double a) const{return point3d(x, y, z)*=a;}\n\tpoint3d operator/(double a) const{return point3d(x, y, z)/=a;}\n\tbool operator<(point3d a) const{\n\t\treturn (x == a.x ? x < a.x : (y == a.y ? y < a.y : z < a.z));}\n\tbool operator==(point3d a) const{\n\t\treturn (abs(x - a.x) < EPS && abs(y - a.y) < EPS && abs(z - a.z) < EPS);\n\t}\n\tbool operator!=(point3d a) const{return !(*this == a);}\n\n};\n\ndouble abs(point3d p) {\n\treturn sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n}\n\ndouble dot(point3d a, point3d b){\n\treturn a.x * b.x + a.y * b.y + a.z * b.z;\n}\n\npoint3d cross(point3d a, point3d b){\n\treturn point3d(a.y * b.z - a.z * b.y,\n\t\t\t\t\t\t\t\t a.z * b.x - a.x * b.z,\n\t\t\t\t\t\t\t   a.x * b.y - a.y * b.x);\n}\n\nstruct plane {\n\tdouble a, b, c, d;\n\tplane(double a_, double b_, double c_, double d_):a(a_), b(b_), c(c_), d(d_){}\n\tplane(point3d p1, point3d p2, point3d p3){\n\t\tpoint3d A = p2 - p1;\n\t\tpoint3d B = p3 - p1;\n\t\tpoint3d p = cross(A, B);\n\t\ta = p.x;b = p.y;c = p.z;\n\t\td = -(a * p1.x + b * p1.y + c * p1.z);\n\t}\n};\n\ndouble distance(point3d p, plane pl){\n\tdouble a = abs(p.x * pl.a + p.y * pl.b + p.z * pl.c + pl.d);\n\tdouble b = sqrt(pl.a * pl.a + pl.b * pl.b + pl.c * pl.c);\n\treturn a / b;\n}\n\ndouble distance(plane p, point3d pl){\n\treturn distance(pl, p);\n}\n\npoint3d projection(point3d p, plane pl){\n\tdouble d = distance(p, pl);\n\tpoint3d a = point3d(pl.a, pl.b, pl.c);a /= abs(a);\n\tpoint3d ret = p + a * d;\n\tif(distance(ret, pl) < EPS)return ret;\n\treturn p - a * d;\n}\n\nnamespace std {\n\tostream& operator<<(ostream& os, const point3d& p){\n\t\tos << \"(\" << p.x << \", \" << p.y << \", \" << p.z << \")\";\n\t\treturn os;\n\t}\n\n\tostream& operator<<(ostream& os, const plane& p){\n\t\tos << p.a << \"x + \" << p.b << \"y + \" << p.c << \"z + \" << p.d;\n\t\treturn os;\n\t}\n}\n\n// ################################### 3D ####################################\n\nint main(){\n\tcin.tie(0);cout.tie(0);ios::sync_with_stdio(false);\n\n\tdouble x1, x2, y1, y2;cin >> x1 >> y1 >> x2 >> y2;\n\tsegment seg = segment(point(x1, y1), point(x2, y2));\n\n\tint q;cin >> q;\n\tREP(i, q){\n\t\tdouble x, y;cin >> x >> y;\n\t\tpoint p(x, y);\n\t\tpoint ans = projection(seg, p);\n\t\tcout << Decimal << ans.real() << \" \" << ans.imag() << \"\\n\";\n\t}\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\n#define debug(x) cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst int mod = 1e9+7;\nconst int MAXN = 2e5 + 7;\nconst double EPS=1e-9;\ninline int sign(double a){return a<-EPS?-1:a>EPS;}\ninline int cmp(double a,double b){return sign(a-b);}\n//点\nstruct P{\n    double x,y;\n    P(){}\n    P(double _x,double _y):x(_x),y(_y){}\n    P operator + (P p){return P(x+p.x,y+p.y);}\n    P operator - (P p){return P(x-p.x,y-p.y);}\n    P operator * (double k){return P(x*k,y*k);}\n    P operator / (double k){return P(x/k,y/k);}\n    double dot(P p){return x*p.x+y*p.y;}\n    double det(P p){return x*p.y-y*p.x;}\n    double distTo(P p){return (*this-p).abs();}\n    double alpha(){return atan2(y,x);}\n    void read(){scanf(\"%lf%lf\", &x, &y);}\n    void write(){printf(\"%.10lf %.10lf\\n\", x, y);}\n    double abs(){return sqrt(abs2());}\n    double abs2(){return x*x+y*y;}\n    P rot90(){return P(-y,x);}\n    P unit(){return *this/abs();}\n    int quad(){return sign(y)==1||(sign(y)==0&&sign(x)>=0);}\n    P rot(double an){return P(x*cos(an)-y*sin(an),x*sin(an)+y*cos(an));}\n    bool operator < (P p)const{int c=cmp(x,p.x);if(c)return c==-1;return cmp(y,p.y)==-1;}\n    bool operator == (P o)const{return cmp(x,o.x)==0&&cmp(y,o.y)==0;}\n};\n\nint main(int argc, char const *argv[])\n{\n    P p1, p2, p, x;\n    p1.read(); p2.read();\n    int q;\n    scanf(\"%d\", &q);\n    while (q--) {\n        p.read();\n        double k1 = (p-p1).dot(p2-p1);\n        double k2 = (p2-p1).abs();\n        k1 /= k2;\n        x = (p2 - p1) * k1/k2;\n        (x+p1).write();\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<algorithm>\n#include<string>\n#include<iomanip>\n#include<cmath>\n#include<vector>\n#include<deque>\n#include<queue>\n#include<map>\n#include<set>\n#define ll long long\n#define str string\n#define ld long double\n#define vec vector\n#define vll vec<ll>\n#define rep(i,a,b) for(ll i=a;i<b;i++)\n#define rrep(i,b,a) for(ll i=b;i>=a;i--)\n#define ALL(a) a.begin(),a.end()\n#define rALL(a) a.rbegin(),a.rend()\n#define kai \"\\n\"\n#define yuque priority_queue\n#define pub push_back\n#define pob pop_back\n#define puf push_front\n#define pof pop_front\n#define mie min_element\n#define mae max_element\n#define tos to_string\n#define sep setprecision\n#define lob lower_bound\n#define upb upper_bound\n#define nep next_permutation\n#define MOD 1000000007ll\n#define MIN (1e-10)\n#define equal(a,b) (abs((a)-(b))<MIN)\n#define v2 ten\n#define chokusen senbun\n#define kakkei vec<ten>\nusing namespace std;\nvoid solve();\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tcout<<fixed;\n\tsolve();\n}\nstruct pea{\n\tll f,s;\n\tbool operator<(const pea &p)const{\n\t\treturn f!=p.f?f<p.f:s<p.s;\n\t};\n};\nstruct tri{\n\tll f,s,t;\n\tbool operator<(const tri &p)const{return f<p.f;};\n};\nclass ten{\npublic:\n\tld x,y;\n\tten operator+(ten p){return{x+p.x,y+p.y};}\n\tten operator-(ten p){return{x-p.x,y-p.y};}\n\tten operator*(ld k){return{k*x,k*y};}\n\tten operator/(ld k){return{x/k,y/k};}\n\tld abs(){return sqrt(abs2());}\n\tld abs2(){return x*x+y*y;};\n\tbool operator<(const ten &p)const{return x!=p.x?x<p.x:y<p.y;};\n\tbool operator==(const ten &p)const{\n\t\treturn (-MIN<x-p.x)&&(x-p.x<MIN)&&(-MIN<y-p.y)&&(y-p.y<MIN);\n\t};\n\tld naiseki(v2 b){return x*b.x+y*b.y;}\n\tld gaiseki(v2 b){return x*b.y-y*b.x;}\n};\nstruct senbun{ten p1,p2;};\nstruct en{ten o;ld r;};\nten shaei(ten p,chokusen l){\n\tv2 a=l.p2-l.p1;\n\treturn l.p1+a*a.naiseki(p-l.p1)/a.abs2();\n}\nvoid solve(){\n\tchokusen l;\n\tcin>>l.p1.x>>l.p1.y>>l.p2.x>>l.p2.y;\n\tll n;cin>>n;\n\tcout<<sep(10);\n\trep(i,0,n){\n\t\tten p;cin>>p.x>>p.y;\n\t\tten k=shaei(p,l);\n\t\tcout<<k.x<<' '<<k.y<<kai;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nclass Point {\n    public:\n    double x, y;\n    \n    Point(double x = 0, double y = 0): x(x), y(y) {}\n\n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double abs() {\n        return sqrt(norm());\n    }\n    double norm() {\n        return x * x + y * y;\n    }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n    }\n};\n\ntypedef Point Vector;\n\ndouble dot(Vector a, Vector b) {\n    return a.x * b.x + a.y * b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nstruct Segment {\n    Point p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\n    public:\n        Point c;\n        double r;\n        Circle(Point c = Point(), double r = 0.0): c(c), r(r) {}\n};\n\ntypedef vector<Point> Polygon;\n\nbool isParallel(Vector a, Vector b) {\n    return equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n    return isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n    return equals(cross((s1.p2 - s1.p1), (s2.p2 - s2.p1)), 0.0);\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n    return equals(cross(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n    return isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n    return equals(dot((s1.p2 - s1.p1), (s2.p2 - s2.p1)), 0.0);\n}\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nint main() {\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Point p1 = {x1, y1};\n    Point p2 = {x2, y2};\n    Segment s = {p1, p2};\n\n    int q;\n    cin >> q;\n    double x, y;\n    for (int i = 0; i < q; i++) {\n        cin >> x >> y;\n        Point p = {x, y};\n\n        Point x = project(s, p);\n\n        cout << fixed << setprecision(11) << x.x << \" \" << x.y << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <math.h>\nconst double EPS = 1e-9;\nusing namespace std;\nclass vector {\npublic:\n\tdouble x, y;\n\tvector(double a, double  b) {\n\t\tx = a;\n\t\ty = b;\n\t};\n\tvector operator * (const vector &v)const {\n\t\treturn vector(x*v.x, y* v.y);\n\t}\n\tvector operator * (double a) {\n\t\treturn vector(x * a, y * a);\n\t}\n\tvector operator - (vector v) {\n\t\treturn vector(x - v.x, y - v.y);\n\t}\n\tvector operator + (vector v) {\n\t\treturn vector(x + v.x, y + v.y);\n\t}\n};\ninline double dot(vector v1, vector v2) {\n\treturn v1.x*v2.x + v1.y*v2.y;\n}\ninline double squ(vector v) {\n\treturn v.x*v.x + v.y*v.y;\n}\ninline double norm(vector v) {\n\treturn sqrt(squ(v));\n}\ninline vector pro(vector base, vector v, vector be) {\n\tdouble a = dot(base, v) / squ(base);\n\tvector v1 = base * a;\n\treturn v1 + be;\n}\ninline void print(vector v) {\n\tprintf(\"%.8f %.8f\", v.x, v.y);\n}\nint main() {\n\tdouble x1, y1, x2, y2, q, x, y;\n\tcin >> x1 >> y1 >> x2 >> y2 >> q;\n\tvector be(x1, y1);\n\tvector base(x2 - x1, y2 - y1);\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> x >> y;\n\t\tvector v(x, y);\n\t\tprint(pro(base, v, be));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cmath>\n#include <iomanip>\n#include <iostream>\n\nusing namespace std;\n\n#define EPS 1.0e-9\n\ndouble dist(int x, int y)\n{\n\treturn sqrt(x * x + y * y);\n}\n\ndouble angle(int x, int y)\n{\n\treturn atan2((double)(x), (double)(y));\n}\n\nint main()\n{\n\tint x0, y0, x1, y1, x2, y2, q;\n\n\tcin >> x0 >> y0 >> x1 >> y1 >> q;\n\n\tfor (int i = 0; i < q; i++)\n\t{\n\t\tcin >> x2 >> y2;\n\n\t\tint ax = x1 - x0;\n\t\tint ay = y1 - y0;\n\t\tint bx = x2 - x0;\n\t\tint by = y2 - y0;\n\n\t\tdouble ad = dist(ax, ay);\n\t\tdouble bd = dist(bx, by);\n\n\t\tdouble at = angle(ax, ay);\n\t\tdouble bt = angle(bx, by);\n\n\t\tdouble cx = ax * (bd / ad) * cos(bt - at);\n\t\tdouble cy = ay * (bd / ad) * cos(bt - at);\n\n\t\tif (cx < -EPS || EPS < cx)\n\t\t{\n\t\t\tcout << setprecision(12) << cx << ' ';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << 0 << ' ';\n\t\t}\n\n\t\tif (cy < -EPS || EPS < cy)\n\t\t{\n\t\t\tcout << setprecision(12) << cy << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << 0 << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define REP(i,n) for (long long i=0;i<(n);i++)\n#define FOR(i,a,b) for (long long i=(a);i<(b);i++)\n#define RREP(i,n) for(long long i=n;i>=0;i--)\n#define RFOR(i,a,b) for(long long i=(a);i>(b);i--)\n#define dump1d_arr(array) REP(i,array.size()) cerr << #array << \"[\" << (i) << \"] ==> \" << (array[i]) << endl;\n#define dump2d_arr(array) REP(i,array.size()) REP(j,array[i].size()) cerr << #array << \"[\" << (i) << \"]\" << \"[\" << (j) << \"] ==> \" << (array[i][j]) << endl;\n#define dump(x)  cerr << #x << \" => \" << (x) << endl;\n#define dumpP(p) cerr << \"( \" << p.first << \" , \" << p.second << \" )\" << ends;\n#define CLR(vec) { REP(i,vec.size()) vec[i] = 0; } \n#define SORT(c) sort((c).begin(),(c).end())\n#define MIN(vec) *min_element(vec.begin(), vec.end());\n#define MAX(vec) *max_element(vec.begin(), vec.end());\n#define UNIQ(vec) vec.erase(unique(vec.begin(), vec.end()),vec.end());\n#define IN(n,m)  (!(m.find(n) == m.end()))\n#define ENUM(m) for (auto itr = m.begin(); itr != m.end(); ++itr)\n#define dump_MAP(m) for(auto itr = m.begin(); itr != m.end(); ++itr) { cerr << itr->first << \" --> \"  << itr->second << endl; }\n#define FINDL(vec,x) (lower_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define FINDU(vec,x) (upper_bound(vec.begin(),vec.end(),x) - vec.begin())\n#define ROUND(N) setprecision(N)\nusing namespace std;\nconstexpr long double pi = M_PI;\nconstexpr double eps = 1e-10;\nconstexpr long mod = 1000000007;\nconstexpr short shINF = 32767;\nconstexpr long loINF = 2147483647;\nconstexpr long long llINF = 9223372036854775807;\ntypedef long long LL;\ntypedef vector<LL> VI;\ntypedef vector<VI> VVI;\ntypedef vector<string> VS;\ntypedef pair<LL,LL> pr;\ntypedef vector<pr> VP;\nstruct Order {\n\tbool operator() (pr const& a,pr const& b) const {\n\t\treturn a.first > b.first || ((a.first == b.first) && (a.second > b.second));\n\t}\n};\ntypedef struct _PT {\n  long double x, y;\n  _PT() {}\n  _PT(long double x,long double y) : x(x), y(y) {} \n  _PT operator + (_PT p){\n     return _PT(x + p.x, y + p.y);\n  }\n  _PT operator - (_PT p){\n     return _PT(x - p.x, y - p.y);\n  }\n  _PT operator * (long double d){\n     return _PT(d*x, d*y);\n  }\n  bool operator <(const struct _PT &e) const{\n     return x == e.x? (y < e.y) : x < e.x;\n  }\n  bool operator >(const struct _PT &e) const{\n     return x == e.x? (y > e.y) : x > e.x;\n  }\n\n  // --オプジェクトは位置ベクトル--\n\n  long double dist(_PT p){ //点pとの距離の2乗\n     return (x-p.x)*(x-p.x) + (y-p.y)*(y-p.y);\n  }\n\n  // --オブジェクトは幾何ベクトル--\n  \n  long double dot(_PT v){ //ベクトルvとの内積\n     return x * v.x + y * v.y;\n  }\n  \n  long double det(_PT v){ // ベクトルvとの外積\n     return x * v.y - v.x * y;\n  }\n\n  long double norm(void){ // ベクトルのノルム\n    return sqrt(x*x + y*y);\n  }\n\n  long double twiceNorm(void){ // ノルムの2乗\n    return x*x + y*y;\n  }\n\n  bool is_parallel(_PT v) { //ベクトルvと平行か(外積 = 0か)\n    return (abs(x * v.y - v.x * y) < eps);\n  }\n}P;\n\n\nclass Plane{\nprivate:\n  static bool cmp_x(const P &p1,const P &p2){\n      if (p1.x != p2.x) return p1.x < p2.x;\n      return p1.y < p2.y;\n  }\npublic:\n  P intersection(P p1,P p2,P q1,P q2) { // 直線p1-p2と直線q1-q2の交点\n    return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));\n  }\n\n  bool on_seq(P p1,P p2,P q) { // 線分p1-p2上に点qがあるか\n    return (abs((p1 - q).det(p2 - q)) < eps) && ((p1 - q).dot(p2 - q) < (eps));\n  }\n\n  bool have_intersection(P p1,P p2,P q1,P q2) { // 線分p1-p2と線分q1-q2がが交点を持つか\n    if (abs((p1-p2).det(q1-q2)) > eps) {\n      P r = intersection(p1,p2,q1,q2);\n      return (on_seq(p1,p2,r) && on_seq(q1,q2,r));\n    }\n    else return (on_seq(p1,p2,q1) || on_seq(p1,p2,q2) || on_seq(q1,q2,p1) || on_seq(q1,q2,p2));\n  }\n\n  vector<P> convexHull(vector<P> &point){\n      LL n = point.size();\n      vector<P> qs(n*2);\n      sort(point.begin(),point.end(),cmp_x);\n      long k = 0;\n\n      REP(i,n){ //下側凸包の作成\n        while(k > 1 && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n\n      for(long i = n - 2, t = k; i >= 0; i--){ //上側凸包の作成\n        while(k > t && (qs[k-1] - qs[k-2]).det(point[i] - qs[k-1]) <= 0) k--;\n        qs[k++] = point[i];\n      }\n      qs.resize(k-1);\n      return qs;\n  }\n\n  long double getArea(vector<P> &point){\n      long double s = 0;\n      LL n = point.size();\n      REP(i,n-1) s += point[i].det(point[i+1]);\n      s += point[n-1].det(point[0]);\n      return abs(s) * 0.5;\n  }\n\n  long double getAngle(P v1,P v2){ //2ベクトルのなす角を出す。\n    return acos(v1.dot(v2)/sqrt(v1.twiceNorm() * v2.twiceNorm()));\n  }\n};\nint main(void) {\n\tPlane pl;\n  P p1,p2,p3;\n  cin >> p1.x >> p1.y >> p2.x >> p2.y;\n  long double n = (p2 - p1).twiceNorm();\n  int q;\n  cin >> q;\n  vector<P> ans(q);\n  REP(i,q) {\n    cin >> p3.x >> p3.y;\n    P pt = p1 + ((p2 - p1)*((p2-p1).dot(p3-p1)/n));\n    cout << ROUND(15) << pt.x << \" \" << ROUND(15) << pt.y << endl;\n  }\n}\n\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#define TEST_MODE 1\n\n#ifndef __VECD__\n#define __VECD__\n#include <vector>\n#include <numeric>\n#include <iomanip>\n#include <stdlib.h>\n#define rep(n) for(int i=0;i<n;i++)\n#define PB push_back\n#define VecND VecD<std::vector<double> >\n#if TEST_MODE\n// #define Vec3D VecD<double, 3>\n#define Vec2D _VecD<double, 2>\n#endif\n#endif\n\ntemplate <typename U>                       class VecD;\n\n#if TEST_MODE\ntemplate <typename TYPE, unsigned int SIZE> class _VecD;\n#endif\n\ntemplate <typename U> const VecD<U> projection(const VecD<U> &p1, const VecD<U> &p2);\n\ntemplate <typename U> class VecD{\nfriend const double operator*(const VecD&, const VecD&);\ntemplate <typename T>          friend const VecD operator*(const T&, const VecD&);\ntemplate <typename T, class C> friend const C operator*(const C&, const T&);\n                               friend const VecD operator+(const VecD&, const VecD&);\ntemplate <typename T>          friend const VecD operator+(const T&, const VecD&);\ntemplate <typename T, class C> friend const C operator+(const C&, const T&);\ntemplate <class C>             friend const C operator-(const C&);\ntemplate <class C>             friend const C operator-(const C&, const C&);\ntemplate <typename T, class C> friend const C operator-(const T&, const C&);\ntemplate <typename T, class C> friend const C operator-(const C&, const T&);\n                               friend std::ostream& operator<<(std::ostream&, const VecD&);\npublic:\n\tU vec;\n\tVecD(){}\n\tVecD(U v){\n\t\tvec = v;\n\t}\n\tconst double dot(const VecD &p) const{\n\t\treturn inner_product( this->vec.begin(), this->vec.end(), p.vec.begin(), 0);\n\t}\n};\n\n#if TEST_MODE\ntemplate <typename TYPE, unsigned int SIZE> class _VecD{\nfriend const double operator*(const _VecD&, const _VecD&);\ntemplate <typename T>          friend const _VecD operator*(const T&, const _VecD&);\ntemplate <typename T, class C> friend const C operator*(const C&, const T&);\n                               friend const _VecD operator+(const _VecD&, const _VecD&);\ntemplate <typename T>          friend const _VecD operator+(const T&, const _VecD&);\ntemplate <typename T, class C> friend const C operator+(const C&, const T&);\ntemplate <class C>             friend const C operator-(const C&);\ntemplate <class C>             friend const C operator-(const C&, const C&);\ntemplate <typename T, class C> friend const C operator-(const T&, const C&);\ntemplate <typename T, class C> friend const C operator-(const C&, const T&);\n                               friend std::ostream& operator<<(std::ostream&, const _VecD&);\n\npublic:\n\tTYPE vec[SIZE];\n\t_VecD(){}\n\t_VecD(TYPE (&array)[SIZE]){\n\t\tfor(int i=0; i<SIZE; i++) vec[i] = array[i];\n\t}\n\tconst double dot(const _VecD &p) const{\n\t\tdouble tmp = 0;\n\t\tfor(int i=0; i<SIZE; i++) tmp += this->vec[i] * p.vec[i];\n\t\treturn tmp;\n\t}\n};\n#endif\n\nconst double operator*(const VecND &p0, const VecND &p1){ return inner_product( p0.vec.begin(), p0.vec.end(), p1.vec.begin(), 0); }\n// template <typename U>\n// const double operator*(const VecD<U> &p0, const VecD<U> &p1){ return inner_product( p0.vec.begin(), p0.vec.end(), p1.vec.begin(), 0); }\n\ntemplate <typename T>\nconst VecND operator*(const T &a, const VecND &p1){\n\tstd::vector<double> v;\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++) v.PB(*iter1 * a);\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\ntemplate <typename T>\nconst Vec2D operator*(const T &a, const Vec2D &p1){\n\tdouble v[2] = {0, 0};\n\tfor(int i=0; i<2; i++) v[i] = p1.vec[i] * a;\n\tconst Vec2D p(v);\n\treturn p;\n}\n// template <typename T>\n// const Vec3D operator*(const T &a, const Vec3D &p1){\n// \tdouble v[3] = {0, 0, 0};\n// \tfor(int i=0; i<3; i++) v[i] = p1.vec[i] * a;\n// \tconst Vec3D p(v);\n// \treturn p;\n// }\n#endif\n\ntemplate <typename T, class C>\nconst C operator* (const C &p, const T &a){return a*p;}\nconst VecND operator+(const VecND &p0, const VecND &p1){\n\tstd::vector<double> v;\n\tstd::vector<double>::const_iterator iter0 = p0.vec.begin();\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++){\n\t\tv.PB(*iter0 + *iter1);\n\t\titer0++;\n\t}\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\nconst Vec2D operator+(const Vec2D &p0, const Vec2D &p1){\n\tdouble v[2] = {0, 0};\n\tfor(int i=0; i<2; i++) v[i] = p0.vec[i] + p1.vec[i];\n\tconst Vec2D p(v);\n\treturn p;\n}\n// const Vec3D operator+(const Vec3D &p0, const Vec3D &p1){\n// \tdouble v[3] = {0, 0, 0};\n// \tfor(int i=0; i<3; i++) v[i] = p0.vec[i] + p1.vec[i];\n// \tconst Vec3D p(v);\n// \treturn p;\n// }\n#endif\ntemplate <class T>\nconst VecND operator+(const T &a, const VecND &p1){\n\tstd::vector<double> v;\n\tfor(std::vector<double>::const_iterator iter1=p1.vec.begin();iter1!=p1.vec.end();iter1++){\n\t\tv.PB(*iter1 + a);\n\t}\n\tconst VecND p(v);\n\treturn p;\n}\n#if TEST_MODE\ntemplate <class T>\nconst Vec2D operator+(const T &a, const Vec2D &p1){\n\tdouble v[2];\n\tfor(int i=0; i<2; i++) v[i] = p1.vec[i] + a;\n\tconst Vec2D p(v);\n\treturn p;\n}\n// template <class T>\n// const Vec3D operator+(const T &a, const Vec3D &p1){\n// \tdouble v[3];\n// \tfor(int i=0; i<3; i++) v[i] = p1.vec[i] + a;\n// \tconst Vec3D p(v);\n// \treturn p;\n// }\n#endif\ntemplate <typename T, class C>\nconst C operator+(const C &p1, const T &a){return a+p1;}\ntemplate <class C>\nconst C operator-(const C &p1){return (-1)*p1;}\ntemplate <class C>\nconst C operator-(C &p0, C &p1){ return p0+(-p1); }\ntemplate <typename T, class C>\nconst C operator-(const T &a, C &p1){ return a+(-p1); }\ntemplate <typename T, class C>\nconst C operator-(C &p1, const T &a){return (-a)+p1;}\n\n// template<class C>\n// const C projection(const C &p1, const C &p2){\n// \treturn ((p1*p2) / (p1*p1)) * p1;\n// }\ntemplate<typename U>\nconst VecD<U> projection(const VecD<U> &p1, const VecD<U> &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\n\n#if TEST_MODE\nconst Vec2D projection(const Vec2D &p1, const Vec2D &p2){\n\treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n}\n// const Vec3D projection(const Vec3D &p1, const Vec3D &p2){\n// \treturn ((p1.dot(p2)) / (p1.dot(p1))) * p1;\n// }\n#endif\n\nstd::ostream& operator<<(std::ostream &os, const VecND &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\n#if TEST_MODE\nstd::ostream& operator<<(std::ostream &os, const Vec2D &p){\n\tos << std::fixed << std::setprecision(10) << p.vec[0] << \" \" << std::fixed << std::setprecision(10) << p.vec[1] << std::endl;\n}\n#endif\n\n#include <iostream>\nusing namespace std;\n\n\nint main(void){\n\n\tdouble xp0, yp0, xp1, yp1; cin>>xp0>>yp0>>xp1>>yp1;\n\tint q; cin >> q;\n\t// vector<double> v0; v0.PB(xp0); v0.PB(yp0); VecND p0(v0);\n\t// vector<double> v1; v1.PB(xp1); v1.PB(yp1); VecND p1(v1);\n\tdouble v0[2] = {xp0, yp0}; Vec2D p0(v0);\n\tdouble v1[2] = {xp1, yp1}; Vec2D p1(v1);\n\tp1 = p1-p0;\n\t// cout << p1.point[0] << \" \" << p1.point[1] << endl;\n\trep(q){\n\t\tdouble xp2,yp2; cin>>xp2>>yp2;\n\t\t// vector<double> v2; v2.PB(xp2); v2.PB(yp2); VecND p2(v2);\n\t\tdouble v2[2] = {xp2, yp2}; Vec2D p2(v2);\n\t\tp2 = 1*(p2-p0);\n\t\t// VecND ret = projection(p1, p2);\n\t\tVec2D ret = projection(p1, p2);\n\t\tret = ret+p0;\n\t\tcout << ret << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<list>\n#include<string>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<ctime>\nusing namespace std;\n\ntypedef long long ll;\n\nbool debug = false;\nconst int NIL = -1;\nconst int INF = 1000000000;\nconst int NUM = 100010;\nconst double eps = 1e-10;\nclock_t START, END;\n\nint X, Y, E;\n\n//basic defitition\nstruct Point {\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) :x(x), y(y) {}\n};\ntypedef Point Vector;\nVector operator + (Vector A, Vector B) { return Vector(A.x + B.x, A.y + B.y); }\nVector operator - (Point A, Point B) { return Vector(A.x - B.x, A.y - B.y); }\nVector operator * (Vector A, double p) { return Vector(A.x * p, A.y * p); }\nVector operator / (Vector A, double p) { return Vector(A.x / p, A.y / p); }\nbool operator < (const Point& a, const Point& b) { return a.x < b.x || (a.x == b.x && a.y < b.y); }\nint dcmp(double x) { if (fabs(x) < eps)return 0; else return x < 0 ? -1 : 1; }\nbool operator == (const Point& a, const Point& b) { return dcmp(a.x - b.x) == 0 && dcmp(a.y - b.y) == 0; }\n// basic operator\ndouble Dot(Vector A, Vector B) { return A.x * B.x + A.y * B.y; }\ndouble Length(Vector A) { return sqrt(Dot(A, A)); }\ndouble Angle(Vector A, Vector B) { return acos(Dot(A, B) / Length(A) / Length(B)); }\ndouble Cross(Vector A, Vector B) { return A.x * B.y - A.y * B.x; }\ndouble Area2(Point A, Point B, Point C) { return Cross(B - A, C - A); }\nVector Rotate(Vector A, double rad) { return Vector(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) + A.y * cos(rad)); }\nVector Normal(Vector A) { double L = Length(A); return Vector(-A.y / L, A.x / L); } //A is not zero vector\n//point and line\nPoint GetLineIntersection(Point P, Vector v, Point Q, Vector w) {\n\tVector u = P - Q;\n\tdouble t = Cross(w, u) / Cross(v, w);\n\treturn P + v * t;\n}//two lines only have one intersection and Cross(v,w) is not zero\ndouble DistanceToLine(Point P, Point A, Point B) {\n\tVector v1 = B - A, v2 = P - A;\n\treturn fabs(Cross(v1, v2)) / Length(v1);\n}\ndouble DistanceToSegment(Point P, Point A, Point B) {\n\tif (A == B) return Length(P - A);\n\tVector v1 = B - A, v2 = P - A, v3 = P - B;\n\tif (dcmp(Dot(v1, v2)) < 0) return Length(v2);\n\telse if (dcmp(Dot(v1, v3)) > 0) return Length(v3);\n\telse return fabs(Cross(v1, v2)) / Length(v1);\n}\nPoint GetLineProjection(Point P, Point A, Point B) {\n\tVector v = B - A;\n\treturn A + v * (Dot(v, P - A) / Dot(v, v));\n}\nbool SegmentProperIntersection(Point a1, Point a2, Point b1, Point b2) {\n\tdouble c1 = Cross(a2 - a1, b1 - a1), c2 = Cross(a2 - a1, b2 - a1), c3 = Cross(b2 - b1, a1 - b1), c4 = Cross(b2 - b1, a2 - b1);\n\treturn dcmp(c1) * dcmp(c2) < 0 && dcmp(c3) * dcmp(c4) < 0;\n}\nbool OnSegment(Point p, Point a1, Point a2) {\n\treturn dcmp(Cross(a1 - p, a2 - p)) == 0 && dcmp(Dot(a1 - p, a2 - p)) < 0;\n}\n//polygon\ndouble ConvexPolygonArea(Point* p, int n) {\n\tdouble area = 0;\n\tfor (int i = 1; i < n - 1; i++)\n\t\tarea == Cross(p[i] - p[0], p[i + 1] - p[0]);\n\treturn area / 2;\n}\n\nint main(void)\n{\n\tif (debug) {\n\t\tSTART = clock();\n\t\tfreopen(\"in29.txt\", \"r\", stdin);\n\t\tfreopen(\"out.txt\", \"w\", stdout);\n\t}\n\tint q;\n\tPoint A, B, D, S;\n\tscanf(\"%lf%lf%lf%lf\", &A.x, &A.y, &B.x, &B.y);\n\tcin >> q;\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%lf%lf\", &D.x, &D.y);\n\t\tS = GetLineProjection(D, A, B);\n\t\tprintf(\"%.10lf %.10lf\\n\", S.x, S.y);\n\t}\n\tif (debug) {\n\t\tEND = clock();\n\t\tdouble endtime = (double)(END - START) / 1000;\n\t\tprintf(\"total time = %lf s\", endtime);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,n) for(int i = 0; i < (n) ; i++)\nconstexpr auto INF = 2147483647;\ntypedef long long ll;\n\nclass Vector2{\n  public:\n  double x, y;\n  Vector2(){}\n  Vector2(double x, double y): x(x), y(y) {}\n\n  Vector2 operator + (Vector2 v) {\n    return Vector2(x + v.x , y + v.y);\n  }\n  Vector2 operator - (Vector2 v) {\n    return Vector2(x - v.x , y - v.y);\n  }\n\n  Vector2 operator * (double d){\n    return Vector2(d*x, d*y);\n  }\n\n};\n\ndouble dot(Vector2 a, Vector2 b){\n  return a.x * b.x + a.y * b.y; \n}\n\ndouble cross(Vector2 a, Vector2 b){\n  return a.x * b.y - a.y*b.x;\n}\n\nVector2 projection(Vector2 a, Vector2 b, Vector2 p){\n  Vector2 base = b - a;\n  Vector2 hypo = p - a;\n  double norm_base = pow(base.x,2) + pow(base.y,2);\n\n  Vector2 x;\n  x = a + base*(dot(hypo,base) / norm_base);\n  return x;\n}\n\nint main(){\n  Vector2 a, b, p, x;\n  int queri;\n  cin >> a.x >> a.y >> b.x >> b.y;\n  cin >> queri;\n  rep(i,queri){\n    cin >> p.x >> p.y;\n    x = projection(a,b,p);\n    cout << fixed << setprecision(10);\n    cout << x.x << \" \" << x.y << endl;\n  }\n  \n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a)-(b)) < EPS)\n\nclass Point{\npublic:\n\tdouble x, y;\n\tPoint(double _x = 0, double _y = 0) :x(_x), y(_y){};\n\n\tPoint operator+(const Point &p){ return Point(x + p.x, y + p.y); }\n\tPoint operator-(const Point &p){ return Point(x - p.x, y - p.y); }\n\tPoint operator*(const Point &p){ return Point(x * p.x, y * p.y); }\n\tPoint operator*(double k){ return Point(x * k, y * k); }\n\tPoint operator/(const Point &p){ return Point(x / p.x, y / p.y); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator<(const Point &p) const{\n\t\treturn (x != p.x) ? x < (p.x) : (y < p.y);\n\t}\n\n\tbool operator==(const Point &p){\n\t\treturn equals(x, p.x) && equals(y, p.y);\n\t}\n};\n\ntypedef Point Vector;\nstruct Segment{\n\tPoint p1, p2;\n};\n\ndouble dot(Vector a, Vector b){\n\tdouble res = a.x*b.x + a.y*b.y;\n\treturn res;\n}\n\ndouble cross(Vector a, Vector b){\n\tdouble res = a.x*b.y - a.y*b.x;\n\treturn res;\n}\n\nbool isOrthogonal(Vector a, Vector b){\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isParallel(Vector a, Vector b){\n\treturn equals(cross(a, b), 0.0);\n}\n\nPoint project(Segment s, Point p){\n\tVector base = s.p2 - s.p1;\n\tVector v = p - s.p1;\n\tdouble l = dot(v, base) / base.norm();\n\treturn s.p1 + base * l;\n}\n\nint main(){\n\tSegment s;\n\tcin >> s.p1.x >> s.p1.y >> s.p2.x >> s.p2.y;\n\tint n;\n\tcin >> n;\n\tcout.precision(20);\n\tfor (int i = 0; i < n; ++i){\n\t\tPoint pp;\n\t\tcin >> pp.x >> pp.y;\n\t\tPoint res = project(s, pp);\n\t\tcout << res.x << \" \" << res.y << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i = 0; i < (n); ++i)\n#define srep(i,s,t) for(int i = s; i < t; ++i)\n#define drep(i,n) for(int i = (n)-1; i >= 0; --i)\nusing namespace std;\ntypedef long long int ll;\ntypedef pair<int,int> P;\n#define yn {puts(\"Yes\");}else{puts(\"No\");}\n#define MAX_N 200005\n\nusing Real = double;\nusing Point = complex<Real>;\nconst Real EPS = 1e-8, PI = acos(-1);\n\ninline bool eq(Real a, Real b) { return fabs(b - a) < EPS; }\n\nPoint operator*(const Point &p, const Real &d)\n{\n    return Point(real(p) * d, imag(p) * d);\n}\n\nistream &operator>>(istream &is, Point &p)\n{\n    Real a, b;\n    is >> a >> b;\n    p = Point(a, b);\n    return is;\n}\n\nostream &operator<<(ostream &os, Point &p)\n{\n    return os << fixed << setprecision(10) << p.real() << \" \" << p.imag();\n}\n\n// 点 p を反時計回りに theta 回転\nPoint rotate(Real theta, const Point &p)\n{\n    return Point(cos(theta) * p.real() - sin(theta) * p.imag(), sin(theta) * p.real() + cos(theta) * p.imag());\n}\n\nReal radian_to_degree(Real r)\n{\n    return (r * 180.0 / PI);\n}\n\nReal degree_to_radian(Real d)\n{\n    return (d * PI / 180.0);\n}\n\n// a-b-c の角度のうち小さい方を返す\nReal get_angle(const Point &a, const Point &b, const Point &c)\n{\n    const Point v(b - a), w(c - b);\n    Real alpha = atan2(v.imag(), v.real()), beta = atan2(w.imag(), w.real());\n    if (alpha > beta)\n        swap(alpha, beta);\n    Real theta = (beta - alpha);\n    return min(theta, 2 * acos(-1) - theta);\n}\n\nnamespace std\n{\n    bool operator<(const Point &a, const Point &b)\n    {\n        return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag();\n    }\n} // namespace std\n\nstruct Line\n{\n    Point a, b;\n\n    Line() = default;\n\n    Line(Point a, Point b) : a(a), b(b) {}\n\n    Line(Real A, Real B, Real C) // Ax + By = C\n    {\n        if (eq(A, 0))\n            a = Point(0, C / B), b = Point(1, C / B);\n        else if (eq(B, 0))\n            b = Point(C / A, 0), b = Point(C / A, 1);\n        else\n            a = Point(0, C / B), b = Point(C / A, 0);\n    }\n\n    friend ostream &operator<<(ostream &os, Line &p)\n    {\n        return os << p.a << \" to \" << p.b;\n    }\n\n    friend istream &operator>>(istream &is, Line &a)\n    {\n        return is >> a.a >> a.b;\n    }\n};\n\nstruct Segment : Line\n{\n    Segment() = default;\n\n    Segment(Point a, Point b) : Line(a, b) {}\n};\n\nstruct Circle\n{\n    Point p;\n    Real r;\n\n    Circle() = default;\n\n    Circle(Point p, Real r) : p(p), r(r) {}\n};\n\nusing Points = vector<Point>;\nusing Polygon = vector<Point>;\nusing Segments = vector<Segment>;\nusing Lines = vector<Line>;\nusing Circles = vector<Circle>;\n\nReal cross(const Point &a, const Point &b)\n{\n    return real(a) * imag(b) - imag(a) * real(b);\n}\n\nReal dot(const Point &a, const Point &b)\n{\n    return real(a) * real(b) + imag(a) * imag(b);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C\n// 点の回転方向\nint ccw(const Point &a, Point b, Point c)\n{\n    b = b - a, c = c - a;\n    if (cross(b, c) > EPS)\n        return +1; // \"COUNTER_CLOCKWISE\"\n    if (cross(b, c) < -EPS)\n        return -1; // \"CLOCKWISE\"\n    if (dot(b, c) < 0)\n        return +2; // \"ONLINE_BACK\"\n    if (norm(b) < norm(c))\n        return -2; // \"ONLINE_FRONT\"\n    return 0;      // \"ON_SEGMENT\"\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\n// 平行判定\nbool parallel(const Line &a, const Line &b)\n{\n    return eq(cross(a.b - a.a, b.b - b.a), 0.0);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A\n// 垂直判定\nbool orthogonal(const Line &a, const Line &b)\n{\n    return eq(dot(a.a - a.b, b.a - b.b), 0.0);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\n// 射影\n// 直線 l に p から垂線を引いた交点を求める\nPoint projection(const Line &l, const Point &p)\n{\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\nPoint projection(const Segment &l, const Point &p)\n{\n    double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);\n    return l.a + (l.a - l.b) * t;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B\n// 反射\n// 直線 l を対称軸として点 p  と線対称にある点を求める\nPoint reflection(const Line &l, const Point &p)\n{\n    return p + (projection(l, p) - p) * 2.0;\n}\n\nbool intersect(const Line &l, const Point &p)\n{\n    return abs(ccw(l.a, l.b, p)) != 1;\n}\n\nbool intersect(const Line &l, const Line &m)\n{\n    return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS;\n}\n\nbool intersect(const Segment &s, const Point &p)\n{\n    return ccw(s.a, s.b, p) == 0;\n}\n\nbool intersect(const Line &l, const Segment &s)\n{\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS;\n}\n\nReal distance(const Line &l, const Point &p);\n\nbool intersect(const Circle &c, const Line &l)\n{\n    return distance(l, c.p) <= c.r + EPS;\n}\n\nbool intersect(const Circle &c, const Point &p)\n{\n    return abs(abs(p - c.p) - c.r) < EPS;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B\nbool intersect(const Segment &s, const Segment &t)\n{\n    return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;\n}\n\nint intersect(const Circle &c, const Segment &l)\n{\n    if (norm(projection(l, c.p) - c.p) - c.r * c.r > EPS)\n        return 0;\n    auto d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);\n    if (d1 < c.r + EPS && d2 < c.r + EPS)\n        return 0;\n    if (d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS)\n        return 1;\n    const Point h = projection(l, c.p);\n    if (dot(l.a - h, l.b - h) < 0)\n        return 2;\n    return 0;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A&lang=jp\nint intersect(Circle c1, Circle c2)\n{\n    if (c1.r < c2.r)\n        swap(c1, c2);\n    Real d = abs(c1.p - c2.p);\n    if (c1.r + c2.r < d)\n        return 4;\n    if (eq(c1.r + c2.r, d))\n        return 3;\n    if (c1.r - c2.r < d)\n        return 2;\n    if (eq(c1.r - c2.r, d))\n        return 1;\n    return 0;\n}\n\nReal distance(const Point &a, const Point &b)\n{\n    return abs(a - b);\n}\n\nReal distance(const Line &l, const Point &p)\n{\n    return abs(p - projection(l, p));\n}\n\nReal distance(const Line &l, const Line &m)\n{\n    return intersect(l, m) ? 0 : distance(l, m.a);\n}\n\nReal distance(const Segment &s, const Point &p)\n{\n    Point r = projection(s, p);\n    if (intersect(s, r))\n        return abs(r - p);\n    return min(abs(s.a - p), abs(s.b - p));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D\nReal distance(const Segment &a, const Segment &b)\n{\n    if (intersect(a, b))\n        return 0;\n    return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});\n}\n\nReal distance(const Line &l, const Segment &s)\n{\n    if (intersect(l, s))\n        return 0;\n    return min(distance(l, s.a), distance(l, s.b));\n}\n\nPoint crosspoint(const Line &l, const Line &m)\n{\n    Real A = cross(l.b - l.a, m.b - m.a);\n    Real B = cross(l.b - l.a, l.b - m.a);\n    if (eq(abs(A), 0.0) && eq(abs(B), 0.0))\n        return m.a;\n    return m.a + (m.b - m.a) * B / A;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C\nPoint crosspoint(const Segment &l, const Segment &m)\n{\n    return crosspoint(Line(l), Line(m));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_D\npair<Point, Point> crosspoint(const Circle &c, const Line l)\n{\n    Point pr = projection(l, c.p);\n    Point e = (l.b - l.a) / abs(l.b - l.a);\n    if (eq(distance(l, c.p), c.r))\n        return {pr, pr};\n    double base = sqrt(c.r * c.r - norm(pr - c.p));\n    return {pr - e * base, pr + e * base};\n}\n\npair<Point, Point> crosspoint(const Circle &c, const Segment &l)\n{\n    Line aa = Line(l.a, l.b);\n    if (intersect(c, l) == 2)\n        return crosspoint(c, aa);\n    auto ret = crosspoint(c, aa);\n    if (dot(l.a - ret.first, l.b - ret.first) < 0)\n        ret.second = ret.first;\n    else\n        ret.first = ret.second;\n    return ret;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_E\npair<Point, Point> crosspoint(const Circle &c1, const Circle &c2)\n{\n    Real d = abs(c1.p - c2.p);\n    Real a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n    Real t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());\n    Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);\n    Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);\n    return {p1, p2};\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_F\n// 点 p を通る円 c の接線\npair<Point, Point> tangent(const Circle &c1, const Point &p2)\n{\n    return crosspoint(c1, Circle(p2, sqrt(norm(c1.p - p2) - c1.r * c1.r)));\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_G\n// 円 c1, c2 の共通接線\nLines tangent(Circle c1, Circle c2)\n{\n    Lines ret;\n    if (c1.r < c2.r)\n        swap(c1, c2);\n    Real g = norm(c1.p - c2.p);\n    if (eq(g, 0))\n        return ret;\n    Point u = (c2.p - c1.p) / sqrt(g);\n    Point v = rotate(PI * 0.5, u);\n    for (int s : {-1, 1})\n    {\n        Real h = (c1.r + s * c2.r) / sqrt(g);\n        if (eq(1 - h * h, 0))\n        {\n            ret.emplace_back(c1.p + u * c1.r, c1.p + (u + v) * c1.r);\n        }\n        else if (1 - h * h > 0)\n        {\n            Point uu = u * h, vv = v * sqrt(1 - h * h);\n            ret.emplace_back(c1.p + (uu + vv) * c1.r, c2.p - (uu + vv) * c2.r * s);\n            ret.emplace_back(c1.p + (uu - vv) * c1.r, c2.p - (uu - vv) * c2.r * s);\n        }\n    }\n    return ret;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_B\n// 凸性判定\nbool is_convex(const Polygon &p)\n{\n    int n = (int)p.size();\n    for (int i = 0; i < n; i++)\n    {\n        if (ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1)\n            return false;\n    }\n    return true;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A\n// 凸包\nPolygon convex_hull(Polygon &p)\n{\n    int n = (int)p.size(), k = 0;\n    if (n <= 2)\n        return p;\n    sort(p.begin(), p.end());\n    vector<Point> ch(2 * n);\n    for (int i = 0; i < n; ch[k++] = p[i++])\n    {\n        while (k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < EPS)\n            --k;\n    }\n    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--])\n    {\n        while (k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < EPS)\n            --k;\n    }\n    ch.resize(k - 1);\n    return ch;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C\n// 多角形と点の包含判定\nenum\n{\n    OUT,\n    ON,\n    IN\n};\n\nint contains(const Polygon &Q, const Point &p)\n{\n    bool in = false;\n    for (int i = 0; i < Q.size(); i++)\n    {\n        Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;\n        if (a.imag() > b.imag())\n            swap(a, b);\n        if (a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0)\n            in = !in;\n        if (cross(a, b) == 0 && dot(a, b) <= 0)\n            return ON;\n    }\n    return in ? IN : OUT;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033\n// 線分の重複除去\nvoid merge_segments(vector<Segment> &segs)\n{\n\n    auto merge_if_able = [](Segment &s1, const Segment &s2) {\n        if (abs(cross(s1.b - s1.a, s2.b - s2.a)) > EPS)\n            return false;\n        if (ccw(s1.a, s2.a, s1.b) == 1 || ccw(s1.a, s2.a, s1.b) == -1)\n            return false;\n        if (ccw(s1.a, s1.b, s2.a) == -2 || ccw(s2.a, s2.b, s1.a) == -2)\n            return false;\n        s1 = Segment(min(s1.a, s2.a), max(s1.b, s2.b));\n        return true;\n    };\n\n    for (int i = 0; i < segs.size(); i++)\n    {\n        if (segs[i].b < segs[i].a)\n            swap(segs[i].a, segs[i].b);\n    }\n    for (int i = 0; i < segs.size(); i++)\n    {\n        for (int j = i + 1; j < segs.size(); j++)\n        {\n            if (merge_if_able(segs[i], segs[j]))\n            {\n                segs[j--] = segs.back(), segs.pop_back();\n            }\n        }\n    }\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1033\n// 線分アレンジメント\n// 任意の2線分の交点を頂点としたグラフを構築する\nvector<vector<int>> segment_arrangement(vector<Segment> &segs, vector<Point> &ps)\n{\n    vector<vector<int>> g;\n    int N = (int)segs.size();\n    for (int i = 0; i < N; i++)\n    {\n        ps.emplace_back(segs[i].a);\n        ps.emplace_back(segs[i].b);\n        for (int j = i + 1; j < N; j++)\n        {\n            const Point p1 = segs[i].b - segs[i].a;\n            const Point p2 = segs[j].b - segs[j].a;\n            if (cross(p1, p2) == 0)\n                continue;\n            if (intersect(segs[i], segs[j]))\n            {\n                ps.emplace_back(crosspoint(segs[i], segs[j]));\n            }\n        }\n    }\n    sort(begin(ps), end(ps));\n    ps.erase(unique(begin(ps), end(ps)), end(ps));\n\n    int M = (int)ps.size();\n    g.resize(M);\n    for (int i = 0; i < N; i++)\n    {\n        vector<int> vec;\n        for (int j = 0; j < M; j++)\n        {\n            if (intersect(segs[i], ps[j]))\n            {\n                vec.emplace_back(j);\n            }\n        }\n        for (int j = 1; j < vec.size(); j++)\n        {\n            g[vec[j - 1]].push_back(vec[j]);\n            g[vec[j]].push_back(vec[j - 1]);\n        }\n    }\n    return (g);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_C\n// 凸多角形の切断\n// 直線 l.a-l.b で切断しその左側にできる凸多角形を返す\nPolygon convex_cut(const Polygon &U, Line l)\n{\n    Polygon ret;\n    for (int i = 0; i < U.size(); i++)\n    {\n        Point now = U[i], nxt = U[(i + 1) % U.size()];\n        if (ccw(l.a, l.b, now) != -1)\n            ret.push_back(now);\n        if (ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) < 0)\n        {\n            ret.push_back(crosspoint(Line(now, nxt), l));\n        }\n    }\n    return (ret);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A\n// 多角形の面積\nReal area(const Polygon &p)\n{\n    Real A = 0;\n    for (int i = 0; i < p.size(); ++i)\n    {\n        A += cross(p[i], p[(i + 1) % p.size()]);\n    }\n    return A * 0.5;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_H\n// 円と多角形の共通部分の面積\nReal area(const Polygon &p, const Circle &c)\n{\n    if (p.size() < 3)\n        return 0.0;\n    function<Real(Circle, Point, Point)> cross_area = [&](const Circle &c, const Point &a, const Point &b) {\n        Point va = c.p - a, vb = c.p - b;\n        Real f = cross(va, vb), ret = 0.0;\n        if (eq(f, 0.0))\n            return ret;\n        if (max(abs(va), abs(vb)) < c.r + EPS)\n            return f;\n        if (distance(Segment(a, b), c.p) > c.r - EPS)\n            return c.r * c.r * arg(vb * conj(va));\n        auto u = crosspoint(c, Segment(a, b));\n        vector<Point> tot{a, u.first, u.second, b};\n        for (int i = 0; i + 1 < tot.size(); i++)\n        {\n            ret += cross_area(c, tot[i], tot[i + 1]);\n        }\n        return ret;\n    };\n    Real A = 0;\n    for (int i = 0; i < p.size(); i++)\n    {\n        A += cross_area(c, p[i], p[(i + 1) % p.size()]);\n    }\n    return A;\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_B\n// 凸多角形の直径(最遠頂点対間距離)\nReal convex_diameter(const Polygon &p)\n{\n    int N = (int)p.size();\n    int is = 0, js = 0;\n    for (int i = 1; i < N; i++)\n    {\n        if (p[i].imag() > p[is].imag())\n            is = i;\n        if (p[i].imag() < p[js].imag())\n            js = i;\n    }\n    Real maxdis = norm(p[is] - p[js]);\n\n    int maxi, maxj, i, j;\n    i = maxi = is;\n    j = maxj = js;\n    do\n    {\n        if (cross(p[(i + 1) % N] - p[i], p[(j + 1) % N] - p[j]) >= 0)\n        {\n            j = (j + 1) % N;\n        }\n        else\n        {\n            i = (i + 1) % N;\n        }\n        if (norm(p[i] - p[j]) > maxdis)\n        {\n            maxdis = norm(p[i] - p[j]);\n            maxi = i;\n            maxj = j;\n        }\n    } while (i != is || j != js);\n    return sqrt(maxdis);\n}\n\n// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_5_A\n// 最近点対\nReal closest_pair(Points ps)\n{\n    if (ps.size() <= 1)\n        throw(0);\n    sort(begin(ps), end(ps));\n\n    auto compare_y = [&](const Point &a, const Point &b) {\n        return imag(a) < imag(b);\n    };\n    vector<Point> beet(ps.size());\n    const Real INF = 1e18;\n\n    function<Real(int, int)> rec = [&](int left, int right) {\n        if (right - left <= 1)\n            return INF;\n        int mid = (left + right) >> 1;\n        auto x = real(ps[mid]);\n        auto ret = min(rec(left, mid), rec(mid, right));\n        inplace_merge(begin(ps) + left, begin(ps) + mid, begin(ps) + right, compare_y);\n        int ptr = 0;\n        for (int i = left; i < right; i++)\n        {\n            if (abs(real(ps[i]) - x) >= ret)\n                continue;\n            for (int j = 0; j < ptr; j++)\n            {\n                auto luz = ps[i] - beet[ptr - j - 1];\n                if (imag(luz) >= ret)\n                    break;\n                ret = min(ret, abs(luz));\n            }\n            beet[ptr++] = ps[i];\n        }\n        return ret;\n    };\n    return rec(0, (int)ps.size());\n}\n\n\nint main() {\n    int x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n\n    Line line = Line(Point(x1,y1), Point(x2,y2));\n\n    int q;\n    cin >> q;\n    while(q--){\n        int x, y;\n        cin >> x >> y;\n        Point ans = projection(line, Point(x,y));\n        cout << fixed << setprecision(10) << ans.real() << ' ' << ans.imag() << endl;\n    }\n\n    return 0;\n}\n\n\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\nusing namespace std;\n\nclass Point{\npublic:\n\tdouble x;\n\tdouble y;\n\tPoint(double x=0,double y=0) :x(x),y(y){ }\n\tPoint operator +(Point &p) {\n\t\treturn Point(x + p.x, y + p.y);\n\t}\n\tPoint operator-(Point &p) {\n\t\treturn Point(x - p.x, y - p.y);\n\t}\n\tPoint operator *(double a) {\n\t\treturn Point(x*a, y*a);\n\t}\n};\n\nint main() {\n\tLine s;\n\tcin >> s.p1.x; cin >> s.p1.y; cin >> s.p2.x; cin >> s.p2.y;\n\tdouble q;\n\tcin >> q;\n\tfor (double i = 0;i < q;i++) {\n\t\tPoint p,q;\n\t\tcin >> p.x; cin >> p.y;\n\t\tdouble prod = ((s.p2.x - s.p1.x)*(p.x - s.p1.x)) + ((s.p2.y - s.p1.y)*(p.y - s.p1.y));\n\t\tq = s.p1 +(s.p2 - s.p1)*(prod/((s.p1.x-s.p2.x)*(s.p1.x - s.p2.x)+ (s.p1.y - s.p2.y)*(s.p1.y - s.p2.y)));\n\t\tcout << q.x << \" \" << q.y << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <algorithm>\n#include <array>\n#include <climits>\n#include <cmath>\n#include <cstdint>\n#include <cstdio>\n#include <cstdlib>\n#include <ctime>\n#include <functional>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <type_traits>\n#include <utility>\n#include <vector>\n\nusing int32 = std::int_fast32_t;\nusing int64 = std::int_fast64_t;\nusing uint32 = std::uint_fast32_t;\nusing uint64 = std::uint_fast64_t;\nusing intl32 = std::int_least32_t;\nusing intl64 = std::int_least64_t;\nusing uintl32 = std::uint_least32_t;\nusing uintl64 = std::uint_least64_t;\n\nstatic constexpr double PI = 3.1415926535897932;\nstruct angle {\n\tdouble r;\n\tangle() :r(0) {}\n\tangle(double r_) :r(arr(std::fmod(r_, 2.0 * PI) + 2.0 * PI)) {}\n\tstatic double arr(const double &o) { return o < 2.0 * PI - eps ? o : o - 2.0 * PI; }\n\tstatic angle make(const double &o) { angle ret;ret.r = o;return ret; }\n\tconst angle operator+(const angle &o)const { return make(arr(r + o.r)); }\n\tconst angle operator-(const angle &o)const { return make(arr(r - o.r + 2.0 * PI)); }\n\tconst angle operator*(const double &o)const { return angle(r * o); }\n\tconst angle operator/(const double &o)const { return angle(r / o); }\n\tangle &operator+=(const angle &o) { return *this = *this + o; }\n\tangle &operator-=(const angle &o) { return *this = *this - o; }\n\tangle &operator*=(const double &o) { return *this = *this * o; }\n\tangle &operator/=(const double &o) { return *this = *this / o; }\n\tconst angle operator~()const { return make(arr(3.0 * PI - r)); }\n\tconst angle operator-()const { return make(arr(2.0 * PI - r)); }\n\tconst bool operator==(const angle &o)const { return std::abs(r - o.r) <= eps; }\n\tconst bool operator!=(const angle &o)const { return std::abs(r - o.r) > eps; }\n\tconst bool operator< (const angle &o)const { return r <  o.r; }\n\tconst bool operator<=(const angle &o)const { return r <= o.r; }\n\tconst bool operator> (const angle &o)const { return r >  o.r; }\n\tconst bool operator>=(const angle &o)const { return r >= o.r; }\n\texplicit operator bool()const { return r > eps; }\n\texplicit operator double()const { return r; }\n\tconst double sin()const { return std::sin(r); }\n\tconst double cos()const { return std::cos(r); }\n\n\tconst double degree()const { return r*(180.0 / PI); }\n\tconst double ratio()const { return r / (2.0 * PI); }\nprivate:\n\tstatic constexpr double eps = 0.0000001;\n};\nangle operator\"\" _deg(long double x) { return angle(x*(PI / 180.0)); }\nangle operator\"\" _rat(long double x) { return angle(x * 2.0 * PI); }\nangle operator\"\" _rad(long double x) { return angle(x); }\nstruct pvec {\n\tstatic constexpr double eps = 0.0000000000001;\n\tdouble x, y;\n\tpvec() :x(0), y(0) {}\n\tpvec(double x_, double y_) :x(x_), y(y_) {}\n\tpvec(double abs_, angle r) :x(abs_*r.cos()), y(abs_*r.sin()) {}\n\tconst pvec operator+(const pvec &o)const { return pvec(x + o.x, y + o.y); }\n\tconst pvec operator-(const pvec &o)const { return pvec(x - o.x, y - o.y); }\n\tconst pvec operator*(const pvec &o)const { return pvec(x*o.x - y*o.y, x*o.y + y*o.x); }\n\tconst pvec operator/(const pvec &o)const { return pvec(x*o.x + y*o.y, y*o.x - x*o.y) / abs2(); }\n\tconst pvec operator*(const double &o)const { return pvec(x * o, y * o); }\n\tconst pvec operator/(const double &o)const { return pvec(x / o, y / o); }\n\tpvec &operator+=(const pvec &o) { return *this = *this + o; }\n\tpvec &operator-=(const pvec &o) { return *this = *this - o; }\n\tpvec &operator*=(const pvec &o) { return *this = *this * o; }\n\tpvec &operator/=(const pvec &o) { return *this = *this / o; }\n\tpvec &operator*=(const double &o) { return *this = *this * o; }\n\tpvec &operator/=(const double &o) { return *this = *this / o; }\n\n\tconst pvec operator+()const { return *this; }\n\tconst pvec operator-()const { return pvec(-x, -y); }\n\tconst pvec operator~()const { return pvec(x, -y); }\n\n\texplicit operator bool()const { return std::abs(x) > eps || std::abs(y) > eps; }\n\tconst bool operator==(const pvec &o)const { return std::abs(x - o.x) <= eps&&std::abs(y - o.y) <= eps; }\n\tconst bool operator!=(const pvec &o)const { return std::abs(x - o.x) > eps || std::abs(y - o.y) > eps; }\n\n\tconst double abs()const { return mysqrt(abs2()); }\n\tconst double abs2()const { return x*x + y*y; }\n\tconst angle arg()const {\n\t\tif (x > eps) return angle(std::atan(y / x));\n\t\tif (x < eps) return angle(std::atan(y / x) + PI);\n\t\treturn angle();\n\t}\n\tstatic const double dot(const pvec &l, const pvec &r) { return l.x*r.x + l.y*r.y; }\n\tstatic const double cross(const pvec &l, const pvec &r) { return l.x*r.y - l.y*r.x; }\n\tconst pvec dir()const { return *this / abs(); }\n\n\tstatic const bool C_x(const pvec &l, const pvec &r) {\n\t\tif (l.x != r.x) return l.x < r.x;\n\t\treturn l.y < r.y;\n\t}\n\n\tfriend std::istream &operator>>(std::istream &is, pvec &o) {\n\t\tdouble x_, y_;is >> x_ >> y_;o = pvec(x_, y_);return (is);\n\t}\n\tfriend std::ostream &operator<<(std::ostream &os, const pvec &o) {\n\t\treturn os << o.x << \" \" << o.y;\n\t}\nprivate:\n\tstatic const double mysqrt(const double &x) {\n\t\tdouble h = 0.5*x;\n\t\tstd::uint_fast64_t t = 0x5FE6EB50C7B537AAl\n\t\t\t- (*(std::uint_fast64_t*)&x >> 1);\n\t\tdouble r = *(double*)&t;\n\t\tr *= 1.5 - h*r*r;r *= 1.5 - h*r*r;\n\t\tr *= 1.5 - h*r*r;r *= 1.5 - h*r*r;\n\t\treturn r*x;\n\t}\n};\n\nint main(void) {\n\t//std::ios::sync_with_stdio(false);\n\t//std::cin.tie(0);\n\tpvec o, d;\n\tstd::cin >> o >> d;\n\td = (d - o).dir();\n\tuint32 q;\n\tstd::cin >> q;\n\tpvec p;\n\twhile (q--) {\n\t\tstd::cin >> p;\n\t\tp -= o;\n\t\tp = d*pvec::dot(p, d);\n\t\tp += o;\n\t\tprintf(\"%6.10f %6.10f\", p.x, p.y);\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <deque>\n#include <exception>\n#include <fstream>\n#include <functional>\n#include <iomanip>\n#include <ios>\n#include <iosfwd>\n#include <iostream>\n#include <istream>\n#include <iterator>\n#include <limits>\n#include <list>\n#include <locale>\n#include <map>\n#include <memory>\n#include <new>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <stdexcept>\n#include <streambuf>\n#include <string>\n#include <typeinfo>\n#include <utility>\n#include <valarray>\n#include <vector>\n#include <climits>\n#include <cstring>\n\n#define rep(i, m, n) for(int i=int(m);i<int(n);i++)\n#define all(c) begin(c),end(c)\n\ntemplate<typename T1, typename T2>\ninline void chmin(T1 &a, T2 b) { if (a > b) a = b; }\n\ntemplate<typename T1, typename T2>\ninline void chmax(T1 &a, T2 b) { if (a < b) a = b; }\n\ntypedef long long int ll;\nusing ll = long long int;\nusing ull = long long unsigned int;\nusing Int = long long int;\nusing namespace std;\n#define INF (1 << 30) - 1\n#define INFl (ll)5e15\n#define DEBUG 0\n#define dump(x)  cerr << #x << \" = \" << (x) << endl\n#define MOD 1000000007\n\n\n//edit\n\n\nnamespace Geometory {\n    const double EPS = 1e-10;\n\n    inline bool equals(double a, double b) {\n        return fabs(a - b) < EPS;\n    }\n\n    struct Point {\n        double x, y;\n\n        Point(double x = 0.0, double y = 0.0) : x(x), y(y) {}\n\n        Point operator+(const Point &p) {\n            return Point(x + p.x, y + p.y);\n        }\n\n        Point operator-(const Point &p) {\n            return Point(x - p.x, y - p.y);\n        }\n\n        Point operator*(const double k) {\n            return Point(x * k, y * k);\n        }\n\n        double norm() const {\n            return x * x + y * y;\n        }\n\n        double abs() const {\n            return sqrt(norm());\n        }\n\n        double dot(Point p) {\n            return x * p.x + y * p.y;\n        }\n\n        double cross(Point p) {\n            return x * p.y - y * p.x;\n        }\n\n        bool operator<(const Point &p) const {\n            return x != p.x ? x < p.x : y < p.y;\n        }\n\n        bool operator==(const Point &p) const {\n            return equals(x, p.x) && equals(y, p.y);\n//            return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n        }\n\n\n    };\n\n    using Vector = Point;\n\n    struct Segment {\n        Point p1, p2;\n\n        Segment(Point p1, Point p2) : p1(p1), p2(p2) {}\n\n        Segment(double x1, double y1, double x2, double y2) : p1(x1, y1), p2(x2, y2) {}\n    };\n\n    using Line = Segment;\n\n\n    double norm(Vector p) {\n        return p.x * p.x + p.y * p.y;\n    }\n\n    double abs(Vector a) {\n        return sqrt(norm(a));\n    }\n\n    double dot(Vector a, Vector b) {\n        return a.dot(b);\n    }\n\n    double cross(Vector a, Vector b) {\n        return a.cross(b);\n    }\n\n    //直行判定\n    bool is_orthogonal(Vector a, Vector b) {\n        return equals(dot(a, b), 0.0);\n    }\n\n    bool is_orthogonal(Point a1, Point a2, Point b1, Point b2) {\n        return is_orthogonal(a1 - a2, b1 - b2);\n    }\n\n    bool is_orthogonal(Segment s1, Segment s2) {\n        return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n    }\n\n    //平行判定\n    bool is_parallel(Vector a, Vector b) {\n        return equals(cross(a, b), 0.0);\n    }\n\n    bool is_parallel(Point a1, Point a2, Point b1, Point b2) {\n        return is_parallel(a1 - a2, b1 - b2);\n    }\n\n    bool is_parallel(Segment s1, Segment s2) {\n        return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n    }\n\n    //射影を求める\n    //pからsに垂直に線を引いたときの座標を返す\n    Point project(Segment s, Point p) {\n        Vector base = s.p2 - s.p1;\n        double r = dot(p - s.p1, base) / norm(base);\n        return s.p1 + base * r;\n    }\n\n\n    struct Circle {\n        Point c;\n        double r;\n\n        Circle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n    };\n\n    using Polygon = vector<Point>;\n\n    std::ostream &operator<<(std::ostream &os, const Point &p) {\n//        os << \"(\" << p.x << \", \" << p.y << \")\";\n        os << \"\" << p.x << \" \" << p.y << \"\";\n        return os;\n    }\n\n};\n\nusing namespace Geometory;\n\n\nclass Solve {\npublic:\n    void solve() {\n        Int x1, y1, x2, y2;\n        cin >> x1 >> y1 >> x2 >> y2;\n        Segment s(x1, y1, x2, y2);\n        Int q;\n        cin >> q;\n        while (q--) {\n            Int x, y;\n            cin >> x >> y;\n            Point p(x, y);\n            Point q = project(s, p);\n            cout << q << endl;\n        }\n\n\n    }\n\n};\n\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(10);\n\n    Solve().solve();\n\n\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define FOR(I,A,B) for(ll I = (A); I < (B); ++I)\n#define POSL(x,v) (lower_bound(x.begin(),x.end(),v)-x.begin()) //ai>=v  x is sorted\n#define POSU(x,v) (upper_bound(x.begin(),x.end(),v)-x.begin()) //ai>v  x is sorted\n#define NUM(x,v) (POSU(x,v)-POSL(x,v))  //x is sorted\n#define SORT(x) (sort(x.begin(),x.end())) // 0 2 2 3 4 5 8 9\n#define REV(x) (reverse(x.begin(),x.end())) //reverse\n#define TO(x,t,f) ((x)?(t):(f))\n#define CLR(mat) memset(mat, 0, sizeof(mat))\n#define FILV(x,a) fill(x.begin(),x.end(),a)\n#define FILA(ar,N,a) fill(ar,ar+N,a)\n#define NEXTP(x) next_permutation(x.begin(),x.end())\nll gcd(ll a,ll b){if(a<b)swap(a,b);if(a%b==0)return b;else return gcd(b,a%b);}\nll lcm(ll a,ll b){ll c=gcd(a,b);return ((a/c)*(b/c)*c);}//saisyo kobaisu\n#define pb push_back\n#define pri(aa) cout<<(aa)<<endl\nconst ll INF=1e9+7;\nconst ll N = 200002;\n\n\n#define x first\n#define y second\n\ndouble naiseki(pair<double,double> a,pair<double,double> b){\n\treturn (a.x*b.x+a.y*b.y);\n}\n\ndouble nijo(pair<double,double> a){\n\treturn naiseki(a,a);\n}\n\n\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tpair<double,double> p1,p2,p,a,b,c;\n\tll q;\n\tcin>>p1.x>>p1.y>>p2.x>>p2.y;\n\tcin>>q;\n\tFOR(tt,0,q){\n\t\tcin>>p.x>>p.y;\n\t\ta.x=p2.x-p1.x;\n\t\ta.y=p2.y-p1.y;\n\t\tb.x=p.x-p1.x;\n\t\tb.y=p.y-p1.y;\n\t\tc.x=(naiseki(a,b)/nijo(a))*a.x;\n\t\tc.y=(naiseki(a,b)/nijo(a))*a.y;\n\t\tcout<<p1.x+c.x<<\" \"<<p1.y+c.y<<endl;\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <type_traits>\n#include <cmath>\nusing namespace std;\nusing ld = long double;\n\ntemplate<typename T>\nstruct Vec2 {\n    T x, y;\n\n    static_assert(std::is_floating_point<T>::value, \"Vector2 need floating point\");\n\n    Vec2() = default;\n\n    constexpr Vec2(T in_x, T in_y)\n        : x(in_x), y(in_y) {};\n\n    constexpr Vec2(const Vec2&) = default;\n    constexpr Vec2& operator =(const Vec2&) = default;\n\n    constexpr Vec2(Vec2&&) = default;\n    constexpr Vec2& operator =(Vec2&&) = default;\n\n    T magnitude() const {\n        return std::sqrt(sqrMagnitude());\n    }\n\n    constexpr T sqrMagnitude() const {\n        return Dot(*this, *this);\n    }\n\n    constexpr Vec2 normalized() const {\n        return *this / magnitude();\n    }\n\n    constexpr bool isZero() const {\n        return x == 0.0 && y = 0.0;\n    }\n\n\n    constexpr Vec2 operator -() const {\n        return {-x, -y};\n    }\n\n    constexpr Vec2 operator +(const Vec2& other) const {\n        return {x + other.x, y + other.y};\n    }\n\n    constexpr Vec2 operator -(const Vec2& other) const {\n        return {x - other.x, y - other.y};\n    }\n\n    template <typename U>\n    constexpr Vec2 operator *(const U s) const {\n        return {x * s, y * s};\n    }\n\n    template <typename U>\n    constexpr Vec2 operator /(const U s) const {\n        return {x / s, y / s};\n    }\n\n\n    Vec2& operator +=(const Vec2& other) {\n        x += other.x;\n        y += other.y;\n        return *this;\n    }\n\n    Vec2& operator -=(const Vec2& other) {\n        x -= other.x;\n        y -= other.y;\n        return *this;\n    }\n\n\n    template <typename U>\n    Vec2& operator *=(const U s) {\n        x *= s;\n        y *= s;\n        return *this;\n    }\n\n    template <typename U>\n    Vec2& operator /=(const U s) {\n        x /= s;\n        y /= s;\n        return *this;\n    }\n\n};\n\n\n\ntemplate <typename T, typename U>\ninline constexpr auto Dot(const Vec2<T>& t, const Vec2<U>& u) {\n    return t.x * u.x + t.y * u.y;\n}\n\ntemplate <typename T, typename U>\ninline constexpr auto Cross(const Vec2<T>& t, const Vec2<U> u) {\n    return t.x * u.y - t.y * u.x;\n}\n\n\ntemplate <typename T>\nistream& operator >>(istream& is, Vec2<T>& v) {\n    is >> v.x >> v.y;\n    return is;\n}\n\ntemplate <typename T>\nostream& operator << (ostream& os, const Vec2<T>& v) {\n    os << v.x << \" \" << v.y;\n    return os;\n}\n\n    int main() {\n        Vec2<double> p1 {}, p2 {};\n\n        cin >> p1 >> p2;\n        int n;\n        cin >> n;\n\n        cout.precision(10);\n\n        for(int i = 0; i < n; ++i) {\n            Vec2<double> q;\n            cin >> q;\n\n            Vec2<double> p1_2 {(p2 - p1).normalized()};\n\n            cout << fixed << p1_2 * Dot(q - p1, p1_2) << endl;\n        }\n\n        return 0;\n    }"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n\n#include <cmath>\n#define EPS (1e-10)\n#define equals(a, b) (fabs((a) - (b)) < EPS)\n\nusing namespace std;\n\nclass Point {\npublic:\n\tdouble x, y;\n\tPoint(double x = 0, double y = 0) : x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(a*x, a*y); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tdouble norm() { return x*x + y*y; }\n\tdouble abs() { return sqrt(norm()); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n\ntypedef Point Vector;\n\nstruct Segment {\n\tPoint p1, p2;\n};\n\ntypedef Segment Line;\n\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle(Point c = Point(), double r = 0.0) : c(c), r(r) {}\n};\n\n\ndouble dot(Vector a, Vector b) {\n\treturn a.x*b.x + a.y*b.y;\n}\n\ndouble cross(Vector a, Vector b) {\n\treturn a.x*b.y - a.y*b.x;\n}\n\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\n\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn isOrthogonal(a1 - a2, b1 - b2);\n}\n\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn isOrthogonal(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\n\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn isParallel(a1 - a2, b1 - b2);\n}\n\nbool isParallel(Segment s1, Segment s2) {\n\treturn isParallel(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\nPoint project(Segment s, Point p) {\n\tdouble alpha = dot(p - s.p2, s.p1 - s.p2) / (s.p1 - s.p2).norm();\n\treturn s.p2 + (s.p1 - s.p2)*alpha;\n}\n\nint main() {\n\tLine l;\n\tcin >> l.p1.x >> l.p1.y >> l.p2.x >> l.p2.y;\n\tint q;\n\tcin >> q;\n\tPoint p;\n\tfor (int i = 0; i < q; i++) {\n\t\tcin >> p.x >> p.y;\n\t\tPoint x = project(l, p);\n\t\tcout << x.x << \" \" << x.y << endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SBCURE_NO_DEPRECATE\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nconst int maxn = 110;\nconst int INF = 0x7fffffff;\n\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\nint cmp(Point A, Point B)                     //竖直排序  \n{\n\treturn (A.y<B.y || (A.y == B.y&&A.x<B.x));\n}\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\n\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) >= 0; j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) >= 0; j--) {\n\t\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\n\n\n\nint main(){\n\tcout.precision(10);\n\tSegment s;\n\tPoint p;\n\tint x1,x2,y1,y2,q;\n\tcin>>x1>>y1>>x2>>y2;\n\ts.p1.x=x1;s.p1.y=y1;\n\ts.p2.x=x2;s.p2.y=y2;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x1>>y1;\n\t\tp.x=x1;p.y=y1;\n\t\tcout<<project(s, p).x<<\" \"<<project(s, p).y<<endl;\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nconst double eps = 1e-9;\ninline bool equals(double a, double b) { return fabs(a - b) < eps ;}\n\nclass Point {\npublic:\n    double x, y;\n\n    Point(double x = 0, double y = 0): x(x), y(y) {};\n\n    Point operator + (Point p) { return Point(x + p.x, y + p.y); }\n    Point operator - (Point p) { return Point(x - p.x, y - p.y); }\n    Point operator * (double a) { return Point(a * x, a * y); }\n    Point operator / (double a) { return Point(x / a, y / a); }\n\n    double abs() { return sqrt(norm()); }\n    double norm() { return x * x + y * y; }\n\n    bool operator < (const Point &p) const {\n        return x != p.x ? x < p.x : y < p.y;\n    }\n\n    bool operator == (const Point &p) const {\n        return fabs(x - p.x) < eps && fabs(y - p.y) < eps;\n    }\n};\ntypedef Point Vector;\n\ndouble dot(const Vector& a, const Vector& b) {\n    return a.x * b.x + a.y * b.y;\n}\n\nstruct Segment {Point p1, p2;};\n\nPoint project(Segment s, Point p) {\n    Vector base = s.p2 - s.p1;\n    double r = dot(p - s.p1, base) / base.norm();\n    return s.p1 + base * r;\n}\n\nint main(void) {\n    double x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    Segment s = {Point(x1, y1), Point(x2, y2)};\n    int q;\n    cin >> q;\n    while (q--) {\n        double x, y;\n        cin >> x >> y;\n        Point ans = project(s, Point(x, y));\n        printf(\"%.10f %.10f\\n\", ans.x, ans.y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SBCURE_NO_DEPRECATE\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <string>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nconst int maxn = 110;\nconst int INF = 0x7fffffff;\n\n#define EPS  (1e-10)\n#define equals(a,b) (fabs((a) - (b)) < EPS)\n\n// 点类\nclass Point {\npublic :\n\tdouble x, y;\n\tPoint() {};\n\tPoint(double x, double y) :x(x), y(y) {}\n\n\tPoint operator + (Point p) { return Point(x + p.x, y + p.y); }\n\tPoint operator - (Point p) { return Point(x - p.x, y - p.y); }\n\tPoint operator * (double a) { return Point(x * a, y * a); }\n\tPoint operator / (double a) { return Point(x / a, y / a); }\n\n\tbool operator < (const Point &p) const {\n\t\treturn x != p.x ? x < p.x : y < p.y;\n\t}\n\n\tbool operator == (const Point &p) const {\n\t\treturn fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;\n\t}\n};\n// 线段类\nclass Segment {\npublic:\n\tPoint p1, p2;\n\tSegment() {};\n\tSegment(Point p1, Point p2) :p1(p1), p2(p2) {};\n};\n// 圆类\nclass Circle {\npublic:\n\tPoint c;\n\tdouble r;\n\tCircle() {};\n\tCircle(Point c, double r) :c(c), r(r) {}\n};\n// 定义向量\ntypedef Point Vector;\n// 定义直线\ntypedef Segment Line;\n// 定义多边形\ntypedef vector<Point> Polygon;\n\n/***************************点、向量****************************/\n\ndouble norm(Point p) { return p.x * p.x + p.y * p.y; }\ndouble abs(Point p) { return sqrt(norm(p)); }\n\n// 向量的内积\ndouble dot(Point a, Point b) {\n\treturn a.x * b.x + a.y * b.y;\n}\n// 向量的外积\ndouble cross(Point a, Point b) {\n\treturn a.x * b.y - a.y * b.x;\n}\n\n// 向量a，b是否正交 <==> 内积为0\nbool isOrthogonal(Vector a, Vector b) {\n\treturn equals(dot(a, b), 0.0);\n}\nbool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(dot(a1 - a2, b1 - b2), 0.0);\n}\n\n// 向量a，b是否平行 <==> 外积为0\nbool isParallel(Vector a, Vector b) {\n\treturn equals(cross(a, b), 0.0);\n}\nbool isParallel(Point a1, Point a2, Point b1, Point b2) {\n\treturn equals(cross(a1 - a2, b1 - b2), 0.0);\n}\n\n// 点p在线段s上的投影\nPoint project(Segment s, Point p) {\n\tVector base = s.p2 - s.p1;\n\tdouble r = dot(p - s.p1, base) / norm(base);\n\treturn s.p1 + base * r ;\n}\n\n//以线段s为对称轴与点p成线对称的点\nPoint reflect(Segment s, Point p) {\n\treturn p + (project(s, p) - p) * 2.0;\n}\n\n// 点a到点b的距离\ndouble getDistance(Point a, Point b) {\n\treturn abs(a - b);\n}\n\n// 线段l和点p的距离\ndouble getDistanceLP(Line l, Point p) {\n\treturn abs( cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1) );\n}\n\n// 线段s与点p的距离\ndouble getDistanceSP(Segment s, Point p) {\n\tif (dot(s.p2 - s.p1, p - s.p1) < 0.0)\n\t\treturn abs(p - s.p1);\n\tif (dot(s.p1 - s.p2, p - s.p2) < 0.0)\n\t\treturn abs(p - s.p2);\n\treturn getDistanceLP(s, p);\n}\n\n\n\n/*************************线段********************************/\n// 线段s1，s2是否正交 <==> 内积为0\nbool isOrthogonal(Segment s1, Segment s2) {\n\treturn equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 线段s1，s2是否平行 <==> 外积为0\nbool isParallel(Segment s1, Segment s2) {\n\treturn equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n}\n\n// 逆时针方向ccw（Counter-Clockwise）\nstatic const int COUNTER_CLOCKWISE = 1;\nstatic const int CLOCKWISE = -1;\nstatic const int ONLINE_BACK = 2;\nstatic const int ONLINE_FRONT = -2;\nstatic const int ON_SEGMENT = 0;\n\nint ccw(Point p0, Point p1, Point p2) {\n\tVector a = p1 - p0;\n\tVector b = p2 - p0;\n\tif (cross(a, b) > EPS) return COUNTER_CLOCKWISE;\n\tif (cross(a, b) < -EPS) return CLOCKWISE;\n\tif (dot(a, b) < -EPS) return ONLINE_BACK;\n\tif (norm(a) < norm(b)) return ONLINE_FRONT;\n\treturn ON_SEGMENT;\n}\n\n// 判断线段p1p2和线段p3p4是否相交\nbool intersect(Point p1, Point p2, Point p3, Point p4) {\n\treturn (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&\n\t\tccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);\n}\n\n//判断线段s1和s2是否相交\nbool intersect(Segment s1, Segment s2) {\n\treturn intersect(s1.p1, s1.p2, s2.p1, s2.p2);\n}\n\n// 线段s1和线段s2的距离\ndouble getDistance(Segment s1, Segment s2) {\n\t// 相交\n\tif (intersect(s1, s2))\n\t\treturn 0.0;\n\treturn min(min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),\n\t\tmin(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2)));\n}\n\n// 线段s1与线段s2的交点\nPoint getCrossPoint(Segment s1, Segment s2) {\n\tVector base = s2.p2 - s2.p1;\n\tdouble d1 = abs(cross(base, s1.p1 - s2.p1));\n\tdouble d2 = abs(cross(base, s1.p2 - s2.p1));\n\tdouble t = d1 / (d1 + d2);\n\treturn s1.p1 + (s1.p2 - s1.p1) * t;\n}\n\n/***************************圆****************************/\n\n// 圆c和直线l的交点\npair<Point, Point> getCrossPoints(Circle c, Line l) {\n\tVector pr = project(l, c.c);\n\tVector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);\n\tdouble base = sqrt(c.r * c.r - norm(pr - c.c));\n\treturn make_pair(pr + e * base, pr - e * base);\n}\n\n// 圆c1和圆c2的交点\ndouble arg(Vector p) { return atan2(p.y, p.x); }\nVector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }\n\npair<Point, Point> getCrossPoints(Circle c1, Circle c2) {\n\tdouble d = abs(c1.c - c2.c);\n\tdouble a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));\n\tdouble t = arg(c2.c - c1.c);\n\treturn make_pair(c1.c + polar(c1.r, t + a), c1.c + polar(c1.r, t - a));\n}\n\n/***************************多边形****************************/\n// 点的内包\n/*\n\tIN 2\n\tON 1\n\tOUT 0\n*/\nint contains(Polygon g, Point p) {\n\tint n = g.size();\n\tbool x = false;\n\tfor (int i = 0; i < n; i++) {\n\t\tPoint a = g[i] - p, b = g[(i + 1) % n] - p;\n\t\tif (abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;\n\t\tif (a.y > b.y) swap(a, b);\n\t\tif (a.y < EPS && EPS < b.y && cross(a, b) > EPS)\n\t\t\tx = !x;\n\t}\n\treturn (x ? 2 : 0);\n}\nint cmp(Point A, Point B)                     //竖直排序  \n{\n\treturn (A.y<B.y || (A.y == B.y&&A.x<B.x));\n}\n// 凸包\nPolygon andrewScan(Polygon s) {\n\tPolygon u, l;\n\tint len = s.size();\n\tif (len < 3) return s;\n\n\n\t// 以x，y为基准升序排序\n\tsort(s.begin(), s.end());\n\t// 将x值最小的两个点添加到u\n\tu.push_back(s[0]);\n\tu.push_back(s[1]);\n\n\t// 将x值最大的两个点添加到l\n\tl.push_back(s[len - 1]);\n\tl.push_back(s[len - 2]);\n\n\t// 构建凸包上部\n\tfor (int i = 2; i < len; i++) {\n\t\tfor (int j = u.size(); j >= 2 && ccw(u[j - 2], u[j - 1], s[i]) >= 0; j--) {\n\t\t\tu.pop_back();\n\t\t}\n\t\tu.push_back(s[i]);\n\t}\n\t// 构建凸包下部\n\tfor (int i = len - 3; i >= 0; i--) {\n\t\tfor (int j = l.size(); j >= 2 && ccw(l[j - 2], l[j - 1], s[i]) >= 0; j--) {\n\t\t\t\tl.pop_back();\n\t\t}\n\t\tl.push_back(s[i]);\n\t}\n\n\treverse(l.begin(), l.end());\n\tfor (int i = u.size() - 2; i >= 1; i--)\n\t\tl.push_back(u[i]);\n\n\treturn l;\n}\n\n\n\n\n\nint main(){\n\tSegment s;\n\tPoint p;\n\tint x1,x2,y1,y2,q;\n\tcin>>x1>>y1>>x2>>y2;\n\ts.p1.x=x1;s.p1.y=y1;\n\ts.p2.x=x2;s.p2.y=y2;\n\tcin>>q;\n\twhile(q--){\n\t\tcin>>x1>>y1;\n\t\tp.x=x1;p.y=y1;\n\t\tPoint ans=project(s, p);\n\t\tcout.precision(10);\n\t\tcout<<ans.x<<\" \"<<ans.y<<endl;\t\t\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "Haskell",
    "code": "import Control.Applicative\nimport Control.Monad\n\ndata Vector2 = V Double Double deriving Show\n\nmain = do\n  [x1,y1,x2,y2] <- map read.words<$>getLine\n  q <- readLn\n  replicateM_ q (solve (V x1 y1) (V x2 y2))\n\nsolve :: Vector2 -> Vector2 -> IO ()\nsolve p1 p2 = do\n  [x,y] <- map read.words<$>getLine\n  let vecp = add (V x y) (negV p1)\n      vecb = add p2 (negV p1)\n      inner = dot vecp vecb :: Double\n      size  = norm vecb :: Double\n  showPoint $ scalar (inner/size) $ scalar (1/size) vecb\n\nshowPoint :: Vector2 -> IO ()\nshowPoint (V x y) = print $ show x ++ \" \" ++ show y\n\nadd :: Vector2 -> Vector2 -> Vector2\nadd (V x1 y1) (V x2 y2) = V (x1+x2) (y1+y2)\n\nnegV :: Vector2 -> Vector2\nnegV (V x y) = V (negate x) (negate y)\n\ndot :: Vector2 -> Vector2 -> Double\ndot (V x1 y1) (V x2 y2) = x1*x2 + y1*y2\n\nscalar :: Double -> Vector2 -> Vector2\nscalar a (V x y) = V (a*x) (a*y)\n\nnorm :: Vector2 -> Double\nnorm (V x y) = sqrt $ x^2 + y^2"
  },
  {
    "language": "Haskell",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n---------------------------------------------------\n-- alithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = show x ++ \" \" ++  show y\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in putStrLn . init . unlines $ map proj plist\n\n"
  },
  {
    "language": "Haskell",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n---------------------------------------------------\n-- alithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = show x ++ \" \" ++  show y\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in putStrLn . init . unlines $ map proj plist\n\n"
  },
  {
    "language": "Haskell",
    "code": "import Control.Applicative\nimport Control.Monad\n\ndata Vector2 = V Double Double deriving Show\n\nmain = do\n  [x1,y1,x2,y2] <- map read.words<$>getLine\n  q <- readLn\n  replicateM_ q (solve (V x1 y1) (V x2 y2))\n\nsolve :: Vector2 -> Vector2 -> IO ()\nsolve p1 p2 = do\n  [x,y] <- map read.words<$>getLine\n  let vecp = add (V x y) (negV p1)\n      vecb = add p2 (negV p1)\n      inner = dot vecp vecb :: Double\n      size  = norm vecb :: Double\n  showPoint $ add p1 $ scalar (inner/size) $ scalar (1/size) vecb\n\nshowPoint :: Vector2 -> IO ()\nshowPoint (V x y) = putStrLn $ show x ++ \" \" ++ show y\n\nadd :: Vector2 -> Vector2 -> Vector2\nadd (V x1 y1) (V x2 y2) = V (x1+x2) (y1+y2)\n\nnegV :: Vector2 -> Vector2\nnegV (V x y) = V (negate x) (negate y)\n\ndot :: Vector2 -> Vector2 -> Double\ndot (V x1 y1) (V x2 y2) = x1*x2 + y1*y2\n\nscalar :: Double -> Vector2 -> Vector2\nscalar a (V x y) = V (a*x) (a*y)\n\nnorm :: Vector2 -> Double\nnorm (V x y) = sqrt $ x^2 + y^2"
  },
  {
    "language": "Haskell",
    "code": "import Control.Monad\nimport Data.Matrix\n\ntype Vector a = Matrix a\n\nvector :: [a] -> Vector a\nvector xs = fromList n 1 xs\n    where n = length xs\n\ndot :: Num a => Vector a -> Vector a -> a\ndot a b = sum $ transpose a * b\n\nnorm :: Num a => Vector a -> a\nnorm = sum.fmap (^2)\n\nmain = do\n    [x1,y1,x2,y2] <- map read.words<$>getLine :: IO [Double]\n    let v1 = vector [x1,y1]\n        v2 = vector [x2,y2]\n    q <- readLn\n    ps <- replicateM q (vector.map read.words<$>getLine)\n    mapM_ (putStrLn.unwords.map show.toList.solve v1 v2) ps\n\nsolve :: Vector Double -> Vector Double -> Vector Double -> Vector Double\nsolve v1 v2 vp = scaleMatrix scale v12\n    where scale = dot v1p v12 / norm v12\n          v12 = v2 - v1\n          v1p = vp - v1"
  },
  {
    "language": "Haskell",
    "code": "import           Control.Applicative\nimport           Control.Monad\nimport qualified Data.ByteString.Char8 as B\n\nreadi :: B.ByteString -> Int\nreadi b | Just (n, _) <- B.readInt b = n\n\nnewtype Point a =\n    Point (a, a)\n    deriving (Eq, Show)\n\nadd :: Num a => Point a -> Point a -> Point a\nadd (Point (x1, y1)) (Point (x2, y2)) = Point (x1 + x2, y1 + y2)\n\nsub :: Num a => Point a -> Point a -> Point a\nsub (Point (x1, y1)) (Point (x2, y2)) = Point (x1 - x2, y1 - y2)\n\nmult :: Num a => Point a -> a -> Point a\nmult (Point (x1, y1)) k = Point (k * x1, k * y1)\n\ndot :: Num a => Point a -> Point a -> a\ndot (Point (x1, y1)) (Point (x2, y2)) = x1 * x2 + y1 * y2\n\nnorm :: Floating a => Point a -> a\nnorm (Point (x1, y1)) = x1 ** 2 + y1 ** 2\n\nproject :: Floating a => Point a -> Point a -> Point a -> Point a\nproject p1 p2 p = p1 `add` (base `mult` r)\n  where\n    base = p2 `sub` p1\n    r = dot (p `sub` p1) base / norm base\n\nsolve :: [Int] -> [[Int]] -> IO ()\nsolve [x1, y1, x2, y2] qss = do\n    let p1 = Point (fromIntegral x1, fromIntegral y1)\n    let p2 = Point (fromIntegral x2, fromIntegral y2)\n    forM_ qss $ \\[px, py] -> do\n        let p = Point (fromIntegral px, fromIntegral py) :: Point Double\n        case project p1 p2 p of\n            Point (s, t) -> putStrLn . unwords $ fmap show [s, t]\n\nmain :: IO ()\nmain = do\n    s <- fmap readi . B.words <$> B.getLine\n    q <- readLn\n    qs <- fmap (fmap readi . B.words) <$> replicateM q B.getLine\n    solve s qs\n\n"
  },
  {
    "language": "Haskell",
    "code": "import Text.Printf\n\ninner_product (ax,ay) (bx,by) = ax * bx + ay * by\nvabs (ax,ay) = sqrt (ax*ax+ay*ay)\nvmul a (ax,ay) = (a*ax,a*ay)\n\nans ax ay bx by px py =\n  let v1 = (bx-ax,by-ay)\n      v2 = (px-ax,py-ay)\n      ip = inner_product v1 v2\n  in\n    (ip / (vabs v1)**2) `vmul` v1\n    \nmain = do\n  l0 <- getLine\n  getLine\n  q0 <- getContents\n  let xy@(ax:ay:bx:by:_) = map read $ words l0 :: [Float]\n      qs = map (map read) $ map words $ lines q0 :: [[Float]]\n      o = map (\\ (px:py:_) -> ans ax ay bx by px py) qs\n  mapM_ (\\(x,y) -> printf \"%.f %.f\\n\" x y) o\n  "
  },
  {
    "language": "Haskell",
    "code": "import Control.Applicative\ntype Vector a = (a, a)\nadd :: (Floating a) => Vector a -> Vector a -> Vector a\nadd (vx,vy) (wx,wy) = (vx+wx,vy+wy)\n\nneg :: (Floating a) => Vector a -> Vector a\nneg (x,y) = (-x,-y)\n\ndotprod :: (Floating a) => Vector a -> Vector a -> a\ndotprod (vx,vy) (wx,wy) = vx*wx + vy*wy\n\nsprod :: (Floating a) => a -> Vector a -> Vector a\nsprod c (x,y) = (c*x, c*y)\n\nnorm :: (Floating a) => Vector a -> a\nnorm (x,y) = x**2 + y**2\n\npshow :: (Show a) => Vector a -> String\npshow (x,y) = show x ++ ' ':show y\n\nv = (1,2) :: Vector Float\nw = (3,0) :: Vector Float\n\nmain = do\n    [ax,ay,bx,by] <- map read . words <$> getLine :: IO [Float]\n    let (a,b) = ((ax,ay),(bx,by)) :: (Vector Float, Vector Float)\n    q <- read <$> getLine :: IO Int\n    points <- sequence (take q (repeat ((\\[x,y] -> (x,y)) . map read . words <$> getLine))) :: IO [Vector Float]\n    mapM (putStrLn . pshow) $ solve a b points\n\nsolve :: (Floating a) => Vector a -> Vector a -> [Vector a] -> [Vector a]\nsolve va vb = map (intersection va vb)\n\nintersection :: (Floating a) => Vector a -> Vector a -> Vector a -> Vector a\nintersection a b p = a `add` (sprod coeff b_a)\n    where b_a = add b (neg a)\n          p_a = add p (neg a)\n          coeff = dotprod b_a p_a / norm b_a\n\n"
  },
  {
    "language": "Haskell",
    "code": "import           Control.Applicative\nimport           Control.Monad\nimport qualified Data.ByteString.Char8 as B\nimport           Text.Printf\n\nreadi :: B.ByteString -> Int\nreadi b | Just (n, _) <- B.readInt b = n\n\ntype Vector = (Double, Double)\n\nadd :: Vector -> Vector -> Vector\nadd (a, b) (c, d) = (a + c, b + d)\n\nmult :: Vector -> Double -> Vector\nmult (a, b) k = (k * a, k * b)\n\ndot :: Vector -> Vector -> Double\ndot (a, b) (c, d) = a * c + b * d\n\nnorm :: Vector -> Double\nnorm (a, b) = a * a + b * b\n\nproject :: Vector -> Vector -> Vector -> Vector\nproject (a, b) (c, d) (e, f) = (a, b) `add` (base `mult` r)\n  where\n    base = (c - a, d - b)\n    hypo = (e - a, f - b)\n    r = (hypo `dot` base) / norm base\n\nmain :: IO ()\nmain = do\n    [a,b,c,d] <- fmap (fromIntegral . readi) . B.words <$> B.getLine\n    q <- readLn\n    let p1 = (a, b)\n    let p2 = (c, d)\n    replicateM_ q $ do\n        [x, y] <- fmap (fromIntegral . readi) . B.words <$> B.getLine\n        let (ax, ay) = project p1 p2 (x, y)\n        printf \"%.8f %.8f\\n\" ax ay\n\n"
  },
  {
    "language": "Haskell",
    "code": "import Control.Applicative ((<$>))\nimport Control.Monad\nimport Data.Complex\nimport Text.Printf\n\ntype Vector = Complex Double\n\ndot :: Vector -> Vector -> Double\ndot a b = realPart $ conjugate a * b\n\nnormalize :: Vector -> Vector\nnormalize = signum\n\nreadWords :: Read a => IO [a]\nreadWords = map read . words <$> getLine\n\nmain :: IO ()\nmain = do\n  [x1,y1,x2,y2] <- readWords :: IO [Double]\n  let\n    p1 = x1:+y1\n    p2 = x2:+y2\n    d = normalize (p2-p1)\n\n  q <- readLn\n\n  ps <- replicateM q $ do\n    [x,y] <- readWords :: IO [Double]\n    return $ x:+y\n\n  forM_ ps $ \\p -> do\n    let x:+y = p1+((p-p1)`dot`d:+0)*d\n    printf \"%.10f %.10f\\n\" x y"
  },
  {
    "language": "Haskell",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\nimport Numeric -- for showFFloat func. \n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n------------------------------------------------------------------\n-- represent the RealFloat result with 'numOfDecimal' decimals. --\n------------------------------------------------------------------\n\nformatFloatN :: (RealFloat a) => a -> Int -> String\nformatFloatN floatNum numOfDecimals = showFFloat (Just numOfDecimals) floatNum \"\"\n\n---------------------------------------------------\n-- arithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = (formatFloatN x 8) ++ \" \" ++ (formatFloatN y 8)\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in\n    putStrLn . init . unlines $ map proj plist\n"
  },
  {
    "language": "Haskell",
    "code": "import           Control.Applicative\nimport           Control.Monad\nimport qualified Data.ByteString.Char8 as B\n\nreadi :: B.ByteString -> Int\nreadi b | Just (n, _) <- B.readInt b = n\n\nnewtype Point a =\n    Point (a, a)\n    deriving (Eq, Show)\n\nadd :: Num a => Point a -> Point a -> Point a\nadd (Point (x1, y1)) (Point (x2, y2)) = Point (x1 + x2, y1 + y2)\n\nsub :: Num a => Point a -> Point a -> Point a\nsub (Point (x1, y1)) (Point (x2, y2)) = Point (x1 - x2, y1 - y2)\n\nmult :: Num a => Point a -> a -> Point a\nmult (Point (x1, y1)) k = Point (k * x1, k * y1)\n\ndot :: Num a => Point a -> Point a -> a\ndot (Point (x1, y1)) (Point (x2, y2)) = x1 * x2 + y1 * y2\n\nnorm :: Floating a => Point a -> a\nnorm (Point (x1, y1)) = sqrt (x1 ** 2 + y1 ** 2)\n\nproject :: Floating a => Point a -> Point a -> Point a -> Point a\nproject p1 p2 p = p1 `add` (base `mult` r)\n  where\n    base = p2 `sub` p1\n    r = dot (p `sub` p1) base / norm base ** 2\n\nsolve :: [Int] -> [[Int]] -> IO ()\nsolve [x1, y1, x2, y2] qss = do\n    let p1 = Point (fromIntegral x1, fromIntegral y1)\n    let p2 = Point (fromIntegral x2, fromIntegral y2)\n    forM_ qss $ \\[px, py] -> do\n        let p = Point (fromIntegral px, fromIntegral py) :: Point Double\n        case project p1 p2 p of\n            Point (s, t) -> putStrLn . unwords $ fmap show [s, t]\n\nmain :: IO ()\nmain = do\n    s <- fmap readi . B.words <$> B.getLine\n    q <- readLn\n    qs <- fmap (fmap readi . B.words) <$> replicateM q B.getLine\n    solve s qs\n\n"
  },
  {
    "language": "Haskell",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n---------------------------------------------------\n-- alithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = show x ++ \" \" ++  show y\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = (take 8) . vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in putStrLn . init . unlines $ map proj plist\n\n"
  },
  {
    "language": "Haskell",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\nimport Numeric \nformatFloatN floatNum numOfDecimals = showFFloat (Just numOfDecimals) floatNum \"\"\n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n---------------------------------------------------\n-- alithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = (formatFloatN x 8) ++ \" \" ++ (formatFloatN y 8)\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in putStrLn . init . unlines $ map proj plist\n"
  },
  {
    "language": "Haskell",
    "code": "import Control.Monad\n\nmain = do\n  line <- fmap (map (read :: String -> Double) . words) getLine\n  let aa = Point { x = line !! 0, y = line !! 1}\n  let bb = Point { x = line !! 2, y = line !! 3}\n  let l = Line aa bb\n  q <- readLn\n  input <- replicateM q getLine\n  let xs = (map . map) (read :: String -> Double)  $ map words input\n  let result = map (\\e -> show (x $ res l (e !! 0) (e !! 1)) ++ \" \" ++ show (y $ res l (e !! 0) (e !! 1))) xs\n  mapM_ putStrLn result\n    where res = \\l x y -> Point{x=x,y=y} `project` l\n\neps :: (Floating a) => a\neps = 1e-8\n\nadd :: (Ord a, Floating a) => a -> a -> a\nadd a b -- = a + b\n  | abs (a + b) < eps * (abs a + abs b ) = 0.0\n  | otherwise = a + b\n\nsgn :: (Ord a, Floating a) => a -> a -> Int\nsgn a b\n  | a < b - eps = -1\n  | a > b + eps = 1\n  | otherwise = 0\n\ndata Point a = Point { x :: a, y :: a } deriving (Eq)\ndata Line a = Line {a :: Point a, b :: Point a}\n\n(^+) :: (Ord a, Floating a) => Point a -> Point a -> Point a\na ^+ b =  Point (add (x a) (x b)) (add (y a) (y b))\n\n(^-) :: (Ord a, Floating a) => Point a -> Point a -> Point a\na ^- b = Point (add (x a) (-x b)) (add (y a) (-y b))\n\n(^*) :: (Floating a) => Point a -> a -> Point a\na ^* d = Point (x a * d) (y a * d)\n\ndot :: (Floating a) => Point a -> Point a -> a\na `dot` b = x a * x b + y a * y b\n\nnorm :: (Floating a) => Point a -> a\nnorm a = sqrt $ dot a a\n\nproject :: (Ord a, Floating a) => Point a -> Line a -> Point a\np `project` l = a l ^+ (base ^* t)\n  where base = b l ^- a l\n        t = ((p ^- a l) `dot` base) / (base `dot` base)"
  },
  {
    "language": "Haskell",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n---------------------------------------------------\n-- alithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = show x ++ \" \" ++  show y\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = (take 11) . vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in putStrLn . init . unlines $ map proj plist\n\n"
  },
  {
    "language": "Haskell",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n---------------------------------------------------\n-- alithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = show x ++ \" \" ++  show y\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in putStrLn . init . unlines $ map proj plist\n\n"
  },
  {
    "language": "Haskell",
    "code": "import           Control.Applicative\nimport           Control.Monad\nimport qualified Data.ByteString.Char8 as B\n\nreadi :: B.ByteString -> Int\nreadi b | Just (n, _) <- B.readInt b = n\n\nnewtype Point a =\n    Point (a, a)\n    deriving (Eq, Show)\n\nadd :: Num a => Point a -> Point a -> Point a\nadd (Point (x1, y1)) (Point (x2, y2)) = Point (x1 + x2, y1 + y2)\n\nsub :: Num a => Point a -> Point a -> Point a\nsub (Point (x1, y1)) (Point (x2, y2)) = Point (x1 - x2, y1 - y2)\n\nmult :: Num a => Point a -> a -> Point a\nmult (Point (x1, y1)) k = Point (k * x1, k * y1)\n\ndot :: Num a => Point a -> Point a -> a\ndot (Point (x1, y1)) (Point (x2, y2)) = x1 * x2 + y1 * y2\n\nnorm :: Floating a => Point a -> a\nnorm (Point (x1, y1)) = x1 * x1 + y1 * y1\n\nproject :: Floating a => Point a -> Point a -> Point a -> Point a\nproject p1 p2 p = p1 `add` (base `mult` r)\n  where\n    base = p2 `sub` p1\n    r = dot (p `sub` p1) base / norm base\n\nsolve :: [Int] -> [[Int]] -> IO ()\nsolve [x1, y1, x2, y2] qss = do\n    let p1 = Point (fromIntegral x1, fromIntegral y1)\n    let p2 = Point (fromIntegral x2, fromIntegral y2)\n    forM_ qss $ \\[px, py] -> do\n        let p = Point (fromIntegral px, fromIntegral py) :: Point Double\n        case project p1 p2 p of\n            Point (s, t) -> putStrLn . unwords $ fmap show [s, t]\n\nmain :: IO ()\nmain = do\n    s <- fmap readi . B.words <$> B.getLine\n    q <- readLn\n    qs <- fmap (fmap readi . B.words) <$> replicateM q B.getLine\n    solve s qs\n\n"
  },
  {
    "language": "Haskell",
    "code": "import Control.Monad\n\nmain = do\n  line <- fmap (map (read :: String -> Double) . words) getLine\n  let aa = Point { x = line !! 0, y = line !! 1}\n  let bb = Point { x = line !! 2, y = line !! 3}\n  let l = Line aa bb\n  q <- readLn\n  input <- replicateM q getLine\n  let xs = (map . map) (read :: String -> Double)  $ map words input\n  let result = map (\\e -> show (x $ res l (e !! 0) (e !! 1)) ++ \" \" ++ show (y $ res l (e !! 0) (e !! 1))) xs\n  mapM_ putStrLn result\n    where res = \\l x y -> Point{x=x,y=y} `project` l\n\neps :: (Floating a) => a\neps = 1e-8\n\nadd :: (Ord a, Floating a) => a -> a -> a\nadd a b = a + b\n  -- | abs (a + b) < eps * (abs a + abs b ) = 0.0\n  -- | otherwise = a `add` b\n\nsgn :: (Ord a, Floating a) => a -> a -> Int\nsgn a b\n  | a < b - eps = -1\n  | a > b + eps = 1\n  | otherwise = 0\n\ndata Point a = Point { x :: a, y :: a } deriving (Eq)\ndata Line a = Line {a :: Point a, b :: Point a}\n\n(^+) :: (Ord a, Floating a) => Point a -> Point a -> Point a\na ^+ b =  Point (add (x a) (x b)) (add (y a) (y b))\n\n(^-) :: (Ord a, Floating a) => Point a -> Point a -> Point a\na ^- b = Point (add (x a) (-x b)) (add (y a) (-y b))\n\n(^*) :: (Floating a) => Point a -> a -> Point a\na ^* d = Point (x a * d) (y a * d)\n\ndot :: (Floating a) => Point a -> Point a -> a\na `dot` b = x a * x b + y a * y b\n\nnorm :: (Floating a) => Point a -> a\nnorm a = sqrt $ dot a a\n\n{-\nproject :: (Ord a, Floating a) => Point a -> Line a -> Point a\np `project` l = a l ^+ (base ^* (((p ^- a l) `dot` base) / (base `dot` base)))\n  where base = b l ^- a l\n  -}\n\nproject :: (Ord a, Floating a) => Point a -> Line a -> Point a\np `project` l = a l ^+ (base ^* t)\n  where base = b l ^- a l\n        t = ((p ^- a l) `dot` base) / (base `dot` base)"
  },
  {
    "language": "Haskell",
    "code": "import Text.Printf\n\ninner_product (ax,ay) (bx,by) = ax * bx + ay * by\nvabs (ax,ay) = sqrt (ax*ax+ay*ay)\nvmul a (ax,ay) = (a*ax,a*ay)\nvadd (ax,ay) (bx,by) = (ax+bx,ay+by)\n\nans ax ay bx by px py =\n  let v1 = (bx-ax,by-ay)\n      v2 = (px-ax,py-ay)\n      ip = inner_product v1 v2\n  in\n    (ax,ay) `vadd` ( (ip / (vabs v1)**2) `vmul` v1 )\n    \nmain = do\n  l0 <- getLine\n  getLine\n  q0 <- getContents\n  let xy@(ax:ay:bx:by:_) = map read $ words l0 :: [Double]\n      qs = map (map read) $ map words $ lines q0 :: [[Double]]\n      o = map (\\ (px:py:_) -> ans ax ay bx by px py) qs\n  mapM_ (\\(x,y) -> printf \"%f %f\\n\" x y) o\n  "
  },
  {
    "language": "Haskell",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n---------------------------------------------------\n-- alithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = show x ++ \" \" ++  show y\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = (take 10) . vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in putStrLn . init . unlines $ map proj plist\n\n"
  },
  {
    "language": "Haskell",
    "code": "type Vector a = (a, a)\nadd :: (Floating a) => Vector a -> Vector a -> Vector a\nadd (vx,vy) (wx,wy) = (vx+wx,vy+wy)\n\nneg :: (Floating a) => Vector a -> Vector a\nneg (x,y) = (-x,-y)\n\ndotprod :: (Floating a) => Vector a -> Vector a -> a\ndotprod (vx,vy) (wx,wy) = vx*wx + vy*wy\n\nsprod :: (Floating a) => a -> Vector a -> Vector a\nsprod c (x,y) = (c*x, c*y)\n\nnorm :: (Floating a) => Vector a -> a\nnorm (x,y) = x**2 + y**2\n\npshow :: (Show a) => Vector a -> String\npshow (x,y) = show x ++ ' ':show y\n\nv = (1,2) :: Vector Float\nw = (3,0) :: Vector Float\n\nmain = do\n    [ax,ay,bx,by] <- map read . words <$> getLine :: IO [Float]\n    let (a,b) = ((ax,ay),(bx,by)) :: (Vector Float, Vector Float)\n    q <- read <$> getLine :: IO Int\n    points <- sequence (take q (repeat ((\\[x,y] -> (x,y)) . map read . words <$> getLine))) :: IO [Vector Float]\n    mapM (putStrLn . pshow) $ solve a b points\n\nsolve :: (Floating a) => Vector a -> Vector a -> [Vector a] -> [Vector a]\nsolve va vb = map (intersection va vb)\n\nintersection :: (Floating a) => Vector a -> Vector a -> Vector a -> Vector a\nintersection a b p = a `add` (sprod coeff b_a)\n    where b_a = add b (neg a)\n          p_a = add p (neg a)\n          coeff = dotprod b_a p_a / norm b_a\n\n"
  },
  {
    "language": "Haskell",
    "code": "import Control.Applicative\nimport Control.Monad\n\ndata Vector2 = V Double Double deriving Show\n\nmain = do\n  [x1,y1,x2,y2] <- map read.words<$>getLine\n  q <- readLn\n  replicateM_ q (solve (V x1 y1) (V x2 y2))\n\nsolve :: Vector2 -> Vector2 -> IO ()\nsolve p1 p2 = do\n  [x,y] <- map read.words<$>getLine\n  let vecp = add (V x y) (negV p1)\n      vecb = add p2 (negV p1)\n      inner = dot vecp vecb :: Double\n      size  = norm vecb :: Double\n  showPoint $ add (negV vecb) $ scalar (inner/size) $ scalar (1/size) vecb\n\nshowPoint :: Vector2 -> IO ()\nshowPoint (V x y) = putStrLn $ show x ++ \" \" ++ show y\n\nadd :: Vector2 -> Vector2 -> Vector2\nadd (V x1 y1) (V x2 y2) = V (x1+x2) (y1+y2)\n\nnegV :: Vector2 -> Vector2\nnegV (V x y) = V (negate x) (negate y)\n\ndot :: Vector2 -> Vector2 -> Double\ndot (V x1 y1) (V x2 y2) = x1*x2 + y1*y2\n\nscalar :: Double -> Vector2 -> Vector2\nscalar a (V x y) = V (a*x) (a*y)\n\nnorm :: Vector2 -> Double\nnorm (V x y) = sqrt $ x^2 + y^2"
  },
  {
    "language": "Haskell",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n---------------------------------------------------\n-- alithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = show x ++ \" \" ++  show y\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in putStrLn . init . unlines $ map proj plist\n\n"
  },
  {
    "language": "Haskell",
    "code": "import Control.Monad\n\nmain = do\n  line <- fmap (map (read :: String -> Double) . words) getLine\n  let aa = Point { x = line !! 0, y = line !! 1}\n  let bb = Point { x = line !! 2, y = line !! 3}\n  let l = Line aa bb\n  _ <- getLine\n  forever $ do\n    [x1,y1] <- fmap (map (read :: String -> Double) . words) getLine\n    putStrLn $ show (x $ res l x1 y1) ++ \" \" ++ show (y $ res l x1 y1)\n      where res = \\l x y -> Point{x=x,y=y} `project` l\n\neps :: (Floating a) => a\neps = 1e-8\n\nadd :: (Ord a, Floating a) => a -> a -> a\nadd a b = a + b\n  -- | abs (a + b) < eps * (abs a + abs b ) = 0.0\n  -- | otherwise = a `add` b\n\nsgn :: (Ord a, Floating a) => a -> a -> Int\nsgn a b\n  | a < b - eps = -1\n  | a > b + eps = 1\n  | otherwise = 0\n\ndata Point a = Point { x :: a, y :: a } deriving (Eq)\ndata Line a = Line {a :: Point a, b :: Point a}\n\n(^+) :: (Ord a, Floating a) => Point a -> Point a -> Point a\na ^+ b =  Point (add (x a) (x b)) (add (y a) (y b))\n\n(^-) :: (Ord a, Floating a) => Point a -> Point a -> Point a\na ^- b = Point (add (x a) (-x b)) (add (y a) (-y b))\n\n(^*) :: (Floating a) => Point a -> a -> Point a\na ^* d = Point (x a * d) (y a * d)\n\ndot :: (Floating a) => Point a -> Point a -> a\na `dot` b = x a * x b + y a * y b\n\nnorm :: (Floating a) => Point a -> a\nnorm a = sqrt $ dot a a\n\n{-\nproject :: (Ord a, Floating a) => Point a -> Line a -> Point a\np `project` l = a l ^+ (base ^* (((p ^- a l) `dot` base) / (base `dot` base)))\n  where base = b l ^- a l\n  -}\n\nproject :: (Ord a, Floating a) => Point a -> Line a -> Point a\np `project` l = a l ^+ (base ^* t)\n  where base = b l ^- a l\n        t = ((p ^- a l) `dot` base) / (base `dot` base)"
  },
  {
    "language": "Haskell",
    "code": "{-# LANGUAGE NamedFieldPuns #-}\nimport Control.Monad (replicateM_)\nimport Data.Foldable (traverse_)\nimport Data.Functor ((<$>))\nimport Numeric (showFFloat)\n\ndata Point = Point { x :: Double, y :: Double }\n\ninstance Show Point where\n  show (Point{x, y}) = sf x ++ \" \" ++ sf y\n     where\n     sf x = showFFloat Nothing x $ \"\"\n\nreadLnPoint = do\n  [x, y] <- map read . words <$> getLine\n  return $ Point {x, y}\n\ndot p1 p2 = x p1 * x p2 + y p1 * y p2\npsub p1 p2 = Point { x = x p1 - x p2, y = y p1 - y p2 }\nnorm p = sqrt $ dot p p\nscale a (Point{x, y}) = Point { x = a * x, y = a * y }\n\nprojectTo a b = scale (dot a b / dot a a) a\n\nmain = do\n  (p1, p2) <- do\n    [x1, y1, x2, y2] <- map read . words <$> getLine\n    return ( Point {x = x1, y = y1}, Point {x = x2, y = y2} )\n  q <- readLn\n  let originP1   p = Point { x = x p - x p1, y = y p - y p1 }\n      unOriginP1 p = Point { x = x p + x p1, y = y p + y p1 }\n      a = p2 `psub` p1\n  replicateM_ q $ readLnPoint >>= \\p -> let b = originP1 p in print $ unOriginP1 $ projectTo a b\n\n"
  },
  {
    "language": "Haskell",
    "code": "import Control.Applicative\ntype Vector a = (a, a)\nadd :: (Floating a) => Vector a -> Vector a -> Vector a\nadd (vx,vy) (wx,wy) = (vx+wx,vy+wy)\n\nneg :: (Floating a) => Vector a -> Vector a\nneg (x,y) = (-x,-y)\n\ndotprod :: (Floating a) => Vector a -> Vector a -> a\ndotprod (vx,vy) (wx,wy) = vx*wx + vy*wy\n\nsprod :: (Floating a) => a -> Vector a -> Vector a\nsprod c (x,y) = (c*x, c*y)\n\nnorm :: (Floating a) => Vector a -> a\nnorm (x,y) = x**2 + y**2\n\npshow :: (Show a) => Vector a -> String\npshow (x,y) = show x ++ ' ':show y\n\nv = (1,2) :: Vector Double\nw = (3,0) :: Vector Double\n\nmain = do\n    [ax,ay,bx,by] <- map read . words <$> getLine :: IO [Double]\n    let (a,b) = ((ax,ay),(bx,by)) :: (Vector Double, Vector Double)\n    q <- read <$> getLine :: IO Int\n    points <- sequence (take q (repeat ((\\[x,y] -> (x,y)) . map read . words <$> getLine))) :: IO [Vector Double]\n    mapM (putStrLn . pshow) $ solve a b points\n\nsolve :: (Floating a) => Vector a -> Vector a -> [Vector a] -> [Vector a]\nsolve va vb = map (intersection va vb)\n\nintersection :: (Floating a) => Vector a -> Vector a -> Vector a -> Vector a\nintersection a b p = a `add` (sprod coeff b_a)\n    where b_a = add b (neg a)\n          p_a = add p (neg a)\n          coeff = dotprod b_a p_a / norm b_a\n\n"
  },
  {
    "language": "Haskell",
    "code": "import Text.Printf\n\ninner_product (ax,ay) (bx,by) = ax * bx + ay * by\nvabs (ax,ay) = sqrt (ax*ax+ay*ay)\nvmul a (ax,ay) = (a*ax,a*ay)\n\nans ax ay bx by px py =\n  let v1 = (bx-ax,by-ay)\n      v2 = (px-ax,py-ay)\n      ip = inner_product v1 v2\n  in\n    (ip / (vabs v1)**2) `vmul` v1\n    \nmain = do\n  l0 <- getLine\n  getLine\n  q0 <- getContents\n  let xy@(ax:ay:bx:by:_) = map read $ words l0 :: [Double]\n      qs = map (map read) $ map words $ lines q0 :: [[Double]]\n      o = map (\\ (px:py:_) -> ans ax ay bx by px py) qs\n  mapM_ (\\(x,y) -> printf \"%f %f\\n\" x y) o\n  "
  },
  {
    "language": "Haskell",
    "code": "import Control.Monad\n\nmain = do\n  line <- fmap (fmap (read :: String -> Double) . words) getLine\n  let aa = Point { x = line !! 0, y = line !! 1}\n  let bb = Point { x = line !! 2, y = line !! 3}\n  let l = Line aa bb\n  q <- readLn\n  input <- replicateM q getLine\n  let xs = fmap (fmap (read :: String -> Double) . words) input\n  let result = fmap (\\e -> show (x $ res l (e !! 0) (e !! 1)) ++ \" \" ++ show (y $ res l (e !! 0) (e !! 1))) xs\n  mapM_ putStrLn result\n    where res l x1 y1 = Point{x=x1,y=y1} `project` l\n\neps :: (Floating a) => a\neps = 1e-7\n\nadd :: (Ord a, Floating a) => a -> a -> a\nadd a b -- = a + b\n  | abs (a + b) < eps * (abs a + abs b ) = 0.0\n  | otherwise = a + b\n\ndata Point a = Point { x :: a, y :: a } deriving (Eq)\ndata Line a = Line {a :: Point a, b :: Point a}\n\n(^+) :: (Ord a, Floating a) => Point a -> Point a -> Point a\na ^+ b =  Point (add (x a) (x b)) (add (y a) (y b))\n\n(^-) :: (Ord a, Floating a) => Point a -> Point a -> Point a\na ^- b = Point (add (x a) (-x b)) (add (y a) (-y b))\n\n(^*) :: (Floating a) => Point a -> a -> Point a\na ^* d = Point (x a * d) (y a * d)\n\ndot :: (Floating a) => Point a -> Point a -> a\na `dot` b = x a * x b + y a * y b\n\nproject :: (Ord a, Floating a) => Point a -> Line a -> Point a\np `project` l = a l ^+ (base ^* t)\n  where base = b l ^- a l\n        t = ((p ^- a l) `dot` base) / (base `dot` base)"
  },
  {
    "language": "Haskell",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\nimport Numeric \nformatFloatN floatNum numOfDecimals = showFFloat (Just numOfDecimals) floatNum \"\"\n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n---------------------------------------------------\n-- arithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = (formatFloatN x 8) ++ \" \" ++ (formatFloatN y 8)\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in putStrLn . init . unlines $ map proj plist\n"
  },
  {
    "language": "Haskell",
    "code": "import Control.Monad\nimport Text.Printf\n\nmain = do\n  line <- fmap (fmap (read :: String -> Double) . words) getLine\n  let aa = Point { x = line !! 0, y = line !! 1}\n  let bb = Point { x = line !! 2, y = line !! 3}\n  let l = Line aa bb\n  q <- readLn\n  input <- replicateM q getLine\n  let xs = fmap (fmap (read :: String -> Double) . words) input\n  let result = fmap (\\e -> (x $ res l (e !! 0) (e !! 1), y $ res l (e !! 0) (e !! 1))) xs\n  mapM_  (\\r -> (printf \"%.8f %.8f\\n\" (fst r) (snd r))) result\n    where res l x1 y1 = l `project` Point{x=x1,y=y1}\n\neps :: (Floating a) => a\neps = 1e-7\n\nadd :: (Ord a, Floating a) => a -> a -> a\nadd a b\n  | abs (a + b) < eps * (abs a + abs b ) = 0.0\n  | otherwise = a + b\n\ndata Point a = Point { x :: a, y :: a } deriving (Eq)\ndata Line a = Line {a :: Point a, b :: Point a}\n\n(^+) :: (Ord a, Floating a) => Point a -> Point a -> Point a\na ^+ b =  Point (add (x a) (x b)) (add (y a) (y b))\n\n(^-) :: (Ord a, Floating a) => Point a -> Point a -> Point a\na ^- b = Point (add (x a) (-x b)) (add (y a) (-y b))\n\n(^*) :: (Floating a) => Point a -> a -> Point a\na ^* d = Point (x a * d) (y a * d)\n\ndot :: (Floating a) => Point a -> Point a -> a\na `dot` b = x a * x b + y a * y b\n\nproject :: (Ord a, Floating a) => Line a -> Point a -> Point a\nl `project` p = a l ^+ (base ^* t)\n  where base = b l ^- a l\n        t = ((p ^- a l) `dot` base) / (base `dot` base)\n\nreflect :: (Ord a, Floating a) => Line a -> Point a -> Point a\nl `reflect` p = p ^+ ((l `project` p) ^- p) ^* 2"
  },
  {
    "language": "Haskell",
    "code": "import Control.Applicative\nimport Control.Monad\n\ndata Vector2 = V Double Double deriving Show\n\nmain = do\n  [x1,y1,x2,y2] <- map read.words<$>getLine\n  q <- readLn\n  replicateM_ q (solve (V x1 y1) (V x2 y2))\n\nsolve :: Vector2 -> Vector2 -> IO ()\nsolve p1 p2 = do\n  [x,y] <- map read.words<$>getLine\n  let vecp = add (V x y) (negV p1)\n      vecb = add p2 (negV p1)\n      inner = dot vecp vecb :: Double\n      size  = norm vecb :: Double\n  showPoint $ scalar (inner/size) $ scalar (1/size) vecb\n\nshowPoint :: Vector2 -> IO ()\nshowPoint (V x y) = putStrLn $ show x ++ \" \" ++ show y\n\nadd :: Vector2 -> Vector2 -> Vector2\nadd (V x1 y1) (V x2 y2) = V (x1+x2) (y1+y2)\n\nnegV :: Vector2 -> Vector2\nnegV (V x y) = V (negate x) (negate y)\n\ndot :: Vector2 -> Vector2 -> Double\ndot (V x1 y1) (V x2 y2) = x1*x2 + y1*y2\n\nscalar :: Double -> Vector2 -> Vector2\nscalar a (V x y) = V (a*x) (a*y)\n\nnorm :: Vector2 -> Double\nnorm (V x y) = sqrt $ x^2 + y^2"
  },
  {
    "language": "Haskell",
    "code": "type Vector a = (a, a)\nadd :: (Floating a) => Vector a -> Vector a -> Vector a\nadd (vx,vy) (wx,wy) = (vx+wx,vy+wy)\n\nneg :: (Floating a) => Vector a -> Vector a\nneg (x,y) = (-x,-y)\n\ndotprod :: (Floating a) => Vector a -> Vector a -> a\ndotprod (vx,vy) (wx,wy) = vx*wx + vy*wy\n\nsprod :: (Floating a) => a -> Vector a -> Vector a\nsprod c (x,y) = (c*x, c*y)\n\nnorm :: (Floating a) => Vector a -> a\nnorm (x,y) = x**2 + y**2\n\npshow :: (Show a) => Vector a -> String\npshow (x,y) = show x ++ ' ':show y\n\nv = (1,2) :: Vector Float\nw = (3,0) :: Vector Float\n\nmain = do\n    [ax,ay,bx,by] <- map read . words `fmap` getLine :: IO [Float]\n    let (a,b) = ((ax,ay),(bx,by)) :: (Vector Float, Vector Float)\n    q <- read `fmap` getLine :: IO Int\n    points <- sequence (take q (repeat ((\\[x,y] -> (x,y)) . map read . words `fmap` getLine))) :: IO [Vector Float]\n    mapM (putStrLn . pshow) $ solve a b points\n\nsolve :: (Floating a) => Vector a -> Vector a -> [Vector a] -> [Vector a]\nsolve va vb = map (intersection va vb)\n\nintersection :: (Floating a) => Vector a -> Vector a -> Vector a -> Vector a\nintersection a b p = a `add` (sprod coeff b_a)\n    where b_a = add b (neg a)\n          p_a = add p (neg a)\n          coeff = dotprod b_a p_a / norm b_a\n\n"
  },
  {
    "language": "Haskell",
    "code": "import Data.Char -- for words func.\nimport Control.Monad -- for forM_ replicateM func.\n\ntype Vector = (Double, Double)\ntype Scalar = Double\n\n---------------------------------------------------\n-- alithmetic functions for vector calculations. --\n---------------------------------------------------\nvadd :: Vector -> Vector -> Vector\nvadd (x, y) (z, w) = (x + z, y + w)\n\nvsub :: Vector -> Vector -> Vector\nvsub (x, y) (z, w) = (x - z, y - w)\n\nvdot :: Vector -> Vector -> Scalar\n-- vdot defines dot product for 2D vector.\nvdot (x, y) (z, w) = x * z + y * w\n\nsmul :: Scalar -> Vector -> Vector\n-- smul defines scalar multiplication of 2D vector.\nsmul a (x, y) = (a * x, a * y)\n\nsqnorm :: Vector -> Scalar\n-- calculate squared euclidean norm(sqnorm(x) = ||x||^2).\nsqnorm (x, y) = x * x + y * y\n\nprojection_point :: Vector -> Vector -> Vector -> Vector\n-- find the projection point when p_1, p_2, p are geven.\n-- p_1, p_2 are the point on a straight line called l.\n-- projection point are defined as the point on the l\n-- is the most close to point p.\nprojection_point p_1 p_2 p\n  | p_1 /= p_2 = (a `vdot` b / sqnorm a) `smul` a `vadd` p_1\n  | otherwise  = p_1\n  where\n    a = p_2 `vsub` p_1\n    b = p `vsub` p_1\n\n--------------------------------------\n-- functions for string formatting. --\n--------------------------------------\nline2ps :: String -> [Vector]\n-- this function formatting line include p_1 and p_2 value\n-- to list of p_1 and p_2.\n-- e.g.\n-- input: \"0 0 2 0\" -- i.e. \"p_1x p_1y p_2x p_2y\"\n-- output: [(0, 0), (2, 0)] -- i.e. [p_1, p_2]\nline2ps line = [p_1, p_2]\n  where\n    ps = words line\n    p_1 = line2p . unwords $ take 2 ps\n    p_2 = line2p . unwords $ drop 2 ps\n\nline2p :: String -> Vector\n-- transform string to vector.\n-- input: \"0 1\" -- i.e. \"p_x p_y\"\n-- output: (0, 1)\nline2p line = p\n  where\n    ps = words line\n    p_x = read (ps!!0) :: Double\n    p_y = read (ps!!1) :: Double\n    p = (p_x, p_y)\n\nvec2line :: Vector -> String\nvec2line (x, y) = show x ++ \" \" ++  show y\n\n---------------------\n-- main statement. --\n---------------------\nmain :: IO()\nmain = do\n  ps <- getLine\n  q  <- getLine\n  plist <- replicateM (read q) getLine\n  let proj p = vec2line $ projection_point ((line2ps ps)!!0) ((line2ps ps)!!1) (line2p p) in putStrLn . init . unlines $ map proj plist\n"
  },
  {
    "language": "Haskell",
    "code": "import Control.Applicative\nimport Control.Monad\n\ndata Vector2 = V Double Double deriving Show\n\nmain = do\n  [x1,y1,x2,y2] <- map read.words<$>getLine\n  q <- readLn\n  replicateM_ q (solve (V x1 y1) (V x2 y2))\n\nsolve :: Vector2 -> Vector2 -> IO ()\nsolve p1 p2 = do\n  [x,y] <- map read.words<$>getLine\n  let vecp = add (V x y) (negV p1)\n      vecb = add p2 (negV p1)\n      inner = dot vecp vecb :: Double\n      size  = norm vecb :: Double\n  print $ scalar (inner/size) $ scalar (1/size) vecb\n\nshowPoint :: Vector2 -> IO ()\nshowPoint (V x y) = print $ show x ++ \" \" ++ show y\n\nadd :: Vector2 -> Vector2 -> Vector2\nadd (V x1 y1) (V x2 y2) = V (x1+x2) (y1+y2)\n\nnegV :: Vector2 -> Vector2\nnegV (V x y) = V (negate x) (negate y)\n\ndot :: Vector2 -> Vector2 -> Double\ndot (V x1 y1) (V x2 y2) = x1*x2 + y1*y2\n\nscalar :: Double -> Vector2 -> Vector2\nscalar a (V x y) = V (a*x) (a*y)\n\nnorm :: Vector2 -> Double\nnorm (V x y) = sqrt $ x^2 + y^2"
  },
  {
    "language": "Haskell",
    "code": "import Control.Monad\nimport Text.Printf\n\nmain = do\n  line <- fmap (fmap (read :: String -> Double) . words) getLine\n  let aa = Point { x = line !! 0, y = line !! 1}\n  let bb = Point { x = line !! 2, y = line !! 3}\n  let l = Line aa bb\n  q <- readLn\n  input <- replicateM q getLine\n  let xs = fmap (fmap (read :: String -> Double) . words) input\n  let result = fmap (\\e -> (x $ res l (e !! 0) (e !! 1), y $ res l (e !! 0) (e !! 1))) xs\n  mapM_  (\\r -> (printf \"%.8f %.8f\\n\" (fst r) (snd r))) result\n    where res l x1 y1 = Point{x=x1,y=y1} `project` l\n\neps :: (Floating a) => a\neps = 1e-7\n\nadd :: (Ord a, Floating a) => a -> a -> a\nadd a b -- = a + b\n  | abs (a + b) < eps * (abs a + abs b ) = 0.0\n  | otherwise = a + b\n\ndata Point a = Point { x :: a, y :: a } deriving (Eq)\ndata Line a = Line {a :: Point a, b :: Point a}\n\n(^+) :: (Ord a, Floating a) => Point a -> Point a -> Point a\na ^+ b =  Point (add (x a) (x b)) (add (y a) (y b))\n\n(^-) :: (Ord a, Floating a) => Point a -> Point a -> Point a\na ^- b = Point (add (x a) (-x b)) (add (y a) (-y b))\n\n(^*) :: (Floating a) => Point a -> a -> Point a\na ^* d = Point (x a * d) (y a * d)\n\ndot :: (Floating a) => Point a -> Point a -> a\na `dot` b = x a * x b + y a * y b\n\nproject :: (Ord a, Floating a) => Point a -> Line a -> Point a\np `project` l = a l ^+ (base ^* t)\n  where base = b l ^- a l\n        t = ((p ^- a l) `dot` base) / (base `dot` base)"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n\ntypedef long long int int64;\n\n#define MAX(a,b) ((a)>(b)?(a):(b))\n#define MIN(a,b) ((a)<(b)?(a):(b))\n#define ABS(a) ((a)>(0)?(a):-(a))\n\nvoid run(void){\n  int a,b,c,d;\n  scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n  int p=c-a;\n  int q=d-b;\n  double norm=p*p+q*q;\n  int query;\n  scanf(\"%d\",&query);\n  while(query--){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    x-=a;\n    y-=b;\n    int innerNorm=p*x+q*y;\n    double xx=a+p*innerNorm/norm;\n    double yy=b+q*innerNorm/norm;\n    printf(\"%.6lf %.6lf\\n\",xx,yy);\n  }\n}\n\nint main(void){\n  run();\n  return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "//1803115\n#include <stdio.h> \nint main() \n{ \n    int i,n;\n    long double x1,x2,x3,y1,y2,y3,dx,dy,x,y,z,a,b,c;\n    scanf(\"%Lf %Lf %Lf %Lf\",&x1,&y1,&x2,&y2);\n    scanf(\"%d\",&n);\n    dx=x1-x2;\n    dy=y1-y2;\n    y=dy*(x1*y2-x2*y1);\n    z=dx*dx;\n    a=dx*dy;\n    b=dx*(x1*y2-x2*y1);\n    c=dy*dy;\n    x=z+c;\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%Lf %Lf\",&x3,&y3);\n        printf(\"%0.10Lf %0.10Lf\\n\",(z*x3+a*y3-y)/x,(b+a*x3+c*y3)/x);\n    }\n    return 0; \n}\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint main(void)\n{\n\tdouble adLine[2][2];\n\tdouble adDirection[2];\n\tint i, nPoint;\n\n\tfor (i = 0; i < 2; i++) {\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tadLine[i][0] = x;\n\t\tadLine[i][1] = y;\n\t}\n\n\t{\n\t\tdouble dLength;\n\t\tadDirection[0] = adLine[1][0] - adLine[0][0];\n\t\tadDirection[1] = adLine[1][1] - adLine[0][1];\n\t\tdLength = sqrt(adDirection[0] * adDirection[0] + adDirection[1] * adDirection[1]);\n\t\tadDirection[0] /= dLength;\n\t\tadDirection[1] /= dLength;\n\t}\n\n\tscanf(\"%d\", &nPoint);\n\n\tfor (i = 0; i < nPoint; i++) {\n\t\tdouble adPointVector[2], dInnerProduct, dProjection[2];\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tadPointVector[0] = x - adLine[0][0];\n\t\tadPointVector[1] = y - adLine[0][1];\n\n\t\tdInnerProduct = adPointVector[0] * adDirection[0] + adPointVector[1] * adDirection[1];\n\n\t\tdProjection[0] = adLine[0][0] + adDirection[0] * dInnerProduct;\n\t\tdProjection[1] = adLine[0][1] + adDirection[1] * dInnerProduct;\n\n\t\tprintf(\"%.10f %.10f\\n\", dProjection[0], dProjection[1]);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#define y1 y11111\n\ndouble x1,y1,x2,y2;\nint main(){\n\tscanf(\"%lf%lf%lf%lf\",&x1,&y1,&x2,&y2);\n\tx2-=x1;\n\ty2-=y1;\n\tdouble len=hypot(x2,y2);\n\tx2/=len;\n\ty2/=len;\n\tint q;\n\tscanf(\"%d\",&q);\n\twhile(q--){\n\t\tdouble x,y;\n\t\tscanf(\"%lf%lf\",&x,&y);\n\t\tx-=x1;\n\t\ty-=y1;\n\t\tdouble r=(x*x2+y*y2);\n\t\tprintf(\"%.9f %.9f\\n\",x1+r*x2,y1+r*y2);\n\t}\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nstruct points {\n\tdouble x;\n\tdouble y;\n};\nint main(void) {\n\t\n\t\n\tstruct points eigenvector;\n\tint p1x, p1y, p2x, p2y, px, py;\n\t\tscanf(\"%d,%d\", &p1x, &p1y, &p2x, &p2y);\n\t\tstruct points p1, p2;\n\t\tp1.x = p1x;\n\t\tp1.y = p1y;\n\t\t\n\t\tp2.x = p2x;\n\t\tp2.y = p2y;\n\t\tdouble length = sqrt((p1.x - p2.x)*(p1.x - p2.x)+ (p1.y - p2.y)*(p1.y - p2.y));\n\t\teigenvector.x = (p1.x - p2.x) / length;\n\t\teigenvector.y = (p1.y - p2.y) / length;\n\t\tint q;\n\t\tscanf(\"%d\",  &q);\n\t\t\n\t\tfor (int i = 0; i < q; ++i) {\n\t\t\tscanf(\"%d,%d\", &px, &py);\n\t\t\tdouble  returnqx, returnqy;\n\t\t\tprintf(\"%.10f,%.10f\", p1.x+(px - p1.x)*eigenvector.x, p1.y + (py - p1.y)*eigenvector.y);\n\n\t\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ntypedef struct Point {\n\tdouble x;\n\tdouble y;\n} Point;\n\ntypedef struct Vector {\n\tstruct Point point;\n\tdouble size;\n} Vector;\n\nPoint VectorAddition(Point, Point, int);\ndouble Vectormultiplication(Point, Point);\ndouble VectorSize(Point);\ndouble Range(Point, Point);\n\nint main(void) {\n\n\tPoint point1, point2, point3, ans, k;\n\tVector vector1, vector2;\n\tint q, i, co = 0;\n\n\tscanf(\"%lf %lf %lf %lf %d\", &point1.x, &point1.y, &point2.x, &point2.y, &q);\n\n\tvector1.point = VectorAddition(point1, point2, 2);\n\tvector1.size = VectorSize(vector1.point);\n\n\tfor (i = 0; i < q; i++) {\n\n\t\tscanf(\"%lf %lf\", &point3.x, &point3.y);\n\n\t\tvector2.point = VectorAddition(point1, point3, 2);\n\t\tvector2.size = VectorSize(vector2.point);\n\n\t\tif (Range(vector1.point, vector2.point) < 0) {\n\t\t\tans.x = (fabs(Vectormultiplication(vector1.point, vector2.point)) / pow(vector1.size, 2) * vector1.point.x * -1) + point1.x;\n\t\t\tans.y = (fabs(Vectormultiplication(vector1.point, vector2.point)) / pow(vector1.size, 2) * vector1.point.y * -1) + point1.y;\n\t\t}\n\t\telse {\n\t\t\tans.x = (fabs(Vectormultiplication(vector1.point, vector2.point)) / pow(vector1.size, 2) * vector1.point.x) + point1.x;\n\t\t\tans.y = (fabs(Vectormultiplication(vector1.point, vector2.point)) / pow(vector1.size, 2) * vector1.point.y) + point1.y;\n\t\t}\n\n\t\tprintf(\"%.9lf %.9lf\\n\", ans.x, ans.y);\n\t}\n\n\treturn 0;\n}\n\nPoint VectorAddition(Point p1, Point p2, int sign) {\n\tPoint point;\n\tswitch (sign) {\n\tcase 1:\n\t\tpoint.x = p2.x + p1.x;\n\t\tpoint.y = p2.y + p1.y;\n\t\tbreak;\n\tcase 2:\n\t\tpoint.x = p2.x - p1.x;\n\t\tpoint.y = p2.y - p1.y;\n\t\tbreak;\n\t}\n\treturn point;\n\n}\n\ndouble Vectormultiplication(Point p1, Point p2) {\n\tPoint point;\n\tdouble i;\n\tpoint.x = p1.x * p2.x;\n\tpoint.y = p1.y * p2.y;\n\ti = point.x + point.y;\n\treturn i;\n}\n\ndouble VectorSize(Point p) {\n\treturn sqrt(pow(p.x, 2) + pow(p.y, 2));\n}\n\ndouble Range(Point p1, Point p2) {\n\treturn Vectormultiplication(p1, p2) / (VectorSize(p1) * VectorSize(p2));\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n  \nint main(void)\n{\n int xp1, yp1, xp2, yp2;\n int q;\n int xp, yp;\n int i = 1;\n double x, y;\n double k;\n  \n scanf(\"%d%d\", &xp1, &yp1);\n scanf(\"%d%d\", &xp2, &yp2);\n scanf(\"%d\", &q);\n  \n do {\n scanf(\"%d%d\", &xp, &yp);\n  \n k = (xp2 - xp1) * (xp2 - xp1) +(yp2 - yp1) * (yp2 - yp1)\n k = k / (xp * (xp2 - xp1) + yp * (yp2 - yp1));\n x = (xp2 - xp1) / k;\n y = (yp2 - yp1) / k;\n  \n printf(\"%.10f %.10f\\n\", x, y);\n  \n i = i++;\n } while(i <= q);\n  \n return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ntypedef struct Point {\n\tdouble x;\n\tdouble y;\n} Point;\n\ntypedef struct Vector {\n\tstruct Point point;\n\tdouble size;\n} Vector;\n\nPoint VectorAddition(Point, Point, int);\ndouble Vectormultiplication(Point, Point);\ndouble VectorSize(Point);\n\nint main(void) {\n\n\tPoint point1, point2, point3, ans;\n\tVector vector1, vector2;\n\tint q, i;\n\n\tscanf(\"%lf %lf %lf %lf %d\", &point1.x, &point1.y, &point2.x, &point2.y, &q);\n\n\tvector1.point.x = point2.x - point1.x;\n\tvector1.point.y = point2.y - point1.y;\n\tvector1.size = sqrt(pow(vector1.point.x, 2) + pow(vector1.point.y, 2));\n\n\tfor (i = 0; i < q; i++) {\n\n\t\tscanf(\"%lf %lf\", &point3.x, &point3.y);\n\n\t\tvector2.point = VectorAddition(point1, point3, 2);\n\t\tvector2.size = VectorSize(vector2.point);\n\n\t\tans.x = Vectormultiplication(vector1.point, vector2.point) / pow(vector1.size, 2) * vector1.point.x;\n\t\tans.y = Vectormultiplication(vector1.point, vector2.point) / pow(vector1.size, 2) * vector1.point.y;\n\n\t\tprintf(\"%.9lf %.9lf\\n\", ans.x, ans.y);\n\t}\n\n\treturn 0;\n}\n\nPoint VectorAddition(Point p1, Point p2, int sign) {\n\tPoint point;\n\tswitch (sign) {\n\tcase 1:\n\t\tpoint.x = p2.x + p1.x;\n\t\tpoint.y = p2.y + p1.y;\n\t\tbreak;\n\tcase 2:\n\t\tpoint.x = p2.x - p1.x;\n\t\tpoint.y = p2.y - p1.y;\n\t\tbreak;\n\t}\n\treturn point;\n}\n\ndouble Vectormultiplication(Point p1, Point p2) {\n\tPoint point;\n\tdouble i;\n\tpoint.x = p1.x * p2.x;\n\tpoint.y = p1.y * p2.y;\n\ti = point.x + point.y;\n\treturn i;\n}\n\ndouble VectorSize(Point p) {\n\treturn sqrt(pow(p.x, 2) + pow(p.y, 2));\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble dot(double x1, double y1, double x2, double y2){\n    return(x1 * x2 + y1 * y2);\n}\n\ndouble scalar(double x, double y){\n    return(sqrt(x * x + y * y));\n}\n\nint main(void){\n    int xp1, yp1, xp2, yp2, *xp, *yp;\n    int q, i;\n    float error = 1.0E-8, *x, *y, a;\n    \n    scanf(\"%d %d %d %d\", &xp1, &yp1, &xp2, &yp2);\n    scanf(\"%d\", &q);\n    \n    xp = (int *)malloc(sizeof(int) * q);\n    yp = (int *)malloc(sizeof(int) * q);\n    x = (float *)malloc(sizeof(float) * q);\n    y = (float *)malloc(sizeof(float) * q);\n    \n    for(i = 0; i < q; i ++){\n        scanf(\"%d %d\", &xp[i], &yp[i]);\n    }\n    \n    for(i = 0; i < q; i ++){\n        a = dot(xp2 - xp1, yp2 - yp1, xp1 - xp[i], yp1 - yp[i]) / (scalar(xp2 - xp1, yp2 - yp1) * scalar(xp2 - xp1, yp2 - yp1));\n        x[i] = xp1 + a * (xp1 - xp2);\n        y[i] = yp1 + a * (yp1 - yp2);\n        \n        printf(\"%f %f\\n\", x[i], y[i]);\n    }\n    \n    free(xp);\n    free(yp);\n    free(x);\n    free(y);    \n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#define DOT(v1, v2) (v1.x * v2.x + v1.y * v2.y)\n#define NORM(v) (v.x * v.x + v.y * v.y)\n\ntypedef struct { double x, y; } point_t;\ntypedef point_t vector_t;\ntypedef struct { point_t p0, p1; } segment_t;\ntypedef segment_t line_t;\n\nstatic vector_t plus(vector_t v1, vector_t v2) {\n  vector_t ret = { v1.x + v2.x, v1.y + v2.y };\n  return ret;\n}\n\nstatic vector_t minus(vector_t v1, vector_t v2) {\n  vector_t ret = { v1.x - v2.x, v1.y - v2.y };\n  return ret;\n}\n\nstatic vector_t multiple(vector_t v, double s) {\n  vector_t ret = { v.x * s, v.y * s };\n  return ret;\n}\n\nstatic point_t calc_x(line_t l, point_t p) {\n  vector_t base = minus(l.p1, l.p0);\n  double r = DOT(minus(p, l.p0), base) / NORM(base);\n  point_t x = plus(l.p0, multiple(base, r));\n  return x;\n}\n\nint main(int argc, char **argv) {\n  line_t l;\n  point_t p;\n  int q, i;\n\n  scanf(\"%lf %lf %lf %lf\", &l.p0.x, &l.p0.y, &l.p1.x, &l.p1.y);\n  scanf(\"%d\", &q);\n  for (i = 0; i < q; ++i) {\n    scanf(\"%lf %lf\", &p.x, &p.y);\n    p = calc_x(l, p);\n    printf(\"%.10lf %.10lf\\n\", p.x, p.y);\n  }\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nstruct points {\n\tdouble x;\n\tdouble y;\n};\nint main(void) {\n\t\n\t\n\tstruct points eigenvector;\n\tint p1x, p1y, p2x, p2y, px, py; \n\tdouble length;\n\tint q;\n\tint i;\n\t\tscanf(\"%d%d%d%d\",&p1x,&p1y,&p2x,&p2y);\n\t\tstruct points p1, p2;\n\t\tp1.x = p1x;\n\t\tp1.y = p1y;\n\t\t\n\t\tp2.x = p2x;\n\t\tp2.y = p2y;\n\t length = sqrt((p1.x - p2.x)*(p1.x - p2.x)+ (p1.y - p2.y)*(p1.y - p2.y));\n\t\teigenvector.x = (p2.x - p1.x) / length;\n\t\teigenvector.y = (p2.y - p1.y) / length;\n\t\t\n\t\tscanf(\"%d\",&q);\n\t\t\n\t\tfor ( i = 0; i < q; ++i) {\n\t\t\tscanf(\"%d%d\", &px, &py);\n\t\t\t//double  returnqx, returnqy;\n\t\t\tdouble length1 = (px - p1.x)*eigenvector.x + (py - p1.y)*eigenvector.y;\n\t\t\tprintf(\"%.10f %.10f\\n\", p1.x+ length1*eigenvector.x, p1.y + length1*eigenvector.y);\n\n\t\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n//\n\n\nint main(){\n\t\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n\n\tLINE a;\n\tPOINT b,ans;\n\tint k;\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tans = perpendicular(a,b);\n\t\tprintf(\"%lf %lf\\n\",ans.x,ans.y);\n\t}\n\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n  \nint main(void)\n{\n int xp1, yp1, xp2, yp2;\n int q;\n int xp, yp;\n int i = 1;\n double x, y;\n double k;\n  \n scanf(\"%d%d\", &xp1, &yp1);\n scanf(\"%d%d\", &xp2, &yp2);\n scanf(\"%d\", &q);\n  \n do {\n scanf(\"%d%d\", &xp, &yp);\n  \n k = ((xp2 - xp1) * (xp2 - xp1) +(yp2 - yp1) * (yp2 - yp1)) / (xp * (xp2 - xp1) + yp * (yp2 - yp1));\n x = (xp2 - xp1) / k;\n y = (yp2 - yp1) / k;\n  \n printf(\"%.10f %.10f\\n\", x, y);\n  \n i = i++;\n } while (i <= q);\n  \n return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ndouble get_radian(double x1, double y1, double x2, double y2) {\n\tif(fabs(x1-x2) < 0.00000001) {\n\t\tif(y1 >= y2) {\n\t\t\treturn 3 * M_PI / 2;\n\t\t}\n\t\treturn M_PI / 2;\n\t} else if(fabs(y1-y2) < 0.00000001) {\n\t\tif(x1 >= x2) {\n\t\t\treturn M_PI;\n\t\t}\n\t\treturn 0.0;\n\t}\n\t\n\tif(x2 >= x1) {\n\t\tif(y2 >= y1) {\n\t\t\treturn atan((y2-y1)/(x2-x1));\n\t\t}\n\t\treturn 2 * M_PI + atan((y2-y1)/(x2-x1));\n\t} else {\n\t\tif(y2 >= y1) {\n\t\t\treturn M_PI - atan((y2-y1)/(x1-x2));\n\t\t}\n\t\treturn M_PI + atan((y2-y1)/(x2-x1));\n\t}\n}\n\nint main(void) {\n\tdouble base_x, base_y, x, y;\n\tdouble base_rad, target_rad;\n\tdouble rad;\n\tdouble r;\n\tint i, n;\n\t\n\tscanf(\"%lf %lf %lf %lf\\n\", &base_x, &base_y, &x, &y);\n\tscanf(\"%d\\n\", &n);\n\tbase_rad = get_radian(base_x, base_y, x, y);\n\t\n\tfor(i=0;i<n;i++) {\n\t\tscanf(\"%lf %lf\\n\", &x, &y);\n\t\ttarget_rad = get_radian(base_x, base_y, x, y);\n\t\tr = sqrt((x-base_x)*(x-base_x)+(y-base_y)*(y-base_y));\n\t\t\n\t\t// 後はどっち側に振れるか\n\t\trad = fmod(2*M_PI+target_rad-base_rad, 2*M_PI);\n\t\t\n\t\tif(rad > M_PI) {\n\t\t\trad = 2*M_PI - rad;\n\t\t}\n\t\t\n\t\tx = base_x + (r*cos(rad)) * cos(base_rad);\n\t\ty = base_y + (r*cos(rad)) * sin(base_rad);\n\t\t\n\t\tprintf(\"%.10lf %.10lf\\n\", x, y);\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n  \nint main(void)\n{\n int xp1, yp1, xp2, yp2;\n int q;\n int xp, yp;\n int i = 1;\n double x, y;\n double k;\n  \n scanf(\"%d%d\", &xp1, &yp1);\n scanf(\"%d%d\", &xp2, &yp2);\n scanf(\"%d\", &q);\n  \n do {\n scanf(\"%d%d\", &xp, &yp);\n  \n k = (xp2 - xp1) * (xp2 - xp1) +(yp2 - yp1) * (yp2 - yp1);\n k = k / (xp * (xp2 - xp1) + yp * (yp2 - yp1));\n x = (xp2 - xp1) / k;\n y = (yp2 - yp1) / k;\n  \n printf(\"%.10f %.10f\\n\", x, y);\n  \n i = i++;\n } while(i <= q);\n  \n return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ndouble dot(double x1, double y1, double x2, double y2){\n    return(x1 * x2 + y1 * y2);\n}\n\ndouble scalar2(double x, double y){\n    return(x * x + y * y);\n}\n\nint main(void){\n    double xp1, yp1, xp2, yp2, *xp, *yp;\n    int q, i;\n    double *x, *y, a;\n    \n    scanf(\"%lf %lf %lf %lf\", &xp1, &yp1, &xp2, &yp2);\n    scanf(\"%d\", &q);\n    \n    xp = (double *)malloc(sizeof(double) * q);\n    yp = (double *)malloc(sizeof(double) * q);\n    x = (double *)malloc(sizeof(double) * q);\n    y = (double *)malloc(sizeof(double) * q);\n    \n    for(i = 0; i < q; i ++){\n        scanf(\"%lf %lf\", &xp[i], &yp[i]);\n    }\n    \n    for(i = 0; i < q; i ++){\n        a = dot(xp2 - xp1, yp2 - yp1, xp1 - xp[i], yp1 - yp[i]) / (scalar2(xp2 - xp1, yp2 - yp1));\n        x[i] = xp1 + a * (xp1 - xp2);\n        y[i] = yp1 + a * (yp1 - yp2);\n        \n        printf(\"%.8f %.8f\\n\", x[i], y[i]);\n    }\n    \n    free(xp);\n    free(yp);\n    free(x);\n    free(y);\n    \n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "// AOJ CGL_1_A Projection\n// 2018.5.2 bal4u\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ntypedef struct { double x, y; } PP;\ntypedef struct { PP s, e; } SEG, LINE;\n\n#define INF\t\t\t1e8\n#define EPS\t\t\t1e-8\n#define EQ(a,b)\t\t(fabs((a)-(b))<EPS)\n#define PPeQ(a,b)\t(EQ(a.x,b.x)&&EQ(a.y,b.y))\n\nint dcmp(double x) { if (fabs(x) < EPS) return 0; return x <= 0 ? -1 : 1; }\nPP vset(double x, double y) { PP r; r.x = x, r.y = y; return r; }\nPP vadd(PP p1, PP p2) { PP r; r.x = p1.x + p2.x, r.y = p1.y + p2.y; return r; }\nPP vsub(PP p1, PP p2) { PP r; r.x = p1.x - p2.x, r.y = p1.y - p2.y; return r; }\nPP vsmul(PP p, double k) { PP r; r.x = p.x * k, r.y = p.y * k; return r; }\nPP vmul(PP p1, PP p2) { PP r;\n\tr.x = p1.x * p2.x - p1.y * p2.y, r.y = p1.x * p2.y + p1.y * p2.x; return r; }\ndouble vabs(PP a) { return hypot(a.x, a.y); }\ndouble dist(PP p1, PP p2) {\treturn hypot(p1.x-p2.x, p1.y-p2.y); };\ndouble cross(PP a, PP b) { return a.x * b.y - a.y * b.x; }\ndouble dot(PP a, PP b) { return a.x * b.x + a.y * b.y; }\ndouble norm(PP a) { return a.x * a.x + a.y * a.y; }\n\n#if 1\n#define gc() getchar_unlocked()\n#else\n#define gc() getchar()\n#endif\nint in()\n{\n\tint n = 0, c = gc();\n\tif (c == '-') {\tc = gc();\n\t\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\t\treturn -n;\n\t}\n\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\treturn n;\n}\n\nPP projection(PP p1, PP p2, PP p)\n{\n\tPP p2p1 = vsub(p2, p1);\n\tPP pp1 = vsub(p, p1);\n\treturn vadd(p1, vsmul(p2p1, dot(pp1, p2p1)/norm(p2p1)));\n}\n\nint main()\n{\n\tint q, x, y;\n\tPP p1, p2, p, ans;\n\n\tx = in(), y = in(), p1 = vset(x, y);\n\tx = in(), y = in(), p2 = vset(x, y);\n\n\tq = in(); while (q--) {\n\t\tx = in(), y = in(), p = vset(x, y);\n\t\tans = projection(p1, p2, p);\n\t\tprintf(\"%.10lf %.10lf\\n\", ans.x, ans.y);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n\ntypedef long long int int64;\n\n#define MAX(a,b) ((a)>(b)?(a):(b))\n#define MIN(a,b) ((a)<(b)?(a):(b))\n#define ABS(a) ((a)>(0)?(a):-(a))\n\nvoid run(void){\n  int a,b,c,d;\n  scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n  int p=c-a;\n  int q=d-b;\n  double norm=p*p+q*q;\n  int query;\n  scanf(\"%d\",&query);\n  while(query--){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    x-=a;\n    y-=b;\n    int innerNorm=p*x+q*y;\n    double xx=a+p*innerNorm/norm;\n    double yy=b+q*innerNorm/norm;\n    printf(\"%.9lf %.9lf\\n\",xx,yy);\n  }\n}\n\nint main(void){\n  run();\n  return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n  \nint main(void)\n{\n int xp1, yp1, xp2, yp2;\n int q;\n int xp, yp;\n int i = 1;\n double x, y;\n double k;\n  \n scanf(\"%d%d%d%d\", &xp1, &yp1, &xp2, &yp2);\n scanf(\"%d\", &q);\n  \n do {\n scanf(\"%d%d\", &xp, &yp);\n  \n k = (xp2 - xp1) * (xp2 - xp1) +(yp2 - yp1) * (yp2 - yp1);\n k = k / (xp * (xp2 - xp1) + yp * (yp2 - yp1));\n x = (xp2 - xp1) / k;\n y = (yp2 - yp1) / k;\n  \n printf(\"%.10f %.10f\\n\", x, y);\n  \n i = i++;\n } while(i <= q);\n  \n return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nint main(){\n    int n,ax,ay,bx,by,cx,cy;\n    double t,x,y;\n    scanf(\"%d%d%d%d\",&ax,&ay,&bx,&by);\n    scanf(\"%d\",&n);\n    while(n--){\n        scanf(\"%d%d\",&cx,&cy);\n        t=((ax-bx)*(ax-cx)+(ay-by)*(ay-cy))/(pow(ax-bx,2)+pow(ay-by,2));\n        x=ax+t*(bx-ax);\n        y=ay+t*(by-ay);\n        printf(\"%f %f\\n\",x,y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void)\n{\n int xp1, yp1, xp2, yp2;\n int q;\n int xp, yp;\n int i = 1;\n double x, y;\n double k;\n\n scanf(\"%d%d\", &xp1, &yp1);\n scanf(\"%d%d\", &xp2, &yp2);\n scanf(\"%d\", &q);\n\n do {\n scanf(\"%d%d\", &xp, &yp);\n\n k = ((xp2 - xp1) * (xp2 - xp1) +(yp2 - yp1) * (yp2 - yp1))(xp * (xp2 - xp1) + yp * (yp2 - yp1));\n x = (xp2 - xp1) / k;\n y = (yp2 - yp1) / k;\n\n printf(\"%lf %lf\", x, y);\n\n i = i++;\n } while(i < q);\n\n return 0;\n\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble dot(double x1, double y1, double x2, double y2){\n    return(x1 * x2 + y1 * y2);\n}\n\ndouble scalar(double x, double y){\n    return(sqrt(x * x + y * y));\n}\n\nint main(void){\n    int xp1, yp1, xp2, yp2, *xp, *yp;\n    int q, i;\n    float error = 1.0E-8, *x, *y, a;\n    \n    scanf(\"%d %d %d %d\", &xp1, &yp1, &xp2, &yp2);\n    scanf(\"%d\", &q);\n    \n    xp = (int *)malloc(sizeof(int) * q);\n    yp = (int *)malloc(sizeof(int) * q);\n    x = (float *)malloc(sizeof(float) * q);\n    y = (float *)malloc(sizeof(float) * q);\n    \n    for(i = 0; i < q; i ++){\n        scanf(\"%d %d\", &xp[i], &yp[i]);\n    }\n    \n    for(i = 0; i < q; i ++){\n        a = dot(xp2 - xp1, yp2 - yp1, xp1 - xp[i], yp1 - yp[i]) / (scalar(xp2 - xp1, yp2 - yp1) * scalar(xp2 - xp1, yp2 - yp1));\n        x[i] = xp1 + a * (xp1 - xp2);\n        y[i] = yp1 + a * (yp1 - yp2);\n        \n        printf(\"%f %f\\n\", x[i], y[i]);\n    }\n    \n    free(xp);\n    free(yp);\n    free(x);\n    free(y);    \n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nvoid pv(double ax, double ay, double bx, double by, \n        double px, double py, double ans[]);\n\nint main(void)\n{\n    double ax, ay, bx, by;\n    int n, i;\n    double tmpx, tmpy;\n    double ans[2];\n\n    scanf(\"%lf%lf%lf%lf%d\", &ax, &ay, &bx, &by, &n);\n\n    for (i = 0; i < n; i++) {\n        scanf(\"%lf%lf\", &tmpx, &tmpy);\n        pv(ax, ay, bx, by, tmpx, tmpy, ans);\n        printf(\"%.10lf %.10lf\\n\", ans[0], ans[1]);\n    }\n    return 0;\n}\n\nvoid pv(double ax, double ay, double bx, double by, \n        double px, double py, double ans[]) {\n    //*find the projection point ans of p onto a,b *//\n    double x1 = bx-ax, x2 = px-ax, y1 = by-ay, y2 = py-ay;\n    ans[0] = 1.0 * (x1*x2+y1*y2)/(x1*x1+y1*y1)*x1 + ax;\n    ans[1] = 1.0 * (x1*x2+y1*y2)/(x1*x1+y1*y1)*y1 + ay;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n//\n\n\nint main(){\n\t\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n\n\tLINE a;\n\tPOINT b,ans;\n\tint k;\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%.10lf%.10lf\",&b.x,&b.y);\n\t\tans = perpendicular(a,b);\n\t\tprintf(\"%lf %lf\\n\",ans.x,ans.y);\n\t}\n\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ndouble dot(double x1, double y1, double x2, double y2){\n    return(x1 * x2 + y1 * y2);\n}\n\ndouble scalar2(double x, double y){\n    return(x * x + y * y);\n}\n\nint main(void){\n    double xp1, yp1, xp2, yp2, *xp, *yp;\n    int q, i;\n    double *x, *y, a;\n    \n    scanf(\"%lf %lf %lf %lf\", &xp1, &yp1, &xp2, &yp2);\n    scanf(\"%d\", &q);\n    \n    xp = (double *)malloc(sizeof(double) * q);\n    yp = (double *)malloc(sizeof(double) * q);\n    x = (double *)malloc(sizeof(double) * q);\n    y = (double *)malloc(sizeof(double) * q);\n    \n    for(i = 0; i < q; i ++){\n        scanf(\"%lf %lf\", &xp[i], &yp[i]);\n    }\n    \n    for(i = 0; i < q; i ++){\n        a = dot(xp2 - xp1, yp2 - yp1, xp1 - xp[i], yp1 - yp[i]) / (scalar2(xp2 - xp1, yp2 - yp1));\n        x[i] = xp1 + a * (xp1 - xp2);\n        y[i] = yp1 + a * (yp1 - yp2);\n        \n        printf(\"%f %f\\n\", x[i], y[i]);\n    }\n    \n    free(xp);\n    free(yp);\n    free(x);\n    free(y);\n    \n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n#define EPS 0.0000000002\n#define MAX 1010001000\n\ntypedef struct point{\n    double x, y;\n}point;\n\ntypedef struct line{\n    point st, en;\n}line;\n\ndouble norm(point a);\ndouble norm2(point a);\ndouble distans(point a, point b);\npoint sum_vector(point a, point b);\npoint diff_vector(point a, point b);\npoint minus_vector(point a);\ndouble dot(point a, point b);\ndouble prod(point a, point b);\n\npoint pv(line a, point p) {\n    //直線ab上に点pから垂線を下ろしたときの点h//\n    point h;\n    double k = dot(diff_vector(a.st, p), diff_vector(a.st, a.en))\n                / dot(diff_vector(a.en, a.st), diff_vector(a.en, a.st));\n    h.x = k * (a.en.x - a.st.x) + a.st.x;\n    h.y = k * (a.en.y - a.st.y) + a.st.y;\n    return h;\n}\n\ndouble norm(point a)\n{\n    //原点からの距離\n    return sqrt((a.x * a.x) + (a.y * a.y));\n}\n\ndouble norm2(point a)\n{\n    //原点からの距離の二乗\n    return (a.x * a.x) + (a.y * a.y);\n}\n\ndouble distans(point a, point b)\n{\n    //二点間の距離\n    point tmp = sum_vector(b, minus_vector(a));\n    return norm(tmp);\n}\n\npoint sum_vector(point a, point b)\n{\n    //ベクトルの和\n    a.x += b.x;\n    a.y += b.y;\n    return a;\n}\n\npoint diff_vector(point a, point b)\n{\n    //ベクトルの差\n    a.x -= b.x;\n    a.y -= b.y;\n    return a;\n}\n\npoint minus_vector(point a)\n{\n    //逆ベクトル\n    a.x *= -1;\n    a.y *= -1;\n    return a;\n}\n\ndouble dot(point a, point b)\n{\n    //内積\n    return (a.x * b.x) + (a.y * b.y);\n}\n\ndouble prod(point a, point b)\n{\n    //外積\n    return (a.x * b.y) - (b.x * a.y);\n}\n\n///////////////////////////////////////\n\nint main(void)\n{\n    point tmp;\n    line ab;\n    int n, i;\n\n    scanf(\"%lf%lf%lf%lf%d\", &ab.st.x, &ab.st.y, &ab.en.x, &ab.en.y, &n);\n    for (i = 0; i < n; i++) {\n        scanf(\"%lf%lf\", &tmp.x, &tmp.y);\n        tmp = pv(ab, tmp);\n        printf(\"%.10lf %.10lf\\n\", tmp.x, tmp.y);\n    }\n\n    return 0;\n\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble dot(double x1, double y1, double x2, double y2){\n    return(x1 * x2 + y1 * y2);\n}\n\ndouble scalar(double x, double y){\n    return(sqrt(x * x + y * y));\n}\n\nint main(void){\n    int xp1, yp1, xp2, yp2, *xp, *yp;\n    int q, i;\n    float error = 1.0E-8, *x, *y, a;\n    \n    scanf(\"%d %d %d %d\", &xp1, &yp1, &xp2, &yp2);\n    scanf(\"%d\", &q);\n    \n    xp = (int *)malloc(sizeof(int) * q);\n    yp = (int *)malloc(sizeof(int) * q);\n    x = (float *)malloc(sizeof(float) * q);\n    y = (float *)malloc(sizeof(float) * q);\n    \n    for(i = 0; i < q; i ++){\n        scanf(\"%d %d\", &xp[i], &yp[i]);\n    }\n    \n    for(i = 0; i < q; i ++){\n        a = dot(xp2 - xp1, yp2 - yp1, xp1 - xp[i], yp1 - yp[i]) / (scalar(xp2 - xp1, yp2 - yp1) * scalar(xp2 - xp1, yp2 - yp1));\n        x[i] = xp1 + a * (xp1 - xp2);\n        y[i] = yp1 + a * (yp1 - yp2);\n        \n        printf(\"%f %f\\n\", x[i], y[i]);\n    }\n    \n    free(xp);\n    free(yp);\n    free(x);\n    free(y);\n    \n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nstruct points {\n\tdouble x;\n\tdouble y;\n};\nint main(void) {\n\t\n\t\n\tstruct points eigenvector;\n\tint p1x, p1y, p2x, p2y, px, py;\n\tint q;\n\tint i;\n\t\tscanf(\"%d,%d,%d,%d\", &p1x, &p1y, &p2x, &p2y);\n\t\tstruct points p1, p2;\n\t\tp1.x = p1x;\n\t\tp1.y = p1y;\n\t\t\n\t\tp2.x = p2x;\n\t\tp2.y = p2y;\n\t\tdouble length = sqrt((p1.x - p2.x)*(p1.x - p2.x)+ (p1.y - p2.y)*(p1.y - p2.y));\n\t\teigenvector.x = (p1.x - p2.x) / length;\n\t\teigenvector.y = (p1.y - p2.y) / length;\n\t\t\n\t\tscanf(\"%d\",  &q);\n\t\t\n\t\tfor ( i = 0; i < q; ++i) {\n\t\t\tscanf(\"%d,%d\", &px, &py);\n\t\t\tdouble  returnqx, returnqy;\n\t\t\tdouble length1 = (px - p1.x)*eigenvector.x + (py - p1.y)*eigenvector.y;\n\t\t\tprintf(\"%.10f,%.10f\", p1.x+ length1*eigenvector.x, p1.y + length1*eigenvector.y);\n\n\t\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble dot(double x1, double y1, double x2, double y2){\n    return(x1 * x2 + y1 * y2);\n}\n\ndouble scalar(double x, double y){\n    return(sqrt(x * x + y * y));\n}\n\nint main(void){\n    int xp1, yp1, xp2, yp2, *xp, *yp;\n    int q, i;\n    float error = 1.0E-8, *x, *y, a;\n    \n    scanf(\"%d %d %d %d\", &xp1, &yp1, &xp2, &yp2);\n    scanf(\"%d\", &q);\n    \n    xp = (int *)malloc(sizeof(int) * q);\n    yp = (int *)malloc(sizeof(int) * q);\n    x = (float *)malloc(sizeof(float) * q);\n    y = (float *)malloc(sizeof(float) * q);\n    \n    for(i = 0; i < q; i ++){\n        scanf(\"%d %d\", &xp[i], &yp[i]);\n    }\n    \n    for(i = 0; i < q; i ++){\n        a = dot(xp2 - xp1, yp2 - yp1, xp1 - xp[i], yp1 - yp[i]) / (scalar(xp2 - xp1, yp2 - yp1) * scalar(xp2 - xp1, yp2 - yp1));\n        x[i] = xp1 + a * (xp1 - xp2);\n        y[i] = yp1 + a * (yp1 - yp2);\n        \n        printf(\"%f %f\\n\", x[i], y[i]);\n    }\n    \n    free(xp);\n    free(yp);\n    free(x);\n    free(y);\n    \n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nint main(){\n    int n,ax,ay,bx,by,cx,cy;\n    double t,x,y;\n    scanf(\"%d%d%d%d\",&ax,&ay,&bx,&by);\n    scanf(\"%d\",&n);\n    while(n--){\n        scanf(\"%d%d\",&cx,&cy);\n        t=((ax-bx)*(ax-cx)+(ay-by)*(ay-cy))/(pow(ax-bx,2)+pow(ay-by,2));\n        x=ax+t*(bx-ax);\n        y=ay+t*(by-ay);\n        printf(\"%.10f %.10f\\n\",x,y);\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n  \nint main(void)\n{\n int xp1, yp1, xp2, yp2;\n int q;\n int xp, yp;\n int i = 1;\n double x, y;\n double k;\n double l;\n  \n scanf(\"%d%d%d%d\", &xp1, &yp1, &xp2, &yp2);\n scanf(\"%d\", &q);\n  \n do {\n scanf(\"%d%d\", &xp, &yp);\n  \n k = (xp - xp1) * (xp2 - xp1) +(yp - yp1) * (yp2 - yp1);\n l = (xp2 -xp1) * (xp2 - xp1) + (yp2 - yp1) * (yp2 -yp1);\n x = xp1 + k / l * (xp2 - xp1);\n y = yp1 + k / l * (yp2 - yp1);\n  \n printf(\"%.10f %.10f\\n\", x, y);\n  \n i = i++;\n } while(i <= q);\n  \n return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n  \nint main(void)\n{\n int xp1, yp1, xp2, yp2;\n int q;\n int xp, yp;\n int i = 1;\n double x, y;\n double k;\n  \n scanf(\"%d%d%d%d\", &xp1, &yp1, &xp2, &yp2);\n scanf(\"%d\", &q);\n  \n do {\n scanf(\"%d%d\", &xp, &yp);\n  \n k = (xp2 - xp1) * (xp2 - xp1) +(yp2 - yp1) * (yp2 - yp1);\n k = k / (xp * (xp2 - xp1) + yp * (yp2 - yp1));\n x = (xp2 - xp1) / k;\n y = (yp2 - yp1) / k;\n  \n printf(\"%.10f %.10f\\n\", x, y);\n  \n i = i++;\n } while(i <= q);\n  \n return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n  \nint main(void)\n{\n int xp1, yp1, xp2, yp2;\n int q;\n int xp, yp;\n int i = 1;\n double x, y;\n double k;\n  \n scanf(\"%d%d\", &xp1, &yp1);\n scanf(\"%d%d\", &xp2, &yp2);\n scanf(\"%d\", &q);\n  \n do {\n scanf(\"%d%d\", &xp, &yp);\n  \n k = ((xp2 - xp1) * (xp2 - xp1) +(yp2 - yp1) * (yp2 - yp1)) / (xp * (xp2 - xp1) + yp * (yp2 - yp1));\n x = (xp2 - xp1) / k;\n y = (yp2 - yp1) / k;\n  \n printf(\"%.10f %.10f\\n\", x, y);\n  \n i = i++;\n } while(i < q);\n  \n return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\n\nint main() {\n    int x, y, x0, y0, x1, y1;\n    int q;\n    double v0x, v0y, vx, vy, k, v0d;\n\n    scanf(\"%d %d %d %d\", &x0, &y0, &x1, &y1);\n    scanf(\"%d\", &q);\n\n    v0x = x1 - x0;\n    v0y = y1 - y0;\n    v0d = v0x*v0x+v0y*v0y;\n    while (q--) {\n        scanf(\"%d %d\", &x, &y);\n        vx = x - x0;\n        vy = y - y0;\n        k = (v0x * vx + v0y * vy)/v0d;\n        printf(\"%.10f %.10f\\n\", x0+k*v0x, y0+k*v0y);\n    }\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nstruct points {\n\tdouble x;\n\tdouble y;\n};\nint main(void) {\n\t\n\t\n\tstruct points eigenvector;\n\tint p1x, p1y, p2x, p2y, px, py;\n\tint q;\n\tint i;\n\t\tscanf(\"%d,%d\", &p1x, &p1y, &p2x, &p2y);\n\t\tstruct points p1, p2;\n\t\tp1.x = p1x;\n\t\tp1.y = p1y;\n\t\t\n\t\tp2.x = p2x;\n\t\tp2.y = p2y;\n\t\tdouble length = sqrt((p1.x - p2.x)*(p1.x - p2.x)+ (p1.y - p2.y)*(p1.y - p2.y));\n\t\teigenvector.x = (p1.x - p2.x) / length;\n\t\teigenvector.y = (p1.y - p2.y) / length;\n\t\t\n\t\tscanf(\"%d\",  &q);\n\t\t\n\t\tfor ( i = 0; i < q; ++i) {\n\t\t\tscanf(\"%d,%d\", &px, &py);\n\t\t\tdouble  returnqx, returnqy;\n\t\t\tdouble length1 = (px - p1.x)*eigenvector.x + (py - p1.y)*eigenvector.y;\n\t\t\tprintf(\"%.10f,%.10f\", p1.x+ length1*eigenvector.x, p1.y + length1*eigenvector.y);\n\n\t\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n \nint main(void)\n{\n int xp1, yp1, xp2, yp2;\n int q;\n int xp, yp;\n int i = 1;\n double x, y;\n double k;\n \n scanf(\"%d%d\", &xp1, &yp1);\n scanf(\"%d%d\", &xp2, &yp2);\n scanf(\"%d\", &q);\n \n do {\n scanf(\"%d%d\", &xp, &yp);\n \n k = ((xp2 - xp1) * (xp2 - xp1) +(yp2 - yp1) * (yp2 - yp1))(xp * (xp2 - xp1) + yp * (yp2 - yp1));\n x = (xp2 - xp1) / k;\n y = (yp2 - yp1) / k;\n \n printf(\"%lf %lf\", x, y);\n \n i = i++;\n } while(i < q);\n \n return 0;\n \n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nint main(void){\n   double a, b, c, d, i1, j1, i2, j2, x, y;\n   int n;\n   scanf(\"%lf %lf %lf %lf\", &a, &b, &c, &d);\n   if(a != c && b != d){\n       i1 = (d - b)/(c - a);\n       j1 = b - i1 * a;\n       i2 = -1 / i1;\n       scanf(\"%d\", &n);\n       for(c = 0; c < n; c++){\n           scanf(\"%lf %lf\", &a, &b);\n           j2 = b - i2 * a;\n           x = (j1 - j2)/(i2 - i1);\n           y = i2 * x + j2;\n           printf(\"%.10f %.10f\\n\", x, y);\n       }\n    }else if(a == c){\n        scanf(\"%d\", &n);\n        for(d = 0; d < n; d++){\n           scanf(\"%lf %lf\", &a, &b);\n           printf(\"%.10f %.10f\\n\", c, b);\n       }\n    }else{\n        scanf(\"%d\", &n);\n        for(c = 0; c < n; c++){\n           scanf(\"%lf %lf\", &a, &b);\n           printf(\"%.10f %.10f\\n\", a, d);\n       }\n    }\n    return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n\nint main()\n{\n    int n;\n    double x1,y1,x2,y2,x,y,a,b,dx,dy,xy,x2y2;\n\n    scanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n\n    dx = x1-x2;\n    dy = y1-y2;\n    xy = x1*y2 - x2*y1;\n    x2y2 = dy*dy + dx*dx;\n    \n    scanf(\"%d\",&n);\n    for(int i=0; i<n; i++)\n    {\n        scanf(\"%lf %lf\",&a,&b);\n\n        x = (dx*(a*dx+b*dy) - dy*xy) / x2y2;\n        y = (xy*dx + (a*dx+b*dy)*dy) / x2y2;\n\n        if(x == -0.0) x = 0.0;\n        if(y == -0.0) y = 0.0;\n\n        printf(\"%.11lf %.11lf\\n\",x,y);\n    }\n\n    return 0;\n\n}\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nstruct points {\n\tdouble x;\n\tdouble y;\n};\nint main(void) {\n\t\n\t\n\tstruct points eigenvector;\n\tint p1x, p1y, p2x, p2y, px, py; \n\tdouble length;\n\tint q;\n\tint i;\n\t\tscanf(\"%d%d%d%d\",&p1x,&p1y,&p2x,&p2y);\n\t\tstruct points p1, p2;\n\t\tp1.x = p1x;\n\t\tp1.y = p1y;\n\t\t\n\t\tp2.x = p2x;\n\t\tp2.y = p2y;\n\t length = sqrt((p1.x - p2.x)*(p1.x - p2.x)+ (p1.y - p2.y)*(p1.y - p2.y));\n\t\teigenvector.x = (p2.x - p1.x) / length;\n\t\teigenvector.y = (p2.y - p1.y) / length;\n\t\t\n\t\tscanf(\"%d\",&q);\n\t\t\n\t\tfor ( i = 0; i < q; ++i) {\n\t\t\tscanf(\"%d%d\", &px, &py);\n\t\t\t//double  returnqx, returnqy;\n\t\t\tdouble length1 = (px - p1.x)*eigenvector.x + (py - p1.y)*eigenvector.y;\n\t\t\tprintf(\"%.10f,%.10f\\n\", p1.x+ length1*eigenvector.x, p1.y + length1*eigenvector.y);\n\n\t\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "// AOJ CGL_1_A Projection\n// 2018.5.2 bal4u\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ntypedef struct { double x, y; } PP;\ntypedef struct { PP s, e; } SEG, LINE;\n\n#define INF\t\t\t1e8\n#define EPS\t\t\t1e-8\n#define EQ(a,b)\t\t(fabs((a)-(b))<EPS)\n#define PPeQ(a,b)\t(EQ(a.x,b.x)&&EQ(a.y,b.y))\n\nint dcmp(double x) { if (fabs(x) < EPS) return 0; return x <= 0 ? -1 : 1; }\nPP vset(double x, double y) { PP r; r.x = x, r.y = y; return r; }\nPP vadd(PP p1, PP p2) { PP r; r.x = p1.x + p2.x, r.y = p1.y + p2.y; return r; }\nPP vsub(PP p1, PP p2) { PP r; r.x = p1.x - p2.x, r.y = p1.y - p2.y; return r; }\nPP vsmul(PP p, double k) { PP r; r.x = p.x * k, r.y = p.y * k; return r; }\nPP vmul(PP p1, PP p2) { PP r;\n\tr.x = p1.x * p2.x - p1.y * p2.y, r.y = p1.x * p2.y + p1.y * p2.x; return r; }\ndouble vabs(PP a) { return hypot(a.x, a.y); }\ndouble dist(PP p1, PP p2) {\treturn hypot(p1.x-p2.x, p1.y-p2.y); };\ndouble cross(PP a, PP b) { return a.x * b.y - a.y * b.x; }\ndouble dot(PP a, PP b) { return a.x * b.x + a.y * b.y; }\ndouble norm(PP a) { return a.x * a.x + a.y * a.y; }\n\n#if 1\n#define gc() getchar_unlocked()\n#else\n#define gc() getchar()\n#endif\nint in()\n{\n\tint n = 0, c = gc();\n\tif (c == '-') {\tc = gc();\n\t\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\t\treturn -n;\n\t}\n\tdo n = 10*n + (c & 0xf), c = gc(); while (c >= '0');\n\treturn n;\n}\n\nint main()\n{\n\tint q;\n\tPP p1, p2, p, p2p1, pp1, pp;\n\n\tp1.x = in(), p1.y = in(), p2.x = in(), p2.y = in();\n\tp2p1 = vsub(p2, p1);\n\t\n\tq = in();\n\twhile (q--) {\n\t\tp.x = in(), p.y = in();\n\t\tpp1 = vsub(p, p1);\n\t\tpp = vadd(p1, vsmul(p2p1, dot(pp1, p2p1)/norm(p2p1)));\n\t\tprintf(\"%.10lf %.10lf\\n\", pp.x, pp.y);\n\t}\n\treturn 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ntypedef struct Point {\n\tdouble x;\n\tdouble y;\n} Point;\n\ntypedef struct Vector {\n\tstruct Point point;\n\tdouble size;\n} Vector;\n\nPoint VectorAddition(Point, Point, int);\ndouble Vectormultiplication(Point, Point);\ndouble VectorSize(Point);\n\nint main(void) {\n\n\tPoint point1, point2, point3, ans;\n\tVector vector1, vector2;\n\tint q, i;\n\n\tscanf(\"%lf %lf %lf %lf %d\", &point1.x, &point1.y, &point2.x, &point2.y, &q);\n\n\tvector1.point.x = point2.x - point1.x;\n\tvector1.point.y = point2.y - point1.y;\n\tvector1.size = sqrt(pow(vector1.point.x, 2) + pow(vector1.point.y, 2));\n\n\tfor (i = 0; i < q; i++) {\n\n\t\tscanf(\"%lf %lf\", &point3.x, &point3.y);\n\n\t\tvector2.point = VectorAddition(point1, point3, 2);\n\t\tvector2.size = VectorSize(vector2.point);\n\n\t\tans.x = Vectormultiplication(vector1.point, vector2.point) / pow(vector1.size, 2) * vector1.point.x;\n\t\tans.y = Vectormultiplication(vector1.point, vector2.point) / pow(vector1.size, 2) * vector1.point.y;\n\n\t\tprintf(\"%lf %lf\\n\", ans.x, ans.y);\n\t}\n\n\treturn 0;\n}\n\nPoint VectorAddition(Point p1, Point p2, int sign) {\n\tPoint point;\n\tswitch (sign) {\n\tcase 1:\n\t\tpoint.x = p2.x + p1.x;\n\t\tpoint.y = p2.y + p1.y;\n\t\tbreak;\n\tcase 2:\n\t\tpoint.x = p2.x - p1.x;\n\t\tpoint.y = p2.y - p1.y;\n\t\tbreak;\n\t}\n\treturn point;\n}\n\ndouble Vectormultiplication(Point p1, Point p2) {\n\tPoint point;\n\tdouble i;\n\tpoint.x = p1.x * p2.x;\n\tpoint.y = p1.y * p2.y;\n\ti = point.x + point.y;\n\treturn i;\n}\n\ndouble VectorSize(Point p) {\n\treturn sqrt(pow(p.x, 2) + pow(p.y, 2));\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n\treturn a;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n//\n\n\nint main(){\n\t\n/*\n\tPOINT a,b,q;\n\tdouble t,s;\n\n\tscanf(\"%lf%lf%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y,&t,&s);\n\n\tq = division(a,b,t,s,0);\n\tprintf(\"%lf %lf\\n\",q.x,q.y);\n*/\n\n\tLINE a;\n\tPOINT b,ans;\n\tint k;\n\t\n\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\n\twhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tans = perpendicular(a,b);\n\t\tprintf(\"%.10lf %.10lf\\n\",ans.x,ans.y);\n\t}\n\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n\ntypedef long long int int64;\n\n#define MAX(a,b) ((a)>(b)?(a):(b))\n#define MIN(a,b) ((a)<(b)?(a):(b))\n#define ABS(a) ((a)>(0)?(a):-(a))\n\nvoid run(void){\n  int a,b,c,d;\n  scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n  int p=c-a;\n  int q=d-b;\n  double norm=p*p+q*q;\n  int query;\n  scanf(\"%d\",&query);\n  while(query--){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    x-=a;\n    y-=b;\n    double innerNorm=p*x+q*y;\n    double xx=a+p*innerNorm/norm;\n    double yy=b+q*innerNorm/norm;\n    printf(\"%.9lf %.9lf\\n\",xx,yy);\n  }\n}\n\nint main(void){\n  run();\n  return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nstruct points {\n\tdouble x;\n\tdouble y;\n};\nint main(void) {\n\t\n\t\n\tstruct points eigenvector;\n\tint p1x, p1y, p2x, p2y, px, py; \n\tdouble length;\n\tint q;\n\tint i;\n\t\tscanf(\"%d%d%d%d\",&p1x,&p1y,&p2x,&p2y);\n\t\tstruct points p1, p2;\n\t\tp1.x = p1x;\n\t\tp1.y = p1y;\n\t\t\n\t\tp2.x = p2x;\n\t\tp2.y = p2y;\n\t length = sqrt((p1.x - p2.x)*(p1.x - p2.x)+ (p1.y - p2.y)*(p1.y - p2.y));\n\t\teigenvector.x = (p1.x - p2.x) / length;\n\t\teigenvector.y = (p1.y - p2.y) / length;\n\t\t\n\t\tscanf(\"%d\",&q);\n\t\t\n\t\tfor ( i = 0; i < q; ++i) {\n\t\t\tscanf(\"%d%d\", &px, &py);\n\t\t\t//double  returnqx, returnqy;\n\t\t\tdouble length1 = (px - p1.x)*eigenvector.x + (py - p1.y)*eigenvector.y;\n\t\t\tprintf(\"%.10f,%.10f\\n\", p1.x+ length1*eigenvector.x, p1.y + length1*eigenvector.y);\n\n\t\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n  \nint main(void)\n{\n int xp1, yp1, xp2, yp2;\n int q;\n int xp, yp;\n int i = 1;\n double x, y;\n double k;\n  \n scanf(\"%d%d\", &xp1, &yp1);\n scanf(\"%d%d\", &xp2, &yp2);\n scanf(\"%d\", &q);\n  \n do {\n scanf(\"%d%d\", &xp, &yp);\n  \n k = (double(xp2) - xp1) * (xp2 - xp1) +(yp2 - yp1) * (yp2 - yp1);\n k = k / (xp * (xp2 - xp1) + yp * (yp2 - yp1));\n x = (xp2 - xp1) / k;\n y = (yp2 - yp1) / k;\n  \n printf(\"%.10f %.10f\\n\", x, y);\n  \n i = i++;\n } while(i <= q);\n  \n return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "    #include<stdio.h>\n    int main()\n    {\n        double x1,x2,x3,y1,y2,y3,q,m1,c1,c2,X,Y,m2,i;\n        scanf(\"%lf %lf %lf %lf\",&x1,&y1,&x2,&y2);\n        scanf(\"%lf\",&q);\n        for(i=0;i<q;i++)\n        {\n            scanf(\"%lf %lf\",&x3,&y3);\n            if(x1==x2)\n            {\n                X=x2;\n                Y=y3;\n            }\n            else if(y1==y2)\n            {\n                Y=y1;\n                X=x3;\n            }\n            else\n            {\n                m1=(y1-y2)/(x1-x2);\n                c1=y1-m1*x1;\n                m2=-1/m1;\n                c2=y3-m2*x3;\n                X=(c2-c1)/(m1-m2);\n                Y=m2*X+c2;}\n            printf(\"%.10lf %.10lf\\n\",X,Y);\n        }\n    \treturn 0;\n    }\n\n  // ALHAMDULLIAH\n\n\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nstruct points {\n\tdouble x;\n\tdouble y;\n};\nint main(void) {\n\t\n\t\n\tstruct points eigenvector;\n\tint p1x, p1y, p2x, p2y, px, py; \n\tdouble length;\n\tint q;\n\tint i;\n\t\tscanf(\"%d%d%d%d\",&p1x,&p1y,&p2x,&p2y);\n\t\tstruct points p1, p2;\n\t\tp1.x = p1x;\n\t\tp1.y = p1y;\n\t\t\n\t\tp2.x = p2x;\n\t\tp2.y = p2y;\n\t length = sqrt((p1.x - p2.x)*(p1.x - p2.x)+ (p1.y - p2.y)*(p1.y - p2.y));\n\t\teigenvector.x = (p1.x - p2.x) / length;\n\t\teigenvector.y = (p1.y - p2.y) / length;\n\t\t\n\t\tscanf(\"%d\",&q);\n\t\t\n\t\tfor ( i = 0; i < q; ++i) {\n\t\t\tscanf(\"%d%d\", &px, &py);\n\t\t\t//double  returnqx, returnqy;\n\t\t\tdouble length1 = (px - p1.x)*eigenvector.x + (py - p1.y)*eigenvector.y;\n\t\t\tprintf(\"%.10f,%.10f\", p1.x+ length1*eigenvector.x, p1.y + length1*eigenvector.y);\n\n\t\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\nint main(void){\n  double xp1,xp2,yp1,yp2,xp,yp;\n  int q;\n  scanf(\"%lf %lf %lf %lf\",&xp1,&yp1,&xp2,&yp2);\n  scanf(\"%d\",&q);\n  double v1x,v1y;\n  v1x=(xp2-xp1)/sqrt((yp2-yp1)*(yp2-yp1)+(xp2-xp1)*(xp2-xp1));\n  v1y=(yp2-yp1)/sqrt((yp2-yp1)*(yp2-yp1)+(xp2-xp1)*(xp2-xp1));\n  double dot;\n  for(int i=0;i<q;i++){\n    scanf(\"%lf %lf\",&xp,&yp);\n    dot=(xp-xp1)*v1x+(yp-yp1)*v1y;\n    printf(\"%.16f %.16f\\n\",xp1+dot*v1x,yp1+dot*v1y);\n  }\n  return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nvoid ashi(int p0[2],int p1[2],int p2[2],double *x,double *y){\n  int x1=p1[0]-p0[0],x2=p2[0]-p0[0],y1=p1[1]-p0[1],y2=p2[1]-p0[1];\n  *x=1.0*(x1*x2+y1*y2)/(x1*x1+y1*y1)*x1+p0[0];\n  *y=1.0*(x1*x2+y1*y2)/(x1*x1+y1*y1)*y1+p0[1];\n}\nint main(){\n  int p[3][2],n;\n  double x,y;\n  for(n=0;n<4;n++)scanf(\"%d\",&p[n/2][n%2]);\n  scanf(\"%d\",&n);\n  while(n--){\n    scanf(\"%d %d\",&p[2][0],&p[2][1]);\n    ashi(p[0],p[1],p[2],&x,&y);\n    printf(\"%.9f %.9f\\n\",x,y);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n#define max(a,b) a<b?b:a\n#define min(a,b) a<b?b:a\n#define POW2(a)  a*a\n#define ROOP(i,n) for(i = 0;i < n;i++)\n#define _USE_MATH_DEFINES\n\ntypedef struct POINT{\n\tdouble x;\n\tdouble y;\n}POINT;\ntypedef struct LINE{\n\tPOINT s;//start point\n\tPOINT e;//end point\n}LINE;\ntypedef struct COMPLEX{\n\tdouble r;//?????¢\n\tdouble q;//????§???????theta\n}COMPLEX;\n\n//POINT????????????\nvoid print_p(POINT a){\n\tprintf(\"(%lf,%lf)\\n\",a.x,a.y);\n}\n\n//LINE????????????\nvoid print_l(LINE a){\n\tprintf(\"(%lf,%lf) -> (%lf,%lf)\\n\",(a.s).x,(a.s).y,(a.e).x,(a.e).y);\n}\n\n//COMPLEX????????????\nvoid print_c(COMPLEX a){\n\tprintf(\"(%lf,%lf)\\n\",a.r,a.q);\n}\n\n//????????????????????¢?????????\ndouble norm2(POINT a){\n\treturn POW2(a.x)+POW2(a.y);\n}\n\n//????????????????????¢\ndouble norm(POINT a){\n\treturn sqrt(norm2(a));\n}\n\n//a->b?????´??§???????????????\nPOINT make_vec(POINT a,POINT b){\n\tb.x -= a.x;\n\tb.y -= a.y;\n\treturn b;\n}\n\n//2???a,b???????????¢\ndouble distance(POINT a,POINT b){\n\treturn norm(make_vec(a,b));\n}\n\n//??´??§????????????\nPOINT sum_vec(POINT a,POINT b){\n\ta.x += b.x;\n\ta.y += b.y;\n\treturn a;\n}\n\n//??´??§????????????\n//mkae_vec??¨?????£??????????????¨???????????????\n//??????????????????\nPOINT dif_vec(POINT a,POINT b){\n\ta.x -= b.x;\n\ta.y -= b.y;\n\treturn a;\n}\n\n//??´??§????????????????????????\nPOINT scalar_vec(POINT a,double k){\n\ta.x *= k;\n\ta.y *= k;\n\treturn a;\n}\n\n//???????????????\nPOINT minus_vec(POINT a){\n\treturn scalar_vec(a,-1.0);\n}\n\n//??????\ndouble dot(POINT a,POINT b){\n\treturn a.x*b.x + a.y*b.y;\n}\n\n//??????\ndouble cross(POINT a,POINT b){\n\treturn a.x*b.y - a.y*b.x;\n}\n\n//AP:PB=t:s??¨?????????????±???????\n//k, 0:??????, 1:??????\n//* t:(1-t)??§???????????£??????????????£????????????????????????????????????????????????????????¨?????£???\nPOINT division(POINT a,POINT b,double t,double s,int k){\n\tdouble tmp = t + s * (1 - k*2);\n\ta.x += (make_vec(a,b)).x / tmp * t;\n\ta.y += (make_vec(a,b)).y / tmp * t;\n}\n\n//???p????????´???a?????????????????????????¶??????????\nPOINT perpendicular(LINE a,POINT p){\n\tPOINT ps = make_vec(p,a.s);\n\tPOINT pe = make_vec(p,a.e);\n\tdouble t = norm2(ps) - dot(ps,pe);\n\tdouble s = norm2(pe) - dot(ps,pe);\n\treturn division(a.s,a.e,t,s,0);\n}\n\n//??´???a???????????????p??¨????§°???????????????\nPOINT reflection(LINE a,POINT p){\n\tPOINT h = perpendicular(a,p);\n\treturn sum_vec(h,make_vec(p,h));\n}\n\n//* ????§???¢?????????\nint inclusion(POINT a[],int n,POINT p){\n\tint ans = 0;\n\tint i;\n\tPOINT g[n+1];\n\tdouble w,rad = 0.0;\n\n\tfor(i = 0;i < n;i++){\n\t\tg[i] = a[i];\n\t}\n\tg[n] = g[0];\n\n\tfor(i = 0;i < n;i++){\n\t\tif(g[i].x == p.x && g[i].y == p.y){\n\t\t\treturn ans = 1;\n\t\t}\n\t}\n\tfor(i = 0;i < n;i++){\n\t\tw = atan2(cross(make_vec(p,g[i]),make_vec(p,g[i+1])),\n\t\t\t\tdot(make_vec(p,g[i]),make_vec(p,g[i+1])));\n\t\trad += w;\n\t\tif(fabs(w - M_PI) <= 0.000001 ||\n\t\t\t fabs(w + M_PI) <= 0.000001)\n\t\t\treturn ans = 1;\n\t}\n\tif(fabs(rad - M_PI*2)<=0.000001){//2??\n\t\treturn ans = 2;//in!\n\t}\n\treturn ans;\n}\n\n//\n\n\nint main(){\n\tLINE a;\nPOINT b,ans;\n\tint k;\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.s.x,&a.s.y,&a.e.x,&a.e.y,&k);\nwhile(k--){\n\t\tscanf(\"%lf%lf\",&b.x,&b.y);\n\t\tans = perpendicular(a,b);\n\t\tprintf(\"%lf %lf\\n\",ans.x,ans.y);\n\t}\n/*\n\tPOINT a,b;\n\tint k;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf%d\",&a.x,&a.y,&b.x,&b.y,&k);\n\t\tprint_p(sum_vec(a,b));\n\t\tprint_p(dif_vec(a,b));\n\t\tprint_p(scalar_vec(a,k));\n\t\tprint_p(minus_vec(a));\n\t}\n*/\n/*\n\tPOINT a,b;\n\twhile(1){\n\t\tscanf(\"%lf%lf%lf%lf\",&a.x,&a.y,&b.x,&b.y);\n\t\tprintf(\"%lf\\n\",distance(a,b));\n\t}\n*/\n/*\n\tint i,m,n;\n\tPOINT g[100];//n\n\tPOINT q;//m\n\tint ans = 0;\n\n\tscanf(\"%d\",&n);\n\tfor(i = 0;i < n;i++){\n\t\tscanf(\"%lf%lf\",&g[i].x,&g[i].y);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i = 0;i < m;i++){\n\t\tscanf(\"%lf%lf\",&q.x,&q.y);\n\t\tans = inclusion(g,n,q);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n*/\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<math.h>\nstruct points {\n\tdouble x;\n\tdouble y;\n};\nint main(void) {\n\t\n\t\n\tstruct points eigenvector;\n\tint p1x, p1y, p2x, p2y, px, py;\n\tint q;\n\tint i;\n\t\tscanf(\"%d,%d\", &p1x, &p1y, &p2x, &p2y);\n\t\tstruct points p1, p2;\n\t\tp1.x = p1x;\n\t\tp1.y = p1y;\n\t\t\n\t\tp2.x = p2x;\n\t\tp2.y = p2y;\n\t\tdouble length = sqrt((p1.x - p2.x)*(p1.x - p2.x)+ (p1.y - p2.y)*(p1.y - p2.y));\n\t\teigenvector.x = (p1.x - p2.x) / length;\n\t\teigenvector.y = (p1.y - p2.y) / length;\n\t\t\n\t\tscanf(\"%d\",  &q);\n\t\t\n\t\tfor ( i = 0; i < q; ++i) {\n\t\t\tscanf(\"%d,%d\", &px, &py);\n\t\t\tdouble  returnqx, returnqy;\n\t\t\tprintf(\"%.10f,%.10f\", p1.x+(px - p1.x)*eigenvector.x, p1.y + (py - p1.y)*eigenvector.y);\n\n\t\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble dot(double x1, double y1, double x2, double y2){\n    return(x1 * x2 + y1 * y2);\n}\n\ndouble scalar(double x, double y){\n    return(sqrt(x * x + y * y));\n}\n\nint main(void){\n    int xp1, yp1, xp2, yp2, *xp, *yp;\n    int q, i;\n    float error = 1.0E-8, *x, *y, a;\n    \n    scanf(\"%d %d %d %d\", &xp1, &yp1, &xp2, &yp2);\n    scanf(\"%d\", &q);\n    \n    xp = (int *)malloc(sizeof(int) * q);\n    yp = (int *)malloc(sizeof(int) * q);\n    x = (float *)malloc(sizeof(float) * q);\n    y = (float *)malloc(sizeof(float) * q);\n    \n    for(i = 0; i < q; i ++){\n        scanf(\"%d %d\", &xp[i], &yp[i]);\n    }\n    \n    for(i = 0; i < q; i ++){\n        a = dot(xp2 - xp1, yp2 - yp1, xp1 - xp[i], yp1 - yp[i]) / (scalar(xp2 - xp1, yp2 - yp1) * scalar(xp2 - xp1, yp2 - yp1));\n        x[i] = xp1 + a * (xp1 - xp2);\n        y[i] = yp1 + a * (yp1 - yp2);\n        \n        printf(\"%f %f\\n\", x[i], y[i]);\n    }\n    \n    free(xp);\n    free(yp);\n    free(x);\n    free(y);\n    \n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n  \nint main(void)\n{\n int xp1, yp1, xp2, yp2;\n int q;\n int xp, yp;\n int i = 1;\n double x, y;\n double k;\n  \n scanf(\"%d%d\", &xp1, &yp1);\n scanf(\"%d%d\", &xp2, &yp2);\n scanf(\"%d\", &q);\n  \n do {\n scanf(\"%d%d\", &xp, &yp);\n  \n k = ((xp2 - xp1) * (xp2 - xp1) +(yp2 - yp1) * (yp2 - yp1))(xp * (xp2 - xp1) + yp * (yp2 - yp1));\n x = (xp2 - xp1) / k;\n y = (yp2 - yp1) / k;\n  \n printf(\"%.10f %.10f\\n\", x, y);\n  \n i = i++;\n } while(i < q);\n  \n return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble dot(double x1, double y1, double x2, double y2){\n    return(x1 * x2 + y1 * y2);\n}\n\ndouble scalar2(double x, double y){\n    return(x * x + y * y);\n}\n\nint main(void){\n    int xp1, yp1, xp2, yp2, *xp, *yp;\n    int q, i;\n    float error = 1.0E-8, *x, *y, a;\n    \n    scanf(\"%d %d %d %d\", &xp1, &yp1, &xp2, &yp2);\n    scanf(\"%d\", &q);\n    \n    xp = (int *)malloc(sizeof(int) * q);\n    yp = (int *)malloc(sizeof(int) * q);\n    x = (float *)malloc(sizeof(float) * q);\n    y = (float *)malloc(sizeof(float) * q);\n    \n    for(i = 0; i < q; i ++){\n        scanf(\"%d %d\", &xp[i], &yp[i]);\n    }\n    \n    for(i = 0; i < q; i ++){\n        a = dot(xp2 - xp1, yp2 - yp1, xp1 - xp[i], yp1 - yp[i]) / (scalar2(xp2 - xp1, yp2 - yp1));\n        x[i] = xp1 + a * (xp1 - xp2);\n        y[i] = yp1 + a * (yp1 - yp2);\n        \n        printf(\"%f %f\\n\", x[i], y[i]);\n    }\n    \n    free(xp);\n    free(yp);\n    free(x);\n    free(y);\n    \n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n   \nint main(void)\n{\n int xp1, yp1, xp2, yp2;\n int q;\n int xp, yp;\n int i = 1;\n double x, y;\n double k;\n   \n scanf(\"%d%d%d%d\", &xp1, &yp1, &xp2, &yp2);\n scanf(\"%d\", &q);\n   \n do {\n scanf(\"%d%d\", &xp, &yp);\n   \n k = (xp2 - xp1) * (xp2 - xp1) +(yp2 - yp1) * (yp2 - yp1);\n k = k / (xp * (xp2 - xp1) + yp * (yp2 - yp1));\n x = (xp2 - xp1) / k + xp1;\n y = (yp2 - yp1) / k + yp1;\n   \n printf(\"%.10f %.10f\\n\", x, y);\n   \n i = i++;\n } while(i <= q);\n   \n return 0;\n   \n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>          // printf(), scanf()\n\nint\nmain(int argc, char** argv)\n{\n\tdouble sx, sy;\n\tdouble tx, ty;\n\tint q;\n\tint x, y;\n\tint x1, y1, x2, y2;\n\tint i;\n\n\tscanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n\tsx = x1, sy = y1;\n\ttx = x2, ty = y2;\n\n\tscanf(\"%d\", &q);\n\tfor (i = 0; i < q; ++i)\n\t{\n\t\tscanf(\"%d %d\", &x, &y);\n\t\tdouble px = x, py = y;\n\n\t\tdouble bx = tx - sx, by = ty - sy;\n\t\tdouble ax = px - sx, ay = py - sy;\n\t\tdouble r = (ax * bx + ay * by) / (bx * bx + by * by);\n\t\tdouble cx = sx + bx * r, cy = sy + by * r;\n\n\t\tprintf(\"%.10f %.10f\\n\", cx, cy);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n \nint main(void)\n{\n int xp1, yp1, xp2, yp2;\n int q;\n int xp, yp;\n int i = 1;\n double x, y;\n double k;\n \n scanf(\"%d%d\", &xp1, &yp1);\n scanf(\"%d%d\", &xp2, &yp2);\n scanf(\"%d\", &q);\n \n do {\n scanf(\"%d%d\", &xp, &yp);\n \n k = ((xp2 - xp1) * (xp2 - xp1) +(yp2 - yp1) * (yp2 - yp1))(xp * (xp2 - xp1) + yp * (yp2 - yp1));\n x = (xp2 - xp1) / k;\n y = (yp2 - yp1) / k;\n \n printf(\"%.10f %.10f\\n\", x, y);\n \n i = i++;\n } while(i < q);\n \n return 0;\n \n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ntypedef struct Point {\n\tdouble x;\n\tdouble y;\n} Point;\n\ntypedef struct Vector {\n\tstruct Point point;\n\tdouble size;\n} Vector;\n\nPoint VectorAddition(Point, Point, int);\ndouble Vectormultiplication(Point, Point);\ndouble VectorSize(Point);\ndouble Range(Point, Point);\n\nint main(void) {\n\n\tPoint point1, point2, point3, ans, k;\n\tVector vector1, vector2;\n\tint q, i, co = 0;\n\n\tscanf(\"%lf %lf %lf %lf %d\", &point1.x, &point1.y, &point2.x, &point2.y, &q);\n\n\tvector1.point = VectorAddition(point1, point2, 2);\n\tvector1.size = VectorSize(vector1.point);\n\n\tfor (i = 0; i < q; i++) {\n\n\t\tscanf(\"%lf %lf\", &point3.x, &point3.y);\n\n\t\tvector2.point = VectorAddition(point1, point3, 2);\n\t\tvector2.size = VectorSize(vector2.point);\n\n\t\tif (Range(vector1.point, vector2.point) < 0) {\n\t\t\tans.x = fabs(Vectormultiplication(vector1.point, vector2.point)) / pow(vector1.size, 2) * vector1.point.x * -1;\n\t\t\tans.y = fabs(Vectormultiplication(vector1.point, vector2.point)) / pow(vector1.size, 2) * vector1.point.y * -1;\n\t\t}\n\t\telse {\n\t\t\tans.x = fabs(Vectormultiplication(vector1.point, vector2.point)) / pow(vector1.size, 2) * vector1.point.x;\n\t\t\tans.y = fabs(Vectormultiplication(vector1.point, vector2.point)) / pow(vector1.size, 2) * vector1.point.y;\n\t\t}\n\n\t\tprintf(\"%.9lf %.9lf\\n\", ans.x, ans.y);\n\t}\n\n\treturn 0;\n}\n\nPoint VectorAddition(Point p1, Point p2, int sign) {\n\tPoint point;\n\tswitch (sign) {\n\tcase 1:\n\t\tpoint.x = p2.x + p1.x;\n\t\tpoint.y = p2.y + p1.y;\n\t\tbreak;\n\tcase 2:\n\t\tpoint.x = p2.x - p1.x;\n\t\tpoint.y = p2.y - p1.y;\n\t\tbreak;\n\t}\n\treturn point;\n\n}\n\ndouble Vectormultiplication(Point p1, Point p2) {\n\tPoint point;\n\tdouble i;\n\tpoint.x = p1.x * p2.x;\n\tpoint.y = p1.y * p2.y;\n\ti = point.x + point.y;\n\treturn i;\n}\n\ndouble VectorSize(Point p) {\n\treturn sqrt(pow(p.x, 2) + pow(p.y, 2));\n}\n\ndouble Range(Point p1, Point p2) {\n\treturn Vectormultiplication(p1, p2) / (VectorSize(p1) * VectorSize(p2));\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n  \nint main(void)\n{\n int xp1, yp1, xp2, yp2;\n int q;\n int xp, yp;\n int i = 1;\n double x, y;\n double k;\n  \n scanf(\"%d%d%d%d\", &xp1, &yp1, &xp2, &yp2);\n scanf(\"%d\", &q);\n  \n do {\n scanf(\"%d%d\", &xp, &yp);\n  \n k = (xp2 - xp1) * (xp2 - xp1) +(yp2 - yp1) * (yp2 - yp1);\n k = k / (xp * (xp2 - xp1) + yp * (yp2 - yp1));\n x = (xp2 - xp1) / k;\n y = (yp2 - yp1) / k;\n  \n printf(\"%.10f %.10f\\n\", x, y);\n  \n i = i++;\n } while(i <= q);\n  \n return 0;\n  \n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ntypedef struct Point {\n\tdouble x;\n\tdouble y;\n} Point;\n\ntypedef struct Vector {\n\tstruct Point point;\n\tdouble size;\n} Vector;\n\nPoint VectorAddition(Point, Point, int);\ndouble Vectormultiplication(Point, Point);\ndouble VectorSize(Point);\n\nint main(void) {\n\n\tPoint point1, point2, point3, ans, k;\n\tVector vector1, vector2;\n\tint q, i;\n\n\tscanf(\"%lf %lf %lf %lf %d\", &point1.x, &point1.y, &point2.x, &point2.y, &q);\n\n\tif (point1.x > point2.x) {\n\t\tk = point1;\n\t\tpoint1 = point2;\n\t\tpoint2 = k;\n\t}\n\n\tvector1.point.x = point2.x - point1.x;\n\tvector1.point.y = point2.y - point1.y;\n\tvector1.size = sqrt(pow(vector1.point.x, 2) + pow(vector1.point.y, 2));\n\n\tfor (i = 0; i < q; i++) {\n\n\t\tscanf(\"%lf %lf\", &point3.x, &point3.y);\n\n\t\tvector2.point = VectorAddition(point1, point3, 2);\n\t\tvector2.size = VectorSize(vector2.point);\n\n\t\tans.x = Vectormultiplication(vector1.point, vector2.point) / pow(vector1.size, 2) * vector1.point.x;\n\t\tans.y = Vectormultiplication(vector1.point, vector2.point) / pow(vector1.size, 2) * vector1.point.y;\n\n\t\tprintf(\"%.9lf %.9lf\\n\", ans.x, ans.y);\n\t}\n\n\treturn 0;\n}\n\nPoint VectorAddition(Point p1, Point p2, int sign) {\n\tPoint point;\n\tswitch (sign) {\n\tcase 1:\n\t\tpoint.x = p2.x + p1.x;\n\t\tpoint.y = p2.y + p1.y;\n\t\tbreak;\n\tcase 2:\n\t\tpoint.x = p2.x - p1.x;\n\t\tpoint.y = p2.y - p1.y;\n\t\tbreak;\n\t}\n\treturn point;\n\n}\n\ndouble Vectormultiplication(Point p1, Point p2) {\n\tPoint point;\n\tdouble i;\n\tpoint.x = p1.x * p2.x;\n\tpoint.y = p1.y * p2.y;\n\ti = point.x + point.y;\n\treturn i;\n}\n\ndouble VectorSize(Point p) {\n\treturn sqrt(pow(p.x, 2) + pow(p.y, 2));\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint main(void)\n{\n\tdouble adLine[2][2];\n\tdouble adDirection[2];\n\tint i, nPoint;\n\n\tfor (i = 0; i < 2; i++) {\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tadLine[i][0] = x;\n\t\tadLine[i][1] = y;\n\t}\n\n\t{\n\t\tdouble dLength;\n\t\tadDirection[0] = adLine[1][0] - adLine[0][0];\n\t\tadDirection[1] = adLine[1][1] - adLine[0][1];\n\t\tdLength = sqrt(adDirection[0] * adDirection[0] + adDirection[1] * adDirection[1]);\n\t\tadDirection[0] /= dLength;\n\t\tadDirection[1] /= dLength;\n\t}\n\n\tscanf(\"%d\", &nPoint);\n\n\tfor (i = 0; i < nPoint; i++) {\n\t\tdouble adPointVector[2], dInnerProduct, dProjection[2];\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tadPointVector[0] = x - adLine[0][0];\n\t\tadPointVector[1] = y - adLine[0][1];\n\n\t\tdInnerProduct = adPointVector[0] * adDirection[0] + adPointVector[1] * adDirection[1];\n\n\t\tdProjection[0] = adLine[0][0] + adDirection[0] * dInnerProduct;\n\t\tdProjection[1] = adLine[0][1] + adDirection[1] * dInnerProduct;\n\n\t\tprintf(\"%f %f\\n\", dProjection[0], dProjection[1]);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ndouble dot(double x1, double y1, double x2, double y2){\n    return(x1 * x2 + y1 * y2);\n}\n\ndouble scalar2(double x, double y){\n    return(x * x + y * y);\n}\n\nint main(void){\n    double xp1, yp1, xp2, yp2, *xp, *yp;\n    int q, i;\n    double *x, *y, a;\n    \n    scanf(\"%lf %lf %lf %lf\", &xp1, &yp1, &xp2, &yp2);\n    scanf(\"%d\", &q);\n    \n    xp = (double *)malloc(sizeof(double) * q);\n    yp = (double *)malloc(sizeof(double) * q);\n    x = (double *)malloc(sizeof(double) * q);\n    y = (double *)malloc(sizeof(double) * q);\n    \n    for(i = 0; i < q; i ++){\n        scanf(\"%lf %lf\", &xp[i], &yp[i]);\n    }\n    \n    for(i = 0; i < q; i ++){\n        a = dot(xp2 - xp1, yp2 - yp1, xp1 - xp[i], yp1 - yp[i]) / (scalar2(xp2 - xp1, yp2 - yp1));\n        x[i] = xp1 + a * (xp1 - xp2);\n        y[i] = yp1 + a * (yp1 - yp2);\n        \n        printf(\"%lf %lf\\n\", x[i], y[i]);\n    }\n    \n    free(xp);\n    free(yp);\n    free(x);\n    free(y);\n    \n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nvoid ashi(int p0[2],int p1[2],int p2[2],double *x,double *y){\n  int x1=p1[0]-p0[0],x2=p2[0]-p0[0],y1=p1[1]-p0[1],y2=p2[1]-p0[1];\n  *x=1.0*(x1*x2+y1*y2)/(x1*x1+y1*y1)*x1+p0[0];\n  *y=1.0*(x1*x2+y1*y2)/(x1*x1+y1*y1)*y1+p0[1];\n}\nint main(){\n  int p[3][2],n;\n  double x,y;\n  for(n=0;n<4;n++)scanf(\"%d\",&p[n/2][n%2]);\n  scanf(\"%d\",&n);\n  while(n--){\n    scanf(\"%d %d\",&p[2][0],&p[2][1]);\n    ashi(p[0],p[1],p[2],&x,&y);\n    printf(\"%f %f\\n\",x,y);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nint main(void){\n    double xp1, yp1, xp2, yp2, xp0, yp0, x, y, xp2p1, yp2p1, zp2p1;\n    int n, i;\n    scanf(\"%lf %lf %lf %lf\", &xp1, &yp1, &xp2, &yp2);\n    scanf(\"%d\", &n);\n    \n    xp2p1=xp2-xp1;\n    yp2p1=yp2-yp1;\n    \n    for(i=1; i<=n; i++){\n        scanf(\"%lf %lf\", &xp0, &yp0);\n        \n        if(xp2p1 == 0){\n            x=xp1;\n            y=yp0;\n        }\n        else if(yp2p1 == 0){\n            x=xp0;\n            y=yp1;\n        }\n        else{\n            zp2p1=yp2p1/xp2p1;\n            x=(-yp1+zp2p1*xp1+yp0+xp0/zp2p1)/(zp2p1+1/zp2p1);\n            y=-x/zp2p1+yp0+xp0/zp2p1;\n        }\n    \n        printf(\"%.10lf %.10lf\\n\", x, y);\n    }\n    return 0;\n    \n}\n\n"
  },
  {
    "language": "Kotlin",
    "code": "fun main(args: Array<String>) {\n    val (x1, y1, x2, y2) = readLine()!!.split(' ').map { it.toDouble() }\n    val s = T1A.Segment(T1A.Point(x1, y1), T1A.Point(x2, y2))\n    val q = readLine()!!.toInt()\n    repeat(q) {\n        val (x, y) = readLine()!!.split(' ').map { it.toDouble() }\n        val p = T1A.Point(x, y)\n        println(p.project(s))\n    }\n}\n\nprivate class T1A {\n\n    data class Point(val x: Double, val y: Double) {\n\n        fun dot(p: Point): Double {\n            return x * p.x + y * p.y\n        }\n\n        fun norm(): Double {\n            return x * x + y * y\n        }\n\n        fun project(s: Segment): Point {\n            val base = s.p2 - s.p1\n            val r = (this - s.p1).dot(base) / base.norm()\n            return s.p1 + base * r\n        }\n\n        operator fun plus(p: Point): Point {\n            return Point(x + p.x, y + p.y)\n        }\n\n        operator fun minus(p: Point): Point {\n            return Point(x - p.x, y - p.y)\n        }\n\n        operator fun times(r: Double): Point {\n            return Point(x * r, y * r)\n        }\n\n        override fun toString(): String {\n            return \"$x $y\"\n        }\n\n    }\n\n    data class Segment(val p1: Point, val p2: Point)\n\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.lang.*;\n\npublic class Main {\n    static final int INF = (1 << 31) - 1;             \n    static final int MAXN = 11111;     \n    static double a, b, c;\n    static double a1, b1, c1;\n    static double resX, resY;\n    \n    public static void main(String[] args) throws Exception {                \n        Scanner input = new Scanner(System.in);\n        int x0, y0, x1, y1, x2, y2;\n        int q;\n        x0 = input.nextInt();\n        y0 = input.nextInt();\n        x1 = input.nextInt();\n        y1 = input.nextInt();\n        lineOf(x0, y0, y1 - y0, x0 - x1);\n        q = input.nextInt();\n        for (int i = 0; i < q; ++i) {\n            x2 = input.nextInt();\n            y2 = input.nextInt();\n            line1Of(x2, y2, x0 - x1, y0 - y1);\n            intersectionOf2Lines();\n            System.out.printf(\"%.8f %.8f\\n\", resX, resY);\n        }\n    }\n    \n    static void lineOf(double x1, double y1, double vx, double vy) {\n        a = vx;\n        b = vy;\n        c = - vx * x1 - vy * y1;\n    }\n    \n    static void line1Of(double x1, double y1, double vx, double vy) {\n        a1 = vx;\n        b1 = vy;\n        c1 = - vx * x1 - vy * y1;\n    }\n    \n    static void intersectionOf2Lines() {\n        double d = a * b1 - a1 * b;\n        double dx = b * c1 - b1 * c;\n        double dy = c * a1 - c1 * a;\n        resX = dx / d;\n        resY = dy / d;\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\n\tpublic Main() {\n\t\tnew AOJCGL_1C().doIt();\n\t}\n\n\tclass AOJCGL_1C{\n\t\tprivate Point2D projection(Line2D l,Point2D p2){\n\t\t\tdouble kyori = l.getP1().distance(l.getP2());\n\t\t\tdouble angle = angle(l.getP1(),l.getP2(), p2);\n\t\t\tdouble t = l.getP1().distance(p2) * Math.cos(angle);\n\t\t\tPoint2D result = new Point2D.Double(l.getP1().getX()+(l.getP2().getX()-l.getP1().getX())*t/kyori,\n\t\t\t\t\tl.getP1().getY()+(l.getP2().getY()-l.getP1().getY())*t/kyori);\n\t\t\treturn result;\n\t\t}\n\t\tprivate double angle(Point2D p0, Point2D p1, Point2D p2){\n\t\t\treturn Math.atan2(p2.getY()-p0.getY(),p2.getX()-p0.getX())-\n\t\t\t\t\tMath.atan2(p1.getY()-p0.getY(),p1.getX()-p0.getX());\n\t\t}\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D p2 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\t\tPoint2D ans = projection(new Line2D.Double(p0, p1), p2);\n\t\t\t\tSystem.out.printf(\"%.9f %.9f\",ans.getX(),ans.getY());\n\t\t\t}\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\tpublic Main() {\n\t\tnew AOJCGL_1().doIt();\n\t}\n\t\n\tclass AOJCGL_1{\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tdouble kyori = p0.distance(p1);\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D p2 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\t\tdouble angle =angle(p0, p1, p2);\n//\t\t\t\tSystem.out.println(angle);\n\t\t\t\tdouble t = p0.distance(p2) * Math.cos(angle);\n\t\t\t\tPoint2D result = new Point2D.Double(p0.getX()+(p1.getX()-p0.getX())*t/kyori,\n\t\t\t\t\t\tp0.getY()+(p1.getY()-p0.getY())*t/kyori);\n\t\t\t\tSystem.out.printf(\"%.9f %.9f\\n\",result.getX(),result.getY());\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate double angle(Point2D p0, Point2D p1, Point2D p2){\n\t\t\treturn Math.atan2(p2.getY()-p0.getY(),p2.getX()-p0.getX())-\n\t\t\tMath.atan2(p1.getY()-p0.getY(),p1.getX()-p0.getX());\n\t\t}\n\t\t\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\tpublic Main() {\n\t\tnew AOJCGL_1().doIt();\n\t}\n\n\tclass AOJCGL_1{\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D result = getVerticalPoint(p0, p1, new Point2D.Double(in.nextDouble(),in.nextDouble()));\n\t\t\t\tSystem.out.printf(\"%.9f %.9f\",result.getX(),result.getY());\n\t\t\t}\n\t\t}\n\t\t\n\t\t//p0-p1の直線があるときに直線p2から直線らしたときp0-p1上の垂直な点を求める。\n\t\tprivate Point2D getVerticalPoint(Point2D p0,Point2D p1,Point2D p2){\n\t\t\tdouble kyori = p0.distance(p1);\n\t\t\tdouble angle = angle(p0, p1, p2);\n\t\t\tdouble t = p0.distance(p2) * Math.cos(angle);\n\t\t\tPoint2D result = new Point2D.Double(p0.getX()+(p1.getX()-p0.getX())*t/kyori,\n\t\t\t\t\tp0.getY()+(p1.getY()-p0.getY())*t/kyori);\n\t\t\treturn result;\n\t\t}\n\n\t\tprivate double angle(Point2D p0, Point2D p1, Point2D p2){\n\t\t\treturn Math.atan2(p2.getY()-p0.getY(),p2.getX()-p0.getX())-\n\t\t\t\t\tMath.atan2(p1.getY()-p0.getY(),p1.getX()-p0.getX());\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\tstatic class Vec{\n\t\tint x, y;\n\t\tVec(int x, int y){\n\t\t\tthis.x=x;\n\t\t\tthis.y=y;\n\t\t}\n\t}\n\t\n\tstatic double value(Vec v) {\n\t\treturn Math.sqrt(v.x*v.x+v.y*v.y);\n\t}\n\tstatic double scalar(Vec v1, Vec v2) {\n\t\treturn v1.x*v2.x+v1.y*v2.y;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\ttry(Scanner sc = new Scanner(System.in)){\n\t\t\tint x1=sc.nextInt();\n\t\t\tint y1=sc.nextInt();\n\t\t\tint x2=sc.nextInt();\n\t\t\tint y2=sc.nextInt();\n\t\t\tVec p1=new Vec(x1, y1);\n\t\t\tVec p2=new Vec(x2, y2);\n\t\t\tVec a=new Vec(x2-x1, y2-y1);\n\t\t\tint q=sc.nextInt();\n\t\t\tfor(int i=0; i<q; i++) {\n\t\t\t\tint xp=sc.nextInt();\n\t\t\t\tint yp=sc.nextInt();\n\t\t\t\tVec b=new Vec(xp-x1, yp-y1);\n\t\t\t\tdouble k=scalar(a, b)/(value(a)*value(a));\n\t\t\t\tdouble ansx=k*a.x+p1.x;\n\t\t\t\tdouble ansy=k*a.y+p1.y;\n\t\t\t\tSystem.out.printf(\"%.9f %.9f\\n\", ansx, ansy);\n\t\t\t}\n\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\t// 入力\n\t\tScanner sc = new Scanner(System.in);\n\t\tdouble xp1 = sc.nextDouble();\n\t\tdouble yp1 = sc.nextDouble();\n\t\tVector2d p1 = new Vector2d(xp1, yp1);\n\t\tdouble xp2 = sc.nextDouble();\n\t\tdouble yp2 = sc.nextDouble();\n\t\tVector2d p2 = new Vector2d(xp2, yp2);\n\t\tint q = sc.nextInt();\n\t\tArrayList<Vector2d> p = new ArrayList<>();\n\t\tfor (int i=0; i<q; i++) {\n\t\t\tdouble x = sc.nextDouble();\n\t\t\tdouble y = sc.nextDouble();\n\t\t\tp.add(new Vector2d(x, y));\n\t\t}\n\t\tsc.close();\n\n\t\tfor (int i=0; i<q; i++) {\n\t\t\tSystem.out.println(solve(p.get(i), p1, p2));\n\t\t}\n\n\t}\n\n\tstatic class Vector2d {\n\n\t\tVector2d(Double x, Double y){\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tDouble x;\n\t\tDouble y;\n\n\t\tpublic String toString() {\n\t\t\treturn x + \", \" + y;\n\t\t}\n\t}\n\n\tpublic static Vector2d sub(Vector2d v1, Vector2d v2){\n\t\treturn new Vector2d(v2.x - v1.x, v2.y - v1.y);\n\t}\n\n\tpublic static Double sqNorm(Vector2d v){\n\t\treturn v.x * v.x + v.y * v.y;\n\t}\n\n\tpublic static Double product(Vector2d v1, Vector2d v2){\n\t\treturn v1.x * v2.x + v1.y * v2.y;\n\t}\n\n\tpublic static Vector2d extend(double a, Vector2d v){\n\t\treturn new Vector2d(a * v.x, a * v.y);\n\t}\n\n\tpublic static Vector2d solve(Vector2d p, Vector2d p1, Vector2d p2) {\n\t\tVector2d a = sub(p1, p2);\n\t\tVector2d b = sub(p1, p);\n\t\treturn extend(product(a, b) / sqNorm(a), a);\n\t}\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n//import java.io.*;\nimport java.util.stream.IntStream;\n\npublic class Main{\n    static int sum=0;\n    public static void main (String args[]){\n        //初期処理\n        Scanner sc=new Scanner(System.in);\n        // BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        // try{\n            // int n = Integer.parseInt(br.readLine());\n        Vector p1 = new Vector(sc.nextInt(), sc.nextInt());\n        Vector p2 = new Vector(sc.nextInt(), sc.nextInt());\n        int n = sc.nextInt();\n        for(int i=0; i<n; i++){\n            Vector p = new Vector(sc.nextInt(), sc.nextInt());\n\n            Vector s1 = p.minus(p1);\n            // target segment\n            Vector s2 = p2.minus(p1);\n\n            Vector ans = p1.plus(s2.project(s1));\n            System.out.println(ans.x + \" \" + ans.y);\n\n        }\n\n    }\n}\n\nclass Vector{\n    public static double EPS = 1e-10;\n    public double x,y;\n\n    public Vector(){}\n    public Vector(double x, double y){this.x=x;this.y=y;}\n\n    public Vector plus(Vector p){return new Vector(this.x+p.x, this.y+p.y);}\n    public Vector minus(Vector p){return new Vector(this.x-p.x, this.y-p.y);}\n    public Vector multiple(double a){return new Vector(this.x*a, this.y*a);}\n    public Vector divide(double a){return new Vector(this.x/a, this.y/a);}\n\n    public double abs(){return Math.sqrt(this.norm());}\n    public double norm(){return x*x+y*y;}\n\n    \n    public static double dot(Vector a, Vector b){\n        return a.x*b.x+a.y*b.y;\n    }\n\n    public static double cross(Vector a, Vector b){\n        return a.x*b.y-a.y*b.x;\n    }\n\n    public Vector project(Vector point){\n        double t = dot(this, point)/this.norm();\n        return this.multiple(t);\n    }\n    \n}\n"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\n\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tdouble x1 = stdIn.nextDouble();\n\t\tdouble y1 = stdIn.nextDouble();\n\t\tdouble x2 = stdIn.nextDouble();\n\t\tdouble y2 = stdIn.nextDouble();\n\t\tint q = stdIn.nextInt();\n\t\tfor(int i=0;i<q;i++){\n\t\t\tdouble xp = stdIn.nextDouble();\n\t\t\tdouble yp = stdIn.nextDouble();\n\t\t\tVector vec1 = new Vector(x1,y1,x2,y2);\n\t\t\tVector vec2 = new Vector(x1,y1,xp,yp);\n\t\t\tvec1.projection(vec2);\n\t\t\tSystem.out.println((vec1.x+x1)+\" \"+(vec1.y+y1));\n\t\t}\n\n\t}\t\n}\n\nclass Vector{\n\tpublic final double EPS = Math.pow(10,-8);\n\tpublic double x,y;\n\n\tVector( double x1 , double y1 , double x2 , double y2 ){\n\t\tthis.x = x2 - x1;\n\t\tthis.y = y2 - y1;\n\t}\n\n\tdouble dot( Vector a ){\t\n\t\treturn this.x * a.x + this.y * a.y;\n\t}\n\tdouble cross( Vector a ){\t\n\t\treturn this.x * a.y - this.y * a.x;\n\t}\n\n\tvoid add( Vector a ){\n\t\tthis.x += a.x;\n\t\tthis.y += a.y;\n\t}\n\tvoid sub( Vector a ){\n\t\tthis.x -= a.x;\n\t\tthis.y -= a.y;\n\t}\n\tvoid mul( double z ){\n\t\tthis.x *= z;\n\t\tthis.y *= z;\n\t}\n\tvoid div( double z ){\n\t\tthis.x /= z;\n\t\tthis.y /= z;\n\t}\n\n\tdouble abs(){\n\t\treturn Math.sqrt(norm());\n\t}\n\tdouble norm(){\n\t\treturn this.x * this.x + this.y * this.y;\n\t}\n\n\tvoid projection( Vector a ){\n\t\tif(a.norm() == 0){\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t}\n\t\telse{\n\t\t\tdouble cos = dot(a)/(abs() * a.abs());\n\t\t\tdouble frac = a.abs() * cos/abs();\n\t\t\tmul(frac);\n\t\t}\n\t}\n\tVector reflection( Vector a ){\n\t\tprojection(a);\n\t\treturn new Vector(a.x,a.y,this.x,this.y);\n\t}\n\n\tboolean judgeisOrthogonal( Vector a ){\t\n\t\treturn judge(dot(a)) ? true : false;\n\t}  \n\tboolean judgeisParallel( Vector a ){\t\n\t\treturn judge(cross(a)) ? true : false;\n\t}\n\n\tboolean judge( double a ){\t\n\t\treturn Math.abs(a)<EPS ? true : false;\n\t}\n} "
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\n\npublic class Main {\n\tstatic boolean debug = false;\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tUserScanner scan = new UserScanner();\n\t\tPrintWriter pwriter = new PrintWriter(System.out);\n\n\t\tint x0 = scan.nextInt();\n\t\tint y0 = scan.nextInt();\n\t\tint x1 = scan.nextInt();\n\t\tint y1 = scan.nextInt();\n\n\t\tProjection projection = new Projection(x0, y0, x1, y1);\n\n\t\tint q = scan.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint x2 = scan.nextInt();\n\t\t\tint y2 = scan.nextInt();\n\t\t\tprojection.calc(x2, y2, pwriter);\n\t\t}\n\t\tpwriter.flush();\n\n\t\tscan.close();\n\t\tSystem.exit(0);\n\t}\n}\n\nclass Projection {\n\t// tx = x2*cos*cos + y2*sin*cos + x0*sin*sin - y0*sin*cos\n\t// ty = x2*sin*cos + y2*sin*sin - x0*sin*cos + y0*cos*cos\n\tdouble cos2, sin2, sincos;\n\tdouble txd, tyd;\n\n\tpublic Projection(int x0, int y0, int x1, int y1) {\n\t\tdouble t2 = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);\n\t\tcos2 = (x1 - x0) * (x1 - x0) / t2;\n\t\tsin2 = (y1 - y0) * (y1 - y0) / t2;\n\t\tsincos = (x1 - x0) * (y1 - y0) / t2;\n\t\ttxd = x0 * sin2 - y0 * sincos;\n\t\ttyd = -x0 * sincos + y0 * cos2;\n\t}\n\n\tpublic void calc(int x2, int y2, PrintWriter pw) {\n\t\tdouble tx = x2 * cos2 + y2 * sincos + txd;\n\t\tdouble ty = x2 * sincos + y2 * sin2 + tyd;\n\t\tpw.print(String.valueOf(tx));\n\t\tpw.print(' ');\n\t\tpw.println(String.valueOf(ty));\n\t}\n}\n\nclass UserScanner {\n\tprivate final InputStream in = System.in;\n\tprivate final byte[] buffer = new byte[1024];\n\tprivate int ptr = 0;\n\tprivate int buflen = 0;\n\n\tprivate boolean read() throws IOException {\n\t\tptr = 0;\n\t\tbuflen = in.read(buffer);\n\t\tif (buflen <= 0)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n\t}\n\n\tprivate byte getByte() throws IOException {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (isCtlSpace(buffer[ptr])) {\n\t\t\treturn -1;\n\t\t} else\n\t\t\treturn buffer[ptr++];\n\t}\n\n\tprivate void skipCtlSpace() throws IOException {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (isCtlSpace(buffer[ptr])) {\n\t\t\tptr++;\n\t\t\tskipCtlSpace();\n\t\t}\n\t}\n\n\tprivate boolean isCtlSpace(byte b) {\n\t\tif (b <= ' ' || b > '~')\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic void close() throws IOException {\n\t\tin.close();\n\t}\n\n\tpublic String next() throws IOException {\n\t\tskipCtlSpace();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tsb.appendCodePoint(b);\n\t\t}\n\t\treturn sb.toString();\n\t}\n\n\tpublic int nextInt() throws IOException {\n\t\tskipCtlSpace();\n\t\tint n = 0;\n\t\tboolean minus = false;\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tif (b == '-')\n\t\t\t\tminus = true;\n\t\t\telse {\n\t\t\t\tn *= 10;\n\t\t\t\tn += (b - '0');\n\t\t\t}\n\t\t}\n\t\tif (minus)\n\t\t\treturn n * -1;\n\t\telse\n\t\t\treturn n;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.NoSuchElementException;\n\npublic class Main {\n\tprivate static FastScanner sc = new FastScanner();\n\n\tpublic static void main(String[] args) {\n\t\tdouble x1 = sc.nextDouble();\n\t\tdouble y1 = sc.nextDouble();\n\t\tdouble x2 = sc.nextDouble();\n\t\tdouble y2 = sc.nextDouble();\n\t\t\n\t\tdouble a = (y2 - y1) / (x2 - x1);\n\t\tdouble b = y1 - a * x1;\n\t\t\n\t\tint q = sc.nextInt();\n\t\tStringBuilder ans = new StringBuilder();\n\t\tfor(int i=0; i<q; i++) {\n\t\t\tdouble xp = sc.nextDouble();\n\t\t\tdouble yp = sc.nextDouble();\n\t\t\t\n\t\t\tdouble x = 0;\n\t\t\tdouble y = 0;\n\t\t\tif(y1 == y2) {\n\t\t\t\tx = xp;\n\t\t\t\ty = y1;\n\t\t\t} else if(x1 == x2) {\n\t\t\t\tx = x1;\n\t\t\t\ty = yp;\n\t\t\t} else {\n\t\t\t\tx = (yp + xp / a - b) / (a + 1 / a);\n\t\t\t\ty = yp + xp / a - x / a;\n\t\t\t}\n\t\t\t\n\t\t\tans.append(x);\n\t\t\tans.append(\" \");\n\t\t\tans.append(y);\n\t\t\tans.append(\"\\n\");\n\t\t}\n\t\t\n\t\tSystem.out.print(ans);\n\t}\n\n\tstatic class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if(ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch(IOException e) {\n                    e.printStackTrace();\n                }\n                if(buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuilder sb = new StringBuilder();\n            int b = readByte();\n            while(isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n                b = readByte();\n            }\n            return sb.toString();\n        }\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n        public int nextInt(){\n            return Integer.parseInt(next());\n        }\n        public double nextDouble(){\n            return Double.parseDouble(next());\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "public class Main{\n  public void run(java.io.InputStream in, java.io.PrintStream out){\n    java.util.Scanner sc = new java.util.Scanner(in);\n/*answer*/\n    double xp1, xp2, yp1, yp2;\n    int q;\n    double[] xp, yp;\n    double ansx, ansy, t;\n    int i;\n\n    xp1 = sc.nextDouble();\n    yp1 = sc.nextDouble();\n    xp2 = sc.nextDouble();\n    yp2 = sc.nextDouble();\n    q = sc.nextInt();\n    xp = new double[q];\n    yp = new double[q];\n\n    for(i = 0;i < q;i++){\n      xp[i] = sc.nextDouble();\n      yp[i] = sc.nextDouble();\n    }\n    sc.close();\n/*  want to solve\nansx = xp1 + t * (xp2 - xp1)\nansy = yp1 + t * (yp2 - yp1)\n(xp2 - xp1) * (xp[i] - ansx) + (yp2 - yp1) * (yp[i] - ansy) = 0\n  VV\nt((xp2-xp1)^2 + (yp2-yp1)^2) = (xp2-xp1)(xp[i]-xp1) + (yp2-yp1)(yp[i]-yp1)\n*/\n\n    for(i = 0;i < q;i++){\n      t = (xp2 - xp1) * (xp[i] - xp1) + (yp2 - yp1) * (yp[i] - yp1);\n      t = t / ((xp2 - xp1) * (xp2 - xp1) + (yp2 - yp1) * (yp2 - yp1));\n      ansx = xp1 + t * (xp2 - xp1);\n      ansy = yp1 + t * (yp2 - yp1);\n      System.out.printf(\"%.10f %.10f%n\", ansx, ansy);\n    }\n\n  }\n  public static void main(String[] args){\n    (new Main()).run(System.in, System.out);\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.text.DecimalFormat;\n\npublic class Main {\n\tstatic boolean debug = false;\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tUserScanner scan = new UserScanner(System.in);\n\t\tPrintWriter pwriter = new PrintWriter(System.out);\n\n\t\tint x0 = scan.nextInt();\n\t\tint y0 = scan.nextInt();\n\t\tint x1 = scan.nextInt();\n\t\tint y1 = scan.nextInt();\n\n\t\tGeometry g = new Geometry();\n\t\tg.setBase(x0, y0, x1, y1);\n\n\t\tint q = scan.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint x2 = scan.nextInt();\n\t\t\tint y2 = scan.nextInt();\n\t\t\tPoint t = g.projection(x2, y2);\n\t\t\tDecimalFormat df = new DecimalFormat(\"#####.#########\");\n\t\t\tpwriter.print(df.format(t.x));\n\t\t\tpwriter.print(\" \");\n\t\t\tpwriter.println(df.format(t.y));\n\t\t}\n\t\tpwriter.flush();\n\n\t\tscan.close();\n\t\tSystem.exit(0);\n\t}\n}\n\nclass Point {\n\tdouble x, y;\n\n\tpublic Point(double x, double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n}\n\nclass Geometry {\n\t// rotate x0,y0 - x1,y1 to horizontal, and calculate projection point t, and\n\t// rotate back, then point t (tx,ty) is as follows\n\t//\n\t// tx = x2*cos*cos + y2*sin*cos + x0*sin*sin - y0*sin*cos\n\t// = x2*cos*cos + y2*sin*cos + txd\n\t// ty = x2*sin*cos + y2*sin*sin - x0*sin*cos + y0*cos*cos\n\t// = x2*sin*cos + y2*sin*sin + tyd\n\t//\n\t// txd,tyd is not necessary calculate each x2,y2\n\t//\n\tdouble cos2, sin2, sincos;\n\tdouble txd, tyd;\n\n\tpublic void setBase(int x0, int y0, int x1, int y1) {\n\t\tdouble t2 = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);\n\t\tcos2 = (x1 - x0) * (x1 - x0) / t2;\n\t\tsin2 = (y1 - y0) * (y1 - y0) / t2;\n\t\tsincos = (x1 - x0) * (y1 - y0) / t2;\n\t\ttxd = x0 * sin2 - y0 * sincos;\n\t\ttyd = -x0 * sincos + y0 * cos2;\n\t}\n\n\tpublic Point projection(int x, int y) {\n\t\treturn new Point(x * cos2 + y * sincos + txd, x * sincos + y * sin2 + tyd);\n\t}\n}\n\nclass UserScanner {\n\tprivate InputStream in;\n\tprivate final byte[] buffer = new byte[1024];\n\tprivate int ptr = 0;\n\tprivate int buflen = 0;\n\n\tpublic UserScanner(InputStream inStream) {\n\t\tin = inStream;\n\t}\n\n\tprivate void read() {\n\t\tptr = 0;\n\t\ttry {\n\t\t\tbuflen = in.read(buffer);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(9);\n\t\t}\n\t}\n\n\tprivate byte getByte() {\n\t\tif (ptr >= buflen)\n\t\t\tread();\n\t\tif (buflen < 0 || isCtlSpace(buffer[ptr])) {\n\t\t\treturn -1;\n\t\t} else\n\t\t\treturn buffer[ptr++];\n\t}\n\n\tprivate void skipCtlSpace() {\n\t\tfor (; ptr < buflen; ptr++)\n\t\t\tif (!isCtlSpace(buffer[ptr]))\n\t\t\t\treturn;\n\t\tread();\n\t\tskipCtlSpace();\n\t}\n\n\tprivate boolean isCtlSpace(byte b) {\n\t\tif (b <= ' ' || b > '~')\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic void close() {\n\t\ttry {\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(9);\n\t\t}\n\t}\n\n\tpublic String next() {\n\t\tskipCtlSpace();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tsb.appendCodePoint(b);\n\t\t}\n\t\treturn sb.toString();\n\t}\n\n\tpublic int nextInt() {\n\t\tskipCtlSpace();\n\t\tint n = 0;\n\t\tboolean minus = false;\n\t\tbyte b;\n\t\twhile ((b = getByte()) != -1) {\n\t\t\tif (b == '-')\n\t\t\t\tminus = true;\n\t\t\telse {\n\t\t\t\tn *= 10;\n\t\t\t\tn += (b - '0');\n\t\t\t}\n\t\t}\n\t\tif (minus)\n\t\t\treturn n * -1;\n\t\telse\n\t\t\treturn n;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.*;\nimport java.util.concurrent.CountDownLatch;\n\nimport javax.sound.midi.MidiMessage;\n \npublic class Main {\n\t\tstatic long MOD=(long) (Math.pow(10, 9)+7);\n\tpublic static void main(String[] args){\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tInputReader sc=new InputReader(System.in);\n\t\tint x1 = sc.nextInt();\n        int y1 = sc.nextInt();\n        int x2 = sc.nextInt();\n        int y2 = sc.nextInt();\n        int q = sc.nextInt();\n        Geometric geometric=new Geometric();\n        for(int i = 0 ; i < q ; i++){\n            int px = sc.nextInt();\n            int py = sc.nextInt();\n            double[] kummi=geometric.project((double)x1,(double)y1,(double)x2,(double)y2,(double)px,(double)py);\n            out.println(kummi[0]+\" \"+kummi[1]);\n        }\n        out.flush();\n\t}\n\tstatic class Geometric{\n\t\tdouble[] project(double x1, double y1, double x2, double y2, double px, double py){\n\t        if(y1 == y2) {\n\t        \tdouble[] ans= {px,y1};\n\t        \treturn ans;\n\t        \t}\n\t        else if(x1 == x2) {\n\t        \tdouble[] ans= {x1,py};\n\t        \treturn ans;\n\t        }\n\t        else{\n\t            double katamuki1 = (y2 - y1)/(x2 - x1);\n\t            double seppen1 = -katamuki1 * x1 + y1;\n\t            double katamuki2 = -1.0 / katamuki1;\n\t            double seppen2 = -katamuki2 * px + py;\n\t            double ansx = (seppen2 - seppen1)/(katamuki1 - katamuki2);\n\t            double ansy = ansx * katamuki1 + seppen1;\n\t            double[] ans= {ansx,ansy};\n\t            return ans;\n\t        }\n\t    }\n\t}\n\tstatic class InputReader { \n\t\tprivate InputStream in;\n\t\tprivate byte[] buffer = new byte[1024];\n\t\tprivate int curbuf;\n\t\tprivate int lenbuf;\n\t\tpublic InputReader(InputStream in) {\n\t\t\tthis.in = in;\n\t\t\tthis.curbuf = this.lenbuf = 0;\n\t\t}\n \n\t\tpublic boolean hasNextByte() {\n\t\t\tif (curbuf >= lenbuf) {\n\t\t\t\tcurbuf = 0;\n\t\t\t\ttry {\n\t\t\t\t\tlenbuf = in.read(buffer);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t}\n\t\t\t\tif (lenbuf <= 0)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n \n\t\tprivate int readByte() {\n\t\t\tif (hasNextByte())\n\t\t\t\treturn buffer[curbuf++];\n\t\t\telse\n\t\t\t\treturn -1;\n\t\t}\n \n\t\tprivate boolean isSpaceChar(int c) {\n\t\t\treturn !(c >= 33 && c <= 126);\n\t\t}\n \n\t\tprivate void skip() {\n\t\t\twhile (hasNextByte() && isSpaceChar(buffer[curbuf]))\n\t\t\t\tcurbuf++;\n\t\t}\n \n\t\tpublic boolean hasNext() {\n\t\t\tskip();\n\t\t\treturn hasNextByte();\n\t\t}\n \n\t\tpublic String next() {\n\t\t\tif (!hasNext())\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tint b = readByte();\n\t\t\twhile (!isSpaceChar(b)) {\n\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t}\n \n\t\tpublic int nextInt() {\n\t\t\tif (!hasNext())\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\tint c = readByte();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = readByte();\n\t\t\tboolean minus = false;\n\t\t\tif (c == '-') {\n\t\t\t\tminus = true;\n\t\t\t\tc = readByte();\n\t\t\t}\n\t\t\tint res = 0;\n\t\t\tdo {\n\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\tres = res * 10 + c - '0';\n\t\t\t\tc = readByte();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn (minus) ? -res : res;\n\t\t}\n \n\t\tpublic long nextLong() {\n\t\t\tif (!hasNext())\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\tint c = readByte();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = readByte();\n\t\t\tboolean minus = false;\n\t\t\tif (c == '-') {\n\t\t\t\tminus = true;\n\t\t\t\tc = readByte();\n\t\t\t}\n\t\t\tlong res = 0;\n\t\t\tdo {\n\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\tres = res * 10 + c - '0';\n\t\t\t\tc = readByte();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn (minus) ? -res : res;\n\t\t}\n \n\t\tpublic double nextDouble() {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n \n\t\tpublic int[] nextIntArray(int n) {\n\t\t\tint[] a = new int[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\ta[i] = nextInt();\n\t\t\treturn a;\n\t\t}\n \n\t\tpublic long[] nextLongArray(int n) {\n\t\t\tlong[] a = new long[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\ta[i] = nextLong();\n\t\t\treturn a;\n\t\t}\n \n\t\tpublic char[][] nextCharMap(int n, int m) {\n\t\t\tchar[][] map = new char[n][m];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tmap[i] = next().toCharArray();\n\t\t\treturn map;\n\t\t}\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\npublic class Main{\n    public static void calc(double x1, double y1, double x2, double y2, double px, double py){\n        if(y1 == y2)\n            System.out.println(px + \" \" + y1);\n        else if(x1 == x2)\n            System.out.println(x1 + \" \" + py);\n        else{\n            double katamuki1 = (y2 - y1)/(x2 - x1);\n            double seppen1 = -katamuki1 * x1 + y1;\n            double katamuki2 = -1.0 / katamuki1;\n            double seppen2 = -katamuki2 * px + py;\n            double ansx = (seppen2 - seppen1)/(katamuki1 - katamuki2);\n            double ansy = ansx * katamuki1 + seppen1;\n            System.out.println(ansx + \" \" + ansy);\n        }\n    }\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int x1 = sc.nextInt();\n        int y1 = sc.nextInt();\n        int x2 = sc.nextInt();\n        int y2 = sc.nextInt();\n        int q = sc.nextInt();\n        for(int i = 0 ; i < q ; i++){\n            int px = sc.nextInt();\n            int py = sc.nextInt();\n            calc((double)x1,(double)y1,(double)x2,(double)y2,(double)px,(double)py);\n        }\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nimport java.awt.geom.Point2D.Double;\n\nimport static java.lang.Integer.parseInt;\n\npublic class Main {\n\n  public static void main(String[] args) {\n    \n    new Main().run();\n  }\n\n  public void run() {\n    \n    try(BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {\n\n      String[] lines;\n      Point2D[] s = new Point2D[2];\n      StringBuilder buf = new StringBuilder();\n\n      lines = br.readLine().split(\" \");\n      int x, y;\n      for(int j=0,k=0; j<s.length; j++) {\n        x = parseInt(lines[k++]);\n        y = parseInt(lines[k++]);\n        s[j] = new Point2D(x, y);\n      }\n\n      int q = parseInt(br.readLine());\n      Vector v = new Vector();\n\n      for(int i=0; i<q; i++) {\n        lines = br.readLine().split(\" \");\n        Point2D p = new Point2D(parseInt(lines[0]), parseInt(lines[1]));\n        Point2D result = v.project(s[0], s[1], p);\n        buf.append(result.x).append(\" \").append(result.y).append(\"\\n\");\n      }\n\n      System.out.print(buf);\n    }\n    catch(IOException e) {\n      System.out.println(e);\n    }\n  }\n\n  private class Point2D extends Double {\n    private static final long serialVersionUID = 1L;\n    double EPS = 1e-10;\n\n    public Point2D() { super(); }\n    public Point2D(double x, double y) { super(x, y); }\n\n    public boolean equals (double a, double b) {\n      return Math.abs(a-b) < EPS;\n    }\n    public Point2D sum(Point2D b) {\n      return new Point2D(x+b.x, y+b.y);\n    }\n    public Point2D diff(Point2D b) {\n      return new Point2D(x-b.x, y-b.y);\n    }\n    public Point2D multiple(double k) {\n      return new Point2D(x*k, y*k);\n    }\n\n    @Override\n    public String toString() {\n      return \"[\" + x + \",\" + y + \"]\";\n    }\n  }\n\n  private class Vector extends Point2D {\n\n    private static final long serialVersionUID = 1L;\n\n    public Vector() { super(); }\n    public Vector(double x, double y) { super(x, y); }\n    public Vector(Point2D p) { super(p.x, p.y); }\n\n    public double norm() {\n      return x * x + y * y;\n    }\n    public double dot(Point2D a, Point2D b) {\n      return a.x * b.x + a.y * b.y;\n    }\n    public double cross(Point2D a, Point2D b) {\n      return a.x * b.y - a.y * b.x;\n    }\n    public boolean isOrthogonal(Point2D a, Point2D b) {\n      return equals(dot(a,b) , 0.0);\n    }\n    public boolean isOrthogonal(Point2D a1, Point2D a2, Point2D b1, Point2D b2) {\n      return isOrthogonal(a1.diff(a2), b1.diff(b2));\n    }\n    public boolean isParallel(Point2D a, Point2D b) {\n      return equals(cross(a, b), 0.0);\n    }\n    public boolean isParallel(Point2D a1, Point2D a2, Point2D b1, Point2D b2) {\n      return isParallel(a1.diff(a2), b1.diff(b2));\n    }\n\n    public Point2D project(Point2D sp1, Point2D sp2, Point2D p) {\n      Vector base = new Vector( sp2.diff(sp1) );\n      double r = dot(p.diff(sp1), base) / base.norm();\n\n      return sp1.sum(base.multiple(r));\n    }\n  }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\n\tpublic Main() {\n\t\tnew AOJCGL_1C().doIt();\n\t}\n\n\tclass AOJCGL_1C{\n\t\tprivate Point2D projection(Line2D l,Point2D p2){\n\t\t\tdouble kyori = l.getP1().distance(l.getP2());\n\t\t\tdouble angle = angle(l.getP1(),l.getP2(), p2);\n\t\t\tdouble t = l.getP1().distance(p2) * Math.cos(angle);\n\t\t\tPoint2D result = new Point2D.Double(l.getP1().getX()+(l.getP2().getX()-l.getP1().getX())*t/kyori,\n\t\t\t\t\tl.getP1().getY()+(l.getP2().getY()-l.getP1().getY())*t/kyori);\n\t\t\treturn result;\n\t\t}\n\t\tprivate double angle(Point2D p0, Point2D p1, Point2D p2){\n\t\t\treturn Math.atan2(p2.getY()-p0.getY(),p2.getX()-p0.getX())-\n\t\t\t\t\tMath.atan2(p1.getY()-p0.getY(),p1.getX()-p0.getX());\n\t\t}\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D p2 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\t\tPoint2D ans = projection(new Line2D.Double(p0, p1), p2);\n\t\t\t\tSystem.out.printf(\"%.9f %.9f\\n\",ans.getX(),ans.getY());\n\t\t\t}\n\t\t}\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\n\n\npublic class Main {\n\n\tstatic double EPS = 0.0000000001;\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tSegment seg  =new Segment(new Point(sc.nextInt(),sc.nextInt()),new Point(sc.nextInt(),sc.nextInt()));\n\n\t\tint q=sc.nextInt();\n\t\tfor (int i=0;i<q;i++) {\n\t\t\tPoint p = project(seg,new Point(sc.nextInt(),sc.nextInt()));\n\t\t\tSystem.out.println(p.x+\" \"+p.y);\n\t\t}\n\t}\n\tstatic Point project(Segment s, Point p) {\n\t\tVector base = s.p2.diff(s.p1);\n\t\tdouble r = p.diff(s.p1).dotProduct(base) / base.norm();\n\t\treturn s.p1.sum(base.mult(r));\n\t}\n}\nclass Point {\n\tstatic double EPS = 0.0000000001;\n\tdouble x; double y;\n\tpublic Point(double ax, double ay){x=ax;y=ay;}\n\tpublic Vector sum(Point p) { return new Vector(x+p.x,y+p.y); }\n\tpublic Vector diff(Point p) { return new Vector(x-p.x,y-p.y); }\n\tpublic Vector mult(double k) { return new Vector(x*k,y*k); }\n\tpublic Vector div(double k) { return new Vector(x*(1.0/k),y*(1.0/k)); }\n\tpublic boolean equals(Point p){return Math.abs(x-p.x)<EPS && Math.abs(y-p.y)<EPS;}\n}\nclass Vector extends Point {\n\tpublic Vector(double ax, double ay) {super(ax,ay);}\n\tpublic Vector(Point p1, Point p2) {super(p1.x-p2.x,p2.x-p2.y);}\n\tpublic double norm() {return x*x+y*y;}\n\tpublic double abs() {return Math.sqrt(norm());}\n\t// TODO:\n\tpublic boolean isSmallerThan(Vector v) {return x!=v.x?x<v.x:y<v.y;}\n\tpublic double dotProduct(Vector v) {return x*v.x+y*v.y;}\n\tpublic double crossProduct(Vector v) {return x*v.y - y*v.x;}\n}\n\nclass Segment {\n\tPoint p1; Point p2;\n\tpublic Segment(Point ap1, Point ap2){p1=ap1;p2=ap2;}\n\tpublic double dotProduct(Segment s) {return (p1.x-p2.x)*(s.p1.x-s.p2.x)+(p1.y-p2.y)*(s.p1.y-s.p2.y);}\n\tpublic double crossProduct(Segment s) {return (p1.x-p2.x)*(s.p1.y-s.p2.y) - (p1.y-p2.y)*(s.p1.x-s.p2.x);}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\t// 入力\n\t\tScanner sc = new Scanner(System.in);\n\t\tdouble xp1 = sc.nextDouble();\n\t\tdouble yp1 = sc.nextDouble();\n\t\tVector2d p1 = new Vector2d(xp1, yp1);\n\t\tdouble xp2 = sc.nextDouble();\n\t\tdouble yp2 = sc.nextDouble();\n\t\tVector2d p2 = new Vector2d(xp2, yp2);\n\t\tint q = sc.nextInt();\n\t\tArrayList<Vector2d> p = new ArrayList<>();\n\t\tfor (int i=0; i<q; i++) {\n\t\t\tdouble x = sc.nextDouble();\n\t\t\tdouble y = sc.nextDouble();\n\t\t\tp.add(new Vector2d(x, y));\n\t\t}\n\t\tsc.close();\n\n\t\tfor (int i=0; i<q; i++) {\n\t\t\tSystem.out.println(solve(p.get(i), p1, p2));\n\t\t}\n\n\t}\n\n\tstatic class Vector2d {\n\n\t\tVector2d(Double x, Double y){\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tDouble x;\n\t\tDouble y;\n\n\t\tpublic String toString() {\n\t\t\treturn String.format(\"%1$.10f %2$.10f\", x, y);\n\t\t}\n\t}\n\n\tpublic static Vector2d add(Vector2d v1, Vector2d v2){\n\t\treturn new Vector2d(v1.x + v2.x, v1.y + v2.y);\n\t}\n\n\tpublic static Vector2d sub(Vector2d v1, Vector2d v2){\n\t\treturn new Vector2d(v2.x - v1.x, v2.y - v1.y);\n\t}\n\n\tpublic static Double sqNorm(Vector2d v){\n\t\treturn v.x * v.x + v.y * v.y;\n\t}\n\n\tpublic static Double product(Vector2d v1, Vector2d v2){\n\t\treturn v1.x * v2.x + v1.y * v2.y;\n\t}\n\n\tpublic static Vector2d extend(double s, Vector2d v){\n\t\treturn new Vector2d(s * v.x, s * v.y);\n\t}\n\n\tpublic static Vector2d solve(Vector2d p, Vector2d p1, Vector2d p2) {\n\t\tVector2d a = sub(p1, p2);\n\t\tVector2d b = sub(p1, p);\n\t\treturn add(p1, extend(product(a, b) / sqNorm(a), a));\n\t}\n}\n\n"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\n\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tdouble x1 = stdIn.nextDouble();\n\t\tdouble y1 = stdIn.nextDouble();\n\t\tdouble x2 = stdIn.nextDouble();\n\t\tdouble y2 = stdIn.nextDouble();\n\t\tint q = stdIn.nextInt();\n\t\tfor(int i=0;i<q;i++){\n\t\t\tdouble xp = stdIn.nextDouble();\n\t\t\tdouble yp = stdIn.nextDouble();\n\t\t\tVector vec1 = new Vector(x1,y1,x2,y2);\n\t\t\tVector vec2 = new Vector(x1,y1,xp,yp);\n\t\t\tvec1.projection(vec2);\n\t\t\tSystem.out.println((vec1.x+x1)+\" \"+(vec1.y+y1));\n\t\t}\n\n\t}\t\n}\n\nclass Vector{\n\tpublic final double EPS = Math.pow(10,-8);\n\tpublic double x,y;\n\n\tVector( double x1 , double y1 , double x2 , double y2 ){\n\t\tthis.x = x2 - x1;\n\t\tthis.y = y2 - y1;\n\t}\n\n\tdouble dot( Vector a ){\t\n\t\treturn this.x * a.x + this.y * a.y;\n\t}\n\tdouble cross( Vector a ){\t\n\t\treturn this.x * a.y - this.y * a.x;\n\t}\n\n\tvoid add( Vector a ){\n\t\tthis.x += a.x;\n\t\tthis.y += a.y;\n\t}\n\tvoid sub( Vector a ){\n\t\tthis.x -= a.x;\n\t\tthis.y -= a.y;\n\t}\n\tvoid mul( double z ){\n\t\tthis.x *= z;\n\t\tthis.y *= z;\n\t}\n\tvoid div( double z ){\n\t\tthis.x /= z;\n\t\tthis.y /= z;\n\t}\n\n\tdouble abs(){\n\t\treturn Math.sqrt(norm());\n\t}\n\tdouble norm(){\n\t\treturn this.x * this.x + this.y * this.y;\n\t}\n\n\tvoid projection( Vector a ){\n\t\tdouble cos = dot(a)/(abs() * a.abs());\n\t\tdouble frac = a.abs() * cos/abs();\n\t\tmul(frac);\n\t}\n\tVector reflection( Vector a ){\n\t\tprojection(a);\n\t\treturn new Vector(a.x,a.y,this.x,this.y);\n\t}\n\n\tboolean judgeisOrthogonal( Vector a ){\t\n\t\treturn judge(dot(a)) ? true : false;\n\t}  \n\tboolean judgeisParallel( Vector a ){\t\n\t\treturn judge(cross(a)) ? true : false;\n\t}\n\n\tboolean judge( double a ){\t\n\t\treturn Math.abs(a)<EPS ? true : false;\n\t}\n} "
  },
  {
    "language": "Java",
    "code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\t// 入力\n\t\tScanner sc = new Scanner(System.in);\n\t\tdouble xp1 = sc.nextDouble();\n\t\tdouble yp1 = sc.nextDouble();\n\t\tVector2d p1 = new Vector2d(xp1, yp1);\n\t\tdouble xp2 = sc.nextDouble();\n\t\tdouble yp2 = sc.nextDouble();\n\t\tVector2d p2 = new Vector2d(xp2, yp2);\n\t\tint q = sc.nextInt();\n\t\tArrayList<Vector2d> p = new ArrayList<>();\n\t\tfor (int i=0; i<q; i++) {\n\t\t\tdouble x = sc.nextDouble();\n\t\t\tdouble y = sc.nextDouble();\n\t\t\tp.add(new Vector2d(x, y));\n\t\t}\n\t\tsc.close();\n\n\t\tfor (int i=0; i<q; i++) {\n\t\t\tSystem.out.println(solve(p.get(i), p1, p2));\n\t\t}\n\n\t}\n\n\tstatic class Vector2d {\n\n\t\tVector2d(Double x, Double y){\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tDouble x;\n\t\tDouble y;\n\n\t\tpublic String toString() {\n\t\t\treturn String.format(\"%1$.10f %1$.10f\", x, y);\n\t\t}\n\t}\n\n\tpublic static Vector2d sub(Vector2d v1, Vector2d v2){\n\t\treturn new Vector2d(v2.x - v1.x, v2.y - v1.y);\n\t}\n\n\tpublic static Double sqNorm(Vector2d v){\n\t\treturn v.x * v.x + v.y * v.y;\n\t}\n\n\tpublic static Double product(Vector2d v1, Vector2d v2){\n\t\treturn v1.x * v2.x + v1.y * v2.y;\n\t}\n\n\tpublic static Vector2d extend(double a, Vector2d v){\n\t\treturn new Vector2d(a * v.x, a * v.y);\n\t}\n\n\tpublic static Vector2d solve(Vector2d p, Vector2d p1, Vector2d p2) {\n\t\tVector2d a = sub(p1, p2);\n\t\tVector2d b = sub(p1, p);\n\t\treturn extend(product(a, b) / sqNorm(a), a);\n\t}\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.*;\n \npublic class Main implements Runnable {\n\t\n    public static void main(String[] args) {\n    \tnew Thread(null, new Main(), \"\", 16 * 1024 * 1024).start();\n    }\n    \n    public void run() {\n        FastScanner sc = new FastScanner();\n        \n        Point p1 = new Point(sc.nextDouble(),sc.nextDouble());\n        Point p2 = new Point(sc.nextDouble(),sc.nextDouble());\n        Line l = new Line(p1,p2);\n        \n        int q = sc.nextInt();\n        \n        for(int i=0;i<q;i++){\n        \tPoint p = new Point(sc.nextDouble(),sc.nextDouble());\n        \tPoint ans = l.projection(p);\n        \tSystem.out.println(ans.x + \" \" + ans.y);\n        }\n    }\n\n}\n\nclass Line {\n\tdouble a;\n\tdouble b;\n\tdouble c;\n\t\n\t//2点p,qを通る直線\n\tpublic Line(Point p, Point q){\n\t\tif(p.y == q.y){\n\t\t\tthis.a = 0;\n\t\t\tthis.b = 1;\n\t\t\tthis.c = -(p.y);\n\t\t}\n\t\telse if(p.x == q.x){\n\t\t\tthis.a = 1;\n\t\t\tthis.b = 0;\n\t\t\tthis.c = -(p.x);\n\t\t}\n\t\telse{\n\t\t\tthis.a = p.y - q.y;\n\t\t\tthis.b = q.x - p.x;\n\t\t\tthis.c = - a*p.x - b*p.y;\n\t\t}\n\t}\n\t//ax+by+c=0\n\tpublic Line(double a, double b, double c){\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\t}\n\t//y=ax+c\n\tpublic Line(double a, double c){\n\t\tthis.a = a;\n\t\tthis.b = -1;\n\t\tthis.c = c;\n\t}\n\t\n\t//点pからの垂線の足\n\tpublic Point projection(Point p){\n\t\t//-bx+ay+d=0がこの直線と垂直でpを通る直線とし、dを求める\n\t\tdouble d = b*p.x - a*p.y;\n\t\treturn intersection(new Line(-b,a,d));\n\t}\n\t\n\t//交点\n\tpublic Point intersection(Line l){\n\t\tif(a==0){\n\t\t\tdouble x = (l.b*c - l.c)/l.a;\n\t\t\treturn new Point(x,-c);\n\t\t}\n\t\tif(l.a==0){\n\t\t\tdouble x = (b*l.c - c)/a;\n\t\t\treturn new Point(x, -l.c);\n\t\t}\n\t\t\n\t\t//xの係数をlと等しくする\n\t\t//気持ちは double A = l.a;\n\t\tdouble mlt = l.a/a;\n\t\tdouble B = b * mlt;\n\t\tdouble C = c * mlt;\n\t\tdouble y = (l.c-C)/(B-l.b);\n\t\tdouble x = (-b*y-c)/a;\n\t\treturn new Point(x,y);\n\t}\n\t\n\tpublic void display(){\n\t\tSystem.out.println(a + \"x + \" + b + \"y + \" + c + \" = 0\");\n\t}\n\t\n}\n\nclass Point implements Comparable<Point>{\n\tdouble x,y;\n\t\n\tpublic Point(double a, double b){\n\t\tthis.x = a;\n\t\tthis.y = b;\n\t}\n\t\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tlong temp;\n\t\ttemp = Double.doubleToLongBits(x);\n\t\tresult = prime * result + (int) (temp ^ (temp >>> 32));\n\t\ttemp = Double.doubleToLongBits(y);\n\t\tresult = prime * result + (int) (temp ^ (temp >>> 32));\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tPoint other = (Point) obj;\n\t\tif (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))\n\t\t\treturn false;\n\t\tif (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\t\n\t@Override\n\tpublic int compareTo(Point o){\n\t\tif(x!=o.x){\n\t\t\treturn Double.compare(x,o.x);\n\t\t}\n\t\treturn Double.compare(y, o.y);\n\t}\n\t\t\n}\n\n\nclass FastScanner {\n\tprivate final InputStream in = System.in;\n\tprivate final byte[] buffer = new byte[1024];\n\tprivate int ptr = 0;\n\tprivate int buflen = 0;\n\tprivate boolean hasNextByte() {\n\t\tif (ptr < buflen) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tptr = 0;\n\t\t\ttry {\n\t\t\t\tbuflen = in.read(buffer);\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tif (buflen <= 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tprivate int readByte() {\n\t\tif (hasNextByte())\n\t\t\treturn buffer[ptr++];\n\t\telse\n\t\t\treturn -1;\n\t}\n\tprivate static boolean isPrintableChar(int c) {\n\t\treturn 33 <= c && c <= 126;\n\t}\n\tpublic boolean hasNext() {\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\n\t\t\tptr++;\n\t\treturn hasNextByte();\n\t}\n\tpublic String next() {\n\t\tif (!hasNext())\n\t\t\tthrow new NoSuchElementException();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint b = readByte();\n\t\twhile (isPrintableChar(b)) {\n\t\t\tsb.appendCodePoint(b);\n\t\t\tb = readByte();\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic long nextLong() {\n\t\tif (!hasNext())\n\t\t\tthrow new NoSuchElementException();\n\t\tlong n = 0;\n\t\tboolean minus = false;\n\t\tint b = readByte();\n\t\tif (b == '-') {\n\t\t\tminus = true;\n\t\t\tb = readByte();\n\t\t}\n\t\tif (b < '0' || '9' < b) {\n\t\t\tthrow new NumberFormatException();\n\t\t}\n\t\twhile (true) {\n\t\t\tif ('0' <= b && b <= '9') {\n\t\t\t\tn *= 10;\n\t\t\t\tn += b - '0';\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\n\t\t\t\treturn minus ? -n : n;\n\t\t\t} else {\n\t\t\t\tthrow new NumberFormatException();\n\t\t\t}\n\t\t\tb = readByte();\n\t\t}\n\t}\n\tpublic int nextInt() {\n\t\tlong nl = nextLong();\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\n\t\t\tthrow new NumberFormatException();\n\t\treturn (int) nl;\n\t}\n\tpublic int[] nextIntArray(int n){\n\t\tint[] a = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\treturn a;\n\t}\n\tpublic Integer[] nextIntegerArray(int n){\n\t\tInteger[] a = new Integer[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\treturn a;\n\t}\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\t// 入力\n\t\tScanner sc = new Scanner(System.in);\n\t\tdouble xp1 = sc.nextDouble();\n\t\tdouble yp1 = sc.nextDouble();\n\t\tVector2d p1 = new Vector2d(xp1, yp1);\n\t\tdouble xp2 = sc.nextDouble();\n\t\tdouble yp2 = sc.nextDouble();\n\t\tVector2d p2 = new Vector2d(xp2, yp2);\n\t\tint q = sc.nextInt();\n\t\tArrayList<Vector2d> p = new ArrayList<>();\n\t\tfor (int i=0; i<q; i++) {\n\t\t\tdouble x = sc.nextDouble();\n\t\t\tdouble y = sc.nextDouble();\n\t\t\tp.add(new Vector2d(x, y));\n\t\t}\n\t\tsc.close();\n\n\t\tfor (int i=0; i<q; i++) {\n\t\t\tSystem.out.println(solve(p.get(i), p1, p2));\n\t\t}\n\n\t}\n\n\tstatic class Vector2d {\n\n\t\tVector2d(Double x, Double y){\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tDouble x;\n\t\tDouble y;\n\n\t\tpublic String toString() {\n\t\t\treturn x + \", \" + y;\n\t\t}\n\t}\n\n\tpublic static Vector2d sub(Vector2d v1, Vector2d v2){\n\t\treturn new Vector2d(v2.x - v1.x, v2.y - v1.y);\n\t}\n\n\tpublic static Double sqNorm(Vector2d v){\n\t\treturn v.x * v.x + v.y * v.y;\n\t}\n\n\tpublic static Double product(Vector2d v1, Vector2d v2){\n\t\treturn v1.x * v2.x + v1.y * v2.y;\n\t}\n\n\tpublic static Vector2d extend(double a, Vector2d v){\n\t\treturn new Vector2d(a * v.x, a * v.y);\n\t}\n\n\tpublic static Vector2d solve(Vector2d p, Vector2d p1, Vector2d p2) {\n\t\tVector2d a = sub(p1, p2);\n\t\tVector2d b = sub(p1, p);\n\t\treturn extend(product(a, b) / sqNorm(a), a);\n\t}\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint xp1 = sc.nextInt();\n\t\tint yp1 = sc.nextInt();\n\t\tint xp2 = sc.nextInt();\n\t\tint yp2 = sc.nextInt();\n\n\t\tint q = sc.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint xp0 = sc.nextInt();\n\t\t\tint yp0 = sc.nextInt();\n\n\t\t\tint ax = xp2 - xp1;\n\t\t\tint ay = yp2 - yp1;\n\t\t\tint bx = xp0 - xp1;\n\t\t\tint by = yp0 - yp1;\n\t\t\tdouble dot = Geom.dot(ax, ay, bx, by);\n\t\t\tint a2 = Geom.sumofsquare(ax, ay);\n\t\t\tdouble x = dot / a2 * ax + xp1;\n\t\t\tdouble y = dot / a2 * ay + yp1;\n\t\t\t\n\t\t\tSystem.out.printf(\"%.9f %.9f\\n\", x, y);\n\t\t}\n\n\t\tsc.close();\n\t}\n\t\n\t@SuppressWarnings(\"unused\")\n\tprivate static class Geom {\n\t\tstatic int dot(int xa, int ya, int xb, int yb) {\n\t\t\treturn xa * xb + ya * yb;\n\t\t}\n\n\t\tstatic int cross(int xa, int ya, int xb, int yb) {\n\t\t\treturn xa * yb - xb * ya;\n\t\t}\n\t\t\n\t\tstatic int sumofsquare(int xa, int ya) {\n\t\t\treturn xa * xa + ya * ya;\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        new Solver().solve(new Scanner(System.in));\n//        new Solver().solve(new Scanner(ex));\n    }\n\n    private static final String ex = \"7 0 0 0\\n\" +\n            \"200\\n\" +\n            \"23 39\\n\" +\n            \"-2 22\\n\" +\n            \"-36 33\\n\" +\n            \"-28 -11\\n\" +\n            \"-37 17\\n\" +\n            \"-3 -19\\n\" +\n            \"-49 -5\\n\" +\n            \"18 -29\\n\" +\n            \"0 -20\\n\" +\n            \"40 -24\\n\" +\n            \"8 3\\n\" +\n            \"-33 16\\n\" +\n            \"-44 6\\n\" +\n            \"49 45\\n\" +\n            \"-49 -23\\n\" +\n            \"14 39\\n\" +\n            \"-23 -43\\n\" +\n            \"47 19\\n\" +\n            \"33 -4\\n\" +\n            \"15 -10\\n\" +\n            \"-16 22\\n\" +\n            \"-30 -45\\n\" +\n            \"49 -19\\n\" +\n            \"-28 36\\n\" +\n            \"48 -38\\n\" +\n            \"-42 41\\n\" +\n            \"-16 -48\\n\" +\n            \"17 41\\n\" +\n            \"-36 -22\\n\" +\n            \"-44 -24\\n\" +\n            \"18 47\\n\" +\n            \"-14 -45\\n\" +\n            \"-17 32\\n\" +\n            \"25 -35\\n\" +\n            \"6 3\\n\" +\n            \"-44 -9\\n\" +\n            \"27 30\\n\" +\n            \"8 -20\\n\" +\n            \"43 -16\\n\" +\n            \"31 -2\\n\" +\n            \"-12 -48\\n\" +\n            \"48 -11\\n\" +\n            \"-8 16\\n\" +\n            \"-24 -37\\n\" +\n            \"-21 -17\\n\" +\n            \"5 42\\n\" +\n            \"41 14\\n\" +\n            \"-5 -17\\n\" +\n            \"-1 -26\\n\" +\n            \"49 -24\\n\" +\n            \"-10 3\\n\" +\n            \"-3 -2\\n\" +\n            \"-6 -37\\n\" +\n            \"-32 34\\n\" +\n            \"-42 20\\n\" +\n            \"-1 -48\\n\" +\n            \"41 18\\n\" +\n            \"15 33\\n\" +\n            \"5 20\\n\" +\n            \"-3 1\\n\" +\n            \"40 -20\\n\" +\n            \"2 -40\\n\" +\n            \"9 42\\n\" +\n            \"11 12\\n\" +\n            \"25 24\\n\" +\n            \"-29 23\\n\" +\n            \"-16 -42\\n\" +\n            \"24 -34\\n\" +\n            \"42 -48\\n\" +\n            \"3 20\\n\" +\n            \"11 -5\\n\" +\n            \"-28 -3\\n\" +\n            \"-5 -10\\n\" +\n            \"-4 -11\\n\" +\n            \"31 4\\n\" +\n            \"-35 -16\\n\" +\n            \"27 26\\n\" +\n            \"-29 -2\\n\" +\n            \"-20 -45\\n\" +\n            \"-1 -18\\n\" +\n            \"11 -30\\n\" +\n            \"-29 -41\\n\" +\n            \"-43 47\\n\" +\n            \"46 -16\\n\" +\n            \"-47 -1\\n\" +\n            \"-32 28\\n\" +\n            \"-35 14\\n\" +\n            \"-9 45\\n\" +\n            \"21 -13\\n\" +\n            \"36 -23\\n\" +\n            \"-1 -40\\n\" +\n            \"-36 -17\\n\" +\n            \"-18 -38\\n\" +\n            \"-49 21\\n\" +\n            \"30 -1\\n\" +\n            \"39 19\\n\" +\n            \"-42 12\\n\" +\n            \"-34 -17\\n\" +\n            \"-16 -36\\n\" +\n            \"-8 -17\\n\" +\n            \"40 20\\n\" +\n            \"-34 -35\\n\" +\n            \"-30 -31\\n\" +\n            \"-42 12\\n\" +\n            \"-38 18\\n\" +\n            \"16 -28\\n\" +\n            \"35 37\\n\" +\n            \"-13 42\\n\" +\n            \"-12 -49\\n\" +\n            \"8 -17\\n\" +\n            \"-44 46\\n\" +\n            \"30 28\\n\" +\n            \"-10 -35\\n\" +\n            \"45 -37\\n\" +\n            \"31 16\\n\" +\n            \"-31 -48\\n\" +\n            \"-40 -42\\n\" +\n            \"27 -39\\n\" +\n            \"-42 47\\n\" +\n            \"41 21\\n\" +\n            \"-40 17\\n\" +\n            \"19 10\\n\" +\n            \"-8 37\\n\" +\n            \"37 32\\n\" +\n            \"28 23\\n\" +\n            \"-15 38\\n\" +\n            \"-43 -8\\n\" +\n            \"1 16\\n\" +\n            \"-2 -30\\n\" +\n            \"36 34\\n\" +\n            \"10 20\\n\" +\n            \"-26 -3\\n\" +\n            \"-19 -14\\n\" +\n            \"44 38\\n\" +\n            \"-1 -39\\n\" +\n            \"-13 -7\\n\" +\n            \"40 17\\n\" +\n            \"-44 25\\n\" +\n            \"-10 -31\\n\" +\n            \"0 -10\\n\" +\n            \"-10 -47\\n\" +\n            \"11 42\\n\" +\n            \"16 -20\\n\" +\n            \"31 5\\n\" +\n            \"-1 -37\\n\" +\n            \"-44 -14\\n\" +\n            \"25 27\\n\" +\n            \"14 31\\n\" +\n            \"19 47\\n\" +\n            \"45 -22\\n\" +\n            \"31 0\\n\" +\n            \"28 17\\n\" +\n            \"23 -26\\n\" +\n            \"0 -37\\n\" +\n            \"43 -4\\n\" +\n            \"48 25\\n\" +\n            \"10 -6\\n\" +\n            \"-47 43\\n\" +\n            \"-32 46\\n\" +\n            \"8 28\\n\" +\n            \"48 11\\n\" +\n            \"-12 -1\\n\" +\n            \"-25 48\\n\" +\n            \"-44 11\\n\" +\n            \"33 0\\n\" +\n            \"-40 7\\n\" +\n            \"-3 30\\n\" +\n            \"-21 34\\n\" +\n            \"-32 -22\\n\" +\n            \"17 34\\n\" +\n            \"-22 -40\\n\" +\n            \"36 -41\\n\" +\n            \"8 47\\n\" +\n            \"-3 -39\\n\" +\n            \"-28 46\\n\" +\n            \"-9 -13\\n\" +\n            \"37 -46\\n\" +\n            \"13 -33\\n\" +\n            \"30 22\\n\" +\n            \"28 -10\\n\" +\n            \"-3 28\\n\" +\n            \"26 21\\n\" +\n            \"-28 4\\n\" +\n            \"26 -11\\n\" +\n            \"-41 40\\n\" +\n            \"-43 47\\n\" +\n            \"37 4\\n\" +\n            \"41 -30\\n\" +\n            \"-27 -3\\n\" +\n            \"14 31\\n\" +\n            \"-13 -20\\n\" +\n            \"47 -49\\n\" +\n            \"29 -27\\n\" +\n            \"33 25\\n\" +\n            \"-10 45\\n\" +\n            \"-7 1\\n\" +\n            \"15 29\\n\" +\n            \"32 -15\\n\" +\n            \"17 46\\n\" +\n            \"-36 -38\\n\";\n}\n\nclass Solver {\n    private static final double EPS = 1e-10;\n\n    void solve(Scanner scanner) {\n        Line line = new Line(\n                new Vector(scanner.nextInt(), scanner.nextInt()),\n                new Vector(scanner.nextInt(), scanner.nextInt())\n        );\n\n        int q = scanner.nextInt();\n\n        for (int i = 0; i < q; i ++) {\n            Vector vector = new Vector(scanner.nextInt(), scanner.nextInt());\n            Vector reflection = vector.reflectTo(line);\n            System.out.println(reflection.x + \" \" + reflection.y);\n        }\n    }\n\n    private int[] splitInt(String s) {\n        String[] split = s.split(\" \");\n        int[] splitInt = new int[split.length];\n        for (int i = 0; i < split.length; i ++) {\n            splitInt[i] = Integer.parseInt(split[i]);\n        }\n        return splitInt;\n    }\n\n    private long[] splitLong(String s) {\n        String[] split = s.split(\" \");\n        long[] splitLong = new long[split.length];\n        for (int i = 0; i < split.length; i ++) {\n            splitLong[i] = Long.parseLong(split[i]);\n        }\n        return splitLong;\n    }\n}\n\n\nclass Vector {\n    double x;\n    double y;\n\n    Vector(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    Vector (Vector from, Vector to) {\n        this(to.x - from.x, to.y - from.y);\n    }\n\n    double innerProduct(Vector v) {\n        return this.x * v.x + this.y * v.y;\n    }\n\n    double outerProduct(Vector v) {\n        return this.x * v.y - this.y * v.x;\n    }\n\n    double abs() {\n        return Math.sqrt(this.norm());\n    }\n\n    double norm() {\n        return x * x + y * y;\n    }\n\n    Vector minus(Vector v) {\n        return new Vector(this.x - v.x, this.y - v.y);\n    }\n\n    Vector plus(Vector v) {\n        return new Vector(this.x + v.x, this.y + v.y);\n    }\n\n    Vector reflectTo(Line reflectedLine) {\n        Vector base = new Vector(reflectedLine.point1, reflectedLine.point2);\n        Vector hypo = this.minus(reflectedLine.point1);\n        double r = hypo.innerProduct(base) / base.norm();\n\n        base.x *= r;\n        base.y *= r;\n\n        Vector result = reflectedLine.point1.plus(base);\n        return result;\n    }\n}\n\nclass Line {\n    Vector point1;\n    Vector point2;\n\n    Line(Vector point1, Vector point2) {\n        this.point1 = point1;\n        this.point2 = point2;\n    }\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.util.*;\nimport java.math.BigDecimal;\n\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tdouble x1 = stdIn.nextDouble();\n\t\tdouble y1 = stdIn.nextDouble();\n\t\tdouble x2 = stdIn.nextDouble();\n\t\tdouble y2 = stdIn.nextDouble();\n\t\tint q = stdIn.nextInt();\n\t\tfor(int i=0;i<q;i++){\n\t\t\tdouble xp = stdIn.nextDouble();\n\t\t\tdouble yp = stdIn.nextDouble();\n\t\t\tVector vec1 = new Vector(x1,y1,x2,y2);\n\t\t\tVector vec2 = new Vector(x1,y1,xp,yp);\n\t\t\tvec1.projection(vec2);\n\t\t\tSystem.out.println((vec1.x+x1)+\" \"+(vec1.y+y1));\n\t\t}\n\n\t}\t\n}\n\nclass Vector{\n\tpublic final double EPS = Math.pow(10,-8);\n\tpublic double x,y;\n\tint cutoff = 9;\n\n\tVector( double x1 , double y1 , double x2 , double y2 ){\n\t\tthis.x = x2 - x1;\n\t\tthis.y = y2 - y1;\n\t}\n\n\tdouble dot( Vector a ){\t\n\t\treturn cuttingOff(this.x * a.x + this.y * a.y);\n\t}\n\tdouble cross( Vector a ){\t\n\t\treturn cuttingOff(this.x * a.y - this.y * a.x);\n\t}\n\n\tvoid add( Vector a ){\n\t\tthis.x = cuttingOff(this.x + a.x);\n\t\tthis.y = cuttingOff(this.y + a.y);\n\t}\n\tvoid sub( Vector a ){\n\t\tthis.x = cuttingOff(this.x - a.x);\n\t\tthis.y = cuttingOff(this.y - a.y);\n\t}\n\tvoid mul( double z ){\n\t\tthis.x = cuttingOff(this.x * z);\n\t\tthis.y = cuttingOff(this.y * z);\n\t}\n\tvoid div( double z ){\n\t\tthis.x = cuttingOff(this.x / z);\n\t\tthis.y = cuttingOff(this.y / z);\n\t}\n\n\tdouble abs(){\n\t\treturn Math.sqrt(norm());\n\t}\n\tdouble norm(){\n\t\treturn cuttingOff(this.x * this.x + this.y * this.y);\n\t}\n\n\tvoid projection( Vector a ){\n\t\tif(judge(a.norm())){\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t}\n\t\telse{\n\t\t\tdouble cos = dot(a)/(abs() * a.abs());\n\t\t\tdouble frac = a.abs() * cos/abs();\n\t\t\tmul(frac);\n\t\t}\n\t}\n\tVector reflection( Vector a ){\n\t\tprojection(a);\n\t\treturn new Vector(a.x,a.y,this.x,this.y);\n\t}\n\n\tboolean judgeisOrthogonal( Vector a ){\t\n\t\treturn judge(dot(a)) ? true : false;\n\t}  \n\tboolean judgeisParallel( Vector a ){\t\n\t\treturn judge(cross(a)) ? true : false;\n\t}\n\n\tboolean judge( double a ){\t\t\n\t\treturn Math.abs(a)<EPS ? true : false;\n\t}\n\tdouble cuttingOff(double a){\n\t\tBigDecimal bi = new BigDecimal(String.valueOf(a));\n\t\treturn bi.setScale(cutoff,BigDecimal.ROUND_DOWN).doubleValue();\n\t}\n} "
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Line2D;\nimport java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\tpublic Main() {\n\t\tnew AOJCGL_1().doIt();\n\t}\n\t\n\tclass AOJCGL_1{\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tdouble kyori = p0.distance(p1);\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D p2 = new Point2D.Double(in.nextDouble(),in.nextDouble());\n\t\t\t\tdouble angle =angle(p0, p1, p2);\n//\t\t\t\tSystem.out.println(angle);\n\t\t\t\tdouble t = p0.distance(p2) * Math.cos(angle);\n\t\t\t\tPoint2D result = new Point2D.Double(p0.getX()+(p1.getX()-p0.getX())*t/kyori,\n\t\t\t\t\t\tp0.getY()+(p1.getY()-p0.getY())*t/kyori);\n\t\t\t\tSystem.out.printf(\"%.9f %.9f\\n\",result.getX(),result.getY());\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate double angle(Point2D p0, Point2D p1, Point2D p2){\n\t\t\treturn Math.atan2(p2.getY()-p0.getY(),p2.getX()-p0.getY())-\n\t\t\tMath.atan2(p1.getY()-p0.getY(),p1.getX()-p0.getX());\n\t\t}\n\t\t\n\t}\n\t\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tdouble x_p1 = scan.nextDouble();\n\t\tdouble y_p1 = scan.nextDouble();\n\t\tdouble x_p2 = scan.nextDouble();\n\t\tdouble y_p2 = scan.nextDouble();\n\t\tdouble vx = x_p2 - x_p1;\n\t\tdouble vy = y_p2 - y_p1;\n\t\tint q = scan.nextInt();\n\t\tdouble l = norm(x_p1, y_p1, x_p2, y_p2);\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < q; i++) {\n\t\t\tdouble x = scan.nextDouble();\n\t\t\tdouble y = scan.nextDouble();\n\t\t\tdouble ux = x - x_p1;\n\t\t\tdouble uy = y - y_p1;\n\t\t\tdouble t = dot(ux, uy, vx, vy);\n\t\t\tdouble k = t / l;\n\t\t\tdouble a = k * vx + x_p1;\n\t\t\tdouble b = k * vy + y_p1;\n\t\t\t//System.out.println(a + \" \" + b);\n\t\t\tsb.append(a).append(\" \").append(b).append(\"\\n\");\n\t\t}\n\t\tscan.close();\n\t\tSystem.out.print(sb.toString());\n\t}\n\tstatic double dot(double x1, double y1, double x2, double y2) {\n\t\treturn x1 * x2 + y1 * y2;\n\t}\n\tstatic double norm(double x1, double y1, double x2, double y2) {\n\t\treturn (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.Random;\nimport java.util.Scanner;\nimport java.util.concurrent.SynchronousQueue;\n\npublic class Main {\n\n\tclass P {\n\t\tdouble x, y;\n\n\t\tP(double x_, double y_) {\n\t\t\tx = x_;\n\t\t\ty = y_;\n\t\t}\n\n\t\tP add(P p) {\n\t\t\treturn new P(x + p.x, y + p.y);\n\t\t}\n\n\t\tP sub(P p) {\n\t\t\treturn new P(x - p.x, y - p.y);\n\t\t}\n\n\t\tP mul(double v) {\n\t\t\treturn new P(x * v, y * v);\n\t\t}\n\n\t\tP div(double v) {\n\t\t\treturn new P(x / v, y / v);\n\t\t}\n\n\t\tdouble dot(P p) {\n\t\t\treturn x * p.x + y * p.y;\n\t\t}\n\n\t\tdouble det(P p) {\n\t\t\treturn x * p.y - y * p.x;\n\t\t}\n\n\t\tdouble abs2() {\n\t\t\treturn x * x + y * y;\n\t\t}\n\n\t\tdouble abs() {\n\t\t\treturn Math.sqrt(abs2());\n\t\t}\n\n\t\tP norm() {\n\t\t\treturn div(abs());\n\t\t}\n\n\t\tP rot90() {\n\t\t\treturn new P(-y, x);\n\t\t}\n\n\t\tP proj(P src, P dst) {\n\t\t\tP p_sd = dst.sub(src).norm();\n\t\t\treturn src.add(p_sd.mul(sub(src).dot(p_sd)));\n\t\t}\n\t}\n\n\tvoid run() {\n\t\tScanner sc = new Scanner(System.in);\n\t\tP src = new P(sc.nextDouble(), sc.nextDouble());\n\t\tP dst = new P(sc.nextDouble(), sc.nextDouble());\n\t\tint q = sc.nextInt();\n\t\twhile (q-- > 0) {\n\t\t\tP p = new P(sc.nextDouble(), sc.nextDouble());\n\t\t\tP x = p.proj(src, dst);\n\t\t\tSystem.out.println(x.x + \" \" + x.y);\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\n\tstatic void tr(Object... objects) {\n\t\tSystem.out.println(Arrays.deepToString(objects));\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Point2D;\nimport java.util.*;\npublic class Main {\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\tpublic Main() {\n\t\tnew AOJCGL_1().doIt();\n\t}\n\n\tclass AOJCGL_1{\n\t\tvoid doIt(){\n\t\t\tPoint2D p0 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\tPoint2D p1 = new Point2D.Double(in.nextDouble(), in.nextDouble());\n\t\t\tint q = in.nextInt();\n\t\t\tfor(int i=0;i<q;i++){\n\t\t\t\tPoint2D result = getVerticalPoint(p0, p1, new Point2D.Double(in.nextDouble(),in.nextDouble()));\n\t\t\t\tSystem.out.printf(\"%.9f %.9f\\n\",result.getX(),result.getY());\n\t\t\t}\n\t\t}\n\t\t\n\t\t//p0-p1の直線があるときに直線p2から直線らしたときp0-p1上の垂直な点を求める。\n\t\tprivate Point2D getVerticalPoint(Point2D p0,Point2D p1,Point2D p2){\n\t\t\tdouble kyori = p0.distance(p1);\n\t\t\tdouble angle = angle(p0, p1, p2);\n\t\t\tdouble t = p0.distance(p2) * Math.cos(angle);\n\t\t\tPoint2D result = new Point2D.Double(p0.getX()+(p1.getX()-p0.getX())*t/kyori,\n\t\t\t\t\tp0.getY()+(p1.getY()-p0.getY())*t/kyori);\n\t\t\treturn result;\n\t\t}\n\n\t\tprivate double angle(Point2D p0, Point2D p1, Point2D p2){\n\t\t\treturn Math.atan2(p2.getY()-p0.getY(),p2.getX()-p0.getX())-\n\t\t\t\t\tMath.atan2(p1.getY()-p0.getY(),p1.getX()-p0.getX());\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\n\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Point2D;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tString[] tmpArray = br.readLine().split(\" \");\n\t\tdouble px1 = Double.parseDouble(tmpArray[0]);\n\t\tdouble py1 = Double.parseDouble(tmpArray[1]);\n\t\tdouble px2 = Double.parseDouble(tmpArray[2]);\n\t\tdouble py2 = Double.parseDouble(tmpArray[3]);\n\n\t\tPoint2D p1 = new Point2D.Double(px1, py1);\n\t\tPoint2D p2 = new Point2D.Double(px2, py2);\n\n\t\tint q = Integer.parseInt(br.readLine());\n\n\t\tfor(int i = 0; i < q; i++){\n\t\t\ttmpArray = br.readLine().split(\" \");\n\t\t\tdouble x = Double.parseDouble(tmpArray[0]);\n\t\t\tdouble y = Double.parseDouble(tmpArray[1]);\n\n\t\t\tPoint2D p = new Point2D.Double(x,y);\n\n\t\t\tPoint2D result = calcProjection(p, p1, p2);\n//\t\t\tSystem.out.println(result.getX() + \" \"+ result.getY());\n\t\t\tSystem.out.printf(\"%.10f %.10f\\n\", result.getX(), result.getY());\n\t\t}\n\n\t}\n\n\tstatic Point2D calcProjection(Point2D p, Point2D p1, Point2D p2){\n\t\tdouble theta = Math.PI/2;\n\n\t\tif(p1.getX() != p2.getX()){\n\t\t\ttheta = Math.atan((p1.getY() - p2.getY()) / (p1.getX() - p2.getX()));\n\t\t}\n\n//\t\tSystem.out.println(\"theta \"+theta);\n\n\t\tAffineTransform affine = AffineTransform.getTranslateInstance(p1.getX(), p1.getY());\n\n\t\tPoint2D result = new Point2D.Double();\n//\t\tresult = affine.transform(p, result);\n//\t\tSystem.out.println(\"trans rev\" + result.getX() + \" \" + result.getY());\n\t\taffine.concatenate(AffineTransform.getRotateInstance(theta));\n\n//\t\tresult = new Point2D.Double();\n//\t\tresult = affine.transform(p, result);\n//\t\tSystem.out.println(\"rotate rev\" + result.getX() + \" \" + result.getY());\n\t\t//y座標を0にする\n\t\taffine.concatenate(new AffineTransform(1, 0, 0, 0, 0, 0));\n//\t\tresult = new Point2D.Double();\n//\t\tresult = affine.transform(p, result);\n//\t\tSystem.out.println(\"compress\" + result.getX() + \" \" + result.getY());\n\t\taffine.concatenate(AffineTransform.getRotateInstance(-theta));\n//\t\tresult = new Point2D.Double();\n//\t\tresult = affine.transform(p, result);\n//\t\tSystem.out.println(\"rotate\" + result.getX() + \" \" + result.getY());\n\t\taffine.concatenate(AffineTransform.getTranslateInstance(-p1.getX(), -p1.getY()));\n\n//\t\tresult = new Point2D.Double();\n\t\tresult = affine.transform(p, result);\n//\t\tSystem.out.println(\"trans\" + result.getX() + \" \" + result.getY());\n\n\t\treturn result;\n\n\t}\n\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\t// 入力\n\t\tScanner sc = new Scanner(System.in);\n\t\tdouble xp1 = sc.nextDouble();\n\t\tdouble yp1 = sc.nextDouble();\n\t\tVector2d p1 = new Vector2d(xp1, yp1);\n\t\tdouble xp2 = sc.nextDouble();\n\t\tdouble yp2 = sc.nextDouble();\n\t\tVector2d p2 = new Vector2d(xp2, yp2);\n\t\tint q = sc.nextInt();\n\t\tArrayList<Vector2d> p = new ArrayList<>();\n\t\tfor (int i=0; i<q; i++) {\n\t\t\tdouble x = sc.nextDouble();\n\t\t\tdouble y = sc.nextDouble();\n\t\t\tp.add(new Vector2d(x, y));\n\t\t}\n\t\tsc.close();\n\n\t\tfor (int i=0; i<q; i++) {\n\t\t\tSystem.out.println(solve(p.get(i), p1, p2));\n\t\t}\n\n\t}\n\n\tstatic class Vector2d {\n\n\t\tVector2d(Double x, Double y){\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tDouble x;\n\t\tDouble y;\n\n\t\tpublic String toString() {\n\t\t\treturn String.format(\"%1$.10f %2$.10f\", x, y);\n\t\t}\n\t}\n\n\tpublic static Vector2d sub(Vector2d v1, Vector2d v2){\n\t\treturn new Vector2d(v2.x - v1.x, v2.y - v1.y);\n\t}\n\n\tpublic static Double sqNorm(Vector2d v){\n\t\treturn v.x * v.x + v.y * v.y;\n\t}\n\n\tpublic static Double product(Vector2d v1, Vector2d v2){\n\t\treturn v1.x * v2.x + v1.y * v2.y;\n\t}\n\n\tpublic static Vector2d extend(double s, Vector2d v){\n\t\treturn new Vector2d(s * v.x, s * v.y);\n\t}\n\n\tpublic static Vector2d solve(Vector2d p, Vector2d p1, Vector2d p2) {\n\t\tVector2d a = sub(p1, p2);\n\t\tVector2d b = sub(p1, p);\n\t\treturn extend(product(a, b) / sqNorm(a), a);\n\t}\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        new Solver().solve(new Scanner(System.in));\n//        new Solver().solve(new Scanner(ex));\n    }\n\n    private static final String ex = \"0 0 3 4\\n\" +\n            \"1\\n\" +\n            \"2 5\\n\";\n}\n\nclass Solver {\n    private static final double EPS = 1e-10;\n\n    void solve(Scanner scanner) {\n        Line line = new Line(\n                new Vector(scanner.nextInt(), scanner.nextInt()),\n                new Vector(scanner.nextInt(), scanner.nextInt())\n        );\n\n        int q = scanner.nextInt();\n\n        for (int i = 0; i < q; i ++) {\n            Vector vector = new Vector(scanner.nextInt(), scanner.nextInt());\n            Vector reflection = vector.reflectTo(line);\n            System.out.println(reflection.x + \" \" + reflection.y);\n        }\n    }\n\n    private int[] splitInt(String s) {\n        String[] split = s.split(\" \");\n        int[] splitInt = new int[split.length];\n        for (int i = 0; i < split.length; i ++) {\n            splitInt[i] = Integer.parseInt(split[i]);\n        }\n        return splitInt;\n    }\n\n    private long[] splitLong(String s) {\n        String[] split = s.split(\" \");\n        long[] splitLong = new long[split.length];\n        for (int i = 0; i < split.length; i ++) {\n            splitLong[i] = Long.parseLong(split[i]);\n        }\n        return splitLong;\n    }\n}\n\n\nclass Vector {\n    double x;\n    double y;\n\n    Vector(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    Vector (Vector from, Vector to) {\n        this(to.x - from.x, to.y - from.y);\n    }\n\n    double innerProduct(Vector v) {\n        return this.x * v.x + this.y * v.y;\n    }\n\n    double outerProduct(Vector v) {\n        return this.x * v.y - this.y * v.x;\n    }\n\n    double abs() {\n        return Math.sqrt(this.norm());\n    }\n\n    double norm() {\n        return x * x + y * y;\n    }\n\n    Vector minus(Vector v) {\n        return new Vector(this.x - v.x, this.y - v.y);\n    }\n\n    Vector plus(Vector v) {\n        return new Vector(this.x + v.x, this.y + v.y);\n    }\n\n    Vector reflectTo(Line reflectedLine) {\n        Vector base = new Vector(reflectedLine.point1, reflectedLine.point2);\n        Vector hypo = this.minus(reflectedLine.point1);\n        double r = hypo.innerProduct(base) / base.norm();\n        Vector result = reflectedLine.point1.plus(base);\n        result.x *= r;\n        result.y *= r;\n        return result;\n    }\n}\n\nclass Line {\n    Vector point1;\n    Vector point2;\n\n    Line(Vector point1, Vector point2) {\n        this.point1 = point1;\n        this.point2 = point2;\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Main {\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tdouble x1, y1, x2, y2, xq, yq, ax, ay;\n\t\tdouble m1, m2, l1, l2;\n\t\t\n\t\tint q;\n\n\t\tx1 = scan.nextDouble();\n\t\ty1 = scan.nextDouble();\n\t\tx2 = scan.nextDouble();\n\t\ty2 = scan.nextDouble();\n\t\t\n\t\t//Y - y1 =((y2-y1) / (x2-x1)) * (X-x1)\n\t\t\n\t\t//p1,p2???????????´???????????? m1\n\t\tm1 = (y2-y1) / (x2-x1);\n\t\t\n\t\t//p1,p2??´????????????  l1\n\t\tl1 = y1 - (m1 * x1);\n\t\t\n\t\t//p???????????????????????????m2\n\t\tm2 = -1.0 / m1;\n\t\t\n\t\tq = scan.nextInt();\n\t\t\n\t\tfor(int i = 0; i < q; i++) {\n\t\t\txq = scan.nextDouble();\n\t\t\tyq = scan.nextDouble();\n\n\t\t\tif(x1 == x2) { //?????????????????´\n\t\t\t\tax = x1;\n\t\t\t\tay = yq;\n\t\t\t\t\n\t\t\t} else if(y1 == y2) { //??????????°´???\n\t\t\t\tax = xq;\n\t\t\t\tay = y1;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t//p???????????????????????? l2\n\t\t\t\tl2 = yq - (m2 * xq);\n\t\t\t\n\t\t\t\t//??¬????????§?¨????ax, ay)\n\t\t\t\tax = (l2 - l1) / (m1 - m2);\n\t\t\t\tay = (l2 * m1 - l1 * m2) / (m1 - m2);\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(ax + \" \" + ay);\n\t\t}\n\t\t\n\t\tscan.close();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        \n        double x_p1 = scan.nextDouble();\n        double y_p1 = scan.nextDouble();\n        double x_p2 = scan.nextDouble();\n        double y_p2 = scan.nextDouble();\n        \n        double vx = x_p2 - x_p1;\n        double vy = y_p2 - y_p1;\n        \n        int q = scan.nextInt();\n        double l = norm(x_p1, y_p1, x_p2, y_p2);\n        \n        StringBuilder sb = new StringBuilder();\n        \n        for(int i = 0; i < q; i++) {\n            double x = scan.nextDouble();\n            double y = scan.nextDouble();\n            double ux = x - x_p1;\n            double uy = y - y_p1;\n            double t = dot(ux, uy, vx, vy);\n            double k = t / l;\n            double a = k * vx + x_p1;\n            double b = k * vy + y_p1;\n            \n            //System.out.println(a + \" \" + b);\n            sb.append(a).append(\" \").append(b).append(\"\\n\");\n        }\n        scan.close();\n        System.out.print(sb.toString());\n    }\n    \n    static double dot(double x1, double y1, double x2, double y2) {\n        return x1 * x2 + y1 * y2;\n    }\n    \n    static double norm(double x1, double y1, double x2, double y2) {\n        return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.Scanner;\n\npublic class Main{\n    public static void main(String args[]){\n        Scanner scan = new Scanner(System.in);\n        \n//        try{\n            double x = scan.nextDouble();\n            double y = scan.nextDouble();\n            double xx = scan.nextDouble();\n            double yy = scan.nextDouble();\n            int qer = scan.nextInt();\n                    \n            double xxx = 0;\n            double yyy = 0;\n            xxx = xx - x;\n            yyy = yy - y;\n        \n            double xp[] = new double[qer];\n            double yp[] = new double[qer];\n            double ansx[] = new double[qer];\n            double ansy[] = new double[qer];\n            for(int i = 0; i < qer; i++){\n                xp[i] = scan.nextDouble();\n                yp[i] = scan.nextDouble();\n                double xxxx = x - xp[i];\n                double yyyy = y - yp[i];\n                ansx[i] = x - xxx * (xxxx * xxx + yyyy * yyy) / (xxx * xxx + yyy * yyy);\n                ansy[i] = y - yyy * (xxxx * xxx + yyyy * yyy) / (xxx * xxx + yyy * yyy);\n                System.out.println(ansx[i] + \" \" + ansy[i]);\n            }\n//        }catch(InputMismatchException e){\n//            System.out.println(\"Error\" + e);\n//        }\n\n    }\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.NoSuchElementException;\n\npublic class Main {\n\tprivate static FastScanner sc = new FastScanner();\n\n\tpublic static void main(String[] args) {\n\t\tdouble x1 = sc.nextDouble();\n\t\tdouble y1 = sc.nextDouble();\n\t\tdouble x2 = sc.nextDouble();\n\t\tdouble y2 = sc.nextDouble();\n\t\t\n\t\tdouble a = (y2 - y1) / (x2 - x1);\n\t\tdouble b = y1 - a * x1;\n\t\t\n\t\tint q = sc.nextInt();\n\t\tStringBuilder ans = new StringBuilder();\n\t\tfor(int i=0; i<q; i++) {\n\t\t\tdouble xp = sc.nextDouble();\n\t\t\tdouble yp = sc.nextDouble();\n\t\t\t\n\t\t\tdouble x = 0;\n\t\t\tdouble y = 0;\n\t\t\tif(y1 == y2) {\n\t\t\t\tx = xp;\n\t\t\t\ty = y1;\n\t\t\t} else {\n\t\t\t\tx = (yp + xp / a - b) / (a + 1 / a);\n\t\t\t\ty = yp + xp / a - x / a;\n\t\t\t}\n\t\t\t\n\t\t\tans.append(x);\n\t\t\tans.append(\" \");\n\t\t\tans.append(y);\n\t\t\tans.append(\"\\n\");\n\t\t}\n\t\t\n\t\tSystem.out.print(ans);\n\t}\n\n\tstatic class FastScanner {\n        private final InputStream in = System.in;\n        private final byte[] buffer = new byte[1024];\n        private int ptr = 0;\n        private int buflen = 0;\n        private boolean hasNextByte() {\n            if(ptr < buflen) {\n                return true;\n            } else {\n                ptr = 0;\n                try {\n                    buflen = in.read(buffer);\n                } catch(IOException e) {\n                    e.printStackTrace();\n                }\n                if(buflen <= 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n        private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n        private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n        public String next() {\n            if (!hasNext()) throw new NoSuchElementException();\n            StringBuilder sb = new StringBuilder();\n            int b = readByte();\n            while(isPrintableChar(b)) {\n                sb.appendCodePoint(b);\n                b = readByte();\n            }\n            return sb.toString();\n        }\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n        public int nextInt(){\n            return Integer.parseInt(next());\n        }\n        public double nextDouble(){\n            return Double.parseDouble(next());\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint xp1 = sc.nextInt();\n\t\tint yp1 = sc.nextInt();\n\t\tint xp2 = sc.nextInt();\n\t\tint yp2 = sc.nextInt();\n\n\t\tint q = sc.nextInt();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint xp0 = sc.nextInt();\n\t\t\tint yp0 = sc.nextInt();\n\n\t\t\tdouble dot = Geom.dot(xp2 - xp1, yp2 - yp1, xp0 - xp1, yp0 - yp1);\n\t\t\tint a2 = Geom.sumofsquare(xp2 - xp1, yp2 - yp1);\n\t\t\tdouble x = dot / a2 * (xp2 - xp1);\n\t\t\tdouble y = dot / a2 * (yp2 - yp1);\n\t\t\t\n\t\t\tSystem.out.printf(\"%.9f %.9f\\n\", x, y);\n\t\t}\n\n\t\tsc.close();\n\t}\n\t\n\tprivate static class Geom {\n\t\tstatic int dot(int xa, int ya, int xb, int yb) {\n\t\t\treturn xa * xb + ya * yb;\n\t\t}\n\n\t\tstatic int cross(int xa, int ya, int xb, int yb) {\n\t\t\treturn xa * yb - xb * ya;\n\t\t}\n\t\t\n\t\tstatic int sumofsquare(int xa, int ya) {\n\t\t\treturn xa * xa + ya * ya;\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\n\n\npublic class Main {\n\n\tstatic double EPS = 0.0000000001;\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tSegment seg  =new Segment(new Point(sc.nextInt(),sc.nextInt()),new Point(sc.nextInt(),sc.nextInt()));\n\n\t\tint q=sc.nextInt();\n\t\tfor (int i=0;i<q;i++) {\n\t\t\tPoint p = project(seg,new Point(sc.nextInt(),sc.nextInt()));\n\t\t\tSystem.out.println(p.x+\" \"+p.y);\n\t\t}\n\t}\n\tstatic Point project(Segment s, Point p) {\n\t\tVector base = s.p2.diff(s.p1);\n\t\tdouble r = p.diff(s.p1).dotProduct(base) / base.norm();\n\t\treturn s.p1.sum(base.mult(r));\n\t}\n}\nclass Point {\n\tstatic double EPS = 0.0000000001;\n\tdouble x; double y;\n\tpublic Point(double ax, double ay){x=ax;y=ay;}\n\tpublic Vector sum(Point p) { return new Vector(x+p.x,y+y); }\n\tpublic Vector diff(Point p) { return new Vector(x-p.x,y-p.y); }\n\tpublic Vector mult(double k) { return new Vector(x*k,y*k); }\n\tpublic Vector div(double k) { return new Vector(x*(1.0/k),y*(1.0/k)); }\n\tpublic boolean equals(Point p){return Math.abs(x-p.x)<EPS && Math.abs(y-p.y)<EPS;}\n}\nclass Vector extends Point {\n\tpublic Vector(double ax, double ay) {super(ax,ay);}\n\tpublic Vector(Point p1, Point p2) {super(p1.x-p2.x,p2.x-p2.y);}\n\tpublic double norm() {return x*x+y*y;}\n\tpublic double abs() {return Math.sqrt(norm());}\n\t// TODO:\n\tpublic boolean isSmallerThan(Vector v) {return x!=v.x?x<v.x:y<v.y;}\n\tpublic double dotProduct(Vector v) {return x*v.x+y*v.y;}\n\tpublic double crossProduct(Vector v) {return x*v.y - y*v.x;}\n}\n\nclass Segment {\n\tPoint p1; Point p2;\n\tpublic Segment(Point ap1, Point ap2){p1=ap1;p2=ap2;}\n\tpublic double dotProduct(Segment s) {return (p1.x-p2.x)*(s.p1.x-s.p2.x)+(p1.y-p2.y)*(s.p1.y-s.p2.y);}\n\tpublic double crossProduct(Segment s) {return (p1.x-p2.x)*(s.p1.y-s.p2.y) - (p1.y-p2.y)*(s.p1.x-s.p2.x);}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Text;\n\nnamespace CGL_1_A_Projection\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tint[] inputNum = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\t\t\tint inputCount = int.Parse (Console.ReadLine ());\n\n\t\t\tStringBuilder output = new StringBuilder (inputCount * 10 * 2);\n\n\t\t\tVector2 beginPoint = new Vector2 (inputNum[0], inputNum[1]);\n\t\t\tVector2 endPoint = new Vector2 (inputNum[2], inputNum[3]);\n\n\t\t\tfor (int lp = 0; lp < inputCount; lp++)\n\t\t\t{\n\t\t\t\tinputNum = Array.ConvertAll (Console.ReadLine ().Split (' '), int.Parse);\n\n\t\t\t\tVector2 result = Vector2.Projection (beginPoint, endPoint, new Vector2 (inputNum[0], inputNum[1]));\n\n\t\t\t\toutput.Append (result.X);\n\t\t\t\toutput.Append (\" \");\n\t\t\t\toutput.Append (result.Y);\n\t\t\t\toutput.AppendLine ();\n\t\t\t}\n\n\t\t\tConsole.Write (output);\n\t\t}\n\t}\n\n\tclass Vector2\n\t{\n\t\tpublic Vector2 ( decimal x, decimal y )\n\t\t{\n\t\t\tthis.X = x;\n\t\t\tthis.Y = y;\n\t\t}\n\n\t\tpublic decimal X { private set; get; }\n\t\tpublic decimal Y { private set; get; }\n\n\t\tpublic static Vector2 operator + ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X + ob2.X, ob1.Y + ob2.Y);\n\t\t}\n\t\tpublic static Vector2 operator - ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn new Vector2 (ob1.X - ob2.X, ob1.Y - ob2.Y);\n\t\t}\n\t\tpublic static Vector2 operator * ( Vector2 ob, decimal scalar )\n\t\t{\n\t\t\treturn new Vector2 (ob.X * scalar, ob.Y * scalar);\n\t\t}\n\n\t\tpublic decimal Length ()\n\t\t{\n\t\t\treturn X * X + Y * Y;\n\t\t}\n\t\tpublic static decimal DotProduct ( Vector2 ob1, Vector2 ob2 )\n\t\t{\n\t\t\treturn ob1.X * ob2.X + ob1.Y * ob2.Y;\n\t\t}\n\n\t\tpublic static Vector2 Projection ( Vector2 beginPoint, Vector2 endPoint, Vector2 point )\n\t\t{\n\t\t\tVector2 segment = endPoint - beginPoint;\n\t\t\tdecimal ratio = Vector2.DotProduct (point - beginPoint, segment) / segment.Length ();\n\t\t\treturn beginPoint + segment * ratio;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace CSharpSample01\n{\n\n    class Vector\n    {\n        public double x;\n        public double y;\n\n        public Vector() { }\n\n        public Vector(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n    }\n    \n    class Program\n    {       \n        \n        static void Main(string[] args)\n        {\n            double[] data = Console.ReadLine().Split(' ').Select(x => double.Parse(x)).ToArray();\n\n            Vector p1 = new Vector(data[0], data[1]);\n            Vector p2 = new Vector(data[2], data[3]);\n            Vector ground = new Vector(data[2] - data[0], data[3] - data[1]);\n\n            int q = int.Parse(Console.ReadLine());\n\n            for(int i = 0; i < q; i++)\n            {\n                string[] str = Console.ReadLine().Split(' ');\n                Vector p = new Vector(int.Parse(str[0]), int.Parse(str[1]));\n                Vector hypo = new Vector(p.x - p1.x, p.y - p1.y);\n\n                Vector ans = new Vector();\n\n                ans.x = p1.x + ground.x * (hypo.x * ground.x + hypo.y * ground.y) / (ground.x * ground.x + ground.y * ground.y);\n                ans.y = p1.y + ground.y * (hypo.x * ground.x + hypo.y * ground.y) / (ground.x * ground.x + ground.y * ground.y);\n\n                Console.WriteLine($\"{ans.x:f8} {ans.y:f8}\");\n\n            }\n\n            \n\n        }\n    }\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing Aoj.CGL.Lib;\n \nnamespace Aoj.CGL.Chapter1A\n{\n    class Program\n    {\n        public static void Solve()\n        {\n            int[] input = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n            Vector v1 = new Vector(input[0], input[1]);\n            Vector v2 = new Vector(input[2], input[3]);\n            Vector baseV = v2 - v1;\n \n            int q = int.Parse(Console.ReadLine());\n  \n            for (int i = 0; i < q; i++)\n            {\n                int[] x_y = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n \n                Vector v = new Vector(x_y[0], x_y[1]) - v1;\n                Vector p = Vector.Project(v, baseV);\n \n                Vector answer = v1 + p;\n                Console.WriteLine(\"{0:0.0000000000} {1:0.0000000000}\", answer.X, answer.Y);\n            }\n        }\n \n        public static void Main()\n        {\n            // Console.SetIn(new System.IO.StreamReader(\"ComputationalGeometry/Input/01_Projection_A_01.txt\"));\n            // var sw = new Stopwatch();\n            // sw.Start();\n \n            Solve();\n \n            // Console.WriteLine(\"{0}ms\", sw.ElapsedMilliseconds);\n        }\n    }\n}\n \nnamespace Aoj.CGL.Lib\n{\n    using Line = Segment;\n \n    using Polygon = List<Point>;\n \n    public struct Point\n    {\n        private double _x;\n        private double _y;\n \n        public double X { get { return _x;} }\n        public double Y { get { return _y;} }\n \n        public Point(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n \n        public static Point operator +(Point p1, Point p2)\n        {\n            return new Point(p1.X + p2.X, p1.Y + p2.Y);\n        }\n \n        public static Point operator -(Point p1, Point p2)\n        {\n            return new Point(p1.X - p2.X, p1.Y - p2.Y);\n        }\n \n        public static Point operator *(Point p, double k)\n        {\n            return new Point(p.X * k, p.Y * k);\n        }\n \n        public static explicit operator Vector(Point p)\n        {\n            return new Vector(p.X, p.Y);\n        }\n \n        public static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsOrthogonal((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n \n        public static bool IsParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsParallel((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n \n        public override string ToString()\n        {\n            return string.Format(\"x:{0},y:{1}\", X, Y);\n        }\n    }\n \n    public struct Segment\n    {\n        private Point _p1;\n        private Point _p2;\n \n        public Point P1 { get{ return _p1; } }\n        public Point P2 { get{ return _p2; } }\n \n        public Segment(Point p1, Point p2)\n        {\n            _p1 = p1;\n            _p2 = p2;\n        }\n \n        public Segment(double x1, double y1, double x2, double y2)\n        {\n            _p1 = new Point(x1, y1);\n            _p2 = new Point(x2, y2);\n        }\n        public static bool IsOrthogonal(Segment s1, Segment s2)\n        {\n            return Vector.IsOrthogonal((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n \n        public static bool IsParallel(Segment s1, Segment s2)\n        {\n            return Vector.IsParallel((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n \n        public override string ToString()\n        {\n            return string.Format(\"P1x:{0},P1y:{1}, P2x:{2},P2y:{3}\", P1.X, P1.Y, P2.X, P2.Y);\n        }\n    }\n \n    public struct Circle\n    {\n        private Point _p;\n        private double _r;\n \n        public Point P { get { return _p; } }\n        public double R { get { return _r; } }\n \n        public Circle(Point p, double r)\n        {\n            _p = p;\n            _r = r;\n        }\n \n        public override string ToString()\n        {\n            return string.Format(\"px:{0},py:{1},r:{2}\", P.X, P.Y, R);\n        }\n    }\n \n    public struct Vector\n    {\n        private double _x;\n        private double _y;\n \n        public double X { get { return _x;} }\n        public double Y { get { return _y;} }\n \n        public Vector(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n \n        public double Norm()\n        {\n            return X * X + Y * Y;\n        }\n \n        public double Abs()\n        {\n            return Math.Sqrt(Norm());\n        }\n \n        public Vector Normalize()\n        {\n            double mag = Abs();\n            return new Vector(X * mag, Y * mag);\n        }\n \n        public static Vector operator +(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X + v2.X, v1.Y + v2.Y);\n        }\n \n        public static Vector operator -(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X - v2.X, v1.Y - v2.Y);\n        }\n \n        public static Vector operator *(Vector v, double k)\n        {\n            return new Vector(v.X * k, v.Y * k);\n        }\n \n        public static double Dot(Vector v1, Vector v2)\n        {\n            return v1.X * v2.X + v1.Y * v2.Y;\n        }\n \n        public static double Cross(Vector v1, Vector v2)\n        {\n            return v1.X * v2.Y - v1.Y * v2.X;\n        }\n \n        public static bool IsOrthogonal(Vector v1, Vector v2)\n        {\n            return Dot(v1, v2) == 0.0;\n        }\n \n        public static bool IsParallel(Vector v1, Vector v2)\n        {\n            return Cross(v1, v2) == 0.0;\n        }\n \n        public static Vector Project(Vector v, Vector onNormal)\n        {\n            // mag = |b|cos?? / |a|\n            //     = |a||b|cos?? / |a|^2\n            double mag = Dot(v, onNormal) / onNormal.Norm();\n            return new Vector(onNormal.X * mag, onNormal.Y * mag);\n        }\n \n        public override string ToString()\n        {\n            return string.Format(\"x:{0},y:{1}\", X, Y);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            double[] input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n            Point a = new Point(input[0], input[1]);\n            Point b = new Point(input[2], input[3]);\n\n            Segment s = new Segment(a, b);\n\n            int q = int.Parse(Console.ReadLine());\n\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < q; i++)\n            {\n                input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n                Point p = new Point(input[0], input[1]);\n\n                sb.AppendLine(Project(s, p).ToString());\n            }\n            Console.Write(sb);\n        }\n\n        static Point Project(Segment s, Point p)\n        {\n            Point b = s.p2 - s.p1;\n            double r = (p - s.p1).Dot(b) / b.Norm;\n            return s.p1 + b * r;\n        }\n    }\n\n    class Point : IComparable\n    {\n        static readonly double EPS = 1E-10;\n\n        internal double x, y;\n\n        public Point(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public double Abs { get { return Math.Sqrt(Norm); } }\n        public double Norm { get { return x * x + y * y; } }\n\n        public double Dot(Point p) { return x * p.x + y * p.y; }\n        public double Cross(Point p) { return x * p.y - y * p.x; }\n        public double Distance(Point p) { return (this - p).Abs; }\n\n        public static Point operator +(Point a, Point b) { return new Point(a.x + b.x, a.y + b.y); }\n        public static Point operator -(Point a, Point b) { return new Point(a.x - b.x, a.y - b.y); }\n        public static Point operator *(Point p, double d) { return new Point(p.x * d, p.y * d); }\n        public static Point operator /(Point p, double d) { return new Point(p.x / d, p.y / d); }\n        public static bool operator <(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Point a, Point b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Point a, Point b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public int CompareTo(object obj)\n        {\n            var other = obj as Point;\n            if (other == null) return -1;\n\n            ComparerX compX = new ComparerX();\n            return compX.Compare(this, other);\n        }\n\n        public override bool Equals(object obj)\n        {\n            var other = obj as Point;\n            return Math.Abs(x - other.x) < EPS && Math.Abs(y - other.y) < EPS;\n        }\n\n        public override int GetHashCode()\n        {\n            return x.GetHashCode() ^ y.GetHashCode();\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"{0} {1}\", x, y);\n        }\n    }\n\n    class ComparerX : IComparer<Point>\n    {\n        static readonly double EPS = 1E-10;\n\n        public int Compare(Point a, Point b)\n        {\n            if (a.x - b.x < -EPS) return -1;\n            if (a.x - b.x > EPS) return 1;\n            if (a.y - b.y < -EPS) return -1;\n            if (a.y - b.y > EPS) return 1;\n            return 0;\n        }\n    }\n\n    class ComparerY : IComparer<Point>\n    {\n        static readonly double EPS = 1E-10;\n\n        public int Compare(Point a, Point b)\n        {\n            if (a.y - b.y < -EPS) return -1;\n            if (a.y - b.y > EPS) return 1;\n            if (a.x - b.x < -EPS) return -1;\n            if (a.x - b.x > EPS) return 1;\n            return 0;\n        }\n    }\n\n    class Segment\n    {\n        internal Point p1, p2;\n\n        public Segment(Point p1, Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing static System.Console;\nusing System.Text;\nusing System.IO;\n\n\nnamespace AOJ\n{\n    using Vector = Point;\n    using Line = Segment;\n    using Polygon = List<Point>;\n\n    class Consts\n    {\n        public static readonly double EPS = 1e-10;\n    }\n    class Point\n    {\n        double x, y;\n        public double X { get { return this.x; } set { this.x = value; } }\n        public double Y { get { return this.y; } set { this.y = value; } }\n        public Point(double x = 0, double y = 0)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        static public Point operator +(Point p1, Point p2) => new Point(p1.x + p2.x, p1.y + p2.y);\n        static public Point operator -(Point p1, Point p2) => new Point(p1.x - p2.x, p1.y - p2.y);\n        static public Point operator *(Point p, double a) => new Point(a * p.x, a * p.y);\n        static public Point operator /(Point p, double a) => new Point(p.x / a, p.y / a);\n        static public bool operator <(Point p1, Point p2) => p1.x != p2.x ? p1.x < p2.x : p1.y < p2.y;\n        static public bool operator >(Point p1, Point p2) => p2 < p1;\n\n        static public bool operator ==(Point p1, Point p2) => (p1.x - p2.x) < Consts.EPS && (p1.y - p2.y) < Consts.EPS;\n        static public bool operator !=(Point p1, Point p2) => !(p1 == p2);\n\n        public double abs() => Math.Abs(norm());\n        public double norm() => this.x * this.x + this.y * this.y;\n        public double euclideannorm() => Math.Sqrt(norm());//ユークリッド距離\n\n        public override bool Equals(object obj)\n        {\n            if ((object)obj == null || this.GetType() != obj.GetType())\n            {\n                return false;\n            }\n            var c = (Point)obj;\n            return this == c;\n        }\n        public override int GetHashCode()\n        {\n            return this.x.GetHashCode() ^ this.y.GetHashCode();\n        }\n    }\n    struct Segment\n    {\n        public Point p1, p2;\n    }\n    class Circle\n    {\n        public Point c;\n        public double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n    }\n\n    class VecCalc\n    {\n        static bool equals(double a, double b) => Math.Abs(a - b) < Consts.EPS;\n        //内積\n        static public double dot(Vector a, Vector b)\n        {\n            return a.X * b.X + a.Y * b.Y;\n        }\n        //外積\n        static public double cross(Vector a, Vector b)\n        {\n            return a.X * b.Y - a.Y * b.X;\n        }\n        //直行判定\n        static public bool isOrthogonal(Vector a, Vector b)\n        {\n            return equals(dot(a, b), 0.0);\n        }\n        static public bool isOrthogonal(Point a1, Point a2, Point b1, Point b2)\n        {\n            return isOrthogonal(a1 - a2, b1 - b2);\n        }\n        static public bool isOrthogonal(Segment s1, Segment s2)\n        {\n            return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n        }\n        //平行判定\n        static public bool isParallel(Vector a, Vector b)\n        {\n            return equals(cross(a, b), 0.0);\n        }\n        static public bool isParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return isParallel(a1 - a2, b1 - b2);\n        }\n        static public bool isParallel(Segment s1, Segment s2)\n        {\n            return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n        }\n        //cos\\theta\n        static public double costheta(Vector a, Vector b)\n        {\n            var enorm = a.euclideannorm() * b.euclideannorm();\n            if (equals(enorm, 0.0)) return 1.0;\n            return dot(a, b) / enorm;\n        }\n        static public double costheta(Point a1, Point a2, Point b1, Point b2)\n        {\n            return costheta(a1 - a2, b1 - b2);\n        }\n        static public double costheta(Segment s1, Segment s2)\n        {\n            return costheta(s1.p2 - s1.p1, s2.p2 - s2.p1);\n        }\n    }\n    class Program\n    {\n        static public long[] Sarray() { return ReadLine().Trim().Split().Select(long.Parse).ToArray(); }\n        static public List<long> Slist() { return ReadLine().Split().Select(long.Parse).ToList(); }\n\n\n        static void Main(string[] args)\n        {\n            var p1p2 = Sarray();\n            var p1 = new Point(p1p2[0], p1p2[1]);\n            var p2 = new Point(p1p2[2], p1p2[3]);\n            var Q = Sarray()[0];\n            for (var i = 0; i < Q; ++i)\n            {\n                var pi = Sarray();\n                var p = new Point(pi[0], pi[1]);\n                Vector b = p2 - p1;\n                double r = VecCalc.dot(p - p1, b) / b.norm();\n                var ans = p1 + b * r;\n                WriteLine($\"{ans.X} {ans.Y}\");\n\n            }\n        }\n    }\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nnamespace geometry\n{\n\tpublic class Point{\n\t\tpublic double x, y;\n\t\tpublic Point(){\n\t\t\tthis.x = this.y = 0;\n\t\t}\n\n\t\tpublic Point(double x, double y){\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tpublic static Point operator+(Point p1, Point p2){\n\t\t\treturn new Point (p1.x + p2.x, p1.y + p2.y);\n\t\t}\n\n\t\tpublic static Point operator-(Point p1, Point p2){\n\t\t\treturn new Point (p1.x - p2.x, p1.y - p2.y);\n\t\t}\n\n\t\tpublic static Point operator*(Point p1, double a){\n\t\t\treturn new Point (p1.x * a, p1.y * a);\n\t\t}\n\n\t\tpublic static Point operator/(Point p1, double a){\n\t\t\treturn new Point (p1.x / a, p1.y / a);\n\t\t}\n\n\t\tpublic double norm(){\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t}\n\n\t\tpublic double abs(){\n\t\t\treturn Math.Sqrt(norm()); \n\t\t}\n\n\t\tpublic Point Clone(){\n\t\t\tPoint clone = new Point (this.x, this.y);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tpublic class Line{\n\t\tpublic Point p1, p2;\n\t\tpublic Line(){\n\t\t\tthis.p1 = new Point ();\n\t\t\tthis.p2 = new Point ();\n\t\t}\n\n\t\tpublic Line(double p1x, double p1y, double p2x, double p2y){\n\t\t\tthis.p1 = new Point(p1x, p1y);\n\t\t\tthis.p2 = new Point(p2x, p2y);\n\t\t}\n\n\t\tpublic Line(Point p1, Point p2){\n\t\t\tthis.p1 = p1.Clone();\n\t\t\tthis.p2 = p2.Clone();\n\t\t}\n\n\t\tpublic Line Clone(){\n\t\t\tLine clone = new Line (this.p1, this.p2);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tpublic class Circle{\n\t\tpublic Point c;\n\t\tpublic double r;\n\t\tpublic Circle(){\n\t\t\tthis.c = new Point ();\n\t\t\tthis.r = 0.0;\n\t\t}\n\n\t\tpublic Circle(double cx, double cy, double r){\n\t\t\tthis.c.x = cx;\n\t\t\tthis.c.y = cy;\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic Circle(Point c, double r){\n\t\t\tthis.c = c.Clone();\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic Circle Clone(){\n\t\t\tCircle clone = new Circle (this.c, this.r);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tclass MainClass{\n\t\tstatic bool is_equal(double a, double b){\n\t\t\tif (Math.Abs (a - b) < 0.000001) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tstatic double dot(Point v1, Point v2){\n\t\t\treturn v1.x * v2.x + v1.y * v2.y;\n\t\t}\n\n\t\tstatic double cross(Point v1, Point v2){\n\t\t\treturn v1.x * v2.y - v1.y * v2.x;\n\t\t}\n\n\t\t// ??´?????????\n\t\tstatic bool is_orthogonal(Line s1, Line s2){\n\t\t\treturn is_equal(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n\t\t}\n\n\t\t// ????????????\n\t\tstatic bool is_parallel(Line s1, Line s2){\n\t\t\treturn is_equal(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n\t\t}\n\n\t\t/*\n\t\tstatic bool is_intersect_sl(Line s, Line sl){\n\t\t\treturn true;\n\t\t}\n\t\t*/\n\n\t\t// ?°???±??¢??°\n\t\tstatic Point project(Line s, Point p){\n\t\t\tPoint base_v = s.p2 - s.p1;\n\t\t\tdouble r = dot (p - s.p1, base_v) / base_v.norm ();\n\t\t\treturn s.p1 + base_v * r;\n\t\t}\n\n\t\t// ????°???¢??°\n\t\tstatic Point reflect(Line s, Point p){\n\t\t\treturn p + (project(s, p) - p) * 2;\n\t\t}\n\n\t\tstatic double get_distance_p2p(Point p1, Point p2){\n\t\t\treturn (p2 - p1).abs();\n\t\t}\n\n\t\tstatic double get_distance_l2p(Line l, Point p){\n\t\t\treturn Math.Abs (cross (l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs ();\n\t\t}\n\n\t\tstatic double get_distance_s2p(Line s, Point p){\n\t\t\tif (dot (s.p2 - s.p1, p - s.p1) < 0.0) {\n\t\t\t\treturn (p - s.p1).abs ();\n\t\t\t} else if (dot (s.p1 - s.p2, p - s.p2) < 0.0) {\n\t\t\t\treturn (p - s.p2).abs ();\n\t\t\t}\n\t\t\treturn get_distance_l2p (s, p);\n\t\t}\n\n\t\t/*\n\t\tstatic double get_distance_s2s(Line s, Line s){\n\t\t\tif (\n\t\t}\n\t\t*/\n\n\t\tstatic double[] input_line(){\n\t\t\tstring[] s = Console.ReadLine().Split(' ');\n\t\t\tdouble[] d = s.Select(i => double.Parse(i)).ToArray();\n\t\t\treturn d;\n\t\t}\n\n\t\t// ?°???±\n\t\tstatic void CGL_1_A(){\n\t\t\tdouble[] d = input_line ();\n\t\t\tLine l = new Line(d[0], d[1], d[2], d[3]);\n\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] p_pos = input_line ();\n\t\t\t\tPoint p1 = new Point (p_pos[0], p_pos[1]);\n\t\t\t\tPoint p2 = project (l, p1);\n\t\t\t\tConsole.WriteLine (\"{0} {1}\", p2.x, p2.y);\n\t\t\t}\n\t\t}\n\n\t\t// ????°?\n\t\tstatic void CGL_1_B(){\n\t\t\tdouble[] d = input_line ();\n\t\t\tLine l = new Line(d[0], d[1], d[2], d[3]);\n\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] p_pos = input_line ();\n\t\t\t\tPoint p1 = new Point (p_pos [0], p_pos [1]);\n\t\t\t\tPoint p2 = reflect (l, p1);\n\t\t\t\tConsole.WriteLine (\"{0} {1}\", p2.x, p2.y);\n\t\t\t}\n\t\t}\n\n\t\t// ??´????????´???/????????????\n\t\tstatic void CGL_2_A(){\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] s_pos = input_line ();\n\t\t\t\tLine s1 = new Line(s_pos[0], s_pos[1], s_pos[2], s_pos[3]);\n\t\t\t\tLine s2 = new Line(s_pos[4], s_pos[5], s_pos[6], s_pos[7]);\n\t\t\t\tif (is_parallel (s1, s2)) {\n\t\t\t\t\tConsole.Write (\"2\\n\");\n\t\t\t\t} else if (is_orthogonal (s1, s2)) {\n\t\t\t\t\tConsole.Write (\"1\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tConsole.Write (\"0\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\tstatic void CGL_2_D(){\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] s_pos = input_line ();\n\t\t\t\tLine s1 = new Line(s_pos[0], s_pos[1], s_pos[2], s_pos[3]);\n\t\t\t\tLine s2 = new Line(s_pos[4], s_pos[5], s_pos[6], s_pos[7]);\n\t\t\t}\n\t\t}\n\t\t*/\n\n\t\tpublic static void Main (string[] args){\n\t\t\t// ?°???±\n\t\t\tCGL_1_A ();\n\t\t\t// ????°?\n\t\t\t//CGL_1_B ();\n\t\t\t// ??´????????´???/????????????\n\t\t\t//CGL_2_A ();\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            double[] input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n            MyPoint a = new MyPoint(input[0], input[1]);\n            MyPoint b = new MyPoint(input[2], input[3]);\n\n            Segment s = new Segment(a, b);\n\n            int q = int.Parse(Console.ReadLine());\n\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < q; i++)\n            {\n                input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n                MyPoint p = new MyPoint(input[0], input[1]);\n\n                sb.AppendLine(Project(s, p).ToString());\n            }\n            Console.Write(sb);\n        }\n\n        static MyPoint Project(Segment s, MyPoint p)\n        {\n            MyPoint b = s.p2 - s.p1;\n            double r = Dot(p - s.p1, b) / b.Norm;\n            return s.p1 + b * r;\n        }\n\n        static double Dot(MyPoint a, MyPoint b)\n        {\n            return a.x * b.x + a.y * b.y;\n        }\n\n        static double Cross(MyPoint a, MyPoint b)\n        {\n            return a.x * b.y - a.y * b.x;\n        }\n    }\n\n    class MyPoint : IComparable<MyPoint>\n    {\n        static readonly double EPS = 1E-10;\n\n        internal double x, y;\n\n        public MyPoint(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public double Abs { get { return Math.Sqrt(Norm); } }\n        public double Norm { get { return x * x + y * y; } }\n\n        public static MyPoint operator +(MyPoint a, MyPoint b) { return new MyPoint(a.x + b.x, a.y + b.y); }\n        public static MyPoint operator -(MyPoint a, MyPoint b) { return new MyPoint(a.x - b.x, a.y - b.y); }\n        public static MyPoint operator *(MyPoint p, double d) { return new MyPoint(p.x * d, p.y * d); }\n        public static MyPoint operator /(MyPoint p, double d) { return new MyPoint(p.x / d, p.y / d); }\n        public static bool operator <(MyPoint a, MyPoint b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(MyPoint a, MyPoint b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(MyPoint a, MyPoint b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(MyPoint a, MyPoint b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public int CompareTo(MyPoint other)\n        {\n            return x != other.x ? (int)(x - other.x) : (int)(y - other.y);\n        }\n\n        public override bool Equals(object obj)\n        {\n            MyPoint other = obj as MyPoint;\n            return Math.Abs(x - other.x) < EPS && Math.Abs(y - other.y) < EPS;\n        }\n\n        public override int GetHashCode()\n        {\n            return x.GetHashCode() ^ y.GetHashCode();\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"{0:f10} {1:f10}\", x, y);\n        }\n    }\n\n    class Segment\n    {\n        internal MyPoint p1, p2;\n\n        public Segment(MyPoint a, MyPoint b)\n        {\n            p1 = a;\n            p2 = b;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nnamespace geometry\n{\n\tpublic class Point{\n\t\tpublic double x, y;\n\t\tpublic Point(){\n\t\t\tthis.x = this.y = 0;\n\t\t}\n\n\t\tpublic Point(double x, double y){\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tpublic static Point operator+(Point p1, Point p2){\n\t\t\treturn new Point (p1.x + p2.x, p1.y + p2.y);\n\t\t}\n\n\t\tpublic static Point operator-(Point p1, Point p2){\n\t\t\treturn new Point (p1.x - p2.x, p1.y - p2.y);\n\t\t}\n\n\t\tpublic static Point operator*(Point p1, double a){\n\t\t\treturn new Point (p1.x * a, p1.y * a);\n\t\t}\n\n\t\tpublic static Point operator/(Point p1, double a){\n\t\t\treturn new Point (p1.x / a, p1.y / a);\n\t\t}\n\n\t\tpublic double norm(){\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t}\n\n\t\tpublic double abs(){\n\t\t\treturn Math.Sqrt(norm()); \n\t\t}\n\n\t\tpublic Point Clone(){\n\t\t\tPoint clone = new Point (this.x, this.y);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tpublic class Line{\n\t\tpublic Point p1, p2;\n\t\tpublic Line(){\n\t\t\tthis.p1 = new Point ();\n\t\t\tthis.p2 = new Point ();\n\t\t}\n\n\t\tpublic Line(double p1x, double p1y, double p2x, double p2y){\n\t\t\tthis.p1 = new Point(p1x, p1y);\n\t\t\tthis.p2 = new Point(p2x, p2y);\n\t\t}\n\n\t\tpublic Line(Point p1, Point p2){\n\t\t\tthis.p1 = p1.Clone();\n\t\t\tthis.p2 = p2.Clone();\n\t\t}\n\n\t\tpublic Line Clone(){\n\t\t\tLine clone = new Line (this.p1, this.p2);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tpublic class Circle{\n\t\tpublic Point c;\n\t\tpublic double r;\n\t\tpublic Circle(){\n\t\t\tthis.c = new Point ();\n\t\t\tthis.r = 0.0;\n\t\t}\n\n\t\tpublic Circle(double cx, double cy, double r){\n\t\t\tthis.c.x = cx;\n\t\t\tthis.c.y = cy;\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic Circle(Point c, double r){\n\t\t\tthis.c = c.Clone();\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic Circle Clone(){\n\t\t\tCircle clone = new Circle (this.c, this.r);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tclass MainClass{\n\t\tstatic bool is_equal(double a, double b){\n\t\t\tif (Math.Abs (a - b) < 0.000001) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tstatic double dot(Point v1, Point v2){\n\t\t\treturn v1.x * v2.x + v1.y * v2.y;\n\t\t}\n\n\t\tstatic double cross(Point v1, Point v2){\n\t\t\treturn v1.x * v2.y - v1.y * v2.x;\n\t\t}\n\n\t\t// ??´?????????\n\t\tstatic bool is_orthogonal(Line s1, Line s2){\n\t\t\treturn is_equal(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n\t\t}\n\n\t\t// ????????????\n\t\tstatic bool is_parallel(Line s1, Line s2){\n\t\t\treturn is_equal(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n\t\t}\n\n\t\t/*\n\t\tstatic bool is_intersect_sl(Line s, Line sl){\n\t\t\treturn true;\n\t\t}\n\t\t*/\n\n\t\t// ?°???±??¢??°\n\t\tstatic Point project(Line s, Point p){\n\t\t\tPoint base_v = s.p2 - s.p1;\n\t\t\tdouble r = dot (p - s.p1, base_v) / base_v.norm ();\n\t\t\treturn s.p1 + base_v * r;\n\t\t}\n\n\t\t// ????°???¢??°\n\t\tstatic Point reflect(Line s, Point p){\n\t\t\treturn p + (project(s, p) - p) * 2;\n\t\t}\n\n\t\tstatic double get_distance_p2p(Point p1, Point p2){\n\t\t\treturn (p2 - p1).abs();\n\t\t}\n\n\t\tstatic double get_distance_l2p(Line l, Point p){\n\t\t\treturn Math.Abs (cross (l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs ();\n\t\t}\n\n\t\tstatic double get_distance_s2p(Line s, Point p){\n\t\t\tif (dot (s.p2 - s.p1, p - s.p1) < 0.0) {\n\t\t\t\treturn (p - s.p1).abs ();\n\t\t\t} else if (dot (s.p1 - s.p2, p - s.p2) < 0.0) {\n\t\t\t\treturn (p - s.p2).abs ();\n\t\t\t}\n\t\t\treturn get_distance_l2p (s, p);\n\t\t}\n\n\t\t/*\n\t\tstatic double get_distance_s2s(Line s, Line s){\n\t\t\tif (\n\t\t}\n\t\t*/\n\n\t\tstatic double[] input_line(){\n\t\t\tstring[] s = Console.ReadLine().Split(' ');\n\t\t\tdouble[] d = s.Select(i => double.Parse(i)).ToArray();\n\t\t\treturn d;\n\t\t}\n\n\t\t// ?°???±\n\t\tstatic void CGL_1_A(){\n\t\t\tdouble[] d = input_line ();\n\t\t\tLine l = new Line(d[0], d[1], d[2], d[3]);\n\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] p_pos = input_line ();\n\t\t\t\tPoint p1 = new Point (p_pos[0], p_pos[1]);\n\t\t\t\tPoint p2 = project (l, p1);\n\t\t\t\tConsole.WriteLine (\"{0}, {1}\", p2.x, p2.y);\n\t\t\t}\n\t\t}\n\n\t\t// ????°?\n\t\tstatic void CGL_1_B(){\n\t\t\tdouble[] d = input_line ();\n\t\t\tLine l = new Line(d[0], d[1], d[2], d[3]);\n\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] p_pos = input_line ();\n\t\t\t\tPoint p1 = new Point (p_pos [0], p_pos [1]);\n\t\t\t\tPoint p2 = reflect (l, p1);\n\t\t\t\tConsole.WriteLine (\"{0}, {1}\", p2.x, p2.y);\n\t\t\t}\n\t\t}\n\n\t\t// ??´????????´???/????????????\n\t\tstatic void CGL_2_A(){\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] s_pos = input_line ();\n\t\t\t\tLine s1 = new Line(s_pos[0], s_pos[1], s_pos[2], s_pos[3]);\n\t\t\t\tLine s2 = new Line(s_pos[4], s_pos[5], s_pos[6], s_pos[7]);\n\t\t\t\tif (is_parallel (s1, s2)) {\n\t\t\t\t\tConsole.Write (\"2\\n\");\n\t\t\t\t} else if (is_orthogonal (s1, s2)) {\n\t\t\t\t\tConsole.Write (\"1\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tConsole.Write (\"0\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\tstatic void CGL_2_D(){\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] s_pos = input_line ();\n\t\t\t\tLine s1 = new Line(s_pos[0], s_pos[1], s_pos[2], s_pos[3]);\n\t\t\t\tLine s2 = new Line(s_pos[4], s_pos[5], s_pos[6], s_pos[7]);\n\t\t\t}\n\t\t}\n\t\t*/\n\n\t\tpublic static void Main (string[] args){\n\t\t\t// ?°???±\n\t\t\tCGL_1_A ();\n\t\t\t// ????°?\n\t\t\t//CGL_1_B ();\n\t\t\t// ??´????????´???/????????????\n\t\t\t//CGL_2_A ();\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n\nclass Program\n{\n  public struct Vector\n  {\n    public int x, y;\n  }\n\n  public static double norm(Vector v)\n  {\n    return v.x*v.x + v.y*v.y;\n  }\n\n  public static double dot (Vector v1, Vector v2)\n  {\n    return v1.x*v2.x + v1.y*v2.y;\n  }\n  public static void Main()\n  {\n    string[] s1 = Console.ReadLine().Split(' ');\n    Vector baseV;\n    baseV.x = int.Parse(s1[2]) - int.Parse(s1[0]);\n    baseV.y = int.Parse(s1[3]) - int.Parse(s1[1]);\n\n    int n = int.Parse(Console.ReadLine());\n\n    for(int i=0; i<n; i++)\n    {\n      string [] s2 = Console.ReadLine().Split(' ');\n      Vector v;\n      v.x = int.Parse(s2[0]) - int.Parse(s1[0]);\n      v.y = int.Parse(s2[1]) - int.Parse(s1[1]);\n\n      double r = dot(v, baseV) / norm(baseV);\n\n      double x = int.Parse(s1[0]) + baseV.x*r;\n      double y = int.Parse(s1[1]) + baseV.y*r;\n\n      Console.WriteLine(\"{0:f10} {1:f10}\", x, y);\n    }\n  }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing Aoj.CGL.Lib;\n\nnamespace Aoj.CGL.Chapter1A\n{\n    class Program\n    {\n        public static void Solve()\n        {\n            int[] input = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n            Vector v1 = new Vector(input[0], input[1]);\n            Vector v2 = new Vector(input[2], input[3]);\n            Vector baseV = v2 - v1;\n\n            int q = int.Parse(Console.ReadLine());\n \n            for (int i = 0; i < q; i++)\n            {\n                int[] x_y = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n\n                Vector v = new Vector(x_y[0], x_y[1]) - v1;\n                Vector p = Vector.Project(v, baseV);\n\n                Vector answer = v1 + p;\n                Console.WriteLine(\"{0:0.0000000000} {1:0.0000000000}\", answer.X, answer.Y);\n            }\n        }\n\n        public static void Main()\n        {\n            // Console.SetIn(new System.IO.StreamReader(\"ComputationalGeometry/Input/01_Projection_A_01.txt\"));\n            // var sw = new Stopwatch();\n            // sw.Start();\n\n            Solve();\n\n            // Console.WriteLine(\"{0}ms\", sw.ElapsedMilliseconds);\n        }\n    }\n}\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\n\nnamespace Aoj.CGL.Lib\n{\n    using Line = Segment;\n\n    using Polygon = List<Point>;\n\n    public struct Point\n    {\n        private double _x;\n        private double _y;\n\n        public double X { get { return _x;} }\n        public double Y { get { return _y;} }\n\n        public Point(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n\n        public static Point operator +(Point p1, Point p2)\n        {\n            return new Point(p1.X + p2.X, p1.Y + p2.Y);\n        }\n\n        public static Point operator -(Point p1, Point p2)\n        {\n            return new Point(p1.X - p2.X, p1.Y - p2.Y);\n        }\n\n        public static Point operator *(Point p, double k)\n        {\n            return new Point(p.X * k, p.Y * k);\n        }\n\n        public static explicit operator Vector(Point p)\n        {\n            return new Vector(p.X, p.Y);\n        }\n\n        public static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsOrthogonal((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n\n        public static bool IsParallel(Point a1, Point a2, Point b1, Point b2)\n        {\n            return Vector.IsParallel((Vector)(a1 - a2), (Vector)(b1 - b2));\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"x:{0},y:{1}\", X, Y);\n        }\n    }\n\n    public struct Segment\n    {\n        private Point _p1;\n        private Point _p2;\n\n        public Point P1 { get{ return _p1; } }\n        public Point P2 { get{ return _p2; } }\n\n        public Segment(Point p1, Point p2)\n        {\n            _p1 = p1;\n            _p2 = p2;\n        }\n\n        public Segment(double x1, double y1, double x2, double y2)\n        {\n            _p1 = new Point(x1, y1);\n            _p2 = new Point(x2, y2);\n        }\n        public static bool IsOrthogonal(Segment s1, Segment s2)\n        {\n            return Vector.IsOrthogonal((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n\n        public static bool IsParallel(Segment s1, Segment s2)\n        {\n            return Vector.IsParallel((Vector)(s1.P1 - s1.P2), (Vector)(s2.P1 - s2.P2));\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"P1x:{0},P1y:{1}, P2x:{2},P2y:{3}\", P1.X, P1.Y, P2.X, P2.Y);\n        }\n    }\n\n    public struct Circle\n    {\n        private Point _p;\n        private double _r;\n\n        public Point P { get { return _p; } }\n        public double R { get { return _r; } }\n\n        public Circle(Point p, double r)\n        {\n            _p = p;\n            _r = r;\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"px:{0},py:{1},r:{2}\", P.X, P.Y, R);\n        }\n    }\n\n    public struct Vector\n    {\n        private double _x;\n        private double _y;\n\n        public double X { get { return _x;} }\n        public double Y { get { return _y;} }\n\n        public Vector(double x, double y)\n        {\n            _x = x;\n            _y = y;\n        }\n\n        public double Norm()\n        {\n            return X * X + Y * Y;\n        }\n\n        public double Abs()\n        {\n            return Math.Sqrt(Norm());\n        }\n\n        public Vector Normalize()\n        {\n            double mag = Abs();\n            return new Vector(X * mag, Y * mag);\n        }\n\n        public static Vector operator +(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X + v2.X, v1.Y + v2.Y);\n        }\n\n        public static Vector operator -(Vector v1, Vector v2)\n        {\n            return new Vector(v1.X - v2.X, v1.Y - v2.Y);\n        }\n\n        public static Vector operator *(Vector v, double k)\n        {\n            return new Vector(v.X * k, v.Y * k);\n        }\n\n        public static double Dot(Vector v1, Vector v2)\n        {\n            return v1.X * v2.X + v1.Y * v2.Y;\n        }\n\n        public static double Cross(Vector v1, Vector v2)\n        {\n            return v1.X * v2.Y - v1.Y * v2.X;\n        }\n\n        public static bool IsOrthogonal(Vector v1, Vector v2)\n        {\n            return Dot(v1, v2) == 0.0;\n        }\n\n        public static bool IsParallel(Vector v1, Vector v2)\n        {\n            return Cross(v1, v2) == 0.0;\n        }\n\n        public static Vector Project(Vector v, Vector onNormal)\n        {\n            // mag = |b|cos?? / |a|\n            //     = |a||b|cos?? / |a|^2\n            double mag = Dot(v, onNormal) / onNormal.Norm();\n            return new Vector(onNormal.X * mag, onNormal.Y * mag);\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"x:{0},y:{1}\", X, Y);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n\nclass Program\n{\n  public struct Vector\n  {\n    public int x, y;\n  }\n\n  public static double norm(Vector v)\n  {\n    return v.x*v.x + v.y*v.y;\n  }\n\n  public static double dot (Vector v1, Vector v2)\n  {\n    return v1.x*v2.x + v1.y*v2.y;\n  }\n  public static void Main()\n  {\n    string[] s1 = Console.ReadLine().Split(' ');\n    Vector baseV;\n    baseV.x = int.Parse(s1[2]) - int.Parse(s1[0]);\n    baseV.y = int.Parse(s1[3]) - int.Parse(s1[1]);\n\n    int n = int.Parse(Console.ReadLine());\n\n    for(int i=0; i<n; i++)\n    {\n      string [] s2 = Console.ReadLine().Split(' ');\n      Vector v;\n      v.x = int.Parse(s2[0]) - int.Parse(s1[0]);\n      v.y = int.Parse(s2[1]) - int.Parse(s1[1]);\n\n      double r = dot(v, baseV) / norm(baseV);\n\n      double x = int.Parse(s1[0]) + baseV.x*r;\n      double y = int.Parse(s1[1]) + baseV.y*r;\n\n      Console.WriteLine(\"result: {0:f10} {1:f10}\", x, y);\n    }\n  }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.IO;\nusing static System.Console;\nusing static System.Math;\n \npublic class Solve{\n    static public int mod = 1000000007;\n    static public string al = \"abcdefghijklmnopqrstuvwxyz\";\n    static public string bal = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    public static void Main(){\n        // 方針\n        //\n        var line = doublea();\n        var a = (line[3]-line[1]) / (line[2]-line[0]);\n        if(line[2] == line[0]){\n            // x = line[0]\n            var x = line[0];\n            var n = rint();\n            for(int i=0;i<n;i++){\n                var t = doublea();\n                WriteLine($\"{x} {t[1]}\");\n            }\n        }else if(line[1] == line[3]){\n            // y = line[1]\n            var y = line[1];\n            var n = rint();\n            for(int i=0;i<n;i++){\n                var t = doublea();\n                WriteLine($\"{t[0]} {y}\");\n            }\n        }else{\n            var b = line[1] - line[0]*a;\n            var sa = -1/a;\n            var n = rint();\n            for(int i=0;i<n;i++){\n                var t = doublea();\n                var sb = t[1] - t[0]*sa;\n                // a x + b == sa x + sb\n                // a-sa x == sb-b\n                // x == sb-b / a-sa\n                //WriteLine($\"{(sb-b)}{(a-sa)}\");\n                var x = (sb-b) / (a-sa);\n                var y = a * x + b;\n                WriteLine($\"{x} {y}\");\n            }\n        }\n    \t\n    }\n    \n    public static void swap(ref int a,ref int b){int temp = a;a= b;b = temp;}\n    static void charswap(ref char a,ref char b){char temp = a;a= b;b = temp;}\n    static int ncr(int n,int r){if(n<r)return 0;r = Min(r,n-r);long nn = 1;for(int i=n-r+1;i<=n;i++){nn = nn*i%mod;}long rr = 1;for(int i=1;i<=r;i++){rr = rr*i%mod;}rr = square((int)rr,mod-2);nn = nn * rr %mod;return (int)nn;}\n    // a^b mod\n    static int square(int a,int b){string binary = Convert.ToString(b,2);int bileng = binary.Length;long a_power = a;long value = 1;for(int i=bileng-1;i>=0;i--){if(binary[i] == '1'){value = value*a_power%mod;}a_power = a_power*a_power%mod;}return (int)value;}\n    static int square2(int a,int b){long output = 1;var list = new List<long>();int sh = 1;long n = a;list.Add(a);while(sh < b){sh *= 2;n = n*n%mod;list.Add(n);}for(int i=list.Count-1;i>=0;i--){if(b > sh){b -= sh;sh /= 2;output = output*list[i]%mod;}}return (int)output;}\n    //各種読取\n    static string rstr(){ return ReadLine(); }\n    static int rint(){ return int.Parse(ReadLine()); }\n    static long rlong(){ return long.Parse(ReadLine()); }\n    static string[] stra(){ return ReadLine().Split(' '); }\n    static char[] chara(){ string[] a=stra();string b=\"\";for(int i=0;i<a.Length;i++){b+=a[i];}return b.ToCharArray();}\n    static int[] inta(){ string[] read_str_array = ReadLine().Split(' '); int[] return_int_array = new int[read_str_array.Length]; for(int countup_i=0;countup_i<read_str_array.Length;countup_i++){ return_int_array[countup_i] = int.Parse(read_str_array[countup_i]); } return return_int_array; }\n    static int[,] inta2(int num_array,int in_array){ int[,] int_array2 = new int[num_array,in_array]; for(int i=0;i<num_array;i++){ int[] temp_array = inta(); for(int j=0;j<in_array;j++){ int_array2[i,j] = temp_array[j]; } } return int_array2; }\n    static long[] longa(){ string[] read_str_array = ReadLine().Split(' '); long[] return_long_array = new long[read_str_array.Length]; for(long countup_i=0;countup_i<read_str_array.Length;countup_i++){ return_long_array[countup_i] = long.Parse(read_str_array[countup_i]); } return return_long_array; }\n    static double[] doublea(){ string[] read_str_array = ReadLine().Split(' '); double[] return_double_array = new double[read_str_array.Length]; for(long countup_i=0;countup_i<read_str_array.Length;countup_i++){ return_double_array[countup_i] = double.Parse(read_str_array[countup_i]); } return return_double_array; }\n    // -----------------------------\n    static long divideup(long divided,long divid){ long temp_divide = divided/divid; if(divided % divid > 0){ temp_divide++; } return temp_divide; }\n    static long GCD(long a,long b){ if(a < b){ long temp = a; a = b; b = temp; } if(a % b == 0){ return b; } else{ long temp = b; b = a%b; a = temp; return GCD(a,b); } }\n    static long LCM(long a,long b){ return a * b / GCD(a,b); }\n    static void WriteArray(int[,] a,int b,int c){for(int i=0;i<b;i++){for(int j=0;j<c;j++){if(j!=0) Write(\" \");Write(a[i,j]);}WriteLine();}}\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing static System.Math;\n\nnamespace CSharpSpiral {\n    class Program {\n        static void Main(string[] args) {\n            var sw = new StreamWriter(Console.OpenStandardOutput()) { AutoFlush = false };\n            Console.SetOut(sw);\n            new Program().Solve(new ConsoleInput(Console.In, ' '));\n            Console.Out.Flush();\n        }\n\t\tpublic void Solve(ConsoleInput cin) {\n\t\t\tvar line = cin.ReadDoubleArray(4);\n\t\t\tdouble x1 = line[0], y1 = line[1], x2 = line[2], y2 = line[3];\n\t\t\tdouble dx = x2 - x1, dy = y2 - y1;\n\t\t\tvar lenSq = dx * dx + dy * dy;\n\t\t\tvar q = cin.ReadInt;\n\t\t\tfor(int i = 0; i < q; i++) {\n\t\t\t\tvar p = cin.ReadDoubleArray(2);\n\t\t\t\tvar px = p[0] - x1;\n\t\t\t\tvar py = p[1] - y1;\n\t\t\t\tvar inner = dx * px + dy * py;\n\t\t\t\tvar res = new double[] { x1 + inner / lenSq * dx, y1 + inner / lenSq * dy };\n\t\t\t\tConsole.WriteLine(res.Join());\n\t\t\t}\n\t\t}\n\t}\n\tstatic class ExtendClass {\n\t\tpublic static string Join<T>(this IEnumerable<T> X, string separator = \" \") => string.Join(separator, X);\n\t}\n\tclass ConsoleInput {\n\t\tprivate readonly TextReader _stream;\n\t\tprivate readonly char _separator = ' ';\n\t\tprivate readonly Queue<string> inputStream;\n\t\tpublic ConsoleInput(TextReader stream, char separator = ' ') {\n\t\t\tthis._separator = separator;\n\t\t\tthis._stream = stream;\n\t\t\tinputStream = new Queue<string>();\n\t\t}\n\t\tpublic string Read {\n\t\t\tget {\n\t\t\t\tif(inputStream.Count != 0) return inputStream.Dequeue();\n\t\t\t\tstring[] tmp = _stream.ReadLine().Split(_separator);\n\t\t\t\tfor(int i = 0; i < tmp.Length; ++i)\n\t\t\t\t\tinputStream.Enqueue(tmp[i]);\n\t\t\t\treturn inputStream.Dequeue();\n\t\t\t}\n\t\t}\n\t\tpublic string ReadLine { get { return _stream.ReadLine(); } }\n\t\tpublic int ReadInt { get { return int.Parse(Read); } }\n\t\tpublic long ReadLong { get { return long.Parse(Read); } }\n\t\tpublic double ReadDouble { get { return double.Parse(Read); } }\n\t\tpublic string[] ReadStrArray(long N) {\n\t\t\tvar ret = new string[N];\n\t\t\tfor(long i = 0; i < N; ++i)\n\t\t\t\tret[i] = Read;\n\t\t\treturn ret;\n\t\t}\n\t\tpublic int[] ReadIntArray(long N) { var ret = new int[N]; for(long i = 0; i < N; ++i) ret[i] = ReadInt; return ret; }\n\t\tpublic long[] ReadLongArray(long N) { var ret = new long[N]; for(long i = 0; i < N; ++i) ret[i] = ReadLong; return ret; }\n\t\tpublic double[] ReadDoubleArray(long N) { var ret = new double[N]; for(long i = 0; i < N; ++i) ret[i] = ReadDouble; return ret; }\n\t}\n}\n\n"
  },
  {
    "language": "C#",
    "code": "#region ZIPPER\nusing System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Linq;\nusing System.Text;\nusing System.Numerics;\nusing sc = Scanner;\nusing Geometry;\nusing gl = Geometry.GeometryLibrary;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Solver solver = new Solver();\n        solver.Solve();\n#if DEBUG\n        System.Console.WriteLine(\"?¶?????????????????????????????????????????????????????????????\");\n        System.Console.ReadKey();\n#endif\n\n    }\n}\n/// <summary>\n/// ?¨??????\\????????????????????´???????????????????????????????????????\n/// </summary>\npublic static class Scanner\n{\n    public static string NextString()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return tmp;\n    }\n    public static int NextInt()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return int.Parse(tmp);\n    }\n    public static long NextLong()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return long.Parse(tmp);\n    }\n    public static double NextDouble()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return double.Parse(tmp);\n    }\n\n    public static string[] NextStrArray()\n    {\n        return Console.ReadLine().Split(' ');\n    }\n    public static int[] NextIntArray()\n    {\n\n        string[] s = NextStrArray();\n        int[] a = new int[s.Length];\n        for (int i = 0; i < a.Length; i++)\n        {\n            a[i] = int.Parse(s[i]);\n        }\n        return a;\n    }\n    public static long[] NextLongArray()\n    {\n        string[] s = NextStrArray();\n        long[] a = new long[s.Length];\n        for (int i = 0; i < a.Length; i++)\n        {\n            a[i] = long.Parse(s[i]);\n        }\n        return a;\n    }\n    public static double[] NextDoubleArray()\n    {\n        string[] s = NextStrArray();\n        double[] a = new double[s.Length];\n        for (int i = 0; i < a.Length; i++)\n        {\n            a[i] = double.Parse(s[i]);\n        }\n        return a;\n    }\n}\n#endregion ZIPPER\n\npublic class Solver\n{\n#region IGNORE_ME\n    public Solver()\n    {\n        //???????????¨?????????????????????????????????????????????\n    }\n#endregion IGNORE_ME\n\n    public void Solve()\n    {\n        Point p1 = new Point(sc.NextDouble(), sc.NextDouble());\n        Point p2 = new Point(sc.NextDouble(), sc.NextDouble());\n        int q = sc.NextInt();\n        Point[] p = new Point[q];\n        for (int i = 0; i < q; i++)\n        {\n            p[i] = new Point(sc.NextDouble(), sc.NextDouble());\n        }\n        for (int i = 0; i < q; i++)\n        {\n            Point s = gl.Projection(p1, p2, p[i]);\n            Console.WriteLine(\"{0} {1}\", s.x, s.y);\n        }\n#if DEBUG\n        Console.WriteLine(\"\");//local check\n#endif\n    }\n}\nnamespace Geometry\n{\n    /// <summary>\n    /// ??????x,y??§?¨??????¨???\n    /// </summary>\n    public struct Point\n        {\n            public double x;\n            public double y;\n            public Point(int x, int y)\n            {\n                this.x = (double)x; this.y = (double)y;\n            }\n            public Point(double x, double y)\n            {\n                this.x = x; this.y = y;\n            }\n            public static Point operator +(Point p1, Point p2)\n            {\n                return new Point(p1.x + p2.x, p1.y + p2.y);\n            }\n            public static Point operator -(Point p1, Point p2)\n            {\n                return new Point(p1.x - p2.x, p1.y - p2.y);\n            }\n            public static Point operator *(double s, Point p)\n            {\n                return new Point(s * p.x, s * p.y);\n            }\n        }\n    public static class GeometryLibrary\n    {\n\n\n        /// <summary>\n        /// ??????\n        /// </summary>\n        /// <returns></returns>\n        public static double Naiseki(Point p1, Point p2)\n        {\n            return p1.x * p2.x + p1.y * p2.y;\n        }\n        /// <summary>\n        /// ??´???p1,p2???????????????p????°???±\n        /// </summary>\n        /// <param name=\"p1\"></param>\n        /// <param name=\"p2\"></param>\n        /// <param name=\"p\"></param>\n        /// <returns></returns>\n        public static Point Projection(Point p1, Point p2, Point p)\n        {\n            Point a = p2 - p1;\n            Point b = p - p1;\n            double t = Naiseki(a, b) / Naiseki(a, a);\n            return t * a + p1 ;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\n/*\n\n  Points/Vectors - Projection\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\n\n  ?????????????°???±????±?????????????\n\n */\n\nclass Program {\n    static int ReadInt() { return int.Parse(Console.ReadLine()); }\n    static int[] ReadInts() { return Console.ReadLine().Split().Select(int.Parse).ToArray(); }\n    static string[] ReadStrings() { return Console.ReadLine().Split(); }\n\n    // a, b ????????´??????????????????p ????????????????°???±?????????????±???????\n    static void Calc(Vec2f p, Vec2f a, Vec2f b) {\n        var ab = b - a;\n        var ap = p - a;\n\n        var d = ab.Normalized().Dot(ap);\n        var x = a + ab.Normalized() * d;\n        Console.WriteLine(\"{0} {1}\", x.X, x.Y);\n    }\n\n    static void Main() {\n        var xs = ReadInts();\n        var p1 = new Vec2f(xs[0], xs[1]);\n        var p2 = new Vec2f(xs[2], xs[3]);\n\n        int q = ReadInt();\n        for (int i = 0; i < q; i++) {\n            var xy = ReadInts();\n            var p = new Vec2f(xy[0], xy[1]);\n            Calc(p, p1, p2);\n        }\n    }\n}\n\nstruct Vec2f {\n    public double X { get; private set; }\n    public double Y { get; private set; }\n\n    public Vec2f(double x, double y) : this() {\n        X = x;\n        Y = y;\n    }\n\n    public override string ToString() {\n        return string.Format(\"({0}, {1})\", X, Y);\n    }\n\n    public static Vec2f operator+(Vec2f a, Vec2f b) {\n        return new Vec2f(a.X + b.X, a.Y + b.Y);\n    }\n\n    public static Vec2f operator-(Vec2f a, Vec2f b) {\n        return new Vec2f(a.X - b.X, a.Y - b.Y);\n    }\n\n    public static Vec2f operator*(Vec2f a, double t) {\n        return new Vec2f(a.X * t, a.Y * t);\n    }\n\n    // a???b = |a||b|cos??\n    public double Dot(Vec2f other) {\n        return X * other.X + Y * other.Y;\n    }\n\n    public double Cross(Vec2f other) {\n        return X * other.Y - Y * other.X;\n    }\n\n    public Vec2f Normalized() {\n        var m = Magnitude();\n        if (m != 0 && m != 1) {\n            return new Vec2f(X / m, Y / m);\n        }\n        return this;\n    }\n\n    public double Magnitude() {\n        return Math.Sqrt(X * X + Y * Y);\n    }\n\n    public double SqrMagnitude() {\n        return X * X + Y * Y;\n    }\n\n    public static double Distance(Vec2f a, Vec2f b) {\n        return (a - b).Magnitude();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nnamespace geometry\n{\n\tpublic class Point{\n\t\tpublic double x, y;\n\t\tpublic Point(){\n\t\t\tthis.x = this.y = 0;\n\t\t}\n\n\t\tpublic Point(double x, double y){\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tpublic static Point operator+(Point p1, Point p2){\n\t\t\treturn new Point (p1.x + p2.x, p1.y + p2.y);\n\t\t}\n\n\t\tpublic static Point operator-(Point p1, Point p2){\n\t\t\treturn new Point (p1.x - p2.x, p1.y - p2.y);\n\t\t}\n\n\t\tpublic static Point operator*(Point p1, double a){\n\t\t\treturn new Point (p1.x * a, p1.y * a);\n\t\t}\n\n\t\tpublic static Point operator/(Point p1, double a){\n\t\t\treturn new Point (p1.x / a, p1.y / a);\n\t\t}\n\n\t\tpublic double norm(){\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t}\n\n\t\tpublic double abs(){\n\t\t\treturn Math.Sqrt(norm()); \n\t\t}\n\n\t\tpublic Point Clone(){\n\t\t\tPoint clone = new Point (this.x, this.y);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tpublic class Line{\n\t\tpublic Point p1, p2;\n\t\tpublic Line(){\n\t\t\tthis.p1 = new Point ();\n\t\t\tthis.p2 = new Point ();\n\t\t}\n\n\t\tpublic Line(double p1x, double p1y, double p2x, double p2y){\n\t\t\tthis.p1 = new Point(p1x, p1y);\n\t\t\tthis.p2 = new Point(p2x, p2y);\n\t\t}\n\n\t\tpublic Line(Point p1, Point p2){\n\t\t\tthis.p1 = p1.Clone();\n\t\t\tthis.p2 = p2.Clone();\n\t\t}\n\n\t\tpublic Line Clone(){\n\t\t\tLine clone = new Line (this.p1, this.p2);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tpublic class Circle{\n\t\tpublic Point c;\n\t\tpublic double r;\n\t\tpublic Circle(){\n\t\t\tthis.c = new Point ();\n\t\t\tthis.r = 0.0;\n\t\t}\n\n\t\tpublic Circle(double cx, double cy, double r){\n\t\t\tthis.c.x = cx;\n\t\t\tthis.c.y = cy;\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic Circle(Point c, double r){\n\t\t\tthis.c = c.Clone();\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic Circle Clone(){\n\t\t\tCircle clone = new Circle (this.c, this.r);\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tclass MainClass{\n\t\tstatic bool is_equal(double a, double b){\n\t\t\tif (Math.Abs (a - b) < 0.000001) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tstatic double dot(Point v1, Point v2){\n\t\t\treturn v1.x * v2.x + v1.y * v2.y;\n\t\t}\n\n\t\tstatic double cross(Point v1, Point v2){\n\t\t\treturn v1.x * v2.y - v1.y * v2.x;\n\t\t}\n\n\t\t// ??´?????????\n\t\tstatic bool is_orthogonal(Line s1, Line s2){\n\t\t\treturn is_equal(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n\t\t}\n\n\t\t// ????????????\n\t\tstatic bool is_parallel(Line s1, Line s2){\n\t\t\treturn is_equal(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);\n\t\t}\n\n\t\t/*\n\t\tstatic bool is_intersect_sl(Line s, Line sl){\n\t\t\treturn true;\n\t\t}\n\t\t*/\n\n\t\t// ?°???±??¢??°\n\t\tstatic Point project(Line s, Point p){\n\t\t\tPoint base_v = s.p2 - s.p1;\n\t\t\tdouble r = dot (p - s.p1, base_v) / base_v.norm ();\n\t\t\treturn s.p1 + base_v * r;\n\t\t}\n\n\t\t// ????°???¢??°\n\t\tstatic Point reflect(Line s, Point p){\n\t\t\treturn p + (project(s, p) - p) * 2;\n\t\t}\n\n\t\tstatic double get_distance_p2p(Point p1, Point p2){\n\t\t\treturn (p2 - p1).abs();\n\t\t}\n\n\t\tstatic double get_distance_l2p(Line l, Point p){\n\t\t\treturn Math.Abs (cross (l.p2 - l.p1, p - l.p1)) / (l.p2 - l.p1).abs ();\n\t\t}\n\n\t\tstatic double get_distance_s2p(Line s, Point p){\n\t\t\tif (dot (s.p2 - s.p1, p - s.p1) < 0.0) {\n\t\t\t\treturn (p - s.p1).abs ();\n\t\t\t} else if (dot (s.p1 - s.p2, p - s.p2) < 0.0) {\n\t\t\t\treturn (p - s.p2).abs ();\n\t\t\t}\n\t\t\treturn get_distance_l2p (s, p);\n\t\t}\n\n\t\t/*\n\t\tstatic double get_distance_s2s(Line s, Line s){\n\t\t\tif (\n\t\t}\n\t\t*/\n\n\t\tstatic double[] input_line(){\n\t\t\tstring[] s = Console.ReadLine().Split(' ');\n\t\t\tdouble[] d = s.Select(i => double.Parse(i)).ToArray();\n\t\t\treturn d;\n\t\t}\n\n\t\t// ?°???±\n\t\tstatic void CGL_1_A(){\n\t\t\tdouble[] d = input_line ();\n\t\t\tLine l = new Line(d[0], d[1], d[2], d[3]);\n\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] p_pos = input_line ();\n\t\t\t\tPoint p1 = new Point (p_pos[0], p_pos[1]);\n\t\t\t\tPoint p2 = project (l, p1);\n\t\t\t\tConsole.WriteLine (\"{0} {1}\", p2.x, p2.y);\n\t\t\t}\n\t\t}\n\n\t\t// ????°?\n\t\tstatic void CGL_1_B(){\n\t\t\tdouble[] d = input_line ();\n\t\t\tLine l = new Line(d[0], d[1], d[2], d[3]);\n\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] p_pos = input_line ();\n\t\t\t\tPoint p1 = new Point (p_pos [0], p_pos [1]);\n\t\t\t\tPoint p2 = reflect (l, p1);\n\t\t\t\tConsole.WriteLine (\"{0} {1}\", p2.x, p2.y);\n\t\t\t}\n\t\t}\n\n\t\t// ??´????????´???/????????????\n\t\tstatic void CGL_2_A(){\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] s_pos = input_line ();\n\t\t\t\tLine s1 = new Line(s_pos[0], s_pos[1], s_pos[2], s_pos[3]);\n\t\t\t\tLine s2 = new Line(s_pos[4], s_pos[5], s_pos[6], s_pos[7]);\n\t\t\t\tif (is_parallel (s1, s2)) {\n\t\t\t\t\tConsole.Write (\"2\\n\");\n\t\t\t\t} else if (is_orthogonal (s1, s2)) {\n\t\t\t\t\tConsole.Write (\"1\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tConsole.Write (\"0\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\tstatic void CGL_2_D(){\n\t\t\tint q = int.Parse(Console.ReadLine());\n\t\t\tfor (int i = 0; i < q; i++) {\n\t\t\t\tdouble[] s_pos = input_line ();\n\t\t\t\tLine s1 = new Line(s_pos[0], s_pos[1], s_pos[2], s_pos[3]);\n\t\t\t\tLine s2 = new Line(s_pos[4], s_pos[5], s_pos[6], s_pos[7]);\n\t\t\t}\n\t\t}\n\t\t*/\n\n\t\tpublic static void Main (string[] args){\n\t\t\t// ?°???±\n\t\t\tCGL_1_A ();\n\t\t\t// ????°?\n\t\t\t//CGL_1_B ();\n\t\t\t// ??´????????´???/????????????\n\t\t\t//CGL_2_A ();\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "#region ZIPPER\nusing System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Linq;\nusing System.Text;\nusing sc = Scanner;\nusing Geometry;\nusing gl = Geometry.GeometryLibrary;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Solver solver = new Solver();\n        solver.Solve();\n#if DEBUG\n        System.Console.WriteLine(\"?¶?????????????????????????????????????????????????????????????\");\n        System.Console.ReadKey();\n#endif\n\n    }\n}\n/// <summary>\n/// ?¨??????\\????????????????????´???????????????????????????????????????\n/// </summary>\npublic static class Scanner\n{\n    public static string NextString()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return tmp;\n    }\n    public static int NextInt()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return int.Parse(tmp);\n    }\n    public static long NextLong()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return long.Parse(tmp);\n    }\n    public static double NextDouble()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return double.Parse(tmp);\n    }\n\n    public static string[] NextStrArray()\n    {\n        return Console.ReadLine().Split(' ');\n    }\n    public static int[] NextIntArray()\n    {\n\n        string[] s = NextStrArray();\n        int[] a = new int[s.Length];\n        for (int i = 0; i < a.Length; i++)\n        {\n            a[i] = int.Parse(s[i]);\n        }\n        return a;\n    }\n    public static long[] NextLongArray()\n    {\n        string[] s = NextStrArray();\n        long[] a = new long[s.Length];\n        for (int i = 0; i < a.Length; i++)\n        {\n            a[i] = long.Parse(s[i]);\n        }\n        return a;\n    }\n    public static double[] NextDoubleArray()\n    {\n        string[] s = NextStrArray();\n        double[] a = new double[s.Length];\n        for (int i = 0; i < a.Length; i++)\n        {\n            a[i] = double.Parse(s[i]);\n        }\n        return a;\n    }\n}\n#endregion ZIPPER\n\npublic class Solver\n{\n#region IGNORE_ME\n    public Solver()\n    {\n        //???????????¨?????????????????????????????????????????????\n    }\n#endregion IGNORE_ME\n\n    public void Solve()\n    {\n        Point p1 = new Point(sc.NextDouble(), sc.NextDouble());\n        Point p2 = new Point(sc.NextDouble(), sc.NextDouble());\n        int q = sc.NextInt();\n        Point[] p = new Point[q];\n        for (int i = 0; i < q; i++)\n        {\n            p[i] = new Point(sc.NextDouble(), sc.NextDouble());\n        }\n        for (int i = 0; i < q; i++)\n        {\n            Point s = gl.Projection(p1, p2, p[i]);\n            Console.WriteLine(\"{0} {1}\", s.x, s.y);\n        }\n#if DEBUG\n        Console.WriteLine(\"\");//local check\n#endif\n    }\n}\nnamespace Geometry\n{\n    /// <summary>\n    /// ??????x,y??§?¨??????¨???\n    /// </summary>\n    public struct Point\n        {\n            public double x;\n            public double y;\n            public Point(int x, int y)\n            {\n                this.x = (double)x; this.y = (double)y;\n            }\n            public Point(double x, double y)\n            {\n                this.x = x; this.y = y;\n            }\n            public static Point operator +(Point p1, Point p2)\n            {\n                return new Point(p1.x + p2.x, p1.y + p2.y);\n            }\n            public static Point operator -(Point p1, Point p2)\n            {\n                return new Point(p1.x - p2.x, p1.y - p2.y);\n            }\n            public static Point operator *(double s, Point p)\n            {\n                return new Point(s * p.x, s * p.y);\n            }\n        }\n    public static class GeometryLibrary\n    {\n\n\n        /// <summary>\n        /// ??????\n        /// </summary>\n        /// <returns></returns>\n        public static double Naiseki(Point p1, Point p2)\n        {\n            return p1.x * p2.x + p1.y * p2.y;\n        }\n        /// <summary>\n        /// ??´???p1,p2???????????????p????°???±\n        /// </summary>\n        /// <param name=\"p1\"></param>\n        /// <param name=\"p2\"></param>\n        /// <param name=\"p\"></param>\n        /// <returns></returns>\n        public static Point Projection(Point p1, Point p2, Point p)\n        {\n            Point a = p2 - p1;\n            Point b = p - p1;\n            double t = Naiseki(a, b) / Naiseki(a, a);\n            return t * a + p1 ;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;//リストの使用\nusing System.Collections.Generic;\nclass Program\n{\n\tstatic void Main()\n\t{\n\t\tstring[] input = Console.ReadLine().Split(' ');//Splitで区切り文字を指定して複数個受け取る。\n\t\tVector2 beginPoint = new Vector2(decimal.Parse(input[0]), decimal.Parse(input[1]));\n    Vector2 endPoint = new Vector2(decimal.Parse(input[2]), decimal.Parse(input[3]));\n\t\tlong q = long.Parse(Console.ReadLine());\n\n    for(long i = 0; i < q; i++)\n    {\n      string[] inputSub = Console.ReadLine().Split(' ');\n      Vector2 answer = Vector2.Projection(beginPoint, endPoint,\n        new Vector2(decimal.Parse(inputSub[0]), decimal.Parse(inputSub[1])));\n      Console.WriteLine(answer.x + \" \" + answer.y);\n    }\n\t}\n}\n\nclass Vector2//2次元ベクトル\n{\n  public Vector2 (decimal X, decimal Y)\n  {\n    this.x = X;\n    this.y = Y;\n  }\n\n  public decimal x {private set; get;}\n  public decimal y {private set; get;}\n\n  public static Vector2 operator + (Vector2 ob1, Vector2 ob2)//ベクトルの基本演算\n  {\n    return new Vector2 (ob1.x + ob2.x, ob1.y + ob2.y);\n  }\n  public static Vector2 operator - (Vector2 ob1, Vector2 ob2)\n  {\n    return new Vector2 (ob1.x - ob2.x, ob1.y - ob2.y);\n  }\n  public static Vector2 operator * (Vector2 ob, decimal scalar)\n  {\n    return new Vector2 (ob.x * scalar, ob.y * scalar);\n  }\n\n  public decimal Length()//ベクトルの長さ\n  {\n    return x * x + y * y;\n  }\n  public static decimal DotProduct(Vector2 ob1, Vector2 ob2)//内積\n  {\n    return ob1.x * ob2.x + ob1.y * ob2.y;\n  }\n\n  public static Vector2 Projection(Vector2 beginPoint, Vector2 endPoint, Vector2 point)//点の射影\n  {\n    Vector2 segment = endPoint - beginPoint;\n    decimal ratio = Vector2.DotProduct(point - beginPoint, segment) / segment.Length();\n    return beginPoint + segment * ratio;//始点にたす\n  }\n}\n\n"
  },
  {
    "language": "C#",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define trav(a, x) for(auto& a : x)\n#define all(x) x.begin(), x.end()\n#define sz(x) (int)(x).size()\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntemplate<class T>\nstruct Point {\n\ttypedef Point P;\n\tT x, y;\n\texplicit Point(T x=0, T y=0) : x(x), y(y) {}\n\tbool operator<(P p) const { return tie(x,y) < tie(p.x,p.y); }\n\tbool operator==(P p) const { return tie(x,y)==tie(p.x,p.y); }\n\tP operator+(P p) const { return P(x+p.x, y+p.y); }\n\tP operator-(P p) const { return P(x-p.x, y-p.y); }\n\tP operator*(T d) const { return P(x*d, y*d); }\n\tP operator/(T d) const { return P(x/d, y/d); }\n\tT dot(P p) const { return x*p.x + y*p.y; }\n\tT cross(P p) const { return x*p.y - y*p.x; }\n\tT cross(P a, P b) const { return (a-*this).cross(b-*this); }\n\tT dist2() const { return x*x + y*y; }\n\tdouble dist() const { return sqrt((double)dist2()); }\n\t// angle to x-axis in interval [-pi, pi]\n\tdouble angle() const { return atan2(y, x); }\n\tP unit() const { return *this/dist(); } // makes dist()=1\n\tP perp() const { return P(-y, x); } // rotates +90 degrees\n\tP normal() const { return perp().unit(); }\n\t// returns point rotated 'a' radians ccw around the origin\n\tP rotate(double a) const {\n\t\treturn P(x*cos(a)-y*sin(a),x*sin(a)+y*cos(a)); }\n};\n\nusing P = Point<double>;\n\nint main(){\n\tios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\tcout << fixed << setprecision(10);\n\tP p1, p2;\n\tcin >> p1.x >> p1.y >> p2.x >> p2.y;\n\tint q;\n\tcin >> q;\n\tfor(int i = 0; i < q; i++){\n\t\tP p;\n\t\tcin >> p.x >> p.y;\n\t\tP proj = p - (p2 - p1).normal() * p.dot((p2 - p1).normal());\n\t\tcout << proj.x << \" \" << proj.y << '\\n';\n\t}\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            double[] input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n            Pt a = new Pt(input[0], input[1]);\n            Pt b = new Pt(input[2], input[3]);\n\n            Seg s = new Seg(a, b);\n\n            int q = int.Parse(Console.ReadLine());\n\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < q; i++)\n            {\n                input = Array.ConvertAll(Console.ReadLine().Split(' '), double.Parse);\n                Pt p = new Pt(input[0], input[1]);\n\n                sb.AppendLine(Project(s, p).ToString());\n            }\n            Console.Write(sb);\n        }\n\n        static Pt Project(Seg s, Pt p)\n        {\n            Pt b = s.p2 - s.p1;\n            double r = (p - s.p1).Dot(b) / b.Norm;\n            return s.p1 + b * r;\n        }\n    }\n\n    struct Pt : IComparable<Pt>\n    {\n        static readonly double EPS = 1E-10;\n\n        internal double x, y;\n\n        public Pt(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public double Abs { get { return Math.Sqrt(Norm); } }\n        public double Norm { get { return x * x + y * y; } }\n\n        public double Dot(Pt p) { return x * p.x + y * p.y; }\n        public double Cross(Pt p) { return x * p.y - y * p.x; }\n\n        public static Pt operator +(Pt a, Pt b) { return new Pt(a.x + b.x, a.y + b.y); }\n        public static Pt operator -(Pt a, Pt b) { return new Pt(a.x - b.x, a.y - b.y); }\n        public static Pt operator *(Pt p, double d) { return new Pt(p.x * d, p.y * d); }\n        public static Pt operator /(Pt p, double d) { return new Pt(p.x / d, p.y / d); }\n        public static bool operator <(Pt a, Pt b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Pt a, Pt b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Pt a, Pt b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Pt a, Pt b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public int CompareTo(Pt other)\n        {\n            return x != other.x ? (int)(x - other.x) : (int)(y - other.y);\n        }\n\n        public override bool Equals(object obj)\n        {\n            Pt other = (Pt)obj;\n            return Math.Abs(x - other.x) < EPS && Math.Abs(y - other.y) < EPS;\n        }\n\n        public override int GetHashCode()\n        {\n            return x.GetHashCode() ^ y.GetHashCode();\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\"{0:f10} {1:f10}\", x, y);\n        }\n    }\n\n    struct Seg\n    {\n        internal Pt p1, p2;\n\n        public Seg(Pt a, Pt b)\n        {\n            p1 = a;\n            p2 = b;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\n/*\n\n  Points/Vectors - Projection\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\n\n  ?????????????°???±????±?????????????\n\n */\n\nclass Program {\n    static int ReadInt() { return int.Parse(Console.ReadLine()); }\n    static int[] ReadInts() { return Console.ReadLine().Split().Select(int.Parse).ToArray(); }\n    static string[] ReadStrings() { return Console.ReadLine().Split(); }\n\n    // a, b ????????´??????????????????p ????????????????°???±?????????????±???????\n    static void Calc(Vec2f p, Vec2f a, Vec2f b) {\n        var ab = b - a;\n        var ap = p - a;\n\n        var d = ab.Normalized().Dot(ap);\n        var x = a + ab.Normalized() * d;\n        Console.WriteLine(\"{0} {1}\", x.X, x.Y);\n    }\n\n    static void Main() {\n        var xs = ReadInts();\n        var p1 = new Vec2f(xs[0], xs[1]);\n        var p2 = new Vec2f(xs[2], xs[3]);\n\n        int q = ReadInt();\n        for (int i = 0; i < q; i++) {\n            var xy = ReadInts();\n            var p = new Vec2f(xy[0], xy[1]);\n            Calc(p, p1, p2);\n        }\n    }\n}\n\nstruct Vec2f {\n    public float X { get; private set; }\n    public float Y { get; private set; }\n\n    public Vec2f(float x, float y) {\n        X = x;\n        Y = y;\n    }\n\n    public override string ToString() {\n        return string.Format(\"({0}, {1})\", X, Y);\n    }\n\n    public static Vec2f operator+(Vec2f a, Vec2f b) {\n        return new Vec2f(a.X + b.X, a.Y + b.Y);\n    }\n\n    public static Vec2f operator-(Vec2f a, Vec2f b) {\n        return new Vec2f(a.X - b.X, a.Y - b.Y);\n    }\n\n    public static Vec2f operator*(Vec2f a, float t) {\n        return new Vec2f(a.X * t, a.Y * t);\n    }\n\n    // a???b = |a||b|cos??\n    public float Dot(Vec2f other) {\n        return X * other.X + Y * other.Y;\n    }\n\n    public float Cross(Vec2f other) {\n        return X * other.Y - Y * other.X;\n    }\n\n    public Vec2f Normalized() {\n        var m = Magnitude();\n        if (m != 0 && m != 1) {\n            return new Vec2f(X / m, Y / m);\n        }\n        return this;\n    }\n\n    public float Magnitude() {\n        return (float)Math.Sqrt(X * X + Y * Y);\n    }\n\n    public float SqrMagnitude() {\n        return X * X + Y * Y;\n    }\n\n    public static float Distance(Vec2f a, Vec2f b) {\n        return (a - b).Magnitude();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\n/*\n\n  Points/Vectors - Projection\n  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A\n\n  ?????????????°???±????±?????????????\n\n */\n\nclass Program {\n    static int ReadInt() { return int.Parse(Console.ReadLine()); }\n    static int[] ReadInts() { return Console.ReadLine().Split().Select(int.Parse).ToArray(); }\n    static string[] ReadStrings() { return Console.ReadLine().Split(); }\n\n    // a, b ????????´??????????????????p ????????????????°???±?????????????±???????\n    static void Calc(Vec2f p, Vec2f a, Vec2f b) {\n        var ab = b - a;\n        var ap = p - a;\n\n        var d = ab.Normalized().Dot(ap);\n        var x = a + ab.Normalized() * d;\n        Console.WriteLine(\"{0} {1}\", x.X, x.Y);\n    }\n\n    static void Main() {\n        var xs = ReadInts();\n        var p1 = new Vec2f(xs[0], xs[1]);\n        var p2 = new Vec2f(xs[2], xs[3]);\n\n        int q = ReadInt();\n        for (int i = 0; i < q; i++) {\n            var xy = ReadInts();\n            var p = new Vec2f(xy[0], xy[1]);\n            Calc(p, p1, p2);\n        }\n    }\n}\n\nstruct Vec2f {\n    public float X { get; private set; }\n    public float Y { get; private set; }\n\n    public Vec2f(float x, float y) : this() {\n        X = x;\n        Y = y;\n    }\n\n    public override string ToString() {\n        return string.Format(\"({0}, {1})\", X, Y);\n    }\n\n    public static Vec2f operator+(Vec2f a, Vec2f b) {\n        return new Vec2f(a.X + b.X, a.Y + b.Y);\n    }\n\n    public static Vec2f operator-(Vec2f a, Vec2f b) {\n        return new Vec2f(a.X - b.X, a.Y - b.Y);\n    }\n\n    public static Vec2f operator*(Vec2f a, float t) {\n        return new Vec2f(a.X * t, a.Y * t);\n    }\n\n    // a???b = |a||b|cos??\n    public float Dot(Vec2f other) {\n        return X * other.X + Y * other.Y;\n    }\n\n    public float Cross(Vec2f other) {\n        return X * other.Y - Y * other.X;\n    }\n\n    public Vec2f Normalized() {\n        var m = Magnitude();\n        if (m != 0 && m != 1) {\n            return new Vec2f(X / m, Y / m);\n        }\n        return this;\n    }\n\n    public float Magnitude() {\n        return (float)Math.Sqrt(X * X + Y * Y);\n    }\n\n    public float SqrMagnitude() {\n        return X * X + Y * Y;\n    }\n\n    public static float Distance(Vec2f a, Vec2f b) {\n        return (a - b).Magnitude();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n//using System.Collections.Generic;\n//using System.Linq;\n//using Vector = CGL.Point;\n//using Line = CGL.Segment;\n//using Polygon = System.Collections.Generic.List<CGL.Point>;\n\n\nnamespace CGL\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var p = scan;\n            var p1 = new Point(p[0], p[1]);\n            var p2 = new Point(p[2], p[3]);\n            var s = new Segment(p1, p2);\n            var q = scan[0];\n            for (int i = 0; i < q; i++)\n            {\n                p = scan;\n                var P = new Point(p[0], p[1]);\n                var Q = s.Projection(P);\n                Console.WriteLine(Q.x+\" \"+Q.y);\n            }\n        }\n        static int[] scan { get { return Array.ConvertAll(Console.ReadLine().Split(), int.Parse); } }\n    }\n    \n    struct Point\n    {\n        static readonly double EPS = 1E-10;\n        public double x, y;\n        public Point(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public static Point operator +(Point a, Point b) { return new Point(a.x + b.x, a.y + b.y); }\n        public static Point operator -(Point a, Point b) { return new Point(a.x - b.x, a.y - b.y); }\n        public static Point operator *(double k, Point a) { return new Point(k * a.x, k * a.y); }\n        public static Point operator /(double k, Point a) { return new Point(a.x / k, a.y / k); }\n        \n        public double Abs { get { return Math.Sqrt(Norm); } }  \n        public double Norm { get { return x * x + y * y; } }\n\n        public static bool operator <(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Point a, Point b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Point a, Point b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public override bool Equals(object p){  return Math.Abs(x - ((Point)p).x) < EPS && Math.Abs(y - ((Point)p).y) < EPS; }\n        public override int GetHashCode(){ return x.GetHashCode() ^ y.GetHashCode(); }\n\n        public double Dot(Point p) { return x * p.x + y * p.y; }\n        public double Cross(Point p) { return x * p.y - y * p.x; }\n\n    }\n    struct Segment\n    {\n        public Point p1, p2;\n        public Segment(Point p1, Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n        public Point Projection(Point p)\n        {\n            Point b = p2 - p1;\n            double r = b.Dot(p - p1) / b.Norm;\n            return p1 + r * b;\n\n        }\n    }\n    /*struct Circle\n    {\n        public Point c; double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n\n    }*/\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing static System.Console;\n\nnamespace Projection\n{\n    internal class Program\n    {\n        \n        public static void Main(string[] args)\n        {\n            Solve();\n        }\n\n        static void Solve()\n        {\n            var inputs = InputLine();\n            var startPos = new Vector2(inputs[0], inputs[1]);\n            var endPos = new Vector2(inputs[2], inputs[3]);\n            var n = int.Parse(ReadLine());\n\n            for (var i = 0; i < n; i++)\n            {\n                inputs = InputLine();\n                var vertex = GetProjection(startPos, endPos, new Vector2(inputs[0], inputs[1]));\n                WriteLine(vertex.x + \" \" + vertex.y);\n            }\n        }\n\n        static Vector2 GetProjection(Vector2 startPos, Vector2 endPos, Vector2 objPos)\n        {\n            var axisX = endPos - startPos;\n            var axisY = objPos - startPos;\n            var project = (Vector2.Dot(axisX, axisY) / (Vector2.Length(axisX) * Vector2.Length(axisX))) * axisX;\n            return project + startPos;\n        }\n\n        static IReadOnlyList<double> InputLine()\n        {\n            var inputs = ReadLine()\n                .Split(' ')\n                .Select(double.Parse)\n                .ToList();\n\n            return inputs;\n        }\n        \n    }\n\n    public struct Vector2\n    {\n        public double x, y;\n\n        public Vector2(double xy)\n        {\n            this.x = this.y = xy;\n        }\n\n        public Vector2(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n        \n        public static Vector2 operator +(Vector2 a, Vector2 b)\n            => new Vector2(a.x + b.x, a.y + b.y);\n\n        public static Vector2 operator -(Vector2 a, Vector2 b)\n            => new Vector2(a.x - b.x, a.y - b.y);\n        \n\n        public static Vector2 operator *(double d, Vector2 vec)\n            => new Vector2(d * vec.x, d * vec.y);\n\n        public static double Dot(Vector2 a, Vector2 b)\n            => a.x * b.x + a.y * b.y;\n\n        public static double Length(Vector2 a)\n            => Math.Sqrt(a.x * a.x + a.y * a.y);\n    }\n    \n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\n//using System.Numerics;\nusing Enu = System.Linq.Enumerable;\n\npublic class Program\n{\n    public void Solve()\n    {\n        var A = new Point(Reader.Int(), Reader.Int());\n        var B = new Point(Reader.Int(), Reader.Int());\n        int NQ = Reader.Int();\n        var seg = new Segment(A, B);\n\n        for (int q = 0; q < NQ; q++)\n        {\n            var P = new Point(Reader.Int(), Reader.Int());\n            var Q = Projection(P, seg);\n            Console.WriteLine(Q.X + \" \" + Q.Y);\n        }\n        Console.ReadLine();\n    }\n\n    public Point Projection(Point p, Segment seg)\n    {\n        Point v = seg.B - seg.A;\n        return seg.A + v * (v.Dot(p - seg.A) / v.Dot(v));\n    }\n\n    public class Segment\n    {\n        public Point A, B;\n        public Segment(Point a, Point b) { A = a; B = b; }\n    }\n\n    public struct Point : IEquatable<Point>, IComparable<Point>\n    {\n        public static readonly double Eps = 1e-10;\n        public double X, Y;\n\n        public Point(double x, double y) { X = x; Y = y; }\n\n        public static Point operator +(Point a, Point b)\n        {\n            return new Point(Add(a.X, b.X), Add(a.Y, b.Y));\n        }\n        public static Point operator -(Point a, Point b)\n        {\n            return new Point(Add(a.X, -b.X), Add(a.Y, -b.Y));\n        }\n        public static Point operator *(Point p, double d)\n        {\n            return new Point(p.X * d, p.Y * d);\n        }\n        public double Dot(Point b) { return Add(X * b.X, Y * b.Y); }\n        public double Det(Point b) { return Add(X * b.Y, -Y * b.X); }\n        public bool Equals(Point b) { return X == b.X && Y == b.Y; }\n        public int CompareTo(Point b) { return X != b.X ? Math.Sign(X - b.X) : Math.Sign(Y - b.Y); }\n        public override int GetHashCode() { return (int)(X * 100000 + Y); }\n        public override string ToString() { return X + \", \" + Y; }\n\n        private static double Add(double a, double b)\n        {\n            if (Math.Abs(a + b) < Eps * (Math.Abs(a) + Math.Abs(b))) return 0;\n            return a + b;\n        }\n    }\n}\n\n\nclass Entry { static void Main() { new Program().Solve(); } }\nclass Reader\n{\n    private static TextReader reader = Console.In;\n    private static readonly char[] separator = { ' ' };\n    private static readonly StringSplitOptions op = StringSplitOptions.RemoveEmptyEntries;\n    private static string[] A = new string[0];\n    private static int i;\n    private static void Init() { A = new string[0]; }\n    public static void Set(TextReader r) { reader = r; Init(); }\n    public static void Set(string file) { reader = new StreamReader(file); Init(); }\n    public static bool HasNext() { return CheckNext(); }\n    public static string String() { return Next(); }\n    public static int Int() { return int.Parse(Next()); }\n    public static long Long() { return long.Parse(Next()); }\n    public static double Double() { return double.Parse(Next()); }\n    public static int[] IntLine() { return Array.ConvertAll(Split(Line()), int.Parse); }\n    public static int[] IntArray(int N) { return Enu.Range(0, N).Select(i => Int()).ToArray(); }\n    public static int[][] IntTable(int H) { return Enu.Range(0, H).Select(i => IntLine()).ToArray(); }\n    public static string[] StringArray(int N) { return Enu.Range(0, N).Select(i => Next()).ToArray(); }\n    public static string Line() { return reader.ReadLine().Trim(); }\n    private static string[] Split(string s) { return s.Split(separator, op); }\n    private static string Next() { CheckNext(); return A[i++]; }\n    private static bool CheckNext()\n    {\n        if (i < A.Length) return true;\n        string line = reader.ReadLine();\n        if (line == null) return false;\n        if (line == \"\") return CheckNext();\n        A = Split(line);\n        i = 0;\n        return true;\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\n//using System.Collections.Generic;\n//using System.Linq;\nusing Vector = CGL.Point;\n//using Line = CGL.Segment;\n//using Polygon = System.Collections.Generic.List<CGL.Point>;\n\n\nnamespace CGL\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var p = scan;\n            var p1 = new Point(p[0], p[1]);\n            var p2 = new Point(p[2], p[3]);\n            var s = new Segment(p1, p2);\n            var q = scan[0];\n            for (int i = 0; i < q; i++)\n            {\n                p = scan;\n                var P = new Point(p[0], p[1]);\n                var Q = Projection(s, P);\n                Console.WriteLine(Q.x+\" \"+Q.y);\n            }\n        }\n        static Point Projection(Segment s, Point p)\n        {\n            Vector b = s.p2 - s.p1;\n            double r = b.Dot(p - s.p1) / b.Norm;\n            return s.p1 + r * b;\n\n        }\n        static int[] scan { get { return Array.ConvertAll(Console.ReadLine().Split(), int.Parse); } }\n    }\n    \n    struct Point\n    {\n        static readonly double EPS = 1E-10;\n        public double x, y;\n        public Point(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public static Point operator +(Point a, Point b) { return new Point(a.x + b.x, a.y + b.y); }\n        public static Point operator -(Point a, Point b) { return new Point(a.x - b.x, a.y - b.y); }\n        public static Point operator *(double k, Point a) { return new Point(k * a.x, k * a.y); }\n        public static Point operator /(double k, Point a) { return new Point(a.x / k, a.y / k); }\n        \n        public double Abs { get { return Math.Sqrt(Norm); } }  \n        public double Norm { get { return x * x + y * y; } }\n\n        public static bool operator <(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x < b.x : a.y < b.y; }\n        public static bool operator >(Point a, Point b) { return Math.Abs(a.x - b.x) > EPS ? a.x > b.x : a.y > b.y; }\n        public static bool operator ==(Point a, Point b) { return Math.Abs(a.x - b.x) < EPS && Math.Abs(a.y - b.y) < EPS; }\n        public static bool operator !=(Point a, Point b) { return Math.Abs(a.x - b.x) >= EPS || Math.Abs(a.y - b.y) >= EPS; }\n\n        public override bool Equals(object p){  return Math.Abs(x - ((Point)p).x) < EPS && Math.Abs(y - ((Point)p).y) < EPS; }\n        public override int GetHashCode(){ return x.GetHashCode() ^ y.GetHashCode(); }\n\n        public double Dot(Point p) { return x * p.x + y * p.y; }\n        public double Cross(Point p) { return x * p.y - y * p.x; }\n\n    }\n    struct Segment\n    {\n        public Point p1, p2;\n        public Segment(Point p1, Point p2)\n        {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n    }\n    /*struct Circle\n    {\n        public Point c; double r;\n        public Circle(Point c, double r)\n        {\n            this.c = c;\n            this.r = r;\n        }\n\n    }*/\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Numerics;\nusing Enu = System.Linq.Enumerable;\n\npublic class Program\n{\n    public void Solve()\n    {\n        var A = new Point(Reader.Int(), Reader.Int());\n        var B = new Point(Reader.Int(), Reader.Int());\n        int NQ = Reader.Int();\n        var seg = new Segment(A, B);\n\n        for (int q = 0; q < NQ; q++)\n        {\n            var P = new Point(Reader.Int(), Reader.Int());\n            var Q = Projection(P, seg);\n            Console.WriteLine(Q.X + \" \" + Q.Y);\n        }\n        Console.ReadLine();\n    }\n\n    public Point Projection(Point p, Segment seg)\n    {\n        Point v = seg.B - seg.A;\n        return seg.A + v * (v.Dot(p - seg.A) / v.Dot(v));\n    }\n\n    public class Segment\n    {\n        public Point A, B;\n        public Segment(Point a, Point b) { A = a; B = b; }\n    }\n\n    public struct Point : IEquatable<Point>, IComparable<Point>\n    {\n        public static readonly double Eps = 1e-10;\n        public double X, Y;\n\n        public Point(double x, double y) { X = x; Y = y; }\n\n        public static Point operator +(Point a, Point b)\n        {\n            return new Point(Add(a.X, b.X), Add(a.Y, b.Y));\n        }\n        public static Point operator -(Point a, Point b)\n        {\n            return new Point(Add(a.X, -b.X), Add(a.Y, -b.Y));\n        }\n        public static Point operator *(Point p, double d)\n        {\n            return new Point(p.X * d, p.Y * d);\n        }\n        public double Dot(Point b) { return Add(X * b.X, Y * b.Y); }\n        public double Det(Point b) { return Add(X * b.Y, -Y * b.X); }\n\n        public bool Equals(Point b) { return X == b.X && Y == b.Y; }\n        public static bool operator ==(Point a, Point b) { return a.Equals(b); }\n        public static bool operator !=(Point a, Point b) { return !a.Equals(b); }\n        public int CompareTo(Point b) { return X != b.X ? Math.Sign(X - b.X) : Math.Sign(Y - b.Y); }\n        public override int GetHashCode() { return (int)(X * 100000 + Y); }\n        public override string ToString() { return X + \", \" + Y; }\n\n        private static double Add(double a, double b)\n        {\n            if (Math.Abs(a + b) < Eps * (Math.Abs(a) + Math.Abs(b))) return 0;\n            return a + b;\n        }\n    }\n}\n\n\nclass Entry { static void Main() { new Program().Solve(); } }\nclass Reader\n{\n    private static TextReader reader = Console.In;\n    private static readonly char[] separator = { ' ' };\n    private static readonly StringSplitOptions op = StringSplitOptions.RemoveEmptyEntries;\n    private static string[] A = new string[0];\n    private static int i;\n    private static void Init() { A = new string[0]; }\n    public static void Set(TextReader r) { reader = r; Init(); }\n    public static void Set(string file) { reader = new StreamReader(file); Init(); }\n    public static bool HasNext() { return CheckNext(); }\n    public static string String() { return Next(); }\n    public static int Int() { return int.Parse(Next()); }\n    public static long Long() { return long.Parse(Next()); }\n    public static double Double() { return double.Parse(Next()); }\n    public static int[] IntLine() { return Array.ConvertAll(Split(Line()), int.Parse); }\n    public static int[] IntArray(int N) { return Enu.Range(0, N).Select(i => Int()).ToArray(); }\n    public static int[][] IntTable(int H) { return Enu.Range(0, H).Select(i => IntLine()).ToArray(); }\n    public static string[] StringArray(int N) { return Enu.Range(0, N).Select(i => Next()).ToArray(); }\n    public static string Line() { return reader.ReadLine().Trim(); }\n    private static string[] Split(string s) { return s.Split(separator, op); }\n    private static string Next() { CheckNext(); return A[i++]; }\n    private static bool CheckNext()\n    {\n        if (i < A.Length) return true;\n        string line = reader.ReadLine();\n        if (line == null) return false;\n        if (line == \"\") return CheckNext();\n        A = Split(line);\n        i = 0;\n        return true;\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing static System.Console;\nusing static System.Math;\nusing static MyIO;\nusing static MyUtil;\n\nusing static Geometory;\nusing Vector = Geometory.Point;\nusing Line = Geometory.Segment;\n\npublic class A\n{\n\tpublic static void Main() => (new Solver()).Solve();\n}\n\npublic class Solver\n{\n\tpublic void Solve()\n\t{\n\t\tvar p1 = new Point(GetDouble(), GetDouble());\n\t\tvar p2 = new Point(GetDouble(), GetDouble());\n\t\tvar s = new Segment(p1, p2);\n\t\tint Q = GetInt();\n\t\tvar ans = new string[Q];\n\t\tfor(int i = 0; i < Q; i++)\n\t\t\tans[i] = solve(s);\n\n\t\tWriteLine(string.Join(\"\\n\", ans));\n\t}\n\n\tprivate string solve(Segment s)\n\t{\n\t\tvar p = new Point(GetDouble(), GetDouble());\n\t\tvar x = Project(s, p);\n\t\treturn $\"{x.X:F9} {x.Y:F9}\";\n\t}\n}\n\npublic static class Geometory\n{\n\tprivate const double EPS = 1e-10;\n\tpublic static bool Equals(double a, double b) => Math.Abs(a - b) < EPS;\n\n\tpublic class Point\n\t{\n\t\tpublic double X;\n\t\tpublic double Y;\t\t\n\t\tpublic Point(double x, double y)\n\t\t{\n\t\t\tX = x;\n\t\t\tY = y;\n\t\t}\n\t\n\t\tpublic static Point operator+(Point p, Point q) => new Point(p.X + q.X, p.Y + q.Y);\n\t\tpublic static Point operator-(Point p, Point q) => new Point(p.X - q.X, p.Y - q.Y);\n\t\tpublic static Point operator*(Point p, double a) => new Point(a * p.X, a * p.Y);\n\t\tpublic static Point operator*(double a, Point p) => new Point(a * p.X, a * p.Y);\n\t\tpublic static Point operator/(Point p, double a) => new Point(p.X / a, p.Y / a);\n\t}\n\n\tpublic class Segment\n\t{\n\t\tpublic Point P1;\n\t\tpublic Point P2;\n\t\tpublic Segment(Point p1, Point p2)\n\t\t{\n\t\t\tP1 = p1;\n\t\t\tP2 = p2;\n\t\t}\n\t}\n\n\tpublic static double Abs(Vector a) => Math.Sqrt(Norm(a));\n\tpublic static double Norm(Vector a) => a.X * a.X + a.Y * a.Y;\n\tpublic static double Dot(Vector a, Vector b) => a.X * b.X + a.Y * b.Y;\n\tpublic static double Cross(Vector a, Vector b) => a.X * b.Y - a.Y * b.X;\n\n\tpublic static bool IsOrthogonal(Vector a, Vector b) => Equals(Dot(a, b), 0.0);\n\tpublic static bool IsOrthogonal(Point a1, Point a2, Point b1, Point b2) => IsOrthogonal(a1 - a2, b1 - b2);\n\tpublic static bool IsOrthogonal(Segment s1, Segment s2) => Equals(Dot(s1.P2 - s1.P1, s2.P2 - s2.P1), 0.0);\n\tpublic static bool IsParallel(Vector a, Vector b) => Equals(Cross(a, b), 0.0);\n\tpublic static bool IsParallel(Point a1, Point a2, Point b1, Point b2) => IsParallel(a1 - a2, b1 - b2);\n\tpublic static bool IsParallel(Segment s1, Segment s2) => Equals(Cross(s1.P2 - s1.P1, s2.P2 - s2.P1), 0.0);\n\n\tpublic static Point Project(Segment s, Point p)\n\t{\n\t\tVector b = s.P2 - s.P1;\n\t\tdouble r = Dot(p - s.P1, b) / Norm(b);\n\t\treturn s.P1 + b * r;\n\t}\n}\n\npublic static class MyIO\n{\n\tprivate static string[] args = null;\n\tprivate static int num = -1;\n\tprivate static int used = -1;\n\n\tprivate static string getArg()\n\t{\n\t\tif(used == num)\n\t\t{\n\t\t\targs = Console.ReadLine().Split(' ');\n\t\t\tnum = args.Length;\n\t\t\tused = 0;\n\t\t}\n\t\treturn args[used++];\n\t}\n\n\tpublic static int GetInt() => int.Parse(getArg());\n\tpublic static long GetLong() => long.Parse(getArg());\n\tpublic static double GetDouble() => double.Parse(getArg());\n\tpublic static decimal GetDecimal() => decimal.Parse(getArg());\n\tpublic static string GetString() => getArg();\n\tpublic static char GetChar() => getArg()[0];\n\tpublic static int[] GetInts(long N) => Enumerable.Range(0, (int)N).Select(_ => GetInt()).ToArray();\n\tpublic static long[] GetLongs(long N) => Enumerable.Range(0, (int)N).Select(_ => GetLong()).ToArray();\n\tpublic static double[] GetDoubles(long N) => Enumerable.Range(0, (int)N).Select(_ => GetDouble()).ToArray();\n\tpublic static decimal[] GetDecimals(long N) => Enumerable.Range(0, (int)N).Select(_ => GetDecimal()).ToArray();\n\tpublic static string[] GetStrings(long N) => Enumerable.Range(0, (int)N).Select(_ => GetString()).ToArray();\n}\n\npublic static class MyUtil\n{\n\tpublic static void chmax<T>(ref T x, T y) where T : IComparable<T>\n\t{\n\t\tif(x.CompareTo(y) < 0)\n\t\t\tx = y;\n\t}\n\n\tpublic static void chmin<T>(ref T x, T y) where T : IComparable<T>\n\t{\n\t\tif(x.CompareTo(y) > 0)\n\t\t\tx = y;\n\t}\n\n\tpublic static void swap<T>(ref T x, ref T y)\n\t{\n\t\tT tmp = x;\n\t\tx = y;\n\t\ty = tmp;\n\t}\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\n\nclass A\n{\n\tstatic double[] Read() => Console.ReadLine().Split().Select(double.Parse).ToArray();\n\tstatic void Main()\n\t{\n\t\tvar h = Read();\n\n\t\t// Vector2 は float のため、精度が足りません。\n\t\tvar p1 = new V(h[0], h[1]);\n\t\tvar p2 = new V(h[2], h[3]);\n\t\tvar p0 = p2 - p1;\n\t\tvar e = p0 / p0.Norm;\n\n\t\tvar q = int.Parse(Console.ReadLine());\n\t\tvar r = new int[q].Select(_ => Read())\n\t\t\t.Select(x => new V(x[0], x[1]) - p1)\n\t\t\t.Select(p => p1 + V.Dot(p, e) * e);\n\t\tConsole.WriteLine(string.Join(\"\\n\", r));\n\t}\n}\n\nstruct V : IEquatable<V>\n{\n\tpublic double X, Y;\n\tpublic V(double x, double y) { X = x; Y = y; }\n\tpublic override string ToString() => $\"{X:F9} {Y:F9}\";\n\n\tpublic double Norm => Math.Sqrt(X * X + Y * Y);\n\tpublic double Angle => Math.Atan2(Y, X);\n\n\tpublic bool Equals(V other) => X == other.X && Y == other.Y;\n\tpublic static bool operator ==(V v1, V v2) => v1.Equals(v2);\n\tpublic static bool operator !=(V v1, V v2) => !v1.Equals(v2);\n\tpublic override bool Equals(object obj) => obj is V && Equals((V)obj);\n\tpublic override int GetHashCode() => X.GetHashCode() ^ Y.GetHashCode();\n\n\tpublic static V operator -(V v) => new V(-v.X, -v.Y);\n\tpublic static V operator +(V v1, V v2) => new V(v1.X + v2.X, v1.Y + v2.Y);\n\tpublic static V operator -(V v1, V v2) => new V(v1.X - v2.X, v1.Y - v2.Y);\n\tpublic static V operator *(double c, V v) => v * c;\n\tpublic static V operator *(V v, double c) => new V(v.X * c, v.Y * c);\n\tpublic static V operator /(V v, double c) => new V(v.X / c, v.Y / c);\n\n\tpublic static double Dot(V v1, V v2) => v1.X * v2.X + v1.Y * v2.Y;\n\tpublic static double Area(V v1, V v2) => Math.Abs(v1.X * v2.Y - v2.X * v1.Y) / 2;\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Linq;\nusing System.Text;\nusing System.IO;\nusing System.Reflection;\nusing static System.Math;\nusing System.Numerics;\nstatic class Program{\n\tconst int mod=(int)1e9+7;\n\tstatic void Main(){\n\t\tSc sc=new Sc();\n\t\tvar s=sc.Ia;\n\t\tint n=sc.I;\n\t\tStringBuilder sb=new StringBuilder();\n\t\tfor(int i = 0;i<n;i++) {\n\t\t\tvar e=sc.Ia;\n\t\t\tvar a=Gp5(s[0],s[1],s[2],s[3],e[0],e[1]);\n\t\t\tsb.Append(a.Item1).Append(\" \").Append(a.Item2+\"\\n\");\n\t\t}\n\t\tConsole.Write(sb);\n\t}\n\tstatic Tuple<double,double> Gp5(double p1x,double p1y,double p2x,double p2y,double p0x,double p0y){\n\t\tdouble rx=p0x,ry=p0y;\n\t\tif(p1x==p2x){rx=p1x;}\n\t\telse if(p1y==p2y){ry=p1y;}\n\t\telse{\n\t\t\tdouble m1=(p2y-p1y)/(p2x-p1x),b1=p1y-(m1*p1x),m2=-1.0/m1,b2=p0y-(m2*p0x);\n\t\t\trx=(b2-b1)/(m1-m2);\n\t\t\try=(b2*m1-b1*m2)/(m1-m2);\n\t\t}\n\t\treturn Tuple.Create(rx,ry);\n\t}\n}\n\npublic class Sc{\n\tpublic int I{get{return int.Parse(Console.ReadLine());}}\n\tpublic long L{get{return long.Parse(Console.ReadLine());}}\n\tpublic double D{get{return double.Parse(Console.ReadLine());}}\n\tpublic string S{get{return Console.ReadLine();}}\n\tpublic int[] Ia{get{return Array.ConvertAll(Console.ReadLine().Split(),int.Parse);}}\n\tpublic long[] La{get{return Array.ConvertAll(Console.ReadLine().Split(),long.Parse);}}\n\tpublic double[] Da{get{return Array.ConvertAll(Console.ReadLine().Split(),double.Parse);}}\n\tpublic string[] Sa{get{return Console.ReadLine().Split();}}\n\tpublic object[] Oa{get{return Console.ReadLine().Split();}}\n\tpublic int[] Ia2{get{return Array.ConvertAll((\"0 \"+Console.ReadLine()+\" 0\").Split(),int.Parse);}}\n\tpublic int[] Ia3(int a){return Array.ConvertAll((a.ToString()+\" \"+Console.ReadLine()).Split(),int.Parse);}\n\tpublic int[] Ia3(bool a,int b,bool c,int d){return Array.ConvertAll(((a?b.ToString()+\" \":\"\")+Console.ReadLine()+(c?\" \"+d.ToString():\"\")).Split(),int.Parse);}\n\tpublic long[] La2{get{return Array.ConvertAll((\"0 \"+Console.ReadLine()+\" 0\").Split(),long.Parse);}}\n\tpublic long[] La3(int a){return Array.ConvertAll((a.ToString()+\" \"+Console.ReadLine()).Split(),long.Parse);}\n\tpublic long[] La3(bool a,int b,bool c,int d){return Array.ConvertAll(((a?b.ToString()+\" \":\"\")+Console.ReadLine()+(c?\" \"+d.ToString():\"\")).Split(),long.Parse);}\n\tpublic T[] Arr<T>(int n,Func<T> f){var a=new T[n];for(int i=0;i<n;i++){a[i]=f();}return a;}\n\tpublic T[] Arr<T>(int n,Func<int,T> f){var a=new T[n];for(int i=0;i<n;i++){a[i]=f(i);}return a;}\n\tpublic T[] Arr<T>(int n,Func<string[],T> f){var a=new T[n];for(int i=0;i<n;i++){a[i]=f(Console.ReadLine().Split());}return a;}\n\tpublic T[] Arr<T>(int n,Func<int,string[],T> f){var a=new T[n];for(int i=0;i<n;i++){a[i]=f(i,Console.ReadLine().Split());}return a;}\n}\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Diagnostics;\n//using System.Numerics;\nusing Enu = System.Linq.Enumerable;\n\npublic class Program\n{\n    public void Solve()\n    {\n        var A = new Point(Reader.Int(), Reader.Int());\n        var B = new Point(Reader.Int(), Reader.Int());\n        int NQ = Reader.Int();\n        var seg = new Segment(A, B);\n\n        for (int q = 0; q < NQ; q++)\n        {\n            var P = new Point(Reader.Int(), Reader.Int());\n            var Q = Projection(P, seg);\n            Console.WriteLine(Q.X + \" \" + Q.Y);\n        }\n        Console.ReadLine();\n    }\n\n    public Point Projection(Point p, Segment seg)\n    {\n        Point v = seg.B - seg.A;\n        return seg.A + v * (v.Dot(p - seg.A) / v.Dot(v));\n    }\n\n    public class Segment\n    {\n        public Point A, B;\n        public Segment(Point a, Point b) { A = a; B = b; }\n    }\n\n    public struct Point : IEquatable<Point>, IComparable<Point>\n    {\n        public static readonly double Eps = 1e-10;\n        public double X, Y;\n\n        public Point(double x, double y) { X = x; Y = y; }\n\n        public static Point operator +(Point a, Point b)\n        {\n            return new Point(Add(a.X, b.X), Add(a.Y, b.Y));\n        }\n        public static Point operator -(Point a, Point b)\n        {\n            return new Point(Add(a.X, -b.X), Add(a.Y, -b.Y));\n        }\n        public static Point operator *(Point p, double d)\n        {\n            return new Point(p.X * d, p.Y * d);\n        }\n        public double Dot(Point b) { return Add(X * b.X, Y * b.Y); }\n        public double Det(Point b) { return Add(X * b.Y, -Y * b.X); }\n\n        public bool Equals(Point b) { return X == b.X && Y == b.Y; }\n        public static bool operator ==(Point a, Point b) { return a.Equals(b); }\n        public static bool operator !=(Point a, Point b) { return !a.Equals(b); }\n        public int CompareTo(Point b) { return X != b.X ? Math.Sign(X - b.X) : Math.Sign(Y - b.Y); }\n        public override int GetHashCode() { return (int)(X * 100000 + Y); }\n        public override string ToString() { return X + \", \" + Y; }\n\n        private static double Add(double a, double b)\n        {\n            if (Math.Abs(a + b) < Eps * (Math.Abs(a) + Math.Abs(b))) return 0;\n            return a + b;\n        }\n    }\n}\n\n\nclass Entry { static void Main() { new Program().Solve(); } }\nclass Reader\n{\n    private static TextReader reader = Console.In;\n    private static readonly char[] separator = { ' ' };\n    private static readonly StringSplitOptions op = StringSplitOptions.RemoveEmptyEntries;\n    private static string[] A = new string[0];\n    private static int i;\n    private static void Init() { A = new string[0]; }\n    public static void Set(TextReader r) { reader = r; Init(); }\n    public static void Set(string file) { reader = new StreamReader(file); Init(); }\n    public static bool HasNext() { return CheckNext(); }\n    public static string String() { return Next(); }\n    public static int Int() { return int.Parse(Next()); }\n    public static long Long() { return long.Parse(Next()); }\n    public static double Double() { return double.Parse(Next()); }\n    public static int[] IntLine() { return Array.ConvertAll(Split(Line()), int.Parse); }\n    public static int[] IntArray(int N) { return Enu.Range(0, N).Select(i => Int()).ToArray(); }\n    public static int[][] IntTable(int H) { return Enu.Range(0, H).Select(i => IntLine()).ToArray(); }\n    public static string[] StringArray(int N) { return Enu.Range(0, N).Select(i => Next()).ToArray(); }\n    public static string Line() { return reader.ReadLine().Trim(); }\n    private static string[] Split(string s) { return s.Split(separator, op); }\n    private static string Next() { CheckNext(); return A[i++]; }\n    private static bool CheckNext()\n    {\n        if (i < A.Length) return true;\n        string line = reader.ReadLine();\n        if (line == null) return false;\n        if (line == \"\") return CheckNext();\n        A = Split(line);\n        i = 0;\n        return true;\n    }\n}"
  },
  {
    "language": "C#",
    "code": "#region ZIPPER\nusing System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Linq;\nusing System.Text;\nusing sc = Scanner;\nusing Geometry;\nusing gl = Geometry.GeometryLibrary;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Solver solver = new Solver();\n        solver.Solve();\n#if DEBUG\n        System.Console.WriteLine(\"?¶?????????????????????????????????????????????????????????????\");\n        System.Console.ReadKey();\n#endif\n\n    }\n}\n/// <summary>\n/// ?¨??????\\????????????????????´???????????????????????????????????????\n/// </summary>\npublic static class Scanner\n{\n    public static string NextString()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return tmp;\n    }\n    public static int NextInt()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return int.Parse(tmp);\n    }\n    public static long NextLong()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return long.Parse(tmp);\n    }\n    public static double NextDouble()\n    {\n        string tmp = \"\";\n        while (true)\n        {\n            int readData;\n            string data;\n            readData = Console.Read();\n            if (readData == -1) //EOF\n            {\n                break;\n            }\n            data = char.ConvertFromUtf32(readData);\n            if (data == \" \" || data == \"\\n\")\n            {\n                break;\n            }\n            tmp += data;\n        }\n        return double.Parse(tmp);\n    }\n\n    public static string[] NextStrArray()\n    {\n        return Console.ReadLine().Split(' ');\n    }\n    public static int[] NextIntArray()\n    {\n\n        string[] s = NextStrArray();\n        int[] a = new int[s.Length];\n        for (int i = 0; i < a.Length; i++)\n        {\n            a[i] = int.Parse(s[i]);\n        }\n        return a;\n    }\n    public static long[] NextLongArray()\n    {\n        string[] s = NextStrArray();\n        long[] a = new long[s.Length];\n        for (int i = 0; i < a.Length; i++)\n        {\n            a[i] = long.Parse(s[i]);\n        }\n        return a;\n    }\n    public static double[] NextDoubleArray()\n    {\n        string[] s = NextStrArray();\n        double[] a = new double[s.Length];\n        for (int i = 0; i < a.Length; i++)\n        {\n            a[i] = double.Parse(s[i]);\n        }\n        return a;\n    }\n}\n#endregion ZIPPER\n\npublic class Solver\n{\n#region IGNORE_ME\n    public Solver()\n    {\n        //???????????¨?????????????????????????????????????????????\n    }\n#endregion IGNORE_ME\n\n    public void Solve()\n    {\n        int q = sc.NextInt();\n        Point[] p = new Point[4*q];\n        for (int i = 0; i < 4*q; i++)\n        {\n            p[i] = new Point(sc.NextInt(), sc.NextInt());\n        }\n        for (int i = 0; i < q; i++)\n        {\n            int s = 4*i;\n            if (gl.DoesIntersect(p[s], p[s + 1], p[s + 2], p[s + 3]))\n            {\n                Console.WriteLine(\"1\");\n            }\n            else\n                Console.WriteLine(\"0\");\n        }\n#if DEBUG\n        Console.WriteLine(\"\");//local check\n#endif\n    }\n}\nnamespace Geometry\n{\n    /// <summary>\n    /// ??????x,y??§?¨??????¨???(double???)\n    /// </summary>\n    public struct dPoint\n    {\n        public double x;\n        public double y;\n        public dPoint(int x, int y)\n        {\n            this.x = (double)x; this.y = (double)y;\n        }\n        public dPoint(double x, double y)\n        {\n            this.x = x; this.y = y;\n        }\n        public static dPoint operator +(dPoint p1, dPoint p2)\n        {\n            return new dPoint(p1.x + p2.x, p1.y + p2.y);\n        }\n        public static dPoint operator -(dPoint p1, dPoint p2)\n        {\n            return new dPoint(p1.x - p2.x, p1.y - p2.y);\n        }\n        public static dPoint operator *(double s, dPoint p)\n        {\n            return new dPoint(s * p.x, s * p.y);\n        }\n    }\n    /// <summary>\n    /// ??????x,y??§?¨??????¨???(int???)\n    /// </summary>\n    public struct Point\n    {\n        public int x;\n        public int y;\n        public Point(int x, int y)\n        {\n            this.x = x; this.y = y;\n        }\n        public static Point operator +(Point p1, Point p2)\n        {\n            return new Point(p1.x + p2.x, p1.y + p2.y);\n        }\n        public static Point operator -(Point p1, Point p2)\n        {\n            return new Point(p1.x - p2.x, p1.y - p2.y);\n        }\n        public static Point operator *(int s, Point p)\n        {\n            return new Point(s * p.x, s * p.y);\n        }\n    }\n\n    public static class GeometryLibrary\n    {\n\n\n        /// <summary>\n        /// ??????\n        /// </summary>\n        /// <returns></returns>\n        public static double Naiseki(dPoint p1, dPoint p2)\n        {\n            return p1.x * p2.x + p1.y * p2.y;\n        }\n        /// <summary>\n        /// ??????\n        /// </summary>\n        /// <returns></returns>\n        public static int Naiseki(Point p1, Point p2)\n        {\n            return p1.x * p2.x + p1.y * p2.y;\n        }\n        /// <summary>\n        /// ??´???p1,p2???????????????p????°???±\n        /// </summary>\n        /// <param name=\"p1\"></param>\n        /// <param name=\"p2\"></param>\n        /// <param name=\"p\"></param>\n        /// <returns></returns>\n        public static dPoint Projection(dPoint p1, dPoint p2, dPoint p)\n        {\n            dPoint a = p2 - p1;\n            dPoint b = p - p1;\n            double t = Naiseki(a, b) / Naiseki(a, a);\n            return t * a + p1;\n        }\n        /// <summary>\n        /// ??´???p1p2???????????????p???????°????p1,p2???????????´?????????????§°??????p????§????\n        /// </summary>\n        /// <param name=\"p1\"></param>\n        /// <param name=\"p2\"></param>\n        /// <param name=\"p\"></param>\n        /// <returns></returns>\n        public static dPoint Refrection(dPoint p1, dPoint p2, dPoint p)\n        {\n            return 2 * Projection(p1, p2, p) - p;\n        }\n\n        /// <summary>\n        /// p1p2??¨p3p4???2??´????????????\n        /// </summary>\n        /// <param name=\"p1\"></param>\n        /// <param name=\"p2\"></param>\n        /// <param name=\"p3\"></param>\n        /// <param name=\"p4\"></param>\n        /// <returns></returns>\n        public static bool IsParallel(Point p1, Point p2, Point p3, Point p4)\n        {\n            Point a = p2 - p1;\n            Point b = p4 - p3;\n            if (Naiseki(a, b) * Naiseki(a, b) == Naiseki(a, a) * Naiseki(b, b)) return true;\n            return false;\n        }\n        /// <summary>\n        ///  p1p2??¨p3p4???2??´???????????´\n        /// </summary>\n        /// <param name=\"p1\"></param>\n        /// <param name=\"p2\"></param>\n        /// <param name=\"p3\"></param>\n        /// <param name=\"p4\"></param>\n        /// <returns></returns>\n        public static bool IsVertical(Point p1, Point p2, Point p3, Point p4)\n        {\n            Point a = p2 - p1;\n            Point b = p4 - p3;\n            if (Naiseki(a, b) == 0) return true;\n            return false;\n        }\n        /// <summary>\n        ///  p1p2??¨p3p4???2????????????????????? ?????????http://www5d.biglobe.ne.jp/~tomoya03/shtml/algorithm/Intersection.htm\n        ///  ?????´?????????3????????¨????????´??????????????????????????????????????¨????????????\n        /// </summary>\n        /// <param name=\"p1\"></param>\n        /// <param name=\"p2\"></param>\n        /// <param name=\"p3\"></param>\n        /// <param name=\"p4\"></param>\n        /// <returns></returns>\n        public static bool DoesIntersect(Point p1, Point p2, Point p3, Point p4)\n        {\n            if (p1.x >= p2.x)\n                if ((p1.x < p3.x && p1.x < p4.x) || (p2.x > p3.x && p2.x > p4.x))\n                    return false;\n                else if ((p2.x < p3.x && p2.x < p4.x) || (p1.x > p3.x && p1.x > p4.x))\n                        return false;\n            if (p1.y >= p2.y)\n                if ((p1.y < p3.y && p1.y < p4.y) || (p2.y > p3.y && p2.y > p4.y))\n                    return false;\n                else if ((p2.y < p3.y && p2.y < p4.y) || (p1.y > p3.y && p1.y > p4.y))\n                        return false;\n            Point a = p1 - p2;\n            Point b = p3 - p1;\n            Point c = p4 - p1;\n            long tc = a.x * b.y + a.y * (-b.x);\n            long td = a.x * c.y + a.y * (-c.x);\n            Point d = p3 - p4;\n            Point e = p1 - p3;\n            Point f = p2 - p3;\n            long ta = d.x * e.y + d.y * (-e.x);\n            long tb = d.x * f.y + d.y * (-f.x);\n            if (tc * td < 0 && ta * tb < 0) return true;\n            return false;\n        }\n    }\n}"
  },
  {
    "language": "JavaScript",
    "code": "// Vector2d\nvar Vector2D = class Vector2D {\n\tconstructor(x,y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n}\n\nVector2D.prototype.Init = function(x,y){\n\tthis.x = x;\n\tthis.y = y;\n}\n\n/*\n * v: Vector2D\n */\nfunction rotateVector90(v){\n\tvar r = new Vector2D();\n\tr.x = -v.y;\n\tr.y = v.x;\n\treturn r;\n}\n\n/*\n * get degree to radian return radian\n */\nfunction getDegreeToRadian(degree){\n\tvar pi = 3.14159265358979323846;\n\treturn degree * pi / 180;\n}\n\n/*\n * vec:Vector2D return Vector2D\n */\nfunction getRotateVector(vec,degree){\n\tvar radian = getDegreeToRadian(degree);\n\n\tvar sin = Math.sin(radian);\n\tvar cos = Math.cos(radian);\n\n\tvar r = new Vector2D();\n\tr.x = vec.x * cos - vec.y * sin;\n\tr.y = vec.x * sin + vec.y * cos;\n\n\treturn r;\n}\n\nfunction isEqualVectors(a,b){\n\treturn equalFloats(a.x - b.x,0) && equalFloats(a.y - b.y,0);\n}\n\n/**\n * vec:Vector2D\n * \n * return unitVector\n */\nfunction getUnitVector(vec){\n\tvar length = getVectorLength2D(vec);\n\tif(length > 0){\n\t\treturn getDivideVector(vec,length);\n\t}\n\treturn vec;\n}\n\n/**\n * return vector length\n * \n * vec:Vector2D\n */\nfunction getVectorLength2D(vec){\n\treturn Math.sqrt((vec.x * vec.x) + (vec.y * vec.y));\n}\n\nfunction getDivideVector(vec2D,length){\n\tvec2D.x = vec2D.x / length;\n\tvec2D.y = vec2D.y / length;\n\treturn vec2D;\n}\n\nfunction equalFloats(a,b){\n\tvar threshold = 1 / 8192;\n\treturn Math.abs(a - b) < threshold;\n}\n\nfunction isParallelVector(vectorA,vectorB){\n\tvar na = rotateVector90(vectorA);\n\treturn equalFloats(0,dotProduct2D(na,vectorB));\n}\n\nfunction subtractVector(vecA,vecB){\n\tvar vec = new Vector2D();\n\tvec.x = vecA.x - vecB.x;\n\tvec.y = vecA.y - vecB.y;\n\treturn vec;\n}\n\nfunction dotProduct2D(vecA,vecB){\n\treturn vecA.x * vecB.x + vecA.y * vecB.y;\n}\n\n/**\n * line segment\n * \n * point1:Vector2D point2:Vector2D\n */\nvar LineSegment2D = class LineSegment2D {\n\tconstructor(point1,point2){\n\t\tthis.point1 = point1;\n\t\tthis.point2 = point2;\n\t}\n}\n\nLineSegment2D.prototype.Init = function(point1,point2){\n\tthis.point1 = point1;\n\tthis.point2 = point2;\n}\n\n/*\n * Line Object\n */\nfunction Line(){\n\t// vector2D\n\tthis.base;\n\t// vector2D\n\tthis.direction\n}\n\nLine.prototype.Init = function(base,direction,color){\n\tthis.base = base;\n\tthis.direction = direction;\n}\n\n\n\n/**\n * Range\n */\nvar Range = class Range {\n\tconstructor(min,max){\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t}\n}\n\nfunction getMaxMinRange(range1,range2){\n\tvar range = new Range();\n\trange.min = range1.min < range2.min ? range1.min : range2.min;\n\trange.max = range1.max < range2.max ? range2.max : range1.max;\n\treturn range;\n}\n\nfunction getSortRange(range){\n\tvar sorted = new Range(range.min,range.max);\n\tif(range.min > range.max){\n\t\tsorted.min = range.max;\n\t\tsorted.max = range.min;\n\t}\n\treturn sorted;\n}\n\nfunction getNegateVector(vector){\n\tvector.x = -vector.x;\n\tvector.y = -vector.y;\n\treturn vector;\n}\n\nfunction getAddVector(vecA,vecB){\n\treturn new Vector2D(vecA.x + vecB.x,vecA.y + vecB.y);\n}\n\n/**\n * segment:segment onto:Vector2D\n * \n * return Range\n */\nfunction getProjectSegment(segment,onto){\n\tvar ontoUnitVec = getUnitVector(onto);\n\n\tvar range = new Range();\n\trange.min = dotProduct2D(ontoUnitVec,segment.point1);\n\trange.max = dotProduct2D(ontoUnitVec,segment.point2);\n\n\trange = getSortRange(range);\n\treturn range;\n}\n\nfunction isOverLappingRanges(range1,range2){\n\treturn overLapping(range1.min,range1.max,range2.min,range2.max);\n}\n\nfunction projectVector(project,onto){\n\tvar d = dotProduct2D(onto,onto);\n\tconsole.log(\"d = \" + d);\n\n\tif(0 < d){\n\t    var dp = dotProduct2D(project,onto);\n\t    console.log(\"dp = \" + dp);\n\t    return multiplyVector(onto,dp / d);\n\t}\n\treturn onto;\n}\n\nfunction getNorm(vec){\n\treturn vec.x * vec.x + vec.y * vec.y;\n}\n\n/**\n * segment : LineSegment2D\n * point : Point\n */\nfunction getProjectVector(segment,point){\n\tvar vec1 = new Vector2D(segment.point2.x - segment.point1.x,segment.point2.y - segment.point1.y);\n\tvar vec2 = new Vector2D(point.x - segment.point1.x,point.y - segment.point1.y);\n\tvar rate = dotProduct2D(vec2,vec1) / getNorm(vec1);\n\tvar vec3 = multiplyVector(vec1,rate);\n\tvar project = new Vector2D(segment.point1.x + vec3.x,segment.point1.y + vec3.y);\n\treturn project; \n}\n\nfunction multiplyVector(vec,scalar){\n\tvar temp = new Vector2D();\n\ttemp.x = vec.x * scalar;\n\ttemp.y = vec.y * scalar;\n\treturn temp;\n}\n\nfunction clampOnRange(x,min,max){\n\tif(x < min){\n\t\treturn min;\n\t}else if(x > max){\n\t\treturn max;\n\t}else{\n\t\treturn x;\n\t}\n}\n\n/**\n * point class\n */\nvar Point2D = class Point2D {\n\tconstructor(x,y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\n//var input = require('fs').readFileSync('input.txt', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\t\nvar nums = Arr[0].split(\" \").map(Number);\nvar p1 = new Point2D(nums[0],nums[1]);\nvar p2 = new Point2D(nums[2],nums[3]);\nvar segment = new LineSegment2D(p1,p2);\n\n// 消す\nArr.shift();\nArr.shift();\n\nArr.forEach(function(v){\n   var x = (v.split(\" \"))[0] - 0;\n   var y = (v.split(\" \"))[1] - 0;\n   var p = new Vector2D(x,y);\n   var projection = getProjectVector(segment,p);\n   console.log(projection.x.toFixed(10) + \" \" + projection.y.toFixed(10));\n});\t\n\n"
  },
  {
    "language": "Ruby",
    "code": "def len(x, y)\n    Math.sqrt(x**2.0 + y**2.0)\nend \n\np0x, p0y, p1x, p1y = gets.chomp.split(' ').map &:to_i\nvx0 = p1x - p0x\nvy0 = p1y - p0y\nlv0 = len(vx0, vy0)\nnvx0 = vx0 / lv0\nnvy0 = vy0 / lv0\nn = gets.chomp.to_i\nn.times do\n    x, y = gets.chomp.split(' ').map &:to_i\n    vx = x - p0x\n    vy = y - p0y\n    lv = len(vx, vy)\n    c = (vx0 * vx + vy0 * vy) / (lv * lv0)\n    l = lv * c\n    puts \"%.10f %.10f\" % [(nvx0 * l), (nvy0 * l)]\nend"
  },
  {
    "language": "Ruby",
    "code": "x1, y1, x2, y2 = gets.chomp.split.map(&:to_f)\n\na = y2 - y1\nb = x2 - x1\na2 = a * a\nb2 = b * b\np = y1 - a / b * x1\n\ngets.to_i.times{\n    x, y = gets.chomp.split.map(&:to_f)\n\n    if a == 0\n        puts \"#{x} #{y1}\"\n    elsif b == 0\n        puts \"#{x1} #{y}\"\n    else\n        q = y + b / a * x\n        cx = a * b * (q - p) / (a2 + b2) \n        cy = (a2 * q + b2 * p) / (a2 + b2)\n        puts \"#{cx} #{cy}\"\n    end\n}\n"
  },
  {
    "language": "Ruby",
    "code": "x0, y0, x1, y1 = gets.split.map(&:to_i)\ngets.to_i.times do\n  x, y = gets.split.map(&:to_i)\n  ax = x1 - x0\n  ay = y1 - y0\n  px = x - x0\n  py = y - y0\n  # ?????????????????????\n  r = (ax * px + ay * py) / (ax * ax + ay * ay).to_f\n  puts [x0 + r * ax, y0 + r * ay] * ' '\nend"
  },
  {
    "language": "Ruby",
    "code": "x1, y1, x2, y2 = gets.split.map(&:to_f)\nvx = x2 - x1\nvy = y2 - y1\nrv = Math.sqrt(vx*vx+vy*vy)\n#normarize\nvx /= rv\nvy /= rv\nq = gets.to_i\nq.times{\n  x, y = gets.split.map(&:to_f)\n  rp1x = (x-x1)*vx+(y-y1)*vy\n  puts \"%.12f %.12f\" % [rp1x*vx + x1, rp1x*vy + y1]\n}"
  },
  {
    "language": "Ruby",
    "code": "def projecter(x, y, xp, yp)\n  return (xp * x + yp * y) / (x ** 2 + y ** 2)\nend\ndef main(input = STDIN)\n  x1, y1, x2, y2 = input.gets.split(\" \").map(&:to_r)\n  q = input.gets.to_i\n  x, y = (x2 - x1), (y2 - y1)\n  q.times do\n    a = projecter(x, y, *input.gets.split(\" \").map(&:to_r))\n    puts \"#{(x1 + a * x).to_f} #{(y1 + a * y).to_f}\"\n  end\nend\nmain"
  },
  {
    "language": "Ruby",
    "code": "# encoding: utf-8\n\nclass Point\n  attr_reader :x, :y\n  def initialize(x = 0, y = 0)\n    @x, @y = x, y\n  end\n\n  def + o\n    Point.new(@x + o.x, @y + o.y)\n  end\n\n  def - o\n    Point.new(@x - o.x, @y - o.y)\n  end\n\nend\n\nclass Vector\n  attr_reader :a, :b\n\n  def initialize(a = 0, b = 0)\n    @a, @b = a, b\n    @a = 0.0 if sign(@a) == 0\n    @b = 0.0 if sign(@b) == 0\n  end\n\n  def + o\n    Vector.new(@a + o.a, @b + o.b)\n  end\n\n  def - o\n    Vector.new(@a - o.a, @b - o.b)\n  end\n\n  def cross o\n    @a * o.b - @b * o.a\n  end\n\n  def len\n    Math.sqrt(a ** 2 + b ** 2)\n  end\n\n  def output\n    puts (\"%.10f\" % a) + \" \" + (\"%.10f\" % b)\n  end\nend\n\ndef sign(x)\n  x < 1e-6 ? -1 : (x > 1e-6 ? 1: 0)\nend\n\ndef main\n  xp0, yp0, xp1, yp1 = gets.chomp.split(/\\s/).collect { |x| x.to_f}\n  q = gets.chomp.to_i\n  (1..q).each do |ca|\n    xp2, yp2 = gets.chomp.split(/\\s/).collect { |x| x.to_f}\n    v1 = Vector.new(xp1 - xp0, yp1 - yp0)\n    v2 = Vector.new(xp2 - xp0, yp2 - yp0)\n    v3 = Vector.new(xp2 - xp1, yp2 - yp1)\n    a, b, c = v1.len, v2.len, v3.len\n    theta = Math.acos((a ** 2 + b ** 2 - c ** 2) / (2 * a * b))\n    rate = b * Math.cos(theta) / a\n    t = Vector.new(xp0 + rate * (xp1 - xp0),\n                   yp0 + rate * (yp1 - yp0))\n    t.output\n  end\nend\n\nmain"
  },
  {
    "language": "Ruby",
    "code": "require 'matrix'\nx1, y1, x2, y2 = gets.split.map &:to_i\nu = Vector[x1, y1]\nv = Vector[x2, y2]\nn = gets.to_i\nn.times {\n    w = Vector[*gets.split.map(&:to_i)]\n    a = v - u\n    b = w - u\n    x = u + a * a.inner_product(b) / a.r ** 2\n    puts \"#{x[0]} #{x[1]}\"\n}"
  },
  {
    "language": "Ruby",
    "code": "\nrequire 'complex'\n\n# Complex * Complex -> Double                                                                                        \n\ndef dot(c1, c2)\n  (c1.conj * c2).real\nend\n\ndef cross(c1, c2)\n  (c1.conj * c2).imag\nend\n\ndef main\n  xp0, yp0, xp1, yp1 = gets.chomp.split(/\\s/).collect { |x| x.to_f}\n  q = gets.chomp.to_i\n  (1..q).each do |ca|\n    p0 = Complex(xp0, yp0)\n    p1 = Complex(xp1, yp1)\n    x, y = gets.chomp.split(/\\s/).collect { |x| x.to_f}\n    p = Complex(x, y)\n    t = (p1 - p0) * dot(p1 - p0, p - p0)/((p1 - p0).abs ** 2) + p0\n    puts (\"%.9f\" % t.real) + \" \" + (\"%.9f\" % t.imag)\n  end\nend\n\nmain"
  },
  {
    "language": "Ruby",
    "code": "x1, y1, x2, y2 = gets.split.map(&:to_f)\nvx = x2 - x1\nvy = y2 - y1\nrv = Math.sqrt(vx*vx+vy*vy)\n#normarize\nvx /= rv\nvy /= rv\nq = gets.to_i\nq.times{\n  x, y = gets.split.map(&:to_f)\n  rp1x = (x-x1)*vx+(y-y1)*vy\n  puts \"%.12f %.12f\" % [rp1x*vx, rp1x*vy]\n}"
  },
  {
    "language": "Ruby",
    "code": "require 'matrix'\np1x, p1y, p2x, p2y = gets.split.map &:to_i\np1 = Vector[ p1x, p1y ]\np1p2 = Vector[ p2x - p1x, p2y - p1y ]\nq = gets.to_i\nq.times do\n  px, py = gets.split.map &:to_i\n  p1p = Vector[ px - p1x, py - p1y ]\n  p1t_norm = p1p.inner_product(p1p2) / p1p2.norm\n  t = p1 + p1p2 * ( p1t_norm / p1p2.norm )\n  puts \"%.8f %.8f\" % [ t[0], t[1] ] \nend"
  },
  {
    "language": "Ruby",
    "code": "def projecter(x, y, xp, yp)\n  return (xp * x + yp * y) / (x ** 2 + y ** 2)\nend\ndef main(input = STDIN)\n  x1, y1, x2, y2 = input.gets.split(\" \").map(&:to_r)\n  q = input.gets.to_i\n  x, y = (x2 - x1), (y2 - y1)\n  q.times do\n    xp, yp = input.gets.split(\" \").map(&:to_r)\n    a = projecter(x, y, xp - x1, yp - y1)\n    puts \"#{(x1 + a * x).to_f} #{(y1 + a * y).to_f}\"\n  end\nend\nmain"
  },
  {
    "language": "Ruby",
    "code": "# encoding: utf-8\n\nclass Point\n  attr_reader :x, :y\n  def initialize(x = 0, y = 0)\n    @x, @y = x, y\n  end\n\n  def + o\n    Point.new(@x + o.x, @y + o.y)\n  end\n\n  def - o\n    Point.new(@x - o.x, @y - o.y)\n  end\n\nend\n\nclass Vector\n  attr_reader :a, :b\n\n  def initialize(a = 0, b = 0)\n    @a, @b = a, b\n    @a = 0.0 if sign(@a) == 0\n    @b = 0.0 if sign(@b) == 0\n  end\n\n  def + o\n    Vector.new(@a + o.a, @b + o.b)\n  end\n\n  def - o\n    Vector.new(@a - o.a, @b - o.b)\n  end\n\n  def cross o\n    @a * o.b - @b * o.a\n  end\n\n  def len\n    Math.sqrt(a ** 2 + b ** 2)\n  end\n\n  def output\n    puts (\"%.10f\" % a) + \" \" + (\"%.10f\" % b)\n  end\nend\n\ndef sign(x)\n  x < 1e-6 ? -1 : (x > 1e-6 ? 1: 0)\nend\n\ndef cos_theory(a, b, c)\n  t = (a ** 2 + b ** 2 - c ** 2) / (2 * a * b)\n  t = 1.0 if sign(t - 1.0) == 0\n  t = -1.0 if sign(t + 1.0) == 0\n  Math.acos(t)\nend\n\ndef main\n  xp0, yp0, xp1, yp1 = gets.chomp.split(/\\s/).collect { |x| x.to_f}\n  q = gets.chomp.to_i\n  (1..q).each do |ca|\n    xp2, yp2 = gets.chomp.split(/\\s/).collect { |x| x.to_f}\n    v1 = Vector.new(xp1 - xp0, yp1 - yp0)\n    v2 = Vector.new(xp2 - xp0, yp2 - yp0)\n    v3 = Vector.new(xp2 - xp1, yp2 - yp1)\n    a, b, c = v1.len, v2.len, v3.len\n    theta = cos_theory(a, b, c)\n    rate = b * Math.cos(theta) / a\n    t = Vector.new(xp0 + rate * (xp1 - xp0),\n                   yp0 + rate * (yp1 - yp0))\n    t.output\n  end\nend\n\nmain"
  },
  {
    "language": "Ruby",
    "code": "require 'complex'\n\n# Complex * Complex -> Double                                                                                        \n\ndef dot(c1, c2)\n  (c1.conj * c2).real\nend\n\ndef cross(c1, c2)\n  (c1.conj * c2).imag\nend\n\n# Complex * Complex * Complex -> Complex                                                                             \n# return the proj of vector p0p to vector p0p1                                                                       \ndef proj(p0, p1, p)\n  (p1 - p0) * dot(p1 - p0, p - p0) / ((p1 - p0).abs ** 2) + p0\nend\n\ndef main\n  xp0, yp0, xp1, yp1 = gets.chomp.split(/\\s/).collect { |x| x.to_f}\n  q = gets.chomp.to_i\n  (1..q).each do |ca|\n    p0 = Complex(xp0, yp0)\n    p1 = Complex(xp1, yp1)\n    x, y = gets.chomp.split(/\\s/).collect { |x| x.to_f}\n    p = Complex(x, y)\n    t = proj(p0, p1, p)\n    puts (\"%.9f\" % t.real) + \" \" + (\"%.9f\" % t.imag)\n  end\nend\n\nmain"
  },
  {
    "language": "Ruby",
    "code": "# encoding: utf-8\n\nclass Point\n  attr_reader :x, :y\n  def initialize(x = 0, y = 0)\n    @x, @y = x, y\n  end\n\n  def + o\n    Point.new(@x + o.x, @y + o.y)\n  end\n\n  def - o\n    Point.new(@x - o.x, @y - o.y)\n  end\n\nend\n\nclass Vector\n  attr_reader :a, :b\n\n  def initialize(a = 0, b = 0)\n    @a, @b = a, b\n    @a = 0.0 if sign(@a) == 0\n    @b = 0.0 if sign(@b) == 0\n  end\n\n  def + o\n    Vector.new(@a + o.a, @b + o.b)\n  end\n\n  def - o\n    Vector.new(@a - o.a, @b - o.b)\n  end\n\n  def cross o\n    @a * o.b - @b * o.a\n  end\n\n  def len\n    Math.sqrt(a ** 2 + b ** 2)\n  end\n\n  def output\n    puts (\"%.10f\" % a) + \" \" + (\"%.10f\" % b)\n  end\nend\n\ndef sign(x)\n  x < 1e-6 ? -1 : (x > 1e-6 ? 1: 0)\nend\n\ndef cos_theory(a, b, c)\n  t = (a ** 2 + b ** 2 - c ** 2) / (2 * a * b)\n  t = 1.0 if sign(t - 1.0) == 0\n  t = -1.0 if sign(t + 1.0) == 0\n  Math.acos(t)\nend\n\ndef main\n  xp0, yp0, xp1, yp1 = gets.chomp.split(/\\s/).collect { |x| x.to_f}\n  q = gets.chomp.to_i\n  (1..q).each do |ca|\n    xp2, yp2 = gets.chomp.split(/\\s/).collect { |x| x.to_f}\n    v1 = Vector.new(xp1 - xp0, yp1 - yp0)\n    v2 = Vector.new(xp2 - xp0, yp2 - yp0)\n    v3 = Vector.new(xp2 - xp1, yp2 - yp1)\n    a, b, c = v1.len, v2.len, v3.len\n    if sign(a) == 0 or sign(b) == 0\n      puts (\"%.10f\" % xp0) + \" \" + (\"%.10f\" % b)\n    else\n      theta = cos_theory(a, b, c)\n      rate = b * Math.cos(theta) / a\n      t = Vector.new(xp0 + rate * (xp1 - xp0),\n                     yp0 + rate * (yp1 - yp0))\n      t.output\n    end\n  end\nend\n\nmain"
  },
  {
    "language": "Ruby",
    "code": "class Point\n  attr_accessor :x, :y\n  def initialize(x, y)\n    @x = x\n    @y = y\n  end\n\n  def +(p)\n    Point.new(@x + p.x, @y + p.y)\n  end\n\n  def -(p)\n    Point.new(@x - p.x, @y - p.y)\n  end\n\n  def *(k)\n    Point.new(@x * k, @y * k)\n  end\n\n  def to_s\n    \"#{@x} #{@y}\"\n  end\nend\n\ndef dot(a, b)\n  a.x * b.x + a.y * b.y\nend\n\ndef cross(a, b)\n  a.x * b.y - a.y * b.x\nend\n\ndef norm(a)\n  a.x * a.x + a.y * a.y\nend\n\nSegment = Struct.new('Segment', :p1, :p2)\n\ndef project(s, p)\n  base = s.p2 - s.p1\n  r = dot(p - s.p1, base).to_f / norm(base)\n  s.p1 + base * r\nend\n\nx0, y0, x1, y1 = gets.split.map(&:to_i)\np0 = Point.new(x0, y0)\np1 = Point.new(x1, y1)\nbase = Segment.new(p0, p1)\n\nn = gets.to_i\nn.times do\n  x, y = gets.split.map(&:to_i)\n  p = Point.new(x, y)\n  puts project(base, p).to_s\nend\n"
  },
  {
    "language": "Ruby",
    "code": "x1, y1, x2, y2 = gets.split.map(&:to_f)\nux = x2 - x1\nuy = y2 - y1\nd = ux**2 + uy**2\ngets.to_i.times do\n  x, y = gets.split.map(&:to_f)\n  vx, vy = x - x1, y - y1\n  k = (vx * ux + vy * uy) / d\n  puts '%.8f %.8f' % [x1 + k * ux, y1 + k * uy]\nend"
  },
  {
    "language": "Ruby",
    "code": "def len(x, y)\n    Math.sqrt(x**2.0 + y**2.0)\nend \n\np0x, p0y, p1x, p1y = gets.chomp.split(' ').map &:to_f\nvx0 = p1x - p0x\nvy0 = p1y - p0y\nlv0 = len(vx0, vy0)\nnvx0 = vx0 / lv0\nnvy0 = vy0 / lv0\nn = gets.chomp.to_i\nn.times do\n    x, y = gets.chomp.split(' ').map &:to_f\n    vx = x - p0x\n    vy = y - p0y\n    lv = len(vx, vy)\n    \n    c = (vx0 * vx + vy0 * vy) / (lv * lv0)\n    l = lv * unless c.nan? then c else 1.0 end\n    puts \"%.10f %.10f\" % [(p0x + nvx0 * l), (p0y + nvy0 * l)]\nend"
  },
  {
    "language": "Ruby",
    "code": "def len(x, y)\n    Math.sqrt(x**2.0 + y**2.0)\nend \n\np0x, p0y, p1x, p1y = gets.chomp.split(' ').map &:to_i\nvx0 = p1x - p0x\nvy0 = p1y - p0y\nlv0 = len(vx0, vy0)\nnvx0 = vx0 / lv0\nnvy0 = vy0 / lv0\nn = gets.chomp.to_i\nn.times do\n    x, y = gets.chomp.split(' ').map &:to_i\n    vx = x - p0x\n    vy = y - p0y\n    lv = len(vx, vy)\n    c = (vx0 * vx + vy0 * vy) / (lv * lv0)\n    l = lv * unless c.nan? then c else 1.0 end\n    puts \"%.10f %.10f\" % [(nvx0 * l), (nvy0 * l)]\nend"
  },
  {
    "language": "Ruby",
    "code": "require 'matrix'\np1x, p1y, p2x, p2y = gets.split.map &:to_i\np1 = Vector[ p1x, p1y ]\np1p2 = Vector[ p2x - p1x, p2y - p1y ]\nq = gets.to_i\nq.times do\n  px, py = gets.split.map &:to_i\n  p1p = Vector[ px - p1x, py - p1y ]\n  p1t_norm = p1p.innter_product(p1p2) / p1p2.norm\n  t = p1 + p1p2 * ( p1t_norm / p1p2.norm )\n  puts \"%.8f %.8f\" % [ t[0], t[1] ] \nend"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n)\n\nvar scanner = bufio.NewScanner(os.Stdin)\n\nfunc nextString() string {\n\tscanner.Scan()\n\treturn scanner.Text()\n}\n\nfunc nextInt() int {\n\tn, err := strconv.Atoi(nextString())\n\tif err != nil {\n\t\tfmt.Printf(\"strconv.Atoi failed: %v\\n\", err)\n\t}\n\treturn n\n}\n\nfunc nextFloat64() (float64, error) {\n\treturn strconv.ParseFloat(nextString(), 64)\n}\n\nfunc norm2(x, y float64) float64 {\n\treturn x*x + y*y\n}\n\nfunc main() {\n\tscanner.Split(bufio.ScanWords)\n\n\tp1x, _ := nextFloat64()\n\tp1y, _ := nextFloat64()\n\tp2x, _ := nextFloat64()\n\tp2y, _ := nextFloat64()\n\n\tintercept := 0.0\n\tif p1x == p2x {\n\t\tintercept = 0\n\t} else {\n\t\tintercept = (p2x*p1y - p1x*p2y) / (p2x - p1x)\n\t}\n\tp1y -= intercept\n\tp2y -= intercept\n\n\tnorm2 := norm2(p1x-p2x, p1y-p2y)\n\n\tnQueries := nextInt()\n\tfor i := 0; i < nQueries; i++ {\n\t\tp3x, _ := nextFloat64()\n\t\tp3y, _ := nextFloat64()\n\t\tp3y -= intercept\n\n\t\tdot := (p2x-p1x)*p3x + (p2y-p1y)*p3y\n\t\t// fmt.Println(dot, norm2)\n\t\tfmt.Println(dot*(p2x-p1x)/norm2, dot*(p2y-p1y)/norm2+intercept)\n\t}\n}\n\n"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"strings\"\n\t\"fmt\"\n\t\"bufio\"\n\t\"strconv\"\n\t\"os\"\n)\n\n// print\nfunc p(input interface{}) {\n\tfmt.Println(input)\n}\n\n// test\nfunc Test_solve() {\n\tinput := `\n\n0 0 2 0\n3\n-1 1\n0 1\n1 1\n`\n\tinput = strings.Trim(input, \"\\n\")\n\n\tsolve(bufio.NewScanner(strings.NewReader(input)))\n}\n\nfunc projection(p1, p2, p []float64) []float64 {\n\t// p - p1\n\tv1 := []float64{\n\t\tp[0] - p1[0],\n\t\tp[1] - p1[1],\n\t}\n\t// p2 - p1\n\tv2 := []float64{\n\t\tp2[0] - p1[0],\n\t\tp2[1] - p1[1],\n\t}\n\n\tdot := v1[0]*v2[0] + v1[1]*v2[1]\n\t// cross := v1[0]*v2[1] - v1[1]*v2[0]\n\tnormal := v2[0] * v2[0] + v2[1] * v2[1]\n\n\ta := dot / normal\n\n\tresult := []float64{\n\t\tp1[0] + v2[0] * a,\n\t\tp1[1] + v2[1] * a,\n\t}\n\treturn result\n}\n\nfunc reflection(p1, p2, p []float64) []float64 {\n\tprj := projection(p1, p2, p)\n\t// p - p1\n\tv1 := []float64{\n\t\tp[0] - p1[0],\n\t\tp[1] - p1[1],\n\t}\n\n\t// p to reflection\n\ttoCrossPoint := []float64{\n\t\t2 * (prj[0] - v1[0]),\n\t\t2 * (prj[1] - v1[1]),\n\t}\n\n\tresult := []float64{\n\t\tp[0] + toCrossPoint[0],\n\t    p[1] + toCrossPoint[1],\n\t}\n\n\treturn result\n}\n\n// solve\nfunc solve(sc *bufio.Scanner) {\n\tsc.Scan()\n\telements := strings.Split(sc.Text(), \" \")\n\n\tn := len(elements)\n\tp1p2 := make([]float64, n)\n\tfor i := 0; i < n; i++ {\n\t\t// @hack: not good xD\n\t\tpInt, _ := strconv.Atoi(elements[i])\n\t\tp1p2[i] = float64(pInt)\n\t}\n\n\tsc.Scan()\n\tn, _ = strconv.Atoi(sc.Text())\n\n\tfor i := 0; i < n; i++ {\n\t\tsc.Scan()\n\t\tpElms := strings.Split(sc.Text(), \" \")\n\t\tpp := make([]float64, 2)\n\n\t\t// @hack not cool XD\n\t\tv, _ := strconv.Atoi(pElms[0])\n\t\tpp[0] = float64(v)\n\t\tv, _ = strconv.Atoi(pElms[1])\n\t\tpp[1] = float64(v)\n\n\t\tresult := projection(p1p2[:2], p1p2[2:], pp)\n\t\tfmt.Printf(\"%.10f %.10f\", result[0], result[1])\n\n\t\tif i < n - 1 {\n\t\t\tfmt.Println()\n\t\t}\n\t}\n}\n\n// main\nfunc main() {\n    solve(bufio.NewScanner(os.Stdin))\n}\n\n"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"math/cmplx\"\n\t\"os\"\n\t\"strconv\"\n)\n\nfunc getScanner(fp *os.File) *bufio.Scanner {\n\tscanner := bufio.NewScanner(fp)\n\tscanner.Split(bufio.ScanWords)\n\tscanner.Buffer(make([]byte, 1000005), 1000005)\n\treturn scanner\n}\nfunc getNextString(scanner *bufio.Scanner) string {\n\tscanner.Scan()\n\treturn scanner.Text()\n}\nfunc getNextInt(scanner *bufio.Scanner) int {\n\ti, _ := strconv.Atoi(getNextString(scanner))\n\treturn i\n}\nfunc getNextInt64(scanner *bufio.Scanner) int64 {\n\ti, _ := strconv.ParseInt(getNextString(scanner), 10, 64)\n\treturn i\n}\nfunc getNextUint64(scanner *bufio.Scanner) uint64 {\n\ti, _ := strconv.ParseUint(getNextString(scanner), 10, 64)\n\treturn i\n}\nfunc getNextFloat64(scanner *bufio.Scanner) float64 {\n\ti, _ := strconv.ParseFloat(getNextString(scanner), 64)\n\treturn i\n}\nfunc main() {\n\tfp := os.Stdin\n\twfp := os.Stdout\n\tcnt := 0\n\tif os.Getenv(\"MASPY\") == \"ますピ\" {\n\t\tfp, _ = os.Open(os.Getenv(\"BEET_THE_HARMONY_OF_PERFECT\"))\n\t\tcnt = 3\n\t}\n\tif os.Getenv(\"MASPYPY\") == \"ますピッピ\" {\n\t\twfp, _ = os.Create(os.Getenv(\"NGTKANA_IS_GENIUS10\"))\n\t}\n\tscanner := getScanner(fp)\n\twriter := bufio.NewWriter(wfp)\n\tsolve(scanner, writer)\n\tfor i := 0; i < cnt; i++ {\n\t\tfmt.Fprintln(writer, \"-----------------------------------\")\n\t\tsolve(scanner, writer)\n\t}\n\twriter.Flush()\n}\nfunc solve(scanner *bufio.Scanner, writer *bufio.Writer) {\n\tx1 := getNextFloat64(scanner)\n\ty1 := getNextFloat64(scanner)\n\tx2 := getNextFloat64(scanner)\n\ty2 := getNextFloat64(scanner)\n\n\tv := complex(x2-x1, y2-y1)\n\t_, th := cmplx.Polar(v)\n\tq := getNextInt(scanner)\n\tfor i := 0; i < q; i++ {\n\t\tx := getNextFloat64(scanner) - x1\n\t\ty := getNextFloat64(scanner) - y1\n\t\tvv := rotate(complex(x, y), -th)\n\t\tans := rotate(complex(real(vv), 0), th)\n\t\tfmt.Fprintln(writer, fmt.Sprintf(\"%.10f %.10f\", real(ans)+x1, imag(ans)+y1))\n\t}\n}\n\nfunc rotate(v complex128, theta float64) complex128 {\n\tr, th := cmplx.Polar(v)\n\tth += theta\n\treturn cmplx.Rect(r, th)\n}\n\n"
  },
  {
    "language": "Go",
    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nconst EPS float64 = 1e-8\n\nfunc add(a float64, b float64) float64 {\n\tif math.Abs(a+b) < EPS*(math.Abs(a)+math.Abs(b)) {\n\t\treturn 0.0\n\t}\n\treturn a + b\n}\n\ntype Point struct {\n\tX, Y float64\n}\n\nfunc (p Point) Add(q Point) Point {\n\treturn Point{add(p.X, q.X), add(p.Y, q.Y)}\n}\n\nfunc (p Point) Sub(q Point) Point {\n\treturn Point{add(p.X, -q.X), add(p.Y, -q.Y)}\n}\n\nfunc (p Point) Mul(d float64) Point {\n\treturn Point{p.X * d, p.Y * d}\n}\n\nfunc (p Point) Dot(q Point) float64 {\n\treturn p.X*q.X + p.Y*q.Y\n}\n\ntype Line struct {\n\tA, B Point\n}\n\nfunc (l Line) Project(p Point) Point {\n\tbase := l.B.Sub(l.A)\n\tt := (p.Sub(l.A)).Dot(base) / base.Dot(base)\n\treturn base.Mul(t).Add(l.A)\n}\n\nfunc main() {\n\tvar line Line\n\tvar q int\n\tvar point Point\n\tfmt.Scan(&line.A.X, &line.A.Y, &line.B.X, &line.B.Y)\n\tfmt.Scan(&q)\n\tfor i := 0; i < q; i++ {\n\t\tfmt.Scan(&point.X, &point.Y)\n\t\tresult := line.Project(point)\n\t\tfmt.Printf(\"%.8f %.8f\\n\", result.X, result.Y)\n\t}\n}\n\n"
  },
  {
    "language": "OCaml",
    "code": "let to_z x = if x = -0. then 0. else x;;\nlet read_str u = read_line u |> Str.split (Str.regexp_string \" \")\n           |> List.map (fun x-> float_of_string x) |> List.nth;;\nlet () =\n  let fl = read_str () in\n  let x0, y0, x1, y1 = fl 0, fl 1, fl 2, fl 3 and\n      n = read_int () in\n  let rec read i =\n    let fl2 = read_str () in\n    let x2, y2 = fl2 0, fl2 1 in\n    let p1_sqr = ( (x1-.x0)**2. +. (y1-.y0)**2. ) and\n        in_p = ((x1-.x0)*.(x2-.x0)+.(y1-.y0)*.(y2-.y0)) in\n    let xt,yt = in_p*.(x1-.x0)/.p1_sqr,in_p*.(y1-.y0)/.p1_sqr in\n    Printf.printf \"%.10f %.10f\\n\" xt yt;\n    if i > 0 then read (i-1)\n  in read (n-1);;"
  },
  {
    "language": "OCaml",
    "code": "module Point = struct\n\n  type t = { x : float; y : float }\n\n  let make x y = { x; y }\n\n  let sum a b = { x = a.x +. b.x; y = a.y +. b.y }\n\n  let diff a b = { x = a.x -. b.x; y = a.y -. b.y }\n\n  let multi p k = { x = p.x *. k; y = p.y *. k }\n\n  let norm p = p.x *. p.x +. p.y *. p.y\n\n  let dot a b = a.x *. b.x +. a.y *. b.y\n\n  let project p1 p2 p =\n    let base = diff p2 p1 in\n    dot (diff p p1) base /. norm base\n    |> multi base\n    |> sum p1\n\nend\n\nopen Point\n\nlet () =\n  let x1, y1, x2, y2 = Scanf.scanf \"%f %f %f %f \" (fun a b c d -> a,b,c,d) in\n  let p1 = make x1 y1 in\n  let p2 = make x2 y2 in\n  let q = Scanf.scanf \"%d \" (fun i -> i) in\n  for _ = 0 to q - 1 do\n    let x, y = Scanf.scanf \"%f %f \" (fun x y -> x,y) in\n    let p = make x y |> project p1 p2 in\n    Printf.printf \"%.10f %.10f\\n\" p.x p.y\n  done"
  },
  {
    "language": "OCaml",
    "code": "let to_z x = if x = -0. then 0. else x;;\nlet read_str u = read_line u |> Str.split (Str.regexp_string \" \")\n           |> List.map (fun x-> float_of_string x) |> List.nth;;\nlet () =\n  let fl = read_str () in\n  let x0, y0, x1, y1 = fl 0, fl 1, fl 2, fl 3 and\n      n = read_int () in\n  let p1_proj = (x1 -.x0) and in_proj = (x1 *. x1 +. y1 *. y0) in\n  let rec read i =\n    let fl2 = read_str () in\n    let x2, y2 = fl2 0, fl2 1 in\n    let p1_sqr = ( (x1-.x0)**2. +. (y1-.y0)**2. ) and in_p = (x1*.x2+.y1*.y2) in\n    let xt = (in_p*.in_proj/.(p1_sqr*.p1_proj)) and\n        yt = ( in_p *. sqrt(p1_sqr *. (p1_proj**2.) -. in_proj**2. )/.(p1_sqr*.p1_proj)) in\n    Printf.printf \"%f %f\\n\" (to_z xt) (to_z yt);\n    if i > 0 then read (i-1)\n  in read (n-1);;"
  },
  {
    "language": "OCaml",
    "code": "module Point = struct\n\n  type t = { x : float; y : float }\n\n  let make x y = { x; y }\n\n  let equal a b = abs_float (a.x -. b.x) < 1e-10 && abs_float (a.y -. b.y) < 1e-10\n\n  let sum a b = { x = a.x +. b.x; y = a.y +. b.y }\n\n  let diff a b = { x = a.x -. b.x; y = a.y -. b.y }\n\n  let multi p k = { x = p.x *. k; y = p.y *. k }\n\n  let div p k = { x = p.x /. k; y = p.y /. k }\n\n  let norm p = p.x *. p.x +. p.y *. p.y\n\n  let abs p = norm p |> sqrt\n\n  let dot a b = a.x *. b.x +. a.y *. b.y\n\n  let cross a b = a.x *. b.y -. a.y *. b.x\n\n  let project p1 p2 p =\n    let base = diff p2 p1 in\n    dot (diff p p1) base /. norm base\n    |> multi base\n    |> sum p1\n\nend\n\nmodule IO = struct\n\n  (* @since 4.04.0 *)\n  let split_on_char sep s =\n    let open String in\n    let r = ref [] in\n    let j = ref (length s) in\n    for i = length s - 1 downto 0 do\n      if get s i = sep then begin\n        r := sub s (i + 1) (!j - i - 1) :: !r;\n        j := i\n      end\n    done;\n    sub s 0 !j :: !r\n\n  let read_ns () = read_line () |> split_on_char ' ' |> List.map float_of_string\n\nend\n\nopen Point\n\nlet () =\n  match IO.read_ns () with\n  | xp1 :: yp1 :: xp2 :: yp2 :: _ ->\n    begin\n      let p1 = make xp1 yp1 in\n      let p2 = make xp2 yp2 in\n      let q = read_int () in\n      for _ = 0 to q - 1 do\n        match IO.read_ns () with\n        | x :: y :: _ ->\n          let p = make x y |> project p1 p2 in\n          Printf.printf \"%.10f %.10f\\n\" p.x p.y\n        | _ -> assert false\n      done\n    end\n  | _ -> assert false"
  },
  {
    "language": "OCaml",
    "code": "module Point = struct\n\n  type t = { x : float; y : float }\n\n  let make x y = { x; y }\n\n  let equal a b = abs_float (a.x -. b.x) < 1e-10 && abs_float (a.y -. b.y) < 1e-10\n\n  let sum a b = { x = a.x +. b.x; y = a.y +. b.y }\n\n  let diff a b = { x = a.x -. b.x; y = a.y -. b.y }\n\n  let multi p k = { x = p.x *. k; y = p.y *. k }\n\n  let div p k = { x = p.x /. k; y = p.y /. k }\n\n  let norm p = p.x *. p.x +. p.y *. p.y\n\n  let abs p = norm p |> sqrt\n\n  let dot a b = a.x *. b.x +. a.y *. b.y\n\n  let cross a b = a.x *. b.y -. a.y *. b.x\n\n  let project p1 p2 p =\n    let base = diff p2 p1 in\n    dot (diff p p1) base /. norm base\n    |> multi base\n    |> sum p1\n\nend\n\nmodule IO = struct\n\n  (* @since 4.04.0 *)\n  let split_on_char sep s =\n    let open String in\n    let r = ref [] in\n    let j = ref (length s) in\n    for i = length s - 1 downto 0 do\n      if get s i = sep then begin\n        r := sub s (i + 1) (!j - i - 1) :: !r;\n        j := i\n      end\n    done;\n    sub s 0 !j :: !r\n\n  let read_ns () = read_line () |> split_on_char ' ' |> List.map float_of_string\n\nend\n\nopen Point\n\nlet () =\n  match IO.read_ns () with\n  | xp1 :: yp1 :: xp2 :: yp2 :: _ ->\n    begin\n      let p1 = make xp1 yp1 in\n      let p2 = make xp2 yp2 in\n      let q = read_int () in\n      for _ = 0 to q - 1 do\n        match IO.read_ns () with\n        | x :: y :: _ ->\n          let p = make x y |> project p1 p2 in\n          Printf.printf \"%f %f\\n\" p.x p.y\n        | _ -> assert false\n      done\n    end\n  | _ -> assert false"
  },
  {
    "language": "OCaml",
    "code": "let to_z x = if x = -0. then 0. else x;;\nlet read_str u = read_line u |> Str.split (Str.regexp_string \" \")\n           |> List.map (fun x-> float_of_string x) |> List.nth;;\nlet () =\n  let fl = read_str () in\n  let x0, y0, x1, y1 = fl 0, fl 1, fl 2, fl 3 and\n      n = read_int () in\n  let p1_proj = (x1 -.x0) and in_proj = (x1 *. x1 +. y1 *. y0) in\n  let rec read i =\n    let fl2 = read_str () in\n    let x2, y2 = fl2 0, fl2 1 in\n    let p1_sqr = ( (x1-.x0)**2. +. (y1-.y0)**2. ) and in_p = (x1*.x2+.y1*.y2) in\n    let dnm = p1_sqr*.p1_proj in\n    let xt,yt = if dnm = 0. then 0., y2\n                else\n                  (in_p*.in_proj/.dnm), ( in_p *. sqrt(p1_sqr *. (p1_proj**2.) -. in_proj**2. )/. dnm) in\n    Printf.printf \"%f %f\\n\" xt yt;\n    if i > 0 then read (i-1)\n  in read (n-1);;"
  },
  {
    "language": "OCaml",
    "code": "let to_z x = if x = -0. then 0. else x;;\n\nlet () =\n  let (x0,y0,x1,y1) = Scanf.scanf \"%f %f %f %f\\n\" ( fun x0 y0 x1 y1 -> (x0,y0,x1,y1) ) and\n      n = read_int () in\n  let p1_proj = (x1 -.x0) and in_proj = (x1 *. x1 +. y1 *. y0) in\n  let rec read i =\n    let (x2,y2) = Scanf.scanf \"%f %f\\n\" (fun x2 y2 -> (x2,y2)) in\n    let p1_sqr = ( (x1-.x0)**2. +. (y1-.y0)**2. ) and in_p = (x1*.x2+.y1*.y2) in\n    let xt = (in_p*.in_proj/.(p1_sqr*.p1_proj)) and\n        yt = ( in_p *. sqrt(p1_sqr *. (p1_proj**2.) -. in_proj**2. )/.(p1_sqr*.p1_proj)) in\n    Printf.printf \"%f %f\\n\" (to_z xt) (to_z yt);\n    if i > 0 then read (i-1)\n  in read (n-1);;"
  },
  {
    "language": "OCaml",
    "code": "let to_z x = if x = -0. then 0. else x;;\nlet read_str u = read_line u |> Str.split (Str.regexp_string \" \")\n           |> List.map (fun x-> float_of_string x) |> List.nth;;\nlet () =\n  let fl = read_str () in\n  let x0, y0, x1, y1 = fl 0, fl 1, fl 2, fl 3 and\n      n = read_int () in\n  let rec read i =\n    let fl2 = read_str () in\n    let x2, y2 = fl2 0, fl2 1 in\n    let p1_sqr = ( (x1-.x0)**2. +. (y1-.y0)**2. ) and\n        in_p = ((x1-.x0)*.(x2-.x0)+.(y1-.y0)*.(y2-.y0)) in\n    let xt,yt = in_p*.(x1-.x0)/.p1_sqr +. x0,in_p*.(y1-.y0)/.p1_sqr +. y0 in\n    Printf.printf \"%.10f %.10f\\n\" (to_z xt) (to_z yt);\n    if i > 0 then read (i-1)\n  in read (n-1);;"
  },
  {
    "language": "OCaml",
    "code": "module Point = struct\n\n  type t = { x : float; y : float }\n\n  let make x y = { x; y }\n\n  let sum a b = { x = a.x +. b.x; y = a.y +. b.y }\n\n  let diff a b = { x = a.x -. b.x; y = a.y -. b.y }\n\n  let multi p k = { x = p.x *. k; y = p.y *. k }\n\n  let norm p = p.x *. p.x +. p.y *. p.y\n\n  let dot a b = a.x *. b.x +. a.y *. b.y\n\n  let project p1 p2 p =\n    let base = diff p2 p1 in\n    dot (diff p p1) base /. norm base\n    |> multi base\n    |> sum p1\n\nend\n\nopen Point\n\nlet () =\n  let xp1, yp1, xp2, yp2 = Scanf.scanf \"%f %f %f %f \" (fun a b c d -> a,b,c,d) in\n  let p1 = make xp1 yp1 in\n  let p2 = make xp2 yp2 in\n  let q = Scanf.scanf \"%d \" (fun i -> i) in\n  for _ = 0 to q - 1 do\n    let x, y = Scanf.scanf \"%f %f \" (fun x y -> x,y) in\n    let p = make x y |> project p1 p2 in\n    Printf.printf \"%.10f %.10f\\n\" p.x p.y\n  done"
  },
  {
    "language": "D",
    "code": "import std.stdio;\nimport std.string;\nimport std.algorithm;\nimport std.conv;\nimport std.range;\nimport std.numeric;\n\nvoid main() {\n    auto point = readln.chomp.split.map!(to!double).array;\n    auto p1 = point[0..2];\n    auto p2 = point[2..4];\n\n    int q = readln.chomp.to!int;\n    for (int i = 0; i < q; i++) {\n        auto p = readln.chomp.split.map!(to!double).array;\n        double[] p1p = new double[2];\n        double[] p1p2 = new double[2];\n        p1p[] = p[] - p1[];\n        p1p2[] = p2[] - p1[];\n        double[] ph = new double[2];\n        ph[] = p1p2[] * dotProduct(p1p, p1p2) / dotProduct(p1p2, p1p2) + p1[];\n        writefln(\"%.10f %.10f\", ph[0], ph[1]);\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio;\nimport std.string;\nimport std.algorithm;\nimport std.conv;\nimport std.range;\nimport std.numeric;\n\nvoid main() {\n    auto point = readln.chomp.split.map!(to!double).array;\n    auto p1 = point[0..2];\n    auto p2 = point[2..4];\n\n    int q = readln.chomp.to!int;\n    for (int i = 0; i < q; i++) {\n        auto p = readln.chomp.split.map!(to!double).array;\n        double[2] p1p = p[] - p1[];\n        double[2] p1p2 = p2[] - p1[];\n        double[2] ph = p1p2[] * dotProduct(p1p, p1p2) / dotProduct(p1p2, p1p2)\n                       + p1[];\n        writefln(\"%.10f %.10f\", ph[0], ph[1]);\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.math;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nT read(T)() { return readln.chomp.to!T; }\nT[] reads(T)() { return readln.split.to!(T[]); }\nalias readint = read!int;\nalias readints = reads!int;\n\nvoid calc(Vec2 p, Vec2 a, Vec2 b) {\n    auto ab = b - a;\n    auto ap = p - a;\n\n    auto e = ab.normalized;\n    // ベクトル ap のベクトル ab への正射影ベクトル ax を求める\n    auto ax = ap.dot(e) * e;\n    auto x = a + ax;\n    writefln(\"%.8f %.8f\", x.x, x.y);\n}\n\nvoid main() {\n    auto xs = readints();\n    auto p1 = Vec2(xs[0], xs[1]);\n    auto p2 = Vec2(xs[2], xs[3]);\n\n    int q = readint();\n    for (int i = 0; i < q; i++) {\n        auto xy = readints();\n        auto p = Vec2(xy[0], xy[1]);\n        calc(p, p1, p2);\n    }\n}\n\nstruct Vec2 {\n    immutable double x;\n    immutable double y;\n\n    this(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    Vec2 opAdd(Vec2 other) {\n        return Vec2(this.x + other.x, this.y + other.y);\n    }\n\n    Vec2 opSub(Vec2 other) {\n        return Vec2(this.x - other.x, this.y - other.y);\n    }\n\n    Vec2 opMul(double d) {\n        return Vec2(this.x * d, this.y * d);\n    }\n\n    double dot(Vec2 other) {\n        return this.x * other.x + this.y * other.y;\n    }\n\n    double cross(Vec2 other) {\n        return this.x * other.y - other.x * this.y;\n    }\n\n    double mag() {\n        return sqrt(magSq());\n    }\n\n    double magSq() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    Vec2 normalized() {\n        auto m = mag();\n        if (m != 0 && m != 1)\n            return Vec2(this.x / m, this.y / m);\n        return this;\n    }\n\n    static double distance(Vec2 a, Vec2 b) {\n        return (a - b).mag();\n    }\n}\n\n"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.math;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nint readint() {\n    return readln.chomp.to!int;\n}\n\nint[] readints() {\n    return readln.split.map!(to!int).array;\n}\n\nvoid calc(Vec2 p, Vec2 a, Vec2 b) {\n    auto ab = b - a;\n    auto ap = p - a;\n\n    auto d = ab.normalize().dot(ap);\n    auto x = a + ab.normalize() * d;\n    writefln(\"%.8f %.8f\", x.x, x.y);\n}\n\nvoid main() {\n    auto xs = readints();\n    auto p1 = Vec2(xs[0], xs[1]);\n    auto p2 = Vec2(xs[2], xs[3]);\n\n    int q = readint();\n    for (int i = 0; i < q; i++) {\n        auto xy = readints();\n        auto p = Vec2(xy[0], xy[1]);\n        calc(p, p1, p2);\n    }\n}\n\nstruct Vec2 {\n    immutable double x;\n    immutable double y;\n\n    this(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    Vec2 opAdd(Vec2 other) {\n        return Vec2(this.x + other.x, this.y + other.y);\n    }\n\n    Vec2 opSub(Vec2 other) {\n        return Vec2(this.x - other.x, this.y - other.y);\n    }\n\n    Vec2 opMul(double d) {\n        return Vec2(this.x * d, this.y * d);\n    }\n\n    double dot(Vec2 other) {\n        return this.x * other.x + this.y * other.y;\n    }\n\n    double cross(Vec2 other) {\n        return this.x * other.y - other.x * this.y;\n    }\n\n    double mag() {\n        return sqrt(magSq());\n    }\n\n    double magSq() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    Vec2 normalize() {\n        auto m = mag();\n        if (m != 0 && m != 1)\n            return Vec2(this.x / m, this.y / m);\n        return this;\n    }\n\n    static double distance(Vec2 a, Vec2 b) {\n        return (a - b).mag();\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.math;\nimport std.range;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\n\nint readint() {\n    return readln.chomp.to!int;\n}\n\nint[] readints() {\n    return readln.split.map!(to!int).array;\n}\n\nvoid calc(Vec2 p, Vec2 a, Vec2 b) {\n    auto ab = b - a;\n    auto ap = p - a;\n\n    auto d = ab.normalize().dot(ap);\n    auto x = a + ab.normalize() * d;\n    writefln(\"%s %s\", x.x, x.y);\n}\n\nvoid main() {\n    auto xs = readints();\n    auto p1 = Vec2(xs[0], xs[1]);\n    auto p2 = Vec2(xs[2], xs[3]);\n\n    int q = readint();\n    for (int i = 0; i < q; i++) {\n        auto xy = readints();\n        auto p = Vec2(xy[0], xy[1]);\n        calc(p, p1, p2);\n    }\n}\n\nstruct Vec2 {\n    immutable double x;\n    immutable double y;\n\n    this(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    Vec2 opAdd(Vec2 other) {\n        return Vec2(this.x + other.x, this.y + other.y);\n    }\n\n    Vec2 opSub(Vec2 other) {\n        return Vec2(this.x - other.x, this.y - other.y);\n    }\n\n    Vec2 opMul(double d) {\n        return Vec2(this.x * d, this.y * d);\n    }\n\n    double dot(Vec2 other) {\n        return this.x * other.x + this.y * other.y;\n    }\n\n    double cross(Vec2 other) {\n        return this.x * other.y - other.x * this.y;\n    }\n\n    double mag() {\n        return sqrt(magSq());\n    }\n\n    double magSq() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    Vec2 normalize() {\n        auto m = mag();\n        if (m != 0 && m != 1)\n            return Vec2(this.x / m, this.y / m);\n        return this;\n    }\n\n    static double distance(Vec2 a, Vec2 b) {\n        return (a - b).mag();\n    }\n}"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n0 0 3 4\n1\n2 5\n\noutput:\n3.1200000000 4.1600000000\n\"\"\"\n\nimport sys\n\n\ndef solve(_prj_info):\n    for point in _prj_info:\n        xp, yp = map(int, point)\n        p = xp + yp * 1j\n        hypo = p - p1\n        prj = p1 + base * project(base, hypo)\n        print('{0:.10f} {1:.10f}'.format(prj.real, prj.imag))\n\n    return _prj_info\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef project(a, b):\n    return dot(a, b) / dot(a, a)\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    base_info = _input[0].split()\n    q_num = int(_input[1])\n    prj_points = map(lambda x: x.split(), _input[2:])\n\n    x1, y1, x2, y2 = map(int, base_info)\n    p1, p2 = x1 + y1 * 1j, x2 + y2 * 1j\n    base = p2 - p1\n    res = solve(prj_points)"
  },
  {
    "language": "Python",
    "code": "import math\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __repr__(self):\n        return f\"({self.x},{self.y})\"\n\n\nclass Segment:\n    def __init__(self, x: Point, y: Point):\n        self.pt1 = x\n        self.pt2 = y\n        self.vector = self.pt2 - self.pt1\n        self.norm = pow(self.vector.x, 2) + pow(self.vector.y, 2)\n        self.abs = math.sqrt(self.norm)\n\n    def dot(self, other):\n        return self.vector.x * other.vector.x + self.vector.y * other.vector.y\n\n    def cross(self, other):\n        return self.vector.x * other.vector.y - self.vector.y * other.vector.x\n\n    def projection(self, pt: Point)-> Point:\n        vec_p1_to_pt = Segment(self.pt1, pt)\n        t = self.dot(vec_p1_to_pt) / self.abs\n        x = self.pt1.x + t / self.abs * self.vector.x\n        y = self.pt1.y + t / self.abs * self.vector.y\n        return Point(x, y)\n\n    def __repr__(self):\n        return f\"{self.pt1},{self.pt2},{self.vector}\"\n\n\ndef main():\n    p0_x, p0_y, p1_x, p1_y = map(int, input().split())\n    seg_1 = Segment(Point(p0_x, p0_y), Point(p1_x, p1_y))\n    num_query = int(input())\n    for i in range(num_query):\n        pt_x , pt_y = map(int, input().split())\n        proj = seg_1.projection(Point(pt_x, pt_y))\n\n        print(\"{:.10f} {:.10f}\".format(proj.x, proj.y))\n    return\n\nmain()\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n0 0 3 4\n1\n2 5\n\noutput:\n3.1200000000 4.1600000000\n\"\"\"\n\nimport sys\nfrom collections import namedtuple\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef project(s, p):\n    base_vector = s.target - s.source\n    prj_ratio = dot(p - s.source, base_vector) / pow(abs(base_vector), 2)\n    return s.source + base_vector * prj_ratio\n\n\ndef solve(_prj_points):\n    for point in _prj_points:\n        xp, yp = map(int, point)\n        p = xp + yp * 1j\n        prj = project(prj_segment, p)\n        print('{real:.10f} {imag:.10f}'.format(real=prj.real, imag=prj.imag))\n\n    return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n\n    line = tuple(map(int, _input[0].split()))\n    q_num = int(_input[1])\n    prj_points = map(lambda x: x.split(), _input[2:])\n\n    p1, p2 = (x + y * 1j for x, y in zip(line[::2], line[1::2]))\n    Segment = namedtuple('Segment', ('source', 'target'))\n    prj_segment = Segment(p1, p2)\n\n    solve(prj_points)"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom itertools import starmap\nreadline = sys.stdin.readline\np0, p1 = starmap(complex, zip(*[map(int, readline().split())] * 2))\nn = int(readline())\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return base.real * base.real + base.imag * base.imag\ndef project(p0, p1, p2):\n    base = p0 - p1\n    r = dot(p2 - p0, base) / norm(base)\n    return p0 + base * r\nfor _ in [0] * n:\n    p2 = complex(*[int(i) for i in readline().split()])\n    ap = project(p0, p1, p2)\n    print(ap.real, ap.imag)"
  },
  {
    "language": "Python",
    "code": "xp1,yp1,xp2,yp2 = map(int, input().split())\nq = int(input())\nr = (xp2-xp1,yp2-yp1)\n\ndef a(p1,p2):\n    s = (p1-xp1,p2-yp1)\n    d = r[0] * s[0] + r[1] * s[1]\n    a = xp1 + r[0] * d / (r[0]**2 + r[1]**2)\n    b = yp1 + r[1] * d / (r[0]**2 + r[1]**2)\n    return a,b\n\nfor i in range(q):\n    x, y = map(int, input().split())\n    print(a(x, y))"
  },
  {
    "language": "Python",
    "code": "class Point():\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\t\n\noutput_list = []\n\n\ninit_point = map(float, raw_input().split())\n\np0 = Point(init_point[0], init_point[1])\np1 = Point(init_point[2], init_point[3])\n\n\nq = int(raw_input())\ndatalist = [map(float, raw_input().split()) for i in range(q)]\n\n\n#p0--p1 : y=ax+b\n#p2--t  : y=cx+d\n\na = (p0.y - p1.y) / (p0.x - p1.x)\n\nif a != 0:\n\tc = -1/a\n\tb = p0.y - a*p0.x\n\t\n\tfor data in datalist:\n\t\tp2 = Point(data[0], data[1])\n\t\t\n\t\td = p2.y - c*p2.x\n\t\t\n\t\tX = (-b+d) / (a-c)\n\t\tY = a*X + b\n\t\t\n\t\toutput_list.append( (X,Y) )\n\t\t\nelse:\n\tfor data in datalist:\n\t\tp2 = Point(data[0], data[1])\n\t\toutput_list.append( (p2.x, p0.y) )\n\t\t\nfor x, y in output_list:\n\tprint \"%.10f %.10f\" % (x, y)\n\t"
  },
  {
    "language": "Python",
    "code": "pxylist = []\nresult  = []\nxp1, yp1, xp2, yp2 = map(int, input ().split())\n\nq = int(input())\n\ndef recieve():\n    for i in range(q):\n            pxy = list(map(int, input().split()))\n            pxylist.append(pxy) \n\nif xp2 == xp1:\n    recieve()\n\n    for i in range(q):\n        result.append([xp1, pxylist[i][1]])\nelif yp1 == yp2:\n    recieve()\n\n    for i in range(q):\n        result.append([pxylist[i][0], yp1])\n\nelse:\n    a = (yp2 - yp1) / (xp2 - xp1)\n    b = yp1 - a*xp1\n\n    recieve()\n\n    for i in range(q):\n        pxi = pxylist[i][0]\n        pyi = pxylist[i][1]\n        x = (a * (pyi - b) + pxi) / (a*a + 1)\n        y = a * x + b\n        result.append([x, y])\n\nfor i in range(q):\n    print(str(result[i][0]) + ' ' + str(result[i][1]))\n\n"
  },
  {
    "language": "Python",
    "code": "import math\n\n\nclass Vector2():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, v):\n        return Vector2(self.x+v.x, self.y+v.y)\n\n    def __sub__(self, v):\n        return Vector2(self.x-v.x, self.y-v.y)\n\n    def __mul__(self, v):\n        return Vector2(self.x*v, self.y*v)\n\n    def __truediv__(self, v):\n        return Vector2(self.x/v, self.y/v)\n\n    def __abs__(self):\n        return math.sqrt(float(self.x*self.x+self.y*self.y))\n\n    def dot(self, v):\n        return self.x*v.x+self.y*v.y\n\n    def cross(self, v):\n        return self.x*v.y-self.y*v.x\n\n    def norm(self):\n        d = abs(self)\n        return Vector2(self.x/d, self.y/d)\n\n\nx1, y1, x2, y2 = map(int, input().split())\nv12 = Vector2(x2-x1, y2-y1).norm()\nq = int(input())\nfor i in range(q):\n    x, y = map(int, input().split())\n    v = Vector2(x-x1, y-y1)\n    d = v12.dot(v)\n    ans = Vector2(x1+v12.x*d, y1+v12.y*d)\n    print(f\"{ans.x} {ans.y}\")\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom itertools import starmap\nreadline = sys.stdin.readline\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ns = Segment(*starmap(complex, zip(*[map(int, readline().split())] * 2)))\nn = int(readline())\nfor _ in [0] * n:\n    p2 = complex(*map(int, readline().split()))\n    ap = project(s, p2)\n    print(ap.real, ap.imag)"
  },
  {
    "language": "Python",
    "code": "xp1,yp1,xp2,yp2=map(int,input().split())\n\nq=int(input())\n\nif xp1==xp2:\n    for i in range(q):\n        x0,y0=map(int,input().split())\n        print('{:.10f}'.format(xp1),'{:.10f}'.format(y0))\nelse:\n    a=float((yp2-yp1)/(xp2-xp1))\n    for i in range(q):\n        x0,y0=map(int,input().split())\n        x=a*((y0-yp1)-a*(x0-xp1))/(1+a**2)+x0\n        y=(a*(a*y0+x0-xp1)+yp1)/(1+a**2)\n        print('{:.10f}'.format(x),'{:.10f}'.format(y))\n\n"
  },
  {
    "language": "Python",
    "code": "def dot(a, b):\n  return a.real * b.real + a.imag * b.imag\n\ndef projection(a, b):\n  return a * dot(a, b) / (abs(a) ** 2)\n\n#複素平面の座標はクラスだから直接加算できる\ndef solve(p0,p1,p2):\n  a=p1-p0\n  b=p2-p0\n  pro=projection(a,b)\n  t=p0+pro\n  return t\n\ndef main():\n  x0,y0,x1,y1=map(float,input().split())\n  p0=complex(x0,y0)\n  p1=complex(x1,y1)\n  q=int(input())\n  for i in range(q):\n    p2=complex(*map(float,input().split()))\n    t=solve(p0,p1,p2)\n    print('{:.10f}{:.10f}'.format(t.real,t.imag))\n\nmain()\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom itertools import starmap\nreadline = sys.stdin.readline\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ns = Segment(*list(starmap(complex, zip(*[map(int, readline().split())] * 2))))\nn = int(readline())\nfor _ in [0] * n:\n    p2 = complex(*[int(i) for i in readline().split()])\n    ap = project(s, p2)\n    print(ap.real, ap.imag)"
  },
  {
    "language": "Python",
    "code": "def dot(a,b):\n    return a[0]*b[0] + a[1]*b[1]\n\nx1,y1,x2,y2 = [int(i) for i in input().split()] \nq = int(input())\nfor i in range(q):\n    x,y = [int(i) for i in input().split()]\n    a = [x2-x1,y2-y1]\n    b = [x-x1,y-y1]\n    co = dot(a,b) / dot(a,a)\n    print(a[0]*co+x1,a[1]*co+y1)"
  },
  {
    "language": "Python",
    "code": "x,y,s,t = map(float, input().split())\na = int(input())\ns-=x\nt-=y\nwhile a:\n    a -= 1\n    p,q = map(float, input().split())\n    p-=x\n    q-=y\n    ans_x = s*(q*t+p*s)/(t*t+s*s)\n    ans_y = t*(q*t+p*s)/(t*t+s*s)\n    print(x+ans_x, y+ans_y)\n\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/python3\n\nimport array\nfrom fractions import Fraction\nimport math\nimport os\nimport sys\n\n\nclass Vec(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        super().__init__()\n\n    def __add__(self, other):\n        return Vec(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vec(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, scalar):\n        return Vec(self.x * scalar, self.y * scalar)\n\n    def __truediv__(self, scalar):\n        return Vec(self.x / scalar, self.y / scalar)\n\n    def __iadd__(self, other):\n        self.x += other.x\n        self.y += other.y\n        return self\n\n    def __isub__(self, other):\n        self.x -= other.x\n        self.y -= other.y\n        return self\n\n    def __imul__(self, scalar):\n        self.x *= scalar\n        self.y *= scalar\n        return self\n\n    def __idiv__(self, scalar):\n        self.x /= scalar\n        self.y /= scalar\n        return self\n\n    def __neg__(self):\n        return Vec(-self.x, -self.y)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def abs2(self):\n        return self.x * self.x + self.y * self.y\n\n    def __abs__(self):\n        return math.sqrt(float(self.abs2()))\n\n    def __str__(self):\n        return '({}, {})'.format(self.x, self.y)\n\n\ndef main():\n    x1, y1, x2, y2 = read_ints()\n    Q = read_int()\n    for _ in range(Q):\n        x, y = read_ints()\n        print(*solve(Vec(x1, y1), Vec(x2, y2), Vec(x, y)))\n\n\ndef solve(u, v, a):\n    v -= u\n    a -= u\n    f = Fraction(v.dot(a), v.abs2())\n    v *= f\n    v += u\n    return float(v.x), float(v.y)\n\n\n###############################################################################\n# AUXILIARY FUNCTIONS\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef read_int():\n    return int(inp())\n\n\ndef read_ints():\n    return [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\nif __name__ == '__main__':\n    main()\n\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python3\n\ndef inner_product(v1, v2):\n    return v1.real * v2.real + v1.imag * v2.imag\n\n\n# ????????????b???????????????a??????????????´????????£?°???±???????????????????????????\ndef projection(a, b):\n    return a * inner_product(a, b) / (abs(a) ** 2)\n\n\ndef solve(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    pro = projection(a, b)\n    t = p0 + pro\n    return t\n\n\ndef main():\n    x_p0, y_p0, x_p1, y_p1 = map(float, input().split())\n    p0 = complex(x_p0, y_p0)\n    p1 = complex(x_p1, y_p1)\n    q = int(input())\n    for _ in range(q):\n        p2 = complex(*map(float, input().split()))\n        t = solve(p0, p1, p2)\n        print(\"{:.10f} {:.10f}\".format(t.real, t.imag))\n\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "language": "Python",
    "code": "def dot(a,b):\n    return a.real*b.real+a.imag*b.imag\n\nx1, y1, x2, y2 = map(int, input().split())\np1=x1+y1*1j\np2=x2+y2*1j\nl=p2-p1\nl_norm=dot(l,l)         #lの大きさの２乗を計算\nq=int(input())\n\nfor x3, y3 in (map(int, input().split()) for _ in [0]*q):\n    p3=x3+y3*1j\n    a=p3-p1\n    k=dot(a,l)/l_norm\n    projection_vector=k*l\n    print(x1+projection_vector.real,y1+projection_vector.imag)\n"
  },
  {
    "language": "Python",
    "code": "class Vec2:\n    def __init__(self, y, x):\n        self.y = y\n        self.x = x\n\n    def __add__(self, other):\n        assert isinstance(other, Vec2)\n        return Vec2(self.y+other.y, self.x+other.x)\n\n    def __sub__(self, other):\n        assert isinstance(other, Vec2)\n        return Vec2(self.y - other.y, self.x - other.x)\n\n    def __mul__(self, other):\n        if isinstance(other, Vec2):\n            return self.y * other.y + self.x * other.x\n        else:\n            return Vec2(self.y * other, self.x * other)\n\n    def __str__(self):\n        return str((self.y, self.x))\n\n    def size(self):\n        return (self.x**2 + self.y**2)**0.5\n\n    def projection(self, vec):\n        p = self*vec/self.size()**2\n        return self*p\n\n\ndef main():\n    x_p1, y_p1, x_p2, y_p2 = map(int, input().split())\n    p1 = Vec2(y_p1, x_p1)\n    p2 = Vec2(y_p2, x_p2)\n    p1p2 = p2-p1\n    q = int(input())\n    for _ in range(q):\n        x_q, y_q = map(int, input().split())\n        p1q = Vec2(y_q, x_q) - p1\n        p1x = p1p2.projection(p1q)\n        x = p1 + p1x\n        print(x.x, x.y)\n\n\nif __name__ == \"__main__\":\n    main()\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    x1, y1, x2, y2 = list(map(int, input().split()))\n    a = [x2 - x1, y2 - y1]\n    lal2 = a[0]**2 + a[1]**2\n    q = int(input())\n    for i in range(q):\n        x, y = map(int, input().split())\n        b = [x - x1, y - y1]\n        t = (a[0]*b[0] + a[1]*b[1]) / lal2\n        print(x1 + a[0] * t, y1 + a[1] * t)\n\nif __name__ == \"__main__\":\n    main()\n"
  },
  {
    "language": "Python",
    "code": "a,b,c,d = map(float, input().split())\n\n#点2のベクトルを求める（base）\nc -= a\nd -= b\n\nfor _ in [0] * int(input()):\n  #x,yの座標を入力する\n  x, y = map(float, input().split())\n\n  #x,yのベクトルを入力する（hypo）\n  x -= a\n  y -= b\n\n  #zとbaseの比率\n  z = (c*x + d*y) / (c*c + d*d)\n  print(a+c*z, b+d*z)\n\n\n"
  },
  {
    "language": "Python",
    "code": "from typing import List\nfrom math import sqrt\n\nEPS = 1e-10\n\n\ndef float_equal(x: float, y: float) -> bool:\n    return abs(x - y) < EPS\n\n\nclass Point:\n\n    def __init__(self, x: float=0.0, y: float=0.0) -> None:\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return \"Point({}, {})\".format(self.x, self.y)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Point):\n            # print(\"NotImplemented in Point\")\n            return NotImplemented\n        return float_equal(self.x, other.x) and \\\n            float_equal(self.y, other.y)\n\n    def __add__(self, other: 'Point') -> 'Point':\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: 'Point') -> 'Point':\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k: float) -> 'Point':\n        return Point(self.x * k, self.y * k)\n\n    def __rmul__(self, k: float) -> 'Point':\n        return self * k\n\n    def __truediv__(self, k: float) -> 'Point':\n        return Point(self.x / k, self.y / k)\n\n    def __lt__(self, other: 'Point') -> bool:\n        return self.y < other.y \\\n            if abs(self.x - other.x) < EPS \\\n            else self.x < other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return sqrt(self.norm())\n\n    def dot(self, other: 'Point') -> float:\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other: 'Point') -> float:\n        return self.x * other.y - self.y * other.x\n\n    def is_orthogonal(self, other: 'Point') -> bool:\n        return float_equal(self.dot(other), 0.0)\n\n    def is_parallel(self, other: 'Point') -> bool:\n        return float_equal(self.cross(other), 0.0)\n\n\nVector = Point\n\n\nclass Segment:\n\n    def __init__(self, p1: Point = None, p2: Point = None) -> None:\n        self.p1: Point = Point() if p1 is None else p1\n        self.p2: Point = Point() if p2 is None else p2\n\n    def __repr__(self) -> str:\n        return \"Segment({}, {})\".format(self.p1, self.p2)\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Segment):\n            # print(\"NotImplemented in Segment\")\n            return NotImplemented\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def vector(self) -> Vector:\n        return self.p2 - self.p1\n\n    def is_orthogonal(self, other: 'Segment') -> bool:\n        return self.vector().is_orthogonal(other.vector())\n\n    def is_parallel(self, other: 'Segment') -> bool:\n        return self.vector().is_parallel(other.vector())\n\n    def projection(self, p: Point) -> Point:\n        v = self.vector()\n        vp = p - self.p1\n        return v.dot(vp) / v.norm() * v + self.p1\n\n\nLine = Segment\n\n\ndef main():\n    x1, y1, x2, y2 = [int(x) for x in input().split()]\n    p1 = Point(x1, y1)\n    p2 = Point(x2, y2)\n    l = Line(p1, p2)\n\n    q = int(input())\n\n    for _ in range(q):\n        x, y = [int(x) for x in input().split()]\n        p = Point(x, y)\n        a = l.projection(p)\n        print(a.x, a.y)\n\n\nif __name__ == \"__main__\":\n    main()\n\n"
  },
  {
    "language": "Python",
    "code": "x1,y1,x2,y2 = map(float, raw_input().split())\n\nq = int(raw_input())\nfor _ in xrange(q):\n  x,y = map(float, raw_input().split())\n  if x1 == x2:\n    print \"%f %f\" % (x1, y)\n  elif y1 == y2:\n    print \"%f %f\" % (x, y1)\n  else:\n    a0 = (y2 - y1) / (x2 - x1)\n    b0 = y1 - a0 * x1\n    ap = -1 / a0\n    bp = y - ap * x\n    xe = (bp - b0) / (a0 - ap)\n    ye = a0 * xe + b0\n\n    print \"%.12f %.12f\" % (xe, ye)"
  },
  {
    "language": "Python",
    "code": "def project(x,y):\n    base=[x2-x1,y2-y1]\n    hypo=[x-x1,y-y1]\n    r=(base[0]*hypo[0]+base[1]*hypo[1])/(base[0]**2+base[1]**2)\n    return x1+base[0]*r,y1+base[1]*r\n\n\nx1,y1,x2,y2=map(int,input().split())\nq=int(input())\nfor i in range(q):\n    x,y=map(int,input().split())\n    print(*project(x,y))\n"
  },
  {
    "language": "Python",
    "code": "from math import sqrt\nx1, y1, x2, y2 = map(int, raw_input().split())\ndx = x2 - x1\ndy = y2 - y1\nfor i in xrange(input()):\n    x, y = map(int, raw_input().split())\n    a = float(dx*(x - x1) + dy*(y - y1)) / (dx**2 + dy**2)\n    print \"%.09f %0.09f\" % (x1 + a*dx, y1 + a*dy)"
  },
  {
    "language": "Python",
    "code": "from math import sin, cos, atan2\n\ndef sgn(x, eps=1e-10):\n    if x < -eps: return -1\n    if -eps <= x <= eps: return 0\n    if eps < x: return 1\n\nclass Vector():\n    def __init__(self, x=0.0, y=0.0):\n        self.x = x\n        self.y = y\n\n    def arg(self):\n        return atan2(self.y, self.x)\n\n    def norm(self):\n        return (self.x**2 + self.y**2)**0.5\n\n    def rotate(self, t):\n        nx = self.x * cos(t) - self.y * sin(t)\n        ny = self.x * sin(t) + self.y * cos(t)\n        return Vector(nx, ny)\n\n    def counter(self):\n        nx = -self.x\n        ny = -self.y\n        return Vector(nx, ny)\n\n    def times(self, k):\n        nx = self.x * k\n        ny = self.y * k\n        return Vector(nx, ny)\n\n    def unit(self):\n        norm = self.norm()\n        nx = self.x / norm\n        ny = self.y / norm\n        return Vector(nx, ny)\n\n    def normal(self):\n        norm = self.norm()\n        nx = -self.y / norm\n        ny = self.x / norm\n        return Vector(nx, ny)\n\n    def add(self, other): #Vector, Vector -> Vector\n        nx = self.x + other.x\n        ny = self.y + other.y\n        return Vector(nx, ny)\n\n    def sub(self, other):\n        nx = self.x - other.x\n        ny = self.y - other.y\n        return Vector(nx, ny)\n\n    def dot(self, other): #Vector, Vector -> int\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other): #Vector, Vector -> int\n        return self.x * other.y - self.y * other.x\n\n    def __str__(self):\n        return str(self.x) + ' ' + str(self.y)\n\nclass Line():\n    def __init__(self, bgn=Vector(), end=Vector()):\n        self.bgn = bgn\n        self.end = end\n\n    def build(self, a, b, c): #ax + by == 1\n        assert sgn(a) != 0 or sgn(b) != 0\n        if sgn(b) == 0:\n            self.bgn = Vector(-c / a, 0.0)\n            self.end = Vector(-c / a, 1.0)\n        else:\n            self.v = Vector(0, -c / b)\n            self.u = Vector(1.0, -(a + b) / b)\n\n    def vec(self):\n        return self.end.sub(self.bgn)\n\n    def projection(self, point):\n        v = self.vec()\n        u = point.sub(self.bgn)\n        k = v.dot(u) / v.norm()\n        h = v.unit().times(k)\n        return self.bgn.add(h)\n\nxp1, yp1, xp2, yp2 = map(int, input().split())\nq = int(input())\n\np1 = Vector(xp1, yp1)\np2 = Vector(xp2, yp2)\nl = Line(p1, p2)\n\nfor _ in range(q):\n    x, y = map(int, input().split())\n    p = Vector(x, y)\n    proj = l.projection(p)\n    print(proj)\n"
  },
  {
    "language": "Python",
    "code": "def dot(a, b):\n  return a.real * b.real + a.imag * b.imag\n\ndef projection(a, b):\n  return a * dot(a, b) / (abs(a) ** 2)\n\n#複素平面の座標はクラスだから直接加算できr\ndef solve(p0,p1,p2):\n  a=p1-p0\n  b=p2-p0\n  pro=projection(a,b)\n  t=p0+pro\n  return t\n\ndef main():\n  x0,y0,x1,y1=map(float,input().split())\n  p0=complex(x0,y0)\n  p1=complex(x1,y1)\n  q=int(input())\n  for i in range(q):\n    p2=complex(*map(float,input().split()))\n    t=solve(p0,p1,p2)\n    print('{:.10f}{:.10f}'.format(t.real,t.imag))\n\nmain()\n\n"
  },
  {
    "language": "Python",
    "code": "from math import hypot\n\nx1, y1, x2, y2 = map(int, input().split())\ndx, dy = x2-x1, y2-y1\nvector_base = hypot(dx, dy)\nq = int(input())\n\nfor i in range(q):\n    x3, y3 = map(int, input().split()) \n    d = ((x3-x1)*dx + (y3-y1)*dy) / (vector_base**2)\n    print(x1+dx*d, y1+dy*d)\n"
  },
  {
    "language": "Python",
    "code": "import math\n\ndef equals(a, b):\n    return abs(a - b) < 1e-10\n\n\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __add__(self, p):\n        return Point(self.x + p.x, self.y + p.y)\n\n    def __sub__(self, p):\n        return Point(self.x - p.x, self.y - p.y)\n\n    def __mul__(self, a):\n        return Point(self.x * a, self.y * a)\n\n    def __rmul__(self, a):\n        return self * a\n\n    def __truediv__(self, a):\n        return Point(self.x / a, self.y / a)\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\n    def __lt__(self, p):\n        if self.x != p.x:\n            return self. x < p.x\n        else:\n            return self.y < p.y\n\n    def __eq__(self, p):\n        return equals(self.x, p.x) and equals(self.y, p.y)\n\n\nclass Segment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n\ndef dot(a, b):\n    return a.x * b.x + a.y * b.y\n\n\ndef cross(a, b):\n    return a.x * b.y - a.y * b.x\n\n\ndef project(s, p):\n    base = s.p2 - s.p1\n    r = dot(p - s.p1, base) / base.norm()\n    return s.p1 + base * r\n\n\nif __name__ == '__main__':\n    x1, y1, x2, y2 = [int(v) for v in input().split()]\n    s = Segment(Point(x1, y1), Point(x2, y2))\n    q = int(input())\n    ans = []\n    for i in range(q):\n        x, y = [int(v) for v in input().split()]\n        p = Point(x, y)\n        ans.append(project(s, p))\n\n    for v in ans:\n        print('{0:.10f} {1:.10f}'.format(v.x, v.y))\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport collections\nimport math\n\n\nclass Vector2(collections.namedtuple(\"Vector2\", [\"x\",  \"y\"])):\n\n    def __add__(self, other):\n        return Vector2(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector2(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, scalar):  # cross product\n        return Vector2(self.x * scalar, self.y * scalar)\n\n    def __neg__(self):\n        return Vector2(-self.x, -self.y)\n\n    def __pos__(self):\n        return Vector2(+self.x, +self.y)\n\n    def __abs__(self):  # norm\n        return math.sqrt(float(self.x * self.x + self.y * self.y))\n\n    def dot(self, other):  # dot product\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):  # cross product\n        return self.x * other.y - self.y * other.x\n\n\nif __name__ == '__main__':\n\n    a, b, c, d = map(int, input().split())\n    p1 = Vector2(a, b)\n    p2 = Vector2(c, d)\n    base = p2 - p1\n    q = int(input())\n\n    for _ in range(q):\n        e, f = map(int, input().split())\n        hypo = Vector2(e - a, f - b)\n        x = p1 + base * (hypo.dot(base) / abs(base)**2)\n\n        print(x.x, x.y)\n\n"
  },
  {
    "language": "Python",
    "code": "x1,y1,x2,y2=map(float,raw_input().split(\" \"))\nif y1==y2 or x1==x2:\n    if y1==y2:\n        t0=0\n    if x1==x2:\n        t1=0\nelse:\n    t0=(y2-y1)/(x2-x1)\n    b0=y1-t0*x1\n    t1=-(x2-x1)/(y2-y1)\n\nfor i in xrange(int(raw_input())):\n    px,py=map(float,raw_input().split(\" \"))\n    if t0==0 or t1==0:\n        if t0==0:\n            t1=-1\n            a=1.0\n            b=-t0\n            c=y1\n            d=0.0\n            e=-t1\n            f=px\n        if t1==0:\n            t0=-1\n            a=0.0\n            b=-t0\n            c=x1\n            d=1.0\n            e=-t0\n            f=py\n    else:\n        b1=py-t1*px\n        a,b,c,d,e,f=1.0,-t0,b0,1.0,-t1,b1\n    kouten_y=(c*e-f*b)/(a*e-b*d)\n    kouten_x=(a*f-c*d)/(a*e-b*d)\n    print \"{0:.10f} {1:.10f}\".format(kouten_x,kouten_y)"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\nreadline = stdin.readline\n\n\ndef main():\n    x1, y1, x2, y2 = map(int, readline().split())\n    p1, p2 = x1 + y1 * 1j, x2 + y2 * 1j\n    for i in range(int(readline())):\n        xi, yi = map(int, readline().split())\n        pi = xi + yi * 1j\n        cross = p1 + (p2 - p1) * projecter(p2 - p1, pi - p1)\n        print('{:.10f} {:.10f}'.format(cross.real, cross.imag))\n\n\ndef projecter(a, b):\n    return dot(a, b) / dot(a, a)\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\nmain()"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom itertools import starmap\nreadline = sys.stdin.readline\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ns = Segment(*list(starmap(complex, zip(*[map(int, readline().split())] * 2))))\nn = int(readline())\nfor _ in [0] * n:\n    p2 = complex(*map(float, readline().split()))\n    ap = project(s, p2)\n    print(ap.real, ap.imag)"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Vector:\n    def __init__(self,x,y):\n        self.x = x\n        self.y = y\n        \n    def norm_2(self):\n        return dot(self,self)\n    \n    def norm(self):\n        return math.sqrt(self.norm_2())\n    \ndef v_sum(v1,v2):\n    return Vector(v1.x+v2.x,v1.y+v2.y)\ndef v_diff(v1,v2):\n    return Vector(v1.x-v2.x,v1.y-v2.y)\ndef scalar_multi(k,v):\n    return Vector(k*v.x,k*v.y)\n    \ndef dot(vector1,vector2):\n    return vector1.x*vector2.x+vector1.y*vector2.y\n\ndef cross(vector1,vector2):\n    return vector1.x*vector2.y+vector1.y*vector2.x\n\nx1,y1,x2,y2 = map(int,input().split())\np1 = Vector(x1,y1)\np2 = Vector(x2,y2)\n\nd = v_diff(p2,p1)\n\nq = int(input())\nfor i in range(q):\n    x,y = map(int,input().split())\n    v = v_diff(Vector(x,y),p1)\n    u = v_sum(scalar_multi(dot(v,d)/d.norm_2(),d),p1)\n    print('{} {}'.format(round(u.x,9),round(u.y,9)))\n"
  },
  {
    "language": "Python",
    "code": "import sys\ninput = sys.stdin.readline\n\n\nclass Vector():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, vec):\n        return Vector(self.x+vec.x, self.y+vec.y)\n\n    def __sub__(self, vec):\n        return Vector(self.x-vec.x, self.y-vec.y)\n\n    def __mul__(self, sc):\n        return Vector(self.x*sc, self.y*sc)\n\n    def __truediv__(self, sc):\n        return Vector(self.x/sc, self.y/sc)\n\n    def __iadd__(self, vec):\n        self.x += vec.x\n        self.y += vec.y\n        return self\n\n    def __isub__(self, vec):\n        self.x -= vec.x\n        self.y -= vec.y\n        return self\n\n    def __imul__(self, sc):\n        self.x *= sc\n        self.y *= sc\n        return self\n\n    def __itruediv__(self, sc):\n        self.x /= sc\n        self.y /= sc\n        return self\n\n    def __str__(self):\n        return f'{self.x} {self.y}'\n\n    def __eq__(self, vec):\n        return self.x == vec.x and self.y == vec.y\n\n    def dot(self, vec):\n        return self.x * vec.x + self.y * vec.y\n\n    def abs(self):\n        return (self.x*self.x + self.y*self.y)**0.5\n\n\nx1, y1, x2, y2 = map(int, input().split())\nv1 = Vector(x1, y1)\nv2 = Vector(x2, y2)\nn = v2-v1\nn /= n.abs()\n\nfor _ in [0]*int(input()):\n    x, y = map(int, input().split())\n    v = Vector(x, y) - v1\n    print(v1 + n * (n.dot(v)))\n\n"
  },
  {
    "language": "Python",
    "code": "def dot(a, b):\n  return a.real * b.real + a.imag * b.imag\n\ndef projection(a, b):\n  return a * dot(a, b) / (abs(a) ** 2)\n\n#複素平面の座標はクラスだから直接加算できr\ndef solve(p0,p1,p2):\n  a=p1-p0\n  b=p2-p0\n  pro=projection(a,b)\n  t=p0+pro\n  return t\n\ndef main():\n  x0,y0,x1,y1=map(float,input().split())\n  p0=complex(x0,y0)\n  p1=complex(x1,y1)\n  q=int(input())\n  for i in range(q):\n    p2=complex(*map(float,input().split()))\n    t=solve(p0,p1,p2)\n    print('{:.10f}{:.10f}'.format(t.real,t.imag))\nif __name__ == '__main__':\n  main()\n\n\n"
  },
  {
    "language": "Python",
    "code": "def dot(a,b):\n    return a[0]*b[0] + a[1]*b[1]\n\nx1,y1,x2,y2 = [int(i) for i in input().split()] \nq = int(input())\nfor i in range(q):\n    x,y = [int(i) for i in input().split()]\n    a = [x2-x1,y2-y1]\n    b = [x-x1,y-y1]\n    co = dot(a,b) / dot(a,a)\n    print(co)\n    print(a[0]*co+x1,a[1]*co+y1)"
  },
  {
    "language": "Python",
    "code": "if __name__ == \"__main__\":\n    x_p1, y_p1, x_p2, y_p2 = map(lambda x: int(x), input().split())\n    q = int(input())\n\n    p1p2 = (x_p2 - x_p1, y_p2 - y_p1)\n    for _ in range(q):\n        x_p0, y_p0 = map(lambda x: int(x), input().split())\n        p1p0 = (x_p0 - x_p1, y_p0 - y_p1)\n        r = (p1p2[0] * p1p0[0] + p1p2[1] * p1p0[1]) / (p1p2[0] ** 2 + p1p2[1] ** 2)\n        print(x_p1 + p1p2[0] * r, y_p1 + p1p2[1] * r)\n\n"
  },
  {
    "language": "Python",
    "code": "from decimal import Decimal as D\na,s,d,f=map(D,input().split())\nh=[d-a,f-s]\nleh=((d-a)**2+(f-s)**2)**(D(\"0.5\"))\nfor i in range(int(input())):\n    x,y=map(D,input().split())\n    co=(x-a)*h[0]/leh+(y-s)*h[1]/leh\n    print(a+h[0]*co/leh,s+h[1]*co/leh)\n"
  },
  {
    "language": "Python",
    "code": "a,b,c,d=map(float,input().split())\nc-=a;d-=b\nfor _ in [0]*int(input()):\n    x,y=map(float,input().split())\n    x-=a;y-=b\n    z=(c*x+d*y)/(c*c+d*d)\n    print(a+c*z,b+d*z)\n\n"
  },
  {
    "language": "Python",
    "code": "# Aizu Problem CGL_1_A: Projection\n#\nimport sys, math, os\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input3.txt\", \"rt\")\n\n\nx1, y1, x2, y2 = [int(_) for _ in input().split()]\nsx = x2 - x1\nsy = y2 - y1\ns_sq = sx**2 + sy**2\n\nQ = int(input())\nfor q in range(Q):\n    px, py = [int(_) for _ in input().split()]\n    if y1 == y2:\n        x = px\n        y = y1\n    else:\n        x = x1 + (px * sx + py * sy) * sx / s_sq\n        y = y1 + (px * sx + py * sy) * sy / s_sq\n    print(\"%.10f %.10f\" % (x, y))"
  },
  {
    "language": "Python",
    "code": "def Projection(point, begin, end):\n\ttmp = (point-begin) / (end-begin)\n\treturn tmp.real * (end-begin) + begin\n\na, b, c, d = map(int, input().split())\nq, r = complex(a, b), complex(c, d)\nn = int(input())\nfor _ in range(n):\n\tx, y = map(int, input().split())\n\tp = complex(x, y)\n\tproj = Projection(p, q, r)\n\tprint(proj.real, proj.imag)\n"
  },
  {
    "language": "Python",
    "code": "xp0,yp0,xp1,yp1 = map(float,raw_input().split())\nq = int(raw_input())\nfor i in range(q):\n    xp2,yp2 = map(float,raw_input().split())\n    p0p2 = (xp2-xp0,yp2-xp0)\n    p0p1 = (xp1-xp0,yp1-yp0)\n    k = ((p0p2[0]*p0p1[0]+p0p2[1]*p0p1[1])/(p0p1[0]**2 + p0p1[1]**2))\n    p0T = (k*p0p1[0],k*p0p1[1])\n    OT = (xp0+p0T[0],yp0+p0T[1])\n    print \"%.10f %.10f\" % (OT[0],OT[1])"
  },
  {
    "language": "Python",
    "code": "# Vector class\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def is_orthogonal(self, v):\n        if self.x * v.x + self.y * v.y == 0:\n            return True\n        else:\n            return False\n    def is_parallel(self, v):\n        if self.x * v.y - self.y * v.x == 0:\n            return True\n        else:\n            return False\n    def dot_product(self, v):\n        return self.x * v.x + self.y * v.y\n    def quadrance(self):\n        return self.x ** 2 + self. y ** 2\n    def mul(self, k):\n        return Vector(self.x * k, self.y *k)\n    def __add__(self, v):\n        return Vector(self.x + v.x, self.y + v.y)\n    def __str__(self):\n        return \"{0:.8f} {1:.8f}\".format(self.x, self. y)\n    def project_vector(self, v):\n        return v.mul(self.dot_product(v) / v.quadrance())\n\n# Acceptance of input and Print the projection point\nimport sys\n\nfile_input = sys.stdin\n\nx_p1, y_p1, x_p2, y_p2 = map(int, file_input.readline().split())\np1_p2 = Vector(x_p2 - x_p1, y_p2 - y_p1)\no_p1 = Vector(x_p1, y_p1)\n\nq = int(file_input.readline())\n\nfor line in file_input:\n    x_p, y_p = map(int, line.split())\n    p1_p = Vector(x_p - x_p1, y_p - y_p1)\n    print(o_p1 + p1_p.project_vector(p1_p2))"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python3\n# CGL_1_A: Points/Vectors - Projection\n\n\ndef proj(p1, p2, p):\n    x1, y1 = p1\n    x2, y2 = p2\n    x, y = p\n\n    if x1 == x2:\n        return x1 * 1.0, y * 1.0\n    elif y1 == y2:\n        return x * 1.0, y1 * 1.0\n    else:\n        dx = x1 - x2\n        dy = y1 - y2\n        return (((dx*x + dy*y)*dx - (x1*y2 - x2*y1)*dy) / (dx*dx + dy*dy),\n                ((dx*x + dy*y)*dy + (x1*y2 - x2*y1)*dx) / (dx*dx + dy*dy))\n\n\ndef run():\n    px1, py1, px2, py2 = [int(v) for v in input().split()]\n    q = int(input())\n\n    for _ in range(q):\n        x, y = [int(v) for v in input().split()]\n        print(\"{:.10f} {:.10f}\".format(*proj((px1, py1), (px2, py2), (x, y))))\n\n\nif __name__ == '__main__':\n    run()\n\n"
  },
  {
    "language": "Python",
    "code": "a, b,c,d = map(float,input().split())\na = complex(a,b)\nb = complex(c,d)\n\nfor _ in [0] *int(input()):\n  c = complex(*map(float, input().split()))\n  q = b-a\n  c -= a\n  p = a+q*(c/q).conjugate()\n  print(\"{:.10} {:.10}\".format(p.real, p.imag))\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\n\nsys.setrecursionlimit(10 ** 9)\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\nINF=float('inf')\n\ndef dot(a, b):\n    x1, y1 = a\n    x2, y2 = b\n    return x1*x2 + y1*y2\n\ndef norm(a):\n    x, y = a\n    return x**2 + y**2\n\ndef add(a, b):\n    x1, y1 = a\n    x2, y2 = b\n    return (x1+x2, y1+y2)\n\ndef sub(a, b):\n    x1, y1 = a\n    x2, y2 = b\n    return (x1-x2, y1-y2)\n\ndef mul(a, b):\n    x1, y1 = a\n    if not isinstance(b, tuple):\n        return (x1*b, y1*b)\n    x2, y2 = b \n    return (x1*x2, y1*y2)\n\n# 線分segに対する点pの射影\ndef project(seg, p):\n    p1, p2 = seg\n    base = sub(p2, p1)\n    r = dot(sub(p, p1), base) / norm(base)\n    return add(p1, mul(base, r))\n\nx1, y1, x2, y2 = MAP()\nseg = ((x1, y1), (x2, y2))\nQ = INT()\nfor i in range(Q):\n    x, y  = MAP()\n    res = project(seg, (x, y))\n    print(*res)\n\n"
  },
  {
    "language": "Python",
    "code": "class Vector:\n    __slots__ = ['x', 'y']\n\n    def __init__(self, x, y):\n        self.x, self.y = x, y\n\n    def __add__(self, other):\n        return self.__class__(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return self.__class__(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, x):\n        return self.__class__(self.x * x, self.y * x)\n\n    def __truediv__(self, x):\n        return self.__class__(self.x / x, self.y / x)\n\n    def norm(self):\n        return (self.x ** 2 + self.y ** 2) ** 0.5\n\n\ndef dot(u, v):\n    return u.x * v.x + u.y * v.y\n\n\nx1, y1, x2, y2 = map(float, input().split())\np1, p2 = Vector(x1, y1), Vector(x2, y2)\nn = (p2 - p1) / (p2 - p1).norm()\n\nq = int(input())\n\nfor _ in range(q):\n    p = Vector(*map(float, input().split()))\n    p_new = p1 + n * dot(p - p1, n)\n    print(p_new.x, p_new.y)\n\n"
  },
  {
    "language": "Python",
    "code": "# coding=utf-8\nfrom math import sqrt\n\n\ndef inner_product(vect1, vect2):\n    return sum([(v1_el*v2_el) for v1_el, v2_el in zip(vect1, vect2)])\n\n\ndef vector_abs(vect):\n    return sqrt(sum([element**2 for element in vect]))\n\n\ndef direction_unit_vector(p_from, p_to):\n    d_vector = [(xt - xf) for xt, xf in zip(p_to, p_from)]\n    d_u_vector = [element/vector_abs(d_vector) for element in d_vector]\n    return d_u_vector\n\n\ndef projection(origin, line_from, line_to):\n    direction_unit = direction_unit_vector(line_from, line_to)\n    origin_d_vector = [(org-lf) for org, lf in zip(origin, line_from)]\n    inject_dist = inner_product(direction_unit, origin_d_vector)\n    on_line_vect = [inject_dist*element for element in direction_unit]\n    return [olv_el + lf_el for olv_el, lf_el in zip(on_line_vect, line_from)]\n\n\nif __name__ == '__main__':\n    xy_list = list(map(int, input().split()))\n    p1_list = xy_list[:2]\n    p2_list = xy_list[2:]\n    Q = int(input())\n\n    for i in range(Q):\n        p_list = list(map(int, input().split()))\n        x_list = projection(p_list, p1_list, p2_list)\n        print(' '.join(map(str, x_list)))\n\n"
  },
  {
    "language": "Python",
    "code": "def projection(x1, y1, x2, y2, x0, y0):\n    if x2 == x1:\n        return (x2, y0)\n    m = float(y2 - y1) / float(x2 - x1)\n    b = y1 - m * x1 # intercept of the original line                                                                                             \n    xp = (x0 + (m * y0) - (m * b)) / (1. + (m * m))\n    yp = ((m * x0) + ((m * m) * y0) + b) / (1. + (m * m))\n    return (xp, yp)\n\nx1, y1, x2, y2 = map(float, input().split())\nq = int(input())\nfor _ in range(q):\n    x0, y0 = map(float, input().split())\n    ans = projection(x1, y1, x2, y2, x0, y0)\n    print(ans[0], ans[1])\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point():\n    def __init__(self, x=None, y=None):\n        self.x = x\n        self.y = y\n\nclass Vector():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.abs = math.sqrt(x*x + y*y)\n\n    def constant_multipled(self, c):\n        return Vector(self.x*c, self.y*c)\n\n    def inner_product(self, vec):\n        return self.x*vec.x + self.y*vec.y\n\nx1, y1, x2, y2 = list(map(int, input().split(' ')))\nstart = Point(x1, y1)\nbase_vec = Vector(x2-x1, y2-y1)\nq = int(input())\nvectors = []\nfor i in range(q):\n    x, y = list(map(int, input().split(' ')))\n    vectors.append(Vector(x-start.x, y-start.y))\n\nfor vec in vectors:\n    cos = base_vec.inner_product(vec)/(base_vec.abs*vec.abs)\n    b_cos = vec.abs*cos\n    vec_x = base_vec.constant_multipled(b_cos/base_vec.abs)\n    ans_x, ans_y = vec_x.x + start.x, vec_x.y + start.y\n    print('%.8f'%ans_x, '%.8f'%ans_y)\n"
  },
  {
    "language": "Python",
    "code": "from math import hypot\nx1, y1, x2, y2 = map(int, input().split())\ndx, dy = x2-x1, y2-y1\nvector_a = hypot(dx, dy)\nq = int(input())\n\nfor x3, y3 in (map(int, input().split()) for _ in [0]*q):\n    d = ((x3-x1)*dx + (y3-y1)*dy) / (vector_a**2)\n    print(x1+dx*d, y1+dy*d)\n"
  },
  {
    "language": "Python",
    "code": "sx, sy, ex, ey = (int(n) for n in input().split(\" \"))\ntrial = int(input())\nfor _ in range(trial):\n    x, y = (int(n) for n in input().split(\" \"))\n    if sx == ex:\n        print(sx, y)\n    elif sy == ey:\n        print(x, sy)\n    else:\n        grad = (ey - sy) / (ex - sx)\n        y_seg = sy - (grad * sx)\n        per_grad = -1 / grad\n        per_y_seg = y - (per_grad * x)\n        ans_x = (y_seg - per_y_seg) / (-1 * (grad - per_grad))\n        ans_y = per_grad * ans_x + per_y_seg\n        print(ans_x, ans_y)\n\n"
  },
  {
    "language": "Python",
    "code": "L1=input().split( )\n[xp1,yp1,xp2,yp2]=[int(L1[0]),int(L1[1]),int(L1[2]),int(L1[3])]\ndirection=[xp2-xp1,yp2-yp1]\nnorm_direc=[(xp2-xp1)/((xp2-xp1)**2+(yp2-yp1)**2)**(1/2),(yp2-yp1)/((xp2-xp1)**2+(yp2-yp1)**2)**(1/2)]\n\nq=int(input())\nL=[]\nfor i in range(q):\n    L2=input().split( )\n    L.append([int(L2[0]),int(L2[1])])\n\nPoint=[]\nfor i in range(q):\n    Point.append([(L[i][0]-xp1),(L[i][1]-yp1)])\n\nVec=[]\nfor i in range(q):\n    Vec.append([L[i][0]-xp1,L[i][1]-yp1])\nProj=[]\nfor i in range(q):\n    inter=Vec[i][0]*norm_direc[0]+Vec[i][1]*norm_direc[1]\n    Proj.append([norm_direc[0]*inter,norm_direc[1]*inter])\n\nL2=[]\n\nfor i in range(q):\n    L2.append([xp1+Proj[i][0],yp1+Proj[i][1]])\nfor i in range(q):\n    print(*L2[i])\n\n"
  },
  {
    "language": "Python",
    "code": "xp1,yp1,xp2,yp2 = map(int, input().split())\nq = int(input())\nr = (xp2-xp1,yp2-yp1)\n\ndef a(p1,p2):\n    s = (p1-xp1,p2-yp1)\n    d = r[0] * s[0] + r[1] * s[1]\n    a = xp1 + r[0] * d / (r[0]**2 + r[1]**2)\n    b = yp1 + r[1] * d / (r[0]**2 + r[1]**2)\n    return str(a),str(b)\n\nfor i in range(q):\n    x, y = map(int, input().split())\n    print(' '.join(a(x, y)))"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport collections\nimport math\n\n\nclass Vector2(collections.namedtuple(\"Vector2\", [\"x\",  \"y\"])):\n\n    def __add__(self, other):\n        return Vector2(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector2(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, scalar):  # cross product\n        return Vector2(self.x * scalar, self.y * scalar)\n\n    def __neg__(self):\n        return Vector2(-self.x, -self.y)\n\n    def __pos__(self):\n        return Vector2(+self.x, +self.y)\n\n    def __abs__(self):  # norm\n        return math.sqrt(float(self.x * self.x + self.y * self.y))\n\n    def dot(self, other):  # dot product\n        return self.x * other.x + self.y * other.y\n\n    def cross(self, other):  # cross product\n        return self.x * other.y - self.y * other.x\n\n\nif __name__ == '__main__':\n\n    a, b, c, d = map(int, input().split())\n    p1 = Vector2(a, b)\n    p2 = Vector2(c, d)\n    base = p2 - p1\n    q = int(input())\n\n    for _ in range(q):\n        e, f = map(int, input().split())\n        hypo = Vector2(e - a, f - b)\n        r = hypo.dot(base) / abs(base)**2\n        x = p1 + base * r\n        print(x.x, x.y)\n\n"
  },
  {
    "language": "Python",
    "code": "a,b,c,d = map(float,input().split())\na = complex(a,b)\nb = complex(c,d)\nn=int(input())\nfor i in range(n):\n  x,y=map(int,input().split())\n  c=complex(x,y)\n  q = b-a\n  c -= a\n  p = a+q*(c/q).conjugate()\n  print(\"{:.10} {:.10}\".format(p.real, p.imag))\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n0 0 3 4\n1\n2 5\n\noutput:\n3.1200000000 4.1600000000\n\"\"\"\n\nimport sys\n\n\ndef solve(_prj_info):\n    for point in _prj_info:\n        xp, yp = map(int, point)\n        p = xp + yp * 1j\n        hypo = p - p1\n        prj = p1 + base_vector * project(base_vector, hypo)\n        print('{:.10f} {:.10f}'.format(prj.real, prj.imag))\n\n    return _prj_info\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef project(a, b):\n    return dot(a, b) / dot(a, a)\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    base_info = _input[0].split()\n    q_num = int(_input[1])\n    prj_points = map(lambda x: x.split(), _input[2:])\n\n    x1, y1, x2, y2 = map(int, base_info)\n    p1, p2 = x1 + y1 * 1j, x2 + y2 * 1j\n    base_vector = p2 - p1\n    res = solve(prj_points)"
  },
  {
    "language": "Python",
    "code": "pt = []\nx1, y1, x2, y2 = map(int, input().split())\nq = int(input())\n\nfor _ in range(q):\n    xq, yq = map(int, input().split())\n    if x2 - x1 == 0:\n        pt.append([x1, yq])\n    else:\n        a1 = (y2-y1)/(x2-x1)\n        b1 = y1 - a1*x1\n        if a1 == 0:\n            pt.append([xq, y1])\n        else:\n            a2 = -1/a1\n            b2 = yq - a2*xq\n            x = (b2-b1)/(a1-a2)\n            y = a1*x + b1\n            pt.append([x, y])\n\nfor i in range(q):\n    print(pt[i][0], pt[i][1])\n\n"
  },
  {
    "language": "Python",
    "code": "x1,y1,x2,y2 = map(float,input().split())\nq = int(input())\nx,y = [],[]\nfor i in range(q):\n    x_t,y_t = map(float,input().split())\n    x.append(x_t)\n    y.append(y_t)\n\nif x1 == x2:\n    for i in range(q):\n        print(x1,y[i])\nelif y1 == y2:\n    for i in range(q):\n        print(x[i],y1)\nelse:\n    a = (y2-y1)/(x2-x1)\n    b = y1-a*x1\n    for i in range(q):\n        d = y[i]+(1/a)*x[i]\n        px = (d-b)/(a+1/a)\n        py = a*px+b\n        print(px,py)"
  },
  {
    "language": "Python",
    "code": "import math\nclass Point:\n\tdef __init__(self,x,y):\n\t\tself.x = x\n\t\tself.y = y\n\tdef __add__(self,p):\n\t\treturn Point(self.x+p.x,self.y+p.y)\n\tdef __sub__(self,p):\n\t\treturn Point(self.x-p.x,self.y-p.y)\n\tdef __mul__(self,p):\n\t\treturn Point(self.x*p,self.y*p)\n\ndef Dot(a,b):\n\treturn a.x*b.x + a.y*b.y\ndef Cross(a,b):\n\treturn a.x*b.y - a.y*b.x\ndef Dis(a,b):\n\treturn math.sqrt( (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y) )\n\nx1,y1,x2,y2 = map(int,input().split())\np1 = Point(x1,y1)\np2 = Point(x2,y2)\np1p2_dis = Dis(p1,p2)\n\nq = int(input())\nfor i in range(q):\n\tx,y = map(int,input().split())\n\tp = Point(x,y)\n\tdot_res = Dot(p-p1,p2-p1)\n\tlen = dot_res / p1p2_dis\n\tx = (p2-p1) * (len/p1p2_dis) + p1\n\tprint(x.x,x.y)\n\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n0 0 3 4\n1\n2 5\n\noutput:\n3.1200000000 4.1600000000\n\"\"\"\n\nimport sys\n\n\nclass Segment(object):\n    __slots__ = ('source', 'target')\n\n    def __init__(self, source, target):\n        self.source = complex(source)\n        self.target = complex(target)\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef project(s, p):\n    base_vector = s.target - s.source\n    prj_ratio = dot(p - s.source, base_vector) / pow(abs(base_vector), 2)\n    return s.source + base_vector * prj_ratio\n\n\ndef solve(_prj_points):\n    for point in _prj_points:\n        xp, yp = map(int, point)\n        p = xp + yp * 1j\n        prj = project(prj_segment, p)\n        print('{real:.10f} {imag:.10f}'.format(real=prj.real, imag=prj.imag))\n\n    return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n\n    line = tuple(map(int, _input[0].split()))\n    q_num = int(_input[1])\n    p1, p2 = (x + y * 1j for x, y in zip(line[::2], line[1::2]))\n    prj_segment = Segment(p1, p2)\n\n    prj_points = map(lambda x: x.split(), _input[2:])\n\n    solve(prj_points)"
  },
  {
    "language": "Python",
    "code": "from collections import defaultdict,deque\nimport sys,heapq,bisect,math,itertools,string,queue\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\ndef inp(): return int(input())\ndef inpl(): return list(map(int, input().split()))\ndef inpl_str(): return list(input().split())\n\n###########################\n#          幾何\n###########################\ndef sgn(a):\n    if a < -eps: return -1\n    if a >  eps: return  1\n    return 0\n\nclass Point:\n    def __init__(self,x,y):\n        self.x = x\n        self.y = y\n        pass\n\n    def tolist(self):\n        return [self.x,self.y]\n\n    def __add__(self,p):\n        return Point(self.x+p.x, self.y+p.y)\n    def __iadd__(self,p):\n        return self + p\n\n    def __sub__(self,p):\n        return Point(self.x - p.x, self.y - p.y)\n    def __isub__(self,p):\n        return self - p\n\n    def __truediv__(self,n):\n        return Point(self.x/n, self.y/n)\n    def __itruediv__(self,n):\n        return self / n\n\n    def __mul__(self,n):\n        return Point(self.x*n, self.y*n)\n    def __imul__(self,n):\n        return self * n\n\n    def __lt__(self,other):\n        tmp = sgn(self.x - other.x)\n        if tmp != 0:\n            return tmp < 0\n        else:\n            return sgn(self.y - other.y) < 0\n\n    def abs(self):\n        return math.sqrt(self.x**2+self.y**2)\n\n    def dot(self,p):\n        return self.x * p.x + self.y*p.y\n\n    def det(self,p):\n        return self.x * p.y - self.y*p.x\n\n    def arg(self,p):\n        return math.atan2(y,x)\n\n# 点の進行方向 a -> b -> c\ndef iSP(a,b,c):\n    tmp = sgn((b-a).det(c-a))\n    if tmp > 0:   return 1   # 左に曲がる場合\n    elif tmp < 0: return -1  # 右に曲がる場合\n    else: # まっすぐ\n        if sgn((b-a).dot(c-a)) < 0: return -2 # c-a-b の順\n        if sgn((a-b).dot(c-b)) < 0: return  2 # a-b-c の順\n        return 0 # a-c-bの順\n\n# ab,cd の直線交差\ndef isToleranceLine(a,b,c,d):\n    if sgn((b-a).det(c-d)) != 0: return 1 # 交差する\n    else:\n        if sgn((b-a).det(c-a)) != 0: return 0 # 平行\n        else: return -1 # 同一直線\n\n# ab,cd の線分交差 重複，端点での交差もTrue\ndef isToleranceSegline(a,b,c,d):\n    return sgn(iSP(a,b,c)*iSP(a,b,d))<=0 and sgn(iSP(c,d,a)*iSP(c,d,b)) <= 0\n\n# 直線ab と 直線cd の交点 (存在する前提)\ndef Intersection(a,b,c,d):\n    tmp1 = (b-a)*((c-a).det(d-c))\n    tmp2 = (b-a).det(d-c)\n    return a+(tmp1/tmp2)\n\n# 直線ab と 点c の距離\ndef DistanceLineToPoint(a,b,c):\n    return abs(((c-a).det(b-a))/((b-a).abs()))\n\n# 線分ab と 点c の距離\ndef DistanceSeglineToPoint(a,b,c):\n    if sgn((b-a).dot(c-a)) < 0: # <cab が鈍角\n        return (c-a).abs()\n    if sgn((a-b).dot(c-b)) < 0: # <cba が鈍角\n        return (c-b).abs()\n    return DistanceLineToPoint(a,b,c)\n\n# 直線ab への 点c からの垂線の足\ndef Vfoot(a,b,c):\n    d = c + Point((b-a).y,-(b-a).x)\n    return Intersection(a,b,c,d)\n\n# 多角形の面積\ndef PolygonArea(Plist):\n    Plist = ConvexHull(Plist)\n    L = len(Plist)\n    S = 0\n    for i in range(L):\n        tmpS = (Plist[i-1].det(Plist[i]))/2\n        S += tmpS\n    return S\n\n# 多角形の重心\ndef PolygonG(Plist):\n    Plist = ConvexHull(Plist)\n    L = len(Plist)\n    S = 0\n    G = Point(0,0)\n    for i in range(L):\n        tmpS = (Plist[i-1].det(Plist[i]))/2\n        S += tmpS\n        G += (Plist[i-1]+Plist[i])/3*tmpS\n    return G/S\n\n# 凸法\ndef ConvexHull(Plist):\n    Plist.sort()\n    L = len(Plist)\n    qu = deque([])\n    quL = 0\n    for p in Plist:\n        while quL >= 2 and iSP(qu[quL-2],qu[quL-1],p) == 1:\n            qu.pop()\n            quL -= 1\n        qu.append(p)\n        quL += 1\n\n    qd = deque([])\n    qdL = 0\n    for p in Plist:\n        while qdL >= 2 and iSP(qd[qdL-2],qd[qdL-1],p) == -1:\n            qd.pop()\n            qdL -= 1\n        qd.append(p)\n        qdL += 1\n\n    qd.pop()\n    qu.popleft()\n    hidari = list(qd) + list(reversed(qu)) # 左端開始，左回りPlist\n    return hidari\n\nx1,y1,x2,y2 = inpl()\na,b = Point(x1,y1), Point(x2,y2)\nq = inp()\nfor _ in range(q):\n    p = Point(*inpl())\n    print(*Vfoot(a,b,p).tolist())\n\n"
  },
  {
    "language": "Python",
    "code": "x1,y1,x2,y2=map(float,raw_input().split(\" \"))\nif y1==y2 or x1==x2:\n    if y1==y2:\n        t0=0\n        t1=-1\n    if x1==x2:\n        t1=0\n        t0=-1\nelse:\n    t0=(y2-y1)/(x2-x1)\n    b0=y1-t0*x1\n    t1=-(x2-x1)/(y2-y1)\n\nfor i in xrange(int(raw_input())):\n    px,py=map(float,raw_input().split(\" \"))\n    if t0==0 or t1==0:\n        if t0==0:\n            a=1.0\n            b=-t0\n            c=y1\n            d=0.0\n            e=-t1\n            f=px\n        if t1==0:\n            a=0.0\n            b=-t0\n            c=x1\n            d=1.0\n            e=-t0\n            f=py\n    else:\n        b1=py-t1*px\n        a,b,c,d,e,f=1.0,-t0,b0,1.0,-t1,b1\n    kouten_y=(c*e-f*b)/(a*e-b*d)\n    kouten_x=(a*f-c*d)/(a*e-b*d)\n    print \"{0:.10f} {1:.10f}\".format(kouten_x,kouten_y)"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point:\n    def __init__(self,x,y):\n        self.x = x\n        self.y = y\n\n    def __add__(self,a):\n        return self.__class__(self.x+a.x,self.y+a.y)\n\n    def __sub__(self,a):\n        return self.__class__(self.x-a.x,self.y-a.y)\n\n    def __mul__(self,d):\n        return self.__class__(self.x*d,self.y*d)\n\n    def __truediv__(self,d):\n        return self.__class__(self.x/d,self.y/d)\n\n    def __str__(self):\n        return '%.10f %.10f'%(self.x,self.y)\n\n    def abs(self):\n        return self.norm()**(1.0/2.0)\n\n    def norm(self):\n        return (self.x*self.x+self.y*self.y)\n\n    def rotate(self,d):\n        r = math.pi*d/180.0\n        return self.__class__( self.x*math.cos(r)-self.y*math.sin(r),\n                               self.x*math.sin(r)+self.y*math.cos(r))\n\n    def dot(self,p):\n        return (self.x*p.x+self.y*p.y)\n\nclass Segment:\n    def __init__(self,p1,p2):\n        self.p1 = p1\n        self.p2 = p2\n\ndef reflect(s,p):\n    v = s.p2-s.p1\n    r = v.dot(p-s.p1)/v.norm()\n    return s.p1+v*r\n\ndef main():\n    a,b,c,d = map(float,input().split())\n    s = Segment(Point(a,b),Point(c,d))\n    q = int(input())\n    for _ in range(q):\n        e,f = map(float,input().split())\n        p = Point(e,f)\n        print (reflect(s,p))\n\n\nif __name__ == '__main__':\n    main()\n\n\n"
  },
  {
    "language": "Python",
    "code": "# Aizu Problem CGL_1_A: Projection\n#\nimport sys, math, os\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input2.txt\", \"rt\")\n\n\nx1, y1, x2, y2 = [int(_) for _ in input().split()]\nsx = x2 - x1\nsy = y2 - y1\ns_sq = sx**2 + sy**2\n\nQ = int(input())\nfor q in range(Q):\n    px, py = [int(_) for _ in input().split()]\n    x = x1 + (px * sx + py * sy) * sx / s_sq\n    y = y1 + (px * sx + py * sy) * sy / s_sq\n    print(\"%.10f %.10f\" % (x, y))"
  },
  {
    "language": "Python",
    "code": "class Point():\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\t\n\noutput_list = []\n\n\ninit_point = map(float, raw_input().split())\n\np0 = Point(init_point[0], init_point[1])\np1 = Point(init_point[2], init_point[3])\n\n\nq = int(raw_input())\ndatalist = [map(float, raw_input().split()) for i in range(q)]\n\n\n#p0--p1 : y=ax+b\n#p2--t  : y=cx+d\n\nif (p0.x - p1.x) == 0:\n\tfor data in datalist:\n\t\tp2 = Point(data[0], data[1])\n\t\toutput_list.append( (p0.x, p2.y) )\n\nelif (p0.y - p1.y) == 0:\n\tfor data in datalist:\n\t\tp2 = Point(data[0], data[1])\n\t\toutput_list.append( (p2.x, p0.y) )\n\t\t\nelse:\n\ta = (p0.y - p1.y) / (p0.x - p1.x)\n\tc = -1/a\n\tb = p0.y - a*p0.x\n\t\n\tfor data in datalist:\n\t\tp2 = Point(data[0], data[1])\n\t\t\n\t\td = p2.y - c*p2.x\n\t\t\n\t\tX = (-b+d) / (a-c)\n\t\tY = a*X + b\n\t\t\n\t\toutput_list.append( (X,Y) )\n\t\t\nfor x, y in output_list:\n\tprint \"%.10f %.10f\" % (x, y)\n\t"
  },
  {
    "language": "Python",
    "code": "xp0,yp0,xp1,yp1 = map(float,raw_input().split())\nq = int(raw_input())\nfor i in range(q):\n    xp2,yp2 = map(float,raw_input().split())\n    p0p2 = (xp2-xp0,yp2-xp0)\n    p0p1 = (xp1-xp0,yp1-yp0)\n    k = ((p0p2[0]*p0p1[0]+p0p2[1]*p0p1[1])/(p0p1[0]**2 + p0p1[1]**2))\n    p0T = (k*p0p1[0],k*p0p1[1])\n    OT = (xp0+p0T[0],yp0+p0T[1])\n    print OT[0],OT[1]"
  },
  {
    "language": "Python",
    "code": "def inner_product(v1, v2):\n    return v1.real * v2.real + v1.imag * v2.imag\n\n\n# ????????????b???????????????a??????????????´????????£?°???±???????????????????????????\ndef projection(a, b):\n    return a * inner_product(a, b) / (abs(a) ** 2)\n\n\ndef solve(p0, p1, p2):\n    a = p1 - p0\n    b = p2 - p0\n    pro = projection(a, b)\n    t = p0 + pro\n    return t\n\n\ndef main():\n    x_p0, y_p0, x_p1, y_p1 = map(float, input().split())\n    p0 = complex(x_p0, y_p0)\n    p1 = complex(x_p1, y_p1)\n    q = int(input())\n    for _ in range(q):\n        p2 = complex(*map(float, input().split()))\n        t = solve(p0, p1, p2)\n        print(\"{:.10f} {:.10f}\".format(t.real, t.imag))\n\n\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "language": "Python",
    "code": "import math\n\n\nclass Point:\n    EPS = 1 << 10\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Point(self.x+other.x, self.y+other.y)\n\n    def __sub__(self, other):\n        return Point(self.x-other.x, self.y-other.y)\n\n    def __mul__(self, other):\n        return Point(self.x*other, self.y*other)\n\n    def __floordiv__(self, other):\n        return Point(self.x/other.x, self.y/other.y)\n\n    def __abs__(self):\n        return math.sqrt(self.norm())\n\n    def norm(self):\n        return self.x**2 + self.y**2\n\n    def __eq__(self, other):\n        EPS = self.__class__.EPS\n        return abs(self.x-other.x) < EPS and abs(self.x-other.x) < EPS\n\n    def dot(self, other):\n        return self.x*other.x + self.y*other.y\n\n    def cross(self, other):\n        return self.x*other.y - self.y*other.x\n\n    def isOrthogonal(self, a, b):\n        return a.dot(b) == 0.0\n\n    def isParallel(self, a, b):\n        return a.cross(b) == 0.0\n\n    def __str__(self):\n        return str(self.x)+' '+str(self.y)\n\n\nclass Vector(Point):\n    pass\n\n\nclass Segment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n    def isOrthogonal(s1, s2):\n        return (s1.p2-s1.p1).dot(s2.p2-s2.p1) == 0.0\n\n    def isParallel(s1, s2):\n        return (s1.p2-s1.p1).cross(s2.p2-s2.p1) == 0.0\n\n\nclass Line(Segment):\n    pass\n\n\nclass Circle:\n    def __init__(self, c, r):\n        self.c = c\n        self.r = r\n\n\nclass Polygon:\n    def __init__(self, *points):\n        self.points = points\n\n\ndef project(s, p):\n    base = s.p2 - s.p1\n    r = (p-s.p1).dot(base) / base.norm()\n    return s.p1 + base * r\n\n\n\nx1, y1, x2, y2 = map(int, input().split())\np1, p2 = Point(x1, y1), Point(x2, y2)\ns = Segment(p1, p2)\n\nq = int(input())\nfor i in range(q):\n    p = Point(*map(int, input().split()))\n    print(project(s, p))\n\n"
  },
  {
    "language": "Python",
    "code": "\npoints=[]\npoints=int(input().split())\np1,q1,p2,q2=points[0:3]\n\nn=int(input())\nfor i in range(n):\n    point=[]\n    point=int(input().split())\n    x=((q2-q1)*x+q1*((q2-q1)*(q2-q1))/(p2-p1))/((q2-q1)*(q2-q1)/(p2-p1)+(p2-p1))\n    y=(x-q1)*(q2-q1)/(p2-p1)-q1\n    print('{} {}'.format(x,y))\n    "
  },
  {
    "language": "Python",
    "code": "# coding: utf-8\nfrom __future__ import division\nimport sys\nimport math\n\nclass Vertex(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def length(self):\n        return math.sqrt(self.dot(self))\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def unitify(self):\n        return self / self.length()\n\n    def __add__(self, other):\n        return Vertex(self.x + other.x, self.y + other.y)\n\n    def __rmul__(self, c):\n        return Vertex(c * self.x, c * self.y)\n\n    def __truediv__(self, c):\n        return Vertex(self.x / c, self.y / c)\n\ndef main():\n    x0, y0, x1, y1 = map(int, raw_input().split())\n    v0 = Vertex(x0, y0)\n    u1 = Vertex(x1 - x0, y1 - y0).unitify()\n    n = input()\n    for _ in xrange(n):\n        x2, y2 = map(int, raw_input().split())\n        v2 = Vertex(x2 - x0, y2 - y0)\n        t = v0 + u1.dot(v2) * u1\n        print t.x, t.y\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom itertools import starmap\nreadline = sys.stdin.readline\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ns = Segment(*starmap(complex, zip(*[map(int, readline().split())] * 2)))\nn = int(readline())\nfor _ in [0] * n:\n    p2 = complex(*map(float, readline().split()))\n    ap = project(s, p2)\n    print(ap.real, ap.imag)"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\nreadline = stdin.readline\n\ndef main():\n    x1, y1, x2, y2 = map(int, readline().split())\n    p1, p2 = x1 + y1 * 1j, x2 + y2 * 1j\n    unit = (p2 - p1) / abs(p2 - p1)\n    q = int(readline())\n    for i in range(q):\n        xi, yi = map(int, readline().split())\n        pi = xi + yi * 1j\n        cross = p1 + unit * dot(unit, pi)\n        print('{:.10f} {:.10f}'.format(cross.real, cross.imag))\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\nmain()"
  },
  {
    "language": "Python",
    "code": "from math import pi, cos, sin, atan2\nEPS = 10**(-9)\n\ndef eq(value1, value2):\n    return abs(value1-value2) <= EPS\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.arg = atan2(y, x) # -PI ~ PI\n    \n    def __str__(self):\n        return \"{0:.8f} {1:.8f}\".format(self.x, self.y)\n    \n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n    \n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n    \n    def __mul__(self, scal):\n        return Point(self.x*scal, self.y*scal)\n    \n    def __truediv__(self, scal):\n        return Point(self.x/scal, self.y/scal)\n    \n    def __eq__(self, other):\n        return eq(self.x, other.x) and eq(self.y, other.y)\n\n    # 原点からの距離\n    def __abs__(self):\n        return (self.x**2+self.y**2)**0.5\n    \n# 原点を中心にrad角だけ回転した点\ndef Rotation(vec: Point, rad):\n    return Point(vec.x*cos(rad)-vec.y*sin(rad), vec.x*sin(rad)+vec.y*cos(rad))\n\n\nclass Circle():\n    def __init__(self, p, r):\n        self.p = p\n        self.r = r\n\n\nclass Line():\n    # 点a, bを通る\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.arg = (a-b).arg % pi\n    \n    def __str__(self):\n        return \"[({0}, {1}) - ({2}, {3})]\".format(self.a.x, self.a.y, self.b.x, self.b.y)\n\n    # pointを通って平行\n    def par(self, point):\n        return Line(point, point+(self.a-self.b))\n\n    # pointを通って垂直\n    def tan(self, point):\n        return Line(point, point + Rotation(self.a-self.b, pi/2))\n\n\nclass Segment(Line):\n    def __init__(self, a, b):\n        super(Line, self).__init__(a, b)\n\n\n# 符号付き面積\ndef cross(vec1: Point, vec2: Point):\n    return vec1.x*vec2.y - vec1.y*vec2.x\n\n# 内積\ndef dot(vec1: Point, vec2: Point):\n    return vec1.x*vec2.x + vec1.y*vec2.y\n\n# 点a->b->cの回転方向\ndef ccw(a, b, c):\n    if cross(b-a, c-a) > EPS: return +1 # COUNTER_CLOCKWISE\n    if cross(b-a, c-a) < -EPS: return -1 # CLOCKWISE\n    if dot(c-a, b-a) < -EPS: return +2 # c -> a -> b\n    if abs(b-a) < abs(c-a): return -2 # a -> b -> c\n    return 0 # a -> c -> b\n\n\n# pのlへの射影\ndef projection(l, p):\n    t = dot(l.b-l.a, p-l.a) / abs(l.a-l.b)**2\n    return l.a + (l.b-l.a)*t\n\n# pのlによる反射\ndef reflection(l, p):\n    return p + (projection(l, p) - p)*2\n\ndef isPararell(l1, l2):\n    return eq(cross(l1.a-l1.b, l2.a-l2.b), 0)\n\ndef isVertical(l1, l2):\n    return eq(dot(l1.a-l1.b, l2.a-l2.b), 0)\n\n\ndef isIntersect_lp(l, p):\n    return abs(ccw(l.a, l.b, p)) != 1\n\ndef isIntersect_ll(l1, l2):\n    return not isPararell(l1, l2) or isIntersect_lp(l1, l2.a)\n\ndef isIntersect_sp(s, p):\n    return ccw(s.a, s.b, p) == 0\n\ndef isIntersect_ss(s1, s2):\n    return ccw(s1.a, s1.b, s2.a)*ccw(s1.a, s1.b, s2.b) <= 0 and ccw(s2.a, s2.b, s1.a)*ccw(s2.a, s2.b, s1.b) <= 0\n\ndef isIntersect_ls(l, s):\n    return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS\n\ndef isIntersect_cp(c, p):\n    return abs(abs(c.p - p) - c.r) < EPS\n\ndef isIntersect_cl(c, l):\n    return distance_lp(l, c.p) <= c.r + EPS\n\ndef isIntersect_cs(c, s):\n    pass\n\ndef isIntersect_cc(c1, c2):\n    pass\n\n\ndef distance_pp(p1, p2):\n    return abs(p1-p2)\n\ndef distance_lp(l, p):\n    return abs(projection(l,p)-p)\n\ndef distance_ll(l1, l2):\n    return 0 if isIntersect_ll(l1, l2) else distance_lp(l1, l2.a)\n\ndef distance_sp(s, p):\n    r = projection(s, p)\n    if isIntersect_sp(s, r): return abs(r-p)\n    return min(abs(s.a-p), abs(s.b-p))\n\ndef distance_ss(s1, s2):\n    if isIntersect_ss(s1, s2): return 0\n    return min([distance_sp(s1, s2.a), distance_sp(s1, s2.b), distance_sp(s2, s1.a), distance_sp(s2, s1.b)])\n\ndef distance_ls(l, s):\n    if isIntersect_ls(l, s): return 0\n    return min(distance_lp(l, s.a), distance_lp(l, s.b))\n\n\ndef crosspoint_ll(l1, l2):\n    A = cross(l1.b - l1.a, l2.b - l2.a)\n    B = cross(l1.b - l1.a, l1.b - l2.a)\n    if eq(abs(A), 0) and eq(abs(B), 0): return l2.a\n    return l2.a + (l2.b - l2.a) * B / A\n\ndef crosspoint_ss(s1, s2):\n    return crosspoint_ll(s1, s2)\n\ndef crosspoint_lc(l, c):\n    if eq(distance_lp(l, c.p), c.r): return [c.p]\n    p = projection(l, c.p)\n    e = (l.b - l.a) / abs(l.b-l.a)\n    dis = (c.r**2-abs(p-c.p)**2)**0.5\n    return [p + e*dis, p - e*dis]\n\ndef crosspoint_sc(s, c):\n    pass\n\ndef crosspoint_cc(c1, c2):\n    d = abs(c1.p-c2.p)\n    if not abs(c1.r-c2.r) <= d <= c1.r+c2.r:\n        return []\n    mid_p = (c2.p * (c1.r**2-c2.r**2+d**2) + c1.p * (c2.r**2-c1.r**2+d**2)) / (2*d**2)\n    tanvec = Rotation(c1.p-c2.p, pi/2)\n    return crosspoint_lc(Line(mid_p, mid_p+tanvec), c1)\n\n\n# pからのcの接点\ndef tangent_cp(c, p):\n    return crosspoint_cc(c, Circle(p, (abs(p-c.p)**2 - c.r**2)**0.5))\n\n\n\n\n\nimport sys\ninput = sys.stdin.readline\n\ndef verify_1A():\n    p1x, p1y, p2x, p2y = map(int, input().split())\n    l = Line(Point(p1x, p1y), Point(p2x, p2y))\n    Q = int(input())\n    Query = [list(map(int, input().split())) for _ in range(Q)]\n    for px, py in Query:\n        p = Point(px, py)\n        print(projection(l, p))\n\nverify_1A()\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nclass Point():\n    def __init__(self, x=None, y=None):\n        self.x = x\n        self.y = y\n\nclass Vector():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.abs = math.sqrt(x*x + y*y)\n\n    def constant_multipled(self, c):\n        return Vector(self.x*c, self.y*c)\n\n    def inner_product(self, vec):\n        return self.x*vec.x + self.y*vec.y\n\nx1, y1, x2, y2 = list(map(int, input().split(' ')))\nstart = Point(x1, y1)\nbase_vec = Vector(x2-x1, y2-y1)\nq = int(input())\nvectors = []\nfor i in range(q):\n    x, y = list(map(int, input().split(' ')))\n    vectors.append(Vector(x-start.x, y-start.y))\n\nfor vec in vectors:\n    if vec.abs == 0:\n        ans_x, ans_y = 0, 0\n        print('%.8f'%ans_x, '%.8f'%ans_y)\n        continue\n    cos = base_vec.inner_product(vec)/(base_vec.abs*vec.abs)\n    b_cos = vec.abs*cos\n    vec_x = base_vec.constant_multipled(b_cos/base_vec.abs)\n    ans_x, ans_y = vec_x.x + start.x, vec_x.y + start.y\n    print('%.8f'%ans_x, '%.8f'%ans_y)\n\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=jp\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\nclass Point(object):\n    epsilon = 1e-10\n\n    def __init__(self, x=0.0, y=0.0):\n        if isinstance(x, tuple):\n            self.x = x[0]\n            self.y = x[1]\n        else:\n            self.x = x\n            self.y = y\n\n    # ????????????\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Point(other * self.x, other * self.y)\n\n    def __truediv__(self, other):\n        return Point(other / self.x, other / self.y)\n\n    def __lt__(self, other):\n        if self.x == other.x:\n            return self.y < other.y\n        else:\n            return self.x < other.x\n\n    def __eq__(self, other):\n        from math import fabs\n        if fabs(self.x - other.x) < Point.epsilon and fabs(self.y - other.y) < Point.epsilon:\n            return True\n        else:\n            return False\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        from math import sqrt\n        return sqrt(self.norm())\n\n\nclass Vector(Point):\n    def __init__(self, x=0.0, y=0.0):\n        if isinstance(x, tuple):\n            self.x = x[0]\n            self.y = x[1]\n        elif isinstance(x, Point):\n            self.x = x.x\n            self.y = x.y\n        else:\n            self.x = x\n            self.y = y\n\n    # ????????????\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Vector(other * self.x, other * self.y)\n\n    def __truediv__(self, other):\n        return Vector(other / self.x, other / self.y)\n\n    @classmethod\n    def dot(cls, a, b):\n        return a.x * b.x + a.y * b.y\n\n    @classmethod\n    def cross(cls, a, b):\n        return a.x * b.y - a.y * b.x\n\n    @classmethod\n    def is_orthogonal(cls, a, b):\n        return Vector.dot(a, b) == 0.0\n\n    @classmethod\n    def is_parallel(cls, a, b):\n        return Vector.cross(a, b) == 0.0\n\n\nclass Segment(object):\n    def __init__(self, p1=Point(), p2=Point()):\n        if isinstance(p1, Point):\n            self.p1 = p1\n            self.p2 = p2\n        elif isinstance(p1, tuple):\n            self.p1 = Point(p1[0], p1[1])\n            self.p2 = Point(p2[0], p2[1])\n\n    @classmethod\n    def is_orthogonal(cls, s1, s2):\n        a = Vector(s1.p2 - s1.p1)\n        b = Vector(s2.p2 - s2.p1)\n        return Vector.is_orthogonal(a, b)\n\n    @classmethod\n    def is_parallel(cls, s1, s2):\n        a = Vector(s1.p2 - s1.p1)\n        b = Vector(s2.p2 - s2.p1)\n        return Vector.is_parallel(a, b)\n\n\nclass Line(Segment):\n    pass\n\n\nclass Cirle(object):\n    def __init__(self, c=Point(), r=0.0):\n        self.c = c\n        self.r = r\n\n\ndef solve(s, p):\n    base = Vector(s.p2 - s.p1)\n    a = Vector(p - s.p1)\n    r = Vector.dot(a, base)\n    r /= base.norm()\n    return s.p1 + base * r\n\n\ndef main(args):\n    x_p1, y_p1, x_p2, y_p2 = map(int, input().split())\n    q = int(input())\n    s = Segment((x_p1, y_p1), (x_p2, y_p2))\n    for _ in range(q):\n        x, y = map(int, input().split())\n        p = Point(x, y)\n        result = solve(s, p)\n        print('{:.10f} {:.10f}'.format(result.x, result.y))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"
  },
  {
    "language": "Python",
    "code": "EPS = 0.0000000001\n\nclass Point:\n    \n    global EPS\n    \n    def __init__(self, x = 0, y = 0):\n        self.x = x\n        self.y = y\n        \n        \n    def __add__(a, b):\n        s = a.x + b.x\n        t = a.y + b.y\n        return Point(s, t)\n        \n    def __sub__(a, b):\n        s = a.x - b.x\n        t = a.y - b.y\n        return Point(s, t)\n            \n    def __mul__(self, a):\n        s = a * self.x\n        t = a * self.y\n        return Point(s, t)\n        \n    def __truediv__(self, a):\n        s = self.x / a\n        t = self.y / a\n        return Point(s, t)\n            \n            \n            \n            \n    def norm(self):\n        return self.x * self.x + self.y * self.y\n        \n    def abs(self):\n        return self.norm() ** 0.5\n            \n    \n            \n            \n    def __eq__(self, other):\n        return abs(self.x - other.y) < self.EPS and abs(self.y - other.y) < self.EPS\n            \n            \n            \n    def dot(self, b):\n        return self.x * b.x + self.y * b.y\n        \n    def cross(self, b):\n        return self.x * b.y - self.y * b.x\n    \n    \nclass Segment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\ndef project(s, p):\n    base = s.p2 - s.p1\n    hypo = p - s.p1\n    r = hypo.dot(base) / base.norm()\n    return s.p1 + base * r\n\n\n\nnums=list(map(int,input().split()))\ns = Segment(Point(nums[0], nums[1]), Point(nums[2], nums[3]))\n\nn = int(input())\nfor i in range(n):\n    nums=list(map(int,input().split()))\n    p = Point(nums[0], nums[1])\n    x = project(s, p)\n    print(x.x, x.y)\n\n\n\n\n\n\n\n"
  },
  {
    "language": "Python",
    "code": "pp  = list(map(int, input().split()))\nn = int(input())\n\ndef project(bb, p=pp):\n    ans = []\n    a = (p[0]-p[2], p[1]-p[3])\n    b = (bb[0]-p[0], bb[1]-p[1])\n    c = dot(a,b)/length(a)**2\n    ans += [c*i for i in a] \n    print(ans[0]+p[0], ans[1]+p[1])\n    \n\ndef length(vector):\n    ans = 0\n    for i in vector:\n        ans += i**2\n    return ans**(1/2)\n    \n    \ndef dot(a, b):\n    n = len(a)\n    if n != len(b):\n        return None\n    ans = 0\n    for i, j in zip(a, b):\n        ans += i*j\n    return ans\n    \nfor i in range(n):\n    b = list(map(int, input().split()))\n    project(b)\n"
  },
  {
    "language": "Python",
    "code": "import sys\nfrom itertools import starmap\nreadline = sys.stdin.readline\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ns = Segment(*(starmap(complex, zip(*[map(int, readline().split())] * 2))))\nn = int(readline())\nfor _ in [0] * n:\n    p2 = complex(*map(float, readline().split()))\n    ap = project(s, p2)\n    print(ap.real, ap.imag)"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n0 0 3 4\n1\n2 5\n\noutput:\n3.1200000000 4.1600000000\n\"\"\"\n\nimport sys\n\n\nclass Segment(object):\n    __slots__ = ('source', 'target')\n\n    def __init__(self, source, target):\n        self.source = complex(source)\n        self.target = complex(target)\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef project(s, p):\n    base_vector = s.target - s.source\n    prj_ratio = dot(p - s.source, base_vector) / pow(abs(base_vector), 2)\n    return s.source + base_vector * prj_ratio\n\n\ndef solve(_prj_points):\n    for point in _prj_points:\n        xp, yp = map(int, point)\n        p = xp + yp * 1j\n        prj = project(prj_segment, p)\n        print('{real:.10f} {imag:.10f}'.format(real=prj.real, imag=prj.imag))\n\n    return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n\n    line = tuple(map(int, _input[0].split()))\n    p1, p2 = (x + y * 1j for x, y in zip(line[::2], line[1::2]))\n    prj_segment = Segment(p1, p2)\n\n    q_num = int(_input[1])\n    prj_points = map(lambda x: x.split(), _input[2:])\n\n    solve(prj_points)"
  },
  {
    "language": "Python",
    "code": "import math\n\nHORIZONTAL = 0\nVERTICAL = 1\nELSE = 2\nmode = ELSE\n\nx_p1, y_p1, x_p2, y_p2 = [int(i) for i in input().split()]\nif x_p2-x_p1 == 0:\n    mode = VERTICAL\nelif y_p2-y_p1 == 0:\n    mode = HORIZONTAL\nelse:\n    a = (y_p2-y_p1)/(x_p2-x_p1)\n    b = y_p1 - a * x_p1\n\nq = int(input())\nfor _ in range(q):\n    x_p0, y_p0 = [int(i) for i in input().split()]\n    u = x_p0-x_p1\n    v = y_p0-y_p1\n    if mode == VERTICAL:\n        print(x_p1, y_p0)\n    elif mode == HORIZONTAL:\n        print(x_p0, y_p1)\n    else:\n        x = (x_p0/a+y_p0-b)/(a+1/a)\n        y = a* x + b\n        print(x, y)\n"
  },
  {
    "language": "Python",
    "code": "def dot(a,b):\n    return a[0]*b[0] + a[1]*b[1]\n\nx1,y1,x2,y2 = [int(i) for i in input().split()] \nq = int(input())\nfor i in range(q):\n    x,y = [int(i) for i in input().split()]\n    a = [x2-x1,y2-y1]\n    b = [x-x1,y-y1]\n    co = dot(a,b) / dot(a,a)\n    print(a[0]*co,a[1]*co)"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\n0 0 3 4\n1\n2 5\n\noutput:\n3.1200000000 4.1600000000\n\"\"\"\n\nimport sys\n\n\nclass Segment(object):\n    __slots__ = ('source', 'target')\n\n    def __init__(self, source, target):\n        self.source = complex(source)\n        self.target = complex(target)\n\n\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\n\n\ndef project(s, p):\n    base_vector = s.target - s.source\n    prj_ratio = dot(p - s.source, base_vector) / pow(abs(base_vector), 2)\n    return s.source + base_vector * prj_ratio\n\n\ndef solve(_prj_points):\n    for point in _prj_points:\n        xp, yp = map(int, point)\n        p = xp + yp * 1j\n        prj = project(prj_segment, p)\n        print('{real:.10f} {imag:.10f}'.format(real=prj.real, imag=prj.imag))\n\n    return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n\n    line = tuple(map(int, _input[0].split()))\n    p1, p2 = (x + y * 1j for x, y in zip(line[::2], line[1::2]))\n    prj_segment = Segment(p1, p2)\n\n    q_num = int(_input[1])\n    prj_points = map(lambda x: x.split(), _input[2:])\n\n    solve(prj_points)"
  },
  {
    "language": "Python",
    "code": "def dot(a,b):return a[0]*b[0]+a[1]*b[1]\ndef projection(a,b):return [x*dot(a,b)/dot(a,a) for x in a]\n\nx1,y1,x2,y2 = [int(i) for i in input().split()]\na = [x2-x1,y2-y1]\nq = int(input())\nfor i in range(q):\n x,y = [int(i) for i in input().split()]\n b = [x-x1,y-y1]\n c = projection(a,b)\n print(c[0]+x1,c[1]+y1)"
  },
  {
    "language": "Python",
    "code": "EPS = 10**(-9)\ndef is_equal(a,b):\n    return abs(a-b) < EPS\n\ndef norm(v,i):\n    import math\n    ret = 0\n    n = len(v)\n    for j in range(n):\n        ret += abs(v[j])**i\n    return math.pow(ret,1/i)\n\nclass Vector(list):\n    \"\"\"\n    ベクトルクラス\n    対応演算子\n    +  : ベクトル和 \n    -  : ベクトル差\n    *  : スカラー倍、または内積\n    ** : 外積\n    += : ベクトル和\n    -= : ベクトル差\n    *= : スカラー倍\n    /= : スカラー倍\n\n    メソッド\n    self.norm(i) : L{i}ノルムを計算\n    \"\"\"\n    def __add__(self,other):\n        n = len(self)\n        ret = [0]*n\n        for i in range(n):\n            ret[i] = super().__getitem__(i) + other.__getitem__(i)\n        return self.__class__(ret)\n    \n    def __radd__(self,other):\n        n = len(self)\n        ret = [0]*n\n        for i in range(n):\n            ret[i] = other.__getitem__(i) + super().__getitem__(i)\n        return self.__class__(ret)\n    \n    def __iadd__(self, other):\n        n = len(self)\n        for i in range(n):\n            self[i] += other.__getitem__(i)\n        return self\n\n    def __sub__(self,others):\n        n = len(self) \n        ret = [0]*n\n        for i in range(n):\n            ret[i] = super().__getitem__(i) - others.__getitem__(i)\n        return self.__class__(ret)\n\n    def __iadd__(self, other):\n        n = len(self)\n        for i in range(n):\n            self[i] -= other.__getitem__(i)\n        return self\n\n    def __rsub__(self,others):\n        n = len(self) \n        ret = [0]*n\n        for i in range(n):\n            ret[i] = others.__getitem__(i) - super().__getitem__(i)\n        return self.__class__(ret)\n    \n    def __mul__(self,other):\n        n = len(self)\n        if isinstance(other,list):\n            ret = 0\n            for i in range(n):\n                ret += super().__getitem__(i)*other.__getitem__(i)\n            return ret\n        else:\n            ret = [0]*n\n            for i in range(n):\n                ret[i] = super().__getitem__(i)*other\n            return self.__class__(ret)\n\n    def __rmul__(self,other):\n        n = len(self)\n        if isinstance(other,list):\n            ret = 0\n            for i in range(n):\n                ret += super().__getitem__(i)*other.__getitem__(i)\n            return ret\n        else:\n            ret = [0]*n\n            for i in range(n):\n                ret[i] = super().__getitem__(i)*other\n            return self.__class__(ret)\n    \n    \n    def __truediv__(self,other):\n        \"\"\"\n        ベクトルのスカラー除法\n        Vector/scalar\n        \"\"\"\n        n = len(self)\n        ret = [0]*n\n        for i in range(n):\n            ret[i] = super().__getitem__(i)/other\n        return self.__class__(ret)\n    \n    def norm(self,i):\n        \"\"\"\n        L{i}ノルム\n        self.norm(i)\n        \"\"\"\n        return norm(self,i)\n    \n    def __pow__(self,other):\n        \"\"\"\n        外積\n        self**other\n        \"\"\"\n        n = len(self)\n        ret = [0]*3\n        x = self[:]\n        y = other[:]\n        if n == 2:\n            x.append(0)\n            y.append(0)\n        if n == 2 or n == 3:\n            for i in range(3):\n                ret[0],ret[1],ret[2] = x[1]*y[2]-x[2]*y[1],x[2]*y[0]-x[0]*y[2],x[0]*y[1]-x[1]*y[0]\n            ret = Vector(ret)\n            if n == 2:\n                return ret.norm(2)\n            else:\n                return ret\n\nclass Segment:\n    def __init__(self,v1,v2):\n        self.v1 = v1\n        self.v2 = v2\n\nclass Line(Segment):\n    def get_unit_vec(self):\n        return (self.v2-self.v1)/norm(self.v2-self.v1,2)\n    \n    def projection(self,vector):\n        unit_vec = self.get_unit_vec()\n        t = unit_vec*(vector-self.v1)\n        return self.v1 + t*unit_vec\n    \n    def is_vertical(self,other):\n        return is_equal(0,self.get_unit_vec()*other.get_unit_vec())\n    \n    def is_horizontal(self,other):\n        return is_equal(0,self.get_unit_vec()**other.get_unit_vec())\n\n\n\ntmp = list(map(int,input().split()))\np1 = Vector(tmp[:2])\np2 = Vector(tmp[2:])\nL = Line(p1,p2)\nq = int(input())\nfor i in range(q):\n    p = Vector(map(int,input().split()))\n    print(*L.projection(p))\n\n\n\n\n"
  },
  {
    "language": "Python",
    "code": "def dot(a, b):\n  return a.real * b.real + a.imag * b.imag\n\ndef projection(a, b):\n  return a * dot(a, b) / (abs(a) ** 2)\n\n#複素平面の座標はクラスだから直接加算できr\ndef solve(p0,p1,p2):\n  a=p1-p0\n  b=p2-p0\n  pro=projection(a,b)\n  t=p0+pro\n  return t\n\ndef main():\n  x0,y0,x1,y1=map(float,input().split())\n  p0=complex(x0,y0)\n  p1=complex(x1,y1)\n  q=int(input())\n  for i in range(q):\n    p2=complex(*map(float,input().split()))\n    t=solve(p0,p1,p2)\n    print(\"{:.10f}{:.10f}\".format(t.real,t.imag))\n\nmain()\n\n\n\n\n"
  },
  {
    "language": "Python",
    "code": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n    def __mul__(self, other):\n        return Point(self.x * other, self.y * other)\n    def __floordiv__(self, other):\n        return Point(self.x / other, self.y / other)\n    def __repr__(self):\n        return str(self.x) + ' ' + str(self.y)\n\nclass Vector(Point):\n    pass\n\nclass Segment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\ndef points_to_vector(p1, p2):\n    x = p1.x - p2.x\n    y = p1.y - p2.y\n    return Vector(x, y)\n\ndef vector(p):\n    return Vector(p.x, p.y)\n\ndef dot(v1, v2):\n    return v1.x * v2.x + v1.y * v2.y\n\ndef cross(v1, v2):\n    return v1.x * v2.y - v1.y * v2.x\n\ndef norm(v):\n    return v.x**2 + v.y**2\n\ndef project(s, p):\n    base = points_to_vector(s.p1, s.p2)\n    hypo = points_to_vector(p, s.p1)\n    r = dot(hypo, base) / norm(base)\n    return s.p1 + base * r\n\n\nimport sys\n# sys.stdin = open('input.txt')\n\ns = list(map(int, input().split()))\np1 = Point(s[0], s[1])\np2 = Point(s[2], s[3])\nsegment = Segment(p1, p2)\n\nq = int(input())\nfor i in range(q):\n    x, y = map(int, input().split())\n    p = Point(x, y)\n    ans = project(segment, p)\n    print(ans)\n"
  },
  {
    "language": "Python",
    "code": "import math\n\nEPS = 1e-10\n\nclass Segment():\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\nclass Point():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, point):\n        # + 演算子での挙動を指定\n        return Point(self.x+point.x, self.y+point.y)\n\n    def __sub__(self, point):\n        # - 演算子での挙動を指定\n        return Point(self.x-point.x, self.y-point.y)\n\n    def __mul__(self, a):\n        # * 演算子での挙動を指定\n        return Point(a*self.x, a*self.y)\n\n    def __truediv__(self, a):\n        # / 演算子での挙動を指定\n        return Point(self.x/a, self.y/a)\n\n    def __abs__(self):\n        # abs関数での挙動を指定\n        return math.sqrt(self.norm())\n\n    def norm(self):\n        return self.x**2+self.y**2\n\n    def __eq__(self, point):\n        # == 演算子での挙動を指定\n        return abs(self.x-point.x) < EPS and abs(self.y-point.y) <EPS\n\ndef dot(a, b):\n    return a.x*b.x+a.y*b.y\n\ndef cross(a, b):\n    return a.x*b.y - a.y*b.x\n\ndef isOrthogonal(a, b):\n    return dot(a, b) == 0\n\ndef isParallel(a, b):\n    return cross(a, b) == 0\n\ndef project(s, p):\n    #s: Segment(), p: Point()\n    base = s.p2 - s.p1\n    r = dot(p-s.p1, base)/base.norm()\n    return s.p1+base*r\n\nif __name__ == '__main__':\n    from sys import stdin\n    input = stdin.readline\n\n    x1, y1, x2, y2 = map(int, input().split())\n    s = Segment(Point(x1, y1), Point(x2, y2))\n\n    q = int(input())\n    for _ in range(q):\n        x0, y0 = map(int, input().split())\n        p = Point(x0, y0)\n        projection = project(s, p)\n        print(projection.x, projection.y)\n\n"
  },
  {
    "language": "Python",
    "code": "xp1, yp1, xp2, yp2 = map(int, input().split())\nq = int(input())\n\nxp = complex(xp2 - xp1, yp2 - yp1)\nx1 = complex(xp1, yp1)\n\nfor _ in range(q):\n    x, y = map(int, input().split())\n    xpi = complex(x - xp1, y - yp1)\n    dot = xp.real * xpi.real + xp.imag * xpi.imag\n    ans = x1 + dot * xp / (abs(xp) ** 2)\n    print(\"{:.9f} {:.9f}\".format(ans.real, ans.imag))\n\n"
  },
  {
    "language": "Python",
    "code": "\npoints=[]\npoints=int(input().split())\np1,q1,p2,q2=points[0:3]\n\ndef search_x(x,y):\n    return ((q2-q1)*x+q1*((q2-q1)*(q2-q1))/(p2-p1))/((q2-q1)*(q2-q1)/(p2-p1)+(p2-p1))\n\nn=int(input())\nfor i in range(n):\n    point=[]\n    point=int(input().split())\n    x=search_x(point[0],point[1])\n    y=(x-q1)*(q2-q1)/(p2-p1)-q1\n    print('{} {}'.format(x,y))\n    "
  },
  {
    "language": "Python",
    "code": "import sys\nfrom itertools import starmap\nreadline = sys.stdin.readline\nclass Segment(object):\n    __slots__ = ('fi', 'se')\n    def __init__(self, fi, se):\n        self.fi = fi\n        self.se = se\ndef cross(a, b):\n    return a.real * b.imag - a.imag * b.real\ndef dot(a, b):\n    return a.real * b.real + a.imag * b.imag\ndef norm(base):\n    return abs(base) ** 2\ndef project(s, p2):\n    base = s.fi - s.se\n    r = dot(p2 - s.fi, base) / norm(base)\n    return s.fi + base * r\ns = Segment(*starmap(complex, zip(*[map(int, readline().split())] * 2)))\nn = int(readline())\nfor _ in [0] * n:\n    p2 = complex(*map(float, readline().split()))\n    ap = project(s, p2)\n    print(ap.real, ap.imag)"
  },
  {
    "language": "Python",
    "code": "def dot(a, b):\n  return a.real * b.real + a.imag * b.imag\n\ndef projection(a, b):\n  return a * dot(a, b) / (abs(a) ** 2)\n\n#複素平面の座標はクラスだから直接加算できr\ndef solve(p0,p1,p2):\n  a=p1-p0\n  b=p2-p0\n  pro=projection(a,b)\n  t=p0+pro\n  return t\n\ndef main():\n  x0,y0,x1,y1=map(float,input().split())\n  p0=complex(x0,y0)\n  p1=complex(x1,y1)\n  q=int(input())\n  for i in range(q):\n    p2=complex(*map(float,input().split()))\n    t=solve(p0,p1,p2)\n    print(\"{:.10f} {:.10f}\".format(t.real,t.imag))\n\nmain()\n\n"
  },
  {
    "language": "Python",
    "code": "from sys import stdin\n\nclass Vector:\n    def __init__(self, x=None, y=None):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, k):\n        return Vector(self.x * k, self.y * k)\n\n    def __gt__(self, other):\n        return self.x > other.x and self.y > other.y\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y\n\n    # usually cross operation return Vector but it returns scalor\n    def cross(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def norm(self):\n        return self.x * self.x + self.y * self.y\n\n    def abs(self):\n        return math.sqrt(self.norm())\n\nclass Point(Vector):\n    def __init__(self, *args, **kargs):\n        return super().__init__(*args, **kargs)\n\nclass Segment:\n    def __init__(self, p1=Point(0, 0), p2=Point(1, 1)):\n        self.p1 = p1\n        self.p2 = p2\n\ndef project(s, p):\n    base = s.p2 - s.p1\n    hypo = p - s.p1\n    r = hypo.dot(base) / base.norm()\n    return s.p1 + base * r\n\ndef read_and_print_results(s, n):\n    for _ in range(n):\n        line = stdin.readline().strip().split()\n        p = Vector(int(line[0]), int(line[1]))\n        x = project(s, p)\n        print('{0:0.10f} {1:0.10f}'.format(x.x, x.y))\n\nx1, y1, x2, y2 = input().split()\np1 = Point(int(x1), int(y1))\np2 = Point(int(x2), int(y2))\ns = Segment(p1, p2)\nn = int(input())\nread_and_print_results(s, n)\n"
  },
  {
    "language": "Python",
    "code": "def dot(a,b):\n    return a[0]*b[0] + a[1]*b[1]\n\nx1, y1, x2, y2 = map(int, input().split()) \na = [x2-x1, y2-y1]\nq = int(input())\nfor i in range(q):\n    x,y = map(int, input().split()) \n    b = [x-x1, y-y1]\n    co = dot(a,b) / dot(a,a)\n    print(a[0]*co+x1, a[1]*co+y1)"
  },
  {
    "language": "Python",
    "code": "import math\n\nline = input()\nx1, y1, x2, y2 = list(map(int, line.split()))\nline = input()\nq = int(line)\npts = []\nfor _ in range(0, q):\n    line = input()\n    x, y = list(map(int, line.split()))\n    pts += [[x, y]]\n\ndef solve():\n    l1 = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n    for x, y in pts:\n        l2 = math.sqrt((x - x1)**2 + (y - y1)**2)\n        dx = (x2 - x1) / l1\n        dy = (y2 - y1) / l1\n        ip = (x - x1) * (x2 - x1) + (y - y1) * (y2 - y1)\n        xx = x1 + dx * ip / l1\n        yy = y1 + dy * ip / l1\n        print(xx, yy)\n\nsolve()\n"
  },
  {
    "language": "Python",
    "code": "# Aizu Problem CGL_1_A: Projection\n#\nimport sys, math, os\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input4.txt\", \"rt\")\n\n\nx1, y1, x2, y2 = [int(_) for _ in input().split()]\nsx = x2 - x1\nsy = y2 - y1\ns_sq = sx**2 + sy**2\n\nQ = int(input())\nfor q in range(Q):\n    px, py = [int(_) for _ in input().split()]\n    if y1 == y2:\n        x = px\n        y = y1\n    elif x1 == x2:\n        x = x1\n        y = py\n    else:\n        x = x1 + (px * sx + py * sy) * sx / s_sq\n        y = y1 + (px * sx + py * sy) * sy / s_sq\n    print(\"%.10f %.10f\" % (x, y))"
  },
  {
    "language": "Python",
    "code": "#  http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=jp\n#  Projection : python3\n#  2018.12.10 yonezawa\n\n#from collections import deque\nimport sys\ninput = sys.stdin.readline\n#import cProfile\nfrom math import cos,sin,radians,sqrt\n\ndef Projection(p1,p2):\n    (x1,y1,x2,y2) = p1\n    if (x1*x1+y1*y1 > x2*x2 + y2*y2):\n        (x1,y1,x2,y2) = (x2,y2,x1,y1)\n    (x3,y3) = p2\n\n    tx = x2 -x1\n    ty = y2 -y1\n    l = sqrt(tx*tx+ty*ty)\n\n    nx = tx / l\n    ny = ty / l\n    pl = nx * (x3 - x1)  + ny * (y3 - y1)\n    return (nx * pl + x1, ny * pl + y1 )\n\n\ndef main():\n    (x1,y1,x2,y2) = map(int,input().split())\n    for i in range(int(input())):\n        (x3,y3) = map(int,input().split())\n        print('{:.10f} {:.10f}'.format(*Projection((x1,y1,x2,y2),(x3,y3))))\n\n    \nif __name__ == '__main__':\n    main()\n    #pr = cProfile.Profile()\n    #pr.runcall(main)\n    #pr.print_stats()\n"
  },
  {
    "language": "Python",
    "code": "a,b,c,d=map(float,input().split())\nc-=a;d-=b\nfor _ in [0]*int(input()):\n    x,y=map(float,input().split())\n    x-=a;y-=b\n    z=(c*x+d*y)/(c*c+d*d)\n    print(a+c*z,b+d*z)"
  },
  {
    "language": "Python",
    "code": "import cmath\nimport os\nimport sys\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nPI = cmath.pi\nTAU = cmath.pi * 2\n\n\nclass Point:\n    EPS = 1e-9\n\n    def __init__(self, c: complex):\n        self.c = c\n\n    @property\n    def x(self):\n        return self.c.real\n\n    @property\n    def y(self):\n        return self.c.imag\n\n    @staticmethod\n    def from_rect(x: float, y: float):\n        return Point(complex(x, y))\n\n    @staticmethod\n    def from_polar(r: float, phi: float):\n        return Point(cmath.rect(r, phi))\n\n    def __add__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        return Point(self.c + p.c)\n\n    def __iadd__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        self.c += p.c\n        return self\n\n    def __sub__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        return Point(self.c - p.c)\n\n    def __isub__(self, p):\n        \"\"\"\n        :param Point p:\n        \"\"\"\n        self.c -= p.c\n        return self\n\n    def __mul__(self, f: float):\n        return Point(self.c * f)\n\n    def __imul__(self, f: float):\n        self.c *= f\n        return self\n\n    def __truediv__(self, f: float):\n        return Point(self.c / f)\n\n    def __itruediv__(self, f: float):\n        self.c /= f\n        return self\n\n    def __repr__(self):\n        return \"({}, {})\".format(round(self.x, 10), round(self.y, 10))\n\n    def __neg__(self):\n        return Point(-self.c)\n\n    def __eq__(self, p):\n        return abs(self.c - p.c) < self.EPS\n\n    def __abs__(self):\n        return abs(self.c)\n\n    def dot(self, p):\n        \"\"\"\n        内積\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return self.x * p.x + self.y * p.y\n\n    def det(self, p):\n        \"\"\"\n        外積\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return self.x * p.y - self.y * p.x\n\n    def dist(self, p):\n        \"\"\"\n        距離\n        :param Point p:\n        :rtype: float\n        \"\"\"\n        return abs(self.c - p.c)\n\n    def r(self):\n        \"\"\"\n        原点からの距離\n        :rtype: float\n        \"\"\"\n        return abs(self.c)\n\n    def phase(self):\n        \"\"\"\n        原点からの角度\n        :rtype: float\n        \"\"\"\n        return cmath.phase(self.c)\n\n    def angle(self, p, q):\n        \"\"\"\n        p に向かってる状態から q まで反時計回りに回転するときの角度\n        :param Point p:\n        :param Point q:\n        :rtype: float\n        \"\"\"\n        return (cmath.phase(q.c - self.c) - cmath.phase(p.c - self.c)) % TAU\n\n    def area(self, p, q):\n        \"\"\"\n        p, q となす三角形の面積\n        :param Point p:\n        :param Point q:\n        :rtype: float\n        \"\"\"\n        return abs((p - self).det(q - self) / 2)\n\n    def projection_point(self, p, q, allow_outer=False):\n        \"\"\"\n        線分 pq を通る直線上に垂線をおろしたときの足の座標\n        :param Point p:\n        :param Point q:\n        :param allow_outer: 答えが線分の間になくても OK\n        :rtype: Point|None\n        \"\"\"\n        diff_q = q - p\n        # p からの距離\n        r = (self - p).dot(diff_q) / abs(diff_q)\n        # 線分の角度\n        phase = diff_q.phase()\n\n        ret = Point.from_polar(r, phase) + p\n        if allow_outer or (p - ret).dot(q - ret) < self.EPS:\n            return ret\n        return None\n\n    def on_segment(self, p, q):\n        \"\"\"\n        点が線分 pq の上に乗っているか\n        :param Point p:\n        :param Point q:\n        :rtype: bool\n        \"\"\"\n        return abs((p - self).det(q - self)) < self.EPS and (p - self).dot(q - self) < self.EPS\n\n\np1x, p1y, p2x, p2y = list(map(int, sys.stdin.buffer.readline().split()))\nQ = int(sys.stdin.buffer.readline())\nXY = [list(map(int, sys.stdin.buffer.readline().split())) for _ in range(Q)]\n\np1 = Point.from_rect(p1x, p1y)\np2 = Point.from_rect(p2x, p2y)\n\nfor x, y in XY:\n    p = Point.from_rect(x, y)\n    ans = p.projection_point(p1, p2, allow_outer=True)\n    print('{:.10f} {:.10f}'.format(ans.x, ans.y))\n\n"
  },
  {
    "language": "Python",
    "code": "def dot(a, b):\n  return a.real * b.real + a.imag * b.imag\n\ndef projection(a, b):\n  return a * dot(a, b) / (abs(a) ** 2)\n\n#複素平面の座標はクラスだから直接加算できr\ndef solve(p0,p1,p2):\n  a=p1-p0\n  b=p2-p0\n  pro=projection(a,b)\n  t=p0+pro\n  return t\n\ndef main():\n  x0,y0,x1,y1=map(float,input().split())\n  p0=complex(x0,y0)\n  p1=complex(x1,y1)\n  q=int(input())\n  for i in range(q):\n    p2=complex(*map(float,input().split()))\n    t=solve(p0,p1,p2)\n    print('{:.10f}{:.10f}'.format(t.real,t.imag))\nif __name__ == '__main__':\n  main()\n\n\n"
  },
  {
    "language": "Python",
    "code": "x0,y0,x1,y1 = map(float,input().split())\nn = int(input())\nvx1,vy1 = x1-x0,y1-y0\n\nfor i in range(n):\n    x2,y2 = map(float,input().split())\n    vx2,vy2 = x2-x0,y2-y0\n    sqr = vx1**2 + vy1**2\n    in_p = vx1*vx2 + vy1*vy2\n    xt,yt = in_p*vx1/sqr + x0,in_p*vy1/sqr + y0\n    print(\"{0:.10f} {1:.10f}\".format(xt,yt))"
  },
  {
    "language": "Python",
    "code": "x1, y1, x2, y2 = map(int, input().split())\nq = int(input())\n\np1p2 = complex(x2 - x1, y2 - y1)\nd2_p1p2 = abs(p1p2) ** 2\nconj_p1p2 = p1p2.conjugate()\n\nwhile q:\n    q -= 1\n    x0, y0 = map(int, input().split())\n    p1p0 = complex(x0 - x1, y0 - y1)\n    t = (conj_p1p2 * p1p0).real / d2_p1p2\n    print(x1 + p1p2.real * t, y1 + p1p2.imag * t)"
  },
  {
    "language": "Python",
    "code": "# coding: utf-8\nxp0,yp0,xp1,yp1 = map(float,raw_input().split())\nq = int(raw_input())\nfor i in range(q):\n    xp2,yp2 = map(float,raw_input().split())\n    p0p2 = (xp2-xp0,yp2-yp0)\n    p0p1 = (xp1-xp0,yp1-yp0)\n    k = ((p0p2[0]*p0p1[0]+p0p2[1]*p0p1[1])/(p0p1[0]**2 + p0p1[1]**2))\n    p0T = (k*p0p1[0],k*p0p1[1])\n    OT = (xp0+p0T[0],yp0+p0T[1])\n    print \"%.10f %.10f\" % (OT[0],OT[1])"
  },
  {
    "language": "Rust",
    "code": "fn main() {\n    let mut sc = Scanner::new();\n\n    let p1 = Pt::new(sc.next(), sc.next());\n    let p2 = Pt::new(sc.next(), sc.next());\n    let n = sc.next::<usize>();\n\n    for _ in 0..n {\n        let p = Pt::new(sc.next(), sc.next());\n\n        let v = p2 - p1;\n        let p = (p - p1) / v;\n        let x = Pt::new(p.re, 0.0);\n        let x = x * v;\n        let x = x + p1;\n        println!(\"{:.12} {:.12}\", x.re, x.im);\n    }\n}\n\n//==========\n\nuse std::fmt::Debug;\nuse std::str::FromStr;\n\npub struct Scanner {\n    buf: Vec<char>,\n    cur: usize,\n}\n\nimpl Scanner {\n    pub fn new() -> Scanner {\n        Scanner {\n            buf: vec![],\n            cur: 0,\n        }\n    }\n\n    fn fill(&mut self) {\n        let mut s = String::new();\n        let len = std::io::stdin().read_line(&mut s).unwrap();\n        if len == 0 {\n            panic!(\"unexpected EOF\");\n        }\n        for c in s.chars() {\n            self.buf.push(c);\n        }\n    }\n\n    pub fn next<T: FromStr>(&mut self) -> T\n    where\n        T::Err: Debug,\n    {\n        'outer: loop {\n            if self.cur >= self.buf.len() {\n                self.fill();\n            }\n            while self.cur < self.buf.len() {\n                if !self.buf[self.cur].is_whitespace() {\n                    break 'outer;\n                }\n                self.cur += 1;\n            }\n        }\n\n        let mut s = String::new();\n        while self.cur < self.buf.len() && !self.buf[self.cur].is_whitespace() {\n            s.push(self.buf[self.cur]);\n            self.cur += 1;\n        }\n        s.parse().expect(\"parse error\")\n    }\n\n    pub fn next_vec_len<T: FromStr>(&mut self) -> Vec<T>\n    where\n        T::Err: Debug,\n    {\n        let n: usize = self.next();\n        self.next_vec(n)\n    }\n\n    pub fn next_vec<T: FromStr>(&mut self, n: usize) -> Vec<T>\n    where\n        T::Err: Debug,\n    {\n        (0..n).map(|_| self.next()).collect()\n    }\n}\n\n//==========\n\n#[derive(PartialEq, Eq, Copy, Clone, Hash, Debug, Default)]\n#[repr(C)]\npub struct Complex<T> {\n    /// Real portion of the complex number\n    pub re: T,\n    /// Imaginary portion of the complex number\n    pub im: T,\n}\n\npub type Complex32 = Complex<f32>;\npub type Complex64 = Complex<f64>;\n\nimpl<T> Complex<T> {\n    /// Create a new Complex\n    #[inline]\n    pub fn new(re: T, im: T) -> Self {\n        Complex { re, im }\n    }\n}\n\nuse std::ops::{Add, Div, Mul, Sub};\n\nimpl<T: Add<Output = T>> Add for Complex<T> {\n    type Output = Self;\n    fn add(self, rhs: Self) -> Self::Output {\n        Self::new(self.re + rhs.re, self.im + rhs.im)\n    }\n}\n\nimpl<T: Sub<Output = T>> Sub for Complex<T> {\n    type Output = Self;\n    fn sub(self, rhs: Self) -> Self::Output {\n        Self::new(self.re - rhs.re, self.im - rhs.im)\n    }\n}\n\nimpl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T>> Mul for Complex<T> {\n    type Output = Self;\n    fn mul(self, rhs: Self) -> Self::Output {\n        Self::new(\n            self.re * rhs.re - self.im * rhs.im,\n            self.re * rhs.im + self.im * rhs.re,\n        )\n    }\n}\n\nimpl<T: Copy + Add<Output = T> + Sub<Output = T> + Mul<Output = T> + Div<Output = T>> Div\n    for Complex<T>\n{\n    type Output = Self;\n    fn div(self, rhs: Self) -> Self::Output {\n        let d = rhs.re * rhs.re + rhs.im * rhs.im;\n        Self::new(\n            (self.re * rhs.re + self.im * rhs.im) / d,\n            (self.im * rhs.re - self.re * rhs.im) / d,\n        )\n    }\n}\n\ntype Pt = Complex<f64>;\n\n"
  },
  {
    "language": "Rust",
    "code": "/**\n*  _           _                 __                            _   _ _   _                                 _                    _                  _\n* | |         | |               / /                           | | (_) | (_)                               | |                  (_)                | |\n* | |__   __ _| |_ ___   ___   / /__ ___  _ __ ___  _ __   ___| |_ _| |_ ___   _____ ______ _ __ _   _ ___| |_ ______ ___ _ __  _ _ __  _ __   ___| |_ ___\n* | '_ \\ / _` | __/ _ \\ / _ \\ / / __/ _ \\| '_ ` _ \\| '_ \\ / _ \\ __| | __| \\ \\ / / _ \\______| '__| | | / __| __|______/ __| '_ \\| | '_ \\| '_ \\ / _ \\ __/ __|\n* | | | | (_| | || (_) | (_) / / (_| (_) | | | | | | |_) |  __/ |_| | |_| |\\ V /  __/      | |  | |_| \\__ \\ |_       \\__ \\ | | | | |_) | |_) |  __/ |_\\__ \\\n* |_| |_|\\__,_|\\__\\___/ \\___/_/ \\___\\___/|_| |_| |_| .__/ \\___|\\__|_|\\__|_| \\_/ \\___|      |_|   \\__,_|___/\\__|      |___/_| |_|_| .__/| .__/ \\___|\\__|___/\n*                                                  | |                                                                           | |   | |\n*                                                  |_|                                                                           |_|   |_|\n*\n* https://github.com/hatoo/competitive-rust-snippets\n*/\n#[allow(unused_imports)]\nuse std::cmp::{max, min, Ordering};\n#[allow(unused_imports)]\nuse std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, VecDeque};\n#[allow(unused_imports)]\nuse std::iter::FromIterator;\n#[allow(unused_imports)]\nuse std::io::{stdin, stdout, BufWriter, Write};\npub mod util {\n    use std::io::{stdin, stdout, BufWriter, StdoutLock};\n    use std::str::FromStr;\n    use std::fmt::Debug;\n    #[allow(dead_code)]\n    pub fn line() -> String {\n        let mut line: String = String::new();\n        stdin().read_line(&mut line).unwrap();\n        line.trim().to_string()\n    }\n    #[allow(dead_code)]\n    pub fn chars() -> Vec<char> {\n        line().chars().collect()\n    }\n    #[allow(dead_code)]\n    pub fn gets<T: FromStr>() -> Vec<T>\n    where\n        <T as FromStr>::Err: Debug,\n    {\n        let mut line: String = String::new();\n        stdin().read_line(&mut line).unwrap();\n        line.split_whitespace()\n            .map(|t| t.parse().unwrap())\n            .collect()\n    }\n    #[allow(dead_code)]\n    pub fn with_bufwriter<F: FnOnce(BufWriter<StdoutLock>) -> ()>(f: F) {\n        let out = stdout();\n        let writer = BufWriter::new(out.lock());\n        f(writer)\n    }\n}\n#[allow(unused_macros)]\nmacro_rules ! get { ( $ t : ty ) => { { let mut line : String = String :: new ( ) ; stdin ( ) . read_line ( & mut line ) . unwrap ( ) ; line . trim ( ) . parse ::<$ t > ( ) . unwrap ( ) } } ; ( $ ( $ t : ty ) ,* ) => { { let mut line : String = String :: new ( ) ; stdin ( ) . read_line ( & mut line ) . unwrap ( ) ; let mut iter = line . split_whitespace ( ) ; ( $ ( iter . next ( ) . unwrap ( ) . parse ::<$ t > ( ) . unwrap ( ) , ) * ) } } ; ( $ t : ty ; $ n : expr ) => { ( 0 ..$ n ) . map ( | _ | get ! ( $ t ) ) . collect ::< Vec < _ >> ( ) } ; ( $ ( $ t : ty ) ,*; $ n : expr ) => { ( 0 ..$ n ) . map ( | _ | get ! ( $ ( $ t ) ,* ) ) . collect ::< Vec < _ >> ( ) } ; ( $ t : ty ;; ) => { { let mut line : String = String :: new ( ) ; stdin ( ) . read_line ( & mut line ) . unwrap ( ) ; line . split_whitespace ( ) . map ( | t | t . parse ::<$ t > ( ) . unwrap ( ) ) . collect ::< Vec < _ >> ( ) } } ; ( $ t : ty ;; $ n : expr ) => { ( 0 ..$ n ) . map ( | _ | get ! ( $ t ;; ) ) . collect ::< Vec < _ >> ( ) } ; }\n#[allow(unused_macros)]\nmacro_rules ! debug { ( $ ( $ a : expr ) ,* ) => { eprintln ! ( concat ! ( $ ( stringify ! ( $ a ) , \" = {:?}, \" ) ,* ) , $ ( $ a ) ,* ) ; } }\nconst BIG_STACK_SIZE: bool = true;\n#[allow(dead_code)]\nfn main() {\n    use std::thread;\n    if BIG_STACK_SIZE {\n        thread::Builder::new()\n            .stack_size(32 * 1024 * 1024)\n            .name(\"solve\".into())\n            .spawn(solve)\n            .unwrap()\n            .join()\n            .unwrap();\n    } else {\n        solve();\n    }\n}\nfn solve() {\n    let (x, y, c, d) = get!(f64, f64, f64, f64);\n    let q = get!(usize);\n\n    util::with_bufwriter(|mut out| {\n        for _ in 0..q {\n            let (a, b) = get!(f64, f64);\n            let (a, b) = (a - x, b - y);\n            let (c, d) = (c - x, d - y);\n\n            let m = (a * c + b * d) / (c * c + d * d);\n\n            writeln!(out, \"{} {}\", x + m * c, y + m * d).unwrap();\n        }\n    });\n}\n\n"
  },
  {
    "language": "Rust",
    "code": "/**\n*  _           _                 __                            _   _ _   _                                 _                    _                  _\n* | |         | |               / /                           | | (_) | (_)                               | |                  (_)                | |\n* | |__   __ _| |_ ___   ___   / /__ ___  _ __ ___  _ __   ___| |_ _| |_ ___   _____ ______ _ __ _   _ ___| |_ ______ ___ _ __  _ _ __  _ __   ___| |_ ___\n* | '_ \\ / _` | __/ _ \\ / _ \\ / / __/ _ \\| '_ ` _ \\| '_ \\ / _ \\ __| | __| \\ \\ / / _ \\______| '__| | | / __| __|______/ __| '_ \\| | '_ \\| '_ \\ / _ \\ __/ __|\n* | | | | (_| | || (_) | (_) / / (_| (_) | | | | | | |_) |  __/ |_| | |_| |\\ V /  __/      | |  | |_| \\__ \\ |_       \\__ \\ | | | | |_) | |_) |  __/ |_\\__ \\\n* |_| |_|\\__,_|\\__\\___/ \\___/_/ \\___\\___/|_| |_| |_| .__/ \\___|\\__|_|\\__|_| \\_/ \\___|      |_|   \\__,_|___/\\__|      |___/_| |_|_| .__/| .__/ \\___|\\__|___/\n*                                                  | |                                                                           | |   | |\n*                                                  |_|                                                                           |_|   |_|\n*\n* https://github.com/hatoo/competitive-rust-snippets\n*/\n#[allow(unused_imports)]\nuse std::cmp::{max, min, Ordering};\n#[allow(unused_imports)]\nuse std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, VecDeque};\n#[allow(unused_imports)]\nuse std::iter::FromIterator;\n#[allow(unused_imports)]\nuse std::io::{stdin, stdout, BufWriter, Write};\npub mod util {\n    use std::io::{stdin, stdout, BufWriter, StdoutLock};\n    use std::str::FromStr;\n    use std::fmt::Debug;\n    #[allow(dead_code)]\n    pub fn line() -> String {\n        let mut line: String = String::new();\n        stdin().read_line(&mut line).unwrap();\n        line.trim().to_string()\n    }\n    #[allow(dead_code)]\n    pub fn chars() -> Vec<char> {\n        line().chars().collect()\n    }\n    #[allow(dead_code)]\n    pub fn gets<T: FromStr>() -> Vec<T>\n    where\n        <T as FromStr>::Err: Debug,\n    {\n        let mut line: String = String::new();\n        stdin().read_line(&mut line).unwrap();\n        line.split_whitespace()\n            .map(|t| t.parse().unwrap())\n            .collect()\n    }\n    #[allow(dead_code)]\n    pub fn with_bufwriter<F: FnOnce(BufWriter<StdoutLock>) -> ()>(f: F) {\n        let out = stdout();\n        let writer = BufWriter::new(out.lock());\n        f(writer)\n    }\n}\n#[allow(unused_macros)]\nmacro_rules ! get { ( $ t : ty ) => { { let mut line : String = String :: new ( ) ; stdin ( ) . read_line ( & mut line ) . unwrap ( ) ; line . trim ( ) . parse ::<$ t > ( ) . unwrap ( ) } } ; ( $ ( $ t : ty ) ,* ) => { { let mut line : String = String :: new ( ) ; stdin ( ) . read_line ( & mut line ) . unwrap ( ) ; let mut iter = line . split_whitespace ( ) ; ( $ ( iter . next ( ) . unwrap ( ) . parse ::<$ t > ( ) . unwrap ( ) , ) * ) } } ; ( $ t : ty ; $ n : expr ) => { ( 0 ..$ n ) . map ( | _ | get ! ( $ t ) ) . collect ::< Vec < _ >> ( ) } ; ( $ ( $ t : ty ) ,*; $ n : expr ) => { ( 0 ..$ n ) . map ( | _ | get ! ( $ ( $ t ) ,* ) ) . collect ::< Vec < _ >> ( ) } ; ( $ t : ty ;; ) => { { let mut line : String = String :: new ( ) ; stdin ( ) . read_line ( & mut line ) . unwrap ( ) ; line . split_whitespace ( ) . map ( | t | t . parse ::<$ t > ( ) . unwrap ( ) ) . collect ::< Vec < _ >> ( ) } } ; ( $ t : ty ;; $ n : expr ) => { ( 0 ..$ n ) . map ( | _ | get ! ( $ t ;; ) ) . collect ::< Vec < _ >> ( ) } ; }\n#[allow(unused_macros)]\nmacro_rules ! debug { ( $ ( $ a : expr ) ,* ) => { eprintln ! ( concat ! ( $ ( stringify ! ( $ a ) , \" = {:?}, \" ) ,* ) , $ ( $ a ) ,* ) ; } }\nconst BIG_STACK_SIZE: bool = true;\n#[allow(dead_code)]\nfn main() {\n    use std::thread;\n    if BIG_STACK_SIZE {\n        thread::Builder::new()\n            .stack_size(32 * 1024 * 1024)\n            .name(\"solve\".into())\n            .spawn(solve)\n            .unwrap()\n            .join()\n            .unwrap();\n    } else {\n        solve();\n    }\n}\nfn solve() {\n    let (x, y, c, d) = get!(f64, f64, f64, f64);\n    let q = get!(usize);\n\n    util::with_bufwriter(|mut out| {\n        for _ in 0..q {\n            let (a, b) = get!(f64, f64);\n            let (a, b) = (a - x, b - y);\n            let (c, d) = (c - x, d - y);\n\n            let m = (a * c + b * d) / (c * c + d * d);\n\n            writeln!(out, \"{} {}\", m * c, m * d).unwrap();\n        }\n    });\n}\n\n"
  },
  {
    "language": "Rust",
    "code": "macro_rules ! input { ( source = $ s : expr , $ ( $ r : tt ) * ) => { let mut iter = $ s . split_whitespace ( ) ; input_inner ! { iter , $ ( $ r ) * } } ; ( iter = $ iter : ident , $ ( $ r : tt ) * ) => { let s = { use std :: io :: Read ; let mut s = String :: new ( ) ; std :: io :: stdin ( ) . read_to_string ( & mut s ) . unwrap ( ) ; s } ; let mut $ iter = s . split_whitespace ( ) ; input_inner ! { $ iter , $ ( $ r ) * } } ; ( $ ( $ r : tt ) * ) => { let s = { use std :: io :: Read ; let mut s = String :: new ( ) ; std :: io :: stdin ( ) . read_to_string ( & mut s ) . unwrap ( ) ; s } ; let mut iter = s . split_whitespace ( ) ; input_inner ! { iter , $ ( $ r ) * } } ; }\nmacro_rules ! input_inner { ( $ iter : expr ) => { } ; ( $ iter : expr , ) => { } ; ( $ iter : expr , mut $ var : ident : $ t : tt $ ( $ r : tt ) * ) => { let mut $ var = read_value ! ( $ iter , $ t ) ; input_inner ! { $ iter $ ( $ r ) * } } ; ( $ iter : expr , mut $ var : ident $ ( $ r : tt ) * ) => { input_inner ! { $ iter , mut $ var : usize $ ( $ r ) * } } ; ( $ iter : expr , $ var : ident : $ t : tt $ ( $ r : tt ) * ) => { let $ var = read_value ! ( $ iter , $ t ) ; input_inner ! { $ iter $ ( $ r ) * } } ; ( $ iter : expr , $ var : ident $ ( $ r : tt ) * ) => { input_inner ! { $ iter , $ var : usize $ ( $ r ) * } } ; }\nmacro_rules ! read_value { ( $ iter : expr , ( $ ( $ t : tt ) ,* ) ) => { ( $ ( read_value ! ( $ iter , $ t ) ) ,* ) } ; ( $ iter : expr , [ $ t : tt ; $ len : expr ] ) => { ( 0 ..$ len ) . map ( | _ | read_value ! ( $ iter , $ t ) ) . collect ::< Vec < _ >> ( ) } ; ( $ iter : expr , { chars : $ base : expr } ) => { read_value ! ( $ iter , String ) . chars ( ) . map ( | c | ( c as u8 - $ base as u8 ) as usize ) . collect ::< Vec < usize >> ( ) } ; ( $ iter : expr , { char : $ base : expr } ) => { read_value ! ( $ iter , { chars : $ base } ) [ 0 ] } ; ( $ iter : expr , chars ) => { read_value ! ( $ iter , String ) . chars ( ) . collect ::< Vec < char >> ( ) } ; ( $ iter : expr , char ) => { read_value ! ( $ iter , chars ) [ 0 ] } ; ( $ iter : expr , usize1 ) => { read_value ! ( $ iter , usize ) - 1 } ; ( $ iter : expr , $ t : ty ) => { $ iter . next ( ) . unwrap ( ) . parse ::<$ t > ( ) . unwrap ( ) } ; }\n#[derive(Clone, Copy, Debug, Default, PartialEq)]\npub struct Complex {\n    pub x: f64,\n    pub y: f64,\n}\nimpl Complex {\n    pub fn new(x: f64, y: f64) -> Complex {\n        Complex { x: x, y: y }\n    }\n    pub fn from_radian(theta: f64) -> Complex {\n        Complex::new(theta.cos(), theta.sin())\n    }\n    pub fn abs(self) -> f64 {\n        (self.x * self.x + self.y * self.y).sqrt()\n    }\n    pub fn dot(self, other: Complex) -> f64 {\n        self.x * other.x + self.y * other.y\n    }\n    pub fn cross(self, other: Complex) -> f64 {\n        self.x * other.y - self.y * other.x\n    }\n    pub fn conjugate(self) -> Complex {\n        Complex {\n            x: self.x,\n            y: -self.y,\n        }\n    }\n    pub fn angle(self) -> f64 {\n        self.y.atan2(self.x)\n    }\n}\nimpl std::ops::Add for Complex {\n    type Output = Complex;\n    fn add(self, other: Complex) -> Complex {\n        Complex {\n            x: self.x + other.x,\n            y: self.y + other.y,\n        }\n    }\n}\nimpl std::ops::Add<f64> for Complex {\n    type Output = Complex;\n    fn add(self, other: f64) -> Complex {\n        Complex {\n            x: self.x + other,\n            y: self.y + other,\n        }\n    }\n}\nimpl std::ops::Sub for Complex {\n    type Output = Complex;\n    fn sub(self, other: Complex) -> Complex {\n        Complex {\n            x: self.x - other.x,\n            y: self.y - other.y,\n        }\n    }\n}\nimpl std::ops::Sub<f64> for Complex {\n    type Output = Complex;\n    fn sub(self, other: f64) -> Complex {\n        Complex {\n            x: self.x - other,\n            y: self.y - other,\n        }\n    }\n}\nimpl std::ops::Mul for Complex {\n    type Output = Complex;\n    fn mul(self, other: Complex) -> Complex {\n        Complex {\n            x: self.x * other.x - self.y * other.y,\n            y: self.x * other.y + self.y * other.x,\n        }\n    }\n}\nimpl std::ops::Mul<f64> for Complex {\n    type Output = Complex;\n    fn mul(self, other: f64) -> Complex {\n        Complex {\n            x: self.x * other,\n            y: self.y * other,\n        }\n    }\n}\nimpl std::ops::Div for Complex {\n    type Output = Complex;\n    fn div(self, other: Complex) -> Complex {\n        self * other.conjugate() / other.abs()\n    }\n}\nimpl std::ops::Div<f64> for Complex {\n    type Output = Complex;\n    fn div(self, other: f64) -> Complex {\n        Complex {\n            x: self.x / other,\n            y: self.y / other,\n        }\n    }\n}\nimpl std::ops::Neg for Complex {\n    type Output = Complex;\n    fn neg(self) -> Complex {\n        Complex {\n            x: -self.x,\n            y: -self.y,\n        }\n    }\n}\n#[derive(Clone, Debug, PartialEq)]\npub struct Line {\n    p1: Complex,\n    p2: Complex,\n}\nimpl Line {\n    pub fn new(p1: Complex, p2: Complex) -> Line {\n        Line { p1: p1, p2: p2 }\n    }\n    pub fn from_param(a: f64, b: f64, x1: f64, x2: f64) -> Line {\n        Line {\n            p1: Complex::new(x1, a * x1 + b),\n            p2: Complex::new(x2, a * x2 + b),\n        }\n    }\n    pub fn projection(&self, p: Complex) -> Complex {\n        let e = self.p2 - self.p1;\n        let e = e / e.abs();\n        let t = (p - self.p1).dot(e);\n        self.p1 + e * t\n    }\n}\nfn main() {\n    input! { line: [(f64, f64); 2], q, ps: [(f64, f64); q] };\n    let line = line\n        .into_iter()\n        .map(|(x, y)| Complex::new(x, y))\n        .collect::<Vec<_>>();\n    let ps = ps\n        .into_iter()\n        .map(|(x, y)| Complex::new(x, y))\n        .collect::<Vec<_>>();\n    let l = Line::new(line[0], line[1]);\n    for i in 0..q {\n        let a = l.projection(ps[i]);\n        println!(\"{} {}\", a.x, a.y);\n    }\n}\n\n"
  }
]