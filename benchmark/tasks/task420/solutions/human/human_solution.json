[
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nusing Int = long long;\ntemplate<typename T1,typename T2> inline void chmin(T1 &a,T2 b){if(a>b) a=b;}\ntemplate<typename T1,typename T2> inline void chmax(T1 &a,T2 b){if(a<b) a=b;}\n\n\nstruct Dice{\n  int s[6];\n  void roll(char c){\n    //the view from above\n    // N\n    //W E\n    // S\n    //s[0]:top\n    //s[1]:south\n    //s[2]:east\n    //s[3]:west\n    //s[4]:north\n    //s[5]:bottom\n    int b;\n    if(c=='E'){\n      b=s[0];\n      s[0]=s[3];\n      s[3]=s[5];\n      s[5]=s[2];\n      s[2]=b;\n    }\n    if(c=='W'){\n      b=s[0];\n      s[0]=s[2];\n      s[2]=s[5];\n      s[5]=s[3];\n      s[3]=b;\n    }\n    if(c=='N'){\n      b=s[0];\n      s[0]=s[1];\n      s[1]=s[5];\n      s[5]=s[4];\n      s[4]=b;\n    }\n    if(c=='S'){\n      b=s[0];\n      s[0]=s[4];\n      s[4]=s[5];\n      s[5]=s[1];\n      s[1]=b;\n    }\n    \n    // migi neji \n    if(c=='R'){\n      b=s[1];\n      s[1]=s[2];\n      s[2]=s[4];\n      s[4]=s[3];\n      s[3]=b;\n    }\n    \n    if(c=='L'){\n      b=s[1];\n      s[1]=s[3];\n      s[3]=s[4];\n      s[4]=s[2];\n      s[2]=b;\n    }\n    \n  }\n  int top() {\n    return s[0];\n  }\n  int hash(){\n    int res=0;\n    for(int i=0;i<6;i++) res=res*256+s[i];\n    return res;\n  }\n};\nvector<Dice> makeDices(Dice d){\n  vector<Dice> res;\n  for(int i=0;i<6;i++){\n    Dice t(d);\n    if(i==1) t.roll('N'); \n    if(i==2) t.roll('S'); \n    if(i==3) t.roll('S'),t.roll('S');\n    if(i==4) t.roll('L'); \n    if(i==5) t.roll('R'); \n    for(int k=0;k<4;k++){\n      res.push_back(t);\n      t.roll('E');\n    }\n  }\n  return res;\n}\n\n\ntemplate<typename T>\nvector<T> compress(vector<T> v){\n  sort(v.begin(),v.end());\n  v.erase(unique(v.begin(),v.end()),v.end());\n  return v;\n}\n\ntemplate<typename T>\nmap<T, int> dict(const vector<T> &v){\n  map<T, int> res;\n  for(int i=0;i<(int)v.size();i++)\n    res[v[i]]=i;\n  return res;\n}\n\n//INSERT ABOVE HERE\nsigned main(){\n  int h,w;\n  cin>>h>>w;\n  vector<string> s(h);\n  for(int i=0;i<h;i++) cin>>s[i];\n\n  int dy[]={-1,0,1,0,0};\n  int dx[]={0,1,0,-1,0};\n\n  int dd[6][4]={{4,2,1,3},\n                {0,2,5,3},\n                {4,5,1,0},\n                {4,0,1,5},\n                {5,2,0,3},\n                {1,2,4,3}};\n  \n  struct T{\n    int y,x,v,p;\n    T(){}\n    T(int y,int x,int v,int p):y(y),x(x),v(v),p(p){}    \n  };\n  \n  auto in=[&](int y,int x){return 0<=y&&y<h&&0<=x&&x<w;};\n\n  vector<vector<int> > used(h,vector<int>(w,-1));\n  vector<vector<int> > dc;\n  auto bfs=\n    [&](int sy,int sx)->void{\n      queue<T> q;\n      used[sy][sx]=0;\n      q.emplace(sy,sx,0,4);\n      vector<int> vs(6,'#');\n      while(!q.empty()){\n        T t=q.front();q.pop();\n        vs[t.v]=int(s[t.y][t.x]);\n        \n        int pd=0,pv=used[t.y-dy[t.p]][t.x-dx[t.p]];\n        for(int k=0;k<4;k++)\n          if(dd[t.v][k]==pv) pd=(6-t.p)+(k);\n\n        pd%=4;\n        //cout<<t.v<<\":\"<<t.p<<\":\"<<char(vs[t.v])<<\":\"<<pv<<\" \"<<pd<<endl;\n          \n        for(int k=0;k<4;k++){\n          int ny=t.y+dy[k],nx=t.x+dx[k];\n          if(!in(ny,nx)||s[ny][nx]=='.'||~used[ny][nx]) continue;\n          used[ny][nx]=dd[t.v][(pd+k)%4];\n          q.emplace(ny,nx,used[ny][nx],k);\n        }\n      }      \n      Dice di;\n      for(int i=0;i<6;i++) di.s[i]=vs[i];\n      auto ds=makeDices(di);\n      for(Dice d:ds){\n        if(d.s[0]=='#'||d.s[1]=='#'||d.s[2]=='#') continue;\n        dc.push_back(vector<int>({d.s[0],d.s[1],d.s[2]}));\n        // cout<<char(d.s[0])<<\" \"<<char(d.s[1])<<\" \"<<char(d.s[2])<<endl;\n      }\n    };\n  \n  for(int i=0;i<h;i++){\n    for(int j=0;j<w;j++){\n      if(~used[i][j]||s[i][j]=='.') continue;\n      bfs(i,j);\n    }    \n  }\n  \n  dc=compress(dc);\n  int m=dc.size();\n\n  using D = tuple<int, int, int>;\n  set<D> ss;\n  for(int i=0;i<m;i++)\n    ss.emplace(dc[i][0],dc[i][1],dc[i][2]);\n\n  auto YES=[&](){cout<<\"Yes\"<<endl;exit(0);};\n\n  for(int i=0;i<m;i++){\n    for(int j=0;j<i;j++){\n      int a=dc[i][0],b=dc[i][1],c=dc[i][2];\n      int d=dc[j][0],e=dc[j][1],f=dc[j][2];\n      set<int> sc({a,b,c,d,e,f});\n      if(sc.size()!=6u) continue;\n      \n      //cout<<char(a)<<\" \"<<char(b)<<\" \"<<char(c);\n      //cout<<\" \"<<char(d)<<\" \"<<char(e)<<\" \"<<char(f)<<endl;\n      \n      if(!ss.count(D(d,b,e))) continue;   \n      if(!ss.count(D(e,b,a))) continue; \n      if(!ss.count(D(a,b,c))) continue;\n      if(!ss.count(D(c,b,d))) continue;  \n\n      if(!ss.count(D(d,e,f))) continue;\n      if(!ss.count(D(e,a,f))) continue;\n      if(!ss.count(D(a,c,f))) continue;\n      if(!ss.count(D(c,d,f))) continue;\n\n      YES();\n    }\n  }\n      \n  \n  cout<<\"No\"<<endl;\n  return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))\n#define all(x) (x).begin(),(x).end()\n#define pb push_back\n#define fi first\n#define se second\n#define dbg(x) cout<<#x\" = \"<<((x))<<endl\ntemplate<class T,class U> ostream& operator<<(ostream& o, const pair<T,U> &p){o<<\"(\"<<p.fi<<\",\"<<p.se<<\")\";return o;}\ntemplate<class T> ostream& operator<<(ostream& o, const vector<T> &v){o<<\"[\";for(T t:v){o<<t<<\",\";}o<<\"]\";return o;}\n\nstruct Dice{\n    char f[7];\n\n    Dice(){\n        rep(i,6) f[i] = '?';\n    }\n\n    void R(){\n        char tmp = f[0];\n        f[0] = f[4];\n        f[4] = f[5];\n        f[5] = f[2];\n        f[2] = tmp;\n    }\n\n    void L(){\n        char tmp = f[0];\n        f[0] = f[2];\n        f[2] = f[5];\n        f[5] = f[4];\n        f[4] = tmp;\n    }\n\n    void B(){\n        char tmp = f[0];\n        f[0] = f[1];\n        f[1] = f[5];\n        f[5] = f[3];\n        f[3] = tmp;\n    }\n\n    void F(){\n        char tmp = f[0];\n        f[0] = f[3];\n        f[3] = f[5];\n        f[5] = f[1];\n        f[1] = tmp;\n    }\n\n    void CCW(){\n        char tmp = f[1];\n        f[1] = f[4];\n        f[4] = f[3];\n        f[3] = f[2];\n        f[2] = tmp;\n    }\n};\n\nconst int dy[4]={1,-1,0,0};\nconst int dx[4]={0,0,1,-1};\n\nint h,w;\nstring s[55];\nbool vis[55][55];\n\nbool IN(int y, int x){\n    return (0<=y && y<h && 0<=x && x<w && s[y][x]!='.');\n}\n\nDice t;\nvoid dfs(int y, int x){\n    vis[y][x] = true;\n    t.f[0] = s[y][x];\n\n    rep(i,4){\n        int ny = y+dy[i], nx = x+dx[i];\n        if(IN(ny,nx) && !vis[ny][nx]){\n            if(i==0) t.B();\n            else if(i==1) t.F();\n            else if(i==2) t.L();\n            else if(i==3) t.R();\n\n            dfs(ny,nx);\n\n            if(i==0) t.F();\n            else if(i==1) t.B();\n            else if(i==2) t.R();\n            else if(i==3) t.L();\n        }\n    }\n}\n\nint black[8][3]={ {2,3,5}, {3,4,5}, {1,4,5}, {1,2,5}, {0,2,3}, {0,3,4}, {0,1,4}, {0,1,2} };\n\nbool solve(){\n    cin >>h >>w;\n    rep(i,h) cin >>s[i];\n\n    vector<Dice> d;\n    rep(i,h)rep(j,w)if(s[i][j]!='.' && !vis[i][j]){\n        t = Dice();\n        dfs(i,j);\n        d.pb(t);\n    }\n\n    assert(d.size() == 8);\n\n    // rep(i,8){\n    //     rep(j,6) printf(\" %c\",d[i].f[j]);\n    //     printf(\"\\n\");\n    // }\n\n    rep(i,8){\n        int b_ct = 0;\n        rep(j,6) b_ct += (d[i].f[j]=='#');\n        if(b_ct != 3) return false;\n    }\n\n    vector<int> p(8);\n    rep(i,8) p[i] = i;\n\n    do{\n        bool ok = true;\n\n        vector<vector<char>> aa,bb;\n        for(int i:{0,6}){\n            t = d[p[i]];\n\n            int CT = 0;\n            rep(z1,4){\n                t.R();\n                rep(z2,4){\n                    t.F();\n                    rep(z3,4){\n                        t.CCW();\n\n                        int b_ct = 0;\n                        rep(j,3) b_ct += (t.f[black[i][j]]=='#');\n                        if(b_ct == 3){\n                            ++CT;\n\n                            if(i==0){\n                                aa.pb({t.f[0],t.f[1],t.f[4]});\n                            }\n                            else{\n                                bb.pb({t.f[2],t.f[3],t.f[5]});\n                            }\n                        }\n                    }\n                }\n            }\n\n            if(CT == 0){\n                ok = false;\n                break;\n            }\n        }\n        if(!ok) continue;\n\n        // dbg(p);\n        sort(all(aa));\n        aa.erase(unique(all(aa)), aa.end());\n        sort(all(bb));\n        bb.erase(unique(all(bb)), bb.end());\n\n        int AA = aa.size(), BB = bb.size();\n        rep(ai,AA)rep(bi,BB){\n            char ch[7];\n            ch[0] = aa[ai][0];\n            ch[1] = aa[ai][1];\n            ch[2] = bb[bi][0];\n            ch[3] = bb[bi][1];\n            ch[4] = aa[ai][2];\n            ch[5] = bb[bi][2];\n\n            set<char> cols;\n            rep(i,6) cols.insert(ch[i]);\n            if(cols.size() != 6) continue;\n\n            ok = true;\n            rep(i,8){\n                bool found = false;\n                t = d[p[i]];\n                rep(z1,4){\n                    t.R();\n                    rep(z2,4){\n                        t.F();\n                        rep(z3,4){\n                            t.CCW();\n\n                            int b_ct = 0;\n                            rep(j,3) b_ct += (t.f[black[i][j]]=='#');\n                            if(b_ct == 3){\n                                int ok_ct = 0;\n                                rep(j,6){\n                                    if(t.f[j]!='#'){\n                                        ok_ct += (t.f[j] == ch[j]);\n                                    }\n                                }\n\n                                if(ok_ct == 3) found = true;\n                            }\n                        }\n                    }\n                }\n\n                if(!found){\n                    ok = false;\n                    break;\n                }\n            }\n            if(ok) return true;\n        }\n    }while(next_permutation(all(p)));\n\n    return false;\n}\n\nint main(){\n    cout << (solve()?\"Yes\":\"No\") << endl;\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <sstream>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <cassert>\n#include <climits>\n#include <queue>\n#include <set>\n#include <map>\n#include <valarray>\n#include <bitset>\n#include <stack>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n#define chmax(a,b) (a<b?(a=b,1):0)\n#define chmin(a,b) (a>b?(a=b,1):0)\n#define valid(y,x,h,w) (0<=y&&y<h&&0<=x&&x<w)\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int INF = 1<<29;\nconst double PI = acos(-1);\nconst double EPS = 1e-8;\n\nconst int dy[4] = {-1,0,1,0};\nconst int dx[4] = {0,1,0,-1};\n\ntemplate <class T>\nstruct dice {\n  T t,b,n,s,e,w;              // top bottom north south east west\n  int x, y;\n  dice() {t=' ';}\n  dice(int y, int x) : y(y),x(x) {\n    t=0,b=1,n=2,s=3,e=4,w=5;\n  }\n  dice(T t, T b, T n, T s, T e, T w) : t(t),b(b),n(n),s(s),e(e),w(w) {}\n  void roll(T &a, T &b, T &c, T &d) { swap(a,b); swap(b,c); swap(c,d); }\n  void roll_x() { roll(t, n, b, s); }\n  void roll_y() { roll(t, w, b, e); }\n  void roll_z() { roll(s, e, n, w); }\n  vector<dice> all_rolls() {\n    vector<dice> ret;\n    for (int k=0; k<6; (k&1?roll_y():roll_x()),++k)\n      for (int i=0; i<4; roll_z(), ++i)\n        ret.push_back(*this);\n    return ret;\n  }\n  void roll(int d) {\n    if (d == 0) roll(t, s, b, n);\n    else if (d == 1) roll(t, w, b, e);\n    else if (d == 2) roll(t, n, b, s);\n    else roll(t, e, b, w);\n    x+=dx[d];\n    y+=dy[d];\n  }\n  void toTable(T *res) {\n    res[0]=t;res[1]=b;res[2]=n;\n    res[3]=s;res[4]=e;res[5]=w;\n  }\n};\n\ntypedef dice<char> Dice;\n\nDice di[8][24];\nDice cube[2][2][2];\n\nint posx[8] = {0,1,0,1,0,1,0,1};\nint posy[8] = {0,0,1,1,0,0,1,1};\nint posz[8] = {0,0,0,0,1,1,1,1};\n\nconst int dx3[6] = {0,0,-1,1,0,0};\nconst int dy3[6] = {0,0,0,0,1,-1};\nconst int dz3[6] = {1,-1,0,0,0,0};\n\nbool check(int x, int y, int z, vector<char> &v) {\n  char table[6];\n  cube[x][y][z].toTable(table);\n\n  // if (x==1) {\n  //   cout << \" \";\n  //   REP(i,6) cout << table[i] << \",\"; cout << endl;\n  // }\n\n  REP(i,6) {\n    int xx=x+dx3[i];\n    int yy=y+dy3[i];\n    int zz=z+dz3[i];\n    int p = -1;\n    if (xx<0) p=0;\n    else if (xx>=2) p=1;\n    else if (yy<0) p=2;\n    else if (yy>=2) p=3;\n    else if (zz<0) p=4;\n    else if (zz>=2) p=5;\n\n    // if (x==1) {\n    //   if (p>=0) cout << v[p] << \" \";\n    //   cout << p << \" \" << table[i] << endl;\n    // }\n\n    if (p==-1 ^ table[i]=='#') return 0;                 // 内側は必ず黒．外側は黒以外\n    if (p!=-1 && v[p]!='.'&& v[p]!=table[i]) return 0; // 外側の色\n    if (p>=0) v[p] = table[i];\n  }\n  return 1;\n}\n\nbool solve(int cnt, int S, vector<char> v) {\n  // cout << cnt << endl;\n  // FOR(it, v) cout << *it; cout << endl;\n  if (cnt == 8) return 1;\n  REP(i,8) {\n    if (S>>i&1) continue;\n    REP(j,24) {\n      int x = posx[cnt];\n      int y = posy[cnt];\n      int z = posz[cnt];\n      cube[x][y][z] = di[i][j];\n      vector<char> nxt(v);\n      if (!check(x,y,z,nxt)) continue;\n      // cout << i << \" \" << j << endl;\n      if (solve(cnt+1, S|1<<i, nxt)) return 1;\n    }\n  }\n  return 0;\n}\n\n\nbool visited[50][50];\nchar c[50][50];\n\nint main() {\n  int h,w;\n  cin >> h >> w;\n  REP(i,h)REP(j,w)cin>>c[i][j];\n  char array[8][6];\n  int num = 0;\n  REP(i,h)REP(j,w)if(c[i][j]!='.'&&!visited[i][j]) {\n    queue<Dice> Q;\n    Q.push(Dice(i,j));\n    visited[i][j] = 1;\n    while(!Q.empty()) {\n      Dice now = Q.front(); Q.pop();\n      array[num][now.b] = c[now.y][now.x];\n      REP(k,4) {\n        int y=now.y+dy[k];\n        int x=now.x+dx[k];\n        if (!valid(y,x,h,w)) continue;\n        if (c[y][x] == '.') continue;\n        if (!visited[y][x]) {\n          visited[y][x] = 1;\n          Dice nxt = now;\n          nxt.roll(k);\n          Q.push(nxt);\n        }\n      }\n    }\n    num++;\n  }\n  assert(num == 8);\n  REP(i,num) {\n    // REP(j,6) cout << array[i][j] << \" \"; cout << endl;\n    char *a = array[i];\n    Dice tmp(a[0],a[1],a[2],a[3],a[4],a[5]);\n    vector<Dice> V = tmp.all_rolls();\n    REP(j,V.size()) {\n      di[i][j] = V[j];\n    }\n  }\n  vector<char> v(6,'.');\n  cout << (solve(0,0,v)?\"Yes\":\"No\") << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<set>\n#include<cassert>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n#define REP(i,b,n) for(int i=b;i<n;i++)\n#define rep(i,n)   REP(i,0,n)\n\n#define r_swap(x,a,b,c,d) swap(x.a,x.b);swap(x.b,x.c);swap(x.c,x.d);\nconst char black = '#';\nconst int N = 10;\nconst int inf = (1<<20);\nchar m[50][50];\nenum{TOP=0,FRONT,BACK,BOTTOM,RIGHT,LEFT};\nclass Dice{\npublic:\n  char top,front,right,left,back,bottom;\n  bool operator<(const Dice & a)const{\n    if (top != a.top)return top < a.top;\n    if (front != a.front)return front < a.front;\n    if (right != a.right)return right < a.right;\n    if (left != a.left  )return left < a.left;\n    if (back != a.back)return back < a.back;\n    if (bottom != a.bottom)return bottom < a.bottom;\n    return false;\n  }\n};\n\nvoid rotate_r(Dice &x){\n  r_swap(x,top,left,bottom,right);\n}\n\nvoid rotate_l(Dice &x){\n  r_swap(x,top,right,bottom,left);\n}\n\nvoid rotate_f(Dice &x){\n  r_swap(x,top,back,bottom,front);\n}\n\nvoid rotate_b(Dice &x){\n  r_swap(x,top,front,bottom,back);\n}\n\nvoid rotate_cw(Dice &x){\n  r_swap(x,back,left,front,right);\n}\n\nvoid rotate_ccw(Dice &x){\n  r_swap(x,back,right,front,left);\n}\n\nvoid generate(Dice x,Dice *data){\n  rep(i,6){\n    rep(j,4){\n      data[i*4+j]=x;\n      rotate_cw(x);\n    }\n    if (i%2 == 0)rotate_r(x);\n    else rotate_f(x);\n  }\n}\n\nbool isout(int y,int x,int r,int c){\n  return x==-1||y==-1||x==c||y==r;\n}\n\nint dx[]={0,1,0,-1};\nint dy[]={1,0,-1,0};\nint next[6][4]={\n  FRONT,RIGHT,BACK,LEFT,\n  BOTTOM,RIGHT,TOP,LEFT,\n  TOP,RIGHT,BOTTOM,LEFT,\n  BACK,RIGHT,FRONT,LEFT,\n  BACK,TOP,FRONT,LEFT,\n  BACK,BOTTOM,FRONT,TOP\n};\n\nbool validcheck(int m[N][N],int y,int x){\n  int now = m[y][x];\n  rep(l,4){\n    bool isok=true;\n    rep(i,4){\n      int nex=x+dx[i],ney=y+dy[i];\n      if (isout(ney,nex,N,N) || m[ney][nex] == -1)continue;\n      if (m[ney][nex] != next[now][(l+i)%4]){\n\tisok=false;\n\tbreak;\n      }\n    }\n    if (isok)return true;\n  }\n  return false;\n}\n\nDice generate(int *y,int *x,char *color){\n  int array[]={0,1,2,3,4,5};\n  int lmost=inf,dmost=inf;\n  int m[10][10]={-1};\n  rep(i,6){\n    lmost=min(lmost,x[i]);\n    dmost=min(dmost,y[i]);\n  }\n  rep(i,6){\n    x[i]-=lmost;\n    y[i]-=dmost;\n  }\n\n  do{\n    rep(i,10)rep(j,10)m[i][j]=-1;\n    rep(i,6){\n      m[y[i]][x[i]]=array[i];\n    }\n    bool isok=true;\n    rep(i,6){\n      if (!validcheck(m,y[i],x[i])){\n\tisok=false;\n\tbreak;\n      }\n    }\n    if (isok){\n      Dice ret;\n      //answer construction\n      rep(i,6){\n\tswitch(m[y[i]][x[i]]){\n\tcase TOP:\n\t  ret.top=color[i];\n\t  break;\n\tcase FRONT :\n\t  ret.front=color[i];\n\t  break;\n\tcase BOTTOM:\n\t  ret.bottom=color[i];\n\t  break;\n\tcase BACK:\n\t  ret.back=color[i];\n\t  break;\n\tcase RIGHT:\n\t  ret.right=color[i];\n\t  break;\n\tcase LEFT:\n\t  ret.left=color[i];\n\t  break;\n\tdefault:\n\t  assert(false);\n\t};\n      }\n      return ret;\n    }\n  }while(next_permutation(array,array+6));\n  assert(false);\n}\n\nvoid output(Dice &a){\n  cout <<\"TOP \"<< a.top << endl;\n  cout <<\"FRONT \"<<a.front << endl;\n  cout <<\"BOTTOM \" << a.bottom << endl;\n  cout <<\"BACK \" << a.back << endl;\n  cout <<\"RIGHT \" << a.right << endl;\n  cout <<\"LEFT \" << a.left << endl;\n}\n\nbool vis[50][50];\n\nvoid dfs(int y,int x,int r,int c,int *ally,int *allx,char *allc,int &p){\n  if (vis[y][x])return;\n  if (m[y][x]== '.')return;\n  vis[y][x]=true;\n  ally[p]=y;\n  allx[p]=x;\n  allc[p]=m[y][x];\n  p++;\n  rep(i,4){\n    int nex=x+dx[i],ney=y+dy[i];\n    if (isout(ney,nex,r,c)||m[ney][nex] == '.')continue;\n    dfs(ney,nex,r,c,ally,allx,allc,p);\n  }\n}\n\nvoid getall(Dice *in,int r,int c){\n  rep(i,r)rep(j,c)vis[i][j]=false;\n  int now=0;\n  rep(i,r){\n    rep(j,c){\n      if (m[i][j] != '.' && !vis[i][j]){\n\tint allx[6],ally[6];\n\tchar allc[6];\n\tint tmpp=0;\n\tdfs(i,j,r,c,ally,allx,allc,tmpp);\n\tin[now++]=generate(ally,allx,allc);\n\t//output(in[now-1]);\n      }\n    }\n  }\n}\n\nDice all[8][24];\n\nbool mustblack(int i,Dice &a){\n  switch(i){\n  case 0:\n    return a.right == black && a.back == black && a.bottom == black;\n    break;\n  case 1:\n    return a.left == black && a.back == black && a.bottom == black;\n    break;\n  case 2:\n    return a.front == black && a.right == black && a.bottom == black;\n    break;\n  case 3:\n    return a.front == black && a.left == black && a.bottom == black;\n    break;\n  case 4:\n    return a.right == black && a.top == black && a.back == black;\n    break;\n  case 5:\n    return a.left == black && a.top == black && a.back == black;\n    break;\n  case 6:\n    return a.right == black && a.top == black && a.front == black;\n    break;\n  case 7:\n    return a.left == black && a.top == black && a.front == black;\n    break;\n  };\n  assert(false);\n}\n\nbool allsame(Dice *in,int a,int b,int c,int d,int tar){\n  switch(tar){\n  case FRONT:\n    return in[a].front==in[b].front && in[a].front==in[c].front&&in[a].front == in[d].front;\n    break;\n  case TOP:\n    return in[a].top==in[b].top && in[a].top==in[c].top&&in[a].top == in[d].top;\n    break;\n  case RIGHT:\n    return in[a].right==in[b].right && in[a].right==in[c].right&&in[a].right == in[d].right;\n    break;\n  case LEFT:\n    return in[a].left==in[b].left && in[a].left==in[c].left&&in[a].left == in[d].left;\n    break;\n  case BACK:\n    return in[a].back==in[b].back && in[a].back==in[c].back&&in[a].back == in[d].back;\n    break;\n  case BOTTOM:\n    return in[a].bottom==in[b].bottom && in[a].bottom==in[c].bottom&&in[a].bottom == in[d].bottom;\n    break;\n  }\n  return false;\n}\n\nbool solve(int now,Dice *ans){\n  if (now == 5+1){\n    if (!allsame(ans,0,1,4,5,FRONT))return false;\n  }else if (now == 3+1){\n    if (!allsame(ans,0,1,2,3,TOP))return false;\n  }else if (now == 7+1){\n    if (!allsame(ans,1,3,5,7,RIGHT))return false;\n    if (!allsame(ans,4,5,6,7,BOTTOM))return false;\n    if (!allsame(ans,2,3,6,7,BACK))return false;\n  }else if (now == 6+1){\n    if (!allsame(ans,0,2,4,6,LEFT))return false;\n  }\n\n  if (now == 8){\n    char hoge[6]={ans[1].front,ans[1].top,ans[3].right,ans[2].left,\n\t\t  ans[3].back,ans[5].bottom};\n    Dice a[8];\n    rep(i,8)a[i]=ans[i];\n    rep(i,6){\n      if (hoge[i] == '#')return false;\n      REP(j,i+1,6){\n\tif (hoge[i] == hoge[j])return false;\n      }\n    }\n\n    return true;\n  }\n\n  rep(i,24){\n    if (!mustblack(now,all[now][i]))continue;\n\n    ans[now]=all[now][i];\n    if (solve(now+1,ans))return true;\n  }\n  return false;\n}\n\n\nbool solve(int r,int c){\n  Dice in[8];\n  Dice ans[8];\n  int array[8]={0,1,2,3,4,5,6,7};\n  getall(in,r,c);\n\n  do{\n    rep(i,8){\n      generate(in[array[i]],all[i]);\n    }\n    rep(i,24){\n      //output(all[0][i]);\n      Dice a = all[0][i];\n      //cout << a.right <<\" \" << a.back <<\" \" << a.bottom << endl;\n    }\n    //cout << endl;\n    if (solve(0,ans))return true;\n  }while(next_permutation(array+1,array+8));\n  return false;\n}\n\nmain(){\n  int r,c;\n  cin>>r>>c;\n  rep(i,r)cin>>m[i];\n  if (solve(r,c))cout <<\"Yes\"<<endl;\n  else cout <<\"No\"<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nchar str[60][60];\nint h[]={2,3,3,3,3,3,3,3,3,3,3};\nint w[]={5,4,4,4,4,4,4,4,4,4,4};\nchar tkz[11][6][6]={\n{\n\"DLU..\",\n\"..FRB\"\n},\n{\n\"U...\",\n\"FRBL\",\n\"D...\"\n},\n{\n\"U...\",\n\"FRBL\",\n\".D..\"\n},\n{\n\"U...\",\n\"FRBL\",\n\"..D.\"\n},\n{\n\"U...\",\n\"FRBL\",\n\"...D\"\n},\n{\n\".U..\",\n\"FRBL\",\n\".D..\"\n},\n{\n\".U..\",\n\"FRBL\",\n\"..D.\"\n},\n{\n\"LU..\",\n\".FR.\",\n\"..DB\"\n},\n{\n\".U..\",\n\"FRB.\",\n\"..DL\"\n},\n{\n\"..U.\",\n\"FRB.\",\n\"..DL\"\n},\n{\n\"U...\",\n\"FRB.\",\n\"..DL\"\n}\n};\nstruct cube{\n\tchar p[6]; //FRBLUD\n\tcube(){}\n};\nchar ch[20]=\"FRBLUD\";\ncube t[8];\nchar tmp[6][6];\nint black[8][3]={\n{1,2,5},\n{2,3,5},\n{0,1,5},\n{0,3,5},\n{1,2,4},\n{2,3,4},\n{0,1,4},\n{0,3,4}\n};\nint pat[24][6]={\n{0,1,2,3,4,5},\n{1,2,3,0,4,5},\n{2,3,0,1,4,5},\n{3,0,1,2,4,5},\n{3,2,1,0,5,4},\n{2,1,0,3,5,4},\n{1,0,3,2,5,4},\n{0,3,2,1,5,4},\n{5,1,4,3,0,2},\n{1,4,3,5,0,2},\n{4,3,5,1,0,2},\n{3,5,1,4,0,2},\n{3,4,1,5,2,0},\n{4,1,5,3,2,0},\n{1,5,3,4,2,0},\n{5,3,4,1,2,0},\n{0,5,2,4,1,3},\n{5,2,4,0,1,3},\n{2,4,0,5,1,3},\n{4,0,5,2,1,3},\n{4,2,5,0,3,1},\n{2,5,0,4,3,1},\n{5,0,4,2,3,1},\n{0,4,2,5,3,1}\n};\nint used[8];\nchar now[8][6];\nint solve(int a){\n\tif(a==8){\n\t\treturn 1;\n\t}\n\tfor(int i=0;i<8;i++){\n\t\tif(!used[i]){\n\t\t\tfor(int j=0;j<24;j++){\n\t\t\t\tbool ok=true;\n\t\t\t\tfor(int k=0;k<6;k++)now[a][k]=t[i].p[pat[j][k]];\n\t\t\t\tfor(int k=0;k<3;k++){\n\t\t\t\t\tif(now[a][black[a][k]]!='#'){\n\t\t\t\t\t\tok=false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int k=0;k<a;k++){\n\t\t\t\t\tfor(int l=0;l<6;l++){\n\t\t\t\t\t\tif(now[k][l]!='#'&&now[a][l]!='#'&&now[k][l]!=now[a][l])ok=false;\n\t\t\t\t\t\tfor(int m=0;m<6;m++){\n\t\t\t\t\t\t\tif(l!=m&&now[k][l]!='#'&&now[k][l]==now[a][m])ok=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!ok)continue;\n\t\t//\t\tif(ok)printf(\"OK %d %d %d\\n\",a,i,j);\n\t\t\t\tused[i]=1;\n\t\t\t\tif(solve(a+1))return 1;\n\t\t\t\tused[i]=0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint main(){\n\tint a,b;\n\tscanf(\"%d%d\",&a,&b);\n\tfor(int i=0;i<a;i++)scanf(\"%s\",str[i]);\n\tint sz=0;\nfor(int u=0;u<2;u++){\nfor(int r=0;r<4;r++){\n\tfor(int i=0;i<a;i++){\n\t\tfor(int j=0;j<b;j++){\n\t\t\tfor(int k=0;k<11;k++){\n\t\t\t\tif(i+h[k]>a||j+w[k]>b)continue;\n\t\t\t\tbool ok=true;\n\t\t\t\tfor(int l=0;l<h[k];l++)for(int m=0;m<w[k];m++){\n\t\t\t\t\tif(str[i+l][j+m]=='.'&&tkz[k][l][m]!='.')ok=false;\n\t\t\t\t}\n\t\t\t\tif(ok){\n\t\t\t\t\tfor(int l=0;l<h[k];l++)for(int m=0;m<w[k];m++){\n\t\t\t\t\t\tif(tkz[k][l][m]!='.'){\n\t\t\t\t\t\t\tfor(int n=0;n<6;n++)if(tkz[k][l][m]==ch[n]){\n\t\t\t\t\t\t\t\tt[sz].p[n]=str[i+l][j+m];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr[i+l][j+m]='.';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsz++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=0;i<11;i++){\n\t\tfor(int j=0;j<h[i];j++){\n\t\t\tfor(int k=0;k<w[i];k++){\n\t\t\t\ttmp[w[i]-1-k][j]=tkz[i][j][k];\n\t\t\t}\n\t\t}\n\t\tswap(h[i],w[i]);\n\t\tfor(int j=0;j<h[i];j++)for(int k=0;k<w[i];k++)tkz[i][j][k]=tmp[j][k];\n\t}\n}\n\tfor(int i=0;i<11;i++){\n\t\tfor(int j=0;j<h[i];j++){\n\t\t\tfor(int k=0;k<w[i];k++){\n\t\t\t\tif(tkz[i][j][k]=='R')tkz[i][j][k]='L';\n\t\t\t\telse if(tkz[i][j][k]=='L')tkz[i][j][k]='R';\n\t\t\t\ttmp[j][w[i]-1-k]=tkz[i][j][k];\n\t\t\t}\n\t\t}\n\t\tfor(int j=0;j<h[i];j++)for(int k=0;k<w[i];k++)tkz[i][j][k]=tmp[j][k];\n\t}\n}\n/*\tfor(int i=0;i<sz;i++){\n\t\tfor(int j=0;j<6;j++)printf(\"%c\",t[i].p[j]);\n\t\tprintf(\"\\n\");\n\t}*/\n\tfor(int i=0;i<8;i++){\n\t\tint cnt=0;\n\t\tfor(int j=0;j<6;j++){\n\t\t\tif(t[i].p[j]!='#')cnt++;\n\t\t}\n\t\tif(cnt!=3){\n\t\t\tprintf(\"No\\n\");return 0;\n\t\t}\n\t}\n\tint ret=solve(0);\n\tif(ret)printf(\"Yes\\n\");\n\telse printf(\"No\\n\");\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n// 0: top, 1: front, 2:right, 3:back, 4:left, 5:bottom\nconst vector<vector<string>> dice_map = {\n    {\"0...\",\n     \"1234\",\n     \"5...\"},\n    {\"0...\",\n     \"1234\",\n     \".5..\"},\n    {\"0...\",\n     \"1234\",\n     \"..5.\"},\n    {\"0...\",\n     \"1234\",\n     \"...5\"},\n    {\".0..\",\n     \"4123\",\n     \".5..\"},\n    {\".0..\",\n     \"4123\",\n     \"..5.\"},\n    {\"...0\",\n     \"2341\",\n     \"..5.\"},\n    {\"...0\",\n     \"2341\",\n     \".5..\"},\n    {\"...0\",\n     \"2341\",\n     \"5...\"},\n    {\"..0.\",\n     \"3412\",\n     \".5..\"},\n    {\"..0.\",\n     \"3412\",\n     \"5...\"},\n    {\".0..\",\n     \"4123\",\n     \"5...\"},\n    {\"..025\",\n     \"341..\"},\n    {\"025..\",\n     \"..143\"},\n    {\"..02\",\n     \"341.\",\n     \"5...\"},\n    {\"40..\",\n     \".123\",\n     \"...5\"},\n    {\"..02\",\n     \"341.\",\n     \".5..\"},\n    {\"40..\",\n     \".123\",\n     \"..5.\"},\n    {\"..02\",\n     \"341.\",\n     \"..5.\"},\n    {\"40..\",\n     \".123\",\n     \".5..\"},\n    {\"..02\",\n     \".41.\",\n     \"35..\"},\n    {\"40..\",\n     \".12.\",\n     \"..53\"},\n};\n\nvector<string> rot_map(vector<string> const& v) {\n    const int n = v.size(), m = v[0].size();\n    vector<string> res(m);\n    for(int i = 0; i < n; ++i) {\n        for(int j = 0; j < m; ++j) {\n            res[j] += v[n - i - 1][j];\n        }\n    }\n    return res;\n};\n\nusing dice = string;\n\nconstexpr int rot_d[2][6] = {\n    {3, 0, 2, 5, 4, 1}, // Front\n    {0, 4, 1, 2, 3, 5}, // Side\n};\n\ndice rot_dice(dice const& v, int dir) {\n    dice res(6, ' ');\n    for(int j = 0; j < 6; ++j) {\n        res[j] = v[rot_d[dir][j]];\n    }\n    return res;\n}\n\nbool is_valid_dice(dice const& d) {\n    bool res = true;\n    for(int i = 0; i < 3; ++i) {\n        res &= isalpha(d[i]) || isdigit(d[i]);\n        res &= d[i + 3] == '#';\n    }\n    return res;\n}\n\nbool check(vector<dice>& ds, int i) {\n    bool res = false;\n    if(i == 8) {\n        res = true;\n        for(int j = 0; j < 4; ++j) {\n            res &= ds[j][0] == ds[0][0]; // top\n            res &= ds[j + 4][0] == ds[4][0]; // bottom\n            // side\n            res &= ds[j][2] == ds[(j + 1) % 4][1];\n            //res &= ds[j + 4][1] == ds[(j + 1) % 4 + 4][2];\n            res &= ds[j][1] == ds[j + 4][2] && ds[j][2] == ds[j + 4][1];\n        }\n        return res;\n    } else {\n        for(int j = 0; j < 3; ++j) {\n            res |= check(ds, i + 1);\n            rotate(begin(ds[i]), begin(ds[i]) + 1, end(ds[i]));\n        }\n    }\n    return res;\n}\n\nint main() {\n    int h, w; cin >> h >> w;\n    vector<string> v(h);\n    for(auto& s : v) cin >> s;\n\n    { // check1\n        map<char, int> cols;\n        for(auto const& s : v) {\n            for(auto const c : s) {\n                if(c == '.' || c == '#') continue;\n                cols[c] += 1;\n            }\n        }\n        bool chk = cols.size() == 6u;\n        for(auto const& p : cols) {\n            chk &= p.second == 4;\n        }\n        if(!chk) {\n            cout << \"No\" << endl;\n            return 0;\n        }\n    }\n\n    vector<dice> dices;\n    auto in_range = [&] (int y, int x) {\n        return 0 <= y && y < h && 0 <= x && x < w;\n    };\n    for(int i = 0; i < h; ++i) {\n        for(int j = 0; j < w; ++j) {\n            for(auto dm : dice_map) {\n                string td;\n                for(int k = 0; k < 4; ++k, dm = rot_map(dm)) {\n                    const int n = dm.size(), m = dm[0].size();\n                    if(!in_range(i + n - 1, j + m - 1)) continue;\n                    string d(6, '.');\n                    for(int y = i; y < i + n; ++y) {\n                        for(int x = j; x < j + m; ++x) {\n                            if(dm[y - i][x - j] == '.') continue;\n                            d[dm[y - i][x - j] - '0'] = v[y][x];\n                        }\n                    }\n                    if(d[0] == '.' || d[0] == '#') {\n                        d = rot_dice(rot_dice(d, 0), 0);\n                    }\n                    for(int l = 0; l < 4; ++l, d = rot_dice(d, 1)) {\n                        if(!is_valid_dice(d)) continue;\n                        td = d.substr(0, 3);\n                    }\n                }\n                if(!td.empty()) {\n                    dices.push_back(td);\n                }\n            }\n        }\n    }\n\n    // check\n    sort(begin(dices), end(dices));\n    bool ans = false;\n    do {\n        ans |= check(dices, 1);\n    } while(!ans && next_permutation(begin(dices) + 1, end(dices)));\n\n    cout << (ans ? \"Yes\" : \"No\") << endl;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))\n#define all(x) (x).begin(),(x).end()\n#define pb push_back\n#define fi first\n#define se second\n#define dbg(x) cout<<#x\" = \"<<((x))<<endl\ntemplate<class T,class U> ostream& operator<<(ostream& o, const pair<T,U> &p){o<<\"(\"<<p.fi<<\",\"<<p.se<<\")\";return o;}\ntemplate<class T> ostream& operator<<(ostream& o, const vector<T> &v){o<<\"[\";for(T t:v){o<<t<<\",\";}o<<\"]\";return o;}\n\nstruct Dice{\n    char f[7];\n\n    Dice(){\n        rep(i,6) f[i] = '?';\n    }\n\n    void R(){\n        char tmp = f[0];\n        f[0] = f[4];\n        f[4] = f[5];\n        f[5] = f[2];\n        f[2] = tmp;\n    }\n\n    void L(){\n        char tmp = f[0];\n        f[0] = f[2];\n        f[2] = f[5];\n        f[5] = f[4];\n        f[4] = tmp;\n    }\n\n    void B(){\n        char tmp = f[0];\n        f[0] = f[1];\n        f[1] = f[5];\n        f[5] = f[3];\n        f[3] = tmp;\n    }\n\n    void F(){\n        char tmp = f[0];\n        f[0] = f[3];\n        f[3] = f[5];\n        f[5] = f[1];\n        f[1] = tmp;\n    }\n};\n\nconst int dy[4]={1,-1,0,0};\nconst int dx[4]={0,0,1,-1};\n\nint h,w;\nstring s[55];\nbool vis[55][55];\n\nbool IN(int y, int x){\n    return (0<=y && y<h && 0<=x && x<w && s[y][x]!='.');\n}\n\nDice t;\nvoid dfs(int y, int x){\n    vis[y][x] = true;\n    t.f[0] = s[y][x];\n\n    rep(i,4){\n        int ny = y+dy[i], nx = x+dx[i];\n        if(IN(ny,nx) && !vis[ny][nx]){\n            if(i==0) t.B();\n            else if(i==1) t.F();\n            else if(i==2) t.L();\n            else if(i==3) t.R();\n\n            dfs(ny,nx);\n\n            if(i==0) t.F();\n            else if(i==1) t.B();\n            else if(i==2) t.R();\n            else if(i==3) t.L();\n        }\n    }\n}\n\nint black[8][3]={ {2,3,5}, {3,4,5}, {1,4,5}, {1,2,5}, {0,2,3}, {0,3,4}, {0,1,4}, {0,1,2} };\n\nbool solve(){\n    cin >>h >>w;\n    rep(i,h) cin >>s[i];\n\n    vector<Dice> d;\n    rep(i,h)rep(j,w)if(s[i][j]!='.' && !vis[i][j]){\n        t = Dice();\n        dfs(i,j);\n        d.pb(t);\n    }\n\n    assert(d.size() == 8);\n\n    // rep(i,8){\n    //     rep(j,6) printf(\" %c\",d[i].f[j]);\n    //     printf(\"\\n\");\n    // }\n\n    rep(i,8){\n        int b_ct = 0;\n        rep(j,6) b_ct += (d[i].f[j]=='#');\n        if(b_ct != 3) return false;\n    }\n\n    vector<int> p(8);\n    rep(i,8) p[i] = i;\n\n    do{\n        bool ok = true;\n\n        vector<vector<char>> aa,bb;\n        for(int i:{0,6}){\n            t = d[p[i]];\n\n            int CT = 0;\n            rep(j,4){\n                t.R();\n                rep(k,4){\n                    t.F();\n\n                    int b_ct = 0;\n                    rep(l,3) b_ct += (t.f[black[i][l]]=='#');\n                    if(b_ct == 3){\n                        ++CT;\n\n                        if(i==0){\n                            aa.pb({t.f[0],t.f[1],t.f[4]});\n                        }\n                        else{\n                            bb.pb({t.f[2],t.f[3],t.f[5]});\n                        }\n                    }\n                }\n            }\n\n            if(CT == 0){\n                ok = false;\n                break;\n            }\n        }\n        if(!ok) continue;\n\n        // dbg(p);\n        int AA = aa.size(), BB = bb.size();\n        rep(ai,AA)rep(bi,BB){\n            char ch[7];\n            ch[0] = aa[ai][0];\n            ch[1] = aa[ai][1];\n            ch[2] = bb[bi][0];\n            ch[3] = bb[bi][1];\n            ch[4] = aa[ai][2];\n            ch[5] = bb[bi][2];\n\n            set<char> cols;\n            rep(i,6) cols.insert(ch[i]);\n            if(cols.size() != 6) continue;\n\n            ok = true;\n            rep(i,8){\n                bool found = false;\n                t = d[p[i]];\n                rep(j,4){\n                    t.R();\n                    rep(k,4){\n                        t.F();\n\n                        int b_ct = 0;\n                        rep(l,3) b_ct += (t.f[black[i][l]]=='#');\n                        if(b_ct == 3){\n                            int ok_ct = 0;\n                            rep(l,6){\n                                if(t.f[l]!='#'){\n                                    ok_ct += (t.f[l] == ch[l]);\n                                }\n                            }\n\n                            if(ok_ct == 3){\n                                found = true;\n                            }\n                        }\n                    }\n                }\n\n                if(!found){\n                    ok = false;\n                    break;\n                }\n            }\n            if(ok) return true;\n        }\n    }while(next_permutation(all(p)));\n\n    return false;\n}\n\nint main(){\n    cout << (solve()?\"Yes\":\"No\") << endl;\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))\n#define all(x) (x).begin(),(x).end()\n#define pb push_back\n#define fi first\n#define se second\n#define dbg(x) cout<<#x\" = \"<<((x))<<endl\ntemplate<class T,class U> ostream& operator<<(ostream& o, const pair<T,U> &p){o<<\"(\"<<p.fi<<\",\"<<p.se<<\")\";return o;}\ntemplate<class T> ostream& operator<<(ostream& o, const vector<T> &v){o<<\"[\";for(T t:v){o<<t<<\",\";}o<<\"]\";return o;}\n\nstruct Dice{\n    char f[7];\n\n    Dice(){\n        rep(i,6) f[i] = '?';\n    }\n\n    void R(){\n        char tmp = f[0];\n        f[0] = f[4];\n        f[4] = f[5];\n        f[5] = f[2];\n        f[2] = tmp;\n    }\n\n    void L(){\n        char tmp = f[0];\n        f[0] = f[2];\n        f[2] = f[5];\n        f[5] = f[4];\n        f[4] = tmp;\n    }\n\n    void B(){\n        char tmp = f[0];\n        f[0] = f[1];\n        f[1] = f[5];\n        f[5] = f[3];\n        f[3] = tmp;\n    }\n\n    void F(){\n        char tmp = f[0];\n        f[0] = f[3];\n        f[3] = f[5];\n        f[5] = f[1];\n        f[1] = tmp;\n    }\n};\n\nconst int dy[4]={1,-1,0,0};\nconst int dx[4]={0,0,1,-1};\n\nint h,w;\nstring s[55];\nbool vis[55][55];\n\nbool IN(int y, int x){\n    return (0<=y && y<h && 0<=x && x<w && s[y][x]!='.');\n}\n\nDice t;\nvoid dfs(int y, int x){\n    vis[y][x] = true;\n    t.f[0] = s[y][x];\n\n    rep(i,4){\n        int ny = y+dy[i], nx = x+dx[i];\n        if(IN(ny,nx) && !vis[ny][nx]){\n            if(i==0) t.B();\n            else if(i==1) t.F();\n            else if(i==2) t.L();\n            else if(i==3) t.R();\n\n            dfs(ny,nx);\n\n            if(i==0) t.F();\n            else if(i==1) t.B();\n            else if(i==2) t.R();\n            else if(i==3) t.L();\n        }\n    }\n}\n\nint black[8][3]={ {2,3,5}, {3,4,5}, {1,4,5}, {1,2,5}, {0,2,3}, {0,3,4}, {0,1,4}, {0,1,2} };\n\nbool solve(){\n    cin >>h >>w;\n    rep(i,h) cin >>s[i];\n\n    vector<Dice> d;\n    rep(i,h)rep(j,w)if(s[i][j]!='.' && !vis[i][j]){\n        t = Dice();\n        dfs(i,j);\n        d.pb(t);\n    }\n\n    assert(d.size() == 8);\n\n    rep(i,8){\n        int b_ct = 0;\n        rep(j,6) b_ct += (d[i].f[j]=='#');\n        if(b_ct != 3) return false;\n    }\n\n    vector<int> p(8);\n    rep(i,8) p[i] = i;\n\n    do{\n        bool ok = true;\n\n        vector<vector<char>> aa,bb;\n        for(int i:{0,6}){\n            t = d[p[i]];\n            bool found = false;\n\n            int CT = 0;\n            rep(j,4){\n                t.R();\n                rep(k,4){\n                    t.F();\n\n                    int b_ct = 0;\n                    rep(l,3) b_ct += (t.f[black[i][l]]=='#');\n                    if(b_ct == 3){\n                        ++CT;\n\n                        if(i==0){\n                            aa.pb({t.f[0],t.f[1],t.f[4]});\n                        }\n                        else{\n                            bb.pb({t.f[2],t.f[3],t.f[5]});\n                        }\n                    }\n                }\n            }\n\n            if(CT == 0){\n                ok = false;\n                break;\n            }\n        }\n        if(!ok) continue;\n\n        int AA = aa.size(), BB = bb.size();\n        rep(ai,AA)rep(bi,BB){\n            char ch[6];\n            ch[0] = aa[ai][0];\n            ch[1] = aa[ai][1];\n            ch[2] = bb[bi][0];\n            ch[3] = bb[bi][1];\n            ch[4] = aa[ai][2];\n            ch[5] = bb[bi][2];\n\n            ok = true;\n            rep(i,8){\n                bool found = false;\n                t = d[p[i]];\n                rep(j,4){\n                    t.R();\n                    rep(k,4){\n                        t.F();\n\n                        int b_ct = 0;\n                        rep(l,3) b_ct += (t.f[black[i][l]]=='#');\n                        if(b_ct == 3){\n                            int ok_ct = 0;\n                            rep(l,6){\n                                if(t.f[l]!='#'){\n                                    ok_ct += (t.f[l] == ch[l]);\n                                }\n                            }\n\n                            if(ok_ct == 3){\n                                found = true;\n                                break;\n                            }\n                        }\n                    }\n                    if(found) break;\n                }\n\n                if(!found){\n                    ok = false;\n                    break;\n                }\n            }\n            if(ok) return true;\n        }\n    }while(next_permutation(all(p)));\n\n    return false;\n}\n\nint main(){\n    cout << (solve()?\"Yes\":\"No\") << endl;\n    return 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <sstream>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <cassert>\n#include <climits>\n#include <queue>\n#include <set>\n#include <map>\n#include <valarray>\n#include <bitset>\n#include <stack>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n#define chmax(a,b) (a<b?(a=b,1):0)\n#define chmin(a,b) (a>b?(a=b,1):0)\n#define valid(y,x,h,w) (0<=y&&y<h&&0<=x&&x<w)\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int INF = 1<<29;\nconst double PI = acos(-1);\nconst double EPS = 1e-8;\n\nconst int dy[4] = {-1,0,1,0};\nconst int dx[4] = {0,1,0,-1};\n\ntemplate <class T>\nstruct dice {\n  T t,b,n,s,e,w;              // top bottom north south east west\n  int x, y;\n  dice() {t=' ';}\n  dice(int y, int x) : y(y),x(x) {\n    t=0,b=1,n=2,s=3,e=4,w=5;\n  }\n  dice(T t, T b, T n, T s, T e, T w) : t(t),b(b),n(n),s(s),e(e),w(w) {}\n  void roll(T &a, T &b, T &c, T &d) { swap(a,b); swap(b,c); swap(c,d); }\n  void roll_x() { roll(t, n, b, s); }\n  void roll_y() { roll(t, w, b, e); }\n  void roll_z() { roll(s, e, n, w); }\n  vector<dice> all_rolls() {\n    vector<dice> ret;\n    for (int k=0; k<6; (k&1?roll_y():roll_x()),++k)\n      for (int i=0; i<4; roll_z(), ++i)\n        ret.push_back(*this);\n    return ret;\n  }\n  void roll(int d) {\n    if (d == 0) roll(t, s, b, n);\n    else if (d == 1) roll(t, w, b, e);\n    else if (d == 2) roll(t, n, b, s);\n    else roll(t, e, b, w);\n    x+=dx[d];\n    y+=dy[d];\n  }\n  void toTable(T *res) {\n    res[0]=t;res[1]=b;res[2]=n;\n    res[3]=s;res[4]=e;res[5]=w;\n  }\n};\n\ntypedef dice<char> Dice;\n\nDice di[8][24];\nDice cube[2][2][2];\n\nint posx[8] = {0,1,0,1,0,1,0,1};\nint posy[8] = {0,0,1,1,0,0,1,1};\nint posz[8] = {0,0,0,0,1,1,1,1};\n\nconst int dx3[6] = {0,0,-1,1,0,0};\nconst int dy3[6] = {0,0,0,0,1,-1};\nconst int dz3[6] = {1,-1,0,0,0,0};\n\nbool check(int x, int y, int z, vector<char> &v) {\n  char table[6];\n  cube[x][y][z].toTable(table);\n\n  // if (x==1) {\n  //   cout << \" \";\n  //   REP(i,6) cout << table[i] << \",\"; cout << endl;\n  // }\n\n  REP(i,6) {\n    int xx=x+dx3[i];\n    int yy=y+dy3[i];\n    int zz=z+dz3[i];\n    int p = -1;\n    if (xx<0) p=0;\n    else if (xx>=2) p=1;\n    else if (yy<0) p=2;\n    else if (yy>=2) p=3;\n    else if (zz<0) p=4;\n    else if (zz>=2) p=5;\n\n    // if (x==1) {\n    //   if (p>=0) cout << v[p] << \" \";\n    //   cout << p << \" \" << table[i] << endl;\n    // }\n\n    if (p==-1 ^ table[i]=='#') return 0;                 // 内側は必ず黒．外側は黒以外\n    if (p!=-1 && v[p]!='.'&& v[p]!=table[i]) return 0; // 外側の色\n    if (p>=0) v[p] = table[i];\n  }\n  return 1;\n}\n\nbool solve(int cnt, int S, vector<char> v) {\n  // cout << cnt << endl;\n  // FOR(it, v) cout << *it; cout << endl;\n  if (cnt == 8) {\n    set<char> st;\n    FOR(it, v) st.insert(*it);\n    return st.size() == 6;\n  }\n\n  REP(i,8) {\n    if (S>>i&1) continue;\n    REP(j,24) {\n      int x = posx[cnt];\n      int y = posy[cnt];\n      int z = posz[cnt];\n      cube[x][y][z] = di[i][j];\n      vector<char> nxt(v);\n      if (!check(x,y,z,nxt)) continue;\n      // cout << i << \" \" << j << endl;\n      if (solve(cnt+1, S|1<<i, nxt)) return 1;\n    }\n  }\n  return 0;\n}\n\n\nbool visited[50][50];\nchar c[50][50];\n\nint main() {\n  int h,w;\n  cin >> h >> w;\n  REP(i,h)REP(j,w)cin>>c[i][j];\n  char array[8][6];\n  int num = 0;\n  REP(i,h)REP(j,w)if(c[i][j]!='.'&&!visited[i][j]) {\n    queue<Dice> Q;\n    Q.push(Dice(i,j));\n    visited[i][j] = 1;\n    while(!Q.empty()) {\n      Dice now = Q.front(); Q.pop();\n      array[num][now.b] = c[now.y][now.x];\n      REP(k,4) {\n        int y=now.y+dy[k];\n        int x=now.x+dx[k];\n        if (!valid(y,x,h,w)) continue;\n        if (c[y][x] == '.') continue;\n        if (!visited[y][x]) {\n          visited[y][x] = 1;\n          Dice nxt = now;\n          nxt.roll(k);\n          Q.push(nxt);\n        }\n      }\n    }\n    num++;\n  }\n  assert(num == 8);\n  REP(i,num) {\n    // REP(j,6) cout << array[i][j] << \" \"; cout << endl;\n    char *a = array[i];\n    Dice tmp(a[0],a[1],a[2],a[3],a[4],a[5]);\n    vector<Dice> V = tmp.all_rolls();\n    REP(j,V.size()) {\n      di[i][j] = V[j];\n    }\n  }\n  vector<char> v(6,'.');\n  cout << (solve(0,0,v)?\"Yes\":\"No\") << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\n#define rep1(i,n) for(int i=1;i<=(int)(n);i++)\n#define all(c) c.begin(),c.end()\n#define pb push_back\n#define fs first\n#define sc second\n#define show(x) cout << #x << \" = \" << x << endl\n#define chmin(x,y) x=min(x,y)\n#define chmax(x,y) x=max(x,y)\nusing namespace std;\ntypedef array<int,6> Dice;\nint H,W;\nint I;\nstring s[50];\nint dx[4]={1,0,-1,0},dy[4]={0,1,0,-1};\nDice ds[8];\nDice rot(Dice d,int x){\n\tif(x==0) return Dice{d[4],d[0],d[2],d[3],d[5],d[1]};\n\tif(x==1) return Dice{d[3],d[1],d[0],d[5],d[4],d[2]};\n\tif(x==2) return Dice{d[1],d[5],d[2],d[3],d[0],d[4]};\n\tif(x==3) return Dice{d[2],d[1],d[5],d[0],d[4],d[3]};\n\tif(x==4) return Dice{d[0],d[3],d[1],d[4],d[2],d[5]};\n\tif(x==5) return Dice{d[1],d[2],d[0],d[5],d[3],d[4]};\n}\nvoid dfs(Dice d,int x,int y){\n\tds[I][d[5]]=s[x][y];\n\ts[x][y]='.';\n\trep(i,4){\n\t\tint nx=x+dx[i],ny=y+dy[i];\n\t\tif(0<=nx&&nx<H&&0<=ny&&ny<W&&s[nx][ny]!='.') dfs(rot(d,i),nx,ny);\n\t}\n}\nint main(){\n\tcin>>H>>W;\n\trep(i,H) cin>>s[i];\n\trep(i,H) rep(j,W) if(s[i][j]!='.'){\n\t\tDice d={0,1,2,3,4,5};\n\t\tdfs(d,i,j);\n\t\tI++;\n\t}\n\tmap<char,int> mp;\n\trep(i,8){\n\t\tint b=0;\n\t\tset<char> ss;\n\t\trep(j,6){\n\t\t\tif(ds[i][j]=='#') b++;\n\t\t\telse ss.insert(ds[i][j]),mp[ds[i][j]]++;\n\t\t}\n\t\tif(b!=3||ss.size()!=3){\n\t\t\tputs(\"No\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tfor(auto p:mp){\n\t\tif(p.sc!=4){\n\t\t\tputs(\"No\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\trep(i,8){\n\t\trep(j,3) if(ds[i][j]=='#'&&ds[i][5-j]=='#'){\n\t\t\tputs(\"No\");\n\t\t\treturn 0;\n\t\t}\n\t\twhile(ds[i][0]=='#') ds[i]=rot(ds[i],0);\n\t\tint cnt=0;\n\t\twhile( (ds[i][1]=='#'||ds[i][2]=='#') && cnt<5) ds[i]=rot(ds[i],4),cnt++;\n\t}\n\tchar c=(*mp.begin()).fs;\n\tvector<int> as;\n\trep(i,8){\n\t\tint cnt=0;\n\t\twhile( ds[i][0]!=c && cnt<5) ds[i]=rot(ds[i],5),cnt++;\n\t\tif(cnt<5) as.pb(i);\n\t}\n\tassert(as.size()==4);\n\tchar x=ds[as[0]][1];\n\tvector<char> rs;\n\t{\n\t\tchar xc=x;\n\t\tint cnt=0,pp=0;\n\t\twhile(true){\n\t\t\trep(i,4){\n\t\t\t\tif(ds[as[i]][1]==x){\n\t\t\t\t\tx=ds[as[i]][2];\n\t\t\t\t\trs.pb(x);\n\t\t\t\t\tcnt++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(x==xc) break;\n\t\t\tpp++;\n\t\t\tif(pp==6) break;\n\t\t}\n\t\tif(cnt!=4||pp==6){\n\t\t\tputs(\"No\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tfor(auto p:mp){\n\t\tchar cc=p.fs;\n\t\tbool ok=1;\n\t\trep(i,4) if(cc==rs[i]) ok=0;\n\t\tif(cc==c) ok=0;\n\t\tif(ok){\n\t\t\tc=cc;\n\t\t\tbreak;\n\t\t}\n\t}\n\tvector<int> bs;\n\trep(i,8){\n\t\tint cnt=0;\n\t\twhile( ds[i][0]!=c && cnt<5) ds[i]=rot(ds[i],5),cnt++;\n\t\tif(cnt<5) bs.pb(i);\n\t}\n\tassert(bs.size()==4);\n\tx=ds[bs[0]][2];\n\tvector<char> ss;\n\t{\n\t\tchar xc=x;\n\t\tint cnt=0;\n\t\tint pp=0;\n\t\twhile(true){\n\t\t\trep(i,4){\n\t\t\t\tif(ds[bs[i]][2]==x){\n\t\t\t\t\tx=ds[bs[i]][1];\n\t\t\t\t\tss.pb(x);\n\t\t\t\t\tcnt++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(x==xc) break;\n\t\t\tpp++;\n\t\t\tif(pp==6) break;\n\t\t}\n\t\tif(cnt!=4||pp==6){\n\t\t\tputs(\"No\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\trep(i,4){\n\t\tif(ss==rs){\n\t\t\tputs(\"Yes\");\n\t\t\treturn 0;\n\t\t}\n\t\tss={ss[3],ss[0],ss[1],ss[2]};\n\t}\n\tputs(\"No\");\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n#include <iostream>\n#include <math.h>\n#include <assert.h>\n#include <vector>\n#include <set>\n\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned int uint;\ntypedef unsigned long long ull;\nstatic const double EPS = 1e-9;\nstatic const double PI = acos(-1.0);\n\n#define REP(i, n) for (int i = 0; i < (int)(n); i++)\n#define FOR(i, s, n) for (int i = (s); i < (int)(n); i++)\n#define FOREQ(i, s, n) for (int i = (s); i <= (int)(n); i++)\n#define FORIT(it, c) for (__typeof((c).begin())it = (c).begin(); it != (c).end(); it++)\n#define MEMSET(v, h) memset((v), h, sizeof(v))\n\nstruct Dice {\n  int face[6];\n  // +Z\n  int Top() const { return face[0]; }\n  int &Top() { return face[0]; }\n  // -Z\n  int Bottom() const { return face[1]; }\n  int &Bottom() { return face[1]; }\n  // +X\n  int Right() const { return face[2]; }\n  int &Right() { return face[2]; }\n  // -X\n  int Left() const { return face[3]; }\n  int &Left() { return face[3]; }\n  // +Y\n  int Front() const { return face[4]; }\n  int &Front() { return face[4]; }\n  // -Y\n  int Back() const { return face[5]; }\n  int &Back() { return face[5]; }\n\n  Dice Rotate(int cnt, int dir) const {\n    if (cnt == 0) { return *this; }\n    if (cnt < 0) { cnt = cnt % 4 + 4; }\n    else { cnt %= 4; }\n    Dice ret;\n    if (dir == 0) {\n      // +X rotate(Y axis rotate)\n      ret.face[0] = face[3];\n      ret.face[1] = face[2];\n      ret.face[2] = face[0];\n      ret.face[3] = face[1];\n      ret.face[4] = face[4];\n      ret.face[5] = face[5];\n    } else if (dir == 1) {\n      // +Y rotate(X axis rotate)\n      ret.face[0] = face[4];\n      ret.face[1] = face[5];\n      ret.face[2] = face[2];\n      ret.face[3] = face[3];\n      ret.face[4] = face[1];\n      ret.face[5] = face[0];\n    } else if (dir == 2) {\n      // Z rotate(Z axis rotate)\n      ret.face[0] = face[0];\n      ret.face[1] = face[1];\n      ret.face[2] = face[4];\n      ret.face[3] = face[5];\n      ret.face[4] = face[3];\n      ret.face[5] = face[2];\n    } else {\n      assert(false);\n    }\n    return ret.Rotate(cnt - 1, dir);\n  }\n  vector<Dice> AllRotate() const {\n    vector<Dice> ret;\n    Dice temp = *this;\n    REP(i, 6) {\n      REP(j, 4) {\n        ret.push_back(temp);\n        temp = temp.Rotate(1, 2);\n      }\n      temp = temp.Rotate(1, i & 1);\n    }\n    return ret;\n  }\n  bool operator<(const Dice &rhs) const {\n    REP(i, 6) {\n      if (face[i] != rhs.face[i]) { return face[i] < rhs.face[i]; }\n    }\n      return false;\n  }\n};\n\nint h, w;\nchar field[100][100];\nbool visit[100][100];\nconst int dx[4] = { 0, 1, 0, -1 };\nconst int dy[4] = { 1, 0, -1, 0 };\n\nint dfs(int x, int y, Dice &die) {\n  if (visit[y][x]) { return 0; }\n  visit[y][x] = true;\n  int ret = 1;\n  die.Bottom() = (int)field[y][x];\n  REP(i, 4) {\n    int nx = x + dx[i];\n    int ny = y + dy[i];\n    if (nx < 0 || nx >= w || ny < 0 || ny >= h || field[ny][nx] == '.') { continue; }\n    die = die.Rotate(dx[i], 0);\n    die = die.Rotate(dy[i], 1);\n    ret += dfs(nx, ny, die);\n    die = die.Rotate(-dx[i], 0);\n    die = die.Rotate(-dy[i], 1);\n  }\n  return ret;\n}\n\nint main() {\n  while (scanf(\"%d %d\", &h, &w) > 0) {\n    set<Dice> dice;\n    MEMSET(field, 0);\n    MEMSET(visit, false);\n    REP(y, h) {\n      scanf(\"%s\", field[y]);\n    }\n    REP(sy, h) {\n      REP(sx, w) {\n        if (field[sy][sx] == '.' || visit[sy][sx]) { continue; }\n        Dice die;\n        REP(i, 6) { die.face[i] = -1; }\n        int nret = dfs(sx, sy, die);\n        assert(nret == 6);\n        REP(i, 6) {\n          assert(die.face[i] != -1);\n        }\n        vector<Dice> rolls = die.AllRotate();\n        FORIT(it, rolls) { dice.insert(*it); }\n      }\n    }\n    FORIT(it1, dice) {\n      FORIT(it2, dice) {\n        if (it1 == it2) { break; }\n        Dice big;\n        big.Top() = it1->Top();\n        big.Right() = it1->Right();\n        big.Front() = it1->Front();\n        big.Bottom() = it2->Bottom();\n        big.Left() = it2->Left();\n        big.Back() = it2->Back();\n        REP(i, 6) {\n          if (big.face[i] == '#') { goto next; }\n        }\n        REP(i, 6) {\n          REP(j, i) {\n            if (big.face[i] == big.face[j]) { goto next; }\n          }\n        }\n        REP(i, 8) {\n          Dice search;\n          search.face[0] = ((i & 1) == 1) ? big.face[0] : (int)'#';\n          search.face[1] = ((i & 1) == 0) ? big.face[1] : (int)'#';\n          search.face[2] = ((i & 2) == 2) ? big.face[2] : (int)'#';\n          search.face[3] = ((i & 2) == 0) ? big.face[3] : (int)'#';\n          search.face[4] = ((i & 4) == 4) ? big.face[4] : (int)'#';\n          search.face[5] = ((i & 4) == 0) ? big.face[5] : (int)'#';\n          if (!dice.count(search)) { goto next; }\n        }\n        puts(\"Yes\");\n        goto end;\nnext:;\n      }\n    }\n    puts(\"No\");\nend:;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\ntypedef long long int ll;\ntypedef unsigned long long int ull;\n#define BIG_NUM 2000000000\n#define HUGE_NUM 99999999999999999\n#define MOD 1000000007\n#define EPS 0.000000001\nusing namespace std;\n\n\nstruct LOC{\n\tLOC(int arg_row,int arg_col){\n\t\trow = arg_row;\n\t\tcol = arg_col;\n\t}\n\tint row,col;\n};\n\n//0:上 1:北 2:東 3:西 4:南 5:裏側\nstruct Dice{\n\n\tvoid roll(char dst){\n\t\tfor(int i = 0; i < 6; i++) work[i] = words[i];\n\t\tswitch(dst){\n\t\tcase 'E':\n\t\t\tsetWords(work[3],work[1],work[0],work[5],work[4],work[2]);\n\t\t\tbreak;\n\t\tcase 'S':\n\t\t\tsetWords(work[1],work[5],work[2],work[3],work[0],work[4]);\n\t\t\tbreak;\n\t\tcase 'N':\n\t\t\tsetWords(work[4],work[0],work[2],work[3],work[5],work[1]);\n\t\t\tbreak;\n\t\tcase 'W':\n\t\t\tsetWords(work[2],work[1],work[5],work[0],work[4],work[3]);\n\t\t\tbreak;\n\t\t}\n\t};\n\n\n\tvoid paint(char ch){\n\n\t\twords[5] = ch;\n\t}\n\n\tvoid setWords(char n0,char n1,char n2,char n3,char n4,char n5){\n\t\twords[0] = n0;\n\t\twords[1] = n1;\n\t\twords[2] = n2;\n\t\twords[3] = n3;\n\t\twords[4] = n4;\n\t\twords[5] = n5;\n\t}\n\n\tvoid init(){\n\t\tfor(int i = 0; i < 6; i++){\n\t\t\twords[i] = '@';\n\t\t}\n\t}\n\n\tint count_blank(){\n\n\t\tint ret = 0;\n\n\t\tfor(int i = 0; i < 6; i++){\n\t\t\tif(words[i] == '@')ret++;\n\t\t}\n\t\treturn ret;\n\t}\n\n\tvoid set(Dice arg){\n\t\tfor(int i = 0; i < 6; i++){\n\t\t\twords[i] = arg.words[i];\n\t\t}\n\t}\n\n\tchar words[6],work[6];\n};\n\n\nint H,W;\nint diff_row[4] = {-1,0,0,1},diff_col[4] = {0,-1,1,0};\nchar work[55][55],table[55][55];\nchar order[25] = \"NNNNWNNNWNNNENNNENNNWNNN\",dir[5] = \"NWES\";\nbool visited[55][55],FLG;\nDice dice[8],DICE,BICUBE[2][2][2];\n\n\nbool rangeCheck(int row,int col){\n\n\treturn row >= 0 && row <= H-1 && col >= 0 && col <= W-1;\n}\n\nvoid recursive(int depth,Dice dice,int row,int col){\n\n\tif(depth == 8 || FLG == true)return;\n\n\tdice.paint(table[row][col]);\n\n\tif(dice.count_blank() == 0){\n\t\tDICE.set(dice);\n\n\t\tFLG = true;\n\t\treturn;\n\t}\n\n\tfor(int i = 0; i < 4; i++){\n\n\t\tint adj_row = row+diff_row[i];\n\t\tint adj_col = col+diff_col[i];\n\n\t\tif(rangeCheck(adj_row,adj_col) == false || table[adj_row][adj_col] == '.')continue;\n\n\t\tDice next_dice;\n\t\tnext_dice.set(dice);\n\n\t\tnext_dice.roll(dir[i]);\n\t\trecursive(depth+1,next_dice,adj_row,adj_col);\n\t}\n}\n\nint main(){\n\n\tscanf(\"%d %d\",&H,&W);\n\n\tfor(int row = 0; row < H; row++){\n\n\t\tscanf(\"%s\",work[row]);\n\t}\n\n\t//シートを裏返す\n\tfor(int col = 0; col < W; col++){\n\t\tfor(int row = 0; row < H; row++){\n\n\t\t\ttable[row][col] = work[row][W-1-col];\n\t\t}\n\t}\n\n\tfor(int row = 0; row < H; row++){\n\t\tfor(int col = 0; col < W; col++){\n\t\t\tvisited[row][col] = false;\n\t\t}\n\t}\n\n\t//サイコロの表面に色を塗る\n\tint index = 0;\n\n\tfor(int col = 0; col < W; col++){\n\t\tfor(int row = 0; row < H; row++){\n\n\t\t\tif(table[row][col] != '.' && visited[row][col] == false){\n\n\t\t\t\tDice tmp_dice;\n\t\t\t\ttmp_dice.init();\n\n\t\t\t\tFLG = false;\n\t\t\t\trecursive(0,tmp_dice,row,col);\n\n\t\t\t\tdice[index++].set(DICE);\n\n\t\t\t\tqueue<LOC> Q;\n\t\t\t\tvisited[row][col] = true;\n\n\t\t\t\tQ.push(LOC(row,col));\n\n\t\t\t\twhile(!Q.empty()){\n\n\t\t\t\t\tfor(int i = 0; i < 4; i++){\n\n\t\t\t\t\t\tint adj_row = Q.front().row+diff_row[i];\n\t\t\t\t\t\tint adj_col = Q.front().col+diff_col[i];\n\n\t\t\t\t\t\tif(rangeCheck(adj_row,adj_col) == false || table[adj_row][adj_col] == '.' ||\n\t\t\t\t\t\t\t\tvisited[adj_row][adj_col] == true)continue;\n\n\t\t\t\t\t\tvisited[adj_row][adj_col] = true;\n\t\t\t\t\t\tQ.push(LOC(adj_row,adj_col));\n\t\t\t\t\t}\n\t\t\t\t\tQ.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tint black_pos[6][3] = {{0,1,3},{0,2,4},{0,3,4},{1,2,5},{1,3,5},{2,4,5}};\n\tint color_pos[6][3] = {{2,4,5},{1,3,5},{1,2,5},{0,3,4},{0,2,4},{0,1,3}};\n\n\tint X[6] = {1,0,1,0,1,0};\n\tint Y[6] = {0,1,1,0,0,1};\n\tint Z[6] = {0,0,0,1,1,1};\n\n\t//dice[0]を(0,0,0)にセットする\n\tfor(int loop = 0; loop < 24; loop++){\n\n\t\tdice[0].roll(order[loop]);\n\t\tif(dice[0].words[0] == '#' && dice[0].words[1] == '#' && dice[0].words[2] == '#'){\n\n\t\t\tBICUBE[0][0][0].set(dice[0]);\n\n\t\t\tchar color[6];\n\n\t\t\tcolor[3] = BICUBE[0][0][0].words[3];\n\t\t\tcolor[4] = BICUBE[0][0][0].words[4];\n\t\t\tcolor[5] = BICUBE[0][0][0].words[5];\n\n\t\t\tfor(int i = 1; i <= 7; i++){ //(1,1,1)のダイスを設定\n\n\t\t\t\tbool check[8];\n\t\t\t\tcheck[0] = true;\n\n\t\t\t\tfor(int k = 1; k < 8; k++){\n\t\t\t\t\tcheck[k] = false;\n\t\t\t\t}\n\n\t\t\t\tcheck[i] = true;\n\t\t\t\tBICUBE[1][1][1].set(dice[i]);\n\n\t\t\t\tfor(int k = 0; k < 24; k++){\n\n\t\t\t\t\tBICUBE[1][1][1].roll(order[k]);\n\n\t\t\t\t\tif(BICUBE[1][1][1].words[3] == '#' && BICUBE[1][1][1].words[4] == '#' && BICUBE[1][1][1].words[5] == '#'){\n\n\t\t\t\t\t\tcolor[0] = BICUBE[1][1][1].words[0];\n\t\t\t\t\t\tcolor[1] = BICUBE[1][1][1].words[1];\n\t\t\t\t\t\tcolor[2] = BICUBE[1][1][1].words[2];\n\n\t\t\t\t\t\tbool color_FLG =true;\n\t\t\t\t\t\tfor(int a = 0; a < 5; a++){\n\t\t\t\t\t\t\tfor(int b = a+1; b < 6; b++){\n\t\t\t\t\t\t\t\tif(color[a] == color[b]){\n\n\t\t\t\t\t\t\t\t\tcolor_FLG = false;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!color_FLG)break; //面の色は全て異なっていないと不可\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(!color_FLG)continue;\n\n\t\t\t\t\t\tfor(int loc = 0; loc < 6; loc++){\n\t\t\t\t\t\t\tif(color[loc] == '#'){\n\t\t\t\t\t\t\t\tcolor_FLG = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(!color_FLG)continue;\n\n\n\t\t\t\t\t\tint index = 0;\n\t\t\t\t\t\tint sequence[6];\n\n\t\t\t\t\t\tfor(int g = 1; g <= 7; g++){\n\t\t\t\t\t\t\tif(check[g])continue;\n\n\t\t\t\t\t\t\tsequence[index++] = g;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdo{\n\n\t\t\t\t\t\t\tfor(int loc = 0; loc < 6; loc++){ //残り6箇所\n\n\t\t\t\t\t\t\t\tint x = X[loc];\n\t\t\t\t\t\t\t\tint y = Y[loc];\n\t\t\t\t\t\t\t\tint z = Z[loc];\n\n\t\t\t\t\t\t\t\tBICUBE[x][y][z].set(dice[sequence[loc]]);\n\n\t\t\t\t\t\t\t\tbool tmp_FLG = false;\n\n\t\t\t\t\t\t\t\tfor(int b = 0; b < 24; b++){ //位置のループ\n\n\t\t\t\t\t\t\t\t\tBICUBE[x][y][z].roll(order[b]);\n\n\t\t\t\t\t\t\t\t\ttmp_FLG = true;\n\n\t\t\t\t\t\t\t\t\tfor(int c = 0; c < 3; c++){ //黒の位置\n\t\t\t\t\t\t\t\t\t\tif(BICUBE[x][y][z].words[black_pos[loc][c]] != '#'){\n\t\t\t\t\t\t\t\t\t\t\ttmp_FLG = false;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif(!tmp_FLG)continue;\n\n\t\t\t\t\t\t\t\t\tfor(int c = 0; c < 3; c++){\n\t\t\t\t\t\t\t\t\t\tif(BICUBE[x][y][z].words[color_pos[loc][c]] != color[color_pos[loc][c]]){\n\n\t\t\t\t\t\t\t\t\t\t\ttmp_FLG = false;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif(!tmp_FLG)continue;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif(!tmp_FLG)break;\n\n\t\t\t\t\t\t\t\tif(loc == 5){\n\t\t\t\t\t\t\t\t\tprintf(\"Yes\\n\");\n\t\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}while(next_permutation(sequence,sequence+6));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprintf(\"No\\n\");\n\n\treturn 0;\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main{\n\n    int h,w;\n    char[][] sheet;\n    ArrayList<Dice> list;\n    ArrayList<Character> color;\n    int[] colors;\n\n    int[] dx = {0, 1, 0, -1};\n    int[] dy = {-1, 0, 1, 0};\n\n    int[][] nei = {{1, 3, 2, 4},\n                   {5, 3, 0, 4},\n                   {0, 3, 5, 4},\n                   {1, 5, 2, 0},\n                   {1, 0, 2, 5},\n                   {1, 4, 2, 3}};\n\n    class Dice{\n        char[] dice = new char[6]; \n        Dice(char f, char t, char b, char r, char l, char u){\n            dice[0] = f;\n            dice[1] = t;\n            dice[2] = b;\n            dice[3] = r;\n            dice[4] = l;\n            dice[5] = u;\n        }\n    }\n\n    Dice rotateRight(Dice d){\n        return new Dice(d.dice[0], d.dice[4], d.dice[3], d.dice[1], d.dice[2], d.dice[5]);\n    }\n\n    Dice rotateLeft(Dice d){\n        return new Dice(d.dice[0], d.dice[3], d.dice[4], d.dice[2], d.dice[1], d.dice[5]);\n    }\n\n    Dice rotateDown(Dice d){\n        return new Dice(d.dice[1], d.dice[5], d.dice[0], d.dice[3], d.dice[4], d.dice[2]);\n    }\n\n    Dice rotateUp(Dice d){\n        return new Dice(d.dice[2], d.dice[0], d.dice[5], d.dice[3], d.dice[4], d.dice[1]);\n    }\n    \n    boolean check(Dice d){\n        if(d.dice[1]!='#' && d.dice[3]!='#') return true;\n        if(d.dice[3]!='#' && d.dice[2]!='#') return true;\n        if(d.dice[2]!='#' && d.dice[4]!='#') return true;\n        if(d.dice[4]!='#' && d.dice[1]!='#') return true;\n        return false;\n    }\n\n    Dice rotate(int k, Dice d){\n        if(k==0) return d;\n        if(k==1) return rotateDown(d);\n        if(k==2) return rotateUp(d);\n        if(k==3) return rotateDown(rotateLeft(d));\n        if(k==4) return rotateDown(rotateRight(d));\n        if(k==5) return rotateDown(rotateDown(d));\n        return d;\n    }\n\n    void solve(){\n        Scanner sc = new Scanner(System.in);\n\n        h = sc.nextInt();\n        w = sc.nextInt();\n        sheet = new char[h][w];\n        color = new ArrayList<Character>();\n        for(int i=0; i<h; i++){\n            String s = sc.next();\n            for(int j=0; j<w; j++){\n                sheet[i][j] = s.charAt(j);\n                if(sheet[i][j]!='#' && sheet[i][j]!='.' && !color.contains(sheet[i][j])) \n                    color.add(sheet[i][j]);\n            }\n        }\n\n        list = new ArrayList<Dice>();\n        colors = new int[color.size()];\n\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                if(sheet[i][j]!='.'){\n                    bfs(i, j);\n                }\n            }\n        }\n\n        ArrayList<Dice> list2 = new ArrayList<Dice>();\n\n        for(int i=0; i<colors.length; i++){\n            if(colors[i]<4) continue;\n            ArrayList<Dice> same = new ArrayList<Dice>();\n            for(int j=0; j<list.size(); j++){\n                Dice dd  = list.get(j);\n                for(int k=0; k<6; k++){\n                    if(dd.dice[k]==color.get(i)){\n                        Dice newDice = rotate(k, dd); //kを前面に\n                        same.add(newDice);\n                        break;\n                    }\n                }\n            }\n            if(same.size()<4) continue;\n\n            for(int j=0; j<same.size(); j++){\n                Dice d1 = same.get(j);\n                if(!check(d1)) continue;\n                while(d1.dice[1]=='#' || d1.dice[4]=='#') d1 = rotateRight(d1);\n                for(int k=j+1; k<same.size(); k++){\n                    Dice d2 = same.get(k);\n                    if(!check(d2)) continue;\n                    while(d2.dice[1]=='#' || d2.dice[3]=='#') d2 = rotateRight(d2); \n                    for(int l=k+1; l<same.size(); l++){\n                        Dice d3 = same.get(l);\n                        if(!check(d3)) continue;\n                        while(d3.dice[4]=='#' || d3.dice[2]=='#') d3 = rotateRight(d3);\n                        for(int m=l+1; m<same.size(); m++){\n                            Dice d4 = same.get(m);\n                            if(!check(d4)) continue;\n                            while(d4.dice[3]=='#' || d4.dice[2]=='#') d4 = rotateRight(d4);\n\n                            if(d1.dice[1]==d2.dice[1] && d2.dice[3]==d4.dice[3] &&\n                               d3.dice[2]==d4.dice[2] && d1.dice[4]==d3.dice[4] && \n                               d1.dice[1]!=d3.dice[2] && d1.dice[4]!=d2.dice[3]){\n                                list2.add(new Dice((char)color.get(i), d1.dice[1], d3.dice[2], d2.dice[3], d1.dice[4], '.'));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        String ans = \"No\";\n        for(int i=0; i<list2.size(); i++){\n            Dice d1 = list2.get(i);\n            for(int j=i+1; j<list2.size(); j++){\n                Dice d2 = list2.get(j);\n                for(int k=0; k<4; k++){\n                    d2 = rotateRight(d2);\n                    if(d1.dice[0]!=d2.dice[0] && d1.dice[1]==d2.dice[1] && \n                       d1.dice[2]==d2.dice[2] && d1.dice[3]==d2.dice[4] && d1.dice[4]==d2.dice[3]){\n                        ans = \"Yes\";\n                    }\n                }\n            }\n        }\n\n        System.out.println(ans);\n    }\n\n    int[][] abs = {{2,1,0,3},{3,2,1,0},{0,3,2,1},{1,0,3,2}};\n\n    void bfs(int y, int x){\n        //y, x, pos, prior\n        Queue<int[]> q = new LinkedList<int[]>();\n        q.add(new int[]{y, x, 0, 0});\n        boolean[][] v = new boolean[h][w];\n        v[y][x] = true;\n\n        char[] c = new char[6];\n        HashSet<Character> set = new HashSet<Character>();\n\n        int black = 0;\n        int cnt = 0;\n        while(q.size()>0){\n            int[] yx = q.poll();\n            int yy = yx[0], xx = yx[1], pos = yx[2], prior = yx[3];\n          \n            c[pos] = sheet[yy][xx];\n            set.add(c[pos]);\n            if(sheet[yy][xx]=='#') black++;\n            cnt++;\n            sheet[yy][xx] = '.';  \n\n            for(int i=0; i<4; i++){\n                int ny = yy + dy[(i+prior)%4], nx = xx + dx[(i+prior)%4];\n                if(ny<0 || ny>=h || nx<0 || nx>=w || v[ny][nx] || sheet[ny][nx]=='.') continue;\n                for(int j=0; j<4; j++){\n                    if(nei[nei[pos][i]][j]==pos){\n                        v[ny][nx] = true;\n                        q.add(new int[]{ny, nx, nei[pos][i], (abs[i][j]+prior)%4});\n                    }\n                }\n            }\n        }\n\n\n\n        if(cnt==6 && black==3 && set.size()==4){\n            list.add(new Dice(c[0], c[1], c[2], c[3], c[4], c[5]));\n            //System.out.println(c[0]+\" \"+c[1]+\" \"+c[2]+\" \"+c[3]+\" \"+c[4]+\" \"+c[5]);\n            for(int i=0; i<6; i++){\n                if(c[i]=='#') continue;\n                colors[color.indexOf(c[i])]++;\n            }\n        }\n    }\n\n    public static void main(String[] args){\n        new Main().solve();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main{\n\n    int h,w;\n    char[][] sheet;\n    ArrayList<Dice> list;\n    ArrayList<Character> color;\n    int[] colors;\n\n    int[] dx = {0, 1, 0, -1};\n    int[] dy = {-1, 0, 1, 0};\n\n    int[][] nei = {{1, 3, 2, 4},\n                   {5, 3, 0, 4},\n                   {0, 3, 5, 4},\n                   {1, 5, 2, 0},\n                   {1, 0, 2, 5},\n                   {1, 4, 2, 3}};\n\n    class Dice{\n        char[] dice = new char[6]; \n        Dice(char f, char t, char b, char r, char l, char u){\n            dice[0] = f;\n            dice[1] = t;\n            dice[2] = b;\n            dice[3] = r;\n            dice[4] = l;\n            dice[5] = u;\n        }\n    }\n\n    Dice rotateRight(Dice d){\n        return new Dice(d.dice[0], d.dice[4], d.dice[3], d.dice[1], d.dice[2], d.dice[5]);\n    }\n\n    Dice rotateLeft(Dice d){\n        return new Dice(d.dice[0], d.dice[3], d.dice[4], d.dice[2], d.dice[1], d.dice[5]);\n    }\n\n    Dice rotateDown(Dice d){\n        return new Dice(d.dice[1], d.dice[5], d.dice[0], d.dice[3], d.dice[4], d.dice[2]);\n    }\n\n    Dice rotateUp(Dice d){\n        return new Dice(d.dice[2], d.dice[0], d.dice[5], d.dice[3], d.dice[4], d.dice[1]);\n    }\n    \n    boolean check(Dice d){\n        if(d.dice[1]!='#' && d.dice[3]!='#') return true;\n        if(d.dice[3]!='#' && d.dice[2]!='#') return true;\n        if(d.dice[2]!='#' && d.dice[4]!='#') return true;\n        if(d.dice[4]!='#' && d.dice[1]!='#') return true;\n        return false;\n    }\n\n    Dice rotate(int k, Dice d){\n        if(k==0) return d;\n        if(k==1) return rotateDown(d);\n        if(k==2) return rotateUp(d);\n        if(k==3) return rotateDown(rotateLeft(d));\n        if(k==4) return rotateDown(rotateRight(d));\n        if(k==5) return rotateDown(rotateDown(d));\n        return d;\n    }\n\n    void solve(){\n        Scanner sc = new Scanner(System.in);\n\n        h = sc.nextInt();\n        w = sc.nextInt();\n        sheet = new char[h][w];\n        color = new ArrayList<Character>();\n        for(int i=0; i<h; i++){\n            String s = sc.next();\n            for(int j=0; j<w; j++){\n                sheet[i][j] = s.charAt(j);\n                if(sheet[i][j]!='#' && sheet[i][j]!='.' && !color.contains(sheet[i][j])) \n                    color.add(sheet[i][j]);\n            }\n        }\n\n        list = new ArrayList<Dice>();\n        colors = new int[color.size()];\n\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                if(sheet[i][j]!='.'){\n                    bfs(i, j);\n                }\n            }\n        }\n\n        ArrayList<Dice> list2 = new ArrayList<Dice>();\n\n        for(int i=0; i<colors.length; i++){\n            if(colors[i]<4) continue;\n            ArrayList<Dice> same = new ArrayList<Dice>();\n            for(int j=0; j<list.size(); j++){\n                Dice dd  = list.get(j);\n                for(int k=0; k<6; k++){\n                    if(dd.dice[k]==color.get(i)){\n                        Dice newDice = rotate(k, dd); //kを前面に\n                        same.add(newDice);\n                        break;\n                    }\n                }\n            }\n            if(same.size()<4) continue;\n\n            for(int j=0; j<same.size(); j++){\n                Dice d1 = same.get(j);\n                if(!check(d1)) continue;\n                while(d1.dice[1]=='#' || d1.dice[4]=='#') d1 = rotateRight(d1);\n                for(int k=0; k<same.size(); k++){\n                    Dice d2 = same.get(k);\n                    if(!check(d2)) continue;\n                    while(d2.dice[1]=='#' || d2.dice[3]=='#') d2 = rotateRight(d2); \n                    for(int l=0; l<same.size(); l++){\n                        Dice d3 = same.get(l);\n                        if(!check(d3)) continue;\n                        while(d3.dice[4]=='#' || d3.dice[2]=='#') d3 = rotateRight(d3);\n                        for(int m=0; m<same.size(); m++){\n                            Dice d4 = same.get(m);\n                            if(!check(d4)) continue;\n                            while(d4.dice[3]=='#' || d4.dice[2]=='#') d4 = rotateRight(d4);\n\n                            if(d1.dice[1]==d2.dice[1] && d2.dice[3]==d4.dice[3] &&\n                               d3.dice[2]==d4.dice[2] && d1.dice[4]==d3.dice[4] && \n                               d1.dice[1]!=d3.dice[2] && d1.dice[4]!=d2.dice[3]){\n                                list2.add(new Dice((char)color.get(i), d1.dice[1], d3.dice[2], d2.dice[3], d1.dice[4], '.'));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        String ans = \"No\";\n        for(int i=0; i<list2.size(); i++){\n            Dice d1 = list2.get(i);\n            for(int j=i+1; j<list2.size(); j++){\n                Dice d2 = list2.get(j);\n                for(int k=0; k<4; k++){\n                    d2 = rotateRight(d2);\n                    if(d1.dice[0]!=d2.dice[0] && d1.dice[1]==d2.dice[1] && \n                       d1.dice[2]==d2.dice[2] && d1.dice[3]==d2.dice[4] && d1.dice[4]==d2.dice[3]){\n                        ans = \"Yes\";\n                    }\n                }\n            }\n        }\n\n        System.out.println(ans);\n    }\n\n    int[][] abs = {{2,1,0,3},{3,2,1,0},{0,3,2,1},{1,0,3,2}};\n\n    void bfs(int y, int x){\n        //y, x, pos, prior\n        Queue<int[]> q = new LinkedList<int[]>();\n        q.add(new int[]{y, x, 0, 0});\n        boolean[][] v = new boolean[h][w];\n        v[y][x] = true;\n\n        char[] c = new char[6];\n        HashSet<Character> set = new HashSet<Character>();\n\n        int black = 0;\n        int cnt = 0;\n        while(q.size()>0){\n            int[] yx = q.poll();\n            int yy = yx[0], xx = yx[1], pos = yx[2], prior = yx[3];\n          \n            c[pos] = sheet[yy][xx];\n            set.add(c[pos]);\n            if(sheet[yy][xx]=='#') black++;\n            cnt++;\n            sheet[yy][xx] = '.';  \n\n            for(int i=0; i<4; i++){\n                int ny = yy + dy[(i+prior)%4], nx = xx + dx[(i+prior)%4];\n                if(ny<0 || ny>=h || nx<0 || nx>=w || v[ny][nx] || sheet[ny][nx]=='.') continue;\n                for(int j=0; j<4; j++){\n                    if(nei[nei[pos][i]][j]==pos){\n                        v[ny][nx] = true;\n                        q.add(new int[]{ny, nx, nei[pos][i], (abs[i][j]+prior)%4});\n                    }\n                }\n            }\n        }\n\n\n\n        if(cnt==6 && black==3 && set.size()==4){\n            list.add(new Dice(c[0], c[1], c[2], c[3], c[4], c[5]));\n            //System.out.println(c[0]+\" \"+c[1]+\" \"+c[2]+\" \"+c[3]+\" \"+c[4]+\" \"+c[5]);\n            for(int i=0; i<6; i++){\n                if(c[i]=='#') continue;\n                colors[color.indexOf(c[i])]++;\n            }\n        }\n    }\n\n    public static void main(String[] args){\n        new Main().solve();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main{\n\n    int h,w;\n    char[][] sheet;\n    ArrayList<Dice> list;\n    ArrayList<Character> color;\n    int[] colors;\n\n\n    int[] dx = {0, 1, 0, -1};\n    int[] dy = {-1, 0, 1, 0};\n\n    int[][] nei = {{1, 3, 2, 4},\n                   {5, 3, 0, 4},\n                   {0, 3, 5, 4},\n                   {1, 5, 2, 0},\n                   {1, 0, 2, 5},\n                   {1, 4, 2, 3}};\n\n    class Dice{\n        //char f, t, b, r, l, u;\n        char[] dice = new char[6]; \n        Dice(char f, char t, char b, char r, char l, char u){\n            dice[0] = f;\n            dice[1] = t;\n            dice[2] = b;\n            dice[3] = r;\n            dice[4] = l;\n            dice[5] = u;\n        }\n    }\n\n    Dice rotateRight(Dice d){\n        return new Dice(d.dice[0], d.dice[4], d.dice[3], d.dice[1], d.dice[2], d.dice[5]);\n    }\n\n    Dice rotateLeft(Dice d){\n        return new Dice(d.dice[0], d.dice[3], d.dice[4], d.dice[2], d.dice[1], d.dice[5]);\n    }\n\n    Dice rotateDown(Dice d){\n        return new Dice(d.dice[1], d.dice[5], d.dice[0], d.dice[3], d.dice[4], d.dice[2]);\n    }\n\n    Dice rotateUp(Dice d){\n        return new Dice(d.dice[2], d.dice[0], d.dice[5], d.dice[3], d.dice[4], d.dice[1]);\n    }\n    \n    boolean check(Dice d){\n        if(d.dice[1]!='#' && d.dice[3]!='#') return true;\n        if(d.dice[3]!='#' && d.dice[2]!='#') return true;\n        if(d.dice[2]!='#' && d.dice[4]!='#') return true;\n        if(d.dice[4]!='#' && d.dice[1]!='#') return true;\n        return false;\n    }\n\n    Dice rotate(int k, Dice d){\n        if(k==0) return d;\n        if(k==1) return rotateDown(d);\n        if(k==2) return rotateUp(d);\n        if(k==3) return rotateDown(rotateLeft(d));\n        if(k==4) return rotateDown(rotateRight(d));\n        if(k==5) return rotateDown(rotateDown(d));\n        return d;\n    }\n\n    void solve(){\n        Scanner sc = new Scanner(System.in);\n\n        h = sc.nextInt();\n        w = sc.nextInt();\n        sheet = new char[h][w];\n        color = new ArrayList<Character>();\n        for(int i=0; i<h; i++){\n            String s = sc.next();\n            for(int j=0; j<w; j++){\n                sheet[i][j] = s.charAt(j);\n                if(sheet[i][j]!='#' && sheet[i][j]!='.' && !color.contains(sheet[i][j])) \n                    color.add(sheet[i][j]);\n            }\n        }\n\n        list = new ArrayList<Dice>();\n        colors = new int[color.size()];\n\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                if(sheet[i][j]!='.'){\n                    bfs(i, j);\n                }\n            }\n        }\n\n        ArrayList<Dice> list2 = new ArrayList<Dice>();\n\n        for(int i=0; i<colors.length; i++){\n            if(colors[i]<4) continue;\n            ArrayList<Dice> same = new ArrayList<Dice>();\n            for(int j=0; j<list.size(); j++){\n                Dice dd  = list.get(j);\n                for(int k=0; k<6; k++){\n                    if(dd.dice[k]==color.get(i)){\n                        Dice newDice = rotate(k, dd); //kを前面に\n                        same.add(newDice);\n                        break;\n                    }\n                }\n            }\n            if(same.size()>4) continue;\n\n            for(int j=0; j<same.size(); j++){\n                Dice d1 = same.get(j);\n                if(!check(d1)) continue;\n                while(d1.dice[1]=='#' || d1.dice[4]=='#'){\n                    d1 = rotateRight(d1);\n                }\n                for(int k=j+1; k<same.size(); k++){\n                    Dice d2 = same.get(k);\n                    if(!check(d2)) continue;\n                    while(d2.dice[1]=='#' || d2.dice[3]=='#'){\n                        d2 = rotateRight(d2);\n                    }\n                    for(int l=k+1; l<same.size(); l++){\n                        Dice d3 = same.get(l);\n                        if(!check(d3)) continue;\n                        while(d3.dice[4]=='#' || d3.dice[2]=='#'){\n                            d3 = rotateRight(d3);\n                        }\n                        for(int m=l+1; m<same.size(); m++){\n                            Dice d4 = same.get(m);\n                            if(!check(d4)) continue;\n                            while(d4.dice[3]=='#' || d4.dice[2]=='#'){\n                                d4 = rotateRight(d4);\n                            }\n\n                            if(d1.dice[1]==d2.dice[1] && d2.dice[3]==d4.dice[3] &&\n                               d3.dice[2]==d4.dice[2] && d1.dice[4]==d3.dice[4] && \n                               d1.dice[1]!=d3.dice[2] && d1.dice[4]!=d2.dice[3]){\n                                list2.add(new Dice((char)color.get(i), d1.dice[1], d3.dice[2], d2.dice[3], d1.dice[4], '.'));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        String ans = \"No\";\n        for(int i=0; i<list2.size(); i++){\n            Dice d1 = list2.get(i);\n            for(int j=i+1; j<list2.size(); j++){\n                Dice d2 = list2.get(j);\n                if(d1.dice[0]!=d2.dice[0] && d1.dice[1]==d2.dice[1] && \n                   d1.dice[2]==d2.dice[2] && d1.dice[3]==d2.dice[4] && \n                   d1.dice[4]==d2.dice[3]){\n                    ans = \"Yes\";\n                }\n            }\n        }\n\n        System.out.println(ans);\n    }\n\n    int[][] abs = {{2,1,0,3},{3,2,1,0},{0,3,2,1},{1,0,3,2}};\n\n    void bfs(int y, int x){\n        Queue<int[]> q = new LinkedList<int[]>();\n        q.add(new int[]{y, x, 0, 0});\n        boolean[][] v = new boolean[h][w];\n        v[y][x] = true;\n\n\n        char[] c = new char[6];\n        HashSet<Character> set = new HashSet<Character>();\n\n        int black = 0;\n        int cnt = 0;\n        while(q.size()>0){\n            int[] yx = q.poll();\n            int yy = yx[0], xx = yx[1], pos = yx[2], prior = yx[3];\n          \n            c[pos] = sheet[yy][xx];\n            set.add(c[pos]);\n            if(sheet[yy][xx]=='#') black++;\n            cnt++;\n            sheet[yy][xx] = '.';  \n\n            for(int i=0; i<4; i++){\n                int ny = yy + dy[(i+prior)%4], nx = xx + dx[(i+prior)%4];\n\n                if(ny<0 || ny>=h || nx<0 || nx>=w || v[ny][nx] || sheet[ny][nx]=='.') continue;\n                for(int j=0; j<4; j++){\n                    if(nei[nei[pos][i]][j]==pos){\n                        v[ny][nx] = true;\n                        q.add(new int[]{ny, nx, nei[pos][i], (abs[i][j]+prior)%4});\n                    }\n                }\n            }\n        }\n\n\n\n        if(cnt==6 && black==3 && set.size()==4){\n            list.add(new Dice(c[0], c[1], c[2], c[3], c[4], c[5]));\n            //System.out.println(c[0]+\" \"+c[1]+\" \"+c[2]+\" \"+c[3]+\" \"+c[4]+\" \"+c[5]);\n            for(int i=0; i<6; i++){\n                if(c[i]=='#') continue;\n                colors[color.indexOf(c[i])]++;\n            }\n        }\n    }\n\n    public static void main(String[] args){\n        new Main().solve();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main{\n\n    int h,w;\n    char[][] sheet;\n    ArrayList<Dice> list;\n    ArrayList<Character> color;\n    int[] colors;\n\n\n    class Dice{\n        char[] dice = new char[6]; \n        Dice(char f, char t, char b, char r, char l, char u){\n            dice[0] = f;\n            dice[1] = t;\n            dice[2] = b;\n            dice[3] = r;\n            dice[4] = l;\n            dice[5] = u;\n        }\n    }\n\n    Dice rotateRight(Dice d){\n        return new Dice(d.dice[0], d.dice[4], d.dice[3], d.dice[1], d.dice[2], d.dice[5]);\n    }\n\n    Dice rotateLeft(Dice d){\n        return new Dice(d.dice[0], d.dice[3], d.dice[4], d.dice[2], d.dice[1], d.dice[5]);\n    }\n\n    Dice rotateDown(Dice d){\n        return new Dice(d.dice[1], d.dice[5], d.dice[0], d.dice[3], d.dice[4], d.dice[2]);\n    }\n\n    Dice rotateUp(Dice d){\n        return new Dice(d.dice[2], d.dice[0], d.dice[5], d.dice[3], d.dice[4], d.dice[1]);\n    }\n    \n    boolean check(Dice d){\n        if(d.dice[1]!='#' && d.dice[3]!='#') return true;\n        if(d.dice[3]!='#' && d.dice[2]!='#') return true;\n        if(d.dice[2]!='#' && d.dice[4]!='#') return true;\n        if(d.dice[4]!='#' && d.dice[1]!='#') return true;\n        return false;\n    }\n\n    Dice rotate(int k, Dice d){\n        if(k==0) return d;\n        if(k==1) return rotateDown(d);\n        if(k==2) return rotateUp(d);\n        if(k==3) return rotateDown(rotateLeft(d));\n        if(k==4) return rotateDown(rotateRight(d));\n        if(k==5) return rotateDown(rotateDown(d));\n        return d;\n    }\n\n    void solve(){\n        Scanner sc = new Scanner(System.in);\n\n        h = sc.nextInt();\n        w = sc.nextInt();\n        sheet = new char[h][w];\n        color = new ArrayList<Character>();\n        for(int i=0; i<h; i++){\n            String s = sc.next();\n            for(int j=0; j<w; j++){\n                sheet[i][j] = s.charAt(j);\n                if(sheet[i][j]!='#' && sheet[i][j]!='.' && !color.contains(sheet[i][j])) \n                    color.add(sheet[i][j]);\n            }\n        }\n\n        list = new ArrayList<Dice>();\n        colors = new int[color.size()];\n\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                if(sheet[i][j]!='.'){\n                    bfs(i, j);\n                }\n            }\n        }\n\n        ArrayList<Dice> list2 = new ArrayList<Dice>();\n\n        for(int i=0; i<colors.length; i++){\n            if(colors[i]<4) continue;\n            ArrayList<Dice> same = new ArrayList<Dice>();\n            for(int j=0; j<list.size(); j++){\n                Dice dd  = list.get(j);\n                for(int k=0; k<6; k++){\n                    if(dd.dice[k]==color.get(i)){\n                        Dice newDice = rotate(k, dd);\n                        same.add(newDice);\n                        break;\n                    }\n                }\n            }\n            if(same.size()<4) continue;\n\n            for(int j=0; j<same.size(); j++){\n                Dice d1 = same.get(j);\n                if(!check(d1)) continue;\n                while(d1.dice[1]=='#' || d1.dice[4]=='#') d1 = rotateRight(d1);\n                for(int k=0; k<same.size(); k++){\n                    Dice d2 = same.get(k);\n                    if(!check(d2)) continue;\n                    while(d2.dice[1]=='#' || d2.dice[3]=='#') d2 = rotateRight(d2); \n                    for(int l=0; l<same.size(); l++){\n                        Dice d3 = same.get(l);\n                        if(!check(d3)) continue;\n                        while(d3.dice[4]=='#' || d3.dice[2]=='#') d3 = rotateRight(d3);\n                        for(int m=0; m<same.size(); m++){\n                            Dice d4 = same.get(m);\n                            if(!check(d4)) continue;\n                            while(d4.dice[3]=='#' || d4.dice[2]=='#') d4 = rotateRight(d4);\n\n                            if(d1.dice[1]==d2.dice[1] && d2.dice[3]==d4.dice[3] &&\n                               d3.dice[2]==d4.dice[2] && d1.dice[4]==d3.dice[4] && \n                               d1.dice[1]!=d3.dice[2] && d1.dice[4]!=d2.dice[3]){\n                                list2.add(new Dice((char)color.get(i), d1.dice[1], d3.dice[2], d2.dice[3], d1.dice[4], '.'));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        String ans = \"No\";\n        for(int i=0; i<list2.size(); i++){\n            Dice d1 = list2.get(i);\n            for(int j=i+1; j<list2.size(); j++){\n                Dice d2 = list2.get(j);\n                for(int k=0; k<4; k++){\n                    d2 = rotateRight(d2);\n                    if(d1.dice[0]!=d2.dice[0] && d1.dice[1]==d2.dice[1] && \n                       d1.dice[2]==d2.dice[2] && d1.dice[3]==d2.dice[4] && d1.dice[4]==d2.dice[3]){\n                        ans = \"Yes\";\n                    }\n                }\n            }\n        }\n\n        System.out.println(ans);\n    }\n\n    int[][] abs = {{2,1,0,3},{3,2,1,0},{0,3,2,1},{1,0,3,2}};\n    int[] dx = {0, 1, 0, -1};\n    int[] dy = {-1, 0, 1, 0};\n\n    int[][] nei = {{1, 3, 2, 4}, {5, 3, 0, 4}, {0, 3, 5, 4},\n                   {1, 5, 2, 0}, {1, 0, 2, 5}, {1, 4, 2, 3}};\n\n\n    void bfs(int y, int x){\n        //y, x, pos, prior\n        Queue<int[]> q = new LinkedList<int[]>();\n        q.add(new int[]{y, x, 0, 0});\n        boolean[][] v = new boolean[h][w];\n        v[y][x] = true;\n\n        char[] c = new char[6];\n        HashSet<Character> set = new HashSet<Character>();\n\n        int black = 0;\n        while(q.size()>0){\n            int[] yx = q.poll();\n            int yy = yx[0], xx = yx[1], pos = yx[2], prior = yx[3];\n          \n            c[pos] = sheet[yy][xx];\n            set.add(c[pos]);\n            if(sheet[yy][xx]=='#') black++;\n            sheet[yy][xx] = '.';  \n\n            for(int i=0; i<4; i++){\n                int ny = yy + dy[(i+prior)%4], nx = xx + dx[(i+prior)%4];\n                if(ny<0 || ny>=h || nx<0 || nx>=w || v[ny][nx] || sheet[ny][nx]=='.') continue;\n                for(int j=0; j<4; j++){\n                    if(nei[nei[pos][i]][j]==pos){\n                        v[ny][nx] = true;\n                        q.add(new int[]{ny, nx, nei[pos][i], (abs[i][j]+prior)%4});\n                    }\n                }\n            }\n        }\n\n\n\n        if(black==3 && set.size()==4){\n            list.add(new Dice(c[0], c[1], c[2], c[3], c[4], c[5]));\n            for(int i=0; i<6; i++){\n                if(c[i]!='#') colors[color.indexOf(c[i])]++;\n            }\n        }\n    }\n\n    public static void main(String[] args){\n        new Main().solve();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main{\n\n    int h,w;\n    char[][] sheet;\n    ArrayList<Dice> list;\n    ArrayList<Character> color;\n    int[] colors;\n\n\n    int[] dx = {0, 1, 0, -1};\n    int[] dy = {-1, 0, 1, 0};\n\n    int[][] nei = {{1, 3, 2, 4},\n                   {5, 3, 0, 4},\n                   {0, 3, 5, 4},\n                   {1, 5, 2, 0},\n                   {1, 0, 2, 5},\n                   {1, 4, 2, 3}};\n\n    class Dice{\n        //char f, t, b, r, l, u;\n        char[] dice = new char[6]; \n        Dice(char f, char t, char b, char r, char l, char u){\n            dice[0] = f;\n            dice[1] = t;\n            dice[2] = b;\n            dice[3] = r;\n            dice[4] = l;\n            dice[5] = u;\n        }\n    }\n\n    Dice rotateRight(Dice d){\n        return new Dice(d.dice[0], d.dice[4], d.dice[3], d.dice[1], d.dice[2], d.dice[5]);\n    }\n\n    Dice rotateLeft(Dice d){\n        return new Dice(d.dice[0], d.dice[3], d.dice[4], d.dice[2], d.dice[1], d.dice[5]);\n    }\n\n    Dice rotateDown(Dice d){\n        return new Dice(d.dice[1], d.dice[5], d.dice[0], d.dice[3], d.dice[4], d.dice[2]);\n    }\n\n    Dice rotateUp(Dice d){\n        return new Dice(d.dice[2], d.dice[0], d.dice[5], d.dice[3], d.dice[4], d.dice[1]);\n    }\n    \n    boolean check(Dice d){\n        if(d.dice[1]!='#' && d.dice[3]!='#') return true;\n        if(d.dice[3]!='#' && d.dice[2]!='#') return true;\n        if(d.dice[2]!='#' && d.dice[4]!='#') return true;\n        if(d.dice[4]!='#' && d.dice[1]!='#') return true;\n        return false;\n    }\n\n    Dice rotate(int k, Dice d){\n        if(k==0) return d;\n        if(k==1) return rotateDown(d);\n        if(k==2) return rotateUp(d);\n        if(k==3) return rotateDown(rotateLeft(d));\n        if(k==4) return rotateDown(rotateRight(d));\n        if(k==5) return rotateDown(rotateDown(d));\n        return d;\n    }\n\n    void solve(){\n        Scanner sc = new Scanner(System.in);\n\n        h = sc.nextInt();\n        w = sc.nextInt();\n        sheet = new char[h][w];\n        color = new ArrayList<Character>();\n        for(int i=0; i<h; i++){\n            String s = sc.next();\n            for(int j=0; j<w; j++){\n                sheet[i][j] = s.charAt(j);\n                if(sheet[i][j]!='#' && sheet[i][j]!='.' && !color.contains(sheet[i][j])) \n                    color.add(sheet[i][j]);\n            }\n        }\n\n        list = new ArrayList<Dice>();\n        colors = new int[color.size()];\n\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                if(sheet[i][j]!='.'){\n                    bfs(i, j);\n                }\n            }\n        }\n\n        ArrayList<Dice> list2 = new ArrayList<Dice>();\n\n        for(int i=0; i<colors.length; i++){\n            if(colors[i]<4) continue;\n            ArrayList<Dice> same = new ArrayList<Dice>();\n            for(int j=0; j<list.size(); j++){\n                Dice dd  = list.get(j);\n                for(int k=0; k<6; k++){\n                    if(dd.dice[k]==color.get(i)){\n                        Dice newDice = rotate(k, dd); //kを前面に\n                        same.add(newDice);\n                        break;\n                    }\n                }\n            }\n            if(same.size()>4) continue;\n\n            for(int j=0; j<same.size(); j++){\n                Dice d1 = same.get(j);\n                if(!check(d1)) continue;\n                while(d1.dice[1]=='#' || d1.dice[4]=='#'){\n                    d1 = rotateRight(d1);\n                }\n                for(int k=j+1; k<same.size(); k++){\n                    Dice d2 = same.get(k);\n                    if(!check(d2)) continue;\n                    while(d2.dice[1]=='#' || d2.dice[3]=='#'){\n                        d2 = rotateRight(d2);\n                    }\n                    for(int l=k+1; l<same.size(); l++){\n                        Dice d3 = same.get(l);\n                        if(!check(d3)) continue;\n                        while(d3.dice[4]=='#' || d3.dice[2]=='#'){\n                            d3 = rotateRight(d3);\n                        }\n                        for(int m=l+1; m<same.size(); m++){\n                            Dice d4 = same.get(m);\n                            if(!check(d4)) continue;\n                            while(d4.dice[3]=='#' || d4.dice[2]=='#'){\n                                d4 = rotateRight(d4);\n                            }\n\n                            if(d1.dice[1]==d2.dice[1] && d2.dice[3]==d4.dice[3] &&\n                               d3.dice[2]==d4.dice[2] && d1.dice[4]==d3.dice[4] && \n                               d1.dice[1]!=d3.dice[2] && d1.dice[4]!=d2.dice[3]){\n                                list2.add(new Dice((char)color.get(i), d1.dice[1], d3.dice[2], d2.dice[3], d1.dice[4], '.'));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        String ans = \"No\";\n        for(int i=0; i<list2.size(); i++){\n            Dice d1 = list2.get(i);\n            for(int j=i+1; j<list2.size(); j++){\n                Dice d2 = list2.get(j);\n                if(d1.dice[0]!=d2.dice[0] && d1.dice[1]==d2.dice[1] && \n                   d1.dice[2]==d2.dice[2] && d1.dice[3]==d2.dice[4] && \n                   d1.dice[4]==d2.dice[3]){\n                    ans = \"Yes\";\n                }\n            }\n        }\n\n        System.out.println(ans);\n    }\n\n    int[][] abs = {{2,1,0,3},{3,2,1,0},{0,3,2,1},{1,0,3,2}};\n\n    void bfs(int y, int x){\n        //y, x, pos, prior, bit\n        Queue<int[]> q = new LinkedList<int[]>();\n        q.add(new int[]{y, x, 0, 0, 1});\n        boolean[][] v = new boolean[h][w];\n        v[y][x] = true;\n\n\n        char[] c = new char[6];\n        HashSet<Character> set = new HashSet<Character>();\n\n        int black = 0;\n        int cnt = 0;\n        while(q.size()>0){\n            int[] yx = q.poll();\n            int yy = yx[0], xx = yx[1], pos = yx[2], prior = yx[3], bit = yx[4];\n          \n            c[pos] = sheet[yy][xx];\n            set.add(c[pos]);\n            if(sheet[yy][xx]=='#') black++;\n            cnt++;\n            sheet[yy][xx] = '.';  \n\n            for(int i=0; i<4; i++){\n                int ny = yy + dy[(i+prior)%4], nx = xx + dx[(i+prior)%4];\n                if(ny<0 || ny>=h || nx<0 || nx>=w || v[ny][nx] || sheet[ny][nx]=='.' || (bit&(1<<nei[pos][i]))>0) continue;\n                for(int j=0; j<4; j++){\n                    if(nei[nei[pos][i]][j]==pos){\n                        v[ny][nx] = true;\n                        q.add(new int[]{ny, nx, nei[pos][i], (abs[i][j]+prior)%4, bit^(1<<nei[pos][i])});\n                    }\n                }\n            }\n        }\n\n\n\n        if(cnt==6 && black==3 && set.size()==4){\n            list.add(new Dice(c[0], c[1], c[2], c[3], c[4], c[5]));\n            //System.out.println(c[0]+\" \"+c[1]+\" \"+c[2]+\" \"+c[3]+\" \"+c[4]+\" \"+c[5]);\n            for(int i=0; i<6; i++){\n                if(c[i]=='#') continue;\n                colors[color.indexOf(c[i])]++;\n            }\n        }\n    }\n\n    public static void main(String[] args){\n        new Main().solve();\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main{\n\n    int h,w;\n    char[][] sheet;\n    ArrayList<Dice> list;\n    ArrayList<Character> color;\n    int[] colors;\n\n\n    int[] dx = {0, 1, 0, -1};\n    int[] dy = {-1, 0, 1, 0};\n\n    int[][] nei = {{1, 3, 2, 4},\n                   {5, 3, 0, 4},\n                   {0, 3, 5, 4},\n                   {1, 5, 2, 0},\n                   {1, 0, 2, 5},\n                   {1, 4, 2, 3}};\n\n    class Dice{\n        //char f, t, b, r, l, u;\n        char[] dice = new char[6]; \n        Dice(char f, char t, char b, char r, char l, char u){\n            dice[0] = f;\n            dice[1] = t;\n            dice[2] = b;\n            dice[3] = r;\n            dice[4] = l;\n            dice[5] = u;\n        }\n    }\n\n    Dice rotateRight(Dice d){\n        return new Dice(d.dice[0], d.dice[4], d.dice[3], d.dice[1], d.dice[2], d.dice[5]);\n    }\n\n    Dice rotateLeft(Dice d){\n        return new Dice(d.dice[0], d.dice[3], d.dice[4], d.dice[2], d.dice[1], d.dice[5]);\n    }\n\n    Dice rotateDown(Dice d){\n        return new Dice(d.dice[1], d.dice[5], d.dice[0], d.dice[3], d.dice[4], d.dice[2]);\n    }\n\n    Dice rotateUp(Dice d){\n        return new Dice(d.dice[2], d.dice[0], d.dice[5], d.dice[3], d.dice[4], d.dice[1]);\n    }\n    \n    boolean check(Dice d){\n        if(d.dice[1]!='#' && d.dice[3]!='#') return true;\n        if(d.dice[3]!='#' && d.dice[2]!='#') return true;\n        if(d.dice[2]!='#' && d.dice[4]!='#') return true;\n        if(d.dice[4]!='#' && d.dice[1]!='#') return true;\n        return false;\n    }\n\n    Dice rotate(int k, Dice d){\n        if(k==0) return d;\n        if(k==1) return rotateDown(d);\n        if(k==2) return rotateUp(d);\n        if(k==3) return rotateDown(rotateLeft(d));\n        if(k==4) return rotateDown(rotateRight(d));\n        if(k==5) return rotateDown(rotateDown(d));\n        return d;\n    }\n\n    void solve(){\n        Scanner sc = new Scanner(System.in);\n\n        h = sc.nextInt();\n        w = sc.nextInt();\n        sheet = new char[h][w];\n        color = new ArrayList<Character>();\n        for(int i=0; i<h; i++){\n            String s = sc.next();\n            for(int j=0; j<w; j++){\n                sheet[i][j] = s.charAt(j);\n                if(sheet[i][j]!='#' && sheet[i][j]!='.' && !color.contains(sheet[i][j])) \n                    color.add(sheet[i][j]);\n            }\n        }\n\n        list = new ArrayList<Dice>();\n        colors = new int[color.size()];\n\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                if(sheet[i][j]!='.'){\n                    bfs(i, j);\n                }\n            }\n        }\n\n        ArrayList<Dice> list2 = new ArrayList<Dice>();\n\n        for(int i=0; i<colors.length; i++){\n            if(colors[i]<4) continue;\n            ArrayList<Dice> same = new ArrayList<Dice>();\n            for(int j=0; j<list.size(); j++){\n                Dice dd  = list.get(j);\n                for(int k=0; k<6; k++){\n                    if(dd.dice[k]==color.get(i)){\n                        Dice newDice = rotate(k, dd); //kを前面に\n                        same.add(newDice);\n                        break;\n                    }\n                }\n            }\n            if(same.size()<4) continue;\n\n            for(int j=0; j<same.size(); j++){\n                Dice d1 = same.get(j);\n                if(!check(d1)) continue;\n                while(d1.dice[1]=='#' || d1.dice[4]=='#'){\n                    d1 = rotateRight(d1);\n                }\n                for(int k=j+1; k<same.size(); k++){\n                    Dice d2 = same.get(k);\n                    if(!check(d2)) continue;\n                    while(d2.dice[1]=='#' || d2.dice[3]=='#'){\n                        d2 = rotateRight(d2);\n                    }\n                    for(int l=k+1; l<same.size(); l++){\n                        Dice d3 = same.get(l);\n                        if(!check(d3)) continue;\n                        while(d3.dice[4]=='#' || d3.dice[2]=='#'){\n                            d3 = rotateRight(d3);\n                        }\n                        for(int m=l+1; m<same.size(); m++){\n                            Dice d4 = same.get(m);\n                            if(!check(d4)) continue;\n                            while(d4.dice[3]=='#' || d4.dice[2]=='#'){\n                                d4 = rotateRight(d4);\n                            }\n\n                            if(d1.dice[1]==d2.dice[1] && d2.dice[3]==d4.dice[3] &&\n                               d3.dice[2]==d4.dice[2] && d1.dice[4]==d3.dice[4] && \n                               d1.dice[1]!=d3.dice[2] && d1.dice[4]!=d2.dice[3]){\n                                list2.add(new Dice((char)color.get(i), d1.dice[1], d3.dice[2], d2.dice[3], d1.dice[4], '.'));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        String ans = \"No\";\n        for(int i=0; i<list2.size(); i++){\n            Dice d1 = list2.get(i);\n            for(int j=i+1; j<list2.size(); j++){\n                Dice d2 = list2.get(j);\n                if(d1.dice[0]!=d2.dice[0] && d1.dice[1]==d2.dice[1] && \n                   d1.dice[2]==d2.dice[2] && d1.dice[3]==d2.dice[4] && \n                   d1.dice[4]==d2.dice[3]){\n                    ans = \"Yes\";\n                }\n            }\n        }\n\n        System.out.println(ans);\n    }\n\n    int[][] abs = {{2,1,0,3},{3,2,1,0},{0,3,2,1},{1,0,3,2}};\n\n    void bfs(int y, int x){\n        //y, x, pos, prior, bit\n        Queue<int[]> q = new LinkedList<int[]>();\n        q.add(new int[]{y, x, 0, 0, 1});\n        boolean[][] v = new boolean[h][w];\n        v[y][x] = true;\n\n\n        char[] c = new char[6];\n        HashSet<Character> set = new HashSet<Character>();\n\n        int black = 0;\n        int cnt = 0;\n        while(q.size()>0){\n            int[] yx = q.poll();\n            int yy = yx[0], xx = yx[1], pos = yx[2], prior = yx[3], bit = yx[4];\n          \n            c[pos] = sheet[yy][xx];\n            set.add(c[pos]);\n            if(sheet[yy][xx]=='#') black++;\n            cnt++;\n            sheet[yy][xx] = '.';  \n\n            for(int i=0; i<4; i++){\n                int ny = yy + dy[(i+prior)%4], nx = xx + dx[(i+prior)%4];\n                if(ny<0 || ny>=h || nx<0 || nx>=w || v[ny][nx] || sheet[ny][nx]=='.' || (bit&(1<<nei[pos][i]))>0) continue;\n                for(int j=0; j<4; j++){\n                    if(nei[nei[pos][i]][j]==pos){\n                        v[ny][nx] = true;\n                        q.add(new int[]{ny, nx, nei[pos][i], (abs[i][j]+prior)%4, bit^(1<<nei[pos][i])});\n                    }\n                }\n            }\n        }\n\n\n\n        if(cnt==6 && black==3 && set.size()==4){\n            list.add(new Dice(c[0], c[1], c[2], c[3], c[4], c[5]));\n            //System.out.println(c[0]+\" \"+c[1]+\" \"+c[2]+\" \"+c[3]+\" \"+c[4]+\" \"+c[5]);\n            for(int i=0; i<6; i++){\n                if(c[i]=='#') continue;\n                colors[color.indexOf(c[i])]++;\n            }\n        }\n    }\n\n    public static void main(String[] args){\n        new Main().solve();\n    }\n}"
  },
  {
    "language": "Python",
    "code": "from collections import deque\nfrom string import ascii_lowercase, ascii_uppercase, digits\nimport sys\nreadline = sys.stdin.readline\nwrite = sys.stdout.write\n\nD = [\n    (1, 5, 2, 3, 0, 4), # 'U'\n    (3, 1, 0, 5, 4, 2), # 'R'\n    (4, 0, 2, 3, 5, 1), # 'D'\n    (2, 1, 5, 0, 4, 3), # 'L'\n]\np_dice = (0, 0, 0, 1, 1, 2, 2, 3)*3\n\nss = digits + ascii_uppercase + ascii_lowercase\nL = len(ss)\n\ndef rotate_dice(L, k):\n    return [L[e] for e in D[k]]\ndef enumerate_dice(L0):\n    L = L0[:]\n    for k in p_dice:\n        yield L\n        L[:] = (L[e] for e in D[k])\ndef dice_graph(L0 = [0, 1, 2, 3, 4, 5]):\n    DA = list(map(tuple, enumerate_dice(L0)))\n    DM = {tuple(e): i for i, e in enumerate(DA)}\n    G = [list(DM[tuple(rotate_dice(ds, i))] for i in range(4)) for ds in DA]\n    return DA, G\n\ndef solve():\n    H, W = map(int, readline().split())\n    S = [readline().strip() for i in range(H)]\n\n    DA, DG = dice_graph()\n    dd = ((0, -1), (1, 0), (0, 1), (-1, 0))\n\n    DS = []\n    used = [[0]*W for i in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == '.' or used[i][j]:\n                continue\n            D = [0]*6\n            que = deque([(j, i, 0)])\n            used[i][j] = 1\n            while que:\n                x, y, k = que.popleft()\n                v = DA[k][0]\n                c = S[y][x]\n                if c == '#':\n                    D[v] = L\n                else:\n                    D[v] = ss.index(c)\n                for e, (dx, dy) in enumerate(dd):\n                    nx = x + dx; ny = y + dy\n                    if not 0 <= nx < W or not 0 <= ny < H or S[ny][nx] == '.' or used[ny][nx]:\n                        continue\n                    used[ny][nx] = 1\n                    que.append((nx, ny, DG[k][e]))\n            if D.count(L) != 3:\n                continue\n            for e in enumerate_dice(D):\n                if e[3] == e[4] == e[5] == L:\n                    if e[0] != e[1] and e[1] != e[2] and e[2] != e[0]:\n                        DS.append(e[:3])\n                    break\n    P = [\n        [0, 3, 4],\n        [0, 2, 3],\n        [0, 1, 2],\n        [0, 4, 1],\n        [3, 2, 5],\n        [2, 1, 5],\n        [1, 4, 5],\n        [4, 3, 5],\n    ]\n    DS.sort()\n    M = len(DS)\n    def dfs(i, used, used_c, state):\n        if i == 8:\n            return 1\n        ps = P[i]\n        s = [0]*3\n        for j in range(M):\n            if used[j]:\n                continue\n            used[j] = 1\n            d = DS[j]\n            for b in range(3):\n                for k in range(3):\n                    p = ps[k]\n                    if state[p] == -1:\n                        if used_c[d[-b+k]]:\n                            break\n                    else:\n                        if state[p] != d[-b+k]:\n                            break\n                else:\n                    for k in range(3):\n                        p = ps[k]\n                        if state[p] == -1:\n                            used_c[d[-b+k]] = 1\n                        s[k], state[p] = state[p], d[-b+k]\n                    if dfs(i+1, used, used_c, state):\n                        return 1\n                    for k in range(3):\n                        p = ps[k]\n                        state[p] = s[k]\n                        if state[p] == -1:\n                            used_c[d[-b+k]] = 0\n            used[j] = 0\n        return 0\n    if M >= 8 and dfs(0, [0]*M, [0]*L, [-1]*6):\n        write(\"Yes\\n\")\n    else:\n        write(\"No\\n\")\nsolve()\n"
  }
]