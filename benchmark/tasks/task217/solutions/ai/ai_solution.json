[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdbool.h>\n#include <math.h>\n\n#define MAX 300000\n\nbool isMondaySaturday(int n) {\n    return n % 7 == 1 || n % 7 == 6;\n}\n\nbool isPrime(int n, bool *sieve) {\n    if (n == 1) return false;\n    if (n == 2 || n == 3) return true;\n    if (n % 2 == 0) return false;\n    return sieve[n];\n}\n\nvoid buildSieve(bool *sieve) {\n    for (int i = 2; i <= MAX; ++i) {\n        sieve[i] = true;\n    }\n    for (int i = 2; i * i <= MAX; ++i) {\n        if (sieve[i]) {\n            for (int j = i * i; j <= MAX; j += i) {\n                sieve[j] = false;\n            }\n        }\n    }\n}\n\nvoid findMondaySaturdayPrimes(bool *sieve, bool *msPrimes) {\n    for (int i = 2; i <= MAX; ++i) {\n        if (isMondaySaturday(i) && isPrime(i, sieve)) {\n            msPrimes[i] = true;\n        }\n    }\n}\n\nvoid factorize(int n, bool *msPrimes) {\n    printf(\"%d:\", n);\n    if (msPrimes[n]) {\n        printf(\" %d\\n\", n);\n        return;\n    }\n    int temp = n;\n    for (int i = 2; i <= temp; ++i) {\n        if (msPrimes[i] && temp % i == 0) {\n            printf(\" %d\", i);\n            while (temp % i == 0) {\n                temp /= i;\n            }\n        }\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    bool sieve[MAX + 1];\n    bool msPrimes[MAX + 1] = {false};\n    \n    buildSieve(sieve);\n    findMondaySaturdayPrimes(sieve, msPrimes);\n    \n    int num;\n    while (scanf(\"%d\", &num) != EOF) {\n        if (num == 0) break;\n        if (isMondaySaturday(num)) {\n            factorize(num, msPrimes);\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 19:07:26"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class MondaySaturdayPrimeFactors {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (scanner.hasNextInt()) {\n            int n = scanner.nextInt();\n            if (n <= 1 || n >= 300000 || !isMondaySaturdayNumber(n)) {\n                continue;\n            }\n            \n            List<Integer> factors = findMondaySaturdayPrimeFactors(n);\n            \n            if (!factors.isEmpty()) {\n                System.out.print(n + \":\");\n                for (int factor : factors) {\n                    System.print(\" \" + factor);\n                }\n                System.out.println();\n            }\n        }\n        \n        scanner.close();\n    }\n    \n    private static boolean isMondaySaturdayNumber(int num) {\n        return num % 7 == 1 || num % 7 == 6;\n    }\n    \n    private static boolean isMondaySaturdayPrime(int num) {\n        if (num <= 1 || !isMondaySaturdayNumber(num)) {\n            return false;\n        }\n        \n        for (int i = 2; i * i <= num; i++) {\n            if (isMondaySaturdayNumber(i) && isMondaySaturdayPrime(i) && num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    private static List<Integer> findMondaySaturdayPrimeFactors(int num) {\n        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i <= num; i++) {\n            if (isMondaySaturdayPrime(i) && num % i == 0) {\n                while (num % i == 0) {\n                    factors.add(i);\n                    num /= i;\n                }\n            }\n        }\n        \n        return factors;\n    }\n}",
    "timestamp": "2025-08-05 19:07:33"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nbool isMondaySaturday(int num) {\n    return num % 7 == 1 || num % 7 == 6;\n}\n\nvector<int> getMondaySaturdayPrimesUpTo(int limit) {\n    vector<bool> isPrime(limit + 1, true);\n    isPrime[0] = isPrime[1] = false;\n    for (int i = 2; i * i <= limit; ++i) {\n        if (isPrime[i]) {\n            for (int j = i * i; j <= limit; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    vector<int> primes;\n    for (int i = 2; i <= limit; ++i) {\n        if (isPrime[i] && isMondaySaturday(i)) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\nvector<int> getMondaySaturdayPrimeFactors(int num, const vector<int>& primes) {\n    vector<int> factors;\n    int temp = num;\n    for (int prime : primes) {\n        if (prime * prime > temp) break;\n        if (temp % prime == 0) {\n            factors.push_back(prime);\n            while (temp % prime == 0) {\n                temp /= prime;\n            }\n        }\n    }\n    if (temp > 1 && isMondaySaturday(temp)) {\n        factors.push_back(temp);\n    }\n    return factors;\n}\n\nint main() {\n    const int MAX = 300000;\n    vector<int> primes = getMondaySaturdayPrimesUpTo(MAX);\n    int num;\n    while (cin >> num) {\n        if (!isMondaySaturday(num)) continue;\n        vector<int> factors = getMondaySaturdayPrimeFactors(num, primes);\n        cout << num << \":\";\n        for (int factor : factors) {\n            cout << \" \" << factor;\n        }\n        cout << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 19:07:52"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdbool.h>\n#include <math.h>\n\nbool is_monday_saturday_number(int num) {\n    return (num % 7 == 1 || num % 7 == 6);\n}\n\nbool is_monday_saturday_prime(int num) {\n    if (num <= 1 || !is_monday_saturday_number(num)) \n        return false;\n    \n    for (int i = 2; i <= sqrt(num); i++) {\n        if (is_monday_saturday_number(i) && num % i == 0 && is_monday_saturday_number(num / i)) \n            return false;\n    }\n    return true;\n}\n\nvoid find_monday_saturday_prime_factors(int num) {\n    printf(\"%d:\", num);\n    \n    for (int factor = 2; factor <= num; factor++) {\n        if (is_monday_saturday_prime(factor) && num % factor == 0) {\n            printf(\" %d\", factor);\n        }\n    }\n    \n    printf(\"\\n\");\n}\n\nint main() {\n    int input;\n    while (scanf(\"%d\", &input) == 1 && input > 1 && input < 300000) {\n        if (is_monday_saturday_number(input)) {\n            find_monday_saturday_prime_factors(input);\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 19:07:59"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool isMondaySaturday(int num) {\n    return num % 7 == 1 || num % 7 == 6;\n}\n\nbool isMondaySaturdayPrime(int num) {\n    if (num <= 1) return false;\n    if (!isMondaySaturday(num)) return false;\n    \n    for (int i = 2; i * i <= num; ++i) {\n        if (isMondaySaturday(i) && num % i == 0 && i != num) \n            return false;\n    }\n    return true;\n}\n\nstd::vector<int> mondaySaturdayPrimeFactors(int num) {\n    std::vector<int> factors;\n    \n    for (int i = 2; i <= num; ++i) {\n        if (isMondaySaturdayPrime(i) && num % i == 0) {\n            factors.push_back(i);\n        }\n    }\n    \n    return factors;\n}\n\nint main() {\n    int n;\n    while (std::cin >> n) {\n        if (n <= 1 || n >= 300000 || !isMondaySaturday(n)) continue;\n        \n        std::vector<int> factors = mondaySaturdayPrimeFactors(n);\n        \n        if (!factors.empty()) {\n            std::cout << n << \":\";\n            for (int factor : factors) {\n                std::cout << \" \" << factor;\n            }\n            std::cout << std::endl;\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 19:08:05"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class MondaySaturdayPrimes {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        List<Integer> inputs = new ArrayList<>();\n        while (scanner.hasNextInt()) {\n            inputs.add(scanner.nextInt());\n        }\n        \n        int maxInput = Collections.max(inputs);\n        boolean[] isPrime = new boolean[maxInput + 1];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false;\n        \n        for (int i = 2; i * i <= maxInput; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j <= maxInput; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        \n        List<Integer> mondaySaturdayPrimes = new ArrayList<>();\n        for (int i = 2; i <= maxInput; i++) {\n            if (isPrime[i] && (i % 7 == 1 || i % 7 == 6)) {\n                mondaySaturdayPrimes.add(i);\n            }\n        }\n        \n        for (int num : inputs) {\n            List<Integer> factors = new ArrayList<>();\n            int temp = num;\n            for (int prime : mondaySaturdayPrimes) {\n                if (prime > temp) break;\n                if (temp % prime == 0) {\n                    factors.add(prime);\n                    while (temp % prime == 0) {\n                        temp /= prime;\n                    }\n                }\n            }\n            System.out.print(num + \":\");\n            for (int factor : factors) {\n                System.out.print(\" \" + factor);\n            }\n            System.out.println();\n        }\n    }\n}",
    "timestamp": "2025-08-05 19:08:21"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def is_monday_saturday_number(n):\n    return n % 7 == 1 or n % 7 == 6\n\ndef monday_saturday_prime_factors(num):\n    def sieve(limit):\n        primes = []\n        is_prime = [True] * (limit + 1)\n        for candidate in range(2, limit + 1):\n            if is_prime[candidate]:\n                if is_monday_saturday_number(candidate):\n                    primes.append(candidate)\n                for multiple in range(candidate * candidate, limit + 1, candidate):\n                    is_prime[multiple] = False\n        return primes\n\n    factors = []\n    for prime in monday_saturday_primes:\n        while num % prime == 0:\n            if prime not in factors:\n                factors.append(prime)\n            num //= prime\n        if num == 1:\n            break\n    \n    return factors\n\nmonday_saturday_primes = sieve(300000)\n\ndef output_prime_factors(numbers):\n    for number in numbers:\n        if is_monday_saturday_number(number):\n            factors = monday_saturday_prime_factors(number)\n            print(f\"{number}: {' '.join(map(str, factors))}\")\n\n# Example usage with input numbers\ninput_numbers = [8, 13, 75, 78, 85, 299, 3001, 123456]\noutput_prime_factors(input_numbers)",
    "timestamp": "2025-08-13 02:36:48"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class MondaySaturdayPrimeFactors {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        List<Integer> mondaySaturdayPrimes = generateMondaySaturdayPrimes(300000);\n\n        while (scanner.hasNextInt()) {\n            int num = scanner.nextInt();\n            if (isMondaySaturdayNumber(num)) {\n                System.out.print(num + \":\");\n                List<Integer> factors = getMondaySaturdayPrimeFactors(num, mondaySaturdayPrimes);\n                for (int factor : factors) {\n                    System.out.print(\" \" + factor);\n                }\n                System.out.println();\n            }\n        }\n    }\n\n    private static boolean isMondaySaturdayNumber(int num) {\n        int remainder = num % 7;\n        return remainder == 1 || remainder == 6;\n    }\n\n    private static List<Integer> generateMondaySaturdayPrimes(int limit) {\n        boolean[] isPrime = new boolean[limit + 1];\n        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i <= limit; i++) {\n            isPrime[i] = true;\n        }\n\n        for (int p = 2; p * p <= limit; p++) {\n            if (isPrime[p]) {\n                for (int i = p * p; i <= limit; i += p) {\n                    isPrime[i] = false;\n                }\n            }\n        }\n\n        for (int i = 2; i <= limit; i++) {\n            if (isPrime[i] && isMondaySaturdayNumber(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private static List<Integer> getMondaySaturdayPrimeFactors(int num, List<Integer> mondaySaturdayPrimes) {\n        List<Integer> factors = new ArrayList<>();\n        for (int prime : mondaySaturdayPrimes) {\n            if (prime > num) break;\n            if (num % prime == 0) {\n                factors.add(prime);\n            }\n        }\n        return factors;\n    }\n}",
    "timestamp": "2025-08-13 02:36:55"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\n#define LIMIT 300000\n\nbool is_monday_saturday_number(int n) {\n    int remainder = n % 7;\n    return (remainder == 1 || remainder == 6);\n}\n\nbool is_monday_saturday_prime(int n) {\n    if (n <= 1 || !is_monday_saturday_number(n)) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (is_monday_saturday_number(i) && n % i == 0) return false;\n    }\n    return true;\n}\n\nvoid find_monday_saturday_prime_factors(int num) {\n    printf(\"%d:\", num);\n    \n    for (int i = 2; i <= num / 2; i++) {\n        if (is_monday_saturday_prime(i) && num % i == 0) {\n            printf(\" %d\", i);\n        }\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int number;\n    \n    while (scanf(\"%d\", &number) == 1) {\n        if (number > 1 && number < LIMIT && is_monday_saturday_number(number)) {\n            find_monday_saturday_prime_factors(number);\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 02:36:58"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def is_monday_saturday_number(n):\n    return n % 7 in [1, 6]\n\ndef is_monday_saturday_prime(n):\n    if n <= 1 or not is_monday_saturday_number(n):\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if is_monday_saturday_number(i) and n % i == 0 and i != n:\n            return False\n    return True\n\ndef monday_saturday_prime_factors(n):\n    factors = []\n    for i in range(2, n + 1):\n        if is_monday_saturday_number(i) and is_monday_saturday_prime(i) and n % i == 0:\n            factors.append(i)\n    return factors\n\ndef solve():\n    while True:\n        try:\n            num = int(input())\n            if 1 < num < 300000 and is_monday_saturday_number(num):\n                factors = monday_saturday_prime_factors(num)\n                print(f\"{num}: {' '.join(map(str, factors))}\")\n            else:\n                break\n        except EOFError:\n            break\n\nsolve()",
    "timestamp": "2025-08-13 02:37:09"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\nimport math\n\ndef is_monday_saturday(n):\n    return n % 7 in {1, 6}\n\ndef precompute_monday_saturday_primes(max_limit):\n    sieve = [True] * (max_limit + 1)\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(math.isqrt(max_limit)) + 1):\n        if sieve[i]:\n            for j in range(i*i, max_limit + 1, i):\n                sieve[j] = False\n    monday_saturday_primes = []\n    for num in range(2, max_limit + 1):\n        if sieve[num] and is_monday_saturday(num):\n            monday_saturday_primes.append(num)\n    return monday_saturday_primes\n\nmax_limit = 300000\nmonday_saturday_primes = precompute_monday_saturday_primes(max_limit)\n\ndef get_monday_saturday_prime_factors(n):\n    factors = set()\n    if not is_monday_saturday(n):\n        return factors\n    original_n = n\n    for prime in monday_saturday_primes:\n        if prime * prime > original_n:\n            break\n        if n % prime == 0:\n            factors.add(prime)\n            while n % prime == 0:\n                n = n // prime\n    if n > 1 and is_monday_saturday(n):\n        factors.add(n)\n    return sorted(factors)\n\ndef main():\n    input_lines = sys.stdin.read().split()\n    for line in input_lines:\n        n = int(line)\n        if n == 0:\n            break\n        factors = get_monday_saturday_prime_factors(n)\n        print(f\"{n}:\", ' '.join(map(str, factors)))\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 02:37:24"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cmath>\n\nbool is_monday_saturday(int num) {\n    int remainder = num % 7;\n    return remainder == 1 || remainder == 6;\n}\n\nbool is_prime(int num, const std::vector<int>& monday_saturday_primes) {\n    if (!is_monday_saturday(num)) return false;\n    for (int prime : monday_saturday_primes) {\n        if (prime * prime > num) break;\n        if (num % prime == 0) return false;\n    }\n    return true;\n}\n\nstd::vector<int> generate_monday_saturday_primes(int limit) {\n    std::vector<int> monday_saturday_primes;\n    for (int num = 2; num < limit; ++num) {\n        if (is_prime(num, monday_saturday_primes)) {\n            monday_saturday_primes.push_back(num);\n        }\n    }\n    return monday_saturday_primes;\n}\n\nstd::set<int> find_prime_factors(int num, const std::vector<int>& monday_saturday_primes) {\n    std::set<int> factors;\n    for (int prime : monday_saturday_primes) {\n        while (num % prime == 0) {\n            factors.insert(prime);\n            num /= prime;\n        }\n        if (prime * prime > num) break;\n    }\n    if (num > 1 && is_monday_saturday(num)) {\n        factors.insert(num);\n    }\n    return factors;\n}\n\nint main() {\n    std::vector<int> monday_saturday_primes = generate_monday_saturday_primes(300000);\n    int num;\n    while (std::cin >> num) {\n        if (is_monday_saturday(num)) {\n            std::set<int> factors = find_prime_factors(num, monday_saturday_primes);\n            std::cout << num << \":\";\n            for (auto factor : factors) {\n                std::cout << \" \" << factor;\n            }\n            std::cout << std::endl;\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 11:06:53"
  }
]