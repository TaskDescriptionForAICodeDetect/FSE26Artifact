[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MAX_N 100\n#define MAX_OPS 1000\n\nvoid initializeMatrix(int matrix[MAX_N][MAX_N], int N) {\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            matrix[i][j] = (i * N) + j + 1;\n        }\n    }\n}\n\nvoid shiftLeft(int matrix[MAX_N][MAX_N], int N) {\n    for (int i = 0; i < N; i++) {\n        int temp = matrix[i][0];\n        for (int j = 0; j < N - 1; j++) {\n            matrix[i][j] = matrix[i][j + 1];\n        }\n        matrix[i][N - 1] = temp;\n    }\n}\n\nvoid shiftRight(int matrix[MAX_N][MAX_N], int N) {\n    for (int i = 0; i < N; i++) {\n        int temp = matrix[i][N - 1];\n        for (int j = N - 1; j > 0; j--) {\n            matrix[i][j] = matrix[i][j - 1];\n        }\n        matrix[i][0] = temp;\n    }\n}\n\nvoid shiftUp(int matrix[MAX_N][MAX_N], int N) {\n    for (int j = 0; j < N; j++) {\n        int temp = matrix[0][j];\n        for (int i = 0; i < N - 1; i++) {\n            matrix[i][j] = matrix[i + 1][j];\n        }\n        matrix[N - 1][j] = temp;\n    }\n}\n\nvoid shiftDown(int matrix[MAX_N][MAX_N], int N) {\n    for (int j = 0; j < N; j++) {\n        int temp = matrix[N - 1][j];\n        for (int i = N - 1; i > 0; i--) {\n            matrix[i][j] = matrix[i - 1][j];\n        }\n        matrix[0][j] = temp;\n    }\n}\n\nvoid printMatrix(int matrix[MAX_N][MAX_N], int N) {\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int N, M;\n    scanf(\"%d %d\", &N, &M);\n    \n    int matrix[MAX_N][MAX_N];\n    initializeMatrix(matrix, N);\n    \n    char operations[MAX_OPS + 1];\n    scanf(\"%s\", operations);\n    \n    for (int i = 0; i < M; i++) {\n        switch (operations[i]) {\n            case 'L': shiftLeft(matrix, N); break;\n            case 'R': shiftRight(matrix, N); break;\n            case 'U': shiftUp(matrix, N); break;\n            case 'D': shiftDown(matrix, N); break;\n        }\n    }\n    \n    printMatrix(matrix, N);\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:55:17"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid leftShift(int N, int matrix[N][N]) {\n    for (int i = 0; i < N; i++) {\n        int temp = matrix[i][0];\n        for (int j = 0; j < N - 1; j++) {\n            matrix[i][j] = matrix[i][j + 1];\n        }\n        matrix[i][N - 1] = temp;\n    }\n}\n\nvoid rightShift(int N, int matrix[N][N]) {\n    for (int i = 0; i < N; i++) {\n        int temp = matrix[i][N - 1];\n        for (int j = N - 1; j > 0; j--) {\n            matrix[i][j] = matrix[i][j - 1];\n        }\n        matrix[i][0] = temp;\n    }\n}\n\nvoid upShift(int N, int matrix[N][N]) {\n    for (int j = 0; j < N; j++) {\n        int temp = matrix[0][j];\n        for (int i = 0; i < N - 1; i++) {\n            matrix[i][j] = matrix[i + 1][j];\n        }\n        matrix[N - 1][j] = temp;\n    }\n}\n\nvoid downShift(int N, int matrix[N][N]) {\n    for (int j = 0; j < N; j++) {\n        int temp = matrix[N - 1][j];\n        for (int i = N - 1; i > 0; i--) {\n            matrix[i][j] = matrix[i - 1][j];\n        }\n        matrix[0][j] = temp;\n    }\n}\n\nvoid shiftMatrix(int N, char* operations) {\n    int matrix[N][N];\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            matrix[i][j] = (i) * N + (j + 1);\n        }\n    }\n\n    int len = strlen(operations);\n    for (int k = 0; k < len; k++) {\n        switch (operations[k]) {\n            case 'L':\n                leftShift(N, matrix);\n                break;\n            case 'R':\n                rightShift(N, matrix);\n                break;\n            case 'U':\n                upShift(N, matrix);\n                break;\n            case 'D':\n                downShift(N, matrix);\n                break;\n        }\n    }\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int N;\n    char operations[100];\n    scanf(\"%d\", &N);\n    scanf(\"%s\", operations);\n    shiftMatrix(N, operations);\n    return 0;\n}",
    "timestamp": "2025-08-05 21:55:44"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvoid leftShift(vector<vector<int>>& matrix, int row) {\n    int n = matrix.size();\n    int temp = matrix[row][0];\n    for (int i = 0; i < n - 1; ++i) {\n        matrix[row][i] = matrix[row][i + 1];\n    }\n    matrix[row][n - 1] = temp;\n}\n\nvoid rightShift(vector<vector<int>>& matrix, int row) {\n    int n = matrix.size();\n    int temp = matrix[row][n - 1];\n    for (int i = n - 1; i > 0; --i) {\n        matrix[row][i] = matrix[row][i - 1];\n    }\n    matrix[row][0] = temp;\n}\n\nvoid upShift(vector<vector<int>>& matrix, int col) {\n    int n = matrix.size();\n    int temp = matrix[0][col];\n    for (int i = 0; i < n - 1; ++i) {\n        matrix[i][col] = matrix[i + 1][col];\n    }\n    matrix[n - 1][col] = temp;\n}\n\nvoid downShift(vector<vector<int>>& matrix, int col) {\n    int n = matrix.size();\n    int temp = matrix[n - 1][col];\n    for (int i = n - 1; i > 0; --i) {\n        matrix[i][col] = matrix[i - 1][col];\n    }\n    matrix[0][col] = temp;\n}\n\nint main() {\n    int N, M;\n    cin >> N >> M;\n    vector<vector<int>> matrix(N, vector<int>(N));\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            matrix[i][j] = (i) * N + (j + 1);\n        }\n    }\n\n    string operations;\n    cin >> operations;\n\n    for (char op : operations) {\n        if (op == 'L') {\n            int row;\n            cin >> row;\n            leftShift(matrix, row - 1);\n        } else if (op == 'R') {\n            int row;\n            cin >> row;\n            rightShift(matrix, row - 1);\n        } else if (op == 'U') {\n            int col;\n            cin >> col;\n            upShift(matrix, col - 1);\n        } else if (op == 'D') {\n            int col;\n            cin >> col;\n            downShift(matrix, col - 1);\n        }\n    }\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            cout << matrix[i][j] << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:56:11"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class MatrixShifter {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        scanner.nextLine(); // consume the newline\n        String operations = scanner.nextLine();\n        \n        int[][] matrix = new int[N][N];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                matrix[i][j] = i * N + j + 1;\n            }\n        }\n        \n        for (char op : operations.toCharArray()) {\n            switch (op) {\n                case 'L':\n                    shiftLeft(matrix);\n                    break;\n                case 'R':\n                    shiftRight(matrix);\n                    break;\n                case 'U':\n                    shiftUp(matrix);\n                    break;\n                case 'D':\n                    shiftDown(matrix);\n                    break;\n            }\n        }\n        \n        for (int[] row : matrix) {\n            for (int num : row) {\n                System.out.print(num + \" \");\n            }\n            System.out.println();\n        }\n    }\n    \n    private static void shiftLeft(int[][] matrix) {\n        for (int i = 0; i < matrix.length; i++) {\n            int temp = matrix[i][0];\n            for (int j = 0; j < matrix[i].length - 1; j++) {\n                matrix[i][j] = matrix[i][j + 1];\n            }\n            matrix[i][matrix[i].length - 1] = temp;\n        }\n    }\n    \n    private static void shiftRight(int[][] matrix) {\n        for (int i = 0; i < matrix.length; i++) {\n            int temp = matrix[i][matrix[i].length - 1];\n            for (int j = matrix[i].length - 1; j > 0; j--) {\n                matrix[i][j] = matrix[i][j - 1];\n            }\n            matrix[i][0] = temp;\n        }\n    }\n    \n    private static void shiftUp(int[][] matrix) {\n        for (int j = 0; j < matrix[0].length; j++) {\n            int temp = matrix[0][j];\n            for (int i = 0; i < matrix.length - 1; i++) {\n                matrix[i][j] = matrix[i + 1][j];\n            }\n            matrix[matrix.length - 1][j] = temp;\n        }\n    }\n    \n    private static void shiftDown(int[][] matrix) {\n        for (int j = 0; j < matrix[0].length; j++) {\n            int temp = matrix[matrix.length - 1][j];\n            for (int i = matrix.length - 1; i > 0; i--) {\n                matrix[i][j] = matrix[i - 1][j];\n            }\n            matrix[0][j] = temp;\n        }\n    }\n}",
    "timestamp": "2025-08-05 21:56:36"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class MatrixShifting {\n    public static int[][] shiftMatrix(int N, String operations) {\n        int[][] matrix = new int[N][N];\n        \n        // Initialize matrix\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                matrix[i][j] = (i * N) + j + 1;\n            }\n        }\n        \n        // Perform operations\n        for (char op : operations.toCharArray()) {\n            matrix = shift(matrix, op);\n        }\n        \n        return matrix;\n    }\n    \n    private static int[][] shift(int[][] matrix, char direction) {\n        int N = matrix.length;\n        int[][] newMatrix = new int[N][N];\n        \n        switch (direction) {\n            case 'L': // Left shift\n                for (int i = 0; i < N; i++) {\n                    for (int j = 0; j < N; j++) {\n                        newMatrix[i][j] = matrix[i][(j + 1) % N];\n                    }\n                }\n                break;\n            \n            case 'R': // Right shift\n                for (int i = 0; i < N; i++) {\n                    for (int j = 0; j < N; j++) {\n                        newMatrix[i][j] = matrix[i][(j - 1 + N) % N];\n                    }\n                }\n                break;\n            \n            case 'U': // Up shift\n                for (int i = 0; i < N; i++) {\n                    for (int j = 0; j < N; j++) {\n                        newMatrix[i][j] = matrix[(i + 1) % N][j];\n                    }\n                }\n                break;\n            \n            case 'D': // Down shift\n                for (int i = 0; i < N; i++) {\n                    for (int j = 0; j < N; j++) {\n                        newMatrix[i][j] = matrix[(i - 1 + N) % N][j];\n                    }\n                }\n                break;\n        }\n        \n        return newMatrix;\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        String operations = scanner.next();\n        \n        int[][] result = shiftMatrix(N, operations);\n        \n        // Print result\n        for (int[] row : result) {\n            for (int val : row) {\n                System.out.print(val + \" \");\n            }\n            System.out.println();\n        }\n        \n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 21:56:45"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nclass MatrixShifter {\nprivate:\n    vector<vector<int>> matrix;\n    int N;\n\npublic:\n    MatrixShifter(int size) : N(size) {\n        matrix.resize(N, vector<int>(N));\n        for (int i = 0; i < N; ++i) {\n            for (int j = 0; j < N; ++j) {\n                matrix[i][j] = (i * N) + j + 1;\n            }\n        }\n    }\n\n    void shiftLeft() {\n        for (auto& row : matrix) {\n            int temp = row[0];\n            for (int j = 0; j < N - 1; ++j) {\n                row[j] = row[j + 1];\n            }\n            row[N - 1] = temp;\n        }\n    }\n\n    void shiftRight() {\n        for (auto& row : matrix) {\n            int temp = row[N - 1];\n            for (int j = N - 1; j > 0; --j) {\n                row[j] = row[j - 1];\n            }\n            row[0] = temp;\n        }\n    }\n\n    void shiftUp() {\n        for (int j = 0; j < N; ++j) {\n            int temp = matrix[0][j];\n            for (int i = 0; i < N - 1; ++i) {\n                matrix[i][j] = matrix[i + 1][j];\n            }\n            matrix[N - 1][j] = temp;\n        }\n    }\n\n    void shiftDown() {\n        for (int j = 0; j < N; ++j) {\n            int temp = matrix[N - 1][j];\n            for (int i = N - 1; i > 0; --i) {\n                matrix[i][j] = matrix[i - 1][j];\n            }\n            matrix[0][j] = temp;\n        }\n    }\n\n    void performOperations(const string& ops) {\n        for (char op : ops) {\n            switch (op) {\n                case 'L': shiftLeft(); break;\n                case 'R': shiftRight(); break;\n                case 'U': shiftUp(); break;\n                case 'D': shiftDown(); break;\n            }\n        }\n    }\n\n    void printMatrix() {\n        for (const auto& row : matrix) {\n            for (int val : row) {\n                cout << val << \" \";\n            }\n            cout << endl;\n        }\n    }\n};\n\nint main() {\n    int N;\n    string operations;\n    \n    cin >> N >> operations;\n    \n    MatrixShifter shifter(N);\n    shifter.performOperations(operations);\n    shifter.printMatrix();\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:56:54"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def shift_matrix(N, operations):\n    # Initialize the matrix\n    A = [[(i) * N + j + 1 for j in range(N)] for i in range(N)]\n    \n    # Perform operations\n    for op in operations:\n        if op == 'L':  # Left shift\n            for i in range(N):\n                A[i] = A[i][1:] + A[i][:1]\n        elif op == 'R':  # Right shift\n            for i in range(N):\n                A[i] = A[i][-1:] + A[i][:-1]\n        elif op == 'U':  # Up shift\n            first_row = A[0]\n            for i in range(1, N):\n                A[i - 1] = A[i]\n            A[N - 1] = first_row\n        elif op == 'D':  # Down shift\n            last_row = A[N - 1]\n            for i in range(N - 1, 0, -1):\n                A[i] = A[i - 1]\n            A[0] = last_row\n    \n    return A\n\n# Example usage:\nN = 3\noperations = \"LRUD\"\nresult = shift_matrix(N, operations)\nfor row in result:\n    print(row)",
    "timestamp": "2025-08-13 08:09:32"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "public class MatrixShift {\n    public static int[][] shiftMatrix(int n, String operations) {\n        int[][] matrix = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = i * n + j + 1;\n            }\n        }\n\n        for (char op : operations.toCharArray()) {\n            switch (op) {\n                case 'L':\n                    for (int i = 0; i < n; i++) {\n                        int first = matrix[i][0];\n                        System.arraycopy(matrix[i], 1, matrix[i], 0, n - 1);\n                        matrix[i][n - 1] = first;\n                    }\n                    break;\n                case 'R':\n                    for (int i = 0; i < n; i++) {\n                        int last = matrix[i][n - 1];\n                        System.arraycopy(matrix[i], 0, matrix[i], 1, n - 1);\n                        matrix[i][0] = last;\n                    }\n                    break;\n                case 'U':\n                    for (int j = 0; j < n; j++) {\n                        int first = matrix[0][j];\n                        for (int i = 0; i < n - 1; i++) {\n                            matrix[i][j] = matrix[i + 1][j];\n                        }\n                        matrix[n - 1][j] = first;\n                    }\n                    break;\n                case 'D':\n                    for (int j = 0; j < n; j++) {\n                        int last = matrix[n - 1][j];\n                        for (int i = n - 1; i > 0; i--) {\n                            matrix[i][j] = matrix[i - 1][j];\n                        }\n                        matrix[0][j] = last;\n                    }\n                    break;\n            }\n        }\n\n        return matrix;\n    }\n\n    public static void printMatrix(int[][] matrix) {\n        for (int[] row : matrix) {\n            for (int value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 3;\n        String operations = \"LRUD\";\n        int[][] resultMatrix = shiftMatrix(n, operations);\n        printMatrix(resultMatrix);\n    }\n}",
    "timestamp": "2025-08-13 08:09:38"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid shiftLeft(int n, int matrix[n][n]) {\n    for (int i = 0; i < n; i++) {\n        int first = matrix[i][0];\n        for (int j = 0; j < n - 1; j++) {\n            matrix[i][j] = matrix[i][j + 1];\n        }\n        matrix[i][n - 1] = first;\n    }\n}\n\nvoid shiftRight(int n, int matrix[n][n]) {\n    for (int i = 0; i < n; i++) {\n        int last = matrix[i][n - 1];\n        for (int j = n - 1; j > 0; j--) {\n            matrix[i][j] = matrix[i][j - 1];\n        }\n        matrix[i][0] = last;\n    }\n}\n\nvoid shiftUp(int n, int matrix[n][n]) {\n    for (int j = 0; j < n; j++) {\n        int first = matrix[0][j];\n        for (int i = 0; i < n - 1; i++) {\n            matrix[i][j] = matrix[i + 1][j];\n        }\n        matrix[n - 1][j] = first;\n    }\n}\n\nvoid shiftDown(int n, int matrix[n][n]) {\n    for (int j = 0; j < n; j++) {\n        int last = matrix[n - 1][j];\n        for (int i = n - 1; i > 0; i--) {\n            matrix[i][j] = matrix[i - 1][j];\n        }\n        matrix[0][j] = last;\n    }\n}\n\nint main() {\n    int n;\n    char operations[100];\n    \n    printf(\"Enter the size of the matrix (N): \");\n    scanf(\"%d\", &n);\n    \n    // Initialize the matrix\n    int matrix[n][n];\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            matrix[i][j] = i * n + j + 1;  // Ensure it's 1-based as described\n        }\n    }\n\n    printf(\"Enter the operation sequence: \");\n    scanf(\"%s\", operations);\n    \n    // Perform operations\n    for (int k = 0, len = strlen(operations); k < len; k++) {\n        switch (operations[k]) {\n            case 'L':\n                shiftLeft(n, matrix);\n                break;\n            case 'R':\n                shiftRight(n, matrix);\n                break;\n            case 'U':\n                shiftUp(n, matrix);\n                break;\n            case 'D':\n                shiftDown(n, matrix);\n                break;\n        }\n    }\n    \n    // Print resulting matrix\n    printf(\"Resulting Matrix:\\n\");\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 08:09:43"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def shift_matrix(N, operations):\n    # Initialize matrix\n    matrix = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            matrix[i][j] = (i * N) + j + 1\n    \n    # Define shift operations\n    for op in operations:\n        if op == 'L':  # Left shift\n            for row in matrix:\n                row[:] = row[1:] + [row[0]]\n        elif op == 'R':  # Right shift\n            for row in matrix:\n                row[:] = [row[-1]] + row[:-1]\n        elif op == 'U':  # Up shift\n            matrix[:] = matrix[1:] + [matrix[0]]\n        elif op == 'D':  # Down shift\n            matrix[:] = [matrix[-1]] + matrix[:-1]\n    \n    return matrix\n\n# Input handling\nN = int(input())\noperations = input().strip()\n\n# Get and print result\nresult = shift_matrix(N, operations)\nfor row in result:\n    print(*row)",
    "timestamp": "2025-08-13 08:09:52"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def shift_matrix(N, operations):\n    # Initialize the matrix\n    matrix = [[(i - 1) * N + j for j in range(1, N + 1)] for i in range(1, N + 1)]\n    \n    for op in operations:\n        if op == 'L':\n            # Left shift each row\n            for row in matrix:\n                row.append(row.pop(0))\n        elif op == 'R':\n            # Right shift each row\n            for row in matrix:\n                row.insert(0, row.pop())\n        elif op == 'U':\n            # Up shift (first row becomes last)\n            matrix.append(matrix.pop(0))\n        elif op == 'D':\n            # Down shift (last row becomes first)\n            matrix.insert(0, matrix.pop())\n    \n    return matrix",
    "timestamp": "2025-08-13 08:10:02"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// Function to shift the matrix left\nvoid shiftLeft(vector<vector<int>>& matrix) {\n    int N = matrix.size();\n    for (int i = 0; i < N; ++i) {\n        int first = matrix[i][0];\n        for (int j = 0; j < N - 1; ++j) {\n            matrix[i][j] = matrix[i][j + 1];\n        }\n        matrix[i][N - 1] = first;\n    }\n}\n\n// Function to shift the matrix right\nvoid shiftRight(vector<vector<int>>& matrix) {\n    int N = matrix.size();\n    for (int i = 0; i < N; ++i) {\n        int last = matrix[i][N - 1];\n        for (int j = N - 1; j > 0; --j) {\n            matrix[i][j] = matrix[i][j - 1];\n        }\n        matrix[i][0] = last;\n    }\n}\n\n// Function to shift the matrix up\nvoid shiftUp(vector<vector<int>>& matrix) {\n    int N = matrix.size();\n    vector<int> firstRow = matrix[0];\n    for (int i = 0; i < N - 1; ++i) {\n        matrix[i] = matrix[i + 1];\n    }\n    matrix[N - 1] = firstRow;\n}\n\n// Function to shift the matrix down\nvoid shiftDown(vector<vector<int>>& matrix) {\n    int N = matrix.size();\n    vector<int> lastRow = matrix[N - 1];\n    for (int i = N - 1; i > 0; --i) {\n        matrix[i] = matrix[i - 1];\n    }\n    matrix[0] = lastRow;\n}\n\nint main() {\n    int N;\n    cin >> N;\n    string operations;\n    cin >> operations;\n\n    vector<vector<int>> matrix(N, vector<int>(N));\n\n    // Initialize the matrix\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            matrix[i][j] = i * N + j + 1;\n        }\n    }\n\n    // Perform operations\n    for (char op : operations) {\n        if (op == 'L') {\n            shiftLeft(matrix);\n        } else if (op == 'R') {\n            shiftRight(matrix);\n        } else if (op == 'U') {\n            shiftUp(matrix);\n        } else if (op == 'D') {\n            shiftDown(matrix);\n        }\n    }\n\n    // Output the resulting matrix\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            cout << matrix[i][j] << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:43:42"
  }
]