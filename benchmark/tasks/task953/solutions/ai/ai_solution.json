[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    \n    int x[N];\n    for (int i = 0; i < N; i++) {\n        scanf(\"%d\", &x[i]);\n    }\n    \n    int a[N * N];\n    int pos[N + 1];\n    for (int i = 1; i <= N; i++) {\n        pos[i] = 0;\n    }\n    \n    bool possible = true;\n    for (int i = 0; i < N; i++) {\n        if (x[i] < 1 || x[i] > N * N) {\n            possible = false;\n            break;\n        }\n        \n        pos[i + 1]++;\n        if (pos[i + 1] > N) {\n            possible = false;\n            break;\n        }\n        \n        a[x[i] - 1] = i + 1;\n    }\n    \n    if (possible) {\n        for (int i = 0; i < N * N; i++) {\n            printf(\"%d \", a[i]);\n        }\n        printf(\"\\n\");\n    } else {\n        printf(\"-1\\n\");\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 23:27:01"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    int *x = malloc(N * sizeof(int));\n    for (int i = 0; i < N; i++) {\n        scanf(\"%d\", &x[i]);\n    }\n\n    int *a = malloc(N * N * sizeof(int));\n    int *count = calloc(N + 1, sizeof(int));\n\n    for (int i = 1; i <= N; i++) {\n        if (x[i - 1] < 1 || x[i - 1] > N * N) {\n            printf(\"No\\n\");\n            free(x);\n            free(a);\n            free(count);\n            return 0;\n        }\n    }\n\n    for (int i = 0; i < N * N; i++) {\n        a[i] = 0;\n    }\n\n    for (int i = 1; i <= N; i++) {\n        int pos = x[i - 1] - 1;\n        if (a[pos] != 0) {\n            printf(\"No\\n\");\n            free(x);\n            free(a);\n            free(count);\n            return 0;\n        }\n        a[pos] = i;\n        count[i] = 1;\n    }\n\n    int current = 0;\n    for (int i = 0; i < N * N; i++) {\n        if (a[i] == 0) {\n            while (current <= N && count[current] >= N) {\n                current++;\n            }\n            if (current > N) {\n                printf(\"No\\n\");\n                free(x);\n                free(a);\n                free(count);\n                return 0;\n            }\n            a[i] = current;\n            count[current]++;\n        }\n    }\n\n    printf(\"Yes\\n\");\n    for (int i = 0; i < N * N; i++) {\n        printf(\"%d \", a[i]);\n    }\n    printf(\"\\n\");\n\n    free(x);\n    free(a);\n    free(count);\n    return 0;\n}",
    "timestamp": "2025-08-05 23:27:53"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    vector<int> x(N);\n    for (int i = 0; i < N; ++i) {\n        cin >> x[i];\n    }\n\n    vector<int> a(N * N, 0);\n    vector<int> count(N + 1, 0); // 1-based\n\n    bool possible = true;\n    for (int i = 0; i < N; ++i) {\n        int num = i + 1;\n        int pos = x[i] - 1; // convert to 0-based\n        if (a[pos] != 0) {\n            possible = false;\n            break;\n        }\n        a[pos] = num;\n        count[num]++;\n    }\n\n    if (!possible) {\n        cout << \"No\" << endl;\n        return 0;\n    }\n\n    for (int i = 0; i < N * N; ++i) {\n        if (a[i] == 0) {\n            for (int num = 1; num <= N; ++num) {\n                if (count[num] < N) {\n                    int required_pos = x[num - 1] - 1;\n                    if (num < a[required_pos] || (num == a[required_pos] && i > required_pos) || (num > a[required_pos] && i < required_pos)) {\n                        continue;\n                    }\n                    a[i] = num;\n                    count[num]++;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (int num = 1; num <= N; ++num) {\n        if (count[num] != N) {\n            possible = false;\n            break;\n        }\n    }\n\n    if (!possible) {\n        cout << \"No\" << endl;\n    } else {\n        cout << \"Yes\" << endl;\n        for (int i = 0; i < N * N; ++i) {\n            if (i > 0) cout << \" \";\n            cout << a[i];\n        }\n        cout << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 23:28:47"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Solution {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int[] x = new int[N];\n        for (int i = 0; i < N; i++) {\n            x[i] = scanner.nextInt();\n        }\n\n        List<Integer> a = new ArrayList<>();\n        int[] count = new int[N + 1];\n        int[] positions = new int[N + 1];\n        boolean possible = true;\n\n        for (int i = 1; i <= N; i++) {\n            if (x[i - 1] < 1 || x[i - 1] > N * N) {\n                possible = false;\n                break;\n            }\n            positions[i] = x[i - 1];\n        }\n\n        if (!possible) {\n            System.out.println(\"No\");\n            return;\n        }\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i = 1; i <= N; i++) {\n            pq.add(positions[i]);\n        }\n\n        int currentPos = 1;\n        while (!pq.isEmpty()) {\n            int pos = pq.poll();\n            while (currentPos < pos) {\n                for (int num = 1; num <= N; num++) {\n                    if (count[num] < N && (positions[num] > currentPos || count[num] + 1 < num)) {\n                        a.add(num);\n                        count[num]++;\n                        currentPos++;\n                        break;\n                    }\n                }\n            }\n            int num = -1;\n            for (int i = 1; i <= N; i++) {\n                if (positions[i] == pos && count[i] < i) {\n                    num = i;\n                    break;\n                }\n            }\n            if (num == -1) {\n                possible = false;\n                break;\n            }\n            a.add(num);\n            count[num]++;\n            currentPos++;\n        }\n\n        while (currentPos <= N * N) {\n            for (int num = 1; num <= N; num++) {\n                if (count[num] < N) {\n                    a.add(num);\n                    count[num]++;\n                    currentPos++;\n                    break;\n                }\n            }\n        }\n\n        for (int i = 1; i <= N; i++) {\n            if (count[i] != N) {\n                possible = false;\n                break;\n            }\n        }\n\n        if (!possible) {\n            System.out.println(\"No\");\n        } else {\n            System.out.println(\"Yes\");\n            for (int num : a) {\n                System.out.print(num + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
    "timestamp": "2025-08-05 23:29:11"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Solution {\n    public static int[] constructSequence(int[] x) {\n        int N = x.length;\n        int[] a = new int[N * N];\n        boolean[] used = new boolean[N * N];\n        int[] count = new int[N + 1];\n\n        for (int i = 0; i < N; i++) {\n            if (x[i] < 1 || x[i] > N * N) {\n                return null;\n            }\n        }\n\n        for (int i = 1; i <= N; i++) {\n            int pos = x[i - 1] - 1;\n            if (used[pos]) {\n                return null;\n            }\n            a[pos] = i;\n            used[pos] = true;\n            count[i]++;\n        }\n\n        for (int i = 1; i <= N; i++) {\n            if (count[i] != 1) {\n                return null;\n            }\n        }\n\n        int current = 1;\n        for (int i = 0; i < N * N; i++) {\n            if (!used[i]) {\n                while (current <= N && count[current] == N) {\n                    current++;\n                }\n                if (current > N) {\n                    return null;\n                }\n                a[i] = current;\n                count[current]++;\n            }\n        }\n\n        return a;\n    }\n}",
    "timestamp": "2025-08-05 23:29:16"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    \n    vector<int> x(N);\n    for (int i = 0; i < N; ++i) {\n        cin >> x[i];\n    }\n    \n    vector<int> a(N * N, 0);\n    vector<int> counts(N + 1, 0);\n    \n    for (int i = 0; i < N; ++i) {\n        if (x[i] < 1 || x[i] > N * N) {\n            cout << -1 << endl;\n            return 0;\n        }\n        \n        int num = i + 1;\n        counts[num]++;\n        \n        if (a[x[i] - 1] != 0) {\n            cout << -1 << endl;\n            return 0;\n        }\n        \n        a[x[i] - 1] = num;\n    }\n    \n    for (int i = 1; i <= N; ++i) {\n        if (counts[i] != N) {\n            cout << -1 << endl;\n            return 0;\n        }\n    }\n    \n    for (int num : a) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 23:29:22"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def construct_sequence(x):\n    N = len(x)\n    a = [0] * (N * N)\n    \n    for i in range(1, N + 1):\n        count = 0\n        for j in range(N * N):\n            if a[j] == 0 and count < N and (count + 1 == x[i - 1]):\n                a[j] = i\n                count += 1\n                \n    if all(a[i : i + N].count(i // N + 1) == 1 for i in range(0, N * N, N)):\n        return a\n    else:\n        return None\n\n# Example usage:\nx = [1, 2, 3]\nresult = construct_sequence(x)\nprint(result)",
    "timestamp": "2025-08-13 15:25:57"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class SequenceConstructor {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        int N = scanner.nextInt();\n        int[] x = new int[N];\n        for (int i = 0; i < N; i++) {\n            x[i] = scanner.nextInt();\n        }\n        \n        if (isValidConfiguration(N, x)) {\n            int[] a = constructSequence(N, x);\n            for (int i = 0; i < a.length; i++) {\n                System.out.print(a[i] + \" \");\n            }\n        } else {\n            System.out.println(\"No\");\n        }\n        \n        scanner.close();\n    }\n    \n    private static boolean isValidConfiguration(int N, int[] x) {\n        for (int i = 0; i < N; i++) {\n            if (x[i] < 1 || x[i] > N * N) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    private static int[] constructSequence(int N, int[] x) {\n        int[] a = new int[N * N];\n        int[] count = new int[N + 1];\n        \n        for (int i = 0; i < N; i++) {\n            placeNumber(a, x[i] - 1, i + 1, count, N);\n        }\n        \n        for (int i = 0; i < N; i++) {\n            int number = i + 1;\n            for (int j = 0; j < N * N; j++) {\n                if (a[j] == 0 && count[number] < N) {\n                    a[j] = number;\n                    count[number]++;\n                }\n            }\n        }\n        \n        return a;\n    }\n\n    private static void placeNumber(int[] a, int index, int number, int[] count, int N) {\n        int occurrence = 0;\n        for (int i = 0; i < a.length; i++) {\n            if (a[i] == number) {\n                occurrence++;\n            }\n            if (occurrence == index) {\n                while (a[i] != 0) {\n                    i++;\n                }\n                a[i] = number;\n                count[number]++;\n                return;\n            }\n        }\n    }\n}",
    "timestamp": "2025-08-13 15:26:08"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid construct_sequence(int *x, int N) {\n    int *a = (int *)malloc(N * N * sizeof(int));\n    int *positions = (int *)malloc(N * sizeof(int));\n    \n    for (int i = 0; i < N; i++) positions[i] = 0;\n\n    for (int i = 0; i < N; i++) {\n        int pos = x[i] - 1;\n        while (positions[i] < N) {\n            while (a[pos] != 0) pos++;\n            a[pos] = i + 1;\n            positions[i]++;\n        }\n    }\n\n    for (int i = 0; i < N * N; i++) {\n        printf(\"%d \", a[i]);\n    }\n    printf(\"\\n\");\n\n    free(a);\n    free(positions);\n}\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    int *x = (int *)malloc(N * sizeof(int));\n    \n    for (int i = 0; i < N; i++) {\n        scanf(\"%d\", &x[i]);\n    }\n\n    construct_sequence(x, N);\n\n    free(x);\n    return 0;\n}",
    "timestamp": "2025-08-13 15:26:11"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <numeric>\n#include <algorithm>\n\nbool constructSequence(const std::vector<int>& x, std::vector<int>& a) {\n    int n = x.size();\n    a.resize(n * n);\n\n    // Array to hold the next position for each value\n    std::vector<int> next_position(n + 1, 0);\n\n    // Fill array 'a' with the rule x[i]\n    for (int i = 1; i <= n; ++i) {\n        int count = 0;\n        for (int j = 0; j < n * n && count < n; ++j) {\n            if (a[j] == 0 && j >= x[i - 1] - 1) {\n                a[j] = i;\n                ++count;\n            }\n        }\n    }\n\n    // Validate result to ensure correctness (should not be necessary in final submission)\n    std::vector<int> occurrences(n + 1, 0);\n    for (int idx = 0; idx < n * n; ++idx) {\n        int value = a[idx];\n        if (occurrences[value] == x[value - 1] - 1) {\n            ++occurrences[value];\n        } else if (occurrences[value] > x[value - 1] - 1) {\n            ++occurrences[value];\n            continue;\n        } else {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<int> x(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> x[i];\n    }\n\n    std::vector<int> a;\n    if (constructSequence(x, a)) {\n        for (int i = 0; i < a.size(); ++i) {\n            std::cout << a[i] << \" \";\n        }\n        std::cout << \"\\n\";\n    } else {\n        std::cout << \"No\\n\";\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 15:26:17"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve_sequence(x):\n    N = len(x)\n    \n    # Check if any x_i is out of valid range\n    if any(xi < 1 or xi > N*N for xi in x):\n        return None\n    \n    # Initialize the result sequence\n    a = [0] * (N*N)\n    used = [0] * N\n    \n    for i in range(N):\n        count = 0\n        for j in range(N*N):\n            if a[j] == 0 and i+1 not in a[j+1:]:\n                count += 1\n                if count == x[i]:\n                    a[j] = i+1\n                    used[i] += 1\n                    break\n        if count != x[i]:\n            return None\n    \n    # Verify remaining positions are filled with remaining numbers\n    remaining = [num for num in range(1, N+1) for _ in range(N - used[num-1])]\n    \n    for j in range(N*N):\n        if a[j] == 0:\n            if not remaining:\n                return None\n            a[j] = remaining.pop(0)\n    \n    return a",
    "timestamp": "2025-08-13 15:26:23"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve():\n    import sys\n    N = int(sys.stdin.readline())\n    x = list(map(int, sys.stdin.readline().split()))\n    \n    # Check if the input is valid\n    for i in range(N):\n        if x[i] < 1 or x[i] > N * N:\n            print(\"No\")\n            return\n    \n    # Initialize the answer list\n    a = []\n    # We'll keep track of the positions where each number is placed\n    positions = [[] for _ in range(N + 1)]  # 1-based\n    \n    # Assign the required positions first\n    for i in range(1, N + 1):\n        pos = x[i - 1] - 1  # converting to 0-based\n        if pos >= len(a):\n            a.extend([0] * (pos - len(a) + 1))\n        a[pos] = i\n        positions[i].append(pos)\n    \n    # Now fill the remaining positions\n    current_num = 1\n    for i in range(len(a)):\n        if a[i] == 0:\n            while current_num <= N and len(positions[current_num]) >= N:\n                current_num += 1\n            if current_num > N:\n                print(\"No\")\n                return\n            a[i] = current_num\n            positions[current_num].append(i)\n    \n    # Verify the counts\n    counts = [0] * (N + 1)\n    for num in a:\n        counts[num] += 1\n    for num in range(1, N + 1):\n        if counts[num] != N:\n            print(\"No\")\n            return\n    \n    # Verify the x_i conditions\n    for i in range(1, N + 1):\n        occurrences = [idx for idx, num in enumerate(a) if num == i]\n        if len(occurrences) < i:\n            print(\"No\")\n            return\n        if occurrences[i - 1] != x[i - 1] - 1:\n            print(\"No\")\n            return\n    \n    print(\"Yes\")\n    print(' '.join(map(str, a)))\n\nsolve()",
    "timestamp": "2025-08-13 15:26:36"
  }
]