[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdbool.h>\n#include <stdio.h>\n\nbool canMakeNonDecreasingSequence(int A[], int B[], int N) {\n    int swaps = 0;\n    int arr[N];\n    \n    for (int i = 0; i < N; i++) {\n        arr[i] = A[i];\n    }\n    \n    for (int i = 0; i < N; i++) {\n        if (arr[i] > B[i]) {\n            bool swapped = false;\n            for (int j = i + 1; j < N; j++) {\n                if (arr[j] <= B[i] && arr[j] > arr[i]) {\n                    int temp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = temp;\n                    swaps++;\n                    swapped = true;\n                    break;\n                }\n            }\n            \n            if (!swapped) {\n                return false;\n            }\n        }\n        \n        if (swaps > N - 2) {\n            return false;\n        }\n    }\n    \n    return true;\n}",
    "timestamp": "2025-08-05 22:41:12"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdbool.h>\n\nbool can_swap(int N, int A[], int B[]) {\n    for (int i = 0; i < N; i++) {\n        if (A[i] > B[i]) {\n            bool found = false;\n            for (int j = 0; j < N; j++) {\n                if (i != j && A[j] <= B[i] && A[i] <= B[j]) {\n                    int temp = A[i];\n                    A[i] = A[j];\n                    A[j] = temp;\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    int A[N], B[N];\n    for (int i = 0; i < N; i++) {\n        scanf(\"%d\", &A[i]);\n    }\n    for (int i = 0; i < N; i++) {\n        scanf(\"%d\", &B[i]);\n    }\n    if (can_swap(N, A, B)) {\n        printf(\"YES\\n\");\n    } else {\n        printf(\"NO\\n\");\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 22:41:26"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool solve() {\n    int N;\n    cin >> N;\n    vector<int> A(N), B(N);\n    \n    for (int i = 0; i < N; ++i) {\n        cin >> A[i];\n    }\n    for (int i = 0; i < N; ++i) {\n        cin >> B[i];\n    }\n    \n    vector<int> sortedA = A;\n    vector<int> sortedB = B;\n    sort(sortedA.begin(), sortedA.end());\n    sort(sortedB.begin(), sortedB.end());\n    \n    for (int i = 0; i < N; ++i) {\n        if (sortedA[i] > sortedB[i]) {\n            return false;\n        }\n    }\n    \n    for (int i = 0; i < N; ++i) {\n        if (A[i] > B[i]) {\n            bool found = false;\n            for (int j = 0; j < N; ++j) {\n                if (i != j && A[j] <= B[i] && A[i] <= B[j]) {\n                    swap(A[i], A[j]);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n\nint main() {\n    int T;\n    cin >> T;\n    while (T--) {\n        if (solve()) {\n            cout << \"YES\" << endl;\n        } else {\n            cout << \"NO\" << endl;\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 22:41:42"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Arrays;\n\npublic class Solution {\n    public static boolean canSwap(int[] A, int[] B) {\n        int N = A.length;\n        int[] sortedA = A.clone();\n        int[] sortedB = B.clone();\n        Arrays.sort(sortedA);\n        Arrays.sort(sortedB);\n        \n        for (int i = 0; i < N; i++) {\n            if (sortedA[i] > sortedB[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        int[] A = {1, 2, 3};\n        int[] B = {2, 3, 4};\n        System.out.println(canSwap(A, B));\n    }\n}",
    "timestamp": "2025-08-05 22:41:52"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Solution {\n    public static boolean canMakeNonDecreasingSequence(int[] A, int[] B, int N) {\n        int[] originalA = Arrays.copyOf(A, N);\n        int swaps = 0;\n        \n        for (int i = 0; i < N; i++) {\n            if (A[i] > B[i]) {\n                boolean swapped = false;\n                for (int j = i + 1; j < N; j++) {\n                    if (A[j] <= B[i] && originalA[j] <= B[j]) {\n                        int temp = A[i];\n                        A[i] = A[j];\n                        A[j] = temp;\n                        swaps++;\n                        swapped = true;\n                        break;\n                    }\n                }\n                if (!swapped) return false;\n            }\n        }\n        \n        return swaps <= N - 2;\n    }\n}",
    "timestamp": "2025-08-05 22:41:56"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool canSatisfyCondition(vector<int>& A, vector<int>& B) {\n    int N = A.size();\n    int swaps = 0;\n    \n    for (int i = 0; i < N; i++) {\n        if (A[i] > B[i]) {\n            bool swapped = false;\n            \n            for (int j = i + 1; j < N; j++) {\n                if (A[j] <= B[i] && A[i] <= B[j]) {\n                    swap(A[i], A[j]);\n                    swaps++;\n                    swapped = true;\n                    break;\n                }\n            }\n            \n            if (!swapped) {\n                return false;\n            }\n        }\n        \n        if (swaps > N - 2) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\nint main() {\n    int N;\n    cin >> N;\n    \n    vector<int> A(N), B(N);\n    \n    for (int i = 0; i < N; i++) {\n        cin >> A[i];\n    }\n    \n    for (int i = 0; i < N; i++) {\n        cin >> B[i];\n    }\n    \n    if (canSatisfyCondition(A, B)) {\n        cout << \"Yes\" << endl;\n    } else {\n        cout << \"No\" << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:42:01"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def can_swap_to_satisfy_constraints(A, B):\n    N = len(A)\n    swap_indices = [i for i in range(N) if A[i] > B[i]]\n    if len(swap_indices) <= 1:\n        return True\n    if len(swap_indices) > N - 2:\n        return False\n    A_sorted = sorted(A)\n    for i in swap_indices:\n        if all(any(A_sorted[j] <= B[i] for j in range(N)) for i in swap_indices):\n            return True\n    return False\n\n# Example usage:\nA = [3, 1, 2, 5]\nB = [0, 2, 4, 5]\nprint(can_swap_to_satisfy_constraints(A, B))  # Output: True or False based on the sequences",
    "timestamp": "2025-08-13 12:09:59"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class SwapSequences {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] A = new int[n];\n        int[] B = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            A[i] = scanner.nextInt();\n        }\n\n        for (int i = 0; i < n; i++) {\n            B[i] = scanner.nextInt();\n        }\n\n        scanner.close();\n\n        if (canSwapToOrder(A, B, n)) {\n            System.out.println(\"Yes\");\n        } else {\n            System.out.println(\"No\");\n        }\n    }\n\n    private static boolean canSwapToOrder(int[] A, int[] B, int n) {\n        int swapCount = 0;\n        for (int i = 0; i < n && swapCount <= n - 2; i++) {\n            if (A[i] > B[i]) {\n                boolean swapped = false;\n                for (int j = i + 1; j < n; j++) {\n                    if (A[j] <= B[i] && A[i] <= B[j]) {\n                        int temp = A[i];\n                        A[i] = A[j];\n                        A[j] = temp;\n                        swapCount++;\n                        swapped = true;\n                        break;\n                    }\n                }\n                if (!swapped) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}",
    "timestamp": "2025-08-13 12:10:03"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdbool.h>\n\nbool canMakeA_LE_B(int N, int A[], int B[]) {\n    for(int i = 0; i < N; i++) {\n        if(A[i] > B[i]) {\n            bool swapped = false;\n            for(int j = i + 1; j < N; j++) {\n                if(A[j] <= B[i] && A[i] <= B[j]) {\n                    int temp = A[i];\n                    A[i] = A[j];\n                    A[j] = temp;\n                    swapped = true;\n                    break;\n                }\n            }\n            if(!swapped) return false;\n        }\n    }\n    for(int i = 0; i < N; i++) {\n        if(A[i] > B[i]) return false;\n    }\n    return true;\n}\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    int A[N], B[N];\n    \n    for(int i = 0; i < N; i++) {\n        scanf(\"%d\", &A[i]);\n    }\n    \n    for(int i = 0; i < N; i++) {\n        scanf(\"%d\", &B[i]);\n    }\n    \n    if(canMakeA_LE_B(N, A, B)) {\n        printf(\"YES\\n\");\n    } else {\n        printf(\"NO\\n\");\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 12:10:06"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool canSwapAndCompare(std::vector<int>& A, std::vector<int>& B) {\n    int N = A.size();\n    for (int i = 0; i < N; ++i) {\n        if (A[i] > B[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool possibleSwap(std::vector<int>& A, std::vector<int>& B) {\n    int N = A.size();\n\n    // Early check if already valid\n    if (canSwapAndCompare(A, B)) {\n        return true;\n    }\n\n    // Try up to N-2 swaps; as we want the ability to skip 2 elements\n    for (int i = 0; i < N - 1; ++i) {\n        for (int j = i + 1; j < N; ++j) {\n            std::swap(A[i], A[j]);\n            if (canSwapAndCompare(A, B)) {\n                return true;\n            }\n            std::swap(A[i], A[j]); // Swap back\n        }\n    }\n    return false;\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<int> A(N), B(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> A[i];\n    }\n    for (int i = 0; i < N; ++i) {\n        std::cin >> B[i];\n    }\n\n    if (possibleSwap(A, B)) {\n        std::cout << \"YES\\n\";\n    } else {\n        std::cout << \"NO\\n\";\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 12:10:13"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def can_satisfy_condition(A, B):\n    N = len(A)\n    \n    def is_valid_sequence(arr):\n        return all(arr[i] <= B[i] for i in range(N))\n    \n    if is_valid_sequence(A):\n        return True\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            # Try swapping elements at indices i and j\n            A[i], A[j] = A[j], A[i]\n            \n            if is_valid_sequence(A):\n                return True\n            \n            # Revert the swap\n            A[i], A[j] = A[j], A[i]\n    \n    return False\n\n# Example usage\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    \n    result = can_satisfy_condition(A, B)\n    print(\"Yes\" if result else \"No\")\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 12:10:18"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve():\n    import sys\n    N = int(sys.stdin.readline())\n    A = list(map(int, sys.stdin.readline().split()))\n    B = list(map(int, sys.stdin.readline().split()))\n    \n    # Check if already valid\n    valid = True\n    for a, b in zip(A, B):\n        if a > b:\n            valid = False\n            break\n    if valid:\n        print(\"YES\")\n        return\n    \n    # Check if possible by sorting\n    A_sorted = sorted(A)\n    B_sorted = sorted(B)\n    possible = True\n    for a, b in zip(A_sorted, B_sorted):\n        if a > b:\n            possible = False\n            break\n    if not possible:\n        print(\"NO\")\n        return\n    \n    # Check if we can do it with at most N-2 swaps\n    # If there exists at least two elements in A that are <= corresponding in B,\n    # then we can swap to fix others\n    count = 0\n    for a, b in zip(A, B):\n        if a <= b:\n            count += 1\n    if count >= 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolve()",
    "timestamp": "2025-08-13 12:10:24"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function isSwapPossible(A, B) {\n    const N = A.length;\n\n    for (let i = 0; i < N; i++) {\n        if (A[i] > B[i]) {\n            let swapPerformed = false;\n            for (let j = i + 1; j < N; j++) {\n                if (A[j] <= B[i] && A[i] <= B[j]) {\n                    [A[i], A[j]] = [A[j], A[i]]; // Swap\n                    swapPerformed = true;\n                    break;\n                }\n            }\n            if (!swapPerformed) return false;\n        }\n    }\n    return true;\n}\n\n// Example Usage:\n// let A = [3, 1, 2];\n// let B = [2, 3, 1];\n// console.log(isSwapPossible(A, B)); // Output: true or false",
    "timestamp": "2025-08-13 12:10:42"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function canSwapToSatisfy(A, B) {\n    const N = A.length;\n    const originalA = [...A];\n    \n    function checkCondition() {\n        for (let i = 0; i < N; i++) {\n            if (A[i] > B[i]) return false;\n        }\n        return true;\n    }\n    \n    if (checkCondition()) return true;\n    \n    for (let x = 0; x < N; x++) {\n        for (let y = x + 1; y < N; y++) {\n            [A[x], A[y]] = [A[y], A[x]];\n            \n            if (checkCondition()) return true;\n            \n            [A[x], A[y]] = [A[y], A[x]];\n        }\n    }\n    \n    return false;\n}",
    "timestamp": "2025-08-13 12:10:46"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function canSwapSequences(A, B) {\n    const N = A.length;\n    let sortedA = [...A].sort((a, b) => a - b);\n    let sortedB = [...B].sort((a, b) => a - b);\n    \n    for (let i = 0; i < N; i++) {\n        if (sortedA[i] > sortedB[i]) {\n            return false;\n        }\n    }\n    \n    return true;\n}",
    "timestamp": "2025-08-13 12:10:49"
  }
]