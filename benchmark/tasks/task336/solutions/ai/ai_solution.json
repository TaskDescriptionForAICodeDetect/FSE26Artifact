[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\nint is_prime(int num) {\n    if (num <= 1) return 0;\n    if (num == 2) return 1;\n    if (num % 2 == 0) return 0;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return 0;\n    }\n    return 1;\n}\n\nvoid prime_factors(int n, int factors[], int *count) {\n    *count = 0;\n    if (n == 1) return;\n    \n    for (int i = 2; i <= n; i++) {\n        while (n % i == 0 && is_prime(i)) {\n            factors[(*count)++] = i;\n            n /= i;\n        }\n    }\n}\n\nint key_number(int n) {\n    if (n == 1) return 0;\n    \n    int factors[100];\n    int count = 0;\n    prime_factors(n, factors, &count);\n    \n    if (count == 0) return 0;\n    \n    int largest = factors[count - 1];\n    int sum_others = 0;\n    \n    for (int i = 0; i < count - 1; i++) {\n        sum_others += factors[i];\n    }\n    \n    return largest - sum_others;\n}\n\nint main() {\n    int a, b;\n    scanf(\"%d %d\", &a, &b);\n    \n    int ka = key_number(a);\n    int kb = key_number(b);\n    \n    if (ka > kb) {\n        printf(\"a\\n\");\n    } else {\n        printf(\"b\\n\");\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:07:53"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> getPrimeFactors(int n) {\n    vector<int> factors;\n    if (n <= 1) return factors;\n    \n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n    }\n    \n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    \n    if (n > 1) {\n        factors.push_back(n);\n    }\n    \n    return factors;\n}\n\nint calculateKeyNumber(int n) {\n    vector<int> factors = getPrimeFactors(n);\n    if (factors.empty()) return 0;\n    \n    int max_factor = *max_element(factors.begin(), factors.end());\n    int sum_other = 0;\n    \n    for (int factor : factors) {\n        if (factor != max_factor) {\n            sum_other += factor;\n        }\n    }\n    \n    return max_factor - sum_other;\n}\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    \n    int key_a = calculateKeyNumber(a);\n    int key_b = calculateKeyNumber(b);\n    \n    if (key_a > key_b) {\n        cout << \"a\" << endl;\n    } else {\n        cout << \"b\" << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:08:07"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class TreasureDoor {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n        \n        int keyA = calculateKeyNumber(a);\n        int keyB = calculateKeyNumber(b);\n        \n        if (keyA > keyB) {\n            System.out.println(\"a\");\n        } else {\n            System.out.println(\"b\");\n        }\n    }\n    \n    private static int calculateKeyNumber(int n) {\n        List<Integer> primeFactors = getPrimeFactors(n);\n        if (primeFactors.isEmpty()) {\n            return 0;\n        }\n        int largest = Collections.max(primeFactors);\n        int sumOthers = 0;\n        for (int factor : primeFactors) {\n            if (factor != largest) {\n                sumOthers += factor;\n            }\n        }\n        return largest - sumOthers;\n    }\n    \n    private static List<Integer> getPrimeFactors(int n) {\n        List<Integer> factors = new ArrayList<>();\n        if (n <= 1) {\n            return factors;\n        }\n        // Handle 2 separately\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        // Check for odd divisors up to sqrt(n)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        // If remaining n is a prime > 2\n        if (n > 2) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}",
    "timestamp": "2025-08-05 21:08:23"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class TreasureDoors {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (scanner.hasNextInt()) {\n            int a = scanner.nextInt();\n            int b = scanner.nextInt();\n            \n            System.out.println(compareKeyNumbers(a, b));\n        }\n    }\n    \n    private static char compareKeyNumbers(int n1, int n2) {\n        return keyNumber(n1) > keyNumber(n2) ? 'a' : 'b';\n    }\n    \n    private static int keyNumber(int n) {\n        List<Integer> primeFactors = findPrimeFactors(n);\n        \n        if (primeFactors.isEmpty()) {\n            return 0;\n        }\n        \n        int largestPrimeFactor = primeFactors.get(primeFactors.size() - 1);\n        int sumOtherPrimeFactors = primeFactors.stream()\n                .limit(primeFactors.size() - 1)\n                .mapToInt(Integer::intValue)\n                .sum();\n        \n        return largestPrimeFactor - sumOtherPrimeFactors;\n    }\n    \n    private static List<Integer> findPrimeFactors(int n) {\n        List<Integer> primeFactors = new ArrayList<>();\n        \n        for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                if (!primeFactors.contains(i)) {\n                    primeFactors.add(i);\n                }\n                n /= i;\n            }\n        }\n        \n        if (n > 1) {\n            primeFactors.add(n);\n        }\n        \n        Collections.sort(primeFactors);\n        return primeFactors;\n    }\n}",
    "timestamp": "2025-08-05 21:08:29"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\nint is_prime(int n) {\n    if (n <= 1) return 0;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return 0;\n    }\n    return 1;\n}\n\nint find_largest_prime_factor(int n) {\n    int largest_prime = 1;\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0 && is_prime(i)) {\n            largest_prime = i;\n        }\n    }\n    return largest_prime;\n}\n\nint sum_other_prime_factors(int n) {\n    int sum = 0;\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0 && is_prime(i)) {\n            sum += i;\n        }\n    }\n    return sum - find_largest_prime_factor(n);\n}\n\nint key_number(int n) {\n    return find_largest_prime_factor(n) - sum_other_prime_factors(n);\n}\n\nint main() {\n    int a, b;\n    while (scanf(\"%d %d\", &a, &b) == 2) {\n        int key_a = key_number(a);\n        int key_b = key_number(b);\n        \n        if (key_a > key_b) {\n            printf(\"a\\n\");\n        } else {\n            printf(\"b\\n\");\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 21:08:35"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> getPrimeFactors(int n) {\n    std::vector<int> primeFactors;\n    for (int i = 2; i <= sqrt(n); i++) {\n        while (n % i == 0) {\n            primeFactors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) primeFactors.push_back(n);\n    return primeFactors;\n}\n\nint getKeyNumber(int n) {\n    std::vector<int> primeFactors = getPrimeFactors(n);\n    if (primeFactors.empty()) return 0;\n    \n    int largestPrimeFactor = primeFactors.back();\n    int sumOtherPrimeFactors = 0;\n    \n    for (int i = 0; i < primeFactors.size() - 1; i++) {\n        sumOtherPrimeFactors += primeFactors[i];\n    }\n    \n    return largestPrimeFactor - sumOtherPrimeFactors;\n}\n\nint main() {\n    int t, a, b;\n    std::cin >> t;\n    \n    while (t--) {\n        std::cin >> a >> b;\n        int keyA = getKeyNumber(a);\n        int keyB = getKeyNumber(b);\n        \n        if (keyA > keyB) {\n            std::cout << 'a' << std::endl;\n        } else if (keyB > keyA) {\n            std::cout << 'b' << std::endl;\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:08:41"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def largest_prime_factor(n):\n    i = 2\n    largest_factor = 0\n    while i * i <= n:\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n        i += 1\n    if n > 1:\n        largest_factor = n\n    return largest_factor\n\ndef sum_of_other_prime_factors(n):\n    i = 2\n    sum_factors = 0\n    largest_factor = 0\n    while i * i <= n:\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n            sum_factors += largest_factor\n        i += 1\n    if n > 1:\n        largest_factor = n\n        sum_factors += largest_factor\n    return sum_factors - largest_factor\n\ndef key_number(n):\n    largest_prime = largest_prime_factor(n)\n    sum_others = sum_of_other_prime_factors(n)\n    return largest_prime - sum_others\n\ndef determine_door(a, b):\n    key_a = key_number(a)\n    key_b = key_number(b)\n    return 'a' if key_a > key_b else 'b'\n\n# Example usage:\na = 28\nb = 35\nresult = determine_door(a, b)\nprint(result)  # Output: Option that corresponds to the larger key number",
    "timestamp": "2025-08-13 05:08:54"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class TreasureDoors {\n    \n    public static int largestPrimeFactor(int n) {\n        int largest = -1;\n        \n        while (n % 2 == 0) {\n            largest = 2;\n            n /= 2;\n        }\n        \n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largest = i;\n                n /= i;\n            }\n        }\n        \n        if (n > 2) {\n            largest = n;\n        }\n        \n        return largest;\n    }\n    \n    public static int sumOfOtherPrimeFactors(int n, int largest) {\n        int sum = 0;\n        \n        // Check for factor of 2\n        while (n % 2 == 0) {\n            if (2 != largest) {\n                sum += 2;\n            }\n            n /= 2;\n        }\n        \n        // Check for other factors\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                if (i != largest) {\n                    sum += i;\n                }\n                n /= i;\n            }\n        }\n        \n        // Check if n is a prime number greater than 2\n        if (n > 2 && n != largest) {\n            sum += n;\n        }\n        \n        return sum;\n    }\n    \n    public static int keyNumber(int n) {\n        int largest = largestPrimeFactor(n);\n        int sumOfOthers = sumOfOtherPrimeFactors(n, largest);\n        return largest - sumOfOthers;\n    }\n\n    public static void compareKeyNumbers(int n1, int n2) {\n        int keyNum1 = keyNumber(n1);\n        int keyNum2 = keyNumber(n2);\n        if (keyNum1 > keyNum2) {\n            System.out.println(\"a\");\n        } else {\n            System.out.println(\"b\");\n        }\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n1 = scanner.nextInt();\n        int n2 = scanner.nextInt();\n        compareKeyNumbers(n1, n2);\n    }\n}",
    "timestamp": "2025-08-13 05:09:05"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <math.h>\n\n// Function to check if a number is prime\nint isPrime(int n) {\n    if (n <= 1) return 0;\n    if (n <= 3) return 1;\n    if (n % 2 == 0 || n % 3 == 0) return 0;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return 0;\n    }\n    return 1;\n}\n\n// Function to find the largest prime factor of n\nint largestPrimeFactor(int n) {\n    int maxPrime = -1;    \n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            maxPrime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2) maxPrime = n;\n    return maxPrime;\n}\n\n// Function to calculate the sum of all prime factors of n excluding the largest\nint sumOfOtherPrimeFactors(int n, int largest) {\n    int sum = 0;\n    while (n % 2 == 0) {\n        if (2 != largest) sum += 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            if (i != largest) sum += i;\n            n = n / i;\n        }\n    }\n    if (n > 2 && n != largest) sum += n;\n    return sum;\n}\n\n// Function to calculate the key number of an integer\nint keyNumber(int n) {\n    int largest = largestPrimeFactor(n);\n    int sum = sumOfOtherPrimeFactors(n, largest);\n    return largest - sum;\n}\n\nint main() {\n    int a, b;\n    \n    // Example usage: Providing input for two numbers\n    scanf(\"%d %d\", &a, &b);\n    \n    int keyA = keyNumber(a);\n    int keyB = keyNumber(b);\n    \n    if (keyA > keyB) {\n        printf(\"a\\n\");\n    } else {\n        printf(\"b\\n\");\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 05:09:16"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_factors(n):\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            if is_prime(d):\n                factors.append(d)\n            n //= d\n        d += 1\n        if d * d > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors\n\ndef key_number(n):\n    factors = prime_factors(n)\n    if not factors:\n        return 0\n    max_prime = max(factors)\n    other_primes_sum = sum(set(factors) - {max_prime})\n    return max_prime - other_primes_sum\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        a, b = map(int, input().split())\n        key_a = key_number(a)\n        key_b = key_number(b)\n        \n        if key_a > key_b:\n            print('a')\n        else:\n            print('b')\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 05:09:24"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\n\ndef largest_prime_factor(n):\n    largest = -1\n    while n % 2 == 0:\n        largest = 2\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest = i\n            n = n // i\n    if n > 2:\n        largest = n\n    return largest\n\ndef sum_other_prime_factors(n, largest_pf):\n    if n == 1:\n        return 0\n    total = 0\n    while n % 2 == 0:\n        if 2 != largest_pf:\n            total += 2\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            if i != largest_pf:\n                total += i\n            n = n // i\n    if n > 1 and n != largest_pf:\n        total += n\n    return total\n\ndef key_number(n):\n    if n == 1:\n        return 0\n    lpf = largest_prime_factor(n)\n    sum_other = sum_other_prime_factors(n, lpf)\n    return lpf - sum_other\n\ndef solve():\n    input_lines = sys.stdin.read().split()\n    idx = 0\n    T = int(input_lines[idx])\n    idx += 1\n    for _ in range(T):\n        a, b = map(int, input_lines[idx:idx+2])\n        idx += 2\n        ka = key_number(a)\n        kb = key_number(b)\n        if ka > kb:\n            print('a')\n        else:\n            print('b')\n\nsolve()",
    "timestamp": "2025-08-13 05:09:39"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n// Function to determine if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\n// Function to calculate the key number of an integer n\nint keyNumber(int n) {\n    int largestPrimeFactor = 0;\n    int sumOfOtherPrimes = 0;\n\n    // Factor out all 2s\n    while (n % 2 == 0) {\n        largestPrimeFactor = 2;\n        n /= 2;\n    }\n\n    // Factor out other primes\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            if (i > largestPrimeFactor) {\n                sumOfOtherPrimes += largestPrimeFactor;\n                largestPrimeFactor = i;\n            } else {\n                sumOfOtherPrimes += i;\n            }\n            n /= i;\n        }\n    }\n\n    // If n is a prime number greater than 2\n    if (n > 2) {\n        if (n > largestPrimeFactor) {\n            sumOfOtherPrimes += largestPrimeFactor;\n            largestPrimeFactor = n;\n        } else {\n            sumOfOtherPrimes += n;\n        }\n    }\n\n    return largestPrimeFactor - sumOfOtherPrimes;\n}\n\nint main() {\n    int a, b;\n    cout << \"Enter two integers: \";\n    cin >> a >> b;\n\n    int k1 = keyNumber(a);\n    int k2 = keyNumber(b);\n\n    if (k1 > k2) {\n        cout << \"a\" << endl;\n    } else {\n        cout << \"b\" << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:23:15"
  }
]