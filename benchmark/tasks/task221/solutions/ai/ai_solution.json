[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid dfs(int x, int y, int h, int w, int grid[h][w]) {\n    if (x < 0 || x >= h || y < 0 || y >= w || grid[x][y] != 1) {\n        return;\n    }\n    grid[x][y] = -1;\n    for (int dx = -1; dx <= 1; dx++) {\n        for (int dy = -1; dy <= 1; dy++) {\n            if (dx != 0 || dy != 0) {\n                dfs(x + dx, y + dy, h, w, grid);\n            }\n        }\n    }\n}\n\nint main() {\n    int w, h;\n    while (1) {\n        scanf(\"%d %d\", &w, &h);\n        if (w == 0 && h == 0) {\n            break;\n        }\n        int grid[h][w];\n        for (int i = 0; i < h; i++) {\n            for (int j = 0; j < w; j++) {\n                scanf(\"%d\", &grid[i][j]);\n            }\n        }\n        int count = 0;\n        for (int i = 0; i < h; i++) {\n            for (int j = 0; j < w; j++) {\n                if (grid[i][j] == 1) {\n                    dfs(i, j, h, w, grid);\n                    count++;\n                }\n            }\n        }\n        printf(\"%d\\n\", count);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 19:08:32"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class IslandCounter {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (true) {\n            int width = scanner.nextInt();\n            int height = scanner.nextInt();\n            \n            if (width == 0 && height == 0) {\n                break;\n            }\n            \n            int[][] grid = new int[height][width];\n            for (int i = 0; i < height; i++) {\n                for (int j = 0; j < width; j++) {\n                    grid[i][j] = scanner.nextInt();\n                }\n            }\n            \n            System.out.println(countIslands(grid));\n        }\n        \n        scanner.close();\n    }\n    \n    static int countIslands(int[][] grid) {\n        int islands = 0;\n        boolean[][] visited = new boolean[grid.length][grid[0].length];\n        \n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                if (grid[i][j] == 1 && !visited[i][j]) {\n                    dfs(grid, visited, i, j);\n                    islands++;\n                }\n            }\n        }\n        \n        return islands;\n    }\n    \n    static void dfs(int[][] grid, boolean[][] visited, int row, int col) {\n        int[] dx = {-1, -1, -1, 0, 0, 1, 1, 1};\n        int[] dy = {-1, 0, 1, -1, 1, -1, 0, 1};\n        \n        visited[row][col] = true;\n        \n        for (int k = 0; k < 8; k++) {\n            int newRow = row + dx[k];\n            int newCol = col + dy[k];\n            \n            if (newRow >= 0 && newRow < grid.length && \n                newCol >= 0 && newCol < grid[0].length && \n                grid[newRow][newCol] == 1 && !visited[newRow][newCol]) {\n                dfs(grid, visited, newRow, newCol);\n            }\n        }\n    }\n}",
    "timestamp": "2025-08-05 19:08:40"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nvoid bfs(int x, int y, vector<vector<int>>& grid, int h, int w) {\n    queue<pair<int, int>> q;\n    q.push({x, y});\n    grid[x][y] = 0;\n    \n    int dx[] = {-1, -1, -1, 0, 0, 1, 1, 1};\n    int dy[] = {-1, 0, 1, -1, 1, -1, 0, 1};\n    \n    while (!q.empty()) {\n        auto current = q.front();\n        q.pop();\n        for (int i = 0; i < 8; ++i) {\n            int nx = current.first + dx[i];\n            int ny = current.second + dy[i];\n            if (nx >= 0 && nx < h && ny >= 0 && ny < w && grid[nx][ny] == 1) {\n                grid[nx][ny] = 0;\n                q.push({nx, ny});\n            }\n        }\n    }\n}\n\nint main() {\n    int w, h;\n    while (cin >> w >> h) {\n        if (w == 0 && h == 0) break;\n        vector<vector<int>> grid(h, vector<int>(w));\n        for (int i = 0; i < h; ++i) {\n            for (int j = 0; j < w; ++j) {\n                cin >> grid[i][j];\n            }\n        }\n        \n        int islands = 0;\n        for (int i = 0; i < h; ++i) {\n            for (int j = 0; j < w; ++j) {\n                if (grid[i][j] == 1) {\n                    islands++;\n                    bfs(i, j, grid, h, w);\n                }\n            }\n        }\n        cout << islands << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 19:08:59"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MAX_SIZE 50\n\nvoid dfs(int map[MAX_SIZE][MAX_SIZE], int rows, int cols, int r, int c) {\n    if (r < 0 || r >= rows || c < 0 || c >= cols || map[r][c] != 1)\n        return;\n\n    map[r][c] = 0;\n\n    for (int dr = -1; dr <= 1; dr++) {\n        for (int dc = -1; dc <= 1; dc++) {\n            dfs(map, rows, cols, r + dr, c + dc);\n        }\n    }\n}\n\nint count_islands(int map[MAX_SIZE][MAX_SIZE], int rows, int cols) {\n    int islands = 0;\n\n    for (int r = 0; r < rows; r++) {\n        for (int c = 0; c < cols; c++) {\n            if (map[r][c] == 1) {\n                dfs(map, rows, cols, r, c);\n                islands++;\n            }\n        }\n    }\n\n    return islands;\n}\n\nint main() {\n    int rows, cols;\n    int map[MAX_SIZE][MAX_SIZE];\n\n    while (1) {\n        scanf(\"%d %d\", &cols, &rows);\n        \n        if (cols == 0 && rows == 0)\n            break;\n\n        for (int r = 0; r < rows; r++) {\n            for (int c = 0; c < cols; c++) {\n                scanf(\"%d\", &map[r][c]);\n            }\n        }\n\n        printf(\"%d\\n\", count_islands(map, rows, cols));\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 19:09:05"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid dfs(vector<vector<int>>& grid, int r, int c) {\n    int rows = grid.size();\n    int cols = grid[0].size();\n    \n    if (r < 0 || r >= rows || c < 0 || c >= cols || grid[r][c] == 0) \n        return;\n    \n    grid[r][c] = 0;\n    \n    for (int dr = -1; dr <= 1; dr++) {\n        for (int dc = -1; dc <= 1; dc++) {\n            dfs(grid, r + dr, c + dc);\n        }\n    }\n}\n\nint countIslands(vector<vector<int>>& grid) {\n    int rows = grid.size();\n    int cols = grid[0].size();\n    int islands = 0;\n    \n    for (int r = 0; r < rows; r++) {\n        for (int c = 0; c < cols; c++) {\n            if (grid[r][c] == 1) {\n                islands++;\n                dfs(grid, r, c);\n            }\n        }\n    }\n    \n    return islands;\n}\n\nint main() {\n    int width, height;\n    \n    while (cin >> width >> height && width != 0 && height != 0) {\n        vector<vector<int>> grid(height, vector<int>(width));\n        \n        for (int r = 0; r < height; r++) {\n            for (int c = 0; c < width; c++) {\n                cin >> grid[r][c];\n            }\n        }\n        \n        cout << countIslands(grid) << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 19:09:10"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class IslandCounter {\n    private static int[][] directions = {{-1, -1}, {-1, 0}, {-1, 1},\n                                         {0, -1},          {0, 1},\n                                         {1, -1},  {1, 0}, {1, 1}};\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            int w = scanner.nextInt();\n            int h = scanner.nextInt();\n            if (w == 0 && h == 0) break;\n\n            int[][] grid = new int[h][w];\n            for (int i = 0; i < h; i++) {\n                for (int j = 0; j < w; j++) {\n                    grid[i][j] = scanner.nextInt();\n                }\n            }\n\n            int count = 0;\n            boolean[][] visited = new boolean[h][w];\n            for (int i = 0; i < h; i++) {\n                for (int j = 0; j < w; j++) {\n                    if (grid[i][j] == 1 && !visited[i][j]) {\n                        dfs(grid, visited, i, j, h, w);\n                        count++;\n                    }\n                }\n            }\n            System.out.println(count);\n        }\n        scanner.close();\n    }\n\n    private static void dfs(int[][] grid, boolean[][] visited, int i, int j, int h, int w) {\n        if (i < 0 || i >= h || j < 0 || j >= w || grid[i][j] == 0 || visited[i][j]) {\n            return;\n        }\n        visited[i][j] = true;\n        for (int[] dir : directions) {\n            int ni = i + dir[0];\n            int nj = j + dir[1];\n            dfs(grid, visited, ni, nj, h, w);\n        }\n    }\n}",
    "timestamp": "2025-08-05 19:09:30"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def count_islands(map_data):\n    def dfs(x, y):\n        if x < 0 or x >= height or y < 0 or y >= width or map_data[x][y] == 0:\n            return\n        map_data[x][y] = 0  # mark as visited\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]:\n            dfs(x + dx, y + dy)\n    \n    islands = 0\n    height = len(map_data)\n    width = len(map_data[0]) if height > 0 else 0\n\n    for i in range(height):\n        for j in range(width):\n            if map_data[i][j] == 1:\n                dfs(i, j)\n                islands += 1\n\n    return islands\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    index = 0\n    results = []\n    \n    while index < len(data):\n        dimensions = data[index].strip()\n        width, height = map(int, dimensions.split())\n        if width == 0 and height == 0:\n            break\n        index += 1\n        \n        map_data = []\n        for _ in range(height):\n            row = list(map(int, data[index].strip().split()))\n            map_data.append(row)\n            index += 1\n        \n        results.append(count_islands(map_data))\n        \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 02:46:56"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class IslandCounter {\n\n    private static final int[] dx = {-1, -1, -1, 0, 0, 1, 1, 1};\n    private static final int[] dy = {-1, 0, 1, -1, 1, -1, 0, 1};\n\n    private static void dfs(int[][] grid, boolean[][] visited, int x, int y, int height, int width) {\n        visited[x][y] = true;\n        for (int direction = 0; direction < 8; direction++) {\n            int nx = x + dx[direction];\n            int ny = y + dy[direction];\n            if (nx >= 0 && nx < height && ny >= 0 && ny < width && grid[nx][ny] == 1 && !visited[nx][ny]) {\n                dfs(grid, visited, nx, ny, height, width);\n            }\n        }\n    }\n\n    private static int countIslands(int[][] grid, int height, int width) {\n        boolean[][] visited = new boolean[height][width];\n        int islandCount = 0;\n        for (int i = 0; i < height; i++) {\n            for (int j = 0; j < width; j++) {\n                if (grid[i][j] == 1 && !visited[i][j]) {\n                    dfs(grid, visited, i, j, height, width);\n                    islandCount++;\n                }\n            }\n        }\n        return islandCount;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        while (true) {\n            int width = scanner.nextInt();\n            int height = scanner.nextInt();\n            if (width == 0 && height == 0) break;\n\n            int[][] grid = new int[height][width];\n            for (int i = 0; i < height; i++) {\n                for (int j = 0; j < width; j++) {\n                    grid[i][j] = scanner.nextInt();\n                }\n            }\n            System.out.println(countIslands(grid, height, width));\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-13 02:47:04"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_SIZE 50\n\nint width, height;\nint map[MAX_SIZE][MAX_SIZE];\nint visited[MAX_SIZE][MAX_SIZE];\n\nvoid dfs(int x, int y) {\n    if (x < 0 || x >= width || y < 0 || y >= height || visited[y][x] || map[y][x] == 0) {\n        return;\n    }\n    \n    visited[y][x] = 1;\n\n    for (int dx = -1; dx <= 1; dx++) {\n        for (int dy = -1; dy <= 1; dy++) {\n            if (dx != 0 || dy != 0) {\n                dfs(x + dx, y + dy);\n            }\n        }\n    }\n}\n\nint count_islands() {\n    int island_count = 0;\n    for (int y = 0; y < height; ++y) {\n        for (int x = 0; x < width; ++x) {\n            if (map[y][x] == 1 && !visited[y][x]) {\n                dfs(x, y);\n                island_count++;\n            }\n        }\n    }\n    return island_count;\n}\n\nint main() {\n    while (scanf(\"%d %d\", &width, &height) == 2 && (width != 0 || height != 0)) {\n        for (int y = 0; y < height; ++y) {\n            for (int x = 0; x < width; ++x) {\n                scanf(\"%d\", &map[y][x]);\n                visited[y][x] = 0;\n            }\n        }\n        int islands = count_islands();\n        printf(\"%d\\n\", islands);\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 02:47:07"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def count_islands(grid):\n    rows, cols = len(grid), len(grid[0])\n    visited = [[False] * cols for _ in range(rows)]\n    islands = 0\n\n    def dfs(r, c):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or \n            grid[r][c] == 0 or visited[r][c]):\n            return\n        \n        visited[r][c] = True\n        \n        directions = [\n            (-1, -1), (-1, 0), (-1, 1),\n            (0, -1), (0, 1),\n            (1, -1), (1, 0), (1, 1)\n        ]\n        \n        for dr, dc in directions:\n            dfs(r + dr, c + dc)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 1 and not visited[r][c]:\n                dfs(r, c)\n                islands += 1\n\n    return islands\n\ndef main():\n    while True:\n        w, h = map(int, input().split())\n        if w == 0 and h == 0:\n            break\n        \n        grid = []\n        for _ in range(h):\n            grid.append(list(map(int, input().split())))\n        \n        print(count_islands(grid))\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 02:47:20"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\nfrom collections import deque\n\ndef count_islands(grid, h, w):\n    directions = [(-1, -1), (-1, 0), (-1, 1),\n                  (0, -1),          (0, 1),\n                  (1, -1),  (1, 0), (1, 1)]\n    visited = [[False for _ in range(w)] for _ in range(h)]\n    count = 0\n    \n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == 1 and not visited[i][j]:\n                count += 1\n                queue = deque()\n                queue.append((i, j))\n                visited[i][j] = True\n                \n                while queue:\n                    x, y = queue.popleft()\n                    for dx, dy in directions:\n                        nx, ny = x + dx, y + dy\n                        if 0 <= nx < h and 0 <= ny < w:\n                            if grid[nx][ny] == 1 and not visited[nx][ny]:\n                                visited[nx][ny] = True\n                                queue.append((nx, ny))\n    return count\n\ndef main():\n    while True:\n        w, h = map(int, sys.stdin.readline().split())\n        if w == 0 and h == 0:\n            break\n        grid = []\n        for _ in range(h):\n            row = list(map(int, sys.stdin.readline().split()))\n            grid.append(row)\n        print(count_islands(grid, h, w))\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 02:47:35"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid dfs(vector<vector<int>>& grid, int x, int y, int w, int h) {\n    if (x < 0 || y < 0 || x >= h || y >= w || grid[x][y] == 0) {\n        return;\n    }\n    grid[x][y] = 0; // Mark the cell as visited\n    dfs(grid, x + 1, y, w, h);\n    dfs(grid, x - 1, y, w, h);\n    dfs(grid, x, y + 1, w, h);\n    dfs(grid, x, y - 1, w, h);\n    dfs(grid, x + 1, y + 1, w, h);\n    dfs(grid, x - 1, y - 1, w, h);\n    dfs(grid, x + 1, y - 1, w, h);\n    dfs(grid, x - 1, y + 1, w, h);\n}\n\nint main() {\n    while (true) {\n        int w, h;\n        cin >> w >> h;\n        if (w == 0 && h == 0) break;\n        vector<vector<int>> grid(h, vector<int>(w));\n        for (int i = 0; i < h; ++i) {\n            for (int j = 0; j < w; ++j) {\n                cin >> grid[i][j];\n            }\n        }\n        int islands = 0;\n        for (int i = 0; i < h; ++i) {\n            for (int j = 0; j < w; ++j) {\n                if (grid[i][j] == 1) {\n                    ++islands;\n                    dfs(grid, i, j, w, h);\n                }\n            }\n        }\n        cout << islands << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 11:07:18"
  }
]