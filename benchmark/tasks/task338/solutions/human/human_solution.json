[
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cmath>\n#include <algorithm>\n#include <cfloat>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <string>\n#include <iostream>\n#include <set>\n#include <map>\ntypedef long long int ll;\ntypedef unsigned long long int ull;\n#define BIG_NUM 2000000000\n#define MOD 1000000007\n#define EPS 0.000000001\nusing namespace std;\n\n#define NUM 2000\n\nint N,test_case = 1;\nint coin[50],dp[NUM],greedy[NUM];\nint minimum;\n\n\nint calc_greedy(int number){\n\n\tint ret = 0;\n\tint rest = number;\n\n\tfor(int i = N-1; i >= 0; i--){\n\t\tif(coin[i] > rest)continue;\n\n\t\tret += rest/coin[i];\n\t\trest = rest%coin[i];\n\n\t\tif(rest == 0)break;\n\t}\n\n\treturn ret;\n}\n\n\nvoid func(){\n\n\tfor(int i = 0; i < N; i++)scanf(\"%d\",&coin[i]);\n\n\tif(coin[0] != 1){\n\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",test_case);\n\t\treturn;\n\t}\n\n\tfor(int i = 1; i < NUM; i++)dp[i] = BIG_NUM;\n\n\tdp[0] = 0;\n\tfor(int i = 0; i < N; i++){\n\t\tfor(int k = 1; coin[i]*k < NUM; k++){\n\t\t\tfor(int num = NUM-1; num-coin[i]*k >= 0; num--){\n\t\t\t\tif(dp[num-coin[i]*k] == BIG_NUM)continue;\n\n\t\t\t\tdp[num] = min(dp[num],dp[num-coin[i]*k]+k);\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(int number = 1; number < NUM; number++){\n\t\tgreedy[number] = calc_greedy(number);\n\t}\n\n\tbool FLG = true;\n\n\tfor(int i = 1; i < NUM; i++){\n\t\tif(dp[i] != greedy[i]){\n\t\t\tFLG = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif(!FLG){\n\t\tprintf(\"Case #%d: Cannot use greedy algorithm\\n\",test_case);\n\t\treturn;\n\t}\n\n\tprintf(\"Case #%d: OK\\n\",test_case);\n}\n\nint main(){\n\n\twhile(true){\n\t\tscanf(\"%d\",&N);\n\t\tif(N == 0)break;\n\n\t\tfunc();\n\t\ttest_case++;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nint main(){\n  for(int n,t;cin>>n,n;t++){\n    int dp[2001];\n    fill(begin(dp),end(dp),1<<29);\n    dp[0]=0;\n    int u[2001]={};\n    dp[0]=0;\n    bool o=false;\n    vector<int> cv;\n    while(n--){\n      int c;\n      cin>>c;\n      cv.push_back(c);\n      o|=c==1;\n      for(int i=c;i<=2000;i++){\n\tdp[i]=min(dp[i],dp[i-c]+1);\n\tu[i]=c;\n      }\n    }\n    bool f=false;\n    for(int i=1;i<=2000;i++){\n      f|=dp[i]-dp[i-u[i]]!=1;\n    }\n    cout<<\"Case #\"<<t<<\": \"<<(!o?\"Cannot pay some amount\":\n\t\t\t      f?\"Cannot use greedy algorithm\":\n\t\t\t      \"OK\")<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\n#include<math.h>\n#include<iostream>\n#include<string>\n#include<sstream>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<queue>\n#include<stack>\n#include<vector>\n#define ll  long long \nusing namespace std;\nint n, a[1005], t, inf = 3000;\nint u[3005], g[3005];\nbool get()\n{\n\tmemset(u, 0, sizeof(u));\n\tmemset(g, 0, sizeof(g));\n\tint mx = 1500;\n\tfor (int i = 1; i <= 2 * mx; i++)\n\t\tu[i] = inf;\n\tfor (int i = 0; i < n; i++)\n\t\tu[a[i]] = 1;\n\tfor (int i = 1; i <= 2 * mx; i++)\n\t{\n\t\tif (u[i] != inf)\tcontinue;\n\t\tfor (int j = 1; j < i; j++)\n\t\t{\n\t\t\tu[i] = min(u[i], u[i - j] + u[j]);\n\t\t}\n\t}\n\tfor (int i = 1; i <= 2 * mx; i++)\n\t{\n\t\tint cur = i;\n\t\tfor (int j = n - 1; j >= 0; j--)\n\t\t{\n\t\t\tg[i] += cur / a[j];\n\t\t\tcur %= a[j];\n\t\t\tif (!cur) break;\n\t\t}\n\t}\n\tfor (int i = 1; i <= 2 * mx; i++)\n\t{\n\t\tif (u[i] < g[i])\n\t\treturn true;\n\t}\n\treturn false;\n}\nsigned main()\n{\n\twhile (~scanf(\"%d\", &n) && n)\n\t{\n\t\t++t;\n\t\tprintf(\"Case #%d: \", t);\n\t\tfor (int i = 0; i < n; i++)\tscanf(\"%d\", &a[i]);\n\t\tsort(a, a + n);\n\t\tif (a[0] != 1)\tprintf(\"Cannot pay some amount\\n\");\n\t\telse if (get())\tprintf(\"Cannot use greedy algorithm\\n\");\n\t\telse\tprintf(\"OK\\n\");\n\t}\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#define INF (1e9)\n#define J 1900\n#define N 50\nusing namespace std;\nint main(){\n  int n,c[N],dp[J],dn[J],C=0;\n  while(1){\n    cin>>n;\n    if(!n) break;\n    for(int i=0;i<n;i++) cin>>c[i];\n    for(int i=0;i<J;i++) dp[i]=dn[i]=INF;\n    sort(c,c+n);\n    dp[0]=0;\n    for(int i=0;i<n;i++)\n      for(int j=1;j<J;j++)\n\tif(j>=c[i]) dp[j]=min(dp[j],dp[j-c[i]]+1);\n    sort(c,c+n);\n    reverse(c,c+n);\n    for(int i=0;i<J;i++){\n      int cnt=0,sum=i;\n      for(int j=0;j<n;j++){\n\tcnt+=sum/c[j];\n\tsum%=c[j];\n      }\n      if(sum==0) dn[i]=cnt;\n    }\n    int flag=0;\n    for(int i=1;i<J;i++){\n      if(dp[i]==INF||dn[i]==INF){\n\tflag=1;\n\tbreak;\n      }\n      if(dp[i]!=dn[i]){\n\tflag=2;\n\tbreak;\n      }\n    }\n    C++;\n    cout<<\"Case #\"<<C<<\": \";\n    if(!flag) cout<<\"OK\"<<endl;\n    else if(flag==1) cout<<\"Cannot pay some amount\"<<endl;\n    else cout<<\"Cannot use greedy algorithm\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main(){\n\tint n,cnt=0;\n\t\n\twhile(cin >> n, n){\n\t\tcout << \"Case #\" << ++cnt << \": \";\n\t\tvector<int> data(n);\n\t\t\n\t\tfor(int i=0;i<n;i++)cin >> data[i];\n\t\t\n\t\tif(!count(data.begin(),data.end(),1)){\n\t\t\tcout << \"Cannot pay some amount\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tsort(data.begin(),data.end());\n\t\tbool flag = true;\n\t\tfor(int i=1;i<n;i++)if(data[i]%data[i-1] != 0)flag = false;\n\t\tcout << (flag?\"OK\":\"Cannot use greedy algorithm\") << endl;\n\t\t\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <sstream>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <cassert>\n#include <climits>\n#include <queue>\n#include <set>\n#include <map>\n#include <valarray>\n#include <bitset>\n#include <stack>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int INF = 1<<29;\nconst double PI = acos(-1);\nconst double EPS = 1e-8;\n\nint main() {\n  int n;\n  int N = 0;\n  while(cin>>n, n) {\n    int c[n];\n    REP(i, n) cin >> c[i];\n    sort(c, c+n);\n    printf(\"Case #%d: \", ++N);\n    if (c[0] != 1) {\n      puts(\"Cannot pay some amount\");\n      continue;\n    }\n    bool f = 0;\n    REP(i, n-1) {\n      if (c[i+1]%c[i]) {\n        f = 1;break;\n      }\n    }\n    if (!f || n==3&&c[1]==2&&c[2]==3) {\n      puts(\"OK\");\n    } else {\n      puts(\"Cannot use greedy algorithm\");\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\n#define\trep(i,n)\tfor(int i=0;i<(n);i++)\n\nusing namespace std;\n\nconst int INF=1<<29;\n\nint n,c[100];\n\nint greedy(int p){\n\tint cnt=0;\n\tfor(int i=n-1;i>=0&&p>0;i--){\n\t\twhile(p>=c[i])\tp-=c[i],cnt++;\n\t}\n\treturn cnt;\n}\n\nint main(){\n\tfor(int T=1;scanf(\"%d\",&n),n;T++){\n\t\trep(i,n)\tscanf(\"%d\",c+i);\n\n\t\tif(c[0]!=1){\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",T);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst int L=c[n-1]*c[n-1];\n\t\tint dp[L];\tdp[0]=0;\n\t\tfill(dp+1,dp+L,INF);\n\t\trep(k,n)for(int p=c[k];p<L;p++)\tdp[p]=min(dp[p],dp[p-c[k]]+1);\n\n\t\tbool ok=true;\n\t\trep(i,L)if(dp[i]<greedy(i)){ ok=false; break; }\n\t\tprintf(\"Case #%d: %s\\n\",T,ok?\"OK\":\"Cannot use greedy algorithm\");\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 10000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nstatic const int CC[6] = {1,5,10,50,100,500};\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      //  for(j=1;j<=10000;j++){    \n      // douteki(n);                                                             \n      // cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n      // cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      douteki(n);\n      for(j=1;j<=10000;j++){\n\tif(greedy(j) != T[j])flag=3;\n      }\n      \n    }                                                                      \n      for(i=1;i<n;i++){\n        if(c[i]%c[i-1] != 0)flag = 2;\n      }\n      if(flag == 0){\n        cout << \"Case #\" << k << \": OK\" << endl;\n   k++;\n      }else{\n        cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n        k++;\n        }\n\n\n    }\n\n\n}\n\n\n\n\nint greedy(int a){\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n   a = a%c[i];\n    }\n  }\n  return ans;\n\n}\n\n\nvoid douteki(int re){\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\n\nint n;\nint coins[100];\nint dp[51][10001];\nconst int INF=1000000000;\n\nint dfs(int pos,int money){\n\tif(pos==n){\n\t\tif(money==0)return 0;\n\t\treturn INF;\n\t}\n\tif(dp[pos][money]!=-1)return dp[pos][money];\n\tint res=INF;\n\t// ¥¦éÈçÎ¥¤\n\tif(money-coins[pos]>=0)res=min(res,dfs(pos,money-coins[pos])+1);\n\t// àzÏX\n\tres=min(res,dfs(pos+1,money));\n\treturn dp[pos][money]=res;\n}\n\nint main(){\n\tint cnt=0;\n\twhile(cin>>n&&n){\n\t\tbool con=false;\n\t\tcnt++;\n\t\tcout<<\"Case #\"<<cnt<<\": \";\n\t\tfor(int i=0;i<n;i++)cin>>coins[i];\n\t\tsort(coins,coins+n);\n\t\tmemset(dp,-1,sizeof(dp));\n\t\tfor(int j=1;j<=10000;j++)dfs(0,j);\n\t\tfor(int i=1;i<=10000;i++){\n\t\t\tif(dp[0][i]==INF){\n\t\t\t\tcout<<\"Cannot pay some amount\"<<endl;\n\t\t\t\tcon=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(con)continue;\n\t\t// »ê¼êÌàzðgreedyÅ¥¤\n\t\tfor(int i=1;i<=10000;i++){\n\t\t\tint leftm=i;\n\t\t\tint allc=0;\n\t\t\tfor(int j=n-1;j>=0;j--){\n\t\t\t\tint cnt=leftm/coins[j];\n\t\t\t\tleftm-=cnt*coins[j];\n\t\t\t\tallc+=cnt;\n\t\t\t}\n\t\t\tif(dp[0][i]!=allc){\n\t\t\t\tcout<<\"Cannot use greedy algorithm\"<<endl;\n\t\t\t\tcon=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(con)continue;\n\t\tcout<<\"OK\"<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#define INF (1e9)\nusing namespace std;\nint main(){\n  int n,c[50];\n  while(cin>>n&&n){\n    int dp[2001];\n    for(int i=0;i<n;i++)cin>>c[i];\n    for(int i=1;i<=2000;i++)dp[i]=INF;\n    for(int i=0;i<n;i++)\n      for(int j=c[i];j<=2000;j++)\n\tdp[j]=min(dp[j],dp[j-c[i]]+1);\n    if(c[0]==1){\n      int f=0;\n      for(int i=1;i<=2000;i++){\n\tint s=i,a=0;\n\tfor(int j=n-1;s!=0;j--){\n\t  a+=s/c[j];\n\t  s%=c[j];\n\t}\n\tif(a>dp[i]){f=1;break;}\n      }\n      if(f)cout<<\"Case #3: Cannot use greedy algorithm\"<<endl;\n      else cout<<\"Case #1: OK\"<<endl;\n    }\n    else cout<<\"Case #2: Cannot pay some amount\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint n;\nint mx;\nint c[100];\n\nint greedy(int x){\n  int res=0;\n  for(int i=n-1;i>=0;i--){\n    res+=x/c[i];\n    x%=c[i];\n  }\n  return res;\n}\n\nint dp[3000];\n\nvoid solve(){\n  if(c[0]!=1){\n    printf(\"Cannnot pay some amount\");\n    return;\n  }\n  \n  mx=c[0];\n  for(int i=1;i<n;i++)mx=max(mx,c[i]);\n\n  fill( dp, dp+3000, 1e9);\n  dp[0]=0;\n  \n  for(int i=0;i<n;i++){\n    int val=c[i];\n    for(int j=0;j<mx;j++){\n      if(j-val>=0)dp[j]=min(dp[j],dp[j-val]+1);\n    }\n  }\n  \n  for(int num=1;num<mx;num++){\n    int cost=greedy(num);\n    if(cost!=dp[num]){\n      //      cout<<num<<' '<<cost<<' '<<dp[num]<<endl;\n      printf(\"Cannot use greedy algorithm\");\n      return;\n    }\n  }\n\n  for(int j=mx;j<mx*3;j++){\n\n    for(int i=0;i<n;i++){\n      int val=c[i];      \n      dp[j]=min(dp[j],dp[j-val]+1);\n    }\n    if( dp[j]!=dp[j-mx]+1 ){\n      printf(\"Cannot use greedy algorithm\");\n      return;\n    }\n  }\n  printf(\"OK\");\n}\n\nint main(){\n  for(int tc=1;;tc++){\n    scanf(\"%d\",&n);\n    if(n==0)break;\n    for(int i=0;i<n;i++)scanf(\"%d\",&c[i]);\n    printf(\"Case #%d: \",tc);\n    solve();\n    printf(\"\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#define INF (1e9)\n#define J 1001\n#define N 50\nusing namespace std;\nint main(){\n  int n,c[N],dp[J],dn[J],C=0;\n  while(1){\n    cin>>n;\n    if(!n) break;\n    for(int i=0;i<n;i++) cin>>c[i];\n    for(int i=0;i<J;i++) dp[i]=dn[i]=INF;\n    sort(c,c+n);\n    dp[0]=0;\n    for(int i=0;i<n;i++)\n      for(int j=1;j<J;j++)\n\tif(j>=c[i]) dp[j]=min(dp[j],dp[j-c[i]]+1);\n    sort(c,c+n);\n    reverse(c,c+n);\n    for(int i=0;i<J;i++){\n      int cnt=0,sum=i;\n      for(int j=0;j<n;j++){\n\tcnt+=sum/c[j];\n\tsum%=c[j];\n      }\n      if(sum==0) dn[i]=cnt;\n    }\n    int flag=0;\n    for(int i=1;i<J;i++){\n      if(dp[i]==INF||dn[i]==INF){\n\tflag=1;\n\tbreak;\n      }\n      if(dp[i]!=dn[i]){\n\tflag=2;\n\tbreak;\n      }\n    }\n    C++;\n    cout<<\"Case #\"<<C<<\": \";\n    if(!flag) cout<<\"OK\"<<endl;\n    else if(flag==1) cout<<\"Cannot pay some amount\"<<endl;\n    else cout<<\"Cannot use greedy algorithm\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nint main(){\n  for(int n,t;cin>>n,n;t++){\n    int dp[2001];\n    fill(begin(dp),end(dp),1<<29);\n    dp[0]=0;\n    int u[2001]={};\n    dp[0]=0;\n    bool o=false;\n    vector<int> cv;\n    while(n--){\n      int c;\n      cin>>c;\n      cv.push_back(c);\n      o|=c==1;\n      for(int i=c;i<=2000;i++){\n\tdp[i]=min(dp[i],dp[i-c]+1);\n\tu[i]=c;\n      }\n    }\n    bool f=false;\n    for(int i=1;i<=2000;i++){\n      f|=dp[i]-dp[i-u[i]]<1;\n    }\n    cout<<\"Case #\"<<t<<\": \"<<(!o?\"Cannot pay some amount\":\n\t\t\t      f?\"Cannot use greedy algorithm\":\n\t\t\t      \"OK\")<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint n;\nint c[100];\n \nint greedy(int x){\n  int res=0;\n  for(int i=n-1;i>=0;i--){\n    res+=x/c[i];\n    x%=c[i];\n  }\n  return res;\n}\n \nint dp[5000];\n \nvoid solve(){\n  if(c[0]!=1){\n    printf(\"Cannot pay some amount\");\n    return;\n  }\n \n  fill( dp, dp+5000, 1e9);\n  dp[0]=0;\n   \n  for(int i=0;i<n;i++){\n    int val=c[i];\n    for(int j=0;j<2000;j++){\n      if(j-val>=0)dp[j]=min(dp[j],dp[j-val]+1);\n    }\n  }\n   \n  for(int num=0;num<2000;num++){\n    int cost=greedy(num);\n    if(cost!=dp[num]){\n      //      cout<<num<<' '<<cost<<' '<<dp[num]<<endl;\n      printf(\"Cannot use greedy algorithm\");\n      return;\n    }\n  }\n \n  for(int j=2000;j<5000;j++){\n \n    for(int i=0;i<n;i++){\n      int val=c[i];      \n      dp[j]=min(dp[j],dp[j-val]+1);\n    }\n     \n    if( dp[j]!=dp[j- c[n-1] ]+1 ){\n      printf(\"Cannot use greedy algorithm\");\n      return;\n    }\n  }\n  printf(\"OK\");\n}\n \nint main(){\n  for(int tc=1;;tc++){\n    scanf(\"%d\",&n);\n    if(n==0)break;\n    for(int i=0;i<n;i++)scanf(\"%d\",&c[i]);\n    printf(\"Case #%d: \",tc);\n    solve();\n    printf(\"\\n\");\n  }\n  return 0;\n}\n\n\n/*\n#include<bits/stdc++.h>\nusing namespace std;\n\nstruct state{\n  int qy,qx,ay,ax,f;\n};\n\nint W,H;\nint syA,sxA;\nint syQ,sxQ;\n\nchar t[30][30];\nint d[30][30][30][30][2];// 0-> qturn 1->aturn\nint C[30][30][30][30][2];// 0-> qturn 1->aturn\nint dy[]={-1,0,1,0,0};\nint dx[]={0,1,0,-1,0};\n\nbool inField(int y,int x){\n  return (0<=y&&y<H&&0<=x&&x<W&&t[y][x]!='#');\n}\n\nqueue< state > que;\n\nvoid init(){\n  while( !que.empty() ) que.pop();\n  \n  for(int i=0;i<H;i++){\n    for(int j=0;j<W;j++){\n      if(t[i][j]=='#')continue;\n      \n      for(int k=0;k<H;k++){\n        for(int l=0;l<W;l++){\n          if(t[k][l]=='#')continue;\n          \n          int cc;\n\n          cc=5;\n          for(int dir=0;dir<4;dir++){\n            int ny=k+dy[dir];\n            int nx=l+dx[dir];\n            if(!inField(ny,nx))cc--;\n          }\n          C[i][j][k][l][0]=cc;\n          d[i][j][k][l][0]=0;\n\n          cc=5;\n          for(int dir=0;dir<4;dir++){\n            int ny=i+dy[dir];\n            int nx=j+dx[dir];\n            if(!inField(ny,nx))cc--;\n          }\n          \n          C[i][j][k][l][1]=cc;\n          d[i][j][k][l][1]=0;\n        }\n      }\n    }\n  }\n\n\n        \n  for(int i=0;i<H;i++)\n    for(int j=0;j<W;j++)\n      if(t[i][j]!='#')\n      for(int k=0;k<H;k++)\n        for(int l=0;l<W;l++)\n          if(t[k][l]!='#')\n            for(int f=0;f<2;f++)\n              if(i==k&&j==l&&f==0)\n                que.push( (state){i,j,k,l,f} ), d[i][j][k][l][f]=-1;\n              else if(t[i][j]=='E'&&f==0)\n                que.push( (state){i,j,k,l,f} ), d[i][j][k][l][f]=1;\n\n}\n\nstring winstr=\"Queen can escape.\";\nstring losestr=\"Army can catch Queen.\";\nstring drawstr=\"Queen can not escape and Army can not catch Queen.\";\n\nstring solve(){\n  while(!que.empty()){\n    state s=que.front();que.pop();\n    C[s.qy][s.qx][s.ay][s.ax][s.f]=0;\n\n    int &judge=d[s.qy][s.qx][s.ay][s.ax][s.f];\n    if(s.f==0){\n      \n      int flg=-1;\n      for(int dir=0;dir<5;dir++){\n        int nqy=s.qy+dy[dir];\n        int nqx=s.qx+dx[dir];\n        if(inField(nqy,nqx))\n          if(d[nqy][nqx][s.ay][s.ax][1-s.f]==1)flg=1;\n      }\n      if(judge==0)judge=flg;\n      \n      for(int dir=0;dir<5;dir++){\n        int nay=s.ay+dy[dir];\n        int nax=s.ax+dx[dir];\n        if(!inField(nay,nax))continue;\n        \n        int &cc=C[s.qy][s.qx][nay][nax][1-s.f];\n        cc--;\n        if(judge==-1&&cc>0)cc=0;\n        if(cc==0)que.push( (state){s.qy,s.qx,nay,nax,1-s.f} );\n      }\n      \n      \n    }else if(s.f==1){\n      int flg=1;\n      for(int dir=0;dir<5;dir++){\n        int nay=s.ay+dy[dir];\n        int nax=s.ax+dx[dir];\n        if(inField(nay,nax))\n          if(d[s.qy][s.qx][nay][nax][1-s.f]==-1)flg=-1;\n      }\n      if(judge==0)judge=flg;\n\n      for(int dir=0;dir<5;dir++){\n        int nqy=s.qy+dy[dir];\n        int nqx=s.qx+dx[dir];\n        if(!inField(nqy,nqx))continue;\n        int &cc=C[nqy][nqx][s.ay][s.ax][1-s.f];\n        cc--;\n        if(judge==1&&cc>0)cc=0;\n        if(cc==0)que.push( (state){nqy,nqx,s.ay,s.ax,1-s.f} );\n      }\n    }\n    if(1){\n      cout<<s.qy<<' '<<s.qx<<' '<<s.ay<<' '<<s.ax<<' '<<s.f<<endl;\n      cout<<d[s.qy][s.qx][s.ay][s.ax][s.f]<<endl;\n      cout<<\"C[0][0][0][1][0] = \"<<C[0][0][0][1][0]<<endl;\n      cout<<endl;\n    }\n    if( s.qy == syQ && s.qx == sxQ &&\n        s.ay == syA && s.ax == sxA &&\n        s.f  == 0 ){\n      if( d[s.qy][s.qx][s.ay][s.ax][s.f] == 1 )return winstr;\n      else return losestr;\n    }\n  }\n  return drawstr;\n}\n\nint main(){\n  while(1){\n    \n    cin>>W>>H;\n    if(W==0&&H==0)break;\n    \n    for(int i=0;i<H;i++){\n      for(int j=0;j<W;j++){\n        char ch;\n        cin>>ch;\n        t[i][j]=ch;\n        if(ch=='A'){\n          syA=i;sxA=j;\n        }\n        if(ch=='Q'){\n          syQ=i;sxQ=j;\n        }\n      }\n    }\n    init();\n    \n    cout<<solve()<<endl;\n  }\n  return 0;\n}\n\n*/"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <list>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <bitset>\n#include <numeric>\n#include <climits>\n#include <cfloat>\nusing namespace std;\n\nconst int INF = INT_MAX / 2;\n\nint main()\n{\n    for(int d=1; ; ++d){\n        int n;\n        cin >> n;\n        if(n == 0)\n            return 0;\n\n        vector<int> c(n);\n        for(int i=0; i<n; ++i)\n            cin >> c[i];\n\n        if(c[0] != 1){\n            cout << \"Case #\" << d << \": Cannot pay some amount\" << endl;\n            continue;\n        }\n\n        vector<int> dp(1000000, INF);\n        dp[0] = 0;\n        for(int i=0; i<n; ++i){\n            for(int j=0; j<1000000; ++j){\n                int k = j + c[i];\n                if(k < 1000000 && dp[j] + 1< dp[k])\n                    dp[k] = dp[j] + 1;\n            }\n        }\n\n        bool ok = true;\n        for(int i=0; i<1000000; ++i){\n            int rest = i;\n            int coin = 0;\n            for(int j=n-1; j>=0; --j){\n                coin += rest / c[j];\n                rest %= c[j];\n            }\n            if(coin > dp[i])\n                ok = false;\n        }\n\n        if(ok)\n            cout << \"Case #\" << d << \": OK\" << endl;\n        else\n            cout << \"Case #\" << d << \": Cannot use greedy algorithm\" << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\t\n#include<map>\n#include<set>\n#include<utility>\n#include<cmath>\n#include<cstring>\n#include<queue>\n#include<cstdio>\n#include<sstream>\n#include<iomanip>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define pb push_back\n#define mp make_pair\n#define all(in) in.begin(),in.end()\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\n//kaewasuretyuui\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<pii> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,pii> pip;\ntypedef vector<pip>vip;\nconst double PI=acos(-1);\nconst double EPS=1e-8;\nconst int inf=1e8;\nint main(){\n\tint n;\n\tint cnt=0;\n\twhile(cin>>n,n){\n\t\tcnt++;\n\t\tcout<<\"Case #\"<<cnt<<\" \";\n\t\tvi in(n);\n\t\trep(i,n)cin>>in[i];\n\t\tif(in[0]!=1){\n\t\t\tcout<<\"Cannot pay some amount\"<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\tint r=in[n-1]+in[n-2];\n\t\tvi dp(r+1,inf);\n\t\tdp[0]=0;\n\t\trep(i,n)rep(j,dp.size())if(dp[j]!=inf){\n\t\t\tif(j+in[i]<dp.size())dp[j+in[i]]=min(dp[j+in[i]],dp[j]+1);\n\t\t}\n\t\tbool h=true;\n\t\trep(i,dp.size()){\n\t\t\tint t=i;\n\t\t\tint co=0;\n\t\t\tfor(int j=n-1;j>=0;j--){\n\t\t\t\twhile(t>=in[j]){\n\t\t\t\t\tco++;\n\t\t\t\t\tt-=in[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(co!=dp[i])h=false;\n\t\t}\n\t\tif(h)cout<<\"OK\"<<endl;\n\t\telse cout<<\"Cannot ues greedy algorithm\"<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\n#define MAX_N 50\n#define MAX 50001\n#define INF 1e9\nint n, c[MAX_N];\n\nint getNum(){\n  int cost[MAX];\n\n  memset(cost,0,sizeof(cost));\n  cost[0] = 1;\n  for(int i = 0 ; i < n ; i++){\n    for(int j = 0 ; j < MAX-c[i] ; j++){\n      cost[c[i]+j] += cost[j];\n    }\n  }\n\n  for(int i = 0 ; i < MAX ; i++){\n    if(cost[i] == 0){\n      return 1;\n    }\n  }\n\n  fill(cost,cost+MAX,INF);\n  cost[0] = 0;\n  for(int i = 0 ; i < n ; i++){\n    for(int j = c[i] ; j < MAX ; j++){\n      cost[j] = min(cost[j], cost[j-c[i]]+ 1);\n    }\n  }\n\n  int s = MAX-1;\n  for(int i = s ; i >= 1 ; i--){\n    int rem = i, cnt = 0;\n    for(int j = n-1 ; j >= 0 ; j--){\n      if(rem >= c[j]){\n        cnt += rem / c[j];\n        rem %= c[j];\n      }\n    }\n    if(cost[i] != cnt){\n      return 2;\n    }\n  }\n\n  return 3;\n}\n\nint main(){\n  int Tc = 1;\n\n  while(scanf(\"%d\" ,&n), n){\n    for(int i = 0 ; i < n ; i++){\n      scanf(\"%d\" , c+i);\n    }\n\n    int num = getNum();\n\n    printf(\"Case #%d: \" ,Tc++);\n    if(num == 1){\n      puts(\"Cannot pay some amount\");\n    }else if(num == 2){\n      puts(\"Cannot use greedy algorithm\");\n    }else{\n      puts(\"OK\");\n    }\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\n#define FOR(i,k,n) for(int i=(k); i<(int)n; ++i)\n#define REP(i,n) FOR(i,0,n)\n#define FORIT(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n\ntemplate<class T> void debug(T begin, T end){ for(T i = begin; i != end; ++i) cout<<*i<<\" \"; cout<<endl; }\n\ntypedef long long ll;\nconst int INF = 100000000;\nconst double EPS = 1e-8;\nconst int MOD = 1000000007;\nstring message(vector<int> a){\n  int N = a.size();\n  sort(a.begin(), a.end());\n  if(a[0] > 1) return \"Cannot pay some amount\";\n  FOR(i,0,N)FOR(j,i+1,N)if(a[j]%a[i] != 0) return \"Cannot use greedy algorithm\";\n  return \"OK\";\n}\n\nint main(){\n  int n;\n  int cas = 1;\n  while(cin>>n,n){\n    vector<int> a(n);\n    REP(i,n)cin>>a[i];\n    cout<<\"Case #\"<<cas++<<\": \"<<message(a)<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint n;\nint c[100];\n\nint greedy(int x){\n  int res=0;\n  for(int i=n-1;i>=0;i--){\n    res+=x/c[i];\n    x%=c[i];\n  }\n  return res;\n}\n\nint dp[5000];\n\nvoid solve(){\n  if(c[0]!=1){\n    printf(\"Cannot pay some amount\");\n    return;\n  }\n\n  fill( dp, dp+5000, 1e9);\n  dp[0]=0;\n  \n  for(int i=0;i<n;i++){\n    int val=c[i];\n    for(int j=0;j<2000;j++){\n      if(j-val>=0)dp[j]=min(dp[j],dp[j-val]+1);\n    }\n  }\n  \n  for(int num=0;num<2000;num++){\n    int cost=greedy(num);\n    if(cost!=dp[num]){\n      //      cout<<num<<' '<<cost<<' '<<dp[num]<<endl;\n      printf(\"Cannot use greedy algorithm\");\n      return;\n    }\n  }\n\n  for(int j=2000;j<5000;j++){\n\n    for(int i=0;i<n;i++){\n      int val=c[i];      \n      dp[j]=min(dp[j],dp[j-val]+1);\n    }\n    \n    if( dp[j]!=dp[j- c[n-2] ]+1 ){\n      printf(\"Cannot use greedy algorithm\");\n      return;\n    }\n  }\n  printf(\"OK\");\n}\n\nint main(){\n  for(int tc=1;;tc++){\n    scanf(\"%d\",&n);\n    if(n==0)break;\n    for(int i=0;i<n;i++)scanf(\"%d\",&c[i]);\n    printf(\"Case #%d: \",tc);\n    solve();\n    printf(\"\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<climits>\n#include<algorithm>\nusing namespace std;\nconst int N=2000;\nint dp[N],memo[N],n,c[50];\nint F(int x)\n{\n\tif(memo[x]>=0)return memo[x];\n\tint y=upper_bound(c,c+n,x)[-1];\n\treturn memo[x]=1+F(x-y);\n}\nint main()\n{\n\tint i,j,T,m;\n\tfor(T=1;scanf(\"%d\",&n),n;++T)\n\t{\n\t\tfill(memo,memo+N,-1);\n\t\tfill(dp,dp+N,INT_MAX);\n\t\tmemo[0]=dp[0]=0;\n\t\tfor(i=0;i<n;++i)scanf(\"%d\",c+i);\n\t\tm=2*c[n-1]+1;\n\t\tprintf(\"Case #%d: \",T);\n\t\tif(c[0]-1)puts(\"Cannot pay some amount\");\n\t\telse\n\t\t{\n\t\t\tfor(i=0;i<m;++i)F(i);\n\t\t\tfor(i=0;i<n;++i)\n\t\t\t\tfor(j=0;j<m-c[i];++j)\n\t\t\t\t\tdp[c[i]+j]=min(dp[c[i]+j],dp[j]+1);\n\t\t\tif(equal(memo,memo+m,dp))puts(\"OK\");\n\t\t\telse puts(\"Cannot use greedy algorithm\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n  int q=1;\n  string str[]={\"OK\",\"Cannot pay some amount\",\"Cannot use greedy algorithm\"};\n  while(1){\n    int n;\n    cin >> n;\n    if(n==0) break;\n    int ans =0,c[51];\n    for(int i=0;i<n;i++)cin >> c[i];\n    if(c[0] !=1) ans=1;\n    for(int i=2;i<n;i++){\n      if(ans!=0) break;\n      int t=0,j=i,sum=0;\n      while(j>=0&&c[i]%c[j]==0)j--;\n      if(j<0)continue;\n      t=(c[i]/c[j]+1)*c[j];\n      int k=n-1;\n      while(t)sum+=t/c[k],t%=c[k--];\n      if(c[i]/c[j]+1 <sum)ans=2;\n    }\n    cout << \"Case #\"<<q++<<\": \"<<str[ans]<<endl;\n  }\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#define INF (1e9)\n#define J 2000\n#define N 50\nusing namespace std;\nint main(){\n  int n,c[N],dp[J],dn[J],C=0;\n  while(1){\n    cin>>n;\n    if(!n) break;\n    for(int i=0;i<n;i++) cin>>c[i];\n    for(int i=0;i<J;i++) dp[i]=dn[i]=INF;\n    dp[0]=0;\n    for(int i=0;i<n;i++)\n      for(int j=1;j<J;j++)\n\tif(j>=c[i]) dp[j]=min(dp[j],dp[j-c[i]]+1);\n    reverse(c,c+n);\n    for(int i=0;i<J;i++){\n      int cnt=0,sum=i;\n      for(int j=0;j<n;j++){\n\tcnt+=sum/c[j];\n\tsum%=c[j];\n      }\n      if(sum==0) dn[i]=cnt;\n    }\n    int flag=0;\n    for(int i=1;i<J;i++){\n      if(dp[i]==INF||dn[i]==INF){\n\tflag=1;\n\tbreak;\n      }\n      if(dp[i]!=dn[i]){\n\tflag=2;\n\tbreak;\n      }\n    }\n    C++;\n    cout<<\"Case #\"<<C<<\": \";\n    if(!flag) cout<<\"OK\"<<endl;\n    else if(flag==1) cout<<\"Cannot pay some amount\"<<endl;\n    else cout<<\"Cannot use greedy algorithm\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint n, a[55], dp[50009], greed[50009];\nint main() {\n\tint cnt = 0;\n\twhile (cin >> n, n) {\n\t\tfor (int i = 0; i < n; i++) cin >> a[i];\n\t\tfill(dp + 1, dp + 50001, 999999999);\n\t\tfill(greed + 1, greed + 50001, 999999999);\n\t\tfor (int i = 1; i <= 50000; i++) {\n\t\t\tint ptr = -1;\n\t\t\tfor (int j = 0; j < n && i >= a[j]; j++) {\n\t\t\t\tdp[i] = min(dp[i], dp[i - a[j]] + 1);\n\t\t\t\tptr = j;\n\t\t\t}\n\t\t\tif (ptr != -1) greed[i] = greed[i - a[ptr]] + 1;\n\t\t}\n\t\tbool ret1 = true, ret2 = true;\n\t\tfor (int i = 1; i <= 50000; i++) {\n\t\t\tif (dp[i] == 999999999) ret1 = false;\n\t\t\tif (dp[i] < greed[i]) ret2 = false;\n\t\t}\n\t\tcout << \"Case #\" << ++cnt << \": \";\n\t\tif (!ret1) cout << \"Cannot pay some amount\" << endl;\n\t\telse if (!ret2) cout << \"Cannot use greedy algorithm\" << endl;\n\t\telse cout << \"OK\" << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 1000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n  \n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n    \n    \n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1; \n    }\n    \n    /**/\n    if(n == 1 && c[i-1] == 1){\n      cout << \"Case #\" << k << \": OK\" << endl;\n      k++;\n      continue;\n    }\n    /*Èº©n=1, c=PÌCannot use greedy algorithmÆÈÁÄµÜÁÄ¢½ÌÅãÌæ¤ÉÂ¯½µ½çÊÁ½*/\n    \n    \n    if(flag == 1){ /*ªÈ¢n_Åfâ1~ð¥¦È¢ÌÅ Cannot pay some amount*/\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      \n      //     for(j=1;j<=100;j++){    \n      //    douteki(n);                                                             \n      ///   cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n      //   cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      //   }\n   \n      \n      douteki(n); \n      for(j=1;j<=1000;j++){\n\t  if(greedy(j) > T[j]){\n\t    flag=3;\n\t    break;\n\t  }\n      } \n      \n      \n    }                                                                      \n    if(flag == 0){\n      cout << \"Case #\" << k << \": OK\" << endl;\n      k++;\n    }else{\n      cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n      k++;\n    }\n    \n    \n  }\n  \n  \n}\n\n\n\n\nint greedy(int a){ /*æÃ~@*/\n    int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n      a = a%c[i];\n    }\n  }\n  return ans;\n  \n}\n\n\nvoid douteki(int re){/*®Ivæ@ðp¢½RCÌÅ¬ðßévO*/\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n  for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n  }\n  \n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#define INF (1e9)\n#define J 1950\n#define N 50\nusing namespace std;\nint main(){\n  int n,c[N],dp[J],dn[J],C=0;\n  while(1){\n    cin>>n;\n    if(!n) break;\n    for(int i=0;i<n;i++) cin>>c[i];\n    for(int i=0;i<J;i++) dp[i]=dn[i]=INF;\n    sort(c,c+n);\n    dp[0]=0;\n    for(int i=0;i<n;i++)\n      for(int j=1;j<J;j++)\n\tif(j>=c[i]) dp[j]=min(dp[j],dp[j-c[i]]+1);\n    sort(c,c+n);\n    reverse(c,c+n);\n    for(int i=0;i<J;i++){\n      int cnt=0,sum=i;\n      for(int j=0;j<n;j++){\n\tcnt+=sum/c[j];\n\tsum%=c[j];\n      }\n      if(sum==0) dn[i]=cnt;\n    }\n    int flag=0;\n    for(int i=1;i<J;i++){\n      if(dp[i]==INF||dn[i]==INF){\n\tflag=1;\n\tbreak;\n      }\n      if(dp[i]!=dn[i]){\n\tflag=2;\n\tbreak;\n      }\n    }\n    C++;\n    cout<<\"Case #\"<<C<<\": \";\n    if(!flag) cout<<\"OK\"<<endl;\n    else if(flag==1) cout<<\"Cannot pay some amount\"<<endl;\n    else cout<<\"Cannot use greedy algorithm\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<algorithm>\nusing namespace std;\nint b[60];\nint dp[1010000];\nint main(){\n    int a;\n    int tc=0;\n    while(scanf(\"%d\",&a),a){\n        tc++;\n        for(int i=0;i<a;i++)scanf(\"%d\",b+i);\n        int m=b[a-1]*b[a-1]+100;m=min(m,100000);\n        if(b[0]!=1){\n            printf(\"Case #%d: Cannot pay some amount\\n\",tc);\n            continue;\n        }\n        for(int i=0;i<m;i++)dp[i]=i;\n        for(int i=1;i<a;i++){\n            for(int j=0;j<m-b[i];j++){\n                dp[j+b[i]]=min(dp[j+b[i]],dp[j]+1);\n            }\n        }\n        bool ok=true;\n        for(int i=0;i<m;i++){\n            int s=i;\n            int t=0;\n            for(int j=a-1;j>=0;j--){\n                t+=s/b[j];\n                s%=b[j];\n            }\n            if(t>dp[i]){ok=false;break;}\n        }\n        if(ok)printf(\"Case #%d: OK\\n\",tc);\n        else printf(\"Case #%d: Cannot use greedy algorithm\\n\",tc);\n    }\n}"
  },
  {
    "language": "C++",
    "code": "int n,c[NAX],T[NAX+1];\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(n == 1 && c[i-1] == 1){\n      cout << \"Case #\" << k << \": OK\" << endl;\n      k++;\n      continue;\n    }\n\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      //     for(j=1;j<=100;j++){    \n      //    douteki(n);                                                             \n      ///   cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n      //   cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      // \t}\n   \n      \n      douteki(n); \n      for(j=1;j<=100000;j++){\n\tif(greedy(j) > T[j]){\n\t  flag=3;\n\t  break;\n\t}\n      } \n\n\n    }                                                                      \n    /* \n     for(i=1;i<n;i++){\n        if(c[i]%c[i-1] != 0)flag = 2;\n      }\n*/\n      if(flag == 0){\n        cout << \"Case #\" << k << \": OK\" << endl;\n   k++;\n      }else{\n        cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n        k++;\n        }\n\n\n    }\n\n\n}\n\n\n\n\nint greedy(int a){\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n   a = a%c[i];\n    }\n  }\n  return ans;\n\n}\n\n\nvoid douteki(int re){\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#define INF (1e9)\n#define J 1100\n#define N 50\nusing namespace std;\nint main(){\n  int n,c[N],dp[J],dn[J],C=0;\n  while(1){\n    cin>>n;\n    if(!n) break;\n    for(int i=0;i<n;i++) cin>>c[i];\n    for(int i=0;i<J;i++) dp[i]=dn[i]=INF;\n    sort(c,c+n);\n    dp[0]=0;\n    for(int i=0;i<n;i++)\n      for(int j=1;j<J;j++)\n\tif(j>=c[i]) dp[j]=min(dp[j],dp[j-c[i]]+1);\n    sort(c,c+n);\n    reverse(c,c+n);\n    for(int i=0;i<J;i++){\n      int cnt=0,sum=i;\n      for(int j=0;j<n;j++){\n\tcnt+=sum/c[j];\n\tsum%=c[j];\n      }\n      if(sum==0) dn[i]=cnt;\n    }\n    int flag=0;\n    for(int i=1;i<J;i++){\n      if(dp[i]==INF||dn[i]==INF){\n\tflag=1;\n\tbreak;\n      }\n      if(dp[i]!=dn[i]){\n\tflag=2;\n\tbreak;\n      }\n    }\n    C++;\n    cout<<\"Case #\"<<C<<\": \";\n    if(!flag) cout<<\"OK\"<<endl;\n    else if(flag==1) cout<<\"Cannot pay some amount\"<<endl;\n    else cout<<\"Cannot use greedy algorithm\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\nusing namespace std;\nint n, c[100], d, dp[50001], s;\nvoid solve() {\n\tif (c[0] != 1) { cout << \"Cannot pay some amount\" << endl; return; }\n\tfor (int i = 0; i <= s; i++)dp[i] = 9999999; dp[0] = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j <= s - c[i]; j++) {\n\t\t\tdp[j + c[i]] = min(dp[j + c[i]], dp[j] + 1);\n\t\t}\n\t}\n\tfor (int i = 1; i <= s; i++) {\n\t\tint t = 0, r = i;\n\t\tfor (int j = n - 1; j >= 0; j--) {\n\t\t\tt += r / c[j]; r %= c[j];\n\t\t}\n\t\tif (dp[i] < t) { cout << \"Cannot use greedy algorithm\" << endl; return; }\n\t}\n\tcout << \"OK\" << endl;\n}\nint main() {\n\twhile (true) {\n\t\tcin >> n; if (n == 0)break; s = 0; d++; cout << \"Case #\" << d << \": \";\n\t\tfor (int i = 0; i < n; i++) { cin >> c[i]; s += c[i]; }\n\t\tsolve();\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <map>\n#include <vector>\n#include <iostream>\n#include <sstream>\n#include <cstdio>\n#include <cstring>\n#include <cctype>\n#include <cstdlib>\n#include <cmath>\n#include <string>\n#include <queue>\n#include <stack>\n#include <set>\n#include <numeric>\n#include <limits>\nusing namespace std;\n\n#define all(c) ((c).begin()), ((c).end())\n#define dump(c) cerr << \"> \" << #c << \" = \" << (c) << endl;\n#define iter(c) __typeof((c).begin())\n#define tr(i, c) for (iter(c) i = (c).begin(); i != (c).end(); i++)\n#define REP(i, a, b) for (int i = a; i < (int)(b); i++)\n#define rep(i, n) REP(i, 0, n)\n#define mp make_pair\n#define fst first\n#define snd second\n#define pb push_back\n \ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<double> vd;\ntypedef vector<vd> vvd;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\n\nconst int INF = 1<<29;\nconst double EPS = 1e-10;\ndouble zero(double d){\n  return d < EPS ? 0.0 : d;\n}\n\ntemplate<typename T1,typename T2>\nostream& operator<<(ostream& os,const pair<T1,T2>& p){\n    return os<<'('<<p.first<<','<<p.second<<')';\n}\ntemplate<typename T>\nostream& operator<<(ostream& os,const vector<T>& a){\n    os<<'[';\n    rep(i,a.size()) os<<(i?\" \":\"\")<<a[i];\n    return os<<']';\n}\n\nconst int M = 1000000007;\n\n// a^k\nll fpow(ll a, ll k){\n  ll res = 1ll;\n  ll x = a;\n  while( k!=0 ){\n    if((k&1) == 1)\n      res = res*x;\n    x = x*x;\n    k >>= 1;\n  }\n  return res;\n}\n\n\nint main()\n{\n  cout.setf(ios::fixed, ios::floatfield);\n  cout.precision(8);\n  ios_base::sync_with_stdio(false);\n\n  const int MAX_VALUE=1000;//50*999;\n\n  int n;\n  int tcase=0;\n  while(cin>>n, n){\n    tcase++;\n    int c[n];\n    rep(i,n)\n      cin>>c[i];\n    if(c[0]!=1){\n      cout << \"Case #\"<<tcase<<\": \"<< \"Cannot pay some amount\" << endl;\n      continue;\n    }\n\n    bool gfail=false;\n    REP(value,1,MAX_VALUE){\n\n      // greedy\n      int nowi=n-1;\n      rep(i,n){\n        if(c[i]>=value){\n          nowi=i;\n          break;\n        }\n      }\n\n      int gnum=INF;\n      int tv = value;\n      for(int i=0; ;){\n        if(nowi<0)\n          break;\n        if(tv==0)\n          gnum=i;\n        if(tv<c[nowi])\n          nowi--;\n        else{\n          tv -= c[nowi];\n          i++;\n        }\n      }\n      \n      if(gnum==INF){\n        gfail=true;\n        break;\n      }\n\n      // dp\n      const int DP_LOOP=51;\n      int dp[DP_LOOP][value+1];\n      rep(i,DP_LOOP)\n        fill( dp[i], dp[i]+value+1, INF );\n      dp[0][0]=0;\n      REP(i,1,DP_LOOP){\n        rep(j,value+1){\n          if(dp[i-1][j]!=INF){\n            int prev = dp[i-1][j];\n            dp[i][j] = min(dp[i][j], dp[i-1][j]);\n            rep(k,n){\n              if(j+c[k]<=value)\n                dp[i][j+c[k]]=min(dp[i][j+c[k]], prev+1);\n            }\n          }\n        }\n      }\n\n//      cout << \":\" << value << endl;\n      int dpres=dp[DP_LOOP-1][value];\n/*      rep(j,value+1)\n        cout << dp[DP_LOOP-1][j] << \" \";\n      cout << endl;\n\n      cout << gnum << \" \" << dpres << endl;\n*/\n      \n      if(gnum>dpres){\n        gfail=true;\n        break;\n      }\n    }\n\n    if(gfail==true){\n      cout << \"Case #\"<<tcase<<\": \"<< \"Cannot use greedy algorithm\"\n           << endl;\n      continue;     \n    }\n    else\n      cout << \"Case #\"<<tcase<<\": \"<< \"OK\"  << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <map>\n#include <climits>\nusing namespace std;\n\ntypedef pair<int,int> P;\n\nint n, ans;\nint t[1002];\nvector<P> g[1002];\nmap<string,int> name;\nbool used[1002], loop[1002];\n\nint getId(string s){\n  if(name.find(s) != name.end()){\n    return name[s];\n  }\n  int size = name.size();\n  return name[s] = size;\n}\n\nvoid solve(){\n  memset(used, 0, sizeof(used));\n\n  for(int i = 0; i < n; i++){\n    if(used[i]) continue;\n\n    memset(loop, 0, sizeof(loop));\n\n    int id = i;\n    bool flg = true;\n\n    while(!loop[id]){\n      if(used[id]){\n\tflg = false;\n\tbreak;\n      }\n\n      loop[id] = true;\n      used[id] = true;\n      id = g[id][0].first;\n    }\n    if(!flg) continue;\n\n    int start = id;\n    int minId = start;\n\n    id = g[start][0].first;\n\n    while(id != start){\n      if(t[minId] - g[minId][0].second > t[id] - g[id][0].second){\n\tminId = id;\n      }\n      id = g[id][0].first;\n    }\n\n    ans += t[minId] - g[minId][0].second;\n  }\n\n  cout << ans << endl;\n}\n\nint main(){\n  while(cin >> n, n){\n    ans = 0;\n    name.clear();\n\n    for(int i = 0; i < 1002; i++){\n      g[i].clear();\n    }\n\n    for(int i = 0; i < n; i++){\n      string FROM, TO;\n      int a, b;\n      cin >> FROM >> a >> TO >> b;\n\n      int from = getId(FROM);\n      int to = getId(TO);\n      t[from] = a;\n      g[from].push_back(P(to, b));\n      ans += b;\n    }\n\n    solve();\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#define INF (1e9)\n#define N c[n-1]*2\nusing namespace std;\nint main(){\n  int n,c[50],k=0;\n  while(cin>>n&&n){\n    k++;\n    for(int i=0;i<n;i++)cin>>c[i];\n    cout<<\"Case #\"<<k<<\": \";\n    if(c[0]==1){\n      int dp[2001]={};\n      for(int i=1;i<=N;i++)dp[i]=INF;\n      for(int i=0;i<n;i++)\n\tfor(int j=c[i];j<=N;j++)\n\t  dp[j]=min(dp[j],dp[j-c[i]]+1);\n      int f=0;\n      for(int i=1;i<=N;i++){\n\tint a=0,s=i;\n\tfor(int j=n-1;s!=0;j--){\n\t  a+=s/c[j];\n\t  s%=c[j];\n\t}\n\tif(a!=dp[i]){f=1;break;}\n      }\n      if(f)cout<<\"Cannot use greedy algorithm\"<<endl;\n      else cout<<\"OK\"<<endl;\n    }\n    \n    else cout<<\"Cannot pay some amount\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\nint dp[50000];\nint coins[51];\nint n;\n\nint greedy(int k) {\n    int c = 0;\n    for(int i=n-1; i>=0; --i) {\n        c += k/coins[i];\n        k %= coins[i];\n    }\n    return c;\n}\n\nint main() {\n    int tc=1;\n    while(cin>>n, n) {\n        for(int i=0; i<n; ++i) cin>>coins[i];\n        if(coins[0] != 1) {\n            cout<<\"Case #\"<<tc++<<\": Cannot pay some amount\"<<endl;\n            continue;\n        }\n\n        memset(dp, 0x3f, sizeof(dp));\n        dp[0] = 0;\n        for(int i=0; i<n; ++i) {\n            for(int j=0; j<50000-coins[i]; ++j) {\n                dp[j+coins[i]] = min(dp[j]+1,dp[j+coins[i]]);\n            }\n        }\n\n        for(int i=0; i<50000; ++i) {\n            if(dp[i] < greedy(i)) {\n                cout<<\"Case #\"<<tc++<<\": Cannot use greedy algorithm\"<<endl;\n                goto NEXT;\n            }\n        }\n\n        cout<<\"Case #\"<<tc++<<\": OK\"<<endl;\n    NEXT:;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <climits>\nusing namespace std;\n\nint n;\nint t[52];\nint dp[100000];\n\nint greedy(int x){\n  int res = 0;\n\n  for(int i = n - 1; i >= 0; i--){\n    int div = x / t[i];\n    res += div;\n    x -= div * t[i];\n  }\n\n  return res;\n}\n\nvoid solve(){\n  fill(dp, dp + 100000, INT_MAX);\n  dp[0] = 0;\n\n  for(int i = 0; i < 100000; i++){\n    if(dp[i] == INT_MAX){\n      cout << \"Cannot pay some amount\" << endl;\n      return;\n    }\n    if(dp[i] != greedy(i)){\n      cout << \"Cannot use greedy algorithm\" << endl;\n      return;\n    }\n\n    for(int j = 0; j < n; j++){\n      if(i + t[j] < 100000){\n        dp[i + t[j]] = min(dp[i + t[j]], dp[i] + 1);\n      }\n    }\n  }\n\n  cout << \"OK\" << endl;\n}\n\nint main(){\n  for(int SET = 1; cin >> n, n; SET++){\n    cout << \"Case #\" << SET << \": \";\n\n    for(int i = 0; i < n; i++){\n      cin >> t[i];\n    }\n    solve();\n  }\n}"
  },
  {
    "language": "C++",
    "code": "\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 100000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n  \n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n    \n    \n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1; \n    }\n    \n    /**/\n    if(n == 1 && c[i-1] == 1){\n      cout << \"Case #\" << k << \": OK\" << endl;\n      k++;\n      continue;\n    }\n    /*Èº©n=1, c=PÌCannot use greedy algorithmÆÈÁÄµÜÁÄ¢½ÌÅãÌæ¤ÉÂ¯½µ½çÊÁ½*/\n    \n    \n    if(flag == 1){ /*ªÈ¢n_Åfâ1~ð¥¦È¢ÌÅ Cannot pay some amount*/\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      \n      //     for(j=1;j<=100;j++){    \n      //    douteki(n);                                                             \n      ///   cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n      //   cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      //   }\n   \n      \n      douteki(n); \n      for(j=1;j<=100000;j++){\n\t  if(greedy(j) > T[j]){\n\t    flag=3;\n\t    break;\n\t  }\n      } \n      \n      \n    }                                                                      \n    if(flag == 0){\n      cout << \"Case #\" << k << \": OK\" << endl;\n      k++;\n    }else{\n      cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n      k++;\n    }\n    \n    \n  }\n  \n  \n}\n\n\n\n\nint greedy(int a){ /*æÃ~@*/\n    int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n      a = a%c[i];\n    }\n  }\n  return ans;\n  \n}\n\n\nvoid douteki(int re){/*®Ivæ@ðp¢½RCÌÅ¬ðßévO*/\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n  for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n  }\n  \n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n\n\nusing namespace std;\n\nbool cangGreedy(int c[1001]){\n\tint len=c.size();\n\n\tfor(int i=len-1;i>0;i--){\n\t\tfor(int j=i-1;j>=0;j--){\n\t\t\tif(c[i]%c[j]!=0)return false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\nint main(){\n\tint c[1001];\n\tint Time=0;\n\twhwile(1){\n\t\tTime++;\n\t\tcin>>n;\n\t\tif(n==0)return 0;\n\n\t\tfor(int i=0;i<n;i++){\n\t\t\tcin>>c[i];\n\t\t}\n\n\t\tcout<<\"Case #\"<<Time<<\": \";\n\t\tif(cantGreedy(c)){\n\t\t\tcout<<\"Cannot use greedy algorithm\"<<endl;\n\t\t}\n\t\telse if(c[0]!=0){\n\t\t\tcout<<\"Cannot pay some amount\"<<endl;\n\t\t}\n\t\telse{\n\t\t\tcout<<\"OK\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 500000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      //  for(j=1;j<=100;j++){    \n      ///  douteki(n);                                                             \n      // cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n      //  cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      //}\n   \n         \n      douteki(n);\n      for(j=1;j<=500000;j++){\n\tif(greedy(j) != T[j]){\n\t  flag=3;\n\t  break;\n\t}\n      } \n      \n    }                                                                      \n    /* \n     for(i=1;i<n;i++){\n        if(c[i]%c[i-1] != 0)flag = 2;\n      }\n    */\n    if(flag == 0){\n      cout << \"Case #\" << k << \": OK\" << endl;\n      k++;\n    }else{\n      cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n      k++;\n    }\n\n  }\n\n return 0;\n}\n\n\n\n\nint greedy(int a){\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n      a = a%c[i];\n    }\n  }\n  return ans;\n\n}\n\n\nvoid douteki(int re){\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n  for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nint main(){\n  for(int n,t;cin>>n,n;t++){\n    static int dp[1000001];\n    fill(begin(dp),end(dp),1<<29);\n    dp[0]=0;\n    static int u[1000001];\n    bool o=false;\n    while(n--){\n      int c;\n      cin>>c;\n      o|=c==1;\n      for(int i=c;i<=1000000;i++){\n\tdp[i]=min(dp[i],dp[i-c]+1);\n\tu[i]=c;\n      }\n    }\n    bool f=false;\n    for(int i=1;i<=1000000;i++){\n      f|=dp[i]!=dp[i-u[i]]+1;\n    }\n    cout<<\"Case #\"<<t<<\": \"<<(!o?\"Cannot pay some amount\":\n\t\t\t      f?\"Cannot use greedy algorithm\":\n\t\t\t      \"OK\")<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n  int q=1;\n  string str[]={\"OK\",\"Cannot pay some amount\",\"Cannot use greedy algorithm\"};\n  while(1){\n    int n;\n    cin >> n;\n    if(n==0) break;\n    int ans =0,c[51];\n    for(int i=0;i<n;i++)cin >> c[i];\n    if(c[0] !=1) ans=1;\n    for(int i=2;i<n;i++){\n      if(ans!=0) break;\n      int t=0,j=i,sum=0;\n      while(j>=0&&c[i]%c[j]==0)j--;\n      if(j<0)continue;\n      t=(c[i]/c[j]+1)*c[j];\n      int k=n-1;\n      while(t)sum+=t/c[k],t%=c[k--];\n      if(c[i]/c[j]+1 <sum)ans=2;\n    }\n    cout << \"Case #\"<<q++<<\": \"<<str[ans]<<endl;\n  }\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<climits>\n#include<algorithm>\nusing namespace std;\nconst int N=1000000;\nint dp[N],memo[N],n,c[50];\nint F(int x)\n{\n\tif(memo[x]>=0)return memo[x];\n\tint y=upper_bound(c,c+n,x)[-1];\n\treturn memo[x]=1+F(x-y);\n}\nint main()\n{\n\tint i,j,T,m;\n\tfor(T=1;scanf(\"%d\",&n),n;++T)\n\t{\n\t\tfill(memo,memo+N,-1);\n\t\tfill(dp,dp+N,INT_MAX);\n\t\tmemo[0]=dp[0]=0;\n\t\tfor(i=0;i<n;++i)scanf(\"%d\",c+i);\n\t\tm=c[n-1]*c[n-1]+1;\n\t\tprintf(\"Case #1: \",T);\n\t\tif(c[0]-1)puts(\"Cannot pay some amount\");\n\t\telse\n\t\t{\n\t\t\tfor(i=0;i<m;++i)F(i);\n\t\t\tfor(i=0;i<n;++i)\n\t\t\t\tfor(j=0;j<m-c[i];++j)\n\t\t\t\t\tdp[c[i]+j]=min(dp[c[i]+j],dp[j]+1);\n\t\t\tif(equal(memo,memo+m,dp))puts(\"OK\");\n\t\t\telse puts(\"Cannot use greedy algorithm\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<algorithm>\nusing namespace std;\nint b[60];\nint dp[1010000];\nint t[1010000];\nint main(){\n\tint a;\n\tint tc=0;\n\twhile(scanf(\"%d\",&a),a){\n\t\ttc++;\n\t\tfor(int i=0;i<a;i++)scanf(\"%d\",b+i);\n\t\tint m=b[a-1]*b[a-1]+100;\n\t\tif(b[0]!=1){\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",tc);\n\t\t\tcontinue;\n\t\t}\n\t\tbool ok=true;\n\t\tfor(int i=0;i<m;i++){\n\t\t\tint s=i;\n\t\t\tt[i]=0;\n\t\t\tfor(int j=a-1;j>=0;j--){\n\t\t\t\tt[i]+=s/b[j];\n\t\t\t\ts%=b[j];\n\t\t\t}\n\t//\t\tif(t>dp[i]){ok=false;break;}\n\t\t}\n\t\tfor(int i=0;i<m;i++)dp[i]=i;\n\t\tfor(int i=1;i<a;i++){\n\t\t\tfor(int j=0;j<m-b[i];j++){\n\t\t\t\tdp[j+b[i]]=min(dp[j+b[i]],dp[j]+1);\n\t\t\t\tif(t[j+b[i]]>dp[j+b[i]]){ok=false;break;}\n\t\t\t}\n\t\t\tif(!ok)break;\n\t\t}\n\t\tif(ok)printf(\"Case #%d: OK\\n\",tc);\n\t\telse printf(\"Case #%d: Cannot use greedy algorithm\\n\",tc);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\n#define\trep(i,n)\tfor(int i=0;i<(n);i++)\n\nusing namespace std;\n\nconst int INF=1<<29;\n\nint main(){\n\tfor(int n,c[100],T=1;scanf(\"%d\",&n),n;T++){\n\t\trep(i,n)\tscanf(\"%d\",c+i);\n\n\t\tif(c[0]!=1){\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",T);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst int L=2*c[n-1];\n\t\tint dp1[2000];\tdp1[0]=0;\n\t\tfill(dp1+1,dp1+L,INF);\n\t\trep(k,n)for(int p=c[k];p<L;p++)\tdp1[p]=min(dp1[p],dp1[p-c[k]]+1);\n\n\t\tint dp2[2000];\tdp2[0]=0;\n\t\trep(p,L)for(int k=n-1;k>=0;k--){\n\t\t\tif(p-c[k]>=0){\n\t\t\t\tdp2[p]=dp2[p-c[k]]+1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tbool ok=true;\n\t\trep(i,L)if(dp1[i]<dp2[i]){ ok=false; break; }\n\t\tprintf(\"Case #%d: %s\\n\",T,ok?\"OK\":\"Cannot use greedy algorithm\");\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\nint dp[3000];\nint coins[51];\n\nint main() {\n    int n,tc=1;\n    while(cin>>n, n) {\n        for(int i=0; i<n; ++i) cin>>coins[i];\n        if(coins[0] != 1) {\n            cout<<\"Case #\"<<tc++<<\": Cannot pay some amount\"<<endl;\n            continue;\n        }\n\n        memset(dp, 0x3f, sizeof(dp));\n        dp[0] = 0;\n        for(int i=0; i<n; ++i) {\n            for(int j=0; j<3000-coins[i]; ++j) {\n                if(dp[j+coins[i]] > dp[j]+1) {\n                    dp[j+coins[i]] = dp[j]+1;\n                }else{\n                    cout<<\"Case #\"<<tc++<<\": Cannot use greedy algorithm\"<<endl;\n                    goto NEXT;\n                }\n            }\n        }\n\n        cout<<\"Case #\"<<tc++<<\": OK\"<<endl;\n    NEXT:;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\n#define\trep(i,n)\tfor(int i=0;i<(n);i++)\n\nusing namespace std;\n\nconst int INF=1<<29;\n\nint n,c[100];\nint dp1[1000000],dp2[1000000];\n\nint main(){\n\tfor(int T=1;scanf(\"%d\",&n),n;T++){\n\t\trep(i,n)\tscanf(\"%d\",c+i);\n\n\t\tif(c[0]!=1){\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",T);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst int L=10*c[n-1];\n\t\tdp1[0]=0;\n\t\tfill(dp1+1,dp1+L,INF);\n\t\trep(k,n)for(int p=c[k];p<L;p++)\tdp1[p]=min(dp1[p],dp1[p-c[k]]+1);\n\n\t\tdp2[0]=0;\n\t\tfill(dp2+1,dp2+L,INF);\n\t\trep(p,L)for(int k=n-1;k>=0;k--){\n\t\t\tif(p-c[k]>=0){\n\t\t\t\tdp2[p]=dp2[p-c[k]]+1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tbool ok=true;\n\t\trep(i,L)if(dp1[i]<dp2[i]){ ok=false; break; }\n\t\tprintf(\"Case #%d: %s\\n\",T,ok?\"OK\":\"Cannot use greedy algorithm\");\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#define INF (1e9)\nusing namespace std;\nint main(){\n  int n,c[50];\n  while(cin>>n&&n){\n    int dp[1001];\n    for(int i=0;i<n;i++)cin>>c[i];\n    for(int i=1;i<=1000;i++)dp[i]=INF;\n    for(int i=0;i<n;i++)\n      for(int j=c[i];j<=1000;j++)\n\tdp[j]=min(dp[j],dp[j-c[i]]+1);\n    if(c[0]==1){\n      int f=0;\n      for(int i=1;i<=1000;i++){\n\tint s=i,a=0;\n\tfor(int j=n-1;s!=0;j--){\n\t  a+=s/c[j];\n\t  s%=c[j];\n\t}\n\tif(a>dp[i]){f=1;break;}\n      }\n      if(f)cout<<\"Case #3: Cannot use greedy algorithm\"<<endl;\n      else cout<<\"Case #1: OK\"<<endl;\n    }\n    else cout<<\"Case #2: Cannot pay some amount\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<map>\n#include<set>\n#include<queue>\n#include<cstdio>\n#include<climits>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<sstream>\n#include<numeric>\n#include<cassert>\n\n#define f first\n#define s second\n#define mp make_pair\n\n#define REP(i,n) for(int i=0; i<(int)(n); i++)\n#define rep(i,s,n) for(int i=(s); i<(int)(n); i++)\n#define FOR(i,c) for(__typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)\n#define ALL(c) (c).begin(), (c).end()\n#define IN(x,s,g) ((x) >= (s) && (x) < (g))\n#define ISIN(x,y,w,h) (IN((x),0,(w)) && IN((y),0,(h)))\n#define print(x) printf(\"%d\\n\",x)\n\nusing namespace std;\n\ntypedef unsigned int uint;\ntypedef long long ll;\n\nconst int _dx[] = {0,1,0,-1};\nconst int _dy[] = {-1,0,1,0};\n\nint getInt(){\n  int ret = 0,c;\n  c = getchar();\n  while(!isdigit(c)) c = getchar();\n  while(isdigit(c)){\n    ret *= 10;\n    ret += c - '0';\n    c = getchar();\n  }\n  return ret;\n}\n\nint n;\nint c[50];\nint memo[2000+1];\n\nint normal(int money){\n  int ret = 0;\n  for(int i = n - 1; i >= 0; i--){\n    ret += money / c[i];\n    money %= c[i];\n    if(money == 0) break;\n  }\n  return ret;\n}\n\nint main(){\n  int cc = 0;\n  while(n = getInt()){\n    bool pay = true;\n    bool greedy = true;\n\n    printf(\"Case #%d: \",++cc);\n\n    REP(i,n) c[i] = getInt();\n    sort(c, c+n);\n\n    if(c[0] != 1){\n      puts(\"Cannot pay some amount\");\n      continue;\n    }\n\n    int mm = c[n-1] * 2 + 1;\n\n    REP(i,mm) memo[i] = 0;\n    queue<int> q;\n    REP(i,n){ q.push(c[i]); memo[c[i]] = 1; }\n    while(q.size()){\n      int now = q.front(); q.pop();\n      REP(i,n){\n        if(now + c[i] >= mm) break;\n        if(memo[now + c[i]]) continue;\n        memo[now + c[i]] = memo[now] + 1;\n        q.push(now + c[i]);\n      }\n    }\n\n    rep(i,1,mm) if(memo[i] != normal(i)){\n      puts(\"Cannot use greedy algorithm\");\n      goto end;\n    }\n\n    puts(\"OK\");\n  end:;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nint main(){\n  for(int n,t;cin>>n,n;t++){\n    static int dp[1000001];\n    fill(begin(dp),end(dp),1<<29);\n    dp[0]=0;\n    static int u[1000001];\n    bool o=false;\n    while(n--){\n      int c;\n      cin>>c;\n      o|=c==1;\n      for(int i=c;i<=1000000;i++){\n\tdp[i]=min(dp[i],dp[i-c]+1);\n\tu[i]=c;\n      }\n    }\n    bool f=false;\n    for(int i=1;i<=1000000;i++){\n      f|=dp[i]!=dp[i-u[i]]+1;\n    }\n    cout<<\"Case #\"<<t<<\": \"<<(!o?\"Cannot pay some amount\":\n\t\t\t      f?\"Cannot use greedy algorithm\":\n\t\t\t      \"OK\")<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint n;\nint c[100];\n\nint greedy(int x){\n  int res=0;\n  for(int i=n-1;i>=0;i--){\n    res+=x/c[i];\n    x%=c[i];\n  }\n  return res;\n}\n\nint dp[5000];\n\nvoid solve(){\n  if(c[0]!=1){\n    printf(\"Cannot pay some amount\");\n    return;\n  }\n\n  fill( dp, dp+5000, 1e9);\n  dp[0]=0;\n  \n  for(int i=0;i<n;i++){\n    int val=c[i];\n    for(int j=0;j<2000;j++){\n      if(j-val>=0)dp[j]=min(dp[j],dp[j-val]+1);\n    }\n  }\n  \n  for(int num=0;num<2000;num++){\n    int cost=greedy(num);\n    if(cost!=dp[num]){\n      //      cout<<num<<' '<<cost<<' '<<dp[num]<<endl;\n      printf(\"Cannot use greedy algorithm\");\n      return;\n    }\n  }\n\n  for(int j=2000;j<5000;j++){\n\n    for(int i=0;i<n;i++){\n      int val=c[i];      \n      dp[j]=min(dp[j],dp[j-val]+1);\n    }\n    \n    if( dp[j]!=dp[j- c[n-1] ]+1 ){\n      printf(\"Cannot use greedy algorithm\");\n      return;\n    }\n  }\n  printf(\"OK\");\n}\n\nint main(){\n  for(int tc=1;;tc++){\n    scanf(\"%d\",&n);\n    if(n==0)break;\n    for(int i=0;i<n;i++)scanf(\"%d\",&c[i]);\n    printf(\"Case #%d: \",tc);\n    solve();\n    printf(\"\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\t\n#include<map>\n#include<set>\n#include<utility>\n#include<cmath>\n#include<cstring>\n#include<queue>\n#include<cstdio>\n#include<sstream>\n#include<iomanip>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define pb push_back\n#define mp make_pair\n#define all(in) in.begin(),in.end()\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\n//kaewasuretyuui\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<pii> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,pii> pip;\ntypedef vector<pip>vip;\nconst double PI=acos(-1);\nconst double EPS=1e-8;\nconst int inf=1e8;\nint main(){\n\tint n;\n\tint cnt=0;\n\twhile(cin>>n,n){\n\t\tcnt++;\n\t\tcout<<\"Case #\"<<cnt<<\": \";\n\t\tvi in(n);\n\t\trep(i,n)cin>>in[i];\n\t\tif(in[0]!=1){\n\t\t\tcout<<\"Cannot pay some amount\"<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\tint r=(n==1?in[n-1]:in[n-1]+in[n-2])+10;\n\t\tvi dp(r+10,inf);\n\t\tdp[0]=0;\n\t\trep(i,n)rep(j,dp.size())if(dp[j]!=inf){\n\t\t\tif(j+in[i]<dp.size())dp[j+in[i]]=min(dp[j+in[i]],dp[j]+1);\n\t\t}\n\t\tbool h=true;\n\t\trep(i,dp.size()){\n\t\t\tint t=i;\n\t\t\tint co=0;\n\t\t\tfor(int j=n-1;j>=0;j--){\n\t\t\t\twhile(t>=in[j]){\n\t\t\t\t\tco++;\n\t\t\t\t\tt-=in[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(co!=dp[i])h=false;\n\t\t}\n\t\tif(h)cout<<\"OK\"<<endl;\n\t\telse cout<<\"Cannot use greedy algorithm\"<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<cstring>\n#include<cstdlib>\n\nusing namespace std;\n\nbool cangGreedy(int c[1001]){\n\tint len=c.size();\n\n\tfor(int i=len-1;i>0;i--){\n\t\tfor(int j=i-1;j>=0;j--){\n\t\t\tif(c[i]%c[j]!=0)return false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\nint main(){\n\tint c[1001];\n\tint n;\n\tint Time=0;\n\twhile(1){\n\t\tTime++;\n\t\tcin>>n;\n\t\tif(n==0)return 0;\n\n\t\tfor(int i=0;i<n;i++){\n\t\t\tcin>>c[i];\n\t\t}\n\n\t\tcout<<\"Case #\"<<Time<<\": \";\n\t\tif(cantGreedy(c)){\n\t\t\tcout<<\"Cannot use greedy algorithm\"<<endl;\n\t\t}\n\t\telse if(c[0]!=0){\n\t\t\tcout<<\"Cannot pay some amount\"<<endl;\n\t\t}\n\t\telse{\n\t\t\tcout<<\"OK\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 1000000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      //   for(j=1;j<=100000;j++){    \n      // douteki(n);                                                             \n      // cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n       //cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      //\t}\n      \n      douteki(n);\n      for(j=1;j<=1000000;j++){\n\tif(greedy(j) != T[j])flag=3;\n      }\n      \n      \n    }                                                                      \n    /* \n     for(i=1;i<n;i++){\n        if(c[i]%c[i-1] != 0)flag = 2;\n      }\n*/\n      if(flag == 0){\n        cout << \"Case #\" << k << \": OK\" << endl;\n   k++;\n      }else{\n        cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n        k++;\n        }\n\n\n    }\n\n\n}\n\n\n\n\nint greedy(int a){\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n   a = a%c[i];\n    }\n  }\n  return ans;\n\n}\n\n\nvoid douteki(int re){\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n  int q=1;\n  string str[]={\"OK\",\"Cannot pay some amount\",\"Cannot use greedy algorithm\"};\n  while(1){\n    int n;\n    cin >> n;\n    if(n==0) break;\n    int ans =0,c[51];\n    for(int i=0;i<n;i++)cin >> c[i];\n    if(c[0] !=1) ans=1;\n    for(int i=2;i<n;i++){\n      if(ans !=0) break;\n      int t = (c[i]/c[i-1]+1)*c[i-1];\n      int cnt[2]={},j=i;\n      while(t!=0) cnt[0]+=t/c[j],t%=c[j],j--;\n      t=(c[i]/c[i-1]+1)*c[i-1],j=i-1;\n      while(t!=0) cnt[1]+=t/c[j],t%=c[j],j--;\n      if(cnt[0] > cnt[1]) ans=2;\n    }\n\n    cout << \"Case #\"<<q++<<\": \"<<str[ans]<<endl;\n  }\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\n#define REP(i, n) for(int i=0; i<n; ++i)\n#define FOR(i,a,b) for(int i=a; i<b; ++i)\n\n#define INF (1<<24)\n\nint main()\n{\n\tint C=0, N;\n\twhile(scanf(\"%d\", &N), N)\n\t{\n\t\tbool flag=false;\n\t\tint coins[50], dp[52000];\n\t\tREP(i,N) scanf(\"%d\", &coins[i]);\n\t\t\n\t\tREP(i,6000) dp[i]=INF;\n\t\tdp[0]=0;\n\t\t\n\t\tREP(i,N) REP(j,5000)\n\t\t\tif(dp[j] != INF) dp[j+coins[i]] = min(dp[j+coins[i]], dp[j]+1);\n\t\t\t\n\t\tREP(i,5000)\n\t\t{\n\t\t\tint cnt=0,curr=i;\n\t\t\tfor(int i=N-1; i>=0; i--)\n\t\t\t{\n\t\t\t\tif(curr < coins[i]) continue;\n\t\t\t\tcnt+=curr/coins[i];\n\t\t\t\tcurr-=coins[i]*(curr/coins[i]);\n\t\t\t}\n\t\t\t\n\t\t\tif(cnt!=dp[i]) flag=true;\n\t\t\tif(flag) break;\n\t\t}\n\t\t\n\t\tprintf(\"Case #%d: \", ++C);\n\t\tif(coins[0]!=1) puts(\"Cannot pay some amount\");\n\t\telse if(flag) puts(\"Cannot use greedy algorithm\");\n\t\telse puts(\"OK\");\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n\nusing namespace std;\n\nbool cangGreedy(int c[1001]){\n\tint len=c.size();\n\n\tfor(int i=len-1;i>0;i--;){\n\t\tfor(int j=i-1;j>=0;j--){\n\t\t\tif(c[i]%c[j]!=0)return false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\nint main(){\n\tint c[1001];\n\tint Time=0;\n\twhwile(1){\n\t\tTime++;\n\t\tcin>>n;\n\t\tif(n==0)return 0;\n\n\t\tfor(int i=0;i<n;i++){\n\t\t\tcin>>c[i];\n\t\t}\n\n\t\tcout<<\"Case #\"<<Time<<\": \";\n\t\tif(cantGreedy(c)){\n\t\t\tcout<<\"Cannot use greedy algorithm\"<<endl;\n\t\t}\n\t\telse if(c[0]!=0){\n\t\t\tcout<<\"Cannot pay some amount\"<<endl;\n\t\t}\n\t\telse{\n\t\t\tcout<<\"OK\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 1000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1; \n    }\n\n    /**/\n    if(n == 1 && c[i-1] == 1){\n      cout << \"Case #\" << k << \": OK\" << endl;\n      k++;\n      continue;\n    }\n    /*Èº©n=1, c=PÌCannot use greedy algorithmÆÈÁÄµÜÁÄ¢½ÌÅãÌæ¤ÉÂ¯½µ½çÊÁ½*/\n\n\n    if(flag == 1){/*1ªÈ¢n_Åfâ1~ð¥¦È¢ÌÅ Cannot pay some amount*/\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      // ÈºÌRgAEgÍ³µ­æÃ~@Æ®Ivæ@ÅÅ¬ÌRCðßévOª®ìµÄ¢é©ÌmFp\n      //     for(j=1;j<=100;j++){    \n      //    douteki(n);                                                             \n      ///   cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n      //   cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      // \t}\n   \n      \n      douteki(n); @/*100000ñ®Ivæ@ÆæÃ~@ÅRCÌÅ¬ðß ®Ivæ@ < æÃ~@ ÆÈÁ½ç Cannot use greedy algorithm*/\n\t\t    for(j=1;j<=1000;j++){@/*½ª100000ñâçÈ­ÄàÇ¢ÆÍv¤@100ñ*/\n\tif(greedy(j) > T[j]){\n\t  flag=3;\n\t  break;\n\t}\n      } \n\n\n    }                                                                      \n      if(flag == 0){\n        cout << \"Case #\" << k << \": OK\" << endl;\n   k++;\n      }else{\n        cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n        k++;\n        }\n\n\n    }\n\n\n}\n\n\n\n\nint greedy(int a){@/*æÃ~@*/\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n   a = a%c[i];\n    }\n  }\n  return ans;\n\n}\n\n\nvoid douteki(int re){/*®Ivæ@ðp¢½RCÌÅ¬ðßévO*/\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n  int cnt=1;\n  string str[]={\"OK\",\"Cannot pay some amount\",\"Cannot use greedy algorithm\"};\n  while(1){\n    int n;\n    cin >> n;\n    if(n==0) break;\n    int ans =0,c[1001];\n    for(int i=0;i<n;i++){\n      cin >> c[i];\n      if(c[0] != 1) ans = 1;\n      for(int j=0;j<i;j++)\n\tif(ans==0 && c[i]%c[j]!=0) ans= 2;\n    }\n    cout << \"Case #\"<<cnt++<<\": \"<<str[ans]<<endl;\n  }\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//51\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nint main(){\n  int cs=0;\n  for(int n;cin>>n,n;){\n    int c[50];\n    for(int i=0;i<n;i++){\n      cin>>c[i];\n    }\n    cout<<\"Case #\"<<++cs<<\": \";\n    if(c[0]!=1){\n      cout<<\"Cannot pay some amount\"<<endl;\n    }else{\n      static int dp[1000001];\n      fill(dp,dp+1000001,1<<30);\n      dp[0]=0;\n      for(int i=0;i<n;i++){\n\tfor(int j=0;j+c[i]<=1000000;j++){\n\t  dp[j+c[i]]=min(dp[j+c[i]],dp[j]+1);\n\t}\n      }\n      static int gdp[1000001];\n      fill(gdp,gdp+1000001,1<<30);\n      gdp[0]=0;\n      int i;\n      for(i=1;i<1000001;i++){\n\tgdp[i]=gdp[i-upper_bound(c,c+n,i)[-1]]+1;\n\tif(gdp[i]!=dp[i])break;\n      }\n      cout<<((i==1000001)?\"OK\":\"Cannot use greedy algorithm\")<<endl;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <sstream>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <cassert>\n#include <climits>\n#include <queue>\n#include <set>\n#include <map>\n#include <valarray>\n#include <bitset>\n#include <stack>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int INF = 1<<29;\nconst double PI = acos(-1);\nconst double EPS = 1e-8;\n\nconst int MAX = 500000;\nint dp[MAX];\n\nint main() {\n  int n;\n  int N = 0;\n  while(cin>>n, n) {\n    int c[n];\n    REP(i, n) cin >> c[i];\n    sort(c, c+n);\n    printf(\"Case #%d: \", ++N);\n    if (c[0] != 1) {\n      puts(\"Cannot pay some amount\");\n      continue;\n    }\n    REP(i, MAX) dp[i] = INF;\n    dp[0] = 0;\n    REP(i, n) {\n      REP(j, MAX-c[i]) {\n        dp[j+c[i]] = min(dp[j+c[i]], dp[j]+1);\n      }\n    }\n    //REP(i, MAX) cout << dp[i] << \" \";\n    bool dame = 0;\n    REP(i, MAX) {\n      int now = i;\n      int cnt = 0;\n      for (int j=n-1; j>=0; --j) {\n        cnt += now / c[j];\n        now %= c[j];\n      }\n      if (dp[i] != cnt) {\n        dame = 1;\n        break;\n      }\n    }\n    if (!dame) {\n      puts(\"OK\");\n    } else {\n      puts(\"Cannot use greedy algorithm\");\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#define INF (1e9)\n#define J 1002\n#define N 50\nusing namespace std;\nint main(){\n  int n,c[N],dp[J],dn[J],C=0;\n  while(1){\n    cin>>n;\n    if(!n) break;\n    for(int i=0;i<n;i++) cin>>c[i];\n    for(int i=0;i<J;i++) dp[i]=dn[i]=INF;\n    sort(c,c+n);\n    dp[0]=0;\n    for(int i=0;i<n;i++)\n      for(int j=1;j<J;j++)\n\tif(j>=c[i]) dp[j]=min(dp[j],dp[j-c[i]]+1);\n    sort(c,c+n);\n    reverse(c,c+n);\n    for(int i=0;i<J;i++){\n      int cnt=0,sum=i;\n      for(int j=0;j<n;j++){\n\tcnt+=sum/c[j];\n\tsum%=c[j];\n      }\n      if(sum==0) dn[i]=cnt;\n    }\n    int flag=0;\n    for(int i=1;i<J;i++){\n      if(dp[i]==INF||dn[i]==INF){\n\tflag=1;\n\tbreak;\n      }\n      if(dp[i]!=dn[i]){\n\tflag=2;\n\tbreak;\n      }\n    }\n    C++;\n    cout<<\"Case #\"<<C<<\": \";\n    if(!flag) cout<<\"OK\"<<endl;\n    else if(flag==1) cout<<\"Cannot pay some amount\"<<endl;\n    else cout<<\"Cannot use greedy algorithm\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<climits>\n#include<algorithm>\nusing namespace std;\nconst int N=2000;\nint dp[N],memo[N],n,c[50];\nint F(int x)\n{\n\tif(memo[x]>=0)return memo[x];\n\tint y=upper_bound(c,c+n,x)[-1];\n\treturn memo[x]=1+F(x-y);\n}\nint main()\n{\n\tint i,j,T,m;\n\tfor(T=1;scanf(\"%d\",&n),n;++T)\n\t{\n\t\tfill(memo,memo+N,-1);\n\t\tfill(dp,dp+N,INT_MAX);\n\t\tmemo[0]=dp[0]=0;\n\t\tfor(i=0;i<n;++i)scanf(\"%d\",c+i);\n\t\tm=2*c[n-1]+1;\n\t\tprintf(\"Case #1: \",T);\n\t\tif(c[0]-1)puts(\"Cannot pay some amount\");\n\t\telse\n\t\t{\n\t\t\tfor(i=0;i<m;++i)F(i);\n\t\t\tfor(i=0;i<n;++i)\n\t\t\t\tfor(j=0;j<m-c[i];++j)\n\t\t\t\t\tdp[c[i]+j]=min(dp[c[i]+j],dp[j]+1);\n\t\t\tif(equal(memo,memo+m,dp))puts(\"OK\");\n\t\t\telse puts(\"Cannot use greedy algorithm\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 100000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      //   for(j=1;j<=100000;j++){    \n      // douteki(n);                                                             \n      // cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n       //cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      //\t}\n      \n      douteki(n);\n      for(j=1;j<=100000;j++){\n\tif(greedy(j) > T[j])flag=3;\n      }\n      \n      \n    }                                                                      \n      for(i=1;i<n;i++){\n        if(c[i]%c[i-1] != 0)flag = 2;\n      }\n      if(flag == 0){\n        cout << \"Case #\" << k << \": OK\" << endl;\n   k++;\n      }else{\n        cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n        k++;\n        }\n\n\n    }\n\n\n}\n\n\n\n\nint greedy(int a){\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n   a = a%c[i];\n    }\n  }\n  return ans;\n\n}\n\n\nvoid douteki(int re){\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 100000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      //   for(j=1;j<=100000;j++){    \n      // douteki(n);                                                             \n      // cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n       //cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      //\t}\n      \n      douteki(n);\n      for(j=1;j<=100000;j++){\n\tif(greedy(j) != T[j])flag=3;\n      }\n      \n      \n    }                                                                      \n    /* \n     for(i=1;i<n;i++){\n        if(c[i]%c[i-1] != 0)flag = 2;\n      }\n*/\n      if(flag == 0){\n        cout << \"Case #\" << k << \": OK\" << endl;\n   k++;\n      }else{\n        cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n        k++;\n        }\n\n\n    }\n\n\n}\n\n\n\n\nint greedy(int a){\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n   a = a%c[i];\n    }\n  }\n  return ans;\n\n}\n\n\nvoid douteki(int re){\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#define INF (1e9)\n#define N c[n-1]\nusing namespace std;\nint main(){\n  int n,c[50],k=0;\n  while(cin>>n&&n){\n    k++;\n    for(int i=0;i<n;i++)cin>>c[i];\n    cout<<\"Case #\"<<k<<\": \";\n    if(c[0]==1){\n      int dp[2001]={};\n      for(int i=1;i<=N;i++)dp[i]=INF;\n      for(int i=0;i<n;i++)\n\tfor(int j=c[i];j<=N;j++)\n\t  dp[j]=min(dp[j],dp[j-c[i]]+1);\n      int f=0;\n      for(int i=1;i<=N;i++){\n\tint a=0,s=i;\n\tfor(int j=n-1;s!=0;j--){\n\t  a+=s/c[j];\n\t  s%=c[j];\n\t}\n\tif(a!=dp[i]){f=1;break;}\n      }\n      if(f)cout<<\"Cannot use greedy algorithm\"<<endl;\n      else cout<<\"OK\"<<endl;\n    }\n    \n    else cout<<\"Cannot pay some amount\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <list>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <bitset>\n#include <numeric>\n#include <climits>\n#include <cfloat>\nusing namespace std;\n\nconst int INF = INT_MAX / 2;\n\nint main()\n{\n    for(int d=1; ; ++d){\n        int n;\n        cin >> n;\n        if(n == 0)\n            return 0;\n\n        vector<int> c(n);\n        for(int i=0; i<n; ++i)\n            cin >> c[i];\n\n        if(c[0] != 1){\n            cout << \"Case #\" << d << \": Cannot pay some amount\" << endl;\n            continue;\n        }\n\n        vector<int> dp(10000, INF);\n        dp[0] = 0;\n        for(int i=0; i<n; ++i){\n            for(int j=0; j<10000; ++j){\n                int k = j + c[i];\n                if(k < 10000 && dp[j] + 1< dp[k])\n                    dp[k] = dp[j] + 1;\n            }\n        }\n\n        bool ok = true;\n        for(int i=0; i<10000; ++i){\n            int rest = i;\n            int coin = 0;\n            for(int j=n-1; j>=0; --j){\n                coin += rest / c[j];\n                rest %= c[j];\n            }\n            if(coin > dp[i])\n                ok = false;\n        }\n\n        if(ok)\n            cout << \"Case #\" << d << \": OK\" << endl;\n        else\n            cout << \"Case #\" << d << \": Cannot use greedy algorithm\" << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#define INF (1e9)\n#define N c[n-1]*2-2\nusing namespace std;\nint main(){\n  int n,c[50],k=0;\n  while(cin>>n&&n){\n    k++;\n    for(int i=0;i<n;i++)cin>>c[i];\n    cout<<\"Case #\"<<k<<\": \";\n    if(c[0]==1){\n      int dp[2001]={};\n      for(int i=1;i<=N;i++)dp[i]=INF;\n      for(int i=0;i<n;i++)\n\tfor(int j=c[i];j<=N;j++)\n\t  dp[j]=min(dp[j],dp[j-c[i]]+1);\n      int f=0;\n      for(int i=1;i<=N;i++){\n\tint a=0,s=i;\n\tfor(int j=n-1;s!=0;j--){\n\t  a+=s/c[j];\n\t  s%=c[j];\n\t}\n\tif(a!=dp[i]){f=1;break;}\n      }\n      if(f)cout<<\"Cannot use greedy algorithm\"<<endl;\n      else cout<<\"OK\"<<endl;\n    }\n    \n    else cout<<\"Cannot pay some amount\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\n#define\trep(i,n)\tfor(int i=0;i<(n);i++)\n\nusing namespace std;\n\nconst int INF=1<<29;\n\nint n,c[100];\n\nint greedy(int p){\n\tint cnt=0;\n\tfor(int i=n-1;i>=0&&p>0;i--){\n\t\twhile(p>=c[i])\tp-=c[i],cnt++;\n\t}\n\treturn cnt;\n}\n\nint dp1[1000000],dp2[1000000];\n\nint main(){\n\tfor(int T=1;scanf(\"%d\",&n),n;T++){\n\t\trep(i,n)\tscanf(\"%d\",c+i);\n\n\t\tif(c[0]!=1){\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",T);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst int L=c[n-1]*c[n-1];\n\t\tdp1[0]=0;\n\t\tfill(dp1+1,dp1+L,INF);\n\t\trep(k,n)for(int p=c[k];p<L;p++)\tdp1[p]=min(dp1[p],dp1[p-c[k]]+1);\n\n\t\tdp2[0]=0;\n\t\tfill(dp2+1,dp2+L,INF);\n\t\trep(p,L)for(int k=n-1;k>=0;k--){\n\t\t\tif(p-c[k]>=0){\n\t\t\t\tdp2[p]=dp2[p-c[k]]+1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tbool ok=true;\n\t\trep(i,L)if(dp1[i]<dp2[i]){ ok=false; break; }\n\t\tprintf(\"Case #%d: %s\\n\",T,ok?\"OK\":\"Cannot use greedy algorithm\");\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\n#define FOR(i,k,n) for(int i=(k); i<(int)n; ++i)\n#define REP(i,n) FOR(i,0,n)\n#define FORIT(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n\ntemplate<class T> void debug(T begin, T end){ for(T i = begin; i != end; ++i) cout<<*i<<\" \"; cout<<endl; }\n\ntypedef long long ll;\nconst int INF = 100000000;\nconst double EPS = 1e-8;\nconst int MOD = 1000000007;\nint memo[1001] ;\nint rec(vector<int> a, int n){\n  if(~memo[n]) return memo[n];\n  if(n == 0) return 0;\n  sort(a.begin(), a.end());\n  reverse(a.begin(), a.end());\n  REP(i,a.size())if(n - a[i] >= 0) return memo[n] = 1 + rec(a, n-a[i]);\n  return INF;\n}\n  \nstring message(vector<int> a){\n  memset(memo,-1,sizeof(memo));\n  int dp[1001];\n  fill(dp, dp+1001, INF);\n  dp[0] = 0; \n\n  int N = a.size();\n  sort(a.begin(), a.end());\n  if(a[0] > 1) return \"Cannot pay some amount\";\n  REP(i,N)REP(j,1000)if(a[i] + j <= 1000)dp[a[i]+j] = min(dp[a[i]+j], dp[j] + 1);\n  REP(i,1000)if(rec(a, i+1) != dp[i+1]){\n    //printf(\"%d:%d,%d\\n\",i+1,rec(a,i+1), dp[i+1]);\n    return \"Cannot use greedy algorithm\";\n  }\n  return \"OK\";\n}\n\nint main(){\n  int n;\n  int cas = 1;\n  while(cin>>n,n){\n    vector<int> a(n);\n    REP(i,n)cin>>a[i];\n    cout<<\"Case #\"<<cas++<<\": \"<<message(a)<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 100000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      //   for(j=1;j<=100000;j++){    \n      // douteki(n);                                                             \n      // cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n       //cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      //\t}\n      \n      douteki(n);\n      for(j=1;j<=100000;j++){\n\tif(greedy(j) != T[j])flag=3;\n      }\n      \n      \n    }                                                                      \n      for(i=1;i<n;i++){\n        if(c[i]%c[i-1] != 0)flag = 2;\n      }\n      if(flag == 0){\n        cout << \"Case #\" << k << \": OK\" << endl;\n   k++;\n      }else{\n        cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n        k++;\n        }\n\n\n    }\n\n\n}\n\n\n\n\nint greedy(int a){\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n   a = a%c[i];\n    }\n  }\n  return ans;\n\n}\n\n\nvoid douteki(int re){\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 500000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      //   for(j=1;j<=100000;j++){    \n      // douteki(n);                                                             \n      // cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n       //cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      //\t}\n      \n      douteki(n);\n      for(j=1;j<=500000;j++){\n\tif(greedy(j) != T[j])flag=3;\n      }\n      \n      \n    }                                                                      \n    /* \n     for(i=1;i<n;i++){\n        if(c[i]%c[i-1] != 0)flag = 2;\n      }\n*/\n      if(flag == 0){\n        cout << \"Case #\" << k << \": OK\" << endl;\n   k++;\n      }else{\n        cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n        k++;\n        }\n\n\n    }\n\n\n}\n\n\n\n\nint greedy(int a){\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n   a = a%c[i];\n    }\n  }\n  return ans;\n\n}\n\n\nvoid douteki(int re){\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<string>\n#include<cstring>\n#include<cstdlib>\n\nusing namespace std;\n\nbool cantGreedy(vector<int> c){\n\tint len=c.size();\n\n\tfor(int i=len-1;i>0;i--){\n\t\tfor(int j=i-1;j>=0;j--){\n\t\t\tif(c[i]%c[j]!=0)return false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\nint main(){\n\tvector<int> c;\n\tint n;\n\tint Time=0;\n\twhile(1){\n\t\tTime++;\n\t\tcin>>n;\n\t\tif(n==0)return 0;\n\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint tmp;\n\t\t\tcin>>tmp;\n\t\t\tc.push_back(tmp);\n\t\t}\n\n\t\tcout<<\"Case #\"<<Time<<\": \";\n\t\tif(cantGreedy(c)){\n\t\t\tcout<<\"Cannot use greedy algorithm\"<<endl;\n\t\t}\n\t\telse if(c[0]!=1){\n\t\t\tcout<<\"Cannot pay some amount\"<<endl;\n\t\t}\n\t\telse{\n\t\t\tcout<<\"OK\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <list>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <bitset>\n#include <numeric>\n#include <climits>\n#include <cfloat>\nusing namespace std;\n\nint main()\n{\n    for(int d=1; ; ++d){\n        int n;\n        cin >> n;\n        if(n == 0)\n            return 0;\n\n        vector<int> c(n);\n        for(int i=0; i<n; ++i)\n            cin >> c[i];\n\n        if(c[0] != 1){\n            cout << \"Case #\" << d << \": Cannot pay some amount\" << endl;\n            continue;\n        }\n\n        bool ok = true;\n        for(int i=1; i<n; ++i){\n            if(c[i] % c[i-1] != 0)\n                ok = false;\n        }\n        if(ok)\n            cout << \"Case #\" << d << \": OK\" << endl;\n        else\n            cout << \"Case #\" << d << \": Cannot use greedy algorithm\" << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#define INF (1e9)\n#define J 1500\n#define N 50\nusing namespace std;\nint main(){\n  int n,c[N],dp[J],dn[J],C=0;\n  while(1){\n    cin>>n;\n    if(!n) break;\n    for(int i=0;i<n;i++) cin>>c[i];\n    for(int i=0;i<J;i++) dp[i]=dn[i]=INF;\n    sort(c,c+n);\n    dp[0]=0;\n    for(int i=0;i<n;i++)\n      for(int j=1;j<J;j++)\n\tif(j>=c[i]) dp[j]=min(dp[j],dp[j-c[i]]+1);\n    sort(c,c+n);\n    reverse(c,c+n);\n    for(int i=0;i<J;i++){\n      int cnt=0,sum=i;\n      for(int j=0;j<n;j++){\n\tcnt+=sum/c[j];\n\tsum%=c[j];\n      }\n      if(sum==0) dn[i]=cnt;\n    }\n    int flag=0;\n    for(int i=1;i<J;i++){\n      if(dp[i]==INF||dn[i]==INF){\n\tflag=1;\n\tbreak;\n      }\n      if(dp[i]!=dn[i]){\n\tflag=2;\n\tbreak;\n      }\n    }\n    C++;\n    cout<<\"Case #\"<<C<<\": \";\n    if(!flag) cout<<\"OK\"<<endl;\n    else if(flag==1) cout<<\"Cannot pay some amount\"<<endl;\n    else cout<<\"Cannot use greedy algorithm\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nint main(){\n  for(int n,t;cin>>n,n;t++){\n    int dp[2001];\n    fill(begin(dp),end(dp),1<<29);\n    dp[0]=0;\n    int u[2001]={};\n    dp[0]=0;\n    bool o=false;\n    vector<int> cv;\n    while(n--){\n      int c;\n      cin>>c;\n      cv.push_back(c);\n      o|=c==1;\n      for(int i=c;i<=2000;i++){\n\tdp[i]=min(dp[i],dp[i-c]+1);\n\tu[i]=c;\n      }\n    }\n    bool f=false;\n    for(int i=1;i<=2000;i++){\n      for(auto e:cv){\n\tf|=i<=e&&e!=u[i]&&dp[i]-dp[i-e]==1;\n      }\n    }\n    cout<<\"Case #\"<<t<<\": \"<<(!o?\"Cannot pay some amount\":\n\t\t\t      f?\"Cannot use greedy algorithm\":\n\t\t\t      \"OK\")<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <sstream>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <cassert>\n#include <climits>\n#include <queue>\n#include <set>\n#include <map>\n#include <valarray>\n#include <bitset>\n#include <stack>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int INF = 1<<29;\nconst double PI = acos(-1);\nconst double EPS = 1e-8;\n\nconst int MAX = 100;\nint dp[MAX];\n\nint main() {\n  int n;\n  int N = 0;\n  while(cin>>n, n) {\n    int c[n];\n    REP(i, n) cin >> c[i];\n    sort(c, c+n);\n    printf(\"Case #%d: \", ++N);\n    if (c[0] != 1) {\n      puts(\"Cannot pay some amount\");\n      continue;\n    }\n    REP(i, MAX) dp[i] = INF;\n    dp[0] = 0;\n    REP(i, n) {\n      REP(j, MAX-c[i]) {\n        dp[j+c[i]] = min(dp[j+c[i]], dp[j]+1);\n      }\n    }\n    //REP(i, MAX) cout << dp[i] << \" \";\n    bool dame = 0;\n    REP(i, MAX) {\n      int now = i;\n      int cnt = 0;\n      for (int j=n-1; j>=0; --j) {\n        cnt += now / c[j];\n        now %= c[j];\n      }\n      if (dp[i] != cnt) {\n        dame = 1;\n        break;\n      }\n    }\n    if (!dame) {\n      puts(\"OK\");\n    } else {\n      puts(\"Cannot use greedy algorithm\");\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#define INF (1e9)\n#define N c[n-1]*2-1\nusing namespace std;\nint main(){\n  int n,c[50],k=0;\n  while(cin>>n&&n){\n    k++;\n    for(int i=0;i<n;i++)cin>>c[i];\n    cout<<\"Case #\"<<k<<\": \";\n    if(c[0]==1){\n      int dp[2001]={};\n      for(int i=1;i<=N;i++)dp[i]=INF;\n      for(int i=0;i<n;i++)\n\tfor(int j=c[i];j<=N;j++)\n\t  dp[j]=min(dp[j],dp[j-c[i]]+1);\n      int f=0;\n      for(int i=1;i<=N;i++){\n\tint a=0,s=i;\n\tfor(int j=n-1;s!=0;j--){\n\t  a+=s/c[j];\n\t  s%=c[j];\n\t}\n\tif(a!=dp[i]){f=1;break;}\n      }\n      if(f)cout<<\"Cannot use greedy algorithm\"<<endl;\n      else cout<<\"OK\"<<endl;\n    }\n    \n    else cout<<\"Cannot pay some amount\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 150000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      //   for(j=1;j<=100000;j++){    \n      // douteki(n);                                                             \n      // cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n       //cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      //\t}\n      \n      douteki(n);\n      for(j=1;j<=150000;j++){\n\tif(greedy(j) != T[j])flag=3;\n      }\n      \n      \n    }                                                                      \n    /* \n     for(i=1;i<n;i++){\n        if(c[i]%c[i-1] != 0)flag = 2;\n      }\n*/\n      if(flag == 0){\n        cout << \"Case #\" << k << \": OK\" << endl;\n   k++;\n      }else{\n        cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n        k++;\n        }\n\n\n    }\n\n\n}\n\n\n\n\nint greedy(int a){\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n   a = a%c[i];\n    }\n  }\n  return ans;\n\n}\n\n\nvoid douteki(int re){\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<algorithm>\nusing namespace std;\nint b[60];\nint dp[1010000];\nint t[1010000];\nint main(){\n\tint a;\n\tint tc=0;\n\twhile(scanf(\"%d\",&a),a){\n\t\ttc++;\n\t\tfor(int i=0;i<a;i++)scanf(\"%d\",b+i);\n\t\tint m=b[a-1]*b[a-1]+100;\n\t\tm=min(m,100000);\n\t\tif(b[0]!=1){\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",tc);\n\t\t\tcontinue;\n\t\t}\n\t\tbool ok=true;\n\t\tfor(int i=0;i<m;i++){\n\t\t\tint s=i;\n\t\t\tt[i]=0;\n\t\t\tfor(int j=a-1;j>=0;j--){\n\t\t\t\tt[i]+=s/b[j];\n\t\t\t\ts%=b[j];\n\t\t\t}\n\t//\t\tif(t>dp[i]){ok=false;break;}\n\t\t}\n\t\tfor(int i=0;i<m;i++)dp[i]=i;\n\t\tfor(int i=1;i<a;i++){\n\t\t\tfor(int j=0;j<m-b[i];j++){\n\t\t\t\tdp[j+b[i]]=min(dp[j+b[i]],dp[j]+1);\n\t\t\t\tif(t[j+b[i]]>dp[j+b[i]]){ok=false;break;}\n\t\t\t}\n\t\t\tif(!ok)break;\n\t\t}\n\t\tif(ok)printf(\"Case #%d: OK\\n\",tc);\n\t\telse printf(\"Case #%d: Cannot use greedy algorithm\\n\",tc);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 10000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nstatic const int CC[6] = {1,5,10,50,100,500};\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      //  for(j=1;j<=10000;j++){    \n      // douteki(n);                                                             \n      // cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n      // cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      douteki(n);\n      for(j=1;j<=100000;j++){\n\tif(greedy(j) != T[j])flag=3;\n      }\n      \n    }                                                                      \n      for(i=1;i<n;i++){\n        if(c[i]%c[i-1] != 0)flag = 2;\n      }\n      if(flag == 0){\n        cout << \"Case #\" << k << \": OK\" << endl;\n   k++;\n      }else{\n        cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n        k++;\n        }\n\n\n    }\n\n\n}\n\n\n\n\nint greedy(int a){\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n   a = a%c[i];\n    }\n  }\n  return ans;\n\n}\n\n\nvoid douteki(int re){\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<map>\n#include<set>\n#include<queue>\n#include<cstdio>\n#include<climits>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<sstream>\n#include<numeric>\n#include<cassert>\n\n#define f first\n#define s second\n#define mp make_pair\n\n#define REP(i,n) for(int i=0; i<(int)(n); i++)\n#define rep(i,s,n) for(int i=(s); i<(int)(n); i++)\n#define FOR(i,c) for(__typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)\n#define ALL(c) (c).begin(), (c).end()\n#define IN(x,s,g) ((x) >= (s) && (x) < (g))\n#define ISIN(x,y,w,h) (IN((x),0,(w)) && IN((y),0,(h)))\n#define print(x) printf(\"%d\\n\",x)\n\nusing namespace std;\n\ntypedef unsigned int uint;\ntypedef long long ll;\n\nconst int _dx[] = {0,1,0,-1};\nconst int _dy[] = {-1,0,1,0};\n\nint getInt(){\n  int ret = 0,c;\n  c = getchar();\n  while(!isdigit(c)) c = getchar();\n  while(isdigit(c)){\n    ret *= 10;\n    ret += c - '0';\n    c = getchar();\n  }\n  return ret;\n}\n\nint c[50];\nint memo[1000*1000+1];\n\nint main(){\n  int n;\n  int cc = 0;\n  while(n = getInt()){\n    bool pay = true;\n    bool greedy = true;\n\n    printf(\"Case #%d: \",++cc);\n\n    REP(i,n) c[i] = getInt();\n    sort(c, c+n);\n\n    if(c[0] != 1){\n      puts(\"Cannot pay some amount\");\n      continue;\n    }\n\n    int mm = c[n-1] * 2 + 1;\n\n    REP(i,mm) memo[i] = i;\n\n    rep(i,1,n){\n      int coin = c[i];\n      REP(j,mm){\n        if(j + coin >= mm) break;\n        if(memo[j+coin] < memo[j] + 1){\n          //printf(\"memo[%d+%d] < memo[%d] + 1\\n\",j,coin,j);\n          puts(\"Cannot use greedy algorithm\"); goto end;\n        }\n        memo[j+coin] = memo[j] + 1;\n      }\n    }\n\n    puts(\"OK\");\n  end:;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint n;\nint c[100];\n  \nint greedy(int x){\n  int res=0;\n  for(int i=n-1;i>=0;i--){\n    res+=x/c[i];\n    x%=c[i];\n  }\n  return res;\n}\n  \nint dp[5000];\n  \nvoid solve(){\n  if(c[0]!=1){\n    printf(\"Cannot pay some amount\");\n    return;\n  }\n  \n  fill( dp, dp+5000, 1e9);\n  dp[0]=0;\n    \n  for(int i=0;i<n;i++){\n    int val=c[i];\n    for(int j=0;j<2000;j++){\n      if(j-val>=0)dp[j]=min(dp[j],dp[j-val]+1);\n    }\n  }\n    \n  for(int num=0;num<2000;num++){\n    int cost=greedy(num);\n    if(cost!=dp[num]){\n      //      cout<<num<<' '<<cost<<' '<<dp[num]<<endl;\n      printf(\"Cannot use greedy algorithm\");\n      return;\n    }\n  }\n  \n  for(int j=2000;j<5000;j++){\n  \n    for(int i=0;i<n;i++){\n      int val=c[i];      \n      dp[j]=min(dp[j],dp[j-val]+1);\n    }\n      \n    if( dp[j]!=dp[j- c[n-1] ]+1 ){\n      printf(\"Cannot use greedy algorithm\");\n      return;\n    }\n  }\n  printf(\"OK\");\n}\n  \nint main(){\n  for(int tc=1;;tc++){\n    scanf(\"%d\",&n);\n    if(n==0)break;\n    for(int i=0;i<n;i++)scanf(\"%d\",&c[i]);\n    printf(\"Case #%d: \",tc);\n    solve();\n    printf(\"\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#define INF (1e9)\n#define N c[n-1]*2-1\nusing namespace std;\nint main(){\n  int n,c[50],k=0;\n  while(cin>>n&&n){\n    k++;\n    for(int i=0;i<n;i++)cin>>c[i];\n    cout<<\"Case #\"<<k<<\": \";\n    if(c[0]==1){\n      int dp[2001]={};\n      for(int i=1;i<=N;i++)dp[i]=INF;\n      for(int i=0;i<n;i++)\n\tfor(int j=c[i];j<=N;j++)\n\t  dp[j]=min(dp[j],dp[j-c[i]]+1);\n      int f=0;\n      for(int i=1;i<=N;i++){\n\tint a=0,s=i;\n\tfor(int j=n-1;s!=0;j--){\n\t  a+=s/c[j];\n\t  s%=c[j];\n\t}\n\tif(a!=dp[i]){f=1;break;}\n      }\n      if(f)cout<<\"Cannot use greedy algorithm\"<<endl;\n      else cout<<\"OK\"<<endl;\n    }\n    \n    else cout<<\"Cannot pay some amount\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <sstream>\n#include <cmath>\n#include <queue>\n#include <set>\n\n#define rep(i,n) for(int i=0; i<(n); i++)\n\nusing namespace std;\n\nstring solve(int n) {\n    vector<int> c(n);\n    vector<int> dp(2001, 10000);\n    dp[0] = 0;\n    rep(i,n) cin >> c[i];\n    if (c[0] != 1)return \"Cannot pay some amount\";\n    for (int i = 1; i < 2001; i++) {\n        rep(j, n) {\n            int m = i - c[j];\n            if (m < 0)continue;\n            dp[i] = min(dp[i], dp[m] + 1);\n        }\n        int amount = i;\n        int greed = 0;\n        for (int j = n - 1; j >= 0; j--) {\n            while(amount >= c[j]) {\n                amount -= c[j];\n                greed++;\n            }\n        }\n        if (greed != dp[i])return \"Cannot use greedy algorithm\";\n    }\n    return \"OK\";\n}\n\nint main() {\n    int n;\n    int cases = 1;\n    while(cin >> n, n) {\n        cout << \"Case #\" << cases << \": \" << solve(n) << endl;\n        cases++;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\n#define\trep(i,n)\tfor(int i=0;i<(n);i++)\n\nusing namespace std;\n\nconst int INF=1<<29;\n\nint n,c[100];\nint dp1[1000000],dp2[1000000];\n\nint main(){\n\tfor(int T=1;scanf(\"%d\",&n),n;T++){\n\t\trep(i,n)\tscanf(\"%d\",c+i);\n\n\t\tif(c[0]!=1){\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",T);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst int L=100*c[n-1];\n\t\tdp1[0]=0;\n\t\tfill(dp1+1,dp1+L,INF);\n\t\trep(k,n)for(int p=c[k];p<L;p++)\tdp1[p]=min(dp1[p],dp1[p-c[k]]+1);\n\n\t\tdp2[0]=0;\n\t\tfill(dp2+1,dp2+L,INF);\n\t\trep(p,L)for(int k=n-1;k>=0;k--){\n\t\t\tif(p-c[k]>=0){\n\t\t\t\tdp2[p]=dp2[p-c[k]]+1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tbool ok=true;\n\t\trep(i,L)if(dp1[i]<dp2[i]){ ok=false; break; }\n\t\tprintf(\"Case #%d: %s\\n\",T,ok?\"OK\":\"Cannot use greedy algorithm\");\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\nint dp[50000];\nint coins[51];\n\nint main() {\n    int n,tc=1;\n    while(cin>>n, n) {\n        for(int i=0; i<n; ++i) cin>>coins[i];\n        if(coins[0] != 1) {\n            cout<<\"Case #\"<<tc++<<\": Cannot pay some amount\"<<endl;\n            continue;\n        }\n\n        memset(dp, 0x3f, sizeof(dp));\n        dp[0] = 0;\n        for(int i=0; i<n; ++i) {\n            for(int j=0; j<50000-coins[i]; ++j) {\n                if(dp[j+coins[i]] > dp[j]+1) {\n                    dp[j+coins[i]] = dp[j]+1;\n                }else{\n                    cout<<\"Case #\"<<tc++<<\": Cannot use greedy algorithm\"<<endl;\n                    goto NEXT;\n                }\n            }\n        }\n\n        cout<<\"Case #\"<<tc++<<\": OK\"<<endl;\n    NEXT:;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n \nusing namespace std;\n \n#define MAX_N 50\n#define MAX 50001\n#define INF 1e9\nint n, c[MAX_N];\n \nint getNum(){\n    int cost[MAX];\n \n    memset(cost,0,sizeof(cost));\n    cost[0] = 1;\n    for(int i = 0 ; i < n ; i++){\n\tfor(int j = 0 ; j < MAX-c[i] ; j++){\n\t    cost[c[i]+j] += cost[j];\n\t}\n    }\n \n    for(int i = 0 ; i < MAX ; i++){\n\tif(cost[i] == 0){\n\t    return 1;\n\t}\n    }\n \n    fill(cost,cost+MAX,INF);\n    cost[0] = 0;\n    for(int i = 0 ; i < n ; i++){\n\tfor(int j = c[i] ; j < MAX ; j++){\n\t    cost[j] = min(cost[j], cost[j-c[i]]+ 1);\n\t}\n    }\n \n    int s = MAX-1;\n    for(int i = s ; i >= 1 ; i--){\n\tint rem = i, cnt = 0;\n\tfor(int j = n-1 ; j >= 0 ; j--){\n\t    if(rem >= c[j]){\n\t\tcnt += rem / c[j];\n\t\trem %= c[j];\n\t    }\n\t}\n\tif(cost[i] != cnt){\n\t    return 2;\n\t}\n    }\n \n    return 3;\n}\n \nint main(){\n    int Tc = 1;\n \n    while(scanf(\"%d\" ,&n), n){\n\tfor(int i = 0 ; i < n ; i++){\n\t    scanf(\"%d\" , c+i);\n\t}\n\tint num = getNum();\n\tprintf(\"Case #%d: \" ,Tc++);\n\tif(num == 1){\n\t    puts(\"Cannot pay some amount\");\n\t}else if(num == 2){\n\t    puts(\"Cannot use greedy algorithm\");\n\t}else{\n\t    puts(\"OK\");\n\t}\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nint main(){\n  for(int n,t;cin>>n,n;t++){\n    static int dp[2001];\n    fill(begin(dp),end(dp),1<<29);\n    dp[0]=0;\n    static int u[2001];\n    bool o=false;\n    while(n--){\n      int c;\n      cin>>c;\n      o|=c==1;\n      for(int i=c;i<=2000;i++){\n\tdp[i]=min(dp[i],dp[i-c]+1);\n\tu[i]=c;\n      }\n    }\n    bool f=false;\n    for(int i=1;i<=2000;i++){\n      f|=dp[i]!=dp[i-u[i]]+1;\n    }\n    cout<<\"Case #\"<<t<<\": \"<<(!o?\"Cannot pay some amount\":\n\t\t\t      f?\"Cannot use greedy algorithm\":\n\t\t\t      \"OK\")<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\n\n#define MAX_N 50\n#define MAX 50001\n#define INF 1e9\nint n, c[MAX_N];\n\nint getNum(){\n  int cost[MAX];\n\n  memset(cost,0,sizeof(cost));\n  cost[0] = 1;\n  for(int i = 0 ; i < n ; i++){\n    for(int j = 0 ; j < MAX-c[i] ; j++){\n      cost[c[i]+j] += cost[j];\n    }\n  }\n\n  for(int i = 0 ; i < MAX ; i++){\n    if(cost[i] == 0){\n      return 1;\n    }\n  }\n\n  fill(cost,cost+MAX,INF);\n  cost[0] = 0;\n  for(int i = 0 ; i < n ; i++){\n    for(int j = c[i] ; j < MAX ; j++){\n      cost[j] = min(cost[j], cost[j-c[i]]+ 1);\n    }\n  }\n\n  int s = MAX-1;\n  for(int i = s ; i >= 1 ; i--){\n    int rem = i, cnt = 0;\n    for(int j = n-1 ; j >= 0 ; j--){\n      if(rem >= c[j]){\n        cnt += rem / c[j];\n        rem %= c[j];\n      }\n    }\n    if(cost[i] != cnt){\n      return 2;\n    }\n  }\n\n  return 3;\n}\n\nint main(){\n  int Tc = 1;\n\n  while(scanf(\"%d\" ,&n), n){\n    for(int i = 0 ; i < n ; i++){\n      scanf(\"%d\" , c+i);\n    }\n\n    int num = getNum();\n\n    printf(\"Case #%d: \" ,Tc++);\n    if(num == 1){\n      puts(\"Cannot pay some amount\");\n    }else if(num == 2){\n      puts(\"Cannot use greedy algorithm\");\n    }else{\n      puts(\"OK\");\n    }\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\n\nint n;\nint coins[100];\nint dp[51][10001];\nconst int INF=1000000000;\n\nint dfs(int pos,int money){\n\tif(pos==n){\n\t\tif(money==0)return 0;\n\t\treturn INF;\n\t}\n\tif(dp[pos][money]!=-1)return dp[pos][money];\n\tint res=INF;\n\t// ¥¦éÈçÎ¥¤\n\tif(money-coins[pos]>=0){\n\t\tint tmp=dfs(pos,money-coins[pos]);\n\t\tif(tmp!=INF)\n\t\tres=min(res,tmp+1);\n\t}\n\t// ¡ñÍ¥¤àzðÏ¦é¾¯\n\tint tmp=dfs(pos+1,money);\n\tif(tmp!=INF)res=min(res,tmp);\n\treturn dp[pos][money]=res;\n}\n\nint main(){\n\tint cnt=0;\n\twhile(cin>>n&&n){\n\t\tbool con=false;\n\t\tcnt++;\n\t\tcout<<\"Case #\"<<cnt<<\": \";\n\t\tfor(int i=0;i<n;i++)cin>>coins[i];\n\t\tsort(coins,coins+n);\n\t\tmemset(dp,-1,sizeof(dp));\n\t\tfor(int j=1;j<=10000;j++)dfs(0,j);\n\t\tfor(int i=1;i<=10000;i++){\n\t\t\tif(dp[0][i]==INF){\n\t\t\t\tcout<<\"Cannot pay some amount\"<<endl;\n\t\t\t\tcon=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(con)continue;\n\t\t// »ê¼êÌàzðgreedyÅ¥¤\n\t\tfor(int i=1;i<=10000;i++){\n\t\t\tint leftm=i;\n\t\t\tint allc=0;\n\t\t\tfor(int j=n-1;j>=0;j--){\n\t\t\t\tint cnt=leftm/coins[j];\n\t\t\t\tleftm-=cnt*coins[j];\n\t\t\t\tallc+=cnt;\n\t\t\t}\n\t\t\tif(dp[0][i]!=allc){\n\t\t\t\tint a=dp[0][i];\n\t\t\t\tcout<<\"Cannot use greedy algorithm\"<<endl;\n\t\t\t\tcon=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(con)continue;\n\t\tcout<<\"OK\"<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\n#define FOR(i,k,n) for(int i=(k); i<(int)n; ++i)\n#define REP(i,n) FOR(i,0,n)\n#define FORIT(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n\ntemplate<class T> void debug(T begin, T end){ for(T i = begin; i != end; ++i) cout<<*i<<\" \"; cout<<endl; }\n\ntypedef long long ll;\nconst int INF = 100000000;\nconst double EPS = 1e-8;\nconst int MOD = 1000000007;\nint memo[10001] ;\nint rec(vector<int> a, int n){\n  if(~memo[n]) return memo[n];\n  if(n == 0) return 0;\n  sort(a.begin(), a.end());\n  reverse(a.begin(), a.end());\n  REP(i,a.size())if(n - a[i] >= 0) return memo[n] = 1 + rec(a, n-a[i]);\n  return INF;\n}\n  \nstring message(vector<int> a){\n  memset(memo,-1,sizeof(memo));\n  int dp[10001];\n  fill(dp, dp+10001, INF);\n  dp[0] = 0; \n\n  int N = a.size();\n  sort(a.begin(), a.end());\n  if(a[0] > 1) return \"Cannot pay some amount\";\n  REP(i,N)REP(j,10000)if(a[i] + j <= 10000)dp[a[i]+j] = min(dp[a[i]+j], dp[j] + 1);\n  REP(i,10000)if(rec(a, i+1) != dp[i+1]){\n    //printf(\"%d:%d,%d\\n\",i+1,rec(a,i+1), dp[i+1]);\n    return \"Cannot use greedy algorithm\";\n  }\n  return \"OK\";\n}\n\nint main(){\n  int n;\n  int cas = 1;\n  while(cin>>n,n){\n    vector<int> a(n);\n    REP(i,n)cin>>a[i];\n    cout<<\"Case #\"<<cas++<<\": \"<<message(a)<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#define INF (1e9)\n#define J 1999\n#define N 50\nusing namespace std;\nint main(){\n  int n,c[N],dp[J],dn[J],C=0;\n  while(1){\n    cin>>n;\n    if(!n) break;\n    for(int i=0;i<n;i++) cin>>c[i];\n    for(int i=0;i<J;i++) dp[i]=dn[i]=INF;\n    sort(c,c+n);\n    dp[0]=0;\n    for(int i=0;i<n;i++)\n      for(int j=1;j<J;j++)\n\tif(j>=c[i]) dp[j]=min(dp[j],dp[j-c[i]]+1);\n    sort(c,c+n);\n    reverse(c,c+n);\n    for(int i=0;i<J;i++){\n      int cnt=0,sum=i;\n      for(int j=0;j<n;j++){\n\tcnt+=sum/c[j];\n\tsum%=c[j];\n      }\n      if(sum==0) dn[i]=cnt;\n    }\n    int flag=0;\n    for(int i=1;i<J;i++){\n      if(dp[i]==INF||dn[i]==INF){\n\tflag=1;\n\tbreak;\n      }\n      if(dp[i]!=dn[i]){\n\tflag=2;\n\tbreak;\n      }\n    }\n    C++;\n    cout<<\"Case #\"<<C<<\": \";\n    if(!flag) cout<<\"OK\"<<endl;\n    else if(flag==1) cout<<\"Cannot pay some amount\"<<endl;\n    else cout<<\"Cannot use greedy algorithm\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nint main(){\n  for(int n,t;cin>>n,n;t++){\n    int dp[2001];\n    fill(begin(dp),end(dp),1<<29);\n    dp[0]=0;\n    int u[2001]={};\n    dp[0]=0;\n    bool o=false;\n    vector<int> cv;\n    while(n--){\n      int c;\n      cin>>c;\n      cv.push_back(c);\n      o|=c==1;\n      for(int i=c;i<=2000;i++){\n\tdp[i]=min(dp[i],dp[i-c]+1);\n\tu[i]=c;\n      }\n    }\n    bool f=false;\n    for(int i=1;i<=2000;i++){\n      f|=dp[i]-dp[i-u[i]]!=1;\n    }\n    cout<<\"Case #\"<<t<<\": \"<<(!o?\"Cannot pay some amount\":\n\t\t\t      f?\"Cannot use greedy algorithm\":\n\t\t\t      \"OK\")<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#define INF (1e9)\n#define J 2000\n#define N 50\nusing namespace std;\nint main(){\n  int n,c[N],dp[J],dn[J],C=0;\n  while(1){\n    cin>>n;\n    if(!n) break;\n    for(int i=0;i<n;i++) cin>>c[i];\n    for(int i=0;i<J;i++) dp[i]=dn[i]=INF;\n    sort(c,c+n);\n    dp[0]=0;\n    for(int i=0;i<n;i++)\n      for(int j=1;j<J;j++)\n\tif(j>=c[i]) dp[j]=min(dp[j],dp[j-c[i]]+1);\n    sort(c,c+n);\n    reverse(c,c+n);\n    for(int i=0;i<J;i++){\n      int cnt=0,sum=i;\n      for(int j=0;j<n;j++){\n\tcnt+=sum/c[j];\n\tsum%=c[j];\n      }\n      if(sum==0) dn[i]=cnt;\n    }\n    int flag=0;\n    for(int i=1;i<J;i++){\n      if(dp[i]==INF||dn[i]==INF){\n\tflag=1;\n\tbreak;\n      }\n      if(dp[i]!=dn[i]){\n\tflag=2;\n\tbreak;\n      }\n    }\n    C++;\n    cout<<\"Case #\"<<C<<\": \";\n    if(!flag) cout<<\"OK\"<<endl;\n    else if(flag==1) cout<<\"Cannot pay some amount\"<<endl;\n    else cout<<\"Cannot use greedy algorithm\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n\n#define\trep(i,n)\tfor(int i=0;i<(n);i++)\n\nusing namespace std;\n\nint main(){\n\tfor(int n,c[100],T=1;scanf(\"%d\",&n),n;T++){\n\t\trep(i,n)\tscanf(\"%d\",c+i);\n\t\tif(c[0]!=1)\tprintf(\"Case #%d: Cannot pay some amount\\n\",T);\n\t\telse{\n\t\t\tbool ok=true;\n\t\t\trep(i,n-1)if(c[i+1]%c[i]!=0){ ok=false; break; }\n\t\t\tprintf(\"Case #%d: %s\\n\",T,ok?\"OK\":\"Cannot use greedy algorithm\");\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint n;\nint coins[100];\n\nint main(){\n\tint cnt=0;\n\twhile(cin>>n&&n){\n\t\tcnt++;\n\t\tfor(int i=0;i<n;i++)cin>>coins[i];\n\t\tsort(coins,coins+n);\n\t\tbool psa=true;\n\t\tbool uga=true;\n\t\tif(coins[0]!=1)psa=false;\n\t\tif(psa){\n\t\t\tfor(int i=1;i<n;i++){\n\t\t\t\tif(coins[i]%coins[i-1]==0)continue;\n\t\t\t\telse uga=false;\n\t\t\t}\n\t\t}\n\t\tcout<<\"Case #\"<<cnt<<\": \";\n\t\tif(!psa)cout<<\"Cannot pay some amount\"<<endl;\n\t\telse if(!uga)cout<<\"Cannot use greedy algorithm\"<<endl;\n\t\telse cout<<\"OK\"<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "/* 2029 = \n\t1 ツつェツ鳴ウツつ「ツづつォツ閉・ツつヲツづ按つ「 */\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <queue>\n#include <iostream>\n#include <set>\n#include <cstring>\nusing namespace std;\n\ntypedef pair<int,int> NODE;\n#define sum first\n#define depth second\n\nint main(){\n\tint n;\n\tint count=0;\n\tunsigned int memo[50001];\n\twhile(cin >> n, n){\n\t\tcout << \"Case #\" << ++count << \": \";\n\t\tbool cant = true;\n\t\tvector<int> data(n);\n\t\tint maxPrice = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tcin >> data[i];\n\t\t\tmaxPrice += data[i];\n\t\t\tif(data[i]==1)cant=false;\n\t\t}\n\t\tif(cant){\n\t\t\tcout << \"Cannot pay some amount\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tsort(data.begin(),data.end(),greater<int>());\n\n\t\tqueue<NODE> Q;\n\t\tmemset(memo,-1,50001*4);\n\t\tmemo[0] = 0;\n\t\t\n\t\tNODE p = make_pair(0,0);\n\t\tQ.push(p);\n\t\t\n\t\twhile(Q.size()){\n\t\t\tNODE q = Q.front();Q.pop();\n\t\t\t\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tNODE next;\n\t\t\t\tnext.sum = q.sum + data[i];\n\t\t\t\tnext.depth = q.depth + 1;\n\t\t\t\tif(next.sum > 50000)continue;\n\t\t\t\t//if(next.depth >= r )continue;\n\t\t\t\tif((unsigned)next.depth >= memo[next.sum])continue;\n\t\t\t\tQ.push(next);\n\t\t\t\tmemo[next.sum] = next.depth;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(int price=1;price<=maxPrice;price++){\n\t\t\tint t = price,r=0;\n\t\t\tfor(int i=0;i<n;){\n\t\t\t\tif(t >= data[i]){\n\t\t\t\t\tt-=data[i];\n\t\t\t\t\tr++;\n\t\t\t\t}else{\t\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(r>memo[price])cant = true;\n\t\t}\n\t\tcout << (cant?\"Cannot use greedy algorithm\":\"OK\") << endl;\n\t\t\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 100000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      //  for(j=1;j<=100;j++){    \n      ///  douteki(n);                                                             \n      // cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n      //  cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      //}\n   \n         \n      douteki(n);\n      for(j=1;j<=NAX;j++){\n\tif(greedy(j) != T[j]){\n\t  flag=3;\n\t  break;\n\t}\n      } \n      \n    }                                                                      \n    /* \n     for(i=1;i<n;i++){\n        if(c[i]%c[i-1] != 0)flag = 2;\n      }\n    */\n    if(flag == 0){\n      cout << \"Case #\" << k << \": OK\" << endl;\n      k++;\n    }else{\n      cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n      k++;\n    }\n\n  }\n\n return 0;\n}\n\n\n\n\nint greedy(int a){\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n      a = a%c[i];\n    }\n  }\n  return ans;\n\n}\n\n\nvoid douteki(int re){\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n  for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n  }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nint main(){\n  const int N=2000;\n  for(int n,t=1;cin>>n,n;t++){\n    int dp[N+1];\n    fill(begin(dp),end(dp),1<<29);\n    dp[0]=0;\n    int u[N+1]={};\n    bool o=false;\n    while(n--){\n      int c;\n      cin>>c;\n      o|=c==1;\n      for(int i=c;i<=N;i++){\n\tdp[i]=min(dp[i],dp[i-c]+1);\n\tu[i]=c;\n      }\n    }\n    bool f=false;\n    for(int i=1;i<=N;i++){\n      f|=dp[i]-dp[i-u[i]]!=1;\n    }\n    cout<<\"Case #\"<<t<<\": \"<<(!o?\"Cannot pay some amount\":\n\t\t\t      f?\"Cannot use greedy algorithm\":\n\t\t\t      \"OK\")<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n  int q=1;\n  string str[]={\"OK\",\"Cannot pay some amount\",\"Cannot use greedy algorithm\"};\n  while(1){\n    int n;\n    cin >> n;\n    if(n==0) break;\n    int ans =0,c[51];\n    for(int i=0;i<n;i++)cin >> c[i];\n    if(c[0] !=1) ans=1;\n    for(int i=2;i<n;i++){\n      if(ans!=0) break;\n      int t=0,j=i,sum=0;\n      while(j>=0&&c[i]%c[j]==0)j--;\n      if(j<0)continue;\n      t=(c[i]/c[j]+1)*c[j];\n      int k=i;\n      while(t)sum+=t/c[k],t%=c[k--];\n      if(c[i]/c[j]+1 <sum)ans=2;\n\n    }\n\n    cout << \"Case #\"<<q++<<\": \"<<str[ans]<<endl;\n  }\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\n#define\trep(i,n)\tfor(int i=0;i<(n);i++)\n\nusing namespace std;\n\nconst int INF=1<<29;\n\nint n,c[100];\n\nint greedy(int p){\n\tint cnt=0;\n\tfor(int i=n-1;i>=0;i--){\n\t\twhile(p>=c[i])\tp-=c[i],cnt++;\n\t}\n\treturn cnt;\n}\n\nint main(){\n\tfor(int T=1;scanf(\"%d\",&n),n;T++){\n\t\trep(i,n)\tscanf(\"%d\",c+i);\n\n\t\tif(c[0]!=1){\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",T);\n\t\t\tcontinue;\n\t\t}\n\n\t\tint dp[1000];\tdp[0]=0;\n\t\tfill(dp+1,dp+c[n-1],INF);\n\t\trep(k,n)for(int p=c[k];p<c[n-1];p++)\tdp[p]=min(dp[p],dp[p-c[k]]+1);\n\n\t\tbool ok=true;\n\t\trep(i,c[n-1])if(dp[i]<greedy(i)){ ok=false; break; }\n\t\tprintf(\"Case #%d: %s\\n\",T,ok?\"OK\":\"Cannot use greedy algorithm\");\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 10000\nusing namespace std;\nint c[NAX],T[NAX+1];\nstatic const int CC[6] = {1,5,10,50,100,500};\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int n,i,g,j,k,flag=0;\n  \n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n    \n    for(i=0;i<n;i++){\n      cin >> c[i];\n      \n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;  \n      k++;\n    }\n    else{\n          \n\n      //    for(i=0;i<=10000;i++){\n      //douteki(i); \n // cout << \"greedy(\" << i << \") =\" << greedy(i) << endl;\n //    cout << \"douteki() =\"<< T[i] << endl;\n      // }      \n\n      for(i=1;i<n;i++){\n\tif(c[i]%c[i-1] != 0)flag = 2;\n\tif(c[i]/c[1] != 1 )flag = 3;\n      }\n      if(flag == 0){\n\tcout << \"Case #\" << k << \": OK\" << endl;  \n\tk++;\n      }else{\n\t \n\t    \n\tcout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;  \n\tk++;\n\t}\n      \n      \n    } \n    \n  }\n  \n}\n\n\n\nint greedy(int n){\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(n >= CC[i]){\n      ans += n/CC[i];\n      n = n%CC[i];\n    }\n  }\n  return ans;\n  \n}\n\n\nvoid douteki(int re){\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n  for(int i = 0; i < re ; i++){\n    for(int j=CC[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-CC[i]]+1);\n    }\n  }\n  \n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n\n#define\trep(i,n)\tfor(int i=0;i<(n);i++)\n\nusing namespace std;\n\nconst int INF=1<<29;\n\nint main(){\n\tfor(int n,c[100],T=1;scanf(\"%d\",&n),n;T++){\n\t\trep(i,n)\tscanf(\"%d\",c+i);\n\n\t\tif(c[0]!=1){\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",T);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst int L=2*c[n-1];\n\t\tint dp1[2000];\tdp1[0]=0;\n\t\tfill(dp1+1,dp1+L,INF);\n\t\trep(k,n)for(int p=c[k];p<L;p++)\tdp1[p]=min(dp1[p],dp1[p-c[k]]+1);\n\n\t\tint dp2[2000];\tdp2[0]=0;\n\t\tfill(dp2+1,dp2+L,INF);\n\t\trep(p,L)for(int k=n-1;k>=0;k--){\n\t\t\tif(p-c[k]>=0){\n\t\t\t\tdp2[p]=dp2[p-c[k]]+1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tbool ok=true;\n\t\trep(i,L)if(dp1[i]<dp2[i]){ ok=false; break; }\n\t\tprintf(\"Case #%d: %s\\n\",T,ok?\"OK\":\"Cannot use greedy algorithm\");\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#define INF (1e9)\n#define J 2000\n#define N 50\nusing namespace std;\nint main(){\n  int n,c[N],dp[J],dn[J],C=0;\n  while(1){\n    cin>>n;\n    if(!n) break;\n    for(int i=0;i<n;i++) cin>>c[i];\n    for(int i=0;i<J;i++) dp[i]=dn[i]=INF;\n    sort(c,c+n);\n    dp[0]=0;\n    for(int i=0;i<n;i++)\n      for(int j=1;j<J;j++)\n\tif(j>=c[i]) dp[j]=min(dp[j],dp[j-c[i]]+1);\n    sort(c,c+n);\n    reverse(c,c+n);\n    for(int i=0;i<J;i++){\n      int cnt=0,sum=i;\n      for(int j=0;j<n;j++){\n\tcnt+=sum/c[j];\n\tsum%=c[j];\n      }\n      if(sum==0) dn[i]=cnt;\n    }\n    int flag=0;\n    for(int i=1;i<J;i++){\n      if(dp[i]==INF||dn[i]==INF){\n\tflag=1;\n\tbreak;\n      }\n      if(dp[i]!=dn[i]){\n\tflag=2;\n\tbreak;\n      }\n    }\n    C++;\n    cout<<\"Case #\"<<C<<\": \";\n    if(!flag) cout<<\"OK\"<<endl;\n    else if(flag==1) cout<<\"Cannot pay some amount\"<<endl;\n    else cout<<\"Cannot use greedy algorithm\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <sstream>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <cassert>\n#include <climits>\n#include <queue>\n#include <set>\n#include <map>\n#include <valarray>\n#include <bitset>\n#include <stack>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst int INF = 1<<29;\nconst double PI = acos(-1);\nconst double EPS = 1e-8;\n\nconst int MAX = 500000;\nint dp[MAX];\n\nint main() {\n  int n;\n  int N = 0;\n  while(cin>>n, n) {\n    int c[n];\n    int M = 1;\n    REP(i, n) {\n      cin >> c[i];\n      M += c[i];\n    }\n    sort(c, c+n);\n    printf(\"Case #%d: \", ++N);\n    if (c[0] != 1) {\n      puts(\"Cannot pay some amount\");\n      continue;\n    }\n    REP(i, M) dp[i] = INF;\n    dp[0] = 0;\n    REP(i, n) {\n      REP(j, M-c[i]) {\n        dp[j+c[i]] = min(dp[j+c[i]], dp[j]+1);\n      }\n    }\n    //REP(i, MAX) cout << dp[i] << \" \";\n    bool dame = 0;\n    REP(i, M) {\n      int now = i;\n      int cnt = 0;\n      for (int j=n-1; j>=0; --j) {\n        cnt += now / c[j];\n        now %= c[j];\n      }\n      if (dp[i] != cnt) {\n        dame = 1;\n        break;\n      }\n    }\n    if (!dame) {\n      puts(\"OK\");\n    } else {\n      puts(\"Cannot use greedy algorithm\");\n    }\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<algorithm>\nusing namespace std;\nint b[60];\nint dp[1010000];\nint main(){\n\tint a;\n\tint tc=0;\n\twhile(scanf(\"%d\",&a),a){\n\t\ttc++;\n\t\tfor(int i=0;i<a;i++)scanf(\"%d\",b+i);\n\t\tint m=b[a-1]*b[a-1]+100;\n\t\tif(b[0]!=1){\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",tc);\n\t\t\tcontinue;\n\t\t}\n\t\tfor(int i=0;i<m;i++)dp[i]=i;\n\t\tfor(int i=1;i<a;i++){\n\t\t\tfor(int j=0;j<m-b[i];j++){\n\t\t\t\tdp[j+b[i]]=min(dp[j+b[i]],dp[j]+1);\n\t\t\t}\n\t\t}\n\t\tbool ok=true;\n\t\tfor(int i=0;i<m;i++){\n\t\t\tint s=i;\n\t\t\tint t=0;\n\t\t\tfor(int j=a-1;j>=0;j--){\n\t\t\t\tt+=s/b[j];\n\t\t\t\ts%=b[j];\n\t\t\t}\n\t\t\tif(t>dp[i]){ok=false;break;}\n\t\t}\n\t\tif(ok)printf(\"Case #%d: OK\\n\",tc);\n\t\telse printf(\"Case #%d: Cannot use greedy algorithm\\n\",tc);\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 150000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      //   for(j=1;j<=150000;j++){    \n      // douteki(n);                                                             \n      // cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n       //cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      //\t}\n      \n      douteki(n);\n      for(j=1;j<=500000;j++){\n\tif(greedy(j) != T[j])flag=3;\n      }\n      \n      \n    }                                                                      \n    /* \n     for(i=1;i<n;i++){\n        if(c[i]%c[i-1] != 0)flag = 2;\n      }\n*/\n      if(flag == 0){\n        cout << \"Case #\" << k << \": OK\" << endl;\n   k++;\n      }else{\n        cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n        k++;\n        }\n\n\n    }\n\n\n}\n\n\n\n\nint greedy(int a){\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n   a = a%c[i];\n    }\n  }\n  return ans;\n\n}\n\n\nvoid douteki(int re){\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#define INF (1e9)\n#define N c[n-1]*2-1\nusing namespace std;\nint main(){\n  int n,c[50];\n  while(cin>>n&&n){\n    for(int i=0;i<n;i++)cin>>c[i];\n    if(c[0]==1){\n      int dp[2001]={};\n      for(int i=1;i<=N;i++)dp[i]=INF;\n      for(int i=0;i<n;i++)\n\tfor(int j=c[i];j<=N;j++)\n\t  dp[j]=min(dp[j],dp[j-c[i]]+1);\n      int f=0;\n      for(int i=1;i<=N;i++){\n\tint a=0,s=i;\n\tfor(int j=n-1;s!=0;j--){\n\t  a+=s/c[j];\n\t  s%=c[j];\n\t}\n\tif(a!=dp[i]){f=1;break;}\n      }\n      if(f)cout<<\"Case #3: Cannot use greedy algorithm\"<<endl;\n      else cout<<\"Case #1: OK\"<<endl;\n    }\n    \n    else cout<<\"Case #2: Cannot pay some amount\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <list>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <bitset>\n#include <numeric>\n#include <climits>\n#include <cfloat>\nusing namespace std;\n\nconst int INF = INT_MAX / 2;\n\nint main()\n{\n    for(int d=1; ; ++d){\n        int n;\n        cin >> n;\n        if(n == 0)\n            return 0;\n\n        vector<int> c(n);\n        for(int i=0; i<n; ++i)\n            cin >> c[i];\n\n        if(c[0] != 1){\n            cout << \"Case #\" << d << \": Cannot pay some amount\" << endl;\n            continue;\n        }\n\n        vector<int> dp(100000, INF);\n        dp[0] = 0;\n        for(int i=0; i<n; ++i){\n            for(int j=0; j<100000; ++j){\n                int k = j + c[i];\n                if(k < 100000 && dp[j] + 1< dp[k])\n                    dp[k] = dp[j] + 1;\n            }\n        }\n\n        bool ok = true;\n        for(int i=0; i<100000; ++i){\n            int rest = i;\n            int coin = 0;\n            for(int j=n-1; j>=0; --j){\n                coin += rest / c[j];\n                rest %= c[j];\n            }\n            if(coin > dp[i])\n                ok = false;\n        }\n\n        if(ok)\n            cout << \"Case #\" << d << \": OK\" << endl;\n        else\n            cout << \"Case #\" << d << \": Cannot use greedy algorithm\" << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\t\n#include<map>\n#include<set>\n#include<utility>\n#include<cmath>\n#include<cstring>\n#include<queue>\n#include<cstdio>\n#include<sstream>\n#include<iomanip>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define pb push_back\n#define mp make_pair\n#define all(in) in.begin(),in.end()\n#define shosu(x) fixed<<setprecision(x)\nusing namespace std;\n//kaewasuretyuui\ntypedef long long ll;\ntypedef pair<int,int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<pii> vp;\ntypedef vector<vp> vvp;\ntypedef pair<int,pii> pip;\ntypedef vector<pip>vip;\nconst double PI=acos(-1);\nconst double EPS=1e-8;\nconst int inf=1e8;\nint main(){\n\tint n;\n\tint cnt=0;\n\twhile(cin>>n,n){\n\t\tcnt++;\n\t\tcout<<\"Case #\"<<cnt<<\": \";\n\t\tvi in(n);\n\t\trep(i,n)cin>>in[i];\n\t\tif(in[0]!=1){\n\t\t\tcout<<\"Cannot pay some amount\"<<endl;\n\t\t\tcontinue;\n\t\t}\n\t\tint r=in[n-1]+in[n-2];\n\t\tvi dp(r+10,inf);\n\t\tdp[0]=0;\n\t\trep(i,n)rep(j,dp.size())if(dp[j]!=inf){\n\t\t\tif(j+in[i]<dp.size())dp[j+in[i]]=min(dp[j+in[i]],dp[j]+1);\n\t\t}\n\t\tbool h=true;\n\t\trep(i,dp.size()){\n\t\t\tint t=i;\n\t\t\tint co=0;\n\t\t\tfor(int j=n-1;j>=0;j--){\n\t\t\t\twhile(t>=in[j]){\n\t\t\t\t\tco++;\n\t\t\t\t\tt-=in[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(co!=dp[i])h=false;\n\t\t}\n\t\tif(h)cout<<\"OK\"<<endl;\n\t\telse cout<<\"Cannot ues greedy algorithm\"<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define NAX 100000\nusing namespace std;\nint n,c[NAX],T[NAX+1];\nint greedy(int);\nvoid douteki(int);\n\nint main(){\n  int i,g,j,k,flag=0;\n\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(n == 1 && c[i-1] == 1){\n      cout << \"Case #\" << k << \": OK\" << endl;\n      k++;\n      continue;\n    }\n\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;\n      k++;\n      continue;\n    }\n    else{\n      //     for(j=1;j<=100;j++){    \n      //    douteki(n);                                                             \n      ///   cout << \"greedy(\" << j << \") =\" << greedy(j) << endl;                       \n      //   cout << \"douteki(\"<< j << \")=\"<< T[j] << endl;\n      // \t}\n   \n      \n      douteki(n); \n      for(j=1;j<=100000;j++){\n\tif(greedy(j) > T[j]){\n\t  flag=3;\n\t  break;\n\t}\n      } \n\n\n    }                                                                      \n    /* \n     for(i=1;i<n;i++){\n        if(c[i]%c[i-1] != 0)flag = 2;\n      }\n*/\n      if(flag == 0){\n        cout << \"Case #\" << k << \": OK\" << endl;\n   k++;\n      }else{\n        cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;\n        k++;\n        }\n\n\n    }\n\n\n}\n\n\n\n\nint greedy(int a){\n  int ans=0;\n  for(int i = n-1;i>=0;i-- ){\n    if(a >= c[i]){\n      ans += a/c[i];\n   a = a%c[i];\n    }\n  }\n  return ans;\n\n}\n\n\nvoid douteki(int re){\n  for(int j = 0; j <= NAX ; j++)T[j]=10000;\n  T[0] = 0;\n for(int i = 0; i < re ; i++){\n    for(int j=c[i];j<=NAX;j++){\n      T[j]= min(T[j],T[j-c[i]]+1);\n    }\n }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#define NAX 10000\n\nusing namespace std;\n\nint main(){\n  int n,c[NAX],i,j,k,flag=0;\n  k=1;\n  while(1){\n    flag=0;\n    cin >> n;\n    if(n == 0 )break;\n\n    for(i=0;i<n;i++){\n      cin >> c[i];\n      if(i == 0 && c[i] != 1)flag=1;\n    }\n    if(flag == 1){\n      cout << \"Case #\" << k << \": Cannot pay some amount\" << endl;  \n\tk++;\n    }\n    else{\n      for(i=1;i<n;i++){\n\tif(c[i]%c[i-1] != 0)flag = 2;\n      }\n      if(flag == 0){\n\tcout << \"Case #\" << k << \": OK\" << endl;  \n\tk++;\n      }\n      else{  \n      \n      cout << \"Case #\" << k << \": Cannot use greedy algorithm\" << endl;  \n      k++;\n      }\n\n    } \n    \n    \n\n    \n\n\n\n\n\n\n\n  }\n\n\n\n\n\n\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint n;\nint mx;\nint c[100];\n\nint greedy(int x){\n  int res=0;\n  for(int i=n-1;i>=0;i--){\n    res+=x/c[i];\n    x%=c[i];\n  }\n  return res;\n}\n\nint dp[3000];\n\nvoid solve(){\n  if(c[0]!=1){\n    printf(\"Cannnot pay some amount\");\n    return;\n  }\n  \n  mx=c[0];\n  for(int i=1;i<n;i++)mx=max(mx,c[i]);\n\n  fill( dp, dp+3000, 1e9);\n  dp[0]=0;\n  \n  for(int i=0;i<n;i++){\n    int val=c[i];\n    for(int j=0;j<2000;j++){\n      if(j-val>=0)dp[j]=min(dp[j],dp[j-val]+1);\n    }\n  }\n  \n  for(int num=0;num<2000;num++){\n    int cost=greedy(num);\n    if(cost!=dp[num]){\n      //      cout<<num<<' '<<cost<<' '<<dp[num]<<endl;\n      printf(\"Cannot use greedy algorithm\");\n      return;\n    }\n  }\n\n  for(int j=2000;j<3000;j++){\n\n    for(int i=0;i<n;i++){\n      int val=c[i];      \n      dp[j]=min(dp[j],dp[j-val]+1);\n    }\n    if( dp[j]!=dp[j-mx]+1 ){\n      printf(\"Cannot use greedy algorithm\");\n      return;\n    }\n  }\n  printf(\"OK\");\n}\n\nint main(){\n  for(int tc=1;;tc++){\n    scanf(\"%d\",&n);\n    if(n==0)break;\n    for(int i=0;i<n;i++)scanf(\"%d\",&c[i]);\n    printf(\"Case #%d: \",tc);\n    solve();\n    printf(\"\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#define INF (1e9)\n#define J 2001\n#define N 50\nusing namespace std;\nint main(){\n  int n,c[N],dp[J],dn[J],C=0;\n  while(1){\n    cin>>n;\n    if(!n) break;\n    for(int i=0;i<n;i++) cin>>c[i];\n    for(int i=0;i<J;i++) dp[i]=dn[i]=INF;\n    sort(c,c+n);\n    dp[0]=0;\n    for(int i=0;i<n;i++)\n      for(int j=1;j<J;j++)\n\tif(j>=c[i]) dp[j]=min(dp[j],dp[j-c[i]]+1);\n    sort(c,c+n);\n    reverse(c,c+n);\n    for(int i=0;i<J;i++){\n      int cnt=0,sum=i;\n      for(int j=0;j<n;j++){\n\tcnt+=sum/c[j];\n\tsum%=c[j];\n      }\n      if(sum==0) dn[i]=cnt;\n    }\n    int flag=0;\n    for(int i=1;i<J;i++){\n      if(dp[i]==INF||dn[i]==INF){\n\tflag=1;\n\tbreak;\n      }\n      if(dp[i]!=dn[i]){\n\tflag=2;\n\tbreak;\n      }\n    }\n    C++;\n    cout<<\"Case #\"<<C<<\": \";\n    if(!flag) cout<<\"OK\"<<endl;\n    else if(flag==1) cout<<\"Cannot pay some amount\"<<endl;\n    else cout<<\"Cannot use greedy algorithm\"<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint min(int a, int b)\n{\n    if (a > b){\n        return (b);\n    }\n    \n    return (a);\n}\n\nint main(void)\n{\n    char message[3][30] = {\"OK\", \"Cannot pay some amount\", \"Cannot use greedy algorithm\"};\n    int t;\n    int i, j, k;\n    int n, array[50];\n    static int dp[100001], greedy[100001];\n    char f;\n    \n    t = 0;\n    while (1){\n        scanf(\"%d\", &n);\n        \n        if (n == 0){\n            break;\n        }\n        f = 1;\n        for (i = 0; i < n; i++){\n            scanf(\"%d\", &array[i]);\n            if (array[i] == 1){\n                f = 0;\n            }\n        }\n        printf(\"Case #%d: \", ++t);\n        \n        if (f){\n            printf(\"%s\\n\", message[1]);\n            continue;\n        }\n        \n        f = 0;\n        \n        memset(dp, 0, sizeof(dp));\n        for (i = 0; i < n; i++){\n            for (j = 0; j + array[i] <= 100000; j++){\n                if (dp[j + array[i]] == 0){\n                    dp[j + array[i]] = dp[j] + 1;\n                }\n                else {\n                    dp[j + array[i]] = min(dp[j] + 1, dp[j + array[i]]);\n                }\n            }\n        }\n        memset(greedy, 0, sizeof(greedy));\n        for (i = 0; i <= 100000; i++){\n            k = i;\n            for (j = n - 1; j >= 0; j--){\n                greedy[i] += (k / array[j]);\n                k -= array[j] * (k / array[j]);\n            }\n        }\n        for (i = 0; i <= 100000; i++){\n            if (dp[i] != greedy[i]){\n                f = 1;\n                break;\n            }\n        }\n        if (f){\n            printf(\"%s\\n\", message[2]);\n        }\n        else {\n            printf(\"%s\\n\", message[0]);\n        }\n    }\n    \n    return (0);\n}"
  },
  {
    "language": "C",
    "code": "// AOJ 2069: Greedy, Greedy.\n// 2017.11.5 bal4u@uu\n\n#include <stdio.h>\n#include <string.h>\n\nint c[52], n;\nint greedy[2001];\nint dp[2001];\n\nvoid calcGreedy(int lim)\n{\n\tint v, p, i, k;\n\tfor (v = 1; v <= lim; v++) {\n\t\tp = v;\n\t\tfor (i = n - 1; i >= 0; i--) if (c[i] <= p) {\n\t\t\tk = p/c[i];\n\t\t\tgreedy[v] += k;\n\t\t\tp -= c[i]*k;\n\t\t}\n\t}\n}\n\nvoid calcDP(int lim)\n{\n\tint i, j;\n\tmemset(dp, 0, sizeof(dp));\n\tfor (i = 0; i < n; i++) for (j = 0; j + c[i] <= lim; j++) {\n\t\tif (!dp[j+c[i]] || dp[j+c[i]] > dp[j]+1) dp[j+c[i]] = dp[j] + 1;\n\t}\n}\n\nint main()\n{\n\tint cno = 0, i, lim;\n\n\twhile (scanf(\"%d\", &n) && n > 0) {\n\t\tprintf(\"Case #%d: \", ++cno);\n\t\tfor (i = 0; i < n; i++) scanf(\"%d\", c+i);\n\t\tif (c[0] != 1) { puts(\"Cannot pay some amount\"); continue; }\n\t\tif (n == 1) lim = c[0];\n\t\telse lim = c[n-1] + c[n-2];\n\t\tcalcGreedy(lim);\n\t\tcalcDP(lim);\n\t\tfor (i = 1; i <= lim; i++) {\n\t\t\tif (dp[i] != greedy[i]) break;\n\t\t}\n\t\tif (i <= lim) puts(\"Cannot use greedy algorithm\");\n\t\telse puts(\"OK\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void) {\n\tint n;\n\tint c[50];\n\tint i,j;\n\tint case_no=1;\n\twhile(1) {\n\t\tscanf(\"%d\",&n);\n\t\tif(n==0)break;\n\t\tfor(i=0;i<n;i++)scanf(\"%d\",&c[i]);\n\t\tif(c[0]!=1) {\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",case_no);\n\t\t} else {\n\t\t\tfor(i=1;i>0 && i<n;i++) {\n\t\t\t\tfor(j=0;j<i;j++) {\n\t\t\t\t\tif(c[i]%c[j]!=0) {\n\t\t\t\t\t\ti=-1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"Case #%d: %s\\n\",case_no,\n\t\t\t\ti>=n?\"OK\":\"Cannot use greedy algorithm\");\n\t\t}\n\t\tcase_no++;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint min(int a, int b)\n{\n    if (a > b){\n        return (b);\n    }\n    \n    return (a);\n}\n\nint main(void)\n{\n    char message[3][30] = {\"OK\", \"Cannot pay some amount\", \"Cannot use greedy algorithm\"};\n    int t;\n    int i, j, k;\n    int n, array[50];\n    static int dp[10001], greedy[10001];\n    char f;\n    \n    t = 0;\n    while (1){\n        scanf(\"%d\", &n);\n        \n        if (n == 0){\n            break;\n        }\n        f = 1;\n        for (i = 0; i < n; i++){\n            scanf(\"%d\", &array[i]);\n            if (array[i] == 1){\n                f = 0;\n            }\n        }\n        printf(\"Case #%d: \", ++t);\n        \n        if (f){\n            printf(\"%s\\n\", message[1]);\n            continue;\n        }\n        \n        f = 0;\n        \n        memset(dp, 0, sizeof(dp));\n        for (i = 0; i < n; i++){\n            for (j = 0; j + array[i] <= 10000; j++){\n                if (dp[j + array[i]] == 0){\n                    dp[j + array[i]] = dp[j] + 1;\n                }\n                else {\n                    dp[j + array[i]] = min(dp[j] + 1, dp[j + array[i]]);\n                }\n            }\n        }\n        memset(greedy, 0, sizeof(greedy));\n        for (i = 0; i <= 10000; i++){\n            k = i;\n            for (j = n - 1; j >= 0; j--){\n                greedy[i] += (k / array[j]);\n                k -= array[j] * (k / array[j]);\n            }\n        }\n        for (i = 0; i <= 10000; i++){\n            if (dp[i] != greedy[i]){\n                f = 1;\n                break;\n            }\n        }\n        if (f){\n            printf(\"%s\\n\", message[2]);\n        }\n        else {\n            printf(\"%s\\n\", message[0]);\n        }\n    }\n    \n    return (0);\n}"
  },
  {
    "language": "C",
    "code": "// AOJ 2069: Greedy, Greedy.\n// 2017.11.5 bal4u@uu\n\n#include <stdio.h>\n#include <string.h>\n#define TM 0\n#if TM\n#include <time.h>\n#endif\n\nint c[52], n;\nint dp[2001];\n\nint calcGreedy(int lim)\n{\n\tint v, p, i, k, s;\n\tfor (v = lim; v >= 0; v--) {\n\t\tp = v;\n\t\tfor (s = 0, i = n - 1; i >= 0; i--) if (c[i] <= p) {\n\t\t\tk = p/c[i];\n\t\t\ts += k;\n\t\t\tp -= c[i]*k;\n\t\t}\n\t\tif (s != dp[v]) return 0;\n\t}\n\treturn 1;\n}\n\nvoid calcDP(int lim)\n{\n\tint i, j, k;\n\tmemset(dp, 0, sizeof(dp));\n\tfor (i = 0; i < n; i++) for (j = 0; (k = j + c[i]) <= lim; j++) {\n\t\tif (!dp[k] || dp[k] > dp[j] + 1) dp[k] = dp[j] + 1;\n\t}\n}\n\nchar buf[302], *p;\nint getint()\n{\n\tint n = 0;\n\twhile (*p >= '0') n = (n<<3) + (n<<1) + (*p++ & 0xf);\n\treturn n;\n}\n\nint main()\n{\n\tint cno = 0, i, lim;\n#if TM\n\tclock_t start, end;\n\tstart = clock();\n#endif\n\twhile (fgets(p=buf, 300, stdin) && *p != '0') {\n\t\tprintf(\"Case #%d: \", ++cno);\n\t\tn = getint(), p++;\n\t\tc[0] = getint(), p++;\n\t\tif (c[0] != 1) { puts(\"Cannot pay some amount\"); continue; }\n\t\tif (n == 1) { puts(\"OK\"); continue; }\n\t\tfor (i = 1; i < n; i++) c[i] = getint(), p++;\n\t\tlim = c[n-1] + c[n-2];\n\t\tcalcDP(lim);\n\t\tif (calcGreedy(lim)) puts(\"OK\");\n\t\telse puts(\"Cannot use greedy algorithm\");\n\t}\n#if TM\n\tend = clock();\n\tprintf(\"time %lf\\n\", (double)(end-start)/CLOCKS_PER_SEC);\n#endif\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint ans_greedy(const int* c,int pos,int price) {\n\tint answer;\n\tif(price<=0)return 0;\n\tanswer=price/c[pos];\n\tif(pos>0)answer+=ans_greedy(c,pos-1,price%c[pos]);\n\treturn answer;\n}\n\nint main(void) {\n\tint n;\n\tint c[50];\n\tint i;\n\tint case_no=1;\n\twhile(1) {\n\t\tscanf(\"%d\",&n);\n\t\tif(n==0)break;\n\t\tfor(i=0;i<n;i++)scanf(\"%d\",&c[i]);\n\t\tif(c[0]!=1) {\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",case_no);\n\t\t} else {\n\t\t\tfor(i=1;i<n;i++) {\n\t\t\t\tif(c[i-1]>=c[i])return 1;\n\t\t\t\tif(c[i]%c[i-1]!=0) {\n\t\t\t\t\tint bai=c[i]/c[i-1]+1;\n\t\t\t\t\tint greedy=ans_greedy(c,i,c[i-1]*bai);\n\t\t\t\t\tif(greedy>bai)break;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"Case #%d: %s\\n\",case_no,\n\t\t\t\ti>=n?\"OK\":\"Cannot use greedy algorithm\");\n\t\t}\n\t\tcase_no++;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "/*\n  AOJ 2069\n  Title:Greedy Greedy\n  @kankichi573\n*/\n#include <stdio.h>\n#include <string.h>\n#define min(x,y) (((x)<(y))?(x):(y))\nint table[50001];\nchar message[3][30]={\"OK\",\"Cannot pay some amount\",\"Cannot use greedy algorithm\"};\n\nint greedy(int total,int coins[],int n)\n{\n  int i;\n\n  if(total < coins[1])\n    return(total);\n  \n  for(i=n-1;i>=1;i--)\n    {\n      if(coins[i]==total)\n\treturn(1);\n\n      if(coins[i]<total)\n\t{\n\t  return(1+greedy(total-coins[i],coins,n));\n\t}\n    }\n}\nvoid dump_table(int table[],int lim)\n{\n  int i;\n  for(i=0;i<min(lim,50);i++)\n    {\n      printf(\"[%-2d]%d:\",i,table[i]);\n      if((i % 10)==0)\n\t  printf(\"\\n\");\n    }\n  printf(\"\\n\");\n}\ncheck_1(int c[],int n)\n{\n  int i;\n  for(i=1;i<n-1;i++)\n    if(c[i+1] % c[i])\n      return(0);\n  return(1);\n}\n\nmain()\n{\n  int i,j,k,f,g,n,c[50],ret,lim,cnt;\n\n  cnt=0;\n  while(scanf(\"%d\",&n) && n)\n    {\n      cnt++;\n      memset(table,0,sizeof(table));\n      for(i=0;i<n;i++)\n\tscanf(\"%d\",&c[i]);\n      \n      ret=-1;\n      if(n==1)\n\t{\n\t  if(c[0]==1)\n\t    ret=0;\n\t  else\n\t    ret=1;\n\t}\n      else if(c[0]!=1)\n\tret=1;\n      else if(check_1(c,n))\n\tret=0;\n      else\n\t{\n\t  lim = c[n-1]+c[n-2];\n\t  for(i=1;c[n-1]*i<=lim;i++)\n\t    table[c[n-1]*i]=i;\n\t  \n\t  for(i=n-1;i>=0;i--)\n\t    for(j=0;j<=lim;j++)\n\t      {\n\t\tif(table[j]>0||j==0)\n\t\t  {\n\t\t    f=table[j];\n\t\t    for(k=1;(g=(c[i]*k+j))<=lim;k++)\n\t\t      if(table[g]==0 || table[g]>f+k)\n\t\t\ttable[g]=f+k;\n\t\t  }\n\t      }\n\t}\n      //dump_table(table,lim);\n      \n      if(ret==-1)\n\t{\n\t  for(i=1;i<=lim;i++)\n\t    if(table[i]!=greedy(i,c,n))\n\t      {\n\t\t//printf(\"unmatch [%d] %d %d\\n\",i,table[i],greedy(i,c,n));\n\t\tret=2;\n\t\tgoto END;\n\t      }\n\t  ret=0;\n\t}\n    END:\n      printf(\"Case #%d: %s\\n\",cnt,&message[ret][0]);\n      \n    }\n  return(0);\n}"
  },
  {
    "language": "C",
    "code": "// AOJ 2069: Greedy, Greedy.\n// 2017.11.5 bal4u@uu\n\n#include <stdio.h>\n#include <string.h>\n#define TM 0\n#if TM\n#include <time.h>\n#endif\n\nint c[52], n;\nint dp[2001];\n\nchar buf[302], *p;\nint getint()\n{\n\tint n = 0;\n\twhile (*p >= '0') n = (n<<3) + (n<<1) + (*p++ & 0xf);\n\treturn n;\n}\n\nint greedy(int p)\n{\n\tint i, s = 0;\n\n\ti = n; while (i--) {\n\t\tif (p == c[i]) { s++; break; }\n\t\tif (p < c[i]) continue;\n\t\ts += p/c[i];\n\t\tp %= c[i];\n\t}\n\treturn s;\n}\n\nint main()\n{\n\tint cno = 0, i, j, k, lim;\n#if TM\n\tclock_t start, end;\n\tstart = clock();\n#endif\n\twhile (fgets(p=buf, 300, stdin) && *p != '0') {\n\t\tprintf(\"Case #%d: \", ++cno);\n\t\tn = getint(), p++;\n\t\tc[0] = getint(), p++;\n\t\tif (c[0] != 1) { puts(\"Cannot pay some amount\"); continue; }\n\t\tif (n <= 2) { puts(\"OK\"); continue; }\n\t\tfor (i = 1; i < n; i++) c[i] = getint(), p++;\n\t\tlim = c[n-1] + c[n-2];\n\n\t\tmemset(dp, 0x33, sizeof(dp)), dp[0] = 0;\n\t\tfor (i = 1; ; i++) {\n\t\t\tif (i == lim) { puts(\"OK\"); break; }\n\t\t\tfor (j = 0; j < n; j++) {\n\t\t\t\tk = i - c[j];\n\t\t\t\tif (k >= 0 && dp[i] > dp[k]+1) dp[i] = dp[k] + 1;\n\t\t\t}\n\t\t\tif (greedy(i) != dp[i]) { puts(\"Cannot use greedy algorithm\"); break; }\n\t\t}\n\t}\n#if TM\n\tend = clock();\n\tprintf(\"time %lf\\n\", (double)(end-start)/CLOCKS_PER_SEC);\n#endif\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint ans_greedy(const int* c,int pos,int price) {\n\tint answer;\n\tif(price<=0)return 0;\n\tanswer=price/c[pos];\n\tif(pos>0)answer+=ans_greedy(c,pos-1,price%c[pos]);\n\treturn answer;\n}\n\nint main(void) {\n\tint n;\n\tint c[50];\n\tint i;\n\tint case_no=1;\n\twhile(1) {\n\t\tscanf(\"%d\",&n);\n\t\tif(n==0)break;\n\t\tfor(i=0;i<n;i++)scanf(\"%d\",&c[i]);\n\t\tif(c[0]!=1) {\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",case_no);\n\t\t} else {\n\t\t\tfor(i=1;i<n;i++) {\n\t\t\t\tif(c[i]%c[i-1]!=0) {\n\t\t\t\t\tint bai=c[i]/c[i-1]+1;\n\t\t\t\t\tint greedy=ans_greedy(c,i,c[i-1]*bai);\n\t\t\t\t\tif(greedy>bai)break;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"Case #%d: %s\\n\",case_no,\n\t\t\t\ti>=n?\"OK\":\"Cannot use greedy algorithm\");\n\t\t}\n\t\tcase_no++;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint ans_greedy(const int* c,int pos,int price) {\n\tint answer;\n\tif(price<=0)return 0;\n\tanswer=price/c[pos];\n\tif(pos>0)answer+=ans_greedy(c,pos-1,price%c[pos]);\n\treturn answer;\n}\n\nint main(void) {\n\tint n;\n\tint c[50];\n\tint i,j;\n\tint case_no=1;\n\twhile(1) {\n\t\tscanf(\"%d\",&n);\n\t\tif(n==0)break;\n\t\tfor(i=0;i<n;i++)scanf(\"%d\",&c[i]);\n\t\tif(c[0]!=1) {\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",case_no);\n\t\t} else {\n\t\t\tfor(i=1;i>0 && i<n;i++) {\n\t\t\t\tfor(j=0;j<i;j++) {\n\t\t\t\t\tif(c[i]%c[j]!=0) {\n\t\t\t\t\t\tint bai=c[i]/c[j]+1;\n\t\t\t\t\t\tint greedy=ans_greedy(c,i,c[j]*bai);\n\t\t\t\t\t\tif(greedy>bai){i=-1;break;}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"Case #%d: %s\\n\",case_no,\n\t\t\t\ti>=n?\"OK\":\"Cannot use greedy algorithm\");\n\t\t}\n\t\tcase_no++;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(void) {\n\tint n;\n\tint c[50];\n\tint i;\n\tint case_no=1;\n\twhile(1) {\n\t\tscanf(\"%d\",&n);\n\t\tif(n==0)break;\n\t\tfor(i=0;i<n;i++)scanf(\"%d\",&c[i]);\n\t\tif(c[0]!=1) {\n\t\t\tprintf(\"Case #%d: Cannot pay some amount\\n\",case_no);\n\t\t} else {\n\t\t\tfor(i=1;i<n;i++) {\n\t\t\t\tif(c[i]%c[i-1]!=0)break;\n\t\t\t}\n\t\t\tprintf(\"Case #%d: %s\\n\",case_no,\n\t\t\t\ti>=n?\"OK\":\"Cannot use greedy algorithm\");\n\t\t}\n\t\tcase_no++;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "// AOJ 2069: Greedy, Greedy.\n// 2017.11.5 bal4u@uu\n\n#include <stdio.h>\n#include <string.h>\n\nint c[52], n;\nint greedy[10001];\nint dp[10001];\n\nint calcGreedy(int lim)\n{\n\tint v, p, i, k;\n\tmemset(greedy, 0, sizeof(greedy));\n\tfor (v = lim; v >= 1; v--) {\n\t\tp = v;\n\t\tfor (i = n - 1; i >= 0; i--) if (c[i] <= p) {\n\t\t\tk = p/c[i];\n\t\t\tgreedy[v] += k;\n\t\t\tp -= c[i]*k;\n\t\t}\n\t\tif (greedy[v] != dp[v]) return 0;\n\t}\n\treturn 1;\n}\n\nvoid calcDP(int lim)\n{\n\tint i, j, k;\n\tmemset(dp, 0, sizeof(dp));\n\tfor (i = 0; i < n; i++) for (j = 0; (k = j + c[i]) <= lim; j++) {\n\t\tif (!dp[k] || dp[k] > dp[j] + 1) dp[k] = dp[j] + 1;\n\t}\n}\n\nint main()\n{\n\tint cno = 0, i, lim;\n\n\twhile (scanf(\"%d\", &n) && n > 0) {\n\t\tprintf(\"Case #%d: \", ++cno);\n\t\tfor (i = 0; i < n; i++) scanf(\"%d\", c+i);\n\t\tif (c[0] != 1) { puts(\"Cannot pay some amount\"); continue; }\n\t\tif (n == 1) lim = c[0];\n\t\telse lim = c[n-1] + c[n-2];\n\t\tcalcDP(lim);\n\t\tif (calcGreedy(lim)) puts(\"OK\");\n\t\telse puts(\"Cannot use greedy algorithm\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint min(int a, int b)\n{\n    if (a > b){\n        return (b);\n    }\n    \n    return (a);\n}\n\nint main(void)\n{\n    char message[3][30] = {\"OK\", \"Cannot pay some amount\", \"Cannot use greedy algorithm\"};\n    int t;\n    int i, j, k;\n    int n, array[50];\n    static int dp[1001], greedy[1001];\n    char f;\n    \n    t = 0;\n    while (1){\n        scanf(\"%d\", &n);\n        \n        if (n == 0){\n            break;\n        }\n        f = 1;\n        for (i = 0; i < n; i++){\n            scanf(\"%d\", &array[i]);\n            if (array[i] == 1){\n                f = 0;\n            }\n        }\n        printf(\"Case #%d: \", ++t);\n        \n        if (f){\n            printf(\"%s\\n\", message[1]);\n            continue;\n        }\n        \n        f = 0;\n        \n        memset(dp, 0, sizeof(dp));\n        for (i = 0; i < n; i++){\n            for (j = 0; j + array[i] <= 1000; j++){\n                if (dp[j + array[i]] == 0){\n                    dp[j + array[i]] = dp[j] + 1;\n                }\n                else {\n                    dp[j + array[i]] = min(dp[j] + 1, dp[j + array[i]]);\n                }\n            }\n        }\n        memset(greedy, 0, sizeof(greedy));\n        for (i = 0; i <= 1000; i++){\n            k = i;\n            for (j = n - 1; j >= 0; j--){\n                greedy[i] += (k / array[j]);\n                k -= array[j] * (k / array[j]);\n            }\n        }\n        for (i = 0; i <= 1000; i++){\n            if (dp[i] != greedy[i]){\n                f = 1;\n                break;\n            }\n        }\n        if (f){\n            printf(\"%s\\n\", message[2]);\n        }\n        else {\n            printf(\"%s\\n\", message[0]);\n        }\n    }\n    \n    return (0);\n}"
  },
  {
    "language": "C",
    "code": "// AOJ 2069: Greedy, Greedy.\n// 2017.11.5 bal4u@uu\n\n#include <stdio.h>\n#include <string.h>\n#define TM 0\n#if TM\n#include <time.h>\n#endif\n\nint c[52], n;\nint dp[2001];\n\nint calcGreedy(int lim)\n{\n\tint p, i, s;\n\twhile (lim--) {\n\t\tp = lim, s = 0, i = n;\n\t\twhile (i--) {\n\t\t\tif (p == c[i]) { s++; break; }\n\t\t\tif (p < c[i]) continue;\n\t\t\ts += p/c[i];\n\t\t\tp %= c[i];\n\t\t}\n\t\tif (s != dp[lim]) return 0;\n\t}\n\treturn 1;\n}\n\nvoid calcDP(int lim)\n{\n\tint i, j, k;\n\tmemset(dp, 0x33, sizeof(dp)), dp[0] = 0;\n\tfor (i = 0; i < n; i++) for (j = 0; (k = j + c[i]) <= lim; j++) {\n\t\tif (dp[j+c[i]] > dp[j] + 1) dp[j+c[i]] = dp[j] + 1;\n\t}\n}\n\nchar buf[302], *p;\nint getint()\n{\n\tint n = 0;\n\twhile (*p >= '0') n = (n<<3) + (n<<1) + (*p++ & 0xf);\n\treturn n;\n}\n\nint main()\n{\n\tint cno = 0, i, lim;\n#if TM\n\tclock_t start, end;\n\tstart = clock();\n#endif\n\twhile (fgets(p=buf, 300, stdin) && *p != '0') {\n\t\tprintf(\"Case #%d: \", ++cno);\n\t\tn = getint(), p++;\n\t\tc[0] = getint(), p++;\n\t\tif (c[0] != 1) { puts(\"Cannot pay some amount\"); continue; }\n\t\tif (n <= 2) { puts(\"OK\"); continue; }\n\t\tfor (i = 1; i < n; i++) c[i] = getint(), p++;\n\t\tlim = c[n-1] + c[n-2];\n\t\tcalcDP(lim);\n\t\tif (calcGreedy(lim)) puts(\"OK\");\n\t\telse puts(\"Cannot use greedy algorithm\");\n\t}\n#if TM\n\tend = clock();\n\tprintf(\"time %lf\\n\", (double)(end-start)/CLOCKS_PER_SEC);\n#endif\n\treturn 0;\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\n//Greedy, Greedy.\npublic class Main{\n\n\tint n, INF = 1<<29, M = 50000;\n\tint[] c;\n\n\tint f(int x){\n\t\tint res = 0, k = n-1;\n\t\twhile(x>0&&k>=0){\n\t\t\tres += x/c[k];\n\t\t\tx%=c[k--];\n\t\t}\n\t\treturn x==0?res:INF;\n\t}\n\n\tvoid run(){\n\t\tScanner sc = new Scanner(System.in);\n\t\tfor(int T=1;;T++){\n\t\t\tn = sc.nextInt();\n\t\t\tif(n==0)break;\n\t\t\tc = new int[n];\n\t\t\tfor(int i=0;i<n;i++)c[i]=sc.nextInt();\n\t\t\tint[] dp = new int[M];\n\t\t\tArrays.fill(dp, INF);\n\t\t\tdp[0] = 0;\n\t\t\tboolean f1 = true, f2 = true;\n\t\t\tfor(int x=1;x<M&&f1;x++){\n\t\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\t\tif(x-c[i]>=0)dp[x] = Math.min(dp[x], dp[x-c[i]]+1);\n\t\t\t\t}\n\t\t\t\tif(dp[x]==INF)f1 = false;\n\t\t\t\tif(dp[x]<f(x))f2 = false;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\"+T+\": \"+(!f1?\"Cannot pay some amount\":!f2?\"Cannot use greedy algorithm\":\"OK\"));\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.lang.*;\nimport java.math.*;\nimport java.io.*;\nimport static java.lang.Math.*;\nimport static java.util.Arrays.*;\nimport static java.util.Collections.*;\n\npublic class Main{\n\tScanner sc=new Scanner(System.in);\n\n\tint INF=1<<28;\n\tdouble EPS=1e-12;\n\n\tint caze;\n\tint n;\n\tint[] c;\n\n\tvoid run(){\n\t\tfor(caze=1;; caze++){\n\t\t\tn=sc.nextInt();\n\t\t\tif(n==0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tc=new int[n];\n\t\t\tfor(int i=0; i<n; i++){\n\t\t\t\tc[i]=sc.nextInt();\n\t\t\t}\n\t\t\tsolve();\n\t\t}\n\t}\n\n\tvoid solve(){\n\t\tString ans;\n\t\tsort(c);\n\t\tif(c[0]!=1){\n\t\t\tans=\"Cannot pay some amount\";\n\t\t}else{\n\t\t\tint n=c.length;\n\t\t\tfor(int i=0; i<n/2; i++){\n\t\t\t\tint t=c[i];\n\t\t\t\tc[i]=c[n-1-i];\n\t\t\t\tc[n-1-i]=t;\n\t\t\t}\n\n\t\t\tint minW=-1;\n\t\t\tint[] minMw=null;\n\t\t\tfor(int i=1; i<n; i++){\n\t\t\t\tint x=c[i-1]-1;\n\t\t\t\tint[] gi=new int[n];\n\t\t\t\tfor(int k=0; k<n; k++){\n\t\t\t\t\tgi[k]=x/c[k];\n\t\t\t\t\tx%=c[k];\n\t\t\t\t}\n\t\t\t\tfor(int j=i; j<n; j++){\n\t\t\t\t\tint[] mw=new int[n];\n\t\t\t\t\tint mwSum=0;\n\t\t\t\t\tint w=0;\n\t\t\t\t\tfor(int k=0; k<n; k++){\n\t\t\t\t\t\tif(k<j)\n\t\t\t\t\t\t\tmw[k]=gi[k];\n\t\t\t\t\t\telse if(k==j)\n\t\t\t\t\t\t\tmw[k]=gi[k]+1;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tmw[k]=0;\n\t\t\t\t\t\tw+=mw[k]*c[k];\n\t\t\t\t\t\tmwSum+=mw[k];\n\t\t\t\t\t}\n\t\t\t\t\tint[] gw=new int[n];\n\t\t\t\t\tint gwSum=0;\n\t\t\t\t\tint t=w;\n\t\t\t\t\tfor(int k=0; k<n; k++){\n\t\t\t\t\t\tgw[k]=t/c[k];\n\t\t\t\t\t\tt%=c[k];\n\t\t\t\t\t\tgwSum+=gw[k];\n\t\t\t\t\t}\n\t\t\t\t\tif(mwSum<gwSum){\n\t\t\t\t\t\t// debug(\"w\", w, \"mw\", mw, \"gw\", gw);\n\t\t\t\t\t}\n\t\t\t\t\tif(mwSum<gwSum&&(minW==-1||w<minW)){\n\t\t\t\t\t\tminW=w;\n\t\t\t\t\t\tminMw=mw.clone();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(minW>=0){\n\t\t\t\tans=\"Cannot use greedy algorithm\";\n\t\t\t}else{\n\t\t\t\tans=\"OK\";\n\t\t\t}\n\t\t}\n\t\tprintln(\"Case #\"+caze+\": \"+ans);\n\t}\n\n\tvoid debug(Object... os){\n\t\tSystem.err.println(Arrays.deepToString(os));\n\t}\n\n\tvoid print(String s){\n\t\tSystem.out.print(s);\n\t}\n\n\tvoid println(String s){\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic static void main(String[] args){\n\t\t// System.setOut(new PrintStream(new BufferedOutputStream(System.out)));\n\t\tnew Main().run();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\n//Greedy, Greedy.\npublic class Main{\n\n\tint n, INF = 1<<29;\n\tint[] c;\n\n\tint f(int x){\n\t\tint res = 0, k = n-1;\n\t\twhile(x>0&&k>=0){\n\t\t\tres += x/c[k];\n\t\t\tx%=c[k--];\n\t\t}\n\t\treturn x==0?res:INF;\n\t}\n\n\tvoid run(){\n\t\tScanner sc = new Scanner(System.in);\n\t\tfor(int T=1;;T++){\n\t\t\tn = sc.nextInt();\n\t\t\tif(n==0)break;\n\t\t\tc = new int[n];\n\t\t\tint s = 0;\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tc[i]=sc.nextInt(); s+=c[i];\n\t\t\t}\n\t\t\tint[] dp = new int[s+1];\n\t\t\tArrays.fill(dp, INF);\n\t\t\tdp[0] = 0;\n\t\t\tboolean f1 = true, f2 = true;\n\t\t\tfor(int x=1;x<=s&&f1;x++){\n\t\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\t\tif(x-c[i]>=0)dp[x] = Math.min(dp[x], dp[x-c[i]]+1);\n\t\t\t\t}\n\t\t\t\tif(dp[x]==INF)f1 = false;\n\t\t\t\tif(dp[x]<f(x))f2 = false;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\"+T+\": \"+(!f1?\"Cannot pay some amount\":!f2?\"Cannot use greedy algorithm\":\"OK\"));\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\n//Greedy, Greedy.\npublic class Main{\n\n\tint n, INF = 1<<29, M = 100000;\n\tint[] c;\n\n\tint f(int x){\n\t\tint res = 0, k = n-1;\n\t\twhile(x>0&&k>=0){\n\t\t\tres += x/c[k];\n\t\t\tx%=c[k--];\n\t\t}\n\t\treturn x==0?res:INF;\n\t}\n\n\tvoid run(){\n\t\tScanner sc = new Scanner(System.in);\n\t\tfor(int T=1;;T++){\n\t\t\tn = sc.nextInt();\n\t\t\tif(n==0)break;\n\t\t\tc = new int[n];\n\t\t\tfor(int i=0;i<n;i++)c[i]=sc.nextInt();\n\t\t\tint[] dp = new int[M];\n\t\t\tArrays.fill(dp, INF);\n\t\t\tdp[0] = 0;\n\t\t\tboolean f1 = true, f2 = true;\n\t\t\tfor(int x=1;x<M&&f1;x++){\n\t\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\t\tif(x-c[i]>=0)dp[x] = Math.min(dp[x], dp[x-c[i]]+1);\n\t\t\t\t}\n\t\t\t\tif(dp[x]==INF)f1 = false;\n\t\t\t\tif(dp[x]<f(x))f2 = false;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\"+T+\": \"+(!f1?\"Cannot pay some amount\":!f2?\"Cannot use greedy algorithm\":\"OK\"));\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Arrays;\nimport java.util.Scanner;\n\n//Greedy, Greedy.\npublic class Main{\n\n\tint n, INF = 1<<29, M = 50000;\n\tint[] c;\n\n\tint f(int x){\n\t\tint res = 0, k = n-1;\n\t\twhile(x>0&&k>=0){\n\t\t\tres += x/c[k];\n\t\t\tx%=c[k--];\n\t\t}\n\t\treturn x==0?res:INF;\n\t}\n\n\tvoid run(){\n\t\tScanner sc = new Scanner(System.in);\n\t\tfor(int T=1;;T++){\n\t\t\tn = sc.nextInt();\n\t\t\tif(n==0)break;\n\t\t\tc = new int[n];\n\t\t\tint s = 0;\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tc[i]=sc.nextInt(); s+=c[i];\n\t\t\t}\n\t\t\tint[] dp = new int[s+1];\n\t\t\tArrays.fill(dp, INF);\n\t\t\tdp[0] = 0;\n\t\t\tboolean f1 = true, f2 = true;\n\t\t\tfor(int x=1;x<=s&&f1;x++){\n\t\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\t\tif(x-c[i]>=0)dp[x] = Math.min(dp[x], dp[x-c[i]]+1);\n\t\t\t\t}\n\t\t\t\tif(dp[x]==INF)f1 = false;\n\t\t\t\tif(dp[x]<f(x))f2 = false;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\"+T+\": \"+(!f1?\"Cannot pay some amount\":!f2?\"Cannot use greedy algorithm\":\"OK\"));\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n}"
  },
  {
    "language": "Python",
    "code": "def printans(Cnum,ans):\n    print 'Case #'+str(Cnum)+': '+ans\n\nCnum=1\n\nwhile(1):\n    inp=[int(x) for x in raw_input().split()]\n    if inp[0]==0:   break\n    [n,C]=[inp[0],inp[1:]]\n    Amax=C[-1]*n\n    if C[0]!=1:\n        ans='Cannot pay some amount'\n        printans(Cnum,ans)\n        Cnum+=1\n    else:\n        A=[[y for y in range(Amax)] for x in range(n)]\n        for x in range(1,n):\n            esc=0\n            c=C[x]\n            A[x][:c]=A[x-1][:c]\n            for y in range(c,Amax):\n                A[x][y]=y/c + A[x-1][y%c]\n                if A[x-1][y]<A[x][y]:\n                    ans='Cannot use greedy algorithm'\n                    printans(Cnum,ans)\n                    Cnum+=1\n                    esc=1\n                    break\n            if esc==1:\n                break\n        else:\n            ans='OK'\n            printans(Cnum,ans)\n            Cnum+=1\n            esc=1"
  },
  {
    "language": "Python",
    "code": "def printans(Cnum,ans):\n    print 'Case #'+str(Cnum)+': '+ans\n\nCnum=1\n\nwhile(1):\n    inp=[int(x) for x in raw_input().split()]\n    if inp[0]==0:   break\n    [n,C]=[inp[0],inp[1:]]\n    if C[0]!=1:\n        ans='Cannot pay some amount'\n        printans(Cnum,ans)\n        Cnum+=1\n    else:\n        A=[[y for y in range(55000)] for x in range(n)]\n        for x in range(1,n):\n            esc=0\n            c=C[x]\n            for y in range(55000):\n                A[x][y]=y/c + A[x-1][y%c]\n                if A[x-1][y]<A[x][y]:\n                    ans='Cannot use greedy algorithm'\n                    printans(Cnum,ans)\n                    Cnum+=1\n                    esc=1\n                    break\n            if esc==1:\n                break\n        else:\n            ans='OK'\n            printans(Cnum,ans)\n            Cnum+=1\n            esc=1"
  },
  {
    "language": "Python",
    "code": "def printans(Cnum,ans):\n    print 'Case #'+str(Cnum)+': '+ans\n\nCnum=1\n\nwhile(1):\n    inp=[int(x) for x in raw_input().split()]\n    if inp[0]==0:   break\n    [n,C]=[inp[0],inp[1:]]\n    if C[0]!=1:\n        ans='Cannot pay some amount'\n        printans(Cnum,ans)\n        Cnum+=1\n    else:\n        A=[[y for y in range(3000)] for x in range(n)]\n        for x in range(1,n):\n            esc=0\n            c=C[x]\n            for y in range(3000):\n                A[x][y]=y/c + A[x-1][y%c]\n                if A[x-1][y]<A[x][y]:\n                    ans='Cannot use greedy algorithm'\n                    printans(Cnum,ans)\n                    Cnum+=1\n                    esc=1\n                    break\n            if esc==1:\n                break\n        else:\n            ans='OK'\n            printans(Cnum,ans)\n            Cnum+=1\n            esc=1"
  }
]