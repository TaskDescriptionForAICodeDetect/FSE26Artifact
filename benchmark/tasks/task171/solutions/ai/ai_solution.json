[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid zigzagTraversal(int N) {\n    int matrix[N][N];\n    int value = 1;\n    int i = 0, j = 0;\n    int direction = 1; // 1 for up-right, -1 for down-left\n\n    for (int num = 0; num < N * N; ) {\n        while (i >= 0 && j < N) {\n            matrix[i][j] = ++num;\n            i -= direction;\n            j += direction;\n        }\n        if (i < 0 && j < N) {\n            i = 0;\n            direction = -direction;\n        } else if (j >= N) {\n            i += 2;\n            j = N - 1;\n            direction = -direction;\n        } else {\n            j = 0;\n            direction = -direction;\n        }\n    }\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < N; j++) {\n            printf(\"%3d\", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int T;\n    scanf(\"%d\", &T);\n\n    for (int t = 1; t <= T; t++) {\n        int N;\n        scanf(\"%d\", &N);\n\n        printf(\"Test Case #%d:\\n\", t);\n        zigzagTraversal(N);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:54:57"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class ZigZagTraversal {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int T = scanner.nextInt();\n        \n        for (int testCase = 1; testCase <= T; testCase++) {\n            int N = scanner.nextInt();\n            int[][] matrix = new int[][] new int[N][N];\n            int num = 1;\n            boolean goingUp = true;\n            int row = 0, col = 0;\n            \n            while (num <= N * N) {\n                matrix[row][col] = num++;\n                \n                if (goingUp) {\n                    if (col == N - 1) {\n                        row++;\n                        goingUp = false;\n                    } else if (row == 0) {\n                        col++;\n                        goingUp = false;\n                    } else {\n                        row--;\n                        col++;\n                    }\n                } else {\n                    if (row == N - 1) {\n                        col++;\n                        goingUp = true;\n                    } else if (col == 0) {\n                        row++;\n                        goingUp = true;\n                    } else {\n                        row++;\n                        col--;\n                    }\n                }\n            }\n            \n            System.out.printf(\"Test Case #%d:\\n\", testCase);\n            for (int[] r : matrix) {\n                for (int val : r) {\n                    System.out.printf(\"%3d\", val);\n                }\n                System.out.println();\n            }\n        }\n        \n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 18:55:11"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <iomanip>\n\nusing namespace std;\n\nvoid zigzagTraversal(int N) {\n    vector<vector<int>> matrix(N, vector<int>(N, 0));\n    int num = 1;\n    for (int sum = 0; sum <= 2 * (N - 1); ++sum) {\n        if (sum % 2 == 0) {\n            for (int i = min(sum, N - 1); i >= 0; --i) {\n                int j = sum - i;\n                if (j >= 0 && j < N) {\n                    matrix[i][j] = num++;\n                }\n            }\n        } else {\n            for (int j = min(sum, N - 1); j >= 0; --j) {\n                int i = sum - j;\n                if (i >= 0 && i < N) {\n                    matrix[i][j] = num++;\n                }\n            }\n        }\n    }\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            cout << setw(3) << matrix[i][j];\n        }\n        cout << endl;\n    }\n}\n\nint main() {\n    int T;\n    cin >> T;\n    for (int t = 1; t <= T; ++t) {\n        int N;\n        cin >> N;\n        cout << \"Test case #\" << t << \":\" << endl;\n        zigzagTraversal(N);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:55:27"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid zigzagTraversal(int N) {\n    int matrix[N][N];\n    int num = 1;\n    int row = 0, col = 0;\n    int direction = 1;  // 1 for up-right, -1 for down-left\n\n    for (int i = 0; i < N * N; i++) {\n        matrix[row][col] = num++;\n\n        if (direction == 1) {\n            if (col == N - 1) {\n                row++;\n                direction = -1;\n            } else if (row == 0) {\n                col++;\n                direction = -1;\n            } else {\n                row--;\n                col++;\n            }\n        } else {\n            if (row == N - 1) {\n                col++;\n                direction = 1;\n            } else if (col == 0) {\n                row++;\n                direction = 1;\n            } else {\n                row++;\n                col--;\n            }\n        }\n    }\n\n    for (int test = 1; test <= 1; test++) {\n        printf(\"Test Case %d:\\n\", test);\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                printf(\"%3d\", matrix[i][j]);\n            }\n            printf(\"\\n\");\n        }\n    }\n}\n\nint main(int argc, char *argv[]) {\n    int N;\n    scanf(\"%d\", &N);\n    zigzagTraversal(N);\n    return 0;\n}",
    "timestamp": "2025-08-05 18:55:32"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n\nusing namespace std;\n\nvoid printZigzagTraversal(int N, int testCase) {\n    vector<vector<int>> matrix(N, vector<int>(N, 0));\n    int value = 1;\n    int row = 0, col = 0;\n    bool goingDown = true;\n\n    while (value <= N * N) {\n        matrix[row][col] = value++;\n\n        if (goingDown) {\n            if (col == 0 || row == N - 1) {\n                goingDown = false;\n                if (row == N - 1) col++;\n                else row++;\n            } else {\n                row++;\n                col--;\n            }\n        } else {\n            if (row == 0 || col == N - 1) {\n                goingDown = true;\n                if (col == N - 1) row++;\n                else col++;\n            } else {\n                row--;\n                col++;\n            }\n        }\n    }\n\n    cout << \"Test Case #\" << testCase << \":\" << endl;\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            cout << setw(3) << right << matrix[i][j];\n        }\n        cout << endl;\n    }\n}\n\nint main() {\n    int T, N;\n    cin >> T;\n\n    for (int t = 1; t <= T; t++) {\n        cin >> N;\n        printZigzagTraversal(N, t);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:55:39"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class ZigzagTraversal {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int testCase = 1;\n        while (scanner.hasNextInt()) {\n            int N = scanner.nextInt();\n            int[][] matrix = new int[N][N];\n            int num = 1;\n            for (int sum = 0; sum <= 2 * (N - 1); sum++) {\n                if (sum % 2 == 0) {\n                    for (int i = Math.min(sum, N - 1); i >= 0; i--) {\n                        int j = sum - i;\n                        if (j < N) {\n                            matrix[i][j] = num++;\n                        }\n                    }\n                } else {\n                    for (int j = Math.min(sum, N - 1); j >= 0; j--) {\n                        int i = sum - j;\n                        if (i < N) {\n                            matrix[i][j] = num++;\n                        }\n                    }\n                }\n            }\n            System.out.println(\"Case \" + testCase + \":\");\n            for (int i = 0; i < N; i++) {\n                for (int j = 0; j < N; j++) {\n                    System.out.printf(\"%3d\", matrix[i][j]);\n                }\n                System.out.println();\n            }\n            testCase++;\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 18:55:52"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def zigzag_traversal(N, test_case_number):\n    # Initialize the matrix\n    matrix = [[0] * N for _ in range(N)]\n    \n    # Initialize pointers and direction\n    i, j, n = 0, 0, 1\n    direction = \"down\"\n    \n    while n <= N * N:\n        # Fill the current cell with the order number\n        matrix[i][j] = n\n        \n        # Change direction based on the current position and direction\n        if direction == \"down\":\n            if j == 0 or i == N - 1:\n                direction = \"up\"\n                if i < N - 1:\n                    i += 1\n                else:\n                    j += 1\n            else:\n                i += 1\n                j -= 1\n        else:  # direction == \"up\"\n            if i == 0 or j == N - 1:\n                direction = \"down\"\n                if j < N - 1:\n                    j += 1\n                else:\n                    i += 1\n            else:\n                i -= 1\n                j += 1\n        \n        # Increment order number\n        n += 1\n    \n    # Output the matrix with headers\n    print(f\"Test case {test_case_number}:\")\n    for row in matrix:\n        print(\" \".join(f\"{num:>3}\" for num in row))\n\n# Example usage:\ntest_cases = [3, 4, 5]\nfor idx, N in enumerate(test_cases, start=1):\n    zigzag_traversal(N, idx)",
    "timestamp": "2025-08-13 01:28:45"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "public class ZigzagTraversal {\n    public static void main(String[] args) {\n        int numTestCases = 2; // Example test cases\n        int[] testCases = {3, 4}; // Example sizes for matrices\n        for (int t = 0; t < numTestCases; t++) {\n            int N = testCases[t];\n            int[][] matrix = new int[N][N];\n            fillZigzag(matrix, N);\n            System.out.println(\"Test case #\" + (t + 1));\n            printMatrix(matrix, N);\n            System.out.println();\n        }\n    }\n\n    private static void fillZigzag(int[][] matrix, int N) {\n        int row = 0, col = 0;\n        boolean goUp = true;\n        for (int i = 0; i < N * N; i++) {\n            matrix[row][col] = i + 1;\n            if (goUp) {\n                if (col == N - 1) {\n                    row++;\n                    goUp = false;\n                } else if (row == 0) {\n                    col++;\n                    goUp = false;\n                } else {\n                    row--;\n                    col++;\n                }\n            } else {\n                if (row == N - 1) {\n                    col++;\n                    goUp = true;\n                } else if (col == 0) {\n                    row++;\n                    goUp = true;\n                } else {\n                    row++;\n                    col--;\n                }\n            }\n        }\n    }\n\n    private static void printMatrix(int[][] matrix, int N) {\n        for (int[] row : matrix) {\n            for (int num : row) {\n                System.out.printf(\"%3d \", num);\n            }\n            System.out.println();\n        }\n    }\n}",
    "timestamp": "2025-08-13 01:28:49"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n\nvoid zigzagFill(int N, int matrix[N][N]) {\n    int row = 0, col = 0;\n    int direction = 1; // 1 for left-top to right-bottom, -1 for right-bottom to left-top\n    for (int i = 1; i <= N * N; ++i) {\n        matrix[row][col] = i;\n        if (direction == 1) {\n            if (col == N - 1) {\n                row++;\n                direction = -1;\n            } else if (row == 0) {\n                col++;\n                direction = -1;\n            } else {\n                row--;\n                col++;\n            }\n        } else {\n            if (row == N - 1) {\n                col++;\n                direction = 1;\n            } else if (col == 0) {\n                row++;\n                direction = 1;\n            } else {\n                row++;\n                col--;\n            }\n        }\n    }\n}\n\nvoid printMatrix(int test_case, int N, int matrix[N][N]) {\n    printf(\"Test case %d:\\n\", test_case);\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            printf(\"%3d\", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int T, N;\n    printf(\"Enter the number of test cases: \");\n    scanf(\"%d\", &T);\n    for (int t = 1; t <= T; ++t) {\n        printf(\"Enter size of matrix for test case %d: \", t);\n        scanf(\"%d\", &N);\n        int matrix[N][N];\n        zigzagFill(N, matrix);\n        printMatrix(t, N, matrix);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 01:28:52"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def generate_zigzag_matrix(N):\n    matrix = [[0 for _ in range(N)] for _ in range(N)]\n    num = 1\n    row, col = 0, 0\n    direction = 1\n\n    while num <= N * N:\n        matrix[row][col] = num\n        num += 1\n\n        if direction == 1:\n            if col == N - 1:\n                row += 1\n                direction = -1\n            elif row == 0:\n                col += 1\n                direction = -1\n            else:\n                row -= 1\n                col += 1\n        else:\n            if row == N - 1:\n                col += 1\n                direction = 1\n            elif col == 0:\n                row += 1\n                direction = 1\n            else:\n                row += 1\n                col -= 1\n\n    return matrix\n\ndef print_matrix(test_case, matrix):\n    print(f\"Test Case {test_case}\")\n    for row in matrix:\n        print(' '.join(f'{x:3}' for x in row))\n    print()\n\ndef main():\n    T = int(input())\n    for i in range(1, T+1):\n        N = int(input())\n        result_matrix = generate_zigzag_matrix(N)\n        print_matrix(i, result_matrix)\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 01:29:03"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def zigzag_traversal(N):\n    matrix = [[0] * N for _ in range(N)]\n    num = 1\n    for s in range(N + N - 1):\n        if s % 2 == 0:\n            # Move down-left\n            row = min(s, N - 1)\n            col = s - row\n            while row >= 0 and col < N:\n                matrix[row][col] = num\n                num += 1\n                row -= 1\n                col += 1\n        else:\n            # Move up-right\n            col = min(s, N - 1)\n            row = s - col\n            while col >= 0 and row < N:\n                matrix[row][col] = num\n                num += 1\n                row += 1\n                col -= 1\n    return matrix\n\ndef print_matrix(test_case, matrix):\n    print(f\"Test Case #{test_case}:\")\n    for row in matrix:\n        print(' '.join(f\"{num:3}\" for num in row))\n\n# Example usage:\nif __name__ == \"__main__\":\n    import sys\n    input_lines = sys.stdin.read().split()\n    T = int(input_lines[0])\n    for i in range(1, T + 1):\n        N = int(input_lines[i])\n        matrix = zigzag_traversal(N)\n        print_matrix(i, matrix)",
    "timestamp": "2025-08-13 01:29:17"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <iomanip>\n\nvoid zigzagTraversal(int testCaseNumber, int N) {\n    std::vector<std::vector<int>> matrix(N, std::vector<int>(N, 0));\n    int num = 1;\n    int row = 0, col = 0;\n\n    for (int i = 0; i < N * N; ++i) {\n        matrix[row][col] = num++;\n        \n        if ((row + col) % 2 == 0) {  // moving up\n            if (col == N - 1) row++;\n            else if (row == 0) col++;\n            else { row--; col++; }\n        } else {  // moving down\n            if (row == N - 1) col++;\n            else if (col == 0) row++;\n            else { row++; col--; }\n        }\n    }\n\n    // Output with header\n    std::cout << \"Test Case #\" << testCaseNumber << \":\" << std::endl;\n    for (const auto& line : matrix) {\n        for (const auto& elem : line) {\n            std::cout << std::setw(3) << elem;\n        }\n        std::cout << std::endl;\n    }\n}\n\nint main() {\n    int T, N;\n    std::cin >> T;\n    for (int testCase = 1; testCase <= T; ++testCase) {\n        std::cin >> N;\n        zigzagTraversal(testCase, N);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 11:00:19"
  }
]