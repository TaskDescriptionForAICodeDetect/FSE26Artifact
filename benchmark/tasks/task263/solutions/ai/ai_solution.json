[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ntypedef struct {\n    double x, y;\n} Point;\n\ndouble distance(Point a, Point b) {\n    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\n\ndouble area(double a, double b, double c) {\n    double s = (a + b + c) / 2;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}\n\nvoid calculate_malfatti_radii(Point A, Point B, Point C, double radii[3]) {\n    double a = distance(B, C);\n    double b = distance(A, C);\n    double c = distance(A, B);\n    double tri_area = area(a, b, c);\n    double r = tri_area / ((a + b + c) / 2);\n    \n    double s = (a + b + c) / 2;\n    double alpha = acos((b * b + c * c - a * a) / (2 * b * c));\n    double beta = acos((a * a + c * c - b * b) / (2 * a * c));\n    double gamma = acos((a * a + b * b - c * c) / (2 * a * b));\n    \n    double k1 = (1 + sin(alpha / 2)) / (cos(alpha / 2));\n    double k2 = (1 + sin(beta / 2)) / (cos(beta / 2));\n    double k3 = (1 + sin(gamma / 2)) / (cos(gamma / 2));\n    \n    double sum_k = k1 + k2 + k3;\n    double r1 = r * (k1 / sum_k);\n    double r2 = r * (k2 / sum_k);\n    double r3 = r * (k3 / sum_k);\n    \n    radii[0] = r1;\n    radii[1] = r2;\n    radii[2] = r3;\n}\n\nint main() {\n    Point A, B, C;\n    scanf(\"%lf %lf\", &A.x, &A.y);\n    scanf(\"%lf %lf\", &B.x, &B.y);\n    scanf(\"%lf %lf\", &C.x, &C.y);\n    \n    double radii[3];\n    calculate_malfatti_radii(A, B, C, radii);\n    \n    printf(\"%.6lf %.6lf %.6lf\\n\", radii[0], radii[1], radii[2]);\n    return 0;\n}",
    "timestamp": "2025-08-05 20:48:03"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n#include <iomanip>\n\nusing namespace std;\n\nstruct Point {\n    double x, y;\n    Point(double x = 0, double y = 0) : x(x), y(y) {}\n};\n\ndouble distance(Point a, Point b) {\n    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\n\ndouble area(double a, double b, double c) {\n    double s = (a + b + c) / 2;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}\n\nvector<double> malfattiRadii(Point A, Point B, Point C) {\n    double a = distance(B, C);\n    double b = distance(A, C);\n    double c = distance(A, B);\n    double S = area(a, b, c);\n    double r = S / ((a + b + c) / 2);\n    \n    double k1 = 1 / (tan(0.5 * acos((b * b + c * c - a * a) / (2 * b * c))) + 1);\n    double k2 = 1 / (tan(0.5 * acos((a * a + c * c - b * b) / (2 * a * c))) + 1);\n    double k3 = 1 / (tan(0.5 * acos((a * a + b * b - c * c) / (2 * a * b))) + 1);\n    \n    double r1 = r * (k1 / (1 + k1 + k2 + k3));\n    double r2 = r * (k2 / (1 + k1 + k2 + k3));\n    double r3 = r * (k3 / (1 + k1 + k2 + k3));\n    \n    vector<double> radii = {r1, r2, r3};\n    sort(radii.begin(), radii.end(), greater<double>());\n    return radii;\n}\n\nint main() {\n    Point A, B, C;\n    cin >> A.x >> A.y;\n    cin >> B.x >> B.y;\n    cin >> C.x >> C.y;\n    \n    vector<double> radii = malfattiRadii(A, B, C);\n    cout << fixed << setprecision(6);\n    cout << radii[0] << \" \" << radii[1] << \" \" << radii[2] << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 20:49:05"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class MalfattiCircles {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int t = scanner.nextInt();\n        while (t-- > 0) {\n            double[] x = new double[3];\n            double[] y = new double[3];\n            for (int i = 0; i < 3; i++) {\n                x[i] = scanner.nextDouble();\n                y[i] = scanner.nextDouble();\n            }\n            \n            double a = Math.sqrt((x[1] - x[2]) * (x[1] - x[2]) + (y[1] - y[2]) * (y[1] - y[2]));\n            double b = Math.sqrt((x[0] - x[2]) * (x[0] - x[2]) + (y[0] - y[2]) * (y[0] - y[2]));\n            double c = Math.sqrt((x[0] - x[1]) * (x[0] - x[1]) + (y[0] - y[1]) * (y[0] - y[1]));\n            \n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            double r = area / s;\n            \n            double k1 = 1 / (Math.tan(Math.acos((b * b + c * c - a * a) / (2 * b * c)) / 2));\n            double k2 = 1 / (Math.tan(Math.acos((a * a + c * c - b * b) / (2 * a * c)) / 2));\n            double k3 = 1 / (Math.tan(Math.acos((a * a + b * b - c * c) / (2 * a * b)) / 2));\n            \n            double r1 = r / (2 * (k2 + k3 - k1 + 2));\n            double r2 = r / (2 * (k1 + k3 - k2 + 2));\n            double r3 = r / (2 * (k1 + k2 - k3 + 2));\n            \n            System.out.printf(\"%.6f %.6f %.6f\\n\", r1, r2, r3);\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 20:49:35"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\nimport java.math.*;\n\npublic class MalfattiCircles {\n    public static double[] calculateMalfattiCircles(double[][] triangle) {\n        double ax = triangle[0][0], ay = triangle[0][1];\n        double bx = triangle[1][0], by = triangle[1][1];\n        double cx = triangle[2][0], cy = triangle[2][1];\n\n        double ab = Math.sqrt(Math.pow(bx - ax, 2) + Math.pow(by - ay, 2));\n        double bc = Math.sqrt(Math.pow(cx - bx, 2) + Math.pow(cy - by, 2));\n        double ca = Math.sqrt(Math.pow(ax - cx, 2) + Math.pow(ay - cy, 2));\n\n        double s = (ab + bc + ca) / 2.0;\n        double area = Math.sqrt(s * (s - ab) * (s - bc) * (s - ca));\n\n        double[] radii = new double[3];\n        radii[0] = area / (s + area / (4 * ab));\n        radii[1] = area / (s + area / (4 * bc));\n        radii[2] = area / (s + area / (4 * ca));\n\n        return radii;\n    }\n\n    public static void main(String[] args) {\n        double[][] triangle = {{0, 0}, {10, 0}, {5, 8}};\n        double[] result = calculateMalfattiCircles(triangle);\n        \n        for (double radius : result) {\n            System.out.printf(\"%.6f\\n\", radius);\n        }\n    }\n}",
    "timestamp": "2025-08-05 20:49:42"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ntypedef struct {\n    double x, y;\n} Point;\n\ndouble distance(Point a, Point b) {\n    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));\n}\n\ndouble triangle_area(Point a, Point b, Point c) {\n    return fabs(0.5 * (a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y)));\n}\n\nvoid calculate_malfatti_circles(Point a, Point b, Point c, double *radii) {\n    double ab = distance(a, b);\n    double bc = distance(b, c);\n    double ca = distance(c, a);\n    \n    double s = (ab + bc + ca) / 2.0;\n    double area = sqrt(s * (s - ab) * (s - bc) * (s - ca));\n    \n    double alpha = acos((bc * bc + ca * ca - ab * ab) / (2 * bc * ca));\n    double beta = acos((ca * ca + ab * ab - bc * bc) / (2 * ca * ab));\n    double gamma = acos((ab * ab + bc * bc - ca * ca) / (2 * ab * bc));\n    \n    double r1 = area / (s * (1.0 / sin(alpha/2) + 1.0 / sin(beta/2) + 1.0 / sin(gamma/2)));\n    \n    radii[0] = r1;\n    radii[1] = r1;\n    radii[2] = r1;\n}\n\nint main() {\n    Point a, b, c;\n    double radii[3];\n    \n    scanf(\"%lf %lf %lf %lf %lf %lf\", \n          &a.x, &a.y, &b.x, &b.y, &c.x, &c.y);\n    \n    calculate_malfatti_circles(a, b, c, radii);\n    \n    for (int i = 0; i < 3; i++) {\n        printf(\"%.6f\\n\", radii[i]);\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 20:49:49"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Point {\n    double x, y;\n};\n\ndouble dist(const Point& a, const Point& b) {\n    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\n\ndouble area(const Point& a, const Point& b, const Point& c) {\n    return abs(0.5 * (a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y)));\n}\n\ndouble solve(const vector<Point>& triangle) {\n    Point a = triangle[0], b = triangle[1], c = triangle[2];\n    double ab = dist(a, b);\n    double bc = dist(b, c);\n    double ca = dist(c, a);\n    \n    double s = (ab + bc + ca) / 2.0;\n    double triangleArea = sqrt(s * (s - ab) * (s - bc) * (s - ca));\n    \n    double alpha = acos((bc * bc + ca * ca - ab * ab) / (2 * bc * ca));\n    double beta = acos((ca * ca + ab * ab - bc * bc) / (2 * ca * ab));\n    double gamma = acos((ab * ab + bc * bc - ca * ca) / (2 * ab * bc));\n    \n    double r1 = triangleArea / s * (1.0 / tan(beta/2) + 1.0 / tan(gamma/2));\n    double r2 = triangleArea / s * (1.0 / tan(gamma/2) + 1.0 / tan(alpha/2));\n    double r3 = triangleArea / s * (1.0 / tan(alpha/2) + 1.0 / tan(beta/2));\n    \n    return r1;\n}\n\nint main() {\n    int t;\n    cin >> t;\n    \n    cout << fixed << setprecision(6);\n    \n    while (t--) {\n        vector<Point> triangle(3);\n        for (int i = 0; i < 3; i++) {\n            cin >> triangle[i].x >> triangle[i].y;\n        }\n        \n        double r1 = solve(triangle);\n        double r2 = solve({triangle[1], triangle[2], triangle[0]});\n        double r3 = solve({triangle[2], triangle[0], triangle[1]});\n        \n        vector<double> radii = {r1, r2, r3};\n        sort(radii.begin(), radii.end());\n        \n        for (double r : radii) {\n            cout << r << \" \";\n        }\n        cout << endl;\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 20:49:59"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sympy as sp\n\ndef malfatti_circles(x1, y1, x2, y2, x3, y3):\n    def distance(x1, y1, x2, y2):\n        return sp.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    \n    a = distance(x2, y2, x3, y3)\n    b = distance(x1, y1, x3, y3)\n    c = distance(x1, y1, x2, y2)\n    \n    s = (a + b + c) / 2\n    A = sp.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    A1 = sp.sqrt((s - a) * (s - b) * (s - c) / s)\n    A2 = sp.sqrt(s * (s - b) * (s - c) / (s - a))\n    A3 = sp.sqrt(s * (s - a) * (s - c) / (s - b))\n    A4 = sp.sqrt(s * (s - a) * (s - b) / (s - c))\n    \n    R1 = A1 / (s - c)\n    R2 = A2 / (s - b)\n    R3 = A3 / (s - a)\n    \n    return [R1, R2, R3]\n\n# Example use. Replace these coordinates with the triangle's vertices.\nx1, y1 = 0, 0\nx2, y2 = 0, 1\nx3, y3 = 1, 0\nradii = malfatti_circles(x1, y1, x2, y2, x3, y3)\nprint([float(r) for r in radii])",
    "timestamp": "2025-08-13 03:39:20"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.awt.geom.Point2D;\n\npublic class MalfattiCircles {\n    private static double triangleArea(double ax, double ay, double bx, double by, double cx, double cy) {\n        return Math.abs((ax * (by - cy) + bx * (cy - ay) + cx * (ay - by)) / 2.0);\n    }\n    \n    private static double distance(double x1, double y1, double x2, double y2) {\n        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n    }\n\n    private static double[] malfattiRadii(Point2D a, Point2D b, Point2D c) {\n        double A = triangleArea(a.getX(), a.getY(), b.getX(), b.getY(), c.getX(), c.getY());\n        double ab = distance(a.getX(), a.getY(), b.getX(), b.getY());\n        double bc = distance(b.getX(), b.getY(), c.getX(), c.getY());\n        double ca = distance(c.getX(), c.getY(), a.getX(), a.getY());\n        \n        double s = (ab + bc + ca) / 2.0;\n        \n        double r1 = (s - ab) * Math.sqrt((s - bc) * (s - ca) / (s * (s - ab)));\n        double r2 = (s - bc) * Math.sqrt((s - ab) * (s - ca) / (s * (s - bc)));\n        double r3 = (s - ca) * Math.sqrt((s - ab) * (s - bc) / (s * (s - ca)));\n        \n        return new double[]{r1, r2, r3};\n    }\n    \n    public static void main(String[] args) {\n        Point2D a = new Point2D.Double(0, 0);\n        Point2D b = new Point2D.Double(4, 0);\n        Point2D c = new Point2D.Double(2, 3);\n        \n        double[] radii = malfattiRadii(a, b, c);\n        System.out.printf(\"Radii of Malfatti circles: %f, %f, %f%n\", radii[0], radii[1], radii[2]);\n    }\n}",
    "timestamp": "2025-08-13 03:39:24"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <math.h>\n\ntypedef struct {\n    double x, y;\n} Point;\n\ndouble area(Point a, Point b, Point c) {\n    return fabs((a.x*(b.y-c.y) + b.x*(c.y-a.y) + c.x*(a.y-b.y))/2.0);\n}\n\ndouble distance(Point a, Point b) {\n    return sqrt((a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y));\n}\n\nvoid calculate_malfatti_radii(Point a, Point b, Point c, double *r1, double *r2, double *r3) {\n    double A = distance(b, c);\n    double B = distance(a, c);\n    double C = distance(a, b);\n    double S = area(a, b, c);\n    \n    *r1 = (S/A * (B+C-A))/(B+C+2*S/A);\n    *r2 = (S/B * (C+A-B))/(C+A+2*S/B);\n    *r3 = (S/C * (A+B-C))/(A+B+2*S/C);\n}\n\nint main() {\n    Point a, b, c;\n    printf(\"Enter coordinates of the triangle:\\n\");\n    printf(\"Vertex A: \");\n    scanf(\"%lf %lf\", &a.x, &a.y);\n    printf(\"Vertex B: \");\n    scanf(\"%lf %lf\", &b.x, &b.y);\n    printf(\"Vertex C: \");\n    scanf(\"%lf %lf\", &c.x, &c.y);\n    \n    double r1, r2, r3;\n    calculate_malfatti_radii(a, b, c, &r1, &r2, &r3);\n    \n    printf(\"Radii of Malfatti circles: %lf %lf %lf\\n\", r1, r2, r3);\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 03:39:29"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import math\n\ndef distance(p1, p2):\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\ndef triangle_area(a, b, c):\n    return abs(0.5 * (a[0]*(b[1] - c[1]) + b[0]*(c[1] - a[1]) + c[0]*(a[1] - b[1])))\n\ndef calculate_malfatti_circles(a, b, c):\n    # Calculate side lengths\n    ab = distance(a, b)\n    bc = distance(b, c)\n    ca = distance(c, a)\n    \n    # Calculate triangle area\n    area = triangle_area(a, b, c)\n    \n    # Calculate semiperimeter\n    s = (ab + bc + ca) / 2\n    \n    # Calculate inradius\n    r = area / s\n    \n    # Calculate auxiliary variables\n    x = (ab*bc*ca) / (4 * area * area)\n    \n    # Solve for Malfatti circle radii\n    radii = []\n    \n    # Avoid division by zero and negative roots\n    try:\n        r1 = (r * (1 - math.sqrt(x))) / 3\n        r2 = (r * (1 - math.sqrt(x))) / 3\n        r3 = (r * (1 - math.sqrt(x))) / 3\n        \n        # Ensure non-negative radii\n        radii = [max(0, r1), max(0, r2), max(0, r3)]\n    except:\n        radii = [0, 0, 0]\n    \n    return radii\n\n# Input parsing and output\nvertices = []\nfor _ in range(3):\n    x, y = map(float, input().split())\n    vertices.append((x, y))\n\nresult = calculate_malfatti_circles(*vertices)\nprint(' '.join(map(str, result)))",
    "timestamp": "2025-08-13 03:39:44"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import math\n\ndef malfatti_circles(A, B, C):\n    a = math.dist(B, C)\n    b = math.dist(A, C)\n    c = math.dist(A, B)\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    r = area / s\n    \n    def radius_formula(a, b, c, r):\n        return (r / 2) * (1 + (math.sqrt((b + c - a) * (a + b - c)) - math.sqrt((a + b - c) * (a + c - b))) / math.sqrt((a + b - c) * (b + c - a) * (a + c - b)))\n    \n    r1 = radius_formula(a, b, c, r)\n    r2 = radius_formula(b, c, a, r)\n    r3 = radius_formula(c, a, b, r)\n    \n    return sorted([r1, r2, r3], reverse=True)\n\n# Example usage:\n# A = (0.0, 0.0)\n# B = (1.0, 0.0)\n# C = (0.5, 0.8660254037844386)\n# print(malfatti_circles(A, B, C))",
    "timestamp": "2025-08-13 03:39:56"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nstruct Point {\n    double x, y;\n};\n\n// Function to calculate the distance between two points\ndouble distance(Point a, Point b) {\n    return sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));\n}\n\n// Function to calculate the area of a triangle using its vertices\ndouble area(Point a, Point b, Point c) {\n    return fabs(a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y)) / 2.0;\n}\n\n// Function to calculate the semi-perimeter of the triangle\ndouble semiPerimeter(double a, double b, double c) {\n    return (a + b + c) / 2.0;\n}\n\n// Function to calculate the Malfatti radii\nvoid calculateMalfattiRadii(Point A, Point B, Point C, double& r1, double& r2, double& r3) {\n    double a = distance(B, C);\n    double b = distance(A, C);\n    double c = distance(A, B);\n\n    double A_area = area(A, B, C);\n    double s = semiPerimeter(a, b, c);\n\n    double K = 2 * A_area / s;\n    r1 = K * (s - a) / (s - a + s - b + s - c);\n    r2 = K * (s - b) / (s - a + s - b + s - c);\n    r3 = K * (s - c) / (s - a + s - b + s - c);\n}\n\nint main() {\n    Point A, B, C;\n    cin >> A.x >> A.y >> B.x >> B.y >> C.x >> C.y;\n\n    double r1, r2, r3;\n    calculateMalfattiRadii(A, B, C, r1, r2, r3);\n\n    cout << r1 << \" \" << r2 << \" \" << r3 << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:14:14"
  }
]