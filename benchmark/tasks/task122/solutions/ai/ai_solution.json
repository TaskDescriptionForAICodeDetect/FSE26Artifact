[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    \n    int W[N], T[N];\n    for (int i = 0; i < N; i++) {\n        scanf(\"%d %d\", &W[i], &T[i]);\n    }\n    \n    int max_weight, max_thickness;\n    scanf(\"%d %d\", &max_weight, &max_thickness);\n    \n    int max_volumes = 0;\n    int current_weight = 0;\n    int current_thickness = 0;\n    \n    for (int i = 0; i < N; i++) {\n        current_weight += W[i];\n        current_thickness += T[i];\n        \n        if (current_weight > max_weight || current_thickness > max_thickness) {\n            break;\n        }\n        \n        max_volumes++;\n    }\n    \n    printf(\"%d\\n\", max_volumes);\n    return 0;\n}",
    "timestamp": "2025-08-05 18:42:13"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class AkaBekoCaseArrangement {\n    public static int maxVolumeArrangement(int[] weights, int[] thicknesses, int weightLimit, int widthLimit) {\n        int n = weights.length;\n        int[][] dp = new int[n + 1][weightLimit + 1];\n        int maxVolumes = 0;\n\n        for (int i = 1; i <= n; i++) {\n            for (int w = 0; w <= weightLimit; w++) {\n                for (int width = 0; width <= widthLimit; width++) {\n                    if (weights[i - 1] <= w && thicknesses[i - 1] <= width) {\n                        dp[i][w] = Math.max(dp[i - 1][w - weights[i - 1]] + 1, dp[i - 1][w]);\n                        maxVolumes = Math.max(maxVolumes, dp[i][w]);\n                    } else {\n                        dp[i][w] = dp[i - 1][w];\n                    }\n                }\n            }\n        }\n\n        return maxVolumes;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        int n = scanner.nextInt();\n        int weightLimit = scanner.nextInt();\n        int widthLimit = scanner.nextInt();\n        \n        int[] weights = new int[n];\n        int[] thicknesses = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            weights[i] = scanner.nextInt();\n            thicknesses[i] = scanner.nextInt();\n        }\n        \n        int result = maxVolumeArrangement(weights, thicknesses, weightLimit, widthLimit);\n        System.out.println(result);\n        \n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 18:42:19"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    int N, W_limit, S_limit;\n    cin >> N >> W_limit >> S_limit;\n    \n    vector<int> W(N), S(N);\n    for (int i = 0; i < N; ++i) {\n        cin >> W[i] >> S[i];\n    }\n    \n    int max_volumes = 0;\n    for (int k = 1; k <= N; ++k) {\n        bool possible = true;\n        int total_weight = 0, total_thickness = 0;\n        \n        for (int i = 0; i < k; ++i) {\n            total_weight += W[i];\n            total_thickness += S[i];\n            \n            if (total_weight > W_limit || total_thickness > S_limit) {\n                possible = false;\n                break;\n            }\n        }\n        \n        if (possible) {\n            max_volumes = k;\n        } else {\n            break;\n        }\n    }\n    \n    cout << max_volumes << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 18:42:33"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_VOLUMES 1000\n\ntypedef struct {\n    int weight;\n    int thickness;\n} Book;\n\nint arrangeBooks(Book books[], int n, int max_weight, int max_width) {\n    int dp[MAX_VOLUMES + 1][MAX_VOLUMES + 1] = {0};\n    \n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= i; j++) {\n            int total_weight = 0;\n            int total_width = 0;\n            int max_volumes = 0;\n            \n            for (int k = j; k <= i; k++) {\n                total_weight += books[k-1].weight;\n                total_width += books[k-1].thickness;\n                \n                if (total_weight <= max_weight && total_width <= max_width) {\n                    int prev_volumes = (j > 1) ? dp[j-1][j-1] : 0;\n                    dp[i][j] = (prev_volumes + (k - j + 1) > dp[i][j]) \n                               ? prev_volumes + (k - j + 1) : dp[i][j];\n                    max_volumes = (k - j + 1 > max_volumes) ? k - j + 1 : max_volumes;\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n    \n    int max_total_volumes = 0;\n    for (int j = 1; j <= n; j++) {\n        if (dp[n][j] > max_total_volumes) {\n            max_total_volumes = dp[n][j];\n        }\n    }\n    \n    return max_total_volumes;\n}\n\nint main() {\n    int n, max_weight, max_width;\n    Book books[MAX_VOLUMES];\n    \n    scanf(\"%d %d %d\", &n, &max_weight, &max_width);\n    \n    for (int i = 0; i < n; i++) {\n        scanf(\"%d %d\", &books[i].weight, &books[i].thickness);\n    }\n    \n    int result = arrangeBooks(books, n, max_weight, max_width);\n    printf(\"%d\\n\", result);\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 18:42:42"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Book {\n    int volume;\n    int weight;\n    int thickness;\n};\n\nint findMaxVolumes(int shelfWeight, int shelfWidth, vector<Book>& books) {\n    int n = books.size();\n    vector<vector<int>> dp(n + 1, vector<int>(shelfWeight + 1, 0));\n\n    for (int i = 1; i <= n; i++) {\n        for (int w = 0; w <= shelfWeight; w++) {\n            dp[i][w] = dp[i - 1][w];\n            \n            if (books[i - 1].weight <= w && books[i - 1].thickness <= shelfWidth) {\n                int prevVolumes = 0;\n                int currentWeight = books[i - 1].weight;\n                int currentThickness = books[i - 1].thickness;\n                \n                for (int j = i - 2; j >= 0; j--) {\n                    if (books[j].volume == books[i - 1].volume - prevVolumes - 1 &&\n                        currentWeight + books[j].weight <= w &&\n                        currentThickness + books[j].thickness <= shelfWidth) {\n                        currentWeight += books[j].weight;\n                        currentThickness += books[j].thickness;\n                        prevVolumes++;\n                    }\n                }\n                \n                dp[i][w] = max(dp[i][w], dp[i - 1][w - currentWeight] + prevVolumes + 1);\n            }\n        }\n    }\n\n    return *max_element(dp[n].begin(), dp[n].end());\n}\n\nint main() {\n    int shelfWeight, shelfWidth, n;\n    cin >> shelfWeight >> shelfWidth >> n;\n\n    vector<Book> books(n);\n    for (int i = 0; i < n; i++) {\n        cin >> books[i].volume >> books[i].weight >> books[i].thickness;\n    }\n\n    sort(books.begin(), books.end(), [](const Book& a, const Book& b) {\n        return a.volume < b.volume;\n    });\n\n    int maxVolumes = findMaxVolumes(shelfWeight, shelfWidth, books);\n    cout << maxVolumes << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:42:51"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class CybercafeBookArrangement {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int W = scanner.nextInt();\n        int L = scanner.nextInt();\n        \n        int[] weights = new int[N];\n        int[] thicknesses = new int[N];\n        \n        for (int i = 0; i < N; i++) {\n            weights[i] = scanner.nextInt();\n            thicknesses[i] = scanner.nextInt();\n        }\n        \n        int maxVolumes = 0;\n        int currentWeight = 0;\n        int currentThickness = 0;\n        int start = 0;\n        \n        for (int end = 0; end < N; end++) {\n            currentWeight += weights[end];\n            currentThickness += thicknesses[end];\n            \n            while (currentWeight > W || currentThickness > L) {\n                currentWeight -= weights[start];\n                currentThickness -= thicknesses[start];\n                start++;\n            }\n            \n            if (end - start + 1 > maxVolumes && start <= end) {\n                maxVolumes = end - start + 1;\n            }\n        }\n        \n        System.out.println(maxVolumes);\n    }\n}",
    "timestamp": "2025-08-05 18:43:04"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_volumes(weights, thicknesses, max_weight, max_width):\n    n = len(weights)\n    total_weight = total_thickness = 0\n    volume_count = 0\n    for i in range(n):\n        if total_weight + weights[i] <= max_weight and total_thickness + thicknesses[i] <= max_width:\n            total_weight += weights[i]\n            total_thickness += thicknesses[i]\n            volume_count += 1\n        else:\n            break\n    return volume_count\n\nweights = [2, 3, 2, 1, 4, 2]  # Example weights of the volumes\nthicknesses = [1, 1, 2, 1, 3, 2]  # Example thicknesses of the volumes\nmax_weight = 10  # Maximum weight limit for the shelf\nmax_width = 9  # Maximum width limit for the shelf\n\nprint(max_volumes(weights, thicknesses, max_weight, max_width))",
    "timestamp": "2025-08-13 00:39:56"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class CyberCafeBookOrganizer {\n\n    static class Volume {\n        int weight;\n        int thickness;\n\n        Volume(int weight, int thickness) {\n            this.weight = weight;\n            this.thickness = thickness;\n        }\n    }\n\n    public static int maxVolumes(int[] weights, int[] thicknesses, int maxWeight, int maxThickness) {\n        int n = weights.length;\n        Volume[] volumes = new Volume[n];\n        for (int i = 0; i < n; i++) {\n            volumes[i] = new Volume(weights[i], thicknesses[i]);\n        }\n        return binarySearchMaxVolumes(volumes, maxWeight, maxThickness);\n    }\n\n    private static int binarySearchMaxVolumes(Volume[] volumes, int maxWeight, int maxThickness) {\n        int low = 0, high = volumes.length;\n        while (low < high) {\n            int mid = (low + high + 1) / 2;\n            if (canArrangeVolumes(volumes, mid, maxWeight, maxThickness)) {\n                low = mid;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n\n    private static boolean canArrangeVolumes(Volume[] volumes, int count, int maxWeight, int maxThickness) {\n        int totalWeight = 0;\n        int totalThickness = 0;\n        for (int i = 0; i < count; i++) {\n            totalWeight += volumes[i].weight;\n            totalThickness += volumes[i].thickness;\n            if (totalWeight > maxWeight || totalThickness > maxThickness) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        int[] weights = {2, 3, 1, 5, 4};\n        int[] thicknesses = {1, 2, 1, 3, 2};\n        int maxWeight = 10;\n        int maxThickness = 6;\n        System.out.println(maxVolumes(weights, thicknesses, maxWeight, maxThickness)); // should output the maximum volumes\n    }\n}",
    "timestamp": "2025-08-13 00:40:02"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n\n#define MAX_VOLUMES 1000\n\ntypedef struct {\n    int volume;\n    int weight;\n    int thickness;\n} Book;\n\nint main() {\n    int n, max_weight, max_width;\n    int total_weight = 0, total_width = 0;\n    int max_volumes = 0;\n    \n    Book books[MAX_VOLUMES];\n    \n    // Assuming the volumes are read from somewhere previously in the array `books`\n    // and `n` is set to the number of volumes.\n\n    // Input weight and width limits for the shelf\n    printf(\"Enter maximum weight capacity of shelf: \");\n    scanf(\"%d\", &max_weight);\n    printf(\"Enter maximum width capacity of shelf: \");\n    scanf(\"%d\", &max_width);\n    \n    for (int i = 0; i < n; i++) {\n        if (total_weight + books[i].weight <= max_weight &&\n            total_width + books[i].thickness <= max_width) {\n            total_weight += books[i].weight;\n            total_width += books[i].thickness;\n            max_volumes++;\n        } else {\n            break;\n        }\n    }\n    \n    printf(\"Maximum number of AkaBeko volumes that can be arranged: %d\\n\", max_volumes);\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 00:40:07"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_volumes_on_shelf(volumes, weight_limit, width_limit):\n    # Sort volumes by volume number\n    volumes.sort(key=lambda x: x[0])\n    \n    n = len(volumes)\n    # DP table to store max volumes that can be placed\n    dp = [[0] * (weight_limit + 1) for _ in range(width_limit + 1)]\n    \n    for i in range(n):\n        current_volume, current_weight, current_width = volumes[i]\n        \n        for w in range(weight_limit, current_weight - 1, -1):\n            for h in range(width_limit, current_width - 1, -1):\n                # Check if previous volumes are consecutive\n                if i > 0 and current_volume != volumes[i-1][0] + 1:\n                    continue\n                \n                dp[w][h] = max(dp[w][h], dp[w - current_weight][h - current_width] + 1)\n    \n    # Find max volumes placed\n    max_volumes = max(max(row) for row in dp)\n    return max_volumes\n\n# Example usage\nvolumes = [\n    (1, 100, 20),   # (volume_number, weight, width)\n    (2, 120, 25),\n    (3, 110, 22),\n    (4, 130, 27),\n    (5, 90, 18)\n]\nweight_limit = 300\nwidth_limit = 70\n\nresult = max_volumes_on_shelf(volumes, weight_limit, width_limit)\nprint(result)",
    "timestamp": "2025-08-13 00:40:20"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_volumes(N, W, widths, weights, width_limit, weight_limit):\n    max_vol = 0\n    current_width = 0\n    current_weight = 0\n    start = 0\n    \n    for end in range(N):\n        current_width += widths[end]\n        current_weight += weights[end]\n        \n        while (current_width > width_limit or current_weight > weight_limit) and start <= end:\n            current_width -= widths[start]\n            current_weight -= weights[start]\n            start += 1\n        \n        if current_width <= width_limit and current_weight <= weight_limit:\n            if end - start + 1 > max_vol:\n                max_vol = end - start + 1\n    \n    return max_vol\n\n# Sample Input\nN, W = map(int, input().split())\nwidths = list(map(int, input().split()))\nweights = list(map(int, input().split()))\nwidth_limit, weight_limit = map(int, input().split())\n\nprint(max_volumes(N, W, widths, weights, width_limit, weight_limit))",
    "timestamp": "2025-08-13 00:40:34"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Volume {\n    int volume;\n    int weight;\n    int thickness;\n};\n\nbool compareVolumes(const Volume& a, const Volume& b) {\n    return a.volume < b.volume;\n}\n\nint maxVolumesOnShelf(vector<Volume>& volumes, int maxWeight, int maxWidth) {\n    sort(volumes.begin(), volumes.end(), compareVolumes);\n    \n    int totalWeight = 0;\n    int totalThickness = 0;\n    int maxVolumes = 0;\n\n    for (const auto& vol : volumes) {\n        if (totalWeight + vol.weight <= maxWeight && totalThickness + vol.thickness <= maxWidth) {\n            totalWeight += vol.weight;\n            totalThickness += vol.thickness;\n            maxVolumes++;\n        } else {\n            break;\n        }\n    }\n\n    return maxVolumes;\n}\n\nint main() {\n    int n, maxWeight, maxWidth;\n    cin >> n >> maxWeight >> maxWidth;\n    \n    vector<Volume> volumes(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> volumes[i].volume >> volumes[i].weight >> volumes[i].thickness;\n    }\n\n    int result = maxVolumesOnShelf(volumes, maxWeight, maxWidth);\n    cout << result << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 10:55:16"
  }
]