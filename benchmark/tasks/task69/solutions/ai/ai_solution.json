[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nchar* charToCode[256] = {\n    ['A'] = \"00000\", ['B'] = \"00001\", ['C'] = \"00010\", ['D'] = \"00011\",\n    ['E'] = \"00100\", ['F'] = \"00101\", ['G'] = \"00110\", ['H'] = \"00111\",\n    ['I'] = \"01000\", ['J'] = \"01001\", ['K'] = \"01010\", ['L'] = \"01011\",\n    ['M'] = \"01100\", ['N'] = \"01101\", ['O'] = \"01110\", ['P'] = \"01111\",\n    ['Q'] = \"10000\", ['R'] = \"10001\", ['S'] = \"10010\", ['T'] = \"10011\",\n    ['U'] = \"10100\", ['V'] = \"10101\", ['W'] = \"10110\", ['X'] = \"10111\",\n    ['Y'] = \"11000\", ['Z'] = \"11001\", [' '] = \"11010\", ['.'] = \"11011\",\n    [','] = \"11100\", ['-'] = \"11101\", ['\\''] = \"11110\", ['?'] = \"11111\"\n};\n\nchar codeToChar[32] = {\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n    'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n    'Y', 'Z', ' ', '.', ',', '-', '\\'', '?'\n};\n\nvoid processString(char* str) {\n    char binaryStr[10000] = {0};\n    int binaryLen = 0;\n\n    for (int i = 0; str[i]; i++) {\n        char c = toupper(str[i]);\n        if (charToCode[(int)c]) {\n            strcat(binaryStr, charToCode[(int)c]);\n            binaryLen += 5;\n        }\n    }\n\n    while (binaryLen % 5 != 0) {\n        strcat(binaryStr, \"0\");\n        binaryLen++;\n    }\n\n    for (int i = 0; i < binaryLen; i += 5) {\n        char code[6] = {0};\n        strncpy(code, binaryStr + i, 5);\n        int index = strtol(code, NULL, 2);\n        if (index >= 0 && index < 32) {\n            printf(\"%c\", codeToChar[index]);\n        }\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    char line[256];\n    while (fgets(line, sizeof(line), stdin)) {\n        line[strcspn(line, \"\\n\")] = '\\0';\n        if (strlen(line) == 0) continue;\n        processString(line);\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:26:53"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class CodeConverter {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int datasets = scanner.nextInt();\n        scanner.nextLine();\n\n        String[] firstTable = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\n        String[] secondTable = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\n        String[] finalTable = {\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \"11000\", \"11001\"};\n\n        for (int i = 0; i < datasets; i++) {\n            String input = scanner.nextLine().toUpperCase();\n            StringBuilder encodedString = new StringBuilder();\n\n            for (char c : input.toCharArray()) {\n                int index = Arrays.asList(secondTable).indexOf(String.valueOf(c));\n                if (index != -1) {\n                    encodedString.append(firstTable[index]);\n                }\n            }\n\n            String binaryCode = encodedString.toString().replaceAll(\"[.-]\", m -> m.group().equals(\".\") ? \"1\" : \"0\");\n            List<String> groups = new ArrayList<>();\n\n            for (int j = 0; j < binaryCode.length(); j += 5) {\n                groups.add(binaryCode.substring(j, Math.min(j + 5, binaryCode.length())));\n            }\n\n            StringBuilder result = new StringBuilder();\n            for (String group : groups) {\n                int tableIndex = Arrays.asList(finalTable).indexOf(group);\n                if (tableIndex != -1) {\n                    result.append(secondTable[tableIndex]);\n                }\n            }\n\n            System.out.println(result);\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 18:27:02"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\nusing namespace std;\n\nmap<char, string> charToCode = {\n    {'A', \"00000\"}, {'B', \"00001\"}, {'C', \"00010\"}, {'D', \"00011\"},\n    {'E', \"00100\"}, {'F', \"00101\"}, {'G', \"00110\"}, {'H', \"00111\"},\n    {'I', \"01000\"}, {'J', \"01001\"}, {'K', \"01010\"}, {'L', \"01011\"},\n    {'M', \"01100\"}, {'N', \"01101\"}, {'O', \"01110\"}, {'P', \"01111\"},\n    {'Q', \"10000\"}, {'R', \"10001\"}, {'S', \"10010\"}, {'T', \"10011\"},\n    {'U', \"10100\"}, {'V', \"10101\"}, {'W', \"10110\"}, {'X', \"10111\"},\n    {'Y', \"11000\"}, {'Z', \"11001\"}, {' ', \"11010\"}, {'.', \"11011\"},\n    {',', \"11100\"}, {'-', \"11101\"}, {'\\'', \"11110\"}, {'?', \"11111\"}\n};\n\nmap<string, char> codeToChar = {\n    {\"00000\", 'A'}, {\"00001\", 'B'}, {\"00010\", 'C'}, {\"00011\", 'D'},\n    {\"00100\", 'E'}, {\"00101\", 'F'}, {\"00110\", 'G'}, {\"00111\", 'H'},\n    {\"01000\", 'I'}, {\"01001\", 'J'}, {\"01010\", 'K'}, {\"01011\", 'L'},\n    {\"01100\", 'M'}, {\"01101\", 'N'}, {\"01110\", 'O'}, {\"01111\", 'P'},\n    {\"10000\", 'Q'}, {\"10001\", 'R'}, {\"10010\", 'S'}, {\"10011\", 'T'},\n    {\"10100\", 'U'}, {\"10101\", 'V'}, {\"10110\", 'W'}, {\"10111\", 'X'},\n    {\"11000\", 'Y'}, {\"11001\", 'Z'}, {\"11010\", ' '}, {\"11011\", '.'},\n    {\"11100\", ','}, {\"11101\", '-'}, {\"11110\", '\\''}, {\"11111\", '?'}\n};\n\nint main() {\n    string line;\n    while (getline(cin, line)) {\n        string code;\n        for (char c : line) {\n            code += charToCode[toupper(c)];\n        }\n        \n        vector<string> groups;\n        for (int i = 0; i < code.size(); i += 5) {\n            string group = code.substr(i, 5);\n            if (group.size() < 5) {\n                group += string(5 - group.size(), '0');\n            }\n            groups.push_back(group);\n        }\n        \n        string result;\n        for (const string& group : groups) {\n            result += codeToChar[group];\n        }\n        \n        cout << result << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 18:27:56"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_INPUT_LENGTH 1000\n#define MAX_CODE_LENGTH 5\n\nchar* first_table[] = {\n    \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \n    \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \n    \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"\n};\n\nchar* second_table[] = {\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \n    \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \n    \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n};\n\nchar* third_table[] = {\n    \"HZWSX\", \"BRTX\", \"QMDK\", \"JPGOUY\", \"LFENAC\"\n};\n\nvoid convert_to_morse(char* input, char* morse_code) {\n    morse_code[0] = '\\0';\n    for (int i = 0; input[i]; i++) {\n        if (input[i] >= 'A' && input[i] <= 'Z') {\n            strcat(morse_code, first_table[input[i] - 'A']);\n        }\n    }\n}\n\nvoid split_to_groups(char* morse_code, char groups[][MAX_CODE_LENGTH + 1]) {\n    int len = strlen(morse_code);\n    int group_count = 0;\n    int group_index = 0;\n\n    for (int i = 0; i < len; i++) {\n        groups[group_count][group_index++] = morse_code[i];\n        \n        if (group_index == MAX_CODE_LENGTH) {\n            groups[group_count][group_index] = '\\0';\n            group_count++;\n            group_index = 0;\n        }\n    }\n\n    if (group_index > 0) {\n        groups[group_count][group_index] = '\\0';\n        group_count++;\n    }\n}\n\nchar get_group_character(char* group) {\n    for (int i = 0; i < 5; i++) {\n        for (int j = 0; j < strlen(third_table[i]); j++) {\n            if (strchr(group, third_table[i][j])) {\n                return second_table[i * 5 + j];\n            }\n        }\n    }\n    return '?';\n}\n\nint main() {\n    int T;\n    scanf(\"%d\", &T);\n    getchar();  // consume newline\n\n    while (T--) {\n        char input[MAX_INPUT_LENGTH];\n        fgets(input, sizeof(input), stdin);\n        input[strcspn(input, \"\\n\")] = 0;\n\n        char morse_code[MAX_INPUT_LENGTH * 2] = {0};\n        convert_to_morse(input, morse_code);\n\n        char groups[MAX_INPUT_LENGTH / MAX_CODE_LENGTH][MAX_CODE_LENGTH + 1];\n        split_to_groups(morse_code, groups);\n\n        char result[MAX_INPUT_LENGTH] = {0};\n        int group_count = strlen(morse_code) / MAX_CODE_LENGTH;\n        if (strlen(morse_code) % MAX_CODE_LENGTH != 0) group_count++;\n\n        for (int i = 0; i < group_count; i++) {\n            char group_char = get_group_character(groups[i]);\n            strncat(result, &group_char, 1);\n        }\n\n        printf(\"%s\\n\", result);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:28:09"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <unordered_map>\n#include <iomanip>\n\nusing namespace std;\n\nclass CodeConverter {\nprivate:\n    unordered_map<char, string> firstTable = {\n        {'A', \"00001\"}, {'B', \"00010\"}, {'C', \"00011\"}, {'D', \"00100\"},\n        {'E', \"00101\"}, {'F', \"00110\"}, {'G', \"00111\"}, {'H', \"01000\"},\n        {'I', \"01001\"}, {'J', \"01010\"}, {'K', \"01011\"}, {'L', \"01100\"},\n        {'M', \"01101\"}, {'N', \"01110\"}, {'O', \"01111\"}, {'P', \"10000\"},\n        {'Q', \"10001\"}, {'R', \"10010\"}, {'S', \"10011\"}, {'T', \"10100\"},\n        {'U', \"10101\"}, {'V', \"10110\"}, {'W', \"10111\"}, {'X', \"11000\"},\n        {'Y', \"11001\"}, {'Z', \"11010\"}\n    };\n\n    unordered_map<string, char> secondTable = {\n        {\"00001\", 'A'}, {\"00010\", 'B'}, {\"00011\", 'C'}, {\"00100\", 'D'},\n        {\"00101\", 'E'}, {\"00110\", 'F'}, {\"00111\", 'G'}, {\"01000\", 'H'},\n        {\"01001\", 'I'}, {\"01010\", 'J'}, {\"01011\", 'K'}, {\"01100\", 'L'},\n        {\"01101\", 'M'}, {\"01110\", 'N'}, {\"01111\", 'O'}, {\"10000\", 'P'},\n        {\"10001\", 'Q'}, {\"10010\", 'R'}, {\"10011\", 'S'}, {\"10100\", 'T'},\n        {\"10101\", 'U'}, {\"10110\", 'V'}, {\"10111\", 'W'}, {\"11000\", 'X'},\n        {\"11001\", 'Y'}, {\"11010\", 'Z'}\n    };\n\npublic:\n    string encode(const string& input) {\n        string encodedString;\n        for (char c : input) {\n            if (firstTable.count(c)) {\n                encodedString += firstTable[c];\n            }\n        }\n        return encodedString;\n    }\n\n    string decode(const string& encodedString) {\n        string decodedMessage;\n        for (size_t i = 0; i < encodedString.length(); i += 5) {\n            string group = encodedString.substr(i, 5);\n            if (secondTable.count(group)) {\n                decodedMessage += secondTable[group];\n            }\n        }\n        return decodedMessage;\n    }\n};\n\nint main() {\n    int numDatasets;\n    cin >> numDatasets;\n    cin.ignore();\n\n    CodeConverter converter;\n\n    for (int i = 0; i < numDatasets; ++i) {\n        string input;\n        getline(cin, input);\n\n        string encodedString = converter.encode(input);\n        string decodedMessage = converter.decode(encodedString);\n\n        cout << encodedString << endl;\n        cout << decodedMessage << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:28:25"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class StringEncoder {\n    private static final Map<Character, String> charToCode = new HashMap<>();\n    private static final Map<String, Character> codeToChar = new HashMap<>();\n    \n    static {\n        // Initialize charToCode\n        charToCode.put('A', \"00000\");\n        charToCode.put('B', \"00001\");\n        charToCode.put('C', \"00010\");\n        charToCode.put('D', \"00011\");\n        charToCode.put('E', \"00100\");\n        charToCode.put('F', \"00101\");\n        charToCode.put('G', \"00110\");\n        charToCode.put('H', \"00111\");\n        charToCode.put('I', \"01000\");\n        charToCode.put('J', \"01001\");\n        charToCode.put('K', \"01010\");\n        charToCode.put('L', \"01011\");\n        charToCode.put('M', \"01100\");\n        charToCode.put('N', \"01101\");\n        charToCode.put('O', \"01110\");\n        charToCode.put('P', \"01111\");\n        charToCode.put('Q', \"10000\");\n        charToCode.put('R', \"10001\");\n        charToCode.put('S', \"10010\");\n        charToCode.put('T', \"10011\");\n        charToCode.put('U', \"10100\");\n        charToCode.put('V', \"10101\");\n        charToCode.put('W', \"10110\");\n        charToCode.put('X', \"10111\");\n        charToCode.put('Y', \"11000\");\n        charToCode.put('Z', \"11001\");\n        charToCode.put(' ', \"11010\");\n        charToCode.put('.', \"11011\");\n        charToCode.put(',', \"11100\");\n        charToCode.put('-', \"11101\");\n        charToCode.put('\\'', \"11110\");\n        charToCode.put('?', \"11111\");\n        \n        // Initialize codeToChar\n        codeToChar.put(\"00000\", 'A');\n        codeToChar.put(\"00001\", 'B');\n        codeToChar.put(\"00010\", 'C');\n        codeToChar.put(\"00011\", 'D');\n        codeToChar.put(\"00100\", 'E');\n        codeToChar.put(\"00101\", 'F');\n        codeToChar.put(\"00110\", 'G');\n        codeToChar.put(\"00111\", 'H');\n        codeToChar.put(\"01000\", 'I');\n        codeToChar.put(\"01001\", 'J');\n        codeToChar.put(\"01010\", 'K');\n        codeToChar.put(\"01011\", 'L');\n        codeToChar.put(\"01100\", 'M');\n        codeToChar.put(\"01101\", 'N');\n        codeToChar.put(\"01110\", 'O');\n        codeToChar.put(\"01111\", 'P');\n        codeToChar.put(\"10000\", 'Q');\n        codeToChar.put(\"10001\", 'R');\n        codeToChar.put(\"10010\", 'S');\n        codeToChar.put(\"10011\", 'T');\n        codeToChar.put(\"10100\", 'U');\n        codeToChar.put(\"10101\", 'V');\n        codeToChar.put(\"10110\", 'W');\n        codeToChar.put(\"10111\", 'X');\n        codeToChar.put(\"11000\", 'Y');\n        codeToChar.put(\"11001\", 'Z');\n        codeToChar.put(\"11010\", ' ');\n        codeToChar.put(\"11011\", '.');\n        codeToChar.put(\"11100\", ',');\n        codeToChar.put(\"11101\", '-');\n        codeToChar.put(\"11110\", '\\'');\n        codeToChar.put(\"11111\", '?');\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextLine()) {\n            String input = scanner.nextLine();\n            StringBuilder binaryString = new StringBuilder();\n            for (char c : input.toCharArray()) {\n                binaryString.append(charToCode.get(c));\n            }\n            String binary = binaryString.toString();\n            List<String> groups = new ArrayList<>();\n            for (int i = 0; i < binary.length(); i += 5) {\n                int end = Math.min(i + 5, binary.length());\n                String group = binary.substring(i, end);\n                if (group.length() < 5) {\n                    group = String.format(\"%-5s\", group).replace(' ', '0');\n                }\n                groups.add(group);\n            }\n            StringBuilder result = new StringBuilder();\n            for (String group : groups) {\n                result.append(codeToChar.get(group));\n            }\n            System.out.println(result.toString());\n        }\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 18:29:10"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "class EncoderDecoder:\n    def __init__(self, encode_table, decode_table):\n        self.encode_table = encode_table\n        self.decode_table = decode_table\n\n    def encode(self, input_string):\n        encoded_string = ''.join(self.encode_table.get(char, '') for char in input_string)\n        return [encoded_string[i:i+5] for i in range(0, len(encoded_string), 5)]\n    \n    def decode(self, encoded_groups):\n        return ''.join(self.decode_table.get(group, '') for group in encoded_groups)\n\ndef process_datasets(datasets, encode_table, decode_table):\n    encoder_decoder = EncoderDecoder(encode_table, decode_table)\n    results = []\n    for data in datasets:\n        encoded_groups = encoder_decoder.encode(data)\n        decoded_string = encoder_decoder.decode(encoded_groups)\n        results.append(decoded_string)\n    return results\n\n# Example usage:\nencode_table = {'a': '00001', 'b': '00010', 'c': '00011'}\ndecode_table = {'00001': 'x', '00010': 'y', '00011': 'z'}\n\ndatasets = ['abc', 'cab']\nresults = process_datasets(datasets, encode_table, decode_table)\nfor result in results:\n    print(result)",
    "timestamp": "2025-08-12 23:16:07"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class StringToCodeConverter {\n    // Predefined character-to-code mappings\n    private static final Map<Character, String> charToCodeMap = new HashMap<>();\n    private static final Map<String, Character> codeToCharMap = new HashMap<>();\n\n    static {\n        charToCodeMap.put('A', \"10001\");\n        charToCodeMap.put('B', \"00110\");\n        charToCodeMap.put('C', \"10111\");\n        charToCodeMap.put('D', \"01001\");\n        charToCodeMap.put('E', \"00011\");\n        charToCodeMap.put('F', \"11100\");\n        charToCodeMap.put('G', \"01110\");\n        charToCodeMap.put('H', \"11010\");\n        // Add more mappings here as needed\n\n        // Reverse the mapping for code-to-character conversion\n        for (Map.Entry<Character, String> entry : charToCodeMap.entrySet()) {\n            codeToCharMap.put(entry.getValue(), entry.getKey());\n        }\n    }\n\n    public static String convertString(String input) {\n        StringBuilder encodedString = new StringBuilder();\n\n        for (char c : input.toCharArray()) {\n            String code = charToCodeMap.get(c);\n            if (code != null) {\n                encodedString.append(code);\n            }\n        }\n\n        int length = encodedString.length();\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < length; i += 5) {\n            String group = encodedString.substring(i, Math.min(i + 5, length));\n            Character mappedChar = codeToCharMap.get(group);\n            if (mappedChar != null) {\n                result.append(mappedChar);\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter number of datasets:\");\n        int datasets = Integer.parseInt(scanner.nextLine());\n\n        for (int i = 0; i < datasets; i++) {\n            System.out.println(\"Enter string for dataset \" + (i + 1) + \":\");\n            String input = scanner.nextLine();\n            String output = convertString(input);\n            System.out.println(\"Converted String: \" + output);\n        }\n\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-12 23:16:19"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n\n// Define the substitution tables\nchar substitutionTable1[256];\nchar substitutionTable2[256];\n\n// Initialize substitution tables\nvoid initializeTables() {\n    // Example initialization, you'll need to define realistic mappings\n    for (int i = 0; i < 256; ++i) {\n        substitutionTable1[i] = (char)((i + 1) % 256); // example mapping\n        substitutionTable2[i] = (char)((i + 5) % 256); // example mapping\n    }\n}\n\n// Function to convert input string based on substitution tables\nvoid convertAndProcessString(char *input) {\n    char encodedResult[1024] = \"\";\n    char tempGroup[6];\n    int len = strlen(input);\n\n    // Step 1: Encode input string using substitutionTable1\n    for (int i = 0; i < len; ++i) {\n        encodedResult[i] = substitutionTable1[(unsigned char)input[i]];\n    }\n    encodedResult[len] = '\\0';\n\n    // Step 2: Split into groups of five characters, substitute using substitutionTable2\n    for (int i = 0; i < len; i += 5) {\n        for (int j = 0; j < 5 && (i + j < len); ++j) {\n            tempGroup[j] = substitutionTable2[(unsigned char)encodedResult[i + j]];\n        }\n        tempGroup[5] = '\\0';\n\n        // Print the converted group\n        printf(\"%s\", tempGroup);\n    }\n\n    // New line for separation\n    printf(\"\\n\");\n}\n\nint main() {\n    // Initialize the tables\n    initializeTables();\n\n    // Define test datasets\n    char datasets[][1024] = {\n        \"SomeTestString\",\n        \"AnotherExample\",\n        \"MoreDataHere\"\n    };\n\n    // Process each dataset\n    for (int i = 0; i < sizeof(datasets) / sizeof(datasets[0]); ++i) {\n        convertAndProcessString(datasets[i]);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-12 23:16:28"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def convert_string(input_string):\n    # First conversion table\n    first_table = {\n        'A': '00001', 'B': '00010', 'C': '00011', 'D': '00100', 'E': '00101',\n        'F': '00110', 'G': '00111', 'H': '01000', 'I': '01001', 'J': '01010',\n        'K': '01011', 'L': '01100', 'M': '01101', 'N': '01110', 'O': '01111',\n        'P': '10000', 'Q': '10001', 'R': '10010', 'S': '10011', 'T': '10100',\n        'U': '10101', 'V': '10110', 'W': '10111', 'X': '11000', 'Y': '11001',\n        'Z': '11010', ' ': '11011'\n    }\n    \n    # Second conversion table\n    second_table = {\n        '00000': 'A', '00001': 'B', '00010': 'C', '00011': 'D', '00100': 'E',\n        '00101': 'F', '00110': 'G', '00111': 'H', '01000': 'I', '01001': 'J',\n        '01010': 'K', '01011': 'L', '01100': 'M', '01101': 'N', '01110': 'O',\n        '01111': 'P', '10000': 'Q', '10001': 'R', '10010': 'S', '10011': 'T',\n        '10100': 'U', '10101': 'V', '10110': 'W', '10111': 'X', '11000': 'Y',\n        '11001': 'Z', '11010': ' '\n    }\n    \n    # Convert input string to binary codes\n    binary_string = ''.join(first_table[char] for char in input_string.upper())\n    \n    # Split binary string into groups of 5\n    groups = [binary_string[i:i+5] for i in range(0, len(binary_string), 5)]\n    \n    # Convert groups back to characters\n    result = ''.join(second_table[group] for group in groups)\n    \n    return result\n\n# Read number of datasets\nn = int(input())\n\n# Process each dataset\nfor _ in range(n):\n    input_string = input().strip()\n    print(convert_string(input_string))",
    "timestamp": "2025-08-12 23:16:40"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def main():\n    char_to_code = {\n        'A': '00000', 'B': '00001', 'C': '00010', 'D': '00011', 'E': '00100',\n        'F': '00101', 'G': '00110', 'H': '00111', 'I': '01000', 'J': '01001',\n        'K': '01010', 'L': '01011', 'M': '01100', 'N': '01101', 'O': '01110',\n        'P': '01111', 'Q': '10000', 'R': '10001', 'S': '10010', 'T': '10011',\n        'U': '10100', 'V': '10101', 'W': '10110', 'X': '10111', 'Y': '11000',\n        'Z': '11001', ' ': '11010', '.': '11011', ',': '11100', '-': '11101',\n        \"'\": '11110', '?': '11111'\n    }\n    \n    code_to_char = {\n        '00000': 'A', '00001': 'B', '00010': 'C', '00011': 'D', '00100': 'E',\n        '00101': 'F', '00110': 'G', '00111': 'H', '01000': 'I', '01001': 'J',\n        '01010': 'K', '01011': 'L', '01100': 'M', '01101': 'N', '01110': 'O',\n        '01111': 'P', '10000': 'Q', '10001': 'R', '10010': 'S', '10011': 'T',\n        '10100': 'U', '10101': 'V', '10110': 'W', '10111': 'X', '11000': 'Y',\n        '11001': 'Z', '11010': ' ', '11011': '.', '11100': ',', '11101': '-',\n        '11110': \"'\", '11111': '?'\n    }\n    \n    import sys\n    for line in sys.stdin:\n        line = line.strip()\n        binary_str = ''.join([char_to_code[c] for c in line])\n        groups = [binary_str[i:i+5] for i in range(0, len(binary_str), 5)]\n        result = ''.join([code_to_char.get(group, '?') for group in groups])\n        print(result)\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-12 23:17:03"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <vector>\n\nstd::unordered_map<char, std::string> encodeMap = {\n    {'A', \"00\"}, {'B', \"01\"}, {'C', \"02\"}, {'D', \"03\"},\n    {'E', \"04\"}, {'F', \"05\"}, {'G', \"06\"}, {'H', \"07\"},\n    {'I', \"08\"}, {'J', \"09\"}, {'K', \"10\"}, {'L', \"11\"},\n    {'M', \"12\"}, {'N', \"13\"}, {'O', \"14\"}, {'P', \"15\"},\n    {'Q', \"16\"}, {'R', \"17\"}, {'S', \"18\"}, {'T', \"19\"},\n    {'U', \"20\"}, {'V', \"21\"}, {'W', \"22\"}, {'X', \"23\"},\n    {'Y', \"24\"}, {'Z', \"25\"}\n};\n\nstd::unordered_map<std::string, char> decodeMap = {\n    {\"00000\", 'A'}, {\"00001\", 'B'}, {\"00010\", 'C'}, {\"00011\", 'D'},\n    {\"00100\", 'E'}, {\"00101\", 'F'}, {\"00110\", 'G'}, {\"00111\", 'H'},\n    {\"01000\", 'I'}, {\"01001\", 'J'}, {\"01010\", 'K'}, {\"01011\", 'L'},\n    {\"01100\", 'M'}, {\"01101\", 'N'}, {\"01110\", 'O'}, {\"01111\", 'P'},\n    {\"10000\", 'Q'}, {\"10001\", 'R'}, {\"10010\", 'S'}, {\"10011\", 'T'},\n    {\"10100\", 'U'}, {\"10101\", 'V'}, {\"10110\", 'W'}, {\"10111\", 'X'},\n    {\"11000\", 'Y'}, {\"11001\", 'Z'}\n};\n\nstd::string encodeString(const std::string& input) {\n    std::string encoded;\n    for (char ch : input)\n        encoded += encodeMap[ch];\n    return encoded;\n}\n\nstd::vector<std::string> splitIntoGroups(const std::string& str, size_t groupSize) {\n    std::vector<std::string> groups;\n    for (size_t i = 0; i < str.size(); i += groupSize) {\n        std::string group = str.substr(i, groupSize);\n        if (group.size() < groupSize)\n            group.append(groupSize - group.size(), '0');\n        groups.push_back(group);\n    }\n    return groups;\n}\n\nstd::string decodeGroups(const std::vector<std::string>& groups) {\n    std::string decoded;\n    for (const auto& group : groups)\n        decoded += decodeMap[group];\n    return decoded;\n}\n\nint main() {\n    std::string input;\n    while (std::getline(std::cin, input)) {\n        std::string encodedString = encodeString(input);\n        std::vector<std::string> groups = splitIntoGroups(encodedString, 5);\n        std::string decodedResult = decodeGroups(groups);\n        std::cout << decodedResult << std::endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 10:49:33"
  }
]