[
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<string>\n\nusing namespace std;\n\nint main(void)\n{\n\tchar c1[33]=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tchar c2[33]=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\tstring s1[32]={\n\t\t\"101\",\n\t\t\"000000\",\n\t\t\"000011\",\n\t\t\"10010001\",\n\t\t\"010001\",\n\t\t\"000001\",\n\t\t\"100101\",\n\t\t\"10011010\",\n\t\t\"0101\",\n\t\t\"0001\",\n\t\t\"110\",\n\t\t\"01001\",\n\t\t\"10011011\",\n\t\t\"010000\",\n\t\t\"0111\",\n\t\t\"10011000\",\n\t\t\"0110\",\n\t\t\"00100\",\n\t\t\"10011001\",\n\t\t\"10011110\",\n\t\t\"00101\",\n\t\t\"111\",\n\t\t\"10011111\",\n\t\t\"1000\",\n\t\t\"00110\",\n\t\t\"00111\",\n\t\t\"10011100\",\n\t\t\"10011101\",\n\t\t\"000010\",\n\t\t\"10010010\",\n\t\t\"10010011\",\n\t\t\"10010000\"\n\t};\n\tchar s2[32][6];\n\tfor(int i=0;i<32;i++){\n\t\tint n=i;\n\t\tfor(int j=0;j<5;j++){\n\t\t\tif(n%2==0) s2[i][4-j]='0';\n\t\t\telse s2[i][4-j]='1';\n\t\t\tn/=2;\n\t\t}\n\t\ts2[i][5]='\\0';\n\t}\n\n\tmap<char,string> m1;\n\tmap<string,char> m2;\n\n\tfor(int i=0;i<32;i++){\n\t\tm1[c1[i]]=s1[i];\n\t\tm2[s2[i]]=c2[i];\n\t}\n\n\tstring str;\n\n\twhile(getline(cin,str)){\n\t\tstring s3=\"\";\n\t\tfor(int i=0;i<str.size();i++){\n\t\t\ts3+=m1[str[i]];\n\t\t}\n\t\twhile(s3.size()%5!=0){\n\t\t\ts3+='0';\n\t\t}\n\t\tstring s4;\n\t\tfor(int i=0;i<s3.size();i++){\n\t\t\tif(i%5==0){\n\t\t\t\ts4=s3[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\ts4+=s3[i];\n\t\t\t}\n\t\t\tif(i%5==4){\n\t\t\t\tcout<<m2[s4];\n\t\t\t}\n\t\t}\n\t\tcout<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid hantei(char *str);\n\nchar DataBase[][3][80] =\n\t{\n\t/* [文字] ,[符号＿変換前] ,[符号＿変換後] */\n\t{ \" \", \"101\", \"11010\" },{ \"\\'\", \"000000\", \"11110\" },{ \",\", \"000011\", \"11100\" },{ \"-\", \"10010001\", \"11101\" },\n\t{ \".\", \"010001\", \"11011\" },{ \"?\", \"000001\", \"11111\" },{ \"A\", \"100101\", \"00000\" },{ \"B\", \"10011010\", \"00001\" },\n    { \"C\", \"0101\", \"00010\" },{ \"D\", \"0001\", \"00011\" },{ \"E\", \"110\", \"00100\" },{ \"F\", \"01001\", \"00101\" },\n\t{ \"G\", \"10011011\", \"00110\" },{ \"H\", \"010000\", \"00111\" },{ \"I\", \"0111\", \"01000\" },{ \"J\", \"10011000\", \"01001\" },\n\t{ \"K\", \"0110\", \"01010\" },{ \"L\", \"00100\", \"01011\" },{ \"M\", \"10011001\", \"01100\" },{ \"N\", \"10011110\", \"01101\" },\n\t{ \"O\", \"00101\", \"01110\" },{ \"P\", \"111\", \"01111\" },{ \"Q\", \"10011111\", \"10000\" },{ \"R\", \"1000\", \"10001\" },\n\t{ \"S\", \"00110\", \"10010\" },{ \"T\", \"00111\", \"10011\" },{ \"U\", \"10011100\", \"10100\" },{ \"V\", \"10011101\", \"10101\" },\n\t{ \"W\", \"000010\", \"10110\" },{ \"X\", \"10010010\", \"10111\" },{ \"Y\", \"10010011\", \"11000\" },{ \"Z\", \"100100000\", \"11001\" },\n    {\"\", \"\", \"\" }\n};\n\n\nint main(void)\n{\n\tchar str1[1000],str2[1000],ch;\n\tint cut_i;\n\t\n\t/*scanf(\"%[A-Z \\'.?,-]\",str);\n\t\thantei(str1);*/\n\tcut_i=0;\n\twhile((ch = getchar())!=EOF){\n\t\tif(ch !='\\n'){\n\t\t\tstr2[cut_i] = ch;\n\t\t\tcut_i++;\n\t\t}\n\t\telse {\n\t\t\tif(cut_i==0){\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrncpy(str1,str2,cut_i);\n\t\t\t}\n\t\t\tstr1[cut_i]='\\0';\n\t\t\thantei(str1);\n\t\t\tprintf(\" \\n\");\n\t\t\tcut_i=0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\nvoid hantei(char *str)\n{\n\tint len1,cut_i,cut_j,count;\n\tchar ans[1000]={\"\"},str2[1000]={\"\"},str3[1000]={\"\"};\n\tchar zero[]={\"0000\"};\n\n\tlen1 = strlen(str);\n\tcount = 0;\n\n\tfor(cut_i=0;cut_i<len1;cut_i++){\n\t\tcut_j=0;\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(!strncmp((str+cut_i),DataBase[cut_j][0],1)){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(str2,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\telse if(count !=0){\n\t\t\t\t\tstrcpy(str2+count,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\t\n\tlen1 = strlen(str2);\n\tcount = 0;\n\n\tif( len1 % 5 != 0){\n\t\tcut_i = 5 - len1 % 5;\n\t\tstrncat(str2,zero,cut_i);\n\t\tlen1 = strlen(str2);\n\t}\n\n\n\tfor(cut_i=0;cut_i<len1;cut_i+=5){\n\t\tcut_j=0;\n\t\tstrncpy(str3,str2+cut_i,5);\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(strcmp(str3,DataBase[cut_j][2]) == 0){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(ans,DataBase[cut_j][0]);\n\t\t\t\t\tcount =strlen(ans);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstrcat(ans,DataBase[cut_j][0]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\tprintf(ans);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <map>\nusing namespace std;\n\nstring i_to_05b(unsigned int n){\n\tstring s = \"\";\n\tdo{\n\t\tchar c = (n & 1U) + '0' ;\n\t\ts.push_back( c );\n\t\tn >>= 1;\n\t}while( n != 0 );\n\n\twhile( s.size() < 5 )\n\t\ts.push_back('0');\n\treverse( s.begin() , s.end() );\n\t\n\treturn s;\n}\n\nvoid makeTable1(map<char,string>& table1){\n\ttable1[' ']  = \"101\";\n\ttable1['\\''] = \"000000\";\n\ttable1[',']  = \"000011\";\n\ttable1['-']  = \"10010001\";\n\ttable1['.']  = \"010001\";\n\ttable1['?']  = \"000001\";\n\ttable1['A']  = \"100101\";\n\ttable1['B']  = \"10011010\";\n\ttable1['C']  = \"0101\";\n\ttable1['D']  = \"0001\";\n\ttable1['E']  = \"110\";\n\ttable1['F']  = \"01001\";\n\ttable1['G']  = \"10011011\";\n\ttable1['H']  = \"010000\";\n\ttable1['I']  = \"0111\";\n\ttable1['J']  = \"10011000\";\n\ttable1['K']  = \"0110\";\n\ttable1['L']  = \"00100\";\n\ttable1['M']  = \"10011001\";\n\ttable1['N']  = \"10011110\";\n\ttable1['O']  = \"00101\";\n\ttable1['P']  = \"111\";\n\ttable1['Q']  = \"10011111\";\n\ttable1['R']  = \"1000\";\n\ttable1['S']  = \"00110\";\n\ttable1['T']  = \"00111\";\n\ttable1['U']  = \"10011100\";\n\ttable1['V']  = \"10011101\";\n\ttable1['W']  = \"000010\";\n\ttable1['X']  = \"10010010\";\n\ttable1['Y']  = \"10010011\";\n\ttable1['Z']  = \"10010000\";\n}\n\nvoid makeTable2(map<string,char>& table2){\n\tfor(char c = 'A' ; c <= 'Z' ; ++c){\n\t\ttable2[ i_to_05b( (int)(c - 'A') ) ] = c;\n\t}\n\ttable2[\"11010\"] = ' ';\n\ttable2[\"11011\"] = '.';\n\ttable2[\"11100\"] = ',';\n\ttable2[\"11101\"] = '-';\n\ttable2[\"11110\"] = '\\'';\n\ttable2[\"11111\"] = '?';\n}\n\nstring encode(string p, map<char,string> table1){\n\t\n\tstring c = \"\";\n\tfor(int i=0 ; i<p.size() ; ++i ){\n\t\tc += table1[ p[i] ];\n\t}\n\treturn c;\n}\nstring decode(string c , map<string,char> table2){\n\tstring p = \"\";\n\twhile( c.size() % 5 != 0){\n\t\tc.push_back('0');\n\t}\n\tfor(int i=0 ; i+5 <= c.size() ; i += 5 ){\n\t\tp.push_back( table2[ c.substr( i , 5 ) ] );\n\t}\n\treturn p;\n}\n\nint main(){\n\tstring p;\n\tmap<char,string> table1;\n\tmap<string,char> table2;\n\tmakeTable1(table1);\n\tmakeTable2(table2);\n\n\twhile( cin >> p ){\n\t\t//cout << decode( \"000000000100\" , table2 ) << endl;\n\t\tcout << decode( encode( p , table1 ) , table2 ) << endl;\n\t\t//cout << decode( encode( \"PETER POTTER\" , table1 ) , table2) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint main(void) {\n\n  char c;\n  char code[6];\n\n  int size;\n  char buf[500]=\"\";\n\n  int i,j=0;\n\n  do {\n  //encode\n  while((c=getchar())!=EOF) {\n\n    if(c=='\\n') break;\n\n    switch(c) {\n      \n    case ' ':\n      strcat(buf,\"101\");\n      break;\n\n    case '\\'':\n      strcat(buf,\"000000\");\n      break;\n\n    case ',':\n      strcat(buf,\"000011\");\n      break;\n      \n    case '-':\n      strcat(buf,\"10010001\");\n      break;\n      \n    case '.':\n      strcat(buf,\"010001\");\n      break;\n\n    case '?':\n      strcat(buf,\"000001\");\n      break;\n      \n    case 'A':\n      strcat(buf,\"100101\");\n      break;\n      \n    case 'B':\n      strcat(buf,\"10011010\");\n      break;\n\n    case 'C':\n      strcat(buf,\"0101\");\n      break;\n\n    case 'D':\n      strcat(buf,\"0001\");\n      break;\n\n    case 'E':\n      strcat(buf,\"110\");\n      break;\n      \n    case 'F':\n      strcat(buf,\"01001\");\n      break;\n      \n    case 'G':\n      strcat(buf,\"10011011\");\n      break;\n      \n    case 'H':\n      strcat(buf,\"010000\");\n      break;\n      \n    case 'I':\n      strcat(buf,\"0111\");\n      break;\n\n    case 'J':\n      strcat(buf,\"10011000\");\n      break;\n\n    case 'K':\n      strcat(buf,\"0110\");\n      break;\n\n    case 'L':\n      strcat(buf,\"00100\");\n      break;\n\n    case 'M':\n      strcat(buf,\"10011001\");\n      break;\n\n    case 'N':\n      strcat(buf,\"10011110\");\n      break;\n      \n    case 'O':\n      strcat(buf,\"00101\");\n      break;\n      \n    case 'P':\n      strcat(buf,\"111\");\n      break;\n      \n    case 'Q':\n      strcat(buf,\"10011111\");\n      break;\n      \n    case 'R':\n      strcat(buf,\"1000\");\n      break;\n      \n    case 'S':\n      strcat(buf,\"00110\");\n      break;\n\n    case 'T':\n      strcat(buf,\"00111\");\n      break;\n\n    case 'U':\n      strcat(buf,\"10011100\");\n      break;\n\n    case 'V':\n      strcat(buf,\"10011101\");\n      break;\n\n    case 'W':\n      strcat(buf,\"000010\");\n      break;\n\n    case 'X':\n      strcat(buf,\"10010010\");\n      break;\n\n    case 'Y':\n      strcat(buf,\"10010011\");\n      break;\n\n    case 'Z':\n      strcat(buf,\"10010000\");\n      break;\n\n    }\n\n  }\n\n  //printf(\"%s\\n\",buf);\n\n  if((size=strlen(buf)%5)!=0) {\n\n    for(i=0;i<5-size;i++) {\n\n      strcat(buf,\"0\");\n\n      }\n\n  }\n\n  //printf(\"%s\\n\",buf);\n\n  //decode\n  for(i=0;i<strlen(buf);i++) {\n\n    code[j]=buf[i];\n    j++;\n\n    if(i%5==4) {\n      code[5]='\\0';\n      //printf(\"%s\\n\",code);\n      j=0;\n\n      if(strcmp(code,\"00000\")==0) printf(\"A\");\n\n      if(strcmp(code,\"00001\")==0) printf(\"B\");\n\n      if(strcmp(code,\"00010\")==0) printf(\"C\");\n\n      if(strcmp(code,\"00011\")==0) printf(\"D\");\n\n      if(strcmp(code,\"00100\")==0) printf(\"E\");\n\n      if(strcmp(code,\"00101\")==0) printf(\"F\");\n\n      if(strcmp(code,\"00110\")==0) printf(\"G\");\n\n      if(strcmp(code,\"00111\")==0) printf(\"H\");\n\n      if(strcmp(code,\"01000\")==0) printf(\"I\");\n\n      if(strcmp(code,\"01001\")==0) printf(\"J\");\n\n      if(strcmp(code,\"01010\")==0) printf(\"K\");\n\n      if(strcmp(code,\"01011\")==0) printf(\"L\");\n\n      if(strcmp(code,\"01100\")==0) printf(\"M\");\n\n      if(strcmp(code,\"01101\")==0) printf(\"N\");\n\n      if(strcmp(code,\"01110\")==0) printf(\"O\");\n\n      if(strcmp(code,\"01111\")==0) printf(\"P\");\n\n      if(strcmp(code,\"10000\")==0) printf(\"Q\");\n\n      if(strcmp(code,\"10001\")==0) printf(\"R\");\n\n      if(strcmp(code,\"10010\")==0) printf(\"S\");\n\n      if(strcmp(code,\"10011\")==0) printf(\"T\");\n\n      if(strcmp(code,\"10100\")==0) printf(\"U\");\n\n      if(strcmp(code,\"10101\")==0) printf(\"V\");\n\n      if(strcmp(code,\"10110\")==0) printf(\"W\");\n\n      if(strcmp(code,\"10111\")==0) printf(\"X\");\n\n      if(strcmp(code,\"11000\")==0) printf(\"Y\");\n\n      if(strcmp(code,\"11001\")==0) printf(\"Z\");\n\n      if(strcmp(code,\"11010\")==0) printf(\" \");\n\n      if(strcmp(code,\"11011\")==0) printf(\".\");\n\n      if(strcmp(code,\"11100\")==0) printf(\",\");\n\n      if(strcmp(code,\"11101\")==0) printf(\"-\");\n\n      if(strcmp(code,\"11110\")==0) printf(\"'\");\n\n      if(strcmp(code,\"11111\")==0) printf(\"?\");\n\n    }\n\n  }\n\n  puts(\"\");\n\n  } while(c!=EOF);\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<string>\n#include<iostream>\n#include<queue>\n#include<map>\n#include<set>\n#include<complex>\n#include<stack>\n#include<cmath>\n  \nusing namespace std;\n  \n#define reps(i,f,n) for(int i=f;i<int(n);i++)\n#define rep(i,n) reps(i,0,n)\n\n\n\nint main(){\n\twhile(1){\n\tstring cc[333];\n\t\n\tcc[' ']=\"101\";\n\tcc['\\'']=\"000000\";\n\tcc[',']=\"000011\";\n\tcc['-']=\"10010001\";\n\tcc['.']=\"010001\";\n\tcc['?']=\"000001\";\n\t\n\tcc['A']=\"100101\";\n\tcc['B']=\"10011010\";\n\t\n\tcc['C']=\"0101\";\n\tcc['D']=\"0001\";\n\tcc['E']=\"110\";\n\tcc['F']=\"01001\";\n\tcc['G']=\"10011011\";\n\tcc['H']=\"010000\";\n\tcc['I']=\"0111\";\n\tcc['J']=\"10011000\";\n\t\n\tcc['K']=\"0110\";\n\tcc['L']=\"00100\";\n\tcc['M']=\"10011001\";\n\tcc['N']=\"10011110\";\n\tcc['O']=\"00101\";\n\tcc['P']=\"111\";\n\tcc['Q']=\"10011111\";\n\tcc['R']=\"1000\";\n\t\n\tcc['S']=\"00110\";\n\tcc['T']=\"00111\";\n\tcc['U']=\"10011100\";\n\tcc['V']=\"10011101\";\n\tcc['W']=\"000010\";\n\tcc['X']=\"10010010\";\n\tcc['Y']=\"10010011\";\n\tcc['Z']=\"10010000\";\n\t\n\t\n\tmap<int,char> dd;\n\trep(i,26){\n\t\tdd[i]='A'+i;\n\t}\n\tdd[26]=' ';\n\tdd[27]='.';\n\tdd[28]=',';\n\tdd[29]='-';\n\tdd[30]='\\'';\n\tdd[31]='?';\n\t\n\t\n\tstring str=\"\";\n\tstring in;\n\twhile(1){\n\t\tgetline(cin,in);\n\t\tif(cin.eof())break;\n\t\tif(str.size()!=0)str+=\" \";\n\t\tstr += in;\n\t\tbreak;\n\t}\n\t\n\tif(cin.eof())break;\n\t\n\t\n\tstring conv=\"\";\n\trep(i,str.size()){\n\t\tconv += cc[str[i]];\n\t}\n\t\n\twhile(conv.size()%5!=0){\n\t\tconv += \"0\";\n\t}\n\tstring ans;\n\t\n\tfor(int i=0;i<conv.size();i+=5){\n\t\t\n\t\tint num = 0;\n\t\trep(j,5){\n\t\t\tnum += (conv[i+j]-'0')*(1<<(4-j));\n\t\t}\n\t\t\n\t\tans += dd[num];\n\t}\n\t\n\tcout<<ans<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\nusing namespace std;\n\nstring convert(string str) {\n  map<char, string> d;\n  d[' '] = \"101\";\n  d['\\''] = \"000000\";\n  d[','] = \"000011\";\n  d['-'] = \"10010001\";\n  d['.'] = \"010001\";\n  d['?'] = \"000001\";\n  d['A'] = \"100101\";\n  d['B'] = \"10011010\";\n  d['C'] = \"0101\";\n  d['D'] = \"0001\";\n  d['E'] = \"110\";\n  d['F'] = \"01001\";\n  d['G'] = \"10011011\";\n  d['H'] = \"010000\";\n  d['I'] = \"0111\";\n  d['J'] = \"10011000\";\n  d['K'] = \"0110\";\n  d['L'] = \"00100\";\n  d['M'] = \"10011001\";\n  d['N'] = \"10011110\";\n  d['O'] = \"00101\";\n  d['P'] = \"111\";\n  d['Q'] = \"10011111\";\n  d['R'] = \"1000\";\n  d['S'] = \"00110\";\n  d['T'] = \"00111\";\n  d['U'] = \"10011100\";\n  d['V'] = \"10011101\";\n  d['W'] = \"000010\";\n  d['X'] = \"10010010\";\n  d['Y'] = \"10010011\";\n  d['Z'] = \"10010000\";\n\n  map<string, char> e;\n  e[\"00000\"] = 'A';\n  e[\"00001\"] = 'B';\n  e[\"00010\"] = 'C';\n  e[\"00011\"] = 'D';\n  e[\"00100\"] = 'E';\n  e[\"00101\"] = 'F';\n  e[\"00110\"] = 'G';\n  e[\"00111\"] = 'H';\n  e[\"01000\"] = 'I';\n  e[\"01001\"] = 'J';\n  e[\"01010\"] = 'K';\n  e[\"01011\"] = 'L';\n  e[\"01100\"] = 'M';\n  e[\"01101\"] = 'N';\n  e[\"01110\"] = 'O';\n  e[\"01111\"] = 'P';\n  e[\"10000\"] = 'Q';\n  e[\"10001\"] = 'R';\n  e[\"10010\"] = 'S';\n  e[\"10011\"] = 'T';\n  e[\"10100\"] = 'U';\n  e[\"10101\"] = 'V';\n  e[\"10110\"] = 'W';\n  e[\"10111\"] = 'X';\n  e[\"11000\"] = 'Y';\n  e[\"11001\"] = 'Z';\n  e[\"11010\"] = ' ';\n  e[\"11011\"] = '.';\n  e[\"11100\"] = ',';\n  e[\"11101\"] = '-';\n  e[\"11110\"] = '\\'';\n  e[\"11111\"] = '?';\n  string str2 = \"\";\n  for(int i = 0; i < str.length(); i++) {\n    str2 += d[str[i]];\n  }\n  int n = 5 - str2.length() % 5;\n  for(int i = 0; n < 5 && i < n; i++) {\n    str2 += \"0\";\n  }\n  string str3;\n  for(int i = 0; i < str2.length(); i += 5) {\n    str3 += e[str2.substr(i, 5)];\n  }\n  return str3;\n}\n\nint main() {\n  string str;\n  while(getline(cin, str)) {\n    cout << convert(str) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <iostream>\n#include <map>\n#include <vector>\nusing namespace std;\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n\nconst char dat[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint main() {\n    map<char, string> of;\n    of[' '] = \"101\";\n    of['\\''] = \"000000\";\n    of[','] = \"000011\";\n    of['-'] = \"10010001\";\n    of['.'] = \"010001\";\n    of['?'] = \"000001\";\n    of['A'] = \"100101\";\n    of['B'] = \"10011010\";\n    of['C'] = \"0101\";\n    of['D'] = \"0001\";\n    of['E'] = \"110\";\n    of['F'] = \"01001\";\n    of['G'] = \"10011011\";\n    of['H'] = \"010000\";\n    of['I'] = \"0111\";\n    of['J'] = \"10011000\";\n    of['K'] = \"0110\";\n    of['L'] = \"00100\";\n    of['M'] = \"10011001\";\n    of['N'] = \"10011110\";\n    of['O'] = \"00101\";\n    of['P'] = \"111\";\n    of['Q'] = \"10011111\";\n    of['R'] = \"1000\";\n    of['S'] = \"00110\";\n    of['T'] = \"00111\";\n    of['U'] = \"10011100\";\n    of['V'] = \"10011101\";\n    of['W'] = \"000010\";\n    of['X'] = \"10010010\";\n    of['Y'] = \"10010011\";\n    of['Z'] = \"10010000\";\n    string s;\n    while (getline(cin, s)) {\n        string w;\n        rep (i, s.size()) if (s[i] != '\\r') w += of[s[i]];\n        while (w.size() % 5) w += '0';\n        for (int k = 0; k < (int)w.size(); k+=5) {\n            int a = 0;\n            rep (i, 5) a = a*2 + (w[k+i] == '1');\n            putchar(dat[a]);\n        }\n        putchar('\\n');\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <functional>\n#include <numeric>\n#include <stack>\n#include <queue>\n#include <map>\n#include <set>\n#include <utility>\n#include <sstream>\n#include <complex>\n\nusing namespace std;\n\n#define FOR(i,a,b) for(long long i=(a);i<(b);i++)\n#define REP(i,N) for(long long i=0;i<(N);i++)\n#define ALL(s) (s).begin(),(s).end()\n#define fi first\n#define se second\n\n#define PI acos(-1.0)\n#define INF 1000000007\n\ntypedef long long ll;\ntypedef pair<ll, ll> P;\ntypedef pair<double, double> PD;\ntypedef pair<string, ll> PS;\ntypedef vector<ll> V;\n\nstring s, t, ans;\nstring table = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nstring p[] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\",\n\"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\",\n\"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\",\n\"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\",\n\"10010010\", \"10010011\", \"10010000\" };\nstring table2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint main(){\n\twhile (getline(cin, s)){\n\t\tREP(i, s.size()){\n\t\t\tREP(j, table.size()){\n\t\t\t\tif (s[i] == table[j]){\n\t\t\t\t\tt += p[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\tif (t.size() % 5 != 0){\n\t\t\tint a = 5 - t.size() % 5;\n\t\t\tREP(i, a){\n\t\t\t\tt += \"0\";\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < t.size(); i += 5){\n\t\t\tstring k = t.substr(i, 5);\n\t\t\tint sum = 0;\n\t\t\tREP(i, 5){\n\t\t\t\tif (i != 4) sum += pow(2 * (k[i] - '0'), 4 - i);\n\t\t\t\telse sum += k[i] - '0';\n\t\t\t}\n\t\t\tans += table2[sum];\n\t\t}\n\t\tcout << ans << endl;\n\t\tt.clear();\n\t\tans.clear();\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nclass Program\n{\n    void Calc()\n    {\n        var dic = new Dictionary<char, string>\n        {\n{' ', \"101\"},\n{'\\'', \"000000\"},\n{',', \"000011\"},\n{'-', \"10010001\"},\n{'.', \"010001\"},\n{'?', \"000001\"},\n{'A', \"100101\"},\n{'B', \"10011010\"},\n{'C', \"0101\"},\n{'D', \"0001\"},\n{'E', \"110\"},\n{'F', \"01001\"},\n{'G', \"10011011\"},\n{'H', \"010000\"},\n{'I', \"0111\"},\n{'J', \"10011000\"},\n{'K', \"0110\"},\n{'L', \"00100\"},\n{'M', \"10011001\"},\n{'N', \"10011110\"},\n{'O', \"00101\"},\n{'P', \"111\"},\n{'Q', \"10011111\"},\n{'R', \"1000\"},\n{'S', \"00110\"},\n{'T', \"00111\"},\n{'U', \"10011100\"},\n{'V', \"10011101\"},\n{'W', \"000010\"},\n{'X', \"10010010\"},\n{'Y', \"10010011\"},\n{'Z', \"10010000\"},\n        };\n\n        var dic2 = new Dictionary<string, char>\n        {\n{\"11010\", ' '},\n{\"11110\", '\\''},\n{\"00000\", 'A'},\n{\"00001\", 'B'},\n{\"00010\", 'C'},\n{\"00011\", 'D'},\n{\"00100\", 'E'},\n{\"00101\", 'F'},\n{\"00110\", 'G'},\n{\"00111\", 'H'},\n{\"01000\", 'I'},\n{\"01001\", 'J'},\n{\"01010\", 'K'},\n{\"01011\", 'L'},\n{\"01100\", 'M'},\n{\"01101\", 'N'},\n{\"01110\", 'O'},\n{\"01111\", 'P'},\n{\"10000\", 'Q'},\n{\"10001\", 'R'},\n{\"10010\", 'S'},\n{\"10011\", 'T'},\n{\"10100\", 'U'},\n{\"10101\", 'V'},\n{\"10110\", 'W'},\n{\"10111\", 'X'},\n{\"11000\", 'Y'},\n{\"11001\", 'Z'},\n{\"11011\", '.'},\n{\"11100\", ','},\n{\"11101\", '-'},\n{\"11111\", '?'},\n        };\n\n        var str = Console.ReadLine();\n        var conv = string.Concat(str.Select(x => dic[x]));\n        var next = conv.Select((x, i) => new { x, i })\n            .GroupBy(x => x.i / 5)\n            .Select(x => string.Concat(x.Select(y => y.x)))\n            .ToArray();\n        if (next.Any())\n            next[next.Length - 1] += string.Concat(Enumerable.Repeat('0', 5 - next[next.Length - 1].Length));\n        Console.WriteLine(string.Concat(next.Select(x => dic2[x])));\n    }\n\n    static void Main()\n    {\n        new Program().Calc();\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<stdexcept>\n#include<cmath>\n#include<memory>\n#include<algorithm>\n#include<cstring>\n#include<ctime>\n#include<deque>\n#include<sstream>\n#include<iomanip>\n#include<sstream>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<string>\n#include<climits>\n#include<map>\n#include<set>\n#include<list>\n#include<cassert>\n#include<deque>\n#define REP(i,s,n) for(int i=s;i<n;i++)\n#define rep(i,n) REP(i,0,n)\n#define INF 1<<27\n#define all(n) n.begin(),n.end()\n#define insert(a,b,c,d) PP(P(a,b),P(c,d))\n#define F first\n#define S second\n#define pb push_back\n#define pf push_front\n#define LIM 100000\n#define dump(n) cout<<\"# \"<<#n<<\"=\"<<(n)<<endl\n#define debug(n) cout<<__FILE__<<\",\"<<__LINE__<<\": #\"<<#n<<\"=\"<<(n)<<endl\n#define iter(c) __typeof((c).begin())\n#define foreach(i,c) for(iter(c) i=(c).begin();i!=(c).end();i++)\n#define mp make_pair\nusing namespace std;\ntypedef pair<int,int> P;\ntypedef pair<P,P> PP;\ntypedef long long ll;\ntypedef unsigned long long ull;\nmap<char,string> cs;\nmap<string,char> sc;\n\nvoid init(){\n  cs[' '] = \"101\";\ncs['\\''] = \"000000\";\ncs[','] = \"000011\";\ncs['-'] = \"10010001\";\ncs['.'] = \"010001\";\ncs['?'] = \"000001\";\ncs['A'] = \"100101\";\ncs['B'] = \"10011010\";\ncs['C'] = \"0101\";\ncs['D'] = \"0001\";\ncs['E'] = \"110\";\ncs['F'] = \"01001\";\ncs['G'] = \"10011011\";\ncs['H'] = \"010000\";\ncs['I'] = \"0111\";\ncs['J'] = \"10011000\";\ncs['K'] = \"0110\";\ncs['L'] = \"00100\";\ncs['M'] = \"10011001\";\ncs['N'] = \"10011110\";\ncs['O'] = \"00101\";\ncs['P'] = \"111\";\ncs['Q'] = \"10011111\";\ncs['R'] = \"1000\";\ncs['S'] = \"00110\";\ncs['T'] = \"00111\";\ncs['U'] = \"10011100\";\ncs['V'] = \"10011101\";\ncs['W'] = \"000010\";\ncs['X'] = \"10010010\";\ncs['Y'] = \"10010011\";\ncs['Z'] = \"10010000\";\n\nsc[\"00000\"] = 'A';\nsc[\"00001\"] = 'B';\nsc[\"00010\"] = 'C';\nsc[\"00011\"] = 'D';\nsc[\"00100\"] = 'E';\nsc[\"00101\"] = 'F';\nsc[\"00110\"] = 'G';\nsc[\"00111\"] = 'H';\nsc[\"01000\"] = 'I';\nsc[\"01001\"] = 'J';\nsc[\"01010\"] = 'K';\nsc[\"01011\"] = 'L';\nsc[\"01100\"] = 'M';\nsc[\"01101\"] = 'N';\nsc[\"01110\"] = 'O';\nsc[\"01111\"] = 'P';\nsc[\"10000\"] = 'Q';\nsc[\"10001\"] = 'R';\nsc[\"10010\"] = 'S';\nsc[\"10011\"] = 'T';\nsc[\"10100\"] = 'U';\nsc[\"10101\"] = 'V';\nsc[\"10110\"] = 'W';\nsc[\"10111\"] = 'X';\nsc[\"11000\"] = 'Y';\nsc[\"11001\"] = 'Z';\nsc[\"11010\"] = ' ';\nsc[\"11011\"] = '.';\nsc[\"11100\"] = ',';\nsc[\"11101\"] = '-';\nsc[\"11110\"] = '\\'';\nsc[\"11111\"] = '?';\n\n\n} \n\n\nstring bina(string s){\n  string ret;\n  for(int i=0;i<s.length();i++){\n    ret += cs[s[i]];\n  }\n\n    while(ret.size()%5 != 0){\n      ret += \"0\";\n    }\n  \n  return ret;\n}\n\n\n\nint main(){\n  string s;\n  init();\n\n  while(getline(cin,s)){\n  string nes;\n  nes = bina(s);\n  for(int i=0;i<nes.length();i+=5){\n    cout << sc[nes.substr(i,5)];\n  }\n  cout << endl;\n  }\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n\tstring tmp;\n\t\twhile(getline(cin, tmp)){\n\t\tstring input_str = \"\";\n\t\tfor(int i=0; i<tmp.size(); i++){\n\t\t\tswitch(tmp[i]){\n\t\t\tcase ' ' :input_str += \"101\"\t    ;break;\n\t\t\tcase '\\'':input_str += \"000000\"\t\t;break;\n\t\t\tcase ',' :input_str += \"000011\"\t\t;break;\n\t\t\tcase '-' :input_str += \"10010001\"\t;break;\n\t\t\tcase '.' :input_str += \"010001\"\t\t;break;\n\t\t\tcase '?' :input_str += \"000001\"\t    ;break;\n\t\t\tcase 'A' :input_str += \"100101\"\t\t;break;\n\t\t\tcase 'B' :input_str += \"10011010\"\t;break;\n\t\t\tcase 'C' :input_str += \"0101\"\t\t;break;\n\t\t\tcase 'D' :input_str += \"0001\"\t\t;break;\n\t\t\tcase 'E' :input_str += \"110\"\t\t;break;\n\t\t\tcase 'F' :input_str += \"01001\"\t\t;break;\n\t\t\tcase 'G' :input_str += \"10011011\"\t;break;\n\t\t\tcase 'H' :input_str += \"010000\"\t\t;break;\n\t\t\tcase 'I' :input_str += \"0111\"\t\t;break;\n\t\t\tcase 'J' :input_str += \"10011000\"\t;break;\n\t\t\tcase 'K' :input_str += \"0110\"\t\t;break;\n\t\t\tcase 'L' :input_str += \"00100\"\t\t;break;\n\t\t\tcase 'M' :input_str += \"10011001\"\t;break;\n\t\t\tcase 'N' :input_str += \"10011110\"\t;break;\n\t\t\tcase 'O' :input_str += \"00101\"\t\t;break;\n\t\t\tcase 'P' :input_str += \"111\"\t\t;break;\n\t\t\tcase 'Q' :input_str += \"10011111\"\t;break;\n\t\t\tcase 'R' :input_str += \"1000\"\t\t;break;\n\t\t\tcase 'S' :input_str += \"00110\"\t\t;break;\n\t\t\tcase 'T' :input_str += \"00111\"\t\t;break;\n\t\t\tcase 'U' :input_str += \"10011100\"\t;break;\n\t\t\tcase 'V' :input_str += \"10011101\"\t;break;\n\t\t\tcase 'W' :input_str += \"000010\"\t\t;break;\n\t\t\tcase 'X' :input_str += \"10010010\"\t;break;\n\t\t\tcase 'Y' :input_str += \"10010011\"\t;break;\n\t\t\tcase 'Z' :input_str += \"10010000\"\t;break;\n\t\t\t}\n\t\t}\n\n\t\tint pad = 5 - input_str.size()%5;\n\t\tfor(int i=0; i<pad; i++)input_str += '0';\n\t\tstring out = \"\";\n\t\tfor(int i=0; i<input_str.size(); i+=5){\n\t\t\tstring output_str = input_str.substr(i, 5);\n\t\t\tif(output_str== \"00000\"){ out += 'A'; }\n\t\t\telse if( output_str==\"00001\") { out += 'B';}\t\n\t\t\telse if( output_str==\"00010\") { out += 'C';}\t\n\t\t\telse if( output_str==\"00011\") { out += 'D';}\t\n\t\t\telse if( output_str==\"00100\") { out += 'E';}\t\n\t\t\telse if( output_str==\"00101\") { out += 'F';}\t\n\t\t\telse if( output_str==\"00110\") { out += 'G';}\t\n\t\t\telse if( output_str==\"00111\") { out += 'H';}\t\n\t\t\telse if( output_str==\"01000\") { out += 'I';}\t\n\t\t\telse if( output_str==\"01001\") { out += 'J';}\t\n\t\t\telse if( output_str==\"01010\") { out += 'K';}\t\n\t\t\telse if( output_str==\"01011\") { out += 'L';}\t\n\t\t\telse if( output_str==\"01100\") { out += 'M';}\t\n\t\t\telse if( output_str==\"01101\") { out += 'N';}\t\n\t\t\telse if( output_str==\"01110\") { out += 'O';}\t\n\t\t\telse if( output_str==\"01111\") { out += 'P';}\t\n\t\t\telse if( output_str==\"10000\") { out += 'Q';}\t\n\t\t\telse if( output_str==\"10001\") { out += 'R';}\t\n\t\t\telse if( output_str==\"10010\") { out += 'S';}\t\n\t\t\telse if( output_str==\"10011\") { out += 'T';}\t\n\t\t\telse if( output_str==\"10100\") { out += 'U';}\t\n\t\t\telse if( output_str==\"10101\") { out += 'V';}\t\n\t\t\telse if( output_str==\"10110\") { out += 'W';}\t\n\t\t\telse if( output_str==\"10111\") { out += 'X';}\t\n\t\t\telse if( output_str==\"11000\") { out += 'Y';}\t\n\t\t\telse if( output_str==\"11001\") { out += 'Z';}\t\n\t\t\telse if( output_str==\"11010\") { out += ' ';}\t\n\t\t\telse if( output_str==\"11011\") { out += '.';}\t\n\t\t\telse if( output_str==\"11100\") { out += ',';}\t\n\t\t\telse if( output_str==\"11101\") { out += '-';}\t\n\t\t\telse if( output_str==\"11110\") { out += '\\'';} \n\t\t\telse if( output_str==\"11111\") { out += '?';}\n\t\t}\n\t\tcout << out << endl;\n\t\ttmp.clear(), input_str.clear(), out.clear();\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cmath>\n#include <algorithm>\n#include <stack>\n#include <queue>\n\nusing namespace std;\n\nusing namespace std;\n\nint main(){\n\n\tchar base[205],middle[900],result[900];\n\tint p,tmp;\n\n\twhile(fgets(base,205,stdin) != 0){\n\n\t\tp = 0;\n\t\tfor(int i = 0; base[i] != '\\0'; i++){\n\t\t\tswitch(base[i]){\n\t\t\tcase ' ':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase '\\'':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase ',':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase '_':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase '.':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase '?':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'A':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'E':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'G':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'H':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'I':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'J':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'K':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'M':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'N':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'O':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'P':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'Q':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'R':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'S':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'T':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'U':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'V':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'W':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'X':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'Y':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'Z':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(p % 5 == 1){\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t}else if(p % 5 == 2){\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t}else if(p % 5 == 3){\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t}else if(p % 5 == 4){\n\t\t\tmiddle[p++] = '0';\n\t\t}\n\n\t\tmiddle[p] = '\\0';\n\n\t\tp = 0;\n\n\t\tfor(int i = 0; middle[i] != '\\0';i += 5){\n\t\t\ttmp = 16*(middle[i] - '0')+ 8*(middle[i+1] - '0') + 4*(middle[i+2] - '0') + 2*(middle[i+3] - '0')+ (middle[i+4] - '0');\n\t\t\tif(tmp <= 25){\n\t\t\t\tresult[p++] = 'A'+tmp;\n\t\t\t}else{\n\t\t\t\tswitch(tmp){\n\t\t\t\tcase 26:\n\t\t\t\t\tresult[p++] = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 27:\n\t\t\t\t\tresult[p++] = '.';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 28:\n\t\t\t\t\tresult[p++] = ',';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 29:\n\t\t\t\t\tresult[p++] = '_';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 30:\n\t\t\t\t\tresult[p++] = '\\'';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 31:\n\t\t\t\t\tresult[p++] = '?';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif(middle[i+5] == '\\0'){\n\t\t\t\tresult[p] = '\\0';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%s\\n\",result);\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n\nusing namespace std;\n\nint bitstrtoint(string str){\n  int res = 0;\n  for(int i = 0; i < str.size(); i++){\n    res *= 2;\n    res += str[i] == '1';\n  }\n  return res;\n}\n\nint main(){\n  string str;\n  while(getline(cin, str)){\n    string numstr = \"\";\n    for(int i = 0; i < str.size(); i++){\n      switch(str[i]){\n      case ' ':\n        numstr += \"101\";\n        break;\n      case '\\'':\n        numstr += \"000000\";\n        break;\n      case ',':\n        numstr += \"000011\";\n        break;\n      case '-':\n        numstr += \"10010001\";\n        break;\n      case '.':\n        numstr += \"010001\";\n        break;\n      case '?':\n        numstr += \"000001\";\n        break;\n      case 'A':\n        numstr += \"100101\";\n        break;\n      case 'B':\n        numstr += \"10011010\";\n        break;\n      case 'C':\n        numstr += \"0101\";\n        break;\n      case 'D':\n        numstr += \"0001\";\n        break;\n      case 'E':\n        numstr += \"110\";\n        break;\n      case 'F':\n        numstr += \"01001\";\n        break;\n      case 'G':\n        numstr += \"10011011\";\n        break;\n      case 'H':\n        numstr += \"010000\";\n        break;\n      case 'I':\n        numstr += \"0111\";\n        break;\n      case 'J':\n        numstr += \"10011000\";\n        break;\n      case 'K':\n        numstr += \"0110\";\n        break;\n      case 'L':\n        numstr += \"00100\";\n        break;\n      case 'M':\n        numstr += \"10011001\";\n        break;\n      case 'N':\n        numstr += \"10011110\";\n        break;\n      case 'O':\n        numstr += \"00101\";\n        break;\n      case 'P':\n        numstr += \"111\";\n        break;\n      case 'Q':\n        numstr += \"10011111\";\n        break;\n      case 'R':\n        numstr += \"1000\";\n        break;\n      case 'S':\n        numstr += \"00110\";\n        break;\n      case 'T':\n        numstr += \"00111\";\n        break;\n      case 'U':\n        numstr += \"10011100\";\n        break;\n      case 'V':\n        numstr += \"10011101\";\n        break;\n      case 'W':\n        numstr += \"000010\";\n        break;\n      case 'X':\n        numstr += \"10010010\";\n        break;\n      case 'Y':\n        numstr += \"10010011\";\n        break;\n      case 'Z':\n        numstr += \"10010000\";\n      }\n    }\n    str = \"\";\n    for(int i = 0; i < numstr.size(); i += 5){\n      int code = bitstrtoint(numstr.substr(i, 5));\n      if(0 <= code && code < 26){\n        str += (char)(code + 65);\n      }\n      else{\n        switch(code){\n        case 26:\n          str += \" \";\n          break;\n        case 27:\n          str += \".\";\n          break;\n        case 28:\n          str += \",\";\n          break;\n        case 29:\n          str += \"-\";\n          break;\n        case 30:\n          str += \"\\'\";\n          break;\n        case 31:\n          str += \"?\";\n        }\n      }\n    }\n    cout << str << \"\\n\";\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<string>\n\nstd::string enc[] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\" };\nstd::string str = \" \\',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\nint bin( std::string s )\n{\n\tstd::reverse( s.begin(), s.end() );\n\n\tint ret = 0, w = 1;\n\tfor( int i = 0; i != s.size(); ++i )\n\t{\n\t\tif( s[i] - '0' )\n\t\t\tret += w;\n\n\t\tw <<= 1;\n\t}\n\n\treturn ret;\n}\n\nint main()\n{\n\tstd::string s;\n\twhile( std::getline( std::cin, s ) )\n\t{\n\t\tstd::string code;\n\t\tfor( int i = 0; i != s.size(); ++i )\n\t\t\tcode += enc[ str.find( s[i] ) ];\n\n\t\tfor( int i = 0; i < code.size(); i += 5 )\n\t\t{\n\t\t\tstd::string t = code.substr( i, std::min( 5, (int)code.size() - i ) );\n\t\t\tstd::cout << str[ ( bin( t ) + 6 ) % str.size() ];\n\t\t}\n\n\t\tstd::cout << std::endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n\nstd::string to_bin_str( const std::string& gen )\n{\n\tstatic std::map<char, std::string> table;\n\ttable[' '] = \"101\";\n\ttable['\\''] = \"000000\";\n\ttable[','] = \"000011\";\n\ttable['-'] = \"10010001\";\n\ttable['.'] = \"010001\";\n\ttable['?'] = \"000001\";\n\ttable['A'] = \"100101\";\n\ttable['B'] = \"10011010\";\n\ttable['C'] = \"0101\";\n\ttable['D'] = \"0001\";\n\ttable['E'] = \"110\";\n\ttable['F'] = \"01001\";\n\ttable['G'] = \"10011011\";\n\ttable['H'] = \"010000\";\n\ttable['I'] = \"0111\";\n\ttable['J'] = \"10011000\";\n\ttable['K'] = \"0110\";\n\ttable['L'] = \"00100\";\n\ttable['M'] = \"10011001\";\n\ttable['N'] = \"10011110\";\n\ttable['O'] = \"00101\";\n\ttable['P'] = \"111\";\n\ttable['Q'] = \"10011111\";\n\ttable['R'] = \"1000\";\n\ttable['S'] = \"00110\";\n\ttable['T'] = \"00111\";\n\ttable['U'] = \"10011100\";\n\ttable['V'] = \"10011101\";\n\ttable['W'] = \"000010\";\n\ttable['X'] = \"10010010\";\n\ttable['Y'] = \"10010011\";\n\ttable['Z'] = \"10010000\";\n\n\tstd::string ret;\n\n\tstd::string::const_iterator end = gen.end();\n\tfor( std::string::const_iterator it=gen.begin(); it<end; ++it )\n\t\tret += table[*it];\n\n\tif ( ret.size()%5 != 0 )\n\t\tret.append( ((ret.size()/5)+1)*5-ret.size(), '0' );\n\n\treturn ret;\n}\n\nstd::string to_encrypted_str( const std::string& gen )\n{\n\tstatic std::map<std::string, char> table;\n\ttable[\"00000\"]='A';\n\ttable[\"00001\"]='B';\n\ttable[\"00010\"]='C';\n\ttable[\"00011\"]='D';\n\ttable[\"00100\"]='E';\n\ttable[\"00101\"]='F';\n\ttable[\"00110\"]='G';\n\ttable[\"00111\"]='H';\n\ttable[\"01000\"]='I';\n\ttable[\"01001\"]='J';\n\ttable[\"01010\"]='K';\n\ttable[\"01011\"]='L';\n\ttable[\"01100\"]='M';\n\ttable[\"01101\"]='N';\n\ttable[\"01110\"]='O';\n\ttable[\"01111\"]='P';\n\ttable[\"10000\"]='Q';\n\ttable[\"10001\"]='R';\n\ttable[\"10010\"]='S';\n\ttable[\"10011\"]='T';\n\ttable[\"10100\"]='U';\n\ttable[\"10101\"]='V';\n\ttable[\"10110\"]='W';\n\ttable[\"10111\"]='X';\n\ttable[\"11000\"]='Y';\n\ttable[\"11001\"]='Z';\n\ttable[\"11010\"]=' ';\n\ttable[\"11011\"]='.';\n\ttable[\"11100\"]=',';\n\ttable[\"11101\"]='-';\n\ttable[\"11110\"]='\\'';\n\ttable[\"11111\"]='?';\n\n\tstd::string ret;\n\n\tstd::string::const_iterator end = gen.end();\n\tfor( std::string::const_iterator it=gen.begin(); it<end; it+=5 )\n\t\tret += table[std::string( it, it+5 )];\n\n\treturn ret;\n}\n\nint main() {\n\tstd::string s;\n\twhile( getline( std::cin, s ) && !s.empty() )\n\t\tstd::cout<<to_encrypted_str(to_bin_str( s ))<<std::endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<string>\n#include<iostream>\n\nusing namespace std;\n\nstring change1(char x){\n\tif(x==' ')return \"101\";\n\tif(x==',')return \"000011\";\n\tif(x=='-')return \"10010001\";\n\tif(x=='.')return \"010001\";\n\tif(x=='?')return \"000001\";\n\tif(x=='A')return \"100101\";\n\tif(x=='B')return \"10011010\";\n\tif(x=='C')return \"0101\";\n\tif(x=='D')return \"0001\";\n\tif(x=='E')return \"110\";\n\tif(x=='F')return \"01001\";\n\tif(x=='G')return \"10011011\";\n\tif(x=='H')return \"010000\";\n\tif(x=='I')return \"0111\";\n\tif(x=='J')return \"10011000\";\n\tif(x=='K')return \"0110\";\n\tif(x=='L')return \"00100\";\n\tif(x=='M')return \"10011001\";\n\tif(x=='N')return \"10011110\";\n\tif(x=='O')return \"00101\";\n\tif(x=='P')return \"111\";\n\tif(x=='Q')return \"10011111\";\n\tif(x=='R')return \"1000\";\n\tif(x=='S')return \"00110\";\n\tif(x=='T')return \"00111\";\n\tif(x=='U')return \"10011100\";\n\tif(x=='V')return \"10011101\";\n\tif(x=='W')return \"000010\";\n\tif(x=='X')return \"10010010\";\n\tif(x=='Y')return \"10010011\";\n\tif(x=='Z')return \"10010000\";\n\treturn \"000000\";\n}\n\nstring change2(string x){\n\tint c=0;\n\tfor(int i=0;i<5;i++){\n\t\tc*=2;\n\t\tc+=x[i]-'0';\n\t}\n\tif(c<=25){\n\t\tstring ans;\n\t\tans+='A'+c;\n\t\treturn ans;\n\t}\n\tif(c==26)return \" \";\n\tif(c==27)return \".\";\n\tif(c==28)return \",\";\n\tif(c==29)return \"-\";\n\tif(c==30)return \"'\";\n\tif(c==31)return \"?\";\n}\n\nint main(void){\n\tstring s;\n\twhile(cin && getline(cin,s)){\n\t\tstring str;\n\t\tfor(int i=0;i<s.size();i++){\n\t\t\tstr+=change1(s[i]);\n\t\t}\n\t\tint plus=str.size()%5;\n\t\tif(plus>0)for(int i=0;i<5-plus;i++)str+=\"0\";\n\t\tstring res;\n\t\tfor(int i=0;i<str.size()/5;i++){\n\t\t\tstring ss;\n\t\t\tfor(int j=0;j<5;j++)ss+=str[i*5+j];\n\t\t\tres+=change2(ss);\n\t\t}\n\t\tcout << res << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define PB push_back\n#define MP make_pair\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define ALL(a) (a).begin(),(a).end()\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> P;\nconst int INF=1e9;\nconst int MOD=100000;\nint main(){\n      map<char,string> s;\n      s[' '] = \"101\";\n      s['\\''] = \"000000\";\n      s[','] = \"000011\";\n      s['-'] = \"10010001\";\n      s['.'] = \"010001\";\n      s['?'] = \"000001\";\n      s['A'] = \"100101\";\n      s['B'] = \"10011010\";\n      s['C'] = \"0101\";\n      s['D'] = \"0001\";\n      s['E'] = \"110\";\n      s['F'] = \"01001\";\n      s['G'] = \"10011011\";\n      s['H'] = \"010000\";\n      s['I'] = \"0111\";\n      s['J'] = \"10011000\";\n      s['K'] = \"0110\";\n      s['L'] = \"00100\";\n      s['M'] = \"10011001\";\n      s['N'] = \"10011110\";\n      s['O'] = \"00101\";\n      s['P'] = \"111\";\n      s['Q'] = \"10011111\";\n      s['R'] = \"1000\";\n      s['S'] = \"00110\";\n      s['T'] = \"00111\";\n      s['U'] = \"10011100\";\n      s['V'] = \"10011101\";\n      s['W'] = \"000010\";\n      s['X'] = \"10010010\";\n      s['Y'] = \"10010011\";\n      s['Z'] = \"10010000\";\n      map<string,char> t;\n      t[\"00000\"] = 'A';\n      t[\"00001\"] = 'B';\n      t[\"00010\"] = 'C';\n      t[\"00011\"] = 'D';\n      t[\"00100\"] = 'E';\n      t[\"00101\"] = 'F';\n      t[\"00110\"] = 'G';\n      t[\"00111\"] = 'H';\n      t[\"01000\"] = 'I';\n      t[\"01001\"] = 'J';\n      t[\"01010\"] = 'K';\n      t[\"01011\"] = 'L';\n      t[\"01100\"] = 'M';\n      t[\"01101\"] = 'N';\n      t[\"01110\"] = 'O';\n      t[\"01111\"] = 'P';\n      t[\"10000\"] = 'Q';\n      t[\"10001\"] = 'R';\n      t[\"10010\"] = 'S';\n      t[\"10011\"] = 'T';\n      t[\"10100\"] = 'U';\n      t[\"10101\"] = 'V';\n      t[\"10110\"] = 'W';\n      t[\"10111\"] = 'X';\n      t[\"11000\"] = 'Y';\n      t[\"11001\"] = 'Z';\n      t[\"11010\"] = ' ';\n      t[\"11011\"] = '.';\n      t[\"11100\"] = ',';\n      t[\"11101\"] = '-';\n      t[\"11110\"] = '\\'';\n      t[\"11111\"] = '?';\n      string in;\n      while(getline(cin,in)){\n            string in1=\"\",ans=\"\";\n            REP(i,in.size()){\n                  in1+=s[in[i]];\n            }\n            while(in1.size()%5!=0)in1+='0';\n            REP(i,in1.size()/5){\n                  in.assign(in1,i*5,5);\n                  ans+=t[in];\n            }\n            cout<<ans<<endl;\n      }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nstring ctof(char x) {\n\tif (x == ' ')return \"101\";\n\tif (x == '\\'')return\"000000\";\n\tif (x == ',')return\"000011\";\n\tif (x == '-')return \"10010001\";\n\tif (x == '.')return\"010001\";\n\tif (x == '?')return\"000001\";\n\tif (x == 'A')return\"100101\";\n\tif (x == 'B')return\"10011010\";\n\tif (x == 'C')return\"0101\";\n\tif (x == 'D')return\"0001\";\n\tif (x == 'E')return \"110\";\n\tif (x == 'F')return \"01001\";\n\tif (x == 'G')return\"10011011\";\n\tif (x == 'H')return\"010000\";\n\tif (x == 'I')return\"0111\";\n\tif (x == 'J')return\"10011000\";\n\tif (x == 'K')return\"0110\";\n\tif (x == 'L')return\"00100\";\n\tif (x == 'M')return\"10011001\";\n\tif (x == 'N')return\"10011110\";\n\tif (x == 'O')return\"00101\";\n\tif (x == 'P')return\"111\";\n\tif (x == 'Q')return\"10011111\";\n\tif (x == 'R')return\"1000\";\n\tif (x == 'S')return\"00110\";\n\tif (x == 'T')return\"00111\";\n\tif (x == 'U')return\"10011100\";\n\tif (x == 'V')return\"10011101\";\n\tif (x == 'W')return\"000010\";\n\tif (x == 'X')return\"10010010\";\n\tif (x == 'Y')return\"10010011\";\n\telse return\"10010000\";\n}\n\nchar ftoc(string x) {\n\tif (x == \"00000\")return'A';\n\tif (x == \"00001\")return'B';\n\tif (x == \"00010\")return'C';\n\tif (x == \"00011\")return'D';\n\tif (x == \"00100\")return'E';\n\tif (x == \"00101\")return'F';\n\tif (x == \"00110\")return'G';\n\tif (x == \"00111\")return'H';\n\tif (x == \"01000\")return'I';\n\tif (x == \"01001\")return'J';\n\tif (x == \"01010\")return'K';\n\tif (x == \"01011\")return'L';\n\tif (x == \"01100\")return'M';\n\tif (x == \"01101\")return'N';\n\tif (x == \"01110\")return'O';\n\tif (x == \"01111\")return'P';\n\tif (x == \"10000\")return'Q';\n\tif (x == \"10001\")return'R';\n\tif (x == \"10010\")return'S';\n\tif (x == \"10011\")return'T';\n\tif (x == \"10100\")return'U';\n\tif (x == \"10101\")return'V';\n\tif (x == \"10110\")return'W';\n\tif (x == \"10111\")return'X';\n\tif (x == \"11000\")return'Y';\n\tif (x == \"11001\")return'Z';\n\tif (x == \"11010\")return' ';\n\tif (x == \"11011\")return'.';\n\tif (x == \"11100\")return',';\n\tif (x == \"11101\")return'-';\n\tif (x == \"11110\")return'\\'';\n\telse return'?';\n}\n\nint main() {\n\tstring s;\n\n\twhile (getline(cin, s)) {\n\t\tstring sa;\n\t\tsa = ctof(s[0]);\n\t\tfor (int i = 1;i < s.size();i++) {\n\t\t\tsa += ctof(s[i]);\n\t\t}\n\t\tint z = sa.size();\n\t\tif (z % 5 != 0) {\n\t\t\tfor (int i = z % 5;i <= 5;i++)sa.push_back('0');\n\t\t}\n\t\tstring sb;\n\t\tfor (int i = 0;i < z;i += 5) {\n\t\t\tstring c = sa.substr(i, 5);\n\t\t\tsb.push_back(ftoc(c));\n\t\t}\n\t\tcout << sb << endl;\n\t}\n\tgetchar();\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring forwardTrans(char c){\n\tif(c == ' ') return \"101\";\n\telse if(c == '\\'') return \"000000\";\n\telse if(c == ',') return \"000011\";\n\telse if(c == '-') return \"10010001\";\n\telse if(c == '.') return \"010001\";\n\telse if(c == '?') return \"000001\";\n\telse if(c == 'A') return \"100101\";\n\telse if(c == 'B') return \"10011010\";\n\telse if(c == 'C') return \"0101\";\n\telse if(c == 'D') return \"0001\";\n\telse if(c == 'E') return \"110\";\n\telse if(c == 'F') return \"01001\";\n\telse if(c == 'G') return \"10011011\";\n\telse if(c == 'H') return \"010000\";\n\telse if(c == 'I') return \"0111\";\n\telse if(c == 'J') return \"10011000\";\n\telse if(c == 'K') return \"0110\";\n\telse if(c == 'L') return \"00100\";\n\telse if(c == 'M') return \"10011001\";\n\telse if(c == 'N') return \"10011110\";\n\telse if(c == 'O') return \"00101\";\n\telse if(c == 'P') return \"111\";\n\telse if(c == 'Q') return \"10011111\";\n\telse if(c == 'R') return \"1000\";\n\telse if(c == 'S') return \"00110\";\n\telse if(c == 'T') return \"00111\";\n\telse if(c == 'U') return \"10011100\";\n\telse if(c == 'V') return \"10011101\";\n\telse if(c == 'W') return \"000010\";\n\telse if(c == 'X') return \"10010010\";\n\telse if(c == 'Y') return \"10010011\";\n\telse if(c == 'Z') return \"10010000\";\n}\n\nchar backwardTrans(string s){\n\tif(s == \"00000\") return 'A';\n\telse if(s == \"00001\") return 'B';\n\telse if(s == \"00010\") return 'C';\n\telse if(s == \"00011\") return 'D';\n\telse if(s == \"00100\") return 'E';\n\telse if(s == \"00101\") return 'F';\n\telse if(s == \"00110\") return 'G';\n\telse if(s == \"00111\") return 'H';\n\telse if(s == \"01000\") return 'I';\n\telse if(s == \"01001\") return 'J';\n\telse if(s == \"01010\") return 'K';\n\telse if(s == \"01011\") return 'L';\n\telse if(s == \"01100\") return 'M';\n\telse if(s == \"01101\") return 'N';\n\telse if(s == \"01110\") return 'O';\n\telse if(s == \"01111\") return 'P';\n\telse if(s == \"10000\") return 'Q';\n\telse if(s == \"10001\") return 'R';\n\telse if(s == \"10010\") return 'S';\n\telse if(s == \"10011\") return 'T';\n\telse if(s == \"10100\") return 'U';\n\telse if(s == \"10101\") return 'V';\n\telse if(s == \"10110\") return 'W';\n\telse if(s == \"10111\") return 'X';\n\telse if(s == \"11000\") return 'Y';\n\telse if(s == \"11001\") return 'Z';\n\telse if(s == \"11010\") return ' ';\n\telse if(s == \"11011\") return '.';\n\telse if(s == \"11100\") return ',';\n\telse if(s == \"11101\") return '-';\n\telse if(s == \"11110\") return '\\'';\n\telse if(s == \"11111\") return '?';\n}\n\nint main(){\n\tstring s, tmp;\n\tint rest;\n\twhile (getline(cin, s)) {\n\t\ttmp = \"\";\n\t\tfor (int i = 0; i < s.size(); i++) {\n\t\t\ttmp += forwardTrans(s[i]);\n\t\t}\n\t\trest = tmp.size() % 5;\n\t\tif (rest != 0) {\n\t\t\tfor (int i = 0; i < (5-rest); i++) {\n\t\t\t\ttmp += \"0\";\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < tmp.size(); i += 5) {\n\t\t\tcout << backwardTrans(tmp.substr(i, 5));\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring h = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ ',-.?\";\nchar d[36] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nchar e[36][12] = {\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000011\",\"10010010\",\"10010011\",\"10010000\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\"};\n\nchar conv(string s){\n    int ans = 0;\n    string::iterator it = s.begin();\n    for(int n = 0; n < 5; n++){\n        if( it == s.end() ) continue;\n        ans *= 2;\n        ans += *it - '0';\n        it++;\n    }\n    return d[ans];\n\n}\n\nint main(){\n    string s;\n    while( getline(cin, s) ){\n        string c;\n        c = string(\"\");\n        for(int i = 0; i < s.size(); i++){\n            c += e[h.find(s[i])];\n        }\n        c += string(4-(c.size()+4)%5, '0');\n        for(int i = 0; i < c.size()/5; i++){\n            cout << conv( c.substr(i*5, 5) );\n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid hantei(char *str);\n\nchar DataBase[][3][80] =\n\t{\n\t/* [文字] ,[符号＿変換前] ,[符号＿変換後] */\n\t{ \" \", \"101\", \"11010\" },{ \"\\'\", \"000000\", \"11110\" },{ \",\", \"000011\", \"11100\" },{ \"-\", \"10010001\", \"11101\" },\n\t{ \".\", \"010001\", \"11011\" },{ \"\\?\", \"000001\", \"11111\" },{ \"A\", \"100101\", \"00000\" },{ \"B\", \"10011010\", \"00001\" },\n    { \"C\", \"0101\", \"00010\" },{ \"D\", \"0001\", \"00011\" },{ \"E\", \"110\", \"00100\" },{ \"F\", \"01001\", \"00101\" },\n\t{ \"G\", \"10011011\", \"00110\" },{ \"H\", \"010000\", \"00111\" },{ \"I\", \"0111\", \"01000\" },{ \"J\", \"10011000\", \"01001\" },\n\t{ \"K\", \"0110\", \"01010\" },{ \"L\", \"00100\", \"01011\" },{ \"M\", \"10011001\", \"01100\" },{ \"N\", \"10011110\", \"01101\" },\n\t{ \"O\", \"00101\", \"01110\" },{ \"P\", \"111\", \"01111\" },{ \"Q\", \"10011111\", \"10000\" },{ \"R\", \"1000\", \"10001\" },\n\t{ \"S\", \"00110\", \"10010\" },{ \"T\", \"00111\", \"10011\" },{ \"U\", \"10011100\", \"10100\" },{ \"V\", \"10011101\", \"10101\" },\n\t{ \"W\", \"000010\", \"10110\" },{ \"X\", \"10010010\", \"10111\" },{ \"Y\", \"10010011\", \"11000\" },{ \"Z\", \"100100000\", \"11001\" },\n    {\"\", \"\", \"\" }\n};\n\n\nint main(void)\n{\n\tchar str1[1000],str2[1000],ch;\n\tint cut_i;\n\t\n\t/*scanf(\"%[A-Z \\'.?,-]\",str);\n\t\thantei(str1);*/\n\tcut_i=0;\n\twhile((ch = getchar())!=EOF){\n\t\tif(ch !='\\n'){\n\t\t\tstr2[cut_i] = ch;\n\t\t\tcut_i++;\n\t\t}\n\t\telse {\n\t\t\tstrncpy(str1,str2,cut_i);\n\t\t\tstr1[cut_i]='\\0';\n\t\t\thantei(str1);\n\t\t\tcut_i=0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\nvoid hantei(char *str)\n{\n\tint len1,cut_i,cut_j,count;\n\tchar ans[1000]={\"\"},str2[1000]={\"\"},str3[1000]={\"\"};\n\tchar zero[]={\"0000\"};\n\n\tlen1 = strlen(str);\n\tcount = 0;\n\n\tfor(cut_i=0;cut_i<len1;cut_i++){\n\t\tcut_j=0;\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(!strncmp((str+cut_i),DataBase[cut_j][0],1)){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(str2,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\telse if(count !=0){\n\t\t\t\t\tstrcpy(str2+count,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\t\n\tlen1 = strlen(str2);\n\tcount = 0;\n\n\tif( len1 % 5 != 0){\n\t\tcut_i = 5 - len1 % 5;\n\t\tstrncat(str2,zero,cut_i);\n\t\tlen1 = strlen(str2);\n\t}\n\n\n\tfor(cut_i=0;cut_i<len1;cut_i+=5){\n\t\tcut_j=0;\n\t\tstrncpy(str3,str2+cut_i,5);\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(strcmp(str3,DataBase[cut_j][2]) == 0){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(ans,DataBase[cut_j][0]);\n\t\t\t\t\tcount =strlen(ans);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstrcat(ans,DataBase[cut_j][0]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\tprintf(ans);\n\tprintf(\"\\n\");\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main ()\n{\n\tstring input , start , output , ans;\n\tmap<char , string>code;\n\tcode[' '] = \"101\" ,\n\tcode['\\''] = \"000000\" ,\n\tcode[','] = \"000011\" ,\n\tcode['-'] = \"10010001\" ,\n\tcode['.'] = \"010001\" ,\n\tcode['?'] = \"000001\" ,\n\tcode['A'] = \"100101\" ,\n\tcode['B'] = \"10011010\" ,\n\tcode['C'] = \"0101\" ,\n\tcode['D'] = \"0001\" ,\n\tcode['E'] = \"110\" ,\n\tcode['F'] = \"01001\" ,\n\tcode['G'] = \"10011011\" ,\n\tcode['H'] = \"010000\" ,\n\tcode['I'] = \"0111\" ,\n\tcode['J'] = \"10011000\" ,\n\tcode['K'] = \"0110\" ,\n\tcode['L'] = \"00100\" ,\n\tcode['M'] = \"10011001\" ,\n\tcode['N'] = \"10011110\" ,\n\tcode['O'] = \"00101\" ,\n\tcode['P'] = \"111\" ,\n\tcode['Q'] = \"10011111\" ,\n\tcode['R'] = \"1000\" ,\n\tcode['S'] = \"00110\" ,\n\tcode['T'] = \"00111\" ,\n\tcode['U'] = \"10011100\" ,\n\tcode['V'] = \"10011101\" ,\n\tcode['W'] = \"000010\" ,\n\tcode['X'] = \"10010010\" ,\n\tcode['Y'] = \"10010011\" ,\n\tcode['Z'] = \"10010000\";\n\n\n\tmap<string , char>code2;\n\tcode2[\"00000\"] = 'A' ,\n\tcode2[\"00001\"] = 'B' ,\n\tcode2[\"00010\"] = 'C' ,\n\tcode2[\"00011\"] = 'D' ,\n\tcode2[\"00100\"] = 'E' ,\n\tcode2[\"00101\"] = 'F' ,\n\tcode2[\"00110\"] = 'G' ,\n\tcode2[\"00111\"] = 'H' ,\n\tcode2[\"01000\"] = 'I' ,\n\tcode2[\"01001\"] = 'J' ,\n\tcode2[\"01010\"] = 'K' ,\n\tcode2[\"01011\"] = 'L' ,\n\tcode2[\"01100\"] = 'M' ,\n\tcode2[\"01101\"] = 'N' ,\n\tcode2[\"01110\"] = 'O' ,\n\tcode2[\"01111\"] = 'P' ,\n\tcode2[\"10000\"] = 'Q' ,\n\tcode2[\"10001\"] = 'R' ,\n\tcode2[\"10010\"] = 'S' ,\n\tcode2[\"10011\"] = 'T' ,\n\tcode2[\"10100\"] = 'U' ,\n\tcode2[\"10101\"] = 'V' ,\n\tcode2[\"10110\"] = 'W' ,\n\tcode2[\"10111\"] = 'X' ,\n\tcode2[\"11000\"] = 'Y' ,\n\tcode2[\"11001\"] = 'Z' ,\n\tcode2[\"11010\"] = ' ' ,\n\tcode2[\"11011\"] = '.' ,\n\tcode2[\"11100\"] = ',' ,\n\tcode2[\"11101\"] = '-' ,\n\tcode2[\"11110\"] = '\\'' ,\n\tcode2[\"11111\"] = '?';\n\n\n\twhile( cin >> input )\n\t{\n\t\tstart += input + ' ';\n\t}\n\tstart = start.substr ( 0 , start.size () - 1 );\n\tfor( auto x : start )\n\t{\n\t\toutput += code[x];\n\t}\n\twhile( output.size () % 5 )output += \"0\";\n\tfor( size_t i = 0; i < output.size (); i += 5 )\n\t{\n\t\tans += code2[output.substr ( i , 5 )];\n\t}\n\tcout << ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "/*\n\t0088:The Code A Doctor Loved\n*/\n#include\t<iostream>\n#include\t<string>\n\nusing namespace std;\n\nconst string convertList[2][32] = \n\t{\n\t\t{\n\t\t\t  \"100101\", \"10011010\",     \"0101\",     \"0001\",      \"110\",    \"01001\", \"10011011\",   \"010000\",\n\t\t\t    \"0111\", \"10011000\",     \"0110\",    \"00100\", \"10011001\", \"10011110\",    \"00101\",      \"111\",\n\t\t\t\"10011111\",     \"1000\",    \"00110\",    \"00111\", \"10011100\", \"10011101\",   \"000010\", \"10010010\",\n\t\t\t\"10010011\", \"10010000\",      \"101\",   \"000000\",   \"000011\", \"10010001\",   \"010001\",   \"000001\"\n\t\t},\n\t\t{\n\t\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\t\"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\t\"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"\n\t\t}\n\t};\n\nconst char charList[32] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint main(void) {\n\tstring str, buff, result;\n\t\n\tgetline(cin, str);\n\t\n\tstring::iterator str_it = str.begin();\n\twhile(str_it != str.end()) {\n\t\tfor(int i = 0; i < 32; i++) {\n\t\t\tif(*str_it == charList[i]) {\n\t\t\t\tbuff += convertList[0][i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tstr_it++;\n\t}\n\twhile( buff.size() % 5 != 0 ) {\n\t\tbuff += '0';\n\t}\n\tstring::iterator buff_it = buff.begin();\n\twhile( buff_it != buff.end() ) {\n\t\tstring buffbuff;\n\t\t\n\t\tfor(int i = 0; i < 5; i++, buff_it++) {\n\t\t\tbuffbuff += *buff_it;\n\t\t}\n\t\tfor(int i = 0; i < 32; i++) {\n\t\t\tif(buffbuff == convertList[1][i]) {\n\t\t\t\tresult += charList[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tcout << result << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    string str,Midstream;\n\n    string first=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\",secound=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n    string conversion[33]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\n    \"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\n    \"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\"101\"};\n    while(getline(cin,str)){\n        for(int i=0;str[i]!='\\0';i++){\n            for(int j=0;j<33;j++)if(str[i]==first[j])Midstream+=conversion[j];\n        }\n        for(int i=0;i<Midstream.size()%5;i++)Midstream+='0';\n        for(int i=0,point=0;Midstream[i]!='\\0';i++){\n            if(i%5==4){\n                int num=0;\n                for(int j=point,kawa[5]={1,2,4,8,16};j<=i;j++)num+=(Midstream[j]-'0')*kawa[i-j];\n                cout<<secound[num];\n                point=i+1;\n            }\n        }\n        cout<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define rep(i,n) for(i=0;i<n;++i)\n#define each(itr,c) for(__typeof(c.begin()) itr=c.begin(); itr!=c.end(); itr++)\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define sc second\n\nint main(int argc, char const *argv[]) {\n  map<char,string> m;\n  m[' '] =\"101\";\n  m['\\'']=\"000000\";\n  m[','] =\"000011\";\n  m['-'] =\"10010001\";\n  m['.'] =\"010001\";\n  m['?'] =\"000001\";\n  m['A'] =\"100101\";\n  m['B'] =\"10011010\";\n  m['C'] =\"0101\";\n  m['D'] =\"0001\";\n  m['E'] =\"110\";\n  m['F'] =\"01001\";\n  m['G'] =\"10011011\";\n  m['H'] =\"010000\";\n  m['I'] =\"0111\";\n  m['J'] =\"10011000\";\n  m['K'] =\"0110\";\n  m['L'] =\"00100\";\n  m['M'] =\"10011001\";\n  m['N'] =\"10011110\";\n  m['O'] =\"00101\";\n  m['P'] =\"111\";\n  m['Q'] =\"10011111\";\n  m['R'] =\"1000\";\n  m['S'] =\"00110\";\n  m['T'] =\"00111\";\n  m['U'] =\"10011100\";\n  m['V'] =\"10011101\";\n  m['W'] =\"000010\";\n  m['X'] =\"10010010\";\n  m['Y'] =\"10010011\";\n  m['Z'] =\"10010000\";\n\n  int i;\n  string s;\n  string al=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  while (getline(cin,s)){\n    string ans=\"\";\n\n    string a=\"\";\n    rep(i,s.size()) a+=m[s[i]];\n\n    int tmp=a.size()%5;\n    if(tmp!=0){\n      rep(i,5-tmp) a+=\"0\";\n    }\n\n    //cout << a << endl;\n\n    for(int j=0; j<a.size(); j+=5){\n      //5???????????¨????????????\n      string b=a.substr(j,5);\n      if(b==\"11010\") ans+=\" \";\n      else if(b==\"11011\") ans+=\".\";\n      else if(b==\"11100\") ans+=\",\";\n      else if(b==\"11101\") ans+=\"-\";\n      else if(b==\"11110\") ans+=\"'\";\n      else if(b==\"11111\") ans+=\"?\";\n      else{\n        int val=0;\n        for(int k=0; k<5; ++k){\n          val+=(b[k]-'0')*pow(2,4-k);\n        }\n        ans+=al[val];\n      }\n\n    }\n\n    std::cout << ans << std::endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<map>\n#include<string>\n#include<cstdio>\nusing namespace std;\n\nmap<char, string> dict;\nmap<string, char> tcid;\nvoid init(){\n    dict[' '] = \"101\";\n    dict['\\''] = \"000000\";\n    dict[','] = \"000011\";\n    dict['-'] = \"10010001\";\n    dict['.'] = \"010001\";\n    dict['?'] = \"000001\";\n    dict['A'] = \"100101\";\n    dict['B'] = \"10011010\";\n    dict['C'] = \"0101\";\n    dict['D'] = \"0001\";\n    dict['E'] = \"110\";\n    dict['F'] = \"01001\";\n    dict['G'] = \"10011011\";\n    dict['H'] = \"010000\";\n    dict['I'] = \"0111\";\n    dict['J'] = \"10011000\";\n    dict['K'] = \"0110\";\n    dict['L'] = \"00100\";\n    dict['M'] = \"10011001\";\n    dict['N'] = \"10011110\";\n    dict['O'] = \"00101\";\n    dict['P'] = \"111\";\n    dict['Q'] = \"10011111\";\n    dict['R'] = \"1000\";\n    dict['S'] = \"00110\";\n    dict['T'] = \"00111\";\n    dict['U'] = \"10011100\";\n    dict['V'] = \"10011101\";\n    dict['W'] = \"000010\";\n    dict['X'] = \"10010010\";\n    dict['Y'] = \"10010011\";\n    dict['Z'] = \"10010000\";\n    tcid[\"00000\"] ='A';\n    tcid[\"00001\"] ='B';\n    tcid[\"00010\"] ='C';\n    tcid[\"00011\"] ='D';\n    tcid[\"00100\"] ='E';\n    tcid[\"00101\"] ='F';\n    tcid[\"00110\"] ='G';\n    tcid[\"00111\"] ='H';\n    tcid[\"01000\"] ='I';\n    tcid[\"01001\"] ='J';\n    tcid[\"01010\"] ='K';\n    tcid[\"01011\"] ='L';\n    tcid[\"01100\"] ='M';\n    tcid[\"01101\"] ='N';\n    tcid[\"01110\"] ='O';\n    tcid[\"01111\"] ='P';\n    tcid[\"10000\"] ='Q';\n    tcid[\"10001\"] ='R';\n    tcid[\"10010\"] ='S';\n    tcid[\"10011\"] ='T';\n    tcid[\"10100\"] ='U';\n    tcid[\"10101\"] ='V';\n    tcid[\"10110\"] ='W';\n    tcid[\"10111\"] ='X';\n    tcid[\"11000\"] ='Y';\n    tcid[\"11001\"] ='Z';\n    tcid[\"11010\"] =' ';\n    tcid[\"11011\"] ='.';\n    tcid[\"11100\"] =',';\n    tcid[\"11101\"] ='-';\n    tcid[\"11110\"] ='\\'';\n    tcid[\"11111\"] ='?';\n}\n\nstring solve(string a){\n    string tmp = \"\";\n    string res = \"\";\n    for(int i = 0;i < a.size();i++){\n\ttmp += dict[a[i]];\n    }\n    while(tmp.size()%5)tmp+=\"0\";\n    for(int i = 0;i < tmp.size();i += 5){\n\tstring x = \"\";\n\tfor(int j = 0;j < 5;j++){\n\t    x += tmp[i + j];\n\t}\n\tres += tcid[x];\n    }\n    return res;\n}\nbool fin = false;\nstring get_line(){\n    string res = \"\";\n    while(true){\n\tchar t = getchar();\n\tif(t == '\\n' || t == EOF){\n\t    if(t == EOF)fin = true;\n\t    break;\n\t}\n\tres += t;\n    }\n    return res;\n}\n\nint main(){\n    init();\n    while(!fin){\n\tstring res =  solve(get_line());\n\tif(res != \"\")cout << res << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n\n  string wd = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string bd[32] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\" };\n  string od = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n  string input;\n\n  while( true ) {\n    getline( cin, input );\n    if ( cin.eof() ) break;\n\n    string k = \"\";\n\n    for( int l = 0; l < input.size(); l++ ) {\n      char in = input[l];\n      for ( int i = 0; i < 32; i++ ) {\n\tif ( in == wd[i] ) {\n\t  k += bd[i];\n\t  break;\n\t}\n      }\n    }\n    k += \"0000\";\n    for ( int i = 0; i < k.size(); i+=5 ) {\n      int x = 0;\n      for ( int j = 0; j < 5; j++ ) {\n\tx = x * 2 + k[i+j] - '0';\n      }\n      cout << od[x];\n    }\n    cout << endl;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <iomanip>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <numeric>\n#include <bitset>\n#include <cmath>\n\nstatic const int MOD = 1000000007;\nusing ll = long long;\nusing u32 = unsigned;\nusing u64 = unsigned long long;\nusing namespace std;\n\ntemplate<class T> constexpr T INF = ::numeric_limits<T>::max()/32*15+208;\n\nint main() {\n    map<char, string> m;\n    map<string, char> minv;\n    m[' '] = \"101\";\n    m['\\''] = \"000000\";\n    m[','] = \"000011\";\n    m['-'] = \"10010001\";\n    m['.'] = \"010001\";\n    m['?'] = \"000001\";\n    m['A'] = \"100101\";\n    m['B'] = \"10011010\";\n    m['C'] = \"0101\";\n    m['D'] = \"0001\";\n    m['E'] = \"110\";\n    m['F'] = \"01001\";\n    m['G'] = \"10011011\";\n    m['H'] = \"010000\";\n    m['I'] = \"0111\";\n    m['J'] = \"10011000\";\n    m['K'] = \"0110\";\n    m['L'] = \"00100\";\n    m['M'] = \"10011001\";\n    m['N'] = \"10011110\";\n    m['O'] = \"00101\";\n    m['P'] = \"111\";\n    m['Q'] = \"10011111\";\n    m['R'] = \"1000\";\n    m['S'] = \"00110\";\n    m['T'] = \"00111\";\n    m['U'] = \"10011100\";\n    m['V'] = \"10011101\";\n    m['W'] = \"000010\";\n    m['X'] = \"10010010\";\n    m['Y'] = \"10010011\";\n    m['Z'] = \"10010000\";\n    minv[\"00000\"] = 'A';\n    minv[\"00001\"] = 'B';\n    minv[\"00010\"] = 'C';\n    minv[\"00011\"] = 'D';\n    minv[\"00100\"] = 'E';\n    minv[\"00101\"] = 'F';\n    minv[\"00110\"] = 'G';\n    minv[\"00111\"] = 'H';\n    minv[\"01000\"] = 'I';\n    minv[\"01001\"] = 'J';\n    minv[\"01010\"] = 'K';\n    minv[\"01011\"] = 'L';\n    minv[\"01100\"] = 'M';\n    minv[\"01101\"] = 'N';\n    minv[\"01110\"] = 'O';\n    minv[\"01111\"] = 'P';\n    minv[\"10000\"] = 'Q';\n    minv[\"10001\"] = 'R';\n    minv[\"10010\"] = 'S';\n    minv[\"10011\"] = 'T';\n    minv[\"10100\"] = 'U';\n    minv[\"10101\"] = 'V';\n    minv[\"10110\"] = 'W';\n    minv[\"10111\"] = 'X';\n    minv[\"11000\"] = 'Y';\n    minv[\"11001\"] = 'Z';\n    minv[\"11010\"] = ' ';\n    minv[\"11011\"] = '.';\n    minv[\"11100\"] = ',';\n    minv[\"11101\"] = '-';\n    minv[\"11110\"] = '\\'';\n    minv[\"11111\"] = '?';\n    string s;\n    while(getline(cin, s)){\n        string t;\n        for (auto &&i : s) t += m[i];\n        while(t.size()%5) t += '0';\n        string ans;\n        for (int i = 0; i < t.size(); i += 5) {\n            cout << minv[t.substr(i, 5)];\n        }\n        puts(\"\");\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<string>\n#include<cstring>\n\nusing namespace std;\n\nvoid code2str(const string& before,string& after);\nvoid char2code(char ch,string& after);\n\n\nint main()\n{\n\tchar ch;\n\tstring code,str;\n\tbool flg=true;\n\tfor(;;)\n\t{\n\t\tstr=\"\";\n\t\tcode=\"\";\n\t\tfor(;;)\n\t\t{\n\t\t\tch=getchar();\n\t\t\tif(ch==EOF)\n\t\t\t{\n\t\t\t\tflg=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(ch=='\\n')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tchar2code(ch,code);\n\t\t}\n\t\tif(!flg)break;\n\t\tcode2str(code,str);\n\t\tputs(str.c_str());\n\t}\n\treturn 0;\n}\n\nvoid char2code(char ch,string& after)\n{\n\tswitch(ch)\n\t{\n\tcase ' ':\n\t\tafter+=\"101\";\n\t\tbreak;\n\tcase '\\'':\n\t\tafter+=\"000000\";\n\t\tbreak;\n\tcase ',':\n\t\tafter+=\"000011\";\n\t\tbreak;\n\tcase '-':\n\t\tafter+=\"1001001\";\n\t\tbreak;\n\tcase '.':\n\t\tafter+=\"010001\";\n\t\tbreak;\n\tcase '?':\n\t\tafter+=\"000001\";\n\t\tbreak;\n\tcase 'A':\n\t\tafter+=\"100101\";\n\t\tbreak;\n\tcase 'B':\n\t\tafter+=\"10011010\";\n\t\tbreak;\n\tcase 'C':\n\t\tafter+=\"0101\";\n\t\tbreak;\n\tcase 'D':\n\t\tafter+=\"0001\";\n\t\tbreak;\n\tcase 'E':\n\t\tafter+=\"110\";\n\t\tbreak;\n\tcase 'F':\n\t\tafter+=\"01001\";\n\t\tbreak;\n\tcase 'G':\n\t\tafter+=\"10011011\";\n\t\tbreak;\n\tcase 'H':\n\t\tafter+=\"010000\";\n\t\tbreak;\n\tcase 'I':\n\t\tafter+=\"0111\";\n\t\tbreak;\n\tcase 'J':\n\t\tafter+=\"10011000\";\n\t\tbreak;\n\tcase 'K':\n\t\tafter+=\"0110\";\n\t\tbreak;\n\tcase 'L':\n\t\tafter+=\"00100\";\n\t\tbreak;\n\tcase 'M':\n\t\tafter+=\"10011001\";\n\t\tbreak;\n\tcase 'N':\n\t\tafter+=\"10011110\";\n\t\tbreak;\n\tcase 'O':\n\t\tafter+=\"00101\";\n\t\tbreak;\n\tcase 'P':\n\t\tafter+=\"111\";\n\t\tbreak;\n\tcase 'Q':\n\t\tafter+=\"10011111\";\n\t\tbreak;\n\tcase 'R':\n\t\tafter+=\"1000\";\n\t\tbreak;\n\tcase 'S':\n\t\tafter+=\"00110\";\n\t\tbreak;\n\tcase 'T':\n\t\tafter+=\"00111\";\n\t\tbreak;\n\tcase 'U':\n\t\tafter+=\"10011100\";\n\t\tbreak;\n\tcase 'V':\n\t\tafter+=\"10011101\";\n\t\tbreak;\n\tcase 'W':\n\t\tafter+=\"000010\";\n\t\tbreak;\n\tcase 'X':\n\t\tafter+=\"10010010\";\n\t\tbreak;\n\tcase 'Y':\n\t\tafter+=\"10010011\";\n\t\tbreak;\n\tcase 'Z':\n\t\tafter+=\"1001000\";\n\t\tbreak;\n\t}\n}\n\nvoid code2str(const string& before,string& after)\n{\n\tstring code;\n\tfor(int i=0;i<before.size();i+=5)\n\t{\n\t\tcode=\"\";\n\t\tfor(int j=0;j<5;j++)\n\t\t{\n\t\t\tif(i+j<before.size())\n\t\t\t{\n\t\t\t\tcode+=before[i+j];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcode+='0';\n\t\t\t}\n\t\t}\n\t\tif(code==\"00000\")\n\t\t{\n\t\t\tafter+='A';\n\t\t}\n\t\telse if(code==\"00001\")\n\t\t{\n\t\t\tafter+='B';\n\t\t}\n\t\telse if(code==\"00010\")\n\t\t{\n\t\t\tafter+='C';\n\t\t}\n\t\telse if(code==\"00011\")\n\t\t{\n\t\t\tafter+='D';\n\t\t}\n\t\telse if(code==\"00100\")\n\t\t{\n\t\t\tafter+='E';\n\t\t}\n\t\telse if(code==\"00101\")\n\t\t{\n\t\t\tafter+='F';\n\t\t}\n\t\telse if(code==\"00110\")\n\t\t{\n\t\t\tafter+='G';\n\t\t}\n\t\telse if(code==\"00111\")\n\t\t{\n\t\t\tafter+='H';\n\t\t}\n\t\telse if(code==\"01000\")\n\t\t{\n\t\t\tafter+='I';\n\t\t}\n\t\telse if(code==\"01001\")\n\t\t{\n\t\t\tafter+='J';\n\t\t}\n\t\telse if(code==\"01010\")\n\t\t{\n\t\t\tafter+='K';\n\t\t}\n\t\telse if(code==\"01011\")\n\t\t{\n\t\t\tafter+='L';\n\t\t}\n\t\telse if(code==\"01100\")\n\t\t{\n\t\t\tafter+='M';\n\t\t}\n\t\telse if(code==\"01101\")\n\t\t{\n\t\t\tafter+='N';\n\t\t}\n\t\telse if(code==\"01110\")\n\t\t{\n\t\t\tafter+='O';\n\t\t}\n\t\telse if(code==\"01111\")\n\t\t{\n\t\t\tafter+='P';\n\t\t}\n\t\telse if(code==\"10000\")\n\t\t{\n\t\t\tafter+='Q';\n\t\t}\n\t\telse if(code==\"10001\")\n\t\t{\n\t\t\tafter+='R';\n\t\t}\n\t\telse if(code==\"10010\")\n\t\t{\n\t\t\tafter+='S';\n\t\t}\n\t\telse if(code==\"10011\")\n\t\t{\n\t\t\tafter+='T';\n\t\t}\n\t\telse if(code==\"10100\")\n\t\t{\n\t\t\tafter+='U';\n\t\t}\n\t\telse if(code==\"10101\")\n\t\t{\n\t\t\tafter+='V';\n\t\t}\n\t\telse if(code==\"10110\")\n\t\t{\n\t\t\tafter+='W';\n\t\t}\n\t\telse if(code==\"10111\")\n\t\t{\n\t\t\tafter+='X';\n\t\t}\n\t\telse if(code==\"11000\")\n\t\t{\n\t\t\tafter+='Y';\n\t\t}\n\t\telse if(code==\"11001\")\n\t\t{\n\t\t\tafter+='Z';\n\t\t}\n\t\telse if(code==\"11010\")\n\t\t{\n\t\t\tafter+=' ';\n\t\t}\n\t\telse if(code==\"11011\")\n\t\t{\n\t\t\tafter+='.';\n\t\t}\n\t\telse if(code==\"11100\")\n\t\t{\n\t\t\tafter+=',';\n\t\t}\n\t\telse if(code==\"11101\")\n\t\t{\n\t\t\tafter+='-';\n\t\t}\n\t\telse if(code==\"11110\")\n\t\t{\n\t\t\tafter+='\\'';\n\t\t}\n\t\telse if(code==\"11111\")\n\t\t{\n\t\t\tafter+='?';\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n#include <cstdlib>\nusing namespace std;\n\nint main(){\n  map<char,string> e;\n  e[' ']=\"101\";\n  e['\\'']=\"000000\";\n  e[',']=\"000011\";\n  e['-']=\"10010001\";\n  e['.']=\"010001\";\n  e['A']=\"100101\";e['B']=\"10011010\";e['C']=\"0101\";\n  e['D']=\"0001\";e['E']=\"110\";e['F']=\"01001\";\n  e['G']=\"10011011\";e['H']=\"010000\";e['I']=\"0111\";\n  e['J']=\"10011000\";e['K']=\"0110\";e['L']=\"00100\";\n  e['M']=\"10011001\";e['N']=\"10011110\";e['O']=\"00101\";\n  e['P']=\"111\";e['Q']=\"10011111\";e['R']=\"1000\";\n  e['S']=\"00110\";e['T']=\"00111\";e['U']=\"10011100\";\n  e['V']=\"10011101\";e['W']=\"000010\";e['X']=\"10010010\";\n  e['Y']=\"10010011\";e['Z']=\"10010000\";\n  string s,t,a;\n  char d[32];\n  for(int i=0;i<26;++i) d[i]=i+'A';\n  d[26]=' ';d[27]='.';d[28]=',';d[29]='-';d[30]='\\'';d[31]='?';\n  while(getline(cin,s)){\n    t=\"\";a=\"\";\n    for(string::iterator it=s.begin();it!=s.end();++it) t+=e[*it];\n    for(int i=0;i<t.size()/5*5;i+=5) a+=d[strtol(t.substr(i,5).c_str(),NULL,2)];\n    if(t.size()%5) a+=d[strtol(t.substr(t.size()/5*5).c_str(),NULL,2)<<(5+(t.size()/5*5)-t.size())%5];\n    cout<<a<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n  string map[1000];\n  map['A']=\"100101\"; map['B']=\"10011010\"; map['C']=\"0101\"; map['D']=\"0001\";\n  map['E']=\"110\"; map['F']=\"01001\"; map['G']=\"10011011\"; map['H']=\"010000\";\n  map['I']=\"0111\"; map['J']=\"10011000\"; map['K']=\"0110\"; map['L']=\"00100\";\n  map['M']=\"10011001\"; map['N']=\"10011110\"; map['O']=\"00101\"; map['P']=\"111\";\n  map['Q']=\"10011111\"; map['R']=\"1000\"; map['S']=\"00110\"; map['T']=\"00111\";\n  map['U']=\"10011100\"; map['V']=\"10011101\"; map['W']=\"000010\"; map['X']=\"10010010\";\n  map['Y']=\"10010011\"; map['Z']=\"1001000\"; map[' ']=\"101\"; map['\\'']=\"000000\";\n  map[',']=\"000011\"; map['-']=\"10010001\"; map['.']=\"010001\",map['?']=\"000001\";\n  string alpha[]={\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\n\t\t  \"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\n\t\t  \"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\n\t\t  \"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"};\n  string altmp=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  string line,chli,ans;\n  getline(cin,line);\n  for(int i=0;i<line.size();i++){\n    chli += map[line[i]];\n  }\n  if(chli.size() % 5 != 0) chli.append(5-chli.size()%5,'0');\n  for(int i=0;i<chli.size();i+=5){\n    string tmp = chli.substr(i,5);\n    for(int j=0;j<32;j++){\n      if(tmp == alpha[j]) ans += altmp[j];\n    }\n  }\n  cout<< ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\nusing namespace std;\n\nmap <char,string> t;\nvoid make_table(){\n  t[' '] =\"101\";\n  t['\\'']=\"000000\";\n  t[','] =\"000011\";\n  t['-'] =\"10010001\";\n  t['.'] =\"010001\";\n  t['?'] =\"000001\";\n  t['A'] =\"100101\";\n  t['B'] =\"10011010\";\n  \n  t['C'] =\"0101\";\n  t['D'] =\"0001\";\n  t['E'] =\"110\";\n  t['F'] =\"01001\";\n  t['G'] =\"10011011\";\n  t['H'] =\"010000\";\n  t['I'] =\"0111\";\n  t['J'] =\"10011000\";\n\n  t['K'] =\"0110\";\n  t['L'] =\"00100\";\n  t['M'] =\"1001100\";\n  t['N'] =\"10011110\";\n  t['O'] =\"00101\";\n  t['P'] =\"111\";\n  t['Q'] =\"10011111\";\n  t['R'] =\"1000\";\n\n  t['S'] =\"00110\";\n  t['T'] =\"00111\";\n  t['U'] =\"10011100\";\n  t['V'] =\"10011101\";\n  t['W'] =\"000010\";\n  t['X'] =\"10010010\";\n  t['Y'] =\"10010011\";\n  t['Z'] =\"10010000\";\n}\nchar ch_table[]={' ','.',',','-','\\'','?'};\n\nchar s2ch(string str){\n  int num=0;\n  for(int i=0;i<5;i++){\n    num*=2;\n    num+=str[i]-'0';\n  }\n  if(num<=25)return 'A'+num;\n  return ch_table[num-26];\n}\n\nint main(){\n  string str,A;\n  make_table();\n  while(getline(cin,str)){\n    A=\"\";\n    for(int i=0;i<(int)str.size();i++){\n      A+=t[str[i]];\n    }\n    \n    while(A.size()%5!=0)A+=\"0\";\n    \n    for(int i=0;i<(int)A.size();i+=5){\n      //cout<<A.substr(i,5)<<\" \";\n      cout<<s2ch(A.substr(i,5));\n    }\n    cout<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <map>\nusing namespace std;\nint main(){\n\tmap<char,string> mp;\n\tmap<string,char> mp2;\n\tmp[' '] = \"101\";\n\tmp['\\''] = \"000000\";\n\tmp[','] = \"000011\";\n\tmp['-'] = \"10010001\";\n\tmp['.'] = \"010001\";\n\tmp['?'] = \"000001\";\n\tmp['A'] = \"100101\";\n\tmp['B'] = \"10011010\";\n\tmp['C'] = \"0101\";\n\tmp['D'] = \"0001\";\n\tmp['E'] = \"110\";\n\tmp['F'] = \"01001\";\n\tmp['G'] = \"10011011\";\n\tmp['H'] = \"010000\";\n\tmp['I'] = \"0111\";\n\tmp['J'] = \"10011000\";\n\tmp['K'] = \"0110\";\n\tmp['L'] = \"00100\";\n\tmp['M'] = \"10011001\";\n\tmp['N'] = \"10011110\";\n\tmp['O'] = \"00101\";\n\tmp['P'] = \"111\";\n\tmp['Q'] = \"10011111\";\n\tmp['R'] = \"1000\";\n\tmp['S'] = \"00110\";\n\tmp['T'] = \"00111\";\n\tmp['U'] = \"10011100\";\n\tmp['V'] = \"10011101\";\n\tmp['W'] = \"000010\";\n\tmp['X'] = \"10010010\";\n\tmp['Y'] = \"10010011\";\n\tmp['Z'] = \"10010000\";\n\tmp2[\"00000\"] = 'A';\n\tmp2[\"00001\"] = 'B';\n\tmp2[\"00010\"] = 'C';\n\tmp2[\"00011\"] = 'D';\n\tmp2[\"00100\"] = 'E';\n\tmp2[\"00101\"] = 'F';\n\tmp2[\"00110\"] = 'G';\n\tmp2[\"00111\"] = 'H';\n\tmp2[\"01000\"] = 'I';\n\tmp2[\"01001\"] = 'J';\n\tmp2[\"01010\"] = 'K';\n\tmp2[\"01011\"] = 'L';\n\tmp2[\"01100\"] = 'M';\n\tmp2[\"01101\"] = 'N';\n\tmp2[\"01110\"] = 'O';\n\tmp2[\"01111\"] = 'P';\n\tmp2[\"10000\"] = 'Q';\n\tmp2[\"10001\"] = 'R';\n\tmp2[\"10010\"] = 'S';\n\tmp2[\"10011\"] = 'T';\n\tmp2[\"10100\"] = 'U';\n\tmp2[\"10101\"] = 'V';\n\tmp2[\"10110\"] = 'W';\n\tmp2[\"10111\"] = 'X';\n\tmp2[\"11000\"] = 'Y';\n\tmp2[\"11001\"] = 'Z';\n\tmp2[\"11010\"] = ' ';\n\tmp2[\"11011\"] = '.';\n\tmp2[\"11100\"] = ',';\n\tmp2[\"11101\"] = '-';\n\tmp2[\"11110\"] = '\\'';\n\tmp2[\"11111\"] = '?';\n\tstring s,t;\n\tbool start = true;\n\twhile(getline(cin,s)){\n\t\tif(not start) t += mp[' '];\n\t\tfor(int i=0;i<s.size();i++){\n\t\t\tchar a = s[i];\n\t\t\tif(start and i==0) t = mp[a];\n\t\t\telse t += mp[a];\n\t\t}\n\t\tstart = false;\n\t}\n\ts = t;\n\tfor(int i=0;i<(5-t.size()%5)%5;i++) s += \"0\";\n\tcout << s << \" \" << s.size() << endl;\n\tfor(int i=0;i<s.size()/5;i++) cout << mp2[s.substr(5*i,5)];\n\tcout << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n\n#define rep(i,n) for(int i=0;i<n;i++)\n\nusing namespace std;\n\nvector<string> split(string &str,char delim)\n{\n\tvector<string> res;\n\tsize_t current = 0,found;\n\twhile((found = str.find_first_of(delim,current)) != string::npos)\n\t{\n\t\tres.push_back(string(str,current,found  - current));\n\t\tcurrent = found + 1;\n\t}\n\tres.push_back(string(str,current,str.size() - current));\n\treturn res;\n}\n\n\nint main()\n{\n\tmap<char,string> ID;\n\tID[' '] = \"101\";\n\tID['\\''] = \"000000\";\n\tID[','] = \"000011\";\n\tID['-'] = \"100010001\";\n\tID['.'] = \"010001\";\n\tID['?'] = \"000001\";\n\tID['A'] = \"100101\";\n\tID['B'] = \"10011010\";\n\tID['C'] = \"0101\";\n\tID['D'] = \"0001\";\n\tID['E'] = \"110\";\n\tID['F'] = \"01001\";\n\tID['G'] = \"10011011\";\n\tID['H'] = \"010000\";\n\tID['I'] = \"0111\";\n\tID['J'] = \"10011000\";\n\tID['K'] = \"0110\";\n\tID['L'] = \"00100\";\n\tID['M'] = \"10011001\";\n\tID['N'] = \"100011110\";\n\tID['O'] = \"00101\";\n\tID['P'] = \"111\";\n\tID['Q'] = \"10011111\";\n\tID['R'] = \"1000\";\n\tID['S'] = \"00110\";\n\tID['T'] = \"00111\";\n\tID['U'] = \"10011100\";\n\tID['V'] = \"10011101\";\n\tID['W'] = \"000010\";\n\tID['X'] = \"10010010\";\n\tID['Y'] = \"10010011\";\n\tID['Z'] = \"10010000\";\n\n\tmap<string,string> Id;\n\tId[\"00000\"] = \"A\";\n\tId[\"00001\"] = \"B\";\n\tId[\"00010\"] = \"C\";\n\tId[\"00011\"] = \"D\";\n\tId[\"00100\"] = \"E\";\n\tId[\"00101\"] = \"F\";\n\tId[\"00110\"] = \"G\";\n\tId[\"00111\"] = \"H\";\n\tId[\"01000\"] = \"I\";\n\tId[\"01001\"] = \"J\";\n\tId[\"01010\"] = \"K\";\n\tId[\"01011\"] = \"L\";\n\tId[\"01100\"] = \"M\";\n\tId[\"01101\"] = \"N\";\n\tId[\"01110\"] = \"O\";\n\tId[\"01111\"] = \"P\";\n\tId[\"10000\"] = \"Q\";\n\tId[\"10001\"] = \"R\";\n\tId[\"10010\"] = \"S\";\n\tId[\"10011\"] = \"T\";\n\tId[\"10100\"] = \"U\";\n\tId[\"10101\"] = \"V\";\n\tId[\"10110\"] = \"W\";\n\tId[\"10111\"] = \"X\";\n\tId[\"11000\"] = \"Y\";\n\tId[\"11001\"] = \"Z\";\n\tId[\"11010\"] = \" \";\n\tId[\"11011\"] = \".\";\n\tId[\"11100\"] = \",\";\n\tId[\"11101\"] = \"-\";\n\tId[\"11110\"] = \"'\";\n\tId[\"11111\"] = \"?\";\n\n\tstring s;\n\tstring str = \"\";\n\twhile(getline(cin,s))\n\t{\n\t\tif(cin.eof()) break;\n\t\trep(i,s.size())\n\t\t{\n\t\t\tstr += ID[s[i]];\n\t\t}\n\n\t\twhile(str.length() % 5 != 0)\n\t\t{\n\t\t\tstr += \"0\";\n\t\t}\n\n\t\tstring ans = \"\";\n\t\twhile(str.length())\n\t\t{\n\t\t\tstring temp = str.substr(0,5);\n\t\t\tans += Id[temp];\n\t\t\tstr = str.substr(5);\n\t\t}\n\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map <char, string> map1;\n    map1[' '] = \"101\";\n    map1['\\''] = \"000000\";\n    map1[','] = \"000011\";\n    map1['-'] = \"10010001\";\n    map1['.'] = \"010001\";\n    map1['?'] = \"000001\";\n    map1['A'] = \"100101\";\n    map1['B'] = \"10011010\";\n    map1['C'] = \"0101\";\n    map1['D'] = \"0001\";\n    map1['E'] = \"110\";\n    map1['F'] = \"01001\";\n    map1['G'] = \"10011011\";\n    map1['H'] = \"010000\";\n    map1['I'] = \"0111\";\n    map1['J'] = \"10011000\";\n    map1['K'] = \"0110\";\n    map1['L'] = \"00100\";\n    map1['M'] = \"10011001\";\n    map1['N'] = \"10011110\";\n    map1['O'] = \"00101\";\n    map1['P'] = \"111\";\n    map1['Q'] = \"10011111\";\n    map1['R'] = \"1000\";\n    map1['S'] = \"00110\";\n    map1['T'] = \"00111\";\n    map1['U'] = \"10011100\";\n    map1['V'] = \"10011101\";\n    map1['W'] = \"000010\";\n    map1['X'] = \"10010010\";\n    map1['Y'] = \"10010011\";\n    map1['Z'] = \"10010000\";\n\n    map <string, char> map2;\n    map2[\"00000\"] = 'A';\n    map2[\"00001\"] = 'B';\n    map2[\"00010\"] = 'C';\n    map2[\"00011\"] = 'D';\n    map2[\"00100\"] = 'E';\n    map2[\"00101\"] = 'F';\n    map2[\"00110\"] = 'G';\n    map2[\"00111\"] = 'H';\n\n    map2[\"01000\"] = 'I';\n    map2[\"01001\"] = 'J';\n    map2[\"01010\"] = 'K';\n    map2[\"01011\"] = 'L';\n    map2[\"01100\"] = 'M';\n    map2[\"01101\"] = 'N';\n    map2[\"01110\"] = 'O';\n    map2[\"01111\"] = 'P';\n\n    map2[\"10000\"] = 'Q';\n    map2[\"10001\"] = 'R';\n    map2[\"10010\"] = 'S';\n    map2[\"10011\"] = 'T';\n    map2[\"10100\"] = 'U';\n    map2[\"10101\"] = 'V';\n    map2[\"10110\"] = 'W';\n    map2[\"10111\"] = 'X';\n\n    map2[\"11000\"] = 'Y';\n    map2[\"11001\"] = 'Z';\n    map2[\"11010\"] = ' ';\n    map2[\"11011\"] = '.';\n    map2[\"11100\"] = ',';\n    map2[\"11101\"] = '-';\n    map2[\"11110\"] = '\\'';\n    map2[\"11111\"] = '?';\n\n    string line;\n    while ( getline( cin, line ) ) {\n        string to1;\n        for ( string ::iterator it = line.begin(); it != line.end(); it++ ) {\n            to1 += map1[*it];\n        }\n\n        string to2( ( to1.size()%5 != 0 ? to1.size()/5*5+5 : to1.size() ), '0' );\n        for ( int i = 0; i < to1.size(); i++ ) {\n            to2[i] = to1[i];\n        }\n\n        string answer;\n        for ( int i = 0; i < to2.size(); i += 5 ) {\n            string key = to2.substr( i, 5 );\n            answer += map2[key];\n        }\n\n        cout << answer << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cstring>\n#include<cstdio>\n#include<time.h>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define pb push_back\n#define mp make_pair\n#define all(in) in.begin(),in.end()\nconst double PI=acos(-1);\nconst double EPS=1e-10;\nconst int inf=1e8;\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\nint n;\nint main(){\n\tmap<char,string>in;\n\tin[' ']=\"101\";\n\tin['\\'']=\"000000\";\n\tin[',']=\"000011\";\n\tin['-']=\"10010001\";\n\tin['.']=\"010001\";\n\tin['?']=\"000001\";\n\tin['A']=\"100101\";\n\tin['B']=\"10011010\";\n\tin['C']=\"0101\";\n\tin['D']=\"0001\";\n\tin['E']=\"110\";\n\tin['F']=\"01001\";\n\tin['G']=\"10011011\";\n\tin['H']=\"010000\";\n\tin['I']=\"0111\";\n\tin['J']=\"10011000\";\n\tin['K']=\"0110\";\n\tin['L']=\"00100\";\n\tin['M']=\"10011001\";\n\tin['N']=\"10011110\";\n\tin['O']=\"00101\";\n\tin['P']=\"111\";\n\tin['Q']=\"10011111\";\n\tin['R']=\"1000\";\n\tin['S']=\"00110\";\n\tin['T']=\"00111\";\n\tin['U']=\"10011100\";\n\tin['V']=\"10011101\";\n\tin['W']=\"000010\";\n\tin['X']=\"10010010\";\n\tin['Y']=\"10010011\";\n\tin['Z']=\"10010000\";\n\tmap<string,char>out;\n\tout[\"00000\"]='A';\n\tout[\"00001\"]='B';\n\tout[\"00010\"]='C';\n\tout[\"00011\"]='D';\n\tout[\"00100\"]='E';\n\tout[\"00101\"]='F';\n\tout[\"00110\"]='G';\n\tout[\"00111\"]='H';\n\tout[\"01000\"]='I';\n\tout[\"01001\"]='J';\n\tout[\"01010\"]='K';\n\tout[\"01011\"]='L';\n\tout[\"01100\"]='M';\n\tout[\"01101\"]='N';\n\tout[\"01110\"]='O';\n\tout[\"01111\"]='P';\n\tout[\"10000\"]='Q';\n\tout[\"10001\"]='R';\n\tout[\"10010\"]='S';\n\tout[\"10011\"]='T';\n\tout[\"10100\"]='U';\n\tout[\"10101\"]='V';\n\tout[\"10110\"]='W';\n\tout[\"10111\"]='X';\n\tout[\"11000\"]='Y';\n\tout[\"11001\"]='Z';\n\tout[\"11010\"]=' ';\n\tout[\"11011\"]='.';\n\tout[\"11100\"]=',';\n\tout[\"11101\"]='-';\n\tout[\"11110\"]='\\'';\n\tout[\"11111\"]='?';\n\tstring s;\n\twhile(getline(cin,s)){\n\t\tstring a=\"\";\n\t\trep(i,s.size())a+=in[s[i]];\n\t\twhile(a.size()%5)a+='0';\n\t\trep(i,a.size()/5)cout<<out[a.substr(i*5,5)];\n\t\tcout<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\nstring c2s(char c){\n  if(c==' ') return \"101\";\n  if(c=='\\'') return \"000000\";\n  if(c==',') return \"000011\";\n  if(c=='-') return \"10010001\";\n  if(c=='.') return \"010001\";\n  if(c=='?') return \"000001\";\n  if(c=='A') return \"100101\";\n  if(c=='B') return \"10011010\";\n  if(c=='C') return \"0101\";\n  if(c=='D') return \"0001\";\n  if(c=='E') return \"110\";\n  if(c=='F') return \"01001\";\n  if(c=='G') return \"10011011\";\n  if(c=='H') return \"010000\";\n  if(c=='I') return \"0111\";\n  if(c=='J') return \"10011000\";\n  if(c=='K') return \"0110\";\n  if(c=='L') return \"00100\";\n  if(c=='M') return \"10011001\";\n  if(c=='N') return \"10011110\";\n  if(c=='O') return \"00101\";\n  if(c=='P') return \"111\";\n  if(c=='Q') return \"10011111\";\n  if(c=='R') return \"1000\";\n  if(c=='S') return \"00110\";\n  if(c=='T') return \"00111\";\n  if(c=='U') return \"10011100\";\n  if(c=='V') return \"10011101\";\n  if(c=='W') return \"000010\";\n  if(c=='X') return \"10010010\";\n  if(c=='Y') return \"10010011\";\n  if(c=='Z') return \"10010000\"; \n}\nchar s2c(string x){\n  if(x==\"00000\") return 'A';\n  if(x==\"00001\") return 'B';\n  if(x==\"00010\") return 'C';\n  if(x==\"00011\") return 'D';\n  if(x==\"00100\") return 'E';\n  if(x==\"00101\") return 'F';\n  if(x==\"00110\") return 'G';\n  if(x==\"00111\") return 'H';\n  if(x==\"01000\") return 'I';\n  if(x==\"01001\") return 'J';\n  if(x==\"01010\") return 'K';\n  if(x==\"01011\") return 'L';\n  if(x==\"01100\") return 'M';\n  if(x==\"01101\") return 'N';\n  if(x==\"01110\") return 'O';\n  if(x==\"01111\") return 'P';\n  if(x==\"10000\") return 'Q';\n  if(x==\"10001\") return 'R';\n  if(x==\"10010\") return 'S';\n  if(x==\"10011\") return 'T';\n  if(x==\"10100\") return 'U';\n  if(x==\"10101\") return 'V';\n  if(x==\"10110\") return 'W';\n  if(x==\"10111\") return 'X';\n  if(x==\"11000\") return 'Y';\n  if(x==\"11001\") return 'Z';\n  if(x==\"11010\") return ' ';\n  if(x==\"11011\") return '.';\n  if(x==\"11100\") return ',';\n  if(x==\"11101\") return '-';\n  if(x==\"11110\") return '\\'';\n  if(x==\"11111\") return '?';\n}\nint main(){\n  string s;\n  while(getline(cin,s)){\n    int i;\n    string m;\n    for(i=0;i<s.size();i++) m+=c2s(s[i]);\n    if(m.size()%5!=0){\n      m+=\"0000\";\n    }\n    string o;\n    for(i=0;i+5<=m.size();i+=5){\n      o+=s2c(m.substr(i,5));\n    }\n    cout << o << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nmap<char,string> l1;\nmap<string,char> l2;\nvoid init(){\nl1[' ']=\"101\";\nl1['\\'']=\"000000\";\nl1[',']=\"000011\";\nl1['-']=\"10010001\";\nl1['.']=\"010001\";\nl1['?']=\"000001\";\nl1['A']=\"100101\";\nl1['B']=\"10011010\";\nl1['C']=\"0101\";\nl1['D']=\"0001\";\nl1['E']=\"110\";\nl1['F']=\"01001\";\nl1['G']=\"10011011\";\nl1['H']=\"010000\";\nl1['I']=\"0111\";\nl1['J']=\"10011000\";\nl1['K']=\"0110\";\nl1['L']=\"00100\";\nl1['M']=\"10011001\";\nl1['N']=\"10011110\";\nl1['O']=\"00101\";\nl1['P']=\"111\";\nl1['Q']=\"10011111\";\nl1['R']=\"1000\";\nl1['S']=\"00110\";\nl1['T']=\"00111\";\nl1['U']=\"10011100\";\nl1['V']=\"10011101\";\nl1['W']=\"000010\";\nl1['X']=\"10010010\";\nl1['Y']=\"10010011\";\nl1['Z']=\"10010000\";\nl2[\"00000\"]='A';\nl2[\"00001\"]='B';\nl2[\"00010\"]='C';\nl2[\"00011\"]='D';\nl2[\"00100\"]='E';\nl2[\"00101\"]='F';\nl2[\"00110\"]='G';\nl2[\"00111\"]='H';\nl2[\"01000\"]='I';\nl2[\"01001\"]='J';\nl2[\"01010\"]='K';\nl2[\"01011\"]='L';\nl2[\"01100\"]='M';\nl2[\"01101\"]='N';\nl2[\"01110\"]='O';\nl2[\"01111\"]='P';\nl2[\"10000\"]='Q';\nl2[\"10001\"]='R';\nl2[\"10010\"]='S';\nl2[\"10011\"]='T';\nl2[\"10100\"]='U';\nl2[\"10101\"]='V';\nl2[\"10110\"]='W';\nl2[\"10111\"]='X';\nl2[\"11000\"]='Y';\nl2[\"11001\"]='Z';\nl2[\"11010\"]=' ';\nl2[\"11011\"]='.';\nl2[\"11100\"]=',';\nl2[\"11101\"]='-';\nl2[\"11110\"]='\\'';\nl2[\"11111\"]='?';\n}\nstring solve(string s){\nstring tmp = \"\";\nfor(int i=0;i<s.size();i++){\ntmp += l1[s[i]];\n}\nwhile(tmp.size()%5!=0){\ntmp += '0';\n}\nstring res = \"\";\nwhile(tmp.size()!=0){\nres += l2[tmp.substr(0,5)];\ntmp = tmp.substr(5);\n}\nreturn res;\n}\nint main(){\ninit();\nstring s;\nwhile(getline(cin,s)){\ncout<<solve(s)<<endl;\n}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char, string>m1;\nmap<string, char>m2;\nvoid f1() {\n\tm1[' '] = \"101\";\n\tm1['\\''] = \"000000\";\n\tm1[','] = \"000011\";\n\tm1['-'] = \"10010001\";\n\tm1['.'] = \"010001\";\n\tm1['?'] = \"000001\";\n\tm1['A'] = \"100101\";\n\tm1['B'] = \"10011010\";\n\tm1['C'] = \"0101\";\n\tm1['D'] = \"0001\";\n\tm1['E'] = \"110\";\n\tm1['F'] = \"01001\";\n\tm1['G'] = \"10011011\";\n\tm1['H'] = \"010000\";\n\tm1['I'] = \"0111\";\n\tm1['J'] = \"10011000\";\n\tm1['K'] = \"0110\";\n\tm1['L'] = \"00100\";\n\tm1['M'] = \"10011001\";\n\tm1['N'] = \"10011110\";\n\tm1['O'] = \"00101\";\n\tm1['P'] = \"111\";\n\tm1['Q'] = \"10011111\";\n\tm1['R'] = \"1000\";\n\tm1['S'] = \"00100\";\n\tm1['T'] = \"00111\";\n\tm1['U'] = \"10011100\";\n\tm1['V'] = \"10011101\";\n\tm1['W'] = \"000010\";\n\tm1['X'] = \"10010010\";\n\tm1['Y'] = \"10010011\";\n\tm1['Z'] = \"10010000\";\n}\nvoid f2() {\n\tm2[\"00000\"] = 'A';\n\tm2[\"00001\"] = 'B';\n\tm2[\"00010\"] = 'C';\n\tm2[\"00011\"] = 'D';\n\tm2[\"00100\"] = 'E';\n\tm2[\"00101\"] = 'F';\n\tm2[\"00110\"] = 'G';\n\tm2[\"00111\"] = 'H';\n\tm2[\"01000\"] = 'I';\n\tm2[\"01001\"] = 'J';\n\tm2[\"01010\"] = 'K';\n\tm2[\"01011\"] = 'L';\n\tm2[\"01100\"] = 'M';\n\tm2[\"01101\"] = 'N';\n\tm2[\"01110\"] = 'O';\n\tm2[\"01111\"] = 'P';\n\tm2[\"10000\"] = 'Q';\n\tm2[\"10001\"] = 'R';\n\tm2[\"10010\"] = 'S';\n\tm2[\"10011\"] = 'T';\n\tm2[\"10100\"] = 'U';\n\tm2[\"10101\"] = 'V';\n\tm2[\"10110\"] = 'W';\n\tm2[\"10111\"] = 'X';\n\tm2[\"11000\"] = 'Y';\n\tm2[\"11001\"] = 'Z';\n\tm2[\"11010\"] = ' ';\n\tm2[\"11011\"] = '.';\n\tm2[\"11100\"] = ',';\n\tm2[\"11101\"] = '-';\n\tm2[\"11110\"] = '\\'';\n\tm2[\"11111\"] = '?';\n}\nint main() {\n\tstring s, str, ans; f1(); f2();\n\tbool b = false;\n\twhile (cin >> s) {\n\t\tif (b) str += m1[' '];\n\t\twhile (str.size() >= 5) {\n\t\t\tans += m2[str.substr(0, 5)];\n\t\t\tstr.erase(str.begin(), str.begin() + 5);\n\t\t}\n\t\tfor (int i = 0; i < s.size(); i++) {\n\t\t\tstr += m1[s[i]];\n\t\t\twhile (str.size() >= 5) {\n\t\t\t\tans += m2[str.substr(0, 5)];\n\t\t\t\tstr.erase(str.begin(), str.begin() + 5);\n\t\t\t}\n\t\t}\n\t\tb = true;\n\t}\n\tif (str.size() > 0) {\n\t\tint n = str.size();\n\t\tfor (int i = 0; i < 5 - n; i++)str += '0';\n\t\tans += m2[str];\n\t}\n\tcout << ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<sstream>\n#include<algorithm>\n#include<climits>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<cfloat>\n#include<functional>\n#include<map>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<deque>\n#include<set>\n#include<bitset>\n#include<list>\n#include<numeric>\n#include<complex>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> i_i;\ntypedef pair<long long, int> ll_i;\ntypedef pair<double, int> d_i;\ntypedef pair<long long, long long> ll_ll;\ntypedef pair<double, double> d_d;\n\n#define PI 3.141592653589793238462643383279\n#define mod 1000000007LL\n#define rep(i, n) for(i = 0;i < n;++i)\n#define rep1(i, n) for(i = 1;i < n;++i)\n#define rep2d(i, j, n) for(i = 0;i < n;++i)for(j = i + 1;j < n;++j)\n#define per(i, n) for(i = n - 1;i > -1;--i)\n#define int(x) int x; scanf(\"%d\",&x)\n#define int2(x, y) int x, y; scanf(\"%d%d\",&x, &y)\n#define int3(x, y, z) int x, y, z; scanf(\"%d%d%d\",&x, &y, &z)\n#define sc(x) cin >> x\n#define sc2(x, y) cin >> x >> y\n#define sc3(x, y, z) cin >> x >> y >> z\n#define scn(n, a) rep(i, n)cin >> a[i]\n#define sc2n(n, a, b) rep(i, n)cin >> a[i] >> b[i]\n#define pri(x) cout << x << \"\\n\"\n#define pri2(x, y) cout << x << \" \" << y << \"\\n\"\n#define pri3(x, y, z) cout << x << \" \" << y << \" \" << z << \"\\n\"\n#define pb push_back\n#define mp make_pair\n#define all(a) (a).begin(),(a).end()\n#define endl \"\\n\"\n#define kabe puts(\"---------------------------\")\n#define kara puts(\"\")\n#define debug(x) cout << \" --- \" << x << \"\\n\"\n#define debug2(x, y) cout << \" --- \" << x << \" \" << y << \"\\n\"\n#define debug3(x, y, z) cout << \" --- \" << x << \" \" << y << \" \" << z << \"\\n\"\n#define X first\n#define Y second\n#define eps 0.0001\n#define prid(x) printf(\"%.15lf\\n\", x)\n\nstring be = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nstring lis[32];\nstring af = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ ',-.?\";\nint f(string x){\n  int a = (int)(x[0] - '0') * 16;\n  int b = (int)(x[1] - '0') * 8;\n  int c = (int)(x[2] - '0') * 4;\n  int d = (int)(x[3] - '0') * 2;\n  int e = (int)(x[4] - '0') * 1;\n  return a + b + c + d + e;\n}\n\nsigned main(void){\n  int i, j, k;\n  lis[0] = \"101\";\n  lis[1] = \"000000\";\n  lis[2] = \"000011\";\n  lis[3] = \"10010001\";\n  lis[4] = \"010001\";\n  lis[5] = \"000001\";\n  lis[6] = \"100101\";\n  lis[7] = \"10011010\";\n  lis[8] = \"0101\";\n  lis[9] = \"0001\";\n  lis[10] = \"110\";\n  lis[11] = \"01001\";\n  lis[12] = \"10011011\";\n  lis[13] = \"010000\";\n  lis[14] = \"0111\";\n  lis[15] = \"10011000\";\n  lis[16] = \"0110\";\n  lis[17] = \"00100\";\n  lis[18] = \"10011001\";\n  lis[19] = \"10011110\";\n  lis[20] = \"00101\";\n  lis[21] = \"111\";\n  lis[22] = \"10011111\";\n  lis[23] = \"1000\";\n  lis[24] = \"00110\";\n  lis[25] = \"00111\";\n  lis[26] = \"10011100\";\n  lis[27] = \"10011101\";\n  lis[28] = \"000010\";\n  lis[29] = \"10010010\";\n  lis[30] = \"10010011\";\n  lis[31] = \"10010000\";\n\n  string s;\n  for(int testcase = 0;getline(cin, s);testcase++){\n    string rmn = \"\";\n    rep(i, s.size()){\n      rep(j, be.size())if(s[i] == be[j])break;\n      rmn += lis[j];\n    }\n\n    int tmp = (5 - (rmn.size() % 5)) % 5;\n    rep(i, tmp)rmn += \"0\";\n\n    string res = \"\";\n    for(i = 0;i < rmn.size();i+=5)res += af[ f(rmn.substr(i, 5)) ];\n\n    pri(res);\n\n\n\n    s.clear();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <vector>\n#include <iostream>\nusing namespace std;\nstring e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nvector<string> s1 = {\n\t\"100101\", \"10011010\", \"0101\", \"0001\", \"110\",\n\t\"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\",\n\t\"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\",\n\t\"111\", \"10011111\", \"1000\", \"00110\", \"00111\",\n\t\"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\",\n\t\"10010000\", \"101\", \"010001\", \"000011\", \"10010001\",\n\t\"000000\", \"000001\"\n};\nvector<string> s2 = {\n\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \"01000\", \"01001\",\n\t\"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\",\n\t\"10100\", \"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\",\n\t\"11110\", \"11111\"\n};\nstring s;\nint main() {\n\twhile (s = \"\", getline(cin, s)) {\n\t\tstring t;\n\t\tfor (int i = 0; i < s.size(); i++) {\n\t\t\tfor (int j = 0; j < e.size(); j++) {\n\t\t\t\tif (s[i] == e[j]) t += s1[j];\n\t\t\t}\n\t\t}\n\t\twhile (t.size() % 5 != 0) t += \"0\";\n\t\tstring ret = \"\";\n\t\tfor (int i = 0; i < t.size(); i += 5) {\n\t\t\tstring u = t.substr(i, 5);\n\t\t\tfor (int j = 0; j < e.size(); j++) {\n\t\t\t\tif (u == s2[j]) ret += e[j];\n\t\t\t}\n\t\t}\n\t\tcout << ret << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<string>\n#include<cmath>\n\nusing namespace std;\n\nstring DoctorTableAD(char c){\n\tstring s;\n\tswitch( c ){\n\t\tcase ' ': s = \"101\"; break;\n\t\tcase 0x27: s = \"000000\"; break;\n\t\tcase ',': s = \"000011\"; break;\n\t\tcase '-': s = \"10010001\"; break;\n\t\tcase '.': s = \"010001\"; break;\n\t\tcase '?': s = \"000001\"; break;\n\t\tcase 'A': s = \"100101\"; break;\n\t\tcase 'B': s = \"10011010\"; break;\n\t\tcase 'C': s = \"0101\"; break;\n\t\tcase 'D': s = \"0001\"; break;\n\t\tcase 'E': s = \"110\"; break;\n\t\tcase 'F': s = \"01001\"; break;\n\t\tcase 'G': s = \"10011011\"; break;\n\t\tcase 'H': s = \"010000\"; break;\n\t\tcase 'I': s = \"0111\"; break;\n\t\tcase 'J': s = \"10011000\"; break;\n\t\tcase 'K': s = \"0110\"; break;\n\t\tcase 'L': s = \"00100\"; break;\n\t\tcase 'M': s = \"10011001\"; break;\n\t\tcase 'N': s = \"10011110\"; break;\n\t\tcase 'O': s = \"00101\"; break;\n\t\tcase 'P': s = \"111\"; break;\n\t\tcase 'Q': s = \"10011111\"; break;\n\t\tcase 'R': s = \"1000\"; break;\n\t\tcase 'S': s = \"00110\"; break;\n\t\tcase 'T': s = \"00111\"; break;\n\t\tcase 'U': s = \"10011100\"; break;\n\t\tcase 'V': s = \"10011101\"; break;\n\t\tcase 'W': s = \"000010\"; break;\n\t\tcase 'X': s = \"10010010\"; break;\n\t\tcase 'Y': s = \"10010011\"; break;\n\t\tcase 'Z': s = \"10010000\"; break;\n\t}\n\treturn s;\n}\nint myatoi(string bin_s){\n\tint ret = 0;\n\twhile( bin_s.length() > 0 ){\n\t\tret += (int)((bin_s[0] - '0') * pow(2.0, (double)(bin_s.length() - 1)));\n\t\tbin_s.erase(0,1);\n\t}\n\treturn ret;\n}\nchar DoctorTableDA(string &s){\n\tint d = myatoi(s);\n\tchar ac[] = \" .,-'?\";\n\t\n\tfor(int i = 0; i < 'Z' - 'A'; i++) if(d == i) return i + 'A';\n\tfor(int i = 0; i < sizeof(ac)/sizeof(*ac); i++) if(i + 26 == d) return ac[i];\n\treturn ' ';\n}\nstring DoctorLovedEncode(string &raw){\n\tstring s;\n\tstring ret;\n\tfor(unsigned int i = 0; i < raw.length(); i++){\n\t\ts += DoctorTableAD(raw[i]);\n\t}\n\t// padding\n\twhile( s.length() % 5 != 0 ) s += '0';\n\n\tfor(unsigned int i = 0; i < s.length() / 5; i++){\n\t\tret += DoctorTableDA( s.substr(i*5,5) );\n\t}\n\treturn ret;\n}\n\nint main(void){\n\twhile(true){\n\t\tstring s;\n\n\t\twhile( true ){\n\t\t\tchar c;\n\t\t\tc = cin.get();\n\t\t\tif( cin.eof() ) return 0;\n\t\t\tif( c == '\\n') break;\n\t\t\telse s += c;\n\t\t}\n\n\t\tcout << DoctorLovedEncode( s ) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i,n)for(int i=0;i<n;i++)\nusing namespace std;\n\nmap<char, int>notal{\n\t{ ' ',26 },{ '.',27 },{ ',',28 },{ '-',29 },{ '\\'',30 },{ '?',31 }\n};\nmap<int, char>mp{\n\t{ 26,' ' },{ 27,'\\'' },{ 28,',' },{ 29,'-' },{ 30,'.' },{ 31,'?' },\n};\nstring code[]{ \"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\" };\nint bin(string s) {\n\treverse(s.begin(), s.end());\n\tint i = 1;\n\tint res = 0;\n\tfor (char c : s) {\n\t\tres += i*(c - '0');\n\t\ti <<= 1;\n\t}\n\treturn res;\n}\nint main() {\n\tstring s;\n\twhile (getline(cin, s)) {\n\t\tstring ss;\n\t\tfor (char c : s) {\n\t\t\tif (isalpha(c))ss += code[c - 'A'];\n\t\t\telse ss += code[notal[c]];\n\t\t}\n\t\twhile (ss.size() % 5)ss += '0';\n\t\tstring ans;\n\t\tfor (int i = 0; i <= ss.size() - 5; i += 5) {\n\t\t\tint d = bin(ss.substr(i, 5));\n\t\t\tif (d < 26)ans += 'A' + d;\n\t\t\telse ans += mp[d];\n\t\t}\n\t\tcout << ans << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n\nusing namespace std;\n\nstring encode1(char c) {\n  switch (c) {\n  case ' ': return \"101\";\n  case '\\'': return \"000000\";\n  case ',': return \"000011\";\n  case '-': return \"10010001\";\n  case '.': return \"010001\";\n  case '?': return \"000001\";\n  case 'A': return \"100101\";\n  case 'B': return \"10011010\";\n  case 'C': return \"0101\";\n  case 'D': return \"0001\";\n  case 'E': return \"110\";\n  case 'F': return \"01001\";\n  case 'G': return \"10011011\";\n  case 'H': return \"010000\";\n  case 'I': return \"0111\";\n  case 'J': return \"10011000\";\n  case 'K': return \"0110\";\n  case 'L': return \"00100\";\n  case 'M': return \"10011001\";\n  case 'N': return \"10011110\";\n  case 'O': return \"00101\";\n  case 'P': return \"111\";\n  case 'Q': return \"10011111\";\n  case 'R': return \"1000\";\n  case 'S': return \"00110\";\n  case 'T': return \"00111\";\n  case 'U': return \"10011100\";\n  case 'V': return \"10011101\";\n  case 'W': return \"000010\";\n  case 'X': return \"10010010\";\n  case 'Y': return \"10010011\";\n  case 'Z': return \"10010000\";\n  }\n  return \"\";\n}\n\nchar encode2(string str) {\n  int num = 0;\n  int b = 1;\n  for (int i = 0; i < 5; i++) {\n    num += (str[4-i] == '0') ? 0 : b;\n    b *= 2;\n  }\n  if (num <= 26) {\n    return 'A' + num;\n  }\n  if (num == 27) return ' ';\n  else if (num == 28) return '.';\n  else if (num == 29) return ',';\n  else if (num == 30) return '-';\n  else if (num == 31) return '\\'';\n  else return '?';\n}\n\nint main() {\n  string str;\n  while (getline(cin, str)) {\n    string result = \"\";\n    for (unsigned int i = 0; i < str.size(); i++) {\n      result += encode1(str[i]);\n    }\n    while (result.size() % 5) result += '0';\n    string ans = \"\";\n    for (unsigned int i = 0; i < result.size(); i += 5) {\n      ans += encode2(result.substr(i, 5));\n    }\n    cout << ans << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nint main(void)\n{\n\tstring str;\n\t\n\tmap<string,string> encode;\n\tmap<string,string> decode;\n\t\n\tencode[\" \"] = \"101\";\n\tencode[\"'\"] = \"000000\";\n\tencode[\",\"] = \"000011\";\n\tencode[\"-\"] = \"10010001\";\n\tencode[\".\"] = \"010001\";\n\tencode[\"?\"] = \"000001\";\n\tencode[\"A\"] = \"100101\";\n\tencode[\"B\"] = \"10011010\";\n\tencode[\"C\"] = \"0101\";\n\tencode[\"D\"] = \"0001\";\n\tencode[\"E\"] = \"110\";\n\tencode[\"F\"] = \"01001\";\n\tencode[\"G\"] = \"10011011\";\n\tencode[\"H\"] = \"010000\";\n\tencode[\"I\"] = \"0111\";\n\tencode[\"J\"] = \"10011000\";\n\tencode[\"K\"] = \"0110\";\n\tencode[\"L\"] = \"00100\";\n\tencode[\"M\"] = \"10011001\";\n\tencode[\"N\"] = \"10011110\";\n\tencode[\"O\"] = \"00101\";\n\tencode[\"P\"] = \"111\";\n\tencode[\"Q\"] = \"10011111\";\n\tencode[\"R\"] = \"1000\";\n\tencode[\"S\"] = \"00110\";\n\tencode[\"T\"] = \"00111\";\n\tencode[\"U\"] = \"10011100\";\n\tencode[\"V\"] = \"10011101\";\n\tencode[\"W\"] = \"000010\";\n\tencode[\"X\"] = \"10010010\";\n\tencode[\"Y\"] = \"10010011\";\n\tencode[\"Z\"] = \"10010000\";\n\t\n\tdecode[\"00000\"] = \"A\";\n\tdecode[\"00001\"] = \"B\";\n\tdecode[\"00010\"] = \"C\";\n\tdecode[\"00011\"] = \"D\";\n\tdecode[\"00100\"] = \"E\";\n\tdecode[\"00101\"] = \"F\";\n\tdecode[\"00110\"] = \"G\";\n\tdecode[\"00111\"] = \"H\";\n\tdecode[\"01000\"] = \"I\";\n\tdecode[\"01001\"] = \"J\";\n\tdecode[\"01010\"] = \"K\";\n\tdecode[\"01011\"] = \"L\";\n\tdecode[\"01100\"] = \"M\";\n\tdecode[\"01101\"] = \"N\";\n\tdecode[\"01110\"] = \"O\";\n\tdecode[\"01111\"] = \"P\";\n\tdecode[\"10000\"] = \"Q\";\n\tdecode[\"10001\"] = \"R\";\n\tdecode[\"10010\"] = \"S\";\n\tdecode[\"10011\"] = \"T\";\n\tdecode[\"10100\"] = \"U\";\n\tdecode[\"10101\"] = \"V\";\n\tdecode[\"10110\"] = \"W\";\n\tdecode[\"10111\"] = \"X\";\n\tdecode[\"11000\"] = \"Y\";\n\tdecode[\"11001\"] = \"Z\";\n\tdecode[\"11010\"] = \" \";\n\tdecode[\"11011\"] = \".\";\n\tdecode[\"11100\"] = \",\";\n\tdecode[\"11101\"] = \"-\";\n\tdecode[\"11110\"] = \"'\";\n\tdecode[\"11111\"] = \"?\";\n\t\n\twhile (getline(cin, str)){\n\t\tstring a;\n\t\tfor (int i = 0; i < str.size(); i++){\n\t\t\ta += encode[str.substr(i, 1)];\n\t\t}\n\t\ta += \"0000\";\n\t\tstring res;\n\t\tfor (int i = 0; i+5 <= a.size(); i+=5){\n\t\t\tres += decode[a.substr(i, 5)];\n\t\t}\n\t\tcout << res << endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n\nusing namespace std;\n\n\nint main() {\n\n  string str;\n\n  map<string,string> encode;\n  map<string,string> decode;\n\n  encode[\" \"] = \"101\";\n  encode[\"'\"] = \"000000\";\n  encode[\",\"] = \"000011\";\n  encode[\"-\"] = \"10010001\";\n  encode[\".\"] = \"010001\";\n\n  encode[\"?\"] = \"000001\";\n  encode[\"A\"] = \"100101\";\n  encode[\"B\"] = \"10011010\";\n  encode[\"C\"] = \"0101\";\n  encode[\"D\"] = \"0001\";\n  encode[\"E\"] = \"110\";\n  encode[\"F\"] = \"01001\";\n  encode[\"G\"] = \"10011011\";\n\n  encode[\"H\"] = \"010000\";\n  encode[\"I\"] = \"0111\";\n  encode[\"J\"] = \"10011000\";\n  encode[\"K\"] = \"0110\";\n  encode[\"L\"] = \"00100\";\n  encode[\"M\"] = \"10011001\";\n  encode[\"N\"] = \"10011110\";\n\n  encode[\"O\"] = \"00101\";\n  encode[\"P\"] = \"111\";\n  encode[\"Q\"] = \"10011111\";\n  encode[\"R\"] = \"1000\";\n  encode[\"S\"] = \"00110\";\n  encode[\"T\"] = \"00111\";\n  encode[\"U\"] = \"10011100\";\n\n  encode[\"V\"] = \"10011101\";\n  encode[\"W\"] = \"000010\";\n  encode[\"X\"] = \"10010010\";\n  encode[\"Y\"] = \"10010011\";\n  encode[\"Z\"] = \"10010000\";\n\n  decode[\"00000\"] = \"A\";\n  decode[\"00001\"] = \"B\";\n  decode[\"00010\"] = \"C\";\n  decode[\"00011\"] = \"D\";\n  decode[\"00100\"] = \"E\";\n  decode[\"00101\"] = \"F\";\n  decode[\"00110\"] = \"G\";\n\n  decode[\"00111\"] = \"H\";\n  decode[\"01000\"] = \"I\";\n  decode[\"01001\"] = \"J\";\n  decode[\"01010\"] = \"K\";\n  decode[\"01011\"] = \"L\";\n  decode[\"01100\"] = \"M\";\n  decode[\"01101\"] = \"N\";\n\n  decode[\"01110\"] = \"O\";\n  decode[\"01111\"] = \"P\";\n  decode[\"10000\"] = \"Q\";\n  decode[\"10001\"] = \"R\";\n  decode[\"10010\"] = \"S\";\n  decode[\"10011\"] = \"T\";\n  decode[\"10100\"] = \"U\";\n\n  decode[\"10101\"] = \"V\";\n  decode[\"10110\"] = \"W\";\n  decode[\"10111\"] = \"X\";\n  decode[\"11000\"] = \"Y\";\n  decode[\"11001\"] = \"Z\";\n\n  decode[\"11010\"] = \" \";\n  decode[\"11011\"] = \".\";\n  decode[\"11100\"] = \",\";\n  decode[\"11101\"] = \"-\";\n  decode[\"11110\"] = \"'\";\n  decode[\"11111\"] = \"?\";\n\n  while(getline(cin,str)) {\n\n    string enc=\"\";\n\n    for(int i=0;i<str.size();i++) {\n\n      enc+=encode[str.substr(i,1)];\n\n    }\n\n    enc+=\"0000\";\n\n    string dec=\"\";\n\n    for(int i=0;i+5<=enc.size();i+=5) {\n\n      dec+=decode[enc.substr(i,5)];\n\n    }\n\n    cout << dec << endl;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <string>\n#include <cstdio>\nusing namespace std;\n\nint main() {\n\tmap<char,string> table1;\n\tmap<string,char> table2;\n\ttable1[' ']=\"101\";\n\ttable1['\\'']=\"000000\";\n\ttable1[',']=\"000011\";\n\ttable1['-']=\"10010001\";\n\ttable1['.']=\"010001\";\n\ttable1['?']=\"000001\";\n\ttable1['A']=\"100101\";\n\ttable1['B']=\"10011010\";\n\ttable1['C']=\"0101\";\n\ttable1['D']=\"0001\";\n\ttable1['E']=\"110\";\n\ttable1['F']=\"01001\";\n\ttable1['G']=\"10011011\";\n\ttable1['H']=\"010000\";\n\ttable1['I']=\"0111\";\n\ttable1['J']=\"10011000\";\n\ttable1['K']=\"0110\";\n\ttable1['L']=\"00100\";\n\ttable1['M']=\"10011001\";\n\ttable1['N']=\"10011110\";\n\ttable1['O']=\"00101\";\n\ttable1['P']=\"111\";\n\ttable1['Q']=\"10011111\";\n\ttable1['R']=\"1000\";\n\ttable1['S']=\"00110\";\n\ttable1['T']=\"00111\";\n\ttable1['U']=\"10011100\";\n\ttable1['V']=\"10011101\";\n\ttable1['W']=\"000010\";\n\ttable1['X']=\"10010010\";\n\ttable1['Y']=\"10010011\";\n\ttable1['Z']=\"10010000\";\n\t\n\ttable2[\"00000\"]='A';\n\ttable2[\"00001\"]='B';\n\ttable2[\"00010\"]='C';\n\ttable2[\"00011\"]='D';\n\ttable2[\"00100\"]='E';\n\ttable2[\"00101\"]='F';\n\ttable2[\"00110\"]='G';\n\ttable2[\"00111\"]='H';\n\ttable2[\"01000\"]='I';\n\ttable2[\"01001\"]='J';\n\ttable2[\"01010\"]='K';\n\ttable2[\"01011\"]='L';\n\ttable2[\"01100\"]='M';\n\ttable2[\"01101\"]='N';\n\ttable2[\"01110\"]='O';\n\ttable2[\"01111\"]='P';\n\ttable2[\"10000\"]='Q';\n\ttable2[\"10001\"]='R';\n\ttable2[\"10010\"]='S';\n\ttable2[\"10011\"]='T';\n\ttable2[\"10100\"]='U';\n\ttable2[\"10101\"]='V';\n\ttable2[\"10110\"]='W';\n\ttable2[\"10111\"]='X';\n\ttable2[\"11000\"]='Y';\n\ttable2[\"11001\"]='Z';\n\ttable2[\"11010\"]=' ';\n\ttable2[\"11011\"]='.';\n\ttable2[\"11100\"]=',';\n\ttable2[\"11101\"]='-';\n\ttable2[\"11110\"]='\\'';\n\ttable2[\"11111\"]='?';\n\t\n\tstring strIn;\n\tstring strOut;\n\tstring code;\n\tint codelen;\n\t\n\twhile(getline(cin,strIn)){\n\t\tcode = \"\";\n\t\tstrOut = \"\";\n\t\tfor(int i=0,l=strIn.length();i<l;++i){\n\t\t\tcode += table1[strIn[i]];\n\t\t}\n\t\t\n\t\tif(codelen=code.length()%5){\n\t\t\tfor(int i=0;i<5-codelen;++i)code += \"0\";\n\t\t}\n\t\t\n\t\tfor(int i=0,len=code.length()/5;i<len;++i){\n\t\t\t cout << table2[code.substr(i*5,5)];\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\nint ctoi(char ch);\nstring code(char ch);\nchar decode(string substr);\n\nint ctoi(char ch){\n\treturn ch-'0';\n}\nstring code(char ch){\n\tstring str;\n\tswitch(ch){\n\t\tcase ' ': return str=\"101\";\n\t\tcase '\\'': return str=\"000000\";\n\t\tcase '\\,': return str=\"000011\";\n\t\tcase '\\-': return str=\"10010001\";\n\t\tcase '\\.': return str=\"010001\";\n\t\tcase '\\?': return str=\"000001\";\n\t\t\n\t\tcase 'A': return str=\"100101\";\n\t\tcase 'B': return str=\"10011010\";\n\t\tcase 'C': return str=\"0101\";\n\t\tcase 'D': return str=\"0001\";\n\t\tcase 'E': return str=\"110\";\n\t\tcase 'F': return str=\"01001\";\n\t\tcase 'G': return str=\"10011011\";\n\t\t\n\t\tcase 'H': return str=\"010000\";\n\t\tcase 'I': return str=\"0111\";\n\t\tcase 'J': return str=\"10011000\";\n\t\tcase 'K': return str=\"0110\";\n\t\tcase 'L': return str=\"00100\";\n\t\tcase 'M': return str=\"10011001\";\n\t\tcase 'N': return str=\"10011110\";\n\t\t\n\t\tcase 'O': return str=\"00101\";\n\t\tcase 'P': return str=\"111\";\n\t\tcase 'Q': return str=\"10011111\";\n\t\tcase 'R': return str=\"1000\";\n\t\tcase 'S': return str=\"00110\";\n\t\tcase 'T': return str=\"00111\";\n\t\tcase 'U': return str=\"10011100\";\n\t\t\n\t\tcase 'V': return str=\"10011101\";\n\t\tcase 'W': return str=\"000010\";\n\t\tcase 'X': return str=\"10010010\";\n\t\tcase 'Y': return str=\"10010011\";\n\t\tcase 'Z': return str=\"10010000\";\n\t\t\n\t}\n\treturn str;\n}\nchar decode(string substr){\n\tint strnum=0;\n\tstrnum+=16*ctoi(substr[0]);\n\tstrnum+=8*ctoi(substr[1]);\n\tstrnum+=4*ctoi(substr[2]);\n\tstrnum+=2*ctoi(substr[3]);\n\tstrnum+=1*ctoi(substr[4]);\n\tif(strnum + 'A' <= 'Z' )\n\t\treturn char(strnum + 'A');\n\telse{\n\t\tswitch(strnum){\n\t\t\tcase 'Z'-'A'+1: return ' ';\n\t\t\tcase 'Z'-'A'+2: return '\\.';\n\t\t\tcase 'Z'-'A'+3: return '\\,';\n\t\t\tcase 'Z'-'A'+4: return '\\-';\n\t\t\tcase 'Z'-'A'+5: return '\\'';\n\t\t\tcase 'Z'-'A'+6: return '\\?';\n\t\t}\n\t}\n\treturn 0;\n}\n\nint main(){\n\tstring str1, str2, str3;\n\tint i, j;\n\twhile(getline(cin,str1)){\n\t\tstr2.erase();\n\t\tstr3.erase();\n\t\tfor(i=0;i<str1.size();i++){\n\t\t\tstr2 += code(str1[i]);\n\t\t}\n\t\tfor(i=str2.size() % 5; i<5;i++){\n\t\t\tstr2 +=\"0\";\n\t\t}\n\t\tfor(i=0;i<str2.size();i+=5){\n\t\t\t//cout<<str2.substr(i, 5)<<\" \";\n\t\t\tstr3+=decode(str2.substr(i, 5));\n\t\t}\n\t\tcout<<str3<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\nusing namespace std;\nint StoI(string s)\n{\n\tint r=0,i;\n\tfor(i=0;i<s.size();++i)\n\t\tr=(r<<1)+s[i]-'0';\n\treturn r;\n}\nint main()\n{\n\tmap<char,string> m1;\n\tm1[' ']=\"101\";\n\tm1['\\'']=\"000000\";\n\tm1[',']=\"000011\";\n\tm1['-']=\"10010001\";\n\tm1['.']=\"010001\";\n\tm1['?']=\"000001\";\n\tm1['A']=\"100101\";\n\tm1['B']=\"10011010\";\n\tm1['C']=\"0101\";\n\tm1['D']=\"0001\";\n\tm1['E']=\"110\";\n\tm1['F']=\"01001\";\n\tm1['G']=\"10011011\";\n\tm1['H']=\"010000\";\n\tm1['I']=\"0111\";\n\tm1['J']=\"10011000\";\n\tm1['K']=\"0110\";\n\tm1['L']=\"00100\";\n\tm1['M']=\"10011001\";\n\tm1['N']=\"10011110\";\n\tm1['O']=\"00101\";\n\tm1['P']=\"111\";\n\tm1['Q']=\"10011111\";\n\tm1['R']=\"1000\";\n\tm1['S']=\"00110\";\n\tm1['T']=\"00111\";\n\tm1['U']=\"10011100\";\n\tm1['V']=\"10011101\";\n\tm1['W']=\"000010\";\n\tm1['X']=\"10010010\";\n\tm1['Y']=\"10010011\";\n\tm1['Z']=\"10010000\";\n\tchar m2[]=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\tstring s1,s2,s3;\n\tint i;\n\n\twhile(getline(cin,s1))\n\t{\n\t\ts2=s3=\"\";\n\t\tfor(i=0;i<s1.size();++i)\n\t\t\ts2+=m1[s1[i]];\n\t\ts2.insert(s2.end(), (5-s2.size()%5)%5, '0');\n\t\tfor(i=0;i<s2.size();i+=5)\n\t\t\ts3+=m2[ StoI(s2.substr(i,5)) ];\n\t\tcout << s3 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n\n#define rep(i,n) for(int i=0;i<n;i++)\n\nusing namespace std;\n\nvector<string> split(string &str,char delim)\n{\n\tvector<string> res;\n\tsize_t current = 0,found;\n\twhile((found = str.find_first_of(delim,current)) != string::npos)\n\t{\n\t\tres.push_back(string(str,current,found  - current));\n\t\tcurrent = found + 1;\n\t}\n\tres.push_back(string(str,current,str.size() - current));\n\treturn res;\n}\n\n\nint main()\n{\n\tstring s;\n\tmap<char,string> ID;\n\tID[' '] = \"101\";\n\tID['\\''] = \"000000\";\n\tID[','] = \"000011\";\n\tID['-'] = \"100010001\";\n\tID['.'] = \"010001\";\n\tID['?'] = \"000001\";\n\tID['A'] = \"100101\";\n\tID['B'] = \"10011010\";\n\tID['C'] = \"0101\";\n\tID['D'] = \"0001\";\n\tID['E'] = \"110\";\n\tID['F'] = \"01001\";\n\tID['G'] = \"10011011\";\n\tID['H'] = \"010000\";\n\tID['I'] = \"0111\";\n\tID['J'] = \"10011000\";\n\tID['K'] = \"0110\";\n\tID['L'] = \"00100\";\n\tID['M'] = \"10011001\";\n\tID['N'] = \"100011110\";\n\tID['O'] = \"00101\";\n\tID['P'] = \"111\";\n\tID['Q'] = \"10011111\";\n\tID['R'] = \"1000\";\n\tID['S'] = \"00110\";\n\tID['T'] = \"00111\";\n\tID['U'] = \"10011100\";\n\tID['V'] = \"10011101\";\n\tID['W'] = \"000010\";\n\tID['X'] = \"10010010\";\n\tID['Y'] = \"10010011\";\n\tID['Z'] = \"10010000\";\n\n\tmap<string,string> Id;\n\tId[\"00000\"] = \"A\";\n\tId[\"00001\"] = \"B\";\n\tId[\"00010\"] = \"C\";\n\tId[\"00011\"] = \"D\";\n\tId[\"00100\"] = \"E\";\n\tId[\"00101\"] = \"F\";\n\tId[\"00110\"] = \"G\";\n\tId[\"00111\"] = \"H\";\n\tId[\"01000\"] = \"I\";\n\tId[\"01001\"] = \"J\";\n\tId[\"01010\"] = \"K\";\n\tId[\"01011\"] = \"L\";\n\tId[\"01100\"] = \"M\";\n\tId[\"01101\"] = \"N\";\n\tId[\"01110\"] = \"O\";\n\tId[\"01111\"] = \"P\";\n\tId[\"10000\"] = \"Q\";\n\tId[\"10001\"] = \"R\";\n\tId[\"10010\"] = \"S\";\n\tId[\"10011\"] = \"T\";\n\tId[\"10100\"] = \"U\";\n\tId[\"10101\"] = \"V\";\n\tId[\"10110\"] = \"W\";\n\tId[\"10111\"] = \"X\";\n\tId[\"11000\"] = \"Y\";\n\tId[\"11001\"] = \"Z\";\n\tId[\"11010\"] = \" \";\n\tId[\"11011\"] = \".\";\n\tId[\"11100\"] = \",\";\n\tId[\"11101\"] = \"-\";\n\tId[\"11110\"] = \"'\";\n\tId[\"11111\"] = \"?\";\n\n\n\tvector<string> temp;\n\tstring str = \"\";\n\twhile(getline(cin,s))\n\t{\n\t\tif(cin.eof()) break;\n\t\trep(i,s.size())\n\t\t{\n\t\t\tstr += ID[s[i]];\n\t\t}\n\n\t\tint count = 1;\n\t\tfor(int i=0;i<str.size();i++)\n\t\t{\n\t\t\tif(count == 5)\n\t\t\t{\n\t\t\t\tstr.insert(i+1,\" \");\n\t\t\t\tcount  =0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\tvector<string> str2 = split(str,' ');\n\t\twhile(str2[str2.size()-1].size() < 5)\n\t\t{\n\t\t\tstr2[str2.size()-1] += \"0\";\n\t\t}\n\n\t\tstring ans = \"\";\n\t\trep(i,str2.size())\n\t\t{\n\t\t\tans += Id[str2[i]];\n\t\t}\n\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\nusing namespace std;\n\nint main()\n{\n  map<char, string> c2s;\n  c2s[' '] = \"101\";\n  c2s['\\''] = \"000000\";\n  c2s[','] = \"000011\";\n  c2s['-'] = \"10010001\";\n  c2s['.'] = \"010001\";\n  c2s['?'] = \"000001\";\n  c2s['A'] = \"100101\";\n  c2s['B'] = \"10011010\";\n  c2s['C'] = \"0101\";\n  c2s['D'] = \"0001\";\n  c2s['E'] = \"110\";\n  c2s['F'] = \"01001\";\n  c2s['G'] = \"10011011\";\n  c2s['H'] = \"010000\";\n  c2s['I'] = \"0111\";\n  c2s['J'] = \"10011000\";\n  c2s['K'] = \"0110\";\n  c2s['L'] = \"00100\";\n  c2s['M'] = \"10011001\";\n  c2s['N'] = \"10011110\";\n  c2s['O'] = \"00101\";\n  c2s['P'] = \"111\";\n  c2s['Q'] = \"10011111\";\n  c2s['R'] = \"1000\";\n  c2s['S'] = \"00110\";\n  c2s['T'] = \"00111\";\n  c2s['U'] = \"10011100\";\n  c2s['V'] = \"10011101\";\n  c2s['W'] = \"000010\";\n  c2s['X'] = \"10010010\";\n  c2s['Y'] = \"10010011\";\n  c2s['Z'] = \"10010000\";\n\n  map<string, char> s2c;\n  s2c[\"00000\"] = 'A';\n  s2c[\"00001\"] = 'B';\n  s2c[\"00010\"] = 'C';\n  s2c[\"00011\"] = 'D';\n  s2c[\"00100\"] = 'E';\n  s2c[\"00101\"] = 'F';\n  s2c[\"00110\"] = 'G';\n  s2c[\"00111\"] = 'H';\n  s2c[\"01000\"] = 'I';\n  s2c[\"01001\"] = 'J';\n  s2c[\"01010\"] = 'K';\n  s2c[\"01011\"] = 'L';\n  s2c[\"01100\"] = 'M';\n  s2c[\"01101\"] = 'N';\n  s2c[\"01110\"] = 'O';\n  s2c[\"01111\"] = 'P';\n  s2c[\"10000\"] = 'Q';\n  s2c[\"10001\"] = 'R';\n  s2c[\"10010\"] = 'S';\n  s2c[\"10011\"] = 'T';\n  s2c[\"10100\"] = 'U';\n  s2c[\"10101\"] = 'V';\n  s2c[\"10110\"] = 'W';\n  s2c[\"10111\"] = 'X';\n  s2c[\"11000\"] = 'Y';\n  s2c[\"11001\"] = 'Z';\n  s2c[\"11010\"] = ' ';\n  s2c[\"11011\"] = '.';\n  s2c[\"11100\"] = ',';\n  s2c[\"11101\"] = '-';\n  s2c[\"11110\"] = '\\'';\n  s2c[\"11111\"] = '?';\n\n  string s;\n  while (getline(cin, s)) {\n    string e1 = \"\";\n    for (unsigned int i = 0; i < s.size(); ++i) {\n      if (c2s.find(s[i]) != c2s.end())\n\te1 += c2s[s[i]];\n    }\n\n    while (e1.size()%5 != 0)\n      e1 += \"0\";\n\n    string e2 = \"\";\n    for (int i = 0; i < e1.size(); i += 5)\n      e2 += s2c[e1.substr(i, 5)];\n    cout << e2 << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid hantei(char *str);\n\nchar DataBase[][3][80] =\n\t{\n\t/* [文字] ,[符号＿変換前] ,[符号＿変換後] */\n\t{ \" \", \"101\", \"11010\" },{ \"\\'\", \"000000\", \"11110\" },{ \",\", \"000011\", \"11100\" },{ \"-\", \"10010001\", \"11101\" },\n\t{ \".\", \"010001\", \"11011\" },{ \"\\?\", \"000001\", \"11111\" },{ \"A\", \"100101\", \"00000\" },{ \"B\", \"10011010\", \"00001\" },\n    { \"C\", \"0101\", \"00010\" },{ \"D\", \"0001\", \"00011\" },{ \"E\", \"110\", \"00100\" },{ \"F\", \"01001\", \"00101\" },\n\t{ \"G\", \"10011011\", \"00110\" },{ \"H\", \"010000\", \"00111\" },{ \"I\", \"0111\", \"01000\" },{ \"J\", \"10011000\", \"01001\" },\n\t{ \"K\", \"0110\", \"01010\" },{ \"L\", \"00100\", \"01011\" },{ \"M\", \"10011001\", \"01100\" },{ \"N\", \"10011110\", \"01101\" },\n\t{ \"O\", \"00101\", \"01110\" },{ \"P\", \"111\", \"01111\" },{ \"Q\", \"10011111\", \"10000\" },{ \"R\", \"1000\", \"10001\" },\n\t{ \"S\", \"00110\", \"10010\" },{ \"T\", \"00111\", \"10011\" },{ \"U\", \"10011100\", \"10100\" },{ \"V\", \"10011101\", \"10101\" },\n\t{ \"W\", \"000010\", \"10110\" },{ \"X\", \"10010010\", \"10111\" },{ \"Y\", \"10010011\", \"11000\" },{ \"Z\", \"100100000\", \"11001\" },\n    {\"\", \"\", \"\" }\n};\n\n\nint main(void)\n{\n\tchar str1[1000],str2[1000],ch;\n\tint cut_i;\n\t\n\tcut_i=0;\n\twhile((ch = getchar())!=EOF){\n\t\tif(ch !='\\n'){\n\t\t\tstr2[cut_i] = ch;\n\t\t\tcut_i++;\n\t\t}\n\t\telse {\n\t\t\tstrncpy(str1,str2,cut_i);\n\t\t\tstr1[cut_i]='\\0';\n\t\t\thantei(str1);\n\t\t\tcut_i=0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\nvoid hantei(char *str)\n{\n\tint len1,cut_i,cut_j,count;\n\tchar ans[1000]={\"\"},str2[1000]={\"\"},str3[1000]={\"\"};\n\tchar zero[]={\"0000\"};\n\n\tlen1 = strlen(str);\n\tcount = 0;\n\n\tfor(cut_i=0;cut_i<len1;cut_i++){\n\t\tcut_j=0;\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(!strncmp((str+cut_i),DataBase[cut_j][0],1)){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(str2,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\telse if(count !=0){\n\t\t\t\t\tstrcpy(str2+count,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\t\n\tlen1 = strlen(str2);\n\tcount = 0;\n\n\tif( len1 % 5 != 0){\n\t\tcut_i = 5 - len1 % 5;\n\t\tstrncat(str2,zero,cut_i);\n\t\tlen1 = strlen(str2);\n\t}\n\n\n\tfor(cut_i=0;cut_i<len1;cut_i+=5){\n\t\tcut_j=0;\n\t\tstrncpy(str3,str2+cut_i,5);\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(strcmp(str3,DataBase[cut_j][2]) == 0){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(ans,DataBase[cut_j][0]);\n\t\t\t\t\tcount =strlen(ans);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstrcat(ans,DataBase[cut_j][0]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\tprintf(ans);\n\tprintf(\"\\n\");\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n#include <cstdlib>\n\nstatic std::map<char, std::string> bin_table;\n\nvoid init() {\n\tbin_table[' '] = \"101\";\n\tbin_table['\\''] = \"000000\";\n\tbin_table[','] = \"000011\";\n\tbin_table['-'] = \"10010001\";\n\tbin_table['.'] = \"010001\";\n\tbin_table['?'] = \"000001\";\n\tbin_table['A'] = \"100101\";\n\tbin_table['B'] = \"10011010\";\n\tbin_table['C'] = \"0101\";\n\tbin_table['D'] = \"0001\";\n\tbin_table['E'] = \"110\";\n\tbin_table['F'] = \"01001\";\n\tbin_table['G'] = \"10011011\";\n\tbin_table['H'] = \"010000\";\n\tbin_table['I'] = \"0111\";\n\tbin_table['J'] = \"10011000\";\n\tbin_table['K'] = \"0110\";\n\tbin_table['L'] = \"00100\";\n\tbin_table['M'] = \"10011001\";\n\tbin_table['N'] = \"10011110\";\n\tbin_table['O'] = \"00101\";\n\tbin_table['P'] = \"111\";\n\tbin_table['Q'] = \"10011111\";\n\tbin_table['R'] = \"1000\";\n\tbin_table['S'] = \"00110\";\n\tbin_table['T'] = \"00111\";\n\tbin_table['U'] = \"10011100\";\n\tbin_table['V'] = \"10011101\";\n\tbin_table['W'] = \"000010\";\n\tbin_table['X'] = \"10010010\";\n\tbin_table['Y'] = \"10010011\";\n\tbin_table['Z'] = \"10010000\";\n}\n\nstd::string to_bin_str( const std::string& gen )\n{\n\tstd::string ret;\n\n\tstd::string::const_iterator end = gen.end();\n\tfor( std::string::const_iterator it=gen.begin(); it<end; ++it )\n\t\tret += bin_table[*it];\n\n\tif ( ret.size()%5 != 0 )\n\t\tret.append( (ret.size()/5+1)*5-ret.size(), '0' );\n\n\treturn ret;\n}\n\nstd::string to_encrypted_str( const std::string& gen )\n{\n\tconst char table[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\tstd::string ret;\n\n\tstd::string::const_iterator end = gen.end();\n\tfor( std::string::const_iterator it=gen.begin(); it<end; it+=5 )\n\t\tret += table[std::strtol( std::string( it, it+5 ).c_str(), 0, 2 )];\n\n\treturn ret;\n}\n\nint main() {\n\tinit();\n\tstd::string s;\n\twhile( getline( std::cin, s ) )\n\t\tstd::cout << to_encrypted_str( to_bin_str( s ) ) << std::endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<string>\n#include<iostream>\n\nusing namespace std;\n\nstring change1(char x){\n\tif(x==' ')return \"101\";\n\t//if(x==''')return \"000000\";\n\tif(x==',')return \"000011\";\n\tif(x=='-')return \"10010001\";\n\tif(x=='.')return \"010001\";\n\tif(x=='?')return \"000001\";\n\tif(x=='A')return \"100101\";\n\tif(x=='B')return \"10011010\";\n\tif(x=='C')return \"0101\";\n\tif(x=='D')return \"0001\";\n\tif(x=='E')return \"110\";\n\tif(x=='F')return \"01001\";\n\tif(x=='G')return \"100110011\";\n\tif(x=='H')return \"010000\";\n\tif(x=='I')return \"0111\";\n\tif(x=='J')return \"10011000\";\n\tif(x=='K')return \"0110\";\n\tif(x=='L')return \"00100\";\n\tif(x=='M')return \"10011001\";\n\tif(x=='N')return \"10011110\";\n\tif(x=='O')return \"00101\";\n\tif(x=='P')return \"111\";\n\tif(x=='Q')return \"10011111\";\n\tif(x=='R')return \"1000\";\n\tif(x=='S')return \"00110\";\n\tif(x=='T')return \"00111\";\n\tif(x=='U')return \"10011100\";\n\tif(x=='V')return \"10011101\";\n\tif(x=='W')return \"000010\";\n\tif(x=='X')return \"10010010\";\n\tif(x=='Y')return \"10010011\";\n\tif(x=='Z')return \"10010000\";\n\treturn \"000000\";\n}\n\nstring change2(string x){\n\tint c=0;\n\tfor(int i=0;i<5;i++){\n\t\tc*=2;\n\t\tc+=x[i]-'0';\n\t}\n\tif(c<=25){\n\t\tstring ans;\n\t\tans+='A'+c;\n\t\treturn ans;\n\t}\n\tif(c==26)return \" \";\n\tif(c==27)return \".\";\n\tif(c==28)return \",\";\n\tif(c==29)return \"-\";\n\tif(c==30)return \"'\";\n\tif(c==31)return \"?\";\n}\n\nint main(void){\n\tstring s;\n\tgetline(cin,s);\n\tstring str;\n\tfor(int i=0;i<s.size();i++){\n\t\tstr+=change1(s[i]);\n\t}\n\tint plus=str.size()%5;\n\tif(plus>0)for(int i=0;i<5-plus;i++)str+=\"0\";\n\tstring res;\n\tfor(int i=0;i<str.size()/5;i++){\n\t\tstring ss;\n\t\tfor(int j=0;j<5;j++)ss+=str[i*5+j];\n\t\tres+=change2(ss);\n\t}\n\tcout << res << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <string>\nusing namespace std;\nstring L=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",A=\" ',-.?\"+L,C=L+\" .,-'?\";\nstring B[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\n\t\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\t\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n\t\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\nint bin2dec(string s){\n\tint x=0,i=0;\n\tfor(;i<s.size();i++)x=x*2+s[i]-'0';\n\treturn x;\n}\nint main(){\n\tstring s,s1;\n\tint i,n;\n\twhile(getline(cin,s)){\n\t\ts1=\"\";\n\t\tfor(i=0;i<s.size();i++)s1+=B[A.find(s[i])];\n\t\tn=s1.size()%5;\n\t\tif(n!=0)s1+=string(5-n,'0');\n\t\ts=\"\";\n\t\tfor(i=0;i<s1.size();i+=5)s+=C[bin2dec(s1.substr(i, 5))];\n\t\tcout<<s<< endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cmath>\n#include <algorithm>\n#include <stack>\n#include <queue>\n\nusing namespace std;\n\nusing namespace std;\n\nint main(){\n\n\tchar base[101],middle[900],result[900];\n\tint p,tmp;\n\n\twhile(fgets(base,101,stdin) != 0){\n\n\t\tp = 0;\n\t\tfor(int i = 0; base[i] != '\\0'; i++){\n\t\t\tswitch(base[i]){\n\t\t\tcase ' ':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase '\\'':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase ',':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase '_':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase '.':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase '?':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'A':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'E':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'G':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'H':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'I':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'J':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'K':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'M':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'N':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'O':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'P':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'Q':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'R':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'S':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'T':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'U':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'V':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'W':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'X':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'Y':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'Z':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(p % 5 == 1){\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t}else if(p % 5 == 2){\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t}else if(p % 5 == 3){\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t}else if(p % 5 == 4){\n\t\t\tmiddle[p++] = '0';\n\t\t}\n\n\t\tmiddle[p] = '\\0';\n\n\t\tp = 0;\n\n\t\tfor(int i = 0; middle[i] != '\\0';i += 5){\n\t\t\ttmp = 16*(middle[i] - '0')+ 8*(middle[i+1] - '0') + 4*(middle[i+2] - '0') + 2*(middle[i+3] - '0')+ (middle[i+4] - '0');\n\t\t\tif(tmp <= 25){\n\t\t\t\tresult[p++] = 'A'+tmp;\n\t\t\t}else{\n\t\t\t\tswitch(tmp){\n\t\t\t\tcase 26:\n\t\t\t\t\tresult[p++] = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 27:\n\t\t\t\t\tresult[p++] = '.';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 28:\n\t\t\t\t\tresult[p++] = ',';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 29:\n\t\t\t\t\tresult[p++] = '_';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 30:\n\t\t\t\t\tresult[p++] = '\\'';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 31:\n\t\t\t\t\tresult[p++] = '?';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif(middle[i+6] == '\\0'){\n\t\t\t\tresult[p] = '\\0';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%s\\n\",result);\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <map>\n\nusing namespace std;\n\nint main(){\n\n\tmap<char,string> table;\n\ttable[' ']=\"101\";\n\ttable[(char)39]=\"000000\";\n\ttable[',']=\"000011\";\n\ttable['-']=\"10010001\";\n\ttable['.']=\"010001\";\n\ttable['?']=\"000001\";\n\ttable['A']=\"100101\";\n\ttable['B']=\"10011010\";\n\ttable['C']=\"0101\";\n\ttable['D']=\"0001\";\n\ttable['E']=\"110\";\n\ttable['F']=\"01001\";\n\ttable['G']=\"10011011\";\n\ttable['H']=\"010000\";\n\ttable['I']=\"0111\";\n\ttable['J']=\"10011000\";\n\ttable['K']=\"0110\";\n\ttable['L']=\"00100\";\n\ttable['M']=\"10011001\";\n\ttable['N']=\"10011110\";\n\ttable['O']=\"00101\";\n\ttable['P']=\"111\";\n\ttable['Q']=\"10011111\";\n\ttable['R']=\"1000\";\n\ttable['S']=\"00110\";\n\ttable['T']=\"00111\";\n\ttable['U']=\"10011100\";\n\ttable['V']=\"10011101\";\n\ttable['W']=\"000010\";\n\ttable['X']=\"10010010\";\n\ttable['Y']=\"10010011\";\n\ttable['Z']=\"10010000\";\n\n\n\tmap<string,char> table2;\n\tfor(int i = 0; i < 26; i++){\n\t\tstring ms;\n\t\tfor(int j = 0; j < 5; j++){\n\t\t\tif((i>>j)&1){\n\t\t\t\tms+='1';\n\t\t\t}\n\t\t\telse\n\t\t\t\tms+='0';\n\t\t}\n\t\treverse(ms.begin(),ms.end());\n\t\ttable2[ms]='A'+i;\n\t}\n\ttable2[\"11010\"]=' ';\n\ttable2[\"11011\"]='.';\n\ttable2[\"11100\"]=',';\n\ttable2[\"11101\"]='-';\n\ttable2[\"11110\"]=(char)39;\n\ttable2[\"11111\"]='?';\n\n\tstring str;\n\twhile(getline(cin,str)){\n\t\tstring nstr=\"\";\n\t\tfor(int i = 0; i < str.size(); i++){\n\t\t\tnstr+=table[str[i]];\n\t\t}\n\t\tint t=nstr.size();\n\t\tif(nstr.size()%5!=0){\n\t\t\tint add=(((nstr.size()/5)+1)*5)-nstr.size();\n\t\t\tfor(int i = 0; i < add; i++){\n\t\t\t\tnstr+='0';\n\t\t\t}\n\t\t}\n\t\tstring fstr=\"\";\n\t\tfor(int i = 0; i < nstr.size()/5; i++){\n\t\t\tstring s=nstr.substr(5*(i),5);\n\t\t\tfstr+=table2[s];\n\t\t}\n\t\tcout<<fstr<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <string>\n#include <cmath>\n#include <stack>\n#include <vector>\n#include <map>\n#include <set>\n#include <queue>\n#include <list>\n#include <iostream>\n#include <climits>\n#include <cfloat>\n\nusing namespace std;\n\nint to_int(char* numStr, int digits)\n{\n\tconst char* n = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n\tint res = 0;\n\tfor (int i = 0; numStr[i] != '\\0'; ++i)\n\t{\n\t\tint j;\n\t\tfor (j = 0; numStr[i] != n[j]; ++j)\n\t\t\t;\n\t\tres = res*digits + j;\n\t}\n\treturn res;\n}\n\nint main()\n{\n\tchar* ori = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tchar* code[] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\"\n\t\t, \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\"\n\t\t, \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\"\n\t\t, \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\"\n\t\t, \"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tchar* reEnc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n\twhile (!cin.eof())\n\t{\n\t\tchar buf[512];\n\t\tchar codeBuf[2048];\n\t\tcin.getline(buf, sizeof(buf));\n\t\tif (strlen(buf) == 0)\n\t\t\tbreak;\n\n\t\tcodeBuf[0] = '\\0';\n\t\tfor (int i = 0; buf[i] != '\\0'; ++i)\n\t\t{\n\t\t\tint p;\n\t\t\tfor (p = 0; buf[i] != ori[p]; ++p)\n\t\t\t\t;\n\t\t\tstrcat(codeBuf, code[p]);\n\t\t}\n\t\twhile (strlen(codeBuf) % 5 != 0)\n\t\t\tstrcat(codeBuf, \"0\");\n\n\t\tchar enc[512];\n\t\tint k = 0;\n\t\tfor (int i = 0; i < strlen(codeBuf); i += 5)\n\t\t{\n\t\t\tchar w[6];\n\t\t\tfor (int j = 0; j < 5; ++j)\n\t\t\t\tw[j] = codeBuf[i+j];\n\t\t\tw[5] = '\\0';\n\t\t\tenc[k++] = reEnc[to_int(w, 2)];\n\t\t}\n\t\tenc[k] = '\\0';\n\n\t\tprintf(\"%s\\n\", enc);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint main(){\n\tchar chs[]=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tstring codes[32]={\n\t\t\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n\t\t,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n\t\t,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n\t\t,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\n\tstring s;\n\twhile(getline(cin,s)){\n\t\tstring t;\n\t\tfor(int i=0;i<s.size();i++){\n\t\t\tt += codes[find(chs,chs+32,s[i])-chs];\n\t\t}\n\t\tif(t.size()%5)t.append(5-t.size()%5,'0');\n\t\tfor(int i=0;i<t.size();i+=5){\n\t\t\tint n=0;\n\t\t\tfor(int j=0;j<5;j++)n = n<<1|t[i+j]-'0';\n\t\t\tif(n<26)cout<<(char)('A'+n);\n\t\t\telse cout<<\" .,-'?\"[n-26];\n\t\t}\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<string>\n#include<vector>\n\nusing namespace std;\n\nint main(void)\n{\n\tmap<char,string> mapA;\n\tmap<string,char> mapB;\n\tstring s1=\" \\',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tstring s2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\tstring s3[32]={\n\t\t\"101\",\n\t\t\"000000\",\n\t\t\"000011\",\n\t\t\"10010001\",\n\t\t\"010001\",\n\t\t\"000001\",\n\t\t\"100101\",\n\t\t\"10011010\",\n\t\t\"0101\",\n\t\t\"0001\",\n\t\t\"110\",\n\t\t\"01001\",\n\t\t\"100110110\",\n\t\t\"010000\",\n\t\t\"0111\",\n\t\t\"10011000\",\n\t\t\"0110\",\n\t\t\"00100\",\n\t\t\"10011001\",\n\t\t\"10011110\",\n\t\t\"00101\",\n\t\t\"111\",\n\t\t\"10011111\",\n\t\t\"1000\",\n\t\t\"00110\",\n\t\t\"00111\",\n\t\t\"10011100\",\n\t\t\"10011101\",\n\t\t\"000010\",\n\t\t\"10010010\",\n\t\t\"10010011\",\n\t\t\"10010000\"\n\t};\n\tstring s4[32];\n\tfor(int i=0;i<32;i++){\n\t\tint p=i;\n\t\tchar tmp[6];\n\t\tfor(int j=0;j<5;j++){\n\t\t\ttmp[4-j]='0'+p%2;\n\t\t\tp/=2;\n\t\t}\n\t\ttmp[5]='\\0';\n\t\ts4[i]=tmp;\n\t}\n\tfor(int i=0;i<32;i++){\n\t\tmapA[s1[i]]=s3[i];\n\t\tmapB[s4[i]]=s2[i];\n\t}\n\n\tstring str;\n\twhile(getline(cin,str)){\n\t\tstring tmp;\n\t\tfor(int i=0;i<(int)str.size();i++){\n\t\t\ttmp+=mapA[str[i]];\n\t\t}\n\t\tfor(int i=0;i<(int)tmp.size()%5;i++){\n\t\t\ttmp+=\"0\";\n\t\t}\n\t\tstring ans;\n\t\tfor(int i=0;i<(int)tmp.size()/5;i++){\n\t\t\tstring tok;\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\ttok+=tmp[i*5+j];\n\t\t\t}\n\t\t\tans+=mapB[tok];\n\t\t}\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n\n  char in;\n  string wd = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string bd[32] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\" };\n  string od = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n  string k = \"\";\n\n  string input;\n\n  while( true ) {\n    if ( cin.eof() ) break;\n  getline( cin, input );\n\n  for( int l = 0; l < input.size(); l++ ) {\n    in = input[l];\n    for ( int i = 0; i < 32; i++ ) {\n      if ( in == wd[i] ) {\n\tk += bd[i];\n\t//\tcout << bd[i];\n\tif ( k.size() >= 5 ) {\n\t  int x = 0;\n\t  for ( int j = 0; j < 5; j++ ) {\n\t    x = x * 2 + k[j] - '0';\n\t  }\n\t  cout << od[x];\n\t  string n = \"\";\n\t  for ( int j = 5; j < k.size(); j++ ) {\n\t    n += k[j];\n\t  }\n\t  k = n;\n\t}\n      }\n    }\n\n  }\n  if ( k.size() > 0 ) {\n    k += \"00000\";\n    int x = 0;\n    for ( int j = 0; j < 5; j++ ) {\n      x = x * 2 + k[j] - '0';\n    }\n    cout << od[x];\n  }\n  cout << endl;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\ntypedef long long ll;\n\n#define dump(x)  cerr << #x << \" = \" << (x) << endl\n#define rep(i,n) for(ll i=0;i<(ll)(n);i++)\n#define all(a)  (a).begin(),(a).end()\n#define pb push_back\n#define INF 999999999\n\nint main(){\n    string s,x;\n    while(getline(cin,x)){\n        s+=x;s+=\" \";\n    }\n    s=s.substr(0,s.size()-1);\n    string a=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n    string b[]={\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"};\n    string c=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string d[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n    map<string,char> mpb;\n    map<char,string> mpa;\n    rep(i,a.size()){\n        mpb[b[i]]=a[i];\n    }\n    rep(i,c.size()){\n        mpa[c[i]]=d[i];\n    }\n    \n    string str=\"\";\n    rep(i,s.size()){\n        str+=mpa[s[i]];\n    }\n    int len=str.size();\n    rep(i,5-(len%5))str+=\"0\";\n    \n    string sx=\"\";\n    len=str.size();\n    rep(i,len/5+1){\n        sx+=mpb[str.substr(5*i,5)];\n    }\n    cout<<sx<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\nusing namespace std;\n \nmap <char,string> t;\nvoid make_table(){\n  t[' '] =\"101\";\n  t['\\'']=\"000000\";\n  t[','] =\"000011\";\n  t['-'] =\"10010001\";\n  t['.'] =\"010001\";\n  t['?'] =\"000001\";\n  t['A'] =\"100101\";\n  t['B'] =\"10011010\";\n   \n  t['C'] =\"0101\";\n  t['D'] =\"0001\";\n  t['E'] =\"110\";\n  t['F'] =\"01001\";\n  t['G'] =\"10011011\";\n  t['H'] =\"010000\";\n  t['I'] =\"0111\";\n  t['J'] =\"10011000\";\n \n  t['K'] =\"0110\";\n  t['L'] =\"00100\";\n  t['M'] =\"10011001\";\n  t['N'] =\"10011110\";\n  t['O'] =\"00101\";\n  t['P'] =\"111\";\n  t['Q'] =\"10011111\";\n  t['R'] =\"1000\";\n \n  t['S'] =\"00110\";\n  t['T'] =\"00111\";\n  t['U'] =\"10011100\";\n  t['V'] =\"10011101\";\n  t['W'] =\"000010\";\n  t['X'] =\"10010010\";\n  t['Y'] =\"10010011\";\n  t['Z'] =\"10010000\";\n}\nchar ch_table[]={' ','.',',','-','\\'','?'};\n \nchar s2ch(string str){\n  int num=0;\n  for(int i=0;i<5;i++){\n    num*=2;\n    num+=str[i]-'0';\n  }\n  if(num<=25)return 'A'+num;\n  return ch_table[num-26];\n}\n \nint main(){\n  string str,A;\n  make_table();\n  while(getline(cin,str)){\n    A=\"\";\n    for(int i=0;i<(int)str.size();i++){\n      A+=t[str[i]];\n    }\n     \n    while(A.size()%5!=0)A+=\"0\";\n     \n    for(int i=0;i<(int)A.size();i+=5){\n      //cout<<A.substr(i,5)<<\" \";\n      cout<<s2ch(A.substr(i,5));\n    }\n    cout<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\n\nstd::string encode(char c){\n    if(c == ' ') return \"101\";\n    if(c == '\\'') return \"000000\";\n    if(c == ',') return \"000011\";\n    if(c == '-') return \"10010001\";\n    if(c == '.') return \"010001\";\n    if(c == '?') return \"000001\";\n    if(c == 'A') return \"100101\";\n    if(c == 'B') return \"10011010\";\n    if(c == 'C') return \"0101\";\n    if(c == 'D') return \"0001\";\n    if(c == 'E') return \"110\";\n    if(c == 'F') return \"01001\";\n    if(c == 'G') return \"10011011\";\n    if(c == 'H') return \"010000\";\n    if(c == 'I') return \"0111\";\n    if(c == 'J') return \"10011000\";\n    if(c == 'K') return \"0110\";\n    if(c == 'L') return \"00100\";\n    if(c == 'M') return \"10011001\";\n    if(c == 'N') return \"10011110\";\n    if(c == 'O') return \"00101\";\n    if(c == 'P') return \"111\";\n    if(c == 'Q') return \"10011111\";\n    if(c == 'R') return \"1000\";\n    if(c == 'S') return \"00110\";\n    if(c == 'T') return \"00111\";\n    if(c == 'U') return \"10011100\";\n    if(c == 'V') return \"10011101\";\n    if(c == 'W') return \"000010\";\n    if(c == 'X') return \"10010010\";\n    if(c == 'Y') return \"10010011\";\n    if(c == 'Z') return \"10010000\";\n    return \"\";\n}\n\nstd::string encode2(std::string s){\n    if(s == \"00000\") return \"A\";\n    if(s == \"00001\") return \"B\";\n    if(s == \"00010\") return \"C\";\n    if(s == \"00011\") return \"D\";\n    if(s == \"00100\") return \"E\";\n    if(s == \"00101\") return \"F\";\n    if(s == \"00110\") return \"G\";\n    if(s == \"00111\") return \"H\";\n    if(s == \"01000\") return \"I\";\n    if(s == \"01001\") return \"J\";\n    if(s == \"01010\") return \"K\";\n    if(s == \"01011\") return \"L\";\n    if(s == \"01100\") return \"M\";\n    if(s == \"01101\") return \"N\";\n    if(s == \"01110\") return \"O\";\n    if(s == \"01111\") return \"P\";\n    if(s == \"10000\") return \"Q\";\n    if(s == \"10001\") return \"R\";\n    if(s == \"10010\") return \"S\";\n    if(s == \"10011\") return \"T\";\n    if(s == \"10100\") return \"U\";\n    if(s == \"10101\") return \"V\";\n    if(s == \"10110\") return \"W\";\n    if(s == \"10111\") return \"X\";\n    if(s == \"11000\") return \"Y\";\n    if(s == \"11001\") return \"Z\";\n    if(s == \"11010\") return \" \";\n    if(s == \"11011\") return \".\";\n    if(s == \"11100\") return \",\";\n    if(s == \"11101\") return \"-\";\n    if(s == \"11110\") return \"'\";\n    if(s == \"11111\") return \"?\";\n    return \"\";\n}\n\nint main(){\n    std::string str, tmp, ans;\n    while(getline(std::cin, str)){\n        tmp = \"\", ans = \"\";\n        for(int i = 0; i < str.size(); i++){\n            tmp += encode(str[i]);\n        }\n\n        if(tmp.size() % 5 != 0){\n            int n = 5 - (tmp.size() % 5);\n            for(int i = 0; i < n; i++) tmp += \"0\";\n        }\n\n        for(int i = 0; i < tmp.size(); i += 5){\n            ans += encode2(tmp.substr(i, 5));\n        }\n\n        std::cout << ans << std::endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <map>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\nstring itob(int a) {\n  string ret;\n  for(int i=16; i>0; i/=2) {\n    if (a>=i) {\n      ret+='1';\n      a-=i;\n    } else\n      ret+='0';\n  }\n  return ret;\n}\n\nint main() {\n  string hoge = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  map<string, string> m;\n  REP(i,hoge.length()) {\n    string hage;\n    hage = hoge[i];\n    m.insert(make_pair(itob(i),hage));\n  }\n  hoge = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string hoge2[] = {\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n                 ,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n                 ,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n                 ,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n  map<char,string> m2;\n  REP(i,hoge.length())\n    m2.insert(make_pair(hoge[i],hoge2[i]));\n  string line;\n  while(true) {\n    getline(cin,line);\n    if (line.length()==0) break;\n    string a;\n    REP(i,line.length()) {\n      a += m2[line[i]];\n    }\n    int aa = a.length()%5;\n    \n    if(aa)\n      REP(i,5-aa)\n        a+=\"0\";\n    string ans;\n    REP(i,a.length()) {\n      for (int j=1; i+j<=a.length(); j++) {\n        if (m.count(a.substr(i,j))) {\n          ans += m[a.substr(i,j)];\n          i+=j-1;\n          break;\n        }\n      }\n    }\n//    cout << a << endl;\n    cout << ans << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<iostream>\n#include<string>\n#include<map>\nusing namespace std;\n\nmap<string, string> wtoi;\nmap<string, string> itow;\n\nvoid make_dictonary1() {\n\twtoi[\" \"] = \"101\"; wtoi[\"'\"] = \"000000\"; wtoi[\",\"] = \"000011\"; wtoi[\"-\"] = \"10010001\"; wtoi[\".\"] = \"010001\";\n\twtoi[\"?\"] = \"000001\"; wtoi[\"A\"] = \"100101\"; wtoi[\"B\"] = \"10011010\"; wtoi[\"C\"] = \"0101\"; wtoi[\"D\"] = \"0001\";\n\twtoi[\"E\"] = \"110\"; wtoi[\"F\"] = \"01001\"; wtoi[\"G\"] = \"10011011\"; wtoi[\"H\"] = \"010000\"; wtoi[\"I\"] = \"0111\";\n\twtoi[\"J\"] = \"10011000 \"; wtoi[\"K\"] = \"0110\"; wtoi[\"L\"] = \"00100\"; wtoi[\"M\"] = \"10011001\"; wtoi[\"N\"] = \"00101\";\n\twtoi[\"O\"] = \"00101\"; wtoi[\"P\"] = \"111\"; wtoi[\"Q\"] = \"10011111\"; wtoi[\"R\"] = \"1000\"; wtoi[\"S\"] = \"00110\";\n\twtoi[\"T\"] = \"00111\"; wtoi[\"U\"] = \"10011100\"; wtoi[\"V\"] = \"10011101\"; wtoi[\"W\"] = \"000010\"; wtoi[\"X\"] = \"10010010\"; \n\twtoi[\"Y\"] = \"10010011\"; wtoi[\"Z\"] = \"10010000\";\n}\nvoid make_dictonary2() {\n\tint i, j;\n\tfor( i = 0; i < 26; i++ ) {\n\t\tchar c = 'A' + i;\n\t\tstring str;\n\t\tstr += c;\n\t\tstring in;\n\t\tfor( j = 4; j >= 0; j-- ) {\n\t\t\tif ( (i>>(j))%2 )\n\t\t\t\tin += '1';\n\t\t\telse\n\t\t\t\tin += '0';\n\t\t}\n\t\titow[in] = str;\n\t}\n\titow[\"11011\"] = \".\"; itow[\"11100\"] = \",\"; itow[\"11101\"] = \"-\"; itow[\"11110\"] = \"'\"; itow[\"11111\"] = \"?\";\n}\n\nchar buf[512];\nint buflen;\n\nint main() {\n\tmake_dictonary1();\n\tmake_dictonary2();\n\tint i, j;\n\tgets(buf);\n\tbuflen = strlen(buf);\n\t\n\tstring intejor;\n\t\n\tfor( i = 0; i < buflen; i++ ) {\n\t\tstring in;\n\t\tin += buf[i];\n\t\tintejor += wtoi[in];\n\t}\n\t\n\tstring str[514];\n\tfor( i = 0; i < intejor.length(); i+=5 ) {\n\t\tfor( int j = i; j < i + 5; j++ ) {\n\t\t\tif ( j >= intejor.length() )\n\t\t\t\tstr[i] += '0';\n\t\t\telse\n\t\t\t\tstr[i] += intejor[j];\n\t\t}\n\t\t//cout << str[i] << endl;\n\t}\n\t\n\tfor( j = 0; j < i; j++ ) {\n\t\tcout << itow[str[j]];\n\t}\n\tcout << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main ()\n{\n\tstring input , start , output , ans;\n\tmap<char , string>code;\n\tcode[' '] = \"101\" ,\n\tcode['\\''] = \"000000\" ,\n\tcode[','] = \"000011\" ,\n\tcode['-'] = \"10010001\" ,\n\tcode['.'] = \"010001\" ,\n\tcode['?'] = \"000001\" ,\n\tcode['A'] = \"100101\" ,\n\tcode['B'] = \"10011010\" ,\n\tcode['C'] = \"0101\" ,\n\tcode['D'] = \"0001\" ,\n\tcode['E'] = \"110\" ,\n\tcode['F'] = \"01001\" ,\n\tcode['G'] = \"10011011\" ,\n\tcode['H'] = \"010000\" ,\n\tcode['I'] = \"0111\" ,\n\tcode['J'] = \"10011000\" ,\n\tcode['K'] = \"0110\" ,\n\tcode['L'] = \"00100\" ,\n\tcode['M'] = \"10011001\" ,\n\tcode['N'] = \"10011110\" ,\n\tcode['O'] = \"00101\" ,\n\tcode['P'] = \"111\" ,\n\tcode['Q'] = \"10011111\" ,\n\tcode['R'] = \"1000\" ,\n\tcode['S'] = \"00110\" ,\n\tcode['T'] = \"00111\" ,\n\tcode['U'] = \"10011100\" ,\n\tcode['V'] = \"10011101\" ,\n\tcode['W'] = \"000010\" ,\n\tcode['X'] = \"10010010\" ,\n\tcode['Y'] = \"10010011\" ,\n\tcode['Z'] = \"10010000\";\n\n\n\tmap<string , char>code2;\n\tcode2[\"00000\"] = 'A' ,\n\tcode2[\"00001\"] = 'B' ,\n\tcode2[\"00010\"] = 'C' ,\n\tcode2[\"00011\"] = 'D' ,\n\tcode2[\"00100\"] = 'E' ,\n\tcode2[\"00101\"] = 'F' ,\n\tcode2[\"00110\"] = 'G' ,\n\tcode2[\"00111\"] = 'H' ,\n\tcode2[\"01000\"] = 'I' ,\n\tcode2[\"01001\"] = 'J' ,\n\tcode2[\"01010\"] = 'K' ,\n\tcode2[\"01011\"] = 'L' ,\n\tcode2[\"01100\"] = 'M' ,\n\tcode2[\"01101\"] = 'N' ,\n\tcode2[\"01110\"] = 'O' ,\n\tcode2[\"01111\"] = 'P' ,\n\tcode2[\"10000\"] = 'Q' ,\n\tcode2[\"10001\"] = 'R' ,\n\tcode2[\"10010\"] = 'S' ,\n\tcode2[\"10011\"] = 'T' ,\n\tcode2[\"10100\"] = 'U' ,\n\tcode2[\"10101\"] = 'V' ,\n\tcode2[\"10110\"] = 'W' ,\n\tcode2[\"10111\"] = 'X' ,\n\tcode2[\"11000\"] = 'Y' ,\n\tcode2[\"11001\"] = 'Z' ,\n\tcode2[\"11010\"] = ' ' ,\n\tcode2[\"11011\"] = '.' ,\n\tcode2[\"11100\"] = ',' ,\n\tcode2[\"11101\"] = '-' ,\n\tcode2[\"11110\"] = '\\'' ,\n\tcode2[\"11111\"] = '?';\n\n\n\twhile( getline ( cin , input ) )\n\t{\n\t\toutput = \"\";\n\t\tans = \"\";\n\t\tfor( auto x : input )\n\t\t{\n\t\t\toutput += code[x];\n\t\t}\n\t\twhile( output.size () % 5 )output += \"0\";\n\t\tfor( size_t i = 0; i < output.size (); i += 5 )\n\t\t{\n\t\t\tans += code2[output.substr ( i , 5 )];\n\t\t}\n\t\tcout << ans << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef _GLIBCXX_NO_ASSERT\n#include <cassert>\n#endif\n#include <cctype>\n#include <cerrno>\n#include <cfloat>\n#include <ciso646>\n#include <climits>\n#include <clocale>\n#include <cmath>\n#include <csetjmp>\n#include <csignal>\n#include <cstdarg>\n#include <cstddef>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n\n#ifdef __GXX_EXPERIMENTAL_CXX0X__\n#include <ccomplex>\n#include <cfenv>\n#include <cinttypes>\n#include <cstdbool>\n#include <cstdint>\n#include <ctgmath>\n#include <cwchar>\n#include <cwctype>\n#endif\n\n#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <deque>\n#include <exception>\n#include <fstream>\n#include <functional>\n#include <iomanip>\n#include <ios>\n#include <iosfwd>\n#include <iostream>\n#include <istream>\n#include <iterator>\n#include <limits>\n#include <list>\n#include <locale>\n#include <map>\n#include <memory>\n#include <new>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <stdexcept>\n#include <streambuf>\n#include <string>\n#include <typeinfo>\n#include <utility>\n#include <valarray>\n#include <vector>\n\n#ifdef __GXX_EXPERIMENTAL_CXX0X__\n#include <array>\n#include <atomic>\n#include <chrono>\n#include <condition_variable>\n#include <forward_list>\n#include <future>\n#include <initializer_list>\n#include <mutex>\n#include <random>\n#include <ratio>\n#include <regex>\n#include <system_error>\n#include <thread>\n#include <tuple>\n#include <typeindex>\n#include <type_traits>\n#include <unordered_map>\n#include <unordered_set>\n#endif\n\n\nusing namespace std;\n\nint main ()\n{\n\tmap<char , string>data;\n\tdata[' '] = \"101\";\n\tdata['\\''] = \"000000\";\n\tdata[','] = \"000011\";\n\tdata['-'] = \"10010001\";\n\tdata['.'] = \"010001\";\n\tdata['?'] = \"000001\";\n\tdata['A'] = \"100101\";\n\tdata['B'] = \"10011010\";\n\tdata['C'] = \"0101\";\n\tdata['D'] = \"0001\";\n\tdata['E'] = \"110\";\n\tdata['F'] = \"01001\";\n\tdata['G'] = \"10011011\";\n\tdata['H'] = \"010000\";\n\tdata['I'] = \"0111\";\n\tdata['J'] = \"10011000\";\n\tdata['K'] = \"0110\";\n\tdata['L'] = \"00100\";\n\tdata['M'] = \"10011001\";\n\tdata['N'] = \"10011110\";\n\tdata['O'] = \"00101\";\n\tdata['P'] = \"111\";\n\tdata['Q'] = \"10011111\";\n\tdata['R'] = \"1000\";\n\tdata['S'] = \"00110\";\n\tdata['T'] = \"00111\";\n\tdata['U'] = \"10011100\";\n\tdata['V'] = \"10011101\";\n\tdata['W'] = \"000010\";\n\tdata['X'] = \"10010010\";\n\tdata['Y'] = \"10010011\";\n\tdata['Z'] = \"10010000\";\n\tstring test , in;\n\tstring match;\n\tstring ans;\n\twhile( cin >> in )\n\t{\n\t\ttest += in + \" \";\n\t}\n\ttest.erase ( test.end ()-1 );\n\tfor( auto x : test )\n\t{\n\t\tmatch += data[x];\n\t}\n\t//cout << match.length () << endl;\n\tint p;\n\tfor( size_t i = 0 , p = match.length (); i < 4 - ( ( p - 1 ) % 5 ); i++ )\n\t{\n\t\tmatch += \"0\";\n\t}\n\t//cout << match << endl;\n\tfor( size_t i = 0; i < match.length()/5; i++ )\n\t{\n\t\tint num = 0;\n\t\tfor( size_t j = 0; j < 5; j++ )\n\t\t{\n\t\t\tnum *= 2;\n\t\t\tif( match[i * 5 + j]=='1' )\n\t\t\t{\n\t\t\t\tnum += 1;\n\t\t\t}\n\t\t}\n\t\t//cout << num<<endl;\n\t\tif( num + 'A' <= 'Z' )\n\t\t{\n\t\t\tans += (num + 'A');\n\t\t} else\n\t\t{\n\t\t\tnum -= 25;\n\t\t\tswitch( num )\n\t\t\t{\n\t\t\t\tcase 0:ans += ' '; break;\n\t\t\t\tcase 1:ans += '.'; break;\n\t\t\t\tcase 3:ans += ','; break;\n\t\t\t\tcase 4:ans += '-'; break;\n\t\t\t\tcase 5:ans += '\\''; break;\n\t\t\t\tcase 6:ans += '?'; break;\n\t\t\t}\n\t\t}\n\t}\n\tcout << ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid hantei(char *str);\n\nchar DataBase[][3][80] =\n\t{\n\t/* [文字] ,[符号＿変換前] ,[符号＿変換後] */\n\t{ \" \", \"101\", \"11010\" },{ \"\\'\", \"000000\", \"11110\" },{ \",\", \"000011\", \"11100\" },{ \"-\", \"10010001\", \"11101\" },\n\t{ \".\", \"010001\", \"11011\" },{ \"?\", \"000001\", \"11111\" },{ \"A\", \"100101\", \"00000\" },{ \"B\", \"10011010\", \"00001\" },\n    { \"C\", \"0101\", \"00010\" },{ \"D\", \"0001\", \"00011\" },{ \"E\", \"110\", \"00100\" },{ \"F\", \"01001\", \"00101\" },\n\t{ \"G\", \"10011011\", \"00110\" },{ \"H\", \"010000\", \"00111\" },{ \"I\", \"0111\", \"01000\" },{ \"J\", \"10011000\", \"01001\" },\n\t{ \"K\", \"0110\", \"01010\" },{ \"L\", \"00100\", \"01011\" },{ \"M\", \"10011001\", \"01100\" },{ \"N\", \"10011110\", \"01101\" },\n\t{ \"O\", \"00101\", \"01110\" },{ \"P\", \"111\", \"01111\" },{ \"Q\", \"10011111\", \"10000\" },{ \"R\", \"1000\", \"10001\" },\n\t{ \"S\", \"00110\", \"10010\" },{ \"T\", \"00111\", \"10011\" },{ \"U\", \"10011100\", \"10100\" },{ \"V\", \"10011101\", \"10101\" },\n\t{ \"W\", \"000010\", \"10110\" },{ \"X\", \"10010010\", \"10111\" },{ \"Y\", \"10010011\", \"11000\" },{ \"Z\", \"100100000\", \"11001\" },\n    {\"\", \"\", \"\" }\n};\n\n\nint main(void)\n{\n\tchar str1[1000],str2[1000],ch;\n\tint cut_i;\n\t\n\t/*scanf(\"%[A-Z \\'.?,-]\",str);\n\t\thantei(str1);*/\n\tcut_i=0;\n\twhile((ch = getchar())!=EOF){\n\t\tif(ch !='\\n'){\n\t\t\tstr2[cut_i] = ch;\n\t\t\tcut_i++;\n\t\t}\n\t\telse {\n\t\t\tif(cut_i==0){\n\t\t\t\tprintf(\" \\n\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrncpy(str1,str2,cut_i);\n\t\t\t\tstr1[cut_i]='\\0';\n\t\t\t\thantei(str1);\n\t\t\t\tprintf(\" \\n\");\n\t\t\t\tcut_i=0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\nvoid hantei(char *str)\n{\n\tint len1,cut_i,cut_j,count;\n\tchar ans[1000]={\"\"},str2[1000]={\"\"},str3[1000]={\"\"};\n\tchar zero[]={\"0000\"};\n\n\tlen1 = strlen(str);\n\tcount = 0;\n\n\tfor(cut_i=0;cut_i<len1;cut_i++){\n\t\tcut_j=0;\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(!strncmp((str+cut_i),DataBase[cut_j][0],1)){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(str2,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\telse if(count !=0){\n\t\t\t\t\tstrcpy(str2+count,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\t\n\tlen1 = strlen(str2);\n\tcount = 0;\n\n\tif( len1 % 5 != 0){\n\t\tcut_i = 5 - len1 % 5;\n\t\tstrncat(str2,zero,cut_i);\n\t\tlen1 = strlen(str2);\n\t}\n\n\n\tfor(cut_i=0;cut_i<len1;cut_i+=5){\n\t\tcut_j=0;\n\t\tstrncpy(str3,str2+cut_i,5);\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(strcmp(str3,DataBase[cut_j][2]) == 0){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(ans,DataBase[cut_j][0]);\n\t\t\t\t\tcount =strlen(ans);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstrcat(ans,DataBase[cut_j][0]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\tprintf(ans);\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint main(void){\n\n\tchar tmp;\n\tint sum;\n\tstring inp;\n\tstring before(\"\"),num(\"\"),after(\"\");\n\t\n\twhile(scanf(\"%c\",&tmp)!=EOF){\n\t\tif(tmp=='\\n'){\n\t\t\tbefore+=inp;\n\t\t\tafter=(\"\");\n\t\t\tnum=(\"\");\n\t\t\tfor(int i=0;i<before.length();i++){\n\t\t\t\tswitch(before[i]){\n\t\t\t\t\tcase' ':\n\t\t\t\t\t\tnum+=\"101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'\\'':\n\t\t\t\t\t\tnum+=\"000000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase',':\n\t\t\t\t\t\tnum+=\"000011\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'-':\n\t\t\t\t\t\tnum+=\"10010001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'.':\n\t\t\t\t\t\tnum+=\"010001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'?':\n\t\t\t\t\t\tnum+=\"000001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'A':\n\t\t\t\t\t\tnum+=\"100101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'B':\n\t\t\t\t\t\tnum+=\"10011010\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'C':\n\t\t\t\t\t\tnum+=\"0101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'D':\n\t\t\t\t\t\tnum+=\"0001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'E':\n\t\t\t\t\t\tnum+=\"110\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'F':\n\t\t\t\t\t\tnum+=\"01001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'G':\n\t\t\t\t\t\tnum+=\"10011011\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'H':\n\t\t\t\t\t\tnum+=\"010000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'I':\n\t\t\t\t\t\tnum+=\"0111\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'J':\n\t\t\t\t\t\tnum+=\"10011000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'K':\n\t\t\t\t\t\tnum+=\"0110\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'L':\n\t\t\t\t\t\tnum+=\"00100\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'M':\n\t\t\t\t\t\tnum+=\"10011001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'N':\n\t\t\t\t\t\tnum+=\"10011110\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'O':\n\t\t\t\t\t\tnum+=\"00101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'P':\n\t\t\t\t\t\tnum+=\"111\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'Q':\n\t\t\t\t\t\tnum+=\"10011111\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'R':\n\t\t\t\t\t\tnum+=\"1000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'S':\n\t\t\t\t\t\tnum+=\"00110\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'T':\n\t\t\t\t\t\tnum+=\"00111\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'U':\n\t\t\t\t\t\tnum+=\"10011100\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'V':\n\t\t\t\t\t\tnum+=\"10011101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'W':\n\t\t\t\t\t\tnum+=\"000010\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'X':\n\t\t\t\t\t\tnum+=\"10010010\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'Y':\n\t\t\t\t\t\tnum+=\"10010011\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'Z':\n\t\t\t\t\t\tnum+=\"10010000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile(num.length()%5!=0){\n\t\t\t\tnum+='0';\n\t\t\t}\n\t\t\tfor(int i=0;i<num.length();i+=5){\n\t\t\t\tsum=(num[i]-'0')*16+(num[i+1]-'0')*8+(num[i+2]-'0')*4+(num[i+3]-'0')*2+(num[i+4]-'0')*1;\n\t\t\t\tswitch(sum){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tafter+='A';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tafter+='B';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tafter+='C';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tafter+='D';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tafter+='E';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tafter+='F';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tafter+='G';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tafter+='H';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\tafter+='I';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\tafter+='J';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 10:\n\t\t\t\t\t\tafter+='K';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 11:\n\t\t\t\t\t\tafter+='L';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 12:\n\t\t\t\t\t\tafter+='M';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 13:\n\t\t\t\t\t\tafter+='N';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 14:\n\t\t\t\t\t\tafter+='O';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 15:\n\t\t\t\t\t\tafter+='P';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 16:\n\t\t\t\t\t\tafter+='Q';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 17:\n\t\t\t\t\t\tafter+='R';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 18:\n\t\t\t\t\t\tafter+='S';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 19:\n\t\t\t\t\t\tafter+='T';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 20:\n\t\t\t\t\t\tafter+='U';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 21:\n\t\t\t\t\t\tafter+='V';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 22:\n\t\t\t\t\t\tafter+='W';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 23:\n\t\t\t\t\t\tafter+='X';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 24:\n\t\t\t\t\t\tafter+='Y';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 25:\n\t\t\t\t\t\tafter+='Z';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 26:\n\t\t\t\t\t\tafter+=' ';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\tafter+='.';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 28:\n\t\t\t\t\t\tafter+=',';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 29:\n\t\t\t\t\t\tafter+='-';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 30:\n\t\t\t\t\t\tafter+='\\'';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 31:\n\t\t\t\t\t\tafter+='?';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout<<after<<endl;\n\t\t\tbefore=(\"\");\n\t\t}\n\t\telse before+=tmp;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\nint main() {\n\tchar code[32][15] = {\n\t\t\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\n\t\t\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\t\t\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n\t\t\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"\n\t};\n\tint coden[255];\n\tchar tmp[33] = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tfor (int i = 0; i < 32; i++) {\n\t\tcoden[tmp[i]] = i;\n\t}\n\tchar str[100];\n\tint makedcode[1500];\n\tint count;\n\n\twhile (gets(str) != NULL) {\n\t\tcount = 0;\n\t\tfor (int i = 0, slen = strlen(str); i < slen; i++) {\n\t\t\tfor (int j = 0, clen = strlen(code[coden[str[i]]]); j < clen; j++) {\n\t\t\t\tmakedcode[count++] = code[coden[str[i]]][j] - '0';\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0, j = 0, sum;; i++, j++) {\n\t\t\tif (j == 5) {\n\t\t\t\tif ('a' - 'a' <= sum && sum <= 'z' - 'a')\n\t\t\t\t\tcout << (char)(sum + 'A');\n\t\t\t\telse {\n\t\t\t\t\tchar c;\n\t\t\t\t\tswitch (sum) {\n\t\t\t\t\tcase 26:\n\t\t\t\t\t\tc = ' '; break;\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\tc = '.'; break;\n\t\t\t\t\tcase 28:\n\t\t\t\t\t\tc = ','; break;\n\t\t\t\t\tcase 29:\n\t\t\t\t\t\tc = '-'; break;\n\t\t\t\t\tcase 30:\n\t\t\t\t\t\tc = '\\''; break;\n\t\t\t\t\tcase 31:\n\t\t\t\t\t\tc = '?'; break;\n\t\t\t\t\t}\n\t\t\t\t\tcout << c;\n\t\t\t\t}\n\t\t\t\tif (i >= count)\n\t\t\t\t\tbreak;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t\tif (j == 0)\n\t\t\t\tsum = 0;\n\t\t\tif (i < count)\n\t\t\t\tsum = (sum << 1) + makedcode[i];\n\t\t\telse\n\t\t\t\tsum = sum << 1;\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <list>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#include <map>\n#include <numeric>\n#include <sstream>\n#include <queue>\n#include <iomanip>\nusing namespace std;\n\n#define REP(i,n) for(int (i)=0; (i)<(n); (i)++)\n#define FOR(i,a,b) for(int (i)=(a); (i)<(b); (i)++)\n#define PUSH(n,v) for(int i=0; i<(n); i++) {int j; cin >> j; v.push_back(j);}\n#define ALL(v) v.begin(), v.end()\n#define print(s) cout << (s) << endl\n#define eadd(a,b) encode[(a)] = (b)\n#define dadd(a,b) decode[(a)] = (b)\n\nint main() {\n    map<char, string> encode;\n    map<string, char> decode;\n    eadd(' ',\"101\");\n    eadd('\\'',\"000000\");\n    eadd(',',\"000011\");\n    eadd('-',\"10010001\");\n    eadd('.',\"010001\");\n    eadd('?',\"000001\");\n    eadd('A',\"100101\");\n    eadd('B',\"10011010\");\n    eadd('C',\"0101\");\n    eadd('D',\"0001\");\n    eadd('E',\"110\");\n    eadd('F',\"01001\");\n    eadd('G',\"10011011\");\n    eadd('H',\"010000\");\n    eadd('I',\"0111\");\n    eadd('J',\"10011000\");\n    eadd('K',\"0110\");\n    eadd('L',\"00100\");\n    eadd('M',\"10011001\");\n    eadd('N',\"10011110\");\n    eadd('O',\"00101\");\n    eadd('P',\"111\");\n    eadd('Q',\"10011111\");\n    eadd('R',\"1000\");\n    eadd('S',\"00110\");\n    eadd('T',\"00111\");\n    eadd('U',\"10011100\");\n    eadd('V',\"10011101\");\n    eadd('W',\"000010\");\n    eadd('X',\"10010010\");\n    eadd('Y',\"10010011\");\n    eadd('Z',\"10010000\");\n    \n    dadd(\"00000\",'A');\n    dadd(\"00001\",'B');\n    dadd(\"00010\",'C');\n    dadd(\"00011\",'D');\n    dadd(\"00100\",'E');\n    dadd(\"00101\",'F');\n    dadd(\"00110\",'G');\n    dadd(\"00111\",'H');\n    dadd(\"01000\",'I');\n    dadd(\"01001\",'J');\n    dadd(\"01010\",'K');\n    dadd(\"01011\",'L');\n    dadd(\"01100\",'M');\n    dadd(\"01101\",'N');\n    dadd(\"01110\",'O');\n    dadd(\"01111\",'P');\n    dadd(\"10000\",'Q');\n    dadd(\"10001\",'R');\n    dadd(\"10010\",'S');\n    dadd(\"10011\",'T');\n    dadd(\"10100\",'U');\n    dadd(\"10101\",'V');\n    dadd(\"10110\",'W');\n    dadd(\"10111\",'X');\n    dadd(\"11000\",'Y');\n    dadd(\"11001\",'Z');\n    dadd(\"11010\",' ');\n    dadd(\"11011\",'.');\n    dadd(\"11100\",',');\n    dadd(\"11101\",'-');\n    dadd(\"11110\",'\\'');\n    dadd(\"11111\",'?');\n    \n    string s;\n    while(getline(cin,s)) {\n        string enc = \"\";\n        REP(i,s.size()) {\n            enc += encode[s[i]];\n        }\n        switch (enc.size() % 5) {\n            case 1:\n                enc += \"0000\";\n                break;\n            case 2:\n                enc += \"000\";\n                break;\n            case 3:\n                enc += \"00\";\n                break;\n            case 4:\n                enc += \"0\";\n                break;\n            default:\n                break;\n        }\n        string dec = \"\";\n        for(int i = 0; i < enc.size(); i+=5) {\n            string five = \"\";\n            five += enc[i];\n            five += enc[i+1];\n            five += enc[i+2];\n            five += enc[i+3];\n            five += enc[i+4];\n            //cout << five << endl;\n            dec += decode[five];\n        }\n        cout << dec << endl;\n    }\n    \n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i,n)for(int i=0;i<n;i++)\nusing namespace std;\n\nmap<char, int>notal{\n\t{ ' ',26 },{ '.',27 },{ ',',28 },{ '-',29 },{ '\\'',30 },{ '?',31 }\n};\nmap<int, char>mp{\n\t{ 26,' ' },{ 27,'.' },{ 28,',' },{ 29,'-' },{ 30,'\\'' },{ 31,'?' },\n};\nstring code[]{ \"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\" };\nint bin(string s) {\n\treverse(s.begin(), s.end());\n\tint i = 1;\n\tint res = 0;\n\tfor (char c : s) {\n\t\tres += i*(c - '0');\n\t\ti <<= 1;\n\t}\n\treturn res;\n}\nint main() {\n\tstring s;\n\twhile (getline(cin, s)) {\n\t\tstring ss;\n\t\tfor (char c : s) {\n\t\t\tif (isalpha(c))ss += code[c - 'A'];\n\t\t\telse ss += code[notal[c]];\n\t\t}\n\t\twhile (ss.size() % 5)ss += '0';\n\t\tstring ans;\n\t\tfor (int i = 0; i <= ss.size() - 5; i += 5) {\n\t\t\tint d = bin(ss.substr(i, 5));\n\t\t\tif (d < 26)ans += 'A' + d;\n\t\t\telse ans += mp[d];\n\t\t}\n\t\tcout << ans << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<string>\n#include<cmath>\n\nusing namespace std;\n\nstring DoctorTableAD(char c){\n\tstring s;\n\tswitch( c ){\n\t\tcase ' ': s = \"101\"; break;\n\t\tcase 0x27: s = \"000000\"; break;\n\t\tcase ',': s = \"000011\"; break;\n\t\tcase '-': s = \"10010001\"; break;\n\t\tcase '.': s = \"010001\"; break;\n\t\tcase '?': s = \"000001\"; break;\n\t\tcase 'A': s = \"100101\"; break;\n\t\tcase 'B': s = \"10011010\"; break;\n\t\tcase 'C': s = \"0101\"; break;\n\t\tcase 'D': s = \"0001\"; break;\n\t\tcase 'E': s = \"110\"; break;\n\t\tcase 'F': s = \"01001\"; break;\n\t\tcase 'G': s = \"10011011\"; break;\n\t\tcase 'H': s = \"010000\"; break;\n\t\tcase 'I': s = \"0111\"; break;\n\t\tcase 'J': s = \"10011000\"; break;\n\t\tcase 'K': s = \"0110\"; break;\n\t\tcase 'L': s = \"00100\"; break;\n\t\tcase 'M': s = \"10011001\"; break;\n\t\tcase 'N': s = \"10011110\"; break;\n\t\tcase 'O': s = \"00101\"; break;\n\t\tcase 'P': s = \"111\"; break;\n\t\tcase 'Q': s = \"10011111\"; break;\n\t\tcase 'R': s = \"1000\"; break;\n\t\tcase 'S': s = \"00110\"; break;\n\t\tcase 'T': s = \"00111\"; break;\n\t\tcase 'U': s = \"10011100\"; break;\n\t\tcase 'V': s = \"10011101\"; break;\n\t\tcase 'W': s = \"000010\"; break;\n\t\tcase 'X': s = \"10010010\"; break;\n\t\tcase 'Y': s = \"10010011\"; break;\n\t\tcase 'Z': s = \"10010000\"; break;\n\t}\n\treturn s;\n}\nint myatoi(string bin_s){\n\tint ret = 0;\n\twhile( bin_s.length() > 0 ){\n\t\tret += (int)((bin_s[0] - '0') * pow(2.0, (double)(bin_s.length() - 1)));\n\t\tbin_s.erase(0,1);\n\t}\n\treturn ret;\n}\nchar DoctorTableDA(string &s){\n\tint d = myatoi(s);\n\tchar ac[] = \" .,-'?\";\n\n\tfor(int i = 0; i < 'Z' - 'A' + 1; i++) if(d == i) return i + 'A';\n\tfor(int i = 0; i < sizeof(ac)/sizeof(*ac); i++) if(i + 26 == d) return ac[i];\n\treturn ' ';\n}\nstring DoctorLovedEncode(string &raw){\n\tstring s;\n\tstring ret;\n\tfor(unsigned int i = 0; i < raw.length(); i++){\n\t\ts += DoctorTableAD(raw[i]);\n\t}\n\t// padding\n\twhile( s.length() % 5 != 0 ) s += '0';\n\n\tfor(unsigned int i = 0; i < s.length() / 5; i++){\n\t\tstring subs = s.substr(i*5,5);\n\t\tret += DoctorTableDA( subs );\n\t}\n\treturn ret;\n}\n\nint main(void){\n\twhile(true){\n\t\tstring s;\n\n\t\twhile( true ){\n\t\t\tchar c;\n\t\t\tc = cin.get();\n\t\t\tif( cin.eof() ) return 0;\n\t\t\tif( c == '\\n') break;\n\t\t\telse s += c;\n\t\t}\n\n\t\tcout << DoctorLovedEncode( s ) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\nusing pii = pair<int, int>;\n\nmap<char, string> mp;\nmap<string, char> mp2;\n\nvoid init() {\n  mp[' '] = \"101\";\n  mp['\\''] = \"000000\";\n  mp[','] =\t\"000011\";\n  mp['-'] =\t\"10010001\";\n  mp['.'] =\t\"010001\";\n  mp['?'] =\t\"000001\";\n  mp['A'] =\t\"100101\";\n  mp['B'] =\t\"10011010\";\n  mp['C'] =\t\"0101\";\n  mp['D'] =\t\"0001\";\n  mp['E'] =\t\"110\";\n  mp['F'] =\t\"01001\";\n  mp['G'] =\t\"10011011\";\n  mp['H'] =\t\"010000\";\n  mp['I'] =\t\"0111\";\n  mp['J'] =\t\"10011000\";\n  mp['K'] =\t\"0110\";\n  mp['L'] =\t\"00100\";\n  mp['M'] =\t\"10011001\";\n  mp['N'] =\t\"10011110\";\n  mp['O'] =\t\"00101\";\n  mp['P'] =\t\"111\";\n  mp['Q'] =\t\"10011111\";\n  mp['R'] =\t\"1000\";\n  mp['S'] =\t\"00110\";\n  mp['T'] =\t\"00111\";\n  mp['U'] =\t\"10011100\";\n  mp['V'] =\t\"10011101\";\n  mp['W'] =\t\"000010\";\n  mp['X'] =\t\"10010010\";\n  mp['Y'] =\t\"10010011\";\n  mp['Z'] =\t\"10010000\";\n\n  mp2[\"00000\"] = 'A';\n  mp2[\"00001\"] = 'B';\n  mp2[\"00010\"] = 'C';\n  mp2[\"00011\"] = 'D';\n  mp2[\"00100\"] = 'E';\n  mp2[\"00101\"] = 'F';\n  mp2[\"00110\"] = 'G';\n  mp2[\"00111\"] = 'H';\n  mp2[\"01000\"] = 'I';\n  mp2[\"01001\"] = 'J';\n  mp2[\"01010\"] = 'K';\n  mp2[\"01011\"] = 'L';\n  mp2[\"01100\"] = 'M';\n  mp2[\"01101\"] = 'N';\n  mp2[\"01110\"] = 'O';\n  mp2[\"01111\"] = 'P';\n  mp2[\"10000\"] = 'Q';\n  mp2[\"10001\"] = 'R';\n  mp2[\"10010\"] = 'S';\n  mp2[\"10011\"] = 'T';\n  mp2[\"10100\"] = 'U';\n  mp2[\"10101\"] = 'V';\n  mp2[\"10110\"] = 'W';\n  mp2[\"10111\"] = 'X';\n  mp2[\"11000\"] = 'Y';\n  mp2[\"11001\"] = 'Z';\n  mp2[\"11010\"] = ' ';\n  mp2[\"11011\"] = '.';\n  mp2[\"11100\"] = ',';\n  mp2[\"11101\"] = '-';\n  mp2[\"11110\"] = '\\'';\n  mp2[\"11111\"] = '?';\n}\n\nint main() {\n  cin.tie(0);\n  ios_base::sync_with_stdio(false);\n  cout << fixed << setprecision(10);\n  \n  init();\n  string s;\n  while (getline(cin, s)) {\n    string t = \"\";\n    for (int i = 0; i < (int)s.size(); i++) {\n      t += mp[s[i]];\n    }\n    while ((int)t.size() % 5 != 0) t += \"0\";\n    string ans = \"\";\n    for (int i = 0; i < (int)t.size(); i += 5) {\n      ans += mp2[t.substr(i, 5)];\n    }\n    cout << ans << endl;\n  }\n\n  return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nint main(){\n    string g,\n        s=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ ',-.?\",\n        str[34]={\n            \"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\n            \"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n            \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n            \"10010010\",\"10010011\",\"10010000\",\n            \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\"\n        };\n    while(getline(cin,g)){\n        string t,tem;\n        for(int i=0;i<g.length();i++)\n            switch(g[i]){\n                case ' ': t+=str[26];break;\n                case '\\'':t+=str[27];break;\n                case ',': t+=str[28];break;\n                case '-': t+=str[29];break;\n                case '.': t+=str[30];break;\n                case '?': t+=str[31];break;\n                default:  t+=str[g[i]-'A'];\n            }\n        while(t.length()%5)t+='0';\n        g=\"\";\n        for(int i=0;i<t.length();i++){\n            tem+=t[i];\n            if(tem.length()==5){\n                int n=0;\n                for(int j=0;j<5;j++)\n                    n=n*2+tem[j]-'0';\n                switch (n){\n                    case 26:g+=' ';break;\n                    case 27:g+='.';break;\n                    case 28:g+=',';break;\n                    case 29:g+='-';break;\n                    case 30:g+='\\'';break;\n                    case 31:g+='?';break;\n                    default:g+='A'+n;\n                }\n                tem=\"\";\n            }\n        }\n        cout<<g<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n\tchar ch;\n\tstring input_str = \"\";\n\twhile(cin.get(ch)){\n\t\tswitch(ch){\n\t\tcase ' ' :input_str += \"101\"\t    ;break;\n\t\tcase '\\n':input_str += \"101\"\t\t;break;\n\t\tcase '\\'':input_str += \"000000\"\t\t;break;\n\t\tcase ',' :input_str += \"000011\"\t\t;break;\n\t\tcase '-' :input_str += \"10010001\"\t;break;\n\t\tcase '.' :input_str += \"010001\"\t\t;break;\n\t\tcase '\\?' :input_str += \"000001\"\t;break;\n\t\tcase 'A' :input_str += \"100101\"\t\t;break;\n\t\tcase 'B' :input_str += \"10011010\"\t;break;\n\t\tcase 'C' :input_str += \"0101\"\t\t;break;\n\t\tcase 'D' :input_str += \"0001\"\t\t;break;\n\t\tcase 'E' :input_str += \"110\"\t\t;break;\n\t\tcase 'F' :input_str += \"01001\"\t\t;break;\n\t\tcase 'G' :input_str += \"10011011\"\t;break;\n\t\tcase 'H' :input_str += \"010000\"\t\t;break;\n\t\tcase 'I' :input_str += \"0111\"\t\t;break;\n\t\tcase 'J' :input_str += \"10011000\"\t;break;\n\t\tcase 'K' :input_str += \"0110\"\t\t;break;\n\t\tcase 'L' :input_str += \"00100\"\t\t;break;\n\t\tcase 'M' :input_str += \"10011001\"\t;break;\n\t\tcase 'N' :input_str += \"10011110\"\t;break;\n\t\tcase 'O' :input_str += \"00101\"\t\t;break;\n\t\tcase 'P' :input_str += \"111\"\t\t;break;\n\t\tcase 'Q' :input_str += \"10011111\"\t;break;\n\t\tcase 'R' :input_str += \"1000\"\t\t;break;\n\t\tcase 'S' :input_str += \"00110\"\t\t;break;\n\t\tcase 'T' :input_str += \"00111\"\t\t;break;\n\t\tcase 'U' :input_str += \"10011100\"\t;break;\n\t\tcase 'V' :input_str += \"10011101\"\t;break;\n\t\tcase 'W' :input_str += \"000010\"\t\t;break;\n\t\tcase 'X' :input_str += \"10010010\"\t;break;\n\t\tcase 'Y' :input_str += \"10010011\"\t;break;\n\t\tcase 'Z' :input_str += \"10010000\"\t;break;\n\t\t}\n\t}\n\tint pad = 5 - input_str.size()%5;\n\tfor(int i=0; i<pad; i++)input_str += \"0\";\n\tfor(int i=0; i<input_str.size()/5; i++){\n\t\tstring output_str = input_str.substr(i*5, 5);\n\t\tif(output_str== \"00000\"){ cout << \"A\"; }\n\t\telse if( output_str==\"00001\") { cout << \"B\";}\t\n\t\telse if( output_str==\"00010\") { cout << \"C\";}\t\n\t\telse if( output_str==\"00011\") { cout << \"D\";}\t\n\t\telse if( output_str==\"00100\") { cout << \"E\";}\t\n\t\telse if( output_str==\"00101\") { cout << \"F\";}\t\n\t\telse if( output_str==\"00110\") { cout << \"G\";}\t\n\t\telse if( output_str==\"00111\") { cout << \"H\";}\t\n\t\telse if( output_str==\"01000\") { cout << \"I\";}\t\n\t\telse if( output_str==\"01001\") { cout << \"J\";}\t\n\t\telse if( output_str==\"01010\") { cout << \"K\";}\t\n\t\telse if( output_str==\"01011\") { cout << \"L\";}\t\n\t\telse if( output_str==\"01100\") { cout << \"M\";}\t\n\t\telse if( output_str==\"01101\") { cout << \"N\";}\t\n\t\telse if( output_str==\"01110\") { cout << \"O\";}\t\n\t\telse if( output_str==\"01111\") { cout << \"P\";}\t\n\t\telse if( output_str==\"10000\") { cout << \"Q\";}\t\n\t\telse if( output_str==\"10001\") { cout << \"R\";}\t\n\t\telse if( output_str==\"10010\") { cout << \"S\";}\t\n\t\telse if( output_str==\"10011\") { cout << \"T\";}\t\n\t\telse if( output_str==\"10100\") { cout << \"U\";}\t\n\t\telse if( output_str==\"10101\") { cout << \"V\";}\t\n\t\telse if( output_str==\"10110\") { cout << \"W\";}\t\n\t\telse if( output_str==\"10111\") { cout << \"X\";}\t\n\t\telse if( output_str==\"11000\") { cout << \"Y\";}\t\n\t\telse if( output_str==\"11001\") { cout << \"Z\";}\t\n\t\telse if( output_str==\"11010\") { cout << \" \";}\t\n\t\telse if( output_str==\"11011\") { cout << \".\";}\t\n\t\telse if( output_str==\"11100\") { cout << \",\";}\t\n\t\telse if( output_str==\"11101\") { cout << \"-\";}\t\n\t\telse if( output_str==\"11110\") { cout << \"'\";} \n\t\telse if( output_str==\"11111\") { cout << \"?\";}\n\t}\n//\tcout << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <list>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <bitset>\n#include <numeric>\n#include <climits>\n#include <cfloat>\nusing namespace std;\n\nint main()\n{\n    string code[256];\n    code[' '] = \"101\";\n    code['\\''] = \"000000\";\n    code[','] = \"000011\";\n    code['-'] = \"10010001\";\n    code['.'] = \"010001\";\n    code['?'] = \"000001\";\n    code['A'] = \"100101\";\n    code['B'] = \"10011010\";\n    code['C'] = \"0101\";\n    code['D'] = \"0001\";\n    code['E'] = \"110\";\n    code['F'] = \"01001\";\n    code['G'] = \"10011011\";\n    code['H'] = \"010000\";\n    code['I'] = \"0111\";\n    code['J'] = \"10011000\";\n    code['K'] = \"0110\";\n    code['L'] = \"00100\";\n    code['M'] = \"10011001\";\n    code['N'] = \"10011110\";\n    code['O'] = \"00101\";\n    code['P'] = \"111\";\n    code['Q'] = \"10011111\";\n    code['R'] = \"1000\";\n    code['S'] = \"00110\";\n    code['T'] = \"00111\";\n    code['U'] = \"10011100\";\n    code['V'] = \"10011101\";\n    code['W'] = \"000010\";\n    code['X'] = \"10010010\";\n    code['Y'] = \"10010011\";\n    code['Z'] = \"10010000\";\n\n    char restore[32];\n    for(int i=0; i<26; ++i)\n        restore[i] = i + 'A';\n    restore[26] = ' ';\n    restore[27] = '.';\n    restore[28] = ',';\n    restore[29] = '-';\n    restore[30] = '\\'';\n    restore[31] = '?';\n\n\n    for(;;){\n        string s;\n        if(!getline(cin, s))\n            return 0;\n\n        int n = s.size();\n        string s1;\n        for(int i=0; i<n; ++i)\n            s1 += code[s[i]];\n        while(s1.size() % 5 != 0)\n            s1 += '0';\n\n        n = s1.size();\n        string ret;\n        for(int i=0; i<n; i+=5){\n            int a = bitset<5>(s1.substr(i, 5)).to_ulong();\n            ret += restore[a];\n        }\n\n        cout << ret << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\nint main(){\n\tstring a,b,c;\n\tint sma;\n\tstring d=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\twhile(getline(cin,a)){\n\t\tb=\"\";\n\t\tc=\"\";\n\t\tfor(int i=0;i<a.size();i++){\n\t\t\tif(a[i]==' ')b+=\"101\";\n\t\t\telse if(a[i]==39)b+=\"000000\";\n\t\t\telse if(a[i]==',')b+=\"000011\";\n\t\t\telse if(a[i]=='-')b+=\"10010001\";\n\t\t\telse if(a[i]=='.')b+=\"010001\";\n\t\t\telse if(a[i]=='?')b+=\"000001\";\n\t\t\telse if(a[i]=='A')b+=\"100101\";\n\t\t\telse if(a[i]=='B')b+=\"10011010\";\n\t\t\telse if(a[i]=='C')b+=\"0101\";\n\t\t\telse if(a[i]=='D')b+=\"0001\";\n\t\t\telse if(a[i]=='E')b+=\"110\";\n\t\t\telse if(a[i]=='F')b+=\"01001\";\n\t\t\telse if(a[i]=='G')b+=\"10011011\";\n\t\t\telse if(a[i]=='H')b+=\"010000\";\n\t\t\telse if(a[i]=='I')b+=\"0111\";\n\t\t\telse if(a[i]=='J')b+=\"10011000\";\n\t\t\telse if(a[i]=='K')b+=\"0110\";\n\t\t\telse if(a[i]=='L')b+=\"00100\";\n\t\t\telse if(a[i]=='M')b+=\"10011001\";\n\t\t\telse if(a[i]=='N')b+=\"10011110\";\n\t\t\telse if(a[i]=='O')b+=\"00101\";\n\t\t\telse if(a[i]=='P')b+=\"111\";\n\t\t\telse if(a[i]=='Q')b+=\"10011111\";\n\t\t\telse if(a[i]=='R')b+=\"1000\";\n\t\t\telse if(a[i]=='S')b+=\"00110\";\n\t\t\telse if(a[i]=='T')b+=\"00111\";\n\t\t\telse if(a[i]=='U')b+=\"10011100\";\n\t\t\telse if(a[i]=='V')b+=\"10011101\";\n\t\t\telse if(a[i]=='W')b+=\"000010\";\n\t\t\telse if(a[i]=='X')b+=\"10010010\";\n\t\t\telse if(a[i]=='Y')b+=\"10010011\";\n\t\t\telse if(a[i]=='Z')b+=\"10010000\";\n\t\t}\n\t\twhile(b.size()%5!=0)b+='0';\n\t\tfor(int i=0;i<b.size();i+=5){\n\t\t\tsma=(16*(b[i]-'0'))+(8*(b[i+1]-'0'))+(4*(b[i+2]-'0'))+(2*(b[i+3]-'0'))+(1*(b[i+4]-'0'));\n\t\t\tc+=d[sma];\n\t\t\t\n\t\t}\n\t\tcout<<c<<endl;\n\t\t\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<string>\n#include<vector>\n\nusing namespace std;\n\nint main(void)\n{\n\tmap<char,string> mapA;\n\tmap<string,char> mapB;\n\tstring s1=\" \\',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tstring s2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\tstring s3[32]={\n\t\t\"101\",\n\t\t\"000000\",\n\t\t\"000011\",\n\t\t\"10010001\",\n\t\t\"010001\",\n\t\t\"000001\",\n\t\t\"100101\",\n\t\t\"10011010\",\n\t\t\"0101\",\n\t\t\"0001\",\n\t\t\"110\",\n\t\t\"01001\",\n\t\t\"100110110\",\n\t\t\"010000\",\n\t\t\"0111\",\n\t\t\"10011000\",\n\t\t\"0110\",\n\t\t\"00100\",\n\t\t\"10011001\",\n\t\t\"10011110\",\n\t\t\"00101\",\n\t\t\"111\",\n\t\t\"10011111\",\n\t\t\"1000\",\n\t\t\"00110\",\n\t\t\"00111\",\n\t\t\"10011100\",\n\t\t\"10011101\",\n\t\t\"000010\",\n\t\t\"10010010\",\n\t\t\"10010011\",\n\t\t\"10010000\"\n\t};\n\tstring s4[32];\n\tfor(int i=0;i<32;i++){\n\t\tint p=i;\n\t\tchar tmp[6];\n\t\tfor(int j=0;j<5;j++){\n\t\t\ttmp[4-j]='0'+p%2;\n\t\t\tp/=2;\n\t\t}\n\t\ttmp[5]='\\0';\n\t\ts4[i]=tmp;\n\t}\n\tfor(int i=0;i<32;i++){\n\t\tmapA[s1[i]]=s3[i];\n\t\tmapB[s4[i]]=s2[i];\n\t}\n\n\tstring str;\n\twhile(getline(cin,str)){\n\t\tstring tmp;\n\t\tfor(int i=0;i<(int)str.size();i++){\n\t\t\ttmp+=mapA[str[i]];\n\t\t}\n\t\tfor(int i=0;i<(int)tmp.size()%5;i++){\n\t\t\ttmp+=\"0\";\n\t\t}\n\t\tfor(int i=0;i<(int)tmp.size()/5;i++){\n\t\t\tstring tok;\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\ttok+=tmp[i*5+j];\n\t\t\t}\n\t\t\tcout<<mapB[tok];\n\t\t}\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\nint main() {\n\tchar code[32][20] = {\n\t\t\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\n\t\t\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\t\t\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n\t\t\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"\n\t};\n\tint coden[256];\n\tchar tmp[] = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tfor (int i = 0; i < 32; i++) {\n\t\tcoden[tmp[i]] = i;\n\t}\n\tchar str[200];\n\tint makedcode[3000];\n\tint count;\n\n\twhile (gets(str) != NULL) {\n\t\tcount = 0;\n\t\tfor (int i = 0, slen = strlen(str); i < slen; i++) {\n\t\t\tfor (int j = 0, clen = strlen(code[coden[str[i]]]); j < clen; j++) {\n\t\t\t\tmakedcode[count++] = code[coden[str[i]]][j] - '0';\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0, j = 0, sum;; i++, j++) {\n\t\t\tif (j == 5) {\n\t\t\t\tif ('a' - 'a' <= sum && sum <= 'z' - 'a')\n\t\t\t\t\tcout << (char)(sum + 'A');\n\t\t\t\telse {\n\t\t\t\t\tchar c;\n\t\t\t\t\tswitch (sum) {\n\t\t\t\t\tcase 26:\n\t\t\t\t\t\tc = ' '; break;\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\tc = '.'; break;\n\t\t\t\t\tcase 28:\n\t\t\t\t\t\tc = ','; break;\n\t\t\t\t\tcase 29:\n\t\t\t\t\t\tc = '-'; break;\n\t\t\t\t\tcase 30:\n\t\t\t\t\t\tc = '\\''; break;\n\t\t\t\t\tcase 31:\n\t\t\t\t\t\tc = '?'; break;\n\t\t\t\t\t}\n\t\t\t\t\tcout << c;\n\t\t\t\t}\n\t\t\t\tif (i >= count)\n\t\t\t\t\tbreak;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t\tif (j == 0)\n\t\t\t\tsum = 0;\n\t\t\tif (i < count)\n\t\t\t\tsum = (sum << 1) + makedcode[i];\n\t\t\telse\n\t\t\t\tsum = sum << 1;\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\n#include<string>\n#include<map>\n#include<cmath>\nusing namespace std;\nint change(string x){\n    int t = 0;\n    for(int i = 0; i < x.size(); i++){\n        t = t + (x[i]-'0')*pow(2,4-i);\n    }\n    return t;\n}\nint main(){\n    string str;\n    map<char,string> d;\n    d[' '] = \"101\";\n    d['\\''] = \"000000\";\n    d[','] = \"000011\";\n    d['-'] = \"10010001\";\n    d['.'] = \"010001\";\n    d['?'] = \"000001\";\n    d['A'] = \"100101\";\n    d['B'] = \"10011010\";\n    d['C'] = \"0101\";\n    d['D'] = \"0001\";\n    d['E'] = \"110\";\n    d['F'] = \"01001\";\n    d['G'] = \"100110110\";\n    d['H'] = \"010000\";\n    d['I'] = \"0111\";\n    d['J'] = \"10011000\";\n    d['K'] = \"0110\";\n    d['L'] = \"00100\";\n    d['M'] = \"10011001\";\n    d['N'] = \"10011110\";\n    d['O'] = \"00101\";\n    d['P'] = \"111\";\n    d['Q'] = \"10011111\";\n    d['R'] = \"1000\";\n    d['S'] = \"00110\";\n    d['T'] = \"00111\";\n    d['U'] = \"10011100\";\n    d['V'] = \"10011101\";\n    d['W'] = \"000010\";\n    d['X'] = \"10010010\";\n    d['Y'] = \"10010011\";\n    d['Z'] = \"10010000\";\n    string a = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n    while(getline(cin,str)){\n        string ans;\n        string temp;\n        for(int i = 0; i < str.size(); i++){\n            ans += d[str[i]];\n        }\n        for(int i = 0;i < ans.size()%5; i++){\n            ans+= \"0\";\n        }\n        for(int i = 0; i < ans.size(); i+=5){\n            temp=\"\";\n            temp += ans[i];\n            temp += ans[i+1];\n            temp += ans[i+2];\n            temp += ans[i+3];\n            temp += ans[i+4];\n            cout << a[change(temp)];\n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#define CASE(c,s) case c:return s\nusing namespace std;\n\nstring f(char c){\n\tswitch (c){\n\t\tCASE(' ', \"101\");\n\t\tCASE('\\'', \"000000\");\n\t\tCASE(',', \"000011\");\n\t\tCASE('-', \"10010001\");\n\t\tCASE('.', \"010001\");\n\t\tCASE('?', \"000001\");\n\t\tCASE('A', \"100101\");\n\t\tCASE('B', \"10011010\");\n\t\tCASE('C', \"0101\");\n\t\tCASE('D', \"0001\");\n\t\tCASE('E', \"110\");\n\t\tCASE('F', \"01001\");\n\t\tCASE('G', \"10011011\");\n\t\tCASE('H', \"010000\");\n\t\tCASE('I', \"0111\");\n\t\tCASE('J', \"10011000\");\n\t\tCASE('K', \"0110\");\n\t\tCASE('L', \"00100\");\n\t\tCASE('M', \"100110011\");\n\t\tCASE('N', \"10011110\");\n\t\tCASE('O', \"00101\");\n\t\tCASE('P', \"111\");\n\t\tCASE('Q', \"10011111\");\n\t\tCASE('R', \"1000\");\n\t\tCASE('S', \"00110\");\n\t\tCASE('T', \"00111\");\n\t\tCASE('U', \"10011100\");\n\t\tCASE('V', \"10011101\");\n\t\tCASE('W', \"000010\");\n\t\tCASE('X', \"10010010\");\n\t\tCASE('Y', \"10010011\");\n\t\tCASE('Z', \"10010000\");\n\tdefault:return \"\";\n\t}\n}\n\nint bitodec(string s){\n\tint sum=0;\n\tfor (int i = 0; i < s.size(); ++i){\n\t\tsum *= 2;\n\t\tsum += (s[i] - '0');\t\t\n\t}\n\treturn sum;\n}\n\nchar g(string s){\n\tchar c[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\treturn c[bitodec(s)];\n}\nint main(){\n\tstring s,r;\n\tint i;\n\n\twhile (getline(cin, s)){\n\t\ti = 0;\n\n\t\twhile (s[i] != '\\0'){\n\t\t\tr += f(s[i]);\n\t\t\t++i;\n\t\t}\n\n\t\tif (i % 5)for (int j = 4 - (i % 5); --j;)r += \"0\";\n\n\t\tfor (int j = 0; j <= r.size() / 5;++j)\n\t\t\tcout <<g(r.substr(j*5,5));\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\nusing namespace std;\n\nstring encode[] = \n{\" 101\",\n\"'000000\",\n\",000011\",\n\"-10010001\",\n\".010001\",\n\"?000001\",\n\"A100101\",\n\"B10011010\",\n\"C0101\",\n\"D0001\",\n\"E110\",\n\"F01001\",\n\"G10011011\",\n\"H010000\",\n\"I0111\",\n\"J10011000\",\n\"K0110\",\n\"L00100\",\n\"M10011001\",\n\"N10011110\",\n\"O00101\",\n\"P111\",\n\"Q10011111\",\n\"R1000\",\n\"S00110\",\n\"T00111\",\n\"U10011100\",\n\"V10011101\",\n\"W000010\",\n\"X10010010\",\n\"Y10010011\",\n\"Z10010000\"\n};\n\nstring decode[] =\n{\"00000A\",\n\"00001B\",\n\"00010C\",\n\"00011D\",\n\"00100E\",\n\"00101F\",\n\"00110G\",\n\"00111H\",\n\"01000I\",\n\"01001J\",\n\"01010K\",\n\"01011L\",\n\"01100M\",\n\"01101N\",\n\"01110O\",\n\"01111P\",\n\"10000Q\",\n\"10001R\",\n\"10010S\",\n\"10011T\",\n\"10100U\",\n\"10101V\",\n\"10110W\",\n\"10111X\",\n\"11000Y\",\n\"11001Z\",\n\"11010 \",\n\"11011.\",\n\"11100,\",\n\"11101-\",\n\"11110'\",\n\"11111?\"\n};\n\nint main(){\n\tmap<char,string> enc_m;\n\tmap<string,char> dec_m;\n\tfor(int i = 0 ; i < 32 ; i++){\n\t\tenc_m[encode[i][0]] = encode[i].substr(1);\n\t\tdec_m[decode[i].substr(0,5)] = decode[i][5];\n\t}\n\tstring ln;\n\twhile(getline(cin,ln)){\n\t\tstring to,ans;\n\t\tfor(int i = 0 ; i < ln.size() ; i++)\n\t\t\tto  += enc_m[ln[i]];\n\t\twhile(to.size()%5)to += \"0\";\n\t\tfor(int i = 0 ; i < to.size() ; i+=5)\n\t\t\tans += dec_m[to.substr(i,5)];\n\t\tcout << ans << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n\tstring input_str = \"\", tmp;\n\twhile(getline(cin, tmp)){\n\t\tfor(int i=0; i<tmp.size(); i++){\n\t\t\tswitch(tmp[i]){\n\t\t\tcase ' ' :input_str += \"101\"\t    ;break;\n\t\t\tcase '\\'':input_str += \"000000\"\t\t;break;\n\t\t\tcase ',' :input_str += \"000011\"\t\t;break;\n\t\t\tcase '-' :input_str += \"10010001\"\t;break;\n\t\t\tcase '.' :input_str += \"010001\"\t\t;break;\n\t\t\tcase '?' :input_str += \"000001\"\t    ;break;\n\t\t\tcase 'A' :input_str += \"100101\"\t\t;break;\n\t\t\tcase 'B' :input_str += \"10011010\"\t;break;\n\t\t\tcase 'C' :input_str += \"0101\"\t\t;break;\n\t\t\tcase 'D' :input_str += \"0001\"\t\t;break;\n\t\t\tcase 'E' :input_str += \"110\"\t\t;break;\n\t\t\tcase 'F' :input_str += \"01001\"\t\t;break;\n\t\t\tcase 'G' :input_str += \"10011011\"\t;break;\n\t\t\tcase 'H' :input_str += \"010000\"\t\t;break;\n\t\t\tcase 'I' :input_str += \"0111\"\t\t;break;\n\t\t\tcase 'J' :input_str += \"10011000\"\t;break;\n\t\t\tcase 'K' :input_str += \"0110\"\t\t;break;\n\t\t\tcase 'L' :input_str += \"00100\"\t\t;break;\n\t\t\tcase 'M' :input_str += \"10011001\"\t;break;\n\t\t\tcase 'N' :input_str += \"10011110\"\t;break;\n\t\t\tcase 'O' :input_str += \"00101\"\t\t;break;\n\t\t\tcase 'P' :input_str += \"111\"\t\t;break;\n\t\t\tcase 'Q' :input_str += \"10011111\"\t;break;\n\t\t\tcase 'R' :input_str += \"1000\"\t\t;break;\n\t\t\tcase 'S' :input_str += \"00110\"\t\t;break;\n\t\t\tcase 'T' :input_str += \"00111\"\t\t;break;\n\t\t\tcase 'U' :input_str += \"10011100\"\t;break;\n\t\t\tcase 'V' :input_str += \"10011101\"\t;break;\n\t\t\tcase 'W' :input_str += \"000010\"\t\t;break;\n\t\t\tcase 'X' :input_str += \"10010010\"\t;break;\n\t\t\tcase 'Y' :input_str += \"10010011\"\t;break;\n\t\t\tcase 'Z' :input_str += \"10010000\"\t;break;\n\t\t\t}\n\t\t}\n\t\tint pad = 5 - input_str.size()%5;\n\t\tfor(int i=0; i<pad; i++)input_str += '0';\n\t\tstring out = \"\";\n\t\tfor(int i=0; i<input_str.size(); i+=5){\n\t\t\tstring output_str = input_str.substr(i, 5);\n\t\t\tif(output_str== \"00000\"){ out += 'A'; }\n\t\t\telse if( output_str==\"00001\") { out += 'B';}\t\n\t\t\telse if( output_str==\"00010\") { out += 'C';}\t\n\t\t\telse if( output_str==\"00011\") { out += 'D';}\t\n\t\t\telse if( output_str==\"00100\") { out += 'E';}\t\n\t\t\telse if( output_str==\"00101\") { out += 'F';}\t\n\t\t\telse if( output_str==\"00110\") { out += 'G';}\t\n\t\t\telse if( output_str==\"00111\") { out += 'H';}\t\n\t\t\telse if( output_str==\"01000\") { out += 'I';}\t\n\t\t\telse if( output_str==\"01001\") { out += 'J';}\t\n\t\t\telse if( output_str==\"01010\") { out += 'K';}\t\n\t\t\telse if( output_str==\"01011\") { out += 'L';}\t\n\t\t\telse if( output_str==\"01100\") { out += 'M';}\t\n\t\t\telse if( output_str==\"01101\") { out += 'N';}\t\n\t\t\telse if( output_str==\"01110\") { out += 'O';}\t\n\t\t\telse if( output_str==\"01111\") { out += 'P';}\t\n\t\t\telse if( output_str==\"10000\") { out += 'Q';}\t\n\t\t\telse if( output_str==\"10001\") { out += 'R';}\t\n\t\t\telse if( output_str==\"10010\") { out += 'S';}\t\n\t\t\telse if( output_str==\"10011\") { out += 'T';}\t\n\t\t\telse if( output_str==\"10100\") { out += 'U';}\t\n\t\t\telse if( output_str==\"10101\") { out += 'V';}\t\n\t\t\telse if( output_str==\"10110\") { out += 'W';}\t\n\t\t\telse if( output_str==\"10111\") { out += 'X';}\t\n\t\t\telse if( output_str==\"11000\") { out += 'Y';}\t\n\t\t\telse if( output_str==\"11001\") { out += 'Z';}\t\n\t\t\telse if( output_str==\"11010\") { out += ' ';}\t\n\t\t\telse if( output_str==\"11011\") { out += '.';}\t\n\t\t\telse if( output_str==\"11100\") { out += ',';}\t\n\t\t\telse if( output_str==\"11101\") { out += '-';}\t\n\t\t\telse if( output_str==\"11110\") { out += '\\'';} \n\t\t\telse if( output_str==\"11111\") { out += '?';}\n\t\t}\n\t\tcout << out << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main ()\n{\n\tstring input , start , output , ans;\n\tmap<char , string>code;\n\tcode[' '] = \"101\" ,\n\tcode['\\''] = \"000000\" ,\n\tcode[','] = \"000011\" ,\n\tcode['-'] = \"10010001\" ,\n\tcode['.'] = \"010001\" ,\n\tcode['?'] = \"000001\" ,\n\tcode['A'] = \"100101\" ,\n\tcode['B'] = \"10011010\" ,\n\tcode['C'] = \"0101\" ,\n\tcode['D'] = \"0001\" ,\n\tcode['E'] = \"110\" ,\n\tcode['F'] = \"01001\" ,\n\tcode['G'] = \"10011011\" ,\n\tcode['H'] = \"010000\" ,\n\tcode['I'] = \"0111\" ,\n\tcode['J'] = \"10011000\" ,\n\tcode['K'] = \"0110\" ,\n\tcode['L'] = \"00100\" ,\n\tcode['M'] = \"10011001\" ,\n\tcode['N'] = \"10011110\" ,\n\tcode['O'] = \"00101\" ,\n\tcode['P'] = \"111\" ,\n\tcode['Q'] = \"10011111\" ,\n\tcode['R'] = \"1000\" ,\n\tcode['S'] = \"00110\" ,\n\tcode['T'] = \"00111\" ,\n\tcode['U'] = \"10011100\" ,\n\tcode['V'] = \"10011101\" ,\n\tcode['W'] = \"000010\" ,\n\tcode['X'] = \"10010010\" ,\n\tcode['Y'] = \"10010011\" ,\n\tcode['Z'] = \"10010000\";\n\n\n\tmap<string , char>code2;\n\tcode2[\"00000\"] = 'A' ,\n\tcode2[\"00001\"] = 'B' ,\n\tcode2[\"00010\"] = 'C' ,\n\tcode2[\"00011\"] = 'D' ,\n\tcode2[\"00100\"] = 'E' ,\n\tcode2[\"00101\"] = 'F' ,\n\tcode2[\"00110\"] = 'G' ,\n\tcode2[\"00111\"] = 'H' ,\n\tcode2[\"01000\"] = 'I' ,\n\tcode2[\"01001\"] = 'J' ,\n\tcode2[\"01010\"] = 'K' ,\n\tcode2[\"01011\"] = 'L' ,\n\tcode2[\"01100\"] = 'M' ,\n\tcode2[\"01101\"] = 'N' ,\n\tcode2[\"01110\"] = 'O' ,\n\tcode2[\"01111\"] = 'P' ,\n\tcode2[\"10000\"] = 'Q' ,\n\tcode2[\"10001\"] = 'R' ,\n\tcode2[\"10010\"] = 'S' ,\n\tcode2[\"10011\"] = 'T' ,\n\tcode2[\"10100\"] = 'U' ,\n\tcode2[\"10101\"] = 'V' ,\n\tcode2[\"10110\"] = 'W' ,\n\tcode2[\"10111\"] = 'X' ,\n\tcode2[\"11000\"] = 'Y' ,\n\tcode2[\"11001\"] = 'Z' ,\n\tcode2[\"11010\"] = ' ' ,\n\tcode2[\"11011\"] = '.' ,\n\tcode2[\"11100\"] = ',' ,\n\tcode2[\"11101\"] = '-' ,\n\tcode2[\"11110\"] = '\\'' ,\n\tcode2[\"11111\"] = '?';\n\n\n\twhile( cin >> input )\n\t{\n\t\tstart += input + ' ';\n\t}\n\tstart.pop_back ();\n\tfor( auto x : start )\n\t{\n\t\toutput += code[x];\n\t}\n\twhile( output.size () % 5 )output += \"0\";\n\tfor( size_t i = 0; i < output.size (); i += 5 )\n\t{\n\t\tans += code2[output.substr ( i , 5 )];\n\t}\n\tcout << ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid hantei(char *str,int len1);\n\nchar DataBase[][3][80] =\n\t{\n\t/* [文字] ,[符号＿変換前] ,[符号＿変換後] */\n\t{ \" \", \"101\", \"11010\" },{ \"\\'\", \"000000\", \"11110\" },{ \",\", \"000011\", \"11100\" },{ \"-\", \"10010001\", \"11101\" },\n\t{ \".\", \"010001\", \"11011\" },{ \"?\", \"000001\", \"11111\" },{ \"A\", \"100101\", \"00000\" },{ \"B\", \"10011010\", \"00001\" },\n    { \"C\", \"0101\", \"00010\" },{ \"D\", \"0001\", \"00011\" },{ \"E\", \"110\", \"00100\" },{ \"F\", \"01001\", \"00101\" },\n\t{ \"G\", \"10011011\", \"00110\" },{ \"H\", \"010000\", \"00111\" },{ \"I\", \"0111\", \"01000\" },{ \"J\", \"10011000\", \"01001\" },\n\t{ \"K\", \"0110\", \"01010\" },{ \"L\", \"00100\", \"01011\" },{ \"M\", \"10011001\", \"01100\" },{ \"N\", \"10011110\", \"01101\" },\n\t{ \"O\", \"00101\", \"01110\" },{ \"P\", \"111\", \"01111\" },{ \"Q\", \"10011111\", \"10000\" },{ \"R\", \"1000\", \"10001\" },\n\t{ \"S\", \"00110\", \"10010\" },{ \"T\", \"00111\", \"10011\" },{ \"U\", \"10011100\", \"10100\" },{ \"V\", \"10011101\", \"10101\" },\n\t{ \"W\", \"000010\", \"10110\" },{ \"X\", \"10010010\", \"10111\" },{ \"Y\", \"10010011\", \"11000\" },{ \"Z\", \"100100000\", \"11001\" },\n    {\"\", \"\", \"\" }\n};\n\n\nint main(void)\n{\n\tchar str1[1000],str2[1000],ch;\n\tint cut_i;\n\t\n\t/*scanf(\"%[A-Z \\'.?,-]\",str);\n\t\thantei(str1);*/\n\tcut_i=0;\n\twhile((ch = getchar())!=EOF){\n\t\tif(ch !='\\n'){\n\t\t\tstr2[cut_i] = ch;\n\t\t\tcut_i++;\n\t\t}\n\t\telse {\n\t\t\tif(cut_i==0){\n\t\t\t\tprintf(\" \");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrncpy(str1,str2,cut_i);\n\t\t\t}\n\n\t\t\thantei(str1,cut_i);\n\t\t\tprintf(\"\\n\");\n\t\t\tcut_i=0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\nvoid hantei(char *str,int len1)\n{\n\tint cut_i,cut_j,count;\n\tchar ans[1000]={\"\"},str2[1000]={\"\"},str3[1000]={\"\"};\n\tchar zero[]={\"0000\"};\n\n\tcount = 0;\n\n\tfor(cut_i=0;cut_i<len1;cut_i++){\n\t\tcut_j=0;\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(!strncmp((str+cut_i),DataBase[cut_j][0],1)){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(str2,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\telse if(count !=0){\n\t\t\t\t\tstrcpy(str2+count,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\t\n\tlen1 = strlen(str2);\n\tcount = 0;\n\n\tif( len1 % 5 != 0){\n\t\tcut_i = 5 - len1 % 5;\n\t\tstrncat(str2,zero,cut_i);\n\t\tlen1 = strlen(str2);\n\t}\n\n\n\tfor(cut_i=0;cut_i<len1;cut_i+=5){\n\t\tcut_j=0;\n\t\tstrncpy(str3,str2+cut_i,5);\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(strcmp(str3,DataBase[cut_j][2]) == 0){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(ans,DataBase[cut_j][0]);\n\t\t\t\t\tcount =strlen(ans);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstrcat(ans,DataBase[cut_j][0]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\tprintf(ans);\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\n#include<cmath>\nusing namespace std;\nint change(string x);\nint main(void){\n    string str,str2;\n    map<char,string> enc;\n    enc[' '] = \"101\";\n    enc['\\''] = \"000000\";\n    enc[','] = \"000011\";\n    enc['-'] = \"10010001\";\n    enc['.'] = \"010001\";\n    enc['?'] = \"000001\";\n    enc['A'] = \"100101\";\n    enc['B'] = \"10011010\";\n    enc['C'] = \"0101\";\n    enc['D'] = \"0001\";\n    enc['E'] = \"110\";\n    enc['F'] = \"01001\";\n    enc['G'] = \"10011011\";\n    enc['H'] = \"010000\";\n    enc['I'] = \"0111\";\n    enc['J'] = \"10011000\";\n    enc['K'] = \"0110\";\n    enc['L'] = \"00100\";\n    enc['M'] = \"10011001\";\n    enc['N'] = \"10011110\";\n    enc['O'] = \"00101\";\n    enc['P'] = \"111\";\n    enc['Q'] = \"10011111\";\n    enc['R'] = \"1000\";\n    enc['S'] = \"00110\";\n    enc['T'] = \"00111\";\n    enc['U'] = \"10011100\";\n    enc['V'] = \"10011101\";\n    enc['W'] = \"000010\";\n    enc['X'] = \"10010010\";\n    enc['Y'] = \"10010011\";\n    enc['Z'] = \"10010000\";\n    string dec = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n    string ans=\"\",sub=\"\";\n    while(getline(cin,str)){\n        for(int i=0;i<str.length();i++){\n            str2+=enc[str[i]];\n        }\n        for(int i=0;i<str2.length()%5;i++){\n            str2+='0';\n        }\n        for(int i=0;i<str2.length()/5;i++){\n            ans+=str2[5*i];\n            ans+=str2[5*i+1];\n            ans+=str2[5*i+2];\n            ans+=str2[5*i+3];\n            ans+=str2[5*i+4];\n            sub+=dec[change(ans)];\n            ans=\"\";\n        }\n        cout<<sub<<endl;\n        sub=str2=str=ans=\"\";\n    }\n    return 0;\n}\nint change(string x){\n    int re=0;\n    for(int i=x.length()-1,j=0;i>=0;i--,j++){\n        if(x[i]=='1')re+=pow(2,j);\n    }\n    return re;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <sstream>\n#include <algorithm>\n#include <math.h>\n#include <map>\n#include <functional>\n#include <iomanip>\n#include <vector>\n#include <queue>\n#include <set>\n#include <typeinfo>\n#define PI 3.14159265359\n#define INF 99999999;\n#define rep(i, n) for(int i=0; i<n; i++)\n#define REP(n) rep(i, n)\n#define EPS 1e-10\ntypedef long long ll;\nusing namespace std;\ntypedef pair<int, int> P;\n\ndouble distanceAB(double xa, double ya, double xb, double yb);\n\n/*\nclass Target\n{\npublic:\n\tvector <string> draw(int n)\n\t{\n\n\t}\n};\n*/\n\n\n\nint main()\n{\n\tstring str;\n\tmap<char, string> tbl;\n\t\n\t  tbl[' '] = \"101\";\n\t  tbl['\\''] = \"000000\";\n\t  tbl[','] = \"000011\";\n\t  tbl['-'] = \"10010001\";\n\t  tbl['.'] = \"010001\";\n\t  tbl['?'] = \"000001\";\n\t  tbl['A'] = \"100101\";\n\t  tbl['B'] = \"10011010\";\n\t  tbl['C'] = \"0101\";\n\t  tbl['D'] = \"0001\";\n\t  tbl['E'] = \"110\";\n\t  tbl['F'] = \"01001\";\n\t  tbl['G'] = \"10011011\";\n\t  tbl['H'] = \"010000\";\n\t  tbl['I'] = \"0111\";\n\t  tbl['J'] = \"10011000\";\n\t  tbl['K'] = \"0110\";\n\t  tbl['L'] = \"00100\";\n\t  tbl['M'] = \"10011001\";\n\t  tbl['N'] = \"10011110\";\n\t  tbl['O'] = \"00101\";\n\t  tbl['P'] = \"111\";\n\t  tbl['Q'] = \"10011111\";\n\t  tbl['R'] = \"1000\";\n\t  tbl['S'] = \"00110\";\n\t  tbl['T'] = \"00111\";\n\t  tbl['U'] = \"10011100\";\n\t  tbl['V'] = \"10011101\";\n\t  tbl['W'] = \"000010\";\n\t  tbl['X'] = \"10010010\";\n\t  tbl['Y'] = \"10010011\";\n\t  tbl['Z'] = \"10010000\";\n\t\n\tmap<string, char> tbl2;\n\t\n\t  tbl2[\"00000\"] = 'A';\n\t  tbl2[\"00001\"] = 'B';\n\t  tbl2[\"00010\"] = 'C';\n\t  tbl2[\"00011\"] = 'D';\n\t  tbl2[\"00100\"] = 'E';\n\t  tbl2[\"00101\"] = 'F';\n\t  tbl2[\"00110\"] = 'G';\n\t  tbl2[\"00111\"] = 'H';\n\t  tbl2[\"01000\"] = 'I';\n\t  tbl2[\"01001\"] = 'J';\n\t  tbl2[\"01010\"] = 'K';\n\t  tbl2[\"01011\"] = 'L';\n\t  tbl2[\"01100\"] = 'M';\n\t  tbl2[\"01101\"] = 'N';\n\t  tbl2[\"01110\"] = 'O';\n\t  tbl2[\"01111\"] = 'P';\n\t  tbl2[\"10000\"] = 'Q';\n\t  tbl2[\"10001\"] = 'R';\n\t  tbl2[\"10010\"] = 'S';\n\t  tbl2[\"10011\"] = 'T';\n\t  tbl2[\"10100\"] = 'U';\n\t  tbl2[\"10101\"] = 'V';\n\t  tbl2[\"10110\"] = 'W';\n\t  tbl2[\"10111\"] = 'X';\n\t  tbl2[\"11000\"] = 'Y';\n\t  tbl2[\"11001\"] = 'Z';\n\t  tbl2[\"11010\"] = ' ';\n\t  tbl2[\"11011\"] = '.';\n\t  tbl2[\"11100\"] = ',';\n\t  tbl2[\"11101\"] = '-';\n\t  tbl2[\"11110\"] = '\\'';\n\t  tbl2[\"11111\"] = '?';\n\t\n\twhile (getline(cin, str))\n\t{\n\t\tstring code = \"\";\n\t\tstring res = \"\";\n\t\t\n\t\tREP(str.length()) code += tbl[str[i]];\n\t\tint len = code.length();\n\t\tREP(5 - len % 5) code += \"0\";\n\t\t\n\t\twhile (code.length() > 0)\n\t\t{\n\t\t\tstring temp = code.substr(0, 5);\n\t\t\tres += tbl2[temp];\n\t\t\tcode = code.substr(5);\n\t\t}\n\t\t\n\t\tcout << res << endl;\n\t}\n\t\n\treturn 0;\n}\n\n\n\ndouble distanceAB(double xa, double ya, double xb, double yb)\n{\n\treturn sqrt((xb-xa)*(xb-xa) + (yb-ya)*(yb-ya));\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdio>\nusing namespace std;\nint main(){\n  string str,cnt;\n  string code[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n  string alph=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string code2[]={\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"};\n  string alph2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  string ans,hm;\n  getline(cin,str);\n  for(int i=0,l=str.size();i<l;i++){\n    for(int j=0;;j++){\n      if(str[i]==alph[j]){\n\tcnt += code[j];\n\tbreak;\n      }\n    }\n  }\n  if(cnt.size()%5!=0) for(int i=0,l=5-cnt.size()%5;i<l;i++)cnt += \"0\";\n  for(int i=0,l=cnt.size();i<l/5;i++){\n    hm=cnt.substr(i*5,5);\n    for(int j=0;;j++){\n      if(hm==code2[j]){\n\tans += alph2[j];\n\tbreak;\n      }\n    }\n  }\n  cout << ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdlib>\n#include <string>\nusing namespace std;\n\nvoid code(const char ch, string& str) {\n    string res;\n    switch (ch) {\n    case ' ':  res = \"101\"; break;\n    case '\\'': res = \"000000\"; break;\n    case ',':  res = \"000011\"; break;\n    case '-':  res = \"10010001\"; break;\n    case '.':  res = \"010001\"; break;\n    case '?':  res = \"000001\"; break;\n    case 'A':  res = \"100101\"; break;\n    case 'B':  res = \"10011010\"; break;\n    case 'C':  res = \"0101\"; break;\n    case 'D':  res = \"0001\"; break;\n    case 'E':  res = \"110\"; break;\n    case 'F':  res = \"01001\"; break;\n    case 'G':  res = \"10011011\"; break;\n    case 'H':  res = \"010000\"; break;\n    case 'I':  res = \"0111\"; break;\n    case 'J':  res = \"10011000\"; break;\n    case 'K':  res = \"0110\"; break;\n    case 'L':  res = \"00100\"; break;\n    case 'M':  res = \"10011001\"; break;\n    case 'N':  res = \"10011110\"; break;\n    case 'O':  res = \"00101\"; break;\n    case 'P':  res = \"111\"; break;\n    case 'Q':  res = \"10011111\"; break;\n    case 'R':  res = \"1000\"; break;\n    case 'S':  res = \"00110\"; break;\n    case 'T':  res = \"00111\"; break;\n    case 'U':  res = \"10011100\"; break;\n    case 'V':  res = \"10011101\"; break;\n    case 'W':  res = \"000010\"; break;\n    case 'X':  res = \"10010010\"; break;\n    case 'Y':  res = \"10010011\"; break;\n    case 'Z':  res = \"10010000\"; break;\n    }\n    str += res;\n}\n\nint strbin2i (const string &s) {\n    int out = 0;\n    for (int i = 0, size = s.size() ; i < size ; ++i ) {\n        out *= 2;\n        out += ((int)s[i] == 49) ? 1 : 0;\n    }\n    return out;\n}\n\nvoid decode(const string code, string& str) {\n    char res;\n    int i = strbin2i(code);\n    if (i < 26) {\n        res = 'A' + i;\n    } else {\n        switch (i) {\n        case 26: res = ' '; break;\n        case 27: res = '.'; break;\n        case 28: res = ','; break;\n        case 29: res = '-'; break;\n        case 30: res = '\\''; break;\n        case 31: res = '?'; break;\n        }\n    }\n    str += res;\n}\n\nint main() {\n    string input;\n    while (getline(cin, input)) {\n        string str;\n        for (string::iterator it = input.begin(); it < input.end(); it++) {\n            code(*it, str);\n        }\n        while ((int) str.length() % 5 == 0) {\n            str += '0';\n        }\n        string output;\n        while (str.length() > 0) {\n            decode(str.substr(0, 5), output);\n            str.erase(0, 5);\n        }\n        cout << output << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint main(void){\n    string str, ret;\n\n    while(getline(cin, str)){\n        ret = \"\";\n        for(int i=0;i<(int)str.size();i++){\n            if(str[i] == ' '){\n                ret += \"101\";\n            }else if(str[i] == '\\''){ //'\n                ret += \"000000\";\n            }else if(str[i] == ','){\n                ret += \"000011\";\n            }else if(str[i] == '_'){\n                ret += \"10010001\";\n            }else if(str[i] == '.'){\n                ret += \"010001\";\n            }else if(str[i] == '?'){\n                ret += \"000001\";\n            }else if(str[i] == 'A'){\n                ret += \"100101\";\n            }else if(str[i] == 'B'){\n                ret += \"10011010\";\n            }else if(str[i] == 'C'){\n                ret += \"0101\";\n            }else if(str[i] == 'D'){\n                ret += \"0001\";\n            }else if(str[i] == 'E'){\n                ret += \"110\";\n            }else if(str[i] == 'F'){\n                ret += \"01001\";\n            }else if(str[i] == 'G'){\n                ret += \"10011011\";\n            }else if(str[i] == 'H'){\n                ret += \"010000\";\n            }else if(str[i] == 'I'){\n                ret += \"0111\";\n            }else if(str[i] == 'J'){\n                ret += \"10011000\";\n            }else if(str[i] == 'K'){\n                ret += \"0110\";\n            }else if(str[i] == 'L'){\n                ret += \"00100\";\n            }else if(str[i] == 'M'){\n                ret += \"10011001\";\n            }else if(str[i] == 'N'){\n                ret += \"10011110\";\n            }else if(str[i] == 'O'){\n                ret += \"00101\";\n            }else if(str[i] == 'P'){\n                ret += \"111\";\n            }else if(str[i] == 'Q'){\n                ret += \"10011111\";\n            }else if(str[i] == 'R'){\n                ret += \"1000\";\n            }else if(str[i] == 'S'){\n                ret += \"00110\";\n            }else if(str[i] == 'T'){\n                ret += \"00111\";\n            }else if(str[i] == 'U'){\n                ret += \"10011100\";\n            }else if(str[i] == 'V'){\n                ret += \"10011101\";\n            }else if(str[i] == 'W'){\n                ret += \"000010\";\n            }else if(str[i] == 'X'){\n                ret += \"10010010\";\n            }else if(str[i] == 'Y'){\n                ret += \"10010011\";\n            }else if(str[i] == 'Z'){\n                ret += \"10010000\";\n            }\n        }\n\n        while(ret.size() % 5 != 0){\n            ret += '0';\n        }\n\n        string patt=\"\";\n        for(int i=0;i<(int)ret.size();i++){\n            patt += ret[i];\n            if(i%5 == 4){\n                if(patt == \"00000\"){\n                    cout << \"A\";\n                }else if(patt == \"00001\"){\n                    cout << \"B\";\n                }else if(patt == \"00010\"){\n                    cout << \"C\";\n                }else if(patt == \"00011\"){\n                    cout << \"D\";\n                }else if(patt == \"00100\"){\n                    cout << \"E\";\n                }else if(patt == \"00101\"){\n                    cout << \"F\";\n                }else if(patt == \"00110\"){\n                    cout << \"G\";\n                }else if(patt == \"00111\"){\n                    cout << \"H\";\n                }else if(patt == \"01000\"){\n                    cout << \"I\";\n                }else if(patt == \"01001\"){\n                    cout << \"J\";\n                }else if(patt == \"01010\"){\n                    cout << \"K\";\n                }else if(patt == \"01011\"){\n                    cout << \"L\";\n                }else if(patt == \"01100\"){\n                    cout << \"M\";\n                }else if(patt == \"01101\"){\n                    cout << \"N\";\n                }else if(patt == \"01110\"){\n                    cout << \"O\";\n                }else if(patt == \"01111\"){\n                    cout << \"P\";\n                }else if(patt == \"10000\"){\n                    cout << \"Q\";\n                }else if(patt == \"10001\"){\n                    cout << \"R\";\n                }else if(patt == \"10010\"){\n                    cout << \"S\";\n                }else if(patt == \"10011\"){\n                    cout << \"T\";\n                }else if(patt == \"10100\"){\n                    cout << \"U\";\n                }else if(patt == \"10101\"){\n                    cout << \"V\";\n                }else if(patt == \"10110\"){\n                    cout << \"W\";\n                }else if(patt == \"10111\"){\n                    cout << \"X\";\n                }else if(patt == \"11000\"){\n                    cout << \"Y\";\n                }else if(patt == \"11001\"){\n                    cout << \"Z\";\n                }else if(patt == \"11010\"){\n                    cout << \" \";\n                }else if(patt == \"11011\"){\n                    cout << \".\";\n                }else if(patt == \"11100\"){\n                    cout << \",\";\n                }else if(patt == \"11101\"){\n                    cout << \"-\";\n                }else if(patt == \"11110\"){\n                    cout << \"'\";\n                }else if(patt == \"11111\"){\n                    cout << \"?\";\n                }\n                patt.clear();\n            }\n        }\n        cout << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<string>\n#include<iostream>\n#include<queue>\n#include<map>\n#include<set>\n#include<complex>\n#include<stack>\n#include<cmath>\n  \nusing namespace std;\n  \n#define reps(i,f,n) for(int i=f;i<int(n);i++)\n#define rep(i,n) reps(i,0,n)\n\n\n\nint main(){\n\tstring cc[333];\n\t\n\tcc[' ']=\"101\";\n\tcc['\\'']=\"000000\";\n\tcc[',']=\"000011\";\n\tcc['-']=\"10010001\";\n\tcc['.']=\"010001\";\n\tcc['?']=\"000001\";\n\t\n\tcc['A']=\"100101\";\n\tcc['B']=\"10011010\";\n\t\n\tcc['C']=\"0101\";\n\tcc['D']=\"0001\";\n\tcc['E']=\"110\";\n\tcc['F']=\"01001\";\n\tcc['G']=\"10011011\";\n\tcc['H']=\"010000\";\n\tcc['I']=\"0111\";\n\tcc['J']=\"10011000\";\n\t\n\tcc['K']=\"0110\";\n\tcc['L']=\"00100\";\n\tcc['M']=\"10011001\";\n\tcc['N']=\"10011110\";\n\tcc['O']=\"00101\";\n\tcc['P']=\"111\";\n\tcc['Q']=\"10011111\";\n\tcc['R']=\"1000\";\n\t\n\tcc['S']=\"00110\";\n\tcc['T']=\"00111\";\n\tcc['U']=\"10011100\";\n\tcc['V']=\"10011101\";\n\tcc['W']=\"000010\";\n\tcc['X']=\"10010010\";\n\tcc['Y']=\"10010011\";\n\tcc['Z']=\"10010000\";\n\t\n\t\n\tmap<int,char> dd;\n\trep(i,26){\n\t\tdd[i]='A'+i;\n\t}\n\tdd[26]=' ';\n\tdd[27]='.';\n\tdd[28]=',';\n\tdd[29]='-';\n\tdd[30]='\\'';\n\tdd[31]='?';\n\t\n\t\n\tstring str=\"\";\n\tstring in;\n\twhile(1){\n\t\tgetline(cin,in);\n\t\tif(cin.eof())break;\n\t\tif(str.size()!=0)str+=\" \";\n\t\tstr += in;\n\t\tbreak;\n\t}\n\t\n\t\n\tstring conv=\"\";\n\trep(i,str.size()){\n\t\tconv += cc[str[i]];\n\t}\n\t\n\twhile(conv.size()%5!=0){\n\t\tconv += \"0\";\n\t}\n\tstring ans;\n\t\n\tfor(int i=0;i<conv.size();i+=5){\n\t\t\n\t\tint num = 0;\n\t\trep(j,5){\n\t\t\tnum += (conv[i+j]-'0')*(1<<(4-j));\n\t\t}\n\t\t\n\t\tans += dd[num];\n\t}\n\t\n\tcout<<ans<<endl;\n\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n\n  char in;\n  string wd = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string bd[32] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\" };\n  string od = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n  string input;\n\n  while( true ) {\n    if ( cin.eof() ) break;\n  getline( cin, input );\n\n  string k = \"\";\n\n  for( int l = 0; l < input.size(); l++ ) {\n    in = input[l];\n    for ( int i = 0; i < 32; i++ ) {\n      if ( in == wd[i] ) {\n\tk += bd[i];\n\t//\tcout << bd[i];\n\tif ( k.size() >= 5 ) {\n\t  int x = 0;\n\t  for ( int j = 0; j < 5; j++ ) {\n\t    x = x * 2 + k[j] - '0';\n\t  }\n\t  cout << od[x];\n\t  string n = \"\";\n\t  for ( int j = 5; j < k.size(); j++ ) {\n\t    n += k[j];\n\t  }\n\t  k = n;\n\t}\n      }\n    }\n\n  }\n  if ( k.size() > 0 ) {\n    k += \"00000\";\n    int x = 0;\n    for ( int j = 0; j < 5; j++ ) {\n      x = x * 2 + k[j] - '0';\n    }\n    cout << od[x];\n  }\n  cout << endl;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\nint ctoi(char ch);\nstring code(char ch);\nchar decode(string substr);\n\nint ctoi(char ch){\n\treturn ch-'0';\n}\nstring code(char ch){\n\tstring str;\n\tswitch(ch){\n\t\tcase ' ': return str=\"101\";\n\t\tcase '\\'': return str=\"000000\";\n\t\tcase ',': return str=\"000011\";\n\t\tcase '-': return str=\"10010001\";\n\t\tcase '.': return str=\"010001\";\n\t\tcase '?': return str=\"000001\";\n\t\t\n\t\tcase 'A': return str=\"100101\";\n\t\tcase 'B': return str=\"10011010\";\n\t\tcase 'C': return str=\"0101\";\n\t\tcase 'D': return str=\"0001\";\n\t\tcase 'E': return str=\"110\";\n\t\tcase 'F': return str=\"01001\";\n\t\tcase 'G': return str=\"10011011\";\n\t\t\n\t\tcase 'H': return str=\"010000\";\n\t\tcase 'I': return str=\"0111\";\n\t\tcase 'J': return str=\"10011000\";\n\t\tcase 'K': return str=\"0110\";\n\t\tcase 'L': return str=\"00100\";\n\t\tcase 'M': return str=\"10011001\";\n\t\tcase 'N': return str=\"10011110\";\n\t\t\n\t\tcase 'O': return str=\"00101\";\n\t\tcase 'P': return str=\"111\";\n\t\tcase 'Q': return str=\"10011111\";\n\t\tcase 'R': return str=\"1000\";\n\t\tcase 'S': return str=\"00110\";\n\t\tcase 'T': return str=\"00111\";\n\t\tcase 'U': return str=\"10011100\";\n\t\t\n\t\tcase 'V': return str=\"10011101\";\n\t\tcase 'W': return str=\"000010\";\n\t\tcase 'X': return str=\"10010010\";\n\t\tcase 'Y': return str=\"10010011\";\n\t\tcase 'Z': return str=\"10010000\";\n\t\t\n\t}\n\treturn str;\n}\nchar decode(string substr){\n\tint strnum=0;\n\tstrnum+=16*ctoi(substr[0]);\n\tstrnum+=8*ctoi(substr[1]);\n\tstrnum+=4*ctoi(substr[2]);\n\tstrnum+=2*ctoi(substr[3]);\n\tstrnum+=1*ctoi(substr[4]);\n\tif(strnum + 'A' <= 'Z' )\n\t\treturn char(strnum + 'A');\n\telse{\n\t\tswitch(strnum){\n\t\t\tcase 'Z'-'A'+1: return ' ';\n\t\t\tcase 'Z'-'A'+2: return '.';\n\t\t\tcase 'Z'-'A'+3: return ',';\n\t\t\tcase 'Z'-'A'+4: return '-';\n\t\t\tcase 'Z'-'A'+5: return '\\'';\n\t\t\tcase 'Z'-'A'+6: return '?';\n\t\t}\n\t}\n\treturn 0;\n}\n\nint main(){\n\tstring str1, str2, str3;\n\tint i, j;\n\twhile(getline(cin,str1)){\n\t\tstr2.erase();\n\t\tstr3.erase();\n\t\tfor(i=0;i<str1.size();i++){\n\t\t\tstr2 += code(str1[i]);\n\t\t}\n\t\tfor(i=str2.size() % 5; i<5;i++){\n\t\t\tstr2 +=\"0\";\n\t\t}\n\t\tfor(i=0;i<str2.size();i+=5){\n\t\t\t//cout<<str2.substr(i, 5)<<\" \";\n\t\t\tstr3+=decode(str2.substr(i, 5));\n\t\t}\n\t\tcout<<str3<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nvector<int> v;\nstring s,n=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",m=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\",l[32]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\nint main(){\n\twhile(getline(cin,s)){\n\t\tv.clear();\n\t\tfor(int i=0;i<s.size();i++){\n\t\t\tint p=0;while(m[p]!=s[i])p++;\n\t\t\tfor(int j=0;j<l[p].size();j++)v.push_back(l[p][j]-'0');\n\t\t}\n\t\tfor(int i=0;i<v.size();i+=5){\n\t\t\tint cnt=0;\n\t\t\tfor(int j=0;j<5;j++)cnt*=2,cnt+=v[i+j];\n\t\t\tcout<<n[cnt];\n\t\t}cout<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<sstream>\n\nstd::string to_bs(int i){\n\tstd::string s = \"\";\n\twhile(i > 0){\n\t\ts = static_cast<char>(i%2+'0') + s;\n\t\ti /= 2;\n\t}\n\twhile(s.length() < 5){\n\t\ts = '0' + s;\n\t}\n\treturn s;\n}\n\nint main(){\n\tstd::map<char, std::string> input;\n\tstd::map<std::string, char> output;\n\tinput[' '] = \"101\";\n\tinput['\\''] = \"000000\";\n\tinput[','] = \"000011\";\n\tinput['-'] = \"10010001\";\n\tinput['.'] = \"010001\";\n\tinput['?'] = \"000001\";\n\tinput['A'] = \"100101\";\n\tinput['B'] = \"10011010\";\n\tinput['C'] = \"0101\";\n\tinput['D'] = \"0001\";\n\tinput['E'] = \"110\";\n\tinput['F'] = \"01001\";\n\tinput['G'] = \"10011011\";\n\tinput['H'] = \"010000\";\n\tinput['I'] = \"0111\";\n\tinput['J'] = \"10011000\";\n\tinput['K'] = \"0110\";\n\tinput['L'] = \"00100\";\n\tinput['M'] = \"10011001\";\n\tinput['N'] = \"10011110\";\n\tinput['O'] = \"00101\";\n\tinput['P'] = \"111\";\n\tinput['Q'] = \"10011111\";\n\tinput['R'] = \"1000\";\n\tinput['S'] = \"00110\";\n\tinput['T'] = \"00111\";\n\tinput['U'] = \"10011100\";\n\tinput['V'] = \"10011101\";\n\tinput['W'] = \"000010\";\n\tinput['X'] = \"10010010\";\n\tinput['Y'] = \"10010011\";\n\tinput['Z'] = \"10010000\";\n\t\n\tfor(int i=0;i<26;i++){\n\t\toutput[to_bs(i)] = 'A' + i;\n\t}\n\toutput[\"11010\"] = ' ';\n\toutput[\"11011\"] = '.';\n\toutput[\"11100\"] = ',';\n\toutput[\"11101\"] = '-';\n\toutput[\"11110\"] = '\\'';\n\toutput[\"11111\"] = '?';\n\n\tstd::string s;\n\twhile(std::getline(std::cin, s), !std::cin.eof()){\n\t\tstd::string bs = \"\";\n\t\tfor(int i=0;i<s.length();i++){\n\t\t\tbs += input[s[i]];\n\t\t}\n\n\t\twhile(bs.length()%5){\n\t\t\tbs += '0';\n\t\t}\n\n\t\tstd::string res = \"\";\n\t\twhile(bs.length()){\n\t\t\tstd::string _s = bs.substr(0, 5);\n\t\t\tres += output[_s];\n\t\t\tbs = bs.substr(5);\n\t\t}\n\n\t\tstd::cout << res << std::endl;\n\n\t\tstd::cin.clear();\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tif(cin.eof()){\n\t\t\tthrow 0;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <cmath>\n#include <algorithm>\n#include <stack>\n#include <queue>\n\nusing namespace std;\n\nusing namespace std;\n\nint main(){\n\n\tchar base[205],middle[900],result[900];\n\tint p,tmp;\n\n\twhile(fgets(base,205,stdin) != 0){\n\n\t\tp = 0;\n\t\tfor(int i = 0; base[i] != '\\0'; i++){\n\t\t\tswitch(base[i]){\n\t\t\tcase ' ':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase '\\'':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase ',':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase '.':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase '?':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'A':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'E':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'G':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'H':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'I':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'J':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'K':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'M':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'N':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'O':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'P':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'Q':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'R':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'S':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'T':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'U':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'V':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'W':\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'X':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\tcase 'Y':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tbreak;\n\t\t\tcase 'Z':\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '1';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tmiddle[p++] = '0';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(p % 5 == 1){\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t}else if(p % 5 == 2){\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t}else if(p % 5 == 3){\n\t\t\tmiddle[p++] = '0';\n\t\t\tmiddle[p++] = '0';\n\t\t}else if(p % 5 == 4){\n\t\t\tmiddle[p++] = '0';\n\t\t}\n\n\t\tmiddle[p] = '\\0';\n\n\t\tp = 0;\n\n\t\tfor(int i = 0; middle[i] != '\\0';i += 5){\n\t\t\ttmp = 16*(middle[i] - '0')+ 8*(middle[i+1] - '0') + 4*(middle[i+2] - '0') + 2*(middle[i+3] - '0')+ (middle[i+4] - '0');\n\t\t\tif(tmp <= 25){\n\t\t\t\tresult[p++] = 'A'+tmp;\n\t\t\t}else{\n\t\t\t\tswitch(tmp){\n\t\t\t\tcase 26:\n\t\t\t\t\tresult[p++] = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 27:\n\t\t\t\t\tresult[p++] = '.';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 28:\n\t\t\t\t\tresult[p++] = ',';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 29:\n\t\t\t\t\tresult[p++] = '-';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 30:\n\t\t\t\t\tresult[p++] = '\\'';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 31:\n\t\t\t\t\tresult[p++] = '?';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif(middle[i+5] == '\\0'){\n\t\t\t\tresult[p] = '\\0';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%s\\n\",result);\n\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<string>\n#include<cstring>\n\nusing namespace std;\n\nvoid code2str(const string& before,string& after);\nvoid char2code(char ch,string& after);\n\n\nint main()\n{\n\tchar ch;\n\tstring code,str;\n\tbool flg=true;\n\tfor(;;)\n\t{\n\t\tfor(;;)\n\t\t{\n\t\t\tch=getchar();\n\t\t\tif(ch==EOF)\n\t\t\t{\n\t\t\t\tflg=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(ch=='\\n')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tchar2code(ch,code);\n\t\t}\n\t\tif(!flg)break;\n\t\tcode2str(code,str);\n\t\tputs(str.c_str());\n\t}\n\treturn 0;\n}\n\nvoid char2code(char ch,string& after)\n{\n\tswitch(ch)\n\t{\n\tcase ' ':\n\t\tafter+=\"101\";\n\t\tbreak;\n\tcase '\\'':\n\t\tafter+=\"000000\";\n\t\tbreak;\n\tcase ',':\n\t\tafter+=\"000011\";\n\t\tbreak;\n\tcase '-':\n\t\tafter+=\"1001001\";\n\t\tbreak;\n\tcase '.':\n\t\tafter+=\"010001\";\n\t\tbreak;\n\tcase '?':\n\t\tafter+=\"000001\";\n\t\tbreak;\n\tcase 'A':\n\t\tafter+=\"100101\";\n\t\tbreak;\n\tcase 'B':\n\t\tafter+=\"10011010\";\n\t\tbreak;\n\tcase 'C':\n\t\tafter+=\"0101\";\n\t\tbreak;\n\tcase 'D':\n\t\tafter+=\"0001\";\n\t\tbreak;\n\tcase 'E':\n\t\tafter+=\"110\";\n\t\tbreak;\n\tcase 'F':\n\t\tafter+=\"01001\";\n\t\tbreak;\n\tcase 'G':\n\t\tafter+=\"10011011\";\n\t\tbreak;\n\tcase 'H':\n\t\tafter+=\"010000\";\n\t\tbreak;\n\tcase 'I':\n\t\tafter+=\"0111\";\n\t\tbreak;\n\tcase 'J':\n\t\tafter+=\"10011000\";\n\t\tbreak;\n\tcase 'K':\n\t\tafter+=\"0110\";\n\t\tbreak;\n\tcase 'L':\n\t\tafter+=\"00100\";\n\t\tbreak;\n\tcase 'M':\n\t\tafter+=\"10011001\";\n\t\tbreak;\n\tcase 'N':\n\t\tafter+=\"10011110\";\n\t\tbreak;\n\tcase 'O':\n\t\tafter+=\"00101\";\n\t\tbreak;\n\tcase 'P':\n\t\tafter+=\"111\";\n\t\tbreak;\n\tcase 'Q':\n\t\tafter+=\"10011111\";\n\t\tbreak;\n\tcase 'R':\n\t\tafter+=\"1000\";\n\t\tbreak;\n\tcase 'S':\n\t\tafter+=\"00110\";\n\t\tbreak;\n\tcase 'T':\n\t\tafter+=\"00111\";\n\t\tbreak;\n\tcase 'U':\n\t\tafter+=\"10011100\";\n\t\tbreak;\n\tcase 'V':\n\t\tafter+=\"10011101\";\n\t\tbreak;\n\tcase 'W':\n\t\tafter+=\"000010\";\n\t\tbreak;\n\tcase 'X':\n\t\tafter+=\"10010010\";\n\t\tbreak;\n\tcase 'Y':\n\t\tafter+=\"10010011\";\n\t\tbreak;\n\tcase 'Z':\n\t\tafter+=\"1001000\";\n\t\tbreak;\n\t}\n}\n\nvoid code2str(const string& before,string& after)\n{\n\tstring code;\n\tfor(int i=0;i<before.size();i+=5)\n\t{\n\t\tcode=\"\";\n\t\tfor(int j=0;j<5;j++)\n\t\t{\n\t\t\tif(i+j<before.size())\n\t\t\t{\n\t\t\t\tcode+=before[i+j];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcode+='0';\n\t\t\t}\n\t\t}\n\t\tif(code==\"00000\")\n\t\t{\n\t\t\tafter+='A';\n\t\t}\n\t\telse if(code==\"00001\")\n\t\t{\n\t\t\tafter+='B';\n\t\t}\n\t\telse if(code==\"00010\")\n\t\t{\n\t\t\tafter+='C';\n\t\t}\n\t\telse if(code==\"00011\")\n\t\t{\n\t\t\tafter+='D';\n\t\t}\n\t\telse if(code==\"00100\")\n\t\t{\n\t\t\tafter+='E';\n\t\t}\n\t\telse if(code==\"00101\")\n\t\t{\n\t\t\tafter+='F';\n\t\t}\n\t\telse if(code==\"00110\")\n\t\t{\n\t\t\tafter+='G';\n\t\t}\n\t\telse if(code==\"00111\")\n\t\t{\n\t\t\tafter+='H';\n\t\t}\n\t\telse if(code==\"01000\")\n\t\t{\n\t\t\tafter+='I';\n\t\t}\n\t\telse if(code==\"01001\")\n\t\t{\n\t\t\tafter+='J';\n\t\t}\n\t\telse if(code==\"01010\")\n\t\t{\n\t\t\tafter+='K';\n\t\t}\n\t\telse if(code==\"01011\")\n\t\t{\n\t\t\tafter+='L';\n\t\t}\n\t\telse if(code==\"01100\")\n\t\t{\n\t\t\tafter+='M';\n\t\t}\n\t\telse if(code==\"01101\")\n\t\t{\n\t\t\tafter+='N';\n\t\t}\n\t\telse if(code==\"01110\")\n\t\t{\n\t\t\tafter+='O';\n\t\t}\n\t\telse if(code==\"01111\")\n\t\t{\n\t\t\tafter+='P';\n\t\t}\n\t\telse if(code==\"10000\")\n\t\t{\n\t\t\tafter+='Q';\n\t\t}\n\t\telse if(code==\"10001\")\n\t\t{\n\t\t\tafter+='R';\n\t\t}\n\t\telse if(code==\"10010\")\n\t\t{\n\t\t\tafter+='S';\n\t\t}\n\t\telse if(code==\"10011\")\n\t\t{\n\t\t\tafter+='T';\n\t\t}\n\t\telse if(code==\"10100\")\n\t\t{\n\t\t\tafter+='U';\n\t\t}\n\t\telse if(code==\"10101\")\n\t\t{\n\t\t\tafter+='V';\n\t\t}\n\t\telse if(code==\"10110\")\n\t\t{\n\t\t\tafter+='W';\n\t\t}\n\t\telse if(code==\"10111\")\n\t\t{\n\t\t\tafter+='X';\n\t\t}\n\t\telse if(code==\"11000\")\n\t\t{\n\t\t\tafter+='Y';\n\t\t}\n\t\telse if(code==\"11001\")\n\t\t{\n\t\t\tafter+='Z';\n\t\t}\n\t\telse if(code==\"11010\")\n\t\t{\n\t\t\tafter+=' ';\n\t\t}\n\t\telse if(code==\"11011\")\n\t\t{\n\t\t\tafter+='.';\n\t\t}\n\t\telse if(code==\"11100\")\n\t\t{\n\t\t\tafter+=',';\n\t\t}\n\t\telse if(code==\"11101\")\n\t\t{\n\t\t\tafter+='-';\n\t\t}\n\t\telse if(code==\"11110\")\n\t\t{\n\t\t\tafter+='\\'';\n\t\t}\n\t\telse if(code==\"11111\")\n\t\t{\n\t\t\tafter+='?';\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define for0(i, n) for(int i = 0; i < (n); i++)\n#define for1(i, n) for(int i = 1; i <= (n);i++)\nusing namespace std;\nmap<char, string>m1; map<string, char>m2;\nsigned main() {\n\t{\n\t\tm1[' '] = \"101\";\n\t\tm1['\\''] = \"000000\";\n\t\tm1[','] = \"000011\";\n\t\tm1['-'] = \"10010001\";\n\t\tm1['.'] = \"010001\";\n\t\tm1['?'] = \"000001\";\n\t\tm1['A'] = \"100101\";\n\t\tm1['B'] = \"10011010\";\n\t\tm1['C'] = \"0101\";\n\t\tm1['D'] = \"0001\";\n\t\tm1['E'] = \"110\";\n\t\tm1['F'] = \"01001\";\n\t\tm1['G'] = \"10011011\";\n\t\tm1['H'] = \"010000\";\n\t\tm1['I'] = \"0111\";\n\t\tm1['J'] = \"10011000\";\n\t\tm1['K'] = \"0110\";\n\t\tm1['L'] = \"00100\";\n\t\tm1['M'] = \"10011001\";\n\t\tm1['N'] = \"10011110\";\n\t\tm1['O'] = \"00101\";\n\t\tm1['P'] = \"111\";\n\t\tm1['Q'] = \"10011111\";\n\t\tm1['R'] = \"1000\";\n\t\tm1['S'] = \"00110\";\n\t\tm1['T'] = \"00111\";\n\t\tm1['U'] = \"10011100\";\n\t\tm1['V'] = \"10011101\";\n\t\tm1['W'] = \"000010\";\n\t\tm1['X'] = \"10010010\";\n\t\tm1['Y'] = \"10010011\";\n\t\tm1['Z'] = \"10010000\";\n\t}\n\t{\n\t\tm2[\"00000\"] = 'A';\n\t\tm2[\"00001\"] = 'B';\n\t\tm2[\"00010\"] = 'C';\n\t\tm2[\"00011\"] = 'D';\n\t\tm2[\"00100\"] = 'E';\n\t\tm2[\"00101\"] = 'F';\n\t\tm2[\"00110\"] = 'G';\n\t\tm2[\"00111\"] = 'H';\n\t\tm2[\"01000\"] = 'I';\n\t\tm2[\"01001\"] = 'J';\n\t\tm2[\"01010\"] = 'K';\n\t\tm2[\"01011\"] = 'L';\n\t\tm2[\"01100\"] = 'M';\n\t\tm2[\"01101\"] = 'N';\n\t\tm2[\"01110\"] = 'O';\n\t\tm2[\"01111\"] = 'P';\n\t\tm2[\"10000\"] = 'Q';\n\t\tm2[\"10001\"] = 'R';\n\t\tm2[\"10010\"] = 'S';\n\t\tm2[\"10011\"] = 'T';\n\t\tm2[\"10100\"] = 'U';\n\t\tm2[\"10101\"] = 'V';\n\t\tm2[\"10110\"] = 'W';\n\t\tm2[\"10111\"] = 'X';\n\t\tm2[\"11000\"] = 'Y';\n\t\tm2[\"11001\"] = 'Z';\n\t\tm2[\"11010\"] = ' ';\n\t\tm2[\"11011\"] = '.';\n\t\tm2[\"11100\"] = ',';\n\t\tm2[\"11101\"] = '-';\n\t\tm2[\"11110\"] = '\\'';\n\t\tm2[\"11111\"] = '?';\n\t}\n\n\tstring s;\n\twhile (getline(cin, s)) {\n\t\tstring s1 = \"\", ans = \"\";\n\t\tfor (char ch : s) s1 += m1[ch];\n\t\twhile (s1.size() % 5 != 0)s1 += '0';\n\t\tfor (int i = 0; i < s1.size(); i += 5) ans += m2[s1.substr(i, 5)];\n\t\tcout << ans << endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "// clang-format off\n#include <bits/stdc++.h>\n#define int long long\n#define main signed main()\n#define loop(i, a, n) for (int i = (a); i < (n); i++)\n#define rep(i, n) loop(i, 0, n)\n#define forever for (;;)\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\n#define prec(n) fixed << setprecision(n)\ntemplate<typename A> using V = std::vector<A>;\ntemplate<typename A> using F = std::function<A>;\ntemplate<typename A, typename B> using P = std::pair<A, B>;\nusing pii = P<int, int>;\nusing vi = V<int>;\nusing vd = V<double>;\nusing vs = V<std::string>;\nusing vpii = V<pii>;\nusing vvi = V<vi>;\nusing vvpii = V<vpii>;\nconstexpr int INF = sizeof(int) == sizeof(long long) ? 1000000000000000000LL : 1000000000;\nconstexpr int MOD = 1000000007;\nconstexpr double PI = acos(-1);\ntemplate<typename A, typename B> bool cmin(A &a, const B &b) { return a > b ? (a = b, true) : false; }\ntemplate<typename A, typename B> bool cmax(A &a, const B &b) { return a < b ? (a = b, true) : false; }\ntemplate<typename T> std::istream &operator>>(std::istream &is, std::vector<T> &v) { for (T &x : v) is >> x; return is; }\ntemplate<typename A, typename B> std::istream &operator>>(std::istream &is, std::pair<A, B> &p) { is >> p.first; is >> p.second; return is; }\nusing namespace std;\n// clang-format on\n\nstring f(char c) {\n  if (c == ' ') return \"101\";\n  if (c == '\\'') return \"000000\";\n  if (c == ',') return \"000011\";\n  if (c == '-') return \"10010001\";\n  if (c == '.') return \"010001\";\n  if (c == '?') return \"000001\";\n  if (c == 'A') return \"100101\";\n  if (c == 'B') return \"10011010\";\n  if (c == 'C') return \"0101\";\n  if (c == 'D') return \"0001\";\n  if (c == 'E') return \"110\";\n  if (c == 'F') return \"01001\";\n  if (c == 'G') return \"10011011\";\n  if (c == 'H') return \"0100000\";\n  if (c == 'I') return \"0111\";\n  if (c == 'J') return \"10011000\";\n  if (c == 'K') return \"0110\";\n  if (c == 'L') return \"00100\";\n  if (c == 'M') return \"10011001\";\n  if (c == 'N') return \"10011110\";\n  if (c == 'O') return \"00101\";\n  if (c == 'P') return \"111\";\n  if (c == 'Q') return \"10011111\";\n  if (c == 'R') return \"1000\";\n  if (c == 'S') return \"00110\";\n  if (c == 'T') return \"00111\";\n  if (c == 'U') return \"10011100\";\n  if (c == 'V') return \"10011101\";\n  if (c == 'W') return \"000010\";\n  if (c == 'X') return \"10010010\";\n  if (c == 'Y') return \"10010011\";\n  if (c == 'Z') return \"10010000\";\n}\n\nchar g(int x) {\n  static string v = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  return v[x];\n}\n\nmain {\n  string s, t;\n  while (getline(cin, t)) s += t + \" \";\n  s.pop_back();\n  string x;\n  for (auto &c : s) x += f(c);\n  x += string((5 - x.size() % 5) % 5, '0');\n  assert(x.size() % 5 == 0);\n  string r;\n  rep(i, x.size() / 5) r += g(stoi(x.substr(i * 5, 5), nullptr, 2));\n  cout << r << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n\tstring T[255];\n\tT[' '] = \"101\";\n\tT['\\''] = \"000000\";\n\tT[','] = \"000011\";\n\tT['-'] = \"10010001\";\n\tT['.'] = \"010001\";\n\tT['?'] = \"000001\";\n\tT['A'] = \"100101\";\n\tT['B'] = \"10011010\";\n\tT['C'] = \"0101\";\n\tT['D'] = \"0001\";\n\tT['E'] = \"110\";\n\tT['F'] = \"01001\";\n\tT['G'] = \"10011011\";\n\tT['H'] = \"010000\";\n\tT['I'] = \"0111\";\n\tT['J'] = \"10011000\";\n\tT['K'] = \"0110\";\n\tT['L'] = \"00100\";\n\tT['M'] = \"10011001\";\n\tT['N'] = \"10011110\";\n\tT['O'] = \"00101\";\n\tT['P'] = \"111\";\n\tT['Q'] = \"10011111\";\n\tT['R'] = \"1000\";\n\tT['S'] = \"00110\";\n\tT['T'] = \"00111\";\n\tT['U'] = \"10011100\";\n\tT['V'] = \"10011101\";\n\tT['W'] = \"000010\";\n\tT['X'] = \"10010010\";\n\tT['Y'] = \"10010011\";\n\tT['Z'] = \"10010000\";\n\n\tstring in;\n\twhile (getline(cin, in)){\n\t\tstring trans = \"\";\n\t\tfor (int i = 0; i < in.size(); i++){\n\t\t\ttrans += T[in[i]];\n\t\t}\n\t\tint add = (trans.size() + 4) / 5 * 5 - trans.size();\n\t\tfor (int i = 0; i < add; i++) trans += '0';\n\t\t\n\t\tint val = 0;\n\t\tfor (int i = 0; i < trans.size(); i++){\n\t\t\tval <<= 1;\n\t\t\tval += trans[i] == '1';\n\t\t\tif ((i + 1) % 5 == 0){\n\t\t\t\tprintf(\"%c\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[val]);\n\t\t\t\tval = 0;\n\t\t\t}\n\t\t}\n\t\tputs(\"\");\n\t}\n\treturn (0);\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    string str;\n    string first=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\",secound=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n    string conversion[32]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\n    \"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\n    \"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n    while(getline(cin,str)){\n        string Midstream;\n        for(int i=0;str[i]!='\\0';i++){\n            for(int j=0;j<33;j++)if(str[i]==first[j])Midstream+=conversion[j];\n        }\n        for(int i=0;i<Midstream.size()%5;i++)Midstream+='0';\n        for(int i=0,point=0;Midstream[i]!='\\0';i++){\n            if(i%5==4){\n                int num=0;\n                for(int j=point,kawa[5]={1,2,4,8,16};j<=i;j++)num+=(Midstream[j]-'0')*kawa[i-j];\n                cout<<secound[num];\n                point=i+1;\n            }\n        }\n        cout<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<map>\n#include<string>\n#include<cstdio>\nusing namespace std;\n\nmap<char, string> dict;\nmap<string, char> tcid;\nvoid init(){\n    dict[' '] = \"101\";\n    dict['\\''] = \"000000\";\n    dict[','] = \"000011\";\n    dict['-'] = \"10010001\";\n    dict['.'] = \"010001\";\n    dict['?'] = \"000001\";\n    dict['A'] = \"100101\";\n    dict['B'] = \"10011010\";\n    dict['C'] = \"0101\";\n    dict['D'] = \"0001\";\n    dict['E'] = \"110\";\n    dict['F'] = \"01001\";\n    dict['G'] = \"10011011\";\n    dict['H'] = \"010000\";\n    dict['I'] = \"0111\";\n    dict['J'] = \"10011000\";\n    dict['K'] = \"0110\";\n    dict['L'] = \"00100\";\n    dict['M'] = \"10011001\";\n    dict['N'] = \"10011110\";\n    dict['O'] = \"00101\";\n    dict['P'] = \"111\";\n    dict['Q'] = \"10011111\";\n    dict['R'] = \"1000\";\n    dict['S'] = \"00110\";\n    dict['T'] = \"00111\";\n    dict['U'] = \"10011100\";\n    dict['V'] = \"10011101\";\n    dict['W'] = \"000010\";\n    dict['X'] = \"10010010\";\n    dict['Y'] = \"10010011\";\n    dict['Z'] = \"10010000\";\n    tcid[\"00000\"] ='A';\n    tcid[\"00001\"] ='B';\n    tcid[\"00010\"] ='C';\n    tcid[\"00011\"] ='D';\n    tcid[\"00100\"] ='E';\n    tcid[\"00101\"] ='F';\n    tcid[\"00110\"] ='G';\n    tcid[\"00111\"] ='H';\n    tcid[\"01000\"] ='I';\n    tcid[\"01001\"] ='J';\n    tcid[\"01010\"] ='K';\n    tcid[\"01011\"] ='L';\n    tcid[\"01100\"] ='M';\n    tcid[\"01101\"] ='N';\n    tcid[\"01110\"] ='O';\n    tcid[\"01111\"] ='P';\n    tcid[\"10000\"] ='Q';\n    tcid[\"10001\"] ='R';\n    tcid[\"10010\"] ='S';\n    tcid[\"10011\"] ='T';\n    tcid[\"10100\"] ='U';\n    tcid[\"10101\"] ='V';\n    tcid[\"10110\"] ='W';\n    tcid[\"10111\"] ='X';\n    tcid[\"11000\"] ='Y';\n    tcid[\"11001\"] ='Z';\n    tcid[\"11010\"] =' ';\n    tcid[\"11011\"] ='.';\n    tcid[\"11100\"] =',';\n    tcid[\"11101\"] ='-';\n    tcid[\"11110\"] ='\\'';\n    tcid[\"11111\"] ='?';\n}\n\nstring solve(string a){\n    string tmp = \"\";\n    string res = \"\";\n    for(int i = 0;i < a.size();i++){\n\ttmp += dict[a[i]];\n    }\n    while(tmp.size()%5)tmp+=\"0\";\n    for(int i = 0;i < tmp.size();i += 5){\n\tstring x = \"\";\n\tfor(int j = 0;j < 5;j++){\n\t    x += tmp[i + j];\n\t}\n\tres += tcid[x];\n    }\n    return res;\n}\n\nstring get_line(){\n    string res = \"\";\n    while(true){\n\tchar t = getchar();\n\tif(t == '\\n')break;\n\tres += t;\n    }\n    return res;\n}\n\nint main(){\n    init();\n    while(cin){\n\tcout << solve(get_line()) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stack>\n#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n#include <string>\n#include <map>\n#include <cmath>\n\n#define rep(x,to) for(int x=0;x<to;x++)\n#define rep2(x,from,to) for(int x=from;x<to;x++)\n\nusing namespace std;\n\n\nint main(void){\nstring ws;\nmap<char,string> aa;\nmap<string,char> bb;\n \n\taa[' ']  = \"101\";\n\taa['\\''] = \"000000\";\n\taa[',']  = \"000011\";\n\taa['-']  = \"10010001\";\n\taa['.']  = \"010001\";\n\taa['?']  = \"000001\";\n\taa['A']  = \"100101\";\n\taa['B']  = \"10011010\";\n\taa['C']  = \"0101\";\n\taa['D']  = \"0001\";\n\taa['E']  = \"110\";\n\taa['F']  = \"01001\";\n\taa['G']  = \"10011011\";\n\taa['H']  = \"010000\";\n\taa['I']  = \"0111\";\n\taa['J']  = \"10011000\";\n\taa['K']  = \"0110\";\n\taa['L']  = \"00100\";\n\taa['M']  = \"10011001\";\n\taa['N']  = \"10011110\";\n\taa['O']  = \"00101\";\n\taa['P']  = \"111\";\n\taa['Q']  = \"10011111\";\n\taa['R']  = \"1000\";\n\taa['S']  = \"00110\";\n\taa['T']  = \"00111\";\n\taa['U']  = \"10011100\";\n\taa['V']  = \"10011101\";\n\taa['W']  = \"000010\";\n\taa['X']  = \"10010010\";\n\taa['Y']  = \"10010011\";\n\taa['Z']  = \"10010000\";\n \n\tbb[\"00000\"]  = 'A';\n\tbb[\"00001\"]  = 'B';\n\tbb[\"00010\"]  = 'C';\n\tbb[\"00011\"]  = 'D';\n\tbb[\"00100\"]  = 'E';\n\tbb[\"00101\"]  = 'F';\n\tbb[\"00110\"]  = 'G';\n\tbb[\"00111\"]  = 'H';\n\tbb[\"01000\"]  = 'I';\n\tbb[\"01001\"]  = 'J';\n\tbb[\"01010\"]  = 'K';\n\tbb[\"01011\"]  = 'L';\n\tbb[\"01100\"]  = 'M';\n\tbb[\"01101\"]  = 'N';\n\tbb[\"01110\"]  = 'O';\n\tbb[\"01111\"]  = 'P';\n\tbb[\"10000\"]  = 'Q';\n\tbb[\"10001\"]  = 'R';\n\tbb[\"10010\"]  = 'S';\n\tbb[\"10011\"]  = 'T';\n\tbb[\"10100\"]  = 'U';\n\tbb[\"10101\"]  = 'V';\n\tbb[\"10110\"]  = 'W';\n\tbb[\"10111\"]  = 'X';\n\tbb[\"11000\"]  = 'Y';\n\tbb[\"11001\"]  = 'Z';\n\tbb[\"11010\"]  = ' ';\n\tbb[\"11011\"]  = '.';\n\tbb[\"11100\"]  = ',';\n\tbb[\"11101\"]  = '-';\n\tbb[\"11110\"]  = '\\'';\n\tbb[\"11111\"]  = '?';\n\t\n\twhile(getline(cin,ws)){\n\n\t\tstring wws=\"\", ans=\"\";\n\t\trep(i, ws.size()) wws += aa[ws[i]];\n\t\twhile(wws.size() % 5 !=0) wws += '0';\n//\t\tcout << wws <<endl;\n\t\tfor(int i=0;i<=wws.size() ;i+=5){\n\t\t\tstring mws = wws.substr(i,5);\n\t\t\tans += bb[mws];\n\t\t}\n\t\tif(cin.eof()) break;\n\t\tcout << ans << endl;\n\t}\n\n\treturn 0;\n\t\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char, string>m1;\nmap<string, char>m2;\nvoid f1() {\n\tm1[' '] = \"101\";\n\tm1['\\''] = \"000000\";\n\tm1[','] = \"000011\";\n\tm1['-'] = \"10010001\";\n\tm1['.'] = \"010001\";\n\tm1['?'] = \"000001\";\n\tm1['A'] = \"100101\";\n\tm1['B'] = \"10011010\";\n\tm1['C'] = \"0101\";\n\tm1['D'] = \"0001\";\n\tm1['E'] = \"110\";\n\tm1['F'] = \"01001\";\n\tm1['G'] = \"10011011\";\n\tm1['H'] = \"010000\";\n\tm1['I'] = \"0111\";\n\tm1['J'] = \"10011000\";\n\tm1['K'] = \"0110\";\n\tm1['L'] = \"00100\";\n\tm1['M'] = \"10011001\";\n\tm1['N'] = \"10011110\";\n\tm1['O'] = \"00101\";\n\tm1['P'] = \"111\";\n\tm1['Q'] = \"10011111\";\n\tm1['R'] = \"1000\";\n\tm1['S'] = \"00100\";\n\tm1['T'] = \"00111\";\n\tm1['U'] = \"10011100\";\n\tm1['V'] = \"10011101\";\n\tm1['W'] = \"000010\";\n\tm1['X'] = \"10010010\";\n\tm1['Y'] = \"10010011\";\n\tm1['Z'] = \"10010000\";\n}\nvoid f2() {\n\tm2[\"00000\"] = 'A';\n\tm2[\"00001\"] = 'B';\n\tm2[\"00010\"] = 'C';\n\tm2[\"00011\"] = 'D';\n\tm2[\"00100\"] = 'E';\n\tm2[\"00101\"] = 'F';\n\tm2[\"00110\"] = 'G';\n\tm2[\"00111\"] = 'H';\n\tm2[\"01000\"] = 'I';\n\tm2[\"01001\"] = 'J';\n\tm2[\"01010\"] = 'K';\n\tm2[\"01011\"] = 'L';\n\tm2[\"01100\"] = 'M';\n\tm2[\"01101\"] = 'N';\n\tm2[\"01110\"] = 'O';\n\tm2[\"01111\"] = 'P';\n\tm2[\"10000\"] = 'Q';\n\tm2[\"10001\"] = 'R';\n\tm2[\"10010\"] = 'S';\n\tm2[\"10011\"] = 'T';\n\tm2[\"10100\"] = 'U';\n\tm2[\"10101\"] = 'V';\n\tm2[\"10110\"] = 'W';\n\tm2[\"10111\"] = 'X';\n\tm2[\"11000\"] = 'Y';\n\tm2[\"11001\"] = 'Z';\n\tm2[\"11010\"] = ' ';\n\tm2[\"11011\"] = '.';\n\tm2[\"11100\"] = ',';\n\tm2[\"11101\"] = '-';\n\tm2[\"11110\"] = '\\'';\n\tm2[\"11111\"] = '?';\n}\nint main() {\n\tstring s, str, ans; f1(); f2();\n\tbool b = false;\n\twhile (getline(cin, s)) {\n\t\tif (b) str += m1[' '];\n\t\tif (str.size() >= 5) {\n\t\t\twhile (str.size() >= 5) {\n\t\t\t\tans += m2[str.substr(0, 5)];\n\t\t\t\tstr.erase(str.begin(), str.begin() + 5);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < s.size(); i++) {\n\t\t\tstr += m1[s[i]];\n\t\t\tif (str.size() >= 5) {\n\t\t\t\twhile (str.size() >= 5) {\n\t\t\t\t\tans += m2[str.substr(0, 5)];\n\t\t\t\t\tstr.erase(str.begin(), str.begin() + 5);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tb = true;\n\t}\n\tif (str.size() > 0) {\n\t\tint n = str.size();\n\t\tfor (int i = 0; i < 5 - n; i++)str += '0';\n\t\tans += m2[str];\n\t}\n\tcout << ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <vector>\n#include <string>\n#include <map>\n#include <queue>\n#include <stack>\n#include <algorithm>\n\n#define rep(i,j) REP((i), 0, (j))\n#define REP(i,j,k) for(int i=(j);(i)<(k);++i)\n#define between(a,x,b) ((a)<=(x)&&(x)<=(b))\nusing namespace std;\n\nstring convert(string str){\n  string res = \"\";\n  map<char, string>s;\n  s[' '] = \"101\";\n  s['\\''] = \"000000\";\n  s[','] = \"000011\";\n  s['-'] = \"10010001\";\n  s['.'] = \"010001\";\n  s['?'] = \"000001\";\n  s['A'] = \"100101\";\n  s['B'] = \"10011010\";\n  s['C'] = \"0101\";\n  s['D'] = \"0001\";\n  s['E'] = \"110\";\n  s['F'] = \"01001\";\n  s['G'] = \"10011011\";\n  s['H'] = \"010000\";\n  s['I'] = \"0111\";\n  s['J'] = \"10011000\";\n  s['K'] = \"0110\";\n  s['L'] = \"00100\";\n  s['M'] = \"10011001\";\n  s['N'] = \"10011110\";\n  s['O'] = \"00101\";\n  s['P'] = \"111\";\n  s['Q'] = \"10011111\";\n  s['R'] = \"1000\";\n  s['S'] = \"00110\";\n  s['T'] = \"00111\";\n  s['U'] = \"10011100\";\n  s['V'] = \"10011101\";\n  s['W'] = \"000010\";\n  s['X'] = \"10010010\";\n  s['Y'] = \"10010011\";\n  s['Z'] = \"10010000\";\n\n  rep(i, str.length()){\n    res += s[str[i]];\n  }\n\n  while(res.size() % 5) res += \"0\";\n \n  return res;\n}\n\nstring reconvert(string str){\n  string res = \"\";\n  map<string, char>s;\n  s[\"00000\"] = 'A';\n  s[\"00001\"] = 'B';\n  s[\"00010\"] = 'C';\n  s[\"00011\"] = 'D';\n  s[\"00100\"] = 'E';\n  s[\"00101\"] = 'F';\n  s[\"00110\"] = 'G';\n  s[\"00111\"] = 'H';\n  s[\"01000\"] = 'I';\n  s[\"01001\"] = 'J';\n  s[\"01010\"] = 'K';\n  s[\"01011\"] = 'L';\n  s[\"01100\"] = 'M';\n  s[\"01101\"] = 'N';\n  s[\"01110\"] = 'O';\n  s[\"01111\"] = 'P';\n  s[\"10000\"] = 'Q';\n  s[\"10001\"] = 'R';\n  s[\"10010\"] = 'S';\n  s[\"10011\"] = 'T';\n  s[\"10100\"] = 'U';\n  s[\"10101\"] = 'V';\n  s[\"10110\"] = 'W';\n  s[\"10111\"] = 'X';\n  s[\"11000\"] = 'Y';\n  s[\"11001\"] = 'Z';\n  s[\"11010\"] = ' ';\n  s[\"11011\"] = '.';\n  s[\"11100\"] = ',';\n  s[\"11101\"] = '-';\n  s[\"11110\"] = '\\'';\n  s[\"11111\"] = '?';\n\n  for(int i = 0; i < str.length(); i += 5){\n    string f; // = string(str[i] + str[i+1] + str[i+2] + str[i+3] + str[i+4]);\n    f = str[i]; f += str[i+1]; f+= str[i+2]; f += str[i+3]; f += str[i+4];\n    res += s[f];\n  }\n  return res;\n}\n\nint main(){\n  string str;\n  while(getline(cin, str)){\n    str = convert(str);\n    str = reconvert(str);\n    cout << str << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <map>\nusing namespace std;\n\nstring change1(string s){\n  map<char, string> p;\n  p[' '] = \"101\";\n  p['\\''] = \"000000\";\n  p[','] = \"000011\";\n  p['-'] = \"10010001\";\n  p['.'] = \"010001\";\n  p['?'] = \"000001\";\n  p['A'] = \"100101\";\n  p['B'] = \"10011010\";\n  p['C'] = \"0101\";\n  p['D'] = \"0001\";\n  p['E'] = \"110\";\n  p['F'] = \"01001\";\n  p['G'] = \"10011011\";\n  p['H'] = \"010000\";\n  p['I'] = \"0111\";\n  p['J'] = \"10011000\";\n  p['K'] = \"0110\";\n  p['L'] = \"00100\";\n  p['M'] = \"10011001\";\n  p['N'] = \"10011110\";\n  p['O'] = \"00101\";\n  p['P'] = \"111\";\n  p['Q'] = \"10011111\";\n  p['R'] = \"1000\";\n  p['S'] = \"00110\";\n  p['T'] = \"00111\";\n  p['U'] = \"10011100\";\n  p['V'] = \"10011101\";\n  p['W'] = \"000010\";\n  p['X'] = \"10010010\";\n  p['Y'] = \"10010011\";\n  p['Z'] = \"10010000\";\n  string res = \"\";\n  for(int i = 0 ; i < s.size() ; i++) res += p[s[i]];\n  while(res.size() % 5 != 0) res += '0';\n  return res;\n}\n\nstring change2(string s){\n  map<string, char> p;\n  p[\"00000\"] = 'A';\n  p[\"00001\"] = 'B';\n  p[\"00010\"] = 'C';\n  p[\"00011\"] = 'D';\n  p[\"00100\"] = 'E';\n  p[\"00101\"] = 'F';\n  p[\"00110\"] = 'G';\n  p[\"00111\"] = 'H';\n  p[\"01000\"] = 'I';\n  p[\"01001\"] = 'J';\n  p[\"01010\"] = 'K';\n  p[\"01011\"] = 'L';\n  p[\"01100\"] = 'M';\n  p[\"01101\"] = 'N';\n  p[\"01110\"] = 'O';\n  p[\"01111\"] = 'P';\n  p[\"10000\"] = 'Q';\n  p[\"10001\"] = 'R';\n  p[\"10010\"] = 'S';\n  p[\"10011\"] = 'T';\n  p[\"10100\"] = 'U';\n  p[\"10101\"] = 'V';\n  p[\"10110\"] = 'W';\n  p[\"10111\"] = 'X';\n  p[\"11000\"] = 'Y';\n  p[\"11001\"] = 'Z';\n  p[\"11010\"] = ' ';\n  p[\"11011\"] = '.';\n  p[\"11100\"] = ',';\n  p[\"11101\"] = '-';\n  p[\"11110\"] = '\\'';\n  p[\"11111\"] = '?';\n  \n  string res = \"\";\n  for(int i = 0 ; i < s.size() ; i+=5) res += p[s.substr(i, 5)];\n  return res;\n}\n\nint main(){\n  string s;\n  while(getline(cin, s)){\n    s = change1(s);\n    s = change2(s);\n    cout << s << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<cmath>\n#include<map>\nusing namespace std;\nint main(){\n\tmap<char , string> change;\n\tchange[' ']  = \"101\";\n\tchange['\\''] = \"000000\";\n\tchange[',']  = \"000011\";\n\tchange['-']  = \"10010001\";\n\tchange['.']  = \"010001\";\n\tchange['?']  = \"000001\";\n\tchange['A']  = \"100101\";\n\tchange['B']  = \"10011010\";\n\tchange['C']  = \"0101\";\n\tchange['D']  = \"0001\";\n\tchange['E']  = \"110\";\n\tchange['F']  = \"01001\";\n\tchange['G']  = \"10011011\";\n\tchange['H']  = \"010000\";\n\tchange['I']  = \"0111\";\n\tchange['J']  = \"10011000\";\n\tchange['K']  = \"0110\";\n\tchange['L']  = \"00100\";\n\tchange['M']  = \"10011001\";\n\tchange['N']  = \"10011110\";\n\tchange['O']  = \"00101\";\n\tchange['P']  = \"111\";\n\tchange['Q']  = \"10011111\";\n\tchange['R']  = \"1000\";\n\tchange['S']  = \"00110\";\n\tchange['T']  = \"00111\";\n\tchange['U']  = \"10011100\";\n\tchange['V']  = \"10011101\";\n\tchange['W']  = \"000010\";\n\tchange['X']  = \"10010010\";\n\tchange['Y']  = \"10010011\";\n\tchange['Z']  = \"10010000\";\n\t\n\tstring str;\n\twhile(getline(cin , str)){\n\t\tstring sum;\n\t\tfor(int i = 0; i < str.size(); i++){\n\t\t\tsum += change[str[i]];\n\t\t}\n\t\tint s = sum.size()%5;\n\t\tif(s != 0){\n\t\t\tfor(int i = 0; i < 5-s; i++)sum += '0';\n\t\t}\n\t\tstring ans;\n\t\tstring change2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\t\tfor(int i = 0; i < sum.size(); i+=5){\n\t\t\tint x=0;\n\t\t\tfor(int j = i+1; j <= i+5; j++){\n\t\t\t\tif(sum[j-1] == 49){\n\t\t\t\t\tx += (j%5==0) ? 1 : pow(2.0,5-(j%5));\n\t\t\t\t}\n\t\t\t}\n\t\t\tans += change2[x];\n\t\t}\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define PB push_back\n#define MP make_pair\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define ALL(a) (a).begin(),(a).end()\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> P;\nconst int INF=1e9;\nconst int MOD=100000;\nstring a[26]={\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\nstring b[26]={\n      \"00000\",\n      \"00001\",\n      \"00010\",\n      \"00011\",\n      \"00100\",\n      \"00101\",\n      \"00110\",\n      \"00111\",\n      \"01000\",\n      \"01001\",\n      \"01010\",\n      \"01011\",\n      \"01100\",\n      \"01101\",\n      \"01110\",\n      \"01111\",\n      \"10000\",\n      \"10001\",\n      \"10010\",\n      \"10011\",\n      \"10100\",\n      \"10101\",\n      \"10110\",\n      \"10111\",\n      \"11000\",\n      \"11001\"\n};\nint main(){\n      string s;\n      while(getline(cin,s)){\n            string t=\"\";\n            REP(i,s.size()){\n                  if(s[i]==' ')t+=\"101\";\n                  else if(s[i]=='\\'')t+=\"000000\";\n                  else if(s[i]==',')t+=\"000011\";\n                  else if(s[i]=='-')t+=\"10010001\";\n                  else if(s[i]=='.')t+=\"010001\";\n                  else{\n                        REP(j,26){\n                              if(s[i]==('A'+j))t+=a[j];\n                        }\n                  }\n            }\n            while(t.size()%5!=0)t+='0';\n            //cout<<t<<endl;\n            string ans=\"\";\n            REP(i,t.size()/5){\n                  s.assign(t,i*5,5);\n                  REP(j,26){\n                        if(s==b[j]){\n                              ans+=('A'+j);\n                        }\n                  }\n                  if(ans.size()==i){\n                        if(s==\"11010\")ans+=' ';\n                        else if(s==\"11011\")ans+='.';\n                        else if(s==\"11100\")ans+=',';\n                        else if(s==\"11101\")ans+='-';\n                        else if(s==\"11110\")ans+='\\'';\n                        else ans+='?';\n                  }\n                  //cout<<s<<endl;\n            }\n            cout<<ans<<endl;\n      }\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <cctype>\n#include <sstream>\n#include <cmath>\n#include <climits>\n#include <set>\n#include <iostream>\n#include <map>\n#include <functional>\n#include <cstdlib>\n#include <numeric>\n#include <queue>\n#include <complex>\n#include <sstream>\n#include <stack>\n\nusing namespace std;\n\n#define reep(i,f,n) for(int i=f; i<int(n); ++i)\n#define rep(i,n) reep(i,0,n)\n\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\ntypedef complex<double> Point;\n\nint main()\n{\n\tmap<char, string> encode;\n\tencode[' '] = \"101\";\n\tencode['\\''] = \"000000\";\n\tencode[','] = \"000011\";\n\tencode['-'] = \"10010001\";\n\tencode['.'] = \"010001\";\n\tencode['?'] = \"000001\";\n\tencode['A'] = \"100101\";\n\tencode['B'] = \"10011010\";\n\tencode['C'] = \"0101\";\n\tencode['D'] = \"0001\";\n\tencode['E'] = \"110\";\n\tencode['F'] = \"01001\";\n\tencode['G'] = \"10011011\";\n\tencode['H'] = \"010000\";\n\tencode['I'] = \"0111\";\n\tencode['J'] = \"10011000\";\n\tencode['K'] = \"0110\";\n\tencode['L'] = \"00100\";\n\tencode['M'] = \"10011001\";\n\tencode['N'] = \"10011110\";\n\tencode['O'] = \"00101\";\n\tencode['P'] = \"111\";\n\tencode['Q'] = \"10011111\";\n\tencode['R'] = \"1000\";\n\tencode['S'] = \"00110\";\n\tencode['T'] = \"00111\";\n\tencode['U'] = \"10011100\";\n\tencode['V'] = \"10011101\";\n\tencode['W'] = \"000010\";\n\tencode['X'] = \"10010010\";\n\tencode['Y'] = \"10010011\";\n\tencode['Z'] = \"10010000\";\n\tconst char* decode = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n\tstring str;\n\twhile(getline(cin, str)){\n\t\tstring secret;\n\t\trep(i, str.size()){\n\t\t\tsecret += encode[str[i]];\n\t\t}\n\t\tif(secret.size()%5 != 0)\n\t\t\tsecret += string(5-secret.size()%5, '0');\n\n\t\tstring answer;\n\t\tfor(int i=0; i<int(secret.size()); i+=5){\n\t\t\tint n = 0;\n\t\t\trep(j, 5) n += (1 << (4-j)) * (secret[i+j] - '0');\n\t\t\tanswer += decode[n];\n\t\t}\n\t\tputs(answer.c_str());\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <map>\nusing namespace std;\nint main(){\n\tmap<char,string> mp;\n\tmap<string,char> mp2;\n\tmp[' '] = \"101\";\n\tmp['\\''] = \"000000\";\n\tmp[','] = \"000011\";\n\tmp['-'] = \"10010001\";\n\tmp['.'] = \"010001\";\n\tmp['?'] = \"000001\";\n\tmp['A'] = \"100101\";\n\tmp['B'] = \"10011010\";\n\tmp['C'] = \"0101\";\n\tmp['D'] = \"0001\";\n\tmp['E'] = \"110\";\n\tmp['F'] = \"01001\";\n\tmp['G'] = \"10011011\";\n\tmp['H'] = \"010000\";\n\tmp['I'] = \"0111\";\n\tmp['J'] = \"10011000\";\n\tmp['K'] = \"0110\";\n\tmp['L'] = \"00100\";\n\tmp['M'] = \"10011001\";\n\tmp['N'] = \"10011110\";\n\tmp['O'] = \"00101\";\n\tmp['P'] = \"111\";\n\tmp['Q'] = \"10011111\";\n\tmp['R'] = \"1000\";\n\tmp['S'] = \"00110\";\n\tmp['T'] = \"00111\";\n\tmp['U'] = \"10011100\";\n\tmp['V'] = \"10011101\";\n\tmp['W'] = \"000010\";\n\tmp['X'] = \"10010010\";\n\tmp['Y'] = \"10010011\";\n\tmp['Z'] = \"10010000\";\n\tmp2[\"00000\"] = 'A';\n\tmp2[\"00001\"] = 'B';\n\tmp2[\"00010\"] = 'C';\n\tmp2[\"00011\"] = 'D';\n\tmp2[\"00100\"] = 'E';\n\tmp2[\"00101\"] = 'F';\n\tmp2[\"00110\"] = 'G';\n\tmp2[\"00111\"] = 'H';\n\tmp2[\"01000\"] = 'I';\n\tmp2[\"01001\"] = 'J';\n\tmp2[\"01010\"] = 'K';\n\tmp2[\"01011\"] = 'L';\n\tmp2[\"01100\"] = 'M';\n\tmp2[\"01101\"] = 'N';\n\tmp2[\"01110\"] = 'O';\n\tmp2[\"01111\"] = 'P';\n\tmp2[\"10000\"] = 'Q';\n\tmp2[\"10001\"] = 'R';\n\tmp2[\"10010\"] = 'S';\n\tmp2[\"10011\"] = 'T';\n\tmp2[\"10100\"] = 'U';\n\tmp2[\"10101\"] = 'V';\n\tmp2[\"10110\"] = 'W';\n\tmp2[\"10111\"] = 'X';\n\tmp2[\"11000\"] = 'Y';\n\tmp2[\"11001\"] = 'Z';\n\tmp2[\"11010\"] = ' ';\n\tmp2[\"11011\"] = '.';\n\tmp2[\"11100\"] = ',';\n\tmp2[\"11101\"] = '-';\n\tmp2[\"11110\"] = '\\'';\n\tmp2[\"11111\"] = '?';\n\tstring s,t;\n\tgetline(cin,s);\n\tfor(int i=0;i<s.size();i++){\n\t\tchar a = s[i];\n\t\tif(i==0) t = mp[a];\n\t\telse t += mp[a];\n\t}\n\tfor(int i=0;i<(5-t.size()%5)%5;i++) t += \"0\";\n\tfor(int i=0;i<t.size()/5;i++) cout << mp2[t.substr(5*i,5)];\n\tcout << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <sstream>\n#include <cassert>\nusing namespace std;\nstatic const double EPS = 1e-5;\ntypedef long long ll;\ntypedef pair<int,int> PI;\n#define rep(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n#define mp make_pair\n#define pb push_back\n\n\nmap<char,string> dic;\n\nmain(){\n\n\n  dic[' ']=\"101\";\n  dic['\\'']=\"000000\";\n  dic[',']=\"000011\";\n  dic['-']=\"10010001\";\n  dic['.']=\"010001\";\n  dic['?']=\"000001\";\n  dic['A']=\"100101\";\n  dic['B']=\"10011010\";\n\t\n  dic['C']=\"0101\";\n  dic['D']=\"0001\";\n  dic['E']=\"110\";\n  dic['F']=\"01001\";\n  dic['G']=\"10011011\";\n  dic['H']=\"010000\";\n  dic['I']=\"0111\";\n  dic['J']=\"10011000\";\n\t\n  dic['K']=\"0110\";\n  dic['L']=\"00100\";\n  dic['M']=\"10011001\";\n  dic['N']=\"10011110\";\n  dic['O']=\"00101\";\n  dic['P']=\"111\";\n  dic['Q']=\"10011111\";\n  dic['R']=\"1000\";\n\t\n  dic['S']=\"00110\";\n  dic['T']=\"00111\";\n  dic['U']=\"10011100\";\n  dic['V']=\"10011101\";\n  dic['W']=\"000010\";\n  dic['X']=\"10010010\";\n  dic['Y']=\"10010011\";\n  dic['Z']=\"10010000\";\n  string str;\n  \n  while(getline(cin,str)){\n    string code;\n    rep(i,str.size()){\n      code+=dic[str[i]];\n    }\n    \n    while(code.size()%5)code+='0';\n\n    for(int i=0;i<code.size();){\n      string dec;\n      rep(j,5)dec+=code[i+j];\n      i+=5;\n      \n      int by=0;\n      //cout<<dec<<endl;\n      for(int j=0;j<5;j++){\n        by=by*2+dec[j]-'0';\n      }\n      if(by<26)cout<<char(by+'A');\n      else{\n        switch(by){\n        case 26:\n          cout<<' ';\n          break;\n        case 27:\n          cout<<'.';\n          break;\n        case 28:\n          cout<<',';\n          break;\n        case 29:\n          cout<<'-';\n          break;\n        case 30:\n          cout<<'\\'';\n          break;\n        case 31:\n          cout<<'?';\n          break;\n        }\n      }\n    }\n    cout<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\n#define rep(i,n) for(ll i=0;i<(ll)(n);i++)\n#define all(a)  (a).begin(),(a).end()\n#define pb push_back\n#define INF 999999999\n\nint main(){\n    string s,x;\n    while(getline(cin,x)){\n//        if(x==\"end\")break;\n        s+=x;s+=\" \";\n    }\n    s=s.substr(0,s.size()-1);\n    string a=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n    string b[]={\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"};\n    string c=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string d[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n    map<string,char> mpb;\n    map<char,string> mpa;\n    rep(i,a.size()){\n        mpb[b[i]]=a[i];\n    }\n    rep(i,c.size()){\n        mpa[c[i]]=d[i];\n    }\n    \n    string str=\"\";\n    rep(i,s.size()){\n        str+=mpa[s[i]];\n    }\n    int len=str.size();\n    str+=string((5-(len%5))%5,'0');\n    \n    string sx=\"\";\n    len=str.size();\n    rep(i,len/5){\n        sx+=mpb[str.substr(5*i,5)];\n    }\n    cout<<sx<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nconst char *TABLE[] = {\n\t\"100101\",\n\t\"10011010\",\n\t\"0101\",\n\t\"0001\",\n\t\"110\",\n\t\"01001\",\n\t\"10011011\",\n\t\"010000\",\n\t\"0111\",\n\t\"10011000\",\n\t\"0110\",\n\t\"00100\",\n\t\"10011001\",\n\t\"10011110\",\n\t\"00101\",\n\t\"111\",\n\t\"10011111\",\n\t\"1000\",\n\t\"00110\",\n\t\"00111\",\n\t\"10011100\",\n\t\"10011101\",\n\t\"000010\",\n\t\"10010010\",\n\t\"10010011\",\n\t\"10010000\",\n\t\"101\",\n\t\"000000\",\n\t\"000011\",\n\t\"10010001\",\n\t\"010001\",\n\t\"010001\"\n};\n\nconst char *load_table(char c){\n\tswitch(c){\n\t\tcase ' ': return TABLE[26];\n\t\tcase '\\'': return TABLE[27];\n\t\tcase ',': return TABLE[28];\n\t\tcase '-': return TABLE[29];\n\t\tcase '.': return TABLE[30];\n\t\tcase '?': return TABLE[31];\n\t\tdefault: return TABLE[c - 'A'];\n\t}\n}\n\nchar bin2c(const string &s){\n\tint c = 0;\n\tfor(int i = 0; i < s.size(); ++i){ c = (c << 1) | (s[i] - '0'); }\n\tswitch(c){\n\t\tcase 26: return ' ';\n\t\tcase 27: return '.';\n\t\tcase 28: return ',';\n\t\tcase 29: return '-';\n\t\tcase 30: return '\\'';\n\t\tcase 31: return '?';\n\t\tdefault: return static_cast<char>(c + 'A');\n\t}\n}\n\nint main(){\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tstring bin;\n\t\tfor(int i = 0; i < s.size(); ++i){\n\t\t\tbin += load_table(s[i]);\n\t\t}\n\t\twhile(bin.size() % 5 != 0){ bin += \"0\"; }\n\t\tfor(int i = 0; i < bin.size(); i += 5){\n\t\t\tcout << bin2c(bin.substr(i, 5));\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) (r).begin(),(r).end()\n#define gsort(st,en) sort((st),(en),greater<int>())\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\nusing vi = vector<int>;\nusing vl = vector<ll>;\nusing dict = map<string,int>;\nusing pii = pair<int,int> ;\n\nconstexpr int imax = ((1<<30)-1)*2+1 ;\nconstexpr int inf = 100000000;\nconstexpr double PI = acos(-1.0) ;\ndouble eps = 1e-10 ;\nconst int dy[] = {-1,0,1,0};\nconst int dx[] = {0,-1,0,1};\n\ninline bool value(int x,int y,int w,int h){\n  return (x >= 0 && x < w && y >= 0 && y < h);\n}\n\ntemplate<typename T>\nvoid Unique(vector<T> &v){\n  sort(all(v));\n  v.erase(unique(all(v)),v.end());\n}\n\ntemplate<typename T>\nT ston(string& str, T n){\n  istringstream sin(str) ;\n  T num ;\n  sin >> num ;\n  return num ;\n}\n\nvoid Ans(bool f){\n  if(f) cout << \"YES\"<<endl;\n  else cout << \"NO\"<<endl;\n}\nmap<char,string> m;\nunsigned int binToUInt(const std::string &str)\n{\n  unsigned int val = 0;\n  for(int i = 0; i < (int)str.size(); ++i) {\n    switch (str[i]) {\n      case '0':\n        val *= 2;\n        break;\n      case '1':\n        val = val * 2 + 1;\n        break;\n    }\n  }\n  return val;\n}\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  m[' '] = \"101\";\n  m['\\''] = \"000000\";\n  m[','] = \"000011\";\n  m['-'] = \"10010001\";\n  m['.'] = \"010001\";\n  m['?'] = \"000001\";\n  m['A'] = \"100101\";\n  m['B'] = \"10011010\";\n  m['C'] = \"0101\";\n  m['D'] = \"0001\";\n  m['E'] = \"110\";\n  m['F'] = \"01001\";\n  m['G'] = \"10011011\";\n  m['H'] = \"010000\";\n  m['I'] = \"0111\";\n  m['J'] = \"10011000\";\n  m['K'] =\"0110\";\n  m['L'] = \"00100\";\n  m['M'] = \"10011001\";\n  m['N'] = \"10011110\";\n  m['O'] = \"00101\";\n  m['P'] = \"111\";\n  m['Q'] = \"10011111\";\n  m['R'] = \"1000\";\n  m['S'] = \"00110\";\n  m['T'] = \"00111\";\n  m['U'] = \"10011100\";\n  m['V'] = \"10011101\";\n  m['W'] = \"000010\";\n  m['X'] = \"10010010\";\n  m['Y'] = \"10010011\";\n  m['Z'] = \"10010000\";\n  string s,encode = \"\",encode2=\"\";\n  vector<string> decode;\n  getline(cin,s);\n  rep(i,s.size()){\n    encode += m[s[i]];\n  }\n  while(encode.size()%5){\n    encode += \"0\";\n  }\n  rep(i,encode.size()){\n    encode2 += encode[i];\n    if((i+1)%5==0){\n      decode.pb(encode2);\n      encode2.clear();\n    }\n  }\n  rep(i,decode.size()){\n    int k = binToUInt(decode[i]);\n    if(k <= 25){\n      decode[i] = 'A'+k;\n    }\n    else{\n      switch(k){\n        case 26:\n          decode[i] = ' ';\n          break;\n        case 27:\n          decode[i] = '.';\n          break;\n        case 28:\n          decode[i] = ',';\n          break;\n        case 29:\n          decode[i] = '-';\n          break;\n        case 30:\n          decode[i] = '\\'';\n          break;\n        case 31:\n          decode[i] = '?';\n          break;\n      }\n    }\n  }\n  rep(i,decode.size()){\n    cout << decode[i];\n  }\n  cout << endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <sstream>\n#include <map>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\nstring mkzero(int len) {\n    char str[80];\n    sprintf(str, \"%0*d\", len, 0);\n    return string(str);\n}\n\nint main() {\n    const char * fromA = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    const char * toA[] = {\n        \"101\",\n        \"000000\",\n        \"000011\",\n        \"10010001\",\n        \"010001\",\n        \"000001\",\n        \"100101\",\n        \"10011010\",\n        \"0101\",\n        \"0001\",\n        \"110\",\n        \"01001\",\n        \"10011011\",\n        \"010000\",\n        \"0111\",\n        \"10011000\",\n        \"0110\",\n        \"00100\",\n        \"10011001\",\n        \"10011110\",\n        \"00101\",\n        \"111\",\n        \"1001111\",\n        \"1000\",\n        \"00110\",\n        \"00111\",\n        \"10011100\",\n        \"10011101\",\n        \"000010\",\n        \"10010010\",\n        \"10010011\",\n        \"10010000\",\n        \"\"\n    };\n\n    const char * fromB[] = {\n        \"00000\",\n        \"00001\",\n        \"00010\",\n        \"00011\",\n        \"00100\",\n        \"00101\",\n        \"00110\",\n        \"00111\",\n        \"01000\",\n        \"01001\",\n        \"01010\",\n        \"01011\",\n        \"01100\",\n        \"01101\",\n        \"01110\",\n        \"01111\",\n        \"10000\",\n        \"10001\",\n        \"10010\",\n        \"10011\",\n        \"10100\",\n        \"10101\",\n        \"10110\",\n        \"10111\",\n        \"11000\",\n        \"11001\",\n        \"11010\",\n        \"11011\",\n        \"11100\",\n        \"11101\",\n        \"11110\",\n        \"11111\",\n        \"\"\n    };\n\n    const char * toB = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n    map<char, string> enc;\n    for(int i = 0, len = strlen(fromA); i < len; i++) {\n        enc.insert(make_pair(fromA[i], string(toA[i])));\n    }\n\n    map<string, char> dec;\n    for(int i = 0, len = strlen(toB); i < len; i++) {\n        dec.insert(make_pair(string(fromB[i]), toB[i]));\n    }\n\n#if 0\n    for(map<char, string>::const_iterator it = enc.begin(); it != enc.end(); ++it) {\n        cerr << it->first << \" -> \" << it->second << endl;\n    }\n\n    for(map<string, char>::const_iterator it = dec.begin(); it != dec.end(); ++it) {\n        cerr << it->first << \" -> \" << it->second << endl;\n    }\n#endif\n\n    for(string line; getline(cin, line); ) {\n        ostringstream ss;\n        for(int i = 0; i < (int)line.length(); i++)\n            ss << enc[line[i]];\n        if(ss.str().size() % 5 > 0) ss << mkzero(5 - ss.str().size() % 5);\n        for(int i = 0; i < (int)ss.str().size() / 5; i++) {\n            cout << dec[ss.str().substr(5*i, 5)];\n        }\n        cout << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char, string>m1;\nmap<string, char>m2;\nvoid f1() {\n\tm1[' '] = \"101\";\n\tm1['\\''] = \"000000\";\n\tm1[','] = \"000011\";\n\tm1['-'] = \"10010001\";\n\tm1['.'] = \"010001\";\n\tm1['?'] = \"000001\";\n\tm1['A'] = \"100101\";\n\tm1['B'] = \"10011010\";\n\tm1['C'] = \"0101\";\n\tm1['D'] = \"0001\";\n\tm1['E'] = \"110\";\n\tm1['F'] = \"01001\";\n\tm1['G'] = \"10011011\";\n\tm1['H'] = \"010000\";\n\tm1['I'] = \"0111\";\n\tm1['J'] = \"10011000\";\n\tm1['K'] = \"0110\";\n\tm1['L'] = \"00100\";\n\tm1['M'] = \"10011001\";\n\tm1['N'] = \"10011110\";\n\tm1['O'] = \"00101\";\n\tm1['P'] = \"111\";\n\tm1['Q'] = \"10011111\";\n\tm1['R'] = \"1000\";\n\tm1['S'] = \"00100\";\n\tm1['T'] = \"00111\";\n\tm1['U'] = \"10011100\";\n\tm1['V'] = \"10011101\";\n\tm1['W'] = \"000010\";\n\tm1['X'] = \"10010010\";\n\tm1['Y'] = \"10010011\";\n\tm1['Z'] = \"10010000\";\n}\nvoid f2() {\n\tm2[\"00000\"] = 'A';\n\tm2[\"00001\"] = 'B';\n\tm2[\"00010\"] = 'C';\n\tm2[\"00011\"] = 'D';\n\tm2[\"00100\"] = 'E';\n\tm2[\"00101\"] = 'F';\n\tm2[\"00110\"] = 'G';\n\tm2[\"00111\"] = 'H';\n\tm2[\"01000\"] = 'I';\n\tm2[\"01001\"] = 'J';\n\tm2[\"01010\"] = 'K';\n\tm2[\"01011\"] = 'L';\n\tm2[\"01100\"] = 'M';\n\tm2[\"01101\"] = 'N';\n\tm2[\"01110\"] = 'O';\n\tm2[\"01111\"] = 'P';\n\tm2[\"10000\"] = 'Q';\n\tm2[\"10001\"] = 'R';\n\tm2[\"10010\"] = 'S';\n\tm2[\"10011\"] = 'T';\n\tm2[\"10100\"] = 'U';\n\tm2[\"10101\"] = 'V';\n\tm2[\"10110\"] = 'W';\n\tm2[\"10111\"] = 'X';\n\tm2[\"11000\"] = 'Y';\n\tm2[\"11001\"] = 'Z';\n\tm2[\"11010\"] = ' ';\n\tm2[\"11011\"] = '.';\n\tm2[\"11100\"] = ',';\n\tm2[\"11101\"] = '-';\n\tm2[\"11110\"] = '\\'';\n\tm2[\"11111\"] = '?';\n}\nint main() {\n\tstring s, str, ans;\n\tbool b = false;\n\twhile (getline(cin, s)) {\n\t\tif (b) str += m1[' '];\n\t\tfor (int i = 0; i < s.size(); i++) {\n\t\t\tstr += m1[s[i]];\n\t\t\tif (str.size() >= 5) {\n\t\t\t\twhile (str.size() >= 5) {\n\t\t\t\t\tans += m2[str.substr(0, 5)];\n\t\t\t\t\tstr.erase(str.begin(), str.begin() + 6);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tb = true;\n\t}\n\tif (str.size() > 0) {\n\t\tint n = str.size();\n\t\tfor (int i = 0; i < 5 - n; i++)str += '0';\n\t\tans += m2[str];\n\t}\n\tcout << ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<climits>\n#include<queue>\n#include<map>\n#include<set>\n#include<vector>\n#include<list>\n#include<stack>\n#include<cstring>\n#include<string>\n#include<cmath>\nusing namespace std;\n#define LATTE 1000000000\n\nint main(){\n\tchar con1[32][9]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\tchar S[102],con2[32];\n\tfor(int i=0;i<26;i++) con2[i] = 'A'+i;\n\tcon2[26]=' '; con2[27]='.'; con2[28]=','; con2[29]='_'; con2[30]='\\'',con2[31]='?';\n\twhile(true){\n\t\tint r,c;\n\t\tchar cons[900]={};\n\t\tfor(int i=0;r=scanf(\"%c\",&S[i]),S[i]!='\\n';i++){\n\t\t\tif(r==EOF) return 0;\n\t\t\tif(S[i]==' ') c = 0;\n\t\t\telse if(S[i]=='\\'') c = 1;\n\t\t\telse if(S[i]==',') c = 2;\n\t\t\telse if(S[i]=='_') c = 3;\n\t\t\telse if(S[i]=='.') c = 4;\n\t\t\telse if(S[i]=='?') c = 5;\n\t\t\telse c = S[i]-'A'+6;\n\t\t\tstrcat(cons,con1[c]);\n\t\t}\n\t\tint len = strlen(cons);\n\t\tfor(int i=(len-1)%5+1;i<5;i++){\n\t\t\tcons[len++]='0'; cons[len]='\\0';\n\t\t}\n\t\tfor(int i=0;i<len;){\n\t\t\tint latte=0;\n\t\t\tfor(int j=0;j<5;i++,j++){\n\t\t\t\t//printf(\"%c\",cons[i]);\n\t\t\t\tlatte = latte<<1;\n\t\t\t\tif(cons[i]=='1') latte += 1;\n\t\t\t}//printf(\" \");\n\t\t\tprintf(\"%c\",con2[latte]);\n\t\t}puts(\"\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <cctype>\n#include <sstream>\n#include <string>\n#include <list>\n#include <vector>\n#include <queue>\n#include <set>\n#include <stack>\n#include <map>\n#include <utility>\n#include <numeric>\n#include <algorithm>\n#include <iterator>\n#include <bitset>\n#include <complex>\n#include <fstream>\n#include <iomanip>\nusing namespace std;\ntypedef long long ll;\nconst double EPS = 1e-9;\ntypedef vector<int> vint;\ntypedef pair<int, int> pint;\n#define rep(i, n) REP(i, 0, n)\n#define ALL(v) v.begin(), v.end()\n#define MSG(a) cout << #a << \" \" << a << endl;\n#define REP(i, x, n) for(int i = x; i < n; i++)\ntemplate<class T> T RoundOff(T a){ return int(a+.5-(a<0)); }\ntemplate<class T, class C> void chmax(T& a, C b){ if(a < b) a = b; }\ntemplate<class T, class C> void chmin(T& a, C b){ if(b < a) a = b; }\ntemplate<class T, class C> pair<T, C> mp(T a, C b){ return make_pair(a, b); }\n\n\nstruct HuffmanCoding\n{\n\tHuffmanCoding()\n\t{\n\t\tinit();\n\t}\n\n\t// êÊIÈgppxÌªz©ç³kÆð\n\tmap<char, string> poplarTable;\n\n\tstring PoplarCompress(string original)\n\t{\n\t\tstring compressString;\n\n\t\tint len = original.size();\n\t\trep(i, len)\n\t\t\tcompressString += poplarTable[original[i]];\n\t\t\n\t\treturn compressString;\n\t}\n\n\t\n\tvoid init()\n\t{\n\t\tpair<char, string> pairs[32] = \n\t\t{\n\t\t\tmp(' ', \"101\"),\n\t\t\tmp('\\'',\"000000\"),\n\t\t\tmp(',', \"000011\"),\n\t\t\tmp('-', \"10010001\"),\n\t\t\tmp('.', \"010001\"),\n\t\t\tmp('?', \"000001\"),\n\t\t\tmp('A', \"100101\"),\n\t\t\tmp('B', \"10011010\"),\n\t\t\tmp('C', \"0101\"),\n\t\t\tmp('D', \"0001\"),\n\t\t\tmp('E', \"110\"),\n\t\t\tmp('F', \"01001\"),\n\t\t\tmp('G', \"10011011\"),\n\t\t\tmp('H', \"010000\"),\n\t\t\tmp('I', \"0111\"),\n\t\t\tmp('J', \"10011000\"),\n\t\t\tmp('K', \"0110\"),\n\t\t\tmp('L', \"00100\"),\n\t\t\tmp('M', \"10011001\"),\n\t\t\tmp('N', \"10011110\"),\n\t\t\tmp('O', \"00101\"),\n\t\t\tmp('P', \"111\"),\n\t\t\tmp('Q', \"10011111\"),\n\t\t\tmp('R', \"1000\"),\n\t\t\tmp('S', \"00110\"),\n\t\t\tmp('T', \"00111\"),\n\t\t\tmp('U', \"10011100\"),\n\t\t\tmp('V', \"10011101\"),\n\t\t\tmp('V', \"000010\"),\n\t\t\tmp('W', \"10010010\"),\n\t\t\tmp('Y', \"10010011\"),\n\t\t\tmp('Z', \"10010000\")\n\t\t};\n\n\n\t\trep(i, 32)\n\t\t\tpoplarTable.insert(map<char, string>::value_type(pairs[i].first, pairs[i].second));\n\t}\n};\n\nmap<string, char> table;\nvoid initializeTable()\n{\n\tpair<string, char> pairs[32] = \n\t{\n\t\tmp(\"00000\", 'A'),\n\t\tmp(\"00001\", 'B'),\n\t\tmp(\"00010\", 'C'),\n\t\tmp(\"00011\", 'D'),\n\t\tmp(\"00100\", 'E'),\n\t\tmp(\"00101\", 'F'),\n\t\tmp(\"00110\", 'G'),\n\t\tmp(\"00111\", 'H'),\n\t\tmp(\"01000\", 'I'),\n\t\tmp(\"01001\", 'J'),\n\t\tmp(\"01010\", 'K'),\n\t\tmp(\"01011\", 'L'),\n\t\tmp(\"01100\", 'M'),\n\t\tmp(\"01101\", 'N'),\n\t\tmp(\"01110\", 'O'),\n\t\tmp(\"01111\", 'P'),\n\t\tmp(\"10000\", 'Q'),\n\t\tmp(\"10001\", 'R'),\n\t\tmp(\"10010\", 'S'),\n\t\tmp(\"10011\", 'T'),\n\t\tmp(\"10100\", 'U'),\n\t\tmp(\"10101\", 'V'),\n\t\tmp(\"10110\", 'W'),\n\t\tmp(\"10111\", 'X'),\n\t\tmp(\"11000\", 'Y'),\n\t\tmp(\"11001\", 'Z'),\n\t\tmp(\"11010\", ' '),\n\t\tmp(\"11011\", '.'),\n\t\tmp(\"11100\", ','),\n\t\tmp(\"11101\", '-'),\n\t\tmp(\"11110\", '\\''),\n\t\tmp(\"11111\", '?')\n\t};\n\n\trep(i, 32)\n\t\ttable.insert(map<string, char>::value_type(pairs[i].first, pairs[i].second));\n}\n\nstring compress(string line)\n{\n\tstring ans;\n\n\tfor(int i = 0; i < line.size(); i += 5)\n\t\tans += table[line.substr(i, 5)];\n\t\n\treturn ans;\n}\n\nint main()\n{\n\tinitializeTable();\n\tstring line;\n\twhile(getline(cin, line))\n\t{\n\t\tHuffmanCoding hc;\n\t\tline = hc.PoplarCompress(line);\n\n\t\twhile(line.size() % 5)\n\t\t\tline += '0';\n\n\t\tcout << compress(line) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define rep(i,a,n) for(int i=a;i<n;i++)\n#define REP(i,n) rep(i,0,n)\n#define ALL(a) a.begin(),a.end()\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef pair<int,int> P;\n\nstring str[32]={\"101\",\n\t\t\t\t\"000000\",\n\t\t\t\t\"000011\",\n\t\t\t\t\"10010001\",\n\t\t\t\t\"010001\",\n\t\t\t\t\"000001\",\n\t\t\t\t\"100101\",\n\t\t\t\t\"10011010\",\n\t\t\t\t\"0101\",\n\t\t\t\t\"0001\",\n\t\t\t\t\"110\",\n\t\t\t\t\"01001\",\n\t\t\t\t\"10011011\",\n\t\t\t\t\"010000\",\n\t\t\t\t\"0111\",\n\t\t\t\t\"10011000\",\n\t\t\t\t\"0110\",\n\t\t\t\t\"00100\",\n\t\t\t\t\"10011001\",\n\t\t\t\t\"10011110\",\n\t\t\t\t\"00101\",\n\t\t\t\t\"111\",\n\t\t\t\t\"10011111\",\n\t\t\t\t\"1000\",\n\t\t\t\t\"00110\",\n\t\t\t\t\"00111\",\n\t\t\t\t\"10011100\",\n\t\t\t\t\"10011101\",\n\t\t\t\t\"000010\",\n\t\t\t\t\"10010010\",\n\t\t\t\t\"10010011\",\n\t\t\t\t\"10010000\"};\nstring bf=\" ',-.?\";\nstring af=\" .,-'?\";\n\nint change_to_10(string s,int from){\n\tint ans=0;\n\trep(i,0,s.size()){\n\t\tans+=(s[i]-'0')*pow(from,s.size()-1-i);\n\t}\n\treturn ans;\n}\n\nsigned main(){\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tstring tmp = \"\", ans = \"\";\n\t\trep(i, 0, s.size()){\n\t\t\tif('A' <= s[i] && s[i] <= 'Z'){\n\t\t\t\ttmp += str[6 + (int)(s[i] - 'A')];\n\t\t\t}else{\n\t\t\t\tint p = bf.find(s[i]);\n\t\t\t\ttmp += str[p];\n\t\t\t}\n\t\t}\n\t\t//cout << tmp <<endl;\n\t\twhile(tmp.size() % 5 != 0){\n\t\t\ttmp += '0';\n\t\t}\n\t\t//cout << tmp <<endl;\n\t\trep(i, 0, tmp.size()/ 5){\n\t\t\tint p = change_to_10(tmp.substr(5 * i, 5), 2);\n\t\t\tif(p < 26){\n\t\t\t\tans += (char)('A' + p);\n\t\t\t}else{\n\t\t\t\tans += af[p - 26];\n\t\t\t}\n\t\t}\n\t\tcout << ans << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\n#include<queue>\n#include<map>\n#include<string>\nusing namespace std;\nchar word[]={' ','\\'',',','-','.','?','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\nchar words[]={' ','.',',','-','\\'','?'};\nstring decord[]={\n    \"101\",\n    \"000000\",\n    \"000011\",\n    \"10010001\",\n    \"010001\",\n    \"000001\",\n    \"100101\",\n    \"10011010\",\n    \"0101\",\n    \"0001\",\n    \"110\",\n    \"01001\",\n    \"10011011\",\n    \"010000\",\n    \"0111\",\n    \"10011000\",\n    \"0110\",\n    \"00100\",\n    \"10011001\",\n    \"10011110\",\n    \"00101\",\n    \"111\",\n    \"10011111\",\n    \"1000\",\n    \"00110\",\n    \"00111\",\n    \"10011100\",\n    \"10011101\",\n    \"000010\",\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n};\nstring encord[]={\n    \"00000\",\n    \"00001\",\n    \"00010\",\n    \"00011\",\n    \"00100\",\n    \"00101\",\n    \"00110\",\n    \"00111\",\n    \"01000\",\n    \"01001\",\n    \"01010\",\n    \"01011\",\n    \"01100\",\n    \"01101\",\n    \"01110\",\n    \"01111\",\n    \"10000\",\n    \"10001\",\n    \"10010\",\n    \"10011\",\n    \"10100\",\n    \"10101\",\n    \"10110\",\n    \"10111\",\n    \"11000\",\n    \"11001\",\n    \"11010\",\n    \"11011\",\n    \"11100\",\n    \"11101\",\n    \"11110\",\n    \"11111\"\n};\nstring checkdecord(char moji){\n    string ans;\n    for(int i=0;i<32;i++){\n        if(moji==word[i]){\n            ans=decord[i];\n        }\n    }\n    return ans;\n}\nint main(){\n    char name[100]={0};\n    while(scanf(\"%[^\\n]\",name)!=EOF){\n        getchar();\n        map<string,char> maps;\n        int k=5;\n        int l;\n        for(int i=0;i<32;i++){\n            k++;\n            if(k>=32){\n                l=k-32;\n                maps[encord[i]] = words[l];\n            }else{\n                maps[encord[i]] = word[k];\n            }\n        }\n        string hoge;\n        //char name[100]={0};\n        //scanf(\"%[^\\n]\",name);\n        //getchar();\n        //if(name[0]=='\\0')break;\n        queue<char> que;\n        //scanf(\"%[^\\n]\",name);\n        for(int i=0;;i++){\n            if(name[i]=='\\0')break;\n            hoge = checkdecord(name[i]);\n            for(int j=0;;j++){\n                if(hoge[j]=='\\0')break;\n                que.push(hoge[j]);\n            }\n        }\n        string encordword,encordstring;\n        for(int i=0;;i++){\n            if(que.empty())break;\n            for(int j=0;j<5;j++){\n                encordword += que.front();\n                que.pop();\n                if(que.empty()){\n                    for(;;){\n                    j++;\n                    encordword +='0';\n                    if(j==4)break;\n                    }\n                }\n            }\n            encordstring += maps[encordword];\n            encordword=\"\";\n        }\n        cout<<encordstring<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector< string > table1(128, string(\"\"));\nvector< char > table2(32, 0);\nvoid set(){\n    table1[65] = string(\"100101\");\n    table1[66] = string(\"10011010\");\n    table1[67] = string(\"0101\");\n    table1[68] = string(\"0001\");\n    table1[69] = string(\"110\");\n    table1[70] = string(\"01001\");\n    table1[71] = string(\"10011011\");\n    table1[72] = string(\"010000\");\n    table1[73] = string(\"0111\");\n    table1[74] = string(\"10011000\");\n    table1[75] = string(\"0110\");\n    table1[76] = string(\"00100\");\n    table1[77] = string(\"10011001\");\n    table1[78] = string(\"10011110\");\n    table1[79] = string(\"00101\");\n    table1[80] = string(\"111\");\n    table1[81] = string(\"10011111\");\n    table1[82] = string(\"1000\");\n    table1[83] = string(\"00110\");\n    table1[84] = string(\"00111\");\n    table1[85] = string(\"10011100\");\n    table1[86] = string(\"000010\");\n    table1[87] = string(\"000010\");\n    table1[88] = string(\"10010010\");\n    table1[89] = string(\"10010011\");\n    table1[90] = string(\"10010000\");\n    table1[32] = string(\"101\");\n    table1[39] = string(\"000000\");\n    table1[44] = string(\"000011\");\n    table1[45] = string(\"10010001\");\n    table1[46] = string(\"010001\");\n    table1[63] = string(\"000001\");\n    for(int i = 0; i < 26; i++){\n        table2[i] = 'A' + i;\n    }\n    table2[26] = ' ';\n    table2[27] = '.';\n    table2[28] = ',';\n    table2[29] = '-';\n    table2[30] = '\\'';\n    table2[31] = '?';\n}\n\nint bToDeci(string& s){\n    int mul = 1, ans = 0;\n    for(string::reverse_iterator it = s.rbegin(); it != s.rend(); it++){\n        ans += (*it - '0') * mul;\n        mul *= 2;\n    }\n    return ans;\n\n}\n\nchar getBlock(string& s, string::iterator& i){\n    string c = \"\";\n    for(int n = 0; n < 5 && i != s.end(); n++, i++){\n        c.append( i, i+1 );\n    }\n    return table2[ bToDeci( c ) ];\n}\n\nint main(){\n    set();\n    string data;\n    while( getline(cin, data) ){\n        string c;\n        c = string(\"\");\n        for(string::iterator it = data.begin(); it != data.end(); it++){\n            c.append( table1[*it] );\n        }\n        string::iterator it = c.begin();\n        while( it != c.end() ){\n            cout << getBlock(c, it);\n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n\n#define rep(i,n) for(int i=0;i<n;i++)\n\nusing namespace std;\n\nvector<string> split(string &str,char delim)\n{\n\tvector<string> res;\n\tsize_t current = 0,found;\n\twhile((found = str.find_first_of(delim,current)) != string::npos)\n\t{\n\t\tres.push_back(string(str,current,found  - current));\n\t\tcurrent = found + 1;\n\t}\n\tres.push_back(string(str,current,str.size() - current));\n\treturn res;\n}\n\n\nint main()\n{\n\tmap<char,string> ID;\n\tID[' '] = \"101\";\n\tID['\\''] = \"000000\";\n\tID[','] = \"000011\";\n\tID['-'] = \"10010001\";\n\tID['.'] = \"010001\";\n\tID['?'] = \"000001\";\n\tID['A'] = \"100101\";\n\tID['B'] = \"10011010\";\n\tID['C'] = \"0101\";\n\tID['D'] = \"0001\";\n\tID['E'] = \"110\";\n\tID['F'] = \"01001\";\n\tID['G'] = \"10011011\";\n\tID['H'] = \"010000\";\n\tID['I'] = \"0111\";\n\tID['J'] = \"10011000\";\n\tID['K'] = \"0110\";\n\tID['L'] = \"00100\";\n\tID['M'] = \"10011001\";\n\tID['N'] = \"10011110\";\n\tID['O'] = \"00101\";\n\tID['P'] = \"111\";\n\tID['Q'] = \"10011111\";\n\tID['R'] = \"1000\";\n\tID['S'] = \"00110\";\n\tID['T'] = \"00111\";\n\tID['U'] = \"10011100\";\n\tID['V'] = \"10011101\";\n\tID['W'] = \"000010\";\n\tID['X'] = \"10010010\";\n\tID['Y'] = \"10010011\";\n\tID['Z'] = \"10010000\";\n\n\tmap<string,string> Id;\n\tId[\"00000\"] = \"A\";\n\tId[\"00001\"] = \"B\";\n\tId[\"00010\"] = \"C\";\n\tId[\"00011\"] = \"D\";\n\tId[\"00100\"] = \"E\";\n\tId[\"00101\"] = \"F\";\n\tId[\"00110\"] = \"G\";\n\tId[\"00111\"] = \"H\";\n\tId[\"01000\"] = \"I\";\n\tId[\"01001\"] = \"J\";\n\tId[\"01010\"] = \"K\";\n\tId[\"01011\"] = \"L\";\n\tId[\"01100\"] = \"M\";\n\tId[\"01101\"] = \"N\";\n\tId[\"01110\"] = \"O\";\n\tId[\"01111\"] = \"P\";\n\tId[\"10000\"] = \"Q\";\n\tId[\"10001\"] = \"R\";\n\tId[\"10010\"] = \"S\";\n\tId[\"10011\"] = \"T\";\n\tId[\"10100\"] = \"U\";\n\tId[\"10101\"] = \"V\";\n\tId[\"10110\"] = \"W\";\n\tId[\"10111\"] = \"X\";\n\tId[\"11000\"] = \"Y\";\n\tId[\"11001\"] = \"Z\";\n\tId[\"11010\"] = \" \";\n\tId[\"11011\"] = \".\";\n\tId[\"11100\"] = \",\";\n\tId[\"11101\"] = \"-\";\n\tId[\"11110\"] = \"'\";\n\tId[\"11111\"] = \"?\";\n\n\tstring s;\n\tstring str = \"\";\n\twhile(getline(cin,s))\n\t{\n\t\tif(cin.eof()) break;\n\t\trep(i,s.size())\n\t\t{\n\t\t\tstr += ID[s[i]];\n\t\t}\n\n\t\twhile(str.length() % 5 != 0)\n\t\t{\n\t\t\tstr += \"0\";\n\t\t}\n\n\t\tstring ans = \"\";\n\t\twhile(str.length())\n\t\t{\n\t\t\tstring temp = str.substr(0,5);\n\t\t\tans += Id[temp];\n\t\t\tstr = str.substr(5);\n\t\t}\n\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\nusing namespace std;\n\nconst char w[6] = {' ', '\\'', ',', '-', '.', '?'};\nconst char v[6] = {' ', '.', ',', '-', '\\'', '?'};\nconst char *enc1[6] = {\"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\"};\nconst char *enc2[26] = {\"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\"};\n\nvoid decode(string &buf) {\n  int t;\n  t = 0;\n  for (int i=0; i<5; i++) {\n    t <<= 1;\n    t += buf[i] - '0';\n  }\n  if (t < 26) printf(\"%c\", 'A'+t);\n  else printf(\"%c\", v[t-26]);\n}\n\nint main() {\n  int t;\n  char c;\n  string buf;\n\n  while ((c = getchar()) != EOF) {\n    if (c>='A' && c<='Z') {\n      buf += enc2[c-'A'];\n    } else {\n      for (int i=0; i<6; i++) {\n        if (c == w[i]) {\n          buf += enc1[i];\n          break;\n        }\n      }\n    }\n    while (buf.length() >= 5) {\n      decode(buf);\n      buf = buf.substr(5);\n    }\n  }\n  t = buf.length();\n  if (t && t < 5) {\n    for (; t<=5; ++t) {\n      buf += \"0\";\n    }\n    decode(buf);\n  }\n  printf(\"\\n\");\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid hantei(char *str);\n\nchar DataBase[][3][80] =\n\t{\n\t/* [文字] ,[符号＿変換前] ,[符号＿変換後] */\n\t{ \" \", \"101\", \"11010\" },{ \"\\'\", \"000000\", \"11110\" },{ \",\", \"000011\", \"11100\" },{ \"-\", \"10010001\", \"11101\" },\n\t{ \".\", \"010001\", \"11011\" },{ \"?\", \"000001\", \"11111\" },{ \"A\", \"100101\", \"00000\" },{ \"B\", \"10011010\", \"00001\" },\n    { \"C\", \"0101\", \"00010\" },{ \"D\", \"0001\", \"00011\" },{ \"E\", \"110\", \"00100\" },{ \"F\", \"01001\", \"00101\" },\n\t{ \"G\", \"10011011\", \"00110\" },{ \"H\", \"010000\", \"00111\" },{ \"I\", \"0111\", \"01000\" },{ \"J\", \"10011000\", \"01001\" },\n\t{ \"K\", \"0110\", \"01010\" },{ \"L\", \"00100\", \"01011\" },{ \"M\", \"10011001\", \"01100\" },{ \"N\", \"10011110\", \"01101\" },\n\t{ \"O\", \"00101\", \"01110\" },{ \"P\", \"111\", \"01111\" },{ \"Q\", \"10011111\", \"10000\" },{ \"R\", \"1000\", \"10001\" },\n\t{ \"S\", \"00110\", \"10010\" },{ \"T\", \"00111\", \"10011\" },{ \"U\", \"10011100\", \"10100\" },{ \"V\", \"10011101\", \"10101\" },\n\t{ \"W\", \"000010\", \"10110\" },{ \"X\", \"10010010\", \"10111\" },{ \"Y\", \"10010011\", \"11000\" },{ \"Z\", \"100100000\", \"11001\" },\n    {\"\", \"\", \"\" }\n};\n\n\nint main(void)\n{\n\tchar str1[1000],str2[1000],ch;\n\tint cut_i;\n\t\n\t/*scanf(\"%[A-Z \\'.?,-]\",str);\n\t\thantei(str1);*/\n\tcut_i=0;\n\twhile((ch = getchar())!=EOF){\n\t\tif(ch !='\\n'){\n\t\t\tstr2[cut_i] = ch;\n\t\t\tcut_i++;\n\t\t}\n\t\telse {\n\t\t\tif(cut_i==0){\n\t\t\t\tstr1[cut_i] =' ';\n\t\t\t\tcut_i++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrncpy(str1,str2,cut_i);\n\t\t\t}\n\t\t\tstr1[cut_i]='\\0';\n\t\t\thantei(str1);\n\t\t\tprintf(\"\\n\");\n\t\t\tcut_i=0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\nvoid hantei(char *str)\n{\n\tint len1,cut_i,cut_j,count;\n\tchar ans[1000]={\"\"},str2[1000]={\"\"},str3[1000]={\"\"};\n\tchar zero[]={\"0000\"};\n\n\tlen1 = strlen(str);\n\tcount = 0;\n\n\tfor(cut_i=0;cut_i<len1;cut_i++){\n\t\tcut_j=0;\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(!strncmp((str+cut_i),DataBase[cut_j][0],1)){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(str2,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\telse if(count !=0){\n\t\t\t\t\tstrcpy(str2+count,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\t\n\tlen1 = strlen(str2);\n\tcount = 0;\n\n\tif( len1 % 5 != 0){\n\t\tcut_i = 5 - len1 % 5;\n\t\tstrncat(str2,zero,cut_i);\n\t\tlen1 = strlen(str2);\n\t}\n\n\n\tfor(cut_i=0;cut_i<len1;cut_i+=5){\n\t\tcut_j=0;\n\t\tstrncpy(str3,str2+cut_i,5);\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(strcmp(str3,DataBase[cut_j][2]) == 0){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(ans,DataBase[cut_j][0]);\n\t\t\t\t\tcount =strlen(ans);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstrcat(ans,DataBase[cut_j][0]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\tprintf(ans);\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include \"bits/stdc++.h\"\nusing namespace std;\n\n//#define int long long\n#define DBG 1\n#define dump(o) if(DBG){cerr<<#o<<\" \"<<o<<endl;}\n#define dumpc(o) if(DBG){cerr<<#o; for(auto &e:(o))cerr<<\" \"<<e;cerr<<endl;}\n#define rep(i,a,b) for(int i=(a);i<(b);i++)\n#define rrep(i,a,b) for(int i=(b)-1;i>=(a);i--)\n#define each(it,c) for(auto it=(c).begin();it!=(c).end();it++)\n#define all(c) c.begin(),c.end()\nconst int INF = sizeof(int) == sizeof(long long) ? 0x3f3f3f3f3f3f3f3fLL : 0x3f3f3f3f;\nconst int MOD = (int)(1e9 + 7);\nconst double EPS = 1e-10;\nint binstring_to_int(string s) {\n\tint x = 1;\n\tint res = 0;\n\trrep(i, 0, s.size()) {\n\t\tif (s[i] == '1')res |= x;\n\t\tx <<= 1;\n\t}\n\t\n\treturn res;\n}\nchar crypt(string s) {\n\tint x=binstring_to_int(s);\n\tif (x == 26)return ' ';\n\telse if (x == 27)return '.';\n\telse if (x == 28)return ',';\n\telse if (x == 29)return '-';\n\telse if (x == 30)return '\\'';\n\telse if (x == 31)return '?';\n\telse {\n\t\treturn 'A' + (char)x;\n\t}\n}\nsigned main() {\n\tmap<char, string>m;\n\tm[' '] = \"101\";\n\tm['\\''] = \"000000\";\n\tm[','] = \"000011\";\n\tm['-'] = \"10010001\";\n\tm['.'] = \"010001\";\n\tm['?'] = \"000001\";\n\tm['A'] = \"100101\";\n\tm['B'] = \"10011010\";\n\tm['C'] = \"0101\";\n\tm['D'] = \"0001\";\n\tm['E'] = \"110\";\n\tm['F'] = \"01001\";\n\tm['G'] = \"10011011\";\n\tm['H'] = \"010000\";\n\tm['I'] = \"0111\";\n\tm['J'] = \"10011000\";\n\tm['K'] = \"0110\";\n\tm['L'] = \"00100\";\n\tm['M'] = \"10011001\";\n\tm['N'] = \"10011110\";\n\tm['O'] = \"00101\";\n\tm['P'] = \"111\";\n\tm['Q'] = \"10011111\";\n\tm['R'] = \"1000\";\n\tm['S'] = \"00110\";\n\tm['T'] = \"00111\";\n\tm['U'] = \"10011100\";\n\tm['V'] = \"10011101\";\n\tm['W'] = \"000010\";\n\tm['X'] = \"10010010\";\n\tm['Y'] = \"10010011\";\n\tm['Z'] = \"10010000\";\n\n\tstring s, ans;\n\tgetline(cin, s);\n\n\trep(i, 0, s.size()) {\n\t\tans += m[s[i]];\n\t}\n\tstring cry;\n\tstring t;\n\trep(i, 0, ans.size()) {\n\t\tt.push_back(ans[i]);\n\t\tif (t.size() == 5) {\n\t\t\tcry += crypt(t);\n\t\t\tt.clear();\n\t\t}\n\t}\n\twhile (t.size() < 5)t = t + \"0\";\n\tcry += crypt(t);\n\n\tcout << cry << endl;\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <ctime>\n#include <iostream>\n#include <algorithm>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <utility>\n#include <cctype>\nusing namespace std;\n\n#define rep(i,n) for(int (i)=0; (i)<(int)(n); ++(i))\n#define foreach(c,i) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)\n\nmap<char,string> m;\nmap<string,char> mm;\n\ninline char i2c(int i) { return '0'+i; }\n\nstring i2bs(int a) {\n  string ret;\n  while (a > 0) {\n    ret += i2c(a % 2);\n    a /= 2;\n  }\n  reverse(ret.begin(), ret.end());\n  while (ret.size() < 5) ret = '0' + ret;\n  return ret;\n}\n\nvoid init() {\n  const string s[] = {\n    \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\",\n    \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\",\n    \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\",\n    \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\",\n    \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\",\n    \"10010000\"\n  };\n  const char c[] = { ' ', '\\'', ',', '-', '.', '?' };\n  const char cc[] = { ' ', '.', ',', '-', '\\'', '?' };\n  const int sn = sizeof(s) / sizeof(string);\n  const int cn = sizeof(c) / sizeof(char);\n  rep(i,sn) {\n    if(i<cn) m.insert(make_pair(c[i],s[i]));\n    else m.insert(make_pair('A'+(i-cn),s[i]));\n\n    if(i<26) mm.insert(make_pair(i2bs(i),'A'+i));\n    else mm.insert(make_pair(i2bs(i),cc[i-26]));\n  }\n}\n\nint main() {\n  init();\n  string in;\n  while(getline(cin,in)) {\n    string tmp;\n    rep(i,in.size()) tmp+=m[in[i]];\n    while(tmp.size()%5!=0) tmp+='0';\n    string out;\n    for(int i=0;i<tmp.size();i+=5) {\n      //cout << tmp.substr(i,5) << \" \";\n      out+=mm[tmp.substr(i,5)];\n    } //puts(\"\");\n    cout<<out<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\nusing namespace std;\nint stoi(string s){\n\tint c = 0,a = 16;\n\tfor(int i = 0;i < s.length();++i){\n\t\tc += a * (int)(s[i] - '0');\n\t\ta /= 2;\n\t}\n\treturn c;\n}\nint main(){\n\tmap<char,string> dic;\n\tdic[' '] = \"101\";\n\tdic['\\''] = \"000000\";\n\tdic[','] = \"000011\";\n\tdic['-'] = \"10010001\";\n\tdic['.'] = \"010001\";\n\tdic['?'] = \"000001\";\n\tdic['A'] = \"100101\";\n\tdic['B'] = \"10011010\";\n\tdic['C'] = \"0101\";\n\tdic['D'] = \"0001\";\n\tdic['E'] = \"110\";\n\tdic['F'] = \"01001\";\n\tdic['G'] = \"10011011\";\n\tdic['H'] = \"010000\";\n\tdic['I'] = \"0111\";\n\tdic['J'] = \"10011000\";\n\tdic['K'] = \"0110\";\n\tdic['L'] = \"00100\";\n\tdic['M'] = \"10011001\";\n\tdic['N'] = \"10011110\";\n\tdic['O'] = \"00101\";\n\tdic['P'] = \"111\";\n\tdic['Q'] = \"10011111\";\n\tdic['R'] = \"1000\";\n\tdic['S'] = \"00110\";\n\tdic['T'] = \"00111\";\n\tdic['U'] = \"10011100\";\n\tdic['V'] = \"10011101\";\n\tdic['W'] = \"000010\";\n\tdic['X'] = \"10010010\";\n\tdic['Y'] = \"10010011\";\n\tdic['Z'] = \"10010000\";\n\tchar dic2[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\tstring str;\n\tint a;\n\twhile(getline(cin,str)){\n\t\tstring s,s1;\n\t\ts = s1 = \"\";\n\t\tfor(int i = 0;i < str.length();++i){\n\t\t\ts += dic[str[i]];\n\t\t}\n\t\tif(s.length() % 5 != 0) {\n\t\t\ta = 5 - (s.length() % 5);\n\t\t\tfor(int i = 0;i < a;++i){\n\t\t\t\ts += '0';\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0;i < s.length();i += 5){\n\t\t\ts1 += dic2[stoi(s.substr(i,5))];\n\t\t}\n\t\tcout << s1 << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <sstream>\n#include <map>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\nstring mkzero(int len) {\n    char str[80];\n    sprintf(str, \"%0*d\", len, 0);\n    return string(str);\n}\n\nint main() {\n    const char * fromA = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    const char * toA[] = {\n        \"101\",\n        \"000000\",\n        \"000011\",\n        \"10010001\",\n        \"010001\",\n        \"000001\",\n        \"100101\",\n        \"10011010\",\n        \"0101\",\n        \"0001\",\n        \"110\",\n        \"01001\",\n        \"10011011\",\n        \"010000\",\n        \"0111\",\n        \"10011000\",\n        \"0110\",\n        \"00100\",\n        \"10011001\",\n        \"10011110\",\n        \"00101\",\n        \"111\",\n        \"10011111\",\n        \"1000\",\n        \"00110\",\n        \"00111\",\n        \"10011100\",\n        \"10011101\",\n        \"000010\",\n        \"10010010\",\n        \"10010011\",\n        \"10010000\",\n        \"\"\n    };\n\n    const char * fromB[] = {\n        \"00000\",\n        \"00001\",\n        \"00010\",\n        \"00011\",\n        \"00100\",\n        \"00101\",\n        \"00110\",\n        \"00111\",\n        \"01000\",\n        \"01001\",\n        \"01010\",\n        \"01011\",\n        \"01100\",\n        \"01101\",\n        \"01110\",\n        \"01111\",\n        \"10000\",\n        \"10001\",\n        \"10010\",\n        \"10011\",\n        \"10100\",\n        \"10101\",\n        \"10110\",\n        \"10111\",\n        \"11000\",\n        \"11001\",\n        \"11010\",\n        \"11011\",\n        \"11100\",\n        \"11101\",\n        \"11110\",\n        \"11111\",\n        \"\"\n    };\n\n    const char * toB = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n    map<char, string> enc;\n    for(int i = 0, len = strlen(fromA); i < len; i++) {\n        enc.insert(make_pair(fromA[i], string(toA[i])));\n    }\n\n    map<string, char> dec;\n    for(int i = 0, len = strlen(toB); i < len; i++) {\n        dec.insert(make_pair(string(fromB[i]), toB[i]));\n    }\n\n#if 0\n    for(map<char, string>::const_iterator it = enc.begin(); it != enc.end(); ++it) {\n        cerr << it->first << \" -> \" << it->second << endl;\n    }\n\n    for(map<string, char>::const_iterator it = dec.begin(); it != dec.end(); ++it) {\n        cerr << it->first << \" -> \" << it->second << endl;\n    }\n#endif\n\n    for(string line; getline(cin, line); ) {\n        ostringstream ss;\n        for(int i = 0; i < (int)line.length(); i++)\n            ss << enc[line[i]];\n        if(ss.str().size() % 5 > 0) ss << mkzero(5 - ss.str().size() % 5);\n        for(int i = 0; i < (int)ss.str().size() / 5; i++) {\n            cout << dec[ss.str().substr(5*i, 5)];\n        }\n        cout << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <stack>\nusing namespace std;\n\nint main() {\n\tchar c[1000],st[8010],d[32][9]={\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\t\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\n\t\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\"};\n\tint cn[256],i,j,k,p,n,a[6]={32,46,44,45,39,63};\n    for (i=0;i<26;i++) cn[65+i]=i;\n\tcn[32]=26; cn[39]=27; cn[44]=28; cn[45]=29; cn[46]=30; cn[63]=31;\n\twhile(gets(c)!=NULL) {\n\t\tp=0;\n\t\tfor (i=0;i<strlen(c);i++) for (j=0;j<strlen(d[cn[(int)c[i]]]);j++) st[p++]=d[cn[(int)c[i]]][j];\n\t\tfor (p;p % 5!=0;p++) st[p]='0';\n\t\tfor (i=0;i<p;i+=5) {\n         for (j=16,n=0,k=0;k<5;j/=2,k++) n+=j*(st[i+k]-'0');\n\t\t if (n>=0 && n<=25) cout << (char)(65+n) ;\n\t\t else  cout << (char)(a[n-26]);\n\t\t}\n\t\tcout << endl;\n\t}\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nchar c1[32] = {' ','\\'',',','-','.','?','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\nstring s1[32] = {\"101\", \"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\n\t\t\t\t \"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\t\t\t\t \"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n\t\t\t\t \"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\nstring s2[32] = {\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \n\t\t\t\t \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \n\t\t\t\t \"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \n\t\t\t\t \"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"};\nchar c2[32] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z', ' ', '.',',','-','\\'','?'};\n\nvoid solve()\n{\n\tstring s;\n\twhile(getline(cin, s))\n\t{\n\t\tstring binary;\n\t\tfor(int i = 0; i < s.size(); ++i)\n\t\t{\n\t\t\tfor(int j = 0; j < 32; ++j)\n\t\t\t{\n\t\t\t\tif(s[i] == c1[j])\n\t\t\t\t{\n\t\t\t\t\tbinary += s1[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twhile(binary.size() % 5)\n\t\t{\n\t\t\tbinary += '0';\n\t\t}\n\t\t\n\t\tstring ans;\n\t\tfor(int i = 0; i < binary.size(); i += 5)\n\t\t{\n\t\t\tstring temp;\n\t\t\tfor(int j = 0; j < 5; ++j)\n\t\t\t{\n\t\t\t\ttemp += binary[i + j];\n\t\t\t}\n\t\t\tfor(int j = 0; j < 32; ++j)\n\t\t\t{\n\t\t\t\tif(temp == s2[j])\n\t\t\t\t{\n\t\t\t\t\tans += c2[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcout << ans << endl;\n\t}\n}\n\nint main()\n{\n\tsolve();\n\treturn(0);\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include \"bits/stdc++.h\"\nusing namespace std;\n\n//#define int long long\n#define DBG 1\n#define dump(o) if(DBG){cerr<<#o<<\" \"<<o<<endl;}\n#define dumpc(o) if(DBG){cerr<<#o; for(auto &e:(o))cerr<<\" \"<<e;cerr<<endl;}\n#define rep(i,a,b) for(int i=(a);i<(b);i++)\n#define rrep(i,a,b) for(int i=(b)-1;i>=(a);i--)\n#define each(it,c) for(auto it=(c).begin();it!=(c).end();it++)\n#define all(c) c.begin(),c.end()\nconst int INF = sizeof(int) == sizeof(long long) ? 0x3f3f3f3f3f3f3f3fLL : 0x3f3f3f3f;\nconst int MOD = (int)(1e9 + 7);\nconst double EPS = 1e-10;\nint binstring_to_int(string s) {\n\tint x = 1;\n\tint res = 0;\n\trrep(i, 0, s.size()) {\n\t\tif (s[i] == '1')res |= x;\n\t\tx <<= 1;\n\t}\n\n\treturn res;\n}\nchar crypt(string s) {\n\tint x = binstring_to_int(s);\n\tif (x == 26)return ' ';\n\telse if (x == 27)return '.';\n\telse if (x == 28)return ',';\n\telse if (x == 29)return '-';\n\telse if (x == 30)return '\\'';\n\telse if (x == 31)return '?';\n\telse {\n\t\treturn 'A' + (char)x;\n\t}\n}\nsigned main() {\n\tmap<char, string>m;\n\tm[' '] = \"101\";\n\tm['\\''] = \"000000\";\n\tm[','] = \"000011\";\n\tm['-'] = \"10010001\";\n\tm['.'] = \"010001\";\n\tm['?'] = \"000001\";\n\tm['A'] = \"100101\";\n\tm['B'] = \"10011010\";\n\tm['C'] = \"0101\";\n\tm['D'] = \"0001\";\n\tm['E'] = \"110\";\n\tm['F'] = \"01001\";\n\tm['G'] = \"10011011\";\n\tm['H'] = \"010000\";\n\tm['I'] = \"0111\";\n\tm['J'] = \"10011000\";\n\tm['K'] = \"0110\";\n\tm['L'] = \"00100\";\n\tm['M'] = \"10011001\";\n\tm['N'] = \"10011110\";\n\tm['O'] = \"00101\";\n\tm['P'] = \"111\";\n\tm['Q'] = \"10011111\";\n\tm['R'] = \"1000\";\n\tm['S'] = \"00110\";\n\tm['T'] = \"00111\";\n\tm['U'] = \"10011100\";\n\tm['V'] = \"10011101\";\n\tm['W'] = \"000010\";\n\tm['X'] = \"10010010\";\n\tm['Y'] = \"10010011\";\n\tm['Z'] = \"10010000\";\n\n\tstring s;\n\twhile (getline(cin, s)) {\n\t\tstring ans;\n\n\t\trep(i, 0, s.size()) {\n\t\t\tans += m[s[i]];\n\t\t}\n\t\tstring cry;\n\t\tstring t;\n\t\trep(i, 0, ans.size()) {\n\t\t\tt.push_back(ans[i]);\n\t\t\tif (t.size() == 5) {\n\t\t\t\tcry += crypt(t);\n\t\t\t\tt.clear();\n\t\t\t}\n\t\t}\n\t\tif (t.size()) {\n\t\t\twhile (t.size() < 5)t = t + \"0\";\n\t\t\tcry += crypt(t);\n\t\t}\n\n\t\tcout << cry << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <ctime>\n#include <iostream>\n#include <algorithm>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <utility>\n#include <cctype>\nusing namespace std;\n\n#define rep(i,n) for(int (i)=0; (i)<(int)(n); ++(i))\n#define foreach(c,i) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)\n\nmap<char,string> m;\nmap<string,char> mm;\n\ninline char i2c(int i) { return '0'+i; }\n\nstring i2bs(int a) {\n  string ret;\n  while (a > 0) {\n    ret += i2c(a % 2);\n    a /= 2;\n  }\n  reverse(ret.begin(), ret.end());\n  while (ret.size() < 5) ret = '0' + ret;\n  return ret;\n}\n\nvoid init() {\n  const string s[] = {\n    \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\",\n    \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\",\n    \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\",\n    \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\",\n    \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\",\n    \"10010000\"\n  };\n  const char c[] = { ' ', '\\'', ',', '-', '.', '?' };\n  const char cc[] = { ' ', '.', ',', '-', '\\'', '?' };\n  const int sn = sizeof(s) / sizeof(string);\n  const int cn = sizeof(c) / sizeof(char);\n  rep(i,sn) {\n    if(i<cn) m.insert(make_pair(c[i],s[i]));\n    else m.insert(make_pair('A'+(i-cn),s[i]));\n\n    if(i<26) mm.insert(make_pair(i2bs(i),'A'+i));\n    else mm.insert(make_pair(i2bs(i),c[i-26]));\n  }\n}\n\nint main() {\n  init();\n  string in;\n  while(getline(cin,in)) {\n    string tmp;\n    rep(i,in.size()) tmp+=m[in[i]];\n    while(tmp.size()%5!=0) tmp+='0';\n    //cout << tmp << endl;\n    string out;\n    for(int i=0;i<tmp.size();i+=5) {\n      out+=mm[tmp.substr(i,5)];\n    }\n    cout<<out<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint main(void){\n    string str, ret;\n\n    ret = \"\";\n    while(getline(cin, str)){\n        for(int i=0;i<(int)str.size();i++){\n            if(str[i] == ' '){\n                ret += \"101\";\n            }else if(str[i] == '\\''){ //'\n                ret += \"000000\";\n            }else if(str[i] == ','){\n                ret += \"000011\";\n            }else if(str[i] == '_'){\n                ret += \"10010001\";\n            }else if(str[i] == '.'){\n                ret += \"010001\";\n            }else if(str[i] == '?'){\n                ret += \"000001\";\n            }else if(str[i] == 'A'){\n                ret += \"100101\";\n            }else if(str[i] == 'B'){\n                ret += \"10011010\";\n            }else if(str[i] == 'C'){\n                ret += \"0101\";\n            }else if(str[i] == 'D'){\n                ret += \"0001\";\n            }else if(str[i] == 'E'){\n                ret += \"110\";\n            }else if(str[i] == 'F'){\n                ret += \"01001\";\n            }else if(str[i] == 'G'){\n                ret += \"10011011\";\n            }else if(str[i] == 'H'){\n                ret += \"010000\";\n            }else if(str[i] == 'I'){\n                ret += \"0111\";\n            }else if(str[i] == 'J'){\n                ret += \"10011000\";\n            }else if(str[i] == 'K'){\n                ret += \"0110\";\n            }else if(str[i] == 'L'){\n                ret += \"00100\";\n            }else if(str[i] == 'M'){\n                ret += \"10011001\";\n            }else if(str[i] == 'N'){\n                ret += \"10011110\";\n            }else if(str[i] == 'O'){\n                ret += \"00101\";\n            }else if(str[i] == 'P'){\n                ret += \"111\";\n            }else if(str[i] == 'Q'){\n                ret += \"10011111\";\n            }else if(str[i] == 'R'){\n                ret += \"1000\";\n            }else if(str[i] == 'S'){\n                ret += \"00110\";\n            }else if(str[i] == 'T'){\n                ret += \"00111\";\n            }else if(str[i] == 'U'){\n                ret += \"10011100\";\n            }else if(str[i] == 'V'){\n                ret += \"10011101\";\n            }else if(str[i] == 'W'){\n                ret += \"000010\";\n            }else if(str[i] == 'X'){\n                ret += \"10010010\";\n            }else if(str[i] == 'Y'){\n                ret += \"10010011\";\n            }else if(str[i] == 'Z'){\n                ret += \"10010000\";\n            }\n        }\n    }\n    while(ret.size() % 5 != 0){\n        ret += \"0\";\n    }\n    string patt=\"\";\n    for(int i=0;i<(int)ret.size();i++){\n        patt += ret[i];\n        if(i%5 == 4){\n            if(patt == \"00000\"){\n                cout << \"A\";\n            }else if(patt == \"00001\"){\n                cout << \"B\";\n            }else if(patt == \"00010\"){\n                cout << \"C\";\n            }else if(patt == \"00011\"){\n                cout << \"D\";\n            }else if(patt == \"00100\"){\n                cout << \"E\";\n            }else if(patt == \"00101\"){\n                cout << \"F\";\n            }else if(patt == \"00110\"){\n                cout << \"G\";\n            }else if(patt == \"00111\"){\n                cout << \"H\";\n            }else if(patt == \"01000\"){\n                cout << \"I\";\n            }else if(patt == \"01001\"){\n                cout << \"J\";\n            }else if(patt == \"01010\"){\n                cout << \"K\";\n            }else if(patt == \"01011\"){\n                cout << \"L\";\n            }else if(patt == \"01100\"){\n                cout << \"M\";\n            }else if(patt == \"01101\"){\n                cout << \"N\";\n            }else if(patt == \"01110\"){\n                cout << \"O\";\n            }else if(patt == \"01111\"){\n                cout << \"P\";\n            }else if(patt == \"10000\"){\n                cout << \"Q\";\n            }else if(patt == \"10001\"){\n                cout << \"R\";\n            }else if(patt == \"10010\"){\n                cout << \"S\";\n            }else if(patt == \"10011\"){\n                cout << \"T\";\n            }else if(patt == \"10100\"){\n                cout << \"U\";\n            }else if(patt == \"10101\"){\n                cout << \"V\";\n            }else if(patt == \"10110\"){\n                cout << \"W\";\n            }else if(patt == \"10111\"){\n                cout << \"X\";\n            }else if(patt == \"11000\"){\n                cout << \"Y\";\n            }else if(patt == \"11001\"){\n                cout << \"Z\";\n            }else if(patt == \"11010\"){\n                cout << \" \";\n            }else if(patt == \"11011\"){\n                cout << \".\";\n            }else if(patt == \"11100\"){\n                cout << \",\";\n            }else if(patt == \"11101\"){\n                cout << \"-\";\n            }else if(patt == \"11110\"){\n                cout << \"'\";\n            }else if(patt == \"11111\"){\n                cout << \"?\";\n            }\n            patt = \"\";\n        }\n    }\n    cout << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nvoid solve()\n{\n\tstring str;\n\twhile(getline(cin, str))\n\t{\n\t\tint n = str.size();\n\t\tstring temp;\n\t\tfor(int i = 0; i < n; ++i)\n\t\t{\n\t\t\tswitch(str[i])\n\t\t\t{\n\t\t\t\tcase ' ':temp += \"101\";\t\tbreak;\n\t\t\t\tcase '\\'':temp += \"000000\";\tbreak;\n\t\t\t\tcase ',':temp += \"000011\";\tbreak;\n\t\t\t\tcase '-':temp += \"10010001\";break;\n\t\t\t\tcase '.':temp += \"010001\";\tbreak;\n\t\t\t\tcase '?':temp += \"000001\";\tbreak;\n\t\t\t\tcase 'A':temp += \"100101\";\tbreak;\n\t\t\t\tcase 'B':temp += \"10011010\";break;\n\t\t\t\tcase 'C':temp += \"0101\";\tbreak;\n\t\t\t\tcase 'D':temp += \"0001\";\tbreak;\n\t\t\t\tcase 'E':temp += \"110\";\t\tbreak;\n\t\t\t\tcase 'F':temp += \"01001\";\tbreak;\n\t\t\t\tcase 'G':temp += \"10011011\";break;\n\t\t\t\tcase 'H':temp += \"010000\";\tbreak;\n\t\t\t\tcase 'I':temp += \"0111\";\tbreak;\n\t\t\t\tcase 'J':temp += \"10011000\";break;\n\t\t\t\tcase 'K':temp += \"0110\";\tbreak;\n\t\t\t\tcase 'L':temp += \"00100\";\tbreak;\n\t\t\t\tcase 'M':temp += \"10011001\";break;\n\t\t\t\tcase 'N':temp += \"10011110\";break;\n\t\t\t\tcase 'O':temp += \"00101\";\tbreak;\n\t\t\t\tcase 'P':temp += \"111\";\t\tbreak;\n\t\t\t\tcase 'Q':temp += \"10011111\";break;\n\t\t\t\tcase 'R':temp += \"1000\";\tbreak;\n\t\t\t\tcase 'S':temp += \"00110\";\tbreak;\n\t\t\t\tcase 'T':temp += \"00111\";\tbreak;\n\t\t\t\tcase 'U':temp += \"10011100\";break;\n\t\t\t\tcase 'V':temp += \"10011101\";break;\n\t\t\t\tcase 'W':temp += \"000010\";\tbreak;\n\t\t\t\tcase 'X':temp += \"10010010\";break;\n\t\t\t\tcase 'Y':temp += \"10010011\";break;\n\t\t\t\tcase 'Z':temp += \"10010000\";break;\n\t\t\t}\n\t\t}\n\t\tif(temp.size() % 5)\n\t\t{\n\t\t\twhile(temp.size() % 5 != 0)\n\t\t\t{\n\t\t\t\ttemp += '0';\n\t\t\t}\n\t\t}\n\t\tstring Ans;\n\t\tn = temp.size();\n\t\tint count = 0;\n\t\tstring s;\n\t\tfor(int i = 0; i < n; ++i)\n\t\t{\n\t\t\tif(count == 5)\n\t\t\t{\n\t\t\t\tif(s == \"00000\")Ans += 'A';\n\t\t\t\telse if(s == \"00001\")Ans += 'B';\n\t\t\t\telse if(s == \"00010\")Ans += 'C';\n\t\t\t\telse if(s == \"00011\")Ans += 'D';\n\t\t\t\telse if(s == \"00100\")Ans += 'E';\n\t\t\t\telse if(s == \"00101\")Ans += 'F';\n\t\t\t\telse if(s == \"00110\")Ans += 'G';\n\t\t\t\telse if(s == \"00111\")Ans += 'H';\n\t\t\t\telse if(s == \"01000\")Ans += 'I';\n\t\t\t\telse if(s == \"01001\")Ans += 'J';\n\t\t\t\telse if(s == \"01010\")Ans += 'K';\n\t\t\t\telse if(s == \"01011\")Ans += 'L';\n\t\t\t\telse if(s == \"01100\")Ans += 'M';\n\t\t\t\telse if(s == \"01101\")Ans += 'N';\n\t\t\t\telse if(s == \"01110\")Ans += 'O';\n\t\t\t\telse if(s == \"01111\")Ans += 'P';\n\t\t\t\telse if(s == \"10000\")Ans += 'Q';\n\t\t\t\telse if(s == \"10001\")Ans += 'R';\n\t\t\t\telse if(s == \"10010\")Ans += 'S';\n\t\t\t\telse if(s == \"10011\")Ans += 'T';\n\t\t\t\telse if(s == \"10100\")Ans += 'U';\n\t\t\t\telse if(s == \"10101\")Ans += 'V';\n\t\t\t\telse if(s == \"10110\")Ans += 'W';\n\t\t\t\telse if(s == \"10111\")Ans += 'X';\n\t\t\t\telse if(s == \"11000\")Ans += 'Y';\n\t\t\t\telse if(s == \"11001\")Ans += 'Z';\n\t\t\t\telse if(s == \"11010\")Ans += ' ';\n\t\t\t\telse if(s == \"11011\")Ans += '.';\n\t\t\t\telse if(s == \"11100\")Ans += ',';\n\t\t\t\telse if(s == \"11101\")Ans += '-';\n\t\t\t\telse if(s == \"11110\")Ans += '\\'';\n\t\t\t\telse if(s == \"11111\")Ans += '?';\n\t\t\t\tcount = 0;\n\t\t\t\ts.clear();\n\t\t\t}\n\t\t\ts += temp[i];\n\t\t\t++count;\n\t\t}\n\t\tif(s == \"00000\")Ans += 'A';\n\t\telse if(s == \"00001\")Ans += 'B';\n\t\telse if(s == \"00010\")Ans += 'C';\n\t\telse if(s == \"00011\")Ans += 'D';\n\t\telse if(s == \"00100\")Ans += 'E';\n\t\telse if(s == \"00101\")Ans += 'F';\n\t\telse if(s == \"00110\")Ans += 'G';\n\t\telse if(s == \"00111\")Ans += 'H';\n\t\telse if(s == \"01000\")Ans += 'I';\n\t\telse if(s == \"01001\")Ans += 'J';\n\t\telse if(s == \"01010\")Ans += 'K';\n\t\telse if(s == \"01011\")Ans += 'L';\n\t\telse if(s == \"01100\")Ans += 'M';\n\t\telse if(s == \"01101\")Ans += 'N';\n\t\telse if(s == \"01110\")Ans += 'O';\n\t\telse if(s == \"01111\")Ans += 'P';\n\t\telse if(s == \"10000\")Ans += 'Q';\n\t\telse if(s == \"10001\")Ans += 'R';\n\t\telse if(s == \"10010\")Ans += 'S';\n\t\telse if(s == \"10011\")Ans += 'T';\n\t\telse if(s == \"10100\")Ans += 'U';\n\t\telse if(s == \"10101\")Ans += 'V';\n\t\telse if(s == \"10110\")Ans += 'W';\n\t\telse if(s == \"10111\")Ans += 'X';\n\t\telse if(s == \"11000\")Ans += 'Y';\n\t\telse if(s == \"11001\")Ans += 'Z';\n\t\telse if(s == \"11010\")Ans += ' ';\n\t\telse if(s == \"11011\")Ans += '.';\n\t\telse if(s == \"11100\")Ans += ',';\n\t\telse if(s == \"11101\")Ans += '-';\n\t\telse if(s == \"11110\")Ans += '\\'';\n\t\telse if(s == \"11111\")Ans += '?';\n\t\tcout << Ans << endl;\n\t}\n}\n\nint main()\n{\n\tsolve();\n\treturn(0);\n}"
  },
  {
    "language": "C++",
    "code": "#ifndef _GLIBCXX_NO_ASSERT\n#include <cassert>\n#endif\n#include <cctype>\n#include <cerrno>\n#include <cfloat>\n#include <ciso646>\n#include <climits>\n#include <clocale>\n#include <cmath>\n#include <csetjmp>\n#include <csignal>\n#include <cstdarg>\n#include <cstddef>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n\n#ifdef __GXX_EXPERIMENTAL_CXX0X__\n#include <ccomplex>\n#include <cfenv>\n#include <cinttypes>\n#include <cstdbool>\n#include <cstdint>\n#include <ctgmath>\n#include <cwchar>\n#include <cwctype>\n#endif\n\n#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <deque>\n#include <exception>\n#include <fstream>\n#include <functional>\n#include <iomanip>\n#include <ios>\n#include <iosfwd>\n#include <iostream>\n#include <istream>\n#include <iterator>\n#include <limits>\n#include <list>\n#include <locale>\n#include <map>\n#include <memory>\n#include <new>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <stdexcept>\n#include <streambuf>\n#include <string>\n#include <typeinfo>\n#include <utility>\n#include <valarray>\n#include <vector>\n\n#ifdef __GXX_EXPERIMENTAL_CXX0X__\n#include <array>\n#include <atomic>\n#include <chrono>\n#include <condition_variable>\n#include <forward_list>\n#include <future>\n#include <initializer_list>\n#include <mutex>\n#include <random>\n#include <ratio>\n#include <regex>\n#include <system_error>\n#include <thread>\n#include <tuple>\n#include <typeindex>\n#include <type_traits>\n#include <unordered_map>\n#include <unordered_set>\n#endif\n\n\nusing namespace std;\n\nint main ()\n{\n\tmap<char , string>data;\n\tdata[' '] = \"101\";\n\tdata['\\''] = \"000000\";\n\tdata[','] = \"000011\";\n\tdata['-'] = \"10010001\";\n\tdata['.'] = \"010001\";\n\tdata['?'] = \"000001\";\n\tdata['A'] = \"100101\";\n\tdata['B'] = \"10011010\";\n\tdata['C'] = \"0101\";\n\tdata['D'] = \"0001\";\n\tdata['E'] = \"110\";\n\tdata['F'] = \"01001\";\n\tdata['G'] = \"10011011\";\n\tdata['H'] = \"010000\";\n\tdata['I'] = \"0111\";\n\tdata['J'] = \"10011000\";\n\tdata['K'] = \"0110\";\n\tdata['L'] = \"00100\";\n\tdata['M'] = \"10011001\";\n\tdata['N'] = \"10011110\";\n\tdata['O'] = \"00101\";\n\tdata['P'] = \"111\";\n\tdata['Q'] = \"10011111\";\n\tdata['R'] = \"1000\";\n\tdata['S'] = \"00110\";\n\tdata['T'] = \"00111\";\n\tdata['U'] = \"10011100\";\n\tdata['V'] = \"10011101\";\n\tdata['W'] = \"000010\";\n\tdata['X'] = \"10010010\";\n\tdata['Y'] = \"10010011\";\n\tdata['Z'] = \"10010000\";\n\tstring test , in;\n\tstring match;\n\tstring ans;\n\twhile(  getline(cin,in) )\n\t{\n\t\ttest += in + \" \";\n\t}\n\ttest.erase ( test.end ()-1 );\n\tfor( auto x : test )\n\t{\n\t\tmatch += data[x];\n\t}\n\t//cout << match.length () << endl;\n\tint p;\n\tfor( size_t i = 0 , p = match.length (); i < 4 - ( ( p - 1 ) % 5 ); i++ )\n\t{\n\t\tmatch += \"0\";\n\t}\n\t//cout << match << endl;\n\tfor( size_t i = 0; i < match.length()/5; i++ )\n\t{\n\t\tint num = 0;\n\t\tfor( size_t j = 0; j < 5; j++ )\n\t\t{\n\t\t\tnum *= 2;\n\t\t\tif( match[i * 5 + j]=='1' )\n\t\t\t{\n\t\t\t\tnum += 1;\n\t\t\t}\n\t\t}\n\t\t//cout << num<<endl;\n\t\tif( num + 'A' <= 'Z' )\n\t\t{\n\t\t\tans += (num + 'A');\n\t\t} else\n\t\t{\n\t\t\tnum -= 25;\n\t\t\tswitch( num )\n\t\t\t{\n\t\t\t\tcase 0:ans += ' '; break;\n\t\t\t\tcase 1:ans += '.'; break;\n\t\t\t\tcase 3:ans += ','; break;\n\t\t\t\tcase 4:ans += '-'; break;\n\t\t\t\tcase 5:ans += '\\''; break;\n\t\t\t\tcase 6:ans += '?'; break;\n\t\t\t}\n\t\t}\n\t}\n\tcout << ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid hantei(char *str);\n\nchar DataBase[][3][80] =\n\t{\n\t/* [文字] ,[符号＿変換前] ,[符号＿変換後] */\n\t{ \" \", \"101\", \"11010\" },{ \"\\'\", \"000000\", \"11110\" },{ \",\", \"000011\", \"11100\" },{ \"-\", \"10010001\", \"11101\" },\n\t{ \".\", \"010001\", \"11011\" },{ \"?\", \"000001\", \"11111\" },{ \"A\", \"100101\", \"00000\" },{ \"B\", \"10011010\", \"00001\" },\n    { \"C\", \"0101\", \"00010\" },{ \"D\", \"0001\", \"00011\" },{ \"E\", \"110\", \"00100\" },{ \"F\", \"01001\", \"00101\" },\n\t{ \"G\", \"10011011\", \"00110\" },{ \"H\", \"010000\", \"00111\" },{ \"I\", \"0111\", \"01000\" },{ \"J\", \"10011000\", \"01001\" },\n\t{ \"K\", \"0110\", \"01010\" },{ \"L\", \"00100\", \"01011\" },{ \"M\", \"10011001\", \"01100\" },{ \"N\", \"10011110\", \"01101\" },\n\t{ \"O\", \"00101\", \"01110\" },{ \"P\", \"111\", \"01111\" },{ \"Q\", \"10011111\", \"10000\" },{ \"R\", \"1000\", \"10001\" },\n\t{ \"S\", \"00110\", \"10010\" },{ \"T\", \"00111\", \"10011\" },{ \"U\", \"10011100\", \"10100\" },{ \"V\", \"10011101\", \"10101\" },\n\t{ \"W\", \"000010\", \"10110\" },{ \"X\", \"10010010\", \"10111\" },{ \"Y\", \"10010011\", \"11000\" },{ \"Z\", \"100100000\", \"11001\" },\n    {\"\", \"\", \"\" }\n};\n\n\nint main(void)\n{\n\tchar str1[1000],str2[1000],ch;\n\tint cut_i;\n\t\n\t/*scanf(\"%[A-Z \\'.?,-]\",str);\n\t\thantei(str1);*/\n\tcut_i=0;\n\twhile((ch = getchar())!=EOF){\n\t\tif(ch !='\\n'){\n\t\t\tstr2[cut_i] = ch;\n\t\t\tcut_i++;\n\t\t}\n\t\telse {\n\t\t\tif(cut_i==0){\n\t\t\t\tprintf(\" \");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrncpy(str1,str2,cut_i);\n\t\t\t}\n\t\t\tstr1[cut_i]='\\0';\n\t\t\thantei(str1);\n\t\t\tprintf(\"\\n\");\n\t\t\tcut_i=0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\nvoid hantei(char *str)\n{\n\tint len1,cut_i,cut_j,count;\n\tchar ans[1000]={\"\"},str2[1000]={\"\"},str3[1000]={\"\"};\n\tchar zero[]={\"0000\"};\n\n\tlen1 = strlen(str);\n\tcount = 0;\n\n\tfor(cut_i=0;cut_i<len1;cut_i++){\n\t\tcut_j=0;\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(!strncmp((str+cut_i),DataBase[cut_j][0],1)){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(str2,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\telse if(count !=0){\n\t\t\t\t\tstrcpy(str2+count,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\t\n\tlen1 = strlen(str2);\n\tcount = 0;\n\n\tif( len1 % 5 != 0){\n\t\tcut_i = 5 - len1 % 5;\n\t\tstrncat(str2,zero,cut_i);\n\t\tlen1 = strlen(str2);\n\t}\n\n\n\tfor(cut_i=0;cut_i<len1;cut_i+=5){\n\t\tcut_j=0;\n\t\tstrncpy(str3,str2+cut_i,5);\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(strcmp(str3,DataBase[cut_j][2]) == 0){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(ans,DataBase[cut_j][0]);\n\t\t\t\t\tcount =strlen(ans);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstrcat(ans,DataBase[cut_j][0]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\tprintf(ans);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <map>\nusing namespace std;\n\nstring i_to_05b(unsigned int n){\n\tstring s = \"\";\n\tdo{\n\t\tchar c = (n & 1U) + '0' ;\n\t\ts.push_back( c );\n\t\tn >>= 1;\n\t}while( n != 0 );\n\n\twhile( s.size() < 5 ){\n\t\ts.push_back('0');\n\t}\n\treverse( s.begin() , s.end() );\n\t\n\treturn s;\n}\n\nvoid makeTable1(map<char,string>& table1){\n\ttable1[' ']  = \"101\";\n\ttable1['\\''] = \"000000\";\n\ttable1[',']  = \"000011\";\n\ttable1['-']  = \"10010001\";\n\ttable1['.']  = \"010001\";\n\ttable1['?']  = \"000001\";\n\ttable1['A']  = \"100101\";\n\ttable1['B']  = \"10011010\";\n\ttable1['C']  = \"0101\";\n\ttable1['D']  = \"0001\";\n\ttable1['E']  = \"110\";\n\ttable1['F']  = \"01001\";\n\ttable1['G']  = \"10011011\";\n\ttable1['H']  = \"010000\";\n\ttable1['I']  = \"0111\";\n\ttable1['J']  = \"10011000\";\n\ttable1['K']  = \"0110\";\n\ttable1['L']  = \"00100\";\n\ttable1['M']  = \"10011001\";\n\ttable1['N']  = \"10011110\";\n\ttable1['O']  = \"00101\";\n\ttable1['P']  = \"111\";\n\ttable1['Q']  = \"10011111\";\n\ttable1['R']  = \"1000\";\n\ttable1['S']  = \"00110\";\n\ttable1['T']  = \"00111\";\n\ttable1['U']  = \"10011100\";\n\ttable1['V']  = \"10011101\";\n\ttable1['W']  = \"000010\";\n\ttable1['X']  = \"10010010\";\n\ttable1['Y']  = \"10010011\";\n\ttable1['Z']  = \"10010000\";\n}\n\nvoid makeTable2(map<string,char>& table2){\n\tchar ch[6] = { ' ' , '.' , ',' , '-' , '\\'' , '?' };\n\tfor(char c = 'A' ; c <= 'Z' ; ++c){\n\t\ttable2[ i_to_05b( (int)(c - 'A') ) ] = c;\n\t}\n\tfor(int i = 0 ; i < 6 ; ++i ){\n\t\ttable2[ i_to_05b( i+26 ) ] = ch[i];\n\t}\n}\n\nstring encode(string p, map<char,string> table1){\n\tstring c = \"\";\n\tfor(int i=0 ; i<p.size() ; ++i ){\n\t\tc += table1[ p[i] ];\n\t}\n\treturn c;\n}\nstring decode(string c , map<string,char> table2){\n\tstring p = \"\";\n\twhile( c.size() % 5 != 0){\n\t\tc.push_back('0');\n\t}\n\tfor(int i=0 ; i+5 <= c.size() ; i += 5 ){\n\t\tp.push_back( table2[ c.substr( i , 5 ) ] );\n\t}\n\treturn p;\n}\n\nint main(){\n\tstring p;\n\tmap<char,string> table1;\n\tmap<string,char> table2;\n\tmakeTable1(table1);\n\tmakeTable2(table2);\n\n\twhile( getline( cin , p ) ){\n\t\tcout << decode( encode( p , table1 ) , table2 ) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<string>\n#include<map>\nusing namespace std;\nint main(){\n    string str;\n \n    map<string,string> encode;\n    map<string,string> decode;\n \n    encode[\" \"] = \"101\";\n    encode[\"'\"] = \"000000\";\n    encode[\",\"] = \"000011\";\n    encode[\"-\"] = \"10010001\";\n    encode[\".\"] = \"010001\";\n \n    encode[\"?\"] = \"000001\";\n    encode[\"A\"] = \"100101\";\n    encode[\"B\"] = \"10011010\";\n    encode[\"C\"] = \"0101\";\n    encode[\"D\"] = \"0001\";\n    encode[\"E\"] = \"110\";\n    encode[\"F\"] = \"01001\";\n    encode[\"G\"] = \"10011011\";\n \n    encode[\"H\"] = \"010000\";\n    encode[\"I\"] = \"0111\";\n    encode[\"J\"] = \"10011000\";\n    encode[\"K\"] = \"0110\";\n    encode[\"L\"] = \"00100\";\n    encode[\"M\"] = \"10011001\";\n    encode[\"N\"] = \"10011110\";\n \n    encode[\"O\"] = \"00101\";\n    encode[\"P\"] = \"111\";\n    encode[\"Q\"] = \"10011111\";\n    encode[\"R\"] = \"1000\";\n    encode[\"S\"] = \"00110\";\n    encode[\"T\"] = \"00111\";\n    encode[\"U\"] = \"10011100\";\n \n    encode[\"V\"] = \"10011101\";\n    encode[\"W\"] = \"000010\";\n    encode[\"X\"] = \"10010010\";\n    encode[\"Y\"] = \"10010011\";\n    encode[\"Z\"] = \"10010000\";\n \n    decode[\"00000\"] = \"A\";\n    decode[\"00001\"] = \"B\";\n    decode[\"00010\"] = \"C\";\n    decode[\"00011\"] = \"D\";\n    decode[\"00100\"] = \"E\";\n    decode[\"00101\"] = \"F\";\n    decode[\"00110\"] = \"G\";\n \n    decode[\"00111\"] = \"H\";\n    decode[\"01000\"] = \"I\";\n    decode[\"01001\"] = \"J\";\n    decode[\"01010\"] = \"K\";\n    decode[\"01011\"] = \"L\";\n    decode[\"01100\"] = \"M\";\n    decode[\"01101\"] = \"N\";\n \n    decode[\"01110\"] = \"O\";\n    decode[\"01111\"] = \"P\";\n    decode[\"10000\"] = \"Q\";\n    decode[\"10001\"] = \"R\";\n    decode[\"10010\"] = \"S\";\n    decode[\"10011\"] = \"T\";\n    decode[\"10100\"] = \"U\";\n \n    decode[\"10101\"] = \"V\";\n    decode[\"10110\"] = \"W\";\n    decode[\"10111\"] = \"X\";\n    decode[\"11000\"] = \"Y\";\n    decode[\"11001\"] = \"Z\";\n \n    decode[\"11010\"] = \" \";\n    decode[\"11011\"] = \".\";\n    decode[\"11100\"] = \",\";\n    decode[\"11101\"] = \"-\";\n    decode[\"11110\"] = \"'\";\n    decode[\"11111\"] = \"?\";\n \n    while(getline(cin,str)){\n \n        string enc=\"\";\n        for(int i=0;i<str.size();i++){\n            enc+=encode[str.substr(i,1)];\n        }\n \n        enc+=\"0000\";\n \n        string dec=\"\";\n        for(int i=0;i+5<=enc.size();i+=5){\n            dec+=decode[enc.substr(i,5)];\n        }\n \n        cout << dec << endl;\n    }\n \n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<cassert>\n#include<iostream>\n#include<sstream>\n#include<string>\n#include<vector>\n#include<queue>\n#include<set>\n#include<map>\n#include<utility>\n#include<numeric>\n#include<algorithm>\n#include<bitset>\n#include<complex>\n\nusing namespace std;\n\ntypedef long long Int;\ntypedef vector<int> vint;\ntypedef pair<int,int> pint;\n#define mp make_pair\n\ntemplate<class T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << \" \"; cout << endl; }\ntemplate<class T> void chmin(T &t, T f) { if (t > f) t = f; }\ntemplate<class T> void chmax(T &t, T f) { if (t < f) t = f; }\nint in() { int x; scanf(\"%d\", &x); return x; }\n\nstring a[256];\n\nint main() {\n\ta[' ']=\"101\";\n\ta['\\'']=\"000000\";\n\ta[',']=\"000011\";\n\ta['-']=\"10010001\";\n\ta['.']=\"010001\";\n\ta['?']=\"000001\";\n\ta['A']=\"100101\";\n\ta['B']=\"10011010\";\n\ta['C']=\"0101\";\n\ta['D']=\"0001\";\n\ta['E']=\"110\";\n\ta['F']=\"01001\";\n\ta['G']=\"10011011\";\n\ta['H']=\"010000\";\n\ta['I']=\"0111\";\n\ta['J']=\"10011000\";\n\ta['K']=\"0110\";\n\ta['L']=\"00100\";\n\ta['M']=\"10011001\";\n\ta['N']=\"10011110\";\n\ta['O']=\"00101\";\n\ta['P']=\"111\";\n\ta['Q']=\"10011111\";\n\ta['R']=\"1000\";\n\ta['S']=\"00110\";\n\ta['T']=\"00111\";\n\ta['U']=\"10011100\";\n\ta['V']=\"10011101\";\n\ta['W']=\"000010\";\n\ta['X']=\"10010010\";\n\ta['Y']=\"10010011\";\n\ta['Z']=\"10010000\";\n\tstring str;\n\tstring b;\n\tstring c;\n\twhile(getline(cin,str)){\n\t\tint i=0;\n\t\tb=\"\";\n\t\tfor(i=0;str[i]>=' ';i++){\n\t\t\tb+=a[str[i]];\n\t\t}\n\t\twhile(b.size()%5)b+=\"0\";\n\t\tint num;\n\t\tfor(i=0;i<b.size();i+=5){\n\t\t\tint j;\n\t\t\tnum=0;\n\t\t\tfor(j=0;j<5;j++){\n\t\t\t\tnum*=2;\n\t\t\t\tnum+=b[i+j]-'0';\n\t\t\t}\n\t\t\tif(num<26)cout<<(char)(num+'A');\n\t\t\telse if(num==26)cout<<\" \";\n\t\t\telse if(num==27)cout<<\".\";\n\t\t\telse if(num==28)cout<<\",\";\n\t\t\telse if(num==29)cout<<\"-\";\n\t\t\telse if(num==30)cout<<\"\\'\";\n\t\t\telse if(num==31)cout<<\"?\";\n\t\t}\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<string>\n#include<iostream>\n\nusing namespace std;\n\nstring change1(char x){\n\tif(x==' ')return \"101\";\n\tif(x==',')return \"000011\";\n\tif(x=='-')return \"10010001\";\n\tif(x=='.')return \"010001\";\n\tif(x=='?')return \"000001\";\n\tif(x=='A')return \"100101\";\n\tif(x=='B')return \"10011010\";\n\tif(x=='C')return \"0101\";\n\tif(x=='D')return \"0001\";\n\tif(x=='E')return \"110\";\n\tif(x=='F')return \"01001\";\n\tif(x=='G')return \"10011011\";\n\tif(x=='H')return \"010000\";\n\tif(x=='I')return \"0111\";\n\tif(x=='J')return \"10011000\";\n\tif(x=='K')return \"0110\";\n\tif(x=='L')return \"00100\";\n\tif(x=='M')return \"10011001\";\n\tif(x=='N')return \"10011110\";\n\tif(x=='O')return \"00101\";\n\tif(x=='P')return \"111\";\n\tif(x=='Q')return \"10011111\";\n\tif(x=='R')return \"1000\";\n\tif(x=='S')return \"00110\";\n\tif(x=='T')return \"00111\";\n\tif(x=='U')return \"10011100\";\n\tif(x=='V')return \"10011101\";\n\tif(x=='W')return \"000010\";\n\tif(x=='X')return \"10010010\";\n\tif(x=='Y')return \"10010011\";\n\tif(x=='Z')return \"10010000\";\n\treturn \"000000\";\n}\n\nstring change2(string x){\n\tint c=0;\n\tfor(int i=0;i<5;i++){\n\t\tc*=2;\n\t\tc+=x[i]-'0';\n\t}\n\tif(c<=25){\n\t\tstring ans;\n\t\tans+='A'+c;\n\t\treturn ans;\n\t}\n\tif(c==26)return \" \";\n\tif(c==27)return \".\";\n\tif(c==28)return \",\";\n\tif(c==29)return \"-\";\n\tif(c==30)return \"'\";\n\tif(c==31)return \"?\";\n}\n\nint main(void){\n\tstring s;\n\tgetline(cin,s);\n\tstring str;\n\tfor(int i=0;i<s.size();i++){\n\t\tstr+=change1(s[i]);\n\t}\n\tint plus=str.size()%5;\n\tif(plus>0)for(int i=0;i<5-plus;i++)str+=\"0\";\n\tstring res;\n\tfor(int i=0;i<str.size()/5;i++){\n\t\tstring ss;\n\t\tfor(int j=0;j<5;j++)ss+=str[i*5+j];\n\t\tres+=change2(ss);\n\t}\n\tcout << res << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long int ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<pair<int, int> > vii;\n#define rrep(i, m, n) for(int (i)=(m); (i)<(n);  (i)++)\n#define erep(i, m, n) for(int (i)=(m); (i)<=(n); (i)++)\n#define  rep(i, n)    for(int (i)=0; (i)<(n);  (i)++)\n#define rrev(i, m, n) for(int (i)=(n)-1; (i)>=(m); (i)--)\n#define erev(i, m, n) for(int (i)=(n); (i)>=(m); (i)--)\n#define  rev(i, n)    for(int (i)=(n)-1; (i)>=0; (i)--)\n#define vrep(i, c)    for(__typeof((c).begin())i=(c).begin(); i!=(c).end(); i++)\n#define  ALL(v)       (v).begin(), (v).end()\n#define mp            make_pair\n#define pb            push_back\ntemplate<class T, class S> inline bool minup(T& m, S x){ return m>(T)x ? (m=(T)x, true) : false; }\ntemplate<class T, class S> inline bool maxup(T& m, S x){ return m<(T)x ? (m=(T)x, true) : false; }\n\nconst int    INF = 1000000000;\nconst ll     MOD = 1000000007LL;\nconst double EPS = 1E-12;\n\nmap<char, string> en;\nmap<string, string> de;\nstring s, t;\nstring in;\nint n;\n\nvoid encode()\n{\n  en[' '] = \"101\";\n  en['\\''] = \"000000\";\n  en[','] = \"000011\";\n  en['-'] = \"10010001\";\n  en['.'] = \"010001\";\n  en['?'] = \"000001\";\n  en['A'] = \"100101\";\n  en['B'] = \"10011010\";\n  en['C'] = \"0101\";\n  en['D'] = \"0001\";\n  en['E'] = \"110\";\n  en['F'] = \"01001\";\n  en['G'] = \"10011011\";\n  en['H'] = \"010000\";\n  en['I'] = \"0111\";\n  en['J'] = \"10011000\";\n  en['K'] = \"0110\";\n  en['L'] = \"00100\";\n  en['M'] = \"10011001\";\n  en['N'] = \"10011110\";\n  en['O'] = \"00101\";\n  en['P'] = \"111\";\n  en['Q'] = \"100011111\";\n  en['R'] = \"1000\";\n  en['S'] = \"00110\";\n  en['T'] = \"00111\";\n  en['U'] = \"10011100\";\n  en['V'] = \"10011101\";\n  en['W'] = \"000010\";\n  en['X'] = \"10010010\";\n  en['Y'] = \"10010011\";\n  en['Z'] = \"10010000\";\n}\n\nvoid decode()\n{\n  de[\"00000\"] = \"A\";\n  de[\"00001\"] = \"B\";\n  de[\"00010\"] = \"C\";\n  de[\"00011\"] = \"D\";\n  de[\"00100\"] = \"E\";\n  de[\"00101\"] = \"F\";\n  de[\"00110\"] = \"G\";\n  de[\"00111\"] = \"H\";\n  de[\"01000\"] = \"I\";\n  de[\"01001\"] = \"J\";\n  de[\"01010\"] = \"K\";\n  de[\"01011\"] = \"L\";\n  de[\"01100\"] = \"M\";\n  de[\"01101\"] = \"N\";\n  de[\"01110\"] = \"O\";\n  de[\"01111\"] = \"P\";\n  de[\"10000\"] = \"Q\";\n  de[\"10001\"] = \"R\";\n  de[\"10010\"] = \"S\";\n  de[\"10011\"] = \"T\";\n  de[\"10100\"] = \"U\";\n  de[\"10101\"] = \"V\";\n  de[\"10110\"] = \"W\";\n  de[\"10111\"] = \"X\";\n  de[\"11000\"] = \"Y\";\n  de[\"11001\"] = \"Z\";\n  de[\"11010\"] = \" \";\n  de[\"11011\"] = \".\";\n  de[\"11100\"] = \",\";\n  de[\"11101\"] = \"-\";\n  de[\"11110\"] = \"'\";\n  de[\"11111\"] = \"?\";\n}\n\nint main()\n{\n  encode();\n  decode();\n\n  while(getline(cin, s)) in += s + \" \";\n\n  rep(i, in.size()-1) t += en[in[i]];\n  n = (5 - t.size() % 5) % 5;\n  rep(i, n) t += \"0\";\n\n  n = t.size() / 5;\n  rep(i, n) cout << de[t.substr(5*i, 5)];\n  cout << endl;\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring t[26] = \n{\n\"100101\",\n\"10011010\",\n\"0101\",\n\"0001\",\n\"110\",\n\"01001\",\n\"10011011\",\n\"010000\",\n\"0111\",\n\"10011000\",\n\"0110\",\n\"00100\",\n\"10011001\",\n\"10011110\",\n\"00101\",\n\"111\",\n\"10011111\",\n\"1000\",\n\"00110\",\n\"00111\",\n\"10011100\",\n\"10011101\",\n\"000010\",\n\"10010010\",\n\"10010011\",\n\"10010000\"\n};\n\nint main()\n{\n\tstring line;\n\twhile(getline(cin,line))\n\t{\n\t\tstring buf;\n\t\tfor(int i=0; i<line.size(); i++)\n\t\t{\n\t\t\tswitch(line[i])\n\t\t\t{\n\t\t\t\tcase ' ' : buf+=\"101\";      break;\n\t\t\t\tcase '\\'': buf+=\"000000\";   break;\n\t\t\t\tcase ',' : buf+=\"000011\";   break;\n\t\t\t\tcase '-' : buf+=\"10010001\"; break;\n\t\t\t\tcase '.' : buf+=\"010001\";   break;\n\t\t\t\tcase '?' : buf+=\"000001\";   break;\n\t\t\t\tdefault  : buf+=t[line[i]-'A'];break;\n\t\t\t}\n\t\t}\n\t\tbuf+=\"0000\";\n\n\t\tfor(int i=0; i<buf.size()-4; i+=5)\n\t\t{\n\t\t\tint x = 0;\n\t\t\tfor(int j=0; j<5; j++)\n\t\t\t{\n\t\t\t\tx+= (buf[i+4-j]=='1' ? 1<<j : 0);\n\t\t\t}\n\t\t\t\n\t\t\tchar c;\n\t\t\tswitch(x)\n\t\t\t{\n\t\t\t\tcase 26: c=' ';  break;\n\t\t\t\tcase 27: c='.';  break;\n\t\t\t\tcase 28: c=',';  break;\n\t\t\t\tcase 29: c='-';  break;\n\t\t\t\tcase 30: c='\\''; break;\n\t\t\t\tcase 31: c='?';  break;\n\t\t\t\tdefault: c=x+'A';break;\n\t\t\t}\n\n\t\t\tcout << c;\n\t\t}\n\t\tcout << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <sstream>\n#include <cassert>\nusing namespace std;\nstatic const double EPS = 1e-5;\ntypedef long long ll;\ntypedef pair<int,int> PI;\n#define rep(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n#define mp make_pair\n#define pb push_back\n\n\nmap<char,string> dic;\n\nmain(){\n\n\n  dic[' ']=\"101\";\n  dic['\\'']=\"000000\";\n  dic[',']=\"000011\";\n  dic['-']=\"10010001\";\n  dic['.']=\"010001\";\n  dic['?']=\"000001\";\n  dic['A']=\"100101\";\n  dic['B']=\"10011010\";\n\t\n  dic['C']=\"0101\";\n  dic['D']=\"0001\";\n  dic['E']=\"110\";\n  dic['F']=\"01001\";\n  dic['G']=\"10011011\";\n  dic['H']=\"010000\";\n  dic['I']=\"0111\";\n  dic['J']=\"10011000\";\n\t\n  dic['K']=\"0110\";\n  dic['L']=\"00100\";\n  dic['M']=\"10011001\";\n  dic['N']=\"10011110\";\n  dic['O']=\"00101\";\n  dic['P']=\"111\";\n  dic['Q']=\"10011111\";\n  dic['R']=\"1000\";\n\t\n  dic['S']=\"00110\";\n  dic['T']=\"00111\";\n  dic['U']=\"10011100\";\n  dic['V']=\"10011101\";\n  dic['W']=\"000010\";\n  dic['X']=\"10010010\";\n  dic['Y']=\"10010011\";\n  dic['Z']=\"10010000\";\n  string str;\n  \n  while(getline(cin,str)){\n    if(str.size()==0)break;\n    string code;\n    rep(i,str.size()){\n      code+=dic[str[i]];\n    }\n    \n    while(code.size()%5)code+='0';\n\n    for(int i=0;i<code.size();){\n      string dec;\n      rep(j,5)dec+=code[i+j];\n      i+=5;\n      \n      int by=0;\n      //cout<<dec<<endl;\n      for(int j=0;j<5;j++){\n        by=by*2+dec[j]-'0';\n      }\n      if(by<26)cout<<char(by+'A');\n      else{\n        switch(by){\n        case 26:\n          cout<<' ';\n          break;\n        case 27:\n          cout<<'.';\n          break;\n        case 28:\n          cout<<',';\n          break;\n        case 29:\n          cout<<'-';\n          break;\n        case 30:\n          cout<<'\\'';\n          break;\n        case 31:\n          cout<<'?';\n          break;\n        }\n      }\n    }\n    cout<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "//The Code A Doctor Loved\n#include<bits/stdc++.h>\nusing namespace std;\n\nstring p(string s, string t){\n  for(int i=0; i<t.length(); i++){\n    if(s.length()%6==5)s+=' ';\n    s+=t[i];\n  }\n  return s;\n}\n\nstring into(string s){\n  string t=\"\";\n  for(int i=0; i<s.length(); i++){\n    if(s[i]==' ')t=p(t, \"101\");\n    if(s[i]=='\\'')t=p(t, \"000000\");\n    if(s[i]==',')t=p(t,\"000011\");\n    if(s[i]=='_')t=p(t,\"10010001\");\n    if(s[i]=='.')t=p(t,\"010001\");\n    if(s[i]=='?')t=p(t,\"000001\");\n    if(s[i]=='A')t=p(t,\"100101\");\n    if(s[i]=='B')t=p(t,\"10011010\");\n    if(s[i]=='C')t=p(t,\"0101\");\n    if(s[i]=='D')t=p(t,\"0001\");\n    if(s[i]=='E')t=p(t,\"110\");\n    if(s[i]=='F')t=p(t,\"01001\");\n    if(s[i]=='G')t=p(t,\"10011011\");\n    if(s[i]=='H')t=p(t,\"010000\");\n    if(s[i]=='I')t=p(t,\"0111\");\n    if(s[i]=='J')t=p(t,\"10011000\");\n    if(s[i]=='K')t=p(t,\"0110\");\n    if(s[i]=='L')t=p(t,\"00100\");\n    if(s[i]=='M')t=p(t,\"10011001\");\n    if(s[i]=='N')t=p(t,\"10011110\");\n    if(s[i]=='O')t=p(t,\"00101\");\n    if(s[i]=='P')t=p(t,\"111\");\n    if(s[i]=='Q')t=p(t,\"1001111\");\n    if(s[i]=='R')t=p(t,\"1000\");\n    if(s[i]=='S')t=p(t,\"00110\");\n    if(s[i]=='T')t=p(t,\"00111\");\n    if(s[i]=='U')t=p(t,\"10011100\");\n    if(s[i]=='V')t=p(t,\"10011101\");\n    if(s[i]=='W')t=p(t,\"000010\");\n    if(s[i]=='X')t=p(t,\"10010010\");\n    if(s[i]=='Y')t=p(t,\"10010011\");\n    if(s[i]=='Z')t=p(t,\"10010000\");\n  }\n  while(t.length()%6!=5)t+='0';\n  stringstream ss(t);\n  string ret=\"\", tmp;\n  while(getline(ss, tmp, ' ')){\n    if(tmp==\"00000\")ret+='A';\n    if(tmp==\"00001\")ret+='B';\n    if(tmp==\"00010\")ret+='C';\n    if(tmp==\"00011\")ret+='D';\n    if(tmp==\"00100\")ret+='E';\n    if(tmp==\"00101\")ret+='F';\n    if(tmp==\"00110\")ret+='G';\n    if(tmp==\"00111\")ret+='H';\n    if(tmp==\"01000\")ret+='I';\n    if(tmp==\"01001\")ret+='J';\n    if(tmp==\"01010\")ret+='K';\n    if(tmp==\"01011\")ret+='L';\n    if(tmp==\"01100\")ret+='M';\n    if(tmp==\"01101\")ret+='N';\n    if(tmp==\"01110\")ret+='O';\n    if(tmp==\"01111\")ret+='P';\n    if(tmp==\"10000\")ret+='Q';\n    if(tmp==\"10001\")ret+='R';\n    if(tmp==\"10010\")ret+='S';\n    if(tmp==\"10011\")ret+='T';\n    if(tmp==\"10100\")ret+='U';\n    if(tmp==\"10101\")ret+='V';\n    if(tmp==\"10110\")ret+='W';\n    if(tmp==\"10111\")ret+='X';\n    if(tmp==\"11000\")ret+='Y';\n    if(tmp==\"11001\")ret+='Z';\n    if(tmp==\"11010\")ret+=' ';\n    if(tmp==\"11011\")ret+='.';\n    if(tmp==\"11100\")ret+=',';\n    if(tmp==\"11101\")ret+='_';\n    if(tmp==\"11110\")ret+='\\'';\n    if(tmp==\"11111\")ret+='?';\n  }\n  return ret;\n}\n\nint main(){\n  string s;\n  while(getline(cin, s)){\n    cout<<into(s)<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#define CASE(c,s) case c:return s\nusing namespace std;\n\nstring f(char c){\n\tswitch (c){\n\t\tCASE(' ', \"101\");\n\t\tCASE('\\'', \"000000\");\n\t\tCASE(',', \"000011\");\n\t\tCASE('-', \"10010001\");\n\t\tCASE('.', \"010001\");\n\t\tCASE('?', \"000001\");\n\t\tCASE('A', \"100101\");\n\t\tCASE('B', \"10011010\");\n\t\tCASE('C', \"0101\");\n\t\tCASE('D', \"0001\");\n\t\tCASE('E', \"110\");\n\t\tCASE('F', \"01001\");\n\t\tCASE('G', \"10011011\");\n\t\tCASE('H', \"010000\");\n\t\tCASE('I', \"0111\");\n\t\tCASE('J', \"10011000\");\n\t\tCASE('K', \"0110\");\n\t\tCASE('L', \"00100\");\n\t\tCASE('M', \"100110011\");\n\t\tCASE('N', \"10011110\");\n\t\tCASE('O', \"00101\");\n\t\tCASE('P', \"111\");\n\t\tCASE('Q', \"10011111\");\n\t\tCASE('R', \"1000\");\n\t\tCASE('S', \"00110\");\n\t\tCASE('T', \"00111\");\n\t\tCASE('U', \"10011100\");\n\t\tCASE('V', \"10011101\");\n\t\tCASE('W', \"000010\");\n\t\tCASE('X', \"10010010\");\n\t\tCASE('Y', \"10010011\");\n\t\tCASE('Z', \"10010000\");\n\tdefault:return \"\";\n\t}\n}\n\nint bitodec(string s){\n\tint sum=0;\n\tfor (int i = 0; i < s.size(); ++i){\n\t\tsum *= 2;\n\t\tsum += (s[i] - '0');\t\t\n\t}\n\treturn sum;\n}\n\nchar g(string s){\n\tchar c[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\treturn c[bitodec(s)];\n}\n\nint main(){\n\tstring s,r;\n\tint i;\n\n\twhile (getline(cin, s)){\n\t\ti = 0;\n\t\tr = \"\";\n\n\t\twhile (s[i] != '\\0'){\n\t\t\tr += f(s[i]);\n\t\t\t++i;\n\t\t}\n\n\t\tif (i % 5)for (int j = 4 - (i % 5); --j;)r += \"0\";\n\n\t\tfor (int j = 0; j <= r.size() / 5;++j)\n\t\t\tcout <<g(r.substr(j*5,5));\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <cctype>\n#include <sstream>\n#include <string>\n#include <list>\n#include <vector>\n#include <queue>\n#include <set>\n#include <stack>\n#include <map>\n#include <utility>\n#include <numeric>\n#include <algorithm>\n#include <iterator>\n#include <bitset>\n#include <complex>\n#include <fstream>\nusing namespace std;\ntypedef long long ll;\nconst double EPS = 1e-9;\ntypedef vector<double> vdouble;\ntypedef pair<double, double> pdouble;\n#define rep(i, n) REP(i, 0, n)\n#define ALL(v) v.begin(), v.end()\n#define MSG(a) cout << #a << \" \" << a << endl;\n#define REP(i, x, n) for(double i = x; i < n; i++)\ntemplate<class T> T RoundOff(T a){ return double(a+.5-(a<0)); }\ntemplate<class T, class C> void chmax(T& a, C b){ if(a < b) a = b; }\ntemplate<class T, class C> void chmin(T& a, C b){ if(b < a) a = b; }\ntemplate<class T, class C> pair<T, C> mp(T a, C b){ return make_pair(a, b); }\n\n#define SQR(a) (a * a)\nconst int INF = 1 << 30;\nconst double PI = acos(-1.0);\n\ntypedef complex<double> P;\n\nstruct Enemy \n{\t\n\tP p, v;\n\tdouble r;\n};\nvoid print(Enemy e)\n{\n\tcout << \"----------\" << endl;\n\tcout << \"Enemy Info\" << endl;\n\tMSG(e.p);\n\tMSG(e.v);\n\tMSG(e.r);\n\tcout << \"----------\" << endl << endl;\n}\n\nbool operator < (Enemy right, Enemy left)\n{\treturn abs(right.p) < abs(left.p);\t}\n\n// OÏ\ndouble cross(P a, P b)\n{\treturn a.real() * b.imag() - b.real() * a.imag();\t}\n\n// àÏ\ndouble dot(P a, P b)\n{\treturn a.real() * b.real() + a.imag() * b.imag();\t}\n\n// _ÆüªÌ£\ndouble dist(P a, P b, P c)\n{\n\tif(dot(b - a, c - a) < EPS) return abs(c - a);\n\tif(dot(a - b, c - b) < EPS) return abs(c - b);\n\t\n\treturn abs(cross(b - a, c - a)) / abs(b - a);\n}\n\n// ap ©ç av ÖÌüªª cp É é¼a r Ì~ÆÕË·é©Ç¤©\nbool hit(P ap, P av, P cp, double r)\n{\n\treturn dist(ap, av, cp) <= r;\t\n}\n\nint main()\n{\n    double N, R;\n    while(cin >> R >> N && (N || R))\n    {\n        vector<Enemy> enemy(N);\n        \n        rep(i, N)\n        {\n            double v;\n            cin >> enemy[i].p.real() >> enemy[i].p.imag() >> enemy[i].r >> v;\n\t\t\t\n\t\t\t\n\t\t\tdouble args = arg(enemy[i].p);\n            enemy[i].v.real() = -cos(args) * v;\n\t\t\tenemy[i].v.imag() = -sin(args) * v;\n        }\n        \n        int res = 0, f = 0;\n        \n\t\twhile(!enemy.empty())\n        {\n\t\t\t// iR\n\t\t\tfor(short i = enemy.size() - 1; 0 <= i; i--)\n\t\t\t{\t\t\t\t\n\t\t\t\t// Ú®üªøÍ«EÆÕË·éÈçJEg\n\t\t\t\tif(hit(enemy[i].p, enemy[i].p + enemy[i].v, P(0, 0), R))\n\t\t\t\t{\n\t\t\t\t\tenemy.erase(enemy.begin() + i);\n\t\t\t\t\tres++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tenemy[i].p += enemy[i].v;\n\t\t\t}\n\t\t\t\n\t\t\t// WI\n\t\t\tP aim = (*min_element(ALL(enemy))).p;\n\n            \n            // UÎÛÉÆËAÆËüãÌGðê|\n\t\t\tfor(short i = enemy.size() - 1; 0 <= i; i--)\n            {\n\t\t\t\t// ÄµÄ¢­\n\t\t\t\tif(hit(P(0, 0), aim * 10000.0 / abs(aim), enemy[i].p, enemy[i].r))\n\t\t\t\t{\n\t\t\t\t\tenemy.erase(enemy.begin() + i);\n\t\t\t\t}\n\t\t\t}\n        }\n        \n        cout << res << endl;\n\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<climits>\n#include<queue>\n#include<map>\n#include<set>\n#include<vector>\n#include<list>\n#include<stack>\n#include<cstring>\n#include<string>\n#include<cmath>\nusing namespace std;\n#define LATTE 1000000000\n\nint main(){\n\tchar con1[32][9]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\tchar S[200],con2[32];\n\tfor(int i=0;i<26;i++) con2[i] = 'A'+i;\n\tcon2[26]=' '; con2[27]='.'; con2[28]=','; con2[29]='-'; con2[30]='\\'',con2[31]='?';\n\twhile(true){\n\t\tint r,c;\n\t\tchar cons[1000]={};\n\t\tfor(int i=0;r=scanf(\"%c\",&S[i]),S[i]!='\\n';i++){\n\t\t\tif(r==EOF) return 0;\n\t\t\tif(S[i]==' ') c = 0;\n\t\t\telse if(S[i]=='\\'') c = 1;\n\t\t\telse if(S[i]==',') c = 2;\n\t\t\telse if(S[i]=='-') c = 3;\n\t\t\telse if(S[i]=='.') c = 4;\n\t\t\telse if(S[i]=='?') c = 5;\n\t\t\telse c = S[i]-'A'+6;\n\t\t\tstrcat(cons,con1[c]);\n\t\t}\n\t\tint len = strlen(cons);\n\t\twhile(len%5!=0){\n\t\t\tcons[len]='0'; cons[++len]='\\0';\n\t\t}\n\t\tfor(int i=0;i<len;){\n\t\t\tint latte=0;\n\t\t\tfor(int j=0;j<5;i++,j++){\n\t\t\t\t//printf(\"%c\",cons[i]);\n\t\t\t\tlatte = latte<<1;\n\t\t\t\tif(cons[i]=='1') latte += 1;\n\t\t\t}//printf(\" \");\n\t\t\tprintf(\"%c\",con2[latte]);\n\t\t}puts(\"\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\n#include<algorithm>\n\nusing namespace std;\n\nvoid MakeFirstList(map<char, string>&);\nvoid MakeSecondList(map<string, char>&);\n\nint main(){\n  int i;\n  string s, t, r, u;\n  map<char, string> first;\n  map<string, char> second;\n\n  MakeFirstList(first);\n  MakeSecondList(second);\n\n  while(getline(cin, s)){\n    for(i=0; i<s.size(); ++i)\n      copy(first[s[i]].begin(), first[s[i]].end(), back_inserter(t));\n    const string zero(5-t.size()%5, '0');\n    copy(zero.begin(), zero.end(), back_inserter(t));\n\n    string::iterator iter = t.begin();\n    while(iter != t.end()){\n      copy(iter, iter+5, back_inserter(r));\n      u.insert(u.end(), second[r]);\n      r.clear();\n      iter += 5;\n    }\n\n    cout << u << endl;\n\n    s.clear();\n    t.clear();\n    r.clear();\n    u.clear();\n  }\n\n  return 0;\n}\n\nvoid MakeFirstList(map<char, string>& s){\n  s[' '] = \"101\";\n  s['\\''] = \"000000\";\n  s[','] = \"000011\";\n  s['_'] = \"10010001\";\n  s['.'] = \"010001\";\n  s['?'] = \"000001\";\n  s['A'] = \"100101\";\n  s['B'] = \"10011010\";\n  s['C'] = \"0101\";\n  s['D'] = \"0001\";\n  s['E'] = \"110\";\n  s['F'] = \"01001\";\n  s['G'] = \"10011011\";\n  s['H'] = \"010000\";\n  s['I'] = \"0111\";\n  s['J'] = \"10011000\";\n  s['K'] = \"0110\";\n  s['L'] = \"00100\";\n  s['M'] = \"10011001\";\n  s['N'] = \"10011110\";\n  s['O'] = \"00101\";\n  s['P'] = \"111\";\n  s['Q'] = \"10011111\";\n  s['R'] = \"1000\";\n  s['S'] = \"00110\";\n  s['T'] = \"00111\";\n  s['U'] = \"10011100\";\n  s['V'] = \"10011101\";\n  s['W'] = \"000010\";\n  s['X'] = \"10010010\";\n  s['Y'] = \"10010011\";\n  s['Z'] = \"10010000\";\n}\n\nvoid MakeSecondList(map<string, char>& s){\n  s[\"00000\"] = 'A';\n  s[\"00001\"] = 'B';\n  s[\"00010\"] = 'C';\n  s[\"00011\"] = 'D';\n  s[\"00100\"] = 'E';\n  s[\"00101\"] = 'F';\n  s[\"00110\"] = 'G';\n  s[\"00111\"] = 'H';\n  s[\"01000\"] = 'I';\n  s[\"01001\"] = 'J';\n  s[\"01010\"] = 'K';\n  s[\"01011\"] = 'L';\n  s[\"01100\"] = 'M';\n  s[\"01101\"] = 'N';\n  s[\"01110\"] = 'O';\n  s[\"01111\"] = 'P';\n  s[\"10000\"] = 'Q';\n  s[\"10001\"] = 'R';\n  s[\"10010\"] = 'S';\n  s[\"10011\"] = 'T';\n  s[\"10100\"] = 'U';\n  s[\"10101\"] = 'V';\n  s[\"10110\"] = 'W';\n  s[\"10111\"] = 'X';\n  s[\"11000\"] = 'Y';\n  s[\"11001\"] = 'Z';\n  s[\"11010\"] = ' ';\n  s[\"11011\"] = '.';\n  s[\"11100\"] = ',';\n  s[\"11101\"] = '_';\n  s[\"11110\"] = '\\'';\n  s[\"11111\"] = '?';\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<array>\n#include<bitset>\n#include<cassert>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<functional>\n#include<limits>\n#include<list>\n#include<map>\n#include<numeric>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<unordered_map>\n#include<queue>\n#include<vector>\nusing namespace std;\n\nusing ll = long long;\nusing ull = unsigned long long;\nusing pii = pair<int, int>;\n\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define RFOR(i,a,b) for(int i=(b)-1;i>=(a);i--)\n#define REP(i,n) for(int i=0;i<(n);i++)\n#define RREP(i,n) for(int i=(n)-1;i>=0;i--)\n#define ALL(a) (a).begin(),(a).end()\n#define DUMP(o) {cerr<<#o<<\" \"<<o<<endl;}\n#define DUMPC(o) {cerr<<#o; for(auto &e:(o))cerr<<\" \"<<e;cerr<<endl;}\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\nconst int MOD = 1e9 + 7;\n\nsigned main() {\n\tunordered_map<char, string> a;\n\tunordered_map<string, string> b;\n\ta[' '] = \"101\";\n\ta['\\''] = \"000000\";\n\ta[','] = \"000011\";\n\ta['-'] = \"10010001\";\n\ta['.'] = \"010001\";\n\ta['?'] = \"000001\";\n\ta['A'] = \"100101\";\n\ta['B'] = \"10011010\";\n\ta['C'] = \"0101\";\n\ta['D'] = \"0001\";\n\ta['E'] = \"110\";\n\ta['F'] = \"01001\";\n\ta['G'] = \"10011011\";\n\ta['H'] = \"010000\";\n\ta['I'] = \"0111\";\n\ta['J'] = \"10011000\";\n\ta['K'] = \"0110\";\n\ta['L'] = \"00100\";\n\ta['M'] = \"10011001\";\n\ta['N'] = \"10011110\";\n\ta['O'] = \"00101\";\n\ta['P'] = \"111\";\n\ta['Q'] = \"10011111\";\n\ta['R'] = \"1000\";\n\ta['S'] = \"00110\";\n\ta['T'] = \"00111\";\n\ta['U'] = \"10011100\";\n\ta['V'] = \"10011101\";\n\ta['W'] = \"000010\";\n\ta['X'] = \"10010010\";\n\ta['Y'] = \"10010011\";\n\ta['Z'] = \"10010000\";\n\tb[\"00000\"] = \"A\";\n\tb[\"00001\"] = \"B\";\n\tb[\"00010\"] = \"C\";\n\tb[\"00011\"] = \"D\";\n\tb[\"00100\"] = \"E\";\n\tb[\"00101\"] = \"F\";\n\tb[\"00110\"] = \"G\";\n\tb[\"00111\"] = \"H\";\n\tb[\"01000\"] = \"I\";\n\tb[\"01001\"] = \"J\";\n\tb[\"01010\"] = \"K\";\n\tb[\"01011\"] = \"L\";\n\tb[\"01100\"] = \"M\";\n\tb[\"01101\"] = \"N\";\n\tb[\"01110\"] = \"O\";\n\tb[\"01111\"] = \"P\";\n\tb[\"10000\"] = \"Q\";\n\tb[\"10001\"] = \"R\";\n\tb[\"10010\"] = \"S\";\n\tb[\"10011\"] = \"T\";\n\tb[\"10100\"] = \"U\";\n\tb[\"10101\"] = \"V\";\n\tb[\"10110\"] = \"W\";\n\tb[\"10111\"] = \"X\";\n\tb[\"11000\"] = \"Y\";\n\tb[\"11001\"] = \"Z\";\n\tb[\"11010\"] = \" \";\n\tb[\"11011\"] = \".\";\n\tb[\"11100\"] = \",\";\n\tb[\"11101\"] = \"-\";\n\tb[\"11110\"] = \"'\";\n\tb[\"11111\"] = \"?\";\n\n\tstring s; getline(cin, s);\n\tstring t = \"\";\n\tREP(i, s.size()) t += a[s[i]];\n\tint c = (5 - t.size() % 5) % 5;\n\tREP(i, c)t += \"0\";\n\tstring ans = \"\";\n\tfor (int i = 0; i < t.size(); i += 5) {\n\t\tans += b[t.substr(i, 5)];\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<deque>\n#include<map>\n#include<set>\n#include<string>\n#include<sstream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<cctype>\n#include<climits>\nusing namespace std;\n#define REP(i, j) for(int i = 0; i < j; i++)\n#define FOR(i, j, k) for(int i = j; i < k; i++)\n#define P pair<int, int>\nconst int INF = INT_MAX / 2;\n\nint main(){\n    map<char, string> f;\n    f[' '] = \"101\";\n    f['\\''] = \"00000\";\n    f[','] = \"000011\";\n    f['-'] = \"10010001\";\n    f['.'] = \"010001\";\n    f['?'] = \"000001\";\n    f['A'] = \"100101\";\n    f['B'] = \"10011010\";\n    f['C'] = \"0101\";\n    f['D'] = \"0001\";\n    f['E'] = \"110\";\n    f['F'] = \"01001\";\n    f['G'] = \"10011011\";\n    f['H'] = \"010000\";\n    f['I'] = \"0111\";\n    f['J'] = \"10011000\";\n    f['K'] = \"0110\";\n    f['L'] = \"00100\";\n    f['M'] = \"10011001\";\n    f['N'] = \"10011110\";\n    f['O'] = \"00101\";\n    f['P'] = \"111\";\n    f['Q'] = \"10011111\";\n    f['R'] = \"1000\";\n    f['S'] = \"00110\";\n    f['T'] = \"00111\";\n    f['U'] = \"10011100\";\n    f['V'] = \"10011101\";\n    f['W'] = \"000010\";\n    f['X'] = \"10010010\";\n    f['Y'] = \"10010011\";\n    f['Z'] = \"10010000\";\n\n    map<string, char> s;\n    s[\"00000\"] = 'A';\n    s[\"00001\"] = 'B';\n    s[\"00010\"] = 'C';\n    s[\"00011\"] = 'D';\n    s[\"00100\"] = 'E';\n    s[\"00101\"] = 'F';\n    s[\"00110\"] = 'G';\n    s[\"00111\"] = 'H';\n    s[\"01000\"] = 'I';\n    s[\"01001\"] = 'J';\n    s[\"01010\"] = 'K';\n    s[\"01011\"] = 'L';\n    s[\"01100\"] = 'M';\n    s[\"01101\"] = 'N';\n    s[\"01110\"] = 'O';\n    s[\"01111\"] = 'P';\n    s[\"10000\"] = 'Q';\n    s[\"10001\"] = 'R';\n    s[\"10010\"] = 'S';\n    s[\"10011\"] = 'T';\n    s[\"10100\"] = 'U';\n    s[\"10101\"] = 'V';\n    s[\"10110\"] = 'W';\n    s[\"10111\"] = 'X';\n    s[\"11000\"] = 'Y';\n    s[\"11001\"] = 'Z';\n    s[\"11010\"] = ' ';\n    s[\"11011\"] = '.';\n    s[\"11100\"] = ',';\n    s[\"11101\"] = '-';\n    s[\"11110\"] = '\\'';\n    s[\"11111\"] = '?';\n\n    string inp;\n    while(getline(cin, inp)){\n        string tmp = \"\";\n        REP(i, inp.length()) tmp += f[inp[i]];\n        while(tmp.size() % 5 != 0) tmp += '0';\n        string ans = \"\";\n        for(int i = 0; i < tmp.size(); i += 5) ans += s[tmp.substr(i, 5)];\n        cout <<ans <<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 8\n#define CIPHER_NUM 32\n#define NUL 0x00\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\n#define TEXT_MAX 100\n\nint main(void)\n{\n\tshort i = 0;\n\tshort j = 0;\n\n\tshort text_length = 0;\n\tchar input_text[TEXT_MAX];\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tchar barcode[801];\n\tchar code_fivecut[160][5];\n\t\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"text_length=%d\\n\",text_length);\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//printf(\"barcode = %s\\n\",barcode);\n\t\t\n\t\tint barcode_length = 0;\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"barcode_length =%d\\n\", barcode_length);\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t\t//printf(\"c=%d\\n\",c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor(i = 0;i < 800 ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"count= %d\\n\",count);\n\t\t\n\t\t/*\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tprintf(\"a = %c\",code_fivecut[i][j]);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}*/\n\t\t\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(k = 0; k < CIPHER_NUM; k++)\n\t\t\t{\n\t\t\t\tfor(l = 0; l < 5; l++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][l] == code[k].sign_change_charcter[l])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[k].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\t\n\t\t\n\t\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<map>\n#include<cmath>\nusing namespace std;\nint change(string x);\nbool deb=0;\nint main(void){\n\n    string str,str2;\n    map<char,string> enc;\n    enc[' '] = \"101\";\n    enc['\\''] = \"000000\";\n    enc[','] = \"000011\";\n    enc['-'] = \"10010001\";\n    enc['.'] = \"010001\";\n    enc['?'] = \"000001\";\n    enc['A'] = \"100101\";\n    enc['B'] = \"10011010\";\n    enc['C'] = \"0101\";\n    enc['D'] = \"0001\";\n    enc['E'] = \"110\";\n    enc['F'] = \"01001\";\n    enc['G'] = \"10011011\";\n    enc['H'] = \"010000\";\n    enc['I'] = \"0111\";\n    enc['J'] = \"10011000\";\n    enc['K'] = \"0110\";\n    enc['L'] = \"00100\";\n    enc['M'] = \"10011001\";\n    enc['N'] = \"10011110\";\n    enc['O'] = \"00101\";\n    enc['P'] = \"111\";\n    enc['Q'] = \"10011111\";\n    enc['R'] = \"1000\";\n    enc['S'] = \"00110\";\n    enc['T'] = \"00111\";\n    enc['U'] = \"10011100\";\n    enc['V'] = \"10011101\";\n    enc['W'] = \"000010\";\n    enc['X'] = \"10010010\";\n    enc['Y'] = \"10010011\";\n    enc['Z'] = \"10010000\";\n    string dec = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ \\',-.?\";\n\n    string ans=\"\",sub=\"\";\n    while(getline(cin,str)){\n        for(int i=0;i<str.length();i++){\n            str2+=enc[str[i]];\n        }\n        for(int i=0;i<str2.length()%5;i++){\n            str2+='0';\n        }\n        for(int i=0;i<str2.length()/5;i++){\n            ans+=str2[5*i];\n            ans+=str2[5*i+1];\n            ans+=str2[5*i+2];\n            ans+=str2[5*i+3];\n            ans+=str2[5*i+4];\n            if(deb)cout<<\".\"<<ans<<endl;\n            sub+=dec[change(ans)];\n            ans=\"\";\n        }\n        cout<<sub<<endl;\n        sub=str2=str=ans=\"\";\n    }\n\n    return 0;\n}\nint change(string x){\n    int re=0;\n    if(deb)cout<<\"-\"<<x<<endl;\n    for(int i=x.length()-1,j=0;i>=0;i--,j++){\n        if(x[i]=='1')re+=pow(2,j);\n    }\n    if(deb)cout<<\"+\"<<re<<endl;\n    return re;\n}"
  },
  {
    "language": "C++",
    "code": "/*\n\t0088:The Code A Doctor Loved\n*/\n#include\t<iostream>\n#include\t<string>\n\nusing namespace std;\n\nconst string convertList[2][32] = \n\t{\n\t\t{\n\t\t\t  \"100101\", \"10011010\",     \"0101\",     \"0001\",      \"110\",    \"01001\", \"10011011\",   \"010000\",\n\t\t\t    \"0111\", \"10011000\",     \"0110\",    \"00100\", \"10011001\", \"10011110\",    \"00101\",      \"111\",\n\t\t\t\"10011111\",     \"1000\",    \"00110\",    \"00111\", \"10011100\", \"10011101\",   \"000010\", \"10010010\",\n\t\t\t\"10010011\", \"10010000\",      \"101\",   \"000000\",   \"000011\", \"10010001\",   \"010001\",   \"000001\"\n\t\t},\n\t\t{\n\t\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\t\"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\t\"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"\n\t\t}\n\t};\n\nconst string charList = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint main(void) {\n\twhile(1) {\n\t\tstring str, buff, result;\n\t\t\n\t\tgetline(cin, str);\n\t\tif( cin.eof() ) { break; }\n\t\t\n\t\tstring::iterator str_it = str.begin();\n\t\twhile(str_it != str.end()) {\n\t\t\tfor(int i = 0; i < 32; i++) {\n\t\t\t\tif(*str_it == charList[i]) {\n\t\t\t\t\tbuff += convertList[0][i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstr_it++;\n\t\t}\n\t\twhile( buff.size() % 5 != 0 ) {\n\t\t\tbuff += '0';\n\t\t}\n\t\tstring::iterator buff_it = buff.begin();\n\t\twhile( buff_it != buff.end() ) {\n\t\t\tstring buffbuff;\n\t\t\t\n\t\t\tfor(int i = 0; i < 5; i++, buff_it++) {\n\t\t\t\tbuffbuff += *buff_it;\n\t\t\t}\n\t\t\tfor(int i = 0; i < 32; i++) {\n\t\t\t\tif(buffbuff == convertList[1][i]) {\n\t\t\t\t\tresult += charList[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcout << result << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <string>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <sstream>\n#include <cstdlib>\n#include <cstring>\n#include <functional>\n#include <numeric>\n#include <cmath>\n#include <climits>\n#include <limits>\n#include <cfloat>\n#include <fstream>\nusing namespace std;\n\nstruct ETABLE{\n\tchar cha;\n\tstring code;\n};\n\nstruct DTABLE{\n\tstring code;\n\tchar cha;\n}; \n\nint main()\n{\n\tconst ETABLE s[] = {\n{' ', \"101\"},\n{'\\'', \"000000\"},\n{',', \"000011\"},\n{'-', \"10010001\"},\n{'.', \"010001\"},\n{'?', \"000001\"},\n{'A', \"100101\"},\n{'B', \"10011010\"},\n{'C', \"0101\"},\n{'D', \"0001\"},\n{'E', \"110\"},\n{'F', \"01001\"},\n{'G', \"10011011\"},\n{'H', \"010000\"},\n{'I', \"0111\"},\n{'J', \"10011000\"},\n{'K', \"0110\"},\n{'L', \"00100\"},\n{'M', \"10011001\"},\n{'N', \"10011110\"},\n{'O', \"00101\"},\n{'P', \"111\"},\n{'Q', \"10011111\"},\n{'R', \"1000\"},\n{'S', \"00110\"},\n{'T', \"00111\"},\n{'U', \"10011100\"},\n{'V', \"10011101\"},\n{'W', \"000010\"},\n{'X', \"10010010\"},\n{'Y', \"10010011\"},\n{'Z', \"10010000\"}\n};\n\tconst DTABLE t[] = {\n{\"00000\",'A'},\n{\"00001\",'B'},\n{\"00010\",'C'},\n{\"00011\",'D'},\n{\"00100\",'E'},\n{\"00101\",'F'},\n{\"00110\",'G'},\n{\"00111\",'H'},\n{\"01000\",'I'},\n{\"01001\",'J'},\n{\"01010\",'K'},\n{\"01011\",'L'},\n{\"01100\",'M'},\n{\"01101\",'N'},\n{\"01110\",'O'},\n{\"01111\",'P'},\n{\"10000\",'Q'},\n{\"10001\",'R'},\n{\"10010\",'S'},\n{\"10011\",'T'},\n{\"10100\",'U'},\n{\"10101\",'V'},\n{\"10110\",'W'},\n{\"10111\",'X'},\n{\"11000\",'Y'},\n{\"11001\",'Z'},\n{\"11010\",' '},\n{\"11011\",'.'},\n{\"11100\",','},\n{\"11101\",'-'},\n{\"11110\",'\\''},\n{\"11111\",'?'}\n};\n\n//\tfreopen(\"testcase.codedoctor\", \"r\", stdin);\n\tstring str = \"\";\n\n\tmap <char, string > encode;\n\tmap <string, char > decode;\n\tint i;\n\n//\tcout << \"sizeof (code): \" << sizeof (s)/sizeof (s[0]) << endl;\n\n\tfor (i = 0; i < sizeof (s)/sizeof (s[0]); ++i){\n\t\tencode[s[i].cha] = s[i].code;\n\t\tdecode[t[i].code] = t[i].cha;\n\t} // end for\n/*\n\tmap <char, string >::iterator it = encode.begin();\n\tfor (; it != encode.end(); ++it ){\n\t\tcout << (*it).first << ':' << (*it).second << endl;\n\t} // end for\n\n\tmap <string, char >::iterator it = decode.begin();\n\tfor (; it != decode.end(); ++it ){\n\t\tcout << (*it).first << ':' << (*it).second << endl;\n\t} // end for\n*/\n\twhile (getline (cin, str ) ){\n\t\tstring temp = \"\";\n\t\tint len = str.length();\n\n\t\tfor (i = 0; i < len; ++i){\n\t\t\tchar c = str[i];\n\t\t\ttemp += encode[c];\n\t\t} // end for\n\t\tif (temp.length() % 5 != 0 ){\n\t\t\ttemp += string (5 - temp.length() % 5, '0' );\n\t\t} // end if\n\t\t//cout << temp << endl;\n\t\tlen = temp.length();\n\n\t\tfor (i = 0; i < len; i += 5 ){\n\t\t\tstring str = temp.substr (i, 5);\n//\t\t\tcout << \"str: \" << str << endl;\n\t\t\tcout << decode[str];\n\t\t} // end for\n\t\tcout << endl;\t\t\n\t\t\n\t} // end loop\n\t\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nstring ctof(char x) {\n\tif (x == ' ')return \"101\";\n\tif (x == '\\'')return\"000000\";\n\tif (x == ',')return\"000011\";\n\tif (x == '-')return \"10010001\";\n\tif (x == '.')return\"010001\";\n\tif (x == '?')return\"000001\";\n\tif (x == 'A')return\"100101\";\n\tif (x == 'B')return\"10011010\";\n\tif (x == 'C')return\"0101\";\n\tif (x == 'D')return\"0001\";\n\tif (x == 'E')return \"110\";\n\tif (x == 'F')return \"01001\";\n\tif (x == 'G')return\"10011011\";\n\tif (x == 'H')return\"010000\";\n\tif (x == 'I')return\"0111\";\n\tif (x == 'J')return\"10011000\";\n\tif (x == 'K')return\"0110\";\n\tif (x == 'L')return\"00100\";\n\tif (x == 'M')return\"10011001\";\n\tif (x == 'N')return\"10011110\";\n\tif (x == 'O')return\"00101\";\n\tif (x == 'P')return\"111\";\n\tif (x == 'Q')return\"10011111\";\n\tif (x == 'R')return\"1000\";\n\tif (x == 'S')return\"00110\";\n\tif (x == 'T')return\"00111\";\n\tif (x == 'U')return\"10011100\";\n\tif (x == 'V')return\"10011101\";\n\tif (x == 'W')return\"000010\";\n\tif (x == 'X')return\"10010010\";\n\tif (x == 'Y')return\"10010011\";\n\telse return\"10010000\";\n}\n\nchar ftoc(string x) {\n\tif (x == \"00000\")return'A';\n\tif (x == \"00001\")return'B';\n\tif (x == \"00010\")return'C';\n\tif (x == \"00011\")return'D';\n\tif (x == \"00100\")return'E';\n\tif (x == \"00101\")return'F';\n\tif (x == \"00110\")return'G';\n\tif (x == \"00111\")return'H';\n\tif (x == \"01000\")return'I';\n\tif (x == \"01001\")return'J';\n\tif (x == \"01010\")return'K';\n\tif (x == \"01011\")return'L';\n\tif (x == \"01100\")return'M';\n\tif (x == \"01101\")return'N';\n\tif (x == \"01110\")return'O';\n\tif (x == \"01111\")return'P';\n\tif (x == \"10000\")return'Q';\n\tif (x == \"10001\")return'R';\n\tif (x == \"10010\")return'S';\n\tif (x == \"10011\")return'T';\n\tif (x == \"10100\")return'U';\n\tif (x == \"10101\")return'V';\n\tif (x == \"10110\")return'W';\n\tif (x == \"10111\")return'X';\n\tif (x == \"11000\")return'Y';\n\tif (x == \"11001\")return'Z';\n\tif (x == \"11010\")return' ';\n\tif (x == \"11011\")return'.';\n\tif (x == \"11100\")return',';\n\tif (x == \"11101\")return'-';\n\tif (x == \"11110\")return'\\'';\n\telse return'?';\n}\n\nint main() {\n\tstring s;\n\tgetline(cin, s);\n\tstring sa;\n\tsa = ctof(s[0]);\n\tfor (int i = 1;i < s.size();i++) {\n\t\tsa += ctof(s[i]);\n\t}\n\tint z = sa.size();\n\tif (z % 5 != 0) {\n\t\tfor (int i = z % 5;i <= 5;i++)sa.push_back('0');\n\t}\n\tstring sb;\n\tfor (int i = 0;i < z;i += 5) {\n\t\tstring c = sa.substr(i, 5);\n\t\tsb.push_back(ftoc(c));\n\t}\n\tcout << sb << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<string>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\n\nint main(){\n\tchar chs[]=\" .,-'?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tstring codes[32]={\n\t\t\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n\t\t,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n\t\t,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n\t\t,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\t\n\tstring in;\n\tstring s,t,ans;\n\twhile(getline(cin,in)){\n\t\tfor(int i=0;i<in.size();i++){\n\t\t\tif(in[i]=='\\n')s+=' ';\n\t\t\telse s+=in[i];\n\t\t}\n\t}\n\tfor(int i=0;i<s.size();i++){\n\t\tt += codes[find(chs,chs+32,s[i])-chs];\n\t}\n\tif(t.size()%5)t.append(5-t.size()%5,'0');\n\tfor(int i=0;i<t.size();i+=5){\n\t\tint n=0;\n\t\tfor(int j=0;j<5;j++)n = n<<1|t[i+j]-'0';\n\t\tif(n<26)ans += 'A'+n;\n\t\telse ans += \" .,-'?\"[n-26];\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <iomanip>\n#include <queue>\n#include <set>\n#include <map>\n#include <cstdlib>\n#include <cstdio>\n#include <cmath>\n#include <bitset>\nusing namespace std;\n\n\nconst double EPS = 1e-9;\n\nint main(){\n\tstring enc[256];\n\tenc[' '] = \"101\";\n\tenc['\\''] = \"000000\";\n\tenc[','] = \"000011\";\n\tenc['-'] = \"10010001\";\n\tenc['.'] = \"010001\";\n\tenc['?'] = \"000001\";\n\tenc['A'] = \"100101\";\n\tenc['B'] = \"10011010\";\n\tenc['C'] = \"0101\";\n\tenc['D'] = \"0001\";\n\tenc['E'] = \"110\";\n\tenc['F'] = \"01001\";\n\tenc['G'] = \"10011011\";\n\tenc['H'] = \"010000\";\n\tenc['I'] = \"0111\";\n\tenc['J'] = \"10011000\";\n\tenc['K'] = \"0110\";\n\tenc['L'] = \"00100\";\n\tenc['M'] = \"10011001\";\n\tenc['N'] = \"10011110\";\n\tenc['O'] = \"00101\";\n\tenc['P'] = \"111\";\n\tenc['Q'] = \"10011111\";\n\tenc['R'] = \"1000\";\n\tenc['S'] = \"00110\";\n\tenc['T'] = \"00111\";\n\tenc['U'] = \"10011100\";\n\tenc['V'] = \"10011101\";\n\tenc['W'] = \"000010\";\n\tenc['X'] = \"10010010\";\n\tenc['Y'] = \"10010011\";\n\tenc['Z'] = \"10010000\";\n\n\tstring d = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\tmap<string, char> dec;\n\tfor(int i = 0; i < 32; i++){\n\t\tdec[bitset<5>(i).to_string()] = d[i];\n\t}\n\n\tmap<string, char>::iterator it = dec.begin();\n\tfor(; it != dec.end(); it++){\n\t\tcout << it->second << ':' << it->first << endl;\n\t}\n\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tstring e = \"\";\n\t\tfor(int i = 0; i < s.size(); i++){\n\t\t\te += enc[s[i]];\n\t\t}\n\t\twhile(e.size()%5 != 0){\n\t\t\te += \"0\";\n\t\t}\n\t\tfor(int i = 0; i < e.size(); i+=5){\n\t\t\tcout << dec[e.substr(i, 5)];\n\t\t}\n\t\tcout << endl;\n\t}\n\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdlib>\n#include<string>\nusing namespace std;\nstring tbl01[]={\n\t\"101\",\"000000\",\"000011\",\"1001001\",\"010001\",\"000001\",\"100101\",\"10011010\",\n\t\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\t\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n\t\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"\n};\nstring tbl01_idx=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nstring str_AB=\" .,-'?\";\n\nstring to01(string &s){\n\tstring r;\n\tfor(int i=0;i<s.size();i++)r+=tbl01[tbl01_idx.find(s[i])];\n\twhile(r.size()%5)r+='0';\n\treturn r;\n}\nstring toAB(string &s){\n\tstring r,t;\n\tfor(int i=0;i<s.size();i+=5){\n\t\tt=s.substr(i,5);\n\t\tint c=strtol(t.c_str(),NULL,2);\n\t\tr+=c>25?str_AB[c-26]:c+'A';\n\t}\n\treturn r;\n}\nint main(){\n\tstring s;\n\twhile(getline(cin,s))s=to01(s),cout<<toAB(s)<<endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<string>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\n\nint main(){\n\tchar chs[]=\" .,-'?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tstring codes[32]={\n\t\t\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n\t\t,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n\t\t,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n\t\t,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\t\n\tstring in;\n\tstring s,t,ans;\n\tgetline(cin,in);\n\tfor(int i=0;i<in.size();i++){\n\t\tif(in[i]=='\\n')s+=' ';\n\t\telse s+=in[i];\n\t}\n\twhile(getline(cin,in)){\n\t\ts+=' ';\n\t\tfor(int i=0;i<in.size();i++){\n\t\t\tif(in[i]=='\\n')s+=' ';\n\t\t\telse s+=in[i];\n\t\t}\n\t}\n\tfor(int i=0;i<s.size();i++){\n\t\tt += codes[find(chs,chs+32,s[i])-chs];\n\t}\n\tif(t.size()%5)t.append(5-t.size()%5,'0');\n\tfor(int i=0;i<t.size();i+=5){\n\t\tint n=0;\n\t\tfor(int j=0;j<5;j++)n = n<<1|t[i+j]-'0';\n\t\tif(n<26)ans += 'A'+n;\n\t\telse ans += \" .,-'?\"[n-26];\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "// clang-format off\n#include <bits/stdc++.h>\n#define int long long\n#define main signed main()\n#define loop(i, a, n) for (int i = (a); i < (n); i++)\n#define rep(i, n) loop(i, 0, n)\n#define forever for (;;)\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\n#define prec(n) fixed << setprecision(n)\ntemplate<typename A> using V = std::vector<A>;\ntemplate<typename A> using F = std::function<A>;\ntemplate<typename A, typename B> using P = std::pair<A, B>;\nusing pii = P<int, int>;\nusing vi = V<int>;\nusing vd = V<double>;\nusing vs = V<std::string>;\nusing vpii = V<pii>;\nusing vvi = V<vi>;\nusing vvpii = V<vpii>;\nconstexpr int INF = sizeof(int) == sizeof(long long) ? 1000000000000000000LL : 1000000000;\nconstexpr int MOD = 1000000007;\nconstexpr double PI = acos(-1);\ntemplate<typename A, typename B> bool cmin(A &a, const B &b) { return a > b ? (a = b, true) : false; }\ntemplate<typename A, typename B> bool cmax(A &a, const B &b) { return a < b ? (a = b, true) : false; }\ntemplate<typename T> std::istream &operator>>(std::istream &is, std::vector<T> &v) { for (T &x : v) is >> x; return is; }\ntemplate<typename A, typename B> std::istream &operator>>(std::istream &is, std::pair<A, B> &p) { is >> p.first; is >> p.second; return is; }\nusing namespace std;\n// clang-format on\n\nstring f(char c) {\n  if (c == ' ') return \"101\";\n  if (c == '\\'') return \"000000\";\n  if (c == ',') return \"000011\";\n  if (c == '-') return \"10010001\";\n  if (c == '.') return \"010001\";\n  if (c == '?') return \"000001\";\n  if (c == 'A') return \"100101\";\n  if (c == 'B') return \"10011010\";\n  if (c == 'C') return \"0101\";\n  if (c == 'D') return \"0001\";\n  if (c == 'E') return \"110\";\n  if (c == 'F') return \"01001\";\n  if (c == 'G') return \"10011011\";\n  if (c == 'H') return \"010000\";\n  if (c == 'I') return \"0111\";\n  if (c == 'J') return \"10011000\";\n  if (c == 'K') return \"0110\";\n  if (c == 'L') return \"00100\";\n  if (c == 'M') return \"10011001\";\n  if (c == 'N') return \"10011110\";\n  if (c == 'O') return \"00101\";\n  if (c == 'P') return \"111\";\n  if (c == 'Q') return \"10011111\";\n  if (c == 'R') return \"1000\";\n  if (c == 'S') return \"00110\";\n  if (c == 'T') return \"00111\";\n  if (c == 'U') return \"10011100\";\n  if (c == 'V') return \"10011101\";\n  if (c == 'W') return \"000010\";\n  if (c == 'X') return \"10010010\";\n  if (c == 'Y') return \"10010011\";\n  if (c == 'Z') return \"10010000\";\n}\n\nchar g(int x) {\n  static string v = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  return v[x];\n}\n\nmain {\n  string s;\n  while (getline(cin, s)) {\n    string x;\n    for (auto &c : s) x += f(c);\n    x += string((5 - x.size() % 5) % 5, '0');\n    assert(x.size() % 5 == 0);\n    string r;\n    rep(i, x.size() / 5) r += g(stoi(x.substr(i * 5, 5), nullptr, 2));\n    cout << r << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  string src, tmp, dst;\n\n  while (getline(cin, src)) {\n    stringstream ss;\n    for (int i = 0; i < src.size(); i++)\n      if (src[i] == ' ')\n        ss << \"101\";\n      else if (src[i] == '\\'')\n        ss << \"000000\";\n      else if (src[i] == ',')\n        ss << \"000011\";\n      else if (src[i] == '-')\n        ss << \"10010001\";\n      else if (src[i] == '.')\n        ss << \"010001\";\n      else if (src[i] == '?')\n        ss << \"000001\";\n      else if (src[i] == 'A')\n        ss << \"100101\";\n      else if (src[i] == 'B')\n        ss << \"10011010\";\n      else if (src[i] == 'C')\n        ss << \"0101\";\n      else if (src[i] == 'D')\n        ss << \"0001\";\n      else if (src[i] == 'E')\n        ss << \"110\";\n      else if (src[i] == 'F')\n        ss << \"01001\";\n      else if (src[i] == 'G')\n        ss << \"10011011\";\n      else if (src[i] == 'H')\n        ss << \"010000\";\n      else if (src[i] == 'I')\n        ss << \"0111\";\n      else if (src[i] == 'J')\n        ss << \"10011000\";\n      else if (src[i] == 'K')\n        ss << \"0110\";\n      else if (src[i] == 'L')\n        ss << \"00100\";\n      else if (src[i] == 'M')\n        ss << \"10011001\";\n      else if (src[i] == 'N')\n        ss << \"10011110\";\n      else if (src[i] == 'O')\n        ss << \"00101\";\n      else if (src[i] == 'P')\n        ss << \"111\";\n      else if (src[i] == 'Q')\n        ss << \"10011111\";\n      else if (src[i] == 'R')\n        ss << \"1000\";\n      else if (src[i] == 'S')\n        ss << \"00110\";\n      else if (src[i] == 'T')\n        ss << \"00111\";\n      else if (src[i] == 'U')\n        ss << \"10011100\";\n      else if (src[i] == 'V')\n        ss << \"10011101\";\n      else if (src[i] == 'W')\n        ss << \"000010\";\n      else if (src[i] == 'X')\n        ss << \"10010010\";\n      else if (src[i] == 'Y')\n        ss << \"10010011\";\n      else if (src[i] == 'Z')\n        ss << \"10010000\";\n\n    tmp = ss.str();\n    int piyo = 5 - tmp.size() % 5;\n    for (int i = 0; i < piyo; i++)\n      tmp += '0';\n    //cout << tmp << endl;                                                                                                                                                                                                                                                                                                                          \n\n    for (int i = 0; i < tmp.size(); i+=5) {\n      int hoge = 0;\n      for (int j = 0; j < 5; j++) {\n        hoge *= 2;\n        hoge += tmp[i+j]-'0';\n      }\n      //cout << hoge << endl;                                                                                                                                                                                                                                                                                                                       \n      if (0 <= hoge && hoge <= 25)\n        dst += ('A'+hoge);\n      else if (hoge == 26)\n        dst += ' ';\n      else if (hoge == 27)\n        dst += '.';\n      else if (hoge == 28)\n        dst += ',';\n      else if (hoge == 29)\n        dst += '-';\n      else if (hoge == 30)\n        dst += '\\'';\n      else if (hoge == 31)\n        dst += '?';\n    }\n    cout << dst << endl;\n    dst.clear();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <string>\nusing namespace std;\n\nint main(){\n  map<char,string> data1;\n  map<string,char> data2;\n\n  data1[' ']=\"101\";\n  data1['\\'']=\"000000\";\n  data1[',']=\"000011\";\n  data1['-']=\"10010001\";\n  data1['.']=\"010001\";\n  data1['?']=\"000001\";\n  data1['A']=\"100101\";\n  data1['B']=\"10011010\";\n  data1['C']=\"0101\";\n  data1['D']=\"0001\";\n  data1['E']=\"110\";\n  data1['F']=\"01001\";\n  data1['G']=\"10011011\";\n  data1['H']=\"010000\";\n  data1['I']=\"0111\";\n  data1['J']=\"10011000\";\n  data1['K']=\"0110\";\n  data1['L']=\"00100\";\n  data1['M']=\"10011001\";\n  data1['N']=\"10011110\";\n  data1['O']=\"00101\";\n  data1['P']=\"111\";\n  data1['Q']=\"10011111\";\n  data1['R']=\"1000\";\n  data1['S']=\"00110\";\n  data1['T']=\"00111\";\n  data1['U']=\"10011100\";\n  data1['V']=\"10011101\";\n  data1['W']=\"000010\";\n  data1['X']=\"10010010\";\n  data1['Y']=\"10010011\";\n  data1['Z']=\"10010000\";\n\n  data2[\"00000\"]='A';\n  data2[\"00001\"]='B';\n  data2[\"00010\"]='C';\n  data2[\"00011\"]='D';\n  data2[\"00100\"]='E';\n  data2[\"00101\"]='F';\n  data2[\"00110\"]='G';\n  data2[\"00111\"]='H';\n  data2[\"01000\"]='I';\n  data2[\"01001\"]='J';\n  data2[\"01010\"]='K';\n  data2[\"01011\"]='L';\n  data2[\"01100\"]='M';\n  data2[\"01101\"]='N';\n  data2[\"01110\"]='O';\n  data2[\"01111\"]='P';\n  data2[\"10000\"]='Q';\n  data2[\"10001\"]='R';\n  data2[\"10010\"]='S';\n  data2[\"10011\"]='T';\n  data2[\"10100\"]='U';\n  data2[\"10101\"]='V';\n  data2[\"10110\"]='W';\n  data2[\"10111\"]='X';\n  data2[\"11000\"]='Y';\n  data2[\"11001\"]='Z';\n  data2[\"11010\"]=' ';\n  data2[\"11011\"]='.';\n  data2[\"11100\"]=',';\n  data2[\"11101\"]='-';\n  data2[\"11110\"]='\\'';\n  data2[\"11111\"]='?';\n\n  while(1){\n    string  input=\"\";\n    string ans=\"\";\n    if(!getline(cin,input)) break;\n    \n    for(int i=0;;i++){\n      if(input[i]=='\\0'){\n\tbreak;\n      }\n      ans+=data1[input[i]];\n    }\n\n    ans+='!';\n    int i, count=0;\n    \n    while(1){\n      string temp=\"\";\n      for(i=0;i<5;i++, count++){\n\tif(ans[count]=='!') {\n\t  if(i!=0){\n\t    for(int j=4;;j--){\n\t      temp+='0';\n\t      if(i==j) break;\n\t    }\n\t  }\n\t  break;\n\t}\n\ttemp+=ans[count];\n      }\n      cout << data2[temp];\n      if(ans[count]=='!') break;\n      }\n      cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\nusing namespace std;\nstring str[] ={\"101\",\"000000\",  \"000011\",  \"10010001\",  \"010001\",  \"000001\",  \"100101\",  \"10011010\",  \"0101\", \"0001\",\n\t       \"110\",  \"01001\",  \"10011011\",  \"010000\",  \"0111\",  \"10011000\",  \"0110\",  \"00100\",  \"10011001\",\n\t       \"10011110\",  \"00101\",  \"111\",  \"10011111\",  \"1000\",  \"00110\",  \"00111\",  \"10011100\",  \"10011101\",\n\t       \"000010\",\"10010010\",  \"10010011\", \"10010000\"};\nstring str2[] = {\" \",\"'\",\",\",\"-\",\".\",\"?\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\n\t\t \"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\nstring s3[] = {\"11010\",\"11011\",\"11100\",\"11101\", \"11110\",\"11111\",\n\t       \"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\"01000\",\"01001\",\n\t       \"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\n\t       \"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\"};\nint main(){\n  string str3 = \"\";\n  while(getline(cin,str3)){\n\n  string s4 = \"\";\n\n\n  for(int i = 0 ; i < str3.size() ; i++){\n\n    if(33 <= str3[i] - ' ' && str3[i] - ' ' <=58){\n      s4+=str[str3[i] - ' ' - 27];\n    }else if(str3[i] - ' ' == 7 ){\n      s4+=str[1];\n    }else if(12 <= str3[i] - ' '&& str3[i] - ' ' <= 14){\n      s4+=str[str3[i] - ' ' - 10];\n    }else if(str3[i] - ' ' == 31){\n      s4+=str[5];\n    }else s4 += str[0];\n  }\n\n  while(s4.size()%5 != 0){\n    s4 += '0';\n  }\n\n  string s5 = \"\";\n  swap(str2[1],str2[4]);\n  for(int i = 0 ; i < s4.size() ; i += 5){\n    string s = \"\";\n    for(int k = i ; k < i+5 ; k++){\n      s+=s4[k];\n    }\n\n    for(int j = 0 ; j < 32 ; j++ ){\n      if(s == s3[j])s5+=str2[j];\n    }\n  }\n  cout << s5 << endl;\n  swap(str2[1],str2[4]);\n  cin.clear();\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <bitset>\n#include <cstring>\nusing namespace std;\n\nconst char *t1=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst char *v1[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\nconst char *t2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint main(){\n  string s,t,z;\n  int i,j;\n  for(;z=t=\"\",getline(cin,s);cout<<t<<endl){\n    for(i=0;i<s.size();i++)\n      if((j=strchr(t1,s[i])-t1)+t1)z+=v1[j];\n    for(;z.size()%5;z+='0');\n    for(i=0;i<z.size()/5;i++)\n      t+=t2[bitset<5>(z,i*5,i*5+5).to_ulong()];\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char, string> M1;\nstring M2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\nvoid init(){\n    string list = \" \\',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string codes[32] = {\"101\", \"000000\", \"000011\", \"10010001\",\n\t\t\t\"010001\", \"000001\", \"100101\", \"10011010\",\n\t\t\t\"0101\", \"0001\", \"110\", \"01001\", \"10011011\",\n\t\t\t\"010000\", \"0111\", \"10011000\", \"0110\",\n\t\t\t\"00100\", \"10011001\", \"10011110\", \"00101\",\n\t\t\t\"111\", \"10011111\", \"1000\", \"00110\",\n\t\t\t\"00111\", \"10011100\", \"10011101\", \"000010\",\n\t\t\t\"10010010\", \"10010011\", \"10010000\"};\n    for ( int i = 0; i < list.size(); i++ ) M1[list[i]] = codes[i];\n}\n\nint getValue(string str){\n    int v = 0, p = 1;\n    for ( int i = 4; i >= 0; i-- ){\n\tif ( str[i] == '1' ) v += p;\n\tp *= 2;\n    }\n    return v;\n}\n\nmain(){\n    init();\n    string line; \n    while(1){\n\tgetline(cin, line);\n\tif ( cin.eof() ) break;\n\tstring code = \"\";\n\tfor ( int i = 0; i < line.size(); i++ ){\n\t    code += M1[line[i]];\n\t}\n\twhile( code.size()%5 != 0 ) code+= \"0\";\n\t\n\tfor ( int i = 0; i < code.size(); i+=5 ){\n\t    cout << M2[getValue( code.substr(i,5))];\n\t}\n\tcout << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\nusing namespace std;\nstring L=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",A=\" ',-.?\"+L,C=L+\" .,-'?\";\nstring B=\"101 000000 000011 10010001 010001 000001 100101 10011010 \"\n\t\"0101 0001 110 01001 10011011 010000 0111 10011000 \"\n\t\"0110 00100 10011001 10011110 00101 111 10011111 1000 \"\n\t\"00110 00111 10011100 10011101 000010 10010010 10010011 10010000\";\nint bin2dec(string s){\n\tint x=0,i=0;\n\tfor(;i<s.size();i++)x=x*2+s[i]-'0';\n\treturn x;\n}\nint main(){\n\tvector<string>x(32);\n\tstringstream ss(B);\n\tstring s,s1;\n\tint i=0,n;\n\tfor(;i<32;i++){\n\t\tss>>s;\n\t\tx[i]=s;\n\t}\n\twhile(getline(cin,s)){\n\t\ts1=\"\";\n\t\tfor(i=0;i<s.size();i++)s1+=x[A.find(s[i])];\n\t\tn=s1.size()%5;\n\t\tif(n)s1+=string(5-n,'0');\n\t\ts=\"\";\n\t\tfor(i=0;i<s1.size();i+=5)s+=C[bin2dec(s1.substr(i, 5))];\n\t\tcout<<s<< endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n\nstd::string to_bs(int i){\n\tstd::string s = \"\";\n\twhile(i > 0){\n\t\ts = static_cast<char>(i%2+'0') + s;\n\t\ti /= 2;\n\t}\n\twhile(s.length() < 5){\n\t\ts = '0' + s;\n\t}\n\treturn s;\n}\n\nint main(){\n\tstd::map<char, std::string> input;\n\tstd::map<std::string, char> output;\n\toutput[\"101\"] = ' ';\n\toutput[\"000000\"] = '\\'';\n\toutput[\"000011\"] = ',';\n\toutput[\"10010001\"] = '-';\n\toutput[\"010001\"] = '.';\n\toutput[\"000001\"] = '?';\n\toutput[\"100101\"] = 'A';\n\toutput[\"10011010\"] = 'B';\n\toutput[\"0101\"] = 'C';\n\toutput[\"0001\"] = 'D';\n\toutput[\"110\"] = 'E';\n\toutput[\"01001\"] = 'F';\n\toutput[\"10011011\"] = 'G';\n\toutput[\"010000\"] = 'H';\n\toutput[\"0111\"] = 'I';\n\toutput[\"10011000\"] = 'J';\n\toutput[\"0110\"] = 'K';\n\toutput[\"00100\"] = 'L';\n\toutput[\"10011001\"] = 'M';\n\toutput[\"10011110\"] = 'N';\n\toutput[\"00101\"] = 'O';\n\toutput[\"111\"] = 'P';\n\toutput[\"10011111\"] = 'Q';\n\toutput[\"1000\"] = 'R';\n\toutput[\"00110\"] = 'S';\n\toutput[\"00111\"] = 'T';\n\toutput[\"10011100\"] = 'U';\n\toutput[\"10011101\"] = 'V';\n\toutput[\"000010\"] = 'W';\n\toutput[\"10010010\"] = 'X';\n\toutput[\"10010011\"] = 'Y';\n\toutput[\"10010000\"] = 'Z';\n\t\n\tfor(int i=0;i<26;i++){\n\t\tinput['A' + i] = to_bs(i);\n\t}\n\tinput[' '] = \"11010\";\n\tinput['.'] = \"11011\";\n\tinput[','] = \"11100\";\n\tinput['-'] = \"11101\";\n\tinput['\\''] = \"11110\";\n\tinput['?'] = \"11111\";\n\n\tstd::string s, code = \"\";\n\twhile(std::getline(std::cin, s), !std::cin.eof()){\n\t\tfor(int i=0;i<s.size();i++){\n\t\t\tcode += input[s[i]];\n\t\t}\n\t}\n\n\tstd::string res = \"\", temp_s = \"\";\n\tfor(int i=0;i<code.size();i++){\n\t\tif(output[temp_s]){\n\t\t\tres += output[temp_s];\n\t\t\ttemp_s = \"\";\n\t\t}\n\t\ttemp_s += code[i];\n\t}\n\n\tstd::cout << res << std::endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nstring decode(string s)\n{\n  string ans;\n  string map[]=\n    {\n      \"00000\",\n      \"00001\",\n      \"00010\",\n      \"00011\",\n      \"00100\",\n      \"00101\",\n      \"00110\",\n      \"00111\",\n      \"01000\",      \n      \"01001\",\n      \"01010\",\n      \"01011\",\n      \"01100\",\n      \"01101\",\n      \"01110\",\n      \"01111\",\n\n      \"10000\",\n      \"10001\",\n      \"10010\",\n      \"10011\",\n      \"10100\",\n      \"10101\",\n      \"10110\",\n      \"10111\",\n      \"11000\",      \n      \"11001\",\n      \"11010\",\n      \"11011\",\n      \"11100\",\n      \"11101\",\n      \"11110\",\n      \"11111\"     \n    };\n  string charset=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n  for(int i=0;i<s.size();i+=5)\n    {\n      for(int j=0;j<32;j++)\n\t{\n\t  if(s.substr(i,5)==map[j])\n\t    ans+=charset[j];\n\t}\n    }\n\n  return ans;\n}\n\nstring encode(string s)\n{\n  string ans;\n  string code[]={\n    \"101\",\n    \"000000\",\n    \"000011\",\n    \"10010001\",\n    \"010001\",\n    \"000001\",\n    \"100101\",\n    \"10011010\",\n    \"0101\",\n    \"0001\",\n    \"110\",\n    \"01001\",\n    \"10011011\",\n    \"010000\",\n    \"0111\",\n    \"10011000\",\n    \"0110\",\n    \"00100\",\n    \"10011001\",\n    \"10011110\",\n    \"00101\",\n    \"111\",\n    \"10011111\",\n    \"1000\",\n    \"00110\",\n    \"00111\",\n    \"10011100\",\n    \"10011101\",\n    \"000010\",\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n};\n  string charset=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n  for(int i=0;i<s.size();i++)\n    {\n      for(int j=0;j<32;j++)\n\t{\n\t  if(charset[j]==s[i])\n\t    {\n\t      ans+=code[j];\n\t      break;\n\t    }\n\t}\n    }\n  while(ans.size()%5!=0)\n    ans+=\"0\";\n  return ans;\n}\n\nint main()\n{\n  string s;\n  for(;getline(cin, s);)\n    cout<<decode(encode(s))<<endl;\n  \n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n\nusing namespace std;\n\nint main(void){\n  string s;\n  map<string,char> table1;\n  map<char,string> table2;\n  for(char c='A';c<='Z';++c){\n    int a = c-'A';\n    string key;\n    for(int j=0;j<5;++j){\n      key = ((a%2)?'1':'0') + key;\n      a/=2;\n    }\n    table1[key]=c;\n  }\n  table1[\"11010\"]=' ';\n  table1[\"11011\"]='.';\n  table1[\"11100\"]=',';\n  table1[\"11101\"]='-';\n  table1[\"11110\"]='\\'';\n  table1[\"11111\"]='?';\n  \n  table2[' ']=\"101\";\n  table2['\\'']=\"000000\";\n  table2[',']=\"000011\";\n  table2['-']=\"10010001\";\n  table2['.']=\"010001\";\n  table2['?']=\"000001\";\n  table2['A']=\"100101\";\n  table2['B']=\"10011010\";\n  table2['C']=\"0101\";\n  table2['D']=\"0001\";\n  table2['E']=\"110\";\n  table2['F']=\"01001\";\n  table2['G']=\"10011011\";\n  table2['H']=\"010000\";\n  table2['I']=\"0111\";\n  table2['J']=\"10011000\";\n  table2['K']=\"0110\";\n  table2['L']=\"00100\";\n  table2['M']=\"10011001\";\n  table2['N']=\"10011110\";\n  table2['O']=\"00101\";\n  table2['P']=\"111\";\n  table2['Q']=\"10011111\";\n  table2['R']=\"1000\";\n  table2['S']=\"00110\";\n  table2['T']=\"00111\";\n  table2['U']=\"10011100\";\n  table2['V']=\"10011101\";\n  table2['W']=\"000010\";\n  table2['X']=\"10010010\";\n  table2['Y']=\"10010011\";\n  table2['Z']=\"10010000\";\n  \n  while(getline(cin,s),!cin.eof()){\n    string encoded,result;\n    for(int i=0;i<s.size();++i){\n      encoded+=table2[s[i]];\n    }\n    string tmp;\n   while(encoded.length()%5 != 0)encoded+=\"0\";\n    //cerr<<encoded<<endl;\n    for(int i=0;i<encoded.size();++i){\n      tmp += encoded[i];\n      if(table1.find(tmp) != table1.end()){\n        result+=table1[tmp];\n        tmp=\"\";\n      }\n    }\n    cout<<result<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <map>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\nstring itob(int a) {\n  string ret;\n  for(int i=16; i>0; i/=2) {\n    if (a>=i) {\n      ret+='1';\n      a-=i;\n    } else\n      ret+='0';\n  }\n  return ret;\n}\n\nint main() {\n  string hoge = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  map<string, char> m;\n  REP(i,hoge.length()) {\n    m.insert(make_pair(itob(i),hoge[i]));\n  }\n  hoge = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string hoge2[] = {\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n                 ,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n                 ,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n                 ,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n  map<char,string> m2;\n  REP(i,hoge.length())\n    m2.insert(make_pair(hoge[i],hoge2[i]));\n  string line;\n  while(true) {\n    getline(cin,line);\n    if (line.length()==0) break;\n    string a;\n    REP(i,line.length()) {\n      a += m2[line[i]];\n    }\n    int aa = a.length()%5;\n    \n    if(aa)\n      REP(i,5-aa)\n        a+=\"0\";\n    string ans;\n    REP(i,a.length()) {\n      for (int j=1; i+j<=a.length(); j++) {\n        if (m.count(a.substr(i,j))) {\n          ans += m[a.substr(i,j)];\n          i+=j-1;\n          break;\n        }\n      }\n    }\n    cout << ans << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#define CASE(c,s) case c:return s\nusing namespace std;\n\nstring f(char c){\n\tswitch (c){\n\t\tCASE(' ', \"101\");\n\t\tCASE('\\'', \"000000\");\n\t\tCASE(',', \"000011\");\n\t\tCASE('-', \"10010001\");\n\t\tCASE('.', \"010001\");\n\t\tCASE('?', \"000001\");\n\t\tCASE('A', \"100101\");\n\t\tCASE('B', \"10011010\");\n\t\tCASE('C', \"0101\");\n\t\tCASE('D', \"0001\");\n\t\tCASE('E', \"110\");\n\t\tCASE('F', \"01001\");\n\t\tCASE('G', \"10011011\");\n\t\tCASE('H', \"010000\");\n\t\tCASE('I', \"0111\");\n\t\tCASE('J', \"10011000\");\n\t\tCASE('K', \"0110\");\n\t\tCASE('L', \"00100\");\n\t\tCASE('M', \"100110011\");\n\t\tCASE('N', \"10011110\");\n\t\tCASE('O', \"00101\");\n\t\tCASE('P', \"111\");\n\t\tCASE('Q', \"10011111\");\n\t\tCASE('R', \"1000\");\n\t\tCASE('S', \"00110\");\n\t\tCASE('T', \"00111\");\n\t\tCASE('U', \"10011100\");\n\t\tCASE('V', \"10011101\");\n\t\tCASE('W', \"000010\");\n\t\tCASE('X', \"10010010\");\n\t\tCASE('Y', \"10010011\");\n\t\tCASE('Z', \"10010000\");\n\tdefault:return \"\";\n\t}\n}\n\nint bitodec(string s){\n\tint sum=0;\n\tfor (unsigned int i = 0; i < s.length(); ++i){\n\t\tsum *= 2;\n\t\tsum += (s[i] - '0');\t\t\n\t}\n\treturn sum;\n}\n\nchar g(string s){\n\tchar c[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\treturn c[bitodec(s)];\n}\n\nint main(){\n\tstring s,r;\n\tint i;\n\n\twhile (getline(cin, s)){\n\t\ti = 0;\n\t\tr = \"\";\n\n\t\twhile (s[i] != '\\0'){\n\t\t\tr += f(s[i]);\n\t\t\t++i;\n\t\t}\n\n\t\tif (i % 5)for (int j = 4 - (i % 5); --j;)r += \"0\";\n\n\t\tfor (unsigned int j = 0; j < r.length() ;j+=5)\n\t\t\tcout << g(r.substr(j,5));\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <ctime>\nusing namespace std;\n\n#define rep(i,a,n) for(int i=a; i<n; i++)\n#define repr(i,a,n) for(int i=a; i>=n; i--)\n#define pb(a) push_back(a)\n#define fr first\n#define sc second\n#define INF 999999999\n\n#define X real()\n#define Y imag()\n#define EPS (1e-10)\n#define EQ(a,b) (abs((a) - (b)) < EPS)\n#define EQV(a,b) ( EQ((a).X, (b).X) && EQ((a).Y, (b).Y) )\n#define LE(n, m) ((n) < (m) + EPS)\n#define GE(n, m) ((n) + EPS > (m))\n\ntypedef vector<int> VI;\ntypedef vector<VI> MAT;\ntypedef pair<int, int> pii;\ntypedef long long int ll;\n\ntypedef complex<double> P;\ntypedef pair<P, P> L;\ntypedef pair<P, double> C;\n\nint dy[]={0, 0, 1, -1};\nint dx[]={1, -1, 0, 0};\nint const MOD = 1000000007;\n\nnamespace std {\n    bool operator<(const P a, const P b) {\n        return a.X != b.X ? a.X < b.X : a.Y < b.Y;\n    }\n}\n\nint main() {\n    map<char, string> m;\n    m[' '] = \"101\";\n    m['\\''] = \"000000\";\n    m[','] = \"000011\";\n    m['-'] = \"10010001\";\n    m['.'] = \"010001\";\n    m['?'] = \"000001\";\n    m['A'] = \"100101\";\n    m['B'] = \"10011010\";\n    m['C'] = \"0101\";\n    m['D'] = \"0001\";\n    m['E'] = \"110\";\n    m['F'] = \"01001\";\n    m['G'] = \"10011011\";\n    m['H'] = \"010000\";\n    m['I'] = \"0111\";\n    m['J'] = \"10011000\";\n    m['K'] = \"0110\";\n    m['L'] = \"00100\";\n    m['M'] = \"10011001\";\n    m['N'] = \"10011110\";\n    m['O'] = \"00101\";\n    m['P'] = \"111\";\n    m['Q'] = \"10011111\";\n    m['R'] = \"1000\";\n    m['S'] = \"00110\";\n    m['T'] = \"00111\";\n    m['U'] = \"10011100\";\n    m['V'] = \"10011101\";\n    m['W'] = \"000010\";\n    m['X'] = \"10010010\";\n    m['Y'] = \"10010011\";\n    m['Z'] = \"10010000\";\n\n    string s;\n    while(getline(cin,s)) {\n        int l = s.length();\n        string temp;\n        rep(i,0,l) temp += m[(char)s[i]];\n        int l2 = temp.length();\n        rep(i,0,5 - (l2%5 == 0 ? 5 : l2%5)) temp += \"0\";\n\n        l2 = temp.length();\n        string ans;\n        int ans_i;\n        rep(i,0,l2 / 5) {\n            ans_i = 0;\n            string ans_s = temp.substr(i*5, 5);\n            rep(j,0,5) {\n                ans_i += ((int)((char)ans_s[j]) - 48) << (4-j);\n            }\n            if(ans_i <= 25) ans += (char)((char)ans_i + 'A');\n            else {\n                switch(ans_i){\n                    case 26:\n                        ans += \" \"; break;\n                    case 27:\n                        ans += \".\"; break;\n                    case 28:\n                        ans += \",\"; break;\n                    case 29:\n                        ans += \"-\"; break;\n                    case 30:\n                        ans += \"\\'\"; break;\n                    case 31:\n                        ans += \"?\"; break;\n                }\n            }\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <ctime>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <map>\n#include <set>\n#include <bitset>\n#include <numeric>\n#include <utility>\n#include <iomanip>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\ntypedef long long ll;\ntypedef vector<int> vint;\ntypedef vector<long long> vll;\ntypedef pair<int,int> pint;\ntypedef pair<long long, long long> pll;\n\n#define MP make_pair\n#define PB push_back\n#define ALL(s) (s).begin(),(s).end()\n#define EACH(i, s) for (__typeof__((s).begin()) i = (s).begin(); i != (s).end(); ++i)\n#define COUT(x) cout << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << endl\n\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }\ntemplate<class T1, class T2> ostream& operator << (ostream &s, pair<T1,T2> P) \n{ return s << '<' << P.first << \", \" << P.second << '>'; }\ntemplate<class T> ostream& operator << (ostream &s, vector<T> P) \n{ for (int i = 0; i < P.size(); ++i) { if (i > 0) { s << \" \"; } s << P[i]; } return s; }\ntemplate<class T1, class T2> ostream& operator << (ostream &s, map<T1,T2> P) \n{ EACH(it, P) { s << \"<\" << it->first << \"->\" << it->second << \"> \"; } return s; }\n\n\nstring str;\n\nmap<char, string> ma;\nmap<string, char> ma2;\n\nstring IN[26] = {\n    \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\",\n    \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \n    \"000010\", \"10010010\", \"10010011\", \"10010000\"};\n\nint main() {\n    ma[' '] = \"101\";\n    ma[39] = \"000000\";\n    ma[','] = \"000011\";\n    ma['-'] = \"10010001\";\n    ma['.'] = \"010001\";\n    ma['?'] = \"000001\";\n    for (int i = 0; i < 26; ++i) ma['A' + i] = IN[i];\n    \n    for (int bit = 0; bit < 26; ++bit) {\n        string add = \"\";\n        for (int i = 0; i < 5; ++i) {\n            if (bit & (1<<i)) add += \"1\";\n            else add += \"0\";\n        }\n        reverse(ALL(add));\n        ma2[add] = 'A' + bit;\n    }\n    ma2[\"11010\"] = ' ';\n    ma2[\"11011\"] = '.';\n    ma2[\"11100\"] = ',';\n    ma2[\"11101\"] = '-';\n    ma2[\"11110\"] = 39;\n    ma2[\"11111\"] = '?';\n    \n    //COUT(ma); COUT(ma2);\n    \n    while ( getline(cin, str) ) {\n        string tmp = \"\";\n        for (int i = 0; i < str.size(); ++i) tmp += ma[str[i]];\n        \n        string res = \"\";\n        while (tmp.size() % 5 != 0) tmp += \"0\";\n        for (int i = 0; i < tmp.size(); i += 5) {\n            string sub = tmp.substr(i, 5);\n            res += ma2[sub];\n        }\n        \n        cout << res << endl;\n    }\n    \n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<map>\n#include<iostream>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint main() {\n\tmap<char, string> a;\n\tstring b = \"'\";\n\ta.insert(map<char, string>::value_type(' ', \"101\"));\n\ta.insert(map<char, string>::value_type(b[0], \"000000\"));\n\ta.insert(map<char, string>::value_type(',', \"000011\"));\n\ta.insert(map<char, string>::value_type('-', \"10010001\"));\n\ta.insert(map<char, string>::value_type('.', \"010001\"));\n\ta.insert(map<char, string>::value_type('?', \"000001\"));\n\ta.insert(map<char, string>::value_type('A', \"100101\"));\n\ta.insert(map<char, string>::value_type('B', \"10011010\"));\n\ta.insert(map<char, string>::value_type('C', \"0101\"));\n\ta.insert(map<char, string>::value_type('D', \"0001\"));\n\ta.insert(map<char, string>::value_type('E', \"110\"));\n\ta.insert(map<char, string>::value_type('F', \"01001\"));\n\ta.insert(map<char, string>::value_type('G', \"10011011\"));\n\ta.insert(map<char, string>::value_type('H', \"010000\"));\n\ta.insert(map<char, string>::value_type('I', \"0111\"));\n\ta.insert(map<char, string>::value_type('J', \"10011000\"));\n\ta.insert(map<char, string>::value_type('K', \"0110\"));\n\ta.insert(map<char, string>::value_type('L', \"00100\"));\n\ta.insert(map<char, string>::value_type('M', \"10011001\"));\n\ta.insert(map<char, string>::value_type('N', \"10011110\"));\n\ta.insert(map<char, string>::value_type('O', \"00101\"));\n\ta.insert(map<char, string>::value_type('P', \"111\"));\n\ta.insert(map<char, string>::value_type('Q', \"10011111\"));\n\ta.insert(map<char, string>::value_type('R', \"1000\"));\n\ta.insert(map<char, string>::value_type('S', \"00110\"));\n\ta.insert(map<char, string>::value_type('T', \"00111\"));\n\ta.insert(map<char, string>::value_type('U', \"10011100\"));\n\ta.insert(map<char, string>::value_type('V', \"10011101\"));\n\ta.insert(map<char, string>::value_type('W', \"000010\"));\n\ta.insert(map<char, string>::value_type('X', \"10010010\"));\n\ta.insert(map<char, string>::value_type('Y', \"10010011\"));\n\ta.insert(map<char, string>::value_type('Z', \"10010000\"));\n\tmap<string, char>e;\n\te.insert(map<string, char>::value_type(\"00000\", 'A'));\n\te.insert(map<string, char>::value_type(\"00001\", 'B'));\n\te.insert(map<string, char>::value_type(\"00010\", 'C'));\n\te.insert(map<string, char>::value_type(\"00011\", 'D'));\n\te.insert(map<string, char>::value_type(\"00100\", 'E'));\n\te.insert(map<string, char>::value_type(\"00101\", 'F'));\n\te.insert(map<string, char>::value_type(\"00110\", 'G'));\n\te.insert(map<string, char>::value_type(\"00111\", 'H'));\n\te.insert(map<string, char>::value_type(\"01000\", 'I'));\n\te.insert(map<string, char>::value_type(\"01001\", 'J'));\n\te.insert(map<string, char>::value_type(\"01010\", 'K'));\n\te.insert(map<string, char>::value_type(\"01011\", 'L'));\n\te.insert(map<string, char>::value_type(\"01100\", 'M'));\n\te.insert(map<string, char>::value_type(\"01101\", 'N'));\n\te.insert(map<string, char>::value_type(\"01110\", 'O'));\n\te.insert(map<string, char>::value_type(\"01111\", 'P'));\n\te.insert(map<string, char>::value_type(\"10000\", 'Q'));\n\te.insert(map<string, char>::value_type(\"10001\", 'R'));\n\te.insert(map<string, char>::value_type(\"10010\", 'S'));\n\te.insert(map<string, char>::value_type(\"10011\", 'T'));\n\te.insert(map<string, char>::value_type(\"10100\", 'U'));\n\te.insert(map<string, char>::value_type(\"10101\", 'V'));\n\te.insert(map<string, char>::value_type(\"10110\", 'W'));\n\te.insert(map<string, char>::value_type(\"10111\", 'X'));\n\te.insert(map<string, char>::value_type(\"11000\", 'Y'));\n\te.insert(map<string, char>::value_type(\"11001\", 'Z'));\n\te.insert(map<string, char>::value_type(\"11010\", ' '));\n\te.insert(map<string, char>::value_type(\"11011\", '.'));\n\te.insert(map<string, char>::value_type(\"11100\", ','));\n\te.insert(map<string, char>::value_type(\"11101\", '-'));\n\te.insert(map<string, char>::value_type(\"11110\", b[0]));\n\te.insert(map<string, char>::value_type(\"11111\", '?'));\n\tint l = 0;\n\twhile (getline(cin, b)) {\n\t\tint sum = 0;\n\t\tstring d = \"\";\n\t\tif (l != 0) d += \" \";\n\t\tfor (int i = 0; i < b.length(); i++) {\n\t\t\td += a[b[i]];\n\t\t}\n\t\tsum++;\n\t\tsum = 0;\n\t\tstring r[1000];\n\t\tfor (int i = 0; i < d.length(); i += 5) {\n\t\t\tstring h = \"\";\n\t\t\tint k = d.length() - 1;\n\t\t\tfor (int j = i; j < min(i + 5, k); j++) {\n\t\t\t\th += d[j];\n\t\t\t}\n\t\t\tr[sum] += h;\n\t\t\twhile ((r[sum].length()) < 5) {\n\t\t\t\tr[sum] += \"0\";\n\t\t\t}\n\t\t\tsum++;\n\t\t}\n\t\td = \"\";\n\t\tfor (int i = 0; i < sum; i++) {\n\t\t\td += e[r[i]];\n\t\t}\n\t\tcout << d;\n\t\tl++;\n\t}\n\tcout << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n \nusing namespace std;\n \nmap<string, char> n;\nmap<char, string> m;\n \nvoid init1()\n{\n    m[' '] = \"101\";\n    m['\\''] = \"000000\";\n    m[','] = \"000011\";\n    m['-'] = \"10010001\";\n    m['.'] = \"010001\";\n    m['?'] = \"000001\";\n    m['A'] = \"100101\";\n    m['B'] = \"10011010\";\n    m['C'] = \"0101\";\n    m['D'] = \"0001\";\n    m['E'] = \"110\";\n    m['F'] = \"01001\";\n    m['G'] = \"10011011\";\n    m['H'] = \"010000\";\n    m['I'] = \"0111\";\n    m['J'] = \"10011000\";\n    m['K'] = \"0110\";\n    m['L'] = \"00100\";\n    m['M'] = \"10011001\";\n    m['N'] = \"10011110\";\n    m['O'] = \"00101\";\n    m['P'] = \"111\";\n    m['Q'] = \"10011111\";\n    m['R'] = \"1000\";\n    m['S'] = \"00110\";\n    m['T'] = \"00111\";\n    m['U'] = \"10011100\";\n    m['V'] = \"10011101\";\n    m['W'] = \"000010\";\n    m['X'] = \"10010010\";\n    m['Y'] = \"10010011\";\n    m['Z'] = \"10010000\";\n}\n \nvoid init2()\n{\n    n[\"00000\"] = 'A';\n    n[\"00001\"] = 'B';\n    n[\"00010\"] = 'C';\n    n[\"00011\"] = 'D';\n    n[\"00100\"] = 'E';\n    n[\"00101\"] = 'F';\n    n[\"00110\"] = 'G';\n    n[\"00111\"] = 'H';\n    n[\"01000\"] = 'I';\n    n[\"01001\"] = 'J';\n    n[\"01010\"] = 'K';\n    n[\"01011\"] = 'L';\n    n[\"01100\"] = 'M';\n    n[\"01101\"] = 'N';\n    n[\"01110\"] = 'O';\n    n[\"01111\"] = 'P';\n    n[\"10000\"] = 'Q';\n    n[\"10001\"] = 'R';\n    n[\"10010\"] = 'S';\n    n[\"10011\"] = 'T';\n    n[\"10100\"] = 'U';\n    n[\"10101\"] = 'V';\n    n[\"10110\"] = 'W';\n    n[\"10111\"] = 'X';\n    n[\"11000\"] = 'Y';\n    n[\"11001\"] = 'Z';\n    n[\"11010\"] = ' ';\n    n[\"11011\"] = '.';\n    n[\"11100\"] = ',';\n    n[\"11101\"] = '-';\n    n[\"11110\"] = '\\'';\n    n[\"11111\"] = '?';\n}\n \nint main()\n{\n    string str;\n \n    init1();\n    init2();\n \n    while (getline(cin, str)) {\n\tstring s = \"\";\n\tfor (int i = 0; i < (int)str.size(); i++) {\n\t    s += m[str[i]];\n\t}\n     \n\tif ((int)s.size() % 5) {\n\t    for (int i = 0; i < (int)s.size() % 5; i++) {\n\t\ts += '0';\n\t    }\n\t}\n     \n\tstring ans = \"\";\n\tfor (int i = 0; i < (int)s.size(); i += 5) {\n\t    ans += n[s.substr(i, 5)];\n\t} \n\tcout << ans << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n\n#define REP(i,num) for(int i=0;i<(num);++i)\n#define ALL(c) c.begin(),c.end()\n#define LOOP(i) while(i--)\n#define PRINTALL(c) for(auto& x:c){cout<<x<<' ';}cout<<endl;\n#define PAIRCOMP(c,comp) [](const pair<ll,ll>& lhs,const pair<ll,ll>& rhs){return lhs.c comp rhs.c;}\n\nusing namespace std;\nusing ll = long long;\n\nconstexpr ll atcoder_mod = 1e9+7;\n\ntemplate<typename T=int>\nT in(){T x; cin >> x; return (x);}\ntemplate<typename T=int,typename C=vector<T>>\nC vecin(int N){C x(N);REP(i,N){x[i]=in<T>();}return move(x);}\n\nvoid vout(){cout << endl;}\ntemplate<typename Head,typename... Tail>\nvoid vout(Head&& h,Tail&&... t){cout << ' ' << h;vout(forward<Tail>(t)...);}\nvoid out(){cout << endl;}\ntemplate<typename Head,typename... Tail>\nvoid out(Head&& h,Tail&&... t){cout << h;vout(forward<Tail>(t)...);}\n\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tmap<char,string> encode={{' ',\"101\"},{'\\'',\"000000\"},{',',\"000011\"},{'-',\"10010001\"},\n\t\t\t\t\t\t\t {'.',\"010001\"},{'?',\"000001\"},{'A',\"100101\"},{'B',\"10011010\"},\n\t\t\t\t\t\t\t {'C',\"0101\"},{'D',\"0001\"},{'E',\"110\"},{'F',\"01001\"},\n\t\t\t\t\t\t\t {'G',\"10011011\"},{'H',\"010000\"},{'I',\"0111\"},{'J',\"10011000\"},\n\t\t\t\t\t\t\t {'K',\"0110\"},{'L',\"00100\"},{'M',\"10011001\"},{'N',\"10011110\"},\n\t\t\t\t\t\t\t {'O',\"00101\"},{'P',\"111\"},{'Q',\"10011111\"},{'R',\"1000\"},\n\t\t\t\t\t\t\t {'S',\"00110\"},{'T',\"00111\"},{'U',\"10011100\"},{'V',\"10011101\"},\n\t\t\t\t\t\t\t {'W',\"000010\"},{'X',\"10010010\"},{'Y',\"10010011\"},{'Z',\"10010000\"}};\n\tmap<string,char> decode={{\"00000\",'A'},{\"00001\",'B'},{\"00010\",'C'},{\"00011\",'D'},\n\t\t\t\t\t\t\t {\"00100\",'E'},{\"00101\",'F'},{\"00110\",'G'},{\"00111\",'H'},\n\t\t\t\t\t\t\t {\"01000\",'I'},{\"01001\",'J'},{\"01010\",'K'},{\"01011\",'L'},\n\t\t\t\t\t\t\t {\"01100\",'M'},{\"01101\",'N'},{\"01110\",'O'},{\"01111\",'P'},\n\t\t\t\t\t\t\t {\"10000\",'Q'},{\"10001\",'R'},{\"10010\",'S'},{\"10011\",'T'},\n\t\t\t\t\t\t\t {\"10100\",'U'},{\"10101\",'V'},{\"10110\",'W'},{\"10111\",'X'},\n\t\t\t\t\t\t\t {\"11000\",'Y'},{\"11001\",'Z'},{\"11010\",' '},{\"11011\",'.'},\n\t\t\t\t\t\t\t {\"11100\",','},{\"11101\",'-'},{\"11110\",'\\''},{\"11111\",'?'}};\n\n\tchar str[110];\n\twhile(cin.getline(str,sizeof(str))){\n\t\tstring S;\n\t\tint index=0;\n\t\twhile(str[index]!='\\0'){\n\t\t\tS.append(encode[str[index++]]);\n\t\t}\n\t\tint pad = S.size()%5;\n\t\tif(pad){\n\t\t\tREP(i,5-pad){\n\t\t\t\tS.push_back('0');\n\t\t\t}\n\t\t}\n\t\tstring T;\n\t\tfor(int i=0,ei=S.size();i<ei;i+=5){\n\t\t\tT.push_back(decode[S.substr(i,5)]);\n\t\t}\n\t\tout(T);\n\t}\n\t\n\treturn 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n\tmap<char,string>P;\n\n\tP[32]=\"101\";\n\tP[39]=\"000000\";\n\tP[44]=\"000011\";\n\tP[45]=\"10010001\";\n\tP[46]=\"010001\";\n\tP[63]=\"000001\";\n\tP[65]=\"100101\";//A\n\tP[66]=\"10011010\";\n\tP[67]=\"0101\";\n\tP[68]=\"0001\";\n\tP[69]=\"110\";\n\tP[70]=\"01001\";\n\tP[71]=\"10011011\";\n\tP[72]=\"010000\";\n\tP[73]=\"0111\";\n\tP[74]=\"10011000\";\n\tP[75]=\"0110\";\n\tP[76]=\"00100\";\n\tP[77]=\"10011001\";\n\tP[78]=\"10011110\";\n\tP[79]=\"00101\";\n\tP[80]=\"111\";\n\tP[81]=\"10011111\";\n\tP[82]=\"1000\";\n\tP[83]=\"00110\";\n\tP[84]=\"00111\";\n\tP[85]=\"10011100\";\n\tP[86]=\"10011101\";\n\tP[87]=\"000010\";\n\tP[88]=\"10010010\";\n\tP[89]=\"10010011\";\n\tP[90]=\"10010000\";\n\n\tmap<string,string>PP;\n\tPP[\"00000\"]='A';\n\tPP[\"00001\"]='B';\n\tPP[\"00010\"]='C';\n\tPP[\"00011\"]='D';\n\tPP[\"00100\"]='E';\n\tPP[\"00101\"]='F';\n\tPP[\"00110\"]='G';\n\tPP[\"00111\"]='H';\n\tPP[\"01000\"]='I';\n\tPP[\"01001\"]='J';\n\tPP[\"01010\"]='K';\n\tPP[\"01011\"]='L';\n\tPP[\"01100\"]='M';\n\tPP[\"01101\"]='N';\n\tPP[\"01110\"]='O';\n\tPP[\"01111\"]='P';\n\tPP[\"10000\"]='Q';\n\tPP[\"10001\"]='R';\n\tPP[\"10010\"]='S';\n\tPP[\"10011\"]='T';\n\tPP[\"10100\"]='U';\n\tPP[\"10101\"]='V';\n\tPP[\"10110\"]='W';\n\tPP[\"10111\"]='X';\n\tPP[\"11000\"]='Y';\n\tPP[\"11001\"]='Z';\n\tPP[\"11010\"]=' ';\n\tPP[\"11011\"]='.';\n\tPP[\"11100\"]=',';\n\tPP[\"11101\"]='-';\n\tPP[\"11110\"]=',';\n\tPP[\"11111\"]='?';\n\n\n\n\n\tstring str;\n\tstring set_str;\n\tstring keep;\n\tstring ans_str;\n\tint count=0;\n\tint flag=0;\n\n\twhile(getline(cin,str))\n\t{\n\t\tif(flag)set_str+=\"101\";\n\n\t\tfor(int i=0;i<str.length();i++)\n\t\t{\n\t\t\tset_str += P[str[i]];\n\t\t}\n\t\twhile(set_str.length()%5)set_str+='0';\n\t\tfor(int i=0;i<set_str.length();i++)\n\t\t{\n\t\t\tans_str += set_str[i];\n\t\t\tcount++;\n\t\t\tif(!(count%5) && count)\n\t\t\t{\n\t\t\t\tcout << PP[ans_str];\n\t\t\t\tans_str.erase(ans_str.begin(),ans_str.end());\n\t\t\t}\n\t\t}\n\t\tflag=1;\n\t}\n\tcout << endl;\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n\n#include <iostream>\n#include <algorithm>\n#include <functional>\n#include <string>\n#include <queue>\n#include <cmath>\n#include <stack>\n#include <numeric>\n#include <ctime>\n#include <algorithm>\n#include <set>\n#include <map>\n#include <stdio.h>\n\nusing namespace std;\ntypedef long long int lint;\n\nvoid solve(string &str)\n{\n\tmap<char, string> encode;\n\tmap<string, string> decode;\n\t\n\tchar alpha[32] = {\n\t\t' ', '\\'', ',', '-', '.', '?', 'A', 'B',\n\t\t'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n\t\t'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\n\t\t'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n\t};\n\tstring code1[32] = {\n\t\t\"101\", \"000000\", \"000011\", \"10010001\",\n\t\t\"010001\", \"000001\", \"100101\", \"10011010\",\n\t\t\"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\",\n\t\t\"0110\", \"00100\", \"10011001\", \"10011110\",\n\t\t\"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\",\n\t\t\"000010\", \"10010010\", \"10010011\", \"10010000\",\n\t};\n\n\tstring beta[32] = {\n\t\t\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n\t\t\"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\",\n\t\t\"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\",\n\t\t\"Y\", \"Z\", \" \", \".\", \",\", \"-\", \"\\'\", \"?\"\n\t};\n\tstring code2[32] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\n\tstring bin;\n\n\tfor(int i = 0; i < 32; i++){\n\t\tencode.insert( map<char, string>::value_type(alpha[i], code1[i]) );\n\t\tdecode.insert( map<string, string>::value_type(code2[i], beta[i]) );\n\t}\n\n\tfor(int i = 0; i < str.size(); i++){\n\t\tbin += encode[str[i]];\n\t}\n\n\tif(bin.size() % 5 != 0){\n\t\tint r = bin.size() % 5;\n\t\tfor(int i = 0; i < 5 - r; i++){\n\t\t\tbin += \"0\";\n\t\t}\n\t}\n\n\tint nblock = bin.size() / 5;\n\tstring result;\n\tfor(int i = 0; i < nblock; i++){\n\t\tresult += decode[bin.substr(i * 5, 5)];\n\t}\n\tcout << result << endl;\n}\n\nint main()\n{\n\tstring str;\n\twhile(getline(cin, str)){\n\t\tsolve(str);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\n#define rep(i,n) for(ll i=0;i<(ll)(n);i++)\n#define all(a)  (a).begin(),(a).end()\n#define pb push_back\n#define INF 999999999\n\nint main(){\n    string s,x;\n    while(getline(cin,x)){\n//        if(x==\"end\")break;\n        s+=x;s+=\" \";\n    }\n    s=s.substr(0,s.size()-1);\n    cout<<\"-\"<<s<<\"-\"<<endl;\n    string a=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n    string b[]={\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"};\n    string c=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string d[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n    map<string,char> mpb;\n    map<char,string> mpa;\n    rep(i,a.size()){\n        mpb[b[i]]=a[i];\n    }\n    rep(i,c.size()){\n        mpa[c[i]]=d[i];\n    }\n    \n    string str=\"\";\n    rep(i,s.size()){\n        str+=mpa[s[i]];\n    }\n    int len=str.size();\n    str+=string((5-(len%5))%5,'0');\n    \n    string sx=\"\";\n    len=str.size();\n    rep(i,len/5){\n        sx+=mpb[str.substr(5*i,5)];\n    }\n    cout<<sx<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<map>\n#include<string>\n#include<iostream>\n\nusing namespace std;\n\nint main()\n{\n\tmap<char,string> en;\n\ten[' ']=\"101\";\t\ten['\\'']=\"000000\";\ten[',']=\"000011\";\n\ten['-']=\"10010001\";\ten['.']=\"010001\";\ten['?']=\"000001\";\n\ten['A']=\"100101\";\ten['B']=\"10011010\";\ten['C']=\"0101\";\n\ten['D']=\"0001\";\t\ten['E']=\"110\";\t\ten['F']=\"01001\";\n\ten['G']=\"10011011\";\ten['H']=\"010000\";\ten['I']=\"0111\";\n\ten['J']=\"10011000\";\ten['K']=\"0110\";\t\ten['L']=\"00100\";\n\ten['M']=\"10011001\";\ten['N']=\"10011110\";\ten['O']=\"00101\";\n\ten['P']=\"111\";\t\ten['Q']=\"10011111\";\ten['R']=\"1000\";\n\ten['S']=\"00110\";\ten['T']=\"00111\";\ten['U']=\"10011100\";\n\ten['V']=\"10011101\";\ten['W']=\"000010\";\ten['X']=\"10010010\";\n\ten['Y']=\"10010011\";\ten['Z']=\"10010000\";\n\n\tmap<string,char> de;\n\tde[\"00000\"]='A';\tde[\"00001\"]='B';\tde[\"00010\"]='C';\n\tde[\"00011\"]='D';\tde[\"00100\"]='E';\tde[\"00101\"]='F';\n\tde[\"00110\"]='G';\tde[\"00111\"]='H';\tde[\"01000\"]='I';\n\tde[\"01001\"]='J';\tde[\"01010\"]='K';\tde[\"01011\"]='L';\n\tde[\"01100\"]='M';\tde[\"01101\"]='N';\tde[\"01110\"]='O';\n\tde[\"01111\"]='P';\tde[\"10000\"]='Q';\tde[\"10001\"]='R';\n\tde[\"10010\"]='S';\tde[\"10011\"]='T';\tde[\"10100\"]='U';\n\tde[\"10101\"]='V';\tde[\"10110\"]='W';\tde[\"10111\"]='X';\n\tde[\"11000\"]='Y';\tde[\"11001\"]='Z';\tde[\"11010\"]=' ';\n\tde[\"11011\"]='.';\tde[\"11100\"]=',';\tde[\"11101\"]='-';\n\tde[\"11110\"]='\\'';\tde[\"11111\"]='?';\n\n\tstring s,z[5];\n\tfor(int i=1;i<5;i++)\tz[i]+=z[i-1]+'0';\n\twhile(getline(cin,s)){\n\t\tstring code;\n\t\tfor(int i=0;i<s.length();i++)\t\tcode+=en[s[i]];\n\t\tif(code.length()%5!=0)\t\t\t\tcode+=z[5-code.length()%5];\n\t\tfor(int i=0;i<code.length();i+=5)\tcout<<de[code.substr(i,5)];\n\t\tcout<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <cstdio>\n#include <cstdlib>\nusing namespace std;\n\nconst string table[] ={\n\t\"100101\",\n\t\"10011010\",\n\t\"0101\",\n\t\"0001\",\n\t\"110\",\n\t\"01001\",\n\t\"10011011\",\n\t\"010000\",\n\t\"0111\",\n\t\"10011000\",\n\t\"0110\",\n\t\"00100\",\n\t\"10011001\",\n\t\"10011110\",\n\t\"00101\",\n\t\"111\",\n\t\"10011111\",\n\t\"1000\",\n\t\"00110\",\n\t\"00111\",\n\t\"10011100\",\n\t\"10011101\",\n\t\"000010\",\n\t\"10010010\",\n\t\"10010011\",\n\t\"10010000\",\n};\n\nvoid out( const string &s ){\n\tint n = strtol( s.substr( 0, 5 ).c_str(), 0, 2 );\n\tif( n < 26 )\tputchar( n + 'A' );\n\telse putchar( \" .,-'?\"[n - 26] );\n}\n\nint main(){\n\tchar c;\n\tstring s;\n\tfor(; c = getchar(), c != EOF; ){\n\t\tswitch(c){\n\t\t\tcase '\\n':\n\t\t\t\tif( s.length() > 0 ){\n\t\t\t\t\ts += \"0000\";\n\t\t\t\t\tout(s);\n\t\t\t\t}\n\t\t\t\tputs(\"\");\n\t\t\t\ts = \"\";\n\t\t\t\tbreak;\n\t\t\tcase ' ':\n\t\t\t\ts += \"101\";\n\t\t\t\tbreak;\n\t\t\tcase '\\'':\n\t\t\t\ts += \"000000\";\n\t\t\t\tbreak;\n\t\t\tcase ',':\n\t\t\t\ts += \"000011\";\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\ts += \"10010001\";\n\t\t\t\tbreak;\n\t\t\tcase '.':\n\t\t\t\ts += \"010001\";\n\t\t\t\tbreak;\n\t\t\tcase '?':\n\t\t\t\ts += \"000001\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ts += table[c - 'A'];\n\t\t\t\tbreak;\n\t\t}\n\t\twhile( s.length() > 4 ){\n\t\t\tout( s );\n\t\t\ts = s.substr(5);\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<string>\n#include<cstring>\n\nusing namespace std;\n\nvoid code2str(const string& before,string& after);\nvoid char2code(char ch,string& after);\n\n\nint main()\n{\n\tchar ch;\n\tstring code,str;\n\tbool flg=true;\n\tfor(;;)\n\t{\n\t\tstr=\"\";\n\t\tcode=\"\";\n\t\tfor(;;)\n\t\t{\n\t\t\tch=getchar();\n\t\t\tif(ch==EOF)\n\t\t\t{\n\t\t\t\tflg=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(ch=='\\n')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tchar2code(ch,code);\n\t\t}\n\t\tif(!flg)break;\n\t\tcode2str(code,str);\n\t\tputs(str.c_str());\n\t}\n\treturn 0;\n}\n\nvoid char2code(char ch,string& after)\n{\n\tswitch(ch)\n\t{\n\tcase ' ':\n\t\tafter+=\"101\";\n\t\tbreak;\n\tcase '\\'':\n\t\tafter+=\"000000\";\n\t\tbreak;\n\tcase ',':\n\t\tafter+=\"000011\";\n\t\tbreak;\n\tcase '-':\n\t\tafter+=\"10010001\";\n\t\tbreak;\n\tcase '.':\n\t\tafter+=\"010001\";\n\t\tbreak;\n\tcase '?':\n\t\tafter+=\"000001\";\n\t\tbreak;\n\tcase 'A':\n\t\tafter+=\"100101\";\n\t\tbreak;\n\tcase 'B':\n\t\tafter+=\"10011010\";\n\t\tbreak;\n\tcase 'C':\n\t\tafter+=\"0101\";\n\t\tbreak;\n\tcase 'D':\n\t\tafter+=\"0001\";\n\t\tbreak;\n\tcase 'E':\n\t\tafter+=\"110\";\n\t\tbreak;\n\tcase 'F':\n\t\tafter+=\"01001\";\n\t\tbreak;\n\tcase 'G':\n\t\tafter+=\"10011011\";\n\t\tbreak;\n\tcase 'H':\n\t\tafter+=\"010000\";\n\t\tbreak;\n\tcase 'I':\n\t\tafter+=\"0111\";\n\t\tbreak;\n\tcase 'J':\n\t\tafter+=\"10011000\";\n\t\tbreak;\n\tcase 'K':\n\t\tafter+=\"0110\";\n\t\tbreak;\n\tcase 'L':\n\t\tafter+=\"00100\";\n\t\tbreak;\n\tcase 'M':\n\t\tafter+=\"10011001\";\n\t\tbreak;\n\tcase 'N':\n\t\tafter+=\"10011110\";\n\t\tbreak;\n\tcase 'O':\n\t\tafter+=\"00101\";\n\t\tbreak;\n\tcase 'P':\n\t\tafter+=\"111\";\n\t\tbreak;\n\tcase 'Q':\n\t\tafter+=\"10011111\";\n\t\tbreak;\n\tcase 'R':\n\t\tafter+=\"1000\";\n\t\tbreak;\n\tcase 'S':\n\t\tafter+=\"00110\";\n\t\tbreak;\n\tcase 'T':\n\t\tafter+=\"00111\";\n\t\tbreak;\n\tcase 'U':\n\t\tafter+=\"10011100\";\n\t\tbreak;\n\tcase 'V':\n\t\tafter+=\"10011101\";\n\t\tbreak;\n\tcase 'W':\n\t\tafter+=\"000010\";\n\t\tbreak;\n\tcase 'X':\n\t\tafter+=\"10010010\";\n\t\tbreak;\n\tcase 'Y':\n\t\tafter+=\"10010011\";\n\t\tbreak;\n\tcase 'Z':\n\t\tafter+=\"10010000\";\n\t\tbreak;\n\t}\n}\n\nvoid code2str(const string& before,string& after)\n{\n\tstring code;\n\tfor(int i=0;i<before.size();i+=5)\n\t{\n\t\tcode=\"\";\n\t\tfor(int j=0;j<5;j++)\n\t\t{\n\t\t\tif(i+j<before.size())\n\t\t\t{\n\t\t\t\tcode+=before[i+j];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcode+='0';\n\t\t\t}\n\t\t}\n\t\tif(code==\"00000\")\n\t\t{\n\t\t\tafter+='A';\n\t\t}\n\t\telse if(code==\"00001\")\n\t\t{\n\t\t\tafter+='B';\n\t\t}\n\t\telse if(code==\"00010\")\n\t\t{\n\t\t\tafter+='C';\n\t\t}\n\t\telse if(code==\"00011\")\n\t\t{\n\t\t\tafter+='D';\n\t\t}\n\t\telse if(code==\"00100\")\n\t\t{\n\t\t\tafter+='E';\n\t\t}\n\t\telse if(code==\"00101\")\n\t\t{\n\t\t\tafter+='F';\n\t\t}\n\t\telse if(code==\"00110\")\n\t\t{\n\t\t\tafter+='G';\n\t\t}\n\t\telse if(code==\"00111\")\n\t\t{\n\t\t\tafter+='H';\n\t\t}\n\t\telse if(code==\"01000\")\n\t\t{\n\t\t\tafter+='I';\n\t\t}\n\t\telse if(code==\"01001\")\n\t\t{\n\t\t\tafter+='J';\n\t\t}\n\t\telse if(code==\"01010\")\n\t\t{\n\t\t\tafter+='K';\n\t\t}\n\t\telse if(code==\"01011\")\n\t\t{\n\t\t\tafter+='L';\n\t\t}\n\t\telse if(code==\"01100\")\n\t\t{\n\t\t\tafter+='M';\n\t\t}\n\t\telse if(code==\"01101\")\n\t\t{\n\t\t\tafter+='N';\n\t\t}\n\t\telse if(code==\"01110\")\n\t\t{\n\t\t\tafter+='O';\n\t\t}\n\t\telse if(code==\"01111\")\n\t\t{\n\t\t\tafter+='P';\n\t\t}\n\t\telse if(code==\"10000\")\n\t\t{\n\t\t\tafter+='Q';\n\t\t}\n\t\telse if(code==\"10001\")\n\t\t{\n\t\t\tafter+='R';\n\t\t}\n\t\telse if(code==\"10010\")\n\t\t{\n\t\t\tafter+='S';\n\t\t}\n\t\telse if(code==\"10011\")\n\t\t{\n\t\t\tafter+='T';\n\t\t}\n\t\telse if(code==\"10100\")\n\t\t{\n\t\t\tafter+='U';\n\t\t}\n\t\telse if(code==\"10101\")\n\t\t{\n\t\t\tafter+='V';\n\t\t}\n\t\telse if(code==\"10110\")\n\t\t{\n\t\t\tafter+='W';\n\t\t}\n\t\telse if(code==\"10111\")\n\t\t{\n\t\t\tafter+='X';\n\t\t}\n\t\telse if(code==\"11000\")\n\t\t{\n\t\t\tafter+='Y';\n\t\t}\n\t\telse if(code==\"11001\")\n\t\t{\n\t\t\tafter+='Z';\n\t\t}\n\t\telse if(code==\"11010\")\n\t\t{\n\t\t\tafter+=' ';\n\t\t}\n\t\telse if(code==\"11011\")\n\t\t{\n\t\t\tafter+='.';\n\t\t}\n\t\telse if(code==\"11100\")\n\t\t{\n\t\t\tafter+=',';\n\t\t}\n\t\telse if(code==\"11101\")\n\t\t{\n\t\t\tafter+='-';\n\t\t}\n\t\telse if(code==\"11110\")\n\t\t{\n\t\t\tafter+='\\'';\n\t\t}\n\t\telse if(code==\"11111\")\n\t\t{\n\t\t\tafter+='?';\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <vector>\n#include <string>\n#include <map>\n#include <queue>\n#include <stack>\n#include <algorithm>\n\n#define rep(i,j) REP((i), 0, (j))\n#define REP(i,j,k) for(int i=(j);(i)<(k);++i)\n#define between(a,x,b) ((a)<=(x)&&(x)<=(b))\nusing namespace std;\n\nstring convert(string str){\n  string res = \"\";\n  map<char, string>s;\n  s[' '] = \"101\";\n  s['\\''] = \"000000\";\n  s[','] = \"000011\";\n  s['-'] = \"10010001\";\n  s['.'] = \"100101\";\n  s['?'] = \"000001\";\n  s['A'] = \"100101\";\n  s['B'] = \"10011010\";\n  s['C'] = \"0101\";\n  s['D'] = \"0001\";\n  s['E'] = \"110\";\n  s['F'] = \"01001\";\n  s['G'] = \"100110011\";\n  s['H'] = \"010000\";\n  s['I'] = \"0111\";\n  s['J'] = \"10011000\";\n  s['K'] = \"0110\";\n  s['L'] = \"00100\";\n  s['M'] = \"10011001\";\n  s['N'] = \"0011110\";\n  s['O'] = \"00101\";\n  s['P'] = \"111\";\n  s['Q'] = \"10011111\";\n  s['R'] = \"1000\";\n  s['S'] = \"00110\";\n  s['T'] = \"00111\";\n  s['U'] = \"0011100\";\n  s['V'] = \"0011101\";\n  s['W'] = \"000010\";\n  s['X'] = \"010010\";\n  s['Y'] = \"0010011\";\n  s['Z'] = \"0010000\";\n\n  rep(i, str.length()){\n    res += s[str[i]];\n  }\n\n  while(res.size() % 5) res += \"0\";\n \n  return res;\n}\n\nstring reconvert(string str){\n  string res = \"\";\n  map<string, char>s;\n  s[\"00000\"] = 'A';\n  s[\"00001\"] = 'B';\n  s[\"00010\"] = 'C';\n  s[\"00011\"] = 'D';\n  s[\"00100\"] = 'E';\n  s[\"00101\"] = 'F';\n  s[\"00110\"] = 'G';\n  s[\"00111\"] = 'H';\n  s[\"01000\"] = 'I';\n  s[\"01001\"] = 'J';\n  s[\"01010\"] = 'K';\n  s[\"01011\"] = 'L';\n  s[\"01100\"] = 'M';\n  s[\"01101\"] = 'N';\n  s[\"01110\"] = 'O';\n  s[\"01111\"] = 'P';\n  s[\"10000\"] = 'Q';\n  s[\"10001\"] = 'R';\n  s[\"10010\"] = 'S';\n  s[\"10011\"] = 'T';\n  s[\"10100\"] = 'U';\n  s[\"10101\"] = 'V';\n  s[\"10110\"] = 'W';\n  s[\"10111\"] = 'X';\n  s[\"11000\"] = 'Y';\n  s[\"11001\"] = 'Z';\n  s[\"11010\"] = ' ';\n  s[\"11011\"] = '.';\n  s[\"11100\"] = ',';\n  s[\"11101\"] = '-';\n  s[\"11110\"] = '\\'';\n  s[\"11111\"] = '?';\n\n  for(int i = 0; i < str.length(); i += 5){\n    string f; // = string(str[i] + str[i+1] + str[i+2] + str[i+3] + str[i+4]);\n    f = str[i]; f += str[i+1]; f+= str[i+2]; f += str[i+3]; f += str[i+4];\n    res += s[f];\n  }\n  return res;\n}\n\nint main(){\n  string str;\n  while(getline(cin, str)){\n    str = convert(str);\n    str = reconvert(str);\n    cout << str << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <cstdio>\n#include <cstdlib>\nusing namespace std;const string table[] ={\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",};void out( const string &s ){int n = strtol( s.substr( 0, 5 ).c_str(), 0, 2 );if( n < 26 )putchar( n + 'A' );else putchar( \" .,-'?\"[n - 26] );}int main(){int c;string s;for(; c = getchar(), c != EOF; ){switch(c){case '\\n':if( s.length() > 0 ){s += \"0000\";out(s);}puts(\"\");s = \"\";break;case ' ':s += \"101\";break;case '\\'':s += \"000000\";break;case ',':s += \"000011\";break;case '-':s += \"10010001\";break;case '.':s += \"010001\";break;case '?':s += \"000001\";break;default:s += table[c - 'A'];break;}while( s.length() > 4 ){out( s );s = s.substr(5);}}}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n\n#include <iostream>\n#include <stdio.h>\n#include <string>\n#include <string.h>\n#include <queue>\n#include <cmath>\n#include <stack>\n#include <map>\n\n#define int64 long long int \nusing namespace std;\n\nstring encode(string, char);\nvoid decode(string);\n\nint main()\n{\n\tint c, first, second;\n\tstring str;\n\n\tsecond = 0;\n\twhile((c = getchar()) != EOF){\n\t\tfirst = second, second = c;\n\t\tif(!(first == '\\n' && second == EOF))\n\t\t\tstr = encode(str, first);\n\t}\n\tdecode(str);\n\n\treturn 0;\n}\n\nvoid decode(string str)\n{\n\tint i, len, r;\n\tstring part;\n\tconst string code[32] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\tconst char ch[35] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n\tlen = str.size();\n\n\tfor(i=0; i<len / 5; i++){\n\t\tpart = str.substr( 5*i, 5 );\n\t\tfor(int j=0; j<32; j++)\n\t\t\tif(part == code[j]) cout << ch[j];\n\t}\n\tif((r = len % 5) != 0){\n\t\tpart = str.substr( 5*i, len-1 );\n\t\tfor(i=0; i<5-r; i++) part += \"0\";\n\t\tfor(i=0; i<32; i++)\n\t\t\tif(part == code[i]) cout << ch[i];\n\t}\n\tcout << endl;\n\treturn;\n}\n\nstring encode(string str, char c)\n{\n\tconst string code[32] = {\n\t\t\"101\", \"000000\", \"000011\", \"10010001\",\n\t\t\"010001\", \"000001\", \"100101\", \"10011010\",\n\t\t\"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\",\n\t\t\"0110\", \"00100\", \"10011001\", \"10011110\",\n\t\t\"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\",\n\t\t\"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tconst char ch[35] = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; \n\n\tfor(int i=0; i<32; i++){\n\t\tif(c == ch[i]){\n\t\t\tif(str.empty()) str = code[i];\n\t\t\telse str += code[i];\n\t\t}\n\t}\n\treturn str;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<map>\n#include<string>\n#include<cstdio>\nusing namespace std;\n\nmap<char, string> dict;\nmap<string, char> tcid;\nvoid init(){\n    dict[' '] = \"101\";\n    dict['\\''] = \"000000\";\n    dict[','] = \"000011\";\n    dict['-'] = \"10010001\";\n    dict['.'] = \"010001\";\n    dict['?'] = \"000001\";\n    dict['A'] = \"100101\";\n    dict['B'] = \"10011010\";\n    dict['C'] = \"0101\";\n    dict['D'] = \"0001\";\n    dict['E'] = \"110\";\n    dict['F'] = \"01001\";\n    dict['G'] = \"10011011\";\n    dict['H'] = \"010000\";\n    dict['I'] = \"0111\";\n    dict['J'] = \"10011000\";\n    dict['K'] = \"0110\";\n    dict['L'] = \"00100\";\n    dict['M'] = \"10011001\";\n    dict['N'] = \"10011110\";\n    dict['O'] = \"00101\";\n    dict['P'] = \"111\";\n    dict['Q'] = \"10011111\";\n    dict['R'] = \"1000\";\n    dict['S'] = \"00110\";\n    dict['T'] = \"00111\";\n    dict['U'] = \"10011100\";\n    dict['V'] = \"10011101\";\n    dict['W'] = \"000010\";\n    dict['X'] = \"10010010\";\n    dict['Y'] = \"10010011\";\n    dict['Z'] = \"10010000\";\n    tcid[\"00000\"] ='A';\n    tcid[\"00001\"] ='B';\n    tcid[\"00010\"] ='C';\n    tcid[\"00011\"] ='D';\n    tcid[\"00100\"] ='E';\n    tcid[\"00101\"] ='F';\n    tcid[\"00110\"] ='G';\n    tcid[\"00111\"] ='H';\n    tcid[\"01000\"] ='I';\n    tcid[\"01001\"] ='J';\n    tcid[\"01010\"] ='K';\n    tcid[\"01011\"] ='L';\n    tcid[\"01100\"] ='M';\n    tcid[\"01101\"] ='N';\n    tcid[\"01110\"] ='O';\n    tcid[\"01111\"] ='P';\n    tcid[\"10000\"] ='Q';\n    tcid[\"10001\"] ='R';\n    tcid[\"10010\"] ='S';\n    tcid[\"10011\"] ='T';\n    tcid[\"10100\"] ='U';\n    tcid[\"10101\"] ='V';\n    tcid[\"10110\"] ='W';\n    tcid[\"10111\"] ='X';\n    tcid[\"11000\"] ='Y';\n    tcid[\"11001\"] ='Z';\n    tcid[\"11010\"] =' ';\n    tcid[\"11011\"] ='.';\n    tcid[\"11100\"] =',';\n    tcid[\"11101\"] ='-';\n    tcid[\"11110\"] ='\\'';\n    tcid[\"11111\"] ='?';\n}\n\nstring solve(string a){\n    string tmp = \"\";\n    string res = \"\";\n    if(a == \"\")return a;\n    for(int i = 0;i < a.size();i++){\n\ttmp += dict[a[i]];\n    }\n    while(tmp.size()%5)tmp+=\"0\";\n    for(int i = 0;i < tmp.size();i += 5){\n\tstring x = \"\";\n\tfor(int j = 0;j < 5;j++){\n\t    x += tmp[i + j];\n\t}\n\tres += tcid[x];\n    }\n    return res;\n}\nbool fin = false;\nstring get_line(){\n    string res = \"\";\n    while(true){\n\tchar t = getchar();\n\tif(t == '\\n' || t == EOF){\n\t    if(t == EOF)fin = true;\n\t    break;\n\t}\n\tres += t;\n    }\n    return res;\n}\n\nint main(){\n    init();\n    while(!fin){\n\tstring res = solve(get_line());\n\tcout << res << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<string>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\n\nint main(){\n\tchar chs[]=\" .,-'?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tstring codes[32]={\n\t\t\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n\t\t,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n\t\t,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n\t\t,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\t\n\tchar str[1024];\n\tstring s,t,ans;\n\twhile(fgets(str,1024,stdin)){\n\t\tfor(int i=0;str[i];i++){\n\t\t\tif(str[i]=='\\n')s+=' ';\n\t\t\telse s+=str[i];\n\t\t}\n\t}\n\tfor(int i=0;i<s.size();i++){\n\t\tt += codes[find(chs,chs+32,s[i])-chs];\n\t}\n\tif(t.size()%5)t.append(5-t.size()%5,'0');\n\tfor(int i=0;i<t.size();i+=5){\n\t\tint n=0;\n\t\tfor(int j=0;j<5;j++)n = n<<1|t[i+j]-'0';\n\t\tif(n<26)ans += 'A'+n;\n\t\telse ans += \" .,-'?\"[n-26];\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n\tstring tmp;\n\t\twhile(getline(cin, tmp)){\n\t\tstring input_str = \"\";\n\t\tfor(int i=0; i<tmp.size(); i++){\n\t\t\tswitch(tmp[i]){\n\t\t\tcase ' ' :input_str += \"101\"\t    ;break;\n\t\t\tcase '\\'':input_str += \"000000\"\t\t;break;\n\t\t\tcase ',' :input_str += \"000011\"\t\t;break;\n\t\t\tcase '-' :input_str += \"10010001\"\t;break;\n\t\t\tcase '.' :input_str += \"010001\"\t\t;break;\n\t\t\tcase '?' :input_str += \"000001\"\t    ;break;\n\t\t\tcase 'A' :input_str += \"100101\"\t\t;break;\n\t\t\tcase 'B' :input_str += \"10011010\"\t;break;\n\t\t\tcase 'C' :input_str += \"0101\"\t\t;break;\n\t\t\tcase 'D' :input_str += \"0001\"\t\t;break;\n\t\t\tcase 'E' :input_str += \"110\"\t\t;break;\n\t\t\tcase 'F' :input_str += \"01001\"\t\t;break;\n\t\t\tcase 'G' :input_str += \"10011011\"\t;break;\n\t\t\tcase 'H' :input_str += \"010000\"\t\t;break;\n\t\t\tcase 'I' :input_str += \"0111\"\t\t;break;\n\t\t\tcase 'J' :input_str += \"10011000\"\t;break;\n\t\t\tcase 'K' :input_str += \"0110\"\t\t;break;\n\t\t\tcase 'L' :input_str += \"00100\"\t\t;break;\n\t\t\tcase 'M' :input_str += \"10011001\"\t;break;\n\t\t\tcase 'N' :input_str += \"10011110\"\t;break;\n\t\t\tcase 'O' :input_str += \"00101\"\t\t;break;\n\t\t\tcase 'P' :input_str += \"111\"\t\t;break;\n\t\t\tcase 'Q' :input_str += \"10011111\"\t;break;\n\t\t\tcase 'R' :input_str += \"1000\"\t\t;break;\n\t\t\tcase 'S' :input_str += \"00110\"\t\t;break;\n\t\t\tcase 'T' :input_str += \"00111\"\t\t;break;\n\t\t\tcase 'U' :input_str += \"10011100\"\t;break;\n\t\t\tcase 'V' :input_str += \"10011101\"\t;break;\n\t\t\tcase 'W' :input_str += \"000010\"\t\t;break;\n\t\t\tcase 'X' :input_str += \"10010010\"\t;break;\n\t\t\tcase 'Y' :input_str += \"10010011\"\t;break;\n\t\t\tcase 'Z' :input_str += \"10010000\"\t;break;\n\t\t\t}\n\t\t}\n\t\tint pad = 5 - input_str.size()%5;\n\t\tfor(int i=0; i<pad; i++)input_str += '0';\n\t\tstring out = \"\";\n\t\tfor(int i=0; i<input_str.size(); i+=5){\n\t\t\tstring output_str = input_str.substr(i, 5);\n\t\t\tif(output_str== \"00000\"){ out += 'A'; }\n\t\t\telse if( output_str==\"00001\") { out += 'B';}\t\n\t\t\telse if( output_str==\"00010\") { out += 'C';}\t\n\t\t\telse if( output_str==\"00011\") { out += 'D';}\t\n\t\t\telse if( output_str==\"00100\") { out += 'E';}\t\n\t\t\telse if( output_str==\"00101\") { out += 'F';}\t\n\t\t\telse if( output_str==\"00110\") { out += 'G';}\t\n\t\t\telse if( output_str==\"00111\") { out += 'H';}\t\n\t\t\telse if( output_str==\"01000\") { out += 'I';}\t\n\t\t\telse if( output_str==\"01001\") { out += 'J';}\t\n\t\t\telse if( output_str==\"01010\") { out += 'K';}\t\n\t\t\telse if( output_str==\"01011\") { out += 'L';}\t\n\t\t\telse if( output_str==\"01100\") { out += 'M';}\t\n\t\t\telse if( output_str==\"01101\") { out += 'N';}\t\n\t\t\telse if( output_str==\"01110\") { out += 'O';}\t\n\t\t\telse if( output_str==\"01111\") { out += 'P';}\t\n\t\t\telse if( output_str==\"10000\") { out += 'Q';}\t\n\t\t\telse if( output_str==\"10001\") { out += 'R';}\t\n\t\t\telse if( output_str==\"10010\") { out += 'S';}\t\n\t\t\telse if( output_str==\"10011\") { out += 'T';}\t\n\t\t\telse if( output_str==\"10100\") { out += 'U';}\t\n\t\t\telse if( output_str==\"10101\") { out += 'V';}\t\n\t\t\telse if( output_str==\"10110\") { out += 'W';}\t\n\t\t\telse if( output_str==\"10111\") { out += 'X';}\t\n\t\t\telse if( output_str==\"11000\") { out += 'Y';}\t\n\t\t\telse if( output_str==\"11001\") { out += 'Z';}\t\n\t\t\telse if( output_str==\"11010\") { out += ' ';}\t\n\t\t\telse if( output_str==\"11011\") { out += '.';}\t\n\t\t\telse if( output_str==\"11100\") { out += ',';}\t\n\t\t\telse if( output_str==\"11101\") { out += '-';}\t\n\t\t\telse if( output_str==\"11110\") { out += '\\'';} \n\t\t\telse if( output_str==\"11111\") { out += '?';}\n\t\t}\n\t\tcout << out << endl;\n\t\ttmp.clear();\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstring L = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nstring A = \" ',-.?\" + L;\nstring B = \"101 000000 000011 10010001 010001 000001 100101 10011010 \"\n\t\"0101 0001 110 01001 10011011 010000 0111 10011000 \"\n\t\"0110 00100 10011001 10011110 00101 111 10011111 1000 \"\n\t\"00110 00111 10011100 10011101 000010 10010010 10010011 10010000\";\nstring C = L + \" .,-'?\";\nint bin2dec(string s){\n\tint x=0,i;\n\tfor (i=0;i<s.size();i++){\n\t\tx *= 2;\n\t\tif (s[i] =='1')x++;\n\t}\n\treturn x;\n}\nint main(){\n\tvector<string>x(32);\n\tstringstream ss(B);\n\tstring s,s1,s0;\n\tint i,n,p;\n\tfor (i = 0; i < 32; i++){\n\t\tss >> s;\n\t\tx[i]=s;\n\t}\n\twhile(getline(cin,s)){\n\t\tn = s.size();\n\t\ts1 = \"\";\n\t\tfor (i = 0; i < n; i++){\n\t\t\ts1+=x[A.find(s[i])];\n\t\t}\n\t\tn = s1.size()%5;\n\t\tif (n!= 0)s1 += string(5 - n,'0');\n\t\tn = s1.size();\n\t\ts = \"\";\n\t\tfor (i = 0; i < n; i += 5){\n\t\t\tp= bin2dec(s1.substr(i, 5));\n\t\t\ts += C[p];\n\t\t}\n\t\tcout << s << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <string>\nusing namespace std;\n\nconst char w[6] = {' ', '\\'', ',', '-', '.', '?'};\nconst char v[6] = {' ', '.', ',', '-', '\\'', '?'};\nconst char *enc1[6] = {\"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\"};\nconst char *enc2[26] = {\"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\"};\n\nvoid decode(string &buf) {\n  int t;\n  t = 0;\n  for (int i=0; i<5; i++) {\n    t <<= 1;\n    t += buf[i] - '0';\n  }\n  if (t < 26) printf(\"%c\", 'A'+t);\n  else printf(\"%c\", v[t-26]);\n  buf = buf.substr(5);\n}\n\nint main() {\n  int t;\n  char c;\n  string buf;\n\n  while ((c = getchar()) != EOF) {\n    if (c>='A' && c<='Z') {\n      buf += enc2[c-'A'];\n    } else {\n      for (int i=0; i<6; i++) {\n        if (c == w[i]) {\n          buf += enc1[i];\n          break;\n        }\n      }\n    }\n    while (buf.length() >= 5) decode(buf);\n    if (c=='\\n') {\n      t = buf.length();\n      if (t && t < 5) {\n        for (; t<5; ++t) {\n          buf += \"0\";\n        }\n        decode(buf);\n      }\n      printf(\"\\n\");\n    }\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cstring>\n#include<cstdio>\n#include<time.h>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define pb push_back\n#define mp make_pair\n#define all(in) in.begin(),in.end()\nconst double PI=acos(-1);\nconst double EPS=1e-10;\nconst int inf=1e8;\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\nint n;\nint main(){\n\tmap<char,string>in;\n\tin[' ']=\"101\";\n\tin['\\'']=\"000000\";\n\tin[',']=\"000011\";\n\tin['-']=\"10010001\";\n\tin['.']=\"010001\";\n\tin['?']=\"000001\";\n\tin['A']=\"100101\";\n\tin['B']=\"10011010\";\n\tin['C']=\"0101\";\n\tin['D']=\"0001\";\n\tin['E']=\"110\";\n\tin['F']=\"01001\";\n\tin['G']=\"10011011\";\n\tin['H']=\"010000\";\n\tin['I']=\"0111\";\n\tin['J']=\"10011000\";\n\tin['K']=\"0110\";\n\tin['L']=\"00100\";\n\tin['M']=\"10011001\";\n\tin['N']=\"10011110\";\n\tin['O']=\"00101\";\n\tin['P']=\"111\";\n\tin['Q']=\"10011111\";\n\tin['R']=\"1000\";\n\tin['S']=\"00110\";\n\tin['T']=\"00111\";\n\tin['U']=\"10011100\";\n\tin['V']=\"10011101\";\n\tin['W']=\"00010\";\n\tin['X']=\"10010010\";\n\tin['Y']=\"10010011\";\n\tin['Z']=\"10010000\";\n\tmap<string,char>out;\n\tout[\"00000\"]='A';\n\tout[\"00001\"]='B';\n\tout[\"00010\"]='C';\n\tout[\"00011\"]='D';\n\tout[\"00100\"]='E';\n\tout[\"00101\"]='F';\n\tout[\"00110\"]='G';\n\tout[\"00111\"]='H';\n\tout[\"01000\"]='I';\n\tout[\"01001\"]='J';\n\tout[\"01010\"]='K';\n\tout[\"01011\"]='L';\n\tout[\"01100\"]='M';\n\tout[\"01101\"]='N';\n\tout[\"01110\"]='O';\n\tout[\"01111\"]='P';\n\tout[\"10000\"]='Q';\n\tout[\"10001\"]='R';\n\tout[\"10010\"]='S';\n\tout[\"10011\"]='T';\n\tout[\"10100\"]='U';\n\tout[\"10101\"]='V';\n\tout[\"10110\"]='W';\n\tout[\"10111\"]='X';\n\tout[\"11000\"]='Y';\n\tout[\"11001\"]='Z';\n\tout[\"11010\"]=' ';\n\tout[\"11011\"]='.';\n\tout[\"11100\"]=',';\n\tout[\"11101\"]='-';\n\tout[\"11110\"]='\\'';\n\tout[\"11111\"]='?';\n\tstring s;\n\twhile(getline(cin,s)){\n\t\tstring a=\"\";\n\t\trep(i,s.size())a+=in[s[i]];\n\t\twhile(a.size()%5)a+='0';\n\t\trep(i,a.size()/5)cout<<out[a.substr(i*5,5)]<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <string>\nusing namespace std;\n\nint main(){\n  map<char,string> data1;\n  map<string,char> data2;\n\n  data1[' ']=\"101\";\n  data1['\\'']=\"000000\";\n  data1[',']=\"000011\";\n  data1['-']=\"10010001\";\n  data1['.']=\"010001\";\n  data1['?']=\"000001\";\n  data1['A']=\"100101\";\n  data1['B']=\"10011010\";\n  data1['C']=\"0101\";\n  data1['D']=\"0001\";\n  data1['E']=\"110\";\n  data1['F']=\"01001\";\n  data1['G']=\"10011011\";\n  data1['H']=\"010000\";\n  data1['I']=\"0111\";\n  data1['J']=\"10011000\";\n  data1['K']=\"0110\";\n  data1['L']=\"00100\";\n  data1['M']=\"10011001\";\n  data1['N']=\"10011110\";\n  data1['O']=\"00101\";\n  data1['P']=\"111\";\n  data1['Q']=\"10011111\";\n  data1['R']=\"1000\";\n  data1['S']=\"00110\";\n  data1['T']=\"00111\";\n  data1['U']=\"10011100\";\n  data1['V']=\"10011101\";\n  data1['W']=\"000010\";\n  data1['X']=\"10010010\";\n  data1['Y']=\"10010011\";\n  data1['Z']=\"10010000\";\n\n  data2[\"00000\"]='A';\n  data2[\"00001\"]='B';\n  data2[\"00010\"]='C';\n  data2[\"00011\"]='D';\n  data2[\"00100\"]='E';\n  data2[\"00101\"]='F';\n  data2[\"00110\"]='G';\n  data2[\"00111\"]='H';\n  data2[\"01000\"]='I';\n  data2[\"01001\"]='J';\n  data2[\"01010\"]='K';\n  data2[\"01011\"]='L';\n  data2[\"01100\"]='M';\n  data2[\"01101\"]='N';\n  data2[\"01110\"]='O';\n  data2[\"01111\"]='P';\n  data2[\"10000\"]='Q';\n  data2[\"10001\"]='R';\n  data2[\"10010\"]='S';\n  data2[\"10011\"]='T';\n  data2[\"10100\"]='U';\n  data2[\"10101\"]='V';\n  data2[\"10110\"]='W';\n  data2[\"10111\"]='X';\n  data2[\"11000\"]='Y';\n  data2[\"11001\"]='Z';\n  data2[\"11010\"]=' ';\n  data2[\"11011\"]='.';\n  data2[\"11100\"]=',';\n  data2[\"11101\"]='-';\n  data2[\"11110\"]='\\'';\n  data2[\"11111\"]='?';\n\n  string  input=\"\";\n  string ans=\"\";\n  while(1){\n    getline(cin,input);\n    char a;\n    if(scanf(\"%c\", &a)==EOF) break;\n    else{\n      input+=' ';\n      input+=a;\n    }\n  }\n\n  for(int i=0;;i++){\n    if(input[i]=='\\0') break;\n    ans+=data1[input[i]];\n  }\n  ans+='!';\n  int i, count=0;\n\n  while(1){\n    string temp=\"\";\n    for(i=0;i<5;i++, count++){\n      if(ans[count]=='!') {\n\tif(i!=0){\n\t  for(int j=4;;j--){\n\t    temp+='0';\n\t    if(i==j) break;\n\t  }\n\t}\n\tbreak;\n      }\n      temp+=ans[count];\n    }\n    cout << data2[temp];\n    if(ans[count]=='!') break;\n  }\n  \n  cout << endl;\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<deque>\n#include<algorithm>\n#include<functional>\n#include<string>\n#include<unordered_map>\nusing namespace std;\n\nunordered_map<char, string>U;\nstring b[26] = {\n\t\"100101\",\n\t\"10011010\",\n\t\"0101\",\n\t\"0001\",\n\t\"110\",\n\t\"01001\",\n\t\"10011011\",\n\t\"010000\",\n\t\"0111\",\n\t\"10011000\",\n\t\"0110\",\n\t\"00100\",\n\t\"10011001\",\n\t\"10011110\",\n\t\"00101\",\n\t\"111\",\n\t\"10011111\",\n\t\"1000\",\n\t\"00110\",\n\t\"00111\",\n\t\"10011100\",\n\t\"10011101\",\n\t\"000010\",\n\t\"10010010\"\n\t\"10010011\",\n\t\"10010000\",\n};\nchar t[6]{ ' ','.',',','-','\\'','?' };\nsigned main() {\n\tU[' '] = \"101\";\n\tU['\\''] = \"000000\";\n\tU[','] = \"000011\";\n\tU['-'] = \"10010001\";\n\tU['.'] = \"010001\";\n\tU['?'] = \"000001\";\n\tstring a;\n\twhile (getline(cin, a)) {\n\t\tstring c;\n\t\tfor (char d : a) {\n\t\t\tif (d >= 'A'&&d <= 'Z') {\n\t\t\t\tc += b[d - 'A'];\n\t\t\t}\n\t\t\telse c += U[d];\n\t\t}\n\t\tint d = c.length() / 5;\n\t\tif (c.length() % 5)d++;\n\t\tc += \"0000\";\n\t\tfor (int e = 0; e < d; e++) {\n\t\t\tstring k = c.substr(e * 5, 5);\n\t\t\tint S = 0;\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tif (k[i] == '1') {\n\t\t\t\t\tS += 1 << (4 - i);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (S <= 25) { cout << char(S + 'A'); }\n\t\t\telse cout << t[S - 26];\n\t\t}\n\t\tcout << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <iomanip>\n#include <queue>\n#include <set>\n#include <map>\n#include <cstdlib>\n#include <cstdio>\n#include <cmath>\n#include <bitset>\nusing namespace std;\n\n\nconst double EPS = 1e-9;\n\nint main(){\n\tmap<char, string> enc;\n\tenc[' '] = \"101\";\n\tenc['\\''] = \"000000\";\n\tenc[','] = \"000011\";\n\tenc['-'] = \"10010001\";\n\tenc['.'] = \"010001\";\n\tenc['?'] = \"000001\";\n\tenc['A'] = \"100101\";\n\tenc['B'] = \"10011010\";\n\tenc['C'] = \"0101\";\n\tenc['D'] = \"0001\";\n\tenc['E'] = \"110\";\n\tenc['F'] = \"01001\";\n\tenc['G'] = \"10011011\";\n\tenc['H'] = \"010000\";\n\tenc['I'] = \"0111\";\n\tenc['J'] = \"10011000\";\n\tenc['K'] = \"0110\";\n\tenc['L'] = \"00100\";\n\tenc['M'] = \"10011001\";\n\tenc['N'] = \"10011110\";\n\tenc['O'] = \"00101\";\n\tenc['P'] = \"111\";\n\tenc['Q'] = \"10011111\";\n\tenc['R'] = \"1000\";\n\tenc['S'] = \"00110\";\n\tenc['T'] = \"00111\";\n\tenc['U'] = \"10011100\";\n\tenc['V'] = \"10011101\";\n\tenc['W'] = \"000010\";\n\tenc['X'] = \"10010010\";\n\tenc['Y'] = \"10010011\";\n\tenc['Z'] = \"10010000\";\n\n\tstring d = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\tmap<string, char> dec;\n\tfor(int i = 0; i < 32; i++){\n\t\tdec[bitset<5>(i).to_string()] = d[i];\n\t}\n\n\tmap<string, char>::iterator it = dec.begin();\n\tfor(; it != dec.end(); it++){\n\t\tcout << it->second << ':' << it->first << endl;\n\t}\n\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tstring e = \"\";\n\t\tfor(int i = 0; i < s.size(); i++){\n\t\t\te += enc[s[i]];\n\t\t}\n\t\twhile(e.size()%5 != 0){\n\t\t\te += \"0\";\n\t\t}\n\t\tfor(int i = 0; i < e.size(); i+=5){\n\t\t\tcout << dec[e.substr(i, 5)];\n\t\t}\n\t\tcout << endl;\n\t}\n\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n#include <cstdlib>\nusing namespace std;\n\nint main(){\n  map<char,string> e;\n  e[' ']=\"101\";\n  e['\\'']=\"000000\";\n  e[',']=\"000011\";\n  e['-']=\"10010001\";\n  e['.']=\"010001\";\n  e['A']=\"100101\";e['B']=\"10011010\";e['C']=\"0101\";\n  e['D']=\"0001\";e['E']=\"110\";e['F']=\"01001\";\n  e['G']=\"10011011\";e['H']=\"010000\";e['I']=\"0111\";\n  e['J']=\"10011000\";e['K']=\"0110\";e['L']=\"00100\";\n  e['M']=\"10011001\";e['N']=\"10011110\";e['O']=\"00101\";\n  e['P']=\"111\";e['Q']=\"10011111\";e['R']=\"1000\";\n  e['S']=\"00110\";e['T']=\"00111\";e['U']=\"10011100\";\n  e['V']=\"10011101\";e['W']=\"000010\";e['X']=\"10010010\";\n  e['Y']=\"10010011\";e['Z']=\"10010000\";\n  string s,t,a;\n  char d[32];\n  for(int i=0;i<26;++i) d[i]=i+'A';\n  d[26]=' ';d[27]='.';d[28]=',';d[29]='-';d[30]='\\'';d[31]='?';\n  while(getline(cin,s)){\n    t=\"\";a=\"\";\n    for(string::iterator it=s.begin();it!=s.end();++it) t+=e[*it];\n    for(int i=0;i<t.size()/5*5;i+=5) a+=d[strtol(t.substr(i,5).c_str(),NULL,2)];\n    if(t.size()%5) a+=d[strtol(t.substr(t.size()/5*5).c_str(),NULL,2)<<(5+(t.size()/5*5)-t.size())];\n    cout<<a<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<map>\n#include<set>\n#include<queue>\n#include<cstdio>\n#include<climits>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<sstream>\n#include<complex>\n\n#define f first\n#define s second\n#define mp make_pair\n\n#define REP(i,n) for(int i=0; i<(int)(n); i++)\n#define FOR(i,c) for(__typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)\n#define ALL(c) (c).begin(), (c).end()\n\nusing namespace std;\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef complex<double> P;\n\nint main(){\n  map<char,string> enc;\n  map<string,char> dec;\n\n  enc[' ']  = \"101\";\n  enc['\\''] = \"000000\";\n  enc[',']  = \"000011\";\n  enc['-']  = \"10010001\";\n  enc['.']  = \"010001\";\n  enc['?']  = \"000001\";\n  enc['A']  = \"100101\";\n  enc['B']  = \"10011010\";\n  enc['C']  = \"0101\";\n  enc['D']  = \"0001\";\n  enc['E']  = \"110\";\n  enc['F']  = \"01001\";\n  enc['G']  = \"10011011\";\n  enc['H']  = \"010000\";\n  enc['I']  = \"0111\";\n  enc['J']  = \"10011000\";\n  enc['K']  = \"0110\";\n  enc['L']  = \"00100\";\n  enc['M']  = \"10011001\";\n  enc['N']  = \"10011110\";\n  enc['O']  = \"00101\";\n  enc['P']  = \"111\";\n  enc['Q']  = \"10011111\";\n  enc['R']  = \"1000\";\n  enc['S']  = \"00110\";\n  enc['T']  = \"00111\";\n  enc['U']  = \"10011100\";\n  enc['V']  = \"10011101\";\n  enc['W']  = \"000010\";\n  enc['X']  = \"10010010\";\n  enc['Y']  = \"10010011\";\n  enc['Z']  = \"10010000\";\n\n  dec[\"00000\"]  = 'A';\n  dec[\"00001\"]  = 'B';\n  dec[\"00010\"]  = 'C';\n  dec[\"00011\"]  = 'D';\n  dec[\"00100\"]  = 'E';\n  dec[\"00101\"]  = 'F';\n  dec[\"00110\"]  = 'G';\n  dec[\"00111\"]  = 'H';\n  dec[\"01000\"]  = 'I';\n  dec[\"01001\"]  = 'J';\n  dec[\"01010\"]  = 'K';\n  dec[\"01011\"]  = 'L';\n  dec[\"01100\"]  = 'M';\n  dec[\"01101\"]  = 'N';\n  dec[\"01110\"]  = 'O';\n  dec[\"01111\"]  = 'P';\n  dec[\"10000\"]  = 'Q';\n  dec[\"10001\"]  = 'R';\n  dec[\"10010\"]  = 'S';\n  dec[\"10011\"]  = 'T';\n  dec[\"10100\"]  = 'U';\n  dec[\"10101\"]  = 'V';\n  dec[\"10110\"]  = 'W';\n  dec[\"10111\"]  = 'X';\n  dec[\"11000\"]  = 'Y';\n  dec[\"11001\"]  = 'Z';\n  dec[\"11010\"]  = ' ';\n  dec[\"11011\"]  = '.';\n  dec[\"11100\"]  = ',';\n  dec[\"11101\"]  = '-';\n  dec[\"11110\"]  = '\\'';\n\n  string input;\n  while(getline(cin, input)){\n    string buff = \"\";\n    REP(i, input.size()){\n      buff+=enc[input[i]];\n      while(buff.size() >= 5){\n\tstring tmp = buff.substr(0,5);\n\tbuff = buff.substr(5);\n\tcout << dec[tmp];\n      }\n    }\n    if(buff.size() != 0){\n      while(buff.size() != 5) buff += \"0\";\n      cout << dec[buff];\n    }\n\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<string>\n#include<iostream>\n\nusing namespace std;\n\nstring change1(char x){\n\tif(x==' ')return \"101\";\n\tif(x==',')return \"000011\";\n\tif(x=='-')return \"10010001\";\n\tif(x=='.')return \"010001\";\n\tif(x=='?')return \"000001\";\n\tif(x=='A')return \"100101\";\n\tif(x=='B')return \"10011010\";\n\tif(x=='C')return \"0101\";\n\tif(x=='D')return \"0001\";\n\tif(x=='E')return \"110\";\n\tif(x=='F')return \"01001\";\n\tif(x=='G')return \"10011011\";\n\tif(x=='H')return \"010000\";\n\tif(x=='I')return \"0111\";\n\tif(x=='J')return \"10011000\";\n\tif(x=='K')return \"0110\";\n\tif(x=='L')return \"00100\";\n\tif(x=='M')return \"10011001\";\n\tif(x=='N')return \"10011110\";\n\tif(x=='O')return \"00101\";\n\tif(x=='P')return \"111\";\n\tif(x=='Q')return \"10011111\";\n\tif(x=='R')return \"1000\";\n\tif(x=='S')return \"00110\";\n\tif(x=='T')return \"00111\";\n\tif(x=='U')return \"10011100\";\n\tif(x=='V')return \"10011101\";\n\tif(x=='W')return \"000010\";\n\tif(x=='X')return \"10010010\";\n\tif(x=='Y')return \"10010011\";\n\tif(x=='Z')return \"10010000\";\n\treturn \"000000\";\n}\n\nstring change2(string x){\n\tint c=0;\n\tfor(int i=0;i<5;i++){\n\t\tc*=2;\n\t\tc+=x[i]-'0';\n\t}\n\tif(c<=25){\n\t\tstring ans;\n\t\tans+='A'+c;\n\t\treturn ans;\n\t}\n\tif(c==26)return \" \";\n\tif(c==27)return \".\";\n\tif(c==28)return \",\";\n\tif(c==29)return \"-\";\n\tif(c==30)return \"'\";\n\tif(c==31)return \"?\";\n}\n\nint main(void){\n\tstring s;\n\tgetline(cin,s);\n\tstring str;\n\tfor(int i=0;i<s.size();i++){\n\t\tstr+=change1(s[i]);\n\t}\n\tint plus=str.size()%5;\n\tif(plus>0)for(int i=0;i<5-plus;i++)str+=\"0\";\n\tstring res;\n\tfor(int i=0;i<str.size()/5;i++){\n\t\tstring ss;\n\t\tfor(int j=0;j<5;j++)ss+=str[i*5+j];\n\t\tres+=change2(ss);\n\t}\n\tcout << res;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint main(void){\n\n\tchar tmp;\n\tint sum;\n\tstring inp;\n\tstring before(\"\"),num(\"\"),after(\"\");\n\t\n\twhile(tmp=getchar()){\n\t\tif(tmp=='\\n'){\n\t\t\tbefore+=inp;\n\t\t\tafter=(\"\");\n\t\t\tnum=(\"\");\n\t\t\tfor(int i=0;i<before.length();i++){\n\t\t\t\tswitch(before[i]){\n\t\t\t\t\tcase' ':\n\t\t\t\t\t\tnum+=\"101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'\\'':\n\t\t\t\t\t\tnum+=\"000000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase',':\n\t\t\t\t\t\tnum+=\"000011\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'-':\n\t\t\t\t\t\tnum+=\"10010001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'.':\n\t\t\t\t\t\tnum+=\"010001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'?':\n\t\t\t\t\t\tnum+=\"000001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'A':\n\t\t\t\t\t\tnum+=\"100101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'B':\n\t\t\t\t\t\tnum+=\"10011010\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'C':\n\t\t\t\t\t\tnum+=\"0101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'D':\n\t\t\t\t\t\tnum+=\"0001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'E':\n\t\t\t\t\t\tnum+=\"110\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'F':\n\t\t\t\t\t\tnum+=\"01001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'G':\n\t\t\t\t\t\tnum+=\"10011011\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'H':\n\t\t\t\t\t\tnum+=\"010000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'I':\n\t\t\t\t\t\tnum+=\"0111\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'J':\n\t\t\t\t\t\tnum+=\"10011000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'K':\n\t\t\t\t\t\tnum+=\"0110\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'L':\n\t\t\t\t\t\tnum+=\"00100\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'M':\n\t\t\t\t\t\tnum+=\"10011001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'N':\n\t\t\t\t\t\tnum+=\"10011110\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'O':\n\t\t\t\t\t\tnum+=\"00101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'P':\n\t\t\t\t\t\tnum+=\"111\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'Q':\n\t\t\t\t\t\tnum+=\"10011111\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'R':\n\t\t\t\t\t\tnum+=\"1000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'S':\n\t\t\t\t\t\tnum+=\"00110\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'T':\n\t\t\t\t\t\tnum+=\"00111\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'U':\n\t\t\t\t\t\tnum+=\"10011100\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'V':\n\t\t\t\t\t\tnum+=\"10011101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'W':\n\t\t\t\t\t\tnum+=\"000010\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'X':\n\t\t\t\t\t\tnum+=\"10010010\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'Y':\n\t\t\t\t\t\tnum+=\"10010011\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'Z':\n\t\t\t\t\t\tnum+=\"10010000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile(num.length()%5!=0){\n\t\t\t\tnum+='0';\n\t\t\t}\n\t\t\tfor(int i=0;i<num.length();i+=5){\n\t\t\t\tsum=(num[i]-'0')*16+(num[i+1]-'0')*8+(num[i+2]-'0')*4+(num[i+3]-'0')*2+(num[i+4]-'0')*1;\n\t\t\t\tswitch(sum){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tafter+='A';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tafter+='B';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tafter+='C';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tafter+='D';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tafter+='E';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tafter+='F';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tafter+='G';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tafter+='H';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\tafter+='I';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\tafter+='J';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 10:\n\t\t\t\t\t\tafter+='K';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 11:\n\t\t\t\t\t\tafter+='L';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 12:\n\t\t\t\t\t\tafter+='M';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 13:\n\t\t\t\t\t\tafter+='N';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 14:\n\t\t\t\t\t\tafter+='O';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 15:\n\t\t\t\t\t\tafter+='P';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 16:\n\t\t\t\t\t\tafter+='Q';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 17:\n\t\t\t\t\t\tafter+='R';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 18:\n\t\t\t\t\t\tafter+='S';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 19:\n\t\t\t\t\t\tafter+='T';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 20:\n\t\t\t\t\t\tafter+='U';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 21:\n\t\t\t\t\t\tafter+='V';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 22:\n\t\t\t\t\t\tafter+='W';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 23:\n\t\t\t\t\t\tafter+='X';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 24:\n\t\t\t\t\t\tafter+='Y';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 25:\n\t\t\t\t\t\tafter+='Z';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 26:\n\t\t\t\t\t\tafter+=' ';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\tafter+='.';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 28:\n\t\t\t\t\t\tafter+=',';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 29:\n\t\t\t\t\t\tafter+='-';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 30:\n\t\t\t\t\t\tafter+='\\'';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 31:\n\t\t\t\t\t\tafter+='?';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout<<after<<endl;\n\t\t\tbefore=(\"\");\n\t\t}\n\t\telse before+=tmp;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n/*\nint main() {\n  string a, b;\n  while (cin >> a >> b) {\n    cout << \"m['\" << a << \"'] = \\\"\" << b << \"\\\";\" << endl;\n  }\n}\n*/\n\nvector<string> split(string s) {\n  vector<string> res;\n  string t;\n  for (int i = 0; i < s.size(); ++i) {\n    t += s[i];\n    if (t.size() == 5) {\n      res.push_back(t);\n      t = \"\";\n    }\n  }\n\n  return res;\n}\n\nint main() {\n  string s;\n  map<char, string> m;\n  map<string, string> t;\n\n  m[' '] = \"101\";\n  m['\\''] = \"000000\";\n  m[','] = \"000011\";\n  m['-'] = \"10010001\";\n  m['.'] = \"010001\";\n  m['?'] = \"000001\";\n  m['A'] = \"100101\";\n  m['B'] = \"10011010\";\n  m['C'] = \"0101\";\n  m['D'] = \"0001\";\n  m['E'] = \"110\";\n  m['F'] = \"01001\";\n  m['G'] = \"10011011\";\n  m['H'] = \"010000\";\n  m['I'] = \"0111\";\n  m['J'] = \"10011000\";\n  m['K'] = \"0110\";\n  m['L'] = \"00100\";\n  m['M'] = \"10011001\";\n  m['N'] = \"10011110\";\n  m['O'] = \"00101\";\n  m['P'] = \"111\";\n  m['Q'] = \"10011111\";\n  m['R'] = \"1000\";\n  m['S'] = \"00110\";\n  m['T'] = \"00111\";\n  m['U'] = \"10011100\";\n  m['V'] = \"10011101\";\n  m['W'] = \"000010\";\n  m['X'] = \"10010010\";\n  m['Y'] = \"10010011\";\n  m['Z'] = \"10010000\";\n\n  t[\"00000\"] = \"A\";\n  t[\"00001\"] = \"B\";\n  t[\"00010\"] = \"C\";\n  t[\"00011\"] = \"D\";\n  t[\"00100\"] = \"E\";\n  t[\"00101\"] = \"F\";\n  t[\"00110\"] = \"G\";\n  t[\"00111\"] = \"H\";\n  t[\"01000\"] = \"I\";\n  t[\"01001\"] = \"J\";\n  t[\"01010\"] = \"K\";\n  t[\"01011\"] = \"L\";\n  t[\"01100\"] = \"M\";\n  t[\"01101\"] = \"N\";\n  t[\"01110\"] = \"O\";\n  t[\"01111\"] = \"P\";\n  t[\"10000\"] = \"Q\";\n  t[\"10001\"] = \"R\";\n  t[\"10010\"] = \"S\";\n  t[\"10011\"] = \"T\";\n  t[\"10100\"] = \"U\";\n  t[\"10101\"] = \"V\";\n  t[\"10110\"] = \"W\";\n  t[\"10111\"] = \"X\";\n  t[\"11000\"] = \"Y\";\n  t[\"11001\"] = \"Z\";\n  t[\"11010\"] = \" \";\n  t[\"11011\"] = \".\";\n  t[\"11100\"] = \",\";\n  t[\"11101\"] = \"-\";\n  t[\"11110\"] = \"'\";\n  t[\"11111\"] = \"?\";\n\n  while (getline(cin, s)) {\n    string ss;\n    for (int i = 0; i < s.size(); ++i) {\n      ss += m[s[i]];\n    }\n\n    ss += string(5 - (int)ss.size() % 5, '0');\n\n    vector<string> v = split(ss);\n    for (int i = 0; i < v.size(); ++i) {\n      cout << t[v[i]];\n    }\n    puts(\"\");\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\nusing namespace std;\nint main(){\n\tmap<char,string> table;\n\ttable[' '] = \"101\";\n\ttable['\\''] = \"000000\";\n\ttable[','] = \"000011\";\n\ttable['-'] = \"10010001\";\n\ttable['.'] = \"010001\";\n\ttable['?'] = \"000001\";\n\ttable['A'] = \"100101\";\n\ttable['B'] = \"10011010\";\n\ttable['C'] = \"0101\";\n\ttable['D'] = \"0001\";\n\ttable['E'] = \"110\";\n\ttable['F'] = \"01001\";\n\ttable['G'] = \"10011011\";\n\ttable['H'] = \"010000\";\n\ttable['I'] = \"0111\";\n\ttable['J'] = \"10011000\";\n\ttable['K'] = \"0110\";\n\ttable['L'] = \"00100\";\n\ttable['M'] = \"10011001\";\n\ttable['N'] = \"10011110\";\n\ttable['O'] = \"00101\";\n\ttable['P'] = \"111\";\n\ttable['Q'] = \"10011111\";\n\ttable['R'] = \"1000\";\n\ttable['S'] = \"00110\";\n\ttable['T'] = \"00111\";\n\ttable['U'] = \"10011100\";\n\ttable['V'] = \"10011101\";\n\ttable['W'] = \"000010\";\n\ttable['X'] = \"10010010\";\n\ttable['Y'] = \"10010011\";\n\ttable['Z'] = \"10010000\";\n\tmap<string,char> table2;\n\ttable2[\"00000\"] = 'A';\n\ttable2[\"00001\"] = 'B';\n\ttable2[\"00010\"] = 'C';\n\ttable2[\"00011\"] = 'D';\n\ttable2[\"00100\"] = 'E';\n\ttable2[\"00101\"] = 'F';\n\ttable2[\"00110\"] = 'G';\n\ttable2[\"00111\"] = 'H';\n\ttable2[\"01000\"] = 'I';\n\ttable2[\"01001\"] = 'J';\n\ttable2[\"01010\"] = 'K';\n\ttable2[\"01011\"] = 'L';\n\ttable2[\"01100\"] = 'M';\n\ttable2[\"01101\"] = 'N';\n\ttable2[\"01110\"] = 'O';\n\ttable2[\"01111\"] = 'P';\n\ttable2[\"10000\"] = 'Q';\n\ttable2[\"10001\"] = 'R';\n\ttable2[\"10010\"] = 'S';\n\ttable2[\"10011\"] = 'T';\n\ttable2[\"10100\"] = 'U';\n\ttable2[\"10101\"] = 'V';\n\ttable2[\"10110\"] = 'W';\n\ttable2[\"10111\"] = 'X';\n\ttable2[\"11000\"] = 'Y';\n\ttable2[\"11001\"] = 'Z';\n\ttable2[\"11010\"] = ' ';\n\ttable2[\"11011\"] = '.';\n\ttable2[\"11100\"] = ',';\n\ttable2[\"11101\"] = '-';\n\ttable2[\"11110\"] = '\\'';\n\ttable2[\"11111\"] = '?';\n\tstring cent;\n\twhile(getline(cin,cent)){\n\t\tstring signal,ans;\n\t\tfor(int i=0; i<cent.size(); i++){\n\t\t\tsignal+=table[cent[i]];\n\t\t}\n\t\tfor(;signal.size()%5!=0;){\n\t\t\tsignal+='0';\n\t\t}\n\t\tfor(int i=0; i<signal.size(); i+=5){\n\t\t\tstring word = signal.substr(i,5);\n\t\t\tans+=table2[word];\n\t\t}\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) (r).begin(),(r).end()\n#define gsort(st,en) sort((st),(en),greater<int>())\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\nusing vi = vector<int>;\nusing vl = vector<ll>;\nusing dict = map<string,int>;\nusing pii = pair<int,int> ;\n\nconstexpr int imax = ((1<<30)-1)*2+1 ;\nconstexpr int inf = 100000000;\nconstexpr double PI = acos(-1.0) ;\ndouble eps = 1e-10 ;\nconst int dy[] = {-1,0,1,0};\nconst int dx[] = {0,-1,0,1};\n\ninline bool value(int x,int y,int w,int h){\n  return (x >= 0 && x < w && y >= 0 && y < h);\n}\n\ntemplate<typename T>\nvoid Unique(vector<T> &v){\n  sort(all(v));\n  v.erase(unique(all(v)),v.end());\n}\n\ntemplate<typename T>\nT ston(string& str, T n){\n  istringstream sin(str) ;\n  T num ;\n  sin >> num ;\n  return num ;\n}\n\nvoid Ans(bool f){\n  if(f) cout << \"YES\"<<endl;\n  else cout << \"NO\"<<endl;\n}\nmap<char,string> m;\nunsigned int binToUInt(const std::string &str)\n{\n  unsigned int val = 0;\n  for(int i = 0; i < (int)str.size(); ++i) {\n    switch (str[i]) {\n      case '0':\n        val *= 2;\n        break;\n      case '1':\n        val = val * 2 + 1;\n        break;\n    }\n  }\n  return val;\n}\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  m[' '] = \"101\";\n  m['\\''] = \"000000\";\n  m[','] = \"000011\";\n  m['-'] = \"10010001\";\n  m['.'] = \"010001\";\n  m['?'] = \"000001\";\n  m['A'] = \"100101\";\n  m['B'] = \"10011010\";\n  m['C'] = \"0101\";\n  m['D'] = \"0001\";\n  m['E'] = \"110\";\n  m['F'] = \"01001\";\n  m['G'] = \"10011011\";\n  m['H'] = \"010000\";\n  m['I'] = \"0111\";\n  m['J'] = \"10011000\";\n  m['K'] =\"0110\";\n  m['L'] = \"00100\";\n  m['M'] = \"10011001\";\n  m['N'] = \"10011110\";\n  m['O'] = \"00101\";\n  m['P'] = \"111\";\n  m['Q'] = \"10011111\";\n  m['R'] = \"1000\";\n  m['S'] = \"00110\";\n  m['T'] = \"00111\";\n  m['U'] = \"10011100\";\n  m['V'] = \"10011101\";\n  m['W'] = \"000010\";\n  m['X'] = \"10010010\";\n  m['Y'] = \"10010011\";\n  m['Z'] = \"10010000\";\n  string s,encode = \"\",encode2=\"\";\n  vector<string> decode;\n  getline(cin,s);\n  rep(i,s.size()){\n    encode += m[s[i]];\n  }\n  while(encode.size()%5){\n    encode += \"0\";\n  }\n  rep(i,encode.size()){\n    encode2 += encode[i];\n    if((i+1)%5==0){\n      decode.pb(encode2);\n      encode2.clear();\n    }\n  }\n  string decode2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  rep(i,decode.size()){\n    int k = binToUInt(decode[i]);\n    decode[i] = decode2[k];\n  }\n  rep(i,decode.size()){\n    cout << decode[i];\n  }\n  cout << endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <string>\n#include <map>\nusing namespace std;\n\nchar buf[100000];\nstring table1[256];\nmap<string, char> table2;\n\nint main() {\n  table1[' '] = \"101\";\n  table1['\\''] = \"000000\";\n  table1[','] = \"000011\";\n  table1['-'] = \"10010001\";\n  table1['.'] = \"010001\";\n  table1['?'] = \"000001\";\n  table1['A'] = \"100101\";\n  table1['B'] = \"10011010\";\n  table1['C'] = \"0101\";\n  table1['D'] = \"0001\";\n  table1['E'] = \"110\";\n  table1['F'] = \"01001\";\n  table1['G'] = \"10011011\";\n  table1['H'] = \"010000\";\n  table1['I'] = \"0111\";\n  table1['J'] = \"10011000\";\n  table1['K'] = \"0110\";\n  table1['L'] = \"00100\";\n  table1['M'] = \"10011001\";\n  table1['N'] = \"10011110\";\n  table1['O'] = \"00101\";\n  table1['P'] = \"111\";\n  table1['Q'] = \"10011111\";\n  table1['R'] = \"1000\";\n  table1['S'] = \"00110\";\n  table1['T'] = \"00111\";\n  table1['U'] = \"10011100\";\n  table1['V'] = \"10011101\";\n  table1['W'] = \"000010\";\n  table1['X'] = \"10010010\";\n  table1['Y'] = \"10010011\";\n  table1['Z'] = \"10010000\";\n\n  table2[\"00000\"] = 'A';\n  table2[\"00001\"] = 'B';\n  table2[\"00010\"] = 'C';\n  table2[\"00011\"] = 'D';\n  table2[\"00100\"] = 'E';\n  table2[\"00101\"] = 'F';\n  table2[\"00110\"] = 'G';\n  table2[\"00111\"] = 'H';\n  table2[\"01000\"] = 'I';\n  table2[\"01001\"] = 'J';\n  table2[\"01010\"] = 'K';\n  table2[\"01011\"] = 'L';\n  table2[\"01100\"] = 'M';\n  table2[\"01101\"] = 'N';\n  table2[\"01110\"] = 'O';\n  table2[\"01111\"] = 'P';\n  table2[\"10000\"] = 'Q';\n  table2[\"10001\"] = 'R';\n  table2[\"10010\"] = 'S';\n  table2[\"10011\"] = 'T';\n  table2[\"10100\"] = 'U';\n  table2[\"10101\"] = 'V';\n  table2[\"10110\"] = 'W';\n  table2[\"10111\"] = 'X';\n  table2[\"11000\"] = 'Y';\n  table2[\"11001\"] = 'Z';\n  table2[\"11010\"] = ' ';\n  table2[\"11011\"] = '.';\n  table2[\"11100\"] = ',';\n  table2[\"11101\"] = '-';\n  table2[\"11110\"] = '\\'';\n  table2[\"11111\"] = '?';\n\n  while (1) {\n    if (fgets(buf, sizeof(buf), stdin) == NULL) return 0;\n    char *p = strchr(buf, '\\n');\n    if (p) *p = '\\0';\n    \n    int n = strlen(buf);\n    string encoded;\n    for (int i=0; i<n; i++) {\n      encoded += table1[buf[i]];\n    }\n    encoded += string((5-encoded.size()%5)%5, '0');\n\n    string decoded;\n    for (int i=0; i<encoded.size()/5; i++) {\n      decoded += table2[encoded.substr(i*5, 5)];\n    }\n\n    printf(\"%s\\n\", decoded.c_str());\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n\tstring abc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\tstring abcc[32] = {\"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\",\n\t\t\t\t\t   \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\",\n\t\t\t\t\t   \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\t\t\t   \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\",\n\t\t\t\t\t   \"10010011\", \"10010000\", \"101\", \"010001\", \"000011\", \"10010001\", \"000000\", \"000001\"};\n\tstring zo = \"01\";\n\tstring abcd[32];\n\tfor (int i = 0; i < 32; i++) {\n\t\tstring c = \"\";\n\t\tstring d = \"\";\n\t\tint t = i;\n\t\tfor (int j = 0; j < 5; j++) {\n\t\t\tc += zo[t%2];\n\t\t\tt /= 2;\n\n\t\t}\n\t\tfor (int j = 4; j >= 0; j--) {\n\t\t\td += c[j];\n\t\t}\n\t\tabcd[i] = d;\n\t}\n\tstring a;\n\twhile (getline(cin, a)) {\n\t\tstring b = \"\";\n\t\tfor (int i = 0; i < a.size(); i++) {\n\t\t\tfor (int j = 0; j < abc.size(); j++) {\n\t\t\t\tif (a[i] == abc[j]) {\n\t\t\t\t\tb += abcc[j];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twhile (b.size() % 5 != 0) {\n\t\t\tb += '0';\n\t\t}\n\t\twhile (true) {\n\t\t\tfor (int j = 0; j < 32; j++) {\n\t\t\t\tif (b.substr(0, 5) == abcd[j]) {\n\t\t\t\t\tcout << abc[j];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (b.size() == 5) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tb = b.substr(5);\n\t\t\t}\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector< string > table1(128, string(\"\"));\nchar table2[36] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nvoid set(){\n    table1[65] = string(\"100101\");\n    table1[66] = string(\"10011010\");\n    table1[67] = string(\"0101\");\n    table1[68] = string(\"0001\");\n    table1[69] = string(\"110\");\n    table1[70] = string(\"01001\");\n    table1[71] = string(\"10011011\");\n    table1[72] = string(\"010000\");\n    table1[73] = string(\"0111\");\n    table1[74] = string(\"10011000\");\n    table1[75] = string(\"0110\");\n    table1[76] = string(\"00100\");\n    table1[77] = string(\"10011001\");\n    table1[78] = string(\"10011110\");\n    table1[79] = string(\"00101\");\n    table1[80] = string(\"111\");\n    table1[81] = string(\"10011111\");\n    table1[82] = string(\"1000\");\n    table1[83] = string(\"00110\");\n    table1[84] = string(\"00111\");\n    table1[85] = string(\"10011100\");\n    table1[86] = string(\"10011101\");\n    table1[87] = string(\"000011\");\n    table1[88] = string(\"10010010\");\n    table1[89] = string(\"10010011\");\n    table1[90] = string(\"10010000\");\n    table1[' '] = string(\"101\");\n    table1['\\''] = string(\"000000\");\n    table1[','] = string(\"000011\");\n    table1['-'] = string(\"10010001\");\n    table1['.'] = string(\"010001\");\n    table1['?'] = string(\"000001\");\n}\n\nint bToDeci(string& s){\n    int ans = 0;\n    string::iterator it = s.begin();\n    for(int n = 0; n < 5; n++){\n        if( it == s.end() ) continue;\n        ans *= 2;\n        ans += *it - '0';\n        it++;\n    }\n    return ans;\n\n}\n\nchar getBlock(string& s, string::iterator& i){\n    string c = \"\";\n    for(int n = 0; n < 5 && i != s.end(); n++, i++){\n        c.append( i, i+1 );\n    }\n    return table2[ bToDeci( c ) ];\n}\n\nint main(){\n    set();\n    string data;\n    while( getline(cin, data) ){\n        string c;\n        c = string(\"\");\n        for(string::iterator it = data.begin(); it != data.end(); it++){\n            c += table1[*it] ;\n        }\n        string::iterator it = c.begin();\n        while( it != c.end() ){\n            cout << getBlock(c, it);\n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<string>\n#include<cmath>\n\nusing namespace std;\n\nstring DoctorTableAD(char c){\n\tstring s;\n\tswitch( c ){\n\t\tcase ' ': s = \"101\"; break;\n\t\tcase 0x27: s = \"000000\"; break;\n\t\tcase ',': s = \"000011\"; break;\n\t\tcase '-': s = \"10010001\"; break;\n\t\tcase '.': s = \"010001\"; break;\n\t\tcase '?': s = \"000001\"; break;\n\t\tcase 'A': s = \"100101\"; break;\n\t\tcase 'B': s = \"10011010\"; break;\n\t\tcase 'C': s = \"0101\"; break;\n\t\tcase 'D': s = \"0001\"; break;\n\t\tcase 'E': s = \"110\"; break;\n\t\tcase 'F': s = \"01001\"; break;\n\t\tcase 'G': s = \"10011011\"; break;\n\t\tcase 'H': s = \"010000\"; break;\n\t\tcase 'I': s = \"0111\"; break;\n\t\tcase 'J': s = \"10011000\"; break;\n\t\tcase 'K': s = \"0110\"; break;\n\t\tcase 'L': s = \"00100\"; break;\n\t\tcase 'M': s = \"10011001\"; break;\n\t\tcase 'N': s = \"10011110\"; break;\n\t\tcase 'O': s = \"00101\"; break;\n\t\tcase 'P': s = \"111\"; break;\n\t\tcase 'Q': s = \"10011111\"; break;\n\t\tcase 'R': s = \"1000\"; break;\n\t\tcase 'S': s = \"00110\"; break;\n\t\tcase 'T': s = \"00111\"; break;\n\t\tcase 'U': s = \"10011100\"; break;\n\t\tcase 'V': s = \"10011101\"; break;\n\t\tcase 'W': s = \"000010\"; break;\n\t\tcase 'X': s = \"10010010\"; break;\n\t\tcase 'Y': s = \"10010011\"; break;\n\t\tcase 'Z': s = \"10010000\"; break;\n\t}\n\treturn s;\n}\nint myatoi(string bin_s){\n\tint ret = 0;\n\twhile( bin_s.length() > 0 ){\n\t\tret += (int)((bin_s[0] - '0') * pow(2.0, (double)(bin_s.length() - 1)));\n\t\tbin_s.erase(0,1);\n\t}\n\treturn ret;\n}\nchar DoctorTableDA(string &s){\n\tint d = myatoi(s);\n\tchar ac[] = \" .,-'?\";\n\t\n\tfor(int i = 0; i < 'Z' - 'A'; i++) if(d == i) return i + 'A';\n\tfor(int i = 0; i < sizeof(ac)/sizeof(*ac); i++) if(i + 26 == d) return ac[i];\n\treturn ' ';\n}\nstring DoctorLovedEncode(string &raw){\n\tstring s;\n\tstring ret;\n\tfor(unsigned int i = 0; i < raw.length(); i++){\n\t\ts += DoctorTableAD(raw[i]);\n\t}\n\t// padding\n\twhile( s.length() % 5 != 0 ) s += '0';\n\n\tfor(unsigned int i = 0; i < s.length() / 5; i++){\n\t\tstring subs = s.substr(i*5,5);\n\t\tret += DoctorTableDA( subs );\n\t}\n\treturn ret;\n}\n\nint main(void){\n\twhile(true){\n\t\tstring s;\n\n\t\twhile( true ){\n\t\t\tchar c;\n\t\t\tc = cin.get();\n\t\t\tif( cin.eof() ) return 0;\n\t\t\tif( c == '\\n') break;\n\t\t\telse s += c;\n\t\t}\n\n\t\tcout << DoctorLovedEncode( s ) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<string>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\n\nint main(){\n\tchar chs[]=\" .,-'?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tstring codes[32]={\n\t\t\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n\t\t,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n\t\t,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n\t\t,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\n\tstring s,t;\n\tgetline(cin,s);\n\n\tfor(int i=0;i<s.size();i++){\n\t\tt += codes[find(chs,chs+32,s[i])-chs];\n\t}\n\tif(t.size()%5)t.append(5-t.size()%5,'0');\n\tfor(int i=0;i<t.size();i+=5){\n\t\tint n=0;\n\t\tfor(int j=0;j<5;j++)n = n<<1|t[i+j]-'0';\n\t\tif(n<26)cout<<(char)('A'+n);\n\t\telse cout<<\" .,-'?\"[n-26];\n\t}\n\tcout<<endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n  string map[1000];\n  map['A']=\"100101\"; map['B']=\"10011010\"; map['C']=\"0101\"; map['D']=\"0001\";\n  map['E']=\"110\"; map['F']=\"01001\"; map['G']=\"10011011\"; map['H']=\"010000\";\n  map['I']=\"0111\"; map['J']=\"10011000\"; map['K']=\"0110\"; map['L']=\"00100\";\n  map['M']=\"10011001\"; map['N']=\"10011110\"; map['O']=\"00101\"; map['P']=\"111\";\n  map['Q']=\"10011111\"; map['R']=\"1000\"; map['S']=\"00110\"; map['T']=\"00111\";\n  map['U']=\"10011100\"; map['V']=\"10011101\"; map['W']=\"000010\"; map['X']=\"10010010\";\n  map['Y']=\"10010011\"; map['Z']=\"1001000\"; map[' ']=\"101\"; map['\\'']=\"000000\";\n  map[',']=\"000011\"; map['-']=\"10010001\"; map['.']=\"010001\",map['?']=\"000001\";\n  string alpha[]={\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\n\t\t  \"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\n\t\t  \"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\n\t\t  \"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"};\n  string altmp=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  string line,chli,ans;\n  getline(cin,line);\n  for(int i=0;i<line.size();i++){\n    chli += map[line[i]];\n  }\n  if(chli.size() % 5 != 0) chli.append(5-chli.size()%5,'0');\n  for(int i=0;i<chli.size();i+=5){\n    string tmp = chli.substr(i,5);\n    for(int j=0;j<32;j++){\n      if(tmp == alpha[j]) ans += altmp[j];\n    }\n  }\n  cout<< ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\nusing namespace std;\nint main(){\n  map<char,string> t;\n  t[' '] = \"101\";\n  t['\\''] = \"000000\";\n  t[','] = \"000011\";\n  t['-'] = \"10010001\";\n  t['.'] = \"010001\";\n  t['?'] = \"000001\";\n  t['A'] = \"100101\";\n  t['B'] = \"10011010\";\n  t['C'] = \"0101\";\n  t['D'] = \"0001\";\n  t['E'] = \"110\";\n  t['F'] = \"01001\";\n  t['G'] = \"10011011\";\n  t['H'] = \"010000\";\n  t['I'] = \"0111\";\n  t['J'] = \"10011000\";\n  t['K'] = \"0110\";\n  t['L'] = \"00100\";\n  t['M'] = \"10011001\";\n  t['N'] = \"10011110\";\n  t['O'] = \"00101\";\n  t['P'] = \"111\";\n  t['Q'] = \"10011111\";\n  t['R'] = \"1000\";\n  t['S'] = \"00110\";\n  t['T'] = \"00111\";\n  t['U'] = \"10011100\";\n  t['V'] = \"10011101\";\n  t['W'] = \"000010\";\n  t['X'] = \"10010010\";\n  t['Y'] = \"10010011\";\n  t['Z'] = \"10010000\";\n  map<string,char> t2;\n  t2[\"00000\"] = 'A';\n  t2[\"00001\"] = 'B';\n  t2[\"00010\"] = 'C';\n  t2[\"00011\"] = 'D';\n  t2[\"00100\"] = 'E';\n  t2[\"00101\"] = 'F';\n  t2[\"00110\"] = 'G';\n  t2[\"00111\"] = 'H';\n  t2[\"01000\"] = 'I';\n  t2[\"01001\"] = 'J';\n  t2[\"01010\"] = 'K';\n  t2[\"01011\"] = 'L';\n  t2[\"01100\"] = 'M';\n  t2[\"01101\"] = 'N';\n  t2[\"01110\"] = 'O';\n  t2[\"01111\"] = 'P';\n  t2[\"10000\"] = 'Q';\n  t2[\"10001\"] = 'R';\n  t2[\"10010\"] = 'S';\n  t2[\"10011\"] = 'T';\n  t2[\"10100\"] = 'U';\n  t2[\"10101\"] = 'V';\n  t2[\"10110\"] = 'W';\n  t2[\"10111\"] = 'X';\n  t2[\"11000\"] = 'Y';\n  t2[\"11001\"] = 'Z';\n  t2[\"11010\"] = ' ';\n  t2[\"11011\"] = '.';\n  t2[\"11100\"] = ',';\n  t2[\"11101\"] = '-';\n  t2[\"11110\"] = '\\'';\n  t2[\"11111\"] = '?';\n  string s,x;\n  getline(cin,s);\n  x = \"\";\n  for(int i=0; i<s.size(); i++){\n    x+=t[s[i]];\n  }\n  for(;x.size()%5;) x+=\"0\";\n  for(int i=0; i<x.size(); i+=5){\n    cout <<t2[x.substr(i,5)];\n  }\n  cout <<endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nchar c1[32] = {' ', '\\'',',','-','.','?','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\nstring s1[32] = {\"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \n\t\t\t\t \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \n\t\t\t\t \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"1001111\", \"1000\", \n\t\t\t\t \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\"};\n\nstring s2[32] = {\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \n\t\t\t\t \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \n\t\t\t\t \"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \n\t\t\t\t \"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"};\nchar c2[32] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z', ' ', '.',',','-','\\'','?'};\n\nvoid solve()\n{\n\tstring s;\n\twhile(getline(cin, s))\n\t{\n\t\tstring binary;\n\t\tfor(int i = 0; i < s.size(); ++i)\n\t\t{\n\t\t\tfor(int j = 0; j < 32; ++j)\n\t\t\t{\n\t\t\t\tif(s[i] == c1[j])\n\t\t\t\t{\n\t\t\t\t\tbinary += s1[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twhile(binary.size() % 5 != 0)\n\t\t{\n\t\t\tbinary += '0';\n\t\t}\n\t\t\n\t\tstring ans;\n\t\tfor(int i = 0; i < binary.size(); i += 5)\n\t\t{\n\t\t\tstring temp;\n\t\t\tfor(int j = 0; j < 5; ++j)\n\t\t\t{\n\t\t\t\ttemp += binary[i + j];\n\t\t\t}\n\t\t\tfor(int j = 0; j < 32; ++j)\n\t\t\t{\n\t\t\t\tif(temp == s2[j])\n\t\t\t\t{\n\t\t\t\t\tans += c2[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcout << ans << endl;\n\t}\n}\n\nint main()\n{\n\tsolve();\n\treturn(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define range(i,a,b) for(int (i)=(a);(i)<(b);(i)++)\n#define rep(i,n) range(i,0,n)\nusing namespace std;\n\nmap<char,string> e;\nmap<string,char> d;\n\nvoid init(){\n\te[' ']=\"101\";\n\te['\\'']=\"000000\";\n\te[',']=\"000011\";\n\te['-']=\"1001000\";\n\te['.']=\"010001\";\n\te['?']=\"000001\";\n\te['A']=\"100101\";\n\te['B']=\"10011010\";\n\te['C']=\"0101\";\n\te['D']=\"0001\";\n\te['E']=\"110\";\n\te['F']=\"01001\";\n\te['G']=\"10011011\";\n\te['H']=\"010000\";\n\te['I']=\"0111\";\n\te['J']=\"10011000\";\n\te['K']=\"0110\";\n\te['L']=\"00100\";\n\te['M']=\"10011001\";\n\te['N']=\"10011110\";\n\te['O']=\"00101\";\n\te['P']=\"111\";\n\te['Q']=\"10011111\";\n\te['R']=\"1000\";\n\te['S']=\"00110\";\n\te['T']=\"00111\";\n\te['U']=\"10011100\";\n\te['V']=\"10011101\";\n\te['W']=\"000010\";\n\te['X']=\"10010010\";\n\te['Y']=\"10010011\";\n\te['Z']=\"10010000\";\n\td[\"00000\"]='A';\n\td[\"00001\"]='B';\n\td[\"00010\"]='C';\n\td[\"00011\"]='D';\n\td[\"00100\"]='E';\n\td[\"00101\"]='F';\n\td[\"00110\"]='G';\n\td[\"00111\"]='H';\n\td[\"01000\"]='I';\n\td[\"01001\"]='J';\n\td[\"01010\"]='K';\n\td[\"01011\"]='L';\n\td[\"01100\"]='M';\n\td[\"01101\"]='N';\n\td[\"01110\"]='O';\n\td[\"01111\"]='P';\n\td[\"10000\"]='Q';\n\td[\"10001\"]='R';\n\td[\"10010\"]='S';\n\td[\"10011\"]='T';\n\td[\"10100\"]='U';\n\td[\"10101\"]='V';\n\td[\"10110\"]='W';\n\td[\"10111\"]='X';\n\td[\"11000\"]='Y';\n\td[\"11001\"]='Z';\n\td[\"11010\"]=' ';\n\td[\"11011\"]='.';\n\td[\"11100\"]=',';\n\td[\"11101\"]='-';\n\td[\"11110\"]='\\'';\n\td[\"11111\"]='?';\n}\n\nint main(void){\n\tstring s;\n\tinit();\n\twhile(1){\n\t\tgetline(cin,s);\n\t\tif(cin.eof())break;\n\t\tstring encode=\"\";\n\t\trep(i,s.size()) encode+=e[s[i]];\n\t\tstring decode=\"\";\n\t\tfor(int i=0;i<encode.size();i+=5){\n\t\t\tstring tmp=encode.substr(i,5);\n\t\t\twhile(tmp.size()<5) tmp+=\"0\";\n\t\t\tdecode+=d[tmp];\n\t\t}\n\t\t//cout << encode << endl;\n\t\tcout << decode << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//The Code A Doctor Loved\n#include<bits/stdc++.h>\nusing namespace std;\n\nstring p(string s, string t){\n  for(int i=0; i<t.length(); i++){\n    if(s.length()%6==5)s+=' ';\n    s+=t[i];\n  }\n  return s;\n}\n\nstring into(string s){\n  string t=\"\";\n  for(int i=0; i<s.length(); i++){\n    if(s[i]==' ')t=p(t, \"101\");\n    if(s[i]=='\\'')t=p(t, \"000000\");\n    if(s[i]==',')t=p(t,\"000011\");\n    if(s[i]=='_')t=p(t,\"10010001\");\n    if(s[i]=='.')t=p(t,\"010001\");\n    if(s[i]=='?')t=p(t,\"000001\");\n    if(s[i]=='A')t=p(t,\"100101\");\n    if(s[i]=='B')t=p(t,\"10011010\");\n    if(s[i]=='C')t=p(t,\"0101\");\n    if(s[i]=='D')t=p(t,\"0001\");\n    if(s[i]=='E')t=p(t,\"110\");\n    if(s[i]=='F')t=p(t,\"01001\");\n    if(s[i]=='G')t=p(t,\"10011011\");\n    if(s[i]=='H')t=p(t,\"010000\");\n    if(s[i]=='I')t=p(t,\"0111\");\n    if(s[i]=='J')t=p(t,\"10011000\");\n    if(s[i]=='K')t=p(t,\"0110\");\n    if(s[i]=='L')t=p(t,\"00100\");\n    if(s[i]=='M')t=p(t,\"10011001\");\n    if(s[i]=='N')t=p(t,\"10011110\");\n    if(s[i]=='O')t=p(t,\"00101\");\n    if(s[i]=='P')t=p(t,\"111\");\n    if(s[i]=='Q')t=p(t,\"10011111\");\n    if(s[i]=='R')t=p(t,\"1000\");\n    if(s[i]=='S')t=p(t,\"00110\");\n    if(s[i]=='T')t=p(t,\"00111\");\n    if(s[i]=='U')t=p(t,\"10011100\");\n    if(s[i]=='V')t=p(t,\"10011101\");\n    if(s[i]=='W')t=p(t,\"000010\");\n    if(s[i]=='X')t=p(t,\"10010010\");\n    if(s[i]=='Y')t=p(t,\"10010011\");\n    if(s[i]=='Z')t=p(t,\"10010000\");\n  }\n  while(t.length()%6!=5)t+='0';\n  stringstream ss(t);\n  string ret=\"\", tmp;\n  while(getline(ss, tmp, ' ')){\n    if(tmp==\"00000\")ret+='A';\n    if(tmp==\"00001\")ret+='B';\n    if(tmp==\"00010\")ret+='C';\n    if(tmp==\"00011\")ret+='D';\n    if(tmp==\"00100\")ret+='E';\n    if(tmp==\"00101\")ret+='F';\n    if(tmp==\"00110\")ret+='G';\n    if(tmp==\"00111\")ret+='H';\n    if(tmp==\"01000\")ret+='I';\n    if(tmp==\"01001\")ret+='J';\n    if(tmp==\"01010\")ret+='K';\n    if(tmp==\"01011\")ret+='L';\n    if(tmp==\"01100\")ret+='M';\n    if(tmp==\"01101\")ret+='N';\n    if(tmp==\"01110\")ret+='O';\n    if(tmp==\"01111\")ret+='P';\n    if(tmp==\"10000\")ret+='Q';\n    if(tmp==\"10001\")ret+='R';\n    if(tmp==\"10010\")ret+='S';\n    if(tmp==\"10011\")ret+='T';\n    if(tmp==\"10100\")ret+='U';\n    if(tmp==\"10101\")ret+='V';\n    if(tmp==\"10110\")ret+='W';\n    if(tmp==\"10111\")ret+='X';\n    if(tmp==\"11000\")ret+='Y';\n    if(tmp==\"11001\")ret+='Z';\n    if(tmp==\"11010\")ret+=' ';\n    if(tmp==\"11011\")ret+='.';\n    if(tmp==\"11100\")ret+=',';\n    if(tmp==\"11101\")ret+='_';\n    if(tmp==\"11110\")ret+='\\'';\n    if(tmp==\"11111\")ret+='?';\n  }\n  return ret;\n}\n\nint main(){\n  string s;\n  while(getline(cin, s)){\n    cout<<into(s)<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid hantei(char *str);\n\nchar DataBase[][3][80] =\n\t{\n\t/* [文字] ,[符号＿変換前] ,[符号＿変換後] */\n\t{ \" \", \"101\", \"11010\" },{ \"\\'\", \"000000\", \"11110\" },{ \",\", \"000011\", \"11100\" },{ \"-\", \"10010001\", \"11101\" },\n\t{ \".\", \"010001\", \"11011\" },{ \"?\", \"000001\", \"11111\" },{ \"A\", \"100101\", \"00000\" },{ \"B\", \"10011010\", \"00001\" },\n    { \"C\", \"0101\", \"00010\" },{ \"D\", \"0001\", \"00011\" },{ \"E\", \"110\", \"00100\" },{ \"F\", \"01001\", \"00101\" },\n\t{ \"G\", \"10011011\", \"00110\" },{ \"H\", \"010000\", \"00111\" },{ \"I\", \"0111\", \"01000\" },{ \"J\", \"10011000\", \"01001\" },\n\t{ \"K\", \"0110\", \"01010\" },{ \"L\", \"00100\", \"01011\" },{ \"M\", \"10011001\", \"01100\" },{ \"N\", \"10011110\", \"01101\" },\n\t{ \"O\", \"00101\", \"01110\" },{ \"P\", \"111\", \"01111\" },{ \"Q\", \"10011111\", \"10000\" },{ \"R\", \"1000\", \"10001\" },\n\t{ \"S\", \"00110\", \"10010\" },{ \"T\", \"00111\", \"10011\" },{ \"U\", \"10011100\", \"10100\" },{ \"V\", \"10011101\", \"10101\" },\n\t{ \"W\", \"000010\", \"10110\" },{ \"X\", \"10010010\", \"10111\" },{ \"Y\", \"10010011\", \"11000\" },{ \"Z\", \"100100000\", \"11001\" },\n    {\"\", \"\", \"\" }\n};\n\n\nint main(void)\n{\n\tchar str1[1000],str2[1000],ch;\n\tint cut_i;\n\t\n\t/*scanf(\"%[A-Z \\'.?,-]\",str);\n\t\thantei(str1);*/\n\tcut_i=0;\n\twhile((ch = getchar())!=EOF){\n\t\tif(ch !='\\n'){\n\t\t\tstr2[cut_i] = ch;\n\t\t\tcut_i++;\n\t\t}\n\t\telse {\n\t\t\tif(cut_i==0){\n\t\t\t\tprintf(\" \\n\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrncpy(str1,str2,cut_i);\n\t\t\t\tstr1[cut_i]='\\0';\n\t\t\t\thantei(str1);\n\t\t\t\tprintf(\"\\n\");\n\t\t\t\tcut_i=0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\nvoid hantei(char *str)\n{\n\tint len1,cut_i,cut_j,count;\n\tchar ans[1000]={\"\"},str2[1000]={\"\"},str3[1000]={\"\"};\n\tchar zero[]={\"0000\"};\n\n\tlen1 = strlen(str);\n\tcount = 0;\n\n\tfor(cut_i=0;cut_i<len1;cut_i++){\n\t\tcut_j=0;\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(!strncmp((str+cut_i),DataBase[cut_j][0],1)){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(str2,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\telse if(count !=0){\n\t\t\t\t\tstrcpy(str2+count,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\t\n\tlen1 = strlen(str2);\n\tcount = 0;\n\n\tif( len1 % 5 != 0){\n\t\tcut_i = 5 - len1 % 5;\n\t\tstrncat(str2,zero,cut_i);\n\t\tlen1 = strlen(str2);\n\t}\n\n\n\tfor(cut_i=0;cut_i<len1;cut_i+=5){\n\t\tcut_j=0;\n\t\tstrncpy(str3,str2+cut_i,5);\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(strcmp(str3,DataBase[cut_j][2]) == 0){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(ans,DataBase[cut_j][0]);\n\t\t\t\t\tcount =strlen(ans);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstrcat(ans,DataBase[cut_j][0]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\tprintf(ans);\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\n#include<string>\n#include<map>\n#include<cmath>\nusing namespace std;\nint change(string x){\n    int t = 0;\n    for(int i = 0; i < x.size(); i++){\n        t = t + (x[i]-'0')*pow(2,4-i);\n    }\n    return t;\n}\nint main(){\n    string str;\n    map<char,string> d;\n    d[' '] = \"101\";\n    d['\\''] = \"000000\";\n    d[','] = \"000011\";\n    d['-'] = \"10010001\";\n    d['.'] = \"010001\";\n    d['?'] = \"000001\";\n    d['A'] = \"100101\";\n    d['B'] = \"10011010\";\n    d['C'] = \"0101\";\n    d['D'] = \"0001\";\n    d['E'] = \"110\";\n    d['F'] = \"01001\";\n    d['G'] = \"10011011\";\n    d['H'] = \"010000\";\n    d['I'] = \"0111\";\n    d['J'] = \"10011000\";\n    d['K'] = \"0110\";\n    d['L'] = \"00100\";\n    d['M'] = \"10011001\";\n    d['N'] = \"10011110\";\n    d['O'] = \"00101\";\n    d['P'] = \"111\";\n    d['Q'] = \"10011111\";\n    d['R'] = \"1000\";\n    d['S'] = \"00110\";\n    d['T'] = \"00111\";\n    d['U'] = \"10011100\";\n    d['V'] = \"10011101\";\n    d['W'] = \"000010\";\n    d['X'] = \"10010010\";\n    d['Y'] = \"10010011\";\n    d['Z'] = \"10010000\";\n    string a = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n    while(getline(cin,str)){\n        string ans;\n        string temp;\n        for(int i = 0; i < str.size(); i++){\n            ans += d[str[i]];\n        }\n        for(int i = 0;i < ans.size()%5; i++){\n            ans+= \"0\";\n        }\n        for(int i = 0; i < ans.size(); i+=5){\n            temp=\"\";\n            temp += ans[i];\n            temp += ans[i+1];\n            temp += ans[i+2];\n            temp += ans[i+3];\n            temp += ans[i+4];\n            cout << a[change(temp)];\n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n  string map[1000];\n  map['A']=\"100101\"; map['B']=\"10011010\"; map['C']=\"0101\"; map['D']=\"0001\";\n  map['E']=\"110\"; map['F']=\"01001\"; map['G']=\"10011011\"; map['H']=\"010000\";\n  map['I']=\"0111\"; map['J']=\"10011000\"; map['K']=\"0110\"; map['L']=\"00100\";\n  map['M']=\"10011001\"; map['N']=\"10011110\"; map['O']=\"00101\"; map['P']=\"111\";\n  map['Q']=\"10011111\"; map['R']=\"1000\"; map['S']=\"00110\"; map['T']=\"00111\";\n  map['U']=\"10011100\"; map['V']=\"10011101\"; map['W']=\"000010\"; map['X']=\"10010010\";\n  map['Y']=\"10010011\"; map['Z']=\"10010000\"; map[' ']=\"101\"; map['\\'']=\"000000\";\n  map[',']=\"000011\"; map['-']=\"10010001\"; map['.']=\"010001\",map['?']=\"000001\";\n  string alpha[]={\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\n\t\t  \"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\n\t\t  \"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\n\t\t  \"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"};\n  string altmp=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  string line,chli,ans;\n  while(1){\n    getline(cin,line);\n    if(cin.eof()) break;\n    for(int i=0;i<line.size();i++){\n      chli += map[line[i]];\n    }\n    if(chli.size() % 5 != 0) chli.append(5-chli.size()%5,'0');\n    for(int i=0;i<chli.size();i+=5){\n      string tmp = chli.substr(i,5);\n      for(int j=0;j<32;j++){\n\tif(tmp == alpha[j]){\n\t  ans += altmp[j];\n\t  break;\n\t}\n      }\n    }\n    cout<< ans << endl;\n    ans.erase();\n    chli.erase();\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <string>\nusing namespace std;\n\nint main(){\n  map<char,string> data1;\n  map<string,char> data2;\n\n  data1[' ']=\"101\";\n  data1['\\'']=\"000000\";\n  data1[',']=\"000011\";\n  data1['-']=\"10010001\";\n  data1['.']=\"010001\";\n  data1['?']=\"000001\";\n  data1['A']=\"100101\";\n  data1['B']=\"10011010\";\n  data1['C']=\"0101\";\n  data1['D']=\"0001\";\n  data1['E']=\"110\";\n  data1['F']=\"01001\";\n  data1['G']=\"10011011\";\n  data1['H']=\"010000\";\n  data1['I']=\"0111\";\n  data1['J']=\"10011000\";\n  data1['K']=\"0110\";\n  data1['L']=\"00100\";\n  data1['M']=\"10011001\";\n  data1['N']=\"10011110\";\n  data1['O']=\"00101\";\n  data1['P']=\"111\";\n  data1['Q']=\"10011111\";\n  data1['R']=\"1000\";\n  data1['S']=\"00110\";\n  data1['T']=\"00111\";\n  data1['U']=\"10011100\";\n  data1['V']=\"10011101\";\n  data1['W']=\"000010\";\n  data1['X']=\"10010010\";\n  data1['Y']=\"10010011\";\n  data1['Z']=\"10010000\";\n\n  data2[\"00000\"]='A';\n  data2[\"00001\"]='B';\n  data2[\"00010\"]='C';\n  data2[\"00011\"]='D';\n  data2[\"00100\"]='E';\n  data2[\"00101\"]='F';\n  data2[\"00110\"]='G';\n  data2[\"00111\"]='H';\n  data2[\"01000\"]='I';\n  data2[\"01001\"]='J';\n  data2[\"01010\"]='K';\n  data2[\"01011\"]='L';\n  data2[\"01100\"]='M';\n  data2[\"01101\"]='N';\n  data2[\"01110\"]='O';\n  data2[\"01111\"]='P';\n  data2[\"10000\"]='Q';\n  data2[\"10001\"]='R';\n  data2[\"10010\"]='S';\n  data2[\"10011\"]='T';\n  data2[\"10100\"]='U';\n  data2[\"10101\"]='V';\n  data2[\"10110\"]='W';\n  data2[\"10111\"]='X';\n  data2[\"11000\"]='Y';\n  data2[\"11001\"]='Z';\n  data2[\"11010\"]=' ';\n  data2[\"11011\"]='.';\n  data2[\"11100\"]=',';\n  data2[\"11101\"]='-';\n  data2[\"11110\"]='\\'';\n  data2[\"11111\"]='?';\n\n  while(1){\n    string  input=\"\";\n    string ans=\"\";\n    int kiroku=0;\n    int f=0;\n    if(!getline(cin,input)) break;\n    \n    while(1){\n      for(int i=kiroku;;i++){\n\tif(input[i]=='\\0'){\n\t  f=1;\n\t  break;\n\t}\n\n\n\n\tif(input[i]==' ' && input[i+1]==' '){\n\t  int j;\n\t  for(j=i+1;;j++){\n\t    if(input[j]!=' ') break;\n\t  }\n\t  kiroku=j;\n\t  \n\t  \n\t  ans+='!';\n\t  int i, count=0;\n\t  \n\t  while(1){\n\t    string temp=\"\";\n\t    for(i=0;i<5;i++, count++){\n\t      if(ans[count]=='!') {\n\t\tif(i!=0){\n\t\t  for(int j=4;;j--){\n\t\t    temp+='0';\n\t\t    if(i==j) break;\n\t\t  }\n\t\t}\n\t\tbreak;\n\t      }\n\t      temp+=ans[count];\n\t    }\n\t    cout << data2[temp];\n\t    if(ans[count]=='!') break;\n\t  }\n\t  cout << endl;\n\t  ans=\"\";\n\t  break;\n\t}\n   \n\n\n\n\n\telse ans+=data1[input[i]];\n      }\n      if(f==1) break;\n    }\n    \n    ans+='!';\n    int i, count=0;\n    \n    while(1){\n      string temp=\"\";\n      for(i=0;i<5;i++, count++){\n\tif(ans[count]=='!') {\n\t  if(i!=0){\n\t    for(int j=4;;j--){\n\t      temp+='0';\n\t      if(i==j) break;\n\t    }\n\t  }\n\t  break;\n\t}\n\ttemp+=ans[count];\n      }\n      cout << data2[temp];\n      if(ans[count]=='!') break;\n    }\n    \n    cout << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n\n#define rep(i,n) for(int i=0;i<n;i++)\n\nusing namespace std;\n\nvector<string> split(string &str,char delim)\n{\n\tvector<string> res;\n\tsize_t current = 0,found;\n\twhile((found = str.find_first_of(delim,current)) != string::npos)\n\t{\n\t\tres.push_back(string(str,current,found  - current));\n\t\tcurrent = found + 1;\n\t}\n\tres.push_back(string(str,current,str.size() - current));\n\treturn res;\n}\n\n\nint main()\n{\n\tstring s;\n\tmap<char,string> ID;\n\tID[' '] = \"101\";\n\tID['\\''] = \"000000\";\n\tID[','] = \"000011\";\n\tID['-'] = \"100010001\";\n\tID['.'] = \"010001\";\n\tID['?'] = \"000001\";\n\tID['A'] = \"100101\";\n\tID['B'] = \"10011010\";\n\tID['C'] = \"0101\";\n\tID['D'] = \"0001\";\n\tID['E'] = \"110\";\n\tID['F'] = \"01001\";\n\tID['G'] = \"10011011\";\n\tID['H'] = \"010000\";\n\tID['I'] = \"0111\";\n\tID['J'] = \"10011000\";\n\tID['K'] = \"0110\";\n\tID['L'] = \"00100\";\n\tID['M'] = \"10011001\";\n\tID['N'] = \"100011110\";\n\tID['O'] = \"00101\";\n\tID['P'] = \"111\";\n\tID['Q'] = \"10011111\";\n\tID['R'] = \"1000\";\n\tID['S'] = \"00110\";\n\tID['T'] = \"00111\";\n\tID['U'] = \"10011100\";\n\tID['V'] = \"10011101\";\n\tID['W'] = \"000010\";\n\tID['X'] = \"10010010\";\n\tID['Y'] = \"10010011\";\n\tID['Z'] = \"10010000\";\n\n\tmap<string,string> Id;\n\tId[\"00000\"] = \"A\";\n\tId[\"00001\"] = \"B\";\n\tId[\"00010\"] = \"C\";\n\tId[\"00011\"] = \"D\";\n\tId[\"00100\"] = \"E\";\n\tId[\"00101\"] = \"F\";\n\tId[\"00110\"] = \"G\";\n\tId[\"00111\"] = \"H\";\n\tId[\"01000\"] = \"I\";\n\tId[\"01001\"] = \"J\";\n\tId[\"01010\"] = \"K\";\n\tId[\"01011\"] = \"L\";\n\tId[\"01100\"] = \"M\";\n\tId[\"01101\"] = \"N\";\n\tId[\"01110\"] = \"O\";\n\tId[\"01111\"] = \"P\";\n\tId[\"10000\"] = \"Q\";\n\tId[\"10001\"] = \"R\";\n\tId[\"10010\"] = \"S\";\n\tId[\"10011\"] = \"T\";\n\tId[\"10100\"] = \"U\";\n\tId[\"10101\"] = \"V\";\n\tId[\"10110\"] = \"W\";\n\tId[\"10111\"] = \"X\";\n\tId[\"11000\"] = \"Y\";\n\tId[\"11001\"] = \"Z\";\n\tId[\"11010\"] = \" \";\n\tId[\"11011\"] = \".\";\n\tId[\"11100\"] = \",\";\n\tId[\"11101\"] = \"-\";\n\tId[\"11110\"] = \"'\";\n\tId[\"11111\"] = \"?\";\n\n\n\tvector<string> temp;\n\tstring str = \"\";\n\twhile(getline(cin,s))\n\t{\n\t\trep(i,s.size())\n\t\t{\n\t\t\tstr += ID[s[i]];\n\t\t}\n\n\t\tint count = 1;\n\t\tfor(int i=0;i<str.size();i++)\n\t\t{\n\t\t\tif(count == 5)\n\t\t\t{\n\t\t\t\tstr.insert(i+1,\" \");\n\t\t\t\tcount  =0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\tvector<string> str2 = split(str,' ');\n\t\twhile(str2[str2.size()-1].size() < 5)\n\t\t{\n\t\t\tstr2[str2.size()-1] += \"0\";\n\t\t}\n\n\t\tstring ans = \"\";\n\t\trep(i,str2.size())\n\t\t{\n\t\t\tans += Id[str2[i]];\n\t\t}\n\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nchar A1[33] = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nchar B1[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nstring A2[32] = {\n\t\"101\",\n\t\"000000\",\n\t\"000011\",\n\t\"10010001\",\n\t\"010001\",\n\t\"000001\",\n\t\"100101\",\n\t\"10011010\",\n\t\"0101\",\n\t\"0001\",\n\t\"110\",\n\t\"01001\",\n\t\"10011011\",\n\t\"010000\",\n\t\"0111\",\n\t\"10011000\",\n\t\"0110\",\n\t\"00100\",\n\t\"10011001\",\n\t\"10011110\",\n\t\"00101\",\n\t\"111\",\n\t\"10011111\",\n\t\"1000\",\n\t\"00110\",\n\t\"00111\",\n\t\"10011100\",\n\t\"10011101\",\n\t\"000010\",\n\t\"10010010\",\n\t\"10010011\",\n\t\"10010000\"\n};\n\nstring B2[32] = {\n\t\"00000\",\n\t\"00001\",\n\t\"00010\",\n\t\"00011\",\n\t\"00100\",\n\t\"00101\",\n\t\"00110\",\n\t\"00111\",\n\t\"01000\",\n\t\"01001\",\n\t\"01010\",\n\t\"01011\",\n\t\"01100\",\n\t\"01101\",\n\t\"01110\",\n\t\"01111\",\n\t\"10000\",\n\t\"10001\",\n\t\"10010\",\n\t\"10011\",\n\t\"10100\",\n\t\"10101\",\n\t\"10110\",\n\t\"10111\",\n\t\"11000\",\n\t\"11001\",\n\t\"11010\",\n\t\"11011\",\n\t\"11100\",\n\t\"11101\",\n\t\"11110\",\n\t\"11111\"\n};\n\nstring U;\nstring V;\n\nint main() {\n\twhile (cin >> U) {\n\t\tV = \"\";\n\t\tfor (int i = 0; i < U.size(); i++) {\n\t\t\tfor (int j = 0; j < 32; j++) {\n\t\t\t\tif (A1[j] == U[i]) {\n\t\t\t\t\tV += A2[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twhile (V.size() % 5 != 0) {\n\t\t\tV += '0';\n\t\t}\n\t\tU = \"\";\n\t\tfor (int i = 0; i < V.size(); i += 5) {\n\t\t\tfor (int j = 0; j < 32; j++) {\n\t\t\t\tif (B2[j] == V.substr(i, 5)) {\n\t\t\t\t\tU += A2[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcout << U << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<stdexcept>\n#include<cmath>\n#include<memory>\n#include<algorithm>\n#include<cstring>\n#include<ctime>\n#include<deque>\n#include<sstream>\n#include<iomanip>\n#include<sstream>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<string>\n#include<climits>\n#include<map>\n#include<set>\n#include<list>\n#include<cassert>\n#include<deque>\n#define REP(i,s,n) for(int i=s;i<n;i++)\n#define rep(i,n) REP(i,0,n)\n#define INF 1<<27\n#define all(n) n.begin(),n.end()\n#define insert(a,b,c,d) PP(P(a,b),P(c,d))\n#define F first\n#define S second\n#define pb push_back\n#define pf push_front\n#define LIM 100000\n#define dump(n) cout<<\"# \"<<#n<<\"=\"<<(n)<<endl\n#define debug(n) cout<<__FILE__<<\",\"<<__LINE__<<\": #\"<<#n<<\"=\"<<(n)<<endl\n#define iter(c) __typeof((c).begin())\n#define foreach(i,c) for(iter(c) i=(c).begin();i!=(c).end();i++)\n#define mp make_pair\nusing namespace std;\ntypedef pair<int,int> P;\ntypedef pair<P,P> PP;\ntypedef long long ll;\ntypedef unsigned long long ull;\nmap<char,string> cs;\nmap<string,char> sc;\n\nvoid init(){\n  cs[' '] = \"101\";\ncs['\\''] = \"000000\";\ncs[','] = \"000011\";\ncs['-'] = \"10010001\";\ncs['.'] = \"010001\";\ncs['?'] = \"000001\";\ncs['A'] = \"100101\";\ncs['B'] = \"10011010\";\ncs['C'] = \"0101\";\ncs['D'] = \"0001\";\ncs['E'] = \"110\";\ncs['F'] = \"01001\";\ncs['G'] = \"10011011\";\ncs['H'] = \"010000\";\ncs['I'] = \"0111\";\ncs['J'] = \"10011000\";\ncs['K'] = \"0110\";\ncs['L'] = \"00100\";\ncs['M'] = \"10011001\";\ncs['N'] = \"10011110\";\ncs['O'] = \"00101\";\ncs['P'] = \"111\";\ncs['Q'] = \"10011111\";\ncs['R'] = \"1000\";\ncs['S'] = \"00110\";\ncs['T'] = \"00111\";\ncs['U'] = \"10011100\";\ncs['V'] = \"10011101\";\ncs['W'] = \"000010\";\ncs['X'] = \"10010010\";\ncs['Y'] = \"10010011\";\ncs['Z'] = \"10010000\";\n\nsc[\"00000\"] = 'A';\nsc[\"00001\"] = 'B';\nsc[\"00010\"] = 'C';\nsc[\"00011\"] = 'D';\nsc[\"00100\"] = 'E';\nsc[\"00101\"] = 'F';\nsc[\"00110\"] = 'G';\nsc[\"00111\"] = 'H';\nsc[\"01000\"] = 'I';\nsc[\"01001\"] = 'J';\nsc[\"01010\"] = 'K';\nsc[\"01011\"] = 'L';\nsc[\"01100\"] = 'M';\nsc[\"01101\"] = 'N';\nsc[\"01110\"] = 'O';\nsc[\"01111\"] = 'P';\nsc[\"10000\"] = 'Q';\nsc[\"10001\"] = 'R';\nsc[\"10010\"] = 'S';\nsc[\"10011\"] = 'T';\nsc[\"10100\"] = 'U';\nsc[\"10101\"] = 'V';\nsc[\"10110\"] = 'W';\nsc[\"10111\"] = 'X';\nsc[\"11000\"] = 'Y';\nsc[\"11001\"] = 'Z';\nsc[\"11010\"] = ' ';\nsc[\"11011\"] = '.';\nsc[\"11100\"] = ',';\nsc[\"11101\"] = '-';\nsc[\"11110\"] = '\\'';\nsc[\"11111\"] = '?';\n\n\n} \n\n\nstring bina(string s){\n  string ret;\n  for(int i=0;i<s.length();i++){\n    ret += cs[s[i]];\n  }\n\n    while(ret.size()%5 != 0){\n      ret += \"0\";\n    }\n  \n  return ret;\n}\n\n\n\nint main(){\n  string s;\n  init();\n  getline(cin,s);\n  string nes;\n  nes = bina(s);\n  for(int i=0;i<nes.length();i+=5){\n    cout << sc[nes.substr(i,5)];\n  }\n  cout << endl;\n\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n\tchar ch;\n\tstring input_str = \"\";\n\twhile(cin.get(ch)){\n\t\tswitch(ch){\n\t\tcase ' ' :input_str += \"101\"\t    ;break;\n//\t\tcase '\\n':input_str += \"101\"\t\t;break;\n\t\tcase '\\'':input_str += \"000000\"\t\t;break;\n\t\tcase ',' :input_str += \"000011\"\t\t;break;\n\t\tcase '-' :input_str += \"10010001\"\t;break;\n\t\tcase '.' :input_str += \"010001\"\t\t;break;\n\t\tcase '?' :input_str += \"000001\"\t    ;break;\n\t\tcase 'A' :input_str += \"100101\"\t\t;break;\n\t\tcase 'B' :input_str += \"10011010\"\t;break;\n\t\tcase 'C' :input_str += \"0101\"\t\t;break;\n\t\tcase 'D' :input_str += \"0001\"\t\t;break;\n\t\tcase 'E' :input_str += \"110\"\t\t;break;\n\t\tcase 'F' :input_str += \"01001\"\t\t;break;\n\t\tcase 'G' :input_str += \"10011011\"\t;break;\n\t\tcase 'H' :input_str += \"010000\"\t\t;break;\n\t\tcase 'I' :input_str += \"0111\"\t\t;break;\n\t\tcase 'J' :input_str += \"10011000\"\t;break;\n\t\tcase 'K' :input_str += \"0110\"\t\t;break;\n\t\tcase 'L' :input_str += \"00100\"\t\t;break;\n\t\tcase 'M' :input_str += \"10011001\"\t;break;\n\t\tcase 'N' :input_str += \"10011110\"\t;break;\n\t\tcase 'O' :input_str += \"00101\"\t\t;break;\n\t\tcase 'P' :input_str += \"111\"\t\t;break;\n\t\tcase 'Q' :input_str += \"10011111\"\t;break;\n\t\tcase 'R' :input_str += \"1000\"\t\t;break;\n\t\tcase 'S' :input_str += \"00110\"\t\t;break;\n\t\tcase 'T' :input_str += \"00111\"\t\t;break;\n\t\tcase 'U' :input_str += \"10011100\"\t;break;\n\t\tcase 'V' :input_str += \"10011101\"\t;break;\n\t\tcase 'W' :input_str += \"000010\"\t\t;break;\n\t\tcase 'X' :input_str += \"10010010\"\t;break;\n\t\tcase 'Y' :input_str += \"10010011\"\t;break;\n\t\tcase 'Z' :input_str += \"10010000\"\t;break;\n\t\t}\n\t}\n\tint pad = 5 - input_str.size()%5;\n\tfor(int i=0; i<pad; i++)input_str += \"0\";\n\tfor(int i=0; i<input_str.size(); i+=5){\n\t\tstring output_str = input_str.substr(i, 5);\n\t\tif(output_str== \"00000\"){ cout << \"A\"; }\n\t\telse if( output_str==\"00001\") { cout << \"B\";}\t\n\t\telse if( output_str==\"00010\") { cout << \"C\";}\t\n\t\telse if( output_str==\"00011\") { cout << \"D\";}\t\n\t\telse if( output_str==\"00100\") { cout << \"E\";}\t\n\t\telse if( output_str==\"00101\") { cout << \"F\";}\t\n\t\telse if( output_str==\"00110\") { cout << \"G\";}\t\n\t\telse if( output_str==\"00111\") { cout << \"H\";}\t\n\t\telse if( output_str==\"01000\") { cout << \"I\";}\t\n\t\telse if( output_str==\"01001\") { cout << \"J\";}\t\n\t\telse if( output_str==\"01010\") { cout << \"K\";}\t\n\t\telse if( output_str==\"01011\") { cout << \"L\";}\t\n\t\telse if( output_str==\"01100\") { cout << \"M\";}\t\n\t\telse if( output_str==\"01101\") { cout << \"N\";}\t\n\t\telse if( output_str==\"01110\") { cout << \"O\";}\t\n\t\telse if( output_str==\"01111\") { cout << \"P\";}\t\n\t\telse if( output_str==\"10000\") { cout << \"Q\";}\t\n\t\telse if( output_str==\"10001\") { cout << \"R\";}\t\n\t\telse if( output_str==\"10010\") { cout << \"S\";}\t\n\t\telse if( output_str==\"10011\") { cout << \"T\";}\t\n\t\telse if( output_str==\"10100\") { cout << \"U\";}\t\n\t\telse if( output_str==\"10101\") { cout << \"V\";}\t\n\t\telse if( output_str==\"10110\") { cout << \"W\";}\t\n\t\telse if( output_str==\"10111\") { cout << \"X\";}\t\n\t\telse if( output_str==\"11000\") { cout << \"Y\";}\t\n\t\telse if( output_str==\"11001\") { cout << \"Z\";}\t\n\t\telse if( output_str==\"11010\") { cout << \" \";}\t\n\t\telse if( output_str==\"11011\") { cout << \".\";}\t\n\t\telse if( output_str==\"11100\") { cout << \",\";}\t\n\t\telse if( output_str==\"11101\") { cout << \"-\";}\t\n\t\telse if( output_str==\"11110\") { cout << \"'\";} \n\t\telse if( output_str==\"11111\") { cout << \"?\";}\n\t}\n\tcout << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <cctype>\n#include <sstream>\n#include <string>\n#include <list>\n#include <vector>\n#include <queue>\n#include <set>\n#include <stack>\n#include <map>\n#include <utility>\n#include <numeric>\n#include <algorithm>\n#include <iterator>\n#include <bitset>\n#include <complex>\n#include <fstream>\n#include <iomanip>\nusing namespace std;\ntypedef long long ll;\nconst double EPS = 1e-9;\ntypedef vector<int> vint;\ntypedef pair<int, int> pint;\n#define rep(i, n) REP(i, 0, n)\n#define ALL(v) v.begin(), v.end()\n#define MSG(a) cout << #a << \" \" << a << endl;\n#define REP(i, x, n) for(int i = x; i < n; i++)\ntemplate<class T> T RoundOff(T a){ return int(a+.5-(a<0)); }\ntemplate<class T, class C> void chmax(T& a, C b){ if(a < b) a = b; }\ntemplate<class T, class C> void chmin(T& a, C b){ if(b < a) a = b; }\ntemplate<class T, class C> pair<T, C> mp(T a, C b){ return make_pair(a, b); }\n\n\nstruct HuffmanCoding\n{\n\tHuffmanCoding()\n\t{\n\t\tinit();\n\t}\n\n\t// &#224;&#205;&#238;&#160;&#236;I&#199;&#187;&#233;g&#243;p&#239;p&#236;x&#199;&#195;&#239;&#8482;&#239;z&#199;&#169;&#199;&#193;&#224;&#8805;&#232;k&#199;&#8710;&#226;&#63743;&#236;&#196;\n\tmap<char, string> poplarTable;\n\n\tstring PoplarCompress(string original)\n\t{\n\t\tstring compressString;\n\n\t\tint len = original.size();\n\t\trep(i, len)\n\t\t\tcompressString += poplarTable[original[i]];\n\t\t\n\t\treturn compressString;\n\t}\n\n\t\n\tvoid init()\n\t{\n\t\tpair<char, string> pairs[32] = \n\t\t{\n\t\t\tmp(' ', \"101\"),\n\t\t\tmp('\\'',\"000000\"),\n\t\t\tmp(',', \"000011\"),\n\t\t\tmp('-', \"10010001\"),\n\t\t\tmp('.', \"010001\"),\n\t\t\tmp('?', \"000001\"),\n\t\t\tmp('A', \"100101\"),\n\t\t\tmp('B', \"10011010\"),\n\t\t\tmp('C', \"0101\"),\n\t\t\tmp('D', \"0001\"),\n\t\t\tmp('E', \"110\"),\n\t\t\tmp('F', \"01001\"),\n\t\t\tmp('G', \"10011011\"),\n\t\t\tmp('H', \"010000\"),\n\t\t\tmp('I', \"0111\"),\n\t\t\tmp('J', \"10011000\"),\n\t\t\tmp('K', \"0110\"),\n\t\t\tmp('L', \"00100\"),\n\t\t\tmp('M', \"10011001\"),\n\t\t\tmp('N', \"10011110\"),\n\t\t\tmp('O', \"00101\"),\n\t\t\tmp('P', \"111\"),\n\t\t\tmp('Q', \"10011111\"),\n\t\t\tmp('R', \"1000\"),\n\t\t\tmp('S', \"00110\"),\n\t\t\tmp('T', \"00111\"),\n\t\t\tmp('U', \"10011100\"),\n\t\t\tmp('V', \"10011101\"),\n\t\t\tmp('V', \"000010\"),\n\t\t\tmp('W', \"10010010\"),\n\t\t\tmp('Y', \"10010011\"),\n\t\t\tmp('Z', \"10010000\")\n\t\t};\n\n\n\t\trep(i, 32)\n\t\t\tpoplarTable.insert(map<char, string>::value_type(pairs[i].first, pairs[i].second));\n\t}\n};\n\nmap<string, char> table;\nvoid initializeTable()\n{\n\tpair<string, char> pairs[32] = \n\t{\n\t\tmp(\"00000\", 'A'),\n\t\tmp(\"00001\", 'B'),\n\t\tmp(\"00010\", 'C'),\n\t\tmp(\"00011\", 'D'),\n\t\tmp(\"00100\", 'E'),\n\t\tmp(\"00101\", 'F'),\n\t\tmp(\"00110\", 'G'),\n\t\tmp(\"00111\", 'H'),\n\t\tmp(\"01000\", 'I'),\n\t\tmp(\"01001\", 'J'),\n\t\tmp(\"01010\", 'K'),\n\t\tmp(\"01011\", 'L'),\n\t\tmp(\"01100\", 'M'),\n\t\tmp(\"01101\", 'N'),\n\t\tmp(\"01110\", 'O'),\n\t\tmp(\"01111\", 'P'),\n\t\tmp(\"10000\", 'Q'),\n\t\tmp(\"10001\", 'R'),\n\t\tmp(\"10010\", 'S'),\n\t\tmp(\"10011\", 'T'),\n\t\tmp(\"10100\", 'U'),\n\t\tmp(\"10101\", 'V'),\n\t\tmp(\"10110\", 'W'),\n\t\tmp(\"10111\", 'X'),\n\t\tmp(\"11000\", 'Y'),\n\t\tmp(\"11001\", 'Z'),\n\t\tmp(\"11010\", ' '),\n\t\tmp(\"11011\", '.'),\n\t\tmp(\"11100\", ','),\n\t\tmp(\"11101\", '-'),\n\t\tmp(\"11110\", '\\''),\n\t\tmp(\"11111\", '?')\n\t};\n\n\trep(i, 32)\n\t\ttable.insert(map<string, char>::value_type(pairs[i].first, pairs[i].second));\n}\n\nstring compress(string line)\n{\n\tstring ans;\n\n\tfor(int i = 0; i < line.size(); i += 5)\n\t\tans += table[line.substr(i, 5)];\n\t\n\treturn ans;\n}\n\nint main()\n{\n\tinitializeTable();\n\tstring line;\n\twhile(getline(cin, line))\n\t{\n\t\tif(cin.eof()) break;\n\t\t\n\t\tHuffmanCoding hc;\n\t\tline = hc.PoplarCompress(line);\n\n\t\twhile(line.size() % 5)\n\t\t\tline += '0';\n\n\t\tcout << compress(line) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n\n  char in;\n  string wd = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string bd[32] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\" };\n  string od = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n  string k = \"\";\n\n  string input;\n  getline( cin, input );\n\n  for( int l = 0; l < input.size(); l++ ) {\n    in = input[l];\n    for ( int i = 0; i < 32; i++ ) {\n      if ( in == wd[i] ) {\n\tk += bd[i];\n\t//\tcout << bd[i];\n\tif ( k.size() >= 5 ) {\n\t  int x = 0;\n\t  for ( int j = 0; j < 5; j++ ) {\n\t    x = x * 2 + k[j] - '0';\n\t  }\n\t  cout << od[x];\n\t  string n = \"\";\n\t  for ( int j = 5; j < k.size(); j++ ) {\n\t    n += k[j];\n\t  }\n\t  k = n;\n\t}\n      }\n    }\n\n  }\n  if ( k.size() > 0 ) {\n    k += \"00000\";\n    int x = 0;\n    for ( int j = 0; j < 5; j++ ) {\n      x = x * 2 + k[j] - '0';\n    }\n    cout << od[x];\n  }\n  cout << endl;\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nstring a[32] = {\"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\"};\nstring b[32] = {\" \", \"'\", \",\", \"-\", \".\", \"?\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\" \"Z\"};\nstring c[32] = {\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"};\nstring d[32] = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \" \", \".\", \",\", \"-\", \"'\", \"?\"};\n\nint main(){\n    string s;\n    map<string, string> p, q;\n    for(int i=0; i< 32; i++){p[b[i]] = a[i]; q[c[i]] = d[i];}\n    while(getline(cin, s)){\n        string t, ret;\n        for(int i=0; i< s.size(); i++) t += p[s.substr(i, 1)];\n        int diff = 5-t.size()%5;\n        for(int i=0; i < diff; i++) t+=\"0\";\n        for(int i=0; i < t.size(); i+=5) ret += q[t.substr(i, 5)];\n        cout << ret << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\nusing namespace std;\n\nint main(){\n    string g,t,tem,\n        s=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ ',-.?\",\n        str[34]={\n            \"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\n            \"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n            \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n            \"10010010\",\"10010011\",\"10010000\",\n            \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\"\n        };\n    getline(cin,g);\n    for(int i=0;i<g.length();i++)\n        switch(g[i]){\n            case ' ': t+=str[26];break;\n            case '\\'':t+=str[27];break;\n            case ',': t+=str[28];break;\n            case '-': t+=str[29];break;\n            case '.': t+=str[30];break;\n            case '?': t+=str[31];break;\n            default:  t+=str[g[i]-'A'];\n        }\n    while(t.length()%5)t+='0';\n    g=\"\";\n    for(int i=0;i<t.length();i++){\n        tem+=t[i];\n        if(tem.length()==5){\n            int n=0;\n            for(int j=0;j<5;j++)\n                n=n*2+tem[j]-'0';\n            switch (n){\n                case 26:g+=' ';break;\n                case 27:g+='.';break;\n                case 28:g+=',';break;\n                case 29:g+='-';break;\n                case 30:g+='\\'';break;\n                case 31:g+='?';break;\n                default:g+='A'+n;\n            }\n            tem=\"\";\n        }\n    }\n    cout<<g<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cmath>\n#include<cctype>\n#include<math.h>\n#include<string>\n#include<string.h>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<utility>\n#include<set>\n#include<map>\n#include<stdlib.h>\n#include<iomanip>\n\nusing namespace std;\n\n#define ll long long\n#define ld long double\n#define EPS 0.0000000001\n#define INF 1e9\n#define LINF (ll)INF*INF\n#define MOD 1000000007\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define loop(i,a,n) for(int i=a;i<(n);i++)\n#define all(in) in.begin(),in.end()\n#define shosu(x) fixed<<setprecision(x)\n\n#define int ll //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\ntypedef vector<pii> vp;\n\nint gcd(int a, int b){\n    if(b==0) return a;\n    return gcd(b,a%b);\n}\nint lcm(int a, int b){\n    return a/gcd(a,b)*b;\n}\n\n\nsigned main(void) {\n    string s;\n    map<char,string> ma1;\n    ma1[' '] = \"101\";\n    ma1['\\''] = \"000000\";\n    ma1[','] = \"000011\";\n    ma1['-'] = \"10010001\";\n    ma1['.'] = \"010001\";\n    ma1['?'] = \"000001\";\n    ma1['A'] = \"100101\";\n    ma1['B'] = \"10011010\";\n    ma1['C'] = \"0101\";\n    ma1['D'] = \"0001\";\n    ma1['E'] = \"110\";\n    ma1['F'] = \"01001\";\n    ma1['G'] = \"10011011\";\n    ma1['H'] = \"010000\";\n    ma1['I'] = \"0111\";\n    ma1['J'] = \"10011000\";\n    ma1['K'] = \"0110\";\n    ma1['L'] = \"00100\";\n\n    ma1['M'] = \"10011001\";\n    ma1['N'] = \"10011110\";\n    ma1['O'] = \"00101\";\n    ma1['P'] = \"111\";\n    ma1['Q'] = \"10011111\";\n    ma1['R'] = \"1000\";\n    ma1['S'] = \"00110\";\n    ma1['T'] = \"00111\";\n    ma1['U'] = \"10011100\";\n    ma1['V'] = \"10011101\";\n    ma1['W'] = \"000010\";\n    ma1['X'] = \"10010010\";\n    ma1['Y'] = \"10010011\";\n    ma1['Z'] = \"10010000\";\n    map<string,string>ma2;\n    ma2[\"00000\"] = \"A\";\n    ma2[\"00001\"] = \"B\";\n    ma2[\"00010\"] = \"C\";\n    ma2[\"00011\"] = \"D\";\n    ma2[\"00100\"] = \"E\";\n    ma2[\"00101\"] = \"F\";\n    ma2[\"00110\"] = \"G\";\n    ma2[\"00111\"] = \"H\";\n    ma2[\"01000\"] = \"I\";\n    ma2[\"01001\"] = \"J\";\n    ma2[\"01010\"] = \"K\";\n    ma2[\"01011\"] = \"L\";\n    ma2[\"01100\"] = \"M\";\n    ma2[\"01101\"] = \"N\";\n    ma2[\"01110\"] = \"O\";\n    ma2[\"01111\"] = \"P\";\n    ma2[\"10000\"] = \"Q\";\n    ma2[\"10001\"] = \"R\";\n    ma2[\"10010\"] = \"S\";\n    ma2[\"10011\"] = \"T\";\n    ma2[\"10100\"] = \"U\";\n    ma2[\"10101\"] = \"V\";\n    ma2[\"10110\"] = \"W\";\n    ma2[\"10111\"] = \"X\";\n    ma2[\"11000\"] = \"Y\";\n    ma2[\"11001\"] = \"Z\";\n    ma2[\"11010\"] = \" \";\n    ma2[\"11011\"] = \".\";\n    ma2[\"11100\"] = \",\";\n    ma2[\"11101\"] = \"-\";\n    ma2[\"11110\"] = \"'\";\n    ma2[\"11111\"] = \"?\";\n    while(getline(cin,s)){\n        int n = s.size();\n        string t = \"\";\n        rep(i,n)t += ma1[s[i]];\n        while(t.size() % 5)t += \"0\";\n        rep(i,t.size()/5){\n            cout << ma2[t.substr(i*5,5)];\n        }\n        cout << endl;\n    }\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <bitset>\n#include <map>\nusing namespace std;\n\nstring encode(char c){\n\tstring a[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\tstatic const string str=\" \\',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tfor(int i=0;i<str.length();i++){\n\t\tif(c==str[i])return a[i];\n\t}\n}\n\nchar decode(string s){\n\tstring str2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\tstd::bitset<5> b(s);\n\treturn str2[b.to_ulong()];\n}\n\nint main(void){\n\n\tstring s;\n\tstring code=\"\";\n\tstd::getline(cin,s);\n\tfor(int i=0;i<s.length();i++){\n\t\tcode+=encode(s[i]);\n\t}\n\n\twhile(std::getline(cin,s)){\n\t\tcode+=encode(' ');\n\t\tfor(int i=0;i<s.length();i++){\n\t\t\tcode+=encode(s[i]);\n\t\t}\n\t}\n\tcout<<code<<endl;\n\tstring retu=\"\";\n\tfor(int i=0;i<code.length();i+=5){\n\t\ttry{\n\t\t\tstring dd=code.substr(i,5);\n\t\t\tretu+=decode(dd);\n\t\t}catch(out_of_range e){\n\t\t\tcode+=\"00000\";\n\t\t\tstring dd=code.substr(i,5);\n\t\t\tretu=decode(dd);\n\t\t\tbreak;\n\t\t}\n\t}\n\tcout<<retu<<endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<string>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\n\nint main(){\n\tchar chs[]=\" .,-'?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tstring codes[32]={\n\t\t\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n\t\t,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n\t\t,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n\t\t,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\n\tstring s,t;\n\twhile(getline(cin,s)){\n\t\tt.clear();\n\t\tfor(int i=0;i<s.size();i++){\n\t\t\tt += codes[find(chs,chs+32,s[i])-chs];\n\t\t}\n\t\tif(t.size()%5)t.append(5-t.size()%5,'0');\n\t\tfor(int i=0;i<t.size();i+=5){\n\t\t\tint n=0;\n\t\t\tfor(int j=0;j<5;j++)n = n<<1|t[i+j]-'0';\n\t\t\tif(n<26)cout<<(char)('A'+n);\n\t\t\telse cout<<\" .,-'?\"[n-26];\n\t\t}\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid hantei(char *str);\n\nchar DataBase[][3][80] =\n\t{\n\t/* [文字] ,[符号＿変換前] ,[符号＿変換後] */\n\t{ \" \", \"101\", \"11010\" },{ \"\\'\", \"000000\", \"11110\" },{ \",\", \"000011\", \"11100\" },{ \"-\", \"10010001\", \"11101\" },\n\t{ \".\", \"010001\", \"11011\" },{ \"?\", \"000001\", \"11111\" },{ \"A\", \"100101\", \"00000\" },{ \"B\", \"10011010\", \"00001\" },\n    { \"C\", \"0101\", \"00010\" },{ \"D\", \"0001\", \"00011\" },{ \"E\", \"110\", \"00100\" },{ \"F\", \"01001\", \"00101\" },\n\t{ \"G\", \"10011011\", \"00110\" },{ \"H\", \"010000\", \"00111\" },{ \"I\", \"0111\", \"01000\" },{ \"J\", \"10011000\", \"01001\" },\n\t{ \"K\", \"0110\", \"01010\" },{ \"L\", \"00100\", \"01011\" },{ \"M\", \"10011001\", \"01100\" },{ \"N\", \"10011110\", \"01101\" },\n\t{ \"O\", \"00101\", \"01110\" },{ \"P\", \"111\", \"01111\" },{ \"Q\", \"10011111\", \"10000\" },{ \"R\", \"1000\", \"10001\" },\n\t{ \"S\", \"00110\", \"10010\" },{ \"T\", \"00111\", \"10011\" },{ \"U\", \"10011100\", \"10100\" },{ \"V\", \"10011101\", \"10101\" },\n\t{ \"W\", \"000010\", \"10110\" },{ \"X\", \"10010010\", \"10111\" },{ \"Y\", \"10010011\", \"11000\" },{ \"Z\", \"100100000\", \"11001\" },\n    {\"\", \"\", \"\" }\n};\n\n\nint main(void)\n{\n\tchar str1[1000],str2[1000],ch;\n\tint cut_i;\n\t\n\t/*scanf(\"%[A-Z \\'.?,-]\",str);\n\t\thantei(str1);*/\n\tcut_i=0;\n\twhile((ch = getchar())!=EOF){\n\t\tif(ch !='\\n'){\n\t\t\tstr2[cut_i] = ch;\n\t\t\tcut_i++;\n\t\t}\n\t\telse {\n\t\t\tif(cut_i==0){\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrncpy(str1,str2,cut_i);\n\t\t\t}\n\t\t\tstr1[cut_i]='\\0';\n\t\t\thantei(str1);\n\t\t\tprintf(\"\\n\");\n\t\t\tcut_i=0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\nvoid hantei(char *str)\n{\n\tint len1,cut_i,cut_j,count;\n\tchar ans[1000]={\"\"},str2[1000]={\"\"},str3[1000]={\"\"};\n\tchar zero[]={\"0000\"};\n\n\tlen1 = strlen(str);\n\tcount = 0;\n\n\tfor(cut_i=0;cut_i<len1;cut_i++){\n\t\tcut_j=0;\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(!strncmp((str+cut_i),DataBase[cut_j][0],1)){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(str2,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\telse if(count !=0){\n\t\t\t\t\tstrcpy(str2+count,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\t\n\tlen1 = strlen(str2);\n\tcount = 0;\n\n\tif( len1 % 5 != 0){\n\t\tcut_i = 5 - len1 % 5;\n\t\tstrncat(str2,zero,cut_i);\n\t\tlen1 = strlen(str2);\n\t}\n\n\n\tfor(cut_i=0;cut_i<len1;cut_i+=5){\n\t\tcut_j=0;\n\t\tstrncpy(str3,str2+cut_i,5);\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(strcmp(str3,DataBase[cut_j][2]) == 0){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(ans,DataBase[cut_j][0]);\n\t\t\t\t\tcount =strlen(ans);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstrcat(ans,DataBase[cut_j][0]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\tprintf(ans);\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <queue>\n\nusing namespace std;\n\nstatic const char * itoc\n  = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\ntemplate<typename T>\nstatic void\npush (\n  queue<T>    & lis,\n  const char  * s\n  )\n{\n  for ( ; *s != '\\0'; ++s )\n  {\n    lis.push ( *s );\n  }\n\n  return ;\n}\n\n/** Application main entry point. */\nint\nmain (\n  int     argc,\n  char  * argv[ ]\n  )\n{\n  queue<int>  lis;\n  int i;\n\n  for ( ; ; )\n  {\n    const int ch = getchar ( );\n\n    if ( ch == EOF )  break ;\n    if ( ch == '\\n' )\n    {\n      while ( !lis.empty ( ) )\n      {\n        int p = 0;\n\n        for ( i = 0; i < 5; ++i )\n        {\n          p <<= 1;\n          if ( !lis.empty ( ) )\n          {\n            p |= !!( lis.front ( ) == '1' );\n            lis.pop ( );\n          }\n        }\n\n        putchar ( itoc[ p ] );\n      }\n      puts ( \"\" );\n      continue ;\n    }\n\n    switch ( ch )\n    {\n      case ' ':   push ( lis, \"101\" );      break ;\n      case '\\'':  push ( lis, \"000000\" );   break ;\n      case ',':   push ( lis, \"000011\" );   break ;\n      case '-':   push ( lis, \"10010001\" ); break ;\n      case '.':   push ( lis, \"010001\" );   break ;\n      case '?':   push ( lis, \"000001\" );   break ;\n      case 'A':   push ( lis, \"100101\" );   break ;\n      case 'B':   push ( lis, \"10011010\" ); break ;\n      case 'C':   push ( lis, \"0101\" );     break ;\n      case 'D':   push ( lis, \"0001\" );     break ;\n      case 'E':   push ( lis, \"110\" );      break ;\n      case 'F':   push ( lis, \"01001\" );    break ;\n      case 'G':   push ( lis, \"10011011\" ); break ;\n      case 'H':   push ( lis, \"010000\" );   break ;\n      case 'I':   push ( lis, \"0111\" );     break ;\n      case 'J':   push ( lis, \"10011000\" ); break ;\n      case 'K':   push ( lis, \"0110\" );     break ;\n      case 'L':   push ( lis, \"00100\" );    break ;\n      case 'M':   push ( lis, \"10011001\" ); break ;\n      case 'N':   push ( lis, \"10011110\" ); break ;\n      case 'O':   push ( lis, \"00101\" );    break ;\n      case 'P':   push ( lis, \"111\" );      break ;\n      case 'Q':   push ( lis, \"10011111\" ); break ;\n      case 'R':   push ( lis, \"1000\" );     break ;\n      case 'S':   push ( lis, \"00110\" );    break ;\n      case 'T':   push ( lis, \"00111\" );    break ;\n      case 'U':   push ( lis, \"10011100\" ); break ;\n      case 'V':   push ( lis, \"10011101\" ); break ;\n      case 'W':   push ( lis, \"000010\" );   break ;\n      case 'X':   push ( lis, \"10010010\" ); break ;\n      case 'Y':   push ( lis, \"10010011\" ); break ;\n      case 'Z':   push ( lis, \"10010000\" ); break ;\n    }\n  }\n\n  return ( 0 );\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <string>\nusing namespace std;\nstring chtostr(char ch)\n{\n\tif(ch==' ') return \"101\";\n\tif(ch=='\\'') return \"000000\";\n\tif(ch==',')\treturn \"000011\";\n\tif(ch=='-') return \"10010001\";\n\tif(ch=='.')\treturn \"010001\";\n\tif(ch=='?')\treturn \"000001\";\n\tif(ch=='A')\treturn \"100101\";\n\tif(ch=='B')\treturn \"10011010\";\n\tif(ch=='C')\treturn \"0101\";\n\tif(ch=='D')\treturn \"0001\";\n\tif(ch=='E')\treturn \"110\";\n\tif(ch=='F')\treturn \"01001\";\n\tif(ch=='G')\treturn \"10011011\";\n\tif(ch=='H') return \"010000\";\n\tif(ch=='I') return \"0111\";\n\tif(ch=='J')\treturn \"10011000\";\n\tif(ch=='K')\treturn \"0110\";\n\tif(ch=='L')\treturn \"00100\";\n\tif(ch=='M')\treturn \"10011001\";\n\tif(ch=='N')\treturn \"10011110\";\n\tif(ch=='O')\treturn \"00101\";\n\tif(ch=='P')\treturn \"111\";\n\tif(ch=='Q')\treturn \"10011111\";\n\tif(ch=='R')\treturn \"1000\";\n\tif(ch=='S')\treturn \"00110\";\n\tif(ch=='T') return \"00111\";\n\tif(ch=='U')\treturn \"10011100\";\n\tif(ch=='V')\treturn \"10011101\";\n\tif(ch=='W')\treturn \"000010\";\n\tif(ch=='X')\treturn \"10010010\";\n\tif(ch=='Y')\treturn \"10010011\";\n\treturn \"10010000\";\n}\nchar strtoch(string str)\n{\n\treverse(str.begin(),str.end());\n\tint tmp=0;\n\tfor(int i=0;i<str.size();i++) {char ch; ch=str[i]; tmp+=pow(2,i)*(ch-'0');}\n\tif(tmp<=25) return ('A'+tmp);\n\tif(tmp==26) return ' ';\n\tif(tmp==27) return '.';\n\tif(tmp==28) return ',';\n\tif(tmp==29) return '-';\n\tif(tmp==30) return '\\'';\n\treturn '?';\n}\nint main()\n{\n\tstring str;\n\twhile(getline(cin,str))\n\t{\n\t\tstring tmp=\"\";\n\t\tfor(int i=0;i<str.size();i++) {char ch; ch=str[i]; tmp+=chtostr(ch);}\n\t\tstring ans=\"\";\n\t\tfor(int i=0;i<tmp.size();i+=5) ans+=strtoch(tmp.substr(i,5));\n\t\tcout << ans << '\\n';\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n\tchar ch;\n\tstring input_str = \"\";\n\twhile(cin.get(ch)){\n\t\tswitch(ch){\n\t\tcase ' ' :input_str += \"101\"\t    ;break;\n//\t\tcase '\\n':input_str += \"101\"\t\t;break;\n\t\tcase '\\'':input_str += \"000000\"\t\t;break;\n\t\tcase ',' :input_str += \"000011\"\t\t;break;\n\t\tcase '-' :input_str += \"10010001\"\t;break;\n\t\tcase '.' :input_str += \"010001\"\t\t;break;\n\t\tcase '?' :input_str += \"000001\"\t    ;break;\n\t\tcase 'A' :input_str += \"100101\"\t\t;break;\n\t\tcase 'B' :input_str += \"10011010\"\t;break;\n\t\tcase 'C' :input_str += \"0101\"\t\t;break;\n\t\tcase 'D' :input_str += \"0001\"\t\t;break;\n\t\tcase 'E' :input_str += \"110\"\t\t;break;\n\t\tcase 'F' :input_str += \"01001\"\t\t;break;\n\t\tcase 'G' :input_str += \"10011011\"\t;break;\n\t\tcase 'H' :input_str += \"010000\"\t\t;break;\n\t\tcase 'I' :input_str += \"0111\"\t\t;break;\n\t\tcase 'J' :input_str += \"10011000\"\t;break;\n\t\tcase 'K' :input_str += \"0110\"\t\t;break;\n\t\tcase 'L' :input_str += \"00100\"\t\t;break;\n\t\tcase 'M' :input_str += \"10011001\"\t;break;\n\t\tcase 'N' :input_str += \"10011110\"\t;break;\n\t\tcase 'O' :input_str += \"00101\"\t\t;break;\n\t\tcase 'P' :input_str += \"111\"\t\t;break;\n\t\tcase 'Q' :input_str += \"10011111\"\t;break;\n\t\tcase 'R' :input_str += \"1000\"\t\t;break;\n\t\tcase 'S' :input_str += \"00110\"\t\t;break;\n\t\tcase 'T' :input_str += \"00111\"\t\t;break;\n\t\tcase 'U' :input_str += \"10011100\"\t;break;\n\t\tcase 'V' :input_str += \"10011101\"\t;break;\n\t\tcase 'W' :input_str += \"000010\"\t\t;break;\n\t\tcase 'X' :input_str += \"10010010\"\t;break;\n\t\tcase 'Y' :input_str += \"10010011\"\t;break;\n\t\tcase 'Z' :input_str += \"10010000\"\t;break;\n\t\t}\n\t}\n\tint pad = 5 - input_str.size()%5;\n\tfor(int i=0; i<pad; i++)input_str += \"0\";\n\tfor(int i=0; i<input_str.size()/5; i++){\n\t\tstring output_str = input_str.substr(i*5, 5);\n\t\tif(output_str== \"00000\"){ cout << \"A\"; }\n\t\telse if( output_str==\"00001\") { cout << \"B\";}\t\n\t\telse if( output_str==\"00010\") { cout << \"C\";}\t\n\t\telse if( output_str==\"00011\") { cout << \"D\";}\t\n\t\telse if( output_str==\"00100\") { cout << \"E\";}\t\n\t\telse if( output_str==\"00101\") { cout << \"F\";}\t\n\t\telse if( output_str==\"00110\") { cout << \"G\";}\t\n\t\telse if( output_str==\"00111\") { cout << \"H\";}\t\n\t\telse if( output_str==\"01000\") { cout << \"I\";}\t\n\t\telse if( output_str==\"01001\") { cout << \"J\";}\t\n\t\telse if( output_str==\"01010\") { cout << \"K\";}\t\n\t\telse if( output_str==\"01011\") { cout << \"L\";}\t\n\t\telse if( output_str==\"01100\") { cout << \"M\";}\t\n\t\telse if( output_str==\"01101\") { cout << \"N\";}\t\n\t\telse if( output_str==\"01110\") { cout << \"O\";}\t\n\t\telse if( output_str==\"01111\") { cout << \"P\";}\t\n\t\telse if( output_str==\"10000\") { cout << \"Q\";}\t\n\t\telse if( output_str==\"10001\") { cout << \"R\";}\t\n\t\telse if( output_str==\"10010\") { cout << \"S\";}\t\n\t\telse if( output_str==\"10011\") { cout << \"T\";}\t\n\t\telse if( output_str==\"10100\") { cout << \"U\";}\t\n\t\telse if( output_str==\"10101\") { cout << \"V\";}\t\n\t\telse if( output_str==\"10110\") { cout << \"W\";}\t\n\t\telse if( output_str==\"10111\") { cout << \"X\";}\t\n\t\telse if( output_str==\"11000\") { cout << \"Y\";}\t\n\t\telse if( output_str==\"11001\") { cout << \"Z\";}\t\n\t\telse if( output_str==\"11010\") { cout << \" \";}\t\n\t\telse if( output_str==\"11011\") { cout << \".\";}\t\n\t\telse if( output_str==\"11100\") { cout << \",\";}\t\n\t\telse if( output_str==\"11101\") { cout << \"-\";}\t\n\t\telse if( output_str==\"11110\") { cout << \"'\";} \n\t\telse if( output_str==\"11111\") { cout << \"?\";}\n\t}\n\tcout << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#define CASE(c,s) case c:return s\nusing namespace std;\n\nstring f(char c){\n\tswitch (c){\n\t\tCASE(' ', \"101\");\n\t\tCASE('\\'', \"000000\");\n\t\tCASE(',', \"000011\");\n\t\tCASE('-', \"10010001\");\n\t\tCASE('.', \"010001\");\n\t\tCASE('?', \"000001\");\n\t\tCASE('A', \"100101\");\n\t\tCASE('B', \"10011010\");\n\t\tCASE('C', \"0101\");\n\t\tCASE('D', \"0001\");\n\t\tCASE('E', \"110\");\n\t\tCASE('F', \"01001\");\n\t\tCASE('G', \"10011011\");\n\t\tCASE('H', \"010000\");\n\t\tCASE('I', \"0111\");\n\t\tCASE('J', \"10011000\");\n\t\tCASE('K', \"0110\");\n\t\tCASE('L', \"00100\");\n\t\tCASE('M', \"100110011\");\n\t\tCASE('N', \"10011110\");\n\t\tCASE('O', \"00101\");\n\t\tCASE('P', \"111\");\n\t\tCASE('Q', \"10011111\");\n\t\tCASE('R', \"1000\");\n\t\tCASE('S', \"00110\");\n\t\tCASE('T', \"00111\");\n\t\tCASE('U', \"10011100\");\n\t\tCASE('V', \"10011101\");\n\t\tCASE('W', \"000010\");\n\t\tCASE('X', \"10010010\");\n\t\tCASE('Y', \"10010011\");\n\t\tCASE('Z', \"10010000\");\n\tdefault:return \"\";\n\t}\n}\n\nint bitodec(string s){\n\tint sum=0;\n\tfor (unsigned int i = 0; i < s.length(); ++i){\n\t\tsum *= 2;\n\t\tsum += (s[i] - '0');\t\t\n\t}\n\treturn sum;\n}\n\nchar g(string s){\n\tchar c[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\treturn c[bitodec(s)];\n}\n\nint main(){\n\tstring s,r;\n\tint i;\n\n\twhile (getline(cin, s)){\n\t\ti = 0;\n\t\tr = \"\";\n\n\t\twhile (s[i] != '\\0'){\n\t\t\tr += f(s[i]);\n\t\t\t++i;\n\t\t}\n\n\t\tif (i % 5)for (int j = 4 - (i % 5); --j;)r += \"0\";\n\n\t\tfor (unsigned int j = 0; j < r.length() ;j+=5)\n\t\t\tcout << g(r.substr(j,5));\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <sstream>\n#include <algorithm>\n#include <math.h>\n#include <map>\n#include <functional>\n#include <iomanip>\n#include <vector>\n#include <queue>\n#include <set>\n#include <typeinfo>\n#define PI 3.14159265359\n#define INF 99999999;\n#define rep(i, n) for(int i=0; i<n; i++)\n#define REP(n) rep(i, n)\n#define EPS 1e-10\ntypedef long long ll;\nusing namespace std;\ntypedef pair<int, int> P;\n\ndouble distanceAB(double xa, double ya, double xb, double yb);\n\n/*\nclass Target\n{\npublic:\n\tvector <string> draw(int n)\n\t{\n\n\t}\n};\n*/\n\n\n\nint main()\n{\n\tstring str;\n\tmap<char, string> tbl;\n\t\n\ttbl[' '] = \"101\";\n\ttbl['\\''] = \"000000\";\n\ttbl[','] = \"000011\";\n\ttbl['-'] = \"10010001\";\n\ttbl['.'] = \"010001\";\n\ttbl['?'] = \"000001\";\n\ttbl['A'] = \"100101\";\n\ttbl['B'] = \"10011010\";\n\ttbl['C'] = \"0101\";\n\ttbl['D'] = \"0001\";\n\ttbl['E'] = \"110\";\n\ttbl['F'] = \"01001\";\n\ttbl['G'] = \"10011011\";\n\ttbl['H'] = \"010000\";\n\ttbl['I'] = \"0111\";\n\ttbl['J'] = \"10011000\";\n\ttbl['K'] = \"0110\";\n\ttbl['L'] = \"00100\";\n\ttbl['M'] = \"10011001\";\n\ttbl['N'] = \"10011110\";\n\ttbl['O'] = \"00101\";\n\ttbl['P'] = \"111\";\n\ttbl['Q'] = \"10011111\";\n\ttbl['R'] = \"1000\";\n\ttbl['S'] = \"00110\";\n\ttbl['T'] = \"00111\";\n\ttbl['U'] = \"10011100\";\n\ttbl['V'] = \"10011101\";\n\ttbl['W'] = \"000010\";\n\ttbl['X'] = \"10010010\";\n\ttbl['Y'] = \"10010011\";\n\ttbl['Z'] = \"10010000\";\n\t\n\tmap<string, char> tbl2;\n\t\n\ttbl2[\"00000\"] = 'A';\n\ttbl2[\"00001\"] = 'B';\n\ttbl2[\"00010\"] = 'C';\n\ttbl2[\"00011\"] = 'D';\n\ttbl2[\"00100\"] = 'E';\n\ttbl2[\"00101\"] = 'F';\n\ttbl2[\"00110\"] = 'G';\n\ttbl2[\"00111\"] = 'H';\n\ttbl2[\"01000\"] = 'I';\n\ttbl2[\"01001\"] = 'J';\n\ttbl2[\"01010\"] = 'K';\n\ttbl2[\"01011\"] = 'L';\n\ttbl2[\"01100\"] = 'M';\n\ttbl2[\"01101\"] = 'N';\n\ttbl2[\"01110\"] = 'O';\n\ttbl2[\"01111\"] = 'P';\n\ttbl2[\"10000\"] = 'Q';\n\ttbl2[\"10001\"] = 'R';\n\ttbl2[\"10010\"] = 'S';\n\ttbl2[\"10011\"] = 'T';\n\ttbl2[\"10100\"] = 'U';\n\ttbl2[\"10101\"] = 'V';\n\ttbl2[\"10110\"] = 'W';\n\ttbl2[\"10111\"] = 'X';\n\ttbl2[\"11000\"] = 'Y';\n\ttbl2[\"11001\"] = 'Z';\n\ttbl2[\"11010\"] = ' ';\n\ttbl2[\"11011\"] = '.';\n\ttbl2[\"11100\"] = ',';\n\ttbl2[\"11101\"] = '-';\n\ttbl2[\"11110\"] = '\\'';\n\ttbl2[\"11111\"] = '?';\n\t\n\twhile (getline(cin, str))\n\t{\n\t\tstring code = \"\";\n\t\tstring res = \"\";\n\t\t\n\t\tREP(str.length()) code += tbl[str[i]];\n\t\tint len = code.length();\n\t\tREP(5 - len % 5) code += \"0\";\n\t\t\n\t\twhile (code.length() > 0)\n\t\t{\n\t\t\tstring temp = code.substr(0, 5);\n\t\t\tres += tbl2[temp];\n\t\t\tcode = code.substr(5);\n\t\t}\n\t\t\n\t\tcout << res << endl;\n\t}\n\t\n\treturn 0;\n}\n\n\n\ndouble distanceAB(double xa, double ya, double xb, double yb)\n{\n\treturn sqrt((xb-xa)*(xb-xa) + (yb-ya)*(yb-ya));\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <cstring>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <fstream>\n#include <complex>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nstatic const double EPS = 1e-5;\n\n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) FOR(i,0,n)\nstring tonum(string &str, int i,map<char,string> &data){\n  if(i==str.size()) return \"\";\n  return data[str[i]] + tonum(str,i+1,data);\n}\nint main(void){\n  map<char,string> data;\n  data[' '] = \"101\";\n  data['\\''] = \"000000\";\n  data[','] = \"000011\";\n  data['-'] = \"1001001\";\n  data['.'] = \"010001\";\n  data['?'] = \"000001\";\n  data['A'] = \"100101\";\n  data['B'] = \"10011010\";\n  data['C'] = \"0101\";\n  data['D'] = \"0001\";\n  data['E'] = \"110\";\n  data['F'] = \"01001\";\n  data['G'] = \"10011011\";\n  data['H'] = \"010000\";\n  data['I'] = \"0111\";\n  data['J'] = \"10011000\";\n  data['K'] = \"0100\";\n  data['L'] = \"00100\";\n  data['M'] = \"10011001\";\n  data['N'] = \"10011110\";\n  data['O'] = \"00101\";\n  data['P'] = \"111\";\n  data['Q'] = \"10011111\";\n  data['R'] = \"1000\";\n  data['S'] = \"00110\";\n  data['T'] = \"00111\";\n  data['U'] = \"10011100\";\n  data['V'] = \"10011101\";\n  data['W'] = \"000010\";\n  data['X'] = \"10010010\";\n  data['Y'] = \"10010011\";\n  data['Z'] = \"10010000\";\n  string input;\n  while(getline(cin,input)){\n    string code = tonum(input,0,data);\n    for(int i=0; i<code.size(); i+=5){\n      string five = code.substr(i,5);\n      if(five.size()<5){\n        while(five.size()!=5) five.push_back('0');\n      }\n      int num5 = 0;\n      REP(i,5) num5+=(five[i]-'0')*pow(2,4-i);\n      if(num5<26){\n        cout<<(char)('A'+num5);\n      }else{\n        if(num5==26) cout<<' ';\n        if(num5==27) cout<<'.';\n        if(num5==28) cout<<',';\n        if(num5==29) cout<<'-';\n        if(num5==30) cout<<'\\'';\n        if(num5==31) cout<<'?';\n      }\n    }\n    cout<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <cstring>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <fstream>\n#include <complex>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nstatic const double EPS = 1e-5;\n\n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) FOR(i,0,n)\nstring tonum(string &str, int i,map<char,string> &data){\n  if(i==str.size()) return \"\";\n  return data[str[i]] + tonum(str,i+1,data);\n}\nint main(void){\n  map<char,string> data;\n  data[' '] = \"101\";\n  data['\\''] = \"000000\";\n  data[','] = \"000011\";\n  data['-'] = \"10010001\";\n  data['.'] = \"010001\";\n  data['?'] = \"000001\";\n  data['A'] = \"100101\";\n  data['B'] = \"10011010\";\n  data['C'] = \"0101\";\n  data['D'] = \"0001\";\n  data['E'] = \"110\";\n  data['F'] = \"01001\";\n  data['G'] = \"10011011\";\n  data['H'] = \"010000\";\n  data['I'] = \"0111\";\n  data['J'] = \"10011000\";\n  data['K'] = \"0100\";\n  data['L'] = \"00100\";\n  data['M'] = \"10011001\";\n  data['N'] = \"10011110\";\n  data['O'] = \"00101\";\n  data['P'] = \"111\";\n  data['Q'] = \"10011111\";\n  data['R'] = \"1000\";\n  data['S'] = \"00110\";\n  data['T'] = \"00111\";\n  data['U'] = \"10011100\";\n  data['V'] = \"10011101\";\n  data['W'] = \"000010\";\n  data['X'] = \"10010010\";\n  data['Y'] = \"10010011\";\n  data['Z'] = \"10010000\";\n  string input;\n  while(getline(cin,input)){\n    string code = tonum(input,0,data);\n    for(int i=0; i<code.size(); i+=5){\n      string five = code.substr(i,5);\n      if(five.size()<5){\n        while(five.size()!=5) five.push_back('0');\n      }\n      int num5 = 0;\n      REP(i,5) num5+=(five[i]-'0')*pow(2,4-i);\n      if(num5<26){\n        cout<<(char)('A'+num5);\n      }else{\n        if(num5==26) cout<<' ';\n        if(num5==27) cout<<'.';\n        if(num5==28) cout<<',';\n        if(num5==29) cout<<'-';\n        if(num5==30) cout<<'\\'';\n        if(num5==31) cout<<'?';\n      }\n    }\n    cout<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\n\nstd::string encode(char c){\n    if(c == ' ') return \"101\";\n    if(c == '\\'') return \"000000\";\n    if(c == ',') return \"000011\";\n    if(c == '-') return \"10010001\";\n    if(c == '.') return \"010001\";\n    if(c == '?') return \"000001\";\n    if(c == 'A') return \"100101\";\n    if(c == 'B') return \"10011010\";\n    if(c == 'C') return \"0101\";\n    if(c == 'D') return \"0001\";\n    if(c == 'E') return \"110\";\n    if(c == 'F') return \"01001\";\n    if(c == 'G') return \"10011011\";\n    if(c == 'H') return \"010000\";\n    if(c == 'I') return \"0111\";\n    if(c == 'J') return \"10011000\";\n    if(c == 'K') return \"0110\";\n    if(c == 'L') return \"00100\";\n    if(c == 'M') return \"10011001\";\n    if(c == 'N') return \"10011110\";\n    if(c == 'O') return \"00101\";\n    if(c == 'P') return \"111\";\n    if(c == 'Q') return \"10011111\";\n    if(c == 'R') return \"1000\";\n    if(c == 'S') return \"00110\";\n    if(c == 'T') return \"00111\";\n    if(c == 'U') return \"10011100\";\n    if(c == 'V') return \"10011101\";\n    if(c == 'W') return \"000010\";\n    if(c == 'X') return \"10010010\";\n    if(c == 'Y') return \"10010011\";\n    if(c == 'Z') return \"10010000\";\n    return \"\";\n}\n\nstd::string encode2(std::string s){\n    if(s == \"00000\") return \"A\";\n    if(s == \"00001\") return \"B\";\n    if(s == \"00010\") return \"C\";\n    if(s == \"00011\") return \"D\";\n    if(s == \"00100\") return \"E\";\n    if(s == \"00101\") return \"F\";\n    if(s == \"00110\") return \"G\";\n    if(s == \"00111\") return \"H\";\n    if(s == \"01000\") return \"I\";\n    if(s == \"01001\") return \"J\";\n    if(s == \"01010\") return \"K\";\n    if(s == \"01011\") return \"L\";\n    if(s == \"01100\") return \"M\";\n    if(s == \"01101\") return \"N\";\n    if(s == \"01110\") return \"O\";\n    if(s == \"01111\") return \"P\";\n    if(s == \"10000\") return \"Q\";\n    if(s == \"10001\") return \"R\";\n    if(s == \"10010\") return \"S\";\n    if(s == \"10011\") return \"T\";\n    if(s == \"10100\") return \"U\";\n    if(s == \"10101\") return \"V\";\n    if(s == \"10110\") return \"W\";\n    if(s == \"10111\") return \"X\";\n    if(s == \"11000\") return \"Y\";\n    if(s == \"11001\") return \"Z\";\n    if(s == \"11010\") return \" \";\n    if(s == \"11011\") return \".\";\n    if(s == \"11100\") return \",\";\n    if(s == \"11101\") return \"-\";\n    if(s == \"11110\") return \"'\";\n    if(s == \"11111\") return \"?\";\n    return \"\";\n}\n\nint main(){\n    std::string str, tmp, ans;\n    while(getline(std::cin, str)){\n        tmp = \"\", ans = \"\";\n        for(int i = 0; i < str.size(); i++){\n            tmp += encode(str[i]);\n        }\n\n        int n = 5 - (tmp.size() % 5);\n        for(int i = 0; i < n; i++) tmp += \"0\";\n\n        for(int i = 0; i < tmp.size(); i += 5){\n            ans += encode2(tmp.substr(i, 5));\n        }\n\n        std::cout << ans << std::endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#define P pair<int,int>\nusing namespace std;\nP tbl[] = {\n  P(3,0x5),P(6,0),P(6,0x3),P(8,0x91),P(6,0x11),P(6,0x1),P(6,0x25),P(8,0x9a),\n  P(4,0x5),P(4,0x1),P(3,0x6),P(5,0x9),P(8,0x9b),P(6,0x10),P(4,0x7),P(8,0x98),\n  P(4,0x6),P(5,0x4),P(8,0x99),P(8,0x9e),P(5,0x5),P(3,0x7),P(8,0x9f),P(4,0x8),\n  P(5,0x6),P(5,0x7),P(8,0x9c),P(8,0x9d),P(6,0x2),P(8,0x92),P(8,0x93),P(8,0x90),\n};\nchar tbl2[] = { ' ', '.', ',', '-', '\\'', '?' }; \nint main()\n{\n  char c,a;\n  int b = 0,d = 0;\n  P p;\n  while(scanf(\"%c\",&c) != EOF){\n    if(c == '\\n'){\n      a = (d << (5 - b)) & 0x1f;\n      if(a <= 26) printf(\"%c\", a+'A');\n      else printf(\"%c\", tbl2[a-26]);\n      cout << endl;\n    }else{\n      switch(c){\n      case ' ': p = tbl[0]; break;\n      case '\\'': p = tbl[1]; break;\n      case ',': p = tbl[2]; break;\n      case '-': p = tbl[3]; break;\n      case '.': p = tbl[4]; break;\n      case '?': p = tbl[5]; break;\n      default: p = tbl[c-'A'+6]; break;\n      }\n      b += p.first;\n      d = (d << p.first) | p.second;\n      if(b >= 5){\n\ta = (d >> (b-5)) & 0x1f;\n\tif(a <= 26) printf(\"%c\", a+'A');\n\telse printf(\"%c\", tbl2[a-26]);\n\tb -= 5;\n      }\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\n#include<cmath>\nusing namespace std;\nint change(string x);\nint main(void){\n    string str,str2;\n    map<char,string> enc;\n    enc[' '] = \"101\";\n    enc['\\''] = \"000000\";\n    enc[','] = \"000011\";\n    enc['-'] = \"10010001\";\n    enc['.'] = \"010001\";\n    enc['?'] = \"000001\";\n    enc['A'] = \"100101\";\n    enc['B'] = \"10011010\";\n    enc['C'] = \"0101\";\n    enc['D'] = \"0001\";\n    enc['E'] = \"110\";\n    enc['F'] = \"01001\";\n    enc['G'] = \"10011011\";\n    enc['H'] = \"010000\";\n    enc['I'] = \"0111\";\n    enc['J'] = \"10011000\";\n    enc['K'] = \"0110\";\n    enc['L'] = \"00100\";\n    enc['M'] = \"10011001\";\n    enc['N'] = \"10011110\";\n    enc['O'] = \"00101\";\n    enc['P'] = \"111\";\n    enc['Q'] = \"10011111\";\n    enc['R'] = \"1000\";\n    enc['S'] = \"00110\";\n    enc['T'] = \"00111\";\n    enc['U'] = \"10011100\";\n    enc['V'] = \"10011101\";\n    enc['W'] = \"000010\";\n    enc['X'] = \"10010010\";\n    enc['Y'] = \"10010011\";\n    enc['Z'] = \"10010000\";\n    string dec = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ \\',-.?\";\n    string ans=\"\",sub=\"\";\n    while(getline(cin,str)){\n        for(int i=0;i<str.length();i++){\n            str2+=enc[str[i]];\n        }\n        for(int i=0;i<str2.length()%5;i++){\n            str2+='0';\n        }\n        for(int i=0;i<str2.length()/5;i++){\n            ans+=str2[5*i];\n            ans+=str2[5*i+1];\n            ans+=str2[5*i+2];\n            ans+=str2[5*i+3];\n            ans+=str2[5*i+4];\n            sub+=dec[change(ans)];\n            ans=\"\";\n        }\n        cout<<sub<<endl;\n        sub=str2=str=ans=\"\";\n    }\n    return 0;\n}\nint change(string x){\n    int re=0;\n    for(int i=x.length()-1,j=0;i>=0;i--,j++){\n        if(x[i]=='1')re+=pow(2,j);\n    }\n    return re;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector< string > table1(128, string(\"\"));\nchar table2[36] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nvoid set(){\n    table1[65] = string(\"100101\");\n    table1[66] = string(\"10011010\");\n    table1[67] = string(\"0101\");\n    table1[68] = string(\"0001\");\n    table1[69] = string(\"110\");\n    table1[70] = string(\"01001\");\n    table1[71] = string(\"10011011\");\n    table1[72] = string(\"010000\");\n    table1[73] = string(\"0111\");\n    table1[74] = string(\"10011000\");\n    table1[75] = string(\"0110\");\n    table1[76] = string(\"00100\");\n    table1[77] = string(\"10011001\");\n    table1[78] = string(\"10011110\");\n    table1[79] = string(\"00101\");\n    table1[80] = string(\"111\");\n    table1[81] = string(\"10011111\");\n    table1[82] = string(\"1000\");\n    table1[83] = string(\"00110\");\n    table1[84] = string(\"00111\");\n    table1[85] = string(\"10011100\");\n    table1[86] = string(\"000010\");\n    table1[87] = string(\"000011\");\n    table1[88] = string(\"10010010\");\n    table1[89] = string(\"10010011\");\n    table1[90] = string(\"10010000\");\n    table1[32] = string(\"101\");\n    table1[39] = string(\"000000\");\n    table1[44] = string(\"000011\");\n    table1[45] = string(\"10010001\");\n    table1[46] = string(\"010001\");\n    table1[63] = string(\"000001\");\n}\n\nint bToDeci(string& s){\n    int ans = 0;\n    string::iterator it = s.begin();\n    for(int n = 0; n < 5; n++){\n        if( it == s.end() ) continue;\n        ans *= 2;\n        ans += *it - '0';\n        it++;\n    }\n    return ans;\n\n}\n\nchar getBlock(string& s, string::iterator& i){\n    string c = \"\";\n    for(int n = 0; n < 5 && i != s.end(); n++, i++){\n        c.append( i, i+1 );\n    }\n    return table2[ bToDeci( c ) ];\n}\n\nint main(){\n    set();\n    string data;\n    while( getline(cin, data) ){\n        string c;\n        c = string(\"\");\n        for(string::iterator it = data.begin(); it != data.end(); it++){\n            c += table1[*it] ;\n        }\n        string::iterator it = c.begin();\n        while( it != c.end() ){\n            cout << getBlock(c, it);\n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\nusing namespace std;\n\nmap<char, string> tr1;\nmap<string, char> tr2;\n\nint main() {\n\ttr1[' '] = \"101\";\n\ttr1['\\''] = \"000000\";\n\ttr1[','] = \"000011\";\n\ttr1['-'] = \"10010001\";\n\ttr1['.'] = \"010001\";\n\ttr1['?'] = \"000001\";\n\ttr1['A'] = \"100101\";\n\ttr1['B'] = \"10011010\";\n\ttr1['C'] = \"0101\";\n\ttr1['D'] = \"0001\";\n\ttr1['E'] = \"110\";\n\ttr1['F'] = \"01001\";\n\ttr1['G'] = \"10011011\";\n\ttr1['H'] = \"010000\";\n\ttr1['I'] = \"0111\";\n\ttr1['J'] = \"10011000\";\n\ttr1['K'] = \"0110\";\n\ttr1['L'] = \"00100\";\n\ttr1['M'] = \"10011001\";\n\ttr1['N'] = \"10011110\";\n\ttr1['O'] = \"00101\";\n\ttr1['P'] = \"111\";\n\ttr1['Q'] = \"10011111\";\n\ttr1['R'] = \"1000\";\n\ttr1['S'] = \"00110\";\n\ttr1['T'] = \"00111\";\n\ttr1['U'] = \"10011100\";\n\ttr1['V'] = \"10011101\";\n\ttr1['W'] = \"000010\";\n\ttr1['X'] = \"10010010\";\n\ttr1['Y'] = \"10010011\";\n\ttr1['Z'] = \"10010000\";\n\n\ttr2[\"00000\"] = 'A';\t\n\ttr2[\"00001\"] = 'B';\t\n\ttr2[\"00010\"] = 'C';\t\n\ttr2[\"00011\"] = 'D';\t\n\ttr2[\"00100\"] = 'E';\t\n\ttr2[\"00101\"] = 'F';\t\n\ttr2[\"00110\"] = 'G';\t\n\ttr2[\"00111\"] = 'H';\t\n\ttr2[\"01000\"] = 'I';\t\n\ttr2[\"01001\"] = 'J';\t\n\ttr2[\"01010\"] = 'K';\t\n\ttr2[\"01011\"] = 'L';\t\n\ttr2[\"01100\"] = 'M';\t\n\ttr2[\"01101\"] = 'N';\t\n\ttr2[\"01110\"] = 'O';\t\n\ttr2[\"01111\"] = 'P';\t\n\ttr2[\"10000\"] = 'Q';\t\n\ttr2[\"10001\"] = 'R';\t\n\ttr2[\"10010\"] = 'S';\t\n\ttr2[\"10011\"] = 'T';\t\n\ttr2[\"10100\"] = 'U';\t\n\ttr2[\"10101\"] = 'V';\t\n\ttr2[\"10110\"] = 'W';\t\n\ttr2[\"10111\"] = 'X';\t\n\ttr2[\"11000\"] = 'Y';\t\n\ttr2[\"11001\"] = 'Z';\t\n\ttr2[\"11010\"] = ' ';\t\n\ttr2[\"11011\"] = '.';\t\n\ttr2[\"11100\"] = ',';\t\n\ttr2[\"11101\"] = '-';\t\n\ttr2[\"11110\"] = '\\'';\t\n\ttr2[\"11111\"] = '?';\t\n\t\n\tstring str;\n\twhile (getline(cin, str)) {\n\t\tstring tmp = \"\";\n\t\tfor (int i=0; i<str.size(); i++)\n\t\t\ttmp += tr1[str[i]];\n\n\t\tint s = tmp.size() % 5;\n\t\tif (s != 0) \n\t\t\tfor (int i=0; i<5-s; i++)\n\t\t\t\ttmp += \"0\";\n\n\t\tfor (int i=0; i<tmp.size()/5; i++)\n\t\t\tcout << tr2[tmp.substr(i*5, 5)];\n\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<string>\n\nstd::string enc[] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\" };\nstd::string str = \" \\',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nstd::string symbol = \" .,-\\'?\";\n\nint bin( std::string s )\n{\n\tstd::reverse( s.begin(), s.end() );\n\n\tint ret = 0, w = 1;\n\tfor( int i = 0; i != s.size(); ++i )\n\t{\n\t\tif( s[i] - '0' )\n\t\t\tret += w;\n\n\t\tw <<= 1;\n\t}\n\n\treturn ret;\n}\n\nint main()\n{\n\tstd::string s;\n\twhile( std::getline( std::cin, s ) )\n\t{\n\t\tstd::string code;\n\t\tfor( int i = 0; i != s.size(); ++i )\n\t\t\tcode += enc[ str.find( s[i] ) ];\n\n\t\tfor( int i = 0; i < code.size(); i += 5 )\n\t\t{\n\t\t\tstd::string t = code.substr( i, std::min( 5, (int)code.size() - i ) );\n\t\t\tint n = bin( t );\n\t\t\tstd::cout << ( n + 6 < str.size() ? str[n + 6] : symbol[n + 6 - str.size()] );\n\t\t}\n\n\t\tstd::cout << std::endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <iostream>\n#include <sstream>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n\nusing namespace std;\n\ntypedef long long ll;\n\nint main(){\n\tstring str;\n\n\tmap<string,string> encode;\n\tmap<string,string> decode;\n\n\tencode[\" \"] = \"101\";\n\tencode[\"'\"] = \"000000\";\n\tencode[\",\"] = \"000011\";\n\tencode[\"-\"] = \"10010001\";\n\tencode[\".\"] = \"010001\";\n\n\tencode[\"?\"] = \"000001\";\n\tencode[\"A\"] = \"100101\";\n\tencode[\"B\"] = \"10011010\";\n\tencode[\"C\"] = \"0101\";\n\tencode[\"D\"] = \"0001\";\n\tencode[\"E\"] = \"110\";\n\tencode[\"F\"] = \"01001\";\n\tencode[\"G\"] = \"10011011\";\n\n\tencode[\"H\"] = \"010000\";\n\tencode[\"I\"] = \"0111\";\n    encode[\"J\"] = \"10011000\";\n\tencode[\"K\"] = \"0110\";\n\tencode[\"L\"] = \"00100\";\n\tencode[\"M\"] = \"10011001\";\n\tencode[\"N\"] = \"10011110\";\n\n\tencode[\"O\"] = \"00101\";\n\tencode[\"P\"] = \"111\";\n\tencode[\"Q\"] = \"10011111\";\n\tencode[\"R\"] = \"1000\";\n\tencode[\"S\"] = \"00110\";\n\tencode[\"T\"] = \"00111\";\n\tencode[\"U\"] = \"10011100\";\n\n\tencode[\"V\"] = \"10011101\";\n\tencode[\"W\"] = \"000010\";\n\tencode[\"X\"] = \"10010010\";\n\tencode[\"Y\"] = \"10010011\";\n\tencode[\"Z\"] = \"10010000\";\n\n\tdecode[\"00000\"] = \"A\";\n\tdecode[\"00001\"] = \"B\";\n\tdecode[\"00010\"] = \"C\";\n\tdecode[\"00011\"] = \"D\";\n\tdecode[\"00100\"] = \"E\";\n\tdecode[\"00101\"] = \"F\";\n\tdecode[\"00110\"] = \"G\";\n\n\tdecode[\"00111\"] = \"H\";\n\tdecode[\"01000\"] = \"I\";\n\tdecode[\"01001\"] = \"J\";\n\tdecode[\"01010\"] = \"K\";\n\tdecode[\"01011\"] = \"L\";\n\tdecode[\"01100\"] = \"M\";\n\tdecode[\"01101\"] = \"N\";\n\n\tdecode[\"01110\"] = \"O\";\n\tdecode[\"01111\"] = \"P\";\n\tdecode[\"10000\"] = \"Q\";\n\tdecode[\"10001\"] = \"R\";\n\tdecode[\"10010\"] = \"S\";\n\tdecode[\"10011\"] = \"T\";\n\tdecode[\"10100\"] = \"U\";\n\n\tdecode[\"10101\"] = \"V\";\n\tdecode[\"10110\"] = \"W\";\n\tdecode[\"10111\"] = \"X\";\n\tdecode[\"11000\"] = \"Y\";\n\tdecode[\"11001\"] = \"Z\";\n\n\tdecode[\"11010\"] = \" \";\n\tdecode[\"11011\"] = \".\";\n\tdecode[\"11100\"] = \",\";\n\tdecode[\"11101\"] = \"-\";\n\tdecode[\"11110\"] = \"'\";\n\tdecode[\"11111\"] = \"?\";\n\n\twhile(getline(cin,str)){\n\n\t\tstring enc=\"\";\n\t\tfor(int i=0;i<str.size();i++){\n\t\t\tenc+=encode[str.substr(i,1)];\n\t\t}\n\n\t\tenc+=\"0000\";\n\n\t\tstring dec=\"\";\n\t\tfor(int i=0;i+5<=enc.size();i+=5){\n\t\t\tdec+=decode[enc.substr(i,5)];\n\t\t}\n\n\t\tcout << dec << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <bitset>\n#include <cstring>\nusing namespace std;\n\nconst char *t1=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst char *v1[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\nconst char *t2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint main(){\n  string s,t,z;\n  int i,j;\n  for(;z=t=\"\",getline(cin,s);cout<<t<<endl){\n    for(i=0;i<s.size();i++)\n      if((j=strchr(t1,s[i])-t1)+t1)z+=v1[j];\n    for(;z.size()%5;z+='0');\n    for(i=0;i<z.size()/5;i++)\n      t+=t2[bitset<5>(z,i*5,i*5+5).to_ulong()];\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\nstring ab[26] = {\n\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\n\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\n\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\n\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\n\"10010000\"};\nstring ctoi(char c) {\n    if (c==' ') return \"101\";\n    else if (c=='\\'') return \"000000\";\n    else if (c==',') return \"000011\";\n    else if (c=='-') return \"10010001\";\n    else if (c=='.') return \"010001\";\n    else if (c=='?') return \"000001\";\n    else if (c>='A'&&c<='Z') return ab[c-'A'];\n}\nchar itoc(string num) {\n    if (num==\"00000\") return 'A';\n    if (num==\"00001\") return 'B';\n    if (num==\"00010\") return 'C';\n    if (num==\"00011\") return 'D';\n    if (num==\"00100\") return 'E';\n    if (num==\"00101\") return 'F';\n    if (num==\"00110\") return 'G';\n    if (num==\"00111\") return 'H';\n    if (num==\"01000\") return 'I';\n    if (num==\"01001\") return 'J';\n    if (num==\"01010\") return 'K';\n    if (num==\"01011\") return 'L';\n    if (num==\"01100\") return 'M';\n    if (num==\"01101\") return 'N';\n    if (num==\"01110\") return 'O';\n    if (num==\"01111\") return 'P';\n    if (num==\"10000\") return 'Q';\n    if (num==\"10001\") return 'R';\n    if (num==\"10010\") return 'S';\n    if (num==\"10011\") return 'T';\n    if (num==\"10100\") return 'U';\n    if (num==\"10101\") return 'V';\n    if (num==\"10110\") return 'W';\n    if (num==\"10111\") return 'X';\n    if (num==\"11000\") return 'Y';\n    if (num==\"11001\") return 'Z';\n    if (num==\"11010\") return ' ';\n    if (num==\"11011\") return '.';\n    if (num==\"11100\") return ',';\n    if (num==\"11101\") return '-';\n    if (num==\"11110\") return '\\'';\n    if (num==\"11111\") return '?';\n}\nint main() {\n    string str;\n    while (getline(cin,str)) {\n        string num=\"\";\n        for (int i=0; i<str.length(); i++) num+=ctoi(str[i]);\n        int cnt=0;\n        string temp=\"\", res=\"\";\n        for (int i=0; i<num.length(); i++) {\n            cnt++;\n            temp+=num[i];\n            if (cnt==5) {\n                res+=itoc(temp);\n                cnt=0;\n                temp=\"\";\n            }\n        }\n        if (cnt!=0) {\n            while (cnt<5) {\n                temp+='0';\n                cnt++;\n            }\n        }\n        res+=itoc(temp);\n        cout << res << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <map>\n#include <sstream>\n\nusing namespace std;\n\nmap<char, string> preS;\nint main ()\n{\n    preS[' '] = \"101\";\n    preS['\\''] = \"000000\";\n    preS[','] = \"000011\";\n    preS['-'] = \"10010001\";\n    preS['.'] = \"010001\";\n    preS['?'] = \"000001\";\n    preS['A'] = \"100101\";\n    preS['B'] = \"10011010\";\n    preS['C'] = \"0101\";\n    preS['D'] = \"0001\";\n    preS['E'] = \"110\";\n    preS['F'] = \"01001\";\n    preS['G'] = \"10011011\";\n    preS['H'] = \"010000\";\n    preS['I'] = \"0111\";\n    preS['J'] = \"10011000\";\n    preS['K'] = \"0110\";\n    preS['L'] = \"00100\";\n    preS['M'] = \"10011001\";\n    preS['N'] = \"10011110\";\n    preS['O'] = \"00101\";\n    preS['P'] = \"111\";\n    preS['Q'] = \"10011111\";\n    preS['R'] = \"1000\";\n    preS['S'] = \"00110\";\n    preS['T'] = \"00111\";\n    preS['U'] = \"10011100\";\n    preS['V'] = \"10011101\";\n    preS['W'] = \"000010\";\n    preS['X'] = \"10010010\";\n    preS['Y'] = \"10010011\";\n    preS['Z'] = \"10010000\";\n    \n    char aft[] = {' ', '.', ',', '-', '\\'', '?'};\n\n    string str;\n    while (getline(cin, str)) {\n        string p;\n        for (int i = 0; i < str.size(); i++) {\n            p += preS[str[i]];\n        }\n        while (p.size() % 5 != 0) {\n            p += '0';\n        }\n        int s = 0;\n        int t = 16;\n        for (int i = 0; i < p.size(); i++) {\n            if (i % 5 == 0) {t = 16; s = 0;}\n            s += p[i] == '1' ? t : 0;\n            t /= 2;\n            if (i % 5 == 4) {\n                if (0 <= s && s < 26) {\n                    cout << (char)('A' + s);\n                } else {\n                    s -= 26;\n                    cout << aft[s];\n                }\n            }\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#define CASE(c,s) case c:return s\nusing namespace std;\n\nstring f(char c){\n\tswitch (c){\n\t\tCASE(' ', \"101\");\n\t\tCASE('\\'', \"000000\");\n\t\tCASE(',', \"000011\");\n\t\tCASE('-', \"10010001\");\n\t\tCASE('.', \"010001\");\n\t\tCASE('?', \"000001\");\n\t\tCASE('A', \"100101\");\n\t\tCASE('B', \"10011010\");\n\t\tCASE('C', \"0101\");\n\t\tCASE('D', \"0001\");\n\t\tCASE('E', \"110\");\n\t\tCASE('F', \"01001\");\n\t\tCASE('G', \"10011011\");\n\t\tCASE('H', \"010000\");\n\t\tCASE('I', \"0111\");\n\t\tCASE('J', \"10011000\");\n\t\tCASE('K', \"0110\");\n\t\tCASE('L', \"00100\");\n\t\tCASE('M', \"10011001\");\n\t\tCASE('N', \"10011110\");\n\t\tCASE('O', \"00101\");\n\t\tCASE('P', \"111\");\n\t\tCASE('Q', \"10011111\");\n\t\tCASE('R', \"1000\");\n\t\tCASE('S', \"00110\");\n\t\tCASE('T', \"00111\");\n\t\tCASE('U', \"10011100\");\n\t\tCASE('V', \"10011101\");\n\t\tCASE('W', \"000010\");\n\t\tCASE('X', \"10010010\");\n\t\tCASE('Y', \"10010011\");\n\t\tCASE('Z', \"10010000\");\n\tdefault:return \"\";\n\t}\n}\n\nint bitodec(string s){\n\tint sum=0;\n\tfor (unsigned int i = 0; i < s.length(); ++i){\n\t\tsum *= 2;\n\t\tsum += (s[i] - '0');\t\t\n\t}\n\treturn sum;\n}\n\nchar g(string s){\n\tchar c[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\treturn c[bitodec(s)];\n}\n\nint main(){\n\tstring s,r;\n\tint i;\n\n\twhile (getline(cin, s)){\n\t\ti = 0;\n\t\tr = \"\";\n\n\t\twhile (s[i] != '\\0'){\n\t\t\tr += f(s[i]);\n\t\t\t++i;\n\t\t}\n\n\t\tif (i % 5)for (int j = 4 - (i % 5); --j;)r += \"0\";\n\n\t\tfor (unsigned int j = 0; j < r.length() ;j+=5)\n\t\t\tcout << g(r.substr(j,5));\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid hantei(char *str);\n\nchar DataBase[][3][80] =\n\t{\n\t/* [文字] ,[符号＿変換前] ,[符号＿変換後] */\n\t{ \" \", \"101\", \"11010\" },{ \"\\'\", \"000000\", \"11110\" },{ \",\", \"000011\", \"11100\" },{ \"-\", \"10010001\", \"11101\" },\n\t{ \".\", \"010001\", \"11011\" },{ \"?\", \"000001\", \"11111\" },{ \"A\", \"100101\", \"00000\" },{ \"B\", \"10011010\", \"00001\" },\n    { \"C\", \"0101\", \"00010\" },{ \"D\", \"0001\", \"00011\" },{ \"E\", \"110\", \"00100\" },{ \"F\", \"01001\", \"00101\" },\n\t{ \"G\", \"10011011\", \"00110\" },{ \"H\", \"010000\", \"00111\" },{ \"I\", \"0111\", \"01000\" },{ \"J\", \"10011000\", \"01001\" },\n\t{ \"K\", \"0110\", \"01010\" },{ \"L\", \"00100\", \"01011\" },{ \"M\", \"10011001\", \"01100\" },{ \"N\", \"10011110\", \"01101\" },\n\t{ \"O\", \"00101\", \"01110\" },{ \"P\", \"111\", \"01111\" },{ \"Q\", \"10011111\", \"10000\" },{ \"R\", \"1000\", \"10001\" },\n\t{ \"S\", \"00110\", \"10010\" },{ \"T\", \"00111\", \"10011\" },{ \"U\", \"10011100\", \"10100\" },{ \"V\", \"10011101\", \"10101\" },\n\t{ \"W\", \"000010\", \"10110\" },{ \"X\", \"10010010\", \"10111\" },{ \"Y\", \"10010011\", \"11000\" },{ \"Z\", \"100100000\", \"11001\" },\n    {\"\", \"\", \"\" }\n};\n\n\nint main(void)\n{\n\tchar str1[1000],str2[1000],ch;\n\tint cut_i;\n\t\n\t/*scanf(\"%[A-Z \\'.?,-]\",str);\n\t\thantei(str1);*/\n\tcut_i=0;\n\twhile((ch = getchar())!=EOF){\n\t\tif(ch !='\\n'){\n\t\t\tstr2[cut_i] = ch;\n\t\t\tcut_i++;\n\t\t}\n\t\telse {\n\t\t\tstrncpy(str1,str2,cut_i);\n\t\t\tstr1[cut_i]='\\0';\n\t\t\thantei(str1);\n\t\t\tprintf(\"\\n\");\n\t\t\tcut_i=0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\nvoid hantei(char *str)\n{\n\tint len1,cut_i,cut_j,count;\n\tchar ans[1000]={\"\"},str2[1000]={\"\"},str3[1000]={\"\"};\n\tchar zero[]={\"0000\"};\n\n\tlen1 = strlen(str);\n\tcount = 0;\n\n\tfor(cut_i=0;cut_i<len1;cut_i++){\n\t\tcut_j=0;\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(!strncmp((str+cut_i),DataBase[cut_j][0],1)){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(str2,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\telse if(count !=0){\n\t\t\t\t\tstrcpy(str2+count,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\t\n\tlen1 = strlen(str2);\n\tcount = 0;\n\n\tif( len1 % 5 != 0){\n\t\tcut_i = 5 - len1 % 5;\n\t\tstrncat(str2,zero,cut_i);\n\t\tlen1 = strlen(str2);\n\t}\n\n\n\tfor(cut_i=0;cut_i<len1;cut_i+=5){\n\t\tcut_j=0;\n\t\tstrncpy(str3,str2+cut_i,5);\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(strcmp(str3,DataBase[cut_j][2]) == 0){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(ans,DataBase[cut_j][0]);\n\t\t\t\t\tcount =strlen(ans);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstrcat(ans,DataBase[cut_j][0]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\tprintf(ans);\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<string>\nusing namespace std;\n\nint main()\n{\n    string str;\n    map<char,string> m1;\n    m1[' '] = \"101\";\n    m1['\\''] = \"000000\";  \n    m1[','] = \"000011\";\n    m1['-'] = \"10010001\";\n    m1['.'] = \"010001\";\n    m1['?'] = \"000001\";        \n    m1['A'] = \"100101\";\n    m1['B'] = \"10011010\";\n    m1['C'] = \"0101\";\n    m1['D'] = \"0001\";\n    m1['E'] = \"110\";\n    m1['F'] = \"01001\";\n    m1['G'] = \"10011011\";\n    m1['H'] = \"010000\";\n    m1['I'] = \"0111\";\n    m1['J'] = \"10011000\";\n    m1['K'] = \"0110\";\n    m1['L'] = \"00100\";\n    m1['M'] = \"10011001\";\n    m1['N'] = \"10011110\";\n    m1['O'] = \"00101\";\n    m1['P'] = \"111\";\n    m1['Q'] = \"10011111\";\n    m1['R'] = \"1000\";\n    m1['S'] = \"00110\";\n    m1['T'] = \"00111\";\n    m1['U'] = \"10011100\";\n    m1['V'] = \"10011101\";\n    m1['W'] = \"000010\";\n    m1['X'] = \"10010010\";\n    m1['Y'] = \"10010011\";\n    m1['Z'] = \"10010000\";\n\n    map<string,char> m2;\n    m2[\"00000\"] = 'A';\n    m2[\"00001\"] = 'B';\n    m2[\"00010\"] = 'C';\n    m2[\"00011\"] = 'D';\n    m2[\"00100\"] = 'E';\n    m2[\"00101\"] = 'F';\n    m2[\"00110\"] = 'G';\n    m2[\"00111\"] = 'H';\n    m2[\"01000\"] = 'I';\n    m2[\"01001\"] = 'J';\n    m2[\"01010\"] = 'K';\n    m2[\"01011\"] = 'L';\n    m2[\"01100\"] = 'M';\n    m2[\"01101\"] = 'N';\n    m2[\"01110\"] = 'O';\n    m2[\"01111\"] = 'P';\n    m2[\"10000\"] = 'Q';\n    m2[\"10001\"] = 'R';\n    m2[\"10010\"] = 'S';\n    m2[\"10011\"] = 'T';\n    m2[\"10100\"] = 'U';\n    m2[\"10101\"] = 'V';\n    m2[\"10110\"] = 'W';\n    m2[\"10111\"] = 'X';\n    m2[\"11000\"] = 'Y';\n    m2[\"11001\"] = 'Z';\n    m2[\"11010\"] = ' ';\n    m2[\"11011\"] = '.';\n    m2[\"11100\"] = ',';\n    m2[\"11101\"] = '-';\n    m2[\"11110\"] = '\\'';\n    m2[\"11111\"] = '?';\n\n    while( getline(cin,str) )\n    {\n        string conv = \"\";\n        for( int i = 0; i < str.size(); i++ )\n            conv += m1[str[i]];\n\n        string res = \"\";\n        for( int i = 0; i < conv.size(); i++ )\n        {\n            res += conv[i];\n            if( i % 5 == 4 )\n            {\n                cout << m2[res];\n                res = \"\";\n            }\n        }\n        while( res.size() != 0 && res.size() < 5 )\n            res += \"0\";\n        if( res.size() == 5 )\n            cout << m2[res];\n        cout << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n\nusing namespace std;\n\nchar s[] = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nstring t[] = {\n\"101\",\n\"000000\",\n\"000011\",\n\"10010001\",\n\"010001\",\n\"000001\",\n\"100101\",\n\"10011010\",\n\"0101\",\n\"0001\",\n\"110\",\n\"01001\",\n\"10011011\",\n\"010000\",\n\"0111\",\n\"10011000\",\n\"0110\",\n\"00100\",\n\"10011001\",\n\"10011110\",\n\"00101\",\n\"111\",\n\"10011111\",\n\"1000\",\n\"00110\",\n\"00111\",\n\"10011100\",\n\"10011101\",\n\"000010\",\n\"10010010\",\n\"10010011\",\n\"10010000\"};\nchar r[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ ',-.?\";\n\nint main()\n{\n\tstring a;\n\twhile(getline(cin,a)){\n\t\tstring out;\n\t\tfor (int i = 0; i < (int)a.size(); i++)\n\t\t\tout.append(t[find(s,s+sizeof(s),a[i]) - s]);\n\t\twhile(out.size() % 5 != 0)\n\t\t\tout.push_back('0');\n\t\tfor (int i = 0; i < (int)out.size() / 5; i++){\n\t\t\tint x = 0;\n\t\t\tfor (int j = 0; j < 5; j++)\n\t\t\t\tx = (x << 1) + (out[i*5+j] == '1');\n\t\t\tputchar(r[x]);\n\t\t}\n\t\tputchar('\\n');\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n\n  string wd = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string bd[32] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\" };\n  string od = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n  string input;\n\n  while( true ) {\n    if ( cin.eof() ) break;\n    getline( cin, input );\n    if ( input == \"\" ) break;\n\n    string k = \"\";\n\n    for( int l = 0; l < input.size(); l++ ) {\n      char in = input[l];\n      for ( int i = 0; i < 32; i++ ) {\n\tif ( in == wd[i] ) {\n\t  k += bd[i];\n\t  break;\n\t}\n      }\n    }\n    k += \"0000\";\n    for ( int i = 0; i < k.size(); i+=5 ) {\n      int x = 0;\n      for ( int j = 0; j < 5; j++ ) {\n\tx = x * 2 + k[i+j] - '0';\n      }\n      cout << od[x];\n    }\n    cout << endl;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\nusing namespace std;\n\nstring c1[128];\nchar c2[100];\n\nint main() {\n  c1[' '] = \"101\";\n  c1['\\''] = \"000000\";\n  c1[','] = \"000011\";\n  c1['-'] = \"10010001\";\n  c1['.'] = \"010001\";\n  c1['?'] = \"000001\";\n  c1['A'] = \"100101\";\n  c1['B'] = \"10011010\";\n  c1['C'] = \"0101\";\n  c1['D'] = \"0001\";\n  c1['E'] = \"110\";\n  c1['F'] = \"01001\";\n  c1['G'] = \"10011011\";\n  c1['H'] = \"010000\";\n  c1['I'] = \"0111\";\n  c1['J'] = \"10011000\";\n  c1['K'] = \"0110\";\n  c1['L'] = \"00100\";\n  c1['M'] = \"10011001\";\n  c1['N'] = \"10011110\";\n  c1['O'] = \"00101\";\n  c1['P'] = \"111\";\n  c1['Q'] = \"10011111\";\n  c1['R'] = \"1000\";\n  c1['S'] = \"00110\";\n  c1['T'] = \"00111\";\n  c1['U'] = \"10011100\";\n  c1['V'] = \"10011101\";\n  c1['W'] = \"000010\";\n  c1['X'] = \"10010010\";\n  c1['Y'] = \"10010011\";\n  c1['Z'] = \"10010000\";\n\n  for(int i = 0; i < 26; ++i) c2[i] = 'A' + i;\n  c2[31] = '?';\n  c2[30] = '\\'';\n  c2[29] = '-';\n  c2[28] = ',';\n  c2[27] = '.';\n  c2[26] = ' ';\n\n  string s;\n  while(getline(cin, s)) {\n    string t;\n    for(int i = 0; i < s.size(); ++i) {\n      t += c1[s[i]];\n    }\n    while(t.size()%5 != 0) t += \"0\";\n    for(int i = 0; i < t.size(); i += 5) {\n      string u = t.substr(i,5);\n      reverse(u.begin(), u.end());\n      int v = 0;\n      for(int j = 0; j < u.size(); ++j) {\n        if(u[j] == '1') v += (1<<j);\n      }\n      cout << c2[v];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <list>\n#include <algorithm>\n#include <string>\n#include <sstream>\n#include <stack>\n#include <iomanip>\n#include <numeric>\n#include <queue>\n#include <climits>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <cstring>\n#include <map>\nusing namespace std;\nusing ll = long long;\n#define MOD 1000000007\n#define INF 1LL << 59\n\nint main()\n{\n    //std::ios::sync_with_stdio(false);\n    //std::cin.tie(0);\n    //cout << fixed << setprecision(7);\n\n    map<char, string> mp1;\n    mp1[' '] = \"101\";\n    mp1['\\''] = \"000000\";\n    mp1[','] = \"000011\";\n    mp1['-'] = \"10010001\";\n    mp1['.'] = \"010001\";\n    mp1['?'] = \"000001\";\n    mp1['A'] = \"100101\";\n    mp1['B'] = \"10011010\";\n    mp1['C'] = \"0101\";\n    mp1['D'] = \"0001\";\n    mp1['E'] = \"110\";\n    mp1['F'] = \"01001\";\n    mp1['G'] = \"10011011\";\n    mp1['H'] = \"010000\";\n    mp1['I'] = \"0111\";\n    mp1['J'] = \"10011000\";\n    mp1['K'] = \"0110\";\n    mp1['L'] = \"00100\";\n    mp1['M'] = \"10011001\";\n    mp1['N'] = \"10011110\";\n    mp1['O'] = \"00101\";\n    mp1['P'] = \"111\";\n    mp1['Q'] = \"10011111\";\n    mp1['R'] = \"1000\";\n    mp1['S'] = \"00110\";\n    mp1['T'] = \"00111\";\n    mp1['U'] = \"10011100\";\n    mp1['V'] = \"10011101\";\n    mp1['W'] = \"000010\";\n    mp1['X'] = \"10010010\";\n    mp1['Y'] = \"10010011\";\n    mp1['Z'] = \"10010000\";\n\n    map<string, char> mp2;\n    mp2[\"00000\"] = 'A';\n    mp2[\"00001\"] = 'B';\n    mp2[\"00010\"] = 'C';\n    mp2[\"00011\"] = 'D';\n    mp2[\"00100\"] = 'E';\n    mp2[\"00101\"] = 'F';\n    mp2[\"00110\"] = 'G';\n    mp2[\"00111\"] = 'H';\n    mp2[\"01000\"] = 'I';\n    mp2[\"01001\"] = 'J';\n    mp2[\"01010\"] = 'K';\n    mp2[\"01011\"] = 'L';\n    mp2[\"01100\"] = 'M';\n    mp2[\"01101\"] = 'N';\n    mp2[\"01110\"] = 'O';\n    mp2[\"01111\"] = 'P';\n    mp2[\"10000\"] = 'Q';\n    mp2[\"10001\"] = 'R';\n    mp2[\"10010\"] = 'S';\n    mp2[\"10011\"] = 'T';\n    mp2[\"10100\"] = 'U';\n    mp2[\"10101\"] = 'V';\n    mp2[\"10110\"] = 'W';\n    mp2[\"10111\"] = 'X';\n    mp2[\"11000\"] = 'Y';\n    mp2[\"11001\"] = 'Z';\n    mp2[\"11010\"] = ' ';\n    mp2[\"11011\"] = '.';\n    mp2[\"11100\"] = ',';\n    mp2[\"11101\"] = '-';\n    mp2[\"11110\"] = '\\'';\n    mp2[\"11111\"] = '?';\n\n    string s;\n    while (getline(cin, s))\n    {\n        string en = \"\";\n        for (int i = 0; i < (int)s.size(); ++i)\n        {\n            en += mp1[s[i]];\n        }\n        //cout << en << endl;\n\n        string ans = \"\";\n        for (int i = 0; i < (int)en.size(); i += 5)\n        {\n            string p = \"\";\n            if (i + 5 < (int)en.size())\n            {\n                p = en.substr(i, 5);\n            }\n            else\n            {\n                int w = (int)en.size() - 1 - i;\n                for (int j = 0; j <= w; ++j)\n                    p += en[i + j];\n\n                for (int j = 1; j < 5 - w; ++j)\n                    p += '0';\n            }\n\n            ans += mp2[p];\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<string>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nint main(){\n\tchar chs[]=\" .,-'?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tstring codes[32]={\n\t\t\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n\t\t,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n\t\t,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n\t\t,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\n\tstring s,t;\n\twhile(getline(cin,s)){\n\t\tt.clear();\n\t\tfor(int i=0;i<s.size();i++){\n\t\t\tt += codes[find(chs,chs+32,s[i])-chs];\n\t\t}\n\t\tif(t.size()%5)t.append(5-t.size()%5,'0');\n\t\tfor(int i=0;i<t.size();i+=5){\n\t\t\tint n=0;\n\t\t\tfor(int j=0;j<5;j++)n = n<<1|t[i+j]-'0';\n\t\t\tif(n<26)cout<<(char)('A'+n);\n\t\t\telse cout<<\" .,-'?\"[n-26];\n\t\t}\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stack>\n#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n#include <string>\n#include <map>\n#include <cmath>\n\n#define rep(x,to) for(int x=0;x<to;x++)\n#define rep2(x,from,to) for(int x=from;x<to;x++)\n\nusing namespace std;\n\n\nint main(void){\nstring ws;\nmap<char,string> aa;\nmap<string,char> bb;\n \n\taa[' ']  = \"101\";\n\taa['\\''] = \"000000\";\n\taa[',']  = \"000011\";\n\taa['-']  = \"10010001\";\n\taa['.']  = \"010001\";\n\taa['?']  = \"000001\";\n\taa['A']  = \"100101\";\n\taa['B']  = \"10011010\";\n\taa['C']  = \"0101\";\n\taa['D']  = \"0001\";\n\taa['E']  = \"110\";\n\taa['F']  = \"01001\";\n\taa['G']  = \"10011011\";\n\taa['H']  = \"010000\";\n\taa['I']  = \"0111\";\n\taa['J']  = \"10011000\";\n\taa['K']  = \"0110\";\n\taa['L']  = \"00100\";\n\taa['M']  = \"10011001\";\n\taa['N']  = \"10011110\";\n\taa['O']  = \"00101\";\n\taa['P']  = \"111\";\n\taa['Q']  = \"10011111\";\n\taa['R']  = \"1000\";\n\taa['S']  = \"00110\";\n\taa['T']  = \"00111\";\n\taa['U']  = \"10011100\";\n\taa['V']  = \"10011101\";\n\taa['W']  = \"000010\";\n\taa['X']  = \"10010010\";\n\taa['Y']  = \"10010011\";\n\taa['Z']  = \"10010000\";\n \n\tbb[\"00000\"]  = 'A';\n\tbb[\"00001\"]  = 'B';\n\tbb[\"00010\"]  = 'C';\n\tbb[\"00011\"]  = 'D';\n\tbb[\"00100\"]  = 'E';\n\tbb[\"00101\"]  = 'F';\n\tbb[\"00110\"]  = 'G';\n\tbb[\"00111\"]  = 'H';\n\tbb[\"01000\"]  = 'I';\n\tbb[\"01001\"]  = 'J';\n\tbb[\"01010\"]  = 'K';\n\tbb[\"01011\"]  = 'L';\n\tbb[\"01100\"]  = 'M';\n\tbb[\"01101\"]  = 'N';\n\tbb[\"01110\"]  = 'O';\n\tbb[\"01111\"]  = 'P';\n\tbb[\"10000\"]  = 'Q';\n\tbb[\"10001\"]  = 'R';\n\tbb[\"10010\"]  = 'S';\n\tbb[\"10011\"]  = 'T';\n\tbb[\"10100\"]  = 'U';\n\tbb[\"10101\"]  = 'V';\n\tbb[\"10110\"]  = 'W';\n\tbb[\"10111\"]  = 'X';\n\tbb[\"11000\"]  = 'Y';\n\tbb[\"11001\"]  = 'Z';\n\tbb[\"11010\"]  = ' ';\n\tbb[\"11011\"]  = '.';\n\tbb[\"11100\"]  = ',';\n\tbb[\"11101\"]  = '-';\n\tbb[\"11110\"]  = '\\'';\n\tbb[\"11111\"]  = '?';\n\t\n\twhile(getline(cin,ws)){\n\n\t\tstring wws=\"\", ans=\"\";\n\t\trep(i, ws.size()) wws += aa[ws[i]];\n\t\twhile(wws.size() % 5 !=0) wws += '0';\n//\t\tcout << wws <<endl;\n\t\tfor(int i=0;i<wws.size() ;i+=5){\n\t\t\tstring mws = wws.substr(i,5);\n\t\t\tans += bb[mws];\n\t\t}\n\t\tif(cin.eof()) break;\n\t\tcout << ans  <<endl;\n\t}\n\n\treturn 0;\n\t\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\nusing namespace std;\nstring s;\nmap<char,string>A;\nmap<string,char>B;\nmain()\n{\n\tA[' ']=\"101\";\n\tA['\\'']=\"000000\";\n\tA[',']=\"000011\";\n\tA['-']=\"10010001\";\n\tA['.']=\"010001\";\n\tA['?']=\"000001\";\n\tA['A']=\"100101\";\n\tA['B']=\"10011010\";\n\tA['C']=\"0101\";\n\tA['D']=\"0001\";\n\tA['E']=\"110\";\n\tA['F']=\"01001\";\n\tA['G']=\"10011011\";\n\tA['H']=\"010000\";\n\tA['I']=\"0111\";\n\tA['J']=\"10011000\";\n\tA['K']=\"0110\";\n\tA['L']=\"00100\";\n\tA['M']=\"10011001\";\n\tA['N']=\"10011110\";\n\tA['O']=\"00101\";\n\tA['P']=\"111\";\n\tA['Q']=\"10011111\";\n\tA['R']=\"1000\";\n\tA['S']=\"00110\";\n\tA['T']=\"00111\";\n\tA['U']=\"10011100\";\n\tA['V']=\"10011101\";\n\tA['W']=\"000010\";\n\tA['X']=\"10010010\";\n\tA['Y']=\"10010011\";\n\tA['Z']=\"10010000\";\n\tB[\"00000\"]='A';\n\tB[\"00001\"]='B';\n\tB[\"00010\"]='C';\n\tB[\"00011\"]='D';\n\tB[\"00100\"]='E';\n\tB[\"00101\"]='F';\n\tB[\"00110\"]='G';\n\tB[\"00111\"]='H';\n\tB[\"01000\"]='I';\n\tB[\"01001\"]='J';\n\tB[\"01010\"]='K';\n\tB[\"01011\"]='L';\n\tB[\"01100\"]='M';\n\tB[\"01101\"]='N';\n\tB[\"01110\"]='O';\n\tB[\"01111\"]='P';\n\tB[\"10000\"]='Q';\n\tB[\"10001\"]='R';\n\tB[\"10010\"]='S';\n\tB[\"10011\"]='T';\n\tB[\"10100\"]='U';\n\tB[\"10101\"]='V';\n\tB[\"10110\"]='W';\n\tB[\"10111\"]='X';\n\tB[\"11000\"]='Y';\n\tB[\"11001\"]='Z';\n\tB[\"11010\"]=' ';\n\tB[\"11011\"]='.';\n\tB[\"11100\"]=',';\n\tB[\"11101\"]='-';\n\tB[\"11110\"]='\\'';\n\tB[\"11111\"]='?';\n\twhile(getline(cin,s))\n\t{\n\t\tstring t=\"\";\n\t\tfor(int i=0;i<s.size();i++)t+=A[s[i]];\n\t\tif(t.size()%5)t+=string(5-t.size()%5,'0');\n\t\tfor(int i=0;i<t.size();i+=5)cout<<B[t.substr(i,5)];\n\t\tcout<<endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<string>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\n\nint main(){\n\tchar chs[]=\" .,-'?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tstring codes[32]={\n\t\t\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n\t\t,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n\t\t,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n\t\t,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\n\tstring s,t;\n\twhile(getline(cin,s)){\n\t\tfor(int i=0;i<s.size();i++){\n\t\t\tt += codes[find(chs,chs+32,s[i])-chs];\n\t\t}\n\t\tif(t.size()%5)t.append(5-t.size()%5,'0');\n\t\tfor(int i=0;i<t.size();i+=5){\n\t\t\tint n=0;\n\t\t\tfor(int j=0;j<5;j++)n = n<<1|t[i+j]-'0';\n\t\t\tif(n<26)cout<<(char)('A'+n);\n\t\t\telse cout<<\" .,-'?\"[n-26];\n\t\t}\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <cstring>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <fstream>\n#include <complex>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nstatic const double EPS = 1e-5;\n\n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) FOR(i,0,n)\nstring tonum(string &str, int i,map<char,string> &data){\n  if(i==str.size()) return \"\";\n  return data[str[i]] + tonum(str,i+1,data);\n}\nint main(void){\n  map<char,string> data;\n  data[' '] = \"101\";\n  data['\\''] = \"000000\";\n  data[','] = \"000011\";\n  data['-'] = \"10010001\";\n  data['.'] = \"010001\";\n  data['?'] = \"000001\";\n  data['A'] = \"100101\";\n  data['B'] = \"10011010\";\n  data['C'] = \"0101\";\n  data['D'] = \"0001\";\n  data['E'] = \"110\";\n  data['F'] = \"01001\";\n  data['G'] = \"10011011\";\n  data['H'] = \"010000\";\n  data['I'] = \"0111\";\n  data['J'] = \"10011000\";\n  data['K'] = \"0110\";\n  data['L'] = \"00100\";\n  data['M'] = \"10011001\";\n  data['N'] = \"10011110\";\n  data['O'] = \"00101\";\n  data['P'] = \"111\";\n  data['Q'] = \"10011111\";\n  data['R'] = \"1000\";\n  data['S'] = \"00110\";\n  data['T'] = \"00111\";\n  data['U'] = \"10011100\";\n  data['V'] = \"10011101\";\n  data['W'] = \"000010\";\n  data['X'] = \"10010010\";\n  data['Y'] = \"10010011\";\n  data['Z'] = \"10010000\";\n  string input;\n  while(getline(cin,input)){\n    string code = tonum(input,0,data);\n    for(int i=0; i<code.size(); i+=5){\n      string five = code.substr(i,5);\n      if(five.size()<5){\n        while(five.size()!=5) five.push_back('0');\n      }\n      int num5 = 0;\n      REP(i,5) num5+=(five[i]-'0')*pow(2,4-i);\n      if(num5<26){\n        cout<<(char)('A'+num5);\n      }else{\n        if(num5==26) cout<<' ';\n        if(num5==27) cout<<'.';\n        if(num5==28) cout<<',';\n        if(num5==29) cout<<'-';\n        if(num5==30) cout<<'\\'';\n        if(num5==31) cout<<'?';\n      }\n    }\n    cout<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n\tchar ch;\n\tstring input_str = \"\";\n\twhile(cin.get(ch)){\n\t\tswitch(ch){\n\t\tcase ' ' :input_str += \"101\"\t    ;break;\n\t\tcase '\\n':input_str += \"101\"\t\t;break;\n\t\tcase '\\'':input_str += \"000000\"\t\t;break;\n\t\tcase ',' :input_str += \"000011\"\t\t;break;\n\t\tcase '-' :input_str += \"10010001\"\t;break;\n\t\tcase '.' :input_str += \"010001\"\t\t;break;\n\t\tcase '?' :input_str += \"000001\"\t    ;break;\n\t\tcase 'A' :input_str += \"100101\"\t\t;break;\n\t\tcase 'B' :input_str += \"10011010\"\t;break;\n\t\tcase 'C' :input_str += \"0101\"\t\t;break;\n\t\tcase 'D' :input_str += \"0001\"\t\t;break;\n\t\tcase 'E' :input_str += \"110\"\t\t;break;\n\t\tcase 'F' :input_str += \"01001\"\t\t;break;\n\t\tcase 'G' :input_str += \"10011011\"\t;break;\n\t\tcase 'H' :input_str += \"010000\"\t\t;break;\n\t\tcase 'I' :input_str += \"0111\"\t\t;break;\n\t\tcase 'J' :input_str += \"10011000\"\t;break;\n\t\tcase 'K' :input_str += \"0110\"\t\t;break;\n\t\tcase 'L' :input_str += \"00100\"\t\t;break;\n\t\tcase 'M' :input_str += \"10011001\"\t;break;\n\t\tcase 'N' :input_str += \"10011110\"\t;break;\n\t\tcase 'O' :input_str += \"00101\"\t\t;break;\n\t\tcase 'P' :input_str += \"111\"\t\t;break;\n\t\tcase 'Q' :input_str += \"10011111\"\t;break;\n\t\tcase 'R' :input_str += \"1000\"\t\t;break;\n\t\tcase 'S' :input_str += \"00110\"\t\t;break;\n\t\tcase 'T' :input_str += \"00111\"\t\t;break;\n\t\tcase 'U' :input_str += \"10011100\"\t;break;\n\t\tcase 'V' :input_str += \"10011101\"\t;break;\n\t\tcase 'W' :input_str += \"000010\"\t\t;break;\n\t\tcase 'X' :input_str += \"10010010\"\t;break;\n\t\tcase 'Y' :input_str += \"10010011\"\t;break;\n\t\tcase 'Z' :input_str += \"10010000\"\t;break;\n\t\t}\n\t}\n\tint pad = 5 - input_str.size()%5;\n\tfor(int i=0; i<pad; i++)input_str += '0';\n\tstring out = \"\";\n\tfor(int i=0; i<input_str.size(); i+=5){\n\t\tstring output_str = input_str.substr(i, 5);\n\t\tif(output_str== \"00000\"){ out += 'A'; }\n\t\telse if( output_str==\"00001\") { out += 'B';}\t\n\t\telse if( output_str==\"00010\") { out += 'C';}\t\n\t\telse if( output_str==\"00011\") { out += 'D';}\t\n\t\telse if( output_str==\"00100\") { out += 'E';}\t\n\t\telse if( output_str==\"00101\") { out += 'F';}\t\n\t\telse if( output_str==\"00110\") { out += 'G';}\t\n\t\telse if( output_str==\"00111\") { out += 'H';}\t\n\t\telse if( output_str==\"01000\") { out += 'I';}\t\n\t\telse if( output_str==\"01001\") { out += 'J';}\t\n\t\telse if( output_str==\"01010\") { out += 'K';}\t\n\t\telse if( output_str==\"01011\") { out += 'L';}\t\n\t\telse if( output_str==\"01100\") { out += 'M';}\t\n\t\telse if( output_str==\"01101\") { out += 'N';}\t\n\t\telse if( output_str==\"01110\") { out += 'O';}\t\n\t\telse if( output_str==\"01111\") { out += 'P';}\t\n\t\telse if( output_str==\"10000\") { out += 'Q';}\t\n\t\telse if( output_str==\"10001\") { out += 'R';}\t\n\t\telse if( output_str==\"10010\") { out += 'S';}\t\n\t\telse if( output_str==\"10011\") { out += 'T';}\t\n\t\telse if( output_str==\"10100\") { out += 'U';}\t\n\t\telse if( output_str==\"10101\") { out += 'V';}\t\n\t\telse if( output_str==\"10110\") { out += 'W';}\t\n\t\telse if( output_str==\"10111\") { out += 'X';}\t\n\t\telse if( output_str==\"11000\") { out += 'Y';}\t\n\t\telse if( output_str==\"11001\") { out += 'Z';}\t\n\t\telse if( output_str==\"11010\") { out += ' ';}\t\n\t\telse if( output_str==\"11011\") { out += '.';}\t\n\t\telse if( output_str==\"11100\") { out += ',';}\t\n\t\telse if( output_str==\"11101\") { out += '-';}\t\n\t\telse if( output_str==\"11110\") { out += '\\'';} \n\t\telse if( output_str==\"11111\") { out += '?';}\n\t}\n\tcout << out << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <string>\nusing namespace std;\n\nint main(){\n  map<char,string> data1;\n  map<string,char> data2;\n\n  data1[' ']=\"101\";\n  data1['\\'']=\"000000\";\n  data1[',']=\"000011\";\n  data1['-']=\"10010001\";\n  data1['.']=\"010001\";\n  data1['?']=\"000001\";\n  data1['A']=\"100101\";\n  data1['B']=\"10011010\";\n  data1['C']=\"0101\";\n  data1['D']=\"0001\";\n  data1['E']=\"110\";\n  data1['F']=\"01001\";\n  data1['G']=\"10011011\";\n  data1['H']=\"010000\";\n  data1['I']=\"0111\";\n  data1['J']=\"10011000\";\n  data1['K']=\"0110\";\n  data1['L']=\"00100\";\n  data1['M']=\"10011001\";\n  data1['N']=\"10011110\";\n  data1['O']=\"00101\";\n  data1['P']=\"111\";\n  data1['Q']=\"10011111\";\n  data1['R']=\"1000\";\n  data1['S']=\"00110\";\n  data1['T']=\"00111\";\n  data1['U']=\"10011100\";\n  data1['V']=\"10011101\";\n  data1['W']=\"000010\";\n  data1['X']=\"10010010\";\n  data1['Y']=\"10010011\";\n  data1['Z']=\"10010000\";\n\n  data2[\"00000\"]='A';\n  data2[\"00001\"]='B';\n  data2[\"00010\"]='C';\n  data2[\"00011\"]='D';\n  data2[\"00100\"]='E';\n  data2[\"00101\"]='F';\n  data2[\"00110\"]='G';\n  data2[\"00111\"]='H';\n  data2[\"01000\"]='I';\n  data2[\"01001\"]='J';\n  data2[\"01010\"]='K';\n  data2[\"01011\"]='L';\n  data2[\"01100\"]='M';\n  data2[\"01101\"]='N';\n  data2[\"01110\"]='O';\n  data2[\"01111\"]='P';\n  data2[\"10000\"]='Q';\n  data2[\"10001\"]='R';\n  data2[\"10010\"]='S';\n  data2[\"10011\"]='T';\n  data2[\"10100\"]='U';\n  data2[\"10101\"]='V';\n  data2[\"10110\"]='W';\n  data2[\"10111\"]='X';\n  data2[\"11000\"]='Y';\n  data2[\"11001\"]='Z';\n  data2[\"11010\"]=' ';\n  data2[\"11011\"]='.';\n  data2[\"11100\"]=',';\n  data2[\"11101\"]='-';\n  data2[\"11110\"]='\\'';\n  data2[\"11111\"]='?';\n\n  while(1){\n    string  input=\"\";\n    string ans=\"\";\n\n    if(!getline(cin,input)) break;\n    \n    for(int i=0;;i++){\n      if(input[i]=='\\0') break;\n      ans+=data1[input[i]];\n    }\n    \n    ans+='!';\n    int i, count=0;\n    \n    while(1){\n      string temp=\"\";\n      for(i=0;i<5;i++, count++){\n\tif(ans[count]=='!') {\n\t  if(i!=0){\n\t    for(int j=4;;j--){\n\t      temp+='0';\n\t      if(i==j) break;\n\t    }\n\t  }\n\t  break;\n\t}\n\ttemp+=ans[count];\n      }\n      cout << data2[temp];\n      if(ans[count]=='!') break;\n    }\n    \n    cout << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <sstream>\n#include <algorithm>\n#include <math.h>\n#include <map>\n#include <functional>\n#include <iomanip>\n#include <vector>\n#include <queue>\n#include <set>\n#include <typeinfo>\n#define PI 3.14159265359\n#define INF 99999999;\n#define rep(i, n) for(int i=0; i<n; i++)\n#define REP(n) rep(i, n)\n#define EPS 1e-10\ntypedef long long ll;\nusing namespace std;\ntypedef pair<int, int> P;\n\ndouble distanceAB(double xa, double ya, double xb, double yb);\n\n/*\nclass Target\n{\npublic:\n\tvector <string> draw(int n)\n\t{\n\n\t}\n};\n*/\n\n\n\nint main()\n{\n\tstring str;\n\tmap<char, string> tbl;\n\t\n\t  tbl[' '] = \"101\";\n\t  tbl['\\''] = \"000000\";\n\t  tbl[','] = \"000011\";\n\t  tbl['-'] = \"10010001\";\n\t  tbl['.'] = \"010001\";\n\t  tbl['?'] = \"000001\";\n\t  tbl['A'] = \"100101\";\n\t  tbl['B'] = \"10011010\";\n\t  tbl['C'] = \"0101\";\n\t  tbl['D'] = \"0001\";\n\t  tbl['E'] = \"110\";\n\t  tbl['F'] = \"01001\";\n\t  tbl['G'] = \"10011011\";\n\t  tbl['H'] = \"010000\";\n\t  tbl['I'] = \"0111\";\n\t  tbl['J'] = \"10011000\";\n\t  tbl['K'] = \"0110\";\n\t  tbl['L'] = \"00100\";\n\t  tbl['M'] = \"10011001\";\n\t  tbl['N'] = \"10011110\";\n\t  tbl['O'] = \"00101\";\n\t  tbl['P'] = \"111\";\n\t  tbl['Q'] = \"10011111\";\n\t  tbl['R'] = \"1000\";\n\t  tbl['S'] = \"00110\";\n\t  tbl['T'] = \"00111\";\n\t  tbl['U'] = \"10011100\";\n\t  tbl['V'] = \"10011101\";\n\t  tbl['W'] = \"000010\";\n\t  tbl['X'] = \"10010010\";\n\t  tbl['Y'] = \"10010011\";\n\t  tbl['Z'] = \"10010000\";\n\t\n\tmap<string, char> tbl2;\n\t\n\t  tbl2[\"00000\"] = 'A';\n\t  tbl2[\"00001\"] = 'B';\n\t  tbl2[\"00010\"] = 'C';\n\t  tbl2[\"00011\"] = 'D';\n\t  tbl2[\"00100\"] = 'E';\n\t  tbl2[\"00101\"] = 'F';\n\t  tbl2[\"00110\"] = 'G';\n\t  tbl2[\"00111\"] = 'H';\n\t  tbl2[\"01000\"] = 'I';\n\t  tbl2[\"01001\"] = 'J';\n\t  tbl2[\"01010\"] = 'K';\n\t  tbl2[\"01011\"] = 'L';\n\t  tbl2[\"01100\"] = 'M';\n\t  tbl2[\"01101\"] = 'N';\n\t  tbl2[\"01110\"] = 'O';\n\t  tbl2[\"01111\"] = 'P';\n\t  tbl2[\"10000\"] = 'Q';\n\t  tbl2[\"10001\"] = 'R';\n\t  tbl2[\"10010\"] = 'S';\n\t  tbl2[\"10011\"] = 'T';\n\t  tbl2[\"10100\"] = 'U';\n\t  tbl2[\"10101\"] = 'V';\n\t  tbl2[\"10110\"] = 'W';\n\t  tbl2[\"10111\"] = 'X';\n\t  tbl2[\"11000\"] = 'Y';\n\t  tbl2[\"11001\"] = 'Z';\n\t  tbl2[\"11010\"] = ' ';\n\t  tbl2[\"11011\"] = '.';\n\t  tbl2[\"11100\"] = ',';\n\t  tbl2[\"11101\"] = '-';\n\t  tbl2[\"11110\"] = '\\'';\n\t  tbl2[\"11111\"] = '?';\n\t\n\twhile (getline(cin, str))\n\t{\n\t\tstring code = \"\";\n\t\tstring res = \"\";\n\t\t\n\t\tREP(str.length()) code += tbl[str[i]];\n\t\tint len = code.length();\n\t\twhile (code.length() % 5 != 0) code += \"0\";\n\t\t\n\t\twhile (code.length() > 0)\n\t\t{\n\t\t\tstring temp = code.substr(0, 5);\n\t\t\tres += tbl2[temp];\n\t\t\tcode = code.substr(5);\n\t\t}\n\t\t\n\t\tcout << res << endl;\n\t}\n\t\n\treturn 0;\n}\n\n\n\ndouble distanceAB(double xa, double ya, double xb, double yb)\n{\n\treturn sqrt((xb-xa)*(xb-xa) + (yb-ya)*(yb-ya));\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<string>\n#include<iostream>\n#include<queue>\n#include<map>\n#include<set>\n#include<complex>\n#include<stack>\n#include<cmath>\n  \nusing namespace std;\n  \n#define reps(i,f,n) for(int i=f;i<int(n);i++)\n#define rep(i,n) reps(i,0,n)\n\n\n\nint main(){\n\tstring cc[333];\n\t\n\tcc[' ']=\"101\";\n\tcc['\\'']=\"000000\";\n\tcc[',']=\"000011\";\n\tcc['-']=\"10010001\";\n\tcc['.']=\"010001\";\n\tcc['?']=\"000001\";\n\t\n\tcc['A']=\"100101\";\n\tcc['B']=\"10011010\";\n\t\n\tcc['C']=\"0101\";\n\tcc['D']=\"0001\";\n\tcc['E']=\"110\";\n\tcc['F']=\"01001\";\n\tcc['G']=\"10011011\";\n\tcc['H']=\"010000\";\n\tcc['I']=\"0111\";\n\tcc['J']=\"10011000\";\n\t\n\tcc['K']=\"0110\";\n\tcc['L']=\"00100\";\n\tcc['M']=\"10011001\";\n\tcc['N']=\"10011110\";\n\tcc['O']=\"00101\";\n\tcc['P']=\"111\";\n\tcc['Q']=\"10011111\";\n\tcc['R']=\"1000\";\n\t\n\tcc['S']=\"00110\";\n\tcc['T']=\"00111\";\n\tcc['U']=\"10011100\";\n\tcc['V']=\"10011101\";\n\tcc['W']=\"000010\";\n\tcc['X']=\"10010010\";\n\tcc['Y']=\"10010011\";\n\tcc['Z']=\"10010000\";\n\t\n\t\n\tmap<int,char> dd;\n\trep(i,26){\n\t\tdd[i]='A'+i;\n\t}\n\tdd[26]=' ';\n\tdd[27]='.';\n\tdd[28]=',';\n\tdd[29]='-';\n\tdd[30]='\\'';\n\tdd[31]='?';\n\t\n\t\n\tstring str=\"\";\n\tstring in;\n\twhile(1){\n\t\tgetline(cin,in);\n\t\tif(cin.eof())break;\n\t\tif(str.size()!=0)str+=\" \";\n\t\tstr += in;\n\t}\n\t\n\t\n\tstring conv=\"\";\n\trep(i,str.size()){\n\t\tconv += cc[str[i]];\n\t}\n\t\n\twhile(conv.size()%5!=0){\n\t\tconv += \"0\";\n\t}\n\tstring ans;\n\t\n\tfor(int i=0;i<conv.size();i+=5){\n\t\t\n\t\tint num = 0;\n\t\trep(j,5){\n\t\t\tnum += (conv[i+j]-'0')*(1<<(4-j));\n\t\t}\n\t\t\n\t\tans += dd[num];\n\t}\n\t\n\tcout<<ans<<endl;\n\t\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\nusing namespace std;\nint main(){\n  map<char,string> t;\n  t[' '] = \"101\";\n  t['\\''] = \"000000\";\n  t[','] = \"000011\";\n  t['-'] = \"10010001\";\n  t['.'] = \"010001\";\n  t['?'] = \"000001\";\n  t['A'] = \"100101\";\n  t['B'] = \"10011010\";\n  t['C'] = \"0101\";\n  t['D'] = \"0001\";\n  t['E'] = \"110\";\n  t['F'] = \"01001\";\n  t['G'] = \"10011011\";\n  t['H'] = \"010000\";\n  t['I'] = \"0111\";\n  t['J'] = \"10011000\";\n  t['K'] = \"0110\";\n  t['L'] = \"00100\";\n  t['M'] = \"10011001\";\n  t['N'] = \"10011110\";\n  t['O'] = \"00101\";\n  t['P'] = \"111\";\n  t['Q'] = \"10011111\";\n  t['R'] = \"1000\";\n  t['S'] = \"00110\";\n  t['T'] = \"00111\";\n  t['U'] = \"10011100\";\n  t['V'] = \"10011101\";\n  t['W'] = \"000010\";\n  t['X'] = \"10010010\";\n  t['Y'] = \"10010011\";\n  t['Z'] = \"10010000\";\n  map<string,char> t2;\n  t2[\"00000\"] = 'A';\n  t2[\"00001\"] = 'B';\n  t2[\"00010\"] = 'C';\n  t2[\"00011\"] = 'D';\n  t2[\"00100\"] = 'E';\n  t2[\"00101\"] = 'F';\n  t2[\"00110\"] = 'G';\n  t2[\"00111\"] = 'H';\n  t2[\"01000\"] = 'I';\n  t2[\"01001\"] = 'J';\n  t2[\"01010\"] = 'K';\n  t2[\"01011\"] = 'L';\n  t2[\"01100\"] = 'M';\n  t2[\"01101\"] = 'N';\n  t2[\"01110\"] = 'O';\n  t2[\"01111\"] = 'P';\n  t2[\"10000\"] = 'Q';\n  t2[\"10001\"] = 'R';\n  t2[\"10010\"] = 'S';\n  t2[\"10011\"] = 'T';\n  t2[\"10100\"] = 'U';\n  t2[\"10101\"] = 'V';\n  t2[\"10110\"] = 'W';\n  t2[\"10111\"] = 'X';\n  t2[\"11000\"] = 'Y';\n  t2[\"11001\"] = 'Z';\n  t2[\"11010\"] = ' ';\n  t2[\"11011\"] = '.';\n  t2[\"11100\"] = ',';\n  t2[\"11101\"] = '-';\n  t2[\"11110\"] = '\\'';\n  t2[\"11111\"] = '?';\n  string s;\n  while(getline(cin,s)){\n    string x;\n    for(int i=0; i<s.size(); i++) x+=t[s[i]];\n    for(;x.size()%5;) x+=\"0\";\n    for(int i=0; i<x.size(); i+=5) cout <<t2[x.substr(i,5)];\n    cout <<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n\n\nint main()\n{\n\tstd::map<char,std::string> enc1;\n\tenc1[' ']  = \"101\";\n\tenc1['\\''] = \"000000\";\n\tenc1[',']  = \"000011\";\n\tenc1['-']  = \"10010001\";\n\tenc1['.']  = \"010001\";\n\tenc1['?']  = \"000001\";\n\tenc1['A']  = \"100101\";\n\tenc1['B']  = \"10011010\";\n\tenc1['C']  = \"0101\";\n\tenc1['D']  = \"0001\";\n\tenc1['E']  = \"110\";\n\tenc1['F']  = \"01001\";\n\tenc1['G']  = \"10011011\";\n\tenc1['H']  = \"010000\";\n\tenc1['I']  = \"0111\";\n\tenc1['J']  = \"10011000\";\n\tenc1['K']  = \"0110\";\n\tenc1['L']  = \"00100\";\n\tenc1['M']  = \"10011001\";\n\tenc1['N']  = \"10011110\";\n\tenc1['O']  = \"00101\";\n\tenc1['P']  = \"111\";\n\tenc1['Q']  = \"10011111\";\n\tenc1['R']  = \"1000\";\n\tenc1['S']  = \"00110\";\n\tenc1['T']  = \"00111\";\n\tenc1['U']  = \"10011100\";\n\tenc1['V']  = \"10011101\";\n\tenc1['W']  = \"000010\";\n\tenc1['X']  = \"10010010\";\n\tenc1['Y']  = \"10010011\";\n\tenc1['Z']  = \"10010000\";\n\t\n\tstd::map<std::string,char> enc2;\n\tenc2[\"00000\"] = 'A';\n\tenc2[\"00001\"] = 'B';\n\tenc2[\"00010\"] = 'C';\n\tenc2[\"00011\"] = 'D';\n\tenc2[\"00100\"] = 'E';\n\tenc2[\"00101\"] = 'F';\n\tenc2[\"00110\"] = 'G';\n\tenc2[\"00111\"] = 'H';\n\tenc2[\"01000\"] = 'I';\n\tenc2[\"01001\"] = 'J';\n\tenc2[\"01010\"] = 'K';\n\tenc2[\"01011\"] = 'L';\n\tenc2[\"01100\"] = 'M';\n\tenc2[\"01101\"] = 'N';\n\tenc2[\"01110\"] = 'O';\n\tenc2[\"01111\"] = 'P';\n\tenc2[\"10000\"] = 'Q';\n\tenc2[\"10001\"] = 'R';\n\tenc2[\"10010\"] = 'S';\n\tenc2[\"10011\"] = 'T';\n\tenc2[\"10100\"] = 'U';\n\tenc2[\"10101\"] = 'V';\n\tenc2[\"10110\"] = 'W';\n\tenc2[\"10111\"] = 'X';\n\tenc2[\"11000\"] = 'Y';\n\tenc2[\"11001\"] = 'Z';\n\tenc2[\"11010\"] = ' ';\n\tenc2[\"11011\"] = '.';\n\tenc2[\"11100\"] = ',';\n\tenc2[\"11101\"] = '-';\n\tenc2[\"11110\"] = '\\'';\n\tenc2[\"11111\"] = '?';\n\t\n\tstd::string buf;\n\twhile (std::getline(std::cin, buf)) {\n\t\tstd::string after_enc1 = \"\";\n\t\tfor (int i=0; i<buf.length(); i++) {\n\t\t\tafter_enc1 += enc1[buf[i]];\n\t\t}\n\t\tstd::string after_enc2 = \"\";\n\t\tfor (int offset=0; offset<after_enc1.length(); offset+=5) {\n\t\t\tstd::string tmp = after_enc1.substr(offset, 5);\n\t\t\twhile (tmp.length()<5) tmp += \"0\";\n\t\t\tafter_enc2 += enc2[tmp];\n\t\t}\n\t\tstd::cout << after_enc2 << std::endl;\n\t}\n\n\treturn 0;\n}\n\t\t\t\n\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define r(i,n) for(int i=0;i<n;i++)\nusing namespace std;\nmap<char,string>m;\nint main(){\nm['A']=\"100101\";\nm['B']=\"10011010\";\nm['C']=\"0101\";\nm['D']=\"0001\";\nm['E']=\"110\";\nm['F']=\"01001\";\nm['G']=\"10011011\";\nm['H']=\"010000\";\nm['I']=\"0111\";\nm['J']=\"10011000\";\nm['K']=\"0110\";\nm['L']=\"00100\";\nm['M']=\"10011001\";\nm['N']=\"10011110\";\nm['O']=\"00101\";\nm['P']=\"111\";\nm['Q']=\"10011111\";\nm['R']=\"1000\";\nm['S']=\"00110\";\nm['T']=\"00111\";\nm['U']=\"10011100\";\nm['V']=\"10011101\";\nm['W']=\"000010\";\nm['X']=\"10010010\";\nm['Y']=\"10010011\";\nm['Z']=\"10010000\";\nm['\\'']=\"000000\";\nm[' ']=\"101\";\nm[',']=\"000011\";\nm['-']=\"10010001\";\nm['.']=\"010001\";\nm['?']=\"000001\";\n  string s;\n  while(getline(cin,s)){\n    string t;\n    r(i,s.size())t+=m[s[i]];\n    while((t.size()%5))t+='0';\n    for(int i=0;i<t.size();i+=5){\n      int p=(t[i]-'0')*16+(t[i+1]-'0')*8+(t[i+2]-'0')*4+(t[i+3]-'0')*2+(t[i+4]-'0')*1;\n      if(p<25)cout<<(char)(p+'A');\n      else if(p==25)cout<<' ';\n      else if(p==26)cout<<'.';\n      else if(p==27)cout<<',';\n      else if(p==28)cout<<'.';\n      else if(p==29)cout<<'-';\n      else if(p==30)cout<<'\\'';\n      else if(p==31)cout<<'?';\n    }\n      cout<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "/*\n\t0088:The Code A Doctor Loved\n*/\n#include\t<iostream>\n#include\t<string>\n\nusing namespace std;\n\nconst string convertList[2][32] = \n\t{\n\t\t{\n\t\t\t  \"100101\", \"10011010\",     \"0101\",     \"0001\",      \"110\",    \"01001\", \"10011011\",   \"010000\",\n\t\t\t    \"0111\", \"10011000\",     \"0110\",    \"00100\", \"10011001\", \"10011110\",    \"00101\",      \"111\",\n\t\t\t\"10011111\",     \"1000\",    \"00110\",    \"00111\", \"10011100\", \"10011101\",   \"000010\", \"10010010\",\n\t\t\t\"10010011\", \"10010000\",      \"101\",   \"000000\",   \"000011\", \"10010001\",   \"010001\",   \"000001\"\n\t\t},\n\t\t{\n\t\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\t\"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\t\"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"\n\t\t}\n\t};\n\nconst char charList[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint main(void) {\n\tstring str, buff, result;\n\t\n\tgetline(cin, str);\n\t\n\tstring::iterator str_it = str.begin();\n\twhile(str_it != str.end()) {\n\t\tfor(int i = 0; i < 32; i++) {\n\t\t\tif(*str_it == charList[i]) {\n\t\t\t\tbuff += convertList[0][i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tstr_it++;\n\t}\n\twhile( buff.size() % 5 != 0 ) {\n\t\tbuff += '0';\n\t}\n\tstring::iterator buff_it = buff.begin();\n\twhile( buff_it != buff.end() ) {\n\t\tstring buffbuff;\n\t\t\n\t\tfor(int i = 0; i < 5; i++, buff_it++) {\n\t\t\tbuffbuff += *buff_it;\n\t\t}\n\t\tfor(int i = 0; i < 32; i++) {\n\t\t\tif(buffbuff == convertList[1][i]) {\n\t\t\t\tresult += charList[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tcout << result << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <iomanip>\n#include <queue>\n#include <set>\n#include <map>\n#include <cstdlib>\n#include <cstdio>\n#include <cmath>\n#include <bitset>\nusing namespace std;\n\n\nconst double EPS = 1e-9;\n\nint main(){\n\tstring enc[256];\n\tenc[' '] = \"101\";\n\tenc['\\''] = \"000000\";\n\tenc[','] = \"000011\";\n\tenc['-'] = \"10010001\";\n\tenc['.'] = \"010001\";\n\tenc['?'] = \"000001\";\n\tenc['A'] = \"100101\";\n\tenc['B'] = \"10011010\";\n\tenc['C'] = \"0101\";\n\tenc['D'] = \"0001\";\n\tenc['E'] = \"110\";\n\tenc['F'] = \"01001\";\n\tenc['G'] = \"10011011\";\n\tenc['H'] = \"010000\";\n\tenc['I'] = \"0111\";\n\tenc['J'] = \"10011000\";\n\tenc['K'] = \"0110\";\n\tenc['L'] = \"00100\";\n\tenc['M'] = \"10011001\";\n\tenc['N'] = \"10011110\";\n\tenc['O'] = \"00101\";\n\tenc['P'] = \"111\";\n\tenc['Q'] = \"10011111\";\n\tenc['R'] = \"1000\";\n\tenc['S'] = \"00110\";\n\tenc['T'] = \"00111\";\n\tenc['U'] = \"10011100\";\n\tenc['V'] = \"10011101\";\n\tenc['W'] = \"000010\";\n\tenc['X'] = \"10010010\";\n\tenc['Y'] = \"10010011\";\n\tenc['Z'] = \"10010000\";\n\n\tstring d = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\tmap<string, char> dec;\n\tfor(int i = 0; i < 32; i++){\n\t\tdec[bitset<5>(i).to_string()] = d[i];\n\t}\n\n\tmap<string, char>::iterator it = dec.begin();\n\tfor(; it != dec.end(); it++){\n\t\tcout << it->second << ':' << it->first << endl;\n\t}\n\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tstring e = \"\";\n\t\tfor(int i = 0; i < s.size(); i++){\n\t\t\te += enc[s[i]];\n\t\t}\n\t\twhile(e.size()%5 != 0){\n\t\t\te += \"0\";\n\t\t}\n\t\tfor(int i = 0; i < e.size(); i+=5){\n\t\t\tcout << dec[e.substr(i, 5)];\n\t\t}\n\t\tcout << endl;\n\t}\n\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<queue>\n#include<map>\n#include<string.h>\n#include<stdio.h>\n#include<math.h>\n#include<functional>\n#include <memory.h>\n#include <stack>\n\n\n\nusing namespace std;\n\n\n\nint main() {\n    string s1;\n    while(getline(cin,s1)){\n        string s2;\n        for(int i=0; i<s1.length(); i++){\n            if(s1[i]==' ')s2+=\"101\";\n            if(s1[i]=='\\'')s2+=\"000000\";\n            if(s1[i]==',')s2+=\"000011\";\n            if(s1[i]=='-')s2+=\"10010001\";\n            if(s1[i]=='.')s2+=\"010001\";\n            if(s1[i]=='?')s2+=\"000001\";\n            if(s1[i]=='A')s2+=\"100101\";\n            if(s1[i]=='B')s2+=\"10011010\";\n            if(s1[i]=='C')s2+=\"0101\";\n            if(s1[i]=='D')s2+=\"0001\";\n            if(s1[i]=='E')s2+=\"110\";\n            if(s1[i]=='F')s2+=\"01001\";\n            if(s1[i]=='G')s2+=\"10011011\";\n            if(s1[i]=='H')s2+=\"010000\";\n            if(s1[i]=='I')s2+=\"0111\";\n            if(s1[i]=='J')s2+=\"10011000\";\n            if(s1[i]=='K')s2+=\"0110\";\n            if(s1[i]=='L')s2+=\"00100\";\n            if(s1[i]=='M')s2+=\"10011001\";\n            if(s1[i]=='N')s2+=\"10011110\";\n            if(s1[i]=='O')s2+=\"00101\";\n            if(s1[i]=='P')s2+=\"111\";\n            if(s1[i]=='Q')s2+=\"10011111\";\n            if(s1[i]=='R')s2+=\"1000\";\n            if(s1[i]=='S')s2+=\"00110\";\n            if(s1[i]=='T')s2+=\"00111\";\n            if(s1[i]=='U')s2+=\"10011100\";\n            if(s1[i]=='V')s2+=\"10011101\";\n            if(s1[i]=='W')s2+=\"000010\";\n            if(s1[i]=='X')s2+=\"10010010\";\n            if(s1[i]=='Y')s2+=\"10010011\";\n            if(s1[i]=='Z')s2+=\"10010000\";\n            \n        }\n        for(int i=0; i<s2.length()%5; i++){\n            s2+='0';\n        }\n        //cout<<s2<<endl;;\n        \n        string s3;\n        \n        \n        for(int i=0; i<s2.length()/5; i++){\n            string s;\n            for(int j=0; j<5; j++){\n                s+=s2[i*5+j];\n            }\n            \n            if(s==\"00000\")s3+=\"A\";\n            if(s==\"00001\")s3+=\"B\";\n            if(s==\"00010\")s3+=\"C\";\n            if(s==\"00011\")s3+=\"D\";\n            if(s==\"00100\")s3+=\"E\";\n            if(s==\"00101\")s3+=\"F\";\n            if(s==\"00110\")s3+=\"G\";\n            if(s==\"00111\")s3+=\"H\";\n            if(s==\"01000\")s3+=\"I\";\n            if(s==\"01001\")s3+=\"J\";\n            if(s==\"01010\")s3+=\"K\";\n            if(s==\"01011\")s3+=\"L\";\n            if(s==\"01100\")s3+=\"M\";\n            if(s==\"01101\")s3+=\"N\";\n            if(s==\"01110\")s3+=\"O\";\n            if(s==\"01111\")s3+=\"P\";\n            if(s==\"10000\")s3+=\"Q\";\n            if(s==\"10001\")s3+=\"R\";\n            if(s==\"10010\")s3+=\"S\";\n            if(s==\"10011\")s3+=\"T\";\n            if(s==\"10100\")s3+=\"U\";\n            if(s==\"10101\")s3+=\"V\";\n            if(s==\"10110\")s3+=\"W\";\n            if(s==\"10111\")s3+=\"X\";\n            if(s==\"11000\")s3+=\"Y\";\n            if(s==\"11001\")s3+=\"Z\";\n            if(s==\"11010\")s3+=\" \";\n            if(s==\"11011\")s3+=\".\";\n            if(s==\"11100\")s3+=\",\";\n            if(s==\"11101\")s3+=\"-\";\n            if(s==\"11110\")s3+=\"'\";\n            if(s==\"11111\")s3+=\"?\";\n\n        }\n        \n        cout<<s3<<endl;\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\nusing namespace std;\n\nmap <char,string> t;\nvoid make_table(){\n  t[' '] =\"101\";\n  t['\\'']=\"000000\";\n  t[','] =\"000011\";\n  t['-'] =\"10010001\";\n  t['.'] =\"010001\";\n  t['?'] =\"000001\";\n  t['A'] =\"100101\";\n  t['B'] =\"10011010\";\n  \n  t['C'] =\"0101\";\n  t['D'] =\"0001\";\n  t['E'] =\"110\";\n  t['F'] =\"01001\";\n  t['G'] =\"10011011\";\n  t['H'] =\"010000\";\n  t['I'] =\"0111\";\n  t['J'] =\"10011000\";\n\n  t['K'] =\"0110\";\n  t['L'] =\"00100\";\n  t['M'] =\"1001100\";\n  t['N'] =\"10011110\";\n  t['O'] =\"00101\";\n  t['P'] =\"111\";\n  t['Q'] =\"10011111\";\n  t['R'] =\"1000\";\n\n  t['S'] =\"00110\";\n  t['T'] =\"00111\";\n  t['U'] =\"10011100\";\n  t['V'] =\"10011101\";\n  t['W'] =\"000010\";\n  t['X'] =\"10010010\";\n  t['Y'] =\"10010011\";\n  t['Z'] =\"10010000\";\n}\nchar ch_table[]={' ','.',',','-','\\'','?'};\n\nchar s2ch(string str){\n  int num=0;\n  for(int i=0;i<5;i++){\n    num*=2;\n    num+=str[i]-'0';\n  }\n  if(num<=25)return 'A'+num;\n  return ch_table[num-26];\n}\n\nint main(){\n  int flg=0;\n  string str,A,B;\n  make_table();\n\n  B=\"\";\n  while(getline(cin,str)){\n    if(flg==0)B+=str;\n    else B=B+\" \"+str;\n    flg=1;\n  }\n\n  A=\"\";\n  for(int i=0;i<(int)B.size();i++){\n    A+=t[B[i]];\n  }\n  \n  while(A.size()%5!=0)A+=\"0\";\n  \n  for(int i=0;i<(int)A.size();i+=5){\n    //cout<<A.substr(i,5)<<\" \";\n    cout<<s2ch(A.substr(i,5));\n  }\n  cout<<endl;\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n\n  char in;\n  string wd = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string bd[32] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\" };\n  string od = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n  string k = \"\";\n\n  string input;\n  getline( cin, input );\n\n  for( int l = 0; l < input.size(); l++ ) {\n    in = input[l];\n    for ( int i = 0; i < 32; i++ ) {\n      if ( in == wd[i] ) {\n\tk += bd[i];\n\t//\tcout << bd[i];\n\tif ( k.size() >= 5 ) {\n\t  int x = 0;\n\t  for ( int j = 0; j < 5; j++ ) {\n\t    x = x * 2 + k[j] - '0';\n\t  }\n\t  cout << od[x];\n\t  string n = \"\";\n\t  for ( int j = 5; j < k.size(); j++ ) {\n\t    n += k[j];\n\t  }\n\t  k = n;\n\t}\n      }\n    }\n\n  }\n  if ( k != \"\" ) {\n    k += \"00000\";\n    int x = 0;\n    for ( int j = 0; j < 5; j++ ) {\n      x = x * 2 + k[j] - '0';\n    }\n    cout << od[x];\n  }\n  cout << endl;\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n\tmap<char,string>P;\n\n\tP[32]=\"101\";\n\tP[39]=\"000000\";\n\tP[44]=\"000011\";\n\tP[45]=\"10010001\";\n\tP[46]=\"010001\";\n\tP[63]=\"000001\";\n\tP[65]=\"100101\";//A\n\tP[66]=\"10011010\";\n\tP[67]=\"0101\";\n\tP[68]=\"0001\";\n\tP[69]=\"110\";\n\tP[70]=\"01001\";\n\tP[71]=\"10011011\";\n\tP[72]=\"010000\";\n\tP[73]=\"0111\";\n\tP[74]=\"10011000\";\n\tP[75]=\"0110\";\n\tP[76]=\"00100\";\n\tP[77]=\"10011001\";\n\tP[78]=\"10011110\";\n\tP[79]=\"00101\";\n\tP[80]=\"111\";\n\tP[81]=\"10011111\";\n\tP[82]=\"1000\";\n\tP[83]=\"00110\";\n\tP[84]=\"00111\";\n\tP[85]=\"10011100\";\n\tP[86]=\"10011101\";\n\tP[87]=\"000010\";\n\tP[88]=\"10010010\";\n\tP[89]=\"10010011\";\n\tP[90]=\"10010000\";\n\n\tmap<string,string>PP;\n\tPP[\"00000\"]='A';\n\tPP[\"00001\"]='B';\n\tPP[\"00010\"]='C';\n\tPP[\"00011\"]='D';\n\tPP[\"00100\"]='E';\n\tPP[\"00101\"]='F';\n\tPP[\"00110\"]='G';\n\tPP[\"00111\"]='H';\n\tPP[\"01000\"]='I';\n\tPP[\"01001\"]='J';\n\tPP[\"01010\"]='K';\n\tPP[\"01011\"]='L';\n\tPP[\"01100\"]='M';\n\tPP[\"01101\"]='N';\n\tPP[\"01110\"]='O';\n\tPP[\"01111\"]='P';\n\tPP[\"10000\"]='Q';\n\tPP[\"10001\"]='R';\n\tPP[\"10010\"]='S';\n\tPP[\"10011\"]='T';\n\tPP[\"10100\"]='U';\n\tPP[\"10101\"]='V';\n\tPP[\"10110\"]='W';\n\tPP[\"10111\"]='X';\n\tPP[\"11000\"]='Y';\n\tPP[\"11001\"]='Z';\n\tPP[\"11010\"]=' ';\n\tPP[\"11011\"]='.';\n\tPP[\"11100\"]=',';\n\tPP[\"11101\"]='-';\n\tPP[\"11110\"]=',';\n\tPP[\"11111\"]='?';\n\n\n\n\n\tstring str;\n\tstring set_str;\n\tstring keep;\n\tstring ans_str;\n\tint count=0;\n\n\twhile(getline(cin,str))\n\t{\n\t\tfor(int i=0;i<str.length();i++)\n\t\t{\n\t\t\tset_str += P[str[i]];\n\t\t}\n\t\twhile(set_str.length()%5)set_str+='0';\n\t\tfor(int i=0;i<set_str.length();i++)\n\t\t{\n\t\t\tans_str += set_str[i];\n\t\t\tcount++;\n\t\t\tif(!(count%5) && count)\n\t\t\t{\n\t\t\t\tcout << PP[ans_str];\n\t\t\t\tans_str.erase(ans_str.begin(),ans_str.end());\n\t\t\t}\n\t\t}\n\t\tcout << endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nmap<char, string> mcs;\nmap<string, char> msc;\nint p[] = {1, 2, 4, 8, 16};\n\nvoid init() {\n    mcs[' '] = \"101\";\n    mcs['\\''] = \"000000\";\n    mcs[','] = \"000011\";\n    mcs['-'] = \"10010001\";\n    mcs['.'] = \"010001\";\n    mcs['?'] = \"000001\";\n    mcs['A'] = \"100101\";\n    mcs['B'] = \"10011010\";\n    mcs['C'] = \"0101\";\n    mcs['D'] = \"0001\";\n    mcs['E'] = \"110\";\n    mcs['F'] = \"01001\";\n    mcs['G'] = \"10011011\";\n    mcs['H'] = \"010000\";\n    mcs['I'] = \"0111\";\n    mcs['J'] = \"10011000\";\n    mcs['K'] = \"0110\";\n    mcs['L'] = \"00100\";\n    mcs['M'] = \"10011001\";\n    mcs['N'] = \"10011110\";\n    mcs['O'] = \"00101\";\n    mcs['P'] = \"111\";\n    mcs['Q'] = \"10011111\";\n    mcs['R'] = \"1000\";\n    mcs['S'] = \"00110\";\n    mcs['T'] = \"00111\";\n    mcs['U'] = \"10011100\";\n    mcs['V'] = \"10011101\";\n    mcs['W'] = \"000010\";\n    mcs['X'] = \"10010010\";\n    mcs['Y'] = \"10010011\";\n    mcs['Z'] = \"10010000\";\n\n    msc[\"11010\"] = ' ';\n    msc[\"11011\"] = '.';\n    msc[\"11100\"] = ',';\n    msc[\"11101\"] = '-';\n    msc[\"11110\"] = '\\'';\n    msc[\"11111\"] = '?';\n}\n\nint main() {\n    init();\n\n    string s;\n    while (getline(cin, s)) {\n        string ns = \"\";\n        for (int i = 0; i < s.size(); i++) ns += mcs[s[i]];\n        while (ns.size() % 5) ns += \"0\";\n\n        string ans = \"\";\n        while (ns.size()) {\n            string ss = ns.substr(0, 5);\n            if (msc.find(ss) != msc.end()) ans += msc[ss];\n            else {\n                int sum = 0;\n                reverse(ss.begin(), ss.end());\n                for (int i = 0; i < 5; i++)\n                    sum += p[i] * (ss[i] - '0');\n                ans += (sum + 'A');\n            }\n            ns = ns.substr(5, ns.size() - 5);\n        }\n\n        cout << ans << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long int ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<pair<int, int> > vii;\n#define rrep(i, m, n) for(int (i)=(m); (i)<(n);  (i)++)\n#define erep(i, m, n) for(int (i)=(m); (i)<=(n); (i)++)\n#define  rep(i, n)    for(int (i)=0; (i)<(n);  (i)++)\n#define rrev(i, m, n) for(int (i)=(n)-1; (i)>=(m); (i)--)\n#define erev(i, m, n) for(int (i)=(n); (i)>=(m); (i)--)\n#define  rev(i, n)    for(int (i)=(n)-1; (i)>=0; (i)--)\n#define vrep(i, c)    for(__typeof((c).begin())i=(c).begin(); i!=(c).end(); i++)\n#define  ALL(v)       (v).begin(), (v).end()\n#define mp            make_pair\n#define pb            push_back\ntemplate<class T, class S> inline bool minup(T& m, S x){ return m>(T)x ? (m=(T)x, true) : false; }\ntemplate<class T, class S> inline bool maxup(T& m, S x){ return m<(T)x ? (m=(T)x, true) : false; }\n\nconst int    INF = 1000000000;\nconst ll     MOD = 1000000007LL;\nconst double EPS = 1E-12;\n\nmap<char, string> en;\nmap<string, string> de;\nstring s, t;\nstring in;\nint n;\n\nvoid encode()\n{\n  en[' '] = \"101\";\n  en['\\''] = \"000000\";\n  en[','] = \"000011\";\n  en['-'] = \"10010001\";\n  en['.'] = \"010001\";\n  en['?'] = \"000001\";\n  en['A'] = \"100101\";\n  en['B'] = \"10011010\";\n  en['C'] = \"0101\";\n  en['D'] = \"0001\";\n  en['E'] = \"110\";\n  en['F'] = \"01001\";\n  en['G'] = \"10011011\";\n  en['H'] = \"010000\";\n  en['I'] = \"0111\";\n  en['J'] = \"10011000\";\n  en['K'] = \"0110\";\n  en['L'] = \"00100\";\n  en['M'] = \"10011001\";\n  en['N'] = \"10011110\";\n  en['O'] = \"00101\";\n  en['P'] = \"111\";\n  en['Q'] = \"10011111\";\n  en['R'] = \"1000\";\n  en['S'] = \"00110\";\n  en['T'] = \"00111\";\n  en['U'] = \"10011100\";\n  en['V'] = \"10011101\";\n  en['W'] = \"000010\";\n  en['X'] = \"10010010\";\n  en['Y'] = \"10010011\";\n  en['Z'] = \"10010000\";\n}\n\nvoid decode()\n{\n  de[\"00000\"] = \"A\";\n  de[\"00001\"] = \"B\";\n  de[\"00010\"] = \"C\";\n  de[\"00011\"] = \"D\";\n  de[\"00100\"] = \"E\";\n  de[\"00101\"] = \"F\";\n  de[\"00110\"] = \"G\";\n  de[\"00111\"] = \"H\";\n  de[\"01000\"] = \"I\";\n  de[\"01001\"] = \"J\";\n  de[\"01010\"] = \"K\";\n  de[\"01011\"] = \"L\";\n  de[\"01100\"] = \"M\";\n  de[\"01101\"] = \"N\";\n  de[\"01110\"] = \"O\";\n  de[\"01111\"] = \"P\";\n  de[\"10000\"] = \"Q\";\n  de[\"10001\"] = \"R\";\n  de[\"10010\"] = \"S\";\n  de[\"10011\"] = \"T\";\n  de[\"10100\"] = \"U\";\n  de[\"10101\"] = \"V\";\n  de[\"10110\"] = \"W\";\n  de[\"10111\"] = \"X\";\n  de[\"11000\"] = \"Y\";\n  de[\"11001\"] = \"Z\";\n  de[\"11010\"] = \" \";\n  de[\"11011\"] = \".\";\n  de[\"11100\"] = \",\";\n  de[\"11101\"] = \"-\";\n  de[\"11110\"] = \"'\";\n  de[\"11111\"] = \"?\";\n}\n\nint main()\n{\n  encode();\n  decode();\n\n  while(getline(cin, s)){\n    in += s + \" \";\n\n    rep(i, in.size()-1) t += en[in[i]];\n    n = (5 - t.size() % 5) % 5;\n    rep(i, n) t += \"0\";\n\n    n = t.size() / 5;\n    rep(i, n) cout << de[t.substr(5*i, 5)];\n    cout << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define r(i,n) for(int i=0;i<n;i++)\nusing namespace std;\nmap<char,string>m;\nint main(){\nm['A']=\"100101\";\nm['B']=\"10011010\";\nm['C']=\"0101\";\nm['D']=\"0001\";\nm['E']=\"110\";\nm['F']=\"01001\";\nm['G']=\"10011011\";\nm['H']=\"010000\";\nm['I']=\"0111\";\nm['J']=\"10011000\";\nm['K']=\"0110\";\nm['L']=\"00100\";\nm['M']=\"10011001\";\nm['N']=\"10011110\";\nm['O']=\"00101\";\nm['P']=\"111\";\nm['Q']=\"10011111\";\nm['R']=\"1000\";\nm['S']=\"00110\";\nm['T']=\"00111\";\nm['U']=\"10011100\";\nm['V']=\"10011101\";\nm['W']=\"000010\";\nm['X']=\"10010010\";\nm['Y']=\"10010011\";\nm['Z']=\"10010000\";\nm['\\'']=\"000000\";\nm[' ']=\"101\";\nm[',']=\"000011\";\nm['-']=\"10010001\";\nm['.']=\"010001\";\nm['?']=\"000001\";\n  string s;\n  while(getline(cin,s)){\n    string t;\n    r(i,s.size())t+=m[s[i]];\n    while((t.size()%5))t+='0';\n    for(int i=0;i<t.size();i+=5){\n      int p=(t[i]-'0')*16+(t[i+1]-'0')*8+(t[i+2]-'0')*4+(t[i+3]-'0')*2+(t[i+4]-'0')*1;\n      if(p<=25)cout<<(char)(p+'A');\n      else if(p==26)cout<<' ';\n      else if(p==27)cout<<'.';\n      else if(p==28)cout<<',';\n      else if(p==29)cout<<'-';\n      else if(p==30)cout<<'\\'';\n      else if(p==31)cout<<'?';\n    }\n      cout<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#define CASE(c,s) case c:return s\nusing namespace std;\n\nstring f(char c){\n\tswitch (c){\n\t\tCASE(' ', \"101\");\n\t\tCASE('\\'', \"000000\");\n\t\tCASE(',', \"000011\");\n\t\tCASE('-', \"10010001\");\n\t\tCASE('.', \"010001\");\n\t\tCASE('?', \"000001\");\n\t\tCASE('A', \"100101\");\n\t\tCASE('B', \"10011010\");\n\t\tCASE('C', \"0101\");\n\t\tCASE('D', \"0001\");\n\t\tCASE('E', \"110\");\n\t\tCASE('F', \"01001\");\n\t\tCASE('G', \"10011011\");\n\t\tCASE('H', \"010000\");\n\t\tCASE('I', \"0111\");\n\t\tCASE('J', \"10011000\");\n\t\tCASE('K', \"0110\");\n\t\tCASE('L', \"00100\");\n\t\tCASE('M', \"100110011\");\n\t\tCASE('N', \"10011110\");\n\t\tCASE('O', \"00101\");\n\t\tCASE('P', \"111\");\n\t\tCASE('Q', \"10011111\");\n\t\tCASE('R', \"1000\");\n\t\tCASE('S', \"00110\");\n\t\tCASE('T', \"00111\");\n\t\tCASE('U', \"10011100\");\n\t\tCASE('V', \"10011101\");\n\t\tCASE('W', \"000010\");\n\t\tCASE('X', \"10010010\");\n\t\tCASE('Y', \"10010011\");\n\t\tCASE('Z', \"10010000\");\n\tdefault:return \"\";\n\t}\n}\n\nint bitodec(string s){\n\tint sum=0;\n\tfor (int i = 0; i < s.size(); ++i){\n\t\tsum *= 2;\n\t\tsum += (s[i] - '0');\t\t\n\t}\n\treturn sum;\n}\n\nchar g(string s){\n\tchar c[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\treturn c[bitodec(s)];\n}\n\nint main(){\n\tstring s,r;\n\tint i;\n\n\twhile (getline(cin, s)){\n\t\ti = 0;\n\n\t\twhile (s[i] != '\\0'){\n\t\t\tr += f(s[i]);\n\t\t\t++i;\n\t\t}\n\n\t\tif (i % 5)for (int j = 4 - (i % 5); --j;)r += \"0\";\n\n\t\tfor (int j = 0; j <= r.size() / 5;++j)\n\t\t\tcout <<g(r.substr(j*5,5));\n\t\tcout << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std ;\n\n#define pb(n) push_back(n)\n#define fi first\n#define se second\n#define all(r) (r).begin(),(r).end()\n#define gsort(st,en) sort((st),(en),greater<int>())\n#define vmax(ary) *max_element(all(ary))\n#define vmin(ary) *min_element(all(ary))\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define fcout(n) cout<<fixed<<setprecision((n))\n#define scout(n) cout<<setw(n)\n#define vary(type,name,size,init) vector< type> name(size,init)\n\n#define rep(i,n) for(int i = 0; i < (int)(n);++i)\n#define REP(i,a,b) for(int i = (a);i < (int)(b);++i)\n#define repi(it,array) for(auto it = array.begin(),end = array.end(); it != end;++it)\n#define repa(n,array) for(auto &n :(array))\n\nusing ll = long long;\nusing vi = vector<int>;\nusing vl = vector<ll>;\nusing dict = map<string,int>;\nusing pii = pair<int,int> ;\n\nconstexpr int imax = ((1<<30)-1)*2+1 ;\nconstexpr int inf = 100000000;\nconstexpr double PI = acos(-1.0) ;\ndouble eps = 1e-10 ;\nconst int dy[] = {-1,0,1,0};\nconst int dx[] = {0,-1,0,1};\n\ninline bool value(int x,int y,int w,int h){\n  return (x >= 0 && x < w && y >= 0 && y < h);\n}\n\ntemplate<typename T>\nvoid Unique(vector<T> &v){\n  sort(all(v));\n  v.erase(unique(all(v)),v.end());\n}\n\ntemplate<typename T>\nT ston(string& str, T n){\n  istringstream sin(str) ;\n  T num ;\n  sin >> num ;\n  return num ;\n}\n\nvoid Ans(bool f){\n  if(f) cout << \"YES\"<<endl;\n  else cout << \"NO\"<<endl;\n}\nmap<char,string> m;\nunsigned int binToUInt(const std::string &str)\n{\n  unsigned int val = 0;\n  for(int i = 0; i < (int)str.size(); ++i) {\n    switch (str[i]) {\n      case '0':\n        val *= 2;\n        break;\n      case '1':\n        val = val * 2 + 1;\n        break;\n    }\n  }\n  return val;\n}\nint main(){\n  cin.tie(0);\n  ios::sync_with_stdio(false);\n  m[' '] = \"101\";\n  m['\\''] = \"000000\";\n  m[','] = \"000011\";\n  m['-'] = \"10010001\";\n  m['.'] = \"010001\";\n  m['?'] = \"000001\";\n  m['A'] = \"100101\";\n  m['B'] = \"10011010\";\n  m['C'] = \"0101\";\n  m['D'] = \"0001\";\n  m['E'] = \"110\";\n  m['F'] = \"01001\";\n  m['G'] = \"10011011\";\n  m['H'] = \"010000\";\n  m['I'] = \"0111\";\n  m['J'] = \"10011000\";\n  m['K'] =\"0110\";\n  m['L'] = \"00100\";\n  m['M'] = \"10011001\";\n  m['N'] = \"10011110\";\n  m['O'] = \"00101\";\n  m['P'] = \"111\";\n  m['Q'] = \"10011111\";\n  m['R'] = \"1000\";\n  m['S'] = \"00110\";\n  m['T'] = \"00111\";\n  m['U'] = \"10011100\";\n  m['V'] = \"10011101\";\n  m['W'] = \"000010\";\n  m['X'] = \"10010010\";\n  m['Y'] = \"10010011\";\n  m['Z'] = \"10010000\";\n  while(1){\n    string s,encode = \"\",encode2=\"\";\n    vector<string> decode;\n    getline(cin,s);\n    if(cin.eof())break;\n    rep(i,s.size()){\n      encode += m[s[i]];\n    }\n    while(encode.size()%5){\n      encode += \"0\";\n    }\n    rep(i,encode.size()){\n      encode2 += encode[i];\n      if((i+1)%5==0){\n        decode.pb(encode2);\n        encode2.clear();\n      }\n    }\n    string decode2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n    rep(i,decode.size()){\n      int k = binToUInt(decode[i]);\n      decode[i] = decode2[k];\n    }\n    rep(i,decode.size()){\n      cout << decode[i];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<deque>\n#include<map>\n#include<set>\n#include<string>\n#include<sstream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<cctype>\n#include<climits>\nusing namespace std;\n#define REP(i, j) for(int i = 0; i < j; i++)\n#define FOR(i, j, k) for(int i = j; i < k; i++)\n#define P pair<int, int>\nconst int INF = INT_MAX / 2;\n\nint main(){\n    map<char, string> f;\n    f[' '] = \"101\";\n    f['\\''] = \"000000\";\n    f[','] = \"000011\";\n    f['-'] = \"10010001\";\n    f['.'] = \"010001\";\n    f['?'] = \"000001\";\n    f['A'] = \"100101\";\n    f['B'] = \"10011010\";\n    f['C'] = \"0101\";\n    f['D'] = \"0001\";\n    f['E'] = \"110\";\n    f['F'] = \"01001\";\n    f['G'] = \"10011011\";\n    f['H'] = \"010000\";\n    f['I'] = \"0111\";\n    f['J'] = \"10011000\";\n    f['K'] = \"0110\";\n    f['L'] = \"00100\";\n    f['M'] = \"10011001\";\n    f['N'] = \"10011110\";\n    f['O'] = \"00101\";\n    f['P'] = \"111\";\n    f['Q'] = \"10011111\";\n    f['R'] = \"1000\";\n    f['S'] = \"00110\";\n    f['T'] = \"00111\";\n    f['U'] = \"10011100\";\n    f['V'] = \"10011101\";\n    f['W'] = \"000010\";\n    f['X'] = \"10010010\";\n    f['Y'] = \"10010011\";\n    f['Z'] = \"10010000\";\n\n    map<string, char> s;\n    s[\"00000\"] = 'A';\n    s[\"00001\"] = 'B';\n    s[\"00010\"] = 'C';\n    s[\"00011\"] = 'D';\n    s[\"00100\"] = 'E';\n    s[\"00101\"] = 'F';\n    s[\"00110\"] = 'G';\n    s[\"00111\"] = 'H';\n    s[\"01000\"] = 'I';\n    s[\"01001\"] = 'J';\n    s[\"01010\"] = 'K';\n    s[\"01011\"] = 'L';\n    s[\"01100\"] = 'M';\n    s[\"01101\"] = 'N';\n    s[\"01110\"] = 'O';\n    s[\"01111\"] = 'P';\n    s[\"10000\"] = 'Q';\n    s[\"10001\"] = 'R';\n    s[\"10010\"] = 'S';\n    s[\"10011\"] = 'T';\n    s[\"10100\"] = 'U';\n    s[\"10101\"] = 'V';\n    s[\"10110\"] = 'W';\n    s[\"10111\"] = 'X';\n    s[\"11000\"] = 'Y';\n    s[\"11001\"] = 'Z';\n    s[\"11010\"] = ' ';\n    s[\"11011\"] = '.';\n    s[\"11100\"] = ',';\n    s[\"11101\"] = '-';\n    s[\"11110\"] = '\\'';\n    s[\"11111\"] = '?';\n\n    string inp;\n    while(getline(cin, inp)){\n        string tmp = \"\";\n        REP(i, inp.length()) tmp += f[inp[i]];\n        while(tmp.size() % 5 != 0) tmp += '0';\n        string ans = \"\";\n        for(int i = 0; i < tmp.size(); i += 5) ans += s[tmp.substr(i, 5)];\n        cout <<ans <<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\nusing namespace std;\n\nstring to[] = {\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\"};\n\nint main(){\n\tstring s;\n\tmap<char,string> tm;\n\tmap<string,char> fm;\n\tfor(int i = 0;i < 26;i++){\n\t\ttm[i + 'A'] = to[i];\n\t\tstring tmp = \"\";\n\t\tfor(int j = 4;j >= 0;j--) tmp += to_string((i >> j) & 1);\n\t\tfm[tmp] = i + 'A';\n\t}\n\ttm[' '] = to[26];\n\ttm['\\''] = to[27];\n\ttm[','] = to[28];\n\ttm['-'] = to[29];\n\ttm['.'] = to[30];\n\ttm['?'] = to[31];\n\tfm[\"11010\"] = ' ';\n\tfm[\"11011\"] = '.';\n\tfm[\"11100\"] = ',';\n\tfm[\"11101\"] = '-';\n\tfm[\"11110\"] = '\\'';\n\tfm[\"11111\"] = '?';\n\twhile(getline(cin,s)){\n\t\tstring t = \"\";\n\t\tfor(int i = 0;i < s.length();i++) t += tm[s[i]];\n\t\tfor(int i = (t.length() + 4) % 5 + 1;i < 5;i++) t += \"0\";\n\t\tfor(int i = 0;i < t.length() / 5;i++) cout << fm[t.substr(i * 5,5)];\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring h = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ ',-.?\";\nchar d[36] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nchar e[36][12] = {\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\"};\n\nchar conv(string s){\n    int ans = 0;\n    string::iterator it = s.begin();\n    for(int n = 0; n < 5; n++){\n        if( it == s.end() ) continue;\n        ans *= 2;\n        ans += *it - '0';\n        it++;\n    }\n    return d[ans];\n\n}\n\nint main(){\n    string s;\n    while( getline(cin, s) ){\n        string c;\n        c = string(\"\");\n        for(int i = 0; i < s.size(); i++){\n            //cout << e[h.find(s[i])] << endl;\n            c += e[h.find(s[i])];\n        }\n        c += string(4-(c.size()+4)%5, '0');\n        for(int i = 0; i < c.size()/5; i++){\n            cout << conv( c.substr(i*5, 5) );\n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<string>\n#include<cmath>\n\nusing namespace std;\n\nstring DoctorTableAD(char c){\n\tstring s;\n\tswitch( c ){\n\t\tcase ' ': s = \"101\"; break;\n\t\tcase 0x27: s = \"000000\"; break;\n\t\tcase ',': s = \"000011\"; break;\n\t\tcase '-': s = \"10010001\"; break;\n\t\tcase '.': s = \"010001\"; break;\n\t\tcase '?': s = \"000001\"; break;\n\t\tcase 'A': s = \"100101\"; break;\n\t\tcase 'B': s = \"10011010\"; break;\n\t\tcase 'C': s = \"0101\"; break;\n\t\tcase 'D': s = \"0001\"; break;\n\t\tcase 'E': s = \"110\"; break;\n\t\tcase 'F': s = \"01001\"; break;\n\t\tcase 'G': s = \"10011011\"; break;\n\t\tcase 'H': s = \"010000\"; break;\n\t\tcase 'I': s = \"0111\"; break;\n\t\tcase 'J': s = \"10011000\"; break;\n\t\tcase 'K': s = \"0110\"; break;\n\t\tcase 'L': s = \"00100\"; break;\n\t\tcase 'M': s = \"10011001\"; break;\n\t\tcase 'N': s = \"10011110\"; break;\n\t\tcase 'O': s = \"00101\"; break;\n\t\tcase 'P': s = \"111\"; break;\n\t\tcase 'Q': s = \"10011111\"; break;\n\t\tcase 'R': s = \"1000\"; break;\n\t\tcase 'S': s = \"00110\"; break;\n\t\tcase 'T': s = \"00111\"; break;\n\t\tcase 'U': s = \"10011100\"; break;\n\t\tcase 'V': s = \"10011101\"; break;\n\t\tcase 'W': s = \"000010\"; break;\n\t\tcase 'X': s = \"10010010\"; break;\n\t\tcase 'Y': s = \"10010011\"; break;\n\t\tcase 'Z': s = \"10010000\"; break;\n\t}\n\treturn s;\n}\nint myatoi(string &bin_s){\n\tint ret = 0;\n\tint i = 0;\n\twhile( i < bin_s.length() ){\n\t\tret += (int)((bin_s[i] - '0') * pow(2.0, (double)((bin_s.length() - 1) - i)));\n\t\ti++;\n\t}\n\treturn ret;\n}\nchar DoctorTableDA(string &s){\n\tint d = myatoi(s);\n\tchar ac[] = \" .,-'?\";\n\n\tfor(int i = 0; i < 'Z' - 'A' + 1; i++) if(d == i) return i + 'A';\n\tfor(int i = 0; i < sizeof(ac)/sizeof(*ac); i++) if(i + 26 == d) return ac[i];\n\treturn ' ';\n}\nstring DoctorLovedEncode(string &raw){\n\tstring s;\n\tstring ret;\n\tfor(unsigned int i = 0; i < raw.length(); i++){\n\t\ts += DoctorTableAD(raw[i]);\n\t}\n\t// padding\n\twhile( s.length() % 5 != 0 ) s += '0';\n\n\tfor(unsigned int i = 0; i < s.length() / 5; i++){\n\t\tstring subs = s.substr(i*5,5);\n\t\tret += DoctorTableDA( subs );\n\t}\n\treturn ret;\n}\n\nint main(void){\n\twhile(true){\n\t\tstring s;\n\n\t\twhile( true ){\n\t\t\tchar c;\n\t\t\tc = cin.get();\n\t\t\tif( cin.eof() ) return 0;\n\t\t\tif( c == '\\n') break;\n\t\t\telse s += c;\n\t\t}\n\n\t\tcout << DoctorLovedEncode( s ) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <bitset>\n#include <map>\nusing namespace std;\n\nstring encode(char c){\n\tstring a[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\tstatic const string str=\" \\',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tfor(int i=0;i<str.length();i++){\n\t\tif(c==str[i])return a[i];\n\t}\n}\n\nchar decode(string s){\n\tstring str2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\tstd::bitset<5> b(s);\n\treturn str2[b.to_ulong()];\n}\n\nint main(void){\n\n\tstring s;\n\tstring code=\"\";\n\t/*\n\t\t std::getline(cin,s);\n\t\t for(int i=0;i<s.length();i++){\n\t\t code+=encode(s[i]);\n\t\t }\n\n\t\t while(std::getline(cin,s)){\n\t\t code+=encode(' ');\n\t\t for(int i=0;i<s.length();i++){\n\t\t code+=encode(s[i]);\n\t\t }\n\t\t }\n\t// cout<<code<<endl;\n\tstring retu=\"\";\n\tfor(int i=0;i<code.length();i+=5){\n\ttry{\n\tstring dd=code.substr(i,5);\n\tretu+=decode(dd);\n\t}catch(out_of_range e){\n\tcode+=\"00000\";\n\tstring dd=code.substr(i,5);\n\tretu=decode(dd);\n\tbreak;\n\t}\n\t}\n\tcout<<retu<<endl;\n\t*/\n\twhile (std::getline(cin,s)) {\n\t\tstring code=\"\";\n\t\tfor(int i=0;i<s.length();i++) code+=encode(s[i]);\n\t\tstring retu=\"\";\n\t\tfor(int i=0;i<code.length();i+=5){\n\t\t\ttry {\n\t\t\t\tstring dd=code.substr(i,5);\n\t\t\t\tretu+=decode(dd);\n\t\t\t} catch (out_of_range e) {\n\t\t\t\tcode+=\"00000\";\n\t\t\t\tstring dd=code.substr(i,5);\n\t\t\t\tretu=decode(dd);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcout<<retu<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring getCode1( char c ){\n\tstring ret;\n\tswitch( c ){\n\t\tcase ' ':\tret = \"101\"; break;\n\t\tcase '\\'':\tret = \"000000\"; break;\n\t\tcase ',':\tret = \"000011\"; break;\n\t\tcase '-':\tret = \"10010001\"; break;\n\t\tcase '.':\tret = \"010001\"; break;\n\t\tcase '?':\tret = \"000001\"; break;\n\t\tcase 'A':\tret = \"100101\"; break;\n\t\tcase 'B':\tret = \"10011010\"; break;\n\t\tcase 'C':\tret = \"0101\"; break;\n\t\tcase 'D':\tret = \"0001\"; break;\n\t\tcase 'E':\tret = \"110\"; break;\n\t\tcase 'F':\tret = \"01001\"; break;\n\t\tcase 'G':\tret = \"10011011\"; break;\n\t\tcase 'H':\tret = \"010000\"; break;\n\t\tcase 'I':\tret = \"0111\"; break;\n\t\tcase 'J':\tret = \"10011000\"; break;\n\t\tcase 'K':\tret = \"0110\"; break;\n\t\tcase 'L':\tret = \"00100\"; break;\n\t\tcase 'M':\tret = \"10011001\"; break;\n\t\tcase 'N':\tret = \"10011110\"; break;\n\t\tcase 'O':\tret = \"00101\"; break;\n\t\tcase 'P':\tret = \"111\"; break;\n\t\tcase 'Q':\tret = \"10011111\"; break;\n\t\tcase 'R':\tret = \"1000\"; break;\n\t\tcase 'S':\tret = \"00110\"; break;\n\t\tcase 'T':\tret = \"00111\"; break;\n\t\tcase 'U':\tret = \"10011100\"; break;\n\t\tcase 'V':\tret = \"10011101\"; break;\n\t\tcase 'W':\tret = \"000010\"; break;\n\t\tcase 'X':\tret = \"10010010\"; break;\n\t\tcase 'Y':\tret = \"10010011\"; break;\n\t\tcase 'Z':\tret = \"10010000\"; break;\n\t}\n\treturn ret;\n}\n\nchar getCode2( string& s ){\n\tchar c = 0;\n\tfor ( int i = 0; i < 5; ++i ){\n\t\tc += ( ( s[ 4 - i ] - '0' ) << i );\n\t}\n\tif ( c < 26 ){\n\t\tc += 'A';\n\t}else{\n\t\tswitch( c ){\n\t\t\tcase 26: c = ' '; break;\n\t\t\tcase 27: c = '.'; break;\n\t\t\tcase 28: c = ','; break;\n\t\t\tcase 29: c = '-'; break;\n\t\t\tcase 30: c = '\\''; break;\n\t\t\tcase 31: c = '?'; break;\n\t\t}\n\t}\n\treturn c;\n}\n\nvoid firstEnc( string& is ){\n\tstring os;\n\tstring::iterator it = is.begin();\n\twhile ( it != is.end() ){\n\t\tos += getCode1( *it );\n\t\tit = is.erase( it );\n\t}\n\tis = os;\n}\n\nvoid secondEnc( string& is ){\n\tstring os;\n\tif ( is.size() % 5 ){\n\t\tis.append( 5 - is.size() % 5 , '0' );\n\t}\n\twhile ( is.size() ){\n\t\tstring set( is, 0, 5 );\n\t\tos += getCode2( set );\n\t\tis.erase( 0, 5 );\n\t}\n\tis = os;\n}\n\nint main(){\n\tstring s;\n\n\twhile ( getline( cin, s ) ){\n\t\tfirstEnc( s );\n\t\tsecondEnc( s );\n\t\tcout << s << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n\nusing namespace std;\n\nint bitstrtoint(string str){\n  int res = 0;\n  for(int i = 0; i < str.size(); i++){\n    res *= 2;\n    res += str[i] == '1';\n  }\n  return res;\n}\n\nint main(){\n  string str;\n  while(getline(cin, str)){\n    string numstr = \"\";\n    for(int i = 0; i < str.size(); i++){\n      switch((char)str[i]){\n      case ' ':\n        numstr += \"101\";\n        break;\n      case '\\'':\n        numstr += \"000000\";\n        break;\n      case ',':\n        numstr += \"000011\";\n        break;\n      case '-':\n        numstr += \"10010001\";\n        break;\n      case '.':\n        numstr += \"010001\";\n        break;\n      case '?':\n        numstr += \"000001\";\n        break;\n      case 'A':\n        numstr += \"100101\";\n        break;\n      case 'B':\n        numstr += \"10011010\";\n        break;\n      case 'C':\n        numstr += \"0101\";\n        break;\n      case 'D':\n        numstr += \"0001\";\n        break;\n      case 'E':\n        numstr += \"110\";\n        break;\n      case 'F':\n        numstr += \"01001\";\n        break;\n      case 'G':\n        numstr += \"10011011\";\n        break;\n      case 'H':\n        numstr += \"010000\";\n        break;\n      case 'I':\n        numstr += \"0111\";\n        break;\n      case 'J':\n        numstr += \"10011000\";\n        break;\n      case 'K':\n        numstr += \"0110\";\n        break;\n      case 'L':\n        numstr += \"00100\";\n        break;\n      case 'M':\n        numstr += \"10011001\";\n        break;\n      case 'N':\n        numstr += \"10011110\";\n        break;\n      case 'O':\n        numstr += \"00101\";\n        break;\n      case 'P':\n        numstr += \"111\";\n        break;\n      case 'Q':\n        numstr += \"10011111\";\n        break;\n      case 'R':\n        numstr += \"1000\";\n        break;\n      case 'S':\n        numstr += \"00110\";\n        break;\n      case 'T':\n        numstr += \"00111\";\n        break;\n      case 'U':\n        numstr += \"10011100\";\n        break;\n      case 'V':\n        numstr += \"10011101\";\n        break;\n      case 'W':\n        numstr += \"000010\";\n        break;\n      case 'X':\n        numstr += \"10010010\";\n        break;\n      case 'Y':\n        numstr += \"10010011\";\n        break;\n      case 'Z':\n        numstr += \"10010000\";\n      }\n    }\n    str = \"\";\n    for(int i = 0; i < numstr.size(); i += 5){\n      int code = bitstrtoint(numstr.substr(i, 5));\n      if(0 <= code && code < 26){\n        str += (char)(code + 65);\n      }\n      else{\n        switch(code){\n        case 26:\n          str += \" \";\n          break;\n        case 27:\n          str += \".\";\n          break;\n        case 28:\n          str += \",\";\n          break;\n        case 29:\n          str += \"-\";\n          break;\n        case 30:\n          str += \"\\'\";\n          break;\n        case 31:\n          str += \"?\";\n        }\n      }\n    }\n    cout << str << \"\\n\";\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector< string > table1(128, string(\"\"));\nchar table2[36] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nvoid set(){\n    table1[65] = string(\"100101\");\n    table1[66] = string(\"10011010\");\n    table1[67] = string(\"0101\");\n    table1[68] = string(\"0001\");\n    table1[69] = string(\"110\");\n    table1[70] = string(\"01001\");\n    table1[71] = string(\"10011011\");\n    table1[72] = string(\"010000\");\n    table1[73] = string(\"0111\");\n    table1[74] = string(\"10011000\");\n    table1[75] = string(\"0110\");\n    table1[76] = string(\"00100\");\n    table1[77] = string(\"10011001\");\n    table1[78] = string(\"10011110\");\n    table1[79] = string(\"00101\");\n    table1[80] = string(\"111\");\n    table1[81] = string(\"10011111\");\n    table1[82] = string(\"1000\");\n    table1[83] = string(\"00110\");\n    table1[84] = string(\"00111\");\n    table1[85] = string(\"10011100\");\n    table1[86] = string(\"10011101\");\n    table1[87] = string(\"000011\");\n    table1[88] = string(\"10010010\");\n    table1[89] = string(\"10010011\");\n    table1[90] = string(\"10010000\");\n    table1[' '] = string(\"101\");\n    table1['\\''] = string(\"000000\");\n    table1[','] = string(\"000011\");\n    table1['-'] = string(\"10010001\");\n    table1['.'] = string(\"010001\");\n    table1['?'] = string(\"000001\");\n}\n\nchar conv(string s){\n    int ans = 0;\n    string::iterator it = s.begin();\n    for(int n = 0; n < 5; n++){\n        if( it == s.end() ) continue;\n        ans *= 2;\n        ans += *it - '0';\n        it++;\n    }\n    return table2[ans];\n\n}\n\nint main(){\n    set();\n    string data;\n    while( getline(cin, data) ){\n        string c;\n        c = string(\"\");\n        for(int i = 0; i < data.size(); i++){\n            c += table1[data[i]] ;\n        }\n        c += string(4-(c.size()+4)%5, '0');\n        for(int i = 0; i < c.size()/5; i++){\n            cout << conv( c.substr(i*5, 5) );\n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring letter_to_sign[35] = {\n\n  \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\n  \"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n  \"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n  \"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"\n\n};\n\nstring sign_to_letter[35] = {\n\n  \"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\n  \"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\n  \"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\n  \"Y\",\"Z\",\" \",\".\",\",\",\"-\",\"\\'\",\"?\"\n\n};\n\nint main() {\n\n  string buf;\n\n  string str;\n  string ans;\n\n  int l;\n\n\n  while(getline(cin,buf)) {\n\n    str=\"\";\n\n    for(int i=0;i<(int)buf.length();i++) {\n\n      if(buf[i]==' ') str+=letter_to_sign[0];\n\n      else if(buf[i]=='\\'') str+=letter_to_sign[1];\n\n      else if(buf[i]==',') str+=letter_to_sign[2];\n\n      else if(buf[i]=='-') str+=letter_to_sign[3];\n\n      else if(buf[i]=='.') str+=letter_to_sign[4];\n\n      else if(buf[i]=='?') str+=letter_to_sign[5];\n\n      else str+=letter_to_sign[buf[i]-'A'+6];\n\n    }\n\n    l=str.length();\n\n    for(int i=0;i<5-l%5;i++) str+=\"0\";\n\n    cout << str << endl;\n\n    l=str.length();\n\n    ans=\"\";\n\n    for(int i=0;i<l;i=i+5) {\n\n      int index;\n\n      index=16*(str[i]-'0')+8*(str[i+1]-'0')+4*(str[i+2]-'0')+2*(str[i+3]-'0')+(str[i+4]-'0');\n\n      ans+=sign_to_letter[index];\n\n    }\n\n    cout << ans << endl;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\n#define rep(i,n) for(ll i=0;i<(ll)(n);i++)\n#define all(a)  (a).begin(),(a).end()\n#define pb push_back\n#define INF 999999999\n\nint main(){\n    string s,x;\n    while(getline(cin,x)){\n        if(x==\"end\")break;\n        s=x;\n    string a=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n    string b[]={\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"};\n    string c=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string d[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n    map<string,char> mpb;\n    map<char,string> mpa;\n    rep(i,a.size()){\n        mpb[b[i]]=a[i];\n    }\n    rep(i,c.size()){\n        mpa[c[i]]=d[i];\n    }\n    \n    string str=\"\";\n    rep(i,s.size()){\n        str+=mpa[s[i]];\n    }\n    int len=str.size();\n    str+=string((5-(len%5))%5,'0');\n    string sx=\"\";\n    len=str.size();\n    rep(i,len/5){\n        sx+=mpb[str.substr(5*i,5)];\n    }\n    cout<<sx<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#if 1\n\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <ctime>\n#include <cassert>\n#include <iostream>\n#include <cctype>\n#include <sstream>\n#include <string>\n#include <list>\n#include <vector>\n#include <queue>\n#include <set>\n#include <stack>\n#include <map>\n#include <utility>\n#include <numeric>\n#include <algorithm>\n#include <iterator>\n#include <bitset>\n#include <complex>\n#include <fstream>\n#include <iomanip>\nusing namespace std;\ntypedef long long ll;\nconst double EPS = 1e-9;\ntypedef vector<int> vint;\ntypedef pair<int, int> pint;\n#define rep(i, n) REP(i, 0, n)\n#define ALL(v) v.begin(), v.end()\n#define MSG(a) cout << #a << \" \" << a << endl;\n#define REP(i, x, n) for(int i = x; i < n; i++)\ntemplate<class T> T RoundOff(T a){ return int(a+.5-(a<0)); }\ntemplate<class T, class C> void chmax(T& a, C b){ if(a < b) a = b; }\ntemplate<class T, class C> void chmin(T& a, C b){ if(b < a) a = b; }\ntemplate<class T, class C> pair<T, C> mp(T a, C b){ return make_pair(a, b); }\n\n\nstruct HuffmanCoding\n{\n\tHuffmanCoding()\n\t{\n\t\tinit();\n\t}\n\n\t// êÊIÈgppxÌªz©ç³kÆð\n\tmap<char, string> poplarTable;\n\n\tstring PoplarCompress(string original)\n\t{\n\t\tstring compressString;\n\n\t\tint len = original.size();\n\t\trep(i, len)\n\t\t\tcompressString += poplarTable[original[i]];\n\t\t\n\t\treturn compressString;\n\t}\n\n\t\n\tvoid init()\n\t{\n\t\tpair<char, string> pairs[32] = \n\t\t{\n\t\t\tmp(' ', \"101\"),\n\t\t\tmp('\\'',\"000000\"),\n\t\t\tmp(',',\"000011\"),\n\t\t\tmp('-', \"10010001\"),\n\t\t\tmp('.', \"010001\"),\n\t\t\tmp('?', \"000001\"),\n\t\t\tmp('A', \"100101\"),\n\t\t\tmp('B', \"10011010\"),\n\t\t\tmp('C', \"0101\"),\n\t\t\tmp('D', \"0001\"),\n\t\t\tmp('E', \"110\"),\n\t\t\tmp('F', \"01001\"),\n\t\t\tmp('G', \"10011011\"),\n\t\t\tmp('H', \"010000\"),\n\t\t\tmp('I', \"0111\"),\n\t\t\tmp('J', \"10011000\"),\n\t\t\tmp('K', \"0110\"),\n\t\t\tmp('L', \"00100\"),\n\t\t\tmp('M', \"10011001\"),\n\t\t\tmp('N', \"10011110\"),\n\t\t\tmp('O', \"00101\"),\n\t\t\tmp('P', \"111\"),\n\t\t\tmp('Q', \"10011111\"),\n\t\t\tmp('R', \"1000\"),\n\t\t\tmp('S', \"00110\"),\n\t\t\tmp('T', \"00111\"),\n\t\t\tmp('U', \"10011100\"),\n\t\t\tmp('V', \"10011101\"),\n\t\t\tmp('V', \"000010\"),\n\t\t\tmp('W', \"10010010\"),\n\t\t\tmp('Y', \"10010011\"),\n\t\t\tmp('Z', \"10010000\")\n\t\t};\n\n\n\t\trep(i, 32)\n\t\t\tpoplarTable.insert(map<char, string>::value_type(pairs[i].first, pairs[i].second));\n\t}\n};\n\nmap<string, char> table;\nvoid initializeTable()\n{\n\tpair<string, char> pairs[32] = \n\t{\n\t\tmp(\"00000\", 'A'),\n\t\tmp(\"00001\", 'B'),\n\t\tmp(\"00010\", 'C'),\n\t\tmp(\"00011\", 'D'),\n\t\tmp(\"00100\", 'E'),\n\t\tmp(\"00101\", 'F'),\n\t\tmp(\"00110\", 'G'),\n\t\tmp(\"00111\", 'H'),\n\t\tmp(\"01000\", 'I'),\n\t\tmp(\"01001\", 'J'),\n\t\tmp(\"01010\", 'K'),\n\t\tmp(\"01011\", 'L'),\n\t\tmp(\"01100\", 'M'),\n\t\tmp(\"01101\", 'N'),\n\t\tmp(\"01110\", 'O'),\n\t\tmp(\"01111\", 'P'),\n\t\tmp(\"10000\", 'Q'),\n\t\tmp(\"10001\", 'R'),\n\t\tmp(\"10010\", 'S'),\n\t\tmp(\"10011\", 'T'),\n\t\tmp(\"10100\", 'U'),\n\t\tmp(\"10101\", 'V'),\n\t\tmp(\"10110\", 'W'),\n\t\tmp(\"10111\", 'X'),\n\t\tmp(\"11000\", 'Y'),\n\t\tmp(\"11001\", 'Z'),\n\t\tmp(\"11010\", ' '),\n\t\tmp(\"11011\", '.'),\n\t\tmp(\"11100\", ','),\n\t\tmp(\"11101\", '-'),\n\t\tmp(\"11110\", '\\''),\n\t\tmp(\"11111\", '?')\n\t};\n\n\trep(i, 32)\n\t\ttable.insert(map<string, char>::value_type(pairs[i].first, pairs[i].second));\n}\n\nstring compress(string line)\n{\n\tstring ans;\n\n\tfor(int i = 0; i < line.size(); i += 5)\n\t\tans += table[line.substr(i, 5)];\n\t\n\treturn ans;\n}\n\nint main()\n{\n\tinitializeTable();\n\tstring line;\n\twhile(getline(cin, line))\n\t{\n\t\tHuffmanCoding hc;\n\t\tline = hc.PoplarCompress(line);\n\n\t\twhile(line.size() % 5)\n\t\t\tline += '0';\n\n\t\tcout << compress(line) << endl;\n\t}\n}\n\n#endif"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <set>\n#include <map>\n#include <algorithm>\t// require sort next_permutation count __gcd reverse etc.\n#include <cstdlib>\t// require abs exit atof atoi \n#include <cstdio>\t\t// require scanf printf\n#include <functional>\n#include <numeric>\t// require accumulate\n#include <cmath>\t\t// require fabs\n#include <climits>\n#include <limits>\n#include <cfloat>\n#include <iomanip>\t// require setw\n#include <sstream>\t// require stringstream \n#include <cstring>\t// require memset\n#include <cctype>\t\t// require tolower, toupper\n#include <fstream>\t// require freopen\n#include <ctime>\t\t// require srand\n#define rep(i,n) for(int i=0;i<(n);i++)\n#define ALL(A) A.begin(), A.end()\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> P;\nmap<char,string> table;\nmap<string,char> table2;\n\nvoid make_table (void )\n{\n\ttable.clear();\n\ttable[' ']=\"101\";\n\ttable['\\'']=\"000000\";\n\ttable[',']=\"000011\";\n\ttable['-']=\"10010001\";\n\ttable['.']=\"010001\";\n\ttable['?']=\"000001\";\n\ttable['A']=\"100101\";\n\ttable['B']=\"10011010\";\n\ttable['C']=\"0101\";\n\ttable['D']=\"0001\";\n\ttable['E']=\"110\";\n\ttable['F']=\"01001\";\n\ttable['G']=\"10011011\";\n\ttable['H']=\"010000\";\n\ttable['I']=\"0111\";\n\ttable['J']=\"10011000\";\n\ttable['K']=\"0110\";\n\ttable['L']=\"00100\";\n\ttable['M']=\"10011001\";\n\ttable['N']=\"10011110\";\n\ttable['O']=\"00101\";\n\ttable['P']=\"111\";\n\ttable['Q']=\"10011111\";\n\ttable['R']=\"1000\";\n\ttable['S']=\"00110\";\n\ttable['T']=\"00111\";\n\ttable['U']=\"10011100\";\n\ttable['V']=\"10011101\";\n\ttable['W']=\"000010\";\n\ttable['X']=\"10010010\";\n\ttable['Y']=\"10010011\";\n\ttable['Z']=\"10010000\";\n\n\ttable2.clear();\n\ttable2[\"00000\"]='A';\n\ttable2[\"00001\"]='B';\n\ttable2[\"00010\"]='C';\n\ttable2[\"00011\"]='D';\n\ttable2[\"00100\"]='E';\n\ttable2[\"00101\"]='F';\n\ttable2[\"00110\"]='G';\n\ttable2[\"00111\"]='H';\n\ttable2[\"01000\"]='I';\n\ttable2[\"01001\"]='J';\n\ttable2[\"01010\"]='K';\n\ttable2[\"01011\"]='L';\n\ttable2[\"01100\"]='M';\n\ttable2[\"01101\"]='N';\n\ttable2[\"01110\"]='O';\n\ttable2[\"01111\"]='P';\n\ttable2[\"10000\"]='Q';\n\ttable2[\"10001\"]='R';\n\ttable2[\"10010\"]='S';\n\ttable2[\"10011\"]='T';\n\ttable2[\"10100\"]='U';\n\ttable2[\"10101\"]='V';\n\ttable2[\"10110\"]='W';\n\ttable2[\"10111\"]='X';\n\ttable2[\"11000\"]='Y';\n\ttable2[\"11001\"]='Z';\n\ttable2[\"11010\"]=' ';\n\ttable2[\"11011\"]='.';\n\ttable2[\"11100\"]=',';\n\ttable2[\"11101\"]='-';\n\ttable2[\"11110\"]='\\'';\n\ttable2[\"11111\"]='?';\n}\n\nint main()\n{\n//\tcut here before submit \n//\tfreopen (\"testcase.the_code_a_doctor_loved\", \"r\", stdin );\n\tmake_table();\n\tstring str = \"\";\n\twhile (getline (cin, str ) ){\n\t\tint n = str.length();\n\t\tstring ans = \"\";\n\t\trep (i, n ){\n\t\t\tans += table[str[i]];\n\t\t} // end rep\n\t\tif (ans.length() % 5 != 0 ){\n\t\t\tans += string (5 - (ans.length() % 5 ), '0' );\n\t\t} // end if\n\t\tstring res = \"\";\n\t\tfor (int i = 0; i < ans.length(); i += 5 ){\n\t\t\t res += table2[ans.substr (i, 5 )];\n\t\t} // end for\n\t\tcout << res << endl;\n\t} // end loop\n\t\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\nstring ab[26] = {\n\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\n\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\n\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\n\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\n\"10010000\"};\nstring ctoi(char c) {\n    if (c==' ') return \"101\";\n    else if (c=='\\'') return \"000000\";\n    else if (c==',') return \"000011\";\n    else if (c=='-') return \"10010001\";\n    else if (c=='.') return \"010001\";\n    else if (c=='?') return \"000001\";\n    else if (c>='A'&&c<='Z') return ab[c-'A'];\n}\nchar itoc(string num) {\n    if (num==\"00000\") return 'A';\n    if (num==\"00001\") return 'B';\n    if (num==\"00010\") return 'C';\n    if (num==\"00011\") return 'D';\n    if (num==\"00100\") return 'E';\n    if (num==\"00101\") return 'F';\n    if (num==\"00110\") return 'G';\n    if (num==\"00111\") return 'H';\n    if (num==\"01000\") return 'I';\n    if (num==\"01001\") return 'J';\n    if (num==\"01010\") return 'K';\n    if (num==\"01011\") return 'L';\n    if (num==\"01100\") return 'M';\n    if (num==\"01101\") return 'N';\n    if (num==\"01110\") return 'O';\n    if (num==\"01111\") return 'P';\n    if (num==\"10000\") return 'Q';\n    if (num==\"10001\") return 'R';\n    if (num==\"10010\") return 'S';\n    if (num==\"10011\") return 'T';\n    if (num==\"10100\") return 'U';\n    if (num==\"10101\") return 'V';\n    if (num==\"10110\") return 'W';\n    if (num==\"10111\") return 'X';\n    if (num==\"11000\") return 'Y';\n    if (num==\"11001\") return 'Z';\n    if (num==\"11010\") return ' ';\n    if (num==\"11011\") return '.';\n    if (num==\"11100\") return ',';\n    if (num==\"11101\") return '-';\n    if (num==\"11110\") return '\\'';\n    if (num==\"11111\") return '?';\n}\nint main() {\n    string str;\n    while (getline(cin,str)) {\n        string num=\"\";\n        for (int i=0; i<str.length(); i++) num+=ctoi(str[i]);\n        int cnt=0;\n        string temp=\"\", res=\"\";\n        for (int i=0; i<num.length(); i++) {\n            cnt++;\n            temp+=num[i];\n            if (cnt==5) {\n                res+=itoc(temp);\n                cnt=0;\n                temp=\"\";\n            }\n        }\n        if (temp.length()>0) {\n            while (temp.length()<5) {\n                temp+='0';\n            }\n            res+=itoc(temp);\n        }\n        cout << res << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<sstream>\n#include<algorithm>\n#include<climits>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<cfloat>\n#include<functional>\n#include<map>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<deque>\n#include<set>\n#include<bitset>\n#include<list>\n#include<numeric>\n#include<complex>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> i_i;\ntypedef pair<long long, int> ll_i;\ntypedef pair<double, int> d_i;\ntypedef pair<long long, long long> ll_ll;\ntypedef pair<double, double> d_d;\n\n#define PI 3.141592653589793238462643383279\n#define mod 1000000007LL\n#define rep(i, n) for(i = 0;i < n;++i)\n#define rep1(i, n) for(i = 1;i < n;++i)\n#define rep2d(i, j, n) for(i = 0;i < n;++i)for(j = i + 1;j < n;++j)\n#define per(i, n) for(i = n - 1;i > -1;--i)\n#define int(x) int x; scanf(\"%d\",&x)\n#define int2(x, y) int x, y; scanf(\"%d%d\",&x, &y)\n#define int3(x, y, z) int x, y, z; scanf(\"%d%d%d\",&x, &y, &z)\n#define sc(x) cin >> x\n#define sc2(x, y) cin >> x >> y\n#define sc3(x, y, z) cin >> x >> y >> z\n#define scn(n, a) rep(i, n)cin >> a[i]\n#define sc2n(n, a, b) rep(i, n)cin >> a[i] >> b[i]\n#define pri(x) cout << x << \"\\n\"\n#define pri2(x, y) cout << x << \" \" << y << \"\\n\"\n#define pri3(x, y, z) cout << x << \" \" << y << \" \" << z << \"\\n\"\n#define pb push_back\n#define mp make_pair\n#define all(a) (a).begin(),(a).end()\n#define endl \"\\n\"\n#define kabe puts(\"---------------------------\")\n#define kara puts(\"\")\n#define debug(x) cout << \" --- \" << x << \"\\n\"\n#define debug2(x, y) cout << \" --- \" << x << \" \" << y << \"\\n\"\n#define debug3(x, y, z) cout << \" --- \" << x << \" \" << y << \" \" << z << \"\\n\"\n#define X first\n#define Y second\n#define eps 0.0001\n#define prid(x) printf(\"%.15lf\\n\", x)\n\nstring be = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nstring lis[32];\nstring af = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nint f(string x){\n  int a = (int)(x[0] - '0') * 16;\n  int b = (int)(x[1] - '0') * 8;\n  int c = (int)(x[2] - '0') * 4;\n  int d = (int)(x[3] - '0') * 2;\n  int e = (int)(x[4] - '0') * 1;\n  return a + b + c + d + e;\n}\n\nsigned main(void){\n  int i, j, k;\n  lis[0] = \"101\";\n  lis[1] = \"000000\";\n  lis[2] = \"000011\";\n  lis[3] = \"10010001\";\n  lis[4] = \"010001\";\n  lis[5] = \"000001\";\n  lis[6] = \"100101\";\n  lis[7] = \"10011010\";\n  lis[8] = \"0101\";\n  lis[9] = \"0001\";\n  lis[10] = \"110\";\n  lis[11] = \"01001\";\n  lis[12] = \"10011011\";\n  lis[13] = \"010000\";\n  lis[14] = \"0111\";\n  lis[15] = \"10011000\";\n  lis[16] = \"0110\";\n  lis[17] = \"00100\";\n  lis[18] = \"10011001\";\n  lis[19] = \"10011110\";\n  lis[20] = \"00101\";\n  lis[21] = \"111\";\n  lis[22] = \"10011111\";\n  lis[23] = \"1000\";\n  lis[24] = \"00110\";\n  lis[25] = \"00111\";\n  lis[26] = \"10011100\";\n  lis[27] = \"10011101\";\n  lis[28] = \"000010\";\n  lis[29] = \"10010010\";\n  lis[30] = \"10010011\";\n  lis[31] = \"10010000\";\n\n  string s;\n  for(int testcase = 0;getline(cin, s);testcase++){\n    string rmn = \"\";\n    rep(i, s.size()){\n      rep(j, be.size())if(s[i] == be[j])break;\n      rmn += lis[j];\n    }\n\n    int tmp = (5 - (rmn.size() % 5)) % 5;\n    rep(i, tmp)rmn += \"0\";\n\n    string res = \"\";\n    for(i = 0;i < rmn.size();i+=5)res += af[ f(rmn.substr(i, 5)) ];\n\n    pri(res);\n\n\n\n    s.clear();\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\nusing namespace std;\nstring L=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",A=\" ',-.?\"+L,C=L+\" .,-'?\";\nstring B = \"101 000000 000011 10010001 010001 000001 100101 10011010 \"\n\t\"0101 0001 110 01001 10011011 010000 0111 10011000 \"\n\t\"0110 00100 10011001 10011110 00101 111 10011111 1000 \"\n\t\"00110 00111 10011100 10011101 000010 10010010 10010011 10010000\";\nint bin2dec(string s){\n\tint x=0,i;\n\tfor(i=0;i<s.size();i++)x=x*2+s[i]-'0';\n\treturn x;\n}\nint main(){\n\tvector<string>x(32);\n\tstringstream ss(B);\n\tstring s,s1;\n\tint i,n;\n\tfor(i=0;i<32;i++){\n\t\tss>>s;\n\t\tx[i]=s;\n\t}\n\twhile(getline(cin,s)){\n\t\ts1=\"\";\n\t\tfor(i=0;i<s.size();i++)s1+=x[A.find(s[i])];\n\t\tn=s1.size()%5;\n\t\tif(n)s1+=string(5-n,'0');\n\t\ts=\"\";\n\t\tfor(i=0;i<s1.size();i+=5)s+=C[bin2dec(s1.substr(i, 5))];\n\t\tcout<<s<< endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i,n)for(int i=0;i<n;i++)\nusing namespace std;\n\nmap<char, int>notal{\n\t{ ' ',26 },{ '.',27 },{ ',',28 },{ '-',29 },{ '\\'',30 },{ '?',31 }\n};\nmap<int, char>mp{\n\t{ 26,' ' },{ 27,'.' },{ 28,',' },{ 29,'-' },{ 30,'\\'' },{ 31,'?' },\n};\nstring code[]{ \"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\" };\nint bin(string s) {\n\treverse(s.begin(), s.end());\n\tint i = 1;\n\tint res = 0;\n\tfor (char c : s) {\n\t\tres += i*(c - '0');\n\t\ti <<= 1;\n\t}\n\treturn res;\n}\nint main() {\n\tstring s;\n\tstring buf;\n\twhile (getline(cin, buf)) {\n\t\tif (s != \"\")s += ' ';\n\t\ts += buf;\n\t}\n\tstring ss;\n\tfor (char c : s) {\n\t\tif (isalpha(c))ss += code[c - 'A'];\n\t\telse ss += code[notal[c]];\n\t}\n\twhile (ss.size() % 5)ss += '0';\n\tstring ans;\n\tfor (int i = 0; i <= ss.size() - 5; i += 5) {\n\t\tint d = bin(ss.substr(i, 5));\n\t\tif (d < 26)ans += 'A' + d;\n\t\telse ans += mp[d];\n\t}\n\tcout << ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <string>\n#include <cstdlib>\nusing namespace std;\n\nmap<char, string> m1;\nchar m2[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\nstring strToBitSeq(const string& str)\n{\n    string result;\n    for(int i = 0; i < str.size(); ++i) result += m1[str[i]];\n    if(result.size() % 5 != 0) result.append(5 - result.size() % 5, '0');\n    return result;\n}\n\nstring bitSeqToStr(const string& str)\n{\n    string result;\n    for(int i = 0; i < str.size(); i += 5){\n        result += m2[strtol(str.substr(i, 5).c_str(), NULL, 2)];\n    }\n    return result;\n}\n\nint main()\n{\n    m1[' '] = \"101\"; m1['\\''] = \"000000\"; m1[','] = \"000011\"; m1['-'] = \"10010001\"; m1['.'] = \"010001\";\n    m1['?'] = \"000001\"; m1['A'] = \"100101\"; m1['B'] = \"10011010\"; m1['C'] = \"0101\"; m1['D'] = \"0001\";\n    m1['E'] = \"110\"; m1['F'] = \"01001\"; m1['G'] = \"10011011\"; m1['H'] = \"010000\"; m1['I'] = \"0111\";\n    m1['J'] = \"10011000\"; m1['K'] = \"0110\"; m1['L'] = \"00100\"; m1['M'] = \"10011001\"; m1['N'] = \"10011110\";\n    m1['O'] = \"00101\"; m1['P'] = \"111\"; m1['Q'] = \"10011111\"; m1['R'] = \"1000\"; m1['S'] = \"00110\";\n    m1['T'] = \"00111\"; m1['U'] = \"10011100\"; m1['V'] = \"10011101\"; m1['W'] = \"000010\"; m1['X'] = \"10010010\";\n    m1['Y'] = \"10010011\"; m1['Z'] = \"10010000\";\n    \n    string str;\n    while(getline(cin, str)){\n        cout << bitSeqToStr(strToBitSeq(str)) << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <sstream>\n#include <map>\nusing namespace std;\n\nstring mkzero(int len) {\n    char str[80];\n    sprintf(str, \"%0*d\", len, 0);\n    return string(str);\n}\n\nint main() {\n    const char * fromA = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    const char * toA[] = {\n        \"101\",\n        \"000000\",\n        \"000011\",\n        \"10010001\",\n        \"010001\",\n        \"000001\",\n        \"100101\",\n        \"10011010\",\n        \"0101\",\n        \"0001\",\n        \"110\",\n        \"01001\",\n        \"10011011\",\n        \"010000\",\n        \"0111\",\n        \"10011000\",\n        \"0110\",\n        \"00100\",\n        \"10011001\",\n        \"10011110\",\n        \"00101\",\n        \"111\",\n        \"1001111\",\n        \"1000\",\n        \"00110\",\n        \"00111\",\n        \"10011100\",\n        \"10011101\",\n        \"000010\",\n        \"10010010\",\n        \"10010011\",\n        \"10010000\",\n        \"\"\n    };\n\n    const char * fromB[] = {\n        \"00000\",\n        \"00001\",\n        \"00010\",\n        \"00011\",\n        \"00100\",\n        \"00101\",\n        \"00110\",\n        \"00111\",\n        \"01000\",\n        \"01001\",\n        \"01010\",\n        \"01011\",\n        \"01100\",\n        \"01101\",\n        \"01110\",\n        \"01111\",\n        \"10000\",\n        \"10001\",\n        \"10010\",\n        \"10011\",\n        \"10100\",\n        \"10101\",\n        \"10110\",\n        \"10111\",\n        \"11000\",\n        \"11001\",\n        \"11010\",\n        \"11011\",\n        \"11100\",\n        \"11101\",\n        \"11110\",\n        \"11111\",\n        \"\"\n    };\n\n    const char * toB = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n    map<char, string> enc;\n    for(int i = 0, len = strlen(fromA); i < len; i++) {\n        enc.insert(make_pair(fromA[i], string(toA[i])));\n    }\n\n    map<string, char> dec;\n    for(int i = 0, len = strlen(toB); i < len; i++) {\n        dec.insert(make_pair(string(fromB[i]), toB[i]));\n    }\n\n#if 0\n    for(map<char, string>::const_iterator it = enc.begin(); it != enc.end(); ++it) {\n        cerr << it->first << \" -> \" << it->second << endl;\n    }\n\n    for(map<string, char>::const_iterator it = dec.begin(); it != dec.end(); ++it) {\n        cerr << it->first << \" -> \" << it->second << endl;\n    }\n#endif\n\n    for(string line; getline(cin, line); ) {\n        ostringstream ss;\n        for(int i = 0; i < (int)line.length(); i++)\n            ss << enc[line[i]];\n        if(ss.str().size() % 5 > 0) ss << mkzero(5 - ss.str().size() % 5);\n        for(int i = 0; i < (int)ss.str().size() / 5; i++) {\n            cout << dec[ss.str().substr(5*i, 5)];\n        }\n        cout << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <map>\nusing namespace std;\nint main(){\n\tmap<char,string> mp;\n\tmap<string,char> mp2;\n\tmp[' '] = \"101\";\n\tmp['\\''] = \"000000\";\n\tmp[','] = \"000011\";\n\tmp['-'] = \"10010001\";\n\tmp['.'] = \"010001\";\n\tmp['?'] = \"000001\";\n\tmp['A'] = \"100101\";\n\tmp['B'] = \"10011010\";\n\tmp['C'] = \"0101\";\n\tmp['D'] = \"0001\";\n\tmp['E'] = \"110\";\n\tmp['F'] = \"01001\";\n\tmp['G'] = \"10011011\";\n\tmp['H'] = \"010000\";\n\tmp['I'] = \"0111\";\n\tmp['J'] = \"10011000\";\n\tmp['K'] = \"0110\";\n\tmp['L'] = \"00100\";\n\tmp['M'] = \"10011001\";\n\tmp['N'] = \"10011110\";\n\tmp['O'] = \"00101\";\n\tmp['P'] = \"111\";\n\tmp['Q'] = \"10011111\";\n\tmp['R'] = \"1000\";\n\tmp['S'] = \"00110\";\n\tmp['T'] = \"00111\";\n\tmp['U'] = \"10011100\";\n\tmp['V'] = \"10011101\";\n\tmp['W'] = \"000010\";\n\tmp['X'] = \"10010010\";\n\tmp['Y'] = \"10010011\";\n\tmp['Z'] = \"10010000\";\n\tmp2[\"00000\"] = 'A';\n\tmp2[\"00001\"] = 'B';\n\tmp2[\"00010\"] = 'C';\n\tmp2[\"00011\"] = 'D';\n\tmp2[\"00100\"] = 'E';\n\tmp2[\"00101\"] = 'F';\n\tmp2[\"00110\"] = 'G';\n\tmp2[\"00111\"] = 'H';\n\tmp2[\"01000\"] = 'I';\n\tmp2[\"01001\"] = 'J';\n\tmp2[\"01010\"] = 'K';\n\tmp2[\"01011\"] = 'L';\n\tmp2[\"01100\"] = 'M';\n\tmp2[\"01101\"] = 'N';\n\tmp2[\"01110\"] = 'O';\n\tmp2[\"01111\"] = 'P';\n\tmp2[\"10000\"] = 'Q';\n\tmp2[\"10001\"] = 'R';\n\tmp2[\"10010\"] = 'S';\n\tmp2[\"10011\"] = 'T';\n\tmp2[\"10100\"] = 'U';\n\tmp2[\"10101\"] = 'V';\n\tmp2[\"10110\"] = 'W';\n\tmp2[\"10111\"] = 'X';\n\tmp2[\"11000\"] = 'Y';\n\tmp2[\"11001\"] = 'Z';\n\tmp2[\"11010\"] = ' ';\n\tmp2[\"11011\"] = '.';\n\tmp2[\"11100\"] = ',';\n\tmp2[\"11101\"] = '-';\n\tmp2[\"11110\"] = '\\'';\n\tmp2[\"11111\"] = '?';\n\tstring s,t;\n\tbool start = true;\n\twhile(getline(cin,s)){\n\t\tif(not start) t += mp[' '];\n\t\tfor(int i=0;i<s.size();i++){\n\t\t\tchar a = s[i];\n\t\t\tif(start and i==0) t = mp[a];\n\t\t\telse t += mp[a];\n\t\t}\n\t\tstart = false;\n\t}\n\ts = t;\n\tfor(int i=0;i<(5-t.size()%5)%5;i++) s += \"0\";\n\tfor(int i=0;i<s.size()/5;i++) cout << mp2[s.substr(5*i,5)];\n\tcout << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\nusing namespace std;\n\nstring code[256];\nchar decode[32];\n\nvoid init(){\n  code[' '] = \"101\"; code['\\''] = \"000000\"; code[','] = \"000011\";\n  code['-'] = \"10010001\"; code['.'] = \"010001\"; code['A'] = \"100101\";\n  code['B'] = \"10011010\"; code['C'] = \"0101\"; code['D'] = \"0001\";\n  code['E'] = \"110\"; code['F'] = \"01001\"; code['G'] = \"10011011\";\n  code['H'] = \"010000\"; code['I'] = \"0111\"; code['J'] = \"10011000\";\n  code['K'] = \"0110\"; code['L'] = \"00100\"; code['M'] = \"10011001\";\n  code['N'] = \"10011110\"; code['O'] = \"00101\"; code['P'] = \"111\";\n  code['Q'] = \"10011111\"; code['R'] = \"1000\"; code['S'] = \"00110\";\n  code['T'] = \"00111\"; code['U'] = \"10011100\"; code['V'] = \"10011101\";\n  code['W'] = \"000010\"; code['X'] = \"10010010\"; code['Y'] = \"10010011\";\n  code['Z'] = \"10010000\";\n\n  for(int i = 0; i < 26; i++){\n    decode[i] = 'A' + i;\n  }\n  decode[26] = ' '; decode[27] = '.'; decode[28] = ','; decode[29] = '-';\n  decode[30] = '\\''; decode[31] = '?';\n}\n\nint main(void){\n  init();\n  string input;\n  while(getline(cin, input)){\n    string e = \"\";\n    for(int i = 0; i < input.size(); i++){\n      e += code[input[i]];\n    }\n    if(e.size() % 5 != 0){\n      int pad = 5 - (e.size() % 5);\n      for(int i = 0; i < pad; i++) e += \"0\";\n    }\n    for(int i = 0; i < e.size(); i += 5){\n      int offset = ((int)e[i] - '0') * 16 + ((int)e[i+1] - '0') * 8 + ((int)e[i+2] - '0') * 4 + ((int)e[i+3] - '0') * 2 + ((int)e[i+4] - '0');\n      cout << decode[offset];\n    }\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cassert>\n#include <cctype>\n#include <complex>\n#include <cstdio>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <vector>\nusing namespace std;\n\n#define rep(i,n) for(int i=0;i<n;i++)\n\nstring s,t,c[]={\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\nint main(){\n\twhile(getline(cin,s)){\n\t\tt=\"\";\n\t\tint cur=0;\n\t\twhile(cur<s.size()){\n\t\t\tif(s[cur]==' ')t+=\"101\";\n\t\t\tif(s[cur]=='\\'')t+=\"000000\";\n\t\t\tif(s[cur]==',')t+=\"000011\";\n\t\t\tif(s[cur]=='-')t+=\"10010001\";\n\t\t\tif(s[cur]=='.')t+=\"010001\";\n\t\t\tif(s[cur]>='A'&&s[cur]<='Z')t+=c[s[cur]-'A'];\n\t\t\tcur++;\n\t\t}\n\t\tif(t.size()%5)rep(i,5-t.size()%5)t+=\"0\";\n\t\trep(i,t.size())t[i]-='0';\n\t\tcur=0;\n\t\ts=\"\";\n\t\twhile(cur<t.size()){\n\t\t\tint a=t[cur]*16+t[cur+1]*8+t[cur+2]*4+t[cur+3]*2+t[cur+4];\n\t\t\tif(a<=25)s+='A'+a;\n\t\t\tif(a==26)s+=' ';\n\t\t\tif(a==27)s+='.';\n\t\t\tif(a==28)s+=',';\n\t\t\tif(a==29)s+='-';\n\t\t\tif(a==30)s+='\\'';\n\t\t\tif(a==31)s+='?';\n\t\t\tcur+=5;\n\t\t}\n\t\tcout<<s<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<string>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\n\nint main(){\n\tchar chs[]=\" .,-'?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tstring codes[32]={\n\t\t\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n\t\t,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n\t\t,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n\t\t,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\t\n\tchar c;\n\tstring s,t,ans;\n\twhile(~scanf(\"%c\",&c)){\n\t\tif(c=='\\n')s+=' ';\n\t\telse s+=c;\n\t}\n\tfor(int i=0;i<s.size();i++){\n\t\tt += codes[find(chs,chs+32,s[i])-chs];\n\t}\n\tif(t.size()%5)t.append(5-t.size()%5,'0');\n\tfor(int i=0;i<t.size();i+=5){\n\t\tint n=0;\n\t\tfor(int j=0;j<5;j++)n = n<<1|t[i+j]-'0';\n\t\tif(n<26)ans += 'A'+n;\n\t\telse ans += \" .,-'?\"[n-26];\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n\tmap<char,string>P;\n\n\tP[32]=\"101\";\n\tP[39]=\"000000\";\n\tP[44]=\"000011\";\n\tP[45]=\"10010001\";\n\tP[46]=\"010001\";\n\tP[63]=\"000001\";\n\tP[65]=\"100101\";//A\n\tP[66]=\"10011010\";\n\tP[67]=\"0101\";\n\tP[68]=\"0001\";\n\tP[69]=\"110\";\n\tP[70]=\"01001\";\n\tP[71]=\"10011011\";\n\tP[72]=\"010000\";\n\tP[73]=\"0111\";\n\tP[74]=\"10011000\";\n\tP[75]=\"0110\";\n\tP[76]=\"00100\";\n\tP[77]=\"10011001\";\n\tP[78]=\"10011110\";\n\tP[79]=\"00101\";\n\tP[80]=\"111\";\n\tP[81]=\"10011111\";\n\tP[82]=\"1000\";\n\tP[83]=\"00110\";\n\tP[84]=\"00111\";\n\tP[85]=\"10011100\";\n\tP[86]=\"10011101\";\n\tP[87]=\"000010\";\n\tP[88]=\"10010010\";\n\tP[89]=\"10010011\";\n\tP[90]=\"10010000\";\n\n\tmap<string,string>PP;\n\tPP[\"00000\"]='A';\n\tPP[\"00001\"]='B';\n\tPP[\"00010\"]='C';\n\tPP[\"00011\"]='D';\n\tPP[\"00100\"]='E';\n\tPP[\"00101\"]='F';\n\tPP[\"00110\"]='G';\n\tPP[\"00111\"]='H';\n\tPP[\"01000\"]='I';\n\tPP[\"01001\"]='J';\n\tPP[\"01010\"]='K';\n\tPP[\"01011\"]='L';\n\tPP[\"01100\"]='M';\n\tPP[\"01101\"]='N';\n\tPP[\"01110\"]='O';\n\tPP[\"01111\"]='P';\n\tPP[\"10000\"]='Q';\n\tPP[\"10001\"]='R';\n\tPP[\"10010\"]='S';\n\tPP[\"10011\"]='T';\n\tPP[\"10100\"]='U';\n\tPP[\"10101\"]='V';\n\tPP[\"10110\"]='W';\n\tPP[\"10111\"]='X';\n\tPP[\"11000\"]='Y';\n\tPP[\"11001\"]='Z';\n\tPP[\"11010\"]=' ';\n\tPP[\"11011\"]='.';\n\tPP[\"11100\"]=',';\n\tPP[\"11101\"]='-';\n\tPP[\"11110\"]=',';\n\tPP[\"11111\"]='?';\n\n\tstring str;\n\twhile(getline(cin,str))\n\t{\n\t\tint count=0;\n\t\tstring set_str;\n\t\tstring keep;\n\t\tstring ans_str;\n\n\t\tfor(int i=0;i<str.length();i++)\n\t\t{\n\t\t\tset_str += P[str[i]];\n\t\t}\n\n\t\twhile(set_str.length()%5)set_str+='0';\n\n\t\tfor(int i=0;i<set_str.length();i++)\n\t\t{\n\t\t\tans_str += set_str[i];\n\t\t\tcount++;\n\t\t\tif(!(count%5) && count)\n\t\t\t{\n\t\t\t\tcout << PP[ans_str];\n\t\t\t\tans_str.erase(ans_str.begin(),ans_str.end());\n\t\t\t}\n\t\t}\n\t\tcout << endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\nmap<char, string> cod;\nconst char deco[] = {\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"};\n\nvoid initi(void);\n\nint main()\n{\n    string src;\n    \n    initi();\n\n    while (getline(cin, src)) {\n        string dis;\n\n        for (int i = 0; i < src.size(); i++) \n            dis += cod[src[i]];\n\n        for (int i = 0; i < dis.size() % 5; i++)\n            dis += '0';\n\n        src.clear();\n        for (int i = 0; i < dis.size(); i += 5) {\n            string tmp = dis.substr(i, 5);\n            int ind = 0;\n\n            for (int i = 0; i < 5; i++) {\n                if (tmp[i] == '1')\n                    ind += pow(2, 4 - i);\n            }\n            cout << deco[ind];\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n\n\nvoid initi(void)\n{\n    cod.insert(pair<char, string>(' ', \"101\"));\n    cod.insert(pair<char, string>('\\'', \"000000\"));\n    cod.insert(pair<char, string>(',', \"000011\"));\n    cod.insert(pair<char, string>('-', \"10010001\"));\n    cod.insert(pair<char, string>('.', \"010001\"));\n    cod.insert(pair<char, string>('?', \"000001\"));\n    cod.insert(pair<char, string>('A', \"100101\"));\n    cod.insert(pair<char, string>('B', \"10011010\"));\n\n    cod.insert(pair<char, string>('C', \"0101\"));\n    cod.insert(pair<char, string>('D', \"0001\"));\n    cod.insert(pair<char, string>('E', \"110\"));\n    cod.insert(pair<char, string>('F', \"01001\"));\n    cod.insert(pair<char, string>('G', \"10011011\"));\n    cod.insert(pair<char, string>('H', \"010000\"));\n    cod.insert(pair<char, string>('I', \"0111\"));\n    cod.insert(pair<char, string>('J', \"10011000\"));\n\n    cod.insert(pair<char, string>('K', \"0110\"));\n    cod.insert(pair<char, string>('L', \"00100\"));\n    cod.insert(pair<char, string>('M', \"10011001\"));\n    cod.insert(pair<char, string>('N', \"10011110\"));\n    cod.insert(pair<char, string>('O', \"00101\"));\n    cod.insert(pair<char, string>('P', \"111\"));\n    cod.insert(pair<char, string>('Q', \"10011111\"));\n    cod.insert(pair<char, string>('R', \"1000\"));\n\n    cod.insert(pair<char, string>('S', \"00110\"));\n    cod.insert(pair<char, string>('T', \"00111\"));\n    cod.insert(pair<char, string>('U', \"10011100\"));\n    cod.insert(pair<char, string>('V', \"10011101\"));\n    cod.insert(pair<char, string>('W', \"000010\"));\n    cod.insert(pair<char, string>('X', \"10010010\"));\n    cod.insert(pair<char, string>('Y', \"10010011\"));\n    cod.insert(pair<char, string>('Z', \"10010000\"));\n}"
  },
  {
    "language": "C++",
    "code": "//29\n#include<iostream>\n#include<string>\n#include<cstdlib>\n\nusing namespace std;\n\nint main(){\n  string ct=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const char *en[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n  for(string s;getline(cin,s);){\n    string code;\n    for(int i=0;i<s.size();i++){\n      code+=en[ct.find(s[i])];\n    }\n    code+=string((code.size()+4)/5*5-code.size(),'0');\n    for(int i=0;i<code.size()/5;i++){\n      static const char *de=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n      cout<<de[strtol(code.substr(i*5,5).c_str(),0,2)];\n    }\n    cout<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n\nusing namespace std;\n\n\nint main() {\n\n  string str;\n\n  map<string,string> encode;\n  map<string,string> decode;\n\n  encode[\" \"] = \"101\";\n  encode[\"'\"] = \"000000\";\n  encode[\",\"] = \"000011\";\n  encode[\"-\"] = \"10010001\";\n  encode[\".\"] = \"010001\";\n\n  encode[\"?\"] = \"000001\";\n  encode[\"A\"] = \"100101\";\n  encode[\"B\"] = \"10011010\";\n  encode[\"C\"] = \"0101\";\n  encode[\"D\"] = \"0001\";\n  encode[\"E\"] = \"110\";\n  encode[\"F\"] = \"01001\";\n  encode[\"G\"] = \"10011011\";\n\n  encode[\"H\"] = \"010000\";\n  encode[\"I\"] = \"0111\";\n  encode[\"J\"] = \"10011000\";\n  encode[\"K\"] = \"0110\";\n  encode[\"L\"] = \"00100\";\n  encode[\"M\"] = \"10011001\";\n  encode[\"N\"] = \"10011110\";\n\n  encode[\"O\"] = \"00101\";\n  encode[\"P\"] = \"111\";\n  encode[\"Q\"] = \"10011111\";\n  encode[\"R\"] = \"1000\";\n  encode[\"S\"] = \"00110\";\n  encode[\"T\"] = \"00111\";\n  encode[\"U\"] = \"10011100\";\n\n  encode[\"V\"] = \"10011101\";\n  encode[\"W\"] = \"000010\";\n  encode[\"X\"] = \"10010010\";\n  encode[\"Y\"] = \"10010011\";\n  encode[\"Z\"] = \"10010000\";\n\n  decode[\"00000\"] = \"A\";\n  decode[\"00001\"] = \"B\";\n  decode[\"00010\"] = \"C\";\n  decode[\"00011\"] = \"D\";\n  decode[\"00100\"] = \"E\";\n  decode[\"00101\"] = \"F\";\n  decode[\"00110\"] = \"G\";\n\n  decode[\"00111\"] = \"H\";\n  decode[\"01000\"] = \"I\";\n  decode[\"01001\"] = \"J\";\n  decode[\"01010\"] = \"K\";\n  decode[\"01011\"] = \"L\";\n  decode[\"01100\"] = \"M\";\n  decode[\"01101\"] = \"N\";\n\n  decode[\"01110\"] = \"O\";\n  decode[\"01111\"] = \"P\";\n  decode[\"10000\"] = \"Q\";\n  decode[\"10001\"] = \"R\";\n  decode[\"10010\"] = \"S\";\n  decode[\"10011\"] = \"T\";\n  decode[\"10100\"] = \"U\";\n\n  decode[\"10101\"] = \"V\";\n  decode[\"10110\"] = \"W\";\n  decode[\"10111\"] = \"X\";\n  decode[\"11000\"] = \"Y\";\n  decode[\"11001\"] = \"Z\";\n\n  decode[\"11010\"] = \" \";\n  decode[\"11011\"] = \".\";\n  decode[\"11100\"] = \",\";\n  decode[\"11101\"] = \"-\";\n  decode[\"11110\"] = \"'\";\n  decode[\"11111\"] = \"?\";\n\n  while(getline(cin,str)) {\n\n    string enc=\"\";\n\n    for(int i=0;i<str.size();i++) {\n\n      enc+=encode[str.substr(i,1)];\n\n    }\n\n    enc+=\"0000\";\n\n    string dec=\"\";\n\n    for(int i=0;i+5<enc.size();i+=5) {\n\n      dec+=decode[enc.substr(i,5)];\n\n    }\n\n    cout << dec << endl;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <map>\nusing namespace std;\n\nstring i_to_05b(unsigned int n){\n\tstring s = \"\";\n\tdo{\n\t\tchar c = (n & 1U) + '0' ;\n\t\ts.push_back( c );\n\t\tn >>= 1;\n\t}while( n != 0 );\n\n\twhile( s.size() < 5 )\n\t\ts.push_back('0');\n\treverse( s.begin() , s.end() );\n\t\n\treturn s;\n}\n\nvoid makeTable1(map<char,string>& table1){\n\ttable1[' ']  = \"101\";\n\ttable1['\\''] = \"000000\";\n\ttable1[',']  = \"000011\";\n\ttable1['-']  = \"10010001\";\n\ttable1['.']  = \"010001\";\n\ttable1['?']  = \"000001\";\n\ttable1['A']  = \"100101\";\n\ttable1['B']  = \"10011010\";\n\ttable1['C']  = \"0101\";\n\ttable1['D']  = \"0001\";\n\ttable1['E']  = \"110\";\n\ttable1['F']  = \"01001\";\n\ttable1['G']  = \"10011011\";\n\ttable1['H']  = \"010000\";\n\ttable1['I']  = \"0111\";\n\ttable1['J']  = \"10011000\";\n\ttable1['K']  = \"0110\";\n\ttable1['L']  = \"00100\";\n\ttable1['M']  = \"10011001\";\n\ttable1['N']  = \"10011110\";\n\ttable1['O']  = \"00101\";\n\ttable1['P']  = \"111\";\n\ttable1['Q']  = \"10011111\";\n\ttable1['R']  = \"1000\";\n\ttable1['S']  = \"00110\";\n\ttable1['T']  = \"00111\";\n\ttable1['U']  = \"10011100\";\n\ttable1['V']  = \"10011101\";\n\ttable1['W']  = \"000010\";\n\ttable1['X']  = \"10010010\";\n\ttable1['Y']  = \"10010011\";\n\ttable1['Z']  = \"10010000\";\n}\n\nvoid makeTable2(map<string,char>& table2){\n\tfor(char c = 'A' ; c <= 'Z' ; ++c){\n\t\ttable2[ i_to_05b( (int)(c - 'A') ) ] = c;\n\t}\n\ttable2[\"11010\"] = ' ';\n\ttable2[\"11011\"] = '.';\n\ttable2[\"11100\"] = ',';\n\ttable2[\"11101\"] = '-';\n\ttable2[\"11110\"] = '\\'';\n\ttable2[\"11111\"] = '?';\n}\n\nstring encode(string p, map<char,string> table1){\n\t\n\tstring c = \"\";\n\tfor(int i=0 ; i<p.size() ; ++i ){\n\t\tc += table1[ p[i] ];\n\t}\n\treturn c;\n}\nstring decode(string c , map<string,char> table2){\n\tstring p = \"\";\n\twhile( c.size() % 5 != 0){\n\t\tc.push_back('0');\n\t}\n\tfor(int i=0 ; i+5 <= c.size() ; i += 5 ){\n\t\tp.push_back( table2[ c.substr( i , 5 ) ] );\n\t}\n\treturn p;\n}\n\nint main(){\n\tstring p;\n\tmap<char,string> table1;\n\tmap<string,char> table2;\n\tmakeTable1(table1);\n\tmakeTable2(table2);\n\n\twhile( getline( cin , p ) ){\n\t\t//cout << decode( \"000000000100\" , table2 ) << endl;\n\t\tcout << decode( encode( p , table1 ) , table2 ) << endl;\n\t\t//cout << decode( encode( \"PETER POTTER\" , table1 ) , table2) << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar t[32][12]={\n\t\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n\t\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\n\t\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\n\t\"10010011\",\"10010000\",\n\t\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\"\n};\n\nint main(void){\n\tint i,j;\n\tchar c,s[2048],f[8],*e;\n\n\twhile(1){\n\t\ti = 0;\n\t\twhile(1){\n\t\t\tc = getchar();\n\n\t\t\tif(c==EOF) return 0;\n\t\t\telse if(c=='\\n') break;\n\t\t\telse if(isalpha(c)) j = c - 'A';\n\t\t\telse if(c==' ') j = 26;\n\t\t\telse if(c=='\\'') j = 27;\n\t\t\telse if(c==',') j = 28;\n\t\t\telse if(c=='-') j = 29;\n\t\t\telse if(c=='.') j = 30;\n\t\t\telse j = 31;\n\n\t\t\tstrcpy(&s[i],t[j]);\n\t\t\ti += strlen(t[j]);\n\t\t}\n\t\tif(i % 5 != 0){\n\t\t\tfor(;i%5!=0;i++) s[i] = '0';\n\t\t\ts[i] = 0;\n\t\t}\n\n\t\tfor(i=0;s[i]!=0;i+=5){\n\t\t\tstrncpy(f,&s[i],5);\n\t\t\tf[5] = 0;\n\n\t\t\tj = strtol(f,&e,2);\n\n\t\t\tif(j<26) putchar('A'+j);\n\t\t\telse if(j==26) putchar(' ');\n\t\t\telse if(j==27) putchar('.');\n\t\t\telse if(j==28) putchar(',');\n\t\t\telse if(j==29) putchar('-');\n\t\t\telse if(j==30) putchar('\\'');\n\t\t\telse putchar('?');\n\t\t}\n\n\t\tputchar('\\n');\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tif(s.empty() || cin.eof()){\n\t\t\tthrow 0;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\n\n#define rep(i,n) for(int i = 0;i<n;i++)\n#define REP(n) rep(i,n)\n#define foreach(p,t,r) for(p<t>::iterator it = r.begin();it!=r.end();++it)\n#define all(n) n.begin(),n.end()\n\nint main()\n{\n    map<char, string> stod;\n    typedef pair<char, string> pp;\n    stod.insert(pp(' ', \"101\"));\n    stod.insert(pp('\\'', \"000000\"));\n    stod.insert(pp(',',\"000011\"));\n    stod.insert(pp('-', \"10010001\"));\n    stod.insert(pp('.', \"010001\"));\n    stod.insert(pp('\\?', \"000001\"));\n    stod.insert(pp('A', \"100101\"));\n    stod.insert(pp('B', \"10011010\"));\n    stod.insert(pp('C', \"0101\"));\n    stod.insert(pp('D', \"0001\"));\n    stod.insert(pp('E', \"110\"));\n    stod.insert(pp('F', \"01001\"));\n    stod.insert(pp('G', \"10011011\"));\n    stod.insert(pp('H', \"010000\"));\n    stod.insert(pp('I', \"0111\"));\n    stod.insert(pp('J', \"10011000\"));\n    stod.insert(pp('K', \"0110\"));\n    stod.insert(pp('L', \"00100\"));\n    stod.insert(pp('M', \"10011001\"));\n    stod.insert(pp('N', \"10011110\"));\n    stod.insert(pp('O', \"00101\"));\n    stod.insert(pp('P', \"111\"));\n    stod.insert(pp('Q', \"10011111\"));\n    stod.insert(pp('R', \"1000\"));\n    stod.insert(pp('S', \"00110\"));\n    stod.insert(pp('T', \"00111\"));\n    stod.insert(pp('U', \"10011100\"));\n    stod.insert(pp('V', \"10011101\"));\n    stod.insert(pp('W', \"000010\"));\n    stod.insert(pp('X', \"10010010\"));\n    stod.insert(pp('Y', \"10010011\"));\n    stod.insert(pp('Z', \"10010000\"));\n/*    for(map<char, string>::iterator it = stod.begin();it!=stod.end();++it)\n        cout << (*it).first << \" \" << (*it).second << endl;*/\n    map<string, char> dtos;\n    typedef pair<string, char> p;\n    dtos.insert(p(\"00000\", 'A'));\n    dtos.insert(p(\"00001\", 'B'));\n    dtos.insert(p(\"00010\", 'C'));\n    dtos.insert(p(\"00011\", 'D'));\n    dtos.insert(p(\"00100\", 'E'));\n    dtos.insert(p(\"00101\", 'F'));\n    dtos.insert(p(\"00110\", 'G'));\n    dtos.insert(p(\"00111\", 'H'));\n    dtos.insert(p(\"01000\", 'I'));\n    dtos.insert(p(\"01001\", 'J'));\n    dtos.insert(p(\"01010\", 'K'));\n    dtos.insert(p(\"01011\", 'L'));\n    dtos.insert(p(\"01100\", 'M'));\n    dtos.insert(p(\"01101\", 'N'));\n    dtos.insert(p(\"01110\", 'O'));\n    dtos.insert(p(\"01111\", 'P'));\n    dtos.insert(p(\"10000\", 'Q'));\n    dtos.insert(p(\"10001\", 'R'));\n    dtos.insert(p(\"10010\", 'S'));\n    dtos.insert(p(\"10011\", 'T'));\n    dtos.insert(p(\"10100\", 'U'));\n    dtos.insert(p(\"10101\", 'V'));\n    dtos.insert(p(\"10110\", 'W'));\n    dtos.insert(p(\"10111\", 'X'));\n    dtos.insert(p(\"11000\", 'Y'));\n    dtos.insert(p(\"11001\", 'Z'));\n    dtos.insert(p(\"11010\", ' '));\n    dtos.insert(p(\"11011\", '.'));\n    dtos.insert(p(\"11100\", ','));\n    dtos.insert(p(\"11101\", '-'));\n    dtos.insert(p(\"11110\", '\\''));\n    dtos.insert(p(\"11111\", '\\?'));\n\n    /*for(map<string, char>::iterator it = dtos.begin();it!=dtos.end();++it)\n        cout << (*it).first << \" \" << (*it).second << endl;*/\n    \n    string s;\n    while(getline(cin, s))\n    {\n        string d;\n        REP(s.size()) d += stod[s[i]];\n\n        while(d.size() % 5) d += \"0\";\n\n        string ans;\n        REP(d.size() / 5)\n            ans += dtos[d.substr(i*5, 5)];\n\n        cout << ans << endl;\n\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <map>\nusing namespace std;\n\nstring change1(string s){\n  map<char, string> p;\n  p[' '] = \"101\";\n  p['\\''] = \"000000\";\n  p[','] = \"000011\";\n  p['~'] = \"10010001\";\n  p['.'] = \"010001\";\n  p['?'] = \"000001\";\n  p['A'] = \"100101\";\n  p['B'] = \"10011010\";\n  p['C'] = \"0101\";\n  p['D'] = \"0001\";\n  p['E'] = \"110\";\n  p['F'] = \"01001\";\n  p['G'] = \"10011011\";\n  p['H'] = \"010000\";\n  p['I'] = \"0111\";\n  p['J'] = \"10011000\";\n  p['K'] = \"0110\";\n  p['L'] = \"00100\";\n  p['M'] = \"10011001\";\n  p['N'] = \"10011110\";\n  p['O'] = \"00101\";\n  p['P'] = \"111\";\n  p['Q'] = \"10011111\";\n  p['R'] = \"1000\";\n  p['S'] = \"00110\";\n  p['T'] = \"00111\";\n  p['U'] = \"10011100\";\n  p['V'] = \"10011101\";\n  p['W'] = \"000010\";\n  p['X'] = \"10010010\";\n  p['Y'] = \"10010011\";\n  p['Z'] = \"10010000\";\n  string res = \"\";\n  for(int i = 0 ; i < s.size() ; i++) res += p[s[i]];\n  while(res.size() % 5 != 0) res += '0';\n  return res;\n}\n\nstring change2(string s){\n  map<string, char> p;\n  p[\"00000\"] = 'A';\n  p[\"00001\"] = 'B';\n  p[\"00010\"] = 'C';\n  p[\"00011\"] = 'D';\n  p[\"00100\"] = 'E';\n  p[\"00101\"] = 'F';\n  p[\"00110\"] = 'G';\n  p[\"00111\"] = 'H';\n  p[\"01000\"] = 'I';\n  p[\"01001\"] = 'J';\n  p[\"01010\"] = 'K';\n  p[\"01011\"] = 'L';\n  p[\"01100\"] = 'M';\n  p[\"01101\"] = 'N';\n  p[\"01110\"] = 'O';\n  p[\"01111\"] = 'P';\n  p[\"10000\"] = 'Q';\n  p[\"10001\"] = 'R';\n  p[\"10010\"] = 'S';\n  p[\"10011\"] = 'T';\n  p[\"10100\"] = 'U';\n  p[\"10101\"] = 'V';\n  p[\"10110\"] = 'W';\n  p[\"10111\"] = 'X';\n  p[\"11000\"] = 'Y';\n  p[\"11001\"] = 'Z';\n  p[\"11010\"] = ' ';\n  p[\"11011\"] = '.';\n  p[\"11100\"] = ',';\n  p[\"11101\"] = '-';\n  p[\"11110\"] = '\\'';\n  p[\"11111\"] = '?';\n  \n  string res = \"\";\n  for(int i = 0 ; i < s.size() ; i+=5) res += p[s.substr(i, 5)];\n  return res;\n}\n\nint main(){\n  string s;\n  while(getline(cin, s)){\n    s = change1(s);\n    s = change2(s);\n    cout << s << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n  string map[1000];\n  map['A']=\"100101\"; map['B']=\"10011010\"; map['C']=\"0101\"; map['D']=\"0001\";\n  map['E']=\"110\"; map['F']=\"01001\"; map['G']=\"10011011\"; map['H']=\"010000\";\n  map['I']=\"0111\"; map['J']=\"10011000\"; map['K']=\"0110\"; map['L']=\"00100\";\n  map['M']=\"10011001\"; map['N']=\"10011110\"; map['O']=\"00101\"; map['P']=\"111\";\n  map['Q']=\"10011111\"; map['R']=\"1000\"; map['S']=\"00110\"; map['T']=\"00111\";\n  map['U']=\"10011100\"; map['V']=\"10011101\"; map['W']=\"000010\"; map['X']=\"10010010\";\n  map['Y']=\"10010011\"; map['Z']=\"1001000\"; map[' ']=\"101\"; map['\\'']=\"000000\";\n  map[',']=\"000011\"; map['-']=\"10010001\"; map['.']=\"010001\";\n  string alpha[]={\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\n\t\t  \"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\n\t\t  \"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\n\t\t  \"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"};\n  string altmp=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  string line,chli,ans;\n  getline(cin,line);\n  for(int i=0;i<line.size();i++){\n    chli += map[line[i]];\n  }\n  if(chli.size() % 5 != 0) chli.append(5-chli.size()%5,'0');\n  for(int i=0;i<chli.size();i+=5){\n    string tmp = chli.substr(i,5);\n    for(int j=0;j<32;j++){\n      if(tmp == alpha[j]) ans += altmp[j];\n    }\n  }\n  cout<< ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nstring a[32] = {\"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\"};\nstring b[32] = {\" \", \"'\", \",\", \"-\", \".\", \"?\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\" \"Z\"};\nstring c[32] = {\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"};\nstring d[32] = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \" \", \".\", \",\", \"-\", \"'\", \"?\"};\n\nint main(){\n    string s;\n    map<string, string> p, q;\n    for(int i=0; i< 32; i++){p[b[i]] = a[i]; q[c[i]] = d[i];}\n    while(getline(cin, s)){\n        string t, ret;\n        for(int i=0; i< s.size(); i++) t += p[s.substr(i, 1)];\n        int diff = 5-t.size()%5;\n        if(diff != 5)for(int i=0; i < diff; i++) t+=\"0\";\n        for(int i=0; i < t.size(); i+=5) ret += q[t.substr(i, 5)];\n        cout << ret << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n\tstring tmp;\n\t\twhile(getline(cin, tmp)){\n\t\t\tstring input_str = \"\";\n\t\t\tfor(int i=0; i<tmp.size(); i++){\n\t\t\t\tswitch(tmp[i]){\n\t\t\t\tcase ' ' :input_str += \"101\"\t    ;break;\n\t\t\t\tcase '\\'':input_str += \"000000\"\t\t;break;\n\t\t\t\tcase ',' :input_str += \"000011\"\t\t;break;\n\t\t\t\tcase '-' :input_str += \"10010001\"\t;break;\n\t\t\t\tcase '.' :input_str += \"010001\"\t\t;break;\n\t\t\t\tcase '?' :input_str += \"000001\"\t    ;break;\n\t\t\t\tcase 'A' :input_str += \"100101\"\t\t;break;\n\t\t\t\tcase 'B' :input_str += \"10011010\"\t;break;\n\t\t\t\tcase 'C' :input_str += \"0101\"\t\t;break;\n\t\t\t\tcase 'D' :input_str += \"0001\"\t\t;break;\n\t\t\t\tcase 'E' :input_str += \"110\"\t\t;break;\n\t\t\t\tcase 'F' :input_str += \"01001\"\t\t;break;\n\t\t\t\tcase 'G' :input_str += \"10011011\"\t;break;\n\t\t\t\tcase 'H' :input_str += \"010000\"\t\t;break;\n\t\t\t\tcase 'I' :input_str += \"0111\"\t\t;break;\n\t\t\t\tcase 'J' :input_str += \"10011000\"\t;break;\n\t\t\t\tcase 'K' :input_str += \"0110\"\t\t;break;\n\t\t\t\tcase 'L' :input_str += \"00100\"\t\t;break;\n\t\t\t\tcase 'M' :input_str += \"10011001\"\t;break;\n\t\t\t\tcase 'N' :input_str += \"10011110\"\t;break;\n\t\t\t\tcase 'O' :input_str += \"00101\"\t\t;break;\n\t\t\t\tcase 'P' :input_str += \"111\"\t\t;break;\n\t\t\t\tcase 'Q' :input_str += \"10011111\"\t;break;\n\t\t\t\tcase 'R' :input_str += \"1000\"\t\t;break;\n\t\t\t\tcase 'S' :input_str += \"00110\"\t\t;break;\n\t\t\t\tcase 'T' :input_str += \"00111\"\t\t;break;\n\t\t\t\tcase 'U' :input_str += \"10011100\"\t;break;\n\t\t\t\tcase 'V' :input_str += \"10011101\"\t;break;\n\t\t\t\tcase 'W' :input_str += \"000010\"\t\t;break;\n\t\t\t\tcase 'X' :input_str += \"10010010\"\t;break;\n\t\t\t\tcase 'Y' :input_str += \"10010011\"\t;break;\n\t\t\t\tcase 'Z' :input_str += \"10010000\"\t;break;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twhile(input_str.size()%5 != 0)input_str += '0';\n\t\t\tstring out = \"\";\n\t\t\tfor(int i=0; i<input_str.size(); i+=5){\n\t\t\t\tstring output_str = input_str.substr(i, 5);\n\t\t\t\tif(output_str== \"00000\"){ out += 'A'; }\n\t\t\t\telse if( output_str==\"00001\") { out += 'B';}\t\n\t\t\t\telse if( output_str==\"00010\") { out += 'C';}\t\n\t\t\t\telse if( output_str==\"00011\") { out += 'D';}\t\n\t\t\t\telse if( output_str==\"00100\") { out += 'E';}\t\n\t\t\t\telse if( output_str==\"00101\") { out += 'F';}\t\n\t\t\t\telse if( output_str==\"00110\") { out += 'G';}\t\n\t\t\t\telse if( output_str==\"00111\") { out += 'H';}\t\n\t\t\t\telse if( output_str==\"01000\") { out += 'I';}\t\n\t\t\t\telse if( output_str==\"01001\") { out += 'J';}\t\n\t\t\t\telse if( output_str==\"01010\") { out += 'K';}\t\n\t\t\t\telse if( output_str==\"01011\") { out += 'L';}\t\n\t\t\t\telse if( output_str==\"01100\") { out += 'M';}\t\n\t\t\t\telse if( output_str==\"01101\") { out += 'N';}\t\n\t\t\t\telse if( output_str==\"01110\") { out += 'O';}\t\n\t\t\t\telse if( output_str==\"01111\") { out += 'P';}\t\n\t\t\t\telse if( output_str==\"10000\") { out += 'Q';}\t\n\t\t\t\telse if( output_str==\"10001\") { out += 'R';}\t\n\t\t\t\telse if( output_str==\"10010\") { out += 'S';}\t\n\t\t\t\telse if( output_str==\"10011\") { out += 'T';}\t\n\t\t\t\telse if( output_str==\"10100\") { out += 'U';}\t\n\t\t\t\telse if( output_str==\"10101\") { out += 'V';}\t\n\t\t\t\telse if( output_str==\"10110\") { out += 'W';}\t\n\t\t\t\telse if( output_str==\"10111\") { out += 'X';}\t\n\t\t\t\telse if( output_str==\"11000\") { out += 'Y';}\t\n\t\t\t\telse if( output_str==\"11001\") { out += 'Z';}\t\n\t\t\t\telse if( output_str==\"11010\") { out += ' ';}\t\n\t\t\t\telse if( output_str==\"11011\") { out += '.';}\t\n\t\t\t\telse if( output_str==\"11100\") { out += ',';}\t\n\t\t\t\telse if( output_str==\"11101\") { out += '-';}\t\n\t\t\t\telse if( output_str==\"11110\") { out += '\\'';} \n\t\t\t\telse if( output_str==\"11111\") { out += '?';}\n\t\t\t}\n\t\t\tcout << out << endl;\n\t\t\ttmp.clear(), input_str.clear(), out.clear();\n\t\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include\"bits/stdc++.h\"\nusing namespace std;int main(){string s;while(getline(cin,s)){string c;for(auto i:s)c+=i==' '?\"101\":i=='\\''?\"000000\":i==','?\"000011\":i=='-'?\"10010001\":i=='.'?\"010001\":i=='?'?\"000001\":i=='A'?\"100101\":i=='B'?\"10011010\":i=='C'?\"0101\":i=='D'?\"0001\":i=='E'?\"110\":i=='F'?\"01001\":i=='G'?\"10011011\":i=='H'?\"010000\":i=='I'?\"0111\":i=='J'?\"10011000\":i=='K'?\"0110\":i=='L'?\"00100\":i=='M'?\"10011001\":i=='N'?\"10011110\":i=='O'?\"00101\":i=='P'?\"111\":i=='Q'?\"10011111\":i=='R'?\"1000\":i=='S'?\"00110\":i=='T'?\"00111\":i=='U'?\"10011100\":i=='V'?\"10011101\":i=='W'?\"000010\":i=='X'?\"10010010\":i=='Y'?\"10010011\":\"10010000\";for(int j=0,k=c.length();j<(5-k%5)%5;++j)c+='0';for(int j=0;j<c.length();j+=5){int b=(c[j]-'0')*16+(c[j+1]-'0')*8+(c[j+2]-'0')*4+(c[j+3]-'0')*2+(c[j+4]-'0');cout<<(b<26?(char)('A'+b):\" .,-'?\"[b-26]);}cout<<endl;}}\n"
  },
  {
    "language": "C++",
    "code": "import Debug.Trace\n\ncharToCode :: Char -> String\ncharToCode c = case c of\n    ' ' ->\"101\"\n    '\\''->\"000000\"\n    ',' ->\"000011\"\n    '-' ->\"10010001\"\n    '.' ->\"010001\"\n    '?' ->\"000001\"\n    'A' ->\"100101\"\n    'B' ->\"10011010\"\n    'C' ->\"0101\"\n    'D' ->\"0001\"\n    'E' ->\"110\"\n    'F' ->\"01001\"\n    'G' ->\"10011011\"\n    'H' ->\"010000\"\n    'I' ->\"0111\"\n    'J' ->\"10011000\"\n    'K' ->\"0110\"\n    'L' ->\"00100\"\n    'M' ->\"10011001\"\n    'N' ->\"10011110\"\n    'O' ->\"00101\"\n    'P' ->\"111\"\n    'Q' ->\"10011111\"\n    'R' ->\"1000\"\n    'S' ->\"00110\"\n    'T' ->\"00111\"\n    'U' ->\"10011100\"\n    'V' ->\"10011101\"\n    'W' ->\"000010\"\n    'X' ->\"10010010\"\n    'Y' ->\"10010011\"\n    'Z' ->\"10010000\"\n\ncodeToChar :: String->Char\ncodeToChar s = case s of\n    \"00000\"->'A'\n    \"00001\"->'B'\n    \"00010\"->'C'\n    \"00011\"->'D'\n    \"00100\"->'E'\n    \"00101\"->'F'\n    \"00110\"->'G'\n    \"00111\"->'H'\n    \"01000\"->'I'\n    \"01001\"->'J'\n    \"01010\"->'K'\n    \"01011\"->'L'\n    \"01100\"->'M'\n    \"01101\"->'N'\n    \"01110\"->'O'\n    \"01111\"->'P'\n    \"10000\"->'Q'\n    \"10001\"->'R'\n    \"10010\"->'S'\n    \"10011\"->'T'\n    \"10100\"->'U'\n    \"10101\"->'V'\n    \"10110\"->'W'\n    \"10111\"->'X'\n    \"11000\"->'Y'\n    \"11001\"->'Z'\n    \"11010\"->' '\n    \"11011\"->'.'\n    \"11100\"->','\n    \"11101\"->'-'\n    \"11110\"->'\\''\n    \"11111\"->'?'\n\nsolve :: String -> String\nsolve s = solve' code'\n    where code = concat $ map charToCode s\n          mod5 = (length code) `mod` 5\n          n0 = if mod5==0 then 0 else (5-mod5)\n          code' = code ++ (take n0 $ repeat '0')\n\nsolve' :: String -> String\nsolve' \"\" = \"\"\nsolve' code' = (codeToChar x):(solve' xs)\n    where x = take 5 code'\n          xs = drop 5 code'\n\nmain :: IO ()\nmain = do\n    str <- getContents\n    mapM_ putStrLn $ map solve $ lines $ str"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cassert>\n#include <cctype>\n#include <complex>\n#include <cstdio>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <vector>\nusing namespace std;\n\n#define rep(i,n) for(int i=0;i<n;i++)\n\nstring s,t,c[]={\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\nint main(){\n\twhile(getline(cin,s)){\n\t\tt=\"\";\n\t\tint cur=0;\n\t\twhile(cur<s.size()){\n\t\t\tif(s[cur]==' ')t+=\"101\";\n\t\t\tif(s[cur]=='\\'')t+=\"000000\";\n\t\t\tif(s[cur]==',')t+=\"000011\";\n\t\t\tif(s[cur]=='-')t+=\"10010001\";\n\t\t\tif(s[cur]=='.')t+=\"010001\";\n\t\t\tif(s[cur]=='?')t+=\"000001\";\n\t\t\tif(s[cur]>='A'&&s[cur]<='Z')t+=c[s[cur]-'A'];\n\t\t\tcur++;\n\t\t}\n\t\tif(t.size()%5)rep(i,5-t.size()%5)t+=\"0\";\n\t\trep(i,t.size())t[i]-='0';\n\t\tcur=0;\n\t\ts=\"\";\n\t\twhile(cur<t.size()){\n\t\t\tint a=t[cur]*16+t[cur+1]*8+t[cur+2]*4+t[cur+3]*2+t[cur+4];\n\t\t\tif(a<=25)s+='A'+a;\n\t\t\tif(a==26)s+=' ';\n\t\t\tif(a==27)s+='.';\n\t\t\tif(a==28)s+=',';\n\t\t\tif(a==29)s+='-';\n\t\t\tif(a==30)s+='\\'';\n\t\t\tif(a==31)s+='?';\n\t\t\tcur+=5;\n\t\t}\n\t\tcout<<s<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\nusing namespace std;\nstring s;\nmap<char,string>A;\nmap<string,char>B;\nmain()\n{\n\tA[' ']=\"101\";\n\tA['\\'']=\"000000\";\n\tA[',']=\"000011\";\n\tA['-']=\"10010001\";\n\tA['.']=\"010001\";\n\tA['?']=\"000001\";\n\tA['A']=\"100101\";\n\tA['B']=\"10011010\";\n\tA['C']=\"0101\";\n\tA['D']=\"0001\";\n\tA['E']=\"110\";\n\tA['F']=\"01001\";\n\tA['G']=\"10011011\";\n\tA['H']=\"010000\";\n\tA['I']=\"0111\";\n\tA['J']=\"10011000\";\n\tA['K']=\"0110\";\n\tA['L']=\"00100\";\n\tA['M']=\"10011001\";\n\tA['N']=\"10011110\";\n\tA['O']=\"00101\";\n\tA['P']=\"111\";\n\tA['Q']=\"10011111\";\n\tA['R']=\"1000\";\n\tA['S']=\"00110\";\n\tA['T']=\"00111\";\n\tA['U']=\"10011100\";\n\tA['V']=\"10011101\";\n\tA['W']=\"000010\";\n\tA['X']=\"10010010\";\n\tA['Y']=\"10010011\";\n\tA['Z']=\"10010000\";\n\tB[\"00000\"]='A';\n\tB[\"00001\"]='B';\n\tB[\"00010\"]='C';\n\tB[\"00011\"]='D';\n\tB[\"00100\"]='E';\n\tB[\"00101\"]='F';\n\tB[\"00110\"]='G';\n\tB[\"00111\"]='H';\n\tB[\"01000\"]='I';\n\tB[\"01001\"]='J';\n\tB[\"01010\"]='K';\n\tB[\"01011\"]='L';\n\tB[\"01100\"]='M';\n\tB[\"01101\"]='N';\n\tB[\"01110\"]='O';\n\tB[\"01111\"]='P';\n\tB[\"10000\"]='Q';\n\tB[\"10001\"]='R';\n\tB[\"10010\"]='S';\n\tB[\"10011\"]='T';\n\tB[\"10100\"]='U';\n\tB[\"10101\"]='V';\n\tB[\"10110\"]='W';\n\tB[\"10111\"]='X';\n\tB[\"11000\"]='Y';\n\tB[\"11001\"]='Z';\n\tB[\"11010\"]=' ';\n\tB[\"11011\"]='.';\n\tB[\"11100\"]=',';\n\tB[\"11101\"]='-';\n\tB[\"11110\"]='\\'';\n\tB[\"11111\"]='?';\n\tB[\"0000\"]='A';\n\tB[\"0001\"]='C';\n\tB[\"0011\"]='G';\n\tB[\"0101\"]='K';\n\tB[\"0111\"]='O';\n\tB[\"1001\"]='S';\n\tB[\"1011\"]='W';\n\tB[\"1101\"]=' ';\n\tB[\"1111\"]='\\'';\n\tB[\"000\"]='A';\n\tB[\"001\"]='E';\n\tB[\"011\"]='M';\n\tB[\"101\"]='U';\n\tB[\"111\"]=',';\n\tB[\"00\"]='A';\n\tB[\"01\"]='I';\n\tB[\"11\"]='Y';\n\tB[\"0\"]='A';\n\tB[\"1\"]='Q';\n\twhile(getline(cin,s))\n\t{\n\t\tstring t=\"\";\n\t\tfor(int i=0;i<s.size();i++)t+=A[s[i]];\n\t\tfor(int i=0;i<t.size();i+=5)cout<<B[t.substr(i,5)];\n\t\tcout<<endl;\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <string>\nusing namespace std;\nstring L=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",A=\" ',-.?\"+L,C=L+\" .,-'?\",\n\tB[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\n\t\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\t\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n\t\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\nint bin2dec(string s){\n\tint x=0,i=0;\n\tfor(;i<s.size();i++)x=x*2+s[i]-'0';\n\treturn x;\n}\nint main(){\n\tstring s,s1;\n\tint i;\n\twhile(getline(cin,s)){\n\t\ts1=\"\";\n\t\tfor(i=0;i<s.size();i++)s1+=B[A.find(s[i])];\n\t\ti=s1.size()%5;\n\t\tif(i!=0)s1+=string(5-i,'0');\n\t\ts=\"\";\n\t\tfor(i=0;i<s1.size();i+=5)s+=C[bin2dec(s1.substr(i,5))];\n\t\tcout<<s<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\n#include<queue>\n#include<map>\n#include<string>\nusing namespace std;\nchar word[100]={' ','\\'',',','-','.','?','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\nchar words[100]={' ','.',',','-','\\'','?'};\nstring decord[100]={\n    \"101\",\n    \"000000\",\n    \"000011\",\n    \"10010001\",\n    \"010001\",\n    \"000001\",\n    \"100101\",\n    \"10011010\",\n    \"0101\",\n    \"0001\",\n    \"110\",\n    \"01001\",\n    \"10011011\",\n    \"010000\",\n    \"0111\",\n    \"10011000\",\n    \"0110\",\n    \"00100\",\n    \"10011001\",\n    \"10011110\",\n    \"00101\",\n    \"111\",\n    \"10011111\",\n    \"1000\",\n    \"00110\",\n    \"00111\",\n    \"10011100\",\n    \"10011101\",\n    \"000010\",\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n};\nstring encord[100]={\n    \"00000\",\n    \"00001\",\n    \"00010\",\n    \"00011\",\n    \"00100\",\n    \"00101\",\n    \"00110\",\n    \"00111\",\n    \"01000\",\n    \"01001\",\n    \"01010\",\n    \"01011\",\n    \"01100\",\n    \"01101\",\n    \"01110\",\n    \"01111\",\n    \"10000\",\n    \"10001\",\n    \"10010\",\n    \"10011\",\n    \"10100\",\n    \"10101\",\n    \"10110\",\n    \"10111\",\n    \"11000\",\n    \"11001\",\n    \"11010\",\n    \"11011\",\n    \"11100\",\n    \"11101\",\n    \"11110\",\n    \"11111\"\n};\nstring checkdecord(char moji){\n    string ans;\n    for(int i=0;i<32;i++){\n        if(moji==word[i]){\n            ans=decord[i];\n        }\n    }\n    return ans;\n}\nint main(){\n    while(1){\n        map<string,char> maps;\n        int k=5;\n        int l;\n        for(int i=0;i<32;i++){\n            k++;\n            if(k>=32){\n                l=k-32;\n                maps[encord[i]] = words[l];\n            }else{\n                maps[encord[i]] = word[k];\n            }\n        }\n        string hoge;\n        char name[100]={0};\n        getchar();\n        scanf(\"%[^\\n]\",name);\n        if(name[0]=='\\0')break;\n        queue<char> que;\n        //scanf(\"%[^\\n]\",name);\n        for(int i=0;;i++){\n            if(name[i]=='\\0')break;\n            hoge = checkdecord(name[i]);\n            for(int j=0;;j++){\n                if(hoge[j]=='\\0')break;\n                que.push(hoge[j]);\n            }\n        }\n        string encordword,encordstring;\n        for(int i=0;;i++){\n            if(que.empty())break;\n            for(int j=0;j<5;j++){\n                encordword += que.front();\n                que.pop();\n                if(que.empty()){\n                    for(;;){\n                    j++;\n                    encordword +='0';\n                    if(j==4)break;\n                    }\n                }\n            }\n            encordstring += maps[encordword];\n            encordword=\"\";\n        }\n        cout<<encordstring<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\n\nstd::string encode(char c){\n    if(c == ' ') return \"101\";\n    if(c == '\\'') return \"000000\";\n    if(c == ',') return \"000011\";\n    if(c == '-') return \"10010001\";\n    if(c == '.') return \"010001\";\n    if(c == '?') return \"000001\";\n    if(c == 'A') return \"100101\";\n    if(c == 'B') return \"10011010\";\n    if(c == 'C') return \"0101\";\n    if(c == 'D') return \"0001\";\n    if(c == 'E') return \"110\";\n    if(c == 'F') return \"01001\";\n    if(c == 'G') return \"10011011\";\n    if(c == 'H') return \"010000\";\n    if(c == 'I') return \"0111\";\n    if(c == 'J') return \"10011000\";\n    if(c == 'K') return \"0110\";\n    if(c == 'L') return \"00100\";\n    if(c == 'M') return \"10011001\";\n    if(c == 'N') return \"10011110\";\n    if(c == 'O') return \"00101\";\n    if(c == 'P') return \"111\";\n    if(c == 'Q') return \"10011111\";\n    if(c == 'R') return \"1000\";\n    if(c == 'S') return \"00110\";\n    if(c == 'T') return \"00111\";\n    if(c == 'U') return \"10011100\";\n    if(c == 'V') return \"10011101\";\n    if(c == 'W') return \"000010\";\n    if(c == 'X') return \"10010010\";\n    if(c == 'Y') return \"10010011\";\n    if(c == 'Z') return \"10010000\";\n    return \"\";\n}\n\nstd::string encode2(std::string s){\n    if(s == \"00000\") return \"A\";\n    if(s == \"00001\") return \"B\";\n    if(s == \"00010\") return \"C\";\n    if(s == \"00011\") return \"D\";\n    if(s == \"00100\") return \"E\";\n    if(s == \"00101\") return \"F\";\n    if(s == \"00110\") return \"G\";\n    if(s == \"00111\") return \"H\";\n    if(s == \"01000\") return \"I\";\n    if(s == \"01001\") return \"J\";\n    if(s == \"01010\") return \"K\";\n    if(s == \"01011\") return \"L\";\n    if(s == \"01100\") return \"M\";\n    if(s == \"01101\") return \"N\";\n    if(s == \"01110\") return \"O\";\n    if(s == \"01111\") return \"P\";\n    if(s == \"10000\") return \"Q\";\n    if(s == \"10001\") return \"R\";\n    if(s == \"10010\") return \"S\";\n    if(s == \"10011\") return \"T\";\n    if(s == \"10100\") return \"U\";\n    if(s == \"10101\") return \"V\";\n    if(s == \"10110\") return \"W\";\n    if(s == \"10111\") return \"X\";\n    if(s == \"11000\") return \"Y\";\n    if(s == \"11001\") return \"Z\";\n    if(s == \"11010\") return \" \";\n    if(s == \"11011\") return \".\";\n    if(s == \"11100\") return \",\";\n    if(s == \"11101\") return \"-\";\n    if(s == \"11110\") return \"'\";\n    if(s == \"11111\") return \"?\";\n    return \"\";\n}\n\nint main(){\n    std::string str, tmp, ans;\n    while(getline(std::cin, str)){\n        tmp = \"\", ans = \"\";\n        for(int i = 0; i < str.size(); i++){\n            tmp += encode(str[i]);\n        }\n\n        int n = 5 - (tmp.size() % 5);\n        for(int i = 0; i < n; i++) tmp += \"0\";\n\n        for(int i = 0; i < tmp.size() / 5; i++){\n            ans += encode2(tmp.substr(i * 5, 5));\n        }\n\n        std::cout << ans << std::endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring h = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ ',-.?\";\nchar d[36] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nchar e[36][12] = {\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\"};\n\nchar conv(string s){\n    int ans = 0;\n    string::iterator it = s.begin();\n    for(int n = 0; n < 5; n++){\n        if( it == s.end() ) continue;\n        ans *= 2;\n        ans += *it - '0';\n        it++;\n    }\n    return d[ans];\n\n}\n\nint main(){\n    string s;\n    while( getline(cin, s) ){\n        string c;\n        c = string(\"\");\n        for(int i = 0; i < s.size(); i++){\n            cout << e[h.find(s[i])] << endl;\n            c += e[h.find(s[i])];\n        }\n        c += string(4-(c.size()+4)%5, '0');\n        for(int i = 0; i < c.size()/5; i++){\n            cout << conv( c.substr(i*5, 5) );\n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\nusing namespace std;\n\nstring convert( char c ) \n{\n    map <char, string> list;\n    list[' '] = \"101\";\n    list['\\''] = \"000000\";\n    list[','] = \"000011\";\n    list['-'] = \"10010001\";\n    list['.'] = \"010001\";\n    list['?'] = \"000001\";\n    list['A'] = \"100101\";\n    list['B'] = \"10011010\";\n    list['C'] = \"0101\";\n    list['D'] = \"0001\";\n    list['E'] = \"110\";\n    list['F'] = \"01001\";\n    list['G'] = \"10011011\";\n    list['H'] = \"010000\";\n    list['I'] = \"0111\";\n    list['J'] = \"10011000\";\n    list['K'] = \"0110\";\n    list['L'] = \"00100\";\n    list['M'] = \"10011001\";\n    list['N'] = \"10011110\";\n    list['O'] = \"00101\";\n    list['P'] = \"111\";\n    list['Q'] = \"10011111\";\n    list['R'] = \"1000\";\n    list['S'] = \"00110\";\n    list['T'] = \"00111\";\n    list['U'] = \"10011100\";\n    list['V'] = \"10011101\";\n    list['W'] = \"000010\";\n    list['X'] = \"10010010\";\n    list['Y'] = \"10010011\";\n    list['Z'] = \"10010000\";\n    return list[c];\n}\n\nchar convert( string code )\n{\n    map <string, char> list;\n    list[\"00000\"] = 'A';\n    list[\"00001\"] = 'B';\n    list[\"00010\"] = 'C';\n    list[\"00011\"] = 'D';\n    list[\"00100\"] = 'E';\n    list[\"00101\"] = 'F';\n    list[\"00110\"] = 'G';\n    list[\"00111\"] = 'H';\n    list[\"01000\"] = 'I';\n    list[\"01001\"] = 'J';\n    list[\"01010\"] = 'K';\n    list[\"01011\"] = 'L';\n    list[\"01100\"] = 'M';\n    list[\"01101\"] = 'N';\n    list[\"01110\"] = 'O';\n    list[\"01111\"] = 'P';\n    list[\"10000\"] = 'Q';\n    list[\"10001\"] = 'R';\n    list[\"10010\"] = 'S';\n    list[\"10011\"] = 'T';\n    list[\"10100\"] = 'U';\n    list[\"10101\"] = 'V';\n    list[\"10110\"] = 'W';\n    list[\"10111\"] = 'X';\n    list[\"11000\"] = 'Y';\n    list[\"11001\"] = 'Z';\n    list[\"11010\"] = ' ';\n    list[\"11011\"] = '.';\n    list[\"11100\"] = ',';\n    list[\"11101\"] = '-';\n    list[\"11110\"] = '\\'';\n    list[\"11111\"] = '?';\n    return list[code];\n}\n\nint main( void )\n{\n    string line;\n    getline( cin, line );\n    \n    string str1 = line;\n    string str2 = \"\";\n    for ( string ::iterator it = str1.begin(); it != str1.end(); ++it ) {\n        str2 += convert( *it );\n    }\n    string app( 5-(str2.size()%5), '0' );\n    str2 += app;\n\n    string str3 = \"\";\n    for ( int i = 0; i < (int)str2.size(); i += 5 ) {\n        char c = convert( str2.substr( i, 5 ) );\n        str3 += c;\n    }\n\n    cout << str3 << endl;\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  char *p;\n  i = 0;\n  while(gets(e)) {\n    j = 0;\n    while(e[j]) d[i++] = e[j++];\n    d[i++] = ' ';\n  }\n  /*\n  d[i - 1] = '\\0';\n  i = 0;\n  j = 0;\n  while(d[i]) {\n    k = 0;\n    while(a[k] != d[i]) k++;\n    p = b[k];\n    while(*p) e[j++] = *p++;\n    i++;\n  }\n  i = 5 - j % 5;\n  while(i--) e[j++] = '0';\n  e[j] = '\\0';\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  */\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n  string src, tmp, dst;\n  cin >> src;\n  while (cin >> tmp)\n    src += (' ' + tmp);\n\n  stringstream ss;\n  for (int i = 0; i < src.size(); i++)\n    if (src[i] == ' ')\n      ss << \"101\";\n    else if (src[i] == '\\'')\n      ss << \"000000\";\n    else if (src[i] == ',')\n      ss << \"000011\";\n    else if (src[i] == '-')\n      ss << \"10010001\";\n    else if (src[i] == '.')\n      ss << \"010001\";\n    else if (src[i] == '?')\n      ss << \"000001\";\n    else if (src[i] == 'A')\n      ss << \"100101\";\n    else if (src[i] == 'B')\n      ss << \"10011010\";\n    else if (src[i] == 'C')\n      ss << \"0101\";\n    else if (src[i] == 'D')\n      ss << \"0001\";\n    else if (src[i] == 'E')\n      ss << \"110\";\n    else if (src[i] == 'F')\n      ss << \"01001\";\n    else if (src[i] == 'G')\n      ss << \"10011011\";\n    else if (src[i] == 'H')\n      ss << \"010000\";\n    else if (src[i] == 'I')\n      ss << \"0111\";\n    else if (src[i] == 'J')\n      ss << \"10011000\";\n    else if (src[i] == 'K')\n      ss << \"0110\";\n    else if (src[i] == 'L')\n      ss << \"00100\";\n    else if (src[i] == 'M')\n      ss << \"10011001\";\n    else if (src[i] == 'N')\n      ss << \"10011110\";\n    else if (src[i] == 'O')\n      ss << \"00101\";\n    else if (src[i] == 'P')\n      ss << \"111\";\n    else if (src[i] == 'Q')\n      ss << \"10011111\";\n    else if (src[i] == 'R')\n      ss << \"1000\";\n    else if (src[i] == 'S')\n      ss << \"00110\";\n    else if (src[i] == 'T')\n      ss << \"00111\";\n    else if (src[i] == 'U')\n      ss << \"10011100\";\n    else if (src[i] == 'V')\n      ss << \"10011101\";\n    else if (src[i] == 'W')\n      ss << \"000010\";\n    else if (src[i] == 'X')\n      ss << \"10010010\";\n    else if (src[i] == 'Y')\n      ss << \"10010011\";\n    else if (src[i] == 'Z')\n      ss << \"10010000\";\n\n  tmp = ss.str();\n  int piyo = 5 - tmp.size() % 5;\n  for (int i = 0; i < piyo; i++)\n    tmp += '0';\n  //cout << tmp << endl;                                                                                                                                                                                                                                                                                                                            \n\n  for (int i = 0; i < tmp.size(); i+=5) {\n    int hoge = 0;\n    for (int j = 0; j < 5; j++) {\n      hoge *= 2;\n      hoge += tmp[i+j]-'0';\n    }\n    //cout << hoge << endl;                                                                                                                                                                                                                                                                                                                         \n    if (0 <= hoge && hoge <= 25)\n      dst += ('A'+hoge);\n    else if (hoge == 26)\n      dst += ' ';\n    else if (hoge == 27)\n      dst += '.';\n    else if (hoge == 28)\n      dst += ',';\n    else if (hoge == 29)\n      dst += '-';\n    else if (hoge == 30)\n      dst += '\\'';\n    else if (hoge == 31)\n      dst += '?';\n  }\n  cout << dst << endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <stdio.h>\n#include <algorithm>\n#include <string.h>\n#include <string>\n#include <cmath>\n#include <complex>\n#include <map>\nusing namespace std;\n\n#define rep(i,n) for(int i=0;i<int(n);++i)\n#define ALL(v) (v).begin(),(v).end()\n#define PB push_back\n#define EPS 1e-8\n#define F first\n#define S second\n\nstatic const double PI=6*asin(0.5);\ntypedef pair<double,double> P;\ntypedef complex<double> CP;\ntypedef long long ll;\n\n\nmap<string,string> bef;\nmap<string,string> aft;\n\n\nint main(){\n\tbef[\" \"]=\"101\";\n\tbef[\"'\"]=\"000000\";   bef[\",\"]=\"000011\";   bef[\"-\"]=\"10010001\";\n\tbef[\".\"]=\"010001\";   bef[\"?\"]=\"000001\";   bef[\"A\"]=\"100101\";\n\tbef[\"B\"]=\"10011010\";   bef[\"C\"]=\"0101\";   bef[\"D\"]=\"0001\";\n\tbef[\"E\"]=\"110\";   bef[\"F\"]=\"01001\";   bef[\"G\"]=\"10011011\";\n\tbef[\"H\"]=\"010000\";   bef[\"I\"]=\"0111\";   bef[\"J\"]=\"10011000\";\n\tbef[\"K\"]=\"0110\";   bef[\"L\"]=\"00100\";   bef[\"M\"]=\"10011001\";\n\tbef[\"N\"]=\"10011110\";   bef[\"O\"]=\"00101\";   bef[\"P\"]=\"111\";\n\tbef[\"Q\"]=\"10011111\";   bef[\"R\"]=\"1000\";   bef[\"S\"]=\"00110\";\n\tbef[\"T\"]=\"00111\";   bef[\"U\"]=\"10011100\";   bef[\"V\"]=\"10011101\";\n\tbef[\"W\"]=\"000010\";   bef[\"X\"]=\"10010010\";   bef[\"Y\"]=\"10010011\";\n\tbef[\"Z\"]=\"10010000\";\n\t\n\taft[\"00000\"]=\"A\";\n\taft[\"00001\"]=\"B\";  aft[\"00010\"]=\"C\";  aft[\"00011\"]=\"D\";\n\taft[\"00100\"]=\"E\";  aft[\"00101\"]=\"F\";  aft[\"00110\"]=\"G\";\n\taft[\"00111\"]=\"H\";  aft[\"01000\"]=\"I\";  aft[\"01001\"]=\"J\";\n\taft[\"01010\"]=\"K\";  aft[\"01011\"]=\"L\";  aft[\"01100\"]=\"M\";\n\taft[\"01101\"]=\"N\";  aft[\"01110\"]=\"O\";  aft[\"01111\"]=\"P\";\n\taft[\"10000\"]=\"Q\";  aft[\"10001\"]=\"R\";  aft[\"10010\"]=\"S\";  aft[\"10011\"]=\"T\";\n\taft[\"10100\"]=\"U\";  aft[\"10101\"]=\"V\";  aft[\"10110\"]=\"W\";\n\taft[\"10111\"]=\"X\";  aft[\"11000\"]=\"Y\";  aft[\"11001\"]=\"Z\";\n\taft[\"11010\"]=\" \";  aft[\"11011\"]=\".\";  aft[\"11100\"]=\",\";\n\taft[\"11101\"]=\"-\";  aft[\"11110\"]=\"'\";  aft[\"11111\"]=\"?\";\n\t\n\tstring s1;\n\tstring s2;\n\tstring s3;\n\tstring t;\n\twhile(getline(cin,s1)){\n\t\ts2.clear();\n\t\trep(i,s1.size()){\n\t\t\tt=s1[i];\n\t\t\ts2+=bef[t];\n\t\t}\n\t\t//cout<<s2.size()<<endl;\n\t\twhile(s2.size()%5!=0) s2+=\"0\";\n\t\t//cout<<s2<<endl;\n\t\ts3.clear();\n\t\tfor(int i=0;i<s2.size();i+=5){\n\t\t\ts3+=aft[s2.substr(i,5)];\n\t\t}\n\t\tcout<<s3<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\n#include<queue>\n#include<map>\n#include<string>\nusing namespace std;\nchar word[]{' ','\\'',',','-','.','?','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\nchar words[]{' ','.',',','-','\\'','?'};\nstring decord[]{\n    \"101\",\n    \"000000\",\n    \"000011\",\n    \"10010001\",\n    \"010001\",\n    \"000001\",\n    \"100101\",\n    \"10011010\",\n    \"0101\",\n    \"0001\",\n    \"110\",\n    \"01001\",\n    \"10011011\",\n    \"010000\",\n    \"0111\",\n    \"10011000\",\n    \"0110\",\n    \"00100\",\n    \"10011001\",\n    \"10011110\",\n    \"00101\",\n    \"111\",\n    \"10011111\",\n    \"1000\",\n    \"00110\",\n    \"00111\",\n    \"10011100\",\n    \"10011101\",\n    \"000010\",\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n};\nstring encord[]{\n    \"00000\",\n    \"00001\",\n    \"00010\",\n    \"00011\",\n    \"00100\",\n    \"00101\",\n    \"00110\",\n    \"00111\",\n    \"01000\",\n    \"01001\",\n    \"01010\",\n    \"01011\",\n    \"01100\",\n    \"01101\",\n    \"01110\",\n    \"01111\",\n    \"10000\",\n    \"10001\",\n    \"10010\",\n    \"10011\",\n    \"10100\",\n    \"10101\",\n    \"10110\",\n    \"10111\",\n    \"11000\",\n    \"11001\",\n    \"11010\",\n    \"11011\",\n    \"11100\",\n    \"11101\",\n    \"11110\",\n    \"11111\"\n};\nstring checkdecord(char moji){\n    string ans;\n    for(int i=0;i<32;i++){\n        if(moji==word[i]){\n            ans=decord[i];\n        }\n    }\n    return ans;\n}\nint main(){\n    while(1){\n        map<string,char> maps;\n        int k=5;\n        int l;\n        for(int i=0;i<32;i++){\n            k++;\n            if(k>=32){\n                l=k-32;\n                maps[encord[i]] = words[l];\n            }else{\n                maps[encord[i]] = word[k];\n            }\n        }\n        string hoge;\n        char name[100]={0};\n        scanf(\"%[^\\n]\",name);\n        getchar();\n        if(name[0]=='\\0')break;\n        queue<char> que;\n        //scanf(\"%[^\\n]\",name);\n        for(int i=0;;i++){\n            if(name[i]=='\\0')break;\n            hoge = checkdecord(name[i]);\n            for(int j=0;;j++){\n                if(hoge[j]=='\\0')break;\n                que.push(hoge[j]);\n            }\n        }\n        string encordword,encordstring;\n        for(int i=0;;i++){\n            if(que.empty())break;\n            for(int j=0;j<5;j++){\n                encordword += que.front();\n                que.pop();\n                if(que.empty()){\n                    for(;;){\n                    j++;\n                    encordword +='0';\n                    if(j==4)break;\n                    }\n                }\n            }\n            encordstring += maps[encordword];\n            encordword=\"\";\n        }\n        cout<<encordstring<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n\n#include <iostream>\n#include <stdio.h>\n#include <string>\n#include <string.h>\n#include <queue>\n#include <cmath>\n#include <stack>\n#include <map>\n\n#define int64 long long int \nusing namespace std;\n\nstring encode(string, char);\nstring decode(string);\n\nint main()\n{\n\tint c, first, second;\n\tstring str;\n\n\tsecond = 0;\n\twhile((c = getchar()) != EOF){\n\t\tfirst = second, second = c;\n\t\tif(!(first == '\\n' && second == EOF))\n\t\t\tstr = encode(str, first);\n\t}\n\tcout << decode(str) << endl;\n\n\treturn 0;\n}\n\nstring decode(string str)\n{\n\tint i, len, r;\n\tstring part, ret;\n\tconst string code[32] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\tconst string ch[35] = {\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\" \",\".\",\",\",\"-\",\"'\",\"?\"};\n\n\tlen = str.size();\n\n\tfor(i=0; i<len / 5; i++){\n\t\tpart = str.substr( 5*i, 5 );\n\t\tfor(int j=0; j<32; j++)\n\t\t\tif(part == code[j]){\n\t\t\t\tif(ret.empty()) ret = ch[j];\n\t\t\t\telse ret += ch[j];\n\t\t\t}\n\t}\n\tif((r = len % 5) != 0){\n\t\tpart = str.substr( 5*i, len-1 );\n\t\tfor(i=0; i<5-r; i++) part += \"0\";\n\t\tfor(i=0; i<32; i++)\n\t\t\tif(part == code[i]) ret += ch[i];\n\t}\n\treturn ret;\n}\n\nstring encode(string str, char c)\n{\n\tconst string code[32] = {\n\t\t\"101\", \"000000\", \"000011\", \"10010001\",\n\t\t\"010001\", \"000001\", \"100101\", \"10011010\",\n\t\t\"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\",\n\t\t\"0110\", \"00100\", \"10011001\", \"10011110\",\n\t\t\"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\",\n\t\t\"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tconst char ch[35] = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; \n\n\tfor(int i=0; i<32; i++){\n\t\tif(c == ch[i]){\n\t\t\tif(str.empty()) str = code[i];\n\t\t\telse str += code[i];\n\t\t}\n\t}\n\treturn str;\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdlib>\n#include<string>\nusing namespace std;\nstring tbl01[]={\n\t\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\n\t\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\t\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n\t\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"\n};\nstring tbl01_idx=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nstring str_AB=\" .,-'?\";\n\nstring to01(string &s){\n\tstring r;\n\tfor(int i=0;i<s.size();i++)r+=tbl01[tbl01_idx.find(s[i])];\n\twhile(r.size()%5)r+='0';\n\treturn r;\n}\nstring toAB(string &s){\n\tstring r,t;\n\tfor(int i=0;i<s.size();i+=5){\n\t\tt=s.substr(i,5);\n\t\tint c=strtol(t.c_str(),NULL,2);\n\t\tr+=c>25?str_AB[c-26]:c+'A';\n\t}\n\treturn r;\n}\nint main(){\n\tstring s;\n\twhile(getline(cin,s))s=to01(s),cout<<toAB(s)<<endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n\n#include <iostream>\n#include <stdio.h>\n#include <string>\n#include <string.h>\n#include <queue>\n#include <cmath>\n#include <stack>\n#include <map>\n\n#define int64 long long int \nusing namespace std;\n\nstring encode(string, char);\nvoid decode(string);\n\nint main()\n{\n\tint c;\n\tstring str;\n\twhile((c = getchar()) != EOF){\n\t\tif(c == '\\n') c = ' ';\n\t\tstr = encode(str, c);\n\t}\n\tdecode(str);\n\n\treturn 0;\n}\n\nvoid decode(string str)\n{\n\tint i, len, r;\n\tstring part;\n\tconst string code[32] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\tconst char ch[35] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n\tlen = str.size();\n\n\tfor(i=0; i<len / 5; i++){\n\t\tpart = str.substr( 5*i, 5 );\n\t\tfor(int j=0; j<32; j++)\n\t\t\tif(part == code[j]) cout << ch[j];\n\t}\n\tif((r = len % 5) != 0){\n\t\tpart = str.substr( 5*i, len-1 );\n\t\tfor(i=0; i<5-r; i++) part += \"0\";\n\t\tfor(i=0; i<32; i++)\n\t\t\tif(part == code[i]) cout << ch[i];\n\t}\n\tcout << endl;\n\treturn;\n}\n\nstring encode(string str, char c)\n{\n\tconst string code[32] = {\n\t\t\"101\", \"000000\", \"000011\", \"10010001\",\n\t\t\"010001\", \"000001\", \"100101\", \"10011010\",\n\t\t\"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\",\n\t\t\"0110\", \"00100\", \"10011001\", \"10011110\",\n\t\t\"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\",\n\t\t\"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tconst char ch[35] = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; \n\n\tfor(int i=0; i<32; i++){\n\t\tif(c == ch[i]){\n\t\t\tif(str.empty()) str = code[i];\n\t\t\telse str += code[i];\n\t\t}\n\t}\n\treturn str;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <vector>\n#include <string>\n#include <map>\n#include <queue>\n#include <stack>\n#include <algorithm>\n\n#define rep(i,j) REP((i), 0, (j))\n#define REP(i,j,k) for(int i=(j);(i)<(k);++i)\n#define between(a,x,b) ((a)<=(x)&&(x)<=(b))\nusing namespace std;\n\nstring convert(string str){\n  string res = \"\";\n  map<char, string>s;\n  s[' '] = \"101\";\n  s['\\''] = \"000000\";\n  s[','] = \"000011\";\n  s['-'] = \"10010001\";\n  s['.'] = \"010101\";\n  s['?'] = \"000001\";\n  s['A'] = \"100101\";\n  s['B'] = \"10011010\";\n  s['C'] = \"0101\";\n  s['D'] = \"0001\";\n  s['E'] = \"110\";\n  s['F'] = \"01001\";\n  s['G'] = \"100110011\";\n  s['H'] = \"010000\";\n  s['I'] = \"0111\";\n  s['J'] = \"10011000\";\n  s['K'] = \"0110\";\n  s['L'] = \"00100\";\n  s['M'] = \"10011001\";\n  s['N'] = \"0011110\";\n  s['O'] = \"00101\";\n  s['P'] = \"111\";\n  s['Q'] = \"10011111\";\n  s['R'] = \"1000\";\n  s['S'] = \"00110\";\n  s['T'] = \"00111\";\n  s['U'] = \"0011100\";\n  s['V'] = \"0011101\";\n  s['W'] = \"000010\";\n  s['X'] = \"010010\";\n  s['Y'] = \"0010011\";\n  s['Z'] = \"0010000\";\n\n  rep(i, str.length()){\n    res += s[str[i]];\n  }\n\n  while(res.size() % 5) res += \"0\";\n \n  return res;\n}\n\nstring reconvert(string str){\n  string res = \"\";\n  map<string, char>s;\n  s[\"00000\"] = 'A';\n  s[\"00001\"] = 'B';\n  s[\"00010\"] = 'C';\n  s[\"00011\"] = 'D';\n  s[\"00100\"] = 'E';\n  s[\"00101\"] = 'F';\n  s[\"00110\"] = 'G';\n  s[\"00111\"] = 'H';\n  s[\"01000\"] = 'I';\n  s[\"01001\"] = 'J';\n  s[\"01010\"] = 'K';\n  s[\"01011\"] = 'L';\n  s[\"01100\"] = 'M';\n  s[\"01101\"] = 'N';\n  s[\"01110\"] = 'O';\n  s[\"01111\"] = 'P';\n  s[\"10000\"] = 'Q';\n  s[\"10001\"] = 'R';\n  s[\"10010\"] = 'S';\n  s[\"10011\"] = 'T';\n  s[\"10100\"] = 'U';\n  s[\"10101\"] = 'V';\n  s[\"10110\"] = 'W';\n  s[\"10111\"] = 'X';\n  s[\"11000\"] = 'Y';\n  s[\"11001\"] = 'Z';\n  s[\"11010\"] = ' ';\n  s[\"11011\"] = '.';\n  s[\"11100\"] = ',';\n  s[\"11101\"] = '-';\n  s[\"11110\"] = '\\'';\n  s[\"11111\"] = '?';\n\n  for(int i = 0; i < str.length(); i += 5){\n    string f; // = string(str[i] + str[i+1] + str[i+2] + str[i+3] + str[i+4]);\n    f = str[i]; f += str[i+1]; f+= str[i+2]; f += str[i+3]; f += str[i+4];\n    res += s[f];\n  }\n  return res;\n}\n\nint main(){\n  string str;\n  while(getline(cin, str)){\n    str = convert(str);\n    str = reconvert(str);\n    cout << str << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nchar A1[33] = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nchar B1[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nstring A2[32] = {\n\t\"101\",\n\t\"000000\",\n\t\"000011\",\n\t\"10010001\",\n\t\"010001\",\n\t\"000001\",\n\t\"100101\",\n\t\"10011010\",\n\t\"0101\",\n\t\"0001\",\n\t\"110\",\n\t\"01001\",\n\t\"10011011\",\n\t\"010000\",\n\t\"0111\",\n\t\"10011000\",\n\t\"0110\",\n\t\"00100\",\n\t\"10011001\",\n\t\"10011110\",\n\t\"00101\",\n\t\"111\",\n\t\"10011111\",\n\t\"1000\",\n\t\"00110\",\n\t\"00111\",\n\t\"10011100\",\n\t\"10011101\",\n\t\"000010\",\n\t\"10010010\",\n\t\"10010011\",\n\t\"10010000\"\n};\n\nstring B2[32] = {\n\t\"00000\",\n\t\"00001\",\n\t\"00010\",\n\t\"00011\",\n\t\"00100\",\n\t\"00101\",\n\t\"00110\",\n\t\"00111\",\n\t\"01000\",\n\t\"01001\",\n\t\"01010\",\n\t\"01011\",\n\t\"01100\",\n\t\"01101\",\n\t\"01110\",\n\t\"01111\",\n\t\"10000\",\n\t\"10001\",\n\t\"10010\",\n\t\"10011\",\n\t\"10100\",\n\t\"10101\",\n\t\"10110\",\n\t\"10111\",\n\t\"11000\",\n\t\"11001\",\n\t\"11010\",\n\t\"11011\",\n\t\"11100\",\n\t\"11101\",\n\t\"11110\",\n\t\"11111\"\n};\n\nstring U;\nstring V;\n\nint main() {\n\twhile (getline(cin, U)) {\n\t\tV = \"\";\n\t\tfor (int i = 0; i < U.size(); i++) {\n\t\t\tfor (int j = 0; j < 32; j++) {\n\t\t\t\tif (A1[j] == U[i]) {\n\t\t\t\t\tV += A2[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twhile (V.size() % 5 != 0) {\n\t\t\tV += '0';\n\t\t}\n\t\tU = \"\";\n\t\tfor (int i = 0; i < V.size(); i += 5) {\n\t\t\tfor (int j = 0; j < 32; j++) {\n\t\t\t\tif (B2[j] == V.substr(i, 5)) {\n\t\t\t\t\tU += B1[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcout << U << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    string str,Midstream;\n    getline(cin,str);\n    string first=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\",secound=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n    string conversion[32]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\n    \"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\n    \"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n    for(int i=0;str[i]!='\\0';i++){\n        for(int j=0;j<32;j++)if(str[i]==first[j])Midstream+=conversion[j];\n    }\n    for(int i=0;i<Midstream.size()%5;i++)Midstream+='0';\n    for(int i=0,point=0;Midstream[i]!='\\0';i++){\n        if(i%5==4){\n            int num=0;\n            for(int j=point,kawa[5]={1,2,4,8,16};j<=i;j++)num+=(Midstream[j]-'0')*kawa[i-j];\n            cout<<secound[num];\n            point=i+1;\n        }\n    }\n    cout<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <bitset>\n#include <map>\nusing namespace std;\n\nstring encode(char c){\n\tstring a[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\tstatic const string str=\" \\',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tfor(int i=0;i<str.length();i++){\n\t\tif(c==str[i])return a[i];\n\t}\n}\n\nchar decode(string s){\n\tstring str2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\tstd::bitset<5> b(s);\n\treturn str2[b.to_ulong()];\n}\n\nint main(void){\n\n\tstring s;\n\tstring code=\"\";\n\tstd::getline(cin,s);\n\tfor(int i=0;i<s.length();i++){\n\t\tcode+=encode(s[i]);\n\t}\n\n\twhile(std::getline(cin,s)){\n\t\tcode+=encode(' ');\n\t\tfor(int i=0;i<s.length();i++){\n\t\t\tcode+=encode(s[i]);\n\t\t}\n\t}\n\t// cout<<code<<endl;\n\tstring retu=\"\";\n\tfor(int i=0;i<code.length();i+=5){\n\t\ttry{\n\t\t\tstring dd=code.substr(i,5);\n\t\t\tretu+=decode(dd);\n\t\t}catch(out_of_range e){\n\t\t\tcode+=\"00000\";\n\t\t\tstring dd=code.substr(i,5);\n\t\t\tretu=decode(dd);\n\t\t\tbreak;\n\t\t}\n\t}\n\tcout<<retu<<endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define\t_USE_MATH_DEFINES\n#include <iostream>\n#include <iomanip>\n#include <cctype>\n#include <algorithm>\n#include <functional>\n#include <vector>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <cfloat>\n#include <map>\n#include <queue>\n#include <stack>\n#include <list>\n#include <string>\n#include <set>\n#include <complex>\n#include <utility>\n#include <numeric>\nusing namespace std;\ntypedef pair<double,double> P;\nint b[19][19];\n\n\nint main(){\n\t\n\tmap<string,string> ec;\n\tmap<string,string> dc;\n\t\n\tec[\" \"]=\"101\";\n\tec[\"'\"]=\"000000\";\n\tec[\",\"]=\"000011\";\n\tec[\"-\"]=\"10010001\";\n\tec[\".\"]=\"010001\";\n\tec[\"?\"]=\"000001\";\n\tec[\"A\"]=\"100101\";\n\tec[\"B\"]=\"10011010\";\n\tec[\"C\"]=\"0101\";\n\tec[\"D\"]=\"0001\";\n\tec[\"E\"]=\"110\";\n\tec[\"F\"]=\"01001\";\n\tec[\"G\"]=\"10011011\";\n\tec[\"H\"]=\"010000\";\n\tec[\"I\"]=\"0111\";\n\tec[\"J\"]=\"10011000\";\n\tec[\"K\"]=\"0110\";\n\tec[\"L\"]=\"00100\";\n\tec[\"M\"]=\"10011001\";\n\tec[\"N\"]=\"10011110\";\n\tec[\"O\"]=\"00101\";\n\tec[\"P\"]=\"111\";\n\tec[\"Q\"]=\"10011111\";\n\tec[\"R\"]=\"1000\";\n\tec[\"S\"]=\"00110\";\n\tec[\"T\"]=\"00111\";\n\tec[\"U\"]=\"10011100\";\n\tec[\"V\"]=\"10011101\";\n\tec[\"W\"]=\"000010\";\n\tec[\"X\"]=\"10010010\";\n\tec[\"Y\"]=\"10010011\";\n\tec[\"Z\"]=\"10010000\";\n\t\n\tdc[\"00000\"]=\"A\";\n\tdc[\"00001\"]=\"B\";\n\tdc[\"00010\"]=\"C\";\n\tdc[\"00011\"]=\"D\";\n\tdc[\"00100\"]=\"E\";\n\tdc[\"00101\"]=\"F\";\n\tdc[\"00110\"]=\"G\";\n\tdc[\"00111\"]=\"H\";\n\tdc[\"01000\"]=\"I\";\n\tdc[\"01001\"]=\"J\";\n\tdc[\"01010\"]=\"K\";\n\tdc[\"01011\"]=\"L\";\n\tdc[\"01100\"]=\"M\";\n\tdc[\"01101\"]=\"N\";\n\tdc[\"01110\"]=\"O\";\n\tdc[\"01111\"]=\"P\";\n\tdc[\"10000\"]=\"Q\";\n\tdc[\"10001\"]=\"R\";\n\tdc[\"10010\"]=\"S\";\n\tdc[\"10011\"]=\"T\";\n\tdc[\"10100\"]=\"U\";\n\tdc[\"10101\"]=\"V\";\n\tdc[\"10110\"]=\"W\";\n\tdc[\"10111\"]=\"X\";\n\tdc[\"11000\"]=\"Y\";\n\tdc[\"11001\"]=\"Z\";\n\tdc[\"11010\"]=\" \";\n\tdc[\"11011\"]=\".\";\n\tdc[\"11100\"]=\",\";\n\tdc[\"11101\"]=\"-\";\n\tdc[\"11110\"]=\"'\";\n\tdc[\"11111\"]=\"?\";\n\t\n\tstring s;\n\twhile(getline(cin,s)){\n\t\n\tstring temp=\"\";\n\tfor(int i=0;i<s.size();i++){\n\t\ttemp+=ec[s.substr(i,1)];\n\t}\n\t\n\twhile(temp.size()%5!=0)\n\t\ttemp+='0';\n\t\n\t\tstring ans=\"\";\n\t\tfor(int i=0;i+5<=temp.size();i=i+5){\n\t\t\tans+=dc[temp.substr(i,5)];\n\t\t}\n\t\tcout<<ans<<endl;\n\t}\n\t\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <map>\n\nusing namespace std;\n\nint main(){\n\n\tmap<char,string> table;\n\ttable[' ']=\"101\";\n\ttable[39]=\"000000\";\n\ttable[',']=\"000011\";\n\ttable['-']=\"10010001\";\n\ttable['.']=\"010001\";\n\ttable['?']=\"000001\";\n\ttable['A']=\"100101\";\n\ttable['B']=\"10011010\";\n\ttable['C']=\"0101\";\n\ttable['D']=\"0001\";\n\ttable['E']=\"110\";\n\ttable['F']=\"01001\";\n\ttable['G']=\"10011011\";\n\ttable['H']=\"010000\";\n\ttable['I']=\"0111\";\n\ttable['J']=\"10011000\";\n\ttable['K']=\"0110\";\n\ttable['L']=\"00100\";\n\ttable['M']=\"10011001\";\n\ttable['N']=\"10011110\";\n\ttable['O']=\"00101\";\n\ttable['P']=\"111\";\n\ttable['Q']=\"10011111\";\n\ttable['R']=\"1000\";\n\ttable['S']=\"00110\";\n\ttable['T']=\"00111\";\n\ttable['U']=\"10011100\";\n\ttable['V']=\"10011101\";\n\ttable['W']=\"000010\";\n\ttable['X']=\"10010010\";\n\ttable['Y']=\"10010011\";\n\ttable['Z']=\"10010000\";\n\n\n\tmap<string,char> table2;\n\tfor(int i = 0; i < 26; i++){\n\t\tstring ms;\n\t\tfor(int j = 0; j < 5; j++){\n\t\t\tif((i>>j)&1){\n\t\t\t\tms+='1';\n\t\t\t}\n\t\t\telse\n\t\t\t\tms+='0';\n\t\t}\n\t\treverse(ms.begin(),ms.end());\n\t\ttable2[ms]='A'+i;\n\t}\n\ttable2[\"11010\"]=' ';\n\ttable2[\"11011\"]='.';\n\ttable2[\"11100\"]=',';\n\ttable2[\"11101\"]='-';\n\ttable2[\"11110\"]=39;\n\ttable2[\"11111\"]='?';\n\n\tstring str;\n\tstring nstr=\"\";\n\twhile(getline(cin,str)){\n\t\tfor(int i = 0; i < str.size(); i++){\n\t\t\tnstr+=table[str[i]];\n\t\t}\n\t\tint t=nstr.size();\n\t\tif(nstr.size()%5!=0){\n\t\t\tint add=(((nstr.size()/5)+1)*5)-nstr.size();\n\t\t\tfor(int i = 0; i < add; i++){\n\t\t\t\tnstr+='0';\n\t\t\t}\n\t\t}\n\t\tstring fstr=\"\";\n\t\tfor(int i = 0; i < nstr.size()/5; i++){\n\t\t\tstring s=nstr.substr(5*(i),5);\n\t\t\tfstr+=table2[s];\n\t\t}\n\t\tcout<<fstr<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#define CASE(c,s) case c:return s\nusing namespace std;\n\nstring f(char c){\n\tswitch (c){\n\t\tCASE(' ', \"101\");\n\t\tCASE('\\'', \"000000\");\n\t\tCASE(',', \"000011\");\n\t\tCASE('-', \"10010001\");\n\t\tCASE('.', \"010001\");\n\t\tCASE('?', \"000001\");\n\t\tCASE('A', \"100101\");\n\t\tCASE('B', \"10011010\");\n\t\tCASE('C', \"0101\");\n\t\tCASE('D', \"0001\");\n\t\tCASE('E', \"110\");\n\t\tCASE('F', \"01001\");\n\t\tCASE('G', \"10011011\");\n\t\tCASE('H', \"010000\");\n\t\tCASE('I', \"0111\");\n\t\tCASE('J', \"10011000\");\n\t\tCASE('K', \"0110\");\n\t\tCASE('L', \"00100\");\n\t\tCASE('M', \"100110011\");\n\t\tCASE('N', \"10011110\");\n\t\tCASE('O', \"00101\");\n\t\tCASE('P', \"111\");\n\t\tCASE('Q', \"10011111\");\n\t\tCASE('R', \"1000\");\n\t\tCASE('S', \"00110\");\n\t\tCASE('T', \"00111\");\n\t\tCASE('U', \"10011100\");\n\t\tCASE('V', \"10011101\");\n\t\tCASE('W', \"000010\");\n\t\tCASE('X', \"10010010\");\n\t\tCASE('Y', \"10010011\");\n\t\tCASE('Z', \"10010000\");\n\tdefault:return \"\";\n\t}\n}\n\nint bitodec(string s){\n\tint sum=0;\n\tfor (int i = 0; i < s.size(); ++i){\n\t\tsum *= 2;\n\t\tsum += (s[i] - '0');\t\t\n\t}\n\treturn sum;\n}\n\nchar g(string s){\n\tchar c[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\treturn c[bitodec(s)];\n}\n\nint main(){\n\tstring s,r;\n\tint i;\n\n\twhile (getline(cin, s)){\n\t\ti = 0;\n\t\tr = \"\";\n\n\t\twhile (s[i] != '\\0'){\n\t\t\tr += f(s[i]);\n\t\t\t++i;\n\t\t}\n\n\t\tif (i % 5)for (int j = 4 - (i % 5); --j;)r += \"0\";\n\n\t\tfor (int j = 0; j <= r.size() / 5;++j)\n\t\t\tcout <<g(r.substr(j*5,5));\n\t\tcout << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n\tmap<char,string>P;\n\n\tP[32]=\"101\";\n\tP[39]=\"000000\";\n\tP[44]=\"000011\";\n\tP[45]=\"10010001\";\n\tP[46]=\"010001\";\n\tP[63]=\"000001\";\n\tP[65]=\"100101\";//A\n\tP[66]=\"10011010\";\n\tP[67]=\"0101\";\n\tP[68]=\"0001\";\n\tP[69]=\"110\";\n\tP[70]=\"01001\";\n\tP[71]=\"10011011\";\n\tP[72]=\"010000\";\n\tP[73]=\"0111\";\n\tP[74]=\"10011000\";\n\tP[75]=\"0110\";\n\tP[76]=\"00100\";\n\tP[77]=\"10011001\";\n\tP[78]=\"10011110\";\n\tP[79]=\"00101\";\n\tP[80]=\"111\";\n\tP[81]=\"10011111\";\n\tP[82]=\"1000\";\n\tP[83]=\"00110\";\n\tP[84]=\"00111\";\n\tP[85]=\"10011100\";\n\tP[86]=\"10011101\";\n\tP[87]=\"000010\";\n\tP[88]=\"10010010\";\n\tP[89]=\"10010011\";\n\tP[90]=\"10010000\";\n\n\tmap<string,string>PP;\n\tPP[\"00000\"]='A';\n\tPP[\"00001\"]='B';\n\tPP[\"00010\"]='C';\n\tPP[\"00011\"]='D';\n\tPP[\"00100\"]='E';\n\tPP[\"00101\"]='F';\n\tPP[\"00110\"]='G';\n\tPP[\"00111\"]='H';\n\tPP[\"01000\"]='I';\n\tPP[\"01001\"]='J';\n\tPP[\"01010\"]='K';\n\tPP[\"01011\"]='L';\n\tPP[\"01100\"]='M';\n\tPP[\"01101\"]='N';\n\tPP[\"01110\"]='O';\n\tPP[\"01111\"]='P';\n\tPP[\"10000\"]='Q';\n\tPP[\"10001\"]='R';\n\tPP[\"10010\"]='S';\n\tPP[\"10011\"]='T';\n\tPP[\"10100\"]='U';\n\tPP[\"10101\"]='V';\n\tPP[\"10110\"]='W';\n\tPP[\"10111\"]='X';\n\tPP[\"11000\"]='Y';\n\tPP[\"11001\"]='Z';\n\tPP[\"11010\"]=' ';\n\tPP[\"11011\"]='.';\n\tPP[\"11100\"]=',';\n\tPP[\"11101\"]='-';\n\tPP[\"11110\"]=\"'\";\n\tPP[\"11111\"]='?';\n\n\tstring str;\n\twhile(getline(cin,str))\n\t{\n\t\tint count=0;\n\t\tstring set_str;\n\t\tstring keep;\n\t\tstring ans_str;\n\n\t\tfor(int i=0;i<str.length();i++)\n\t\t{\n\t\t\tset_str += P[str[i]];\n\t\t}\n\n\t\twhile(set_str.length()%5)set_str+='0';\n\n\t\tfor(int i=0;i<set_str.length();i++)\n\t\t{\n\t\t\tans_str += set_str[i];\n\t\t\tcount++;\n\t\t\tif(!(count%5) && count)\n\t\t\t{\n\t\t\t\tcout << PP[ans_str];\n\t\t\t\tans_str.erase(ans_str.begin(),ans_str.end());\n\t\t\t}\n\t\t}\n\t\tcout << endl;\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\nusing namespace std;\n\nstring to[] = {\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\"};\n\nint main(){\n\tstring s;\n\tmap<char,string> tm;\n\tmap<string,char> fm;\n\tfor(int i = 0;i < 26;i++){\n\t\ttm[i + 'A'] = to[i];\n\t\tstring tmp = \"\";\n\t\tfor(int j = 4;j >= 0;j--) tmp += to_string((i >> j) & 1);\n\t\tfm[tmp] = i + 'A';\n\t}\n\ttm[' '] = to[26];\n\ttm['\\''] = to[27];\n\ttm[','] = to[28];\n\ttm['-'] = to[29];\n\ttm['.'] = to[30];\n\ttm['?'] = to[31];\n\tfm[\"11010\"] = ' ';\n\tfm[\"11011\"] = '.';\n\tfm[\"11100\"] = ',';\n\tfm[\"11101\"] = '-';\n\tfm[\"11110\"] = '\\'';\n\tfm[\"11111\"] = '?';\n\twhile(getline(cin,s)){\n\t\tstring t = \"\";\n\t\tfor(int i = 0;i < s.length();i++) t += tm[s[i]];\n\t\tfor(int i = (t.length() + 4) % 5 + 1;i < 5;i++) t += \"0\";\n\t\tfor(int i = 0;i < t.length() / 5;i++) cout << fm[t.substr(i * 5,5)];\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<cstdio>\nusing namespace std;\n\nstring code(char c){\n  if(c == ' ')return \"101\";\n  if(c == '\\'')return \"000000\";\n  if(c == ',')return \"000011\";\n  if(c == '-')return \"10010001\";\n  if(c == '.')return \"010001\";\n  if(c == '?')return \"000001\";\n  if(c == 'A')return \"100101\";\n  if(c == 'B')return \"10011010\";\n  if(c == 'C')return \"0101\";\n  if(c == 'D')return \"0001\";\n  if(c == 'E')return \"110\";\n  if(c == 'F')return \"01001\";\n  if(c == 'G')return \"10011011\";\n  if(c == 'H')return \"010000\";\n  if(c == 'I')return \"0111\";\n  if(c == 'J')return \"10011000\";\n  if(c == 'K')return \"0110\";\n  if(c == 'L')return \"00100\";\n  if(c == 'M')return \"10011001\";\n  if(c == 'N')return \"10011110\";\n  if(c == 'O')return \"00101\";\n  if(c == 'P')return \"111\";\n  if(c == 'Q')return \"10011111\";\n  if(c == 'R')return \"1000\";\n  if(c == 'S')return \"00110\";\n  if(c == 'T')return \"00111\";\n  if(c == 'U')return \"10011100\";\n  if(c == 'V')return \"10011101\";\n  if(c == 'W')return \"000010\";\n  if(c == 'X')return \"10010010\";\n  if(c == 'Y')return \"10010011\";\n  return \"10010000\";\n}\n\nstring decode(string s){\n  string res;\n  for(int i=0;i<(int)s.size();i+=5){\n    int tmp=0,k=1;\n    for(int j=4;j>=0;j--){\n      tmp += (s[i+j] - '0') * k;\n      k *= 2;\n    }\n\n    if(tmp <26)res.push_back('A'+tmp);\n    if(tmp == 26)res.push_back(' ');\n    if(tmp == 27)res.push_back('.');\n    if(tmp == 28)res.push_back(',');\n    if(tmp == 29)res.push_back('-');\n    if(tmp == 30)res.push_back('\\'');\n    if(tmp == 31)res.push_back('?');\n  }\n  return res;\n}\n\nint main(){\n  char str[10000];\n\n  while(fgets(str,10000,stdin)!=NULL){\n    int pos = 0;\n    string c;\n    while(str[pos]!='\\n')c += code(str[pos++]);\n\n    while((int)c.size()%5)c.push_back('0');\n\n    cout << decode(c) << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <map>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\nstring itob(int a) {\n  string ret;\n  for(int i=16; i>0; i/=2) {\n    if (a>=i) {\n      ret+='1';\n      a-=i;\n    } else\n      ret+='0';\n  }\n  return ret;\n}\n\nint main() {\n  string hoge = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  map<string, string> m;\n  REP(i,hoge.length()) {\n    string hage;\n    hage = hoge[i];\n    m.insert(make_pair(itob(i),hage));\n  }\n  hoge = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string hoge2[] = {\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n                 ,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n                 ,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n                 ,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n  map<char,string> m2;\n  REP(i,hoge.length())\n    m2.insert(make_pair(hoge[i],hoge2[i]));\n  string line;\n  while(!cin.eof()) {\n    getline(cin,line);\n    if (cin.eof()) break;\n    string a;\n    REP(i,line.length()) {\n      a += m2[line[i]];\n    }\n    int aa = a.length()%5;\n    if(aa)\n      a+=string(aa,'0');\n    string ans;\n    for (int i=0; i<a.length(); i+=5) {\n      ans += m[a.substr(i,5)];\n    }\n//    cout << a << endl;\n    cout << ans << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid hantei(char *str);\n\nchar DataBase[][3][80] =\n\t{\n\t/* [文字] ,[符号＿変換前] ,[符号＿変換後] */\n\t{ \" \", \"101\", \"11010\" },{ \"\\'\", \"000000\", \"11110\" },{ \",\", \"000011\", \"11100\" },{ \"-\", \"10010001\", \"11101\" },\n\t{ \".\", \"010001\", \"11011\" },{ \"\\?\", \"000001\", \"11111\" },{ \"A\", \"100101\", \"00000\" },{ \"B\", \"10011010\", \"00001\" },\n    { \"C\", \"0101\", \"00010\" },{ \"D\", \"0001\", \"00011\" },{ \"E\", \"110\", \"00100\" },{ \"F\", \"01001\", \"00101\" },\n\t{ \"G\", \"10011011\", \"00110\" },{ \"H\", \"010000\", \"00111\" },{ \"I\", \"0111\", \"01000\" },{ \"J\", \"10011000\", \"01001\" },\n\t{ \"K\", \"0110\", \"01010\" },{ \"L\", \"00100\", \"01011\" },{ \"M\", \"10011001\", \"01100\" },{ \"N\", \"10011110\", \"01101\" },\n\t{ \"O\", \"00101\", \"01110\" },{ \"P\", \"111\", \"01111\" },{ \"Q\", \"10011111\", \"10000\" },{ \"R\", \"1000\", \"10001\" },\n\t{ \"S\", \"00110\", \"10010\" },{ \"T\", \"00111\", \"10011\" },{ \"U\", \"10011100\", \"10100\" },{ \"V\", \"10011101\", \"10101\" },\n\t{ \"W\", \"000010\", \"10110\" },{ \"X\", \"10010010\", \"10111\" },{ \"Y\", \"10010011\", \"11000\" },{ \"Z\", \"100100000\", \"11001\" },\n    {\"\", \"\", \"\" }\n};\n\n\nint main(void)\n{\n\tchar str1[1000],str2[1000],ch;\n\tint cut_i;\n\t\n\t/*scanf(\"%[A-Z \\'.?,-]\",str);\n\t\thantei(str1);*/\n\tcut_i=0;\n\twhile((ch = getchar())!=EOF){\n\t\tif(ch !='\\n'){\n\t\t\tstr2[cut_i] = ch;\n\t\t\tcut_i++;\n\t\t}\n\t\telse {\n\t\t\tstrncpy(str1,str2,cut_i);\n\t\t\tstr1[cut_i]='\\0';\n\t\t\thantei(str1);\n\t\t\tprintf(\"\\n\");\n\t\t\tcut_i=0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\nvoid hantei(char *str)\n{\n\tint len1,cut_i,cut_j,count;\n\tchar ans[1000]={\"\"},str2[1000]={\"\"},str3[1000]={\"\"};\n\tchar zero[]={\"0000\"};\n\n\tlen1 = strlen(str);\n\tcount = 0;\n\n\tfor(cut_i=0;cut_i<len1;cut_i++){\n\t\tcut_j=0;\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(!strncmp((str+cut_i),DataBase[cut_j][0],1)){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(str2,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\telse if(count !=0){\n\t\t\t\t\tstrcpy(str2+count,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\t\n\tlen1 = strlen(str2);\n\tcount = 0;\n\n\tif( len1 % 5 != 0){\n\t\tcut_i = 5 - len1 % 5;\n\t\tstrncat(str2,zero,cut_i);\n\t\tlen1 = strlen(str2);\n\t}\n\n\n\tfor(cut_i=0;cut_i<len1;cut_i+=5){\n\t\tcut_j=0;\n\t\tstrncpy(str3,str2+cut_i,5);\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(strcmp(str3,DataBase[cut_j][2]) == 0){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(ans,DataBase[cut_j][0]);\n\t\t\t\t\tcount =strlen(ans);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstrcat(ans,DataBase[cut_j][0]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\tprintf(ans);\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\nstring L=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",A=\" ',-.?\"+L,C=L+\" .,-'?\";\nstring B[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\n\t\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\t\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n\t\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\nint bin2dec(string s){\n\tint x=0,i=0;\n\tfor(;i<s.size();i++)x=x*2+s[i]-'0';\n\treturn x;\n}\nint main(){\n\tstring s,s1;\n\tint i,n;\n\twhile(getline(cin,s)){\n\t\ts1=\"\";\n\t\tfor(i=0;i<s.size();i++)s1+=B[A.find(s[i])];\n\t\tn=s1.size()%5;\n\t\tif(n!=0)s1+=string(5-n,'0');\n\t\ts=\"\";\n\t\tfor(i=0;i<s1.size();i+=5)s+=C[bin2dec(s1.substr(i, 5))];\n\t\tcout<<s<< endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "mp = {}\nmp[\" \"] = \"101\"\nmp[\"'\"] = \"000000\"\nmp[\",\"] = \"000011\"\nmp[\"-\"] = \"10010001\"\nmp[\".\"] = \"010001\"\nmp[\"?\"] = \"000001\"\nmp[\"A\"] = \"100101\"\nmp[\"B\"] = \"10011010\"\nmp[\"C\"] = \"0101\"\nmp[\"D\"] = \"0001\"\nmp[\"E\"]=\"110\"\nmp[\"F\"]=\"01001\"\nmp[\"G\"]=\"10011011\"\nmp[\"H\"]=\"010000\"\nmp[\"I\"]=\"0111\"\nmp[\"J\"]=\"10011000\"\nmp[\"K\"]=\"0110\"\nmp[\"L\"]=\"00100\"\nmp[\"M\"]=\"10011001\"\nmp[\"N\"]=\"10011110\"\nmp[\"O\"]=\"00101\"\nmp[\"P\"]=\"111\"\nmp[\"Q\"]=\"10011111\"\nmp[\"R\"]=\"1000\"\nmp[\"S\"]=\"00110\"\nmp[\"T\"]=\"00111\"\nmp[\"U\"]=\"10011100\"\nmp[\"V\"]=\"10011101\"\nmp[\"W\"]=\"000010\"\nmp[\"X\"]=\"10010010\"\nmp[\"Y\"]=\"10010011\"\nmp[\"Z\"]=\"10010000\"\n\ngyaku = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"\n\nwhile s=gets\n  s=s.chomp\n  t=\"\"\n  for i in 0...s.length\n    t+=mp[s[i]]\n  end\n  n = t.length\n  t += \"0\"*((5-n%5)%5)\n  n = t.length\n  res = \"\"\n  for i in 0...(n/5)\n    beg = i*5\n    id = 0\n    for j in 0...5\n      id*=2\n      id+=(t[beg+j]==\"0\" ? 0 : 1)\n    end\n    res += gyaku[id]\n  end\n  puts res\nend"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<map>\n#include<string>\n#include<cstdio>\nusing namespace std;\n\nmap<char, string> dict;\nmap<string, char> tcid;\nvoid init(){\n    dict[' '] = \"101\";\n    dict['\\''] = \"000000\";\n    dict[','] = \"000011\";\n    dict['-'] = \"10010001\";\n    dict['.'] = \"010001\";\n    dict['?'] = \"000001\";\n    dict['A'] = \"100101\";\n    dict['B'] = \"10011010\";\n    dict['C'] = \"0101\";\n    dict['D'] = \"0001\";\n    dict['E'] = \"110\";\n    dict['F'] = \"01001\";\n    dict['G'] = \"10011011\";\n    dict['H'] = \"010000\";\n    dict['I'] = \"0111\";\n    dict['J'] = \"10011000\";\n    dict['K'] = \"0110\";\n    dict['L'] = \"00100\";\n    dict['M'] = \"10011001\";\n    dict['N'] = \"10011110\";\n    dict['O'] = \"00101\";\n    dict['P'] = \"111\";\n    dict['Q'] = \"10011111\";\n    dict['R'] = \"1000\";\n    dict['S'] = \"00110\";\n    dict['T'] = \"00111\";\n    dict['U'] = \"10011100\";\n    dict['V'] = \"10011101\";\n    dict['W'] = \"000010\";\n    dict['X'] = \"10010010\";\n    dict['Y'] = \"10010011\";\n    dict['Z'] = \"10010000\";\n    tcid[\"00000\"] ='A';\n    tcid[\"00001\"] ='B';\n    tcid[\"00010\"] ='C';\n    tcid[\"00011\"] ='D';\n    tcid[\"00100\"] ='E';\n    tcid[\"00101\"] ='F';\n    tcid[\"00110\"] ='G';\n    tcid[\"00111\"] ='H';\n    tcid[\"01000\"] ='I';\n    tcid[\"01001\"] ='J';\n    tcid[\"01010\"] ='K';\n    tcid[\"01011\"] ='L';\n    tcid[\"01100\"] ='M';\n    tcid[\"01101\"] ='N';\n    tcid[\"01110\"] ='O';\n    tcid[\"01111\"] ='P';\n    tcid[\"10000\"] ='Q';\n    tcid[\"10001\"] ='R';\n    tcid[\"10010\"] ='S';\n    tcid[\"10011\"] ='T';\n    tcid[\"10100\"] ='U';\n    tcid[\"10101\"] ='V';\n    tcid[\"10110\"] ='W';\n    tcid[\"10111\"] ='X';\n    tcid[\"11000\"] ='Y';\n    tcid[\"11001\"] ='Z';\n    tcid[\"11010\"] =' ';\n    tcid[\"11011\"] ='.';\n    tcid[\"11100\"] =',';\n    tcid[\"11101\"] ='-';\n    tcid[\"11110\"] ='\\'';\n    tcid[\"11111\"] ='?';\n}\n\nstring solve(string a){\n    string tmp = \"\";\n    string res = \"\";\n    if(a == \"\")return a;\n    for(int i = 0;i < a.size();i++){\n\ttmp += dict[a[i]];\n    }\n    while(tmp.size()%5)tmp+=\"0\";\n    for(int i = 0;i < tmp.size();i += 5){\n\tstring x = \"\";\n\tfor(int j = 0;j < 5;j++){\n\t    x += tmp[i + j];\n\t}\n\tres += tcid[x];\n    }\n    return res;\n}\nbool fin = false;\nstring get_line(){\n    string res = \"\";\n    while(true){\n\tchar t = getchar();\n\tif(t == '\\n' || t == EOF){\n\t    if(t == EOF)fin = true;\n\t    break;\n\t}\n\tres += t;\n    }\n    return res;\n}\n\nint main(){\n    init();\n    while(!fin){\n\tstring res = solve(get_line());\n\tif(!fin && res != \"\")cout << res << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "\n#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <cfloat>\n#include <climits>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <memory>\n#include <string>\n\n#include <algorithm>\n#include <complex>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <set>\n#include <stack>\n#include <vector>\n#include <bitset>\n\nusing namespace std;\n\n#ifdef _MSC_VER\n#define __typeof__ decltype\n#define strtok_r strtok_s\n#endif\n\n#define ITER(c)             __typeof__((c).begin())\n#define FOREACH(it, c)      for (ITER(c) it=(c).begin(); it != (c).end(); ++it)\n#define RITER(c)            __typeof__((c).rbegin())\n#define RFOREACH(it, c)     for (RITER(c) it=(c).rbegin(); it != (c).rend(); ++it)\n#define REP(i, n)           REPEAT(i, 0, n)\n#define RREP(i, n)          RREPEAT(i, 0, n);\n#define REPEAT(i, k, n)     for(int i = (k); i < (k+n); ++i)\n#define RREPEAT(i, k, n)    for(int i = (k)+(n)-1; i >= (k); ++i)\n#define ALL(c)              (c).begin(), (c).end()\n#define LLPOW(p1,p2)        ((ll)pow((double)(p1), (int)p2))\n#define ESIZEOF(A)          (sizeof(A)/sizeof((A)[0]))\n#define MIN(p1,p2)          (((p1)<(p2))?(p1):(p2))\n#define MAX(p1,p2)          (((p1)>(p2))?(p1):(p2))\n#define CIN_NO_SYNC         do { cin.tie(0); ios_base::sync_with_stdio(false); } while(0)\n#define GETSTR(p)           fgets((p), sizeof(p), stdin)\n#define CHOMP(p)            do{ char *_q = (p) + strlen(p)-1; if(*_q == '\\n' || *_q == '\\r') *_q = 0; } while(0)\n#define mp                  make_pair\n#define pb                  push_back\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\n#define X real()\n#define Y imag()\ntypedef double D;\ntypedef complex<D> P;\n#define EPS (1e-9)\n\n#ifdef _DEBUG\n#define pf printf\n#define pr(n) do { cout << #n \" = \" << (n) << endl; } while(0)\n#else\n#define pf(...) /* */\n#define pr(...) /* */\n#endif\n\nstruct t {\n    char code;\n    const char *bs1;\n    const char *bs2;\n} table[] = {\n    { ' ',  \"101\",      \"11010\" },\n    { '\\'', \"000000\",   \"11110\" },\n    { ',',  \"000011\",   \"11100\" },\n    { '-',  \"10010001\", \"11101\" },\n    { '.',  \"010001\",   \"11011\" },\n    { '?',  \"000001\",   \"11111\" },\n    { 'A',  \"100101\",   \"00000\" },\n    { 'B',  \"10011010\", \"00001\" },\n    { 'C',  \"0101\",     \"00010\" },\n    { 'D',  \"0001\",     \"00011\" },\n    { 'E',  \"110\",      \"00100\" },\n    { 'F',  \"01001\",    \"00101\" },\n    { 'G',  \"10011011\", \"00110\" },\n    { 'H',  \"010000\",   \"00111\" },\n    { 'I',  \"0111\",     \"01000\" },\n    { 'J',  \"10011000\", \"01001\" },\n    { 'K',  \"0110\",     \"01010\" },\n    { 'L',  \"00100\",    \"01011\" },\n    { 'M',  \"10011001\", \"01100\" },\n    { 'N',  \"10011110\", \"01101\" },\n    { 'O',  \"00101\",    \"01110\" },\n    { 'P',  \"111\",      \"01111\" },\n    { 'Q',  \"10011111\", \"10000\" },\n    { 'R',  \"1000\",     \"10001\" },\n    { 'S',  \"00110\",    \"10010\" },\n    { 'T',  \"00111\",    \"10011\" },\n    { 'U',  \"10011100\", \"10100\" },\n    { 'V',  \"10011101\", \"10101\" },\n    { 'W',  \"000010\",   \"10110\" },\n    { 'X',  \"10010010\", \"10111\" },\n    { 'Y',  \"10010011\", \"11000\" },\n    { 'Z',  \"10010000\", \"11001\" },\n};\n\n\n\nvoid solve(string &s){\n    string bs;\n    int n = ESIZEOF(table);\n    FOREACH(it, s){\n        char c = *it;\n        REP(i,n){\n            if(c == table[i].code){\n                bs += table[i].bs1;\n                break;\n            }\n        }\n    }\n    while(bs.size() % 5 != 0){\n        bs += \"0\";\n    }\n    for(size_t i = 0; i < bs.size(); i += 5){\n        string sbs = bs.substr(i,5);\n        REP(j,n){\n            if(sbs == table[j].bs2){\n                printf(\"%c\", table[j].code);\n                break;\n            }\n        }\n    }\n    printf(\"\\n\");\n}\n\nint main(){\n    string s;\n    while(getline(cin,s)){\n        solve(s);\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<algorithm>\n#include<iostream>\n#include<string>\n\nstd::string enc[] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\" };\nstd::string str = \" \\',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nstd::string symbol = \" .,-\\'?\";\n\nint bin( std::string s )\n{\n\tstd::reverse( s.begin(), s.end() );\n\n\tint ret = 0, w = 1;\n\tfor( int i = 0; i != s.size(); ++i )\n\t{\n\t\tif( s[i] - '0' )\n\t\t\tret += w;\n\n\t\tw <<= 1;\n\t}\n\n\treturn ret;\n}\n\nint main()\n{\n\tstd::string s;\n\twhile( std::getline( std::cin, s ) )\n\t{\n\t\tstd::string code;\n\t\tfor( int i = 0; i != s.size(); ++i )\n\t\t\tcode += enc[ str.find( s[i] ) ];\n\n\t\tfor( int i = 0; i < code.size(); i += 5 )\n\t\t{\n\t\t\tstd::string t = code.substr( i, std::min( 5, (int)code.size() - i ) ) + std::string( std::max( 0, 5 - (int)code.size() + i ), '0' );\n\t\t\tint n = bin( t );\n\t\t\tstd::cout << ( n + 6 < str.size() ? str[n + 6] : symbol[n + 6 - str.size()] );\n\t\t}\n\n\t\tstd::cout << std::endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i,n)for(int i=0;i<n;i++)\nusing namespace std;\n\nmap<char, int>notal{\n\t{ ' ',26 },{ '\\'',27 },{ ',',28 },{ '-',29 },{ '.',30 },{ '?',31 }\n};\nmap<int, char>mp{\n\t{ 26,' ' },{ 27,'.' },{ 28,',' },{ 29,'-' },{ 30,'\\'' },{ 31,'?' },\n};\nstring code[]{ \"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\" };\nint bin(string s) {\n\treverse(s.begin(), s.end());\n\tint i = 1;\n\tint res = 0;\n\tfor (char c : s) {\n\t\tres += i*(c - '0');\n\t\ti <<= 1;\n\t}\n\treturn res;\n}\nint main() {\n\tstring s;\n\twhile (getline(cin, s)) {\n\t\tstring ss;\n\t\tfor (char c : s) {\n\t\t\tif (isalpha(c))ss += code[c - 'A'];\n\t\t\telse ss += code[notal[c]];\n\t\t}\n\t\twhile (ss.size() % 5)ss += '0';\n\t\tstring ans;\n\t\tfor (int i = 0; i <= ss.size() - 5; i += 5) {\n\t\t\tint d = bin(ss.substr(i, 5));\n\t\t\tif (d < 26)ans += 'A' + d;\n\t\t\telse ans += mp[d];\n\t\t}\n\t\tcout << ans << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<iostream>\n#include<string>\n#include<map>\nusing namespace std;\n\nmap<string, string> wtoi;\nmap<string, string> itow;\n\nvoid make_dictonary1() {\n\twtoi[\" \"] = \"101\"; wtoi[\"'\"] = \"000000\"; wtoi[\",\"] = \"000011\"; wtoi[\"-\"] = \"10010001\"; wtoi[\".\"] = \"010001\";\n\twtoi[\"?\"] = \"000001\"; wtoi[\"A\"] = \"100101\"; wtoi[\"B\"] = \"10011010\"; wtoi[\"C\"] = \"0101\"; wtoi[\"D\"] = \"0001\";\n\twtoi[\"E\"] = \"110\"; wtoi[\"F\"] = \"01001\"; wtoi[\"G\"] = \"10011011\"; wtoi[\"H\"] = \"010000\"; wtoi[\"I\"] = \"0111\";\n\twtoi[\"J\"] = \"10011000 \"; wtoi[\"K\"] = \"0110\"; wtoi[\"L\"] = \"00100\"; wtoi[\"M\"] = \"10011001\"; wtoi[\"N\"] = \"00101\";\n\twtoi[\"O\"] = \"00101\"; wtoi[\"P\"] = \"111\"; wtoi[\"Q\"] = \"10011111\"; wtoi[\"R\"] = \"1000\"; wtoi[\"S\"] = \"00110\";\n\twtoi[\"T\"] = \"00111\"; wtoi[\"U\"] = \"10011100\"; wtoi[\"V\"] = \"10011101\"; wtoi[\"W\"] = \"000010\"; wtoi[\"X\"] = \"10010010\"; \n\twtoi[\"Y\"] = \"10010011\"; wtoi[\"Z\"] = \"10010000\";\n}\nvoid make_dictonary2() {\n\tint i, j;\n\tfor( i = 0; i < 26; i++ ) {\n\t\tchar c = 'A' + i;\n\t\tstring str;\n\t\tstr += c;\n\t\tstring in;\n\t\tfor( j = 4; j >= 0; j-- ) {\n\t\t\tif ( (i>>(j))%2 )\n\t\t\t\tin += '1';\n\t\t\telse\n\t\t\t\tin += '0';\n\t\t}\n\t\titow[in] = str;\n\t}\n\titow[\"11011\"] = \".\"; itow[\"11100\"] = \",\"; itow[\"11101\"] = \"-\"; itow[\"11110\"] = \"'\"; itow[\"11111\"] = \"?\";\n}\n\nchar buf[512];\nint buflen;\n\nint main() {\n\tmake_dictonary1();\n\tmake_dictonary2();\n\tint i, j;\n\twhile(gets(buf)) {\n\t\tbuflen = strlen(buf);\n\t\t\n\t\tstring intejor;\n\t\t\n\t\tfor( i = 0; i < buflen; i++ ) {\n\t\t\tstring in;\n\t\t\tin += buf[i];\n\t\t\tintejor += wtoi[in];\n\t\t}\n\t\t\n\t\tstring str[514];\n\t\tfor( i = 0; i < intejor.length(); i+=5 ) {\n\t\t\tfor( int j = i; j < i + 5; j++ ) {\n\t\t\t\tif ( j >= intejor.length() )\n\t\t\t\t\tstr[i] += '0';\n\t\t\t\telse\n\t\t\t\t\tstr[i] += intejor[j];\n\t\t\t}\n\t\t\t//cout << str[i] << endl;\n\t\t}\n\t\t\n\t\tfor( j = 0; j < i; j++ ) {\n\t\t\tcout << itow[str[j]];\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<map>\n#include<set>\n#include<list>\n#include<cstdio>\n#include<cmath>\n#include<iomanip>\n#include<algorithm>\n#include<functional>\n#include<queue>\n#include<stack>\nusing namespace std;\nint main() {\n\tmap<char, string>a;\n\tstring h = \"'\";\n\ta.insert(map<char, string>::value_type(' ',\"101\"));\n\ta.insert(map<char, string>::value_type(h[0], \"000000\"));\n\ta.insert(map<char, string>::value_type(',', \"000011\"));\n\ta.insert(map<char, string>::value_type('-', \"10010001\"));\n\ta.insert(map<char, string>::value_type('.', \"010001\"));\n\ta.insert(map<char, string>::value_type('?', \"000001\"));\n\ta.insert(map<char, string>::value_type('A', \"100101\"));\n\ta.insert(map<char, string>::value_type('B', \"10011010\"));\n\ta.insert(map<char, string>::value_type('C', \"0101\"));\n\ta.insert(map<char, string>::value_type('D', \"0001\"));\n\ta.insert(map<char, string>::value_type('E', \"110\"));\n\ta.insert(map<char, string>::value_type('F', \"01001\"));\n\ta.insert(map<char, string>::value_type('G', \"10011011\"));\n\ta.insert(map<char, string>::value_type('H', \"010000\"));\n\ta.insert(map<char, string>::value_type('I', \"0111\"));\n\ta.insert(map<char, string>::value_type('J', \"10011000\"));\n\ta.insert(map<char, string>::value_type('K', \"0110\"));\n\ta.insert(map<char, string>::value_type('L', \"00100\"));\n\ta.insert(map<char, string>::value_type('M', \"10011001\"));\n\ta.insert(map<char, string>::value_type('N', \"10011110\"));\n\ta.insert(map<char, string>::value_type('O', \"00101\"));\n\ta.insert(map<char, string>::value_type('P', \"111\"));\n\ta.insert(map<char, string>::value_type('Q', \"10011111\"));\n\ta.insert(map<char, string>::value_type('R', \"1000\"));\n\ta.insert(map<char, string>::value_type('S', \"00110\"));\n\ta.insert(map<char, string>::value_type('T', \"00111\"));\n\ta.insert(map<char, string>::value_type('U', \"10011100\"));\n\ta.insert(map<char, string>::value_type('V', \"10011101\"));\n\ta.insert(map<char, string>::value_type('W', \"000010\"));\n\ta.insert(map<char, string>::value_type('X', \"10010010\"));\n\ta.insert(map<char, string>::value_type('Y', \"10010011\"));\n\ta.insert(map<char, string>::value_type('Z', \"10010000\"));\n\tmap<string, char>b;\n\tb.insert(map<string, char>::value_type(\"00000\", 'A'));\n\tb.insert(map<string, char>::value_type(\"00001\", 'B'));\n\tb.insert(map<string, char>::value_type(\"00010\", 'C'));\n\tb.insert(map<string, char>::value_type(\"00011\", 'D'));\n\tb.insert(map<string, char>::value_type(\"00100\", 'E'));\n\tb.insert(map<string, char>::value_type(\"00101\", 'F'));\n\tb.insert(map<string, char>::value_type(\"00110\", 'G'));\n\tb.insert(map<string, char>::value_type(\"00111\", 'H'));\n\tb.insert(map<string, char>::value_type(\"01000\", 'I'));\n\tb.insert(map<string, char>::value_type(\"01001\", 'J'));\n\tb.insert(map<string, char>::value_type(\"01010\", 'K'));\n\tb.insert(map<string, char>::value_type(\"01011\", 'L'));\n\tb.insert(map<string, char>::value_type(\"01100\", 'M'));\n\tb.insert(map<string, char>::value_type(\"01101\", 'N'));\n\tb.insert(map<string, char>::value_type(\"01110\", 'O'));\n\tb.insert(map<string, char>::value_type(\"01111\", 'P'));\n\tb.insert(map<string, char>::value_type(\"10000\", 'Q'));\n\tb.insert(map<string, char>::value_type(\"10001\", 'R'));\n\tb.insert(map<string, char>::value_type(\"10010\", 'S'));\n\tb.insert(map<string, char>::value_type(\"10011\", 'T'));\n\tb.insert(map<string, char>::value_type(\"10100\", 'U'));\n\tb.insert(map<string, char>::value_type(\"10101\", 'V'));\n\tb.insert(map<string, char>::value_type(\"10110\", 'W'));\n\tb.insert(map<string, char>::value_type(\"10111\", 'X'));\n\tb.insert(map<string, char>::value_type(\"11000\", 'Y'));\n\tb.insert(map<string, char>::value_type(\"11001\", 'Z'));\n\tb.insert(map<string, char>::value_type(\"11010\", ' '));\n\tb.insert(map<string, char>::value_type(\"11011\", '.'));\n\tb.insert(map<string, char>::value_type(\"11100\", ','));\n\tb.insert(map<string, char>::value_type(\"11101\", '-'));\n\tb.insert(map<string, char>::value_type(\"11110\", h[0]));\n\tb.insert(map<string, char>::value_type(\"11111\", '?'));\n\tstring s;\n\twhile (getline(cin,s)) {\n\t\th = \"\";\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\th += a[s[i]];\n\t\t}\n\t\twhile (h.length() % 5 != 0) {\n\t\t\th += \"0\";\n\t\t}\n\t\tstring d = \"\";\n\t\tfor (int i = 0; i < h.length(); i += 5) {\n\t\t\tstring e = h.substr(i, 5);\n\t\t\td += b[e];\n\t\t}\n\t\tcout << d << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\nusing namespace std;\n\nstring convert(string str) {\n  map<char, string> d;\n  d[' '] = \"101\";\n  d['\\''] = \"000000\";\n  d[','] = \"000011\";\n  d['-'] = \"10010001\";\n  d['.'] = \"010001\";\n  d['?'] = \"000001\";\n  d['A'] = \"100101\";\n  d['B'] = \"10011010\";\n  d['C'] = \"0101\";\n  d['D'] = \"0001\";\n  d['E'] = \"110\";\n  d['F'] = \"01001\";\n  d['G'] = \"10011011\";\n  d['H'] = \"010000\";\n  d['I'] = \"0111\";\n  d['J'] = \"10011000\";\n  d['K'] = \"0110\";\n  d['L'] = \"00100\";\n  d['M'] = \"10011001\";\n  d['N'] = \"10011110\";\n  d['O'] = \"00101\";\n  d['P'] = \"111\";\n  d['Q'] = \"10011111\";\n  d['R'] = \"1000\";\n  d['S'] = \"00110\";\n  d['T'] = \"00111\";\n  d['U'] = \"10011100\";\n  d['V'] = \"10011101\";\n  d['W'] = \"000010\";\n  d['X'] = \"10010010\";\n  d['Y'] = \"10010011\";\n  d['Z'] = \"10010000\";\n\n  map<string, char> e;\n  e[\"00000\"] = 'A';\n  e[\"00001\"] = 'B';\n  e[\"00010\"] = 'C';\n  e[\"00011\"] = 'D';\n  e[\"00100\"] = 'E';\n  e[\"00101\"] = 'F';\n  e[\"00110\"] = 'G';\n  e[\"00111\"] = 'H';\n  e[\"01000\"] = 'I';\n  e[\"01001\"] = 'J';\n  e[\"01010\"] = 'K';\n  e[\"01011\"] = 'L';\n  e[\"01100\"] = 'M';\n  e[\"01101\"] = 'N';\n  e[\"01110\"] = 'O';\n  e[\"01111\"] = 'P';\n  e[\"10000\"] = 'Q';\n  e[\"10001\"] = 'R';\n  e[\"10010\"] = 'S';\n  e[\"10011\"] = 'T';\n  e[\"10100\"] = 'U';\n  e[\"10101\"] = 'V';\n  e[\"10110\"] = 'W';\n  e[\"10111\"] = 'X';\n  e[\"11000\"] = 'Y';\n  e[\"11001\"] = 'Z';\n  e[\"11010\"] = ' ';\n  e[\"11011\"] = '.';\n  e[\"11100\"] = ',';\n  e[\"11101\"] = '-';\n  e[\"11110\"] = '\\'';\n  e[\"11111\"] = '?';\n  string str2 = \"\";\n  for(int i = 0; i < str.length(); i++) {\n    str2 += d[str[i]];\n  }\n  int n = 5 - str2.length() % 5;\n  for(int i = 0; i < n; i++) {\n    str2 += \"0\";\n  }\n  string str3;\n  for(int i = 0; i < str2.length(); i += 5) {\n    str3 += e[str2.substr(i, 5)];\n  }\n  return str3;\n}\n\nint main() {\n  string str;\n  while(getline(cin, str)) {\n    cout << convert(str) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    char str[1000];\n    string Midstream;\n    string first=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\",secound=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n    string conversion[33]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\n    \"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\n    \"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\"101\"};\n    while(fgets(str,1000,stdin)){\n        for(int i=0;str[i]!='\\0';i++){\n            for(int j=0;j<33;j++)if(str[i]==first[j])Midstream+=conversion[j];\n        }\n        for(int i=0;i<Midstream.size()%5;i++)Midstream+='0';\n        for(int i=0,point=0;Midstream[i]!='\\0';i++){\n            if(i%5==4){\n                int num=0;\n                for(int j=point,kawa[5]={1,2,4,8,16};j<=i;j++)num+=(Midstream[j]-'0')*kawa[i-j];\n                cout<<secound[num];\n                point=i+1;\n            }\n        }\n        cout<<endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n\tchar ch;\n\tstring input_str = \"\";\n\twhile(cin.get(ch)){\n\t\tswitch(ch){\n\t\tcase ' ' :input_str += \"101\"\t    ;break;\n\t\tcase '\\n':input_str += \"101\"\t\t;break;\n\t\tcase '\\'':input_str += \"000000\"\t\t;break;\n\t\tcase ',' :input_str += \"000011\"\t\t;break;\n\t\tcase '-' :input_str += \"10010001\"\t;break;\n\t\tcase '.' :input_str += \"010001\"\t\t;break;\n\t\tcase '?' :input_str += \"000001\"\t\t;break;\n\t\tcase 'A' :input_str += \"100101\"\t\t;break;\n\t\tcase 'B' :input_str += \"10011010\"\t;break;\n\t\tcase 'C' :input_str += \"0101\"\t\t;break;\n\t\tcase 'D' :input_str += \"0001\"\t\t;break;\n\t\tcase 'E' :input_str += \"110\"\t\t;break;\n\t\tcase 'F' :input_str += \"01001\"\t\t;break;\n\t\tcase 'G' :input_str += \"10011011\"\t;break;\n\t\tcase 'H' :input_str += \"010000\"\t\t;break;\n\t\tcase 'I' :input_str += \"0111\"\t\t;break;\n\t\tcase 'J' :input_str += \"10011000\"\t;break;\n\t\tcase 'K' :input_str += \"0110\"\t\t;break;\n\t\tcase 'L' :input_str += \"00100\"\t\t;break;\n\t\tcase 'M' :input_str += \"10011001\"\t;break;\n\t\tcase 'N' :input_str += \"10011110\"\t;break;\n\t\tcase 'O' :input_str += \"00101\"\t\t;break;\n\t\tcase 'P' :input_str += \"111\"\t\t;break;\n\t\tcase 'Q' :input_str += \"10011111\"\t;break;\n\t\tcase 'R' :input_str += \"1000\"\t\t;break;\n\t\tcase 'S' :input_str += \"00110\"\t\t;break;\n\t\tcase 'T' :input_str += \"00111\"\t\t;break;\n\t\tcase 'U' :input_str += \"10011100\"\t;break;\n\t\tcase 'V' :input_str += \"10011101\"\t;break;\n\t\tcase 'W' :input_str += \"000010\"\t\t;break;\n\t\tcase 'X' :input_str += \"10010010\"\t;break;\n\t\tcase 'Y' :input_str += \"10010011\"\t;break;\n\t\tcase 'Z' :input_str += \"10010000\"\t;break;\n\t\t}\n\t}\n\tint pad = 5 - input_str.size()%5;\n\tfor(int i=0; i<pad; i++)input_str += \"0\";\n\tfor(int i=0; i<input_str.size()/5; i++){\n\t\tstring output_str = input_str.substr(i*5, 5);\n\t\tif(output_str== \"00000\"){ cout << \"A\"; }\n\t\telse if( output_str==\"00001\") { cout << \"B\";}\t\n\t\telse if( output_str==\"00010\") { cout << \"C\";}\t\n\t\telse if( output_str==\"00011\") { cout << \"D\";}\t\n\t\telse if( output_str==\"00100\") { cout << \"E\";}\t\n\t\telse if( output_str==\"00101\") { cout << \"F\";}\t\n\t\telse if( output_str==\"00110\") { cout << \"G\";}\t\n\t\telse if( output_str==\"00111\") { cout << \"H\";}\t\n\t\telse if( output_str==\"01000\") { cout << \"I\";}\t\n\t\telse if( output_str==\"01001\") { cout << \"J\";}\t\n\t\telse if( output_str==\"01010\") { cout << \"K\";}\t\n\t\telse if( output_str==\"01011\") { cout << \"L\";}\t\n\t\telse if( output_str==\"01100\") { cout << \"M\";}\t\n\t\telse if( output_str==\"01101\") { cout << \"N\";}\t\n\t\telse if( output_str==\"01110\") { cout << \"O\";}\t\n\t\telse if( output_str==\"01111\") { cout << \"P\";}\t\n\t\telse if( output_str==\"10000\") { cout << \"Q\";}\t\n\t\telse if( output_str==\"10001\") { cout << \"R\";}\t\n\t\telse if( output_str==\"10010\") { cout << \"S\";}\t\n\t\telse if( output_str==\"10011\") { cout << \"T\";}\t\n\t\telse if( output_str==\"10100\") { cout << \"U\";}\t\n\t\telse if( output_str==\"10101\") { cout << \"V\";}\t\n\t\telse if( output_str==\"10110\") { cout << \"W\";}\t\n\t\telse if( output_str==\"10111\") { cout << \"X\";}\t\n\t\telse if( output_str==\"11000\") { cout << \"Y\";}\t\n\t\telse if( output_str==\"11001\") { cout << \"Z\";}\t\n\t\telse if( output_str==\"11010\") { cout << \" \";}\t\n\t\telse if( output_str==\"11011\") { cout << \".\";}\t\n\t\telse if( output_str==\"11100\") { cout << \",\";}\t\n\t\telse if( output_str==\"11101\") { cout << \"-\";}\t\n\t\telse if( output_str==\"11110\") { cout << \"\\'\";} \n\t\telse if( output_str==\"11111\") { cout << \"?\";}\n\t}\n\tcout << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define PB push_back\n#define MP make_pair\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define ALL(a) (a).begin(),(a).end()\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> P;\nconst int INF=1e9;\nconst int MOD=100000;\nstring a[26]={\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\nstring b[26]={\n      \"00000\",\n      \"00001\",\n      \"00010\",\n      \"00011\",\n      \"00100\",\n      \"00101\",\n      \"00110\",\n      \"00111\",\n      \"01000\",\n      \"01001\",\n      \"01010\",\n      \"01011\",\n      \"01100\",\n      \"01101\",\n      \"01110\",\n      \"01111\",\n      \"10000\",\n      \"10001\",\n      \"10010\",\n      \"10011\",\n      \"10100\",\n      \"10101\",\n      \"10110\",\n      \"10111\",\n      \"11000\",\n      \"11001\"\n};\nint main(){\n      string s,t=\"\";\n      getline(cin,s);\n      REP(i,s.size()){\n            if(s[i]==' ')t+=\"101\";\n            else if(s[i]=='\\'')t+=\"000000\";\n            else if(s[i]==',')t+=\"000011\";\n            else if(s[i]=='-')t+=\"10010001\";\n            else if(s[i]=='.')t+=\"010001\";\n            else{\n                  REP(j,26){\n                        if(s[i]==('A'+j))t+=a[j];\n                  }\n            }\n      }\n      while(t.size()%5!=0)t+='0';\n      //cout<<t<<endl;\n      string ans=\"\";\n      REP(i,t.size()/5){\n            s.assign(t,i*5,5);\n            REP(j,26){\n                  if(s==b[j]){\n                        ans+=('A'+j);\n                  }\n            }\n            if(ans.size()==i){\n                  if(s==\"11010\")ans+=' ';\n                  else if(s==\"11011\")ans+='.';\n                  else if(s==\"11100\")ans+=',';\n                  else if(s==\"11101\")ans+='-';\n                  else if(s==\"11110\")ans+='\\'';\n                  else ans+='?';\n            }\n            //cout<<s<<endl;\n      }\n      cout<<ans<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <iomanip>\n#include <queue>\n#include <set>\n#include <map>\n#include <cstdlib>\n#include <cstdio>\n#include <cmath>\n#include <bitset>\nusing namespace std;\n\n\nconst double EPS = 1e-9;\n\nint main(){\n\tstring enc[256];\n\tenc[' '] = \"101\";\n\tenc['\\''] = \"000000\";\n\tenc[','] = \"000011\";\n\tenc['-'] = \"10010001\";\n\tenc[','] = \"010001\";\n\tenc['?'] = \"000001\";\n\tenc['A'] = \"100101\";\n\tenc['B'] = \"10011010\";\n\tenc['C'] = \"0101\";\n\tenc['D'] = \"0001\";\n\tenc['E'] = \"110\";\n\tenc['F'] = \"01001\";\n\tenc['G'] = \"10011011\";\n\tenc['H'] = \"010000\";\n\tenc['I'] = \"0111\";\n\tenc['J'] = \"10011000\";\n\tenc['K'] = \"0110\";\n\tenc['L'] = \"00100\";\n\tenc['M'] = \"10011001\";\n\tenc['N'] = \"10011110\";\n\tenc['O'] = \"00101\";\n\tenc['P'] = \"111\";\n\tenc['Q'] = \"10011111\";\n\tenc['R'] = \"1000\";\n\tenc['S'] = \"00110\";\n\tenc['T'] = \"00111\";\n\tenc['U'] = \"10011100\";\n\tenc['V'] = \"10011101\";\n\tenc['W'] = \"000010\";\n\tenc['X'] = \"10010010\";\n\tenc['Y'] = \"10010011\";\n\tenc['Z'] = \"10010000\";\n\n\tstring d = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\tmap<string, char> dec;\n\tfor(int i = 0; i < 32; i++){\n\t\tdec[bitset<5>(i).to_string()] = d[i];\n\t}\n\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tstring e = \"\";\n\t\tfor(int i = 0; i < s.size(); i++){\n\t\t\te += enc[s[i]];\n\t\t}\n\t\twhile(e.size()%5 != 0){\n\t\t\te += \"0\";\n\t\t}\n\t\tfor(int i = 0; i < e.size(); i+=5){\n\t\t\tcout << dec[e.substr(i, 5)];\n\t\t}\n\t\tcout << endl;\n\t}\n\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<map>\n#include<iostream>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint main() {\n\tmap<char, string> a;\n\tstring b = \"'\";\n\ta.insert(map<char, string>::value_type(' ', \"101\"));\n\ta.insert(map<char, string>::value_type(b[0], \"000000\"));\n\ta.insert(map<char, string>::value_type(',', \"000011\"));\n\ta.insert(map<char, string>::value_type('-', \"10010001\"));\n\ta.insert(map<char, string>::value_type('.', \"010001\"));\n\ta.insert(map<char, string>::value_type('?', \"000001\"));\n\ta.insert(map<char, string>::value_type('A', \"100101\"));\n\ta.insert(map<char, string>::value_type('B', \"10011010\"));\n\ta.insert(map<char, string>::value_type('C', \"0101\"));\n\ta.insert(map<char, string>::value_type('D', \"0001\"));\n\ta.insert(map<char, string>::value_type('E', \"110\"));\n\ta.insert(map<char, string>::value_type('F', \"01001\"));\n\ta.insert(map<char, string>::value_type('G', \"10011011\"));\n\ta.insert(map<char, string>::value_type('H', \"010000\"));\n\ta.insert(map<char, string>::value_type('I', \"0111\"));\n\ta.insert(map<char, string>::value_type('J', \"10011000\"));\n\ta.insert(map<char, string>::value_type('K', \"0110\"));\n\ta.insert(map<char, string>::value_type('L', \"00100\"));\n\ta.insert(map<char, string>::value_type('M', \"10011001\"));\n\ta.insert(map<char, string>::value_type('N', \"10011110\"));\n\ta.insert(map<char, string>::value_type('O', \"00101\"));\n\ta.insert(map<char, string>::value_type('P', \"111\"));\n\ta.insert(map<char, string>::value_type('Q', \"10011111\"));\n\ta.insert(map<char, string>::value_type('R', \"1000\"));\n\ta.insert(map<char, string>::value_type('S', \"00110\"));\n\ta.insert(map<char, string>::value_type('T', \"00111\"));\n\ta.insert(map<char, string>::value_type('U', \"10011100\"));\n\ta.insert(map<char, string>::value_type('V', \"10011101\"));\n\ta.insert(map<char, string>::value_type('W', \"000010\"));\n\ta.insert(map<char, string>::value_type('X', \"10010010\"));\n\ta.insert(map<char, string>::value_type('Y', \"10010011\"));\n\ta.insert(map<char, string>::value_type('Z', \"10010000\"));\n\tmap<string, char>e;\n\te.insert(map<string, char>::value_type(\"00000\", 'A'));\n\te.insert(map<string, char>::value_type(\"00001\", 'B'));\n\te.insert(map<string, char>::value_type(\"00010\", 'C'));\n\te.insert(map<string, char>::value_type(\"00011\", 'D'));\n\te.insert(map<string, char>::value_type(\"00100\", 'E'));\n\te.insert(map<string, char>::value_type(\"00101\", 'F'));\n\te.insert(map<string, char>::value_type(\"00110\", 'G'));\n\te.insert(map<string, char>::value_type(\"00111\", 'H'));\n\te.insert(map<string, char>::value_type(\"01000\", 'I'));\n\te.insert(map<string, char>::value_type(\"01001\", 'J'));\n\te.insert(map<string, char>::value_type(\"01010\", 'K'));\n\te.insert(map<string, char>::value_type(\"01011\", 'L'));\n\te.insert(map<string, char>::value_type(\"01100\", 'M'));\n\te.insert(map<string, char>::value_type(\"01101\", 'N'));\n\te.insert(map<string, char>::value_type(\"01110\", 'O'));\n\te.insert(map<string, char>::value_type(\"01111\", 'P'));\n\te.insert(map<string, char>::value_type(\"10000\", 'Q'));\n\te.insert(map<string, char>::value_type(\"10001\", 'R'));\n\te.insert(map<string, char>::value_type(\"10010\", 'S'));\n\te.insert(map<string, char>::value_type(\"10011\", 'T'));\n\te.insert(map<string, char>::value_type(\"10100\", 'U'));\n\te.insert(map<string, char>::value_type(\"10101\", 'V'));\n\te.insert(map<string, char>::value_type(\"10110\", 'W'));\n\te.insert(map<string, char>::value_type(\"10111\", 'X'));\n\te.insert(map<string, char>::value_type(\"11000\", 'Y'));\n\te.insert(map<string, char>::value_type(\"11001\", 'Z'));\n\te.insert(map<string, char>::value_type(\"11010\", ' '));\n\te.insert(map<string, char>::value_type(\"11011\", '.'));\n\te.insert(map<string, char>::value_type(\"11100\", ','));\n\te.insert(map<string, char>::value_type(\"11101\", '-'));\n\te.insert(map<string, char>::value_type(\"11110\", b[0]));\n\te.insert(map<string, char>::value_type(\"11111\", '?'));\n\tint l = 0;\n\tstring v = \"\";\n\twhile (getline(cin, b)) {\n\t\tl++;\n\t\tint sum = 0;\n\t\tstring d = \"\";\n\t\tif (l != 0) d += \" \";\n\t\tfor (int i = 0; i < b.length(); i++) {\n\t\t\td += a[b[i]];\n\t\t}\n\t\tsum++;\n\t\tsum = 0;\n\t\tstring r[1000];\n\t\tfor (int i = 0; i < d.length(); i += 5) {\n\t\t\tstring h = \"\";\n\t\t\tint k = d.length() - 1;\n\t\t\tfor (int j = i; j < min(i + 5, k); j++) {\n\t\t\t\th += d[j];\n\t\t\t}\n\t\t\tr[sum] += h;\n\t\t\twhile ((r[sum].length()) < 5) {\n\t\t\t\tr[sum] += \"0\";\n\t\t\t}\n\t\t\tsum++;\n\t\t}\n\t\td = \"\";\n\t\tfor (int i = 0; i < sum; i++) {\n\t\t\td += e[r[i]];\n\t\t}\n\t\tv += d;\n\t}\n\tcout << v << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n\nusing namespace std;\n\n\nint main() {\n\n  string str;\n\n  map<string,string> encode;\n  map<string,string> decode;\n\n  encode[\" \"] = \"101\";\n  encode[\"'\"] = \"000000\";\n  encode[\",\"] = \"000011\";\n  encode[\"-\"] = \"10010001\";\n  encode[\".\"] = \"010001\";\n\n  encode[\"?\"] = \"000001\";\n  encode[\"A\"] = \"100101\";\n  encode[\"B\"] = \"10011010\";\n  encode[\"C\"] = \"0101\";\n  encode[\"D\"] = \"0001\";\n  encode[\"E\"] = \"110\";\n  encode[\"F\"] = \"01001\";\n  encode[\"G\"] = \"10011011\";\n\n  encode[\"H\"] = \"010000\";\n  encode[\"I\"] = \"0111\";\n  encode[\"J\"] = \"10011000\";\n  encode[\"K\"] = \"0110\";\n  encode[\"L\"] = \"00100\";\n  encode[\"M\"] = \"10011001\";\n  encode[\"N\"] = \"10011110\";\n\n  encode[\"O\"] = \"00101\";\n  encode[\"P\"] = \"111\";\n  encode[\"Q\"] = \"10011111\";\n  encode[\"R\"] = \"1000\";\n  encode[\"S\"] = \"00110\";\n  encode[\"T\"] = \"00111\";\n  encode[\"U\"] = \"10011100\";\n\n  encode[\"V\"] = \"10011101\";\n  encode[\"W\"] = \"000010\";\n  encode[\"X\"] = \"10010010\";\n  encode[\"Y\"] = \"10010011\";\n  encode[\"Z\"] = \"10010000\";\n\n  decode[\"00000\"] = \"A\";\n  decode[\"00001\"] = \"B\";\n  decode[\"00010\"] = \"C\";\n  decode[\"00011\"] = \"D\";\n  decode[\"00100\"] = \"E\";\n  decode[\"00101\"] = \"F\";\n  decode[\"00110\"] = \"G\";\n\n  decode[\"00111\"] = \"H\";\n  decode[\"01000\"] = \"I\";\n  decode[\"01001\"] = \"J\";\n  decode[\"01010\"] = \"K\";\n  decode[\"01011\"] = \"L\";\n  decode[\"01100\"] = \"M\";\n  decode[\"01101\"] = \"N\";\n\n  decode[\"01110\"] = \"O\";\n  decode[\"01111\"] = \"P\";\n  decode[\"10000\"] = \"Q\";\n  decode[\"10001\"] = \"R\";\n  decode[\"10010\"] = \"S\";\n  decode[\"10011\"] = \"T\";\n  decode[\"10100\"] = \"U\";\n\n  decode[\"10101\"] = \"V\";\n  decode[\"10110\"] = \"W\";\n  decode[\"10111\"] = \"X\";\n  decode[\"11000\"] = \"Y\";\n  decode[\"11001\"] = \"Z\";\n\n  decode[\"11010\"] = \" \";\n  decode[\"11011\"] = \".\";\n  decode[\"11100\"] = \",\";\n  decode[\"11101\"] = \"-\";\n  decode[\"11110\"] = \"'\";\n  decode[\"11111\"] = \"?\";\n\n  while(getline(cin,str)) {\n\n    string enc=\"\";\n\n    for(int i=0;i<str.size();i++) {\n\n      enc+=encode[str.substr(i,1)];\n\n    }\n\n    enc+=\"0000\";\n\n    string dec=\"\";\n\n    for(int i=0;i+5<enc.size();i+=5) {\n\n      dec+=decode[enc.substr(i,5)];\n\n    }\n\n    cout << dec << endl;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint main(void){\n\n\tchar tmp;\n\tint sum;\n\tstring inp;\n\tstring before(\"\"),num(\"\"),after(\"\");\n\t\n\twhile(cin>>inp){\n\t\ttmp=getchar();\n\t\tif(tmp=='\\n'){\n\t\t\tbefore+=inp;\n\t\t\tafter=(\"\");\n\t\t\tnum=(\"\");\n\t\t\tfor(int i=0;i<before.length();i++){\n\t\t\t\tswitch(before[i]){\n\t\t\t\t\tcase' ':\n\t\t\t\t\t\tnum+=\"101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'\\'':\n\t\t\t\t\t\tnum+=\"000000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase',':\n\t\t\t\t\t\tnum+=\"000011\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'-':\n\t\t\t\t\t\tnum+=\"10010001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'.':\n\t\t\t\t\t\tnum+=\"010001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'?':\n\t\t\t\t\t\tnum+=\"000001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'A':\n\t\t\t\t\t\tnum+=\"100101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'B':\n\t\t\t\t\t\tnum+=\"10011010\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'C':\n\t\t\t\t\t\tnum+=\"0101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'D':\n\t\t\t\t\t\tnum+=\"0001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'E':\n\t\t\t\t\t\tnum+=\"110\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'F':\n\t\t\t\t\t\tnum+=\"01001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'G':\n\t\t\t\t\t\tnum+=\"10011011\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'H':\n\t\t\t\t\t\tnum+=\"010000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'I':\n\t\t\t\t\t\tnum+=\"0111\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'J':\n\t\t\t\t\t\tnum+=\"10011000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'K':\n\t\t\t\t\t\tnum+=\"0110\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'L':\n\t\t\t\t\t\tnum+=\"00100\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'M':\n\t\t\t\t\t\tnum+=\"10011001\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'N':\n\t\t\t\t\t\tnum+=\"10011110\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'O':\n\t\t\t\t\t\tnum+=\"00101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'P':\n\t\t\t\t\t\tnum+=\"111\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'Q':\n\t\t\t\t\t\tnum+=\"10011111\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'R':\n\t\t\t\t\t\tnum+=\"1000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'S':\n\t\t\t\t\t\tnum+=\"00110\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'T':\n\t\t\t\t\t\tnum+=\"00111\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'U':\n\t\t\t\t\t\tnum+=\"10011100\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'V':\n\t\t\t\t\t\tnum+=\"10011101\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'W':\n\t\t\t\t\t\tnum+=\"000010\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'X':\n\t\t\t\t\t\tnum+=\"10010010\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'Y':\n\t\t\t\t\t\tnum+=\"10010011\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase'Z':\n\t\t\t\t\t\tnum+=\"10010000\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile(num.length()%5!=0){\n\t\t\t\tnum+='0';\n\t\t\t}\n\t\t\tfor(int i=0;i<num.length();i+=5){\n\t\t\t\tsum=(num[i]-'0')*16+(num[i+1]-'0')*8+(num[i+2]-'0')*4+(num[i+3]-'0')*2+(num[i+4]-'0')*1;\n\t\t\t\tswitch(sum){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tafter+='A';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tafter+='B';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tafter+='C';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tafter+='D';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tafter+='E';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tafter+='F';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tafter+='G';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tafter+='H';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\tafter+='I';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\tafter+='J';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 10:\n\t\t\t\t\t\tafter+='K';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 11:\n\t\t\t\t\t\tafter+='L';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 12:\n\t\t\t\t\t\tafter+='M';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 13:\n\t\t\t\t\t\tafter+='N';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 14:\n\t\t\t\t\t\tafter+='O';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 15:\n\t\t\t\t\t\tafter+='P';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 16:\n\t\t\t\t\t\tafter+='Q';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 17:\n\t\t\t\t\t\tafter+='R';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 18:\n\t\t\t\t\t\tafter+='S';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 19:\n\t\t\t\t\t\tafter+='T';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 20:\n\t\t\t\t\t\tafter+='U';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 21:\n\t\t\t\t\t\tafter+='V';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 22:\n\t\t\t\t\t\tafter+='W';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 23:\n\t\t\t\t\t\tafter+='X';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 24:\n\t\t\t\t\t\tafter+='Y';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 25:\n\t\t\t\t\t\tafter+='Z';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 26:\n\t\t\t\t\t\tafter+=' ';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\tafter+='.';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 28:\n\t\t\t\t\t\tafter+=',';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 29:\n\t\t\t\t\t\tafter+='-';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 30:\n\t\t\t\t\t\tafter+='\\'';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 31:\n\t\t\t\t\t\tafter+='?';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout<<after<<endl;\n\t\t\tbefore=(\"\");\n\t\t}\n\t\telse before+=inp+' ';\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n/*\nint main() {\n  string a, b;\n  while (cin >> a >> b) {\n    cout << \"m['\" << a << \"'] = \\\"\" << b << \"\\\";\" << endl;\n  }\n}\n*/\n\nvector<string> split(string s) {\n  vector<string> res;\n  string t;\n  for (int i = 0; i < s.size(); ++i) {\n    t += s[i];\n    if (t.size() == 5) {\n      res.push_back(t);\n      t = \"\";\n    }\n  }\n\n  return res;\n}\n\nint main() {\n  string s;\n  map<char, string> m;\n  map<string, string> t;\n\n  m[' '] = \"101\";\n  m['\\''] = \"000000\";\n  m[','] = \"000011\";\n  m['-'] = \"10010001\";\n  m['.'] = \"010001\";\n  m['?'] = \"000001\";\n  m['A'] = \"100101\";\n  m['B'] = \"10011010\";\n  m['C'] = \"0101\";\n  m['D'] = \"0001\";\n  m['E'] = \"110\";\n  m['F'] = \"01001\";\n  m['G'] = \"10011011\";\n  m['H'] = \"010000\";\n  m['I'] = \"0111\";\n  m['J'] = \"10011000\";\n  m['K'] = \"0110\";\n  m['L'] = \"00100\";\n  m['M'] = \"10011001\";\n  m['N'] = \"10011110\";\n  m['O'] = \"00101\";\n  m['P'] = \"111\";\n  m['Q'] = \"10011111\";\n  m['R'] = \"1000\";\n  m['S'] = \"00110\";\n  m['T'] = \"00111\";\n  m['U'] = \"10011100\";\n  m['V'] = \"10011101\";\n  m['W'] = \"000010\";\n  m['X'] = \"10010010\";\n  m['Y'] = \"10010011\";\n  m['Z'] = \"10010000\";\n\n  t[\"00000\"] = \"A\";\n  t[\"00001\"] = \"B\";\n  t[\"00010\"] = \"C\";\n  t[\"00011\"] = \"D\";\n  t[\"00100\"] = \"E\";\n  t[\"00101\"] = \"F\";\n  t[\"00110\"] = \"G\";\n  t[\"00111\"] = \"H\";\n  t[\"01000\"] = \"I\";\n  t[\"01001\"] = \"J\";\n  t[\"01010\"] = \"K\";\n  t[\"01011\"] = \"L\";\n  t[\"01100\"] = \"M\";\n  t[\"01101\"] = \"N\";\n  t[\"01110\"] = \"O\";\n  t[\"01111\"] = \"P\";\n  t[\"10000\"] = \"Q\";\n  t[\"10001\"] = \"R\";\n  t[\"10010\"] = \"S\";\n  t[\"10011\"] = \"T\";\n  t[\"10100\"] = \"U\";\n  t[\"10101\"] = \"V\";\n  t[\"10110\"] = \"W\";\n  t[\"10111\"] = \"X\";\n  t[\"11000\"] = \"Y\";\n  t[\"11001\"] = \"Z\";\n  t[\"11010\"] = \" \";\n  t[\"11011\"] = \".\";\n  t[\"11100\"] = \",\";\n  t[\"11101\"] = \"-\";\n  t[\"11110\"] = \"'\";\n  t[\"11111\"] = \"?\";\n\n  while (getline(cin, s)) {\n    string ss;\n    for (int i = 0; i < s.size(); ++i) {\n      ss += m[s[i]];\n    }\n\n    if (ss.size() % 5) ss += string(5 - (int)ss.size() % 5, '0');\n    vector<string> v = split(ss);\n    for (int i = 0; i < v.size(); ++i) {\n      cout << t[v[i]];\n    }\n    puts(\"\");\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n  string map[1000];\n  map['A']=\"100101\"; map['B']=\"10011010\"; map['C']=\"0101\"; map['D']=\"0001\";\n  map['E']=\"110\"; map['F']=\"01001\"; map['G']=\"10011011\"; map['H']=\"010000\";\n  map['I']=\"0111\"; map['J']=\"10011000\"; map['K']=\"0110\"; map['L']=\"00100\";\n  map['M']=\"10011001\"; map['N']=\"10011110\"; map['O']=\"00101\"; map['P']=\"111\";\n  map['Q']=\"10011111\"; map['R']=\"1000\"; map['S']=\"00110\"; map['T']=\"00111\";\n  map['U']=\"10011100\"; map['V']=\"10011101\"; map['W']=\"000010\"; map['X']=\"10010010\";\n  map['Y']=\"10010011\"; map['Z']=\"10010000\"; map[' ']=\"101\"; map['\\'']=\"000000\";\n  map[',']=\"000011\"; map['-']=\"10010001\"; map['.']=\"010001\",map['?']=\"000001\";\n  string alpha[]={\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\n\t\t  \"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\n\t\t  \"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\n\t\t  \"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"};\n  string altmp=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  string line,chli,ans;\n  getline(cin,line);\n  for(int i=0;i<line.size();i++){\n    chli += map[line[i]];\n  }\n  if(chli.size() % 5 != 0) chli.append(5-chli.size()%5,'0');\n  for(int i=0;i<chli.size();i+=5){\n    string tmp = chli.substr(i,5);\n    for(int j=0;j<32;j++){\n      if(tmp == alpha[j]) ans += altmp[j];\n    }\n  }\n  cout<< ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include \"bits/stdc++.h\"\nusing namespace std;\n\n//#define int long long\n#define DBG 1\n#define dump(o) if(DBG){cerr<<#o<<\" \"<<o<<endl;}\n#define dumpc(o) if(DBG){cerr<<#o; for(auto &e:(o))cerr<<\" \"<<e;cerr<<endl;}\n#define rep(i,a,b) for(int i=(a);i<(b);i++)\n#define rrep(i,a,b) for(int i=(b)-1;i>=(a);i--)\n#define each(it,c) for(auto it=(c).begin();it!=(c).end();it++)\n#define all(c) c.begin(),c.end()\nconst int INF = sizeof(int) == sizeof(long long) ? 0x3f3f3f3f3f3f3f3fLL : 0x3f3f3f3f;\nconst int MOD = (int)(1e9 + 7);\nconst double EPS = 1e-10;\nint binstring_to_int(string s) {\n\tint x = 1;\n\tint res = 0;\n\trrep(i, 0, s.size()) {\n\t\tif (s[i] == '1')res |= x;\n\t\tx <<= 1;\n\t}\n\t\n\treturn res;\n}\nchar crypt(string s) {\n\tint x=binstring_to_int(s);\n\tif (x == 26)return ' ';\n\telse if (x == 27)return '.';\n\telse if (x == 28)return ',';\n\telse if (x == 29)return '-';\n\telse if (x == 30)return '\\'';\n\telse if (x == 31)return '?';\n\telse {\n\t\treturn 'A' + (char)x;\n\t}\n}\nsigned main() {\n\tmap<char, string>m;\n\tm[' '] = \"101\";\n\tm['\\''] = \"000000\";\n\tm[','] = \"000011\";\n\tm['-'] = \"10010001\";\n\tm['.'] = \"010001\";\n\tm['?'] = \"000001\";\n\tm['A'] = \"100101\";\n\tm['B'] = \"10011010\";\n\tm['C'] = \"0101\";\n\tm['D'] = \"0001\";\n\tm['E'] = \"110\";\n\tm['F'] = \"01001\";\n\tm['G'] = \"10011011\";\n\tm['H'] = \"010000\";\n\tm['I'] = \"0111\";\n\tm['J'] = \"10011000\";\n\tm['K'] = \"0110\";\n\tm['L'] = \"00100\";\n\tm['M'] = \"10011001\";\n\tm['N'] = \"10011110\";\n\tm['O'] = \"00101\";\n\tm['P'] = \"111\";\n\tm['Q'] = \"10011111\";\n\tm['R'] = \"1000\";\n\tm['S'] = \"00110\";\n\tm['T'] = \"00111\";\n\tm['U'] = \"10011100\";\n\tm['V'] = \"10011101\";\n\tm['W'] = \"000010\";\n\tm['X'] = \"10010010\";\n\tm['Y'] = \"10010011\";\n\tm['Z'] = \"10010000\";\n\n\tstring s, ans;\n\twhile (getline(cin, s)) {\n\n\t\trep(i, 0, s.size()) {\n\t\t\tans += m[s[i]];\n\t\t}\n\t\tstring cry;\n\t\tstring t;\n\t\trep(i, 0, ans.size()) {\n\t\t\tt.push_back(ans[i]);\n\t\t\tif (t.size() == 5) {\n\t\t\t\tcry += crypt(t);\n\t\t\t\tt.clear();\n\t\t\t}\n\t\t}\n\t\twhile (t.size() < 5)t = t + \"0\";\n\t\tcry += crypt(t);\n\n\t\tcout << cry << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n\nusing namespace std;\n\nmap<string,char> n;\nmap<char,string> m;\n\nvoid init1(){\n  m[' '] = \"101\";\n  m['\\''] = \"000000\";\n  m[','] = \"000011\";\n  m['-'] = \"10010001\";\n  m['.'] = \"010001\";\n  m['?'] = \"000001\";\n  m['A'] = \"100101\";\n  m['B'] = \"10011010\";\n  m['C'] = \"0101\";\n  m['D'] = \"0001\";\n  m['E'] = \"110\";\n  m['F'] = \"01001\";\n  m['G'] = \"10011011\";\n  m['H'] = \"010000\";\n  m['I'] = \"0111\";\n  m['J'] = \"10011000\";\n  m['K'] = \"0110\";\n  m['L'] = \"00100\";\n  m['M'] = \"10011001\";\n  m['N'] = \"10011110\";\n  m['O'] = \"00101\";\n  m['P'] = \"111\";\n  m['Q'] = \"10011111\";\n  m['R'] = \"1000\";\n  m['S'] = \"00110\";\n  m['T'] = \"00111\";\n  m['U'] = \"10011100\";\n  m['V'] = \"10011101\";\n  m['W'] = \"000010\";\n  m['X'] = \"10010010\";\n  m['Y'] = \"10010011\";\n  m['Z'] = \"10010000\";\n}\n\nvoid init2(){\n  n[\"00000\"] = 'A';\n  n[\"00001\"] = 'B';\n  n[\"00010\"] = 'C';\n  n[\"00011\"] = 'D';\n  n[\"00100\"] = 'E';\n  n[\"00101\"] = 'F';\n  n[\"00110\"] = 'G';\n  n[\"00111\"] = 'H';\n  n[\"01000\"] = 'I';\n  n[\"01001\"] = 'J';\n  n[\"01010\"] = 'K';\n  n[\"01011\"] = 'L';\n  n[\"01100\"] = 'M';\n  n[\"01101\"] = 'N';\n  n[\"01110\"] = 'O';\n  n[\"01111\"] = 'P';\n  n[\"10000\"] = 'Q';\n  n[\"10001\"] = 'R';\n  n[\"10010\"] = 'S';\n  n[\"10011\"] = 'T';\n  n[\"10100\"] = 'U';\n  n[\"10101\"] = 'V';\n  n[\"10110\"] = 'W';\n  n[\"10111\"] = 'X';\n  n[\"11000\"] = 'Y';\n  n[\"11001\"] = 'Z';\n  n[\"11010\"] = ' ';\n  n[\"11011\"] = '.';\n  n[\"11100\"] = ',';\n  n[\"11101\"] = '-';\n  n[\"11110\"] = '\\'';\n  n[\"11111\"] = '?';\n}\n\nint main(){\n  string str;\n\n  init1();\n  init2();\n\n  while(getline(cin,str)){\n    string s = \"\";\n    for(int i = 0 ; i < (int)str.size() ; i++){\n      s += m[str[i]];\n    }\n    \n    if((int)s.size() % 5){\n      for(int i = 0 ; i < (int)s.size() % 5 ; i++){\n\ts += '0';\n      }\n    }\n    \n    string ans = \"\";\n    for(int i = 0 ; i < (int)s.size() ; i+=5){\n      ans += n[s.substr(i,5)];\n    }\n    \n    cout << ans << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <vector>\n#include <string>\n#include <map>\n#include <queue>\n#include <stack>\n#include <algorithm>\n\n#define rep(i,j) REP((i), 0, (j))\n#define REP(i,j,k) for(int i=(j);(i)<(k);++i)\n#define between(a,x,b) ((a)<=(x)&&(x)<=(b))\nusing namespace std;\n\nstring convert(string str){\n  string res = \"\";\n  map<char, string>s;\n  s[' '] = \"101\";\n  s['\\''] = \"000000\";\n  s[','] = \"000011\";\n  s['-'] = \"10010001\";\n  s['.'] = \"010001\";\n  s['?'] = \"000001\";\n  s['A'] = \"100101\";\n  s['B'] = \"10011010\";\n  s['C'] = \"0101\";\n  s['D'] = \"0001\";\n  s['E'] = \"110\";\n  s['F'] = \"01001\";\n  s['G'] = \"100110011\";\n  s['H'] = \"010000\";\n  s['I'] = \"0111\";\n  s['J'] = \"10011000\";\n  s['K'] = \"0110\";\n  s['L'] = \"00100\";\n  s['M'] = \"10011001\";\n  s['N'] = \"10011110\";\n  s['O'] = \"00101\";\n  s['P'] = \"111\";\n  s['Q'] = \"10011111\";\n  s['R'] = \"1000\";\n  s['S'] = \"00110\";\n  s['T'] = \"00111\";\n  s['U'] = \"10011100\";\n  s['V'] = \"10011101\";\n  s['W'] = \"000010\";\n  s['X'] = \"10010010\";\n  s['Y'] = \"10010011\";\n  s['Z'] = \"10010000\";\n\n  rep(i, str.length()){\n    res += s[str[i]];\n  }\n\n  while(res.size() % 5) res += \"0\";\n \n  return res;\n}\n\nstring reconvert(string str){\n  string res = \"\";\n  map<string, char>s;\n  s[\"00000\"] = 'A';\n  s[\"00001\"] = 'B';\n  s[\"00010\"] = 'C';\n  s[\"00011\"] = 'D';\n  s[\"00100\"] = 'E';\n  s[\"00101\"] = 'F';\n  s[\"00110\"] = 'G';\n  s[\"00111\"] = 'H';\n  s[\"01000\"] = 'I';\n  s[\"01001\"] = 'J';\n  s[\"01010\"] = 'K';\n  s[\"01011\"] = 'L';\n  s[\"01100\"] = 'M';\n  s[\"01101\"] = 'N';\n  s[\"01110\"] = 'O';\n  s[\"01111\"] = 'P';\n  s[\"10000\"] = 'Q';\n  s[\"10001\"] = 'R';\n  s[\"10010\"] = 'S';\n  s[\"10011\"] = 'T';\n  s[\"10100\"] = 'U';\n  s[\"10101\"] = 'V';\n  s[\"10110\"] = 'W';\n  s[\"10111\"] = 'X';\n  s[\"11000\"] = 'Y';\n  s[\"11001\"] = 'Z';\n  s[\"11010\"] = ' ';\n  s[\"11011\"] = '.';\n  s[\"11100\"] = ',';\n  s[\"11101\"] = '-';\n  s[\"11110\"] = '\\'';\n  s[\"11111\"] = '?';\n\n  for(int i = 0; i < str.length(); i += 5){\n    string f; // = string(str[i] + str[i+1] + str[i+2] + str[i+3] + str[i+4]);\n    f = str[i]; f += str[i+1]; f+= str[i+2]; f += str[i+3]; f += str[i+4];\n    res += s[f];\n  }\n  return res;\n}\n\nint main(){\n  string str;\n  while(getline(cin, str)){\n    str = convert(str);\n    str = reconvert(str);\n    cout << str << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <string>\nusing namespace std;\n\nint main(){\n  map<char,string> data1;\n  map<string,char> data2;\n\n  data1[' ']=\"101\";\n  data1['\\'']=\"000000\";\n  data1[',']=\"000011\";\n  data1['-']=\"10010001\";\n  data1['.']=\"010001\";\n  data1['?']=\"000001\";\n  data1['A']=\"100101\";\n  data1['B']=\"10011010\";\n  data1['C']=\"0101\";\n  data1['D']=\"0001\";\n  data1['E']=\"110\";\n  data1['F']=\"01001\";\n  data1['G']=\"10011011\";\n  data1['H']=\"010000\";\n  data1['I']=\"0111\";\n  data1['J']=\"10011000\";\n  data1['K']=\"0110\";\n  data1['L']=\"00100\";\n  data1['M']=\"10011001\";\n  data1['N']=\"10011110\";\n  data1['O']=\"00101\";\n  data1['P']=\"111\";\n  data1['Q']=\"10011111\";\n  data1['R']=\"1000\";\n  data1['S']=\"00110\";\n  data1['T']=\"00111\";\n  data1['U']=\"10011100\";\n  data1['V']=\"10011101\";\n  data1['W']=\"000010\";\n  data1['X']=\"10010010\";\n  data1['Y']=\"10010011\";\n  data1['Z']=\"10010000\";\n\n  data2[\"00000\"]='A';\n  data2[\"00001\"]='B';\n  data2[\"00010\"]='C';\n  data2[\"00011\"]='D';\n  data2[\"00100\"]='E';\n  data2[\"00101\"]='F';\n  data2[\"00110\"]='G';\n  data2[\"00111\"]='H';\n  data2[\"01000\"]='I';\n  data2[\"01001\"]='J';\n  data2[\"01010\"]='K';\n  data2[\"01011\"]='L';\n  data2[\"01100\"]='M';\n  data2[\"01101\"]='N';\n  data2[\"01110\"]='O';\n  data2[\"01111\"]='P';\n  data2[\"10000\"]='Q';\n  data2[\"10001\"]='R';\n  data2[\"10010\"]='S';\n  data2[\"10011\"]='T';\n  data2[\"10100\"]='U';\n  data2[\"10101\"]='V';\n  data2[\"10110\"]='W';\n  data2[\"10111\"]='X';\n  data2[\"11000\"]='Y';\n  data2[\"11001\"]='Z';\n  data2[\"11010\"]=' ';\n  data2[\"11011\"]='.';\n  data2[\"11100\"]=',';\n  data2[\"11101\"]='-';\n  data2[\"11110\"]='\\'';\n  data2[\"11111\"]='?';\n\n  string  input=\"\";\n  string ans=\"\";\n  getline(cin,input);\n\n  for(int i=0;;i++){\n    if(input[i]=='\\0') break;\n    ans+=data1[input[i]];\n  }\n  ans+='!';\n  int i, count=0;\n\n  while(1){\n    string temp=\"\";\n    for(i=0;i<5;i++, count++){\n      if(ans[count]=='!') {\n\tif(i!=0){\n\t  for(int j=4;;j--){\n\t    temp+='0';\n\t    if(i==j) break;\n\t  }\n\t}\n\tbreak;\n      }\n      temp+=ans[count];\n    }\n    cout << data2[temp];\n    if(ans[count]=='!') break;\n  }\n  \n  cout << endl;\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\n#include<algorithm>\n\nusing namespace std;\n\nvoid init(map<char, string>* map1, map<string, char>* map2){\n  map1->insert(make_pair(' ', \"101\"));\n  map1->insert(make_pair('\\'',\"000000\"));\n  map1->insert(make_pair(',', \"000011\"));\n  map1->insert(make_pair('-', \"10010001\"));\n  map1->insert(make_pair('.', \"010001\"));\n  map1->insert(make_pair('?', \"000001\"));\n  map1->insert(make_pair('A', \"100101\"));\n  map1->insert(make_pair('B', \"10011010\"));\n  map1->insert(make_pair('C', \"0101\"));\n  map1->insert(make_pair('D', \"0001\"));\n  map1->insert(make_pair('E', \"110\"));\n  map1->insert(make_pair('F', \"01001\"));\n  map1->insert(make_pair('G', \"10011011\"));\n  map1->insert(make_pair('H', \"010000\"));\n  map1->insert(make_pair('I', \"0111\"));\n  map1->insert(make_pair('J', \"10011000\"));\n  map1->insert(make_pair('K', \"0110\"));\n  map1->insert(make_pair('L', \"00100\"));\n  map1->insert(make_pair('M', \"10011001\"));\n  map1->insert(make_pair('N', \"10011110\"));\n  map1->insert(make_pair('O', \"00101\"));\n  map1->insert(make_pair('P', \"111\"));\n  map1->insert(make_pair('Q', \"10011111\"));\n  map1->insert(make_pair('R', \"1000\"));\n  map1->insert(make_pair('S', \"00110\"));\n  map1->insert(make_pair('T', \"00111\"));\n  map1->insert(make_pair('U', \"10011100\"));\n  map1->insert(make_pair('V', \"10011101\"));\n  map1->insert(make_pair('W', \"000010\"));\n  map1->insert(make_pair('X', \"10010010\"));\n  map1->insert(make_pair('Y', \"10010011\"));\n  map1->insert(make_pair('Z', \"10010000\"));\n  map2->insert(make_pair(\"00000\", 'A'));\n  map2->insert(make_pair(\"00001\", 'B'));\n  map2->insert(make_pair(\"00010\", 'C'));\n  map2->insert(make_pair(\"00011\", 'D'));\n  map2->insert(make_pair(\"00100\", 'E'));\n  map2->insert(make_pair(\"00101\", 'F'));\n  map2->insert(make_pair(\"00110\", 'G'));\n  map2->insert(make_pair(\"00111\", 'H'));\n  map2->insert(make_pair(\"01000\", 'I'));\n  map2->insert(make_pair(\"01001\", 'J'));\n  map2->insert(make_pair(\"01010\", 'K'));\n  map2->insert(make_pair(\"01011\", 'L'));\n  map2->insert(make_pair(\"01100\", 'M'));\n  map2->insert(make_pair(\"01101\", 'N'));\n  map2->insert(make_pair(\"01110\", 'O'));\n  map2->insert(make_pair(\"01111\", 'P'));\n  map2->insert(make_pair(\"10000\", 'Q'));\n  map2->insert(make_pair(\"10001\", 'R'));\n  map2->insert(make_pair(\"10010\", 'S'));\n  map2->insert(make_pair(\"10011\", 'T'));\n  map2->insert(make_pair(\"10100\", 'U'));\n  map2->insert(make_pair(\"10101\", 'V'));\n  map2->insert(make_pair(\"10110\", 'W'));\n  map2->insert(make_pair(\"10111\", 'X'));\n  map2->insert(make_pair(\"11000\", 'Y'));\n  map2->insert(make_pair(\"11001\", 'Z'));\n  map2->insert(make_pair(\"11010\", ' '));\n  map2->insert(make_pair(\"11011\", '.'));\n  map2->insert(make_pair(\"11100\", ','));\n  map2->insert(make_pair(\"11101\", '-'));\n  map2->insert(make_pair(\"11110\", '\\''));\n  map2->insert(make_pair(\"11111\", '?'));\n}\n\nint main(){\n  map<char, string> map1;\n  map<string, char> map2;\n  init(&map1, &map2);\n  string s, t, u;\n  while(getline(cin, s)){\n    t.clear(); u.clear();\n    for(int i=0; i<s.size(); ++i) u += map1[s[i]];\n    if(u.size()%5 != 0) u += string(5-u.size()%5, '0');\n    for(int i=0; i<u.size(); i+=5) t.push_back(map2[u.substr(i,5)]);\n    cout << t << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <bitset>\nusing namespace std;\n\nstring encode(char c){\n\tstring a[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\tstatic const string str=\" \\',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tfor(int i=0;i<str.length();i++){\n\t\tif(c==str[i])return a[i];\n\t}\n}\n\nchar decode(string s){\n\tstring str2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\tstd::bitset<5> b(s);\n\treturn str2[b.to_ulong()];\n}\n\nint main(void){\n\n\tstring s;\n\tstring code=\"\";\n\n\twhile (std::getline(cin,s)) {\n\t\tstring code=\"\";\n\t\tfor(int i=0;i<s.length();i++) code+=encode(s[i]);\n\t\tstring retu=\"\";\n\t\tcode+=\"0000\";\n\t\tfor(int i=0;i+5<code.length();i+=5){\n\t\t\tstring dd=code.substr(i,5);\n\t\t\tretu+=decode(dd);\n\t\t}\n\t\tcout<<retu<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nchar c1[32] = {' ', '\\'',',','-','.','?','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\nstring s1[32] = {\"101\", \"000000\",\",000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\n\t\t\t\t \"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\t\t\t\t \"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n\t\t\t\t \"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\nstring s2[32] = {\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \n\t\t\t\t \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \n\t\t\t\t \"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \n\t\t\t\t \"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"};\nchar c2[32] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z', ' ', '.',',','-','\\'','?'};\n\nvoid solve()\n{\n\tstring s;\n\twhile(getline(cin, s))\n\t{\n\t\tstring binary;\n\t\tfor(int i = 0; i < s.size(); ++i)\n\t\t{\n\t\t\tfor(int j = 0; j < 32; ++j)\n\t\t\t{\n\t\t\t\tif(s[i] == c1[j])\n\t\t\t\t{\n\t\t\t\t\tbinary += s1[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twhile(binary.size() % 5)\n\t\t{\n\t\t\tbinary += '0';\n\t\t}\n\t\t\n\t\tstring ans;\n\t\tfor(int i = 0; i < binary.size(); i += 5)\n\t\t{\n\t\t\tstring temp;\n\t\t\tfor(int j = 0; j < 5; ++j)\n\t\t\t{\n\t\t\t\ttemp += binary[i + j];\n\t\t\t}\n\t\t\tfor(int j = 0; j < 32; ++j)\n\t\t\t{\n\t\t\t\tif(temp == s2[j])\n\t\t\t\t{\n\t\t\t\t\tans += c2[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcout << ans << endl;\n\t}\n}\n\nint main()\n{\n\tsolve();\n\treturn(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <deque>\nusing namespace std;\n\n#define _gp(l) const auto gcu{getchar##l}; const auto pcu{putchar##l}\n#ifdef __linux\n_gp(_unlocked);\n#else\n_gp();\n#endif\n#define _DEF(r, n, ...) inline r n(__VA_ARGS__) noexcept\n#define _T template <typename T>\n#define _HT template <typename H,typename... T>\n#define _OP(t) inline operator t()\nstruct _in {\n#ifdef _GLIBCXX_STRING\n\t_OP(string){string s;for(char c;c=gcu(),c!=' '&&c!='\\n';)s+=c;return s;}\n#endif\n\t_OP(char){char c=gcu();gcu();return c;}\n\t_OP(double){double d; scanf(\"%lf\",&d); gcu();return d;}\n\t_T _OP(T){T n{},m{1},c;if((c=gcu())=='-')m=-1,c=gcu();do{n=10*n+(c-'0'),c=gcu();}while(c>='0'&&c<='9');return m*n;}\n} in;\n#define _SCAN(...) _DEF(bool,scan,__VA_ARGS__)\n_T _SCAN(T &o) {int c{gcu()};return c==EOF?false:(ungetc(c,stdin),o=in,true);}\n_HT _SCAN(H &h,T&&... t){return scan(h)&&scan(t...);}\n#define _OUT(...) _DEF(void,out,__VA_ARGS__)\n#define _OUTL(...) _DEF(void,outl,__VA_ARGS__)\n_OUT(bool b){pcu('0'+b);}\n_OUT(const char *s){while(*s)pcu(*s++);}\n_OUT(char c){pcu(c);}\n#ifdef _GLIBCXX_STRING\n_OUT(string &s){for(char c:s)pcu(c);}\n#endif\n_T _OUT(T n){static char b[20];char *p=b;T m=n<0?pcu('-'),-1:1;\n\tif(!n)*p++='0';else while(n)*p++=(char)(n%10*m+'0'),n/=10;while(p!=b)pcu(*--p);}\n_OUTL(){out('\\n');}\n#ifdef _GLIBCXX_VECTOR\n_T _OUT(vector<T> &v){for(T &x:v)out(&x == &v[0]?\"\":\" \"),out(x);}\n#endif\n_HT _OUT(H &&h, T... t){out(h);out(t...);}\ntemplate <typename... T> _OUTL(T... t){out(t...);outl();}\nstruct range{\n\tint e,b=0,s=1; range(int _b,int _e,int _s):e(_e),b(_b),s(_s){} range(int _b,int _e): e(_e), b(_b){} range(int _e):e(_e){}\n\tstruct it { int v, s; it (int _v, int _s) : v(_v), s(_s) {} operator int()const{return v;} operator int&(){return v;} int operator*()const{return v;}\n\t\tit& operator++(){v+=s;return *this;} }; it begin() {return {b, s};} it end() {return {e, s};}};\nunordered_map<char, string> enc = {\n\t{' ', \"101\"}, {'\\'', \"000000\"}, {',', \"000011\"}, {'-', \"10010001\"}, {'.', \"010001\"},\n\t{'?', \"000001\"}, {'A', \"100101\"}, {'B', \"10011010\"}, {'C', \"0101\"}, {'D', \"0001\"},\n\t{'E', \"110\"}, {'F', \"01001\"}, {'G', \"10011011\"}, {'H', \"010000\"}, {'I', \"0111\"},\n\t{'J', \"10011000\"}, {'K', \"0110\"}, {'L', \"00100\"}, {'M', \"10011001\"}, {'N', \"10011110\"},\n\t{'O', \"00101\"}, {'P', \"111\"}, {'Q', \"10011111\"}, {'R', \"1000\"}, {'S', \"00110\"},\n\t{'T', \"00111\"}, {'U', \"10011100\"}, {'V', \"10011101\"}, {'W', \"000010\"}, {'X', \"10010010\"},\n\t{'Y', \"10010011\"}, {'Z', \"10010000\"} };\n\nint main() {\n\tstring s;\n\twhile(getline(cin, s)) {\n\t\tdeque<bool> b;\n\t\tfor (char c: s)\n\t\t\tfor (char d: enc[c])\n\t\t\t\tb.push_back(d - '0');\n\t\tif (b.size() % 5)\n\t\t\tfor (int i = 5 - b.size() % 5; i; i--)\n\t\t\t\tb.push_back(false);\n\t\tfor (int i: range(b.size() / 5)) {\n\t\t\tint t {};\n\t\t\tfor (int j: range(5))\n\t\t\t\tt = t << 1 | b[i * 5 + j];\n\t\t\tout((char) (t < 26 ? t + 'A' : \" .,-'?\"[t - 26]));\n\t\t}\n\t\toutl();\n\t}\n}\n"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n#include<sstream>\n\nstd::string to_bs(int i){\n\tstd::string s = \"\";\n\twhile(i > 0){\n\t\ts = static_cast<char>(i%2+'0') + s;\n\t\ti /= 2;\n\t}\n\twhile(s.length() < 5){\n\t\ts = '0' + s;\n\t}\n\treturn s;\n}\n\nint main(){\n\tstd::map<char, std::string> input;\n\tstd::map<std::string, char> output;\n\tinput[' '] = \"101\";\n\tinput['\\''] = \"000000\";\n\tinput[','] = \"000011\";\n\tinput['-'] = \"10010001\";\n\tinput['.'] = \"010001\";\n\tinput['?'] = \"000001\";\n\tinput['A'] = \"100101\";\n\tinput['B'] = \"10011010\";\n\tinput['C'] = \"0101\";\n\tinput['D'] = \"0001\";\n\tinput['E'] = \"110\";\n\tinput['F'] = \"01001\";\n\tinput['G'] = \"10011011\";\n\tinput['H'] = \"010000\";\n\tinput['I'] = \"0111\";\n\tinput['J'] = \"10011000\";\n\tinput['K'] = \"0110\";\n\tinput['L'] = \"00100\";\n\tinput['M'] = \"10011001\";\n\tinput['N'] = \"10011110\";\n\tinput['O'] = \"00101\";\n\tinput['P'] = \"111\";\n\tinput['Q'] = \"10011111\";\n\tinput['R'] = \"1000\";\n\tinput['S'] = \"00110\";\n\tinput['T'] = \"00111\";\n\tinput['U'] = \"10011100\";\n\tinput['V'] = \"10011101\";\n\tinput['W'] = \"000010\";\n\tinput['X'] = \"10010010\";\n\tinput['Y'] = \"10010011\";\n\tinput['Z'] = \"10010000\";\n\t\n\tfor(int i=0;i<26;i++){\n\t\toutput[to_bs(i)] = 'A' + i;\n\t}\n\toutput[\"11010\"] = ' ';\n\toutput[\"11011\"] = '.';\n\toutput[\"11100\"] = ',';\n\toutput[\"11101\"] = '-';\n\toutput[\"11110\"] = '\\'';\n\toutput[\"11111\"] = '?';\n\n\tstd::string s, bs = \"\";\n\tstd::getline(std::cin, s);\n\tfor(int i=0;i<s.length();i++){\n\t\tbs += input[s[i]];\n\t}\n\n\twhile(bs.length()%5){\n\t\tbs += '0';\n\t}\n\n\tstd::string res = \"\";\n\twhile(bs.length()){\n\t\tstd::string _s = bs.substr(0, 5);\n\t\tres += output[_s];\n\t\tbs = bs.substr(5);\n\t}\n\n\tstd::cout << res << std::endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cstring>\n#include<cstdio>\n#include<time.h>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define pb push_back\n#define mp make_pair\n#define all(in) in.begin(),in.end()\nconst double PI=acos(-1);\nconst double EPS=1e-10;\nconst int inf=1e8;\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\nint n;\nint main(){\n\tmap<char,string>in;\n\tin[' ']=\"101\";\n\tin['\\'']=\"000000\";\n\tin[',']=\"000011\";\n\tin['-']=\"10010001\";\n\tin['.']=\"010001\";\n\tin['?']=\"000001\";\n\tin['A']=\"100101\";\n\tin['B']=\"10011010\";\n\tin['C']=\"0101\";\n\tin['D']=\"0001\";\n\tin['E']=\"110\";\n\tin['F']=\"01001\";\n\tin['G']=\"10011011\";\n\tin['H']=\"010000\";\n\tin['I']=\"0111\";\n\tin['J']=\"10011000\";\n\tin['K']=\"0110\";\n\tin['L']=\"00100\";\n\tin['M']=\"10011001\";\n\tin['N']=\"10011110\";\n\tin['O']=\"00101\";\n\tin['P']=\"111\";\n\tin['Q']=\"10011111\";\n\tin['R']=\"1000\";\n\tin['S']=\"00110\";\n\tin['T']=\"00111\";\n\tin['U']=\"10011100\";\n\tin['V']=\"10011101\";\n\tin['W']=\"00010\";\n\tin['X']=\"10010010\";\n\tin['Y']=\"10010011\";\n\tin['Z']=\"10010000\";\n\tmap<string,char>out;\n\tout[\"00000\"]='A';\n\tout[\"00001\"]='B';\n\tout[\"00010\"]='C';\n\tout[\"00011\"]='D';\n\tout[\"00100\"]='E';\n\tout[\"00101\"]='F';\n\tout[\"00110\"]='G';\n\tout[\"00111\"]='H';\n\tout[\"01000\"]='I';\n\tout[\"01001\"]='J';\n\tout[\"01010\"]='K';\n\tout[\"01011\"]='L';\n\tout[\"01100\"]='M';\n\tout[\"01101\"]='N';\n\tout[\"01110\"]='O';\n\tout[\"01111\"]='P';\n\tout[\"10000\"]='Q';\n\tout[\"10001\"]='R';\n\tout[\"10010\"]='S';\n\tout[\"10011\"]='T';\n\tout[\"10100\"]='U';\n\tout[\"10101\"]='V';\n\tout[\"10110\"]='W';\n\tout[\"10111\"]='X';\n\tout[\"11000\"]='Y';\n\tout[\"11001\"]='Z';\n\tout[\"11010\"]=' ';\n\tout[\"11011\"]='.';\n\tout[\"11100\"]=',';\n\tout[\"11101\"]='-';\n\tout[\"11110\"]='\\'';\n\tout[\"11111\"]='?';\n\tstring s;\n\tcin>>s;\n\tstring a=\"\";\n\trep(i,s.size())a+=in[s[i]];\n\twhile(a.size()%5)a+='0';\n\trep(i,a.size()/5)cout<<out[a.substr(i*5,5)]<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <cctype>\n#include <sstream>\n#include <cmath>\n#include <climits>\n#include <set>\n#include <iostream>\n#include <map>\n#include <functional>\n#include <cstdlib>\n#include <numeric>\n#include <queue>\n#include <complex>\n#include <sstream>\n#include <stack>\n\nusing namespace std;\n\n#define reep(i,f,n) for(int i=f; i<int(n); ++i)\n#define rep(i,n) reep(i,0,n)\n\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\ntypedef complex<double> Point;\n\nint main()\n{\n\tmap<char, string> encode;\n\tencode[' '] = \"101\";\n\tencode['\\''] = \"000000\";\n\tencode[','] = \"000011\";\n\tencode['-'] = \"10010001\";\n\tencode['.'] = \"010001\";\n\tencode['?'] = \"000001\";\n\tencode['A'] = \"100101\";\n\tencode['B'] = \"10011010\";\n\tencode['C'] = \"0101\";\n\tencode['D'] = \"0001\";\n\tencode['E'] = \"110\";\n\tencode['F'] = \"01001\";\n\tencode['G'] = \"10011011\";\n\tencode['H'] = \"010000\";\n\tencode['I'] = \"0011\";\n\tencode['J'] = \"10011000\";\n\tencode['K'] = \"0110\";\n\tencode['L'] = \"00100\";\n\tencode['M'] = \"10011001\";\n\tencode['N'] = \"10011110\";\n\tencode['O'] = \"00101\";\n\tencode['P'] = \"111\";\n\tencode['Q'] = \"10011111\";\n\tencode['R'] = \"1000\";\n\tencode['S'] = \"00110\";\n\tencode['T'] = \"00111\";\n\tencode['U'] = \"10011100\";\n\tencode['V'] = \"10011101\";\n\tencode['W'] = \"000010\";\n\tencode['X'] = \"10010010\";\n\tencode['Y'] = \"10010011\";\n\tencode['Z'] = \"10010000\";\n\tconst char* decode = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n\tstring str;\n\twhile(getline(cin, str)){\n\t\tstring secret;\n\t\trep(i, str.size()){\n\t\t\tsecret += encode[str[i]];\n\t\t}\n\t\tif(secret.size()%5 != 0)\n\t\t\tsecret += string(5-secret.size()%5, '0');\n\n\t\tstring answer;\n\t\tfor(int i=0; i<int(secret.size()); i+=5){\n\t\t\tint n = 0;\n\t\t\trep(j, 5) n += (1 << (4-j)) * (secret[i+j] - '0');\n\t\t\tanswer += decode[n];\n\t\t}\n\t\tputs(answer.c_str());\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n\n  string wd = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string bd[32] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\" };\n  string od = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n  string input;\n\n  while( true ) {\n    if ( cin.eof() ) break;\n    getline( cin, input );\n\n    string k = \"\";\n\n    for( int l = 0; l < input.size(); l++ ) {\n      char in = input[l];\n      for ( int i = 0; i < 32; i++ ) {\n\tif ( in == wd[i] ) {\n\t  k += bd[i];\n\t  break;\n\t}\n      }\n    }\n    k += \"0000\";\n    for ( int i = 0; i < k.size(); i+=5 ) {\n      int x = 0;\n      for ( int j = 0; j < 5; j++ ) {\n\tx = x * 2 + k[i+j] - '0';\n      }\n      cout << od[x];\n    }\n    cout << endl;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nstring ctof(char x) {\n\tif (x == ' ')return \"101\";\n\tif (x == '\\'')return\"000000\";\n\tif (x == ',')return\"000011\";\n\tif (x == '-')return \"10010001\";\n\tif (x == '.')return\"010001\";\n\tif (x == '?')return\"000001\";\n\tif (x == 'A')return\"100101\";\n\tif (x == 'B')return\"10011010\";\n\tif (x == 'C')return\"0101\";\n\tif (x == 'D')return\"0001\";\n\tif (x == 'E')return \"110\";\n\tif (x == 'F')return \"01001\";\n\tif (x == 'G')return\"10011011\";\n\tif (x == 'H')return\"010000\";\n\tif (x == 'I')return\"0111\";\n\tif (x == 'J')return\"10011000\";\n\tif (x == 'K')return\"0110\";\n\tif (x == 'L')return\"00100\";\n\tif (x == 'M')return\"10011001\";\n\tif (x == 'N')return\"10011110\";\n\tif (x == 'O')return\"00101\";\n\tif (x == 'P')return\"111\";\n\tif (x == 'Q')return\"10011111\";\n\tif (x == 'R')return\"1000\";\n\tif (x == 'S')return\"00110\";\n\tif (x == 'T')return\"00111\";\n\tif (x == 'U')return\"10011100\";\n\tif (x == 'V')return\"10011101\";\n\tif (x == 'W')return\"000010\";\n\tif (x == 'X')return\"10010010\";\n\tif (x == 'Y')return\"10010011\";\n\telse return\"10010000\";\n}\n\nchar ftoc(string x) {\n\tif (x == \"00000\")return'A';\n\tif (x == \"00001\")return'B';\n\tif (x == \"00010\")return'C';\n\tif (x == \"00011\")return'D';\n\tif (x == \"00100\")return'E';\n\tif (x == \"00101\")return'F';\n\tif (x == \"00110\")return'G';\n\tif (x == \"00111\")return'H';\n\tif (x == \"01000\")return'I';\n\tif (x == \"01001\")return'J';\n\tif (x == \"01010\")return'K';\n\tif (x == \"01011\")return'L';\n\tif (x == \"01100\")return'M';\n\tif (x == \"01101\")return'N';\n\tif (x == \"01110\")return'O';\n\tif (x == \"01111\")return'P';\n\tif (x == \"10000\")return'Q';\n\tif (x == \"10001\")return'R';\n\tif (x == \"10010\")return'S';\n\tif (x == \"10011\")return'T';\n\tif (x == \"10100\")return'U';\n\tif (x == \"10101\")return'V';\n\tif (x == \"10110\")return'W';\n\tif (x == \"10111\")return'X';\n\tif (x == \"11000\")return'Y';\n\tif (x == \"11001\")return'Z';\n\tif (x == \"11010\")return' ';\n\tif (x == \"11011\")return'.';\n\tif (x == \"11100\")return',';\n\tif (x == \"11101\")return'-';\n\tif (x == \"11110\")return'\\'';\n\telse return'?';\n}\n\nint main() {\n\tstring s;\n\tgetline(cin, s);\n\tstring sa;\n\tsa = ctof(s[0]);\n\tfor (int i = 1;i < s.size();i++) {\n\t\tsa += ctof(s[i]);\n\t}\n\tint z = sa.size();\n\tif (z % 5 != 0) {\n\t\tfor (int i = z % 5;i <= 5;i++)sa.push_back('0');\n\t}\n\tstring sb;\n\tfor (int i = 0;i < z;i += 5) {\n\t\tstring c = sa.substr(i, 5);\n\t\tsb.push_back(ftoc(c));\n\t}\n\tcout << sb << endl;\n\tgetchar();\n\tgetchar();\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <ctime>\n#include <cassert>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\n#include <numeric>\n#include <list>\n#include <iomanip>\n\nusing namespace std;\n\nchar s[] = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nstring t[] = {\n\"101\",\n\"000000\",\n\"000011\",\n\"10010001\",\n\"010001\",\n\"000001\",\n\"100101\",\n\"10011010\",\n\"0101\",\n\"0001\",\n\"110\",\n\"01001\",\n\"10011011\",\n\"010000\",\n\"0111\",\n\"10011000\",\n\"0110\",\n\"00100\",\n\"10011001\",\n\"10011110\",\n\"00101\",\n\"111\",\n\"10011111\",\n\"1000\",\n\"00110\",\n\"00111\",\n\"10011100\",\n\"10011101\",\n\"000010\",\n\"10010010\",\n\"10010011\",\n\"10010000\"};\nchar r[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint main()\n{\n\tstring a;\n\twhile(getline(cin,a)){\n\t\tstring out;\n\t\tfor (int i = 0; i < (int)a.size(); i++)\n\t\t\tout.append(t[find(s,s+sizeof(s),a[i]) - s]);\n\t\twhile(out.size() % 5 != 0)\n\t\t\tout.push_back('0');\n\t\tfor (int i = 0; i < (int)out.size() / 5; i++){\n\t\t\tint x = 0;\n\t\t\tfor (int j = 0; j < 5; j++)\n\t\t\t\tx = (x << 1) + (out[i*5+j] == '1');\n\t\t\tputchar(r[x]);\n\t\t}\n\t\tputchar('\\n');\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <string>\nusing namespace std;\nstring chtostr(char ch)\n{\n\tif(ch==' ') return \"101\";\n\tif(ch=='\\'') return \"000000\";\n\tif(ch==',')\treturn \"000011\";\n\tif(ch=='-') return \"10010001\";\n\tif(ch=='.')\treturn \"010001\";\n\tif(ch=='?')\treturn \"000001\";\n\tif(ch=='A')\treturn \"100101\";\n\tif(ch=='B')\treturn \"10011010\";\n\tif(ch=='C')\treturn \"0101\";\n\tif(ch=='D')\treturn \"0001\";\n\tif(ch=='E')\treturn \"110\";\n\tif(ch=='F')\treturn \"01001\";\n\tif(ch=='G')\treturn \"10011011\";\n\tif(ch=='H') return \"010000\";\n\tif(ch=='I') return \"0111\";\n\tif(ch=='J')\treturn \"10011000\";\n\tif(ch=='K')\treturn \"0110\";\n\tif(ch=='L')\treturn \"00100\";\n\tif(ch=='M')\treturn \"10011001\";\n\tif(ch=='N')\treturn \"10011110\";\n\tif(ch=='O')\treturn \"00101\";\n\tif(ch=='P')\treturn \"111\";\n\tif(ch=='Q')\treturn \"10011111\";\n\tif(ch=='R')\treturn \"1000\";\n\tif(ch=='S')\treturn \"00110\";\n\tif(ch=='T') return \"00111\";\n\tif(ch=='U')\treturn \"10011100\";\n\tif(ch=='V')\treturn \"10011101\";\n\tif(ch=='W')\treturn \"000010\";\n\tif(ch=='X')\treturn \"10010010\";\n\tif(ch=='Y')\treturn \"10010011\";\n\treturn \"10010000\";\n}\nchar strtoch(string str)\n{\n\treverse(str.begin(),str.end());\n\tint tmp=0;\n\tfor(int i=0;i<str.size();i++) {char ch; ch=str[i]; tmp+=pow(2,i)*(ch-'0');}\n\tif(tmp<=26) return ('A'+tmp);\n\tif(tmp==27) return ' ';\n\tif(tmp==28) return '.';\n\tif(tmp==29) return ',';\n\tif(tmp==30) return '-';\n\tif(tmp==31) return '\\'';\n\treturn '?';\n}\nint main()\n{\n\tstring str;\n\twhile(getline(cin,str))\n\t{\n\t\tstring tmp=\"\";\n\t\tfor(int i=0;i<str.size();i++) {char ch; ch=str[i]; tmp+=chtostr(ch);}\n\t\tstring ans=\"\";\n\t\tfor(int i=0;i<tmp.size();i+=5) ans+=strtoch(tmp.substr(i,5));\n\t\tcout << ans << '\\n';\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n\tchar ch;\n\tstring input_str = \"\";\n\twhile(cin.get(ch)){\n\t\tswitch(ch){\n\t\tcase ' ' :input_str += \"101\"\t    ;break;\n\t\tcase '\\n':input_str += \"101\"\t\t;break;\n\t\tcase '\\'':input_str += \"000000\"\t\t;break;\n\t\tcase ',' :input_str += \"000011\"\t\t;break;\n\t\tcase '-' :input_str += \"10010001\"\t;break;\n\t\tcase '.' :input_str += \"010001\"\t\t;break;\n\t\tcase '\\?' :input_str += \"000001\"\t;break;\n\t\tcase 'A' :input_str += \"100101\"\t\t;break;\n\t\tcase 'B' :input_str += \"10011010\"\t;break;\n\t\tcase 'C' :input_str += \"0101\"\t\t;break;\n\t\tcase 'D' :input_str += \"0001\"\t\t;break;\n\t\tcase 'E' :input_str += \"110\"\t\t;break;\n\t\tcase 'F' :input_str += \"01001\"\t\t;break;\n\t\tcase 'G' :input_str += \"10011011\"\t;break;\n\t\tcase 'H' :input_str += \"010000\"\t\t;break;\n\t\tcase 'I' :input_str += \"0111\"\t\t;break;\n\t\tcase 'J' :input_str += \"10011000\"\t;break;\n\t\tcase 'K' :input_str += \"0110\"\t\t;break;\n\t\tcase 'L' :input_str += \"00100\"\t\t;break;\n\t\tcase 'M' :input_str += \"10011001\"\t;break;\n\t\tcase 'N' :input_str += \"10011110\"\t;break;\n\t\tcase 'O' :input_str += \"00101\"\t\t;break;\n\t\tcase 'P' :input_str += \"111\"\t\t;break;\n\t\tcase 'Q' :input_str += \"10011111\"\t;break;\n\t\tcase 'R' :input_str += \"1000\"\t\t;break;\n\t\tcase 'S' :input_str += \"00110\"\t\t;break;\n\t\tcase 'T' :input_str += \"00111\"\t\t;break;\n\t\tcase 'U' :input_str += \"10011100\"\t;break;\n\t\tcase 'V' :input_str += \"10011101\"\t;break;\n\t\tcase 'W' :input_str += \"000010\"\t\t;break;\n\t\tcase 'X' :input_str += \"10010010\"\t;break;\n\t\tcase 'Y' :input_str += \"10010011\"\t;break;\n\t\tcase 'Z' :input_str += \"10010000\"\t;break;\n\t\t}\n\t}\n\tint pad = 5 - input_str.size()%5;\n\tfor(int i=0; i<pad; i++)input_str += \"0\";\n\tfor(int i=0; i<input_str.size()/5; i++){\n\t\tstring output_str = input_str.substr(i*5, 5);\n\t\tif(output_str== \"00000\"){ cout << \"A\"; }\n\t\telse if( output_str==\"00001\") { cout << \"B\";}\t\n\t\telse if( output_str==\"00010\") { cout << \"C\";}\t\n\t\telse if( output_str==\"00011\") { cout << \"D\";}\t\n\t\telse if( output_str==\"00100\") { cout << \"E\";}\t\n\t\telse if( output_str==\"00101\") { cout << \"F\";}\t\n\t\telse if( output_str==\"00110\") { cout << \"G\";}\t\n\t\telse if( output_str==\"00111\") { cout << \"H\";}\t\n\t\telse if( output_str==\"01000\") { cout << \"I\";}\t\n\t\telse if( output_str==\"01001\") { cout << \"J\";}\t\n\t\telse if( output_str==\"01010\") { cout << \"K\";}\t\n\t\telse if( output_str==\"01011\") { cout << \"L\";}\t\n\t\telse if( output_str==\"01100\") { cout << \"M\";}\t\n\t\telse if( output_str==\"01101\") { cout << \"N\";}\t\n\t\telse if( output_str==\"01110\") { cout << \"O\";}\t\n\t\telse if( output_str==\"01111\") { cout << \"P\";}\t\n\t\telse if( output_str==\"10000\") { cout << \"Q\";}\t\n\t\telse if( output_str==\"10001\") { cout << \"R\";}\t\n\t\telse if( output_str==\"10010\") { cout << \"S\";}\t\n\t\telse if( output_str==\"10011\") { cout << \"T\";}\t\n\t\telse if( output_str==\"10100\") { cout << \"U\";}\t\n\t\telse if( output_str==\"10101\") { cout << \"V\";}\t\n\t\telse if( output_str==\"10110\") { cout << \"W\";}\t\n\t\telse if( output_str==\"10111\") { cout << \"X\";}\t\n\t\telse if( output_str==\"11000\") { cout << \"Y\";}\t\n\t\telse if( output_str==\"11001\") { cout << \"Z\";}\t\n\t\telse if( output_str==\"11010\") { cout << \" \";}\t\n\t\telse if( output_str==\"11011\") { cout << \".\";}\t\n\t\telse if( output_str==\"11100\") { cout << \",\";}\t\n\t\telse if( output_str==\"11101\") { cout << \"-\";}\t\n\t\telse if( output_str==\"11110\") { cout << \"'\";} \n\t\telse if( output_str==\"11111\") { cout << \"?\";}\n\t}\n\tcout << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\nusing namespace std;\nstring L=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",A=\" ',-.?\"+L,C=L+\" .,-'?\";\nstring B = \"101 000000 000011 10010001 010001 000001 100101 10011010 \"\n\t\"0101 0001 110 01001 10011011 010000 0111 10011000 \"\n\t\"0110 00100 10011001 10011110 00101 111 10011111 1000 \"\n\t\"00110 00111 10011100 10011101 000010 10010010 10010011 10010000\";\nint bin2dec(string s){\n\tint x=0,i;\n\tfor(i=0;i<s.size();i++){\n\t\tx*=2;\n\t\tif(s[i] =='1')x++;\n\t}\n\treturn x;\n}\nint main(){\n\tvector<string>x(32);\n\tstringstream ss(B);\n\tstring s,s1,s0;\n\tint i,n,p;\n\tfor(i=0;i<32;i++){\n\t\tss>>s;\n\t\tx[i]=s;\n\t}\n\twhile(getline(cin,s)){\n\t\ts1=\"\";\n\t\tfor(i=0;i<s.size();i++)s1+=x[A.find(s[i])];\n\t\tn=s1.size()%5;\n\t\tif(n!=0)s1+=string(5-n,'0');\n\t\ts=\"\";\n\t\tfor(i=0;i<s1.size();i+=5){\n\t\t\tp=bin2dec(s1.substr(i,5));\n\t\t\ts+=C[p];\n\t\t}\n\t\tcout<<s<< endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdio>\nusing namespace std;\nint main(){\n  string str,cnt;\n  string code[32]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n  string alph=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string code2[32]={\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"};\n  string alph2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  string ans=\"\",hm;\n  getline(cin,str);\n  for(int i=0,l=str.size();i<l;i++){\n    for(int j=0;;j++){\n      if(str[i]==alph[j]){\n\tcnt += code[j];\n\tbreak;\n      }\n    }\n  }\n  cnt += \"0000\";\n  for(int i=0,l=cnt.size();i+5<=l;i+=5){\n    hm=cnt.substr(i,5);\n    for(int j=0;;j++){\n      if(hm==code2[j]){\n\tans += alph2[j];\n\tbreak;\n      }\n    }\n  }\n  cout << ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n\tchar ch;\n\tstring input_str = \"\";\n\twhile(cin.get(ch)){\n\t\tswitch(ch){\n\t\tcase ' ' :input_str += \"101\"\t    ;break;\n//\t\tcase '\\n':input_str += \"101\"\t\t;break;\n\t\tcase '\\'':input_str += \"000000\"\t\t;break;\n\t\tcase ',' :input_str += \"000011\"\t\t;break;\n\t\tcase '-' :input_str += \"10010001\"\t;break;\n\t\tcase '.' :input_str += \"010001\"\t\t;break;\n\t\tcase '?' :input_str += \"000001\"\t    ;break;\n\t\tcase 'A' :input_str += \"100101\"\t\t;break;\n\t\tcase 'B' :input_str += \"10011010\"\t;break;\n\t\tcase 'C' :input_str += \"0101\"\t\t;break;\n\t\tcase 'D' :input_str += \"0001\"\t\t;break;\n\t\tcase 'E' :input_str += \"110\"\t\t;break;\n\t\tcase 'F' :input_str += \"01001\"\t\t;break;\n\t\tcase 'G' :input_str += \"10011011\"\t;break;\n\t\tcase 'H' :input_str += \"010000\"\t\t;break;\n\t\tcase 'I' :input_str += \"0111\"\t\t;break;\n\t\tcase 'J' :input_str += \"10011000\"\t;break;\n\t\tcase 'K' :input_str += \"0110\"\t\t;break;\n\t\tcase 'L' :input_str += \"00100\"\t\t;break;\n\t\tcase 'M' :input_str += \"10011001\"\t;break;\n\t\tcase 'N' :input_str += \"10011110\"\t;break;\n\t\tcase 'O' :input_str += \"00101\"\t\t;break;\n\t\tcase 'P' :input_str += \"111\"\t\t;break;\n\t\tcase 'Q' :input_str += \"10011111\"\t;break;\n\t\tcase 'R' :input_str += \"1000\"\t\t;break;\n\t\tcase 'S' :input_str += \"00110\"\t\t;break;\n\t\tcase 'T' :input_str += \"00111\"\t\t;break;\n\t\tcase 'U' :input_str += \"10011100\"\t;break;\n\t\tcase 'V' :input_str += \"10011101\"\t;break;\n\t\tcase 'W' :input_str += \"000010\"\t\t;break;\n\t\tcase 'X' :input_str += \"10010010\"\t;break;\n\t\tcase 'Y' :input_str += \"10010011\"\t;break;\n\t\tcase 'Z' :input_str += \"10010000\"\t;break;\n\t\t}\n\t}\n\tint pad = 5 - input_str.size()%5;\n\tfor(int i=0; i<pad; i++)input_str += '0';\n\tfor(int i=0; i<input_str.size(); i+=5){\n\t\tstring output_str = input_str.substr(i, 5);\n\t\tif(output_str== \"00000\"){ cout << \"A\"; }\n\t\telse if( output_str==\"00001\") { cout << \"B\";}\t\n\t\telse if( output_str==\"00010\") { cout << \"C\";}\t\n\t\telse if( output_str==\"00011\") { cout << \"D\";}\t\n\t\telse if( output_str==\"00100\") { cout << \"E\";}\t\n\t\telse if( output_str==\"00101\") { cout << \"F\";}\t\n\t\telse if( output_str==\"00110\") { cout << \"G\";}\t\n\t\telse if( output_str==\"00111\") { cout << \"H\";}\t\n\t\telse if( output_str==\"01000\") { cout << \"I\";}\t\n\t\telse if( output_str==\"01001\") { cout << \"J\";}\t\n\t\telse if( output_str==\"01010\") { cout << \"K\";}\t\n\t\telse if( output_str==\"01011\") { cout << \"L\";}\t\n\t\telse if( output_str==\"01100\") { cout << \"M\";}\t\n\t\telse if( output_str==\"01101\") { cout << \"N\";}\t\n\t\telse if( output_str==\"01110\") { cout << \"O\";}\t\n\t\telse if( output_str==\"01111\") { cout << \"P\";}\t\n\t\telse if( output_str==\"10000\") { cout << \"Q\";}\t\n\t\telse if( output_str==\"10001\") { cout << \"R\";}\t\n\t\telse if( output_str==\"10010\") { cout << \"S\";}\t\n\t\telse if( output_str==\"10011\") { cout << \"T\";}\t\n\t\telse if( output_str==\"10100\") { cout << \"U\";}\t\n\t\telse if( output_str==\"10101\") { cout << \"V\";}\t\n\t\telse if( output_str==\"10110\") { cout << \"W\";}\t\n\t\telse if( output_str==\"10111\") { cout << \"X\";}\t\n\t\telse if( output_str==\"11000\") { cout << \"Y\";}\t\n\t\telse if( output_str==\"11001\") { cout << \"Z\";}\t\n\t\telse if( output_str==\"11010\") { cout << \" \";}\t\n\t\telse if( output_str==\"11011\") { cout << \".\";}\t\n\t\telse if( output_str==\"11100\") { cout << \",\";}\t\n\t\telse if( output_str==\"11101\") { cout << \"-\";}\t\n\t\telse if( output_str==\"11110\") { cout << \"'\";} \n\t\telse if( output_str==\"11111\") { cout << \"?\";}\n\t}\n\tcout << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint main(void){\n  string str, ret;\n\n  while(getline(cin, str)){\n    ret = \"\";\n    for(int i=0;i<str.size();i++){\n      if(str[i] == ' '){\n\tret += \"101\";\n      }else if(str[i] == '\\''){ //'\n\tret += \"000000\";\n      }else if(str[i] == ','){\n\tret += \"000011\";\n      }else if(str[i] == '_'){\n\tret += \"10010001\";\n      }else if(str[i] == '.'){\n\tret += \"010001\";\n      }else if(str[i] == '?'){\n\tret += \"000001\";\n      }else if(str[i] == 'A'){\n\tret += \"100101\";\n      }else if(str[i] == 'B'){\n\tret += \"10011010\";\n      }else if(str[i] == 'C'){\n\tret += \"0101\";\n      }else if(str[i] == 'D'){\n\tret += \"0001\";\n      }else if(str[i] == 'E'){\n\tret += \"110\";\n      }else if(str[i] == 'F'){\n\tret += \"01001\";\n      }else if(str[i] == 'G'){\n\tret += \"10011011\";\n      }else if(str[i] == 'H'){\n\tret += \"010000\";\n      }else if(str[i] == 'I'){\n\tret += \"0111\";\n      }else if(str[i] == 'J'){\n\tret += \"10011000\";\n      }else if(str[i] == 'K'){\n\tret += \"0110\";\n      }else if(str[i] == 'L'){\n\tret += \"00100\";\n      }else if(str[i] == 'M'){\n\tret += \"10011001\";\n      }else if(str[i] == 'N'){\n\tret += \"10011110\";\n      }else if(str[i] == 'O'){\n\tret += \"00101\";\n      }else if(str[i] == 'P'){\n\tret += \"111\";\n      }else if(str[i] == 'Q'){\n\tret += \"10011111\";\n      }else if(str[i] == 'R'){\n\tret += \"1000\";\n      }else if(str[i] == 'S'){\n\tret += \"00110\";\n      }else if(str[i] == 'T'){\n\tret += \"00111\";\n      }else if(str[i] == 'U'){\n\tret += \"10011100\";\n      }else if(str[i] == 'V'){\n\tret += \"10011101\";\n      }else if(str[i] == 'W'){\n\tret += \"000010\";\n      }else if(str[i] == 'X'){\n\tret += \"10010010\";\n      }else if(str[i] == 'Y'){\n\tret += \"10010011\";\n      }else if(str[i] == 'Z'){\n\tret += \"10010000\";\n      }\n    }\n\n    string patt=\"\";\n    for(int i=0;i<ret.size() || !patt.empty();i++){\n      if(i<ret.size()){\n\tpatt += ret[i];\n      }else{\n\tpatt += '0';\n      }\n      if(i%5 == 4){\n\tif(patt == \"00000\"){\n\t  cout << \"A\";\n\t}else if(patt == \"00001\"){\n\t  cout << \"B\";\n\t}else if(patt == \"00010\"){\n\t  cout << \"C\";\n\t}else if(patt == \"00011\"){\n\t  cout << \"D\";\n\t}else if(patt == \"00100\"){\n\t  cout << \"E\";\n\t}else if(patt == \"00101\"){\n\t  cout << \"F\";\n\t}else if(patt == \"00110\"){\n\t  cout << \"G\";\n\t}else if(patt == \"00111\"){\n\t  cout << \"H\";\n\t}else if(patt == \"01000\"){\n\t  cout << \"I\";\n\t}else if(patt == \"01001\"){\n\t  cout << \"J\";\n\t}else if(patt == \"01010\"){\n\t  cout << \"K\";\n\t}else if(patt == \"01011\"){\n\t  cout << \"L\";\n\t}else if(patt == \"01100\"){\n\t  cout << \"M\";\n\t}else if(patt == \"01101\"){\n\t  cout << \"N\";\n\t}else if(patt == \"01110\"){\n\t  cout << \"O\";\n\t}else if(patt == \"01111\"){\n\t  cout << \"P\";\n\t}else if(patt == \"10000\"){\n\t  cout << \"Q\";\n\t}else if(patt == \"10001\"){\n\t  cout << \"R\";\n\t}else if(patt == \"10010\"){\n\t  cout << \"S\";\n\t}else if(patt == \"10011\"){\n\t  cout << \"T\";\n\t}else if(patt == \"10100\"){\n\t  cout << \"U\";\n\t}else if(patt == \"10101\"){\n\t  cout << \"V\";\n\t}else if(patt == \"10110\"){\n\t  cout << \"W\";\n\t}else if(patt == \"10111\"){\n\t  cout << \"X\";\n\t}else if(patt == \"11000\"){\n\t  cout << \"Y\";\n\t}else if(patt == \"11001\"){\n\t  cout << \"Z\";\n\t}else if(patt == \"11010\"){\n\t  cout << \" \";\n\t}else if(patt == \"11011\"){\n\t  cout << \".\";\n\t}else if(patt == \"11100\"){\n\t  cout << \",\";\n\t}else if(patt == \"11101\"){\n\t  cout << \"_\";\n\t}else if(patt == \"11110\"){\n\t  cout << \"'\";\n\t}else if(patt == \"11111\"){\n\t  cout << \"?\";\n\t}\n\tpatt.clear();\n      }\n    }\n    cout << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n\nusing namespace std;\n\ntypedef long long ll;\n\nint main(){\n\tstring str;\n\n\tmap<string,string> encode;\n\tmap<string,string> decode;\n\n\tencode[\" \"] = \"101\";\n\tencode[\"'\"] = \"000000\";\n\tencode[\",\"] = \"000011\";\n\tencode[\"-\"] = \"10010001\";\n\tencode[\".\"] = \"010001\";\n\n\tencode[\"?\"] = \"000001\";\n\tencode[\"A\"] = \"100101\";\n\tencode[\"B\"] = \"10011010\";\n\tencode[\"C\"] = \"0101\";\n\tencode[\"D\"] = \"0001\";\n\tencode[\"E\"] = \"110\";\n\tencode[\"F\"] = \"01001\";\n\tencode[\"G\"] = \"10011011\";\n\n\tencode[\"H\"] = \"010000\";\n\tencode[\"I\"] = \"0111\";\n\tencode[\"J\"] = \"10011000\";\n\tencode[\"K\"] = \"0110\";\n\tencode[\"L\"] = \"00100\";\n\tencode[\"M\"] = \"10011001\";\n\tencode[\"N\"] = \"10011110\";\n\n\tencode[\"O\"] = \"00101\";\n\tencode[\"P\"] = \"111\";\n\tencode[\"Q\"] = \"10011111\";\n\tencode[\"R\"] = \"1000\";\n\tencode[\"S\"] = \"00110\";\n\tencode[\"T\"] = \"00111\";\n\tencode[\"U\"] = \"10011100\";\n\n\tencode[\"V\"] = \"10011101\";\n\tencode[\"W\"] = \"000010\";\n\tencode[\"X\"] = \"10010010\";\n\tencode[\"Y\"] = \"10010011\";\n\tencode[\"Z\"] = \"10010000\";\n\n\tdecode[\"00000\"] = \"A\";\n\tdecode[\"00001\"] = \"B\";\n\tdecode[\"00010\"] = \"C\";\n\tdecode[\"00011\"] = \"D\";\n\tdecode[\"00100\"] = \"E\";\n\tdecode[\"00101\"] = \"F\";\n\tdecode[\"00110\"] = \"G\";\n\n\tdecode[\"00111\"] = \"H\";\n\tdecode[\"01000\"] = \"I\";\n\tdecode[\"01001\"] = \"J\";\n\tdecode[\"01010\"] = \"K\";\n\tdecode[\"01011\"] = \"L\";\n\tdecode[\"01100\"] = \"M\";\n\tdecode[\"01101\"] = \"N\";\n\n\tdecode[\"01110\"] = \"O\";\n\tdecode[\"01111\"] = \"P\";\n\tdecode[\"10000\"] = \"Q\";\n\tdecode[\"10001\"] = \"R\";\n\tdecode[\"10010\"] = \"S\";\n\tdecode[\"10011\"] = \"T\";\n\tdecode[\"10100\"] = \"U\";\n\n\tdecode[\"10101\"] = \"V\";\n\tdecode[\"10110\"] = \"W\";\n\tdecode[\"10111\"] = \"X\";\n\tdecode[\"11000\"] = \"Y\";\n\tdecode[\"11001\"] = \"Z\";\n\n\tdecode[\"11010\"] = \" \";\n\tdecode[\"11011\"] = \".\";\n\tdecode[\"11100\"] = \",\";\n\tdecode[\"11101\"] = \"-\";\n\tdecode[\"11110\"] = \"'\";\n\tdecode[\"11111\"] = \"?\";\n\n\twhile(getline(cin,str)){\n\n\t\tstring enc=\"\";\n\t\tfor(int i=0;i<str.size();i++){\n\t\t\tenc+=encode[str.substr(i,1)];\n\t\t}\n\n\t\tenc+=\"0000\";\n\n\t\tstring dec=\"\";\n\t\tfor(int i=0;i+5<=enc.size();i+=5){\n\t\t\tdec+=decode[enc.substr(i,5)];\n\t\t}\n\n\t\tcout << dec << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<unordered_map>\n#include<string>\nusing namespace std;\n\nint main(void){\n\nstring str;\nunordered_map<char,string>hs;\nunordered_map<string,string>hs2;\n\ths[' ']=\"101\";\n\ths['\\'']=\"000000\";\n\ths[',']=\"000011\";\n\ths['-']=\"10010001\";\n\ths['.']=\"010001\";\n\ths['?']=\"000001\";\n\ths['A']=\"100101\";\n\ths['B']=\"10011010\";\n\ths['C']=\"0101\";\n\ths['D']=\"0001\";\n\ths['E']=\"110\";\n\ths['F']=\"01001\";\n\ths['G']=\"10011011\";\n\ths['H']=\"010000\";\n\ths['I']=\"0111\";\n\ths['J']=\"10011000\";\n\ths['K']=\"0110\";\n\ths['L']=\"00100\";\n\ths['M']=\"10011001\";\n\ths['N']=\"10011110\";\n\ths['O']=\"00101\";\n\ths['P']=\"111\";\n\ths['Q']=\"10011111\";\n\ths['R']=\"1000\";\n\ths['S']=\"00110\";\n\ths['T']=\"00111\";\n\ths['U']=\"10011100\";\n\ths['V']=\"10011101\";\n\ths['W']=\"000010\";\n\ths['X']=\"10010010\";\n\ths['Y']=\"10010011\";\n\ths['Z']=\"10010000\";\n\ths2[\"00000\"]=\"A\";\n\ths2[\"00001\"]=\"B\";\n\ths2[\"00010\"]=\"C\";\n\ths2[\"00011\"]=\"D\";\n\ths2[\"00100\"]=\"E\";\n\ths2[\"00101\"]=\"F\";\n\ths2[\"00110\"]=\"G\";\n\ths2[\"00111\"]=\"H\";\n\ths2[\"01000\"]=\"I\";\n\ths2[\"01001\"]=\"J\";\n\ths2[\"01010\"]=\"K\";\n\ths2[\"01011\"]=\"L\";\n\ths2[\"01100\"]=\"M\";\n\ths2[\"01101\"]=\"N\";\n\ths2[\"01110\"]=\"O\";\n\ths2[\"01111\"]=\"P\";\n\ths2[\"10000\"]=\"Q\";\n\ths2[\"10001\"]=\"R\";\n\ths2[\"10010\"]=\"S\";\n\ths2[\"10011\"]=\"T\";\n\ths2[\"10100\"]=\"U\";\n\ths2[\"10101\"]=\"V\";\n\ths2[\"10110\"]=\"W\";\n\ths2[\"10111\"]=\"X\";\n\ths2[\"11000\"]=\"Y\";\n\ths2[\"11001\"]=\"Z\";\n\ths2[\"11010\"]=\" \";\n\ths2[\"11011\"]=\".\";\n\ths2[\"11100\"]=\",\";\n\ths2[\"11101\"]=\"-\";\n\ths2[\"11110\"]=\"\\'\";\n\ths2[\"11111\"]=\"?\";\n\n\twhile(getline(cin,str)){\n\t\tif(str.length()<=0)break;\n\t\tstring enc,enc2;\n\t\tfor(int i=0;i<str.length();i++){\n\t\tenc+=hs[str[i]];\n\t\t}\n\t\tint enclen=enc.length()%5;\n\t\tif(enclen>0){while(enclen<5){enc+=\"0\";enclen++;}}\n\t\tfor(int j=0;j<enc.length();j+=5)enc2+=hs2[enc.substr(j,5)];\n\tcout<<enc2<<endl;\n\t}\n\nreturn 0;\n}\n\n"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define range(i,a,b) for(int (i)=(a);(i)<(b);(i)++)\n#define rep(i,n) range(i,0,n)\nusing namespace std;\n\nmap<char,string> e;\nmap<string,char> d;\n\nvoid init(){\n\te[' ']=\"101\";\n\te['\\'']=\"000000\";\n\te[',']=\"000011\";\n\te['-']=\"10010001\";\n\te['.']=\"010001\";\n\te['?']=\"000001\";\n\te['A']=\"100101\";\n\te['B']=\"10011010\";\n\te['C']=\"0101\";\n\te['D']=\"0001\";\n\te['E']=\"110\";\n\te['F']=\"01001\";\n\te['G']=\"10011011\";\n\te['H']=\"010000\";\n\te['I']=\"0111\";\n\te['J']=\"10011000\";\n\te['K']=\"0110\";\n\te['L']=\"00100\";\n\te['M']=\"10011001\";\n\te['N']=\"10011110\";\n\te['O']=\"00101\";\n\te['P']=\"111\";\n\te['Q']=\"10011111\";\n\te['R']=\"1000\";\n\te['S']=\"00110\";\n\te['T']=\"00111\";\n\te['U']=\"10011100\";\n\te['V']=\"10011101\";\n\te['W']=\"000010\";\n\te['X']=\"10010010\";\n\te['Y']=\"10010011\";\n\te['Z']=\"10010000\";\n\td[\"00000\"]='A';\n\td[\"00001\"]='B';\n\td[\"00010\"]='C';\n\td[\"00011\"]='D';\n\td[\"00100\"]='E';\n\td[\"00101\"]='F';\n\td[\"00110\"]='G';\n\td[\"00111\"]='H';\n\td[\"01000\"]='I';\n\td[\"01001\"]='J';\n\td[\"01010\"]='K';\n\td[\"01011\"]='L';\n\td[\"01100\"]='M';\n\td[\"01101\"]='N';\n\td[\"01110\"]='O';\n\td[\"01111\"]='P';\n\td[\"10000\"]='Q';\n\td[\"10001\"]='R';\n\td[\"10010\"]='S';\n\td[\"10011\"]='T';\n\td[\"10100\"]='U';\n\td[\"10101\"]='V';\n\td[\"10110\"]='W';\n\td[\"10111\"]='X';\n\td[\"11000\"]='Y';\n\td[\"11001\"]='Z';\n\td[\"11010\"]=' ';\n\td[\"11011\"]='.';\n\td[\"11100\"]=',';\n\td[\"11101\"]='-';\n\td[\"11110\"]='\\'';\n\td[\"11111\"]='?';\n}\n\nint main(void){\n\tstring s;\n\tinit();\n\twhile(1){\n\t\tgetline(cin,s);\n\t\tif(cin.eof())break;\n\t\tstring encode=\"\";\n\t\trep(i,s.size()) encode+=e[s[i]];\n\t\tstring decode=\"\";\n\t\tfor(int i=0;i<encode.size();i+=5){\n\t\t\tstring tmp=encode.substr(i,5);\n\t\t\twhile(tmp.size()<5) tmp+=\"0\";\n\t\t\tdecode+=d[tmp];\n\t\t}\n\t\t//cout << encode << endl;\n\t\tcout << decode << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "//The Code A Doctor Loved\n#include<bits/stdc++.h>\nusing namespace std;\n\nstring p(string s, string t){\n  for(int i=0; i<t.length(); i++){\n    if(s.length()%6==5)s+=' ';\n    s+=t[i];\n  }\n  return s;\n}\n\nstring into(string s){\n  string t=\"\";\n  for(int i=0; i<s.length(); i++){\n    if(s[i]==' ')t=p(t, \"101\");\n    if(s[i]=='\\'')t=p(t, \"000000\");\n    if(s[i]==',')t=p(t,\"000011\");\n    if(s[i]=='-')t=p(t,\"10010001\");\n    if(s[i]=='.')t=p(t,\"010001\");\n    if(s[i]=='?')t=p(t,\"000001\");\n    if(s[i]=='A')t=p(t,\"100101\");\n    if(s[i]=='B')t=p(t,\"10011010\");\n    if(s[i]=='C')t=p(t,\"0101\");\n    if(s[i]=='D')t=p(t,\"0001\");\n    if(s[i]=='E')t=p(t,\"110\");\n    if(s[i]=='F')t=p(t,\"01001\");\n    if(s[i]=='G')t=p(t,\"10011011\");\n    if(s[i]=='H')t=p(t,\"010000\");\n    if(s[i]=='I')t=p(t,\"0111\");\n    if(s[i]=='J')t=p(t,\"10011000\");\n    if(s[i]=='K')t=p(t,\"0110\");\n    if(s[i]=='L')t=p(t,\"00100\");\n    if(s[i]=='M')t=p(t,\"10011001\");\n    if(s[i]=='N')t=p(t,\"10011110\");\n    if(s[i]=='O')t=p(t,\"00101\");\n    if(s[i]=='P')t=p(t,\"111\");\n    if(s[i]=='Q')t=p(t,\"10011111\");\n    if(s[i]=='R')t=p(t,\"1000\");\n    if(s[i]=='S')t=p(t,\"00110\");\n    if(s[i]=='T')t=p(t,\"00111\");\n    if(s[i]=='U')t=p(t,\"10011100\");\n    if(s[i]=='V')t=p(t,\"10011101\");\n    if(s[i]=='W')t=p(t,\"000010\");\n    if(s[i]=='X')t=p(t,\"10010010\");\n    if(s[i]=='Y')t=p(t,\"10010011\");\n    if(s[i]=='Z')t=p(t,\"10010000\");\n  }\n  while(t.length()%6!=5)t+='0';\n  stringstream ss(t);\n  string ret=\"\", tmp;\n  while(getline(ss, tmp, ' ')){\n    if(tmp==\"00000\")ret+='A';\n    if(tmp==\"00001\")ret+='B';\n    if(tmp==\"00010\")ret+='C';\n    if(tmp==\"00011\")ret+='D';\n    if(tmp==\"00100\")ret+='E';\n    if(tmp==\"00101\")ret+='F';\n    if(tmp==\"00110\")ret+='G';\n    if(tmp==\"00111\")ret+='H';\n    if(tmp==\"01000\")ret+='I';\n    if(tmp==\"01001\")ret+='J';\n    if(tmp==\"01010\")ret+='K';\n    if(tmp==\"01011\")ret+='L';\n    if(tmp==\"01100\")ret+='M';\n    if(tmp==\"01101\")ret+='N';\n    if(tmp==\"01110\")ret+='O';\n    if(tmp==\"01111\")ret+='P';\n    if(tmp==\"10000\")ret+='Q';\n    if(tmp==\"10001\")ret+='R';\n    if(tmp==\"10010\")ret+='S';\n    if(tmp==\"10011\")ret+='T';\n    if(tmp==\"10100\")ret+='U';\n    if(tmp==\"10101\")ret+='V';\n    if(tmp==\"10110\")ret+='W';\n    if(tmp==\"10111\")ret+='X';\n    if(tmp==\"11000\")ret+='Y';\n    if(tmp==\"11001\")ret+='Z';\n    if(tmp==\"11010\")ret+=' ';\n    if(tmp==\"11011\")ret+='.';\n    if(tmp==\"11100\")ret+=',';\n    if(tmp==\"11101\")ret+='-';\n    if(tmp==\"11110\")ret+='\\'';\n    if(tmp==\"11111\")ret+='?';\n  }\n  return ret;\n}\n\nint main(){\n  string s;\n  while(getline(cin, s)){\n    cout<<into(s)<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n\tstring input_str = \"\", ts;\n\twhile(getline(cin, ts)){\n\t\tfor(int i=0; i<ts.size(); i++){\n\t\t\t\tswitch(ts[i]){\n\t\t\t\tcase ' ' :input_str += \"101\"\t    ;break;\n\t\t\t\tcase '\\'':input_str += \"000000\"\t\t;break;\n\t\t\t\tcase ',' :input_str += \"000011\"\t\t;break;\n\t\t\t\tcase '-' :input_str += \"10010001\"\t;break;\n\t\t\t\tcase '.' :input_str += \"010001\"\t\t;break;\n\t\t\t\tcase '?' :input_str += \"000001\"\t    ;break;\n\t\t\t\tcase 'A' :input_str += \"100101\"\t\t;break;\n\t\t\t\tcase 'B' :input_str += \"10011010\"\t;break;\n\t\t\t\tcase 'C' :input_str += \"0101\"\t\t;break;\n\t\t\t\tcase 'D' :input_str += \"0001\"\t\t;break;\n\t\t\t\tcase 'E' :input_str += \"110\"\t\t;break;\n\t\t\t\tcase 'F' :input_str += \"01001\"\t\t;break;\n\t\t\t\tcase 'G' :input_str += \"10011011\"\t;break;\n\t\t\t\tcase 'H' :input_str += \"010000\"\t\t;break;\n\t\t\t\tcase 'I' :input_str += \"0111\"\t\t;break;\n\t\t\t\tcase 'J' :input_str += \"10011000\"\t;break;\n\t\t\t\tcase 'K' :input_str += \"0110\"\t\t;break;\n\t\t\t\tcase 'L' :input_str += \"00100\"\t\t;break;\n\t\t\t\tcase 'M' :input_str += \"10011001\"\t;break;\n\t\t\t\tcase 'N' :input_str += \"10011110\"\t;break;\n\t\t\t\tcase 'O' :input_str += \"00101\"\t\t;break;\n\t\t\t\tcase 'P' :input_str += \"111\"\t\t;break;\n\t\t\t\tcase 'Q' :input_str += \"10011111\"\t;break;\n\t\t\t\tcase 'R' :input_str += \"1000\"\t\t;break;\n\t\t\t\tcase 'S' :input_str += \"00110\"\t\t;break;\n\t\t\t\tcase 'T' :input_str += \"00111\"\t\t;break;\n\t\t\t\tcase 'U' :input_str += \"10011100\"\t;break;\n\t\t\t\tcase 'V' :input_str += \"10011101\"\t;break;\n\t\t\t\tcase 'W' :input_str += \"000010\"\t\t;break;\n\t\t\t\tcase 'X' :input_str += \"10010010\"\t;break;\n\t\t\t\tcase 'Y' :input_str += \"10010011\"\t;break;\n\t\t\t\tcase 'Z' :input_str += \"10010000\"\t;break;\n\t\t\t\t}\n\t\t\t}\n\t}\n\tint pad = 5 - input_str.size()%5;\n\tfor(int i=0; i<pad; i++)input_str += '0';\n\tstring out = \"\";\n\tfor(int i=0; i<input_str.size(); i+=5){\n\t\tstring output_str = input_str.substr(i, 5);\n\t\tif(output_str== \"00000\"){ out += 'A'; }\n\t\telse if( output_str==\"00001\") { out += 'B';}\t\n\t\telse if( output_str==\"00010\") { out += 'C';}\t\n\t\telse if( output_str==\"00011\") { out += 'D';}\t\n\t\telse if( output_str==\"00100\") { out += 'E';}\t\n\t\telse if( output_str==\"00101\") { out += 'F';}\t\n\t\telse if( output_str==\"00110\") { out += 'G';}\t\n\t\telse if( output_str==\"00111\") { out += 'H';}\t\n\t\telse if( output_str==\"01000\") { out += 'I';}\t\n\t\telse if( output_str==\"01001\") { out += 'J';}\t\n\t\telse if( output_str==\"01010\") { out += 'K';}\t\n\t\telse if( output_str==\"01011\") { out += 'L';}\t\n\t\telse if( output_str==\"01100\") { out += 'M';}\t\n\t\telse if( output_str==\"01101\") { out += 'N';}\t\n\t\telse if( output_str==\"01110\") { out += 'O';}\t\n\t\telse if( output_str==\"01111\") { out += 'P';}\t\n\t\telse if( output_str==\"10000\") { out += 'Q';}\t\n\t\telse if( output_str==\"10001\") { out += 'R';}\t\n\t\telse if( output_str==\"10010\") { out += 'S';}\t\n\t\telse if( output_str==\"10011\") { out += 'T';}\t\n\t\telse if( output_str==\"10100\") { out += 'U';}\t\n\t\telse if( output_str==\"10101\") { out += 'V';}\t\n\t\telse if( output_str==\"10110\") { out += 'W';}\t\n\t\telse if( output_str==\"10111\") { out += 'X';}\t\n\t\telse if( output_str==\"11000\") { out += 'Y';}\t\n\t\telse if( output_str==\"11001\") { out += 'Z';}\t\n\t\telse if( output_str==\"11010\") { out += ' ';}\t\n\t\telse if( output_str==\"11011\") { out += '.';}\t\n\t\telse if( output_str==\"11100\") { out += ',';}\t\n\t\telse if( output_str==\"11101\") { out += '-';}\t\n\t\telse if( output_str==\"11110\") { out += '\\'';} \n\t\telse if( output_str==\"11111\") { out += '?';}\n\t}\n\tcout << out << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<deque>\n#include<algorithm>\n#include<functional>\n#include<string>\n#include<unordered_map>\nusing namespace std;\n\nunordered_map<char, string>U;\nstring b[26] = {\n\t\"100101\",//A\n\t\"10011010\",//B\n\t\"0101\",//C\n\t\"0001\",//D\n\t\"110\",//E\n\t\"01001\",//F\n\t\"10011011\",//G\n\t\"010000\",//H\n\t\"0111\",//I\n\t\"10011000\",//J\n\t\"0110\",//K\n\t\"00100\",//L\n\t\"10011001\",//M\n\t\"10011110\",//N\n\t\"00101\",//O\n\t\"111\",//P\n\t\"10011111\",//Q\n\t\"1000\",//R\n\t\"00110\",//S\n\t\"00111\",//T\n\t\"10011100\",//U\n\t\"10011101\",//V\n\t\"000010\",//W\n\t\"10010010\",//X\n\t\"10010011\",//Y\n\t\"10010000\",//Z\n};\nstring k = \" .,-'?\";\nsigned main() {\n\tU[' '] = \"101\";\n\tU['\\''] = \"000000\";\n\tU[','] = \"000011\";\n\tU['-'] = \"10010001\";\n\tU['.'] = \"010001\";\n\tU['?'] = \"000001\";\n\tstring a;\n\twhile (getline(cin,a)) {\n\t\tstring d;\n\t\tfor (char c : a) {\n\t\t\tif (c >= 'A'&&c <= 'Z')d += b[c - 'A'];\n\t\t\telse d += U[c];\n\t\t}\n\t\twhile (d.length() % 5)d += \"0\";\n\t\tstring ans;\n\t\tfor (int i = 0; i < d.length() / 5; i++) {\n\t\t\tstring e = d.substr(i * 5, 5);\n\t\t\treverse(e.begin(), e.end());\n\t\t\tint S = 0;\n\t\t\tfor (int j = 0; j < 5; j++) {\n\t\t\t\tif (e[j] == '1')S += 1 << j;\n\t\t\t}\n\t\t\tif (S <= 25)ans += S + 'A';\n\t\t\telse ans += k[S - 26];\n\t\t}\n\t\tcout << ans << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<cstdlib>\nusing namespace std;\nint main(){\nlong i,j,k,x,c[10];\nstring s,t,u[59]={\n\"101\",\"\",\"\",\"\",\"\",\"\",\"\",\"010001\",\"\",\"\",\n\"\",\"\",\"000011\",\"10010001\",\"000000\",\"\",\"\",\"\",\"\",\"\",\n\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n\"\",\"000001\",\"\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\n\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\n\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\n},v=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nwhile(getline(cin,s)){\nfor(t=\"\",i=0;i<s.size();i++)t+=u[s[i]-32];\nx=t.size();\nk=((x-1)/5+1)*5;\nfor(i=0;i<k-x;i++)t+='0';\nfor(x=0,i=0;i<k;i++){\nif(i>0&&i%5==0){cout<<v[x];x=0;}\nx<<=1;x+=t[i]-48;\n}\ncout<<v[x]<<endl;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid hantei(char *str);\n\nchar DataBase[][3][80] =\n\t{\n\t/* [文字] ,[符号＿変換前] ,[符号＿変換後] */\n\t{ \" \", \"101\", \"11010\" },{ \"\\'\", \"000000\", \"11110\" },{ \",\", \"000011\", \"11100\" },{ \"-\", \"10010001\", \"11101\" },\n\t{ \".\", \"010001\", \"11011\" },{ \"?\", \"000001\", \"11111\" },{ \"A\", \"100101\", \"00000\" },{ \"B\", \"10011010\", \"00001\" },\n    { \"C\", \"0101\", \"00010\" },{ \"D\", \"0001\", \"00011\" },{ \"E\", \"110\", \"00100\" },{ \"F\", \"01001\", \"00101\" },\n\t{ \"G\", \"10011011\", \"00110\" },{ \"H\", \"010000\", \"00111\" },{ \"I\", \"0111\", \"01000\" },{ \"J\", \"10011000\", \"01001\" },\n\t{ \"K\", \"0110\", \"01010\" },{ \"L\", \"00100\", \"01011\" },{ \"M\", \"10011001\", \"01100\" },{ \"N\", \"10011110\", \"01101\" },\n\t{ \"O\", \"00101\", \"01110\" },{ \"P\", \"111\", \"01111\" },{ \"Q\", \"10011111\", \"10000\" },{ \"R\", \"1000\", \"10001\" },\n\t{ \"S\", \"00110\", \"10010\" },{ \"T\", \"00111\", \"10011\" },{ \"U\", \"10011100\", \"10100\" },{ \"V\", \"10011101\", \"10101\" },\n\t{ \"W\", \"000010\", \"10110\" },{ \"X\", \"10010010\", \"10111\" },{ \"Y\", \"10010011\", \"11000\" },{ \"Z\", \"100100000\", \"11001\" },\n    {\"\", \"\", \"\" }\n};\n\n\nint main(void)\n{\n\tchar str1[1000],str2[1000],ch;\n\tint cut_i;\n\t\n\t/*scanf(\"%[A-Z \\'.?,-]\",str);\n\t\thantei(str1);*/\n\tcut_i=0;\n\twhile((ch = getchar())!=EOF){\n\t\tif(ch !='\\n'){\n\t\t\tstr2[cut_i] = ch;\n\t\t\tcut_i++;\n\t\t}\n\t\telse {\n\t\t\tif(cut_i=0){\n\t\t\t\tstr1[cut_i] =' ';\n\t\t\t\tcut_i++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrncpy(str1,str2,cut_i);\n\t\t\t}\n\t\t\tstr1[cut_i]='\\0';\n\t\t\thantei(str1);\n\t\t\tprintf(\"\\n\");\n\t\t\tcut_i=0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\nvoid hantei(char *str)\n{\n\tint len1,cut_i,cut_j,count;\n\tchar ans[1000]={\"\"},str2[1000]={\"\"},str3[1000]={\"\"};\n\tchar zero[]={\"0000\"};\n\n\tlen1 = strlen(str);\n\tcount = 0;\n\n\tfor(cut_i=0;cut_i<len1;cut_i++){\n\t\tcut_j=0;\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(!strncmp((str+cut_i),DataBase[cut_j][0],1)){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(str2,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\telse if(count !=0){\n\t\t\t\t\tstrcpy(str2+count,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\t\n\tlen1 = strlen(str2);\n\tcount = 0;\n\n\tif( len1 % 5 != 0){\n\t\tcut_i = 5 - len1 % 5;\n\t\tstrncat(str2,zero,cut_i);\n\t\tlen1 = strlen(str2);\n\t}\n\n\n\tfor(cut_i=0;cut_i<len1;cut_i+=5){\n\t\tcut_j=0;\n\t\tstrncpy(str3,str2+cut_i,5);\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(strcmp(str3,DataBase[cut_j][2]) == 0){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(ans,DataBase[cut_j][0]);\n\t\t\t\t\tcount =strlen(ans);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstrcat(ans,DataBase[cut_j][0]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\tprintf(ans);\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\nstring c2s(char c){\n  if(c==' ') return \"101\";\n  if(c=='\\'') return \"000000\";\n  if(c==',') return \"000011\";\n  if(c=='-') return \"10010001\";\n  if(c=='.') return \"010001\";\n  if(c=='?') return \"000001\";\n  if(c=='A') return \"100101\";\n  if(c=='B') return \"10011010\";\n  if(c=='C') return \"0101\";\n  if(c=='D') return \"0001\";\n  if(c=='E') return \"110\";\n  if(c=='F') return \"01001\";\n  if(c=='G') return \"10011011\";\n  if(c=='H') return \"010000\";\n  if(c=='I') return \"0111\";\n  if(c=='J') return \"10011000\";\n  if(c=='K') return \"0110\";\n  if(c=='L') return \"00100\";\n  if(c=='M') return \"10011001\";\n  if(c=='N') return \"10011110\";\n  if(c=='O') return \"00101\";\n  if(c=='P') return \"111\";\n  if(c=='Q') return \"10011111\";\n  if(c=='R') return \"1000\";\n  if(c=='S') return \"00110\";\n  if(c=='T') return \"00111\";\n  if(c=='U') return \"10011100\";\n  if(c=='V') return \"10011101\";\n  if(c=='W') return \"000010\";\n  if(c=='X') return \"10010010\";\n  if(c=='Y') return \"10010011\";\n  if(c=='Z') return \"10010000\"; \n}\nchar s2c(string x){\n  if(x==\"00000\") return 'A';\n  if(x==\"00001\") return 'B';\n  if(x==\"00010\") return 'C';\n  if(x==\"00011\") return 'D';\n  if(x==\"00100\") return 'E';\n  if(x==\"00101\") return 'F';\n  if(x==\"00110\") return 'G';\n  if(x==\"00111\") return 'H';\n  if(x==\"01000\") return 'I';\n  if(x==\"01001\") return 'J';\n  if(x==\"01010\") return 'K';\n  if(x==\"01011\") return 'L';\n  if(x==\"01100\") return 'M';\n  if(x==\"01101\") return 'N';\n  if(x==\"01110\") return 'O';\n  if(x==\"01111\") return 'P';\n  if(x==\"10000\") return 'Q';\n  if(x==\"10001\") return 'R';\n  if(x==\"10010\") return 'S';\n  if(x==\"10011\") return 'T';\n  if(x==\"10100\") return 'U';\n  if(x==\"10101\") return 'V';\n  if(x==\"10110\") return 'W';\n  if(x==\"10111\") return 'X';\n  if(x==\"11000\") return 'Y';\n  if(x==\"11001\") return 'Z';\n  if(x==\"11010\") return ' ';\n  if(x==\"11011\") return '.';\n  if(x==\"11100\") return ',';\n  if(x==\"11101\") return '-';\n  if(x==\"11110\") return '\\'';\n  if(x==\"11111\") return '?';\n}\nint main(){\n  string s;\n  getline(cin,s);\n  int i;\n  string m;\n  for(i=0;i<s.size();i++) m+=c2s(s[i]);\n  if(m.size()%5!=0){\n    m+=\"0000\";\n  }\n  string o;\n  for(i=0;i+5<=m.size();i+=5){\n    o+=s2c(m.substr(i,5));\n  }\n  cout << o << endl;\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n\tstring tmp;\n\t\twhile(getline(cin, tmp)){\n\t\t\tstring input_str = \"\";\n\t\t\tfor(int i=0; i<tmp.size(); i++){\n\t\t\t\tswitch(tmp[i]){\n\t\t\t\tcase ' ' :input_str += \"101\"\t    ;break;\n\t\t\t\tcase '\\'':input_str += \"000000\"\t\t;break;\n\t\t\t\tcase ',' :input_str += \"000011\"\t\t;break;\n\t\t\t\tcase '-' :input_str += \"10010001\"\t;break;\n\t\t\t\tcase '.' :input_str += \"010001\"\t\t;break;\n\t\t\t\tcase '?' :input_str += \"000001\"\t    ;break;\n\t\t\t\tcase 'A' :input_str += \"100101\"\t\t;break;\n\t\t\t\tcase 'B' :input_str += \"10011010\"\t;break;\n\t\t\t\tcase 'C' :input_str += \"0101\"\t\t;break;\n\t\t\t\tcase 'D' :input_str += \"0001\"\t\t;break;\n\t\t\t\tcase 'E' :input_str += \"110\"\t\t;break;\n\t\t\t\tcase 'F' :input_str += \"01001\"\t\t;break;\n\t\t\t\tcase 'G' :input_str += \"10011011\"\t;break;\n\t\t\t\tcase 'H' :input_str += \"010000\"\t\t;break;\n\t\t\t\tcase 'I' :input_str += \"0111\"\t\t;break;\n\t\t\t\tcase 'J' :input_str += \"10011000\"\t;break;\n\t\t\t\tcase 'K' :input_str += \"0110\"\t\t;break;\n\t\t\t\tcase 'L' :input_str += \"00100\"\t\t;break;\n\t\t\t\tcase 'M' :input_str += \"10011001\"\t;break;\n\t\t\t\tcase 'N' :input_str += \"10011110\"\t;break;\n\t\t\t\tcase 'O' :input_str += \"00101\"\t\t;break;\n\t\t\t\tcase 'P' :input_str += \"111\"\t\t;break;\n\t\t\t\tcase 'Q' :input_str += \"10011111\"\t;break;\n\t\t\t\tcase 'R' :input_str += \"1000\"\t\t;break;\n\t\t\t\tcase 'S' :input_str += \"00110\"\t\t;break;\n\t\t\t\tcase 'T' :input_str += \"00111\"\t\t;break;\n\t\t\t\tcase 'U' :input_str += \"10011100\"\t;break;\n\t\t\t\tcase 'V' :input_str += \"10011101\"\t;break;\n\t\t\t\tcase 'W' :input_str += \"000010\"\t\t;break;\n\t\t\t\tcase 'X' :input_str += \"10010010\"\t;break;\n\t\t\t\tcase 'Y' :input_str += \"10010011\"\t;break;\n\t\t\t\tcase 'Z' :input_str += \"10010000\"\t;break;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint pad = 5 - input_str.size()%5;\n\t\t\tfor(int i=0; i<pad; i++)input_str += '0';\n\t\t\tstring out = \"\";\n\t\t\tfor(int i=0; i<input_str.size(); i+=5){\n\t\t\t\tstring output_str = input_str.substr(i, 5);\n\t\t\t\tif(output_str== \"00000\"){ out += 'A'; }\n\t\t\t\telse if( output_str==\"00001\") { out += 'B';}\t\n\t\t\t\telse if( output_str==\"00010\") { out += 'C';}\t\n\t\t\t\telse if( output_str==\"00011\") { out += 'D';}\t\n\t\t\t\telse if( output_str==\"00100\") { out += 'E';}\t\n\t\t\t\telse if( output_str==\"00101\") { out += 'F';}\t\n\t\t\t\telse if( output_str==\"00110\") { out += 'G';}\t\n\t\t\t\telse if( output_str==\"00111\") { out += 'H';}\t\n\t\t\t\telse if( output_str==\"01000\") { out += 'I';}\t\n\t\t\t\telse if( output_str==\"01001\") { out += 'J';}\t\n\t\t\t\telse if( output_str==\"01010\") { out += 'K';}\t\n\t\t\t\telse if( output_str==\"01011\") { out += 'L';}\t\n\t\t\t\telse if( output_str==\"01100\") { out += 'M';}\t\n\t\t\t\telse if( output_str==\"01101\") { out += 'N';}\t\n\t\t\t\telse if( output_str==\"01110\") { out += 'O';}\t\n\t\t\t\telse if( output_str==\"01111\") { out += 'P';}\t\n\t\t\t\telse if( output_str==\"10000\") { out += 'Q';}\t\n\t\t\t\telse if( output_str==\"10001\") { out += 'R';}\t\n\t\t\t\telse if( output_str==\"10010\") { out += 'S';}\t\n\t\t\t\telse if( output_str==\"10011\") { out += 'T';}\t\n\t\t\t\telse if( output_str==\"10100\") { out += 'U';}\t\n\t\t\t\telse if( output_str==\"10101\") { out += 'V';}\t\n\t\t\t\telse if( output_str==\"10110\") { out += 'W';}\t\n\t\t\t\telse if( output_str==\"10111\") { out += 'X';}\t\n\t\t\t\telse if( output_str==\"11000\") { out += 'Y';}\t\n\t\t\t\telse if( output_str==\"11001\") { out += 'Z';}\t\n\t\t\t\telse if( output_str==\"11010\") { out += ' ';}\t\n\t\t\t\telse if( output_str==\"11011\") { out += '.';}\t\n\t\t\t\telse if( output_str==\"11100\") { out += ',';}\t\n\t\t\t\telse if( output_str==\"11101\") { out += '-';}\t\n\t\t\t\telse if( output_str==\"11110\") { out += '\\'';} \n\t\t\t\telse if( output_str==\"11111\") { out += '?';}\n\t\t\t}\n\t\t\tif(cin.eof())break;\n\t\t\tcout << out << endl;\n\t\t\ttmp.clear(), input_str.clear(), out.clear();\n\t\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include \"bits/stdc++.h\"\nusing namespace std;\n\n//#define int long long\n#define DBG 1\n#define dump(o) if(DBG){cerr<<#o<<\" \"<<o<<endl;}\n#define dumpc(o) if(DBG){cerr<<#o; for(auto &e:(o))cerr<<\" \"<<e;cerr<<endl;}\n#define rep(i,a,b) for(int i=(a);i<(b);i++)\n#define rrep(i,a,b) for(int i=(b)-1;i>=(a);i--)\n#define each(it,c) for(auto it=(c).begin();it!=(c).end();it++)\n#define all(c) c.begin(),c.end()\nconst int INF = sizeof(int) == sizeof(long long) ? 0x3f3f3f3f3f3f3f3fLL : 0x3f3f3f3f;\nconst int MOD = (int)(1e9 + 7);\nconst double EPS = 1e-10;\nint binstring_to_int(string s) {\n\tint x = 1;\n\tint res = 0;\n\trrep(i, 0, s.size()) {\n\t\tif (s[i] == '1')res |= x;\n\t\tx <<= 1;\n\t}\n\n\treturn res;\n}\nchar crypt(string s) {\n\tint x = binstring_to_int(s);\n\tif (x == 26)return ' ';\n\telse if (x == 27)return '.';\n\telse if (x == 28)return ',';\n\telse if (x == 29)return '-';\n\telse if (x == 30)return '\\'';\n\telse if (x == 31)return '?';\n\telse {\n\t\treturn 'A' + (char)x;\n\t}\n}\nsigned main() {\n\tmap<char, string>m;\n\tm[' '] = \"101\";\n\tm['\\''] = \"000000\";\n\tm[','] = \"000011\";\n\tm['-'] = \"10010001\";\n\tm['.'] = \"010001\";\n\tm['?'] = \"000001\";\n\tm['A'] = \"100101\";\n\tm['B'] = \"10011010\";\n\tm['C'] = \"0101\";\n\tm['D'] = \"0001\";\n\tm['E'] = \"110\";\n\tm['F'] = \"01001\";\n\tm['G'] = \"10011011\";\n\tm['H'] = \"010000\";\n\tm['I'] = \"0111\";\n\tm['J'] = \"10011000\";\n\tm['K'] = \"0110\";\n\tm['L'] = \"00100\";\n\tm['M'] = \"10011001\";\n\tm['N'] = \"10011110\";\n\tm['O'] = \"00101\";\n\tm['P'] = \"111\";\n\tm['Q'] = \"10011111\";\n\tm['R'] = \"1000\";\n\tm['S'] = \"00110\";\n\tm['T'] = \"00111\";\n\tm['U'] = \"10011100\";\n\tm['V'] = \"10011101\";\n\tm['W'] = \"000010\";\n\tm['X'] = \"10010010\";\n\tm['Y'] = \"10010011\";\n\tm['Z'] = \"10010000\";\n\n\tstring s;\n\twhile (getline(cin, s)) {\n\t\tstring ans;\n\n\t\trep(i, 0, s.size()) {\n\t\t\tans += m[s[i]];\n\t\t}\n\t\tstring cry;\n\t\tstring t;\n\t\trep(i, 0, ans.size()) {\n\t\t\tt.push_back(ans[i]);\n\t\t\tif (t.size() == 5) {\n\t\t\t\tcry += crypt(t);\n\t\t\t\tt.clear();\n\t\t\t}\n\t\t}\n\t\twhile (t.size() < 5)t = t + \"0\";\n\t\tcry += crypt(t);\n\n\t\tcout << cry << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <string>\n#include <cmath>\n#include <stack>\n#include <vector>\n#include <map>\n#include <set>\n#include <queue>\n#include <list>\n#include <iostream>\n#include <climits>\n#include <cfloat>\n\n\nusing namespace std;\n\nint to_int(char* numStr, int digits)\n{\n\tconst char* n = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n\tint res = 0;\n\tfor (int i = 0; numStr[i] != '\\0'; ++i)\n\t{\n\t\tint j;\n\t\tfor (j = 0; numStr[i] != n[j]; ++j)\n\t\t\t;\n\t\tres = res*digits + j;\n\t}\n\treturn res;\n}\n\nchar buf[2048];\nchar codeBuf[2048*5];\nchar enc[2048];\n\nint main()\n{\n\tchar* ori = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tchar* code[] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\"\n\t\t, \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\"\n\t\t, \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\"\n\t\t, \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\"\n\t\t, \"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tchar* reEnc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n\twhile (!cin.eof())\n\t{\n\t\tcin.getline(buf, sizeof(buf));\n\t\tif (strlen(buf) == 0)\n\t\t\tbreak;\n\n\t\tcodeBuf[0] = '\\0';\n\t\tfor (int i = 0; buf[i] != '\\0'; ++i)\n\t\t{\n\t\t\tint p;\n\t\t\tfor (p = 0; buf[i] != ori[p]; ++p)\n\t\t\t\t;\n\t\t\tstrcat(codeBuf, code[p]);\n\t\t}\n\t\twhile (strlen(codeBuf) % 5 != 0)\n\t\t\tstrcat(codeBuf, \"0\");\n\n\t\tint k = 0;\n\t\tfor (int i = 0; i < strlen(codeBuf); i += 5)\n\t\t{\n\t\t\tchar w[6];\n\t\t\tfor (int j = 0; j < 5; ++j)\n\t\t\t\tw[j] = codeBuf[i+j];\n\t\t\tw[5] = '\\0';\n\t\t\tenc[k++] = reEnc[to_int(w, 2)];\n\t\t}\n\t\tenc[k] = '\\0';\n\n\t\tprintf(\"%s\\n\", enc);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n\n\nusing namespace std;\n\nint to_int(char* numStr, int digits)\n{\n\tconst char* n = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n\tint res = 0;\n\tfor (int i = 0; numStr[i] != '\\0'; ++i)\n\t{\n\t\tint j;\n\t\tfor (j = 0; numStr[i] != n[j]; ++j)\n\t\t\t;\n\t\tres = res*digits + j;\n\t}\n\treturn res;\n}\n\nchar buf[2048];\nchar codeBuf[2048*5];\nchar enc[2048];\nchar w[128];\n\nint main()\n{\n\tconst char* ori = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tconst char* code[] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\"\n\t\t, \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\"\n\t\t, \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\"\n\t\t, \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\"\n\t\t, \"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tconst char* reEnc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n\twhile (!cin.eof())\n\t{\n\t\tcin.getline(buf, sizeof(buf));\n\t\tif (strlen(buf) == 0)\n\t\t\tbreak;\n\n\t\tcodeBuf[0] = '\\0';\n\t\tfor (int i = 0; buf[i] != '\\0'; ++i)\n\t\t{\n\t\t\tint p;\n\t\t\tfor (p = 0; buf[i] != ori[p]; ++p)\n\t\t\t\t;\n\t\t\tstrcat(codeBuf, code[p]);\n\t\t}\n\t\twhile (strlen(codeBuf) % 5 != 0)\n\t\t\tstrcat(codeBuf, \"0\");\n\n\t\tint k = 0;\n\t\tfor (int i = 0; i < (int)strlen(codeBuf); i += 5)\n\t\t{\n\t\t\t//char w[6];\n\t\t\tfor (int j = 0; j < 5; ++j)\n\t\t\t\tw[j] = codeBuf[i+j];\n\t\t\tw[5] = '\\0';\n\t\t\tenc[k++] = reEnc[to_int(w, 2)];\n\t\t}\n\t\tenc[k] = '\\0';\n\n\t\tprintf(\"%s\\n\", enc);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstring>\n#include <cstdlib>\nusing namespace std;\nint main()\n{\n\tchar s[1024] = \"\", b[6];\n\t//t:before; u:after\n\tchar t[32][9] = {\"100101\", \"10011010\", \"0101\", \"0001\", \"110\",\n\t\t\"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\",\n\t\t\"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\",\n\t\t\"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\",\n\t\t\"10010010\", \"10010011\", \"10010000\", \"101\", \"010001\", \"000011\",\n\t\t\"10010001\", \"000000\", \"000001\"};\n\tchar u[32][6] = {\"00000\", \"00001\", \"00010\", \"00011\", \"00100\",\n\t\t\"00101\", \"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\",\n\t\t\"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \"10010\",\n\t\t\"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \"11000\", \"11001\",\n\t\t\"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"};\n\tint i, j, c;\n\twhile (cin.getline(s, sizeof(s)), !cin.eof())\n\t{\n\t\tchar a[5120] = \"\", r[5120] = \"\";\n\t\tc = 0;\n\t\tfor (i = 0; i < strlen(s); i++)\n\t\t{\n\t\t\tswitch (s[i])\n\t\t\t{\n\t\t\tcase ' ':\n\t\t\t\tfor (j = 0; j < 3; j++, c++)\n\t\t\t\t\ta[c] = t[26][j];\n\t\t\t\tbreak;\n\t\t\tcase '.':\n\t\t\t\tfor (j = 0; j < 6; j++, c++)\n\t\t\t\t\ta[c] = t[27][j];\n\t\t\t\tbreak;\n\t\t\tcase ',':\n\t\t\t\tfor (j = 0; j < 6; j++, c++)\n\t\t\t\t\ta[c] = t[28][j];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tfor (j = 0; j < 8; j++, c++)\n\t\t\t\t\ta[c] = t[29][j];\n\t\t\t\tbreak;\n\t\t\tcase '\\'':\n\t\t\t\tfor (j = 0; j < 6; j++, c++)\n\t\t\t\t\ta[c] = t[30][j];\n\t\t\t\tbreak;\n\t\t\tcase '?':\n\t\t\t\tfor (j = 0; j < 6; j++, c++)\n\t\t\t\t\ta[c] = t[31][j];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tfor (j = 0; j < strlen(t[s[i]-'A']); j++, c++)\n\t\t\t\t\ta[c] = t[s[i]-'A'][j];\n\t\t\t}\n\t\t}\n\t\tfor (i = c = 0; i < strlen(a); i += 5, c++)\n\t\t{\n\t\t\tfor (j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif (a[i+j] != '\\0')\n\t\t\t\t\tb[j] = a[i+j];\n\t\t\t\telse\n\t\t\t\t\tb[j] = '0';\n\t\t\t}\n\t\t\tb[5] = '\\0';\n\t\t\tfor (j = 0; j < 32; j++)\n\t\t\t{\n\t\t\t\tif (strcmp(b, u[j]) == 0)\n\t\t\t\t{\n\t\t\t\t\tswitch (j)\n\t\t\t\t\t{\n\t\t\t\t\tcase 26:\n\t\t\t\t\t\tr[c] = ' ';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\tr[c] = '.';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 28:\n\t\t\t\t\t\tr[c] = ',';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 29:\n\t\t\t\t\t\tr[c] = '-';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 30:\n\t\t\t\t\t\tr[c] = '\\'';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 31:\n\t\t\t\t\t\tr[c] = '?';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tr[c] = j + 'A';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tr[c+1] = '\\0';\n\t\tcout << r << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\n#define rep(i,n)for(int i=0;i<n;i++)\nusing namespace std;\n\nmap<char, int>notal{\n\t{ ' ',26 },{ '.',27 },{ ',',28 },{ '-',29 },{ '\\'',30 },{ '?',31 }\n};\nmap<int, char>mp{\n\t{ 26,' ' },{ 27,'.' },{ 28,',' },{ 29,'-' },{ 30,'\\'' },{ 31,'?' },\n};\nstring code[]{ \"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\" };\nint bin(string s) {\n\treverse(s.begin(), s.end());\n\tint i = 1;\n\tint res = 0;\n\tfor (char c : s) {\n\t\tres += i*(c - '0');\n\t\ti <<= 1;\n\t}\n\treturn res;\n}\nint main() {\n\tstring s;\n\tstring buf;\n\twhile (getline(cin, buf) && buf != \"\") {\n\t\tif (s != \"\")s += ' ';\n\t\ts += buf;\n\t}\n\tstring ss;\n\tfor (char c : s) {\n\t\tif (isalpha(c))ss += code[c - 'A'];\n\t\telse ss += code[notal[c]];\n\t}\n\twhile (ss.size() % 5)ss += '0';\n\tstring ans;\n\tfor (int i = 0; i <= ss.size() - 5; i += 5) {\n\t\tint d = bin(ss.substr(i, 5));\n\t\tif (d < 26)ans += 'A' + d;\n\t\telse ans += mp[d];\n\t}\n\tcout << ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <iomanip>\n#include <complex>\n#include <string>\n#include <vector>\n#include <list>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <bitset>\n#include <functional>\n#include <utility>\n#include <algorithm>\n#include <numeric>\n#include <typeinfo>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <ctime>\n\nusing namespace std;\n\n#define dump(n) cout<<\"# \"<<#n<<\"=\"<<(n)<<endl\n#define debug(n) cout<<__FILE__<<\",\"<<__LINE__<<\": #\"<<#n<<\"=\"<<(n)<<endl\n#define repi(i,a,b) for(int i=int(a);i<int(b);i++)\n#define rep(i,n) repi(i,0,n)\n#define iter(c) __typeof((c).begin())\n#define foreach(i,c) for(iter(c) i=(c).begin();i!=(c).end();i++)\n#define allof(c) (c).begin(),(c).end()\n#define mp make_pair\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<string> vs;\ntypedef pair<int,int> pii;\n\nint main()\n{\n\tmap<char,string> atoc;\n\tatoc[' ']=\"101\";\n\tatoc['\\'']=\"000000\";\n\tatoc[',']=\"000011\";\n\tatoc['-']=\"10010001\";\n\tatoc['.']=\"010001\";\n\tatoc['?']=\"000001\";\n\tatoc['A']=\"100101\";\n\tatoc['B']=\"10011010\";\n\tatoc['C']=\"0101\";\n\tatoc['D']=\"0001\";\n\tatoc['E']=\"110\";\n\tatoc['F']=\"01001\";\n\tatoc['G']=\"10011011\";\n\tatoc['H']=\"010000\";\n\tatoc['I']=\"0111\";\n\tatoc['J']=\"10011000\";\n\tatoc['K']=\"0110\";\n\tatoc['L']=\"00100\";\n\tatoc['M']=\"10011001\";\n\tatoc['N']=\"10011110\";\n\tatoc['O']=\"00101\";\n\tatoc['P']=\"111\";\n\tatoc['Q']=\"10011111\";\n\tatoc['R']=\"1000\";\n\tatoc['S']=\"00110\";\n\tatoc['T']=\"00111\";\n\tatoc['U']=\"10011100\";\n\tatoc['V']=\"10011101\";\n\tatoc['W']=\"000010\";\n\tatoc['X']=\"10010010\";\n\tatoc['Y']=\"10010011\";\n\tatoc['Z']=\"10010000\";\n\n\tmap<string,char> ctoa;\n\tctoa[\"00000\"]='A';\n\tctoa[\"00001\"]='B';\n\tctoa[\"00010\"]='C';\n\tctoa[\"00011\"]='D';\n\tctoa[\"00100\"]='E';\n\tctoa[\"00101\"]='F';\n\tctoa[\"00110\"]='G';\n\tctoa[\"00111\"]='H';\n\tctoa[\"01000\"]='I';\n\tctoa[\"01001\"]='J';\n\tctoa[\"01010\"]='K';\n\tctoa[\"01011\"]='L';\n\tctoa[\"01100\"]='M';\n\tctoa[\"01101\"]='N';\n\tctoa[\"01110\"]='O';\n\tctoa[\"01111\"]='P';\n\tctoa[\"10000\"]='Q';\n\tctoa[\"10001\"]='R';\n\tctoa[\"10010\"]='S';\n\tctoa[\"10011\"]='T';\n\tctoa[\"10100\"]='U';\n\tctoa[\"10101\"]='V';\n\tctoa[\"10110\"]='W';\n\tctoa[\"10111\"]='X';\n\tctoa[\"11000\"]='Y';\n\tctoa[\"11001\"]='Z';\n\tctoa[\"11010\"]=' ';\n\tctoa[\"11011\"]='.';\n\tctoa[\"11100\"]=',';\n\tctoa[\"11101\"]='-';\n\tctoa[\"11110\"]='\\'';\n\tctoa[\"11111\"]='?';\n\t\n\tfor(string as;getline(cin,as);){\n\t\tstring cs;\n\t\trep(i,as.size())\n\t\t\tcs+=atoc[as[i]];\n\t\twhile(cs.size()%5)\n\t\t\tcs+='0';\n\t\tstring res;\n\t\tfor(int i=0;i<cs.size();i+=5)\n\t\t\tres=res+ctoa[cs.substr(i,5)];\n\t\tcout<<res<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <iomanip>\n#include <queue>\n#include <set>\n#include <map>\n#include <cstdlib>\n#include <cstdio>\n#include <cmath>\n#include <bitset>\nusing namespace std;\n\n\nconst double EPS = 1e-9;\n\nint main(){\n\tmap<char, string> enc;\n\tenc[' ']  = \"101\";\n\tenc['\\''] = \"000000\";\n\tenc[',']  = \"000011\";\n\tenc['-']  = \"10010001\";\n\tenc['.']  = \"010001\";\n\tenc['?']  = \"000001\";\n\tenc['A']  = \"100101\";\n\tenc['B']  = \"10011010\";\n\tenc['C']  = \"0101\";\n\tenc['D']  = \"0001\";\n\tenc['E']  = \"110\";\n\tenc['F']  = \"01001\";\n\tenc['G']  = \"10011011\";\n\tenc['H']  = \"010000\";\n\tenc['I']  = \"0111\";\n\tenc['J']  = \"10011000\";\n\tenc['K']  = \"0110\";\n\tenc['L']  = \"00100\";\n\tenc['M']  = \"10011001\";\n\tenc['N']  = \"10011110\";\n\tenc['O']  = \"00101\";\n\tenc['P']  = \"111\";\n\tenc['Q']  = \"10011111\";\n\tenc['R']  = \"1000\";\n\tenc['S']  = \"00110\";\n\tenc['T']  = \"00111\";\n\tenc['U']  = \"10011100\";\n\tenc['V']  = \"10011101\";\n\tenc['W']  = \"000010\";\n\tenc['X']  = \"10010010\";\n\tenc['Y']  = \"10010011\";\n\tenc['Z']  = \"10010000\";\n\n\tstring d = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\tmap<string, char> dec;\n\tfor(int i = 0; i < 32; i++){\n\t\tdec[bitset<5>(i).to_string()] = d[i];\n\t}\n\n\tmap<string, char>::iterator it = dec.begin();\n\tfor(; it != dec.end(); it++){\n\t\tcout << it->second << ':' << it->first << endl;\n\t}\n\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tstring e = \"\";\n\t\tfor(int i = 0; i < s.size(); i++){\n\t\t\te += enc[s[i]];\n\t\t}\n\t\twhile(e.size()%5 != 0){\n\t\t\te += \"0\";\n\t\t}\n\t\tfor(int i = 0; i < e.size(); i+=5){\n\t\t\tcout << dec[e.substr(i, 5)];\n\t\t}\n\t\tcout << endl;\n\t}\n\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint main(void) {\n\n  char c;\n  char code[6];\n\n  int size;\n  char buf[500]=\"\";\n\n  int i,j=0;\n\n  //encode\n  while((c=getchar())!=EOF) {\n    \n    if(c=='\\n') break;\n\n    switch(c) {\n      \n    case ' ':\n      strcat(buf,\"101\");\n      break;\n\n    case '\\'':\n      strcat(buf,\"000000\");\n      break;\n\n    case ',':\n      strcat(buf,\"000011\");\n      break;\n      \n    case '-':\n      strcat(buf,\"10010001\");\n      break;\n      \n    case '.':\n      strcat(buf,\"010001\");\n      break;\n\n    case '?':\n      strcat(buf,\"000001\");\n      break;\n      \n    case 'A':\n      strcat(buf,\"100101\");\n      break;\n      \n    case 'B':\n      strcat(buf,\"10011010\");\n      break;\n\n    case 'C':\n      strcat(buf,\"0101\");\n      break;\n\n    case 'D':\n      strcat(buf,\"0001\");\n      break;\n\n    case 'E':\n      strcat(buf,\"110\");\n      break;\n      \n    case 'F':\n      strcat(buf,\"01001\");\n      break;\n      \n    case 'G':\n      strcat(buf,\"10011011\");\n      break;\n      \n    case 'H':\n      strcat(buf,\"010000\");\n      break;\n      \n    case 'I':\n      strcat(buf,\"0111\");\n      break;\n\n    case 'J':\n      strcat(buf,\"10011000\");\n      break;\n\n    case 'K':\n      strcat(buf,\"0110\");\n      break;\n\n    case 'L':\n      strcat(buf,\"00100\");\n      break;\n\n    case 'M':\n      strcat(buf,\"10011001\");\n      break;\n\n    case 'N':\n      strcat(buf,\"10011110\");\n      break;\n      \n    case 'O':\n      strcat(buf,\"00101\");\n      break;\n      \n    case 'P':\n      strcat(buf,\"111\");\n      break;\n      \n    case 'Q':\n      strcat(buf,\"10011111\");\n      break;\n      \n    case 'R':\n      strcat(buf,\"1000\");\n      break;\n      \n    case 'S':\n      strcat(buf,\"00110\");\n      break;\n\n    case 'T':\n      strcat(buf,\"00111\");\n      break;\n\n    case 'U':\n      strcat(buf,\"10011100\");\n      break;\n\n    case 'V':\n      strcat(buf,\"10011101\");\n      break;\n\n    case 'W':\n      strcat(buf,\"000010\");\n      break;\n\n    case 'X':\n      strcat(buf,\"10010010\");\n      break;\n\n    case 'Y':\n      strcat(buf,\"10010011\");\n      break;\n\n    case 'Z':\n      strcat(buf,\"10010000\");\n      break;\n\n    }\n\n  }\n\n  printf(\"%s\\n\",buf);\n\n  if((size=strlen(buf)%5)!=0) {\n\n    for(i=0;i<5-size;i++) {\n\n      strcat(buf,\"0\");\n\n      }\n\n  }\n\n  printf(\"%s\\n\",buf);\n\n  //decode\n  for(i=0;i<strlen(buf);i++) {\n\n    code[j]=buf[i];\n    j++;\n\n    if(i%5==4) {\n      code[5]='\\0';\n      //printf(\"%s\\n\",code);\n      j=0;\n\n      if(strcmp(code,\"00000\")==0) printf(\"A\");\n\n      if(strcmp(code,\"00001\")==0) printf(\"B\");\n\n      if(strcmp(code,\"00010\")==0) printf(\"C\");\n\n      if(strcmp(code,\"00011\")==0) printf(\"D\");\n\n      if(strcmp(code,\"00100\")==0) printf(\"E\");\n\n      if(strcmp(code,\"00101\")==0) printf(\"F\");\n\n      if(strcmp(code,\"00110\")==0) printf(\"G\");\n\n      if(strcmp(code,\"00111\")==0) printf(\"H\");\n\n      if(strcmp(code,\"01000\")==0) printf(\"I\");\n\n      if(strcmp(code,\"01001\")==0) printf(\"J\");\n\n      if(strcmp(code,\"01010\")==0) printf(\"K\");\n\n      if(strcmp(code,\"01011\")==0) printf(\"L\");\n\n      if(strcmp(code,\"01100\")==0) printf(\"M\");\n\n      if(strcmp(code,\"01101\")==0) printf(\"N\");\n\n      if(strcmp(code,\"01110\")==0) printf(\"O\");\n\n      if(strcmp(code,\"01111\")==0) printf(\"P\");\n\n      if(strcmp(code,\"10000\")==0) printf(\"Q\");\n\n      if(strcmp(code,\"10001\")==0) printf(\"R\");\n\n      if(strcmp(code,\"10010\")==0) printf(\"S\");\n\n      if(strcmp(code,\"10011\")==0) printf(\"T\");\n\n      if(strcmp(code,\"10100\")==0) printf(\"U\");\n\n      if(strcmp(code,\"10101\")==0) printf(\"V\");\n\n      if(strcmp(code,\"10110\")==0) printf(\"W\");\n\n      if(strcmp(code,\"10111\")==0) printf(\"X\");\n\n      if(strcmp(code,\"11000\")==0) printf(\"Y\");\n\n      if(strcmp(code,\"11001\")==0) printf(\"Z\");\n\n      if(strcmp(code,\"11010\")==0) printf(\" \");\n\n      if(strcmp(code,\"11011\")==0) printf(\".\");\n\n      if(strcmp(code,\"11100\")==0) printf(\",\");\n\n      if(strcmp(code,\"11101\")==0) printf(\"-\");\n\n      if(strcmp(code,\"11110\")==0) printf(\"'\");\n\n      if(strcmp(code,\"11111\")==0) printf(\"?\");\n\n    }\n\n  }\n\n  puts(\"\");\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector< string > table1(128, string(\"\"));\nchar table2[36] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nvoid set(){\n    table1[65] = string(\"100101\");\n    table1[66] = string(\"10011010\");\n    table1[67] = string(\"0101\");\n    table1[68] = string(\"0001\");\n    table1[69] = string(\"110\");\n    table1[70] = string(\"01001\");\n    table1[71] = string(\"10011011\");\n    table1[72] = string(\"010000\");\n    table1[73] = string(\"0111\");\n    table1[74] = string(\"10011000\");\n    table1[75] = string(\"0110\");\n    table1[76] = string(\"00100\");\n    table1[77] = string(\"10011001\");\n    table1[78] = string(\"10011110\");\n    table1[79] = string(\"00101\");\n    table1[80] = string(\"111\");\n    table1[81] = string(\"10011111\");\n    table1[82] = string(\"1000\");\n    table1[83] = string(\"00110\");\n    table1[84] = string(\"00111\");\n    table1[85] = string(\"10011100\");\n    table1[86] = string(\"10011101\");\n    table1[87] = string(\"000011\");\n    table1[88] = string(\"10010010\");\n    table1[89] = string(\"10010011\");\n    table1[90] = string(\"10010000\");\n    table1[32] = string(\"101\");\n    table1[39] = string(\"000000\");\n    table1[44] = string(\"000011\");\n    table1[45] = string(\"10010001\");\n    table1[46] = string(\"010001\");\n    table1[63] = string(\"000001\");\n}\n\nint bToDeci(string& s){\n    int ans = 0;\n    string::iterator it = s.begin();\n    for(int n = 0; n < 5; n++){\n        if( it == s.end() ) continue;\n        ans *= 2;\n        ans += *it - '0';\n        it++;\n    }\n    return ans;\n\n}\n\nchar getBlock(string& s, string::iterator& i){\n    string c = \"\";\n    for(int n = 0; n < 5 && i != s.end(); n++, i++){\n        c.append( i, i+1 );\n    }\n    return table2[ bToDeci( c ) ];\n}\n\nint main(){\n    set();\n    string data;\n    while( getline(cin, data) ){\n        string c;\n        c = string(\"\");\n        for(string::iterator it = data.begin(); it != data.end(); it++){\n            c += table1[*it] ;\n        }\n        string::iterator it = c.begin();\n        while( it != c.end() ){\n            cout << getBlock(c, it);\n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map <char, string> map1;\n    map1[' '] = \"101\";\n    map1['\\''] = \"000000\";\n    map1[','] = \"000011\";\n    map1['-'] = \"10010001\";\n    map1['.'] = \"010001\";\n    map1['?'] = \"000001\";\n    map1['A'] = \"100101\";\n    map1['B'] = \"10011010\";\n    map1['C'] = \"0101\";\n    map1['D'] = \"0001\";\n    map1['E'] = \"110\";\n    map1['F'] = \"01001\";\n    map1['G'] = \"10011011\";\n    map1['H'] = \"010000\";\n    map1['I'] = \"0111\";\n    map1['J'] = \"10011000\";\n    map1['K'] = \"0110\";\n    map1['L'] = \"00100\";\n    map1['M'] = \"10011001\";\n    map1['N'] = \"10011110\";\n    map1['O'] = \"00101\";\n    map1['P'] = \"111\";\n    map1['Q'] = \"10011111\";\n    map1['R'] = \"1000\";\n    map1['S'] = \"00110\";\n    map1['T'] = \"00111\";\n    map1['U'] = \"10011100\";\n    map1['V'] = \"10011101\";\n    map1['W'] = \"000010\";\n    map1['X'] = \"10010010\";\n    map1['Y'] = \"10010011\";\n    map1['Z'] = \"10010000\";\n    map <string, char> map2;\n    map2[\"00000\"] = 'A';\n    map2[\"00001\"] = 'B';\n    map2[\"00010\"] = 'C';\n    map2[\"00011\"] = 'D';\n    map2[\"00100\"] = 'E';\n    map2[\"00101\"] = 'F';\n    map2[\"00110\"] = 'G';\n    map2[\"00111\"] = 'H';\n\n    map2[\"01000\"] = 'I';\n    map2[\"01001\"] = 'J';\n    map2[\"01010\"] = 'K';\n    map2[\"01011\"] = 'L';\n    map2[\"01100\"] = 'M';\n    map2[\"01101\"] = 'N';\n    map2[\"01110\"] = 'O';\n    map2[\"01111\"] = 'P';\n\n    map2[\"10000\"] = 'Q';\n    map2[\"10001\"] = 'R';\n    map2[\"10010\"] = 'S';\n    map2[\"10011\"] = 'T';\n    map2[\"10100\"] = 'U';\n    map2[\"10101\"] = 'V';\n    map2[\"10110\"] = 'W';\n    map2[\"10111\"] = 'X';\n\n    map2[\"11000\"] = 'Y';\n    map2[\"11001\"] = 'Z';\n    map2[\"11010\"] = ' ';\n    map2[\"11011\"] = '.';\n    map2[\"11100\"] = ',';\n    map2[\"11101\"] = '-';\n    map2[\"11110\"] = '\\'';\n    map2[\"11111\"] = '?';\n\n    string line;\n    getline( cin, line );\n\n    string to1;\n    for ( string ::iterator it = line.begin(); it != line.end(); it++ ) {\n        to1 += map1[*it];\n    }\n\n    string to2( ( to1.size()%5 != 0 ? to1.size()/5*5+5 : to1.size() ), '0' );\n    for ( int i = 0; i < to1.size(); i++ ) {\n        to2[i] = to1[i];\n    }\n\n    string answer;\n    for ( int i = 0; i < to2.size(); i += 5 ) {\n        string key = to2.substr( i, 5 );\n        answer += map2[key];\n    }\n\n    cout << answer << endl;\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char, string>m1;\nmap<string, char>m2;\nvoid f1() {\n    m1[' '] = \"101\";\n    m1['\\''] = \"000000\";\n    m1[','] = \"000011\";\n    m1['-'] = \"10010001\";\n    m1['.'] = \"010001\";\n    m1['?'] = \"000001\";\n    m1['A'] = \"100101\";\n    m1['B'] = \"10011010\";\n    m1['C'] = \"0101\";\n    m1['D'] = \"0001\";\n    m1['E'] = \"110\";\n    m1['F'] = \"01001\";\n    m1['G'] = \"10011011\";\n    m1['H'] = \"010000\";\n    m1['I'] = \"0111\";\n    m1['J'] = \"10011000\";\n    m1['K'] = \"0110\";\n    m1['L'] = \"00100\";\n    m1['M'] = \"10011001\";\n    m1['N'] = \"10011110\";\n    m1['O'] = \"00101\";\n    m1['P'] = \"111\";\n    m1['Q'] = \"10011111\";\n    m1['R'] = \"1000\";\n    m1['S'] = \"00100\";\n    m1['T'] = \"00111\";\n    m1['U'] = \"10011100\";\n    m1['V'] = \"10011101\";\n    m1['W'] = \"000010\";\n    m1['X'] = \"10010010\";\n    m1['Y'] = \"10010011\";\n    m1['Z'] = \"10010000\";\n}\nvoid f2() {\n    m2[\"00000\"] = 'A';\n    m2[\"00001\"] = 'B';\n    m2[\"00010\"] = 'C';\n    m2[\"00011\"] = 'D';\n    m2[\"00100\"] = 'E';\n    m2[\"00101\"] = 'F';\n    m2[\"00110\"] = 'G';\n    m2[\"00111\"] = 'H';\n    m2[\"01000\"] = 'I';\n    m2[\"01001\"] = 'J';\n    m2[\"01010\"] = 'K';\n    m2[\"01011\"] = 'L';\n    m2[\"01100\"] = 'M';\n    m2[\"01101\"] = 'N';\n    m2[\"01110\"] = 'O';\n    m2[\"01111\"] = 'P';\n    m2[\"10000\"] = 'Q';\n    m2[\"10001\"] = 'R';\n    m2[\"10010\"] = 'S';\n    m2[\"10011\"] = 'T';\n    m2[\"10100\"] = 'U';\n    m2[\"10101\"] = 'V';\n    m2[\"10110\"] = 'W';\n    m2[\"10111\"] = 'X';\n    m2[\"11000\"] = 'Y';\n    m2[\"11001\"] = 'Z';\n    m2[\"11010\"] = ' ';\n    m2[\"11011\"] = '.';\n    m2[\"11100\"] = ',';\n    m2[\"11101\"] = '-';\n    m2[\"11110\"] = '\\'';\n    m2[\"11111\"] = '?';\n}\nint main() {\n    string s, str, ans; f1(); f2(); \n    bool b = false;\n    while (getline(cin, s)) {\n        if (b) str += m1[' '];\n        for (int i = 0; i < s.size(); i++) {\n            str += m1[s[i]];\n            if (str.size() >= 5) {\n                while (str.size() >= 5) {\n                    ans += m2[str.substr(0, 5)];\n                    str.erase(str.begin(), str.begin() + 6);\n                }\n            }\n        }\n        b = true;\n    }\n    if (str.size() > 0) {\n        int n = str.size();\n        for (int i = 0; i < 5 - n; i++)str += '0';\n        ans += m2[str];\n    }\n    cout << ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <iomanip>\n#include <queue>\n#include <set>\n#include <map>\n#include <cstdlib>\n#include <cstdio>\n#include <cmath>\n#include <bitset>\nusing namespace std;\n\n\nconst double EPS = 1e-9;\n\nint main(){\n\tmap<char, string> enc;\n\tenc[' ']  = \"101\";\n\tenc['\\''] = \"000000\";\n\tenc[',']  = \"000011\";\n\tenc['-']  = \"10010001\";\n\tenc['.']  = \"010001\";\n\tenc['?']  = \"000001\";\n\tenc['A']  = \"100101\";\n\tenc['B']  = \"10011010\";\n\tenc['C']  = \"0101\";\n\tenc['D']  = \"0001\";\n\tenc['E']  = \"110\";\n\tenc['F']  = \"01001\";\n\tenc['G']  = \"10011011\";\n\tenc['H']  = \"010000\";\n\tenc['I']  = \"0111\";\n\tenc['J']  = \"10011000\";\n\tenc['K']  = \"0110\";\n\tenc['L']  = \"00100\";\n\tenc['M']  = \"10011001\";\n\tenc['N']  = \"10011110\";\n\tenc['O']  = \"00101\";\n\tenc['P']  = \"111\";\n\tenc['Q']  = \"10011111\";\n\tenc['R']  = \"1000\";\n\tenc['S']  = \"00110\";\n\tenc['T']  = \"00111\";\n\tenc['U']  = \"10011100\";\n\tenc['V']  = \"10011101\";\n\tenc['W']  = \"000010\";\n\tenc['X']  = \"10010010\";\n\tenc['Y']  = \"10010011\";\n\tenc['Z']  = \"10010000\";\n\n\tstring d = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\tmap<string, char> dec;\n\tfor(int i = 0; i < 32; i++){\n\t\tdec[bitset<5>(i).to_string()] = d[i];\n\t}\n\n\t//map<string, char>::iterator it = dec.begin();\n\t//for(; it != dec.end(); it++){\n\t//\tcout << it->second << ':' << it->first << endl;\n\t//}\n\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tstring e = \"\";\n\t\tfor(int i = 0; i < s.size(); i++){\n\t\t\te += enc[s[i]];\n\t\t}\n\t\twhile(e.size()%5 != 0){\n\t\t\te += \"0\";\n\t\t}\n\t\tfor(int i = 0; i < e.size(); i+=5){\n\t\t\tcout << dec[e.substr(i, 5)];\n\t\t}\n\t\tcout << endl;\n\t}\n\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\nusing namespace std;\n\nmap<char, string> encode_table;\nmap<string, char> decode_table;\n\nchar decode(string s) {\n//    cout << s << endl;\n    return decode_table[s];\n}\n\nstring encode(string s) {\n    string tmp;\n    for (string::iterator si = s.begin(); si != s.end(); si++) {\n        tmp.append(encode_table[*si]);\n    }\n//    cout << tmp << endl;\n\n    string ret;\n    int tmp_len = tmp.size();\n    if (tmp_len % 5 != 0) {\n        tmp.append(5-tmp_len%5, '0');\n        tmp_len += 5 - tmp_len % 5;\n    }\n    for (int i = 0; i < tmp_len; i+=5) {\n        ret.push_back(decode(tmp.substr(i, 5)));\n    }\n    return ret;\n}\n\n\nvoid init() {\n    encode_table[' ']  = \"101\";\n    encode_table['\\''] = \"000000\";\n    encode_table[',']  = \"000011\";\n    encode_table['-']  = \"10010001\";\n    encode_table['.']  = \"010001\";\n    encode_table['?']  = \"000001\";\n    encode_table['A']  = \"100101\";\n    encode_table['B']  = \"10011010\";\n    encode_table['C']  = \"0101\";\n    encode_table['D']  = \"0001\";\n    encode_table['E']  = \"110\";\n    encode_table['F']  = \"01001\";\n    encode_table['G']  = \"10011011\";\n    encode_table['H']  = \"010000\";\n    encode_table['I']  = \"0111\";\n    encode_table['J']  = \"10011000\";\n    encode_table['K']  = \"0110\";\n    encode_table['L']  = \"00100\";\n    encode_table['M']  = \"10011001\";\n    encode_table['N']  = \"10011110\";\n    encode_table['O']  = \"00101\";\n    encode_table['P']  = \"111\";\n    encode_table['Q']  = \"10011111\";\n    encode_table['R']  = \"1000\";\n    encode_table['S']  = \"00110\";\n    encode_table['T']  = \"00111\";\n    encode_table['U']  = \"10011100\";\n    encode_table['V']  = \"10011101\";\n    encode_table['W']  = \"000010\";\n    encode_table['X']  = \"10010010\";\n    encode_table['Y']  = \"10010011\";\n    encode_table['Z']  = \"10010000\";\n\tdecode_table[string(\"00000\")]  = 'A';\n\tdecode_table[string(\"00001\")]  = 'B';\n\tdecode_table[string(\"00010\")]  = 'C';\n\tdecode_table[string(\"00011\")]  = 'D';\n\tdecode_table[string(\"00100\")]  = 'E';\n\tdecode_table[string(\"00101\")]  = 'F';\n\tdecode_table[string(\"00110\")]  = 'G';\n\tdecode_table[string(\"00111\")]  = 'H';\n    decode_table[string(\"01000\")]  = 'I';\n    decode_table[string(\"01001\")]  = 'J';\n    decode_table[string(\"01010\")]  = 'K';\n    decode_table[string(\"01011\")]  = 'L';\n    decode_table[string(\"01100\")]  = 'M';\n    decode_table[string(\"01101\")]  = 'N';\n    decode_table[string(\"01110\")]  = 'O';\n    decode_table[string(\"01111\")]  = 'P';\n\tdecode_table[string(\"10000\")]  = 'Q';\n\tdecode_table[string(\"10001\")]  = 'R';\n\tdecode_table[string(\"10010\")]  = 'S';\n\tdecode_table[string(\"10011\")]  = 'T';\n\tdecode_table[string(\"10100\")]  = 'U';\n\tdecode_table[string(\"10101\")]  = 'V';\n\tdecode_table[string(\"10110\")]  = 'W';\n\tdecode_table[string(\"10111\")]  = 'X';\n\tdecode_table[string(\"11000\")]  = 'Y';\n\tdecode_table[string(\"11001\")]  = 'Z';\n\tdecode_table[string(\"11010\")]  = ' ';\n\tdecode_table[string(\"11011\")]  = '.';\n\tdecode_table[string(\"11100\")]  = ',';\n\tdecode_table[string(\"11101\")]  = '-';\n\tdecode_table[string(\"11110\")]  = '\\'';\n\tdecode_table[string(\"11111\")]  = '?';\n}  \n\nint main() {\n    string s;\n    init();\n    while (getline(cin, s)) {\n        cout << encode(s) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\nusing namespace std;\nusing namespace std;\n \nint main(){\n    char chs[]=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string codes[32]={\n        \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n        ,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n        ,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n        ,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n \n    string s;\n    while(getline(cin,s)){\n        string t;\n        for(int i=0;i<s.size();i++){\n            t += codes[find(chs,chs+32,s[i])-chs];\n        }\n        if(t.size()%5)t.append(5-t.size()%5,'0');\n        for(int i=0;i<t.size();i+=5){\n            int n=0;\n            for(int j=0;j<5;j++)n = n<<1|t[i+j]-'0';\n            if(n<26)cout<<(char)('A'+n);\n            else cout<<\" .,-'?\"[n-26];\n        }\n        cout<<endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <map>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\nstring itob(int a) {\n  string ret;\n  for(int i=16; i>0; i/=2) {\n    if (a>=i) {\n      ret+='1';\n      a-=i;\n    } else\n      ret+='0';\n  }\n  return ret;\n}\n\nint main() {\n  string hoge = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  map<string, string> m;\n  REP(i,hoge.length()) {\n    string hage;\n    hage = hoge[i];\n    m.insert(make_pair(itob(i),hage));\n  }\n  hoge = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string hoge2[] = {\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n                 ,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n                 ,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n                 ,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n  map<char,string> m2;\n  REP(i,hoge.length())\n    m2.insert(make_pair(hoge[i],hoge2[i]));\n  string line;\n  while(!cin.eof()) {\n    getline(cin,line);\n    if (cin.eof()) break;\n    string a;\n    REP(i,line.length())\n      a += m2[line[i]];\n    int aa = a.length()%5;\n    if(aa)\n      a+=string(5-aa,'0');\n    string ans;\n    for (int i=0; i<a.length(); i+=5) {\n      ans += m[a.substr(i,5)];\n    }\n    //cout << a << endl;\n    cout << ans << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define PB push_back\n#define MP make_pair\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define ALL(a) (a).begin(),(a).end()\n#define INF 1000000001\n#define MOD 10000\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> P;\nconst ull B=100000007;\nstring angou[26]={\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\nint to_i(string s){\n      int res=0,k=1;\n      for(int i=4;i>=0;i--){\n            if(s[i]=='1')res+=k;\n            k*=2;\n      }\n      return res;\n}\nstring to(char c){\n      if(c==' ')return \"101\";\n      if(c=='\\'')return \"000000\";\n      if(c=='-')return \"10010001\";\n      if(c=='.')return \"010001\";\n      if(c=='?')return \"000001\";\n      return angou[c-'A'];\n}\nchar from(string a){\n      int aa=to_i(a);\n      if(0<=aa&&aa<=25)return 'A'+aa;\n      if(aa==26)return ' ';\n      if(aa==27)return '.';\n      if(aa==28)return ',';\n      if(aa==29)return '-';\n      if(aa==30)return '\\'';\n      return '?';\n}\nint main(){\n      string s;\n      getline(cin,s);\n      string t=\"\";\n      REP(i,s.size())t+=to(s[i]);\n      while(t.size()%5!=0)t+='0';\n      s=\"\";\n      for(int i=0;i<t.size();i+=5){\n            string a;a.assign(t,i,5);\n            s+=from(a);\n      }\n      cout<<s<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<map>\n#include<iostream>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint main() {\n\tmap<char, string> a;\n\tstring b = \"'\";\n\ta.insert(map<char, string>::value_type(' ', \"101\"));\n\ta.insert(map<char, string>::value_type(b[0], \"000000\"));\n\ta.insert(map<char, string>::value_type(',', \"000011\"));\n\ta.insert(map<char, string>::value_type('-', \"10010001\"));\n\ta.insert(map<char, string>::value_type('.', \"010001\"));\n\ta.insert(map<char, string>::value_type('?', \"000001\"));\n\ta.insert(map<char, string>::value_type('A', \"100101\"));\n\ta.insert(map<char, string>::value_type('B', \"10011010\"));\n\ta.insert(map<char, string>::value_type('C', \"0101\"));\n\ta.insert(map<char, string>::value_type('D', \"0001\"));\n\ta.insert(map<char, string>::value_type('E', \"110\"));\n\ta.insert(map<char, string>::value_type('F', \"01001\"));\n\ta.insert(map<char, string>::value_type('G', \"10011011\"));\n\ta.insert(map<char, string>::value_type('H', \"010000\"));\n\ta.insert(map<char, string>::value_type('I', \"0111\"));\n\ta.insert(map<char, string>::value_type('J', \"10011000\"));\n\ta.insert(map<char, string>::value_type('K', \"0110\"));\n\ta.insert(map<char, string>::value_type('L', \"00100\"));\n\ta.insert(map<char, string>::value_type('M', \"10011001\"));\n\ta.insert(map<char, string>::value_type('N', \"10011110\"));\n\ta.insert(map<char, string>::value_type('O', \"00101\"));\n\ta.insert(map<char, string>::value_type('P', \"111\"));\n\ta.insert(map<char, string>::value_type('Q', \"10011111\"));\n\ta.insert(map<char, string>::value_type('R', \"1000\"));\n\ta.insert(map<char, string>::value_type('S', \"00110\"));\n\ta.insert(map<char, string>::value_type('T', \"00111\"));\n\ta.insert(map<char, string>::value_type('U', \"10011100\"));\n\ta.insert(map<char, string>::value_type('V', \"10011101\"));\n\ta.insert(map<char, string>::value_type('W', \"000010\"));\n\ta.insert(map<char, string>::value_type('X', \"10010010\"));\n\ta.insert(map<char, string>::value_type('Y', \"10010011\"));\n\ta.insert(map<char, string>::value_type('Z', \"10010000\"));\n\tmap<string, char>e;\n\te.insert(map<string, char>::value_type(\"00000\", 'A'));\n\te.insert(map<string, char>::value_type(\"00001\", 'B'));\n\te.insert(map<string, char>::value_type(\"00010\", 'C'));\n\te.insert(map<string, char>::value_type(\"00011\", 'D'));\n\te.insert(map<string, char>::value_type(\"00100\", 'E'));\n\te.insert(map<string, char>::value_type(\"00101\", 'F'));\n\te.insert(map<string, char>::value_type(\"00110\", 'G'));\n\te.insert(map<string, char>::value_type(\"00111\", 'H'));\n\te.insert(map<string, char>::value_type(\"01000\", 'I'));\n\te.insert(map<string, char>::value_type(\"01001\", 'J'));\n\te.insert(map<string, char>::value_type(\"01010\", 'K'));\n\te.insert(map<string, char>::value_type(\"01011\", 'L'));\n\te.insert(map<string, char>::value_type(\"01100\", 'M'));\n\te.insert(map<string, char>::value_type(\"01101\", 'N'));\n\te.insert(map<string, char>::value_type(\"01110\", 'O'));\n\te.insert(map<string, char>::value_type(\"01111\", 'P'));\n\te.insert(map<string, char>::value_type(\"10000\", 'Q'));\n\te.insert(map<string, char>::value_type(\"10001\", 'R'));\n\te.insert(map<string, char>::value_type(\"10010\", 'S'));\n\te.insert(map<string, char>::value_type(\"10011\", 'T'));\n\te.insert(map<string, char>::value_type(\"10100\", 'U'));\n\te.insert(map<string, char>::value_type(\"10101\", 'V'));\n\te.insert(map<string, char>::value_type(\"10110\", 'W'));\n\te.insert(map<string, char>::value_type(\"10111\", 'X'));\n\te.insert(map<string, char>::value_type(\"11000\", 'Y'));\n\te.insert(map<string, char>::value_type(\"11001\", 'Z'));\n\te.insert(map<string, char>::value_type(\"11010\", ' '));\n\te.insert(map<string, char>::value_type(\"11011\", '.'));\n\te.insert(map<string, char>::value_type(\"11100\", ','));\n\te.insert(map<string, char>::value_type(\"11101\", '-'));\n\te.insert(map<string, char>::value_type(\"11110\", b[0]));\n\te.insert(map<string, char>::value_type(\"11111\", '?'));\n\twhile (getline(cin, b)) {\n\t\tint sum = 0;\n\t\tstring d = \"\";\n\t\tfor (int i = 0; i < b.length(); i++) {\n\t\t\td += a[b[i]];\n\t\t}\n\t\tsum++;\n\t\tsum = 0;\n\t\tstring r[1000];\n\t\tfor (int i = 0; i < d.length(); i += 5) {\n\t\t\tstring h = \"\";\n\t\t\tint k = d.length() - 1;\n\t\t\tfor (int j = i; j < min(i + 5, k); j++) {\n\t\t\t\th += d[j];\n\t\t\t}\n\t\t\tr[sum] += h;\n\t\t\twhile ((r[sum].length()) < 5) {\n\t\t\t\tr[sum] += \"0\";\n\t\t\t}\n\t\t\tsum++;\n\t\t}\n\t\td = \"\";\n\t\tfor (int i = 0; i < sum; i++) {\n\t\t\td += e[r[i]];\n\t\t}\n\t\tcout << d << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\n#include<queue>\n#include<map>\n#include<string>\nusing namespace std;\nchar word[]{' ','\\'',',','-','.','?','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\nstring decord[]{\n    \"101\",\n    \"000000\",\n    \"000011\",\n    \"10010001\",\n    \"010001\",\n    \"000001\",\n    \"100101\",\n    \"10011010\",\n    \"0101\",\n    \"0001\",\n    \"110\",\n    \"01001\",\n    \"10011011\",\n    \"010000\",\n    \"0111\",\n    \"10011000\",\n    \"0110\",\n    \"00100\",\n    \"10011001\",\n    \"10011110\",\n    \"00101\",\n    \"111\",\n    \"10011111\",\n    \"1000\",\n    \"00110\",\n    \"00111\",\n    \"10011100\",\n    \"10011101\",\n    \"000010\",\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n};\nstring encord[]{\n    \"00000\",\n    \"00001\",\n    \"00010\",\n    \"00011\",\n    \"00100\",\n    \"00101\",\n    \"00110\",\n    \"00111\",\n    \"01000\",\n    \"01001\",\n    \"01010\",\n    \"01011\",\n    \"01100\",\n    \"01101\",\n    \"01110\",\n    \"01111\",\n    \"10000\",\n    \"10001\",\n    \"10010\",\n    \"10011\",\n    \"10100\",\n    \"10101\",\n    \"10110\",\n    \"10111\",\n    \"11000\",\n    \"11001\",\n    \"11010\",\n    \"11011\",\n    \"11100\",\n    \"11101\",\n    \"11110\",\n    \"11111\"\n};\nstring checkdecord(char moji){\n    string ans;\n    for(int i=0;i<32;i++){\n        if(moji==word[i]){\n            ans=decord[i];\n        }\n    }\n    return ans;\n}\nint main(){\n    map<string,char> maps;\n    int k=5;\n    for(int i=0;i<32;i++){\n        k++;\n        if(k==32)k-=32;\n        maps[encord[i]] = word[k];\n    }\n    queue<char> que;\n    char name[100]={0};\n    string hoge;\n    scanf(\"%[^\\n]\",name);\n    for(int i=0;;i++){\n        if(name[i]=='\\0')break;\n        hoge = checkdecord(name[i]);\n        for(int j=0;;j++){\n            if(hoge[j]=='\\0')break;\n            que.push(hoge[j]);\n        }\n    }\n    string encordword,encordstring;\n    for(int i=0;;i++){\n        if(que.empty())break;\n        for(int j=0;j<5;j++){\n            encordword += que.front();\n            que.pop();\n            if(que.empty()){\n                for(;;){\n                j++;\n                encordword +='0';\n                if(j==4)break;\n                }\n            }\n        }\n        encordstring += maps[encordword];\n        encordword=\"\";\n    }\n    cout<<encordstring<<endl;\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <vector>\n#include <map>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <string>\n#include <sstream>\n#include <algorithm>\n#include <iomanip>\n#include <iostream>\n\n#define rep(i,n) for(int i=0;i<(int)(n);i++)\nconst int INF = 10000000;\n\nusing namespace std;\n/** Problem0088 : The Code A Doctor Loved **/\nint main()\n{\n\tstring s;\n\tmap<string, string> list1, list2;\n\tlist1[\" \"] = \"101\";\t\tlist1[\"'\"] = \"000000\";\n\tlist1[\",\"] = \"000011\";\tlist1[\"-\"] = \"10010001\";\n\tlist1[\".\"] = \"010001\";\tlist1[\"?\"] = \"000001\";\n\tlist1[\"A\"] = \"100101\";\tlist1[\"B\"] = \"10011010\";\n\tlist1[\"C\"] = \"0101\";\tlist1[\"D\"] = \"0001\";\n\tlist1[\"E\"] = \"110\";\t\tlist1[\"F\"] = \"01001\";\n\tlist1[\"G\"] = \"10011011\";list1[\"H\"] = \"010000\";\n\tlist1[\"I\"] = \"0111\";\tlist1[\"J\"] = \"10011000\";\n\tlist1[\"K\"] = \"0110\";\tlist1[\"L\"] = \"00100\";\n\tlist1[\"M\"] = \"10011001\";list1[\"N\"] = \"10011110\";\n\tlist1[\"O\"] = \"00101\";\tlist1[\"P\"] = \"111\";\n\tlist1[\"Q\"] = \"10011111\";list1[\"R\"] = \"1000\";\n\tlist1[\"S\"] = \"00110\";\tlist1[\"T\"] = \"00111\";\n\tlist1[\"U\"] = \"10011100\";list1[\"V\"] = \"10011101\";\n\tlist1[\"W\"] = \"000010\";\tlist1[\"X\"] = \"10010010\";\n\tlist1[\"Y\"] = \"10010011\";list1[\"Z\"] = \"10010000\";\n\t\n\tlist2[\"00000\"] = \"A\";\tlist2[\"00001\"] = \"B\";\n\tlist2[\"00010\"] = \"C\";\tlist2[\"00011\"] = \"D\";\n\tlist2[\"00100\"] = \"E\";\tlist2[\"00101\"] = \"F\";\n\tlist2[\"00110\"] = \"G\";\tlist2[\"00111\"] = \"H\";\n\tlist2[\"01000\"] = \"I\";\tlist2[\"01001\"] = \"J\";\n\tlist2[\"01010\"] = \"K\";\tlist2[\"01011\"] = \"L\";\n\tlist2[\"01100\"] = \"M\";\tlist2[\"01101\"] = \"N\";\n\tlist2[\"01110\"] = \"O\";\tlist2[\"01111\"] = \"P\";\n\tlist2[\"10000\"] = \"Q\";\tlist2[\"10001\"] = \"R\";\n\tlist2[\"10010\"] = \"S\";\tlist2[\"10011\"] = \"T\";\n\tlist2[\"10100\"] = \"U\";\tlist2[\"10101\"] = \"V\";\n\tlist2[\"10110\"] = \"W\";\tlist2[\"10111\"] = \"X\";\n\tlist2[\"11000\"] = \"Y\";\tlist2[\"11001\"] = \"Z\";\n\tlist2[\"11010\"] = \" \";\tlist2[\"11011\"] = \".\";\n\tlist2[\"11100\"] = \",\";\tlist2[\"11101\"] = \"-\";\n\tlist2[\"11110\"] = \"'\";\tlist2[\"11111\"] = \"?\";\n\n\n\t\n\twhile (1) {\n\t\tgetline(cin, s);\n\t\tif (cin.eof()) break;\n\t\t\n\t\tstring code, sc, tmp, ans;\n\t\trep(i, s.length()) {\n\t\t\tsc = s[i];\n\t\t\tcode+=list1[sc];\n\t\t}\n\t\t\n\t\tint i=0; tmp=\"00000\";\n\t\twhile (code.length()>i) {\n\t\t\ttmp[i%5] = code[i];\n\t\t\tif (i%5==4 || code.length()-1==i) {\n\t\t\t\tans+=list2[tmp];\n\t\t\t\ttmp=\"00000\";\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<map>\n#include<string>\n#include<cstdio>\nusing namespace std;\n\nmap<char, string> dict;\nmap<string, char> tcid;\nvoid init(){\n    dict[' '] = \"101\";\n    dict['\\''] = \"000000\";\n    dict[','] = \"000011\";\n    dict['-'] = \"10010001\";\n    dict['.'] = \"010001\";\n    dict['?'] = \"000001\";\n    dict['A'] = \"100101\";\n    dict['B'] = \"10011010\";\n    dict['C'] = \"0101\";\n    dict['D'] = \"0001\";\n    dict['E'] = \"110\";\n    dict['F'] = \"01001\";\n    dict['G'] = \"10011011\";\n    dict['H'] = \"010000\";\n    dict['I'] = \"0111\";\n    dict['J'] = \"10011000\";\n    dict['K'] = \"0110\";\n    dict['L'] = \"00100\";\n    dict['M'] = \"10011001\";\n    dict['N'] = \"10011110\";\n    dict['O'] = \"00101\";\n    dict['P'] = \"111\";\n    dict['Q'] = \"10011111\";\n    dict['R'] = \"1000\";\n    dict['S'] = \"00110\";\n    dict['T'] = \"00111\";\n    dict['U'] = \"10011100\";\n    dict['V'] = \"10011101\";\n    dict['W'] = \"000010\";\n    dict['X'] = \"10010010\";\n    dict['Y'] = \"10010011\";\n    dict['Z'] = \"10010000\";\n    tcid[\"00000\"] ='A';\n    tcid[\"00001\"] ='B';\n    tcid[\"00010\"] ='C';\n    tcid[\"00011\"] ='D';\n    tcid[\"00100\"] ='E';\n    tcid[\"00101\"] ='F';\n    tcid[\"00110\"] ='G';\n    tcid[\"00111\"] ='H';\n    tcid[\"01000\"] ='I';\n    tcid[\"01001\"] ='J';\n    tcid[\"01010\"] ='K';\n    tcid[\"01011\"] ='L';\n    tcid[\"01100\"] ='M';\n    tcid[\"01101\"] ='N';\n    tcid[\"01110\"] ='O';\n    tcid[\"01111\"] ='P';\n    tcid[\"10000\"] ='Q';\n    tcid[\"10001\"] ='R';\n    tcid[\"10010\"] ='S';\n    tcid[\"10011\"] ='T';\n    tcid[\"10100\"] ='U';\n    tcid[\"10101\"] ='V';\n    tcid[\"10110\"] ='W';\n    tcid[\"10111\"] ='X';\n    tcid[\"11000\"] ='Y';\n    tcid[\"11001\"] ='Z';\n    tcid[\"11010\"] =' ';\n    tcid[\"11011\"] ='.';\n    tcid[\"11100\"] =',';\n    tcid[\"11101\"] ='-';\n    tcid[\"11110\"] ='\\'';\n    tcid[\"11111\"] ='?';\n}\n\nstring solve(string a){\n    string tmp = \"\";\n    string res = \"\";\n    if(a == \"\")return a;\n    for(int i = 0;i < a.size();i++){\n\ttmp += dict[a[i]];\n    }\n    while(tmp.size()%5)tmp+=\"0\";\n    for(int i = 0;i < tmp.size();i += 5){\n\tstring x = \"\";\n\tfor(int j = 0;j < 5;j++){\n\t    x += tmp[i + j];\n\t}\n\tres += tcid[x];\n    }\n    return res;\n}\nbool fin = false;\nstring get_line(){\n    string res = \"\";\n    while(true){\n\tchar t = getchar();\n\tif(t == '\\n' || t == EOF){\n\t    if(t == EOF)fin = true;\n\t    break;\n\t}\n\tres += t;\n    }\n    return res;\n}\n\nint main(){\n    init();\n    while(!fin){\n\tstring res = solve(get_line());\n\tif(res != \"\")cout << res << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<string>\n#include<cmath>\n\nusing namespace std;\n\nstring DoctorTableAD(char c){\n\tstring s;\n\tconst char ctable[] = \" ',-.\\?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tconst char table[][32] = {\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\t\n\tfor(int i = 0; i < sizeof(ctable)/sizeof(*ctable); i++){\n\t\tif(ctable[i] == c){\n\t\t\ts = table[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn s;\n}\nint myatoi(string &bin_s){\n\tint ret = 0;\n\tunsigned int i = 0;\n\twhile( i < bin_s.length() ){\n\t\tret += (int)((bin_s[i] - '0') * pow(2.0, (double)((bin_s.length() - 1) - i)));\n\t\ti++;\n\t}\n\treturn ret;\n}\nchar DoctorTableDA(string &s){\n\tint d = myatoi(s);\n\tchar ac[] = \" .,-'?\";\n\n\tfor(int i = 0; i < 'Z' - 'A' + 1; i++) if(d == i) return i + 'A';\n\tfor(int i = 0; i < sizeof(ac)/sizeof(*ac); i++) if(i + 26 == d) return ac[i];\n\treturn ' ';\n}\nstring DoctorLovedEncode(string &raw){\n\tstring s;\n\tstring ret;\n\tfor(unsigned int i = 0; i < raw.length(); i++){\n\t\ts += DoctorTableAD(raw[i]);\n\t}\n\t// padding\n\twhile( s.length() % 5 != 0 ) s += '0';\n\n\tfor(unsigned int i = 0; i < s.length() / 5; i++){\n\t\tstring subs = s.substr(i*5,5);\n\t\tret += DoctorTableDA( subs );\n\t}\n\treturn ret;\n}\n\nint main(void){\n\twhile(true){\n\t\tstring s;\n\n\t\twhile( true ){\n\t\t\tchar c;\n\t\t\tc = cin.get();\n\t\t\tif( cin.eof() ) return 0;\n\t\t\tif( c == '\\n') break;\n\t\t\telse s += c;\n\t\t}\n\n\t\tcout << DoctorLovedEncode( s ) << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdio>\nusing namespace std;\nint main(){\n  string str,cnt;\n  string code[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n  string alph=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string code2[]={\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"};\n  string alph2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  string ans,hm;\n  getline(cin,str);\n  for(int i=0,l=str.size();i<l;i++){\n    for(int j=0;;j++){\n      if(str[i]==alph[j]){\n\tcnt += code[j];\n\tbreak;\n      }\n    }\n  }\n  for(int i=0,l=5-cnt.size()%5;i<l;i++)cnt += \"0\";\n  for(int i=0,l=cnt.size();i<l/5;i++){\n    hm=cnt.substr(i*5,5);\n    for(int j=0;;j++){\n      if(hm==code2[j]){\n\tans += alph2[j];\n\tbreak;\n      }\n    }\n  }\n  cout << ans << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<algorithm>\n#include<map>\n#include<set>\n#include<utility>\n#include<vector>\n#include<cmath>\n#include<cstring>\n#include<cstdio>\n#include<time.h>\n#define loop(i,a,b) for(int i=a;i<b;i++) \n#define rep(i,a) loop(i,0,a)\n#define pb push_back\n#define mp make_pair\n#define all(in) in.begin(),in.end()\nconst double PI=acos(-1);\nconst double EPS=1e-10;\nconst int inf=1e8;\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\nint n;\nint main(){\n\tmap<char,string>in;\n\tin[' ']=\"101\";\n\tin['\\'']=\"000000\";\n\tin[',']=\"000011\";\n\tin['-']=\"10010001\";\n\tin['.']=\"010001\";\n\tin['?']=\"000001\";\n\tin['A']=\"100101\";\n\tin['B']=\"10011010\";\n\tin['C']=\"0101\";\n\tin['D']=\"0001\";\n\tin['E']=\"110\";\n\tin['F']=\"01001\";\n\tin['G']=\"10011011\";\n\tin['H']=\"010000\";\n\tin['I']=\"0111\";\n\tin['J']=\"10011000\";\n\tin['K']=\"0110\";\n\tin['L']=\"00100\";\n\tin['M']=\"10011001\";\n\tin['N']=\"10011110\";\n\tin['O']=\"00101\";\n\tin['P']=\"111\";\n\tin['Q']=\"10011111\";\n\tin['R']=\"1000\";\n\tin['S']=\"00110\";\n\tin['T']=\"00111\";\n\tin['U']=\"10011100\";\n\tin['V']=\"10011101\";\n\tin['W']=\"00010\";\n\tin['X']=\"10010010\";\n\tin['Y']=\"10010011\";\n\tin['Z']=\"10010000\";\n\tmap<string,char>out;\n\tout[\"00000\"]='A';\n\tout[\"00001\"]='B';\n\tout[\"00010\"]='C';\n\tout[\"00011\"]='D';\n\tout[\"00100\"]='E';\n\tout[\"00101\"]='F';\n\tout[\"00110\"]='G';\n\tout[\"00111\"]='H';\n\tout[\"01000\"]='I';\n\tout[\"01001\"]='J';\n\tout[\"01010\"]='K';\n\tout[\"01011\"]='L';\n\tout[\"01100\"]='M';\n\tout[\"01101\"]='N';\n\tout[\"01110\"]='O';\n\tout[\"01111\"]='P';\n\tout[\"10000\"]='Q';\n\tout[\"10001\"]='R';\n\tout[\"10010\"]='S';\n\tout[\"10011\"]='T';\n\tout[\"10100\"]='U';\n\tout[\"10101\"]='V';\n\tout[\"10110\"]='W';\n\tout[\"10111\"]='X';\n\tout[\"11000\"]='Y';\n\tout[\"11001\"]='Z';\n\tout[\"11010\"]=' ';\n\tout[\"11011\"]='.';\n\tout[\"11100\"]=',';\n\tout[\"11101\"]='-';\n\tout[\"11110\"]='\\'';\n\tout[\"11111\"]='?';\n\tstring s;\n\twhile(getline(cin,s)){\n\t\tstring a=\"\";\n\t\trep(i,s.size())a+=in[s[i]];\n\t\twhile(a.size()%5)a+='0';\n\t\trep(i,a.size()/5)cout<<out[a.substr(i*5,5)];\n\t\tcout<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<cstdio>\n#include<iostream>\n#include<queue>\n#include<map>\n#include<string>\nusing namespace std;\nchar word[]{' ','\\'',',','-','.','?','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\nchar words[]{' ','.',',','-','\\'','?'};\nstring decord[]{\n    \"101\",\n    \"000000\",\n    \"000011\",\n    \"10010001\",\n    \"010001\",\n    \"000001\",\n    \"100101\",\n    \"10011010\",\n    \"0101\",\n    \"0001\",\n    \"110\",\n    \"01001\",\n    \"10011011\",\n    \"010000\",\n    \"0111\",\n    \"10011000\",\n    \"0110\",\n    \"00100\",\n    \"10011001\",\n    \"10011110\",\n    \"00101\",\n    \"111\",\n    \"10011111\",\n    \"1000\",\n    \"00110\",\n    \"00111\",\n    \"10011100\",\n    \"10011101\",\n    \"000010\",\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n};\nstring encord[]{\n    \"00000\",\n    \"00001\",\n    \"00010\",\n    \"00011\",\n    \"00100\",\n    \"00101\",\n    \"00110\",\n    \"00111\",\n    \"01000\",\n    \"01001\",\n    \"01010\",\n    \"01011\",\n    \"01100\",\n    \"01101\",\n    \"01110\",\n    \"01111\",\n    \"10000\",\n    \"10001\",\n    \"10010\",\n    \"10011\",\n    \"10100\",\n    \"10101\",\n    \"10110\",\n    \"10111\",\n    \"11000\",\n    \"11001\",\n    \"11010\",\n    \"11011\",\n    \"11100\",\n    \"11101\",\n    \"11110\",\n    \"11111\"\n};\nstring checkdecord(char moji){\n    string ans;\n    for(int i=0;i<32;i++){\n        if(moji==word[i]){\n            ans=decord[i];\n        }\n    }\n    return ans;\n}\nint main(){\n    map<string,char> maps;\n    int k=5;\n    int l;\n    for(int i=0;i<32;i++){\n        k++;\n        if(k>=32){\n            l=k-32;\n            maps[encord[i]] = words[l];\n        }else{\n            maps[encord[i]] = word[k];\n        }\n    }\n    queue<char> que;\n    char name[100]={0};\n    string hoge;\n    scanf(\"%[^\\n]\",name);\n    for(int i=0;;i++){\n        if(name[i]=='\\0')break;\n        hoge = checkdecord(name[i]);\n        for(int j=0;;j++){\n            if(hoge[j]=='\\0')break;\n            que.push(hoge[j]);\n        }\n    }\n    string encordword,encordstring;\n    for(int i=0;;i++){\n        if(que.empty())break;\n        for(int j=0;j<5;j++){\n            encordword += que.front();\n            que.pop();\n            if(que.empty()){\n                for(;;){\n                j++;\n                encordword +='0';\n                if(j==4)break;\n                }\n            }\n        }\n        encordstring += maps[encordword];\n        encordword=\"\";\n    }\n    cout<<encordstring<<endl;\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n#define PB push_back\n#define MP make_pair\n#define REP(i,n) for (int i=0;i<(n);i++)\n#define ALL(a) (a).begin(),(a).end()\n#define INF 1000000001\n#define MOD 10000\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> P;\nconst ull B=100000007;\nstring angou[26]={\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\nint to_i(string s){\n      int res=0,k=1;\n      for(int i=4;i>=0;i--){\n            if(s[i]=='1')res+=k;\n            k*=2;\n      }\n      return res;\n}\nstring to(char c){\n      if(c==' ')return \"101\";\n      if(c=='\\'')return \"000000\";\n      if(c=='-')return \"10010001\";\n      if(c=='.')return \"010001\";\n      if(c=='?')return \"000001\";\n      return angou[c-'A'];\n}\nchar from(string a){\n      int aa=to_i(a);\n      if(0<=aa&&aa<=25)return 'A'+aa;\n      if(aa==26)return ' ';\n      if(aa==27)return '.';\n      if(aa==28)return ',';\n      if(aa==29)return '-';\n      if(aa==30)return '\\'';\n      return '?';\n}\nint main(){\n      string s;\n      getline(cin,s);\n      string t=\"\";\n      REP(i,s.size())t+=to(s[i]);\n      while(t.size()%5!=0)t+='0';\n      s=\"\";\n      cout<<t<<endl;\n      for(int i=0;i<t.size();i+=5){\n            string a;a.assign(t,i,5);\n            s+=from(a);\n      }\n      cout<<s<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<map>\n#include<string>\n#include<cstdio>\nusing namespace std;\n\nmap<char, string> dict;\nmap<string, char> tcid;\nvoid init(){\n    dict[' '] = \"101\";\n    dict['\\''] = \"000000\";\n    dict[','] = \"000011\";\n    dict['-'] = \"10010001\";\n    dict['.'] = \"010001\";\n    dict['?'] = \"000001\";\n    dict['A'] = \"100101\";\n    dict['B'] = \"10011010\";\n    dict['C'] = \"0101\";\n    dict['D'] = \"0001\";\n    dict['E'] = \"110\";\n    dict['F'] = \"01001\";\n    dict['G'] = \"10011011\";\n    dict['H'] = \"010000\";\n    dict['I'] = \"0111\";\n    dict['J'] = \"10011000\";\n    dict['K'] = \"0110\";\n    dict['L'] = \"00100\";\n    dict['M'] = \"10011001\";\n    dict['N'] = \"10011110\";\n    dict['O'] = \"00101\";\n    dict['P'] = \"111\";\n    dict['Q'] = \"10011111\";\n    dict['R'] = \"1000\";\n    dict['S'] = \"00110\";\n    dict['T'] = \"00111\";\n    dict['U'] = \"10011100\";\n    dict['V'] = \"10011101\";\n    dict['W'] = \"000010\";\n    dict['X'] = \"10010010\";\n    dict['Y'] = \"10010011\";\n    dict['Z'] = \"10010000\";\n    tcid[\"00000\"] ='A';\n    tcid[\"00001\"] ='B';\n    tcid[\"00010\"] ='C';\n    tcid[\"00011\"] ='D';\n    tcid[\"00100\"] ='E';\n    tcid[\"00101\"] ='F';\n    tcid[\"00110\"] ='G';\n    tcid[\"00111\"] ='H';\n    tcid[\"01000\"] ='I';\n    tcid[\"01001\"] ='J';\n    tcid[\"01010\"] ='K';\n    tcid[\"01011\"] ='L';\n    tcid[\"01100\"] ='M';\n    tcid[\"01101\"] ='N';\n    tcid[\"01110\"] ='O';\n    tcid[\"01111\"] ='P';\n    tcid[\"10000\"] ='Q';\n    tcid[\"10001\"] ='R';\n    tcid[\"10010\"] ='S';\n    tcid[\"10011\"] ='T';\n    tcid[\"10100\"] ='U';\n    tcid[\"10101\"] ='V';\n    tcid[\"10110\"] ='W';\n    tcid[\"10111\"] ='X';\n    tcid[\"11000\"] ='Y';\n    tcid[\"11001\"] ='Z';\n    tcid[\"11010\"] =' ';\n    tcid[\"11011\"] ='.';\n    tcid[\"11100\"] =',';\n    tcid[\"11101\"] ='-';\n    tcid[\"11110\"] ='\\'';\n    tcid[\"11111\"] ='?';\n}\n\nstring solve(string a){\n    string tmp = \"\";\n    string res = \"\";\n    for(int i = 0;i < a.size();i++){\n\ttmp += dict[a[i]];\n    }\n    while(tmp.size()%5)tmp+=\"0\";\n    for(int i = 0;i < tmp.size();i += 5){\n\tstring x = \"\";\n\tfor(int j = 0;j < 5;j++){\n\t    x += tmp[i + j];\n\t}\n\tres += tcid[x];\n    }\n    return res;\n}\nbool fin = false;\nstring get_line(){\n    string res = \"\";\n    while(true){\n\tchar t = getchar();\n\tif(t == '\\n' || t == EOF){\n\t    if(t == EOF)fin = true;\n\t    break;\n\t}\n\tres += t;\n    }\n    return res;\n}\n\nint main(){\n    init();\n    while(!fin){\n\tcout << solve(get_line()) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS 1\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cstdlib>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <iomanip>\n#include <queue>\n#include <sstream>\n#include <climits>\n#include <cmath>\n#include <list>\n#include <functional>\n#include <map>\n#include <stack>\nusing namespace std;\n#define M_PI 3.141592\n#define FOR(i,n) for(int i=0;i<(int)n;i++)\n#define FORI(i,k,n) for(int i=k;i<(int)n;i++)\n#define toRad 2.0*M_PI/360.0\n#define inin(x) int x;cin>>x;\n#define all(x) x.begin(),x.end()\n#define debug(x) cout<<#x<<\" :\"<<x<<endl;\n#define rep(i,n) for(int i=0;i<(int)n;i++)\n#define EPS 1e-12\n#define pri_max 60000\ntypedef pair<int, int> pii;\ntypedef pair<double, double> pdd;\nint dx[4] = { 0,1,0,-1 };\nint dy[4] = { 1,0,-1,0 };\n\n/* \nbool memo[pri_max] = {};\nvector<int> pri;\nvoid calc()\n{\n\tfor (int i = 2; i < pri_max; i++)\n\t{\n\t\tif (memo[i] == false)\n\t\t{\n\t\t\tpri.push_back(i);\n\t\t\tfor (int l = i; l < pri_max; l += i)\n\t\t\t{\n\t\t\t\tmemo[l] = true;\n\t\t\t}\n\t\t}\n\t}\n}*/\ndouble len(pdd a, pdd b)\n{\n\treturn sqrt((b.first - a.first)*(b.first - a.first) + (b.second - a.second)*(b.second - a.second));\n}\n\nstring en[] =\n{\n\" 101\",\n\"'000000\",\n\",000011\",\n\"-10010001\",\n\".010001\",\n\"?000001\",\n\"A100101\",\n\"B10011010\",\n\"C0101\",\n\"D0001\",\n\"E110\",\n\"F01001\",\n\"G10011011\",\n\"H010000\",\n\"I0111\",\n\"J10011000\",\n\"K0110\",\n\"L00100\",\n\"M10011001\",\n\"N10011110\",\n\"O00101\",\n\"P111\",\n\"Q10011111\",\n\"R1000\",\n\"S00110\",\n\"T00111\",\n\"U10011100\",\n\"V10011101\",\n\"W000010\",\n\"X10010010\",\n\"Y10010011\",\n\"Z10010000\"\n};\nstring de = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nint todec(string x)\n{\n\treverse(all(x));\n\tint ans = 0;\n\tfor (int i = 0; i < x.size(); i++)\n\t{\n\t\tans += (x[i] - '0')*pow(2, i);\n\t}\n\treturn ans;\n}\n\nint main()\n{\n\tstring s;\n\twhile (getline(cin, s))\n\t{\n\t\tstring a, b;\n\t\tfor (int l = 0; l < s.size(); l++)\n\t\t{\n\t\t\tfor (int i = 0; i < 32; i++)\n\t\t\t{\n\t\t\t\tif (s[l] == en[i][0])\n\t\t\t\t{\n\t\t\t\t\ta += en[i].substr(1, en[i].size() - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tFOR(i, a.size() % 5)a += \"0\";\n\t\tfor (int i = 0; i < a.size() / 5; i++)\n\t\t{\n\t\t\tb+=de[todec(a.substr(i * 5, 5))];\n\t\t}\n\t\tcout << b << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <bitset>\n#include <cmath>\nusing namespace std;\n\nstring a[128];\n\nvoid init() {a[' ']=\"101\";    a['\\'']=\"000000\";    a[',']=\"000011\";    a['-']=\"10010001\";    a['.']=\"010001\";    a['?']=\"000001\";    a['A']=\"100101\";    a['B']=\"10011010\";    a['C']=\"0101\";    a['D']=\"0001\";    a['E']=\"110\";    a['F']=\"01001\";    a['G']=\"10011011\";    a['H']=\"010000\";    a['I']=\"0111\";    a['J']=\"10011000\";    a['K']=\"0110\";    a['L']=\"00100\";    a['M']=\"10011001\";    a['N']=\"10011110\";    a['O']=\"00101\";    a['P']=\"111\";    a['Q']=\"10011111\";    a['R']=\"1000\";    a['S']=\"00110\";    a['T']=\"00111\";    a['U']=\"10011100\";    a['V']=\"10011101\";    a['W']=\"000010\";    a['X']=\"10010010\";    a['Y']=\"10010011\";    a['Z']=\"10010000\";}\n\nint main() {\n  init();\n  \n  string s;\n  stringstream ss;\n  \n  getline(cin, s);\n  \n  for(int i=0; i<s.size(); i++) ss << a[s[i]];\n\n  string str = ss.str();\n\n  while( str.size()%5 ) str += '0';\n  \n  for(int i=0; i<str.size(); i+=5) {\n    int b = bitset<5>(str.substr(i,5)).to_ulong();\n    if( b <= 25 ) cout << (char)(b+'A');\n    else if( b == 26 ) cout << ' ';\n    else if( b == 27 ) cout << '.';\n    else if( b == 28 ) cout << ',';\n    else if( b == 29 ) cout << '-';\n    else if( b == 30 ) cout << '\\'';\n    else cout << '?';\n  }\n  \n  cout << endl;\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\n#include<algorithm>\n\nusing namespace std;\n\nvoid MakeFirstList(map<char, string>&);\nvoid MakeSecondList(map<string, char>&);\n\nint main(){\n  int i;\n  string s, t, r, u;\n  map<char, string> first;\n  map<string, char> second;\n\n  MakeFirstList(first);\n  MakeSecondList(second);\n\n  while(getline(cin, s)){\n    for(i=0; i<s.size(); ++i)\n      copy(first[s[i]].begin(), first[s[i]].end(), back_inserter(t));\n    const string zero(5-t.size()%5, '0');\n    copy(zero.begin(), zero.end(), back_inserter(t));\n\n    string::iterator iter = t.begin();\n    while(iter != t.end()){\n      copy(iter, iter+5, back_inserter(r));\n      u.insert(u.end(), second[r]);\n      r.clear();\n      iter += 5;\n    }\n\n    cout << u << endl;\n\n    s.clear();\n    t.clear();\n    r.clear();\n    u.clear();\n  }\n\n  return 0;\n}\n\nvoid MakeFirstList(map<char, string>& s){\n  s[' '] = \"101\";\n  s['\\''] = \"000000\";\n  s[','] = \"000011\";\n  s['_'] = \"10010001\";\n  s['.'] = \"010001\";\n  s['?'] = \"000001\";\n  s['A'] = \"100101\";\n  s['B'] = \"10011010\";\n  s['C'] = \"0101\";\n  s['D'] = \"0001\";\n  s['E'] = \"110\";\n  s['F'] = \"01001\";\n  s['G'] = \"10011011\";\n  s['H'] = \"010000\";\n  s['I'] = \"0111\";\n  s['J'] = \"10011000\";\n  s['K'] = \"0110\";\n  s['L'] = \"00100\";\n  s['M'] = \"10011001\";\n  s['N'] = \"10011110\";\n  s['O'] = \"00101\";\n  s['P'] = \"111\";\n  s['Q'] = \"10011111\";\n  s['R'] = \"1000\";\n  s['S'] = \"00110\";\n  s['T'] = \"00111\";\n  s['U'] = \"10011100\";\n  s['V'] = \"10011101\";\n  s['W'] = \"000010\";\n  s['X'] = \"10010010\";\n  s['Y'] = \"10010011\";\n  s['Z'] = \"10010000\";\n}\n\nvoid MakeSecondList(map<string, char>& s){\n  s[\"00000\"] = 'A';\n  s[\"00001\"] = 'B';\n  s[\"00010\"] = 'C';\n  s[\"00011\"] = 'D';\n  s[\"00100\"] = 'E';\n  s[\"00101\"] = 'F';\n  s[\"00110\"] = 'G';\n  s[\"00111\"] = 'H';\n  s[\"01000\"] = 'I';\n  s[\"01001\"] = 'J';\n  s[\"01010\"] = 'K';\n  s[\"01011\"] = 'L';\n  s[\"01100\"] = 'M';\n  s[\"01101\"] = 'N';\n  s[\"01110\"] = 'O';\n  s[\"01111\"] = 'P';\n  s[\"10000\"] = 'Q';\n  s[\"10001\"] = 'R';\n  s[\"10010\"] = 'S';\n  s[\"10011\"] = 'T';\n  s[\"10100\"] = 'U';\n  s[\"10101\"] = 'V';\n  s[\"10110\"] = 'W';\n  s[\"10111\"] = 'X';\n  s[\"11000\"] = 'Y';\n  s[\"11001\"] = 'Z';\n  s[\"11010\"] = ' ';\n  s[\"11011\"] = '.';\n  s[\"11100\"] = ',';\n  s[\"11101\"] = '_';\n  s[\"11110\"] = '\\'';\n  s[\"11111\"] = '?';\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n\nusing namespace std;\n\n#define loop(i,a,b) for(int i=(a); i<(int)(b); i++)\n#define rep(i,b) loop(i,0,b)\n\ntypedef vector<string> vs;\n\nconst string s1 = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst string s2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nvs CODE1{\n    \"101\",\n    \"000000\",\n    \"000011\",\n    \"10010001\",\n    \"010001\",\n    \"000001\",\n    \"100101\",\n    \"10011010\",\n    \"0101\",\n    \"0001\",\n    \"110\",\n    \"01001\",\n    \"10011011\",\n    \"010000\",\n    \"0111\",\n    \"10011000\",\n    \"0110\",\n    \"00100\",\n    \"10011001\",\n    \"10011110\",\n    \"00101\",\n    \"111\",\n    \"10011111\",\n    \"1000\",\n    \"00110\",\n    \"00111\",\n    \"10011100\",\n    \"10011101\",\n    \"000010\",\n    \"10010010\",\n    \"10010011\",\n    \"10010000\",\n};\n\nint main() {\n    map<char,string> dic;\n    rep(i,32){\n        dic[s1[i]] = CODE1[i];\n    }\n\n    string l;\n    while(getline(cin, l)) {\n        string code;\n        rep(i,l.size()){\n            code += dic[l[i]];\n        }\n        code += string((5-code.size()%5)%5,'0');\n\n        string res;\n        rep(i,code.size()){\n            string num = code.substr(i, 5);\n            int val = 0;\n            rep(j,5){\n                val<<=1;\n                val+=num[j]-'0';\n            }\n            res += s2[val];\n            i+=4;\n        }\n        cout << res << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\nmap<string,string> board;\nmap<string,string> word;\n \nvoid config(){\n  string w = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  string s = \"00000\";\n  string h[] = {\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\n\t\t\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\n\t\t\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n\t\t\"00110\",\"00111\",\"10011100\",\"10011101\",\n\t\t\"000010\",\"10010010\",\"10010011\",\"10010000\",\n\t\t\"101\",\"010001\",\"000011\",\"10010001\",\"000000\",\"000001\"};\n  for(int i=0;i<w.size();i++){\n    string tmp = \"\";\n    tmp += w[i];\n    board[s] = tmp;\n    word[tmp] = h[i];\n    /*\n      cout << tmp << \" \" << s << endl;\n      cout << h[i] << \" \" << w[i] << endl << endl;\n    */\n    if(s[4] == '0') s[4] = '1';\n    else {\n      for(int j=4;j>=0;j--){\n\tif(s[j] == '0'){\n\t  s[j] = '1';\n\t  break;\n\t}\n\telse s[j] = '0';\n      }\n    }\n  }\n}\n\nint main(){\n  config();\n  string str;\n  while(getline(cin,str)){\n    string next = \"\";\n    for(int i=0;i<str.size();i++){\n      string tmp = \"\";\n      tmp += str[i];\n      next += word[tmp];\n    }\n    while(next.size() % 5){\n      next += \"0\";\n    }\n    string ans = \"\";\n    string now = \"\";\n    for(int i=0;i<next.size();i++){\n      now += next[i];\n      if(now.size() == 5){\n\tans += board[now];\n\tnow = \"\";\n      }\n    }\n    cout << ans << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <bitset>\n#include <cmath>\nusing namespace std;\n\nstring a[128];\n\nvoid init() {a[' ']=\"101\";    a['\\'']=\"000000\";    a[',']=\"000011\";    a['-']=\"10010001\";    a['.']=\"010001\";    a['?']=\"000001\";    a['A']=\"100101\";    a['B']=\"10011010\";    a['C']=\"0101\";    a['D']=\"0001\";    a['E']=\"110\";    a['F']=\"01001\";    a['G']=\"10011011\";    a['H']=\"010000\";    a['I']=\"0111\";    a['J']=\"10011000\";    a['K']=\"0110\";    a['L']=\"00100\";    a['M']=\"10011001\";    a['N']=\"10011110\";    a['O']=\"00101\";    a['P']=\"111\";    a['Q']=\"10011111\";    a['R']=\"1000\";    a['S']=\"00110\";    a['T']=\"00111\";    a['U']=\"10011100\";    a['V']=\"10011101\";    a['W']=\"000010\";    a['X']=\"10010010\";    a['Y']=\"10010011\";    a['Z']=\"10010000\";}\n\nint main() {\n  init();\n  \n  string s;\n  while( getline(cin, s) ) {\n    stringstream ss;\n    \n    for(int i=0; i<s.size(); i++) ss << a[s[i]];\n    \n    string str = ss.str();\n    \n    while( str.size()%5 ) str += '0';\n    \n    for(int i=0; i<str.size(); i+=5) {\n      int b = bitset<5>(str.substr(i,5)).to_ulong();\n      if( b <= 25 ) cout << (char)(b+'A');\n      else if( b == 26 ) cout << ' ';\n      else if( b == 27 ) cout << '.';\n      else if( b == 28 ) cout << ',';\n      else if( b == 29 ) cout << '-';\n      else if( b == 30 ) cout << '\\'';\n      else cout << '?';\n    }\n    \n    cout << endl;\n  }\n  \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <cstdio>\nusing namespace std;\nint main(){\n  string str,cnt;\n  string code[32]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n  string alph=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string code2[32]={\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"};\n  string alph2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  string ans,hm;\n  while(getline(cin,str)){\n    cnt=\"\",ans=\"\";\n    for(int i=0,l=str.size();i<l;i++){\n      for(int j=0;;j++){\n\tif(str[i]==alph[j]){\n\t  cnt += code[j];\n\t  break;\n\t}\n      }\n    }\n    cnt += \"0000\";\n    for(int i=0,l=cnt.size();i+5<=l;i+=5){\n      hm=cnt.substr(i,5);\n      for(int j=0;;j++){\n\tif(hm==code2[j]){\n\t  ans += alph2[j];\n\t  break;\n\t}\n      }\n    }\n    cout << ans << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <sstream>\n#include <string>\n\nusing namespace std;\n\nmap<char, string> dict1{\n    {' ', \"101\"},      {'\\'', \"000000\"},  {',', \"000011\"},   {'-', \"10010001\"},\n    {'.', \"010001\"},   {'?', \"000001\"},   {'A', \"100101\"},   {'B', \"10011010\"},\n    {'C', \"0101\"},     {'D', \"0001\"},     {'E', \"110\"},      {'F', \"01001\"},\n    {'G', \"10011011\"}, {'H', \"010000\"},   {'I', \"0111\"},     {'J', \"10011000\"},\n    {'K', \"0110\"},     {'L', \"00100\"},    {'M', \"10011001\"}, {'N', \"10011110\"},\n    {'O', \"00101\"},    {'P', \"111\"},      {'Q', \"10011111\"}, {'R', \"1000\"},\n    {'S', \"00110\"},    {'T', \"00111\"},    {'U', \"10011100\"}, {'V', \"10011101\"},\n    {'W', \"000010\"},   {'X', \"10010010\"}, {'Y', \"10010011\"}, {'Z', \"10010000\"},\n};\n\nmap<string, char> dict2{\n    {\"00000\", 'A'}, {\"00001\", 'B'}, {\"00010\", 'C'},  {\"00011\", 'D'},\n    {\"00100\", 'E'}, {\"00101\", 'F'}, {\"00110\", 'G'},  {\"00111\", 'H'},\n    {\"01000\", 'I'}, {\"01001\", 'J'}, {\"01010\", 'K'},  {\"01011\", 'L'},\n    {\"01100\", 'M'}, {\"01101\", 'N'}, {\"01110\", 'O'},  {\"01111\", 'P'},\n    {\"10000\", 'Q'}, {\"10001\", 'R'}, {\"10010\", 'S'},  {\"10011\", 'T'},\n    {\"10100\", 'U'}, {\"10101\", 'V'}, {\"10110\", 'W'},  {\"10111\", 'X'},\n    {\"11000\", 'Y'}, {\"11001\", 'Z'}, {\"11010\", ' '},  {\"11011\", '.'},\n    {\"11100\", ','}, {\"11101\", '-'}, {\"11110\", '\\''}, {\"11111\", '?'},\n};\n\nint main() {\n\n  string str;\n  while (getline(cin, str)) {\n    string str2 = \"\";\n    for (char c : str)\n      str2 += dict1[c];\n\n    str2 += \"0000\";\n    str2.erase(str2.begin() + int(str2.length() / 5) * 5, str2.end());\n\n    for (int i = 0; i < str2.length(); i += 5)\n      cout << dict2[str2.substr(i, 5)];\n    cout << endl;\n  }\n}\n"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <algorithm>\n#include <vector>\n#include <utility>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n \nusing namespace std;\n \n#define pb(n)\tpush_back(n)\n#define mp(n,m) make_pair(n,m)\n#define fi \tfirst\n#define se \tsecond\n#define all(r) (r).begin(),(r).end()\n\n#define rep(i,n) for(int i=0; i<(n); i++)\n#define repc(i,a,b) for(int i=(a); i<(b); i++)\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef pair<int,int> pii;\ntypedef pair<ll,ll> pll;\n \nconst int IMAX=((1<<30)-1)*2+1;\nconst double EPS=1e-10;\n//int mod=1000000007\n\n\n\nstring s;\n\nint main(){\n\tfor(int i=0; i<32; i++){\n\t\tif(i<26)s+=('A'+i);\n\t\tif(i==26)s+=(' ');\n\t\tif(i==27)s+='.';\n\t\tif(i==28)s+=',';\n\t\tif(i==29)s+='-';\n\t\tif(i==30)s+='\\'';\n\t\tif(i==31)s+='?';\n\t}\n\tmap<char,string> m;\n\tm[' ']=\"101\";\n\tm['\\'']=\"000000\";\n\tm[',']=\"000011\";\n\tm['-']=\"10010001\";\n\tm['.']=\"010001\";\n\tm['?']=\"000001\";\n\tm['A']=\"100101\";\n\tm['B']=\"10011010\";\n\tm['C']=\"0101\";\n\tm['D']=\"0001\";\n\tm['E']=\"110\";\n\tm['F']=\"01001\";\n\tm['G']=\"10011011\";\n\tm['H']=\"010000\";\n\tm['I']=\"0111\";\n\tm['J']=\"10011000\";\n\tm['K']=\"0110\";\n\tm['L']=\"00100\";\n\tm['M']=\"10011001\";\n\tm['N']=\"10011110\";\n\tm['O']=\"00101\";\n\tm['P']=\"111\";\n\tm['Q']=\"10011111\";\n\tm['R']=\"1000\";\n\tm['S']=\"00110\";\n\tm['T']=\"00111\";\n\tm['U']=\"10011100\";\n\tm['V']=\"10011101\";\n\tm['W']=\"000010\";\n\tm['X']=\"10010010\";\n\tm['Y']=\"10010011\";\n\tm['Z']=\"10010000\";\n\tstring t;\n\twhile(getline(cin,t)){\n\t\tstring u,ans;\n\t\trep(i,t.size()){\n\t\t\tu+=m[t[i]];\n\t\t}\n\t\twhile(u.size()%5!=0)u+='0';\n\t\t//cout<<u<<endl;\n\t\tfor(int i=0; i<u.size(); i+=5){\n\t\t\tstring v;\n\t\t\tint n=0;\n\t\t\tv=u.substr(i,5);\n\t\t\t//cout<<v<<\"=\";\n\t\t\trep(j,5){\n\t\t\t\tn*=2;\n\t\t\t\tn+=(v[j]-'0');\n\t\t\t\t//cout<<n<<endl;\n\t\t\t}\n\t\t\t//cout<<n<<endl;\n\t\t\tans+=s[n];\n\t\t\t//cout<<ans<<endl;\n\t\t}\n\t\tcout<<ans<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<map>\n#include<iostream>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint main() {\n\tmap<char, string> a;\n\tstring b = \"'\";\n\ta.insert(map<char, string>::value_type(' ', \"101\"));\n\ta.insert(map<char, string>::value_type(b[0], \"000000\"));\n\ta.insert(map<char, string>::value_type(',', \"000011\"));\n\ta.insert(map<char, string>::value_type('-', \"10010001\"));\n\ta.insert(map<char, string>::value_type('.', \"010001\"));\n\ta.insert(map<char, string>::value_type('?', \"000001\"));\n\ta.insert(map<char, string>::value_type('A', \"100101\"));\n\ta.insert(map<char, string>::value_type('B', \"10011010\"));\n\ta.insert(map<char, string>::value_type('C', \"0101\"));\n\ta.insert(map<char, string>::value_type('D', \"0001\"));\n\ta.insert(map<char, string>::value_type('E', \"110\"));\n\ta.insert(map<char, string>::value_type('F', \"01001\"));\n\ta.insert(map<char, string>::value_type('G', \"10011011\"));\n\ta.insert(map<char, string>::value_type('H', \"010000\"));\n\ta.insert(map<char, string>::value_type('I', \"0111\"));\n\ta.insert(map<char, string>::value_type('J', \"10011000\"));\n\ta.insert(map<char, string>::value_type('K', \"0110\"));\n\ta.insert(map<char, string>::value_type('L', \"00100\"));\n\ta.insert(map<char, string>::value_type('M', \"10011001\"));\n\ta.insert(map<char, string>::value_type('N', \"10011110\"));\n\ta.insert(map<char, string>::value_type('O', \"00101\"));\n\ta.insert(map<char, string>::value_type('P', \"111\"));\n\ta.insert(map<char, string>::value_type('Q', \"10011111\"));\n\ta.insert(map<char, string>::value_type('R', \"1000\"));\n\ta.insert(map<char, string>::value_type('S', \"00110\"));\n\ta.insert(map<char, string>::value_type('T', \"00111\"));\n\ta.insert(map<char, string>::value_type('U', \"10011100\"));\n\ta.insert(map<char, string>::value_type('V', \"10011101\"));\n\ta.insert(map<char, string>::value_type('W', \"000010\"));\n\ta.insert(map<char, string>::value_type('X', \"10010010\"));\n\ta.insert(map<char, string>::value_type('Y', \"10010011\"));\n\ta.insert(map<char, string>::value_type('Z', \"10010000\"));\n\tmap<string, char>e;\n\te.insert(map<string, char>::value_type(\"00000\", 'A'));\n\te.insert(map<string, char>::value_type(\"00001\", 'B'));\n\te.insert(map<string, char>::value_type(\"00010\", 'C'));\n\te.insert(map<string, char>::value_type(\"00011\", 'D'));\n\te.insert(map<string, char>::value_type(\"00100\", 'E'));\n\te.insert(map<string, char>::value_type(\"00101\", 'F'));\n\te.insert(map<string, char>::value_type(\"00110\", 'G'));\n\te.insert(map<string, char>::value_type(\"00111\", 'H'));\n\te.insert(map<string, char>::value_type(\"01000\", 'I'));\n\te.insert(map<string, char>::value_type(\"01001\", 'J'));\n\te.insert(map<string, char>::value_type(\"01010\", 'K'));\n\te.insert(map<string, char>::value_type(\"01011\", 'L'));\n\te.insert(map<string, char>::value_type(\"01100\", 'M'));\n\te.insert(map<string, char>::value_type(\"01101\", 'N'));\n\te.insert(map<string, char>::value_type(\"01110\", 'O'));\n\te.insert(map<string, char>::value_type(\"01111\", 'P'));\n\te.insert(map<string, char>::value_type(\"10000\", 'Q'));\n\te.insert(map<string, char>::value_type(\"10001\", 'R'));\n\te.insert(map<string, char>::value_type(\"10010\", 'S'));\n\te.insert(map<string, char>::value_type(\"10011\", 'T'));\n\te.insert(map<string, char>::value_type(\"10100\", 'U'));\n\te.insert(map<string, char>::value_type(\"10101\", 'V'));\n\te.insert(map<string, char>::value_type(\"10110\", 'W'));\n\te.insert(map<string, char>::value_type(\"10111\", 'X'));\n\te.insert(map<string, char>::value_type(\"11000\", 'Y'));\n\te.insert(map<string, char>::value_type(\"11001\", 'Z'));\n\te.insert(map<string, char>::value_type(\"11010\", ' '));\n\te.insert(map<string, char>::value_type(\"11011\", '.'));\n\te.insert(map<string, char>::value_type(\"11100\", ','));\n\te.insert(map<string, char>::value_type(\"11101\", '-'));\n\te.insert(map<string, char>::value_type(\"11110\", b[0]));\n\te.insert(map<string, char>::value_type(\"11111\", '?'));\n\tint l = 0;\n\twhile (getline(cin, b)) {\n\t\tint sum = 0;\n\t\tstring d = \"\";\n\t\tif (l != 0) d += \" \";\n\t\tfor (int i = 0; i < b.length(); i++) {\n\t\t\td += a[b[i]];\n\t\t}\n\t\tsum++;\n\t\tsum = 0;\n\t\tstring r[1000];\n\t\tfor (int i = 0; i < d.length(); i += 5) {\n\t\t\tstring h = \"\";\n\t\t\tint k = d.length() - 1;\n\t\t\tfor (int j = i; j < min(i + 5, k); j++) {\n\t\t\t\th += d[j];\n\t\t\t}\n\t\t\tr[sum] += h;\n\t\t\twhile ((r[sum].length()) < 5) {\n\t\t\t\tr[sum] += \"0\";\n\t\t\t}\n\t\t\tsum++;\n\t\t}\n\t\td = \"\";\n\t\tfor (int i = 0; i < sum; i++) {\n\t\t\td += e[r[i]];\n\t\t}\n\t\tcout << d << endl;\n\t\tl++;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n\tchar ch;\n\tstring input_str = \"\";\n\twhile(cin.get(ch)){\n\t\tswitch(ch){\n\t\tcase ' ' :input_str += \"101\"\t    ;break;\n//\t\tcase '\\n':input_str += \"101\"\t\t;break;\n\t\tcase '\\'':input_str += \"000000\"\t\t;break;\n\t\tcase ',' :input_str += \"000011\"\t\t;break;\n\t\tcase '-' :input_str += \"10010001\"\t;break;\n\t\tcase '.' :input_str += \"010001\"\t\t;break;\n\t\tcase '?' :input_str += \"000001\"\t    ;break;\n\t\tcase 'A' :input_str += \"100101\"\t\t;break;\n\t\tcase 'B' :input_str += \"10011010\"\t;break;\n\t\tcase 'C' :input_str += \"0101\"\t\t;break;\n\t\tcase 'D' :input_str += \"0001\"\t\t;break;\n\t\tcase 'E' :input_str += \"110\"\t\t;break;\n\t\tcase 'F' :input_str += \"01001\"\t\t;break;\n\t\tcase 'G' :input_str += \"10011011\"\t;break;\n\t\tcase 'H' :input_str += \"010000\"\t\t;break;\n\t\tcase 'I' :input_str += \"0111\"\t\t;break;\n\t\tcase 'J' :input_str += \"10011000\"\t;break;\n\t\tcase 'K' :input_str += \"0110\"\t\t;break;\n\t\tcase 'L' :input_str += \"00100\"\t\t;break;\n\t\tcase 'M' :input_str += \"10011001\"\t;break;\n\t\tcase 'N' :input_str += \"10011110\"\t;break;\n\t\tcase 'O' :input_str += \"00101\"\t\t;break;\n\t\tcase 'P' :input_str += \"111\"\t\t;break;\n\t\tcase 'Q' :input_str += \"10011111\"\t;break;\n\t\tcase 'R' :input_str += \"1000\"\t\t;break;\n\t\tcase 'S' :input_str += \"00110\"\t\t;break;\n\t\tcase 'T' :input_str += \"00111\"\t\t;break;\n\t\tcase 'U' :input_str += \"10011100\"\t;break;\n\t\tcase 'V' :input_str += \"10011101\"\t;break;\n\t\tcase 'W' :input_str += \"000010\"\t\t;break;\n\t\tcase 'X' :input_str += \"10010010\"\t;break;\n\t\tcase 'Y' :input_str += \"10010011\"\t;break;\n\t\tcase 'Z' :input_str += \"10010000\"\t;break;\n\t\t}\n\t}\n\tint pad = 5 - input_str.size()%5;\n\tfor(int i=0; i<pad; i++)input_str += '0';\n\tstring out = \"\";\n\tfor(int i=0; i<input_str.size(); i+=5){\n\t\tstring output_str = input_str.substr(i, 5);\n\t\tif(output_str== \"00000\"){ out += 'A'; }\n\t\telse if( output_str==\"00001\") { out += 'B';}\t\n\t\telse if( output_str==\"00010\") { out += 'C';}\t\n\t\telse if( output_str==\"00011\") { out += 'D';}\t\n\t\telse if( output_str==\"00100\") { out += 'E';}\t\n\t\telse if( output_str==\"00101\") { out += 'F';}\t\n\t\telse if( output_str==\"00110\") { out += 'G';}\t\n\t\telse if( output_str==\"00111\") { out += 'H';}\t\n\t\telse if( output_str==\"01000\") { out += 'I';}\t\n\t\telse if( output_str==\"01001\") { out += 'J';}\t\n\t\telse if( output_str==\"01010\") { out += 'K';}\t\n\t\telse if( output_str==\"01011\") { out += 'L';}\t\n\t\telse if( output_str==\"01100\") { out += 'M';}\t\n\t\telse if( output_str==\"01101\") { out += 'N';}\t\n\t\telse if( output_str==\"01110\") { out += 'O';}\t\n\t\telse if( output_str==\"01111\") { out += 'P';}\t\n\t\telse if( output_str==\"10000\") { out += 'Q';}\t\n\t\telse if( output_str==\"10001\") { out += 'R';}\t\n\t\telse if( output_str==\"10010\") { out += 'S';}\t\n\t\telse if( output_str==\"10011\") { out += 'T';}\t\n\t\telse if( output_str==\"10100\") { out += 'U';}\t\n\t\telse if( output_str==\"10101\") { out += 'V';}\t\n\t\telse if( output_str==\"10110\") { out += 'W';}\t\n\t\telse if( output_str==\"10111\") { out += 'X';}\t\n\t\telse if( output_str==\"11000\") { out += 'Y';}\t\n\t\telse if( output_str==\"11001\") { out += 'Z';}\t\n\t\telse if( output_str==\"11010\") { out += ' ';}\t\n\t\telse if( output_str==\"11011\") { out += '.';}\t\n\t\telse if( output_str==\"11100\") { out += ',';}\t\n\t\telse if( output_str==\"11101\") { out += '-';}\t\n\t\telse if( output_str==\"11110\") { out += '\\'';} \n\t\telse if( output_str==\"11111\") { out += '?';}\n\t}\n\tcout << out << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<map>\n#include<set>\n#include<queue>\n#include<cstdio>\n#include<climits>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<sstream>\n#include<complex>\n\n#define f first\n#define s second\n#define mp make_pair\n\n#define REP(i,n) for(int i=0; i<(int)(n); i++)\n#define FOR(i,c) for(__typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)\n#define ALL(c) (c).begin(), (c).end()\n\nusing namespace std;\n\ntypedef unsigned int uint;\ntypedef long long ll;\ntypedef complex<double> P;\n\nint main(){\n  map<char,string> enc;\n  map<string,char> dec;\n\n  enc[' ']  = \"101\";\n  enc['\\''] = \"000000\";\n  enc[',']  = \"000011\";\n  enc['-']  = \"10010001\";\n  enc['.']  = \"010001\";\n  enc['?']  = \"000001\";\n  enc['A']  = \"100101\";\n  enc['B']  = \"10011010\";\n  enc['C']  = \"0101\";\n  enc['D']  = \"0001\";\n  enc['E']  = \"110\";\n  enc['F']  = \"01001\";\n  enc['G']  = \"10011011\";\n  enc['H']  = \"010000\";\n  enc['I']  = \"0111\";\n  enc['J']  = \"10011000\";\n  enc['K']  = \"0110\";\n  enc['L']  = \"00100\";\n  enc['M']  = \"10011001\";\n  enc['N']  = \"10011110\";\n  enc['O']  = \"00101\";\n  enc['P']  = \"111\";\n  enc['Q']  = \"10011111\";\n  enc['R']  = \"1000\";\n  enc['S']  = \"00110\";\n  enc['T']  = \"00111\";\n  enc['U']  = \"10011100\";\n  enc['V']  = \"10011101\";\n  enc['W']  = \"000010\";\n  enc['X']  = \"10010010\";\n  enc['Y']  = \"10010011\";\n  enc['Z']  = \"10010000\";\n\n  dec[\"00000\"]  = 'A';\n  dec[\"00001\"]  = 'B';\n  dec[\"00010\"]  = 'C';\n  dec[\"00011\"]  = 'D';\n  dec[\"00100\"]  = 'E';\n  dec[\"00101\"]  = 'F';\n  dec[\"00110\"]  = 'G';\n  dec[\"00111\"]  = 'H';\n  dec[\"01000\"]  = 'I';\n  dec[\"01001\"]  = 'J';\n  dec[\"01010\"]  = 'K';\n  dec[\"01011\"]  = 'L';\n  dec[\"01100\"]  = 'M';\n  dec[\"01101\"]  = 'N';\n  dec[\"01110\"]  = 'O';\n  dec[\"01111\"]  = 'P';\n  dec[\"10000\"]  = 'Q';\n  dec[\"10001\"]  = 'R';\n  dec[\"10010\"]  = 'S';\n  dec[\"10011\"]  = 'T';\n  dec[\"10100\"]  = 'U';\n  dec[\"10101\"]  = 'V';\n  dec[\"10110\"]  = 'W';\n  dec[\"10111\"]  = 'X';\n  dec[\"11000\"]  = 'Y';\n  dec[\"11001\"]  = 'Z';\n  dec[\"11010\"]  = ' ';\n  dec[\"11011\"]  = '.';\n  dec[\"11100\"]  = ',';\n  dec[\"11101\"]  = '-';\n  dec[\"11110\"]  = '\\'';\n  dec[\"11111\"]  = '?';\n\n  string input;\n  while(getline(cin, input)){\n    string buff = \"\";\n    REP(i, input.size()){\n      buff+=enc[input[i]];\n      while(buff.size() >= 5){\n\tstring tmp = buff.substr(0,5);\n\tbuff = buff.substr(5);\n\tcout << dec[tmp];\n      }\n    }\n    if(buff.size() != 0){\n      while(buff.size() != 5) buff += \"0\";\n      cout << dec[buff];\n    }\n\n    cout << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n\n\nusing namespace std;\n\nint to_int(char* numStr, int digits)\n{\n\tconst char* n = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n\tint res = 0;\n\tfor (int i = 0; numStr[i] != '\\0'; ++i)\n\t{\n\t\tint j;\n\t\tfor (j = 0; numStr[i] != n[j]; ++j)\n\t\t\t;\n\t\tres = res*digits + j;\n\t}\n\treturn res;\n}\n\nchar buf[2048];\nchar codeBuf[2048*5];\nchar enc[2048];\n\nint main()\n{\n\tconst char* ori = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tconst char* code[] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\"\n\t\t, \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\"\n\t\t, \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\"\n\t\t, \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\"\n\t\t, \"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tconst char* reEnc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n\twhile (!cin.eof())\n\t{\n\t\tcin.getline(buf, sizeof(buf));\n\t\tif (cin.eof())\n\t\t\tbreak;\n\n\t\tcodeBuf[0] = '\\0';\n\t\tfor (int i = 0; buf[i] != '\\0'; ++i)\n\t\t{\n\t\t\tint p;\n\t\t\tfor (p = 0; buf[i] != ori[p]; ++p)\n\t\t\t\t;\n\t\t\tstrcat(codeBuf, code[p]);\n\t\t}\n\t\twhile (strlen(codeBuf) % 5 != 0)\n\t\t\tstrcat(codeBuf, \"0\");\n\n\t\tint k = 0;\n\t\tfor (int i = 0; i < (int)strlen(codeBuf); i += 5)\n\t\t{\n\t\t\tchar w[6];\n\t\t\tfor (int j = 0; j < 5; ++j)\n\t\t\t\tw[j] = codeBuf[i+j];\n\t\t\tw[5] = '\\0';\n\t\t\tenc[k++] = reEnc[to_int(w, 2)];\n\t\t}\n\t\tenc[k] = '\\0';\n\n\t\tprintf(\"%s\\n\", enc);\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <complex>\n#include <string>\n#include <map>\nusing namespace std;\n\n#define REP(i,n) for(int i=0;i<(int)n;++i)\n#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)\n#define ALL(c) (c).begin(), (c).end()\n\nstring itob(int a) {\n  string ret;\n  for(int i=16; i>0; i/=2) {\n    if (a>=i) {\n      ret+='1';\n      a-=i;\n    } else\n      ret+='0';\n  }\n  return ret;\n}\n\nint main() {\n  string hoge = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  map<string, string> m;\n  REP(i,hoge.length()) {\n    string hage;\n    hage = hoge[i];\n    m.insert(make_pair(itob(i),hage));\n  }\n  hoge = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string hoge2[] = {\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\"\n                 ,\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\"\n                 ,\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\"\n                 ,\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n  map<char,string> m2;\n  REP(i,hoge.length())\n    m2.insert(make_pair(hoge[i],hoge2[i]));\n  string line;\n  while(!cin.eof()) {\n    getline(cin,line);\n    if (cin.eof()) break;\n    string a;\n    REP(i,line.length())\n      a += m2[line[i]];\n    int aa = a.length()%5;\n    if(aa)\n      a+=string(5-aa,'0');\n    string ans;\n    for (int i=0; i<a.length(); i+=5) {\n      ans += m[a.substr(i,5)];\n    }\n    //cout << a << endl;\n    cout << ans << endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <bitset>\n#include <map>\nusing namespace std;\n\nstring encode(char c){\n\tstring a[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\tstatic const string str=\" \\',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tfor(int i=0;i<str.length();i++){\n\t\tif(c==str[i])return a[i];\n\t}\n}\n\nchar decode(string s){\n\tstring str2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\tstd::bitset<5> b(s);\n\treturn str2[b.to_ulong()];\n}\n\nint main(void){\n\n\tstring s;\n\tstring code=\"\";\n\tmap<char,string> e;\n\n\te[' ']=\"101\";\n\te['\\'']=\"000000\";\n\te[',']=\"000011\";\n\te['-']=\"10010001\";\n\te['.']=\"010001\";\n\te['?']=\"000001\";\n\te['A']=\"100101\";\n\te['B']=\"10011010\";\n\te['C']=\"0101\";\n\te['D']=\"0001\";\n\te['E']=\"110\";\n\te['F']=\"01001\";\n\te['G']=\"10011011\";\n\te['H']=\"010000\";\n\te['I']=\"0111\";\n\te['J']=\"10011000\";\n\te['K']=\"0110\";\n\te['L']=\"00100\";\n\te['M']=\"10011001\";\n\te['N']=\"10011110\";\n\te['O']=\"00101\";\n\te['P']=\"111\";\n\te['Q']=\"10011111\";\n\te['R']=\"1000\";\n\te['S']=\"00110\";\n\te['T']=\"00111\";\n\te['U']=\"10011100\";\n\te['V']=\"10011101\";\n\te['W']=\"000010\";\n\te['X']=\"10010010\";\n\te['Y']=\"10010011\";\n\te['Z']=\"10010000\";\n\n\twhile (std::getline(cin,s)) {\n\t\tstring code=\"\";\n\t\t// for(int i=0;i<s.length();i++) code+=encode(s[i]);\n\t\tfor(int i=0;i<s.length();i++) code+=e[s[i]];\n\t\t// cout<<code<<endl;\n\t\tstring retu=\"\";\n\t\tcode+=\"0000\";\n\t\tfor(int i=0;i+5<code.length();i+=5){\n\t\t\tstring dd=code.substr(i,5);\n\t\t\tretu+=decode(dd);\n\t\t}\n\t\tcout<<retu<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\nusing namespace std;\n\nstring convert(string str) {\n  map<char, string> d;\n  d[' '] = \"101\";\n  d['\\''] = \"000000\";\n  d[','] = \"000011\";\n  d['-'] = \"10010001\";\n  d['.'] = \"010001\";\n  d['?'] = \"000001\";\n  d['A'] = \"100101\";\n  d['B'] = \"10011010\";\n  d['C'] = \"0101\";\n  d['D'] = \"0001\";\n  d['E'] = \"110\";\n  d['F'] = \"01001\";\n  d['G'] = \"10011011\";\n  d['H'] = \"010000\";\n  d['I'] = \"0111\";\n  d['J'] = \"10011000\";\n  d['K'] = \"0110\";\n  d['L'] = \"00100\";\n  d['M'] = \"10011001\";\n  d['N'] = \"10011110\";\n  d['O'] = \"00101\";\n  d['P'] = \"111\";\n  d['Q'] = \"10011111\";\n  d['R'] = \"1000\";\n  d['S'] = \"00110\";\n  d['T'] = \"00111\";\n  d['U'] = \"10011100\";\n  d['V'] = \"10011101\";\n  d['W'] = \"000010\";\n  d['X'] = \"10010010\";\n  d['Y'] = \"10010011\";\n  d['Z'] = \"10010000\";\n\n  map<string, char> e;\n  e[\"00000\"] = 'A';\n  e[\"00001\"] = 'B';\n  e[\"00010\"] = 'C';\n  e[\"00011\"] = 'D';\n  e[\"00100\"] = 'E';\n  e[\"00101\"] = 'F';\n  e[\"00110\"] = 'G';\n  e[\"00111\"] = 'H';\n  e[\"01000\"] = 'I';\n  e[\"01001\"] = 'J';\n  e[\"01010\"] = 'K';\n  e[\"01011\"] = 'L';\n  e[\"01100\"] = 'M';\n  e[\"01101\"] = 'N';\n  e[\"01110\"] = 'O';\n  e[\"01111\"] = 'P';\n  e[\"10000\"] = 'Q';\n  e[\"10001\"] = 'R';\n  e[\"10010\"] = 'S';\n  e[\"10011\"] = 'T';\n  e[\"10100\"] = 'U';\n  e[\"10101\"] = 'V';\n  e[\"10110\"] = 'W';\n  e[\"10111\"] = 'X';\n  e[\"11000\"] = 'Y';\n  e[\"11001\"] = 'Z';\n  e[\"11010\"] = ' ';\n  e[\"11011\"] = '.';\n  e[\"11100\"] = ',';\n  e[\"11101\"] = '-';\n  e[\"11110\"] = '\\'';\n  e[\"11111\"] = '?';\n  string str2 = \"\";\n  for(int i = 0; i < str.length(); i++) {\n    str2 += d[str[i]];\n  }\n  int n = 5 - str2.length() % 5;\n  for(int i = 0; n < 5 && i < n; i++) {\n    str2 += \"0\";\n  }\n  string str3;\n  for(int i = 0; i < str2.length(); i += 5) {\n    str3 += e[str2.substr(i, 5)];\n  }\n  return str3;\n}\n\nint main() {\n  string str;\n  while(getline(cin, str)) {\n    cout << convert(str) << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nstring a[32] = {\"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\"};\nstring b[32] = {\" \", \"'\", \",\", \"-\", \".\", \"?\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\" \"Z\"};\nstring c[32] = {\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"};\nstring d[32] = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \" \", \".\", \",\", \"-\", \"'\", \"?\"};\n\nint main(){\n    string s;\n    while(getline(cin, s)){\n        string t;\n        for(int i=0; i< s.size(); i++){\n            for(int j=0; j < 32; j++) if(s.substr(i, 1) == b[j]){t += a[j]; break;}\n        }\n        int diff = 5-t.size()%5;\n        if(t.size()%5 != 0) for(int i=0; i < diff; i++) t+=\"0\";\n        string ret;\n        for(int i=0; i < t.size(); i+=5){\n            for(int j=0; j< 32; j++) if(t.substr(i, 5) == c[j]){ret += d[j]; break;}\n        }\n        cout << ret << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <algorithm>\n#include <cassert>\n#include <cctype>\n#include <complex>\n#include <cstdio>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <vector>\nusing namespace std;\n\n#define rep(i,n) for(int i=0;i<n;i++)\n\nstring s,t,c[]={\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\nint main(){\n\twhile(getline(cin,s)){\n\t\tt=\"\";\n\t\tint cur=0;\n\t\twhile(cur<s.size()){\n\t\t\tif(s[cur]==' ')t+=\"101\";\n\t\t\tif(s[cur]=='\\'')t+=\"000000\";\n\t\t\tif(s[cur]==',')t+=\"000011\";\n\t\t\tif(s[cur]=='-')t+=\"10010001\";\n\t\t\tif(s[cur]=='.')t+=\"010001\";\n\t\t\tif(s[cur]=='?')t+=\"000001\";\n\t\t\tif(s[cur]>='A'&&s[cur]<='Z')t+=c[s[cur]-'A'];\n\t\t\tcur++;\n\t\t}\n\t\tif(t.size()%5){\n\t\t\tint u=5-t.size()%5;\n\t\t\trep(i,u)t+=\"0\";\n\t\t}\n\t\t//cout<<t<<\" \"<<t.size()<<endl;\n\t\trep(i,t.size())t[i]-='0';\n\t\tcur=0;\n\t\ts=\"\";\n\t\twhile(cur<t.size()){\n\t\t\tint a=t[cur]*16+t[cur+1]*8+t[cur+2]*4+t[cur+3]*2+t[cur+4];\n\t\t\t//cout<<(int)t[cur]<<(int)t[cur+1]<<(int)t[cur+2]<<(int)t[cur+3]<<(int)t[cur+4]<<\" \"<<a<<endl;\n\t\t\tif(a<=25)s+='A'+a;\n\t\t\tif(a==26)s+=' ';\n\t\t\tif(a==27)s+='.';\n\t\t\tif(a==28)s+=',';\n\t\t\tif(a==29)s+='-';\n\t\t\tif(a==30)s+='\\'';\n\t\t\tif(a==31)s+='?';\n\t\t\tcur+=5;\n\t\t}\n\t\tcout<<s<<endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#include<array>\n#include<bitset>\n#include<cassert>\n#include<cctype>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<functional>\n#include<limits>\n#include<list>\n#include<map>\n#include<numeric>\n#include<set>\n#include<stack>\n#include<string>\n#include<sstream>\n#include<unordered_map>\n#include<queue>\n#include<vector>\nusing namespace std;\n\nusing ll = long long;\nusing ull = unsigned long long;\nusing pii = pair<int, int>;\n\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define RFOR(i,a,b) for(int i=(b)-1;i>=(a);i--)\n#define REP(i,n) for(int i=0;i<(n);i++)\n#define RREP(i,n) for(int i=(n)-1;i>=0;i--)\n#define ALL(a) (a).begin(),(a).end()\n#define DUMP(o) {cerr<<#o<<\" \"<<o<<endl;}\n#define DUMPC(o) {cerr<<#o; for(auto &e:(o))cerr<<\" \"<<e;cerr<<endl;}\n#define INF 0x3f3f3f3f\n#define INFL 0x3f3f3f3f3f3f3f3fLL\nconst int MOD = 1e9 + 7;\n\nsigned main() {\n\tunordered_map<char, string> a;\n\tunordered_map<string, string> b;\n\ta[' '] = \"101\";\n\ta['\\''] = \"000000\";\n\ta[','] = \"000011\";\n\ta['-'] = \"10010001\";\n\ta['.'] = \"010001\";\n\ta['?'] = \"000001\";\n\ta['A'] = \"100101\";\n\ta['B'] = \"10011010\";\n\ta['C'] = \"0101\";\n\ta['D'] = \"0001\";\n\ta['E'] = \"110\";\n\ta['F'] = \"01001\";\n\ta['G'] = \"10011011\";\n\ta['H'] = \"010000\";\n\ta['I'] = \"0111\";\n\ta['J'] = \"10011000\";\n\ta['K'] = \"0110\";\n\ta['L'] = \"00100\";\n\ta['M'] = \"10011001\";\n\ta['N'] = \"10011110\";\n\ta['O'] = \"00101\";\n\ta['P'] = \"111\";\n\ta['Q'] = \"10011111\";\n\ta['R'] = \"1000\";\n\ta['S'] = \"00110\";\n\ta['T'] = \"00111\";\n\ta['U'] = \"10011100\";\n\ta['V'] = \"10011101\";\n\ta['W'] = \"000010\";\n\ta['X'] = \"10010010\";\n\ta['Y'] = \"10010011\";\n\ta['Z'] = \"10010000\";\n\tb[\"00000\"] = \"A\";\n\tb[\"00001\"] = \"B\";\n\tb[\"00010\"] = \"C\";\n\tb[\"00011\"] = \"D\";\n\tb[\"00100\"] = \"E\";\n\tb[\"00101\"] = \"F\";\n\tb[\"00110\"] = \"G\";\n\tb[\"00111\"] = \"H\";\n\tb[\"01000\"] = \"I\";\n\tb[\"01001\"] = \"J\";\n\tb[\"01010\"] = \"K\";\n\tb[\"01011\"] = \"L\";\n\tb[\"01100\"] = \"M\";\n\tb[\"01101\"] = \"N\";\n\tb[\"01110\"] = \"O\";\n\tb[\"01111\"] = \"P\";\n\tb[\"10000\"] = \"Q\";\n\tb[\"10001\"] = \"R\";\n\tb[\"10010\"] = \"S\";\n\tb[\"10011\"] = \"T\";\n\tb[\"10100\"] = \"U\";\n\tb[\"10101\"] = \"V\";\n\tb[\"10110\"] = \"W\";\n\tb[\"10111\"] = \"X\";\n\tb[\"11000\"] = \"Y\";\n\tb[\"11001\"] = \"Z\";\n\tb[\"11010\"] = \" \";\n\tb[\"11011\"] = \".\";\n\tb[\"11100\"] = \",\";\n\tb[\"11101\"] = \"-\";\n\tb[\"11110\"] = \"'\";\n\tb[\"11111\"] = \"?\";\n\n\tfor (string s; getline(cin, s);) {\n\t\tstring t = \"\";\n\t\tREP(i, s.size()) t += a[s[i]];\n\t\tint c = (5 - t.size() % 5) % 5;\n\t\tREP(i, c)t += \"0\";\n\t\tstring ans = \"\";\n\t\tfor (int i = 0; i < t.size(); i += 5) {\n\t\t\tans += b[t.substr(i, 5)];\n\t\t}\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <string>\nusing namespace std;\nstring chtostr(char ch)\n{\n\tif(ch==' ') return \"101\";\n\tif(ch=='\\'') return \"000000\";\n\tif(ch==',')\treturn \"000011\";\n\tif(ch=='-') return \"10010001\";\n\tif(ch=='.')\treturn \"010001\";\n\tif(ch=='?')\treturn \"000001\";\n\tif(ch=='A')\treturn \"100101\";\n\tif(ch=='B')\treturn \"10011010\";\n\tif(ch=='C')\treturn \"0101\";\n\tif(ch=='D')\treturn \"0001\";\n\tif(ch=='E')\treturn \"110\";\n\tif(ch=='F')\treturn \"01001\";\n\tif(ch=='G')\treturn \"10011011\";\n\tif(ch=='H') return \"010000\";\n\tif(ch=='I') return \"0111\";\n\tif(ch=='J')\treturn \"10011000\";\n\tif(ch=='K')\treturn \"0110\";\n\tif(ch=='L')\treturn \"00100\";\n\tif(ch=='M')\treturn \"10011001\";\n\tif(ch=='N')\treturn \"10011110\";\n\tif(ch=='O')\treturn \"00101\";\n\tif(ch=='P')\treturn \"111\";\n\tif(ch=='Q')\treturn \"10011111\";\n\tif(ch=='R')\treturn \"1000\";\n\tif(ch=='S')\treturn \"00110\";\n\tif(ch=='T') return \"00111\";\n\tif(ch=='U')\treturn \"10011100\";\n\tif(ch=='V')\treturn \"10011101\";\n\tif(ch=='W')\treturn \"000010\";\n\tif(ch=='X')\treturn \"10010010\";\n\tif(ch=='Y')\treturn \"10010011\";\n\treturn \"10010000\";\n}\nchar strtoch(string str)\n{\n\treverse(str.begin(),str.end());\n\tint tmp=0;\n\tfor(int i=0;i<str.size();i++) {char ch; ch=str[i]; tmp+=pow(2,i)*(ch-'0');}\n\tif(tmp<=25) return ('A'+tmp);\n\tif(tmp==26) return ' ';\n\tif(tmp==27) return '.';\n\tif(tmp==28) return ',';\n\tif(tmp==29) return '-';\n\tif(tmp==30) return '\\'';\n\treturn '?';\n}\nint main()\n{\n\tstring str;\n\twhile(getline(cin,str))\n\t{\n\t\tstring tmp=\"\";\n\t\tfor(int i=0;i<str.size();i++) {char ch; ch=str[i]; tmp+=chtostr(ch);}\n\t\twhile(tmp.size()%5) tmp+='0';\n\t\tstring ans=\"\";\n\t\tfor(int i=0;i<tmp.size();i+=5) ans+=strtoch(tmp.substr(i,5));\n\t\tcout << ans << '\\n';\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<deque>\n#include<algorithm>\n#include<functional>\n#include<string>\n#include<map>\nusing namespace std;\n\nmap<char, string>U;\nstring b[26] = {\n\t\"100101\",\n\t\"10011010\",\n\t\"0101\",\n\t\"0001\",\n\t\"110\",\n\t\"01001\",\n\t\"10011011\",\n\t\"010000\",\n\t\"0111\",\n\t\"10011000\",\n\t\"0110\",\n\t\"00100\",\n\t\"10011001\",\n\t\"10011110\",\n\t\"00101\",\n\t\"111\",\n\t\"10011111\",\n\t\"1000\",\n\t\"00110\",\n\t\"00111\",\n\t\"10011100\",\n\t\"10011101\",\n\t\"000010\",\n\t\"10010010\"\n\t\"10010011\",\n\t\"10010000\",\n};\nchar t[6]{ ' ', '.', ',','-','\\'','?' };\nsigned main() {\n\tU[' '] = \"101\";\n\tU['\\''] = \"000000\";\n\tU[','] = \"000011\";\n\tU['-'] = \"10010001\";\n\tU['.'] = \"010001\";\n\tU['?'] = \"000001\";\n\tstring a;\n\twhile (getline(cin, a)) {\n\t\tstring c;\n\t\tfor (char d : a) {\n\t\t\tif (d >= 'A'&&d <= 'Z') {\n\t\t\t\tc += b[d - 'A'];\n\t\t\t}\n\t\t\telse c += U[d];\n\t\t}\n\t\twhile (c.length() % 5)c += \"0\";\n\t\tfor (int e = 0; e < c.length() / 5;e++) {\n\t\t\tstring k = c.substr(e * 5, 5);\n\t\t\tint S = 0;\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tif (k[i] == '1') {\n\t\t\t\t\tS += 1 << (4 - i);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (S <= 25) { cout << char(S + 'A'); }\n\t\t\telse cout << (char)t[S - 26];\n\t\t}\n\t\tcout << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\nusing namespace std;\n \nmap <char,string> t;\nvoid make_table(){\n  t[' '] =\"101\";\n  t['\\'']=\"000000\";\n  t[','] =\"000011\";\n  t['-'] =\"10010001\";\n  t['.'] =\"010001\";\n  t['?'] =\"000001\";\n  t['A'] =\"100101\";\n  t['B'] =\"10011010\";\n   \n  t['C'] =\"0101\";\n  t['D'] =\"0001\";\n  t['E'] =\"110\";\n  t['F'] =\"01001\";\n  t['G'] =\"10011011\";\n  t['H'] =\"010000\";\n  t['I'] =\"0111\";\n  t['J'] =\"10011000\";\n \n  t['K'] =\"0110\";\n  t['L'] =\"00100\";\n  t['M'] =\"10011001\";\n  t['N'] =\"10011110\";\n  t['O'] =\"00101\";\n  t['P'] =\"111\";\n  t['Q'] =\"10011111\";\n  t['R'] =\"1000\";\n \n  t['S'] =\"00110\";\n  t['T'] =\"00111\";\n  t['U'] =\"10011100\";\n  t['V'] =\"10011101\";\n  t['W'] =\"000010\";\n  t['X'] =\"10010010\";\n  t['Y'] =\"10010011\";\n  t['Z'] =\"10010000\";\n}\nchar ch_table[]={' ','.',',','-','\\'','?'};\n \nchar s2ch(string str){\n  int num=0;\n  for(int i=0;i<5;i++){\n    num*=2;\n    num+=str[i]-'0';\n  }\n  if(num<=25)return 'A'+num;\n  return ch_table[num-26];\n}\n \nint main(){\n  int flg=0;\n  string str,A,B;\n  make_table();\n \n  B=\"\";\n  while(getline(cin,str)){\n    if(flg==0)B+=str;\n    else B=B+\" \"+str;\n    flg=1;\n  }\n \n  A=\"\";\n  for(int i=0;i<(int)B.size();i++){\n    A+=t[B[i]];\n  }\n   \n  while(A.size()%5!=0)A+=\"0\";\n   \n  for(int i=0;i<(int)A.size();i+=5){\n    //cout<<A.substr(i,5)<<\" \";\n    cout<<s2ch(A.substr(i,5));\n  }\n  cout<<endl;\n   \n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\n\nstd::string encode(char c){\n    if(c == ' ') return \"101\";\n    if(c == '\\'') return \"000000\";\n    if(c == ',') return \"000011\";\n    if(c == '-') return \"10010001\";\n    if(c == '.') return \"010001\";\n    if(c == '?') return \"000001\";\n    if(c == 'A') return \"100101\";\n    if(c == 'B') return \"10011010\";\n    if(c == 'C') return \"0101\";\n    if(c == 'D') return \"0001\";\n    if(c == 'E') return \"110\";\n    if(c == 'F') return \"01001\";\n    if(c == 'G') return \"10011011\";\n    if(c == 'H') return \"010000\";\n    if(c == 'I') return \"0111\";\n    if(c == 'J') return \"10011000\";\n    if(c == 'K') return \"0110\";\n    if(c == 'L') return \"00100\";\n    if(c == 'M') return \"10011001\";\n    if(c == 'N') return \"10011110\";\n    if(c == 'O') return \"00101\";\n    if(c == 'P') return \"111\";\n    if(c == 'Q') return \"10011111\";\n    if(c == 'R') return \"1000\";\n    if(c == 'S') return \"00110\";\n    if(c == 'T') return \"00111\";\n    if(c == 'U') return \"10011100\";\n    if(c == 'V') return \"10011101\";\n    if(c == 'W') return \"000010\";\n    if(c == 'X') return \"10010010\";\n    if(c == 'Y') return \"10010011\";\n    if(c == 'Z') return \"10010000\";\n    return \"\";\n}\n\nstd::string encode2(std::string s){\n    if(s == \"00000\") return \"A\";\n    if(s == \"00001\") return \"B\";\n    if(s == \"00010\") return \"C\";\n    if(s == \"00011\") return \"D\";\n    if(s == \"00100\") return \"E\";\n    if(s == \"00101\") return \"F\";\n    if(s == \"00110\") return \"G\";\n    if(s == \"00111\") return \"H\";\n    if(s == \"01000\") return \"I\";\n    if(s == \"01001\") return \"J\";\n    if(s == \"01010\") return \"K\";\n    if(s == \"01011\") return \"L\";\n    if(s == \"01100\") return \"M\";\n    if(s == \"01101\") return \"N\";\n    if(s == \"01110\") return \"O\";\n    if(s == \"01111\") return \"P\";\n    if(s == \"10000\") return \"Q\";\n    if(s == \"10001\") return \"R\";\n    if(s == \"10010\") return \"S\";\n    if(s == \"10011\") return \"T\";\n    if(s == \"10100\") return \"U\";\n    if(s == \"10101\") return \"V\";\n    if(s == \"10110\") return \"W\";\n    if(s == \"10111\") return \"X\";\n    if(s == \"11000\") return \"Y\";\n    if(s == \"11001\") return \"Z\";\n    if(s == \"11010\") return \" \";\n    if(s == \"11011\") return \".\";\n    if(s == \"11100\") return \",\";\n    if(s == \"11101\") return \"-\";\n    if(s == \"11110\") return \"'\";\n    if(s == \"11111\") return \"?\";\n    return \"\";\n}\n\nint main(){\n    std::string str, tmp, ans;\n    while(getline(std::cin, str)){\n        tmp = \"\", ans = \"\";\n        for(int i = 0; i < str.size(); i++){\n            tmp += encode(str[i]);\n        }\n\n        int n = 5 - (tmp.size() % 5);\n        for(int i = 0; i < n; i++) tmp += \"0\";\n\n        for(int i = 0; i < tmp.size() / 5; i++){\n            ans += encode2(tmp.substr(i * 5, 5));\n        }\n\n        std::cout << ans << std::endl;\n        std::cin.clear();\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long int ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<pair<int, int> > vii;\n#define rrep(i, m, n) for(int (i)=(m); (i)<(n);  (i)++)\n#define erep(i, m, n) for(int (i)=(m); (i)<=(n); (i)++)\n#define  rep(i, n)    for(int (i)=0; (i)<(n);  (i)++)\n#define rrev(i, m, n) for(int (i)=(n)-1; (i)>=(m); (i)--)\n#define erev(i, m, n) for(int (i)=(n); (i)>=(m); (i)--)\n#define  rev(i, n)    for(int (i)=(n)-1; (i)>=0; (i)--)\n#define vrep(i, c)    for(__typeof((c).begin())i=(c).begin(); i!=(c).end(); i++)\n#define  ALL(v)       (v).begin(), (v).end()\n#define mp            make_pair\n#define pb            push_back\ntemplate<class T, class S> inline bool minup(T& m, S x){ return m>(T)x ? (m=(T)x, true) : false; }\ntemplate<class T, class S> inline bool maxup(T& m, S x){ return m<(T)x ? (m=(T)x, true) : false; }\n\nconst int    INF = 1000000000;\nconst ll     MOD = 1000000007LL;\nconst double EPS = 1E-12;\n\nmap<char, string> en;\nmap<string, string> de;\nstring s, t;\nstring in;\nint n;\n\nvoid encode()\n{\n  en[' '] = \"101\";\n  en['\\''] = \"000000\";\n  en[','] = \"000011\";\n  en['-'] = \"10010001\";\n  en['.'] = \"010001\";\n  en['?'] = \"000001\";\n  en['A'] = \"100101\";\n  en['B'] = \"10011010\";\n  en['C'] = \"0101\";\n  en['D'] = \"0001\";\n  en['E'] = \"110\";\n  en['F'] = \"01001\";\n  en['G'] = \"10011011\";\n  en['H'] = \"010000\";\n  en['I'] = \"0111\";\n  en['J'] = \"10011000\";\n  en['K'] = \"0110\";\n  en['L'] = \"00100\";\n  en['M'] = \"10011001\";\n  en['N'] = \"10011110\";\n  en['O'] = \"00101\";\n  en['P'] = \"111\";\n  en['Q'] = \"10011111\";\n  en['R'] = \"1000\";\n  en['S'] = \"00110\";\n  en['T'] = \"00111\";\n  en['U'] = \"10011100\";\n  en['V'] = \"10011101\";\n  en['W'] = \"000010\";\n  en['X'] = \"10010010\";\n  en['Y'] = \"10010011\";\n  en['Z'] = \"10010000\";\n}\n\nvoid decode()\n{\n  de[\"00000\"] = \"A\";\n  de[\"00001\"] = \"B\";\n  de[\"00010\"] = \"C\";\n  de[\"00011\"] = \"D\";\n  de[\"00100\"] = \"E\";\n  de[\"00101\"] = \"F\";\n  de[\"00110\"] = \"G\";\n  de[\"00111\"] = \"H\";\n  de[\"01000\"] = \"I\";\n  de[\"01001\"] = \"J\";\n  de[\"01010\"] = \"K\";\n  de[\"01011\"] = \"L\";\n  de[\"01100\"] = \"M\";\n  de[\"01101\"] = \"N\";\n  de[\"01110\"] = \"O\";\n  de[\"01111\"] = \"P\";\n  de[\"10000\"] = \"Q\";\n  de[\"10001\"] = \"R\";\n  de[\"10010\"] = \"S\";\n  de[\"10011\"] = \"T\";\n  de[\"10100\"] = \"U\";\n  de[\"10101\"] = \"V\";\n  de[\"10110\"] = \"W\";\n  de[\"10111\"] = \"X\";\n  de[\"11000\"] = \"Y\";\n  de[\"11001\"] = \"Z\";\n  de[\"11010\"] = \" \";\n  de[\"11011\"] = \".\";\n  de[\"11100\"] = \",\";\n  de[\"11101\"] = \"-\";\n  de[\"11110\"] = \"'\";\n  de[\"11111\"] = \"?\";\n}\n\nint main()\n{\n  encode();\n  decode();\n\n  while(getline(cin, s)){\n    t = \"\";\n    in = \"\";\n    in += s + \" \";\n\n    rep(i, in.size()-1) t += en[in[i]];\n    n = (5 - t.size() % 5) % 5;\n    rep(i, n) t += \"0\";\n\n    n = t.size() / 5;\n    rep(i, n) cout << de[t.substr(5*i, 5)];\n    cout << endl;\n  }\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<cstdlib>\nusing namespace std;\nint main(){\nlong i,j,k,x,c[10];\nstring s,t,u[59]={\n\"101\",\"\",\"\",\"\",\"\",\"\",\"\",\"010001\",\"\",\"\",\n\"\",\"\",\"000011\",\"10010001\",\"000000\",\"\",\"\",\"\",\"\",\"\",\n\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n\"\",\"000001\",\"\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\n\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\n\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\n},v=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nwhile(getline(cin,s)){\nfor(t=\"\",i=0;i<s.size();i++)t+=u[s[i]-32];\nx=t.size();\nk=((x-1)/5+1)*5;\nfor(i=0;i<k-x;i++)t+='0';\nfor(i=0;i<k;i++){\nif(i%5==0){cout<<v[x];x=0;}\nx<<=1;x+=t[i]-48;\n}\ncout<<v[x]<<endl;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\nusing namespace std;\nstring s;\nint main() {\n\twhile(s = \"\", getline(cin, s)) {\n\t\tstring t;\n\t\tfor(int i = 0; i < s.size(); i++) {\n\t\t\tswitch(s[i]) {\n\t\t\t\tcase 'A': t += \"100101\"; break;\n\t\t\t\tcase 'B': t += \"10011010\"; break;\n\t\t\t\tcase 'C': t += \"0101\"; break;\n\t\t\t\tcase 'D': t += \"0001\"; break;\n\t\t\t\tcase 'E': t += \"110\"; break;\n\t\t\t\tcase 'F': t += \"01001\"; break;\n\t\t\t\tcase 'G': t += \"10011011\"; break;\n\t\t\t\tcase 'H': t += \"010000\"; break;\n\t\t\t\tcase 'I': t += \"0111\"; break;\n\t\t\t\tcase 'J': t += \"10011000\"; break;\n\t\t\t\tcase 'K': t += \"0110\"; break;\n\t\t\t\tcase 'L': t += \"00100\"; break;\n\t\t\t\tcase 'M': t += \"10011001\"; break;\n\t\t\t\tcase 'N': t += \"10011110\"; break;\n\t\t\t\tcase 'O': t += \"00101\"; break;\n\t\t\t\tcase 'P': t += \"111\"; break;\n\t\t\t\tcase 'Q': t += \"10011111\"; break;\n\t\t\t\tcase 'R': t += \"1000\"; break;\n\t\t\t\tcase 'S': t += \"00110\"; break;\n\t\t\t\tcase 'T': t += \"00111\"; break;\n\t\t\t\tcase 'U': t += \"10011100\"; break;\n\t\t\t\tcase 'V': t += \"10011101\"; break;\n\t\t\t\tcase 'W': t += \"000010\"; break;\n\t\t\t\tcase 'X': t += \"10010010\"; break;\n\t\t\t\tcase 'Y': t += \"10010011\"; break;\n\t\t\t\tcase 'Z': t += \"10010000\"; break;\n\t\t\t\tcase ' ': t += \"101\"; break;\n\t\t\t\tcase '\\'': t += \"000000\"; break;\n\t\t\t\tcase ',': t += \"000011\"; break;\n\t\t\t\tcase '-': t += \"10010001\"; break;\n\t\t\t\tcase '.': t += \"010001\"; break;\n\t\t\t\tcase '?': t += \"000001\"; break;\n\t\t\t}\n\t\t}\n\t\twhile(t.size() % 5 != 0) t = t + '0';\n\t\tstring u;\n\t\tfor(int i = 0; i < t.size(); i += 5) {\n\t\t\tint r = 0;\n\t\t\tfor(int j = i; j < i + 5; j++) {\n\t\t\t\tr *= 2;\n\t\t\t\tif(t[j] == '1') r++;\n\t\t\t}\n\t\t\tif(r < 26) u += (char)(r + 65);\n\t\t\telse if(r == 26) u += ' ';\n\t\t\telse if(r == 27) u += '.';\n\t\t\telse if(r == 28) u += ',';\n\t\t\telse if(r == 29) u += '-';\n\t\t\telse if(r == 30) u += '\\'';\n\t\t\telse u += '?';\n\t\t}\n\t\tcout << u << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<cmath>\n#include<cstdio>\n#include<map>\n#include<string>\nusing namespace std;\nint pow(string sub){\n    int r=0,t=1;\n    for(int i=4;i>=0;i--){\n        if(sub[i]=='1')r+=t;\n        t*=2;\n    }\n    return r;\n}\nint main(){\n    map<char,string>enc;\n    enc[' ']=\"101\";\n    enc['\\'']=\"000000\";\n    enc[',']=\"000011\";\n    enc['-']=\"10010001\";\n    enc['.']=\"010001\";\n    enc['?']=\"000001\";\n    enc['A']=\"100101\";\n    enc['B']=\"10011010\";\n    enc['C']=\"0101\";\n    enc['D']=\"0001\";\n    enc['E']=\"110\";\n    enc['F']=\"01001\";\n    enc['G']=\"10011011\";\n    enc['H']=\"010000\";\n    enc['I']=\"0111\";\n    enc['J']=\"10011000\";\n    enc['K']=\"0110\";\n    enc['L']=\"00100\";\n    enc['M']=\"10011001\";\n    enc['N']=\"10011110\";\n    enc['O']=\"00101\";\n    enc['P']=\"111\";\n    enc['Q']=\"10011111\";\n    enc['R']=\"1000\";\n    enc['S']=\"00110\";\n    enc['T']=\"00111\";\n    enc['U']=\"10011100\";\n    enc['V']=\"10011101\";\n    enc['W']=\"000010\";\n    enc['X']=\"10010010\";\n    enc['Y']=\"10010011\";\n    enc['Z']=\"10010000\";\n    string lis=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n    string str;\n    while(getline(cin,str)){\n        string ans;\n        for(int i=0;i<str.length();i++){\n            ans+=enc[str[i]];\n        }\n        for(int i=0;i<ans.length()%5;i++){\n            ans+=\"0\";\n        }\n        string Code;\n        for(int i=0;i<ans.length()/5;i++){\n            int value=pow(ans.substr(i*5,(i*5)+5));\n            Code+=lis[value];\n        }\n        cout<<Code<<endl;\n    }\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n\n  char in;\n  string wd = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string bd[32] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\" };\n  string od = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n  string input;\n\n  while( true ) {\n    if ( cin.eof() ) break;\n    getline( cin, input );\n\n    string k = \"\";\n\n    for( int l = 0; l < input.size(); l++ ) {\n      in = input[l];\n      for ( int i = 0; i < 32; i++ ) {\n\tif ( in == wd[i] ) {\n\t  k += bd[i];\n\t  //\tcout << bd[i];\n\t  if ( k.size() >= 5 ) {\n\t    int x = 0;\n\t    for ( int j = 0; j < 5; j++ ) {\n\t      x = x * 2 + k[j] - '0';\n\t    }\n\t    cout << od[x];\n\t    string n = \"\";\n\t    for ( int j = 5; j < k.size(); j++ ) {\n\t      n += k[j];\n\t    }\n\t    k = n;\n\t  }\n\t}\n      }\n\n    }\n    if ( k.size() > 0 ) {\n      k += \"00000\";\n      int x = 0;\n      for ( int j = 0; j < 5; j++ ) {\n\tx = x * 2 + k[j] - '0';\n      }\n      cout << od[x];\n    }\n    cout << endl;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> v;\nstring s,n=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",m=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\",l[32]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\nint main(){\n\twhile(getline(cin,s)){\n\t\tv.clear();\n\t\tfor(int i=0;i<s.size();i++){\n\t\t\tint p=0;while(m[p]!=s[i])p++;\n\t\t\tfor(int j=0;j<l[p].size();j++)v.push_back(l[p][j]-'0');\n\t\t}\n\t\tfor(int i=0;i<v.size();i+=5){\n\t\t\tint cnt=0;\n\t\t\tfor(int j=0;j<5;j++)cnt*=2,cnt+=v[i+j];\n\t\t\tcout<<n[cnt];\n\t\t}cout<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <iostream>\n\nusing namespace std;\n\nint bitstrtoint(string str){\n  int res = 0;\n  for(int i = 0; i < str.size(); i++){\n    res *= 2;\n    res += str[i] == '1';\n  }\n  return res;\n}\n\nint main(){\n  string str;\n  while(getline(cin, str)){\n    string numstr = \"\";\n    for(int i = 0; i < str.size(); i++){\n      switch((char)str[i]){\n      case ' ':\n        numstr += \"101\";\n        break;\n      case '\\'':\n        numstr += \"000000\";\n        break;\n      case ',':\n        numstr += \"000011\";\n        break;\n      case '-':\n        numstr += \"10010001\";\n        break;\n      case '.':\n        numstr += \"010001\";\n        break;\n      case '?':\n        numstr += \"000001\";\n        break;\n      case 'A':\n        numstr += \"100101\";\n        break;\n      case 'B':\n        numstr += \"10011010\";\n        break;\n      case 'C':\n        numstr += \"0101\";\n        break;\n      case 'D':\n        numstr += \"0001\";\n        break;\n      case 'E':\n        numstr += \"110\";\n        break;\n      case 'F':\n        numstr += \"01001\";\n        break;\n      case 'G':\n        numstr += \"10011011\";\n        break;\n      case 'H':\n        numstr += \"010000\";\n        break;\n      case 'I':\n        numstr += \"0111\";\n        break;\n      case 'J':\n        numstr += \"10011000\";\n        break;\n      case 'K':\n        numstr += \"0110\";\n        break;\n      case 'L':\n        numstr += \"00100\";\n        break;\n      case 'M':\n        numstr += \"10011001\";\n        break;\n      case 'N':\n        numstr += \"10011110\";\n        break;\n      case 'O':\n        numstr += \"00101\";\n        break;\n      case 'P':\n        numstr += \"111\";\n        break;\n      case 'Q':\n        numstr += \"10011111\";\n        break;\n      case 'R':\n        numstr += \"1000\";\n        break;\n      case 'S':\n        numstr += \"00110\";\n        break;\n      case 'T':\n        numstr += \"00111\";\n        break;\n      case 'U':\n        numstr += \"10011100\";\n        break;\n      case 'V':\n        numstr += \"10011101\";\n        break;\n      case 'W':\n        numstr += \"000010\";\n        break;\n      case 'X':\n        numstr += \"10010010\";\n        break;\n      case 'Y':\n        numstr += \"10010011\";\n        break;\n      case 'Z':\n        numstr += \"10010000\";\n      }\n    }\n    str = \"\";\n    if(numstr.size() % 5){\n      numstr += string(5 - (numstr.size() % 5), '0');\n    }\n    for(int i = 0; i < numstr.size(); i += 5){\n      int code = bitstrtoint(numstr.substr(i, 5));\n      if(0 <= code && code < 26){\n        str += (char)(code + 65);\n      }\n      else{\n        switch(code){\n        case 26:\n          str += \" \";\n          break;\n        case 27:\n          str += \".\";\n          break;\n        case 28:\n          str += \",\";\n          break;\n        case 29:\n          str += \"-\";\n          break;\n        case 30:\n          str += \"\\'\";\n          break;\n        case 31:\n          str += \"?\";\n        }\n      }\n    }\n    cout << str << \"\\n\";\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\nusing namespace std;\n\nmap<char, string> encode_table;\nmap<string, char> decode_table;\n\nchar decode(string s) {\n    cout << s << endl;\n    return decode_table[s];\n}\n\nstring encode(string s) {\n    string tmp;\n    for (string::iterator si = s.begin(); si != s.end(); si++) {\n        tmp.append(encode_table[*si]);\n    }\n    cout << tmp << endl;\n\n    string ret;\n    int tmp_len = tmp.size();\n    if (tmp_len % 5 != 0) {\n        tmp.append(5-tmp_len%5, '0');\n        tmp_len += 5 - tmp_len % 5;\n    }\n    for (int i = 0; i < tmp_len; i+=5) {\n        ret.push_back(decode(tmp.substr(i, 5)));\n    }\n    return ret;\n}\n\n\nvoid init() {\n    encode_table[' ']  = \"101\";\n    encode_table['\\''] = \"000000\";\n    encode_table[',']  = \"000011\";\n    encode_table['-']  = \"10010001\";\n    encode_table['.']  = \"010001\";\n    encode_table['?']  = \"000001\";\n    encode_table['A']  = \"100101\";\n    encode_table['B']  = \"10011010\";\n    encode_table['C']  = \"0101\";\n    encode_table['D']  = \"0001\";\n    encode_table['E']  = \"110\";\n    encode_table['F']  = \"01001\";\n    encode_table['G']  = \"10011011\";\n    encode_table['H']  = \"010000\";\n    encode_table['I']  = \"0111\";\n    encode_table['J']  = \"10011000\";\n    encode_table['K']  = \"0110\";\n    encode_table['L']  = \"00100\";\n    encode_table['M']  = \"10011001\";\n    encode_table['N']  = \"10011110\";\n    encode_table['O']  = \"00101\";\n    encode_table['P']  = \"111\";\n    encode_table['Q']  = \"10011111\";\n    encode_table['R']  = \"1000\";\n    encode_table['S']  = \"00110\";\n    encode_table['T']  = \"00111\";\n    encode_table['U']  = \"10011100\";\n    encode_table['V']  = \"10011101\";\n    encode_table['W']  = \"000010\";\n    encode_table['X']  = \"10010010\";\n    encode_table['Y']  = \"10010011\";\n    encode_table['Z']  = \"10010000\";\n\tdecode_table[string(\"00000\")]  = 'A';\n\tdecode_table[string(\"00001\")]  = 'B';\n\tdecode_table[string(\"00010\")]  = 'C';\n\tdecode_table[string(\"00011\")]  = 'D';\n\tdecode_table[string(\"00100\")]  = 'E';\n\tdecode_table[string(\"00101\")]  = 'F';\n\tdecode_table[string(\"00110\")]  = 'G';\n\tdecode_table[string(\"00111\")]  = 'H';\n    decode_table[string(\"01000\")]  = 'I';\n    decode_table[string(\"01001\")]  = 'J';\n    decode_table[string(\"01010\")]  = 'K';\n    decode_table[string(\"01011\")]  = 'L';\n    decode_table[string(\"01100\")]  = 'M';\n    decode_table[string(\"01101\")]  = 'N';\n    decode_table[string(\"01110\")]  = 'O';\n    decode_table[string(\"01111\")]  = 'P';\n\tdecode_table[string(\"10000\")]  = 'Q';\n\tdecode_table[string(\"10001\")]  = 'R';\n\tdecode_table[string(\"10010\")]  = 'S';\n\tdecode_table[string(\"10011\")]  = 'T';\n\tdecode_table[string(\"10100\")]  = 'U';\n\tdecode_table[string(\"10101\")]  = 'V';\n\tdecode_table[string(\"10110\")]  = 'W';\n\tdecode_table[string(\"10111\")]  = 'X';\n\tdecode_table[string(\"11000\")]  = 'Y';\n\tdecode_table[string(\"11001\")]  = 'Z';\n\tdecode_table[string(\"11010\")]  = ' ';\n\tdecode_table[string(\"11011\")]  = '.';\n\tdecode_table[string(\"11100\")]  = ',';\n\tdecode_table[string(\"11101\")]  = '-';\n\tdecode_table[string(\"11110\")]  = '\\'';\n\tdecode_table[string(\"11111\")]  = '?';\n}  \n\nint main() {\n    string s;\n    init();\n    while (getline(cin, s)) {\n        cout << encode(s) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<map>\n\nusing namespace std;\n\nstring in;\nmap<char,string> M;\nmap<string,char> M_2;\n\nvoid solve(string in){\n  string out = \"\";\n\n  for(int i = 0; i < in.length(); i++)\n    out += M[in[i]];\n\n  while(out.length()%5) out+=\"0\";\n\n  string ans = \"\";\n  for(int i = 0; i < out.length(); i+=5){\n    string now = \"\";\n    for(int j = 0; j < 5; j++)\n      now += out[i+j];\n    ans += M_2[now];\n  }\n  cout << ans << endl;\n}\n\nstring to_b(int num){\n  string out = \"\";\n  for(int i = 4; i >= 0; i--){\n    if(num >= (1<<i)){\n      out += \"1\";\n      num -= (1<<i);\n    }else out += \"0\";\n  }\n\n  return out;\n}\n\nvoid make(){\n  M[' '] = \"101\";\n  M['\\''] = \"000000\";\n  M[','] = \"000011\";\n  M['-'] = \"10010001\";\n  M['.'] = \"010001\";\n  M['?'] = \"000001\";\n  M['A'] = \"100101\";\n  M['B'] = \"10011010\";\n  M['C'] = \"0101\";\n  M['D'] = \"0001\";\n  M['E'] = \"110\";\n  M['F'] = \"01001\";\n  M['G'] = \"10011011\";\n  M['H'] = \"010000\";\n  M['I'] = \"0111\";\n  M['J'] = \"10011000\";\n  M['K'] = \"0110\";\n  M['L'] = \"00100\";\n  M['M'] = \"10011001\";\n  M['N'] = \"10011110\";\n  M['O'] = \"00101\";\n  M['P'] = \"111\";\n  M['Q'] = \"10011111\";\n  M['R'] = \"1000\";\n  M['S'] = \"00110\";\n  M['T'] = \"00111\";\n  M['U'] = \"10011100\";\n  M['V'] = \"10011101\";\n  M['W'] = \"000010\";\n  M['X'] = \"10010010\";\n  M['Y'] = \"10010011\";\n  M['Z'] = \"10010000\";\n\n  for(char c = 'A'; c <= 'Z'; c++)\n    M_2[to_b((int)(c-'A'))] = c;\n \n  M_2[\"11010\"] = ' ';\n  M_2[\"11011\"] = '.';\n  M_2[\"11100\"] = ',';\n  M_2[\"11101\"] = '-';\n  M_2[\"11110\"] = '\\'';\n  M_2[\"11111\"] = '?';\n  \n}\n\n\nint main(){\n  make();\n  while(getline(cin,in)) solve(in);\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector< string > table1(128, string(\"\"));\nvector< char > table2(32, 0);\nvoid set(){\n    table1[65] = string(\"100101\");\n    table1[66] = string(\"10011010\");\n    table1[67] = string(\"0101\");\n    table1[68] = string(\"0001\");\n    table1[69] = string(\"110\");\n    table1[70] = string(\"01001\");\n    table1[71] = string(\"10011011\");\n    table1[72] = string(\"010000\");\n    table1[73] = string(\"0111\");\n    table1[74] = string(\"10011000\");\n    table1[75] = string(\"0110\");\n    table1[76] = string(\"00100\");\n    table1[77] = string(\"10011001\");\n    table1[78] = string(\"10011110\");\n    table1[79] = string(\"00101\");\n    table1[80] = string(\"111\");\n    table1[81] = string(\"10011111\");\n    table1[82] = string(\"1000\");\n    table1[83] = string(\"00110\");\n    table1[84] = string(\"00111\");\n    table1[85] = string(\"10011100\");\n    table1[86] = string(\"000010\");\n    table1[87] = string(\"000010\");\n    table1[88] = string(\"10010010\");\n    table1[89] = string(\"10010011\");\n    table1[90] = string(\"10010000\");\n    table1[32] = string(\"101\");\n    table1[39] = string(\"000000\");\n    table1[44] = string(\"000011\");\n    table1[45] = string(\"10010001\");\n    table1[46] = string(\"010001\");\n    table1[63] = string(\"000001\");\n    for(int i = 0; i < 26; i++){\n        table2[i] = 'A' + i;\n    }\n    table2[26] = ' ';\n    table2[27] = '.';\n    table2[28] = ',';\n    table2[29] = '-';\n    table2[30] = '\\'';\n    table2[31] = '?';\n}\n\nint bToDeci(string& s){\n    int ans = 0;\n    string::iterator it = s.begin();\n    for(int n = 0; n < 5; n++){\n        if( it == s.end() ) continue;\n        ans *= 2;\n        ans += *it - '0';\n        it++;\n    }\n    return ans;\n\n}\n\nchar getBlock(string& s, string::iterator& i){\n    string c = \"\";\n    for(int n = 0; n < 5 && i != s.end(); n++, i++){\n        c.append( i, i+1 );\n    }\n    return table2[ bToDeci( c ) ];\n}\n\nint main(){\n    set();\n    string data;\n    while( getline(cin, data) ){\n        string c;\n        c = string(\"\");\n        for(string::iterator it = data.begin(); it != data.end(); it++){\n            c.append( table1[*it] );\n        }\n        string::iterator it = c.begin();\n        while( it != c.end() ){\n            cout << getBlock(c, it);\n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <stack>\n#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n#include <string>\n#include <map>\n#include <cmath>\n\n#define rep(x,to) for(int x=0;x<to;x++)\n#define rep2(x,from,to) for(int x=from;x<to;x++)\n\nusing namespace std;\n\n\nint main(void){\nstring ws;\nmap<char,string> aa;\nmap<string,char> bb;\n \n\taa[' ']  = \"101\";\n\taa['\\''] = \"000000\";\n\taa[',']  = \"000011\";\n\taa['-']  = \"10010001\";\n\taa['.']  = \"010001\";\n\taa['?']  = \"000001\";\n\taa['A']  = \"100101\";\n\taa['B']  = \"10011010\";\n\taa['C']  = \"0101\";\n\taa['D']  = \"0001\";\n\taa['E']  = \"110\";\n\taa['F']  = \"01001\";\n\taa['G']  = \"10011011\";\n\taa['H']  = \"010000\";\n\taa['I']  = \"0111\";\n\taa['J']  = \"10011000\";\n\taa['K']  = \"0110\";\n\taa['L']  = \"00100\";\n\taa['M']  = \"10011001\";\n\taa['N']  = \"10011110\";\n\taa['O']  = \"00101\";\n\taa['P']  = \"111\";\n\taa['Q']  = \"10011111\";\n\taa['R']  = \"1000\";\n\taa['S']  = \"00110\";\n\taa['T']  = \"00111\";\n\taa['U']  = \"10011100\";\n\taa['V']  = \"10011101\";\n\taa['W']  = \"000010\";\n\taa['X']  = \"10010010\";\n\taa['Y']  = \"10010011\";\n\taa['Z']  = \"10010000\";\n \n\tbb[\"00000\"]  = 'A';\n\tbb[\"00001\"]  = 'B';\n\tbb[\"00010\"]  = 'C';\n\tbb[\"00011\"]  = 'D';\n\tbb[\"00100\"]  = 'E';\n\tbb[\"00101\"]  = 'F';\n\tbb[\"00110\"]  = 'G';\n\tbb[\"00111\"]  = 'H';\n\tbb[\"01000\"]  = 'I';\n\tbb[\"01001\"]  = 'J';\n\tbb[\"01010\"]  = 'K';\n\tbb[\"01011\"]  = 'L';\n\tbb[\"01100\"]  = 'M';\n\tbb[\"01101\"]  = 'N';\n\tbb[\"01110\"]  = 'O';\n\tbb[\"01111\"]  = 'P';\n\tbb[\"10000\"]  = 'Q';\n\tbb[\"10001\"]  = 'R';\n\tbb[\"10010\"]  = 'S';\n\tbb[\"10011\"]  = 'T';\n\tbb[\"10100\"]  = 'U';\n\tbb[\"10101\"]  = 'V';\n\tbb[\"10110\"]  = 'W';\n\tbb[\"10111\"]  = 'X';\n\tbb[\"11000\"]  = 'Y';\n\tbb[\"11001\"]  = 'Z';\n\tbb[\"11010\"]  = ' ';\n\tbb[\"11011\"]  = '.';\n\tbb[\"11100\"]  = ',';\n\tbb[\"11101\"]  = '-';\n\tbb[\"11110\"]  = '\\'';\n\tbb[\"11111\"]  = '?';\n\t\n\twhile(getline(cin,ws)){\n\n\t\tstring wws=\"\", ans=\"\";\n\t\trep(i, ws.size()) wws += aa[ws[i]];\n\t\twhile(wws.size() % 5 !=0) wws += '0';\n//\t\tcout << wws <<endl;\n\t\tfor(int i=0;i<=wws.size() ;i+=5){\n\t\t\tstring mws = wws.substr(i,5);\n\t\t\tans += bb[mws];\n\t\t}\n//\t\tif(cin.eof()) break;\n\t\tcout << ans << endl;\n\t}\n\n\treturn 0;\n\t\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\nusing namespace std;\n\nint main()\n{\n\tint i, j;\n\tstring s, st;\n\tmap<char, string> toCode;\n\tmap<string, char> toA;\n\n\ttoCode[' '] = \"101\";\n\ttoCode['\\''] = \"000000\";\n\ttoCode[','] = \"000011\";\n\ttoCode['-'] = \"10010001\";\n\ttoCode['.'] = \"010001\";\n\ttoCode['?'] = \"000001\";\n\ttoCode['A'] = \"100101\";\n\ttoCode['B'] = \"10011010\";\n\ttoCode['C'] = \"0101\";\n\ttoCode['D'] = \"0001\";\n\ttoCode['E'] = \"110\";\n\ttoCode['F'] = \"01001\";\n\ttoCode['G'] = \"10011011\";\n\ttoCode['H'] = \"010000\";\n\ttoCode['I'] = \"0111\";\n\ttoCode['J'] = \"10011000\";\n\ttoCode['K'] = \"0110\";\n\ttoCode['L'] = \"00100\";\n\ttoCode['M'] = \"10011001\";\n\ttoCode['N'] = \"10011110\";\n\ttoCode['O'] = \"00101\";\n\ttoCode['P'] = \"111\";\n\ttoCode['Q'] = \"10011111\";\n\ttoCode['R'] = \"1000\";\n\ttoCode['S'] = \"00110\";\n\ttoCode['T'] = \"00111\";\n\ttoCode['U'] = \"10011100\";\n\ttoCode['V'] = \"10011101\";\n\ttoCode['W'] = \"000010\";\n\ttoCode['X'] = \"10010010\";\n\ttoCode['Y'] = \"10010011\";\n\ttoCode['Z'] = \"10010000\";\n\ttoA[\"00000\"] = 'A';\n\ttoA[\"00001\"] = 'B';\n\ttoA[\"00010\"] = 'C';\n\ttoA[\"00011\"] = 'D';\n\ttoA[\"00100\"] = 'E';\n\ttoA[\"00101\"] = 'F';\n\ttoA[\"00110\"] = 'G';\n\ttoA[\"00111\"] = 'H';\n\ttoA[\"01000\"] = 'I';\n\ttoA[\"01001\"] = 'J';\n\ttoA[\"01010\"] = 'K';\n\ttoA[\"01011\"] = 'L';\n\ttoA[\"01100\"] = 'M';\n\ttoA[\"01101\"] = 'N';\n\ttoA[\"01110\"] = 'O';\n\ttoA[\"01111\"] = 'P';\n\ttoA[\"10000\"] = 'Q';\n\ttoA[\"10001\"] = 'R';\n\ttoA[\"10010\"] = 'S';\n\ttoA[\"10011\"] = 'T';\n\ttoA[\"10100\"] = 'U';\n\ttoA[\"10101\"] = 'V';\n\ttoA[\"10110\"] = 'W';\n\ttoA[\"10111\"] = 'X';\n\ttoA[\"11000\"] = 'Y';\n\ttoA[\"11001\"] = 'Z';\n\ttoA[\"11010\"] = ' ';\n\ttoA[\"11011\"] = '.';\n\ttoA[\"11100\"] = ',';\n\ttoA[\"11101\"] = '-';\n\ttoA[\"11110\"] = '\\'';\n\ttoA[\"11111\"] = '?';\n\n\twhile (getline(cin, s)) {\n\t\tst = \"\";\n\t\tfor (i = 0; i < s.size(); i++) st += toCode[s[i]];\n\n\t\tif ( st.size()%5 )\n\t\t\tfor (i = 5 - st.size()%5; i > 0; i--)\n\t\t\t\tst += \"0\";\n\n\t\tfor (i = 0; i < st.size()/5; i++) {\n\t\t\ts = st.substr( i*5, 5 );\n\t\t\tcout << toA[s];\n\t\t}\n\t\tcout<<endl;\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\n\nmap<char,string> l1;\nmap<string,char> l2;\nvoid init(){\nl1[' ']=\"101\";\nl1['\\'']=\"000000\";\nl1[',']=\"000011\";\nl1['-']=\"10010001\";\nl1['.']=\"010001\";\nl1['?']=\"000001\";\nl1['A']=\"100101\";\nl1['B']=\"10011010\";\nl1['C']=\"0101\";\nl1['D']=\"0001\";\nl1['E']=\"110\";\nl1['F']=\"01001\";\nl1['G']=\"10011011\";\nl1['H']=\"010000\";\nl1['I']=\"0111\";\nl1['J']=\"10011000\";\nl1['K']=\"0110\";\nl1['L']=\"00100\";\nl1['M']=\"10011001\";\nl1['N']=\"10011110\";\nl1['O']=\"00101\";\nl1['P']=\"111\";\nl1['Q']=\"10011111\";\nl1['R']=\"1000\";\nl1['S']=\"00110\";\nl1['T']=\"00111\";\nl1['U']=\"10011100\";\nl1['V']=\"10011101\";\nl1['W']=\"000010\";\nl1['X']=\"10010010\";\nl1['Y']=\"10010011\";\nl1['Z']=\"10010000\";\n\n\nl2[\"00000\"]='A';\nl2[\"00001\"]='B';\nl2[\"00010\"]='C';\nl2[\"00011\"]='D';\nl2[\"00100\"]='E';\nl2[\"00101\"]='F';\nl2[\"00110\"]='G';\nl2[\"00111\"]='H';\nl2[\"01000\"]='I';\nl2[\"01001\"]='J';\nl2[\"01010\"]='K';\nl2[\"01011\"]='L';\nl2[\"01100\"]='M';\nl2[\"01101\"]='N';\nl2[\"01110\"]='O';\nl2[\"01111\"]='P';\nl2[\"10000\"]='Q';\nl2[\"10001\"]='R';\nl2[\"10010\"]='S';\nl2[\"10011\"]='T';\nl2[\"10100\"]='U';\nl2[\"10101\"]='V';\nl2[\"10110\"]='W';\nl2[\"10111\"]='X';\nl2[\"11000\"]='Y';\nl2[\"11001\"]='Z';\nl2[\"11010\"]=' ';\nl2[\"11011\"]='.';\nl2[\"11100\"]=',';\nl2[\"11101\"]='-';\nl2[\"11110\"]='\\'';\nl2[\"11111\"]='?';\n}\n\n\nstring solve(string s){\n  string tmp = \"\";\n  for(int i=0;i<s.size();i++){\n    tmp += l1[s[i]];\n  }\n  while(tmp.size()%5!=0){\n    tmp += '0';\n  }\n  \n  string res = \"\";\n  while(tmp.size()!=0){\n    res += l2[tmp.substr(0,5)];\n    tmp = tmp.substr(5);\n  }\n\n  return res;\n}\n\n\nint main(){\n  init();\n  string s;\n  while(getline(cin,s)){\n    cout<<solve(s)<<endl;\n  }\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring letter_to_sign[35] = {\n\n  \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\n  \"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n  \"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n  \"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"\n\n};\n\nstring sign_to_letter[35] = {\n\n  \"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\n  \"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\n  \"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\n  \"Y\",\"Z\",\" \",\".\",\",\",\"-\",\"\\'\",\"?\"\n\n};\n\nint main() {\n\n  string buf;\n\n  string str;\n  string ans;\n\n  int l;\n\n\n  while(getline(cin,buf)) {\n\n    str=\"\";\n\n    for(int i=0;i<(int)buf.length();i++) {\n\n      if(buf[i]==' ') str+=letter_to_sign[0];\n\n      else if(buf[i]=='\\'') str+=letter_to_sign[1];\n\n      else if(buf[i]==',') str+=letter_to_sign[2];\n\n      else if(buf[i]=='-') str+=letter_to_sign[3];\n\n      else if(buf[i]=='.') str+=letter_to_sign[4];\n\n      else if(buf[i]=='?') str+=letter_to_sign[5];\n\n      else str+=letter_to_sign[buf[i]-'A'+6];\n\n    }\n\n    l=str.length();\n\n    for(int i=0;i<5-l%5;i++) str+=\"0\";\n\n    //cout << str << endl;\n\n    l=str.length();\n\n    ans=\"\";\n\n    for(int i=0;i<l;i=i+5) {\n\n      int index;\n\n      index=16*(str[i]-'0')+8*(str[i+1]-'0')+4*(str[i+2]-'0')+2*(str[i+3]-'0')+(str[i+4]-'0');\n\n      ans+=sign_to_letter[index];\n\n    }\n\n    cout << ans << endl;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <cstdio>\n#include <cstdlib>\nusing namespace std;\n\nconst string table[] ={\n\t\"100101\",\n\t\"10011010\",\n\t\"0101\",\n\t\"0001\",\n\t\"110\",\n\t\"01001\",\n\t\"10011011\",\n\t\"010000\",\n\t\"0111\",\n\t\"10011000\",\n\t\"0110\",\n\t\"00100\",\n\t\"10011001\",\n\t\"10011110\",\n\t\"00101\",\n\t\"111\",\n\t\"10011111\",\n\t\"1000\",\n\t\"00110\",\n\t\"00111\",\n\t\"10011100\",\n\t\"10011101\",\n\t\"000010\",\n\t\"10010010\",\n\t\"10010011\",\n\t\"10010000\",\n};\n\nvoid out( const string &s ){\n\tint n = strtol( s.substr( 0, 5 ).c_str(), 0, 2 );\n\tif( n < 26 )\tputchar( n + 'A' );\n\telse putchar( \" .,-'?\"[n - 26] );\n}\n\nint main(){\n\tchar c;\n\tstring s;\n\tfor(; c = getchar(), c != EOF; ){\n\t\tswitch(c){\n\t\t\tcase '\\n':\n\t\t\t\tif( s.length() > 0 ){\n\t\t\t\t\ts += \"0000\" + ( s.length() - 1 );\n\t\t\t\t\tout(s);\n\t\t\t\t}\n\t\t\t\tputs(\"\");\n\t\t\t\ts = \"\";\n\t\t\t\tbreak;\n\t\t\tcase ' ':\n\t\t\t\ts += \"101\";\n\t\t\t\tbreak;\n\t\t\tcase '\\'':\n\t\t\t\ts += \"000000\";\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\ts += \"10010001\";\n\t\t\t\tbreak;\n\t\t\tcase '.':\n\t\t\t\ts += \"010001\";\n\t\t\t\tbreak;\n\t\t\tcase '?':\n\t\t\t\ts += \"000001\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ts += table[c - 'A'];\n\t\t\t\tbreak;\n\t\t}\n\t\twhile( s.length() > 4 ){\n\t\t\tout( s );\n\t\t\ts = s.substr(5);\n\t\t}\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long int ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<pair<int, int> > vii;\n#define rrep(i, m, n) for(int (i)=(m); (i)<(n);  (i)++)\n#define erep(i, m, n) for(int (i)=(m); (i)<=(n); (i)++)\n#define  rep(i, n)    for(int (i)=0; (i)<(n);  (i)++)\n#define rrev(i, m, n) for(int (i)=(n)-1; (i)>=(m); (i)--)\n#define erev(i, m, n) for(int (i)=(n); (i)>=(m); (i)--)\n#define  rev(i, n)    for(int (i)=(n)-1; (i)>=0; (i)--)\n#define vrep(i, c)    for(__typeof((c).begin())i=(c).begin(); i!=(c).end(); i++)\n#define  ALL(v)       (v).begin(), (v).end()\n#define mp            make_pair\n#define pb            push_back\ntemplate<class T, class S> inline bool minup(T& m, S x){ return m>(T)x ? (m=(T)x, true) : false; }\ntemplate<class T, class S> inline bool maxup(T& m, S x){ return m<(T)x ? (m=(T)x, true) : false; }\n\nconst int    INF = 1000000000;\nconst ll     MOD = 1000000007LL;\nconst double EPS = 1E-12;\n\nmap<char, string> en;\nmap<string, string> de;\nstring s, t;\nstring in;\nint n;\n\nvoid encode()\n{\n  en[' '] = \"101\";\n  en['\\''] = \"000000\";\n  en[','] = \"000011\";\n  en['-'] = \"10010001\";\n  en['.'] = \"010001\";\n  en['?'] = \"000001\";\n  en['A'] = \"100101\";\n  en['B'] = \"10011010\";\n  en['C'] = \"0101\";\n  en['D'] = \"0001\";\n  en['E'] = \"110\";\n  en['F'] = \"01001\";\n  en['G'] = \"10011011\";\n  en['H'] = \"010000\";\n  en['I'] = \"0111\";\n  en['J'] = \"10011000\";\n  en['K'] = \"0110\";\n  en['L'] = \"00100\";\n  en['M'] = \"10011001\";\n  en['N'] = \"10011110\";\n  en['O'] = \"00101\";\n  en['P'] = \"111\";\n  en['Q'] = \"10011111\";\n  en['R'] = \"1000\";\n  en['S'] = \"00110\";\n  en['T'] = \"00111\";\n  en['U'] = \"10011100\";\n  en['V'] = \"10011101\";\n  en['W'] = \"000010\";\n  en['X'] = \"10010010\";\n  en['Y'] = \"10010011\";\n  en['Z'] = \"10010000\";\n}\n\nvoid decode()\n{\n  de[\"00000\"] = \"A\";\n  de[\"00001\"] = \"B\";\n  de[\"00010\"] = \"C\";\n  de[\"00011\"] = \"D\";\n  de[\"00100\"] = \"E\";\n  de[\"00101\"] = \"F\";\n  de[\"00110\"] = \"G\";\n  de[\"00111\"] = \"H\";\n  de[\"01000\"] = \"I\";\n  de[\"01001\"] = \"J\";\n  de[\"01010\"] = \"K\";\n  de[\"01011\"] = \"L\";\n  de[\"01100\"] = \"M\";\n  de[\"01101\"] = \"N\";\n  de[\"01110\"] = \"O\";\n  de[\"01111\"] = \"P\";\n  de[\"10000\"] = \"Q\";\n  de[\"10001\"] = \"R\";\n  de[\"10010\"] = \"S\";\n  de[\"10011\"] = \"T\";\n  de[\"10100\"] = \"U\";\n  de[\"10101\"] = \"V\";\n  de[\"10110\"] = \"W\";\n  de[\"10111\"] = \"X\";\n  de[\"11000\"] = \"Y\";\n  de[\"11001\"] = \"Z\";\n  de[\"11010\"] = \" \";\n  de[\"11011\"] = \".\";\n  de[\"11100\"] = \",\";\n  de[\"11101\"] = \"-\";\n  de[\"11110\"] = \"'\";\n  de[\"11111\"] = \"?\";\n}\n\nint main()\n{\n  encode();\n  decode();\n\n  while(getline(cin, s)) in += s + \" \";\n\n  rep(i, in.size()-1) t += en[in[i]];\n  n = (5 - t.size() % 5) % 5;\n  rep(i, n) t += \"0\";\n\n  n = t.size() / 5;\n  rep(i, n) cout << de[t.substr(5*i, 5)];\n  cout << endl;\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<vector>\n#include<map>\n#include<set>\n#include<list>\n#include<cstdio>\n#include<cmath>\n#include<iomanip>\n#include<algorithm>\n#include<functional>\n#include<queue>\n#include<stack>\nusing namespace std;\nint main() {\n\tmap<char, string>a;\n\tstring h = \"'\";\n\ta.insert(map<char, string>::value_type(' ',\"101\"));\n\ta.insert(map<char, string>::value_type(h[0], \"000000\"));\n\ta.insert(map<char, string>::value_type(',', \"000011\"));\n\ta.insert(map<char, string>::value_type('-', \"10010001\"));\n\ta.insert(map<char, string>::value_type('.', \"010001\"));\n\ta.insert(map<char, string>::value_type('?', \"000001\"));\n\ta.insert(map<char, string>::value_type('A', \"100101\"));\n\ta.insert(map<char, string>::value_type('B', \"10011010\"));\n\ta.insert(map<char, string>::value_type('C', \"0101\"));\n\ta.insert(map<char, string>::value_type('D', \"0001\"));\n\ta.insert(map<char, string>::value_type('E', \"110\"));\n\ta.insert(map<char, string>::value_type('F', \"01001\"));\n\ta.insert(map<char, string>::value_type('G', \"10011011\"));\n\ta.insert(map<char, string>::value_type('H', \"010000\"));\n\ta.insert(map<char, string>::value_type('I', \"0111\"));\n\ta.insert(map<char, string>::value_type('J', \"10011000\"));\n\ta.insert(map<char, string>::value_type('K', \"0110\"));\n\ta.insert(map<char, string>::value_type('L', \"00100\"));\n\ta.insert(map<char, string>::value_type('M', \"10011001\"));\n\ta.insert(map<char, string>::value_type('N', \"10011110\"));\n\ta.insert(map<char, string>::value_type('O', \"00101\"));\n\ta.insert(map<char, string>::value_type('P', \"111\"));\n\ta.insert(map<char, string>::value_type('Q', \"10011111\"));\n\ta.insert(map<char, string>::value_type('R', \"1000\"));\n\ta.insert(map<char, string>::value_type('T', \"00111\"));\n\ta.insert(map<char, string>::value_type('U', \"10011100\"));\n\ta.insert(map<char, string>::value_type('V', \"10011101\"));\n\ta.insert(map<char, string>::value_type('W', \"000010\"));\n\ta.insert(map<char, string>::value_type('X', \"10010010\"));\n\ta.insert(map<char, string>::value_type('Y', \"10010011\"));\n\ta.insert(map<char, string>::value_type('Z', \"10010000\"));\n\tmap<string, char>b;\n\tb.insert(map<string, char>::value_type(\"00000\", 'A'));\n\tb.insert(map<string, char>::value_type(\"00001\", 'B'));\n\tb.insert(map<string, char>::value_type(\"00010\", 'C'));\n\tb.insert(map<string, char>::value_type(\"00011\", 'D'));\n\tb.insert(map<string, char>::value_type(\"00100\", 'E'));\n\tb.insert(map<string, char>::value_type(\"00101\", 'F'));\n\tb.insert(map<string, char>::value_type(\"00110\", 'G'));\n\tb.insert(map<string, char>::value_type(\"00111\", 'H'));\n\tb.insert(map<string, char>::value_type(\"01000\", 'I'));\n\tb.insert(map<string, char>::value_type(\"01001\", 'J'));\n\tb.insert(map<string, char>::value_type(\"01010\", 'K'));\n\tb.insert(map<string, char>::value_type(\"01011\", 'L'));\n\tb.insert(map<string, char>::value_type(\"01100\", 'M'));\n\tb.insert(map<string, char>::value_type(\"01101\", 'N'));\n\tb.insert(map<string, char>::value_type(\"01110\", 'O'));\n\tb.insert(map<string, char>::value_type(\"01111\", 'P'));\n\tb.insert(map<string, char>::value_type(\"10000\", 'Q'));\n\tb.insert(map<string, char>::value_type(\"10001\", 'R'));\n\tb.insert(map<string, char>::value_type(\"10010\", 'S'));\n\tb.insert(map<string, char>::value_type(\"10011\", 'T'));\n\tb.insert(map<string, char>::value_type(\"10100\", 'U'));\n\tb.insert(map<string, char>::value_type(\"10101\", 'V'));\n\tb.insert(map<string, char>::value_type(\"10110\", 'W'));\n\tb.insert(map<string, char>::value_type(\"10111\", 'X'));\n\tb.insert(map<string, char>::value_type(\"11000\", 'Y'));\n\tb.insert(map<string, char>::value_type(\"11001\", 'Z'));\n\tb.insert(map<string, char>::value_type(\"11010\", ' '));\n\tb.insert(map<string, char>::value_type(\"11011\", '.'));\n\tb.insert(map<string, char>::value_type(\"11100\", ','));\n\tb.insert(map<string, char>::value_type(\"11101\", '-'));\n\tb.insert(map<string, char>::value_type(\"11110\", h[0]));\n\tb.insert(map<string, char>::value_type(\"11111\", '?'));\n\tstring s;\n\twhile (getline(cin,s)) {\n\t\th = \"\";\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\th += a[s[i]];\n\t\t}\n\t\twhile (h.length() % 5 != 0) {\n\t\t\th += \"0\";\n\t\t}\n\t\tstring d = \"\";\n\t\tfor (int i = 0; i < h.length(); i += 5) {\n\t\t\tstring e = h.substr(i, 5);\n\t\t\td += b[e];\n\t\t}\n\t\tcout << d << endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<map>\nusing namespace std;\n\nmap<string, string> wtoi;\nmap<string, string> itow;\n\nvoid make_dictonary1() {\n\twtoi[\" \"] = \"101\"; wtoi[\"'\"] = \"000000\"; wtoi[\",\"] = \"000011\"; wtoi[\"-\"] = \"10010001\"; wtoi[\".\"] = \"010001\";\n\twtoi[\"?\"] = \"000001\"; wtoi[\"A\"] = \"100101\"; wtoi[\"B\"] = \"10011010\"; wtoi[\"C\"] = \"0101\"; wtoi[\"D\"] = \"0001\";\n\twtoi[\"E\"] = \"110\"; wtoi[\"F\"] = \"01001\"; wtoi[\"G\"] = \"10011011\"; wtoi[\"H\"] = \"010000\"; wtoi[\"I\"] = \"0111\";\n\twtoi[\"J\"] = \"10011000 \"; wtoi[\"K\"] = \"0110\"; wtoi[\"L\"] = \"00100\"; wtoi[\"M\"] = \"10011001\"; wtoi[\"N\"] = \"00101\";\n\twtoi[\"O\"] = \"00101\"; wtoi[\"P\"] = \"111\"; wtoi[\"Q\"] = \"10011111\"; wtoi[\"R\"] = \"1000\"; wtoi[\"S\"] = \"00110\";\n\twtoi[\"T\"] = \"00111\"; wtoi[\"U\"] = \"10011100\"; wtoi[\"V\"] = \"10011101\"; wtoi[\"W\"] = \"000010\"; wtoi[\"X\"] = \"10010010\"; \n\twtoi[\"Y\"] = \"10010011\"; wtoi[\"Z\"] = \"10010000\";\n}\nvoid make_dictonary2() {\n\tint i, j;\n\tfor( i = 0; i < 26; i++ ) {\n\t\tchar c = 'A' + i;\n\t\tstring str;\n\t\tstr += c;\n\t\tstring in;\n\t\tfor( j = 4; j >= 0; j-- ) {\n\t\t\tif ( (i>>(j))%2 )\n\t\t\t\tin += '1';\n\t\t\telse\n\t\t\t\tin += '0';\n\t\t}\n\t\titow[in] = str;\n\t}\n\titow[\"11011\"] = \".\"; itow[\"11100\"] = \",\"; itow[\"11101\"] = \"-\"; itow[\"11110\"] = \"'\"; itow[\"11111\"] = \"?\";\n}\n\nchar buf[512];\nint buflen;\n\nint main() {\n\tmake_dictonary1();\n\tmake_dictonary2();\n\tint i, j;\n\tgets(buf);\n\tbuflen = strlen(buf);\n\t\n\tstring intejor;\n\t\n\tfor( i = 0; i < buflen; i++ ) {\n\t\tstring in;\n\t\tin += buf[i];\n\t\tintejor += wtoi[in];\n\t}\n\t\n\tstring str[514];\n\tfor( i = 0; i < intejor.length(); i+=5 ) {\n\t\tfor( int j = i; j < i + 5; j++ ) {\n\t\t\tif ( j >= intejor.length() )\n\t\t\t\tstr[i] += '0';\n\t\t\telse\n\t\t\t\tstr[i] += intejor[j];\n\t\t}\n\t\t//cout << str[i] << endl;\n\t}\n\t\n\tfor( j = 0; j < i; j++ ) {\n\t\tcout << itow[str[j]];\n\t}\n\tcout << endl;\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\nusing namespace std;\nstring L=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",A=\" ',-.?\"+L,C=L+\" .,-'?\";\nvector<string> B={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\n\t\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\t\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n\t\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\nint bin2dec(string s){\n\tint x=0,i=0;\n\tfor(;i<s.size();i++)x=x*2+s[i]-'0';\n\treturn x;\n}\nint main(){\n\tstring s,s1;\n\tint i,n;\n\twhile(getline(cin,s)){\n\t\ts1=\"\";\n\t\tfor(i=0;i<s.size();i++)s1+=B[A.find(s[i])];\n\t\tn=s1.size()%5;\n\t\tif(n!=0)s1+=string(5-n,'0');\n\t\ts=\"\";\n\t\tfor(i=0;i<s1.size();i+=5)s+=C[bin2dec(s1.substr(i, 5))];\n\t\tcout<<s<< endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\n\nstd::string encode(char c){\n    if(c == ' ') return \"101\";\n    if(c == '\\'') return \"000000\";\n    if(c == ',') return \"000011\";\n    if(c == '-') return \"10010001\";\n    if(c == '.') return \"010001\";\n    if(c == '?') return \"000001\";\n    if(c == 'A') return \"100101\";\n    if(c == 'B') return \"10011010\";\n    if(c == 'C') return \"0101\";\n    if(c == 'D') return \"0001\";\n    if(c == 'E') return \"110\";\n    if(c == 'F') return \"01001\";\n    if(c == 'G') return \"10011011\";\n    if(c == 'H') return \"010000\";\n    if(c == 'I') return \"0111\";\n    if(c == 'J') return \"10011000\";\n    if(c == 'K') return \"0110\";\n    if(c == 'L') return \"00100\";\n    if(c == 'M') return \"10011001\";\n    if(c == 'N') return \"10011110\";\n    if(c == 'O') return \"00101\";\n    if(c == 'P') return \"111\";\n    if(c == 'Q') return \"10011111\";\n    if(c == 'R') return \"1000\";\n    if(c == 'S') return \"00110\";\n    if(c == 'T') return \"00111\";\n    if(c == 'U') return \"10011100\";\n    if(c == 'V') return \"10011101\";\n    if(c == 'W') return \"000010\";\n    if(c == 'X') return \"10010010\";\n    if(c == 'Y') return \"10010011\";\n    if(c == 'Z') return \"10010000\";\n    return \"\";\n}\n\nstd::string encode2(std::string s){\n    if(s == \"00000\") return \"A\";\n    if(s == \"00001\") return \"B\";\n    if(s == \"00010\") return \"C\";\n    if(s == \"00011\") return \"D\";\n    if(s == \"00100\") return \"E\";\n    if(s == \"00101\") return \"F\";\n    if(s == \"00110\") return \"G\";\n    if(s == \"00111\") return \"H\";\n    if(s == \"01000\") return \"I\";\n    if(s == \"01001\") return \"J\";\n    if(s == \"01010\") return \"K\";\n    if(s == \"01011\") return \"L\";\n    if(s == \"01100\") return \"M\";\n    if(s == \"01101\") return \"N\";\n    if(s == \"01110\") return \"O\";\n    if(s == \"01111\") return \"P\";\n    if(s == \"10001\") return \"R\";\n    if(s == \"10010\") return \"S\";\n    if(s == \"10011\") return \"T\";\n    if(s == \"10100\") return \"U\";\n    if(s == \"10101\") return \"V\";\n    if(s == \"10110\") return \"W\";\n    if(s == \"10111\") return \"X\";\n    if(s == \"11000\") return \"Y\";\n    if(s == \"11001\") return \"Z\";\n    if(s == \"11010\") return \" \";\n    if(s == \"11011\") return \".\";\n    if(s == \"11100\") return \",\";\n    if(s == \"11101\") return \"-\";\n    if(s == \"11110\") return \"'\";\n    if(s == \"11111\") return \"?\";\n    return \"\";\n}\n\nint main(){\n    std::string str, tmp, ans;\n    while(getline(std::cin, str)){\n        tmp = \"\", ans = \"\";\n        for(int i = 0; i < str.size(); i++){\n            tmp += encode(str[i]);\n        }\n\n        int n = 5 - (tmp.size() % 5);\n        for(int i = 0; i < n; i++) tmp += \"0\";\n\n        for(int i = 0; i < tmp.size() / 5; i++){\n            ans += encode2(tmp.substr(i * 5, 5));\n        }\n\n        std::cout << ans << std::endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "//0088\n//題意：暗号表を用いて暗号化し、複合表を用いて複合化するらしい\n//\n//入力：１行の文字列(データセット)\n//制約：文字数は1~100\n//出力：暗号文\n//解決策：がんばる\n//タイム：\n\n#include <bits/stdc++.h>\nusing namespace std;\nmap<char, string> enc;\nchar decTable[] = {'A','B','C','D','E','F','G','H','I','J','K',\n    'L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',' ', '.',',','-', '\\'', '?'}; //複合表\n\nvoid init() {\n    enc[' '] = \"101\";enc['\\''] = \"000000\";enc[','] = \"000011\";enc['-'] = \"10010001\";enc['.'] = \"010001\";enc['?']=\"000001\";\n    enc['A']=\"100101\";enc['B']=\"10011010\";enc['C']=\"0101\";enc['D']=\"0001\";enc['E']=\"110\";enc['F']=\"01001\";enc['G']=\"10011011\";enc['H']=\"010000\";enc['I']=\"0111\";enc['J']=\"10011000\";enc['K']=\"0110\";enc['L']=\"00100\";enc['M']=\"10011001\";\n    enc['N']=\"10011110\";enc['O']=\"00101\";enc['P']=\"111\";enc['Q']=\"10011111\";enc['R']=\"1000\";enc['S']=\"00110\";enc['T']=\"00111\";enc['U']=\"10011100\";enc['V']=\"10011101\";enc['W']=\"000010\";enc['X']=\"10010010\";enc['Y']=\"10010011\";enc['Z']=\"10010000\";\n}\n\nvector<string> encode(string text) {\n    string tmp = \"\";\n    vector<string> res;\n    for(int r = 0; r < text.length(); r++) { //とりあえずばーっと連結\n        tmp += enc[text[r]];\n    }\n    for(int r = 0; r + 5 < tmp.length(); r+=5) { //区切る\n        res.push_back(tmp.substr(r, 5));\n    }\n    \n    //0を付加\n    int ex = tmp.size() % 5;\n    if(ex != 0) {\n        string edge = tmp.substr(tmp.length() - ex, ex);\n        for(int r = 0; r < 5 - ex; r++) {\n            edge += \"0\";\n        }\n        res.push_back(edge);\n    }\n    \n    for(int r = 0; r < res.size(); r++) {\n        \n    }\n    \n    return(res);\n}\n\nint string_toi(string bin) {\n    int base = 2, weight = 0;\n    int res = 0;\n    for(int r = (int)bin.length() - 1; r >= 0; r--) {\n        if(bin[r] == '1') res += pow(base, weight);\n        weight++;\n    }\n    return(res);\n}\n\nvoid solve(string input) {\n    vector<string> ans = encode(input);\n    for(int r = 0; r < ans.size(); r++) {\n        int num = string_toi(ans[r]);\n        putchar(decTable[num]);\n    }\n    putchar('\\n');\n}\n\n\nint main(void) {\n    init();\n    string input;\n    while(getline(cin, input)) {\n        solve(input);\n    }\n    return(0);\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n#include <cstdlib>\nusing namespace std;\n\nint main(){\n  map<char,string> e;\n  e[' ']=\"101\";\n  e['\\'']=\"000000\";\n  e[',']=\"000011\";\n  e['-']=\"10010001\";\n  e['.']=\"010001\";\n  e['?']=\"000001\";\n  e['A']=\"100101\";e['B']=\"10011010\";e['C']=\"0101\";\n  e['D']=\"0001\";e['E']=\"110\";e['F']=\"01001\";\n  e['G']=\"10011011\";e['H']=\"010000\";e['I']=\"0111\";\n  e['J']=\"10011000\";e['K']=\"0110\";e['L']=\"00100\";\n  e['M']=\"10011001\";e['N']=\"10011110\";e['O']=\"00101\";\n  e['P']=\"111\";e['Q']=\"10011111\";e['R']=\"1000\";\n  e['S']=\"00110\";e['T']=\"00111\";e['U']=\"10011100\";\n  e['V']=\"10011101\";e['W']=\"000010\";e['X']=\"10010010\";\n  e['Y']=\"10010011\";e['Z']=\"10010000\";\n  string s,t,a;\n  char d[32];\n  for(int i=0;i<26;++i) d[i]=i+'A';\n  d[26]=' ';d[27]='.';d[28]=',';d[29]='-';d[30]='\\'';d[31]='?';\n  while(getline(cin,s)){\n    t=\"\";a=\"\";\n    for(string::iterator it=s.begin();it!=s.end();++it) t+=e[*it];\n    if(t.size()%5){\n      for(int i=t.size()-t.size()/5*5;i<5;++i) t+='0';\n    }\n    for(int i=0;i<t.size()/5*5;i+=5) a+=d[strtol(t.substr(i,5).c_str(),NULL,2)];\n    cout<<a<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\nusing namespace std;\n\nint main()\n{\n  map<char, string> c2s;\n  c2s[' '] = \"101\";\n  c2s['\\''] = \"000000\";\n  c2s[','] = \"000011\";\n  c2s['-'] = \"10010001\";\n  c2s['.'] = \"010001\";\n  c2s['?'] = \"000001\";\n  c2s['A'] = \"100101\";\n  c2s['B'] = \"10011010\";\n  c2s['C'] = \"0101\";\n  c2s['D'] = \"0001\";\n  c2s['E'] = \"110\";\n  c2s['F'] = \"01001\";\n  c2s['G'] = \"10011011\";\n  c2s['H'] = \"010000\";\n  c2s['I'] = \"0111\";\n  c2s['J'] = \"10011000\";\n  c2s['K'] = \"0110\";\n  c2s['L'] = \"00100\";\n  c2s['M'] = \"10011001\";\n  c2s['N'] = \"10011110\";\n  c2s['O'] = \"00101\";\n  c2s['P'] = \"111\";\n  c2s['Q'] = \"10011111\";\n  c2s['R'] = \"1000\";\n  c2s['S'] = \"00110\";\n  c2s['T'] = \"00111\";\n  c2s['U'] = \"10011100\";\n  c2s['V'] = \"10011101\";\n  c2s['W'] = \"000010\";\n  c2s['X'] = \"10010010\";\n  c2s['Y'] = \"10010011\";\n  c2s['Z'] = \"10010000\";\n\n  map<string, char> s2c;\n  s2c[\"00000\"] = 'A';\n  s2c[\"00001\"] = 'B';\n  s2c[\"00010\"] = 'C';\n  s2c[\"00011\"] = 'D';\n  s2c[\"00100\"] = 'E';\n  s2c[\"00101\"] = 'F';\n  s2c[\"00110\"] = 'G';\n  s2c[\"00111\"] = 'H';\n  s2c[\"01000\"] = 'I';\n  s2c[\"01001\"] = 'J';\n  s2c[\"01010\"] = 'K';\n  s2c[\"01011\"] = 'L';\n  s2c[\"01100\"] = 'M';\n  s2c[\"01101\"] = 'N';\n  s2c[\"01110\"] = 'O';\n  s2c[\"01111\"] = 'P';\n  s2c[\"10000\"] = 'Q';\n  s2c[\"10001\"] = 'R';\n  s2c[\"10010\"] = 'S';\n  s2c[\"10011\"] = 'T';\n  s2c[\"10100\"] = 'U';\n  s2c[\"10101\"] = 'V';\n  s2c[\"10110\"] = 'W';\n  s2c[\"10111\"] = 'X';\n  s2c[\"11000\"] = 'Y';\n  s2c[\"11001\"] = 'Z';\n  s2c[\"11010\"] = ' ';\n  s2c[\"11011\"] = '.';\n  s2c[\"11100\"] = ',';\n  s2c[\"11101\"] = '-';\n  s2c[\"11110\"] = '\\'';\n  s2c[\"11111\"] = '?';\n\n  string s;\n  while (getline(cin, s)) {\n    string e1 = \"\";\n    for (unsigned int i = 0; i < s.size(); ++i) {\n      if (c2s.find(s[i]) != c2s.end())\n\te1 += c2s[s[i]];\n    }\n\n    int add_zero = 5 - e1.size()%5;\n    for (int i = 0; i < add_zero; ++i)\n      e1 += \"0\";\n\n    string e2 = \"\";\n    for (int i = 0; i < e1.size(); i += 5)\n      e2 += s2c[e1.substr(i, 5)];\n    cout << e2 << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n\n  string wd = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  string bd[32] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\" };\n  string od = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n  string input;\n\n  while( true ) {\n    if ( cin.eof() ) break;\n    getline( cin, input );\n    cin.ignore();\n\n    string k = \"\";\n\n    for( int l = 0; l < input.size(); l++ ) {\n      char in = input[l];\n      for ( int i = 0; i < 32; i++ ) {\n\tif ( in == wd[i] ) {\n\t  k += bd[i];\n\t  break;\n\t}\n      }\n    }\n    k += \"0000\";\n    for ( int i = 0; i < k.size(); i+=5 ) {\n      int x = 0;\n      for ( int j = 0; j < 5; j++ ) {\n\tx = x * 2 + k[i+j] - '0';\n      }\n      cout << od[x];\n    }\n    cout << endl;\n\n  }\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nstring a[32] = {\"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\"};\nstring b = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nstring c[32] = {\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"};\nstring d = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint main(){\n    string s;\n    map<string, string> p, q;\n    for(int i=0; i< 32; i++){p[b.substr(i, 1)] = a[i]; q[c[i]] = d.substr(i, 1);}\n    while(getline(cin, s)){\n        string t, ret;\n        for(int i=0; i< s.size(); i++) t += p[s.substr(i, 1)];\n        int diff = 5-t.size()%5;\n        if(diff != 5)for(int i=0; i < diff; i++) t+=\"0\";\n        for(int i=0; i < t.size(); i+=5) ret += q[t.substr(i, 5)];\n        cout << ret << endl;\n    }\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#include<cstdlib>\nusing namespace std;\nint main(){\nlong i,j,k;\nstring s,t,u[59]={\n\"101\",\"\",\"\",\"\",\"\",\"\",\"\",\"000000\",\"\",\"\",\n\"\",\"\",\"000011\",\"10010001\",\"010001\",\"\",\"\",\"\",\"\",\"\",\n\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n\"\",\"000001\",\"\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\n\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\n\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\",\n},v=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nwhile(getline(cin,s)){\nfor(t=\"\",i=0;i<s.size();i++)t+=u[s[i]-32];\nj=t.size();\nk=((j-1)/5+1)*5;\nfor(i=0;i<k-j;i++)t+='0';\nfor(i=j=0;i<k;i++){\nif(i>0&&i%5==0){cout<<v[j];j=0;}\nj<<=1;j+=t[i]-48;\n}\ncout<<v[j]<<endl;\n}\nreturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <string>\n#include <vector>\n#include <iostream>\nusing namespace std;\nstring e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\nvector<string> s1 = {\n\t\"100101\", \"10011010\", \"0101\", \"0001\", \"110\",\n\t\"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\",\n\t\"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\",\n\t\"111\", \"10011111\", \"1000\", \"00110\", \"00111\",\n\t\"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\",\n\t\"10010000\", \"101\", \"010001\", \"000011\", \"10010001\",\n\t\"000000\", \"000001\"\n};\nvector<string> s2 = {\n\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \"01000\", \"01001\",\n\t\"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\",\n\t\"10100\", \"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\",\n\t\"11110\", \"11111\"\n};\nstring s;\nint main() {\n\twhile (true) {\n\t\ts = \"\";\n\t\twhile (s == \"\") getline(cin, s);\n\t\tstring t;\n\t\tfor (int i = 0; i < s.size(); i++) {\n\t\t\tfor (int j = 0; j < e.size(); j++) {\n\t\t\t\tif (s[i] == e[j]) t += s1[j];\n\t\t\t}\n\t\t}\n\t\twhile (t.size() % 5 != 0) t += \"0\";\n\t\tstring ret = \"\";\n\t\tfor (int i = 0; i < t.size(); i += 5) {\n\t\t\tstring u = t.substr(i, 5);\n\t\t\tfor (int j = 0; j < e.size(); j++) {\n\t\t\t\tif (u == s2[j]) ret += e[j];\n\t\t\t}\n\t\t}\n\t\tcout << ret << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <map>\n\nusing namespace std;\n\nconst string STBL1 = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst string CODE1[] = {\n\"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\",\n};\nconst string STBL2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint main() {\n    cin.tie(0);\n    ios::sync_with_stdio(0);\n\n    map<char,string> dict;\n    for(int i = 0; i < 32; ++i) {\n        dict[STBL1[i]] = CODE1[i];\n    }\n\n    string line;\n    while(getline(cin, line)) {\n        string codestr;\n        for(string::const_iterator it = line.begin(); it != line.end(); ++it) {\n            codestr += dict[*it];\n        }\n        codestr += string((5-codestr.size()%5) % 5, '0');\n        string res;\n        for(int i = 0; i < codestr.size(); i += 5) {\n            const string num = codestr.substr(i, 5);\n            int val = 0;\n            for(int j = 0; j < 5; ++j) {\n                val <<= 1;\n                val += num[j]-'0';\n            }\n            res += STBL2[val];\n        }\n        cout << res << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <map>\n#include <string>\nusing namespace std;\n\nint main(){\n  map<char,string> data1;\n  map<string,char> data2;\n\n  data1[' ']=\"101\";\n  data1['\\'']=\"000000\";\n  data1[',']=\"000011\";\n  data1['-']=\"10010001\";\n  data1['.']=\"010001\";\n  data1['?']=\"000001\";\n  data1['A']=\"100101\";\n  data1['B']=\"10011010\";\n  data1['C']=\"0101\";\n  data1['D']=\"0001\";\n  data1['E']=\"110\";\n  data1['F']=\"01001\";\n  data1['G']=\"10011011\";\n  data1['H']=\"010000\";\n  data1['I']=\"0111\";\n  data1['J']=\"10011000\";\n  data1['K']=\"0110\";\n  data1['L']=\"00100\";\n  data1['M']=\"10011001\";\n  data1['N']=\"10011110\";\n  data1['O']=\"00101\";\n  data1['P']=\"111\";\n  data1['Q']=\"10011111\";\n  data1['R']=\"1000\";\n  data1['S']=\"00110\";\n  data1['T']=\"00111\";\n  data1['U']=\"10011100\";\n  data1['V']=\"10011101\";\n  data1['W']=\"000010\";\n  data1['X']=\"10010010\";\n  data1['Y']=\"10010011\";\n  data1['Z']=\"10010000\";\n\n  data2[\"00000\"]='A';\n  data2[\"00001\"]='B';\n  data2[\"00010\"]='C';\n  data2[\"00011\"]='D';\n  data2[\"00100\"]='E';\n  data2[\"00101\"]='F';\n  data2[\"00110\"]='G';\n  data2[\"00111\"]='H';\n  data2[\"01000\"]='I';\n  data2[\"01001\"]='J';\n  data2[\"01010\"]='K';\n  data2[\"01011\"]='L';\n  data2[\"01100\"]='M';\n  data2[\"01101\"]='N';\n  data2[\"01110\"]='O';\n  data2[\"01111\"]='P';\n  data2[\"10000\"]='Q';\n  data2[\"10001\"]='R';\n  data2[\"10010\"]='S';\n  data2[\"10011\"]='T';\n  data2[\"10100\"]='U';\n  data2[\"10101\"]='V';\n  data2[\"10110\"]='W';\n  data2[\"10111\"]='X';\n  data2[\"11000\"]='Y';\n  data2[\"11001\"]='Z';\n  data2[\"11010\"]=' ';\n  data2[\"11011\"]='.';\n  data2[\"11100\"]=',';\n  data2[\"11101\"]='-';\n  data2[\"11110\"]='\\'';\n  data2[\"11111\"]='?';\n\n  string  input=\"\";\n  string ans=\"\";\n  while(1){\n    getline(cin,input);\n    char a;\n    if(scanf(\"%c\", &a)==EOF) break;\n    else{\n      input+=' ';\n      input+=a;\n    }\n  }\n\n  for(int i=0;;i++){\n    if(input[i]=='\\0') break;\n    ans+=data1[input[i]];\n  }\n  ans+=\"0000\";\n  ans+='!';\n  int i, count=0;\n\n  while(1){\n    string temp=\"\";\n    for(i=0;i<5;i++, count++){\n      if(ans[count]=='!') {\n\tif(i!=0){\n\t  for(int j=4;;j--){\n\t    temp+='0';\n\t    if(i==j) break;\n\t  }\n\t}\n\tbreak;\n      }\n      temp+=ans[count];\n    }\n    cout << data2[temp];\n    if(ans[count]=='!') break;\n  }\n  \n  cout << endl;\n\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<climits>\n#include<queue>\n#include<map>\n#include<set>\n#include<vector>\n#include<list>\n#include<stack>\n#include<cstring>\n#include<string>\n#include<cmath>\nusing namespace std;\n#define LATTE 1000000000\n\nint main(){\n\tchar con1[32][9]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\tchar S[200],con2[32];\n\tfor(int i=0;i<26;i++) con2[i] = 'A'+i;\n\tcon2[26]=' '; con2[27]='.'; con2[28]=','; con2[29]='_'; con2[30]='\\'',con2[31]='?';\n\twhile(true){\n\t\tint r,c;\n\t\tchar cons[1000]={};\n\t\tfor(int i=0;r=scanf(\"%c\",&S[i]),S[i]!='\\n';i++){\n\t\t\tif(r==EOF) return 0;\n\t\t\tif(S[i]==' ') c = 0;\n\t\t\telse if(S[i]=='\\'') c = 1;\n\t\t\telse if(S[i]==',') c = 2;\n\t\t\telse if(S[i]=='_') c = 3;\n\t\t\telse if(S[i]=='.') c = 4;\n\t\t\telse if(S[i]=='?') c = 5;\n\t\t\telse c = S[i]-'A'+6;\n\t\t\tstrcat(cons,con1[c]);\n\t\t}\n\t\tint len = strlen(cons);\n\t\tfor(int i=(len-1)%5+1;i<5;i++){\n\t\t\tcons[len++]='0'; cons[len]='\\0';\n\t\t}\n\t\tfor(int i=0;i<len;){\n\t\t\tint latte=0;\n\t\t\tfor(int j=0;j<5;i++,j++){\n\t\t\t\t//printf(\"%c\",cons[i]);\n\t\t\t\tlatte = latte<<1;\n\t\t\t\tif(cons[i]=='1') latte += 1;\n\t\t\t}//printf(\" \");\n\t\t\tprintf(\"%c\",con2[latte]);\n\t\t}puts(\"\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <map>\nusing namespace std;\nint main(){\n\tmap<char,string> mp;\n\tmap<string,char> mp2;\n\tmp[' '] = \"101\";\n\tmp['\\''] = \"000000\";\n\tmp[','] = \"000011\";\n\tmp['-'] = \"10010001\";\n\tmp['.'] = \"010001\";\n\tmp['?'] = \"000001\";\n\tmp['A'] = \"100101\";\n\tmp['B'] = \"10011010\";\n\tmp['C'] = \"0101\";\n\tmp['D'] = \"0001\";\n\tmp['E'] = \"110\";\n\tmp['F'] = \"01001\";\n\tmp['G'] = \"10011011\";\n\tmp['H'] = \"010000\";\n\tmp['I'] = \"0111\";\n\tmp['J'] = \"10011000\";\n\tmp['K'] = \"0110\";\n\tmp['L'] = \"00100\";\n\tmp['M'] = \"10011001\";\n\tmp['N'] = \"10011110\";\n\tmp['O'] = \"00101\";\n\tmp['P'] = \"111\";\n\tmp['Q'] = \"10011111\";\n\tmp['R'] = \"1000\";\n\tmp['S'] = \"00110\";\n\tmp['T'] = \"00111\";\n\tmp['U'] = \"10011100\";\n\tmp['V'] = \"10011101\";\n\tmp['W'] = \"000010\";\n\tmp['X'] = \"10010010\";\n\tmp['Y'] = \"10010011\";\n\tmp['Z'] = \"10010000\";\n\tmp2[\"00000\"] = 'A';\n\tmp2[\"00001\"] = 'B';\n\tmp2[\"00010\"] = 'C';\n\tmp2[\"00011\"] = 'D';\n\tmp2[\"00100\"] = 'E';\n\tmp2[\"00101\"] = 'F';\n\tmp2[\"00110\"] = 'G';\n\tmp2[\"00111\"] = 'H';\n\tmp2[\"01000\"] = 'I';\n\tmp2[\"01001\"] = 'J';\n\tmp2[\"01010\"] = 'K';\n\tmp2[\"01011\"] = 'L';\n\tmp2[\"01100\"] = 'M';\n\tmp2[\"01101\"] = 'N';\n\tmp2[\"01110\"] = 'O';\n\tmp2[\"01111\"] = 'P';\n\tmp2[\"10000\"] = 'Q';\n\tmp2[\"10001\"] = 'R';\n\tmp2[\"10010\"] = 'S';\n\tmp2[\"10011\"] = 'T';\n\tmp2[\"10100\"] = 'U';\n\tmp2[\"10101\"] = 'V';\n\tmp2[\"10110\"] = 'W';\n\tmp2[\"10111\"] = 'X';\n\tmp2[\"11000\"] = 'Y';\n\tmp2[\"11001\"] = 'Z';\n\tmp2[\"11010\"] = ' ';\n\tmp2[\"11011\"] = '.';\n\tmp2[\"11100\"] = ',';\n\tmp2[\"11101\"] = '-';\n\tmp2[\"11110\"] = '\\'';\n\tmp2[\"11111\"] = '?';\n\tstring s,t;\n\tbool start = true;\n\twhile(getline(cin,s)){\n\t\tif(not start) t += mp[' '];\n\t\tfor(int i=0;i<s.size();i++){\n\t\t\tchar a = s[i];\n\t\t\tif(start and i==0) t = mp[a];\n\t\t\telse t += mp[a];\n\t\t}\n\t\tstart = false;\n\t}\n\tfor(int i=0;i<(5-t.size()%5)%5;i++) t += \"0\";\n\tfor(int i=0;i<t.size()/5;i++) cout << mp2[t.substr(5*i,5)];\n\tcout << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nconst char *TABLE[] = {\n\t\"100101\",\n\t\"10011010\",\n\t\"0101\",\n\t\"0001\",\n\t\"110\",\n\t\"01001\",\n\t\"10011011\",\n\t\"010000\",\n\t\"0111\",\n\t\"10011000\",\n\t\"0110\",\n\t\"00100\",\n\t\"10011001\",\n\t\"10011110\",\n\t\"00101\",\n\t\"111\",\n\t\"10011111\",\n\t\"1000\",\n\t\"00110\",\n\t\"00111\",\n\t\"10011100\",\n\t\"10011101\",\n\t\"000010\",\n\t\"10010010\",\n\t\"10010011\",\n\t\"10010000\",\n\t\"101\",\n\t\"000000\",\n\t\"000011\",\n\t\"10010001\",\n\t\"010001\",\n\t\"000001\"\n};\n\nconst char *load_table(char c){\n\tswitch(c){\n\t\tcase ' ': return TABLE[26];\n\t\tcase '\\'': return TABLE[27];\n\t\tcase ',': return TABLE[28];\n\t\tcase '-': return TABLE[29];\n\t\tcase '.': return TABLE[30];\n\t\tcase '?': return TABLE[31];\n\t\tdefault: return TABLE[c - 'A'];\n\t}\n}\n\nchar bin2c(const string &s){\n\tint c = 0;\n\tfor(int i = 0; i < s.size(); ++i){ c = (c << 1) | (s[i] - '0'); }\n\tswitch(c){\n\t\tcase 26: return ' ';\n\t\tcase 27: return '.';\n\t\tcase 28: return ',';\n\t\tcase 29: return '-';\n\t\tcase 30: return '\\'';\n\t\tcase 31: return '?';\n\t\tdefault: return static_cast<char>(c + 'A');\n\t}\n}\n\nint main(){\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tstring bin;\n\t\tfor(int i = 0; i < s.size(); ++i){\n\t\t\tbin += load_table(s[i]);\n\t\t}\n\t\twhile(bin.size() % 5 != 0){ bin += \"0\"; }\n\t\tfor(int i = 0; i < bin.size(); i += 5){\n\t\t\tcout << bin2c(bin.substr(i, 5));\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#define CASE(c,s) case c:return s\nusing namespace std;\n\nstring f(char c){\n\tswitch (c){\n\t\tCASE(' ', \"101\");\n\t\tCASE('\\'', \"000000\");\n\t\tCASE(',', \"000011\");\n\t\tCASE('-', \"10010001\");\n\t\tCASE('.', \"010001\");\n\t\tCASE('?', \"000001\");\n\t\tCASE('A', \"100101\");\n\t\tCASE('B', \"10011010\");\n\t\tCASE('C', \"0101\");\n\t\tCASE('D', \"0001\");\n\t\tCASE('E', \"110\");\n\t\tCASE('F', \"01001\");\n\t\tCASE('G', \"10011011\");\n\t\tCASE('H', \"010000\");\n\t\tCASE('I', \"0111\");\n\t\tCASE('J', \"10011000\");\n\t\tCASE('K', \"0110\");\n\t\tCASE('L', \"00100\");\n\t\tCASE('M', \"100110011\");\n\t\tCASE('N', \"10011110\");\n\t\tCASE('O', \"00101\");\n\t\tCASE('P', \"111\");\n\t\tCASE('Q', \"10011111\");\n\t\tCASE('R', \"1000\");\n\t\tCASE('S', \"00110\");\n\t\tCASE('T', \"00111\");\n\t\tCASE('U', \"10011100\");\n\t\tCASE('V', \"10011101\");\n\t\tCASE('W', \"000010\");\n\t\tCASE('X', \"10010010\");\n\t\tCASE('Y', \"10010011\");\n\t\tCASE('Z', \"10010000\");\n\tdefault:return \"\";\n\t}\n}\n\nint bitodec(string s){\n\tint sum=0;\n\tfor (int i = 0; i < s.size(); ++i){\n\t\tsum *= 2;\n\t\tsum += (s[i] - '0');\t\t\n\t}\n\treturn sum;\n}\n\nchar g(string s){\n\tchar c[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\treturn c[bitodec(s)];\n}\n\nint main(){\n\tstring s,r;\n\tint i;\n\n\twhile (getline(cin, s)){\n\t\ti = 0;\n\t\tr = \"\";\n\n\t\twhile (s[i] != '\\0'){\n\t\t\tr += f(s[i]);\n\t\t\t++i;\n\t\t}\n\n\t\tif (i % 5)for (int j = 4 - (i % 5); --j;)r += \"0\";\n\n\t\tfor (int j = 0; j < r.size() / 5;++j)\n\t\t\tcout <<g(r.substr(j*5,5));\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <vector>\n#include <string>\n#include <map>\n#include <queue>\n#include <stack>\n#include <algorithm>\n\n#define rep(i,j) REP((i), 0, (j))\n#define REP(i,j,k) for(int i=(j);(i)<(k);++i)\n#define between(a,x,b) ((a)<=(x)&&(x)<=(b))\nusing namespace std;\n\nstring convert(string str){\n  string res = \"\";\n  map<char, string>s;\n  s[' '] = \"101\";\n  s['\\''] = \"000000\";\n  s[','] = \"000011\";\n  s['-'] = \"10010001\";\n  s['.'] = \"010001\";\n  s['?'] = \"000001\";\n  s['A'] = \"100101\";\n  s['B'] = \"10011010\";\n  s['C'] = \"0101\";\n  s['D'] = \"0001\";\n  s['E'] = \"110\";\n  s['F'] = \"01001\";\n  s['G'] = \"100110011\";\n  s['H'] = \"010000\";\n  s['I'] = \"0111\";\n  s['J'] = \"10011000\";\n  s['K'] = \"0110\";\n  s['L'] = \"00100\";\n  s['M'] = \"10011001\";\n  s['N'] = \"0011110\";\n  s['O'] = \"00101\";\n  s['P'] = \"111\";\n  s['Q'] = \"10011111\";\n  s['R'] = \"1000\";\n  s['S'] = \"00110\";\n  s['T'] = \"00111\";\n  s['U'] = \"0011100\";\n  s['V'] = \"0011101\";\n  s['W'] = \"000010\";\n  s['X'] = \"010010\";\n  s['Y'] = \"0010011\";\n  s['Z'] = \"0010000\";\n\n  rep(i, str.length()){\n    res += s[str[i]];\n  }\n\n  while(res.size() % 5) res += \"0\";\n \n  return res;\n}\n\nstring reconvert(string str){\n  string res = \"\";\n  map<string, char>s;\n  s[\"00000\"] = 'A';\n  s[\"00001\"] = 'B';\n  s[\"00010\"] = 'C';\n  s[\"00011\"] = 'D';\n  s[\"00100\"] = 'E';\n  s[\"00101\"] = 'F';\n  s[\"00110\"] = 'G';\n  s[\"00111\"] = 'H';\n  s[\"01000\"] = 'I';\n  s[\"01001\"] = 'J';\n  s[\"01010\"] = 'K';\n  s[\"01011\"] = 'L';\n  s[\"01100\"] = 'M';\n  s[\"01101\"] = 'N';\n  s[\"01110\"] = 'O';\n  s[\"01111\"] = 'P';\n  s[\"10000\"] = 'Q';\n  s[\"10001\"] = 'R';\n  s[\"10010\"] = 'S';\n  s[\"10011\"] = 'T';\n  s[\"10100\"] = 'U';\n  s[\"10101\"] = 'V';\n  s[\"10110\"] = 'W';\n  s[\"10111\"] = 'X';\n  s[\"11000\"] = 'Y';\n  s[\"11001\"] = 'Z';\n  s[\"11010\"] = ' ';\n  s[\"11011\"] = '.';\n  s[\"11100\"] = ',';\n  s[\"11101\"] = '-';\n  s[\"11110\"] = '\\'';\n  s[\"11111\"] = '?';\n\n  for(int i = 0; i < str.length(); i += 5){\n    string f; // = string(str[i] + str[i+1] + str[i+2] + str[i+3] + str[i+4]);\n    f = str[i]; f += str[i+1]; f+= str[i+2]; f += str[i+3]; f += str[i+4];\n    res += s[f];\n  }\n  return res;\n}\n\nint main(){\n  string str;\n  while(getline(cin, str)){\n    str = convert(str);\n    str = reconvert(str);\n    cout << str << endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <cstring>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <fstream>\n#include <complex>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> PII;\nstatic const double EPS = 1e-5;\n\n#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)\n#define REP(i,n) FOR(i,0,n)\nstring tonum(string &str, int i,map<char,string> &data){\n  if(i==str.size()) return \"\";\n  return data[str[i]] + tonum(str,i+1,data);\n}\nint main(void){\n  map<char,string> data;\n  data[' '] = \"101\";\n  data['\\''] = \"000000\";\n  data[','] = \"000011\";\n  data['-'] = \"10010001\";\n  data['.'] = \"010001\";\n  data['?'] = \"000001\";\n  data['A'] = \"100101\";\n  data['B'] = \"10011010\";\n  data['C'] = \"0101\";\n  data['D'] = \"0001\";\n  data['E'] = \"110\";\n  data['F'] = \"01001\";\n  data['G'] = \"10011011\";\n  data['H'] = \"010000\";\n  data['I'] = \"0111\";\n  data['J'] = \"10011000\";\n  data['K'] = \"0100\";\n  data['L'] = \"00100\";\n  data['M'] = \"10011001\";\n  data['N'] = \"10011110\";\n  data['O'] = \"00101\";\n  data['P'] = \"111\";\n  data['Q'] = \"10011111\";\n  data['R'] = \"1000\";\n  data['S'] = \"00110\";\n  data['T'] = \"00111\";\n  data['U'] = \"10011100\";\n  data['V'] = \"10011101\";\n  data['W'] = \"000010\";\n  data['X'] = \"10010010\";\n  data['Y'] = \"10010011\";\n  data['Z'] = \"10010000\";\n  string input;\n  while(!cin.eof()){\n    getline(cin,input);\n    if(cin.eof()) break;\n    string code = tonum(input,0,data);\n    for(int i=0; i<code.size(); i+=5){\n      string five = code.substr(i,5);\n      if(five.size()<5){\n        while(five.size()!=5) five.push_back('0');\n      }\n      int num5 = 0;\n      REP(i,5) num5+=(five[i]-'0')*pow(2,4-i);\n      if(num5<26){\n        cout<<(char)('A'+num5);\n      }else{\n        if(num5==26) cout<<' ';\n        if(num5==27) cout<<'.';\n        if(num5==28) cout<<',';\n        if(num5==29) cout<<'-';\n        if(num5==30) cout<<'\\'';\n        if(num5==31) cout<<'?';\n      }\n    }\n    cout<<endl;\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint index(char c){\n\tif(c == ' ') return 26;\n\tif(c == '\\'') return 27;\n\tif(c == ',') return 28;\n\tif(c == '-') return 29;\n\tif(c == '.') return 30;\n\tif(c == '?') return 31;\n\treturn (int)c - (int)'A';\n}\n\nstring coder[] = {\n\t\"100101\", \"10011010\",\n\t\"0101\", \"0001\", \"110\",\n\t\"01001\", \"10011011\", \"010000\",\n\t\"0111\", \"10011000\", \"0110\",\n\t\"00100\", \"10011001\", \"10011110\",\n\t\"00101\", \"111\", \"10011111\",\n\t\"1000\", \"00110\", \"00111\",\n\t\"10011100\", \"10011101\",\n\t\"000010\", \"10010010\",\n\t\"10010011\", \"10010000\",\n\t\"101\", \"000000\",\n\t\"000011\", \"10010001\",\n\t\"010001\", \"000001\"\n};\n\nchar uncoder[] = {\n\t'A', 'B', 'C', 'D',\n\t'E', 'F', 'G', 'H',\n\t'I', 'J', 'K', 'L',\n\t'M', 'N', 'O', 'P',\n\t'Q', 'R', 'S', 'T',\n\t'U', 'V', 'W', 'X',\n\t'Y', 'Z', ' ', '.',\n\t',', '-', '\\'', '?'\n};\n\nstring code(char c){\n\treturn coder[index(c)];\n}\n\nchar uncode(string s){\n\tint num = 0;\n\tfor(int i = 0, j = 16;i < 5; i++, j = j / 2){\n\t\tif(s[i] == '1') num += j;\n\t}\n\treturn uncoder[num];\n}\n\nint main(){\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tstring t;\n\t\tfor(string::iterator iter = s.begin();\n\t\t\titer != s.end(); iter++)\n\t\t{\n\t\t\tt += code(*iter);\n\t\t}\n\t\twhile(t.size() % 5 != 0) t += \"0\";\n\t\tfor(string::iterator iter = t.begin();\n\t\t\titer != t.end(); iter += 5)\n\t\t{\n\t\t\tstring t2(iter, iter + 5);\n\t\t\tcout << uncode(t2);\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\nusing namespace std;\n\nmap<char,string> tbl1 = {\n    {' ', \"101\"},\n    {'\\'', \"000000\"},\n    {',', \"000011\"},\n    {'-', \"10010001\"},\n    {'.', \"010001\"},\n    {'?', \"000001\"},\n    {'A', \"100101\"},\n    {'B', \"10011010\"},\n    {'C', \"0101\"},\n    {'D', \"0001\"},\n    {'E', \"110\"},\n    {'F', \"01001\"},\n    {'G', \"10011011\"},\n    {'H', \"010000\"},\n    {'I', \"0111\"},\n    {'J', \"10011000\"},\n    {'K', \"0110\"},\n    {'L', \"00100\"},\n    {'M', \"10011001\"},\n    {'N', \"10011110\"},\n    {'O', \"00101\"},\n    {'P', \"111\"},\n    {'Q', \"10011111\"},\n    {'R', \"1000\"},\n    {'S', \"00110\"},\n    {'T', \"00111\"},\n    {'U', \"10011100\"},\n    {'V', \"10011101\"},\n    {'W', \"000010\"},\n    {'X', \"10010010\"},\n    {'Y', \"10010011\"},\n    {'Z', \"10010000\"}\n};\n\nmap<string,string> tbl2 = {\n    {\"00000\", \"A\"},\n    {\"00001\", \"B\"},\n    {\"00010\", \"C\"},\n    {\"00011\", \"D\"},\n    {\"00100\", \"E\"},\n    {\"00101\", \"F\"},\n    {\"00110\", \"G\"},\n    {\"00111\", \"H\"},\n    {\"01000\", \"I\"},\n    {\"01001\", \"J\"},\n    {\"01010\", \"K\"},\n    {\"01011\", \"L\"},\n    {\"01100\", \"M\"},\n    {\"01101\", \"N\"},\n    {\"01110\", \"O\"},\n    {\"01111\", \"P\"},\n    {\"10000\", \"Q\"},\n    {\"10001\", \"R\"},\n    {\"10010\", \"S\"},\n    {\"10011\", \"T\"},\n    {\"10100\", \"U\"},\n    {\"10101\", \"V\"},\n    {\"10110\", \"W\"},\n    {\"10111\", \"X\"},\n    {\"11000\", \"Y\"},\n    {\"11001\", \"Z\"},\n    {\"11010\", \" \"},\n    {\"11011\", \".\"},\n    {\"11100\", \",\"},\n    {\"11101\", \"-\"},\n    {\"11110\", \"'\"},\n    {\"11111\", \"?\"}\n};\n\nstring encode(string s) {\n    string ret = \"\";\n    for (int i=0; i<(int)s.size(); ++i) {\n        ret += tbl1[s[i]];\n    }\n    while ((int)ret.size() % 5 != 0) {\n        ret += \"0\";\n    }\n    return ret;\n}\n\nstring encode2(string s) {\n    string ret = \"\";\n    for (int i=0; i<(int)s.size(); i+=5) {\n        ret += tbl2[s.substr(i, 5)];\n    }\n    return ret;\n}\n\nint main() {\n    string s;\n    while (getline(cin, s)) {\n        cout << encode2(encode(s)) << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _USE_MATH_DEFINES\n#include <iostream>\n#include <sstream>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <limits>\n#include <map>\n#include <string>\n#include <cstring>\n#include <set>\n#include <deque>\n\nusing namespace std;\n\ntypedef long long ll;\n\nint main(){\n\tstring str;\n\n\tmap<string,string> encode;\n\tmap<string,string> decode;\n\n\tencode[\" \"] = \"101\";\n\tencode[\"'\"] = \"000000\";\n\tencode[\",\"] = \"000011\";\n\tencode[\"-\"] = \"10010001\";\n\tencode[\".\"] = \"010001\";\n\n\tencode[\"?\"] = \"000001\";\n\tencode[\"A\"] = \"100101\";\n\tencode[\"B\"] = \"10011010\";\n\tencode[\"C\"] = \"0101\";\n\tencode[\"D\"] = \"0001\";\n\tencode[\"E\"] = \"110\";\n\tencode[\"F\"] = \"01001\";\n\tencode[\"G\"] = \"10011011\";\n\n\tencode[\"H\"] = \"010000\";\n\tencode[\"I\"] = \"0111\";\n\tencode[\"J\"] = \"10011000\";\n\tencode[\"K\"] = \"0110\";\n\tencode[\"L\"] = \"00100\";\n\tencode[\"M\"] = \"10011001\";\n\tencode[\"N\"] = \"10011110\";\n\n\tencode[\"O\"] = \"00101\";\n\tencode[\"P\"] = \"111\";\n\tencode[\"Q\"] = \"10011111\";\n\tencode[\"R\"] = \"1000\";\n\tencode[\"S\"] = \"00110\";\n\tencode[\"T\"] = \"00111\";\n\tencode[\"U\"] = \"10011100\";\n\n\tencode[\"V\"] = \"10011101\";\n\tencode[\"W\"] = \"000010\";\n\tencode[\"X\"] = \"10010010\";\n\tencode[\"Y\"] = \"10010011\";\n\tencode[\"Z\"] = \"10010000\";\n\n\tdecode[\"00000\"] = \"A\";\n\tdecode[\"00001\"] = \"B\";\n\tdecode[\"00010\"] = \"C\";\n\tdecode[\"00011\"] = \"D\";\n\tdecode[\"00100\"] = \"E\";\n\tdecode[\"00101\"] = \"F\";\n\tdecode[\"00110\"] = \"G\";\n\n\tdecode[\"00111\"] = \"H\";\n\tdecode[\"01000\"] = \"I\";\n\tdecode[\"01001\"] = \"J\";\n\tdecode[\"01010\"] = \"K\";\n\tdecode[\"01011\"] = \"L\";\n\tdecode[\"01100\"] = \"M\";\n\tdecode[\"01101\"] = \"N\";\n\n\tdecode[\"01110\"] = \"O\";\n\tdecode[\"01111\"] = \"P\";\n\tdecode[\"10000\"] = \"Q\";\n\tdecode[\"10001\"] = \"R\";\n\tdecode[\"10010\"] = \"S\";\n\tdecode[\"10011\"] = \"T\";\n\tdecode[\"10100\"] = \"U\";\n\n\tdecode[\"10101\"] = \"V\";\n\tdecode[\"10110\"] = \"W\";\n\tdecode[\"10111\"] = \"X\";\n\tdecode[\"11000\"] = \"Y\";\n\tdecode[\"11001\"] = \"Z\";\n\n\tdecode[\"11010\"] = \" \";\n\tdecode[\"11011\"] = \".\";\n\tdecode[\"11100\"] = \",\";\n\tdecode[\"11101\"] = \"-\";\n\tdecode[\"11110\"] = \"'\";\n\tdecode[\"11111\"] = \"?\";\n\n\twhile(getline(cin,str)){\n\n\t\tstring enc=\"\";\n\t\tfor(int i=0;i<str.size();i++){\n\t\t\tenc+=encode[str.substr(i,1)];\n\t\t}\n\n\t\tenc+=\"0000\";\n\n\t\tstring dec=\"\";\n\t\tfor(int i=0;i+5<=enc.size();i+=5){\n\t\t\tdec+=decode[enc.substr(i,5)];\n\t\t}\n\n\t\tcout << dec << endl;\n\t}\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint main(void) {\n\n  char c;\n  char code[6];\n\n  int size;\n  char buf[500]=\"\";\n\n  int i,j=0;\n\n  do {\n  //encode\n  while((c=getchar())!=EOF) {\n\n    if(c=='\\n') break;\n\n    switch(c) {\n      \n    case ' ':\n      strcat(buf,\"101\");\n      break;\n\n    case '\\'':\n      strcat(buf,\"000000\");\n      break;\n\n    case ',':\n      strcat(buf,\"000011\");\n      break;\n      \n    case '-':\n      strcat(buf,\"10010001\");\n      break;\n      \n    case '.':\n      strcat(buf,\"010001\");\n      break;\n\n    case '?':\n      strcat(buf,\"000001\");\n      break;\n      \n    case 'A':\n      strcat(buf,\"100101\");\n      break;\n      \n    case 'B':\n      strcat(buf,\"10011010\");\n      break;\n\n    case 'C':\n      strcat(buf,\"0101\");\n      break;\n\n    case 'D':\n      strcat(buf,\"0001\");\n      break;\n\n    case 'E':\n      strcat(buf,\"110\");\n      break;\n      \n    case 'F':\n      strcat(buf,\"01001\");\n      break;\n      \n    case 'G':\n      strcat(buf,\"10011011\");\n      break;\n      \n    case 'H':\n      strcat(buf,\"010000\");\n      break;\n      \n    case 'I':\n      strcat(buf,\"0111\");\n      break;\n\n    case 'J':\n      strcat(buf,\"10011000\");\n      break;\n\n    case 'K':\n      strcat(buf,\"0110\");\n      break;\n\n    case 'L':\n      strcat(buf,\"00100\");\n      break;\n\n    case 'M':\n      strcat(buf,\"10011001\");\n      break;\n\n    case 'N':\n      strcat(buf,\"10011110\");\n      break;\n      \n    case 'O':\n      strcat(buf,\"00101\");\n      break;\n      \n    case 'P':\n      strcat(buf,\"111\");\n      break;\n      \n    case 'Q':\n      strcat(buf,\"10011111\");\n      break;\n      \n    case 'R':\n      strcat(buf,\"1000\");\n      break;\n      \n    case 'S':\n      strcat(buf,\"00110\");\n      break;\n\n    case 'T':\n      strcat(buf,\"00111\");\n      break;\n\n    case 'U':\n      strcat(buf,\"10011100\");\n      break;\n\n    case 'V':\n      strcat(buf,\"10011101\");\n      break;\n\n    case 'W':\n      strcat(buf,\"000010\");\n      break;\n\n    case 'X':\n      strcat(buf,\"10010010\");\n      break;\n\n    case 'Y':\n      strcat(buf,\"10010011\");\n      break;\n\n    case 'Z':\n      strcat(buf,\"10010000\");\n      break;\n\n    }\n\n  }\n\n  printf(\"%s\\n\",buf);\n\n  if((size=strlen(buf)%5)!=0) {\n\n    for(i=0;i<5-size;i++) {\n\n      strcat(buf,\"0\");\n\n      }\n\n  }\n\n  printf(\"%s\\n\",buf);\n\n  //decode\n  for(i=0;i<strlen(buf);i++) {\n\n    code[j]=buf[i];\n    j++;\n\n    if(i%5==4) {\n      code[5]='\\0';\n      //printf(\"%s\\n\",code);\n      j=0;\n\n      if(strcmp(code,\"00000\")==0) printf(\"A\");\n\n      if(strcmp(code,\"00001\")==0) printf(\"B\");\n\n      if(strcmp(code,\"00010\")==0) printf(\"C\");\n\n      if(strcmp(code,\"00011\")==0) printf(\"D\");\n\n      if(strcmp(code,\"00100\")==0) printf(\"E\");\n\n      if(strcmp(code,\"00101\")==0) printf(\"F\");\n\n      if(strcmp(code,\"00110\")==0) printf(\"G\");\n\n      if(strcmp(code,\"00111\")==0) printf(\"H\");\n\n      if(strcmp(code,\"01000\")==0) printf(\"I\");\n\n      if(strcmp(code,\"01001\")==0) printf(\"J\");\n\n      if(strcmp(code,\"01010\")==0) printf(\"K\");\n\n      if(strcmp(code,\"01011\")==0) printf(\"L\");\n\n      if(strcmp(code,\"01100\")==0) printf(\"M\");\n\n      if(strcmp(code,\"01101\")==0) printf(\"N\");\n\n      if(strcmp(code,\"01110\")==0) printf(\"O\");\n\n      if(strcmp(code,\"01111\")==0) printf(\"P\");\n\n      if(strcmp(code,\"10000\")==0) printf(\"Q\");\n\n      if(strcmp(code,\"10001\")==0) printf(\"R\");\n\n      if(strcmp(code,\"10010\")==0) printf(\"S\");\n\n      if(strcmp(code,\"10011\")==0) printf(\"T\");\n\n      if(strcmp(code,\"10100\")==0) printf(\"U\");\n\n      if(strcmp(code,\"10101\")==0) printf(\"V\");\n\n      if(strcmp(code,\"10110\")==0) printf(\"W\");\n\n      if(strcmp(code,\"10111\")==0) printf(\"X\");\n\n      if(strcmp(code,\"11000\")==0) printf(\"Y\");\n\n      if(strcmp(code,\"11001\")==0) printf(\"Z\");\n\n      if(strcmp(code,\"11010\")==0) printf(\" \");\n\n      if(strcmp(code,\"11011\")==0) printf(\".\");\n\n      if(strcmp(code,\"11100\")==0) printf(\",\");\n\n      if(strcmp(code,\"11101\")==0) printf(\"-\");\n\n      if(strcmp(code,\"11110\")==0) printf(\"'\");\n\n      if(strcmp(code,\"11111\")==0) printf(\"?\");\n\n    }\n\n  }\n\n  puts(\"\");\n\n  } while(c!=EOF);\n\n  return 0;\n\n}"
  },
  {
    "language": "C++",
    "code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nstring a[32] = {\"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\"};\nstring b[32] = {\" \", \"'\", \",\", \"-\", \".\", \"?\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\" \"Z\"};\nstring c[32] = {\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"};\nstring d[32] = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \" \", \".\", \",\", \"-\", \"'\", \"?\"};\n\nint main(){\n    string s; getline(cin, s);\n    string t;\n    for(int i=0; i< s.size(); i++){\n        for(int j=0; j < 32; j++) if(s.substr(i, 1) == b[j]){t += a[j]; break;}\n    }\n    int diff = 5-t.size()%5;\n    if(t.size()%5 != 0) for(int i=0; i < diff; i++) t+=\"0\";\n    string ret;\n    for(int i=0; i < t.size(); i+=5){\n        for(int j=0; j< 32; j++) if(t.substr(i, 5) == c[j]){ret += d[j]; break;}\n    }\n    cout << ret << endl;\n}"
  },
  {
    "language": "C++",
    "code": "// clang-format off\n#include <bits/stdc++.h>\n#define int long long\n#define main signed main()\n#define loop(i, a, n) for (int i = (a); i < (n); i++)\n#define rep(i, n) loop(i, 0, n)\n#define forever for (;;)\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\n#define prec(n) fixed << setprecision(n)\ntemplate<typename A> using V = std::vector<A>;\ntemplate<typename A> using F = std::function<A>;\ntemplate<typename A, typename B> using P = std::pair<A, B>;\nusing pii = P<int, int>;\nusing vi = V<int>;\nusing vd = V<double>;\nusing vs = V<std::string>;\nusing vpii = V<pii>;\nusing vvi = V<vi>;\nusing vvpii = V<vpii>;\nconstexpr int INF = sizeof(int) == sizeof(long long) ? 1000000000000000000LL : 1000000000;\nconstexpr int MOD = 1000000007;\nconstexpr double PI = acos(-1);\ntemplate<typename A, typename B> bool cmin(A &a, const B &b) { return a > b ? (a = b, true) : false; }\ntemplate<typename A, typename B> bool cmax(A &a, const B &b) { return a < b ? (a = b, true) : false; }\ntemplate<typename T> std::istream &operator>>(std::istream &is, std::vector<T> &v) { for (T &x : v) is >> x; return is; }\ntemplate<typename A, typename B> std::istream &operator>>(std::istream &is, std::pair<A, B> &p) { is >> p.first; is >> p.second; return is; }\nusing namespace std;\n// clang-format on\n\nstring f(char c) {\n  if (c == ' ') return \"101\";\n  if (c == '\\'') return \"000000\";\n  if (c == ',') return \"000011\";\n  if (c == '-') return \"10010001\";\n  if (c == '.') return \"010001\";\n  if (c == '?') return \"000001\";\n  if (c == 'A') return \"100101\";\n  if (c == 'B') return \"10011010\";\n  if (c == 'C') return \"0101\";\n  if (c == 'D') return \"0001\";\n  if (c == 'E') return \"110\";\n  if (c == 'F') return \"01001\";\n  if (c == 'G') return \"10011011\";\n  if (c == 'H') return \"0100000\";\n  if (c == 'I') return \"0111\";\n  if (c == 'J') return \"10011000\";\n  if (c == 'K') return \"0110\";\n  if (c == 'L') return \"00100\";\n  if (c == 'M') return \"10011001\";\n  if (c == 'N') return \"10011110\";\n  if (c == 'O') return \"00101\";\n  if (c == 'P') return \"111\";\n  if (c == 'Q') return \"10011111\";\n  if (c == 'R') return \"1000\";\n  if (c == 'S') return \"00110\";\n  if (c == 'T') return \"00111\";\n  if (c == 'U') return \"10011100\";\n  if (c == 'V') return \"10011101\";\n  if (c == 'W') return \"000010\";\n  if (c == 'X') return \"10010010\";\n  if (c == 'Y') return \"10010011\";\n  if (c == 'Z') return \"10010000\";\n}\n\nchar g(int x) {\n  static string v = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  return v[x];\n}\n\nmain {\n  string s, t;\n  while (getline(cin, t)) s += t + \" \";\n  s.pop_back();\n  string x;\n  for (auto &c : s) x += f(c);\n  x += string((5 - x.size() % 5) % 5, '0');\n  string r;\n  rep(i, x.size() / 5) r += g(stoi(x.substr(i * 5, 5), nullptr, 2));\n  cout << r << endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  char *p;\n  i = 0;\n  while(gets(e)) {\n    j = 0;\n    while(e[j]) d[i++] = e[j++];\n    d[i++] = ' ';\n  }\n  d[i - 1] = '\\0';\n  i = 0;\n  j = 0;\n  while(d[i]) {\n    k = 0;\n    while(a[k] != d[i]) k++;\n    p = b[k];\n    while(*p) e[j++] = *p++;\n    i++;\n  }\n  i = 5 - j % 5;\n  while(i--) e[j++] = '0';\n  e[j] = '\\0';\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\ntypedef long long ll;\n\n#define dump(x)  cerr << #x << \" = \" << (x) << endl\n#define rep(i,n) for(ll i=0;i<(ll)(n);i++)\n#define all(a)  (a).begin(),(a).end()\n#define pb push_back\n#define INF 999999999\n\nint main(){\n    string s;\n    getline(cin,s);\n    string a=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n    string b[]={\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"};\n    string c=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string d[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n    map<string,char> mpb;\n    map<char,string> mpa;\n    rep(i,a.size()){\n        mpb[b[i]]=a[i];\n    }\n    rep(i,c.size()){\n        mpa[c[i]]=d[i];\n    }\n    \n    string str=\"\";\n    rep(i,s.size()){\n        str+=mpa[s[i]];\n    }\n    int len=str.size();\n    rep(i,5-(len%5))str+=\"0\";\n    \n    string sx=\"\";\n    len=str.size();\n    rep(i,len/5+1){\n        sx+=mpb[str.substr(5*i,5)];\n    }\n    cout<<sx<<endl;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<map>\n#include<string>\n#include<cstdio>\nusing namespace std;\n\nmap<char, string> dict;\nmap<string, char> tcid;\nvoid init(){\n    dict[' '] = \"101\";\n    dict['\\''] = \"000000\";\n    dict[','] = \"000011\";\n    dict['-'] = \"10010001\";\n    dict['.'] = \"010001\";\n    dict['?'] = \"000001\";\n    dict['A'] = \"100101\";\n    dict['B'] = \"10011010\";\n    dict['C'] = \"0101\";\n    dict['D'] = \"0001\";\n    dict['E'] = \"110\";\n    dict['F'] = \"01001\";\n    dict['G'] = \"10011011\";\n    dict['H'] = \"010000\";\n    dict['I'] = \"0111\";\n    dict['J'] = \"10011000\";\n    dict['K'] = \"0110\";\n    dict['L'] = \"00100\";\n    dict['M'] = \"10011001\";\n    dict['N'] = \"10011110\";\n    dict['O'] = \"00101\";\n    dict['P'] = \"111\";\n    dict['Q'] = \"10011111\";\n    dict['R'] = \"1000\";\n    dict['S'] = \"00110\";\n    dict['T'] = \"00111\";\n    dict['U'] = \"10011100\";\n    dict['V'] = \"10011101\";\n    dict['W'] = \"000010\";\n    dict['X'] = \"10010010\";\n    dict['Y'] = \"10010011\";\n    dict['Z'] = \"10010000\";\n    tcid[\"00000\"] ='A';\n    tcid[\"00001\"] ='B';\n    tcid[\"00010\"] ='C';\n    tcid[\"00011\"] ='D';\n    tcid[\"00100\"] ='E';\n    tcid[\"00101\"] ='F';\n    tcid[\"00110\"] ='G';\n    tcid[\"00111\"] ='H';\n    tcid[\"01000\"] ='I';\n    tcid[\"01001\"] ='J';\n    tcid[\"01010\"] ='K';\n    tcid[\"01011\"] ='L';\n    tcid[\"01100\"] ='M';\n    tcid[\"01101\"] ='N';\n    tcid[\"01110\"] ='O';\n    tcid[\"01111\"] ='P';\n    tcid[\"10000\"] ='Q';\n    tcid[\"10001\"] ='R';\n    tcid[\"10010\"] ='S';\n    tcid[\"10011\"] ='T';\n    tcid[\"10100\"] ='U';\n    tcid[\"10101\"] ='V';\n    tcid[\"10110\"] ='W';\n    tcid[\"10111\"] ='X';\n    tcid[\"11000\"] ='Y';\n    tcid[\"11001\"] ='Z';\n    tcid[\"11010\"] =' ';\n    tcid[\"11011\"] ='.';\n    tcid[\"11100\"] =',';\n    tcid[\"11101\"] ='-';\n    tcid[\"11110\"] ='\\'';\n    tcid[\"11111\"] ='?';\n}\n\nstring solve(string a){\n    string tmp = \"\";\n    string res = \"\";\n    if(a == \"\")return a;\n    for(int i = 0;i < a.size();i++){\n\ttmp += dict[a[i]];\n    }\n    while(tmp.size()%5)tmp+=\"0\";\n    for(int i = 0;i < tmp.size();i += 5){\n\tstring x = \"\";\n\tfor(int j = 0;j < 5;j++){\n\t    x += tmp[i + j];\n\t}\n\tres += tcid[x];\n    }\n    return res;\n}\nbool fin = false;\nstring get_line(){\n    string res = \"\";\n    while(true){\n\tchar t = getchar();\n\tif(t == '\\n' || t == EOF){\n\t    if(t == EOF)fin = true;\n\t    break;\n\t}\n\tres += t;\n    }\n    return res;\n}\n\nint main(){\n    init();\n    while(!fin){\n\tstring res = solve(get_line());\n\tif(fin&&res==\"\")break;cout << res << endl;\n    }\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<string>\n#define CASE(c,s) case c:return s\nusing namespace std;\n\nstring f(char c){\n\tswitch (c){\n\t\tCASE(' ', \"101\");\n\t\tCASE('\\'', \"000000\");\n\t\tCASE(',', \"000011\");\n\t\tCASE('-', \"10010001\");\n\t\tCASE('.', \"010001\");\n\t\tCASE('?', \"000001\");\n\t\tCASE('A', \"100101\");\n\t\tCASE('B', \"10011010\");\n\t\tCASE('C', \"0101\");\n\t\tCASE('D', \"0001\");\n\t\tCASE('E', \"110\");\n\t\tCASE('F', \"01001\");\n\t\tCASE('G', \"10011011\");\n\t\tCASE('H', \"010000\");\n\t\tCASE('I', \"0111\");\n\t\tCASE('J', \"10011000\");\n\t\tCASE('K', \"0110\");\n\t\tCASE('L', \"00100\");\n\t\tCASE('M', \"10011001\");\n\t\tCASE('N', \"10011110\");\n\t\tCASE('O', \"00101\");\n\t\tCASE('P', \"111\");\n\t\tCASE('Q', \"10011111\");\n\t\tCASE('R', \"1000\");\n\t\tCASE('S', \"00110\");\n\t\tCASE('T', \"00111\");\n\t\tCASE('U', \"10011100\");\n\t\tCASE('V', \"10011101\");\n\t\tCASE('W', \"000010\");\n\t\tCASE('X', \"10010010\");\n\t\tCASE('Y', \"10010011\");\n\t\tCASE('Z', \"10010000\");\n\tdefault:return \"\";\n\t}\n}\n\nint bitodec(string s){\n\tint sum=0;\n\tfor (unsigned int i = 0; i < s.length(); ++i){\n\t\tsum *= 2;\n\t\tsum += (s[i] - '0');\t\t\n\t}\n\treturn sum;\n}\n\nchar g(string s){\n\tchar c[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\treturn c[bitodec(s)];\n}\n\nint main(){\n\tstring s,r;\n\tint i;\n\n\twhile (getline(cin, s)){\n\t\ti = 0;\n\t\tr = \"\";\n\n\t\twhile (s[i] != '\\0'){\n\t\t\tr += f(s[i]);\n\t\t\t++i;\n\t\t}\n\n\t\tif (i % 5)for (int j = 4 - (i % 5); --j;)r += \"0\";\n\n\t\tfor (unsigned int j = 0; j < r.length() ;j+=5)\n\t\t\tcout << g(r.substr(j,5));\n\t\tcout << endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <iostream>\n#include <string>\n\n\nstd::string encode(char c){\n    if(c == ' ') return \"101\";\n    if(c == '\\'') return \"000000\";\n    if(c == ',') return \"000011\";\n    if(c == '-') return \"10010001\";\n    if(c == '.') return \"010001\";\n    if(c == '?') return \"000001\";\n    if(c == 'A') return \"100101\";\n    if(c == 'B') return \"10011010\";\n    if(c == 'C') return \"0101\";\n    if(c == 'D') return \"0001\";\n    if(c == 'E') return \"110\";\n    if(c == 'F') return \"01001\";\n    if(c == 'G') return \"10011011\";\n    if(c == 'H') return \"010000\";\n    if(c == 'I') return \"0111\";\n    if(c == 'J') return \"10011000\";\n    if(c == 'K') return \"0110\";\n    if(c == 'L') return \"00100\";\n    if(c == 'M') return \"10011001\";\n    if(c == 'N') return \"10011110\";\n    if(c == 'O') return \"00101\";\n    if(c == 'P') return \"111\";\n    if(c == 'Q') return \"10011111\";\n    if(c == 'R') return \"1000\";\n    if(c == 'S') return \"00110\";\n    if(c == 'T') return \"00111\";\n    if(c == 'U') return \"10011100\";\n    if(c == 'V') return \"10011101\";\n    if(c == 'W') return \"000010\";\n    if(c == 'X') return \"10010010\";\n    if(c == 'Y') return \"10010011\";\n    if(c == 'Z') return \"10010000\";\n    return \"\";\n}\n\nstd::string encode2(std::string s){\n    if(s == \"00000\") return \"A\";\n    if(s == \"00001\") return \"B\";\n    if(s == \"00010\") return \"C\";\n    if(s == \"00011\") return \"D\";\n    if(s == \"00100\") return \"E\";\n    if(s == \"00101\") return \"F\";\n    if(s == \"00110\") return \"G\";\n    if(s == \"00111\") return \"H\";\n    if(s == \"01000\") return \"I\";\n    if(s == \"01001\") return \"J\";\n    if(s == \"01010\") return \"K\";\n    if(s == \"01011\") return \"L\";\n    if(s == \"01100\") return \"M\";\n    if(s == \"01101\") return \"N\";\n    if(s == \"01110\") return \"O\";\n    if(s == \"01111\") return \"P\";\n    if(s == \"10000\") return \"Q\"\n    if(s == \"10001\") return \"R\";\n    if(s == \"10010\") return \"S\";\n    if(s == \"10011\") return \"T\";\n    if(s == \"10100\") return \"U\";\n    if(s == \"10101\") return \"V\";\n    if(s == \"10110\") return \"W\";\n    if(s == \"10111\") return \"X\";\n    if(s == \"11000\") return \"Y\";\n    if(s == \"11001\") return \"Z\";\n    if(s == \"11010\") return \" \";\n    if(s == \"11011\") return \".\";\n    if(s == \"11100\") return \",\";\n    if(s == \"11101\") return \"-\";\n    if(s == \"11110\") return \"'\";\n    if(s == \"11111\") return \"?\";\n    return \"\";\n}\n\nint main(){\n    std::string str, tmp, ans;\n    while(getline(std::cin, str)){\n        tmp = \"\", ans = \"\";\n        for(int i = 0; i < str.size(); i++){\n            tmp += encode(str[i]);\n        }\n\n        int n = 5 - (tmp.size() % 5);\n        for(int i = 0; i < n; i++) tmp += \"0\";\n\n        for(int i = 0; i < tmp.size() / 5; i++){\n            ans += encode2(tmp.substr(i * 5, 5));\n        }\n\n        std::cout << ans << std::endl;\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C++",
    "code": "#include <algorithm>\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\nstring L=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",A=\" ',-.?\"+L,C=L+\" .,-'?\";\nvector<string> B={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\n\t\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\t\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n\t\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\nint bin2dec(string s){\n\tint x=0,i=0;\n\tfor(;i<s.size();i++)x=x*2+s[i]-'0';\n\treturn x;\n}\nint main(){\n\tstring s,s1;\n\tint i,n;\n\twhile(getline(cin,s)){\n\t\ts1=\"\";\n\t\tfor(i=0;i<s.size();i++)s1+=B[A.find(s[i])];\n\t\tn=s1.size()%5;\n\t\tif(n!=0)s1+=string(5-n,'0');\n\t\ts=\"\";\n\t\tfor(i=0;i<s1.size();i+=5)s+=C[bin2dec(s1.substr(i, 5))];\n\t\tcout<<s<< endl;\n\t}\n}"
  },
  {
    "language": "C++",
    "code": "#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> v;\nstring s,n=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",m=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\",l[32]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\nint main(){\n\twhile(getline(cin,s)){\n\t\tv.clear();\n\t\tfor(int i=0;i<s.size();i++){\n\t\t\tint p=0;while(m[p]!=s[i])p++;\n\t\t\tfor(int j=0;j<l[p].size();j++)v.push_back(l[p][j]-'0');\n\t\t}\n\t\twhile(v.size()%5)v.push_back(0);\n\t\tfor(int i=0;i<v.size();i+=5){\n\t\t\tint cnt=0;\n\t\t\tfor(int j=0;j<5;j++)cnt*=2,cnt+=v[i+j];\n\t\t\tcout<<n[cnt];\n\t\t}cout<<endl;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C++",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n\n#include <iostream>\n#include <stdio.h>\n#include <string>\n#include <string.h>\n#include <queue>\n#include <cmath>\n#include <stack>\n#include <map>\n\n#define int64 long long int \nusing namespace std;\n\nstring encode(string, char);\nvoid decode(string);\n\nint main()\n{\n\tint c;\n\tstring str;\n\twhile((c = getchar()) != EOF){\n\t\tstr = encode(str, c);\n\t}\n\tdecode(str);\n\n\treturn 0;\n}\n\nvoid decode(string str)\n{\n\tint i, len, r;\n\tstring part;\n\tconst string code[32] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\tconst char ch[35] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n\tlen = str.size();\n\n\tfor(i=0; i<len / 5; i++){\n\t\tpart = str.substr( 5*i, 5 );\n\t\tfor(int j=0; j<32; j++)\n\t\t\tif(part == code[j]) cout << ch[j];\n\t}\n\tif((r = len % 5) != 0){\n\t\tpart = str.substr( 5*i, len-1 );\n\t\tfor(i=0; i<5-r; i++) part += \"0\";\n\t\tfor(i=0; i<32; i++)\n\t\t\tif(part == code[i]) cout << ch[i];\n\t}\n\tcout << endl;\n\treturn;\n}\n\nstring encode(string str, char c)\n{\n\tconst string code[32] = {\n\t\t\"101\", \"000000\", \"000011\", \"10010001\",\n\t\t\"010001\", \"000001\", \"100101\", \"10011010\",\n\t\t\"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\",\n\t\t\"0110\", \"00100\", \"10011001\", \"10011110\",\n\t\t\"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\",\n\t\t\"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tconst char ch[35] = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; \n\n\tfor(int i=0; i<32; i++){\n\t\tif(c == ch[i]){\n\t\t\tif(str.empty()) str = code[i];\n\t\t\telse str += code[i];\n\t\t}\n\t}\n\treturn str;\n}"
  },
  {
    "language": "Haskell",
    "code": "import Control.Applicative\nimport Control.Monad\nimport Control.Monad.ST\nimport Data.Functor\nimport Data.Function\nimport Data.Monoid\nimport Data.Maybe\nimport Data.List\nimport Data.Foldable (foldMap)\nimport Data.List.Split\nimport Data.Char\nimport Data.Ix\nimport Data.Ratio\nimport Data.Ord\nimport Data.Tuple\nimport Data.Array.IO\nimport Data.Array.ST\nimport Data.IORef\nimport Data.STRef\n \nreadInt = read :: String -> Int\nreadDouble = read :: String -> Double\ngetInt = readLn :: IO Int\ngetInts = map readInt . words <$> getLine\nsjoin :: (Show a) => [a] -> String\nsjoin = unwords . map show\ncond :: a -> a -> Bool -> a\ncond t f c = if c then t else f\napplyBin :: (b -> c -> d) -> (a -> b) -> (a -> c) -> a -> d\napplyBin op f g x = op (f x) $ g x\napplyUni :: (a -> b -> c) -> (a -> b) -> a -> c\napplyUni op f x = op x $ f x\napplyTuple :: (a -> b, a -> c) -> a -> (b, c)\napplyTuple (f,g) a = (f a, g a)\n-- end of templete\n\nencode ' ' = \"101\"\nencode '\\'' = \"000000\"\nencode ',' = \"000011\"\nencode '-' = \"10010001\"\nencode '.' = \"010001\"\nencode '?' = \"000001\"\nencode 'A' = \"100101\"\nencode 'B' = \"10011010\"\nencode 'C' = \"0101\"\nencode 'D' = \"0001\"\nencode 'E' = \"110\"\nencode 'F' = \"01001\"\nencode 'G' = \"10011011\"\nencode 'H' = \"010000\"\nencode 'I' = \"0111\"\nencode 'J' = \"10011000\"\nencode 'K' = \"0110\"\nencode 'L' = \"00100\"\nencode 'M' = \"10011001\"\nencode 'N' = \"10011110\"\nencode 'O' = \"00101\"\nencode 'P' = \"111\"\nencode 'Q' = \"10011111\"\nencode 'R' = \"1000\"\nencode 'S' = \"00110\"\nencode 'T' = \"00111\"\nencode 'U' = \"10011100\"\nencode 'V' = \"10011101\"\nencode 'W' = \"000010\"\nencode 'X' = \"10010010\"\nencode 'Y' = \"10010011\"\nencode 'Z' = \"10010000\"\n\ndecode n = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\" !! n\n\nbinToInt r [] = r\nbinToInt r (c:cs) = binToInt (r*2 + digitToInt c) cs \n\nsplitl _ [] = []\nsplitl n s = (take n s : splitl n (drop n s))\n\n\nfill s = s ++ replicate (mod (-(length s)) 5) '0'\n\n\nmain = map (map (decode . binToInt 0) . splitl 5 . fill . foldMap encode) . lines <$> getContents >>= mapM_ putStrLn"
  },
  {
    "language": "Haskell",
    "code": "import Data.List\n\nenc1 :: Char -> [Int]\nenc1 c =\n  case c of\n    ' '  -> [1,0,1]\n    '\\'' -> [0,0,0,0,0]\n    ','  -> [0,0,0,1,1]\n    '-'  -> [1,0,0,1,0,0,0,1]\n    '.'  -> [0,1,0,0,0,1]\n    '?'  -> [0,0,0,0,0,1]\n    'A'  -> [1,0,0,1,0,1]\n    'B'  -> [1,0,0,1,1,0,1,0]\n    'C'  -> [0,1,0,1]\n    'D'  -> [0,0,0,1]\n    'E'  -> [1,1,0]\n    'F'  -> [0,1,0,0,1]\n    'G'  -> [1,0,0,1,1,0,1,1]\n    'H'  -> [0,1,0,0,0,0]\n    'I'  -> [0,1,1,1]\n    'J'  -> [1,0,0,1,1,0,0,0]\n    'K'  -> [0,1,1,0]\n    'L'  -> [0,0,1,0,0]\n    'M'  -> [1,0,0,1,1,0,0,1]\n    'N'  -> [1,0,0,1,1,1,1,0]\n    'O'  -> [0,0,1,0,1]\n    'P'  -> [1,1,1]\n    'Q'  -> [1,0,0,1,1,1,1,1]\n    'R'  -> [1,0,0,0]\n    'S'  -> [0,0,1,1,0]\n    'T'  -> [0,0,1,1,1]\n    'U'  -> [1,0,0,1,1,1,0,0]\n    'V'  -> [1,0,0,1,1,1,0,1]\n    'W'  -> [0,0,0,0,1,0]\n    'X'  -> [1,0,0,1,0,0,1,0]\n    'Y'  -> [1,0,0,1,0,0,1,1]\n    'Z'  -> [1,0,0,1,0,0,0,0]\n\nenc1' [] = []\nenc1' (s:sx) = (enc1 s) ++ (enc1' sx)\n\nenc2 :: [Int] -> Char\nenc2 c =\n  case c of\n    [0,0,0,0,0] -> 'A'\n    [0,0,0,0,1] -> 'B'\n    [0,0,0,1,0] -> 'C'\n    [0,0,0,1,1] -> 'D'\n    [0,0,1,0,0] -> 'E'\n    [0,0,1,0,1] -> 'F'\n    [0,0,1,1,0] -> 'G'\n    [0,0,1,1,1] -> 'H'\n    [0,1,0,0,0] -> 'I'\n    [0,1,0,0,1] -> 'J'\n    [0,1,0,1,0] -> 'K'\n    [0,1,0,1,1] -> 'L'\n    [0,1,1,0,0] -> 'M'\n    [0,1,1,0,1] -> 'N'\n    [0,1,1,1,0] -> 'O'\n    [0,1,1,1,1] -> 'P'\n    [1,0,0,0,0] -> 'Q'\n    [1,0,0,0,1] -> 'R'\n    [1,0,0,1,0] -> 'S'\n    [1,0,0,1,1] -> 'T'\n    [1,0,1,0,0] -> 'U'\n    [1,0,1,0,1] -> 'V'\n    [1,0,1,1,0] -> 'W'\n    [1,0,1,1,1] -> 'X'\n    [1,1,0,0,0] -> 'Y'\n    [1,1,0,0,1] -> 'Z'\n    [1,1,0,1,0] -> ' '\n    [1,1,0,1,1] -> '.'\n    [1,1,1,0,0] -> ','\n    [1,1,1,0,1] -> '-'\n    [1,1,1,1,0] -> '\\''\n    [1,1,1,1,1] -> '?'\n\nenc2' :: [Int] -> String\nenc2' [] = []\nenc2' s =\n  let d = take 5 s\n      r = drop 5 s\n  in\n    (enc2 d):(enc2' r)\n\n--enc :: String -> String\nenc x =\n  let e1 = enc1' x\n      ln = (length e1) `mod` 5\n      e' = if ln /= 0\n           then e1 ++ (replicate (5-ln) 0)\n           else e1\n      e2 = enc2' e'\n  in\n    e2\n\nmain = do\n  c <- getContents\n  let i = lines c\n      o = map (enc) i\n  mapM_ putStrLn o"
  },
  {
    "language": "Haskell",
    "code": "import Data.Maybe (fromJust)\n\nmain = interact $ unlines.map encode.lines\n\nencode :: String -> String\nencode = map (toChar.correctLength) . devide5 . concat . map toDigits\n\ntoDigits :: Char -> String\ntoDigits c = fromJust $ lookup c cdTable\n\ndevide5 :: String -> [String]\ndevide5 xs = if length xs > 5 then l : devide5 r\n                              else [xs]\n                              where (l,r) = splitAt 5 xs\n\ntoChar :: String -> Char\ntoChar str = fromJust $ lookup str dcTable\n\ncorrectLength xs = if length xs == 0 then xs\n                                     else xs ++ replicate (5 - length xs) '0'\n\ncdTable = [ (' ' , \"101\")\n          , ('\\'', \"000000\")\n          , (',' , \"000011\")\n          , ('-' , \"10010001\")\n          , ('.' , \"010001\")\n          , ('?' , \"000001\")\n          , ('A' , \"100101\")\n          , ('B' , \"10011010\")\n          , ('C' , \"0101\")\n          , ('D' , \"0001\")\n          , ('E' , \"110\")\n          , ('F' , \"01001\")\n          , ('G' , \"10011011\")\n          , ('H' , \"010000\")\n          , ('I' , \"0111\")\n          , ('J' , \"10011000\")\n          , ('K' , \"0110\")\n          , ('L' , \"00100\")\n          , ('M' , \"10011001\")\n          , ('N' , \"10011110\")\n          , ('O' , \"00101\")\n          , ('P' , \"111\")\n          , ('Q' , \"10011111\")\n          , ('R' , \"1000\")\n          , ('S' , \"00110\")\n          , ('T' , \"00111\")\n          , ('U' , \"10011100\")\n          , ('V' , \"10011101\")\n          , ('W' , \"000010\")\n          , ('X' , \"10010010\")\n          , ('Y' , \"10010011\")\n          , ('Z' , \"10010000\")]\n\ndcTable = [ (\"00000\",'A')\n          , (\"00001\",'B')\n          , (\"00010\",'C')\n          , (\"00011\",'D')\n          , (\"00100\",'E')\n          , (\"00101\",'F')\n          , (\"00110\",'G')\n          , (\"00111\",'H')\n          , (\"01000\",'I')\n          , (\"01001\",'J')\n          , (\"01010\",'K')\n          , (\"01011\",'L')\n          , (\"01100\",'M')\n          , (\"01101\",'N')\n          , (\"01110\",'O')\n          , (\"01111\",'P')\n          , (\"10000\",'Q')\n          , (\"10001\",'R')\n          , (\"10010\",'S')\n          , (\"10011\",'T')\n          , (\"10100\",'U')\n          , (\"10101\",'V')\n          , (\"10110\",'W')\n          , (\"10111\",'X')\n          , (\"11000\",'Y')\n          , (\"11001\",'Z')\n          , (\"11010\",' ')\n          , (\"11011\",'.')\n          , (\"11100\",',')\n          , (\"11101\",'-')\n          , (\"11110\",'\\'')\n          , (\"11111\",'?')]\n"
  },
  {
    "language": "Haskell",
    "code": "letToCode :: Char -> String\nletToCode ch = case ch of\n                ' ' -> \"101\"\n                '\\''-> \"000000\"\n                ',' -> \"000011\"\n                '-' -> \"10010001\"\n                '.' -> \"010001\"\n                '?' -> \"000001\"\n                'A' -> \"100101\"\n                'B' -> \"10011010\"\n                'C' -> \"0101\"\n                'D' -> \"0001\"\n                'E' -> \"110\"\n                'F' -> \"01001\"\n                'G' -> \"10011011\"\n                'H' -> \"010000\"\n                'I' -> \"0111\"\n                'J' -> \"10011000\"\n                'K' -> \"0110\"\n                'L' -> \"00100\"\n                'M' -> \"10011001\"\n                'N' -> \"10011110\"\n                'O' -> \"00101\"\n                'P' -> \"111\"\n                'Q' -> \"10011111\"\n                'R' -> \"1000\"\n                'S' -> \"00110\"\n                'T' -> \"00111\"\n                'U' -> \"10011100\"\n                'V' -> \"10011101\"\n                'W' -> \"000010\"\n                'X' -> \"10010010\"\n                'Y' -> \"10010011\"\n                'Z' -> \"10010000\"\n\nbinToDec str = sum$zipWith(*)(iterate(*2)1)(map(\\x->if x=='1' then 1 else 0)(reverse str))\n\ncodeToLet :: String -> Char\ncodeToLet bin = let dec = binToDec bin\n                in case dec of\n                    0 -> 'A'\n                    1 -> 'B'\n                    2 -> 'C'\n                    3 -> 'D'\n                    4 -> 'E'\n                    5 -> 'F'\n                    6 -> 'G'\n                    7 -> 'H'\n                    8 -> 'I'\n                    9 -> 'J'\n                    10 -> 'K'\n                    11 -> 'L'\n                    12 -> 'M'\n                    13 -> 'N'\n                    14 -> 'O'\n                    15 -> 'P'\n                    16 -> 'Q'\n                    17 -> 'R'\n                    18 -> 'S'\n                    19 -> 'T'\n                    20 -> 'U'\n                    21 -> 'V'\n                    22 -> 'W'\n                    23 -> 'X'\n                    24 -> 'Y'\n                    25 -> 'Z'\n                    26 -> ' '\n                    27 -> '.'\n                    28 -> ','\n                    29 -> '-'\n                    30 -> '\\''\n                    31 -> '?'\n\nsplitAtN _ []  = []\nsplitAtN n str = fst(splitAt n str) : (splitAtN n (snd(splitAt n str)))\n\nstrAddZero str = let len = length str\n                 in if len`mod`5==0 then str else str ++ (replicate (5-len`mod`5) '0')\n\n\nmain = do{\n    getContents>>=mapM_ putStrLn.map((map codeToLet).splitAtN 5.strAddZero.(foldr(++)\"\").(map letToCode)).lines;\n}"
  },
  {
    "language": "Haskell",
    "code": "graph1 = zip s f\n  where\n    s = \" ',-.?\" ++ ['A'..'Z']\n    f = [\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\n         \"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n         \"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n         \"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"]\ngraph2 = zip f2 s2\n  where\n    f2 = [\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\n          \"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\n          \"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\n          \"11000\",\"11001\",\"11010\",\"11011\",\"11100\",\"11101\",\"11110\",\"11111\"]\n    s2 = ['A'..'Z'] ++ \" .,-'?\"\n\nchange1 :: String -> String\nchange1 [] = []\nchange1 (x:xs) = (getG1 x graph1) ++ (change1 xs)\n  where\n    getG1 :: Char -> [(Char,String)] -> String\n    getG1 x [] = []\n    getG1 x ((k,v):r)\n      | x == k = v\n      | otherwise = getG1 x r\n\nchange2 :: String -> String\nchange2 [] = []\nchange2 (x1:x2:x3:x4:x5:r) = (getG2 [x1,x2,x3,x4,x5] graph2) : (change2 r)\nchange2 xs = [getG2 (xs ++ (replicate (5 - length xs) '0')) graph2]\n\ngetG2 :: String -> [(String,Char)] -> Char\ngetG2 s ((k,v):r)\n  | s == k = v\n  | otherwise = getG2 s r\n\nmain :: IO ()\nmain = do\n  ls <- getContents\n  let ls' = lines ls\n      ansL = map (change2 . change1) ls'\n  mapM_ putStrLn ansL"
  },
  {
    "language": "Haskell",
    "code": "import Control.Applicative ((<$>), (<*>))\nimport Control.Monad\nimport Data.List\n\nmain :: IO ()\nmain = getc code >>= mapM_ putStrLn\n\ncode :: String -> String\ncode = fromBin . split5 . toBin\n\ntoBin :: String -> String\ntoBin = concatMap f\n  where\n    f c\n      | c == ' ' = \"101\"\n      | c == '\\'' = \"000000\"\n      | c == ',' = \"000011\"\n      | c == '-' = \"10010001\"\n      | c == '.' = \"010001\"\n      | c == '?' = \"000001\"\n      | c == 'A' = \"100101\"\n      | c == 'B' = \"10011010\"\n      | c == 'C' = \"0101\"\n      | c == 'D' = \"0001\"\n      | c == 'E' = \"110\"\n      | c == 'F' = \"01001\"\n      | c == 'G' = \"10011011\"\n      | c == 'H' = \"010000\"\n      | c == 'I' = \"0111\"\n      | c == 'J' = \"10011000\"\n      | c == 'K' = \"0110\"\n      | c == 'L' = \"00100\"\n      | c == 'M' = \"10011001\"\n      | c == 'N' = \"10011110\"\n      | c == 'O' = \"00101\"\n      | c == 'P' = \"111\"\n      | c == 'Q' = \"10011111\"\n      | c == 'R' = \"1000\"\n      | c == 'S' = \"00110\"\n      | c == 'T' = \"00111\"\n      | c == 'U' = \"10011100\"\n      | c == 'V' = \"10011101\"\n      | c == 'W' = \"000010\"\n      | c == 'X' = \"10010010\"\n      | c == 'Y' = \"10010011\"\n      | c == 'Z' = \"10010000\"\n\nsplit5 :: String -> [String]\nsplit5 ss\n  | b == [] = [c]\n  | otherwise = a : split5 b\n  where\n    (a,b) = splitAt 5 ss\n    c = take 5 $ a ++ \"0000\"\n\nfromBin :: [String] -> String\nfromBin = map f\n  where\n    f s\n      | s == \"00000\" = 'A'\n      | s == \"00001\" = 'B'\n      | s == \"00010\" = 'C'\n      | s == \"00011\" = 'D'\n      | s == \"00100\" = 'E'\n      | s == \"00101\" = 'F'\n      | s == \"00110\" = 'G'\n      | s == \"00111\" = 'H'\n      | s == \"01000\" = 'I'\n      | s == \"01001\" = 'J'\n      | s == \"01010\" = 'K'\n      | s == \"01011\" = 'L'\n      | s == \"01100\" = 'M'\n      | s == \"01101\" = 'N'\n      | s == \"01110\" = 'O'\n      | s == \"01111\" = 'P'\n      | s == \"10000\" = 'Q'\n      | s == \"10001\" = 'R'\n      | s == \"10010\" = 'S'\n      | s == \"10011\" = 'T'\n      | s == \"10100\" = 'U'\n      | s == \"10101\" = 'V'\n      | s == \"10110\" = 'W'\n      | s == \"10111\" = 'X'\n      | s == \"11000\" = 'Y'\n      | s == \"11001\" = 'Z'\n      | s == \"11010\" = ' '\n      | s == \"11011\" = '.'\n      | s == \"11100\" = ','\n      | s == \"11101\" = '-'\n      | s == \"11110\" = '\\''\n      | s == \"11111\" = '?'\n\ngetc :: (String -> a) -> IO [a]\ngetc f = map f . lines <$> getContents"
  },
  {
    "language": "Haskell",
    "code": "import Data.List\n\nenc1 :: Char -> [Int]\nenc1 c =\n  case c of\n    ' '  -> [1,0,1]\n    '\\'' -> [0,0,0,0,0,0]\n    ','  -> [0,0,0,0,1,1]\n    '-'  -> [1,0,0,1,0,0,0,1]\n    '.'  -> [0,1,0,0,0,1]\n    '?'  -> [0,0,0,0,0,1]\n    'A'  -> [1,0,0,1,0,1]\n    'B'  -> [1,0,0,1,1,0,1,0]\n    'C'  -> [0,1,0,1]\n    'D'  -> [0,0,0,1]\n    'E'  -> [1,1,0]\n    'F'  -> [0,1,0,0,1]\n    'G'  -> [1,0,0,1,1,0,1,1]\n    'H'  -> [0,1,0,0,0,0]\n    'I'  -> [0,1,1,1]\n    'J'  -> [1,0,0,1,1,0,0,0]\n    'K'  -> [0,1,1,0]\n    'L'  -> [0,0,1,0,0]\n    'M'  -> [1,0,0,1,1,0,0,1]\n    'N'  -> [1,0,0,1,1,1,1,0]\n    'O'  -> [0,0,1,0,1]\n    'P'  -> [1,1,1]\n    'Q'  -> [1,0,0,1,1,1,1,1]\n    'R'  -> [1,0,0,0]\n    'S'  -> [0,0,1,1,0]\n    'T'  -> [0,0,1,1,1]\n    'U'  -> [1,0,0,1,1,1,0,0]\n    'V'  -> [1,0,0,1,1,1,0,1]\n    'W'  -> [0,0,0,0,1,0]\n    'X'  -> [1,0,0,1,0,0,1,0]\n    'Y'  -> [1,0,0,1,0,0,1,1]\n    'Z'  -> [1,0,0,1,0,0,0,0]\n\nenc1' [] = []\nenc1' (s:sx) = (enc1 s) ++ (enc1' sx)\n\nenc2 :: [Int] -> Char\nenc2 c =\n  case c of\n    [0,0,0,0,0] -> 'A'\n    [0,0,0,0,1] -> 'B'\n    [0,0,0,1,0] -> 'C'\n    [0,0,0,1,1] -> 'D'\n    [0,0,1,0,0] -> 'E'\n    [0,0,1,0,1] -> 'F'\n    [0,0,1,1,0] -> 'G'\n    [0,0,1,1,1] -> 'H'\n    [0,1,0,0,0] -> 'I'\n    [0,1,0,0,1] -> 'J'\n    [0,1,0,1,0] -> 'K'\n    [0,1,0,1,1] -> 'L'\n    [0,1,1,0,0] -> 'M'\n    [0,1,1,0,1] -> 'N'\n    [0,1,1,1,0] -> 'O'\n    [0,1,1,1,1] -> 'P'\n    [1,0,0,0,0] -> 'Q'\n    [1,0,0,0,1] -> 'R'\n    [1,0,0,1,0] -> 'S'\n    [1,0,0,1,1] -> 'T'\n    [1,0,1,0,0] -> 'U'\n    [1,0,1,0,1] -> 'V'\n    [1,0,1,1,0] -> 'W'\n    [1,0,1,1,1] -> 'X'\n    [1,1,0,0,0] -> 'Y'\n    [1,1,0,0,1] -> 'Z'\n    [1,1,0,1,0] -> ' '\n    [1,1,0,1,1] -> '.'\n    [1,1,1,0,0] -> ','\n    [1,1,1,0,1] -> '-'\n    [1,1,1,1,0] -> '\\''\n    [1,1,1,1,1] -> '?'\n\nenc2' :: [Int] -> String\nenc2' [] = []\nenc2' s =\n  let d = take 5 s\n      r = drop 5 s\n  in\n    (enc2 d):(enc2' r)\n\n--enc :: String -> String\nenc x =\n  let e1 = enc1' x\n      ln = (length e1) `mod` 5\n      e' = if ln /= 0\n           then e1 ++ (replicate (5-ln) 0)\n           else e1\n      e2 = enc2' e'\n  in\n    e2\n\nmain = do\n  c <- getContents\n  let i = lines c\n      o = map (enc) i\n  mapM_ putStrLn o"
  },
  {
    "language": "Haskell",
    "code": "import Debug.Trace\n\ncharToCode :: Char -> String\ncharToCode c = case c of\n    ' ' ->\"101\"\n    '\\''->\"000000\"\n    ',' ->\"000011\"\n    '-' ->\"10010001\"\n    '.' ->\"010001\"\n    '?' ->\"000001\"\n    'A' ->\"100101\"\n    'B' ->\"10011010\"\n    'C' ->\"0101\"\n    'D' ->\"0001\"\n    'E' ->\"110\"\n    'F' ->\"01001\"\n    'G' ->\"10011011\"\n    'H' ->\"010000\"\n    'I' ->\"0111\"\n    'J' ->\"10011000\"\n    'K' ->\"0110\"\n    'L' ->\"00100\"\n    'M' ->\"10011001\"\n    'N' ->\"10011110\"\n    'O' ->\"00101\"\n    'P' ->\"111\"\n    'Q' ->\"10011111\"\n    'R' ->\"1000\"\n    'S' ->\"00110\"\n    'T' ->\"00111\"\n    'U' ->\"10011100\"\n    'V' ->\"10011101\"\n    'W' ->\"000010\"\n    'X' ->\"10010010\"\n    'Y' ->\"10010011\"\n    'Z' ->\"10010000\"\n\ncodeToChar :: String->Char\ncodeToChar s = case s of\n    \"00000\"->'A'\n    \"00001\"->'B'\n    \"00010\"->'C'\n    \"00011\"->'D'\n    \"00100\"->'E'\n    \"00101\"->'F'\n    \"00110\"->'G'\n    \"00111\"->'H'\n    \"01000\"->'I'\n    \"01001\"->'J'\n    \"01010\"->'K'\n    \"01011\"->'L'\n    \"01100\"->'M'\n    \"01101\"->'N'\n    \"01110\"->'O'\n    \"01111\"->'P'\n    \"10000\"->'Q'\n    \"10001\"->'R'\n    \"10010\"->'S'\n    \"10011\"->'T'\n    \"10100\"->'U'\n    \"10101\"->'V'\n    \"10110\"->'W'\n    \"10111\"->'X'\n    \"11000\"->'Y'\n    \"11001\"->'Z'\n    \"11010\"->' '\n    \"11011\"->'.'\n    \"11100\"->','\n    \"11101\"->'-'\n    \"11110\"->'\\''\n    \"11111\"->'?'\n\nsolve :: String -> String\nsolve s = solve' code'\n    where code = concat $ map charToCode s\n          mod5 = (length code) `mod` 5\n          n0 = if mod5==0 then 0 else (5-mod5)\n          code' = code ++ (take n0 $ repeat '0')\n\nsolve' :: String -> String\nsolve' \"\" = \"\"\nsolve' code' = (codeToChar x):(solve' xs)\n    where x = take 5 code'\n          xs = drop 5 code'\n\nmain :: IO ()\nmain = do\n    str <- getContents\n    mapM_ putStrLn $ map solve $ lines $ str"
  },
  {
    "language": "Haskell",
    "code": "graph1 = zip s f\n  where\n    s = \" ',-.?\" ++ ['A'..'Z']\n    f = [\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\n         \"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\n         \"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\n         \"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n         \"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"100010010\",\n         \"10010011\",\"10010000\"]\ngraph2 = zip f2 s2\n  where\n    f2 = [\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\n          \"00111\",\"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\n          \"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\n          \"10101\",\"10110\",\"10111\",\"11000\",\"11001\",\"11010\",\"11011\",\n          \"11100\",\"11101\",\"11110\",\"11111\"]\n    s2 = ['A'..'Z'] ++ \" .,-'?\"\n\nchange1 :: String -> String\nchange1 [] = []\nchange1 (x:xs) = (getG1 x graph1) ++ (change1 xs)\n  where\n    getG1 :: Char -> [(Char,String)] -> String\n    getG1 x [] = []\n    getG1 x ((k,v):r)\n      | x == k = v\n      | otherwise = getG1 x r\n\nchange2 :: String -> String\nchange2 [] = []\nchange2 (x1:x2:x3:x4:x5:r) = (getG2 [x1,x2,x3,x4,x5] graph2) : (change2 r)\nchange2 xs = [getG2 (xs ++ (replicate (5 - length xs) '0')) graph2]\n\ngetG2 :: String -> [(String,Char)] -> Char\ngetG2 s ((k,v):r)\n  | s == k = v\n  | otherwise = getG2 s r\n\nmain :: IO ()\nmain = do\n  ls <- getContents\n  let ls' = lines ls\n      ansL = map (change2 . change1) ls'\n  mapM_ putStrLn ansL"
  },
  {
    "language": "Haskell",
    "code": "import Data.Char\n\nmain = interact $ unlines . map code . lines\n\ngroupAt n xs\n | null xs = []\n | otherwise = take n xs : groupAt n (drop n xs)\n\ncode = map cipher . groupAt 5 . concatMap encode\n\ncipher x = case x of\n \"00000\" -> 'A'\n \"00001\" -> 'B'\n \"00010\" -> 'C'\n \"00011\" -> 'D'\n \"00100\" -> 'E'\n \"00101\" -> 'F'\n \"00110\" -> 'G'\n \"00111\" -> 'H'\n \"01000\" -> 'I'\n \"01001\" -> 'J'\n \"01010\" -> 'K'\n \"01011\" -> 'L'\n \"01100\" -> 'M'\n \"01101\" -> 'N'\n \"01110\" -> 'O'\n \"01111\" -> 'P'\n \"10000\" -> 'Q'\n \"10001\" -> 'R'\n \"10010\" -> 'S'\n \"10011\" -> 'T'\n \"10100\" -> 'U'\n \"10101\" -> 'V'\n \"10110\" -> 'W'\n \"10111\" -> 'X'\n \"11000\" -> 'Y'\n \"11001\" -> 'Z'\n \"11010\" -> ' '\n \"11011\" -> '.'\n \"11100\" -> ','\n \"11101\" -> '-'\n \"11110\" -> '\\''\n \"11111\" -> '?'\n _ -> cipher (x ++ (replicate (5 - length x) '0'))\n\nencode c = case c of\n ' ' -> \"101\"\n '\\'' -> \"000000\"\n ',' -> \"000011\"\n '-' -> \"10010001\"\n '.' -> \"010001\"\n '?' -> \"000001\"\n 'A' -> \"100101\"\n 'B' -> \"10011010\"\n 'C' -> \"0101\"\n 'D' -> \"0001\"\n 'E' -> \"110\"\n 'F' -> \"01001\"\n 'G' -> \"10011011\"\n 'H' -> \"010000\"\n 'I' -> \"0111\"\n 'J' -> \"10011000\"\n 'K' -> \"0110\"\n 'L' -> \"00100\"\n 'M' -> \"10011001\"\n 'N' -> \"10011110\"\n 'O' -> \"00101\"\n 'P' -> \"111\"\n 'Q' -> \"10011111\"\n 'R' -> \"1000\"\n 'S' -> \"00110\"\n 'T' -> \"00111\"\n 'U' -> \"10011100\"\n 'V' -> \"10011101\"\n 'W' -> \"000010\"\n 'X' -> \"10010010\"\n 'Y' -> \"10010011\"\n 'Z' -> \"10010000\""
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nchar map[256][16] = {\n\t[' '] = \"101\", ['\\''] = \"000000\", [','] = \"000011\", ['-'] = \"10010001\",\n\t['.'] = \"010001\", ['?'] = \"000001\", ['A'] = \"100101\", ['B'] = \"10011010\",\n\t['C'] = \"0101\", ['D'] = \"0001\", ['E'] = \"110\", ['F'] = \"01001\", ['G'] = \"10011011\",\n\t['H'] = \"010000\", ['I'] = \"0111\", ['J'] = \"10011000\", ['K'] = \"0110\",\n\t['L'] = \"00100\", ['M'] = \"10011001\", ['N'] = \"10011110\", ['O'] = \"00101\",\n\t['P'] = \"111\", ['Q'] = \"10011111\", ['R'] = \"1000\", ['S'] = \"00110\",\n\t['T'] = \"00111\", ['U'] = \"10011100\", ['V'] = \"10011101\", ['W'] = \"000010\",\n\t['X'] = \"10010010\", ['Y'] = \"10010011\", ['Z'] = \"10010000\" \n};\nchar rmap[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint main(void)\n{\n\tunsigned u, t;\n\tint size;\n\n\tsize = u = 0;\n\twhile (t = getchar(), ~t){\n\t\tint i;\n\t\tfor (i = 0; map[t][i]; i++){\n\t\t\tu |= (map[t][i] - '0') << (4 - size);\n\t\t\tsize = (size + 1) % 5;\n\t\t\tif (!size){\n\t\t\t\tputchar(rmap[u]);\n\t\t\t\tu = 0;\n\t\t\t}\n\t\t}\n\t}\n\tif (size) putchar(rmap[u]);\n\n\tputs(\"\");\n\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nstruct pair {\n  int n;\n  int w;\n};\ntypedef struct pair st;\nst a[] =\n  { {0x25,6},{0x9a,8},{5,4},{1,4},{6,3},{9,5},{0x9b,8},{0x10,6},{7,4},\n    {0x98,8},{6,4},{4,5},{0x99,8},{0x9e,8},{5,5},{7,3},{0x9f,8},{8,4},\n    {6,5},{7,5},{0x9c,8},{0x9d,8},{2,6},{0x92,8},{0x93,8},{0x90,8},};\nst sp = {5,3};\nst qu = {0,6};\nst co = {3,6};\nst hi = {0x91,8};\nst pe = {0x11,6};\nst qe = {1,6};\nchar b[] = { 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P',\n\t     'Q','R','S','T','U','V','W','X','Y','Z',' ','.',',','-','\\'','?'};\nint main()\n{\n  char c;\n  st s={0,0},t;\n  for(;;){\n    scanf(\"%c\",&c);\n    if(c == '\\n'){\n      if(s.w != 0) {\n\tprintf(\"%c\\n\",b[(s.n << (5 - s.w))]);\n      }\n      break;\n    }\n    switch(c){\n    case ' ': t = sp; break;\n    case '\\'': t = qu; break;\n    case ',': t = co; break;\n    case '-': t = hi; break;\n    case '.': t = pe; break;\n    case '?': t = qe; break;\n    default: t = a[c-'A']; break;\n    }\n    s.n = (s.n << t.w) + t.n;\n    s.w += t.w;\n    while(s.w >= 5){\n      printf(\"%c\",b[(s.n >> (s.w - 5))]);\n      s.n = (s.n & ~(0x1f << (s.w - 5)));\n      s.w -= 5;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  d[0] = '\\0';\n  while(gets(e)) {\n    strcat(d,e);\n    strcat(d,\" \");\n  }\n  d[strlen(d) - 1] = '\\0';\n  e[0] = '\\0';\n  i = 0;\n  while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n  i = 5 - strlen(e) % 5;\n  while(i--) strcat(e,\"0\");\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define NUL 0x00\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\n#define TEXT_MAX 100\n\nint main(void)\n{\n\tshort i = 0;\n\tshort j = 0;\n\n\tshort text_length = 0;\n\tchar input_text[TEXT_MAX];\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tchar barcode[801];\n\tchar code_fivecut[160][5];\n\t\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint barcode_length = 0;\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor(i = 0;i < 800 ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint k = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < 5; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[k].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\tinput_text[i] = NUL;\n\t\t}\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < 160;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  d[0] = '\\0';\n  while(gets(e)) {\n    strcat(d,e);\n    strcat(d,\" \");\n  }\n  d[strlen(d)] = '\\0';\n  e[0] = '\\0';\n  i = 0;\n  while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n  i = 5 - strlen(e) % 5;\n  while(i--) strcat(e,\"0\");\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  putc('\\n',stdout);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nchar *encode[] = {\n\t\"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \n\t\"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \n\t\"00100\", \"10011001\", \"1001110\", \"00101\", \"111\", \n\t\"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \n\t\"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\",\n\t\"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \n};\n\nchar *decode[] = {\n\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \n\t\"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \n\t\"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \n\t\"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \n\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \n\t\"11110\", \"11111\", \n};\n\nint main(void)\n{\n\tchar str[128];\n\t\n\twhile (fgets(str, 120, stdin) != NULL){\n\t\tint i, j;\n\t\tchar s[1024] = {0};\n\t\tint enc;\n\t\t\n\t\tfor (i = j = 0; str[i] != '\\n'; i++){\n\t\t\tswitch (str[i]){\n\t\t\t\tcase ' ': enc = 26; break;\n\t\t\t\tcase '\\'': enc = 27; break;\n\t\t\t\tcase ',': enc = 28; break;\n\t\t\t\tcase '-': enc = 29; break;\n\t\t\t\tcase '.': enc = 30; break;\n\t\t\t\tcase '?': enc = 31; break;\n\t\t\t\tdefault: enc = str[i] - 'A'; break;\n\t\t\t}\n\t\t\tsprintf(s + j, \"%s\", encode[enc]);\n\t\t\tj += strlen(encode[enc]);\n\t\t}\n\t\twhile (strlen(s) % 5 != 0) s[j++] = '0';\n\t\t\n\t\tfor (i = 0; s[i] != 0; i += 5){\n\t\t\tfor (j = 0; j < 32; j++){\n\t\t\t\tif (strncmp(s + i, decode[j], 5) == 0){\n\t\t\t\t\tswitch (j){\n\t\t\t\t\t\tcase 26: putchar(' '); break;\n\t\t\t\t\t\tcase 27: putchar('.'); break;\n\t\t\t\t\t\tcase 28: putchar(','); break;\n\t\t\t\t\t\tcase 29: putchar('-'); break;\n\t\t\t\t\t\tcase 30: putchar('\\''); break;\n\t\t\t\t\t\tcase 31: putchar('?'); break;\n\t\t\t\t\t\tdefault: putchar(j + 'A'); break;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tputchar('\\n');\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  d[0] = '\\0';\n  while(fgets(e,4096,stdin)) {\n    *strchr(e,'\\n') = ' ';\n    strcat(d,e);\n  }\n  d[strlen(d) - 1] = '\\0';\n  /*\n  e[0] = '\\0';\n  i = 0;\n  while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n  i = 5 - strlen(e) % 5;\n  while(i--) strcat(e,\"0\");\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  */\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "/*\nAizuOnline A0088\nThe Code A Doctor Loved\n2012/12/31 WA\n*/\n#include <stdio.h>\n// Select Below\n//#include <stdlib.h>\n#include <string.h>\n//#include <float.h>\n//#include <math.h>\n//Global data section\n\nchar heibun[1000];\nchar s1[10000];\nchar s2[2000];\n\nchar *step1table[]={\n//  SP ' , - . ?\n        \"101\",\n\t\"000000\",\n\t\"000011\",\n\t\"10010001\",\n\t\"010001\",\n\t\"000001\",\n// A-B\n\t\"100101\",\n\t\"10011010\",\n// C-J\n\t\"0101\",\n\t\"0001\",\n\t\"110\",\n\t\"01001\",\n\t\"10011011\",\n\t\"010000\",\n\t\"0111\",\n\t\"10011000\",\n// K-R\n\t\"0110\",\n\t\"00100\",\n\t\"10011001\",\n\t\"10011110\",\n\t\"00101\",\n\t\"111\",\n\t\"10011111\",\n\t\"1000\",\n// S-Z\n\t\"00110\",\n\t\"00111\",\n\t\"10011100\",\n\t\"10011101\",\n\t\"000010\",\n\t\"10010010\",\n\t\"10010011\",\n\t\"10010000\"};\nint conv(char c)\n{\n  //printf(\"%c\",c);\n  char *x;\n  char compared[] = \" ',-.?\";\n  if(NULL != (x = strchr(compared,c)))\n    return(x - compared);\n  return(c - 'A' + 6);    \n}\nvoid step1()\n{\n  char *s,c;\n\n  s=heibun;\n  s1[0]='\\0';\n  while(c=*s++)\n    {\n      //printf(\"%c %s\\n\",c,step1table[conv(c)]);\n      strcat(s1,step1table[conv(c)]);\n    }\n  strcat(s1,\"0000\");\n}\nint conv5bin(char *s)\n{\n  //printf(\"%5s\\n\",s);\n  int sum;\n  sum  = (s[0]=='1')?16:0;\n  sum += (s[1]=='1')?8:0;\n  sum += (s[2]=='1')?4:0;\n  sum += (s[3]=='1')?2:0;\n  sum += (s[4]=='1')?1:0;\n  return(sum);\n}\nvoid step2()\n{\n  int s2ptr;\n  int i;\n\n  s2ptr=0;\n  for(i=0;i<(strlen(s1)/5)*5;i+=5)\n    s2[s2ptr++]=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[conv5bin(&(s1[i]))];\n  s2ptr='\\0';\n}\nmain()\n{\n  int i;\n\n  while(NULL != gets(heibun))\n    {\n      \n      for(i=0;i<2000;i++)\n\ts2[i]='\\0';\n      \n\n      step1();\n      step2();\n\n\n      //printf(\"%s\\n\",s1);\n      printf(\"%s\\n\",s2);\n    }\nreturn(0);\n}"
  },
  {
    "language": "C",
    "code": "char*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",*strchr();L[]={6,8,4,4,3,5,8,6,4,8,4,5,8,8,5,3,8,4,5,5,8,8,6,8,8,8,3,6,6,8,6,6};B[]={0x25,0x9a,0x05,0x01,0x06,0x09,0x9b,0x10,0x07,0x98,0x06,0x04,0x99,0x9e,0x05,0x07,0x9f,0x08,0x06,0x07,0x9c,0x9d,0x02,0x92,0x93,0x90,0x05,0x11,0x03,0x91,0x00,0x01};b,l;main(c){for(;c=getchar(),c+1;)if(c-10)for(c=strchr(C,c)-C,b=b<<L[c]|B[c],l+=L[c];l>4;putchar(C[b>>l&31]))l-=5;elsel&&putchar(C[(b<<=5-l)&31]),l=0,putchar(c);exit(0);}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nint main()\n{\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[4096];\n  unsigned char *p;\n  int i,j,k;\n  i = 0;\n  while((k = getchar()) != '\\n'){\n    j = 0;\n    while(*(a + j) != k) j++;\n    p = b[j];\n    while(*p) d[i++] = *p++;\n  }\n  while(i % 5) d[i++] = '0';\n  d[i] = '\\0';\n  i = 0;\n  while(d[i]) {\n    k = 0;\n    j = 4;\n    do {\n      k |= (d[i++] == '1') << j;\n    } while(j--);\n    putchar(*(c + k));\n  }\n  putchar('\\n');\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  d[0] = '\\0';\n  while(gets(e)) {\n    strcat(d,e);\n    strcat(d,\" \");\n  }\n  d[strlen(d) - 1] = '\\0';\n  /*\n  e[0] = '\\0';\n  i = 0;\n  while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n  i = 5 - strlen(e) % 5;\n  while(i--) strcat(e,\"0\");\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  */\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  char *p;\n  i = 0;\n  while(gets(e)) {\n    j = 0;\n    while(e[j]) d[i++] = e[j++];\n    d[i++] = ' ';\n  }\n  d[i - 1] = '\\0';\n  i = 0;\n  j = 0;\n  while(d[i]) {\n    k = 0;\n    p = a;\n    while(*p++ != d[i]) k++;\n    p = b[k];\n    while(*p) e[j++] = *p++;\n    i++;\n  }\n  /*\n  i = 5 - j % 5;\n  while(i--) e[j++] = '0';\n  e[j] = '\\0';\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  */\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n\n#include <iostream>\n#include <stdio.h>\n#include <string>\n#include <string.h>\n#include <queue>\n#include <cmath>\n#include <stack>\n#include <map>\n\n#define int64 long long int \nusing namespace std;\n\nstring encode(string, char);\nvoid decode(string);\n\nint main()\n{\n\tint c;\n\tstring str;\n\twhile((c = getchar()) != EOF){\n\t\tstr = encode(str, c);\n\t}\n\tdecode(str);\n\n\treturn 0;\n}\n\nvoid decode(string str)\n{\n\tint i, len, r;\n\tstring part;\n\tconst string code[32] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\tconst char ch[35] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n\tlen = str.size();\n\n\tfor(i=0; i<len / 5; i++){\n\t\tpart = str.substr( 5*i, 5 );\n\t\tfor(int j=0; j<32; j++)\n\t\t\tif(part == code[j]) cout << ch[j];\n\t}\n\tif((r = len % 5) != 0){\n\t\tpart = str.substr( 5*i, len-1 );\n\t\tfor(i=0; i<5-r; i++) part += \"0\";\n\t\tfor(i=0; i<32; i++)\n\t\t\tif(part == code[i]) cout << ch[i];\n\t}\n\tcout << endl;\n\treturn;\n}\n\nstring encode(string str, char c)\n{\n\tconst string code[32] = {\n\t\t\"101\", \"000000\", \"000011\", \"10010001\",\n\t\t\"010001\", \"000001\", \"100101\", \"10011010\",\n\t\t\"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\",\n\t\t\"0110\", \"00100\", \"10011001\", \"10011110\",\n\t\t\"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\",\n\t\t\"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tconst char ch[35] = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; \n\n\tfor(int i=0; i<32; i++){\n\t\tif(c == ch[i]){\n\t\t\tif(str.empty()) str = code[i];\n\t\t\telse str += code[i];\n\t\t}\n\t}\n\treturn str;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>          // putchar(), fgets()\n#include <stdlib.h>         // strtol()\n\nconst char NUL = '\\0';\nconst char *code[91] = \n{\n\t[' '] = \"101\", ['\\''] = \"000000\", [','] = \"000011\", ['-'] = \"10010001\", ['.'] = \"010001\", ['?'] = \"000001\", ['A'] = \"100101\", ['B'] = \"10011010\",\n\t['C'] = \"0101\", ['D'] = \"0001\", ['E'] = \"110\", ['F'] = \"01001\", ['G'] = \"10011011\", ['H'] = \"010000\", ['I'] = \"0111\", ['J'] = \"10011000\",\n\t['K'] = \"0110\", ['L'] = \"00100\", ['M'] = \"10011001\", ['N'] = \"10011110\", ['O'] = \"00101\", ['P'] = \"111\", ['Q'] = \"10011111\", ['R'] = \"1000\",\n\t['S'] = \"00110\", ['T'] = \"00111\", ['U'] = \"10011100\", ['V'] = \"10011101\", ['W'] = \"000010\", ['X'] = \"10010010\", ['Y'] = \"10010011\", ['Z'] = \"10010000\"\n};\n\nconst char chara[32] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-\\'?\";\n\nint\nmain(int argc, char **argv)\n{\n\tchar line[101];\n\tchar trans[801];  /* 8 * 100 + 1 */\n\tchar bina[906]; /* 800 + 159 + 1 */\n\tconst char *s, *t;\n\tchar *u;\n\tchar *nextp = NULL;\n\tint i;\n\n\twhile (fgets(line, sizeof(line), stdin) != NULL)\n\t{\n\t\tint ix = 0;\n\t\ts = line;\n\t\tfor (; *s != '\\n' && *s != NUL; ++s)\n\t\t{\n\t\t\tfor (t = code[(int)*s]; *t != NUL; ++t)\n\t\t\t\ttrans[ix++] = *t;\n\n\t\t}\n\n\t\ttrans[ix] = NUL;\n\t\ts = trans;\n\t\tu = bina;\n\t\twhile (*s != NUL)\n\t\t{\n\t\t\tif (s != trans)\n\t\t\t\t*u++ = ' ';\n\n\t\t\tfor (i = 0; i < 5; ++i)\n\t\t\t{\n\t\t\t\tif (*s == NUL)\n\t\t\t\t\t*u++ = '0';\n\t\t\t\telse\n\t\t\t\t\t*u++ = *s++;\n\t\t\t}\n\t\t}\n\n\t\t*u = NUL;\t\t\n\t\ts = bina;\n\t\twhile (*s != NUL)\n\t\t{\n\t\t\tputchar(chara[strtol(s, &nextp, 2)]);\n\t\t\ts = nextp;\n\t\t}\n\n\t\tputchar('\\n');\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define CODE_MAX 801\n#define NUL 0x00\n#define INITIALIZE 0\n#define TEXT_MAX 100\n#define FIVE 5\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\nint main(void)\n{\n\tshort i = INITIALIZE;\n\tshort j = INITIALIZE;\n\tshort text_length = INITIALIZE;\n\tchar input_text[TEXT_MAX];\n\t\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\t\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\tinput_text[i] = NUL;\n\t\t}\n\t\tfor(i = 0; i < CODE_MAX-1; i++)//配列の最後(800番目)には\\0が入るためマイナス1してある\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < 160;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint barcode_length = 0;\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor(i = 0;i < CODE_MAX ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint k = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < 5; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[j].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nint main()\n{\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[4096];\n  unsigned char *p;\n  int i,j,k;\n  i = 0;\n  while((k = getc(stdin)) != EOF){\n    j = 0;\n    while(*(a + j) != k) j++;\n    p = b[j];\n    while(*p) d[i++] = *p++;\n  }\n  while(i % 5) d[i++] = '0';\n  d[i] = '\\0';\n  i = 0;\n  while(d[i]) {\n    k = 0;\n    j = 4;\n    do {\n      k |= (d[i++] == '1') << j;\n    } while(j--);\n    putc(*(c + k),stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n \n#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include<stdlib.h>\n#include<stdarg.h>\n#include<malloc.h>\n#include<limits.h>\n\nvoid convert(char, char cd[10]);\nchar convert2(char cd[8]);\n\nint main()\n{\n\tchar str[1000], code[1000][10]={0}, lcode[10000], buf[8]={0};\n\tint i, j, len, block;\n\n\twhile(gets(str) != NULL){\n\t\tlen = strlen(str);\n\n\t\tfor(i=0; i<len; i++){\n\t\t\tconvert(str[i], code[i]);\n\t\t}\n\n\t\tstrcpy(lcode, code[0]);\n\t\tfor(i=1; i<len; i++)\n\t\t\tstrcat(lcode, code[i]);\n\n\t\tlen = strlen(lcode);\n\n\t\tif(len % 5 != 0)\n\t\t\tblock = len / 5 + 1;\n\t\telse\n\t\t\tblock = len / 5;\n\n\t\tfor(i=0; i<block; i++){\n\t\t\tif(i != block-1){\n\t\t\t\tfor(j=0; j<5; j++){\n\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor(j=0; j<5; j++)\n\t\t\t\t\tbuf[j] = '0';\n\t\t\t\tif(len % 5 == 0){\n\t\t\t\t\tfor(j=0; j<5; j++)\n\t\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t} else {\n\t\t\t\t\tfor(j=0; j<len%5; j++)\n\t\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%c\", convert2(buf));\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\t\n\treturn 0;\n}\n\nvoid convert(char c, char cd[10])\n{\n\tint i;\n\tchar a[32][10] = {\n\t\t\"101\", \"000000\", \"000011\", \"10010001\",\n\t\t\"010001\", \"000001\", \"100101\", \"10011010\",\n\t\t\"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\",\n\t\t\"0110\", \"00100\", \"10011001\", \"10011110\",\n\t\t\"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\",\n\t\t\"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tchar b[32] = {' ', '\\'', ',', '-', '.', '?'};\n\n\tfor(i=6; i<32; i++)\n\t\tb[i] = 'A' - 6 + i;\n\n\tfor(i=0; i<32; i++){\n\t\tif(c == b[i]){\n\t\t\tstrcpy(cd, a[i]);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn;\n}\n\nchar convert2(char cd[8])\n{\n\tchar a[32][8] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\",\n\t\t\"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\",\n\t\t\"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\",\n\t\t\"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\",\n\t\t\"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\tchar b[32] = {\n\t\t'A','B','C','D','E','F','G','H',\n\t\t'I','J','K','L','M','N','O','P',\n\t\t'Q','R','S','T','U','V','W','X',\n\t\t'Y','Z',' ','.',',','-','\\'','?'\n\t};\n\tint i;\n\n\tfor(i=0; i<32; i++){\n\t\tif(strcmp(cd, a[i]) == 0){\n\t\t\treturn b[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint main(void)\n{\n\tchar before[32][9] = { \n\t\t\"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\",\n\t\t\"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\",\n\t\t\"10010010\", \"10010011\", \"10010000\", \"101\", \"000000\", \"000011\",\n\t\t\"10010001\", \"010001\", \"000001\"\n\t};\n\tchar after[32][6] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\",\n\t\t\"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\",\n\t\t\"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\",\n\t\t\"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\",\n\t\t\"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\t\n\tchar str[512], str2[2048];\n\tint i, j, len;\n\t\n\twhile (fgets(str, 512, stdin) != NULL){\n\t\tfor (i = 0; i < 128; i++){\n\t\t\tstr2[i] = '\\0';\n\t\t}\n\t\t\n\t\ti = 0;\n\t\twhile (str[i] != '\\0'){\n\t\t\tif (str[i] >= 'A' && str[i] <= 'Z'){\n\t\t\t\tstrcat(str2, before[str[i] - 'A']);\n\t\t\t}\n\t\t\tswitch (str[i]){\n\t\t\t\tcase ' ':\n\t\t\t\tstrcat(str2, before[26]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '\\'':\n\t\t\t\tstrcat(str2, before[27]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase ',':\n\t\t\t\tstrcat(str2, before[28]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '-':\n\t\t\t\tstrcat(str2, before[29]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '.':\n\t\t\t\tstrcat(str2, before[30]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '?':\n\t\t\t\tstrcat(str2, before[31]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tlen = strlen(str2);\n\t\twhile (len % 5 != 0){\n\t\t\tstrcat(str2, \"0\");\n\t\t\tlen++;\n\t\t}\n\t\t\n\t\ti = 0;\n\t\twhile (len - i > 0){\n\t\t\tfor (j = 0; j < 32; j++){\n\t\t\t\tif (strncmp(&str2[i], after[j], 5) == 0){\n\t\t\t\t\tif (j >= 0 && j <= 25){\n\t\t\t\t\t\tprintf(\"%c\", j + 'A');\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tswitch (j){\n\t\t\t\t\t\t\tcase 26:\n\t\t\t\t\t\t\tprintf(\" \");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 27:\n\t\t\t\t\t\t\tprintf(\".\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 28:\n\t\t\t\t\t\t\tprintf(\",\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 29:\n\t\t\t\t\t\t\tprintf(\"-\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 30:\n\t\t\t\t\t\t\tprintf(\"\\'\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 31:\n\t\t\t\t\t\t\tprintf(\"?\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\ti += 5;\n\t\t}\n\t\t\n\t\tputs(\"\");\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\nint main(){\n  int m,i;\n  char s[102];\n  //char c[801];\n  const char p1[32][9]={\n    \"101\",\"000000\",\"000011\",\"10010001\",\n    \"010001\",\"000001\",\"100101\",\"10011010\",\n    \"0101\",\"0001\",\"110\",\"01001\",\n    \"10011011\",\"010000\",\"0111\",\"10011000\",\n    \"0110\",\"00100\",\"10011001\",\"10011110\",\n    \"00101\",\"111\",\"10011111\",\"1000\",\n    \"00110\",\"00111\",\"10011100\",\"10011101\",\n    \"000010\",\"10010010\",\"10010011\",\"10010010\"};\n  while(fgets(s,101,stdin)!=NULL){\n    char c[801]={0};\n    char a[170]={0};\n    for(i=0;s[i]!=0;i++){\n      if     (s[i]==' ') m=0;\n      else if(s[i]=='\\'')m=1;\n      else if(s[i]==',') m=2;\n      else if(s[i]=='-') m=3;\n      else if(s[i]=='.') m=4;\n      else if(s[i]=='?') m=5;\n      else if(s[i]=='\\n')m=0;\n      else               m=6+s[i]-'A';\n      strcat(c,p1[m]);\n    }//printf(\"%s\",c);\n    for(i=0;c[i]!=0;i+=5){\n      m=0;\n      if(c[i]=='1')m+=16;\n      if(c[i+1]=='1')m+=8;\n      if(c[i+2]=='1')m+=4;\n      if(c[i+3]=='1')m+=2;\n      if(c[i+4]=='1')m+=1;\n      if(m<26)a[i/5]='A'+m;\n      else if(m==26)a[i/5]=' ';\n      else if(m==27)a[i/5]='.';\n      else if(m==28)a[i/5]=',';\n      else if(m==29)a[i/5]='-';\n      else if(m==30)a[i/5]='\\'';\n      else if(m==31)a[i/5]='?';\n    }\n    printf(\"%s\\n\",a);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\nint main() \n{\n\tchar c[] = { \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\" };\n\tchar w[][9] = {\n\t\t\"101\"     ,\n\t\t\"000000\"  ,\n\t\t\"000011\"  ,\n\t\t\"10010001\",\n\t\t\"010001\"  ,\n\t\t\"000001\"  ,\n\t\t\"100101\"  ,\n\t\t\"10011010\",\n\t\t\"0101\"    ,\n\t\t\"0001\"    ,\n\t\t\"110\"     ,\n\t\t\"01001\"   ,\n\t\t\"10011011\",\n\t\t\"010000\"  ,\n\t\t\"0111\"    ,\n\t\t\"10011000\",\n\t\t\"0110\"    ,\n\t\t\"00100\"   ,\n\t\t\"10011001\",\n\t\t\"10011110\",\n\t\t\"00101\"   ,\n\t\t\"111\"     ,\n\t\t\"10011111\",\n\t\t\"1000\"    ,\n\t\t\"00110\"   ,\n\t\t\"00111\"   ,\n\t\t\"10011100\",\n\t\t\"10011101\",\n\t\t\"000010\"  ,\n\t\t\"10010010\",\n\t\t\"10010011\",\n\t\t\"10010000\"\n\t};\n\tchar n[102];\n\tint i, j;\n\n\twhile (fgets(n, 101, stdin) != NULL) \n\t{\n\t\tchar s[920] = { 0 };\n\t\tfor (i = 0; n[i + 1]; i++) \n\t\t{\n\t\t\tfor (j = 0; n[i] != c[j]; j++)\n\t\t\t{\n\t\t\t\t;\n\t\t\t}\n\t\t\tstrcat(s, w[j]);\n\t\t}\n\t\t//printf(\"%s\\n\",s);\n\t\tfor (i = j = 0; s[i]; i++) \n\t\t{\n\t\t\tj *= 2;\n\t\t\tif (s[i] == '1')\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (i % 5 == 4) \n\t\t\t{\n\t\t\t\tprintf(\"%c\", c[j + 6]);\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\tif (i % 5) \n\t\t{\n\t\t\tfor (; i % 5 != 0; i++)\n\t\t\t{\n\t\t\t\tj *= 2;\n\t\t\t}\n\t\t\tprintf(\"%c\", c[j + 6]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n"
  },
  {
    "language": "C",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\nint main() {\n\tchar str[200] = \"\", code[100000] = \"\";\n\tchar *pstr, *pcode;\n\tint x, b, base;\n\n\twhile (fgets(str,sizeof(str),stdin)!=NULL) {\n\t\tpstr = &str[0];\n\t\tpcode = &code[0];\n\t\twhile (*pstr) {\n\t\t\tswitch (*pstr) {\n\t\t\tcase 'O': strcat(pcode, \"0\"); case 'C': strcat(pcode, \"0\"); case ' ': strcat(pcode, \"101\"); break;\n\t\t\tcase '\\'': strcat(pcode, \"000000\"); break;\n\t\t\tcase ',': strcat(pcode, \"000011\"); break;\n\t\t\tcase '-': strcat(pcode, \"1001\"); case 'D': strcat(pcode, \"0001\"); break;\n\t\t\tcase '.': strcat(pcode, \"010001\"); break;\n\t\t\tcase 'T': strcat(pcode, \"0\"); case 'I': strcat(pcode, \"0\"); case 'P': strcat(pcode, \"111\"); break;\n\t\t\tcase 'S': strcat(pcode, \"0\"); case 'K': strcat(pcode, \"0\"); case 'E': strcat(pcode, \"110\"); break;\n\t\t\tcase 'A': strcat(pcode, \"100101\"); break;\n\t\t\tcase 'B': strcat(pcode, \"10011010\"); break;\n\t\t\tcase 'F': strcat(pcode, \"01001\"); break;\n\t\t\tcase 'G': strcat(pcode, \"10011011\"); break;\n\t\t\tcase 'H': strcat(pcode, \"010000\"); break;\n\t\t\tcase 'J': strcat(pcode, \"1001\"); case 'R': strcat(pcode, \"1000\"); break;\n\t\t\tcase 'L': strcat(pcode, \"00100\"); break;\n\t\t\tcase 'M': strcat(pcode, \"10011001\"); break;\n\t\t\tcase 'N': strcat(pcode, \"10011110\"); break;\n\t\t\tcase 'Q': strcat(pcode, \"1001111\"); break;\n\t\t\tcase 'U': strcat(pcode, \"10011100\"); break;\n\t\t\tcase 'V': strcat(pcode, \"10011101\"); break;\n\t\t\tcase 'W': strcat(pcode, \"000010\"); break;\n\t\t\tcase 'X': strcat(pcode, \"10010011\"); break;\n\t\t\tcase 'Y': strcat(pcode, \"10010011\"); break;\n\t\t\tcase 'Z': strcat(pcode, \"10010000\"); break;\n\t\t\tcase '?': strcat(pcode, \"000001\"); break;\n\t\t\tdefault:break;\n\t\t\t}\n\t\t\tpstr++;\n\t\t}\n\t\twhile (strlen(pcode) % 5) strcat(pcode, \"0\");\n\t\twhile (*pcode) {\n\t\t\tsprintf(str, \"%.5s\", pcode);\n\t\t\tpcode += 5;\n\t\t\tb = atoi(str);\n\t\t\tbase = 1, x = 0;\n\t\t\twhile (b > 0) {\n\t\t\t\tx += (b % 10)*base;\n\t\t\t\tb /= 10;\n\t\t\t\tbase *= 2;\n\t\t\t}\n\t\t\tif (x == 26) x = ' ' - 'A';\n\t\t\telse if (x == 27) x = '.' - 'A';\n\t\t\telse if (x == 28) x = ',' - 'A';\n\t\t\telse if (x == 29) x = '-' - 'A';\n\t\t\telse if (x == 30) x = '\\'' - 'A';\n\t\t\telse if (x == 31) x = '?' - 'A';\n\t\t\tprintf(\"%c\", 'A' + x);\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tmemset(code, '\\0', sizeof(code));\n\t\tmemset(str, '\\0', sizeof(str));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\nint main(){\n  char c[]={\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"};\n  char w[][9]={\n    \"101\"     ,\n    \"000000\"  , \n    \"000011\"  ,\n    \"10010001\",\n    \"010001\"  ,\n    \"000001\"  ,\n    \"100101\"  ,\n    \"10011010\",\n    \"01010\"   ,\n    \"0001\"    ,\n    \"110\"     ,\n    \"01001\"   ,\n    \"10011011\",\n    \"010000\"  ,\n    \"0111\"    ,\n    \"10011000\",\n    \"0110\"    ,\n    \"00100\"   ,\n    \"10011001\",\n    \"10011110\",\n    \"00101\"   ,\n    \"111\"     ,\n    \"1001111\" ,\n    \"1000\"    ,\n    \"00110\"   ,\n    \"00111\"   ,\n    \"10011100\",\n    \"10011101\",\n    \"000010\"  ,\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n  };\n  char n[102];\n  //char s[920]={0};\n  int i,j;\n  while(fgets(n,101,stdin)!=NULL){\n    char s[920]={0};\n    for(i=0;n[i]!=10;i++){\n      for(j=0;n[i]!=c[j];j++);\n      strcat(s,w[j]);\n    }//printf(\"%s\\n\",s);\n    for(i=j=0;s[i];i++){\n      j*=2;\n      if(s[i]=='1')j++;\n      if(i%5==4){\n\tprintf(\"%c\",c[j+6]);\n\tj=0;\n      }\n    }\n    if(i%5){\n      for(;i%5!=0;i++)j*=2;\n      printf(\"%c\",c[j+6]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  char *p;\n  i = 0;\n  while((k = getc(stdin)) != EOF) {\n    j = 0;\n    while(*(a + j) != k) j++;\n    p = b[j];\n    while(*p) e[i++] = *p++;\n  }\n  j = 5 - i % 5;\n  while(j--) e[i++] = '0';\n  e[i] = '\\0';\n  i = 0;\n  while(e[i]) {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nchar *enc[] = {\n    \"100101\", \"10011010\", \"0101\", \"0001\",\n    \"110\", \"01001\", \"10011011\", \"010000\",\n    \"0111\", \"10011000\", \"0110\", \"00100\",\n    \"10011001\", \"10011110\", \"00101\", \"111\",\n    \"10011111\", \"1000\", \"00110\", \"00111\",\n    \"10011100\", \"10011101\", \"000010\", \"10010010\",\n    \"10010011\", \"10010000\", \"101\", \"000000\",\n    \"000011\", \"10010001\", \"010001\", \"000001\",\n};\n\nchar *dec[] = {\n    \"00000\", \"00001\", \"00010\", \"00011\",\n    \"00100\", \"00101\", \"00110\", \"00111\",\n    \"01000\", \"01001\", \"01010\", \"01011\",\n    \"01100\", \"01101\", \"01110\", \"01111\",\n    \"10000\", \"10001\", \"10010\", \"10011\",\n    \"10100\", \"10101\", \"10110\", \"10111\",\n    \"11000\", \"11001\", \"11010\", \"11011\",\n    \"11100\", \"11101\", \"11110\", \"11111\",\n};\n\nchar str[128];\nchar changed[2048];\n\nint check(char c)\n{\n    if ('A' <= c && c <= 'Z') return 0;\n    if (c == '0' || c == '1') return 0;\n    if (c == ' ' || c == '\\'') return 0;\n    if (c == ',' || c == '-') return 0;\n    if (c == '.' || c == '?') return 0;\n    return -1;\n}\n\nint main(void)\n{\n    while (fgets(str, 120, stdin) != NULL){\n        int i, j;\n\n        memset(changed, 0, sizeof(changed));\n        for (i = j = 0; check(str[i]) == 0; i++){\n            int e;\n\n            switch (str[i]){\n                case ' ': e = 26; break;\n                case '\\'': e = 27; break;\n                case ',': e = 28; break;\n                case '-': e = 29; break;\n                case '.': e = 30; break;\n                case '?': e = 31; break;\n                default: e = str[i] - 'A'; break;\n            }\n            sprintf(changed + j, \"%s\", enc[e]);\n            j += strlen(enc[e]);\n        }\n        while (j % 5 != 0) changed[j++] = '0';\n        for (i = 0; check(changed[i]) == 0; i += 5){\n            int d;\n\n            for (j = d = 0; j < 5; j++){\n                d *= 2;\n                d += changed[i + j] - '0';\n            }\n            switch (d){\n                case 26: putchar(' '); break;\n                case 27: putchar('.'); break;\n                case 28: putchar(','); break;\n                case 29: putchar('-'); break;\n                case 30: putchar('\\''); break;\n                case 31: putchar('?'); break;\n                default: putchar('A' + d); break;\n            }\n        }\n        puts(\"\");\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\nint main(){\n  char c[]={\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\"};\n  char w[][9]={\n    \"101\"     ,\n    \"000000\"  , \n    \"000011\"  ,\n    \"10010001\",\n    \"010001\"  ,\n    \"000001\"  ,\n    \"100101\"  ,\n    \"10011010\",\n    \"01010\"   ,\n    \"0001\"    ,\n    \"110\"     ,\n    \"01001\"   ,\n    \"10011011\",\n    \"010000\"  ,\n    \"0111\"    ,\n    \"10011000\",\n    \"0110\"    ,\n    \"00100\"   ,\n    \"10011001\",\n    \"10011110\",\n    \"00101\"   ,\n    \"111\"     ,\n    \"1001111\" ,\n    \"1000\"    ,\n    \"00110\"   ,\n    \"00111\"   ,\n    \"10011100\",\n    \"10011101\",\n    \"000010\"  ,\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n  };\n  char n[102];\n  //char s[920]={0};\n  int i,j;\n  while(fgets(n,101,stdin)!=NULL){\n    char s[920]={0};\n    for(i=0;n[i]!=10;i++){\n      for(j=0;n[i]!=c[j];j++);\n      strcat(s,w[j]);\n    }//printf(\"%s\\n\",s);\n    for(i=j=0;s[i];i++){\n      j*=2;\n      if(s[i]=='1')j++;\n      if(i%5==4){\n\tprintf(\"%c\",c[(j+6)%32]);\n\tj=0;\n      }\n    }\n    for(;i%5!=4;i++)j*=2;\n    printf(\"%c\\n\",c[(j+6)%32]);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\nint main(){\n  char c[]={\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"};\n  char w[][9]={\n    \"101\"     ,\n    \"000000\"  , \n    \"000011\"  ,\n    \"10010001\",\n    \"010001\"  ,\n    \"000001\"  ,\n    \"100101\"  ,\n    \"10011010\",\n    \"01010\"   ,\n    \"0001\"    ,\n    \"110\"     ,\n    \"01001\"   ,\n    \"10011011\",\n    \"010000\"  ,\n    \"0111\"    ,\n    \"10011000\",\n    \"0110\"    ,\n    \"00100\"   ,\n    \"10011001\",\n    \"10011110\",\n    \"00101\"   ,\n    \"111\"     ,\n    \"1001111\" ,\n    \"1000\"    ,\n    \"00110\"   ,\n    \"00111\"   ,\n    \"10011100\",\n    \"10011101\",\n    \"000010\"  ,\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n  };\n  char n[102];\n  //char s[920]={0};\n  int i,j;\n  while(fgets(n,101,stdin)!=NULL){\n    char s[920]={0};\n    for(i=0;n[i+1];i++){\n      for(j=0;n[i]!=c[j];j++);\n      strcat(s,w[j]);\n    }//printf(\"%s\\n\",s);\n    for(i=j=0;s[i];i++){\n      j*=2;\n      if(s[i]=='1')j++;\n      if(i%5==4){\n\tprintf(\"%c\",c[j+6]);\n\tj=0;\n      }\n    }\n    if(i%5){\n      for(;i%5!=0;i++)j*=2;\n      printf(\"%c\",c[j+6]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define NUL 0x00\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\n#define TEXT_MAX 100\n\nint main(void)\n{\n\tshort i = 0;\n\tshort j = 0;\n\n\tshort text_length = 0;\n\tchar input_text[TEXT_MAX];\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tchar barcode[801];\n\tchar code_fivecut[160][5];\n\t\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"text_length=%d\\n\",text_length);\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"barcode = %s\\n\",barcode);\n\t\t\n\t\tint barcode_length = 0;\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"barcode_length =%d\\n\", barcode_length);\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t\t//printf(\"c=%d\\n\",c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor(i = 0;i < 800 ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"count= %d\\n\",count);\n\t\t\n\t\t/*\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tprintf(\"a = %c\",code_fivecut[i][j]);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}*/\n\t\t\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(k = 0; k < CIPHER_NUM; k++)\n\t\t\t{\n\t\t\t\tfor(l = 0; l < 5; l++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][l] == code[k].sign_change_charcter[l])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[k].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\tinput_text[i] = NUL;\n\t\t}\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < 160;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define NUM_OF_CHAR\t\t(32)\n#define LEN_OF_CODESTR1\t(8)\n#define LEN_OF_CODESTR2\t(5)\n\n#define STRCMP_MATCH\t(0)\n\nchar charToCodeTable[2][ NUM_OF_CHAR ][ LEN_OF_CODESTR1 + 1 ] =\n{\n\t{\n\t\t\" \", \"'\", \",\", \"-\", \".\", \"?\", \"A\", \"B\",\n\t\t\"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\",\n\t\t\"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n\t\t\"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n\t},\n\t{\n\t\t\"101\",\t\t\"000000\",\t\"000011\",\t\"10010001\",\t\"010001\",\t\"000001\",\t\"100101\",\t\"10011010\",\n\t\t\"0101\",\t\t\"0001\",\t\t\"110\",\t\t\"01001\",\t\"10011011\",\t\"010000\",\t\"0111\",\t\t\"10011000\",\n\t\t\"0110\",\t\t\"00100\",\t\"10011001\",\t\"10011110\",\t\"00101\",\t\"111\",\t\t\"10011111\",\t\"1000\",\n\t\t\"00110\",\t\"00111\",\t\"10011100\",\t\"10011101\",\t\"000010\",\t\"10010010\",\t\"10010011\",\t\"10010000\"\n\t}\n};\n\nchar codeToCharTable[2][ NUM_OF_CHAR ][ LEN_OF_CODESTR2 + 1 ] = \n{\n\t{\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"\n\t},\n\t{\n\t\t\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n\t\t\"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\",\n\t\t\"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\",\n\t\t\"Y\", \"Z\", \" \", \".\", \",\", \"-\", \"'\", \"?\"\n\t}\n};\n\n//inputに対応するコードをoutCodeに格納\nvoid charToCode( char input, char* outCode );\n\n//inCodeに対応する文字を返す\nchar codeToChar( char* inCode );\n\n//inputの最初から5文字までをoutputに格納\nvoid get5LengthCode( char* input, char* output );\n\n//shiftNumberの数だけinputをずらした文字列をoutputに格納\nvoid shiftString( char* input, char* output, int shiftNumber );\n\nint main( void )\n{\n\tint i;\n\t/*入力された文字を受け取る*/\n\tchar ch;\n\tchar string[1024+1];\n\t/*出力されたコードを受け取る*/\n\tchar getedCode[ LEN_OF_CODESTR2 + 1 ] = {'\\0'};\n\t/*出力されたコードを５文字以上になるまでためておくバッファ*/\n\tchar codeBuffer[ LEN_OF_CODESTR1 * 2 + 1 ] = {'\\0'};\n\t\n\t//入力の終わりまで\n\twhile( fgets( string, 1024 + 1, stdin ) != NULL )\n\t{\n\t\tfor( i = 0; string[i] != '\\0'; i++ )\n\t\t{\n\t\t\tch = string[i];\n\t\t\tif( ch != '\\n' )\n\t\t\t{\n\t\t\t\tcharToCode( ch, codeBuffer );\n\t\t\t\tif( strlen( codeBuffer ) >= 5 )\n\t\t\t\t{\n\t\t\t\t\tget5LengthCode( codeBuffer, getedCode );\n\t\t\t\t\tshiftString( codeBuffer, codeBuffer, 5 );\n\t\t\t\t\tprintf( \"%c\", codeToChar( getedCode ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif( strlen( codeBuffer ) > 0 )\n\t\t\t\t{\n\t\t\t\t\t//while( 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tget5LengthCode( codeBuffer, getedCode );\n\t\t\t\t\t\tshiftString( codeBuffer, codeBuffer, 5 );\n\t\t\t\t\t\tprintf( \"%c\", codeToChar( getedCode ) );\n\t\t\t\t\t\tif( codeBuffer[0] == '\\0' )break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprintf( \"\\n\" );\n\t\t\t\t\n\t\t\t\tstrcpy( codeBuffer, \"\" );\n\t\t\t\tstrcpy( getedCode, \"\" );\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (0);\n}\n\nvoid charToCode( char input, char* outCode )\n{\n\tchar inStr[2];\n\tint i;\n\t\n\tinStr[0] = input;\n\tinStr[1] = '\\0';\n\t\n\tfor( i = 0; i < NUM_OF_CHAR; i++ )\n\t{\n\t\tif( strcmp( inStr, charToCodeTable[0][i] ) == STRCMP_MATCH )\n\t\t{\n\t\t\tstrcat( outCode, charToCodeTable[1][i] );\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nchar codeToChar( char inCode[ LEN_OF_CODESTR2 + 1 ] )\n{\n\tint i;\n\tchar result;\n\tfor( i = 0; i < NUM_OF_CHAR; i++ )\n\t{\n\t\tif( strcmp( inCode, codeToCharTable[0][i] ) == STRCMP_MATCH )\n\t\t{\n\t\t\tresult = codeToCharTable[1][i][0];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn (result);\n}\n\nvoid get5LengthCode( char* input, char* output )\n{\n\tint i;\n\tfor( i = 0; i < 5; i++ )\n\t{\n\t\tif( input[i] == '\\0' )break;\n\t\toutput[i] = input[i];\n\t}\n\tif( i == 0 )\n\t{\n\t\tfor( i = 0; i < 5; i++ )\n\t\t{\n\t\t\toutput[i] = '\\0';\n\t\t}\n\t\treturn;\n\t}\n\tfor( ; i < 5; i++ )\n\t{\n\t\toutput[i] = '0';\n\t}\n\toutput[i] = '\\0';\n}\n\nvoid shiftString( char input[LEN_OF_CODESTR1 * 2 + 1], char output[LEN_OF_CODESTR1 * 2 + 1], int shiftNumber )\n{\n\tint i;\n\tfor( i = 0; i < input[i + shiftNumber] != '\\0'; i++ )\n\t{\n\t\toutput[i] = input[i + shiftNumber];\n\t}\n\t\n\tfor( ; i < LEN_OF_CODESTR1 * 2 + 1; i++ )\n\t{\n\t\toutput[i] = '\\0';\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n// 32 - \nconst char *c2b[] = {\n    \"101\", \"\", \"\", \"\", \"\", \"\", \"\", \"000000\", \"\", \"\", \"\", \"\",\n    \"000011\", \"10010001\", \"010001\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \n    \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"000001\", \"\", \"100101\", \n    \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\",\n    \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\",\n    \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\",\n    \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\",\n    \"10010011\", \"10010000\"\n};\n\nconst char b2c[] = {\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n    'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', \n    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n    'Y', 'Z', ' ', '.', ',', '-', '\\'', '?'\n};\n\nvoid print_char(const char *code) {\n    int i, v = 0;\n    for (i = 0; i < 5; i++) {\n        v <<= 1;\n        v += code[i] == '1';\n    }\n    putc(b2c[v], stdout);\n}\n\nint main(void) {\n    int c, i, codelen, bpos;\n    const char *bcode, *cur;\n    char codebuf[6];\n\n    codelen = 0;\n    bpos = 0;\n    cur = c2b[1];\n    while (1) {\n        c = getc(stdin);\n        if (c == '\\n' || c == EOF) {\n            if (codelen > 0) {\n                for (i = 0; i < 5; i++) {\n                    if (*cur == '\\0') {\n                        codebuf[i] = '0';\n                    }\n                    else {\n                        codebuf[i] = *cur++;\n                    }\n                }\n                print_char(codebuf);\n                codelen = 0;\n            }\n            if (c == EOF) return 0;\n            putc(c, stdout);\n            continue;\n        }\n\n        bcode = c2b[c - 32];\n        codelen += strlen(bcode);\n        for (; bpos < 5; bpos++) {\n            if (*cur == '\\0') {\n                if (bcode != NULL) {\n                    cur = bcode;\n                    bcode = NULL;\n                }\n                else {\n                    break;\n                }\n            }\n            codebuf[bpos] = *cur++;\n        }\n        while (codelen >= 5) {\n            for (; bpos < 5; bpos++, cur++) {\n                codebuf[i] = *cur;\n            }\n            print_char(codebuf);\n            bpos = 0;\n            codelen -= 5;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  while(1) {\n    if(!gets(d)) return 0;\n    puts(d);\n    e[0] = '\\0';\n    i = 0;\n    while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n    i = 5 - strlen(e) % 5;\n    while(i--) strcat(e,\"0\");\n    i = 0;\n    while(e[i] != '\\0') {\n      j = 0;\n      k = 4;\n      do {\n\tj += (e[i++] - '0') << k;\n      } while(k--);\n      putc(c[j],stdout);\n    }\n    putc('\\n',stdout);\n  }\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\nint main(){\n  char c[]={\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"};\n  char w[][9]={\n    \"101\"     ,\n    \"000000\"  , \n    \"000011\"  ,\n    \"10010001\",\n    \"010001\"  ,\n    \"000001\"  ,\n    \"100101\"  ,\n    \"10011010\",\n    \"0101\"    ,\n    \"0001\"    ,\n    \"110\"     ,\n    \"01001\"   ,\n    \"10011011\",\n    \"010000\"  ,\n    \"0111\"    ,\n    \"10011000\",\n    \"0110\"    ,\n    \"00100\"   ,\n    \"10011001\",\n    \"10011110\",\n    \"00101\"   ,\n    \"111\"     ,\n    \"10011111\",\n    \"1000\"    ,\n    \"00110\"   ,\n    \"00111\"   ,\n    \"10011100\",\n    \"10011101\",\n    \"000010\"  ,\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n  };\n  char n[102];\n  //char s[920]={0};\n  int i,j;\n  while(fgets(n,101,stdin)!=NULL){\n    char s[920]={0};\n    for(i=0;n[i+1];i++){\n      for(j=0;n[i]!=c[j];j++);\n      strcat(s,w[j]);\n    }//printf(\"%s\\n\",s);\n    for(i=j=0;s[i];i++){\n      j*=2;\n      if(s[i]=='1')j++;\n      if(i%5==4){\n\tprintf(\"%c\",c[j+6]);\n\tj=0;\n      }\n    }\n    if(i%5){\n      for(;i%5!=0;i++)j*=2;\n      printf(\"%c\",c[j+6]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "I[]={0x1059a25,0x109b0906,0x4069807,0x7059e99,0x706089f,0x92029d9c,0x11059093,0x1009103};unsigned char*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",*strchr(),*L=\"68443586484588538455886888366866\",*B=I;b,l;main(c){for(;c=getchar(),c+1;)if(c-10)for(c=strchr(C,c)-C,b=b<<(L[c]-48)|B[c],l+=L[c]-48;l>4;putchar(C[b>>l&31]))l-=5;else l&&putchar(C[(b<<=5-l)&31]),l=0,putchar(c);exit(0);}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  d[0] = '\\0';\n  fgets(e,4096,stdin);\n  /*\n  while(fgets(e,4096,stdin)) {\n    *strchr(e,'\\n') = ' ';\n    strcat(d,e);\n  }\n  d[strlen(d) - 1] = '\\0';\n  e[0] = '\\0';\n  i = 0;\n  while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n  i = 5 - strlen(e) % 5;\n  while(i--) strcat(e,\"0\");\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  */\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#define SIZE (20)\n\nconst char *d1[91] = {\n\t[' ']=\"101\", ['\\'']=\"000000\", [',']=\"000011\", ['-']=\"10010001\",\n\t['.']=\"010001\", ['?']=\"000001\", ['A']=\"100101\", ['B']=\"10011010\",\n\t['C']=\"0101\", ['D']=\"0001\", ['E']=\"110\", ['F']=\"01001\",\n\t['G']=\"10011011\", ['H']=\"010000\", ['I']=\"0111\", ['J']=\"10011000\",\n\t['K']=\"0110\", ['L']=\"00100\", ['M']=\"10011001\", ['N']=\"10011110\",\n\t['O']=\"00101\", ['P']=\"111\", ['Q']=\"10011111\", ['R']=\"1000\",\n\t['S']=\"00110\", ['T']=\"00111\", ['U']=\"10011100\", ['V']=\"10011101\",\n\t['W']=\"000010\", ['X']=\"10010010\", ['Y']=\"10010011\", ['Z']=\"10010000\"\n};\nconst char *d2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint bin2dec(char bin_list[SIZE]) {\n\treturn ((bin_list[0]-'0') * 16 + (bin_list[1]-'0') * 8 +\n\t\t\t(bin_list[2]-'0') * 4 + (bin_list[3]-'0') * 2 +\n\t\t\t(bin_list[4]-'0'));\n}\n\nvoid line_end(char bin_list[SIZE]) {\n\tif (strlen(bin_list) > 0) {\n\t\tstrcat(bin_list, \"0000\");\n\t\tputchar(d2[bin2dec(bin_list)]);\n\t}\n\tputchar('\\n');\n\tmemset(bin_list, '\\0', sizeof(char)*SIZE);\n}\n\nint main(void) {\n\tint c = 0, end = 0;\n\tchar bin_list[SIZE] = \"\";\n\n\twhile (1) {\n\t\tc = getchar();\n\t\tif (c == EOF) {\n\t\t\tif (!end)\n\t\t\t\tline_end(bin_list);\n\t\t\tbreak;\n\t\t}\n\t\tif (c == '\\n') {\n\t\t\tline_end(bin_list);\n\t\t\tend = 1;\n\t\t\tcontinue;\n\t\t}\n\t\tend = 0;\n\t\tstrcat(bin_list, d1[c]);\n\t\twhile (strlen(bin_list) >= 5) {\n\t\t\tputchar(d2[bin2dec(bin_list)]);\n\t\t\tstrcpy(bin_list, bin_list+5);\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nint main()\n{\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[4096];\n  unsigned char *p;\n  int i,j,k;\n  i = 0;\n  while((k = getc(stdin)) != '\\n'){\n    j = 0;\n    while(*(a + j) != k) j++;\n    p = b[j];\n    while(*p) d[i++] = *p++;\n  }\n  while(i % 5) d[i++] = '0';\n  d[i] = '\\0';\n  i = 0;\n  while(d[i]) {\n    k = 0;\n    j = 4;\n    do {\n      k |= (d[i++] == '1') << j;\n    } while(j--);\n    putc(*(c + k),stdout);\n  }\n  putc('\\n',stdout);\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nint main(void)\n{\n  int i,j;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  while(1) {\n    puts(\"\\nSample Input\");\n    if(!*gets(d)) break;\n    e[0] = '\\0';\n    i = 0;\n    while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n    i = 5 - strlen(e) % 5;\n    while(i--) strcat(e,\"0\");\n    puts(\"Output for the Sample Input\");\n    i = 0;\n    while(e[i] != '\\0') {\n      j = 0;\n      j += (e[i++] - '0') << 4; \n      j += (e[i++] - '0') << 3; \n      j += (e[i++] - '0') << 2; \n      j += (e[i++] - '0') << 1; \n      j += (e[i++] - '0');\n      putc(c[j],stdout);\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "char*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",*strchr(),*L=\"68443586484588538455886888366866\";char B[]={0x25,0x9a,0x05,0x01,0x06,0x09,0x9b,0x10,0x07,0x98,0x06,0x04,0x99,0x9e,0x05,0x07,0x9f,0x08,0x06,0x07,0x9c,0x9d,0x02,0x92,0x93,0x90,0x05,0x11,0x03,0x91,0x00,0x01};b,l;main(c){for(;c=getchar(),c+1;)if(c-10)for(c=strchr(C,c)-C,b=b<<L[c]-48|B[c],l+=L[c]-48;l>4;putchar(C[b>>l&31]))l-=5;else l&&putchar(C[(b<<=5-l)&31]),l=0,putchar(c);exit(0);}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  while(1) {\n    if(!gets(d)) return 0;\n    printf(\"\\nSample Input\\n%s\\n\",d);\n    e[0] = '\\0';\n    i = 0;\n    while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n    i = 5 - strlen(e) % 5;\n    while(i--) strcat(e,\"0\");\n    puts(\"Output for the Sample Input\");\n    i = 0;\n    while(e[i] != '\\0') {\n      j = 0;\n      k = 4;\n      do {\n\tj += (e[i++] - '0') << k;\n      } while(k--);\n      putc(c[j],stdout);\n    }\n  }\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9//符号の文字列の最大の長さ\n#define CIPHER_NUM 32//符号と文字の組み合わせの数\n#define CODE_MAX 801//文字→符号に変換するとき、符号の文字列の最大数\n#define INITIALIZE_NUL 0x00 //char型の初期値\n#define INITIALIZE_CHAR '0' //5文字ごとに区切り、格納する配列に足りない文字数に\"0\"を追加することを考慮した初期値\n#define INITIALIZE_INT 0 //整数型の初期値\n#define LAST_CHAR '\\0' //文字列の最後を判定する文字\n#define TEXT_LENGTH_MAX 101//入力において最大文字数\n#define SECTION 5 //5文字区切り\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];//文字→符号にする時に扱う符号を格納\n\tchar sign_change_charcter[SECTION + 1];//符号→文字にする時に扱う符号を格納\n\tchar character;// 文字を格納\n}CIPHER;\n\n/*二つの表から文字と符号を対応させた初期化*/\nconst CIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\", \"00000\", 'A'},\n\t\t{\"10011010\", \"00001\", 'B'},\n\t\t{\"0101\", \"00010\", 'C'},\n\t\t{\"0001\", \"00011\", 'D'},\n\t\t{\"110\", \"00100\", 'E'},\n\t\t{\"01001\", \"00101\", 'F'},\n\t\t{\"10011011\", \"00110\", 'G'},\n\t\t{\"010000\", \"00111\", 'H'},\n\t\t{\"0111\", \"01000\", 'I'},\n\t\t{\"10011000\", \"01001\", 'J'},\n\t\t{\"0110\", \"01010\", 'K'},\n\t\t{\"00100\", \"01011\", 'L'},\n\t\t{\"10011001\", \"01100\", 'M'},\n\t\t{\"10011110\", \"01101\", 'N'},\n\t\t{\"00101\", \"01110\", 'O'},\n\t\t{\"111\", \"01111\", 'P'},\n\t\t{\"10011111\", \"10000\", 'Q'},\n\t\t{\"1000\", \"10001\", 'R'},\n\t\t{\"00110\", \"10010\", 'S'},\n\t\t{\"00111\", \"10011\", 'T'},\n\t\t{\"10011100\", \"10100\", 'U'},\n\t\t{\"10011101\", \"10101\", 'V'},\n\t\t{\"000010\", \"10110\", 'W'},\n\t\t{\"10010010\", \"10111\", 'X'},\n\t\t{\"10010011\", \"11000\", 'Y'},\n\t\t{\"10010000\", \"11001\", 'Z'},\n\t\t{\"101\", \"11010\", ' '},\n\t\t{\"010001\", \"11011\", '.'},\n\t\t{\"000011\", \"11100\", ','},\n\t\t{\"10010001\", \"11101\", '-'},\n\t\t{\"000000\", \"11110\", '\\''},\n\t\t{\"000001\", \"11111\", '?'}\n\t};\n\nint main(void)\n{\n\t\n\t/*変数宣言と初期化*/\n\tunsigned short i = INITIALIZE_INT;\n\tunsigned short j = INITIALIZE_INT;\n\tunsigned short k = INITIALIZE_INT;\n\tchar input_text[TEXT_LENGTH_MAX];//入力値を格納\n\t\n\t/*入力文字列の初期化*/\n\tfor(i = 0; i < TEXT_LENGTH_MAX; i++)\n\t{\n\t\tinput_text[i] = INITIALIZE_NUL;\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tunsigned short text_length = INITIALIZE_INT;//入力文字列の長さを格納\n\t\tunsigned short barcode_length = INITIALIZE_INT;//符号と符号を連結させた文字列の長さを格納\n\t\tunsigned short element_number = INITIALIZE_INT;//要素番号を格納\n\t\tunsigned short match_count = INITIALIZE_INT;//文字比較の時に一致した回数をカウント\n\t\tunsigned short character_length = INITIALIZE_INT;//符号→文字にした時の文字列の長さを格納\n\t\tchar barcode[CODE_MAX];//文字→符号にした文字列を連結して格納\n\t\tchar code_fivecut[CODE_MAX / SECTION][SECTION];//符号を5つ区切りにしたものを格納\n\t\t\n\t\t/*配列の初期化*/\n\t\tfor(i = 0; i < CODE_MAX; i++)\n\t\t{\n\t\t\tbarcode[i] = INITIALIZE_NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX / SECTION; i++)\n\t\t{\n\t\t\tfor(j = 0; j < SECTION; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = INITIALIZE_CHAR;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*入力文字列のカウント*/\n\t\tfor(i = 0; INITIALIZE_NUL != input_text[i] ; i++,text_length++);\n\t\t\n\t\t/*文字を対応する符号に置き換えて連結して一つの配列(barcode)に格納する*/\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].character)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*連結した符号(barcode)の文字列の長さをカウントする*/\n\t\tfor(i = 0; LAST_CHAR != barcode[barcode_length]; i++,barcode_length++);\n\t\t\n\t\t/*連結した符号(barcode)を5つ区切りに分ける*/\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < SECTION; j++)\n\t\t\t{\n\t\t\t\tif(element_number < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[element_number];\n\t\t\t\t\telement_number++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*5つ区切りにした個数のカウント*/\n\t\tfor(i = 0; i < CODE_MAX ; i+= SECTION)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcharacter_length = i / SECTION;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*5つ区切りにした文字列と符号の比較を行い、一致したとき対応する文字を出力する*/\n\t\tfor(i = 0; i < character_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < SECTION; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tmatch_count++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(SECTION == match_count)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\", code[j].character);\n\t\t\t\t}\n\t\t\t\tmatch_count = INITIALIZE_INT;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[4096];\n  unsigned char *p;\n  i = 0;\n  while((k = getc(stdin)) != EOF) {\n    j = 0;\n    while(*(a + j) != k) j++;\n    p = b[j];\n    while(*p) d[i++] = *p++;\n  }\n  j = 5 - i % 5;\n  while(j--) d[i++] = '0';\n  d[i] = '\\0';\n  puts(d);\n  /*\n  i = 0;\n  while(d[i]) {\n    j = 0;\n    k = 4;\n    do {\n      j += (d[i++] - '0') << k;\n    } while(k--);\n    putc(*(c + j),stdout);\n  }\n  */\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  char *p;\n  i = 0;\n  while(gets(e)) {\n    j = 0;\n    while(e[j]) d[i++] = e[j++];\n    d[i++] = ' ';\n  }\n  d[i - 1] = '\\0';\n  i = 0;\n  j = 0;\n  while(d[i]) {\n    k = 0;\n    while(a[k] != d[i]) k++;\n    p = b[k];\n    while(*p) e[j++] = *p++;\n    i++;\n  }\n  /*\n  i = 5 - j % 5;\n  while(i--) e[j++] = '0';\n  e[j] = '\\0';\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  */\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nchar encode[96][8];\nchar decode[32];\nint main(void){\n\tstrcpy(encode[' '],\"101\");\n\tstrcpy(encode['\\n'],\"\");\n\tstrcpy(encode['\\''],\"000000\");\n\tstrcpy(encode[','],\"000011\");\n\tstrcpy(encode['-'],\"10010001\");\n\tstrcpy(encode['.'],\"010001\");\n\tstrcpy(encode['?'],\"000001\");\n\tstrcpy(encode['A'],\"100101\");\n\tstrcpy(encode['B'],\"10011010\");\n\tstrcpy(encode['C'],\"0101\");\n\tstrcpy(encode['D'],\"0001\");\n\tstrcpy(encode['E'],\"110\");\n\tstrcpy(encode['F'],\"01001\");\n\tstrcpy(encode['G'],\"10011011\");\n\tstrcpy(encode['H'],\"010000\");\n\tstrcpy(encode['I'],\"0111\");\n\tstrcpy(encode['J'],\"10011000\");\n\tstrcpy(encode['K'],\"0110\");\n\tstrcpy(encode['L'],\"00100\");\n\tstrcpy(encode['M'],\"10011001\");\n\tstrcpy(encode['N'],\"10011110\");\n\tstrcpy(encode['O'],\"00101\");\n\tstrcpy(encode['P'],\"111\");\n\tstrcpy(encode['Q'],\"10011111\");\n\tstrcpy(encode['R'],\"1000\");\n\tstrcpy(encode['S'],\"00110\");\n\tstrcpy(encode['T'],\"00111\");\n\tstrcpy(encode['U'],\"10011100\");\n\tstrcpy(encode['V'],\"10011101\");\n\tstrcpy(encode['W'],\"000010\");\n\tstrcpy(encode['X'],\"10010010\");\n\tstrcpy(encode['Y'],\"10010011\");\n\tstrcpy(encode['Z'],\"10010000\");\n\tint n,i,k;\n\tchar type[500],code[10000];\n\tfor(i=0;i<26;i++){decode[i]='A'+i;}\n\tdecode[26]=' ';\n\tdecode[27]='.';\n\tdecode[28]=',';\n\tdecode[29]='-';\n\tdecode[30]='\\'';\n\tdecode[31]='?';\n\twhile(fgets(type,500,stdin)!=NULL){\n\t\tcode[0]='\\0';\n\t\tn=strlen(type);if(n>200)return 1;\n\t\tfor(i=0;i<n;i++){strcat(code,encode[type[i]]);}\n\t\tn=strlen(code);\n\t\tfor(i=0;i<n;i+=5){\n\t\t\tk=0;\n\t\t\tif(code[i]=='1')k+=16;\n\t\t\tif(code[i+1]=='1' && i+1<n)k+=8;\n\t\t\tif(code[i+2]=='1' && i+2<n)k+=4;\n\t\t\tif(code[i+3]=='1' && i+3<n)k+=2;\n\t\t\tif(code[i+4]=='1' && i+4<n)k+=1;\n\t\t\tprintf(\"%c\",decode[k]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\nint main() {\n\tchar str[101] = \"\", code[820] = \"\";\n\tchar *pstr, *pcode;\n\tint x, b, base;\n\n\twhile (~fscanf(stdin, \"%[^\\n]*s\", str)) {\n\t\tgetchar();\n\t\tpstr = &str[0];\n\t\tpcode = &code[0];\n\t\twhile (*pstr) {\n\t\t\tswitch (*pstr) {\n\t\t\tcase 'O': strcat(pcode, \"0\"); case 'C': strcat(pcode, \"0\"); case ' ': strcat(pcode, \"101\"); break;\n\t\t\tcase '\\'': strcat(pcode, \"000000\"); break;\n\t\t\tcase ',': strcat(pcode, \"000011\"); break;\n\t\t\tcase '-': strcat(pcode, \"1001\"); case 'D': strcat(pcode, \"0001\"); break;\n\t\t\tcase '.': strcat(pcode, \"010001\"); break;\n\t\t\tcase 'T': strcat(pcode, \"0\"); case 'I': strcat(pcode, \"0\"); case 'P': strcat(pcode, \"111\"); break;\n\t\t\tcase 'S': strcat(pcode, \"0\"); case 'K': strcat(pcode, \"0\"); case 'E': strcat(pcode, \"110\"); break;\n\t\t\tcase 'A': strcat(pcode, \"100101\"); break;\n\t\t\tcase 'B': strcat(pcode, \"10011010\"); break;\n\t\t\tcase 'F': strcat(pcode, \"01001\"); break;\n\t\t\tcase 'G': strcat(pcode, \"10011011\"); break;\n\t\t\tcase 'H': strcat(pcode, \"010000\"); break;\n\t\t\tcase 'J': strcat(pcode, \"1001\"); case 'R': strcat(pcode, \"1000\"); break;\n\t\t\tcase 'L': strcat(pcode, \"00100\"); break;\n\t\t\tcase 'M': strcat(pcode, \"10011001\"); break;\n\t\t\tcase 'N': strcat(pcode, \"10011110\"); break;\n\t\t\tcase 'Q': strcat(pcode, \"1001111\"); break;\n\t\t\tcase 'U': strcat(pcode, \"10011100\"); break;\n\t\t\tcase 'V': strcat(pcode, \"10011101\"); break;\n\t\t\tcase 'W': strcat(pcode, \"000010\"); break;\n\t\t\tcase 'X': strcat(pcode, \"10010011\"); break;\n\t\t\tcase 'Y': strcat(pcode, \"10010011\"); break;\n\t\t\tcase 'Z': strcat(pcode, \"10010000\"); break;\n\t\t\tdefault:break;\n\t\t\t}\n\t\t\tpstr++;\n\t\t}\n\t\twhile (strlen(pcode) % 5) strcat(pcode, \"0\");\n\t\twhile (*pcode) {\n\t\t\tsprintf(str, \"%.5s\", pcode);\n\t\t\tpcode += 5;\n\t\t\tb = atoi(str);\n\t\t\tbase = 1, x = 0;\n\t\t\twhile (b > 0) {\n\t\t\t\tx = x + (b % 10)*base;\n\t\t\t\tb /= 10;\n\t\t\t\tbase *= 2;\n\t\t\t}\n\t\t\tif (x == 26)x = ' ' - 'A';\n\t\t\telse if (x == 27) x = '.' - 'A';\n\t\t\telse if (x == 28) x = ',' - 'A';\n\t\t\telse if (x == 29) x = '-' - 'A';\n\t\t\telse if (x == 30) x = '\\'' - 'A';\n\t\t\telse if (x == 31) x = '?' - 'A';\n\t\t\tprintf(\"%c\", 'A' + x);\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tmemset(code, '\\0', sizeof(code));\n\t\tmemset(str, '\\0', sizeof(str));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9//符号の文字列の最大の長さ\n#define CIPHER_NUM 32//符号と文字の組み合わせの数\n#define CODE_MAX 801//文字→符号に変換するとき、符号の文字列の最大数\n#define INITIALIZE_NUL 0x00 //char型の初期値\n#define INITIALIZE_CHAR '0' //5文字ごとに区切り、格納する配列に足りない文字数に\"0\"を追加することを考慮した初期値\n#define INITIALIZE_INT 0 //整数型の初期値\n#define LAST_CHAR '\\0' //文字列の最後を判定する文字\n#define TEXT_LENGTH_MAX 101//入力において最大文字数\n#define SECTION 5 //5文字区切り\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];//文字→符号にする時に扱う符号を格納\n\tchar sign_change_charcter[SECTION + 1];//符号→文字にする時に扱う符号を格納\n\tchar character;// 文字を格納\n}CIPHER;\n\n/*二つの表から文字と符号を対応させた初期化*/\nconst CIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\", \"00000\", 'A'},\n\t\t{\"10011010\", \"00001\", 'B'},\n\t\t{\"0101\", \"00010\", 'C'},\n\t\t{\"0001\", \"00011\", 'D'},\n\t\t{\"110\", \"00100\", 'E'},\n\t\t{\"01001\", \"00101\", 'F'},\n\t\t{\"10011011\", \"00110\", 'G'},\n\t\t{\"010000\", \"00111\", 'H'},\n\t\t{\"0111\", \"01000\", 'I'},\n\t\t{\"10011000\", \"01001\", 'J'},\n\t\t{\"0110\", \"01010\", 'K'},\n\t\t{\"00100\", \"01011\", 'L'},\n\t\t{\"10011001\", \"01100\", 'M'},\n\t\t{\"10011110\", \"01101\", 'N'},\n\t\t{\"00101\", \"01110\", 'O'},\n\t\t{\"111\", \"01111\", 'P'},\n\t\t{\"10011111\", \"10000\", 'Q'},\n\t\t{\"1000\", \"10001\", 'R'},\n\t\t{\"00110\", \"10010\", 'S'},\n\t\t{\"00111\", \"10011\", 'T'},\n\t\t{\"10011100\", \"10100\", 'U'},\n\t\t{\"10011101\", \"10101\", 'V'},\n\t\t{\"000010\", \"10110\", 'W'},\n\t\t{\"10010010\", \"10111\", 'X'},\n\t\t{\"10010011\", \"11000\", 'Y'},\n\t\t{\"10010000\", \"11001\", 'Z'},\n\t\t{\"101\", \"11010\", ' '},\n\t\t{\"010001\", \"11011\", '.'},\n\t\t{\"000011\", \"11100\", ','},\n\t\t{\"10010001\", \"11101\", '-'},\n\t\t{\"000000\", \"11110\", '\\''},\n\t\t{\"000001\", \"11111\", '?'}\n\t};\n\nint main(void)\n{\n\t\n\t/*変数宣言と初期化*/\n\tunsigned short i = INITIALIZE_INT;\n\tunsigned short j = INITIALIZE_INT;\n\tunsigned short k = INITIALIZE_INT;\n\tchar input_text[TEXT_LENGTH_MAX];//入力値を格納\n\t\n\t/*入力文字列の初期化*/\n\tfor(i = 0; i < TEXT_LENGTH_MAX; i++)\n\t{\n\t\tinput_text[i] = INITIALIZE_NUL;\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tunsigned short text_length = INITIALIZE_INT;//入力文字列の長さを格納\n\t\tunsigned short sign_length = INITIALIZE_INT;//符号と符号を連結させた文字列の長さを格納\n\t\tunsigned short element_number = INITIALIZE_INT;//要素番号を格納\n\t\tunsigned short match_count = INITIALIZE_INT;//文字比較の時に一致した回数をカウント\n\t\tunsigned short character_length = INITIALIZE_INT;//符号→文字にした時の文字列の長さを格納\n\t\tchar sign[CODE_MAX];//文字→符号にした文字列を連結して格納\n\t\tchar code_fivecut[CODE_MAX / SECTION][SECTION];//符号を5つ区切りにしたものを格納\n\t\t\n\t\t/*配列の初期化*/\n\t\tfor(i = 0; i < CODE_MAX; i++)\n\t\t{\n\t\t\tsign[i] = INITIALIZE_NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX / SECTION; i++)\n\t\t{\n\t\t\tfor(j = 0; j < SECTION; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = INITIALIZE_CHAR;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*入力文字列のカウント*/\n\t\tfor(i = 0; INITIALIZE_NUL != input_text[i] ; i++,text_length++);\n\t\t\n\t\t/*文字を対応する符号に置き換えて連結して一つの配列(sign)に格納する*/\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].character)\n\t\t\t\t{\n\t\t\t\t\tstrcat(sign, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*連結した符号(sign)の文字列の長さをカウントする*/\n\t\tfor(i = 0; LAST_CHAR != sign[sign_length]; i++,sign_length++);\n\t\t\n\t\t/*連結した符号(sign)を5つ区切りに分ける*/\n\t\tfor(i = 0; i < sign_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < SECTION; j++)\n\t\t\t{\n\t\t\t\tif(element_number < sign_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  sign[element_number];\n\t\t\t\t\telement_number++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*5つ区切りにした個数のカウント*/\n\t\tfor(i = 0; i < CODE_MAX ; i+= SECTION)\n\t\t{\n\t\t\tif(sign_length <= i)\n\t\t\t{\n\t\t\t\tcharacter_length = i / SECTION;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*5つ区切りにした文字列と符号の比較を行い、一致したとき対応する文字を出力する*/\n\t\tfor(i = 0; i < character_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < SECTION; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tmatch_count++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(SECTION == match_count)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\", code[j].character);\n\t\t\t\t}\n\t\t\t\tmatch_count = INITIALIZE_INT;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  d[0] = '\\0';\n  while(gets(e)) {\n    strcat(d,e);\n    strcat(d,\" \");\n  }\n  d[strlen(d)] = '\\0';\n  e[0] = '\\0';\n  i = 0;\n  while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n  i = 5 - strlen(e) % 5;\n  while(i--) strcat(e,\"0\");\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  putc('\\n',stdout);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <ctype.h>\n\nint buffer[5];\nint buffernum;\n\nconst int table[32][9]={\n\t{3,1,0,1},\n\t{6,0,0,0,0,0,0},\n\t{6,0,0,0,0,1,1},\n\t{8,1,0,0,1,0,0,0,1},\n\t{6,0,1,0,0,0,1},\n\t{6,0,0,0,0,0,1},\n\t{6,1,0,0,1,0,1},\n\t{8,1,0,0,1,1,0,1,0},\n\n\t{4,0,1,0,1},\n\t{4,0,0,0,1},\n\t{3,1,1,0},\n\t{5,0,1,0,0,1},\n\t{8,1,0,0,1,1,0,1,1},\n\t{6,0,1,0,0,0,0},\n\t{4,0,1,1,1},\n\t{8,1,0,0,1,1,0,0,0},\n\n\t{4,0,1,1,0},\n\t{5,0,0,1,0,0},\n\t{8,1,0,0,1,1,0,0,1},\n\t{8,1,0,0,1,1,1,1,0},\n\t{5,0,0,1,0,1},\n\t{3,1,1,1},\n\t{8,1,0,0,1,1,1,1,1},\n\t{4,1,0,0,0},\n\n\t{5,0,0,1,1,0},\n\t{5,0,0,1,1,1},\n\t{8,1,0,0,1,1,1,0,0},\n\t{8,1,0,0,1,1,1,0,1},\n\t{6,0,0,0,0,1,0},\n\t{8,1,0,0,1,0,0,1,0},\n\t{8,1,0,0,1,0,0,1,1},\n\t{8,1,0,0,1,0,0,0,0}\n};\n\nvoid output(void) {\n\tint toout;\n\ttoout=(buffer[0]<<4)+\n\t      (buffer[1]<<3)+\n\t      (buffer[2]<<2)+\n\t      (buffer[3]<<1)+\n\t      buffer[4];\n\tif(toout<=25)putchar(toout+'A');\n\telse if(toout==26)putchar(' ');\n\telse if(toout==27)putchar('.');\n\telse if(toout==28)putchar(',');\n\telse if(toout==29)putchar('-');\n\telse if(toout==30)putchar('\\'');\n\telse if(toout==31)putchar('?');\n\tbuffernum=0;\n}\n\nvoid addone(int toadd) {\n\tint i;\n\tfor(i=1;i<=table[toadd][0];i++) {\n\t\tbuffer[buffernum]=table[toadd][i];\n\t\tbuffernum++;\n\t\tif(buffernum>=5)output();\n\t}\n}\n\nvoid add(int code) {\n\tif(code==' ')addone(0);\n\telse if(code=='\\'')addone(1);\n\telse if(code==',')addone(2);\n\telse if(code=='-')addone(3);\n\telse if(code=='.')addone(4);\n\telse if(code=='?')addone(5);\n\telse if(isupper(code))addone(code-'A'+6);\n}\n\nint main(void) {\n\tint input;\n\twhile((input=getchar())!=EOF) {\n\t\tif(input=='\\n') {\n\t\t\tif(buffernum!=0) {\n\t\t\t\tfor(;buffernum<5;buffernum++)buffer[buffernum]=0;\n\t\t\t\toutput();\n\t\t\t}\n\t\t\tputchar('\\n');\n\t\t} else {\n\t\t\tadd(input);\n\t\t}\n\t}\n\tif(buffernum!=0) {\n\t\tfor(;buffernum<5;buffernum++)buffer[buffernum]=0;\n\t\toutput();\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[4096];\n  unsigned char *p;\n  i = 0;\n  while((k = getc(stdin)) != EOF){\n    j = 0;\n    //while(*(a + j) != k) j++;\n    //p = b[j];\n    //while(*p) d[i++] = *p++;\n  }\n  j = 5 - i % 5;\n  while(j--) d[i++] = '0';\n  d[i] = '\\0';\n  i = 0;\n  while(d[i]) {\n    j = 0;\n    k = 4;\n    do {\n      j += (d[i++] - '0') << k;\n    } while(k--);\n    putc(*(c + j),stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "char*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",*strchr(),*L=\"68443586484588538455886888366866\";\nB[]={\n\t0x25,0x9a,0x05,0x01,0x06,0x09,0x9b,0x10,0x07,0x98,0x06,0x04,0x99,0x9e,0x05,0x07,\n\t0x9f,0x08,0x06,0x07,0x9c,0x9d,0x02,0x92,0x93,0x90,0x05,0x11,0x03,0x91,0x00,0x01\n};\nb,l;\nmain(c){\n\tfor(;c=getchar(),c+1;)\n\t\tif(c-10)\n\t\t\tfor(c=strchr(C,c)-C,b=b<<(L[c]-48)|B[c],l+=L[c]-48;l>4;putchar(C[b>>l&31]))\n\t\t\t\tl-=5;\n\t\telse l&&putchar(C[(b<<=5-l)&31]),l=0,putchar(c);\n\texit(0);\n}"
  },
  {
    "language": "C",
    "code": "char*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",*strchr(),*L=\"68443586484588538455886888366866\";\nchar B[]={\n\t0x25,0x9a,0x05,0x01,0x06,0x09,0x9b,0x10,0x07,0x98,0x06,0x04,0x99,0x9e,0x05,0x07,\n\t0x9f,0x08,0x06,0x07,0x9c,0x9d,0x02,0x92,0x93,0x90,0x05,0x11,0x03,0x91,0x00,0x01\n};\nb,l;\nmain(c){\n\tfor(;c=getchar(),c+1;)\n\t\tif(c-10)\n\t\t\tfor(c=strchr(C,c)-C,b=b<<(L[c]-48)|B[c],l+=L[c]-48;l>4;putchar(C[b>>l&31]))\n\t\t\t\tl-=5;\n\t\telse l&&putchar(C[(b<<=5-l)&31]),l=0,putchar(c);\n\texit(0);\n}"
  },
  {
    "language": "C",
    "code": "I[]={0x01059a25,0x109b0906,0x04069807,0x07059e99,0x0706089f,0x92029d9c,0x11059093,0x01009103};\nchar*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",*strchr(),*L=\"68443586484588538455886888366866\",*B=I;\nb,l;\nmain(c){\n\tfor(;c=getchar(),c+1;)\n\t\tif(c-10)\n\t\t\tfor(c=strchr(C,c)-C,b=b<<(L[c]-48)|B[c],l+=L[c]-48;l>4;putchar(C[b>>l&31]))\n\t\t\t\tl-=5;\n\t\telse l&&putchar(C[(b<<=5-l)&31]),l=0,putchar(c);\n\texit(0);\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define CODE_MAX 801\n#define NUL 0x00\n#define INITIALIZE 0\n#define TEXT_LENGTH_MAX 101\n#define FIVE 5\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\nint main(void)\n{\n\t\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tunsigned short i = INITIALIZE;\n\tunsigned short j = INITIALIZE;\n\tunsigned short k = INITIALIZE;\n\t\n\tchar input_text[TEXT_LENGTH_MAX];\n\tfor(i = 0; i < TEXT_LENGTH_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tunsigned short text_length = INITIALIZE;\n\t\tunsigned short barcode_length = INITIALIZE;\n\t\tunsigned short count = INITIALIZE;\n\t\tint c = 0;\n\t\tint cc = 0;\n\t\tchar barcode[CODE_MAX];\n\t\tchar code_fivecut[CODE_MAX / FIVE][FIVE];/*160:5*/\n\t\t\n\t\tfor(i = 0; i < CODE_MAX - 1; i++)//配列の最後(800番目)には\\0が入るためマイナス1してある\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX / FIVE;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < TEXT_LENGTH_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < FIVE; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0;i < CODE_MAX ; i+= FIVE)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / FIVE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < FIVE; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[j].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(){\n\tint i,j,k,p,num;\n\tint data[1024];\n\tchar c;\n\tchar str[8][2][33] = {\n\t\t{\"'BEHJKLNRSUWXZ\",\" ,-.?ACDFGIMOPQTVY\"},\n\t\t{\" '-.?ACDFHJLMORUVZ\",\",BEGIKNPQSTWXY\"},\n\t\t{\"',-.?BDFGHJMRWXYZ\",\" ACEIKLNOPQSTUV\"},\n\t\t{\"',-.?ACDHIKLOSTWXYZ\",\"BFGJMNQRUV\"},\n\t\t{\"',?AFLOSTW\",\"-.BGHJMNQUVXYZ\"},\n\t\t{\"',-.?BGHJMNQUVWXYZ\",\"A\"},\n\t\t{\"-BGJMNQUVXYZ\",\"\"},\n\t\t{\"\",\"-BGJMNQUVXYZ\"},\n\t};\n\tchar str2[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n\tp = 0;\n\twhile((c = getchar()) != EOF){\n\t\tif(c == '\\n'){\n\t\t\tcontinue;\n\t\t}\n\t\tfor(i = 7;i >= 0;i--){\n\t\t\tfor(j = 0;j < 2;j++){\n\t\t\t\tfor(k = 0;k < 33;k++){\n\t\t\t\t\tif(str[i][j][k] == c){\n\t\t\t\t\t\tdata[p++] = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(p % 5 != 0){\n\t\twhile(p % 5 != 0){\n\t\t\tdata[p++] = 0;\n\t\t}\n\t}\n\n\tnum = 0;\n\tfor(i = 0;i < p;i++){\n\t\tnum *= 2;\n\t\tnum += data[i];\n\t\tif(i % 5 == 4){\n\t\t\tputchar(str2[num]);\n\t\t\tnum = 0;\n\t\t}\n\t}\n\tputchar('\\n');\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\nint main(){\n  char c[]={\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\"};\n  char w[][9]={\n    \"101\"     ,\n    \"000000\"  , \n    \"000011\"  ,\n    \"10010001\",\n    \"010001\"  ,\n    \"000001\"  ,\n    \"100101\"  ,\n    \"10011010\",\n    \"01010\"   ,\n    \"0001\"    ,\n    \"110\"     ,\n    \"01001\"   ,\n    \"10011011\",\n    \"010000\"  ,\n    \"0111\"    ,\n    \"10011000\",\n    \"0110\"    ,\n    \"00100\"   ,\n    \"10011001\",\n    \"10011110\",\n    \"00101\"   ,\n    \"111\"     ,\n    \"1001111\" ,\n    \"1000\"    ,\n    \"00110\"   ,\n    \"00111\"   ,\n    \"10011100\",\n    \"10011101\",\n    \"000010\"  ,\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n  };\n  char n[102];\n  char s[920]={0};\n  int i,j;\n  while(fgets(n,101,stdin)!=NULL){\n    for(i=0;n[i]!=10;i++){\n      for(j=0;n[i]!=c[j];j++);\n      strcat(s,w[j]);\n    }//printf(\"%s\\n\",s);\n    for(i=j=0;s[i];i++){\n      j*=2;\n      if(s[i]=='1')j++;\n      if(i%5==4){\n\tprintf(\"%c\",c[(j+6)%32]);\n\tj=0;\n      }\n    }\n    for(;i%5!=4;i++)j*=2;\n    printf(\"%c\\n\",c[(j+6)%32]);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nchar str[110];\nint f[1000];\nint fn=0;\n\nvoid chf(char c){\n  if(c==' '){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=1;\n    fn+=3;\n  }else if(c=='\\''){\n    f[fn]=0; f[fn+1]=0; f[fn+2]=0; f[fn+3]=0; f[fn+4]=0; f[fn+5]=0;\n    fn+=6;\n  }else if(c==','){\n    f[fn]=0; f[fn+1]=0; f[fn+2]=0; f[fn+3]=0; f[fn+4]=1; f[fn+5]=1;\n    fn+=6;\n  }else if(c=='-'){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=0; f[fn+3]=1; f[fn+4]=0; f[fn+5]=0; f[fn+6]=0; f[fn+7]=1;\n    fn+=8;\n  }else if(c=='.'){\n    f[fn]=0; f[fn+1]=1; f[fn+2]=0; f[fn+3]=0; f[fn+4]=0; f[fn+5]=1;\n    fn+=6;    \n  }else if(c=='?'){\n    f[fn]=0; f[fn+1]=0; f[fn+2]=0; f[fn+3]=0; f[fn+4]=0; f[fn+5]=1;\n    fn+=6;\n  }else if(c=='A'){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=0; f[fn+3]=1; f[fn+4]=0; f[fn+5]=1;\n    fn+=6;\n  }else if(c=='B'){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=0; f[fn+3]=1; f[fn+4]=1; f[fn+5]=0; f[fn+6]=1; f[fn+7]=0;\n    fn+=8;\n  }else if(c=='C'){\n    f[fn]=0; f[fn+1]=1; f[fn+2]=0; f[fn+3]=1;\n    fn+=4;\n  }else if(c=='D'){\n    f[fn]=0; f[fn+1]=0; f[fn+2]=0; f[fn+3]=1;\n    fn+=4;\n  }else if(c=='E'){\n    f[fn]=1; f[fn+1]=1; f[fn+2]=0;\n    fn+=3;\n  }else if(c=='F'){\n    f[fn]=0; f[fn+1]=1; f[fn+2]=0; f[fn+3]=0; f[fn+4]=1;\n    fn+=5;\n  }else if(c=='G'){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=0; f[fn+3]=1; f[fn+4]=1; f[fn+5]=0; f[fn+6]=1; f[fn+7]=1;\n    fn+=8;\n  }else if(c=='H'){\n    f[fn]=0; f[fn+1]=1; f[fn+2]=0; f[fn+3]=0; f[fn+4]=0; f[fn+5]=0;\n    fn+=6;\n  }else if(c=='I'){\n    f[fn]=0; f[fn+1]=1; f[fn+2]=1; f[fn+3]=1;\n    fn+=4;\n  }else if(c=='J'){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=0; f[fn+3]=1; f[fn+4]=1; f[fn+5]=0; f[fn+6]=0; f[fn+7]=0;\n    fn+=8;\n  }else if(c=='K'){\n    f[fn]=0; f[fn+1]=1; f[fn+2]=1; f[fn+3]=0;\n    fn+=4;\n  }else if(c=='L'){\n    f[fn]=0; f[fn+1]=0; f[fn+2]=1; f[fn+3]=0; f[fn+4]=0;\n    fn+=5;\n  }else if(c=='M'){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=0; f[fn+3]=1; f[fn+4]=1; f[fn+5]=0; f[fn+6]=0; f[fn+7]=1;\n    fn+=8;\n  }else if(c=='N'){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=0; f[fn+3]=1; f[fn+4]=1; f[fn+5]=1; f[fn+6]=1; f[fn+7]=0;\n    fn+=8;\n  }else if(c=='O'){\n    f[fn]=0; f[fn+1]=0; f[fn+2]=1; f[fn+3]=0; f[fn+4]=1;\n    fn+=5;\n  }else if(c=='P'){\n    f[fn]=1; f[fn+1]=1; f[fn+2]=1;\n    fn+=3;\n  }else if(c=='Q'){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=0; f[fn+3]=1; f[fn+4]=1; f[fn+5]=1; f[fn+6]=1; f[fn+7]=1;\n    fn+=8;\n  }else if(c=='R'){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=0; f[fn+3]=0;\n    fn+=4;\n  }else if(c=='S'){\n    f[fn]=0; f[fn+1]=0; f[fn+2]=1; f[fn+3]=1; f[fn+4]=0;\n    fn+=5;\n  }else if(c=='T'){\n    f[fn]=0; f[fn+1]=0; f[fn+2]=1; f[fn+3]=1; f[fn+4]=1;\n    fn+=5;\n  }else if(c=='U'){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=0; f[fn+3]=1; f[fn+4]=1; f[fn+5]=1; f[fn+6]=0; f[fn+7]=0;\n    fn+=8;\n  }else if(c=='V'){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=0; f[fn+3]=1; f[fn+4]=1; f[fn+5]=1; f[fn+6]=0; f[fn+7]=1;\n    fn+=8;\n  }else if(c=='W'){\n    f[fn]=0; f[fn+1]=0; f[fn+2]=0; f[fn+3]=0; f[fn+4]=1; f[fn+5]=0;\n    fn+=6;\n  }else if(c=='X'){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=0; f[fn+3]=1; f[fn+4]=0; f[fn+5]=0; f[fn+6]=1; f[fn+7]=0;\n    fn+=8;\n  }else if(c=='Y'){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=0; f[fn+3]=1; f[fn+4]=0; f[fn+5]=0; f[fn+6]=1; f[fn+7]=1;\n    fn+=8;\n  }else if(c=='Z'){\n    f[fn]=1; f[fn+1]=0; f[fn+2]=0; f[fn+3]=1; f[fn+4]=0; f[fn+5]=0; f[fn+6]=0; f[fn+7]=0;\n    fn+=8;\n  }\n  return;\n}\n\nchar chc(int a0,int a1,int a2,int a3,int a4){\n  char c;\n  //printf(\"//%d %d %d %d %d\\n\",a0,a1,a2,a4,a4);\n  if(a0==0){ //0\n    if(a1==0){ //00\n      if(a2==0){ //000\n\tif(a3==0){ //0000\n\t  if(a4==0) c='A'; //00000\n\t  else c='B'; //00001\n\t}else{ //0001\n\t  if(a4==0) c='C'; //00010\n\t  else c='D'; //00011\n\t}\n      }else{ //001\n\tif(a3==0){ //0010\n\t  if(a4==0) c='E'; //00100\n\t  else c='F'; //00101\n\t}else{ //0011\n\t  if(a4==0) c='G'; //00110\n\t  else c='H'; //00111\n\t}\n      }\n    }else{ //01\n      if(a2==0){ //010\n\tif(a3==0){ //0100\n\t  if(a4==0) c='I'; //01000\n\t  else c='J'; //01001\n\t}else{ //0101\n\t  if(a4==0) c='K'; //01010\n\t  else c='L'; //01011\n\t}\n      }else{ //011\n\tif(a3==0){ //0110\n\t  if(a4==0) c='M'; //01100\n\t  else c='N'; //01101\n\t}else{ //0111\n\t  if(a4==0) c='O'; //01110\n\t  else c='P'; //01111\n\t}\n      }\n    }\n  }else{ //1\n    if(a1==0){ //10\n      if(a2==0){ //100\n\tif(a3==0){ //1000\n\t  if(a4==0) c='Q'; //10000\n\t  else c='R'; //10001\n\t}else{ //1001\n\t  if(a4==0) c='S'; //10010\n\t  else c='T'; //10011\n\t}\n      }else{ //101\n\tif(a3==0){ //1010\n\t  if(a4==0) c='U'; //10100\n\t  else c='V'; //10101\n\t}else{ //1011\n\t  if(a4==0) c='W'; //10110\n\t  else c='X'; //10111\n\t}\n      }\n    }else{ //11\n      if(a2==0){ //110\n\tif(a3==0){ //1100\n\t  if(a4==0) c='Y'; //11000\n\t  else c='Z'; //11001\n\t}else{ //1101\n\t  if(a4==0) c=' '; //11010\n\t  else c='.'; //11011\n\t}\n      }else{ //111\n\tif(a3==0){ //1110\n\t  if(a4==0) c=','; //11100\n\t  else c='-'; //11101\n\t}else{ //1111\n\t  if(a4==0) c='\\''; //11110\n\t  else c='?'; //11111\n\t}\n      }\n    }\n  }\n  return c;\n} \n\nint main(void){\n  int i,k;\n  while(fgets(str,sizeof(str),stdin)!=NULL){\n    fn=0;\n    for(i=0;i<strlen(str);i++){\n      chf(str[i]);\n    }\n    //printf(\"%d\\n\",fn);\n    if(fn%5!=0){\n      k=fn%5;\n      for(i=5;i>k;i--){\n\tf[fn]=0;\n\tfn++;\n      }\n    }\n    //printf(\"%d\\n\",fn);\n    /*\n    for(i=0;i<fn;i++){\n      printf(\"%d\",f[i]);\n    }\n    printf(\"\\n\");\n    */\n    for(i=0;5*i<fn;i++){\n      //printf(\"%d\\n\",i);\n      printf(\"%c\",chc(f[5*i],f[5*i+1],f[5*i+2],f[5*i+3],f[5*i+4]));\n    }\n    printf(\"\\n\");\n  }  \n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define CODE_MAX 801\n#define NUL 0x00\n#define INITIALIZE 0\n#define TEXT_MAX 101\n#define FIVE 5\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\nint main(void)\n{\n\tunsigned short i = INITIALIZE;\n\tunsigned short j = INITIALIZE;\n\tunsigned short k = INITIALIZE;\n\tunsigned short text_length = INITIALIZE;\n\tunsigned short barcode_length = INITIALIZE;\n\tunsigned int count = INITIALIZE;\n\tint c = 0;\n\tint cc = 0;\n\t\n\tchar input_text[TEXT_MAX];\n\tchar barcode[CODE_MAX];\n\tchar code_fivecut[CODE_MAX / FIVE][FIVE];/*160:5*/\n\t\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < CODE_MAX - 1; i++)//配列の最後(800番目)には\\0が入るためマイナス1してある\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX / FIVE;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0;i < CODE_MAX ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < FIVE; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[j].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "char*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",*strchr();\nL[]={6,8,4,4,3,5,8,6,4,8,4,5,8,8,5,3,8,4,5,5,8,8,6,8,8,8,3,6,6,8,6,6};\nB[]={\n\t0x25,0x9a,0x05,0x01,0x06,0x09,0x9b,0x10,0x07,0x98,0x06,0x04,0x99,0x9e,0x05,0x07,\n\t0x9f,0x08,0x06,0x07,0x9c,0x9d,0x02,0x92,0x93,0x90,0x05,0x11,0x03,0x91,0x00,0x01\n};\nc,b=0,l=0,i;\nmain(){\n\twhile(c=getchar()+1){\n\t\tif(c==11){\n\t\t\tb<<=5-l;\n\t\t\tputchar(C[b&31]);\n\t\t\tl=0;\n\t\t\tputchar(10);\n\t\t} else {\n\t\t\ti=strchr(C,c-1)-C;\n\t\t\tb=b<<L[i]|B[i];\n\t\t\tl+=L[i];\n\t\t\twhile(l>5){\n\t\t\t\tl-=5;\n\t\t\t\tputchar(C[b>>l&31]);\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <ctype.h>\n\nchar data[8][2][33] = {\n\t{\"\\',.?CDFHIKLOSTW\",\" -ABEGJMNPQRUVXYZ\"},\n\t{\" \\',-?ABDGJLMNOQRSTUVWXYZ\",\".CEFHIKP\"},\n\t{\"\\',-.?ABCDEFGHJMNQRUVWXYZ\",\" IKLOPST\"},\n\t{\"\\',.?FHKLORW\",\"-ABCDGIJMNQSTUVXYZ\"},\n\t{\"\\'-.?AHLSXYZ\",\",BFGJMNOQTUVW\"},\n\t{\"\\'-BGHJMWXYZ\",\",.?ANQUV\"},\n\t{\"-JMUVZ\",\"BGNQXY\"},\n\t{\"BJNUXZ\",\"-GMQVY\"},\n};\n\nchar data2[7] = \" .,-\\'?\";\n\nint main(){\n\tint i,j,k,l,p,tmp;\n\tchar str[101];\n\n\twhile(gets(str) != NULL){\n\t\tp = 0;\n\t\ttmp = 0;\n\t\tfor(i = 0;str[i] != '\\0';i++){\n\t\t\tfor(j = 0;j < 8;j++){\n\t\t\t\tfor(k = 0;k < 2;k++){\n\t\t\t\t\tfor(l = 0;data[j][k][l] != '\\0';l++){\n\t\t\t\t\t\tif(data[j][k][l] == str[i]){\n\t\t\t\t\t\t\ttmp *= 2;\n\t\t\t\t\t\t\ttmp += k;\n\t\t\t\t\t\t\tp++;\n\t\t\t\t\t\t\tif(p == 5){\n\t\t\t\t\t\t\t\tif(tmp < 26){\n\t\t\t\t\t\t\t\t\tputchar(tmp+'A');\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\tputchar(data2[tmp-26]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tp = 0;\n\t\t\t\t\t\t\t\ttmp = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tgoto ok;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tok:;\n\t\t\t}\n\t\t}\n\t\tif(p){\n\t\t\tfor(i = p;i < 5;i++){\n\t\t\t\ttmp *= 2;\n\t\t\t\ttmp += 0;\n\t\t\t}\n\t\t\tif(tmp < 26){\n\t\t\t\tputchar(tmp+'A');\n\t\t\t}else{\n\t\t\t\tputchar(data2[tmp-26]);\n\t\t\t}\n\t\t}\n\t\tputchar('\\n');\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#define SIZE (30)\n\nconst char *d1(int c) {\n\tif (c == ' ')\n\t\treturn \"101\";\n\tif (c == '\\'')\n\t\treturn \"000000\";\n\tif (c == ',')\n\t\treturn \"000011\";\n\tif (c == '-')\n\t\treturn \"10010001\";\n\tif (c == '.')\n\t\treturn \"010001\";\n\tif (c == '?')\n\t\treturn \"000001\";\n\tif (c == 'A')\n\t\treturn \"100101\";\n\tif (c == 'B')\n\t\treturn \"10011010\";\n\tif (c == 'C')\n\t\treturn \"0101\";\n\tif (c == 'D')\n\t\treturn \"0001\";\n\tif (c == 'E')\n\t\treturn \"110\";\n\tif (c == 'F')\n\t\treturn \"01001\";\n\tif (c == 'G')\n\t\treturn \"10011011\";\n\tif (c == 'H')\n\t\treturn \"010000\";\n\tif (c == 'I')\n\t\treturn \"0111\";\n\tif (c == 'J')\n\t\treturn \"10011000\";\n\tif (c == 'K')\n\t\treturn \"0110\";\n\tif (c == 'L')\n\t\treturn \"00100\";\n\tif (c == 'M')\n\t\treturn \"10011001\";\n\tif (c == 'N')\n\t\treturn \"10011110\";\n\tif (c == 'O')\n\t\treturn \"00101\";\n\tif (c == 'P')\n\t\treturn \"111\";\n\tif (c == 'Q')\n\t\treturn \"10011111\";\n\tif (c == 'R')\n\t\treturn \"1000\";\n\tif (c == 'S')\n\t\treturn \"00110\";\n\tif (c == 'T')\n\t\treturn \"00111\";\n\tif (c == 'U')\n\t\treturn \"10011100\";\n\tif (c == 'V')\n\t\treturn \"10011101\";\n\tif (c == 'W')\n\t\treturn \"000010\";\n\tif (c == 'X')\n\t\treturn \"10010010\";\n\tif (c == 'Y')\n\t\treturn \"10010011\";\n\tif (c == 'Z')\n\t\treturn \"10010000\";\n\treturn NULL;\n};\n#if 0\nconst char *d1[91] = {\n\t[' ']=\"101\", ['\\'']=\"000000\", [',']=\"000011\", ['-']=\"10010001\",\n\t['.']=\"010001\", ['?']=\"000001\", ['A']=\"100101\", ['B']=\"10011010\",\n\t['C']=\"0101\", ['D']=\"0001\", ['E']=\"110\", ['F']=\"01001\",\n\t['G']=\"10011011\", ['H']=\"010000\", ['I']=\"0111\", ['J']=\"10011000\",\n\t['K']=\"0110\", ['L']=\"00100\", ['M']=\"10011001\", ['N']=\"10011110\",\n\t['O']=\"00101\", ['P']=\"111\", ['Q']=\"10011111\", ['R']=\"1000\",\n\t['S']=\"00110\", ['T']=\"00111\", ['U']=\"10011100\", ['V']=\"10011101\",\n\t['W']=\"000010\", ['X']=\"10010010\", ['Y']=\"10010011\", ['Z']=\"10010000\"\n};\n#endif\nconst char *d2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint bin2dec(char bin_list[SIZE]) {\n\treturn ((bin_list[0]-'0') * 16 + (bin_list[1]-'0') * 8 +\n\t\t\t(bin_list[2]-'0') * 4 + (bin_list[3]-'0') * 2 +\n\t\t\t(bin_list[4]-'0'));\n}\n\nvoid line_end(char bin_list[SIZE]) {\n\tif (strlen(bin_list) > 0) {\n\t\tstrncat(bin_list, \"0000\", SIZE);\n\t\tputchar(d2[bin2dec(bin_list)]);\n\t}\n\tputchar('\\n');\n\tmemset(bin_list, 0, sizeof(char)*SIZE);\n}\n\nint main(void) {\n\tint c = 0, end = 0;\n\tchar bin_list[SIZE] = \"\", tmp[SIZE];\n\n\twhile (1) {\n\t\tc = getchar();\n\t\tif (c == EOF) {\n\t\t\tif (!end)\n\t\t\t\tline_end(bin_list);\n\t\t\tbreak;\n\t\t}\n\t\tif (c == '\\n') {\n\t\t\tline_end(bin_list);\n\t\t\tend = 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (c == '\\r')\n\t\t\tcontinue;\n\t\tend = 0;\n#if 0\n\t\tstrncat(bin_list, d1[c], SIZE);\n#endif\n\t\tstrncat(bin_list, d1(c), SIZE);\n\t\tif (strlen(bin_list) >= 5) {\n\t\t\tputchar(d2[bin2dec(bin_list)]);\n\t\t\tstrncpy(tmp, bin_list+5, SIZE);\n\t\t\tstrncpy(bin_list, tmp, SIZE);\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[4096];\n  unsigned char *p;\n  i = 0;\n  while((k = getc(stdin)) != EOF){\n    j = 0;\n    while(*(a + j) != k) j++;\n    p = b[j];\n    while(*p) d[i++] = *p++;\n  }\n  j = 5 - i % 5;\n  while(j--) d[i++] = '0';\n  d[i] = '\\0';\n  i = 0;\n  while(d[i]) {\n    j = 0;\n    k = 4;\n    do {\n      j += (d[i++] - '0') << k;\n    } while(k--);\n    putc(*(c + j),stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  while(1) {\n    if(!gets(d)) return 0;\n    puts(d);\n    //printf(\"\\nSample Input\\n%s\\n\",d);\n    e[0] = '\\0';\n    i = 0;\n    while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n    i = 5 - strlen(e) % 5;\n    while(i--) strcat(e,\"0\");\n    // puts(\"Output for the Sample Input\");\n    i = 0;\n    while(e[i] != '\\0') {\n      j = 0;\n      k = 4;\n      do {\n\tj += (e[i++] - '0') << k;\n      } while(k--);\n      putc(c[j],stdout);\n    }\n  }\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define CODE_MAX 801\n#define NUL 0x00\n#define INITIALIZE 0\n#define TEXT_MAX 101\n#define FIVE 5\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\nint main(void)\n{\n\t\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\n\t\n\tchar input_text[TEXT_MAX];\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tunsigned short i = INITIALIZE;\n\t\tunsigned short j = INITIALIZE;\n\t\tunsigned short k = INITIALIZE;\n\t\tunsigned short text_length = INITIALIZE;\n\t\tunsigned short barcode_length = INITIALIZE;\n\t\tunsigned int count = INITIALIZE;\n\t\tint c = 0;\n\t\tint cc = 0;\n\t\tchar barcode[CODE_MAX];\n\t\tchar code_fivecut[CODE_MAX / FIVE][FIVE];/*160:5*/\n\n\t\t\n\t\t\n\t\tfor(i = 0; i < CODE_MAX - 1; i++)//配列の最後(800番目)には\\0が入るためマイナス1してある\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX / FIVE;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < FIVE; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0;i < CODE_MAX ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < FIVE; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[j].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#define CODE_MAX 10000\n#define L_MAX 33\n\nint p, p2;\nshort code[CODE_MAX];\n\n/* letter -> code */\n\n#define BIT_MAX 8\n\nchar list1[8][2][L_MAX]={\n     {\"',?DW.CFHLOSTIK\", \"-ABGJMNQRUVXYZE P\"},\n     {\"-ABGJMNQRUVXYZ ',?DWLOST\", \"EP.CFHIK\"},\n     {\"E.CFH-ABGJMNQRUVXYZ',?DW\", \"PIK LOST\"},\n     {\"KLO.FHR',?W\", \"ISTC-ABGJMNQUVXYZD\"},\n     {\"S-AXYZL.H'?\", \"TBGJMNQUVOF,W\"},\n     {\"BGJMW-XYZH'\", \"NQUV,A.?\"},\n     {\"UVJM-Z\", \"NQBGXY\"},\n     {\"NBXUJZ\", \"QGYVM-\"}\n};\n\nvoid l2c(char ch)\n{\n     int i, j, k;\n     \n     for(i=0; i<BIT_MAX; i++)\n\t  for(j=0; j<2; j++)\n\t       for(k=0; list1[i][j][k]!='\\0'; k++)\n\t\t    if(list1[i][j][k]==ch)\n\t\t\t code[p++]=j;\n}\n\n/* code -> letter */\n\n#define BIT_MAX2 5\n\nchar list2[L_MAX]=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nchar c2l()\n{\n     int t = 0, i;\n     \n     for(i=0; i<BIT_MAX2; i++)\n\t  t = (t<<1) + code[p2++];\n     \n     return list2[t];\n}\n\n/* main */\n\nmain()\n{\n     int i; char ch=getchar();\n\n     while(1){\n\t  \n\t  if(ch==EOF) return 0;\n\n\t  p = p2 = 0;\n\t  for(i=0; i<CODE_MAX; i++) code[i]=0;\n\n\t  while(ch!='\\n'){\n\t       l2c(ch);\n\t       ch=getchar();\n\t  }\n\t  \n\t  ch=getchar(); /* pop '\\n' */\n\t  \n\t  while(p2<p) putchar(c2l());\n\t  puts(\"\");\n     }\n}"
  },
  {
    "language": "C",
    "code": "// Aizu Vol0 0088: The Code A Doctor Loved\n// 2017.7.30\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *gets(char *);\n\nchar *c2d[32] = {\n\t/*A*/\t\"100101\",\n\t/*B*/\t\"10011010\",\n\t/*C*/\t\"0101\",\n\t/*D*/\t\"0001\",\n\t/*E*/\t\"110\",\n\t/*F*/\t\"01001\",\n\t/*G*/\t\"10011011\",\n\t/*H*/\t\"010000\",\n\t/*I*/\t\"0111\",\n\t/*J*/\t\"10011000\",\n\t/*K*/\t\"0110\",\n\t/*L*/\t\"00100\",\n\t/*M*/\t\"10011001\",\n\t/*N*/\t\"10011110\",\n\t/*O*/\t\"00101\",\n\t/*P*/\t\"111\",\n\t/*Q*/\t\"10011111\",\n\t/*R*/\t\"1000\",\n\t/*S*/\t\"00110\",\n\t/*T*/\t\"00111\",\n\t/*U*/\t\"10011100\",\n\t/*V*/\t\"10011101\",\n\t/*W*/\t\"000010\",\n\t/*X*/\t\"10010010\",\n\t/*Y*/\t\"10010011\",\n\t/*Z*/\t\"10010000\",\n\t/*Space*/\t\"101\",\n\t/*'*/\t\"000000\",\n\t/*,*/\t\"000011\",\n\t/*-*/\t\"10010001\",\n\t/*.*/\t\"010001\",\n\t/*?*/   \"000001\"\n};\n\nint clen[32] = {\n\t/*A\t\"100101\",*/\t\t6,\n\t/*B\t\"10011010\",*/\t8,\n\t/*C\t\"0101\",*/\t\t4,\n\t/*D\t\"0001\",*/\t\t4,\n\t/*E\t\"110\",*/\t\t3,\n\t/*F\t\"01001\",*/\t\t5,\n\t/*G\t\"10011011\",*/\t8,\n\t/*H\t\"010000\",*/\t\t6,\n\t/*I\t\"0111\",*/\t\t4,\n\t/*J\t\"10011000\",*/\t8,\n\t/*K\t\"0110\",*/\t\t4,\n\t/*L\t\"00100\",*/\t\t5,\n\t/*M\t\"10011001\",*/\t8,\n\t/*N\t\"10011110\",*/\t8,\n\t/*O\t\"00101\",*/\t\t5,\n\t/*P\t\"111\",*/\t\t3,\n\t/*Q\t\"10011111\",*/\t8,\n\t/*R\t\"1000\",*/\t\t4,\n\t/*S\t\"00110\",*/\t\t5,\n\t/*T\t\"00111\",*/\t\t5,\n\t/*U\t\"10011100\",*/\t8,\n\t/*V\t\"10011101\",*/\t8,\n\t/*W\t\"000010\",*/\t\t6,\n\t/*X\t\"10010010\",*/\t8,\n\t/*Y\t\"10010011\",*/\t8,\n\t/*Z\t\"10010000\",*/\t8,\n\t/*Space\t\"101\",*/\t3,\n\t/*'\t\"000000\",*/\t\t6,\n\t/*,\t\"000011\",*/\t\t6,\n\t/*-\t\"10010001\",*/\t8,\n\t/*.\t\"010001\",*/\t\t6,\n\t/*? \"000001\"*/\t\t6\n};\n\nint d2c[32] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n\t\t\t\t'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n\t\t\t\t'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '.', ',', '-',\n\t\t\t\t'\\'', '?' };\n\nint idx[130];\n\nint main()\n{\n\tchar buf[150], *p;\n\tchar ans[1000], *pa;\n\tint i, j, len;\n\n#if 0\n\tfor (i = 0; i < 32; i++) {\n\t\tif (clen[i] != strlen(c2d[i])) printf(\"Len? (%d)\\n\", i);\n\t}\n#endif\n\n\tfor (i = 0; i < 26; i++) idx['A'+i] = i;\n\tidx[' '] = i++;\n\tidx['\\''] = i++;\n\tidx[','] = i++;\n\tidx['-'] = i++;\n\tidx['.'] = i++;\n\tidx['?'] = i++;\n\n\twhile (gets(p = buf) != NULL) {\n\t\tpa = ans;\n\t\twhile (*p) {\n\t\t\ti = idx[*p++];\n\t\t\tmemcpy(pa, c2d[i], clen[i]);\n\t\t\tpa += clen[i];\n\t\t}\n\t\tlen = pa - ans;\n\t\tif ((j = len % 5) > 0) {\n\t\t\twhile (j++ < 5) *pa++ = '0', len++;\n\t\t}\n\t\t*pa = 0;\n\n\t\tfor (pa = ans; *pa; ) {\n\t\t\tfor (i = j = 0; i < 5; i++) {\n\t\t\t\tj <<= 1;\n\t\t\t\tif (*pa++ == '1') j |= 1;\n\t\t\t}\n\t\t\tputchar(d2c[j]);\n\t\t}\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "char*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";//,*strchr();\nL[]={6,8,4,4,3,5,8,6,4,8,4,5,8,8,5,3,8,4,5,5,8,8,6,8,8,8,3,6,6,8,6,6};\nB[]={\n\t0x25,0x9a,0x05,0x01,0x06,0x09,0x9b,0x10,0x07,0x98,0x06,0x04,0x99,0x9e,0x05,0x07,\n\t0x9f,0x08,0x06,0x07,0x9c,0x9d,0x02,0x92,0x93,0x90,0x05,0x11,0x03,0x91,0x00,0x01\n};\nc,b=0,l=0,i;\nmain(){\n\twhile(c=getchar(),c+1){\n\t\tif(c==10){\n\t\t\tb<<=5-l;\n\t\t\tputchar(C[b&31]);\n\t\t\tl=0;\n\t\t\tputchar(c);\n\t\t} else {\n\t\t\ti=strchr(C,c)-C;\n\t\t\tb=b<<L[i]|B[i];\n\t\t\tl+=L[i];\n\t\t\twhile(l>5){\n\t\t\t\tl-=5;\n\t\t\t\tputchar(C[b>>l&31]);\n\t\t\t}\n\t\t}\n\t}\n\texit(0);\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\nint main(){\n  char c[]={\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"};\n  char w[][9]={\n    \"101\"     ,\n    \"000000\"  , \n    \"000011\"  ,\n    \"10010001\",\n    \"010001\"  ,\n    \"000001\"  ,\n    \"100101\"  ,\n    \"10011010\",\n    \"01010\"   ,\n    \"0001\"    ,\n    \"110\"     ,\n    \"01001\"   ,\n    \"10011011\",\n    \"010000\"  ,\n    \"0111\"    ,\n    \"10011000\",\n    \"0110\"    ,\n    \"00100\"   ,\n    \"10011001\",\n    \"10011110\",\n    \"00101\"   ,\n    \"111\"     ,\n    \"1001111\" ,\n    \"1000\"    ,\n    \"00110\"   ,\n    \"00111\"   ,\n    \"10011100\",\n    \"10011101\",\n    \"000010\"  ,\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n  };\n  char n[102];\n  //char s[920]={0};\n  int i,j;\n  while(fgets(n,101,stdin)!=NULL){\n    char s[920]={0};\n    for(i=0;n[i]!=10;i++){\n      for(j=0;n[i]!=c[j];j++);\n      strcat(s,w[j]);\n    }//printf(\"%s\\n\",s);\n    for(i=j=0;s[i];i++){\n      j*=2;\n      if(s[i]=='1')j++;\n      if(i%5==4){\n\tprintf(\"%c\",c[j+6]);\n\tj=0;\n      }\n    }\n    if(i%5){\n      for(;i%5!=0;i++)j*=2;\n      printf(\"%c\",c[j+6]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<conio.h>\nint main()\n{\n\tint c[99],m[32]={6,8,4,4,3,5,8,6,4,8,4,5,8,8,5,3,8,4,5,5,8,8,6,8,8,8,3,6,6,8,6,6},d[32]={37,154,5,1,6,9,155,16,7,152,6,4,153,158,5,7,159,8,6,7,156,157,2,146,147,144,5,0,3,145,17,1},\n\tbuffer=0,t,p=0,i,w[32]={65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,32,46,44,45,39,63};\n\n\tc[32]=26,c[39]=27,c[44]=28,c[45]=29,c[46]=30,c[63]=31;\n\tfor(i=0;i<25;i++)\n\t\tc[65+i]=i;\n\twhile(t=getch())\n\t{\n\t\tif(t==13||t==26)\n\t\t{\n\t\t\tif(p>0)\n\t\t\t\tputchar(w[buffer<<5-p]);\n\t\t\tif(t==26)\n\t\t\t\tbreak;\n\t\t\tputs(\"\");\n\t\t\tbuffer=p=0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti=c[t];\n\t\t\tbuffer<<=m[i];\n\t\t\tbuffer|=d[i];\n\t\t\tp+=m[i];\n\t\t\tfor(;p>=5;p-=5)\n\t\t\t{\n\t\t\t\tputchar(w[buffer>>p-5]);\n\t\t\t\tbuffer&=~(31<<p-5);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n \n#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include<stdlib.h>\n#include<stdarg.h>\n#include<malloc.h>\n#include<limits.h>\n\nvoid convert(char, char cd[10]);\nchar convert2(char cd[8]);\n\nint main()\n{\n\tchar str[1000], code[1000][10]={0}, lcode[10000], buf[8]={0};\n\tint i, j, len, block;\n\n\twhile(scanf(\"%[^\\n]%*c\", str) != EOF){\n\t\tlen = strlen(str);\n\n\t\tfor(i=0; i<len; i++){\n\t\t\tconvert(str[i], code[i]);\n\t\t}\n\n\t\tstrcpy(lcode, code[0]);\n\t\tfor(i=1; i<len; i++)\n\t\t\tstrcat(lcode, code[i]);\n\n\t\tlen = strlen(lcode);\n\n\t\tif(len % 5 != 0)\n\t\t\tblock = len / 5 + 1;\n\t\telse\n\t\t\tblock = len / 5;\n\n\t\tfor(i=0; i<block; i++){\n\t\t\tif(i != block-1){\n\t\t\t\tfor(j=0; j<5; j++){\n\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor(j=0; j<5; j++)\n\t\t\t\t\tbuf[j] = '0';\n\t\t\t\tif(len % 5 == 0){\n\t\t\t\t\tfor(j=0; j<5; j++)\n\t\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t} else {\n\t\t\t\t\tfor(j=0; j<len%5; j++)\n\t\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%c\", convert2(buf));\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\t\n\treturn 0;\n}\n\nvoid convert(char c, char cd[10])\n{\n\tint i;\n\tchar a[32][10] = {\n\t\t\"101\", \"000000\", \"000011\", \"10010001\",\n\t\t\"010001\", \"000001\", \"100101\", \"10011010\",\n\t\t\"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\",\n\t\t\"0110\", \"00100\", \"10011001\", \"10011110\",\n\t\t\"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\",\n\t\t\"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tchar b[32] = {' ', '\\'', ',', '-', '.', '?'};\n\n\tfor(i=6; i<32; i++)\n\t\tb[i] = 'A' - 6 + i;\n\n\tfor(i=0; i<32; i++){\n\t\tif(c == b[i]){\n\t\t\tstrcpy(cd, a[i]);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn;\n}\n\nchar convert2(char cd[8])\n{\n\tchar a[32][8] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\",\n\t\t\"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\",\n\t\t\"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\",\n\t\t\"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\",\n\t\t\"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\tchar b[32] = {\n\t\t'A','B','C','D','E','F','G','H',\n\t\t'I','J','K','L','M','N','O','P',\n\t\t'Q','R','S','T','U','V','W','X',\n\t\t'Y','Z',' ','.',',','-','\\'','?'\n\t};\n\tint i;\n\n\tfor(i=0; i<32; i++){\n\t\tif(strcmp(cd, a[i]) == 0){\n\t\t\treturn b[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint main(void)\n{\n\tchar before[32][9] = { \n\t\t\"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\",\n\t\t\"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\",\n\t\t\"10010010\", \"10010011\", \"10010000\", \"101\", \"000000\", \"000011\",\n\t\t\"10010001\", \"010001\", \"000001\"\n\t};\n\tchar after[32][6] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\",\n\t\t\"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\",\n\t\t\"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\",\n\t\t\"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\",\n\t\t\"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\t\n\tchar str[128], str2[2048];\n\tint i, j, len;\n\t\n\twhile (gets(str) != NULL){\n\t\tfor (i = 0; i < 128; i++){\n\t\t\tstr2[i] = '\\0';\n\t\t}\n\t\t\n\t\ti = 0;\n\t\twhile (str[i] != '\\0'){\n\t\t\tif (str[i] >= 'A' && str[i] <= 'Z'){\n\t\t\t\tstrcat(str2, before[str[i] - 'A']);\n\t\t\t}\n\t\t\tswitch (str[i]){\n\t\t\t\tcase ' ':\n\t\t\t\tstrcat(str2, before[26]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '.':\n\t\t\t\tstrcat(str2, before[27]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase ',':\n\t\t\t\tstrcat(str2, before[28]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '-':\n\t\t\t\tstrcat(str2, before[29]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '\\'':\n\t\t\t\tstrcat(str2, before[30]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '?':\n\t\t\t\tstrcat(str2, before[31]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tlen = strlen(str2);\n\t\twhile (len % 5 != 0){\n\t\t\tstrcat(str2, \"0\");\n\t\t\tlen++;\n\t\t}\n\t\t\n\t\ti = 0;\n\t\twhile (len - i > 0){\n\t\t\tfor (j = 0; j < 32; j++){\n\t\t\t\tif (strncmp(&str2[i], after[j], 5) == 0){\n\t\t\t\t\tif (j >= 0 && j <= 25){\n\t\t\t\t\t\tprintf(\"%c\", j + 'A');\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tswitch (j){\n\t\t\t\t\t\t\tcase 26:\n\t\t\t\t\t\t\tprintf(\" \");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 27:\n\t\t\t\t\t\t\tprintf(\".\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 28:\n\t\t\t\t\t\t\tprintf(\",\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 29:\n\t\t\t\t\t\t\tprintf(\"-\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 30:\n\t\t\t\t\t\t\tprintf(\"\\'\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 31:\n\t\t\t\t\t\t\tprintf(\"?\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\ti += 5;\n\t\t}\n\t\t\n\t\tputs(\"\");\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#define SIZE (20)\n\nconst char *d1[91] = {\n\t[' ']=\"101\", ['\\'']=\"000000\", [',']=\"000011\", ['-']=\"10010001\",\n\t['.']=\"010001\", ['?']=\"000001\", ['A']=\"100101\", ['B']=\"10011010\",\n\t['C']=\"0101\", ['D']=\"0001\", ['E']=\"110\", ['F']=\"01001\",\n\t['G']=\"10011011\", ['H']=\"010000\", ['I']=\"0111\", ['J']=\"10011000\",\n\t['K']=\"0110\", ['L']=\"00100\", ['M']=\"10011001\", ['N']=\"10011110\",\n\t['O']=\"00101\", ['P']=\"111\", ['Q']=\"10011111\", ['R']=\"1000\",\n\t['S']=\"00110\", ['T']=\"00111\", ['U']=\"10011100\", ['V']=\"10011101\",\n\t['W']=\"000010\", ['X']=\"10010010\", ['Y']=\"10010011\", ['Z']=\"10010000\"\n};\nconst char *d2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint bin2dec(char bin_list[SIZE]) {\n\treturn ((bin_list[0]-'0') * 16 + (bin_list[1]-'0') * 8 +\n\t\t\t(bin_list[2]-'0') * 4 + (bin_list[3]-'0') * 2 +\n\t\t\t(bin_list[4]-'0'));\n}\n\nvoid line_end(char bin_list[SIZE]) {\n\tif (strlen(bin_list) > 0) {\n\t\tstrncat(bin_list, \"0000\", SIZE);\n\t\tputchar(d2[bin2dec(bin_list)]);\n\t}\n\tputchar('\\n');\n\tmemset(bin_list, 0, sizeof(char)*SIZE);\n}\n\nint main(void) {\n\tint c = 0, end = 0;\n\tchar bin_list[SIZE] = \"\";\n\n\twhile (1) {\n\t\tc = getchar();\n\t\tif (c == EOF) {\n\t\t\tif (!end)\n\t\t\t\tline_end(bin_list);\n\t\t\tbreak;\n\t\t}\n\t\tif (c == '\\n') {\n\t\t\tline_end(bin_list);\n\t\t\tend = 1;\n\t\t\tcontinue;\n\t\t}\n\t\tend = 0;\n\t\tstrncat(bin_list, d1[c], SIZE);\n\t\tif (strlen(bin_list) >= 5) {\n\t\t\tputchar(d2[bin2dec(bin_list)]);\n\t\t\tstrncpy(bin_list, bin_list+5, SIZE);\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define NUM_OF_CHAR\t\t(32)\n#define LEN_OF_CODESTR1\t(8)\n#define LEN_OF_CODESTR2\t(5)\n\n#define STRCMP_MATCH\t(0)\n\nchar charToCodeTable[2][ NUM_OF_CHAR ][ LEN_OF_CODESTR1 + 1 ] =\n{\n\t{\n\t\t\" \", \"'\", \",\", \"-\", \".\", \"?\", \"A\", \"B\",\n\t\t\"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\",\n\t\t\"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n\t\t\"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n\t},\n\t{\n\t\t\"101\",\t\t\"000000\",\t\"000011\",\t\"10010001\",\t\"010001\",\t\"000001\",\t\"100101\",\t\"10011010\",\n\t\t\"0101\",\t\t\"0001\",\t\t\"110\",\t\t\"01001\",\t\"10011011\",\t\"010000\",\t\"0111\",\t\t\"10011000\",\n\t\t\"0110\",\t\t\"00100\",\t\"10011001\",\t\"10011110\",\t\"00101\",\t\"111\",\t\t\"10011111\",\t\"1000\",\n\t\t\"00110\",\t\"00111\",\t\"10011100\",\t\"10011101\",\t\"000010\",\t\"10010010\",\t\"10010011\",\t\"10010000\"\n\t}\n};\n\nchar codeToCharTable[2][ NUM_OF_CHAR ][ LEN_OF_CODESTR2 + 1 ] = \n{\n\t{\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"\n\t},\n\t{\n\t\t\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n\t\t\"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\",\n\t\t\"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\",\n\t\t\"Y\", \"Z\", \" \", \".\", \",\", \"-\", \"'\", \"?\"\n\t}\n};\n\n//inputに対応するコードをoutCodeに格納\nvoid charToCode( char input, char* outCode );\n\n//inCodeに対応する文字を返す\nchar codeToChar( char* inCode );\n\n//inputの最初から5文字までをoutputに格納\nvoid get5LengthCode( char* input, char* output );\n\n//shiftNumberの数だけinputをずらした文字列をoutputに格納\nvoid shiftString( char* input, char* output, int shiftNumber );\n\nint main( void )\n{\n\tint i;\n\t/*入力された文字を受け取る*/\n\tchar ch;\n\tchar string[1024+1];\n\t/*出力されたコードを受け取る*/\n\tchar getedCode[ LEN_OF_CODESTR2 + 1 ] = {'\\0'};\n\t/*出力されたコードを５文字以上になるまでためておくバッファ*/\n\tchar codeBuffer[ LEN_OF_CODESTR1 * 2 + 1 ] = {'\\0'};\n\t\n\t//入力の終わりまで\n\twhile( fgets( string, 1024 + 1, stdin ) != NULL )\n\t{\n\t\tfor( i = 0; string[i] != '\\0'; i++ )\n\t\t{\n\t\t\tch = string[i];\n\t\t\tif( ch != '\\n' )\n\t\t\t{\n\t\t\t\tcharToCode( ch, codeBuffer );\n\t\t\t\tif( strlen( codeBuffer ) >= 5 )\n\t\t\t\t{\n\t\t\t\t\tget5LengthCode( codeBuffer, getedCode );\n\t\t\t\t\tshiftString( codeBuffer, codeBuffer, 5 );\n\t\t\t\t\tprintf( \"%c\", codeToChar( getedCode ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif( strlen( codeBuffer ) > 0 )\n\t\t\t\t{\n\t\t\t\t\twhile( 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tget5LengthCode( codeBuffer, getedCode );\n\t\t\t\t\t\tshiftString( codeBuffer, codeBuffer, 5 );\n\t\t\t\t\t\tprintf( \"%c\", codeToChar( getedCode ) );\n\t\t\t\t\t\tif( codeBuffer[0] == '\\0' )break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprintf( \"\\n\" );\n\t\t\t\t\n\t\t\t\tstrcpy( codeBuffer, \"\" );\n\t\t\t\tstrcpy( getedCode, \"\" );\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (0);\n}\n\nvoid charToCode( char input, char* outCode )\n{\n\tchar inStr[2];\n\tint i;\n\t\n\tinStr[0] = input;\n\tinStr[1] = '\\0';\n\t\n\tfor( i = 0; i < NUM_OF_CHAR; i++ )\n\t{\n\t\tif( strcmp( inStr, charToCodeTable[0][i] ) == STRCMP_MATCH )\n\t\t{\n\t\t\tstrcat( outCode, charToCodeTable[1][i] );\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nchar codeToChar( char inCode[ LEN_OF_CODESTR2 + 1 ] )\n{\n\tint i;\n\tchar result;\n\tfor( i = 0; i < NUM_OF_CHAR; i++ )\n\t{\n\t\tif( strcmp( inCode, codeToCharTable[0][i] ) == STRCMP_MATCH )\n\t\t{\n\t\t\tresult = codeToCharTable[1][i][0];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn (result);\n}\n\nvoid get5LengthCode( char* input, char* output )\n{\n\tint i;\n\tfor( i = 0; i < 5; i++ )\n\t{\n\t\tif( input[i] == '\\0' )break;\n\t\toutput[i] = input[i];\n\t}\n\tif( i == 0 )\n\t{\n\t\tfor( i = 0; i < 5; i++ )\n\t\t{\n\t\t\toutput[i] = '\\0';\n\t\t}\n\t\treturn;\n\t}\n\tfor( ; i < 5; i++ )\n\t{\n\t\toutput[i] = '0';\n\t}\n\toutput[i] = '\\0';\n}\n\nvoid shiftString( char input[LEN_OF_CODESTR1 * 2 + 1], char output[LEN_OF_CODESTR1 * 2 + 1], int shiftNumber )\n{\n\tint i;\n\tfor( i = 0; i < input[i + shiftNumber] != '\\0'; i++ )\n\t{\n\t\toutput[i] = input[i + shiftNumber];\n\t}\n\t\n\tfor( ; i < LEN_OF_CODESTR1 * 2 + 1; i++ )\n\t{\n\t\toutput[i] = '\\0';\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[4096];\n  unsigned char *p;\n  i = 0;\n  while((k = getc(stdin)) != EOF){\n    j = 0;\n    while(*(a + j) != k) j++;\n    p = b[j];\n    //while(*p) d[i++] = *p++;\n  }\n  j = 5 - i % 5;\n  while(j--) d[i++] = '0';\n  d[i] = '\\0';\n  i = 0;\n  while(d[i]) {\n    j = 0;\n    k = 4;\n    do {\n      j += (d[i++] - '0') << k;\n    } while(k--);\n    putc(*(c + j),stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define CODE_MAX 801\n#define NUL 0x00\n#define INITIALIZE 0\n#define TEXT_LENGTH_MAX 101\n#define FIVE 5\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[FIVE + 1];\n\tchar charcter;\n}CIPHER;\n\nint main(void)\n{\n\t\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\", \"00000\", 'A'},\n\t\t{\"10011010\", \"00001\", 'B'},\n\t\t{\"0101\", \"00010\", 'C'},\n\t\t{\"0001\", \"00011\", 'D'},\n\t\t{\"110\", \"00100\", 'E'},\n\t\t{\"01001\", \"00101\", 'F'},\n\t\t{\"10011011\", \"00110\", 'G'},\n\t\t{\"010000\", \"00111\", 'H'},\n\t\t{\"0111\", \"01000\", 'I'},\n\t\t{\"10011000\", \"01001\", 'J'},\n\t\t{\"0110\", \"01010\", 'K'},\n\t\t{\"00100\", \"01011\", 'L'},\n\t\t{\"10011001\", \"01100\", 'M'},\n\t\t{\"10011110\", \"01101\", 'N'},\n\t\t{\"00101\", \"01110\", 'O'},\n\t\t{\"111\", \"01111\", 'P'},\n\t\t{\"10011111\", \"10000\", 'Q'},\n\t\t{\"1000\", \"10001\", 'R'},\n\t\t{\"00110\", \"10010\", 'S'},\n\t\t{\"00111\", \"10011\", 'T'},\n\t\t{\"10011100\", \"10100\", 'U'},\n\t\t{\"10011101\", \"10101\", 'V'},\n\t\t{\"000010\", \"10110\", 'W'},\n\t\t{\"10010010\", \"10111\", 'X'},\n\t\t{\"10010011\", \"11000\", 'Y'},\n\t\t{\"10010000\", \"11001\", 'Z'},\n\t\t{\"101\", \"11010\", ' '},\n\t\t{\"010001\", \"11011\", '.'},\n\t\t{\"000011\", \"11100\", ','},\n\t\t{\"10010001\", \"11101\", '-'},\n\t\t{\"000000\", \"11110\", '\\''},\n\t\t{\"000001\", \"11111\", '?'}\n\t};\n\t\n\tunsigned short i = INITIALIZE;\n\tunsigned short j = INITIALIZE;\n\tunsigned short k = INITIALIZE;\n\tchar input_text[TEXT_LENGTH_MAX];\n\t\n\t\n\tfor(i = 0; i < TEXT_LENGTH_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tunsigned short text_length = INITIALIZE;\n\t\tunsigned short barcode_length = INITIALIZE;\n\t\tunsigned short count = INITIALIZE;\n\t\tunsigned short c = 0;\n\t\tunsigned short match_count = 0;\n\t\tchar barcode[CODE_MAX];\n\t\tchar code_fivecut[CODE_MAX / FIVE][FIVE];/*160:5*/\n\t\t\n\t\tfor(i = 0; i < CODE_MAX - 1; i++)//配列の最後(800番目)には\\0が入るためマイナス1してある\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX / FIVE;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < TEXT_LENGTH_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < FIVE; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0;i < CODE_MAX ; i+= FIVE)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / FIVE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < FIVE; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tmatch_count++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(match_count == FIVE)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[j].charcter);\n\t\t\t\t}\n\t\t\t\tmatch_count = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nint main(void)\n{\n  int i,j;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  //while(1) {\n    puts(\"\\nSample Input\");\n    if(!*gets(d)) break;\n    e[0] = '\\0';\n    i = 0;\n    while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n    i = 5 - strlen(e) % 5;\n    while(i--) strcat(e,\"0\");\n    puts(\"Output for the Sample Input\");\n    i = 0;\n    while(e[i] != '\\0') {\n      j = 0;\n      j += (e[i++] - '0') << 4; \n      j += (e[i++] - '0') << 3; \n      j += (e[i++] - '0') << 2; \n      j += (e[i++] - '0') << 1; \n      j += (e[i++] - '0'); \n      putc(c[j],stdout);\n    }\n    //}\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9//符号の文字列の最大の長さ\n#define CIPHER_NUM 32//符号と文字の組み合わせの数\n#define CODE_MAX 801//文字→符号に変換するとき、符号の文字列の最大数\n#define INITIALIZE_NUL 0x00 //char型の初期値\n#define INITIALIZE_CHAR '0' //5文字ごとに区切り、格納する配列に足りない文字数に\"0\"を追加することを考慮した初期値\n#define INITIALIZE_INT 0 //整数型の初期値\n#define LAST_CHAR '\\0' //文字列の最後を判定する文字\n#define TEXT_LENGTH_MAX 101//入力において最大文字数\n#define SECTION 5 //5文字区切り\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];//文字→符号にする時に扱う符号を格納\n\tchar sign_change_charcter[SECTION + 1];//符号→文字にする時に扱う符号を格納\n\tchar character;// 文字を格納\n}CIPHER;\n\n/*二つの表から文字と符号を対応させた初期化*/\nconst CIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\", \"00000\", 'A'},\n\t\t{\"10011010\", \"00001\", 'B'},\n\t\t{\"0101\", \"00010\", 'C'},\n\t\t{\"0001\", \"00011\", 'D'},\n\t\t{\"110\", \"00100\", 'E'},\n\t\t{\"01001\", \"00101\", 'F'},\n\t\t{\"10011011\", \"00110\", 'G'},\n\t\t{\"010000\", \"00111\", 'H'},\n\t\t{\"0111\", \"01000\", 'I'},\n\t\t{\"10011000\", \"01001\", 'J'},\n\t\t{\"0110\", \"01010\", 'K'},\n\t\t{\"00100\", \"01011\", 'L'},\n\t\t{\"10011001\", \"01100\", 'M'},\n\t\t{\"10011110\", \"01101\", 'N'},\n\t\t{\"00101\", \"01110\", 'O'},\n\t\t{\"111\", \"01111\", 'P'},\n\t\t{\"10011111\", \"10000\", 'Q'},\n\t\t{\"1000\", \"10001\", 'R'},\n\t\t{\"00110\", \"10010\", 'S'},\n\t\t{\"00111\", \"10011\", 'T'},\n\t\t{\"10011100\", \"10100\", 'U'},\n\t\t{\"10011101\", \"10101\", 'V'},\n\t\t{\"000010\", \"10110\", 'W'},\n\t\t{\"10010010\", \"10111\", 'X'},\n\t\t{\"10010011\", \"11000\", 'Y'},\n\t\t{\"10010000\", \"11001\", 'Z'},\n\t\t{\"101\", \"11010\", ' '},\n\t\t{\"010001\", \"11011\", '.'},\n\t\t{\"000011\", \"11100\", ','},\n\t\t{\"10010001\", \"11101\", '-'},\n\t\t{\"000000\", \"11110\", '\\''},\n\t\t{\"000001\", \"11111\", '?'}\n\t};\n\nint main(void)\n{\n\t\n\t/*変数宣言と初期化*/\n\tunsigned short i = INITIALIZE_INT;\n\tunsigned short j = INITIALIZE_INT;\n\tunsigned short k = INITIALIZE_INT;\n\tchar input_text[TEXT_LENGTH_MAX];//入力値を格納\n\t\n\t/*入力文字列の初期化*/\n\tfor(i = 0; i < TEXT_LENGTH_MAX; i++)\n\t{\n\t\tinput_text[i] = INITIALIZE_NUL;\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tunsigned short text_length = INITIALIZE_INT;//入力文字列の長さを格納\n\t\tunsigned short barcode_length = INITIALIZE_INT;//符号と符号を連結させた文字列の長さを格納\n\t\tunsigned short element_number = INITIALIZE_INT;//要素番号を格納\n\t\tunsigned short match_count = INITIALIZE_INT;//文字比較の時に一致した回数をカウント\n\t\tunsigned short character_length = INITIALIZE_INT;//符号→文字にした時の文字列の長さを格納\n\t\tchar barcode[CODE_MAX];//文字→符号にした文字列を連結して格納\n\t\tchar code_fivecut[CODE_MAX / SECTION][SECTION];//符号を5つ区切りにしたものを格納\n\t\t\n\t\t/*配列の初期化*/\n\t\tfor(i = 0; i < CODE_MAX; i++)\n\t\t{\n\t\t\tbarcode[i] = INITIALIZE_NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX / SECTION; i++)\n\t\t{\n\t\t\tfor(j = 0; j < SECTION; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = INITIALIZE_CHAR;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*入力文字列のカウント*/\n\t\t/*\n\t\tfor(i = 0; i < TEXT_LENGTH_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(INITIALIZE_NUL== input_text[i])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}*/\n\t\tfor(i = 0; INITIALIZE_NUL != input_text[i] ; i++,text_length++);\n\t\t//text_length--;\n\t\t\n\t\t/*文字を対応する符号に置き換えて連結して一つの配列(barcode)に格納する*/\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].character)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*連結した符号(barcode)の文字列の長さをカウントする*/\n\t\tfor(i = 0; i < CODE_MAX; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif(LAST_CHAR == barcode[barcode_length])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*連結した符号(barcode)を5つ区切りに分ける*/\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < SECTION; j++)\n\t\t\t{\n\t\t\t\tif(element_number < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[element_number];\n\t\t\t\t\telement_number++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*5つ区切りにした個数のカウント*/\n\t\tfor(i = 0; i < CODE_MAX ; i+= SECTION)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcharacter_length = i / SECTION;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*5つ区切りにした文字列と符号の比較を行い、一致したとき対応する文字を出力する*/\n\t\tfor(i = 0; i < character_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < SECTION; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tmatch_count++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(SECTION == match_count)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\", code[j].character);\n\t\t\t\t}\n\t\t\t\tmatch_count = INITIALIZE_INT;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nstruct pair {\n  int n;\n  int w;\n};\ntypedef struct pair st;\nst a[] =\n  { {0x25,6},{0x9a,8},{5,4},{1,4},{6,3},{9,5},{0x9b,8},{0x20,6},{7,4},\n    {0x98,8},{6,4},{4,5},{0x99,8},{0x9e,8},{5,5},{7,3},{0x9f,8},{8,4},\n    {6,5},{7,5},{0x9c,8},{0x9d,8},{2,6},{0x92,8},{0x93,8},{0x90,8},};\nst sp = {5,3};\nst qu = {0,6};\nst co = {3,6};\nst hi = {0x91,8};\nst pe = {0x11,6};\nst qe = {1,6};\nchar b[] = { 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P',\n\t     'Q','R','S','T','U','V','W','X','Y','Z',' ','.',',','-','\\'','?'};\nint main()\n{\n  char c;\n  st s={0,0},t;\n  for(;;){\n    scanf(\"%c\",&c);\n    if(c == '\\n'){\n      if(s.w != 0) {\n\tprintf(\"%c\\n\",b[(s.n << (5 - s.w))]);\n      }\n      break;\n    }\n    switch(c){\n    case ' ': t = sp; break;\n    case '\\'': t = qu; break;\n    case ',': t = co; break;\n    case '-': t = hi; break;\n    case '.': t = pe; break;\n    case '?': t = qe; break;\n    default: t = a[c-'A']; break;\n    }\n    s.n = (s.n << t.w) + t.n;\n    s.w += t.w;\n    while(s.w >= 5){\n      printf(\"%c\",b[(s.n >> (s.w - 5))]);\n      s.n = (s.n & ~(0x1f << (s.w - 5)));\n      s.w -= 5;\n    }\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\nint main()\n{\n\tint c[99],m[99]={6,8,4,4,3,5,8,6,4,8,4,5,8,8,5,3,8,4,5,5,8,8,6,8,8,8,3,6,6,8,6,6},d[99]={37,154,5,1,6,9,155,16,7,152,6,4,153,158,5,7,159,8,6,7,156,157,2,146,147,144,5,0,3,145,17,1},\n\tbuffer=0,t,p=0,i,w[99]={65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,32,46,44,45,39,63};\n\n\tc[32]=26,c[39]=27,c[44]=28,c[45]=29,c[46]=30,c[63]=31;\n\tfor(i=0;i<=25;i++)\n\t\tc[65+i]=i;\n\twhile(t=getchar())\n\t{\n\t\tif(t==10||t==-1)\n\t\t{\n\t\t\tif(p>0)\n\t\t\t\tputchar(w[buffer<<5-p]);\n\t\t\tif(t==-1)\n\t\t\t\tbreak;\n\t\t\tputs(\"\");\n\t\t\tbuffer=p=0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti=c[t];\n\t\t\tbuffer<<=m[i];\n\t\t\tbuffer|=d[i];\n\t\t\tp+=m[i];\n\t\t\tfor(;p>=5;p-=5)\n\t\t\t{\n\t\t\t\tputchar(w[buffer>>p-5]);\n\t\t\t\tbuffer&=~(31<<p-5);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(){\n\tint i,j,k,p,num;\n\tint data[1024];\n\tchar c;\n\tchar str[8][2][33] = {\n\t\t{\"'BEHJKLNRSUWXZ\",\" ,-.?ACDFGIMOPQTVY\"},\n\t\t{\" '-.?ACDFHJLMORUVZ\",\",BEGIKNPQSTWXY\"},\n\t\t{\"',-.?BDFGHJMRWXYZ\",\" ACEIKLNOPQSTUV\"},\n\t\t{\"',-.?ACDHIKLOSTWXYZ\",\"BFGJMNQRUV\"},\n\t\t{\"',?AFLOSTW\",\"-.BGHJMNQUVXYZ\"},\n\t\t{\"',-.?BGHJMNQUVWXYZ\",\"A\"},\n\t\t{\"-BGJMNQUVXYZ\",\"\"},\n\t\t{\"\",\"-BGJMNQUVXYZ\"},\n\t};\n\tchar str2[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n\tp = 0;\n\twhile((c = getc(stdin)) != EOF){\n\t\tfor(i = 7;i >= 0;i--){\n\t\t\tfor(j = 0;j < 2;j++){\n\t\t\t\tfor(k = 0;k < 33;k++){\n\t\t\t\t\tif(str[i][j][k] == c){\n\t\t\t\t\t\tdata[p++] = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(p % 5 != 0){\n\t\twhile(p % 5 != 0){\n\t\t\tdata[p++] = 0;\n\t\t}\n\t}\n\n\tnum = 0;\n\tfor(i = 0;i < p;i++){\n\t\tnum *= 2;\n\t\tnum += data[i];\n\t\tif(i % 5 == 4){\n\t\t\tputchar(str2[num]);\n\t\t\tnum = 0;\n\t\t}\n\t}\n\tputchar('\\n');\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar convtable[32] = {\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n        'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n        'Y', 'Z', ' ', '.', ',', '-', '\\'', '?'\n};\n\nchar * convtable1[32] = {\n        \"100101\",       //\"A\"\n        \"10011010\",     // B\n        \"0101\",         // C\n        \"0001\",         // D\n        \"110\",          // E\n        \"01001\",        // F\n        \"10011011\",     // G\n        \"010000\",       // H\n        \"0111\",         // I\n        \"10011000\",     // J\n        \"0110\",         // K\n        \"00100\",        // L\n        \"10011001\",     // M\n        \"10011110\",     // N\n        \"00101\",        // O\n        \"111\",          // P\n        \"10011111\",     // Q\n        \"1000\",         // R\n        \"00110\",        // S\n        \"00111\",        // T\n        \"10011100\",     // U\n        \"10011101\",     // V\n        \"000010\",       // W\n        \"10010010\",     // X\n        \"10010011\",     // Y\n        \"10010000\",     // Z\n        \"101\",          //' '\n        \"010001\",       //\".\"\n        \"000011\",       //','\n        \"10010001\",     //'-'\n        \"000000\",       //'''\n        \"000001\"        // ?\n};\n\nint main()\n{\n        char str[101];\n        char tmp[10000], *p, *p2, tmp5[6];\n        int strsize, i, wordsize, j = 0, round = 0;\n        while ( fgets( str, 101, stdin ) ) {\n                //printf( \"round %3d => strlen : %3d ::: %s\", round, strlen( str ), str );\n                if ( str[0] == '\\n' ) {\n                        continue;\n                }\n\n                p = str; p2 = tmp;\n                j = 0; round++;\n                strsize = 0;\n                while ( *p != '\\n' && *p != '\\0' ) {\n                        // *pをインクリメントしながら文字符号表に文字か判定する\n                        for ( i = 0 ; i < 32 ; i++ ) {\n                                // 入力文字を符号に変換し連結していく\n                                if ( convtable[i] == *p ) {\n                                        // *pと一致する文字の場合, その符号語分tmpへコピーする\n                                        strncpy( p2, convtable1[i], wordsize = strlen( convtable1[i] ) );\n                                        //printf( \"%c = %s [%d]\\n\", *p, convtable1[i], strlen( convtable1[i] ) );\n                                        // printf( \"%s \", convtable1[i] );\n                                        // tmpへコピーした文字の符号語の長さ分だけアドレスを加算\n                                        p2 += wordsize;\n                                        // 一応符号語文字列の長さを記憶\n                                        strsize += wordsize;\n                                        //*pをインクリメントする\n                                        p++;\n                                        j++;\n                                        break;\n                                }\n                        }\n                }\n\n                // 連結した符号文字列が5の倍数ではない場合, 連結文字列が5の倍数になるように\n                // 0をパディングする\n                while ( strsize % 5 != 0 ) {\n                        *p2 = '0';\n                        p2++;\n                        strsize++;\n                }\n\n                i = 0;\n                p2 = tmp;\n                // 変換した符号語を5文字区切りで変換する\n                while ( i < strsize / 5 ) {\n                        strncpy( tmp5, p2, 5 );\n                        printf( \"%c\", convtable[strtol( tmp5, NULL, 2 )] );\n                        p2 += 5;\n                        i++;\n                }\n                printf( \"\\n\" );\n        }\n        return 0;\n}\n\n"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nchar encode[96][9];\nchar decode[32];\nint main(void){\n\tstrcpy(encode[' '],\"101\");\n\tstrcpy(encode['\\n'],\"\");\n\tstrcpy(encode['\\''],\"000000\");\n\tstrcpy(encode[','],\"000011\");\n\tstrcpy(encode['-'],\"10010001\");\n\tstrcpy(encode['.'],\"010001\");\n\tstrcpy(encode['?'],\"000001\");\n\tstrcpy(encode['A'],\"100101\");\n\tstrcpy(encode['B'],\"10011010\");\n\tstrcpy(encode['C'],\"0101\");\n\tstrcpy(encode['D'],\"0001\");\n\tstrcpy(encode['E'],\"110\");\n\tstrcpy(encode['F'],\"01001\");\n\tstrcpy(encode['G'],\"10011011\");\n\tstrcpy(encode['H'],\"010000\");\n\tstrcpy(encode['I'],\"0111\");\n\tstrcpy(encode['J'],\"10011000\");\n\tstrcpy(encode['K'],\"0110\");\n\tstrcpy(encode['L'],\"00100\");\n\tstrcpy(encode['M'],\"10011001\");\n\tstrcpy(encode['N'],\"10011110\");\n\tstrcpy(encode['O'],\"00101\");\n\tstrcpy(encode['P'],\"111\");\n\tstrcpy(encode['Q'],\"10011111\");\n\tstrcpy(encode['R'],\"1000\");\n\tstrcpy(encode['S'],\"00110\");\n\tstrcpy(encode['T'],\"00111\");\n\tstrcpy(encode['U'],\"10011100\");\n\tstrcpy(encode['V'],\"10011101\");\n\tstrcpy(encode['W'],\"000010\");\n\tstrcpy(encode['X'],\"10010010\");\n\tstrcpy(encode['Y'],\"10010011\");\n\tstrcpy(encode['Z'],\"10010000\");\n\tint n,i,k;\n\tchar type[200],code[10000];\n\tfor(i=0;i<26;i++){decode[i]='A'+i;}\n\tdecode[26]=' ';\n\tdecode[27]='.';\n\tdecode[28]=',';\n\tdecode[29]='-';\n\tdecode[30]='\\'';\n\tdecode[31]='?';\n\twhile(fgets(type,200,stdin)!=NULL){\n\t\tcode[0]='\\0';\n\t\tn=strlen(type);\n\t\tfor(i=0;i<n;i++){strcat(code,encode[type[i]]);}\n\t\tn=strlen(code);\n\t\tfor(i=0;i<n;i+=5){\n\t\t\tk=0;\n\t\t\tif(code[i]=='1')k+=16;\n\t\t\tif(code[i+1]=='1' && i+1<n)k+=8;\n\t\t\tif(code[i+2]=='1' && i+2<n)k+=4;\n\t\t\tif(code[i+3]=='1' && i+3<n)k+=2;\n\t\t\tif(code[i+4]=='1' && i+4<n)k+=1;\n\t\t\tprintf(\"%c\",decode[k]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nint main(){\n\tint i,j,k,p,num;\n\tint data[1024];\n\tchar c;\n\tchar str[8][2][33] = {\n\t\t{\"'BEHJKLNRSUWXZ\",\" ,-.?ACDFGIMOPQTVY\"},\n\t\t{\" '-.?ACDFHJLMORUVZ\",\",BEGIKNPQSTWXY\"},\n\t\t{\"',-.?BDFGHJMRWXYZ\",\" ACEIKLNOPQSTUV\"},\n\t\t{\"',-.?ACDHIKLOSTWXYZ\",\"BFGJMNQRUV\"},\n\t\t{\"',?AFLOSTW\",\"-.BGHJMNQUVXYZ\"},\n\t\t{\"',-.?BGHJMNQUVWXYZ\",\"A\"},\n\t\t{\"-BGJMNQUVXYZ\",\"\"},\n\t\t{\"\",\"-BGJMNQUVXYZ\"},\n\t};\n\tchar str2[33] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\n\tp = 0;\n\twhile((c = getc(stdin)) != EOF){\n\t\tif(c == '\\n'){\n\t\t\tc = ' ';\n\t\t}\n\t\tfor(i = 7;i >= 0;i--){\n\t\t\tfor(j = 0;j < 2;j++){\n\t\t\t\tfor(k = 0;k < 33;k++){\n\t\t\t\t\tif(str[i][j][k] == c){\n\t\t\t\t\t\tdata[p++] = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(p % 5 != 0){\n\t\twhile(p % 5 != 0){\n\t\t\tdata[p++] = 0;\n\t\t}\n\t}\n\n\tnum = 0;\n\tfor(i = 0;i < p;i++){\n\t\tnum *= 2;\n\t\tnum += data[i];\n\t\tif(i % 5 == 4){\n\t\t\tputchar(str2[num]);\n\t\t\tnum = 0;\n\t\t}\n\t}\n\tputchar('\\n');\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 8\n#define CIPHER_NUM 32\n#define NUL 0x00\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\n#define TEXT_MAX 100\n\nint main(void)\n{\n\tshort i = 0;\n\tshort j = 0;\n\n\tshort text_length = 0;\n\tchar input_text[TEXT_MAX];\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000011\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tchar barcode[801];\n\tchar code_fivecut[160][5];\n\t\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"text_length=%d\\n\",text_length);\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//printf(\"barcode = %s\\n\",barcode);\n\t\t\n\t\tint barcode_length = 0;\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"barcode_length =%d\\n\", barcode_length);\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t\t//printf(\"c=%d\\n\",c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor(i = 0;i < 800 ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"count= %d\\n\",count);\n\t\t\n\t\t/*\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tprintf(\"a = %c\",code_fivecut[i][j]);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}*/\n\t\t\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(k = 0; k < CIPHER_NUM; k++)\n\t\t\t{\n\t\t\t\tfor(l = 0; l < 5; l++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][l] == code[k].sign_change_charcter[l])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[k].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\t\n\t\t\n\t\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#define SIZE (30)\n\nconst char *d1[91] = {\n\t[' ']=\"101\", ['\\'']=\"000000\", [',']=\"000011\", ['-']=\"10010001\",\n\t['.']=\"010001\", ['?']=\"000001\", ['A']=\"100101\", ['B']=\"10011010\",\n\t['C']=\"0101\", ['D']=\"0001\", ['E']=\"110\", ['F']=\"01001\",\n\t['G']=\"10011011\", ['H']=\"010000\", ['I']=\"0111\", ['J']=\"10011000\",\n\t['K']=\"0110\", ['L']=\"00100\", ['M']=\"10011001\", ['N']=\"10011110\",\n\t['O']=\"00101\", ['P']=\"111\", ['Q']=\"10011111\", ['R']=\"1000\",\n\t['S']=\"00110\", ['T']=\"00111\", ['U']=\"10011100\", ['V']=\"10011101\",\n\t['W']=\"000010\", ['X']=\"10010010\", ['Y']=\"10010011\", ['Z']=\"10010000\"\n};\nconst char *d2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint bin2dec(char bin_list[SIZE]) {\n\treturn ((bin_list[0]-'0') * 16 + (bin_list[1]-'0') * 8 +\n\t\t\t(bin_list[2]-'0') * 4 + (bin_list[3]-'0') * 2 +\n\t\t\t(bin_list[4]-'0'));\n}\n\nvoid line_end(char bin_list[SIZE]) {\n\tif (strlen(bin_list) > 0) {\n\t\tstrncat(bin_list, \"0000\", SIZE);\n\t\tputchar(d2[bin2dec(bin_list)]);\n\t}\n\tputchar('\\n');\n\tmemset(bin_list, 0, sizeof(char)*SIZE);\n}\n\nint main(void) {\n\tint c = 0, end = 0;\n\tchar bin_list[SIZE] = \"\", tmp[SIZE];\n\n\twhile (1) {\n\t\tc = getchar();\n\t\tif (c == EOF) {\n\t\t\tif (!end)\n\t\t\t\tline_end(bin_list);\n\t\t\tbreak;\n\t\t}\n\t\tif (c == '\\n') {\n\t\t\tline_end(bin_list);\n\t\t\tend = 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (c == '\\r')\n\t\t\tcontinue;\n\t\tend = 0;\n\t\tstrncat(bin_list, d1[c], SIZE);\n\t\tif (strlen(bin_list) >= 5) {\n\t\t\tputchar(d2[bin2dec(bin_list)]);\n\t\t\tstrncpy(tmp, bin_list+5, SIZE);\n\t\t\tstrncpy(bin_list, tmp, SIZE);\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define CODE_MAX 801\n#define NUL 0x00\n#define INITIALIZE 0\n#define TEXT_LENGTH_MAX 101\n#define FIVE 5\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[FIVE + 1];\n\tchar charcter;\n}CIPHER;\n\nint main(void)\n{\n\t\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\", \"00000\", 'A'},\n\t\t{\"10011010\", \"00001\", 'B'},\n\t\t{\"0101\", \"00010\", 'C'},\n\t\t{\"0001\", \"00011\", 'D'},\n\t\t{\"110\", \"00100\", 'E'},\n\t\t{\"01001\", \"00101\", 'F'},\n\t\t{\"10011011\", \"00110\", 'G'},\n\t\t{\"010000\", \"00111\", 'H'},\n\t\t{\"0111\", \"01000\", 'I'},\n\t\t{\"10011000\", \"01001\", 'J'},\n\t\t{\"0110\", \"01010\", 'K'},\n\t\t{\"00100\", \"01011\", 'L'},\n\t\t{\"10011001\", \"01100\", 'M'},\n\t\t{\"10011110\", \"01101\", 'N'},\n\t\t{\"00101\", \"01110\", 'O'},\n\t\t{\"111\", \"01111\", 'P'},\n\t\t{\"10011111\", \"10000\", 'Q'},\n\t\t{\"1000\", \"10001\", 'R'},\n\t\t{\"00110\", \"10010\", 'S'},\n\t\t{\"00111\", \"10011\", 'T'},\n\t\t{\"10011100\", \"10100\", 'U'},\n\t\t{\"10011101\", \"10101\", 'V'},\n\t\t{\"000010\", \"10110\", 'W'},\n\t\t{\"10010010\", \"10111\", 'X'},\n\t\t{\"10010011\", \"11000\", 'Y'},\n\t\t{\"10010000\", \"11001\", 'Z'},\n\t\t{\"101\", \"11010\", ' '},\n\t\t{\"010001\", \"11011\", '.'},\n\t\t{\"000011\", \"11100\", ','},\n\t\t{\"10010001\", \"11101\", '-'},\n\t\t{\"000000\", \"11110\", '\\''},\n\t\t{\"000001\", \"11111\", '?'}\n\t};\n\t\n\tunsigned short i = INITIALIZE;\n\tunsigned short j = INITIALIZE;\n\tunsigned short k = INITIALIZE;\n\tchar input_text[TEXT_LENGTH_MAX];\n\t\n\t\n\tfor(i = 0; i < TEXT_LENGTH_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tunsigned short text_length = INITIALIZE;\n\t\tunsigned short barcode_length = INITIALIZE;\n\t\tunsigned short count = INITIALIZE;\n\t\tunsigned short c = 0;\n\t\tunsigned short cc = 0;\n\t\tchar barcode[CODE_MAX];\n\t\tchar code_fivecut[CODE_MAX / FIVE][FIVE];/*160:5*/\n\t\t\n\t\tfor(i = 0; i < CODE_MAX - 1; i++)//配列の最後(800番目)には\\0が入るためマイナス1してある\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX / FIVE;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < TEXT_LENGTH_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < FIVE; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0;i < CODE_MAX ; i+= FIVE)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / FIVE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < FIVE; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == FIVE)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[j].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint main(void)\n{\n\tchar before[32][9] = { \n\t\t\"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\",\n\t\t\"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\",\n\t\t\"10010010\", \"10010011\", \"10010000\", \"101\", \"000000\", \"000011\",\n\t\t\"10010001\", \"010001\", \"000001\"\n\t};\n\tchar after[32][6] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\",\n\t\t\"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\",\n\t\t\"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\",\n\t\t\"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\",\n\t\t\"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\t\n\tchar str[128], str2[128];\n\tint i, j, len;\n\t\n\twhile (gets(str) != NULL){\n\t\tfor (i = 0; i < 128; i++){\n\t\t\tstr2[i] = '\\0';\n\t\t}\n\t\t\n\t\ti = 0;\n\t\twhile (str[i] != '\\0'){\n\t\t\tif (str[i] >= 'A' && str[i] <= 'Z'){\n\t\t\t\tstrcat(str2, before[str[i] - 'A']);\n\t\t\t}\n\t\t\tswitch (str[i]){\n\t\t\t\tcase ' ':\n\t\t\t\tstrcat(str2, before[26]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '.':\n\t\t\t\tstrcat(str2, before[27]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase ',':\n\t\t\t\tstrcat(str2, before[28]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '-':\n\t\t\t\tstrcat(str2, before[29]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '\\'':\n\t\t\t\tstrcat(str2, before[30]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '?':\n\t\t\t\tstrcat(str2, before[31]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tlen = strlen(str2);\n\t\twhile (len % 5 != 0){\n\t\t\tstrcat(str2, \"0\");\n\t\t\tlen++;\n\t\t}\n\t\t\n\t\ti = 0;\n\t\twhile (len - i > 0){\n\t\t\tfor (j = 0; j < 32; j++){\n\t\t\t\tif (strncmp(&str2[i], after[j], 5) == 0){\n\t\t\t\t\tif (j >= 0 && j <= 25){\n\t\t\t\t\t\tprintf(\"%c\", j + 'A');\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tswitch (j){\n\t\t\t\t\t\t\tcase 26:\n\t\t\t\t\t\t\tprintf(\" \");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 27:\n\t\t\t\t\t\t\tprintf(\".\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 28:\n\t\t\t\t\t\t\tprintf(\",\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 29:\n\t\t\t\t\t\t\tprintf(\"-\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 30:\n\t\t\t\t\t\t\tprintf(\"\\'\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 31:\n\t\t\t\t\t\t\tprintf(\"?\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\ti += 5;\n\t\t}\n\t\t\n\t\tputs(\"\");\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "/*\nAizuOnline A0088\nThe Code A Doctor Loved\n*/\n#include <stdio.h>\n// Select Below\n//#include <stdlib.h>\n#include <string.h>\n//#include <float.h>\n//#include <math.h>\n//Global data section\n\nchar heibun[1000];\nchar s1[10000];\nchar s2[2000];\n\nchar *step1table[]={\n//  SP ' , - . ?\n        \"101\",\n\t\"000000\",\n\t\"000011\",\n\t\"10010001\",\n\t\"010001\",\n\t\"000001\",\n// A-B\n\t\"100101\",\n\t\"10011010\",\n// C-J\n\t\"0101\",\n\t\"0001\",\n\t\"110\",\n\t\"01001\",\n\t\"10011011\",\n\t\"010000\",\n\t\"0111\",\n\t\"10011000\",\n// K-R\n\t\"0110\",\n\t\"00100\",\n\t\"10011001\",\n\t\"10011110\",\n\t\"00101\",\n\t\"111\",\n\t\"10011111\",\n\t\"1000\",\n// S-Z\n\t\"00110\",\n\t\"00111\",\n\t\"10011100\",\n\t\"10011101\",\n\t\"000010\",\n\t\"10010010\",\n\t\"10010011\",\n\t\"10010000\"};\nint conv(char c)\n{\n  //printf(\"%c\",c);\n  char *x;\n  char compared[] = \" ',-.?\";\n  if(NULL != (x = strchr(compared,c)))\n    return(x - compared);\n  return(c - 'A' + 6);    \n}\nvoid step1()\n{\n  char *s,c;\n\n  s=heibun;\n  s1[0]='\\0';\n  while(c=*s++)\n    {\n      //printf(\"%c %s\\n\",c,step1table[conv(c)]);\n      strcat(s1,step1table[conv(c)]);\n    }\n  strcat(s1,\"0000\");\n}\nint conv5bin(char *s)\n{\n  //printf(\"%5s\\n\",s);\n  int sum;\n  sum  = (s[0]=='1')?16:0;\n  sum += (s[1]=='1')?8:0;\n  sum += (s[2]=='1')?4:0;\n  sum += (s[3]=='1')?2:0;\n  sum += (s[4]=='1')?1:0;\n  return(sum);\n}\nvoid step2()\n{\n  int s2ptr;\n  int i;\n\n  s2ptr=0;\n  for(i=0;i<strlen(s1);i+=5)\n    s2[s2ptr++]=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[conv5bin(&(s1[i]))];\n  s2ptr='\\0';\n}\nmain()\n{\n  int i;\n\n  while(NULL != gets(heibun))\n    {\n      \n      for(i=0;i<2000;i++)\n\ts2[i]='\\0';\n      \n\n      step1();\n      step2();\n\n\n      //printf(\"%s\\n\",s1);\n      printf(\"%s\\n\",s2);\n    }\nreturn(0);\n}"
  },
  {
    "language": "C",
    "code": "char*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",*strchr(),*L=\"68443586484588538455886888366866\";\nunsigned char B[]={\n\t0x25,0x9a,0x05,0x01,0x06,0x09,0x9b,0x10,0x07,0x98,0x06,0x04,0x99,0x9e,0x05,0x07,\n\t0x9f,0x08,0x06,0x07,0x9c,0x9d,0x02,0x92,0x93,0x90,0x05,0x11,0x03,0x91,0x00,0x01\n};\nb,l;\nmain(c){\n\tfor(;c=getchar(),c+1;)\n\t\tif(c-10)\n\t\t\tfor(c=strchr(C,c)-C,b=b<<(L[c]-48)|B[c],l+=L[c]-48;l>4;putchar(C[b>>l&31]))\n\t\t\t\tl-=5;\n\t\telse l&&putchar(C[(b<<=5-l)&31]),l=0,putchar(c);\n\texit(0);\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define CODE_MAX 801\n#define NUL 0x00\n#define INITIALIZE 0\n#define TEXT_MAX 101\n#define FIVE 5\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\nint main(void)\n{\n\tunsigned short i = INITIALIZE;\n\tunsigned short j = INITIALIZE;\n\tunsigned short k = INITIALIZE;\n\tunsigned short text_length = INITIALIZE;\n\tunsigned short barcode_length = INITIALIZE;\n\tunsigned int count = INITIALIZE;\n\tint c = 0;\n\tint cc = 0;\n\t\n\tchar input_text[TEXT_MAX];\n\tchar barcode[CODE_MAX];\n\tchar code_fivecut[CODE_MAX / FIVE][FIVE];/*160:5*/\n\t\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < CODE_MAX - 1; i++)//配列の最後(800番目)には\\0が入るためマイナス1してある\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX / FIVE;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < FIVE; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0;i < CODE_MAX ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < FIVE; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[j].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint BinaryToNo(char s[])\n{\n\tint ans;\n\t\n\tans = (s[0] - '0') * 16 + (s[1] - '0') * 8 + (s[2] - '0') * 4 + (s[3] - '0') * 2 + (s[4] - '0');\n\t\n\treturn (ans);\n}\n\nint main(void)\n{\n\tchar str[1000];\n\tchar code1[32][12] = {\n\t\t\"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\",\n\t\t\"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\",\n\t\t\"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tchar code2[32] = {\n\t\t'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n\t\t'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n\t\t'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n\t\t'Y', 'Z', ' ', '.', ',', '-', 39, '?'\n\t};\n\tint i;\n\tint code;\n\tchar str2[1000];\n\tchar *p;\n\t\n\t\n\twhile (fgets(str, 1000, stdin) != NULL){\n\t\tstr2[0] = '\\0';\n\t\tstr[strlen(str) - 1] = '\\0';\n\t\tfor (i = 0; i < strlen(str); i++){\n\t\t\tswitch (str[i]){\n\t\t\t  case ' ':\n\t\t\t  \tcode = 0;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t  case 39:\n\t\t\t  \tcode = 1;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t  case ',':\n\t\t\t  \tcode = 2;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t  case '-':\n\t\t\t  \tcode = 3;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t  case '.':\n\t\t\t  \tcode = 4;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t  case '?':\n\t\t\t  \tcode = 5;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t  default:\n\t\t\t  \tcode = str[i] - 'A' + 6;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tstrcat(str2, code1[code]);\n\t\t}\n\t\t\n\t\tif (strlen(str2) % 5 != 0){\n\t\t\tfor (i = 0; i < strlen(str2) % 5; i++){\n\t\t\t\tstrcat(str2, \"0\");\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tp = str2;\n\t\twhile (*p != '\\0'){\n\t\t\tprintf(\"%c\", code2[BinaryToNo(p)]);\n\t\t\t\n\t\t\tp += 5;\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  char *p;\n  i = 0;\n  while(gets(e)) {\n    j = 0;\n    while(e[j]) d[i++] = e[j++];\n    d[i++] = ' ';\n  }\n  d[i - 1] = '\\0';\n  e[0] = '\\0';\n  i = 0;\n  j = 0;\n  while(d[i]) {\n    p = b[strchr(a,d[i++]) - a];\n    while(*p) e[j++] = *p++;\n  }\n  i = 5 - j % 5;\n  while(i--) e[j++] = '0';\n  e[j] = '\\0';\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nint main(){\n\tdouble a[3][3];\n\tdouble x;\n\tint b;\n\twhile(scanf(\"%lf %lf %lf %lf %lf %lf\",&a[0][0],&a[0][1],&a[0][2],&a[1][0],&a[1][1],&a[1][2])!=EOF){\n\t\ta[0][1]/=a[0][0];\n\t\ta[0][2]/=a[0][0];\n\t\ta[0][0]/=a[0][0];\n\t\tx=a[1][0]/a[0][0];\n\t\ta[1][0]-=x*a[0][0];\n\t\ta[1][1]-=x*a[0][1];\n\t\ta[1][2]-=x*a[0][2];\n\t\ta[1][2]/=a[1][1];\n\t\ta[1][0]/=a[1][1];\n\t\ta[1][1]/=a[1][1];\n\t\tx=a[0][1]/a[1][1];\n\t\ta[0][0]-=x*a[1][0];\n\t\ta[0][1]-=x*a[1][1];\n\t\ta[0][2]-=x*a[1][2];\n\t\tprintf(\"%.3f %.3f\\n\",a[0][2],a[1][2]);\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "I[]={17144357,278595846,67540999,117808793,117835935,0x92029d9c,285577363,16814339};unsigned char*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",*strchr(),*L=\"68443586484588538455886888366866\",*B=I;b,l;main(c){for(;c=getchar(),c+1;)if(c-10)for(c=strchr(C,c)-C,b=b<<(L[c]-48)|B[c],l+=L[c]-48;l>4;putchar(C[b>>l&31]))l-=5;else l&&putchar(C[(b<<=5-l)&31]),l=0,putchar(c);exit(0);}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\nint main(){\n  int i;\n  int len;\n  char s[1024],t[8192],u[6];\n  while(fgets(s,1024,stdin)!=0){\n    s[strlen(s)-1]=0;\n    t[0]=0;\n    len=strlen(s);\n    for(i=0;i<len;i++){\n      switch(s[i]){\n      case 'A':sprintf(t,\"%s100101\",t);break;\n      case 'B':sprintf(t,\"%s10011010\",t);break;\n      case 'C':sprintf(t,\"%s0101\",t);break;\n      case 'D':sprintf(t,\"%s0001\",t);break;\n      case 'E':sprintf(t,\"%s110\",t);break;\n      case 'F':sprintf(t,\"%s01001\",t);break;\n      case 'G':sprintf(t,\"%s10011011\",t);break;\n      case 'H':sprintf(t,\"%s010000\",t);break;\n      case 'I':sprintf(t,\"%s0111\",t);break;\n      case 'J':sprintf(t,\"%s10011000\",t);break;\n      case 'K':sprintf(t,\"%s0110\",t);break;\n      case 'L':sprintf(t,\"%s00100\",t);break;\n      case 'M':sprintf(t,\"%s10011001\",t);break;\n      case 'N':sprintf(t,\"%s10011110\",t);break;\n      case 'O':sprintf(t,\"%s00101\",t);break;\n      case 'P':sprintf(t,\"%s111\",t);break;\n      case 'Q':sprintf(t,\"%s10011111\",t);break;\n      case 'R':sprintf(t,\"%s1000\",t);break;\n      case 'S':sprintf(t,\"%s00110\",t);break;\n      case 'T':sprintf(t,\"%s00111\",t);break;\n      case 'U':sprintf(t,\"%s10011100\",t);break;\n      case 'V':sprintf(t,\"%s10011101\",t);break;\n      case 'W':sprintf(t,\"%s000010\",t);break;\n      case 'X':sprintf(t,\"%s10010010\",t);break;\n      case 'Y':sprintf(t,\"%s10010011\",t);break;\n      case 'Z':sprintf(t,\"%s10010000\",t);break;\n      case ' ':sprintf(t,\"%s101\",t);break;\n      case 39 :sprintf(t,\"%s000000\",t);break;\n      case ',':sprintf(t,\"%s000011\",t);break;\n      case '-':sprintf(t,\"%s10010001\",t);break;\n      case '.':sprintf(t,\"%s010001\",t);break;\n      case '?':sprintf(t,\"%s000001\",t);break;\n      }\n    }\n    len=strlen(t);\n    for(i=0;i<(5-len%5)%5;i++)\n      sprintf(t,\"%s0\",t);\n    len=strlen(t);\n    for(i=0;i<len;i+=5){\n      switch(atoi(strncpy(u,t+i,5))){\n      case 0:printf(\"A\");break;\n      case 1:printf(\"B\");break;\n      case 10:printf(\"C\");break;\n      case 11:printf(\"D\");break;\n      case 100:printf(\"E\");break;\n      case 101:printf(\"F\");break;\n      case 110:printf(\"G\");break;\n      case 111:printf(\"H\");break;\n      case 1000:printf(\"I\");break;\n      case 1001:printf(\"J\");break;\n      case 1010:printf(\"K\");break;\n      case 1011:printf(\"L\");break;\n      case 1100:printf(\"M\");break;\n      case 1101:printf(\"N\");break;\n      case 1110:printf(\"O\");break;\n      case 1111:printf(\"P\");break;\n      case 10000:printf(\"Q\");break;\n      case 10001:printf(\"R\");break;\n      case 10010:printf(\"S\");break;\n      case 10011:printf(\"T\");break;\n      case 10100:printf(\"U\");break;\n      case 10101:printf(\"V\");break;\n      case 10110:printf(\"W\");break;\n      case 10111:printf(\"X\");break;\n      case 11000:printf(\"Y\");break;\n      case 11001:printf(\"Z\");break;\n      case 11010:printf(\" \");break;\n      case 11011:printf(\".\");break;\n      case 11100:printf(\",\");break;\n      case 11101:printf(\"-\");break;\n      case 11110:printf(\"'\");break;\n      case 11111:printf(\"?\");break;\n      }\n    }\n    puts(\"\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\nint main(){\n  char c[]={\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\"};\n  char w[][9]={\n    \"101\"     ,\n    \"000000\"  , \n    \"000011\"  ,\n    \"10010001\",\n    \"010001\"  ,\n    \"000001\"  ,\n    \"100101\"  ,\n    \"10011010\",\n    \"01010\"   ,\n    \"0001\"    ,\n    \"110\"     ,\n    \"01001\"   ,\n    \"10011011\",\n    \"010000\"  ,\n    \"0111\"    ,\n    \"10011000\",\n    \"0110\"    ,\n    \"00100\"   ,\n    \"10011001\",\n    \"10011110\",\n    \"00101\"   ,\n    \"111\"     ,\n    \"1001111\" ,\n    \"1000\"    ,\n    \"00110\"   ,\n    \"00111\"   ,\n    \"10011100\",\n    \"10011101\",\n    \"000010\"  ,\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n  };\n  char n[100];\n  char s[900]={0};\n  int i,j;\n  while(fgets(n,101,stdin)!=NULL){\n    for(i=0;n[i]!=10;i++){\n      for(j=0;n[i]!=c[j];j++);\n      strcat(s,w[j]);\n    }//printf(\"%s\\n\",s);\n    for(i=j=0;s[i];i++){\n      j*=2;\n      if(s[i]=='1')j++;\n      if(i%5==4){\n\tprintf(\"%c\",c[(j+6)%32]);\n\tj=0;\n      }\n    }\n    for(;i%5!=4;i++)j*=2;\n    printf(\"%c\\n\",c[(j+6)%32]);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[4096];\n  unsigned char *p;\n  i = 0;\n  while((k = getc(stdin)) != EOF);\n  /* {\n    j = 0;\n    while(*(a + j) != k) j++;\n    p = b[j];\n    while(*p) d[i++] = *p++;\n  }\n  j = 5 - i % 5;\n  while(j--) d[i++] = '0';\n  d[i] = '\\0';\n  i = 0;\n  while(d[i]) {\n    j = 0;\n    k = 4;\n    do {\n      j += (d[i++] - '0') << k;\n    } while(k--);\n    putc(*(c + j),stdout);\n  }\n  */\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  d[0] = '\\0';\n  while(gets(e)) {\n    strcat(d,e);\n    strcat(d,\" \");\n  }\n  d[strlen(d) - 1] = '\\0';\n  e[0] = '\\0';\n  i = 0;\n  while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n  i = 5 - strlen(e) % 5;\n  while(i--) strcat(e,\"0\");\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define NUM_OF_CHAR\t\t(32)\n#define LEN_OF_CODESTR1\t(8)\n#define LEN_OF_CODESTR2\t(5)\n\n#define STRCMP_MATCH\t(0)\n\nchar charToCodeTable[2][ NUM_OF_CHAR ][ LEN_OF_CODESTR1 + 1 ] =\n{\n\t{\n\t\t\" \", \"'\", \",\", \"-\", \".\", \"?\", \"A\", \"B\",\n\t\t\"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\",\n\t\t\"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n\t\t\"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n\t},\n\t{\n\t\t\"101\",\t\t\"000000\",\t\"000011\",\t\"10010001\",\t\"010001\",\t\"000001\",\t\"100101\",\t\"10011010\",\n\t\t\"0101\",\t\t\"0001\",\t\t\"110\",\t\t\"01001\",\t\"10011011\",\t\"010000\",\t\"0111\",\t\t\"10011000\",\n\t\t\"0110\",\t\t\"00100\",\t\"10011001\",\t\"10011110\",\t\"00101\",\t\"111\",\t\t\"10011111\",\t\"1000\",\n\t\t\"00110\",\t\"00111\",\t\"10011100\",\t\"10011101\",\t\"000010\",\t\"10010010\",\t\"10010011\",\t\"10010000\"\n\t}\n};\n\nchar codeToCharTable[2][ NUM_OF_CHAR ][ LEN_OF_CODESTR2 + 1 ] = \n{\n\t{\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"\n\t},\n\t{\n\t\t\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n\t\t\"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\",\n\t\t\"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\",\n\t\t\"Y\", \"Z\", \" \", \".\", \",\", \"-\", \"'\", \"?\"\n\t}\n};\n\n//inputに対応するコードをoutCodeに格納\nvoid charToCode( char input, char* outCode );\n\n//inCodeに対応する文字を返す\nchar codeToChar( char* inCode );\n\n//inputの最初から5文字までをoutputに格納\nint get5LengthCode( char* input, char* output );\n\n//shiftNumberの数だけinputをずらした文字列をoutputに格納\nvoid shiftString( char* input, char* output, int shiftNumber );\n\nint main( void )\n{\n\t/*入力された文字を受け取る*/\n\tchar ch;\n\t/*出力されたコードを受け取る*/\n\tchar getedCode[ LEN_OF_CODESTR2 + 1 ] = {'\\0'};\n\t/*出力されたコードを５文字以上になるまでためておくバッファ*/\n\tchar codeBuffer[ LEN_OF_CODESTR1 * 2 + 1 ] = {'\\0'};\n\t\n\t//入力の終わりまで\n\twhile( scanf( \"%c\", &ch ) != EOF )\n\t{\n\t\tif( ch != '\\n' )\n\t\t{\n\t\t\tcharToCode( ch, codeBuffer );\n\t\t\tif( strlen( codeBuffer ) >= 5 )\n\t\t\t{\n\t\t\t\tget5LengthCode( codeBuffer, getedCode );\n\t\t\t\tshiftString( codeBuffer, codeBuffer, 5 );\n\t\t\t\tprintf( \"%c\", codeToChar( getedCode ) );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif( strlen( codeBuffer ) > 0 )\n\t\t\t{\n\t\t\t\tget5LengthCode( codeBuffer, getedCode );\n\t\t\t\tshiftString( codeBuffer, codeBuffer, 5 );\n\t\t\t\tprintf( \"%c\", codeToChar( getedCode ) );\n\t\t\t}\n\t\t\tprintf( \"\\n\" );\n\t\t\t\n\t\t\tstrcpy( codeBuffer, \"\" );\n\t\t\tstrcpy( getedCode, \"\" );\n\t\t}\n\t}\n\t\n\treturn (0);\n}\n\nvoid charToCode( char input, char* outCode )\n{\n\tchar inStr[2];\n\tint i;\n\t\n\tinStr[0] = input;\n\tinStr[1] = '\\0';\n\t\n\tfor( i = 0; i < NUM_OF_CHAR; i++ )\n\t{\n\t\tif( strcmp( inStr, charToCodeTable[0][i] ) == STRCMP_MATCH )\n\t\t{\n\t\t\tstrcat( outCode, charToCodeTable[1][i] );\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nchar codeToChar( char inCode[5] )\n{\n\tint i;\n\tchar result;\n\tfor( i = 0; i < NUM_OF_CHAR; i++ )\n\t{\n\t\tif( strcmp( inCode, codeToCharTable[0][i] ) == STRCMP_MATCH )\n\t\t{\n\t\t\tresult = codeToCharTable[1][i][0];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn (result);\n}\n\nint get5LengthCode( char* input, char* output )\n{\n\tint i;\n\tfor( i = 0; i < 5; i++ )\n\t{\n\t\tif( input[i] == '\\0' )break;\n\t\toutput[i] = input[i];\n\t}\n\tif( i == 0 )\n\t{\n\t\toutput[i] = '\\0';\n\t\treturn (-1);\n\t}\n\tfor( ; i < 5; i++ )\n\t{\n\t\toutput[i] = '0';\n\t}\n\t\n\treturn (1);\n}\n\nvoid shiftString( char* input, char* output, int shiftNumber )\n{\n\tint i;\n\tfor( i = 0; i < input[i + shiftNumber] != '\\0'; i++ )\n\t{\n\t\toutput[i] = input[i + shiftNumber];\n\t}\n\toutput[i] = '\\0';\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nchar* to_code(char c) {\n\tswitch(c) {\n\t\tcase ' ': return \"101\";\n\t\tcase '\\'': return \"000000\";\n\t\tcase ',': return \"000011\";\n\t\tcase '-': return \"10010001\";\n\t\tcase '.': return \"010001\";\n\t\tcase '?': return \"000001\";\n\t\tcase 'A': return \"100101\";\n\t\tcase 'B': return \"10011010\";\n\t\tcase 'C': return \"0101\";\n\t\tcase 'D': return \"0001\";\n\t\tcase 'E': return \"110\";\n\t\tcase 'F': return \"01001\";\n\t\tcase 'G': return \"10011011\";\n\t\tcase 'H': return \"010000\";\n\t\tcase 'I': return \"0111\";\n\t\tcase 'J': return \"10011000\";\n\t\tcase 'K': return \"0110\";\n\t\tcase 'L': return \"00100\";\n\t\tcase 'M': return \"10011001\";\n\t\tcase 'N': return \"10011110\";\n\t\tcase 'O': return \"00101\";\n\t\tcase 'P': return \"111\";\n\t\tcase 'Q': return \"10011111\";\n\t\tcase 'R': return \"1000\";\n\t\tcase 'S': return \"00110\";\n\t\tcase 'T': return \"00111\";\n\t\tcase 'U': return \"10011100\";\n\t\tcase 'V': return \"10011101\";\n\t\tcase 'W': return \"000010\";\n\t\tcase 'X': return \"10010010\";\n\t\tcase 'Y': return \"10010011\";\n\t\tcase 'Z': return \"10010000\";\n\t}\n\treturn \"\";\n}\n\nchar to_char(char* s) {\n\tint i, n;\n\tfor(i = 0, n = 0; i < 5; i++) {\n\t\tn <<= 1;\n\t\tn += s[i] - '0';\n\t}\n\n\tif(n < 26)\n\t\treturn 'A' + n;\n\n\tswitch(n) {\n\t\tcase 26: return ' ';\n\t\tcase 27: return '.';\n\t\tcase 28: return ',';\n\t\tcase 29: return '-';\n\t\tcase 30: return '\\'';\n\t\tcase 31: return '?';\n\t}\n\treturn '\\0';\n}\n\nint main() {\n\tint c;\n\tchar in[32];\n\tint head = 0, tail = 0;\n\tint i;\n\n\twhile(1) {\n\t\thead = tail = 0;\n\t\twhile((c = getchar()) != '\\n') {\n\t\t\tchar* code;\n\t\t\tint len;\n\n\t\t\tif(c == EOF)\n\t\t\t\treturn 0;\n\n\t\t\tcode = to_code(c);\n\t\t\tlen = strlen(code);\n\n\t\t\tfor(i = 0; i < len; i++) {\n\t\t\t\tin[tail] = code[i];\n\t\t\t\ttail = (tail + 1) % 32;\n\t\t\t}\n\n\t\t\twhile(((tail < head ? 32 : 0) + tail - head) / 5) {\n\t\t\t\tchar tmp[8];\n\t\t\t\tfor(i = 0; i < 5; i++) {\n\t\t\t\t\ttmp[i] = in[head];\n\t\t\t\t\thead = (head + 1) % 32;\n\t\t\t\t}\n\t\t\t\ttmp[5] = '\\0';\n\n\t\t\t\tputchar(to_char(tmp));\n\t\t\t}\n\t\t}\n\n\t\twhile(((tail < head ? 32 : 0) + tail - head) % 5) {\n\t\t\tin[tail] = '0';\n\t\t\ttail = (tail + 1) % 32;\n\t\t}\n\n\t\twhile(((tail < head ? 32 : 0) + tail - head) / 5) {\n\t\t\tchar tmp[8];\n\t\t\tfor(i = 0; i < 5; i++) {\n\t\t\t\ttmp[i] = in[head];\n\t\t\t\thead = (head + 1) % 32;\n\t\t\t}\n\t\t\ttmp[5] = '\\0';\n\n\t\t\tputchar(to_char(tmp));\n\t\t}\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#define CODE_MAX 10000\n\nint p = 0, p2 = 0;\nshort code[CODE_MAX];\n\n/* letter -> code */\n\n#define BIT_MAX 8\n\nchar* list1[8][2]={\n     {\"',?DW.CFHLOSTIK\", \"-ABGJMNQRUVXYZE P\"},\n     {\"-ABGJMNQRUVXYZ ',?DWLOST\", \"EP.CFHIK\"},\n     {\"E.CFH-ABGJMNQRUVXYZ',?DW\", \"PIK LOST\"},\n     {\"KLO.FHR',?W\", \"ISTC-ABGJMNQUVXYZD\"},\n     {\"S-AXYZL.H'?\", \"TBGJMNQUVOF,W\"},\n     {\"BGJMW-XYZH'\", \"NQUV,A.?\"},\n     {\"UVJM-Z\", \"NQBGXY\"},\n     {\"NBXUJZ\", \"QGYVM-\"}\n};\n\nvoid l2c(char ch)\n{\n     int i, j, k;\n     \n     for(i=0; i<BIT_MAX; i++)\n\t  for(j=0; j<2; j++)\n\t       for(k=0; list1[i][j][k]!='\\0'; k++)\n\t\t    if(list1[i][j][k]==ch)\n\t\t\t code[p++]=j;\n}\n\n/* code -> letter */\n\n#define BIT_MAX2 5\n\nchar* list2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nchar c2l()\n{\n     int t = 0, i;\n     \n     for(i=0; i<BIT_MAX2; i++)\n\t  t = (t<<1) + code[p2++];\n     \n     return list2[t];\n}\n\n/* main */\n\nmain()\n{\n     int i; char ch;\n     \n     for(i=0; i<CODE_MAX; i++) code[i]=0;\n\n     while((ch=getchar())!=EOF){\n\t  if(ch=='\\n') ch=' ';\n\t  l2c(ch);\n     }\n\n     while(p2<p) putchar(c2l());\n     \n     puts(\"\");\n\n     return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 8\n#define CIPHER_NUM 32\n#define NUL 0x00\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\n#define TEXT_MAX 100\n\nint main(void)\n{\n\tshort i = 0;\n\tshort j = 0;\n\n\tshort text_length = 0;\n\tchar input_text[TEXT_MAX];\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tchar barcode[801];\n\tchar code_fivecut[160][5];\n\t\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"text_length=%d\\n\",text_length);\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//printf(\"barcode = %s\\n\",barcode);\n\t\t\n\t\tint barcode_length = 0;\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"barcode_length =%d\\n\", barcode_length);\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t\t//printf(\"c=%d\\n\",c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor(i = 0;i < 800 ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"count= %d\\n\",count);\n\t\t\n\t\t/*\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tprintf(\"a = %c\",code_fivecut[i][j]);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}*/\n\t\t\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(k = 0; k < CIPHER_NUM; k++)\n\t\t\t{\n\t\t\t\tfor(l = 0; l < 5; l++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][l] == code[k].sign_change_charcter[l])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[k].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\t\n\t\t\n\t\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nchar *encode[] = {\n\t\"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \n\t\"01001\", \"10011011\", \"010000\", \"01111\", \"10011000\", \n\t\"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \n\t\"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \n\t\"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \n\t\"10010000\", \"101\", \"000000\", \"000011\", \"10010001\", \n\t\"010001\", \"000001\", \n};\n\nchar *decode[] = {\n\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \n\t\"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \n\t\"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \n\t\"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \n\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \n\t\"11110\", \"11111\", \n};\n\nint main(void)\n{\n\tchar str[128];\n\t\n\twhile (fgets(str, 120, stdin) != NULL){\n\t\tint i, j;\n\t\tchar s[1024] = {0};\n\t\tint enc;\n\t\t\n\t\tfor (i = j = 0; str[i] != '\\n'; i++){\n\t\t\tswitch (str[i]){\n\t\t\t\tcase ' ': enc = 26; break;\n\t\t\t\tcase '\\'': enc = 27; break;\n\t\t\t\tcase ',': enc = 28; break;\n\t\t\t\tcase '-': enc = 29; break;\n\t\t\t\tcase '.': enc = 30; break;\n\t\t\t\tcase '?': enc = 31; break;\n\t\t\t\tdefault: enc = str[i] - 'A'; break;\n\t\t\t}\n\t\t\tsprintf(s + j, \"%s\", encode[enc]);\n\t\t\tj += strlen(encode[enc]);\n\t\t}\n\t\twhile (strlen(s) % 5 != 0) s[j++] = '0';\n\t\t\n\t\tfor (i = 0; s[i] != 0; i += 5){\n\t\t\tfor (j = 0; j < 32; j++){\n\t\t\t\tif (strncmp(s + i, decode[j], 5) == 0){\n\t\t\t\t\tswitch (j){\n\t\t\t\t\t\tcase 26: putchar(' '); break;\n\t\t\t\t\t\tcase 27: putchar('.'); break;\n\t\t\t\t\t\tcase 28: putchar(','); break;\n\t\t\t\t\t\tcase 29: putchar('-'); break;\n\t\t\t\t\t\tcase 30: putchar('\\''); break;\n\t\t\t\t\t\tcase 31: putchar('?'); break;\n\t\t\t\t\t\tdefault: putchar(j + 'A'); break;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tputchar('\\n');\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint main(void)\n{\n\tchar map_1[32][2][9] = {{\"A\", \"100101\"},   {\"B\", \"10011010\"}, {\"C\", \"0101\"},     {\"D\", \"0001\"},\n\t                        {\"E\", \"110\"},      {\"F\", \"01001\"},    {\"G\", \"10011011\"}, {\"H\", \"010000\"},\n\t\t\t\t\t\t\t{\"I\", \"0111\"},     {\"J\", \"10011000\"}, {\"K\", \"0110\"},     {\"L\", \"00100\"},\n\t\t\t\t\t\t\t{\"M\", \"10011001\"}, {\"N\", \"10011110\"}, {\"O\", \"00101\"},  \t {\"P\", \"111\"},\n\t\t\t\t\t\t\t{\"Q\", \"10011111\"}, {\"R\", \"1000\"},     {\"S\", \"00110\"},    {\"T\", \"00111\"},\n\t\t\t\t\t\t\t{\"U\", \"10011100\"}, {\"V\", \"10011101\"}, {\"W\", \"000010\"},   {\"X\", \"10010010\"},\n\t\t\t\t\t\t\t{\"Y\", \"10010011\"}, {\"Z\", \"10010000\"}, {\" \", \"101\"},      {\".\", \"010001\"},\n\t\t\t\t\t\t\t{\",\", \"000011\"},   {\"-\", \"10010001\"}, {\"'\", \"000000\"},   {\"?\", \"000001\"} };\n\tchar map_2[32][2][6] = {{\"A\", \"00000\"}, {\"B\", \"00001\"}, {\"C\", \"00010\"}, {\"D\", \"00011\"},\n\t\t\t\t\t\t\t{\"E\", \"00100\"}, {\"F\", \"00101\"}, {\"G\", \"00110\"}, {\"H\", \"00111\"},\n\t\t\t\t\t\t\t{\"I\", \"01000\"}, {\"J\", \"01001\"}, {\"K\", \"01010\"}, {\"L\", \"01011\"},\n\t\t\t\t\t\t\t{\"M\", \"01100\"}, {\"N\", \"01101\"}, {\"O\", \"01110\"}, {\"P\", \"01111\"},\n\t\t\t\t\t\t\t{\"Q\", \"10000\"}, {\"R\", \"10001\"}, {\"S\", \"10010\"}, {\"T\", \"10011\"},\n\t\t\t\t\t\t\t{\"U\", \"10100\"}, {\"V\", \"10101\"}, {\"W\", \"10110\"}, {\"X\", \"10111\"},\n\t\t\t\t\t\t\t{\"Y\", \"11000\"}, {\"Z\", \"11001\"}, {\" \", \"11010\"}, {\".\", \"11011\"},\n\t\t\t\t\t\t\t{\",\", \"11100\"}, {\"-\", \"11101\"}, {\"'\", \"11110\"}, {\"?\", \"11111\"} };\n\tchar str[50001];\n\tchar temp[50001], *ptr;\n\tint i, flag;\n\tint ch;\n\t\n\tmemset(str, '\\0', sizeof(str));\n\twhile (scanf(\"%[^\\n]\", str) != EOF){\n\t\tgetchar();\n\t\t\n\t\tmemset(temp, '\\0', sizeof(temp));\n\t\t\n\t\ti = 0;\n\t\twhile (str[i] != '\\0'){\n\t\t\t\tif ('A' <= str[i] && str[i] <= 'Z') ch = str[i] - 'A';\n\t\t\t\telse {\n\t\t\t\t\tswitch (str[i]){\n\t\t\t\t\t\tcase ' ' : ch = 26; break;\n\t\t\t\t\t\tcase '.' : ch = 27; break;\n\t\t\t\t\t\tcase ',' : ch = 28; break;\n\t\t\t\t\t\tcase '-' : ch = 29; break;\n\t\t\t\t\t\tcase '\\'': ch = 30; break;\n\t\t\t\t\t\tcase '?' : ch = 31; break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstrcat(temp, map_1[ch][1]);\n\t\t\t\ti++;\n\t\t}\n\t\t\n\t\tif (strlen(temp) % 5 != 0) strncat(temp, \"00000\",5 - strlen(temp) % 5);\n\t\tmemset(str, '\\0', sizeof(str));\n\t\tflag = 1;\n\t\tptr = &temp[0];\n\t\twhile (flag){\n\t\t\tflag = 0;\n\t\t\tfor (i = 0; i < 32; i++){\n\t\t\t\tif (strncmp(map_2[i][1], ptr, 5) == 0){\n\t\t\t\t\tstrcat(str, map_2[i][0]);\n\t\t\t\t\tptr += 5;\n\t\t\t\t\tflag = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tprintf(\"%s\\n\", str);\n\t\tmemset(str, '\\0', sizeof(str));\n\t}\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  while(1) {\n    puts(\"\\nSample Input\");\n    if(!*gets(d)) break;\n    e[0] = '\\0';\n    i = 0;\n    while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n    i = 5 - strlen(e) % 5;\n    while(i--) strcat(e,\"0\");\n    puts(\"Output for the Sample Input\");\n    i = 0;\n    while(e[i] != '\\0') {\n      j = 0;\n      j += (e[i++] - '0') << 4; \n      j += (e[i++] - '0') << 3; \n      j += (e[i++] - '0') << 2; \n      j += (e[i++] - '0') << 1; \n      j += (e[i++] - '0');\n      putc(c[j],stdout);\n    }\n  }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n\nchar map[256][16] = {\n\t[' '] = \"101\", ['\\''] = \"000000\", [','] = \"000011\", ['-'] = \"10010001\",\n\t['.'] = \"010001\", ['?'] = \"000001\", ['A'] = \"100101\", ['B'] = \"10011010\",\n\t['C'] = \"0101\", ['D'] = \"0001\", ['E'] = \"110\", ['F'] = \"01001\", ['G'] = \"10011011\",\n\t['H'] = \"010000\", ['I'] = \"0111\", ['J'] = \"10011000\", ['K'] = \"0110\",\n\t['L'] = \"00100\", ['M'] = \"10011001\", ['N'] = \"10011110\", ['O'] = \"00101\",\n\t['P'] = \"111\", ['Q'] = \"10011111\", ['R'] = \"1000\", ['S'] = \"00110\",\n\t['T'] = \"00111\", ['U'] = \"10011100\", ['V'] = \"10011101\", ['W'] = \"000010\",\n\t['X'] = \"10010010\", ['Y'] = \"10010011\", ['Z'] = \"10010000\" \n};\nchar const *rmap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint main(void)\n{\n\tunsigned u, t;\n\tint size;\n\n\tsize = u = 0;\n\twhile (t = getchar(), ~t){\n\t\tint i;\n\t\tfor (i = 0; map[t][i]; i++){\n\t\t\tu |= (map[t][i] - '0') << (4 - size);\n\t\t\tsize = (size + 1) % 5;\n\t\t\tif (!size){\n\t\t\t\tputchar(rmap[u]);\n\t\t\t\tu = 0;\n\t\t\t}\n\t\t}\n\t}\n\tif (size) putchar(rmap[u]);\n\n\tputs(\"\");\n\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "I[]={0x01059a25,0x109b0906,0x04069807,0x07059e99,0x0706089f,0x92029d9c,0x11059093,0x01009103};\nunsigned char*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",*strchr(),*L=\"68443586484588538455886888366866\",*B=I;\nb,l;\nmain(c){\n\tfor(;c=getchar(),c+1;)\n\t\tif(c-10)\n\t\t\tfor(c=strchr(C,c)-C,b=b<<(L[c]-48)|B[c],l+=L[c]-48;l>4;putchar(C[b>>l&31]))\n\t\t\t\tl-=5;\n\t\telse l&&putchar(C[(b<<=5-l)&31]),l=0,putchar(c);\n\texit(0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nint main()\n{\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[512];\n  unsigned char *p;\n  int i,j,k;\n  i = 0;\n  while((k = getchar()) != '\\n'){\n    j = 0;\n    while(*(a + j) != k) j++;\n    p = b[j];\n    while(*p) d[i++] = *p++;\n  }\n  while(i % 5) d[i++] = '0';\n  d[i] = '\\0';\n  i = 0;\n  while(d[i]) {\n    k = 0;\n    j = 4;\n    do {\n      k |= (d[i++] == '1') << j;\n    } while(j--);\n    putchar(*(c + k));\n  }\n  putchar('\\n');\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\nint main(){\n  char c[]={\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\"};\n  char w[][9]={\n    \"101\"     ,\n    \"000000\"  , \n    \"000011\"  ,\n    \"10010001\",\n    \"010001\"  ,\n    \"000001\"  ,\n    \"100101\"  ,\n    \"10011010\",\n    \"01010\"   ,\n    \"0001\"    ,\n    \"110\"     ,\n    \"01001\"   ,\n    \"10011011\",\n    \"010000\"  ,\n    \"0111\"    ,\n    \"10011000\",\n    \"0110\"    ,\n    \"00100\"   ,\n    \"10011001\",\n    \"10011110\",\n    \"00101\"   ,\n    \"111\"     ,\n    \"1001111\" ,\n    \"1000\"    ,\n    \"00110\"   ,\n    \"00111\"   ,\n    \"10011100\",\n    \"10011101\",\n    \"000010\"  ,\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n  };\n  char n[102];\n  //char s[920]={0};\n  int i,j;\n  while(fgets(n,101,stdin)!=NULL){\n    char s[920]={0};\n    for(i=0;n[i]!=10;i++){\n      for(j=0;n[i]!=c[j];j++);\n      strcat(s,w[j]);\n    }//printf(\"%s\\n\",s);\n    for(i=j=0;s[i];i++){\n      j*=2;\n      if(s[i]=='1')j++;\n      if(i%5==4){\n\tprintf(\"%c\",c[(j+6)%32]);\n\tj=0;\n      }\n    }\n    if(i%5){\n      for(;i%5!=0;i++)j*=2;\n      printf(\"%c\",c[(j+6)%32]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nint main(void)\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  puts(\"\\nSample Input\");\n  if(!*gets(d)) return 0;\n  e[0] = '\\0';\n  i = 0;\n  while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n  i = 5 - strlen(e) % 5;\n  while(i--) strcat(e,\"0\");\n  puts(\"Output for the Sample Input\");\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[4096];\n  unsigned char *p;\n  i = 0;\n  while((k = getc(stdin)) != EOF){\n    j = 0;\n    while(*(a + j) != k) j++;\n    p = b[j];\n    while(*p) d[i++] = *p++;\n  }\n  while(i % 5) d[i++] = '0';\n  d[i] = '\\0';\n  i = 0;\n  while(d[i]) {\n    j = 0;\n    k = 4;\n    do {\n      j += (d[i++] == '1') << k;\n    } while(k--);\n    putc(*(c + j),stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#define SIZE (30)\n\nconst char *d1[91] = {\n\t[' ']=\"101\", ['\\'']=\"000000\", [',']=\"000011\", ['-']=\"10010001\",\n\t['.']=\"010001\", ['?']=\"000001\", ['A']=\"100101\", ['B']=\"10011010\",\n\t['C']=\"0101\", ['D']=\"0001\", ['E']=\"110\", ['F']=\"01001\",\n\t['G']=\"10011011\", ['H']=\"010000\", ['I']=\"0111\", ['J']=\"10011000\",\n\t['K']=\"0110\", ['L']=\"00100\", ['M']=\"10011001\", ['N']=\"10011110\",\n\t['O']=\"00101\", ['P']=\"111\", ['Q']=\"10011111\", ['R']=\"1000\",\n\t['S']=\"00110\", ['T']=\"00111\", ['U']=\"10011100\", ['V']=\"10011101\",\n\t['W']=\"000010\", ['X']=\"10010010\", ['Y']=\"10010011\", ['Z']=\"10010000\"\n};\nconst char *d2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint bin2dec(char bin_list[SIZE]) {\n\treturn ((bin_list[0]-'0') * 16 + (bin_list[1]-'0') * 8 +\n\t\t\t(bin_list[2]-'0') * 4 + (bin_list[3]-'0') * 2 +\n\t\t\t(bin_list[4]-'0'));\n}\n\nvoid line_end(char bin_list[SIZE]) {\n\tif (strlen(bin_list) > 0) {\n\t\tstrncat(bin_list, \"0000\", SIZE);\n\t\tputchar(d2[bin2dec(bin_list)]);\n\t}\n\tputchar('\\n');\n\tmemset(bin_list, 0, sizeof(char)*SIZE);\n}\n\nint main(void) {\n\tint c = 0, end = 0;\n\tchar bin_list[SIZE] = \"\", tmp[SIZE];\n\n\twhile (1) {\n\t\tc = getchar();\n\t\tif (c == EOF) {\n\t\t\tif (!end)\n\t\t\t\tline_end(bin_list);\n\t\t\tbreak;\n\t\t}\n\t\tif (c == '\\n') {\n\t\t\tline_end(bin_list);\n\t\t\tend = 1;\n\t\t\tcontinue;\n\t\t}\n\t\tend = 0;\n\t\tstrncat(bin_list, d1[c], SIZE);\n\t\tif (strlen(bin_list) >= 5) {\n\t\t\tputchar(d2[bin2dec(bin_list)]);\n\t\t\tstrncpy(tmp, bin_list+5, SIZE);\n\t\t\tstrncpy(bin_list, tmp, SIZE);\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n \n#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include<stdlib.h>\n#include<stdarg.h>\n#include<malloc.h>\n\nvoid convert(char, char cd[10]);\nchar convert2(char cd[8]);\n\nint main()\n{\n\tchar str[10000], code[10000][10]={0}, lcode[100000], buf[8]={0};\n\tint i, j, len, block;\n\n\twhile(gets(str) != NULL){\n\n\t\tlen = strlen(str);\n\n\t\tfor(i=0; i<len; i++){\n\t\t\tconvert(str[i], code[i]);\n\t\t}\n\n\t\tstrcpy(lcode, code[0]);\n\t\tfor(i=1; i<len; i++)\n\t\t\tstrcat(lcode, code[i]);\n\n\t\tlen = strlen(lcode);\n\n\t\tif(len % 5 != 0)\n\t\t\tblock = len / 5 + 1;\n\t\telse\n\t\t\tblock = len / 5;\n\n\t\tfor(i=0; i<block; i++){\n\t\t\tif(i != block-1){\n\t\t\t\tfor(j=0; j<5; j++){\n\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor(j=0; j<5; j++)\n\t\t\t\t\tbuf[j] = '0';\n\t\t\t\tif(len % 5 == 0){\n\t\t\t\t\tfor(j=0; j<5; j++)\n\t\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t} else {\n\t\t\t\t\tfor(j=0; j<len%5; j++)\n\t\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%c\", convert2(buf));\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\t\n\treturn 0;\n}\n\nvoid convert(char c, char cd[10])\n{\n\tint i;\n\tchar a[32][10] = {\n\t\t\"101\", \"000000\", \"000011\", \"10010001\",\n\t\t\"010001\", \"000001\", \"100101\", \"10011010\",\n\t\t\"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\",\n\t\t\"0110\", \"00100\", \"10011001\", \"10011110\",\n\t\t\"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\",\n\t\t\"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tchar b[32] = {' ', '\\'', ',', '-', '.', '?'};\n\n\tfor(i=6; i<32; i++)\n\t\tb[i] = 'A' - 6 + i;\n\n\tfor(i=0; i<32; i++){\n\t\tif(c == b[i]){\n\t\t\tstrcpy(cd, a[i]);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn;\n}\n\nchar convert2(char cd[8])\n{\n\tchar a[32][8] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\",\n\t\t\"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\",\n\t\t\"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\",\n\t\t\"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\",\n\t\t\"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\tchar b[32] = {\n\t\t'A','B','C','D','E','F','G','H',\n\t\t'I','J','K','L','M','N','O','P',\n\t\t'Q','R','S','T','U','V','W','X',\n\t\t'Y','Z',' ','.',',','-','\\'','?'\n\t};\n\tint i;\n\n\tfor(i=0; i<32; i++){\n\t\tif(strcmp(cd, a[i]) == 0){\n\t\t\treturn b[i];\n\t\t\tbreak;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>          // putchar(), fgets()\n#include <stdlib.h>         // strtol()\n#include <ctype.h>          // isupper()\n\ntypedef struct code_tbl\n{\n\tconst char c;\n\tconst char *code;\n} code_t;\n\nconst char NUL = '\\0';\nconst char *code[26] = \n{\n\t/* A         B           C       D       E      F        G           H         I       J           K       L        M           N               */\n\t  \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", /* x */\n\t/* O        P      Q           R       S        T        U           V           W         X           Y           Z                            */\n\t  \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\"               /* x */\n};\n\nconst code_t code2[6] = {{' ', \"101\"}, {'\\'', \"000000\"}, {',', \"000011\"}, {'-', \"10010001\"}, {'.', \"010001\"}, {'?', \"000001\"}};\nconst char chara[6] = {' ', '.', ',', '-', '\\'', '?'};\n\nint\nmain(int argc, char **argv)\n{\n\tchar line[101];\n\tchar trans[801];  /* 8 * 100 + 1 */\n\tchar bina[906]; /* 800 + 159 + 1 */\n\tconst char *s, *t;\n\tchar *u;\n\tchar *nextp = NULL;\n\tint i;\n\n\twhile (fgets(line, sizeof(line), stdin) != NULL)\n\t{\n\t\tint ix = 0;\n\t\ts = line;\n\t\tfor (; *s != '\\n' && *s != NUL; ++s)\n\t\t{\n\t\t\tif (isupper(*s))\n\t\t\t\tt = code[*s - 'A'];\n\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor (i = 0; i < 6 && *s != code2[i].c; ++i)\n\t\t\t\t\t;\n\n\t\t\t\tt = code2[i].code;\n\t\t\t}\n\n\t\t\tfor (; *t != NUL; ++t)\n\t\t\t\ttrans[ix++] = *t;\n\n\t\t}\n\n\t\ttrans[ix] = NUL;\n\t\ts = trans;\n\t\tu = bina;\n\t\twhile (*s != NUL)\n\t\t{\n\t\t\tif (s != trans)\n\t\t\t\t*u++ = ' ';\n\n\t\t\tfor (i = 0; i < 5; ++i)\n\t\t\t{\n\t\t\t\tif (*s == NUL)\n\t\t\t\t\t*u++ = '0';\n\t\t\t\telse\n\t\t\t\t\t*u++ = *s++;\n\t\t\t}\n\t\t}\n\n\t\t*u = NUL;\t\t\n\t\ts = bina;\n\t\twhile (*s != NUL)\n\t\t{\n\t\t\ti = strtol(s, &nextp, 2);\n\t\t\ts = nextp;\n\t\t\tif (i < 0x1a)\n\t\t\t\tputchar(i + 'A');\n\t\t\telse\n\t\t\t\tputchar(chara[i - 0x1a]);\n\t\t}\n\n\t\tputchar('\\n');\n\t}\n\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\nint main() {\n\tchar str[101] = \"\", code[820] = \"\";\n\tchar *pstr = str, *pcode = code;\n\tint x, b, base;\n\n\twhile (~fscanf(stdin, \"%[^\\n]*s\", pstr)) {\n\t\tgetchar();\n\t\twhile (*pstr) {\n\t\t\tswitch (*pstr) {\n\t\t\tcase 'O': strcat(pcode, \"0\"); case 'C': strcat(pcode, \"0\"); case ' ': strcat(pcode, \"101\"); break;\n\t\t\tcase '\\'': strcat(pcode, \"000000\"); break;\n\t\t\tcase ',': strcat(pcode, \"000011\"); break;\n\t\t\tcase '-': strcat(pcode, \"1001\"); case 'D': strcat(pcode, \"0001\"); break;\n\t\t\tcase '.': strcat(pcode, \"010001\"); break;\n\t\t\tcase 'T': strcat(pcode, \"0\"); case 'I': strcat(pcode, \"0\"); case 'P': strcat(pcode, \"111\"); break;\n\t\t\tcase 'S': strcat(pcode, \"0\"); case 'K': strcat(pcode, \"0\"); case 'E': strcat(pcode, \"110\"); break;\n\t\t\tcase 'A': strcat(pcode, \"100101\"); break;\n\t\t\tcase 'B': strcat(pcode, \"10011010\"); break;\n\t\t\tcase 'F': strcat(pcode, \"01001\"); break;\n\t\t\tcase 'G': strcat(pcode, \"10011011\"); break;\n\t\t\tcase 'H': strcat(pcode, \"010000\"); break;\n\t\t\tcase 'J': strcat(pcode, \"1001\"); case 'R': strcat(pcode, \"1000\"); break;\n\t\t\tcase 'L': strcat(pcode, \"00100\"); break;\n\t\t\tcase 'M': strcat(pcode, \"10011001\"); break;\n\t\t\tcase 'N': strcat(pcode, \"10011110\"); break;\n\t\t\tcase 'Q': strcat(pcode, \"1001111\"); break;\n\t\t\tcase 'U': strcat(pcode, \"10011100\"); break;\n\t\t\tcase 'V': strcat(pcode, \"10011101\"); break;\n\t\t\tcase 'W': strcat(pcode, \"000010\"); break;\n\t\t\tcase 'X': strcat(pcode, \"10010011\"); break;\n\t\t\tcase 'Y': strcat(pcode, \"10010011\"); break;\n\t\t\tcase 'Z': strcat(pcode, \"10010000\"); break;\n\t\t\tdefault:break;\n\t\t\t}\n\t\t\tpstr++;\n\t\t}\n\t\twhile (strlen(pcode) % 5) strcat(pcode, \"0\");\n\t\twhile (*pcode) {\n\t\t\tsprintf(str, \"%.5s\", pcode);\n\t\t\tpcode += 5;\n\t\t\tb = atoi(str);\n\t\t\tbase = 1, x = 0;\n\t\t\twhile (b > 0) {\n\t\t\t\tx = x + (b % 10)*base;\n\t\t\t\tb /= 10;\n\t\t\t\tbase *= 2;\n\t\t\t}\n\t\t\tif (x == 26)x = ' ' - 'A';\n\t\t\telse if (x == 27) x = '.' - 'A';\n\t\t\telse if (x == 28) x = ',' - 'A';\n\t\t\telse if (x == 29) x = '-' - 'A';\n\t\t\telse if (x == 30) x = '\\'' - 'A';\n\t\t\telse if (x == 31) x = '?' - 'A';\n\t\t\tprintf(\"%c\", 'A' + x);\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tpcode[0] = str[0] = '\\0';\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 8\n#define CIPHER_NUM 32\n#define NUL 0x00\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\n#define TEXT_MAX 100\n\nint main(void)\n{\n\tshort i = 0;\n\tshort j = 0;\n\n\tshort text_length = 0;\n\tchar input_text[TEXT_MAX];\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"000000\",\"11011\",'\\''},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"010001\",\"11110\",'.'},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tchar barcode[801];\n\tchar code_fivecut[160][5];\n\t\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"text_length=%d\\n\",text_length);\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//printf(\"barcode = %s\\n\",barcode);\n\t\t\n\t\tint barcode_length = 0;\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"barcode_length =%d\\n\", barcode_length);\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t\t//printf(\"c=%d\\n\",c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor(i = 0;i < 800 ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"count= %d\\n\",count);\n\t\t\n\t\t/*\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tprintf(\"a = %c\",code_fivecut[i][j]);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}*/\n\t\t\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(k = 0; k < CIPHER_NUM; k++)\n\t\t\t{\n\t\t\t\tfor(l = 0; l < 5; l++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][l] == code[k].sign_change_charcter[l])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[k].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\t\n\t\t\n\t\t\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define CODE_MAX 801\n#define NUL 0x00\n#define INITIALIZE 0\n#define TEXT_MAX 100\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\n\n\nint main(void)\n{\n\tshort i = INITIALIZE;\n\tshort j = INITIALIZE;\n\tshort text_length = INITIALIZE;\n\tchar input_text[TEXT_MAX];\n\t\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tchar barcode[CODE_MAX];\n\tchar code_fivecut[160][5];\n\t\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < CODE_MAX-1; i++)//配列の最後(800番目)には\\0が入るためマイナス1してある\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint barcode_length = 0;\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor(i = 0;i < 800 ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint k = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < 5; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[j].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\tinput_text[i] = NUL;\n\t\t}\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < 160;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "char*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",*strchr();L[]={6,8,4,4,3,5,8,6,4,8,4,5,8,8,5,3,8,4,5,5,8,8,6,8,8,8,3,6,6,8,6,6};B[]={0x25,0x9a,0x05,0x01,0x06,0x09,0x9b,0x10,0x07,0x98,0x06,0x04,0x99,0x9e,0x05,0x07,0x9f,0x08,0x06,0x07,0x9c,0x9d,0x02,0x92,0x93,0x90,0x05,0x11,0x03,0x91,0x00,0x01};b,l;main(c){for(;c=getchar(),c+1;)if(c-10)for(c=strchr(C,c)-C,b=b<<L[c]|B[c],l+=L[c];l>4;putchar(C[b>>l&31]))l-=5;else l&&putchar(C[(b<<=5-l)&31]),l=0,putchar(c);exit(0);}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define NUL 0x00\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\n#define TEXT_MAX 100\n\nint main(void)\n{\n\tshort i = 0;\n\tshort j = 0;\n\n\tshort text_length = 0;\n\tchar input_text[TEXT_MAX];\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tchar barcode[801];\n\tchar code_fivecut[160][5];\n\t\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"text_length=%d\\n\",text_length);\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//printf(\"barcode = %s\\n\",barcode);\n\t\t\n\t\tint barcode_length = 0;\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"barcode_length =%d\\n\", barcode_length);\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t\t//printf(\"c=%d\\n\",c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor(i = 0;i < 800 ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"count= %d\\n\",count);\n\t\t\n\t\t/*\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tprintf(\"a = %c\",code_fivecut[i][j]);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}*/\n\t\t\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(k = 0; k < CIPHER_NUM; k++)\n\t\t\t{\n\t\t\t\tfor(l = 0; l < 5; l++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][l] == code[k].sign_change_charcter[l])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[k].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\tinput_text[i] = NUL;\n\t\t}\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < 160;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define NUL 0x00\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\n#define TEXT_MAX 100\n\nint main(void)\n{\n\tshort i = 0;\n\tshort j = 0;\n\n\tshort text_length = 0;\n\tchar input_text[TEXT_MAX];\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tchar barcode[801];\n\tchar code_fivecut[160][5];\n\t\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint barcode_length = 0;\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor(i = 0;i < 800 ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint k = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < 5; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[j].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\tinput_text[i] = NUL;\n\t\t}\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < 160;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid hantei(char *str);\n\nchar DataBase[][3][80] =\n\t{\n\t/* [文字] ,[符号＿変換前] ,[符号＿変換後] */\n\t{ \" \", \"101\", \"11010\" },{ \"\\'\", \"000000\", \"11110\" },{ \",\", \"000011\", \"11100\" },{ \"-\", \"10010001\", \"11101\" },\n\t{ \".\", \"010001\", \"11011\" },{ \"\\?\", \"000001\", \"11111\" },{ \"A\", \"100101\", \"00000\" },{ \"B\", \"10011010\", \"00001\" },\n    { \"C\", \"0101\", \"00010\" },{ \"D\", \"0001\", \"00011\" },{ \"E\", \"110\", \"00100\" },{ \"F\", \"01001\", \"00101\" },\n\t{ \"G\", \"10011011\", \"00110\" },{ \"H\", \"010000\", \"00111\" },{ \"I\", \"0111\", \"01000\" },{ \"J\", \"10011000\", \"01001\" },\n\t{ \"K\", \"0110\", \"01010\" },{ \"L\", \"00100\", \"01011\" },{ \"M\", \"10011001\", \"01100\" },{ \"N\", \"10011110\", \"01101\" },\n\t{ \"O\", \"00101\", \"01110\" },{ \"P\", \"111\", \"01111\" },{ \"Q\", \"10011111\", \"10000\" },{ \"R\", \"1000\", \"10001\" },\n\t{ \"S\", \"00110\", \"10010\" },{ \"T\", \"00111\", \"10011\" },{ \"U\", \"10011100\", \"10100\" },{ \"V\", \"10011101\", \"10101\" },\n\t{ \"W\", \"000010\", \"10110\" },{ \"X\", \"10010010\", \"10111\" },{ \"Y\", \"10010011\", \"11000\" },{ \"Z\", \"100100000\", \"11001\" },\n    {\"\", \"\", \"\" }\n};\n\n\nint main(void)\n{\n\tchar str1[1000],str2[1000],ch;\n\tint cut_i;\n\t\n\t/*scanf(\"%[A-Z \\'.?,-]\",str);\n\t\thantei(str1);*/\n\tcut_i=0;\n\twhile((ch = getchar())!=EOF){\n\t\tif(ch !='\\n'){\n\t\t\tstr2[cut_i] = ch;\n\t\t\tcut_i++;\n\t\t}\n\t\telse {\n\t\t\tstrncpy(str1,str2,cut_i);\n\t\t\tstr1[cut_i]='\\0';\n\t\t\thantei(str1);\n\t\t\tprintf(\"\\n\");\n\t\t\tcut_i=0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n\nvoid hantei(char *str)\n{\n\tint len1,cut_i,cut_j,count;\n\tchar ans[1000]={\"\"},str2[1000]={\"\"},str3[1000]={\"\"};\n\tchar zero[]={\"0000\"};\n\n\tlen1 = strlen(str);\n\tcount = 0;\n\n\tfor(cut_i=0;cut_i<len1;cut_i++){\n\t\tcut_j=0;\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(!strncmp((str+cut_i),DataBase[cut_j][0],1)){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(str2,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\telse if(count !=0){\n\t\t\t\t\tstrcpy(str2+count,DataBase[cut_j][1]);\n\t\t\t\t\tcount = strlen(str2);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\t\n\tlen1 = strlen(str2);\n\tcount = 0;\n\n\tif( len1 % 5 != 0){\n\t\tcut_i = 5 - len1 % 5;\n\t\tstrncat(str2,zero,cut_i);\n\t\tlen1 = strlen(str2);\n\t}\n\n\n\tfor(cut_i=0;cut_i<len1;cut_i+=5){\n\t\tcut_j=0;\n\t\tstrncpy(str3,str2+cut_i,5);\n\t\twhile(strcmp(DataBase[cut_j][0],\"\")){\n\t\t\tif(strcmp(str3,DataBase[cut_j][2]) == 0){\n\t\t\t\tif(count == 0){\n\t\t\t\t\tstrcpy(ans,DataBase[cut_j][0]);\n\t\t\t\t\tcount =strlen(ans);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstrcat(ans,DataBase[cut_j][0]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcut_j++;\n\t\t}\n\t}\n\tprintf(ans);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint main(void)\n{\n\tchar before[32][9] = { \n\t\t\"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\",\n\t\t\"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\",\n\t\t\"10010010\", \"10010011\", \"10010000\", \"101\", \"000000\", \"000011\",\n\t\t\"10010001\", \"010001\", \"000001\"\n\t};\n\tchar after[32][6] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\",\n\t\t\"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\",\n\t\t\"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\",\n\t\t\"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\",\n\t\t\"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\t\n\tchar str[128], str2[2048];\n\tint i, j, len;\n\t\n\twhile (fgets(str, 128, stdin) != NULL){\n\t\tfor (i = 0; i < 128; i++){\n\t\t\tstr2[i] = '\\0';\n\t\t}\n\t\t\n\t\ti = 0;\n\t\twhile (str[i] != '\\0'){\n\t\t\tif (str[i] >= 'A' && str[i] <= 'Z'){\n\t\t\t\tstrcat(str2, before[str[i] - 'A']);\n\t\t\t}\n\t\t\tswitch (str[i]){\n\t\t\t\tcase ' ':\n\t\t\t\tstrcat(str2, before[26]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '.':\n\t\t\t\tstrcat(str2, before[27]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase ',':\n\t\t\t\tstrcat(str2, before[28]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '-':\n\t\t\t\tstrcat(str2, before[29]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '\\'':\n\t\t\t\tstrcat(str2, before[30]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '?':\n\t\t\t\tstrcat(str2, before[31]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tlen = strlen(str2);\n\t\twhile (len % 5 != 0){\n\t\t\tstrcat(str2, \"0\");\n\t\t\tlen++;\n\t\t}\n\t\t\n\t\ti = 0;\n\t\twhile (len - i > 0){\n\t\t\tfor (j = 0; j < 32; j++){\n\t\t\t\tif (strncmp(&str2[i], after[j], 5) == 0){\n\t\t\t\t\tif (j >= 0 && j <= 25){\n\t\t\t\t\t\tprintf(\"%c\", j + 'A');\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tswitch (j){\n\t\t\t\t\t\t\tcase 26:\n\t\t\t\t\t\t\tprintf(\" \");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 27:\n\t\t\t\t\t\t\tprintf(\".\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 28:\n\t\t\t\t\t\t\tprintf(\",\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 29:\n\t\t\t\t\t\t\tprintf(\"-\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 30:\n\t\t\t\t\t\t\tprintf(\"\\'\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 31:\n\t\t\t\t\t\t\tprintf(\"?\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\ti += 5;\n\t\t}\n\t\t\n\t\tputs(\"\");\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nstruct tbl_t {\n\tint c;\n\tint l;\n\tunsigned char b; // LSB aligned\n} tbl[]= {\n\t{'A', 6, 0x25},\n\t{'B', 8, 0x9a},\n\t{'C', 4, 0x05},\n\t{'D', 4, 0x01},\n\t{'E', 3, 0x06},\n\t{'F', 5, 0x09},\n\t{'G', 8, 0x9b},\n\t{'H', 6, 0x10},\n\t{'I', 4, 0x07},\n\t{'J', 8, 0x98},\n\t{'K', 4, 0x06},\n\t{'L', 5, 0x04},\n\t{'M', 8, 0x99},\n\t{'N', 8, 0x9e},\n\t{'O', 5, 0x05},\n\t{'P', 3, 0x07},\n\t{'Q', 8, 0x9f},\n\t{'R', 4, 0x08},\n\t{'S', 5, 0x06},\n\t{'T', 5, 0x07},\n\t{'U', 8, 0x9c},\n\t{'V', 8, 0x9d},\n\t{'W', 6, 0x02},\n\t{'X', 8, 0x92},\n\t{'Y', 8, 0x93},\n\t{'Z', 8, 0x90},\n\t{' ', 3, 0x05},\n\t{'.', 6, 0x11},\n\t{',', 6, 0x03},\n\t{'-', 8, 0x91},\n\t{'\\'',6, 0x00},\n\t{'?', 6, 0x01},\n};\nint index(int c){\n\tint i;\n\tfor(i=0;i<sizeof(tbl)/sizeof(*tbl);i++)\n\t\tif(tbl[i].c==c)\n\t\t\treturn i;\n\texit(1);\n}\nint main(){\n\tint c,b=0,l=0,i;\n\twhile(c=getchar(),c+1){\n\t\tif(c=='\\n'){\n\t\t\tif(l){\n\t\t\t\tb<<=5-l;\n\t\t\t\tputchar(tbl[b&31].c);\n\t\t\t\tl=0;\n\t\t\t}\n\t\t\tputchar('\\n');\n\t\t} else {\n\t\t\ti=index(c);\n\t\t\tb=b<<tbl[i].l|tbl[i].b;\n\t\t\tl+=tbl[i].l;\n\t\t\twhile(l>=5){\n\t\t\t\tputchar(tbl[b>>(l-5)&31].c);\n\t\t\t\tl-=5;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "char*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",*strchr();\nL[]={6,8,4,4,3,5,8,6,4,8,4,5,8,8,5,3,8,4,5,5,8,8,6,8,8,8,3,6,6,8,6,6};\nB[]={\n\t0x25,0x9a,0x05,0x01,0x06,0x09,0x9b,0x10,0x07,0x98,0x06,0x04,0x99,0x9e,0x05,0x07,\n\t0x9f,0x08,0x06,0x07,0x9c,0x9d,0x02,0x92,0x93,0x90,0x05,0x11,0x03,0x91,0x00,0x01\n};\nc,b=0,l=0,i;\nmain(){\n\twhile(c=getchar(),c+1){\n\t\tif(c==10){\n\t\t\tb<<=5-l;\n\t\t\tputchar(C[b&31]);\n\t\t\tl=0;\n\t\t\tputchar(c);\n\t\t} else {\n\t\t\ti=strchr(C,c)-C;\n\t\t\tb=b<<L[i]|B[i];\n\t\t\tl+=L[i];\n\t\t\twhile(l>5){\n\t\t\t\tl-=5;\n\t\t\t\tputchar(C[b>>l&31]);\n\t\t\t}\n\t\t}\n\t}\n\texit(0);\n}"
  },
  {
    "language": "C",
    "code": "// AOJ Volume 0 Problem 0088\n\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_STR (500)\n\ntypedef struct {\n\tchar c;\n\tchar *code;\n} TABLE1;\n\nTABLE1 table1[] = {\n{' ', \"101\"},\n{'\\'', \"000000\"},\n{',', \"000011\"},\n{'-', \"10010001\"},\n{'.', \"010001\"},\n{'?', \"000001\"},\n{'A', \"100101\"},\n{'B', \"10011010\"},\n{'C', \"0101\"},\n{'D', \"0001\"},\n{'E', \"110\"},\n{'F', \"01001\"},\n{'G', \"10011011\"},\n{'H', \"010000\"},\n{'I', \"0111\"},\n{'J', \"10011000\"},\n{'K', \"0110\"},\n{'L', \"00100\"},\n{'M', \"10011001\"},\n{'N', \"10011110\"},\n{'O', \"00101\"},\n{'P', \"111\"},\n{'Q', \"10011111\"},\n{'R', \"1000\"},\n{'S', \"00110\"},\n{'T', \"00111\"},\n{'U', \"10011100\"},\n{'V', \"10011101\"},\n{'W', \"000010\"},\n{'X', \"10010010\"},\n{'Y', \"10010011\"},\n{'Z', \"10010000\"},\n};\n\nchar *table2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nint main(void)\n{\n\tchar input[MAX_STR];\n\tchar code[MAX_STR * 8];\n\tTABLE1 *p;\n\tint len;\n\tint i, j;\n\tint n;\n\n\twhile (fgets(input, MAX_STR, stdin) != NULL){\n\t\tcode[0] = '\\0';\n\t\tfor (i = 0; input[i] != '\\n'; i++){\n\t\t\tp = table1;\n\t\t\twhile (p->c != input[i]){\n\t\t\t\tp++;\n\t\t\t}\n\t\t\tstrcat(code, p->code);\n//\t\t\tprintf(\"<%s>\", p->code);\n\t\t}\n//\t\tprintf(\"(%s)\", code);\n\t\t\n\t\tlen = strlen(code);\n\t\tstrcat(code, \"0000\");\n\n\t\tlen = ((len + 4) / 5) * 5;\n\n//\t\tprintf(\"[%d]\", len);\n\t\t\n\t\ti = 0;\n\t\twhile (i < len){\n\t\t\tn = 0;\n\t\t\tfor (j = 0; j < 5; j++){\n\t\t\t\tn = n * 2 + code[i] - '0';\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tprintf(\"%c\", table2[n]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nchar encode[96][8];\nchar decode[32];\nint main(void){\n\tstrcpy(encode[' '],\"101\");\n\tstrcpy(encode['\\n'],\"\");\n\tstrcpy(encode['\\''],\"000000\");\n\tstrcpy(encode[','],\"000011\");\n\tstrcpy(encode['-'],\"10010001\");\n\tstrcpy(encode['.'],\"010001\");\n\tstrcpy(encode['?'],\"000001\");\n\tstrcpy(encode['A'],\"100101\");\n\tstrcpy(encode['B'],\"10011010\");\n\tstrcpy(encode['C'],\"0101\");\n\tstrcpy(encode['D'],\"0001\");\n\tstrcpy(encode['E'],\"110\");\n\tstrcpy(encode['F'],\"01001\");\n\tstrcpy(encode['G'],\"10011011\");\n\tstrcpy(encode['H'],\"010000\");\n\tstrcpy(encode['I'],\"0111\");\n\tstrcpy(encode['J'],\"10011000\");\n\tstrcpy(encode['K'],\"0110\");\n\tstrcpy(encode['L'],\"00100\");\n\tstrcpy(encode['M'],\"10011001\");\n\tstrcpy(encode['N'],\"10011110\");\n\tstrcpy(encode['O'],\"00101\");\n\tstrcpy(encode['P'],\"111\");\n\tstrcpy(encode['Q'],\"10011111\");\n\tstrcpy(encode['R'],\"1000\");\n\tstrcpy(encode['S'],\"00110\");\n\tstrcpy(encode['T'],\"00111\");\n\tstrcpy(encode['U'],\"10011100\");\n\tstrcpy(encode['V'],\"10011101\");\n\tstrcpy(encode['W'],\"000010\");\n\tstrcpy(encode['X'],\"10010010\");\n\tstrcpy(encode['Y'],\"10010011\");\n\tstrcpy(encode['Z'],\"10010000\");\n\tint n,i,k;\n\tchar type[200],code[10000];\n\tfor(i=0;i<26;i++){decode[i]='A'+i;}\n\tdecode[26]=' ';\n\tdecode[27]=',';\n\tdecode[28]='-';\n\tdecode[29]='.';\n\tdecode[30]='\\'';\n\tdecode[31]='?';\n\twhile(fgets(type,10000,stdin)!=NULL){\n\t\tcode[0]='\\0';\n\t\tn=strlen(type);\n\t\tfor(i=0;i<n;i++){strcat(code,encode[type[i]]);}\n\t\tn=strlen(code);\n\t\tfor(i=0;i<n;i+=5){\n\t\t\tk=0;\n\t\t\tif(code[i]=='1')k+=16;\n\t\t\tif(code[i+1]=='1' && i+1<n)k+=8;\n\t\t\tif(code[i+2]=='1' && i+2<n)k+=4;\n\t\t\tif(code[i+3]=='1' && i+3<n)k+=2;\n\t\t\tif(code[i+4]=='1' && i+4<n)k+=1;\n\t\t\tprintf(\"%c\",decode[k]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define NUM_OF_CHAR\t\t(32)\n#define LEN_OF_CODESTR1\t(8)\n#define LEN_OF_CODESTR2\t(5)\n\n#define STRCMP_MATCH\t(0)\n\nchar charToCodeTable[2][ NUM_OF_CHAR ][ LEN_OF_CODESTR1 + 1 ] =\n{\n\t{\n\t\t\" \", \"'\", \",\", \"-\", \".\", \"?\", \"A\", \"B\",\n\t\t\"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\",\n\t\t\"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n\t\t\"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n\t},\n\t{\n\t\t\"101\",\t\t\"000000\",\t\"000011\",\t\"10010001\",\t\"010001\",\t\"000001\",\t\"100101\",\t\"10011010\",\n\t\t\"0101\",\t\t\"0001\",\t\t\"110\",\t\t\"01001\",\t\"10011011\",\t\"010000\",\t\"0111\",\t\t\"10011000\",\n\t\t\"0110\",\t\t\"00100\",\t\"10011001\",\t\"10011110\",\t\"00101\",\t\"111\",\t\t\"10011111\",\t\"1000\",\n\t\t\"00110\",\t\"00111\",\t\"10011100\",\t\"10011101\",\t\"000010\",\t\"10010010\",\t\"10010011\",\t\"10010000\"\n\t}\n};\n\nchar codeToCharTable[2][ NUM_OF_CHAR ][ LEN_OF_CODESTR2 + 1 ] = \n{\n\t{\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"\n\t},\n\t{\n\t\t\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n\t\t\"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\",\n\t\t\"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\",\n\t\t\"Y\", \"Z\", \" \", \".\", \",\", \"-\", \"'\", \"?\"\n\t}\n};\n\n//inputに対応するコードをoutCodeに格納\nvoid charToCode( char input, char* outCode );\n\n//inCodeに対応する文字を返す\nchar codeToChar( char* inCode );\n\n//inputの最初から5文字までをoutputに格納\nvoid get5LengthCode( char* input, char* output );\n\n//shiftNumberの数だけinputをずらした文字列をoutputに格納\nvoid shiftString( char* input, char* output, int shiftNumber );\n\nint main( void )\n{\n\t/*入力された文字を受け取る*/\n\tchar ch;\n\t/*出力されたコードを受け取る*/\n\tchar getedCode[ LEN_OF_CODESTR2 + 1 ] = {'\\0'};\n\t/*出力されたコードを５文字以上になるまでためておくバッファ*/\n\tchar codeBuffer[ LEN_OF_CODESTR1 * 2 + 1 ] = {'\\0'};\n\t\n\t//入力の終わりまで\n\twhile( scanf( \"%c\", &ch ) != EOF )\n\t{\n\t\tif( ch != '\\n' )\n\t\t{\n\t\t\tcharToCode( ch, codeBuffer );\n\t\t\tif( strlen( codeBuffer ) >= 5 )\n\t\t\t{\n\t\t\t\tget5LengthCode( codeBuffer, getedCode );\n\t\t\t\tshiftString( codeBuffer, codeBuffer, 5 );\n\t\t\t\tprintf( \"%c\", codeToChar( getedCode ) );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif( strlen( codeBuffer ) > 0 )\n\t\t\t{\n\t\t\t\tget5LengthCode( codeBuffer, getedCode );\n\t\t\t\tshiftString( codeBuffer, codeBuffer, 5 );\n\t\t\t\tprintf( \"%c\", codeToChar( getedCode ) );\n\t\t\t}\n\t\t\tprintf( \"\\n\" );\n\t\t\t\n\t\t\tstrcpy( codeBuffer, \"\" );\n\t\t\tstrcpy( getedCode, \"\" );\n\t\t}\n\t}\n\t\n\treturn (0);\n}\n\nvoid charToCode( char input, char* outCode )\n{\n\tchar inStr[2];\n\tint i;\n\t\n\tinStr[0] = input;\n\tinStr[1] = '\\0';\n\t\n\tfor( i = 0; i < NUM_OF_CHAR; i++ )\n\t{\n\t\tif( strcmp( inStr, charToCodeTable[0][i] ) == STRCMP_MATCH )\n\t\t{\n\t\t\tstrcat( outCode, charToCodeTable[1][i] );\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nchar codeToChar( char inCode[ LEN_OF_CODESTR2 + 1 ] )\n{\n\tint i;\n\tchar result;\n\tfor( i = 0; i < NUM_OF_CHAR; i++ )\n\t{\n\t\tif( strcmp( inCode, codeToCharTable[0][i] ) == STRCMP_MATCH )\n\t\t{\n\t\t\tresult = codeToCharTable[1][i][0];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn (result);\n}\n\nvoid get5LengthCode( char* input, char* output )\n{\n\tint i;\n\tfor( i = 0; i < 5; i++ )\n\t{\n\t\tif( input[i] == '\\0' )break;\n\t\toutput[i] = input[i];\n\t}\n\tif( i == 0 )\n\t{\n\t\toutput[0] = '\\0';\n\t\treturn;\n\t}\n\tfor( ; i < 5; i++ )\n\t{\n\t\toutput[i] = '0';\n\t}\n}\n\nvoid shiftString( char* input, char* output, int shiftNumber )\n{\n\tint i;\n\tfor( i = 0; i < input[i + shiftNumber] != '\\0'; i++ )\n\t{\n\t\toutput[i] = input[i + shiftNumber];\n\t}\n\toutput[i] = '\\0';\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\nint main()\n{\n\tint c[99],m[32]={6,8,4,4,3,5,8,6,4,8,4,5,8,8,5,3,8,4,5,5,8,8,6,8,8,8,3,6,6,8,6,6},d[32]={37,154,5,1,6,9,155,16,7,152,6,4,153,158,5,7,159,8,6,7,156,157,2,146,147,144,5,0,3,145,17,1},\n\tbuffer=0,t,p=0,i,w[32]={65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,32,46,44,45,39,63};\n\n\tc[32]=26,c[39]=27,c[44]=28,c[45]=29,c[46]=30,c[63]=31;\n\tfor(i=0;i<25;i++)\n\t\tc[65+i]=i;\n\twhile(t=getchar())\n\t{\n\t\tif(t==13||t==26)\n\t\t{\n\t\t\tif(p>0)\n\t\t\t\tputchar(w[buffer<<5-p]);\n\t\t\tif(t==26)\n\t\t\t\tbreak;\n\t\t\tputs(\"\");\n\t\t\tbuffer=p=0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti=c[t];\n\t\t\tbuffer<<=m[i];\n\t\t\tbuffer|=d[i];\n\t\t\tp+=m[i];\n\t\t\tfor(;p>=5;p-=5)\n\t\t\t{\n\t\t\t\tputchar(w[buffer>>p-5]);\n\t\t\t\tbuffer&=~(31<<p-5);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 8\n#define CIPHER_NUM 32\n#define NUL 0x00\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\n#define TEXT_MAX 100\n\nint main(void)\n{\n\tshort i = 0;\n\tshort j = 0;\n\n\tshort text_length = 0;\n\tchar input_text[TEXT_MAX];\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tchar barcode[801];\n\tchar code_fivecut[160][5];\n\t\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"text_length=%d\\n\",text_length);\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//printf(\"barcode = %s\\n\",barcode);\n\t\t\n\t\tint barcode_length = 0;\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"barcode_length =%d\\n\", barcode_length);\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t\t//printf(\"c=%d\\n\",c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor(i = 0;i < 800 ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//printf(\"count= %d\\n\",count);\n\t\t\n\t\t/*\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tprintf(\"a = %c\",code_fivecut[i][j]);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}*/\n\t\t\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(k = 0; k < CIPHER_NUM; k++)\n\t\t\t{\n\t\t\t\tfor(l = 0; l < 5; l++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][l] == code[k].sign_change_charcter[l])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[k].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\tinput_text[i] = NUL;\n\t\t}\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < 160;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[4096];\n  unsigned char *p;\n  i = 0;\n  while((k = getc(stdin)) != EOF){\n    j = 0;\n    while(*(a + j) != k) j++;\n    p = b[j];\n    while(*p) d[i++] = *p++;\n  }\n  j = 5 - (i - 1) % 5;\n  while(j--) d[i++] = '0';\n  d[i] = '\\0';\n  i = 0;\n  while(d[i]) {\n    j = 0;\n    k = 4;\n    do {\n      j += (d[i++] - '0') << k;\n    } while(k--);\n    putc(*(c + j),stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "/*\nAizuOnline A0088\nThe Code A Doctor Loved\n2012/12/31 WA\n*/\n#include <stdio.h>\n// Select Below\n//#include <stdlib.h>\n#include <string.h>\n//#include <float.h>\n//#include <math.h>\n//Global data section\n\nchar heibun[1000];\nchar s1[10000];\nchar s2[2000];\n\nchar *step1table[]={\n//  SP ' , - . ?\n        \"101\",\n\t\"000000\",\n\t\"000011\",\n\t\"10010001\",\n\t\"010001\",\n\t\"000001\",\n// A-B\n\t\"100101\",\n\t\"10011010\",\n// C-J\n\t\"0101\",\n\t\"0001\",\n\t\"110\",\n\t\"01001\",\n\t\"10011011\",\n\t\"010000\",\n\t\"0111\",\n\t\"10011000\",\n// K-R\n\t\"0110\",\n\t\"00100\",\n\t\"10011001\",\n\t\"10011110\",\n\t\"00101\",\n\t\"111\",\n\t\"10011111\",\n\t\"1000\",\n// S-Z\n\t\"00110\",\n\t\"00111\",\n\t\"10011100\",\n\t\"10011101\",\n\t\"000010\",\n\t\"10010010\",\n\t\"10010011\",\n\t\"10010000\"};\nint conv(char c)\n{\n  //printf(\"%c\",c);\n  char *x;\n  char compared[] = \" ',-.?\";\n  if(NULL != (x = strchr(compared,c)))\n    return(x - compared);\n  return(c - 'A' + 6);    \n}\nvoid step1()\n{\n  char *s,c;\n\n  s=heibun;\n  s1[0]='\\0';\n  while(c=*s++)\n    {\n      //printf(\"%c %s\\n\",c,step1table[conv(c)]);\n      strcat(s1,step1table[conv(c)]);\n    }\n  strcat(s1,\"0000\");\n}\nint conv5bin(char *s)\n{\n  //printf(\"%5s\\n\",s);\n  int sum;\n  sum  = (s[0]=='1')?16:0;\n  sum += (s[1]=='1')?8:0;\n  sum += (s[2]=='1')?4:0;\n  sum += (s[3]=='1')?2:0;\n  sum += (s[4]=='1')?1:0;\n  return(sum);\n}\nvoid step2()\n{\n  int s2ptr;\n  int i;\n\n  s2ptr=0;\n  for(i=0;i<(strlen(s1)/5)*5;i+=5)\n    s2[s2ptr++]=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[conv5bin(&(s1[i]))];\n  s2ptr='\\0';\n}\nmain()\n{\n  int i;\n\n  while(NULL != gets(heibun))\n    {\n      \n      for(i=0;i<2000;i++)\n\ts2[i]='\\0';\n      \n\n      step1();\n      step2();\n\n\n      printf(\"%s\\n\",s1);\n      printf(\"%s\\n\",s2);\n    }\nreturn(0);\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define CODE_MAX 801\n#define NUL 0x00\n#define INITIALIZE 0\n#define TEXT_MAX 100\n#define FIVE 5\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\nint main(void)\n{\n\tshort i = INITIALIZE;\n\tshort j = INITIALIZE;\n\tshort text_length = INITIALIZE;\n\tshort barcode_length = 0;\n\tint count = INITIALIZE;\n\t\n\tchar input_text[TEXT_MAX];\n\tchar barcode[CODE_MAX];\n\tchar code_fivecut[160][5];\n\t\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\t\n\t\t\n\t\tfor(i = 0; i < CODE_MAX-1; i++)//配列の最後(800番目)には\\0が入るためマイナス1してある\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < 160;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0;i < CODE_MAX ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint k = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < 5; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[j].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define CODE_MAX 801\n#define NUL 0x00\n#define INITIALIZE 0\n#define TEXT_MAX 101\n#define FIVE 5\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\nint main(void)\n{\n\t\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tunsigned short i = INITIALIZE;\n\tunsigned short j = INITIALIZE;\n\tunsigned short k = INITIALIZE;\n\tunsigned short text_length = INITIALIZE;\n\tunsigned short barcode_length = INITIALIZE;\n\tunsigned int count = INITIALIZE;\n\tint c = 0;\n\tint cc = 0;\n\t\n\tchar input_text[TEXT_MAX];\n\tchar barcode[CODE_MAX];\n\tchar code_fivecut[CODE_MAX / FIVE][FIVE];/*160:5*/\n\n\t\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < CODE_MAX - 1; i++)//配列の最後(800番目)には\\0が入るためマイナス1してある\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX / FIVE;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < FIVE; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0;i < CODE_MAX ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < FIVE; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[j].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#define N 100000\n\nint btoi5( char ch[] ) {\n  int i, ans = 0;\n\n  for( i = 0; i < 5; i++ ) {\n    ans *= 2;\n    ans += ch[ i ] - '0';\n  }\n\n  return( ans );\n}\n\nint main( void ) {\n\n  while( 1 ) {\n    int i, j, digit;\n    char in[ N ], d[ N ];\n    int di, ndi;\n\n    for( i = 0; i < N; i++ ) {\n      if( scanf( \"%c\", &in[ i ] ) != 1 )  break;\n      if( in[ i ] == '\\n' )               break;\n    } if( i == 0 )                        break;\n    digit = i;\n\n    di = 0;\n    for( i = 0; i < digit; i++ ) {\n      switch( in[ i ] ) {\n        case ' '  : d[di++]='1';d[di++]='0';d[di++]='1';break;\n        case 39   : d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';break;\n        case ','  : d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';break;\n        case '-'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='1';break;\n        case '.'  : d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='1';break;\n        case '?'  : d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='1';break;\n        case 'A'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='1';break;\n        case 'B'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='0';d[di++]='1';d[di++]='0';break;\n        case 'C'  : d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='1';break;\n        case 'D'  : d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='1';break;\n        case 'E'  : d[di++]='1';d[di++]='1';d[di++]='0';break;\n        case 'F'  : d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';break;\n        case 'G'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='0';d[di++]='1';d[di++]='1';break;\n        case 'H'  : d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';break;\n        case 'I'  : d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='1';break;\n        case 'J'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='0';break;\n        case 'K'  : d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='0';break;\n        case 'L'  : d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';break;\n        case 'M'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';break;\n        case 'N'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='1';d[di++]='1';d[di++]='0';break;\n        case 'O'  : d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='1';break;\n        case 'P'  : d[di++]='1';d[di++]='1';d[di++]='1';break;\n        case 'Q'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='1';d[di++]='1';d[di++]='1';break;\n        case 'R'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='0';break;\n        case 'S'  : d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='0';break;\n        case 'T'  : d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='1';break;\n        case 'U'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='1';d[di++]='0';d[di++]='0';break;\n        case 'V'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='1';d[di++]='0';d[di++]='1';break;\n        case 'W'  : d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';break;\n        case 'X'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';break;\n        case 'Y'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';break;\n        case 'Z'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';break;\n      }\n    }\n\n    if( di % 5 != 0 ) {\n      ndi = di / 5 * 5 + 5;\n      for( i = di; i < ndi; i++ )\n        d[ i ] = '0';\n    } else {\n      ndi = di / 5 * 5;\n    }\n\n    for( i = 0; i < ndi / 5; i++ ) {\n      switch( btoi5( d + i*5 ) ) {\n        case  0 : printf( \"A\" );break;\n        case  1 : printf( \"B\" );break;\n        case  2 : printf( \"C\" );break;\n        case  3 : printf( \"D\" );break;\n        case  4 : printf( \"E\" );break;\n        case  5 : printf( \"F\" );break;\n        case  6 : printf( \"G\" );break;\n\n        case  7 : printf( \"H\" );break;\n        case  8 : printf( \"I\" );break;\n        case  9 : printf( \"J\" );break;\n        case 10 : printf( \"K\" );break;\n        case 11 : printf( \"L\" );break;\n        case 12 : printf( \"M\" );break;\n        case 13 : printf( \"N\" );break;\n\n        case 14 : printf( \"O\" );break;\n        case 15 : printf( \"P\" );break;\n        case 16 : printf( \"Q\" );break;\n        case 17 : printf( \"R\" );break;\n        case 18 : printf( \"S\" );break;\n        case 19 : printf( \"T\" );break;\n        case 20 : printf( \"U\" );break;\n\n        case 21 : printf( \"V\" );break;\n        case 22 : printf( \"W\" );break;\n        case 23 : printf( \"X\" );break;\n        case 24 : printf( \"Y\" );break;\n        case 25 : printf( \"Z\" );break;\n\n        case 26 : printf( \" \" );break;\n        case 27 : printf( \".\" );break;\n        case 28 : printf( \",\" );break;\n        case 29 : printf( \"-\" );break;\n        case 30 : printf( \"'\" );break;\n        case 31 : printf( \"?\" );break;\n      }\n    }\n\n    printf( \"\\n\" );\n  }\n\n  return( 0 );\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nint main()\n{\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[4096];\n  unsigned char *p;\n  int i,j,k;\n  i = 0;\n  while((k = getc(stdin)) != '\\n'){\n    j = 0;\n    while(*(a + j) != k) j++;\n    p = b[j];\n    while(*p) d[i++] = *p++;\n  }\n  while(i % 5) d[i++] = '0';\n  d[i] = '\\0';\n  i = 0;\n  while(d[i]) {\n    k = 0;\n    j = 4;\n    do {\n      k |= (d[i++] == '1') << j;\n    } while(j--);\n    putc(*(c + k),stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\nint main() {\n\tchar str[200] = \"\", code[100000] = \"\";\n\tchar *pstr, *pcode;\n\tint x, b, base;\n\n\twhile (fgets(str,sizeof(str),stdin)!=NULL) {\n\t\tpstr = &str[0];\n\t\tpcode = &code[0];\n\t\twhile (*pstr) {\n\t\t\tswitch (*pstr) {\n\t\t\tcase 'O': strcat(pcode, \"0\"); case 'C': strcat(pcode, \"0\"); case ' ': strcat(pcode, \"101\"); break;\n\t\t\tcase '\\'': strcat(pcode, \"000000\"); break;\n\t\t\tcase ',': strcat(pcode, \"000011\"); break;\n\t\t\tcase '-': strcat(pcode, \"1001\"); case 'D': strcat(pcode, \"0001\"); break;\n\t\t\tcase '.': strcat(pcode, \"010001\"); break;\n\t\t\tcase 'T': strcat(pcode, \"0\"); case 'I': strcat(pcode, \"0\"); case 'P': strcat(pcode, \"111\"); break;\n\t\t\tcase 'S': strcat(pcode, \"0\"); case 'K': strcat(pcode, \"0\"); case 'E': strcat(pcode, \"110\"); break;\n\t\t\tcase 'A': strcat(pcode, \"100101\"); break;\n\t\t\tcase 'B': strcat(pcode, \"10011010\"); break;\n\t\t\tcase 'F': strcat(pcode, \"01001\"); break;\n\t\t\tcase 'G': strcat(pcode, \"10011011\"); break;\n\t\t\tcase 'H': strcat(pcode, \"010000\"); break;\n\t\t\tcase 'J': strcat(pcode, \"1001\"); case 'R': strcat(pcode, \"1000\"); break;\n\t\t\tcase 'L': strcat(pcode, \"00100\"); break;\n\t\t\tcase 'M': strcat(pcode, \"10011001\"); break;\n\t\t\tcase 'N': strcat(pcode, \"10011110\"); break;\n\t\t\tcase 'Q': strcat(pcode, \"1001111\"); break;\n\t\t\tcase 'U': strcat(pcode, \"10011100\"); break;\n\t\t\tcase 'V': strcat(pcode, \"10011101\"); break;\n\t\t\tcase 'W': strcat(pcode, \"000010\"); break;\n\t\t\tcase 'X': strcat(pcode, \"10010011\"); break;\n\t\t\tcase 'Y': strcat(pcode, \"10010011\"); break;\n\t\t\tcase 'Z': strcat(pcode, \"10010000\"); break;\n\t\t\tdefault:break;\n\t\t\t}\n\t\t\tpstr++;\n\t\t}\n\t\twhile (strlen(pcode) % 5) strcat(pcode, \"0\");\n\t\twhile (*pcode) {\n\t\t\tsprintf(str, \"%.5s\", pcode);\n\t\t\tpcode += 5;\n\t\t\tb = atoi(str);\n\t\t\tbase = 1, x = 0;\n\t\t\twhile (b > 0) {\n\t\t\t\tx += (b % 10)*base;\n\t\t\t\tb /= 10;\n\t\t\t\tbase *= 2;\n\t\t\t}\n\t\t\tif (x == 26) x = ' ' - 'A';\n\t\t\telse if (x == 27) x = '.' - 'A';\n\t\t\telse if (x == 28) x = ',' - 'A';\n\t\t\telse if (x == 29) x = '-' - 'A';\n\t\t\telse if (x == 30) x = '\\'' - 'A';\n\t\t\telse if (x == 31) x = '?' - 'A';\n\t\t\tprintf(\"%c\", 'A' + x);\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tmemset(code, '\\0', sizeof(code));\n\t\tmemset(str, '\\0', sizeof(str));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\nstruct tbl_t {\n\tint c;\n\tint l;\n\tunsigned char b; // LSB aligned\n} tbl[]= {\n\t{'A', 6, 0x25},\n\t{'B', 8, 0x9a},\n\t{'C', 4, 0x05},\n\t{'D', 4, 0x01},\n\t{'E', 3, 0x06},\n\t{'F', 5, 0x09},\n\t{'G', 8, 0x9b},\n\t{'H', 6, 0x10},\n\t{'I', 4, 0x07},\n\t{'J', 8, 0x98},\n\t{'K', 4, 0x06},\n\t{'L', 5, 0x04},\n\t{'M', 8, 0x99},\n\t{'N', 8, 0x9e},\n\t{'O', 5, 0x05},\n\t{'P', 3, 0x07},\n\t{'Q', 8, 0x9f},\n\t{'R', 4, 0x08},\n\t{'S', 5, 0x06},\n\t{'T', 5, 0x07},\n\t{'U', 8, 0x9c},\n\t{'V', 8, 0x9d},\n\t{'W', 6, 0x02},\n\t{'X', 8, 0x92},\n\t{'Y', 8, 0x93},\n\t{'Z', 8, 0x90},\n\t{' ', 3, 0x05},\n\t{'.', 6, 0x11},\n\t{',', 6, 0x03},\n\t{'-', 8, 0x91},\n\t{'\\'',6, 0x00},\n\t{'?', 6, 0x01},\n};\nint index(int c){\n\tint i;\n\tfor(i=0;i<sizeof(tbl)/sizeof(*tbl);i++)\n\t\tif(tbl[i].c==c)\n\t\t\treturn i;\n\texit(1);\n}\nint main(){\n\tint c,b=0,l=0,i;\n\twhile(c=getchar(),c+1){\n\t\tif(c=='\\n'){\n\t\t\tb<<=5-l;\n\t\t\tputchar(tbl[b&31].c);\n\t\t\tputchar('\\n');\n\t\t\tl=0;\n\t\t} else {\n\t\t\ti=index(c);\n\t\t\tb=b<<tbl[i].l|tbl[i].b;\n\t\t\tl+=tbl[i].l;\n\t\t\twhile(l>=5){\n\t\t\t\tputchar(tbl[b>>(l-5)&31].c);\n\t\t\t\tl-=5;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "/* AOJ 0088\n *\n * http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0088\n *\n */\n\n#include <stdio.h>\n#include <string.h>\n\n#define BUFSIZE 1024\n#define DEBUG 0\n\n\nchar* mapping(char c){\n    switch(c){\n        case ' ': return \"101\";\n        case '\\'': return \"000000\";\n        case ',': return \"000011\";\n        case '-': return \"10010001\";\n        case '.': return \"010001\";\n        case '?': return \"000001\";\n        case 'A': return \"100101\";\n        case 'B': return \"10011010\";\n        case 'C': return \"0101\";\n        case 'D': return \"0001\";\n        case 'E': return \"110\";\n        case 'F': return \"01001\";\n        case 'G': return \"10011011\";\n        case 'H': return \"010000\";\n        case 'I': return \"0111\";\n        case 'J': return \"10011000\";\n        case 'K': return \"0110\";\n        case 'L': return \"00100\";\n        case 'M': return \"10011001\";\n        case 'N': return \"10011110\";\n        case 'O': return \"00101\";\n        case 'P': return \"111\";\n        case 'Q': return \"10011111\";\n        case 'R': return \"1000\";\n        case 'S': return \"00110\";\n        case 'T': return \"00111\";\n        case 'U': return \"10011100\";\n        case 'V': return \"10011101\";\n        case 'W': return \"000010\";\n        case 'X': return \"10010010\";\n        case 'Y': return \"10010011\";\n        case 'Z': return \"10010000\";\n        default:\n                  break;\n    }\n    return \"\";\n}\n\n\nint encode(char* src, char* dst){\n    int len;\n    char* s;\n    len = 0;\n    while(*src){\n        s = mapping(*src);\n        len += strlen(s);\n        if(DEBUG)\n            printf(\"%c -> %s\\n\", *src, s);\n        while(*s){\n            *dst++ = *s++;\n        }\n        src++;\n    }\n    return len;\n}\n\nint to_int(char* src){\n    int i;\n    int r;\n    r = 0;\n    for(i=0;i<5;i++){\n        if(DEBUG)\n            printf(\"%c\", *(src+i));\n        r = r << 1;\n        r += (*(src+i) - '0');\n    }\n    return r;\n}\n\nchar dump(char* src){\n    int i;\n    if(DEBUG)\n        printf(\"\\n\");\n    i = to_int(src);\n    if(DEBUG)\n        printf(\"-> %d -> \", i);\n    switch(i){\n        case 0b11010: return ' ';\n        case 0b11011: return '.';\n        case 0b11100: return ',';\n        case 0b11101: return '-';\n        case 0b11110: return '\\'';\n        case 0b11111: return '?';\n        default:\n            return i + 'A';\n    }\n}\n\n\nint main(){\n    char buf[83];\n    char stream[BUFSIZE];\n    int i;\n    int len;\n    int padding;\n\n    while(fgets(buf, 80, stdin)){\n        len = encode(buf, stream);\n        if(len%5){\n            padding = 5 - len%5;\n        }else{\n            padding = 0;\n        }\n        for(i=0; i < padding; i++){\n            *(stream+len+i) = '0';\n        }\n        for(i=0; i< len+padding; i+=5){\n            printf(\"%c\",dump(stream+i));\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\nint main(){\n  int m,i;\n  char s[102];\n  //char c[801];\n  const char p1[32][9]={\n    \"101\",\"000000\",\"000011\",\"10010001\",\n    \"010001\",\"000001\",\"100101\",\"10011010\",\n    \"0101\",\"0001\",\"110\",\"01001\",\n    \"10011011\",\"010000\",\"0111\",\"10011000\",\n    \"0110\",\"00100\",\"10011001\",\"10011110\",\n    \"00101\",\"111\",\"10011111\",\"1000\",\n    \"00110\",\"00111\",\"10011100\",\"10011101\",\n    \"000010\",\"10010010\",\"10010011\",\"10010010\"};\n  while(fgets(s,101,stdin)!=NULL){\n    char c[801]={0};\n    char a[170]={0};\n    for(i=0;s[i]!=10;i++){\n      if     (s[i]==' ') m=0;\n      else if(s[i]=='\\'')m=1;\n      else if(s[i]==',') m=2;\n      else if(s[i]=='-') m=3;\n      else if(s[i]=='.') m=4;\n      else if(s[i]=='?') m=5;\n      else if(s[i]=='\\n')m=0;\n      else               m=6+s[i]-'A';\n      strcat(c,p1[m]);\n    }//printf(\"%s\",c);\n    for(i=0;c[i]!=0;i+=5){\n      m=0;\n      if(c[i]=='1')m+=16;\n      if(c[i+1]=='1')m+=8;\n      if(c[i+2]=='1')m+=4;\n      if(c[i+3]=='1')m+=2;\n      if(c[i+4]=='1')m+=1;\n      if(m<26)a[i/5]='A'+m;\n      else if(m==26)a[i/5]=' ';\n      else if(m==27)a[i/5]='.';\n      else if(m==28)a[i/5]=',';\n      else if(m==29)a[i/5]='-';\n      else if(m==30)a[i/5]='\\'';\n      else if(m==31)a[i/5]='?';\n    }\n    printf(\"%s\\n\",a);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n \n#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include<stdlib.h>\n#include<stdarg.h>\n#include<malloc.h>\n\nvoid convert(char, char cd[10]);\nchar convert2(char cd[8]);\n\nint main()\n{\n\tchar str[1000], code[1000][10]={0}, lcode[10000], buf[8]={0};\n\tint i, j, len, block;\n\n\twhile(gets(str) != NULL){\n\t\tlen = strlen(str);\n\n\t\tfor(i=0; i<len; i++){\n\t\t\tconvert(str[i], code[i]);\n\t\t}\n\n\t\tstrcpy(lcode, code[0]);\n\t\tfor(i=1; i<len; i++)\n\t\t\tstrcat(lcode, code[i]);\n\n\t\tlen = strlen(lcode);\n\n\t\tif(len % 5 != 0)\n\t\t\tblock = len / 5 + 1;\n\t\telse\n\t\t\tblock = len / 5;\n\n\t\tfor(i=0; i<block; i++){\n\t\t\tif(i != block-1){\n\t\t\t\tfor(j=0; j<5; j++){\n\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor(j=0; j<5; j++)\n\t\t\t\t\tbuf[j] = '0';\n\t\t\t\tif(len % 5 == 0){\n\t\t\t\t\tfor(j=0; j<5; j++)\n\t\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t} else {\n\t\t\t\t\tfor(j=0; j<len%5; j++)\n\t\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%c\", convert2(buf));\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\t\n\treturn 0;\n}\n\nvoid convert(char c, char cd[10])\n{\n\tint i;\n\tchar a[32][10] = {\n\t\t\"101\", \"000000\", \"000011\", \"10010001\",\n\t\t\"010001\", \"000001\", \"100101\", \"10011010\",\n\t\t\"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\",\n\t\t\"0110\", \"00100\", \"10011001\", \"10011110\",\n\t\t\"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\",\n\t\t\"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tchar b[32] = {' ', '\\'', ',', '-', '.', '?'};\n\n\tfor(i=6; i<32; i++)\n\t\tb[i] = 'A' - 6 + i;\n\n\tfor(i=0; i<32; i++){\n\t\tif(c == b[i]){\n\t\t\tstrcpy(cd, a[i]);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn;\n}\n\nchar convert2(char cd[8])\n{\n\tchar a[32][8] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\",\n\t\t\"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\",\n\t\t\"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\",\n\t\t\"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\",\n\t\t\"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\tchar b[32] = {\n\t\t'A','B','C','D','E','F','G','H',\n\t\t'I','J','K','L','M','N','O','P',\n\t\t'Q','R','S','T','U','V','W','X',\n\t\t'Y','Z',' ','.',',','-','\\'','?'\n\t};\n\tint i;\n\n\tfor(i=0; i<32; i++){\n\t\tif(strcmp(cd, a[i]) == 0){\n\t\t\treturn b[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint main(void)\n{\n\tchar before[32][9] = { \n\t\t\"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\",\n\t\t\"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\",\n\t\t\"10010010\", \"10010011\", \"10010000\", \"101\", \"000000\", \"000011\",\n\t\t\"10010001\", \"010001\", \"000001\"\n\t};\n\tchar after[32][6] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\",\n\t\t\"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\",\n\t\t\"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\",\n\t\t\"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\",\n\t\t\"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\t\n\tchar str[512], str2[2048];\n\tint i, j, len;\n\t\n\twhile (fgets(str, 512, stdin) != NULL){\n\t\tfor (i = 0; i < 128; i++){\n\t\t\tstr2[i] = '\\0';\n\t\t}\n\t\t\n\t\ti = 0;\n\t\twhile (str[i] != '\\0'){\n\t\t\tif (str[i] >= 'A' && str[i] <= 'Z'){\n\t\t\t\tstrcat(str2, before[str[i] - 'A']);\n\t\t\t}\n\t\t\tswitch (str[i]){\n\t\t\t\tcase ' ':\n\t\t\t\tstrcat(str2, before[26]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '.':\n\t\t\t\tstrcat(str2, before[27]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase ',':\n\t\t\t\tstrcat(str2, before[28]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '-':\n\t\t\t\tstrcat(str2, before[29]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '\\'':\n\t\t\t\tstrcat(str2, before[30]);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase '?':\n\t\t\t\tstrcat(str2, before[31]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tlen = strlen(str2);\n\t\twhile (len % 5 != 0){\n\t\t\tstrcat(str2, \"0\");\n\t\t\tlen++;\n\t\t}\n\t\t\n\t\ti = 0;\n\t\twhile (len - i > 0){\n\t\t\tfor (j = 0; j < 32; j++){\n\t\t\t\tif (strncmp(&str2[i], after[j], 5) == 0){\n\t\t\t\t\tif (j >= 0 && j <= 25){\n\t\t\t\t\t\tprintf(\"%c\", j + 'A');\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tswitch (j){\n\t\t\t\t\t\t\tcase 26:\n\t\t\t\t\t\t\tprintf(\" \");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 27:\n\t\t\t\t\t\t\tprintf(\".\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 28:\n\t\t\t\t\t\t\tprintf(\",\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 29:\n\t\t\t\t\t\t\tprintf(\"-\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 30:\n\t\t\t\t\t\t\tprintf(\"\\'\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 31:\n\t\t\t\t\t\t\tprintf(\"?\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\ti += 5;\n\t\t}\n\t\t\n\t\tputs(\"\");\n\t}\n\t\n\treturn (0);\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define NUL 0x00\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\n#define TEXT_MAX 100\n\nint main(void)\n{\n\tshort i = 0;\n\tshort j = 0;\n\n\tshort text_length = 0;\n\tchar input_text[TEXT_MAX];\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tchar barcode[801];\n\tchar code_fivecut[160][5];\n\t\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"text_length=%d\\n\",text_length);\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"barcode = %s\\n\",barcode);\n\t\t\n\t\tint barcode_length = 0;\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"barcode_length =%d\\n\", barcode_length);\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t\t//printf(\"c=%d\\n\",c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor(i = 0;i < 800 ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"count= %d\\n\",count);\n\t\t\n\t\t/*\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tprintf(\"a = %c\",code_fivecut[i][j]);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}*/\n\t\t\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(k = 0; k < CIPHER_NUM; k++)\n\t\t\t{\n\t\t\t\tfor(l = 0; l < 5; l++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][l] == code[k].sign_change_charcter[l])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[k].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\tinput_text[i] = NUL;\n\t\t}\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < 160;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  while(1) {\n    if(!gets(d)) return 0;\n    e[0] = '\\0';\n    i = 0;\n    while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n    i = 5 - strlen(e) % 5;\n    while(i--) strcat(e,\"0\");\n    i = 0;\n    while(e[i] != '\\0') {\n      j = 0;\n      k = 4;\n      do {\n\tj += (e[i++] - '0') << k;\n      } while(k--);\n      putc(c[j],stdout);\n    }\n    putc('\\n',stdout);\n  }\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n// 32 - \nconst char *c2b[] = {\n    \"101\", \"\", \"\", \"\", \"\", \"\", \"\", \"000000\", \"\", \"\", \"\", \"\",\n    \"000011\", \"10010001\", \"010001\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \n    \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"000001\", \"\", \"100101\", \n    \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\",\n    \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\",\n    \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\",\n    \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\",\n    \"10010011\", \"10010000\"\n};\n\nconst char b2c[] = {\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n    'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', \n    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n    'Y', 'Z', ' ', '.', ',', '-', '\\'', '?'\n};\n\nvoid print_char(const char *code) {\n    int i, v = 0;\n    for (i = 0; i < 5; i++) {\n        v <<= 1;\n        v += code[i] == '1';\n    }\n    putc(b2c[v], stdout);\n}\n\nint main(void) {\n    int c, codelen, bpos;\n    const char *bcode, *cur;\n    char codebuf[6];\n\n    codelen = 0;\n    bpos = 0;\n    cur = c2b[1];\n    while (1) {\n        c = getc(stdin);\n        if (c == '\\n' || c == EOF) {\n            if (codelen > 0) {\n                for (; bpos < 5; bpos++) {\n                    if (*cur == '\\0') {\n                        codebuf[bpos] = '0';\n                    }\n                    else {\n                        codebuf[bpos]= *cur++;\n                    }\n                }\n                print_char(codebuf);\n                codelen = 0;\n                bpos = 0;\n            }\n            if (c == EOF) return 0;\n            putc(c, stdout);\n            continue;\n        }\n\n        bcode = c2b[c - 32];\n        codelen += strlen(bcode);\n        for (; bpos < 5; bpos++) {\n            if (*cur == '\\0') {\n                if (bcode != NULL) {\n                    cur = bcode;\n                    bcode = NULL;\n                }\n                else {\n                    break;\n                }\n            }\n            codebuf[bpos] = *cur++;\n        }\n        while (codelen >= 5) {\n            for (; bpos < 5; bpos++, cur++) {\n                codebuf[bpos] = *cur;\n            }\n            print_char(codebuf);\n            bpos = 0;\n            codelen -= 5;\n        }\n    }\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  d[0] = '\\0';\n  //while(1) {\n    gets(e);\n    if(feof(stdin)) break;\n    strcat(d,e);\n    strcat(d,\" \");\n    //}\n  d[strlen(d) - 1] = '\\0';\n  e[0] = '\\0';\n  i = 0;\n  while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n  i = 5 - strlen(e) % 5;\n  while(i--) strcat(e,\"0\");\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\nint main() {\n\tchar str[200] = \"\", code[100000] = \"\";\n\tchar *pstr, *pcode;\n\tint x, b, base;\n\n\twhile (fgets(str,sizeof(str),stdin)!=NULL) {\n\t\tpstr = &str[0];\n\t\tpcode = &code[0];\n\t\twhile (*pstr) {\n\t\t\tswitch (*pstr) {\n\t\t\tcase 'O': strcat(pcode, \"0\"); case 'C': strcat(pcode, \"0\"); case ' ': strcat(pcode, \"101\"); break;\n\t\t\tcase '\\'': strcat(pcode, \"000000\"); break;\n\t\t\tcase ',': strcat(pcode, \"000011\"); break;\n\t\t\tcase '-': strcat(pcode, \"1001\"); case 'D': strcat(pcode, \"0001\"); break;\n\t\t\tcase '.': strcat(pcode, \"010001\"); break;\n\t\t\tcase 'T': strcat(pcode, \"0\"); case 'I': strcat(pcode, \"0\"); case 'P': strcat(pcode, \"111\"); break;\n\t\t\tcase 'S': strcat(pcode, \"0\"); case 'K': strcat(pcode, \"0\"); case 'E': strcat(pcode, \"110\"); break;\n\t\t\tcase 'A': strcat(pcode, \"100101\"); break;\n\t\t\tcase 'B': strcat(pcode, \"10011010\"); break;\n\t\t\tcase 'F': strcat(pcode, \"01001\"); break;\n\t\t\tcase 'G': strcat(pcode, \"10011011\"); break;\n\t\t\tcase 'H': strcat(pcode, \"010000\"); break;\n\t\t\tcase 'J': strcat(pcode, \"1001\"); case 'R': strcat(pcode, \"1000\"); break;\n\t\t\tcase 'L': strcat(pcode, \"00100\"); break;\n\t\t\tcase 'M': strcat(pcode, \"10011001\"); break;\n\t\t\tcase 'N': strcat(pcode, \"10011110\"); break;\n\t\t\tcase 'Q': strcat(pcode, \"10011111\"); break;\n\t\t\tcase 'U': strcat(pcode, \"10011100\"); break;\n\t\t\tcase 'V': strcat(pcode, \"10011101\"); break;\n\t\t\tcase 'W': strcat(pcode, \"000010\"); break;\n\t\t\tcase 'X': strcat(pcode, \"10010010\"); break;\n\t\t\tcase 'Y': strcat(pcode, \"10010011\"); break;\n\t\t\tcase 'Z': strcat(pcode, \"10010000\"); break;\n\t\t\tcase '?': strcat(pcode, \"000001\"); break;\n\t\t\tdefault:break;\n\t\t\t}\n\t\t\tpstr++;\n\t\t}\n\t\twhile (strlen(pcode) % 5) strcat(pcode, \"0\");\n\t\twhile (*pcode) {\n\t\t\tsprintf(str, \"%.5s\", pcode);\n\t\t\tpcode += 5;\n\t\t\tb = atoi(str);\n\t\t\tbase = 1, x = 0;\n\t\t\twhile (b > 0) {\n\t\t\t\tx += (b % 10)*base;\n\t\t\t\tb /= 10;\n\t\t\t\tbase *= 2;\n\t\t\t}\n\t\t\tif (x == 26) x = ' ' - 'A';\n\t\t\telse if (x == 27) x = '.' - 'A';\n\t\t\telse if (x == 28) x = ',' - 'A';\n\t\t\telse if (x == 29) x = '-' - 'A';\n\t\t\telse if (x == 30) x = '\\'' - 'A';\n\t\t\telse if (x == 31) x = '?' - 'A';\n\t\t\tprintf(\"%c\", 'A' + x);\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tmemset(code, '\\0', sizeof(code));\n\t\tmemset(str, '\\0', sizeof(str));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  d[0] = '\\0';\n  while(gets(e)) {\n    strcat(d,e);\n    strcat(d,\" \");\n  }\n  d[strlen(d)] = '\\0';\n  e[0] = '\\0';\n  i = 0;\n  while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n  i = 5 - strlen(e) % 5;\n  while(i--) strcat(e,\"0\");\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  putc('\\n',stdout);\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  d[0] = '\\0';\n  while(fgets(e,4096,stdin)) {\n    *strchr(e,'\\n') = ' ';\n    strcat(d,e);\n  }\n  d[strlen(d) - 1] = '\\0';\n  e[0] = '\\0';\n  i = 0;\n  while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n  i = 5 - strlen(e) % 5;\n  while(i--) strcat(e,\"0\");\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nchar t[32][12]={\n\t\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n\t\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\n\t\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\n\t\"10010011\",\"10010000\",\n\t\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\"\n};\n\nint main(void){\n\tint i,j;\n\tchar c,s[2048],f[8],*e;\n\n\twhile(1){\n\t\ti = 0;\n\t\twhile(1){\n\t\t\tc = getchar();\n\n\t\t\tif(c==EOF) return 0;\n\t\t\telse if(c=='\\n') break;\n\t\t\telse if(isalpha(c)) j = c - 'A';\n\t\t\telse if(c==' ') j = 26;\n\t\t\telse if(c=='.') j = 27;\n\t\t\telse if(c==',') j = 28;\n\t\t\telse if(c=='-') j = 29;\n\t\t\telse if(c=='\\'') j = 30;\n\t\t\telse j = 31;\n\n\t\t\tstrcpy(&s[i],t[j]);\n\t\t\ti += strlen(t[j]);\n\t\t}\n\t\tif(i % 5 != 0){\n\t\t\tfor(;i%5!=0;i++) s[i] = '0';\n\t\t\ts[i] = 0;\n\t\t}\n\n\t\tfor(i=0;s[i]!=0;i+=5){\n\t\t\tstrncpy(f,&s[i],5);\n\t\t\tf[5] = 0;\n\n\t\t\tj = strtol(f,&e,2);\n\n\t\t\tif(j<26) putchar('A'+j);\n\t\t\telse if(j==26) putchar(' ');\n\t\t\telse if(j==27) putchar('.');\n\t\t\telse if(j==28) putchar(',');\n\t\t\telse if(j==29) putchar('-');\n\t\t\telse if(j==30) putchar('\\'');\n\t\t\telse putchar('?');\n\t\t}\n\n\t\tputchar('\\n');\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[4096];\n  unsigned char *p;\n  i = 0;\n  while((k = getc(stdin)) != EOF) {\n    j = 0;\n    while(*(a + j) != k) j++;\n    p = b[j];\n    while(*p) d[i++] = *p++;\n  }\n  j = 5 - i % 5;\n  while(j--) d[i++] = '0';\n  d[i] = '\\0';\n  i = 0;\n  while(d[i]) {\n    j = 0;\n    k = 4;\n    do {\n      j += (d[i++] - '0') << k;\n    } while(k--);\n    putc(*(c + j),stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  d[0] = '\\0';\n  while(1) {\n    gets(e);\n    if(feof(stdin)) break;\n    strcat(d,e);\n    strcat(d,\" \");\n  }\n  d[strlen(d) - 1] = '\\0';\n  e[0] = '\\0';\n  i = 0;\n  while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n  i = 5 - strlen(e) % 5;\n  while(i--) strcat(e,\"0\");\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\nint main(){\n  char c[]={\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"};\n  char w[][9]={\n    \"101\"     ,\n    \"000000\"  , \n    \"000011\"  ,\n    \"10010001\",\n    \"010001\"  ,\n    \"000001\"  ,\n    \"100101\"  ,\n    \"10011010\",\n    \"0101\"   ,\n    \"0001\"    ,\n    \"110\"     ,\n    \"01001\"   ,\n    \"10011011\",\n    \"010000\"  ,\n    \"0111\"    ,\n    \"10011000\",\n    \"0110\"    ,\n    \"00100\"   ,\n    \"10011001\",\n    \"10011110\",\n    \"00101\"   ,\n    \"111\"     ,\n    \"1001111\" ,\n    \"1000\"    ,\n    \"00110\"   ,\n    \"00111\"   ,\n    \"10011100\",\n    \"10011101\",\n    \"000010\"  ,\n    \"10010010\",\n    \"10010011\",\n    \"10010000\"\n  };\n  char n[102];\n  //char s[920]={0};\n  int i,j;\n  while(fgets(n,101,stdin)!=NULL){\n    char s[920]={0};\n    for(i=0;n[i+1];i++){\n      for(j=0;n[i]!=c[j];j++);\n      strcat(s,w[j]);\n    }//printf(\"%s\\n\",s);\n    for(i=j=0;s[i];i++){\n      j*=2;\n      if(s[i]=='1')j++;\n      if(i%5==4){\n\tprintf(\"%c\",c[j+6]);\n\tj=0;\n      }\n    }\n    if(i%5){\n      for(;i%5!=0;i++)j*=2;\n      printf(\"%c\",c[j+6]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[4096];\n  unsigned char *p;\n  i = 0;\n  while((k = getc(stdin)) != EOF){\n    j = 0;\n    while(*(a + j) != k) j++;\n    p = b[j];\n    while(*p) d[i++] = *p++;\n  }\n  while(i % 5) d[i++] = '0';\n  d[i] = '\\0';\n  i = 0;\n  while(d[i]) {\n    j = 0;\n    k = 4;\n    do {\n      j += (d[i++] - '0') << k;\n    } while(k--);\n    putc(*(c + j),stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "/*\nAizuOnline A0088\nThe Code A Doctor Loved\n2012/12/31 WA\n*/\n#include <stdio.h>\n// Select Below\n//#include <stdlib.h>\n#include <string.h>\n//#include <float.h>\n//#include <math.h>\n//Global data section\n\nchar heibun[1000];\nchar s1[10000];\nchar s2[2000];\n\nchar *step1table[]={\n//  SP ' , - . ?\n        \"101\",\n\t\"000000\",\n\t\"000011\",\n\t\"10010001\",\n\t\"010001\",\n\t\"000001\",\n// A-B\n\t\"100101\",\n\t\"10011010\",\n// C-J\n\t\"0101\",\n\t\"0001\",\n\t\"110\",\n\t\"01001\",\n\t\"10011011\",\n\t\"010000\",\n\t\"0111\",\n\t\"10011000\",\n// K-R\n\t\"0110\",\n\t\"00100\",\n\t\"10011001\",\n\t\"10011110\",\n\t\"00101\",\n\t\"111\",\n\t\"10011111\",\n\t\"1000\",\n// S-Z\n\t\"00110\",\n\t\"00111\",\n\t\"10011100\",\n\t\"10011101\",\n\t\"000010\",\n\t\"10010010\",\n\t\"10010011\",\n\t\"10010000\"};\nint conv(char c)\n{\n  //printf(\"%c\",c);\n  char *x;\n  char compared[] = \" ',-.?\";\n  if(NULL != (x = strchr(compared,c)))\n    return(x - compared);\n  return(c - 'A' + 6);    \n}\nvoid step1()\n{\n  char *s,c;\n\n  s=heibun;\n  s1[0]='\\0';\n  while(c=*s++)\n    {\n      //printf(\"%c %s\\n\",c,step1table[conv(c)]);\n      strcat(s1,step1table[conv(c)]);\n    }\n  strcat(s1,\"0000\");\n}\nint conv5bin(char *s)\n{\n  //printf(\"%5s\\n\",s);\n  int sum;\n  sum  = (s[0]=='1')?16:0;\n  sum += (s[1]=='1')?8:0;\n  sum += (s[2]=='1')?4:0;\n  sum += (s[3]=='1')?2:0;\n  sum += (s[4]=='1')?1:0;\n  return(sum);\n}\nvoid step2()\n{\n  int s2ptr;\n  int i;\n\n  s2ptr=0;\n  for(i=0;i<strlen(s1);i+=5)\n    s2[s2ptr++]=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[conv5bin(&(s1[i]))];\n  s2ptr='\\0';\n}\nmain()\n{\n  int i;\n\n  while(NULL != gets(heibun))\n    {\n      \n      for(i=0;i<2000;i++)\n\ts2[i]='\\0';\n      \n\n      step1();\n      step2();\n\n\n      //printf(\"%s\\n\",s1);\n      printf(\"%s\\n\",s2);\n    }\nreturn(0);\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\nint main(){\n  int i;\n  int len;\n  char s[1024],t[8192],u[6];\n  while(fgets(s,1024,stdin)!=0){\n    s[strlen(s)-1]=0;\n    t[0]=0;\n    len=strlen(s);\n    for(i=0;i<len;i++){\n      switch(s[i]){\n      case 'A':sprintf(t,\"%s100101\",t);break;\n      case 'B':sprintf(t,\"%s10011010\",t);break;\n      case 'C':sprintf(t,\"%s0101\",t);break;\n      case 'D':sprintf(t,\"%s0001\",t);break;\n      case 'E':sprintf(t,\"%s110\",t);break;\n      case 'F':sprintf(t,\"%s01001\",t);break;\n      case 'G':sprintf(t,\"%s10011011\",t);break;\n      case 'H':sprintf(t,\"%s010000\",t);break;\n      case 'I':sprintf(t,\"%s0111\",t);break;\n      case 'J':sprintf(t,\"%s10011000\",t);break;\n      case 'K':sprintf(t,\"%s0110\",t);break;\n      case 'L':sprintf(t,\"%s00100\",t);break;\n      case 'M':sprintf(t,\"%s10011001\",t);break;\n      case 'N':sprintf(t,\"%s10011110\",t);break;\n      case 'O':sprintf(t,\"%s00101\",t);break;\n      case 'P':sprintf(t,\"%s111\",t);break;\n      case 'Q':sprintf(t,\"%s10011111\",t);break;\n      case 'R':sprintf(t,\"%s1000\",t);break;\n      case 'S':sprintf(t,\"%s00110\",t);break;\n      case 'T':sprintf(t,\"%s00111\",t);break;\n      case 'U':sprintf(t,\"%s10011100\",t);break;\n      case 'V':sprintf(t,\"%s10011101\",t);break;\n      case 'W':sprintf(t,\"%s000010\",t);break;\n      case 'X':sprintf(t,\"%s10010010\",t);break;\n      case 'Y':sprintf(t,\"%s10010011\",t);break;\n      case 'Z':sprintf(t,\"%s10010000\",t);break;\n      case ' ':sprintf(t,\"%s101\",t);break;\n      case 39 :sprintf(t,\"%s000000\",t);break;\n      case '-':sprintf(t,\"%s000011\",t);break;\n      case '.':sprintf(t,\"%s10010001\",t);break;\n      case '?':sprintf(t,\"%s010001\",t);break;\n      }\n    }\n    len=strlen(t);\n    for(i=0;i<(5-len%5)%5;i++)\n      sprintf(t,\"%s0\",t);\n    len=strlen(t);\n    for(i=0;i<len;i+=5){\n      switch(atoi(strncpy(u,t+i,5))){\n      case 0:printf(\"A\");break;\n      case 1:printf(\"B\");break;\n      case 10:printf(\"C\");break;\n      case 11:printf(\"D\");break;\n      case 100:printf(\"E\");break;\n      case 101:printf(\"F\");break;\n      case 110:printf(\"G\");break;\n      case 111:printf(\"H\");break;\n      case 1000:printf(\"I\");break;\n      case 1001:printf(\"J\");break;\n      case 1010:printf(\"K\");break;\n      case 1011:printf(\"L\");break;\n      case 1100:printf(\"M\");break;\n      case 1101:printf(\"N\");break;\n      case 1110:printf(\"O\");break;\n      case 1111:printf(\"P\");break;\n      case 10000:printf(\"Q\");break;\n      case 10001:printf(\"R\");break;\n      case 10010:printf(\"S\");break;\n      case 10011:printf(\"T\");break;\n      case 10100:printf(\"U\");break;\n      case 10101:printf(\"V\");break;\n      case 10110:printf(\"W\");break;\n      case 10111:printf(\"X\");break;\n      case 11000:printf(\"Y\");break;\n      case 11001:printf(\"Z\");break;\n      case 11010:printf(\" \");break;\n      case 11011:printf(\".\");break;\n      case 11100:printf(\",\");break;\n      case 11101:printf(\"-\");break;\n      case 11110:printf(\"'\");break;\n      case 11111:printf(\"?\");break;\n      }\n    }\n    puts(\"\");\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n \n#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include<stdlib.h>\n#include<stdarg.h>\n#include<malloc.h>\n\nvoid convert(char, char cd[10]);\nchar convert2(char cd[8]);\n\nint main()\n{\n\tchar str[1000], code[1000][10]={0}, lcode[10000], buf[8]={0};\n\tint i, j, len, block;\n\n\twhile(gets(str) != NULL){\n\n\t\tlen = strlen(str);\n\n\t\tfor(i=0; i<len; i++){\n\t\t\tconvert(str[i], code[i]);\n\t\t}\n\n\t\tstrcpy(lcode, code[0]);\n\t\tfor(i=1; i<len; i++)\n\t\t\tstrcat(lcode, code[i]);\n\n\t\tlen = strlen(lcode);\n\n\t\tif(len % 5 != 0)\n\t\t\tblock = len / 5 + 1;\n\t\telse\n\t\t\tblock = len / 5;\n\n\t\tfor(i=0; i<block; i++){\n\t\t\tif(i != block-1){\n\t\t\t\tfor(j=0; j<5; j++){\n\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor(j=0; j<5; j++)\n\t\t\t\t\tbuf[j] = '0';\n\t\t\t\tif(len % 5 == 0){\n\t\t\t\t\tfor(j=0; j<5; j++)\n\t\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t} else {\n\t\t\t\t\tfor(j=0; j<len%5; j++)\n\t\t\t\t\t\tbuf[j] = lcode[5*i+j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%c\", convert2(buf));\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\t\n\treturn 0;\n}\n\nvoid convert(char c, char cd[10])\n{\n\tint i;\n\tchar a[32][10] = {\n\t\t\"101\", \"000000\", \"000011\", \"10010001\",\n\t\t\"010001\", \"000001\", \"100101\", \"10011010\",\n\t\t\"0101\", \"0001\", \"110\", \"01001\",\n\t\t\"10011011\", \"010000\", \"0111\", \"10011000\",\n\t\t\"0110\", \"00100\", \"10011001\", \"10011110\",\n\t\t\"00101\", \"111\", \"10011111\", \"1000\",\n\t\t\"00110\", \"00111\", \"10011100\", \"10011101\",\n\t\t\"000010\", \"10010010\", \"10010011\", \"10010000\"\n\t};\n\tchar b[32] = {' ', '\\'', ',', '-', '.', '?'};\n\n\tfor(i=6; i<32; i++)\n\t\tb[i] = 'A' - 6 + i;\n\n\tfor(i=0; i<32; i++){\n\t\tif(c == b[i]){\n\t\t\tstrcpy(cd, a[i]);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn;\n}\n\nchar convert2(char cd[8])\n{\n\tchar a[32][8] = {\n\t\t\"00000\", \"00001\", \"00010\", \"00011\",\n\t\t\"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\",\n\t\t\"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\",\n\t\t\"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\",\n\t\t\"11100\", \"11101\", \"11110\", \"11111\"\n\t};\n\tchar b[32] = {\n\t\t'A','B','C','D','E','F','G','H',\n\t\t'I','J','K','L','M','N','O','P',\n\t\t'Q','R','S','T','U','V','W','X',\n\t\t'Y','Z',' ','.',',','-','\\'','?'\n\t};\n\tint i;\n\n\tfor(i=0; i<32; i++){\n\t\tif(strcmp(cd, a[i]) == 0){\n\t\t\treturn b[i];\n\t\t\tbreak;\n\t\t}\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\nmain()\n{\n  int i,j,k;\n  unsigned char *a = \"\\n ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  unsigned char *b[] = {\n    \"101\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  unsigned char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  unsigned char d[4096];\n  unsigned char *p;\n  i = 0;\n  while((k = getc(stdin)) != EOF){\n    j = 0;\n    //while(*(a + j) != k) j++;\n    //p = b[j];\n    //while(*p) d[i++] = *p++;\n  }\n  j = 5 - i % 5;\n  while(j--) d[i++] = '0';\n  d[i] = '\\0';\n  i = 0;\n  while(d[i]) {\n    j = 0;\n    k = 4;\n    do {\n      j += (d[i++] - '0') << k;\n    } while(k--);\n    putc(*(c + j),stdout);\n  }\n  */\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define CODE_MAX 801\n#define NUL 0x00\n#define INITIALIZE 0\n#define TEXT_MAX 100\n#define FIVE 5\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\nint main(void)\n{\n\tshort i = INITIALIZE;\n\tshort j = INITIALIZE;\n\tshort text_length = INITIALIZE;\n\tchar input_text[TEXT_MAX];\n\t\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\t\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\tinput_text[i] = NUL;\n\t\t}\n\t\tfor(i = 0; i < CODE_MAX-1; i++)//配列の最後(800番目)には\\0が入るためマイナス1してある\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < 160;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint barcode_length = 0;\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor(i = 0;i < CODE_MAX ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint k = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < 5; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[j].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define CODE_MAX 801\n#define NUL 0x00\n#define INITIALIZE 0\n#define TEXT_MAX 101\n#define FIVE 5\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\nint main(void)\n{\n\t\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tunsigned short i = INITIALIZE;\n\tunsigned short j = INITIALIZE;\n\tunsigned short k = INITIALIZE;\n\t\t\n\t\n\tchar input_text[TEXT_MAX];\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tunsigned short text_length = INITIALIZE;\n\t\tunsigned short barcode_length = INITIALIZE;\n\t\tunsigned int count = INITIALIZE;\n\t\tint c = 0;\n\t\tint cc = 0;\n\t\tchar barcode[CODE_MAX];\n\t\tchar code_fivecut[CODE_MAX / FIVE][FIVE];/*160:5*/\n\n\t\t\n\t\t\n\t\tfor(i = 0; i < CODE_MAX - 1; i++)//配列の最後(800番目)には\\0が入るためマイナス1してある\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX / FIVE;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < FIVE; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0;i < CODE_MAX ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < FIVE; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[j].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\nint main(){\n  int m,i;\n  char s[102];\n  //char c[801];\n  const char p1[32][9]={\n    \"101\",\"000000\",\"000011\",\"10010001\",\n    \"010001\",\"000001\",\"100101\",\"10011010\",\n    \"0101\",\"0001\",\"110\",\"01001\",\n    \"10011011\",\"010000\",\"0111\",\"10011000\",\n    \"0110\",\"00100\",\"10011001\",\"10011110\",\n    \"00101\",\"111\",\"10011111\",\"1000\",\n    \"00110\",\"00111\",\"10011100\",\"10011101\",\n    \"000010\",\"10010010\",\"10010011\",\"10010010\"};\n  while(fgets(s,101,stdin)!=NULL){\n    char c[801]={0};\n    char a[170]={0};\n    for(i=0;s[i]!=10;i++){\n      if     (s[i]==' ') m=0;\n      else if(s[i]=='\\'')m=1;\n      else if(s[i]==',') m=2;\n      else if(s[i]=='-') m=3;\n      else if(s[i]=='.') m=4;\n      else if(s[i]=='?') m=5;\n      else if(s[i]=='\\n')m=0;\n      else               m=6+s[i]-'A';\n      strcat(c,p1[m]);\n    }//printf(\"%s\",c);\n    for(i=0;c[i]!=0;i+=5){\n      m=0;\n      if(c[i]=='1')m+=16;\n      if(c[i+1]=='1')m+=8;\n      if(c[i+2]=='1')m+=4;\n      if(c[i+3]=='1')m+=2;\n      if(c[i+4]=='1')m+=1;\n      if(m<26)a[i/5]='A'+m;\n      else if(m==26)a[i/5]=' ';\n      else if(m==27)a[i/5]='.';\n      else if(m==28)a[i/5]=',';\n      else if(m==29)a[i/5]='-';\n      else if(m==30)a[i/5]='\\'';\n      else if(m==31)a[i/5]='?';\n    }\n    printf(\"%s\\n\",a);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#define CODE_MAX 10000\n\nint p = 0, p2 = 0;\nshort code[CODE_MAX];\n\n/* letter -> code */\n\n#define BIT_MAX 8\n\nchar* list1[8][2]={\n     {\"',?DW.CFHLOSTIK\", \"-ABGJMNQRUVXYZE P\"},\n     {\"-ABGJMNQRUVXYZ ',?DWLOST\", \"EP.CFHIK\"},\n     {\"E.CFH-ABGJMNQRUVXYZ',?DW\", \"PIK LOST\"},\n     {\"KLO.FHR',?W\", \"ISTC-ABGJMNQUVXYZD\"},\n     {\"S-AXYZL.H'?\", \"TBGJMNQUVOF,W\"},\n     {\"BGJMW-XYZH'\", \"NQUV,A.?\"},\n     {\"UVJM-Z\", \"NQBGXY\"},\n     {\"NBXUJZ\", \"QGYVM-\"}\n};\n\nvoid l2c(char ch)\n{\n     int i, j, k;\n     \n     for(i=0; i<BIT_MAX; i++)\n\t  for(j=0; j<2; j++)\n\t       for(k=0; list1[i][j][k]!='\\0'; k++)\n\t\t    if(list1[i][j][k]==ch)\n\t\t\t code[p++]=j;\n}\n\n/* code -> letter */\n\n#define BIT_MAX2 5\n\nchar* list2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n\nchar c2l()\n{\n     int t = 0, i;\n     \n     for(i=0; i<BIT_MAX2; i++)\n\t  t = (t<<1) + code[p2++];\n     \n     return list2[t];\n}\n\n/* main */\n\nmain()\n{\n     int i; char ch;\n     \n     for(i=0; i<CODE_MAX; i++) code[i]=0;\n\n     while((ch=getchar())!=EOF){\n\t  if(ch=='\\n') ch=' ';\n\t  l2c(ch);\n     }\n\n     while(p2<p) putchar(c2l());\n     \n     puts(\"\");\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  i = 0;\n  while(gets(e)) {\n    j = 0;\n    while(e[j]) d[i++] = e[j++];\n    d[i++] = ' ';\n  }\n  d[i - 1] = '\\0';\n  /*\n  e[0] = '\\0';\n  i = 0;\n  while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n  i = 5 - strlen(e) % 5;\n  while(i--) strcat(e,\"0\");\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  */\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9//符号の文字列の最大の長さ\n#define CIPHER_NUM 32//符号と文字の組み合わせの数\n#define CODE_MAX 801//文字→符号に変換するとき、符号の文字列の最大数\n#define INITIALIZE_NUL 0x00 //char型の初期値\n#define INITIALIZE_CHAR '0' //5文字ごとに区切り、格納する配列に足りない文字数に\"0\"を追加することを考慮した初期値\n#define INITIALIZE_INT 0 //整数型の初期値\n#define LAST_CHAR '\\0' //文字列の最後を判定する文字\n#define TEXT_LENGTH_MAX 101//入力において最大文字数\n#define SECTION 5 //5文字区切り\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];//文字→符号にする時に扱う符号を格納\n\tchar sign_change_charcter[SECTION + 1];//符号→文字にする時に扱う符号を格納\n\tchar character;// 文字を格納\n}CIPHER;\n\n/*二つの表から文字と符号を対応させた初期化*/\nconst CIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\", \"00000\", 'A'},\n\t\t{\"10011010\", \"00001\", 'B'},\n\t\t{\"0101\", \"00010\", 'C'},\n\t\t{\"0001\", \"00011\", 'D'},\n\t\t{\"110\", \"00100\", 'E'},\n\t\t{\"01001\", \"00101\", 'F'},\n\t\t{\"10011011\", \"00110\", 'G'},\n\t\t{\"010000\", \"00111\", 'H'},\n\t\t{\"0111\", \"01000\", 'I'},\n\t\t{\"10011000\", \"01001\", 'J'},\n\t\t{\"0110\", \"01010\", 'K'},\n\t\t{\"00100\", \"01011\", 'L'},\n\t\t{\"10011001\", \"01100\", 'M'},\n\t\t{\"10011110\", \"01101\", 'N'},\n\t\t{\"00101\", \"01110\", 'O'},\n\t\t{\"111\", \"01111\", 'P'},\n\t\t{\"10011111\", \"10000\", 'Q'},\n\t\t{\"1000\", \"10001\", 'R'},\n\t\t{\"00110\", \"10010\", 'S'},\n\t\t{\"00111\", \"10011\", 'T'},\n\t\t{\"10011100\", \"10100\", 'U'},\n\t\t{\"10011101\", \"10101\", 'V'},\n\t\t{\"000010\", \"10110\", 'W'},\n\t\t{\"10010010\", \"10111\", 'X'},\n\t\t{\"10010011\", \"11000\", 'Y'},\n\t\t{\"10010000\", \"11001\", 'Z'},\n\t\t{\"101\", \"11010\", ' '},\n\t\t{\"010001\", \"11011\", '.'},\n\t\t{\"000011\", \"11100\", ','},\n\t\t{\"10010001\", \"11101\", '-'},\n\t\t{\"000000\", \"11110\", '\\''},\n\t\t{\"000001\", \"11111\", '?'}\n\t};\n\nint main(void)\n{\n\t\n\t/*変数宣言と初期化*/\n\tunsigned short i = INITIALIZE_INT;\n\tunsigned short j = INITIALIZE_INT;\n\tunsigned short k = INITIALIZE_INT;\n\tchar input_text[TEXT_LENGTH_MAX];//入力値を格納\n\t\n\t/*入力文字列の初期化*/\n\tfor(i = 0; i < TEXT_LENGTH_MAX; i++)\n\t{\n\t\tinput_text[i] = INITIALIZE_NUL;\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tunsigned short text_length = INITIALIZE_INT;//入力文字列の長さを格納\n\t\tunsigned short barcode_length = INITIALIZE_INT;//符号と符号を連結させた文字列の長さを格納\n\t\tunsigned short element_number = INITIALIZE_INT;//要素番号を格納\n\t\tunsigned short match_count = INITIALIZE_INT;//文字比較の時に一致した回数をカウント\n\t\tunsigned short character_length = INITIALIZE_INT;//符号→文字にした時の文字列の長さを格納\n\t\tchar barcode[CODE_MAX];//文字→符号にした文字列を連結して格納\n\t\tchar code_fivecut[CODE_MAX / SECTION][SECTION];//符号を5つ区切りにしたものを格納\n\t\t\n\t\t/*配列の初期化*/\n\t\tfor(i = 0; i < CODE_MAX; i++)\n\t\t{\n\t\t\tbarcode[i] = INITIALIZE_NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX / SECTION; i++)\n\t\t{\n\t\t\tfor(j = 0; j < SECTION; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = INITIALIZE_CHAR;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*入力文字列のカウント*/\n\t\t/*\n\t\tfor(i = 0; i < TEXT_LENGTH_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(INITIALIZE_NUL== input_text[i])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}*/\n\t\tfor(i = 0; INITIALIZE_NUL != input_text[i] ; i++,text_length++);\n\t\t//text_length--;\n\t\t\n\t\t/*文字を対応する符号に置き換えて連結して一つの配列(barcode)に格納する*/\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].character)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*連結した符号(barcode)の文字列の長さをカウントする*/\n\t\tfor(i = 0; i < CODE_MAX; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif(LAST_CHAR == barcode[barcode_length])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*連結した符号(barcode)を5つ区切りに分ける*/\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < SECTION; j++)\n\t\t\t{\n\t\t\t\tif(element_number < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[element_number];\n\t\t\t\t\telement_number++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*5つ区切りにした個数のカウント*/\n\t\tfor(i = 0; i < CODE_MAX ; i+= SECTION)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcharacter_length = i / SECTION;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*5つ区切りにした文字列と符号の比較を行い、一致したとき対応する文字を出力する*/\n\t\tfor(i = 0; i < character_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < SECTION; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tmatch_count++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(SECTION == match_count)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\", code[j].character);\n\t\t\t\t}\n\t\t\t\tmatch_count = INITIALIZE_INT;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\nint main(void){\n\tchar s[101];\n\tchar in[32][10]={\n\t\t\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\n\t\t\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n\t\t\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\n\t\t\"10010011\",\"10010000\",\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\"\n\t};\n\tchar out[32];\n\tchar tmp[1000];\n\tint i,j,c[5],n;\n\tfor(i=0;i<26;i++){\n\t\tout[i]='A'+i;\n\t}\n\tout[26]=' ';\n\tout[27]='.';\n\tout[28]=',';\n\tout[29]='-';\n\tout[30]='\\'';\n\tout[31]='?';\n\tmemset(s,0,sizeof(s));\n\tmemset(tmp,0,sizeof(tmp));\n\twhile(fgets(s,101,stdin)!=NULL){\n\t\tfor(i=0;i<strlen(s);i++){\n\t\t\tif('A'<=s[i]&&s[i]<='Z')\n\t\t\tsprintf(tmp,\"%s%s\",tmp,in[s[i]-'A']);\n\t\t\tif(s[i]==' ')\n\t\t\tsprintf(tmp,\"%s%s\",tmp,in[26]);\n\t\t\tif(s[i]=='\\'')\n\t\t\tsprintf(tmp,\"%s%s\",tmp,in[27]);\n\t\t\tif(s[i]==',')\n\t\t\tsprintf(tmp,\"%s%s\",tmp,in[28]);\n\t\t\tif(s[i]=='-')\n\t\t\tsprintf(tmp,\"%s%s\",tmp,in[29]);\n\t\t\tif(s[i]=='.')\n\t\t\tsprintf(tmp,\"%s%s\",tmp,in[30]);\n\t\t\tif(s[i]=='?')\n\t\t\tsprintf(tmp,\"%s%s\",tmp,in[31]);\n\t\t}\n\t\tfor(i=strlen(tmp);i%5;i++){\n\t\t\ttmp[i]='0';\n\t\t\ttmp[i+1]=0;\n\t\t}\n\t\tfor(i=0;i<strlen(tmp);i+=5){\n\t\t\tn=0;\n\t\t\tfor(j=0;j<5;j++){\n\t\t\t\tn+=(tmp[i+4-j]-'0')*(int)pow(2,j);\n\t\t\t}\n\t\t\tputchar(out[n]);\n\t\t}\n\t\tputs(\"\");\n\t\tmemset(s,0,sizeof(s));\n\t\tmemset(tmp,0,sizeof(tmp));\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nchar* to_code(char c) {\n\tswitch(c) {\n\t\tcase ' ': return \"101\";\n\t\tcase '\\'': return \"000000\";\n\t\tcase ',': return \"000011\";\n\t\tcase '-': return \"10010001\";\n\t\tcase '.': return \"010001\";\n\t\tcase '?': return \"000001\";\n\t\tcase 'A': return \"100101\";\n\t\tcase 'B': return \"10011010\";\n\t\tcase 'C': return \"0101\";\n\t\tcase 'D': return \"0001\";\n\t\tcase 'E': return \"110\";\n\t\tcase 'F': return \"01001\";\n\t\tcase 'G': return \"10011011\";\n\t\tcase 'H': return \"010000\";\n\t\tcase 'I': return \"0111\";\n\t\tcase 'J': return \"10011000\";\n\t\tcase 'K': return \"0110\";\n\t\tcase 'L': return \"00100\";\n\t\tcase 'M': return \"10011001\";\n\t\tcase 'N': return \"10011110\";\n\t\tcase 'O': return \"00101\";\n\t\tcase 'P': return \"111\";\n\t\tcase 'Q': return \"10011111\";\n\t\tcase 'R': return \"1000\";\n\t\tcase 'S': return \"00110\";\n\t\tcase 'T': return \"00111\";\n\t\tcase 'U': return \"10011100\";\n\t\tcase 'V': return \"10011101\";\n\t\tcase 'W': return \"000010\";\n\t\tcase 'X': return \"10010010\";\n\t\tcase 'Y': return \"10010011\";\n\t\tcase 'Z': return \"10010000\";\n\t}\n\treturn \"\";\n}\n\nchar to_char(char* s) {\n\tint i, n;\n\tfor(i = 0, n = 0; i < 5; i++) {\n\t\tn <<= 1;\n\t\tn += s[i] - '0';\n\t}\n\n\tif(n < 26)\n\t\treturn 'A' + n;\n\n\tswitch(n) {\n\t\tcase 26: return ' ';\n\t\tcase 27: return '.';\n\t\tcase 28: return ',';\n\t\tcase 29: return '-';\n\t\tcase 30: return '\\'';\n\t\tcase 31: return '?';\n\t}\n\treturn '\\0';\n}\n\nint main() {\n\tchar c;\n\tchar in[32];\n\tint head = 0, tail = 0;\n\tint i;\n\n\twhile((c = getchar()) != '\\n') {\n\t\tchar* code;\n\t\tint len;\n\n\t\tcode = to_code(c);\n\t\tlen = strlen(code);\n\n\t\tfor(i = 0; i < len; i++) {\n\t\t\tin[tail] = code[i];\n\t\t\ttail = (tail + 1) % 32;\n\t\t}\n\n\t\twhile(((tail < head ? 32 : 0) + tail - head) / 5) {\n\t\t\tchar tmp[8];\n\t\t\tfor(i = 0; i < 5; i++) {\n\t\t\t\ttmp[i] = in[head];\n\t\t\t\thead = (head + 1) % 32;\n\t\t\t}\n\t\t\ttmp[5] = '\\0';\n\n\t\t\tputchar(to_char(tmp));\n\t\t}\n\t}\n\n\twhile(((tail < head ? 32 : 0) + tail - head) % 5) {\n\t\tin[tail] = '0';\n\t\ttail = (tail + 1) % 32;\n\t}\n\n\twhile(((tail < head ? 32 : 0) + tail - head) / 5) {\n\t\tchar tmp[8];\n\t\tfor(i = 0; i < 5; i++) {\n\t\t\ttmp[i] = in[head];\n\t\t\thead = (head + 1) % 32;\n\t\t}\n\t\ttmp[5] = '\\0';\n\n\t\tputchar(to_char(tmp));\n\t}\n\tputchar('\\n');\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#define N 10000\n\nint btoi5( char ch[] ) {\n  int i, ans = 0;\n\n  for( i = 0; i < 5; i++ ) {\n    ans *= 2;\n    ans += ch[ i ] - '0';\n  }\n\n  return( ans );\n}\n\nint main( void ) {\n\n  while( 1 ) {\n    int i, j, digit;\n    char in[ N ], d[ N ];\n    int di, ndi;\n\n    for( i = 0; i < N; i++ ) {\n      if( scanf( \"%c\", &in[ i ] ) != 1 )  break;\n      if( in[ i ] == '\\n' )               break;\n    } if( i == 0 )                        break;\n    digit = i;\n\n    di = 0;\n    for( i = 0; i < digit; i++ ) {\n      switch( in[ i ] ) {\n        case ' '  : d[di++]='1';d[di++]='0';d[di++]='1';break;\n        case 39   : d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';break;\n        case ','  : d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';break;\n        case '-'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='1';break;\n        case '.'  : d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='1';break;\n        case '?'  : d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='1';break;\n        case 'A'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='1';break;\n        case 'B'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='0';d[di++]='1';d[di++]='0';break;\n        case 'C'  : d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='1';break;\n        case 'D'  : d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='1';break;\n        case 'E'  : d[di++]='1';d[di++]='1';d[di++]='0';break;\n        case 'F'  : d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';break;\n        case 'G'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='0';d[di++]='1';d[di++]='1';break;\n        case 'H'  : d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';break;\n        case 'I'  : d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='1';break;\n        case 'J'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='0';break;\n        case 'K'  : d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='0';break;\n        case 'L'  : d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';break;\n        case 'M'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';break;\n        case 'N'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='1';d[di++]='1';d[di++]='0';break;\n        case 'O'  : d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='1';break;\n        case 'P'  : d[di++]='1';d[di++]='1';d[di++]='1';break;\n        case 'Q'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='1';d[di++]='1';d[di++]='1';break;\n        case 'R'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='0';break;\n        case 'S'  : d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='0';break;\n        case 'T'  : d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='1';break;\n        case 'U'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='1';d[di++]='0';d[di++]='0';break;\n        case 'V'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';d[di++]='1';d[di++]='0';d[di++]='1';break;\n        case 'W'  : d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';break;\n        case 'X'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';break;\n        case 'Y'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='1';break;\n        case 'Z'  : d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='1';d[di++]='0';d[di++]='0';d[di++]='0';d[di++]='0';break;\n      }\n    }\n\n    if( di % 5 != 0 ) {\n      ndi = di / 5 * 5 + 5;\n      for( i = di; i < ndi; i++ )\n        d[ i ] = '0';\n    }\n\n    for( i = 0; i < ndi / 5; i++ ) {\n      switch( btoi5( d + i*5 ) ) {\n        case  0 : printf( \"A\" );break;\n        case  1 : printf( \"B\" );break;\n        case  2 : printf( \"C\" );break;\n        case  3 : printf( \"D\" );break;\n        case  4 : printf( \"E\" );break;\n        case  5 : printf( \"F\" );break;\n        case  6 : printf( \"G\" );break;\n\n        case  7 : printf( \"H\" );break;\n        case  8 : printf( \"I\" );break;\n        case  9 : printf( \"J\" );break;\n        case 10 : printf( \"K\" );break;\n        case 11 : printf( \"L\" );break;\n        case 12 : printf( \"M\" );break;\n        case 13 : printf( \"N\" );break;\n\n        case 14 : printf( \"O\" );break;\n        case 15 : printf( \"P\" );break;\n        case 16 : printf( \"Q\" );break;\n        case 17 : printf( \"R\" );break;\n        case 18 : printf( \"S\" );break;\n        case 19 : printf( \"T\" );break;\n        case 20 : printf( \"U\" );break;\n\n        case 21 : printf( \"V\" );break;\n        case 22 : printf( \"W\" );break;\n        case 23 : printf( \"X\" );break;\n        case 24 : printf( \"Y\" );break;\n        case 25 : printf( \"Z\" );break;\n\n        case 26 : printf( \" \" );break;\n        case 27 : printf( \".\" );break;\n        case 28 : printf( \",\" );break;\n        case 29 : printf( \"-\" );break;\n        case 30 : printf( \"'\" );break;\n        case 31 : printf( \"?\" );break;\n      }\n    }\n\n    printf( \"\\n\" );\n  }\n\n  return( 0 );\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nmain()\n{\n  int i,j,k;\n  char *a = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  char *b[] = {\n    \"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\n    \"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\n    \"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\n    \"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\n    \"10010010\",\"10010011\",\"10010000\"\n  };\n  char *c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\";\n  char d[4096];\n  char e[4096];\n  d[0] = '\\0';\n  //while(1) {\n    gets(e);\n    if(feof(stdin)) break;\n    strcat(d,e);\n    strcat(d,\" \");\n    //}\n  d[strlen(d) - 1] = '\\0';\n  e[0] = '\\0';\n  i = 0;\n  while(d[i] != '\\0') strcat(e,b[strchr(a,d[i++]) - a]);\n  i = 5 - strlen(e) % 5;\n  while(i--) strcat(e,\"0\");\n  i = 0;\n  while(e[i] != '\\0') {\n    j = 0;\n    k = 4;\n    do {\n      j += (e[i++] - '0') << k;\n    } while(k--);\n    putc(c[j],stdout);\n  }\n  return 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nchar *enc[] = {\n    \"00000\", \"00001\", \"00010\", \"00011\",\n    \"00100\", \"00101\", \"00110\", \"00111\",\n    \"01000\", \"01001\", \"01010\", \"01011\",\n    \"01100\", \"01101\", \"01110\", \"01111\",\n    \"10000\", \"10001\", \"10010\", \"10011\",\n    \"10100\", \"10101\", \"10110\", \"10111\",\n    \"11000\", \"11001\", \"11010\", \"11011\",\n    \"11100\", \"11101\", \"11110\", \"11111\",\n};\n\nchar *dec[] = {\n    \"101\", \"000000\", \"000011\", \"10010001\",\n    \"010001\", \"000001\", \"100101\", \"10011010\",\n    \"0101\", \"0001\", \"110\", \"01001\",\n    \"10011011\", \"010000\", \"0111\", \"10011000\",\n    \"0110\", \"00100\", \"10011001\", \"10011110\",\n    \"00101\", \"111\", \"10011111\", \"1000\",\n    \"00110\", \"00111\", \"10011100\", \"10011101\",\n    \"000010\", \"10010010\", \"10010011\", \"10010000\",\n};\n\nchar str[4096];\nchar changed[4096];\n\nint check(char c)\n{\n    if ('A' <= c && c <= 'Z') return 0;\n    if (c == '0' || c == '1') return 0;\n    if (c == ' ' || c == '\\'') return 0;\n    if (c == ',' || c == '-') return 0;\n    if (c == '.' || c == '?') return 0;\n    return -1;\n}\n\nint main(void)\n{\n    while (fgets(str, 2040, stdin) != NULL){\n        int i, j;\n\n        memset(changed, 0, sizeof(changed));\n        for (i = j = 0; check(str[i]) == 0; i++, j += 5){\n            int e;\n\n            switch (str[i]){\n                case ' ': e = 26; break;\n                case '.': e = 27; break;\n                case ',': e = 28; break;\n                case '-': e = 29; break;\n                case '\\'': e = 30; break;\n                case '?': e = 31; break;\n                default: e = str[i] - 'A'; break;\n            }\n            sprintf(changed + j, \"%s\", enc[e]);\n        }\n        while (j % 5 != 0) changed[j++] = '0';\n        for (i = 0; check(changed[i]) == 0; ){\n            for (j = 0; j < 32; j++){\n                int len = strlen(dec[j]);\n                if (strncmp(changed + i, dec[j], len) == 0){\n                    switch (j){\n                        case 0: putchar(' '); break;\n                        case 1: putchar('\\''); break;\n                        case 2: putchar(','); break;\n                        case 3: putchar('-'); break;\n                        case 4: putchar('.'); break;\n                        case 5: putchar('?'); break;\n                        default: putchar('A' + j - 6); break;\n                    }\n                    i += len;\n                    break;\n                }\n            }\n            if (j == 32){\n                break;\n            }\n        }\n        puts(\"\");\n    }\n\n    return 0;\n}"
  },
  {
    "language": "C",
    "code": "I[]={0x01059a25,0x109b0906,0x04069807,0x07059e99,0x0706089f,0x92029d9c,0x11059093,0x01009103};char*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",*strchr(),*L=\"68443586484588538455886888366866\",*B=I;b,l;main(c){for(;c=getchar(),c+1;)if(c-10)for(c=strchr(C,c)-C,b=b<<L[c]-48|B[c],l+=L[c]-48;l>4;putchar(C[b>>l&31]))l-=5;else l&&putchar(C[(b<<=5-l)&31]),l=0,putchar(c);exit(0);}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9//符号の文字列の最大の長さ\n#define CIPHER_NUM 32//符号と文字の組み合わせの数\n#define CODE_MAX 801//文字→符号に変換するとき、符号の文字列の最大数\n#define INITIALIZE_NUL 0x00 //char型の初期値\n#define INITIALIZE_CHAR '0' //5文字ごとに区切り、格納する配列に足りない文字数に\"0\"を追加することを考慮した初期値\n#define INITIALIZE_INT 0 //整数型の初期値\n#define LAST_CHAR '\\0' //文字列の最後を判定する文字\n#define TEXT_LENGTH_MAX 101//入力において最大文字数\n#define SECTION 5 //5文字区切り\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];//文字→符号にする時に扱う符号を格納\n\tchar sign_change_charcter[SECTION + 1];//符号→文字にする時に扱う符号を格納\n\tchar character;// 文字を格納\n}CIPHER;\n\n/*二つの表から文字と符号を対応させた初期化*/\nconst CIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\", \"00000\", 'A'},\n\t\t{\"10011010\", \"00001\", 'B'},\n\t\t{\"0101\", \"00010\", 'C'},\n\t\t{\"0001\", \"00011\", 'D'},\n\t\t{\"110\", \"00100\", 'E'},\n\t\t{\"01001\", \"00101\", 'F'},\n\t\t{\"10011011\", \"00110\", 'G'},\n\t\t{\"010000\", \"00111\", 'H'},\n\t\t{\"0111\", \"01000\", 'I'},\n\t\t{\"10011000\", \"01001\", 'J'},\n\t\t{\"0110\", \"01010\", 'K'},\n\t\t{\"00100\", \"01011\", 'L'},\n\t\t{\"10011001\", \"01100\", 'M'},\n\t\t{\"10011110\", \"01101\", 'N'},\n\t\t{\"00101\", \"01110\", 'O'},\n\t\t{\"111\", \"01111\", 'P'},\n\t\t{\"10011111\", \"10000\", 'Q'},\n\t\t{\"1000\", \"10001\", 'R'},\n\t\t{\"00110\", \"10010\", 'S'},\n\t\t{\"00111\", \"10011\", 'T'},\n\t\t{\"10011100\", \"10100\", 'U'},\n\t\t{\"10011101\", \"10101\", 'V'},\n\t\t{\"000010\", \"10110\", 'W'},\n\t\t{\"10010010\", \"10111\", 'X'},\n\t\t{\"10010011\", \"11000\", 'Y'},\n\t\t{\"10010000\", \"11001\", 'Z'},\n\t\t{\"101\", \"11010\", ' '},\n\t\t{\"010001\", \"11011\", '.'},\n\t\t{\"000011\", \"11100\", ','},\n\t\t{\"10010001\", \"11101\", '-'},\n\t\t{\"000000\", \"11110\", '\\''},\n\t\t{\"000001\", \"11111\", '?'}\n\t};\n\nint main(void)\n{\n\t\n\t/*変数宣言と初期化*/\n\tunsigned short i = INITIALIZE_INT;\n\tunsigned short j = INITIALIZE_INT;\n\tunsigned short k = INITIALIZE_INT;\n\tchar input_text[TEXT_LENGTH_MAX];//入力値を格納\n\t\n\t/*入力文字列の初期化*/\n\tfor(i = 0; i < TEXT_LENGTH_MAX; i++)\n\t{\n\t\tinput_text[i] = INITIALIZE_NUL;\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tunsigned short text_length = INITIALIZE_INT;//入力文字列の長さを格納\n\t\tunsigned short sign_length = INITIALIZE_INT;//符号と符号を連結させた文字列の長さを格納\n\t\tunsigned short element_number = INITIALIZE_INT;//要素番号を格納\n\t\tunsigned short match_count = INITIALIZE_INT;//文字比較の時に一致した回数をカウント\n\t\tunsigned short character_length = INITIALIZE_INT;//符号→文字にした時の文字列の長さを格納\n\t\tchar barcode[CODE_MAX];//文字→符号にした文字列を連結して格納\n\t\tchar code_fivecut[CODE_MAX / SECTION][SECTION];//符号を5つ区切りにしたものを格納\n\t\t\n\t\t/*配列の初期化*/\n\t\tfor(i = 0; i < CODE_MAX; i++)\n\t\t{\n\t\t\tbarcode[i] = INITIALIZE_NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < CODE_MAX / SECTION; i++)\n\t\t{\n\t\t\tfor(j = 0; j < SECTION; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = INITIALIZE_CHAR;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*入力文字列のカウント*/\n\t\tfor(i = 0; INITIALIZE_NUL != input_text[i] ; i++,text_length++);\n\t\t\n\t\t/*文字を対応する符号に置き換えて連結して一つの配列(barcode)に格納する*/\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].character)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*連結した符号(barcode)の文字列の長さをカウントする*/\n\t\tfor(i = 0; LAST_CHAR != barcode[sign_length]; i++,sign_length++);\n\t\t\n\t\t/*連結した符号(barcode)を5つ区切りに分ける*/\n\t\tfor(i = 0; i < sign_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < SECTION; j++)\n\t\t\t{\n\t\t\t\tif(element_number < sign_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[element_number];\n\t\t\t\t\telement_number++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*5つ区切りにした個数のカウント*/\n\t\tfor(i = 0; i < CODE_MAX ; i+= SECTION)\n\t\t{\n\t\t\tif(sign_length <= i)\n\t\t\t{\n\t\t\t\tcharacter_length = i / SECTION;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*5つ区切りにした文字列と符号の比較を行い、一致したとき対応する文字を出力する*/\n\t\tfor(i = 0; i < character_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tfor(k = 0; k < SECTION; k++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][k] == code[j].sign_change_charcter[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tmatch_count++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(SECTION == match_count)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\", code[j].character);\n\t\t\t\t}\n\t\t\t\tmatch_count = INITIALIZE_INT;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\nint main()\n{\n\tint c[99],m[32]={6,8,4,4,3,5,8,6,4,8,4,5,8,8,5,3,8,4,5,5,8,8,6,8,8,8,3,6,6,8,6,6},d[32]={37,154,5,1,6,9,155,16,7,152,6,4,153,158,5,7,159,8,6,7,156,157,2,146,147,144,5,0,3,145,17,1},\n\tbuffer=0,t,p=0,i,w[32]={65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,32,46,44,45,39,63};\n\n\tc[32]=26,c[39]=27,c[44]=28,c[45]=29,c[46]=30,c[63]=31;\n\tfor(i=0;i<25;i++)\n\t\tc[65+i]=i;\n\twhile(t=fgetchar())\n\t{\n\t\tif(t==13||t==26)\n\t\t{\n\t\t\tif(p>0)\n\t\t\t\tputchar(w[buffer<<5-p]);\n\t\t\tif(t==26)\n\t\t\t\tbreak;\n\t\t\tputs(\"\");\n\t\t\tbuffer=p=0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti=c[t];\n\t\t\tbuffer<<=m[i];\n\t\t\tbuffer|=d[i];\n\t\t\tp+=m[i];\n\t\t\tfor(;p>=5;p-=5)\n\t\t\t{\n\t\t\t\tputchar(w[buffer>>p-5]);\n\t\t\t\tbuffer&=~(31<<p-5);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\nchar encode[96][8];\nchar decode[32];\nint main(void){\n\tstrcpy(encode[' '],\"101\");\n\tstrcpy(encode['\\n'],\"\");\n\tstrcpy(encode['\\''],\"000000\");\n\tstrcpy(encode[','],\"000011\");\n\tstrcpy(encode['-'],\"10010001\");\n\tstrcpy(encode['.'],\"010001\");\n\tstrcpy(encode['?'],\"000001\");\n\tstrcpy(encode['A'],\"100101\");\n\tstrcpy(encode['B'],\"10011010\");\n\tstrcpy(encode['C'],\"0101\");\n\tstrcpy(encode['D'],\"0001\");\n\tstrcpy(encode['E'],\"110\");\n\tstrcpy(encode['F'],\"01001\");\n\tstrcpy(encode['G'],\"10011011\");\n\tstrcpy(encode['H'],\"010000\");\n\tstrcpy(encode['I'],\"0111\");\n\tstrcpy(encode['J'],\"10011000\");\n\tstrcpy(encode['K'],\"0110\");\n\tstrcpy(encode['L'],\"00100\");\n\tstrcpy(encode['M'],\"10011001\");\n\tstrcpy(encode['N'],\"10011110\");\n\tstrcpy(encode['O'],\"00101\");\n\tstrcpy(encode['P'],\"111\");\n\tstrcpy(encode['Q'],\"10011111\");\n\tstrcpy(encode['R'],\"1000\");\n\tstrcpy(encode['S'],\"00110\");\n\tstrcpy(encode['T'],\"00111\");\n\tstrcpy(encode['U'],\"10011100\");\n\tstrcpy(encode['V'],\"10011101\");\n\tstrcpy(encode['W'],\"000010\");\n\tstrcpy(encode['X'],\"10010010\");\n\tstrcpy(encode['Y'],\"10010011\");\n\tstrcpy(encode['Z'],\"10010000\");\n\tint n,i,k;\n\tchar type[200],code[10000];\n\tfor(i=0;i<26;i++){decode[i]='A'+i;}\n\tdecode[26]=' ';\n\tdecode[27]='.';\n\tdecode[28]=',';\n\tdecode[29]='-';\n\tdecode[30]='\\'';\n\tdecode[31]='?';\n\twhile(fgets(type,10000,stdin)!=NULL){\n\t\tcode[0]='\\0';\n\t\tn=strlen(type);\n\t\tfor(i=0;i<n;i++){strcat(code,encode[type[i]]);}\n\t\tn=strlen(code);\n\t\tfor(i=0;i<n;i+=5){\n\t\t\tk=0;\n\t\t\tif(code[i]=='1')k+=16;\n\t\t\tif(code[i+1]=='1' && i+1<n)k+=8;\n\t\t\tif(code[i+2]=='1' && i+2<n)k+=4;\n\t\t\tif(code[i+3]=='1' && i+3<n)k+=2;\n\t\t\tif(code[i+4]=='1' && i+4<n)k+=1;\n\t\t\tprintf(\"%c\",decode[k]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define NUM_OF_CHAR\t\t(32)\n#define LEN_OF_CODESTR1\t(8)\n#define LEN_OF_CODESTR2\t(5)\n\n#define STRCMP_MATCH\t(0)\n\nchar charToCodeTable[2][ NUM_OF_CHAR ][ LEN_OF_CODESTR1 + 1 ] =\n{\n\t{\n\t\t\" \", \"'\", \",\", \"-\", \".\", \"?\", \"A\", \"B\",\n\t\t\"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\",\n\t\t\"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n\t\t\"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n\t},\n\t{\n\t\t\"101\",\t\t\"000000\",\t\"000011\",\t\"10010001\",\t\"010001\",\t\"000001\",\t\"100101\",\t\"10011010\",\n\t\t\"0101\",\t\t\"0001\",\t\t\"110\",\t\t\"01001\",\t\"10011011\",\t\"010000\",\t\"0111\",\t\t\"10011000\",\n\t\t\"0110\",\t\t\"00100\",\t\"10011001\",\t\"10011110\",\t\"00101\",\t\"111\",\t\t\"10011111\",\t\"1000\",\n\t\t\"00110\",\t\"00111\",\t\"10011100\",\t\"10011101\",\t\"000010\",\t\"10010010\",\t\"10010011\",\t\"10010000\"\n\t}\n};\n\nchar codeToCharTable[2][ NUM_OF_CHAR ][ LEN_OF_CODESTR2 + 1 ] = \n{\n\t{\n\t\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\",\n\t\t\"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\",\n\t\t\"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n\t\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\"\n\t},\n\t{\n\t\t\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n\t\t\"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\",\n\t\t\"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\",\n\t\t\"Y\", \"Z\", \" \", \".\", \",\", \"-\", \"'\", \"?\"\n\t}\n};\n\n//inputに対応するコードをoutCodeに格納\nvoid charToCode( char input, char* outCode );\n\n//inCodeに対応する文字を返す\nchar codeToChar( char* inCode );\n\n//inputの最初から5文字までをoutputに格納\nvoid get5LengthCode( char* input, char* output );\n\n//shiftNumberの数だけinputをずらした文字列をoutputに格納\nvoid shiftString( char* input, char* output, int shiftNumber );\n\nint main( void )\n{\n\t/*入力された文字を受け取る*/\n\tchar ch;\n\t/*出力されたコードを受け取る*/\n\tchar getedCode[ LEN_OF_CODESTR2 + 1 ] = {'\\0'};\n\t/*出力されたコードを５文字以上になるまでためておくバッファ*/\n\tchar codeBuffer[ LEN_OF_CODESTR1 * 2 + 1 ] = {'\\0'};\n\t\n\t//入力の終わりまで\n\twhile( scanf( \"%c\", &ch ) != EOF )\n\t{\n\t\tif( ch != '\\n' )\n\t\t{\n\t\t\tcharToCode( ch, codeBuffer );\n\t\t\tif( strlen( codeBuffer ) >= 5 )\n\t\t\t{\n\t\t\t\tget5LengthCode( codeBuffer, getedCode );\n\t\t\t\tshiftString( codeBuffer, codeBuffer, 5 );\n\t\t\t\tprintf( \"%c\", codeToChar( getedCode ) );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif( strlen( codeBuffer ) > 0 )\n\t\t\t{\n\t\t\t\twhile( 1 )\n\t\t\t\t{\n\t\t\t\t\tget5LengthCode( codeBuffer, getedCode );\n\t\t\t\t\tshiftString( codeBuffer, codeBuffer, 5 );\n\t\t\t\t\tprintf( \"%c\", codeToChar( getedCode ) );\n\t\t\t\t\tif( codeBuffer[0] == '\\0' )break;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf( \"\\n\" );\n\t\t\t\n\t\t\tstrcpy( codeBuffer, \"\" );\n\t\t\tstrcpy( getedCode, \"\" );\n\t\t}\n\t}\n\t\n\treturn (0);\n}\n\nvoid charToCode( char input, char* outCode )\n{\n\tchar inStr[2];\n\tint i;\n\t\n\tinStr[0] = input;\n\tinStr[1] = '\\0';\n\t\n\tfor( i = 0; i < NUM_OF_CHAR; i++ )\n\t{\n\t\tif( strcmp( inStr, charToCodeTable[0][i] ) == STRCMP_MATCH )\n\t\t{\n\t\t\tstrcat( outCode, charToCodeTable[1][i] );\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nchar codeToChar( char inCode[ LEN_OF_CODESTR2 + 1 ] )\n{\n\tint i;\n\tchar result;\n\tfor( i = 0; i < NUM_OF_CHAR; i++ )\n\t{\n\t\tif( strcmp( inCode, codeToCharTable[0][i] ) == STRCMP_MATCH )\n\t\t{\n\t\t\tresult = codeToCharTable[1][i][0];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn (result);\n}\n\nvoid get5LengthCode( char* input, char* output )\n{\n\tint i;\n\tfor( i = 0; i < 5; i++ )\n\t{\n\t\tif( input[i] == '\\0' )break;\n\t\toutput[i] = input[i];\n\t}\n\tif( i == 0 )\n\t{\n\t\tfor( i = 0; i < 5; i++ )\n\t\t{\n\t\t\toutput[i] = '\\0';\n\t\t}\n\t\treturn;\n\t}\n\tfor( ; i < 5; i++ )\n\t{\n\t\toutput[i] = '0';\n\t}\n\toutput[i] = '\\0';\n}\n\nvoid shiftString( char input[LEN_OF_CODESTR1 * 2 + 1], char output[LEN_OF_CODESTR1 * 2 + 1], int shiftNumber )\n{\n\tint i;\n\tfor( i = 0; i < input[i + shiftNumber] != '\\0'; i++ )\n\t{\n\t\toutput[i] = input[i + shiftNumber];\n\t}\n\t\n\tfor( ; i < LEN_OF_CODESTR1 * 2 + 1; i++ )\n\t{\n\t\toutput[i] = '\\0';\n\t}\n}"
  },
  {
    "language": "C",
    "code": "#include<stdio.h>\n#include<string.h>\n\n#define SIGN_LENGTH 9\n#define CIPHER_NUM 32\n#define NUL 0x00\n\ntypedef struct cipher\n{\n\tchar charcter_change_sign[SIGN_LENGTH];\n\tchar sign_change_charcter[SIGN_LENGTH];\n\tchar charcter;\n}CIPHER;\n\n#define TEXT_MAX 100\n\nint main(void)\n{\n\tshort i = 0;\n\tshort j = 0;\n\n\tshort text_length = 0;\n\tchar input_text[TEXT_MAX];\n\tCIPHER code[CIPHER_NUM] = {\n\t\t{\"100101\",\"00000\",'A'},\n\t\t{\"10011010\",\"00001\",'B'},\n\t\t{\"0101\",\"00010\",'C'},\n\t\t{\"0001\",\"00011\",'D'},\n\t\t{\"110\",\"00100\",'E'},\n\t\t{\"01001\",\"00101\",'F'},\n\t\t{\"10011011\",\"00110\",'G'},\n\t\t{\"010000\",\"00111\",'H'},\n\t\t{\"0111\",\"01000\",'I'},\n\t\t{\"10011000\",\"01001\",'J'},\n\t\t{\"0110\",\"01010\",'K'},\n\t\t{\"00100\",\"01011\",'L'},\n\t\t{\"10011001\",\"01100\",'M'},\n\t\t{\"10011110\",\"01101\",'N'},\n\t\t{\"00101\",\"01110\",'O'},\n\t\t{\"111\",\"01111\",'P'},\n\t\t{\"10011111\",\"10000\",'Q'},\n\t\t{\"1000\",\"10001\",'R'},\n\t\t{\"00110\",\"10010\",'S'},\n\t\t{\"00111\",\"10011\",'T'},\n\t\t{\"10011100\",\"10100\",'U'},\n\t\t{\"10011101\",\"10101\",'V'},\n\t\t{\"000010\",\"10110\",'W'},\n\t\t{\"10010010\",\"10111\",'X'},\n\t\t{\"10010011\",\"11000\",'Y'},\n\t\t{\"10010000\",\"11001\",'Z'},\n\t\t{\"101\",\"11010\",' '},\n\t\t{\"010001\",\"11011\",'.'},\n\t\t{\"000011\",\"11100\",','},\n\t\t{\"10010001\",\"11101\",'-'},\n\t\t{\"000000\",\"11110\",'\\''},\n\t\t{\"000001\",\"11111\",'?'}\n\t};\n\t\n\tchar barcode[801];\n\tchar code_fivecut[160][5];\n\t\n\tfor(i = 0; i < TEXT_MAX; i++)\n\t{\n\t\tinput_text[i] = NUL;\n\t}\n\n\tfor(i = 0; i < 801; i++)\n\t{\n\t\tbarcode[i] = NUL;\n\t}\n\t\n\tfor(i = 0; i < 160;i++)\n\t{\n\t\tfor(j = 0; j < 5; j++)\n\t\t{\n\t\t\tcode_fivecut[i][j] = '0';\n\t\t}\n\t}\n\t\n\twhile(gets(input_text) != NULL)\n\t{\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\ttext_length++;\n\t\t\tif(input_text[i] == NUL)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = 0; i < text_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < CIPHER_NUM; j++)\n\t\t\t{\n\t\t\t\tif(input_text[i] == code[j].charcter)\n\t\t\t\t{\n\t\t\t\t\tstrcat(barcode, code[j].charcter_change_sign);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint barcode_length = 0;\n\t\t\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode_length++;\n\t\t\tif( barcode[barcode_length] == '\\0')\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tint c = 0;\n\t\t\n\t\tfor(i = 0; i < barcode_length; i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tif(c < barcode_length)\n\t\t\t\t{\n\t\t\t\t\tcode_fivecut[i][j] =  barcode[c];\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count=0;\n\t\tfor(i = 0;i < 800 ; i+= 5)\n\t\t{\n\t\t\tif(barcode_length <= i)\n\t\t\t{\n\t\t\t\tcount = i / 5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint cc = 0;\n\t\tfor(i = 0; i < count; i++)\n\t\t{\n\t\t\tfor(k = 0; k < CIPHER_NUM; k++)\n\t\t\t{\n\t\t\t\tfor(l = 0; l < 5; l++)\n\t\t\t\t{\n\t\t\t\t\tif(code_fivecut[i][l] == code[k].sign_change_charcter[l])\n\t\t\t\t\t{\n\t\t\t\t\t\tcc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cc == 5)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%c\",code[k].charcter);\n\t\t\t\t}\n\t\t\t\tcc = 0;\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tcount = 0;\n\t\tbarcode_length = 0;\n\t\ttext_length = 0;\n\t\tfor(i = 0; i < TEXT_MAX; i++)\n\t\t{\n\t\t\tinput_text[i] = NUL;\n\t\t}\n\t\tfor(i = 0; i < 801; i++)\n\t\t{\n\t\t\tbarcode[i] = NUL;\n\t\t}\n\t\t\n\t\tfor(i = 0; i < 160;i++)\n\t\t{\n\t\t\tfor(j = 0; j < 5; j++)\n\t\t\t{\n\t\t\t\tcode_fivecut[i][j] = '0';\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\nchar *encode[] = {\n\t\"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \n\t\"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \n\t\"00100\", \"10011001\", \"1001110\", \"00101\", \"111\", \n\t\"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \n\t\"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\",\n\t\"101\", \"010001\", \"000011\", \"10010001\", \"000000\", \"000001\", \n};\n\nchar *decode[] = {\n\t\"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \n\t\"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \n\t\"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \n\t\"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \n\t\"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \n\t\"11110\", \"11111\", \n};\n\nint main(void)\n{\n\tchar str[128];\n\t\n\twhile (fgets(str, 120, stdin) != NULL){\n\t\tint i, j;\n\t\tchar s[1024] = {0};\n\t\tint enc;\n\t\t\n\t\tfor (i = j = 0; str[i] != '\\n'; i++){\n\t\t\tswitch (str[i]){\n\t\t\t\tcase ' ': enc = 26; break;\n\t\t\t\tcase '.': enc = 27; break;\n\t\t\t\tcase ',': enc = 28; break;\n\t\t\t\tcase '-': enc = 29; break;\n\t\t\t\tcase '\\'': enc = 30; break;\n\t\t\t\tcase '?': enc = 31; break;\n\t\t\t\tdefault: enc = str[i] - 'A'; break;\n\t\t\t}\n\t\t\tsprintf(s + j, \"%s\", encode[enc]);\n\t\t\tj += strlen(encode[enc]);\n\t\t}\n\t\twhile (strlen(s) % 5 != 0) s[j++] = '0';\n\t\t\n\t\tfor (i = 0; s[i] != 0; i += 5){\n\t\t\tfor (j = 0; j < 32; j++){\n\t\t\t\tif (strncmp(s + i, decode[j], 5) == 0){\n\t\t\t\t\tswitch (j){\n\t\t\t\t\t\tcase 26: putchar(' '); break;\n\t\t\t\t\t\tcase 27: putchar('.'); break;\n\t\t\t\t\t\tcase 28: putchar(','); break;\n\t\t\t\t\t\tcase 29: putchar('-'); break;\n\t\t\t\t\t\tcase 30: putchar('\\''); break;\n\t\t\t\t\t\tcase 31: putchar('?'); break;\n\t\t\t\t\t\tdefault: putchar(j + 'A'); break;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tputchar('\\n');\n\t}\n\t\n\treturn 0;\n}"
  },
  {
    "language": "C",
    "code": "char*C=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\",*strchr();\nL[]={6,8,4,4,3,5,8,6,4,8,4,5,8,8,5,3,8,4,5,5,8,8,6,8,8,8,3,6,6,8,6,6};\nB[]={\n\t0x25,0x9a,0x05,0x01,0x06,0x09,0x9b,0x10,0x07,0x98,0x06,0x04,0x99,0x9e,0x05,0x07,\n\t0x9f,0x08,0x06,0x07,0x9c,0x9d,0x02,0x92,0x93,0x90,0x05,0x11,0x03,0x91,0x00,0x01\n};\nint main(){\n\tint c,b=0,l=0,i;\n\twhile(c=getchar(),c+1){\n\t\tif(c==10){\n\t\t\tif(l){\n\t\t\t\tb<<=5-l;\n\t\t\t\tputchar(C[b&31]);\n\t\t\t\tl=0;\n\t\t\t}\n\t\t\tputchar(10);\n\t\t} else {\n\t\t\ti=strchr(C,c)-C;\n\t\t\tb=b<<L[i]|B[i];\n\t\t\tl+=L[i];\n\t\t\twhile(l>=5){\n\t\t\t\tl-=5;\n\t\t\t\tputchar(C[b>>l&31]);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tstatic final HashMap<Character, String> c1 = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");\n\t\t\tput('\\'', \"000000\");\n\t\t\tput(',', \"000011\");\n\t\t\tput('-', \"10010001\");\n\t\t\tput('.', \"010001\");\n\t\t\tput('?', \"000001\");\n\t\t\tput('A', \"100101\");\n\t\t\tput('B', \"10011010\");\n\t\t\tput('C', \"0101\");\n\t\t\tput('D', \"0001\");\n\t\t\tput('E', \"110\");\n\t\t\tput('F', \"01001\");\n\t\t\tput('G', \"10011011\");\n\t\t\tput('H', \"010000\");\n\t\t\tput('I', \"0111\");\n\t\t\tput('J', \"10011000\");\n\t\t\tput('K', \"0110\");\n\t\t\tput('L', \"00100\");\n\t\t\tput('M', \"10011001\");\n\t\t\tput('N', \"10011110\");\n\t\t\tput('O', \"00101\");\n\t\t\tput('P', \"111\");\n\t\t\tput('Q', \"10011111\");\n\t\t\tput('R', \"1000\");\n\t\t\tput('S', \"00110\");\n\t\t\tput('T', \"00111\");\n\t\t\tput('U', \"10011100\");\n\t\t\tput('V', \"10011101\");\n\t\t\tput('W', \"000010\");\n\t\t\tput('X', \"10010010\");\n\t\t\tput('Y', \"10010011\");\n\t\t\tput('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> c2 = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"00000\", 'A');\n\t\t\tput(\"00001\", 'B');\n\t\t\tput(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D');\n\t\t\tput(\"00100\", 'E');\n\t\t\tput(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G');\n\t\t\tput(\"00111\", 'H');\n\t\t\tput(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J');\n\t\t\tput(\"01010\", 'K');\n\t\t\tput(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M');\n\t\t\tput(\"01101\", 'N');\n\t\t\tput(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P');\n\t\t\tput(\"10000\", 'Q');\n\t\t\tput(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S');\n\t\t\tput(\"10011\", 'T');\n\t\t\tput(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V');\n\t\t\tput(\"10110\", 'W');\n\t\t\tput(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y');\n\t\t\tput(\"11001\", 'Z');\n\t\t\tput(\"11010\", ' ');\n\t\t\tput(\"11011\", '.');\n\t\t\tput(\"11100\", ',');\n\t\t\tput(\"11101\", '-');\n\t\t\tput(\"11110\", '\\'');\n\t\t\tput(\"11111\", '?');\n\t\t}\n\t};\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null) {\n\t\t\tif(line.isEmpty()){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t//\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1.get(c));\n\t\t\t}\n\t\t\t//\n\t\t\tsb1.append(\"00000\");\n\t\t\t//\n\t\t\tString line2 = sb1.toString();\n\t\t\tfor (int i = 0; i < line2.length() - 5; i += 5) {\n\t\t\t\tsb2.append(c2.get(line2.substring(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println(sb2.toString());\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.io.*;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Scanner;\npublic class Main {\n    static final HashMap<Character, String> map1 = new HashMap<Character, String>() {\n        {\n            put(' ', \"101\");\n            put('\\'', \"000000\");\n            put(',', \"000011\");\n            put('-', \"10010001\");\n            put('.', \"010001\");\n            put('?', \"000001\");\n            put('A', \"100101\");\n            put('B', \"10011010\");\n            put('C', \"0101\");\n            put('D', \"0001\");\n            put('E', \"110\");\n            put('F', \"01001\");\n            put('G', \"10011011\");\n            put('H', \"010000\");\n            put('I', \"0111\");\n            put('J', \"10011000\");\n            put('K', \"0110\");\n            put('L', \"00100\");\n            put('M', \"10011001\");\n            put('N', \"10011110\");\n            put('O', \"00101\");\n            put('P', \"111\");\n            put('Q', \"10011111\");\n            put('R', \"1000\");\n            put('S', \"00110\");\n            put('T', \"00111\");\n            put('U', \"10011100\");\n            put('V', \"10011101\");\n            put('W', \"000010\");\n            put('X', \"10010010\");\n            put('Y', \"10010011\");\n            put('Z', \"10010000\");\n        }\n    };\n \n    static final HashMap<String, Character> map2 = new HashMap<String, Character>() {\n        {\n            put(\"00000\", 'A');\n            put(\"00001\", 'B');\n            put(\"00010\", 'C');\n            put(\"00011\", 'D');\n            put(\"00100\", 'E');\n            put(\"00101\", 'F');\n            put(\"00110\", 'G');\n            put(\"00111\", 'H');\n            put(\"01000\", 'I');\n            put(\"01001\", 'J');\n            put(\"01010\", 'K');\n            put(\"01011\", 'L');\n            put(\"01100\", 'M');\n            put(\"01101\", 'N');\n            put(\"01110\", 'O');\n            put(\"01111\", 'P');\n            put(\"10000\", 'Q');\n            put(\"10001\", 'R');\n            put(\"10010\", 'S');\n            put(\"10011\", 'T');\n            put(\"10100\", 'U');\n            put(\"10101\", 'V');\n            put(\"10110\", 'W');\n            put(\"10111\", 'X');\n            put(\"11000\", 'Y');\n            put(\"11001\", 'Z');\n            put(\"11010\", ' ');\n            put(\"11011\", '.');\n            put(\"11100\", ',');\n            put(\"11101\", '-');\n            put(\"11110\", '\\'');\n            put(\"11111\", '?');\n        }\n    };\n \n\tpublic static void main(String[] args) {\n\t\t\n\t\tFastScanner sc = new FastScanner();\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tStringBuffer buf = new StringBuffer();\n\t\t\tbuf.append(stdIn.nextLine());\n\t\t\tStringBuffer buf2 = new StringBuffer();\n\t\t\tfor(int i = 0; i < buf.length(); i++) {\n\t\t\t\tbuf2.append(map1.get(buf.charAt(i)));\n\t\t\t}\n\t\t\tif(buf2.length() % 5 != 5) {\n\t\t\t\tfor(int i = buf2.length() % 5; i <= 5; i++) {\n\t\t\t\t\tbuf2.append(\"0\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuf = new StringBuffer();\n\t\t\tfor(int i = 0; i < buf2.length()/5; i++) {\n\t\t\t\tbuf.append(map2.get(buf2.substring(i*5,(i+1)*5)));\n\t\t\t}\n\t\t\tout.println(buf.toString());\n\t\t}\n\t}\n}\n//------------------------------//\n//-----------//\nclass FastScanner {\n    private final InputStream in = System.in;\n    private final byte[] buffer = new byte[1024];\n    private int ptr = 0;\n    private int buflen = 0;\n    private boolean hasNextByte() {\n        if (ptr < buflen) {\n            return true;\n        }else{\n            ptr = 0;\n            try {\n                buflen = in.read(buffer);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            if (buflen <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n    private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n    private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n    public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n    public String next() {\n        if (!hasNext()) throw new NoSuchElementException();\n        StringBuilder sb = new StringBuilder();\n        int b = readByte();\n        while(isPrintableChar(b)) {\n            sb.appendCodePoint(b);\n            b = readByte();\n        }\n        return sb.toString();\n    }\n    public long nextLong() {\n        if (!hasNext()) throw new NoSuchElementException();\n        long n = 0;\n        boolean minus = false;\n        int b = readByte();\n        if (b == '-') {\n            minus = true;\n            b = readByte();\n        }\n        if (b < '0' || '9' < b) {\n            throw new NumberFormatException();\n        }\n        while(true){\n            if ('0' <= b && b <= '9') {\n                n *= 10;\n                n += b - '0';\n            }else if(b == -1 || !isPrintableChar(b)){\n                return minus ? -n : n;\n            }else{\n                throw new NumberFormatException();\n            }\n            b = readByte();\n        }\n    }\n    \n    public int nextInt() {\n    \treturn (int)nextLong();\n    }\n    \n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String[] args) \n\t{\n\t\tScanner in=new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t{\n\t\t\tchar ch[]=in.nextLine().toCharArray();\n\t\t\tString st=\"\";\n\t\t\tString ans=\"\";\n\t\t\tfor(int i=0;i<ch.length;i++)\n\t\t\t{\n\t\t\t\tif(ch[i]==' ')\n\t\t\t\t\tst+=\"101\";\n\t\t\t\telse if(ch[i]=='\\'')\n\t\t\t\t\tst+=\"000000\";\n\t\t\t\telse if(ch[i]==',')\n\t\t\t\t\tst+=\"000011\";\n\t\t\t\telse if(ch[i]=='-')\n\t\t\t\t\tst+=\"10010001\";\n\t\t\t\telse if(ch[i]=='.')\n\t\t\t\t\tst+=\"010001\";\n\t\t\t\telse if(ch[i]=='?')\n\t\t\t\t\tst+=\"000001\";\n\t\t\t\telse if(ch[i]=='A')\n\t\t\t\t\tst+=\"100101\";\n\t\t\t\telse if(ch[i]=='B')\n\t\t\t\t\tst+=\"10011010\";\n\t\t\t\telse if(ch[i]=='C')\n\t\t\t\t\tst+=\"0101\";\n\t\t\t\telse if(ch[i]=='D')\n\t\t\t\t\tst+=\"0001\";\n\t\t\t\telse if(ch[i]=='E')\n\t\t\t\t\tst+=\"110\";\n\t\t\t\telse if(ch[i]=='F')\n\t\t\t\t\tst+=\"01001\";\n\t\t\t\telse if(ch[i]=='G')\n\t\t\t\t\tst+=\"10011011\";\n\t\t\t\telse if(ch[i]=='H')\n\t\t\t\t\tst+=\"010000\";\n\t\t\t\telse if(ch[i]=='I')\n\t\t\t\t\tst+=\"0111\";\n\t\t\t\telse if(ch[i]=='J')\n\t\t\t\t\tst+=\"10011000\";\n\t\t\t\telse if(ch[i]=='K')\n\t\t\t\t\tst+=\"0110\";\n\t\t\t\telse if(ch[i]=='L')\n\t\t\t\t\tst+=\"00100\";\n\t\t\t\telse if(ch[i]=='M')\n\t\t\t\t\tst+=\"10011001\";\n\t\t\t\telse if(ch[i]=='N')\n\t\t\t\t\tst+=\"10011110\";\n\t\t\t\telse if(ch[i]=='O')\n\t\t\t\t\tst+=\"00101\";\n\t\t\t\telse if(ch[i]=='P')\n\t\t\t\t\tst+=\"111\";\n\t\t\t\telse if(ch[i]=='Q')\n\t\t\t\t\tst+=\"10011111\";\n\t\t\t\telse if(ch[i]=='R')\n\t\t\t\t\tst+=\"1000\";\n\t\t\t\telse if(ch[i]=='S')\n\t\t\t\t\tst+=\"00110\";\n\t\t\t\telse if(ch[i]=='T')\n\t\t\t\t\tst+=\"00111\";\n\t\t\t\telse if(ch[i]=='U')\n\t\t\t\t\tst+=\"10011100\";\n\t\t\t\telse if(ch[i]=='V')\n\t\t\t\t\tst+=\"10011101\";\n\t\t\t\telse if(ch[i]=='W')\n\t\t\t\t\tst+=\"000010\";\n\t\t\t\telse if(ch[i]=='X')\n\t\t\t\t\tst+=\"10010010\";\n\t\t\t\telse if(ch[i]=='Y')\n\t\t\t\t\tst+=\"10010011\";\n\t\t\t\telse if(ch[i]=='Z')\n\t\t\t\t\tst+=\"10010000\";\n\t\t\t}\n\t\t\twhile(st.length()%5!=0)\n\t\t\t\tst+=\"0\";\n\t\t\twhile(st.length()>0)\n\t\t\t{\n\t\t\t\tString tmp=st.substring(0, 5);\n\t\t\t\tst=st.substring(5, st.length());\n\t\t\t\t\n\t\t\t\tif(tmp.equals(\"00000\"))\n\t\t\t\t\tans+=\"A\";\n\t\t\t\telse if(tmp.equals(\"00001\"))\n\t\t\t\t\tans+=\"B\";\n\t\t\t\telse if(tmp.equals(\"00010\"))\n\t\t\t\t\tans+=\"C\";\n\t\t\t\telse if(tmp.equals(\"00011\"))\n\t\t\t\t\tans+=\"D\";\n\t\t\t\telse if(tmp.equals(\"00100\"))\n\t\t\t\t\tans+=\"E\";\n\t\t\t\telse if(tmp.equals(\"00101\"))\n\t\t\t\t\tans+=\"F\";\n\t\t\t\telse if(tmp.equals(\"00110\"))\n\t\t\t\t\tans+=\"G\";\n\t\t\t\telse if(tmp.equals(\"00111\"))\n\t\t\t\t\tans+=\"H\";\n\t\t\t\t\n\t\t\t\telse if(tmp.equals(\"01000\"))\n\t\t\t\t\tans+=\"I\";\n\t\t\t\telse if(tmp.equals(\"01001\"))\n\t\t\t\t\tans+=\"J\";\n\t\t\t\telse if(tmp.equals(\"01010\"))\n\t\t\t\t\tans+=\"K\";\n\t\t\t\telse if(tmp.equals(\"01011\"))\n\t\t\t\t\tans+=\"L\";\n\t\t\t\telse if(tmp.equals(\"01100\"))\n\t\t\t\t\tans+=\"M\";\n\t\t\t\telse if(tmp.equals(\"01101\"))\n\t\t\t\t\tans+=\"N\";\n\t\t\t\telse if(tmp.equals(\"01110\"))\n\t\t\t\t\tans+=\"O\";\n\t\t\t\telse if(tmp.equals(\"01111\"))\n\t\t\t\t\tans+=\"P\";\n\t\t\t\t\n\t\t\t\telse if(tmp.equals(\"10000\"))\n\t\t\t\t\tans+=\"Q\";\n\t\t\t\telse if(tmp.equals(\"10001\"))\n\t\t\t\t\tans+=\"R\";\n\t\t\t\telse if(tmp.equals(\"10010\"))\n\t\t\t\t\tans+=\"S\";\n\t\t\t\telse if(tmp.equals(\"10011\"))\n\t\t\t\t\tans+=\"T\";\n\t\t\t\telse if(tmp.equals(\"10100\"))\n\t\t\t\t\tans+=\"U\";\n\t\t\t\telse if(tmp.equals(\"10101\"))\n\t\t\t\t\tans+=\"V\";\n\t\t\t\telse if(tmp.equals(\"10110\"))\n\t\t\t\t\tans+=\"W\";\n\t\t\t\telse if(tmp.equals(\"10111\"))\n\t\t\t\t\tans+=\"X\";\n\t\t\t\t\n\t\t\t\t\n\t\t\t\telse if(tmp.equals(\"11000\"))\n\t\t\t\t\tans+=\"Y\";\n\t\t\t\telse if(tmp.equals(\"11001\"))\n\t\t\t\t\tans+=\"Z\";\n\t\t\t\telse if(tmp.equals(\"11010\"))\n\t\t\t\t\tans+=\" \";\n\t\t\t\telse if(tmp.equals(\"11011\"))\n\t\t\t\t\tans+=\".\";\n\t\t\t\telse if(tmp.equals(\"11100\"))\n\t\t\t\t\tans+=\",\";\n\t\t\t\telse if(tmp.equals(\"11101\"))\n\t\t\t\t\tans+=\"-\";\n\t\t\t\telse if(tmp.equals(\"11110\"))\n\t\t\t\t\tans+=\"'\";\n\t\t\t\telse if(tmp.equals(\"11111\"))\n\t\t\t\t\tans+=\"?\";\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tHashMap<Character, String> map = new HashMap<Character, String>();\n\t\tmap.put(' ', \"101\");\n\t\tmap.put('\\'', \"000000\");\n\t\tmap.put(',', \"000011\");\n\t\tmap.put('-', \"10010001\");\n\t\tmap.put('.', \"010001\");\n\t\tmap.put('?', \"000001\");\n\t\tmap.put('A', \"100101\");\n\t\tmap.put('B', \"10011010\");\n\t\tmap.put('C', \"0101\");\n\t\tmap.put('D', \"0001\");\n\t\tmap.put('E', \"110\");\n\t\tmap.put('F', \"01001\");\n\t\tmap.put('G', \"10011011\");\n\t\tmap.put('H', \"010000\");\n\t\tmap.put('I', \"0111\");\n\t\tmap.put('J', \"10011000\");\n\t\tmap.put('K', \"0110\");\n\t\tmap.put('L', \"00100\");\n\t\tmap.put('M', \"10011001\");\n\t\tmap.put('N', \"10011110\");\n\t\tmap.put('O', \"00101\");\n\t\tmap.put('P', \"111\");\n\t\tmap.put('Q', \"10011111\");\n\t\tmap.put('R', \"1000\");\n\t\tmap.put('S', \"00110\");\n\t\tmap.put('T', \"00111\");\n\t\tmap.put('U', \"10011100\");\n\t\tmap.put('V', \"10011101\");\n\t\tmap.put('W', \"000010\");\n\t\tmap.put('X', \"10010010\");\n\t\tmap.put('Y', \"10010011\");\n\t\tmap.put('Z', \"10010000\");\n\t\tHashMap<String, Character> map2 = new HashMap<String, Character>();\n\n\t\tmap2.put(\"00000\", 'A');\n\t\tmap2.put(\"00001\", 'B');\n\t\tmap2.put(\"00010\", 'C');\n\t\tmap2.put(\"00011\", 'D');\n\t\tmap2.put(\"00100\", 'E');\n\t\tmap2.put(\"00101\", 'F');\n\t\tmap2.put(\"00110\", 'G');\n\t\tmap2.put(\"00111\", 'H');\n\t\tmap2.put(\"01000\", 'I');\n\t\tmap2.put(\"01001\", 'J');\n\t\tmap2.put(\"01010\", 'K');\n\t\tmap2.put(\"01011\", 'L');\n\t\tmap2.put(\"01100\", 'M');\n\t\tmap2.put(\"01101\", 'N');\n\t\tmap2.put(\"01110\", 'O');\n\t\tmap2.put(\"01111\", 'P');\n\t\tmap2.put(\"10000\", 'Q');\n\t\tmap2.put(\"10001\", 'R');\n\t\tmap2.put(\"10010\", 'S');\n\t\tmap2.put(\"10011\", 'T');\n\t\tmap2.put(\"10100\", 'U');\n\t\tmap2.put(\"10101\", 'V');\n\t\tmap2.put(\"10110\", 'W');\n\t\tmap2.put(\"10111\", 'X');\n\t\tmap2.put(\"11000\", 'Y');\n\t\tmap2.put(\"11001\", 'Z');\n\t\tmap2.put(\"11010\", ' ');\n\t\tmap2.put(\"11011\", '.');\n\t\tmap2.put(\"11100\", ',');\n\t\tmap2.put(\"11101\", '-');\n\t\tmap2.put(\"11110\", '\\'');\n\t\tmap2.put(\"11111\", '?');\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (Scanner in = new Scanner(System.in); in.hasNextLine();) {\n\t\t\tsb.setLength(0);\n\t\t\tchar[] cs = in.nextLine().toCharArray();\n\t\t\tfor (char c : cs) {\n\t\t\t\tsb.append(map.get(c));\n\t\t\t}\n\t\t\twhile (sb.length() % 5 != 0) {\n\t\t\t\tsb.append('0');\n\t\t\t}\n\t\t\tString s = sb.toString();\n\t\t\tfor (int i = 0; i < s.length(); i += 5) {\n\t\t\t\tSystem.out.print(map2.get(s.subSequence(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport static java.lang.Math.abs;\nimport static java.lang.Math.atan2;\nimport static java.lang.Math.sqrt;\nimport static java.util.Arrays.deepToString;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\tvoid tr(Object... os) {\n\t\tSystem.err.println(deepToString(os));\n\t}\n\n\tScanner sc = new Scanner(System.in);\n\tpublic void run() {\n\t\tchar[] s = sc.nextLine().toCharArray();\n\t\tchar[] t = getCode1(s);\n\t\tSystem.out.println(new String(t));\n\t}\n\t\n\tchar[] getCode1(char[] s) {\n\t\tArrayList<Integer> L = new ArrayList<Integer>();\n\t\t\n\t\tfor (char c : s) {\n\t\t\tString t = f(c);\n\t\t\tfor (int i = 0; i < t.length(); i++) {\n\t\t\t\tL.add(t.charAt(i) == '1' ? 1 : 0);\n\t\t\t}\n\t\t}\n\t\twhile (L.size() % 5 > 0) {\n\t\t\tL.add(0);\n\t\t}\n\t\t\n\t\tchar[] res = new char[L.size() / 5];\n\t\tfor (int i = 0; i < L.size(); i += 5) {\n\t\t\tString cc = \"\";\n\t\t\tfor (int j = 0; j < 5; j++) cc += L.get(i + j);\n\t\t\tres[i/5] = g(cc);\n\t\t}\n\t\treturn res;\n\t}\n\t\n\tMap<String, Character> mp;\n\t\n\t\n\tchar g(String s) {\n\t\tif (mp == null) {\n\t\t\tmp = new HashMap<String, Character>();\n\t\t\tmp.put(\"00000\",'A');\n\t\t\tmp.put(\"00001\",'B');\n\t\t\tmp.put(\"00010\",'C');\n\t\t\tmp.put(\"00011\",'D');\n\t\t\tmp.put(\"00100\",'E');\n\t\t\tmp.put(\"00101\",'F');\n\t\t\tmp.put(\"00110\",'G');\n\t\t\tmp.put(\"00111\",'H');\n\t\t\tmp.put(\"01000\",'I');\n\t\t\tmp.put(\"01001\",'J');\n\t\t\tmp.put(\"01010\",'K');\n\t\t\tmp.put(\"01011\",'L');\n\t\t\tmp.put(\"01100\",'M');\n\t\t\tmp.put(\"01101\",'N');\n\t\t\tmp.put(\"01110\",'O');\n\t\t\tmp.put(\"01111\",'P');\n\t\t\tmp.put(\"10000\",'Q');\n\t\t\tmp.put(\"10001\",'R');\n\t\t\tmp.put(\"10010\",'S');\n\t\t\tmp.put(\"10011\",'T');\n\t\t\tmp.put(\"10100\",'U');\n\t\t\tmp.put(\"10101\",'V');\n\t\t\tmp.put(\"10110\",'W');\n\t\t\tmp.put(\"10111\",'X');\n\t\t\tmp.put(\"11000\",'Y');\n\t\t\tmp.put(\"11001\",'Z');\n\t\t\tmp.put(\"11010\",' ');\n\t\t\tmp.put(\"11011\",'.');\n\t\t\tmp.put(\"11100\",',');\n\t\t\tmp.put(\"11101\",'-');\n\t\t\tmp.put(\"11110\",'\\'');\n\t\t\tmp.put(\"11111\",'?');\n\t\t}\n\t\treturn mp.get(s);\n\t}\n\t\n\tString f(char c) {\n\t\tswitch(c) {\n\tcase ' ': return\"101\";\n\tcase '\\'': return\"000000\";\n\tcase ',': return\"000011\";\n\tcase '-': return\"10010001\";\n\tcase '.': return\"010001\";\n\tcase '?': return\"000001\";\n\tcase 'A': return\"100101\";\n\tcase 'B': return\"10011010\";\n\tcase 'C': return\"0101\";\n\tcase 'D': return\"0001\";\n\tcase 'E': return\"110\";\n\tcase 'F': return\"01001\";\n\tcase 'G': return\"10011011\";\n\tcase 'H': return\"010000\";\n\tcase 'I': return\"0111\";\n\tcase 'J': return\"10011000\";\n\tcase 'K': return\"0110\";\n\tcase 'L': return\"00100\";\n\tcase 'M': return\"10011001\";\n\tcase 'N': return\"10011110\";\n\tcase 'O': return\"00101\";\n\tcase 'P': return\"111\";\n\tcase 'Q': return\"10011111\";\n\tcase 'R': return\"1000\";\n\tcase 'S': return\"00110\";\n\tcase 'T': return\"00111\";\n\tcase 'U': return\"10011100\";\n\tcase 'V': return\"10011101\";\n\tcase 'W': return\"000010\";\n\tcase 'X': return\"10010010\";\n\tcase 'Y': return\"10010011\";\n\tcase 'Z': return\"10010000\";\n\t\t}\n\t\treturn \"\";\n\t}\n\t\n\t\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.io.*;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Scanner;\npublic class Main {\n    static final HashMap<Character, String> map1 = new HashMap<Character, String>() {\n        {\n            put(' ', \"101\");\n            put('\\'', \"000000\");\n            put(',', \"000011\");\n            put('-', \"10010001\");\n            put('.', \"010001\");\n            put('?', \"000001\");\n            put('A', \"100101\");\n            put('B', \"10011010\");\n            put('C', \"0101\");\n            put('D', \"0001\");\n            put('E', \"110\");\n            put('F', \"01001\");\n            put('G', \"10011011\");\n            put('H', \"010000\");\n            put('I', \"0111\");\n            put('J', \"10011000\");\n            put('K', \"0110\");\n            put('L', \"00100\");\n            put('M', \"10011001\");\n            put('N', \"10011110\");\n            put('O', \"00101\");\n            put('P', \"111\");\n            put('Q', \"10011111\");\n            put('R', \"1000\");\n            put('S', \"00110\");\n            put('T', \"00111\");\n            put('U', \"10011100\");\n            put('V', \"10011101\");\n            put('W', \"000010\");\n            put('X', \"10010010\");\n            put('Y', \"10010011\");\n            put('Z', \"10010000\");\n        }\n    };\n \n    static final HashMap<String, Character> map2 = new HashMap<String, Character>() {\n        {\n            put(\"00000\", 'A');\n            put(\"00001\", 'B');\n            put(\"00010\", 'C');\n            put(\"00011\", 'D');\n            put(\"00100\", 'E');\n            put(\"00101\", 'F');\n            put(\"00110\", 'G');\n            put(\"00111\", 'H');\n            put(\"01000\", 'I');\n            put(\"01001\", 'J');\n            put(\"01010\", 'K');\n            put(\"01011\", 'L');\n            put(\"01100\", 'M');\n            put(\"01101\", 'N');\n            put(\"01110\", 'O');\n            put(\"01111\", 'P');\n            put(\"10000\", 'Q');\n            put(\"10001\", 'R');\n            put(\"10010\", 'S');\n            put(\"10011\", 'T');\n            put(\"10100\", 'U');\n            put(\"10101\", 'V');\n            put(\"10110\", 'W');\n            put(\"10111\", 'X');\n            put(\"11000\", 'Y');\n            put(\"11001\", 'Z');\n            put(\"11010\", ' ');\n            put(\"11011\", '.');\n            put(\"11100\", ',');\n            put(\"11101\", '-');\n            put(\"11110\", '\\'');\n            put(\"11111\", '?');\n        }\n    };\n \n\tpublic static void main(String[] args) {\n\t\t\n\t\tFastScanner sc = new FastScanner();\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tStringBuffer buf = new StringBuffer();\n\t\tbuf.append(stdIn.nextLine());\n\t\twhile(stdIn.hasNext()) {\n\t\t\tbuf.append(\" \");\n\t\t\tbuf.append(stdIn.nextLine());\n\t\t}\n\t\tStringBuffer buf2 = new StringBuffer();\n\t\tfor(int i = 0; i < buf.length(); i++) {\n\t\t\tbuf2.append(map1.get(buf.charAt(i)));\n\t\t}\n\t\tif(buf2.length() % 5 != 5) {\n\t\t\tfor(int i = buf2.length() % 5; i <= 5; i++) {\n\t\t\t\tbuf2.append(\"0\");\n\t\t\t}\n\t\t}\n\t\tbuf = new StringBuffer();\n\t\tfor(int i = 0; i < buf2.length()/5; i++) {\n\t\t\tbuf.append(map2.get(buf2.substring(i*5,(i+1)*5)));\n\t\t}\n\t\tout.println(buf.toString());\n\t}\n}\n//------------------------------//\n//-----------//\nclass FastScanner {\n    private final InputStream in = System.in;\n    private final byte[] buffer = new byte[1024];\n    private int ptr = 0;\n    private int buflen = 0;\n    private boolean hasNextByte() {\n        if (ptr < buflen) {\n            return true;\n        }else{\n            ptr = 0;\n            try {\n                buflen = in.read(buffer);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            if (buflen <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n    private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n    private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n    public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n    public String next() {\n        if (!hasNext()) throw new NoSuchElementException();\n        StringBuilder sb = new StringBuilder();\n        int b = readByte();\n        while(isPrintableChar(b)) {\n            sb.appendCodePoint(b);\n            b = readByte();\n        }\n        return sb.toString();\n    }\n    public long nextLong() {\n        if (!hasNext()) throw new NoSuchElementException();\n        long n = 0;\n        boolean minus = false;\n        int b = readByte();\n        if (b == '-') {\n            minus = true;\n            b = readByte();\n        }\n        if (b < '0' || '9' < b) {\n            throw new NumberFormatException();\n        }\n        while(true){\n            if ('0' <= b && b <= '9') {\n                n *= 10;\n                n += b - '0';\n            }else if(b == -1 || !isPrintableChar(b)){\n                return minus ? -n : n;\n            }else{\n                throw new NumberFormatException();\n            }\n            b = readByte();\n        }\n    }\n    \n    public int nextInt() {\n    \treturn (int)nextLong();\n    }\n    \n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n\npublic class Main {\n\tprivate\tstatic\tBufferedReader\tbr = null;\n\n\tstatic {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t}\n \n    /**\n     * @param args\n     */\n\tpublic static void main(String[] args) {\n\t// TODO Auto-generated method stub\n\t\tString\tstdin = null;\n\n\t\twhile ((stdin = parseStdin()) != null) {\n\t\t\tString\twork = \"\";\n\t\t\tString\ttmp  = \"\";\n\t\t\tString\tout  = \"\";\n\t\t\tint\t\trest = 0;\n\n\t\t\tif (stdin.isEmpty()) continue;\n\n\t\t\tfor(char c:stdin.toCharArray()) {\n\t\t\t\twork += MyConv.Encode(c);\n\t\t\t}\n\n\t\t\trest = work.length() % 5;\n\t\t\tfor(int loop = 0; loop < 5 - rest; loop++) {\n\t\t\t\twork += \"0\";\n\t\t\t}\n\n\t\t\tfor(char c:work.toCharArray()) {\n\t\t\t\ttmp += c;\n\t\t\t\tif (tmp.length() == 5) {\n\t\t\t\t\tout += MyConv.Decode(tmp);\n\t\t\t\t\ttmp = \"\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(out);\n\t\t}\n\t}\n\n\tprivate static String parseStdin() {\n        String  stdin = null;\n        \n        try {\n       \t\tstdin = br.readLine();\n        }\n        catch (IOException e) {}\n \n        return stdin;\n\t}\n}\n\nclass MyConv {\n\tpublic static String Encode(char key) {\n\t\tswitch (key) {\n\t\tcase ' ':  return \"101\";\n\t\tcase '\\'': return \"000000\";\n\t\tcase ',':  return \"000011\";\n\t\tcase '-':  return \"10010001\";\n\t\tcase '.':  return \"010001\";\n\t\tcase '?':  return \"000001\";\n\t\tcase 'A':  return \"100101\";\n\t\tcase 'B':  return \"10011010\";\n\t\tcase 'C':  return \"0101\";\n\t\tcase 'D':  return \"0001\";\n\t\tcase 'E':  return \"110\";\n\t\tcase 'F':  return \"01001\";\n\t\tcase 'G':  return \"10011011\";\n\t\tcase 'H':  return \"010000\";\n\t\tcase 'I':  return \"0111\";\n\t\tcase 'J':  return \"10011000\";\n\t\tcase 'K':  return \"0110\";\n\t\tcase 'L':  return \"00100\";\n\t\tcase 'M':  return \"10011001\";\n\t\tcase 'N':  return \"10011110\";\n\t\tcase 'O':  return \"00101\";\n\t\tcase 'P':  return \"111\";\n\t\tcase 'Q':  return \"10011111\";\n\t\tcase 'R':  return \"1000\";\n\t\tcase 'S':  return \"00110\";\n\t\tcase 'T':  return \"00111\";\n\t\tcase 'U':  return \"10011100\";\n\t\tcase 'V':  return \"10011101\";\n\t\tcase 'W':  return \"000010\";\n\t\tcase 'X':  return \"10010010\";\n\t\tcase 'Y':  return \"10010011\";\n\t\tcase 'Z':  return \"10010000\";\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tpublic static char Decode(String key) {\n\t\tif (key.equals(\"00000\")) return 'A';\n\t\tif (key.equals(\"00001\")) return 'B';\n\t\tif (key.equals(\"00010\")) return 'C';\n\t\tif (key.equals(\"00011\")) return 'D';\n\t\tif (key.equals(\"00100\")) return 'E';\n\t\tif (key.equals(\"00101\")) return 'F';\n\t\tif (key.equals(\"00110\")) return 'G';\n\t\tif (key.equals(\"00111\")) return 'H';\n\t\tif (key.equals(\"01000\")) return 'I';\n\t\tif (key.equals(\"01001\")) return 'J';\n\t\tif (key.equals(\"01010\")) return 'K';\n\t\tif (key.equals(\"01011\")) return 'L';\n\t\tif (key.equals(\"01100\")) return 'M';\n\t\tif (key.equals(\"01101\")) return 'N';\n\t\tif (key.equals(\"01110\")) return 'O';\n\t\tif (key.equals(\"01111\")) return 'P';\n\t\tif (key.equals(\"10000\")) return 'Q';\n\t\tif (key.equals(\"10001\")) return 'R';\n\t\tif (key.equals(\"10010\")) return 'S';\n\t\tif (key.equals(\"10011\")) return 'T';\n\t\tif (key.equals(\"10100\")) return 'U';\n\t\tif (key.equals(\"10101\")) return 'V';\n\t\tif (key.equals(\"10110\")) return 'W';\n\t\tif (key.equals(\"10111\")) return 'X';\n\t\tif (key.equals(\"11000\")) return 'Y';\n\t\tif (key.equals(\"11001\")) return 'Z';\n\t\tif (key.equals(\"11010\")) return ' ';\n\t\tif (key.equals(\"11011\")) return '.';\n\t\tif (key.equals(\"11100\")) return ',';\n\t\tif (key.equals(\"11101\")) return '-';\n\t\tif (key.equals(\"11110\")) return '\\'';\n\t\tif (key.equals(\"11111\")) return '?';\n\t\treturn 0;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n\t\n\tString [] data = {\"100101\",\n\t\t\t\"10011010\",\n\t\t\t\"0101\",\n\t\t\t\"0001\",\n\t\t\t\"110\",\n\t\t\t\"01001\",\n\t\t\t\"10011011\",\n\t\t\t\"010000\",\n\t\t\t\"0111\",\n\t\t\t\"10011000\",\n\t\t\t\"0110\",\n\t\t\t\"00100\",\n\t\t\t\"10011001\",\n\t\t\t\"10011110\",\n\t\t\t\"00101\",\n\t\t\t\"111\",\n\t\t\t\"10011111\",\n\t\t\t\"1000\",\n\t\t\t\"00110\",\n\t\t\t\"00111\",\n\t\t\t\"10011100\",\n\t\t\t\"10011101\",\n\t\t\t\"000010\",\n\t\t\t\"10010010\",\n\t\t\t\"10010011\",\n\t\t\t\"10010000\",\n\t\t\t\"101\",\n\t\t\t\"000000\",\n\t\t\t\"000011\",\n\t\t\t\"10010001\",\n\t\t\t\"010001\",\n\t\t\t\"000001\"};\n\tHashMap<String, String> map;\n\n\tprivate void doit(){\n\t\tScanner sc = new Scanner(System.in);\n\t\tinit();\n\t\twhile(sc.hasNextLine()){\n\t\t\tString s = sc.nextLine();\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tint len = s.length();\n\t\t\tfor(int i = 0; i < len; i++){\n\t\t\t\tchar c = s.charAt(i);\n\t\t\t\tswitch(c){\n\t\t\t\tcase ' ':\n\t\t\t\t\tsb.append(\"101\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase '\\'':\n\t\t\t\t\tsb.append(\"000000\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase ',':\n\t\t\t\t\tsb.append(\"000011\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\tsb.append(\"10010001\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase '.':\n\t\t\t\t\tsb.append(\"010001\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase '?':\n\t\t\t\t\tsb.append(\"000001\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tsb.append(data[(int)(c - 'A')]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint len2 = (5 - sb.length() % 5) % 5;\n\t\t\tfor(int i = 0; i < len2; i++){\n\t\t\t\tsb.append(\"0\");\n\t\t\t}\n\t\t\tStringBuilder ans = new StringBuilder();\n\t\t\tfor(int i = 0; i < sb.length(); i += 5){\n\t\t\t\tString sub = sb.substring(i, i + 5);\n\t\t\t\tans.append(map.get(sub));\n\t\t\t}\n\t\t\tSystem.out.println(ans.toString());\n\t\t}\n\t}\n\t\n\tprivate void init() {\n\t\tmap = new HashMap<String, String>();\n\t\tmap.put(\"00000\",\"A\");\n\t\tmap.put(\"00001\",\"B\");\n\t\tmap.put(\"00010\",\"C\");\n\t\tmap.put(\"00011\",\"D\");\n\t\tmap.put(\"00100\",\"E\");\n\t\tmap.put(\"00101\",\"F\");\n\t\tmap.put(\"00110\",\"G\");\n\t\tmap.put(\"00111\",\"H\");\n\t\tmap.put(\"01000\",\"I\");\n\t\tmap.put(\"01001\",\"J\");\n\t\tmap.put(\"01010\",\"K\");\n\t\tmap.put(\"01011\",\"L\");\n\t\tmap.put(\"01100\",\"M\");\n\t\tmap.put(\"01101\",\"N\");\n\t\tmap.put(\"01110\",\"O\");\n\t\tmap.put(\"01111\",\"P\");\n\t\tmap.put(\"10000\",\"Q\");\n\t\tmap.put(\"10001\",\"R\");\n\t\tmap.put(\"10010\",\"S\");\n\t\tmap.put(\"10011\",\"T\");\n\t\tmap.put(\"10100\",\"U\");\n\t\tmap.put(\"10101\",\"V\");\n\t\tmap.put(\"10110\",\"W\");\n\t\tmap.put(\"10111\",\"X\");\n\t\tmap.put(\"11000\",\"Y\");\n\t\tmap.put(\"11001\",\"Z\");\n\t\tmap.put(\"11010\",\" \");\n\t\tmap.put(\"11011\",\".\");\n\t\tmap.put(\"11100\",\",\");\n\t\tmap.put(\"11101\",\"-\");\n\t\tmap.put(\"11110\",\"'\");\n\t\tmap.put(\"11111\",\"?\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().doit();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.StringTokenizer;\nimport java.util.HashMap;\n\nclass Translator {\n\tString t,res;\n\tHashMap<String,String> map = new HashMap<String,String>();\n\tHashMap<String,String> back = new HashMap<String,String>();\n\tTranslator() {\n\t\tmap.put(\" \",\"101\");\n\t\tmap.put(\"\\'\",\"000000\");\n\t\tmap.put(\",\",\"000011\");\n\t\tmap.put(\"-\",\"10010001\");\n\t\tmap.put(\".\",\"010001\");\n\t\tmap.put(\"?\",\"000001\");\n\t\tmap.put(\"A\",\"100101\");\n\t\tmap.put(\"B\",\"10011010\");\n\t\tmap.put(\"C\",\"0101\");\n\t\tmap.put(\"D\",\"0001\");\n\t\tmap.put(\"E\",\"110\");\n\t\tmap.put(\"F\",\"01001\");\n\t\tmap.put(\"G\",\"10011011\");\n\t\tmap.put(\"H\",\"010000\");\n\t\tmap.put(\"I\",\"0111\");\n\t\tmap.put(\"J\",\"10011000\");\n\t\tmap.put(\"K\",\"0110\");\n\t\tmap.put(\"L\",\"00100\");\n\t\tmap.put(\"M\",\"10011001\");\n\t\tmap.put(\"N\",\"10011110\");\n\t\tmap.put(\"O\",\"00101\");\n\t\tmap.put(\"P\",\"111\");\n\t\tmap.put(\"Q\",\"10011111\");\n\t\tmap.put(\"R\",\"1000\");\n\t\tmap.put(\"S\",\"00110\");\n\t\tmap.put(\"T\",\"00111\");\n\t\tmap.put(\"U\",\"10011100\");\n\t\tmap.put(\"V\",\"10011101\");\n\t\tmap.put(\"W\",\"000010\");\n\t\tmap.put(\"X\",\"10010010\");\n\t\tmap.put(\"Y\",\"10010011\");\n\t\tmap.put(\"Z\",\"10010000\");\n\t\tback.put(\"00000\",\"A\");\n\t\tback.put(\"00001\",\"B\");\n\t\tback.put(\"00010\",\"C\");\n\t\tback.put(\"00011\",\"D\");\n\t\tback.put(\"00100\",\"E\");\n\t\tback.put(\"00101\",\"F\");\n\t\tback.put(\"00110\",\"G\");\n\t\tback.put(\"00111\",\"H\");\n\t\tback.put(\"01000\",\"I\");\n\t\tback.put(\"01001\",\"J\");\n\t\tback.put(\"01010\",\"K\");\n\t\tback.put(\"01011\",\"L\");\n\t\tback.put(\"01100\",\"M\");\n\t\tback.put(\"01101\",\"N\");\n\t\tback.put(\"01110\",\"O\");\n\t\tback.put(\"01111\",\"P\");\n\t\tback.put(\"10000\",\"Q\");\n\t\tback.put(\"10001\",\"R\");\n\t\tback.put(\"10010\",\"S\");\n\t\tback.put(\"10011\",\"T\");\n\t\tback.put(\"10100\",\"U\");\n\t\tback.put(\"10101\",\"V\");\n\t\tback.put(\"10110\",\"W\");\n\t\tback.put(\"10111\",\"X\");\n\t\tback.put(\"11000\",\"Y\");\n\t\tback.put(\"11001\",\"Z\");\n\t\tback.put(\"11010\",\" \");\n\t\tback.put(\"11011\",\".\");\n\t\tback.put(\"11100\",\",\");\n\t\tback.put(\"11101\",\"-\");\n\t\tback.put(\"11110\",\"\\'\");\n\t\tback.put(\"11111\",\"?\");\n\t}\n\n\tvoid set(String s) {\n\t\tthis.t = \"\";\n\t\tint n = s.length();\n\t\tfor (int i=0;i<n;i++) {\n\t\t\tthis.t = this.t+map.get(\"\"+s.charAt(i));\n\t\t}\n\t}\n\n\tString put() {\n\t\tthis.res = \"\";\n\t\tint n = this.t.length();\n\t\tif (n%5>0) {\n\t\t\tint m = 5-(n%5);\n\t\t\tn += m;\n\t\t\tfor (int i=0;i<m;i++) this.t = this.t+\"0\";\n\t\t}\n\t\tn /= 5;\n\t\tfor (int i=0;i<n;i++) {\n\t\t\tthis.res = this.res+back.get(this.t.substring(i*5,i*5+5));\n\t\t}\n\t\treturn this.res;\n\t}\n}\n\nclass Main {\n\tpublic static void main(String args[]) {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n\t\ttry {\n\t\t\tTranslator t = new Translator();\n\t\t\tt.set(br.readLine());\n\t\t\tSystem.out.println(t.put());\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.LinkedList;\nimport java.util.Scanner;\n\npublic class Main {\n\tprivate Scanner sc;\n\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\t\n\tpublic Main() {\n\t\tsc = new Scanner(System.in);\n\t\t\n\t\tString ans = \"\";\n\t\tString tmp = \"\";\n\t\twhile (sc.hasNextLine()) {\n\t\t\tString nico = sc.nextLine();\n\t\t\t\n\t\t\tfor (int i = 0; i < nico.length(); i++) {\n\t\t\t\tswitch (nico.charAt(i)) {\n\t\t\t\tcase ' ' :\n\t\t\t\t\ttmp = tmp + \"101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '\\'':\n\t\t\t\t\ttmp = tmp + \"000000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase ',':\n\t\t\t\t\ttmp = tmp + \"000011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttmp = tmp + \"10010001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '.':\n\t\t\t\t\ttmp = tmp + \"010001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '?':\n\t\t\t\t\ttmp = tmp + \"000001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'A':\n\t\t\t\t\ttmp = tmp + \"100101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'B':\n\t\t\t\t\ttmp = tmp + \"10011010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'C':\n\t\t\t\t\ttmp = tmp + \"0101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'D':\n\t\t\t\t\ttmp = tmp + \"0001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'E':\n\t\t\t\t\ttmp = tmp + \"110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'F':\n\t\t\t\t\ttmp = tmp + \"01001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'G':\n\t\t\t\t\ttmp = tmp + \"10011011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'H':\n\t\t\t\t\ttmp = tmp + \"010000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'I':\n\t\t\t\t\ttmp = tmp + \"0111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'J':\n\t\t\t\t\ttmp = tmp + \"10011000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'K':\n\t\t\t\t\ttmp = tmp + \"0110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'L':\n\t\t\t\t\ttmp = tmp + \"00100\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'M':\n\t\t\t\t\ttmp = tmp + \"10011001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'N':\n\t\t\t\t\ttmp = tmp + \"10011110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'O':\n\t\t\t\t\ttmp = tmp + \"00101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'P':\n\t\t\t\t\ttmp = tmp + \"111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Q':\n\t\t\t\t\ttmp = tmp + \"10011111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'R':\n\t\t\t\t\ttmp = tmp + \"1000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'S':\n\t\t\t\t\ttmp = tmp + \"00110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'T':\n\t\t\t\t\ttmp = tmp + \"00111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'U':\n\t\t\t\t\ttmp = tmp + \"10011100\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'V':\n\t\t\t\t\ttmp = tmp + \"10011101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'W':\n\t\t\t\t\ttmp = tmp + \"000010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'X':\n\t\t\t\t\ttmp = tmp + \"10010010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Y':\n\t\t\t\t\ttmp = tmp + \"10010011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Z':\n\t\t\t\t\ttmp = tmp + \"10010000\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twhile (tmp.length() >= 5) {\n\t\t\t\t\tans = ans + getChar(tmp.substring(0, 5));\n\t\t\t\t\ttmp = tmp.substring(5);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttmp = tmp + \"101\";\n\t\t}\n\t\t\n\t\ttmp = tmp.substring(0, tmp.length() - 3);\n\n\t\tif (tmp.length() != 0) {\n\t\t\tint lim = 5 - tmp.length();\n\t\t\tfor (int i = 0; i < lim; i++) {\n\t\t\t\ttmp = tmp + \"0\";\n\t\t\t}\n\t\t\tans = ans + getChar(tmp);\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n\t\n\tprivate char getChar(String str) {\n\t\tswitch (str) {\n\t\tcase \"00000\":\n\t\t\treturn 'A';\n\t\tcase \"00001\":\n\t\t\treturn 'B';\n\t\tcase \"00010\":\n\t\t\treturn 'C';\n\t\tcase \"00011\":\n\t\t\treturn 'D';\n\t\tcase \"00100\":\n\t\t\treturn 'E';\n\t\tcase \"00101\":\n\t\t\treturn 'F';\n\t\tcase \"00110\":\n\t\t\treturn 'G';\n\t\tcase \"00111\":\n\t\t\treturn 'H';\n\t\tcase \"01000\":\n\t\t\treturn 'I';\n\t\tcase \"01001\":\n\t\t\treturn 'J';\n\t\tcase \"01010\":\n\t\t\treturn 'K';\n\t\tcase \"01011\":\n\t\t\treturn 'L';\n\t\tcase \"01100\":\n\t\t\treturn 'M';\n\t\tcase \"01101\":\n\t\t\treturn 'N';\n\t\tcase \"01110\":\n\t\t\treturn 'O';\n\t\tcase \"01111\":\n\t\t\treturn 'P';\n\t\tcase \"10000\":\n\t\t\treturn 'Q';\n\t\tcase \"10001\":\n\t\t\treturn 'R';\n\t\tcase \"10010\":\n\t\t\treturn 'S';\n\t\tcase \"10011\":\n\t\t\treturn 'T';\n\t\tcase \"10100\":\n\t\t\treturn 'U';\n\t\tcase \"10101\":\n\t\t\treturn 'V';\n\t\tcase \"10110\":\n\t\t\treturn 'W';\n\t\tcase \"10111\":\n\t\t\treturn 'X';\n\t\tcase \"11000\":\n\t\t\treturn 'Y';\n\t\tcase \"11001\":\n\t\t\treturn 'Z';\n\t\tcase \"11010\":\n\t\t\treturn ' ';\n\t\tcase \"11011\":\n\t\t\treturn '.';\n\t\tcase \"11100\":\n\t\t\treturn ',';\n\t\tcase \"11101\":\n\t\t\treturn '-';\n\t\tcase \"11110\":\n\t\t\treturn '\\'';\n\t\tcase \"11111\":\n\t\t\treturn '?';\n\t\t}\n\t\t\n\t\treturn 0;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tstatic final HashMap<Character, String> c1 = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");\n\t\t\tput('\\'', \"000000\");\n\t\t\tput(',', \"000011\");\n\t\t\tput('-', \"10010001\");\n\t\t\tput('.', \"010001\");\n\t\t\tput('?', \"000001\");\n\t\t\tput('A', \"100101\");\n\t\t\tput('B', \"10011010\");\n\t\t\tput('C', \"0101\");\n\t\t\tput('D', \"0001\");\n\t\t\tput('E', \"110\");\n\t\t\tput('F', \"01001\");\n\t\t\tput('G', \"10011011\");\n\t\t\tput('H', \"010000\");\n\t\t\tput('I', \"0111\");\n\t\t\tput('J', \"10011000\");\n\t\t\tput('K', \"0110\");\n\t\t\tput('L', \"00100\");\n\t\t\tput('M', \"10011001\");\n\t\t\tput('N', \"10011110\");\n\t\t\tput('O', \"00101\");\n\t\t\tput('P', \"111\");\n\t\t\tput('Q', \"10011111\");\n\t\t\tput('R', \"1000\");\n\t\t\tput('S', \"00110\");\n\t\t\tput('T', \"00111\");\n\t\t\tput('U', \"10011100\");\n\t\t\tput('V', \"10011101\");\n\t\t\tput('W', \"000010\");\n\t\t\tput('X', \"10010010\");\n\t\t\tput('Y', \"10010011\");\n\t\t\tput('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> c2 = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"00000\", 'A');\n\t\t\tput(\"00001\", 'B');\n\t\t\tput(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D');\n\t\t\tput(\"00100\", 'E');\n\t\t\tput(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G');\n\t\t\tput(\"00111\", 'H');\n\t\t\tput(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J');\n\t\t\tput(\"01010\", 'K');\n\t\t\tput(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M');\n\t\t\tput(\"01101\", 'N');\n\t\t\tput(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P');\n\t\t\tput(\"10000\", 'Q');\n\t\t\tput(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S');\n\t\t\tput(\"10011\", 'T');\n\t\t\tput(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V');\n\t\t\tput(\"10110\", 'W');\n\t\t\tput(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y');\n\t\t\tput(\"11001\", 'Z');\n\t\t\tput(\"11010\", ' ');\n\t\t\tput(\"11011\", '.');\n\t\t\tput(\"11100\", ',');\n\t\t\tput(\"11101\", '-');\n\t\t\tput(\"11110\", '\\'');\n\t\t\tput(\"11111\", '?');\n\t\t}\n\t};\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n\t\t\t//\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1.get(c));\n\t\t\t}\n\t\t\t//\n\t\t\tsb1.append(\"00000\");\n\t\t\t//\n\t\t\tString line2 = sb1.toString();\n\t\t\tfor (int i = 0; i < line2.length() - 5; i += 5) {\n\t\t\t\tsb2.append(c2.get(line2.substring(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println(sb2.toString());\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\nimport static java.util.Arrays.deepToString;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\tvoid tr(Object... os) {\n\t\tSystem.err.println(deepToString(os));\n\t}\n\n\tScanner sc = new Scanner(System.in);\n\tpublic void run() {\n\t\twhile (sc.hasNextLine()) {\n\t\t\tchar[] s = sc.nextLine().toCharArray();\n\t\t\tchar[] t = getCode1(s);\n\t\t\tSystem.out.println(new String(t));\n\t\t}\n\t}\n\t\n\tchar[] getCode1(char[] s) {\n\t\tArrayList<Integer> L = new ArrayList<Integer>();\n\t\t\n\t\tfor (char c : s) {\n\t\t\tString t = f(c);\n\t\t\tfor (int i = 0; i < t.length(); i++) {\n\t\t\t\tL.add(t.charAt(i) == '1' ? 1 : 0);\n\t\t\t}\n\t\t}\n\t\twhile (L.size() % 5 > 0) {\n\t\t\tL.add(0);\n\t\t}\n\t\t\n\t\tchar[] res = new char[L.size() / 5];\n\t\tfor (int i = 0; i < L.size(); i += 5) {\n\t\t\tString cc = \"\";\n\t\t\tfor (int j = 0; j < 5; j++) cc += L.get(i + j);\n\t\t\tres[i/5] = g(cc);\n\t\t}\n\t\treturn res;\n\t}\n\t\n\tMap<String, Character> mp;\n\t\n\t\n\tchar g(String s) {\n\t\tif (mp == null) {\n\t\t\tmp = new HashMap<String, Character>();\n\t\t\tmp.put(\"00000\",'A');\n\t\t\tmp.put(\"00001\",'B');\n\t\t\tmp.put(\"00010\",'C');\n\t\t\tmp.put(\"00011\",'D');\n\t\t\tmp.put(\"00100\",'E');\n\t\t\tmp.put(\"00101\",'F');\n\t\t\tmp.put(\"00110\",'G');\n\t\t\tmp.put(\"00111\",'H');\n\t\t\tmp.put(\"01000\",'I');\n\t\t\tmp.put(\"01001\",'J');\n\t\t\tmp.put(\"01010\",'K');\n\t\t\tmp.put(\"01011\",'L');\n\t\t\tmp.put(\"01100\",'M');\n\t\t\tmp.put(\"01101\",'N');\n\t\t\tmp.put(\"01110\",'O');\n\t\t\tmp.put(\"01111\",'P');\n\t\t\tmp.put(\"10000\",'Q');\n\t\t\tmp.put(\"10001\",'R');\n\t\t\tmp.put(\"10010\",'S');\n\t\t\tmp.put(\"10011\",'T');\n\t\t\tmp.put(\"10100\",'U');\n\t\t\tmp.put(\"10101\",'V');\n\t\t\tmp.put(\"10110\",'W');\n\t\t\tmp.put(\"10111\",'X');\n\t\t\tmp.put(\"11000\",'Y');\n\t\t\tmp.put(\"11001\",'Z');\n\t\t\tmp.put(\"11010\",' ');\n\t\t\tmp.put(\"11011\",'.');\n\t\t\tmp.put(\"11100\",',');\n\t\t\tmp.put(\"11101\",'-');\n\t\t\tmp.put(\"11110\",'\\'');\n\t\t\tmp.put(\"11111\",'?');\n\t\t}\n\t\treturn mp.get(s);\n\t}\n\t\n\tString f(char c) {\n\t\tswitch(c) {\n\tcase ' ': return\"101\";\n\tcase '\\'': return\"000000\";\n\tcase ',': return\"000011\";\n\tcase '-': return\"10010001\";\n\tcase '.': return\"010001\";\n\tcase '?': return\"000001\";\n\tcase 'A': return\"100101\";\n\tcase 'B': return\"10011010\";\n\tcase 'C': return\"0101\";\n\tcase 'D': return\"0001\";\n\tcase 'E': return\"110\";\n\tcase 'F': return\"01001\";\n\tcase 'G': return\"10011011\";\n\tcase 'H': return\"010000\";\n\tcase 'I': return\"0111\";\n\tcase 'J': return\"10011000\";\n\tcase 'K': return\"0110\";\n\tcase 'L': return\"00100\";\n\tcase 'M': return\"10011001\";\n\tcase 'N': return\"10011110\";\n\tcase 'O': return\"00101\";\n\tcase 'P': return\"111\";\n\tcase 'Q': return\"10011111\";\n\tcase 'R': return\"1000\";\n\tcase 'S': return\"00110\";\n\tcase 'T': return\"00111\";\n\tcase 'U': return\"10011100\";\n\tcase 'V': return\"10011101\";\n\tcase 'W': return\"000010\";\n\tcase 'X': return\"10010010\";\n\tcase 'Y': return\"10010011\";\n\tcase 'Z': return\"10010000\";\n\t\t}\n\t\treturn \"\";\n\t}\n\t\n\t\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\nimport static java.lang.Math.*;\n\nclass Main {\n\n    public static void main( final String[] args ) {\n\n\tfinal char[] inFromLst = { ' ', '\\'', ',', '-', '.', '?', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };\n\n\tfinal String[] inToLst = { \"101\" ,\"000000\" ,\"000011\" ,\"10010001\" ,\"010001\" ,\"000001\" ,\"100101\" ,\"10011010\" ,\"0101\" ,\"0001\" ,\"110\" ,\"01001\" ,\"10011011\" ,\"010000\" ,\"0111\" ,\"10011000\" ,\"0110\" ,\"00100\" ,\"10011001\" ,\"10011110\" ,\"00101\" ,\"111\" ,\"10011111\" ,\"1000\" ,\"00110\" ,\"00111\" ,\"10011100\" ,\"10011101\" ,\"000010\" ,\"10010010\" ,\"10010011\" ,\"10010000\" };\n\n\tfinal HashMap<Character, String> inMap = new HashMap<Character, String>();\n\tfor ( int i = 0; i < inFromLst.length; i++ ) {\n\t    inMap.put( inFromLst[ i ], inToLst[ i ] );\n\t}\n\n\tfinal String[] outFromLst = { \"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\" };\n\n\tfinal char[] outToLst = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '.', ',', '-', '\\'', '?' };\n\n\tfinal Map<String, Character> outMap = new HashMap<String, Character>();\n\tfor ( int i = 0; i < outFromLst.length; i++ ) {\n\t    outMap.put( outFromLst[ i ], outToLst[ i ] );\n\t}\n\n\twhile ( stdin.hasNextLine() ) {\n\t    final Scanner stdin = new Scanner( System.in );\n\t    final String input = stdin.nextLine();\n\t    \n\t    final StringBuilder in = new StringBuilder();\n\t    for ( final char ch : input.toCharArray() ) {\n\t\tin.append( inMap.get( ch ) );\n\t    }\n\t    \n\t    for ( int i = 0; i < in.length() % 5; i++ ) {\n\t\tin.append( '0' );\n\t    }\n\t    final StringBuilder out = new StringBuilder();\n\t    final int no = in.length() / 5;\n\t    for ( int i = 0; i < no; i++ ) {\n\t\tfinal String token = in.substring( i * 5, ( i + 1 ) * 5 );\n\t\tout.append( outMap.get( token ) );\n\t    }\n\t    System.out.println( out.toString() );\n\t}\n    }    \n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.io.*;\n//import java.util.Arrays;\npublic class Main {\n\tpublic static void main(String[] args) throws java.io.IOException {\n\t\tScanner scan = new Scanner(System.in);\n\t\tInputStreamReader is = new InputStreamReader(System.in);\n\t\tBufferedReader br = new BufferedReader(is);\n\t\tString text = \"\";\n\t\twhile(scan.hasNext()){\n\t\t\ttext += br.readLine()+\" \";\n\t\t}\n\t\ttext = text.substring(0, text.length()-1);\n\t\tchar mozi[] = text.toCharArray();\n\t\tString To = \"\";\n\t\tfor(int i = 0 ; i < mozi.length ; i++){\n\t\t\tString Hantei =  String.valueOf(mozi[i]);\n\t\t\tif(Hantei.equals(\"A\")){\n\t\t\t\tTo += \"100101\";\n\t\t\t}else if(Hantei.equals(\"B\")){\n\t\t\t\tTo += \"10011010\";\n\t\t\t}else if(Hantei.equals(\"C\")){\n\t\t\t\tTo += \"0101\";\n\t\t\t}else if(Hantei.equals(\"D\")){\n\t\t\t\tTo += \"0001\";\n\t\t\t}else if(Hantei.equals(\"E\")){\n\t\t\t\tTo += \"110\";\n\t\t\t}else if(Hantei.equals(\"F\")){\n\t\t\t\tTo += \"01001\";\n\t\t\t}else if(Hantei.equals(\"G\")){\n\t\t\t\tTo += \"10011011\";\n\t\t\t}else if(Hantei.equals(\"H\")){\n\t\t\t\tTo += \"010000\";\n\t\t\t}else if(Hantei.equals(\"I\")){\n\t\t\t\tTo += \"0111\";\n\t\t\t}else if(Hantei.equals(\"J\")){\n\t\t\t\tTo += \"10011000\";\n\t\t\t}else if(Hantei.equals(\"K\")){\n\t\t\t\tTo += \"0110\";\n\t\t\t}else if(Hantei.equals(\"L\")){\n\t\t\t\tTo += \"00100\";\n\t\t\t}else if(Hantei.equals(\"M\")){\n\t\t\t\tTo += \"10011001\";\n\t\t\t}else if(Hantei.equals(\"N\")){\n\t\t\t\tTo += \"10011110\";\n\t\t\t}else if(Hantei.equals(\"O\")){\n\t\t\t\tTo += \"00101\";\n\t\t\t}else if(Hantei.equals(\"P\")){\n\t\t\t\tTo += \"111\";\n\t\t\t}else if(Hantei.equals(\"Q\")){\n\t\t\t\tTo += \"10011111\";\n\t\t\t}else if(Hantei.equals(\"R\")){\n\t\t\t\tTo += \"1000\";\n\t\t\t}else if(Hantei.equals(\"S\")){\n\t\t\t\tTo += \"00110\";\n\t\t\t}else if(Hantei.equals(\"T\")){\n\t\t\t\tTo += \"00111\";\n\t\t\t}else if(Hantei.equals(\"U\")){\n\t\t\t\tTo += \"10011100\";\n\t\t\t}else if(Hantei.equals(\"V\")){\n\t\t\t\tTo += \"10011101\";\n\t\t\t}else if(Hantei.equals(\"W\")){\n\t\t\t\tTo += \"000010\";\n\t\t\t}else if(Hantei.equals(\"X\")){\n\t\t\t\tTo += \"10010010\";\n\t\t\t}else if(Hantei.equals(\"Y\")){\n\t\t\t\tTo += \"10010011\";\n\t\t\t}else if(Hantei.equals(\"Z\")){\n\t\t\t\tTo += \"10010000\";\n\t\t\t}else if(Hantei.equals(\" \")){\n\t\t\t\tTo += \"101\";\n\t\t\t}else if(Hantei.equals(\"'\")){\n\t\t\t\tTo += \"000000\";\n\t\t\t}else if(Hantei.equals(\",\")){\n\t\t\t\tTo += \"000011\";\n\t\t\t}else if(Hantei.equals(\"-\")){\n\t\t\t\tTo += \"10010001\";\n\t\t\t}else if(Hantei.equals(\".\")){\n\t\t\t\tTo += \"010001\";\n\t\t\t}else if(Hantei.equals(\"?\")){\n\t\t\t\tTo += \"000001\";\n\t\t\t}\n\t\t}\n\t\tint amari =  To.length()%5;\n\t\tif(amari == 1){\n\t\t\tTo += \"0000\";\n\t\t}else if(amari == 2){\n\t\t\tTo += \"000\";\n\t\t}else if(amari == 3){\n\t\t\tTo += \"00\";\n\t\t}else if(amari == 4){\n\t\t\tTo += \"0\";\n\t\t}\n\t\tint won[] = new int[To.length()/5];\n\t\tint j;\n\t\tString newtext = \"\";\n\t\tfor(j = 0 ; j < To.length()/5 ; j++){\n\t\t\twon[j] = Integer.parseInt(To.substring(j*5,(j+1)*5));\n\t\t\tif(won[j] == 0){\n\t\t\t\tnewtext += \"A\";\n\t\t\t}else if(won[j] == 1){\n\t\t\t\tnewtext += \"B\";\n\t\t\t}else if(won[j] == 10){\n\t\t\t\tnewtext += \"C\";\n\t\t\t}else if(won[j] == 11){\n\t\t\t\tnewtext += \"D\";\n\t\t\t}else if(won[j] == 100){\n\t\t\t\tnewtext += \"E\";\n\t\t\t}else if(won[j] == 101){\n\t\t\t\tnewtext += \"F\";\n\t\t\t}else if(won[j] == 110){\n\t\t\t\tnewtext += \"G\";\n\t\t\t}else if(won[j] == 111){\n\t\t\t\tnewtext += \"H\";\n\t\t\t}else if(won[j] == 1000){\n\t\t\t\tnewtext += \"I\";\n\t\t\t}else if(won[j] == 1001){\n\t\t\t\tnewtext += \"J\";\n\t\t\t}else if(won[j] == 1010){\n\t\t\t\tnewtext += \"K\";\n\t\t\t}else if(won[j] == 1011){\n\t\t\t\tnewtext += \"L\";\n\t\t\t}else if(won[j] == 1100){\n\t\t\t\tnewtext += \"M\";\n\t\t\t}else if(won[j] == 1101){\n\t\t\t\tnewtext += \"N\";\n\t\t\t}else if(won[j] == 1110){\n\t\t\t\tnewtext += \"O\";\n\t\t\t}else if(won[j] == 1111){\n\t\t\t\tnewtext += \"P\";\n\t\t\t}else if(won[j] == 10000){\n\t\t\t\tnewtext += \"Q\";\n\t\t\t}else if(won[j] == 10001){\n\t\t\t\tnewtext += \"R\";\n\t\t\t}else if(won[j] == 10010){\n\t\t\t\tnewtext += \"S\";\n\t\t\t}else if(won[j] == 10011){\n\t\t\t\tnewtext += \"T\";\n\t\t\t}else if(won[j] == 10100){\n\t\t\t\tnewtext += \"U\";\n\t\t\t}else if(won[j] == 10101){\n\t\t\t\tnewtext += \"V\";\n\t\t\t}else if(won[j] == 10110){\n\t\t\t\tnewtext += \"W\";\n\t\t\t}else if(won[j] == 10111){\n\t\t\t\tnewtext += \"X\";\n\t\t\t}else if(won[j] == 11000){\n\t\t\t\tnewtext += \"Y\";\n\t\t\t}else if(won[j] == 11001){\n\t\t\t\tnewtext += \"Z\";\n\t\t\t}else if(won[j] == 11010){\n\t\t\t\tnewtext += \" \";\n\t\t\t}else if(won[j] == 11011){\n\t\t\t\tnewtext += \".\";\n\t\t\t}else if(won[j] == 11100){\n\t\t\t\tnewtext += \",\";\n\t\t\t}else if(won[j] == 11101){\n\t\t\t\tnewtext += \"-\";\n\t\t\t}else if(won[j] == 11110){\n\t\t\t\tnewtext += \"'\";\n\t\t\t}else{\n\t\t\t\tnewtext += \"?\";\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(newtext);\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\n\npublic class Main{\n\tpublic static void solve(String str){\n\t\tStringBuilder temp = new StringBuilder();\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tswitch( str.charAt(i) ){\n\t\t\t\tcase ' ' : temp.append(\"101\"); break;\n\t\t\t\tcase '\\'' : temp.append(\"000000\"); break;\n\t\t\t\tcase ',' : temp.append(\"000011\"); break;\n\t\t\t\tcase '-' : temp.append(\"10010001\"); break;\n\t\t\t\tcase '.' : temp.append(\"010001\"); break;\n\t\t\t\tcase '?' : temp.append(\"000001\"); break;\n\t\t\t\tcase 'A' : temp.append(\"100101\"); break;\n\t\t\t\tcase 'B' : temp.append(\"10011010\"); break;\n\t\t\t\tcase 'C' : temp.append(\"0101\"); break;\n\t\t\t\tcase 'D' : temp.append(\"0001\"); break;\n\t\t\t\tcase 'E' : temp.append(\"110\"); break;\n\t\t\t\tcase 'F' : temp.append(\"01001\"); break;\n\t\t\t\tcase 'G' : temp.append(\"10011011\"); break;\n\t\t\t\tcase 'H' : temp.append(\"010000\"); break;\n\t\t\t\tcase 'I' : temp.append(\"0111\"); break;\n\t\t\t\tcase 'J' : temp.append(\"10011000\"); break;\n\t\t\t\tcase 'K' : temp.append(\"0110\"); break;\n\t\t\t\tcase 'L' : temp.append(\"00100\"); break;\n\t\t\t\tcase 'M' : temp.append(\"10011001\"); break;\n\t\t\t\tcase 'N' : temp.append(\"10011110\"); break;\n\t\t\t\tcase 'O' : temp.append(\"00101\"); break;\n\t\t\t\tcase 'P' : temp.append(\"111\"); break;\n\t\t\t\tcase 'Q' : temp.append(\"10011111\"); break;\n\t\t\t\tcase 'R' : temp.append(\"1000\"); break;\n\t\t\t\tcase 'S' : temp.append(\"00110\"); break;\n\t\t\t\tcase 'T' : temp.append(\"00111\"); break;\n\t\t\t\tcase 'U' : temp.append(\"10011100\"); break;\n\t\t\t\tcase 'V' : temp.append(\"10011101\"); break;\n\t\t\t\tcase 'W' : temp.append(\"000010\"); break;\n\t\t\t\tcase 'X' : temp.append(\"10010010\"); break;\n\t\t\t\tcase 'Y' : temp.append(\"10010011\"); break;\n\t\t\t\tcase 'Z' : temp.append(\"10010000\"); break;\n\t\t\t}\n\t\t}\n\t\twhile( temp.length()%5 != 0 ){\n\t\t\ttemp.append(\"0\");\n\t\t}\n\t\tString s = new String(temp);\n\t\t\n\t\tStringBuilder ans = new StringBuilder();\n\t\tfor(int i = 0; i < s.length()/5; i++){\n\t\t\tint x = Integer.parseInt(s.substring(i*5, i*5+5),2);\n\t\t\tif( x < 26 ){\n\t\t\t\tans.append(Character.toString((char)('A'+x)));\n\t\t\t} else {\n\t\t\t\tswitch( x ){\n\t\t\t\t\tcase 26: ans.append(\" \"); break;\n\t\t\t\t\tcase 27: ans.append(\".\"); break;\n\t\t\t\t\tcase 28: ans.append(\",\"); break;\n\t\t\t\t\tcase 29: ans.append(\"-\"); break;\n\t\t\t\t\tcase 30: ans.append(\"'\"); break;\n\t\t\t\t\tcase 31: ans.append(\"?\"); break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n\t\t\t\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = null;\n\t\t\n\t\ttry{\n\t\t\tstdIn = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\t\t\n\t\t\twhile( stdIn.hasNext() ){\n\t\t\t\tString str = stdIn.nextLine();\n\t\t\t\tsolve(str);\t\t\n\t\t\t}\n\t\t} finally {\n\t\t\tif( stdIn != null ){\n\t\t\t\tstdIn.close();\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\nclass Main {\n    static String decrypt(String x) {\n        int dec = Integer.parseInt(x, 2);\n        if (dec <= 25) {\n            return String.valueOf((char) ('A' + dec));\n        } else if (dec == 26) {\n            return \" \";\n        } else if (dec == 27) {\n            return \".\";\n        } else if (dec == 28) {\n            return \",\";\n        } else if (dec == 29) {\n            return \"-\";\n        } else if (dec == 30) {\n            return \"\\'\";\n        } else if (dec == 31) {\n            return \"?\";\n        }\n\n        return \"*****\"; // unreachable\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] s = { \" \", \"\\'\", \",\", \"-\", \".\", \"?\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\",\n                \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\" };\n        String[] f = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\",\n                \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\",\n                \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\",\n                \"10010011\", \"10010000\" };\n\n        String line;\n        while ((line = br.readLine()) != null) {\n            StringBuilder sb = new StringBuilder();\n            for (char c : line.toCharArray()) {\n                for (int i = 0; i < s.length; i++) {\n                    if (s[i].equals(String.valueOf(c))) {\n                        sb.append(f[i]);\n                        break;\n                    }\n                }\n            }\n            for (int i = 0; i < sb.length()%5; i++) {\n                sb.append(\"0\");\n            }\n\n            StringBuilder result = new StringBuilder();\n\n            while (sb.length() > 5) {\n                String x = sb.substring(0, 5);\n                sb.delete(0, 5);\n                result.append(decrypt(x));\n            }\n\n            result.append(decrypt(sb.toString()));\n\n            System.out.println(result);\n        }\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "//Volume0-0088\nimport java.util.HashMap;\nimport java.util.Scanner;\n\npublic class Main {\n\n\t//declare\n\tprivate static HashMap<Character,String> CtoS = new HashMap<Character,String>();\n\tprivate static HashMap<String,Character> StoC = new HashMap<String,Character>();\n\n\tpublic static void main(String[] args) {\n\n\t\tint    mod;\n\t\tchar[] ch;\n\t\tString s;\n\n\t\t//initialize\n\t\tinitMap();\n\n        //input\n        Scanner sc = new Scanner(System.in);\n        while(sc.hasNext()){\n        \tch = sc.nextLine().toCharArray();\n\n        \t//calculate\n        \ts = \"\";\n        \tfor(int i=0;i<ch.length;i++){\n        \t\ts += CtoS.get(ch[i]);\n        \t}\n        \tmod = s.length() % 5;\n        \tif(mod > 0){\n        \t\tfor(int i=0;i<5-mod;i++){\n        \t\t\ts += \"0\";\n        \t\t}\n        \t}\n\n        \t//output\n        \tfor(int i=0;i<s.length();i+=5){\n        \t\tSystem.out.print(StoC.get(s.substring(i, i+5)));\n        \t}\n        \tSystem.out.println();\n        }\n\t}\n\n\tprivate static void initMap(){\n\n\t\t//initialize CtoS.\n\t\tCtoS.put(' ', \"101\");\n\t\tCtoS.put('\\'',\"000000\");\n\t\tCtoS.put(',', \"000011\");\n\t\tCtoS.put('-', \"10010001\");\n\t\tCtoS.put('.', \"010001\");\n\t\tCtoS.put('?', \"000001\");\n\t\tCtoS.put('A', \"100101\");\n\t\tCtoS.put('B', \"10011010\");\n\t\tCtoS.put('C', \"0101\");\n\t\tCtoS.put('D', \"0001\");\n\t\tCtoS.put('E', \"110\");\n\t\tCtoS.put('F', \"01001\");\n\t\tCtoS.put('G', \"10011011\");\n\t\tCtoS.put('H', \"010000\");\n\t\tCtoS.put('I', \"0111\");\n\t\tCtoS.put('J', \"10011000\");\n\t\tCtoS.put('K', \"0110\");\n\t\tCtoS.put('L', \"00100\");\n\t\tCtoS.put('M', \"10011001\");\n\t\tCtoS.put('N', \"10011110\");\n\t\tCtoS.put('O', \"00101\");\n\t\tCtoS.put('P', \"111\");\n\t\tCtoS.put('Q', \"10011111\");\n\t\tCtoS.put('R', \"1000\");\n\t\tCtoS.put('S', \"00110\");\n\t\tCtoS.put('T', \"00111\");\n\t\tCtoS.put('U', \"10011100\");\n\t\tCtoS.put('V', \"10011101\");\n\t\tCtoS.put('W', \"000010\");\n\t\tCtoS.put('X', \"10010010\");\n\t\tCtoS.put('Y', \"10010011\");\n\t\tCtoS.put('Z', \"10010000\");\n\n\t\t//initialize StoC.\n\t\tStoC.put(\"00000\",'A');\n\t\tStoC.put(\"00001\",'B');\n\t\tStoC.put(\"00010\",'C');\n\t\tStoC.put(\"00011\",'D');\n\t\tStoC.put(\"00100\",'E');\n\t\tStoC.put(\"00101\",'F');\n\t\tStoC.put(\"00110\",'G');\n\t\tStoC.put(\"00111\",'H');\n\t\tStoC.put(\"01000\",'I');\n\t\tStoC.put(\"01001\",'J');\n\t\tStoC.put(\"01010\",'K');\n\t\tStoC.put(\"01011\",'L');\n\t\tStoC.put(\"01100\",'M');\n\t\tStoC.put(\"01101\",'N');\n\t\tStoC.put(\"01110\",'O');\n\t\tStoC.put(\"01111\",'P');\n\t\tStoC.put(\"10000\",'Q');\n\t\tStoC.put(\"10001\",'R');\n\t\tStoC.put(\"10010\",'S');\n\t\tStoC.put(\"10011\",'T');\n\t\tStoC.put(\"10100\",'U');\n\t\tStoC.put(\"10101\",'V');\n\t\tStoC.put(\"10110\",'W');\n\t\tStoC.put(\"10111\",'X');\n\t\tStoC.put(\"11000\",'Y');\n\t\tStoC.put(\"11001\",'Z');\n\t\tStoC.put(\"11010\",' ');\n\t\tStoC.put(\"11011\",'.');\n\t\tStoC.put(\"11100\",',');\n\t\tStoC.put(\"11101\",'-');\n\t\tStoC.put(\"11110\",'\\'');\n\t\tStoC.put(\"11111\",'?');\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.LinkedList;\nimport java.util.Scanner;\n\npublic class Main {\n\tprivate Scanner sc;\n\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\t\n\tpublic Main() {\n\t\tsc = new Scanner(System.in);\n\t\t\n\t\tString ans = \"\";\n\t\tString tmp = \"\";\n\t\twhile (sc.hasNextLine()) {\n\t\t\tString nico = sc.nextLine();\n\t\t\t\n\t\t\tfor (int i = 0; i < nico.length(); i++) {\n\t\t\t\tswitch (nico.charAt(i)) {\n\t\t\t\tcase ' ' :\n\t\t\t\t\ttmp = tmp + \"101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '\\'':\n\t\t\t\t\ttmp = tmp + \"000000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase ',':\n\t\t\t\t\ttmp = tmp + \"000011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttmp = tmp + \"10010001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '.':\n\t\t\t\t\ttmp = tmp + \"010001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '?':\n\t\t\t\t\ttmp = tmp + \"000001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'A':\n\t\t\t\t\ttmp = tmp + \"100101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'B':\n\t\t\t\t\ttmp = tmp + \"10011010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'C':\n\t\t\t\t\ttmp = tmp + \"0101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'D':\n\t\t\t\t\ttmp = tmp + \"0001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'E':\n\t\t\t\t\ttmp = tmp + \"110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'F':\n\t\t\t\t\ttmp = tmp + \"01001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'G':\n\t\t\t\t\ttmp = tmp + \"10011011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'H':\n\t\t\t\t\ttmp = tmp + \"010000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'I':\n\t\t\t\t\ttmp = tmp + \"0111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'J':\n\t\t\t\t\ttmp = tmp + \"10011000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'K':\n\t\t\t\t\ttmp = tmp + \"0110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'L':\n\t\t\t\t\ttmp = tmp + \"00100\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'M':\n\t\t\t\t\ttmp = tmp + \"10011001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'N':\n\t\t\t\t\ttmp = tmp + \"10011110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'O':\n\t\t\t\t\ttmp = tmp + \"00101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'P':\n\t\t\t\t\ttmp = tmp + \"111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Q':\n\t\t\t\t\ttmp = tmp + \"10011111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'R':\n\t\t\t\t\ttmp = tmp + \"1000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'S':\n\t\t\t\t\ttmp = tmp + \"00110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'T':\n\t\t\t\t\ttmp = tmp + \"00111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'U':\n\t\t\t\t\ttmp = tmp + \"10011100\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'V':\n\t\t\t\t\ttmp = tmp + \"10011101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'W':\n\t\t\t\t\ttmp = tmp + \"000010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'X':\n\t\t\t\t\ttmp = tmp + \"10010010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Y':\n\t\t\t\t\ttmp = tmp + \"10010011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Z':\n\t\t\t\t\ttmp = tmp + \"10010000\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twhile (tmp.length() >= 5) {\n\t\t\t\t\tans = ans + getChar(tmp.substring(0, 5));\n\t\t\t\t\ttmp = tmp.substring(5);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tmp.length() != 0) {\n\t\t\t\tint lim = 5 - tmp.length();\n\t\t\t\tfor (int i = 0; i < lim; i++) {\n\t\t\t\t\ttmp = tmp + \"0\";\n\t\t\t\t}\n\t\t\t\tans = ans + getChar(tmp);\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n\t\n\tprivate char getChar(String str) {\n\t\tswitch (str) {\n\t\tcase \"00000\":\n\t\t\treturn 'A';\n\t\tcase \"00001\":\n\t\t\treturn 'B';\n\t\tcase \"00010\":\n\t\t\treturn 'C';\n\t\tcase \"00011\":\n\t\t\treturn 'D';\n\t\tcase \"00100\":\n\t\t\treturn 'E';\n\t\tcase \"00101\":\n\t\t\treturn 'F';\n\t\tcase \"00110\":\n\t\t\treturn 'G';\n\t\tcase \"00111\":\n\t\t\treturn 'H';\n\t\tcase \"01000\":\n\t\t\treturn 'I';\n\t\tcase \"01001\":\n\t\t\treturn 'J';\n\t\tcase \"01010\":\n\t\t\treturn 'K';\n\t\tcase \"01011\":\n\t\t\treturn 'L';\n\t\tcase \"01100\":\n\t\t\treturn 'M';\n\t\tcase \"01101\":\n\t\t\treturn 'N';\n\t\tcase \"01110\":\n\t\t\treturn 'O';\n\t\tcase \"01111\":\n\t\t\treturn 'P';\n\t\tcase \"10000\":\n\t\t\treturn 'Q';\n\t\tcase \"10001\":\n\t\t\treturn 'R';\n\t\tcase \"10010\":\n\t\t\treturn 'S';\n\t\tcase \"10011\":\n\t\t\treturn 'T';\n\t\tcase \"10100\":\n\t\t\treturn 'U';\n\t\tcase \"10101\":\n\t\t\treturn 'V';\n\t\tcase \"10110\":\n\t\t\treturn 'W';\n\t\tcase \"10111\":\n\t\t\treturn 'X';\n\t\tcase \"11000\":\n\t\t\treturn 'Y';\n\t\tcase \"11001\":\n\t\t\treturn 'Z';\n\t\tcase \"11010\":\n\t\t\treturn ' ';\n\t\tcase \"11011\":\n\t\t\treturn '.';\n\t\tcase \"11100\":\n\t\t\treturn ',';\n\t\tcase \"11101\":\n\t\t\treturn '-';\n\t\tcase \"11110\":\n\t\t\treturn '\\'';\n\t\tcase \"11111\":\n\t\t\treturn '?';\n\t\t}\n\t\t\n\t\treturn 0;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main {\n  public static void main (String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    Map<String, String> enc = new HashMap<String, String>();\n    Map<String, String> dec = new HashMap<String, String>();\n    enc.put(\" \", \"101\");\n    enc.put(\"'\", \"000000\");\n    enc.put(\",\", \"000011\");\n    enc.put(\"-\", \"10010001\");\n    enc.put(\".\", \"010001\");\n    enc.put(\"?\", \"000001\");\n    enc.put(\"A\", \"100101\");\n    enc.put(\"B\", \"10011010\");\n    enc.put(\"C\", \"0101\");\n    enc.put(\"D\", \"0001\");\n    enc.put(\"E\", \"110\");\n    enc.put(\"F\", \"01001\");\n    enc.put(\"G\", \"10011011\");\n    enc.put(\"H\", \"010000\");\n    enc.put(\"I\", \"0111\");\n    enc.put(\"J\", \"10011000\");\n    enc.put(\"K\", \"0110\");\n    enc.put(\"L\", \"00100\");\n    enc.put(\"M\", \"10011001\");\n    enc.put(\"N\", \"10011110\");\n    enc.put(\"O\", \"00101\");\n    enc.put(\"P\", \"111\");\n    enc.put(\"Q\", \"10011111\");\n    enc.put(\"R\", \"1000\");\n    enc.put(\"S\", \"00110\");\n    enc.put(\"T\", \"00111\");\n    enc.put(\"U\", \"10011100\");\n    enc.put(\"V\", \"10011101\");\n    enc.put(\"W\", \"000010\");\n    enc.put(\"X\", \"10010010\");\n    enc.put(\"Y\", \"10010011\");\n    enc.put(\"Z\", \"10010000\");\n    dec.put(\"00000\", \"A\");\n    dec.put(\"00001\", \"B\");\n    dec.put(\"00010\", \"C\");\n    dec.put(\"00011\", \"D\");\n    dec.put(\"00100\", \"E\");\n    dec.put(\"00101\", \"F\");\n    dec.put(\"00110\", \"G\");\n    dec.put(\"00111\", \"H\");\n    dec.put(\"01000\", \"I\");\n    dec.put(\"01001\", \"J\");\n    dec.put(\"01010\", \"K\");\n    dec.put(\"01011\", \"L\");\n    dec.put(\"01100\", \"M\");\n    dec.put(\"01101\", \"N\");\n    dec.put(\"01110\", \"O\");\n    dec.put(\"01111\", \"P\");\n    dec.put(\"10000\", \"Q\");\n    dec.put(\"10001\", \"R\");\n    dec.put(\"10010\", \"S\");\n    dec.put(\"10011\", \"T\");\n    dec.put(\"10100\", \"U\");\n    dec.put(\"10101\", \"V\");\n    dec.put(\"10110\", \"W\");\n    dec.put(\"10111\", \"X\");\n    dec.put(\"11000\", \"Y\");\n    dec.put(\"11001\", \"Z\");\n    dec.put(\"11010\", \" \");\n    dec.put(\"11011\", \".\");\n    dec.put(\"11100\", \",\");\n    dec.put(\"11101\", \"-\");\n    dec.put(\"11110\", \"'\");\n    dec.put(\"11111\", \"?\");\n    while (scanner.hasNext()) {\n      String line = scanner.nextLine();\n      String encStr = \"\";\n      String decStr = \"\";\n      for (int ii = 0; ii < line.length(); ii++) {\n        encStr += enc.get(line.substring(ii, ii + 1));\n      }\n      if (encStr.length() % 5 != 0) {\n        encStr += \"0000\";\n      }\n      encStr = encStr.substring(0, (encStr.length() / 5) * 5);\n      for (int ii = 0; ii < encStr.length(); ii += 5) {\n        decStr += dec.get(encStr.substring(ii, ii + 5));\n      }\n      System.out.println(decStr);\n    }\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n//The Code A Doctor Loved\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tMap<Character, String> t = new HashMap<Character, String>();\n\t\tt.put(' ', \"101\");\n\t\tt.put('\\'', \"000000\");\n\t\tt.put(',', \"000011\");\n\t\tt.put('-', \"10010001\");\n\t\tt.put('.', \"010001\");\n\t\tt.put('?', \"000001\");\n\t\tt.put('A', \"100101\");\n\t\tt.put('B', \"10011010\");\n\t\tt.put('C', \"0101\");\n\t\tt.put('D', \"0001\");\n\t\tt.put('E', \"110\");\n\t\tt.put('F', \"01001\");\n\t\tt.put('G', \"10011011\");\n\t\tt.put('H', \"010000\");\n\t\tt.put('I', \"0111\");\n\t\tt.put('J', \"10011000\");\n\t\tt.put('K', \"0110\");\n\t\tt.put('L', \"00100\");\n\t\tt.put('M', \"10011001\");\n\t\tt.put('N', \"10011110\");\n\t\tt.put('O', \"00101\");\n\t\tt.put('P', \"111\");\n\t\tt.put('Q', \"10011111\");\n\t\tt.put('R', \"1000\");\n\t\tt.put('S', \"00110\");\n\t\tt.put('T', \"00111\");\n\t\tt.put('U', \"10011100\");\n\t\tt.put('V', \"10011101\");\n\t\tt.put('W', \"000010\");\n\t\tt.put('X', \"10010010\");\n\t\tt.put('Y', \"10010011\");\n\t\tt.put('Z', \"10010000\");\n\t\tMap<String, Character> r = new HashMap<String, Character>();\n\t\tr.put(\"00000\", 'A');\n\t\tr.put(\"00001\", 'B');\n\t\tr.put(\"00010\", 'C');\n\t\tr.put(\"00011\", 'D');\n\t\tr.put(\"00100\", 'E');\n\t\tr.put(\"00101\", 'F');\n\t\tr.put(\"00110\", 'G');\n\t\tr.put(\"00111\", 'H');\n\t\tr.put(\"01000\", 'I');\n\t\tr.put(\"01001\", 'J');\n\t\tr.put(\"01010\", 'K');\n\t\tr.put(\"01011\", 'L');\n\t\tr.put(\"01100\", 'M');\n\t\tr.put(\"01101\", 'N');\n\t\tr.put(\"01110\", 'O');\n\t\tr.put(\"01111\", 'P');\n\t\tr.put(\"10000\", 'Q');\n\t\tr.put(\"10001\", 'R');\n\t\tr.put(\"10010\", 'S');\n\t\tr.put(\"10011\", 'T');\n\t\tr.put(\"10100\", 'U');\n\t\tr.put(\"10101\", 'V');\n\t\tr.put(\"10110\", 'W');\n\t\tr.put(\"10111\", 'X');\n\t\tr.put(\"11000\", 'Y');\n\t\tr.put(\"11001\", 'Z');\n\t\tr.put(\"11010\", ' ');\n\t\tr.put(\"11011\", '.');\n\t\tr.put(\"11100\", ',');\n\t\tr.put(\"11101\", '-');\n\t\tr.put(\"11110\", '\\'');\n\t\tr.put(\"11111\", '?');\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tchar[] s = sc.nextLine().toCharArray();\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor(char c:s)sb.append(t.get(c));\n\t\t\twhile(sb.length()%5!=0)sb.append('0');\n\t\t\tString u = sb.toString();\n\t\t\tStringBuilder v = new StringBuilder();\n\t\t\tfor(int i=0;i<u.length();i+=5)v.append(r.get(u.substring(i, i+5)));\n\t\t\tSystem.out.println(v);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\tfinal String[] c1 = new String[128];\n\t\tc1[' '] = \"101\";\n\t\tc1['\\''] = \"000000\";\n\t\tc1[','] = \"000011\";\n\t\tc1['-'] = \"10010001\";\n\t\tc1['.'] = \"010001\";\n\t\tc1['?'] = \"000001\";\n\t\tc1['A'] = \"100101\";\n\t\tc1['B'] = \"10011010\";\n\t\tc1['C'] = \"0101\";\n\t\tc1['D'] = \"0001\";\n\t\tc1['E'] = \"110\";\n\t\tc1['F'] = \"01001\";\n\t\tc1['G'] = \"10011011\";\n\t\tc1['H'] = \"010000\";\n\t\tc1['I'] = \"0111\";\n\t\tc1['J'] = \"10011000\";\n\t\tc1['K'] = \"0110\";\n\t\tc1['L'] = \"00100\";\n\t\tc1['M'] = \"10011001\";\n\t\tc1['N'] = \"10011110\";\n\t\tc1['O'] = \"00101\";\n\t\tc1['P'] = \"111\";\n\t\tc1['Q'] = \"10011111\";\n\t\tc1['R'] = \"1000\";\n\t\tc1['S'] = \"00110\";\n\t\tc1['T'] = \"00111\";\n\t\tc1['U'] = \"10011100\";\n\t\tc1['V'] = \"10011101\";\n\t\tc1['W'] = \"000010\";\n\t\tc1['X'] = \"10010010\";\n\t\tc1['Y'] = \"10010011\";\n\t\tc1['Z'] = \"10010000\";\n\n\t\tfinal HashMap<String, Character> c2 = new HashMap<String, Character>() {\n\t\t\t{\n\t\t\t\tput(\"00000\", 'A');\n\t\t\t\tput(\"00001\", 'B');\n\t\t\t\tput(\"00010\", 'C');\n\t\t\t\tput(\"00011\", 'D');\n\t\t\t\tput(\"00100\", 'E');\n\t\t\t\tput(\"00101\", 'F');\n\t\t\t\tput(\"00110\", 'G');\n\t\t\t\tput(\"00111\", 'H');\n\t\t\t\tput(\"01000\", 'I');\n\t\t\t\tput(\"01001\", 'J');\n\t\t\t\tput(\"01010\", 'K');\n\t\t\t\tput(\"01011\", 'L');\n\t\t\t\tput(\"01100\", 'M');\n\t\t\t\tput(\"01101\", 'N');\n\t\t\t\tput(\"01110\", 'O');\n\t\t\t\tput(\"01111\", 'P');\n\t\t\t\tput(\"10000\", 'Q');\n\t\t\t\tput(\"10001\", 'R');\n\t\t\t\tput(\"10010\", 'S');\n\t\t\t\tput(\"10011\", 'T');\n\t\t\t\tput(\"10100\", 'U');\n\t\t\t\tput(\"10101\", 'V');\n\t\t\t\tput(\"10110\", 'W');\n\t\t\t\tput(\"10111\", 'X');\n\t\t\t\tput(\"11000\", 'Y');\n\t\t\t\tput(\"11001\", 'Z');\n\t\t\t\tput(\"11010\", ' ');\n\t\t\t\tput(\"11011\", '.');\n\t\t\t\tput(\"11100\", ',');\n\t\t\t\tput(\"11101\", '-');\n\t\t\t\tput(\"11110\", '\\'');\n\t\t\t\tput(\"11111\", '?');\n\t\t\t}\n\t\t};\n\n\t\twhile ((line = br.readLine()) != null) {\n\t\t\t//\n\t\t\tif (line.isEmpty()) {\n\t\t\t\tSystem.out.println(\"\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1[c]);\n\t\t\t}\n\t\t\t//\n\t\t\tsb1.append(\"00000\");\n\t\t\t//\n\t\t\tString line2 = sb1.toString();\n\t\t\tfor (int i = 0; i < line2.length() - 5; i += 5) {\n\t\t\t\tsb2.append(c2.get(line2.substring(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println(sb2.toString());\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n\npublic class Main {\n\t\n\tprivate static String[] encode = {\n\t\t\"101\",\n\t\t\"000000\",\n\t\t\"000011\",\n\t\t\"10010001\",\n\t\t\"010001\",\n\t\t\"000001\",\n\t\t\"100101\",\n\t\t\"10011010\",\n\t\t\"0101\",\n\t\t\"0001\",\n\t\t\"110\",\n\t\t\"01001\",\n\t\t\"10011011\",\n\t\t\"010000\",\n\t\t\"0111\",\n\t\t\"10011000\",\n\t\t\"0110\",\n\t\t\"00100\",\n\t\t\"10011001\",\n\t\t\"10011110\",\n\t\t\"00101\",\n\t\t\"111\",\n\t\t\"10011111\",\n\t\t\"1000\",\n\t\t\"00110\",\n\t\t\"00111\",\n\t\t\"10011100\",\n\t\t\"10011101\",\n\t\t\"000010\",\n\t\t\"10010010\",\n\t\t\"10010011\",\n\t\t\"10010000\"\n\t};\n\t\n\tprivate static Map<String,Character> decode = new HashMap<String,Character>();\n\t\n\tprivate static String encodeChar(char c){\n\t\tif(c >= 'A' && c <= 'Z'){\n\t\t\treturn encode[c-'A'+6];\n\t\t}else if(c == ' '){\n\t\t\treturn encode[0];\n\t\t}else if(c == '\\''){\n\t\t\treturn encode[1];\n\t\t}else if(c == ','){\n\t\t\treturn encode[2];\n\t\t}else if(c == '-'){\n\t\t\treturn encode[3];\n\t\t}else if(c == '.'){\n\t\t\treturn encode[4];\n\t\t}else if(c == '?'){\n\t\t\treturn encode[5];\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tprivate static void init_decode(){\n\t\tdecode.put(\"00000\", 'A');\n\t\tdecode.put(\"00001\", 'B');\n\t\tdecode.put(\"00010\", 'C');\n\t\tdecode.put(\"00011\", 'D');\n\t\tdecode.put(\"00100\", 'E');\n\t\tdecode.put(\"00101\", 'F');\n\t\tdecode.put(\"00110\", 'G');\n\t\tdecode.put(\"00111\", 'H');\n\t\tdecode.put(\"01000\", 'I');\n\t\tdecode.put(\"01001\", 'J');\n\t\tdecode.put(\"01010\", 'K');\n\t\tdecode.put(\"01011\", 'L');\n\t\tdecode.put(\"01100\", 'M');\n\t\tdecode.put(\"01101\", 'N');\n\t\tdecode.put(\"01110\", 'O');\n\t\tdecode.put(\"01111\", 'P');\n\t\tdecode.put(\"10000\", 'Q');\n\t\tdecode.put(\"10001\", 'R');\n\t\tdecode.put(\"10010\", 'S');\n\t\tdecode.put(\"10011\", 'T');\n\t\tdecode.put(\"10100\", 'U');\n\t\tdecode.put(\"10101\", 'V');\n\t\tdecode.put(\"10110\", 'W');\n\t\tdecode.put(\"10111\", 'X');\n\t\tdecode.put(\"11000\", 'Y');\n\t\tdecode.put(\"11001\", 'Z');\n\t\tdecode.put(\"11010\", ' ');\n\t\tdecode.put(\"11011\", '.');\t\n\t\tdecode.put(\"11100\", ',');\n\t\tdecode.put(\"11101\", '-');\n\t\tdecode.put(\"11110\", '\\'');\n\t\tdecode.put(\"11111\", '?');\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tinit_decode();\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\twhile(sc.hasNextLine()){\n\t\t\tchar[] strs = sc.nextLine().toCharArray();\n\t\t\tStringBuilder br = new StringBuilder();\n\t\t\t\n\t\t\tfor(char c:strs){\n\t\t\t\tbr.append(encodeChar(c));\n\t\t\t}\n\t\t\t\n\t\t\tint tmp;\n\t\t\tif((tmp = br.length()%5) != 0){\n\t\t\t\tfor(int i = 0; i < (5 - tmp); i++){\n\t\t\t\t\tbr.append(\"0\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(br);\n\t\t\tfor(int i = 0; (i + 4) < br.length(); i+=5){\n\t\t\t\tSystem.out.print(decode.get(br.substring(i, i+5)));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\t\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.StringTokenizer;\nimport java.util.HashMap;\n\nclass Translator {\n\tString t,res;\n\tHashMap<String,String> map = new HashMap<String,String>();\n\tHashMap<String,String> back = new HashMap<String,String>();\n\tTranslator() {\n\t\tthis.res = \"\";\n\t\tmap.put(\" \",\"101\");\n\t\tmap.put(\"\\'\",\"000000\");\n\t\tmap.put(\",\",\"000011\");\n\t\tmap.put(\"-\",\"10010001\");\n\t\tmap.put(\".\",\"010001\");\n\t\tmap.put(\"?\",\"000001\");\n\t\tmap.put(\"A\",\"100101\");\n\t\tmap.put(\"B\",\"10011010\");\n\t\tmap.put(\"C\",\"0101\");\n\t\tmap.put(\"D\",\"0001\");\n\t\tmap.put(\"E\",\"110\");\n\t\tmap.put(\"F\",\"01001\");\n\t\tmap.put(\"G\",\"10011011\");\n\t\tmap.put(\"H\",\"010000\");\n\t\tmap.put(\"I\",\"0111\");\n\t\tmap.put(\"J\",\"10011000\");\n\t\tmap.put(\"K\",\"0110\");\n\t\tmap.put(\"L\",\"00100\");\n\t\tmap.put(\"M\",\"10011001\");\n\t\tmap.put(\"N\",\"10011110\");\n\t\tmap.put(\"O\",\"00101\");\n\t\tmap.put(\"P\",\"111\");\n\t\tmap.put(\"Q\",\"10011111\");\n\t\tmap.put(\"R\",\"1000\");\n\t\tmap.put(\"S\",\"00110\");\n\t\tmap.put(\"T\",\"00111\");\n\t\tmap.put(\"U\",\"10011100\");\n\t\tmap.put(\"V\",\"10011101\");\n\t\tmap.put(\"W\",\"000010\");\n\t\tmap.put(\"X\",\"10010010\");\n\t\tmap.put(\"Y\",\"10010011\");\n\t\tmap.put(\"Z\",\"10010000\");\n\t\tback.put(\"00000\",\"A\");\n\t\tback.put(\"00001\",\"B\");\n\t\tback.put(\"00010\",\"C\");\n\t\tback.put(\"00011\",\"D\");\n\t\tback.put(\"00100\",\"E\");\n\t\tback.put(\"00101\",\"F\");\n\t\tback.put(\"00110\",\"G\");\n\t\tback.put(\"00111\",\"H\");\n\t\tback.put(\"01000\",\"I\");\n\t\tback.put(\"01001\",\"J\");\n\t\tback.put(\"01010\",\"K\");\n\t\tback.put(\"01011\",\"L\");\n\t\tback.put(\"01100\",\"M\");\n\t\tback.put(\"01101\",\"N\");\n\t\tback.put(\"01110\",\"O\");\n\t\tback.put(\"01111\",\"P\");\n\t\tback.put(\"10000\",\"Q\");\n\t\tback.put(\"10001\",\"R\");\n\t\tback.put(\"10010\",\"S\");\n\t\tback.put(\"10011\",\"T\");\n\t\tback.put(\"10100\",\"U\");\n\t\tback.put(\"10101\",\"V\");\n\t\tback.put(\"10110\",\"W\");\n\t\tback.put(\"10111\",\"X\");\n\t\tback.put(\"11000\",\"Y\");\n\t\tback.put(\"11001\",\"Z\");\n\t\tback.put(\"11010\",\" \");\n\t\tback.put(\"11011\",\".\");\n\t\tback.put(\"11100\",\",\");\n\t\tback.put(\"11101\",\"-\");\n\t\tback.put(\"11110\",\"\\'\");\n\t\tback.put(\"11111\",\"?\");\n\t}\n\n\tvoid set(String s,int c) {\n\t\tthis.t = \"\";\n\t\tif (c>0) {\n\t\t\tthis.t = map.get(\" \");\n\t\t} \n\t\tint n = s.length();\n\t\tfor (int i=0;i<n;i++) {\n\t\t\tthis.t = this.t+map.get(\"\"+s.charAt(i));\n\t\t}\n\t}\n\n\tString put() {\n\t\tint n = this.t.length();\n\t\tif (n%5>0) {\n\t\t\tint m = 5-(n%5);\n\t\t\tn += m;\n\t\t\tfor (int i=0;i<m;i++) this.t = this.t+\"0\";\n\t\t}\n\t\tn /= 5;\n\t\tfor (int i=0;i<n;i++) {\n\t\t\tthis.res = this.res+back.get(this.t.substring(i*5,i*5+5));\n\t\t}\n\t\treturn this.res;\n\t}\n}\n\nclass Main {\n\tpublic static void main(String args[]) {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString buf,res;\n\n\t\ttry {\n\t\t\tTranslator t = new Translator();\n\t\t\tint c = 0;\n\t\t\tres = \"\";\n\t\t\twhile ((buf = br.readLine())!=null) {\n\t\t\t\tt.set(buf,c);\n\t\t\t\tres = res+t.put();\n\t\t\t\tc++;\n\t\t\t}\n\t\t\tSystem.out.println(res);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner scan = new Scanner(System.in);\n\t\t//while(scan.hasNext()){\n\t\t\tString str = scan.nextLine();\n\t\t\tchar[] ch = str.toCharArray();\n\t\t\tString newstr = \"\";\n\t\t\tfor(int i = 0;i < ch.length;i++){\n\t\t\t\tswitch(ch[i]){\n\t\t\t\t\tcase ' ': newstr += \"101\";\tbreak;\n\t\t\t\t\tcase '\\'': newstr += \"000000\";\tbreak;\n\t\t\t\t\tcase ',': newstr += \"000011\"; break;\n\t\t\t\t\tcase '-': newstr += \"10010001\"; break;\n\t\t\t\t\tcase '.': newstr += \"010001\"; break;\n\t\t\t\t\tcase '?': newstr += \"000001\"; break;\n\t\t\t\t\tcase 'A': newstr += \"100101\"; break;\n\t\t\t\t\tcase 'B': newstr += \"10011010\"; break;\n\t\t\t\t\tcase 'C': newstr += \"0101\"; break;\n\t\t\t\t\tcase 'D': newstr += \"0001\"; break;\n\t\t\t\t\tcase 'E': newstr += \"110\"; break;\n\t\t\t\t\tcase 'F': newstr += \"01001\"; break;\n\t\t\t\t\tcase 'G': newstr += \"10011011\"; break;\n\t\t\t\t\tcase 'H': newstr += \"010000\"; break;\n\t\t\t\t\tcase 'I': newstr += \"0111\"; break;\n\t\t\t\t\tcase 'J': newstr += \"10011000\"; break;\n\t\t\t\t\tcase 'K': newstr += \"0110\"; break;\n\t\t\t\t\tcase 'L': newstr += \"00100\"; break;\n\t\t\t\t\tcase 'M': newstr += \"10011001\"; break;\n\t\t\t\t\tcase 'N': newstr += \"10011110\"; break;\n\t\t\t\t\tcase 'O': newstr += \"00101\"; break;\n\t\t\t\t\tcase 'P': newstr += \"111\"; break;\n\t\t\t\t\tcase 'Q': newstr += \"10011111\"; break;\n\t\t\t\t\tcase 'R': newstr += \"1000\"; break;\n\t\t\t\t\tcase 'S': newstr += \"00110\"; break;\n\t\t\t\t\tcase 'T': newstr += \"00111\"; break;\n\t\t\t\t\tcase 'U': newstr += \"10011100\"; break;\n\t\t\t\t\tcase 'V': newstr += \"10011101\"; break;\n\t\t\t\t\tcase 'W': newstr += \"000010\"; break;\n\t\t\t\t\tcase 'X': newstr += \"10010010\"; break;\n\t\t\t\t\tcase 'Y': newstr += \"10010011\"; break;\n\t\t\t\t\tcase 'Z': newstr += \"10010000\"; break;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile(newstr.length() % 5 != 0){\n\t\t\t\tnewstr += \"0\";\n\t\t\t}\n\t\t\t//System.out.println(newstr);\n\t\t\tstr = \"\";\n\t\t\tfor(int i = 4,j = 0;i < newstr.length();i += 5){\n\t\t\t\tif(newstr.substring(j,i+1).equals(\"00000\")){\n\t\t\t\t\tstr += \"A\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"00001\")){\n\t\t\t\t\tstr += \"B\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"00010\")){\n\t\t\t\t\tstr += \"C\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"00011\")){\n\t\t\t\t\tstr += \"D\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"00100\")){\n\t\t\t\t\tstr += \"E\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"00101\")){\n\t\t\t\t\tstr += \"F\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"00110\")){\n\t\t\t\t\tstr += \"G\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"00111\")){\n\t\t\t\t\tstr += \"H\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"01000\")){\n\t\t\t\t\tstr += \"I\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"01001\")){\n\t\t\t\t\tstr += \"J\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"01010\")){\n\t\t\t\t\tstr += \"K\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"01011\")){\n\t\t\t\t\tstr += \"L\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"01100\")){\n\t\t\t\t\tstr += \"M\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"01101\")){\n\t\t\t\t\tstr += \"N\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"01110\")){\n\t\t\t\t\tstr += \"O\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"01111\")){\n\t\t\t\t\tstr += \"P\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"10000\")){\n\t\t\t\t\tstr += \"Q\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"10001\")){\n\t\t\t\t\tstr += \"R\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"10010\")){\n\t\t\t\t\tstr += \"S\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"10011\")){\n\t\t\t\t\tstr += \"T\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"10100\")){\n\t\t\t\t\tstr += \"U\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"10101\")){\n\t\t\t\t\tstr += \"V\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"10110\")){\n\t\t\t\t\tstr += \"W\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"10111\")){\n\t\t\t\t\tstr += \"X\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"11000\")){\n\t\t\t\t\tstr += \"Y\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"11001\")){\n\t\t\t\t\tstr += \"Z\";\t\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"11010\")){\n\t\t\t\t\tstr += \" \";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"11011\")){\n\t\t\t\t\tstr += \".\";\t\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"11100\")){\n\t\t\t\t\tstr += \",\";\t\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"11101\")){\n\t\t\t\t\tstr += \"-\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"11110\")){\n\t\t\t\t\tstr += \"'\";\n\t\t\t\t}else if(newstr.substring(j,i+1).equals(\"11111\")){\n\t\t\t\t\tstr += \"?\";\n\t\t\t\t}\n\t\t\t\tj = i+1;\n\t\t\t}\n\t\t\tSystem.out.println(str);\n\t\t//}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString s, str;\n\n\t\twhile (sc.hasNext()) {\n\t\t\ts = sc.nextLine();\n\t\t\tstr = \"\";\n\t\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\t\tstr += charToBin(s.charAt(i));\n\t\t\t}\n\t\t\tfor (int i = 0; i < str.length(); i += 5) {\n\t\t\t\tSystem.out.print((char)binToChar(str, i));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n\tpublic static String charToBin(char c) {\n\t\tString s = \"\";\n\t\tif (c == ' ') {\n\t\t\ts = \"101\";\n\t\t} else if (c == '\\'') {\n\t\t\ts = \"000000\";\n\t\t} else if (c == ',') {\n\t\t\ts = \"000011\";\n\t\t} else if (c == '-') {\n\t\t\ts = \"10010001\";\n\t\t} else if (c == '.') {\n\t\t\ts = \"010001\";\n\t\t} else if (c == '?') {\n\t\t\ts = \"000001\";\n\t\t} else if (c == 'A') {\n\t\t\ts = \"100101\";\n\t\t} else if (c == 'B') {\n\t\t\ts = \"10011010\";\n\t\t} else if (c == 'C') {\n\t\t\ts = \"0101\";\n\t\t} else if (c == 'D') {\n\t\t\ts = \"0001\";\n\t\t} else if (c == 'E') {\n\t\t\ts = \"110\";\n\t\t} else if (c == 'F') {\n\t\t\ts = \"01001\";\n\t\t} else if (c == 'G') {\n\t\t\ts = \"10011011\";\n\t\t} else if (c == 'H') {\n\t\t\ts = \"010000\";\n\t\t} else if (c == 'I') {\n\t\t\ts = \"0111\";\n\t\t} else if (c == 'J') {\n\t\t\ts = \"10011000\";\n\t\t} else if (c == 'K') {\n\t\t\ts = \"0110\";\n\t\t} else if (c == 'L') {\n\t\t\ts = \"00100\";\n\t\t} else if (c == 'M') {\n\t\t\ts = \"10011001\";\n\t\t} else if (c == 'N') {\n\t\t\ts = \"10011110\";\n\t\t} else if (c == 'O') {\n\t\t\ts = \"00101\";\n\t\t} else if (c == 'P') {\n\t\t\ts = \"111\";\n\t\t} else if (c == 'Q') {\n\t\t\ts = \"10011111\";\n\t\t} else if (c == 'R') {\n\t\t\ts = \"1000\";\n\t\t} else if (c == 'S') {\n\t\t\ts = \"00110\";\n\t\t} else if (c == 'T') {\n\t\t\ts = \"00111\";\n\t\t} else if (c == 'U') {\n\t\t\ts = \"10011100\";\n\t\t} else if (c == 'V') {\n\t\t\ts = \"10011101\";\n\t\t} else if (c == 'W') {\n\t\t\ts = \"000010\";\n\t\t} else if (c == 'X') {\n\t\t\ts = \"10010010\";\n\t\t} else if (c == 'Y') {\n\t\t\ts = \"10010011\";\n\t\t} else if (c == 'Z') {\n\t\t\ts = \"10010000\";\n\t\t}\n\t\treturn s;\n\t}\n\n\tpublic static char binToChar(String s, int i) {\n\t\tint a = 0;\n\t\tchar c = 0;\n\t\ta += (s.charAt(i) - '0') * 10000;\n\t\tif (i + 1 < s.length()) {\n\t\t\ta += (s.charAt(i + 1) - '0') * 1000;\n\t\t\tif (i + 2 < s.length()) {\n\t\t\t\ta += (s.charAt(i + 2) - '0') * 100;\n\t\t\t\tif (i + 3 < s.length()) {\n\t\t\t\t\ta += (s.charAt(i + 3) - '0') * 10;\n\t\t\t\t\tif (i + 4 < s.length()) {\n\t\t\t\t\t\ta += (s.charAt(i + 4) - '0') * 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (a == 0) {\n\t\t\tc = 'A';\n\t\t} else if (a == 1) {\n\t\t\tc = 'B';\n\t\t} else if (a == 10) {\n\t\t\tc = 'C';\n\t\t} else if (a == 11) {\n\t\t\tc = 'D';\n\t\t} else if (a == 100) {\n\t\t\tc = 'E';\n\t\t} else if (a == 101) {\n\t\t\tc = 'F';\n\t\t} else if (a == 110) {\n\t\t\tc = 'G';\n\t\t} else if (a == 111) {\n\t\t\tc = 'H';\n\t\t} else if (a == 1000) {\n\t\t\tc = 'I';\n\t\t} else if (a == 1001) {\n\t\t\tc = 'J';\n\t\t} else if (a == 1010) {\n\t\t\tc = 'K';\n\t\t} else if (a == 1011) {\n\t\t\tc = 'L';\n\t\t} else if (a == 1100) {\n\t\t\tc = 'M';\n\t\t} else if (a == 1101) {\n\t\t\tc = 'N';\n\t\t} else if (a == 1110) {\n\t\t\tc = 'O';\n\t\t} else if (a == 1111) {\n\t\t\tc = 'P';\n\t\t} else if (a == 10000) {\n\t\t\tc = 'Q';\n\t\t} else if (a == 10001) {\n\t\t\tc = 'R';\n\t\t} else if (a == 10010) {\n\t\t\tc = 'S';\n\t\t} else if (a == 10011) {\n\t\t\tc = 'T';\n\t\t} else if (a == 10100) {\n\t\t\tc = 'U';\n\t\t} else if (a == 10101) {\n\t\t\tc = 'V';\n\t\t} else if (a == 10110) {\n\t\t\tc = 'W';\n\t\t} else if (a == 10111) {\n\t\t\tc = 'X';\n\t\t} else if (a == 11000) {\n\t\t\tc = 'Y';\n\t\t} else if (a == 11001) {\n\t\t\tc = 'Z';\n\t\t} else if (a == 11010) {\n\t\t\tc = ' ';\n\t\t} else if (a == 11011) {\n\t\t\tc = '.';\n\t\t} else if (a == 11100) {\n\t\t\tc = ',';\n\t\t} else if (a == 11101) {\n\t\t\tc = '-';\n\t\t} else if (a == 11110) {\n\t\t\tc = '\\'';\n\t\t} else if (a == 11111) {\n\t\t\tc = '?';\n\t\t}\n\t\treturn c;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tMain instance = new Main();\n\t\tinstance.execute();\n\t}\n\t\n\tprivate void execute() throws IOException {\n\t\tBufferedReader sc = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tMap<String, String> encriptMap = getEncriptMap();\n\t\tMap<String, String> decriptMap = getDecriptMap();\n\n\t\tStringBuilder sb;\n\t\tStringBuilder result;\n\t\tString line;\n\t\twhile((line = sc.readLine()) != null) {\n\t\t\tsb = new StringBuilder();\n\t\t\tfor(int i = 0 ; i < line.length() ; i++) {\n\t\t\t\tsb.append(encriptMap.get(line.substring(i, i + 1)));\n\t\t\t}\n\t\t\t\n\t\t\twhile(sb.length() % 5 > 0) {\n\t\t\t\tsb.append(\"0\");\n\t\t\t}\n\t\t\t\n\t\t\tresult = new StringBuilder();\n\t\t\tfor(int i = 0 ; i < sb.length(); i = i + 5) {\n\t\t\t\tresult.append(decriptMap.get(sb.substring(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println(result.toString());\n\t\t}\n\t}\n\t\n\tprivate Map<String, String> getEncriptMap() {\n\t\tMap<String, String> map = new HashMap<String, String>();\n\t\tmap.put(\" \", \"101\");\n\t\tmap.put(\"'\", \"000000\");\n\t\tmap.put(\",\", \"000011\");\n\t\tmap.put(\"-\", \"10010001\");\n\t\tmap.put(\".\", \"010001\");\n\t\tmap.put(\"?\", \"000001\");\n\t\tmap.put(\"A\", \"100101\");\n\t\tmap.put(\"B\", \"10011010\");\n\t\tmap.put(\"C\", \"0101\");\n\t\tmap.put(\"D\", \"0001\");\n\t\tmap.put(\"E\", \"110\");\n\t\tmap.put(\"F\", \"01001\");\n\t\tmap.put(\"G\", \"10011011\");\n\t\tmap.put(\"H\", \"010000\");\n\t\tmap.put(\"I\", \"0111\");\n\t\tmap.put(\"J\", \"10011000\");\n\t\tmap.put(\"K\", \"0110\");\n\t\tmap.put(\"L\", \"00100\");\n\t\tmap.put(\"M\", \"10011001\");\n\t\tmap.put(\"N\", \"10011110\");\n\t\tmap.put(\"O\", \"00101\");\n\t\tmap.put(\"P\", \"111\");\n\t\tmap.put(\"Q\", \"10011111\");\n\t\tmap.put(\"R\", \"1000\");\n\t\tmap.put(\"S\", \"00110\");\n\t\tmap.put(\"T\", \"00111\");\n\t\tmap.put(\"U\", \"10011100\");\n\t\tmap.put(\"V\", \"10011101\");\n\t\tmap.put(\"W\", \"000010\");\n\t\tmap.put(\"X\", \"10010010\");\n\t\tmap.put(\"Y\", \"10010011\");\n\t\tmap.put(\"Z\", \"10010000\");\n\t\treturn map;\n\t}\n\tprivate Map<String, String> getDecriptMap() {\n\t\tMap<String, String> map = new HashMap<String, String>();\n\t\tmap.put(\"00000\", \"A\");\n\t\tmap.put(\"00001\", \"B\");\n\t\tmap.put(\"00010\", \"C\");\n\t\tmap.put(\"00011\", \"D\");\n\t\tmap.put(\"00100\", \"E\");\n\t\tmap.put(\"00101\", \"F\");\n\t\tmap.put(\"00110\", \"G\");\n\t\tmap.put(\"00111\", \"H\");\n\t\tmap.put(\"01000\", \"I\");\n\t\tmap.put(\"01001\", \"J\");\n\t\tmap.put(\"01010\", \"K\");\n\t\tmap.put(\"01011\", \"L\");\n\t\tmap.put(\"01100\", \"M\");\n\t\tmap.put(\"01101\", \"N\");\n\t\tmap.put(\"01110\", \"O\");\n\t\tmap.put(\"01111\", \"P\");\n\t\tmap.put(\"10000\", \"Q\");\n\t\tmap.put(\"10001\", \"R\");\n\t\tmap.put(\"10010\", \"S\");\n\t\tmap.put(\"10011\", \"T\");\n\t\tmap.put(\"10100\", \"U\");\n\t\tmap.put(\"10101\", \"V\");\n\t\tmap.put(\"10110\", \"W\");\n\t\tmap.put(\"10111\", \"X\");\n\t\tmap.put(\"11000\", \"Y\");\n\t\tmap.put(\"11001\", \"Z\");\n\t\tmap.put(\"11010\", \" \");\n\t\tmap.put(\"11011\", \".\");\n\t\tmap.put(\"11100\", \",\");\n\t\tmap.put(\"11101\", \"-\");\n\t\tmap.put(\"11110\", \"\");\n\t\tmap.put(\"11111\", \"?\");\n\t\treturn map;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\npublic class Main {\n\n\tstatic HashMap<String, String> map = new HashMap<String, String>();\n\tstatic HashMap<String, String> key = new HashMap<String, String>();\n\tstatic String[] keys = {\n\t\t\"101\",\n\t\t\"000000\",\n\t\t\"000011\",\n\t\t\"10010001\",\n\t\t\"010001\",\n\t\t\"000001\",\n\t\t\"100101\",\n\t\t\"10011010\",\n\t\t\"0101\",\n\t\t\"0001\",\n\t\t\"110\",\n\t\t\"01001\",\n\t\t\"10011011\",\n\t\t\"010000\",\n\t\t\"0111\",\n\t\t\"10011000\",\n\t\t\"0110\",\n\t\t\"00100\",\n\t\t\"10011001\",\n\t\t\"10011110\",\n\t\t\"00101\",\n\t\t\"111\",\n\t\t\"10011111\",\n\t\t\"1000\",\n\t\t\"00110\",\n\t\t\"00111\",\n\t\t\"10011100\",\n\t\t\"10011101\",\n\t\t\"000010\",\n\t\t\"10010010\",\n\t\t\"10010011\",\n\t\t\"10010000\"\n\t};\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\ta();\n\t\twhile(true){\n\t\t\tString s = br.readLine();\n\t\t\tif(s==null){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tString hugou=\"\";\n\t\t\tfor(int i = 0; i < s.length();i++){\n\t\t\t\thugou += key.get(s.substring(i,i+1));\n\t\t\t\t//System.out.print(key.get(s.substring(i,i+1))+\" \");\n\t\t\t}\n\t\t\tint len=hugou.length()%5;\n\t\t\t\n\t\t\tif(len!=0){\n\t\t\t\tfor(int i=0;i<5-len;i++){\n\t\t\t\t\thugou=hugou+\"0\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tString ans=\"\";\n\t\t\t//System.out.println(ans);\n\t\t\tfor(int i = 0;i<hugou.length();i+=5){\n\t\t\t\tans+=map.get(hugou.substring(i,i+5));\n\t\t\t\t//System.out.print(hugou.substring(i,i+5)+\" \");\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n\tstatic void a(){\n\t\tmap.put(\"00000\", \"A\");\n\t\tmap.put(\"00001\", \"B\");\n\t\tmap.put(\"00010\", \"C\");\n\t\tmap.put(\"00011\", \"D\");\n\t\tmap.put(\"00100\", \"E\");\n\t\tmap.put(\"00101\", \"F\");\n\t\tmap.put(\"00110\", \"G\");\n\t\tmap.put(\"00111\",\"H\");\n\t\tmap.put(\"01000\",\"I\");\n\t\tmap.put(\"01001\",\"J\");\n\t\tmap.put(\"01010\",\"K\");\n\t\tmap.put(\"01011\",\"L\");\n\t\tmap.put(\"01100\",\"M\");\n\t\tmap.put(\"01101\",\"N\");\n\t\tmap.put(\"01110\",\"O\");\n\t\tmap.put(\"01111\",\"P\");\n\t\tmap.put(\"10000\",\"Q\");\n\t\tmap.put(\"10001\",\"R\");\n\t\tmap.put(\"10010\",\"S\");\n\t\tmap.put(\"10011\",\"T\");\n\t\tmap.put(\"10100\",\"U\");\n\t\tmap.put(\"10101\",\"V\");\n\t\tmap.put(\"10110\",\"W\");\n\t\tmap.put(\"10111\",\"X\");\n\t\tmap.put(\"11000\",\"Y\");\n\t\tmap.put(\"11001\",\"Z\");\n\t\tmap.put(\"11010\",\" \");\n\t\tmap.put(\"11011\",\".\");\n\t\tmap.put(\"11100\",\",\");\n\t\tmap.put(\"11101\",\"-\");\n\t\tmap.put(\"11110\",\"'\");\n\t\tmap.put(\"11111\",\"?\");\n\t\tkey.put(\" \",\"101\");\n\t\tkey.put(\"'\",\"000000\");\n\t\tkey.put(\",\",\"000011\");\n\t\tkey.put(\"-\",\"10010001\");\n\t\tkey.put(\".\",\"010001\");\n\t\tkey.put(\"?\",\"000001\");\n\t\tkey.put(\"A\",\"100101\");\n\t\tkey.put(\"B\",\"10011010\");\n\t\tkey.put(\"C\",\"0101\");\n\t\tkey.put(\"D\",\"0001\");\n\t\tkey.put(\"E\",\"110\");\n\t\tkey.put(\"F\",\"01001\");\n\t\tkey.put(\"G\",\"10011011\");\n\t\tkey.put(\"H\",\"010000\");\n\t\tkey.put(\"I\",\"0111\");\n\t\tkey.put(\"J\",\"10011000\");\n\t\tkey.put(\"K\",\"0110\");\n\t\tkey.put(\"L\",\"00100\");\n\t\tkey.put(\"M\",\"10011001\");\n\t\tkey.put(\"N\",\"10011110\");\n\t\tkey.put(\"O\",\"00101\");\n\t\tkey.put(\"P\",\"111\");\n\t\tkey.put(\"Q\",\"10011111\");\n\t\tkey.put(\"R\",\"1000\");\n\t\tkey.put(\"S\",\"00110\");\n\t\tkey.put(\"T\",\"00111\");\n\t\tkey.put(\"U\",\"10011100\");\n\t\tkey.put(\"V\",\"10011101\");\n\t\tkey.put(\"W\",\"000010\");\n\t\tkey.put(\"X\",\"10010010\");\n\t\tkey.put(\"Y\",\"10010011\");\n\t\tkey.put(\"Z\",\"10010000\");\n\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString s, str;\n\n\t\ts = sc.nextLine();\n\t\tstr = \"\";\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tstr += charToBin(s.charAt(i));\n\t\t}\n\t\tfor (int i = 0; i < str.length(); i += 5) {\n\t\t\tSystem.out.print((char)binToChar(str, i));\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tpublic static String charToBin(char c) {\n\t\tString s = \"\";\n\t\tif (c == ' ') {\n\t\t\ts = \"101\";\n\t\t} else if (c == '\\'') {\n\t\t\ts = \"000000\";\n\t\t} else if (c == ',') {\n\t\t\ts = \"000011\";\n\t\t} else if (c == '-') {\n\t\t\ts = \"10010001\";\n\t\t} else if (c == '.') {\n\t\t\ts = \"010001\";\n\t\t} else if (c == '?') {\n\t\t\ts = \"000001\";\n\t\t} else if (c == 'A') {\n\t\t\ts = \"100101\";\n\t\t} else if (c == 'B') {\n\t\t\ts = \"10011010\";\n\t\t} else if (c == 'C') {\n\t\t\ts = \"0101\";\n\t\t} else if (c == 'D') {\n\t\t\ts = \"0001\";\n\t\t} else if (c == 'E') {\n\t\t\ts = \"110\";\n\t\t} else if (c == 'F') {\n\t\t\ts = \"01001\";\n\t\t} else if (c == 'G') {\n\t\t\ts = \"10011011\";\n\t\t} else if (c == 'H') {\n\t\t\ts = \"010000\";\n\t\t} else if (c == 'I') {\n\t\t\ts = \"0111\";\n\t\t} else if (c == 'J') {\n\t\t\ts = \"10011000\";\n\t\t} else if (c == 'K') {\n\t\t\ts = \"0110\";\n\t\t} else if (c == 'L') {\n\t\t\ts = \"00100\";\n\t\t} else if (c == 'M') {\n\t\t\ts = \"10011001\";\n\t\t} else if (c == 'N') {\n\t\t\ts = \"10011110\";\n\t\t} else if (c == 'O') {\n\t\t\ts = \"00101\";\n\t\t} else if (c == 'P') {\n\t\t\ts = \"111\";\n\t\t} else if (c == 'Q') {\n\t\t\ts = \"10011111\";\n\t\t} else if (c == 'R') {\n\t\t\ts = \"1000\";\n\t\t} else if (c == 'S') {\n\t\t\ts = \"00110\";\n\t\t} else if (c == 'T') {\n\t\t\ts = \"00111\";\n\t\t} else if (c == 'U') {\n\t\t\ts = \"10011100\";\n\t\t} else if (c == 'V') {\n\t\t\ts = \"10011101\";\n\t\t} else if (c == 'W') {\n\t\t\ts = \"000010\";\n\t\t} else if (c == 'X') {\n\t\t\ts = \"10010010\";\n\t\t} else if (c == 'Y') {\n\t\t\ts = \"10010011\";\n\t\t} else if (c == 'X') {\n\t\t\ts = \"10010000\";\n\t\t}\n\t\treturn s;\n\t}\n\n\tpublic static char binToChar(String s, int i) {\n\t\tint a = 0;\n\t\tchar c = 0;\n\t\ta += (s.charAt(i) - '0') * 10000;\n\t\tif (i + 1 < s.length() - 1) {\n\t\t\ta += (s.charAt(i + 1) - '0') * 1000;\n\t\t\tif (i + 2 < s.length() - 1) {\n\t\t\t\ta += (s.charAt(i + 2) - '0') * 100;\n\t\t\t\tif (i + 3 < s.length() - 1) {\n\t\t\t\t\ta += (s.charAt(i + 3) - '0') * 10;\n\t\t\t\t\tif (i + 4 < s.length() - 1) {\n\t\t\t\t\t\ta += (s.charAt(i + 4) - '0') * 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (a == 00000) {\n\t\t\tc = 'A';\n\t\t} else if (a == 1) {\n\t\t\tc = 'B';\n\t\t} else if (a == 10) {\n\t\t\tc = 'C';\n\t\t} else if (a == 11) {\n\t\t\tc = 'D';\n\t\t} else if (a == 100) {\n\t\t\tc = 'E';\n\t\t} else if (a == 101) {\n\t\t\tc = 'F';\n\t\t} else if (a == 110) {\n\t\t\tc = 'G';\n\t\t} else if (a == 111) {\n\t\t\tc = 'H';\n\t\t} else if (a == 1000) {\n\t\t\tc = 'I';\n\t\t} else if (a == 1001) {\n\t\t\tc = 'J';\n\t\t} else if (a == 1010) {\n\t\t\tc = 'K';\n\t\t} else if (a == 1011) {\n\t\t\tc = 'L';\n\t\t} else if (a == 1100) {\n\t\t\tc = 'M';\n\t\t} else if (a == 1101) {\n\t\t\tc = 'N';\n\t\t} else if (a == 1110) {\n\t\t\tc = 'O';\n\t\t} else if (a == 1111) {\n\t\t\tc = 'P';\n\t\t} else if (a == 10000) {\n\t\t\tc = 'Q';\n\t\t} else if (a == 10001) {\n\t\t\tc = 'R';\n\t\t} else if (a == 10010) {\n\t\t\tc = 'S';\n\t\t} else if (a == 10011) {\n\t\t\tc = 'T';\n\t\t} else if (a == 10100) {\n\t\t\tc = 'U';\n\t\t} else if (a == 10101) {\n\t\t\tc = 'V';\n\t\t} else if (a == 10110) {\n\t\t\tc = 'W';\n\t\t} else if (a == 10111) {\n\t\t\tc = 'X';\n\t\t} else if (a == 11000) {\n\t\t\tc = 'Y';\n\t\t} else if (a == 11001) {\n\t\t\tc = 'Z';\n\t\t} else if (a == 11010) {\n\t\t\tc = ' ';\n\t\t} else if (a == 11011) {\n\t\t\tc = '.';\n\t\t} else if (a == 11100) {\n\t\t\tc = ',';\n\t\t} else if (a == 11101) {\n\t\t\tc = '-';\n\t\t} else if (a == 11110) {\n\t\t\tc = '\\'';\n\t\t} else if (a == 11111) {\n\t\t\tc = '?';\n\t\t}\n\t\treturn c;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\nimport static java.util.Arrays.*;\nimport static java.lang.Math.*;\n\npublic class Main {\n\n    static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    static final PrintWriter out = new PrintWriter(System.out,false);\n\n    static void solve() throws IOException{\n    \tHashMap<Character,String> map = new HashMap<Character,String>();\n    \tmap.put(' ',\"101\");\n    \tmap.put('\\'',\"000000\");\n    \tmap.put(',',\"000011\");\n    \tmap.put('-',\"10010001\");\n    \tmap.put('.',\"010001\");\n    \tmap.put('?',\"000001\");\n    \tmap.put('A',\"100101\");\n    \tmap.put('B',\"10011010\");\n    \tmap.put('C',\"0101\");\n    \tmap.put('D',\"0001\");\n    \tmap.put('E',\"110\");\n    \tmap.put('F',\"01001\");\n    \tmap.put('G',\"10011011\");\n    \tmap.put('H',\"010000\");\n    \tmap.put('I',\"0111\");\n    \tmap.put('J',\"10011000\");\n    \tmap.put('K',\"0110\");\n    \tmap.put('L',\"00100\");\n    \tmap.put('M',\"10011001\");\n    \tmap.put('N',\"10011110\");\n    \tmap.put('O',\"00101\");\n    \tmap.put('P',\"111\");\n    \tmap.put('Q',\"10011111\");\n    \tmap.put('R',\"1000\");\n    \tmap.put('S',\"00110\");\n    \tmap.put('T',\"00111\");\n    \tmap.put('U',\"10011100\");\n    \tmap.put('V',\"10011101\");\n    \tmap.put('W',\"000010\");\n    \tmap.put('X',\"10010010\");\n    \tmap.put('Y',\"10010011\");\n    \tmap.put('Z',\"10010000\");\n\n    \tHashMap<String,Character> map2 = new HashMap<String,Character>();\n    \tmap2.put(\"11010\",' ');\n    \tmap2.put(\"11011\",'.');\n    \tmap2.put(\"11100\",',');\n    \tmap2.put(\"11101\",'-');\n    \tmap2.put(\"11110\",'\\'');\n    \tmap2.put(\"11111\",'?');\n    \tmap2.put(\"00000\",'A');\n    \tmap2.put(\"00001\",'B');\n    \tmap2.put(\"00010\",'C');\n    \tmap2.put(\"00011\",'D');\n    \tmap2.put(\"00100\",'E');\n    \tmap2.put(\"00101\",'F');\n    \tmap2.put(\"00110\",'G');\n    \tmap2.put(\"00111\",'H');\n    \tmap2.put(\"01000\",'I');\n    \tmap2.put(\"01001\",'J');\n    \tmap2.put(\"01010\",'K');\n    \tmap2.put(\"01011\",'L');\n    \tmap2.put(\"01100\",'M');\n    \tmap2.put(\"01101\",'N');\n    \tmap2.put(\"01110\",'O');\n    \tmap2.put(\"01111\",'P');\n    \tmap2.put(\"10000\",'Q');\n    \tmap2.put(\"10001\",'R');\n    \tmap2.put(\"10010\",'S');\n    \tmap2.put(\"10011\",'T');\n    \tmap2.put(\"10100\",'U');\n    \tmap2.put(\"10101\",'V');\n    \tmap2.put(\"10110\",'W');\n    \tmap2.put(\"10111\",'X');\n    \tmap2.put(\"11000\",'Y');\n    \tmap2.put(\"11001\",'Z');\n\n        String line;\n        while ((line = br.readLine()) != null) {\n        \tStringBuilder sb = new StringBuilder();\n        \tfor (int i=0; i<line.length(); i++) {\n        \t\tsb.append(map.get(line.charAt(i)));\n        \t}\n\n        \tint x = sb.length()%5;\n        \tif (x != 0) {\n        \t\tfor (int i=0; i<5-x; i++) {\n        \t\t\tsb.append(\"0\");\n        \t\t}\n        \t}\n\n        \tfor (int i=0; i<sb.length(); i+=5) {\n        \t\tout.print(map2.get(sb.substring(i,i+5)));\n        \t}\n        \tout.println();\n        \tout.flush();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        long start = System.currentTimeMillis();\n\n        solve();\n        out.flush();\n\n        long end = System.currentTimeMillis();\n        //trace(end-start + \"ms\");\n        br.close();\n        out.close();\n    }\n\n    static void trace(Object... o) { System.out.println(Arrays.deepToString(o));}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.StringTokenizer;\nimport java.util.HashMap;\n\nclass Translator {\n\tString t,res;\n\tHashMap<String,String> map = new HashMap<String,String>();\n\tHashMap<String,String> back = new HashMap<String,String>();\n\tTranslator() {\n\t\tmap.put(\" \",\"101\");\n\t\tmap.put(\"'\",\"000000\");\n\t\tmap.put(\",\",\"000011\");\n\t\tmap.put(\"-\",\"10010001\");\n\t\tmap.put(\".\",\"010001\");\n\t\tmap.put(\"?\",\"000001\");\n\t\tmap.put(\"A\",\"100101\");\n\t\tmap.put(\"B\",\"10011010\");\n\t\tmap.put(\"C\",\"0101\");\n\t\tmap.put(\"D\",\"0001\");\n\t\tmap.put(\"E\",\"110\");\n\t\tmap.put(\"F\",\"01001\");\n\t\tmap.put(\"G\",\"10011011\");\n\t\tmap.put(\"H\",\"010000\");\n\t\tmap.put(\"I\",\"0111\");\n\t\tmap.put(\"J\",\"10011000\");\n\t\tmap.put(\"K\",\"0110\");\n\t\tmap.put(\"L\",\"00100\");\n\t\tmap.put(\"M\",\"10011001\");\n\t\tmap.put(\"N\",\"10011110\");\n\t\tmap.put(\"O\",\"00101\");\n\t\tmap.put(\"P\",\"111\");\n\t\tmap.put(\"Q\",\"10011111\");\n\t\tmap.put(\"R\",\"1000\");\n\t\tmap.put(\"S\",\"00110\");\n\t\tmap.put(\"T\",\"00111\");\n\t\tmap.put(\"U\",\"10011100\");\n\t\tmap.put(\"V\",\"10011101\");\n\t\tmap.put(\"W\",\"000010\");\n\t\tmap.put(\"X\",\"10010010\");\n\t\tmap.put(\"Y\",\"10010011\");\n\t\tmap.put(\"Z\",\"10010000\");\n\t\tback.put(\"00000\",\"A\");\n\t\tback.put(\"00001\",\"B\");\n\t\tback.put(\"00010\",\"C\");\n\t\tback.put(\"00011\",\"D\");\n\t\tback.put(\"00100\",\"E\");\n\t\tback.put(\"00101\",\"F\");\n\t\tback.put(\"00110\",\"G\");\n\t\tback.put(\"00111\",\"H\");\n\t\tback.put(\"01000\",\"I\");\n\t\tback.put(\"01001\",\"J\");\n\t\tback.put(\"01010\",\"K\");\n\t\tback.put(\"01011\",\"L\");\n\t\tback.put(\"01100\",\"M\");\n\t\tback.put(\"01101\",\"N\");\n\t\tback.put(\"01110\",\"O\");\n\t\tback.put(\"01111\",\"P\");\n\t\tback.put(\"10000\",\"Q\");\n\t\tback.put(\"10001\",\"R\");\n\t\tback.put(\"10010\",\"S\");\n\t\tback.put(\"10011\",\"T\");\n\t\tback.put(\"10100\",\"U\");\n\t\tback.put(\"10101\",\"V\");\n\t\tback.put(\"10110\",\"W\");\n\t\tback.put(\"10111\",\"X\");\n\t\tback.put(\"11000\",\"Y\");\n\t\tback.put(\"11001\",\"Z\");\n\t\tback.put(\"11010\",\" \");\n\t\tback.put(\"11011\",\".\");\n\t\tback.put(\"11100\",\",\");\n\t\tback.put(\"11101\",\"-\");\n\t\tback.put(\"11110\",\"'\");\n\t\tback.put(\"11111\",\"?\");\n\t}\n\n\tvoid set(String s) {\n\t\tthis.t = \"\";\n\t\tint n = s.length();\n\t\tfor (int i=0;i<n;i++) {\n\t\t\tthis.t = this.t+map.get(\"\"+s.charAt(i));\n\t\t}\n\t}\n\n\tString put() {\n\t\tthis.res = \"\";\n\t\tint n = this.t.length();\n\t\tif (n%5>0) {\n\t\t\tint m = 5-(n%5);\n\t\t\tn += m;\n\t\t\tfor (int i=0;i<m;i++) this.t = this.t+\"0\";\n\t\t}\n\t\tn /= 5;\n\t\tfor (int i=0;i<n;i++) {\n\t\t\tthis.res = this.res+back.get(this.t.substring(i*5,i*5+5));\n\t\t}\n\t\treturn this.res;\n\t}\n}\n\nclass Main {\n\tpublic static void main(String args[]) {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n\t\ttry {\n\t\t\tTranslator t = new Translator();\n\t\t\tt.set(br.readLine());\n\t\t\tSystem.out.println(t.put());\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tstatic final HashMap<Character, String> c1 = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");\n\t\t\tput('\\'', \"000000\");\n\t\t\tput(',', \"000011\");\n\t\t\tput('-', \"10010001\");\n\t\t\tput('.', \"010001\");\n\t\t\tput('?', \"000001\");\n\t\t\tput('A', \"100101\");\n\t\t\tput('B', \"10011010\");\n\t\t\tput('C', \"0101\");\n\t\t\tput('D', \"0001\");\n\t\t\tput('E', \"110\");\n\t\t\tput('F', \"01001\");\n\t\t\tput('G', \"10011011\");\n\t\t\tput('H', \"010000\");\n\t\t\tput('I', \"0111\");\n\t\t\tput('J', \"10011000\");\n\t\t\tput('K', \"0110\");\n\t\t\tput('L', \"00100\");\n\t\t\tput('M', \"10011001\");\n\t\t\tput('N', \"10011110\");\n\t\t\tput('O', \"00101\");\n\t\t\tput('P', \"111\");\n\t\t\tput('Q', \"10011111\");\n\t\t\tput('R', \"1000\");\n\t\t\tput('S', \"00110\");\n\t\t\tput('T', \"00111\");\n\t\t\tput('U', \"10011100\");\n\t\t\tput('V', \"10011101\");\n\t\t\tput('W', \"000010\");\n\t\t\tput('X', \"10010010\");\n\t\t\tput('Y', \"10010011\");\n\t\t\tput('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> c2 = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"11010\", ' ');\n\t\t\tput(\"11110\", '\\'');\n\t\t\tput(\"11100\", ',');\n\t\t\tput(\"11101\", '-');\n\t\t\tput(\"11011\", '.');\n\t\t\tput(\"11111\", '?');\n\t\t\tput(\"00000\", 'A');\n\t\t\tput(\"00001\", 'B');\n\t\t\tput(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D');\n\t\t\tput(\"00100\", 'E');\n\t\t\tput(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G');\n\t\t\tput(\"00111\", 'H');\n\t\t\tput(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J');\n\t\t\tput(\"01010\", 'K');\n\t\t\tput(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M');\n\t\t\tput(\"01101\", 'N');\n\t\t\tput(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P');\n\t\t\tput(\"10000\", 'Q');\n\t\t\tput(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S');\n\t\t\tput(\"10011\", 'T');\n\t\t\tput(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V');\n\t\t\tput(\"10110\", 'W');\n\t\t\tput(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y');\n\t\t\tput(\"11001\", 'Z');\n\t\t}\n\t};\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\n\t\t\t//\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1.get(c));\n\t\t\t}\n\t\t\twhile (sb1.length() % 5 != 0) {\n\t\t\t\tsb1.append('0');\n\t\t\t}\n\n\t\t\t//\n\t\t\tfor (int i = 0; i < sb1.length() / 5; i++) {\n\t\t\t\tString five = sb1.substring(i * 5, (i + 1) * 5);\n\t\t\t\tsb2.append(c2.get(five));\n\t\t\t}\n\n\t\t\tSystem.out.println(sb2.toString());\n\n\t\t}\n\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.io.*;\n//import java.util.Arrays;\npublic class Main {\n\tpublic static void main(String[] args) throws java.io.IOException {\n\t\tScanner scan = new Scanner(System.in);\n\t\tInputStreamReader is = new InputStreamReader(System.in);\n\t\tBufferedReader br = new BufferedReader(is);\n\t\tString text = \"\";\n\t\ttext += br.readLine();\n\t\tchar mozi[] = text.toCharArray();\n\t\tString To = \"\";\n\t\tfor(int i = 0 ; i < mozi.length ; i++){\n\t\t\tString Hantei =  String.valueOf(mozi[i]);\n\t\t\tif(Hantei.equals(\"A\")){\n\t\t\t\tTo += \"100101\";\n\t\t\t}else if(Hantei.equals(\"B\")){\n\t\t\t\tTo += \"10011010\";\n\t\t\t}else if(Hantei.equals(\"C\")){\n\t\t\t\tTo += \"0101\";\n\t\t\t}else if(Hantei.equals(\"D\")){\n\t\t\t\tTo += \"0001\";\n\t\t\t}else if(Hantei.equals(\"E\")){\n\t\t\t\tTo += \"110\";\n\t\t\t}else if(Hantei.equals(\"F\")){\n\t\t\t\tTo += \"01001\";\n\t\t\t}else if(Hantei.equals(\"G\")){\n\t\t\t\tTo += \"10011011\";\n\t\t\t}else if(Hantei.equals(\"H\")){\n\t\t\t\tTo += \"010000\";\n\t\t\t}else if(Hantei.equals(\"I\")){\n\t\t\t\tTo += \"0111\";\n\t\t\t}else if(Hantei.equals(\"J\")){\n\t\t\t\tTo += \"10011000\";\n\t\t\t}else if(Hantei.equals(\"K\")){\n\t\t\t\tTo += \"0110\";\n\t\t\t}else if(Hantei.equals(\"L\")){\n\t\t\t\tTo += \"00100\";\n\t\t\t}else if(Hantei.equals(\"M\")){\n\t\t\t\tTo += \"10011001\";\n\t\t\t}else if(Hantei.equals(\"N\")){\n\t\t\t\tTo += \"10011110\";\n\t\t\t}else if(Hantei.equals(\"O\")){\n\t\t\t\tTo += \"00101\";\n\t\t\t}else if(Hantei.equals(\"P\")){\n\t\t\t\tTo += \"111\";\n\t\t\t}else if(Hantei.equals(\"Q\")){\n\t\t\t\tTo += \"10011111\";\n\t\t\t}else if(Hantei.equals(\"R\")){\n\t\t\t\tTo += \"1000\";\n\t\t\t}else if(Hantei.equals(\"S\")){\n\t\t\t\tTo += \"00110\";\n\t\t\t}else if(Hantei.equals(\"T\")){\n\t\t\t\tTo += \"00111\";\n\t\t\t}else if(Hantei.equals(\"U\")){\n\t\t\t\tTo += \"10011100\";\n\t\t\t}else if(Hantei.equals(\"V\")){\n\t\t\t\tTo += \"10011101\";\n\t\t\t}else if(Hantei.equals(\"W\")){\n\t\t\t\tTo += \"000010\";\n\t\t\t}else if(Hantei.equals(\"X\")){\n\t\t\t\tTo += \"10010010\";\n\t\t\t}else if(Hantei.equals(\"Y\")){\n\t\t\t\tTo += \"10010011\";\n\t\t\t}else if(Hantei.equals(\"Z\")){\n\t\t\t\tTo += \"10010000\";\n\t\t\t}else if(Hantei.equals(\" \")){\n\t\t\t\tTo += \"101\";\n\t\t\t}else if(Hantei.equals(\"'\")){\n\t\t\t\tTo += \"000000\";\n\t\t\t}else if(Hantei.equals(\",\")){\n\t\t\t\tTo += \"000011\";\n\t\t\t}else if(Hantei.equals(\"-\")){\n\t\t\t\tTo += \"10010001\";\n\t\t\t}else if(Hantei.equals(\".\")){\n\t\t\t\tTo += \"010001\";\n\t\t\t}else if(Hantei.equals(\"?\")){\n\t\t\t\tTo += \"000001\";\n\t\t\t}\n\t\t}\n\t\tint amari =  To.length()%5;\n\t\tif(amari == 1){\n\t\t\tTo += \"0000\";\n\t\t}else if(amari == 2){\n\t\t\tTo += \"000\";\n\t\t}else if(amari == 3){\n\t\t\tTo += \"00\";\n\t\t}else if(amari == 4){\n\t\t\tTo += \"0\";\n\t\t}\n\t\tint won[] = new int[To.length()/5];\n\t\tint j;\n\t\tString newtext = \"\";\n\t\tfor(j = 0 ; j < To.length()/5 ; j++){\n\t\t\twon[j] = Integer.parseInt(To.substring(j*5,(j+1)*5));\n\t\t\tif(won[j] == 0){\n\t\t\t\tnewtext += \"A\";\n\t\t\t}else if(won[j] == 1){\n\t\t\t\tnewtext += \"B\";\n\t\t\t}else if(won[j] == 10){\n\t\t\t\tnewtext += \"C\";\n\t\t\t}else if(won[j] == 11){\n\t\t\t\tnewtext += \"D\";\n\t\t\t}else if(won[j] == 100){\n\t\t\t\tnewtext += \"E\";\n\t\t\t}else if(won[j] == 101){\n\t\t\t\tnewtext += \"F\";\n\t\t\t}else if(won[j] == 110){\n\t\t\t\tnewtext += \"G\";\n\t\t\t}else if(won[j] == 111){\n\t\t\t\tnewtext += \"H\";\n\t\t\t}else if(won[j] == 1000){\n\t\t\t\tnewtext += \"I\";\n\t\t\t}else if(won[j] == 1001){\n\t\t\t\tnewtext += \"J\";\n\t\t\t}else if(won[j] == 1010){\n\t\t\t\tnewtext += \"K\";\n\t\t\t}else if(won[j] == 1011){\n\t\t\t\tnewtext += \"L\";\n\t\t\t}else if(won[j] == 1100){\n\t\t\t\tnewtext += \"M\";\n\t\t\t}else if(won[j] == 1101){\n\t\t\t\tnewtext += \"N\";\n\t\t\t}else if(won[j] == 1110){\n\t\t\t\tnewtext += \"O\";\n\t\t\t}else if(won[j] == 1111){\n\t\t\t\tnewtext += \"P\";\n\t\t\t}else if(won[j] == 10000){\n\t\t\t\tnewtext += \"Q\";\n\t\t\t}else if(won[j] == 10001){\n\t\t\t\tnewtext += \"R\";\n\t\t\t}else if(won[j] == 10010){\n\t\t\t\tnewtext += \"S\";\n\t\t\t}else if(won[j] == 10011){\n\t\t\t\tnewtext += \"T\";\n\t\t\t}else if(won[j] == 10100){\n\t\t\t\tnewtext += \"U\";\n\t\t\t}else if(won[j] == 10101){\n\t\t\t\tnewtext += \"V\";\n\t\t\t}else if(won[j] == 10110){\n\t\t\t\tnewtext += \"W\";\n\t\t\t}else if(won[j] == 10111){\n\t\t\t\tnewtext += \"X\";\n\t\t\t}else if(won[j] == 11000){\n\t\t\t\tnewtext += \"Y\";\n\t\t\t}else if(won[j] == 11001){\n\t\t\t\tnewtext += \"Z\";\n\t\t\t}else if(won[j] == 11010){\n\t\t\t\tnewtext += \" \";\n\t\t\t}else if(won[j] == 11011){\n\t\t\t\tnewtext += \".\";\n\t\t\t}else if(won[j] == 11100){\n\t\t\t\tnewtext += \",\";\n\t\t\t}else if(won[j] == 11101){\n\t\t\t\tnewtext += \"-\";\n\t\t\t}else if(won[j] == 11110){\n\t\t\t\tnewtext += \"'\";\n\t\t\t}else{\n\t\t\t\tnewtext += \"?\";\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(newtext);\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner scan = new Scanner(System.in);\n\t\t//while(scan.hasNext()){\n\t\t\tString str = scan.nextLine();\n\t\t\tchar[] ch = str.toCharArray();\n\t\t\tString newstr = \"\";\n\t\t\tfor(int i = 0;i < ch.length;i++){\n\t\t\t\tswitch(ch[i]){\n\t\t\t\t\tcase ' ': newstr += \"101\";\tbreak;//\n\t\t\t\t\tcase '\\'': newstr += \"000000\";\tbreak;//\n\t\t\t\t\tcase ',': newstr += \"000011\"; break;//\n\t\t\t\t\tcase '-': newstr += \"10010001\"; break;//\n\t\t\t\t\tcase '.': newstr += \"010001\"; break;//\n\t\t\t\t\tcase '?': newstr += \"000001\"; break;//\n\t\t\t\t\tcase 'A': newstr += \"100101\"; break;//\n\t\t\t\t\tcase 'B': newstr += \"10011010\"; break;//\n\t\t\t\t\tcase 'C': newstr += \"0101\"; break;//\n\t\t\t\t\tcase 'D': newstr += \"0001\"; break;//\n\t\t\t\t\tcase 'E': newstr += \"110\"; break;//\n\t\t\t\t\tcase 'F': newstr += \"01001\"; break;//\n\t\t\t\t\tcase 'G': newstr += \"10011011\"; break;//\n\t\t\t\t\tcase 'H': newstr += \"010000\"; break;//\n\t\t\t\t\tcase 'I': newstr += \"0111\"; break;//\n\t\t\t\t\tcase 'J': newstr += \"10011000\"; break;//\n\t\t\t\t\tcase 'K': newstr += \"0110\"; break;//\n\t\t\t\t\tcase 'L': newstr += \"00100\"; break;//\n\t\t\t\t\tcase 'M': newstr += \"10011001\"; break;//\n\t\t\t\t\tcase 'N': newstr += \"10011110\"; break;//\n\t\t\t\t\tcase 'O': newstr += \"00101\"; break;//\n\t\t\t\t\tcase 'P': newstr += \"111\"; break;//\n\t\t\t\t\tcase 'Q': newstr += \"10011111\"; break;//\n\t\t\t\t\tcase 'R': newstr += \"1000\"; break;//\n\t\t\t\t\tcase 'S': newstr += \"00110\"; break;//\n\t\t\t\t\tcase 'T': newstr += \"00111\"; break;//\n\t\t\t\t\tcase 'U': newstr += \"10011100\"; break;//\n\t\t\t\t\tcase 'V': newstr += \"10011101\"; break;//\n\t\t\t\t\tcase 'W': newstr += \"000010\"; break;//\n\t\t\t\t\tcase 'X': newstr += \"10010010\"; break;//\n\t\t\t\t\tcase 'Y': newstr += \"10010011\"; break;//\n\t\t\t\t\tcase 'Z': newstr += \"10010000\"; break;//\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile(newstr.length() % 5 != 0){\n\t\t\t\tnewstr += \"0\";\n\t\t\t}\n\t\t\t//System.out.println(newstr);\n\t\t\tstr = \"\";\n\t\t\tfor(int i = 0;i < newstr.length();i += 5){\n\t\t\t\tif(newstr.substring(i,i+5).equals(\"00000\")){\n\t\t\t\t\tstr += \"A\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"00001\")){\n\t\t\t\t\tstr += \"B\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"00010\")){\n\t\t\t\t\tstr += \"C\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"00011\")){\n\t\t\t\t\tstr += \"D\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"00100\")){\n\t\t\t\t\tstr += \"E\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"00101\")){\n\t\t\t\t\tstr += \"F\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"00110\")){\n\t\t\t\t\tstr += \"G\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"00111\")){\n\t\t\t\t\tstr += \"H\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01000\")){\n\t\t\t\t\tstr += \"I\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01001\")){\n\t\t\t\t\tstr += \"J\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01010\")){\n\t\t\t\t\tstr += \"K\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01011\")){\n\t\t\t\t\tstr += \"L\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01100\")){\n\t\t\t\t\tstr += \"M\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01101\")){\n\t\t\t\t\tstr += \"N\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01110\")){\n\t\t\t\t\tstr += \"O\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01111\")){\n\t\t\t\t\tstr += \"P\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10000\")){\n\t\t\t\t\tstr += \"Q\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10001\")){\n\t\t\t\t\tstr += \"R\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10010\")){\n\t\t\t\t\tstr += \"S\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10011\")){\n\t\t\t\t\tstr += \"T\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10100\")){\n\t\t\t\t\tstr += \"U\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10101\")){\n\t\t\t\t\tstr += \"V\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10110\")){\n\t\t\t\t\tstr += \"W\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10111\")){\n\t\t\t\t\tstr += \"X\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11000\")){\n\t\t\t\t\tstr += \"Y\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11001\")){\n\t\t\t\t\tstr += \"Z\";\t\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11010\")){\n\t\t\t\t\tstr += \" \";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11011\")){\n\t\t\t\t\tstr += \".\";\t\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11100\")){\n\t\t\t\t\tstr += \",\";\t\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11101\")){\n\t\t\t\t\tstr += \"-\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11110\")){\n\t\t\t\t\tstr += \"'\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11111\")){\n\t\t\t\t\tstr += \"?\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(str);\n\t\t//}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main {\n\n    static String codeA (char c) {\n        switch (c) {\n            case ' ':   return \"101\";\n            case '\\'':  return \"000000\";\n            case ',':   return \"000011\";\n            case '-':   return \"10010001\";\n            case '.':   return \"010001\";\n            case '?':   return \"000001\";\n            case 'A':   return \"100101\";\n            case 'B':   return \"10011010\";\n            case 'C':   return \"0101\";\n            case 'D':   return \"0001\";\n            case 'E':   return \"110\";\n            case 'F':   return \"01001\";\n            case 'G':   return \"10011011\";\n            case 'H':   return \"010000\";\n            case 'I':   return \"0111\";\n            case 'J':   return \"10011000\";\n            case 'K':   return \"0110\";\n            case 'L':   return \"00100\";\n            case 'M':   return \"10011001\";\n            case 'N':   return \"10011110\";\n            case 'O':   return \"00101\";\n            case 'P':   return \"111\";\n            case 'Q':   return \"10011111\";\n            case 'R':   return \"1000\";\n            case 'S':   return \"00110\";\n            case 'T':   return \"00111\";\n            case 'U':   return \"10011100\";\n            case 'V':   return \"10011101\";\n            case 'W':   return \"000010\";\n            case 'X':   return \"10010010\";\n            case 'Y':   return \"10010011\";\n            case 'Z':   return \"10010000\";\n        }\n        return \"\";\n    }\n\n    static void solve (char[] line) {\n        String tmp = \"\";\n\n        for (char c : line) {\n            tmp += codeA(c);    \n        }\n\n        switch (tmp.length() % 5) {\n            case 1: tmp += \"0000\"; break;\n            case 2: tmp += \"000\"; break;\n            case 3: tmp += \"00\"; break;\n            case 4: tmp += \"0\"; break;\n        }\n\n\n        char [] codeB = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', \n            'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '.', ',', '-', '\\'', '?' };\n\n        String result = \"\";\n\n        for(int i = 0; i < tmp.length() / 5; i++) {\n            int num = 0;\n            int mult = 16;\n            for (int j = 0; j < 5; j++) {\n                num += Integer.parseInt(\"\" + tmp.charAt(5*i+j)) * mult;\n                mult /= 2;\n            }\n            result += codeB[num];\n        }\n\n\n        System.out.println(result);\n        \n    }\n\n    public static void main (String [] args) {\n\n        Scanner sc = new Scanner(System.in);\n\n        while(sc.hasNext()) {\n            solve(sc.nextLine().toCharArray());\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString s, str;\n\n\t\ts = sc.nextLine();\n\t\tstr = \"\";\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tstr += charToBin(s.charAt(i));\n\t\t}\n\t\tfor (int i = 0; i < str.length(); i += 5) {\n\t\t\tSystem.out.print((char)binToChar(str, i));\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tpublic static String charToBin(char c) {\n\t\tString s = \"\";\n\t\tif (c == ' ') {\n\t\t\ts = \"101\";\n\t\t} else if (c == '\\'') {\n\t\t\ts = \"000000\";\n\t\t} else if (c == ',') {\n\t\t\ts = \"000011\";\n\t\t} else if (c == '-') {\n\t\t\ts = \"10010001\";\n\t\t} else if (c == '.') {\n\t\t\ts = \"010001\";\n\t\t} else if (c == '?') {\n\t\t\ts = \"000001\";\n\t\t} else if (c == 'A') {\n\t\t\ts = \"100101\";\n\t\t} else if (c == 'B') {\n\t\t\ts = \"10011010\";\n\t\t} else if (c == 'C') {\n\t\t\ts = \"0101\";\n\t\t} else if (c == 'D') {\n\t\t\ts = \"0001\";\n\t\t} else if (c == 'E') {\n\t\t\ts = \"110\";\n\t\t} else if (c == 'F') {\n\t\t\ts = \"01001\";\n\t\t} else if (c == 'G') {\n\t\t\ts = \"10011011\";\n\t\t} else if (c == 'H') {\n\t\t\ts = \"010000\";\n\t\t} else if (c == 'I') {\n\t\t\ts = \"0111\";\n\t\t} else if (c == 'J') {\n\t\t\ts = \"10011000\";\n\t\t} else if (c == 'K') {\n\t\t\ts = \"0110\";\n\t\t} else if (c == 'L') {\n\t\t\ts = \"00100\";\n\t\t} else if (c == 'M') {\n\t\t\ts = \"10011001\";\n\t\t} else if (c == 'N') {\n\t\t\ts = \"10011110\";\n\t\t} else if (c == 'O') {\n\t\t\ts = \"00101\";\n\t\t} else if (c == 'P') {\n\t\t\ts = \"111\";\n\t\t} else if (c == 'Q') {\n\t\t\ts = \"10011111\";\n\t\t} else if (c == 'R') {\n\t\t\ts = \"1000\";\n\t\t} else if (c == 'S') {\n\t\t\ts = \"00110\";\n\t\t} else if (c == 'T') {\n\t\t\ts = \"00111\";\n\t\t} else if (c == 'U') {\n\t\t\ts = \"10011100\";\n\t\t} else if (c == 'V') {\n\t\t\ts = \"10011101\";\n\t\t} else if (c == 'W') {\n\t\t\ts = \"000010\";\n\t\t} else if (c == 'X') {\n\t\t\ts = \"10010010\";\n\t\t} else if (c == 'Y') {\n\t\t\ts = \"10010011\";\n\t\t} else if (c == 'X') {\n\t\t\ts = \"10010000\";\n\t\t}\n\t\treturn s;\n\t}\n\n\tpublic static char binToChar(String s, int i) {\n\t\tint a = 0;\n\t\tchar c = 0;\n\t\ta += (s.charAt(i) - '0') * 10000;\n\t\tif (i + 1 < s.length() - 1) {\n\t\t\ta += (s.charAt(i + 1) - '0') * 1000;\n\t\t\tif (i + 2 < s.length() - 1) {\n\t\t\t\ta += (s.charAt(i + 2) - '0') * 100;\n\t\t\t\tif (i + 3 < s.length() - 1) {\n\t\t\t\t\ta += (s.charAt(i + 3) - '0') * 10;\n\t\t\t\t\tif (i + 4 < s.length() - 1) {\n\t\t\t\t\t\ta += (s.charAt(i + 4) - '0') * 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (a == 0) {\n\t\t\tc = 'A';\n\t\t} else if (a == 1) {\n\t\t\tc = 'B';\n\t\t} else if (a == 10) {\n\t\t\tc = 'C';\n\t\t} else if (a == 11) {\n\t\t\tc = 'D';\n\t\t} else if (a == 100) {\n\t\t\tc = 'E';\n\t\t} else if (a == 101) {\n\t\t\tc = 'F';\n\t\t} else if (a == 110) {\n\t\t\tc = 'G';\n\t\t} else if (a == 111) {\n\t\t\tc = 'H';\n\t\t} else if (a == 1000) {\n\t\t\tc = 'I';\n\t\t} else if (a == 1001) {\n\t\t\tc = 'J';\n\t\t} else if (a == 1010) {\n\t\t\tc = 'K';\n\t\t} else if (a == 1011) {\n\t\t\tc = 'L';\n\t\t} else if (a == 1100) {\n\t\t\tc = 'M';\n\t\t} else if (a == 1101) {\n\t\t\tc = 'N';\n\t\t} else if (a == 1110) {\n\t\t\tc = 'O';\n\t\t} else if (a == 1111) {\n\t\t\tc = 'P';\n\t\t} else if (a == 10000) {\n\t\t\tc = 'Q';\n\t\t} else if (a == 10001) {\n\t\t\tc = 'R';\n\t\t} else if (a == 10010) {\n\t\t\tc = 'S';\n\t\t} else if (a == 10011) {\n\t\t\tc = 'T';\n\t\t} else if (a == 10100) {\n\t\t\tc = 'U';\n\t\t} else if (a == 10101) {\n\t\t\tc = 'V';\n\t\t} else if (a == 10110) {\n\t\t\tc = 'W';\n\t\t} else if (a == 10111) {\n\t\t\tc = 'X';\n\t\t} else if (a == 11000) {\n\t\t\tc = 'Y';\n\t\t} else if (a == 11001) {\n\t\t\tc = 'Z';\n\t\t} else if (a == 11010) {\n\t\t\tc = ' ';\n\t\t} else if (a == 11011) {\n\t\t\tc = '.';\n\t\t} else if (a == 11100) {\n\t\t\tc = ',';\n\t\t} else if (a == 11101) {\n\t\t\tc = '-';\n\t\t} else if (a == 11110) {\n\t\t\tc = '\\'';\n\t\t} else if (a == 11111) {\n\t\t\tc = '?';\n\t\t}\n\t\treturn c;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tMain instance = new Main();\n\t\tinstance.execute();\n\t}\n\t\n\tprivate void execute() throws IOException {\n\t\tBufferedReader sc = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tMap<String, String> encriptMap = getEncriptMap();\n\t\tMap<String, String> decriptMap = getDecriptMap();\n\n\t\tStringBuilder sb;\n\t\tString line;\n\t\twhile((line = sc.readLine()) != null) {\n\t\t\tsb = new StringBuilder();\n\t\t\tfor(int i = 0 ; i < line.length() ; i++) {\n\t\t\t\tsb.append(encriptMap.get(line.substring(i, i + 1)));\n\t\t\t}\n\t\t\t\n\t\t\twhile(sb.length() % 5 > 0) {\n\t\t\t\tsb.append(\"0\");\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i = 0 ; i < sb.length(); i = i + 5) {\n\t\t\t\tSystem.out.print(decriptMap.get(sb.substring(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n\tprivate Map<String, String> getEncriptMap() {\n\t\tMap<String, String> map = new HashMap<String, String>();\n\t\tmap.put(\" \", \"101\");\n\t\tmap.put(\"'\", \"000000\");\n\t\tmap.put(\",\", \"000011\");\n\t\tmap.put(\"-\", \"10010001\");\n\t\tmap.put(\".\", \"010001\");\n\t\tmap.put(\"?\", \"000001\");\n\t\tmap.put(\"A\", \"100101\");\n\t\tmap.put(\"B\", \"10011010\");\n\t\tmap.put(\"C\", \"0101\");\n\t\tmap.put(\"D\", \"0001\");\n\t\tmap.put(\"E\", \"110\");\n\t\tmap.put(\"F\", \"01001\");\n\t\tmap.put(\"G\", \"10011011\");\n\t\tmap.put(\"H\", \"010000\");\n\t\tmap.put(\"I\", \"0111\");\n\t\tmap.put(\"J\", \"10011000\");\n\t\tmap.put(\"K\", \"0110\");\n\t\tmap.put(\"L\", \"00100\");\n\t\tmap.put(\"M\", \"10011001\");\n\t\tmap.put(\"N\", \"10011110\");\n\t\tmap.put(\"O\", \"00101\");\n\t\tmap.put(\"P\", \"111\");\n\t\tmap.put(\"Q\", \"10011111\");\n\t\tmap.put(\"R\", \"1000\");\n\t\tmap.put(\"S\", \"00110\");\n\t\tmap.put(\"T\", \"00111\");\n\t\tmap.put(\"U\", \"10011100\");\n\t\tmap.put(\"V\", \"10011101\");\n\t\tmap.put(\"W\", \"000010\");\n\t\tmap.put(\"X\", \"10010010\");\n\t\tmap.put(\"Y\", \"10010011\");\n\t\tmap.put(\"Z\", \"10010000\");\n\t\treturn map;\n\t}\n\tprivate Map<String, String> getDecriptMap() {\n\t\tMap<String, String> map = new HashMap<String, String>();\n\t\tmap.put(\"00000\", \"A\");\n\t\tmap.put(\"00001\", \"B\");\n\t\tmap.put(\"00010\", \"C\");\n\t\tmap.put(\"00011\", \"D\");\n\t\tmap.put(\"00100\", \"E\");\n\t\tmap.put(\"00101\", \"F\");\n\t\tmap.put(\"00110\", \"G\");\n\t\tmap.put(\"00111\", \"H\");\n\t\tmap.put(\"01000\", \"I\");\n\t\tmap.put(\"01001\", \"J\");\n\t\tmap.put(\"01010\", \"K\");\n\t\tmap.put(\"01011\", \"L\");\n\t\tmap.put(\"01100\", \"M\");\n\t\tmap.put(\"01101\", \"N\");\n\t\tmap.put(\"01110\", \"O\");\n\t\tmap.put(\"01111\", \"P\");\n\t\tmap.put(\"10000\", \"Q\");\n\t\tmap.put(\"10001\", \"R\");\n\t\tmap.put(\"10010\", \"S\");\n\t\tmap.put(\"10011\", \"T\");\n\t\tmap.put(\"10100\", \"U\");\n\t\tmap.put(\"10101\", \"V\");\n\t\tmap.put(\"10110\", \"W\");\n\t\tmap.put(\"10111\", \"X\");\n\t\tmap.put(\"11000\", \"Y\");\n\t\tmap.put(\"11001\", \"Z\");\n\t\tmap.put(\"11010\", \" \");\n\t\tmap.put(\"11011\", \".\");\n\t\tmap.put(\"11100\", \",\");\n\t\tmap.put(\"11101\", \"-\");\n\t\tmap.put(\"11110\", \"\");\n\t\tmap.put(\"11111\", \"?\");\n\t\treturn map;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\nimport java.util.Scanner;\npublic class Main {\n\n\tstatic final HashMap<Character, String> InMap = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");put('\\'', \"000000\");put(',', \"000011\");\n\t\t\tput('-', \"10010001\"); put('.', \"010001\"); put('?', \"000001\");\n\t\t\tput('A', \"100101\"); put('B', \"10011010\");put('C', \"0101\");\n\t\t\tput('D', \"0001\");put('E', \"110\"); put('F', \"01001\");\n\t\t\tput('G', \"10011011\");put('H', \"010000\"); put('I', \"0111\");\n\t\t\tput('J', \"10011000\"); put('K', \"0110\");put('L', \"00100\");\n\t\t\tput('M', \"10011001\"); put('N', \"10011110\");put('O', \"00101\");\n\t\t\tput('P', \"111\"); put('Q', \"10011111\");put('R', \"1000\");\n\t\t\tput('S', \"00110\"); put('T', \"00111\"); put('U', \"10011100\");\n\t\t\tput('V', \"10011101\");put('W', \"000010\");put('X', \"10010010\");\n\t\t\tput('Y', \"10010011\"); put('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> OutMap = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"00000\", 'A'); put(\"00001\", 'B'); put(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D'); put(\"00100\", 'E'); put(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G'); put(\"00111\", 'H'); put(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J'); put(\"01010\", 'K'); put(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M'); put(\"01101\", 'N'); put(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P'); put(\"10000\", 'Q'); put(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S'); put(\"10011\", 'T'); put(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V'); put(\"10110\", 'W'); put(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y'); put(\"11001\", 'Z'); put(\"11010\", ' ');\n\t\t\tput(\"11011\", '.'); put(\"11100\", ','); put(\"11101\", '-');\n\t\t\tput(\"11110\", '\\'');put(\"11111\", '?');\n\t\t}\n\t};\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tString temp = sc.nextLine(),\n\t\t\t\t\tstr = \"\",\n\t\t\t\t\tans = \"\";\n\t\t\tchar character[] = temp.toCharArray();\n\t\t\tfor(int i = 0; i < character.length; i++){\n\t\t\t\tstr += InMap.get(character[i]);\n\t\t\t}\n\t\t\tstr += \"00000\";\n\t\t\t//System.out.println(str);\n\t\t\tfor(int i = 0; i < str.length() - 1; i += 5 ){\n\t\t\t\tans += OutMap.get(str.substring(i,i + 5));\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Main {\n\n    public static void main(String[] args) throws IOException {\n        doit(args, System.in, System.out);\n    }\n\n    static void doit(String[] args, InputStream in, PrintStream out)\n            throws IOException {\n        initMaps();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n            if (line.isEmpty()) {\n                continue;\n            }\n            String enc = encode(line);\n            String result = decode(enc);\n            out.println(result);\n        }\n    }\n\n    private static String encode(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n            String code = encodeMap.get(ch);\n            sb.append(code);\n        }\n        int r = sb.length() % 5;\n        if (r != 0) {\n            int pad = 5 - r;\n            for (int i = 0; i < pad; i++) {\n                sb.append(\"0\");\n\n            }\n        }\n        return sb.toString();\n    }\n\n    private static String decode(String enc) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < enc.length(); i += 5) {\n            String code = enc.substring(i, i + 5);\n            char ch = decodeMap.get(code);\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n\n    private static Map<Character, String> encodeMap = new HashMap<Character, String>();\n\n    private static Map<String, Character> decodeMap = new HashMap<String, Character>();\n\n    private static void initMaps() {\n        encodeMap.put(' ', \"101\");\n        encodeMap.put('\\'', \"000000\");\n        encodeMap.put(',', \"000011\");\n        encodeMap.put('-', \"10010001\");\n        encodeMap.put('.', \"010001\");\n        encodeMap.put('?', \"000001\");\n        encodeMap.put('A', \"100101\");\n        encodeMap.put('B', \"10011010\");\n        encodeMap.put('C', \"0101\");\n        encodeMap.put('D', \"0001\");\n        encodeMap.put('E', \"110\");\n        encodeMap.put('F', \"01001\");\n        encodeMap.put('G', \"10011011\");\n        encodeMap.put('H', \"010000\");\n        encodeMap.put('I', \"0111\");\n        encodeMap.put('J', \"10011000\");\n        encodeMap.put('K', \"0110\");\n        encodeMap.put('L', \"00100\");\n        encodeMap.put('M', \"10011001\");\n        encodeMap.put('N', \"10011110\");\n        encodeMap.put('O', \"00101\");\n        encodeMap.put('P', \"111\");\n        encodeMap.put('Q', \"10011111\");\n        encodeMap.put('R', \"1000\");\n        encodeMap.put('S', \"00110\");\n        encodeMap.put('T', \"00111\");\n        encodeMap.put('U', \"10011100\");\n        encodeMap.put('V', \"10011101\");\n        encodeMap.put('W', \"000010\");\n        encodeMap.put('X', \"10010010\");\n        encodeMap.put('Y', \"10010011\");\n        encodeMap.put('Z', \"10010000\");\n\n        decodeMap.put(\"00000\", 'A');\n        decodeMap.put(\"00001\", 'B');\n        decodeMap.put(\"00010\", 'C');\n        decodeMap.put(\"00011\", 'D');\n        decodeMap.put(\"00100\", 'E');\n        decodeMap.put(\"00101\", 'F');\n        decodeMap.put(\"00110\", 'G');\n        decodeMap.put(\"00111\", 'H');\n        decodeMap.put(\"01000\", 'I');\n        decodeMap.put(\"01001\", 'J');\n        decodeMap.put(\"01010\", 'K');\n        decodeMap.put(\"01011\", 'L');\n        decodeMap.put(\"01100\", 'M');\n        decodeMap.put(\"01101\", 'N');\n        decodeMap.put(\"01110\", 'O');\n        decodeMap.put(\"01111\", 'P');\n        decodeMap.put(\"10000\", 'Q');\n        decodeMap.put(\"10001\", 'R');\n        decodeMap.put(\"10010\", 'S');\n        decodeMap.put(\"10011\", 'T');\n        decodeMap.put(\"10100\", 'U');\n        decodeMap.put(\"10101\", 'V');\n        decodeMap.put(\"10110\", 'W');\n        decodeMap.put(\"10111\", 'X');\n        decodeMap.put(\"11000\", 'Y');\n        decodeMap.put(\"11001\", 'Z');\n        decodeMap.put(\"11010\", ' ');\n        decodeMap.put(\"11011\", '.');\n        decodeMap.put(\"11100\", ',');\n        decodeMap.put(\"11101\", '-');\n        decodeMap.put(\"11110\", '\\'');\n        decodeMap.put(\"11111\", '?');\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String[] l = \"11010: :11011:.:11100:,:11101:-:11110:':11111:?:00000:A:00001:B:00010:C:00011:D:00100:E:00101:F:00110:G:00111:H:01000:I:01001:J:01010:K:01011:L:01100:M:01101:N:01110:O:01111:P:10000:Q:10001:R:10010:S:10011:T:10100:U:10101:V:10110:W:10111:X:11000:Y:11001:Z\".split(\":\");\n        String[] l2 = \"101:010001:000011:10010001:000000:000001:100101:10011010:0101:0001:110:01001:10011011:010000:0111:10011000:0110:00100:10011001:10011110:00101:111:10011111:1000:00110:00111:10011100:10011101:000010:10010010:10010011:10010000\".split(\":\");\n        String[] n2 = new String[l2.length];\n        String[] n = new String[l.length / 2];\n        char[] c = new char[l.length / 2];\n        for (int i = 0; i < l.length / 2; i++) {\n            n[i] = l[i * 2];\n            n2[i] = l2[i];\n            c[i] = l[i * 2 + 1].charAt(0);\n        }\n        while (sc.hasNext()) {\n            String t = sc.nextLine();\n            String a = \"\";\n            for (char cc : t.toCharArray()) {\n                for (int i = 0; i < c.length; i++) {\n                    if (cc == c[i]) {\n                        a += n[i];\n                    }\n                }\n            }\n            int start = 0;\n            String r = \"\";\n            boolean f=true;\n            while (f) {\n                for (int i = 0; i < l2.length; i++) {\n                    if(start + l2[i].length()>a.length()) {\n                        continue;\n                    }\n                    if (a.substring(start, start + l2[i].length()).equals(l2[i])) {\n                        r += c[i];\n                        start += l2[i].length();\n                        f=false;\n                        break;\n                    }\n                }\n                if(f) {\n                    break;\n                }else {\n                    f=true;\n                }\n            }\n            System.out.println(r);\n        }\n    }\n}\n\n\n"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tString[] c = new String[]{\n\t\t\t\t\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\n\t\t\t\t\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\t\t\t\t\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\n\t\t\t\t\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\n\t\t\t\t\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"\n\t\t};\n\t\t\n\t\t\n\t\twhile(sc.hasNext()){\n\t\t\tStringBuffer sb = new StringBuffer();\n\t\t\tStringBuffer ans = new StringBuffer();\n\t\t\tString s = sc.nextLine();\n\t\t\t\n\t\t\tint p, q;\n\t\t\tfor(int i=0;i<s.length();i++){\n\t\t\t\tp = s.codePointAt(i);\n\t\t\t\tif(p>=65 && p<=90) sb.append(c[p-65]);\n\t\t\t\telse if(p==32) sb.append(\"101\");\n\t\t\t\telse if(p==39) sb.append(\"000000\");\n\t\t\t\telse if(p==44) sb.append(\"000011\");\n\t\t\t\telse if(p==45) sb.append(\"10010001\");\n\t\t\t\telse if(p==46) sb.append(\"010001\");\n\t\t\t\telse if(p==63) sb.append(\"000001\");\n\t\t\t}\n\t\t\t\n\t\t\tp = sb.length()%5;\n\t\t\tif(p!=0){\n\t\t\t\tfor(int i=0;i<5-p;i++) sb.append(\"0\");\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i=0;i<sb.length();i+=5){\n\t\t\t\tp = 0;\n\t\t\t\tq = 16;\n\t\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\t\tp += (sb.codePointAt(i+j)-48)*q;\n\t\t\t\t\tq /= 2;\n\t\t\t\t}\n\t\t\t\tif(p<=25) ans.append((char)(p+65));\n\t\t\t\telse if(p==26) ans.append(\" \");\n\t\t\t\telse if(p==27) ans.append(\".\");\n\t\t\t\telse if(p==28) ans.append(\",\");\n\t\t\t\telse if(p==29) ans.append(\"-\");\n\t\t\t\telse if(p==30) ans.append(\"'\");\n\t\t\t\telse if(p==31) ans.append(\"?\");\n\t\t\t}\n\t\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;class Main{public static void main(String[]z){String t=new Scanner(System.in).nextLine();z=\" :101:':000000:,:000011:-:10010001:\\\\.:010001:\\\\?:000001:A:100101:B:10011010:C:0101:D:0001:E:110:F:01001:G:10011011:H:010000:I:0111:J:10011000:K:0110:L:00100:M:10011001:N:10011110:O:00101:P:111:Q:10011111:R:1000:S:00110:T:00111:U:10011100:V:10011101:W:000010:X:10010010:Y:10010011:Z:10010000\".split(\":\");int i,j;for(i=0;i<z.length;)t=t.replaceAll(z[i++],z[i++]);t+=\"00000\";for(i=0;i+5<t.length();System.out.print((char)j)){j=Integer.parseInt(t.substring(i,i+=5),2)+65;if(j>91)j=new int[]{32,46,44,45,39,63}[j-91];}System.out.println();}}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner scan = new Scanner(System.in);\n\t\tString str = \"\";\n\t\twhile(scan.hasNext()){\n\t\t\tstr += scan.nextLine();\n\t\t\tif(scan.hasNext()){\n\t\t\t\tstr += \" \";\n\t\t\t}\n\t\t}\n\t\tchar[] ch = str.toCharArray();\n\t\tString newstr = \"\";\n\t\tfor(int i = 0;i < ch.length;i++){\n\t\t\tswitch(ch[i]){\n\t\t\t\tcase ' ': newstr += \"101\";\tbreak;//\n\t\t\t\tcase '\\'': newstr += \"000000\";\tbreak;//\n\t\t\t\tcase ',': newstr += \"000011\"; break;//\n\t\t\t\tcase '-': newstr += \"10010001\"; break;//\n\t\t\t\tcase '.': newstr += \"010001\"; break;//\n\t\t\t\tcase '?': newstr += \"000001\"; break;//\n\t\t\t\tcase 'A': newstr += \"100101\"; break;//\n\t\t\t\tcase 'B': newstr += \"10011010\"; break;//\n\t\t\t\tcase 'C': newstr += \"0101\"; break;//\n\t\t\t\tcase 'D': newstr += \"0001\"; break;//\n\t\t\t\tcase 'E': newstr += \"110\"; break;//\n\t\t\t\tcase 'F': newstr += \"01001\"; break;//\n\t\t\t\tcase 'G': newstr += \"10011011\"; break;//\n\t\t\t\tcase 'H': newstr += \"010000\"; break;//\n\t\t\t\tcase 'I': newstr += \"0111\"; break;//\n\t\t\t\tcase 'J': newstr += \"10011000\"; break;//\n\t\t\t\tcase 'K': newstr += \"0110\"; break;//\n\t\t\t\tcase 'L': newstr += \"00100\"; break;//\n\t\t\t\tcase 'M': newstr += \"10011001\"; break;//\n\t\t\t\tcase 'N': newstr += \"10011110\"; break;//\n\t\t\t\tcase 'O': newstr += \"00101\"; break;//\n\t\t\t\tcase 'P': newstr += \"111\"; break;//\n\t\t\t\tcase 'Q': newstr += \"10011111\"; break;//\n\t\t\t\tcase 'R': newstr += \"1000\"; break;//\n\t\t\t\tcase 'S': newstr += \"00110\"; break;//\n\t\t\t\tcase 'T': newstr += \"00111\"; break;//\n\t\t\t\tcase 'U': newstr += \"10011100\"; break;//\n\t\t\t\tcase 'V': newstr += \"10011101\"; break;//\n\t\t\t\tcase 'W': newstr += \"000010\"; break;//\n\t\t\t\tcase 'X': newstr += \"10010010\"; break;//\n\t\t\t\tcase 'Y': newstr += \"10010011\"; break;//\n\t\t\t\tcase 'Z': newstr += \"10010000\"; break;//\n\t\t\t}\n\t\t}\n\t\twhile(newstr.length() % 5 != 0){\n\t\t\tnewstr += \"0\";\n\t\t}\n\t\t//System.out.println(newstr);\n\t\tstr = \"\";\n\t\tfor(int i = 0;i < newstr.length();i += 5){\n\t\t\tif(newstr.substring(i,i+5).equals(\"00000\")){\n\t\t\t\tstr += \"A\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"00001\")){\n\t\t\t\tstr += \"B\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"00010\")){\n\t\t\t\tstr += \"C\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"00011\")){\n\t\t\t\tstr += \"D\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"00100\")){\n\t\t\t\tstr += \"E\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"00101\")){\n\t\t\t\tstr += \"F\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"00110\")){\n\t\t\t\tstr += \"G\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"00111\")){\n\t\t\t\tstr += \"H\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"01000\")){\n\t\t\t\tstr += \"I\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"01001\")){\n\t\t\t\tstr += \"J\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"01010\")){\n\t\t\t\tstr += \"K\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"01011\")){\n\t\t\t\tstr += \"L\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"01100\")){\n\t\t\t\tstr += \"M\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"01101\")){\n\t\t\t\tstr += \"N\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"01110\")){\n\t\t\t\tstr += \"O\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"01111\")){\n\t\t\t\tstr += \"P\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"10000\")){\n\t\t\t\tstr += \"Q\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"10001\")){\n\t\t\t\tstr += \"R\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"10010\")){\n\t\t\t\tstr += \"S\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"10011\")){\n\t\t\t\tstr += \"T\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"10100\")){\n\t\t\t\tstr += \"U\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"10101\")){\n\t\t\t\tstr += \"V\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"10110\")){\n\t\t\t\tstr += \"W\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"10111\")){\n\t\t\t\tstr += \"X\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"11000\")){\n\t\t\t\tstr += \"Y\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"11001\")){\n\t\t\t\tstr += \"Z\";\t\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"11010\")){\n\t\t\t\tstr += \" \";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"11011\")){\n\t\t\t\tstr += \".\";\t\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"11100\")){\n\t\t\t\tstr += \",\";\t\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"11101\")){\n\t\t\t\tstr += \"-\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"11110\")){\n\t\t\t\tstr += \"'\";\n\t\t\t}else if(newstr.substring(i,i+5).equals(\"11111\")){\n\t\t\t\tstr += \"?\";\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(str);\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Stack;\n \n\npublic class Main{\n          \n    static int nowLoca=1;\n     \n     public static void main(String args[]){\n         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n         \n         try{ String line;\n             while((line=br.readLine())!=null){if(line.isEmpty())break;\n               char[] chrs = line.toCharArray(); String bits=\"\";\n               for(char c:chrs){bits+=code(c);}\n               int len=bits.length(); \n               if(len%5!=0){for(int i=1;i<=5-(len%5);i++){bits+=\"0\";}}\n               String res=\"\";\n               for(int i=0;i<bits.length()/5;i++){\n                   String substr= bits.substring(0*i,0*i+4);\n                   res+=code2(substr);\n               }\n                 System.out.println(res);\n             } br.close();\n            \n         }catch(Exception e){e.printStackTrace();}         \n     }  \n     static String code2(String bits){\n         if(bits.equals(\"00000\")) return \"A\"; else if(bits.equals(\"00001\"))return \"B\"; \n         else if(bits.equals(\"00010\")) return \"C\"; else if(bits.equals(\"00011\"))return \"D\"; \n         else if(bits.equals(\"00100\")) return \"E\"; else if(bits.equals(\"00101\"))return \"F\"; \n         else if(bits.equals(\"00110\")) return \"G\"; else if(bits.equals(\"00111\"))return \"H\"; \n         else if(bits.equals(\"01000\")) return \"I\"; else if(bits.equals(\"01001\"))return \"J\"; \n         else if(bits.equals(\"01010\")) return \"K\"; else if(bits.equals(\"01011\"))return \"L\"; \n         else if(bits.equals(\"01100\")) return \"M\"; else if(bits.equals(\"01101\"))return \"N\"; \n         else if(bits.equals(\"01110\")) return \"O\"; else if(bits.equals(\"01111\"))return \"P\"; \n         else if(bits.equals(\"10000\")) return \"Q\"; else if(bits.equals(\"10001\"))return \"R\"; \n         else if(bits.equals(\"10010\")) return \"S\"; else if(bits.equals(\"10011\"))return \"T\"; \n         else if(bits.equals(\"10100\")) return \"U\"; else if(bits.equals(\"10101\"))return \"V\"; \n         else if(bits.equals(\"10110\")) return \"W\"; else if(bits.equals(\"10111\"))return \"X\"; \n         else if(bits.equals(\"11000\")) return \"Y\"; else if(bits.equals(\"11001\"))return \"Z\"; \n         else if(bits.equals(\"11010\")) return \" \"; else if(bits.equals(\"11011\"))return \".\"; \n         else if(bits.equals(\"11100\")) return \",\"; else if(bits.equals(\"11101\"))return \"-\"; \n         else if(bits.equals(\"11110\")) return \"\\'\"; else if(bits.equals(\"11111\"))return \"?\"; \n         else return \"_INV_\";\n     }\n    static String code(char c){\n        switch(c){\n            case ' ': return \"101\"; case '\\'': return \"000000\";\n            case ',': return \"000011\";  case '-': return \"10010001\";\n            case '.': return \"010001\";    case '?': return \"000001\";\n            case 'A': return \"100101\";          case 'B': return \"10011010\";\n            case 'C': return \"0101\";            case 'D': return \"0001\";\n            case 'E': return \"110\";            case 'F': return \"01001\";\n            case 'G': return \"10011011\";            case 'H': return \"010000\";\n            case 'I': return \"0111\";            case 'J': return \"10011000\";\n            case 'K': return \"0110\";            case 'L': return \"00100\";\n            case 'M': return \"10011001\";            case 'N': return \"10011110\";\n            case 'O': return \"00101\";            case 'P': return \"111\";\n            case 'Q': return \"10011111\";            case 'R': return \"1000\";\n            case 'S': return \"00110\";            case 'T': return \"00111\";\n            case 'U': return \"10011100\";            case 'V': return \"10011101\";\n            case 'W': return \"000010\";            case 'X': return \"10010010\";\n            case 'Y': return \"10010011\";            case 'Z': return \"10010000\";\n        }return \"Err\";\n    }\n     \n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\n\npublic class Main \n{\n\tpublic static void main(String[] args)\n\t{\n\t\tString input = new Scanner(System.in).nextLine();\n\t\t\n\t\tString sign = \"\";\n\t\tfor(int i=0; i<input.length(); i++)\n\t\t{\n\t\t\tsign += toSign(input.substring(i, i+1));\n\t\t}\n\t\tif(sign.length()%5 != 0)\n\t\t{\n\t\t\tint s = sign.length()%5;\n\t\t\tfor(int i=0; i<5-s; i++)\n\t\t\t{\n\t\t\t\tsign += \"0\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tString output = \"\";\n\t\tfor(int i=0; i<sign.length(); i+=5)\n\t\t{\n\t\t\toutput += toChar(sign.substring(i, i+5));\n\t\t}\n\t\t\n\t\tSystem.out.println(output);\n\t}\n\t\n\tstatic String toSign(String str)\n\t{\n\t\tswitch(str)\n\t\t{\n\t\t\tcase \" \":\n\t\t\t\treturn \"101\";\n\t\t\tcase \"'\":\n\t\t\t\treturn \"000000\";\n\t\t\tcase \",\":\n\t\t\t\treturn \"000011\";\n\t\t\tcase \"-\":\n\t\t\t\treturn \"10010001\";\n\t\t\tcase \".\":\n\t\t\t\treturn \"010001\";\n\t\t\tcase \"?\":\n\t\t\t\treturn \"000001\";\n\t\t\tcase \"A\":\n\t\t\t\treturn \"100101\";\n\t\t\tcase \"B\":\n\t\t\t\treturn \"10011010\";\n\t\t\tcase \"C\":\n\t\t\t\treturn \"0101\";\n\t\t\tcase \"D\":\n\t\t\t\treturn \"0001\";\n\t\t\tcase \"E\":\n\t\t\t\treturn \"110\";\n\t\t\tcase \"F\":\n\t\t\t\treturn \"01001\";\n\t\t\tcase \"G\":\n\t\t\t\treturn \"10011011\";\n\t\t\tcase \"H\":\n\t\t\t\treturn \"010000\";\n\t\t\tcase \"I\":\n\t\t\t\treturn \"0111\";\n\t\t\tcase \"J\":\n\t\t\t\treturn \"10011000\";\n\t\t\tcase \"K\":\n\t\t\t\treturn \"01100\";\n\t\t\tcase \"L\":\n\t\t\t\treturn \"001100\";\n\t\t\tcase \"M\":\n\t\t\t\treturn \"10011001\";\n\t\t\tcase \"N\":\n\t\t\t\treturn \"10011110\";\n\t\t\tcase \"O\":\n\t\t\t\treturn \"00101\";\n\t\t\tcase \"P\":\n\t\t\t\treturn \"111\";\n\t\t\tcase \"Q\":\n\t\t\t\treturn \"10011111\";\n\t\t\tcase \"R\":\n\t\t\t\treturn \"1000\";\n\t\t\tcase \"S\":\n\t\t\t\treturn \"00110\";\n\t\t\tcase \"T\":\n\t\t\t\treturn \"00111\";\n\t\t\tcase \"U\":\n\t\t\t\treturn \"10011100\";\n\t\t\tcase \"V\":\n\t\t\t\treturn \"10011101\";\n\t\t\tcase \"W\":\n\t\t\t\treturn \"000010\";\n\t\t\tcase \"X\":\n\t\t\t\treturn \"10010010\";\n\t\t\tcase \"Y\":\n\t\t\t\treturn \"10010011\";\n\t\t\tcase \"Z\":\n\t\t\t\treturn \"10010000\";\n\t\t}\n\t\treturn \"\";\n\t}\n\t\n\tstatic String toChar(String str)\n\t{\n\t\tint n = 0;\n\t\tfor(int i=0; i<str.length(); i++)\n\t\t{\n\t\t\tn += str.substring(str.length()-i-1, str.length()-i).equals(\"1\") ? Math.pow(2, i) : 0;\n\t\t}\n\t\tif(n < 26)\n\t\t{\n\t\t\treturn Character.toString((char)('A'+n));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tswitch (n)\n\t\t\t{\n\t\t\t\tcase 26:\n\t\t\t\t\treturn \" \";\n\t\t\t\tcase 27:\n\t\t\t\t\treturn \".\";\n\t\t\t\tcase 28:\n\t\t\t\t\treturn \",\";\n\t\t\t\tcase 29:\n\t\t\t\t\treturn \"-\";\n\t\t\t\tcase 30:\n\t\t\t\t\treturn \"'\";\n\t\t\t\tcase 31:\n\t\t\t\t\treturn \"?\";\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn \"\";\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tstatic final HashMap<Character, String> c1 = new HashMap<Character, String>(32) {\n\t\t{\n\t\t\tput(' ', \"101\");\n\t\t\tput('\\'', \"000000\");\n\t\t\tput(',', \"000011\");\n\t\t\tput('-', \"10010001\");\n\t\t\tput('.', \"010001\");\n\t\t\tput('?', \"000001\");\n\t\t\tput('A', \"100101\");\n\t\t\tput('B', \"10011010\");\n\t\t\tput('C', \"0101\");\n\t\t\tput('D', \"0001\");\n\t\t\tput('E', \"110\");\n\t\t\tput('F', \"01001\");\n\t\t\tput('G', \"10011011\");\n\t\t\tput('H', \"010000\");\n\t\t\tput('I', \"0111\");\n\t\t\tput('J', \"10011000\");\n\t\t\tput('K', \"0110\");\n\t\t\tput('L', \"00100\");\n\t\t\tput('M', \"10011001\");\n\t\t\tput('N', \"10011110\");\n\t\t\tput('O', \"00101\");\n\t\t\tput('P', \"111\");\n\t\t\tput('Q', \"10011111\");\n\t\t\tput('R', \"1000\");\n\t\t\tput('S', \"00110\");\n\t\t\tput('T', \"00111\");\n\t\t\tput('U', \"10011100\");\n\t\t\tput('V', \"10011101\");\n\t\t\tput('W', \"000010\");\n\t\t\tput('X', \"10010010\");\n\t\t\tput('Y', \"10010011\");\n\t\t\tput('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> c2 = new HashMap<String, Character>(32) {\n\t\t{\n\t\t\tput(\"00000\", 'A');\n\t\t\tput(\"00001\", 'B');\n\t\t\tput(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D');\n\t\t\tput(\"00100\", 'E');\n\t\t\tput(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G');\n\t\t\tput(\"00111\", 'H');\n\t\t\tput(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J');\n\t\t\tput(\"01010\", 'K');\n\t\t\tput(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M');\n\t\t\tput(\"01101\", 'N');\n\t\t\tput(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P');\n\t\t\tput(\"10000\", 'Q');\n\t\t\tput(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S');\n\t\t\tput(\"10011\", 'T');\n\t\t\tput(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V');\n\t\t\tput(\"10110\", 'W');\n\t\t\tput(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y');\n\t\t\tput(\"11001\", 'Z');\n\t\t\tput(\"11010\", ' ');\n\t\t\tput(\"11011\", '.');\n\t\t\tput(\"11100\", ',');\n\t\t\tput(\"11101\", '-');\n\t\t\tput(\"11110\", '\\'');\n\t\t\tput(\"11111\", '?');\n\t\t}\n\t};\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null) {\n\t\t\t//\n\t\t\tif (line.isEmpty()) {\n\t\t\t\tSystem.out.println(\"\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1.get(c));\n\t\t\t}\n\t\t\t//\n\t\t\tsb1.append(\"00000\");\n\t\t\t//\n\t\t\tString line2 = sb1.toString();\n\t\t\tfor (int i = 0; i < line2.length() - 5; i += 5) {\n\t\t\t\tsb2.append(c2.get(line2.substring(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println(sb2.toString());\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) throws java.io.IOException{\n        Scanner scan = new Scanner(System.in);\n        HashMap<Character,String> ep =new HashMap<Character,String>();\n        HashMap<String,Character> dp =new HashMap<String,Character>();\n\n\t\tep.put(' ', \"101\");\n\t\tep.put('\\'', \"000000\");\n\t\tep.put(',', \"000011\");\n\t\tep.put('-', \"10010001\");\n\t\tep.put('.', \"010001\");\n\t\tep.put('?', \"000001\");\n\t\tep.put('A', \"100101\");\n\t\tep.put('B', \"10011010\");\n\t\tep.put('C', \"0101\");\n\t\tep.put('D', \"0001\");\n\t\tep.put('E', \"110\");\n\t\tep.put('F', \"01001\");\n\t\tep.put('G', \"10011011\");\n\t\tep.put('H', \"010000\");\n\t\tep.put('I', \"0111\");\n\t\tep.put('J', \"10011000\");\n\t\tep.put('K', \"0110\");\n\t\tep.put('L', \"00100\");\n\t\tep.put('M', \"10011001\");\n\t\tep.put('N', \"10011110\");\n\t\tep.put('O', \"00101\");\n\t\tep.put('P', \"111\");\n\t\tep.put('Q', \"10011111\");\n\t\tep.put('R', \"1000\");\n\t\tep.put('S', \"00110\");\n\t\tep.put('T', \"00111\");\n\t\tep.put('U', \"10011100\");\n\t\tep.put('V', \"10011101\");\n\t\tep.put('W', \"000010\");\n\t\tep.put('X', \"10010010\");\n\t\tep.put('Y', \"10010011\");\n\t\tep.put('Z', \"10010000\");\n        \n\t\tdp.put(\"00000\", 'A');\n\t\tdp.put(\"00001\", 'B');\n\t\tdp.put(\"00010\", 'C');\n\t\tdp.put(\"00011\", 'D');\n\t\tdp.put(\"00100\", 'E');\n\t\tdp.put(\"00101\", 'F');\n\t\tdp.put(\"00110\", 'G');\n\t\tdp.put(\"00111\", 'H');\n\t\tdp.put(\"01000\", 'I');\n\t\tdp.put(\"01001\", 'J');\n\t\tdp.put(\"01010\", 'K');\n\t\tdp.put(\"01011\", 'L');\n\t\tdp.put(\"01100\", 'M');\n\t\tdp.put(\"01101\", 'N');\n\t\tdp.put(\"01110\", 'O');\n\t\tdp.put(\"01111\", 'P');\n\t\tdp.put(\"10000\", 'Q');\n\t\tdp.put(\"10001\", 'R');\n\t\tdp.put(\"10010\", 'S');\n\t\tdp.put(\"10011\", 'T');\n\t\tdp.put(\"10100\", 'U');\n\t\tdp.put(\"10101\", 'V');\n\t\tdp.put(\"10110\", 'W');\n\t\tdp.put(\"10111\", 'X');\n\t\tdp.put(\"11000\", 'Y');\n\t\tdp.put(\"11001\", 'Z');\n\t\tdp.put(\"11010\", ' ');\n\t\tdp.put(\"11011\", '.');\n\t\tdp.put(\"11100\", ',');\n\t\tdp.put(\"11101\", '-');\n\t\tdp.put(\"11110\", '\\'');\n\t\tdp.put(\"11111\", '?');\n        \n        while(scan.hasNext()){\n        \tchar [] line= scan.nextLine().toCharArray();\n        \tString tmp=\"\";\n        \tfor(int i=0;i<line.length;i++)\n        \t\ttmp+=ep.get(line[i]);\n        \tString [] splitedCode =new String[tmp.length()/5+1];\n        \tfor(int i=0;i<splitedCode.length;i++){\t\n        \t\tif(i==(splitedCode.length-1))\n        \t\t\tsplitedCode[i]=tmp.substring(5*i,tmp.length());\n        \t\telse splitedCode[i]=tmp.substring(5*i,5*i+5);\n        \t}\n        \t\tif(tmp.length()%5!=0)\n        \tfor(int i=0;i<(5-tmp.length()%5);i++)\n        \t\tsplitedCode[splitedCode.length-1]+=\"0\";\n        \t\n        \tStringBuilder sb = new StringBuilder();\n        \tfor(int i=0;i<splitedCode.length;i++)\n        \t\tsb.append(dp.get(splitedCode[i]));\n        \tSystem.out.println(sb);\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main{\n\tMain(){\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\twhile(sc.hasNext()){\n\t\t\tString str = sc.nextLine();\n\t\t\tString st = \"\";\n\t\t\t\n\t\t\tfor(int i=0, l=str.length(); i < l; i++){\n\t\t\t\tst += trans(str.substring(i, i+1));\n\t\t\t}\n\t\t\tif(st.length()%5 != 0){\n\t\t\t\tfor(int i=0, l=5-st.length()%5; i < l; i++){\n\t\t\t\t\tst += \"0\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0, l=st.length(); i < l; i+=5){\n\t\t\t\tSystem.out.print(conv(st.substring(i,i+5)));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n\tString trans(String str){\n\t\tif(str.equals(\" \")){\n\t\t\treturn \"101\";\n\t\t}\n\t\tif(str.equals(\"'\")){\n\t\t\treturn \"000000\";\n\t\t}\n\t\tif(str.equals(\",\")){\n\t\t\treturn \"000011\";\n\t\t}\n\t\tif(str.equals(\"-\")){\n\t\t\treturn \"10010001\";\n\t\t}\n\t\tif(str.equals(\".\")){\n\t\t\treturn \"010001\";\n\t\t}\n\t\tif(str.equals(\"?\")){\n\t\t\treturn \"000001\";\n\t\t}\n\t\tif(str.equals(\"A\")){\n\t\t\treturn \"100101\";\n\t\t}\n\t\tif(str.equals(\"B\")){\n\t\t\treturn \"10011010\";\n\t\t}\n\t\tif(str.equals(\"C\")){\n\t\t\treturn \"0101\";\n\t\t}\n\t\tif(str.equals(\"D\")){\n\t\t\treturn \"0001\";\n\t\t}\n\t\tif(str.equals(\"E\")){\n\t\t\treturn \"110\";\n\t\t}\n\t\tif(str.equals(\"F\")){\n\t\t\treturn \"01001\";\n\t\t}\n\t\tif(str.equals(\"G\")){\n\t\t\treturn \"10011011\";\n\t\t}\n\t\tif(str.equals(\"H\")){\n\t\t\treturn \"010000\";\n\t\t}\n\t\tif(str.equals(\"I\")){\n\t\t\treturn \"0111\";\n\t\t}\n\t\tif(str.equals(\"J\")){\n\t\t\treturn \"10011000\";\n\t\t}\n\t\tif(str.equals(\"K\")){\n\t\t\treturn \"0110\";\n\t\t}\n\t\tif(str.equals(\"L\")){\n\t\t\treturn \"00100\";\n\t\t}\n\t\tif(str.equals(\"M\")){\n\t\t\treturn \"10011001\";\n\t\t}\n\t\tif(str.equals(\"N\")){\n\t\t\treturn \"10011110\";\n\t\t}\n\t\tif(str.equals(\"O\")){\n\t\t\treturn \"00101\";\n\t\t}\n\t\tif(str.equals(\"P\")){\n\t\t\treturn \"111\";\n\t\t}\n\t\tif(str.equals(\"Q\")){\n\t\t\treturn \"10011111\";\n\t\t}\n\t\tif(str.equals(\"R\")){\n\t\t\treturn \"1000\";\n\t\t}\n\t\tif(str.equals(\"S\")){\n\t\t\treturn \"00110\";\n\t\t}\n\t\tif(str.equals(\"T\")){\n\t\t\treturn \"00111\";\n\t\t}\n\t\tif(str.equals(\"U\")){\n\t\t\treturn \"10011100\";\n\t\t}\n\t\tif(str.equals(\"V\")){\n\t\t\treturn \"10011101\";\n\t\t}\n\t\tif(str.equals(\"W\")){\n\t\t\treturn \"000010\";\n\t\t}\n\t\tif(str.equals(\"X\")){\n\t\t\treturn \"10010010\";\n\t\t}\n\t\tif(str.equals(\"Y\")){\n\t\t\treturn \"10010011\";\n\t\t}\n\t\treturn \"10010000\";\n\t}\n\t\n\tString conv(String str){\n\t\tif(str.equals(\"00000\")){\n\t\t\treturn \"A\";\n\t\t}\n\t\tif(str.equals(\"00001\")){\n\t\t\treturn \"B\";\n\t\t}\n\t\tif(str.equals(\"00010\")){\n\t\t\treturn \"C\";\n\t\t}\n\t\tif(str.equals(\"00011\")){\n\t\t\treturn \"D\";\n\t\t}\n\t\tif(str.equals(\"00100\")){\n\t\t\treturn \"E\";\n\t\t}\n\t\tif(str.equals(\"00101\")){\n\t\t\treturn \"F\";\n\t\t}\n\t\tif(str.equals(\"00110\")){\n\t\t\treturn \"G\";\n\t\t}\n\t\tif(str.equals(\"00111\")){\n\t\t\treturn \"H\";\n\t\t}\n\t\tif(str.equals(\"01000\")){\n\t\t\treturn \"I\";\n\t\t}\n\t\tif(str.equals(\"01001\")){\n\t\t\treturn \"J\";\n\t\t}\n\t\tif(str.equals(\"01010\")){\n\t\t\treturn \"K\";\n\t\t}\n\t\tif(str.equals(\"01011\")){\n\t\t\treturn \"L\";\n\t\t}\n\t\tif(str.equals(\"01100\")){\n\t\t\treturn \"M\";\n\t\t}\n\t\tif(str.equals(\"01101\")){\n\t\t\treturn \"N\";\n\t\t}\n\t\tif(str.equals(\"01110\")){\n\t\t\treturn \"O\";\n\t\t}\n\t\tif(str.equals(\"01111\")){\n\t\t\treturn \"P\";\n\t\t}\n\t\tif(str.equals(\"10000\")){\n\t\t\treturn \"Q\";\n\t\t}\n\t\tif(str.equals(\"10001\")){\n\t\t\treturn \"R\";\n\t\t}\n\t\tif(str.equals(\"10010\")){\n\t\t\treturn \"S\";\n\t\t}\n\t\tif(str.equals(\"10011\")){\n\t\t\treturn \"T\";\n\t\t}\n\t\tif(str.equals(\"10100\")){\n\t\t\treturn \"U\";\n\t\t}\n\t\tif(str.equals(\"10101\")){\n\t\t\treturn \"V\";\n\t\t}\n\t\tif(str.equals(\"10110\")){\n\t\t\treturn \"W\";\n\t\t}\n\t\tif(str.equals(\"10111\")){\n\t\t\treturn \"X\";\n\t\t}\n\t\tif(str.equals(\"11000\")){\n\t\t\treturn \"Y\";\n\t\t}\n\t\tif(str.equals(\"11001\")){\n\t\t\treturn \"Z\";\n\t\t}\n\t\tif(str.equals(\"11010\")){\n\t\t\treturn \" \";\n\t\t}\n\t\tif(str.equals(\"11011\")){\n\t\t\treturn \".\";\n\t\t}\n\t\tif(str.equals(\"11100\")){\n\t\t\treturn \",\";\n\t\t}\n\t\tif(str.equals(\"11101\")){\n\t\t\treturn \"-\";\n\t\t}\n\t\tif(str.equals(\"11110\")){\n\t\t\treturn \"'\";\n\t\t}\n\t\treturn \"?\";\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tnew Main();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n   Scanner in = new Scanner(System.in);\n\n   String[] a = {\n        \" \", \"101\", \"'\", \"000000\", \",\", \"000011\", \"-\", \"10010001\",\n        \".\", \"010001\", \"?\", \"000001\", \"A\", \"100101\", \"B\", \"10011010\",\n        \"C\", \"0101\", \"D\", \"0001\", \"E\", \"110\", \"F\", \"01001\", \"G\", \"10011011\",\n        \"H\", \"010000\", \"I\", \"0111\", \"J\", \"10011000\", \"K\", \"0110\",\n        \"L\", \"00100\", \"M\", \"10011001\", \"N\", \"10011110\", \"O\", \"00101\",\n        \"P\", \"111\", \"Q\", \"1001111\", \"R\", \"1000\", \"S\", \"00110\", \"T\", \"00111\",\n        \"U\", \"10011100\", \"V\", \"10011101\", \"W\", \"000010\", \"X\", \"10010010\",\n        \"Y\", \"10010011\", \"Z\", \"10010000\"};\n    \n    char[] b = {\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n        'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n        'Y', 'Z', ' ', '.', ',', '-', '\\'', '?' \n    };\n   void solve(){\n       HashMap<Character, String> map = new HashMap<>();\n       for(int i = 0; i < a.length; i += 2){\n           map.put(a[i].charAt(0), a[i + 1]);\n       }\n       String s;\n       while(in.hasNextLine()){\n           s = in.nextLine();\n           StringBuilder sb = new StringBuilder();\n           for(char ch: s.toCharArray()){\n               sb.append(map.get(new Character(ch)));\n           }\n           int x = 5 - sb.length()%5;\n           for(int i = 0; i < x; i++){\n               sb.append('0');\n           }\n           StringBuilder ans = new StringBuilder();\n           String tmp = sb.toString();\n           for(int i = 0; i < tmp.length(); i += 5){\n                int idx = 0;\n                String num = tmp.substring(i, i + 5);\n                for(int j = 0; j < 5; j++){\n                    idx *= 2;\n                    idx += num.charAt(j) == '1' ? 1 : 0;\n                }\n                ans.append(b[idx]);\n           }\n           System.out.println(ans.toString());\n       }\n   }\n\n   public static void main(String[] args){\n       new Main().solve();    \n   }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO ?????????????????????????????????????????????\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\twhile(true){\n\t\t\tString input = br.readLine();\n\n\t\t\tif(input == null){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tTranslator tr = new Translator();\n\t\t\tSolver sv = new Solver();\n\n\t\t\tSystem.out.println(sv.generateString(tr.genelrateBits(input)));\n\t\t}\n\t}\n\n}\n\nclass Translator {\n\tprivate String[] code = new String[256];\n\n\tpublic Translator(){\n\t\tcode[' '] = \"101\";\n\t\tcode['\\''] = \"000000\";\n\t\tcode[','] = \"000011\";\n\t\tcode['-'] = \"10010001\";\n\t\tcode['.'] = \"010001\";\n\t\tcode['?'] = \"000001\";\n\t\tcode['A'] = \"100101\";\n\t\tcode['B'] = \"10011010\";\n\t\tcode['C'] = \"0101\";\n\t\tcode['D'] = \"0001\";\n\t\tcode['E'] = \"110\";\n\t\tcode['F'] = \"01001\";\n\t\tcode['G'] = \"10011011\";\n\t\tcode['H'] = \"010000\";\n\t\tcode['I'] = \"0111\";\n\t\tcode['J'] = \"10011000\";\n\t\tcode['K'] = \"0110\";\n\t\tcode['L'] = \"00100\";\n\t\tcode['M'] = \"10011001\";\n\t\tcode['N'] = \"10011110\";\n\t\tcode['O'] = \"00101\";\n\t\tcode['P'] = \"111\";\n\t\tcode['Q'] = \"10011111\";\n\t\tcode['R'] = \"1000\";\n\t\tcode['S'] = \"00110\";\n\t\tcode['T'] = \"00111\";\n\t\tcode['U'] = \"10011100\";\n\t\tcode['V'] = \"10011101\";\n\t\tcode['W'] = \"000010\";\n\t\tcode['X'] = \"10010010\";\n\t\tcode['Y'] = \"10010011\";\n\t\tcode['Z'] = \"10010000\";\n\t\t\n\t}\n\t\n\tpublic String genelrateBits(String input){\n\t\tStringBuffer sb = new StringBuffer();\n\t\tfor(int i = 0; i < input.length(); i++){\n\t\t\tsb.append(code[input.charAt(i)]);\n\t\t}\n\t\t//0??????\n\t\twhile(sb.length()%5 != 0){\n\t\t\tsb.append(\"0\");\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n\nclass Solver{\n\tHashMap<String, String> map = new HashMap<String, String>();\n\t\n\tpublic Solver(){\n\t\tmap.put(\"00000\", \"A\");\n\t\tmap.put(\"00001\", \"B\");\n\t\tmap.put(\"00010\", \"C\");\n\t\tmap.put(\"00011\", \"D\");\n\t\tmap.put(\"00100\", \"E\");\n\t\tmap.put(\"00101\", \"F\");\n\t\tmap.put(\"00110\", \"G\");\n\t\tmap.put(\"00111\", \"H\");\n\t\tmap.put(\"01000\", \"I\");\n\t\tmap.put(\"01001\", \"J\");\n\t\tmap.put(\"01010\", \"K\");\n\t\tmap.put(\"01011\", \"L\");\n\t\tmap.put(\"01100\", \"M\");\n\t\tmap.put(\"01101\", \"N\");\n\t\tmap.put(\"01110\", \"O\");\n\t\tmap.put(\"01111\", \"P\");\n\t\tmap.put(\"10000\", \"Q\");\n\t\tmap.put(\"10001\", \"R\");\n\t\tmap.put(\"10010\", \"S\");\n\t\tmap.put(\"10011\", \"T\");\n\t\tmap.put(\"10100\", \"U\");\n\t\tmap.put(\"10101\", \"V\");\n\t\tmap.put(\"10110\", \"W\");\n\t\tmap.put(\"10111\", \"X\");\n\t\tmap.put(\"11000\", \"Y\");\n\t\tmap.put(\"11001\", \"Z\");\n\t\tmap.put(\"11010\", \" \");\n\t\tmap.put(\"11011\", \".\");\n\t\tmap.put(\"11100\", \",\");\n\t\tmap.put(\"11101\", \"-\");\n\t\tmap.put(\"11110\", \"'\");\n\t\tmap.put(\"11111\", \"?\");\n\t}\n\t\n\tpublic String generateString(String bits){\n\t\tint n = bits.length()/5;\n\t\t\n\t\tStringBuffer sb = new StringBuffer();\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tsb.append(map.get(bits.substring(i*5, i*5+5)));\n\t\t}\n\t\t\n\t\treturn sb.toString();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.util.HashMap;\nclass Main\n{\n\tpublic static void main(String args[])\n\t{\n\t\tHashMap<Character, String> codeMap = new HashMap<Character, String>();\n\t\tcodeMap.put(' ', \"101\");\n\t\tcodeMap.put('\\'', \"000000\");\n\t\tcodeMap.put(',', \"000011\");\n\t\tcodeMap.put('-', \"10010001\");\n\t\tcodeMap.put('.', \"010001\");\n\t\tcodeMap.put('?', \"000001\");\n\t\tcodeMap.put('A', \"100101\");\n\t\tcodeMap.put('B', \"10011010\");\n\t\tcodeMap.put('C', \"0101\");\n\t\tcodeMap.put('D', \"0001\");\n\t\tcodeMap.put('E', \"110\");\n\t\tcodeMap.put('F', \"01001\");\n\t\tcodeMap.put('G', \"10011011\");\n\t\tcodeMap.put('H', \"010000\");\n\t\tcodeMap.put('I', \"0111\");\n\t\tcodeMap.put('J', \"10011000\");\n\t\tcodeMap.put('K', \"0110\");\n\t\tcodeMap.put('L', \"00100\");\n\t\tcodeMap.put('M', \"10011001\");\n\t\tcodeMap.put('N', \"10011110\");\n\t\tcodeMap.put('O', \"00101\");\n\t\tcodeMap.put('P', \"111\");\n\t\tcodeMap.put('Q', \"10011111\");\n\t\tcodeMap.put('R', \"1000\");\n\t\tcodeMap.put('S', \"00110\");\n\t\tcodeMap.put('T', \"00111\");\n\t\tcodeMap.put('U', \"10011100\");\n\t\tcodeMap.put('V', \"10011101\");\n\t\tcodeMap.put('W', \"000010\");\n\t\tcodeMap.put('X', \"10010010\");\n\t\tcodeMap.put('Y', \"10010011\");\n\t\tcodeMap.put('Z', \"10010000\");\n\t\tHashMap<String, Character> charMap = new HashMap<String, Character>();\n\t\tcharMap.put(\"00000\", 'A');\n\t\tcharMap.put(\"00001\", 'B');\n\t\tcharMap.put(\"00010\", 'C');\n\t\tcharMap.put(\"00011\", 'D');\n\t\tcharMap.put(\"00100\", 'E');\n\t\tcharMap.put(\"00101\", 'F');\n\t\tcharMap.put(\"00110\", 'G');\n\t\tcharMap.put(\"00111\", 'H');\n\t\tcharMap.put(\"01000\", 'I');\n\t\tcharMap.put(\"01001\", 'J');\n\t\tcharMap.put(\"01010\", 'K');\n\t\tcharMap.put(\"01011\", 'L');\n\t\tcharMap.put(\"01100\", 'M');\n\t\tcharMap.put(\"01101\", 'N');\n\t\tcharMap.put(\"01110\", 'O');\n\t\tcharMap.put(\"01111\", 'P');\n\t\tcharMap.put(\"10000\", 'Q');\n\t\tcharMap.put(\"10001\", 'R');\n\t\tcharMap.put(\"10010\", 'S');\n\t\tcharMap.put(\"10011\", 'T');\n\t\tcharMap.put(\"10100\", 'U');\n\t\tcharMap.put(\"10101\", 'V');\n\t\tcharMap.put(\"10110\", 'W');\n\t\tcharMap.put(\"10111\", 'X');\n\t\tcharMap.put(\"11000\", 'Y');\n\t\tcharMap.put(\"11001\", 'Z');\n\t\tcharMap.put(\"11010\", ' ');\n\t\tcharMap.put(\"11011\", '.');\n\t\tcharMap.put(\"11100\", ',');\n\t\tcharMap.put(\"11101\", '-');\n\t\tcharMap.put(\"11110\", '\\'');\n\t\tcharMap.put(\"11111\", '?');\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile (sc.hasNext())\n\t\t{\n\t\t\tString str = sc.nextLine();\n\t\t\tint length = str.length();\n\t\t\tStringBuffer codeBuf = new StringBuffer();\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tcodeBuf.append(codeMap.get(str.charAt(i)));\n\t\t\t}\n\t\t\twhile (codeBuf.length() % 5 != 0)\n\t\t\t{\n\t\t\t\tcodeBuf.append('0');\n\t\t\t}\n\t\t\tlength = codeBuf.length();\n\t\t\tfor (int i = 0; i < length; i += 5)\n\t\t\t{\n\t\t\t\tSystem.out.print(charMap.get(codeBuf.substring(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\n\npublic class Main \n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scanner = new Scanner(System.in);\n\t\t\n\t\tfor(; scanner.hasNext();)\n\t\t{\t\t\n\t\t\tString input = scanner.nextLine();\n\t\t\t\n\t\t\tString sign = \"\";\n\t\t\tfor(int i=0; i<input.length(); i++)\n\t\t\t{\n\t\t\t\tsign += toSign(input.substring(i, i+1));\n\t\t\t}\n\t\t\tif(sign.length()%5 != 0)\n\t\t\t{\n\t\t\t\tint s = sign.length()%5;\n\t\t\t\tfor(int i=0; i<5-s; i++)\n\t\t\t\t{\n\t\t\t\t\tsign += \"0\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tString output = \"\";\n\t\t\tfor(int i=0; i<sign.length(); i+=5)\n\t\t\t{\n\t\t\t\toutput += toChar(sign.substring(i, i+5));\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(output);\n\t\t}\n\t}\n\t\n\tstatic String toSign(String str)\n\t{\n\t\tswitch(str)\n\t\t{\n\t\t\tcase \" \":\n\t\t\t\treturn \"101\";\n\t\t\tcase \"'\":\n\t\t\t\treturn \"000000\";\n\t\t\tcase \",\":\n\t\t\t\treturn \"000011\";\n\t\t\tcase \"-\":\n\t\t\t\treturn \"10010001\";\n\t\t\tcase \".\":\n\t\t\t\treturn \"010001\";\n\t\t\tcase \"?\":\n\t\t\t\treturn \"000001\";\n\t\t\tcase \"A\":\n\t\t\t\treturn \"100101\";\n\t\t\tcase \"B\":\n\t\t\t\treturn \"10011010\";\n\t\t\tcase \"C\":\n\t\t\t\treturn \"0101\";\n\t\t\tcase \"D\":\n\t\t\t\treturn \"0001\";\n\t\t\tcase \"E\":\n\t\t\t\treturn \"110\";\n\t\t\tcase \"F\":\n\t\t\t\treturn \"01001\";\n\t\t\tcase \"G\":\n\t\t\t\treturn \"10011011\";\n\t\t\tcase \"H\":\n\t\t\t\treturn \"010000\";\n\t\t\tcase \"I\":\n\t\t\t\treturn \"0111\";\n\t\t\tcase \"J\":\n\t\t\t\treturn \"10011000\";\n\t\t\tcase \"K\":\n\t\t\t\treturn \"0110\";\n\t\t\tcase \"L\":\n\t\t\t\treturn \"00100\";\n\t\t\tcase \"M\":\n\t\t\t\treturn \"10011001\";\n\t\t\tcase \"N\":\n\t\t\t\treturn \"10011110\";\n\t\t\tcase \"O\":\n\t\t\t\treturn \"00101\";\n\t\t\tcase \"P\":\n\t\t\t\treturn \"111\";\n\t\t\tcase \"Q\":\n\t\t\t\treturn \"10011111\";\n\t\t\tcase \"R\":\n\t\t\t\treturn \"1000\";\n\t\t\tcase \"S\":\n\t\t\t\treturn \"00110\";\n\t\t\tcase \"T\":\n\t\t\t\treturn \"00111\";\n\t\t\tcase \"U\":\n\t\t\t\treturn \"10011100\";\n\t\t\tcase \"V\":\n\t\t\t\treturn \"10011101\";\n\t\t\tcase \"W\":\n\t\t\t\treturn \"000010\";\n\t\t\tcase \"X\":\n\t\t\t\treturn \"10010010\";\n\t\t\tcase \"Y\":\n\t\t\t\treturn \"10010011\";\n\t\t\tcase \"Z\":\n\t\t\t\treturn \"10010000\";\n\t\t}\n\t\treturn \"\";\n\t}\n\t\n\tstatic String toChar(String str)\n\t{\n\t\tint n = 0;\n\t\tfor(int i=0; i<str.length(); i++)\n\t\t{\n\t\t\tn += str.substring(str.length()-i-1, str.length()-i).equals(\"1\") ? Math.pow(2, i) : 0;\n\t\t}\n\t\tif(n < 26)\n\t\t{\n\t\t\treturn Character.toString((char)('A'+n));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tswitch (n)\n\t\t\t{\n\t\t\t\tcase 26:\n\t\t\t\t\treturn \" \";\n\t\t\t\tcase 27:\n\t\t\t\t\treturn \".\";\n\t\t\t\tcase 28:\n\t\t\t\t\treturn \",\";\n\t\t\t\tcase 29:\n\t\t\t\t\treturn \"-\";\n\t\t\t\tcase 30:\n\t\t\t\t\treturn \"'\";\n\t\t\t\tcase 31:\n\t\t\t\t\treturn \"?\";\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn \"\";\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tstatic final HashMap<Character, String> c1 = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");\n\t\t\tput('\\'', \"000000\");\n\t\t\tput(',', \"000011\");\n\t\t\tput('-', \"10010001\");\n\t\t\tput('.', \"010001\");\n\t\t\tput('?', \"000001\");\n\t\t\tput('A', \"100101\");\n\t\t\tput('B', \"10011010\");\n\t\t\tput('C', \"0101\");\n\t\t\tput('D', \"0001\");\n\t\t\tput('E', \"110\");\n\t\t\tput('F', \"01001\");\n\t\t\tput('G', \"10011011\");\n\t\t\tput('H', \"010000\");\n\t\t\tput('I', \"0111\");\n\t\t\tput('J', \"10011000\");\n\t\t\tput('K', \"0110\");\n\t\t\tput('L', \"00100\");\n\t\t\tput('M', \"10011001\");\n\t\t\tput('N', \"10011110\");\n\t\t\tput('O', \"00101\");\n\t\t\tput('P', \"111\");\n\t\t\tput('Q', \"10011111\");\n\t\t\tput('R', \"1000\");\n\t\t\tput('S', \"00110\");\n\t\t\tput('T', \"00111\");\n\t\t\tput('U', \"10011100\");\n\t\t\tput('V', \"10011101\");\n\t\t\tput('W', \"000010\");\n\t\t\tput('X', \"10010010\");\n\t\t\tput('Y', \"10010011\");\n\t\t\tput('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> c2 = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"00000\", 'A');\n\t\t\tput(\"00001\", 'B');\n\t\t\tput(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D');\n\t\t\tput(\"00100\", 'E');\n\t\t\tput(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G');\n\t\t\tput(\"00111\", 'H');\n\t\t\tput(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J');\n\t\t\tput(\"01010\", 'K');\n\t\t\tput(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M');\n\t\t\tput(\"01101\", 'N');\n\t\t\tput(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P');\n\t\t\tput(\"10000\", 'Q');\n\t\t\tput(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S');\n\t\t\tput(\"10011\", 'T');\n\t\t\tput(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V');\n\t\t\tput(\"10110\", 'W');\n\t\t\tput(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y');\n\t\t\tput(\"11001\", 'Z');\n\t\t\tput(\"11010\", ' ');\n\t\t\tput(\"11011\", '.');\n\t\t\tput(\"11100\", ',');\n\t\t\tput(\"11101\", '-');\n\t\t\tput(\"11110\", '\\'');\n\t\t\tput(\"11111\", '?');\n\t\t}\n\t};\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n\t\t\t//\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1.get(c));\n\t\t\t}\n\t\t\t//\n\t\t\tsb1.append(\"00000\");\n\t\t\t//\n\t\t\tline = sb1.toString();\n\t\t\tfor (int i = 0; i < line.length(); i += 5) {\n\t\t\t\tsb2.append(c2.get(line.substring(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println(sb2.toString());\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n//The Code A Doctor Loved\npublic class Main{\n\n\tpublic static void main(String[] args) {\n\t\tMap<Character, String> t = new HashMap<Character, String>();\n\t\tt.put(' ', \"101\");\n\t\tt.put('\\'', \"000000\");\n\t\tt.put(',', \"000011\");\n\t\tt.put('-', \"10010001\");\n\t\tt.put('.', \"010001\");\n\t\tt.put('?', \"000001\");\n\t\tt.put('A', \"100101\");\n\t\tt.put('B', \"10011010\");\n\t\tt.put('C', \"0101\");\n\t\tt.put('D', \"0001\");\n\t\tt.put('E', \"110\");\n\t\tt.put('F', \"01001\");\n\t\tt.put('G', \"10011011\");\n\t\tt.put('H', \"010000\");\n\t\tt.put('I', \"0111\");\n\t\tt.put('J', \"10011000\");\n\t\tt.put('K', \"0110\");\n\t\tt.put('L', \"00100\");\n\t\tt.put('M', \"10011001\");\n\t\tt.put('N', \"10011110\");\n\t\tt.put('O', \"00101\");\n\t\tt.put('P', \"111\");\n\t\tt.put('Q', \"10011111\");\n\t\tt.put('R', \"1000\");\n\t\tt.put('S', \"00110\");\n\t\tt.put('T', \"00111\");\n\t\tt.put('U', \"10011100\");\n\t\tt.put('V', \"10011101\");\n\t\tt.put('W', \"000010\");\n\t\tt.put('X', \"10010010\");\n\t\tt.put('Y', \"10010011\");\n\t\tt.put('Z', \"10010000\");\n\t\tMap<String, Character> r = new HashMap<String, Character>();\n\t\tr.put(\"00000\", 'A');\n\t\tr.put(\"00001\", 'B');\n\t\tr.put(\"00010\", 'C');\n\t\tr.put(\"00011\", 'D');\n\t\tr.put(\"00100\", 'E');\n\t\tr.put(\"00101\", 'F');\n\t\tr.put(\"00110\", 'G');\n\t\tr.put(\"00111\", 'H');\n\t\tr.put(\"01000\", 'I');\n\t\tr.put(\"01001\", 'J');\n\t\tr.put(\"01010\", 'K');\n\t\tr.put(\"01011\", 'L');\n\t\tr.put(\"01100\", 'M');\n\t\tr.put(\"01101\", 'N');\n\t\tr.put(\"01110\", 'O');\n\t\tr.put(\"01111\", 'P');\n\t\tr.put(\"10000\", 'Q');\n\t\tr.put(\"10001\", 'R');\n\t\tr.put(\"10010\", 'S');\n\t\tr.put(\"10011\", 'T');\n\t\tr.put(\"10100\", 'U');\n\t\tr.put(\"10101\", 'V');\n\t\tr.put(\"10110\", 'W');\n\t\tr.put(\"10111\", 'X');\n\t\tr.put(\"11000\", 'Y');\n\t\tr.put(\"11001\", 'Z');\n\t\tr.put(\"11010\", ' ');\n\t\tr.put(\"11011\", '.');\n\t\tr.put(\"11100\", ',');\n\t\tr.put(\"11101\", '-');\n\t\tr.put(\"11110\", '\\'');\n\t\tr.put(\"11111\", '?');\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tchar[] s = sc.nextLine().toCharArray();\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor(char c:s)sb.append(t.get(c));\n\t\t\twhile(sb.length()%5!=0)sb.append('0');\n\t\t\tString u = sb.toString();\n\t\t\tStringBuilder v = new StringBuilder();\n\t\t\tfor(int i=0;i<u.length();i+=5)v.append(r.get(u.substring(i, i+5)));\n\t\t\tSystem.out.println(v);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\nimport java.util.Scanner;\npublic class Main {\n\n\tstatic final HashMap<Character, String> InMap = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");put('\\'', \"000000\");put(',', \"000011\");\n\t\t\tput('-', \"10010001\"); put('.', \"010001\"); put('?', \"000001\");\n\t\t\tput('A', \"100101\"); put('B', \"10011010\");put('C', \"0101\");\n\t\t\tput('D', \"0001\");put('E', \"110\"); put('F', \"01001\");\n\t\t\tput('G', \"10011011\");put('H', \"010000\"); put('I', \"0111\");\n\t\t\tput('J', \"10011000\"); put('K', \"0110\");put('L', \"00100\");\n\t\t\tput('M', \"10011001\"); put('N', \"10011110\");put('O', \"00101\");\n\t\t\tput('P', \"111\"); put('Q', \"10011111\");put('R', \"1000\");\n\t\t\tput('S', \"00110\"); put('T', \"00111\"); put('U', \"10011100\");\n\t\t\tput('V', \"10011101\");put('W', \"000010\");put('X', \"10010010\");\n\t\t\tput('Y', \"10010011\"); put('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> OutMap = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"00000\", 'A'); put(\"00001\", 'B'); put(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D'); put(\"00100\", 'E'); put(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G'); put(\"00111\", 'H'); put(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J'); put(\"01010\", 'K'); put(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M'); put(\"01101\", 'N'); put(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P'); put(\"10000\", 'Q'); put(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S'); put(\"10011\", 'T'); put(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V'); put(\"10110\", 'W'); put(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y'); put(\"11001\", 'Z'); put(\"11010\", ' ');\n\t\t\tput(\"11011\", '.'); put(\"11100\", ','); put(\"11101\", '-');\n\t\t\tput(\"11110\", '\\'');put(\"11111\", '?');\n\t\t}\n\t};\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tString temp = sc.nextLine(),\n\t\t\t\t\tstr = \"\",\n\t\t\t\t\tans = \"\";\n\t\t\tchar character[] = temp.toCharArray();\n\t\t\tfor(int i = 0; i < character.length; i++){\n\t\t\t\tstr += InMap.get(character[i]);\n\t\t\t}\n\t\t\tstr += \"00000\";\n\t\t\t//System.out.println(str);\n\t\t\tfor(int i = 0; i < str.length() - 5; i += 5 ){\n\t\t\t\tans += OutMap.get(str.substring(i,i + 5));\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.util.HashMap;\nclass Main\n{\n\tpublic static void main(String args[])\n\t{\n\t\tHashMap<Character, String> codeMap = new HashMap<Character, String>();\n\t\tcodeMap.put(' ', \"101\");\n\t\tcodeMap.put('\\'', \"000000\");\n\t\tcodeMap.put(',', \"000011\");\n\t\tcodeMap.put('-', \"10010001\");\n\t\tcodeMap.put('.', \"010001\");\n\t\tcodeMap.put('?', \"000001\");\n\t\tcodeMap.put('A', \"100101\");\n\t\tcodeMap.put('B', \"10011010\");\n\t\tcodeMap.put('C', \"0101\");\n\t\tcodeMap.put('D', \"0001\");\n\t\tcodeMap.put('E', \"110\");\n\t\tcodeMap.put('F', \"01001\");\n\t\tcodeMap.put('G', \"10011011\");\n\t\tcodeMap.put('H', \"010000\");\n\t\tcodeMap.put('I', \"0111\");\n\t\tcodeMap.put('J', \"10011000\");\n\t\tcodeMap.put('K', \"0110\");\n\t\tcodeMap.put('L', \"00100\");\n\t\tcodeMap.put('M', \"10011001\");\n\t\tcodeMap.put('N', \"10011110\");\n\t\tcodeMap.put('O', \"00101\");\n\t\tcodeMap.put('P', \"111\");\n\t\tcodeMap.put('Q', \"10011111\");\n\t\tcodeMap.put('R', \"1000\");\n\t\tcodeMap.put('S', \"00110\");\n\t\tcodeMap.put('T', \"00111\");\n\t\tcodeMap.put('U', \"10011100\");\n\t\tcodeMap.put('V', \"10011101\");\n\t\tcodeMap.put('W', \"000010\");\n\t\tcodeMap.put('X', \"10010010\");\n\t\tcodeMap.put('Y', \"10010011\");\n\t\tcodeMap.put('Z', \"10010000\");\n\t\tHashMap<String, Character> charMap = new HashMap<String, Character>();\n\t\tcharMap.put(\"00000\", 'A');\n\t\tcharMap.put(\"00001\", 'B');\n\t\tcharMap.put(\"00010\", 'C');\n\t\tcharMap.put(\"00011\", 'D');\n\t\tcharMap.put(\"00100\", 'E');\n\t\tcharMap.put(\"00101\", 'F');\n\t\tcharMap.put(\"00110\", 'G');\n\t\tcharMap.put(\"00111\", 'H');\n\t\tcharMap.put(\"01000\", 'I');\n\t\tcharMap.put(\"01001\", 'J');\n\t\tcharMap.put(\"01010\", 'K');\n\t\tcharMap.put(\"01011\", 'L');\n\t\tcharMap.put(\"01100\", 'M');\n\t\tcharMap.put(\"01101\", 'N');\n\t\tcharMap.put(\"01110\", 'O');\n\t\tcharMap.put(\"01111\", 'P');\n\t\tcharMap.put(\"10000\", 'Q');\n\t\tcharMap.put(\"10001\", 'R');\n\t\tcharMap.put(\"10010\", 'S');\n\t\tcharMap.put(\"10011\", 'T');\n\t\tcharMap.put(\"10100\", 'U');\n\t\tcharMap.put(\"10101\", 'V');\n\t\tcharMap.put(\"10110\", 'W');\n\t\tcharMap.put(\"10111\", 'X');\n\t\tcharMap.put(\"11000\", 'Y');\n\t\tcharMap.put(\"11001\", 'Z');\n\t\tcharMap.put(\"11010\", ' ');\n\t\tcharMap.put(\"11011\", '.');\n\t\tcharMap.put(\"11100\", ',');\n\t\tcharMap.put(\"11101\", '-');\n\t\tcharMap.put(\"11110\", '\\'');\n\t\tcharMap.put(\"11111\", '?');\n\t\tScanner sc = new Scanner(System.in);\n\t\tString str = sc.nextLine();\n\t\tint length = str.length();\n\t\tStringBuffer codeBuf = new StringBuffer();\n\t\tfor (int i = 0; i < length; i++)\n\t\t{\n\t\t\tcodeBuf.append(codeMap.get(str.charAt(i)));\n\t\t}\n\t\twhile (codeBuf.length() % 5 != 0)\n\t\t{\n\t\t\tcodeBuf.append('0');\n\t\t}\n\t\tlength = codeBuf.length();\n\t\tfor (int i = 0; i < length; i += 5)\n\t\t{\n\t\t\tSystem.out.print(charMap.get(codeBuf.substring(i, i + 5)));\n\t\t}\n\t\tSystem.out.println();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) throws java.io.IOException{\n        Scanner scan = new Scanner(System.in);\n        HashMap<Character,String> ep =new HashMap<Character,String>();\n        HashMap<String,Character> dp =new HashMap<String,Character>();\n\n        ep.put(' ',\"101\");\n        ep.put('\\'',\"000000\");\n        ep.put(',',\"000011\");\n        ep.put('-',\"10010001\");\n        ep.put('.',\"010001\");\n        ep.put('?',\"000001\");\n        ep.put('A',\"100101\");\n        ep.put('B',\"10011010\");\n        ep.put('C',\"0101\");\n        ep.put('D',\"0001\");\n        ep.put('E',\"110\");\n        ep.put('F',\"01001\");\n        ep.put('G',\"10011011\");\n        ep.put('H',\"010000\");\n        ep.put('I',\"011\");\n        ep.put('J',\"10011000\");\n        ep.put('K',\"0110\");\n        ep.put('L',\"00100\");\n        ep.put('M',\"10011001\");\n        ep.put('N',\"10011110\");\n        ep.put('O',\"00101\");\n        ep.put('P',\"111\");\n        ep.put('Q',\"10011111\");\n        ep.put('R',\"1000\");\n        ep.put('S',\"00110\");\n        ep.put('T',\"00111\");\n        ep.put('U',\"10011100\");\n        ep.put('V',\"10011101\");\n        ep.put('W',\"000010\");\n        ep.put('X',\"10010010\");\n        ep.put('Y',\"10010011\");\n        ep.put('Z',\"10010000\");\n        \n        dp.put(\"00000\", 'A');\n        dp.put(\"00001\", 'B');\n        dp.put(\"00010\", 'C');\n        dp.put(\"00011\", 'D');\n        dp.put(\"00100\", 'E');\n        dp.put(\"00101\", 'F');\n        dp.put(\"00110\", 'G');\n        dp.put(\"00111\", 'H');\n        dp.put(\"01000\", 'I');\n        dp.put(\"01001\", 'J');\n        dp.put(\"01010\", 'K');\n        dp.put(\"01011\", 'L');\n        dp.put(\"01100\", 'M');\n        dp.put(\"01101\", 'N');\n        dp.put(\"01110\", 'O');\n        dp.put(\"01111\", 'P');\n        dp.put(\"10000\", 'Q');\n        dp.put(\"10001\", 'R');\n        dp.put(\"10010\", 'S');\n        dp.put(\"10011\", 'T');\n        dp.put(\"10100\", 'U');\n        dp.put(\"10101\", 'V');\n        dp.put(\"10110\", 'W');\n        dp.put(\"10111\", 'X');\n        dp.put(\"11000\", 'Y');\n        dp.put(\"11001\", 'Z');\n        dp.put(\"11010\", ' ');\n        dp.put(\"11011\", '.');\n        dp.put(\"11100\", ',');\n        dp.put(\"11101\", '-');\n        dp.put(\"11110\", '\\'');\n        dp.put(\"11111\", '?');\n        \n        while(scan.hasNext()){\n        \tchar [] line= scan.nextLine().toCharArray();\n        \tString tmp=\"\";\n        \tfor(int i=0;i<line.length;i++)\n        \t\ttmp+=ep.get(line[i]);\n        \tString [] splitedCode =new String[tmp.length()/5+1];\n        \tfor(int i=0;i<splitedCode.length;i++){\t\n        \t\tif(i==(splitedCode.length-1))\n        \t\t\tsplitedCode[i]=tmp.substring(5*i,5*i+tmp.length()%5);\n        \t\telse splitedCode[i]=tmp.substring(5*i,5*i+5);\n        \t}\n        \t\t\n        \tfor(int i=0;i<(5-tmp.length()%5);i++)\n        \t\tsplitedCode[splitedCode.length-1]+=\"0\";\n        \t\n        \tStringBuilder sb = new StringBuilder();\n        \tfor(int i=0;i<splitedCode.length;i++)\n        \t\tsb.append(dp.get(splitedCode[i]));\n        \tSystem.out.println(sb);\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;class Main{public static void main(String[]z){String t=new Scanner(System.in).nextLine();z=\" :101:':000000:,:000011:-:10010001:\\\\.:010001:\\\\?:000001:A:100101:B:10011010:C:0101:D:0001:E:110:F:01001:G:10011011:H:010000:I:0111:J:10011000:K:0110:L:00100:M:10011001:N:10011110:O:00101:P:111:Q:10011111:R:1000:S:00110:T:00111:U:10011100:V:10011101:W:000010:X:10010010:Y:10010011:Z:10010000\".split(\":\");int i,j;for(i=0;i<z.length;)t=t.replaceAll(z[i++],z[i++]);t+=\"0000\";for(i=0;i+4<t.length();System.out.print((char)j)){j=Integer.parseInt(t.substring(i,i+=5),2)+65;if(j>91)j=new int[]{32,46,44,45,39,63}[j-91];}System.out.println();}}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n\npublic class Main {\n\tprivate\tstatic\tBufferedReader\tbr = null;\n\n\tstatic {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t}\n \n    /**\n     * @param args\n     */\n\tpublic static void main(String[] args) {\n\t// TODO Auto-generated method stub\n\t\tString\tstdin = null;\n\n\t\twhile ((stdin = parseStdin()) != null) {\n\t\t\tString\twork = \"\";\n\t\t\tString\tout  = \"\";\n\n\t\t\tfor(int loop = 0; loop < stdin.length(); loop++) {\n\t\t\t\twork += MyConv.Encode(stdin.charAt(loop));\n\t\t\t}\n\n\t\t\twhile(work.length() % 5 != 0) {\n\t\t\t\twork += \"0\";\n\t\t\t}\n\n\t\t\tfor(int loop = 0; loop < stdin.length(); loop += 5) {\n\t\t\t\tout += MyConv.Decode(work.substring(loop, loop + 5));\n\t\t\t}\n\n\t\t\tSystem.out.println(out);\n\t\t}\n\t}\n\n\tprivate static String parseStdin() {\n        String  stdin = null;\n        \n        try {\n       \t\tstdin = br.readLine();\n        }\n        catch (IOException e) {}\n \n        return stdin;\n\t}\n}\n\nclass MyConv {\n\tpublic static String Encode(char key) {\n\t\tswitch (key) {\n\t\tcase ' ':  return \"101\";\n\t\tcase '\\'': return \"000000\";\n\t\tcase ',':  return \"000011\";\n\t\tcase '-':  return \"10010001\";\n\t\tcase '.':  return \"010001\";\n\t\tcase '?':  return \"000001\";\n\t\tcase 'A':  return \"100101\";\n\t\tcase 'B':  return \"10011010\";\n\t\tcase 'C':  return \"0101\";\n\t\tcase 'D':  return \"0001\";\n\t\tcase 'E':  return \"110\";\n\t\tcase 'F':  return \"01001\";\n\t\tcase 'G':  return \"10011011\";\n\t\tcase 'H':  return \"010000\";\n\t\tcase 'I':  return \"0111\";\n\t\tcase 'J':  return \"10011000\";\n\t\tcase 'K':  return \"0110\";\n\t\tcase 'L':  return \"00100\";\n\t\tcase 'M':  return \"10011001\";\n\t\tcase 'N':  return \"10011110\";\n\t\tcase 'O':  return \"00101\";\n\t\tcase 'P':  return \"111\";\n\t\tcase 'Q':  return \"10011111\";\n\t\tcase 'R':  return \"1000\";\n\t\tcase 'S':  return \"00110\";\n\t\tcase 'T':  return \"00111\";\n\t\tcase 'U':  return \"10011100\";\n\t\tcase 'V':  return \"10011101\";\n\t\tcase 'W':  return \"000010\";\n\t\tcase 'X':  return \"10010010\";\n\t\tcase 'Y':  return \"10010011\";\n\t\tcase 'Z':  return \"10010000\";\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tpublic static char Decode(String key) {\n\t\tif (key.equals(\"00000\")) return 'A';\n\t\tif (key.equals(\"00001\")) return 'B';\n\t\tif (key.equals(\"00010\")) return 'C';\n\t\tif (key.equals(\"00011\")) return 'D';\n\t\tif (key.equals(\"00100\")) return 'E';\n\t\tif (key.equals(\"00101\")) return 'F';\n\t\tif (key.equals(\"00110\")) return 'G';\n\t\tif (key.equals(\"00111\")) return 'H';\n\t\tif (key.equals(\"01000\")) return 'I';\n\t\tif (key.equals(\"01001\")) return 'J';\n\t\tif (key.equals(\"01010\")) return 'K';\n\t\tif (key.equals(\"01011\")) return 'L';\n\t\tif (key.equals(\"01100\")) return 'M';\n\t\tif (key.equals(\"01101\")) return 'N';\n\t\tif (key.equals(\"01110\")) return 'O';\n\t\tif (key.equals(\"01111\")) return 'P';\n\t\tif (key.equals(\"10000\")) return 'Q';\n\t\tif (key.equals(\"10001\")) return 'R';\n\t\tif (key.equals(\"10010\")) return 'S';\n\t\tif (key.equals(\"10011\")) return 'T';\n\t\tif (key.equals(\"10100\")) return 'U';\n\t\tif (key.equals(\"10101\")) return 'V';\n\t\tif (key.equals(\"10110\")) return 'W';\n\t\tif (key.equals(\"10111\")) return 'X';\n\t\tif (key.equals(\"11000\")) return 'Y';\n\t\tif (key.equals(\"11001\")) return 'Z';\n\t\tif (key.equals(\"11010\")) return ' ';\n\t\tif (key.equals(\"11011\")) return '.';\n\t\tif (key.equals(\"11100\")) return ',';\n\t\tif (key.equals(\"11101\")) return '-';\n\t\tif (key.equals(\"11110\")) return '\\'';\n\t\tif (key.equals(\"11111\")) return '?';\n\t\treturn 0;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String p[] = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\",\n                \"000010\", \"10010010\", \"10010011\", \"10010000\" };\n        String c = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        String q[] = { \"11010\", \"11110\", \"11100\", \"11101\", \"11011\", \"11111\", \"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\",\n                \"11000\", \"11001\" };\n        while (sc.hasNext()) {\n            String result = \"\";\n            char[] s = sc.nextLine().toCharArray();\n            for (char t1 : s) {\n                for (int i = 0; i < c.length(); i++) {\n                    if (t1 == c.charAt(i)) {\n                        result += p[i];\n                    }\n                }\n            }\n            for (int i = 0; i < result.length() % 5; i++) {\n                result += \"0\";\n            }\n            String result2 = \"\";\n            for (int i = 0; i < result.length(); i += 5) {\n                for (int j = 0; j < q.length; j++) {\n                    if (result.substring(i, i + 5).equals(q[j])) {\n                        result2 += c.charAt(j);\n                    }\n                }\n            }\n            System.out.println(result2);\n        }\n    }\n}\n\n"
  },
  {
    "language": "Java",
    "code": "import java.io.*;\nimport java.util.StringTokenizer;\nimport java.util.HashMap;\n\nclass Translator {\n\tString t,res;\n\tHashMap<String,String> map = new HashMap<String,String>();\n\tHashMap<String,String> back = new HashMap<String,String>();\n\tTranslator() {\n\t\tmap.put(\" \",\"101\");\n\t\tmap.put(\"\\'\",\"000000\");\n\t\tmap.put(\",\",\"000011\");\n\t\tmap.put(\"-\",\"10010001\");\n\t\tmap.put(\".\",\"010001\");\n\t\tmap.put(\"?\",\"000001\");\n\t\tmap.put(\"A\",\"100101\");\n\t\tmap.put(\"B\",\"10011010\");\n\t\tmap.put(\"C\",\"0101\");\n\t\tmap.put(\"D\",\"0001\");\n\t\tmap.put(\"E\",\"110\");\n\t\tmap.put(\"F\",\"01001\");\n\t\tmap.put(\"G\",\"10011011\");\n\t\tmap.put(\"H\",\"010000\");\n\t\tmap.put(\"I\",\"0111\");\n\t\tmap.put(\"J\",\"10011000\");\n\t\tmap.put(\"K\",\"0110\");\n\t\tmap.put(\"L\",\"00100\");\n\t\tmap.put(\"M\",\"10011001\");\n\t\tmap.put(\"N\",\"10011110\");\n\t\tmap.put(\"O\",\"00101\");\n\t\tmap.put(\"P\",\"111\");\n\t\tmap.put(\"Q\",\"10011111\");\n\t\tmap.put(\"R\",\"1000\");\n\t\tmap.put(\"S\",\"00110\");\n\t\tmap.put(\"T\",\"00111\");\n\t\tmap.put(\"U\",\"10011100\");\n\t\tmap.put(\"V\",\"10011101\");\n\t\tmap.put(\"W\",\"000010\");\n\t\tmap.put(\"X\",\"10010010\");\n\t\tmap.put(\"Y\",\"10010011\");\n\t\tmap.put(\"Z\",\"10010000\");\n\t\tback.put(\"00000\",\"A\");\n\t\tback.put(\"00001\",\"B\");\n\t\tback.put(\"00010\",\"C\");\n\t\tback.put(\"00011\",\"D\");\n\t\tback.put(\"00100\",\"E\");\n\t\tback.put(\"00101\",\"F\");\n\t\tback.put(\"00110\",\"G\");\n\t\tback.put(\"00111\",\"H\");\n\t\tback.put(\"01000\",\"I\");\n\t\tback.put(\"01001\",\"J\");\n\t\tback.put(\"01010\",\"K\");\n\t\tback.put(\"01011\",\"L\");\n\t\tback.put(\"01100\",\"M\");\n\t\tback.put(\"01101\",\"N\");\n\t\tback.put(\"01110\",\"O\");\n\t\tback.put(\"01111\",\"P\");\n\t\tback.put(\"10000\",\"Q\");\n\t\tback.put(\"10001\",\"R\");\n\t\tback.put(\"10010\",\"S\");\n\t\tback.put(\"10011\",\"T\");\n\t\tback.put(\"10100\",\"U\");\n\t\tback.put(\"10101\",\"V\");\n\t\tback.put(\"10110\",\"W\");\n\t\tback.put(\"10111\",\"X\");\n\t\tback.put(\"11000\",\"Y\");\n\t\tback.put(\"11001\",\"Z\");\n\t\tback.put(\"11010\",\" \");\n\t\tback.put(\"11011\",\".\");\n\t\tback.put(\"11100\",\",\");\n\t\tback.put(\"11101\",\"-\");\n\t\tback.put(\"11110\",\"\\'\");\n\t\tback.put(\"11111\",\"?\");\n\t}\n\n\tvoid set(String s) {\n\t\tthis.t = \"\";\n\t\tint n = s.length();\n\t\tfor (int i=0;i<n;i++) {\n\t\t\tthis.t = this.t+map.get(\"\"+s.charAt(i));\n\t\t}\n\t}\n\n\tString put() {\n\t\tthis.res = \"\";\n\t\tint n = this.t.length();\n\t\t//if (n%5>0) {\n\t\t\tint m = 5-(n%5);\n\t\t\tn += m;\n\t\t\tfor (int i=0;i<m;i++) this.t = this.t+\"0\";\n\t\t//}\n\t\tn /= 5;\n\t\tfor (int i=0;i<n;i++) {\n\t\t\tthis.res = this.res+back.get(this.t.substring(i*5,i*5+5));\n\t\t}\n\t\treturn this.res;\n\t}\n}\n\nclass Main {\n\tpublic static void main(String args[]) {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n\t\ttry {\n\t\t\tTranslator t = new Translator();\n\t\t\tt.set(br.readLine());\n\t\t\tSystem.out.println(t.put());\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;class Main{public static void main(String[]z){for(Scanner s=new Scanner(System.in);s.hasNext();){String t=s.nextLine();z=\" :101:':000000:,:000011:-:10010001:\\\\.:010001:\\\\?:000001:A:100101:B:10011010:C:0101:D:0001:E:110:F:01001:G:10011011:H:010000:I:0111:J:10011000:K:0110:L:00100:M:10011001:N:10011110:O:00101:P:111:Q:10011111:R:1000:S:00110:T:00111:U:10011100:V:10011101:W:000010:X:10010010:Y:10010011:Z:10010000\".split(\":\");int i,j;for(i=0;i<z.length;)t=t.replaceAll(z[i++],z[i++]);t+=\"0000\";for(i=0;i+4<t.length();System.out.print((char)j)){j=Integer.parseInt(t.substring(i,i+=5),2)+65;if(j>90)j=new int[]{32,46,44,45,39,63}[j-91];}System.out.println();}}}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tstatic final HashMap<Character, String> c1 = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");\n\t\t\tput('\\'', \"000000\");\n\t\t\tput(',', \"000011\");\n\t\t\tput('-', \"10010001\");\n\t\t\tput('.', \"010001\");\n\t\t\tput('?', \"000001\");\n\t\t\tput('A', \"100101\");\n\t\t\tput('B', \"10011010\");\n\t\t\tput('C', \"0101\");\n\t\t\tput('D', \"0001\");\n\t\t\tput('E', \"110\");\n\t\t\tput('F', \"01001\");\n\t\t\tput('G', \"10011011\");\n\t\t\tput('H', \"010000\");\n\t\t\tput('I', \"0111\");\n\t\t\tput('J', \"10011000\");\n\t\t\tput('K', \"0110\");\n\t\t\tput('L', \"00100\");\n\t\t\tput('M', \"10011001\");\n\t\t\tput('N', \"10011110\");\n\t\t\tput('O', \"00101\");\n\t\t\tput('P', \"111\");\n\t\t\tput('Q', \"10011111\");\n\t\t\tput('R', \"1000\");\n\t\t\tput('S', \"00110\");\n\t\t\tput('T', \"00111\");\n\t\t\tput('U', \"10011100\");\n\t\t\tput('V', \"10011101\");\n\t\t\tput('W', \"000010\");\n\t\t\tput('X', \"10010010\");\n\t\t\tput('Y', \"10010011\");\n\t\t\tput('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> c2 = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"11010\", ' ');\n\t\t\tput(\"11110\", '\\'');\n\t\t\tput(\"11100\", ',');\n\t\t\tput(\"11101\", '-');\n\t\t\tput(\"11011\", '.');\n\t\t\tput(\"11111\", '?');\n\t\t\tput(\"00000\", 'A');\n\t\t\tput(\"00001\", 'B');\n\t\t\tput(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D');\n\t\t\tput(\"00100\", 'E');\n\t\t\tput(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G');\n\t\t\tput(\"00111\", 'H');\n\t\t\tput(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J');\n\t\t\tput(\"01010\", 'K');\n\t\t\tput(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M');\n\t\t\tput(\"01101\", 'N');\n\t\t\tput(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P');\n\t\t\tput(\"10000\", 'Q');\n\t\t\tput(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S');\n\t\t\tput(\"10011\", 'T');\n\t\t\tput(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V');\n\t\t\tput(\"10110\", 'W');\n\t\t\tput(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y');\n\t\t\tput(\"11001\", 'Z');\n\t\t}\n\t};\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\n\t\t\t//\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1.get(c));\n\t\t\t}\n\t\t\twhile (sb1.length() % 5 != 0) {\n\t\t\t\tsb1.append('0');\n\t\t\t}\n\n\t\t\t//\n\t\t\tfor (int i = 0; i < sb1.length() / 5; i++) {\n\t\t\t\tString five = sb1.substring(i * 5, i * 5 + 5);\n\t\t\t\tsb2.append(c2.get(five));\n\t\t\t}\n\n\t\t\tSystem.out.println(sb2.toString());\n\n\t\t}\n\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.io.*;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Scanner;\npublic class Main {\n    static final HashMap<Character, String> map1 = new HashMap<Character, String>() {\n        {\n            put(' ', \"101\");\n            put('\\'', \"000000\");\n            put(',', \"000011\");\n            put('-', \"10010001\");\n            put('.', \"010001\");\n            put('?', \"000001\");\n            put('A', \"100101\");\n            put('B', \"10011010\");\n            put('C', \"0101\");\n            put('D', \"0001\");\n            put('E', \"110\");\n            put('F', \"01001\");\n            put('G', \"10011011\");\n            put('H', \"010000\");\n            put('I', \"0111\");\n            put('J', \"10011000\");\n            put('K', \"0110\");\n            put('L', \"00100\");\n            put('M', \"10011001\");\n            put('N', \"10011110\");\n            put('O', \"00101\");\n            put('P', \"111\");\n            put('Q', \"10011111\");\n            put('R', \"1000\");\n            put('S', \"00110\");\n            put('T', \"00111\");\n            put('U', \"10011100\");\n            put('V', \"10011101\");\n            put('W', \"000010\");\n            put('X', \"10010010\");\n            put('Y', \"10010011\");\n            put('Z', \"10010000\");\n        }\n    };\n \n    static final HashMap<String, Character> map2 = new HashMap<String, Character>() {\n        {\n            put(\"00000\", 'A');\n            put(\"00001\", 'B');\n            put(\"00010\", 'C');\n            put(\"00011\", 'D');\n            put(\"00100\", 'E');\n            put(\"00101\", 'F');\n            put(\"00110\", 'G');\n            put(\"00111\", 'H');\n            put(\"01000\", 'I');\n            put(\"01001\", 'J');\n            put(\"01010\", 'K');\n            put(\"01011\", 'L');\n            put(\"01100\", 'M');\n            put(\"01101\", 'N');\n            put(\"01110\", 'O');\n            put(\"01111\", 'P');\n            put(\"10000\", 'Q');\n            put(\"10001\", 'R');\n            put(\"10010\", 'S');\n            put(\"10011\", 'T');\n            put(\"10100\", 'U');\n            put(\"10101\", 'V');\n            put(\"10110\", 'W');\n            put(\"10111\", 'X');\n            put(\"11000\", 'Y');\n            put(\"11001\", 'Z');\n            put(\"11010\", ' ');\n            put(\"11011\", '.');\n            put(\"11100\", ',');\n            put(\"11101\", '-');\n            put(\"11110\", '\\'');\n            put(\"11111\", '?');\n        }\n    };\n \n\tpublic static void main(String[] args) {\n\t\t\n\t\tFastScanner sc = new FastScanner();\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tStringBuffer buf = new StringBuffer();\n\t\t\tbuf.append(stdIn.nextLine());\n\t\t\tStringBuffer buf2 = new StringBuffer();\n\t\t\tfor(int i = 0; i < buf.length(); i++) {\n\t\t\t\tbuf2.append(map1.get(buf.charAt(i)));\n\t\t\t}\n\t\t\tif(buf2.length() % 5 != 5) {\n\t\t\t\tfor(int i = buf2.length() % 5; i <= 5; i++) {\n\t\t\t\t\tbuf2.append(\"0\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuf = new StringBuffer();\n\t\t\tfor(int i = 0; i < buf2.length()/5; i++) {\n\t\t\t\tbuf.append(map2.get(buf2.substring(i*5,(i+1)*5)));\n\t\t\t}\n\t\t\tout.println(buf.toString());\n\t\t}\n\t\tout.flush();\n\t}\n}\n//------------------------------//\n//-----------//\nclass FastScanner {\n    private final InputStream in = System.in;\n    private final byte[] buffer = new byte[1024];\n    private int ptr = 0;\n    private int buflen = 0;\n    private boolean hasNextByte() {\n        if (ptr < buflen) {\n            return true;\n        }else{\n            ptr = 0;\n            try {\n                buflen = in.read(buffer);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            if (buflen <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n    private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n    private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n    public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n    public String next() {\n        if (!hasNext()) throw new NoSuchElementException();\n        StringBuilder sb = new StringBuilder();\n        int b = readByte();\n        while(isPrintableChar(b)) {\n            sb.appendCodePoint(b);\n            b = readByte();\n        }\n        return sb.toString();\n    }\n    public long nextLong() {\n        if (!hasNext()) throw new NoSuchElementException();\n        long n = 0;\n        boolean minus = false;\n        int b = readByte();\n        if (b == '-') {\n            minus = true;\n            b = readByte();\n        }\n        if (b < '0' || '9' < b) {\n            throw new NumberFormatException();\n        }\n        while(true){\n            if ('0' <= b && b <= '9') {\n                n *= 10;\n                n += b - '0';\n            }else if(b == -1 || !isPrintableChar(b)){\n                return minus ? -n : n;\n            }else{\n                throw new NumberFormatException();\n            }\n            b = readByte();\n        }\n    }\n    \n    public int nextInt() {\n    \treturn (int)nextLong();\n    }\n    \n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tHashMap<String,Character> map1 = new HashMap<String,Character>();\n\t\tmap1.put(\"101\",' ');\n\t\tmap1.put(\"000000\",'\\'');\n\t\tmap1.put(\"000011\",',');\n\t\tmap1.put(\"10010001\",'-');\n\t\tmap1.put(\"010001\",'.');\n\t\tmap1.put(\"000001\",'?');\n\t\tmap1.put(\"100101\",'A');\n\t\tmap1.put(\"10011010\",'B');\n\t\tmap1.put(\"0101\",'C');\n\t\tmap1.put(\"0001\",'D');\n\t\tmap1.put(\"110\",'E');\n\t\tmap1.put(\"01001\",'F');\n\t\tmap1.put(\"10011011\",'G');\n\t\tmap1.put(\"010000\",'H');\n\t\tmap1.put(\"0111\",'I');\n\t\tmap1.put(\"10011000\",'J');\n\t\tmap1.put(\"0110\",'K');\n\t\tmap1.put(\"00100\",'L');\n\t\tmap1.put(\"10011001\",'M');\n\t\tmap1.put(\"10011110\",'N');\n\t\tmap1.put(\"00101\",'O');\n\t\tmap1.put(\"111\",'P');\n\t\tmap1.put(\"10011111\",'Q');\n\t\tmap1.put(\"1000\",'R');\n\t\tmap1.put(\"00110\",'S');\n\t\tmap1.put(\"00111\",'T');\n\t\tmap1.put(\"10011100\",'U');\n\t\tmap1.put(\"10011101\",'V');\n\t\tmap1.put(\"000010\",'W');\n\t\tmap1.put(\"10010010\",'X');\n\t\tmap1.put(\"10010011\",'Y');\n\t\tmap1.put(\"10010000\",'Z');\n\n\t\tHashMap<Character,String> map2 = new HashMap<Character,String>();\n\t\tmap2.put('A',\"00000\");\n\t\tmap2.put('B',\"00001\");\n\t\tmap2.put('C',\"00010\");\n\t\tmap2.put('D',\"00011\");\n\t\tmap2.put('E',\"00100\");\n\t\tmap2.put('F',\"00101\");\n\t\tmap2.put('G',\"00110\");\n\t\tmap2.put('H',\"00111\");\n\t\tmap2.put('I',\"01000\");\n\t\tmap2.put('J',\"01001\");\n\t\tmap2.put('K',\"01010\");\n\t\tmap2.put('L',\"01011\");\n\t\tmap2.put('M',\"01100\");\n\t\tmap2.put('N',\"01101\");\n\t\tmap2.put('O',\"01110\");\n\t\tmap2.put('P',\"01111\");\n\t\tmap2.put('Q',\"10000\");\n\t\tmap2.put('R',\"10001\");\n\t\tmap2.put('S',\"10010\");\n\t\tmap2.put('T',\"10011\");\n\t\tmap2.put('U',\"10100\");\n\t\tmap2.put('V',\"10101\");\n\t\tmap2.put('W',\"10110\");\n\t\tmap2.put('X',\"10111\");\n\t\tmap2.put('Y',\"11000\");\n\t\tmap2.put('Z',\"11001\");\n\t\tmap2.put(' ',\"11010\");\n\t\tmap2.put('.',\"11011\");\n\t\tmap2.put(',',\"11100\");\n\t\tmap2.put('-',\"11101\");\n\t\tmap2.put('\\'',\"11110\");\n\t\tmap2.put('?',\"11111\");\n\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNextLine()){\n\t\t\tString s = sc.nextLine();\n\t\t\tString out = \"\";\n\n\t\t\tfor(char ch : s.toCharArray())\n\t\t\t\tout += map2.get(ch);\n\n\t\t\tfor(int i=0;i<out.length();){\n\t\t\t\tint len = 1;\n\t\t\t\twhile(i+len<=out.length() && map1.get(out.substring(i,i+len)) == null) len++;\n\t\t\t\tif(i+len > out.length()) break;\n\t\t\t\tSystem.out.print(map1.get(out.substring(i,i+len)));\n\t\t\t\ti += len;\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "//import java.util.Scanner;\nimport java.io.*;\n//import java.util.Arrays;\npublic class Main {\n\tpublic static void main(String[] args) throws java.io.IOException {\n\t\t//Scanner scan = new Scanner(System.in);\n\t\tInputStreamReader is = new InputStreamReader(System.in);\n\t\tBufferedReader br = new BufferedReader(is);\n\t\tString text = br.readLine();\n\t\tchar mozi[] = text.toCharArray();\n\t\tString To = \"\";\n\t\tfor(int i = 0 ; i < mozi.length ; i++){\n\t\t\tString Hantei =  String.valueOf(mozi[i]);\n\t\t\tif(Hantei.equals(\"A\")){\n\t\t\t\tTo += \"100101\";\n\t\t\t}else if(Hantei.equals(\"B\")){\n\t\t\t\tTo += \"10011010\";\n\t\t\t}else if(Hantei.equals(\"C\")){\n\t\t\t\tTo += \"0101\";\n\t\t\t}else if(Hantei.equals(\"D\")){\n\t\t\t\tTo += \"0001\";\n\t\t\t}else if(Hantei.equals(\"E\")){\n\t\t\t\tTo += \"110\";\n\t\t\t}else if(Hantei.equals(\"F\")){\n\t\t\t\tTo += \"01001\";\n\t\t\t}else if(Hantei.equals(\"G\")){\n\t\t\t\tTo += \"10011011\";\n\t\t\t}else if(Hantei.equals(\"H\")){\n\t\t\t\tTo += \"010000\";\n\t\t\t}else if(Hantei.equals(\"I\")){\n\t\t\t\tTo += \"0111\";\n\t\t\t}else if(Hantei.equals(\"J\")){\n\t\t\t\tTo += \"10011000\";\n\t\t\t}else if(Hantei.equals(\"K\")){\n\t\t\t\tTo += \"0110\";\n\t\t\t}else if(Hantei.equals(\"L\")){\n\t\t\t\tTo += \"00100\";\n\t\t\t}else if(Hantei.equals(\"M\")){\n\t\t\t\tTo += \"10011001\";\n\t\t\t}else if(Hantei.equals(\"N\")){\n\t\t\t\tTo += \"10011110\";\n\t\t\t}else if(Hantei.equals(\"O\")){\n\t\t\t\tTo += \"00101\";\n\t\t\t}else if(Hantei.equals(\"P\")){\n\t\t\t\tTo += \"111\";\n\t\t\t}else if(Hantei.equals(\"Q\")){\n\t\t\t\tTo += \"10011111\";\n\t\t\t}else if(Hantei.equals(\"R\")){\n\t\t\t\tTo += \"1000\";\n\t\t\t}else if(Hantei.equals(\"S\")){\n\t\t\t\tTo += \"00110\";\n\t\t\t}else if(Hantei.equals(\"T\")){\n\t\t\t\tTo += \"00111\";\n\t\t\t}else if(Hantei.equals(\"U\")){\n\t\t\t\tTo += \"10011100\";\n\t\t\t}else if(Hantei.equals(\"V\")){\n\t\t\t\tTo += \"10011101\";\n\t\t\t}else if(Hantei.equals(\"W\")){\n\t\t\t\tTo += \"000010\";\n\t\t\t}else if(Hantei.equals(\"X\")){\n\t\t\t\tTo += \"10010010\";\n\t\t\t}else if(Hantei.equals(\"Y\")){\n\t\t\t\tTo += \"10010011\";\n\t\t\t}else if(Hantei.equals(\"Z\")){\n\t\t\t\tTo += \"10010000\";\n\t\t\t}else if(Hantei.equals(\" \")){\n\t\t\t\tTo += \"101\";\n\t\t\t}else if(Hantei.equals(\"'\")){\n\t\t\t\tTo += \"000000\";\n\t\t\t}else if(Hantei.equals(\",\")){\n\t\t\t\tTo += \"000011\";\n\t\t\t}else if(Hantei.equals(\"-\")){\n\t\t\t\tTo += \"10010001\";\n\t\t\t}else if(Hantei.equals(\".\")){\n\t\t\t\tTo += \"010001\";\n\t\t\t}else if(Hantei.equals(\"?\")){\n\t\t\t\tTo += \"000001\";\n\t\t\t}\n\t\t}\n\t\tint amari =  To.length()%5;\n\t\tif(amari == 1){\n\t\t\tTo += \"0000\";\n\t\t}else if(amari == 2){\n\t\t\tTo += \"000\";\n\t\t}else if(amari == 3){\n\t\t\tTo += \"00\";\n\t\t}else if(amari == 4){\n\t\t\tTo += \"0\";\n\t\t}\n\t\tint won[] = new int[To.length()/5];\n\t\tint j;\n\t\tString newtext = \"\";\n\t\tfor(j = 0 ; j < To.length()/5 ; j++){\n\t\t\twon[j] = Integer.parseInt(To.substring(j*5,(j+1)*5));\n\t\t\tif(won[j] == 0){\n\t\t\t\tnewtext += \"A\";\n\t\t\t}else if(won[j] == 1){\n\t\t\t\tnewtext += \"B\";\n\t\t\t}else if(won[j] == 10){\n\t\t\t\tnewtext += \"C\";\n\t\t\t}else if(won[j] == 11){\n\t\t\t\tnewtext += \"D\";\n\t\t\t}else if(won[j] == 100){\n\t\t\t\tnewtext += \"E\";\n\t\t\t}else if(won[j] == 101){\n\t\t\t\tnewtext += \"F\";\n\t\t\t}else if(won[j] == 110){\n\t\t\t\tnewtext += \"G\";\n\t\t\t}else if(won[j] == 111){\n\t\t\t\tnewtext += \"H\";\n\t\t\t}else if(won[j] == 1000){\n\t\t\t\tnewtext += \"I\";\n\t\t\t}else if(won[j] == 1001){\n\t\t\t\tnewtext += \"J\";\n\t\t\t}else if(won[j] == 1010){\n\t\t\t\tnewtext += \"K\";\n\t\t\t}else if(won[j] == 1011){\n\t\t\t\tnewtext += \"L\";\n\t\t\t}else if(won[j] == 1100){\n\t\t\t\tnewtext += \"M\";\n\t\t\t}else if(won[j] == 1101){\n\t\t\t\tnewtext += \"N\";\n\t\t\t}else if(won[j] == 1110){\n\t\t\t\tnewtext += \"O\";\n\t\t\t}else if(won[j] == 1111){\n\t\t\t\tnewtext += \"P\";\n\t\t\t}else if(won[j] == 10000){\n\t\t\t\tnewtext += \"Q\";\n\t\t\t}else if(won[j] == 10001){\n\t\t\t\tnewtext += \"R\";\n\t\t\t}else if(won[j] == 10010){\n\t\t\t\tnewtext += \"S\";\n\t\t\t}else if(won[j] == 10011){\n\t\t\t\tnewtext += \"T\";\n\t\t\t}else if(won[j] == 10100){\n\t\t\t\tnewtext += \"U\";\n\t\t\t}else if(won[j] == 10101){\n\t\t\t\tnewtext += \"V\";\n\t\t\t}else if(won[j] == 10110){\n\t\t\t\tnewtext += \"W\";\n\t\t\t}else if(won[j] == 10111){\n\t\t\t\tnewtext += \"X\";\n\t\t\t}else if(won[j] == 11000){\n\t\t\t\tnewtext += \"Y\";\n\t\t\t}else if(won[j] == 11001){\n\t\t\t\tnewtext += \"Z\";\n\t\t\t}else if(won[j] == 11010){\n\t\t\t\tnewtext += \" \";\n\t\t\t}else if(won[j] == 11011){\n\t\t\t\tnewtext += \".\";\n\t\t\t}else if(won[j] == 11100){\n\t\t\t\tnewtext += \",\";\n\t\t\t}else if(won[j] == 11101){\n\t\t\t\tnewtext += \"-\";\n\t\t\t}else if(won[j] == 11110){\n\t\t\t\tnewtext += \"'\";\n\t\t\t}else{\n\t\t\t\tnewtext += \"?\";\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(newtext);\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) throws java.io.IOException{\n        Scanner scan = new Scanner(System.in);\n        HashMap<Character,String> ep =new HashMap<Character,String>();\n        HashMap<String,Character> dp =new HashMap<String,Character>();\n\n\t\tep.put(' ', \"101\");\n\t\tep.put('\\'', \"000000\");\n\t\tep.put(',', \"000011\");\n\t\tep.put('-', \"10010001\");\n\t\tep.put('.', \"010001\");\n\t\tep.put('?', \"000001\");\n\t\tep.put('A', \"100101\");\n\t\tep.put('B', \"10011010\");\n\t\tep.put('C', \"0101\");\n\t\tep.put('D', \"0001\");\n\t\tep.put('E', \"110\");\n\t\tep.put('F', \"01001\");\n\t\tep.put('G', \"10011011\");\n\t\tep.put('H', \"010000\");\n\t\tep.put('I', \"0111\");\n\t\tep.put('J', \"10011000\");\n\t\tep.put('K', \"0110\");\n\t\tep.put('L', \"00100\");\n\t\tep.put('M', \"10011001\");\n\t\tep.put('N', \"10011110\");\n\t\tep.put('O', \"00101\");\n\t\tep.put('P', \"111\");\n\t\tep.put('Q', \"10011111\");\n\t\tep.put('R', \"1000\");\n\t\tep.put('S', \"00110\");\n\t\tep.put('T', \"00111\");\n\t\tep.put('U', \"10011100\");\n\t\tep.put('V', \"10011101\");\n\t\tep.put('W', \"000010\");\n\t\tep.put('X', \"10010010\");\n\t\tep.put('Y', \"10010011\");\n\t\tep.put('Z', \"10010000\");\n        \n\t\tdp.put(\"00000\", 'A');\n\t\tdp.put(\"00001\", 'B');\n\t\tdp.put(\"00010\", 'C');\n\t\tdp.put(\"00011\", 'D');\n\t\tdp.put(\"00100\", 'E');\n\t\tdp.put(\"00101\", 'F');\n\t\tdp.put(\"00110\", 'G');\n\t\tdp.put(\"00111\", 'H');\n\t\tdp.put(\"01000\", 'I');\n\t\tdp.put(\"01001\", 'J');\n\t\tdp.put(\"01010\", 'K');\n\t\tdp.put(\"01011\", 'L');\n\t\tdp.put(\"01100\", 'M');\n\t\tdp.put(\"01101\", 'N');\n\t\tdp.put(\"01110\", 'O');\n\t\tdp.put(\"01111\", 'P');\n\t\tdp.put(\"10000\", 'Q');\n\t\tdp.put(\"10001\", 'R');\n\t\tdp.put(\"10010\", 'S');\n\t\tdp.put(\"10011\", 'T');\n\t\tdp.put(\"10100\", 'U');\n\t\tdp.put(\"10101\", 'V');\n\t\tdp.put(\"10110\", 'W');\n\t\tdp.put(\"10111\", 'X');\n\t\tdp.put(\"11000\", 'Y');\n\t\tdp.put(\"11001\", 'Z');\n\t\tdp.put(\"11010\", ' ');\n\t\tdp.put(\"11011\", '.');\n\t\tdp.put(\"11100\", ',');\n\t\tdp.put(\"11101\", '-');\n\t\tdp.put(\"11110\", '\\'');\n\t\tdp.put(\"11111\", '?');\n        \n        while(scan.hasNext()){\n        \tchar [] line= scan.nextLine().toCharArray();\n        \tStringBuilder tmp=new StringBuilder();\n        \tfor(char c:line)\n        \t\ttmp.append(ep.get(c));\n        //\tSystem.out.println(tmp);\n        \twhile(tmp.length()%5!=0)tmp.append('0');\n     \n        \tString splitedCode =tmp.toString();\n        \tStringBuilder sb = new StringBuilder();\n        \tfor(int i=0;i<splitedCode.length();i+=5)\n        \t\tsb.append(dp.get(splitedCode.substring(i,i+5)));\n        \tSystem.out.println(sb);\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tstatic final HashMap<Character, String> c1 = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");\n\t\t\tput('\\\\', \"000000\");\n\t\t\tput(',', \"000011\");\n\t\t\tput('-', \"10010001\");\n\t\t\tput('.', \"010001\");\n\t\t\tput('?', \"000001\");\n\t\t\tput('A', \"100101\");\n\t\t\tput('B', \"10011010\");\n\t\t\tput('C', \"0101\");\n\t\t\tput('D', \"0001\");\n\t\t\tput('E', \"110\");\n\t\t\tput('F', \"01001\");\n\t\t\tput('G', \"10011011\");\n\t\t\tput('H', \"010000\");\n\t\t\tput('I', \"0111\");\n\t\t\tput('J', \"10011000\");\n\t\t\tput('K', \"0110\");\n\t\t\tput('L', \"00100\");\n\t\t\tput('M', \"10011001\");\n\t\t\tput('N', \"10011110\");\n\t\t\tput('O', \"00101\");\n\t\t\tput('P', \"111\");\n\t\t\tput('Q', \"10011111\");\n\t\t\tput('R', \"1000\");\n\t\t\tput('S', \"00110\");\n\t\t\tput('T', \"00111\");\n\t\t\tput('U', \"10011100\");\n\t\t\tput('V', \"10011101\");\n\t\t\tput('W', \"000010\");\n\t\t\tput('X', \"10010010\");\n\t\t\tput('Y', \"10010011\");\n\t\t\tput('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> c2 = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"00000\", 'A');\n\t\t\tput(\"00001\", 'B');\n\t\t\tput(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D');\n\t\t\tput(\"00100\", 'E');\n\t\t\tput(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G');\n\t\t\tput(\"00111\", 'H');\n\t\t\tput(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J');\n\t\t\tput(\"01010\", 'K');\n\t\t\tput(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M');\n\t\t\tput(\"01101\", 'N');\n\t\t\tput(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P');\n\t\t\tput(\"10000\", 'Q');\n\t\t\tput(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S');\n\t\t\tput(\"10011\", 'T');\n\t\t\tput(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V');\n\t\t\tput(\"10110\", 'W');\n\t\t\tput(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y');\n\t\t\tput(\"11001\", 'Z');\n\t\t\tput(\"11010\", ' ');\n\t\t\tput(\"11011\", '.');\n\t\t\tput(\"11100\", ',');\n\t\t\tput(\"11101\", '-');\n\t\t\tput(\"11110\", '\\'');\n\t\t\tput(\"11111\", '?');\n\t\t}\n\t};\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n\t\t\t//\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1.get(c));\n\t\t\t}\n\t\t\t//\n\t\t\tsb1.append(\"0000\");\n\t\t\t//\n\t\t\tline = sb1.toString();\n\t\t\tfor (int i = 0; i < sb1.length(); i += 5) {\n\t\t\t\tsb2.append(c2.get(line.substring(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println(sb2.toString());\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tstatic final HashMap<Character, String> c1 = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");\n\t\t\tput('\\\\', \"000000\");\n\t\t\tput(',', \"000011\");\n\t\t\tput('-', \"10010001\");\n\t\t\tput('.', \"010001\");\n\t\t\tput('?', \"000001\");\n\t\t\tput('A', \"100101\");\n\t\t\tput('B', \"10011010\");\n\t\t\tput('C', \"0101\");\n\t\t\tput('D', \"0001\");\n\t\t\tput('E', \"110\");\n\t\t\tput('F', \"01001\");\n\t\t\tput('G', \"10011011\");\n\t\t\tput('H', \"010000\");\n\t\t\tput('I', \"0111\");\n\t\t\tput('J', \"10011000\");\n\t\t\tput('K', \"0110\");\n\t\t\tput('L', \"00100\");\n\t\t\tput('M', \"10011001\");\n\t\t\tput('N', \"10011110\");\n\t\t\tput('O', \"00101\");\n\t\t\tput('P', \"111\");\n\t\t\tput('Q', \"10011111\");\n\t\t\tput('R', \"1000\");\n\t\t\tput('S', \"00110\");\n\t\t\tput('T', \"00111\");\n\t\t\tput('U', \"10011100\");\n\t\t\tput('V', \"10011101\");\n\t\t\tput('W', \"000010\");\n\t\t\tput('X', \"10010010\");\n\t\t\tput('Y', \"10010011\");\n\t\t\tput('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> c2 = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"00000\", 'A');\n\t\t\tput(\"00001\", 'B');\n\t\t\tput(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D');\n\t\t\tput(\"00100\", 'E');\n\t\t\tput(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G');\n\t\t\tput(\"00111\", 'H');\n\t\t\tput(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J');\n\t\t\tput(\"01010\", 'K');\n\t\t\tput(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M');\n\t\t\tput(\"01101\", 'N');\n\t\t\tput(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P');\n\t\t\tput(\"10000\", 'Q');\n\t\t\tput(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S');\n\t\t\tput(\"10011\", 'T');\n\t\t\tput(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V');\n\t\t\tput(\"10110\", 'W');\n\t\t\tput(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y');\n\t\t\tput(\"11001\", 'Z');\n\t\t\tput(\"11010\", ' ');\n\t\t\tput(\"11011\", '.');\n\t\t\tput(\"11100\", ',');\n\t\t\tput(\"11101\", '-');\n\t\t\tput(\"11110\", '\\'');\n\t\t\tput(\"11111\", '?');\n\t\t}\n\t};\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n\t\t\t//\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1.get(c));\n\t\t\t}\n\t\t\t//\n\t\t\tsb1.append(\"0000\");\n\t\t\t//\n\t\t\tline = sb1.toString();\n\t\t\tfor (int i = 0, j = 5; j < sb1.length() + 1; i += 5, j += 5) {\n\t\t\t\tsb2.append(c2.get(line.substring(i, j)));\n\t\t\t}\n\t\t\tSystem.out.println(sb2.toString());\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String[] args) \n\t{\n\t\tScanner in=new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t{\n\t\t\tchar ch[]=in.nextLine().toCharArray();\n\t\t\tString st=\"\";\n\t\t\tString ans=\"\";\n\t\t\tfor(int i=0;i<ch.length;i++)\n\t\t\t{\n\t\t\t\tif(ch[i]==' ')\n\t\t\t\t\tst+=\"101\";\n\t\t\t\telse if(ch[i]=='\\'')\n\t\t\t\t\tst+=\"000000\";\n\t\t\t\telse if(ch[i]==',')\n\t\t\t\t\tst+=\"000011\";\n\t\t\t\telse if(ch[i]=='-')\n\t\t\t\t\tst+=\"10010001\";\n\t\t\t\telse if(ch[i]=='.')\n\t\t\t\t\tst+=\"010001\";\n\t\t\t\telse if(ch[i]=='?')\n\t\t\t\t\tst+=\"000001\";\n\t\t\t\telse if(ch[i]=='A')\n\t\t\t\t\tst+=\"000011\";\n\t\t\t\telse if(ch[i]=='B')\n\t\t\t\t\tst+=\"10011010\";\n\t\t\t\telse if(ch[i]=='C')\n\t\t\t\t\tst+=\"0101\";\n\t\t\t\telse if(ch[i]=='D')\n\t\t\t\t\tst+=\"0001\";\n\t\t\t\telse if(ch[i]=='E')\n\t\t\t\t\tst+=\"110\";\n\t\t\t\telse if(ch[i]=='F')\n\t\t\t\t\tst+=\"01001\";\n\t\t\t\telse if(ch[i]=='G')\n\t\t\t\t\tst+=\"10011011\";\n\t\t\t\telse if(ch[i]=='H')\n\t\t\t\t\tst+=\"010000\";\n\t\t\t\telse if(ch[i]=='I')\n\t\t\t\t\tst+=\"0111\";\n\t\t\t\telse if(ch[i]=='J')\n\t\t\t\t\tst+=\"10011000\";\n\t\t\t\telse if(ch[i]=='K')\n\t\t\t\t\tst+=\"0110\";\n\t\t\t\telse if(ch[i]=='L')\n\t\t\t\t\tst+=\"00100\";\n\t\t\t\telse if(ch[i]=='M')\n\t\t\t\t\tst+=\"10011001\";\n\t\t\t\telse if(ch[i]=='N')\n\t\t\t\t\tst+=\"10011110\";\n\t\t\t\telse if(ch[i]=='O')\n\t\t\t\t\tst+=\"00101\";\n\t\t\t\telse if(ch[i]=='P')\n\t\t\t\t\tst+=\"111\";\n\t\t\t\telse if(ch[i]=='Q')\n\t\t\t\t\tst+=\"10011111\";\n\t\t\t\telse if(ch[i]=='R')\n\t\t\t\t\tst+=\"1000\";\n\t\t\t\telse if(ch[i]=='S')\n\t\t\t\t\tst+=\"00110\";\n\t\t\t\telse if(ch[i]=='T')\n\t\t\t\t\tst+=\"00111\";\n\t\t\t\telse if(ch[i]=='U')\n\t\t\t\t\tst+=\"10011000\";\n\t\t\t\telse if(ch[i]=='V')\n\t\t\t\t\tst+=\"10011001\";\n\t\t\t\telse if(ch[i]=='W')\n\t\t\t\t\tst+=\"000010\";\n\t\t\t\telse if(ch[i]=='X')\n\t\t\t\t\tst+=\"10010010\";\n\t\t\t\telse if(ch[i]=='Y')\n\t\t\t\t\tst+=\"10010011\";\n\t\t\t\telse if(ch[i]=='Z')\n\t\t\t\t\tst+=\"10010000\";\n\t\t\t}\n\t\t\twhile(st.length()%5!=0)\n\t\t\t\tst+=\"0\";\n\t\t\twhile(st.length()>0)\n\t\t\t{\n\t\t\t\tString tmp=st.substring(0, 5);\n\t\t\t\tst=st.substring(5, st.length());\n\t\t\t\t\n\t\t\t\tif(tmp.equals(\"00000\"))\n\t\t\t\t\tans+=\"A\";\n\t\t\t\telse if(tmp.equals(\"00001\"))\n\t\t\t\t\tans+=\"B\";\n\t\t\t\telse if(tmp.equals(\"00010\"))\n\t\t\t\t\tans+=\"C\";\n\t\t\t\telse if(tmp.equals(\"00011\"))\n\t\t\t\t\tans+=\"D\";\n\t\t\t\telse if(tmp.equals(\"00100\"))\n\t\t\t\t\tans+=\"E\";\n\t\t\t\telse if(tmp.equals(\"00101\"))\n\t\t\t\t\tans+=\"F\";\n\t\t\t\telse if(tmp.equals(\"00110\"))\n\t\t\t\t\tans+=\"G\";\n\t\t\t\telse if(tmp.equals(\"00111\"))\n\t\t\t\t\tans+=\"H\";\n\t\t\t\t\n\t\t\t\telse if(tmp.equals(\"01000\"))\n\t\t\t\t\tans+=\"I\";\n\t\t\t\telse if(tmp.equals(\"01001\"))\n\t\t\t\t\tans+=\"J\";\n\t\t\t\telse if(tmp.equals(\"01010\"))\n\t\t\t\t\tans+=\"K\";\n\t\t\t\telse if(tmp.equals(\"01011\"))\n\t\t\t\t\tans+=\"L\";\n\t\t\t\telse if(tmp.equals(\"01100\"))\n\t\t\t\t\tans+=\"M\";\n\t\t\t\telse if(tmp.equals(\"01101\"))\n\t\t\t\t\tans+=\"N\";\n\t\t\t\telse if(tmp.equals(\"01110\"))\n\t\t\t\t\tans+=\"O\";\n\t\t\t\telse if(tmp.equals(\"01111\"))\n\t\t\t\t\tans+=\"P\";\n\t\t\t\t\n\t\t\t\telse if(tmp.equals(\"10000\"))\n\t\t\t\t\tans+=\"Q\";\n\t\t\t\telse if(tmp.equals(\"10001\"))\n\t\t\t\t\tans+=\"R\";\n\t\t\t\telse if(tmp.equals(\"10010\"))\n\t\t\t\t\tans+=\"S\";\n\t\t\t\telse if(tmp.equals(\"10011\"))\n\t\t\t\t\tans+=\"T\";\n\t\t\t\telse if(tmp.equals(\"10100\"))\n\t\t\t\t\tans+=\"U\";\n\t\t\t\telse if(tmp.equals(\"10101\"))\n\t\t\t\t\tans+=\"V\";\n\t\t\t\telse if(tmp.equals(\"10110\"))\n\t\t\t\t\tans+=\"W\";\n\t\t\t\telse if(tmp.equals(\"10111\"))\n\t\t\t\t\tans+=\"X\";\n\t\t\t\t\n\t\t\t\t\n\t\t\t\telse if(tmp.equals(\"11000\"))\n\t\t\t\t\tans+=\"Y\";\n\t\t\t\telse if(tmp.equals(\"11001\"))\n\t\t\t\t\tans+=\"Z\";\n\t\t\t\telse if(tmp.equals(\"11010\"))\n\t\t\t\t\tans+=\" \";\n\t\t\t\telse if(tmp.equals(\"11011\"))\n\t\t\t\t\tans+=\".\";\n\t\t\t\telse if(tmp.equals(\"11100\"))\n\t\t\t\t\tans+=\",\";\n\t\t\t\telse if(tmp.equals(\"11101\"))\n\t\t\t\t\tans+=\"-\";\n\t\t\t\telse if(tmp.equals(\"11110\"))\n\t\t\t\t\tans+=\"'\";\n\t\t\t\telse if(tmp.equals(\"11111\"))\n\t\t\t\t\tans+=\"?\";\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;class Main{public static void main(String[]z){String t=new Scanner(System.in).nextLine();z=\" :101:':000000:,:000011:-:10010001:\\\\.:010001:\\\\?:000001:A:100101:B:10011010:C:0101:D:0001:E:110:F:01001:G:10011011:H:010000:I:0111:J:10011000:K:0110:L:00100:M:10011001:N:10011110:O:00101:P:111:Q:10011111:R:1000:S:00110:T:00111:U:10011100:V:10011101:W:000010:X:10010010:Y:10010011:Z:10010000\".split(\":\");int i,j;for(i=0;i<z.length;)t=t.replaceAll(z[i++],z[i++]);t+=\"0000\";for(i=0;i+4<t.length();System.out.print((char)j)){j=Integer.parseInt(t.substring(i,i+=5),2)+65;if(j>90)j=new int[]{32,46,44,45,39,63}[j-91];}System.out.println();}}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tString[] a={\" \",\"'\",\",\",\"-\",\".\",\"?\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\n\t\tString[] b1={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\t\tString[] b2={\"11010\",\"11110\",\"11100\",\"11101\",\"11011\",\"11111\",\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\"};\n\t\tScanner sc=new Scanner(System.in);\n\t\twhile(sc.hasNextLine()){\n\t\t\tchar[] c=sc.nextLine().toCharArray();\n\t\t\tString str=\"\";\n\t\t\tfor(int i=0;i<c.length;i++){\n\t\t\t\tfor(int j=0;j<a.length;j++){\n\t\t\t\t\tif(a[j].equals(c[i]+\"\")){\n\t\t\t\t\t\tstr+=b1[j];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tc=str.toCharArray();\n\t\t\tString[] strArray=new String[c.length/5+1];\n\t\t\tint ptr=0;\n\t\t\tfor(int i=0;i<strArray.length;i++){\n\t\t\t\tstrArray[i]=\"\";\n\t\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\t\ttry{\n\t\t\t\t\t\tstrArray[i]+=(c[ptr++]+\"\");\n\t\t\t\t\t}catch(ArrayIndexOutOfBoundsException e){\n\t\t\t\t\t\tstrArray[i]+=\"0\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tString answer=\"\";\n\t\t\tfor(int i=0;i<strArray.length;i++){\n\t\t\t\tfor(int j=0;j<b2.length;j++){\n\t\t\t\t\tif(strArray[i].equals(b2[j])){\n\t\t\t\t\t\tanswer+=a[j];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(answer);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.io.*;\n//import java.util.Arrays;\npublic class Main {\n\tpublic static void main(String[] args) throws java.io.IOException {\n\t\tScanner scan = new Scanner(System.in);\n\t\tInputStreamReader is = new InputStreamReader(System.in);\n\t\tBufferedReader br = new BufferedReader(is);\n\t\tString text = \"\";\n\t\twhile(scan.hasNext()){\n\t\t\ttext += br.readLine();\n\t\t}\n\t\tchar mozi[] = text.toCharArray();\n\t\tString To = \"\";\n\t\tfor(int i = 0 ; i < mozi.length ; i++){\n\t\t\tString Hantei =  String.valueOf(mozi[i]);\n\t\t\tif(Hantei.equals(\"A\")){\n\t\t\t\tTo += \"100101\";\n\t\t\t}else if(Hantei.equals(\"B\")){\n\t\t\t\tTo += \"10011010\";\n\t\t\t}else if(Hantei.equals(\"C\")){\n\t\t\t\tTo += \"0101\";\n\t\t\t}else if(Hantei.equals(\"D\")){\n\t\t\t\tTo += \"0001\";\n\t\t\t}else if(Hantei.equals(\"E\")){\n\t\t\t\tTo += \"110\";\n\t\t\t}else if(Hantei.equals(\"F\")){\n\t\t\t\tTo += \"01001\";\n\t\t\t}else if(Hantei.equals(\"G\")){\n\t\t\t\tTo += \"10011011\";\n\t\t\t}else if(Hantei.equals(\"H\")){\n\t\t\t\tTo += \"010000\";\n\t\t\t}else if(Hantei.equals(\"I\")){\n\t\t\t\tTo += \"0111\";\n\t\t\t}else if(Hantei.equals(\"J\")){\n\t\t\t\tTo += \"10011000\";\n\t\t\t}else if(Hantei.equals(\"K\")){\n\t\t\t\tTo += \"0110\";\n\t\t\t}else if(Hantei.equals(\"L\")){\n\t\t\t\tTo += \"00100\";\n\t\t\t}else if(Hantei.equals(\"M\")){\n\t\t\t\tTo += \"10011001\";\n\t\t\t}else if(Hantei.equals(\"N\")){\n\t\t\t\tTo += \"10011110\";\n\t\t\t}else if(Hantei.equals(\"O\")){\n\t\t\t\tTo += \"00101\";\n\t\t\t}else if(Hantei.equals(\"P\")){\n\t\t\t\tTo += \"111\";\n\t\t\t}else if(Hantei.equals(\"Q\")){\n\t\t\t\tTo += \"10011111\";\n\t\t\t}else if(Hantei.equals(\"R\")){\n\t\t\t\tTo += \"1000\";\n\t\t\t}else if(Hantei.equals(\"S\")){\n\t\t\t\tTo += \"00110\";\n\t\t\t}else if(Hantei.equals(\"T\")){\n\t\t\t\tTo += \"00111\";\n\t\t\t}else if(Hantei.equals(\"U\")){\n\t\t\t\tTo += \"10011100\";\n\t\t\t}else if(Hantei.equals(\"V\")){\n\t\t\t\tTo += \"10011101\";\n\t\t\t}else if(Hantei.equals(\"W\")){\n\t\t\t\tTo += \"000010\";\n\t\t\t}else if(Hantei.equals(\"X\")){\n\t\t\t\tTo += \"10010010\";\n\t\t\t}else if(Hantei.equals(\"Y\")){\n\t\t\t\tTo += \"10010011\";\n\t\t\t}else if(Hantei.equals(\"Z\")){\n\t\t\t\tTo += \"10010000\";\n\t\t\t}else if(Hantei.equals(\" \")){\n\t\t\t\tTo += \"101\";\n\t\t\t}else if(Hantei.equals(\"'\")){\n\t\t\t\tTo += \"000000\";\n\t\t\t}else if(Hantei.equals(\",\")){\n\t\t\t\tTo += \"000011\";\n\t\t\t}else if(Hantei.equals(\"-\")){\n\t\t\t\tTo += \"10010001\";\n\t\t\t}else if(Hantei.equals(\".\")){\n\t\t\t\tTo += \"010001\";\n\t\t\t}else if(Hantei.equals(\"?\")){\n\t\t\t\tTo += \"000001\";\n\t\t\t}\n\t\t}\n\t\tint amari =  To.length()%5;\n\t\tif(amari == 1){\n\t\t\tTo += \"0000\";\n\t\t}else if(amari == 2){\n\t\t\tTo += \"000\";\n\t\t}else if(amari == 3){\n\t\t\tTo += \"00\";\n\t\t}else if(amari == 4){\n\t\t\tTo += \"0\";\n\t\t}\n\t\tint won[] = new int[To.length()/5];\n\t\tint j;\n\t\tString newtext = \"\";\n\t\tfor(j = 0 ; j < To.length()/5 ; j++){\n\t\t\twon[j] = Integer.parseInt(To.substring(j*5,(j+1)*5));\n\t\t\tif(won[j] == 0){\n\t\t\t\tnewtext += \"A\";\n\t\t\t}else if(won[j] == 1){\n\t\t\t\tnewtext += \"B\";\n\t\t\t}else if(won[j] == 10){\n\t\t\t\tnewtext += \"C\";\n\t\t\t}else if(won[j] == 11){\n\t\t\t\tnewtext += \"D\";\n\t\t\t}else if(won[j] == 100){\n\t\t\t\tnewtext += \"E\";\n\t\t\t}else if(won[j] == 101){\n\t\t\t\tnewtext += \"F\";\n\t\t\t}else if(won[j] == 110){\n\t\t\t\tnewtext += \"G\";\n\t\t\t}else if(won[j] == 111){\n\t\t\t\tnewtext += \"H\";\n\t\t\t}else if(won[j] == 1000){\n\t\t\t\tnewtext += \"I\";\n\t\t\t}else if(won[j] == 1001){\n\t\t\t\tnewtext += \"J\";\n\t\t\t}else if(won[j] == 1010){\n\t\t\t\tnewtext += \"K\";\n\t\t\t}else if(won[j] == 1011){\n\t\t\t\tnewtext += \"L\";\n\t\t\t}else if(won[j] == 1100){\n\t\t\t\tnewtext += \"M\";\n\t\t\t}else if(won[j] == 1101){\n\t\t\t\tnewtext += \"N\";\n\t\t\t}else if(won[j] == 1110){\n\t\t\t\tnewtext += \"O\";\n\t\t\t}else if(won[j] == 1111){\n\t\t\t\tnewtext += \"P\";\n\t\t\t}else if(won[j] == 10000){\n\t\t\t\tnewtext += \"Q\";\n\t\t\t}else if(won[j] == 10001){\n\t\t\t\tnewtext += \"R\";\n\t\t\t}else if(won[j] == 10010){\n\t\t\t\tnewtext += \"S\";\n\t\t\t}else if(won[j] == 10011){\n\t\t\t\tnewtext += \"T\";\n\t\t\t}else if(won[j] == 10100){\n\t\t\t\tnewtext += \"U\";\n\t\t\t}else if(won[j] == 10101){\n\t\t\t\tnewtext += \"V\";\n\t\t\t}else if(won[j] == 10110){\n\t\t\t\tnewtext += \"W\";\n\t\t\t}else if(won[j] == 10111){\n\t\t\t\tnewtext += \"X\";\n\t\t\t}else if(won[j] == 11000){\n\t\t\t\tnewtext += \"Y\";\n\t\t\t}else if(won[j] == 11001){\n\t\t\t\tnewtext += \"Z\";\n\t\t\t}else if(won[j] == 11010){\n\t\t\t\tnewtext += \" \";\n\t\t\t}else if(won[j] == 11011){\n\t\t\t\tnewtext += \".\";\n\t\t\t}else if(won[j] == 11100){\n\t\t\t\tnewtext += \",\";\n\t\t\t}else if(won[j] == 11101){\n\t\t\t\tnewtext += \"-\";\n\t\t\t}else if(won[j] == 11110){\n\t\t\t\tnewtext += \"'\";\n\t\t\t}else{\n\t\t\t\tnewtext += \"?\";\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(newtext);\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tString[] c = new String[]{\n\t\t\t\t\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\n\t\t\t\t\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n\t\t\t\t\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\n\t\t\t\t\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\n\t\t\t\t\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"\n\t\t};\n\t\t\n\t\tStringBuffer sb = new StringBuffer();\n\t\tStringBuffer ans = new StringBuffer();\n\t\tString s = sc.nextLine();\n\t\t\n\t\tint p, q;\n\t\tfor(int i=0;i<s.length();i++){\n\t\t\tp = s.codePointAt(i);\n\t\t\tif(p>=65 && p<=90) sb.append(c[p-65]);\n\t\t\telse if(p==32) sb.append(\"101\");\n\t\t\telse if(p==39) sb.append(\"000000\");\n\t\t\telse if(p==44) sb.append(\"000011\");\n\t\t\telse if(p==45) sb.append(\"10010001\");\n\t\t\telse if(p==46) sb.append(\"010001\");\n\t\t\telse if(p==63) sb.append(\"000001\");\n\t\t}\n\t\t\n\t\tp = sb.length()%5;\n\t\tif(p!=0){\n\t\t\tfor(int i=0;i<5-p;i++) sb.append(\"0\");\n\t\t}\n\t\t\n\t\tfor(int i=0;i<sb.length();i+=5){\n\t\t\tp = 0;\n\t\t\tq = 16;\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\tp += (sb.codePointAt(i+j)-48)*q;\n\t\t\t\tq /= 2;\n\t\t\t}\n\t\t\tif(p<=25) ans.append((char)(p+65));\n\t\t\telse if(p==26) ans.append(\" \");\n\t\t\telse if(p==27) ans.append(\".\");\n\t\t\telse if(p==28) ans.append(\",\");\n\t\t\telse if(p==29) ans.append(\"-\");\n\t\t\telse if(p==30) ans.append(\"'\");\n\t\t\telse if(p==31) ans.append(\"?\");\n\t\t}\n\n\t\tSystem.out.println(ans);\n\t}\t\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main {\n\tScanner sc = new Scanner(System.in);\n\n\tHashMap<Character,String> map=new HashMap<Character, String>();\n\n\tpublic void run() {\n\t\tmap.put(' ',\"101\");\n\t\tmap.put('\\'',\"000000\");\n\t\tmap.put(',',\"000011\");\n\t\tmap.put('-',\"10010001\");\n\t\tmap.put('.',\"010001\");\n\t\tmap.put('?',\"000001\");\n\t\tmap.put('?',\"000001\");\n\t\tmap.put('A',\"100101\");\n\t\tmap.put('B',\"10011010\");\n\t\tmap.put('C',\"0101\");\n\t\tmap.put('D',\"0001\");\n\t\tmap.put('E',\"110\");\n\t\tmap.put('F',\"01001\");\n\t\tmap.put('G',\"10011011\");\n\t\tmap.put('H',\"010000\");\n\t\tmap.put('I',\"0111\");\n\t\tmap.put('J',\"10011000\");\n\t\tmap.put('K',\"0110\");\n\t\tmap.put('L',\"00100\");\n\t\tmap.put('M',\"10011001\");\n\t\tmap.put('N',\"10011110\");\n\t\tmap.put('O',\"00101\");\n\t\tmap.put('P',\"111\");\n\t\tmap.put('Q',\"10011111\");\n\t\tmap.put('R',\"1000\");\n\t\tmap.put('S',\"00110\");\n\t\tmap.put('T',\"00111\");\n\t\tmap.put('U',\"10011100\");\n\t\tmap.put('V',\"10011101\");\n\t\tmap.put('W',\"000010\");\n\t\tmap.put('X',\"10010010\");\n\t\tmap.put('Y',\"10010011\");\n\t\tmap.put('Z',\"10010000\");\n\n\t\twhile(sc.hasNextLine()){\n\t\t\tString str=sc.nextLine();\n\t\t\tString str1=\"\";\n\t\t\tString res=\"\";\n\t\t\tfor(char c:str.toCharArray()){\n\t\t\t\tstr1+=map.get(c);\n\t\t\t}\n\t\t\twhile(str1.length()%5!=0)str1+='0';\n\n\t\t\tfor(int s=0,e=5;e<=str1.length();s+=5,e+=5){\n\t\t\t\tint val=Integer.parseInt(str1.substring(s,e),2);\n\t\t\t\tif(0<=val && val<26){\n\t\t\t\t\tres+=(char)('A'+val);\n\t\t\t\t}else{\n\t\t\t\t\tswitch(val){\n\t\t\t\t\tcase 26:res+=\" \";break;\n\t\t\t\t\tcase 27:res+=\".\";break;\n\t\t\t\t\tcase 28:res+=\",\";break;\n\t\t\t\t\tcase 29:res+=\"-\";break;\n\t\t\t\t\tcase 30:res+=\"'\";break;\n\t\t\t\t\tcase 31:res+=\"?\";break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tln(res);\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\n\tpublic static void pr(Object o) {\n\t\tSystem.out.print(o);\n\t}\n\n\tpublic static void ln(Object o) {\n\t\tSystem.out.println(o);\n\t}\n\n\tpublic static void ln() {\n\t\tSystem.out.println();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tstatic final HashMap<Character, String> c1 = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");\n\t\t\tput('\\'', \"000000\");\n\t\t\tput(',', \"000011\");\n\t\t\tput('-', \"10010001\");\n\t\t\tput('.', \"010001\");\n\t\t\tput('?', \"000001\");\n\t\t\tput('A', \"100101\");\n\t\t\tput('B', \"10011010\");\n\t\t\tput('C', \"0101\");\n\t\t\tput('D', \"0001\");\n\t\t\tput('E', \"110\");\n\t\t\tput('F', \"01001\");\n\t\t\tput('G', \"10011011\");\n\t\t\tput('H', \"010000\");\n\t\t\tput('I', \"0111\");\n\t\t\tput('J', \"10011000\");\n\t\t\tput('K', \"0110\");\n\t\t\tput('L', \"00100\");\n\t\t\tput('M', \"10011001\");\n\t\t\tput('N', \"10011110\");\n\t\t\tput('O', \"00101\");\n\t\t\tput('P', \"111\");\n\t\t\tput('Q', \"10011111\");\n\t\t\tput('R', \"1000\");\n\t\t\tput('S', \"00110\");\n\t\t\tput('T', \"00111\");\n\t\t\tput('U', \"10011100\");\n\t\t\tput('V', \"10011101\");\n\t\t\tput('W', \"000010\");\n\t\t\tput('X', \"10010010\");\n\t\t\tput('Y', \"10010011\");\n\t\t\tput('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> c2 = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"11010\", ' ');\n\t\t\tput(\"11110\", '\\'');\n\t\t\tput(\"11100\", ',');\n\t\t\tput(\"11101\", '-');\n\t\t\tput(\"11011\", '.');\n\t\t\tput(\"11111\", '?');\n\t\t\tput(\"00000\", 'A');\n\t\t\tput(\"00001\", 'B');\n\t\t\tput(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D');\n\t\t\tput(\"00100\", 'E');\n\t\t\tput(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G');\n\t\t\tput(\"00111\", 'H');\n\t\t\tput(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J');\n\t\t\tput(\"01010\", 'K');\n\t\t\tput(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M');\n\t\t\tput(\"01101\", 'N');\n\t\t\tput(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P');\n\t\t\tput(\"10000\", 'Q');\n\t\t\tput(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S');\n\t\t\tput(\"10011\", 'T');\n\t\t\tput(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V');\n\t\t\tput(\"10110\", 'W');\n\t\t\tput(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y');\n\t\t\tput(\"11001\", 'Z');\n\t\t}\n\t};\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\n\t\t\t//\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1.get(c));\n\t\t\t}\n\n\t\t\twhile (sb1.length() % 5 != 0) {\n\t\t\t\tsb1.append('0');\n\t\t\t}\n\n\t\t\t//\n\t\t\tfor (int i = 0; i < sb1.length() / 5; i++) {\n\t\t\t\tString five = sb1.substring(i * 5, i * 5 + 5);\n\t\t\t\tsb2.append(c2.get(five));\n\t\t\t}\n\n\t\t\tSystem.out.println(sb2.toString());\n\n\t\t}\n\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tMap<String, String> m1 = new HashMap<String, String>();\n\t\tm1.put(\" \", \"101\");\n\t\tm1.put(\"'\", \"000000\");\n\t\tm1.put(\",\", \"000011\");\n\t\tm1.put(\"-\", \"10010001\");\n\t\tm1.put(\".\", \"010001\");\n\t\tm1.put(\"?\", \"000001\");\n\t\tm1.put(\"A\", \"100101\");\n\t\tm1.put(\"B\", \"10011010\");\n\t\tm1.put(\"C\", \"0101\");\n\t\tm1.put(\"D\", \"0001\");\n\t\tm1.put(\"E\", \"110\");\n\t\tm1.put(\"F\", \"01001\");\n\t\tm1.put(\"G\", \"10011011\");\n\t\tm1.put(\"H\", \"010000\");\n\t\tm1.put(\"I\", \"0111\");\n\t\tm1.put(\"J\", \"10011000\");\n\t\tm1.put(\"K\", \"0110\");\n\t\tm1.put(\"L\", \"00100\");\n\t\tm1.put(\"M\", \"10011001\");\n\t\tm1.put(\"N\", \"10011110\");\n\t\tm1.put(\"O\", \"00101\");\n\t\tm1.put(\"P\", \"111\");\n\t\tm1.put(\"Q\", \"10011111\");\n\t\tm1.put(\"R\", \"1000\");\n\t\tm1.put(\"S\", \"00110\");\n\t\tm1.put(\"T\", \"00111\");\n\t\tm1.put(\"U\", \"10011100\");\n\t\tm1.put(\"V\", \"10011101\");\n\t\tm1.put(\"W\", \"000010\");\n\t\tm1.put(\"X\", \"10010010\");\n\t\tm1.put(\"Y\", \"10010011\");\n\t\tm1.put(\"Z\", \"10010000\");\n\t\tString[] s = new String[32];\n\t\tfor(int i = 0; i < 26; i++) {\n\t\t\ts[i] = Character.toString((char)(i + 'A'));\n\t\t}\n\t\ts[26] = \" \";\n\t\ts[27] = \".\";\n\t\ts[28] = \",\";\n\t\ts[29] = \"-\";\n\t\ts[30] = \"'\";\n\t\ts[31] = \"?\";\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()) {\n\t\t\tString S = sc.nextLine();\n\t\t\tString t = \"\";\n\t\t\tfor(int i = 0; i < S.length(); i++) {\n\t\t\t\tt += m1.get(S.substring(i, i + 1));\n\t\t\t}\n\t\t\tif(t.length() % 5 != 0) {\n\t\t\t\tint k = 5 - t.length() % 5;\n\t\t\t\tfor(int i = 0; i < k; i++) {\n\t\t\t\t\tt += \"0\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tString g = \"\";\n\t\t\tfor(int i = 0; i + 5 <= t.length(); i += 5) {\n\t\t\t\tString sub = t.substring(i, i + 5);\n\t\t\t\tg += s[Integer.parseInt(sub, 2)];\n\t\t\t}\n\t\t\tSystem.out.println(g);\n\t\t}\n\t\tsc.close();\n\t}\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n   Scanner in = new Scanner(System.in);\n\n   String[] a = {\n        \" \", \"101\", \"'\", \"000000\", \",\", \"000011\", \"-\", \"10010001\",\n        \".\", \"010001\", \"?\", \"000001\", \"A\", \"100101\", \"B\", \"10011010\",\n        \"C\", \"0101\", \"D\", \"0001\", \"E\", \"110\", \"F\", \"01001\", \"G\", \"10011011\",\n        \"H\", \"010000\", \"I\", \"0111\", \"J\", \"10011000\", \"K\", \"0110\",\n        \"L\", \"00100\", \"M\", \"10011001\", \"N\", \"10011110\", \"O\", \"00101\",\n        \"P\", \"111\", \"Q\", \"1001111\", \"R\", \"1000\", \"S\", \"00110\", \"T\", \"00111\",\n        \"U\", \"10011100\", \"V\", \"10011101\", \"W\", \"000010\", \"X\", \"10010010\",\n        \"Y\", \"10010011\", \"Z\", \"10010000\"};\n    \n    char[] b = {\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n        'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n        'Y', 'Z', ' ', '.', ',', '-', '\\'', '?' \n    };\n   void solve(){\n       HashMap<Character, String> map = new HashMap<>();\n       for(int i = 0; i < a.length; i += 2){\n           map.put(a[i].charAt(0), a[i + 1]);\n       }\n       String s;\n       while(in.hasNextLine()){\n           s = in.nextLine();\n           StringBuilder sb = new StringBuilder();\n           for(char ch: s.toCharArray()){\n               sb.append(map.get(new Character(ch)));\n           }\n           int x = 5 - sb.length()%5;\n           for(int i = 0; i < x; i++){\n               sb.append('0');\n           }\n           StringBuilder ans = new StringBuilder();\n           String tmp = sb.toString();\n           System.out.println(tmp);\n           for(int i = 0; i < tmp.length(); i += 5){\n                int idx = 0;\n                String num = tmp.substring(i, i + 5);\n                for(int j = 0; j < 5; j++){\n                    idx *= 2;\n                    idx += num.charAt(j) == '1' ? 1 : 0;\n                }\n                ans.append(b[idx]);\n           }\n           System.out.println(ans.toString());\n       }\n   }\n\n   public static void main(String[] args){\n       new Main().solve();    \n   }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tMain instance = new Main();\n\t\tinstance.execute();\n\t}\n\t\n\tprivate void execute() throws IOException {\n\t\tBufferedReader sc = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tMap<String, String> encriptMap = getEncriptMap();\n\t\tMap<String, String> decriptMap = getDecriptMap();\n\n\t\tStringBuilder sb;\n\t\tStringBuilder result;\n\t\tString line;\n\t\twhile((line = sc.readLine()) != null) {\n\t\t\tsb = new StringBuilder();\n\t\t\tfor(int i = 0 ; i < line.length() ; i++) {\n\t\t\t\tsb.append(encriptMap.get(line.substring(i, i + 1)));\n\t\t\t}\n\t\t\t\n\t\t\twhile(sb.length() % 5 > 0) {\n\t\t\t\tsb.append(\"0\");\n\t\t\t}\n\t\t\t\n\t\t\tresult = new StringBuilder();\n\t\t\tfor(int i = 0 ; i < sb.length(); i = i + 5) {\n\t\t\t\tresult.append(decriptMap.get(sb.substring(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println(result.toString());\n\t\t}\n\t}\n\t\n\tprivate Map<String, String> getEncriptMap() {\n\t\tMap<String, String> map = new HashMap<String, String>();\n\t\tmap.put(\" \", \"101\");\n\t\tmap.put(\"'\", \"000000\");\n\t\tmap.put(\",\", \"000011\");\n\t\tmap.put(\"-\", \"10010001\");\n\t\tmap.put(\".\", \"010001\");\n\t\tmap.put(\"?\", \"000001\");\n\t\tmap.put(\"A\", \"100101\");\n\t\tmap.put(\"B\", \"10011010\");\n\t\tmap.put(\"C\", \"0101\");\n\t\tmap.put(\"D\", \"0001\");\n\t\tmap.put(\"E\", \"110\");\n\t\tmap.put(\"F\", \"01001\");\n\t\tmap.put(\"G\", \"10011011\");\n\t\tmap.put(\"H\", \"010000\");\n\t\tmap.put(\"I\", \"0111\");\n\t\tmap.put(\"J\", \"10011000\");\n\t\tmap.put(\"K\", \"0110\");\n\t\tmap.put(\"L\", \"00100\");\n\t\tmap.put(\"M\", \"10011001\");\n\t\tmap.put(\"N\", \"10011110\");\n\t\tmap.put(\"O\", \"00101\");\n\t\tmap.put(\"P\", \"111\");\n\t\tmap.put(\"Q\", \"10011111\");\n\t\tmap.put(\"R\", \"1000\");\n\t\tmap.put(\"S\", \"00110\");\n\t\tmap.put(\"T\", \"00111\");\n\t\tmap.put(\"U\", \"10011100\");\n\t\tmap.put(\"V\", \"10011101\");\n\t\tmap.put(\"W\", \"000010\");\n\t\tmap.put(\"X\", \"10010010\");\n\t\tmap.put(\"Y\", \"10010011\");\n\t\tmap.put(\"Z\", \"10010000\");\n\t\treturn map;\n\t}\n\tprivate Map<String, String> getDecriptMap() {\n\t\tMap<String, String> map = new HashMap<String, String>();\n\t\tmap.put(\"00000\", \"A\");\n\t\tmap.put(\"00001\", \"B\");\n\t\tmap.put(\"00010\", \"C\");\n\t\tmap.put(\"00011\", \"D\");\n\t\tmap.put(\"00100\", \"E\");\n\t\tmap.put(\"00101\", \"F\");\n\t\tmap.put(\"00110\", \"G\");\n\t\tmap.put(\"00111\", \"H\");\n\t\tmap.put(\"01000\", \"I\");\n\t\tmap.put(\"01001\", \"J\");\n\t\tmap.put(\"01010\", \"K\");\n\t\tmap.put(\"01011\", \"L\");\n\t\tmap.put(\"01100\", \"M\");\n\t\tmap.put(\"01101\", \"N\");\n\t\tmap.put(\"01110\", \"O\");\n\t\tmap.put(\"01111\", \"P\");\n\t\tmap.put(\"10000\", \"Q\");\n\t\tmap.put(\"10001\", \"R\");\n\t\tmap.put(\"10010\", \"S\");\n\t\tmap.put(\"10011\", \"T\");\n\t\tmap.put(\"10100\", \"U\");\n\t\tmap.put(\"10101\", \"V\");\n\t\tmap.put(\"10110\", \"W\");\n\t\tmap.put(\"10111\", \"X\");\n\t\tmap.put(\"11000\", \"Y\");\n\t\tmap.put(\"11001\", \"Z\");\n\t\tmap.put(\"11010\", \" \");\n\t\tmap.put(\"11011\", \".\");\n\t\tmap.put(\"11100\", \",\");\n\t\tmap.put(\"11101\", \"-\");\n\t\tmap.put(\"11110\", \"'\");\n\t\tmap.put(\"11111\", \"?\");\n\t\treturn map;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\tprivate Scanner sc;\n\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\t\n\tpublic Main() {\n\t\tsc = new Scanner(System.in);\n\t\t\n\t\twhile (sc.hasNextLine()) {\n\t\t\tString nico = sc.nextLine();\n\t\t\t\n\t\t\tString ans = \"\";\n\t\t\tString tmp = \"\";\n\t\t\tfor (int i = 0; i < nico.length(); i++) {\n\t\t\t\tswitch (nico.charAt(i)) {\n\t\t\t\tcase ' ' :\n\t\t\t\t\ttmp = tmp + \"101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '\\'':\n\t\t\t\t\ttmp = tmp + \"000000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase ',':\n\t\t\t\t\ttmp = tmp + \"000011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttmp = tmp + \"10010001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '.':\n\t\t\t\t\ttmp = tmp + \"010001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '?':\n\t\t\t\t\ttmp = tmp + \"000001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'A':\n\t\t\t\t\ttmp = tmp + \"100101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'B':\n\t\t\t\t\ttmp = tmp + \"10011010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'C':\n\t\t\t\t\ttmp = tmp + \"0101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'D':\n\t\t\t\t\ttmp = tmp + \"0001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'E':\n\t\t\t\t\ttmp = tmp + \"110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'F':\n\t\t\t\t\ttmp = tmp + \"01001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'G':\n\t\t\t\t\ttmp = tmp + \"10011011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'H':\n\t\t\t\t\ttmp = tmp + \"010000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'I':\n\t\t\t\t\ttmp = tmp + \"0111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'J':\n\t\t\t\t\ttmp = tmp + \"10011000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'K':\n\t\t\t\t\ttmp = tmp + \"0110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'L':\n\t\t\t\t\ttmp = tmp + \"00100\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'M':\n\t\t\t\t\ttmp = tmp + \"10011001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'N':\n\t\t\t\t\ttmp = tmp + \"10011110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'O':\n\t\t\t\t\ttmp = tmp + \"00101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'P':\n\t\t\t\t\ttmp = tmp + \"111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Q':\n\t\t\t\t\ttmp = tmp + \"10011111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'R':\n\t\t\t\t\ttmp = tmp + \"1000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'S':\n\t\t\t\t\ttmp = tmp + \"00110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'T':\n\t\t\t\t\ttmp = tmp + \"00111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'U':\n\t\t\t\t\ttmp = tmp + \"10011100\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'V':\n\t\t\t\t\ttmp = tmp + \"10011101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'W':\n\t\t\t\t\ttmp = tmp + \"000010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'X':\n\t\t\t\t\ttmp = tmp + \"10010010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Y':\n\t\t\t\t\ttmp = tmp + \"10010011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Z':\n\t\t\t\t\ttmp = tmp + \"10010000\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twhile (tmp.length() >= 5) {\n\t\t\t\t\tans = ans + getChar(tmp.substring(0, 5));\n\t\t\t\t\ttmp = tmp.substring(5);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tmp.length() != 0) {\n\t\t\t\tint lim = 5 - tmp.length();\n\t\t\t\tfor (int i = 0; i < lim; i++) {\n\t\t\t\t\ttmp = tmp + \"0\";\n\t\t\t\t}\n\t\t\t\tans = ans + getChar(tmp);\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n\t\n\tprivate char getChar(String str) {\n\t\tswitch (str) {\n\t\tcase \"00000\":\n\t\t\treturn 'A';\n\t\tcase \"00001\":\n\t\t\treturn 'B';\n\t\tcase \"00010\":\n\t\t\treturn 'C';\n\t\tcase \"00011\":\n\t\t\treturn 'D';\n\t\tcase \"00100\":\n\t\t\treturn 'E';\n\t\tcase \"00101\":\n\t\t\treturn 'F';\n\t\tcase \"00110\":\n\t\t\treturn 'G';\n\t\tcase \"00111\":\n\t\t\treturn 'H';\n\t\tcase \"01000\":\n\t\t\treturn 'I';\n\t\tcase \"01001\":\n\t\t\treturn 'J';\n\t\tcase \"01010\":\n\t\t\treturn 'K';\n\t\tcase \"01011\":\n\t\t\treturn 'L';\n\t\tcase \"01100\":\n\t\t\treturn 'M';\n\t\tcase \"01101\":\n\t\t\treturn 'N';\n\t\tcase \"01110\":\n\t\t\treturn 'O';\n\t\tcase \"01111\":\n\t\t\treturn 'P';\n\t\tcase \"10000\":\n\t\t\treturn 'Q';\n\t\tcase \"10001\":\n\t\t\treturn 'R';\n\t\tcase \"10010\":\n\t\t\treturn 'S';\n\t\tcase \"10011\":\n\t\t\treturn 'T';\n\t\tcase \"10100\":\n\t\t\treturn 'U';\n\t\tcase \"10101\":\n\t\t\treturn 'V';\n\t\tcase \"10110\":\n\t\t\treturn 'W';\n\t\tcase \"10111\":\n\t\t\treturn 'X';\n\t\tcase \"11000\":\n\t\t\treturn 'Y';\n\t\tcase \"11001\":\n\t\t\treturn 'Z';\n\t\tcase \"11010\":\n\t\t\treturn ' ';\n\t\tcase \"11011\":\n\t\t\treturn '.';\n\t\tcase \"11100\":\n\t\t\treturn ',';\n\t\tcase \"11101\":\n\t\t\treturn '-';\n\t\tcase \"11110\":\n\t\t\treturn '\\'';\n\t\tcase \"11111\":\n\t\t\treturn '?';\n\t\t}\n\t\t\n\t\treturn 0;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "//Volume0-0088\nimport java.util.HashMap;\nimport java.util.Scanner;\n\npublic class Main {\n\n\t//declare\n\tprivate static HashMap<Character,String> CtoS = new HashMap<Character,String>();\n\tprivate static HashMap<String,Character> StoC = new HashMap<String,Character>();\n\n\tpublic static void main(String[] args) {\n\n\t\tint    padding;\n\t\tchar[] ch;\n\t\tString s;\n\n\t\t//initialize\n\t\tinitMap();\n\n        //input\n        Scanner sc = new Scanner(System.in);\n        while(sc.hasNext()){\n        \tch = sc.nextLine().toCharArray();\n\n        \t//calculate\n        \ts = \"\";\n        \tfor(int i=0;i<ch.length;i++){\n        \t\ts += CtoS.get(ch[i]);\n        \t}\n        \tpadding = 5 - s.length() % 5;\n        \tif(padding < 5){\n        \t\twhile(padding-- > 0){\n        \t\t\ts += \"0\";\n        \t\t}\n        \t}\n\n        \t//output\n        \tfor(int i=0;i<s.length();i+=5){\n        \t\tSystem.out.print(StoC.get(s.substring(i, i+5)));\n        \t}\n        \tSystem.out.println();\n        }\n\t}\n\n\tprivate static void initMap(){\n\n\t\t//initialize CtoS.\n\t\tCtoS.put(' ', \"101\");\n\t\tCtoS.put('\\'',\"000000\");\n\t\tCtoS.put(',', \"000011\");\n\t\tCtoS.put('-', \"10010001\");\n\t\tCtoS.put('.', \"010001\");\n\t\tCtoS.put('?', \"000001\");\n\t\tCtoS.put('A', \"100101\");\n\t\tCtoS.put('B', \"10011010\");\n\t\tCtoS.put('C', \"0101\");\n\t\tCtoS.put('D', \"0001\");\n\t\tCtoS.put('E', \"110\");\n\t\tCtoS.put('F', \"01001\");\n\t\tCtoS.put('G', \"10011011\");\n\t\tCtoS.put('H', \"010000\");\n\t\tCtoS.put('I', \"0111\");\n\t\tCtoS.put('J', \"10011000\");\n\t\tCtoS.put('K', \"0110\");\n\t\tCtoS.put('L', \"00100\");\n\t\tCtoS.put('M', \"10011001\");\n\t\tCtoS.put('N', \"10011110\");\n\t\tCtoS.put('O', \"00101\");\n\t\tCtoS.put('P', \"111\");\n\t\tCtoS.put('Q', \"10011111\");\n\t\tCtoS.put('R', \"1000\");\n\t\tCtoS.put('S', \"00110\");\n\t\tCtoS.put('T', \"00111\");\n\t\tCtoS.put('U', \"10011100\");\n\t\tCtoS.put('V', \"10011101\");\n\t\tCtoS.put('W', \"000010\");\n\t\tCtoS.put('X', \"10010010\");\n\t\tCtoS.put('Y', \"10010011\");\n\t\tCtoS.put('Z', \"10010000\");\n\n\t\t//initialize StoC.\n\t\tStoC.put(\"00000\",'A');\n\t\tStoC.put(\"00001\",'B');\n\t\tStoC.put(\"00010\",'C');\n\t\tStoC.put(\"00011\",'D');\n\t\tStoC.put(\"00100\",'E');\n\t\tStoC.put(\"00101\",'F');\n\t\tStoC.put(\"00110\",'G');\n\t\tStoC.put(\"00111\",'H');\n\t\tStoC.put(\"01000\",'I');\n\t\tStoC.put(\"01001\",'J');\n\t\tStoC.put(\"01010\",'K');\n\t\tStoC.put(\"01011\",'L');\n\t\tStoC.put(\"01100\",'M');\n\t\tStoC.put(\"01101\",'N');\n\t\tStoC.put(\"01110\",'O');\n\t\tStoC.put(\"01111\",'P');\n\t\tStoC.put(\"10000\",'Q');\n\t\tStoC.put(\"10001\",'R');\n\t\tStoC.put(\"10010\",'S');\n\t\tStoC.put(\"10011\",'T');\n\t\tStoC.put(\"10100\",'U');\n\t\tStoC.put(\"10101\",'V');\n\t\tStoC.put(\"10110\",'W');\n\t\tStoC.put(\"10111\",'X');\n\t\tStoC.put(\"11000\",'Y');\n\t\tStoC.put(\"11001\",'Z');\n\t\tStoC.put(\"11010\",' ');\n\t\tStoC.put(\"11011\",'.');\n\t\tStoC.put(\"11100\",',');\n\t\tStoC.put(\"11101\",'-');\n\t\tStoC.put(\"11110\",'\\'');\n\t\tStoC.put(\"11111\",'?');\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.LinkedList;\nimport java.util.Scanner;\n\npublic class Main {\n\tprivate Scanner sc;\n\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\t\n\tpublic Main() {\n\t\tsc = new Scanner(System.in);\n\t\t\n\t\tString ans = \"\";\n\t\tString tmp = \"\";\n\t\twhile (sc.hasNextLine()) {\n\t\t\tString nico = sc.nextLine();\n\t\t\t\n\t\t\tfor (int i = 0; i < nico.length(); i++) {\n\t\t\t\tswitch (nico.charAt(i)) {\n\t\t\t\tcase ' ' :\n\t\t\t\t\ttmp = tmp + \"101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '\\'':\n\t\t\t\t\ttmp = tmp + \"000000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase ',':\n\t\t\t\t\ttmp = tmp + \"000011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttmp = tmp + \"10010001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '.':\n\t\t\t\t\ttmp = tmp + \"010001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '?':\n\t\t\t\t\ttmp = tmp + \"000001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'A':\n\t\t\t\t\ttmp = tmp + \"100101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'B':\n\t\t\t\t\ttmp = tmp + \"10011010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'C':\n\t\t\t\t\ttmp = tmp + \"0101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'D':\n\t\t\t\t\ttmp = tmp + \"0001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'E':\n\t\t\t\t\ttmp = tmp + \"110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'F':\n\t\t\t\t\ttmp = tmp + \"01001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'G':\n\t\t\t\t\ttmp = tmp + \"10011011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'H':\n\t\t\t\t\ttmp = tmp + \"010000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'I':\n\t\t\t\t\ttmp = tmp + \"0111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'J':\n\t\t\t\t\ttmp = tmp + \"10011000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'K':\n\t\t\t\t\ttmp = tmp + \"0110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'L':\n\t\t\t\t\ttmp = tmp + \"00100\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'M':\n\t\t\t\t\ttmp = tmp + \"10011001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'N':\n\t\t\t\t\ttmp = tmp + \"10011110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'O':\n\t\t\t\t\ttmp = tmp + \"00101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'P':\n\t\t\t\t\ttmp = tmp + \"111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Q':\n\t\t\t\t\ttmp = tmp + \"10011111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'R':\n\t\t\t\t\ttmp = tmp + \"1000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'S':\n\t\t\t\t\ttmp = tmp + \"00110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'T':\n\t\t\t\t\ttmp = tmp + \"00111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'U':\n\t\t\t\t\ttmp = tmp + \"10011100\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'V':\n\t\t\t\t\ttmp = tmp + \"10011101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'W':\n\t\t\t\t\ttmp = tmp + \"000010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'X':\n\t\t\t\t\ttmp = tmp + \"10010010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Y':\n\t\t\t\t\ttmp = tmp + \"10010011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Z':\n\t\t\t\t\ttmp = tmp + \"10010000\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twhile (tmp.length() >= 5) {\n\t\t\t\t\tans = ans + getChar(tmp.substring(0, 5));\n\t\t\t\t\ttmp = tmp.substring(5);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttmp = tmp + \"101\";\n\t\t}\n\t\t\n\t\ttmp = tmp.substring(0, tmp.length() - 3);\n\n\t\tint lim = 5 - tmp.length();\n\t\tfor (int i = 0; i < lim; i++) {\n\t\t\ttmp = tmp + \"0\";\n\t\t}\n\t\tans = ans + getChar(tmp);\n\t\tSystem.out.println(ans);\n\t}\n\t\n\tprivate char getChar(String str) {\n\t\tswitch (str) {\n\t\tcase \"00000\":\n\t\t\treturn 'A';\n\t\tcase \"00001\":\n\t\t\treturn 'B';\n\t\tcase \"00010\":\n\t\t\treturn 'C';\n\t\tcase \"00011\":\n\t\t\treturn 'D';\n\t\tcase \"00100\":\n\t\t\treturn 'E';\n\t\tcase \"00101\":\n\t\t\treturn 'F';\n\t\tcase \"00110\":\n\t\t\treturn 'G';\n\t\tcase \"00111\":\n\t\t\treturn 'H';\n\t\tcase \"01000\":\n\t\t\treturn 'I';\n\t\tcase \"01001\":\n\t\t\treturn 'J';\n\t\tcase \"01010\":\n\t\t\treturn 'K';\n\t\tcase \"01011\":\n\t\t\treturn 'L';\n\t\tcase \"01100\":\n\t\t\treturn 'M';\n\t\tcase \"01101\":\n\t\t\treturn 'N';\n\t\tcase \"01110\":\n\t\t\treturn 'O';\n\t\tcase \"01111\":\n\t\t\treturn 'P';\n\t\tcase \"10000\":\n\t\t\treturn 'Q';\n\t\tcase \"10001\":\n\t\t\treturn 'R';\n\t\tcase \"10010\":\n\t\t\treturn 'S';\n\t\tcase \"10011\":\n\t\t\treturn 'T';\n\t\tcase \"10100\":\n\t\t\treturn 'U';\n\t\tcase \"10101\":\n\t\t\treturn 'V';\n\t\tcase \"10110\":\n\t\t\treturn 'W';\n\t\tcase \"10111\":\n\t\t\treturn 'X';\n\t\tcase \"11000\":\n\t\t\treturn 'Y';\n\t\tcase \"11001\":\n\t\t\treturn 'Z';\n\t\tcase \"11010\":\n\t\t\treturn ' ';\n\t\tcase \"11011\":\n\t\t\treturn '.';\n\t\tcase \"11100\":\n\t\t\treturn ',';\n\t\tcase \"11101\":\n\t\t\treturn '-';\n\t\tcase \"11110\":\n\t\t\treturn '\\'';\n\t\tcase \"11111\":\n\t\t\treturn '?';\n\t\t}\n\t\t\n\t\treturn 0;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tString[] a={\" \",\"'\",\",\",\"-\",\".\",\"?\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\n\t\tString[] b1={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\t\tString[] b2={\"11010\",\"11110\",\"11100\",\"11101\",\"11011\",\"11111\",\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\"};\n\t\tScanner sc=new Scanner(System.in);\n\t\twhile(sc.hasNextLine()){\n\t\t\tchar[] c1=sc.nextLine().toCharArray();\n\t\t\tString str=\"\";\n\t\t\tfor(int i=0;i<c1.length;i++){\n\t\t\t\tfor(int j=0;j<a.length;j++){\n\t\t\t\t\tif(a[j].equals(c1[i]+\"\")){\n\t\t\t\t\t\tstr+=b1[j];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tchar[] c2=str.toCharArray();\n\t\t\tString[] strArray=new String[c2.length/5+1];\n\t\t\tint ptr=0;\n\t\t\tfor(int i=0;i<strArray.length;i++){\n\t\t\t\tstrArray[i]=\"\";\n\t\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\t\ttry{\n\t\t\t\t\t\tstrArray[i]+=(c2[ptr++]+\"\");\n\t\t\t\t\t}catch(ArrayIndexOutOfBoundsException e){\n\t\t\t\t\t\tstrArray[i]+=\"0\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tString answer=\"\";\n\t\t\tfor(int i=0;i<strArray.length;i++){\n\t\t\t\tfor(int j=0;j<b2.length;j++){\n\t\t\t\t\tif(strArray[i].equals(b2[j])){\n\t\t\t\t\t\tanswer+=a[j];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(answer);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) throws java.io.IOException{\n        Scanner scan = new Scanner(System.in);\n        HashMap<Character,String> ep =new HashMap<Character,String>();\n        HashMap<String,Character> dp =new HashMap<String,Character>();\n\n        ep.put(' ',\"101\");\n        ep.put('\\'',\"000000\");\n        ep.put(',',\"000011\");\n        ep.put('-',\"10010001\");\n        ep.put('.',\"010001\");\n        ep.put('?',\"000001\");\n        ep.put('A',\"100101\");\n        ep.put('B',\"10011010\");\n        ep.put('C',\"0101\");\n        ep.put('D',\"0001\");\n        ep.put('E',\"110\");\n        ep.put('F',\"01001\");\n        ep.put('G',\"10011011\");\n        ep.put('H',\"010000\");\n        ep.put('I',\"0111\");\n        ep.put('J',\"10011000\");\n        ep.put('K',\"0110\");\n        ep.put('L',\"00100\");\n        ep.put('M',\"10011001\");\n        ep.put('N',\"10011110\");\n        ep.put('O',\"00101\");\n        ep.put('P',\"111\");\n        ep.put('Q',\"10011111\");\n        ep.put('R',\"1000\");\n        ep.put('S',\"00110\");\n        ep.put('T',\"00111\");\n        ep.put('U',\"10011100\");\n        ep.put('V',\"10011101\");\n        ep.put('W',\"000010\");\n        ep.put('X',\"10010010\");\n        ep.put('Y',\"10010011\");\n        ep.put('Z',\"10010000\");\n        \n        dp.put(\"00000\", 'A');\n        dp.put(\"00001\", 'B');\n        dp.put(\"00010\", 'C');\n        dp.put(\"00011\", 'D');\n        dp.put(\"00100\", 'E');\n        dp.put(\"00101\", 'F');\n        dp.put(\"00110\", 'G');\n        dp.put(\"00111\", 'H');\n        dp.put(\"01000\", 'I');\n        dp.put(\"01001\", 'J');\n        dp.put(\"01010\", 'K');\n        dp.put(\"01011\", 'L');\n        dp.put(\"01100\", 'M');\n        dp.put(\"01101\", 'N');\n        dp.put(\"01110\", 'O');\n        dp.put(\"01111\", 'P');\n        dp.put(\"10000\", 'Q');\n        dp.put(\"10001\", 'R');\n        dp.put(\"10010\", 'S');\n        dp.put(\"10011\", 'T');\n        dp.put(\"10100\", 'U');\n        dp.put(\"10101\", 'V');\n        dp.put(\"10110\", 'W');\n        dp.put(\"10111\", 'X');\n        dp.put(\"11000\", 'Y');\n        dp.put(\"11001\", 'Z');\n        dp.put(\"11010\", ' ');\n        dp.put(\"11011\", '.');\n        dp.put(\"11100\", ',');\n        dp.put(\"11101\", '-');\n        dp.put(\"11110\", '\\'');\n        dp.put(\"11111\", '?');\n        \n        while(scan.hasNext()){\n        \tchar [] line= scan.nextLine().toCharArray();\n        \tString tmp=\"\";\n        \tfor(int i=0;i<line.length;i++)\n        \t\ttmp+=ep.get(line[i]);\n        \tString [] splitedCode =new String[tmp.length()/5+1];\n        \tfor(int i=0;i<splitedCode.length;i++){\t\n        \t\tif(i==(splitedCode.length-1))\n        \t\t\tsplitedCode[i]=tmp.substring(5*i,tmp.length());\n        \t\telse splitedCode[i]=tmp.substring(5*i,5*i+5);\n        \t}\n        \t\tif(tmp.length()%5!=0)\n        \tfor(int i=0;i<(5-tmp.length()%5);i++)\n        \t\tsplitedCode[splitedCode.length-1]+=\"0\";\n        \t\n        \tStringBuilder sb = new StringBuilder();\n        \tfor(int i=0;i<splitedCode.length;i++)\n        \t\tsb.append(dp.get(splitedCode[i]));\n        \tSystem.out.println(sb);\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.awt.geom.Point2D;\nimport java.lang.reflect.Array;\nimport java.math.BigInteger;\nimport java.util.*;\n\npublic class Main {\t\n\tScanner in = new Scanner(System.in);\n\tpublic static void main(String[] args){\n\t\tnew Main();\n\t}\n\tpublic Main(){\t\t\n\t\tnew AOJ0088();\n\t}\n\n\n\tclass AOJ0088{\n\t\tpublic AOJ0088() {\n\t\t\tMap<Character,String> fase1 = new HashMap<Character, String>();\n\t\t\tfase1.put(' ',\"101\");\n\t\t\tfase1.put('\\'',\"000000\");\n\t\t\tfase1.put(',',\"000011\");\n\t\t\tfase1.put('-',\"10010001\");\n\t\t\tfase1.put('.',\"010001\");\n\t\t\tfase1.put('?',\"000001\");\n\t\t\tfase1.put('A',\"100101\");\n\t\t\tfase1.put('B',\"10011010\");\n\t\t\tfase1.put('C',\"0101\");\n\t\t\tfase1.put('D',\"0001\");\n\t\t\tfase1.put('E',\"110\");\n\t\t\tfase1.put('F',\"01001\");\n\t\t\tfase1.put('G',\"10011011\");\n\t\t\tfase1.put('H',\"010000\");\n\t\t\tfase1.put('I',\"0111\");\n\t\t\tfase1.put('J',\"10011000\");\n\t\t\tfase1.put('K',\"0110\");\n\t\t\tfase1.put('L',\"00100\");\n\t\t\tfase1.put('M',\"10011001\");\n\t\t\tfase1.put('N',\"10011110\");\n\t\t\tfase1.put('O',\"00101\");\n\t\t\tfase1.put('P',\"111\");\n\t\t\tfase1.put('Q',\"10011111\");\n\t\t\tfase1.put('R',\"1000\");\n\t\t\tfase1.put('S',\"00110\");\n\t\t\tfase1.put('T',\"00111\");\n\t\t\tfase1.put('U',\"10011100\");\n\t\t\tfase1.put('V',\"10011101\");\n\t\t\tfase1.put('W',\"000010\");\n\t\t\tfase1.put('X',\"10010010\");\n\t\t\tfase1.put('Y',\"10010011\");\n\t\t\tfase1.put('Z',\"10010000\");\n\t\t\tMap<String,Character> fase2 = new HashMap<String, Character>();\n\t\t\tfase2.put(\"00000\",'A');\n\t\t\tfase2.put(\"00001\",'B');\n\t\t\tfase2.put(\"00010\",'C');\n\t\t\tfase2.put(\"00011\",'D');\n\t\t\tfase2.put(\"00100\",'E');\n\t\t\tfase2.put(\"00101\",'F');\n\t\t\tfase2.put(\"00110\",'G');\n\t\t\tfase2.put(\"00111\",'H');\n\t\t\tfase2.put(\"01000\",'I');\n\t\t\tfase2.put(\"01001\",'J');\n\t\t\tfase2.put(\"01010\",'K');\n\t\t\tfase2.put(\"01011\",'L');\n\t\t\tfase2.put(\"01100\",'M');\n\t\t\tfase2.put(\"01101\",'N');\n\t\t\tfase2.put(\"01110\",'O');\n\t\t\tfase2.put(\"01111\",'P');\n\t\t\tfase2.put(\"10000\",'Q');\n\t\t\tfase2.put(\"10001\",'R');\n\t\t\tfase2.put(\"10010\",'S');\n\t\t\tfase2.put(\"10011\",'T');\n\t\t\tfase2.put(\"10100\",'U');\n\t\t\tfase2.put(\"10101\",'V');\n\t\t\tfase2.put(\"10110\",'W');\n\t\t\tfase2.put(\"10111\",'X');\n\t\t\tfase2.put(\"11000\",'Y');\n\t\t\tfase2.put(\"11001\",'Z');\n\t\t\tfase2.put(\"11010\",' ');\n\t\t\tfase2.put(\"11011\",'.');\n\t\t\tfase2.put(\"11100\",',');\n\t\t\tfase2.put(\"11101\",'-');\n\t\t\tfase2.put(\"11110\",'\\'');\n\t\t\tfase2.put(\"11111\",'?');\n\t\t\twhile(in.hasNext()){\n\t\t\t\tString input = in.nextLine();\n\t\t\t\tString change = \"\";\n\t\t\t\tfor(int i=0;i<input.length();i++)change+=fase1.get(input.charAt(i));\n\t\t\t\tfor(;change.length()%5!=0;)change+=\"0\";\n\t\t\t\tString result = \"\";\n\t\t\t\tfor(int i=0;i<change.length();i+=5)result += fase2.get(change.substring(i,i+5));\n\t\t\t\tSystem.out.println(result);\n\t\t\t}\n\t\t}\n\t}\n\n\tclass AOJ2503{\n\t\tint MAX = 0;\n\t\tpublic AOJ2503() {\n\t\t\tScanner in = new Scanner(System.in);\n\t\t\tint n = in.nextInt();\n\t\t\tint m = in.nextInt();\n\n\t\t\tint[][] cost = new int[n][n];\n\n\t\t\tint[] dp = new int[n];\n\t\t\tfor(int i=0;i<n*n;i++){\n\t\t\t\tcost[i/n][i%n]=MAX;\n\t\t\t}\n\t\t\tfor(int i=0;i<m;i++){\n\t\t\t\tint a = in.nextInt();\n\t\t\t\tint b = in.nextInt();\n\t\t\t\tcost[a][b]=in.nextInt();\n\t\t\t}\t\n\t\t\t//\t\t\tTODO 一番大きいパスを0のポイントからn-1のポイントまでの\n\n\t\t\tfor(int s=1;s<n;s++){\n\t\t\t\tfor(int i=0;i<=s;i++){\n\t\t\t\t\tif(cost[i][s]==MAX)continue;\n\t\t\t\t\tdp[s]=Math.max(dp[s],dp[i]+cost[i][s]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int s=0;s<n;s++)for(int i=0;i<n;i++){\n\t\t\t\tif(cost[s][i]==MAX)continue;\n\t\t\t\tdp[i]=Math.max(dp[s]+cost[s][i],dp[i]);\n\t\t\t}\n\t\t\tfor(int i=0;i<n;i++)System.out.print(dp[i]+\" \");\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.println(dp[n-1]);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tHashMap<Character,String> map1 = new HashMap<Character,String>();\n\t\tmap1.put(' ',\"101\");\n\t\tmap1.put('\\'',\"000000\");\n\t\tmap1.put(',',\"000011\");\n\t\tmap1.put('-',\"10010001\");\n\t\tmap1.put('.',\"010001\");\n\t\tmap1.put('?',\"000001\");\n\t\tmap1.put('A',\"100101\");\n\t\tmap1.put('B',\"10011010\");\n\t\tmap1.put('C',\"0101\");\n\t\tmap1.put('D',\"0001\");\n\t\tmap1.put('E',\"110\");\n\t\tmap1.put('F',\"01001\");\n\t\tmap1.put('G',\"10011011\");\n\t\tmap1.put('H',\"010000\");\n\t\tmap1.put('I',\"0111\");\n\t\tmap1.put('J',\"10011000\");\n\t\tmap1.put('K',\"0110\");\n\t\tmap1.put('L',\"00100\");\n\t\tmap1.put('M',\"10011001\");\n\t\tmap1.put('N',\"10011110\");\n\t\tmap1.put('O',\"00101\");\n\t\tmap1.put('P',\"111\");\n\t\tmap1.put('Q',\"10011111\");\n\t\tmap1.put('R',\"1000\");\n\t\tmap1.put('S',\"00110\");\n\t\tmap1.put('T',\"00111\");\n\t\tmap1.put('U',\"10011100\");\n\t\tmap1.put('V',\"10011101\");\n\t\tmap1.put('W',\"000010\");\n\t\tmap1.put('X',\"10010010\");\n\t\tmap1.put('Y',\"10010011\");\n\t\tmap1.put('Z',\"10010000\");\n\n\t\tHashMap<String,Character> map2 = new HashMap<String,Character>();\n\t\tmap2.put(\"00000\",'A');\n\t\tmap2.put(\"00001\",'B');\n\t\tmap2.put(\"00010\",'C');\n\t\tmap2.put(\"00011\",'D');\n\t\tmap2.put(\"00100\",'E');\n\t\tmap2.put(\"00101\",'F');\n\t\tmap2.put(\"00110\",'G');\n\t\tmap2.put(\"00111\",'H');\n\t\tmap2.put(\"01000\",'I');\n\t\tmap2.put(\"01001\",'J');\n\t\tmap2.put(\"01010\",'K');\n\t\tmap2.put(\"01011\",'L');\n\t\tmap2.put(\"01100\",'M');\n\t\tmap2.put(\"01101\",'N');\n\t\tmap2.put(\"01110\",'O');\n\t\tmap2.put(\"01111\",'P');\n\t\tmap2.put(\"10000\",'Q');\n\t\tmap2.put(\"10001\",'R');\n\t\tmap2.put(\"10010\",'S');\n\t\tmap2.put(\"10011\",'T');\n\t\tmap2.put(\"10100\",'U');\n\t\tmap2.put(\"10101\",'V');\n\t\tmap2.put(\"10110\",'W');\n\t\tmap2.put(\"10111\",'X');\n\t\tmap2.put(\"11000\",'Y');\n\t\tmap2.put(\"11001\",'Z');\n\t\tmap2.put(\"11010\",' ');\n\t\tmap2.put(\"11011\",'.');\n\t\tmap2.put(\"11100\",',');\n\t\tmap2.put(\"11101\",'-');\n\t\tmap2.put(\"11110\",'\\'');\n\t\tmap2.put(\"11111\",'?');\n\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNextLine()){\n\t\t\tString s = sc.nextLine();\n\t\t\tString out = \"\";\n\n\t\t\tfor(char ch : s.toCharArray()) out += map1.get(ch);\n\n\t\t\tint rem = 5 - out.length() % 5;\n\t\t\tif(rem < 5) while(rem-- > 0) out += \"0\";\n\n\t\t\tfor(int i=0;i<out.length();i+=5){\n\t\t\t\tSystem.out.print(map2.get(out.substring(i,i+5)));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) throws java.io.IOException{\n        Scanner scan = new Scanner(System.in);\n        HashMap<Character,String> ep =new HashMap<Character,String>();\n        HashMap<String,Character> dp =new HashMap<String,Character>();\n\n        ep.put(' ',\"101\");\n        ep.put('\\'',\"000000\");\n        ep.put(',',\"000011\");\n        ep.put('-',\"10010001\");\n        ep.put('.',\"01001\");\n        ep.put('?',\"000001\");\n        ep.put('A',\"100101\");\n        ep.put('B',\"10011010\");\n        ep.put('C',\"0101\");\n        ep.put('D',\"0001\");\n        ep.put('E',\"110\");\n        ep.put('F',\"01001\");\n        ep.put('G',\"10011011\");\n        ep.put('H',\"010000\");\n        ep.put('I',\"011\");\n        ep.put('J',\"10011000\");\n        ep.put('K',\"0110\");\n        ep.put('L',\"00100\");\n        ep.put('M',\"10011001\");\n        ep.put('N',\"10011110\");\n        ep.put('O',\"00101\");\n        ep.put('P',\"111\");\n        ep.put('Q',\"10011111\");\n        ep.put('R',\"1000\");\n        ep.put('S',\"00110\");\n        ep.put('T',\"00111\");\n        ep.put('U',\"10011100\");\n        ep.put('V',\"10011101\");\n        ep.put('W',\"000010\");\n        ep.put('X',\"10010010\");\n        ep.put('Y',\"10010011\");\n        ep.put('Z',\"10010000\");\n        \n        dp.put(\"00000\", 'A');\n        dp.put(\"00001\", 'B');\n        dp.put(\"00010\", 'C');\n        dp.put(\"00011\", 'D');\n        dp.put(\"00100\", 'E');\n        dp.put(\"00101\", 'F');\n        dp.put(\"00110\", 'G');\n        dp.put(\"00111\", 'H');\n        dp.put(\"01000\", 'I');\n        dp.put(\"01001\", 'J');\n        dp.put(\"01010\", 'K');\n        dp.put(\"01011\", 'L');\n        dp.put(\"01100\", 'M');\n        dp.put(\"01101\", 'N');\n        dp.put(\"01110\", 'O');\n        dp.put(\"01111\", 'P');\n        dp.put(\"10000\", 'Q');\n        dp.put(\"10001\", 'R');\n        dp.put(\"10010\", 'S');\n        dp.put(\"10011\", 'T');\n        dp.put(\"10100\", 'U');\n        dp.put(\"10101\", 'V');\n        dp.put(\"10110\", 'W');\n        dp.put(\"10111\", 'X');\n        dp.put(\"11000\", 'Y');\n        dp.put(\"11001\", 'Z');\n        dp.put(\"11010\", ' ');\n        dp.put(\"11011\", '.');\n        dp.put(\"11100\", ',');\n        dp.put(\"11101\", '-');\n        dp.put(\"11110\", '\\'');\n        dp.put(\"11111\", '?');\n        \n        while(scan.hasNext()){\n        \tchar [] line= scan.nextLine().toCharArray();\n        \tString tmp=\"\";\n        \tfor(int i=0;i<line.length;i++)\n        \t\ttmp+=ep.get(line[i]);\n        \tSystem.out.println(tmp);\n        \tString [] splitedCode =new String[tmp.length()/5+1];\n        \tfor(int i=0;i<splitedCode.length;i++){\t\n        \t\tif(i==(splitedCode.length-1))\n        \t\t\tsplitedCode[i]=tmp.substring(5*i,5*i+tmp.length()%5);\n        \t\telse splitedCode[i]=tmp.substring(5*i,5*i+5);\n        \t}\n        \t\t\n        \tfor(int i=0;i<(5-tmp.length()%5);i++)\n        \t\tsplitedCode[splitedCode.length-1]+=\"0\";\n        \t\n        \tfor(int i=0;i<splitedCode.length;i++)\n        \t\tSystem.out.print(splitedCode[i]+\" \");\n        \tSystem.out.println();\n        \tStringBuilder sb = new StringBuilder();\n        \tfor(int i=0;i<splitedCode.length;i++)\n        \t\tsb.append(dp.get(splitedCode[i]));\n        \tSystem.out.println(sb);\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tstatic final HashMap<Character, String> c1 = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");\n\t\t\tput('\\'', \"000000\");\n\t\t\tput(',', \"000011\");\n\t\t\tput('-', \"10010001\");\n\t\t\tput('.', \"010001\");\n\t\t\tput('?', \"000001\");\n\t\t\tput('A', \"100101\");\n\t\t\tput('B', \"10011010\");\n\t\t\tput('C', \"0101\");\n\t\t\tput('D', \"0001\");\n\t\t\tput('E', \"110\");\n\t\t\tput('F', \"01001\");\n\t\t\tput('G', \"10011011\");\n\t\t\tput('H', \"010000\");\n\t\t\tput('I', \"0111\");\n\t\t\tput('J', \"10011000\");\n\t\t\tput('K', \"0110\");\n\t\t\tput('L', \"00100\");\n\t\t\tput('M', \"10011001\");\n\t\t\tput('N', \"10011110\");\n\t\t\tput('O', \"00101\");\n\t\t\tput('P', \"111\");\n\t\t\tput('Q', \"10011111\");\n\t\t\tput('R', \"1000\");\n\t\t\tput('S', \"00110\");\n\t\t\tput('T', \"00111\");\n\t\t\tput('U', \"10011100\");\n\t\t\tput('V', \"10011101\");\n\t\t\tput('W', \"000010\");\n\t\t\tput('X', \"10010010\");\n\t\t\tput('Y', \"10010011\");\n\t\t\tput('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> c2 = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"00000\", 'A');\n\t\t\tput(\"00001\", 'B');\n\t\t\tput(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D');\n\t\t\tput(\"00100\", 'E');\n\t\t\tput(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G');\n\t\t\tput(\"00111\", 'H');\n\t\t\tput(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J');\n\t\t\tput(\"01010\", 'K');\n\t\t\tput(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M');\n\t\t\tput(\"01101\", 'N');\n\t\t\tput(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P');\n\t\t\tput(\"10000\", 'Q');\n\t\t\tput(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S');\n\t\t\tput(\"10011\", 'T');\n\t\t\tput(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V');\n\t\t\tput(\"10110\", 'W');\n\t\t\tput(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y');\n\t\t\tput(\"11001\", 'Z');\n\t\t\tput(\"11010\", ' ');\n\t\t\tput(\"11011\", '.');\n\t\t\tput(\"11100\", ',');\n\t\t\tput(\"11101\", '-');\n\t\t\tput(\"11110\", '\\'');\n\t\t\tput(\"11111\", '?');\n\t\t}\n\t};\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n\t\t\t//\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1.get(c));\n\t\t\t}\n\t\t\t//\n\t\t\tsb1.append(\"00000\");\n\t\t\t//\n\t\t\tline = sb1.toString();\n\t\t\tfor (int i = 0; i < line.length() - 5; i += 5) {\n\t\t\t\tsb2.append(c2.get(line.substring(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println(sb2.toString());\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main {\n  public static void main (String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    Map<String, String> enc = new HashMap<String, String>();\n    Map<String, String> dec = new HashMap<String, String>();\n    enc.put(\" \", \"101\");\n    enc.put(\"'\", \"000000\");\n    enc.put(\",\", \"000011\");\n    enc.put(\"-\", \"10010001\");\n    enc.put(\".\", \"010001\");\n    enc.put(\"?\", \"000001\");\n    enc.put(\"A\", \"100101\");\n    enc.put(\"B\", \"10011010\");\n    enc.put(\"C\", \"0101\");\n    enc.put(\"D\", \"0001\");\n    enc.put(\"E\", \"110\");\n    enc.put(\"F\", \"01001\");\n    enc.put(\"G\", \"10011011\");\n    enc.put(\"H\", \"010000\");\n    enc.put(\"I\", \"0111\");\n    enc.put(\"J\", \"10011000\");\n    enc.put(\"K\", \"0110\");\n    enc.put(\"L\", \"00100\");\n    enc.put(\"M\", \"10011001\");\n    enc.put(\"N\", \"10011110\");\n    enc.put(\"O\", \"00101\");\n    enc.put(\"P\", \"111\");\n    enc.put(\"Q\", \"10011111\");\n    enc.put(\"R\", \"1000\");\n    enc.put(\"S\", \"00110\");\n    enc.put(\"T\", \"00111\");\n    enc.put(\"U\", \"10011100\");\n    enc.put(\"V\", \"10011101\");\n    enc.put(\"W\", \"000010\");\n    enc.put(\"X\", \"10010010\");\n    enc.put(\"Y\", \"10010011\");\n    enc.put(\"Z\", \"10010000\");\n    dec.put(\"00000\", \"A\");\n    dec.put(\"00001\", \"B\");\n    dec.put(\"00010\", \"C\");\n    dec.put(\"00011\", \"D\");\n    dec.put(\"00100\", \"E\");\n    dec.put(\"00101\", \"F\");\n    dec.put(\"00110\", \"G\");\n    dec.put(\"00111\", \"H\");\n    dec.put(\"01000\", \"I\");\n    dec.put(\"01001\", \"J\");\n    dec.put(\"01010\", \"K\");\n    dec.put(\"01011\", \"L\");\n    dec.put(\"01100\", \"M\");\n    dec.put(\"01101\", \"N\");\n    dec.put(\"01110\", \"O\");\n    dec.put(\"01111\", \"P\");\n    dec.put(\"10000\", \"Q\");\n    dec.put(\"10001\", \"R\");\n    dec.put(\"10010\", \"S\");\n    dec.put(\"10011\", \"T\");\n    dec.put(\"10100\", \"U\");\n    dec.put(\"10101\", \"V\");\n    dec.put(\"10110\", \"W\");\n    dec.put(\"10111\", \"X\");\n    dec.put(\"11000\", \"Y\");\n    dec.put(\"11001\", \"Z\");\n    dec.put(\"11010\", \" \");\n    dec.put(\"11011\", \".\");\n    dec.put(\"11100\", \",\");\n    dec.put(\"11101\", \"-\");\n    dec.put(\"11110\", \"'\");\n    dec.put(\"11111\", \"?\");\n    while (scanner.hasNext()) {\n      String line = scanner.nextLine();\n      String encStr = \"\";\n      String decStr = \"\";\n      for (int ii = 0; ii < line.length(); ii++) {\n        encStr += enc.get(line.substring(ii, ii + 1));\n      }\n      int cnt = 0;\n      for (;;) {\n        try {\n          decStr += dec.get(encStr.substring(cnt, cnt + 5));\n          cnt += 5;\n        } catch (StringIndexOutOfBoundsException e) {\n          String work = (encStr.substring(cnt) + \"0000\").substring(0, 5);\n          decStr += dec.get(work);\n          break;\n        }\n      }\n      System.out.println(decStr);\n    }\n  }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nimport java.lang.*;\n\nimport java.math.*;\n\n\n\npublic class Main {\n\n\tScanner sc = new Scanner(System.in);\n\n\n\n\tvoid run(){\n\n\t\tHashMap<Character, String> hash = new HashMap<Character, String>();\n\n\t\thash.put(' ',\"101\");\n\n\t\thash.put('\\'',\"000000\");\n\n\t\thash.put(',',\"000011\");\n\n\t\thash.put('-',\"10010001\");\n\n\t\thash.put('.',\"010001\");\n\n\t\thash.put('?',\"000001\");\n\n\t\thash.put('A',\"100101\");\n\n\t\thash.put('B',\"10011010\");\n\n\t\thash.put('C',\"0101\");\n\n\t\thash.put('D',\"0001\");\n\n\t\thash.put('E',\"110\");\n\n\t\thash.put('F',\"01001\");\n\n\t\thash.put('G',\"10011011\");\n\n\t\thash.put('H',\"010000\");\n\n\t\thash.put('I',\"0111\");\n\n\t\thash.put('J',\"10011000\");\t\t\t\n\n\t\thash.put('K',\"0110\");\n\n\t\thash.put('L',\"00100\");\n\n\t\thash.put('M',\"10011001\");\n\n\t\thash.put('N',\"10011110\");\n\n\t\thash.put('O',\"00101\");\n\n\t\thash.put('P',\"111\");\n\n\t\thash.put('Q',\"10011111\");\n\n\t\thash.put('R',\"1000\");\n\n\t\thash.put('S',\"00110\");\n\n\t\thash.put('T',\"00111\");\n\n\t\thash.put('U',\"10011100\");\n\n\t\thash.put('V',\"10011101\");\n\n\t\thash.put('W',\"000010\");\n\n\t\thash.put('X',\"10010010\");\n\n\t\thash.put('Y',\"10010011\");\n\n\t\thash.put('Z',\"10010000\");\n\n\t\t\n\n\t\tHashMap<String, Character> hash2 = new HashMap<String, Character>();\n\n\t\thash2.put(\"00000\",'A');\n\n\t\thash2.put(\"00001\",'B');\n\n\t\thash2.put(\"00010\",'C');\n\n\t\thash2.put(\"00011\",'D');\n\n\t\thash2.put(\"00100\",'E');\n\n\t\thash2.put(\"00101\",'F');\n\n\t\thash2.put(\"00110\",'G');\n\n\t\thash2.put(\"00111\",'H');\n\n\t\thash2.put(\"01000\",'I');\n\n\t\thash2.put(\"01001\",'J');\n\n\t\thash2.put(\"01010\",'K');\n\n\t\thash2.put(\"01011\",'L');\n\n\t\thash2.put(\"01100\",'M');\n\n\t\thash2.put(\"01101\",'N');\n\n\t\thash2.put(\"01110\",'O');\n\n\t\thash2.put(\"01111\",'P');\n\n\t\thash2.put(\"10000\",'Q');\n\n\t\thash2.put(\"10001\",'R');\n\n\t\thash2.put(\"10010\",'S');\n\n\t\thash2.put(\"10011\",'T');\n\n\t\thash2.put(\"10100\",'U');\n\n\t\thash2.put(\"10101\",'V');\n\n\t\thash2.put(\"10110\",'W');\n\n\t\thash2.put(\"10111\",'X');\n\n\t\thash2.put(\"11000\",'Y');\n\n\t\thash2.put(\"11001\",'Z');\n\n\t\thash2.put(\"11010\",' ');\n\n\t\thash2.put(\"11011\",'.');\n\n\t\thash2.put(\"11100\",',');\n\n\t\thash2.put(\"11101\",'-');\n\n\t\thash2.put(\"11110\",'\\'');\n\n\t\thash2.put(\"11111\",'?');\n\n\t\t\n\n\t\tfor(;sc.hasNextLine();){\n\n\t\t\tString buffer = sc.nextLine();\n\n\t\t\tString dec =\"\";\n\n\t\t\tfor(char ch : buffer.toCharArray()){\n\n\t\t\t\tdec += hash.get(ch);\n\n\t\t\t}\n\n\t\t\tString ret =\"\";\n\n\t\t\tfor(;dec.length()>0;){\n\n\t\t\t\tString st=\"\";\n\n\t\t\t\tif(dec.length()>5){\n\n\t\t\t\t\tst = dec.substring(0,5);\n\n\t\t\t\t\tdec = dec.substring(5);\n\n\t\t\t\t}else{\n\n\t\t\t\t\tst = (dec+\"00000\").substring(0,5);\n\n\t\t\t\t\tdec = \"\";\n\n\t\t\t\t}\n\n\t\t\t\tret += hash2.get(st);\n\n\t\t\t}\n\n\t\t\tSystem.out.println(ret);\n\n\t\t}\n\n\t}\n\n\n\n\tpublic static void main(String[] args) {\n\n\t\tMain m = new Main();\n\n\t\tm.run();\n\n\t}\n\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.util.Map.Entry;\nimport java.lang.*;\nimport java.math.*;\nimport java.io.*;\n\nimport static java.lang.Math.*;\nimport static java.util.Arrays.*;\n\npublic class Main{\n\n\tScanner sc;\n\n\tstatic final int INF=1<<28;\n\tstatic final double EPS=1e-9;\n\n\tvoid run(){\n\t\tsc=new Scanner(System.in);\n\t\tHashMap<String, String> map1=new HashMap<String, String>();\n\t\tmap1.put(\" \", \"101\");\n\t\tmap1.put(\"'\", \"000000\");\n\t\tmap1.put(\",\", \"000011\");\n\t\tmap1.put(\"-\", \"10010001\");\n\t\tmap1.put(\"\\\\.\", \"010001\");\n\t\tmap1.put(\"\\\\?\", \"000001\");\n\t\tmap1.put(\"A\", \"100101\");\n\t\tmap1.put(\"B\", \"10011010\");\n\t\tmap1.put(\"C\", \"0101\");\n\t\tmap1.put(\"D\", \"0001\");\n\t\tmap1.put(\"E\", \"110\");\n\t\tmap1.put(\"F\", \"01001\");\n\t\tmap1.put(\"G\", \"10011011\");\n\t\tmap1.put(\"H\", \"010000\");\n\t\tmap1.put(\"I\", \"0111\");\n\t\tmap1.put(\"J\", \"10011000\");\n\t\tmap1.put(\"K\", \"0110\");\n\t\tmap1.put(\"L\", \"00100\");\n\t\tmap1.put(\"M\", \"10011001\");\n\t\tmap1.put(\"N\", \"10011110\");\n\t\tmap1.put(\"O\", \"00101\");\n\t\tmap1.put(\"P\", \"111\");\n\t\tmap1.put(\"Q\", \"10011111\");\n\t\tmap1.put(\"R\", \"1000\");\n\t\tmap1.put(\"S\", \"00110\");\n\t\tmap1.put(\"T\", \"00111\");\n\t\tmap1.put(\"U\", \"10011100\");\n\t\tmap1.put(\"V\", \"10011101\");\n\t\tmap1.put(\"W\", \"000010\");\n\t\tmap1.put(\"X\", \"10010010\");\n\t\tmap1.put(\"Y\", \"10010011\");\n\t\tmap1.put(\"Z\", \"10010000\");\n\n\t\tHashMap<String, String> map2=new HashMap<String, String>();\n\t\tmap2.put(\"00000\", \"A\");\n\t\tmap2.put(\"00001\", \"B\");\n\t\tmap2.put(\"00010\", \"C\");\n\t\tmap2.put(\"00011\", \"D\");\n\t\tmap2.put(\"00100\", \"E\");\n\t\tmap2.put(\"00101\", \"F\");\n\t\tmap2.put(\"00110\", \"G\");\n\t\tmap2.put(\"00111\", \"H\");\n\t\tmap2.put(\"01000\", \"I\");\n\t\tmap2.put(\"01001\", \"J\");\n\t\tmap2.put(\"01010\", \"K\");\n\t\tmap2.put(\"01011\", \"L\");\n\t\tmap2.put(\"01100\", \"M\");\n\t\tmap2.put(\"01101\", \"N\");\n\t\tmap2.put(\"01110\", \"O\");\n\t\tmap2.put(\"01111\", \"P\");\n\t\tmap2.put(\"10000\", \"Q\");\n\t\tmap2.put(\"10001\", \"R\");\n\t\tmap2.put(\"10010\", \"S\");\n\t\tmap2.put(\"10011\", \"T\");\n\t\tmap2.put(\"10100\", \"U\");\n\t\tmap2.put(\"10101\", \"V\");\n\t\tmap2.put(\"10110\", \"W\");\n\t\tmap2.put(\"10111\", \"X\");\n\t\tmap2.put(\"11000\", \"Y\");\n\t\tmap2.put(\"11001\", \"Z\");\n\t\tmap2.put(\"11010\", \" \");\n\t\tmap2.put(\"11011\", \".\");\n\t\tmap2.put(\"11100\", \",\");\n\t\tmap2.put(\"11101\", \"-\");\n\t\tmap2.put(\"11110\", \"'\");\n\t\tmap2.put(\"11111\", \"?\");\n\n\t\tString s=sc.nextLine();\n\t\tfor(Entry<String, String> entry : map1.entrySet())\n\t\t\ts=s.replaceAll(entry.getKey(), entry.getValue());\n\t\t// println(s);\n\t\tfor(; s.length()%5!=0;)\n\t\t\ts+=\"0\";\n\t\tint len=s.length();\n\t\tint n=len/5;\n\t\tfor(int i=0; i<n; i++){\n\t\t\tString ss=s.substring(5*i, 5*i+5);\n\t\t\tfor(Entry<String, String> entry : map2.entrySet())\n\t\t\t\tss=ss.replaceAll(entry.getKey(), entry.getValue());\n\t\t\tprint(ss);\n\t\t}\n\t\tprintln(\"\");\n\t\tsc.close();\n\t}\n\n\tvoid print(String s){\n\t\tSystem.out.print(s);\n\t}\n\n\tvoid println(String s){\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic static void main(String[] args){\n\t\tnew Main().run();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) throws java.io.IOException{\n        Scanner scan = new Scanner(System.in);\n        HashMap<Character,String> ep =new HashMap<Character,String>();\n        HashMap<String,Character> dp =new HashMap<String,Character>();\n\n        ep.put(' ',\"101\");\n        ep.put('\\'',\"000000\");\n        ep.put(',',\"000011\");\n        ep.put('-',\"10010001\");\n        ep.put('.',\"01001\");\n        ep.put('?',\"000001\");\n        ep.put('A',\"100101\");\n        ep.put('B',\"10011010\");\n        ep.put('C',\"0101\");\n        ep.put('D',\"0001\");\n        ep.put('E',\"110\");\n        ep.put('F',\"01001\");\n        ep.put('G',\"10011011\");\n        ep.put('H',\"010000\");\n        ep.put('I',\"011\");\n        ep.put('J',\"10011000\");\n        ep.put('K',\"0110\");\n        ep.put('L',\"00100\");\n        ep.put('M',\"10011001\");\n        ep.put('N',\"10011110\");\n        ep.put('O',\"00101\");\n        ep.put('P',\"111\");\n        ep.put('Q',\"10011111\");\n        ep.put('R',\"1000\");\n        ep.put('S',\"00110\");\n        ep.put('T',\"00111\");\n        ep.put('U',\"10011100\");\n        ep.put('V',\"10011101\");\n        ep.put('W',\"000010\");\n        ep.put('X',\"10010010\");\n        ep.put('Y',\"10010011\");\n        ep.put('Z',\"10010000\");\n        \n        dp.put(\"00000\", 'A');\n        dp.put(\"00001\", 'B');\n        dp.put(\"00010\", 'C');\n        dp.put(\"00011\", 'D');\n        dp.put(\"00100\", 'E');\n        dp.put(\"00101\", 'F');\n        dp.put(\"00110\", 'G');\n        dp.put(\"00111\", 'H');\n        dp.put(\"01000\", 'I');\n        dp.put(\"01001\", 'J');\n        dp.put(\"01010\", 'K');\n        dp.put(\"01011\", 'L');\n        dp.put(\"01100\", 'M');\n        dp.put(\"01101\", 'N');\n        dp.put(\"01110\", 'O');\n        dp.put(\"01111\", 'P');\n        dp.put(\"10000\", 'Q');\n        dp.put(\"10001\", 'R');\n        dp.put(\"10010\", 'S');\n        dp.put(\"10011\", 'T');\n        dp.put(\"10100\", 'U');\n        dp.put(\"10101\", 'V');\n        dp.put(\"10110\", 'W');\n        dp.put(\"10111\", 'X');\n        dp.put(\"11000\", 'Y');\n        dp.put(\"11001\", 'Z');\n        dp.put(\"11010\", ' ');\n        dp.put(\"11011\", '.');\n        dp.put(\"11100\", ',');\n        dp.put(\"11101\", '-');\n        dp.put(\"11110\", '\\'');\n        dp.put(\"11111\", '?');\n        \n        while(scan.hasNext()){\n        \tchar [] line= scan.nextLine().toCharArray();\n        \tString tmp=\"\";\n        \tfor(int i=0;i<line.length;i++)\n        \t\ttmp+=ep.get(line[i]);\n        \tString [] splitedCode =new String[tmp.length()/5+1];\n        \tfor(int i=0;i<splitedCode.length;i++){\t\n        \t\tif(i==(splitedCode.length-1))\n        \t\t\tsplitedCode[i]=tmp.substring(5*i,5*i+tmp.length()%5);\n        \t\telse splitedCode[i]=tmp.substring(5*i,5*i+5);\n        \t}\n        \t\t\n        \tfor(int i=0;i<(5-tmp.length()%5);i++)\n        \t\tsplitedCode[splitedCode.length-1]+=\"0\";\n        \t\n        \tStringBuilder sb = new StringBuilder();\n        \tfor(int i=0;i<splitedCode.length;i++)\n        \t\tsb.append(dp.get(splitedCode[i]));\n        \tSystem.out.println(sb);\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tString[] a={\" \",\"'\",\",\",\"-\",\".\",\"?\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\n\t\tString[] b1={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\t\tString[] b2={\"11010\",\"11110\",\"11100\",\"11101\",\"11011\",\"11111\",\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\"};\n\t\tScanner sc=new Scanner(System.in);\n\t\twhile(sc.hasNextLine()){\n\t\t\tchar[] c1=sc.nextLine().toCharArray();\n\t\t\tString str=\"\";\n\t\t\tfor(int i=0;i<c1.length;i++){\n\t\t\t\tfor(int j=0;j<a.length;j++){\n\t\t\t\t\tif(a[j].equals(c1[i]+\"\")){\n\t\t\t\t\t\tstr+=b1[j];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tchar[] c2=str.toCharArray();\n\t\t\tString[] strArray=new String[c2.length%5==0?c2.length/5:c2.length/5+1];\n\t\t\tint ptr=0;\n\t\t\tfor(int i=0;i<strArray.length;i++){\n\t\t\t\tstrArray[i]=\"\";\n\t\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\t\ttry{\n\t\t\t\t\t\tstrArray[i]+=(c2[ptr++]+\"\");\n\t\t\t\t\t}catch(ArrayIndexOutOfBoundsException e){\n\t\t\t\t\t\tstrArray[i]+=\"0\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tString answer=\"\";\n\t\t\tfor(int i=0;i<strArray.length;i++){\n\t\t\t\tfor(int j=0;j<b2.length;j++){\n\t\t\t\t\tif(strArray[i].equals(b2[j])){\n\t\t\t\t\t\tanswer+=a[j];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(answer);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.PrintWriter;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\nclass Main{\n\t static final HashMap<Character, String> Map1 = new HashMap<Character, String>() {\n\t        {\n\t            put(' ', \"101\");\n\t            put('\\'', \"000000\");\n\t            put(',', \"000011\");\n\t            put('-', \"10010001\");\n\t            put('.', \"010001\");\n\t            put('?', \"000001\");\n\t            put('A', \"100101\");\n\t            put('B', \"10011010\");\n\t            put('C', \"0101\");\n\t            put('D', \"0001\");\n\t            put('E', \"110\");\n\t            put('F', \"01001\");\n\t            put('G', \"10011011\");\n\t            put('H', \"010000\");\n\t            put('I', \"0111\");\n\t            put('J', \"10011000\");\n\t            put('K', \"0110\");\n\t            put('L', \"00100\");\n\t            put('M', \"10011001\");\n\t            put('N', \"10011110\");\n\t            put('O', \"00101\");\n\t            put('P', \"111\");\n\t            put('Q', \"10011111\");\n\t            put('R', \"1000\");\n\t            put('S', \"00110\");\n\t            put('T', \"00111\");\n\t            put('U', \"10011100\");\n\t            put('V', \"10011101\");\n\t            put('W', \"000010\");\n\t            put('X', \"10010010\");\n\t            put('Y', \"10010011\");\n\t            put('Z', \"10010000\");\n\t        }\n\t    };\n\t \n\t    static final HashMap<String, Character> Map2 = new HashMap<String, Character>() {\n\t        {\n\t            put(\"00000\", 'A');\n\t            put(\"00001\", 'B');\n\t            put(\"00010\", 'C');\n\t            put(\"00011\", 'D');\n\t            put(\"00100\", 'E');\n\t            put(\"00101\", 'F');\n\t            put(\"00110\", 'G');\n\t            put(\"00111\", 'H');\n\t            put(\"01000\", 'I');\n\t            put(\"01001\", 'J');\n\t            put(\"01010\", 'K');\n\t            put(\"01011\", 'L');\n\t            put(\"01100\", 'M');\n\t            put(\"01101\", 'N');\n\t            put(\"01110\", 'O');\n\t            put(\"01111\", 'P');\n\t            put(\"10000\", 'Q');\n\t            put(\"10001\", 'R');\n\t            put(\"10010\", 'S');\n\t            put(\"10011\", 'T');\n\t            put(\"10100\", 'U');\n\t            put(\"10101\", 'V');\n\t            put(\"10110\", 'W');\n\t            put(\"10111\", 'X');\n\t            put(\"11000\", 'Y');\n\t            put(\"11001\", 'Z');\n\t            put(\"11010\", ' ');\n\t            put(\"11011\", '.');\n\t            put(\"11100\", ',');\n\t            put(\"11101\", '-');\n\t            put(\"11110\", '\\'');\n\t            put(\"11111\", '?');\n\t        }\n\t    };\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner (System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint count;\n\t\twhile(sc.hasNext()){\n\t\t\tString temp = sc.nextLine();\n\t\t\tchar [] character = temp.toCharArray();\n\t\t\tString Original = \"\";\n\t\t\tfor(int i = 0; i < character.length; i++){\n\t\t\t\tOriginal += Map1.get(character[i]);\n\t\t\t}\n\t\t\tchar ans[] = Original.toCharArray();\n\t\t\tfor(int i = 0; i < ans.length - ans.length%5 ; i+=5 ){\n\t\t\t\ttemp = \"\";\n\t\t\t\tfor(int j =  0; j < 5; j++ ){\n\t\t\t\t\ttemp += ans[j+i];\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tout.print(Map2.get(temp));\n\t\t\t}\n\t\t\tif(ans.length%5!= 0){\n\t\t\t\ttemp = \"\";\n\t\t\t\tfor(int i = ans.length - ans.length%5  ; i < ans.length  ; i++){\n\t\t\t\t\ttemp += ans[i];\n\t\t\t\t}\n\t\t\t\twhile(temp.length() < 5){\n\t\t\t\t\ttemp += \"0\";\n\t\t\t\t}\n\t\t\t\tout.println(Map2.get(temp));\n\t\t\t}\n\t\t\tout.flush();\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n\t\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.io.*;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Scanner;\npublic class Main {\n    static final HashMap<Character, String> map1 = new HashMap<Character, String>() {\n        {\n            put(' ', \"101\");\n            put('\\'', \"000000\");\n            put(',', \"000011\");\n            put('-', \"10010001\");\n            put('.', \"010001\");\n            put('?', \"000001\");\n            put('A', \"100101\");\n            put('B', \"10011010\");\n            put('C', \"0101\");\n            put('D', \"0001\");\n            put('E', \"110\");\n            put('F', \"01001\");\n            put('G', \"10011011\");\n            put('H', \"010000\");\n            put('I', \"0111\");\n            put('J', \"10011000\");\n            put('K', \"0110\");\n            put('L', \"00100\");\n            put('M', \"10011001\");\n            put('N', \"10011110\");\n            put('O', \"00101\");\n            put('P', \"111\");\n            put('Q', \"10011111\");\n            put('R', \"1000\");\n            put('S', \"00110\");\n            put('T', \"00111\");\n            put('U', \"10011100\");\n            put('V', \"10011101\");\n            put('W', \"000010\");\n            put('X', \"10010010\");\n            put('Y', \"10010011\");\n            put('Z', \"10010000\");\n        }\n    };\n \n    static final HashMap<String, Character> map2 = new HashMap<String, Character>() {\n        {\n            put(\"00000\", 'A');\n            put(\"00001\", 'B');\n            put(\"00010\", 'C');\n            put(\"00011\", 'D');\n            put(\"00100\", 'E');\n            put(\"00101\", 'F');\n            put(\"00110\", 'G');\n            put(\"00111\", 'H');\n            put(\"01000\", 'I');\n            put(\"01001\", 'J');\n            put(\"01010\", 'K');\n            put(\"01011\", 'L');\n            put(\"01100\", 'M');\n            put(\"01101\", 'N');\n            put(\"01110\", 'O');\n            put(\"01111\", 'P');\n            put(\"10000\", 'Q');\n            put(\"10001\", 'R');\n            put(\"10010\", 'S');\n            put(\"10011\", 'T');\n            put(\"10100\", 'U');\n            put(\"10101\", 'V');\n            put(\"10110\", 'W');\n            put(\"10111\", 'X');\n            put(\"11000\", 'Y');\n            put(\"11001\", 'Z');\n            put(\"11010\", ' ');\n            put(\"11011\", '.');\n            put(\"11100\", ',');\n            put(\"11101\", '-');\n            put(\"11110\", '\\'');\n            put(\"11111\", '?');\n        }\n    };\n \n\tpublic static void main(String[] args) {\n\t\t\n\t\tFastScanner sc = new FastScanner();\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\twhile(stdIn.hasNext()) {\n\t\t\tStringBuffer buf = new StringBuffer();\n\t\t\tbuf.append(stdIn.nextLine());\n\t\t\tStringBuffer buf2 = new StringBuffer();\n\t\t\tfor(int i = 0; i < buf.length(); i++) {\n\t\t\t\tbuf2.append(map1.get(buf.charAt(i)));\n\t\t\t}\n\t\t\tif(buf2.length() % 5 != 5) {\n\t\t\t\tfor(int i = buf2.length() % 5; i <= 5; i++) {\n\t\t\t\t\tbuf2.append(\"0\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuf = new StringBuffer();\n\t\t\tfor(int i = 0; i < buf2.length()/5; i++) {\n\t\t\t\tbuf.append(map2.get(buf2.substring(i*5,(i+1)*5)));\n\t\t\t}\n\t\t\tout.println(buf.toString());\n\t\t\t\n\t\t}\n\t\tout.flush();\n\t\t\n\t}\n}\n//------------------------------//\n//-----------//\nclass FastScanner {\n    private final InputStream in = System.in;\n    private final byte[] buffer = new byte[1024];\n    private int ptr = 0;\n    private int buflen = 0;\n    private boolean hasNextByte() {\n        if (ptr < buflen) {\n            return true;\n        }else{\n            ptr = 0;\n            try {\n                buflen = in.read(buffer);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            if (buflen <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n    private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n    private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n    public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n    public String next() {\n        if (!hasNext()) throw new NoSuchElementException();\n        StringBuilder sb = new StringBuilder();\n        int b = readByte();\n        while(isPrintableChar(b)) {\n            sb.appendCodePoint(b);\n            b = readByte();\n        }\n        return sb.toString();\n    }\n    public long nextLong() {\n        if (!hasNext()) throw new NoSuchElementException();\n        long n = 0;\n        boolean minus = false;\n        int b = readByte();\n        if (b == '-') {\n            minus = true;\n            b = readByte();\n        }\n        if (b < '0' || '9' < b) {\n            throw new NumberFormatException();\n        }\n        while(true){\n            if ('0' <= b && b <= '9') {\n                n *= 10;\n                n += b - '0';\n            }else if(b == -1 || !isPrintableChar(b)){\n                return minus ? -n : n;\n            }else{\n                throw new NumberFormatException();\n            }\n            b = readByte();\n        }\n    }\n    \n    public int nextInt() {\n    \treturn (int)nextLong();\n    }\n    \n\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Main {\n\n    public static void main(String[] args) throws IOException {\n        doit(args, System.in, System.out);\n    }\n\n    static void doit(String[] args, InputStream in, PrintStream out)\n            throws IOException {\n        initMaps();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n            String enc = encode(line);\n            String result = decode(enc);\n            out.println(result);\n        }\n    }\n\n    private static String encode(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n            String code = encodeMap.get(ch);\n            sb.append(code);\n        }\n        int r = sb.length() % 5;\n        if (r != 0) {\n            int pad = 5 - r;\n            for (int i = 0; i < pad; i++) {\n                sb.append(\"0\");\n\n            }\n        }\n        return sb.toString();\n    }\n\n    private static String decode(String enc) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < enc.length(); i += 5) {\n            String code = enc.substring(i, i + 5);\n            char ch = decodeMap.get(code);\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n\n    private static Map<Character, String> encodeMap = new HashMap<Character, String>();\n\n    private static Map<String, Character> decodeMap = new HashMap<String, Character>();\n\n    private static void initMaps() {\n        encodeMap.put(' ', \"101\");\n        encodeMap.put('\\'', \"000000\");\n        encodeMap.put(',', \"000011\");\n        encodeMap.put('-', \"10010001\");\n        encodeMap.put('.', \"010001\");\n        encodeMap.put('?', \"000001\");\n        encodeMap.put('A', \"100101\");\n        encodeMap.put('B', \"10011010\");\n        encodeMap.put('C', \"0101\");\n        encodeMap.put('D', \"0001\");\n        encodeMap.put('E', \"110\");\n        encodeMap.put('F', \"01001\");\n        encodeMap.put('G', \"10011011\");\n        encodeMap.put('H', \"010000\");\n        encodeMap.put('I', \"0111\");\n        encodeMap.put('J', \"10011000\");\n        encodeMap.put('K', \"0110\");\n        encodeMap.put('L', \"00100\");\n        encodeMap.put('M', \"10011001\");\n        encodeMap.put('N', \"10011110\");\n        encodeMap.put('O', \"00101\");\n        encodeMap.put('P', \"111\");\n        encodeMap.put('Q', \"10011111\");\n        encodeMap.put('R', \"1000\");\n        encodeMap.put('S', \"00110\");\n        encodeMap.put('T', \"00111\");\n        encodeMap.put('U', \"10011100\");\n        encodeMap.put('V', \"10011101\");\n        encodeMap.put('W', \"000010\");\n        encodeMap.put('X', \"10010010\");\n        encodeMap.put('Y', \"10010011\");\n        encodeMap.put('Z', \"10010000\");\n\n        decodeMap.put(\"00000\", 'A');\n        decodeMap.put(\"00001\", 'B');\n        decodeMap.put(\"00010\", 'C');\n        decodeMap.put(\"00011\", 'D');\n        decodeMap.put(\"00100\", 'E');\n        decodeMap.put(\"00101\", 'F');\n        decodeMap.put(\"00110\", 'G');\n        decodeMap.put(\"00111\", 'H');\n        decodeMap.put(\"01000\", 'I');\n        decodeMap.put(\"01001\", 'J');\n        decodeMap.put(\"01010\", 'K');\n        decodeMap.put(\"01011\", 'L');\n        decodeMap.put(\"01100\", 'M');\n        decodeMap.put(\"01101\", 'N');\n        decodeMap.put(\"01110\", 'O');\n        decodeMap.put(\"01111\", 'P');\n        decodeMap.put(\"10000\", 'Q');\n        decodeMap.put(\"10001\", 'R');\n        decodeMap.put(\"10010\", 'S');\n        decodeMap.put(\"10011\", 'T');\n        decodeMap.put(\"10100\", 'U');\n        decodeMap.put(\"10101\", 'V');\n        decodeMap.put(\"10110\", 'W');\n        decodeMap.put(\"10111\", 'X');\n        decodeMap.put(\"11000\", 'Y');\n        decodeMap.put(\"11001\", 'Z');\n        decodeMap.put(\"11010\", ' ');\n        decodeMap.put(\"11011\", '.');\n        decodeMap.put(\"11100\", ',');\n        decodeMap.put(\"11101\", '-');\n        decodeMap.put(\"11110\", '\\'');\n        decodeMap.put(\"11111\", '?');\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tstatic final HashMap<Character, String> c1 = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");\n\t\t\tput('\\'', \"000000\");\n\t\t\tput(',', \"000011\");\n\t\t\tput('-', \"10010001\");\n\t\t\tput('.', \"010001\");\n\t\t\tput('?', \"000001\");\n\t\t\tput('A', \"100101\");\n\t\t\tput('B', \"10011010\");\n\t\t\tput('C', \"0101\");\n\t\t\tput('D', \"0001\");\n\t\t\tput('E', \"110\");\n\t\t\tput('F', \"01001\");\n\t\t\tput('G', \"10011011\");\n\t\t\tput('H', \"010000\");\n\t\t\tput('I', \"0111\");\n\t\t\tput('J', \"10011000\");\n\t\t\tput('K', \"0110\");\n\t\t\tput('L', \"00100\");\n\t\t\tput('M', \"10011001\");\n\t\t\tput('N', \"10011110\");\n\t\t\tput('O', \"00101\");\n\t\t\tput('P', \"111\");\n\t\t\tput('Q', \"10011111\");\n\t\t\tput('R', \"1000\");\n\t\t\tput('S', \"00110\");\n\t\t\tput('T', \"00111\");\n\t\t\tput('U', \"10011100\");\n\t\t\tput('V', \"10011101\");\n\t\t\tput('W', \"000010\");\n\t\t\tput('X', \"10010010\");\n\t\t\tput('Y', \"10010011\");\n\t\t\tput('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> c2 = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"00000\", 'A');\n\t\t\tput(\"00001\", 'B');\n\t\t\tput(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D');\n\t\t\tput(\"00100\", 'E');\n\t\t\tput(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G');\n\t\t\tput(\"00111\", 'H');\n\t\t\tput(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J');\n\t\t\tput(\"01010\", 'K');\n\t\t\tput(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M');\n\t\t\tput(\"01101\", 'N');\n\t\t\tput(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P');\n\t\t\tput(\"10000\", 'Q');\n\t\t\tput(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S');\n\t\t\tput(\"10011\", 'T');\n\t\t\tput(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V');\n\t\t\tput(\"10110\", 'W');\n\t\t\tput(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y');\n\t\t\tput(\"11001\", 'Z');\n\t\t\tput(\"11010\", ' ');\n\t\t\tput(\"11011\", '.');\n\t\t\tput(\"11100\", ',');\n\t\t\tput(\"11101\", '-');\n\t\t\tput(\"11110\", '\\'');\n\t\t\tput(\"11111\", '?');\n\t\t}\n\t};\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null) {\n\t\t\t//\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1.get(c));\n\t\t\t}\n\t\t\t//\n\t\t\tsb1.append(\"00000\");\n\t\t\t//\n\t\t\tString line2 = sb1.toString();\n\t\t\tfor (int i = 0; i < line2.length() - 5; i += 5) {\n\t\t\t\tsb2.append(c2.get(line2.substring(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println(sb2.toString());\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.io.*;\n//import java.util.Arrays;\npublic class Main {\n\tpublic static void main(String[] args) throws java.io.IOException {\n\t\tScanner scan = new Scanner(System.in);\n\t\tInputStreamReader is = new InputStreamReader(System.in);\n\t\tBufferedReader br = new BufferedReader(is);\n\t\twhile(scan.hasNext()){\n\t\tString text = \"\";\n\t\ttext += br.readLine();\n\t\tchar mozi[] = text.toCharArray();\n\t\tString To = \"\";\n\t\tfor(int i = 0 ; i < mozi.length ; i++){\n\t\t\tString Hantei =  String.valueOf(mozi[i]);\n\t\t\tif(Hantei.equals(\"A\")){\n\t\t\t\tTo += \"100101\";\n\t\t\t}else if(Hantei.equals(\"B\")){\n\t\t\t\tTo += \"10011010\";\n\t\t\t}else if(Hantei.equals(\"C\")){\n\t\t\t\tTo += \"0101\";\n\t\t\t}else if(Hantei.equals(\"D\")){\n\t\t\t\tTo += \"0001\";\n\t\t\t}else if(Hantei.equals(\"E\")){\n\t\t\t\tTo += \"110\";\n\t\t\t}else if(Hantei.equals(\"F\")){\n\t\t\t\tTo += \"01001\";\n\t\t\t}else if(Hantei.equals(\"G\")){\n\t\t\t\tTo += \"10011011\";\n\t\t\t}else if(Hantei.equals(\"H\")){\n\t\t\t\tTo += \"010000\";\n\t\t\t}else if(Hantei.equals(\"I\")){\n\t\t\t\tTo += \"0111\";\n\t\t\t}else if(Hantei.equals(\"J\")){\n\t\t\t\tTo += \"10011000\";\n\t\t\t}else if(Hantei.equals(\"K\")){\n\t\t\t\tTo += \"0110\";\n\t\t\t}else if(Hantei.equals(\"L\")){\n\t\t\t\tTo += \"00100\";\n\t\t\t}else if(Hantei.equals(\"M\")){\n\t\t\t\tTo += \"10011001\";\n\t\t\t}else if(Hantei.equals(\"N\")){\n\t\t\t\tTo += \"10011110\";\n\t\t\t}else if(Hantei.equals(\"O\")){\n\t\t\t\tTo += \"00101\";\n\t\t\t}else if(Hantei.equals(\"P\")){\n\t\t\t\tTo += \"111\";\n\t\t\t}else if(Hantei.equals(\"Q\")){\n\t\t\t\tTo += \"10011111\";\n\t\t\t}else if(Hantei.equals(\"R\")){\n\t\t\t\tTo += \"1000\";\n\t\t\t}else if(Hantei.equals(\"S\")){\n\t\t\t\tTo += \"00110\";\n\t\t\t}else if(Hantei.equals(\"T\")){\n\t\t\t\tTo += \"00111\";\n\t\t\t}else if(Hantei.equals(\"U\")){\n\t\t\t\tTo += \"10011100\";\n\t\t\t}else if(Hantei.equals(\"V\")){\n\t\t\t\tTo += \"10011101\";\n\t\t\t}else if(Hantei.equals(\"W\")){\n\t\t\t\tTo += \"000010\";\n\t\t\t}else if(Hantei.equals(\"X\")){\n\t\t\t\tTo += \"10010010\";\n\t\t\t}else if(Hantei.equals(\"Y\")){\n\t\t\t\tTo += \"10010011\";\n\t\t\t}else if(Hantei.equals(\"Z\")){\n\t\t\t\tTo += \"10010000\";\n\t\t\t}else if(Hantei.equals(\" \")){\n\t\t\t\tTo += \"101\";\n\t\t\t}else if(Hantei.equals(\"'\")){\n\t\t\t\tTo += \"000000\";\n\t\t\t}else if(Hantei.equals(\",\")){\n\t\t\t\tTo += \"000011\";\n\t\t\t}else if(Hantei.equals(\"-\")){\n\t\t\t\tTo += \"10010001\";\n\t\t\t}else if(Hantei.equals(\".\")){\n\t\t\t\tTo += \"010001\";\n\t\t\t}else if(Hantei.equals(\"?\")){\n\t\t\t\tTo += \"000001\";\n\t\t\t}\n\t\t}\n\t\tint amari =  To.length()%5;\n\t\tif(amari == 1){\n\t\t\tTo += \"0000\";\n\t\t}else if(amari == 2){\n\t\t\tTo += \"000\";\n\t\t}else if(amari == 3){\n\t\t\tTo += \"00\";\n\t\t}else if(amari == 4){\n\t\t\tTo += \"0\";\n\t\t}\n\t\tint won[] = new int[To.length()/5];\n\t\tint j;\n\t\tString newtext = \"\";\n\t\tfor(j = 0 ; j < To.length()/5 ; j++){\n\t\t\twon[j] = Integer.parseInt(To.substring(j*5,(j+1)*5));\n\t\t\tif(won[j] == 0){\n\t\t\t\tnewtext += \"A\";\n\t\t\t}else if(won[j] == 1){\n\t\t\t\tnewtext += \"B\";\n\t\t\t}else if(won[j] == 10){\n\t\t\t\tnewtext += \"C\";\n\t\t\t}else if(won[j] == 11){\n\t\t\t\tnewtext += \"D\";\n\t\t\t}else if(won[j] == 100){\n\t\t\t\tnewtext += \"E\";\n\t\t\t}else if(won[j] == 101){\n\t\t\t\tnewtext += \"F\";\n\t\t\t}else if(won[j] == 110){\n\t\t\t\tnewtext += \"G\";\n\t\t\t}else if(won[j] == 111){\n\t\t\t\tnewtext += \"H\";\n\t\t\t}else if(won[j] == 1000){\n\t\t\t\tnewtext += \"I\";\n\t\t\t}else if(won[j] == 1001){\n\t\t\t\tnewtext += \"J\";\n\t\t\t}else if(won[j] == 1010){\n\t\t\t\tnewtext += \"K\";\n\t\t\t}else if(won[j] == 1011){\n\t\t\t\tnewtext += \"L\";\n\t\t\t}else if(won[j] == 1100){\n\t\t\t\tnewtext += \"M\";\n\t\t\t}else if(won[j] == 1101){\n\t\t\t\tnewtext += \"N\";\n\t\t\t}else if(won[j] == 1110){\n\t\t\t\tnewtext += \"O\";\n\t\t\t}else if(won[j] == 1111){\n\t\t\t\tnewtext += \"P\";\n\t\t\t}else if(won[j] == 10000){\n\t\t\t\tnewtext += \"Q\";\n\t\t\t}else if(won[j] == 10001){\n\t\t\t\tnewtext += \"R\";\n\t\t\t}else if(won[j] == 10010){\n\t\t\t\tnewtext += \"S\";\n\t\t\t}else if(won[j] == 10011){\n\t\t\t\tnewtext += \"T\";\n\t\t\t}else if(won[j] == 10100){\n\t\t\t\tnewtext += \"U\";\n\t\t\t}else if(won[j] == 10101){\n\t\t\t\tnewtext += \"V\";\n\t\t\t}else if(won[j] == 10110){\n\t\t\t\tnewtext += \"W\";\n\t\t\t}else if(won[j] == 10111){\n\t\t\t\tnewtext += \"X\";\n\t\t\t}else if(won[j] == 11000){\n\t\t\t\tnewtext += \"Y\";\n\t\t\t}else if(won[j] == 11001){\n\t\t\t\tnewtext += \"Z\";\n\t\t\t}else if(won[j] == 11010){\n\t\t\t\tnewtext += \" \";\n\t\t\t}else if(won[j] == 11011){\n\t\t\t\tnewtext += \".\";\n\t\t\t}else if(won[j] == 11100){\n\t\t\t\tnewtext += \",\";\n\t\t\t}else if(won[j] == 11101){\n\t\t\t\tnewtext += \"-\";\n\t\t\t}else if(won[j] == 11110){\n\t\t\t\tnewtext += \"'\";\n\t\t\t}else{\n\t\t\t\tnewtext += \"?\";\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(newtext);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner scan = new Scanner(System.in);\n\t\tString ans = \"\";\n\t\twhile(scan.hasNext()){\n\t\t\tString str = scan.nextLine();\n\t\t\tif(scan.hasNext()){\n\t\t\t\tstr += \" \";\n\t\t\t}\n\t\t\tchar[] ch = str.toCharArray();\n\t\t\tString newstr = \"\";\n\t\t\tfor(int i = 0;i < ch.length;i++){\n\t\t\t\tswitch(ch[i]){\n\t\t\t\t\tcase ' ': newstr += \"101\";\tbreak;//\n\t\t\t\t\tcase '\\'': newstr += \"000000\";\tbreak;//\n\t\t\t\t\tcase ',': newstr += \"000011\"; break;//\n\t\t\t\t\tcase '-': newstr += \"10010001\"; break;//\n\t\t\t\t\tcase '.': newstr += \"010001\"; break;//\n\t\t\t\t\tcase '?': newstr += \"000001\"; break;//\n\t\t\t\t\tcase 'A': newstr += \"100101\"; break;//\n\t\t\t\t\tcase 'B': newstr += \"10011010\"; break;//\n\t\t\t\t\tcase 'C': newstr += \"0101\"; break;//\n\t\t\t\t\tcase 'D': newstr += \"0001\"; break;//\n\t\t\t\t\tcase 'E': newstr += \"110\"; break;//\n\t\t\t\t\tcase 'F': newstr += \"01001\"; break;//\n\t\t\t\t\tcase 'G': newstr += \"10011011\"; break;//\n\t\t\t\t\tcase 'H': newstr += \"010000\"; break;//\n\t\t\t\t\tcase 'I': newstr += \"0111\"; break;//\n\t\t\t\t\tcase 'J': newstr += \"10011000\"; break;//\n\t\t\t\t\tcase 'K': newstr += \"0110\"; break;//\n\t\t\t\t\tcase 'L': newstr += \"00100\"; break;//\n\t\t\t\t\tcase 'M': newstr += \"10011001\"; break;//\n\t\t\t\t\tcase 'N': newstr += \"10011110\"; break;//\n\t\t\t\t\tcase 'O': newstr += \"00101\"; break;//\n\t\t\t\t\tcase 'P': newstr += \"111\"; break;//\n\t\t\t\t\tcase 'Q': newstr += \"10011111\"; break;//\n\t\t\t\t\tcase 'R': newstr += \"1000\"; break;//\n\t\t\t\t\tcase 'S': newstr += \"00110\"; break;//\n\t\t\t\t\tcase 'T': newstr += \"00111\"; break;//\n\t\t\t\t\tcase 'U': newstr += \"10011100\"; break;//\n\t\t\t\t\tcase 'V': newstr += \"10011101\"; break;//\n\t\t\t\t\tcase 'W': newstr += \"000010\"; break;//\n\t\t\t\t\tcase 'X': newstr += \"10010010\"; break;//\n\t\t\t\t\tcase 'Y': newstr += \"10010011\"; break;//\n\t\t\t\t\tcase 'Z': newstr += \"10010000\"; break;//\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile(newstr.length() % 5 > 0){\n\t\t\t\tnewstr += \"0\";\n\t\t\t}\n\t\t\t//System.out.println(newstr);\n\t\t\tstr = \"\";\n\t\t\tfor(int i = 0;i < newstr.length();i += 5){\n\t\t\t\tif(newstr.substring(i,i+5).equals(\"00000\")){\n\t\t\t\t\tstr += \"A\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"00001\")){\n\t\t\t\t\tstr += \"B\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"00010\")){\n\t\t\t\t\tstr += \"C\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"00011\")){\n\t\t\t\t\tstr += \"D\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"00100\")){\n\t\t\t\t\tstr += \"E\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"00101\")){\n\t\t\t\t\tstr += \"F\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"00110\")){\n\t\t\t\t\tstr += \"G\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"00111\")){\n\t\t\t\t\tstr += \"H\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01000\")){\n\t\t\t\t\tstr += \"I\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01001\")){\n\t\t\t\t\tstr += \"J\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01010\")){\n\t\t\t\t\tstr += \"K\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01011\")){\n\t\t\t\t\tstr += \"L\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01100\")){\n\t\t\t\t\tstr += \"M\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01101\")){\n\t\t\t\t\tstr += \"N\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01110\")){\n\t\t\t\t\tstr += \"O\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"01111\")){\n\t\t\t\t\tstr += \"P\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10000\")){\n\t\t\t\t\tstr += \"Q\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10001\")){\n\t\t\t\t\tstr += \"R\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10010\")){\n\t\t\t\t\tstr += \"S\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10011\")){\n\t\t\t\t\tstr += \"T\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10100\")){\n\t\t\t\t\tstr += \"U\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10101\")){\n\t\t\t\t\tstr += \"V\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10110\")){\n\t\t\t\t\tstr += \"W\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"10111\")){\n\t\t\t\t\tstr += \"X\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11000\")){\n\t\t\t\t\tstr += \"Y\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11001\")){\n\t\t\t\t\tstr += \"Z\";\t\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11010\")){\n\t\t\t\t\tstr += \" \";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11011\")){\n\t\t\t\t\tstr += \".\";\t\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11100\")){\n\t\t\t\t\tstr += \",\";\t\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11101\")){\n\t\t\t\t\tstr += \"-\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11110\")){\n\t\t\t\t\tstr += \"'\";\n\t\t\t\t}else if(newstr.substring(i,i+5).equals(\"11111\")){\n\t\t\t\t\tstr += \"?\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tans += str;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tMain instance = new Main();\n\t\tinstance.execute();\n\t}\n\t\n\tprivate void execute() throws IOException {\n\t\tBufferedReader sc = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tMap<String, String> encriptMap = getEncriptMap();\n\t\tMap<String, String> decriptMap = getDecriptMap();\n\n\t\tStringBuilder sb;\n\t\tString line;\n\t\twhile((line = sc.readLine()) != null) {\n\t\t\tsb = new StringBuilder();\n\t\t\tfor(int i = 0 ; i < line.length() ; i++) {\n\t\t\t\tsb.append(encriptMap.get(line.substring(i, i + 1)));\n\t\t\t}\n\t\t\t\n\t\t\twhile(sb.length() % 5 > 0) {\n\t\t\t\tsb.append(\"0\");\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i = 0 ; i < sb.length(); i = i + 5) {\n\t\t\t\tSystem.out.print(decriptMap.get(sb.substring(i, i + 5)));\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate Map<String, String> getEncriptMap() {\n\t\tMap<String, String> map = new HashMap<String, String>();\n\t\tmap.put(\" \", \"101\");\n\t\tmap.put(\"'\", \"000000\");\n\t\tmap.put(\",\", \"000011\");\n\t\tmap.put(\"-\", \"10010001\");\n\t\tmap.put(\".\", \"010001\");\n\t\tmap.put(\"?\", \"000001\");\n\t\tmap.put(\"A\", \"100101\");\n\t\tmap.put(\"B\", \"10011010\");\n\t\tmap.put(\"C\", \"0101\");\n\t\tmap.put(\"D\", \"0001\");\n\t\tmap.put(\"E\", \"110\");\n\t\tmap.put(\"F\", \"01001\");\n\t\tmap.put(\"G\", \"10011011\");\n\t\tmap.put(\"H\", \"010000\");\n\t\tmap.put(\"I\", \"0111\");\n\t\tmap.put(\"J\", \"10011000\");\n\t\tmap.put(\"K\", \"0110\");\n\t\tmap.put(\"L\", \"00100\");\n\t\tmap.put(\"M\", \"10011001\");\n\t\tmap.put(\"N\", \"10011110\");\n\t\tmap.put(\"O\", \"00101\");\n\t\tmap.put(\"P\", \"111\");\n\t\tmap.put(\"Q\", \"10011111\");\n\t\tmap.put(\"R\", \"1000\");\n\t\tmap.put(\"S\", \"00110\");\n\t\tmap.put(\"T\", \"00111\");\n\t\tmap.put(\"U\", \"10011100\");\n\t\tmap.put(\"V\", \"10011101\");\n\t\tmap.put(\"W\", \"000010\");\n\t\tmap.put(\"X\", \"10010010\");\n\t\tmap.put(\"Y\", \"10010011\");\n\t\tmap.put(\"Z\", \"10010000\");\n\t\treturn map;\n\t}\n\tprivate Map<String, String> getDecriptMap() {\n\t\tMap<String, String> map = new HashMap<String, String>();\n\t\tmap.put(\"00000\", \"A\");\n\t\tmap.put(\"00001\", \"B\");\n\t\tmap.put(\"00010\", \"C\");\n\t\tmap.put(\"00011\", \"D\");\n\t\tmap.put(\"00100\", \"E\");\n\t\tmap.put(\"00101\", \"F\");\n\t\tmap.put(\"00110\", \"G\");\n\t\tmap.put(\"00111\", \"H\");\n\t\tmap.put(\"01000\", \"I\");\n\t\tmap.put(\"01001\", \"J\");\n\t\tmap.put(\"01010\", \"K\");\n\t\tmap.put(\"01011\", \"L\");\n\t\tmap.put(\"01100\", \"M\");\n\t\tmap.put(\"01101\", \"N\");\n\t\tmap.put(\"01110\", \"O\");\n\t\tmap.put(\"01111\", \"P\");\n\t\tmap.put(\"10000\", \"Q\");\n\t\tmap.put(\"10001\", \"R\");\n\t\tmap.put(\"10010\", \"S\");\n\t\tmap.put(\"10011\", \"T\");\n\t\tmap.put(\"10100\", \"U\");\n\t\tmap.put(\"10101\", \"V\");\n\t\tmap.put(\"10110\", \"W\");\n\t\tmap.put(\"10111\", \"X\");\n\t\tmap.put(\"11000\", \"Y\");\n\t\tmap.put(\"11001\", \"Z\");\n\t\tmap.put(\"11010\", \" \");\n\t\tmap.put(\"11011\", \".\");\n\t\tmap.put(\"11100\", \",\");\n\t\tmap.put(\"11101\", \"-\");\n\t\tmap.put(\"11110\", \"\");\n\t\tmap.put(\"11111\", \"?\");\n\t\treturn map;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\n\npublic class Main \n{\n\tpublic static void main(String[] args)\n\t{\n\t\tString input = new Scanner(System.in).nextLine();\n\t\t\n\t\tString sign = \"\";\n\t\tfor(int i=0; i<input.length(); i++)\n\t\t{\n\t\t\tsign += toSign(input.substring(i, i+1));\n\t\t}\n\t\tif(sign.length()%5 != 0)\n\t\t{\n\t\t\tint s = sign.length()%5;\n\t\t\tfor(int i=0; i<5-s; i++)\n\t\t\t{\n\t\t\t\tsign += \"0\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tString output = \"\";\n\t\tfor(int i=0; i<sign.length(); i+=5)\n\t\t{\n\t\t\toutput += toChar(sign.substring(i, i+5));\n\t\t}\n\t\t\n\t\tSystem.out.println(output);\n\t}\n\t\n\tstatic String toSign(String str)\n\t{\n\t\tswitch(str)\n\t\t{\n\t\t\tcase \" \":\n\t\t\t\treturn \"101\";\n\t\t\tcase \"'\":\n\t\t\t\treturn \"000000\";\n\t\t\tcase \",\":\n\t\t\t\treturn \"000011\";\n\t\t\tcase \"-\":\n\t\t\t\treturn \"10010001\";\n\t\t\tcase \".\":\n\t\t\t\treturn \"010001\";\n\t\t\tcase \"?\":\n\t\t\t\treturn \"000001\";\n\t\t\tcase \"A\":\n\t\t\t\treturn \"100101\";\n\t\t\tcase \"B\":\n\t\t\t\treturn \"10011010\";\n\t\t\tcase \"C\":\n\t\t\t\treturn \"0101\";\n\t\t\tcase \"D\":\n\t\t\t\treturn \"0001\";\n\t\t\tcase \"E\":\n\t\t\t\treturn \"110\";\n\t\t\tcase \"F\":\n\t\t\t\treturn \"01001\";\n\t\t\tcase \"G\":\n\t\t\t\treturn \"10011011\";\n\t\t\tcase \"H\":\n\t\t\t\treturn \"010000\";\n\t\t\tcase \"I\":\n\t\t\t\treturn \"0111\";\n\t\t\tcase \"J\":\n\t\t\t\treturn \"10011000\";\n\t\t\tcase \"K\":\n\t\t\t\treturn \"0110\";\n\t\t\tcase \"L\":\n\t\t\t\treturn \"00100\";\n\t\t\tcase \"M\":\n\t\t\t\treturn \"10011001\";\n\t\t\tcase \"N\":\n\t\t\t\treturn \"10011110\";\n\t\t\tcase \"O\":\n\t\t\t\treturn \"00101\";\n\t\t\tcase \"P\":\n\t\t\t\treturn \"111\";\n\t\t\tcase \"Q\":\n\t\t\t\treturn \"10011111\";\n\t\t\tcase \"R\":\n\t\t\t\treturn \"1000\";\n\t\t\tcase \"S\":\n\t\t\t\treturn \"00110\";\n\t\t\tcase \"T\":\n\t\t\t\treturn \"00111\";\n\t\t\tcase \"U\":\n\t\t\t\treturn \"10011100\";\n\t\t\tcase \"V\":\n\t\t\t\treturn \"10011101\";\n\t\t\tcase \"W\":\n\t\t\t\treturn \"000010\";\n\t\t\tcase \"X\":\n\t\t\t\treturn \"10010010\";\n\t\t\tcase \"Y\":\n\t\t\t\treturn \"10010011\";\n\t\t\tcase \"Z\":\n\t\t\t\treturn \"10010000\";\n\t\t}\n\t\treturn \"\";\n\t}\n\t\n\tstatic String toChar(String str)\n\t{\n\t\tint n = 0;\n\t\tfor(int i=0; i<str.length(); i++)\n\t\t{\n\t\t\tn += str.substring(str.length()-i-1, str.length()-i).equals(\"1\") ? Math.pow(2, i) : 0;\n\t\t}\n\t\tif(n < 26)\n\t\t{\n\t\t\treturn Character.toString((char)('A'+n));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tswitch (n)\n\t\t\t{\n\t\t\t\tcase 26:\n\t\t\t\t\treturn \" \";\n\t\t\t\tcase 27:\n\t\t\t\t\treturn \".\";\n\t\t\t\tcase 28:\n\t\t\t\t\treturn \",\";\n\t\t\t\tcase 29:\n\t\t\t\t\treturn \"-\";\n\t\t\t\tcase 30:\n\t\t\t\t\treturn \"'\";\n\t\t\t\tcase 31:\n\t\t\t\t\treturn \"?\";\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn \"\";\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n\npublic class Main {\n\t\n\tprivate static String[] encode = {\n\t\t\"101\",\n\t\t\"000000\",\n\t\t\"000011\",\n\t\t\"10010001\",\n\t\t\"010001\",\n\t\t\"000001\",\n\t\t\"100101\",\n\t\t\"10011010\",\n\t\t\"0101\",\n\t\t\"0001\",\n\t\t\"110\",\n\t\t\"01001\",\n\t\t\"10011011\",\n\t\t\"010000\",\n\t\t\"0111\",\n\t\t\"10011000\",\n\t\t\"0110\",\n\t\t\"00100\",\n\t\t\"10011001\",\n\t\t\"10011110\",\n\t\t\"00101\",\n\t\t\"111\",\n\t\t\"10011111\",\n\t\t\"1000\",\n\t\t\"00110\",\n\t\t\"00111\",\n\t\t\"10011100\",\n\t\t\"10011101\",\n\t\t\"000010\",\n\t\t\"10010010\",\n\t\t\"10010011\",\n\t\t\"10010000\"\n\t};\n\t\n\tprivate static Map<String,Character> decode = new HashMap<String,Character>();\n\t\n\tprivate static String encodeChar(char c){\n\t\tif(c >= 'A' && c <= 'Z'){\n\t\t\treturn encode[c-'A'+6];\n\t\t}else if(c == ' '){\n\t\t\treturn encode[0];\n\t\t}else if(c == '\\''){\n\t\t\treturn encode[1];\n\t\t}else if(c == ','){\n\t\t\treturn encode[2];\n\t\t}else if(c == '-'){\n\t\t\treturn encode[3];\n\t\t}else if(c == '.'){\n\t\t\treturn encode[4];\n\t\t}else if(c == '?'){\n\t\t\treturn encode[5];\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tprivate static void init_decode(){\n\t\tdecode.put(\"00000\", 'A');\n\t\tdecode.put(\"00001\", 'B');\n\t\tdecode.put(\"00010\", 'C');\n\t\tdecode.put(\"00011\", 'D');\n\t\tdecode.put(\"00100\", 'E');\n\t\tdecode.put(\"00101\", 'F');\n\t\tdecode.put(\"00110\", 'G');\n\t\tdecode.put(\"00111\", 'H');\n\t\tdecode.put(\"01000\", 'I');\n\t\tdecode.put(\"01001\", 'J');\n\t\tdecode.put(\"01010\", 'K');\n\t\tdecode.put(\"01011\", 'L');\n\t\tdecode.put(\"01100\", 'M');\n\t\tdecode.put(\"01101\", 'N');\n\t\tdecode.put(\"01110\", 'O');\n\t\tdecode.put(\"01111\", 'P');\n\t\tdecode.put(\"10000\", 'Q');\n\t\tdecode.put(\"10001\", 'R');\n\t\tdecode.put(\"10010\", 'S');\n\t\tdecode.put(\"10011\", 'T');\n\t\tdecode.put(\"10100\", 'U');\n\t\tdecode.put(\"10101\", 'V');\n\t\tdecode.put(\"10110\", 'W');\n\t\tdecode.put(\"10111\", 'X');\n\t\tdecode.put(\"11000\", 'Y');\n\t\tdecode.put(\"11001\", 'Z');\n\t\tdecode.put(\"11010\", ' ');\n\t\tdecode.put(\"11011\", '.');\t\n\t\tdecode.put(\"11100\", ',');\n\t\tdecode.put(\"11101\", '-');\n\t\tdecode.put(\"11110\", '\\'');\n\t\tdecode.put(\"11111\", '?');\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tinit_decode();\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\twhile(sc.hasNextLine()){\n\t\t\tchar[] strs = sc.nextLine().toCharArray();\n\t\t\tStringBuilder br = new StringBuilder();\n\t\t\t\n\t\t\tfor(char c:strs){\n\t\t\t\tbr.append(encodeChar(c));\n\t\t\t}\n\t\t\t\n\t\t\tint tmp;\n\t\t\tif((tmp = br.length()%5) != 0){\n\t\t\t\tfor(int i = 0; i < (5 - tmp); i++){\n\t\t\t\t\tbr.append(\"0\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i = 0; i < br.length(); i+=5){\n\t\t\t\tSystem.out.print(decode.get(br.substring(i, i+5)));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\t\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Stack;\n \n\npublic class Main{\n          \n    static int nowLoca=1;\n     \n     public static void main(String args[]){\n         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n         \n         try{ String line;\n             while((line=br.readLine())!=null){if(line.isEmpty())break;\n               char[] chrs = line.toCharArray(); String bits=\"\";\n               for(char c:chrs){bits+=code(c);}\n               int len=bits.length(); \n               if(len%5!=0){for(int i=1;i<=5-(len%5);i++){bits+=\"0\";}}\n               String res=\"\";\n               for(int i=0;i<bits.length()/5;i++){\n                   String substr= bits.substring(5*i,5*i+5);\n                   res+=code2(substr);\n               }\n                 System.out.println(res);\n             } br.close();\n            \n         }catch(Exception e){e.printStackTrace();}         \n     }  \n     static String code2(String bits){\n         if(bits.equals(\"00000\")) return \"A\"; else if(bits.equals(\"00001\"))return \"B\"; \n         else if(bits.equals(\"00010\")) return \"C\"; else if(bits.equals(\"00011\"))return \"D\"; \n         else if(bits.equals(\"00100\")) return \"E\"; else if(bits.equals(\"00101\"))return \"F\"; \n         else if(bits.equals(\"00110\")) return \"G\"; else if(bits.equals(\"00111\"))return \"H\"; \n         else if(bits.equals(\"01000\")) return \"I\"; else if(bits.equals(\"01001\"))return \"J\"; \n         else if(bits.equals(\"01010\")) return \"K\"; else if(bits.equals(\"01011\"))return \"L\"; \n         else if(bits.equals(\"01100\")) return \"M\"; else if(bits.equals(\"01101\"))return \"N\"; \n         else if(bits.equals(\"01110\")) return \"O\"; else if(bits.equals(\"01111\"))return \"P\"; \n         else if(bits.equals(\"10000\")) return \"Q\"; else if(bits.equals(\"10001\"))return \"R\"; \n         else if(bits.equals(\"10010\")) return \"S\"; else if(bits.equals(\"10011\"))return \"T\"; \n         else if(bits.equals(\"10100\")) return \"U\"; else if(bits.equals(\"10101\"))return \"V\"; \n         else if(bits.equals(\"10110\")) return \"W\"; else if(bits.equals(\"10111\"))return \"X\"; \n         else if(bits.equals(\"11000\")) return \"Y\"; else if(bits.equals(\"11001\"))return \"Z\"; \n         else if(bits.equals(\"11010\")) return \" \"; else if(bits.equals(\"11011\"))return \".\"; \n         else if(bits.equals(\"11100\")) return \",\"; else if(bits.equals(\"11101\"))return \"-\"; \n         else if(bits.equals(\"11110\")) return \"\\'\"; else if(bits.equals(\"11111\"))return \"?\"; \n         else return \"_INV_\";\n     }\n    static String code(char c){\n        switch(c){\n            case ' ': return \"101\"; case '\\'': return \"000000\";\n            case ',': return \"000011\";  case '-': return \"10010001\";\n            case '.': return \"010001\";    case '?': return \"000001\";\n            case 'A': return \"100101\";          case 'B': return \"10011010\";\n            case 'C': return \"0101\";            case 'D': return \"0001\";\n            case 'E': return \"110\";            case 'F': return \"01001\";\n            case 'G': return \"10011011\";            case 'H': return \"010000\";\n            case 'I': return \"0111\";            case 'J': return \"10011000\";\n            case 'K': return \"0110\";            case 'L': return \"00100\";\n            case 'M': return \"10011001\";            case 'N': return \"10011110\";\n            case 'O': return \"00101\";            case 'P': return \"111\";\n            case 'Q': return \"10011111\";            case 'R': return \"1000\";\n            case 'S': return \"00110\";            case 'T': return \"00111\";\n            case 'U': return \"10011100\";            case 'V': return \"10011101\";\n            case 'W': return \"000010\";            case 'X': return \"10010010\";\n            case 'Y': return \"10010011\";            case 'Z': return \"10010000\";\n        }return \"Err\";\n    }\n     \n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main {\n  public static void main (String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    Map<String, String> enc = new HashMap<String, String>();\n    Map<String, String> dec = new HashMap<String, String>();\n    enc.put(\" \", \"101\");\n    enc.put(\"'\", \"000000\");\n    enc.put(\",\", \"000011\");\n    enc.put(\"-\", \"10010001\");\n    enc.put(\".\", \"010001\");\n    enc.put(\"?\", \"000001\");\n    enc.put(\"A\", \"100101\");\n    enc.put(\"B\", \"10011010\");\n    enc.put(\"C\", \"0101\");\n    enc.put(\"D\", \"0001\");\n    enc.put(\"E\", \"110\");\n    enc.put(\"F\", \"01001\");\n    enc.put(\"G\", \"10011011\");\n    enc.put(\"H\", \"010000\");\n    enc.put(\"I\", \"0111\");\n    enc.put(\"J\", \"10011000\");\n    enc.put(\"K\", \"0110\");\n    enc.put(\"L\", \"00100\");\n    enc.put(\"M\", \"10011001\");\n    enc.put(\"N\", \"10011110\");\n    enc.put(\"O\", \"00101\");\n    enc.put(\"P\", \"111\");\n    enc.put(\"Q\", \"10011111\");\n    enc.put(\"R\", \"1000\");\n    enc.put(\"S\", \"00110\");\n    enc.put(\"T\", \"00111\");\n    enc.put(\"U\", \"10011100\");\n    enc.put(\"V\", \"10011101\");\n    enc.put(\"W\", \"000010\");\n    enc.put(\"X\", \"10010010\");\n    enc.put(\"Y\", \"10010011\");\n    enc.put(\"Z\", \"10010000\");\n    dec.put(\"00000\", \"A\");\n    dec.put(\"00001\", \"B\");\n    dec.put(\"00010\", \"C\");\n    dec.put(\"00011\", \"D\");\n    dec.put(\"00100\", \"E\");\n    dec.put(\"00101\", \"F\");\n    dec.put(\"00110\", \"G\");\n    dec.put(\"00111\", \"H\");\n    dec.put(\"01000\", \"I\");\n    dec.put(\"01001\", \"J\");\n    dec.put(\"01010\", \"K\");\n    dec.put(\"01011\", \"L\");\n    dec.put(\"01100\", \"M\");\n    dec.put(\"01101\", \"N\");\n    dec.put(\"01110\", \"O\");\n    dec.put(\"01111\", \"P\");\n    dec.put(\"10000\", \"Q\");\n    dec.put(\"10001\", \"R\");\n    dec.put(\"10010\", \"S\");\n    dec.put(\"10011\", \"T\");\n    dec.put(\"10100\", \"U\");\n    dec.put(\"10101\", \"V\");\n    dec.put(\"10110\", \"W\");\n    dec.put(\"10111\", \"X\");\n    dec.put(\"11000\", \"Y\");\n    dec.put(\"11001\", \"Z\");\n    dec.put(\"11010\", \" \");\n    dec.put(\"11011\", \".\");\n    dec.put(\"11100\", \",\");\n    dec.put(\"11101\", \"-\");\n    dec.put(\"11110\", \"'\");\n    dec.put(\"11111\", \"?\");\n    while (scanner.hasNext()) {\n      String line = scanner.nextLine();\n      String encStr = \"\";\n      String decStr = \"\";\n      for (int ii = 0; ii < line.length(); ii++) {\n        encStr += enc.get(line.substring(ii, ii + 1));\n      }\n      int cnt = 0;\n      for (;;) {\n        try {\n          decStr += dec.get(encStr.substring(cnt, cnt + 5));\n          cnt += 5;\n          if (cnt == encStr.length()) {\n            break;\n          }\n        } catch (StringIndexOutOfBoundsException e) {\n          String work = (encStr.substring(cnt) + \"0000\").substring(0, 5);\n          decStr += dec.get(work);\n          break;\n        }\n      }\n      System.out.println(decStr);\n    }\n  }\n}"
  },
  {
    "language": "Java",
    "code": "\nimport java.io.*;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Scanner;\npublic class Main {\n    static final HashMap<Character, String> map1 = new HashMap<Character, String>() {\n        {\n            put(' ', \"101\");\n            put('\\'', \"000000\");\n            put(',', \"000011\");\n            put('-', \"10010001\");\n            put('.', \"010001\");\n            put('?', \"000001\");\n            put('A', \"100101\");\n            put('B', \"10011010\");\n            put('C', \"0101\");\n            put('D', \"0001\");\n            put('E', \"110\");\n            put('F', \"01001\");\n            put('G', \"10011011\");\n            put('H', \"010000\");\n            put('I', \"0111\");\n            put('J', \"10011000\");\n            put('K', \"0110\");\n            put('L', \"00100\");\n            put('M', \"10011001\");\n            put('N', \"10011110\");\n            put('O', \"00101\");\n            put('P', \"111\");\n            put('Q', \"10011111\");\n            put('R', \"1000\");\n            put('S', \"00110\");\n            put('T', \"00111\");\n            put('U', \"10011100\");\n            put('V', \"10011101\");\n            put('W', \"000010\");\n            put('X', \"10010010\");\n            put('Y', \"10010011\");\n            put('Z', \"10010000\");\n        }\n    };\n \n    static final HashMap<String, Character> map2 = new HashMap<String, Character>() {\n        {\n            put(\"00000\", 'A');\n            put(\"00001\", 'B');\n            put(\"00010\", 'C');\n            put(\"00011\", 'D');\n            put(\"00100\", 'E');\n            put(\"00101\", 'F');\n            put(\"00110\", 'G');\n            put(\"00111\", 'H');\n            put(\"01000\", 'I');\n            put(\"01001\", 'J');\n            put(\"01010\", 'K');\n            put(\"01011\", 'L');\n            put(\"01100\", 'M');\n            put(\"01101\", 'N');\n            put(\"01110\", 'O');\n            put(\"01111\", 'P');\n            put(\"10000\", 'Q');\n            put(\"10001\", 'R');\n            put(\"10010\", 'S');\n            put(\"10011\", 'T');\n            put(\"10100\", 'U');\n            put(\"10101\", 'V');\n            put(\"10110\", 'W');\n            put(\"10111\", 'X');\n            put(\"11000\", 'Y');\n            put(\"11001\", 'Z');\n            put(\"11010\", ' ');\n            put(\"11011\", '.');\n            put(\"11100\", ',');\n            put(\"11101\", '-');\n            put(\"11110\", '\\'');\n            put(\"11111\", '?');\n        }\n    };\n \n\tpublic static void main(String[] args) {\n\t\t\n\t\tFastScanner sc = new FastScanner();\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\twhile(stdIn.hasNext()) {\n\t\t\tStringBuffer buf = new StringBuffer();\n\t\t\tbuf.append(stdIn.nextLine());\n\t\t\tStringBuffer buf2 = new StringBuffer();\n\t\t\tfor(int i = 0; i < buf.length(); i++) {\n\t\t\t\tbuf2.append(map1.get(buf.charAt(i)));\n\t\t\t}\n\t\t\tif(buf2.length() % 5 != 0) {\n\t\t\t\tfor(int i = buf2.length() % 5; i <= 5; i++) {\n\t\t\t\t\tbuf2.append(\"0\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuf = new StringBuffer();\n\t\t\tfor(int i = 0; i < buf2.length()/5; i++) {\n\t\t\t\tbuf.append(map2.get(buf2.substring(i*5,(i+1)*5)));\n\t\t\t}\n\t\t\tout.println(buf.toString());\n\t\t\t\n\t\t}\n\t\tout.flush();\n\t\t\n\t}\n}\n//------------------------------//\n//-----------//\nclass FastScanner {\n    private final InputStream in = System.in;\n    private final byte[] buffer = new byte[1024];\n    private int ptr = 0;\n    private int buflen = 0;\n    private boolean hasNextByte() {\n        if (ptr < buflen) {\n            return true;\n        }else{\n            ptr = 0;\n            try {\n                buflen = in.read(buffer);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            if (buflen <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\n    private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\n    private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\n    public boolean hasNext() { skipUnprintable(); return hasNextByte();}\n    public String next() {\n        if (!hasNext()) throw new NoSuchElementException();\n        StringBuilder sb = new StringBuilder();\n        int b = readByte();\n        while(isPrintableChar(b)) {\n            sb.appendCodePoint(b);\n            b = readByte();\n        }\n        return sb.toString();\n    }\n    public long nextLong() {\n        if (!hasNext()) throw new NoSuchElementException();\n        long n = 0;\n        boolean minus = false;\n        int b = readByte();\n        if (b == '-') {\n            minus = true;\n            b = readByte();\n        }\n        if (b < '0' || '9' < b) {\n            throw new NumberFormatException();\n        }\n        while(true){\n            if ('0' <= b && b <= '9') {\n                n *= 10;\n                n += b - '0';\n            }else if(b == -1 || !isPrintableChar(b)){\n                return minus ? -n : n;\n            }else{\n                throw new NumberFormatException();\n            }\n            b = readByte();\n        }\n    }\n    \n    public int nextInt() {\n    \treturn (int)nextLong();\n    }\n    \n\n}"
  },
  {
    "language": "Java",
    "code": "\nimport static java.util.Arrays.deepToString;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\tvoid tr(Object... os) {\n\t\tSystem.err.println(deepToString(os));\n\t}\n\n\tScanner sc = new Scanner(System.in);\n\tpublic void run() {\n\t\tString in = \"\";\n\t\twhile (sc.hasNext()) {\n\t\t\tif (in.length() > 0) in += \" \";\n\t\t\tin += sc.nextLine();\n\t\t}\n\t\tchar[] s = in.toCharArray();\n\t\tchar[] t = getCode1(s);\n\t\tSystem.out.println(new String(t));\n\t}\n\t\n\tchar[] getCode1(char[] s) {\n\t\tArrayList<Integer> L = new ArrayList<Integer>();\n\t\t\n\t\tfor (char c : s) {\n\t\t\tString t = f(c);\n\t\t\tfor (int i = 0; i < t.length(); i++) {\n\t\t\t\tL.add(t.charAt(i) == '1' ? 1 : 0);\n\t\t\t}\n\t\t}\n\t\twhile (L.size() % 5 > 0) {\n\t\t\tL.add(0);\n\t\t}\n\t\t\n\t\tchar[] res = new char[L.size() / 5];\n\t\tfor (int i = 0; i < L.size(); i += 5) {\n\t\t\tString cc = \"\";\n\t\t\tfor (int j = 0; j < 5; j++) cc += L.get(i + j);\n\t\t\tres[i/5] = g(cc);\n\t\t}\n\t\treturn res;\n\t}\n\t\n\tMap<String, Character> mp;\n\t\n\t\n\tchar g(String s) {\n\t\tif (mp == null) {\n\t\t\tmp = new HashMap<String, Character>();\n\t\t\tmp.put(\"00000\",'A');\n\t\t\tmp.put(\"00001\",'B');\n\t\t\tmp.put(\"00010\",'C');\n\t\t\tmp.put(\"00011\",'D');\n\t\t\tmp.put(\"00100\",'E');\n\t\t\tmp.put(\"00101\",'F');\n\t\t\tmp.put(\"00110\",'G');\n\t\t\tmp.put(\"00111\",'H');\n\t\t\tmp.put(\"01000\",'I');\n\t\t\tmp.put(\"01001\",'J');\n\t\t\tmp.put(\"01010\",'K');\n\t\t\tmp.put(\"01011\",'L');\n\t\t\tmp.put(\"01100\",'M');\n\t\t\tmp.put(\"01101\",'N');\n\t\t\tmp.put(\"01110\",'O');\n\t\t\tmp.put(\"01111\",'P');\n\t\t\tmp.put(\"10000\",'Q');\n\t\t\tmp.put(\"10001\",'R');\n\t\t\tmp.put(\"10010\",'S');\n\t\t\tmp.put(\"10011\",'T');\n\t\t\tmp.put(\"10100\",'U');\n\t\t\tmp.put(\"10101\",'V');\n\t\t\tmp.put(\"10110\",'W');\n\t\t\tmp.put(\"10111\",'X');\n\t\t\tmp.put(\"11000\",'Y');\n\t\t\tmp.put(\"11001\",'Z');\n\t\t\tmp.put(\"11010\",' ');\n\t\t\tmp.put(\"11011\",'.');\n\t\t\tmp.put(\"11100\",',');\n\t\t\tmp.put(\"11101\",'-');\n\t\t\tmp.put(\"11110\",'\\'');\n\t\t\tmp.put(\"11111\",'?');\n\t\t}\n\t\treturn mp.get(s);\n\t}\n\t\n\tString f(char c) {\n\t\tswitch(c) {\n\tcase ' ': return\"101\";\n\tcase '\\'': return\"000000\";\n\tcase ',': return\"000011\";\n\tcase '-': return\"10010001\";\n\tcase '.': return\"010001\";\n\tcase '?': return\"000001\";\n\tcase 'A': return\"100101\";\n\tcase 'B': return\"10011010\";\n\tcase 'C': return\"0101\";\n\tcase 'D': return\"0001\";\n\tcase 'E': return\"110\";\n\tcase 'F': return\"01001\";\n\tcase 'G': return\"10011011\";\n\tcase 'H': return\"010000\";\n\tcase 'I': return\"0111\";\n\tcase 'J': return\"10011000\";\n\tcase 'K': return\"0110\";\n\tcase 'L': return\"00100\";\n\tcase 'M': return\"10011001\";\n\tcase 'N': return\"10011110\";\n\tcase 'O': return\"00101\";\n\tcase 'P': return\"111\";\n\tcase 'Q': return\"10011111\";\n\tcase 'R': return\"1000\";\n\tcase 'S': return\"00110\";\n\tcase 'T': return\"00111\";\n\tcase 'U': return\"10011100\";\n\tcase 'V': return\"10011101\";\n\tcase 'W': return\"000010\";\n\tcase 'X': return\"10010010\";\n\tcase 'Y': return\"10010011\";\n\tcase 'Z': return\"10010000\";\n\t\t}\n\t\treturn \"\";\n\t}\n\t\n\t\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main{\n\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\tString[][] code = { {\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"} , {\"11010\",\"11110\",\"11100\",\"11101\",\"11011\",\"11111\",\"00000\",\"00001\",\"00010\",\"00011\",\"00100\",\"00101\",\"00110\",\"00111\",\"010000\",\"010001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\",\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\"} };\n\t\tchar[] letter = {' ','\\'',',','-','.','?','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\n\n\t\twhile(s.hasNext()){\n\t\t    String intemp = s.nextLine();\n\t\t    String encoded = \"\";\n\t\t    String decoded = \"\";\n\t\t    for(int i=0 ; i<intemp.length() ; i++){\n\t\t\tfor(int j=0 ; j<32 ; j++){\n\t\t\t    if(letter[j] == intemp.charAt(i)){\n\t\t\t       encoded += code[0][j];\n\t\t\t       break;\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t    int a = encoded.length()%5;\n\t\t    if(a!=0){\n\t\t\tfor(int i=0 ; i<5-a ; i++)\n\t\t\t    encoded += \"0\";\n\t\t    }\n\t\t    for(int i=0 ; i<encoded.length()/5 ; i++){\n\t\t\tchar[] temp = new char[5];\n\t\t\tfor(int j=0+i*5 ; j<5+i*5 ; j++)\n\t\t\t    temp[j-i*5] = encoded.charAt(j);\n\t\t\tString temp2 = String.valueOf(temp);\n\t\t\tfor(int j=0 ; j<32 ; j++){\n\t\t\t    if(code[1][j].equals(temp2)){\n\t\t\t\tdecoded += letter[j];\n\t\t\t\tbreak;\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t    System.out.println(decoded);\n\t\t}\n      \t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO ?????????????????????????????????????????????\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tString input = br.readLine();\n\t\t\n\t\tTranslator tr = new Translator();\n\t\tSolver sv = new Solver();\n\t\t\n\t\tSystem.out.println(sv.generateString(tr.genelrateBits(input)));\n\t}\n\n}\n\nclass Translator {\n\tprivate String[] code = new String[256];\n\n\tpublic Translator(){\n\t\tcode[' '] = \"101\";\n\t\tcode['\\''] = \"000000\";\n\t\tcode[','] = \"000011\";\n\t\tcode['-'] = \"10010001\";\n\t\tcode['.'] = \"010001\";\n\t\tcode['?'] = \"000001\";\n\t\tcode['A'] = \"100101\";\n\t\tcode['B'] = \"10011010\";\n\t\tcode['C'] = \"0101\";\n\t\tcode['D'] = \"0001\";\n\t\tcode['E'] = \"110\";\n\t\tcode['F'] = \"01001\";\n\t\tcode['G'] = \"10011011\";\n\t\tcode['H'] = \"010000\";\n\t\tcode['I'] = \"0111\";\n\t\tcode['J'] = \"10011000\";\n\t\tcode['K'] = \"0110\";\n\t\tcode['L'] = \"00100\";\n\t\tcode['M'] = \"10011001\";\n\t\tcode['N'] = \"10011110\";\n\t\tcode['O'] = \"00101\";\n\t\tcode['P'] = \"111\";\n\t\tcode['Q'] = \"10011111\";\n\t\tcode['R'] = \"1000\";\n\t\tcode['S'] = \"00110\";\n\t\tcode['T'] = \"00111\";\n\t\tcode['U'] = \"10011100\";\n\t\tcode['V'] = \"10011101\";\n\t\tcode['W'] = \"000010\";\n\t\tcode['X'] = \"10010010\";\n\t\tcode['Y'] = \"10010011\";\n\t\tcode['Z'] = \"10010000\";\n\t\t\n\t}\n\t\n\tpublic String genelrateBits(String input){\n\t\tStringBuffer sb = new StringBuffer();\n\t\tfor(int i = 0; i < input.length(); i++){\n\t\t\tsb.append(code[input.charAt(i)]);\n\t\t}\n\t\t//0??????\n\t\twhile(sb.length()%5 != 0){\n\t\t\tsb.append(\"0\");\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n\nclass Solver{\n\tHashMap<String, String> map = new HashMap<String, String>();\n\t\n\tpublic Solver(){\n\t\tmap.put(\"00000\", \"A\");\n\t\tmap.put(\"00001\", \"B\");\n\t\tmap.put(\"00010\", \"C\");\n\t\tmap.put(\"00011\", \"D\");\n\t\tmap.put(\"00100\", \"E\");\n\t\tmap.put(\"00101\", \"F\");\n\t\tmap.put(\"00110\", \"G\");\n\t\tmap.put(\"00111\", \"H\");\n\t\tmap.put(\"01000\", \"I\");\n\t\tmap.put(\"01001\", \"J\");\n\t\tmap.put(\"01010\", \"K\");\n\t\tmap.put(\"01011\", \"L\");\n\t\tmap.put(\"01100\", \"M\");\n\t\tmap.put(\"01101\", \"N\");\n\t\tmap.put(\"01110\", \"O\");\n\t\tmap.put(\"01111\", \"P\");\n\t\tmap.put(\"10000\", \"Q\");\n\t\tmap.put(\"10001\", \"R\");\n\t\tmap.put(\"10010\", \"S\");\n\t\tmap.put(\"10011\", \"T\");\n\t\tmap.put(\"10100\", \"U\");\n\t\tmap.put(\"10101\", \"V\");\n\t\tmap.put(\"10110\", \"W\");\n\t\tmap.put(\"10111\", \"X\");\n\t\tmap.put(\"11000\", \"Y\");\n\t\tmap.put(\"11001\", \"Z\");\n\t\tmap.put(\"11010\", \" \");\n\t\tmap.put(\"11011\", \".\");\n\t\tmap.put(\"11100\", \",\");\n\t\tmap.put(\"11101\", \"-\");\n\t\tmap.put(\"11110\", \"'\");\n\t\tmap.put(\"11111\", \"?\");\n\t}\n\t\n\tpublic String generateString(String bits){\n\t\tint n = bits.length()/5;\n\t\t\n\t\tStringBuffer sb = new StringBuffer();\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tsb.append(map.get(bits.substring(i*5, i*5+5)));\n\t\t}\n\t\t\n\t\treturn sb.toString();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\nimport static java.lang.Math.*;\n\nclass Main {\n\n    public static void main( final String[] args ) {\n\n\tfinal char[] inFromLst = { ' ', '\\'', ',', '-', '.', '?', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };\n\n\tfinal String[] inToLst = { \"101\" ,\"000000\" ,\"000011\" ,\"10010001\" ,\"010001\" ,\"000001\" ,\"100101\" ,\"10011010\" ,\"0101\" ,\"0001\" ,\"110\" ,\"01001\" ,\"10011011\" ,\"010000\" ,\"0111\" ,\"10011000\" ,\"0110\" ,\"00100\" ,\"10011001\" ,\"10011110\" ,\"00101\" ,\"111\" ,\"10011111\" ,\"1000\" ,\"00110\" ,\"00111\" ,\"10011100\" ,\"10011101\" ,\"000010\" ,\"10010010\" ,\"10010011\" ,\"10010000\" };\n\n\tfinal HashMap<Character, String> inMap = new HashMap<Character, String>();\n\tfor ( int i = 0; i < inFromLst.length; i++ ) {\n\t    inMap.put( inFromLst[ i ], inToLst[ i ] );\n\t}\n\n\tfinal String[] outFromLst = { \"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\" };\n\n\tfinal char[] outToLst = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '.', ',', '-', '\\'', '?' };\n\n\tfinal Map<String, Character> outMap = new HashMap<String, Character>();\n\tfor ( int i = 0; i < outFromLst.length; i++ ) {\n\t    outMap.put( outFromLst[ i ], outToLst[ i ] );\n\t}\n\tfinal Scanner stdin = new Scanner( System.in );\n\t\n\twhile ( stdin.hasNextLine() ) {\n\n\t    final String input = stdin.nextLine();\n\t    \n\t    final StringBuilder in = new StringBuilder();\n\t    for ( final char ch : input.toCharArray() ) {\n\t\tin.append( inMap.get( ch ) );\n\t    }\n\t    \n\t    for ( int i = 0; i < in.length() % 5; i++ ) {\n\t\tin.append( '0' );\n\t    }\n\t    final StringBuilder out = new StringBuilder();\n\t    final int no = in.length() / 5;\n\t    for ( int i = 0; i < no; i++ ) {\n\t\tfinal String token = in.substring( i * 5, ( i + 1 ) * 5 );\n\t\tout.append( outMap.get( token ) );\n\t    }\n\t    System.out.println( out.toString() );\n\t}\n    }    \n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\npublic class Main {\n\n\tstatic HashMap<String, String> map = new HashMap<String, String>();\n\tstatic HashMap<String, String> key = new HashMap<String, String>();\n\tstatic String[] keys = {\n\t\t\"101\",\n\t\t\"000000\",\n\t\t\"000011\",\n\t\t\"10010001\",\n\t\t\"010001\",\n\t\t\"000001\",\n\t\t\"100101\",\n\t\t\"10011010\",\n\t\t\"0101\",\n\t\t\"0001\",\n\t\t\"110\",\n\t\t\"01001\",\n\t\t\"10011011\",\n\t\t\"010000\",\n\t\t\"0111\",\n\t\t\"10011000\",\n\t\t\"0110\",\n\t\t\"00100\",\n\t\t\"10011001\",\n\t\t\"10011110\",\n\t\t\"00101\",\n\t\t\"111\",\n\t\t\"10011111\",\n\t\t\"1000\",\n\t\t\"00110\",\n\t\t\"00111\",\n\t\t\"10011100\",\n\t\t\"10011101\",\n\t\t\"000010\",\n\t\t\"10010010\",\n\t\t\"10010011\",\n\t\t\"10010000\"\n\t};\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\ta();\n\t\twhile(true){\n\t\t\tString s = br.readLine();\n\t\t\tif(s==null){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tString hugou=\"\";\n\t\t\tfor(int i = 0; i < s.length();i++){\n\t\t\t\thugou += key.get(s.substring(i,i+1));\n\t\t\t}\n\t\t\tint len=hugou.length()%5;\n\t\t\tfor(int i=0;i<5-len;i++){\n\t\t\t\thugou=hugou+\"0\";\n\t\t\t}\n\t\t\tString ans=\"\";\n\t\t\tfor(int i = 0;i<hugou.length();i+=5){\n\t\t\t\tans+=map.get(hugou.substring(i,i+5));\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n\tstatic void a(){\n\t\tmap.put(\"00000\", \"A\");\n\t\tmap.put(\"00010\", \"B\");\n\t\tmap.put(\"00010\", \"C\");\n\t\tmap.put(\"00011\", \"D\");\n\t\tmap.put(\"00100\", \"E\");\n\t\tmap.put(\"00101\", \"F\");\n\t\tmap.put(\"00110\", \"G\");\n\t\tmap.put(\"00111\",\"H\");\n\t\tmap.put(\"01000\",\"I\");\n\t\tmap.put(\"01001\",\"J\");\n\t\tmap.put(\"01010\",\"K\");\n\t\tmap.put( \"01011\",\"L\");\n\t\tmap.put(\"01100\",\"M\");\n\t\tmap.put(\"01101\",\"L\");\n\t\tmap.put(\"01110\",\"O\");\n\t\tmap.put(\"01111\",\"P\");\n\t\tmap.put(\"10000\",\"Q\");\n\t\tmap.put(\"10001\",\"R\");\n\t\tmap.put(\"10010\",\"S\");\n\t\tmap.put( \"10011\",\"T\");\n\t\tmap.put(\"10100\",\"U\");\n\t\tmap.put(\"10101\",\"V\");\n\t\tmap.put(\"10110\",\"W\");\n\t\tmap.put(\"10111\",\"X\");\n\t\tmap.put( \"11000\",\"Y\");\n\t\tmap.put(\"11001\",\"Z\");\n\t\tmap.put(\"11010\",\" \");\n\t\tmap.put(\"11011\",\".\");\n\t\tmap.put(\"11100\",\",\");\n\t\tmap.put(\"11101\",\"-\");\n\t\tmap.put(\"11110\",\"'\");\n\t\tmap.put(\"11111\",\"?\");\n\t\tkey.put(\" \",\"101\");\n\t\tkey.put(\"'\",\"000000\");\n\t\tkey.put(\",\",\"000011\");\n\t\tkey.put(\"-\",\"10010001\");\n\t\tkey.put(\".\",\"010001\");\n\t\tkey.put(\"?\",\"000001\");\n\t\tkey.put(\"A\",\"100101\");\n\t\tkey.put(\"B\",\"10011010\");\n\t\tkey.put(\"C\",\"0101\");\n\t\tkey.put(\"D\",\"0001\");\n\t\tkey.put(\"E\",\"110\");\n\t\tkey.put(\"F\",\"01001\");\n\t\tkey.put(\"G\",\"10011011\");\n\t\tkey.put(\"H\",\"010000\");\n\t\tkey.put(\"I\",\"0111\");\n\t\tkey.put(\"J\",\"10011000\");\n\t\tkey.put(\"K\",\"0110\");\n\t\tkey.put(\"L\",\"00100\");\n\t\tkey.put(\"M\",\"10011001\");\n\t\tkey.put(\"N\",\"10011110\");\n\t\tkey.put(\"O\",\"00101\");\n\t\tkey.put(\"P\",\"111\");\n\t\tkey.put(\"Q\",\"10011111\");\n\t\tkey.put(\"R\",\"1000\");\n\t\tkey.put(\"S\",\"00110\");\n\t\tkey.put(\"T\",\"00111\");\n\t\tkey.put(\"U\",\"10011100\");\n\t\tkey.put(\"V\",\"10011101\");\n\t\tkey.put(\"W\",\"000010\");\n\t\tkey.put(\"X\",\"10010010\");\n\t\tkey.put(\"Y\",\"10010011\");\n\t\tkey.put(\"Z\",\"10010000\");\n\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.PrintWriter;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\nclass Main{\n\t static final HashMap<Character, String> Map1 = new HashMap<Character, String>() {\n\t        {\n\t            put(' ', \"101\");\n\t            put('\\'', \"000000\");\n\t            put(',', \"000011\");\n\t            put('-', \"10010001\");\n\t            put('.', \"010001\");\n\t            put('?', \"000001\");\n\t            put('A', \"100101\");\n\t            put('B', \"10011010\");\n\t            put('C', \"0101\");\n\t            put('D', \"0001\");\n\t            put('E', \"110\");\n\t            put('F', \"01001\");\n\t            put('G', \"10011011\");\n\t            put('H', \"010000\");\n\t            put('I', \"0111\");\n\t            put('J', \"10011000\");\n\t            put('K', \"0110\");\n\t            put('L', \"00100\");\n\t            put('M', \"10011001\");\n\t            put('N', \"10011110\");\n\t            put('O', \"00101\");\n\t            put('P', \"111\");\n\t            put('Q', \"10011111\");\n\t            put('R', \"1000\");\n\t            put('S', \"00110\");\n\t            put('T', \"00111\");\n\t            put('U', \"10011100\");\n\t            put('V', \"10011101\");\n\t            put('W', \"000010\");\n\t            put('X', \"10010010\");\n\t            put('Y', \"10010011\");\n\t            put('Z', \"10010000\");\n\t        }\n\t    };\n\t \n\t    static final HashMap<String, Character> Map2 = new HashMap<String, Character>() {\n\t        {\n\t            put(\"00000\", 'A');\n\t            put(\"00001\", 'B');\n\t            put(\"00010\", 'C');\n\t            put(\"00011\", 'D');\n\t            put(\"00100\", 'E');\n\t            put(\"00101\", 'F');\n\t            put(\"00110\", 'G');\n\t            put(\"00111\", 'H');\n\t            put(\"01000\", 'I');\n\t            put(\"01001\", 'J');\n\t            put(\"01010\", 'K');\n\t            put(\"01011\", 'L');\n\t            put(\"01100\", 'M');\n\t            put(\"01101\", 'N');\n\t            put(\"01110\", 'O');\n\t            put(\"01111\", 'P');\n\t            put(\"10000\", 'Q');\n\t            put(\"10001\", 'R');\n\t            put(\"10010\", 'S');\n\t            put(\"10011\", 'T');\n\t            put(\"10100\", 'U');\n\t            put(\"10101\", 'V');\n\t            put(\"10110\", 'W');\n\t            put(\"10111\", 'X');\n\t            put(\"11000\", 'Y');\n\t            put(\"11001\", 'Z');\n\t            put(\"11010\", ' ');\n\t            put(\"11011\", '.');\n\t            put(\"11100\", ',');\n\t            put(\"11101\", '-');\n\t            put(\"11110\", '\\'');\n\t            put(\"11111\", '?');\n\t        }\n\t    };\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner (System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint count;\n\t\twhile(sc.hasNext()){\n\t\t\tString temp = sc.nextLine();\n\t\t\tchar [] character = temp.toCharArray();\n\t\t\tString Original = \"\";\n\t\t\tfor(int i = 0; i < character.length; i++){\n\t\t\t\tOriginal += Map1.get(character[i]);\n\t\t\t}\n\t\t\tchar ans[] = Original.toCharArray();\n\t\t\tfor(int i = 0; i < ans.length - ans.length%5 ; i+=5 ){\n\t\t\t\ttemp = \"\";\n\t\t\t\tfor(int j =  0; j < 5; j++ ){\n\t\t\t\t\ttemp += ans[j+i];\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tout.print(Map2.get(temp));\n\t\t\t}\n\t\t\t\n\t\t\tcount = ans.length - ans.length%5 - 1;\n\t\t\ttemp = \"\";\n\t\t\tfor(int i = 0 ; i < ans.length%5 + 1; i++){\n\t\t\t\ttemp += ans[count + i ];\n\t\t\t}\n\t\t\twhile(temp.length() < 5 ){\n\t\t\t\ttemp += \"0\";\n\t\t\t}\n\t\t\tout.println(Map2.get(temp));\n\t\t\tout.flush();\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n\t\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tstatic final HashMap<Character, String> c1 = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");\n\t\t\tput('\\\\', \"000000\");\n\t\t\tput(',', \"000011\");\n\t\t\tput('-', \"10010001\");\n\t\t\tput('.', \"010001\");\n\t\t\tput('?', \"000001\");\n\t\t\tput('A', \"100101\");\n\t\t\tput('B', \"10011010\");\n\t\t\tput('C', \"0101\");\n\t\t\tput('D', \"0001\");\n\t\t\tput('E', \"110\");\n\t\t\tput('F', \"01001\");\n\t\t\tput('G', \"10011011\");\n\t\t\tput('H', \"010000\");\n\t\t\tput('I', \"0111\");\n\t\t\tput('J', \"10011000\");\n\t\t\tput('K', \"0110\");\n\t\t\tput('L', \"00100\");\n\t\t\tput('M', \"10011001\");\n\t\t\tput('N', \"10011110\");\n\t\t\tput('O', \"00101\");\n\t\t\tput('P', \"111\");\n\t\t\tput('Q', \"10011111\");\n\t\t\tput('R', \"1000\");\n\t\t\tput('S', \"00110\");\n\t\t\tput('T', \"00111\");\n\t\t\tput('U', \"10011100\");\n\t\t\tput('V', \"10011101\");\n\t\t\tput('W', \"000010\");\n\t\t\tput('X', \"10010010\");\n\t\t\tput('Y', \"10010011\");\n\t\t\tput('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> c2 = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"00000\", 'A');\n\t\t\tput(\"00001\", 'B');\n\t\t\tput(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D');\n\t\t\tput(\"00100\", 'E');\n\t\t\tput(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G');\n\t\t\tput(\"00111\", 'H');\n\t\t\tput(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J');\n\t\t\tput(\"01010\", 'K');\n\t\t\tput(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M');\n\t\t\tput(\"01101\", 'N');\n\t\t\tput(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P');\n\t\t\tput(\"10000\", 'Q');\n\t\t\tput(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S');\n\t\t\tput(\"10011\", 'T');\n\t\t\tput(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V');\n\t\t\tput(\"10110\", 'W');\n\t\t\tput(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y');\n\t\t\tput(\"11001\", 'Z');\n\t\t\tput(\"11010\", ' ');\n\t\t\tput(\"11011\", '.');\n\t\t\tput(\"11100\", ',');\n\t\t\tput(\"11101\", '-');\n\t\t\tput(\"11110\", '\\'');\n\t\t\tput(\"11111\", '?');\n\t\t}\n\t};\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n\t\t\t//\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1.get(c));\n\t\t\t}\n\t\t\t//\n\t\t\tsb1.append(\"00000\");\n\t\t\t//\n\t\t\tline = sb1.toString();\n\t\t\tfor (int i = 0, j = 5; j < sb1.length(); i += 5, j += 5) {\n\t\t\t\tsb2.append(c2.get(line.substring(i, j)));\n\t\t\t}\n\t\t\tSystem.out.println(sb2.toString());\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString s, str;\n\n\t\ts = sc.nextLine();\n\t\tstr = \"\";\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tstr += charToBin(s.charAt(i));\n\t\t}\n\t\tSystem.out.println(str);\n\t\tfor (int i = 0; i < str.length(); i += 5) {\n\t\t\tSystem.out.print((char)binToChar(str, i));\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tpublic static String charToBin(char c) {\n\t\tString s = \"\";\n\t\tif (c == ' ') {\n\t\t\ts = \"101\";\n\t\t} else if (c == '\\'') {\n\t\t\ts = \"000000\";\n\t\t} else if (c == ',') {\n\t\t\ts = \"000011\";\n\t\t} else if (c == '-') {\n\t\t\ts = \"10010001\";\n\t\t} else if (c == '.') {\n\t\t\ts = \"010001\";\n\t\t} else if (c == '?') {\n\t\t\ts = \"000001\";\n\t\t} else if (c == 'A') {\n\t\t\ts = \"100101\";\n\t\t} else if (c == 'B') {\n\t\t\ts = \"10011010\";\n\t\t} else if (c == 'C') {\n\t\t\ts = \"0101\";\n\t\t} else if (c == 'D') {\n\t\t\ts = \"0001\";\n\t\t} else if (c == 'E') {\n\t\t\ts = \"110\";\n\t\t} else if (c == 'F') {\n\t\t\ts = \"01001\";\n\t\t} else if (c == 'G') {\n\t\t\ts = \"10011011\";\n\t\t} else if (c == 'H') {\n\t\t\ts = \"010000\";\n\t\t} else if (c == 'I') {\n\t\t\ts = \"0111\";\n\t\t} else if (c == 'J') {\n\t\t\ts = \"10011000\";\n\t\t} else if (c == 'K') {\n\t\t\ts = \"0110\";\n\t\t} else if (c == 'L') {\n\t\t\ts = \"00100\";\n\t\t} else if (c == 'M') {\n\t\t\ts = \"10011001\";\n\t\t} else if (c == 'N') {\n\t\t\ts = \"10011110\";\n\t\t} else if (c == 'O') {\n\t\t\ts = \"00101\";\n\t\t} else if (c == 'P') {\n\t\t\ts = \"111\";\n\t\t} else if (c == 'Q') {\n\t\t\ts = \"10011111\";\n\t\t} else if (c == 'R') {\n\t\t\ts = \"1000\";\n\t\t} else if (c == 'S') {\n\t\t\ts = \"00110\";\n\t\t} else if (c == 'T') {\n\t\t\ts = \"00111\";\n\t\t} else if (c == 'U') {\n\t\t\ts = \"10011100\";\n\t\t} else if (c == 'V') {\n\t\t\ts = \"10011101\";\n\t\t} else if (c == 'W') {\n\t\t\ts = \"000010\";\n\t\t} else if (c == 'X') {\n\t\t\ts = \"10010010\";\n\t\t} else if (c == 'Y') {\n\t\t\ts = \"10010011\";\n\t\t} else if (c == 'Z') {\n\t\t\ts = \"10010000\";\n\t\t}\n\t\treturn s;\n\t}\n\n\tpublic static char binToChar(String s, int i) {\n\t\tint a = 0;\n\t\tchar c = 0;\n\t\ta += (s.charAt(i) - '0') * 10000;\n\t\tif (i + 1 < s.length() - 1) {\n\t\t\ta += (s.charAt(i + 1) - '0') * 1000;\n\t\t\tif (i + 2 < s.length() - 1) {\n\t\t\t\ta += (s.charAt(i + 2) - '0') * 100;\n\t\t\t\tif (i + 3 < s.length() - 1) {\n\t\t\t\t\ta += (s.charAt(i + 3) - '0') * 10;\n\t\t\t\t\tif (i + 4 < s.length() - 1) {\n\t\t\t\t\t\ta += (s.charAt(i + 4) - '0') * 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (a == 0) {\n\t\t\tc = 'A';\n\t\t} else if (a == 1) {\n\t\t\tc = 'B';\n\t\t} else if (a == 10) {\n\t\t\tc = 'C';\n\t\t} else if (a == 11) {\n\t\t\tc = 'D';\n\t\t} else if (a == 100) {\n\t\t\tc = 'E';\n\t\t} else if (a == 101) {\n\t\t\tc = 'F';\n\t\t} else if (a == 110) {\n\t\t\tc = 'G';\n\t\t} else if (a == 111) {\n\t\t\tc = 'H';\n\t\t} else if (a == 1000) {\n\t\t\tc = 'I';\n\t\t} else if (a == 1001) {\n\t\t\tc = 'J';\n\t\t} else if (a == 1010) {\n\t\t\tc = 'K';\n\t\t} else if (a == 1011) {\n\t\t\tc = 'L';\n\t\t} else if (a == 1100) {\n\t\t\tc = 'M';\n\t\t} else if (a == 1101) {\n\t\t\tc = 'N';\n\t\t} else if (a == 1110) {\n\t\t\tc = 'O';\n\t\t} else if (a == 1111) {\n\t\t\tc = 'P';\n\t\t} else if (a == 10000) {\n\t\t\tc = 'Q';\n\t\t} else if (a == 10001) {\n\t\t\tc = 'R';\n\t\t} else if (a == 10010) {\n\t\t\tc = 'S';\n\t\t} else if (a == 10011) {\n\t\t\tc = 'T';\n\t\t} else if (a == 10100) {\n\t\t\tc = 'U';\n\t\t} else if (a == 10101) {\n\t\t\tc = 'V';\n\t\t} else if (a == 10110) {\n\t\t\tc = 'W';\n\t\t} else if (a == 10111) {\n\t\t\tc = 'X';\n\t\t} else if (a == 11000) {\n\t\t\tc = 'Y';\n\t\t} else if (a == 11001) {\n\t\t\tc = 'Z';\n\t\t} else if (a == 11010) {\n\t\t\tc = ' ';\n\t\t} else if (a == 11011) {\n\t\t\tc = '.';\n\t\t} else if (a == 11100) {\n\t\t\tc = ',';\n\t\t} else if (a == 11101) {\n\t\t\tc = '-';\n\t\t} else if (a == 11110) {\n\t\t\tc = '\\'';\n\t\t} else if (a == 11111) {\n\t\t\tc = '?';\n\t\t}\n\t\treturn c;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tstatic final HashMap<Character, String> c1 = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");\n\t\t\tput('\\'', \"000000\");\n\t\t\tput(',', \"000011\");\n\t\t\tput('-', \"10010001\");\n\t\t\tput('.', \"010001\");\n\t\t\tput('?', \"000001\");\n\t\t\tput('A', \"100101\");\n\t\t\tput('B', \"10011010\");\n\t\t\tput('C', \"0101\");\n\t\t\tput('D', \"0001\");\n\t\t\tput('E', \"110\");\n\t\t\tput('F', \"01001\");\n\t\t\tput('G', \"10011011\");\n\t\t\tput('H', \"010000\");\n\t\t\tput('I', \"0111\");\n\t\t\tput('J', \"10011000\");\n\t\t\tput('K', \"0110\");\n\t\t\tput('L', \"00100\");\n\t\t\tput('M', \"10011001\");\n\t\t\tput('N', \"10011110\");\n\t\t\tput('O', \"00101\");\n\t\t\tput('P', \"111\");\n\t\t\tput('Q', \"10011111\");\n\t\t\tput('R', \"1000\");\n\t\t\tput('S', \"00110\");\n\t\t\tput('T', \"00111\");\n\t\t\tput('U', \"10011100\");\n\t\t\tput('V', \"10011101\");\n\t\t\tput('W', \"000010\");\n\t\t\tput('X', \"10010010\");\n\t\t\tput('Y', \"10010011\");\n\t\t\tput('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> c2 = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"00000\", 'A');\n\t\t\tput(\"00001\", 'B');\n\t\t\tput(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D');\n\t\t\tput(\"00100\", 'E');\n\t\t\tput(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G');\n\t\t\tput(\"00111\", 'H');\n\t\t\tput(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J');\n\t\t\tput(\"01010\", 'K');\n\t\t\tput(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M');\n\t\t\tput(\"01101\", 'N');\n\t\t\tput(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P');\n\t\t\tput(\"10000\", 'Q');\n\t\t\tput(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S');\n\t\t\tput(\"10011\", 'T');\n\t\t\tput(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V');\n\t\t\tput(\"10110\", 'W');\n\t\t\tput(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y');\n\t\t\tput(\"11001\", 'Z');\n\t\t\tput(\"11010\", ' ');\n\t\t\tput(\"11011\", '.');\n\t\t\tput(\"11100\", ',');\n\t\t\tput(\"11101\", '-');\n\t\t\tput(\"11110\", '\\'');\n\t\t\tput(\"11111\", '?');\n\t\t}\n\t};\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null) {\n\t\t\t//\n\t\t\tif (line.isEmpty()) {\n\t\t\t\tSystem.out.println(\"\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1.get(c));\n\t\t\t}\n\t\t\t//\n\t\t\tsb1.append(\"00000\");\n\t\t\t//\n\t\t\tString line2 = sb1.toString();\n\t\t\tfor (int i = 0; i < line2.length() - 5; i += 5) {\n\t\t\t\tsb2.append(c2.get(line2.substring(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println(sb2.toString());\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString s, str;\n\n\t\twhile (sc.hasNext()) {\n\t\t\ts = sc.nextLine();\n\t\t\tstr = \"\";\n\t\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\t\tstr += charToBin(s.charAt(i));\n\t\t\t}\n\t\t\tfor (int i = 0; i < str.length(); i += 5) {\n\t\t\t\tSystem.out.print((char)binToChar(str, i));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n\tpublic static String charToBin(char c) {\n\t\tString s = \"\";\n\t\tif (c == ' ') {\n\t\t\ts = \"101\";\n\t\t} else if (c == '\\'') {\n\t\t\ts = \"000000\";\n\t\t} else if (c == ',') {\n\t\t\ts = \"000011\";\n\t\t} else if (c == '-') {\n\t\t\ts = \"10010001\";\n\t\t} else if (c == '.') {\n\t\t\ts = \"010001\";\n\t\t} else if (c == '?') {\n\t\t\ts = \"000001\";\n\t\t} else if (c == 'A') {\n\t\t\ts = \"100101\";\n\t\t} else if (c == 'B') {\n\t\t\ts = \"10011010\";\n\t\t} else if (c == 'C') {\n\t\t\ts = \"0101\";\n\t\t} else if (c == 'D') {\n\t\t\ts = \"0001\";\n\t\t} else if (c == 'E') {\n\t\t\ts = \"110\";\n\t\t} else if (c == 'F') {\n\t\t\ts = \"01001\";\n\t\t} else if (c == 'G') {\n\t\t\ts = \"10011011\";\n\t\t} else if (c == 'H') {\n\t\t\ts = \"010000\";\n\t\t} else if (c == 'I') {\n\t\t\ts = \"0111\";\n\t\t} else if (c == 'J') {\n\t\t\ts = \"10011000\";\n\t\t} else if (c == 'K') {\n\t\t\ts = \"0110\";\n\t\t} else if (c == 'L') {\n\t\t\ts = \"00100\";\n\t\t} else if (c == 'M') {\n\t\t\ts = \"10011001\";\n\t\t} else if (c == 'N') {\n\t\t\ts = \"10011110\";\n\t\t} else if (c == 'O') {\n\t\t\ts = \"00101\";\n\t\t} else if (c == 'P') {\n\t\t\ts = \"111\";\n\t\t} else if (c == 'Q') {\n\t\t\ts = \"10011111\";\n\t\t} else if (c == 'R') {\n\t\t\ts = \"1000\";\n\t\t} else if (c == 'S') {\n\t\t\ts = \"00110\";\n\t\t} else if (c == 'T') {\n\t\t\ts = \"00111\";\n\t\t} else if (c == 'U') {\n\t\t\ts = \"10011100\";\n\t\t} else if (c == 'V') {\n\t\t\ts = \"10011101\";\n\t\t} else if (c == 'W') {\n\t\t\ts = \"000010\";\n\t\t} else if (c == 'X') {\n\t\t\ts = \"10010010\";\n\t\t} else if (c == 'Y') {\n\t\t\ts = \"10010011\";\n\t\t} else if (c == 'Z') {\n\t\t\ts = \"10010000\";\n\t\t}\n\t\treturn s;\n\t}\n\n\tpublic static char binToChar(String s, int i) {\n\t\tint a = 0;\n\t\tchar c = 0;\n\t\ta += (s.charAt(i) - '0') * 10000;\n\t\tif (i + 1 < s.length() - 1) {\n\t\t\ta += (s.charAt(i + 1) - '0') * 1000;\n\t\t\tif (i + 2 < s.length() - 1) {\n\t\t\t\ta += (s.charAt(i + 2) - '0') * 100;\n\t\t\t\tif (i + 3 < s.length() - 1) {\n\t\t\t\t\ta += (s.charAt(i + 3) - '0') * 10;\n\t\t\t\t\tif (i + 4 < s.length() - 1) {\n\t\t\t\t\t\ta += (s.charAt(i + 4) - '0') * 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (a == 0) {\n\t\t\tc = 'A';\n\t\t} else if (a == 1) {\n\t\t\tc = 'B';\n\t\t} else if (a == 10) {\n\t\t\tc = 'C';\n\t\t} else if (a == 11) {\n\t\t\tc = 'D';\n\t\t} else if (a == 100) {\n\t\t\tc = 'E';\n\t\t} else if (a == 101) {\n\t\t\tc = 'F';\n\t\t} else if (a == 110) {\n\t\t\tc = 'G';\n\t\t} else if (a == 111) {\n\t\t\tc = 'H';\n\t\t} else if (a == 1000) {\n\t\t\tc = 'I';\n\t\t} else if (a == 1001) {\n\t\t\tc = 'J';\n\t\t} else if (a == 1010) {\n\t\t\tc = 'K';\n\t\t} else if (a == 1011) {\n\t\t\tc = 'L';\n\t\t} else if (a == 1100) {\n\t\t\tc = 'M';\n\t\t} else if (a == 1101) {\n\t\t\tc = 'N';\n\t\t} else if (a == 1110) {\n\t\t\tc = 'O';\n\t\t} else if (a == 1111) {\n\t\t\tc = 'P';\n\t\t} else if (a == 10000) {\n\t\t\tc = 'Q';\n\t\t} else if (a == 10001) {\n\t\t\tc = 'R';\n\t\t} else if (a == 10010) {\n\t\t\tc = 'S';\n\t\t} else if (a == 10011) {\n\t\t\tc = 'T';\n\t\t} else if (a == 10100) {\n\t\t\tc = 'U';\n\t\t} else if (a == 10101) {\n\t\t\tc = 'V';\n\t\t} else if (a == 10110) {\n\t\t\tc = 'W';\n\t\t} else if (a == 10111) {\n\t\t\tc = 'X';\n\t\t} else if (a == 11000) {\n\t\t\tc = 'Y';\n\t\t} else if (a == 11001) {\n\t\t\tc = 'Z';\n\t\t} else if (a == 11010) {\n\t\t\tc = ' ';\n\t\t} else if (a == 11011) {\n\t\t\tc = '.';\n\t\t} else if (a == 11100) {\n\t\t\tc = ',';\n\t\t} else if (a == 11101) {\n\t\t\tc = '-';\n\t\t} else if (a == 11110) {\n\t\t\tc = '\\'';\n\t\t} else if (a == 11111) {\n\t\t\tc = '?';\n\t\t}\n\t\treturn c;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\nclass Main {\n    static String decrypt(String x) {\n        int dec = Integer.parseInt(x, 2);\n        if (dec <= 25) {\n            return String.valueOf((char) ('A' + dec));\n        } else if (dec == 26) {\n            return \" \";\n        } else if (dec == 27) {\n            return \".\";\n        } else if (dec == 28) {\n            return \",\";\n        } else if (dec == 29) {\n            return \"-\";\n        } else if (dec == 30) {\n            return \"\\'\";\n        } else if (dec == 31) {\n            return \"?\";\n        }\n\n        return \"*****\"; // unreachable\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] s = { \" \", \"\\'\", \",\", \"-\", \".\", \"?\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\",\n                \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\" };\n        String[] f = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\",\n                \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\",\n                \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\",\n                \"10010011\", \"10010000\" };\n\n        String line;\n        while ((line = br.readLine()) != null) {\n            StringBuilder sb = new StringBuilder();\n            for (char c : line.toCharArray()) {\n                for (int i = 0; i < s.length; i++) {\n                    if (s[i].equals(String.valueOf(c))) {\n                        sb.append(f[i]);\n                        break;\n                    }\n                }\n            }\n\n            StringBuilder result = new StringBuilder();\n\n            while (sb.length() > 5) {\n                String x = sb.substring(0, 5);\n                sb.delete(0, 5);\n                result.append(decrypt(x));\n            }\n\n            for (int i = 0; i < 5 - sb.length(); i++) {\n                sb.append(\"0\");\n            }\n\n            result.append(decrypt(sb.toString()));\n\n            System.out.println(result);\n        }\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.Scanner;\nimport java.io.*;\n//import java.util.Arrays;\npublic class Main {\n\tpublic static void main(String[] args) throws java.io.IOException {\n\t\tScanner scan = new Scanner(System.in);\n\t\tInputStreamReader is = new InputStreamReader(System.in);\n\t\tBufferedReader br = new BufferedReader(is);\n\t\twhile(scan.hasNext()){\n\t\tString text = br.readLine();\n\t\tchar mozi[] = text.toCharArray();\n\t\tString To = \"\";\n\t\tfor(int i = 0 ; i < mozi.length ; i++){\n\t\t\tString Hantei =  String.valueOf(mozi[i]);\n\t\t\tif(Hantei.equals(\"A\")){\n\t\t\t\tTo += \"100101\";\n\t\t\t}else if(Hantei.equals(\"B\")){\n\t\t\t\tTo += \"10011010\";\n\t\t\t}else if(Hantei.equals(\"C\")){\n\t\t\t\tTo += \"0101\";\n\t\t\t}else if(Hantei.equals(\"D\")){\n\t\t\t\tTo += \"0001\";\n\t\t\t}else if(Hantei.equals(\"E\")){\n\t\t\t\tTo += \"110\";\n\t\t\t}else if(Hantei.equals(\"F\")){\n\t\t\t\tTo += \"01001\";\n\t\t\t}else if(Hantei.equals(\"G\")){\n\t\t\t\tTo += \"10011011\";\n\t\t\t}else if(Hantei.equals(\"H\")){\n\t\t\t\tTo += \"010000\";\n\t\t\t}else if(Hantei.equals(\"I\")){\n\t\t\t\tTo += \"0111\";\n\t\t\t}else if(Hantei.equals(\"J\")){\n\t\t\t\tTo += \"10011000\";\n\t\t\t}else if(Hantei.equals(\"K\")){\n\t\t\t\tTo += \"0110\";\n\t\t\t}else if(Hantei.equals(\"L\")){\n\t\t\t\tTo += \"00100\";\n\t\t\t}else if(Hantei.equals(\"M\")){\n\t\t\t\tTo += \"10011001\";\n\t\t\t}else if(Hantei.equals(\"N\")){\n\t\t\t\tTo += \"10011110\";\n\t\t\t}else if(Hantei.equals(\"O\")){\n\t\t\t\tTo += \"00101\";\n\t\t\t}else if(Hantei.equals(\"P\")){\n\t\t\t\tTo += \"111\";\n\t\t\t}else if(Hantei.equals(\"Q\")){\n\t\t\t\tTo += \"10011111\";\n\t\t\t}else if(Hantei.equals(\"R\")){\n\t\t\t\tTo += \"1000\";\n\t\t\t}else if(Hantei.equals(\"S\")){\n\t\t\t\tTo += \"00110\";\n\t\t\t}else if(Hantei.equals(\"T\")){\n\t\t\t\tTo += \"00111\";\n\t\t\t}else if(Hantei.equals(\"U\")){\n\t\t\t\tTo += \"10011100\";\n\t\t\t}else if(Hantei.equals(\"V\")){\n\t\t\t\tTo += \"10011101\";\n\t\t\t}else if(Hantei.equals(\"W\")){\n\t\t\t\tTo += \"000010\";\n\t\t\t}else if(Hantei.equals(\"X\")){\n\t\t\t\tTo += \"10010010\";\n\t\t\t}else if(Hantei.equals(\"Y\")){\n\t\t\t\tTo += \"10010011\";\n\t\t\t}else if(Hantei.equals(\"Z\")){\n\t\t\t\tTo += \"10010000\";\n\t\t\t}else if(Hantei.equals(\" \")){\n\t\t\t\tTo += \"101\";\n\t\t\t}else if(Hantei.equals(\"'\")){\n\t\t\t\tTo += \"000000\";\n\t\t\t}else if(Hantei.equals(\",\")){\n\t\t\t\tTo += \"000011\";\n\t\t\t}else if(Hantei.equals(\"-\")){\n\t\t\t\tTo += \"10010001\";\n\t\t\t}else if(Hantei.equals(\".\")){\n\t\t\t\tTo += \"010001\";\n\t\t\t}else if(Hantei.equals(\"?\")){\n\t\t\t\tTo += \"000001\";\n\t\t\t}\n\t\t}\n\t\tint amari =  To.length()%5;\n\t\tif(amari == 1){\n\t\t\tTo += \"0000\";\n\t\t}else if(amari == 2){\n\t\t\tTo += \"000\";\n\t\t}else if(amari == 3){\n\t\t\tTo += \"00\";\n\t\t}else if(amari == 4){\n\t\t\tTo += \"0\";\n\t\t}\n\t\tint won[] = new int[To.length()/5];\n\t\tint j;\n\t\tString newtext = \"\";\n\t\tfor(j = 0 ; j < To.length()/5 ; j++){\n\t\t\twon[j] = Integer.parseInt(To.substring(j*5,(j+1)*5));\n\t\t\tif(won[j] == 0){\n\t\t\t\tnewtext += \"A\";\n\t\t\t}else if(won[j] == 1){\n\t\t\t\tnewtext += \"B\";\n\t\t\t}else if(won[j] == 10){\n\t\t\t\tnewtext += \"C\";\n\t\t\t}else if(won[j] == 11){\n\t\t\t\tnewtext += \"D\";\n\t\t\t}else if(won[j] == 100){\n\t\t\t\tnewtext += \"E\";\n\t\t\t}else if(won[j] == 101){\n\t\t\t\tnewtext += \"F\";\n\t\t\t}else if(won[j] == 110){\n\t\t\t\tnewtext += \"G\";\n\t\t\t}else if(won[j] == 111){\n\t\t\t\tnewtext += \"H\";\n\t\t\t}else if(won[j] == 1000){\n\t\t\t\tnewtext += \"I\";\n\t\t\t}else if(won[j] == 1001){\n\t\t\t\tnewtext += \"J\";\n\t\t\t}else if(won[j] == 1010){\n\t\t\t\tnewtext += \"K\";\n\t\t\t}else if(won[j] == 1011){\n\t\t\t\tnewtext += \"L\";\n\t\t\t}else if(won[j] == 1100){\n\t\t\t\tnewtext += \"M\";\n\t\t\t}else if(won[j] == 1101){\n\t\t\t\tnewtext += \"N\";\n\t\t\t}else if(won[j] == 1110){\n\t\t\t\tnewtext += \"O\";\n\t\t\t}else if(won[j] == 1111){\n\t\t\t\tnewtext += \"P\";\n\t\t\t}else if(won[j] == 10000){\n\t\t\t\tnewtext += \"Q\";\n\t\t\t}else if(won[j] == 10001){\n\t\t\t\tnewtext += \"R\";\n\t\t\t}else if(won[j] == 10010){\n\t\t\t\tnewtext += \"S\";\n\t\t\t}else if(won[j] == 10011){\n\t\t\t\tnewtext += \"T\";\n\t\t\t}else if(won[j] == 10100){\n\t\t\t\tnewtext += \"U\";\n\t\t\t}else if(won[j] == 10101){\n\t\t\t\tnewtext += \"V\";\n\t\t\t}else if(won[j] == 10110){\n\t\t\t\tnewtext += \"W\";\n\t\t\t}else if(won[j] == 10111){\n\t\t\t\tnewtext += \"X\";\n\t\t\t}else if(won[j] == 11000){\n\t\t\t\tnewtext += \"Y\";\n\t\t\t}else if(won[j] == 11001){\n\t\t\t\tnewtext += \"Z\";\n\t\t\t}else if(won[j] == 11010){\n\t\t\t\tnewtext += \" \";\n\t\t\t}else if(won[j] == 11011){\n\t\t\t\tnewtext += \".\";\n\t\t\t}else if(won[j] == 11100){\n\t\t\t\tnewtext += \",\";\n\t\t\t}else if(won[j] == 11101){\n\t\t\t\tnewtext += \"-\";\n\t\t\t}else if(won[j] == 11110){\n\t\t\t\tnewtext += \"'\";\n\t\t\t}else{\n\t\t\t\tnewtext += \"?\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(newtext);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.LinkedList;\nimport java.util.Scanner;\n\npublic class Main {\n\tprivate Scanner sc;\n\n\tpublic static void main(String[] args) {\n\t\tnew Main();\n\t}\n\t\n\tpublic Main() {\n\t\tsc = new Scanner(System.in);\n\t\t\n\t\tString ans = \"\";\n\t\tString tmp = \"\";\n\t\twhile (sc.hasNextLine()) {\n\t\t\tString nico = sc.nextLine();\n\t\t\t\n\t\t\tfor (int i = 0; i < nico.length(); i++) {\n\t\t\t\tswitch (nico.charAt(i)) {\n\t\t\t\tcase ' ' :\n\t\t\t\t\ttmp = tmp + \"101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '\\'':\n\t\t\t\t\ttmp = tmp + \"000000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase ',':\n\t\t\t\t\ttmp = tmp + \"000011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttmp = tmp + \"10010001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '.':\n\t\t\t\t\ttmp = tmp + \"010001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase '?':\n\t\t\t\t\ttmp = tmp + \"000001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'A':\n\t\t\t\t\ttmp = tmp + \"100101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'B':\n\t\t\t\t\ttmp = tmp + \"10011010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'C':\n\t\t\t\t\ttmp = tmp + \"0101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'D':\n\t\t\t\t\ttmp = tmp + \"0001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'E':\n\t\t\t\t\ttmp = tmp + \"110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'F':\n\t\t\t\t\ttmp = tmp + \"01001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'G':\n\t\t\t\t\ttmp = tmp + \"10011011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'H':\n\t\t\t\t\ttmp = tmp + \"010000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'I':\n\t\t\t\t\ttmp = tmp + \"0111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'J':\n\t\t\t\t\ttmp = tmp + \"10011000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'K':\n\t\t\t\t\ttmp = tmp + \"0110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'L':\n\t\t\t\t\ttmp = tmp + \"00100\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'M':\n\t\t\t\t\ttmp = tmp + \"10011001\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'N':\n\t\t\t\t\ttmp = tmp + \"10011110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'O':\n\t\t\t\t\ttmp = tmp + \"00101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'P':\n\t\t\t\t\ttmp = tmp + \"111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Q':\n\t\t\t\t\ttmp = tmp + \"10011111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'R':\n\t\t\t\t\ttmp = tmp + \"1000\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'S':\n\t\t\t\t\ttmp = tmp + \"00110\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'T':\n\t\t\t\t\ttmp = tmp + \"00111\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'U':\n\t\t\t\t\ttmp = tmp + \"10011100\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'V':\n\t\t\t\t\ttmp = tmp + \"10011101\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'W':\n\t\t\t\t\ttmp = tmp + \"000010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'X':\n\t\t\t\t\ttmp = tmp + \"10010010\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Y':\n\t\t\t\t\ttmp = tmp + \"10010011\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Z':\n\t\t\t\t\ttmp = tmp + \"10010000\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (tmp.length() >= 5) {\n\t\t\t\t\tswitch (tmp.substring(0, 5)) {\n\t\t\t\t\tcase \"00000\":\n\t\t\t\t\t\tans = ans + 'A';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"00001\":\n\t\t\t\t\t\tans = ans + 'B';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"00010\":\n\t\t\t\t\t\tans = ans + 'C';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"00011\":\n\t\t\t\t\t\tans = ans + 'D';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"00100\":\n\t\t\t\t\t\tans = ans + 'E';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"00101\":\n\t\t\t\t\t\tans = ans + 'F';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"00110\":\n\t\t\t\t\t\tans = ans + 'G';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"00111\":\n\t\t\t\t\t\tans = ans + 'H';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"01000\":\n\t\t\t\t\t\tans = ans + 'I';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"01001\":\n\t\t\t\t\t\tans = ans + 'J';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"01010\":\n\t\t\t\t\t\tans = ans + 'K';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"01011\":\n\t\t\t\t\t\tans = ans + 'L';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"01100\":\n\t\t\t\t\t\tans = ans + 'M';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"01101\":\n\t\t\t\t\t\tans = ans + 'N';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"01110\":\n\t\t\t\t\t\tans = ans + 'O';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"01111\":\n\t\t\t\t\t\tans = ans + 'P';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"10000\":\n\t\t\t\t\t\tans = ans + 'Q';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"10001\":\n\t\t\t\t\t\tans = ans + 'R';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"10010\":\n\t\t\t\t\t\tans = ans + 'S';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"10011\":\n\t\t\t\t\t\tans = ans + 'T';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"10100\":\n\t\t\t\t\t\tans = ans + 'U';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"10101\":\n\t\t\t\t\t\tans = ans + 'V';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"10110\":\n\t\t\t\t\t\tans = ans + 'W';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"10111\":\n\t\t\t\t\t\tans = ans + 'X';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"11000\":\n\t\t\t\t\t\tans = ans + 'Y';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"11001\":\n\t\t\t\t\t\tans = ans + 'Z';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"11010\":\n\t\t\t\t\t\tans = ans + ' ';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"11011\":\n\t\t\t\t\t\tans = ans + '.';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"11100\":\n\t\t\t\t\t\tans = ans + ',';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"11101\":\n\t\t\t\t\t\tans = ans + '-';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"11110\":\n\t\t\t\t\t\tans = ans + '\\'';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"11111\":\n\t\t\t\t\t\tans = ans + '?';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ttmp = tmp.substring(5);\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n\npublic class Main {\n\tprivate\tstatic\tBufferedReader\tbr = null;\n\n\tstatic {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t}\n \n    /**\n     * @param args\n     */\n\tpublic static void main(String[] args) {\n\t// TODO Auto-generated method stub\n\t\tString\tstdin = null;\n\n\t\twhile ((stdin = parseStdin()) != null) {\n\t\t\tString\twork = \"\";\n\t\t\tString\tout  = \"\";\n\n\t\t\tfor(int loop = 0; loop < stdin.length(); loop++) {\n\t\t\t\twork += MyConv.Encode(stdin.charAt(loop));\n\t\t\t}\n\n\t\t\twhile(work.length() % 5 != 0) {\n\t\t\t\twork += \"0\";\n\t\t\t}\n\n\t\t\tfor(int loop = 0; loop < work.length(); loop += 5) {\n\t\t\t\tout += MyConv.Decode(work.substring(loop, loop + 5));\n\t\t\t}\n\n\t\t\tSystem.out.println(out);\n\t\t}\n\t}\n\n\tprivate static String parseStdin() {\n        String  stdin = null;\n        \n        try {\n       \t\tstdin = br.readLine();\n        }\n        catch (IOException e) {}\n \n        return stdin;\n\t}\n}\n\nclass MyConv {\n\tpublic static String Encode(char key) {\n\t\tswitch (key) {\n\t\tcase ' ':  return \"101\";\n\t\tcase '\\'': return \"000000\";\n\t\tcase ',':  return \"000011\";\n\t\tcase '-':  return \"10010001\";\n\t\tcase '.':  return \"010001\";\n\t\tcase '?':  return \"000001\";\n\t\tcase 'A':  return \"100101\";\n\t\tcase 'B':  return \"10011010\";\n\t\tcase 'C':  return \"0101\";\n\t\tcase 'D':  return \"0001\";\n\t\tcase 'E':  return \"110\";\n\t\tcase 'F':  return \"01001\";\n\t\tcase 'G':  return \"10011011\";\n\t\tcase 'H':  return \"010000\";\n\t\tcase 'I':  return \"0111\";\n\t\tcase 'J':  return \"10011000\";\n\t\tcase 'K':  return \"0110\";\n\t\tcase 'L':  return \"00100\";\n\t\tcase 'M':  return \"10011001\";\n\t\tcase 'N':  return \"10011110\";\n\t\tcase 'O':  return \"00101\";\n\t\tcase 'P':  return \"111\";\n\t\tcase 'Q':  return \"10011111\";\n\t\tcase 'R':  return \"1000\";\n\t\tcase 'S':  return \"00110\";\n\t\tcase 'T':  return \"00111\";\n\t\tcase 'U':  return \"10011100\";\n\t\tcase 'V':  return \"10011101\";\n\t\tcase 'W':  return \"000010\";\n\t\tcase 'X':  return \"10010010\";\n\t\tcase 'Y':  return \"10010011\";\n\t\tcase 'Z':  return \"10010000\";\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tpublic static char Decode(String key) {\n\t\tif (key.equals(\"00000\")) return 'A';\n\t\tif (key.equals(\"00001\")) return 'B';\n\t\tif (key.equals(\"00010\")) return 'C';\n\t\tif (key.equals(\"00011\")) return 'D';\n\t\tif (key.equals(\"00100\")) return 'E';\n\t\tif (key.equals(\"00101\")) return 'F';\n\t\tif (key.equals(\"00110\")) return 'G';\n\t\tif (key.equals(\"00111\")) return 'H';\n\t\tif (key.equals(\"01000\")) return 'I';\n\t\tif (key.equals(\"01001\")) return 'J';\n\t\tif (key.equals(\"01010\")) return 'K';\n\t\tif (key.equals(\"01011\")) return 'L';\n\t\tif (key.equals(\"01100\")) return 'M';\n\t\tif (key.equals(\"01101\")) return 'N';\n\t\tif (key.equals(\"01110\")) return 'O';\n\t\tif (key.equals(\"01111\")) return 'P';\n\t\tif (key.equals(\"10000\")) return 'Q';\n\t\tif (key.equals(\"10001\")) return 'R';\n\t\tif (key.equals(\"10010\")) return 'S';\n\t\tif (key.equals(\"10011\")) return 'T';\n\t\tif (key.equals(\"10100\")) return 'U';\n\t\tif (key.equals(\"10101\")) return 'V';\n\t\tif (key.equals(\"10110\")) return 'W';\n\t\tif (key.equals(\"10111\")) return 'X';\n\t\tif (key.equals(\"11000\")) return 'Y';\n\t\tif (key.equals(\"11001\")) return 'Z';\n\t\tif (key.equals(\"11010\")) return ' ';\n\t\tif (key.equals(\"11011\")) return '.';\n\t\tif (key.equals(\"11100\")) return ',';\n\t\tif (key.equals(\"11101\")) return '-';\n\t\tif (key.equals(\"11110\")) return '\\'';\n\t\tif (key.equals(\"11111\")) return '?';\n\t\treturn 0;\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.util.Map.Entry;\nimport java.lang.*;\nimport java.math.*;\nimport java.io.*;\n\nimport static java.lang.Math.*;\nimport static java.util.Arrays.*;\n\npublic class Main{\n\n\tScanner sc;\n\n\tstatic final int INF=1<<28;\n\tstatic final double EPS=1e-9;\n\n\tvoid run(){\n\t\tsc=new Scanner(System.in);\n\t\tHashMap<String, String> map1=new HashMap<String, String>();\n\t\tmap1.put(\" \", \"101\");\n\t\tmap1.put(\"'\", \"000000\");\n\t\tmap1.put(\",\", \"000011\");\n\t\tmap1.put(\"-\", \"10010001\");\n\t\tmap1.put(\"\\\\.\", \"010001\");\n\t\tmap1.put(\"\\\\?\", \"000001\");\n\t\tmap1.put(\"A\", \"100101\");\n\t\tmap1.put(\"B\", \"10011010\");\n\t\tmap1.put(\"C\", \"0101\");\n\t\tmap1.put(\"D\", \"0001\");\n\t\tmap1.put(\"E\", \"110\");\n\t\tmap1.put(\"F\", \"01001\");\n\t\tmap1.put(\"G\", \"10011011\");\n\t\tmap1.put(\"H\", \"010000\");\n\t\tmap1.put(\"I\", \"0111\");\n\t\tmap1.put(\"J\", \"10011000\");\n\t\tmap1.put(\"K\", \"0110\");\n\t\tmap1.put(\"L\", \"00100\");\n\t\tmap1.put(\"M\", \"10011001\");\n\t\tmap1.put(\"N\", \"10011110\");\n\t\tmap1.put(\"O\", \"00101\");\n\t\tmap1.put(\"P\", \"111\");\n\t\tmap1.put(\"Q\", \"10011111\");\n\t\tmap1.put(\"R\", \"1000\");\n\t\tmap1.put(\"S\", \"00110\");\n\t\tmap1.put(\"T\", \"00111\");\n\t\tmap1.put(\"U\", \"10011100\");\n\t\tmap1.put(\"V\", \"10011101\");\n\t\tmap1.put(\"W\", \"000010\");\n\t\tmap1.put(\"X\", \"10010010\");\n\t\tmap1.put(\"Y\", \"10010011\");\n\t\tmap1.put(\"Z\", \"10010000\");\n\n\t\tHashMap<String, String> map2=new HashMap<String, String>();\n\t\tmap2.put(\"00000\", \"A\");\n\t\tmap2.put(\"00001\", \"B\");\n\t\tmap2.put(\"00010\", \"C\");\n\t\tmap2.put(\"00011\", \"D\");\n\t\tmap2.put(\"00100\", \"E\");\n\t\tmap2.put(\"00101\", \"F\");\n\t\tmap2.put(\"00110\", \"G\");\n\t\tmap2.put(\"00111\", \"H\");\n\t\tmap2.put(\"01000\", \"I\");\n\t\tmap2.put(\"01001\", \"J\");\n\t\tmap2.put(\"01010\", \"K\");\n\t\tmap2.put(\"01011\", \"L\");\n\t\tmap2.put(\"01100\", \"M\");\n\t\tmap2.put(\"01101\", \"N\");\n\t\tmap2.put(\"01110\", \"O\");\n\t\tmap2.put(\"01111\", \"P\");\n\t\tmap2.put(\"10000\", \"Q\");\n\t\tmap2.put(\"10001\", \"R\");\n\t\tmap2.put(\"10010\", \"S\");\n\t\tmap2.put(\"10011\", \"T\");\n\t\tmap2.put(\"10100\", \"U\");\n\t\tmap2.put(\"10101\", \"V\");\n\t\tmap2.put(\"10110\", \"W\");\n\t\tmap2.put(\"10111\", \"X\");\n\t\tmap2.put(\"11000\", \"Y\");\n\t\tmap2.put(\"11001\", \"Z\");\n\t\tmap2.put(\"11010\", \" \");\n\t\tmap2.put(\"11011\", \".\");\n\t\tmap2.put(\"11100\", \",\");\n\t\tmap2.put(\"11101\", \"-\");\n\t\tmap2.put(\"11110\", \"'\");\n\t\tmap2.put(\"11111\", \"?\");\n\n\t\tfor(; sc.hasNext();){\n\t\t\tString s=sc.nextLine();\n\t\t\tfor(Entry<String, String> entry : map1.entrySet())\n\t\t\t\ts=s.replaceAll(entry.getKey(), entry.getValue());\n\t\t\tfor(; s.length()%5!=0;)\n\t\t\t\ts+=\"0\";\n\t\t\t// println(s);\n\t\t\tint len=s.length();\n\t\t\tint n=len/5;\n\t\t\tfor(int i=0; i<n; i++){\n\t\t\t\tString ss=s.substring(5*i, 5*i+5);\n\t\t\t\tfor(Entry<String, String> entry : map2.entrySet())\n\t\t\t\t\tss=ss.replaceAll(entry.getKey(), entry.getValue());\n\t\t\t\tprint(ss);\n\t\t\t}\n\t\t\tprintln(\"\");\n\t\t}\n\t\tsc.close();\n\t}\n\n\tvoid print(String s){\n\t\tSystem.out.print(s);\n\t}\n\n\tvoid println(String s){\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic static void main(String[] args){\n\t\tnew Main().run();\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\n\nclass Main {\n\n    static String codeA (char c) {\n        switch (c) {\n            case ' ':   return \"101\";\n            case '\\'':  return \"000000\";\n            case ',':   return \"000011\";\n            case '-':   return \"10010001\";\n            case '.':   return \"010001\";\n            case '?':   return \"000001\";\n            case 'A':   return \"100101\";\n            case 'B':   return \"10011010\";\n            case 'C':   return \"0101\";\n            case 'D':   return \"0001\";\n            case 'E':   return \"110\";\n            case 'F':   return \"01001\";\n            case 'G':   return \"10011011\";\n            case 'H':   return \"010000\";\n            case 'I':   return \"0111\";\n            case 'J':   return \"10011000\";\n            case 'K':   return \"0100\";\n            case 'L':   return \"00100\";\n            case 'M':   return \"10011001\";\n            case 'N':   return \"10011110\";\n            case 'O':   return \"00101\";\n            case 'P':   return \"111\";\n            case 'Q':   return \"10011111\";\n            case 'R':   return \"1000\";\n            case 'S':   return \"00110\";\n            case 'T':   return \"00111\";\n            case 'U':   return \"10011100\";\n            case 'V':   return \"10011101\";\n            case 'W':   return \"000010\";\n            case 'X':   return \"10010010\";\n            case 'Y':   return \"10010011\";\n            case 'Z':   return \"10010000\";\n        }\n        return \"\";\n    }\n\n    static void solve (char[] line) {\n        String tmp = \"\";\n\n        for (char c : line) {\n            tmp += codeA(c);    \n        }\n\n        switch (tmp.length() % 5) {\n            case 1: tmp += \"0000\"; break;\n            case 2: tmp += \"000\"; break;\n            case 3: tmp += \"00\"; break;\n            case 4: tmp += \"0\"; break;\n        }\n\n\n        char [] codeB = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', \n            'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '.', ',', '-', '\\'', '?' };\n\n        String result = \"\";\n\n        for(int i = 0; i < tmp.length() / 5; i++) {\n            int num = 0;\n            int mult = 16;\n            for (int j = 0; j < 5; j++) {\n                num += Integer.parseInt(\"\" + tmp.charAt(5*i+j)) * mult;\n                mult /= 2;\n            }\n            result += codeB[num];\n        }\n\n\n        System.out.println(result);\n        \n    }\n\n    public static void main (String [] args) {\n\n        Scanner sc = new Scanner(System.in);\n\n        while(sc.hasNext()) {\n            solve(sc.nextLine().toCharArray());\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\nclass Main {\n    static String decrypt(String x) {\n        int dec = Integer.parseInt(x, 2);\n        if (dec <= 25) {\n            return String.valueOf((char) ('A' + dec));\n        } else if (dec == 26) {\n            return \" \";\n        } else if (dec == 27) {\n            return \".\";\n        } else if (dec == 28) {\n            return \",\";\n        } else if (dec == 29) {\n            return \"-\";\n        } else if (dec == 30) {\n            return \"\\'\";\n        } else if (dec == 31) {\n            return \"?\";\n        }\n\n        return \"*****\"; // unreachable\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] s = { \" \", \"\\'\", \",\", \"-\", \".\", \"?\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\",\n                \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\" };\n        String[] f = { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\",\n                \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\",\n                \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\",\n                \"10010011\", \"10010000\" };\n\n        String line;\n        while ((line = br.readLine()) != null) {\n            StringBuilder sb = new StringBuilder();\n            for (char c : line.toCharArray()) {\n                for (int i = 0; i < s.length; i++) {\n                    if (s[i].equals(String.valueOf(c))) {\n                        sb.append(f[i]);\n                        break;\n                    }\n                }\n            }\n\n            StringBuilder result = new StringBuilder();\n\n            while (sb.length() > 5) {\n                String x = sb.substring(0, 5);\n                sb.delete(0, 5);\n                result.append(decrypt(x));\n            }\n\n            for (int i = 0; i < 5 - sb.length(); i++) {\n                sb.append(\"0\");\n            }\n\n            result.append(decrypt(sb.toString()));\n\n            System.out.println(result);\n        }\n    }\n}\n"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) throws java.io.IOException{\n        Scanner scan = new Scanner(System.in);\n        HashMap<Character,String> ep =new HashMap<Character,String>();\n        HashMap<String,Character> dp =new HashMap<String,Character>();\n\n        ep.put(' ',\"101\");\n        ep.put('\\'',\"000000\");\n        ep.put(',',\"000011\");\n        ep.put('-',\"10010001\");\n        ep.put('.',\"010001\");\n        ep.put('?',\"000001\");\n        ep.put('A',\"100101\");\n        ep.put('B',\"10011010\");\n        ep.put('C',\"0101\");\n        ep.put('D',\"0001\");\n        ep.put('E',\"110\");\n        ep.put('F',\"01001\");\n        ep.put('G',\"10011011\");\n        ep.put('H',\"010000\");\n        ep.put('I',\"011\");\n        ep.put('J',\"10011000\");\n        ep.put('K',\"0110\");\n        ep.put('L',\"00100\");\n        ep.put('M',\"10011001\");\n        ep.put('N',\"10011110\");\n        ep.put('O',\"00101\");\n        ep.put('P',\"111\");\n        ep.put('Q',\"10011111\");\n        ep.put('R',\"1000\");\n        ep.put('S',\"00110\");\n        ep.put('T',\"00111\");\n        ep.put('U',\"10011100\");\n        ep.put('V',\"10011101\");\n        ep.put('W',\"000010\");\n        ep.put('X',\"10010010\");\n        ep.put('Y',\"10010011\");\n        ep.put('Z',\"10010000\");\n        \n        dp.put(\"00000\", 'A');\n        dp.put(\"00001\", 'B');\n        dp.put(\"00010\", 'C');\n        dp.put(\"00011\", 'D');\n        dp.put(\"00100\", 'E');\n        dp.put(\"00101\", 'F');\n        dp.put(\"00110\", 'G');\n        dp.put(\"00111\", 'H');\n        dp.put(\"01000\", 'I');\n        dp.put(\"01001\", 'J');\n        dp.put(\"01010\", 'K');\n        dp.put(\"01011\", 'L');\n        dp.put(\"01100\", 'M');\n        dp.put(\"01101\", 'N');\n        dp.put(\"01110\", 'O');\n        dp.put(\"01111\", 'P');\n        dp.put(\"10000\", 'Q');\n        dp.put(\"10001\", 'R');\n        dp.put(\"10010\", 'S');\n        dp.put(\"10011\", 'T');\n        dp.put(\"10100\", 'U');\n        dp.put(\"10101\", 'V');\n        dp.put(\"10110\", 'W');\n        dp.put(\"10111\", 'X');\n        dp.put(\"11000\", 'Y');\n        dp.put(\"11001\", 'Z');\n        dp.put(\"11010\", ' ');\n        dp.put(\"11011\", '.');\n        dp.put(\"11100\", ',');\n        dp.put(\"11101\", '-');\n        dp.put(\"11110\", '\\'');\n        dp.put(\"11111\", '?');\n        \n        while(scan.hasNext()){\n        \tchar [] line= scan.nextLine().toCharArray();\n        \tString tmp=\"\";\n        \tfor(int i=0;i<line.length;i++)\n        \t\ttmp+=ep.get(line[i]);\n        \tString [] splitedCode =new String[tmp.length()/5+1];\n        \tfor(int i=0;i<splitedCode.length;i++){\t\n        \t\tif(i==(splitedCode.length-1))\n        \t\t\tsplitedCode[i]=tmp.substring(5*i,tmp.length());\n        \t\telse splitedCode[i]=tmp.substring(5*i,5*i+5);\n        \t}\n        \t\tif(tmp.length()%5!=0)\n        \tfor(int i=0;i<(5-tmp.length()%5);i++)\n        \t\tsplitedCode[splitedCode.length-1]+=\"0\";\n        \t\n        \tStringBuilder sb = new StringBuilder();\n        \tfor(int i=0;i<splitedCode.length;i++)\n        \t\tsb.append(dp.get(splitedCode[i]));\n        \tSystem.out.println(sb);\n        }\n    }\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\nimport static java.lang.Math.*;\n\nclass Main {\n\n    public static void main( final String[] args ) {\n\n\tfinal char[] inFromLst = { ' ', '\\'', ',', '-', '.', '?', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };\n\n\tfinal String[] inToLst = { \"101\" ,\"000000\" ,\"000011\" ,\"10010001\" ,\"010001\" ,\"000001\" ,\"100101\" ,\"10011010\" ,\"0101\" ,\"0001\" ,\"110\" ,\"01001\" ,\"10011011\" ,\"010000\" ,\"0111\" ,\"10011000\" ,\"0110\" ,\"00100\" ,\"10011001\" ,\"10011110\" ,\"00101\" ,\"111\" ,\"10011111\" ,\"1000\" ,\"00110\" ,\"00111\" ,\"10011100\" ,\"10011101\" ,\"000010\" ,\"10010010\" ,\"10010011\" ,\"10010000\" };\n\n\tfinal HashMap<Character, String> inMap = new HashMap<Character, String>();\n\tfor ( int i = 0; i < inFromLst.length; i++ ) {\n\t    inMap.put( inFromLst[ i ], inToLst[ i ] );\n\t}\n\n\tfinal Scanner stdin = new Scanner( System.in );\n\tfinal String input = stdin.nextLine();\n\t\n\tfinal StringBuilder in = new StringBuilder();\n\tfor ( final char ch : input.toCharArray() ) {\n\t    in.append( inMap.get( ch ) );\n\t}\n\n\tfor ( int i = 0; i < in.length() % 5; i++ ) {\n\t    in.append( '0' );\n\t}\n\n\tfinal String[] outFromLst = { \"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\" };\n\n\tfinal char[] outToLst = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '.', ',', '-', '\\'', '?' };\n\n\tfinal Map<String, Character> outMap = new HashMap<String, Character>();\n\tfor ( int i = 0; i < outFromLst.length; i++ ) {\n\t    outMap.put( outFromLst[ i ], outToLst[ i ] );\n\t}\n\t\n\tfinal StringBuilder out = new StringBuilder();\n\tfinal int no = in.length() / 5;\n\tfor ( int i = 0; i < no; i++ ) {\n\t    final String token = in.substring( i * 5, ( i + 1 ) * 5 );\n\t    out.append( outMap.get( token ) );\n\t}\n\tSystem.out.println( out.toString() );\n    }    \n}"
  },
  {
    "language": "Java",
    "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * The Code A Doctor Loved\n */\npublic class Main {\n\n\tstatic final HashMap<Character, String> c1 = new HashMap<Character, String>() {\n\t\t{\n\t\t\tput(' ', \"101\");\n\t\t\tput('\\\\', \"000000\");\n\t\t\tput(',', \"000011\");\n\t\t\tput('-', \"10010001\");\n\t\t\tput('.', \"010001\");\n\t\t\tput('?', \"000001\");\n\t\t\tput('A', \"100101\");\n\t\t\tput('B', \"10011010\");\n\t\t\tput('C', \"0101\");\n\t\t\tput('D', \"0001\");\n\t\t\tput('E', \"110\");\n\t\t\tput('F', \"01001\");\n\t\t\tput('G', \"10011011\");\n\t\t\tput('H', \"010000\");\n\t\t\tput('I', \"0111\");\n\t\t\tput('J', \"10011000\");\n\t\t\tput('K', \"0110\");\n\t\t\tput('L', \"00100\");\n\t\t\tput('M', \"10011001\");\n\t\t\tput('N', \"10011110\");\n\t\t\tput('O', \"00101\");\n\t\t\tput('P', \"111\");\n\t\t\tput('Q', \"10011111\");\n\t\t\tput('R', \"1000\");\n\t\t\tput('S', \"00110\");\n\t\t\tput('T', \"00111\");\n\t\t\tput('U', \"10011100\");\n\t\t\tput('V', \"10011101\");\n\t\t\tput('W', \"000010\");\n\t\t\tput('X', \"10010010\");\n\t\t\tput('Y', \"10010011\");\n\t\t\tput('Z', \"10010000\");\n\t\t}\n\t};\n\n\tstatic final HashMap<String, Character> c2 = new HashMap<String, Character>() {\n\t\t{\n\t\t\tput(\"00000\", 'A');\n\t\t\tput(\"00001\", 'B');\n\t\t\tput(\"00010\", 'C');\n\t\t\tput(\"00011\", 'D');\n\t\t\tput(\"00100\", 'E');\n\t\t\tput(\"00101\", 'F');\n\t\t\tput(\"00110\", 'G');\n\t\t\tput(\"00111\", 'H');\n\t\t\tput(\"01000\", 'I');\n\t\t\tput(\"01001\", 'J');\n\t\t\tput(\"01010\", 'K');\n\t\t\tput(\"01011\", 'L');\n\t\t\tput(\"01100\", 'M');\n\t\t\tput(\"01101\", 'N');\n\t\t\tput(\"01110\", 'O');\n\t\t\tput(\"01111\", 'P');\n\t\t\tput(\"10000\", 'Q');\n\t\t\tput(\"10001\", 'R');\n\t\t\tput(\"10010\", 'S');\n\t\t\tput(\"10011\", 'T');\n\t\t\tput(\"10100\", 'U');\n\t\t\tput(\"10101\", 'V');\n\t\t\tput(\"10110\", 'W');\n\t\t\tput(\"10111\", 'X');\n\t\t\tput(\"11000\", 'Y');\n\t\t\tput(\"11001\", 'Z');\n\t\t\tput(\"11010\", ' ');\n\t\t\tput(\"11011\", '.');\n\t\t\tput(\"11100\", ',');\n\t\t\tput(\"11101\", '-');\n\t\t\tput(\"11110\", '\\'');\n\t\t\tput(\"11111\", '?');\n\t\t}\n\t};\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = \"\";\n\n\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n\t\t\t//\n\t\t\tStringBuilder sb1, sb2;\n\t\t\tsb1 = new StringBuilder();\n\t\t\tsb2 = new StringBuilder();\n\t\t\tfor (char c : line.toCharArray()) {\n\t\t\t\tsb1.append(c1.get(c));\n\t\t\t}\n\t\t\t//\n\t\t\twhile (sb1.length() % 5 != 0) {\n\t\t\t\tsb1.append('0');\n\t\t\t}\n\t\t\t//\n\t\t\tline = sb1.toString();\n\t\t\tfor (int i = 0; i < line.length(); i += 5) {\n\t\t\t\tsb2.append(c2.get(line.substring(i, i + 5)));\n\t\t\t}\n\t\t\tSystem.out.println(sb2.toString());\n\t\t}\n\t}\n}"
  },
  {
    "language": "Java",
    "code": "import java.util.*;\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner s=new Scanner(System.in);\n\t\tString p[]={\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\"\n\t\t,\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\"\n\t\t,\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"};\n\t\tString c=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\t\tString q[]={\"11010\",\"11110\",\"11100\",\"11101\",\"11011\",\"11111\",\"00000\",\"00001\",\"00010\",\"00011\",\"00100\"\n\t\t,\"00101\",\"00110\",\"00111\",\"01000\",\"01001\",\"01010\",\"01011\",\"01100\",\"01101\",\"01110\",\"01111\",\"10000\",\"10001\"\n\t\t,\"10010\",\"10011\",\"10100\",\"10101\",\"10110\",\"10111\",\"11000\",\"11001\"};\n\t\twhile(s.hasNext()){\n\t\t\tString k=s.nextLine();\n\t\t\tString a=\"\";\n\t\t\tfor(int i=0;i<k.length();i++)\n\t\t\t\tfor(int j=0;j<32;j++)if(k.charAt(i)==c.charAt(j))a+=p[j];\n\t\t\twhile(a.length()%5!=0)a+=\"0\";\n\t\t\tString e=\"\";\n\t\t\tfor(int i=0;i<a.length()/5;i++){\n\t\t\t\tfor(int j=0;j<32;j++){\n\t\t\t\t\tif(a.substring(i*5,(i+1)*5).equals(q[j]))e+=c.charAt(j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(e);\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nclass Program\n{\n    void Calc()\n    {\n        var dic = new Dictionary<char, string>\n        {\n{' ', \"101\"},\n{'\\'', \"000000\"},\n{',', \"000011\"},\n{'-', \"10010001\"},\n{'.', \"010001\"},\n{'?', \"000001\"},\n{'A', \"100101\"},\n{'B', \"10011010\"},\n{'C', \"0101\"},\n{'D', \"0001\"},\n{'E', \"110\"},\n{'F', \"01001\"},\n{'G', \"10011011\"},\n{'H', \"010000\"},\n{'I', \"0111\"},\n{'J', \"10011000\"},\n{'K', \"0110\"},\n{'L', \"00100\"},\n{'M', \"10011001\"},\n{'N', \"10011110\"},\n{'O', \"00101\"},\n{'P', \"111\"},\n{'Q', \"10011111\"},\n{'R', \"1000\"},\n{'S', \"00110\"},\n{'T', \"00111\"},\n{'U', \"10011100\"},\n{'V', \"10011101\"},\n{'W', \"000010\"},\n{'X', \"10010010\"},\n{'Y', \"10010011\"},\n{'Z', \"10010000\"},\n        };\n\n        var dic2 = new Dictionary<string, char>\n        {\n{\"00000\", 'A'},\n{\"00001\", 'B'},\n{\"00010\", 'C'},\n{\"00011\", 'D'},\n{\"00100\", 'E'},\n{\"00101\", 'F'},\n{\"00110\", 'G'},\n{\"00111\", 'H'},\n{\"01000\", 'I'},\n{\"01001\", 'J'},\n{\"01010\", 'K'},\n{\"01011\", 'L'},\n{\"01100\", 'M'},\n{\"01101\", 'N'},\n{\"01110\", 'O'},\n{\"01111\", 'P'},\n{\"10000\", 'Q'},\n{\"10001\", 'R'},\n{\"10010\", 'S'},\n{\"10011\", 'T'},\n{\"10100\", 'U'},\n{\"10101\", 'V'},\n{\"10110\", 'W'},\n{\"10111\", 'X'},\n{\"11000\", 'Y'},\n{\"11001\", 'Z'},\n{\"11010\", ' '},\n{\"11011\", '.'},\n{\"11100\", ','},\n{\"11101\", '-'},\n{\"11110\", '\\''},\n{\"11111\", '?'},\n        };\n        while (true)\n        {\n            string str = Console.ReadLine();\n            string input;\n            while ((input = Console.ReadLine()) != \"\\0\") str += \" \" + input;\n            var next = str\n                .SelectMany(x => dic[x])\n                .Select((x, i) => new { x, i })\n                .GroupBy(x => x.i / 5)\n                .Select(x => string.Concat(x.Select(y => y.x)))\n                .ToArray();\n            if (next.Length != 0)\n                next[next.Length - 1] = next.Last().PadLeft(5, '0');\n            Console.WriteLine(string.Concat(next.Select(x => dic2[x])));\n        }\n    }\n\n    static void Main()\n    {\n        new Program().Calc();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Text;\n\nnamespace _088_TheCodeADoctorLoved\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tstring inputStr;\n\t\t\tStringBuilder output = new StringBuilder (100 * 200);\n\n\t\t\twhile ((inputStr = Console.ReadLine ()) != null)\n\t\t\t{\n\t\t\t\tStringBuilder data = new StringBuilder (inputStr.Length * 8);\n\n\t\t\t\t//encode\n\t\t\t\tforeach (var item in inputStr)\n\t\t\t\t{\n\t\t\t\t\tdata.Append (EncodeData (item));\n\t\t\t\t}\n\n\t\t\t\t//padding zero\n\t\t\t\tif (data.Length % 5 != 0)\n\t\t\t\t{\n\t\t\t\t\tint zeroCount = 5 - data.Length % 5;\n\t\t\t\t\tdata.Append ('0', zeroCount);\n\t\t\t\t}\n\n\t\t\t\t//decode\n\t\t\t\tfor (int lp = 0; lp < data.Length; lp += 5)\n\t\t\t\t{\n\t\t\t\t\toutput.Append (DecodeData (data.ToString (lp, 5)));\n\t\t\t\t}\n\t\t\t\toutput.AppendLine ();\n\t\t\t}\n\n\t\t\tConsole.Write (output);\n\t\t}\n\n\t\tstatic string EncodeData ( char ch )\n\t\t{\n\t\t\tswitch (ch)\n\t\t\t{\n\t\t\t\tcase ' ': return \"101\";\n\t\t\t\tcase '\\'': return \"000000\";\n\t\t\t\tcase ',': return \"000011\";\n\t\t\t\tcase '-': return \"10010001\";\n\t\t\t\tcase '.': return \"010001\";\n\t\t\t\tcase '?': return \"000001\";\n\n\t\t\t\tcase 'A': return \"100101\";\n\t\t\t\tcase 'B': return \"10011010\";\n\t\t\t\tcase 'C': return \"0101\";\n\t\t\t\tcase 'D': return \"0001\";\n\t\t\t\tcase 'E': return \"110\";\n\t\t\t\tcase 'F': return \"01001\";\n\t\t\t\tcase 'G': return \"10011011\";\n\t\t\t\tcase 'H': return \"010000\";\n\t\t\t\tcase 'I': return \"0111\";\n\t\t\t\tcase 'J': return \"10011000\";\n\t\t\t\tcase 'K': return \"0110\";\n\t\t\t\tcase 'L': return \"00100\";\n\t\t\t\tcase 'M': return \"10011001\";\n\t\t\t\tcase 'N': return \"10011110\";\n\t\t\t\tcase 'O': return \"00101\";\n\t\t\t\tcase 'P': return \"111\";\n\t\t\t\tcase 'Q': return \"10011111\";\n\t\t\t\tcase 'R': return \"1000\";\n\t\t\t\tcase 'S': return \"00110\";\n\t\t\t\tcase 'T': return \"00111\";\n\t\t\t\tcase 'U': return \"10011100\";\n\t\t\t\tcase 'V': return \"10011101\";\n\t\t\t\tcase 'W': return \"000010\";\n\t\t\t\tcase 'X': return \"10010010\";\n\t\t\t\tcase 'Y': return \"10010011\";\n\t\t\t\tcase 'Z': return \"10010000\";\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tstatic char DecodeData ( string str )\n\t\t{\n\t\t\tswitch (str)\n\t\t\t{\n\t\t\t\tcase \"00000\": return 'A';\n\t\t\t\tcase \"00001\": return 'B';\n\t\t\t\tcase \"00010\": return 'C';\n\t\t\t\tcase \"00011\": return 'D';\n\t\t\t\tcase \"00100\": return 'E';\n\t\t\t\tcase \"00101\": return 'F';\n\t\t\t\tcase \"00110\": return 'G';\n\t\t\t\tcase \"00111\": return 'H';\n\t\t\t\tcase \"01000\": return 'I';\n\t\t\t\tcase \"01001\": return 'J';\n\t\t\t\tcase \"01010\": return 'K';\n\t\t\t\tcase \"01011\": return 'L';\n\t\t\t\tcase \"01100\": return 'M';\n\t\t\t\tcase \"01101\": return 'N';\n\t\t\t\tcase \"01110\": return 'O';\n\t\t\t\tcase \"01111\": return 'P';\n\t\t\t\tcase \"10000\": return 'Q';\n\t\t\t\tcase \"10001\": return 'R';\n\t\t\t\tcase \"10010\": return 'S';\n\t\t\t\tcase \"10011\": return 'T';\n\t\t\t\tcase \"10100\": return 'U';\n\t\t\t\tcase \"10101\": return 'V';\n\t\t\t\tcase \"10110\": return 'W';\n\t\t\t\tcase \"10111\": return 'X';\n\t\t\t\tcase \"11000\": return 'Y';\n\t\t\t\tcase \"11001\": return 'Z';\n\t\t\t\tcase \"11010\": return ' ';\n\t\t\t\tcase \"11011\": return '.';\n\t\t\t\tcase \"11100\": return ',';\n\t\t\t\tcase \"11101\": return '-';\n\t\t\t\tcase \"11110\": return '\\'';\n\t\t\t\tcase \"11111\": return '?';\n\t\t\t}\n\t\t\treturn '0';\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static readonly Dictionary<char, string> dic = new Dictionary<char, string>()\n        {\n            {' ',\"101\" },\n            {'\\'',\"000000\" },\n            {',',\"000011\" },\n            {'-',\"10010001\" },\n            {'.',\"010001\" },\n            {'?',\"000001\" },\n            {'A',\"100101\" },\n            {'B',\"10011010\" },\n            {'C',\"0101\" },\n            {'D',\"0001\" },\n            {'E',\"110\" },\n            {'F',\"01001\" },\n            {'G',\"10011011\" },\n            {'H',\"010000\" },\n            {'I',\"0111\" },\n            {'J',\"10011000\" },\n            {'K',\"0110\" },\n            {'L',\"00100\" },\n            {'M',\"10011001\" },\n            {'N',\"10011110\" },\n            {'O',\"00101\" },\n            {'P',\"111\" },\n            {'Q',\"10011111\" },\n            {'R',\"1000\" },\n            {'S',\"00110\" },\n            {'T',\"00111\" },\n            {'U',\"10011100\" },\n            {'V',\"10011101\" },\n            {'W',\"000010\" },\n            {'X',\"10010010\" },\n            {'Y',\"10010011\" },\n            {'Z',\"10010000\" }\n        };\n\n        static readonly char[] ch = new char[]\n        {\n            'A','B','C','D','E','F','G','H','I','j','K','L','M',\n            'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',\n            ' ','.',',','-','\\'','?'\n        };\n\n        static void Main(string[] args)\n        {\n            StringBuilder sb = new StringBuilder();\n\n            string input;\n\n            while (!string.IsNullOrEmpty(input = Console.ReadLine()))\n            {\n                string conv = \"\";\n\n                for (int i = 0; i < input.Length; i++)\n                {\n                    conv += dic[input[i]];\n                }\n\n                int m = conv.Length % 5;\n\n                if (m != 0)\n                {\n                    for (int i = m; i < 5; i++) conv += \"0\";\n                }\n\n                for (int i = 0; i < conv.Length; i += 5)\n                {\n                    int idx = Convert.ToInt32(conv.Substring(i, 5), 2);\n                    sb.Append(ch[idx]);\n                }\n                sb.Append(\"\\n\");\n            }\n            Console.Write(sb);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace AOJ\n{\n\tclass Program\n\t{\n\t\tstatic void Main(string[] args)\n\t\t{\n\t\t\tvar encode = new Dictionary<string, string>()\n\t\t\t{\n\t\t\t\t{ \" \",     \"101\" }, { \"'\",  \"000000\" }, { \",\",   \"000011\" }, { \"-\", \"10010001\" },\n\t\t\t\t{ \".\",  \"010001\" }, { \"?\",  \"000001\" }, { \"A\",   \"100101\" }, { \"B\", \"10011010\" },\n\t\t\t\t{ \"C\",    \"0101\" }, { \"D\",    \"0001\" }, { \"E\",      \"110\" }, { \"F\",    \"01001\" },\n\t\t\t\t{ \"G\",\"10011011\" },{ \"H\",   \"010000\" }, { \"I\",     \"0111\" }, { \"J\", \"10011000\" },\n\t\t\t\t{ \"K\",    \"0110\" }, { \"L\",   \"00100\" }, { \"M\", \"10011001\" }, { \"N\", \"10011110\" },\n\t\t\t\t{ \"O\",   \"00101\" }, { \"P\",     \"111\" }, { \"Q\", \"10011111\" }, { \"R\",     \"1000\" },\n\t\t\t\t{ \"S\",   \"00110\" }, { \"T\",   \"00111\" }, { \"U\", \"10011100\" }, { \"V\", \"10011101\" },\n\t\t\t\t{ \"W\",  \"000010\" }, { \"X\",\"10010010\" }, { \"Y\", \"10010011\" }, { \"Z\", \"10010000\" }\n\t\t\t};\n\t\t\tvar decode = new Dictionary<string, string>()\n\t\t\t{\n\t\t\t\t{ \"00000\", \"A\" }, { \"00001\", \"B\" }, { \"00010\", \"C\" }, { \"00011\", \"D\" },\n\t\t\t\t{ \"00100\", \"E\" }, { \"00101\", \"F\" }, { \"00110\", \"G\" }, { \"00111\", \"H\" },\n\t\t\t\t{ \"01000\", \"I\" }, { \"01001\", \"J\" }, { \"01010\", \"K\" }, { \"01011\", \"L\" },\n\t\t\t\t{ \"01100\", \"M\" }, { \"01101\", \"N\" }, { \"01110\", \"O\" }, { \"01111\", \"P\" },\n\t\t\t\t{ \"10000\", \"Q\" }, { \"10001\", \"R\" }, { \"10010\", \"S\" }, { \"10011\", \"T\" },\n\t\t\t\t{ \"10100\", \"U\" }, { \"10101\", \"V\" }, { \"10110\", \"W\" }, { \"10111\", \"X\" },\n\t\t\t\t{ \"11000\", \"Y\" }, { \"11001\", \"Z\" }, { \"11010\", \" \" }, { \"11011\", \".\" },\n\t\t\t\t{ \"11100\", \",\" }, { \"11101\", \"-\" }, { \"11110\", \"'\" }, { \"11111\", \"?\" },\n\t\t\t};\n\n\t\t\tvar s = \"\";\n\t\t\twhile ((s = Console.ReadLine()) != null)\n\t\t\t{\n\t\t\t\tvar encoded = string.Join(\"\", s.Select(c => encode[c.ToString()]).ToArray());\n\t\t\t\tencoded += new string(Enumerable.Repeat('0', (5 - (encoded.Length % 5))).ToArray());\n\n\t\t\t\tvar splited = new List<string>();\n\t\t\t\tint index = 0;\n\t\t\t\twhile (index + 5 <= encoded.Length)\n\t\t\t\t{\n\t\t\t\t\tsplited.Add(encoded.Substring(index, 5));\n\t\t\t\t\tindex += 5;\n\t\t\t\t}\n\t\t\t\tvar decoded = string.Join(\"\", splited.Select(c => decode[c]).ToArray());\n\t\t\t\tConsole.WriteLine(decoded);\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Miscelleneous {\n   class Program {\n      static Dictionary<char,string> Encode0 = new Dictionary<char,string>() \n      { { ' ',\"101\" },{'\\'',\"000000\"},{',',\"000011\" },{'-',\"10010001\" },{'.',\"010001\" },{ '?',\"000001\"}\n      };\n      static void Main(string[] args) {\n         string[] alphaomega = { \"100101\",\"10011010\",\n         \"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n         \"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n         \"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"\n         };\n         for (int i=0;i<alphaomega.Length;i++) Encode0.Add((char)(i+65),alphaomega[i]);\n         StringBuilder sb = new StringBuilder();\n         List<char> Res = new List<char>();\n         \n         int j;\n         string s1;\n         int k;\n         while (true) {\n            string s = Console.ReadLine();\n            if (string.IsNullOrEmpty(s)) return;\n            foreach (char c in s) sb.Append(Encode0[c]);\n            if (sb.Length%5!=0) sb.Append(new string('0',5-sb.Length%5));\n            string ss = sb.ToString();\n            for (j=0; 5*j<sb.Length; j++) { \n               s1=new string(ss.Skip(5*j).Take(5).ToArray());\n               k=Convert.ToInt32(s1,2);\n               Res.Add(Encode1(k));\n            }\n            Console.WriteLine(new string(Res.ToArray()));\n            Res.Clear();sb.Remove(0,sb.Length);\n         }\n      }\n      \n      static char[] Symbols1 = { ' ','.',',','-','\\'','?'};\n      static char Encode1(int h) {\n         return h<=25 ? (char)(h+65) : Symbols1[h-26];\n      }\n   }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nclass Program\n{\n    void Calc()\n    {\n        var dic = new Dictionary<char, string>\n        {\n{' ', \"101\"},\n{'\\'', \"000000\"},\n{',', \"000011\"},\n{'-', \"10010001\"},\n{'.', \"010001\"},\n{'?', \"000001\"},\n{'A', \"100101\"},\n{'B', \"10011010\"},\n{'C', \"0101\"},\n{'D', \"0001\"},\n{'E', \"110\"},\n{'F', \"01001\"},\n{'G', \"10011011\"},\n{'H', \"010000\"},\n{'I', \"0111\"},\n{'J', \"10011000\"},\n{'K', \"0110\"},\n{'L', \"00100\"},\n{'M', \"10011001\"},\n{'N', \"10011110\"},\n{'O', \"00101\"},\n{'P', \"111\"},\n{'Q', \"10011111\"},\n{'R', \"1000\"},\n{'S', \"00110\"},\n{'T', \"00111\"},\n{'U', \"10011100\"},\n{'V', \"10011101\"},\n{'W', \"000010\"},\n{'X', \"10010010\"},\n{'Y', \"10010011\"},\n{'Z', \"10010000\"},\n        };\n\n        var dic2 = new Dictionary<string, char>\n        {\n{\"11010\", ' '},\n{\"11110\", '\\''},\n{\"00000\", 'A'},\n{\"00001\", 'B'},\n{\"00010\", 'C'},\n{\"00011\", 'D'},\n{\"00100\", 'E'},\n{\"00101\", 'F'},\n{\"00110\", 'G'},\n{\"00111\", 'H'},\n{\"01000\", 'I'},\n{\"01001\", 'J'},\n{\"01010\", 'K'},\n{\"01011\", 'L'},\n{\"01100\", 'M'},\n{\"01101\", 'N'},\n{\"01110\", 'O'},\n{\"01111\", 'P'},\n{\"10000\", 'Q'},\n{\"10001\", 'R'},\n{\"10010\", 'S'},\n{\"10011\", 'T'},\n{\"10100\", 'U'},\n{\"10101\", 'V'},\n{\"10110\", 'W'},\n{\"10111\", 'X'},\n{\"11000\", 'Y'},\n{\"11001\", 'Z'},\n{\"11011\", '.'},\n{\"11100\", ','},\n{\"11101\", '-'},\n{\"11111\", '?'},\n        };\n\n        var str = Console.ReadLine();\n        var conv = string.Concat(str.Select(x => dic[x]));\n        var next = conv.Select((x, i) => new { x, i })\n            .GroupBy(x => x.i / 5)\n            .Select(x => string.Concat(x.Select(y => y.x)))\n            .ToArray();\n        if (next.Any())\n            next[next.Length - 1] += string.Concat(Enumerable.Repeat('0', 5 - next[next.Length - 1].Length));\n        Console.WriteLine(string.Concat(next.Select(x => dic2[x])));\n    }\n\n    static void Main()\n    {\n        new Program().Calc();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n \nnamespace aizu\n{\n    class OnlineJudge\n    {\n        static void Main()\n        {\n            var enc = new Dictionary<char, string> {\n                {' ' , \"101\"     }, {'\\'', \"000000\"  }, {',' , \"000011\"  }, {'-' , \"10010001\"},\n                {'.' , \"010001\"  }, {'?' , \"000001\"  }, {'A' , \"100101\"  }, {'B' , \"10011010\"},\n                {'C' , \"0101\"    }, {'D' , \"0001\"    }, {'E' , \"110\"     }, {'F' , \"01001\"   },\n                {'G' , \"10011011\"}, {'H' , \"010000\"  }, {'I' , \"0111\"    }, {'J' , \"10011000\"},\n                {'K' , \"0110\"    }, {'L' , \"00100\"   }, {'M' , \"10011001\"}, {'N' , \"10011110\"},\n                {'O' , \"00101\"   }, {'P' , \"111\"     }, {'Q' , \"10011111\"}, {'R' , \"1000\"    },\n                {'S' , \"00110\"   }, {'T' , \"00111\"   }, {'U' , \"10011100\"}, {'V' , \"10011101\"},\n                {'W' , \"000010\"  }, {'X' , \"10010010\"}, {'Y' , \"10010011\"}, {'Z' , \"10010000\"}\n            };\n            var dec = new Dictionary<string, string> {\n                {\"00000\",\"A\"}, {\"00001\",\"B\"}, {\"00010\",\"C\" }, {\"00011\",\"D\"},\n                {\"00100\",\"E\"}, {\"00101\",\"F\"}, {\"00110\",\"G\" }, {\"00111\",\"H\"},\n                {\"01000\",\"I\"}, {\"01001\",\"J\"}, {\"01010\",\"K\" }, {\"01011\",\"L\"},\n                {\"01100\",\"M\"}, {\"01101\",\"N\"}, {\"01110\",\"O\" }, {\"01111\",\"P\"},\n                {\"10000\",\"Q\"}, {\"10001\",\"R\"}, {\"10010\",\"S\" }, {\"10011\",\"T\"},\n                {\"10100\",\"U\"}, {\"10101\",\"V\"}, {\"10110\",\"W\" }, {\"10111\",\"X\"},\n                {\"11000\",\"Y\"}, {\"11001\",\"Z\"}, {\"11010\",\" \" }, {\"11011\",\".\"},\n                {\"11100\",\",\"}, {\"11101\",\"-\"}, {\"11110\",\"\\'\"}, {\"11111\",\"?\"}\n            };\n            string input;\n            while((input = Console.ReadLine()) != null) {\n                string val = string.Empty;\n                foreach(var c in input) {\n                    val += enc[c];\n                }\n                val += new string('0', 5 - (val.Length % 5));\n                Console.WriteLine(string.Join(\"\", Enumerable.Range(0, val.Length / 5).Select(p => val.Substring(p * 5, 5)).Select(p => dec[p]).ToArray()));\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static readonly Dictionary<char, string> dic = new Dictionary<char, string>()\n        {\n            {' ',\"101\" },\n            {'\\'',\"000000\" },\n            {',',\"000011\" },\n            {'-',\"10010001\" },\n            {'.',\"010001\" },\n            {'?',\"000001\" },\n            {'A',\"100101\" },\n            {'B',\"10011010\" },\n            {'C',\"0101\" },\n            {'D',\"0001\" },\n            {'E',\"110\" },\n            {'F',\"01001\" },\n            {'G',\"10011011\" },\n            {'H',\"010000\" },\n            {'I',\"0111\" },\n            {'J',\"10011000\" },\n            {'K',\"0110\" },\n            {'L',\"00100\" },\n            {'M',\"10011001\" },\n            {'N',\"10011110\" },\n            {'O',\"00101\" },\n            {'P',\"111\" },\n            {'Q',\"10011111\" },\n            {'R',\"1000\" },\n            {'S',\"00110\" },\n            {'T',\"00111\" },\n            {'U',\"10011100\" },\n            {'V',\"10011101\" },\n            {'W',\"000010\" },\n            {'X',\"10010010\" },\n            {'Y',\"10010011\" },\n            {'Z',\"10010000\" }\n        };\n\n        static readonly char[] ch = new char[]\n        {\n            'A','B','C','D','E','F','G','H','I','J','K','L','M',\n            'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',\n            ' ','.',',','-','\\'','?'\n        };\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Convert.ToInt32(\"11111\", 2));\n\n\n            StringBuilder sb = new StringBuilder();\n\n            string input;\n\n            while (!string.IsNullOrEmpty(input = Console.ReadLine()))\n            {\n                StringBuilder temp = new StringBuilder();\n\n                for (int i = 0; i < input.Length; i++)\n                {\n                    temp.Append(dic[input[i]]);\n                }\n\n                string conv = temp.ToString();\n                int m = conv.Length % 5;\n\n                if (m != 0)\n                {\n                    for (int i = m; i < 5; i++) conv += \"0\";\n                }\n\n                for (int i = 0; i < conv.Length; i += 5)\n                {\n                    int idx = Convert.ToInt32(conv.Substring(i, 5), 2);\n                    sb.Append(ch[idx]);\n                }\n                sb.Append(\"\\n\");\n            }\n            Console.Write(sb);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System.Collections.Generic;\nusing System;\n\npublic class hello\n{\n    public static Dictionary<string, string> dic1, dic2;\n    public static void Main()\n    {\n        var a = new string[] { \" \", \"\\'\", \",\", \"-\", \".\", \"?\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\" };\n        var b = new string[] { \"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\", \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\", \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\", \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\", \"10010000\" };\n        var c = new string[] { \"00000\", \"00001\", \"00010\", \"00011\", \"00100\", \"00101\", \"00110\", \"00111\", \"01000\", \"01001\", \"01010\", \"01011\", \"01100\", \"01101\", \"01110\", \"01111\", \"10000\", \"10001\", \"10010\", \"10011\", \"10100\", \"10101\", \"10110\", \"10111\", \"11000\", \"11001\", \"11010\", \"11011\", \"11100\", \"11101\", \"11110\", \"11111\" };\n        var d = new string[] { \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \" \", \".\", \",\", \"-\", \"\\'\", \"?\" };\n        dic1 = new Dictionary<string, string>();\n        dic2 = new Dictionary<string, string>();\n        for (int i = 0; i < 32; i++)\n        {\n            dic1[a[i]] = b[i];\n            dic2[c[i]] = d[i];\n        }\n        string line;\n        for (; (line = Console.ReadLine()) != null;)\n        {\n            getAns(line);\n        }\n    }\n    static void getAns(string s)\n    {\n        var imax = s.Length;\n        var ts = \"\";\n        for (int i = 0; i < imax; i++)\n        {\n            var w = s.Substring(i, 1);\n            ts += dic1[w];\n        }\n        var pts = ts.Length % 5;\n        if (ts.Length % 5 != 0) ts += \"0000\";\n        imax = ts.Length / 5;\n        var res = \"\";\n        for (int i = 0; i < imax; i++)\n        {\n            var w = ts.Substring(i * 5, 5);\n            res += dic2[w];\n        }\n        Console.WriteLine(res);\n    }\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Numerics;\n\nclass Program\n{\n    void Calc()\n    {\n        var dic = new Dictionary<char, string>\n        {\n{' ', \"101\"},\n{'\\'', \"000000\"},\n{',', \"000011\"},\n{'-', \"10010001\"},\n{'.', \"010001\"},\n{'?', \"000001\"},\n{'A', \"100101\"},\n{'B', \"10011010\"},\n{'C', \"0101\"},\n{'D', \"0001\"},\n{'E', \"110\"},\n{'F', \"01001\"},\n{'G', \"10011011\"},\n{'H', \"010000\"},\n{'I', \"0111\"},\n{'J', \"10011000\"},\n{'K', \"0110\"},\n{'L', \"00100\"},\n{'M', \"10011001\"},\n{'N', \"10011110\"},\n{'O', \"00101\"},\n{'P', \"111\"},\n{'Q', \"10011111\"},\n{'R', \"1000\"},\n{'S', \"00110\"},\n{'T', \"00111\"},\n{'U', \"10011100\"},\n{'V', \"10011101\"},\n{'W', \"000010\"},\n{'X', \"10010010\"},\n{'Y', \"10010011\"},\n{'Z', \"10010000\"},\n        };\n\n        var dic2 = new Dictionary<string, char>\n        {\n{\"11010\", ' '},\n{\"11110\", '\\''},\n{\"00000\", 'A'},\n{\"00001\", 'B'},\n{\"00010\", 'C'},\n{\"00011\", 'D'},\n{\"00100\", 'E'},\n{\"00101\", 'F'},\n{\"00110\", 'G'},\n{\"00111\", 'H'},\n{\"01000\", 'I'},\n{\"01001\", 'J'},\n{\"01010\", 'K'},\n{\"01011\", 'L'},\n{\"01100\", 'M'},\n{\"01101\", 'N'},\n{\"01110\", 'O'},\n{\"01111\", 'P'},\n{\"10000\", 'Q'},\n{\"10001\", 'R'},\n{\"10010\", 'S'},\n{\"10011\", 'T'},\n{\"10100\", 'U'},\n{\"10101\", 'V'},\n{\"10110\", 'W'},\n{\"10111\", 'X'},\n{\"11000\", 'Y'},\n{\"11001\", 'Z'},\n{\"11011\", '.'},\n{\"11100\", ','},\n{\"11101\", '-'},\n{\"11111\", '?'},\n        };\n\n        var str = Console.ReadLine();\n        var conv = string.Concat(str.Select(x => dic[x]));\n        var next = conv.Select((x, i) => new { x, i })\n            .GroupBy(x => x.i / 5)\n            .Select(x => string.Concat(x.Select(y => y.x)))\n            .ToArray();\n        next[next.Length - 1] += string.Concat(Enumerable.Repeat('0', 5 - next[next.Length - 1].Length));\n        Console.WriteLine(string.Concat(next.Select(x => dic2[x])));\n    }\n\n    static void Main()\n    {\n        new Program().Calc();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n \nnamespace aizu\n{\n    class OnlineJudge\n    {\n        static void Main()\n        {\n            var enc = new Dictionary<char, string> {\n                {' ' , \"101\"     }, {'\\'', \"000000\"  }, {',' , \"000011\"  }, {'-' , \"10010001\"},\n                {'.' , \"010001\"  }, {'?' , \"000001\"  }, {'A' , \"100101\"  }, {'B' , \"10011010\"},\n                {'C' , \"0101\"    }, {'D' , \"0001\"    }, {'E' , \"110\"     }, {'F' , \"01001\"   },\n                {'G' , \"10011011\"}, {'H' , \"010000\"  }, {'I' , \"0111\"    }, {'J' , \"10011000\"},\n                {'K' , \"0110\"    }, {'L' , \"00100\"   }, {'M' , \"10011001\"}, {'N' , \"10011110\"},\n                {'O' , \"00101\"   }, {'P' , \"111\"     }, {'Q' , \"10011111\"}, {'R' , \"1000\"    },\n                {'S' , \"00110\"   }, {'T' , \"00111\"   }, {'U' , \"10011100\"}, {'V' , \"10011101\"},\n                {'W' , \"000010\"  }, {'X' , \"10010010\"}, {'Y' , \"10010011\"}, {'Z' , \"10010000\"}\n            };\n            var dec = new Dictionary<string, char> {\n                {\"00000\",'A'}, {\"00001\",'B'}, {\"00010\",'C' }, {\"00011\",'D'},\n                {\"00100\",'E'}, {\"00101\",'F'}, {\"00110\",'G' }, {\"00111\",'H'},\n                {\"01000\",'I'}, {\"01001\",'J'}, {\"01010\",'K' }, {\"01011\",'L'},\n                {\"01100\",'M'}, {\"01101\",'N'}, {\"01110\",'O' }, {\"01111\",'P'},\n                {\"10000\",'Q'}, {\"10001\",'R'}, {\"10010\",'S' }, {\"10011\",'T'},\n                {\"10100\",'U'}, {\"10101\",'V'}, {\"10110\",'W' }, {\"10111\",'X'},\n                {\"11000\",'Y'}, {\"11001\",'Z'}, {\"11010\",' ' }, {\"11011\",'.'},\n                {\"11100\",','}, {\"11101\",'-'}, {\"11110\",'\\''}, {\"11111\",'?'}\n            };\n            string input;\n            while((input = Console.ReadLine()) != null) {\n                string val = string.Empty;\n                foreach(var c in input) {\n                    val += enc[c];\n                }\n                val += new string('0', 5 - (val.Length % 5));\n                var data = string.Join(\"\", Enumerable.Range(0, val.Length / 5).Select(p => val.Substring(p * 5, 5)).Select(p => dec[p]).ToArray());\n                Console.WriteLine(data);\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n \nnamespace aizu\n{\n    class OnlineJudge\n    {\n        static void Main()\n        {\n            var enc = new Dictionary<char, string> {\n                {' ' , \"101\"     }, {'\\'', \"000000\"  }, {',' , \"000011\"  }, {'-' , \"10010001\"},\n                {'.' , \"010001\"  }, {'?' , \"000001\"  }, {'A' , \"100101\"  }, {'B' , \"10011010\"},\n                {'C' , \"0101\"    }, {'D' , \"0001\"    }, {'E' , \"110\"     }, {'F' , \"01001\"   },\n                {'G' , \"10011011\"}, {'H' , \"010000\"  }, {'I' , \"0111\"    }, {'J' , \"10011000\"},\n                {'K' , \"0110\"    }, {'L' , \"00100\"   }, {'M' , \"10011001\"}, {'N' , \"10011110\"},\n                {'O' , \"00101\"   }, {'P' , \"111\"     }, {'Q' , \"10011111\"}, {'R' , \"1000\"    },\n                {'S' , \"00110\"   }, {'T' , \"00111\"   }, {'U' , \"10011100\"}, {'V' , \"10011101\"},\n                {'W' , \"000010\"  }, {'X' , \"10010010\"}, {'Y' , \"10010011\"}, {'Z' , \"10010000\"}\n            };\n            var dec = new Dictionary<string, string> {\n                {\"00000\",\"A\"}, {\"00001\",\"B\"}, {\"00010\",\"C\" }, {\"00011\",\"D\"},\n                {\"00100\",\"E\"}, {\"00101\",\"F\"}, {\"00110\",\"G\" }, {\"00111\",\"H\"},\n                {\"01000\",\"I\"}, {\"01001\",\"J\"}, {\"01010\",\"K\" }, {\"01011\",\"L\"},\n                {\"01100\",\"M\"}, {\"01101\",\"N\"}, {\"01110\",\"O\" }, {\"01111\",\"P\"},\n                {\"10000\",\"Q\"}, {\"10001\",\"R\"}, {\"10010\",\"S\" }, {\"10011\",\"T\"},\n                {\"10100\",\"U\"}, {\"10101\",\"V\"}, {\"10110\",\"W\" }, {\"10111\",\"X\"},\n                {\"11000\",\"Y\"}, {\"11001\",\"Z\"}, {\"11010\",\" \" }, {\"11011\",\".\"},\n                {\"11100\",\",\"}, {\"11101\",\"-\"}, {\"11110\",\"\\\"\"}, {\"11111\",\"?\"}\n            };\n            string input;\n            while((input = Console.ReadLine()) != null) {\n                string val = string.Empty;\n                foreach(var c in input) {\n                    val += enc[c];\n                }\n                val += new string('0', 5 - (val.Length % 5));\n                Console.WriteLine(string.Join(\"\", Enumerable.Range(0, val.Length / 5).Select(p => val.Substring(p * 5, 5)).Select(p => dec[p]).ToArray()));\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nclass Program\n{\n    void Calc()\n    {\n        var dic = new Dictionary<char, string>\n        {\n{' ', \"101\"},\n{'\\'', \"000000\"},\n{',', \"000011\"},\n{'-', \"10010001\"},\n{'.', \"010001\"},\n{'?', \"000001\"},\n{'A', \"100101\"},\n{'B', \"10011010\"},\n{'C', \"0101\"},\n{'D', \"0001\"},\n{'E', \"110\"},\n{'F', \"01001\"},\n{'G', \"10011011\"},\n{'H', \"010000\"},\n{'I', \"0111\"},\n{'J', \"10011000\"},\n{'K', \"0110\"},\n{'L', \"00100\"},\n{'M', \"10011001\"},\n{'N', \"10011110\"},\n{'O', \"00101\"},\n{'P', \"111\"},\n{'Q', \"10011111\"},\n{'R', \"1000\"},\n{'S', \"00110\"},\n{'T', \"00111\"},\n{'U', \"10011100\"},\n{'V', \"10011101\"},\n{'W', \"000010\"},\n{'X', \"10010010\"},\n{'Y', \"10010011\"},\n{'Z', \"10010000\"},\n        };\n\n        var dic2 = new Dictionary<string, char>\n        {\n{\"00000\", 'A'},\n{\"00001\", 'B'},\n{\"00010\", 'C'},\n{\"00011\", 'D'},\n{\"00100\", 'E'},\n{\"00101\", 'F'},\n{\"00110\", 'G'},\n{\"00111\", 'H'},\n{\"01000\", 'I'},\n{\"01001\", 'J'},\n{\"01010\", 'K'},\n{\"01011\", 'L'},\n{\"01100\", 'M'},\n{\"01101\", 'N'},\n{\"01110\", 'O'},\n{\"01111\", 'P'},\n{\"10000\", 'Q'},\n{\"10001\", 'R'},\n{\"10010\", 'S'},\n{\"10011\", 'T'},\n{\"10100\", 'U'},\n{\"10101\", 'V'},\n{\"10110\", 'W'},\n{\"10111\", 'X'},\n{\"11000\", 'Y'},\n{\"11001\", 'Z'},\n{\"11010\", ' '},\n{\"11011\", '.'},\n{\"11100\", ','},\n{\"11101\", '-'},\n{\"11110\", '\\''},\n{\"11111\", '?'},\n        };\n        while (true)\n        {\n            string str = \"\";\n            string input;\n            while ((input = Console.ReadLine()) != \"\\0\" && input != \"\") str += \" \" + input;\n            var next = str.Skip(1)\n                .SelectMany(x => dic[x])\n                .Select((x, i) => new { x, i })\n                .GroupBy(x => x.i / 5)\n                .Select(x => string.Concat(x.Select(y => y.x)))\n                .ToArray();\n            if (next.Length != 0)\n                next[next.Length - 1] = next.Last().PadLeft(5, '0');\n            Console.WriteLine(string.Concat(next.Select(x => dic2[x])));\n        }\n    }\n\n    static void Main()\n    {\n        new Program().Calc();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace _0088\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            while (true)\n            {\n                string line = Console.ReadLine();\n                if (string.IsNullOrEmpty(line)) return;\n\n                string bit = \"\";\n                foreach (var item in line) bit += toBit[item];\n                bit += new string('0', (5 - bit.Length % 5) % 5);\n\n                string res = \"\";\n                for (int i = 0 ; i < bit.Length ; i += 5) res += toChar[Convert.ToInt32(bit.Substring(i, 5), 2)];\n\n                Console.WriteLine(res);\n            }\n        }\n\n        static readonly Dictionary<char, string> toBit = new Dictionary<char, string>()\n        {\n            {' ',\"101\" },\n            {'\\'',\"000000\" },\n            {',',\"000011\" },\n            {'-',\"10010001\" },\n            {'.',\"010001\" },\n            {'?',\"000001\" },\n            {'A',\"100101\" },\n            {'B',\"10011010\" },\n            {'C',\"0101\" },\n            {'D',\"0001\" },\n            {'E',\"110\" },\n            {'F',\"01001\" },\n            {'G',\"10011011\" },\n            {'H',\"010000\" },\n            {'I',\"0111\" },\n            {'J',\"10011000\" },\n            {'K',\"0110\" },\n            {'L',\"00100\" },\n            {'M',\"10011001\" },\n            {'N',\"10011110\" },\n            {'O',\"00101\" },\n            {'P',\"111\" },\n            {'Q',\"10011111\" },\n            {'R',\"1000\" },\n            {'S',\"00110\" },\n            {'T',\"00111\" },\n            {'U',\"10011100\" },\n            {'V',\"10011101\" },\n            {'W',\"000010\" },\n            {'X',\"10010010\" },\n            {'Y',\"10010011\" },\n            {'Z',\"10010000\" }\n        };\n\n        static readonly char[] toChar = new char[]\n        {\n            'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',' ','.',',','-','\\'','?'\n        };\n\n\n        static string RSt() { return Console.ReadLine(); }\n        static int RInt() { return int.Parse(Console.ReadLine().Trim()); }\n        static long RLong() { return long.Parse(Console.ReadLine().Trim()); }\n        static double RDouble() { return double.Parse(Console.ReadLine()); }\n        static string[] RStAr(char sep = ' ') { return Console.ReadLine().Trim().Split(sep); }\n        static int[] RIntAr(char sep = ' ') { return Array.ConvertAll(Console.ReadLine().Trim().Split(sep), e => int.Parse(e)); }\n        static long[] RLongAr(char sep = ' ') { return Array.ConvertAll(Console.ReadLine().Trim().Split(sep), e => long.Parse(e)); }\n        static double[] RDoubleAr(char sep = ' ') { return Array.ConvertAll(Console.ReadLine().Trim().Split(sep), e => double.Parse(e)); }\n        static string WAr<T>(IEnumerable<T> array, string sep = \" \") { return string.Join(sep, array.Select(x => x.ToString()).ToArray()); }\n    }\n\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nclass Dict\n{\n    internal readonly Dictionary<char, string> toBit = new Dictionary<char, string>()\n        {\n            {' ',\"101\" },\n            {'\\'',\"000000\" },\n            {',',\"000011\" },\n            {'-',\"10010001\" },\n            {'.',\"010001\" },\n            {'?',\"000001\" },\n            {'A',\"100101\" },\n            {'B',\"10011010\" },\n            {'C',\"0101\" },\n            {'D',\"0001\" },\n            {'E',\"110\" },\n            {'F',\"01001\" },\n            {'G',\"10011011\" },\n            {'H',\"010000\" },\n            {'I',\"0111\" },\n            {'J',\"10011000\" },\n            {'K',\"0110\" },\n            {'L',\"00100\" },\n            {'M',\"10011001\" },\n            {'N',\"10011110\" },\n            {'O',\"00101\" },\n            {'P',\"111\" },\n            {'Q',\"10011111\" },\n            {'R',\"1000\" },\n            {'S',\"00110\" },\n            {'T',\"00111\" },\n            {'U',\"10011100\" },\n            {'V',\"10011101\" },\n            {'W',\"000010\" },\n            {'X',\"10010010\" },\n            {'Y',\"10010011\" },\n            {'Z',\"10010000\" }\n        };\n\n    internal readonly char[] toChar = new char[]\n        {\n            'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',' ','.',',','-','\\'','?'\n        };\n}\nclass Program\n{\n    static void Main()\n    {\n        var dc = new Dict();\n        Read().ToList().ForEach(delegate (string str)\n        {\n            string bit = \"\";\n            string ans = \"\";\n            str.ToCharArray().ToList().ForEach(x => bit += dc.toBit[x]);\n            bit += new string('0', (5 - bit.Length % 5) % 5);\n\n            for (int i = 0; i < bit.Length; i += 5)\n            {\n                ans += dc.toChar[Convert.ToInt32(bit.Substring(i, 5), 2)];\n            }\n\n            Console.WriteLine(ans);\n        });\n    }\n    private static IEnumerable<string> Read()\n    {\n        string n;\n        while (!string.IsNullOrEmpty(n = Console.ReadLine()))\n        {\n            yield return n;\n        }\n        yield break;\n        Console.WriteLine(\"invalid object inserted...\");\n        Environment.Exit(0);\n    }\n}\n\n"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace AOJ\n{\n\tclass Program\n\t{\n\t\tstatic void Main(string[] args)\n\t\t{\n\t\t\tvar encode = new Dictionary<string, string>()\n\t\t\t{\n\t\t\t\t{ \" \",     \"101\" }, { \"'\",  \"000000\" }, { \",\",   \"000011\" }, { \"-\", \"10010001\" },\n\t\t\t\t{ \".\",  \"010001\" }, { \"?\",  \"000001\" }, { \"A\",   \"100101\" }, { \"B\", \"10011010\" },\n\t\t\t\t{ \"C\",    \"0101\" }, { \"D\",    \"0001\" }, { \"E\",      \"110\" }, { \"F\",    \"01001\" },\n\t\t\t\t{ \"G\",\"10011011\" },{ \"H\",   \"010000\" }, { \"I\",     \"0111\" }, { \"J\", \"10011000\" },\n\t\t\t\t{ \"K\",    \"0110\" }, { \"L\",   \"00100\" }, { \"M\", \"10011001\" }, { \"N\", \"10011110\" },\n\t\t\t\t{ \"O\",   \"00101\" }, { \"P\",     \"111\" }, { \"Q\", \"10011111\" }, { \"R\",     \"1000\" },\n\t\t\t\t{ \"S\",   \"00110\" }, { \"T\",   \"00111\" }, { \"U\", \"10011100\" }, { \"V\", \"10011101\" },\n\t\t\t\t{ \"W\",  \"000010\" }, { \"X\",\"10010010\" }, { \"Y\", \"10010011\" }, { \"Z\", \"10010000\" }\n\t\t\t};\n\t\t\tvar decode = new Dictionary<string, string>()\n\t\t\t{\n\t\t\t\t{ \"00000\", \"A\" }, { \"00001\", \"B\" }, { \"00010\", \"C\" }, { \"00011\", \"D\" },\n\t\t\t\t{ \"00100\", \"E\" }, { \"00101\", \"F\" }, { \"00110\", \"G\" }, { \"00111\", \"H\" },\n\t\t\t\t{ \"01000\", \"I\" }, { \"01001\", \"J\" }, { \"01010\", \"K\" }, { \"01011\", \"L\" },\n\t\t\t\t{ \"01100\", \"M\" }, { \"01101\", \"N\" }, { \"01110\", \"O\" }, { \"01111\", \"P\" },\n\t\t\t\t{ \"10000\", \"Q\" }, { \"10001\", \"R\" }, { \"10010\", \"S\" }, { \"10011\", \"T\" },\n\t\t\t\t{ \"10100\", \"U\" }, { \"10101\", \"V\" }, { \"10110\", \"W\" }, { \"10111\", \"X\" },\n\t\t\t\t{ \"11000\", \"Y\" }, { \"11001\", \"Z\" }, { \"11010\", \" \" }, { \"11011\", \".\" },\n\t\t\t\t{ \"11100\", \",\" }, { \"11101\", \"-\" }, { \"11110\", \"'\" }, { \"11111\", \"?\" },\n\t\t\t};\n\n\t\t\tvar s = \"\";\n\t\t\twhile ((s = Console.ReadLine()) != null)\n\t\t\t{\n\t\t\t\tvar encoded = string.Join(\"\", s.Select(c => encode[c.ToString()]).ToArray());\n\t\t\t\tvar a = 5 - (encoded.Length % 5);\n\t\t\t\tencoded += new string(Enumerable.Repeat('0', (5 - (encoded.Length % 5))).ToArray());\n\n\t\t\t\tvar splited = new List<string>();\n\t\t\t\tint index = 0;\n\t\t\t\twhile (index + 5 <= encoded.Length)\n\t\t\t\t{\n\t\t\t\t\tsplited.Add(encoded.Substring(index, 5));\n\t\t\t\t\tindex += 5;\n\t\t\t\t}\n\t\t\t\tvar decoded = string.Join(\"\", splited.Select(c => decode[c]).ToArray());\n\t\t\t\tConsole.WriteLine(decoded);\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nclass Program\n{\n    void Calc()\n    {\n        var dic = new Dictionary<char, string>\n        {\n{' ', \"101\"},\n{'\\'', \"000000\"},\n{',', \"000011\"},\n{'-', \"10010001\"},\n{'.', \"010001\"},\n{'?', \"000001\"},\n{'A', \"100101\"},\n{'B', \"10011010\"},\n{'C', \"0101\"},\n{'D', \"0001\"},\n{'E', \"110\"},\n{'F', \"01001\"},\n{'G', \"10011011\"},\n{'H', \"010000\"},\n{'I', \"0111\"},\n{'J', \"10011000\"},\n{'K', \"0110\"},\n{'L', \"00100\"},\n{'M', \"10011001\"},\n{'N', \"10011110\"},\n{'O', \"00101\"},\n{'P', \"111\"},\n{'Q', \"10011111\"},\n{'R', \"1000\"},\n{'S', \"00110\"},\n{'T', \"00111\"},\n{'U', \"10011100\"},\n{'V', \"10011101\"},\n{'W', \"000010\"},\n{'X', \"10010010\"},\n{'Y', \"10010011\"},\n{'Z', \"10010000\"},\n        };\n\n        var dic2 = new Dictionary<string, char>\n        {\n{\"00000\", 'A'},\n{\"00001\", 'B'},\n{\"00010\", 'C'},\n{\"00011\", 'D'},\n{\"00100\", 'E'},\n{\"00101\", 'F'},\n{\"00110\", 'G'},\n{\"00111\", 'H'},\n{\"01000\", 'I'},\n{\"01001\", 'J'},\n{\"01010\", 'K'},\n{\"01011\", 'L'},\n{\"01100\", 'M'},\n{\"01101\", 'N'},\n{\"01110\", 'O'},\n{\"01111\", 'P'},\n{\"10000\", 'Q'},\n{\"10001\", 'R'},\n{\"10010\", 'S'},\n{\"10011\", 'T'},\n{\"10100\", 'U'},\n{\"10101\", 'V'},\n{\"10110\", 'W'},\n{\"10111\", 'X'},\n{\"11000\", 'Y'},\n{\"11001\", 'Z'},\n{\"11010\", ' '},\n{\"11011\", '.'},\n{\"11100\", ','},\n{\"11101\", '-'},\n{\"11110\", '\\''},\n{\"11111\", '?'},\n        };\n        while (true)\n        {\n            var str = Console.ReadLine();\n            if (str == null) break;\n            var next = str\n                .SelectMany(x => dic[x])\n                .Select((x, i) => new { x, i })\n                .GroupBy(x => x.i / 5)\n                .Select(x => string.Concat(x.Select(y => y.x)))\n                .ToArray();\n            if (next.Length != 0)\n                next[next.Length - 1] = next.Last().PadLeft(5, '0');\n            Console.WriteLine(string.Concat(next.Select(x => dic2[x])));\n        }\n    }\n\n    static void Main()\n    {\n        new Program().Calc();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static readonly Dictionary<char, string> dic = new Dictionary<char, string>()\n        {\n            {' ',\"101\" },\n            {'\\'',\"000000\" },\n            {',',\"000011\" },\n            {'-',\"10010001\" },\n            {'.',\"010001\" },\n            {'?',\"000001\" },\n            {'A',\"100101\" },\n            {'B',\"10011010\" },\n            {'C',\"0101\" },\n            {'D',\"0001\" },\n            {'E',\"110\" },\n            {'F',\"01001\" },\n            {'G',\"10011011\" },\n            {'H',\"010000\" },\n            {'I',\"0111\" },\n            {'J',\"10011000\" },\n            {'K',\"0110\" },\n            {'L',\"00100\" },\n            {'M',\"10011001\" },\n            {'N',\"10011110\" },\n            {'O',\"00101\" },\n            {'P',\"111\" },\n            {'Q',\"10011111\" },\n            {'R',\"1000\" },\n            {'S',\"00110\" },\n            {'T',\"00111\" },\n            {'U',\"10011100\" },\n            {'V',\"10011101\" },\n            {'W',\"000010\" },\n            {'X',\"10010010\" },\n            {'Y',\"10010011\" },\n            {'Z',\"10010000\" }\n        };\n\n        static readonly char[] ch = new char[]\n        {\n            'A','B','C','D','E','F','G','H','I','j','K','L','M',\n            'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',\n            ' ','.',',','-','\\'','?'\n        };\n\n        static void Main(string[] args)\n        {\n            StringBuilder sb = new StringBuilder();\n\n            string input;\n\n            while (!string.IsNullOrEmpty(input = Console.ReadLine()))\n            {\n                StringBuilder temp = new StringBuilder();\n\n                for (int i = 0; i < input.Length; i++)\n                {\n                    temp.Append(dic[input[i]]);\n                }\n\n                string conv = temp.ToString();\n                int m = conv.Length % 5;\n\n                if (m != 0)\n                {\n                    for (int i = m; i < 5; i++) conv += \"0\";\n                }\n\n                for (int i = 0; i < conv.Length; i += 5)\n                {\n                    int idx = Convert.ToInt32(conv.Substring(i, 5), 2);\n                    sb.Append(ch[idx]);\n                }\n                sb.Append(\"\\n\");\n            }\n            Console.Write(sb);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Text;\n\nnamespace _088_TheCodeADoctorLoved\n{\n\tclass Program\n\t{\n\t\tstatic void Main ( string[] args )\n\t\t{\n\t\t\tstring inputStr;\n\t\t\tStringBuilder output = new StringBuilder (100 * 200);\n\n\t\t\twhile ((inputStr = Console.ReadLine ()) != null)\n\t\t\t{\n\t\t\t\tStringBuilder data = new StringBuilder (inputStr.Length * 8);\n\n\t\t\t\t//encode\n\t\t\t\tforeach (var item in inputStr)\n\t\t\t\t{\n\t\t\t\t\tdata.Append (EncodeData (item));\n\t\t\t\t}\n\n\t\t\t\t//padding zero\n\t\t\t\tint zeroCount = 5 - data.Length % 5;\n\t\t\t\tdata.Append ('0', zeroCount);\n\n\t\t\t\t//decode\n\t\t\t\tfor (int lp = 0; lp < data.Length; lp += 5)\n\t\t\t\t{\n\t\t\t\t\toutput.Append (DecodeData (data.ToString (lp, 5)));\n\t\t\t\t}\n\t\t\t\toutput.AppendLine ();\n\t\t\t}\n\n\t\t\tConsole.Write (output);\n\t\t}\n\n\t\tstatic string EncodeData ( char ch )\n\t\t{\n\t\t\tswitch (ch)\n\t\t\t{\n\t\t\t\tcase ' ': return \"101\";\n\t\t\t\tcase '\\'': return \"000000\";\n\t\t\t\tcase ',': return \"000011\";\n\t\t\t\tcase '-': return \"10010001\";\n\t\t\t\tcase '.': return \"010001\";\n\t\t\t\tcase '?': return \"000001\";\n\n\t\t\t\tcase 'A': return \"100101\";\n\t\t\t\tcase 'B': return \"10011010\";\n\t\t\t\tcase 'C': return \"0101\";\n\t\t\t\tcase 'D': return \"0001\";\n\t\t\t\tcase 'E': return \"110\";\n\t\t\t\tcase 'F': return \"01001\";\n\t\t\t\tcase 'G': return \"10011011\";\n\t\t\t\tcase 'H': return \"010000\";\n\t\t\t\tcase 'I': return \"0111\";\n\t\t\t\tcase 'J': return \"10011000\";\n\t\t\t\tcase 'K': return \"0110\";\n\t\t\t\tcase 'L': return \"00100\";\n\t\t\t\tcase 'M': return \"10011001\";\n\t\t\t\tcase 'N': return \"10011110\";\n\t\t\t\tcase 'O': return \"00101\";\n\t\t\t\tcase 'P': return \"111\";\n\t\t\t\tcase 'Q': return \"10011111\";\n\t\t\t\tcase 'R': return \"1000\";\n\t\t\t\tcase 'S': return \"00110\";\n\t\t\t\tcase 'T': return \"00111\";\n\t\t\t\tcase 'U': return \"10011100\";\n\t\t\t\tcase 'V': return \"10011101\";\n\t\t\t\tcase 'W': return \"000010\";\n\t\t\t\tcase 'X': return \"10010010\";\n\t\t\t\tcase 'Y': return \"10010011\";\n\t\t\t\tcase 'Z': return \"10010000\";\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tstatic char DecodeData ( string str )\n\t\t{\n\t\t\tswitch (str)\n\t\t\t{\n\t\t\t\tcase \"00000\": return 'A';\n\t\t\t\tcase \"00001\": return 'B';\n\t\t\t\tcase \"00010\": return 'C';\n\t\t\t\tcase \"00011\": return 'D';\n\t\t\t\tcase \"00100\": return 'E';\n\t\t\t\tcase \"00101\": return 'F';\n\t\t\t\tcase \"00110\": return 'G';\n\t\t\t\tcase \"00111\": return 'H';\n\t\t\t\tcase \"01000\": return 'I';\n\t\t\t\tcase \"01001\": return 'J';\n\t\t\t\tcase \"01010\": return 'K';\n\t\t\t\tcase \"01011\": return 'L';\n\t\t\t\tcase \"01100\": return 'M';\n\t\t\t\tcase \"01101\": return 'N';\n\t\t\t\tcase \"01110\": return 'O';\n\t\t\t\tcase \"01111\": return 'P';\n\t\t\t\tcase \"10000\": return 'Q';\n\t\t\t\tcase \"10001\": return 'R';\n\t\t\t\tcase \"10010\": return 'S';\n\t\t\t\tcase \"10011\": return 'T';\n\t\t\t\tcase \"10100\": return 'U';\n\t\t\t\tcase \"10101\": return 'V';\n\t\t\t\tcase \"10110\": return 'W';\n\t\t\t\tcase \"10111\": return 'X';\n\t\t\t\tcase \"11000\": return 'Y';\n\t\t\t\tcase \"11001\": return 'Z';\n\t\t\t\tcase \"11010\": return ' ';\n\t\t\t\tcase \"11011\": return '.';\n\t\t\t\tcase \"11100\": return ',';\n\t\t\t\tcase \"11101\": return '-';\n\t\t\t\tcase \"11110\": return '\\'';\n\t\t\t\tcase \"11111\": return '?';\n\t\t\t}\n\t\t\treturn '0';\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static readonly Dictionary<char, string> dic = new Dictionary<char, string>()\n        {\n            {' ',\"101\" },\n            {'\\'',\"000000\" },\n            {',',\"000011\" },\n            {'-',\"10010001\" },\n            {'.',\"010001\" },\n            {'?',\"000001\" },\n            {'A',\"100101\" },\n            {'B',\"10011010\" },\n            {'C',\"0101\" },\n            {'D',\"0001\" },\n            {'E',\"110\" },\n            {'F',\"01001\" },\n            {'G',\"10011011\" },\n            {'H',\"010000\" },\n            {'I',\"0111\" },\n            {'J',\"10011000\" },\n            {'K',\"0110\" },\n            {'L',\"00100\" },\n            {'M',\"10011001\" },\n            {'N',\"10011110\" },\n            {'O',\"00101\" },\n            {'P',\"111\" },\n            {'Q',\"10011111\" },\n            {'R',\"1000\" },\n            {'S',\"00110\" },\n            {'T',\"00111\" },\n            {'U',\"10011100\" },\n            {'V',\"10011101\" },\n            {'W',\"000010\" },\n            {'X',\"10010010\" },\n            {'Y',\"10010011\" },\n            {'Z',\"10010000\" }\n        };\n\n        static readonly char[] ch = new char[]\n        {\n            'A','B','C','D','E','F','G','H','I','J','K','L','M',\n            'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',\n            ' ','.',',','-','\\'','?'\n        };\n\n        static void Main(string[] args)\n        {\n            StringBuilder sb = new StringBuilder();\n\n            string input;\n\n            while (!string.IsNullOrEmpty(input = Console.ReadLine()))\n            {\n                input = input.Trim();\n                StringBuilder temp = new StringBuilder();\n\n                for (int i = 0; i < input.Length; i++)\n                {\n                    temp.Append(dic[input[i]]);\n                }\n\n                string conv = temp.ToString();\n                int m = conv.Length % 5;\n\n                if (m != 0)\n                {\n                    for (int i = 0; i < 5 - m; i++) conv += \"0\";\n                }\n\n                for (int i = 0; i < conv.Length; i += 5)\n                {\n                    int idx = Convert.ToInt32(conv.Substring(i, 5), 2);\n                    sb.Append(ch[idx]);\n                }\n                sb.Append(\"\\n\");\n            }\n            Console.Write(sb);\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace AOJ0088\n{\n    class Program\n    {\n        private static readonly Dictionary<char, string> FirstMap = new Dictionary<char, string>\n            {\n                {' ', \"101\"},\n                {'\\'', \"000000\"},\n                {',', \"000011\"},\n                {'-', \"10010001\"},\n                {'.', \"010001\"},\n                {'?', \"000001\"},\n                {'A', \"100101\"},\n                {'B', \"10011010\"},\n                {'C', \"0101\"},\n                {'D', \"0001\"},\n                {'E', \"110\"},\n                {'F', \"01001\"},\n                {'G', \"10011011\"},\n                {'H', \"010000\"},\n                {'I', \"0111\"},\n                {'J', \"10011000\"},\n                {'K', \"0110\"},\n                {'L', \"00100\"},\n                {'M', \"10011001\"},\n                {'N', \"10011110\"},\n                {'O', \"00101\"},\n                {'P', \"111\"},\n                {'Q', \"10011111\"},\n                {'R', \"1000\"},\n                {'S', \"00110\"},\n                {'T', \"00111\"},\n                {'U', \"10011100\"},\n                {'V', \"10011101\"},\n                {'W', \"000010\"},\n                {'X', \"10010010\"},\n                {'Y', \"10010011\"},\n                {'Z', \"10010000\"}\n            };\n\n        private static readonly Dictionary<string, char> SecondMap = new Dictionary<string, char>\n            {\n                {\"00000\", 'A'},\n                {\"00001\", 'B'},\n                {\"00010\", 'C'},\n                {\"00011\", 'D'},\n                {\"00100\", 'E'},\n                {\"00101\", 'F'},\n                {\"00110\", 'G'},\n                {\"00111\", 'H'},\n                {\"01000\", 'I'},\n                {\"01001\", 'J'},\n                {\"01010\", 'K'},\n                {\"01011\", 'L'},\n                {\"01100\", 'M'},\n                {\"01101\", 'N'},\n                {\"01110\", 'O'},\n                {\"01111\", 'P'},\n                {\"10000\", 'Q'},\n                {\"10001\", 'R'},\n                {\"10010\", 'S'},\n                {\"10011\", 'T'},\n                {\"10100\", 'U'},\n                {\"10101\", 'V'},\n                {\"10110\", 'W'},\n                {\"10111\", 'X'},\n                {\"11000\", 'Y'},\n                {\"11001\", 'Z'},\n                {\"11010\", ' '},\n                {\"11011\", '.'},\n                {\"11100\", ','},\n                {\"11101\", '-'},\n                {\"11110\", '\\''},\n                {\"11111\", '?'},\n            };\n\n        static void Main()\n        {\n            foreach (var second in from line in ReadInputs()\n                                   select (from c in line\n                                           select FirstMap[c])\n                                       .Aggregate(\"\", (s, s1) => s + s1)\n                                   into first\n                                   select (from n in Enumerable.Range(0, (int) Math.Ceiling(first.Length/5.0))\n                                           let start = n*5\n                                           let length = Math.Min(5, first.Length - start)\n                                           let sub = first.Substring(start, length)\n                                           let padded = sub.PadRight(5, '0')\n                                           select SecondMap[padded])\n                                       .Aggregate(\"\", (s, c) => s + c))\n            {\n                Console.WriteLine(second);\n            }\n        }\n\n        private static IEnumerable<string> ReadInputs()\n        {\n            string line;\n            while ((line = Console.ReadLine()) != null)\n            {\n                yield return line;\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace AOJ0088\n{\n    class Program\n    {\n        private static readonly Dictionary<char, string> FirstMap = new Dictionary<char, string>\n            {\n                {' ', \"101\"},\n                {'\\'', \"000000\"},\n                {',', \"000011\"},\n                {'-', \"10010001\"},\n                {'.', \"010001\"},\n                {'?', \"000001\"},\n                {'A', \"100101\"},\n                {'B', \"10011010\"},\n                {'C', \"0101\"},\n                {'D', \"0001\"},\n                {'E', \"110\"},\n                {'F', \"01001\"},\n                {'G', \"10011011\"},\n                {'H', \"010000\"},\n                {'I', \"0111\"},\n                {'J', \"10011000\"},\n                {'K', \"0110\"},\n                {'L', \"00100\"},\n                {'M', \"10011001\"},\n                {'N', \"10011110\"},\n                {'O', \"00101\"},\n                {'P', \"111\"},\n                {'Q', \"10011111\"},\n                {'R', \"1000\"},\n                {'S', \"00110\"},\n                {'T', \"00111\"},\n                {'U', \"10011100\"},\n                {'V', \"10011101\"},\n                {'W', \"000010\"},\n                {'X', \"10010010\"},\n                {'Y', \"10010011\"},\n                {'Z', \"10010000\"}\n            };\n\n        private static readonly Dictionary<string, char> SecondMap = new Dictionary<string, char>\n            {\n                {\"00000\", 'A'},\n                {\"00001\", 'B'},\n                {\"00010\", 'C'},\n                {\"00011\", 'D'},\n                {\"00100\", 'E'},\n                {\"00101\", 'F'},\n                {\"00110\", 'G'},\n                {\"00111\", 'H'},\n                {\"01000\", 'I'},\n                {\"01001\", 'J'},\n                {\"01010\", 'K'},\n                {\"01011\", 'L'},\n                {\"01100\", 'M'},\n                {\"01101\", 'N'},\n                {\"01110\", 'O'},\n                {\"01111\", 'P'},\n                {\"10000\", 'Q'},\n                {\"10001\", 'R'},\n                {\"10010\", 'S'},\n                {\"10011\", 'T'},\n                {\"10100\", 'U'},\n                {\"10101\", 'V'},\n                {\"10110\", 'W'},\n                {\"10111\", 'X'},\n                {\"11000\", 'Y'},\n                {\"11001\", 'Z'},\n                {\"11010\", ' '},\n                {\"11011\", '.'},\n                {\"11100\", ','},\n                {\"11101\", '-'},\n                {\"11110\", '\\''},\n                {\"11111\", '?'},\n            };\n\n        static void Main()\n        {\n            foreach (var second in (from line in ReadInputs()\n                                    select (from c in line\n                                            select FirstMap[c])\n                                        .Aggregate(\"\", (s, s1) => s + s1)\n                                    into first\n                                    select (from n in Enumerable.Range(0, (int) Math.Ceiling(first.Length/5.0))\n                                            let start = n*5\n                                            let length = Math.Min(5, first.Length - start)\n                                            let sub = first.Substring(start, length)\n                                            let padded = String.Format(\"{0:D5}\", int.Parse(sub))\n                                            select SecondMap[padded])\n                                        .Aggregate(\"\", (s, c) => s + c)))\n            {\n                Console.WriteLine(second);\n            }\n        }\n\n        private static IEnumerable<string> ReadInputs()\n        {\n            string line;\n            while ((line = Console.ReadLine()) != null)\n            {\n                yield return line;\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Miscelleneous {\n   class Program {\n      static Dictionary<char,string> Encode0 = new Dictionary<char,string>() \n      { { ' ',\"101\" },{'\\'',\"000000\"},{',',\"000011\" },{'-',\"10010001\" },{'.',\"010001\" },{ '?',\"000001\"}\n      };\n      static void Main(string[] args) {\n         string[] alphaomega = { \"100101\",\"10011010\",\n         \"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n         \"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n         \"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"\n         };\n         for (int i=0;i<alphaomega.Length;i++) Encode0.Add((char)(i+65),alphaomega[i]);\n         StringBuilder sb = new StringBuilder();\n         List<char> Res = new List<char>();\n         \n         int j;\n         string s1;\n         int k;\n         while (true) {\n            string s = Console.ReadLine();\n            if (string.IsNullOrEmpty(s)) return;\n            s.Remove('\\n');\n            foreach (char c in s) sb.Append(Encode0[c]);\n            if (sb.Length%5!=0) sb.Append(new string('0',5-sb.Length%5));\n            string ss = sb.ToString();\n            for (j=0; 5*j<sb.Length; j++) { \n               s1=new string(ss.Skip(5*j).Take(5).ToArray());\n               k=Convert.ToInt32(s1,2);\n               Res.Add(Encode1(k));\n            }\n            Console.WriteLine(new string(Res.ToArray()));\n            Res.Clear();sb.Remove(0,sb.Length);\n         }\n      }\n      \n      static char[] Symbols1 = { ' ','.',',','-','\\'','?'};\n      static char Encode1(int h) {\n         return h<25 ? (char)(h+65) : Symbols1[h-26];\n      }\n   }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n \nnamespace aizu\n{\n    class OnlineJudge\n    {\n        static void Main()\n        {\n            var enc = new Dictionary<string, string> {\n                {\" \" , \"101\"     }, {\"'\" , \"000000\"  }, {\",\" , \"000011\"  }, {\"-\" , \"10010001\"},\n                {\".\" , \"010001\"  }, {\"?\" , \"000001\"  }, {\"A\" , \"100101\"  }, {\"B\" , \"10011010\"},\n                {\"C\" , \"0101\"    }, {\"D\" , \"0001\"    }, {\"E\" , \"110\"     }, {\"F\" , \"01001\"   },\n                {\"G\" , \"10011011\"}, {\"H\" , \"010000\"  }, {\"I\" , \"0111\"    }, {\"J\" , \"10011000\"},\n                {\"K\" , \"0110\"    }, {\"L\" , \"00100\"   }, {\"M\" , \"10011001\"}, {\"N\" , \"10011110\"},\n                {\"O\" , \"00101\"   }, {\"P\" , \"111\"     }, {\"Q\" , \"10011111\"}, {\"R\" , \"1000\"    },\n                {\"S\" , \"00110\"   }, {\"T\" , \"00111\"   }, {\"U\" , \"10011100\"}, {\"V\" , \"10011101\"},\n                {\"W\" , \"000010\"  }, {\"X\" , \"10010010\"}, {\"Y\" , \"10010011\"}, {\"Z\" , \"10010000\"}\n            };\n            var dec = new Dictionary<string, string> {\n                {\"00000\",\"A\"}, {\"00001\",\"B\"}, {\"00010\",\"C\"}, {\"00011\",\"D\"},\n                {\"00100\",\"E\"}, {\"00101\",\"F\"}, {\"00110\",\"G\"}, {\"00111\",\"H\"},\n                {\"01000\",\"I\"}, {\"01001\",\"J\"}, {\"01010\",\"K\"}, {\"01011\",\"L\"},\n                {\"01100\",\"M\"}, {\"01101\",\"N\"}, {\"01110\",\"O\"}, {\"01111\",\"P\"},\n                {\"10000\",\"Q\"}, {\"10001\",\"R\"}, {\"10010\",\"S\"}, {\"10011\",\"T\"},\n                {\"10100\",\"U\"}, {\"10101\",\"V\"}, {\"10110\",\"W\"}, {\"10111\",\"X\"},\n                {\"11000\",\"Y\"}, {\"11001\",\"Z\"}, {\"11010\",\" \"}, {\"11011\",\".\"},\n                {\"11100\",\",\"}, {\"11101\",\"-\"}, {\"11110\",\"'\"}, {\"11111\",\"?\"}\n            };\n            string input;\n            while((input = Console.ReadLine()) != null) {\n                var val = string.Join(\"\", input.Select(p => enc[p.ToString()]).ToArray());\n                if(val.Length % 5 != 0) {\n                    val += new string('0', 5 - (val.Length % 5));\n                }\n                Console.WriteLine(string.Join(\"\", Enumerable.Range(0, val.Length / 5).Select(p => val.Substring(p * 5, 5)).Select(p => dec[p]).ToArray()));\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Miscelleneous {\n   class Program {\n      static Dictionary<char,string> Encode0 = new Dictionary<char,string>() \n      { { ' ',\"101\" },{'\\'',\"000000\"},{',',\"000011\" },{'-',\"10010001\" },{'.',\"010001\" },{ '?',\"000001\"}\n      };\n      static void Main(string[] args) {\n         string[] alphaomega = { \"100101\",\"10011010\",\n         \"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n         \"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n         \"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"\n         };\n         for (int i=0;i<alphaomega.Length;i++) Encode0.Add((char)(i+65),alphaomega[i]);\n         StringBuilder sb = new StringBuilder();\n         List<char> Res = new List<char>();\n         \n         int j;\n         string s1;\n         int k;\n         while (true) {\n            string s = Console.ReadLine();\n            if (string.IsNullOrEmpty(s)) return;\n            s.Remove('\\n');\n            foreach (char c in s) sb.Append(Encode0[c]);\n            if (sb.Length%5!=0) sb.Append(new string('0',5-sb.Length%5));\n            string ss = sb.ToString();\n            for (j=0; 5*j<sb.Length; j++) { \n               s1=new string(ss.Skip(5*j).Take(5).ToArray());\n               k=Convert.ToInt32(s1,2);\n               Res.Add(Encode1(k));\n            }\n            Console.WriteLine(new string(Res.ToArray()));\n            Res.Clear();sb.Remove(0,sb.Length);\n         }\n      }\n      \n      static char[] Symbols1 = { ' ','.',',','-','\\'','?'};\n      static char Encode1(int h) {\n         return h<=25 ? (char)(h+65) : Symbols1[h-26];\n      }\n   }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\n\nnamespace AOJ.Volume0\n{\n    public class TheCodeDoctorLoved\n    {\n        public static int Main()\n        {\n            var toBit = new Dictionary<char, string>()\n            {\n                { ' ', \"101\" },{ '\\'', \"000000\" },{ ',', \"000011\" },{ '-', \"10010001\" },\n                { '.',\"010001\" },{'?',\"000001\" },{'A',\"100101\" },{'B',\"10011010\" },\n                { 'C',\"0101\" },{'D',\"0001\" },{'E',\"110\" },{'F',\"01001\" },\n                { 'G',\"10011011\" },{'H',\"010000\" },{'I',\"0111\" },{'J',\"10011000\" },\n                { 'K',\"0110\" },{'L',\"00100\" },{'M',\"10011001\" },{'N',\"10011110\" },\n                { 'O',\"00101\" },{'P',\"111\" },{'Q',\"10011111\" },{'R',\"1000\" },\n                { 'S',\"00110\" },{'T',\"00111\" },{'U',\"10011100\" },{'V',\"10011101\" },\n                { 'W',\"000010\" },{'X',\"10010010\" },{'Y',\"10010011\" },{'Z',\"10010000\" }\n             };\n\n            var toChar = new Dictionary<string, char>()\n            {\n                { \"00000\",'A' },{\"00001\",'B' },{\"00010\",'C' },{\"00011\",'D' },{\"00100\",'E' },\n                { \"00101\",'F' },{\"00110\",'G' },{\"00111\",'H' },{\"01000\",'I' },{\"01001\",'J' },\n                { \"01010\",'K' },{\"01011\",'L' },{\"01100\",'M' },{\"01101\",'N' },{\"01110\",'O' },\n                { \"01111\",'P' },{\"10000\",'Q' },{\"10001\",'R' },{\"10010\",'S' },{\"10011\",'T' },\n                { \"10100\",'U' },{\"10101\",'V' },{\"10110\",'W' },{\"10111\",'X' },{\"11000\",'Y' },\n                { \"11001\",'Z' },{\"11010\",' ' },{\"11011\",'.' },{\"11100\",',' },{\"11101\",'-' },\n                { \"11110\",'\\'' },{\"11111\",'?' }\n            };\n\n            while (true)\n            {\n                var input = Console.ReadLine();\n                if (string.IsNullOrEmpty(input)) { break; }\n                string bit = \"\";\n                foreach (var c in input) { bit += toBit[c]; }\n                // 5????????????????????£?????????\n                string output = \"\";\n                while (bit.Length > 0)\n                {\n                    string tmp = bit.Length >= 5 ? bit.Substring(0, 5) : bit;\n                    // 5????????\\????????´??????'0'????£????\n                    if (tmp.Length < 5) { tmp = tmp.PadRight(5, '0'); }\n                    output += toChar[tmp];\n                    bit = bit.Length >= 5 ? bit.Substring(5) : \"\";\n                }\n\n                Console.WriteLine(output);\n            }\n\n            return 0;\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace AOJ0088\n{\n    class Program\n    {\n        private static readonly Dictionary<char, string> FirstMap = new Dictionary<char, string>\n            {\n                {' ', \"101\"},\n                {'\\'', \"000000\"},\n                {',', \"000011\"},\n                {'-', \"10010001\"},\n                {'.', \"010001\"},\n                {'?', \"000001\"},\n                {'A', \"100101\"},\n                {'B', \"10011010\"},\n                {'C', \"0101\"},\n                {'D', \"0001\"},\n                {'E', \"110\"},\n                {'F', \"01001\"},\n                {'G', \"10011011\"},\n                {'H', \"010000\"},\n                {'I', \"0111\"},\n                {'J', \"10011000\"},\n                {'K', \"0110\"},\n                {'L', \"00100\"},\n                {'M', \"10011001\"},\n                {'N', \"10011110\"},\n                {'O', \"00101\"},\n                {'P', \"111\"},\n                {'Q', \"10011111\"},\n                {'R', \"1000\"},\n                {'S', \"00110\"},\n                {'T', \"00111\"},\n                {'U', \"10011100\"},\n                {'V', \"10011101\"},\n                {'W', \"000010\"},\n                {'X', \"10010010\"},\n                {'Y', \"10010011\"},\n                {'Z', \"10010000\"}\n            };\n\n        private static readonly Dictionary<string, char> SecondMap = new Dictionary<string, char>\n            {\n                {\"00000\", 'A'},\n                {\"00001\", 'B'},\n                {\"00010\", 'C'},\n                {\"00011\", 'D'},\n                {\"00100\", 'E'},\n                {\"00101\", 'F'},\n                {\"00110\", 'G'},\n                {\"00111\", 'H'},\n                {\"01000\", 'I'},\n                {\"01001\", 'J'},\n                {\"01010\", 'K'},\n                {\"01011\", 'L'},\n                {\"01100\", 'M'},\n                {\"01101\", 'N'},\n                {\"01110\", 'O'},\n                {\"01111\", 'P'},\n                {\"10000\", 'Q'},\n                {\"10001\", 'R'},\n                {\"10010\", 'S'},\n                {\"10011\", 'T'},\n                {\"10100\", 'U'},\n                {\"10101\", 'V'},\n                {\"10110\", 'W'},\n                {\"10111\", 'X'},\n                {\"11000\", 'Y'},\n                {\"11001\", 'Z'},\n                {\"11010\", ' '},\n                {\"11011\", '.'},\n                {\"11100\", ','},\n                {\"11101\", '-'},\n                {\"11110\", '\\''},\n                {\"11111\", '?'},\n            };\n\n        static void Main()\n        {\n            foreach (var second in (from line in ReadInputs()\n                                    select (from c in line\n                                            select FirstMap[c])\n                                        .Aggregate(\"\", (s, s1) => s + s1)\n                                    into first\n                                    select (from n in Enumerable.Range(0, (int) Math.Ceiling(first.Length/5.0))\n                                            let start = n*5\n                                            let length = Math.Min(5, first.Length - start)\n                                            let sub = first.Substring(start, length)\n                                            let padded = sub.PadRight(5, '0')\n                                            select SecondMap[padded])\n                                        .Aggregate(\"\", (s, c) => s + c)))\n            {\n                Console.WriteLine(second);\n            }\n        }\n\n        private static IEnumerable<string> ReadInputs()\n        {\n            string line;\n            while ((line = Console.ReadLine()) != null)\n            {\n                yield return line;\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Miscelleneous {\n   class Program {\n      static Dictionary<char,string> Encode0 = new Dictionary<char,string>() \n      { { ' ',\"101\" },{'\\'',\"000000\"},{',',\"000011\" },{'-',\"10010001\" },{'.',\"010001\" }\n      };\n      static void Main(string[] args) {\n         string[] alphaomega = { \"100101\",\"10011010\",\n         \"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n         \"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n         \"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"\n         };\n         for (int i=0;i<alphaomega.Length;i++) Encode0.Add((char)(i+65),alphaomega[i]);\n         StringBuilder sb = new StringBuilder();\n         List<char> Res = new List<char>();\n         \n         int j;\n         string s1;\n         int k;\n         while (true) {\n            string s = Console.ReadLine();\n            if (string.IsNullOrEmpty(s)) return;\n            foreach (char c in s) sb.Append(Encode0[c]);\n            if (sb.Length%5!=0) sb.Append(new string('0',5-sb.Length%5));\n            string ss = sb.ToString();\n            for (j=0; 5*j<sb.Length; j++) { \n               s1=new string(ss.Skip(5*j).Take(5).ToArray());\n               k=Convert.ToInt32(s1,2);\n               Res.Add(Encode1(k));\n            }\n            Console.WriteLine(new string(Res.ToArray()));\n            Res.Clear();sb.Remove(0,sb.Length);\n         }\n      }\n      \n      static char[] Symbols1 = { ' ','.',',','-','\\'','?'};\n      static char Encode1(int h) {\n         return h<25 ? (char)(h+65) : Symbols1[h-26];\n      }\n   }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Miscelleneous {\n   class Program {\n      static Dictionary<char,string> Encode0 = new Dictionary<char,string>() \n      { { ' ',\"101\" },{'\\'',\"000000\"},{',',\"000011\" },{'-',\"10010001\" },{'.',\"010001\" },{ '?',\"000001\"}\n      };\n      static void Main(string[] args) {\n         string[] alphaomega = { \"100101\",\"10011010\",\n         \"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\n         \"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\n         \"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"\n         };\n         for (int i=0;i<alphaomega.Length;i++) Encode0.Add((char)(i+65),alphaomega[i]);\n         StringBuilder sb = new StringBuilder();\n         List<char> Res = new List<char>();\n         \n         int j;\n         string s1;\n         int k;\n         while (true) {\n            string s = Console.ReadLine();\n            if (string.IsNullOrEmpty(s)) return;\n            foreach (char c in s) sb.Append(Encode0[c]);\n            if (sb.Length%5!=0) sb.Append(new string('0',5-sb.Length%5));\n            string ss = sb.ToString();\n            for (j=0; 5*j<sb.Length; j++) { \n               s1=new string(ss.Skip(5*j).Take(5).ToArray());\n               k=Convert.ToInt32(s1,2);\n               Res.Add(Encode1(k));\n            }\n            Console.WriteLine(new string(Res.ToArray()));\n            Res.Clear();sb.Remove(0,sb.Length);\n         }\n      }\n      \n      static char[] Symbols1 = { ' ','.',',','-','\\'','?'};\n      static char Encode1(int h) {\n         return h<25 ? (char)(h+65) : Symbols1[h-26];\n      }\n   }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n \nnamespace aizu\n{\n    class OnlineJudge\n    {\n        static void Main()\n        {\n            var enc = new Dictionary<char, string> {\n                {' ' , \"101\"     }, {'\\'', \"000000\"  }, {',' , \"000011\"  }, {'-' , \"10010001\"},\n                {'.' , \"010001\"  }, {'?' , \"000001\"  }, {'A' , \"100101\"  }, {'B' , \"10011010\"},\n                {'C' , \"0101\"    }, {'D' , \"0001\"    }, {'E' , \"110\"     }, {'F' , \"01001\"   },\n                {'G' , \"10011011\"}, {'H' , \"010000\"  }, {'I' , \"0111\"    }, {'J' , \"10011000\"},\n                {'K' , \"0110\"    }, {'L' , \"00100\"   }, {'M' , \"10011001\"}, {'N' , \"10011110\"},\n                {'O' , \"00101\"   }, {'P' , \"111\"     }, {'Q' , \"10011111\"}, {'R' , \"1000\"    },\n                {'S' , \"00110\"   }, {'T' , \"00111\"   }, {'U' , \"10011100\"}, {'V' , \"10011101\"},\n                {'W' , \"000010\"  }, {'X' , \"10010010\"}, {'Y' , \"10010011\"}, {'Z' , \"10010000\"}\n            };\n            var dec = new Dictionary<string, string> {\n                {\"00000\",\"A\"}, {\"00001\",\"B\"}, {\"00010\",\"C\"}, {\"00011\",\"D\"},\n                {\"00100\",\"E\"}, {\"00101\",\"F\"}, {\"00110\",\"G\"}, {\"00111\",\"H\"},\n                {\"01000\",\"I\"}, {\"01001\",\"J\"}, {\"01010\",\"K\"}, {\"01011\",\"L\"},\n                {\"01100\",\"M\"}, {\"01101\",\"N\"}, {\"01110\",\"O\"}, {\"01111\",\"P\"},\n                {\"10000\",\"Q\"}, {\"10001\",\"R\"}, {\"10010\",\"S\"}, {\"10011\",\"T\"},\n                {\"10100\",\"U\"}, {\"10101\",\"V\"}, {\"10110\",\"W\"}, {\"10111\",\"X\"},\n                {\"11000\",\"Y\"}, {\"11001\",\"Z\"}, {\"11010\",\" \"}, {\"11011\",\".\"},\n                {\"11100\",\",\"}, {\"11101\",\"-\"}, {\"11110\",\"'\"}, {\"11111\",\"?\"}\n            };\n            string input;\n            while((input = Console.ReadLine()) != null) {\n                string val = string.Empty;\n                foreach(var c in input) {\n                    val += enc[c];\n                }\n                val += new string('0', 5 - (val.Length % 5));\n                Console.WriteLine(string.Join(\"\", Enumerable.Range(0, val.Length / 5).Select(p => val.Substring(p * 5, 5)).Select(p => dec[p]).ToArray()));\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nclass Program\n{\n    void Calc()\n    {\n        var dic = new Dictionary<char, string>\n        {\n{' ', \"101\"},\n{'\\'', \"000000\"},\n{',', \"000011\"},\n{'-', \"10010001\"},\n{'.', \"010001\"},\n{'?', \"000001\"},\n{'A', \"100101\"},\n{'B', \"10011010\"},\n{'C', \"0101\"},\n{'D', \"0001\"},\n{'E', \"110\"},\n{'F', \"01001\"},\n{'G', \"10011011\"},\n{'H', \"010000\"},\n{'I', \"0111\"},\n{'J', \"10011000\"},\n{'K', \"0110\"},\n{'L', \"00100\"},\n{'M', \"10011001\"},\n{'N', \"10011110\"},\n{'O', \"00101\"},\n{'P', \"111\"},\n{'Q', \"10011111\"},\n{'R', \"1000\"},\n{'S', \"00110\"},\n{'T', \"00111\"},\n{'U', \"10011100\"},\n{'V', \"10011101\"},\n{'W', \"000010\"},\n{'X', \"10010010\"},\n{'Y', \"10010011\"},\n{'Z', \"10010000\"},\n        };\n\n        var dic2 = new Dictionary<string, char>\n        {\n{\"00000\", 'A'},\n{\"00001\", 'B'},\n{\"00010\", 'C'},\n{\"00011\", 'D'},\n{\"00100\", 'E'},\n{\"00101\", 'F'},\n{\"00110\", 'G'},\n{\"00111\", 'H'},\n{\"01000\", 'I'},\n{\"01001\", 'J'},\n{\"01010\", 'K'},\n{\"01011\", 'L'},\n{\"01100\", 'M'},\n{\"01101\", 'N'},\n{\"01110\", 'O'},\n{\"01111\", 'P'},\n{\"10000\", 'Q'},\n{\"10001\", 'R'},\n{\"10010\", 'S'},\n{\"10011\", 'T'},\n{\"10100\", 'U'},\n{\"10101\", 'V'},\n{\"10110\", 'W'},\n{\"10111\", 'X'},\n{\"11000\", 'Y'},\n{\"11001\", 'Z'},\n{\"11010\", ' '},\n{\"11011\", '.'},\n{\"11100\", ','},\n{\"11101\", '-'},\n{\"11110\", '\\''},\n{\"11111\", '?'},\n        };\n        while (true)\n        {\n            var str = Console.ReadLine();\n            if (str == \"\") break;\n            var next = str\n                .SelectMany(x => dic[x])\n                .Select((x, i) => new { x, i })\n                .GroupBy(x => x.i / 5)\n                .Select(x => string.Concat(x.Select(y => y.x)))\n                .ToArray();\n            if (next.Length != 0)\n                next[next.Length - 1] = next.Last().PadLeft(5, '0');\n            Console.WriteLine(string.Concat(next.Select(x => dic2[x])));\n        }\n    }\n\n    static void Main()\n    {\n        new Program().Calc();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nclass Program\n{\n    void Calc()\n    {\n        var dic = new Dictionary<char, string>\n        {\n{' ', \"101\"},\n{'\\'', \"000000\"},\n{',', \"000011\"},\n{'-', \"10010001\"},\n{'.', \"010001\"},\n{'?', \"000001\"},\n{'A', \"100101\"},\n{'B', \"10011010\"},\n{'C', \"0101\"},\n{'D', \"0001\"},\n{'E', \"110\"},\n{'F', \"01001\"},\n{'G', \"10011011\"},\n{'H', \"010000\"},\n{'I', \"0111\"},\n{'J', \"10011000\"},\n{'K', \"0110\"},\n{'L', \"00100\"},\n{'M', \"10011001\"},\n{'N', \"10011110\"},\n{'O', \"00101\"},\n{'P', \"111\"},\n{'Q', \"10011111\"},\n{'R', \"1000\"},\n{'S', \"00110\"},\n{'T', \"00111\"},\n{'U', \"10011100\"},\n{'V', \"10011101\"},\n{'W', \"000010\"},\n{'X', \"10010010\"},\n{'Y', \"10010011\"},\n{'Z', \"10010000\"},\n        };\n\n        var dic2 = new Dictionary<string, char>\n        {\n{\"00000\", 'A'},\n{\"00001\", 'B'},\n{\"00010\", 'C'},\n{\"00011\", 'D'},\n{\"00100\", 'E'},\n{\"00101\", 'F'},\n{\"00110\", 'G'},\n{\"00111\", 'H'},\n{\"01000\", 'I'},\n{\"01001\", 'J'},\n{\"01010\", 'K'},\n{\"01011\", 'L'},\n{\"01100\", 'M'},\n{\"01101\", 'N'},\n{\"01110\", 'O'},\n{\"01111\", 'P'},\n{\"10000\", 'Q'},\n{\"10001\", 'R'},\n{\"10010\", 'S'},\n{\"10011\", 'T'},\n{\"10100\", 'U'},\n{\"10101\", 'V'},\n{\"10110\", 'W'},\n{\"10111\", 'X'},\n{\"11000\", 'Y'},\n{\"11001\", 'Z'},\n{\"11010\", ' '},\n{\"11011\", '.'},\n{\"11100\", ','},\n{\"11101\", '-'},\n{\"11110\", '\\''},\n{\"11111\", '?'},\n        };\n        while (true)\n        {\n            string str = Console.ReadLine();\n            string input;\n            while ((input = Console.ReadLine()) != \"\") str += \" \" + input;\n            var next = str\n                .SelectMany(x => dic[x])\n                .Select((x, i) => new { x, i })\n                .GroupBy(x => x.i / 5)\n                .Select(x => string.Concat(x.Select(y => y.x)))\n                .ToArray();\n            if (next.Length != 0)\n                next[next.Length - 1] = next.Last().PadLeft(5, '0');\n            Console.WriteLine(string.Concat(next.Select(x => dic2[x])));\n        }\n    }\n\n    static void Main()\n    {\n        new Program().Calc();\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass PaizaSample\n{\n\n    static void Main()\n    {\n        Dictionary<char, string> hyo1 = new Dictionary<char, string>()\n        {\n            {' ', \"101\"},{'\\'', \"000000\"},{',', \"000011\"},{'-', \"10010001\"},{'.', \"010001\"},{'?', \"000001\"},\n            {'A', \"100101\"},{'B', \"10011010\"},{'C', \"0101\"},{'D', \"0001\"},{'E', \"110\"},{'F', \"01001\"},\n            {'G', \"10011011\"},{'H', \"010000\"},{'I', \"0111\"},{'J', \"10011000\"},{'K', \"0110\"},{'L', \"00100\"},\n            {'M', \"10011001\"},{'N', \"10011110\"},{'O', \"00101\"},{'P', \"111\"},{'Q', \"10011111\"},{'R', \"1000\"},\n            {'S', \"00110\"},{'T', \"00111\"},{'U', \"10011100\"},{'V', \"10011101\"},{'W', \"000010\"},{'X', \"10010010\"},\n            {'Y', \"10010011\"},{'Z', \"10010000\"}\n        };\n\n        Dictionary<string, char> hyo2 = new Dictionary<string, char>()\n        {\n            {\"00000\", 'A'},{\"00001\", 'B'},{\"00010\", 'C'},{\"00011\", 'D'},{\"00100\", 'E'},{\"00101\", 'F'},{\"00110\", 'G'},\n            {\"00111\", 'H'},{\"01000\", 'I'},{\"01001\", 'J'},{\"01010\", 'K'},{\"01011\", 'L'},{\"01100\", 'M'},{\"01101\", 'N'},\n            {\"01110\", 'O'},{\"01111\", 'P'},{\"10000\", 'Q'},{\"10001\", 'R'},{\"10010\", 'S'},{\"10011\", 'T'},{\"10100\", 'U'},\n            {\"10101\", 'V'},{\"10110\", 'W'},{\"10111\", 'X'},{\"11000\", 'Y'},{\"11001\", 'Z'},{\"11010\", ' '},{\"11011\", '.'},\n            {\"11100\", ','},{\"11101\", '-'},{\"11110\", '\\''},{\"11111\", '?'}\n        };\n\n        string input;\n        while ((input = Console.ReadLine()) != null)\n        {\n            string crypt = \"\";\n            foreach (char c in input)\n            {\n                crypt += hyo1[c];\n            }\n\n            int length = crypt.Length;\n            if (length % 5 != 0)\n            {\n                for (int i = 0; i < 5 - length % 5; i++)\n                {\n                    crypt += \"0\";\n                }\n            }\n\n            for (int i = 0; i < crypt.Length / 5; i++)\n            {\n\n                string sub = crypt.Substring(i * 5, 5);\n                //Console.WriteLine(sub);\n                //Console.WriteLine(hyo2[sub]);\n                Console.Write(hyo2[sub]);\n            }\n            Console.WriteLine();\n        }\n       // Console.ReadKey();\n\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace AOJ\n{\n\tclass Program\n\t{\n\t\tstatic void Main(string[] args)\n\t\t{\n\t\t\tvar encode = new Dictionary<string, string>()\n\t\t\t{\n\t\t\t\t{ \" \",     \"101\" }, { \"'\",  \"000000\" }, { \",\",   \"000011\" }, { \"-\", \"10010001\" },\n\t\t\t\t{ \".\",  \"010001\" }, { \"?\",  \"000001\" }, { \"A\",   \"100101\" }, { \"B\", \"10011010\" },\n\t\t\t\t{ \"C\",    \"0101\" }, { \"D\",    \"0001\" }, { \"E\",      \"110\" }, { \"F\",    \"01001\" },\n\t\t\t\t{ \"G\",\"10011011\" },{ \"H\",   \"010000\" }, { \"I\",     \"0111\" }, { \"J\", \"10011000\" },\n\t\t\t\t{ \"K\",    \"0110\" }, { \"L\",   \"00100\" }, { \"M\", \"10011001\" }, { \"N\", \"10011110\" },\n\t\t\t\t{ \"O\",   \"00101\" }, { \"P\",     \"111\" }, { \"Q\", \"10011111\" }, { \"R\",     \"1000\" },\n\t\t\t\t{ \"S\",   \"00110\" }, { \"T\",   \"00111\" }, { \"U\", \"10011100\" }, { \"V\", \"10011101\" },\n\t\t\t\t{ \"W\",  \"000010\" }, { \"X\",\"10010010\" }, { \"Y\", \"10010011\" }, { \"Z\", \"10010000\" }\n\t\t\t};\n\t\t\tvar decode = new Dictionary<string, string>()\n\t\t\t{\n\t\t\t\t{ \"00000\", \"A\" }, { \"00001\", \"B\" }, { \"00010\", \"C\" }, { \"00011\", \"D\" },\n\t\t\t\t{ \"00100\", \"E\" }, { \"00101\", \"F\" }, { \"00110\", \"G\" }, { \"00111\", \"H\" },\n\t\t\t\t{ \"01000\", \"I\" }, { \"01001\", \"J\" }, { \"01010\", \"K\" }, { \"01011\", \"L\" },\n\t\t\t\t{ \"01100\", \"M\" }, { \"01101\", \"N\" }, { \"01110\", \"O\" }, { \"01111\", \"P\" },\n\t\t\t\t{ \"10000\", \"Q\" }, { \"10001\", \"R\" }, { \"10010\", \"S\" }, { \"10011\", \"T\" },\n\t\t\t\t{ \"10100\", \"U\" }, { \"10101\", \"V\" }, { \"10110\", \"W\" }, { \"10111\", \"X\" },\n\t\t\t\t{ \"11000\", \"Y\" }, { \"11001\", \"Z\" }, { \"11010\", \" \" }, { \"11011\", \".\" },\n\t\t\t\t{ \"11100\", \",\" }, { \"11101\", \"-\" }, { \"11110\", \"'\" }, { \"11111\", \"?\" },\n\t\t\t};\n\n\t\t\tvar s = \"\";\n\t\t\twhile ((s = Console.ReadLine()) != null)\n\t\t\t{\n\t\t\t\tvar encoded = string.Join(\"\", s.Select(c => encode[c.ToString()]).ToArray());\n\t\t\t\tif (encoded.Length % 5 != 0)\n\t\t\t\t\tencoded += new string(Enumerable.Repeat('0', (5 - (encoded.Length % 5))).ToArray());\n\t\t\t\tvar splited = new List<string>();\n\t\t\t\tint index = 0;\n\t\t\t\twhile (index + 5 <= encoded.Length)\n\t\t\t\t{\n\t\t\t\t\tsplited.Add(encoded.Substring(index, 5));\n\t\t\t\t\tindex += 5;\n\t\t\t\t}\n\t\t\t\tvar decoded = string.Join(\"\", splited.Select(c => decode[c]).ToArray());\n\t\t\t\tConsole.WriteLine(decoded);\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static readonly Dictionary<char, string> dic = new Dictionary<char, string>()\n        {\n            {' ',\"101\" },\n            {'\\'',\"000000\" },\n            {',',\"000011\" },\n            {'-',\"10010001\" },\n            {'.',\"010001\" },\n            {'?',\"000001\" },\n            {'A',\"100101\" },\n            {'B',\"10011010\" },\n            {'C',\"0101\" },\n            {'D',\"0001\" },\n            {'E',\"110\" },\n            {'F',\"01001\" },\n            {'G',\"10011011\" },\n            {'H',\"010000\" },\n            {'I',\"0111\" },\n            {'J',\"10011000\" },\n            {'K',\"0110\" },\n            {'L',\"00100\" },\n            {'M',\"10011001\" },\n            {'N',\"10011110\" },\n            {'O',\"00101\" },\n            {'P',\"111\" },\n            {'Q',\"10011111\" },\n            {'R',\"1000\" },\n            {'S',\"00110\" },\n            {'T',\"00111\" },\n            {'U',\"10011100\" },\n            {'V',\"10011101\" },\n            {'W',\"000010\" },\n            {'X',\"10010010\" },\n            {'Y',\"10010011\" },\n            {'Z',\"10010000\" }\n        };\n\n        static readonly char[] ch = new char[]\n        {\n            'A','B','C','D','E','F','G','H','I','J','K','L','M',\n            'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',\n            ' ','.',',','-','\\'','?'\n        };\n\n        static void Main(string[] args)\n        {\n            string input;\n\n            while (!string.IsNullOrEmpty(input = Console.ReadLine()))\n            {\n                StringBuilder sb = new StringBuilder();\n                StringBuilder temp = new StringBuilder();\n\n                for (int i = 0; i < input.Length; i++)\n                {\n                    temp.Append(dic[input[i]]);\n                }\n\n                string conv = temp.ToString();\n                int m = conv.Length % 5;\n\n                if (m != 0)\n                {\n                    for (int i = 0; i < 5 - m; i++) conv += \"0\";\n                }\n\n                for (int i = 0; i < conv.Length; i += 5)\n                {\n                    string sub = conv.Substring(i, 5);\n                    int idx = Convert.ToInt32(sub, 2);\n                    sb.Append(ch[idx]);\n                }\n                Console.WriteLine(sb);\n            }\n        }\n    }\n}"
  },
  {
    "language": "C#",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nclass Program\n{\n    void Calc()\n    {\n        var dic = new Dictionary<char, string>\n        {\n{' ', \"101\"},\n{'\\'', \"000000\"},\n{',', \"000011\"},\n{'-', \"10010001\"},\n{'.', \"010001\"},\n{'?', \"000001\"},\n{'A', \"100101\"},\n{'B', \"10011010\"},\n{'C', \"0101\"},\n{'D', \"0001\"},\n{'E', \"110\"},\n{'F', \"01001\"},\n{'G', \"10011011\"},\n{'H', \"010000\"},\n{'I', \"0111\"},\n{'J', \"10011000\"},\n{'K', \"0110\"},\n{'L', \"00100\"},\n{'M', \"10011001\"},\n{'N', \"10011110\"},\n{'O', \"00101\"},\n{'P', \"111\"},\n{'Q', \"10011111\"},\n{'R', \"1000\"},\n{'S', \"00110\"},\n{'T', \"00111\"},\n{'U', \"10011100\"},\n{'V', \"10011101\"},\n{'W', \"000010\"},\n{'X', \"10010010\"},\n{'Y', \"10010011\"},\n{'Z', \"10010000\"},\n        };\n\n        var dic2 = new Dictionary<string, char>\n        {\n{\"11010\", ' '},\n{\"11110\", '\\''},\n{\"00000\", 'A'},\n{\"00001\", 'B'},\n{\"00010\", 'C'},\n{\"00011\", 'D'},\n{\"00100\", 'E'},\n{\"00101\", 'F'},\n{\"00110\", 'G'},\n{\"00111\", 'H'},\n{\"01000\", 'I'},\n{\"01001\", 'J'},\n{\"01010\", 'K'},\n{\"01011\", 'L'},\n{\"01100\", 'M'},\n{\"01101\", 'N'},\n{\"01110\", 'O'},\n{\"01111\", 'P'},\n{\"10000\", 'Q'},\n{\"10001\", 'R'},\n{\"10010\", 'S'},\n{\"10011\", 'T'},\n{\"10100\", 'U'},\n{\"10101\", 'V'},\n{\"10110\", 'W'},\n{\"10111\", 'X'},\n{\"11000\", 'Y'},\n{\"11001\", 'Z'},\n{\"11011\", '.'},\n{\"11100\", ','},\n{\"11101\", '-'},\n{\"11111\", '?'},\n        };\n\n        var str = Console.ReadLine();\n        var conv = string.Concat(str.Select(x => dic[x]));\n        var next = conv.Select((x, i) => new { x, i })\n            .GroupBy(x => x.i / 5)\n            .Select(x => string.Concat(x.Select(y => y.x)))\n            .ToArray();\n        next[next.Length - 1] += string.Concat(Enumerable.Repeat('0', 5 - next[next.Length - 1].Length));\n        Console.WriteLine(string.Concat(next.Select(x => dic2[x])));\n    }\n\n    static void Main()\n    {\n        new Program().Calc();\n    }\n}"
  },
  {
    "language": "JavaScript",
    "code": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar obj={};\nobj[\" \"]=\"101\";\nobj[\"'\"]=\"000000\";\nobj[\",\"]=\"000011\";\nobj[\"-\"]=\"10010001\";\nobj[\".\"]=\"010001\";\nobj[\"?\"]=\"000001\";\nobj[\"A\"]=\"100101\";\nobj[\"B\"]=\"10011010\";\nobj[\"C\"]=\"0101\";\nobj[\"D\"]=\"0001\";\nobj[\"E\"]=\"110\";\nobj[\"F\"]=\"01001\";\nobj[\"G\"]=\"10011011\";\nobj[\"H\"]=\"010000\";\nobj[\"I\"]=\"0111\";\nobj[\"J\"]=\"10011000\";\nobj[\"K\"]=\"0110\";\nobj[\"L\"]=\"00100\";\nobj[\"M\"]=\"10011001\";\nobj[\"N\"]=\"10011110\";\nobj[\"O\"]=\"00101\";\nobj[\"P\"]=\"111\";\nobj[\"Q\"]=\"10011111\";\nobj[\"R\"]=\"1000\";\nobj[\"S\"]=\"00110\";\nobj[\"T\"]=\"00111\";\nobj[\"U\"]=\"10011100\";\nobj[\"V\"]=\"10011101\";\nobj[\"W\"]=\"000010\";\nobj[\"X\"]=\"10010010\";\nobj[\"Y\"]=\"10010011\";\nobj[\"Z\"]=\"10010000\";\n\nobj[\"00000\"]=\"A\";\nobj[\"00001\"]=\"B\";\nobj[\"00010\"]=\"C\";\nobj[\"00011\"]=\"D\";\nobj[\"00100\"]=\"E\";\nobj[\"00101\"]=\"F\";\nobj[\"00110\"]=\"G\";\nobj[\"00111\"]=\"H\";\nobj[\"01000\"]=\"I\";\nobj[\"01001\"]=\"J\";\nobj[\"01010\"]=\"K\";\nobj[\"01011\"]=\"L\";\nobj[\"01100\"]=\"M\";\nobj[\"01101\"]=\"N\";\nobj[\"01110\"]=\"O\";\nobj[\"01111\"]=\"P\";\nobj[\"10000\"]=\"Q\";\nobj[\"10001\"]=\"R\";\nobj[\"10010\"]=\"S\";\nobj[\"10011\"]=\"T\";\nobj[\"10100\"]=\"U\";\nobj[\"10101\"]=\"V\";\nobj[\"10110\"]=\"W\";\nobj[\"10111\"]=\"X\";\nobj[\"11000\"]=\"Y\";\nobj[\"11001\"]=\"Z\";\nobj[\"11010\"]=\" \";\nobj[\"11011\"]=\".\";\nobj[\"11100\"]=\",\";\nobj[\"11101\"]=\"-\";\nobj[\"11110\"]=\"'\";\nobj[\"11111\"]=\"?\";\n\nArr.forEach(function(v){\n   var arr=v.split(\"\");\n   var str=\"\";\n   for(var i=0;i<arr.length;i++){\n      str+=obj[arr[i]];\n   }\n   while(str.length%5!=0){\n      str+=\"0\";\n   }\n   str=str.replace(/(.....)/g,function(s){\n   return obj[s];\n   });\n   console.log(str);\n});"
  },
  {
    "language": "JavaScript",
    "code": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.slice(0,-1)).split(\"\\n\");\nvar obj={};\nobj[\" \"]=\"101\";\nobj[\"'\"]=\"000000\";\nobj[\",\"]=\"000011\";\nobj[\"-\"]=\"10010001\";\nobj[\".\"]=\"010001\";\nobj[\"?\"]=\"000001\";\nobj[\"A\"]=\"100101\";\nobj[\"B\"]=\"10011010\";\nobj[\"C\"]=\"0101\";\nobj[\"D\"]=\"0001\";\nobj[\"E\"]=\"110\";\nobj[\"F\"]=\"01001\";\nobj[\"G\"]=\"10011011\";\nobj[\"H\"]=\"010000\";\nobj[\"I\"]=\"0111\";\nobj[\"J\"]=\"10011000\";\nobj[\"K\"]=\"0110\";\nobj[\"L\"]=\"00100\";\nobj[\"M\"]=\"10011001\";\nobj[\"N\"]=\"10011110\";\nobj[\"O\"]=\"00101\";\nobj[\"P\"]=\"111\";\nobj[\"Q\"]=\"10011111\";\nobj[\"R\"]=\"1000\";\nobj[\"S\"]=\"00110\";\nobj[\"T\"]=\"00111\";\nobj[\"U\"]=\"10011100\";\nobj[\"V\"]=\"10011101\";\nobj[\"W\"]=\"000010\";\nobj[\"X\"]=\"10010010\";\nobj[\"Y\"]=\"10010011\";\nobj[\"Z\"]=\"10010000\";\n\nobj[\"00000\"]=\"A\";\nobj[\"00001\"]=\"B\";\nobj[\"00010\"]=\"C\";\nobj[\"00011\"]=\"D\";\nobj[\"00100\"]=\"E\";\nobj[\"00101\"]=\"F\";\nobj[\"00110\"]=\"G\";\nobj[\"00111\"]=\"H\";\nobj[\"01000\"]=\"I\";\nobj[\"01001\"]=\"J\";\nobj[\"01010\"]=\"K\";\nobj[\"01011\"]=\"L\";\nobj[\"01100\"]=\"M\";\nobj[\"01101\"]=\"N\";\nobj[\"01110\"]=\"O\";\nobj[\"01111\"]=\"P\";\nobj[\"10000\"]=\"Q\";\nobj[\"10001\"]=\"R\";\nobj[\"10010\"]=\"S\";\nobj[\"10011\"]=\"T\";\nobj[\"10100\"]=\"U\";\nobj[\"10101\"]=\"V\";\nobj[\"10110\"]=\"W\";\nobj[\"10111\"]=\"X\";\nobj[\"11000\"]=\"Y\";\nobj[\"11001\"]=\"Z\";\nobj[\"11010\"]=\" \";\nobj[\"11011\"]=\".\";\nobj[\"11100\"]=\",\";\nobj[\"11101\"]=\"-\";\nobj[\"11110\"]=\"'\";\nobj[\"11111\"]=\"?\";\n\nArr.forEach(function(v){\n   var arr=v.split(\"\");\n   var str=\"\";\n   for(var i=0;i<arr.length;i++){\n      str+=obj[arr[i]];\n   }\n   while(str.length%5!=0){\n      str+=\"0\";\n   }\n   str=str.replace(/(.....)/g,function(s){\n   return obj[s];\n   });\n   console.log(str);\n});"
  },
  {
    "language": "Ruby",
    "code": "map1 = {\n' ' => '101',\n'\\'' => '000000',\n',' => '000011',\n'-' => '10010001',\n'.' => '010001',\n'?' => '000001',\n'A' => '100101',\n'B' => '10011010',\n'C' => '0101',\n'D' => '0001',\n'E' => '110',\n'F' => '01001',\n'G' => '10011011',\n'H' => '010000',\n'I' => '0111',\n'J' => '10011000',\n'K' => '0110',\n'L' => '00100',\n'M' => '10011001',\n'N' => '10011110',\n'O' => '00101',\n'P' => '111',\n'Q' => '10011111',\n'R' => '1000',\n'S' => '00110',\n'T' => '00111',\n'U' => '10011100',\n'V' => '10011101',\n'W' => '000010',\n'X' => '10010010',\n'Y' => '10010011',\n'Z' => '10010000',\n}\nmap2 = {\n'00000' => 'A',\n'00001' => 'B',\n'00010' => 'C',\n'00011' => 'D',\n'00100' => 'E',\n'00101' => 'F',\n'00110' => 'G',\n'00111' => 'H',\n'01000' => 'I',\n'01001' => 'J',\n'01010' => 'K',\n'01011' => 'L',\n'01100' => 'M',\n'01101' => 'N',\n'01110' => 'O',\n'01111' => 'P',\n'10000' => 'Q',\n'10001' => 'R',\n'10010' => 'S',\n'10011' => 'T',\n'10100' => 'U',\n'10101' => 'V',\n'10110' => 'W',\n'10111' => 'X',\n'11000' => 'Y',\n'11001' => 'Z',\n'11010' => ' ',\n'11011' => '.',\n'11100' => ',',\n'11101' => '-',\n'11110' => '\\'',\n'11111' => '?',\n}\n\ns = readlines.map(&:chomp).join(\" \")\ns = s.chars.map{|c| map1[c]}.join\ns += \"0\" * (5 - s.size % 5)\nputs s.scan(/.{5}/).map{|c| map2[c] }.join"
  },
  {
    "language": "Ruby",
    "code": "Encodetable1 = {\n  ' ' => '101',\n  '\\'' => '000000',\n  ',' => '000011',\n  '-' => '10010001',\n  '.' => '010001',\n  '?' => '000001',\n  'A' => '100101',\n  'B' => '10011010',\n  'C' => '0101',\n  'D' => '0001',\n  'E' => '110',\n  'F' => '01001',\n  'G' => '10011011',\n  'H' => '010000',\n  'I' => '0111',\n  'J' => '10011000',\n  'K' => '0110',\n  'L' => '00100',\n  'M' => '10011001',\n  'N' => '10011110',\n  'O' => '00101',\n  'P' => '111',\n  'Q' => '10011111',\n  'R' => '1000',\n  'S' => '00110',\n  'T' => '00111',\n  'U' => '10011100',\n  'V' => '10011101',\n  'W' => '000010',\n  'X' => '10010010',\n  'Y' => '10010011',\n  'Z' => '10010000'\n}\nEncodetable2 = {\n  '00000' => 'A',\n  '00001' => 'B',\n  '00010' => 'C',\n  '00011' => 'D',\n  '00100' => 'E',\n  '00101' => 'F',\n  '00110' => 'G',\n  '00111' => 'H',\n  '01000' => 'I',\n  '01001' => 'J',\n  '01010' => 'K',\n  '01011' => 'L',\n  '01100' => 'M',\n  '01101' => 'N',\n  '01110' => 'O',\n  '01111' => 'P',\n  '10000' => 'Q',\n  '10001' => 'R',\n  '10010' => 'S',\n  '10011' => 'T',\n  '10100' => 'U',\n  '10101' => 'V',\n  '10110' => 'W',\n  '10111' => 'X',\n  '11000' => 'Y',\n  '11001' => 'Z',\n  '11010' => ' ',\n  '11011' => '.',\n  '11100' => ',',\n  '11101' => '-',\n  '11110' => '\\'',\n  '11111' => '?'\n}\n\ndef encode1(str)\n  encoded = String.new\n  str.each_char{|c| encoded += Encodetable1[c] }\n  while encoded.size % 5 != 0\n    encoded += \"0\"\n  end\n  return encoded\nend\n\ndef encode2(str)\n  encoded = String.new\n  source = encode1(str)\n  while !source.empty?\n    encoded += Encodetable2[source.slice!(0,5)]\n  end\n  return encoded\nend\n\nwhile input = $stdin.gets\n  puts encode2(input.chomp)\nend"
  },
  {
    "language": "Ruby",
    "code": "to_binary = {\n  ' ' => '101',\n  \"'\" => '000000',\n  \",\" => '000011',\n  \"-\" => '10010001',\n  \".\" => '010001',\n  \"?\" => '000001',\n  \"A\" => '100101',\n  \"B\" => '10011010',\n  'C' => '0101',\n  'D' => '0001',\n  'E' => '110',\n  'F' => '01001',\n  'G' => '10011011',\n  'H' => '010000',\n  'I' => '0111',\n  'J' => '10011000',\n  'K' => '0110',\n  'L' => '00100',\n  'M' => '10011001',\n  'N' => '10011110',\n  'O' => '00101',\n  'P' => '111',\n  'Q' => '10011111',\n  'R' => '1000',\n  'S' => '00110',\n  'T' => '00111',\n  'U' => '10011100',\n  'V' => '10011101',\n  'W' => '000010',\n  'X' => '10010010',\n  'Y' => '10010011',\n  'Z' => '10010000'\n}\n\nto_char = { }\n\n[*'A'..'Z', ' ', '.', ',', '-', \"'\", '?'].each_with_index do |char, i|\n  to_char[sprintf(\"%05b\", i)] = char\nend\n\nreadlines.each do |line|\n  string = line.chomp\n\n  binary = string.chars.map do |char|\n    to_binary[char]\n  end.join\n\n  puts binary.chars.each_slice(5).map { |bin|\n    to_char[bin.join.ljust(5, '0')]\n  }.join\nend"
  },
  {
    "language": "Ruby",
    "code": "Encodetable1 = {\n  ' ' => '101',\n  '\\'' => '000000',\n  ',' => '000011',\n  '-' => '10010001',\n  '.' => '010001',\n  '?' => '000001',\n  'A' => '100101',\n  'B' => '10011010',\n  'C' => '0101',\n  'D' => '0001',\n  'E' => '110',\n  'F' => '01001',\n  'G' => '10011011',\n  'H' => '010000',\n  'I' => '0111',\n  'J' => '10011000',\n  'K' => '0110',\n  'L' => '00100',\n  'M' => '10011001',\n  'N' => '10011110',\n  'O' => '00101',\n  'P' => '111',\n  'Q' => '10011111',\n  'R' => '1000',\n  'S' => '00110',\n  'T' => '00111',\n  'U' => '10011100',\n  'V' => '10011101',\n  'W' => '000010',\n  'X' => '10010010',\n  'Y' => '10010011',\n  'Z' => '10010000'\n}\nEncodetable2 = {\n  '00000' => 'A',\n  '00001' => 'B',\n  '00010' => 'C',\n  '00011' => 'D',\n  '00100' => 'E',\n  '00101' => 'F',\n  '00110' => 'G',\n  '00111' => 'H',\n  '01000' => 'I',\n  '01001' => 'J',\n  '01010' => 'K',\n  '01011' => 'L',\n  '01100' => 'M',\n  '01101' => 'N',\n  '01110' => 'O',\n  '01111' => 'P',\n  '10000' => 'Q',\n  '10001' => 'R',\n  '10010' => 'S',\n  '10011' => 'T',\n  '10100' => 'U',\n  '10101' => 'V',\n  '10110' => 'W',\n  '10111' => 'X',\n  '11000' => 'Y',\n  '11001' => 'Z',\n  '11010' => ' ',\n  '11011' => '.',\n  '11100' => ',',\n  '11101' => '-',\n  '11110' => '\\'',\n  '11111' => '?'\n}\n\ndef encode1(str)\n  encoded = String.new\n  str.each_char{|c| encoded += Encodetable1[c] }\n  while encoded.size % 5 != 0\n    encoded += \"0\"\n  end\n  return encoded\nend\n\n#def encode2(str)\n#  encoded = String.new\n#  source = encode1(str)\n#  while !source.empty?\n#    encoded += Encodetable2[source.slice!(0,5)]\n#  end\n#  return encoded\n#end\n\nwhile input = $stdin.gets.chomp\n  puts encode2(input)\nend"
  },
  {
    "language": "Ruby",
    "code": "#!ruby -pl\nr=(?A..?Z).to_a\n$_=($_.gsub!(/./,Hash[(\" ',-.?\".chars+r).zip\"dggigggieedfigeiefiifdieffiigiii\".bytes.map{|i|i-97}.zip(\"836$D4X-849<.C:+97,18:2;9:/05%&#\".bytes.map{|c|c<51?c+109:c-51}).map{|a|\"%0*b\"%a}])+?0*((100-$_.size)%5)).gsub(/.{5}/,Hash[(0..31).map{|i|\"%05b\"%[i]}.zip r+\" .,-'?\".chars])"
  },
  {
    "language": "Ruby",
    "code": "words = [\" \", \"\\'\", \",\", \"-\", \".\", \"?\"]\nwords += %{ABCDEFGHIJKLMNOPQRSTUVWXYZ}.split(\"\")\ncode = %w{101 000000 000011 10010001 010001 000001 100101 10011010 0101 0001 \n        110 01001 10011011 010000 0111 10011000 0110 00100 10011001 10011110 \n        00101 111 10011111 1000 00110 00111 10011100 10011101 000010 10010010 \n        10010011 10010000}\nn_code = %w{11010 11110 11100 11101 11011 11111 00000 00001 00010 00011 00100 \n          00101 00110 00111 01000 01001 01010 01011 01100 01101 01110 01111 \n          10000 10001 10010 10011 10100 10101 10110 10111 11000 11001}\nwhile gets\n  s = \"\"\n  $_.split(\"\").each do |w|\n    s += code[words.find_index(w)]\n  end\n  sz = s.size%5\n  s += \"0\"*((5-sz)%5)\n  ret = \"\"\n  (s.size/5).times do |i|\n    ret += words[n_code.find_index(s[i*5,5])]\n  end\n  puts ret\nend"
  },
  {
    "language": "Ruby",
    "code": "enc={' '=>'101','\\''=>'000000',','=>'000011','-'=>'10010001','.'=>'010001','?'=>'000001',\n'A'=>'100101','B'=>'10011010','C'=>'0101','D'=>'0001','E'=>'110','F'=>'01001','G'=>'10011011',\n'H'=>'010000','I'=>'0111','J'=>'10011000','K'=>'0110','L'=>'00100','M'=>'10011001','N'=>'10011110',\n'O'=>'00101','P'=>'111','Q'=>'10011111','R'=>'1000','S'=>'00110','T'=>'00111','U'=>'10011100',\n'V'=>'10011101','W'=>'000010','X'=>'10010010','Y'=>'10010011','Z'=>'10010000'}\n\ndec={'00000'=>'A','00001'=>'B','00010'=>'C','00011'=>'D','00100'=>'E','00101'=>'F','00110'=>'G',\n'00111'=>'H','01000'=>'I','01001'=>'J','01010'=>'K','01011'=>'L','01100'=>'M','01101'=>'N',\n'01110'=>'O','01111'=>'P','10000'=>'Q','10001'=>'R','10010'=>'S','10011'=>'T','10100'=>'U',\n'10101'=>'V','10110'=>'W','10111'=>'X','11000'=>'Y','11001'=>'Z','11010'=>' ','11011'=>'.',\n'11100'=>',','11101'=>'-','11110'=>'\\'','11111'=>'?'}\n\nwhile gets\n  input=$_.chomp\n  le,ld=\"\",\"\"\n  input.each_char do |c|\n    le+=enc[c]\n  end\n  while !le.empty?\n    ld+=dec[format(\"%05s\",le.slice!(0,5).reverse).reverse.gsub(\" \",\"0\")]\n  end\n  puts ld\nend"
  },
  {
    "language": "Ruby",
    "code": "mp = {}\nmp[\" \"] = \"101\"\nmp[\"'\"] = \"000000\"\nmp[\",\"] = \"000011\"\nmp[\"-\"] = \"10010001\"\nmp[\".\"] = \"010001\"\nmp[\"?\"] = \"000001\"\nmp[\"A\"] = \"100101\"\nmp[\"B\"] = \"10011010\"\nmp[\"C\"] = \"0101\"\nmp[\"D\"] = \"0001\"\nmp[\"E\"]=\"110\"\nmp[\"F\"]=\"01001\"\nmp[\"G\"]=\"10011011\"\nmp[\"H\"]=\"010000\"\nmp[\"I\"]=\"0111\"\nmp[\"J\"]=\"10011000\"\nmp[\"K\"]=\"0110\"\nmp[\"L\"]=\"00100\"\nmp[\"N\"]=\"10011001\"\nmp[\"M\"]=\"10011110\"\nmp[\"O\"]=\"00101\"\nmp[\"P\"]=\"111\"\nmp[\"Q\"]=\"10011111\"\nmp[\"R\"]=\"1000\"\nmp[\"S\"]=\"00110\"\nmp[\"T\"]=\"00111\"\nmp[\"U\"]=\"10011100\"\nmp[\"V\"]=\"10011101\"\nmp[\"W\"]=\"000010\"\nmp[\"X\"]=\"10010010\"\nmp[\"Y\"]=\"10010011\"\nmp[\"Z\"]=\"10010000\"\n\ngyaku = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"\n\nwhile s=gets\n  s=s.chomp\n  t=\"\"\n  for i in 0...s.length\n    t+=mp[s[i]]\n  end\n  n = t.length\n  t += \"0\"*((5-n%5)%5)\n  n = t.length\n  res = \"\"\n  for i in 0...(n/5)\n    beg = i*5\n    id = 0\n    for j in 0...5\n      id*=2\n      id+=(t[beg+j]==\"0\" ? 0 : 1)\n    end\n    res += gyaku[id]\n  end\n  puts res\nend"
  },
  {
    "language": "Ruby",
    "code": "T = {\n  ' ' => '101',\n  ?' => '000000',\n  ?, => '000011',\n  ?- => '10010001',\n  ?. => '010001',\n  ?? => '000001',\n  ?A => '100101',\n  ?B => '10011010',\n  ?C => '0101',\n  ?D => '0001',\n  ?E => '110',\n  ?F => '01001',\n  ?G => '10011011',\n  ?H => '010000',\n  ?I => '0111',\n  ?J => '10011000',\n  ?K => '0110',\n  ?L => '00100',\n  ?M => '10011001',\n  ?N => '10011110',\n  ?O => '00101',\n  ?P => '111',\n  ?Q => '10011111',\n  ?R => '1000',\n  ?S => '00110',\n  ?T => '00111',\n  ?U => '10011100',\n  ?V => '10011101',\n  ?W => '000010',\n  ?X => '10010010',\n  ?Y => '10010011',\n  ?Z => '10010000',\n}.freeze\nS = {\n  0b00000 => ?A,\n  0b00001 => ?B,\n  0b00010 => ?C,\n  0b00011 => ?D,\n  0b00100 => ?E,\n  0b00101 => ?F,\n  0b00110 => ?G,\n  0b00111 => ?H,\n  0b01000 => ?I,\n  0b01001 => ?J,\n  0b01010 => ?K,\n  0b01011 => ?L,\n  0b01100 => ?M,\n  0b01101 => ?N,\n  0b01110 => ?O,\n  0b01111 => ?P,\n  0b10000 => ?Q,\n  0b10001 => ?R,\n  0b10010 => ?S,\n  0b10011 => ?T,\n  0b10100 => ?U,\n  0b10101 => ?V,\n  0b10110 => ?W,\n  0b10111 => ?X,\n  0b11000 => ?Y,\n  0b11001 => ?Z,\n  0b11010 => ' ',\n  0b11011 => ?.,\n  0b11100 => ?,,\n  0b11101 => ?-,\n  0b11110 => ?',\n  0b11111 => ??,\n}.freeze\n$<.each_line do |l|\n  s = ''\n  l.chomp.each_char {|c| s << T[c] }\n  s << ?0 * ((5 - s.size) % 5)\n  puts s.each_char.each_slice(5).map {|a| S[a.join.to_i 2] }.join\nend"
  },
  {
    "language": "Ruby",
    "code": "def main(input = STDIN)\n  plane = {\" \" => \"101\", \"'\" => \"000000\", \",\" => \"000011\", \"-\" => \"10010001\", \".\" => \"010001\", \"?\" => \"000001\", \"A\" => \"100101\", \"B\" => \"10011010\", \"C\" => \"0101\", \"D\" => \"0001\", \"E\" => \"110\", \"F\" => \"01001\", \"G\" => \"10011011\", \"H\" => \"010000\", \"I\" => \"0111\", \"J\" => \"10011000\", \"K\" => \"0110\", \"L\" => \"00100\", \"M\" => \"10011001\", \"N\" => \"10011110\", \"O\" => \"00101\", \"P\" => \"111\", \"Q\" => \"10011111\", \"R\" => \"1000\", \"S\" => \"00110\", \"T\" => \"00111\", \"U\" => \"10011100\", \"V\" => \"10011101\", \"W\" => \"000010\", \"X\" => \"10010010\", \"Y\" => \"10010011\", \"Z\" => \"10010000\"}\n  code = [\"A\"]\n  for i in 1..25\n    code[i] = code[i - 1].next\n  end\n  code.push \" \", \".\", \",\", \"-\", \"'\", \"?\"\n  while text = input.gets\n    output = []\n    coded = text.chomp.split(//).map{|char|plane[char]}.join\n    coded << \"0\" * (-coded.size % 5)\n    for i in 0...coded.size / 5\n      output << code[coded.slice(i * 5, 5).to_i(2)]\n    end\n    puts output.join\n  end\nend\nmain"
  },
  {
    "language": "Ruby",
    "code": "enc={' '=>'101','\\''=>'000000',','=>'000011','-'=>'10010001','.'=>'010001','?'=>'000001',\n'A'=>'100101','B'=>'10011010','C'=>'0101','D'=>'0001','E'=>'110','F'=>'01001','G'=>'10011011',\n'H'=>'010000','I'=>'0111','J'=>'10011000','K'=>'0110','L'=>'00100','M'=>'10011001','N'=>'10011110',\n'O'=>'00101','P'=>'111','Q'=>'10011111','R'=>'1000','S'=>'00110','T'=>'00111','U'=>'10011100',\n'V'=>'10011101','W'=>'000010','X'=>'10010010','Y'=>'10010011','Z'=>'10010000'}\n\ndec={'00000'=>'A','00001'=>'B','00010'=>'C','00011'=>'D','00100'=>'E','00101'=>'F','00110'=>'G',\n'00111'=>'H','01000'=>'I','01001'=>'J','01010'=>'K','01011'=>'L','01100'=>'M','01101'=>'N',\n'01110'=>'O','01111'=>'P','10000'=>'Q','10001'=>'R','10010'=>'S','10011'=>'T','10100'=>'U',\n'10101'=>'V','10110'=>'W','10111'=>'X','11000'=>'Y','11001'=>'Z','11010'=>' ','11011'=>'.',\n'11100'=>',','11101'=>'-','11110'=>'\\'','11111'=>'?'}\n\nwhile gets\n  input=$_.chomp\n  le,ld=\"\",\"\"\n  input.each_char do |c|\n    le+=enc[c]\n  end\n  while !le.empty?\n    ld+=dec[format(\"%05s\",le.slice!(0,5).reverse).reverse.gsub(\" \",\"0\")]\n  end\n  puts ld\nend"
  },
  {
    "language": "Ruby",
    "code": "tbl1 = {\n  \" \" => \"101\",\n  \"'\" => \"000000\",\n  \",\" => \"000011\",\n  \"-\" => \"10010001\",\n  \".\" => \"010001\",\n  \"?\" => \"000001\",\n  \"A\" => \"100101\",\n  \"B\" => \"10011010\",\n  \"C\" => \"0101\",\n  \"D\" => \"0001\",\n  \"E\" => \"110\",\n  \"F\" => \"01001\",\n  \"G\" => \"10011011\",\n  \"H\" => \"010000\",\n  \"I\" => \"0111\",\n  \"J\" => \"10011000\",\n  \"K\" => \"0110\",\n  \"L\" => \"00100\",\n  \"M\" => \"10011001\",\n  \"N\" => \"10011110\",\n  \"O\" => \"00101\",\n  \"P\" => \"111\",\n  \"Q\" => \"10011111\",\n  \"R\" => \"1000\",\n  \"S\" => \"00110\",\n  \"T\" => \"00111\",\n  \"U\" => \"10011100\",\n  \"V\" => \"10011101\",\n  \"W\" => \"000010\",\n  \"X\" => \"10010010\",\n  \"Y\" => \"10010011\",\n  \"Z\" => \"10010000\"\n}\n\ntbl2 = {\n  \"00000\" => \"A\",\n  \"00001\" => \"B\",\n  \"00010\" => \"C\",\n  \"00011\" => \"D\",\n  \"00100\" => \"E\",\n  \"00101\" => \"F\",\n  \"00110\" => \"G\",\n  \"00111\" => \"H\",\n  \"01000\" => \"I\",\n  \"01001\" => \"J\",\n  \"01010\" => \"K\",\n  \"01011\" => \"L\",\n  \"01100\" => \"M\",\n  \"01101\" => \"N\",\n  \"01110\" => \"O\",\n  \"01111\" => \"P\",\n  \"10000\" => \"Q\",\n  \"10001\" => \"R\",\n  \"10010\" => \"S\",\n  \"10011\" => \"T\",\n  \"10100\" => \"U\",\n  \"10101\" => \"V\",\n  \"10110\" => \"W\",\n  \"10111\" => \"X\",\n  \"11000\" => \"Y\",\n  \"11001\" => \"Z\",\n  \"11010\" => \" \",\n  \"11011\" => \".\",\n  \"11100\" => \",\",\n  \"11101\" => \"-\",\n  \"11110\" => \"'\",\n  \"11111\" => \"?\"\n}\n\nwhile (line = gets)\n  chs = line.chomp.split(\"\")\n\n  str0 = \"\"\n  for ch in chs\n    str0 += tbl1[ch]\n  end\n\n  rem = str0.length % 5\n  str0 += \"0\" * (5 - rem) if rem > 0\n\n  str1 = \"\"\n  str0.scan(/[01]{5}/).each do |b|\n    str1 += tbl2[b]\n  end\n  puts str1\nend"
  },
  {
    "language": "Ruby",
    "code": "table1 = {\"'\"=>\"000000\", \",\"=>\"000011\", \"-\"=>\"10010001\", \".\"=>\"010001\",\n  \"?\"=>\"000001\", \"A\"=>\"100101\", \"B\"=>\"10011010\", \"C\"=>\"0101\", \"D\"=>\"0001\",\n  \"E\"=>\"110\", \"F\"=>\"01001\", \"G\"=>\"10011011\", \"H\"=>\"010000\", \"I\"=>\"0111\",\n  \"J\"=>\"10011000\", \"K\"=>\"0110\", \"L\"=>\"00100\", \"M\"=>\"10011001\",\n  \"N\"=>\"10011110\", \"O\"=>\"00101\", \"P\"=>\"111\", \"Q\"=>\"10011111\", \"R\"=>\"1000\",\n  \"S\"=>\"00110\", \"T\"=>\"00111\", \"U\"=>\"10011100\", \"V\"=>\"10011101\",\n  \"W\"=>\"000010\", \"X\"=>\"10010010\", \"Y\"=>\"10010011\", \"Z\"=>\"10010000\", \" \"=>\"101\"}\ntable2 = {\"00000\"=>\"A\", \"00001\"=>\"B\", \"00010\"=>\"C\", \"00011\"=>\"D\", \"00100\"=>\"E\",\n  \"00101\"=>\"F\", \"00110\"=>\"G\", \"00111\"=>\"H\", \"01000\"=>\"I\", \"01001\"=>\"J\",\n  \"01010\"=>\"K\", \"01011\"=>\"L\", \"01100\"=>\"M\", \"01101\"=>\"N\", \"01110\"=>\"O\",\n  \"01111\"=>\"P\", \"10000\"=>\"Q\", \"10001\"=>\"R\", \"10010\"=>\"S\", \"10011\"=>\"T\",\n  \"10100\"=>\"U\", \"10101\"=>\"V\", \"10110\"=>\"W\", \"10111\"=>\"X\", \"11000\"=>\"Y\",\n  \"11001\"=>\"Z\", \"11010\"=>\" \", \"11011\"=>\".\", \"11100\"=>\",\", \"11101\"=>\"-\",\n  \"11110\"=>\"'\", \"11111\"=>\"?\"}\n\n$<.readlines.each do |line|\n  line.chomp!\n  text = \"\"\n  line.each_char {|c| text += table1[c]}\n  text += \"0\" * (5 - text.length % 5)\n  \n  result = \"\"\n  until text.empty?\n     result += table2[text[0, 5]]\n     text = text[5..-1]\n  end\n  puts result\nend\n"
  },
  {
    "language": "Ruby",
    "code": "r=(?A..?Z).to_a\np ((l=gets.chop.gsub(/./,Hash[(\" ',-.?\".chars+r).zip\"dggigggieedfigeiefiifdieffiigiii\".bytes.map{|i|i-97}.zip(\"836$D4X-849<.C:+97,18:2;9:/05%&#\".bytes.map{|c|c<51?c+109:c-51}).map{|a|\"%0*b\"%a}]))+?0*((100-l.size)%5)).gsub(/.{5}/,Hash[(0..31).map{|i|\"%05b\"%[i]}.zip r+\" .,-'?\".chars])"
  },
  {
    "language": "Ruby",
    "code": "code_a = Hash[\n*%w(\n'\t000000\n,\t000011\n-\t10010001\n.\t010001\n?\t000001\nA\t100101\nB\t10011010\nC\t0101\nD\t0001\nE\t110\nF\t01001\nG\t10011011\nH\t010000\nI\t0111\nJ\t10011000\nK\t0110\nL\t00100\nM\t10011001\nN\t10011110\nO\t00101\nP\t111\nQ\t10011111\nR\t1000\nS\t00110\nT\t00111\nU\t10011100\nV\t10011101\nW\t000010\nX\t10010010\nY\t10010011\nZ\t10010000\n)]\ncode_a[' '] = '101'\n\ncode_b = Hash[*%w(\n11011\t.\n11100\t,\n11101\t-\n11110\t'\n11111\t?\n)] \n(?A..?Z).each{|c|\n\tcode_b[\"%05b\" % (c.ord - ?A.ord)] = c\n}\ncode_b['11010'] = \" \"\n\nputs gets\n\t.chomp\n\t.each_char\n\t.map{|c| code_a[c]}\n\t.join.tap{|x| p x}\n\t.scan(/.{1,5}/).tap{|x| p x}\n\t.map{|s| code_b[?0 * (5-s.size) + s]}.tap{|x| p x}\n\t.join"
  },
  {
    "language": "Ruby",
    "code": "mp = {}\nmp[\" \"] = \"101\"\nmp[\"'\"] = \"000000\"\nmp[\",\"] = \"000011\"\nmp[\"-\"] = \"10010001\"\nmp[\".\"] = \"010001\"\nmp[\"?\"] = \"000001\"\nmp[\"A\"] = \"100101\"\nmp[\"B\"] = \"10011010\"\nmp[\"C\"] = \"0101\"\nmp[\"D\"] = \"0001\"\nmp[\"E\"]=\"110\"\nmp[\"F\"]=\"01001\"\nmp[\"G\"]=\"10011011\"\nmp[\"H\"]=\"010000\"\nmp[\"I\"]=\"0111\"\nmp[\"J\"]=\"10011000\"\nmp[\"K\"]=\"0110\"\nmp[\"L\"]=\"00100\"\nmp[\"M\"]=\"10011001\"\nmp[\"N\"]=\"10011110\"\nmp[\"O\"]=\"00101\"\nmp[\"P\"]=\"111\"\nmp[\"Q\"]=\"10011111\"\nmp[\"R\"]=\"1000\"\nmp[\"S\"]=\"00110\"\nmp[\"T\"]=\"00111\"\nmp[\"U\"]=\"10011100\"\nmp[\"V\"]=\"10011101\"\nmp[\"W\"]=\"000010\"\nmp[\"X\"]=\"10010010\"\nmp[\"Y\"]=\"10010011\"\nmp[\"Z\"]=\"10010000\"\n\ngyaku = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"\n\nwhile s=gets\n  s=s.chomp\n  t=\"\"\n  for i in 0...s.length\n    t+=mp[s[i]]\n  end\n  n = t.length\n  t += \"0\"*((5-n%5)%5)\n  n = t.length\n  res = \"\"\n  for i in 0...(n/5)\n    beg = i*5\n    id = 0\n    for j in 0...5\n      id*=2\n      id+=(t[beg+j]==\"0\" ? 0 : 1)\n    end\n    res += gyaku[id]\n  end\n  puts res\nend"
  },
  {
    "language": "Ruby",
    "code": "class String\n  @@encode = {}\n  @@decode = {}\n\n  def encode\n    res = split('').map{ |c| @@encode[c] }.join\n    res + '0' * ((5 - res.size % 5) % 5)\n  end\n\n  def decode\n    scan(/.{5}/).map{ |s| @@decode[s] }.join\n  end\n\n\n  @@encode[\" \"] = \"101\"\n  @@encode[\"'\"] = \"000000\"\n  @@encode[\",\"] = \"000011\"\n  @@encode[\"-\"] = \"10010001\"\n  @@encode[\".\"] = \"010001\"\n\n  @@encode[\"?\"] = \"000001\"\n  @@encode[\"A\"] = \"100101\"\n  @@encode[\"B\"] = \"10011010\"\n  @@encode[\"C\"] = \"0101\"\n  @@encode[\"D\"] = \"0001\"\n  @@encode[\"E\"] = \"110\"\n  @@encode[\"F\"] = \"01001\"\n  @@encode[\"G\"] = \"10011011\"\n\n  @@encode[\"H\"] = \"010000\"\n  @@encode[\"I\"] = \"0111\"\n  @@encode[\"J\"] = \"10011000\"\n  @@encode[\"K\"] = \"0110\"\n  @@encode[\"L\"] = \"00100\"\n  @@encode[\"M\"] = \"10011001\"\n  @@encode[\"N\"] = \"10011110\"\n\n  @@encode[\"O\"] = \"00101\"\n  @@encode[\"P\"] = \"111\"\n  @@encode[\"Q\"] = \"10011111\"\n  @@encode[\"R\"] = \"1000\"\n  @@encode[\"S\"] = \"00110\"\n  @@encode[\"T\"] = \"00111\"\n  @@encode[\"U\"] = \"10011100\"\n\n  @@encode[\"V\"] = \"10011101\"\n  @@encode[\"W\"] = \"000010\"\n  @@encode[\"X\"] = \"10010010\"\n  @@encode[\"Y\"] = \"10010011\"\n  @@encode[\"Z\"] = \"10010000\"\n\n  @@decode[\"00000\"] = \"A\"\n  @@decode[\"00001\"] = \"B\"\n  @@decode[\"00010\"] = \"C\"\n  @@decode[\"00011\"] = \"D\"\n  @@decode[\"00100\"] = \"E\"\n  @@decode[\"00101\"] = \"F\"\n  @@decode[\"00110\"] = \"G\"\n\n  @@decode[\"00111\"] = \"H\"\n  @@decode[\"01000\"] = \"I\"\n  @@decode[\"01001\"] = \"J\"\n  @@decode[\"01010\"] = \"K\"\n  @@decode[\"01011\"] = \"L\"\n  @@decode[\"01100\"] = \"M\"\n  @@decode[\"01101\"] = \"N\"\n\n  @@decode[\"01110\"] = \"O\"\n  @@decode[\"01111\"] = \"P\"\n  @@decode[\"10000\"] = \"Q\"\n  @@decode[\"10001\"] = \"R\"\n  @@decode[\"10010\"] = \"S\"\n  @@decode[\"10011\"] = \"T\"\n  @@decode[\"10100\"] = \"U\"\n\n  @@decode[\"10101\"] = \"V\"\n  @@decode[\"10110\"] = \"W\"\n  @@decode[\"10111\"] = \"X\"\n  @@decode[\"11000\"] = \"Y\"\n  @@decode[\"11001\"] = \"Z\"\n\n  @@decode[\"11010\"] = \" \"\n  @@decode[\"11011\"] = \".\"\n  @@decode[\"11100\"] = \",\"\n  @@decode[\"11101\"] = \"-\"\n  @@decode[\"11110\"] = \"'\"\n  @@decode[\"11111\"] = \"?\"\nend\n\n\nwhile line = gets\n  puts line.encode.decode\nend"
  },
  {
    "language": "Ruby",
    "code": "words = [\" \", \"\\'\", \",\", \"-\", \".\", \"?\"]\nwords += %{ABCDEFGHIJKLMNOPQRSTUVWXYZ}.split(\"\")\ncode = %w{101 000000 000011 10010001 010001 000001 100101 10011010 0101 0001 \n        110 01001 10011011 010000 0111 10011000 0110 00100 10011001 10011110 \n        00101 111 10011111 1000 00110 00111 10011100 10011101 000010 10010010 \n        10010011 10010000}\nn_code = %w{11010 11110 11100 11101 11011 11111 00000 00001 00010 00011 00100 \n          00101 00110 00111 01000 01001 01010 01011 01100 01101 01110 01111 \n          10000 10001 10010 10011 10100 10101 10110 10111 11000 11001}\nwhile gets\n  s = \"\"\n  $_.chomp.split(\"\").each do |w|\n    s += code[words.find_index(w)]\n  end\n  sz = s.size%5\n  s += \"0\"*((5-sz)%5)\n  ret = \"\"\n  (s.size/5).times do |i|\n    ret += words[n_code.find_index(s[i*5,5])]\n  end\n  puts ret\nend"
  },
  {
    "language": "Ruby",
    "code": "map1 = {\n' ' => '101',\n'\\'' => '000000',\n',' => '000011',\n'-' => '10010001',\n'.' => '010001',\n'?' => '000001',\n'A' => '100101',\n'B' => '10011010',\n'C' => '0101',\n'D' => '0001',\n'E' => '110',\n'F' => '01001',\n'G' => '10011011',\n'H' => '010000',\n'I' => '0111',\n'J' => '10011000',\n'K' => '0110',\n'L' => '00100',\n'M' => '10011001',\n'N' => '10011110',\n'O' => '00101',\n'P' => '111',\n'Q' => '10011111',\n'R' => '1000',\n'S' => '00110',\n'T' => '00111',\n'U' => '10011100',\n'V' => '10011101',\n'W' => '000010',\n'X' => '10010010',\n'Y' => '10010011',\n'Z' => '10010000',\n}\nmap2 = {\n'00000' => 'A',\n'00001' => 'B',\n'00010' => 'C',\n'00011' => 'D',\n'00100' => 'E',\n'00101' => 'F',\n'00110' => 'G',\n'00111' => 'H',\n'01000' => 'I',\n'01001' => 'J',\n'01010' => 'K',\n'01011' => 'L',\n'01100' => 'M',\n'01101' => 'N',\n'01110' => 'O',\n'01111' => 'P',\n'10000' => 'Q',\n'10001' => 'R',\n'10010' => 'S',\n'10011' => 'T',\n'10100' => 'U',\n'10101' => 'V',\n'10110' => 'W',\n'10111' => 'X',\n'11000' => 'Y',\n'11001' => 'Z',\n'11010' => ' ',\n'11011' => '.',\n'11100' => ',',\n'11101' => '-',\n'11110' => '\\'',\n'11111' => '?',\n}\n\nreadlines.each do |l|\n  s = l.chars.map{|c| map1[c]}.join\n  s += \"0\" * (5 - s.size % 5) if s.size % 5 != 0\n  puts s.scan(/.{5}/).map{|c| map2[c] }.join\nend"
  },
  {
    "language": "Ruby",
    "code": "code_a = Hash[\n*%w(\n'\t000000\n,\t000011\n-\t10010001\n.\t010001\n?\t000001\nA\t100101\nB\t10011010\nC\t0101\nD\t0001\nE\t110\nF\t01001\nG\t10011011\nH\t010000\nI\t0111\nJ\t10011000\nK\t0110\nL\t00100\nM\t10011001\nN\t10011110\nO\t00101\nP\t111\nQ\t10011111\nR\t1000\nS\t00110\nT\t00111\nU\t10011100\nV\t10011101\nW\t000010\nX\t10010010\nY\t10010011\nZ\t10010000\n)]\ncode_a[' '] = '101'\n\ncode_b = Hash[*%w(\n11011\t.\n11100\t,\n11101\t-\n11110\t'\n11111\t?\n)] \n(?A..?Z).each{|c|\n\tcode_b[\"%05b\" % (c.ord - ?A.ord)] = c\n}\ncode_b['11010'] = \" \"\n\nwhile gets\n\tputs $_\n\t.chomp\n\t.each_char\n\t.map{|c| code_a[c]}\n\t.join\n\t.scan(/.{1,5}/)\n\t.map{|s| code_b[?0 * (5-s.size) + s]}\n\t.join\nend"
  },
  {
    "language": "Ruby",
    "code": "Encodetable1 = {\n  ' ' => '101',\n  '\\'' => '000000',\n  ',' => '000011',\n  '-' => '10010001',\n  '.' => '010001',\n  '?' => '000001',\n  'A' => '100101',\n  'B' => '10011010',\n  'C' => '0101',\n  'D' => '0001',\n  'E' => '110',\n  'F' => '01001',\n  'G' => '10011011',\n  'H' => '010000',\n  'I' => '0111',\n  'J' => '10011000',\n  'K' => '0110',\n  'L' => '00100',\n  'M' => '10011001',\n  'N' => '10011110',\n  'O' => '00101',\n  'P' => '111',\n  'Q' => '10011111',\n  'R' => '1000',\n  'S' => '00110',\n  'T' => '00111',\n  'U' => '10011100',\n  'V' => '10011101',\n  'W' => '000010',\n  'X' => '10010010',\n  'Y' => '10010011',\n  'Z' => '10010000'\n}\nEncodetable2 = {\n  '00000' => 'A',\n  '00001' => 'B',\n  '00010' => 'C',\n  '00011' => 'D',\n  '00100' => 'E',\n  '00101' => 'F',\n  '00110' => 'G',\n  '00111' => 'H',\n  '01000' => 'I',\n  '01001' => 'J',\n  '01010' => 'K',\n  '01011' => 'L',\n  '01100' => 'M',\n  '01101' => 'N',\n  '01110' => 'O',\n  '01111' => 'P',\n  '10000' => 'Q',\n  '10001' => 'R',\n  '10010' => 'S',\n  '10011' => 'T',\n  '10100' => 'U',\n  '10101' => 'V',\n  '10110' => 'W',\n  '10111' => 'X',\n  '11000' => 'Y',\n  '11001' => 'Z',\n  '11010' => ' ',\n  '11011' => '.',\n  '11100' => ',',\n  '11101' => '-',\n  '11110' => '\\'',\n  '11111' => '?'\n}\n\ndef encode1(str)\n  encoded = String.new\n  str.each_char{|c| encoded += Encodetable1[c] }\n  while encoded.size % 5 != 0\n    encoded += \"0\"\n  end\n  return encoded\nend\n\ndef encode2(str)\n  encoded = String.new\n  source = encode1(str)\n  while !source.empty?\n    encoded += Encodetable2[source.slice!(0,5)]\n  end\n  return encoded\nend\n\nwhile input = $stdin.gets.chomp\n  puts encode2(input)\nend"
  },
  {
    "language": "Ruby",
    "code": "map1 = {\n' ' => '101',\n'\\'' => '000000',\n',' => '000011',\n'-' => '10010001',\n'.' => '010001',\n'?' => '000001',\n'A' => '100101',\n'B' => '10011010',\n'C' => '0101',\n'D' => '0001',\n'E' => '110',\n'F' => '01001',\n'G' => '10011011',\n'H' => '010000',\n'I' => '0111',\n'J' => '10011000',\n'K' => '0110',\n'L' => '00100',\n'M' => '10011001',\n'N' => '10011110',\n'O' => '00101',\n'P' => '111',\n'Q' => '10011111',\n'R' => '1000',\n'S' => '00110',\n'T' => '00111',\n'U' => '10011100',\n'V' => '10011101',\n'W' => '000010',\n'X' => '10010010',\n'Y' => '10010011',\n'Z' => '10010000',\n}\nmap2 = {\n'00000' => 'A',\n'00001' => 'B',\n'00010' => 'C',\n'00011' => 'D',\n'00100' => 'E',\n'00101' => 'F',\n'00110' => 'G',\n'00111' => 'H',\n'01000' => 'I',\n'01001' => 'J',\n'01010' => 'K',\n'01011' => 'L',\n'01100' => 'M',\n'01101' => 'N',\n'01110' => 'O',\n'01111' => 'P',\n'10000' => 'Q',\n'10001' => 'R',\n'10010' => 'S',\n'10011' => 'T',\n'10100' => 'U',\n'10101' => 'V',\n'10110' => 'W',\n'10111' => 'X',\n'11000' => 'Y',\n'11001' => 'Z',\n'11010' => ' ',\n'11011' => '.',\n'11100' => ',',\n'11101' => '-',\n'11110' => '\\'',\n'11111' => '?',\n}\n\nreadlines.each do |l|\n  s = l.chars.map{|c| map1[c]}.join\n  s += \"0\" * (5 - s.size % 5)\n  puts s.scan(/.{5}/).map{|c| map2[c] }.join\nend"
  },
  {
    "language": "Ruby",
    "code": "def main(input = STDIN)\n  plane = {\" \" => \"101\", \"'\" => \"000000\", \",\" => \"000011\", \"-\" => \"10010001\", \".\" => \"010001\", \"?\" => \"000001\", \"A\" => \"100101\", \"B\" => \"10011010\", \"C\" => \"0101\", \"D\" => \"0001\", \"E\" => \"110\", \"F\" => \"01001\", \"G\" => \"10011011\", \"H\" => \"010000\", \"I\" => \"0111\", \"J\" => \"10011000\", \"K\" => \"0110\", \"L\" => \"00100\", \"M\" => \"10011001\", \"N\" => \"10011110\", \"O\" => \"00101\", \"P\" => \"111\", \"Q\" => \"10011111\", \"R\" => \"1000\", \"S\" => \"00110\", \"T\" => \"00111\", \"U\" => \"10011100\", \"V\" => \"10011101\", \"W\" => \"000010\", \"X\" => \"10010010\", \"Y\" => \"10010011\", \"Z\" => \"10010000\"}\n  code = [\"A\"]\n  for i in 1..25\n    code[i] = code[i - 1].next\n  end\n  code.push \" \", \".\", \",\", \"-\", \"'\", \"?\"\n  while text = input.gets\n    output = []\n    coded = text.chomp.split(//).map{|char|plane[char]}.join\n    coded << \"0\" * (-(coded.size + 1) % 5)\n    for i in 0..coded.size / 5\n      output << code[coded.slice(i * 5, 5).to_i(2)]\n    end\n    puts output.join\n  end\nend\nmain"
  },
  {
    "language": "Ruby",
    "code": "table1 = {\"'\"=>\"000000\", \",\"=>\"000011\", \"-\"=>\"10010001\", \".\"=>\"010001\",\n  \"?\"=>\"000001\", \"A\"=>\"100101\", \"B\"=>\"10011010\", \"C\"=>\"0101\", \"D\"=>\"0001\",\n  \"E\"=>\"110\", \"F\"=>\"01001\", \"G\"=>\"10011011\", \"H\"=>\"010000\", \"I\"=>\"0111\",\n  \"J\"=>\"10011000\", \"K\"=>\"0110\", \"L\"=>\"00100\", \"M\"=>\"10011001\",\n  \"N\"=>\"10011110\", \"O\"=>\"00101\", \"P\"=>\"111\", \"Q\"=>\"10011111\", \"R\"=>\"1000\",\n  \"S\"=>\"00110\", \"T\"=>\"00111\", \"U\"=>\"10011100\", \"V\"=>\"10011101\",\n  \"W\"=>\"000010\", \"X\"=>\"10010010\", \"Y\"=>\"10010011\", \"Z\"=>\"10010000\", \" \"=>\"101\"}\ntable2 = {\"00000\"=>\"A\", \"00001\"=>\"B\", \"00010\"=>\"C\", \"00011\"=>\"D\", \"00100\"=>\"E\",\n  \"00101\"=>\"F\", \"00110\"=>\"G\", \"00111\"=>\"H\", \"01000\"=>\"I\", \"01001\"=>\"J\",\n  \"01010\"=>\"K\", \"01011\"=>\"L\", \"01100\"=>\"M\", \"01101\"=>\"N\", \"01110\"=>\"O\",\n  \"01111\"=>\"P\", \"10000\"=>\"Q\", \"10001\"=>\"R\", \"10010\"=>\"S\", \"10011\"=>\"T\",\n  \"10100\"=>\"U\", \"10101\"=>\"V\", \"10110\"=>\"W\", \"10111\"=>\"X\", \"11000\"=>\"Y\",\n  \"11001\"=>\"Z\", \"11010\"=>\" \", \"11011\"=>\".\", \"11100\"=>\",\", \"11101\"=>\"-\",\n  \"11110\"=>\"'\", \"11111\"=>\"?\"}\n\n$<.readlines.each do |line|\n  line.chomp!\n  break if line.empty?\n  text = \"\"\n  line.each_char {|c| text += table1[c]}\n  text += \"0\" * (5 - text.length % 5)\n  \n  result = \"\"\n  until text.empty?\n     result += table2[text[0, 5]]\n     text = text[5..-1]\n  end\n  puts result\nend\n"
  },
  {
    "language": "Ruby",
    "code": "code_a = Hash[\n*%w(\n'\t000000\n,\t000011\n-\t10010001\n.\t010001\n?\t000001\nA\t100101\nB\t10011010\nC\t0101\nD\t0001\nE\t110\nF\t01001\nG\t10011011\nH\t010000\nI\t0111\nJ\t10011000\nK\t0110\nL\t00100\nM\t10011001\nN\t10011110\nO\t00101\nP\t111\nQ\t10011111\nR\t1000\nS\t00110\nT\t00111\nU\t10011100\nV\t10011101\nW\t000010\nX\t10010010\nY\t10010011\nZ\t10010000\n)]\ncode_a[' '] = '101'\n\ncode_b = Hash[*%w(\n11011\t.\n11100\t,\n11101\t-\n11110\t'\n11111\t?\n)] \n(?A..?Z).each{|c|\n\tcode_b[\"%05b\" % (c.ord - ?A.ord)] = c\n}\ncode_b['11010'] = \" \"\n\nwhile gets\n\tputs $_\n\t.chomp\n\t.each_char\n\t.map{|c| code_a[c]}\n\t.join\n\t.scan(/.{1,5}/)\n\t.map{|s| code_b[s + ?0 * (5 - s.size)]}\n\t.join\nend"
  },
  {
    "language": "Ruby",
    "code": "dic = {\n  ' ' => '101',\n  '\\'' => '000000',\n  ',' => '000011',\n  '-' => '10010001',\n  '.' => '010001',\n  '?' => '000001',\n  'A' => '100101',\n  'B' => '10011010',\n  'C' => '0101',\n  'D' => '0001',\n  'E' => '110',\n  'F' => '01001',\n  'G' => '10011011',\n  'H' => '010000',\n  'I' => '0111',\n  'J' => '10011000',\n  'K' => '0110',\n  'L' => '00100',\n  'M' => '10011001',\n  'N' => '10011110',\n  'O' => '00101',\n  'P' => '111',\n  'Q' => '10011111',\n  'R' => '1000',\n  'S' => '00110',\n  'T' => '00111',\n  'U' => '10011100',\n  'V' => '10011101',\n  'W' => '000010',\n  'X' => '10010010',\n  'Y' => '10010011',\n  'Z' => '10010000',\n}\n\nreadlines.each do |l|\n  a = ''\n  l2 = l.chomp\n  l2.each_char do |c|\n    a += dic[c]\n  end\n\n  if a.length % 5 != 0\n    a += \"0\" * (5 - a.length % 5)\n  end\n\n  a2 = a.scan(/.{5}|.+\\Z/)\n\n  a2.each do |elem|\n    c = (\"0b\" + elem).oct\n    if c < 26 then print (c+65).chr end\n    if c == 26\n      print ' '\n    elsif c == 27\n      print '.'\n    elsif c == 28\n      print ','\n    elsif c == 29\n      print '-'\n    elsif c == 30\n      print '\\''\n    elsif c == 31\n      print '?'\n    end\n  end\n  puts\nend"
  },
  {
    "language": "Ruby",
    "code": "table1 = {\"'\"=>\"000000\", \",\"=>\"000011\", \"-\"=>\"10010001\", \".\"=>\"010001\",\n  \"?\"=>\"000001\", \"A\"=>\"100101\", \"B\"=>\"10011010\", \"C\"=>\"0101\", \"D\"=>\"0001\",\n  \"E\"=>\"110\", \"F\"=>\"01001\", \"G\"=>\"10011011\", \"H\"=>\"010000\", \"I\"=>\"0111\",\n  \"J\"=>\"10011000\", \"K\"=>\"0110\", \"L\"=>\"00100\", \"M\"=>\"10011001\",\n  \"N\"=>\"10011110\", \"O\"=>\"00101\", \"P\"=>\"111\", \"Q\"=>\"10011111\", \"R\"=>\"1000\",\n  \"S\"=>\"00110\", \"T\"=>\"00111\", \"U\"=>\"10011100\", \"V\"=>\"10011101\",\n  \"W\"=>\"000010\", \"X\"=>\"10010010\", \"Y\"=>\"10010011\", \"Z\"=>\"10010000\", \" \"=>\"101\"}\ntable2 = {\"00000\"=>\"A\", \"00001\"=>\"B\", \"00010\"=>\"C\", \"00011\"=>\"D\", \"00100\"=>\"E\",\n  \"00101\"=>\"F\", \"00110\"=>\"G\", \"00111\"=>\"H\", \"01000\"=>\"I\", \"01001\"=>\"J\",\n  \"01010\"=>\"K\", \"01011\"=>\"L\", \"01100\"=>\"M\", \"01101\"=>\"N\", \"01110\"=>\"O\",\n  \"01111\"=>\"P\", \"10000\"=>\"Q\", \"10001\"=>\"R\", \"10010\"=>\"S\", \"10011\"=>\"T\",\n  \"10100\"=>\"U\", \"10101\"=>\"V\", \"10110\"=>\"W\", \"10111\"=>\"X\", \"11000\"=>\"Y\",\n  \"11001\"=>\"Z\", \"11010\"=>\" \", \"11011\"=>\".\", \"11100\"=>\",\", \"11101\"=>\"-\",\n  \"11110\"=>\"'\", \"11111\"=>\"?\"}\n\n$<.readlines.each do |line|\n  line.chomp!\n  text = \"\"\n  line.each_char {|c| text += table1[c]}\n  l = text.length % 5\n  text += \"0\" * (5 - l) if l > 0\n  \n  result = \"\"\n  until text.empty?\n     result += table2[text[0, 5]]\n     text = text[5..-1]\n  end\n  puts result\nend\n"
  },
  {
    "language": "Ruby",
    "code": "r=(?A..?Z).to_a\np ((l=gets.gsub(/./,Hash[(\" ',-.?\".chars+r).zip\"dggigggieedfigeiefiifdieffiigiii\".bytes.map{|i|i-97}.zip(\"836$D4X-849<.C:+97,18:2;9:/05%&#\".bytes.map{|c|c<51?c+109:c-51}).map{|a|\"%0*b\"%a}]))+?0*((100-l.size)%5)).gsub(/.{5}/,Hash[(0..31).map{|i|\"%05b\"%[i]}.zip r+\" .,-'?\".chars])"
  },
  {
    "language": "Ruby",
    "code": "def encode1(str)\n  encodetable1 = {\n    ' ' => '101',\n    '\\'' => '000000',\n    ',' => '000011',\n    '-' => '10010001',\n    '.' => '010001',\n    '?' => '000001',\n    'A' => '100101',\n    'B' => '10011010',\n    'C' => '0101',\n    'D' => '0001',\n    'E' => '110',\n    'F' => '01001',\n    'G' => '10011011',\n    'H' => '010000',\n    'I' => '0111',\n    'J' => '10011000',\n    'K' => '0110',\n    'L' => '00100',\n    'M' => '10011001',\n    'N' => '10011110',\n    'O' => '00101',\n    'P' => '111',\n    'Q' => '10011111',\n    'R' => '1000',\n    'S' => '00110',\n    'T' => '00111',\n    'U' => '10011100',\n    'V' => '10011101',\n    'W' => '000010',\n    'X' => '10010010',\n    'Y' => '10010011',\n    'Z' => '10010000'\n  }\n  encoded = String.new\n  str.each_char{|c| encoded += encodetable1[c] }\n  while encoded.size % 5 != 0\n    encoded += \"0\"\n  end\n  return encoded\nend\n\ndef encode2(str)\n  encodetable2 = {\n    '00000' => 'A',\n    '00001' => 'B',\n    '00010' => 'C',\n    '00011' => 'D',\n    '00100' => 'E',\n    '00101' => 'F',\n    '00110' => 'G',\n    '00111' => 'H',\n    '01000' => 'I',\n    '01001' => 'J',\n    '01010' => 'K',\n    '01011' => 'L',\n    '01100' => 'M',\n    '01101' => 'N',\n    '01110' => 'O',\n    '01111' => 'P',\n    '10000' => 'Q',\n    '10001' => 'R',\n    '10010' => 'S',\n    '10011' => 'T',\n    '10100' => 'U',\n    '10101' => 'V',\n    '10110' => 'W',\n    '10111' => 'X',\n    '11000' => 'Y',\n    '11001' => 'Z',\n    '11010' => ' ',\n    '11011' => '.',\n    '11100' => ',',\n    '11101' => '-',\n    '11110' => '\\'',\n    '11111' => '?'\n  }\n  encoded = String.new\n  source = encode1(str)\n  while source.empty? == false\n    encoded += encodetable2[source.slice!(0,5)]\n  end\n  return encoded\nend\n\nwhile input = $stdin.gets.chomp\n  puts encode2(input)\nend"
  },
  {
    "language": "Ruby",
    "code": "def main(input = STDIN)\n  plane = {\" \" => \"101\", \"'\" => \"000000\", \",\" => \"000011\", \".\" => \"010001\", \"?\" => \"000001\", \"A\" => \"100101\", \"B\" => \"10011010\", \"C\" => \"0101\", \"D\" => \"0001\", \"E\" => \"110\", \"F\" => \"01001\", \"G\" => \"10011011\", \"H\" => \"010000\", \"I\" => \"0111\", \"J\" => \"10011000\", \"K\" => \"0110\", \"L\" => \"00100\", \"M\" => \"10011001\", \"N\" => \"10011110\", \"O\" => \"00101\", \"P\" => \"111\", \"Q\" => \"10011111\", \"R\" => \"1000\", \"S\" => \"00110\", \"T\" => \"00111\", \"U\" => \"10011100\", \"V\" => \"10011101\", \"W\" => \"000010\", \"X\" => \"10010010\", \"Y\" => \"10010011\", \"Z\" => \"10010000\"}\n  code = [\"A\"]\n  for i in 1..25\n    code[i] = code[i - 1].next\n  end\n  code.push \" \", \".\", \",\", \"-\", \"'\", \"?\"\n  while text = input.gets\n    output = []\n    coded = text.chomp.split(//).map{|char|plane[char]}.join\n    coded << \"0\" * (-(coded.size + 1) % 5)\n    for i in 0..coded.size / 5\n      output << code[coded.slice(i * 5, 5).to_i(2)]\n    end\n    puts output.join\n  end\nend\nmain"
  },
  {
    "language": "Ruby",
    "code": "class String\n  @@encode = {}\n  @@decode = {}\n\n  def encode\n    res = split('').map{ |c| @@encode[c] }.join\n\n    while res.size % 5 != 0\n      res << '0'\n    end\n\n    res\n  end\n\n  def decode\n    res = \"\"\n    s = 0\n\n    size.times do |t|\n      c = @@decode[self[s..t]]\n      if c then\n        res += c\n        s = t + 1\n      end\n    end\n\n    res\n  end\n\n\n  @@encode[\" \"] = \"101\"\n  @@encode[\"'\"] = \"000000\"\n  @@encode[\",\"] = \"000011\"\n  @@encode[\"-\"] = \"10010001\"\n  @@encode[\".\"] = \"010001\"\n\n  @@encode[\"?\"] = \"000001\"\n  @@encode[\"A\"] = \"100101\"\n  @@encode[\"B\"] = \"10011010\"\n  @@encode[\"C\"] = \"0101\"\n  @@encode[\"D\"] = \"0001\"\n  @@encode[\"E\"] = \"110\"\n  @@encode[\"F\"] = \"01001\"\n  @@encode[\"G\"] = \"10011011\"\n\n  @@encode[\"H\"] = \"010000\"\n  @@encode[\"I\"] = \"0111\"\n  @@encode[\"J\"] = \"10011000\"\n  @@encode[\"K\"] = \"0110\"\n  @@encode[\"L\"] = \"00100\"\n  @@encode[\"M\"] = \"10011001\"\n  @@encode[\"N\"] = \"10011110\"\n\n  @@encode[\"O\"] = \"00101\"\n  @@encode[\"P\"] = \"111\"\n  @@encode[\"Q\"] = \"10011111\"\n  @@encode[\"R\"] = \"1000\"\n  @@encode[\"S\"] = \"00110\"\n  @@encode[\"T\"] = \"00111\"\n  @@encode[\"U\"] = \"10011100\"\n\n  @@encode[\"V\"] = \"10011101\"\n  @@encode[\"W\"] = \"000010\"\n  @@encode[\"X\"] = \"10010010\"\n  @@encode[\"Y\"] = \"10010011\"\n  @@encode[\"Z\"] = \"10010000\"\n\n  @@decode[\"00000\"] = \"A\"\n  @@decode[\"00001\"] = \"B\"\n  @@decode[\"00010\"] = \"C\"\n  @@decode[\"00011\"] = \"D\"\n  @@decode[\"00100\"] = \"E\"\n  @@decode[\"00101\"] = \"F\"\n  @@decode[\"00110\"] = \"G\"\n\n  @@decode[\"00111\"] = \"H\"\n  @@decode[\"01000\"] = \"I\"\n  @@decode[\"01001\"] = \"J\"\n  @@decode[\"01010\"] = \"K\"\n  @@decode[\"01011\"] = \"L\"\n  @@decode[\"01100\"] = \"M\"\n  @@decode[\"01101\"] = \"N\"\n\n  @@decode[\"01110\"] = \"O\"\n  @@decode[\"01111\"] = \"P\"\n  @@decode[\"10000\"] = \"Q\"\n  @@decode[\"10001\"] = \"R\"\n  @@decode[\"10010\"] = \"S\"\n  @@decode[\"10011\"] = \"T\"\n  @@decode[\"10100\"] = \"U\"\n\n  @@decode[\"10101\"] = \"V\"\n  @@decode[\"10110\"] = \"W\"\n  @@decode[\"10111\"] = \"X\"\n  @@decode[\"11000\"] = \"Y\"\n  @@decode[\"11001\"] = \"Z\"\n\n  @@decode[\"11010\"] = \" \"\n  @@decode[\"11011\"] = \".\"\n  @@decode[\"11100\"] = \",\"\n  @@decode[\"11101\"] = \"-\"\n  @@decode[\"11110\"] = \"'\"\n  @@decode[\"11111\"] = \"?\"\nend\n\n\nwhile line = gets\n  puts line.encode.decode\nend"
  },
  {
    "language": "Ruby",
    "code": "enc = {}\nenc[\" \"] = \"101\"\nenc[\"'\"] = \"000000\"\nenc[\",\"] = \"000011\"\nenc[\"-\"] = \"10010001\"\nenc[\".\"] = \"010001\"\nenc[\"?\"] = \"000001\"\nenc[\"A\"] = \"100101\"\nenc[\"B\"] = \"10011010\"\nenc[\"C\"] = \"0101\"\nenc[\"D\"] = \"0001\"\nenc[\"E\"] = \"110\"\nenc[\"F\"] = \"01001\"\nenc[\"G\"] = \"10011011\"\nenc[\"H\"] = \"010000\"\nenc[\"I\"] = \"0111\"\nenc[\"J\"] = \"10011000\"\nenc[\"K\"] = \"0110\"\nenc[\"L\"] = \"00100\"\nenc[\"M\"] = \"10011001\"\nenc[\"N\"] = \"10011110\"\nenc[\"O\"] = \"00101\"\nenc[\"P\"] = \"111\"\nenc[\"Q\"] = \"10011111\"\nenc[\"R\"] = \"1000\"\nenc[\"S\"] = \"00110\"\nenc[\"T\"] = \"00111\"\nenc[\"U\"] = \"10011100\"\nenc[\"V\"] = \"10011101\"\nenc[\"W\"] = \"000010\"\nenc[\"X\"] = \"10010010\"\nenc[\"Y\"] = \"10010011\"\nenc[\"Z\"] = \"10010000\"\n\ndecode_chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"\ndec = {}\ndecode_chars.split(\"\").each_with_index{|s, i|\n  dec[sprintf(\"%05d\", i.to_s(2))] = s\n}\n\nreadlines.map(&:chomp).each{|line|\n  str = \"\"\n  line.split(\"\").each{|c|\n    str += enc[c]\n  }\n  while str.size % 5 != 0\n    str += \"0\"\n  end\n\n  (str.size / 5).times{|i|\n    print dec[str[i*5,5]]\n  }\n\n  puts\n}"
  },
  {
    "language": "Ruby",
    "code": "class String\n  @@encode = {}\n  @@decode = {}\n\n  def encode\n    res = split('').map{ |c| @@encode[c] }.join\n    res + '0' * (5 - res.size % 5) if res.size != 5\n  end\n\n  def decode\n    scan(/.{5}/).map{ |s| @@decode[s] }.join\n  end\n\n\n  @@encode[\" \"] = \"101\"\n  @@encode[\"'\"] = \"000000\"\n  @@encode[\",\"] = \"000011\"\n  @@encode[\"-\"] = \"10010001\"\n  @@encode[\".\"] = \"010001\"\n\n  @@encode[\"?\"] = \"000001\"\n  @@encode[\"A\"] = \"100101\"\n  @@encode[\"B\"] = \"10011010\"\n  @@encode[\"C\"] = \"0101\"\n  @@encode[\"D\"] = \"0001\"\n  @@encode[\"E\"] = \"110\"\n  @@encode[\"F\"] = \"01001\"\n  @@encode[\"G\"] = \"10011011\"\n\n  @@encode[\"H\"] = \"010000\"\n  @@encode[\"I\"] = \"0111\"\n  @@encode[\"J\"] = \"10011000\"\n  @@encode[\"K\"] = \"0110\"\n  @@encode[\"L\"] = \"00100\"\n  @@encode[\"M\"] = \"10011001\"\n  @@encode[\"N\"] = \"10011110\"\n\n  @@encode[\"O\"] = \"00101\"\n  @@encode[\"P\"] = \"111\"\n  @@encode[\"Q\"] = \"10011111\"\n  @@encode[\"R\"] = \"1000\"\n  @@encode[\"S\"] = \"00110\"\n  @@encode[\"T\"] = \"00111\"\n  @@encode[\"U\"] = \"10011100\"\n\n  @@encode[\"V\"] = \"10011101\"\n  @@encode[\"W\"] = \"000010\"\n  @@encode[\"X\"] = \"10010010\"\n  @@encode[\"Y\"] = \"10010011\"\n  @@encode[\"Z\"] = \"10010000\"\n\n  @@decode[\"00000\"] = \"A\"\n  @@decode[\"00001\"] = \"B\"\n  @@decode[\"00010\"] = \"C\"\n  @@decode[\"00011\"] = \"D\"\n  @@decode[\"00100\"] = \"E\"\n  @@decode[\"00101\"] = \"F\"\n  @@decode[\"00110\"] = \"G\"\n\n  @@decode[\"00111\"] = \"H\"\n  @@decode[\"01000\"] = \"I\"\n  @@decode[\"01001\"] = \"J\"\n  @@decode[\"01010\"] = \"K\"\n  @@decode[\"01011\"] = \"L\"\n  @@decode[\"01100\"] = \"M\"\n  @@decode[\"01101\"] = \"N\"\n\n  @@decode[\"01110\"] = \"O\"\n  @@decode[\"01111\"] = \"P\"\n  @@decode[\"10000\"] = \"Q\"\n  @@decode[\"10001\"] = \"R\"\n  @@decode[\"10010\"] = \"S\"\n  @@decode[\"10011\"] = \"T\"\n  @@decode[\"10100\"] = \"U\"\n\n  @@decode[\"10101\"] = \"V\"\n  @@decode[\"10110\"] = \"W\"\n  @@decode[\"10111\"] = \"X\"\n  @@decode[\"11000\"] = \"Y\"\n  @@decode[\"11001\"] = \"Z\"\n\n  @@decode[\"11010\"] = \" \"\n  @@decode[\"11011\"] = \".\"\n  @@decode[\"11100\"] = \",\"\n  @@decode[\"11101\"] = \"-\"\n  @@decode[\"11110\"] = \"'\"\n  @@decode[\"11111\"] = \"?\"\nend\n\n\nwhile line = gets\n  puts line.encode.decode\nend"
  },
  {
    "language": "Ruby",
    "code": "T = {\n  ' ' => '101',\n  ?' => '000000',\n  ?, => '000011',\n  ?- => '10010001',\n  ?. => '010001',\n  ?? => '000001',\n  ?A => '100101',\n  ?B => '10011010',\n  ?C => '0101',\n  ?D => '0001',\n  ?E => '110',\n  ?F => '01001',\n  ?G => '10011011',\n  ?H => '010000',\n  ?I => '0111',\n  ?J => '10011000',\n  ?K => '0110',\n  ?L => '00100',\n  ?M => '10011001',\n  ?N => '10011110',\n  ?O => '00101',\n  ?P => '111',\n  ?Q => '10011111',\n  ?R => '1000',\n  ?S => '00110',\n  ?T => '00111',\n  ?U => '10011100',\n  ?V => '10011101',\n  ?W => '000010',\n  ?X => '10010010',\n  ?Y => '10010011',\n  ?Z => '10010000',\n}.freeze\nS = {\n  0b00000 => ?A,\n  0b00001 => ?B,\n  0b00010 => ?C,\n  0b00011 => ?D,\n  0b00100 => ?E,\n  0b00101 => ?F,\n  0b00110 => ?G,\n  0b00111 => ?H,\n  0b01000 => ?I,\n  0b01001 => ?J,\n  0b01010 => ?K,\n  0b01011 => ?L,\n  0b01100 => ?M,\n  0b01101 => ?N,\n  0b01110 => ?O,\n  0b01111 => ?P,\n  0b10000 => ?Q,\n  0b10001 => ?R,\n  0b10010 => ?S,\n  0b10011 => ?T,\n  0b10100 => ?U,\n  0b10101 => ?V,\n  0b10110 => ?W,\n  0b10111 => ?X,\n  0b11000 => ?Y,\n  0b11001 => ?Z,\n  0b11010 => ' ',\n  0b11011 => ?.,\n  0b11100 => ?,,\n  0b11101 => ?-,\n  0b11110 => ?',\n  0b11111 => ??,\n}.freeze\n$<.each_line do |l|\n  s = ''\n  l.chomp.each_char {|c| s << T[c] }\n  s << ?0 * (5 - s.size % 5)\n  puts s.each_char.each_slice(5).map {|a| S[a.join.to_i 2] }.join\nend"
  },
  {
    "language": "Ruby",
    "code": "Encodetable1 = {\n  ' ' => \"101\",\n  '\\'' => \"000000\",\n  ',' => \"000011\",\n  '-' => \"10010001\",\n  '.' => \"010001\",\n  '?' => \"000001\",\n  'A' => \"100101\",\n  'B' => \"10011010\",\n  'C' => \"0101\",\n  'D' => \"0001\",\n  'E' => \"110\",\n  'F' => \"01001\",\n  'G' => \"10011011\",\n  'H' => \"010000\",\n  'I' => \"0111\",\n  'J' => \"10011000\",\n  'K' => \"0110\",\n  'L' => \"00100\",\n  'M' => \"10011001\",\n  'N' => \"10011110\",\n  'O' => \"00101\",\n  'P' => \"111\",\n  'Q' => \"10011111\",\n  'R' => \"1000\",\n  'S' => \"00110\",\n  'T' => \"00111\",\n  'U' => \"10011100\",\n  'V' => \"10011101\",\n  'W' => \"000010\",\n  'X' => \"10010010\",\n  'Y' => \"10010011\",\n  'Z' => \"10010000\"\n}\nEncodetable2 = {\n  \"00000\" => 'A',\n  \"00001\" => 'B',\n  \"00010\" => 'C',\n  \"00011\" => 'D',\n  \"00100\" => 'E',\n  \"00101\" => 'F',\n  \"00110\" => 'G',\n  \"00111\" => 'H',\n  \"01000\" => 'I',\n  \"01001\" => 'J',\n  \"01010\" => 'K',\n  \"01011\" => 'L',\n  \"01100\" => 'M',\n  \"01101\" => 'N',\n  \"01110\" => 'O',\n  \"01111\" => 'P',\n  \"10000\" => 'Q',\n  \"10001\" => 'R',\n  \"10010\" => 'S',\n  \"10011\" => 'T',\n  \"10100\" => 'U',\n  \"10101\" => 'V',\n  \"10110\" => 'W',\n  \"10111\" => 'X',\n  \"11000\" => 'Y',\n  \"11001\" => 'Z',\n  \"11010\" => ' ',\n  \"11011\" => '.',\n  \"11100\" => ',',\n  \"11101\" => '-',\n  \"11110\" => '\\'',\n  \"11111\" => '?'\n}\n\ndef encrypt1(str)\n  encrypted = String.new\n  str.each_char{|c| encrypted += Encodetable1[c] }\n  while encrypted.size % 5 != 0\n    encrypted += \"0\"\n  end\n  return encrypted\nend\n\ndef encrypt2(str)\n  encrypted = String.new\n  source = encrypt1(str)\n  while !source.empty?\n    encrypted += Encodetable2[source.slice!(0,5)]\n  end\n  return encrypted\nend\n\nwhile input = $stdin.gets.chomp\n  p encrypt2(input)\nend"
  },
  {
    "language": "Ruby",
    "code": "#!ruby -pl\nr=[*?A..?Z]\n$_=($_.gsub!(/./,Hash[(\" ',-.?\".chars+r).zip\"dggigggieedfigeiefiifdieffiigiii\".bytes.map{|i|i-97}.zip(\"836$D4X-849<.C:+97,18:2;9:/05%&#\".bytes.map{|c|c<51?c+109:c-51}).map{|a|\"%0*b\"%a}])+?0*((100-$_.size)%5)).gsub(/.{5}/,Hash[(0..31).map{|i|\"%05b\"%[i]}.zip r+\" .,-'?\".chars])"
  },
  {
    "language": "Ruby",
    "code": "class String\n  @@encode = {}\n  @@decode = {}\n\n  def encode\n    res = split('').map{ |c| @@encode[c] }.join\n    res + '0' * (5 - res.size % 5)\n  end\n\n  def decode\n    scan(/.{5}/).map{ |s| @@decode[s] }.join\n  end\n\n\n  @@encode[\" \"] = \"101\"\n  @@encode[\"'\"] = \"000000\"\n  @@encode[\",\"] = \"000011\"\n  @@encode[\"-\"] = \"10010001\"\n  @@encode[\".\"] = \"010001\"\n\n  @@encode[\"?\"] = \"000001\"\n  @@encode[\"A\"] = \"100101\"\n  @@encode[\"B\"] = \"10011010\"\n  @@encode[\"C\"] = \"0101\"\n  @@encode[\"D\"] = \"0001\"\n  @@encode[\"E\"] = \"110\"\n  @@encode[\"F\"] = \"01001\"\n  @@encode[\"G\"] = \"10011011\"\n\n  @@encode[\"H\"] = \"010000\"\n  @@encode[\"I\"] = \"0111\"\n  @@encode[\"J\"] = \"10011000\"\n  @@encode[\"K\"] = \"0110\"\n  @@encode[\"L\"] = \"00100\"\n  @@encode[\"M\"] = \"10011001\"\n  @@encode[\"N\"] = \"10011110\"\n\n  @@encode[\"O\"] = \"00101\"\n  @@encode[\"P\"] = \"111\"\n  @@encode[\"Q\"] = \"10011111\"\n  @@encode[\"R\"] = \"1000\"\n  @@encode[\"S\"] = \"00110\"\n  @@encode[\"T\"] = \"00111\"\n  @@encode[\"U\"] = \"10011100\"\n\n  @@encode[\"V\"] = \"10011101\"\n  @@encode[\"W\"] = \"000010\"\n  @@encode[\"X\"] = \"10010010\"\n  @@encode[\"Y\"] = \"10010011\"\n  @@encode[\"Z\"] = \"10010000\"\n\n  @@decode[\"00000\"] = \"A\"\n  @@decode[\"00001\"] = \"B\"\n  @@decode[\"00010\"] = \"C\"\n  @@decode[\"00011\"] = \"D\"\n  @@decode[\"00100\"] = \"E\"\n  @@decode[\"00101\"] = \"F\"\n  @@decode[\"00110\"] = \"G\"\n\n  @@decode[\"00111\"] = \"H\"\n  @@decode[\"01000\"] = \"I\"\n  @@decode[\"01001\"] = \"J\"\n  @@decode[\"01010\"] = \"K\"\n  @@decode[\"01011\"] = \"L\"\n  @@decode[\"01100\"] = \"M\"\n  @@decode[\"01101\"] = \"N\"\n\n  @@decode[\"01110\"] = \"O\"\n  @@decode[\"01111\"] = \"P\"\n  @@decode[\"10000\"] = \"Q\"\n  @@decode[\"10001\"] = \"R\"\n  @@decode[\"10010\"] = \"S\"\n  @@decode[\"10011\"] = \"T\"\n  @@decode[\"10100\"] = \"U\"\n\n  @@decode[\"10101\"] = \"V\"\n  @@decode[\"10110\"] = \"W\"\n  @@decode[\"10111\"] = \"X\"\n  @@decode[\"11000\"] = \"Y\"\n  @@decode[\"11001\"] = \"Z\"\n\n  @@decode[\"11010\"] = \" \"\n  @@decode[\"11011\"] = \".\"\n  @@decode[\"11100\"] = \",\"\n  @@decode[\"11101\"] = \"-\"\n  @@decode[\"11110\"] = \"'\"\n  @@decode[\"11111\"] = \"?\"\nend\n\n\nwhile line = gets\n  puts line.encode.decode\nend"
  },
  {
    "language": "Ruby",
    "code": "r=(?A..?Z).to_a\nputs ((l=gets.chomp.gsub(/./,Hash[(\" ',-.?\".chars+r).zip\"dggigggieedfigeiefiifdieffiigiii\".bytes.map{|i|i-97}.zip(\"836$D4X-849<.C:+97,18:2;9:/05%&#\".bytes.map{|c|c<51?c+109:c-51}).map{|a|\"%0*b\"%a}]))+?0*((100-l.size)%5)).gsub(/.{5}/,Hash[(0..31).map{|i|\"%05b\"%[i]}.zip r+\" .,-'?\".chars])"
  },
  {
    "language": "Ruby",
    "code": "Encodetable1 = {\n  ' ' => \"101\",\n  '\\'' => \"000000\",\n  ',' => \"000011\",\n  '-' => \"10010001\",\n  '.' => \"010001\",\n  '?' => \"000001\",\n  'A' => \"100101\",\n  'B' => \"10011010\",\n  'C' => \"0101\",\n  'D' => \"0001\",\n  'E' => \"110\",\n  'F' => \"01001\",\n  'G' => \"10011011\",\n  'H' => \"010000\",\n  'I' => \"0111\",\n  'J' => \"10011000\",\n  'K' => \"0110\",\n  'L' => \"00100\",\n  'M' => \"10011001\",\n  'N' => \"10011110\",\n  'O' => \"00101\",\n  'P' => \"111\",\n  'Q' => \"10011111\",\n  'R' => \"1000\",\n  'S' => \"00110\",\n  'T' => \"00111\",\n  'U' => \"10011100\",\n  'V' => \"10011101\",\n  'W' => \"000010\",\n  'X' => \"10010010\",\n  'Y' => \"10010011\",\n  'Z' => \"10010000\"\n}\nEncodetable2 = {\n  \"00000\" => 'A',\n  \"00001\" => 'B',\n  \"00010\" => 'C',\n  \"00011\" => 'D',\n  \"00100\" => 'E',\n  \"00101\" => 'F',\n  \"00110\" => 'G',\n  \"00111\" => 'H',\n  \"01000\" => 'I',\n  \"01001\" => 'J',\n  \"01010\" => 'K',\n  \"01011\" => 'L',\n  \"01100\" => 'M',\n  \"01101\" => 'N',\n  \"01110\" => 'O',\n  \"01111\" => 'P',\n  \"10000\" => 'Q',\n  \"10001\" => 'R',\n  \"10010\" => 'S',\n  \"10011\" => 'T',\n  \"10100\" => 'U',\n  \"10101\" => 'V',\n  \"10110\" => 'W',\n  \"10111\" => 'X',\n  \"11000\" => 'Y',\n  \"11001\" => 'Z',\n  \"11010\" => ' ',\n  \"11011\" => '.',\n  \"11100\" => ',',\n  \"11101\" => '-',\n  \"11110\" => '\\'',\n  \"11111\" => '?'\n}\n\ndef encrypt1(str)\n  encrypted = String.new\n  str.each_char{|c| encrypted += Encodetable1[c] }\n  while encrypted.size % 5 != 0\n    encrypted += \"0\"\n  end\n  return encrypted\nend\n\ndef encrypt2(str)\n  encrypted = String.new\n  source = encrypt1(str)\n  while !source.empty?\n    encrypted += Encodetable2[source.slice!(0,5)].to_s\n  end\n  return encrypted\nend\n\nwhile input = $stdin.gets.chomp\n  puts encrypt2(input)\nend"
  },
  {
    "language": "Ruby",
    "code": "r=(?A..?Z).to_a\nputs ((l=gets.chop.gsub(/./,Hash[(\" ',-.?\".chars+r).zip\"dggigggieedfigeiefiifdieffiigiii\".bytes.map{|i|i-97}.zip(\"836$D4X-849<.C:+97,18:2;9:/05%&#\".bytes.map{|c|c<51?c+109:c-51}).map{|a|\"%0*b\"%a}]))+?0*((100-l.size)%5)).gsub(/.{5}/,Hash[(0..31).map{|i|\"%05b\"%[i]}.zip r+\" .,-'?\".chars])"
  },
  {
    "language": "Ruby",
    "code": "T = {\n  ' ' => '101',\n  ?' => '000000',\n  ?, => '000011',\n  ?- => '10010001',\n  ?. => '010001',\n  ?? => '000001',\n  ?A => '100101',\n  ?B => '10011010',\n  ?C => '0101',\n  ?D => '0001',\n  ?E => '110',\n  ?F => '01001',\n  ?G => '10011011',\n  ?H => '010000',\n  ?I => '0111',\n  ?J => '10011000',\n  ?K => '0110',\n  ?L => '00100',\n  ?M => '10011001',\n  ?N => '10011110',\n  ?O => '00101',\n  ?P => '111',\n  ?Q => '10011111',\n  ?R => '1000',\n  ?S => '00110',\n  ?T => '00111',\n  ?U => '10011100',\n  ?V => '10011101',\n  ?W => '000010',\n  ?X => '10010010',\n  ?Y => '10010011',\n  ?Z => '10010000',\n}.freeze\nS = {\n  0b00000 => ?A,\n  0b00001 => ?B,\n  0b00010 => ?C,\n  0b00011 => ?D,\n  0b00100 => ?E,\n  0b00101 => ?F,\n  0b00110 => ?G,\n  0b00111 => ?H,\n  0b01000 => ?I,\n  0b01001 => ?J,\n  0b01010 => ?K,\n  0b01011 => ?L,\n  0b01100 => ?M,\n  0b01101 => ?N,\n  0b01110 => ?O,\n  0b01111 => ?P,\n  0b10000 => ?Q,\n  0b10001 => ?R,\n  0b10010 => ?S,\n  0b10011 => ?T,\n  0b10100 => ?U,\n  0b10101 => ?V,\n  0b10110 => ?W,\n  0b10111 => ?X,\n  0b11000 => ?Y,\n  0b11001 => ?Z,\n  0b11010 => ' ',\n  0b11011 => ?.,\n  0b11100 => ?,,\n  0b11101 => ?-,\n  0b11110 => ?',\n  0b11111 => ??,\n}.freeze\ns = ''\n$<.read.chomp.tr(?\\n, ' ').each_char {|c| s << T[c] }\ns << ?0 * (5 - s.size % 5)\nputs s.each_char.each_slice(5).map {|a| S[a.join.to_i 2] }.join"
  },
  {
    "language": "Ruby",
    "code": "r=(?A..?Z).to_a\nputs ((l=gets.gsub(/./,Hash[(\" ',-.?\".chars+r).zip\"dggigggieedfigeiefiifdieffiigiii\".bytes.map{|i|i-97}.zip(\"836$D4X-849<.C:+97,18:2;9:/05%&#\".bytes.map{|c|c<51?c+109:c-51}).map{|a|\"%0*b\"%a}]))+?0*((100-l.size)%5)).gsub(/.{5}/,Hash[(0..31).map{|i|\"%05b\"%[i]}.zip r+\" .,-'?\".chars])"
  },
  {
    "language": "Ruby",
    "code": "class String\n  @@encode = {}\n  @@decode = {}\n\n  def encode\n    res = split('').map{ |c| @@encode[c] }.join\n    res + '0' * (5 - res.size % 5) % 5\n  end\n\n  def decode\n    scan(/.{5}/).map{ |s| @@decode[s] }.join\n  end\n\n\n  @@encode[\" \"] = \"101\"\n  @@encode[\"'\"] = \"000000\"\n  @@encode[\",\"] = \"000011\"\n  @@encode[\"-\"] = \"10010001\"\n  @@encode[\".\"] = \"010001\"\n\n  @@encode[\"?\"] = \"000001\"\n  @@encode[\"A\"] = \"100101\"\n  @@encode[\"B\"] = \"10011010\"\n  @@encode[\"C\"] = \"0101\"\n  @@encode[\"D\"] = \"0001\"\n  @@encode[\"E\"] = \"110\"\n  @@encode[\"F\"] = \"01001\"\n  @@encode[\"G\"] = \"10011011\"\n\n  @@encode[\"H\"] = \"010000\"\n  @@encode[\"I\"] = \"0111\"\n  @@encode[\"J\"] = \"10011000\"\n  @@encode[\"K\"] = \"0110\"\n  @@encode[\"L\"] = \"00100\"\n  @@encode[\"M\"] = \"10011001\"\n  @@encode[\"N\"] = \"10011110\"\n\n  @@encode[\"O\"] = \"00101\"\n  @@encode[\"P\"] = \"111\"\n  @@encode[\"Q\"] = \"10011111\"\n  @@encode[\"R\"] = \"1000\"\n  @@encode[\"S\"] = \"00110\"\n  @@encode[\"T\"] = \"00111\"\n  @@encode[\"U\"] = \"10011100\"\n\n  @@encode[\"V\"] = \"10011101\"\n  @@encode[\"W\"] = \"000010\"\n  @@encode[\"X\"] = \"10010010\"\n  @@encode[\"Y\"] = \"10010011\"\n  @@encode[\"Z\"] = \"10010000\"\n\n  @@decode[\"00000\"] = \"A\"\n  @@decode[\"00001\"] = \"B\"\n  @@decode[\"00010\"] = \"C\"\n  @@decode[\"00011\"] = \"D\"\n  @@decode[\"00100\"] = \"E\"\n  @@decode[\"00101\"] = \"F\"\n  @@decode[\"00110\"] = \"G\"\n\n  @@decode[\"00111\"] = \"H\"\n  @@decode[\"01000\"] = \"I\"\n  @@decode[\"01001\"] = \"J\"\n  @@decode[\"01010\"] = \"K\"\n  @@decode[\"01011\"] = \"L\"\n  @@decode[\"01100\"] = \"M\"\n  @@decode[\"01101\"] = \"N\"\n\n  @@decode[\"01110\"] = \"O\"\n  @@decode[\"01111\"] = \"P\"\n  @@decode[\"10000\"] = \"Q\"\n  @@decode[\"10001\"] = \"R\"\n  @@decode[\"10010\"] = \"S\"\n  @@decode[\"10011\"] = \"T\"\n  @@decode[\"10100\"] = \"U\"\n\n  @@decode[\"10101\"] = \"V\"\n  @@decode[\"10110\"] = \"W\"\n  @@decode[\"10111\"] = \"X\"\n  @@decode[\"11000\"] = \"Y\"\n  @@decode[\"11001\"] = \"Z\"\n\n  @@decode[\"11010\"] = \" \"\n  @@decode[\"11011\"] = \".\"\n  @@decode[\"11100\"] = \",\"\n  @@decode[\"11101\"] = \"-\"\n  @@decode[\"11110\"] = \"'\"\n  @@decode[\"11111\"] = \"?\"\nend\n\n\nwhile line = gets\n  puts line.encode.decode\nend"
  },
  {
    "language": "PHP",
    "code": "<?php\n\n$chars = array_merge(range('A', 'Z'), explode('|', ' |.|,|-|\\'|?'));\n$encode = explode(',',\n    '100101,10011010,0101,0001,110,01001,10011011,010000,0111,10011000,'\n    . '0110,00100,10011001,10011110,00101,111,10011111,1000,00110,00111,'\n    . '10011100,10011101,000010,10010010,10010011,10010000,101,000000,'\n    . '000011,10010001,010001,000001'\n);\n\n$str = trim(fgets(STDIN));\n$code = '';\nfor ($i = 0, $len = strlen($str); $i < $len; $i++) {\n    $ch = $str[$i];\n    $key = array_search($ch, $chars);\n    $code .= $encode[$key];\n}\n\n$code = str_split($code, 5);\n$str = array_pop($code);\n$code[] = str_pad($str, 5, '0');\nforeach ($code as $str) {\n    $key = bindec($str);\n    echo $chars[$key];\n}\necho PHP_EOL;"
  },
  {
    "language": "PHP",
    "code": "<?php\n\n$chars = array_merge(range('A', 'Z'), explode('|', ' |\\'|,|-|.|?'));\n$encode = explode(\n    ',',\n    '100101,10011010,0101,0001,110,01001,10011011,010000,0111,10011000,'\n    . '0110,00100,10011001,10011110,00101,111,10011111,1000,00110,00111,'\n    . '10011100,10011101,000010,10010010,10010011,10010000,101,000000,'\n    . '000011,10010001,010001,000001'\n);\n\nwhile (($line = trim(fgets(STDIN))) !== '') {\n    $code = '';\n    for ($i = 0, $len = strlen($line); $i < $len; $i++) {\n        $ch = $line[$i];\n        $key = array_search($ch, $chars);\n        $code .= $encode[$key];\n    }\n\n    $code = str_split($code, 5);\n    $str = array_pop($code);\n    $code[] = str_pad($str, 5, '0');\n    foreach ($code as $str) {\n        $key = bindec($str);\n        echo $chars[$key];\n    }\n    echo PHP_EOL;\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\n\n$encode = array(\n    ' ' => '101',\n    \"'\" => '000000',\n    ',' => '000011',\n    '-' => '10010001',\n    '.' => '010001',\n    '?' => '000001',\n    'A' => '100101',\n    'B' => '10011010',\n    'C' => '0101',\n    'D' => '0001',\n    'E' => '110',\n    'F' => '01001',\n    'G' => '10011011',\n    'H' => '010000',\n    'I' => '0111',\n    'J' => '10011000',\n    'K' => '0110',\n    'L' => '00100',\n    'M' => '10011001',\n    'N' => '10011110',\n    'O' => '00101',\n    'P' => '111',\n    'Q' => '10011111',\n    'R' => '1000',\n    'S' => '00110',\n    'T' => '00111',\n    'U' => '10011100',\n    'V' => '10011101',\n    'W' => '000010',\n    'X' => '10010010',\n    'Y' => '10010011',\n    'Z' => '10010000',\n);\n\n$decode = array(\n    '00000' => 'A',\n    '00001' => 'B',\n    '00010' => 'C',\n    '00011' => 'D',\n    '00100' => 'E',\n    '00101' => 'F',\n    '00110' => 'G',\n    '00111' => 'H',\n    '01000' => 'I',\n    '01001' => 'J',\n    '01010' => 'K',\n    '01011' => 'L',\n    '01100' => 'M',\n    '01101' => 'N',\n    '01110' => 'O',\n    '01111' => 'P',\n    '10000' => 'Q',\n    '10001' => 'R',\n    '10010' => 'S',\n    '10011' => 'T',\n    '10100' => 'U',\n    '10101' => 'V',\n    '10110' => 'W',\n    '10111' => 'X',\n    '11000' => 'Y',\n    '11001' => 'Z',\n    '11010' => ' ',\n    '11011' => '.',\n    '11100' => ',',\n    '11101' => '-',\n    '11110' => \"'\",\n    '11111' => '?',\n);\n\nwhile (($line = trim(fgets(STDIN))) !== '') {\n    $code = '';\n    for ($i = 0, $len = strlen($line); $i < $len; $i++) {\n        $ch = $line[$i];\n        $code .= $encode[$ch];\n    }\n\n    $code = str_split($code, 5);\n    foreach ($code as $str) {\n        if (strlen($str) < 5) {\n            $str = str_pad($str, 5, '0');\n        }\n        echo $decode[$str];\n    }\n    echo PHP_EOL;\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\n\n$encode = array(\n    ' ' => '101',\n    \"'\" => '000000',\n    ',' => '000011',\n    '-' => '10010001',\n    '.' => '010001',\n    '?' => '000001',\n    'A' => '100101',\n    'B' => '10011010',\n    'C' => '0101',\n    'D' => '0001',\n    'E' => '110',\n    'F' => '01001',\n    'G' => '10011011',\n    'H' => '010000',\n    'I' => '0111',\n    'J' => '10011000',\n    'K' => '0110',\n    'L' => '00100',\n    'M' => '10011001',\n    'N' => '10011110',\n    'O' => '00101',\n    'P' => '111',\n    'Q' => '10011111',\n    'R' => '1000',\n    'S' => '00110',\n    'T' => '00111',\n    'U' => '10011100',\n    'V' => '10011101',\n    'W' => '000010',\n    'X' => '10010010',\n    'Y' => '10010011',\n    'Z' => '10010000',\n);\n\n$decode = array(\n    '00000' => 'A',\n    '00001' => 'B',\n    '00010' => 'C',\n    '00011' => 'D',\n    '00100' => 'E',\n    '00101' => 'F',\n    '00110' => 'G',\n    '00111' => 'H',\n    '01000' => 'I',\n    '01001' => 'J',\n    '01010' => 'K',\n    '01011' => 'L',\n    '01100' => 'M',\n    '01101' => 'N',\n    '01110' => 'O',\n    '01111' => 'P',\n    '10000' => 'Q',\n    '10001' => 'R',\n    '10010' => 'S',\n    '10011' => 'T',\n    '10100' => 'U',\n    '10101' => 'V',\n    '10110' => 'W',\n    '10111' => 'X',\n    '11000' => 'Y',\n    '11001' => 'Z',\n    '11010' => ' ',\n    '11011' => '.',\n    '11100' => ',',\n    '11101' => '-',\n    '11110' => \"'\",\n    '11111' => '?',\n);\n\nwhile (($line = trim(fgets(STDIN))) !== '') {\n    $code = '';\n    for ($i = 0, $len = strlen($line); $i < $len; $i++) {\n        $ch = $line[$i];\n        $code .= $encode[$ch];\n    }\n\n    $code = str_split($code, 5);\n    foreach ($code as $str) {\n        $len = strlen($str);\n        if ($len < 5) {\n            for ($i = 0; $i < 5 - $len; $i++) {\n                $str .= '0';\n            }\n        }\n        echo $decode[$str];\n    }\n    echo PHP_EOL;\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\n\n$chars = array_merge(range('A', 'Z'), explode('|', ' |.|,|-|\\'|?'));\n$encode = explode(\n    ',',\n    '100101,10011010,0101,0001,110,01001,10011011,010000,0111,10011000,'\n    . '0110,00100,10011001,10011110,00101,111,10011111,1000,00110,00111,'\n    . '10011100,10011101,000010,10010010,10010011,10010000,101,010001,'\n    . '000011,10010001,000000,000001'\n);\n\nwhile (($line = trim(fgets(STDIN))) !== '') {\n    $code = '';\n    for ($i = 0, $len = strlen($line); $i < $len; $i++) {\n        $ch = $line[$i];\n        $key = array_search($ch, $chars);\n        $code .= $encode[$key];\n    }\n\n    $code = str_split($code, 5);\n    $str = array_pop($code);\n    $code[] = str_pad($str, 5, '0');\n    foreach ($code as $str) {\n        $key = bindec($str);\n        echo $chars[$key];\n    }\n    echo PHP_EOL;\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\n\n$encode = array(\n    ' ' => '101',\n    \"'\" => '000000',\n    ',' => '000011',\n    '-' => '10010001',\n    '.' => '010001',\n    '?' => '000001',\n    'A' => '100101',\n    'B' => '10011010',\n    'C' => '0101',\n    'D' => '0001',\n    'E' => '110',\n    'F' => '01001',\n    'G' => '10011011',\n    'H' => '010000',\n    'I' => '0111',\n    'J' => '10011000',\n    'K' => '0110',\n    'L' => '00100',\n    'M' => '10011001',\n    'N' => '10011110',\n    'O' => '00101',\n    'P' => '111',\n    'Q' => '10011111',\n    'R' => '1000',\n    'S' => '00110',\n    'T' => '00111',\n    'U' => '10011100',\n    'V' => '10011101',\n    'W' => '000010',\n    'X' => '10010010',\n    'Y' => '10010011',\n    'Z' => '10010000',\n);\n\n$decode = array(\n    '00000' => 'A',\n    '00001' => 'B',\n    '00010' => 'C',\n    '00011' => 'D',\n    '00100' => 'E',\n    '00101' => 'F',\n    '00110' => 'G',\n    '00111' => 'H',\n    '01000' => 'I',\n    '01001' => 'J',\n    '01010' => 'K',\n    '01011' => 'L',\n    '01100' => 'M',\n    '01101' => 'N',\n    '01110' => 'O',\n    '01111' => 'P',\n    '10000' => 'Q',\n    '10001' => 'R',\n    '10010' => 'S',\n    '10011' => 'T',\n    '10100' => 'U',\n    '10101' => 'V',\n    '10110' => 'W',\n    '10111' => 'X',\n    '11000' => 'Y',\n    '11001' => 'Z',\n    '11010' => ' ',\n    '11011' => '.',\n    '11100' => ',',\n    '11101' => '-',\n    '11110' => \"'\",\n    '11111' => '?',\n);\n\nwhile (($line = trim(fgets(STDIN))) !== '') {\n    $code = '';\n    for ($i = 0, $len = strlen($line); $i < $len; $i++) {\n        $ch = $line[$i];\n        $code .= $encode[$ch];\n    }\n\n    $code = str_split($code, 5);\n    $str = array_pop($code);\n    $code[] = str_pad($str, 5, '0');\n    foreach ($code as $str) {\n        echo $decode[$str];\n    }\n    echo PHP_EOL;\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\n\n$code1 = [\n\t' ' => '101',\n\t\"'\" => '000000',\n\t',' => '000011',\n\t'-' => '10010001',\n\t'.' => '010001',\n\t'?' => '000001',\n\t'A' => '100101',\n\t'B' => '10011010',\n\t'C' => '0101',\n\t'D' => '0001',\n\t'E' => '110',\n\t'F' => '01001',\n\t'G' => '10011011',\n\t'H' => '010000',\n\t'I' => '0111',\n\t'J' => '10011000',\n\t'K' => '0110',\n\t'L' => '00100',\n\t'M' => '10011001',\n\t'N' => '10011110',\n\t'O' => '00101',\n\t'P' => '111',\n\t'Q' => '10011111',\n\t'R' => '1000',\n\t'S' => '00110',\n\t'T' => '00111',\n\t'U' => '10011100',\n\t'V' => '10011101',\n\t'W' => '000010',\n\t'X' => '10010010',\n\t'Y' => '10010011',\n\t'Z' => '10010000',\n];\n\n$code2 = [\n\t'00000' => 'A',\n\t'00001' => 'B',\n\t'00010' => 'C',\n\t'00011' => 'D',\n\t'00100' => 'E',\n\t'00101' => 'F',\n\t'00110' => 'G',\n\t'00111' => 'H',\n\t'01000' => 'I',\n\t'01001' => 'J',\n\t'01010' => 'K',\n\t'01011' => 'L',\n\t'01100' => 'M',\n\t'01101' => 'N',\n\t'01110' => 'O',\n\t'01111' => 'P',\n\t'10000' => 'Q',\n\t'10001' => 'R',\n\t'10010' => 'S',\n\t'10011' => 'T',\n\t'10100' => 'U',\n\t'10101' => 'V',\n\t'10110' => 'W',\n\t'10111' => 'X',\n\t'11000' => 'Y',\n\t'11001' => 'Z',\n\t'11010' => ' ',\n\t'11011' => '.',\n\t'11100' => ',',\n\t'11101' => '-',\n\t'11110' => \"'\",\n\t'11111' => '?',\n];\n\nwhile ($line = rtrim(fgets(STDIN))) {\n\t$len = strlen($line);\n\t$s1 = \"\";\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$c = $line[$i];\n\t\t$code = $code1[$c];\n\t\t$s1 .= $code;\n\t}\n\t// zero padidng\n\t$len2 = strlen($s1);\n\t$mod = $len2 % 5;\n\tif ($mod > 0) {\n\t\tfor ($i = 0; $i < 5 - $mod; $i++) {\n\t\t\t$s1 .= '0';\n\t\t}\n\t}\n\t$n = strlen($s1) / 5;\n\t// コード２に置き換える\n\t$s2 = \"\";\n\tfor ($j = 0; $j < $n; $j++) {\n\t\t$c2 = substr($s1, $j * 5, 5);\n\t\t$s2 .= $code2[$c2];\n\t}\n\n\techo $s2 . \"\\n\";\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\n\n$code1 = array(\n\t' ' => '101',\n\t\"'\" => '000000',\n\t',' => '000011',\n\t'-' => '10010001',\n\t'.' => '010001',\n\t'?' => '000001',\n\t'A' => '100101',\n\t'B' => '10011010',\n\t'C' => '0101',\n\t'D' => '0001',\n\t'E' => '110',\n\t'F' => '01001',\n\t'G' => '10011011',\n\t'H' => '010000',\n\t'I' => '0111',\n\t'J' => '10011000',\n\t'K' => '0110',\n\t'L' => '00100',\n\t'M' => '10011001',\n\t'N' => '10011110',\n\t'O' => '00101',\n\t'P' => '111',\n\t'Q' => '10011111',\n\t'R' => '1000',\n\t'S' => '00110',\n\t'T' => '00111',\n\t'U' => '10011100',\n\t'V' => '10011101',\n\t'W' => '000010',\n\t'X' => '10010010',\n\t'Y' => '10010011',\n\t'Z' => '10010000',\n);\n\n$code2 = array(\n\t'00000' => 'A',\n\t'00001' => 'B',\n\t'00010' => 'C',\n\t'00011' => 'D',\n\t'00100' => 'E',\n\t'00101' => 'F',\n\t'00110' => 'G',\n\t'00111' => 'H',\n\t'01000' => 'I',\n\t'01001' => 'J',\n\t'01010' => 'K',\n\t'01011' => 'L',\n\t'01100' => 'M',\n\t'01101' => 'N',\n\t'01110' => 'O',\n\t'01111' => 'P',\n\t'10000' => 'Q',\n\t'10001' => 'R',\n\t'10010' => 'S',\n\t'10011' => 'T',\n\t'10100' => 'U',\n\t'10101' => 'V',\n\t'10110' => 'W',\n\t'10111' => 'X',\n\t'11000' => 'Y',\n\t'11001' => 'Z',\n\t'11010' => ' ',\n\t'11011' => '.',\n\t'11100' => ',',\n\t'11101' => '-',\n\t'11110' => \"'\",\n\t'11111' => '?',\n);\n\nwhile (true) {\n\t$line = rtrim(fgets(STDIN));\n\tif (feof(STDIN)) {\n\t\tbreak;\n\t}\n\t$len = strlen($line);\n\t$s1 = \"\";\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$c = $line[$i];\n\t\t$code = $code1[$c];\n\t\t$s1 .= $code;\n\t}\n\t// zero padidng\n\t$len2 = strlen($s1);\n\t$mod = $len2 % 5;\n\tif ($mod > 0) {\n\t\tfor ($i = 0; $i < 5 - $mod; $i++) {\n\t\t\t$s1 .= '0';\n\t\t}\n\t}\n\t$n = strlen($s1) / 5;\n\t// コード２に置き換える\n\t$s2 = \"\";\n\tfor ($j = 0; $j < $n; $j++) {\n\t\t$c2 = substr($s1, $j * 5, 5);\n\t\t$s2 .= $code2[$c2];\n\t}\n\n\techo $s2 . \"\\n\";\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\n\n$encode = array(\n    ' ' => '101',\n    \"'\" => '000000',\n    ',' => '000011',\n    '-' => '10010001',\n    '.' => '010001',\n    '?' => '000001',\n    'A' => '100101',\n    'B' => '10011010',\n    'C' => '0101',\n    'D' => '0001',\n    'E' => '110',\n    'F' => '01001',\n    'G' => '10011011',\n    'H' => '010000',\n    'I' => '0111',\n    'J' => '10011000',\n    'K' => '0110',\n    'L' => '00100',\n    'M' => '10011001',\n    'N' => '10011110',\n    'O' => '00101',\n    'P' => '111',\n    'Q' => '10011111',\n    'R' => '1000',\n    'S' => '00110',\n    'T' => '00111',\n    'U' => '10011100',\n    'V' => '10011101',\n    'W' => '000010',\n    'X' => '10010010',\n    'Y' => '10010011',\n    'Z' => '10010000',\n);\n\n$decode = array(\n    '00000' => 'A',\n    '00001' => 'B',\n    '00010' => 'C',\n    '00011' => 'D',\n    '00100' => 'E',\n    '00101' => 'F',\n    '00110' => 'G',\n    '00111' => 'H',\n    '01000' => 'I',\n    '01001' => 'J',\n    '01010' => 'K',\n    '01011' => 'L',\n    '01100' => 'M',\n    '01101' => 'N',\n    '01110' => 'O',\n    '01111' => 'P',\n    '10000' => 'Q',\n    '10001' => 'R',\n    '10010' => 'S',\n    '10011' => 'T',\n    '10100' => 'U',\n    '10101' => 'V',\n    '10110' => 'W',\n    '10111' => 'X',\n    '11000' => 'Y',\n    '11001' => 'Z',\n    '11010' => ' ',\n    '11011' => '.',\n    '11100' => ',',\n    '11101' => '-',\n    '11110' => \"'\",\n    '11111' => '?',\n);\n\nwhile (($line = trim(fgets(STDIN))) !== '') {\n    $code = '';\n    for ($i = 0, $len = strlen($line); $i < $len; $i++) {\n        $ch = $line[$i];\n        $code .= $encode[$ch];\n    }\n\n    $len = strlen($code);\n    while (strlen($code) % 5 !== 0) {\n        $code .= '0';\n    }\n\n    for ($i = 0, $len = strlen($code); $i < $len; $i += 5) {\n        echo $decode[substr($code, $i, 5)];\n    }\n    echo \"\\n\";\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\n\n$encode = array(\n    ' ' => '101',\n    \"'\" => '000000',\n    ',' => '000011',\n    '-' => '10010001',\n    '.' => '010001',\n    '?' => '000001',\n    'A' => '100101',\n    'B' => '10011010',\n    'C' => '0101',\n    'D' => '0001',\n    'E' => '110',\n    'F' => '01001',\n    'G' => '10011011',\n    'H' => '010000',\n    'I' => '0111',\n    'J' => '10011000',\n    'K' => '0110',\n    'L' => '00100',\n    'M' => '10011001',\n    'N' => '10011110',\n    'O' => '00101',\n    'P' => '111',\n    'Q' => '10011111',\n    'R' => '1000',\n    'S' => '00110',\n    'T' => '00111',\n    'U' => '10011100',\n    'V' => '10011101',\n    'W' => '000010',\n    'X' => '10010010',\n    'Y' => '10010011',\n    'Z' => '10010000',\n);\n$decode = array_merge(range('A', 'Z'), explode('|', \" |.|,|-|'|?\"));\n\nwhile (($line = trim(fgets(STDIN))) !== '') {\n    $code = '';\n    for ($i = 0, $len = strlen($line); $i < $len; $i++) {\n        $ch = $line[$i];\n        $code .= $encode[$ch];\n    }\n\n    $code = str_split($code, 5);\n    $str = array_pop($code);\n    $code[] = str_pad($str, 5, '0');\n    foreach ($code as $str) {\n        $key = bindec($str);\n        echo $decode[$key];\n    }\n    echo PHP_EOL;\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\n\n$code1 = array(\n\t' ' => '101',\n\t\"'\" => '000000',\n\t',' => '000011',\n\t'-' => '10010001',\n\t'.' => '010001',\n\t'?' => '000001',\n\t'A' => '100101',\n\t'B' => '10011010',\n\t'C' => '0101',\n\t'D' => '0001',\n\t'E' => '110',\n\t'F' => '01001',\n\t'G' => '10011011',\n\t'H' => '010000',\n\t'I' => '0111',\n\t'J' => '10011000',\n\t'K' => '0110',\n\t'L' => '00100',\n\t'M' => '10011001',\n\t'N' => '10011110',\n\t'O' => '00101',\n\t'P' => '111',\n\t'Q' => '10011111',\n\t'R' => '1000',\n\t'S' => '00110',\n\t'T' => '00111',\n\t'U' => '10011100',\n\t'V' => '10011101',\n\t'W' => '000010',\n\t'X' => '10010010',\n\t'Y' => '10010011',\n\t'Z' => '10010000',\n);\n\n$code2 = array(\n\t'00000' => 'A',\n\t'00001' => 'B',\n\t'00010' => 'C',\n\t'00011' => 'D',\n\t'00100' => 'E',\n\t'00101' => 'F',\n\t'00110' => 'G',\n\t'00111' => 'H',\n\t'01000' => 'I',\n\t'01001' => 'J',\n\t'01010' => 'K',\n\t'01011' => 'L',\n\t'01100' => 'M',\n\t'01101' => 'N',\n\t'01110' => 'O',\n\t'01111' => 'P',\n\t'10000' => 'Q',\n\t'10001' => 'R',\n\t'10010' => 'S',\n\t'10011' => 'T',\n\t'10100' => 'U',\n\t'10101' => 'V',\n\t'10110' => 'W',\n\t'10111' => 'X',\n\t'11000' => 'Y',\n\t'11001' => 'Z',\n\t'11010' => ' ',\n\t'11011' => '.',\n\t'11100' => ',',\n\t'11101' => '-',\n\t'11110' => \"'\",\n\t'11111' => '?',\n);\n\nwhile ($line = rtrim(fgets(STDIN))) {\n\t$len = strlen($line);\n\t$s1 = \"\";\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$c = $line[$i];\n\t\t$code = $code1[$c];\n\t\t$s1 .= $code;\n\t}\n\t// zero padidng\n\t$len2 = strlen($s1);\n\t$mod = $len2 % 5;\n\tif ($mod > 0) {\n\t\tfor ($i = 0; $i < 5 - $mod; $i++) {\n\t\t\t$s1 .= '0';\n\t\t}\n\t}\n\t$n = strlen($s1) / 5;\n\t// コード２に置き換える\n\t$s2 = \"\";\n\tfor ($j = 0; $j < $n; $j++) {\n\t\t$c2 = substr($s1, $j * 5, 5);\n\t\t$s2 .= $code2[$c2];\n\t}\n\n\techo $s2 . \"\\n\";\n}"
  },
  {
    "language": "PHP",
    "code": "<?php\n\n$chars = array_merge(range('A', 'Z'), explode('|', ' |\\'|,|-|.|?'));\n$encode = explode(\n    ',',\n    '100101,10011010,0101,0001,110,01001,10011011,010000,0111,10011000,'\n    . '0110,00100,10011001,10011110,00101,111,10011111,1000,00110,00111,'\n    . '10011100,10011101,000010,10010010,10010011,10010000,101,000000,'\n    . '000011,10010001,010001,000001'\n);\n\n$str = trim(fgets(STDIN));\n$code = '';\nfor ($i = 0, $len = strlen($str); $i < $len; $i++) {\n    $ch = $str[$i];\n    $key = array_search($ch, $chars);\n    $code .= $encode[$key];\n}\n\n$code = str_split($code, 5);\n$str = array_pop($code);\n$code[] = str_pad($str, 5, '0');\nforeach ($code as $str) {\n    $key = bindec($str);\n    echo $chars[$key];\n}\necho PHP_EOL;"
  },
  {
    "language": "D",
    "code": "\nimport std.stdio, std.conv, std.range, std.array;\n\nvoid main() {\n  immutable string[char] tb =\n    [' ': \"101\",\n     '\\'': \"000000\",\n     ',': \"000011\",\n     '-': \"10010001\",\n     '.': \"010001\",\n     '?': \"000001\",\n     'A': \"100101\",\n     'B': \"10011010\",\n     'C': \"0101\",\n     'D': \"0001\",\n     'E': \"110\",\n     'F': \"01001\",\n     'G': \"10011011\",\n     'H': \"010000\",\n     'I': \"0111\",\n     'J': \"10011000\",\n     'K': \"0110\",\n     'L': \"00100\",\n     'M': \"10011001\",\n     'N': \"10011110\",\n     'O': \"00101\",\n     'P': \"111\",\n     'Q': \"10011111\",\n     'R': \"1000\",\n     'S': \"00110\",\n     'T': \"00111\",\n     'U': \"10011100\",\n     'V': \"10011101\",\n     'W': \"000010\",\n     'X': \"10010010\",\n     'Y': \"10010011\",\n     'Z': \"10010000\"];\n  immutable char[string] rev_tb =\n    [\"00000\": 'A',\n     \"00001\": 'B',\n     \"00010\": 'C',\n     \"00011\": 'D',\n     \"00100\": 'E',\n     \"00101\": 'F',\n     \"00110\": 'G',\n     \"00111\": 'H',\n     \"01000\": 'I',\n     \"01001\": 'J',\n     \"01010\": 'K',\n     \"01011\": 'L',\n     \"01100\": 'M',\n     \"01101\": 'N',\n     \"01110\": 'O',\n     \"01111\": 'P',\n     \"10000\": 'Q',\n     \"10001\": 'R',\n     \"10010\": 'S',\n     \"10011\": 'T',\n     \"10100\": 'U',\n     \"10101\": 'V',\n     \"10110\": 'W',\n     \"10111\": 'X',\n     \"11000\": 'Y',\n     \"11001\": 'Z',\n     \"11010\": ' ',\n     \"11011\": '.',\n     \"11100\": ',',\n     \"11101\": '-',\n     \"11110\": '\\'',\n     \"11111\": '?'];\n  for(string line; readf(\"%s\\n\", &line);) {\n    char[] content = line.to!(char[]);\n    char[] in_stream, out_stream;\n    foreach(c; content)\n      in_stream ~= tb[c];\n    in_stream ~= repeat('0').take(5 - in_stream.length % 5).array;\n    for(int i = 0; i < in_stream.length; i += 5) {\n      out_stream ~= rev_tb[in_stream[i..(i + 5)]];\n    }\n    writeln(out_stream);\n  }\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio;\nimport std.algorithm;\nimport std.string;\nimport std.range;\n\nstring[dchar] code1;\ndchar[string] code2;\n\nvoid main() {\n\tcode1[' '] = \"101\";\n\tcode1['\\''] = \"000000\";\n\tcode1[','] = \"000011\";\n\tcode1['-'] = \"10010001\";\n\tcode1['.'] = \"010001\";\n\tcode1['?'] = \"000001\";\n\tcode1['A'] = \"100101\";\n\tcode1['B'] = \"10011010\";\n\tcode1['C'] = \"0101\";\n\tcode1['D'] = \"0001\";\n\tcode1['E'] = \"110\";\n\tcode1['F'] = \"01001\";\n\tcode1['G'] = \"10011011\";\n\tcode1['H'] = \"010000\";\n\tcode1['I'] = \"0111\";\n\tcode1['J'] = \"10011000\";\n\tcode1['K'] = \"0110\";\n\tcode1['L'] = \"00100\";\n\tcode1['M'] = \"10011001\";\n\tcode1['N'] = \"10011110\";\n\tcode1['O'] = \"00101\";\n\tcode1['P'] = \"111\";\n\tcode1['Q'] = \"10011111\";\n\tcode1['R'] = \"1000\";\n\tcode1['S'] = \"00110\";\n\tcode1['T'] = \"00111\";\n\tcode1['U'] = \"10011100\";\n\tcode1['V'] = \"10011101\";\n\tcode1['W'] = \"000010\";\n\tcode1['X'] = \"10010010\";\n\tcode1['Y'] = \"10010011\";\n\tcode1['Z'] = \"10010000\";\n\n\tcode2[\"00000\"] = 'A';\n\tcode2[\"00001\"] = 'B';\n\tcode2[\"00010\"] = 'C';\n\tcode2[\"00011\"] = 'D';\n\tcode2[\"00100\"] = 'E';\n\tcode2[\"00101\"] = 'F';\n\tcode2[\"00110\"] = 'G';\n\tcode2[\"00111\"] = 'H';\n\tcode2[\"01000\"] = 'I';\n\tcode2[\"01001\"] = 'J';\n\tcode2[\"01010\"] = 'K';\n\tcode2[\"01011\"] = 'L';\n\tcode2[\"01100\"] = 'M';\n\tcode2[\"01101\"] = 'N';\n\tcode2[\"01110\"] = 'O';\n\tcode2[\"01111\"] = 'P';\n\tcode2[\"10000\"] = 'Q';\n\tcode2[\"10001\"] = 'R';\n\tcode2[\"10010\"] = 'S';\n\tcode2[\"10011\"] = 'T';\n\tcode2[\"10100\"] = 'U';\n\tcode2[\"10101\"] = 'V';\n\tcode2[\"10110\"] = 'W';\n\tcode2[\"10111\"] = 'X';\n\tcode2[\"11000\"] = 'Y';\n\tcode2[\"11001\"] = 'Z';\n\tcode2[\"11010\"] = ' ';\n\tcode2[\"11011\"] = '.';\n\tcode2[\"11100\"] = ',';\n\tcode2[\"11101\"] = '-';\n\tcode2[\"11110\"] = '\\'';\n\tcode2[\"11111\"] = '?';\n\twhile(!stdin.eof()) {\n\t\tauto s1 = readln().chomp();\n\t\tif(!s1.emty()) {\n\t\t\tauto s2 = map!(a => code1[a])(s1).join(\"\");\n\t\t\twhile(!s2.empty()) {\n\t\t\t\twhile(s2.length < 5)\n\t\t\t\t\ts2 = s2 ~ '0';\n\t\t\t\twrite(code2[s2[0..5]]);\n\t\t\t\ts2 = s2.drop(5);\n\t\t\t}\n\t\t\twriteln();\n\t\t}\n\t}\n}"
  },
  {
    "language": "D",
    "code": "\nimport std.stdio, std.conv, std.range, std.array;\n\nvoid main() {\n  immutable string[char] tb =\n    [' ': \"101\",\n     '\\'': \"000000\",\n     ',': \"000011\",\n     '-': \"10010001\",\n     '.': \"010001\",\n     '?': \"000001\",\n     'A': \"100101\",\n     'B': \"10011010\",\n     'C': \"0101\",\n     'D': \"0001\",\n     'E': \"110\",\n     'F': \"01001\",\n     'G': \"10011011\",\n     'H': \"010000\",\n     'I': \"0111\",\n     'J': \"10011000\",\n     'K': \"0110\",\n     'L': \"00100\",\n     'M': \"10011001\",\n     'N': \"10011110\",\n     'O': \"00101\",\n     'P': \"111\",\n     'Q': \"10011111\",\n     'R': \"1000\",\n     'S': \"00110\",\n     'T': \"00111\",\n     'U': \"10011100\",\n     'V': \"10011101\",\n     'W': \"000010\",\n     'X': \"10010010\",\n     'Y': \"10010011\",\n     'Z': \"10010000\"];\n  immutable char[string] rev_tb =\n    [\"00000\": 'A',\n     \"00001\": 'B',\n     \"00010\": 'C',\n     \"00011\": 'D',\n     \"00100\": 'E',\n     \"00101\": 'F',\n     \"00110\": 'G',\n     \"00111\": 'H',\n     \"01000\": 'I',\n     \"01001\": 'J',\n     \"01010\": 'K',\n     \"01011\": 'L',\n     \"01100\": 'M',\n     \"01101\": 'N',\n     \"01110\": 'O',\n     \"01111\": 'P',\n     \"10000\": 'Q',\n     \"10001\": 'R',\n     \"10010\": 'S',\n     \"10011\": 'T',\n     \"10100\": 'U',\n     \"10101\": 'V',\n     \"10110\": 'W',\n     \"10111\": 'X',\n     \"11000\": 'Y',\n     \"11001\": 'Z',\n     \"11010\": ' ',\n     \"11011\": '.',\n     \"11100\": ',',\n     \"11101\": '-',\n     \"11110\": '\\'',\n     \"11111\": '?'];\n  for(string line; readf(\"%s\\n\", &line);) {\n    char[] content = line.to!(char[]);\n    char[] in_stream, out_stream;\n    foreach(c; content)\n      in_stream ~= tb[c];\n    size_t s = in_stream.length % 5;\n    if (s != 0) in_stream ~= repeat('0').take(5 - s).array;    \n    for(int i = 0; i < in_stream.length; i += 5) {\n      out_stream ~= rev_tb[in_stream[i..(i + 5)]];\n    }\n    writeln(out_stream);\n  }\n}"
  },
  {
    "language": "D",
    "code": "\nimport std.stdio, std.conv, std.range, std.array;\n\nvoid main() {\n  immutable string[char] tb =\n    [' ': \"101\",\n     '\\'': \"000000\",\n     ',': \"000011\",\n     '-': \"10010001\",\n     '.': \"010001\",\n     '?': \"000001\",\n     'A': \"100101\",\n     'B': \"10011010\",\n     'C': \"0101\",\n     'D': \"0001\",\n     'E': \"110\",\n     'F': \"01001\",\n     'G': \"10011011\",\n     'H': \"010000\",\n     'I': \"0111\",\n     'J': \"10011000\",\n     'K': \"0110\",\n     'L': \"00100\",\n     'M': \"10011001\",\n     'N': \"10011110\",\n     'O': \"00101\",\n     'P': \"111\",\n     'Q': \"10011111\",\n     'R': \"1000\",\n     'S': \"00110\",\n     'T': \"00111\",\n     'U': \"10011100\",\n     'V': \"10011101\",\n     'W': \"000010\",\n     'X': \"10010010\",\n     'Y': \"10010011\",\n     'Z': \"10010000\"];\n  immutable char[string] rev_tb =\n    [\"00000\": 'A',\n     \"00001\": 'B',\n     \"00010\": 'C',\n     \"00011\": 'D',\n     \"00100\": 'E',\n     \"00101\": 'F',\n     \"00110\": 'G',\n     \"00111\": 'H',\n     \"01000\": 'I',\n     \"01001\": 'J',\n     \"01010\": 'K',\n     \"01011\": 'L',\n     \"01100\": 'M',\n     \"01101\": 'N',\n     \"01110\": 'O',\n     \"01111\": 'P',\n     \"10000\": 'Q',\n     \"10001\": 'R',\n     \"10010\": 'S',\n     \"10011\": 'T',\n     \"10100\": 'U',\n     \"10101\": 'V',\n     \"10110\": 'W',\n     \"10111\": 'X',\n     \"11000\": 'Y',\n     \"11001\": 'Z',\n     \"11010\": ' ',\n     \"11011\": '.',\n     \"11100\": ',',\n     \"11101\": '-',\n     \"11110\": '\\'',\n     \"11111\": '?'];\n  string[] lines;\n  for(string line; readf(\"%s\\n\", &line);)\n    lines ~= line;\n  char[] content = lines.join(\" \").to!(char[]);\n  char[] in_stream, out_stream;\n  foreach(c; content)\n    in_stream ~= tb[c];\n  in_stream ~= repeat('0').take(5 - in_stream.length % 5).array;\n  for(int i = 0; i < in_stream.length; i += 5) {\n    out_stream ~= rev_tb[in_stream[i..(i + 5)]];\n  }\n  writeln(out_stream);\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio : write, writeln, writefln, stdin;\nimport std.array;\nimport std.range;\n\nvoid main(){\n\tstring[char] en = [\n\t\t' '\t: \"101\",\n\t\t'\\''\t: \"000000\",\n\t\t','\t: \"000011\",\n\t\t'-'\t: \"10010001\",\n\t\t'.'\t: \"010001\",\n\t\t'?'\t: \"000001\",\n\t\t'A'\t: \"100101\",\n\t\t'B'\t: \"10011010\",\n\t\t'C'\t: \"0101\",\n\t\t'D'\t: \"0001\",\n\t\t'E'\t: \"110\",\n\t\t'F'\t: \"01001\",\n\t\t'G'\t: \"10011011\",\n\t\t'H'\t: \"010000\",\n\t\t'I'\t: \"0111\",\n\t\t'J'\t: \"10011000\",\n\t\t'K'\t: \"0110\",\n\t\t'L'\t: \"00100\",\n\t\t'M'\t: \"10011001\",\n\t\t'N'\t: \"10011110\",\n\t\t'O'\t: \"00101\",\n\t\t'P'\t: \"111\",\n\t\t'Q'\t: \"10011111\",\n\t\t'R'\t: \"1000\",\n\t\t'S'\t: \"00110\",\n\t\t'T'\t: \"00111\",\n\t\t'U'\t: \"10011100\",\n\t\t'V'\t: \"10011101\",\n\t\t'W'\t: \"000010\",\n\t\t'X'\t: \"10010010\",\n\t\t'Y'\t: \"10010011\",\n\t\t'Z'\t: \"10010000\",\n\t];\n\tchar[string] de = [\n\t\t\"00000\" : 'A',\n\t\t\"00001\" : 'B',\n\t\t\"00010\" : 'C',\n\t\t\"00011\" : 'D',\n\t\t\"00100\" : 'E',\n\t\t\"00101\" : 'F',\n\t\t\"00110\" : 'G',\n\t\t\"00111\" : 'H',\n\t\t\"01000\" : 'I',\n\t\t\"01001\" : 'J',\n\t\t\"01010\" : 'K',\n\t\t\"01011\" : 'L',\n\t\t\"01100\" : 'M',\n\t\t\"01101\" : 'N',\n\t\t\"01110\" : 'O',\n\t\t\"01111\" : 'P',\n\t\t\"10000\" : 'Q',\n\t\t\"10001\" : 'R',\n\t\t\"10010\" : 'S',\n\t\t\"10011\" : 'T',\n\t\t\"10100\" : 'U',\n\t\t\"10101\" : 'V',\n\t\t\"10110\" : 'W',\n\t\t\"10111\" : 'X',\n\t\t\"11000\" : 'Y',\n\t\t\"11001\" : 'Z',\n\t\t\"11010\" : ' ',\n\t\t\"11011\" : '.',\n\t\t\"11100\" : ',',\n\t\t\"11101\" : '-',\n\t\t\"11110\" : '\\'',\n\t\t\"11111\" : '?',\n\t];\n\t\n\twhile(true){\n\t\tstring str = readln.chomp;\n\t\tif(stdin.eof) break;\n\t\tstring p;\n\t\tforeach(c; str){\n\t\t\tp~=en[c];\n\t\t}\n\t\tstring[] q;\n\t\twhile(p.length>0){\n\t\t\tif(p.length < 5){\n\t\t\t\tq ~= p.take(p.length).array.to!string ~ repeat('0').take(5-p.length).array.to!string;\n\t\t\t\tfor(auto l=p.length; 0<l; --l){\n\t\t\t\t\tp.popFront;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tq ~= p.take(5).array.to!string;\n\t\t\t\tforeach(i; 5.iota){\n\t\t\t\t\tp.popFront;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tstring ans;\n\t\tforeach(ite; q){\n\t\t\tans ~= de[ite];\n\t\t}\n\t\t\n\t\tans.writeln;\n\t}\n}\n\n\nimport std.stdio : readln, chomp;\nimport std.conv : to;\nimport std.string : split;\nshared string[] input;\nshared string delim = \" \";\nT next(T)()\nin\n{\n\tassert(hasNext());\n}\nout\n{\n\tinput.popFront;\n}\nbody\n{\n\treturn input.front.to!T;\n}\n\nvoid next(T)(ref T v){\n\tv = next!T();\n}\n\nbool hasNext(){\n\tif(input.length > 0){\n\t\treturn true;\n\t}\n\t\n\tstring str = readln;\n\tif(str.length > 0){\n\t\tinput ~= str.chomp.split(delim);\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\n\nvoid dbg(T...)(T vs)\n{\n\timport std.stdio : stderr;\n\tforeach(v; vs)\n\t\tstderr.write(v.to!string ~ \" \");\n\tstderr.write(\"\\n\");\n}\n\nT clone(T)(T v){\n\tT v_;\n\tstatic if(isInputRange!(T)){\n\t\tforeach(ite; v){\n\t\t\tv_ ~= ite.clone;\n\t\t}\n\t}else{\n\t\tv_ = v;\n\t}\n\t\n\treturn v_;\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio : write, writeln, writefln, stdin;\nimport std.array;\nimport std.range;\n\nvoid main(){\n\tstring[char] en = [\n\t\t' '\t: \"101\",\n\t\t'\\''\t: \"000000\",\n\t\t','\t: \"000011\",\n\t\t'-'\t: \"10010001\",\n\t\t'.'\t: \"010001\",\n\t\t'?'\t: \"000001\",\n\t\t'A'\t: \"100101\",\n\t\t'B'\t: \"10011010\",\n\t\t'C'\t: \"0101\",\n\t\t'D'\t: \"0001\",\n\t\t'E'\t: \"110\",\n\t\t'F'\t: \"01001\",\n\t\t'G'\t: \"100110110\",\n\t\t'H'\t: \"010000\",\n\t\t'I'\t: \"0111\",\n\t\t'J'\t: \"10011000\",\n\t\t'K'\t: \"0110\",\n\t\t'L'\t: \"00100\",\n\t\t'M'\t: \"10011001\",\n\t\t'N'\t: \"10011110\",\n\t\t'O'\t: \"00101\",\n\t\t'P'\t: \"111\",\n\t\t'Q'\t: \"10011111\",\n\t\t'R'\t: \"1000\",\n\t\t'S'\t: \"00110\",\n\t\t'T'\t: \"00111\",\n\t\t'U'\t: \"10011100\",\n\t\t'V'\t: \"10011101\",\n\t\t'W'\t: \"000010\",\n\t\t'X'\t: \"10010010\",\n\t\t'Y'\t: \"10010011\",\n\t\t'Z'\t: \"10010000\",\n\t];\n\tchar[string] de = [\n\t\t\"00000\" : 'A',\n\t\t\"00001\" : 'B',\n\t\t\"00010\" : 'C',\n\t\t\"00011\" : 'D',\n\t\t\"00100\" : 'E',\n\t\t\"00101\" : 'F',\n\t\t\"00110\" : 'G',\n\t\t\"00111\" : 'H',\n\t\t\"01000\" : 'I',\n\t\t\"01001\" : 'J',\n\t\t\"01010\" : 'K',\n\t\t\"01011\" : 'L',\n\t\t\"01100\" : 'M',\n\t\t\"01101\" : 'N',\n\t\t\"01110\" : 'O',\n\t\t\"01111\" : 'P',\n\t\t\"10000\" : 'Q',\n\t\t\"10001\" : 'R',\n\t\t\"10010\" : 'S',\n\t\t\"10011\" : 'T',\n\t\t\"10100\" : 'U',\n\t\t\"10101\" : 'V',\n\t\t\"10110\" : 'W',\n\t\t\"10111\" : 'X',\n\t\t\"11000\" : 'Y',\n\t\t\"11001\" : 'Z',\n\t\t\"11010\" : ' ',\n\t\t\"11011\" : '.',\n\t\t\"11100\" : ',',\n\t\t\"11101\" : '-',\n\t\t\"11110\" : '\\'',\n\t\t\"11111\" : '?',\n\t];\n\t\n\twhile(true){\n\t\tstring str = readln.chomp;\n\t\tif(stdin.eof) break;\n\t\tstring p;\n\t\tforeach(c; str){\n\t\t\tp~=en[c];\n\t\t}\n\t\tstring[] q;\n\t\twhile(p.length>0){\n\t\t\tif(p.length < 5){\n\t\t\t\tq ~= p.take(p.length).array.to!string ~ repeat('0').take(5-p.length).array.to!string;\n\t\t\t\tfor(auto l=p.length; 0<l; --l){\n\t\t\t\t\tp.popFront;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tq ~= p.take(5).array.to!string;\n\t\t\t\tforeach(i; 5.iota){\n\t\t\t\t\tp.popFront;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tstring ans;\n\t\tforeach(ite; q){\n\t\t\tans ~= de[ite];\n\t\t}\n\t\t\n\t\tans.writeln;\n\t}\n}\n\n\nimport std.stdio : readln, chomp;\nimport std.conv : to;\nimport std.string : split;\nshared string[] input;\nshared string delim = \" \";\nT next(T)()\nin\n{\n\tassert(hasNext());\n}\nout\n{\n\tinput.popFront;\n}\nbody\n{\n\treturn input.front.to!T;\n}\n\nvoid next(T)(ref T v){\n\tv = next!T();\n}\n\nbool hasNext(){\n\tif(input.length > 0){\n\t\treturn true;\n\t}\n\t\n\tstring str = readln;\n\tif(str.length > 0){\n\t\tinput ~= str.chomp.split(delim);\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\n\nvoid dbg(T...)(T vs)\n{\n\timport std.stdio : stderr;\n\tforeach(v; vs)\n\t\tstderr.write(v.to!string ~ \" \");\n\tstderr.write(\"\\n\");\n}\n\nT clone(T)(T v){\n\tT v_;\n\tstatic if(isInputRange!(T)){\n\t\tforeach(ite; v){\n\t\t\tv_ ~= ite.clone;\n\t\t}\n\t}else{\n\t\tv_ = v;\n\t}\n\t\n\treturn v_;\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio,std.string,std.conv;\n\nint main()\n{\n\tstring[char] ID;\n\tID[' '] = \"101\";\n\tID['\\''] = \"000000\";\n\tID[','] = \"000011\";\n\tID['-'] = \"10010001\";\n\tID['.'] = \"010001\";\n\tID['?'] = \"000001\";\n\tID['A'] = \"100101\";\n\tID['B'] = \"10011010\";\n\tID['C'] = \"0101\";\n\tID['D'] = \"0001\";\n\tID['E'] = \"110\";\n\tID['F'] = \"01001\";\n\tID['G'] = \"10011011\";\n\tID['H'] = \"010000\";\n\tID['I'] = \"0111\";\n\tID['J'] = \"10011000\";\n\tID['K'] = \"0110\";\n\tID['L'] = \"00100\";\n\tID['M'] = \"10011001\";\n\tID['N'] = \"10011110\";\n\tID['O'] = \"00101\";\n\tID['P'] = \"111\";\n\tID['Q'] = \"10011111\";\n\tID['R'] = \"1000\";\n\tID['S'] = \"00110\";\n\tID['T'] = \"00111\";\n\tID['U'] = \"10011100\";\n\tID['V'] = \"10011101\";\n\tID['W'] = \"000010\";\n\tID['X'] = \"10010010\";\n\tID['Y'] = \"10010011\";\n\tID['Z'] = \"10010000\";\n\n\tstring[string] Id;\n\tId[\"00000\"] = \"A\";\n\tId[\"00001\"] = \"B\";\n\tId[\"00010\"] = \"C\";\n\tId[\"00011\"] = \"D\";\n\tId[\"00100\"] = \"E\";\n\tId[\"00101\"] = \"F\";\n\tId[\"00110\"] = \"G\";\n\tId[\"00111\"] = \"H\";\n\tId[\"01000\"] = \"I\";\n\tId[\"01001\"] = \"J\";\n\tId[\"01010\"] = \"K\";\n\tId[\"01011\"] = \"L\";\n\tId[\"01100\"] = \"M\";\n\tId[\"01101\"] = \"N\";\n\tId[\"01110\"] = \"O\";\n\tId[\"01111\"] = \"P\";\n\tId[\"10000\"] = \"Q\";\n\tId[\"10001\"] = \"R\";\n\tId[\"10010\"] = \"S\";\n\tId[\"10011\"] = \"T\";\n\tId[\"10100\"] = \"U\";\n\tId[\"10101\"] = \"V\";\n\tId[\"10110\"] = \"W\";\n\tId[\"10111\"] = \"X\";\n\tId[\"11000\"] = \"Y\";\n\tId[\"11001\"] = \"Z\";\n\tId[\"11010\"] = \" \";\n\tId[\"11011\"] = \".\";\n\tId[\"11100\"] = \",\";\n\tId[\"11101\"] = \"-\";\n\tId[\"11110\"] = \"'\";\n\tId[\"11111\"] = \"?\";\n\n\tstring s;\n\tstring str = \"\";\n\twhile((s = readln.chomp).length != 0)\n\t{\n\t\tforeach(i;0..s.length)\n\t\t{\n\t\t\tstr ~= ID[s[i]];\n\t\t}\n\n\t\twhile(str.length % 5 != 0)\n\t\t{\n\t\t\tstr ~= \"0\";\n\t\t}\n\n\t\tstring ans = \"\";\n\t\twhile(str.length != 0)\n\t\t{\n\t\t\tstring temp = str[0..5];\n\t\t\tans ~= Id[temp];\n\t\t\tstr = str[5..$];\n\t\t}\n\t\tans.writeln;\n\t}\n\treturn 0;\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio;\nimport std.algorithm;\nimport std.string;\nimport std.range;\n\nstring[dchar] code1;\ndchar[string] code2;\n\nvoid main() {\n\tcode1[' '] = \"101\";\n\tcode1['\\''] = \"000000\";\n\tcode1[','] = \"000011\";\n\tcode1['-'] = \"10010001\";\n\tcode1['.'] = \"010001\";\n\tcode1['?'] = \"000001\";\n\tcode1['A'] = \"100101\";\n\tcode1['B'] = \"10011010\";\n\tcode1['C'] = \"0101\";\n\tcode1['D'] = \"0001\";\n\tcode1['E'] = \"110\";\n\tcode1['F'] = \"01001\";\n\tcode1['G'] = \"10011011\";\n\tcode1['H'] = \"010000\";\n\tcode1['I'] = \"0111\";\n\tcode1['J'] = \"10011000\";\n\tcode1['K'] = \"0110\";\n\tcode1['L'] = \"00100\";\n\tcode1['M'] = \"10011001\";\n\tcode1['N'] = \"10011110\";\n\tcode1['O'] = \"00101\";\n\tcode1['P'] = \"111\";\n\tcode1['Q'] = \"10011111\";\n\tcode1['R'] = \"1000\";\n\tcode1['S'] = \"00110\";\n\tcode1['T'] = \"00111\";\n\tcode1['U'] = \"10011100\";\n\tcode1['V'] = \"10011101\";\n\tcode1['W'] = \"000010\";\n\tcode1['X'] = \"10010010\";\n\tcode1['Y'] = \"10010011\";\n\tcode1['Z'] = \"10010000\";\n\n\tcode2[\"00000\"] = 'A';\n\tcode2[\"00001\"] = 'B';\n\tcode2[\"00010\"] = 'C';\n\tcode2[\"00011\"] = 'D';\n\tcode2[\"00100\"] = 'E';\n\tcode2[\"00101\"] = 'F';\n\tcode2[\"00110\"] = 'G';\n\tcode2[\"00111\"] = 'H';\n\tcode2[\"01000\"] = 'I';\n\tcode2[\"01001\"] = 'J';\n\tcode2[\"01010\"] = 'K';\n\tcode2[\"01011\"] = 'L';\n\tcode2[\"01100\"] = 'M';\n\tcode2[\"01101\"] = 'N';\n\tcode2[\"01110\"] = 'O';\n\tcode2[\"01111\"] = 'P';\n\tcode2[\"10000\"] = 'Q';\n\tcode2[\"10001\"] = 'R';\n\tcode2[\"10010\"] = 'S';\n\tcode2[\"10011\"] = 'T';\n\tcode2[\"10100\"] = 'U';\n\tcode2[\"10101\"] = 'V';\n\tcode2[\"10110\"] = 'W';\n\tcode2[\"10111\"] = 'X';\n\tcode2[\"11000\"] = 'Y';\n\tcode2[\"11001\"] = 'Z';\n\tcode2[\"11010\"] = ' ';\n\tcode2[\"11011\"] = '.';\n\tcode2[\"11100\"] = ',';\n\tcode2[\"11101\"] = '-';\n\tcode2[\"11110\"] = '\\'';\n\tcode2[\"11111\"] = '?';\n\twhile(!stdin.eof()) {\n\t\tauto s1 = readln().chomp();\n\t\tauto s2 = map!(a => code1[a])(s1).join(\"\");\n\t\twhile(!s2.empty()) {\n\t\t\twhile(s2.length < 5)\n\t\t\t\ts2 = s2 ~ '0';\n\t\t\twrite(code2[s2[0..5]]);\n\t\t\ts2 = s2.drop(5);\n\t\t}\n\t\twriteln();\n\t}\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio : write, writeln, writefln, stdin;\nimport std.array;\nimport std.range;\n\nvoid main(){\n\tstring[char] en = [\n\t\t' '\t: \"101\",\n\t\t'\\''\t: \"000000\",\n\t\t','\t: \"000011\",\n\t\t'-'\t: \"10010001\",\n\t\t'.'\t: \"010001\",\n\t\t'?'\t: \"000001\",\n\t\t'A'\t: \"100101\",\n\t\t'B'\t: \"10011010\",\n\t\t'C'\t: \"0101\",\n\t\t'D'\t: \"0001\",\n\t\t'E'\t: \"110\",\n\t\t'F'\t: \"01001\",\n\t\t'G'\t: \"100110110\",\n\t\t'H'\t: \"010000\",\n\t\t'I'\t: \"0111\",\n\t\t'J'\t: \"10011000\",\n\t\t'K'\t: \"0110\",\n\t\t'L'\t: \"00100\",\n\t\t'M'\t: \"10011001\",\n\t\t'N'\t: \"10011110\",\n\t\t'O'\t: \"00101\",\n\t\t'P'\t: \"111\",\n\t\t'Q'\t: \"10011111\",\n\t\t'R'\t: \"1000\",\n\t\t'S'\t: \"00110\",\n\t\t'T'\t: \"00111\",\n\t\t'U'\t: \"10011100\",\n\t\t'V'\t: \"10011101\",\n\t\t'W'\t: \"000010\",\n\t\t'X'\t: \"10010010\",\n\t\t'Y'\t: \"10010011\",\n\t\t'Z'\t: \"10010000\",\n\t];\n\tchar[string] de = [\n\t\t\"00000\" : 'A',\n\t\t\"00001\" : 'B',\n\t\t\"00010\" : 'C',\n\t\t\"00011\" : 'D',\n\t\t\"00100\" : 'E',\n\t\t\"00101\" : 'F',\n\t\t\"00110\" : 'G',\n\t\t\"00111\" : 'H',\n\t\t\"01000\" : 'I',\n\t\t\"01001\" : 'J',\n\t\t\"01010\" : 'K',\n\t\t\"01011\" : 'L',\n\t\t\"01100\" : 'M',\n\t\t\"01101\" : 'N',\n\t\t\"01110\" : 'O',\n\t\t\"01111\" : 'P',\n\t\t\"10000\" : 'Q',\n\t\t\"10001\" : 'R',\n\t\t\"10010\" : 'S',\n\t\t\"10011\" : 'T',\n\t\t\"10100\" : 'U',\n\t\t\"10101\" : 'V',\n\t\t\"10110\" : 'W',\n\t\t\"10111\" : 'X',\n\t\t\"11000\" : 'Y',\n\t\t\"11001\" : 'Z',\n\t\t\"11010\" : ' ',\n\t\t\"11011\" : '.',\n\t\t\"11100\" : ',',\n\t\t\"11101\" : '-',\n\t\t\"11110\" : '\\'',\n\t\t\"11111\" : '?',\n\t];\n\t\n\twhile(true){\n\t\tstring str = readln.chomp;\n\t\tif(stdin.eof) break;\n\t\tstring p;\n\t\tforeach(c; str){\n\t\t\tp~=en[c];\n\t\t}\n\t\tstring[] q;\n\t\twhile(p.length>0){\n\t\t\tif(p.length < 5){\n\t\t\t\tq ~= p.take(p.length).array.to!string ~ repeat('0').take(5-p.length).array.to!string;\n\t\t\t\tfor(int l=p.length; 0<l; --l){\n\t\t\t\t\tp.popFront;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tq ~= p.take(5).array.to!string;\n\t\t\t\tforeach(i; 5.iota){\n\t\t\t\t\tp.popFront;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tstring ans;\n\t\tforeach(ite; q){\n\t\t\tans ~= de[ite];\n\t\t}\n\t\t\n\t\tans.writeln;\n\t}\n}\n\n\nimport std.stdio : readln, chomp;\nimport std.conv : to;\nimport std.string : split;\nshared string[] input;\nshared string delim = \" \";\nT next(T)()\nin\n{\n\tassert(hasNext());\n}\nout\n{\n\tinput.popFront;\n}\nbody\n{\n\treturn input.front.to!T;\n}\n\nvoid next(T)(ref T v){\n\tv = next!T();\n}\n\nbool hasNext(){\n\tif(input.length > 0){\n\t\treturn true;\n\t}\n\t\n\tstring str = readln;\n\tif(str.length > 0){\n\t\tinput ~= str.chomp.split(delim);\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\n\nvoid dbg(T...)(T vs)\n{\n\timport std.stdio : stderr;\n\tforeach(v; vs)\n\t\tstderr.write(v.to!string ~ \" \");\n\tstderr.write(\"\\n\");\n}\n\nT clone(T)(T v){\n\tT v_;\n\tstatic if(isInputRange!(T)){\n\t\tforeach(ite; v){\n\t\t\tv_ ~= ite.clone;\n\t\t}\n\t}else{\n\t\tv_ = v;\n\t}\n\t\n\treturn v_;\n}"
  },
  {
    "language": "D",
    "code": "\nimport std.stdio, std.conv, std.range, std.array;\n\nvoid main() {\n  immutable string[char] tb =\n    [' ': \"101\",\n     '\\'': \"000000\",\n     ',': \"000011\",\n     '-': \"10010001\",\n     '.': \"010001\",\n     '?': \"000001\",\n     'A': \"100101\",\n     'B': \"10011010\",\n     'C': \"0101\",\n     'D': \"0001\",\n     'E': \"110\",\n     'F': \"01001\",\n     'G': \"10011011\",\n     'H': \"010000\",\n     'I': \"0111\",\n     'J': \"10011000\",\n     'K': \"0110\",\n     'L': \"00100\",\n     'M': \"10011001\",\n     'N': \"10011110\",\n     'O': \"00101\",\n     'P': \"111\",\n     'Q': \"10011111\",\n     'R': \"1000\",\n     'S': \"00110\",\n     'T': \"00111\",\n     'U': \"10011100\",\n     'V': \"10011101\",\n     'W': \"000010\",\n     'X': \"10010010\",\n     'Y': \"10010011\",\n     'Z': \"10010000\"];\n  immutable char[string] rev_tb =\n    [\"00000\": 'A',\n     \"00001\": 'B',\n     \"00010\": 'C',\n     \"00011\": 'D',\n     \"00100\": 'E',\n     \"00101\": 'F',\n     \"00110\": 'G',\n     \"00111\": 'H',\n     \"01000\": 'I',\n     \"01001\": 'J',\n     \"01010\": 'K',\n     \"01011\": 'L',\n     \"01100\": 'M',\n     \"01101\": 'N',\n     \"01110\": 'O',\n     \"01111\": 'P',\n     \"10000\": 'Q',\n     \"10001\": 'R',\n     \"10010\": 'S',\n     \"10011\": 'T',\n     \"10100\": 'U',\n     \"10101\": 'V',\n     \"10110\": 'W',\n     \"10111\": 'X',\n     \"11000\": 'Y',\n     \"11001\": 'Z',\n     \"11010\": ' ',\n     \"11011\": '.',\n     \"11100\": ',',\n     \"11101\": '-',\n     \"11110\": '\\'',\n     \"11111\": '?'];\n  for(string line; readf(\"%s\\n\", &line);) {\n    char[] content = line.to!(char[]);\n    char[] in_stream, out_stream;\n    foreach(c; content)\n      in_stream ~= tb[c];\n    in_stream ~= repeat('0').take(5 - in_stream.length % 5).array;\n    for(int i = 0; i < in_stream.length; i += 5) {\n      out_stream ~= rev_tb[in_stream[i..(i + 5)]];\n    }\n    writeln(out_stream);\n  }\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio;\nimport std.algorithm;\nimport std.string;\nimport std.range;\n\nstring[dchar] code1;\ndchar[string] code2;\n\nvoid main() {\n\tcode1[' '] = \"101\";\n\tcode1['\\''] = \"000000\";\n\tcode1[','] = \"000011\";\n\tcode1['-'] = \"10010001\";\n\tcode1['.'] = \"010001\";\n\tcode1['?'] = \"000001\";\n\tcode1['A'] = \"100101\";\n\tcode1['B'] = \"10011010\";\n\tcode1['C'] = \"0101\";\n\tcode1['D'] = \"0001\";\n\tcode1['E'] = \"110\";\n\tcode1['F'] = \"01001\";\n\tcode1['G'] = \"10011011\";\n\tcode1['H'] = \"010000\";\n\tcode1['I'] = \"0111\";\n\tcode1['J'] = \"10011000\";\n\tcode1['K'] = \"0110\";\n\tcode1['L'] = \"00100\";\n\tcode1['M'] = \"10011001\";\n\tcode1['N'] = \"10011110\";\n\tcode1['O'] = \"00101\";\n\tcode1['P'] = \"111\";\n\tcode1['Q'] = \"10011111\";\n\tcode1['R'] = \"1000\";\n\tcode1['S'] = \"00110\";\n\tcode1['T'] = \"00111\";\n\tcode1['U'] = \"10011100\";\n\tcode1['V'] = \"10011101\";\n\tcode1['W'] = \"000010\";\n\tcode1['X'] = \"10010010\";\n\tcode1['Y'] = \"10010011\";\n\tcode1['Z'] = \"10010000\";\n\n\tcode2[\"00000\"] = 'A';\n\tcode2[\"00001\"] = 'B';\n\tcode2[\"00010\"] = 'C';\n\tcode2[\"00011\"] = 'D';\n\tcode2[\"00100\"] = 'E';\n\tcode2[\"00101\"] = 'F';\n\tcode2[\"00110\"] = 'G';\n\tcode2[\"00111\"] = 'H';\n\tcode2[\"01000\"] = 'I';\n\tcode2[\"01001\"] = 'J';\n\tcode2[\"01010\"] = 'K';\n\tcode2[\"01011\"] = 'L';\n\tcode2[\"01100\"] = 'M';\n\tcode2[\"01101\"] = 'N';\n\tcode2[\"01110\"] = 'O';\n\tcode2[\"01111\"] = 'P';\n\tcode2[\"10000\"] = 'Q';\n\tcode2[\"10001\"] = 'R';\n\tcode2[\"10010\"] = 'S';\n\tcode2[\"10011\"] = 'T';\n\tcode2[\"10100\"] = 'U';\n\tcode2[\"10101\"] = 'V';\n\tcode2[\"10110\"] = 'W';\n\tcode2[\"10111\"] = 'X';\n\tcode2[\"11000\"] = 'Y';\n\tcode2[\"11001\"] = 'Z';\n\tcode2[\"11010\"] = ' ';\n\tcode2[\"11011\"] = '.';\n\tcode2[\"11100\"] = ',';\n\tcode2[\"11101\"] = '-';\n\tcode2[\"11110\"] = '\\'';\n\tcode2[\"11111\"] = '?';\n\twhile(!stdin.eof()) {\n\t\tauto s1 = readln().chomp();\n\t\tauto s2 = map!(a => code1[a])(s1).join(\"\");\n\t\twhile(!s2.empty()) {\n\t\t\twhile(s2.length < 5)\n\t\t\t\ts2 = s2 ~ '0';\n\t\t\twrite(code2[s2[0..5]]);\n\t\t\ts2 = s2.drop(5);\n\t\t}\n\t\twriteln();\n\t}\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio, std.string, std.conv;\nimport std.array, std.algorithm, std.range;\n\nvoid main()\n{\n    foreach(s;stdin.byLine())\n    {\n        string i;\n        foreach(c;s)\n        {\n            switch(c)\n            {\n            case ' ': i~=\"101\";break;\n            case'\\'': i~=\"000000\";break;\n            case ',': i~=\"000011\";break;\n            case '-': i~=\"10010001\";break;\n            case '.': i~=\"010001\";break;\n            case '?': i~=\"000001\";break;\n            case 'A': i~=\"100101\";break;\n            case 'B': i~=\"10011010\";break;\n            case 'C': i~=\"0101\";break;\n            case 'D': i~=\"0001\";break;\n            case 'E': i~=\"110\";break;\n            case 'F': i~=\"01001\";break;\n            case 'G': i~=\"10011011\";break;\n            case 'H': i~=\"010000\";break;\n            case 'I': i~=\"0111\";break;\n            case 'J': i~=\"10011000\";break;\n            case 'K': i~=\"0110\";break;\n            case 'L': i~=\"00100\";break;\n            case 'M': i~=\"10011001\";break;\n            case 'N': i~=\"10011110\";break;\n            case 'O': i~=\"00101\";break;\n            case 'P': i~=\"111\";break;\n            case 'Q': i~=\"10011111\";break;\n            case 'R': i~=\"1000\";break;\n            case 'S': i~=\"00110\";break;\n            case 'T': i~=\"00111\";break;\n            case 'U': i~=\"10011100\";break;\n            case 'V': i~=\"10011101\";break;\n            case 'W': i~=\"000010\";break;\n            case 'X': i~=\"10010010\";break;\n            case 'Y': i~=\"10010011\";break;\n            case 'Z': i~=\"10010000\";break;\n            default: assert(false);break;\n            }\n        }\n        i~='0'.repeat().take((5-i.length%5)%5).array();\n        string t;\n        foreach(c;0..i.length/5)\n        {\n            int v=0;\n            foreach(b;i[c*5..(c+1)*5]) v=(v<<1)+(b-'0');\n            t~=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[v];\n        }\n        writeln(t);\n    }\n}"
  },
  {
    "language": "D",
    "code": "import std.stdio;\nimport std.algorithm;\nimport std.string;\nimport std.range;\n\nstring[dchar] code1;\ndchar[string] code2;\n\nvoid main() {\n\tcode1[' '] = \"101\";\n\tcode1['\\''] = \"000000\";\n\tcode1[','] = \"000011\";\n\tcode1['-'] = \"10010001\";\n\tcode1['.'] = \"010001\";\n\tcode1['?'] = \"000001\";\n\tcode1['A'] = \"100101\";\n\tcode1['B'] = \"10011010\";\n\tcode1['C'] = \"0101\";\n\tcode1['D'] = \"0001\";\n\tcode1['E'] = \"110\";\n\tcode1['F'] = \"01001\";\n\tcode1['G'] = \"10011011\";\n\tcode1['H'] = \"010000\";\n\tcode1['I'] = \"0111\";\n\tcode1['J'] = \"10011000\";\n\tcode1['K'] = \"0110\";\n\tcode1['L'] = \"00100\";\n\tcode1['M'] = \"10011001\";\n\tcode1['N'] = \"10011110\";\n\tcode1['O'] = \"00101\";\n\tcode1['P'] = \"111\";\n\tcode1['Q'] = \"10011111\";\n\tcode1['R'] = \"1000\";\n\tcode1['S'] = \"00110\";\n\tcode1['T'] = \"00111\";\n\tcode1['U'] = \"10011100\";\n\tcode1['V'] = \"10011101\";\n\tcode1['W'] = \"000010\";\n\tcode1['X'] = \"10010010\";\n\tcode1['Y'] = \"10010011\";\n\tcode1['Z'] = \"10010000\";\n\n\tcode2[\"00000\"] = 'A';\n\tcode2[\"00001\"] = 'B';\n\tcode2[\"00010\"] = 'C';\n\tcode2[\"00011\"] = 'D';\n\tcode2[\"00100\"] = 'E';\n\tcode2[\"00101\"] = 'F';\n\tcode2[\"00110\"] = 'G';\n\tcode2[\"00111\"] = 'H';\n\tcode2[\"01000\"] = 'I';\n\tcode2[\"01001\"] = 'J';\n\tcode2[\"01010\"] = 'K';\n\tcode2[\"01011\"] = 'L';\n\tcode2[\"01100\"] = 'M';\n\tcode2[\"01101\"] = 'N';\n\tcode2[\"01110\"] = 'O';\n\tcode2[\"01111\"] = 'P';\n\tcode2[\"10000\"] = 'Q';\n\tcode2[\"10001\"] = 'R';\n\tcode2[\"10010\"] = 'S';\n\tcode2[\"10011\"] = 'T';\n\tcode2[\"10100\"] = 'U';\n\tcode2[\"10101\"] = 'V';\n\tcode2[\"10110\"] = 'W';\n\tcode2[\"10111\"] = 'X';\n\tcode2[\"11000\"] = 'Y';\n\tcode2[\"11001\"] = 'Z';\n\tcode2[\"11010\"] = ' ';\n\tcode2[\"11011\"] = '.';\n\tcode2[\"11100\"] = ',';\n\tcode2[\"11101\"] = '-';\n\tcode2[\"11110\"] = '\\'';\n\tcode2[\"11111\"] = '?';\n\twhile(!stdin.eof()) {\n\t\tauto s1 = readln().chomp();\n\t\tif(!s1.empty()) {\n\t\t\tauto s2 = map!(a => code1[a])(s1).join(\"\");\n\t\t\twhile(!s2.empty()) {\n\t\t\t\twhile(s2.length < 5)\n\t\t\t\t\ts2 = s2 ~ '0';\n\t\t\t\twrite(code2[s2[0..5]]);\n\t\t\t\ts2 = s2.drop(5);\n\t\t\t}\n\t\t\twriteln();\n\t\t}\n\t}\n}"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\nfor e in sys.stdin:\n a=''.join(d[c]for c in e.strip())\n b=a+'0'*(-len(a)%5)\n print(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(b[i:i+5],2)]for i in range(0,len(a)+4,5)))\n"
  },
  {
    "language": "Python",
    "code": "encode={\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"\n}\ndecode={\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"\n}\n\ndef coding():\n    code = \"\"\n    stri = \"\"\n    st = raw_input()\n    for s in st:\n        code += encode[s]\n    if len(code)%5:\n        code += \"0\"*(5-len(code)%5)\n    b = 0\n    while True:\n        if b == len(code):\n            return stri\n        stri += decode[code[b:b+5]]\n        b += 5\nwhile True:\n    try:\n        print coding()\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "d1={\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"}\nd2={\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"}\n\ns=raw_input()\ns1,ans=\"\",\"\"\nfor w in s:\n    s1+=d1[w]\ns1+=\"0\"*(5-len(s1)%5)\nfor i in range(len(s1)/5):\n    ans+=d2[s1[:5]]\n    s1=s1[5:]\nprint ans"
  },
  {
    "language": "Python",
    "code": "d1={\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"}\nd2={\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"}\nwhile 1:\n    try:\n        s=raw_input()\n    except EOFError:\n        break\n    s1,ans=\"\",\"\"\n    for w in s:\n        s1+=d1[w]\n    s1+=\"0\"*(5-len(s1)%5)\n    for i in range(len(s1)/5):\n        ans+=d2[s1[:5]]\n        s1=s1[5:]\n    print ans"
  },
  {
    "language": "Python",
    "code": "import sys\nconv1 = {' ':\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\nsym = \" .,-'?\"\nfor s in sys.stdin.readlines():\n    s1 = \"\"; s2 = \"\";\n    for c in s.strip():\n        s1 += conv1[c]\n    if len(s1)%5>0 :s1 += \"0\"*(5-(len(s1)%5))\n    for i in xrange(0,len(s1),5):\n        code = int(s1[i:i+5],2)\n        if code<26:\n            s2 += chr(65+code)\n        else:\n            s2 += sym[code-26]\n    print s2"
  },
  {
    "language": "Python",
    "code": "d1 = {\n' ':'101'\n,'\\'':'000000'\n,',':'000011'\n,'-':'10010001'\n,'.':'010001'\n,'?':'000001'\n,'A':'100101'\n,'B':'10011010'\n,'C':'0101'\n,'D':'0001'\n,'E':'110'\n,'F':'01001'\n,'G':'10011011'\n,'H':'010000'\n,'I':'0111'\n,'J':'10011000'\n,'K':'0110'\n,'L':'00100'\n,'M':'10011001'\n,'N':'10011110'\n,'O':'00101'\n,'P':'111'\n,'Q':'10011111'\n,'R':'1000'\n,'S':'00110'\n,'T':'00111'\n,'U':'10011100'\n,'V':'10011101'\n,'W':'000010'\n,'X':'10010010'\n,'Y':'10010011'\n,'Z':'10010000'\n}\n\nd2 = {\n'00000':'A'\n,'00001':'B'\n,'00010':'C'\n,'00011':'D'\n,'00100':'E'\n,'00101':'F'\n,'00110':'G'\n,'00111':'H'\n,'01000':'I'\n,'01001':'J'\n,'01010':'K'\n,'01011':'L'\n,'01100':'M'\n,'01101':'N'\n,'01110':'O'\n,'01111':'P'\n,'10000':'Q'\n,'10001':'R'\n,'10010':'S'\n,'10011':'T'\n,'10100':'U'\n,'10101':'V'\n,'10110':'W'\n,'10111':'X'\n,'11000':'Y'\n,'11001':'Z'\n,'11010':' '\n,'11011':'.'\n,'11100':','\n,'11101':'-'\n,'11110':'\\''\n,'11111':'?'\n}\n\ns1 = input()\ns2 = ''\ns3 = ''\nfor i in range(len(s1)):\n    s2 += d1[s1[i]]\nif len(s2)%5 != 0:\n    s2 += '0'*(5-len(s2)%5)\nfor i in range(len(s2)//5):\n    s3 += d2[s2[i*5:(i+1)*5]]\n    \nprint(s3)"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\nfor e in sys.stdin:\n a=''.join(d[c]for c in e[:-1])\n a+='0'*(-len(a)%5)\n print(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(a[i*5:i*5+5],2)]for i in range(len(a)//5)))\n"
  },
  {
    "language": "Python",
    "code": "import sys\n\ndef suicide(sentence):\n    string = ''\n    for c in sentence:\n        string += dic[c]\n    lis = []\n    while string:\n        lis.append(string[:5])\n        string = string[5:]\n    for i in range(5-len(lis[-1])):\n        lis[-1] = lis[-1] + '0'\n    absolutely_fantastic(lis)\n        \ndef absolutely_fantastic(lis):\n    ans = ''\n    for v in lis:\n        a = 0\n        for i in range(5):\n            a += 2**(4-i)*int(v[i])\n        else:\n            ans += mathematics[a]\n    else:\n        print ans\n\ndic = {' ':'101', \"'\":'000000', ',':'000011', '-':'10010001', '.':'010001', '?':'000001', 'A':'100101', 'B':'10011010', 'C':'0101',\n       'D':'0001', 'E':'110', 'F':'01001', 'G':'10011011', 'H':'010000', 'I':'0111', 'J':'10011000', 'K':'0110',\n       'L':'00100', 'M':'10011001', 'N':'10011110', 'O':'00101', 'P':'111', 'Q':'10011111', 'R':'1000',\n       'S':'00110', 'T':'00111', 'U':'10011100', 'V':'10011101', 'W':'000010', 'X':'10010010', 'Y':'10010011', 'Z':'10010000'}\n\nmathematics = {0:'A', 1:'B', 2:'C', 3:'D', 4:'E', 5:'F', 6:'G', 7:'H', \n               8:'I', 9:'J', 10:'K', 11:'L', 12:'M', 13:'N', 14:'O', 15:'P', \n               16:'Q', 17:'R', 18:'S', 19:'T', 20:'U', 21:'V', 22:'W', 23:'X',\n               24:'Y', 25:'Z', 26:' ', 27:'.', 28:',', 29:'-', 30:\"'\", 31:'?',}\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        suicide(line.rstrip())"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\nd1 = {\n    ' ': '101'\n    , '\\'': '000000'\n    , ',': '000011'\n    , '-': '10010001'\n    , '.': '010001'\n    , '?': '000001'\n    , 'A': '100101'\n    , 'B': '10011010'\n    , 'C': '0101'\n    , 'D': '0001'\n    , 'E': '110'\n    , 'F': '01001'\n    , 'G': '10011011'\n    , 'H': '010000'\n    , 'I': '0111'\n    , 'J': '10011000'\n    , 'K': '0110'\n    , 'L': '00100'\n    , 'M': '10011001'\n    , 'N': '10011110'\n    , 'O': '00101'\n    , 'P': '111'\n    , 'Q': '10011111'\n    , 'R': '1000'\n    , 'S': '00110'\n    , 'T': '00111'\n    , 'U': '10011100'\n    , 'V': '10011101'\n    , 'W': '000010'\n    , 'X': '10010010'\n    , 'Y': '10010011'\n    , 'Z': '10010000'\n}\n\nd2 = {\n    '00000': 'A'\n    , '00001': 'B'\n    , '00010': 'C'\n    , '00011': 'D'\n    , '00100': 'E'\n    , '00101': 'F'\n    , '00110': 'G'\n    , '00111': 'H'\n    , '01000': 'I'\n    , '01001': 'J'\n    , '01010': 'K'\n    , '01011': 'L'\n    , '01100': 'M'\n    , '01101': 'N'\n    , '01110': 'O'\n    , '01111': 'P'\n    , '10000': 'Q'\n    , '10001': 'R'\n    , '10010': 'S'\n    , '10011': 'T'\n    , '10100': 'U'\n    , '10101': 'V'\n    , '10110': 'W'\n    , '10111': 'X'\n    , '11000': 'Y'\n    , '11001': 'Z'\n    , '11010': ' '\n    , '11011': '.'\n    , '11100': ','\n    , '11101': '-'\n    , '11110': '\\''\n    , '11111': '?'\n}\n\nS = ''\nfor s in sys.stdin:\n    s = s.rstrip('\\n')\n    S += s + ' '\nS = S[:-1]\n\nT = ''\nfor c in S:\n    T += d1[c]\n\n# zero addition\nif len(T) % 5 != 0:\n    add_zero_num = 5 - len(T) % 5\n    T += '0' * add_zero_num\n\nU = ''\nfor i in range(0, len(T), 5):\n    binary = T[i:i+5]\n    U += d2[binary]\n\nprint(U)"
  },
  {
    "language": "Python",
    "code": "import sys\nd1 = {\n' ':'101'\n,'\\'':'000000'\n,',':'000011'\n,'-':'10010001'\n,'.':'010001'\n,'?':'000001'\n,'A':'100101'\n,'B':'10011010'\n,'C':'0101'\n,'D':'0001'\n,'E':'110'\n,'F':'01001'\n,'G':'10011011'\n,'H':'010000'\n,'I':'0111'\n,'J':'10011000'\n,'K':'0110'\n,'L':'00100'\n,'M':'10011001'\n,'N':'10011110'\n,'O':'00101'\n,'P':'111'\n,'Q':'10011111'\n,'R':'1000'\n,'S':'00110'\n,'T':'00111'\n,'U':'10011100'\n,'V':'10011101'\n,'W':'000010'\n,'X':'10010010'\n,'Y':'10010011'\n,'Z':'10010000'\n}\n\nd2 = {\n'00000':'A'\n,'00001':'B'\n,'00010':'C'\n,'00011':'D'\n,'00100':'E'\n,'00101':'F'\n,'00110':'G'\n,'00111':'H'\n,'01000':'I'\n,'01001':'J'\n,'01010':'K'\n,'01011':'L'\n,'01100':'M'\n,'01101':'N'\n,'01110':'O'\n,'01111':'P'\n,'10000':'Q'\n,'10001':'R'\n,'10010':'S'\n,'10011':'T'\n,'10100':'U'\n,'10101':'V'\n,'10110':'W'\n,'10111':'X'\n,'11000':'Y'\n,'11001':'Z'\n,'11010':' '\n,'11011':'.'\n,'11100':','\n,'11101':'-'\n,'11110':'\\''\n,'11111':'?'\n}\nfor line in sys.stdin:\n    s1 = line.rstrip()\n    s2 = ''\n    s3 = ''\n    for i in range(len(s1)):\n        s2 += d1[s1[i]]\n    if len(s2)%5 != 0:\n        s2 += '0'*(5-len(s2)%5)\n    \n    for i in range(len(s2)//5):\n        s3 += d2[s2[i*5:(i+1)*5]]\n        \n    print(s3)\n    \n "
  },
  {
    "language": "Python",
    "code": "def get_input():\n    while True:\n        try:\n            yield ''.join(input())\n        except EOFError:\n            break\n\ndict1 = {\"A\":\"00000\",\\\n        \"B\":\"00001\",\\\n        \"C\":\"00010\",\\\n        \"D\":\"00011\",\\\n        \"E\":\"00100\",\\\n        \"F\":\"00101\",\\\n        \"G\":\"00110\", \\\n        \"H\":\"00111\", \\\n        \"I\":\"01000\", \\\n        \"J\":\"01001\", \\\n        \"K\":\"01010\", \\\n        \"L\":\"01011\", \\\n        \"M\":\"01100\", \\\n        \"N\":\"01101\", \\\n        \"O\":\"01110\", \\\n        \"P\":\"01111\", \\\n        \"Q\":\"10000\", \\\n        \"R\":\"10001\", \\\n        \"S\":\"10010\", \\\n        \"T\":\"10011\", \\\n        \"U\":\"10100\", \\\n        \"V\":\"10101\", \\\n        \"W\":\"10110\", \\\n        \"X\":\"10111\", \\\n        \"Y\":\"11000\", \\\n        \"Z\":\"11001\", \\\n        \" \":\"11010\", \\\n        \".\":\"11011\", \\\n        \",\":\"11100\", \\\n        \"-\":\"11101\", \\\n        \"'\":\"11110\", \\\n        \"?\":\"11111\"}\n\ndict2 = {\"101\":\" \",\\\n         \"000000\":\"'\",\\\n         \"000011\":\",\", \\\n         \"10010001\":\"-\", \\\n         \"010001\":\".\",\\\n         \"000001\":\"?\",\\\n         \"100101\":\"A\",\\\n         \"10011010\":\"B\",\\\n         \"0101\":\"C\",\\\n         \"0001\":\"D\",\\\n         \"110\":\"E\",\\\n         \"01001\":\"F\",\\\n         \"10011011\":\"G\",\\\n         \"010000\":\"H\",\\\n         \"0111\":\"I\",\\\n         \"10011000\":\"J\",\\\n         \"0110\":\"K\",\\\n         \"00100\":\"L\",\\\n         \"10011001\":\"M\",\\\n         \"10011110\":\"N\",\\\n         \"00101\":\"O\",\\\n         \"111\":\"P\",\\\n         \"10011111\":\"Q\",\\\n         \"1000\":\"R\",\\\n         \"00110\":\"S\",\\\n         \"00111\":\"T\",\\\n         \"10011100\":\"U\",\\\n         \"10011101\":\"V\",\\\n         \"000010\":\"W\",\\\n         \"10010010\":\"X\",\\\n         \"10010011\":\"Y\",\\\n         \"10010000\":\"Z\"}\n\nd1 = {v:k for k, v in dict1.items()}\nd2 = {v:k for k, v in dict2.items()}\n\n\nN = list(get_input())\n\nfor l in range(len(N)):\n    S1 = N[l]\n    S2 = \"\"\n\n    for i in range(len(S1)):\n        S2 = S2 + d2[S1[i]]\n\n    S3 = \"\"\n    while S2 != \"\":\n        if len(S2) >= 5:\n            s = S2[0:5]\n            S3 = S3 + d1[s]\n            S2 = S2[5:]\n        else:\n            while len(S2) < 5:\n                S2 = S2 + \"0\"\n            S3 = S3 + d1[S2]\n            break\n\n    print(S3)\n\n"
  },
  {
    "language": "Python",
    "code": "dic1 = {\" \":\"101\", \"'\":\"000000\", \",\":\"000011\", \"-\":\"10010001\", \"?\":\"000001\",\n        \"A\":\"100101\", \"B\":\"10011010\", \"C\":\"0101\", \"D\":\"0101\", \"E\":\"110\",\n        \"F\":\"01001\", \"G\":\"10011011\", \"H\":\"010000\", \"I\":\"0111\", \"J\":\"10011000\",\n        \"K\":\"0110\", \"L\":\"00100\", \"M\":\"10011001\", \"N\":\"10011110\", \"O\":\"00101\",\n        \"P\":\"111\", \"Q\":\"10011111\", \"R\":\"1000\", \"S\":\"00110\", \"T\":\"00111\",\n        \"U\":\"10011100\", \"V\":\"10011101\", \"W\":\"000010\", \"X\":\"10010010\", \"Y\":\"10010011\", \"Z\":\"10010000\"}\n\ndic2 = {\"00000\":\"A\", \"00001\":\"B\", \"00010\":\"C\", \"00011\":\"D\", \"00100\":\"E\",\n        \"00101\":\"F\", \"00110\":\"G\", \"00111\":\"H\", \"01000\":\"I\", \"01001\":\"J\",\n        \"01010\":\"K\", \"01011\":\"L\", \"01100\":\"M\", \"01101\":\"N\", \"01110\":\"O\",\n        \"01111\":\"P\", \"10000\":\"Q\", \"10001\":\"R\", \"10010\":\"S\", \"10011\":\"T\",\n        \"10100\":\"U\", \"10101\":\"V\", \"10110\":\"W\", \"10111\":\"X\", \"11000\":\"Y\",\n        \"11001\":\"Z\", \"11010\":\" \", \"11011\":\".\", \"11100\":\",\", \"11101\":\"-\",\n        \"11110\":\"'\", \"11111\":\"?\"}\n\ndef to_digit(ss):\n  ret = \"\"\n  for s in ss:\n    ret += dic1[s]\n  return ret\n\ndef to_alpha(digit):\n  ret = \"\"\n  ind = 0\n  end = len(digit)\n\n  while ind + 5 < end:\n    ret += dic2[digit[ind:ind + 5]]\n    ind += 5\n\n  if digit[ind:]:\n    ret += dic2[digit[ind:] + \"0\" * (5 - end + ind)]\n\n  return ret\n\nwhile True:\n  try:\n    ss = input()\n    print(to_alpha(to_digit(ss)))\n  except EOFError:\n    break\n"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\nfor e in sys.stdin:\n a=''.join(d[c]for c in e[:-1])\n a+='0'*(-len(a)%5)\n print(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(a[i:i+5],2)]for i in range(0,len(a),5)))\n"
  },
  {
    "language": "Python",
    "code": "en=[chr(i) for i in range(65,91)]+list(' .,-\\'?')\nde={\n' ':'101','\\'':'000000',',':'000011','-':'10010001','.':'010001','?':'000001',\n'A':'100101','B':'10011010','C':'0101','D':'0001','E':'110','F':'01001',\n'G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100',\n'M':'10011001','N':'10011110','O':'00101','P':'111','Q':'10011111','R':'1000',\n'S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010',\n'Y':'10010011','Z':'10010000'}\na=b=''\nfor x in list(input()):\n    a+=de[x]\na+='0'*(-len(a)%5)\nfor i in range(0,len(a),5):\n    b+=en[int(a[i:i+5],2)]\nprint(b)"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\nfor e in sys.stdin:\n a=''.join(d[c]for c in e[:-1])\n a+='0'*(-len(a)%5)\n print(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(a[i:i+5],2)]for i in range(0,len(a),5)))\n"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\nfrom sys import stdin\nimport io\n\nd1 = {\n    ' ': '101', \"'\": '000000', ',': '000011', '-': '10010001',\n    '.': '010001', '?': '000001', 'A': '100101', 'B': '10011010',\n    'C': '0101', 'D': '0001', 'E': '110', 'F': '01001', 'G': '10011011',\n    'H': '010000', 'I': '0111', 'J': '10011000', 'K': '0110', 'L': '00100',\n    'M': '10011001', 'N': '10011110', 'O': '00101', 'P': '111',\n    'Q': '10011111', 'R': '1000', 'S': '00110', 'T': '00111',\n    'U': '10011100', 'V': '10011101', 'W': '000010', 'X': '10010010',\n    'Y': '10010011', 'Z': '10010000'\n    }\nd2 = {'{:05b}'.format(n): chr(n+ord('A')) for n in range(26)}\nd2.update({'{:05b}'.format(n): c for n, c in zip(range(26, 32), \" .,-'?\")})\n\nstream = io.StringIO()\nfor line in stdin:\n    stream.seek(0)\n    stream.write(''.join(d1[c] for c in line.rstrip()))\n    stream.seek(0)\n    for c in iter(lambda: stream.read(5), ''):\n        print(d2[c.ljust(5, '0')], end='')\n    print()"
  },
  {
    "language": "Python",
    "code": "en=[chr(i) for i in range(65,91)]+list(' .,-\\'?')\nde={\n' ':'101','\\'':'000000',',':'000011','-':'10010001','.':'010001','?':'000001',\n'A':'100101','B':'10011010','C':'0101','D':'0001','E':'110','F':'01001',\n'G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100',\n'M':'10011001','N':'10011110','O':'00101','P':'111','Q':'10011111','R':'1000',\n'S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010',\n'Y':'10010011','Z':'10010000'\n}\nwhile 1:\n    try:s=input()\n    except:break\n    a=b=''\n    for x in s:a+=de[x]\n    a+='0'*(-len(a)%5)\n    for i in range(len(a)//5):b+=en[int(a[i*5:i*5+5],2)]\n    print(b)"
  },
  {
    "language": "Python",
    "code": "enco1={\" \":\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\nenco2={\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\nwhile True:\n    try:\n        s=\"\".join([enco1[w] for w in raw_input()])\n        s=s+\"0\"*(5-len(s)%5)\n        print \"\".join([enco2[s[i:i+5]] for i in xrange(0,len(s),5)])\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "enco1={\" \":\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\nenco2={\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\ns=\"\".join([enco1[w] for w in raw_input()])\ns=s+\"0\"*(5-len(s)%5)\nprint \"\".join([enco2[s[i:i+5]] for i in xrange(0,len(s),5)])"
  },
  {
    "language": "Python",
    "code": "d1 = {\" \":\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\",}\nd2 = {\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\n\nwhile 1:\n    try:\n        c,dc='',''\n        n=raw_input()\n        for i in n:\n            c+=d1[i]\n        if len(c)%5!=0:\n            c+='0'*(5-len(c)%5)\n        for i in range(0,len(c),5):\n            dc+=d2[c[i:i+5]]\n        print dc\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "class Code:\n    def __init__(self): \n        self.cd1 = {\" \":\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\n        self.cd2 = {\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\n\n    def code1(self,s):\n        t0 = list(map(lambda x:self.cd1[x], s))\n        t1 = ''.join(t0)\n        t = list(t1)\n        t0 = t\n        u = []\n        while len(t) > 0:\n            u.append(t[0:5])\n            t[0:5]=[]\n            if len(u[-1]) != 5:\n                u[-1] = (u[-1] + ['0']*4)[0:5]\n                v = list(map(lambda x:''.join(x), u))\n                return(v)\n\n    def code2(self,s):\n        t = []\n        for i in s: \n            t.append(self.cd2[i])\n        u = ''.join(t)\n        return(u)\n\nif __name__ == \"__main__\":\n    cd = Code()\n    while True:\n        try:\n            s = input().strip()\n            t = cd.code1(s)\n            u = cd.code2(t)\n            print(u)\n\n        except EOFError:\n            break"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\nfor e in sys.stdin:\n a=''.join(d[c]for c in e.strip())\n l=len(a)+4\n b=a.ljust(l//5*5,'0')\n print(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(b[i:i+5],2)]for i in range(0,l,5)))\n"
  },
  {
    "language": "Python",
    "code": "import sys\nL=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nA=\" ',-.?\"+L\nB=\"101 000000 000011 10010001 010001 000001 100101 10011010 \"\\\n  \"0101 0001 110 01001 10011011 010000 0111 10011000 \"\\\n  \"0110 00100 10011001 10011110 00101 111 10011111 1000 \"\\\n  \"00110 00111 10011100 10011101 000010 10010010 10010011 10010000\".split()\nC=L+\" .,-'?\"\nfor s in sys.stdin:\n  x=\"\"\n  for c in s[:-1]:x+=B[A.index(c)]\n  x+=\"0\"*(-len(x)%5)\n  s=\"\"\n  for i in range(0,len(x),5):s+=C[int(x[i:i+5],2)]\n  print s"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\na='101'.join(''.join(d[c]for c in e.strip())for e in sys.stdin)\na+='0'*(-len(a)%5)\nprint(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(a[i:i+5],2)]for i in range(0,len(a),5)))\n"
  },
  {
    "language": "Python",
    "code": "encode={\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"\n}\ndecode={\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"\n}\n\ndef coding():\n    code = \"\"\n    stri = \"\"\n    st = raw_input()\n    for s in st:\n        code += encode[s]\n    b = 0\n    while True:\n        if len(code) == b+5:\n            stri += decode[code[b:b+5]]\n            break\n        elif len(code) < b+5:\n            stri += decode[code[b:].zfill(5)]\n            break\n        stri += decode[code[b:b+5]]\n        b += 5\n    return stri\n\nwhile True:\n    try:\n        print coding()\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "import sys\nconv1 = {' ':\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\nconv2 = {\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\nfor s in sys.stdin.readlines():\n    s1 = \"\"; s2 = \"\";\n    for c in s.strip():\n        s1 += conv1[c]\n    if len(s1)%5>0 :s1 += \"0\"*(5-(len(s1)%5))\n    for i in xrange(0,len(s1)-1,5):\n        s2 += conv2[s1[i:i+5]]\n    print s2"
  },
  {
    "language": "Python",
    "code": "conv1 = {' ':\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\nconv2 = {\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\nwhile 1:\n    try:\n        s = raw_input()\n        s1 = \"\"; s2 = \"\";\n        for c in s.strip():\n            s1 += conv1[c]\n        if len(s1)%5>0 :s1 += \"0\"*(5-(len(s1)%5))\n        for i in xrange(0,len(s1),5):\n            s2 += conv2[s1[i:i+5]]\n        print s2\n    except EOFError:\n        break"
  },
  {
    "language": "Python",
    "code": "d1 = {\" \":\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\",}\nd2 = {\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\n\nwhile True:\n\ttry:\n\t\tc,dc = \"\",\"\"\n\t\tinp = raw_input()\n\t\tfor a in inp:\n\t\t\tc += d1[a]\n\t\tif len(c)%5 != 0:\n\t\t\tc += \"0\"*(5-len(c)%5)\n\t\tfor i in range(0,len(c),5):\n\t\t\tdc += d2[c[i:i+5]]\n\t\tprint dc\n\texcept:\n\t\tbreak"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\nd1 = {\n    ' ': '101'\n    , '\\'': '000000'\n    , ',': '000011'\n    , '-': '10010001'\n    , '.': '010001'\n    , '?': '000001'\n    , 'A': '100101'\n    , 'B': '10011010'\n    , 'C': '0101'\n    , 'D': '0001'\n    , 'E': '110'\n    , 'F': '01001'\n    , 'G': '10011011'\n    , 'H': '010000'\n    , 'I': '0111'\n    , 'J': '10011000'\n    , 'K': '0110'\n    , 'L': '00100'\n    , 'M': '10011001'\n    , 'N': '10011110'\n    , 'O': '00101'\n    , 'P': '111'\n    , 'Q': '10011111'\n    , 'R': '1000'\n    , 'S': '00110'\n    , 'T': '00111'\n    , 'U': '10011100'\n    , 'V': '10011101'\n    , 'W': '000010'\n    , 'X': '10010010'\n    , 'Y': '10010011'\n    , 'Z': '10010000'\n}\n\nd2 = {\n    '00000': 'A'\n    , '00001': 'B'\n    , '00010': 'C'\n    , '00011': 'D'\n    , '00100': 'E'\n    , '00101': 'F'\n    , '00110': 'G'\n    , '00111': 'H'\n    , '01000': 'I'\n    , '01001': 'J'\n    , '01010': 'K'\n    , '01011': 'L'\n    , '01100': 'M'\n    , '01101': 'N'\n    , '01110': 'O'\n    , '01111': 'P'\n    , '10000': 'Q'\n    , '10001': 'R'\n    , '10010': 'S'\n    , '10011': 'T'\n    , '10100': 'U'\n    , '10101': 'V'\n    , '10110': 'W'\n    , '10111': 'X'\n    , '11000': 'Y'\n    , '11001': 'Z'\n    , '11010': ' '\n    , '11011': '.'\n    , '11100': ','\n    , '11101': '-'\n    , '11110': '\\''\n    , '11111': '?'\n}\n\nS = ''\nfor s in sys.stdin:\n    s = s.strip()\n    S += s + ' '\nS = S[:-1]\n\nT = ''\nfor c in S:\n    T += d1[c]\n\n# zero addition\nif len(T) % 5 != 0:\n    add_zero_num = 5 - len(T) % 5\n    T += '0' * add_zero_num\n\nU = ''\nfor i in range(0, len(T), 5):\n    binary = T[i:i+5]\n    U += d2[binary]\n\nprint(U)"
  },
  {
    "language": "Python",
    "code": "encode = {\n' ':'101', \n\"'\":'000000', \n',':'000011', \n'-':'10010001', \n'.':'010001', \n'?':'000001', \n'A':'100101', \n'B':'10011010', \n'C':'0101', \n'D':'0001', \n'E':'110', \n'F':'01001', \n'G':'10011011', \n'H':'010000', \n'I':'0111', \n'J':'10011000', \n'K':'0110', \n'L':'00100', \n'M':'10011001', \n'N':'10011110', \n'O':'00101', \n'P':'111', \n'Q':'10011111', \n'R':'1000', \n'S':'00110', \n'T':'00111', \n'U':'10011100', \n'V':'10011101', \n'W':'000010', \n'X':'10010010', \n'Y':'10010011', \n'Z':'10010000'}\n\ndecode = {\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"}\n\nwhile True:\n\ttry:\n\t\tstring = raw_input()\n\texcept EOFError:\n\t\tbreak\t\t\n\n\t# encode\n\te, ans = \"\", \"\"\n\tfor s in string:\n\t\te += encode[s]\n\ttmp = []\n\twhile len(e) > 4:\n\t\ttmp.append(e[0:5])\n\t\te = e[5:]\n\tif len(e) != 0:\n\t\te += '0' * (5 - len(e))\n\t\ttmp.append(e)\n\tprint tmp\n\n\t# decode\n\tfor s in tmp:\n\t\tans += decode[s]\n\tprint ans"
  },
  {
    "language": "Python",
    "code": "a='101'.join(''.join(d[c]for c in e.strip())for e in sys.stdin)\nl=len(a)+4\nb=a.ljust(l//5*5,'0')\nprint(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(b[i:i+5],2)]for i in range(0,l,5)))\n"
  },
  {
    "language": "Python",
    "code": "enc_s = \" |'|,|-|.|?|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z\"\nenc_i = \"101|000000|000011|10010001|010001|000001|100101|10011010|0101|0001|110|01001|10011011|010000|0111|10011000|0110|00100|10011001|10011110|00101|111|10011111|1000|00110|00111|10011100|10011101|000010|10010010|10010011|10010000\"\nenc = dict(zip([i for i in enc_s.split(\"|\")],[i for i in enc_i.split(\"|\")]))\ndec_s = \"A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z| |.|,|-|'|?\"\ndec_i = \"00000|00001|00010|00011|00100|00101|00110|00111|01000|01001|01010|01011|01100|01101|01110|01111|10000|10001|10010|10011|10100|10101|10110|10111|11000|11001|11010|11011|11100|11101|11110|11111\"\ndec = dict(zip([i for i in dec_i.split(\"|\")],[i for i in dec_s.split(\"|\")]))\ndef encode(a):\n    return \"\".join([enc[i] for i in list(a)])\ndef decode(a):\n    return \"\".join([dec[i] for i in a])\n\nwhile(1):\n    try:\n        a = input()\n        encoded = encode(a)\n        l = len(encoded)%5\n        l = 5 if l == 0 else l\n        encoded = encoded + \"0\"*(5-l)\n        l_ = int(len(encoded)/5)\n        enc_list = [encoded[5*i:5*(i+1)] for i in range(l_)]\n        decoded = decode(enc_list)\n        print(decoded)\n    except EOFError:\n        break\n\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\nd1 = {\n    ' ': '101'\n    , '\\'': '000000'\n    , ',': '000011'\n    , '-': '10010001'\n    , '.': '010001'\n    , '?': '000001'\n    , 'A': '100101'\n    , 'B': '10011010'\n    , 'C': '0101'\n    , 'D': '0001'\n    , 'E': '110'\n    , 'F': '01001'\n    , 'G': '10011011'\n    , 'H': '010000'\n    , 'I': '0111'\n    , 'J': '10011000'\n    , 'K': '0110'\n    , 'L': '00100'\n    , 'M': '10011001'\n    , 'N': '10011110'\n    , 'O': '00101'\n    , 'P': '111'\n    , 'Q': '10011111'\n    , 'R': '1000'\n    , 'S': '00110'\n    , 'T': '00111'\n    , 'U': '10011100'\n    , 'V': '10011101'\n    , 'W': '000010'\n    , 'X': '10010010'\n    , 'Y': '10010011'\n    , 'Z': '10010000'\n}\n\nd2 = {\n    '00000': 'A'\n    , '00001': 'B'\n    , '00010': 'C'\n    , '00011': 'D'\n    , '00100': 'E'\n    , '00101': 'F'\n    , '00110': 'G'\n    , '00111': 'H'\n    , '01000': 'I'\n    , '01001': 'J'\n    , '01010': 'K'\n    , '01011': 'L'\n    , '01100': 'M'\n    , '01101': 'N'\n    , '01110': 'O'\n    , '01111': 'P'\n    , '10000': 'Q'\n    , '10001': 'R'\n    , '10010': 'S'\n    , '10011': 'T'\n    , '10100': 'U'\n    , '10101': 'V'\n    , '10110': 'W'\n    , '10111': 'X'\n    , '11000': 'Y'\n    , '11001': 'Z'\n    , '11010': ' '\n    , '11011': '.'\n    , '11100': ','\n    , '11101': '-'\n    , '11110': '\\''\n    , '11111': '?'\n}\n\nS = ''\nfor s in sys.stdin:\n    s = s.strip()\n    S += s + ' '\nS = S[:-1]\n\nT = ''\nfor c in S:\n    T += d1[c]\n\n# zero addition\nif len(T) % 5 != 0:\n    add_zero_num = 5 - len(T) % 5\n    T += '0' * add_zero_num\n\nU = ''\nfor i in range(0, len(T) // 5):\n    binary = T[i*5:i*5+5]\n    U += d2[binary]\n\nprint(U)"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\nfor e in sys.stdin:\n a=''.join(d[c]for c in e.strip())\n a+='0'*(-len(a)%5)\n# print(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(a[i:i+5],2)]for i in range(0,len(a),5)))\n print(*[\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(a[i:i+5],2)]for i in range(0,len(a),5)],sep='')\n"
  },
  {
    "language": "Python",
    "code": "# AOJ 0088: The Code A Doctor Loved\n# Python3 2018.6.28 bal4u\n\nc2d = {'A':\"100101\", 'B':\"10011010\", 'C':\"0101\", 'D':\"0001\", 'E':\"110\", 'F':\"01001\", \\\n'G':\"10011011\", 'H':\"010000\", 'I':\"0111\", 'J':\"10011000\", 'K':\"0110\", 'L':\"00100\", \\\n'M':\"10011001\", 'N':\"10011110\", 'O':\"00101\", 'P':\"111\", 'Q':\"10011111\", 'R':\"1000\", \\\n'S':\"00110\", 'T':\"00111\", 'U':\"10011100\", 'V':\"10011101\", 'W':\"000010\", 'X':\"10010010\", \\\n'Y':\"10010011\", 'Z':\"10010000\", ' ':\"101\", \"'\":\"000000\", ',':\"000011\", \\\n'-':\"10010001\", '.':\"010001\", '?':\"000001\"}\n\nd2c = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', \\\n'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '.', ',', '-',\t'\\'', '?']\n\nwhile True:\n\ttry: p = input()\n\texcept: break\n\tans, tmp = '', ''\n\tfor c in p: tmp += c2d[c]\n\tif len(tmp) % 5 > 0: tmp += '0'*(5-len(tmp)%5)\n\tfor i in range(0, len(tmp), 5): ans += d2c[int(tmp[i:i+5], 2)]\n\tprint(ans)\n"
  },
  {
    "language": "Python",
    "code": "import sys\nconv1 = {' ':\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\nconv2 = {\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\nfor s in sys.stdin.readlines():\n    s1 = \"\"; s2 = \"\";\n    for c in s.strip():\n        s1 += conv1[c]\n    if len(s1)%5>0 :s1 += \"0\"*(5-(len(s1)%5))\n    for i in xrange(0,len(s1),5):\n        s2 += conv2[s1[i:i+5]]\n    print s2"
  },
  {
    "language": "Python",
    "code": "encode = {\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"\n}\ndecode = {\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"\n}\n\ndef doc_string():\n    \"\"\"\n    I can fly.\n    \"\"\"\n\nwhile True:\n\ttry:\n\t\tlist = raw_input()\n\texcept EOFError:\n\t\tbreak\n\tcode = \"\"\n\tfor i in xrange(len(list)):\n\t\tcode += encode[list[i:i+1]]\n\t\n\tfor i in xrange(5 - len(code) % 5):\n\t\tcode += \"0\"\n\t\n\tfffff = \"\"\n\tfor i in xrange(len(code) / 5):\n\t\tfffff += decode[code[i*5:i*5+5]]\n\t\n\tprint fffff"
  },
  {
    "language": "Python",
    "code": "encode = {\n' ':'101', \n\"'\":'000000', \n',':'000011', \n'-':'1001000', \n'.':'010001', \n'?':'000001', \n'A':'100101', \n'B':'10011010', \n'C':'0101', \n'D':'0001', \n'E':'110', \n'F':'01001', \n'G':'10011011', \n'H':'010000', \n'I':'0111', \n'J':'10011000', \n'K':'0110', \n'L':'00100', \n'M':'10011001', \n'N':'10011110', \n'O':'00101', \n'P':'111', \n'Q':'10011111', \n'R':'1000', \n'S':'00110', \n'T':'00111', \n'U':'10011100', \n'V':'10011101', \n'W':'000010', \n'X':'10010010', \n'Y':'10010011', \n'Z':'10010000'}\n\ndecode = {\n'00000':'A', \n'00001':'B', \n'00010':'C', \n'00011':'D', \n'00100':'E',\n'00101':'F',\n'00110':'G',\n'00111':'H',\n'01000':'I',\n'01001':'J',\n'01010':'K',\n'01011':'L',\n'01100':'M',\n'01101':'N',\n'01110':'O',\n'01111':'P',\n'10000':'Q',\n'10001':'R',\n'10010':'S',\n'10011':'T',\n'10100':'U',\n'10101':'V',\n'10110':'W',\n'10111':'X',\n'11000':'Y',\n'11001':'Z',\n'11010':' ',\n'11011':'.',\n'11100':',',\n'11101':'-',\n'11110':\"'\",\n'11111':'?'}\n\nwhile True:\n\ttry:\n\t\tstring = raw_input()\n\texcept EOFError:\n\t\tbreak\t\t\n\n\t# encode\n\te, ans = \"\", \"\"\n\tfor s in string:\n\t\te += encode[s]\n\ttmp = []\n\twhile len(e) > 4:\n\t\ttmp.append(e[0:5])\n\t\te = e[5:]\n\tif len(e) != 0:\n\t\te += '0' * (5 - len(e))\n\t\ttmp.append(e)\n\tprint tmp\n\n\t# decode\n\tfor s in tmp:\n\t\tans += decode[s]\n\tprint ans"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\na=''\nfor e in sys.stdin:\n a+=''.join(d[c]for c in e.strip())\na+='0'*(-len(a)%5)\nprint(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(a[i:i+5],2)]for i in range(0,len(a),5)))\n"
  },
  {
    "language": "Python",
    "code": "encode = {' ':'101', '\\'':'000000', ',':'000011', '-':'1001000', '.':'010001', '?':'000001', 'A':'100101', 'B':'10011010', 'C':'0101', 'D':'0001', 'E':'110', 'F':'01001', 'G':'10011011', 'H':'010000', 'I':'0111', 'J':'10011000', 'K':'0110', 'L':'00100', 'M':'10011001', 'N':'10011110', 'O':'00101', 'P':'111', 'Q':'10011111', 'R':'1000', 'S':'00110', 'T':'00111', 'U':'10011100', 'V':'10011101', 'W':'000010', 'X':'10010010', 'Y':'10010011', 'X':'10010000'}\ndecode = {'00000':'A', '00001':'B', '00010':'C', '00011':'D', '00100':'E','00101':'F','00110':'G','00111':'H','01000':'I','01001':'J','01010':'K','01011':'L','01100':'M','01101':'N','01110':'O','01111':'P','10000':'Q','10001':'R','10010':'S','10011':'T','10100':'U','10101':'V','10110':'W','10111':'X','11000':'Y','11001':'Z','11010':' ','11011':'.','11100':',','11101':'-','11110':'\\'','11111':'?'}\n\nwhile True:\n\ttry:\n\t\tstring = list(raw_input().replace(\"\\n\", \"\"))\n\t\t\n\t\t# encode\n\t\tcode = \"\"\n\t\tfor s in string:\n\t\t\tcode += encode[s]\n\t\ti = 0\n\t\ttmp = []\n\t\twhile i+5 <= len(code):\n\t\t\ttmp.append(code[i:i+5])\n\t\t\tcode = code[i+5:]\n\t\tif len(code) != 0:\n\t\t\tcode += '0' * (5 - len(code))\n\t\t\ttmp.append(code)\n\n\t\t# decode\n\t\tans = \"\"\n\t\tfor s in tmp:\n\t\t\tans += decode[s]\n\t\tprint ans\n\texcept EOFError:\n\t\tbreak"
  },
  {
    "language": "Python",
    "code": "conv1 = {' ':\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\nconv2 = {\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\nwhile 1:\n    try:\n        s = raw_input()\n        s1 = \"\"; s2 = \"\";\n        for c in s:\n            s1 += conv1[c]\n        if len(s1)%5>0 :s1 += \"0\"*(5-(len(s1)%5))\n        for i in xrange(0,len(s1),5):\n            s2 += conv2[s1[i:i+5]]\n        print s2\n    except EOFError:\n        break"
  },
  {
    "language": "Python",
    "code": "enco1={\" \":\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\nenco2={\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\nwhile True:\n    try:\n        s=\"\".join([enco1[w] for w in raw_input()])\n        if not len(s)%5==0:s=s+\"0\"*(5-len(s)%5)\n        print \"\".join([enco2[s[i:i+5]] for i in xrange(0,len(s),5)])\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "enc_s = \" |'|,|-|.|?|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z\"\nenc_i = \"101|000000|000011|10010001|010001|000001|100101|10011010|0101|0001|110|01001|10011011|010000|0111|10011000|0110|00100|10011001|10011110|00101|111|10011111|1000|00110|00111|10011100|10011101|000010|10010010|10010011|10010000\"\nenc = dict(zip([i for i in enc_s.split(\"|\")],[i for i in enc_i.split(\"|\")]))\ndec_s = \"A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z| |.|,|-|'|?\"\ndec_i = \"00000|00001|00010|00011|00100|00101|00110|00111|01000|01001|01010|01011|01100|01101|01110|01111|10000|10001|10010|10011|10100|10101|10110|10111|11000|11001|11010|11011|11100|11101|11110|11111\"\ndec = dict(zip([i for i in dec_i.split(\"|\")],[i for i in dec_s.split(\"|\")]))\ndef encode(a):\n    return \"\".join([enc[i] for i in list(a)])\ndef decode(a):\n    return \"\".join([dec[i] for i in a])\n\nwhile(1):\n    try:\n        a = input()\n        encoded = encode(a)\n        l = len(encoded)%5\n        encoded = encoded + \"0\"*(5-l)\n        l_ = int(len(encoded)/5)\n        enc_list = [encoded[5*i:5*(i+1)] for i in range(l_)]\n        decoded = decode(enc_list)\n        print(decoded)\n    except EOFError:\n        break\n\n"
  },
  {
    "language": "Python",
    "code": "encode = {\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"\n}\ndecode = {\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"\n}\nwhile True:\n\ttry:\n\t\tlist = str(raw_input())\n\texcept EOFError:\n\t\tbreak\n\tcode = \"\"\n\tfor i in xrange(len(list)):\n\t\tcode += encode[list[i:i+1]]\n\t\n\tfor i in xrange(5 - len(code) % 5):\n\t\tcode += \"0\"\n\t\n\tlist = \"\"\n\tfor i in xrange(len(code) / 5):\n\t\tlist += decode[code[i*5:i*5+5]]\n\t\n\tprint list"
  },
  {
    "language": "Python",
    "code": "from itertools import chain\nimport sys\n\ntable1 = dict(zip(\n    chain(\" ',-.?\", map(chr, range(65, 91))),\n    \"101 000000 000011 10010001 010001 000001 100101 10011010\\\n    0101 0001 110 01001 10011011 010000 0111 10011000\\\n    0110 00100 10011001 10011110 00101 111 10011111 1000\\\n    00110 00111 10011100 10011101 000010 10010010 10010011 10010000\".split()\n))\ntable2 = dict(enumerate(chain(map(chr, range(65, 91)), \" .,-'?\")))\n\nfor l in sys.stdin:\n    code = \"\".join(table1[c] for c in l.rstrip(\"\\n\"))\n    code += \"0\"*(5-(len(code)%5)) if len(code)%5 else \"\"\n    print(\"\".join(table2[int(code[i*5:(i+1)*5], 2)] for i in range(len(code)//5)))\n"
  },
  {
    "language": "Python",
    "code": "d1={\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"}\nd2={\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"}\n\nimport sys\ns=\"\"\nfor line in sys.stdin:\n    s+=line.rstrip()+\" \"\ns=s.rstrip()\ns1,ans=\"\",\"\"\nfor w in s:\n    s1+=d1[w]\ns1+=\"0\"*(5-len(s1)%5)\nfor i in range(len(s1)/5):\n    ans+=d2[s1[:5]]\n    s1=s1[5:]\nprint ans"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\nfrom sys import stdin\nimport io\n\nd1 = {\n    ' ': '101', \"'\": '000000', ',': '000011', '-': '10010001',\n    '.': '010001', '?': '000001', 'A': '100101', 'B': '10011010',\n    'C': '0101', 'D': '0001', 'E': '110', 'F': '01001', 'G': '10011011',\n    'H': '010000', 'I': '0111', 'J': '10011000', 'K': '0110', 'L': '00100',\n    'M': '10011001', 'N': '10011110', 'O': '00101', 'P': '111',\n    'Q': '10011111', 'R': '1000', 'S': '00110', 'T': '00111',\n    'U': '10011100', 'V': '10011101', 'W': '000010', 'X': '10010010',\n    'Y': '10010011', 'Z': '10010000'\n    }\nd2 = {'{:05b}'.format(n): chr(n+ord('A')) for n in range(26)}\nd2.update({'{:05b}'.format(n): c for n, c in zip(range(26, 32), \" .,-'?\")})\n\nstream = io.StringIO()\nfor line in stdin:\n    stream.seek(0)\n    stream.write(''.join(d1[c] for c in line.rstrip('\\r\\n')))\n    stream.seek(0)\n    for c in iter(lambda: stream.read(5), ''):\n        print(d2[c.ljust(5, '0')], end='')\n    print()"
  },
  {
    "language": "Python",
    "code": "\nL = { \" \": \"101\",\n      \"'\": \"000000\",\n      \",\": \"000011\",\n      \"-\": \"10010001\",\n      \".\": \"010001\",\n      \"?\": \"000001\",\n      \"A\": \"100101\",\n      \"B\": \"10011010\",\n      \"C\": \"0101\",\n      \"D\": \"0001\",\n      \"E\": \"110\",\n      \"F\": \"01001\",\n      \"G\": \"10011011\",\n      \"H\": \"010000\",\n      \"I\": \"0111\",\n      \"J\": \"10011000\",\n      \"K\": \"0110\",\n      \"L\": \"00100\",\n      \"M\": \"10011001\",\n      \"N\": \"10011110\",\n      \"O\": \"00101\",\n      \"P\": \"111\",\n      \"Q\": \"10011111\",\n      \"R\": \"1000\",\n      \"S\": \"00110\",\n      \"T\": \"00111\",\n      \"U\": \"10011100\",\n      \"V\": \"10011101\",\n      \"W\": \"000010\",\n      \"X\": \"10010010\",\n      \"Y\": \"10010011\",\n      \"Z\": \"10010000\" }\n\n\nM = { \"00000\": \"A\",\n      \"00001\": \"B\",\n      \"00010\": \"C\",\n      \"00011\": \"D\",\n      \"00100\": \"E\",\n      \"00101\": \"F\",\n      \"00110\": \"G\",\n      \"00111\": \"H\",\n      \"01000\": \"I\",\n      \"01001\": \"J\",\n      \"01010\": \"K\",\n      \"01011\": \"L\",\n      \"01100\": \"M\",\n      \"01101\": \"N\",\n      \"01110\": \"O\",\n      \"01111\": \"P\",\n      \"10000\": \"Q\",\n      \"10001\": \"R\",\n      \"10010\": \"S\",\n      \"10011\": \"T\",\n      \"10100\": \"U\",\n      \"10101\": \"V\",\n      \"10110\": \"W\",\n      \"10111\": \"X\",\n      \"11000\": \"Y\",\n      \"11001\": \"Z\",\n      \"11010\": \" \",\n      \"11011\": \".\",\n      \"11100\": \",\",\n      \"11101\": \"-\",\n      \"11110\": \"'\",\n      \"11111\": \"?\" }\n\n\n\nwhile True:\n    try:\n        s = input()\n    except:\n        break\n\n    t = \"\"\n    for i in s:\n        t += L[i]\n    t += \"0\" * ( (-len(t))%5 )\n\n    o = \"\"\n    for i in range( len(t) // 5 ):\n        u = t[i*5:i*5+5]\n        o += M[u]\n    print(o)\n\n\n"
  },
  {
    "language": "Python",
    "code": "d1={\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"}\nd2={\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"}\nwhile 1:\n    try:\n        s=raw_input()\n    except EOFError:\n        break\n    s1,ans=\"\",\"\"\n    for w in s:\n        s1+=d1[w]\n    if len(s1)%5!=0:\n        s1+=\"0\"*(5-len(s1)%5)\n    for i in range(len(s1)/5):\n        ans+=d2[s1[:5]]\n        s1=s1[5:]\n    print ans"
  },
  {
    "language": "Python",
    "code": "first_dict = {'A': \"100101\", 'B': \"10011010\", 'C': \"0101\", 'D': \"0001\", 'E': \"110\",\n              'F': \"01001\", 'G': \"10011011\", 'H': \"010000\", 'I': \"0111\", 'J': \"10011000\",\n              'K': \"0110\", 'L': \"00100\", 'M': \"10011001\", 'N': \"10011110\", 'O': \"00101\",\n              'P': \"111\", 'Q': \"10011111\", 'R': \"1000\", 'S': \"00110\", 'T': \"00111\",\n              'U': \"10011100\", 'V': \"10011101\", 'W': \"000010\", 'X': \"10010010\",\n              'Y': \"10010011\", 'Z': \"10010000\", ' ': \"101\", \"'\": \"000000\",\n              ',': \"000011\", '-': \"10010001\", '.': \"010001\", '?': \"000001\"}\nsecond_dict = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n               'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '.', ',', '-',\n               \"'\", '?']\nwhile 1:\n    try:\n        N = list(input())\n        num = \"\"\n        first = []\n        for i in N: num += first_dict[i]\n        if len(num) % 5 != 0:\n            for i in range(5 - (len(num) % 5)):\n                num += \"0\"\n        count = 0\n        number = \"\"\n        for j in num:\n            number += j\n            count += 1\n            if count == 5:\n                number += \" \"\n                count = 0\n        key = number.split()\n        answer = \"\"\n        for k in key:\n            pas = int(k[4]) * 1 + int(k[3]) * 2 + int(k[2]) * 4 + int(k[1]) * 8 + int(k[0]) * 16\n            answer += second_dict[pas]\n        print(answer)\n\n    except:\n        break\n\n"
  },
  {
    "language": "Python",
    "code": "encode = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \" .,-\\'?\"\ndecode = {\" \":\"101\",\"\\'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\n          \"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\n          \"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\n          \"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\n          \"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\n          \"Y\":\"10010011\",\"Z\":\"10010000\"}\nwhile True:\n    try:\n        a = input()\n        code = \"\"\n        for inp in a:\n            code += decode[inp]\n        code += \"0\"*(-len(code)%5)\n        ans = \"\"\n        for i in range(len(code)//5):\n            ans += encode[int(code[i*5:i*5 + 5], 2)]\n        print(ans)\n    except:\n        break\n\n"
  },
  {
    "language": "Python",
    "code": "dic1 = {\" \":\"101\", \"'\":\"000000\", \",\":\"000011\", \"-\":\"10010001\", \"?\":\"000001\",\n        \"A\":\"100101\", \"B\":\"10011010\", \"C\":\"0101\", \"D\":\"0101\", \"E\":\"110\",\n        \"F\":\"01001\", \"G\":\"10011011\", \"H\":\"010000\", \"I\":\"0111\", \"J\":\"10011000\",\n        \"K\":\"0110\", \"L\":\"00100\", \"M\":\"10011001\", \"N\":\"10011110\", \"O\":\"00101\",\n        \"P\":\"111\", \"Q\":\"10011111\", \"R\":\"1000\", \"S\":\"00110\", \"T\":\"00111\",\n        \"U\":\"10011100\", \"V\":\"10011101\", \"W\":\"000010\", \"X\":\"10010010\", \"Y\":\"10010011\", \"Z\":\"10010000\"}\n\ndic2 = {\"00000\":\"A\", \"00001\":\"B\", \"00010\":\"C\", \"00011\":\"D\", \"00100\":\"E\",\n        \"00101\":\"F\", \"00110\":\"G\", \"00111\":\"H\", \"01000\":\"I\", \"01001\":\"J\",\n        \"01010\":\"K\", \"01011\":\"L\", \"01100\":\"M\", \"01101\":\"N\", \"01110\":\"O\",\n        \"01111\":\"P\", \"10000\":\"Q\", \"10001\":\"R\", \"10010\":\"S\", \"10011\":\"T\",\n        \"10100\":\"U\", \"10101\":\"V\", \"10110\":\"W\", \"10111\":\"X\", \"11000\":\"Y\",\n        \"11001\":\"Z\", \"11010\":\" \", \"11011\":\".\", \"11100\":\",\", \"11101\":\"-\",\n        \"11110\":\"'\", \"11111\":\"?\"}\n\ndef to_digit(ss):\n  ret = \"\"\n  for s in ss:\n    ret += dic1[s]\n  return ret\n\ndef to_alpha(digit):\n  ret = \"\"\n  ind = 0\n  end = len(digit)\n\n  while ind + 5 < end:\n    ret += dic2[digit[ind:ind + 5]]\n    ind += 5\n\n  if digit[ind:]:\n    ret += dic2[digit[ind:] + \"0\" * (5 - end + ind)]\n\n  return ret\n\nprint(to_alpha(to_digit(input())))\n"
  },
  {
    "language": "Python",
    "code": "dic1 = {\" \":\"101\", \"'\":\"000000\", \",\":\"000011\", \"-\":\"10010001\", \".\":\"010001\", \"?\":\"000001\",\n        \"A\":\"100101\", \"B\":\"10011010\", \"C\":\"0101\", \"D\":\"0101\", \"E\":\"110\",\n        \"F\":\"01001\", \"G\":\"10011011\", \"H\":\"010000\", \"I\":\"0111\", \"J\":\"10011000\",\n        \"K\":\"0110\", \"L\":\"00100\", \"M\":\"10011001\", \"N\":\"10011110\", \"O\":\"00101\",\n        \"P\":\"111\", \"Q\":\"10011111\", \"R\":\"1000\", \"S\":\"00110\", \"T\":\"00111\",\n        \"U\":\"10011100\", \"V\":\"10011101\", \"W\":\"000010\", \"X\":\"10010010\", \"Y\":\"10010011\", \"Z\":\"10010000\"}\n\ndic2 = {\"00000\":\"A\", \"00001\":\"B\", \"00010\":\"C\", \"00011\":\"D\", \"00100\":\"E\",\n        \"00101\":\"F\", \"00110\":\"G\", \"00111\":\"H\", \"01000\":\"I\", \"01001\":\"J\",\n        \"01010\":\"K\", \"01011\":\"L\", \"01100\":\"M\", \"01101\":\"N\", \"01110\":\"O\",\n        \"01111\":\"P\", \"10000\":\"Q\", \"10001\":\"R\", \"10010\":\"S\", \"10011\":\"T\",\n        \"10100\":\"U\", \"10101\":\"V\", \"10110\":\"W\", \"10111\":\"X\", \"11000\":\"Y\",\n        \"11001\":\"Z\", \"11010\":\" \", \"11011\":\".\", \"11100\":\",\", \"11101\":\"-\",\n        \"11110\":\"'\", \"11111\":\"?\"}\n\ndef to_digit(ss):\n  ret = \"\"\n  for s in ss:\n    ret += dic1[s]\n  return ret\n\ndef to_alpha(digit):\n  ret = \"\"\n  ind = 0\n  end = len(digit)\n\n  while ind + 5 < end:\n    ret += dic2[digit[ind:ind + 5]]\n    ind += 5\n\n  if digit[ind:]:\n    ret += dic2[digit[ind:] + \"0\" * (5 - end + ind)]\n\n  return ret\n\nwhile True:\n  try:\n    print(to_alpha(to_digit(input())))\n  except EOFError:\n    break\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0088\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    encoder = {' ':'101', \"'\":'000000', ',':'000011', '-':'10010001', '.':'010001', '?':'000001', 'A':'100101', 'B':'10011010',\n               'C':'0101','D':'0001', 'E':'110', 'F':'01001', 'G':'10011011', 'H':'010000', 'I':'0111','J':'10011000',\n               'K':'0110', 'L':'00100', 'M':'10011001', 'N':'10011110', 'O':'00101', 'P':'111', 'Q':'10011111', 'R':'1000',\n               'S':'00110', 'T':'00111', 'U':'10011100', 'V':'10011101', 'W':'000010', 'X':'10010010', 'Y':'10010011', 'Z':'10010000'\n               }\n\n    decoder = {'00000':'A', '00001':'B', '00010':'C', '00011':'D', '00100':'E', '00101':'F', '00110':'G', '00111':'H',\n               '01000':'I', '01001':'J', '01010':'K', '01011':'L', '01100':'M', '01101':'N', '01110':'O', '01111':'P',\n               '10000':'Q', '10001':'R', '10010':'S', '10011':'T', '10100':'U', '10101':'V', '10110':'W', '10111':'X',\n               '11000':'Y', '11001':'Z', '11010':' ', '11011':'.', '11100':',', '11101':'-', '11110':\"'\", '11111':'?'\n    }\n\n    for line in sys.stdin:\n        txt = line.strip()\n        ans = ''\n        for c in txt:\n            ans += encoder[c]\n\n        if len(ans) % 5 != 0:\n            ans += '0'*(5-len(ans)%5)\n\n        result = ''\n        while ans:\n            temp = ans[:5]\n            result += decoder[temp]\n            ans = ans[5:]\n\n        print(result)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"
  },
  {
    "language": "Python",
    "code": "en=[chr(i) for i in range(65,91)]+list(' .,-\\'?')\nde={\n' ':'101'\n,'\\'':'000000'\n,',':'000011'\n,'-':'10010001'\n,'.':'010001'\n,'?':'000001'\n,'A':'100101'\n,'B':'10011010'\n,'C':'0101'\n,'D':'0001'\n,'E':'110'\n,'F':'01001'\n,'G':'10011011'\n,'H':'010000'\n,'I':'0111'\n,'J':'10011000'\n,'K':'0110'\n,'L':'00100'\n,'M':'10011001'\n,'N':'10011110'\n,'O':'00101'\n,'P':'111'\n,'Q':'10011111'\n,'R':'1000'\n,'S':'00110'\n,'T':'00111'\n,'U':'10011100'\n,'V':'10011101'\n,'W':'000010'\n,'X':'10010010'\n,'Y':'10010011'\n,'Z':'10010000'\n}\na=b=''\nfor x in list(input()):\n    a+=de[x]\na+='0'*(-len(a)%5)\nfor i in range(len(a)//5):\n    b+=en[int(a[i*5:(i+1)*5],2)]\nprint(b)"
  },
  {
    "language": "Python",
    "code": "encode = {\n' ':'101', \n\"'\":'000000', \n',':'000011', \n'-':'10010001', \n'.':'010001', \n'?':'000001', \n'A':'100101', \n'B':'10011010', \n'C':'0101', \n'D':'0001', \n'E':'110', \n'F':'01001', \n'G':'10011011', \n'H':'010000', \n'I':'0111', \n'J':'10011000', \n'K':'0110', \n'L':'00100', \n'M':'10011001', \n'N':'10011110', \n'O':'00101', \n'P':'111', \n'Q':'10011111', \n'R':'1000', \n'S':'00110', \n'T':'00111', \n'U':'10011100', \n'V':'10011101', \n'W':'000010', \n'X':'10010010', \n'Y':'10010011', \n'Z':'10010000'}\n\ndecode = {\n'00000':'A', \n'00001':'B', \n'00010':'C', \n'00011':'D', \n'00100':'E',\n'00101':'F',\n'00110':'G',\n'00111':'H',\n'01000':'I',\n'01001':'J',\n'01010':'K',\n'01011':'L',\n'01100':'M',\n'01101':'N',\n'01110':'O',\n'01111':'P',\n'10000':'Q',\n'10001':'R',\n'10010':'S',\n'10011':'T',\n'10100':'U',\n'10101':'V',\n'10110':'W',\n'10111':'X',\n'11000':'Y',\n'11001':'Z',\n'11010':' ',\n'11011':'.',\n'11100':',',\n'11101':'-',\n'11110':\"'\",\n'11111':'?'}\n\nwhile True:\n\ttry:\n\t\tstring = raw_input()\n\texcept EOFError:\n\t\tbreak\t\t\n\n\t# encode\n\te, ans = \"\", \"\"\n\tfor s in string:\n\t\te += encode[s]\n\ttmp = []\n\twhile len(e) > 4:\n\t\ttmp.append(e[0:5])\n\t\te = e[5:]\n\tif len(e) != 0:\n\t\te += '0' * (5 - len(e))\n\t\ttmp.append(e)\n\tprint tmp\n\n\t# decode\n\tfor s in tmp:\n\t\tans += decode[s]\n\tprint ans"
  },
  {
    "language": "Python",
    "code": "dict1 = {\" \":\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\",}\ndict2 = {\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\n\nwhile True:\n\ttry:\n\t\tcode,decode = \"\",\"\"\n\t\tinp = raw_input()\n\t\tfor alph in inp:\n\t\t\tcode += dict1[alph]\n\t\tif len(code)%5 != 0:\n\t\t\tcode += \"0\"*(5-len(code)%5)\n\t\tfor i in range(0,len(code),5):\n\t\t\tdecode += dict2[code[i:i+5]]\n\t\tprint decode\n\texcept:\n\t\tbreak"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\nfor e in sys.stdin:\n a=''.join(d[c]for c in e.strip())\n b=a+'0'*(-len(a)%5)\n print(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(b[i:i+5],2)]for i in range(0,len(a)+4,5)))\n"
  },
  {
    "language": "Python",
    "code": "class Code:\n    def __init__(self): \n        True\n\n        self.cd1 = {\" \":\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\n        self.cd2 = {\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\n\n    def code1(self,s):\n        t0 = list(map(lambda x:self.cd1[x], s))\n        t1 = ''.join(t0)\n        t = list(t1)\n        t0 = t\n        u = []\n        while len(t) > 0:\n            u.append(t[0:5])\n            t[0:5]=[]\n            if len(u[-1]) != 5:\n                u[-1] = (u[-1] + ['0']*4)[0:5]\n                v = list(map(lambda x:''.join(x), u))\n                return(v)\n\n    def code2(self,s):\n        t = []\n        for i in s: \n            t.append(self.cd2[i])\n        u = ''.join(t)\n        return(u)\n\nif __name__ == \"__main__\":\n    cd = Code()\n    while True:\n        try:\n            s = input().strip()\n            t = cd.code1(s)\n            u = cd.code2(t)\n            print(u)\n\n        except EOFError:\n            break"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\nfor e in sys.stdin:\n a=''.join(d[c]for c in e[:-1])\n a+='0'*(-len(a)%5)\n print(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(a[i*5:i*5+5],2)]for i in range(len(a)//5)))\n"
  },
  {
    "language": "Python",
    "code": "en=[chr(i) for i in range(65,91)]+list(' .,-\\'?')\nde={\n' ':'101','\\'':'000000',',':'000011','-':'10010001','.':'010001','?':'000001',\n'A':'100101','B':'10011010','C':'0101','D':'0001','E':'110','F':'01001',\n'G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100',\n'M':'10011001','N':'10011110','O':'00101','P':'111','Q':'10011111','R':'1000',\n'S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010',\n'Y':'10010011','Z':'10010000'\n}\nwhile 1:\n    try:s=list(input())\n    except:break\n    a=b=''\n    for x in s:a+=de[x]\n    a+='0'*(-len(a)%5)\n    for i in range(len(a)//5):\n        b+=en[int(a[i*5:i*5+5],2)]\n    print(b)"
  },
  {
    "language": "Python",
    "code": "encode = {' ':'101', '\\'':'000000', ',':'000011', '-':'1001000', '.':'010001', '?':'000001', 'A':'100101', 'B':'10011010', 'C':'0101', 'D':'0001', 'E':'110', 'F':'01001', 'G':'10011011', 'H':'010000', 'I':'0111', 'J':'10011000', 'K':'0110', 'L':'00100', 'M':'10011001', 'N':'10011110', 'O':'00101', 'P':'111', 'Q':'10011111', 'R':'1000', 'S':'00110', 'T':'00111', 'U':'10011100', 'V':'10011101', 'W':'000010', 'X':'10010010', 'Y':'10010011', 'X':'10010000'}\ndecode = {'00000':'A', '00001':'B', '00010':'C', '00011':'D', '00100':'E','00101':'F','00110':'G','00111':'H','01000':'I','01001':'J','01010':'K','01011':'L','01100':'M','01101':'N','01110':'O','01111':'P','10000':'Q','10001':'R','10010':'S','10011':'T','10100':'U','10101':'V','10110':'W','10111':'X','11000':'Y','11001':'Z','11010':' ','11011':'.','11100':',','11101':'-','11110':'\\'','11111':'?'}\n\nwhile True:\n\ttry:\n\t\tstring = list(raw_input())\n\t\t\n\t\t# encode\n\t\tcode = \"\"\n\t\tfor s in string:\n\t\t\tcode += encode[s]\n\t\ti = 0\n\t\ttmp = []\n\t\twhile i+5 <= len(code):\n\t\t\ttmp.append(code[i:i+5])\n\t\t\tcode = code[i+5:]\n\t\tif len(code) != 0:\n\t\t\tcode += '0' * (5 - len(code))\n\t\t\ttmp.append(code)\n\n\t\t# decode\n\t\tans = \"\"\n\t\tfor s in tmp:\n\t\t\tans += decode[s]\n\t\tprint ans\n\texcept EOFError:\n\t\tbreak"
  },
  {
    "language": "Python",
    "code": "chA = {' ':'101', \"'\":'000000', ',':'000011', '-':'10010001', '.':'010001', '?':'000001', 'A':'100101', \n       'B':'10011010', 'C':'0101', 'D':'0001', 'E':'110', 'F':'01001', 'G':'10011011', 'H':'010000',\n       'I':'0111', 'J':'10011000', 'K':'0110', 'L':'00100', 'M':'10011001', 'N':'10011110', 'O':'00101',\n       'P':'111', 'Q':'10011111', 'R':'1000', 'S':'00110', 'T':'00111', 'U':'10011100', 'V':'10011101',\n       'W':'000010', 'X':'10010010', 'Y':'10010011', 'Z':'10010000'}\n\nchB = {'00000':'A', '00001':'B', '00010':'C', '00011':'D', '00100':'E', '00101':'F',\n       '00110':'G', '00111':'H', '01000':'I', '01001':'J', '01010':'K', '01011':'L',\n       '01100':'M', '01101':'N', '01110':'O', '01111':'P', '10000':'Q', '10001':'R',\n       '10010':'S', '10011':'T', '10100':'U', '10101':'V', '10110':'W', '10111':'X',\n       '11000':'Y', '11001':'Z', '11010':' ', '11011':'.', '11100':',', '11101':'-', '11110':\"'\", '11111':'?'}\n\n\nwhile True:\n    try:\n        s = input()\n\n    except EOFError:\n        break\n    \n    chlst = ''\n    numlst = []\n    anslst = ''\n    for i in s:\n        if i == '\\\\':\n            chlst = chlst + chA[' ']\n        else:\n            chlst = chlst + chA[i]\n\n    if len(chlst)%5 != 0:\n        for k in range(5-(len(chlst)%5)):\n            chlst += '0'\n\n    for j in range(len(chlst)//5):\n        numlst.append(chlst[5*j: 5*j+5])\n\n    for l in numlst:\n        anslst = anslst + chB[l]\n\n    print(anslst)\n\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0088\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    encoder = {' ':'101', \"'\":'000000', ',':'000011', '-':'10010001', '.':'010001', '?':'000001', 'A':'100101', 'B':'10011010',\n               'C':'0101','D':'0001', 'E':'110', 'F':'01001', 'G':'10011011', 'H':'010000', 'I':'0111','J':'10011000',\n               'K':'0110', 'L':'00100', 'M':'10011001', 'N':'10011110', 'O':'00101', 'P':'111', 'Q':'10011111', 'R':'1000',\n               'S':'00110', 'T':'00111', 'U':'10011100', 'V':'10011101', 'W':'000010', 'X':'10010010', 'Y':'10010011', 'Z':'10010000'\n               }\n\n    decoder = {'00000':'A', '00001':'B', '00010':'C', '00011':'D', '00100':'E', '00101':'F', '00110':'G', '00111':'H',\n               '01000':'I', '01001':'J', '01010':'K', '01011':'L', '01100':'M', '01101':'N', '01110':'O', '01111':'P',\n               '10000':'Q', '10001':'R', '10010':'S', '10011':'T', '10100':'U', '10101':'V', '10110':'W', '10111':'X',\n               '11000':'Y', '11001':'Z', '11010':' ', '11011':'.', '11100':',', '11101':'-', '11110':\"'\", '11111':'?'\n    }\n\n    for line in sys.stdin:\n        txt = line.strip('\\n')\n        ans = ''\n        for c in txt:\n            ans += encoder[c]\n\n        if len(ans) % 5 != 0:\n            ans += '0'*(5-len(ans)%5)\n\n        # print(ans)\n\n        result = ''\n        while ans:\n            temp = ans[:5]\n            result += decoder[temp]\n            ans = ans[5:]\n\n        print(result)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"
  },
  {
    "language": "Python",
    "code": "encode={\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"\n}\ndecode={\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"\n}\n\ndef doc_string():\n    \"\"\"\n    I can fly.\n    \"\"\"\n\nwhile True:\n\ttry:\n\t\tlist = raw_input()\n\texcept EOFError:\n\t\tbreak\n\tcode = \"\"\n\tfor i in xrange(len(list)):\n\t\tcode += encode[list[i:i+1]]\n\t\n\tfor i in xrange(5 - len(code) % 5):\n\t\tcode += \"0\"\n\t\n\tfffff = \"\"\n\tfor i in xrange(len(code) / 5):\n\t\tfffff += decode[code[i*5:i*5+5]]\n\t\n\tprint fffff"
  },
  {
    "language": "Python",
    "code": "import sys\nconv1 = {' ':\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\nsym = \" .,-'?\"\nfor s in sys.stdin.readlines():\n    s1 = \"\"; s2 = \"\";\n    for c in s.strip():\n        s1 += conv1[c]\n    if len(s1)%5>0 :s1 += \" \"*(5-(len(s1)%5))\n    for i in xrange(0,len(s1),5):\n        code = int(s1[i:i+5],2)\n        if code<26:\n            s2 += chr(65+code)\n        else:\n            s2 += sym[code-26]\n    print s2"
  },
  {
    "language": "Python",
    "code": "dic1 = {\" \":\"101\", \"'\":\"000000\", \",\":\"000011\", \"-\":\"10010001\", \".\":\"010001\", \"?\":\"000001\",\n        \"A\":\"100101\", \"B\":\"10011010\", \"C\":\"0101\", \"D\":\"0001\", \"E\":\"110\",\n        \"F\":\"01001\", \"G\":\"10011011\", \"H\":\"010000\", \"I\":\"0111\", \"J\":\"10011000\",\n        \"K\":\"0110\", \"L\":\"00100\", \"M\":\"10011001\", \"N\":\"10011110\", \"O\":\"00101\",\n        \"P\":\"111\", \"Q\":\"10011111\", \"R\":\"1000\", \"S\":\"00110\", \"T\":\"00111\",\n        \"U\":\"10011100\", \"V\":\"10011101\", \"W\":\"000010\", \"X\":\"10010010\", \"Y\":\"10010011\", \"Z\":\"10010000\"}\n\ndic2 = {\"00000\":\"A\", \"00001\":\"B\", \"00010\":\"C\", \"00011\":\"D\", \"00100\":\"E\",\n        \"00101\":\"F\", \"00110\":\"G\", \"00111\":\"H\", \"01000\":\"I\", \"01001\":\"J\",\n        \"01010\":\"K\", \"01011\":\"L\", \"01100\":\"M\", \"01101\":\"N\", \"01110\":\"O\",\n        \"01111\":\"P\", \"10000\":\"Q\", \"10001\":\"R\", \"10010\":\"S\", \"10011\":\"T\",\n        \"10100\":\"U\", \"10101\":\"V\", \"10110\":\"W\", \"10111\":\"X\", \"11000\":\"Y\",\n        \"11001\":\"Z\", \"11010\":\" \", \"11011\":\".\", \"11100\":\",\", \"11101\":\"-\",\n        \"11110\":\"'\", \"11111\":\"?\"}\n\ndef to_digit(ss):\n  ret = \"\"\n  for s in ss:\n    ret += dic1[s]\n  return ret\n\ndef to_alpha(digit):\n  ret = \"\"\n  ind = 0\n  end = len(digit)\n\n  while ind + 5 < end:\n    ret += dic2[digit[ind:ind + 5]]\n    ind += 5\n\n  if digit[ind:]:\n    ret += dic2[digit[ind:] + \"0\" * (5 - end + ind)]\n\n  return ret\n\nwhile True:\n  try:\n    print(to_alpha(to_digit(input())))\n  except EOFError:\n    break\n"
  },
  {
    "language": "Python",
    "code": "encode={\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"\n}\ndecode={\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"\n}\n\ndef coding():\n    code = \"\"\n    stri = \"\"\n    st = raw_input()\n    for s in st:\n        code += encode[s]\n    b = 0\n    while True:\n        if len(code) == b+5:\n            stri += decode[code[b:b+5]]\n            break\n        elif len(code) < b+5:\n            stri += decode[code[b:].zfill(5)]\n            break\n        stri += decode[code[b:b+5]]\n        b += 5\n    return stri\n\nwhile True:\n    try:\n        print coding()\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "d1={\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"}\nd2={\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"}\nwhile 1:\n    s=raw_input()\n    s1,ans=\"\",\"\"\n    for w in s:\n        s1+=d1[w]\n    s1+=\"0\"*(5-len(s1)%5)\n    for i in range(len(s1)/5):\n        ans+=d2[s1[:5]]\n        s1=s1[5:]\n    print ans"
  },
  {
    "language": "Python",
    "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\nfrom sys import stdin\nimport io\n\nd1 = {\n    ' ': '101', \"'\": '000000', ',': '000011', '-': '10010001',\n    '.': '010001', '?': '000001', 'A': '100101', 'B': '10011010',\n    'C': '0101', 'D': '0001', 'E': '110', 'F': '01001', 'G': '10011011',\n    'H': '010000', 'I': '0111', 'J': '10011000', 'K': '0110', 'L': '00100',\n    'M': '10011001', 'N': '10011110', 'O': '00101', 'P': '111',\n    'Q': '10011111', 'R': '1000', 'S': '00110', 'T': '00111',\n    'U': '10011100', 'V': '10011101', 'W': '000010', 'X': '10010010',\n    'Y': '10010011', 'Z': '10010000'\n    }\nd2 = {n: chr(n+ord('A')) for n in range(26)}\nd2.update(zip(range(26, 32), \" .,-'?\"))\n\nfor line in stdin:\n    stream = io.StringIO()\n    stream.write(''.join(d1[c] for c in line.rstrip('\\r\\n')))\n    stream.seek(0)\n    c = stream.read(5)\n    while c:\n        print(d2[int(c.ljust(5, '0'), 2)], end='')\n        c = stream.read(5)\n    print()"
  },
  {
    "language": "Python",
    "code": "signlist = [\"101\", \"000000\", \"000011\", \"10010001\", \"010001\", \"000001\", \"100101\", \"10011010\",\n            \"0101\", \"0001\", \"110\", \"01001\", \"10011011\", \"010000\", \"0111\", \"10011000\",\n            \"0110\", \"00100\", \"10011001\", \"10011110\", \"00101\", \"111\", \"10011111\", \"1000\",\n            \"00110\", \"00111\", \"10011100\", \"10011101\", \"000010\", \"10010010\", \"10010011\",\n            \"10010000\"]\n\nchar = \" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\ncharlist = list(char)\ndecode = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"\ndecodelist = list(decode)\n\nwhile 1:\n    try:\n        sentence = input()\n    except EOFError:\n        break\n\n    sentence = list(sentence)\n    encode = \"\"\n    for s in sentence:\n        num = charlist.index(s)\n        encode += signlist[num]\n\n    tmp = len(encode) % 5\n    if tmp != 0:\n        encode += \"0\" * (5-tmp)\n\n    encodelist = []\n    for i in range(0, len(encode), 5):\n        encodelist.append(encode[i:i+5])\n\n    ans = \"\"\n    for e in encodelist:\n        dec_e = int(e, 2)\n        ans += decodelist[dec_e]\n\n    print(ans)\n\n"
  },
  {
    "language": "Python",
    "code": "import sys\nf = sys.stdin\n\nk1 = {\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"}\nimport string\nk2 = string.ascii_uppercase + \" .,-'?\"\n\nfor line in f:\n    c1 = c2 = ''\n    for c in line.strip():\n        c1 += k1[c]\n\n    #5の倍数に0フィル\n    c1 += '0' * (- len(c1) % 5)\n\n    for i in range(0, len(c1),5):\n        c2 += k2[ int(c1[i:i + 5],2)]\n    print(c2)"
  },
  {
    "language": "Python",
    "code": "encode = {\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"\n}\ndecode = {\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"\n}\nwhile True:\n\ttry:\n\t\tlist = raw_input()\n\texcept EOFError:\n\t\tbreak\n\tcode = \"\"\n\tfor var in list:\n\t\tcode += encode[var]\n\t\n\tif len(code) % 5 != 0:\n\t\tcode += \"0\" * (5 - len(code) % 5)\n\t\n\tlist = \"\"\n\tfor i in range(0, len(code), 5):\n\t\tlist += decode[code[i:i+5]]\n\t\n\tprint list"
  },
  {
    "language": "Python",
    "code": "encode = {\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"\n}\ndecode = {\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"\n}\nwhile True:\n\ttry:\n\t\tlist = str(raw_input())\n\texcept EOFError:\n\t\tbreak\n\tcode = \"\"\n\tfor i in range(len(list)):\n\t\tcode += encode[list[i:i+1]]\n\t\n\tfor i in range(5 - len(code) % 5):\n\t\tcode += \"0\"\n\t\n\tlist = \"\"\n\tfor i in range(len(code) / 5):\n\t\tlist += decode[code[i*5:i*5+5]]\n\t\n\tprint list"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\nfor e in sys.stdin:\n a=''.join(d[c]for c in e.strip())\n a+='0'*(-len(a)%5)\n print(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(a[i:i+5],2)]for i in range(0,len(a),5)))\n# print(*[\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(a[i:i+5],2)]for i in range(0,len(a),5)],sep='')\n"
  },
  {
    "language": "Python",
    "code": "while 1:\n    try:\n        s=input()\n        s_r=\"\"\n        c1=[\" \",\"'\",\",\",\"-\",\".\",\"?\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\n        c2=[\"101\",\"000000\",\"000011\",\"10010001\",\"010001\",\"000001\",\"100101\",\"10011010\",\"0101\",\"0001\",\"110\",\"01001\",\"10011011\",\"010000\",\"0111\",\"10011000\",\"0110\",\"00100\",\"10011001\",\"10011110\",\"00101\",\"111\",\"10011111\",\"1000\",\"00110\",\"00111\",\"10011100\",\"10011101\",\"000010\",\"10010010\",\"10010011\",\"10010000\"]\n        c3=[\" \",\".\",\",\",\"-\",\"'\",\"?\"]\n        for i in s:\n            s_r+=c2[c1.index(i)]\n        while len(s_r)%5>0:s_r+=\"0\"\n        ans=\"\"\n        for i in range(len(s_r)//5):\n            s_r_n=int(s_r[:5],2)\n            if s_r_n<26:\n                ans+=chr(65+s_r_n)\n            else:\n                ans+=c3[s_r_n-26]\n            s_r=s_r[5:]\n        print(ans)\n    except:break\n"
  },
  {
    "language": "Python",
    "code": "encode={\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"\n}\ndecode={\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"\n}\n\ndef coding():\n    code = \"\"\n    stri = \"\"\n    st = raw_input()\n    for s in st:\n        code += encode[s]\n    b = 0\n    while True:\n        if len(code) < b+5:\n            stri += decode[code[b:].zfill(5)]\n            break\n        stri += decode[code[b:b+5]]\n        b += 5\n    return stri\n\nwhile True:\n    try:\n        print coding()\n    except:\n        break"
  },
  {
    "language": "Python",
    "code": "import sys\nimport re\nclass Code:\n    def __init__(self): \n        self.cd1 = {\" \":\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\n        self.cd2 = {\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\n\n    def code1(self,s):\n        t0 = list(map(lambda x:self.cd1[x], s))\n        t1 = ''.join(t0)\n        t = list(t1)\n        t0 = t\n        u = []\n        while len(t) > 0:\n            u.append(t[0:5])\n            t[0:5]=[]\n        if len(u[-1]) != 5:\n            u[-1] = (u[-1] + ['0']*4)[0:5]\n        v = list(map(lambda x:''.join(x), u))\n        return(v)\n\n    def code2(self,s):\n        t = []\n        for i in s: \n            t.append(self.cd2[i])\n        u = ''.join(t)\n        return(u)\n\nif __name__ == \"__main__\":\n    cd = Code()\n    s = sys.stdin.read()\n    s1 = re.sub(r'\\n', ' ', s)\n    t = cd.code1(s1)\n    u = cd.code2(t)\n    print(u)"
  },
  {
    "language": "Python",
    "code": "enc={ \" \":\"101\", \"'\":\"000000\", \",\":\"000011\", \"-\":\"10010001\", \".\":\"010001\", \"?\":\"000001\", \"A\":\"100101\", \"B\":\"10011010\", \"C\":\"0101\", \"D\":\"0001\", \"E\":\"110\", \"F\":\"01001\", \"G\":\"10011011\", \"H\":\"010000\", \"I\":\"0111\", \"J\":\"10011000\", \"K\":\"0110\", \"L\":\"00100\", \"M\":\"10011001\", \"N\":\"10011110\", \"O\":\"00101\", \"P\":\"111\", \"Q\":\"10011111\", \"R\":\"1000\", \"S\":\"00110\", \"T\":\"00111\", \"U\":\"10011100\", \"V\":\"10011101\", \"W\":\"000010\", \"X\":\"10010010\", \"Y\":\"10010011\", \"Z\":\"10010000\" }\ndec={ \"00000\":\"A\", \"00001\":\"B\", \"00010\":\"C\", \"00011\":\"D\", \"00100\":\"E\", \"00101\":\"F\", \"00110\":\"G\", \"00111\":\"H\", \"01000\":\"I\", \"01001\":\"J\", \"01010\":\"K\", \"01011\":\"L\", \"01100\":\"M\", \"01101\":\"N\", \"01110\":\"O\", \"01111\":\"P\", \"10000\":\"Q\", \"10001\":\"R\", \"10010\":\"S\", \"10011\":\"T\", \"10100\":\"U\", \"10101\":\"V\", \"10110\":\"W\", \"10111\":\"X\", \"11000\":\"Y\", \"11001\":\"Z\", \"11010\":\" \", \"11011\":\".\", \"11100\":\",\", \"11101\":\"-\", \"11110\":\"'\", \"11111\":\"?\" }\nstring=raw_input()\nencStr=\"\"\nfor c in string:\n    encStr+=enc[c]\nmod=len(encStr)%5\nencStr+=(\"0\"*(5-mod))\ndecStr=\"\"\nfor i in range(0, len(encStr), 5):\n    decStr+=dec[encStr[i:i+5]]\nprint decStr"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\nd1 = {\n    ' ': '101'\n    , '\\'': '000000'\n    , ',': '000011'\n    , '-': '10010001'\n    , '.': '010001'\n    , '?': '000001'\n    , 'A': '100101'\n    , 'B': '10011010'\n    , 'C': '0101'\n    , 'D': '0001'\n    , 'E': '110'\n    , 'F': '01001'\n    , 'G': '10011011'\n    , 'H': '010000'\n    , 'I': '0111'\n    , 'J': '10011000'\n    , 'K': '0110'\n    , 'L': '00100'\n    , 'M': '10011001'\n    , 'N': '10011110'\n    , 'O': '00101'\n    , 'P': '111'\n    , 'Q': '10011111'\n    , 'R': '1000'\n    , 'S': '00110'\n    , 'T': '00111'\n    , 'U': '10011100'\n    , 'V': '10011101'\n    , 'W': '000010'\n    , 'X': '10010010'\n    , 'Y': '10010011'\n    , 'Z': '10010000'\n}\n\nd2 = {\n    '00000': 'A'\n    , '00001': 'B'\n    , '00010': 'C'\n    , '00011': 'D'\n    , '00100': 'E'\n    , '00101': 'F'\n    , '00110': 'G'\n    , '00111': 'H'\n    , '01000': 'I'\n    , '01001': 'J'\n    , '01010': 'K'\n    , '01011': 'L'\n    , '01100': 'M'\n    , '01101': 'N'\n    , '01110': 'O'\n    , '01111': 'P'\n    , '10000': 'Q'\n    , '10001': 'R'\n    , '10010': 'S'\n    , '10011': 'T'\n    , '10100': 'U'\n    , '10101': 'V'\n    , '10110': 'W'\n    , '10111': 'X'\n    , '11000': 'Y'\n    , '11001': 'Z'\n    , '11010': ' '\n    , '11011': '.'\n    , '11100': ','\n    , '11101': '-'\n    , '11110': '\\''\n    , '11111': '?'\n}\n\nS = ''\nfor s in sys.stdin:\n    s = s.rstrip('\\n')\n    S += s\n\nT = ''\nfor c in S:\n    T += d1[c]\n\n# zero addition\nif len(T) % 5 != 0:\n    add_zero_num = 5 - len(T) % 5\n    T += '0' * add_zero_num\n\nU = ''\nfor i in range(0, len(T), 5):\n    binary = T[i:i+5]\n    U += d2[binary]\n\nprint(U)"
  },
  {
    "language": "Python",
    "code": "en='ABCDEFGHIJKLMNOPQRSTUVWXYZ'+' .,-\\'?' \nde={\n' ':'101','\\'':'000000',',':'000011','-':'10010001','.':'010001','?':'000001',\n'A':'100101','B':'10011010','C':'0101','D':'0001','E':'110','F':'01001',\n'G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100',\n'M':'10011001','N':'10011110','O':'00101','P':'111','Q':'10011111','R':'1000',\n'S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010',\n'Y':'10010011','Z':'10010000'\n}\nwhile 1:\n    try:s=input()\n    except:break\n    a=b=''\n    for x in s:a+=de[x]\n    a+='0'*(-len(a)%5)\n    for i in range(len(a)//5):b+=en[int(a[i*5:i*5+5],2)]\n    print(b)"
  },
  {
    "language": "Python",
    "code": "encode = {\n' ':'101', \n\"'\":'000000', \n',':'000011', \n'-':'10010001', \n'.':'010001', \n'?':'000001', \n'A':'100101', \n'B':'10011010', \n'C':'0101', \n'D':'0001', \n'E':'110', \n'F':'01001', \n'G':'10011011', \n'H':'010000', \n'I':'0111', \n'J':'10011000', \n'K':'0110', \n'L':'00100', \n'M':'10011001', \n'N':'10011110', \n'O':'00101', \n'P':'111', \n'Q':'10011111', \n'R':'1000', \n'S':'00110', \n'T':'00111', \n'U':'10011100', \n'V':'10011101', \n'W':'000010', \n'X':'10010010', \n'Y':'10010011', \n'Z':'10010000'}\n\ndecode = {\n\"00000\":\"A\",\n\"00001\":\"B\",\n\"00010\":\"C\",\n\"00011\":\"D\",\n\"00100\":\"E\",\n\"00101\":\"F\",\n\"00110\":\"G\",\n\"00111\":\"H\",\n\"01000\":\"I\",\n\"01001\":\"J\",\n\"01010\":\"K\",\n\"01011\":\"L\",\n\"01100\":\"M\",\n\"01101\":\"N\",\n\"01110\":\"O\",\n\"01111\":\"P\",\n\"10000\":\"Q\",\n\"10001\":\"R\",\n\"10010\":\"S\",\n\"10011\":\"T\",\n\"10100\":\"U\",\n\"10101\":\"V\",\n\"10110\":\"W\",\n\"10111\":\"X\",\n\"11000\":\"Y\",\n\"11001\":\"Z\",\n\"11010\":\" \",\n\"11011\":\".\",\n\"11100\":\",\",\n\"11101\":\"-\",\n\"11110\":\"'\",\n\"11111\":\"?\"}\n\nwhile True:\n\ttry:\n\t\tstring = raw_input()\n\texcept EOFError:\n\t\tbreak\t\t\n\n\te, ans = \"\", \"\"\n\tfor s in string:\n\t\te += encode[s]\n\ttmp = []\n\twhile len(e) > 4:\n\t\ttmp.append(e[0:5])\n\t\te = e[5:]\n\tif len(e) != 0:\n\t\te += '0' * (5 - len(e))\n\t\ttmp.append(e)\n\n\tfor s in tmp:\n\t\tans += decode[s]\n\tprint ans"
  },
  {
    "language": "Python",
    "code": "import sys\nf = sys.stdin\n\nk1 = {\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"}\nimport string\nk2 = string.ascii_uppercase + \" .,-'?\"\n\nwhile True:\n    line = f.readline().strip()\n    if not line:\n        break\n    c1 = c2 = ''\n    for c in line:\n        c1 += k1[c]\n\n    #5の倍数に0フィル\n    c1 += '0' * (5 - len(c1) % 5)\n\n    for i in range(0, len(c1),5):\n        c2 += k2[ int(c1[i:i + 5],2)]\n    print(c2)"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\nd1 = {\n    ' ': '101'\n    , '\\'': '000000'\n    , ',': '000011'\n    , '-': '10010001'\n    , '.': '010001'\n    , '?': '000001'\n    , 'A': '100101'\n    , 'B': '10011010'\n    , 'C': '0101'\n    , 'D': '0001'\n    , 'E': '110'\n    , 'F': '01001'\n    , 'G': '10011011'\n    , 'H': '010000'\n    , 'I': '0111'\n    , 'J': '10011000'\n    , 'K': '0110'\n    , 'L': '00100'\n    , 'M': '10011001'\n    , 'N': '10011110'\n    , 'O': '00101'\n    , 'P': '111'\n    , 'Q': '10011111'\n    , 'R': '1000'\n    , 'S': '00110'\n    , 'T': '00111'\n    , 'U': '10011100'\n    , 'V': '10011101'\n    , 'W': '000010'\n    , 'X': '10010010'\n    , 'Y': '10010011'\n    , 'Z': '10010000'\n}\n\nd2 = {\n    '00000': 'A'\n    , '00001': 'B'\n    , '00010': 'C'\n    , '00011': 'D'\n    , '00100': 'E'\n    , '00101': 'F'\n    , '00110': 'G'\n    , '00111': 'H'\n    , '01000': 'I'\n    , '01001': 'J'\n    , '01010': 'K'\n    , '01011': 'L'\n    , '01100': 'M'\n    , '01101': 'N'\n    , '01110': 'O'\n    , '01111': 'P'\n    , '10000': 'Q'\n    , '10001': 'R'\n    , '10010': 'S'\n    , '10011': 'T'\n    , '10100': 'U'\n    , '10101': 'V'\n    , '10110': 'W'\n    , '10111': 'X'\n    , '11000': 'Y'\n    , '11001': 'Z'\n    , '11010': ' '\n    , '11011': '.'\n    , '11100': ','\n    , '11101': '-'\n    , '11110': '\\''\n    , '11111': '?'\n}\n\nS = ''\nfor s in sys.stdin:\n    s = s.rstrip('\\n')\n    S += s\n\nT = ''\nfor c in S:\n    T += d1[c]\n\n# zero padding\nT += '0' * (-len(T) % 5)\n\nU = ''\nfor i in range(0, len(T), 5):\n    binary = T[i:i+5]\n    U += d2[binary]\n\nprint(U)"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\nfor e in sys.stdin:\n a=''.join(d[c]for c in e.strip())\n a+='0'*(-len(a)%5)\n print(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(a[i:i+5],2)]for i in range(0,len(a),5)))\n"
  },
  {
    "language": "Python",
    "code": "import sys\n\ndef suicide(sentence):\n    string = ''\n    for c in sentence:\n        string += dic[c]\n    lis = []\n    while string:\n        lis.append(string[:5])\n        string = string[5:]\n    for i in range(5-len(lis[-1])):\n        lis[-1] = lis[-1] + '0'\n    absolutely_fantastic(lis)\n        \ndef absolutely_fantastic(lis):\n    ans = ''\n    for v in lis:\n        a = 0\n        for i in range(5):\n            a += 2**(4-i)*int(v[i])\n        else:\n            ans += mathematics[a]\n    else:\n        print ans\n\ndic = {' ':'101', \"'\":'000000', ',':'000011', '-':'10010001', '.':'010001', '?':'000001', 'A':'100101', 'B':'10011010', 'C':'0101',\n       'D':'0001', 'E':'110', 'F':'01001', 'G':'10011011', 'H':'010000', 'I':'0111', 'J':'10011000', 'K':'0110',\n       'L':'00100', 'M':'10011001', 'N':'10011110', 'O':'00101', 'P':'111', 'Q':'10011111', 'R':'1000',\n       'S':'00110', 'T':'00111', 'U':'10011100', 'V':'10011101', 'W':'000010', 'X':'10010010', 'Y':'10010011', 'Z':'10010000'}\n\nmathematics = {0:'A', 1:'B', 2:'C', 3:'D', 4:'E', 5:'F', 6:'G', 7:'H', \n               8:'I', 9:'J', 10:'K', 11:'L', 12:'M', 13:'N', 14:'O', 15:'P', \n               16:'Q', 17:'R', 18:'S', 19:'T', 20:'U', 21:'V', 22:'W', 23:'X',\n               24:'Y', 25:'Z', 26:' ', 27:'.', 28:',', 29:'-', 30:\"'\", 31:'?',}\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        suicide(line.rstrip('\\n'))"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\nd1 = {\n    ' ': '101'\n    , '\\'': '000000'\n    , ',': '000011'\n    , '-': '10010001'\n    , '.': '010001'\n    , '?': '000001'\n    , 'A': '100101'\n    , 'B': '10011010'\n    , 'C': '0101'\n    , 'D': '0001'\n    , 'E': '110'\n    , 'F': '01001'\n    , 'G': '10011011'\n    , 'H': '010000'\n    , 'I': '0111'\n    , 'J': '10011000'\n    , 'K': '0110'\n    , 'L': '00100'\n    , 'M': '10011001'\n    , 'N': '10011110'\n    , 'O': '00101'\n    , 'P': '111'\n    , 'Q': '10011111'\n    , 'R': '1000'\n    , 'S': '00110'\n    , 'T': '00111'\n    , 'U': '10011100'\n    , 'V': '10011101'\n    , 'W': '000010'\n    , 'X': '10010010'\n    , 'Y': '10010011'\n    , 'Z': '10010000'\n}\n\nd2 = {\n    '00000': 'A'\n    , '00001': 'B'\n    , '00010': 'C'\n    , '00011': 'D'\n    , '00100': 'E'\n    , '00101': 'F'\n    , '00110': 'G'\n    , '00111': 'H'\n    , '01000': 'I'\n    , '01001': 'J'\n    , '01010': 'K'\n    , '01011': 'L'\n    , '01100': 'M'\n    , '01101': 'N'\n    , '01110': 'O'\n    , '01111': 'P'\n    , '10000': 'Q'\n    , '10001': 'R'\n    , '10010': 'S'\n    , '10011': 'T'\n    , '10100': 'U'\n    , '10101': 'V'\n    , '10110': 'W'\n    , '10111': 'X'\n    , '11000': 'Y'\n    , '11001': 'Z'\n    , '11010': ' '\n    , '11011': '.'\n    , '11100': ','\n    , '11101': '-'\n    , '11110': '\\''\n    , '11111': '?'\n}\n\nS = ''\nfor s in sys.stdin:\n    s = s.replace('\\n', ' ')\n    S += s\n\nT = ''\nfor c in S:\n    T += d1[c]\n\n# zero padding\nT += '0' * (-len(T) % 5)\n\nU = ''\nfor i in range(0, len(T), 5):\n    binary = T[i:i+5]\n    U += d2[binary]\n\nprint(U, end='')"
  },
  {
    "language": "Python",
    "code": "class Code:\n    def __init__(self): \n        self.cd1 = {\" \":\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\n        self.cd2 = {\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\n\n    def code1(self,s):\n        t0 = list(map(lambda x:self.cd1[x], s))\n        t1 = ''.join(t0)\n        t = list(t1)\n        t0 = t\n        u = []\n        while len(t) > 0:\n            u.append(t[0:5])\n            t[0:5]=[]\n        if len(u[-1]) != 5:\n            u[-1] = (u[-1] + ['0']*4)[0:5]\n        v = list(map(lambda x:''.join(x), u))\n        return(v)\n\n    def code2(self,s):\n        t = []\n        for i in s: \n            t.append(self.cd2[i])\n        u = ''.join(t)\n        return(u)\n\nif __name__ == \"__main__\":\n    cd = Code()\n    while True:\n        try:\n            s = input().strip()\n            t = cd.code1(s)\n            u = cd.code2(t)\n            print(u)\n\n        except EOFError:\n            break"
  },
  {
    "language": "Python",
    "code": "encode = {' ':'101', '\\'':'000000', ',':'000011', '-':'1001000', '.':'010001', '?':'000001', 'A':'100101', 'B':'10011010', 'C':'0101', 'D':'0001', 'E':'110', 'F':'01001', 'G':'10011011', 'H':'010000', 'I':'0111', 'J':'10011000', 'K':'0110', 'L':'00100', 'M':'10011001', 'N':'10011110', 'O':'00101', 'P':'111', 'Q':'10011111', 'R':'1000', 'S':'00110', 'T':'00111', 'U':'10011100', 'V':'10011101', 'W':'000010', 'X':'10010010', 'Y':'10010011', 'X':'10010000'}\ndecode = {'00000':'A', '00001':'B', '00010':'C', '00011':'D', '00100':'E','00101':'F','00110':'G','00111':'H','01000':'I','01001':'J','01010':'K','01011':'L','01100':'M','01101':'N','01110':'O','01111':'P','10000':'Q','10001':'R','10010':'S','10011':'T','10100':'U','10101':'V','10110':'W','10111':'X','11000':'Y','11001':'Z','11010':' ','11011':'.','11100':',','11101':'-','11110':'\\'','11111':'?'}\n\nwhile True:\n\ttry:\n\t\tstring = raw_input()\n\texcept EOFError:\n\t\tbreak\t\t\n\n\t# encode\n\te, ans = \"\", \"\"\n\tfor s in string:\n\t\te += encode[s]\n\ttmp = []\n\twhile len(e) > 4:\n\t\ttmp.append(e[0:5])\n\t\te = e[5:]\n\tif len(e) != 0:\n\t\te += '0' * (5 - len(e))\n\t\ttmp.append(e)\n\tprint tmp\n\n\t# decode\n\tfor s in tmp:\n\t\tans += decode[s]\n\tprint ans"
  },
  {
    "language": "Python",
    "code": "import sys\nconv1 = {' ':\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\nsym = \" .,-'?\"\nfor s in sys.stdin.readlines():\n    s1 = \"\"; s2 = \"\";\n    for c in s.strip():\n        s1 += conv1[c]\n    if len(s1)%5>0 :s1 += \"0\"*(5-(len(s1)%5))\n    for i in xrange(0,len(s1),5):\n        print s1[i:i+5]\n        code = int(s1[i:i+5],2)\n        if code<26:\n            s2 += chr(65+code)\n        else:\n            s2 += sym[code-26]\n    print s2"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\nfor e in sys.stdin:\n a=''.join(d[c]for c in e.strip())\n l=len(a)+4\n #b=a.ljust(l//5*5,'0')\n b=a+'0'*(-len(a)%5)\n print(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(b[i:i+5],2)]for i in range(0,l,5)))\n"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\n\na='101'.join(''.join(d[c]for c in e.strip())for e in sys.stdin)\nl=len(a)+4\nb=a.ljust(l//5*5,'0')\nprint(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(b[i:i+5],2)]for i in range(0,l,5)))\n"
  },
  {
    "language": "Python",
    "code": "import sys\nf = sys.stdin\n\nk1 = {' ':'101'\n,\"'\":'000000'\n,',':'000011'\n,'-':'10010001'\n,'.':'010001'\n,'?':'000001'\n,'A':'100101'\n,'B':'10011010'\n,'C':'0101'\n,'D':'0001'\n,'E':'110'\n,'F':'01001'\n,'G':'10011011'\n,'H':'010000'\n,'I':'0111'\n,'J':'10011000'\n,'K':'0110'\n,'L':'00100'\n,'M':'10011001'\n,'N':'10011110'\n,'O':'00101'\n,'P':'111'\n,'Q':'10011111'\n,'R':'1000'\n,'S':'00110'\n,'T':'00111'\n,'U':'10011100'\n,'V':'10011101'\n,'W':'000010'\n,'X':'10010010'\n,'Y':'10010011'\n,'Z':'10010000'\n,'\\n':''}\nimport string\nk2 = string.ascii_uppercase + \" .,-'?\"\n\nfor line in f:\n    cipher = ''\n    for c in line:\n        cipher += k1[c]\n\n    #5の倍数に0フィル\n    cipher += '0' * (5 - len(cipher) % 5)\n\n    for i in range(0, len(cipher),5):\n        num = int(cipher[i:i + 5],2)\n        print(k2[num],end='')\n    print()"
  },
  {
    "language": "Python",
    "code": "en=[chr(i) for i in range(65,91)]+list(' .,-\\'?')\nde={\n' ':'101','\\'':'000000',',':'000011','-':'10010001','.':'010001','?':'000001',\n'A':'100101','B':'10011010','C':'0101','D':'0001','E':'110','F':'01001',\n'G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100',\n'M':'10011001','N':'10011110','O':'00101','P':'111','Q':'10011111','R':'1000',\n'S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010',\n'Y':'10010011','Z':'10010000'}\na=''\nfor x in list(input()):\n    a+=de[x]\na+='0'*(-len(a)%5)\nfor i in range(0,len(a),5):\n    print(en[int(a[i:i+5],2)],end='')\nprint()"
  },
  {
    "language": "Python",
    "code": "# Aizu Problem 0088: The Code A Doctor Loved\n#\nimport sys, math, os\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef bin5(k):\n    b = bin(k)[2:]\n    while len(b) < 5:\n        b = '0' + b\n    return b\n\n\nCODE1 = {' ': '101', \"'\": '000000', \",\": '000011', '-': '10010001',\n         '.': '010001', '?': '000001',\n         'A': '100101', 'B': '10011010', 'C': '0101', 'D': '0001',\n         'E': '110', 'F': '01001', 'G': '10011011', 'H': '010000',\n         'I': '0111', 'J': '10011000', 'K': '0110', 'L': '00100',\n         'M': '10011001', 'N': '10011110', 'O': '00101', 'P': '111',\n         'Q': '10011111', 'R': '1000', 'S': '00110', 'T': '00111',\n         'U': '10011100', 'V': '10011101', 'W': '000010',\n         'X': '10010010', 'Y': '10010011', 'Z': '10010000'}\n\nCODE2 = {bin5(k): chr(65+k) for k in range(26)}\nsymbols = [' ', '.', ',', '-', \"'\", '?']\nfor k in range(len(symbols)):\n    CODE2[bin5(26+k)] = symbols[k]\n\n\ndef encode(string):\n    enc = ''.join([CODE1[char] for char in string])\n    while len(enc) % 5 != 0:\n        enc += '0'\n    return ''.join([CODE2[enc[5*k:5*k+5]] for k in range(len(enc) // 5)])\n\n\nfor line in sys.stdin:\n    print(encode(line.replace('\\n', '')))"
  },
  {
    "language": "Python",
    "code": "_encode={\n    \" \":\"101\",\n    \"'\":\"000000\",\n    \",\":\"000011\",\n    \"-\":\"10010001\",\n    \".\":\"010001\",\n    \"?\":\"000001\",\n    \"A\":\"100101\",\n    \"B\":\"10011010\",\n    \"C\":\"0101\",\n    \"D\":\"0001\",\n    \"E\":\"110\",\n    \"F\":\"01001\",\n    \"G\":\"10011011\",\n    \"H\":\"010000\",\n    \"I\":\"0111\",\n    \"J\":\"10011000\",\n    \"K\":\"0110\",\n    \"L\":\"00100\",\n    \"M\":\"10011001\",\n    \"N\":\"10011110\",\n    \"O\":\"00101\",\n    \"P\":\"111\",\n    \"Q\":\"10011111\",\n    \"R\":\"1000\",\n    \"S\":\"00110\",\n    \"T\":\"00111\",\n    \"U\":\"10011100\",\n    \"V\":\"10011101\",\n    \"W\":\"000010\",\n    \"X\":\"10010010\",\n    \"Y\":\"10010011\",\n    \"Z\":\"10010000\"\n}\n\ndef encode(c):\n    return _encode[c]\n\ndef decode(s):\n    num=0\n    for i,c in enumerate(s):\n        if c==\"1\":\n            num+=2**(4-i)\n    if num<26:\n        return chr(ord('A')+num)\n    elif num==26:\n        return \" \"\n    elif num==27:\n        return \".\"\n    elif num==28:\n        return \",\"\n    elif num==29:\n        return \"-\"\n    elif num==30:\n        return \"'\"\n    else:\n        return \"?\"\n\n\nwhile True:\n    try:\n        s=input()\n        encoded=\"\"\n        for c in s:\n            encoded+=encode(c)\n        while(len(encoded)%5!=0):\n            encoded+=\"0\"\n        decoded=\"\"\n        for i in range(len(encoded)//5):\n            decoded+=decode(encoded[5*i:5*i+5])\n        print(decoded)\n    except EOFError:\n        break\n\n"
  },
  {
    "language": "Python",
    "code": "encode = {' ':'101', '\\'':'000000', ',':'000011', '-':'1001000', '.':'010001', '?':'000001', 'A':'100101', 'B':'10011010', 'C':'0101', 'D':'0001', 'E':'110', 'F':'01001', 'G':'10011011', 'H':'010000', 'I':'0111', 'J':'10011000', 'K':'0110', 'L':'00100', 'M':'10011001', 'N':'10011110', 'O':'00101', 'P':'111', 'Q':'10011111', 'R':'1000', 'S':'00110', 'T':'00111', 'U':'10011100', 'V':'10011101', 'W':'000010', 'X':'10010010', 'Y':'10010011', 'X':'10010000'}\ndecode = {'00000':'A', '00001':'B', '00010':'C', '00011':'D', '00100':'E','00101':'F','00110':'G','00111':'H','01000':'I','01001':'J','01010':'K','01011':'L','01100':'M','01101':'N','01110':'O','01111':'P','10000':'Q','10001':'R','10010':'S','10011':'T','10100':'U','10101':'V','10110':'W','10111':'X','11000':'Y','11001':'Z','11010':' ','11011':'.','11100':',','11101':'-','11110':'\\'','11111':'?'}\n\nwhile True:\n\ttry:\n\t\tstring = list(raw_input().replace(\"\\n\", \"\"))\n\t\t\n\t\t# encode\n\t\tcode = \"\"\n\t\tfor s in string:\n\t\t\tcode += encode[s]\n\t\ti = 0\n\t\ttmp = []\n\t\twhile i+5 <= len(code):\n\t\t\ttmp.append(code[i:i+5])\n\t\t\tcode = code[i+5:]\n\t\tif len(code) != 0:\n\t\t\tcode += '0' * (5 - len(code))\n\t\t\ttmp.append(code)\n\n\t\t# decode\n\t\tans = \"\"\n\t\tfor s in tmp:\n\t\t\tans += decode[s]\n\t\tprint ans\n\texcept EOFError:\n\t\tbreak"
  },
  {
    "language": "Python",
    "code": "import sys\nA=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nB=\"101 000000 000011 10010001 010001 000001 100101 10011010 \"\\\n  \"0101 0001 110 01001 10011011 010000 0111 10011000 \"\\\n  \"0110 00100 10011001 10011110 00101 111 10011111 1000 \"\\\n  \"00110 00111 10011100 10011101 000010 10010010 10010011 10010000\".split()\nC=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"\nd1={}\nfor i in range(26):d1[A[i]]=B[i]\nfor s in sys.stdin:\n  x=\"\"\n  for c in s[:-1]:x+=d1[c]\n  x+=\"0\"*(-len(x)%5)\n  s=\"\"\n  for i in range(0,len(x),5):s+=C[int(x[i:i+5],2)]\n  print s"
  },
  {
    "language": "Python",
    "code": "table1 = {\" \":\"101\", \"'\":\"000000\", \",\":\"000011\", \"-\":\"10010001\", \".\":\"010001\", \"?\":\"000001\",\n        \"A\":\"100101\", \"B\":\"10011010\", \"C\":\"0101\", \"D\":\"0001\", \"E\":\"110\",\n        \"F\":\"01001\", \"G\":\"10011011\", \"H\":\"010000\", \"I\":\"0111\", \"J\":\"10011000\",\n        \"K\":\"0110\", \"L\":\"00100\", \"M\":\"10011001\", \"N\":\"10011110\", \"O\":\"00101\",\n        \"P\":\"111\", \"Q\":\"10011111\", \"R\":\"1000\", \"S\":\"00110\", \"T\":\"00111\",\n        \"U\":\"10011100\", \"V\":\"10011101\", \"W\":\"000010\", \"X\":\"10010010\", \"Y\":\"10010011\", \"Z\":\"10010000\"}\n\ntable2 = {\"00000\":\"A\", \"00001\":\"B\", \"00010\":\"C\", \"00011\":\"D\", \"00100\":\"E\",\n        \"00101\":\"F\", \"00110\":\"G\", \"00111\":\"H\", \"01000\":\"I\", \"01001\":\"J\",\n        \"01010\":\"K\", \"01011\":\"L\", \"01100\":\"M\", \"01101\":\"N\", \"01110\":\"O\",\n        \"01111\":\"P\", \"10000\":\"Q\", \"10001\":\"R\", \"10010\":\"S\", \"10011\":\"T\",\n        \"10100\":\"U\", \"10101\":\"V\", \"10110\":\"W\", \"10111\":\"X\", \"11000\":\"Y\",\n        \"11001\":\"Z\", \"11010\":\" \", \"11011\":\".\", \"11100\":\",\", \"11101\":\"-\",\n        \"11110\":\"'\", \"11111\":\"?\"}\n\ndef convert1(str):\n  convert = \"\"\n  for s in str:\n    convert += table1[s]\n  return convert\n\ndef convert2(str):\n  convert = \"\"\n  index = 0\n  \n  while index + 5 < len(str):\n    convert += table2[str[index:index + 5]]\n    index += 5\n  # 末尾は0で埋めてある\n  if str[index:]:\n    convert += table2[str[index:] + \"0\" * (5 - len(str) + index)]\n  \n  return convert\n\nwhile True:\n  try:\n    s = input()\n    c1 = convert1(s)\n    c2 = convert2(c1)\n    print(c2)\n  except:\n    break\n"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110','F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111','Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\n\na='101'.join(''.join(d[c]for c in e.strip())for e in sys.stdin)\nl=len(a)+4\nb=a.ljust(l//5*5,'0')\nprint(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(b[i:i+5],2)]for i in range(0,l,5)))\n"
  },
  {
    "language": "Python",
    "code": "import sys\nA=\" ',-.?ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nB=\"101 000000 000011 10010001 010001 000001 100101 10011010 \"\\\n  \"0101 0001 110 01001 10011011 010000 0111 10011000 \"\\\n  \"0110 00100 10011001 10011110 00101 111 10011111 1000 \"\\\n  \"00110 00111 10011100 10011101 000010 10010010 10010011 10010000\".split()\nC=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"\nd1={}\nfor i in range(32):d1[A[i]]=B[i]\nfor s in sys.stdin:\n  x=\"\"\n  for c in s[:-1]:x+=d1[c]\n  x+=\"0\"*(-len(x)%5)\n  s=\"\"\n  for i in range(0,len(x),5):s+=C[int(x[i:i+5],2)]\n  print s"
  },
  {
    "language": "Python",
    "code": "conv1 = {' ':\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\nsym = \" .,-'?\"\ns1 = \"\"; s2 = \"\";\ns = raw_input()\nfor c in s:\n    s1 += conv1[c]\nif len(s1)%5>0 :s1 += \" \"*(5-(len(s1)%5))\nfor i in xrange(0,len(s1),5):\n    code = int(s1[i:i+5],2)\n    if code<26:\n        s2 += chr(65+code)\n    else:\n        s2 += sym[code-26]\nprint s2\n        "
  },
  {
    "language": "Python",
    "code": "import sys\nd1 = {\n' ':'101'\n,'\\'':'000000'\n,',':'000011'\n,'-':'10010001'\n,'.':'010001'\n,'?':'000001'\n,'A':'100101'\n,'B':'10011010'\n,'C':'0101'\n,'D':'0001'\n,'E':'110'\n,'F':'01001'\n,'G':'10011011'\n,'H':'010000'\n,'I':'0111'\n,'J':'10011000'\n,'K':'0110'\n,'L':'00100'\n,'M':'10011001'\n,'N':'10011110'\n,'O':'00101'\n,'P':'111'\n,'Q':'10011111'\n,'R':'1000'\n,'S':'00110'\n,'T':'00111'\n,'U':'10011100'\n,'V':'10011101'\n,'W':'000010'\n,'X':'10010010'\n,'Y':'10010011'\n,'Z':'10010000'\n}\n\nd2 = {\n'00000':'A'\n,'00001':'B'\n,'00010':'C'\n,'00011':'D'\n,'00100':'E'\n,'00101':'F'\n,'00110':'G'\n,'00111':'H'\n,'01000':'I'\n,'01001':'J'\n,'01010':'K'\n,'01011':'L'\n,'01100':'M'\n,'01101':'N'\n,'01110':'O'\n,'01111':'P'\n,'10000':'Q'\n,'10001':'R'\n,'10010':'S'\n,'10011':'T'\n,'10100':'U'\n,'10101':'V'\n,'10110':'W'\n,'10111':'X'\n,'11000':'Y'\n,'11001':'Z'\n,'11010':' '\n,'11011':'.'\n,'11100':','\n,'11101':'-'\n,'11110':'\\''\n,'11111':'?'\n}\nfor line in sys.stdin:\n    s1 = ''\n    s2 = ''\n    for s in line.rstrip('\\n'):\n        s1 += d1[s]\n    s1 += '0'*(-len(s1)%5)\n    \n    for i in range(len(s1)//5):\n        s2 += d2[s1[i*5:(i+1)*5]]\n        \n    print(s2)"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\nfor e in sys.stdin:\n a=''.join(d[c]for c in e.strip())\n a+='0'*(-len(a)%5)\n print(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(a[i:i+5],2)]for i in range(0,len(a),5)))\n"
  },
  {
    "language": "Python",
    "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\nd1 = {\n    ' ': '101'\n    , '\\'': '000000'\n    , ',': '000011'\n    , '-': '10010001'\n    , '.': '010001'\n    , '?': '000001'\n    , 'A': '100101'\n    , 'B': '10011010'\n    , 'C': '0101'\n    , 'D': '0001'\n    , 'E': '110'\n    , 'F': '01001'\n    , 'G': '10011011'\n    , 'H': '010000'\n    , 'I': '0111'\n    , 'J': '10011000'\n    , 'K': '0110'\n    , 'L': '00100'\n    , 'M': '10011001'\n    , 'N': '10011110'\n    , 'O': '00101'\n    , 'P': '111'\n    , 'Q': '10011111'\n    , 'R': '1000'\n    , 'S': '00110'\n    , 'T': '00111'\n    , 'U': '10011100'\n    , 'V': '10011101'\n    , 'W': '000010'\n    , 'X': '10010010'\n    , 'Y': '10010011'\n    , 'Z': '10010000'\n}\n\nd2 = {\n    '00000': 'A'\n    , '00001': 'B'\n    , '00010': 'C'\n    , '00011': 'D'\n    , '00100': 'E'\n    , '00101': 'F'\n    , '00110': 'G'\n    , '00111': 'H'\n    , '01000': 'I'\n    , '01001': 'J'\n    , '01010': 'K'\n    , '01011': 'L'\n    , '01100': 'M'\n    , '01101': 'N'\n    , '01110': 'O'\n    , '01111': 'P'\n    , '10000': 'Q'\n    , '10001': 'R'\n    , '10010': 'S'\n    , '10011': 'T'\n    , '10100': 'U'\n    , '10101': 'V'\n    , '10110': 'W'\n    , '10111': 'X'\n    , '11000': 'Y'\n    , '11001': 'Z'\n    , '11010': ' '\n    , '11011': '.'\n    , '11100': ','\n    , '11101': '-'\n    , '11110': '\\''\n    , '11111': '?'\n}\n\nS = ''\nfor s in sys.stdin:\n    s = s.replace('\\n', ' ')\n    S += s\n\nT = ''\nfor c in S:\n    T += d1[c]\n\n# zero padding\nT += '0' * (-len(T) % 5)\n\nU = ''\nfor i in range(0, len(T), 5):\n    binary = T[i:i+5]\n    U += d2[binary]\n\nprint(U)"
  },
  {
    "language": "Python",
    "code": "import sys\nf = sys.stdin\n\n\nk1 = {' ':'101'\n,\"'\":'000000'\n,',':'000011'\n,'-':'10010001'\n,'.':'010001'\n,'?':'000001'\n,'A':'100101'\n,'B':'10011010'\n,'C':'0101'\n,'D':'0001'\n,'E':'110'\n,'F':'01001'\n,'G':'10011011'\n,'H':'010000'\n,'I':'0111'\n,'J':'10011000'\n,'K':'0110'\n,'L':'00100'\n,'M':'10011001'\n,'N':'10011110'\n,'O':'00101'\n,'P':'111'\n,'Q':'10011111'\n,'R':'1000'\n,'S':'00110'\n,'T':'00111'\n,'U':'10011100'\n,'V':'10011101'\n,'W':'000010'\n,'X':'10010010'\n,'Y':'10010011'\n,'Z':'10010000'}\nimport string\nk2 = string.ascii_uppercase + \" .,-'?\"\n\nfor line in f:\n    cipher = ''\n    for c in line.strip():\n        cipher += k1[c]\n\n    #5の倍数に0フィル\n    cipher += '0' * (5 - len(cipher) % 5)\n\n    for i in range(0, len(cipher),5):\n        num = int(cipher[i:i + 5],2)\n        print(k2[num],end='')\n    print()"
  },
  {
    "language": "Python",
    "code": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\nfor e in sys.stdin:\n a=''.join(d[c]for c in e[:-1])\n a+='0'*(-len(a)%5)\n print(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(a[i*5:i*5+5],2)]for i in range(len(a)//5)))\n"
  },
  {
    "language": "Python",
    "code": "import sys\nf = sys.stdin\n\nk1 = {\n\" \":\"101\",\n\"'\":\"000000\",\n\",\":\"000011\",\n\"-\":\"10010001\",\n\".\":\"010001\",\n\"?\":\"000001\",\n\"A\":\"100101\",\n\"B\":\"10011010\",\n\"C\":\"0101\",\n\"D\":\"0001\",\n\"E\":\"110\",\n\"F\":\"01001\",\n\"G\":\"10011011\",\n\"H\":\"010000\",\n\"I\":\"0111\",\n\"J\":\"10011000\",\n\"K\":\"0110\",\n\"L\":\"00100\",\n\"M\":\"10011001\",\n\"N\":\"10011110\",\n\"O\":\"00101\",\n\"P\":\"111\",\n\"Q\":\"10011111\",\n\"R\":\"1000\",\n\"S\":\"00110\",\n\"T\":\"00111\",\n\"U\":\"10011100\",\n\"V\":\"10011101\",\n\"W\":\"000010\",\n\"X\":\"10010010\",\n\"Y\":\"10010011\",\n\"Z\":\"10010000\"}\nimport string\nk2 = string.ascii_uppercase + \" .,-'?\"\n\nfor line in f:\n    c1 = c2 = ''\n    for c in line.rstrip('\\n'):\n        c1 += k1[c]\n\n    #5の倍数に0フィル\n    c1 += '0' * (- len(c1) % 5)\n\n    for i in range(0, len(c1),5):\n        c2 += k2[ int(c1[i:i + 5],2)]\n    print(c2)"
  },
  {
    "language": "Python",
    "code": "# Aizu Problem 0088: The Code A Doctor Loved\n#\nimport sys, math, os\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef bin5(k):\n    b = bin(k)[2:]\n    while len(b) < 5:\n        b = '0' + b\n    return b\n\n\nCODE1 = {' ': '101', \"'\": '000000', \",\": '000011', '-': '10010001',\n         '.': '010001', '?': '000001',\n         'A': '100101', 'B': '10011010', 'C': '0101', 'D': '0001',\n         'E': '110', 'F': '01001', 'G': '10011011', 'H': '010000',\n         'I': '0111', 'J': '10011000', 'K': '0110', 'L': '00100',\n         'M': '10011001', 'N': '10011110', 'O': '00101', 'P': '111',\n         'Q': '10011111', 'R': '1000', 'S': '00110', 'T': '00111',\n         'U': '10011100', 'V': '10011101', 'W': '000010',\n         'X': '10010010', 'Y': '10010011', 'Z': '10010000'}\n\nCODE2 = {bin5(k): chr(65+k) for k in range(26)}\nsymbols = [' ', '.', ',', '-', \"'\", '?']\nfor k in range(len(symbols)):\n    CODE2[bin5(26+k)] = symbols[k]\n\n\ndef encode(string):\n    enc = ''.join([CODE1[char] for char in string])\n    while len(enc) % 5 != 0:\n        enc += '0'\n    return ''.join([CODE2[enc[5*k:5*k+5]] for k in range(len(enc) // 5)])\n\n\nfor line in sys.stdin:\n    print(encode(line.strip()))"
  },
  {
    "language": "Python",
    "code": "enco1={\" \":\"101\", \"'\":\"000000\", \",\":\"000011\", \"-\":\"10010001\", \".\":\"010001\", \"?\":\"000001\", \"A\":\"100101\", \"B\":\"10011010\", \"C\":\"0101\", \"D\":\"0001\", \"E\":\"110\", \"F\":\"01001\", \"G\":\"10011011\", \"H\":\"010000\", \"I\":\"0111\", \"J\":\"10011000\", \"K\":\"0110\", \"L\":\"00100\", \"M\":\"10011001\", \"N\":\"10011110\", \"O\":\"00101\", \"P\":\"111\", \"Q\":\"10011111\", \"R\":\"1000\", \"S\":\"00110\", \"T\":\"00111\", \"U\":\"10011100\", \"V\":\"10011101\", \"W\":\"000010\", \"X\":\"10010010\", \"Y\":\"10010011\", \"Z\":\"10010000\" }\nenco2={\"00000\":\"A\", \"00001\":\"B\", \"00010\":\"C\", \"00011\":\"D\", \"00100\":\"E\", \"00101\":\"F\", \"00110\":\"G\", \"00111\":\"H\", \"01000\":\"I\", \"01001\":\"J\", \"01010\":\"K\", \"01011\":\"L\", \"01100\":\"M\", \"01101\":\"N\", \"01110\":\"O\", \"01111\":\"P\", \"10000\":\"Q\", \"10001\":\"R\", \"10010\":\"S\", \"10011\":\"T\", \"10100\":\"U\", \"10101\":\"V\", \"10110\":\"W\", \"10111\":\"X\", \"11000\":\"Y\", \"11001\":\"Z\", \"11010\":\" \", \"11011\":\".\", \"11100\":\",\", \"11101\":\"-\", \"11110\":\"'\", \"11111\":\"?\"}\ns=\"\".join([enco1[w] for w in raw_input()])\ns=s+\"0\"*(5-len(s)%5)\nprint \"\".join([enco2[s[i:i+5]] for i in xrange(0,len(s),5)])"
  },
  {
    "language": "Python",
    "code": "conv1 = {' ':\"101\",\"'\":\"000000\",\",\":\"000011\",\"-\":\"10010001\",\".\":\"010001\",\"?\":\"000001\",\"A\":\"100101\",\"B\":\"10011010\",\"C\":\"0101\",\"D\":\"0001\",\"E\":\"110\",\"F\":\"01001\",\"G\":\"10011011\",\"H\":\"010000\",\"I\":\"0111\",\"J\":\"10011000\",\"K\":\"0110\",\"L\":\"00100\",\"M\":\"10011001\",\"N\":\"10011110\",\"O\":\"00101\",\"P\":\"111\",\"Q\":\"10011111\",\"R\":\"1000\",\"S\":\"00110\",\"T\":\"00111\",\"U\":\"10011100\",\"V\":\"10011101\",\"W\":\"000010\",\"X\":\"10010010\",\"Y\":\"10010011\",\"Z\":\"10010000\"}\nconv2 = {\"00000\":\"A\",\"00001\":\"B\",\"00010\":\"C\",\"00011\":\"D\",\"00100\":\"E\",\"00101\":\"F\",\"00110\":\"G\",\"00111\":\"H\",\"01000\":\"I\",\"01001\":\"J\",\"01010\":\"K\",\"01011\":\"L\",\"01100\":\"M\",\"01101\":\"N\",\"01110\":\"O\",\"01111\":\"P\",\"10000\":\"Q\",\"10001\":\"R\",\"10010\":\"S\",\"10011\":\"T\",\"10100\":\"U\",\"10101\":\"V\",\"10110\":\"W\",\"10111\":\"X\",\"11000\":\"Y\",\"11001\":\"Z\",\"11010\":\" \",\"11011\":\".\",\"11100\":\",\",\"11101\":\"-\",\"11110\":\"'\",\"11111\":\"?\"}\nwhile 1:\n    try:\n        s = raw_input()\n        s1 = \"\"; s2 = \"\";\n        for c in s:\n            s1 += conv1[c]\n        if len(s1)%5>0 :s1 += \"0\"*(5-(len(s1)%5))\n        for i in xrange(len(s1)/5):\n            s2 += conv2[s1[:5]]\n            s1 = s1[5:]\n        print s2\n    except EOFError:\n        break"
  }
]