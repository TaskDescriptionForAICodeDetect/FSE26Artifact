[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\n#define MAX_N 100005\n#define MAX_SCORE 1000000\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n\nint scores[3] = {1, 2, 3}; // R, S, P scores\nchar hands[3] = {'R', 'S', 'P'};\n\nint wins[256][256] = {0};\n\nint solve(int N, int K, char* machine_moves) {\n    int dp[MAX_N][3];\n    memset(dp, 0, sizeof(dp));\n\n    // Initialize winning conditions\n    wins['R']['S'] = 1; // Rock beats Scissors\n    wins['S']['P'] = 1; // Scissors beats Paper\n    wins['P']['R'] = 1; // Paper beats Rock\n\n    // First K rounds can use any hand\n    for (int i = 0; i < K; i++) {\n        for (int hand = 0; hand < 3; hand++) {\n            if (wins[machine_moves[i]][hands[hand]]) {\n                dp[i][hand] = scores[hand];\n            }\n        }\n    }\n\n    // Dynamic programming for subsequent rounds\n    for (int i = K; i < N; i++) {\n        for (int hand = 0; hand < 3; hand++) {\n            int max_prev_score = 0;\n            \n            // Check constraints for hands in (i-K)th round\n            for (int prev_hand = 0; prev_hand < 3; prev_hand++) {\n                if (prev_hand != hand) {\n                    max_prev_score = max(max_prev_score, dp[i-K][prev_hand]);\n                }\n            }\n\n            // Check if current hand wins against machine's move\n            if (wins[machine_moves[i]][hands[hand]]) {\n                dp[i][hand] = max_prev_score + scores[hand];\n            }\n        }\n    }\n\n    // Find maximum score in last row\n    int max_score = 0;\n    for (int hand = 0; hand < 3; hand++) {\n        max_score = max(max_score, dp[N-1][hand]);\n    }\n\n    return max_score;\n}\n\nint main() {\n    int N, K;\n    char machine_moves[MAX_N];\n    \n    scanf(\"%d %d\", &N, &K);\n    scanf(\"%s\", machine_moves);\n\n    int result = solve(N, K, machine_moves);\n    printf(\"%d\\n\", result);\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:38:52"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_N 100000\n\nint N, K;\nint R, S, P;\nchar T[MAX_N + 1];\nint dp[MAX_N + 1][3]; // 0: R, 1: S, 2: P\n\nint get_score(int player, int machine) {\n    if (player == 0 && machine == 's') return R;\n    if (player == 1 && machine == 'p') return S;\n    if (player == 2 && machine == 'r') return P;\n    return 0;\n}\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n\nint main() {\n    scanf(\"%d %d\", &N, &K);\n    scanf(\"%d %d %d\", &R, &S, &P);\n    scanf(\"%s\", T);\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < 3; j++) {\n            if (i < K) {\n                dp[i][j] = get_score(j, T[i]);\n            } else {\n                int max_prev = 0;\n                for (int k = 0; k < 3; k++) {\n                    if (k != j) {\n                        max_prev = max(max_prev, dp[i - K][k]);\n                    }\n                }\n                dp[i][j] = max_prev + get_score(j, T[i]);\n            }\n        }\n    }\n\n    int total = 0;\n    for (int i = N - 1; i >= N - K && i >= 0; i--) {\n        int max_val = 0;\n        for (int j = 0; j < 3; j++) {\n            max_val = max(max_val, dp[i][j]);\n        }\n        total += max_val;\n    }\n\n    printf(\"%d\\n\", total);\n    return 0;\n}",
    "timestamp": "2025-08-05 22:39:10"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nint main() {\n    int N, K;\n    cin >> N >> K;\n    string machine;\n    cin >> machine;\n    int R, S, P;\n    cin >> R >> S >> P;\n    \n    vector<int> points(N);\n    for (int i = 0; i < N; ++i) {\n        char m = machine[i];\n        if (m == 'r') points[i] = P;\n        else if (m == 's') points[i] = R;\n        else if (m == 'p') points[i] = S;\n    }\n    \n    long long total = 0;\n    for (int i = 0; i < N; ++i) {\n        if (i >= K && machine[i] == machine[i-K]) {\n            machine[i] = 'x'; // Mark to skip\n        } else {\n            total += points[i];\n        }\n    }\n    \n    cout << total << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 22:39:55"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class RPSBattle {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        int K = scanner.nextInt();\n        int R = scanner.nextInt();\n        int S = scanner.nextInt();\n        int P = scanner.nextInt();\n        String T = scanner.next();\n        \n        int totalScore = 0;\n        char[] playerMoves = new char[N];\n        \n        for (int i = 0; i < N; i++) {\n            char machineMove = T.charAt(i);\n            char bestMove = getBestMove(machineMove, R, S, P);\n            \n            if (i >= K && playerMoves[i - K] == bestMove) {\n                bestMove = ' '; // Cannot use the same move as i-K\n            }\n            \n            if (bestMove != ' ') {\n                totalScore += getScore(bestMove, machineMove, R, S, P);\n                playerMoves[i] = bestMove;\n            } else {\n                playerMoves[i] = ' '; // No move made\n            }\n        }\n        \n        System.out.println(totalScore);\n    }\n    \n    private static char getBestMove(char machineMove, int R, int S, int P) {\n        switch (machineMove) {\n            case 'r': return 'p';\n            case 's': return 'r';\n            case 'p': return 's';\n            default: return ' ';\n        }\n    }\n    \n    private static int getScore(char playerMove, char machineMove, int R, int S, int P) {\n        if ((playerMove == 'r' && machineMove == 's') ||\n            (playerMove == 's' && machineMove == 'p') ||\n            (playerMove == 'p' && machineMove == 'r')) {\n            switch (playerMove) {\n                case 'r': return R;\n                case 's': return S;\n                case 'p': return P;\n            }\n        }\n        return 0;\n    }\n}",
    "timestamp": "2025-08-05 22:40:45"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class RPSBattle {\n    public static int maxScore(int n, int k, String machine, int[] scores) {\n        int[][] dp = new int[n][3];\n        \n        for (int i = 0; i < k; i++) {\n            char machineCh = machine.charAt(i);\n            int machineHand = getHand(machineCh);\n            \n            for (int hand = 0; hand < 3; hand++) {\n                if (hand != machineHand) {\n                    dp[i][hand] = (hand == getWinningHand(machineHand)) ? scores[hand] : 0;\n                }\n            }\n        }\n        \n        for (int i = k; i < n; i++) {\n            char machineCh = machine.charAt(i);\n            int machineHand = getHand(machineCh);\n            \n            for (int hand = 0; hand < 3; hand++) {\n                int maxScore = 0;\n                for (int prevHand = 0; prevHand < 3; prevHand++) {\n                    if (hand != prevHand) {\n                        int currentScore = dp[i-k][prevHand] + \n                            ((hand == getWinningHand(machineHand)) ? scores[hand] : 0);\n                        maxScore = Math.max(maxScore, currentScore);\n                    }\n                }\n                dp[i][hand] = maxScore;\n            }\n        }\n        \n        return Math.max(dp[n-1][0], Math.max(dp[n-1][1], dp[n-1][2]));\n    }\n    \n    private static int getHand(char ch) {\n        switch (ch) {\n            case 'R': return 0;\n            case 'P': return 1;\n            case 'S': return 2;\n            default: return -1;\n        }\n    }\n    \n    private static int getWinningHand(int hand) {\n        return (hand + 1) % 3;\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int k = scanner.nextInt();\n        String machine = scanner.next();\n        int[] scores = new int[3];\n        for (int i = 0; i < 3; i++) {\n            scores[i] = scanner.nextInt();\n        }\n        \n        System.out.println(maxScore(n, k, machine, scores));\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 22:40:54"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int N, K;\n    string machineHands;\n    cin >> N >> K >> machineHands;\n\n    vector<vector<vector<int>>> dp(N, vector<vector<int>>(3, vector<int>(3, -1)));\n\n    // Scoring matrix\n    vector<vector<int>> scores = {\n        {0, 1, -1},   // Rock: Rock=0, Paper=1, Scissors=-1\n        {-1, 0, 1},   // Paper: Rock=-1, Paper=0, Scissors=1\n        {1, -1, 0}    // Scissors: Rock=1, Paper=-1, Scissors=0\n    };\n\n    // Initialize first K rounds\n    for (int hand = 0; hand < 3; ++hand) {\n        int machineHand = (machineHands[0] == 'R') ? 0 : (machineHands[0] == 'P') ? 1 : 2;\n        int score = (scores[hand][machineHand] > 0) ? (hand == 0 ? 1 : (hand == 1 ? 2 : 3)) : 0;\n        dp[0][hand][machineHand] = score;\n    }\n\n    // Dynamic programming\n    for (int round = 1; round < N; ++round) {\n        int machineHand = (machineHands[round] == 'R') ? 0 : (machineHands[round] == 'P') ? 1 : 2;\n\n        for (int currHand = 0; currHand < 3; ++currHand) {\n            if (round < K) {\n                // Can use any hand in first K rounds\n                for (int prevHand = 0; prevHand < 3; ++prevHand) {\n                    int score = (scores[currHand][machineHand] > 0) ? (currHand == 0 ? 1 : (currHand == 1 ? 2 : 3)) : 0;\n                    dp[round][currHand][machineHand] = max(dp[round][currHand][machineHand], \n                        (dp[round-1][prevHand][machineHands[round-1] == 'R' ? 0 : (machineHands[round-1] == 'P' ? 1 : 2)] != -1) ? \n                        dp[round-1][prevHand][machineHands[round-1] == 'R' ? 0 : (machineHands[round-1] == 'P' ? 1 : 2)] + score : -1);\n                }\n            } else {\n                // Cannot repeat hand used in (i-K)-th round\n                for (int prevHand = 0; prevHand < 3; ++prevHand) {\n                    if (prevHand != currHand) {\n                        int score = (scores[currHand][machineHand] > 0) ? (currHand == 0 ? 1 : (currHand == 1 ? 2 : 3)) : 0;\n                        dp[round][currHand][machineHand] = max(dp[round][currHand][machineHand], \n                            (dp[round-1][prevHand][machineHands[round-1] == 'R' ? 0 : (machineHands[round-1] == 'P' ? 1 : 2)] != -1) ? \n                            dp[round-1][prevHand][machineHands[round-1] == 'R' ? 0 : (machineHands[round-1] == 'P' ? 1 : 2)] + score : -1);\n                    }\n                }\n            }\n        }\n    }\n\n    int maxScore = 0;\n    for (int hand = 0; hand < 3; ++hand) {\n        for (int machineHand = 0; machineHand < 3; ++machineHand) {\n            maxScore = max(maxScore, dp[N-1][hand][machineHand]);\n        }\n    }\n\n    cout << maxScore << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 22:41:07"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_score_rps(N, K, R, S, P, machine_moves):\n    scores = {'R': R, 'P': P, 'S': S}\n    player_moves = [''] * N\n    total_score = 0\n    \n    for i in range(N):\n        if i >= K and player_moves[i - K] == machine_moves[i]:\n            continue\n        \n        if machine_moves[i] == 'R':\n            if i >= K and player_moves[i - K] == 'P':\n                player_moves[i] = 'S'\n            else:\n                player_moves[i] = 'P'\n                total_score += scores['P']\n            \n        elif machine_moves[i] == 'P':\n            if i >= K and player_moves[i - K] == 'S':\n                player_moves[i] = 'R'\n            else:\n                player_moves[i] = 'S'\n                total_score += scores['S']\n            \n        elif machine_moves[i] == 'S':\n            if i >= K and player_moves[i - K] == 'R':\n                player_moves[i] = 'P'\n            else:\n                player_moves[i] = 'R'\n                total_score += scores['R']\n                \n    return total_score\n\n# Example usage\nN = 5\nK = 2\nR = 5\nS = 6\nP = 7\nmachine_moves = \"RPSRP\"\nprint(max_score_rps(N, K, R, S, P, machine_moves))  # Expected output: 23",
    "timestamp": "2025-08-13 12:00:41"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class RPSBattle {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt(); // Number of rounds\n        int K = scanner.nextInt(); // Rounds to wait for hand reuse\n        int R = scanner.nextInt(); // Points for Rock\n        int S = scanner.nextInt(); // Points for Scissors\n        int P = scanner.nextInt(); // Points for Paper\n        \n        scanner.nextLine();\n        String machineMoves = scanner.nextLine(); // Machine's moves\n        \n        int[] dp = new int[N];\n        char[] playerMoves = new char[N];\n        \n        for (int i = 0; i < N; i++) {\n            char machineMove = machineMoves.charAt(i);\n            int maxScore = 0;\n            char chosenMove = ' ';\n            \n            // Evaluate all possible moves for the player\n            if (i < K || playerMoves[i - K] != 'R') {\n                int currentScore = machineMove == 'S' ? R : 0;\n                if (currentScore > maxScore) {\n                    maxScore = currentScore;\n                    chosenMove = 'R';\n                }\n            }\n            if (i < K || playerMoves[i - K] != 'P') {\n                int currentScore = machineMove == 'R' ? P : 0;\n                if (currentScore > maxScore) {\n                    maxScore = currentScore;\n                    chosenMove = 'P';\n                }\n            }\n            if (i < K || playerMoves[i - K] != 'S') {\n                int currentScore = machineMove == 'P' ? S : 0;\n                if (currentScore > maxScore) {\n                    maxScore = currentScore;\n                    chosenMove = 'S';\n                }\n            }\n            \n            dp[i] = (i > 0 ? dp[i - 1] : 0) + maxScore;\n            playerMoves[i] = chosenMove;\n        }\n        \n        System.out.println(dp[N - 1]);\n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-13 12:00:52"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <string.h>\n\nint maxScore(char *machine_moves, int N, int K, int R, int S, int P) {\n    int dp[N][3];\n    int hand_points[3] = {R, P, S}; // R = 0, P = 1, S = 2\n    char hand_chars[3] = {'r', 'p', 's'};\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < 3; ++j) { // j: 0 = R, 1 = P, 2 = S\n            dp[i][j] = 0;\n            if (i < K || (i >= K && dp[i-K][j] == 0)) {\n                char m = machine_moves[i];\n                if ((m == 'r' && j == 1) || (m == 'p' && j == 2) || (m == 's' && j == 0)) {\n                    dp[i][j] = hand_points[j];\n                }\n            }\n            if (i > 0) {\n                for (int l = 0; l < 3; ++l) {\n                    if (l != j || i < K) {\n                        int score = dp[i-1][l] + dp[i][j];\n                        if (score > dp[i][j]) {\n                            dp[i][j] = score;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    int max_score = 0;\n    for (int j = 0; j < 3; ++j) {\n        if (dp[N-1][j] > max_score) {\n            max_score = dp[N-1][j];\n        }\n    }\n    return max_score;\n}\n\nint main() {\n    int N, K, R, S, P;\n    char machine_moves[100];\n\n    // Example input\n    N = 5;\n    K = 2;\n    R = 2;\n    S = 1;\n    P = 3;\n    strcpy(machine_moves, \"rsprs\");\n\n    printf(\"Maximum Score: %d\\n\", maxScore(machine_moves, N, K, R, S, P));\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 12:01:08"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function maxScore(n, k, r, s, p, moves) {\n  const dp = Array.from({ length: n }, () => ({ R: 0, P: 0, S: 0 }));\n  \n  // Initializing the score for the first K rounds\n  for (let i = 0; i < n; i++) {\n    if (moves[i] === 'S') dp[i]['R'] = r;\n    else if (moves[i] === 'R') dp[i]['P'] = p;\n    else if (moves[i] === 'P') dp[i]['S'] = s;\n    \n    if (i < k) continue;\n\n    const previous = dp[i - k];\n    dp[i]['R'] = Math.max(dp[i]['R'], (moves[i] === 'S' ? r : 0) + Math.max(previous['P'], previous['S']));\n    dp[i]['P'] = Math.max(dp[i]['P'], (moves[i] === 'R' ? p : 0) + Math.max(previous['R'], previous['S']));\n    dp[i]['S'] = Math.max(dp[i]['S'], (moves[i] === 'P' ? s : 0) + Math.max(previous['R'], previous['P']));\n  }\n  \n  let maxScore = 0;\n  for (let i = 0; i < n; i++) {\n    maxScore += Math.max(dp[i]['R'], dp[i]['P'], dp[i]['S']);\n  }\n\n  return maxScore;\n}",
    "timestamp": "2025-08-13 12:01:11"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def rps_battle(N, K, machine_moves):\n    # Possible hands: R (Rock), P (Paper), S (Scissors)\n    hands = ['R', 'P', 'S']\n    \n    # Points for each hand\n    points = {'R': 1, 'P': 2, 'S': 3}\n    \n    # Winning conditions\n    wins = {\n        'R': 'S',  # Rock beats Scissors\n        'P': 'R',  # Paper beats Rock\n        'S': 'P'   # Scissors beats Paper\n    }\n    \n    # Dynamic programming table\n    dp = [[float('-inf') for _ in range(3)] for _ in range(N)]\n    \n    # Initialize first K rounds with all possible hands\n    for i in range(min(K, N)):\n        for h in range(3):\n            hand = hands[h]\n            if hand == wins.get(machine_moves[i], None):\n                dp[i][h] = points[hand]\n    \n    # Fill DP table\n    for i in range(K, N):\n        for h in range(3):\n            hand = hands[h]\n            for prev_h in range(3):\n                # Cannot repeat hand from (i-K)-th round\n                if h == prev_h:\n                    continue\n                \n                # Compute score\n                score = points[hand] if hand == wins.get(machine_moves[i], None) else 0\n                \n                # Update max score\n                dp[i][h] = max(dp[i][h], dp[i-1][prev_h] + score)\n    \n    # Return maximum score\n    return max(dp[N-1])",
    "timestamp": "2025-08-13 12:01:18"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function maxScore(N, K, machine, R, S, P) {\n    const points = { 'R': P, 'P': S, 'S': R };\n    const beats = { 'R': 'P', 'P': 'S', 'S': 'R' };\n    \n    const dp = Array.from({ length: N }, () => \n        Array.from({ length: 3 }, () => \n            Array(K).fill(-Infinity)\n        )\n    );\n    \n    // Initialize first K rounds\n    for (let h = 0; h < 3; h++) {\n        const hand = ['R', 'P', 'S'][h];\n        dp[0][h][0] = beats[machine[0]] === hand ? points[hand] : 0;\n    }\n    \n    for (let i = 1; i < N; i++) {\n        for (let h = 0; h < 3; h++) {\n            const hand = ['R', 'P', 'S'][h];\n            \n            for (let k = 0; k < K; k++) {\n                for (let prevH = 0; prevH < 3; prevH++) {\n                    if (h === prevH && k > 0) continue;\n                    \n                    let prevScore = dp[i-1][prevH][k > 0 ? k-1 : 0];\n                    if (prevScore !== -Infinity) {\n                        let roundScore = beats[machine[i]] === hand ? points[hand] : 0;\n                        dp[i][h][k] = Math.max(\n                            dp[i][h][k], \n                            prevScore + roundScore\n                        );\n                    }\n                }\n            }\n        }\n    }\n    \n    let maxTotal = -Infinity;\n    for (let h = 0; h < 3; h++) {\n        for (let k = 0; k < K; k++) {\n            maxTotal = Math.max(maxTotal, dp[N-1][h][k]);\n        }\n    }\n    \n    return maxTotal;\n}",
    "timestamp": "2025-08-13 12:01:27"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def solve():\n    import sys\n    N, K = map(int, sys.stdin.readline().split())\n    R, S, P = map(int, sys.stdin.readline().split())\n    T = sys.stdin.readline().strip()\n    \n    score_map = {'r': P, 's': R, 'p': S}\n    total = 0\n    history = []\n    \n    for i in range(N):\n        current = T[i]\n        if i >= K and history[i - K] == current:\n            history.append('x')  # placeholder, cannot use the same move\n        else:\n            total += score_map[current]\n            history.append(current)\n    \n    print(total)\n\nsolve()",
    "timestamp": "2025-08-13 12:01:38"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function solve(N, K, R, S, P, T) {\n    const machineMoves = T.split('');\n    const points = { 'r': R, 's': S, 'p': P };\n    const winHand = { 'r': 'p', 's': 'r', 'p': 's' };\n    let totalScore = 0;\n    const usedHands = [];\n\n    for (let i = 0; i < N; i++) {\n        const machineMove = machineMoves[i];\n        const bestHand = winHand[machineMove];\n        if (i >= K && usedHands[i - K] === bestHand) {\n            usedHands.push(null);\n        } else {\n            totalScore += points[bestHand];\n            usedHands.push(bestHand);\n        }\n    }\n    return totalScore;\n}",
    "timestamp": "2025-08-13 12:01:45"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n\nusing namespace std;\n\n// Function to calculate maximum score\nint maxScore(int N, int K, int R, int S, int P, const string& machineMoves) {\n    vector<int> dp(N, 0);\n    \n    // Map each machine move to the player's best move and the corresponding score\n    for (int i = 0; i < N; ++i) {\n        if (machineMoves[i] == 'r') dp[i] = P; // Rock vs Paper\n        else if (machineMoves[i] == 's') dp[i] = R; // Scissors vs Rock\n        else if (machineMoves[i] == 'p') dp[i] = S; // Paper vs Scissors\n    }\n    \n    // Adjusting the dynamic programming based on restrictions\n    int score = 0;\n    for (int i = 0; i < N; ++i) {\n        if (i >= K && machineMoves[i] == machineMoves[i - K] && dp[i] == dp[i - K]) {\n            dp[i] = 0; // Invalid move due to substitution rules\n        }\n        score += dp[i];\n    }\n\n    return score;\n}\n\nint main() {\n    int N, K, R, S, P;\n    string machineMoves;\n    \n    cin >> N >> K >> R >> S >> P >> machineMoves;\n    \n    int result = maxScore(N, K, R, S, P, machineMoves);\n    cout << result << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 12:06:40"
  }
]