[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nint compare(const char *a, const char *b) {\n    while (*a && *b) {\n        if (isdigit(*a) && isdigit(*b)) {\n            int num_a = 0, num_b = 0;\n            while (isdigit(*a)) {\n                num_a = num_a * 10 + (*a - '0');\n                a++;\n            }\n            while (isdigit(*b)) {\n                num_b = num_b * 10 + (*b - '0');\n                b++;\n            }\n            if (num_a != num_b) {\n                return num_a - num_b;\n            }\n        } else {\n            if (isdigit(*a) && !isdigit(*b)) {\n                return -1;\n            } else if (!isdigit(*a) && isdigit(*b)) {\n                return 1;\n            } else {\n                if (*a != *b) {\n                    return *a - *b;\n                }\n                a++;\n                b++;\n            }\n        }\n    }\n    return *a - *b;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    char filenames[n][101];\n    for (int i = 0; i < n; i++) {\n        scanf(\"%s\", filenames[i]);\n    }\n    char ref[101];\n    scanf(\"%s\", ref);\n    for (int i = 0; i < n; i++) {\n        int cmp = compare(filenames[i], ref);\n        if (cmp < 0) {\n            printf(\"%s < %s\\n\", filenames[i], ref);\n        } else if (cmp > 0) {\n            printf(\"%s > %s\\n\", filenames[i], ref);\n        } else {\n            printf(\"%s == %s\\n\", filenames[i], ref);\n        }\n    }\n    return 0;\n}",
    "timestamp": "2025-08-05 20:57:51"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n#include <sstream>\n\nusing namespace std;\n\nstruct Token {\n    bool isNumber;\n    int numValue;\n    string strValue;\n};\n\nvector<Token> tokenize(const string &s) {\n    vector<Token> tokens;\n    int i = 0;\n    int n = s.size();\n    while (i < n) {\n        if (isdigit(s[i])) {\n            int num = 0;\n            while (i < n && isdigit(s[i])) {\n                num = num * 10 + (s[i] - '0');\n                i++;\n            }\n            tokens.push_back({true, num, \"\"});\n        } else {\n            string str;\n            while (i < n && !isdigit(s[i])) {\n                str += s[i];\n                i++;\n            }\n            tokens.push_back({false, 0, str});\n        }\n    }\n    return tokens;\n}\n\nint compareTokens(const vector<Token> &a, const vector<Token> &b) {\n    int minLen = min(a.size(), b.size());\n    for (int i = 0; i < minLen; ++i) {\n        if (a[i].isNumber && !b[i].isNumber) {\n            return -1;\n        } else if (!a[i].isNumber && b[i].isNumber) {\n            return 1;\n        } else if (a[i].isNumber && b[i].isNumber) {\n            if (a[i].numValue < b[i].numValue) {\n                return -1;\n            } else if (a[i].numValue > b[i].numValue) {\n                return 1;\n            }\n        } else {\n            if (a[i].strValue < b[i].strValue) {\n                return -1;\n            } else if (a[i].strValue > b[i].strValue) {\n                return 1;\n            }\n        }\n    }\n    if (a.size() < b.size()) {\n        return -1;\n    } else if (a.size() > b.size()) {\n        return 1;\n    }\n    return 0;\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<string> filenames(N);\n    for (int i = 0; i < N; ++i) {\n        cin >> filenames[i];\n    }\n    string ref;\n    cin >> ref;\n    \n    auto refTokens = tokenize(ref);\n    \n    for (const auto &filename : filenames) {\n        auto tokens = tokenize(filename);\n        int cmp = compareTokens(tokens, refTokens);\n        if (cmp < 0) {\n            cout << filename << \" < \" << ref << endl;\n        } else if (cmp > 0) {\n            cout << filename << \" > \" << ref << endl;\n        } else {\n            cout << filename << \" == \" << ref << endl;\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 20:58:44"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class FileNameOrdering {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        String reference = scanner.next();\n        String[] fileNames = new String[n];\n        for (int i = 0; i < n; i++) {\n            fileNames[i] = scanner.next();\n        }\n        \n        for (String fileName : fileNames) {\n            int result = compareFileNames(fileName, reference);\n            if (result < 0) {\n                System.out.println(\"-\");\n            } else if (result > 0) {\n                System.out.println(\"+\");\n            } else {\n                System.out.println(\"0\");\n            }\n        }\n    }\n    \n    private static int compareFileNames(String a, String b) {\n        int i = 0, j = 0;\n        while (i < a.length() && j < b.length()) {\n            char c1 = a.charAt(i);\n            char c2 = b.charAt(j);\n            \n            if (Character.isDigit(c1) && Character.isDigit(c2)) {\n                int num1 = 0, num2 = 0;\n                while (i < a.length() && Character.isDigit(a.charAt(i))) {\n                    num1 = num1 * 10 + (a.charAt(i) - '0');\n                    i++;\n                }\n                while (j < b.length() && Character.isDigit(b.charAt(j))) {\n                    num2 = num2 * 10 + (b.charAt(j) - '0');\n                    j++;\n                }\n                if (num1 != num2) {\n                    return Integer.compare(num1, num2);\n                }\n            } else if (Character.isDigit(c1)) {\n                return -1;\n            } else if (Character.isDigit(c2)) {\n                return 1;\n            } else {\n                if (c1 != c2) {\n                    return Character.compare(c1, c2);\n                }\n                i++;\n                j++;\n            }\n        }\n        return Integer.compare(a.length(), b.length());\n    }\n}",
    "timestamp": "2025-08-05 20:59:08"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class FileOrdering {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        scanner.nextLine();\n        \n        String[] files = new String[n];\n        for (int i = 0; i < n; i++) {\n            files[i] = scanner.nextLine();\n        }\n        \n        String reference = scanner.nextLine();\n        \n        Arrays.sort(files, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return compareFiles(s1, s2);\n            }\n        });\n        \n        for (String file : files) {\n            int comparison = compareFiles(file, reference);\n            if (comparison < 0) {\n                System.out.println(file + \" BEFORE\");\n            } else if (comparison > 0) {\n                System.out.println(file + \" AFTER\");\n            }\n        }\n        \n        scanner.close();\n    }\n    \n    private static int compareFiles(String s1, String s2) {\n        int i = 0, j = 0;\n        \n        while (i < s1.length() && j < s2.length()) {\n            boolean isDigit1 = Character.isDigit(s1.charAt(i));\n            boolean isDigit2 = Character.isDigit(s2.charAt(j));\n            \n            if (isDigit1 && isDigit2) {\n                long num1 = 0, num2 = 0;\n                while (i < s1.length() && Character.isDigit(s1.charAt(i))) {\n                    num1 = num1 * 10 + (s1.charAt(i) - '0');\n                    i++;\n                }\n                while (j < s2.length() && Character.isDigit(s2.charAt(j))) {\n                    num2 = num2 * 10 + (s2.charAt(j) - '0');\n                    j++;\n                }\n                \n                if (num1 != num2) {\n                    return Long.compare(num1, num2);\n                }\n            } else if (isDigit1) {\n                return -1;\n            } else if (isDigit2) {\n                return 1;\n            } else {\n                if (s1.charAt(i) != s2.charAt(j)) {\n                    return Character.compare(s1.charAt(i), s2.charAt(j));\n                }\n                i++;\n                j++;\n            }\n        }\n        \n        if (i < s1.length()) return 1;\n        if (j < s2.length()) return -1;\n        return 0;\n    }\n}",
    "timestamp": "2025-08-05 20:59:17"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_FILENAME_LENGTH 100\n\ntypedef enum {\n    NUMBER_ITEM,\n    LETTER_ITEM\n} ItemType;\n\ntypedef struct {\n    char* str;\n    ItemType type;\n    int numValue;\n} FileNameItem;\n\nint extractItems(char* filename, FileNameItem** items, int* itemCount) {\n    *itemCount = 0;\n    *items = malloc(strlen(filename) * sizeof(FileNameItem));\n    \n    int i = 0, num = 0;\n    while (filename[i]) {\n        if (isdigit(filename[i])) {\n            if ((*itemCount) > 0 && (*items)[*itemCount - 1].type == NUMBER_ITEM) {\n                (*items)[*itemCount - 1].numValue = (*items)[*itemCount - 1].numValue * 10 + (filename[i] - '0');\n            } else {\n                (*items)[*itemCount].type = NUMBER_ITEM;\n                (*items)[*itemCount].numValue = filename[i] - '0';\n                (*items)[*itemCount].str = malloc(2);\n                (*items)[*itemCount].str[0] = filename[i];\n                (*items)[*itemCount].str[1] = '\\0';\n                (*itemCount)++;\n            }\n        } else {\n            (*items)[*itemCount].type = LETTER_ITEM;\n            (*items)[*itemCount].str = malloc(2);\n            (*items)[*itemCount].str[0] = filename[i];\n            (*items)[*itemCount].str[1] = '\\0';\n            (*itemCount)++;\n        }\n        i++;\n    }\n    return 1;\n}\n\nint compareItems(FileNameItem* items1, int count1, FileNameItem* items2, int count2) {\n    int i = 0;\n    while (i < count1 && i < count2) {\n        if (items1[i].type != items2[i].type) {\n            return items1[i].type == NUMBER_ITEM ? -1 : 1;\n        }\n        \n        if (items1[i].type == NUMBER_ITEM) {\n            if (items1[i].numValue != items2[i].numValue) {\n                return items1[i].numValue - items2[i].numValue;\n            }\n        } else {\n            int cmp = strcmp(items1[i].str, items2[i].str);\n            if (cmp != 0) return cmp;\n        }\n        i++;\n    }\n    \n    return count1 - count2;\n}\n\nvoid freeItems(FileNameItem* items, int count) {\n    for (int i = 0; i < count; i++) {\n        free(items[i].str);\n    }\n    free(items);\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    char reference[MAX_FILENAME_LENGTH];\n    scanf(\"%s\", reference);\n    \n    FileNameItem* referenceItems;\n    int referenceItemCount;\n    extractItems(reference, &referenceItems, &referenceItemCount);\n    \n    for (int i = 0; i < n; i++) {\n        char filename[MAX_FILENAME_LENGTH];\n        scanf(\"%s\", filename);\n        \n        FileNameItem* fileItems;\n        int fileItemCount;\n        extractItems(filename, &fileItems, &fileItemCount);\n        \n        int result = compareItems(fileItems, fileItemCount, referenceItems, referenceItemCount);\n        \n        if (result < 0) {\n            printf(\"%s BEFORE %s\\n\", filename, reference);\n        } else if (result > 0) {\n            printf(\"%s AFTER %s\\n\", filename, reference);\n        } else {\n            printf(\"%s SAME %s\\n\", filename, reference);\n        }\n        \n        freeItems(fileItems, fileItemCount);\n    }\n    \n    freeItems(referenceItems, referenceItemCount);\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 20:59:30"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nbool compareFileNames(const std::string& a, const std::string& b) {\n    size_t i = 0, j = 0;\n    while (i < a.length() && j < b.length()) {\n        // Extract number sequence from a\n        std::string numA, numB;\n        while (i < a.length() && isdigit(a[i])) {\n            numA += a[i++];\n        }\n        while (j < b.length() && isdigit(b[j])) {\n            numB += b[j++];\n        }\n        \n        // Compare number sequences if both have numbers\n        if (!numA.empty() && !numB.empty()) {\n            long long na = std::stoll(numA);\n            long long nb = std::stoll(numB);\n            if (na != nb) return na < nb;\n        }\n        // Number sequences take precedence\n        else if (!numA.empty()) return true;\n        else if (!numB.empty()) return false;\n        \n        // If current characters are different, compare ASCII\n        if (a[i] != b[j]) return a[i] < b[j];\n        \n        i++;\n        j++;\n    }\n    \n    // Shorter string comes first if identical so far\n    return a.length() < b.length();\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> fileNames(n);\n    \n    for (int i = 0; i < n; i++) {\n        std::cin >> fileNames[i];\n    }\n    \n    std::string reference;\n    std::cin >> reference;\n    \n    for (const auto& fileName : fileNames) {\n        if (compareFileNames(fileName, reference)) {\n            std::cout << fileName << \" BEFORE \" << reference << std::endl;\n        } else {\n            std::cout << fileName << \" AFTER \" << reference << std::endl;\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 20:59:38"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def file_key(file_name):\n    import re\n    parts = re.split('(\\d+)', file_name)\n    key = []\n    for part in parts:\n        if part.isdigit():\n            key.append((0, int(part)))\n        else:\n            key.append((1, part))\n    return key\n\ndef compare_files(files, reference_file):\n    ref_key = file_key(reference_file)\n    comparisons = []\n    for file_name in files:\n        file_key_name = file_key(file_name)\n        if file_key_name < ref_key:\n            comparisons.append(\"before\")\n        else:\n            comparisons.append(\"after\")\n    return comparisons\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    count = int(data[0])\n    files = data[1:1 + count]\n    reference_file = data[1 + count]\n    \n    results = compare_files(files, reference_file)\n    for result in results:\n        print(result)",
    "timestamp": "2025-08-13 04:18:29"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\npublic class FileNameOrdering {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int count = Integer.parseInt(scanner.nextLine());\n        List<String> fileNames = new ArrayList<>();\n        \n        for (int i = 0; i < count; i++) {\n            fileNames.add(scanner.nextLine());\n        }\n        \n        String referenceFileName = scanner.nextLine();\n        \n        Collections.sort(fileNames, new Comparator<String>() {\n            @Override\n            public int compare(String a, String b) {\n                return customCompare(a, b);\n            }\n        });\n        \n        for (String fileName : fileNames) {\n            if (customCompare(fileName, referenceFileName) < 0) {\n                System.out.println(\"before\");\n            } else if (customCompare(fileName, referenceFileName) > 0) {\n                System.out.println(\"after\");\n            } else {\n                System.out.println(\"equal\");\n            }\n        }\n    }\n\n    private static int customCompare(String a, String b) {\n        int i = 0, j = 0, aLength = a.length(), bLength = b.length();\n        \n        while (i < aLength && j < bLength) {\n            char aChar = a.charAt(i);\n            char bChar = b.charAt(j);\n            \n            if (Character.isDigit(aChar) && Character.isDigit(bChar)) {\n                int aStart = i;\n                int bStart = j;\n                \n                while (i < aLength && Character.isDigit(a.charAt(i))) i++;\n                while (j < bLength && Character.isDigit(b.charAt(j))) j++;\n                \n                int aNum = Integer.parseInt(a.substring(aStart, i));\n                int bNum = Integer.parseInt(b.substring(bStart, j));\n                \n                if (aNum != bNum) {\n                    return Integer.compare(aNum, bNum);\n                }\n            } else if (Character.isDigit(aChar)) {\n                return -1;\n            } else if (Character.isDigit(bChar)) {\n                return 1;\n            } else {\n                if (aChar != bChar) {\n                    return aChar - bChar;\n                }\n                i++;\n                j++;\n            }\n        }\n        \n        if (i < aLength) return 1;\n        if (j < bLength) return -1;\n        return 0;\n    }\n}",
    "timestamp": "2025-08-13 04:18:37"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <string.h>\n\n#define MAX_FILENAME_LENGTH 100\n\nint compareFileNames(const void *a, const void *b) {\n    const char *strA = *(const char **)a;\n    const char *strB = *(const char **)b;\n\n    // Determine type of each string (number or letter)\n    int typeA = isdigit(*strA) ? 0 : 1;\n    int typeB = isdigit(*strB) ? 0 : 1;\n\n    // Different types: numbers come first\n    if (typeA != typeB) {\n        return typeA - typeB;\n    }\n\n    if (typeA == 0) { // Both are numbers\n        long numA = strtol(strA, NULL, 10);\n        long numB = strtol(strB, NULL, 10);\n        return (numA > numB) - (numA < numB);\n    } else { // Both are letters\n        return strcmp(strA, strB);\n    }\n}\n\nint main() {\n    int n;\n    char reference[MAX_FILENAME_LENGTH];\n    \n    // Read number of file names\n    scanf(\"%d\", &n);\n    \n    char **fileNames = (char **)malloc(n * sizeof(char *));\n    \n    // Read file names\n    for (int i = 0; i < n; i++) {\n        fileNames[i] = (char *)malloc(MAX_FILENAME_LENGTH * sizeof(char));\n        scanf(\"%s\", fileNames[i]);\n    }\n    \n    // Read reference file name\n    scanf(\"%s\", reference);\n    \n    for (int i = 0; i < n; i++) {\n        const char *strA = fileNames[i];\n        const char *strB = reference;\n        \n        int result = compareFileNames(&strA, &strB);\n        \n        printf(\"%s %s\\n\", fileNames[i], result < 0 ? \"before\" : \"after\");\n    }\n    \n    for (int i = 0; i < n; i++) {\n        free(fileNames[i]);\n    }\n    free(fileNames);\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 04:18:43"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def split_name(filename):\n    parts = []\n    current = ''\n    current_type = None\n    \n    for char in filename:\n        if char.isdigit():\n            if current_type != 'digit':\n                if current:\n                    parts.append(current)\n                current = char\n                current_type = 'digit'\n            else:\n                current += char\n        else:\n            if current_type != 'letter':\n                if current:\n                    parts.append(current)\n                current = char\n                current_type = 'letter'\n            else:\n                current += char\n    \n    if current:\n        parts.append(current)\n    \n    return parts\n\ndef compare_parts(a, b):\n    if a.isdigit() and b.isdigit():\n        return int(a) - int(b)\n    elif a.isdigit():\n        return -1\n    elif b.isdigit():\n        return 1\n    else:\n        return (a > b) - (a < b)\n\ndef compare_filenames(filename1, filename2):\n    parts1 = split_name(filename1)\n    parts2 = split_name(filename2)\n    \n    for p1, p2 in zip(parts1, parts2):\n        comp = compare_parts(p1, p2)\n        if comp != 0:\n            return comp\n    \n    return len(parts1) - len(parts2)\n\ndef main():\n    n = int(input())\n    filenames = []\n    for _ in range(n):\n        filenames.append(input())\n    \n    reference = input()\n    \n    for filename in filenames:\n        result = compare_filenames(filename, reference)\n        if result < 0:\n            print(f\"{filename} BEFORE {reference}\")\n        elif result > 0:\n            print(f\"{filename} AFTER {reference}\")\n        else:\n            print(f\"{filename} SAME {reference}\")\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 04:18:56"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def compare_filenames(a, b):\n    i = j = 0\n    len_a = len(a)\n    len_b = len(b)\n    \n    while i < len_a and j < len_b:\n        a_char = a[i]\n        b_char = b[j]\n        \n        a_is_digit = a_char.isdigit()\n        b_is_digit = b_char.isdigit()\n        \n        if a_is_digit and b_is_digit:\n            a_num = 0\n            while i < len_a and a[i].isdigit():\n                a_num = a_num * 10 + int(a[i])\n                i += 1\n            b_num = 0\n            while j < len_b and b[j].isdigit():\n                b_num = b_num * 10 + int(b[j])\n                j += 1\n            if a_num != b_num:\n                return a_num - b_num\n        else:\n            if a_is_digit:\n                return -1\n            if b_is_digit:\n                return 1\n            if a_char != b_char:\n                return ord(a_char) - ord(b_char)\n            i += 1\n            j += 1\n    \n    return (len_a - i) - (len_b - j)\n\nn = int(input())\nfilenames = [input().strip() for _ in range(n)]\nref = input().strip()\n\nfor name in filenames:\n    cmp = compare_filenames(name, ref)\n    if cmp < 0:\n        print(f\"{name} < {ref}\")\n    elif cmp > 0:\n        print(f\"{name} > {ref}\")\n    else:\n        print(f\"{name} == {ref}\")",
    "timestamp": "2025-08-13 04:19:15"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cctype>\n\nusing namespace std;\n\nbool compareFilenames(const string &a, const string &b) {\n    size_t i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (isdigit(a[i]) && isdigit(b[j])) {\n            long long num1 = 0, num2 = 0;\n            while (i < a.size() && isdigit(a[i])) {\n                num1 = num1 * 10 + (a[i] - '0');\n                ++i;\n            }\n            while (j < b.size() && isdigit(b[j])) {\n                num2 = num2 * 10 + (b[j] - '0');\n                ++j;\n            }\n            if (num1 != num2) {\n                return num1 < num2;\n            }\n        } else if (isdigit(a[i])) {\n            return true;\n        } else if (isdigit(b[j])) {\n            return false;\n        } else if (a[i] != b[j]) {\n            return a[i] < b[j];\n        } else {\n            ++i;\n            ++j;\n        }\n    }\n    return a.size() < b.size();\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<string> fileNames(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> fileNames[i];\n    }\n    string refName;\n    cin >> refName;\n\n    for (const string &fileName : fileNames) {\n        if (compareFilenames(fileName, refName)) {\n            cout << \"BEFORE\" << endl;\n        } else {\n            cout << \"AFTER\" << endl;\n        }\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:18:22"
  }
]