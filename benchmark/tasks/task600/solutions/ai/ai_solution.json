[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\nint main() {\n    double c1x, c1y, c1r, c2x, c2y, c2r;\n    scanf(\"%lf %lf %lf %lf %lf %lf\", &c1x, &c1y, &c1r, &c2x, &c2y, &c2r);\n\n    double dx = c2x - c1x;\n    double dy = c2y - c1y;\n    double d = sqrt(dx*dx + dy*dy);\n\n    if (d > c1r + c2r || d < fabs(c1r - c2r)) {\n        printf(\"No intersection\\n\");\n        return 0;\n    }\n\n    double a = (c1r*c1r - c2r*c2r + d*d) / (2*d);\n    double h = sqrt(c1r*c1r - a*a);\n\n    double x0 = c1x + a*dx/d;\n    double y0 = c1y + a*dy/d;\n\n    double x1 = x0 + h*dy/d;\n    double y1 = y0 - h*dx/d;\n\n    double x2 = x0 - h*dy/d;\n    double y2 = y0 + h*dx/d;\n\n    if (x1 > x2 || (x1 == x2 && y1 > y2)) {\n        double tx = x1, ty = y1;\n        x1 = x2; y1 = y2;\n        x2 = tx; y2 = ty;\n    }\n\n    if (d == c1r + c2r) {\n        printf(\"%.6f %.6f\\n\", x1, y1);\n    } else {\n        printf(\"%.6f %.6f\\n%.6f %.6f\\n\", x1, y1, x2, y2);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:16:54"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <math.h>\n\ntypedef struct {\n    double x, y;\n} Point;\n\nvoid swap(Point *a, Point *b) {\n    Point temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nvoid sort_points(Point *p1, Point *p2) {\n    if (p1->x > p2->x || (p1->x == p2->x && p1->y > p2->y)) {\n        swap(p1, p2);\n    }\n}\n\nint circle_intersection(double c1x, double c1y, double c1r, double c2x, double c2y, double c2r, Point *p1, Point *p2) {\n    double dx = c2x - c1x;\n    double dy = c2y - c1y;\n    double d = sqrt(dx * dx + dy * dy);\n    \n    if (d > c1r + c2r || d < fabs(c1r - c2r)) {\n        return 0;\n    }\n    \n    double a = (c1r * c1r - c2r * c2r + d * d) / (2 * d);\n    double h = sqrt(c1r * c1r - a * a);\n    \n    double cx = c1x + (dx * a) / d;\n    double cy = c1y + (dy * a) / d;\n    \n    if (h == 0) {\n        p1->x = cx;\n        p1->y = cy;\n        *p2 = *p1;\n        return 1;\n    }\n    \n    double px = cx + (-dy * h) / d;\n    double py = cy + (dx * h) / d;\n    double qx = cx - (-dy * h) / d;\n    double qy = cy - (dx * h) / d;\n    \n    p1->x = px;\n    p1->y = py;\n    p2->x = qx;\n    p2->y = qy;\n    \n    sort_points(p1, p2);\n    \n    return 2;\n}\n\nint main() {\n    double c1x, c1y, c1r, c2x, c2y, c2r;\n    scanf(\"%lf %lf %lf\", &c1x, &c1y, &c1r);\n    scanf(\"%lf %lf %lf\", &c2x, &c2y, &c2r);\n    \n    Point p1, p2;\n    int count = circle_intersection(c1x, c1y, c1r, c2x, c2y, c2r, &p1, &p2);\n    \n    if (count == 0) {\n        return 0;\n    } else if (count == 1) {\n        printf(\"%.6lf %.6lf\\n%.6lf %.6lf\\n\", p1.x, p1.y, p1.x, p1.y);\n    } else {\n        printf(\"%.6lf %.6lf\\n%.6lf %.6lf\\n\", p1.x, p1.y, p2.x, p2.y);\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:17:26"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <iomanip>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Point {\n    double x, y;\n    bool operator<(const Point& other) const {\n        if (x != other.x) return x < other.x;\n        return y < other.y;\n    }\n};\n\nvoid findIntersection(double c1x, double c1y, double c1r, double c2x, double c2y, double c2r) {\n    double dx = c2x - c1x;\n    double dy = c2y - c1y;\n    double d = sqrt(dx * dx + dy * dy);\n    \n    if (d > c1r + c2r || d < fabs(c1r - c2r)) {\n        return;\n    }\n    \n    double a = (c1r * c1r - c2r * c2r + d * d) / (2 * d);\n    double h = sqrt(c1r * c1r - a * a);\n    \n    double cx = c1x + (dx * a) / d;\n    double cy = c1y + (dy * a) / d;\n    \n    vector<Point> points;\n    \n    if (h == 0) {\n        points.push_back({cx, cy});\n        points.push_back({cx, cy});\n    } else {\n        double px1 = cx + ( -dy * h ) / d;\n        double py1 = cy + ( dx * h ) / d;\n        double px2 = cx - ( -dy * h ) / d;\n        double py2 = cy - ( dx * h ) / d;\n        points.push_back({px1, py1});\n        points.push_back({px2, py2});\n    }\n    \n    sort(points.begin(), points.end());\n    \n    cout << fixed << setprecision(6);\n    for (const auto& p : points) {\n        cout << p.x << \" \" << p.y << \" \";\n    }\n    cout << endl;\n}\n\nint main() {\n    double c1x, c1y, c1r, c2x, c2y, c2r;\n    cin >> c1x >> c1y >> c1r;\n    cin >> c2x >> c2y >> c2r;\n    \n    findIntersection(c1x, c1y, c1r, c2x, c2y, c2r);\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:17:49"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class CircleIntersection {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double c1x = scanner.nextDouble();\n        double c1y = scanner.nextDouble();\n        double c1r = scanner.nextDouble();\n        double c2x = scanner.nextDouble();\n        double c2y = scanner.nextDouble();\n        double c2r = scanner.nextDouble();\n\n        double dx = c2x - c1x;\n        double dy = c2y - c1y;\n        double d = Math.sqrt(dx * dx + dy * dy);\n\n        if (d > c1r + c2r || d < Math.abs(c1r - c2r)) {\n            System.out.println(\"No intersection\");\n            return;\n        }\n\n        double a = (c1r * c1r - c2r * c2r + d * d) / (2 * d);\n        double h = Math.sqrt(c1r * c1r - a * a);\n\n        double x2 = c1x + a * dx / d;\n        double y2 = c1y + a * dy / d;\n\n        double x3a = x2 + h * dy / d;\n        double y3a = y2 - h * dx / d;\n        double x3b = x2 - h * dy / d;\n        double y3b = y2 + h * dx / d;\n\n        if (Math.abs(d - (c1r + c2r)) < 1e-9 || Math.abs(d - Math.abs(c1r - c2r)) < 1e-9) {\n            System.out.printf(\"%.6f %.6f\\n\", x3a, y3a);\n            System.out.printf(\"%.6f %.6f\\n\", x3a, y3a);\n        } else {\n            if (x3a < x3b || (Math.abs(x3a - x3b) < 1e-9 && y3a < y3b)) {\n                System.out.printf(\"%.6f %.6f\\n\", x3a, y3a);\n                System.out.printf(\"%.6f %.6f\\n\", x3b, y3b);\n            } else {\n                System.out.printf(\"%.6f %.6f\\n\", x3b, y3b);\n                System.out.printf(\"%.6f %.6f\\n\", x3a, y3a);\n            }\n        }\n    }\n}",
    "timestamp": "2025-08-05 22:18:12"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\nimport java.math.*;\n\npublic class CircleIntersection {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        double c1x = scanner.nextDouble();\n        double c1y = scanner.nextDouble();\n        double c1r = scanner.nextDouble();\n        \n        double c2x = scanner.nextDouble();\n        double c2y = scanner.nextDouble();\n        double c2r = scanner.nextDouble();\n        \n        double d = Math.sqrt(Math.pow(c2x - c1x, 2) + Math.pow(c2y - c1y, 2));\n        \n        if (d > c1r + c2r || d < Math.abs(c1r - c2r)) {\n            System.out.println(\"No intersection\");\n            return;\n        }\n        \n        double a = (c1r * c1r - c2r * c2r + d * d) / (2 * d);\n        double h = Math.sqrt(c1r * c1r - a * a);\n        \n        double x0 = c1x + a * (c2x - c1x) / d;\n        double y0 = c1y + a * (c2y - c1y) / d;\n        \n        double x1 = x0 + h * (c2y - c1y) / d;\n        double y1 = y0 - h * (c2x - c1x) / d;\n        \n        double x2 = x0 - h * (c2y - c1y) / d;\n        double y2 = y0 + h * (c2x - c1x) / d;\n        \n        if (x1 < x2 || (x1 == x2 && y1 < y2)) {\n            System.out.printf(\"%.6f %.6f %.6f %.6f\\n\", x1, y1, x2, y2);\n        } else {\n            System.out.printf(\"%.6f %.6f %.6f %.6f\\n\", x2, y2, x1, y1);\n        }\n    }\n}",
    "timestamp": "2025-08-05 22:18:20"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <cmath>\n#include <iomanip>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    double c1x, c1y, c1r, c2x, c2y, c2r;\n    cin >> c1x >> c1y >> c1r >> c2x >> c2y >> c2r;\n\n    double d = sqrt(pow(c2x - c1x, 2) + pow(c2y - c1y, 2));\n\n    if (d > c1r + c2r || d < abs(c1r - c2r)) {\n        cout << \"No intersection\" << endl;\n        return 0;\n    }\n\n    double a = (pow(c1r, 2) - pow(c2r, 2) + pow(d, 2)) / (2 * d);\n    double h = sqrt(pow(c1r, 2) - pow(a, 2));\n\n    double x0 = c1x + a * (c2x - c1x) / d;\n    double y0 = c1y + a * (c2y - c1y) / d;\n\n    double x1 = x0 + h * (c2y - c1y) / d;\n    double y1 = y0 - h * (c2x - c1x) / d;\n\n    double x2 = x0 - h * (c2y - c1y) / d;\n    double y2 = y0 + h * (c2x - c1x) / d;\n\n    cout << fixed << setprecision(6);\n\n    if (x1 < x2 || (x1 == x2 && y1 < y2)) {\n        cout << x1 << \" \" << y1 << \" \" << x2 << \" \" << y2 << endl;\n    } else {\n        cout << x2 << \" \" << y2 << \" \" << x1 << \" \" << y1 << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:18:27"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import math\n\ndef find_circle_intersections(circle1, circle2):\n    x1, y1, r1 = map(float, circle1.split())\n    x2, y2, r2 = map(float, circle2.split())\n\n    dx = x2 - x1\n    dy = y2 - y1\n    d = math.sqrt(dx*dx + dy*dy)\n\n    if d > r1 + r2 or d < abs(r1 - r2):\n        return  # No intersection.\n\n    a = (r1*r1 - r2*r2 + d*d) / (2.0 * d)\n    h = math.sqrt(r1*r1 - a*a)\n\n    xm = x1 + a * dx / d\n    ym = y1 + a * dy / d\n\n    xs1 = xm + h * dy / d\n    ys1 = ym - h * dx / d\n\n    xs2 = xm - h * dy / d\n    ys2 = ym + h * dx / d\n\n    points = [(xs1, ys1), (xs2, ys2)]\n    points = sorted(points)\n\n    for point in points:\n        print(f\"{point[0]:.6f} {point[1]:.6f}\")\n\ncircle1 = input().strip()\ncircle2 = input().strip()\nfind_circle_intersections(circle1, circle2)",
    "timestamp": "2025-08-13 09:48:56"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Scanner;\n\npublic class CircleIntersection {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        double c1x = scanner.nextDouble();\n        double c1y = scanner.nextDouble();\n        double c1r = scanner.nextDouble();\n        double c2x = scanner.nextDouble();\n        double c2y = scanner.nextDouble();\n        double c2r = scanner.nextDouble();\n\n        double dx = c2x - c1x;\n        double dy = c2y - c1y;\n        double d = Math.sqrt(dx * dx + dy * dy);\n\n        if (d > c1r + c2r || d < Math.abs(c1r - c2r) || (d == 0 && c1r == c2r)) {\n            return;\n        }\n\n        double a = (c1r * c1r - c2r * c2r + d * d) / (2 * d);\n        double h = Math.sqrt(c1r * c1r - a * a);\n\n        double xm = c1x + a * dx / d;\n        double ym = c1y + a * dy / d;\n\n        double xs1 = xm + h * dy / d;\n        double ys1 = ym - h * dx / d;\n        double xs2 = xm - h * dy / d;\n        double ys2 = ym + h * dx / d;\n\n        if (xs1 > xs2 || (xs1 == xs2 && ys1 > ys2)) {\n            double tempX = xs1;\n            double tempY = ys1;\n            xs1 = xs2;\n            ys1 = ys2;\n            xs2 = tempX;\n            ys2 = tempY;\n        }\n\n        System.out.printf(\"%.6f %.6f\\n\", xs1, ys1);\n        System.out.printf(\"%.6f %.6f\\n\", xs2, ys2);\n    }\n}",
    "timestamp": "2025-08-13 09:49:01"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <math.h>\n\nint main() {\n    double x1, y1, r1, x2, y2, r2;\n    scanf(\"%lf %lf %lf %lf %lf %lf\", &x1, &y1, &r1, &x2, &y2, &r2);\n    \n    double d = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    \n    if (d > r1 + r2 || d < fabs(r1 - r2)) {\n        return 0;\n    }\n\n    double a = (r1 * r1 - r2 * r2 + d * d) / (2 * d);\n    double h = sqrt(r1 * r1 - a * a);\n\n    double xc = x1 + a * (x2 - x1) / d;\n    double yc = y1 + a * (y2 - y1) / d;\n\n    double x_inter1 = xc + h * (y2 - y1) / d;\n    double y_inter1 = yc - h * (x2 - x1) / d;\n    double x_inter2 = xc - h * (y2 - y1) / d;\n    double y_inter2 = yc + h * (x2 - x1) / d;\n\n    if (fabs(d - (r1 + r2)) < 0.000001 || fabs(d - fabs(r1 - r2)) < 0.000001) {\n        printf(\"%.6lf %.6lf\\n%.6lf %.6lf\\n\", x_inter1, y_inter1, x_inter1, y_inter1);\n    } else {\n        if (x_inter1 > x_inter2 || (fabs(x_inter1 - x_inter2) < 0.000001 && y_inter1 > y_inter2)) {\n            printf(\"%.6lf %.6lf\\n%.6lf %.6lf\\n\", x_inter2, y_inter2, x_inter1, y_inter1);\n        } else {\n            printf(\"%.6lf %.6lf\\n%.6lf %.6lf\\n\", x_inter1, y_inter1, x_inter2, y_inter2);\n        }\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 09:49:05"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import math\n\ndef solve_circles_intersection(c1x, c1y, c1r, c2x, c2y, c2r):\n    # Distance between circle centers\n    d = math.sqrt((c2x - c1x)**2 + (c2y - c1y)**2)\n    \n    # No intersection or identical circles\n    if d > c1r + c2r or d < abs(c1r - c2r):\n        return None\n    \n    # Identical circles\n    if d == 0 and c1r == c2r:\n        return None\n    \n    # One circle inside another\n    if d == 0:\n        return None\n    \n    # Circles intersect at one point (tangent)\n    if d == c1r + c2r or d == abs(c1r - c2r):\n        # Intersection point calculation\n        a = (c1r**2 - c2r**2 + d**2) / (2 * d)\n        x0 = c1x + a * (c2x - c1x) / d\n        y0 = c1y + a * (c2y - c1y) / d\n        return [(x0, y0), (x0, y0)]\n    \n    # Two intersection points\n    a = (c1r**2 - c2r**2 + d**2) / (2 * d)\n    h = math.sqrt(c1r**2 - a**2)\n    \n    x0 = c1x + a * (c2x - c1x) / d\n    y0 = c1y + a * (c2y - c1y) / d\n    \n    x1 = x0 + h * (c2y - c1y) / d\n    y1 = y0 - h * (c2x - c1x) / d\n    \n    x2 = x0 - h * (c2y - c1y) / d\n    y2 = y0 + h * (c2x - c1x) / d\n    \n    # Sort points\n    points = [(x1, y1), (x2, y2)]\n    points.sort(key=lambda p: (p[0], p[1]))\n    \n    return points\n\n# Read input\nc1x, c1y, c1r = map(float, input().split())\nc2x, c2y, c2r = map(float, input().split())\n\n# Solve and print result\nresult = solve_circles_intersection(c1x, c1y, c1r, c2x, c2y, c2r)\n\nif result is None:\n    print(\"No intersection\")\nelse:\n    for x, y in result:\n        print(f\"{x:.6f} {y:.6f}\")",
    "timestamp": "2025-08-13 09:49:19"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import math\n\ndef find_intersection_points(c1x, c1y, c1r, c2x, c2y, c2r):\n    dx = c2x - c1x\n    dy = c2y - c1y\n    d = math.hypot(dx, dy)\n    \n    if d > c1r + c2r or d < abs(c1r - c2r):\n        return []\n    if d == 0 and c1r == c2r:\n        return []\n    \n    a = (c1r**2 - c2r**2 + d**2) / (2 * d)\n    h = math.sqrt(c1r**2 - a**2)\n    \n    x2 = c1x + (a * dx) / d\n    y2 = c1y + (a * dy) / d\n    \n    x3_1 = x2 + (h * dy) / d\n    y3_1 = y2 - (h * dx) / d\n    x3_2 = x2 - (h * dy) / d\n    y3_2 = y2 + (h * dx) / d\n    \n    points = [(x3_1, y3_1), (x3_2, y3_2)]\n    points = list(set(points))  # Remove duplicates if any\n    \n    if len(points) == 1:\n        points.append(points[0])\n    \n    points.sort()\n    return points\n\nc1x, c1y, c1r = map(float, input().split())\nc2x, c2y, c2r = map(float, input().split())\n\npoints = find_intersection_points(c1x, c1y, c1r, c2x, c2y, c2r)\n\nif not points:\n    print()\nelse:\n    for point in points:\n        print(\"{0:.6f} {1:.6f}\".format(point[0], point[1]))",
    "timestamp": "2025-08-13 09:49:37"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    double c1x, c1y, c1r, c2x, c2y, c2r;\n    cin >> c1x >> c1y >> c1r >> c2x >> c2y >> c2r;\n\n    //calculate the distance between the centers\n    double d = sqrt((c2x - c1x) * (c2x - c1x) + (c2y - c1y) * (c2y - c1y));\n\n    if (d > c1r + c2r || d < fabs(c1r - c2r) || d == 0 && c1r == c2r) {\n        return 0; // No intersection or circles coincide\n    }\n\n    double a = (c1r * c1r - c2r * c2r + d * d) / (2 * d);\n    double h = sqrt(c1r * c1r - a * a);\n\n    double x2 = c1x + a * (c2x - c1x) / d;\n    double y2 = c1y + a * (c2y - c1y) / d;\n\n    double x3_1 = x2 + h * (c2y - c1y) / d;\n    double y3_1 = y2 - h * (c2x - c1x) / d;\n    double x3_2 = x2 - h * (c2y - c1y) / d;\n    double y3_2 = y2 + h * (c2x - c1x) / d;\n\n    if (fabs(x3_1 - x3_2) < 0.000001 && fabs(y3_1 - y3_2) < 0.000001) {\n        cout << fixed << setprecision(6) << min(x3_1, x3_2) << \" \" << min(y3_1, y3_2) << endl;\n        cout << fixed << setprecision(6) << min(x3_1, x3_2) << \" \" << min(y3_1, y3_2) << endl;\n    } else {\n        if (x3_1 > x3_2 || (fabs(x3_1 - x3_2) < 0.000001 && y3_1 > y3_2)) {\n            swap(x3_1, x3_2);\n            swap(y3_1, y3_2);\n        }\n        cout << fixed << setprecision(6) << x3_1 << \" \" << y3_1 << endl;\n        cout << fixed << setprecision(6) << x3_2 << \" \" << y3_2 << endl;\n    }\n    return 0;\n}",
    "timestamp": "2025-08-13 11:54:58"
  }
]