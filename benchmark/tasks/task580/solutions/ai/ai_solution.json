[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_CARDS 100\n\ntypedef struct {\n    char suit;\n    int number;\n} Card;\n\nvoid swap(Card *a, Card *b) {\n    Card temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint is_stable_sort(Card *original, Card *sorted, int n) {\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (original[i].number == original[j].number) {\n                for (int k = 0; k < n; k++) {\n                    for (int l = k + 1; l < n; l++) {\n                        if (sorted[k].number == sorted[l].number &&\n                            sorted[k].suit == original[i].suit &&\n                            sorted[l].suit == original[j].suit &&\n                            k > l) {\n                            return 0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return 1;\n}\n\nvoid bubble_sort(Card *cards, int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (cards[j].number > cards[j + 1].number) {\n                swap(&cards[j], &cards[j + 1]);\n            }\n        }\n    }\n}\n\nint main() {\n    int n;\n    Card original[MAX_CARDS];\n    Card sorted[MAX_CARDS];\n\n    scanf(\"%d\", &n);\n\n    for (int i = 0; i < n; i++) {\n        scanf(\" %c%d\", &original[i].suit, &original[i].number);\n        sorted[i] = original[i];\n    }\n\n    bubble_sort(sorted, n);\n\n    printf(\"%s\\n\", is_stable_sort(original, sorted, n) ? \"Stable\" : \"Not stable\");\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%c %d\\n\", sorted[i].suit, sorted[i].number);\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:12:10"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    char suit;\n    int num;\n} Card;\n\nvoid bubbleSort(Card *deck, int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = n - 1; j > i; j--) {\n            if (deck[j].num < deck[j - 1].num) {\n                Card temp = deck[j];\n                deck[j] = deck[j - 1];\n                deck[j - 1] = temp;\n            }\n        }\n    }\n}\n\nvoid selectionSort(Card *deck, int n) {\n    for (int i = 0; i < n - 1; i++) {\n        int min_idx = i;\n        for (int j = i + 1; j < n; j++) {\n            if (deck[j].num < deck[min_idx].num) {\n                min_idx = j;\n            }\n        }\n        if (min_idx != i) {\n            Card temp = deck[i];\n            deck[i] = deck[min_idx];\n            deck[min_idx] = temp;\n        }\n    }\n}\n\nint isStable(Card *original, Card *sorted, int n) {\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (original[i].num == original[j].num) {\n                int pos_i = -1, pos_j = -1;\n                for (int k = 0; k < n; k++) {\n                    if (sorted[k].num == original[i].num && sorted[k].suit == original[i].suit) {\n                        pos_i = k;\n                    }\n                    if (sorted[k].num == original[j].num && sorted[k].suit == original[j].suit) {\n                        pos_j = k;\n                    }\n                }\n                if (pos_i > pos_j) {\n                    return 0;\n                }\n            }\n        }\n    }\n    return 1;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    Card *deck = (Card *)malloc(n * sizeof(Card));\n    Card *original = (Card *)malloc(n * sizeof(Card));\n    \n    for (int i = 0; i < n; i++) {\n        scanf(\" %c %d\", &deck[i].suit, &deck[i].num);\n        original[i] = deck[i];\n    }\n    \n    Card *bubble_deck = (Card *)malloc(n * sizeof(Card));\n    for (int i = 0; i < n; i++) {\n        bubble_deck[i] = deck[i];\n    }\n    bubbleSort(bubble_deck, n);\n    \n    Card *selection_deck = (Card *)malloc(n * sizeof(Card));\n    for (int i = 0; i < n; i++) {\n        selection_deck[i] = deck[i];\n    }\n    selectionSort(selection_deck, n);\n    \n    printf(\"Bubble Sort:\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"%c %d\\n\", bubble_deck[i].suit, bubble_deck[i].num);\n    }\n    printf(\"%s\\n\", isStable(original, bubble_deck, n) ? \"Stable\" : \"Not stable\");\n    \n    printf(\"Selection Sort:\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"%c %d\\n\", selection_deck[i].suit, selection_deck[i].num);\n    }\n    printf(\"%s\\n\", isStable(original, selection_deck, n) ? \"Stable\" : \"Not stable\");\n    \n    free(deck);\n    free(original);\n    free(bubble_deck);\n    free(selection_deck);\n    return 0;\n}",
    "timestamp": "2025-08-05 22:13:12"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Card {\n    char suit;\n    int number;\n    int originalIndex;\n};\n\nbool compareByNumber(const Card &a, const Card &b) {\n    return a.number < b.number;\n}\n\nbool isStable(const vector<Card> &original, const vector<Card> &sorted) {\n    for (size_t i = 0; i < sorted.size(); ++i) {\n        if (i > 0 && sorted[i].number == sorted[i-1].number) {\n            if (sorted[i].originalIndex < sorted[i-1].originalIndex) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<Card> cards(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> cards[i].suit >> cards[i].number;\n        cards[i].originalIndex = i;\n    }\n\n    vector<Card> original = cards;\n    stable_sort(cards.begin(), cards.end(), compareByNumber);\n\n    bool stable = isStable(original, cards);\n\n    for (const auto &card : cards) {\n        cout << card.suit << ' ' << card.number << endl;\n    }\n\n    cout << (stable ? \"Stable\" : \"Not stable\") << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-05 22:13:29"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\nclass Card {\n    char suit;\n    int number;\n    int originalIndex;\n\n    Card(char suit, int number, int originalIndex) {\n        this.suit = suit;\n        this.number = number;\n        this.originalIndex = originalIndex;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        Card[] cards = new Card[n];\n\n        for (int i = 0; i < n; i++) {\n            String suitStr = scanner.next();\n            int number = scanner.nextInt();\n            cards[i] = new Card(suitStr.charAt(0), number, i);\n        }\n\n        boolean isStable = true;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (cards[j].number > cards[j + 1].number) {\n                    Card temp = cards[j];\n                    cards[j] = cards[j + 1];\n                    cards[j + 1] = temp;\n                }\n            }\n        }\n\n        for (int i = 0; i < n - 1; i++) {\n            if (cards[i].number == cards[i + 1].number && cards[i].originalIndex > cards[i + 1].originalIndex) {\n                isStable = false;\n                break;\n            }\n        }\n\n        System.out.println(isStable ? \"Stable\" : \"Not stable\");\n        for (Card card : cards) {\n            System.out.println(card.suit + \" \" + card.number);\n        }\n    }\n}",
    "timestamp": "2025-08-05 22:13:47"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\nclass Card implements Comparable<Card> {\n    String suit;\n    int value;\n    int originalIndex;\n\n    public Card(String suit, int value, int originalIndex) {\n        this.suit = suit;\n        this.value = value;\n        this.originalIndex = originalIndex;\n    }\n\n    @Override\n    public int compareTo(Card other) {\n        return Integer.compare(this.value, other.value);\n    }\n\n    @Override\n    public String toString() {\n        return suit + value;\n    }\n}\n\npublic class CardSorter {\n    public static boolean sortCards(List<Card> cards) {\n        List<Card> originalOrder = new ArrayList<>(cards);\n        Collections.sort(cards);\n\n        boolean isStable = true;\n        for (int i = 0; i < cards.size(); i++) {\n            for (int j = i + 1; j < cards.size(); j++) {\n                if (cards.get(i).value == cards.get(j).value) {\n                    int originalIndexI = originalOrder.indexOf(cards.get(i));\n                    int originalIndexJ = originalOrder.indexOf(cards.get(j));\n                    if (originalIndexI > originalIndexJ) {\n                        isStable = false;\n                        break;\n                    }\n                }\n            }\n            if (!isStable) break;\n        }\n\n        return isStable;\n    }\n\n    public static void main(String[] args) {\n        List<Card> cards = Arrays.asList(\n            new Card(\"H\", 5, 0),\n            new Card(\"S\", 5, 1),\n            new Card(\"D\", 3, 2),\n            new Card(\"C\", 7, 3)\n        );\n\n        boolean isStable = sortCards(cards);\n        System.out.println(\"Sorted Cards: \" + cards);\n        System.out.println(\"Sorting is stable: \" + isStable);\n    }\n}",
    "timestamp": "2025-08-05 22:13:54"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n\nstruct Card {\n    char suit;\n    int number;\n    int original_index;\n};\n\nbool compareCards(const Card& a, const Card& b) {\n    return a.number < b.number;\n}\n\nbool isStableSort(const std::vector<Card>& original, const std::vector<Card>& sorted) {\n    for (int i = 0; i < sorted.size(); ++i) {\n        for (int j = i + 1; j < sorted.size(); ++j) {\n            if (sorted[i].number == sorted[j].number) {\n                auto orig_i = std::find_if(original.begin(), original.end(), \n                    [&](const Card& c) { \n                        return c.suit == sorted[i].suit && c.number == sorted[i].number; \n                    });\n                auto orig_j = std::find_if(original.begin(), original.end(), \n                    [&](const Card& c) { \n                        return c.suit == sorted[j].suit && c.number == sorted[j].number; \n                    });\n                \n                if (std::distance(original.begin(), orig_i) > \n                    std::distance(original.begin(), orig_j)) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    \n    std::vector<Card> cards(n);\n    \n    for (int i = 0; i < n; ++i) {\n        std::cin >> cards[i].suit >> cards[i].number;\n        cards[i].original_index = i;\n    }\n    \n    std::vector<Card> sortedCards = cards;\n    std::stable_sort(sortedCards.begin(), sortedCards.end(), compareCards);\n    \n    bool stable = isStableSort(cards, sortedCards);\n    \n    for (const auto& card : sortedCards) {\n        std::cout << card.suit << \" \" << card.number << std::endl;\n    }\n    \n    std::cout << (stable ? \"Stable\" : \"Not stable\") << std::endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:14:02"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def sort_deck(deck):\n    original_deck = deck[:]\n    deck.sort(key=lambda card: card[1])\n    \n    is_stable = True\n    value_to_cards = {}\n    \n    for idx, card in enumerate(deck):\n        value = card[1]\n        if value not in value_to_cards:\n            value_to_cards[value] = []\n        value_to_cards[value].append(card)\n\n    for value, cards in value_to_cards.items():\n        original_order = [card for card in original_deck if card[1] == value]\n        if cards != original_order:\n            is_stable = False\n            break\n            \n    return deck, is_stable\n\n# Example usage:\n# deck = [('S', 5), ('H', 3), ('C', 8), ('D', 3), ('H', 8)]\n# sorted_deck, stability = sort_deck(deck)\n# print(sorted_deck)\n# print(stability)",
    "timestamp": "2025-08-13 09:29:06"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Card implements Comparable<Card> {\n    char suit;\n    int number;\n    \n    public Card(char suit, int number) {\n        this.suit = suit;\n        this.number = number;\n    }\n    \n    @Override\n    public int compareTo(Card other) {\n        return Integer.compare(this.number, other.number);\n    }\n    \n    @Override\n    public String toString() {\n        return suit + String.valueOf(number);\n    }\n}\n\npublic class CardSorter {\n    \n    public static void bubbleSort(Card[] cards) {\n        int n = cards.length;\n        boolean swapped;\n        for (int i = 0; i < n - 1; i++) {\n            swapped = false;\n            for (int j = 0; j < n - i - 1; j++) {\n                if (cards[j].compareTo(cards[j + 1]) > 0) {\n                    Card temp = cards[j];\n                    cards[j] = cards[j + 1];\n                    cards[j + 1] = temp;\n                    swapped = true;\n                }\n            }\n            if (!swapped) break;\n        }\n    }\n    \n    public static Card[] mergeSort(Card[] cards) {\n        if (cards.length <= 1) return cards;\n        \n        int mid = cards.length / 2;\n        Card[] left = new Card[mid];\n        Card[] right = new Card[cards.length - mid];\n        \n        for (int i = 0; i < mid; i++) left[i] = cards[i];\n        for (int i = mid; i < cards.length; i++) right[i - mid] = cards[i];\n        \n        left = mergeSort(left);\n        right = mergeSort(right);\n        \n        return merge(left, right);\n    }\n    \n    private static Card[] merge(Card[] left, Card[] right) {\n        List<Card> merged = new ArrayList<>();\n        int i = 0, j = 0;\n        \n        while (i < left.length && j < right.length) {\n            if (left[i].compareTo(right[j]) <= 0) {\n                merged.add(left[i++]);\n            } else {\n                merged.add(right[j++]);\n            }\n        }\n        \n        while (i < left.length) merged.add(left[i++]);\n        while (j < right.length) merged.add(right[j++]);\n        \n        return merged.toArray(new Card[merged.size()]);\n    }\n    \n    public static void main(String[] args) {\n        Card[] cards = {\n            new Card('H', 3),\n            new Card('S', 2),\n            new Card('D', 3),\n            new Card('C', 2),\n            new Card('H', 1)\n        };\n        \n        Card[] bubbleSortedCards = cards.clone();\n        bubbleSort(bubbleSortedCards);\n        System.out.println(\"Bubble Sort:\");\n        for (Card card : bubbleSortedCards) {\n            System.out.print(card + \" \");\n        }\n        System.out.println();\n\n        Card[] mergeSortedCards = mergeSort(cards.clone());\n        System.out.println(\"Merge Sort:\");\n        for (Card card : mergeSortedCards) {\n            System.out.print(card + \" \");\n        }\n        System.out.println();\n    }\n}",
    "timestamp": "2025-08-13 09:29:18"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    char suit;\n    int number;\n} Card;\n\nvoid bubbleSort(Card* cards, int n, int* isStable) {\n    *isStable = 1;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = n - 1; j > i; j--) {\n            if (cards[j-1].number > cards[j].number) {\n                Card temp = cards[j-1];\n                cards[j-1] = cards[j];\n                cards[j] = temp;\n                *isStable = 0; // Swap occurred, might be unstable\n            }\n        }\n    }\n}\n\nvoid printCards(Card* cards, int n) {\n    for(int i = 0; i < n; i++) {\n        printf(\"%c%d\", cards[i].suit, cards[i].number);\n        if (i < n - 1)\n            printf(\" \");\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    Card* cards = (Card*)malloc(n * sizeof(Card));\n    \n    for (int i = 0; i < n; i++) {\n        scanf(\" %c%d\", &cards[i].suit, &cards[i].number);\n    }\n\n    int isStable;\n    bubbleSort(cards, n, &isStable);\n    \n    printCards(cards, n);\n    printf(isStable ? \"Stable\\n\" : \"Not Stable\\n\");\n    \n    free(cards);\n    return 0;\n}",
    "timestamp": "2025-08-13 09:29:21"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def sort_deck(deck):\n    def card_value(card):\n        suit_order = {'S': 0, 'H': 1, 'C': 2, 'D': 3}\n        return (card[1], suit_order[card[0]])\n\n    original_order = {card: i for i, card in enumerate(deck)}\n    sorted_deck = sorted(deck, key=card_value)\n    \n    is_stable = all(\n        original_order[a] < original_order[b] \n        for a, b in zip(sorted_deck, sorted_deck[1:]) \n        if a[1] == b[1]\n    )\n    \n    return sorted_deck, is_stable\n\n# Example usage\ndeck = [('H', 7), ('S', 3), ('D', 7), ('C', 3)]\nsorted_result, stability = sort_deck(deck)\nprint(\"Sorted Deck:\", sorted_result)\nprint(\"Is Stable Sorting:\", stability)",
    "timestamp": "2025-08-13 09:29:37"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def is_stable(original, sorted_deck):\n    # For each number, check the order of suits in original and sorted\n    num_to_suits_original = {}\n    for card in original:\n        num = card[1]\n        suit = card[0]\n        if num not in num_to_suits_original:\n            num_to_suits_original[num] = []\n        num_to_suits_original[num].append(suit)\n    \n    num_to_suits_sorted = {}\n    for card in sorted_deck:\n        num = card[1]\n        suit = card[0]\n        if num not in num_to_suits_sorted:\n            num_to_suits_sorted[num] = []\n        num_to_suits_sorted[num].append(suit)\n    \n    # Compare the order of suits for each number\n    for num in num_to_suits_original:\n        if num_to_suits_original[num] != num_to_suits_sorted.get(num, []):\n            return False\n    return True\n\ndef sort_deck(deck):\n    # Make a copy to avoid modifying the original\n    sorted_deck = deck.copy()\n    # Use bubble sort for simplicity (can be replaced with any sorting algorithm)\n    n = len(sorted_deck)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if sorted_deck[j][1] > sorted_deck[j+1][1]:\n                sorted_deck[j], sorted_deck[j+1] = sorted_deck[j+1], sorted_deck[j]\n    return sorted_deck\n\n# Read input\nn = int(input())\ndeck = []\nfor _ in range(n):\n    suit, num = input().split()\n    num = int(num)\n    deck.append((suit, num))\n\n# Sort the deck\nsorted_deck = sort_deck(deck)\n\n# Check stability\nstable = is_stable(deck, sorted_deck)\n\n# Output the sorted deck and stability\nfor card in sorted_deck:\n    print(card[0], card[1])\nprint(\"Stable\" if stable else \"Not stable\")",
    "timestamp": "2025-08-13 09:29:53"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <utility>\n\n// A structure to represent a card\nstruct Card {\n    char suit;  // S, H, C, D\n    int number; // 1-13\n};\n\n// Function to implement a stable sort. Here we use Bubble Sort for demonstration.\nvoid stableSort(std::vector<Card>& cards) {\n    int n = cards.size();\n    for (int i = 0; i < n - 1; ++i) {\n        for (int j = 0; j < n - i - 1; ++j) {\n            if (cards[j].number > cards[j + 1].number) {\n                std::swap(cards[j], cards[j + 1]);\n            }\n        }\n    }\n}\n\nbool isStable(const std::vector<Card>& original, const std::vector<Card>& sorted) {\n    for (int num = 1; num <= 13; ++num) { // Check each number\n        std::vector<char> originalSuits, sortedSuits;\n        for (const Card& card : original) {\n            if (card.number == num) originalSuits.push_back(card.suit);\n        }\n        for (const Card& card : sorted) {\n            if (card.number == num) sortedSuits.push_back(card.suit);\n        }\n        if (originalSuits != sortedSuits) return false;\n    }\n    return true;\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<Card> cards(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> cards[i].suit >> cards[i].number;\n    }\n\n    std::vector<Card> original = cards;\n    stableSort(cards);\n\n    for (const Card& card : cards) {\n        std::cout << card.suit << \" \" << card.number << std::endl;\n    }\n\n    if (isStable(original, cards)) {\n        std::cout << \"Stable\" << std::endl;\n    } else {\n        std::cout << \"Not stable\" << std::endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:51:51"
  }
]