[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdbool.h>\n\n#define MAX_SIZE 100\n\nchar grid[MAX_SIZE][MAX_SIZE];\nbool visited[MAX_SIZE][MAX_SIZE];\nint rows, cols;\n\nbool is_rectangular(int r, int c, char material) {\n    int min_r = r, max_r = r;\n    int min_c = c, max_c = c;\n    \n    // Find boundaries of the material block\n    for (int i = 0; i < rows; ++i) {\n        for (int j = 0; j < cols; ++j) {\n            if (grid[i][j] == material) {\n                if (i < min_r) min_r = i;\n                if (i > max_r) max_r = i;\n                if (j < min_c) min_c = j;\n                if (j > max_c) max_c = j;\n            }\n        }\n    }\n    \n    // Check if all cells in the boundaries are the same material\n    for (int i = min_r; i <= max_r; ++i) {\n        for (int j = min_c; j <= max_c; ++j) {\n            if (grid[i][j] != material) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n\nint main() {\n    scanf(\"%d %d\", &rows, &cols);\n    for (int i = 0; i < rows; ++i) {\n        scanf(\"%s\", grid[i]);\n    }\n    \n    bool suspicious = false;\n    for (int i = 0; i < rows && !suspicious; ++i) {\n        for (int j = 0; j < cols && !suspicious; ++j) {\n            if (grid[i][j] != '.' && !visited[i][j]) {\n                char material = grid[i][j];\n                if (!is_rectangular(i, j, material)) {\n                    suspicious = true;\n                }\n                // Mark all cells of this material as visited\n                for (int x = 0; x < rows; ++x) {\n                    for (int y = 0; y < cols; ++y) {\n                        if (grid[x][y] == material) {\n                            visited[x][y] = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    printf(\"%s\\n\", suspicious ? \"SUSPICIOUS\" : \"SAFE\");\n    return 0;\n}",
    "timestamp": "2025-08-05 21:05:18"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool isRectangular(const vector<string>& grid, int i, int j, char material, int rows, int cols) {\n    int minRow = i, maxRow = i;\n    int minCol = j, maxCol = j;\n    \n    vector<pair<int, int>> stack;\n    stack.emplace_back(i, j);\n    vector<vector<bool>> visited(rows, vector<bool>(cols, false));\n    visited[i][j] = true;\n    \n    while (!stack.empty()) {\n        auto [x, y] = stack.back();\n        stack.pop_back();\n        \n        minRow = min(minRow, x);\n        maxRow = max(maxRow, x);\n        minCol = min(minCol, y);\n        maxCol = max(maxCol, y);\n        \n        int dx[] = {-1, 1, 0, 0};\n        int dy[] = {0, 0, -1, 1};\n        \n        for (int k = 0; k < 4; ++k) {\n            int nx = x + dx[k];\n            int ny = y + dy[k];\n            \n            if (nx >= 0 && nx < rows && ny >= 0 && ny < cols && !visited[nx][ny] && grid[nx][ny] == material) {\n                visited[nx][ny] = true;\n                stack.emplace_back(nx, ny);\n            }\n        }\n    }\n    \n    for (int x = minRow; x <= maxRow; ++x) {\n        for (int y = minCol; y <= maxCol; ++y) {\n            if (grid[x][y] != material && grid[x][y] != '.') {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n\nint main() {\n    int rows, cols;\n    cin >> rows >> cols;\n    vector<string> grid(rows);\n    \n    for (int i = 0; i < rows; ++i) {\n        cin >> grid[i];\n    }\n    \n    bool suspicious = false;\n    vector<vector<bool>> checked(rows, vector<bool>(cols, false));\n    \n    for (int i = 0; i < rows; ++i) {\n        for (int j = 0; j < cols; ++j) {\n            if (grid[i][j] != '.' && !checked[i][j]) {\n                char material = grid[i][j];\n                if (!isRectangular(grid, i, j, material, rows, cols)) {\n                    suspicious = true;\n                    break;\n                }\n                for (int x = 0; x < rows; ++x) {\n                    for (int y = 0; y < cols; ++y) {\n                        if (grid[x][y] == material) {\n                            checked[x][y] = true;\n                        }\n                    }\n                }\n            }\n        }\n        if (suspicious) break;\n    }\n    \n    cout << (suspicious ? \"SUSPICIOUS\" : \"SAFE\") << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:05:46"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.Scanner;\n\npublic class BaggageScanner {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int rows = scanner.nextInt();\n        int cols = scanner.nextInt();\n        scanner.nextLine(); // consume the newline\n        \n        char[][] grid = new char[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            String line = scanner.nextLine();\n            for (int j = 0; j < cols; j++) {\n                grid[i][j] = line.charAt(j);\n            }\n        }\n        \n        boolean suspicious = false;\n        for (int i = 0; i < rows && !suspicious; i++) {\n            for (int j = 0; j < cols && !suspicious; j++) {\n                if (grid[i][j] != '.') {\n                    if (isNonRectangular(grid, i, j, rows, cols)) {\n                        suspicious = true;\n                    }\n                }\n            }\n        }\n        \n        System.out.println(suspicious ? \"SUSPICIOUS\" : \"SAFE\");\n    }\n    \n    private static boolean isNonRectangular(char[][] grid, int x, int y, int rows, int cols) {\n        char material = grid[x][y];\n        int minX = x, maxX = x;\n        int minY = y, maxY = y;\n        \n        // Find the bounding rectangle\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid[i][j] == material) {\n                    if (i < minX) minX = i;\n                    if (i > maxX) maxX = i;\n                    if (j < minY) minY = j;\n                    if (j > maxY) maxY = j;\n                }\n            }\n        }\n        \n        // Check if all cells in the bounding rectangle are the same material\n        for (int i = minX; i <= maxX; i++) {\n            for (int j = minY; j <= maxY; j++) {\n                if (grid[i][j] != material) {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n}",
    "timestamp": "2025-08-05 21:06:06"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class BaggageAnalysis {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int rows = scanner.nextInt();\n        int cols = scanner.nextInt();\n        scanner.nextLine();\n\n        char[][] grid = new char[rows][cols];\n        for (int i = 0; i < rows; i++) {\n            grid[i] = scanner.nextLine().toCharArray();\n        }\n\n        if (isSuspicious(grid)) {\n            System.out.println(\"SUSPICIOUS\");\n        } else {\n            System.out.println(\"SAFE\");\n        }\n    }\n\n    private static boolean isSuspicious(char[][] grid) {\n        for (char c = 'A'; c <= 'Z'; c++) {\n            List<int[]> positions = findPositions(grid, c);\n            if (positions.size() > 0 && !isRectangular(positions)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static List<int[]> findPositions(char[][] grid, char material) {\n        List<int[]> positions = new ArrayList<>();\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                if (grid[i][j] == material) {\n                    positions.add(new int[]{i, j});\n                }\n            }\n        }\n        return positions;\n    }\n\n    private static boolean isRectangular(List<int[]> positions) {\n        if (positions.size() <= 1) return true;\n\n        int minRow = Integer.MAX_VALUE, maxRow = Integer.MIN_VALUE;\n        int minCol = Integer.MAX_VALUE, maxCol = Integer.MIN_VALUE;\n\n        for (int[] pos : positions) {\n            minRow = Math.min(minRow, pos[0]);\n            maxRow = Math.max(maxRow, pos[0]);\n            minCol = Math.min(minCol, pos[1]);\n            maxCol = Math.max(maxCol, pos[1]);\n        }\n\n        Set<String> rectanglePositions = new HashSet<>();\n        for (int r = minRow; r <= maxRow; r++) {\n            for (int c = minCol; c <= maxCol; c++) {\n                rectanglePositions.add(r + \",\" + c);\n            }\n        }\n\n        for (int[] pos : positions) {\n            if (!rectanglePositions.contains(pos[0] + \",\" + pos[1])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}",
    "timestamp": "2025-08-05 21:06:14"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\n#define MAX_ROWS 100\n#define MAX_COLS 100\n\nbool is_rectangular(char grid[MAX_ROWS][MAX_COLS], int rows, int cols) {\n    bool found_material = false;\n    int first_row = -1, last_row = -1;\n    int first_col = -1, last_col = -1;\n\n    // Find first and last rows with material\n    for (int r = 0; r < rows; r++) {\n        for (int c = 0; c < cols; c++) {\n            if (grid[r][c] >= 'A' && grid[r][c] <= 'Z') {\n                if (first_row == -1) first_row = r;\n                last_row = r;\n                found_material = true;\n                break;\n            }\n        }\n    }\n\n    // Find first and last columns with material\n    for (int c = 0; c < cols; c++) {\n        for (int r = 0; r < rows; r++) {\n            if (grid[r][c] >= 'A' && grid[r][c] <= 'Z') {\n                if (first_col == -1) first_col = c;\n                last_col = c;\n                found_material = true;\n                break;\n            }\n        }\n    }\n\n    // Check if all material is within rectangular bounds\n    if (found_material) {\n        for (int r = first_row; r <= last_row; r++) {\n            for (int c = first_col; c <= last_col; c++) {\n                if (grid[r][c] >= 'A' && grid[r][c] <= 'Z') {\n                    continue;\n                }\n                if (grid[r][c] != '.') {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    int rows, cols;\n    char grid[MAX_ROWS][MAX_COLS];\n\n    // Read input\n    scanf(\"%d %d\", &rows, &cols);\n    for (int r = 0; r < rows; r++) {\n        scanf(\"%s\", grid[r]);\n    }\n\n    // Check if material is rectangular\n    printf(\"%s\\n\", is_rectangular(grid, rows, cols) ? \"SAFE\" : \"SUSPICIOUS\");\n\n    return 0;\n}",
    "timestamp": "2025-08-05 21:06:22"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nbool isNonRectangular(vector<string>& grid) {\n    int rows = grid.size();\n    int cols = grid[0].length();\n\n    for (int r = 0; r < rows; r++) {\n        for (int c = 0; c < cols; c++) {\n            if (grid[r][c] >= 'A' && grid[r][c] <= 'Z') {\n                bool isRectangular = true;\n                \n                // Check horizontally\n                int startC = c;\n                while (startC < cols && grid[r][startC] >= 'A' && grid[r][startC] <= 'Z') {\n                    startC++;\n                }\n                \n                // Check vertically\n                int startR = r;\n                while (startR < rows && grid[startR][c] >= 'A' && grid[startR][c] <= 'Z') {\n                    startR++;\n                }\n                \n                // Verify rectangular region\n                for (int i = r; i < startR; i++) {\n                    for (int j = c; j < startC; j++) {\n                        if (grid[i][j] < 'A' || grid[i][j] > 'Z') {\n                            isRectangular = false;\n                            break;\n                        }\n                    }\n                    if (!isRectangular) break;\n                }\n                \n                if (!isRectangular) {\n                    return true;\n                }\n            }\n        }\n    }\n    \n    return false;\n}\n\nint main() {\n    int rows, cols;\n    cin >> rows >> cols;\n    \n    vector<string> grid(rows);\n    for (int i = 0; i < rows; i++) {\n        cin >> grid[i];\n    }\n    \n    cout << (isNonRectangular(grid) ? \"SUSPICIOUS\" : \"SAFE\") << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 21:06:29"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def is_suspicious(grid):\n    def dfs(r, c):\n        stack = [(r, c)]\n        visited.add((r, c))\n        cells = [(r, c)]\n        while stack:\n            x, y = stack.pop()\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in visited and grid[nx][ny] == grid[r][c]:\n                    visited.add((nx, ny))\n                    stack.append((nx, ny))\n                    cells.append((nx, ny))\n        return cells\n\n    def is_rectangular(cells):\n        if not cells:\n            return False\n        rows = [r for r, c in cells]\n        cols = [c for r, c in cells]\n        return (max(rows) - min(rows) + 1) * (max(cols) - min(cols) + 1) == len(cells)\n\n    visited = set()\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] != '.' and (i, j) not in visited:\n                cells = dfs(i, j)\n                if not is_rectangular(cells):\n                    return \"SUSPICIOUS\"\n    return \"SAFE\"\n\n# Example usage\ngrid = [\n    \"AA.AA\",\n    \"AA.AA\",\n    \"BBBB.\",\n    \"BBBBB\",\n    \"..CCC\"\n]\n\nprint(is_suspicious(grid))  # Output: SUSPICIOUS",
    "timestamp": "2025-08-13 04:55:17"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "public class BaggageAnalysis {\n    public static void main(String[] args) {\n        char[][] grid = {\n            {'A', '.', '.', 'B'},\n            {'.', 'A', '.', 'B'},\n            {'.', '.', 'A', '.'},\n            {'.', '.', '.', 'B'}\n        };\n\n        System.out.println(isSuspicious(grid));\n    }\n\n    public static String isSuspicious(char[][] grid) {\n        int rows = grid.length;\n        int cols = grid[0].length;\n      \n        boolean[][] visited = new boolean[rows][cols];\n\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid[i][j] != '.' && !visited[i][j]) {\n                    int[] bounds = new int[]{i, i, j, j}; \n                    dfs(grid, visited, i, j, bounds, grid[i][j]);\n                    if (!isRectangle(bounds, grid, grid[i][j])) {\n                        return \"SUSPICIOUS\";\n                    }\n                }\n            }\n        }\n        return \"SAFE\";\n    }\n\n    public static void dfs(char[][] grid, boolean[][] visited, int i, int j, int[] bounds, char material) {\n        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] != material || visited[i][j]) {\n            return;\n        }\n      \n        visited[i][j] = true;\n        bounds[0] = Math.min(bounds[0], i);\n        bounds[1] = Math.max(bounds[1], i);\n        bounds[2] = Math.min(bounds[2], j);\n        bounds[3] = Math.max(bounds[3], j);\n      \n        dfs(grid, visited, i - 1, j, bounds, material);\n        dfs(grid, visited, i + 1, j, bounds, material);\n        dfs(grid, visited, i, j - 1, bounds, material);\n        dfs(grid, visited, i, j + 1, bounds, material);\n    }\n\n    public static boolean isRectangle(int[] bounds, char[][] grid, char material) {\n        for (int i = bounds[0]; i <= bounds[1]; i++) {\n            for (int j = bounds[2]; j <= bounds[3]; j++) {\n                if (grid[i][j] != material) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}",
    "timestamp": "2025-08-13 04:55:22"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\n#define MAX_SIZE 100\n\nchar grid[MAX_SIZE][MAX_SIZE];\nbool visited[MAX_SIZE][MAX_SIZE];\nint rows, cols;\n\nint dRow[] = {0, 1, 0, -1};\nint dCol[] = {-1, 0, 1, 0};\n\nbool isInBounds(int x, int y) {\n    return x >= 0 && x < rows && y >= 0 && y < cols;\n}\n\nvoid dfs(int x, int y, int *minRow, int *maxRow, int *minCol, int *maxCol) {\n    visited[x][y] = true;\n    if (x < *minRow) *minRow = x;\n    if (x > *maxRow) *maxRow = x;\n    if (y < *minCol) *minCol = y;\n    if (y > *maxCol) *maxCol = y;\n\n    for (int dir = 0; dir < 4; ++dir) {\n        int newX = x + dRow[dir];\n        int newY = y + dCol[dir];\n        if (isInBounds(newX, newY) && !visited[newX][newY] && grid[newX][newY] == grid[x][y]) {\n            dfs(newX, newY, minRow, maxRow, minCol, maxCol);\n        }\n    }\n}\n\nbool isNonRectangular(int minRow, int maxRow, int minCol, int maxCol, char material) {\n    for (int i = minRow; i <= maxRow; ++i) {\n        for (int j = minCol; j <= maxCol; ++j) {\n            if (grid[i][j] != material) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint main() {\n    // Read grid dimensions\n    scanf(\"%d %d\", &rows, &cols);\n    // Read grid\n    for (int i = 0; i < rows; ++i) {\n        scanf(\"%s\", grid[i]);\n    }\n    \n    memset(visited, false, sizeof(visited));\n    bool suspicious = false;\n    \n    for (int i = 0; i < rows; ++i) {\n        for (int j = 0; j < cols; ++j) {\n            if (grid[i][j] != '.' && !visited[i][j]) {\n                int minRow = i, maxRow = i, minCol = j, maxCol = j;\n                dfs(i, j, &minRow, &maxRow, &minCol, &maxCol);\n                if (isNonRectangular(minRow, maxRow, minCol, maxCol, grid[i][j])) {\n                    suspicious = true;\n                    break;\n                }\n            }\n        }\n        if (suspicious) break;\n    }\n    \n    if (suspicious) {\n        printf(\"SUSPICIOUS\\n\");\n    } else {\n        printf(\"SAFE\\n\");\n    }\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 04:55:28"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def is_suspicious(grid):\n    rows, cols = len(grid), len(grid[0])\n    visited = [[False] * cols for _ in range(rows)]\n    \n    def explore(r, c, material):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or \n            visited[r][c] or grid[r][c] != material):\n            return []\n        \n        visited[r][c] = True\n        shape = [(r, c)]\n        \n        for dr, dc in [(0,1), (1,0), (0,-1), (-1,0)]:\n            nr, nc = r + dr, c + dc\n            shape.extend(explore(nr, nc, material))\n        \n        return shape\n    \n    def is_rectangular(shape):\n        if not shape:\n            return True\n        \n        min_r = min(r for r, _ in shape)\n        max_r = max(r for r, _ in shape)\n        min_c = min(c for _, c in shape)\n        max_c = max(c for _, c in shape)\n        \n        return len(shape) == (max_r - min_r + 1) * (max_c - min_c + 1)\n    \n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] != '.' and not visited[r][c]:\n                shape = explore(r, c, grid[r][c])\n                if not is_rectangular(shape):\n                    return 'SUSPICIOUS'\n    \n    return 'SAFE'\n\n# Example usage\ndef main():\n    grid = input().strip().split()\n    print(is_suspicious(grid))\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 04:55:42"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def check_suspicious(grid):\n    rows = len(grid)\n    if rows == 0:\n        return \"SAFE\"\n    cols = len(grid[0])\n    \n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == '.':\n                continue\n            # Check if current cell is part of a non-rectangular shape\n            # Look at the 4 adjacent cells\n            adjacent = []\n            if i > 0:\n                adjacent.append(grid[i-1][j])\n            if i < rows - 1:\n                adjacent.append(grid[i+1][j])\n            if j > 0:\n                adjacent.append(grid[i][j-1])\n            if j < cols - 1:\n                adjacent.append(grid[i][j+1])\n            \n            # Check if any adjacent cell is different (not same material or '.')\n            for cell in adjacent:\n                if cell != '.' and cell != grid[i][j]:\n                    return \"SUSPICIOUS\"\n    return \"SAFE\"\n\n# Read input\nn, m = map(int, input().split())\ngrid = [input().strip() for _ in range(n)]\n\nprint(check_suspicious(grid))",
    "timestamp": "2025-08-13 04:55:55"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nint n, m;\n\nbool isNonRectangular(vector<vector<char>>& grid, vector<vector<bool>>& visited, int x, int y, char material) {\n    if (x < 0 || y < 0 || x >= n || y >= m || visited[x][y] || grid[x][y] != material) return false;\n    visited[x][y] = true;\n    \n    queue<pair<int, int>> q;\n    q.push({x, y});\n    \n    int min_x = x, max_x = x, min_y = y, max_y = y;\n    \n    while (!q.empty()) {\n        int cur_x = q.front().first;\n        int cur_y = q.front().second;\n        q.pop();\n        \n        min_x = min(min_x, cur_x);\n        max_x = max(max_x, cur_x);\n        min_y = min(min_y, cur_y);\n        max_y = max(max_y, cur_y);\n\n        int dxy[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n        \n        for (int d = 0; d < 4; ++d) {\n            int new_x = cur_x + dxy[d][0];\n            int new_y = cur_y + dxy[d][1];\n\n            if (new_x >= 0 && new_x < n && new_y >= 0 && new_y < m && !visited[new_x][new_y] && grid[new_x][new_y] == material) {\n                visited[new_x][new_y] = true;\n                q.push({new_x, new_y});\n            }\n        }\n    }\n\n    int expectedArea = (max_x - min_x + 1) * (max_y - min_y + 1);\n    int actualArea = 0;\n    for (int i = min_x; i <= max_x; ++i) {\n        for (int j = min_y; j <= max_y; ++j) {\n            if (grid[i][j] == material) {\n                actualArea++;\n            }\n        }\n    }\n\n    return expectedArea != actualArea;\n}\n\nint main() {\n    cin >> n >> m;\n    vector<vector<char>> grid(n, vector<char>(m));\n    \n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            cin >> grid[i][j];\n        }\n    }\n\n    vector<vector<bool>> visited(n, vector<bool>(m, false));\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            if (grid[i][j] != '.' && !visited[i][j]) {\n                char material = grid[i][j];\n                if (isNonRectangular(grid, visited, i, j, material)) {\n                    cout << \"SUSPICIOUS\" << endl;\n                    return 0;\n                }\n            }\n        }\n    }\n    cout << \"SAFE\" << endl;\n    return 0;\n}",
    "timestamp": "2025-08-13 11:22:09"
  }
]