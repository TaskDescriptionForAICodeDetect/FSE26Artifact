[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char category[10];\n    int time;\n} Check;\n\nvoid calculate_ok_percentage(Check checks[], int n) {\n    int lunch_ok = 0, lunch_total = 0;\n    int dinner_ok = 0, dinner_total = 0;\n    int midnight_ok = 0, midnight_total = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (strcmp(checks[i].category, \"lunch\") == 0) {\n            lunch_total++;\n            if (checks[i].time <= 8) {\n                lunch_ok++;\n            }\n        } else if (strcmp(checks[i].category, \"dinner\") == 0) {\n            dinner_total++;\n            if (checks[i].time <= 8) {\n                dinner_ok++;\n            }\n        } else if (strcmp(checks[i].category, \"midnight\") == 0) {\n            midnight_total++;\n            if (checks[i].time <= 8) {\n                midnight_ok++;\n            }\n        }\n    }\n\n    printf(\"lunch: %.2f%%\\n\", lunch_total > 0 ? (float)lunch_ok / lunch_total * 100 : 0.0);\n    printf(\"dinner: %.2f%%\\n\", dinner_total > 0 ? (float)dinner_ok / dinner_total * 100 : 0.0);\n    printf(\"midnight: %.2f%%\\n\", midnight_total > 0 ? (float)midnight_ok / midnight_total * 100 : 0.0);\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    Check checks[n];\n\n    for (int i = 0; i < n; i++) {\n        scanf(\"%s %d\", checks[i].category, &checks[i].time);\n    }\n\n    calculate_ok_percentage(checks, n);\n    return 0;\n}",
    "timestamp": "2025-08-05 19:00:06"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class RestaurantCheckAnalysis {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        int totalLunchChecks = 0;\n        int okLunchChecks = 0;\n        int totalDinnerChecks = 0;\n        int okDinnerChecks = 0;\n        int totalMidnightChecks = 0;\n        int okMidnightChecks = 0;\n        \n        while (true) {\n            String input = scanner.nextLine();\n            if (input.equals(\"0\")) break;\n            \n            String[] parts = input.split(\" \");\n            int time = Integer.parseInt(parts[0]);\n            int duration = Integer.parseInt(parts[1]);\n            \n            if (time >= 1100 && time < 1400) {\n                totalLunchChecks++;\n                if (duration <= 8) okLunchChecks++;\n            } else if (time >= 1800 && time < 2200) {\n                totalDinnerChecks++;\n                if (duration <= 8) okDinnerChecks++;\n            } else if (time >= 2200 || time < 100) {\n                totalMidnightChecks++;\n                if (duration <= 8) okMidnightChecks++;\n            }\n        }\n        \n        double lunchRatio = totalLunchChecks > 0 ? (double) okLunchChecks / totalLunchChecks * 100 : 0;\n        double dinnerRatio = totalDinnerChecks > 0 ? (double) okDinnerChecks / totalDinnerChecks * 100 : 0;\n        double midnightRatio = totalMidnightChecks > 0 ? (double) okMidnightChecks / totalMidnightChecks * 100 : 0;\n        \n        System.out.printf(\"%.2f%%\\n\", lunchRatio);\n        System.out.printf(\"%.2f%%\\n\", dinnerRatio);\n        System.out.printf(\"%.2f%%\\n\", midnightRatio);\n        \n        scanner.close();\n    }\n}",
    "timestamp": "2025-08-05 19:00:15"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <string>\n\nstruct Check {\n    int time;\n    std::string category;\n};\n\nvoid calculateRatios(const std::vector<Check>& checks) {\n    std::vector<std::string> categories = {\"lunch\", \"dinner\", \"midnight\"};\n    std::vector<int> total(categories.size(), 0);\n    std::vector<int> ok(categories.size(), 0);\n\n    for (const auto& check : checks) {\n        for (size_t i = 0; i < categories.size(); ++i) {\n            if (check.category == categories[i]) {\n                total[i]++;\n                if (check.time <= 8) {\n                    ok[i]++;\n                }\n                break;\n            }\n        }\n    }\n\n    for (size_t i = 0; i < categories.size(); ++i) {\n        if (total[i] == 0) {\n            std::cout << categories[i] << \" \" << \"no checks\" << std::endl;\n        } else {\n            double ratio = static_cast<double>(ok[i]) / total[i] * 100;\n            std::cout << categories[i] << \" \" << std::fixed << std::setprecision(0) << ratio << \"%\" << std::endl;\n        }\n    }\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<Check> checks(N);\n\n    for (int i = 0; i < N; ++i) {\n        std::cin >> checks[i].time >> checks[i].category;\n    }\n\n    calculateRatios(checks);\n\n    return 0;\n}",
    "timestamp": "2025-08-05 19:01:10"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n\nint main() {\n    int lunch_total = 0, lunch_ok = 0;\n    int dinner_total = 0, dinner_ok = 0;\n    int midnight_total = 0, midnight_ok = 0;\n    int time_taken, time_slot;\n\n    while (1) {\n        printf(\"Enter time slot (1-Lunch, 2-Dinner, 3-Midnight, 0-Exit): \");\n        scanf(\"%d\", &time_slot);\n\n        if (time_slot == 0) {\n            break;\n        }\n\n        printf(\"Enter time taken to provide products (minutes): \");\n        scanf(\"%d\", &time_taken);\n\n        switch (time_slot) {\n            case 1:\n                lunch_total++;\n                if (time_taken <= 8) lunch_ok++;\n                break;\n            case 2:\n                dinner_total++;\n                if (time_taken <= 8) dinner_ok++;\n                break;\n            case 3:\n                midnight_total++;\n                if (time_taken <= 8) midnight_ok++;\n                break;\n            default:\n                printf(\"Invalid time slot. Try again.\\n\");\n        }\n    }\n\n    printf(\"\\nResults:\\n\");\n    printf(\"Lunch: %.2f%% ok checks (%d/%d)\\n\", \n           lunch_total ? (float)lunch_ok/lunch_total*100 : 0, \n           lunch_ok, lunch_total);\n    printf(\"Dinner: %.2f%% ok checks (%d/%d)\\n\", \n           dinner_total ? (float)dinner_ok/dinner_total*100 : 0, \n           dinner_ok, dinner_total);\n    printf(\"Midnight: %.2f%% ok checks (%d/%d)\\n\", \n           midnight_total ? (float)midnight_ok/midnight_total*100 : 0, \n           midnight_ok, midnight_total);\n\n    return 0;\n}",
    "timestamp": "2025-08-05 19:01:19"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <iomanip>\n\nusing namespace std;\n\nstruct Check {\n    int timeSlot;  // 1: lunch, 2: dinner, 3: midnight\n    int timeTaken;\n};\n\nint main() {\n    int n;\n    cin >> n;\n    \n    vector<Check> checks(n);\n    \n    for (int i = 0; i < n; i++) {\n        cin >> checks[i].timeSlot >> checks[i].timeTaken;\n    }\n    \n    int lunchTotal = 0, lunchOk = 0;\n    int dinnerTotal = 0, dinnerOk = 0;\n    int midnightTotal = 0, midnightOk = 0;\n    \n    for (const auto& check : checks) {\n        switch (check.timeSlot) {\n            case 1:  // lunch\n                lunchTotal++;\n                if (check.timeTaken <= 8) lunchOk++;\n                break;\n            case 2:  // dinner\n                dinnerTotal++;\n                if (check.timeTaken <= 8) dinnerOk++;\n                break;\n            case 3:  // midnight\n                midnightTotal++;\n                if (check.timeTaken <= 8) midnightOk++;\n                break;\n        }\n    }\n    \n    cout << fixed << setprecision(2);\n    \n    if (lunchTotal > 0)\n        cout << \"Lunch: \" << (double)lunchOk / lunchTotal * 100 << \"%\" << endl;\n    else\n        cout << \"Lunch: 0%\" << endl;\n    \n    if (dinnerTotal > 0)\n        cout << \"Dinner: \" << (double)dinnerOk / dinnerTotal * 100 << \"%\" << endl;\n    else\n        cout << \"Dinner: 0%\" << endl;\n    \n    if (midnightTotal > 0)\n        cout << \"Midnight: \" << (double)midnightOk / midnightTotal * 100 << \"%\" << endl;\n    else\n        cout << \"Midnight: 0%\" << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 19:01:26"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class RestaurantChecks {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int lunchOk = 0, lunchTotal = 0;\n        int dinnerOk = 0, dinnerTotal = 0;\n        int midnightOk = 0, midnightTotal = 0;\n\n        while (scanner.hasNext()) {\n            String time = scanner.next();\n            int duration = scanner.nextInt();\n\n            String[] parts = time.split(\":\");\n            int hour = Integer.parseInt(parts[0]);\n\n            if (hour >= 11 && hour < 16) {\n                lunchTotal++;\n                if (duration <= 8) {\n                    lunchOk++;\n                }\n            } else if (hour >= 16 && hour < 23) {\n                dinnerTotal++;\n                if (duration <= 8) {\n                    dinnerOk++;\n                }\n            } else {\n                midnightTotal++;\n                if (duration <= 8) {\n                    midnightOk++;\n                }\n            }\n        }\n\n        System.out.printf(\"Lunch: %.0f%%\\n\", calculatePercentage(lunchOk, lunchTotal));\n        System.out.printf(\"Dinner: %.0f%%\\n\", calculatePercentage(dinnerOk, dinnerTotal));\n        System.out.printf(\"Midnight: %.0f%%\\n\", calculatePercentage(midnightOk, midnightTotal));\n    }\n\n    private static double calculatePercentage(int ok, int total) {\n        if (total == 0) {\n            return 0.0;\n        }\n        return (ok * 100.0) / total;\n    }\n}",
    "timestamp": "2025-08-05 19:01:40"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def calculate_ok_ratios(check_times):\n    lunch_checks = {'ok': 0, 'total': 0}\n    dinner_checks = {'ok': 0, 'total': 0}\n    midnight_checks = {'ok': 0, 'total': 0}\n\n    for check in check_times:\n        time, minutes = check\n        if time >= 11 and time < 16:\n            category = lunch_checks\n        elif time >= 16 and time < 23:\n            category = dinner_checks\n        else:\n            category = midnight_checks\n\n        category['total'] += 1\n        if minutes <= 8:\n            category['ok'] += 1\n\n    def calculate_percentage(ok_checks, total_checks):\n        return (ok_checks / total_checks * 100) if total_checks else 0\n\n    lunch_percentage = calculate_percentage(lunch_checks['ok'], lunch_checks['total'])\n    dinner_percentage = calculate_percentage(dinner_checks['ok'], dinner_checks['total'])\n    midnight_percentage = calculate_percentage(midnight_checks['ok'], midnight_checks['total'])\n\n    print(f\"Lunch OK Percentage: {lunch_percentage:.2f}%\")\n    print(f\"Dinner OK Percentage: {dinner_percentage:.2f}%\")\n    print(f\"Midnight OK Percentage: {midnight_percentage:.2f}%\")\n\n# Example usage:\ncheck_times = [(12, 7), (14, 9), (20, 8), (22, 5), (23, 12), (1, 8), (0, 7), (18, 3)]\ncalculate_ok_ratios(check_times)",
    "timestamp": "2025-08-13 01:55:29"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\nclass Check {\n    String category;\n    int timeTaken; // in minutes\n\n    public Check(String category, int timeTaken) {\n        this.category = category;\n        this.timeTaken = timeTaken;\n    }\n}\n\npublic class RestaurantCheckAnalyzer {\n    \n    public static void main(String[] args) {\n        List<Check> checks = Arrays.asList(\n            new Check(\"lunch\", 7),\n            new Check(\"lunch\", 10),\n            new Check(\"dinner\", 5),\n            new Check(\"dinner\", 9),\n            new Check(\"midnight\", 4),\n            new Check(\"midnight\", 12)\n        );\n\n        Map<String, Integer> okCounts = new HashMap<>();\n        Map<String, Integer> totalCounts = new HashMap<>();\n        \n        for (Check check : checks) {\n            totalCounts.put(check.category, totalCounts.getOrDefault(check.category, 0) + 1);\n            if (check.timeTaken <= 8) {\n                okCounts.put(check.category, okCounts.getOrDefault(check.category, 0) + 1);\n            }\n        }\n        \n        for (String category : totalCounts.keySet()) {\n            int okCount = okCounts.getOrDefault(category, 0);\n            int totalCount = totalCounts.get(category);\n            double percentageOk = (double) okCount / totalCount * 100;\n            System.out.printf(\"%s: %.2f%% OK checks%n\", category, percentageOk);\n        }\n    }\n}",
    "timestamp": "2025-08-13 01:55:31"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n\n#define MAX_CHECKS 1000\n\ntypedef struct {\n    int timeTaken;\n    int hour;\n} Check;\n\nvoid calculateOkRatios(Check checks[], int totalChecks) {\n    int lunchOk = 0, dinnerOk = 0, midnightOk = 0;\n    int lunchTotal = 0, dinnerTotal = 0, midnightTotal = 0;\n\n    for (int i = 0; i < totalChecks; i++) {\n        if (checks[i].hour >= 11 && checks[i].hour < 15) {\n            lunchTotal++;\n            if (checks[i].timeTaken <= 8) {\n                lunchOk++;\n            }\n        } else if (checks[i].hour >= 18 && checks[i].hour < 22) {\n            dinnerTotal++;\n            if (checks[i].timeTaken <= 8) {\n                dinnerOk++;\n            }\n        } else if (checks[i].hour >= 0 && checks[i].hour < 4) {\n            midnightTotal++;\n            if (checks[i].timeTaken <= 8) {\n                midnightOk++;\n            }\n        }\n    }\n\n    float lunchRatio = (lunchTotal > 0) ? (float)lunchOk / lunchTotal * 100 : 0;\n    float dinnerRatio = (dinnerTotal > 0) ? (float)dinnerOk / dinnerTotal * 100 : 0;\n    float midnightRatio = (midnightTotal > 0) ? (float)midnightOk / midnightTotal * 100 : 0;\n\n    printf(\"Lunch OK Ratio: %.2f%%\\n\", lunchRatio);\n    printf(\"Dinner OK Ratio: %.2f%%\\n\", dinnerRatio);\n    printf(\"Midnight OK Ratio: %.2f%%\\n\", midnightRatio);\n}\n\nint main() {\n    Check checks[MAX_CHECKS];\n    int totalChecks;\n\n    // Assume checks are populated and totalChecks is set accordingly\n\n    calculateOkRatios(checks, totalChecks);\n\n    return 0;\n}",
    "timestamp": "2025-08-13 01:55:35"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def calculate_check_ratio(checks):\n    lunch_checks = [check for check in checks if 11 <= check['time'] < 14]\n    dinner_checks = [check for check in checks if 18 <= check['time'] < 22]\n    midnight_checks = [check for check in checks if check['time'] >= 22 or check['time'] < 5]\n\n    def calculate_ok_percentage(category_checks):\n        if not category_checks:\n            return 0\n        ok_checks = [check for check in category_checks if check['duration'] <= 8]\n        return (len(ok_checks) / len(category_checks)) * 100\n\n    lunch_ok_percentage = calculate_ok_percentage(lunch_checks)\n    dinner_ok_percentage = calculate_ok_percentage(dinner_checks)\n    midnight_ok_percentage = calculate_ok_percentage(midnight_checks)\n\n    print(f\"Lunch OK %: {lunch_ok_percentage:.2f}\")\n    print(f\"Dinner OK %: {dinner_ok_percentage:.2f}\")\n    print(f\"Midnight OK %: {midnight_ok_percentage:.2f}\")\n\nchecks = [\n    {'time': 12, 'duration': 7},\n    {'time': 19, 'duration': 9},\n    {'time': 23, 'duration': 6},\n    {'time': 13, 'duration': 10},\n    {'time': 20, 'duration': 5}\n]\n\ncalculate_check_ratio(checks)",
    "timestamp": "2025-08-13 01:55:45"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import pandas as pd\n\ndef calculate_ok_ratio(data):\n    # Define time slots\n    def get_time_slot(time):\n        if 11 <= time.hour < 16:\n            return 'lunch'\n        elif 16 <= time.hour < 22:\n            return 'dinner'\n        else:\n            return 'midnight'\n    \n    # Process data\n    df = pd.DataFrame(data)\n    df['time'] = pd.to_datetime(df['time'])\n    df['time_slot'] = df['time'].apply(get_time_slot)\n    df['is_ok'] = df['time_taken'] <= 8\n    \n    # Calculate ratios\n    ratios = {}\n    for slot in ['lunch', 'dinner', 'midnight']:\n        slot_data = df[df['time_slot'] == slot]\n        total = len(slot_data)\n        ok = slot_data['is_ok'].sum()\n        ratio = (ok / total) * 100 if total > 0 else 0\n        ratios[slot] = ratio\n    \n    # Print results\n    for slot, ratio in ratios.items():\n        print(f\"{slot}: {ratio:.2f}%\")\n\n# Example usage:\n# data = [\n#     {'time': '2023-01-01 12:30:00', 'time_taken': 7},\n#     {'time': '2023-01-01 13:45:00', 'time_taken': 9},\n#     {'time': '2023-01-01 20:00:00', 'time_taken': 6},\n#     {'time': '2023-01-01 22:30:00', 'time_taken': 10},\n# ]\n# calculate_ok_ratio(data)",
    "timestamp": "2025-08-13 01:56:10"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <iomanip>\n\nstruct Check {\n    int timeTaken; // time taken in minutes\n    int hour;      // time the check was performed (24-hour format)\n};\n\nenum TimeSlot { LUNCH, DINNER, MIDNIGHT };\n\nTimeSlot categorizeCheck(int hour) {\n    if (hour >= 11 && hour < 17) return LUNCH;\n    if (hour >= 17 && hour < 24) return DINNER;\n    return MIDNIGHT;\n}\n\nvoid calculateOkCheckRatio(const std::vector<Check>& checks) {\n    int totalLunchChecks = 0, okLunchChecks = 0;\n    int totalDinnerChecks = 0, okDinnerChecks = 0;\n    int totalMidnightChecks = 0, okMidnightChecks = 0;\n\n    for (const auto& check : checks) {\n        if (check.timeTaken <= 8) {\n            switch (categorizeCheck(check.hour)) {\n                case LUNCH:\n                    ++okLunchChecks;\n                    break;\n                case DINNER:\n                    ++okDinnerChecks;\n                    break;\n                case MIDNIGHT:\n                    ++okMidnightChecks;\n                    break;\n            }\n        }\n        switch (categorizeCheck(check.hour)) {\n            case LUNCH:\n                ++totalLunchChecks;\n                break;\n            case DINNER:\n                ++totalDinnerChecks;\n                break;\n            case MIDNIGHT:\n                ++totalMidnightChecks;\n                break;\n        }\n    }\n\n    std::cout << std::fixed << std::setprecision(2);\n    std::cout << \"Lunch: \" \n              << (totalLunchChecks ? (static_cast<double>(okLunchChecks) / totalLunchChecks * 100) : 0.00) \n              << \"%\" << std::endl;\n    std::cout << \"Dinner: \" \n              << (totalDinnerChecks ? (static_cast<double>(okDinnerChecks) / totalDinnerChecks * 100) : 0.00) \n              << \"%\" << std::endl;\n    std::cout << \"Midnight: \" \n              << (totalMidnightChecks ? (static_cast<double>(okMidnightChecks) / totalMidnightChecks * 100) : 0.00) \n              << \"%\" << std::endl;\n}\n\nint main() {\n    std::vector<Check> checks = {\n        {5, 12}, {9, 13}, {7, 18}, {10, 23}, {3, 21}, {4, 2}, {6, 11}\n    };\n\n    calculateOkCheckRatio(checks);\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:03:32"
  }
]