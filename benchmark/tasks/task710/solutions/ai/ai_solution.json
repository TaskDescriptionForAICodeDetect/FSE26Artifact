[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    return (*(int*)b - *(int*)a);\n}\n\nint max_happiness(int N, int M, int *A) {\n    qsort(A, N, sizeof(int), compare);\n    \n    int happiness = 0;\n    for (int i = 0; i < M; i++) {\n        happiness += A[i] + A[N - 1 - i];\n    }\n    \n    return happiness;\n}\n\nint main() {\n    int N, M;\n    scanf(\"%d %d\", &N, &M);\n    \n    int *A = malloc(N * sizeof(int));\n    for (int i = 0; i < N; i++) {\n        scanf(\"%d\", &A[i]);\n    }\n    \n    int result = max_happiness(N, M, A);\n    printf(\"%d\\n\", result);\n    \n    free(A);\n    return 0;\n}",
    "timestamp": "2025-08-05 22:38:52"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    return (*(long long *)b - *(long long *)a);\n}\n\nint main() {\n    int N, M;\n    scanf(\"%d %d\", &N, &M);\n    long long A[N];\n    for (int i = 0; i < N; i++) {\n        scanf(\"%lld\", &A[i]);\n    }\n    qsort(A, N, sizeof(long long), compare);\n\n    long long prefix[N + 1];\n    prefix[0] = 0;\n    for (int i = 0; i < N; i++) {\n        prefix[i + 1] = prefix[i] + A[i];\n    }\n\n    long long max_happiness = 0;\n    for (int k = 0; k <= M; k++) {\n        if (k > N) break;\n        int pairs = M - k;\n        if (pairs < 0) pairs = 0;\n        if (2 * pairs > N - k) continue;\n        long long sum = 2 * prefix[pairs] + prefix[k + pairs] - prefix[pairs];\n        if (sum > max_happiness) {\n            max_happiness = sum;\n        }\n    }\n\n    printf(\"%lld\\n\", max_happiness);\n    return 0;\n}",
    "timestamp": "2025-08-05 22:39:09"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    int N, M;\n    cin >> N >> M;\n    vector<long long> A(N);\n    for (int i = 0; i < N; ++i) {\n        cin >> A[i];\n    }\n    sort(A.begin(), A.end());\n    \n    vector<long long> prefix(N + 1, 0);\n    for (int i = 0; i < N; ++i) {\n        prefix[i + 1] = prefix[i] + A[i];\n    }\n    \n    long long total = 0;\n    for (int i = 0; i < M; ++i) {\n        int x = N - 1 - (i / 2);\n        int y = N - 1 - ((i + 1) / 2);\n        total += A[x] + A[y];\n    }\n    \n    cout << total << endl;\n    return 0;\n}",
    "timestamp": "2025-08-05 22:39:53"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int M = sc.nextInt();\n        long[] A = new long[N];\n        for (int i = 0; i < N; i++) {\n            A[i] = sc.nextLong();\n        }\n        Arrays.sort(A);\n        \n        long[] prefixSum = new long[N + 1];\n        for (int i = 0; i < N; i++) {\n            prefixSum[i + 1] = prefixSum[i] + A[i];\n        }\n        \n        long total = 0;\n        int left = 0;\n        int right = N - 1;\n        while (left <= right && M > 0) {\n            if (A[left] + A[right] < A[right] + (right > 0 ? A[right - 1] : 0)) {\n                if (M >= 2 && right > left) {\n                    total += 2 * (A[left] + A[right]);\n                    M -= 2;\n                    left++;\n                    right--;\n                } else {\n                    total += A[left] + A[right];\n                    M--;\n                    left++;\n                }\n            } else {\n                total += A[right] + (right > 0 ? A[right - 1] : 0);\n                M--;\n                right--;\n                if (M > 0) {\n                    total += A[right + 1] + (right > 0 ? A[right - 1] : 0);\n                    M--;\n                    right--;\n                }\n            }\n        }\n        \n        System.out.println(total);\n    }\n}",
    "timestamp": "2025-08-05 22:40:47"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class MaxHappinessParty {\n    public static long maxHappiness(int N, int M, int[] A) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        for (int power : A) {\n            pq.offer(power);\n        }\n\n        long happiness = 0;\n        for (int i = 0; i < M; i++) {\n            if (pq.size() < 2) break;\n            int first = pq.poll();\n            int second = pq.poll();\n            happiness += first + second;\n            \n            if (first > second) {\n                pq.offer(first - second);\n            } else if (second > first) {\n                pq.offer(second - first);\n            }\n        }\n\n        return happiness;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int M = sc.nextInt();\n        int[] A = new int[N];\n        \n        for (int i = 0; i < N; i++) {\n            A[i] = sc.nextInt();\n        }\n\n        System.out.println(maxHappiness(N, M, A));\n        sc.close();\n    }\n}",
    "timestamp": "2025-08-05 22:40:51"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <queue>\n\nusing namespace std;\n\nint main() {\n    int N, M;\n    cin >> N >> M;\n    \n    vector<int> A(N);\n    for (int i = 0; i < N; i++) {\n        cin >> A[i];\n    }\n    \n    priority_queue<pair<int, pair<int, int>>> pq;\n    \n    for (int i = 0; i < N; i++) {\n        for (int j = i + 1; j < N; j++) {\n            pq.push({A[i] + A[j], {i, j}});\n        }\n    }\n    \n    vector<bool> used(N, false);\n    long long happiness = 0;\n    \n    for (int k = 0; k < M; k++) {\n        while (!pq.empty()) {\n            int maxHappiness = pq.top().first;\n            int x = pq.top().second.first;\n            int y = pq.top().second.second;\n            pq.pop();\n            \n            if (!used[x] && !used[y]) {\n                happiness += maxHappiness;\n                used[x] = true;\n                used[y] = true;\n                break;\n            }\n        }\n    }\n    \n    cout << happiness << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 22:40:56"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_happiness(n, m, powers):\n    powers.sort(reverse=True)\n    happiness = 0\n    handshake_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if handshake_count < m:\n                happiness += powers[i] + powers[j]\n                handshake_count += 1\n            else:\n                return happiness\n    return happiness\n\n# Example usage:\nn = 5\nm = 3\npowers = [5, 3, 8, 6, 7]\nprint(max_happiness(n, m, powers))  # Expected output for examples",
    "timestamp": "2025-08-13 12:01:48"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.Arrays;\n\npublic class MaxHappiness {\n    public static long maximizeHappiness(int N, int M, int[] A) {\n        Arrays.sort(A);\n        long happiness = 0;\n        for(int i = 0; i < M; i++) {\n            happiness += (long) A[N - 1 - i] + A[N - 2 - i];\n        }\n        return happiness;\n    }\n\n    public static void main(String[] args) {\n        int[] A = {20, 10, 30, 50, 40};\n        int N = A.length;\n        int M = 3;\n        System.out.println(maximizeHappiness(N, M, A)); // Output: 240\n    }\n}",
    "timestamp": "2025-08-13 12:01:50"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\n// Comparator function for sorting in descending order\nint compare(const void *a, const void *b) {\n    return (*(int*)b - *(int*)a);\n}\n\nint main() {\n    int N, M;\n    \n    // Read the number of ordinary guests and the number of handshakes\n    scanf(\"%d %d\", &N, &M);\n    \n    int A[N];\n    \n    // Read the power of each guest\n    for (int i = 0; i < N; i++) {\n        scanf(\"%d\", &A[i]);\n    }\n    \n    // Sort the powers in descending order\n    qsort(A, N, sizeof(int), compare);\n    \n    long long maxHappiness = 0;\n    \n    // Calculate the maximum happiness with the top M pairs of powers\n    for (int i = 0; i < M; i++) {\n        // Select the two highest available powers\n        maxHappiness += (long long)A[i * 2] + A[i * 2 + 1];\n    }\n    \n    // Output the result\n    printf(\"%lld\\n\", maxHappiness);\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 12:01:55"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function maxHappiness(N, M, powers) {\n  powers.sort((a, b) => b - a);\n  let happiness = 0;\n\n  const combinations = (n) => n * (n - 1) / 2;\n  const pairChoices = [];\n\n  for (let i = 0; i < N; i++) {\n    for (let j = i + 1; j < N; j++) {\n      pairChoices.push(powers[i] + powers[j]);\n    }\n  }\n\n  pairChoices.sort((a, b) => b - a);\n\n  for (let k = 0; k < M; k++) {\n    happiness += pairChoices[k];\n  }\n\n  return happiness;\n}\n// Example usage:\n// const N = 4;\n// const M = 2;\n// const powers = [1, 3, 2, 4];\n// console.log(maxHappiness(N, M, powers)); // Output: 12",
    "timestamp": "2025-08-13 12:01:57"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_party_happiness(N, M, A):\n    happiness = 0\n    used_guests = set()\n    \n    # Sort guests by power in descending order\n    guests = sorted([(power, idx) for idx, power in enumerate(A)], reverse=True)\n    \n    for _ in range(M):\n        # Find best left hand guest\n        left_guest = None\n        for guest in guests:\n            if guest[1] not in used_guests:\n                left_guest = guest\n                break\n        \n        # Find best right hand guest\n        right_guest = None\n        for guest in guests:\n            if guest[1] != left_guest[1] and guest[1] not in used_guests:\n                right_guest = guest\n                break\n        \n        # If no valid guests remain, break\n        if left_guest is None or right_guest is None:\n            break\n        \n        # Add happiness and mark guests as used\n        happiness += left_guest[0] + right_guest[0]\n        used_guests.add(left_guest[1])\n        used_guests.add(right_guest[1])\n    \n    return happiness\n\n# Read input\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Print result\nprint(max_party_happiness(N, M, A))",
    "timestamp": "2025-08-13 12:02:03"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function maximizeHappiness(N, M, A) {\n    A.sort((a, b) => b - a);\n    let totalHappiness = 0;\n    \n    for (let i = 0; i < M * 2; i += 2) {\n        if (i + 1 < N) {\n            totalHappiness += A[i] + A[i + 1];\n        }\n    }\n    \n    return totalHappiness;\n}\n\n// Example usage\nconst N = 4;  // Number of guests\nconst M = 2;  // Number of handshakes\nconst A = [4, 3, 1, 2];  // Powers of guests\n\nconsole.log(maximizeHappiness(N, M, A));",
    "timestamp": "2025-08-13 12:02:07"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import heapq\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    idx = 0\n    N = int(data[idx])\n    idx += 1\n    M = int(data[idx])\n    idx += 1\n    A = list(map(int, data[idx:idx+N]))\n    idx += N\n    \n    A.sort()\n    max_heap = []\n    # We use a max heap by pushing negative values\n    for num in A:\n        heapq.heappush(max_heap, -num)\n    \n    total = 0\n    selected = []\n    \n    for _ in range(M):\n        if not max_heap:\n            break\n        current = -heapq.heappop(max_heap)\n        total += current\n        selected.append(current - 1)  # Decrement by 1 for next possible use\n    \n    # Push back the decremented values\n    for num in selected:\n        if num > 0:\n            heapq.heappush(max_heap, -num)\n    \n    # Now, perform the remaining handshakes by pairing the largest available\n    for _ in range(M - len(selected)):\n        if len(max_heap) < 2:\n            break\n        a = -heapq.heappop(max_heap)\n        b = -heapq.heappop(max_heap)\n        total += a + b\n        # Decrement both and push back if still positive\n        a -= 1\n        b -= 1\n        if a > 0:\n            heapq.heappush(max_heap, -a)\n        if b > 0:\n            heapq.heappush(max_heap, -b)\n    \n    print(total)\n\nsolve()",
    "timestamp": "2025-08-13 12:02:18"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "js",
    "code": "function solve() {\n    const input = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\n    const [N, M] = input[0].split(' ').map(Number);\n    const A = input[1].split(' ').map(Number).sort((a, b) => a - b);\n    \n    let left = 0;\n    let right = N - 1;\n    let happiness = 0;\n    let count = 0;\n    \n    while (left <= right && count < M) {\n        if (A[left] + A[right] > A[right] + (right > left ? A[right - 1] : 0)) {\n            happiness += A[left] + A[right];\n            left++;\n            right--;\n        } else {\n            happiness += A[right] + A[right - 1];\n            right -= 2;\n        }\n        count++;\n    }\n    \n    console.log(happiness);\n}\n\nsolve();",
    "timestamp": "2025-08-13 12:02:24"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nlong long maximize_happiness(int N, int M, vector<int>& A) {\n    sort(A.begin(), A.end(), greater<int>());\n    long long happiness = 0;\n    for (int i = 0; i < M; ++i) {\n        happiness += A[i] + A[i + 1];\n    }\n    return happiness;\n}\n\nint main() {\n    int N, M;\n    cin >> N >> M;\n    vector<int> A(N);\n    for (int i = 0; i < N; ++i) {\n        cin >> A[i];\n    }\n\n    long long result = maximize_happiness(N, M, A);\n    cout << result << endl;\n    return 0;\n}",
    "timestamp": "2025-08-13 12:06:42"
  }
]