[
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_PAGES 100\n#define MAX_URL_LENGTH 100\n\ntypedef struct {\n    char url[MAX_URL_LENGTH];\n} Page;\n\ntypedef struct {\n    Page pages[MAX_PAGES];\n    int current;\n    int top;\n} BrowserHistory;\n\nvoid initBrowser(BrowserHistory *browser) {\n    browser->current = -1;\n    browser->top = -1;\n}\n\nvoid visitPage(BrowserHistory *browser, const char *url) {\n    if (browser->top == MAX_PAGES - 1) {\n        printf(\"History full\\n\");\n        return;\n    }\n    browser->current++;\n    browser->top = browser->current;\n    strcpy(browser->pages[browser->current].url, url);\n}\n\nvoid goBack(BrowserHistory *browser) {\n    if (browser->current <= 0) {\n        printf(\"Cannot go back\\n\");\n        return;\n    }\n    browser->current--;\n}\n\nvoid goForward(BrowserHistory *browser) {\n    if (browser->current >= browser->top) {\n        printf(\"Cannot go forward\\n\");\n        return;\n    }\n    browser->current++;\n}\n\nvoid showCurrentPage(BrowserHistory *browser) {\n    if (browser->current == -1) {\n        printf(\"No page visited\\n\");\n        return;\n    }\n    printf(\"%s\\n\", browser->pages[browser->current].url);\n}\n\nvoid interpretClick(BrowserHistory *browser, int x, int y) {\n    if (x >= 10 && x <= 50 && y >= 10 && y <= 30) {\n        // Back button clicked\n        goBack(browser);\n    } else if (x >= 60 && x <= 100 && y >= 10 && y <= 30) {\n        // Forward button clicked\n        goForward(browser);\n    } else if (x >= 110 && x <= 150 && y >= 10 && y <= 30) {\n        // Home button clicked\n        visitPage(browser, \"home.html\");\n    } else {\n        // Assume a link is clicked\n        char url[MAX_URL_LENGTH];\n        sprintf(url, \"page%d.html\", rand() % 100);\n        visitPage(browser, url);\n    }\n}\n\nint main() {\n    BrowserHistory browser;\n    initBrowser(&browser);\n\n    int x, y;\n    char operation[10];\n\n    while (1) {\n        scanf(\"%s\", operation);\n        if (strcmp(operation, \"click\") == 0) {\n            scanf(\"%d %d\", &x, &y);\n            interpretClick(&browser, x, y);\n        } else if (strcmp(operation, \"show\") == 0) {\n            showCurrentPage(&browser);\n        } else if (strcmp(operation, \"exit\") == 0) {\n            break;\n        } else {\n            printf(\"Unknown operation\\n\");\n        }\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:59:10"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\nclass WebPage {\n    String url;\n    Map<Point, String> linkMap;\n\n    public WebPage(String url) {\n        this.url = url;\n        this.linkMap = new HashMap<>();\n    }\n\n    public void addLink(Point coordinates, String targetUrl) {\n        linkMap.put(coordinates, targetUrl);\n    }\n}\n\nclass BrowserHistory {\n    private List<String> history;\n    private int currentIndex;\n    private Map<String, WebPage> pageRegistry;\n\n    public BrowserHistory() {\n        history = new ArrayList<>();\n        currentIndex = -1;\n        pageRegistry = new HashMap<>();\n    }\n\n    public void navigateTo(String url) {\n        // Truncate forward history if needed\n        while (history.size() > currentIndex + 1) {\n            history.remove(history.size() - 1);\n        }\n\n        history.add(url);\n        currentIndex++;\n    }\n\n    public String getCurrentPage() {\n        return currentIndex >= 0 ? history.get(currentIndex) : null;\n    }\n\n    public void back() {\n        if (currentIndex > 0) {\n            currentIndex--;\n        }\n    }\n\n    public void forward() {\n        if (currentIndex < history.size() - 1) {\n            currentIndex++;\n        }\n    }\n\n    public void handleClick(Point coordinates) {\n        String currentUrl = getCurrentPage();\n        if (currentUrl != null && pageRegistry.containsKey(currentUrl)) {\n            WebPage currentPage = pageRegistry.get(currentUrl);\n            for (Map.Entry<Point, String> link : currentPage.linkMap.entrySet()) {\n                if (isPointInClickArea(coordinates, link.getKey())) {\n                    navigateTo(link.getValue());\n                    break;\n                }\n            }\n        }\n    }\n\n    private boolean isPointInClickArea(Point click, Point linkPoint) {\n        // Simple implementation, can be expanded for more complex click detection\n        int threshold = 10;\n        return Math.abs(click.x - linkPoint.x) < threshold &&\n               Math.abs(click.y - linkPoint.y) < threshold;\n    }\n\n    public void registerPage(WebPage page) {\n        pageRegistry.put(page.url, page);\n    }\n}\n\nclass Point {\n    int x, y;\n\n    public Point(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\npublic class WebBrowserSimulator {\n    public static void main(String[] args) {\n        BrowserHistory browser = new BrowserHistory();\n\n        WebPage homePage = new WebPage(\"home.html\");\n        homePage.addLink(new Point(100, 200), \"about.html\");\n        homePage.addLink(new Point(300, 400), \"contact.html\");\n\n        WebPage aboutPage = new WebPage(\"about.html\");\n        aboutPage.addLink(new Point(50, 100), \"team.html\");\n\n        browser.registerPage(homePage);\n        browser.registerPage(aboutPage);\n\n        browser.navigateTo(\"home.html\");\n        browser.handleClick(new Point(100, 205));  // Navigate to about page\n        browser.back();  // Return to home page\n        browser.forward();  // Go to about page again\n    }\n}",
    "timestamp": "2025-08-05 18:59:22"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <map>\n\nusing namespace std;\n\nstruct Page {\n    string url;\n    map<pair<int, int>, string> clickableAreas; // (x, y) -> targetURL\n};\n\nvector<string> extractVisitedPages(const vector<string>& operations, const vector<Page>& pages) {\n    vector<string> visited;\n    stack<string> backStack;\n    stack<string> forwardStack;\n    string currentPage;\n\n    for (const auto& op : operations) {\n        if (op == \"BACK\") {\n            if (!backStack.empty()) {\n                forwardStack.push(currentPage);\n                currentPage = backStack.top();\n                backStack.pop();\n                visited.push_back(currentPage);\n            }\n        } else if (op == \"FORWARD\") {\n            if (!forwardStack.empty()) {\n                backStack.push(currentPage);\n                currentPage = forwardStack.top();\n                forwardStack.pop();\n                visited.push_back(currentPage);\n            }\n        } else if (op.find(\"CLICK\") != string::npos) {\n            int x, y;\n            sscanf(op.c_str(), \"CLICK %d %d\", &x, &y);\n            for (const auto& page : pages) {\n                if (page.url == currentPage) {\n                    for (const auto& area : page.clickableAreas) {\n                        if (area.first.first == x && area.first.second == y) {\n                            backStack.push(currentPage);\n                            currentPage = area.second;\n                            forwardStack = stack<string>(); // Clear forward stack\n                            visited.push_back(currentPage);\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } else {\n            // Initial page or direct navigation\n            if (!currentPage.empty()) {\n                backStack.push(currentPage);\n            }\n            currentPage = op;\n            forwardStack = stack<string>();\n            visited.push_back(currentPage);\n        }\n    }\n\n    return visited;\n}\n\nint main() {\n    int N, M;\n    cin >> N >> M;\n\n    vector<Page> pages(N);\n    for (int i = 0; i < N; ++i) {\n        cin >> pages[i].url;\n        int K;\n        cin >> K;\n        for (int j = 0; j < K; ++j) {\n            int x, y;\n            string target;\n            cin >> x >> y >> target;\n            pages[i].clickableAreas[{x, y}] = target;\n        }\n    }\n\n    vector<string> operations(M);\n    cin.ignore();\n    for (int i = 0; i < M; ++i) {\n        getline(cin, operations[i]);\n    }\n\n    vector<string> visited = extractVisitedPages(operations, pages);\n    for (const auto& page : visited) {\n        cout << page << endl;\n    }\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:59:46"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_PAGES 100\n#define MAX_PAGE_LENGTH 256\n#define MAX_HISTORY 50\n\ntypedef struct {\n    char url[MAX_PAGE_LENGTH];\n    int x, y;  // Click coordinates\n} Button;\n\ntypedef struct {\n    char pages[MAX_HISTORY][MAX_PAGE_LENGTH];\n    int current_index;\n    int total_pages;\n} BrowserHistory;\n\ntypedef struct {\n    char current_page[MAX_PAGE_LENGTH];\n    Button buttons[10];\n    int button_count;\n    BrowserHistory history;\n} Browser;\n\nvoid initialize_browser(Browser *browser) {\n    strcpy(browser->current_page, \"\");\n    browser->button_count = 0;\n    browser->history.current_index = -1;\n    browser->history.total_pages = 0;\n}\n\nvoid add_button(Browser *browser, const char *url, int x, int y) {\n    if (browser->button_count < 10) {\n        strcpy(browser->buttons[browser->button_count].url, url);\n        browser->buttons[browser->button_count].x = x;\n        browser->buttons[browser->button_count].y = y;\n        browser->button_count++;\n    }\n}\n\nvoid navigate(Browser *browser, const char *url) {\n    // Add current page to history before navigating\n    if (browser->history.current_index < MAX_HISTORY - 1) {\n        browser->history.current_index++;\n        strcpy(browser->history.pages[browser->history.current_index], url);\n        browser->history.total_pages = browser->history.current_index + 1;\n    }\n    \n    strcpy(browser->current_page, url);\n}\n\nvoid handle_click(Browser *browser, int x, int y) {\n    for (int i = 0; i < browser->button_count; i++) {\n        if (browser->buttons[i].x == x && browser->buttons[i].y == y) {\n            navigate(browser, browser->buttons[i].url);\n            return;\n        }\n    }\n}\n\nvoid go_back(Browser *browser) {\n    if (browser->history.current_index > 0) {\n        browser->history.current_index--;\n        strcpy(browser->current_page, browser->history.pages[browser->history.current_index]);\n    }\n}\n\nvoid go_forward(Browser *browser) {\n    if (browser->history.current_index < browser->history.total_pages - 1) {\n        browser->history.current_index++;\n        strcpy(browser->current_page, browser->history.pages[browser->history.current_index]);\n    }\n}\n\nvoid print_current_page(Browser *browser) {\n    printf(\"Current Page: %s\\n\", browser->current_page);\n}\n\nint main() {\n    Browser browser;\n    initialize_browser(&browser);\n\n    // Example usage\n    navigate(&browser, \"home.html\");\n    add_button(&browser, \"about.html\", 100, 200);\n    add_button(&browser, \"contact.html\", 200, 300);\n\n    handle_click(&browser, 100, 200);  // Goes to about.html\n    print_current_page(&browser);\n\n    go_back(&browser);  // Returns to home.html\n    print_current_page(&browser);\n\n    go_forward(&browser);  // Goes back to about.html\n    print_current_page(&browser);\n\n    return 0;\n}",
    "timestamp": "2025-08-05 18:59:57"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nclass WebPage {\npublic:\n    std::string url;\n    std::vector<std::pair<int, int>> buttons;\n\n    WebPage(std::string pageUrl) : url(pageUrl) {}\n\n    void addButton(int x, int y) {\n        buttons.push_back({x, y});\n    }\n\n    bool isButtonClicked(int x, int y) {\n        for (const auto& button : buttons) {\n            if (button.first == x && button.second == y) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n\nclass BrowserHistory {\nprivate:\n    std::vector<WebPage> history;\n    int currentIndex;\n    const int MAX_BUFFER_SIZE = 100;\n\npublic:\n    BrowserHistory() : currentIndex(-1) {}\n\n    void visit(const WebPage& page) {\n        if (currentIndex < history.size() - 1) {\n            history.erase(history.begin() + currentIndex + 1, history.end());\n        }\n        \n        history.push_back(page);\n        currentIndex++;\n\n        if (history.size() > MAX_BUFFER_SIZE) {\n            history.erase(history.begin());\n            currentIndex--;\n        }\n    }\n\n    WebPage* back() {\n        if (currentIndex > 0) {\n            currentIndex--;\n            return &history[currentIndex];\n        }\n        return nullptr;\n    }\n\n    WebPage* forward() {\n        if (currentIndex < history.size() - 1) {\n            currentIndex++;\n            return &history[currentIndex];\n        }\n        return nullptr;\n    }\n\n    WebPage* getCurrentPage() {\n        if (currentIndex >= 0 && currentIndex < history.size()) {\n            return &history[currentIndex];\n        }\n        return nullptr;\n    }\n\n    void processClick(int x, int y) {\n        WebPage* currentPage = getCurrentPage();\n        if (currentPage && currentPage->isButtonClicked(x, y)) {\n            WebPage newPage(currentPage->url + \"/linked_page\");\n            visit(newPage);\n        }\n    }\n};\n\nint main() {\n    BrowserHistory browser;\n\n    // Example usage\n    WebPage homePage(\"https://example.com\");\n    homePage.addButton(100, 200);\n    browser.visit(homePage);\n\n    WebPage aboutPage(\"https://example.com/about\");\n    aboutPage.addButton(50, 100);\n    browser.visit(aboutPage);\n\n    browser.processClick(100, 200);  // Simulates clicking a link\n    browser.back();  // Goes back to previous page\n    browser.forward();  // Goes forward again\n\n    return 0;\n}",
    "timestamp": "2025-08-05 19:00:07"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class BrowserHistory {\n    private Stack<String> backStack;\n    private Stack<String> forwardStack;\n    private String currentPage;\n    private List<String> visitedPages;\n\n    public BrowserHistory(String homepage) {\n        backStack = new Stack<>();\n        forwardStack = new Stack<>();\n        currentPage = homepage;\n        visitedPages = new ArrayList<>();\n        visitedPages.add(homepage);\n    }\n\n    public void click(int x, int y, String url) {\n        forwardStack.clear();\n        backStack.push(currentPage);\n        currentPage = url;\n        visitedPages.add(url);\n    }\n\n    public void back() {\n        if (!backStack.isEmpty()) {\n            forwardStack.push(currentPage);\n            currentPage = backStack.pop();\n            visitedPages.add(currentPage);\n        }\n    }\n\n    public void forward() {\n        if (!forwardStack.isEmpty()) {\n            backStack.push(currentPage);\n            currentPage = forwardStack.pop();\n            visitedPages.add(currentPage);\n        }\n    }\n\n    public String getCurrentPage() {\n        return currentPage;\n    }\n\n    public List<String> getVisitedPages() {\n        return new ArrayList<>(visitedPages);\n    }\n\n    public static void main(String[] args) {\n        BrowserHistory browser = new BrowserHistory(\"homepage.com\");\n        browser.click(100, 100, \"page1.com\");\n        browser.click(200, 200, \"page2.com\");\n        browser.back();\n        browser.forward();\n        browser.click(300, 300, \"page3.com\");\n\n        System.out.println(\"Visited Pages: \" + browser.getVisitedPages());\n        System.out.println(\"Current Page: \" + browser.getCurrentPage());\n    }\n}",
    "timestamp": "2025-08-05 19:00:58"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "class Browser:\n    def __init__(self):\n        self.history = []\n        self.current_index = -1\n\n    def click_link(self, url):\n        # Remove forward history if any\n        if self.current_index < len(self.history) - 1:\n            self.history = self.history[:self.current_index + 1]\n        # Add new page and move current index\n        self.history.append(url)\n        self.current_index += 1\n\n    def move_back(self):\n        if self.current_index > 0:\n            self.current_index -= 1\n\n    def move_forward(self):\n        if self.current_index < len(self.history) - 1:\n            self.current_index += 1\n\n    def show_current_page(self):\n        if self.current_index >= 0:\n            return self.history[self.current_index]\n        return None\n\ndef interpret_mouse_click(x, y, pages):\n    # Define buttons areas\n    LINK_BUTTON = (10, 100, 10, 50)\n    BACK_BUTTON = (0, 20, 100, 120)\n    FORWARD_BUTTON = (120, 140, 100, 120)\n    \n    if LINK_BUTTON[0] <= x <= LINK_BUTTON[1] and LINK_BUTTON[2] <= y <= LINK_BUTTON[3]:\n        return \"click_link\"\n    elif BACK_BUTTON[0] <= x <= BACK_BUTTON[1] and BACK_BUTTON[2] <= y <= BACK_BUTTON[3]:\n        return \"move_back\"\n    elif FORWARD_BUTTON[0] <= x <= FORWARD_BUTTON[1] and FORWARD_BUTTON[2] <= y <= FORWARD_BUTTON[3]:\n        return \"move_forward\"\n    return None\n\ndef extract_visited_pages(operations):\n    browser = Browser()\n    pages_visited = []\n\n    for op in operations:\n        action = interpret_mouse_click(op['x'], op['y'], op['pages'])\n        if action == \"click_link\":\n            browser.click_link(op['url'])\n        elif action == \"move_back\":\n            browser.move_back()\n        elif action == \"move_forward\":\n            browser.move_forward()\n\n        current_page = browser.show_current_page()\n        if current_page:\n            pages_visited.append(current_page)\n\n    return pages_visited\n\n# Example usage:\noperations = [\n    {'x': 15, 'y': 30, 'url': 'http://example.com/page1'},\n    {'x': 15, 'y': 30, 'url': 'http://example.com/page2'},\n    {'x': 10, 'y': 110},\n    {'x': 130, 'y': 110},\n    {'x': 15, 'y': 30, 'url': 'http://example.com/page3'}\n]\n\nvisited_pages = extract_visited_pages(operations)\nprint(visited_pages)",
    "timestamp": "2025-08-13 01:49:03"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.*;\n\nclass Browser {\n    private Stack<String> backStack = new Stack<>();\n    private Stack<String> forwardStack = new Stack<>();\n    private String currentPage = null;\n\n    public void visitPage(String url) {\n        if (currentPage != null) {\n            backStack.push(currentPage);\n        }\n        currentPage = url;\n        forwardStack.clear();\n        System.out.println(\"Visited: \" + currentPage);\n    }\n\n    public void clickLink(String url) {\n        visitPage(url);\n    }\n    \n    public void moveBack() {\n        if (!backStack.isEmpty()) {\n            forwardStack.push(currentPage);\n            currentPage = backStack.pop();\n            System.out.println(\"Moved back to: \" + currentPage);\n        } else {\n            System.out.println(\"No page in the history to move back to.\");\n        }\n    }\n    \n    public void moveForward() {\n        if (!forwardStack.isEmpty()) {\n            backStack.push(currentPage);\n            currentPage = forwardStack.pop();\n            System.out.println(\"Moved forward to: \" + currentPage);\n        } else {\n            System.out.println(\"No page in the history to move forward to.\");\n        }\n    }\n\n    public void showCurrentPage() {\n        if (currentPage != null) {\n            System.out.println(\"Current page: \" + currentPage);\n        } else {\n            System.out.println(\"No current page.\");\n        }\n    }\n    \n    public void interpretClick(int x, int y) {\n        if (x > 0 && x < 100 && y > 0 && y < 50) {\n            moveBack();\n        } else if (x > 0 && x < 100 && y > 50 && y < 100) {\n            moveForward();\n        } else if (x > 100 && x < 200 && y > 0 && y < 100) {\n            showCurrentPage();\n        } else {\n            System.out.println(\"Click does not correspond to any clickable area.\");\n        }\n    }\n    \n    public static void main(String[] args) {\n        Browser browser = new Browser();\n        browser.visitPage(\"http://example.com\");\n        browser.interpretClick(150, 30); // Should show the current page\n        browser.clickLink(\"http://example.com/about\");\n        browser.interpretClick(50, 20);  // Should move back to example.com\n        browser.interpretClick(50, 80);  // Should move forward to about\n    }\n}",
    "timestamp": "2025-08-13 01:49:09"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_PAGES 100\n#define WIDTH 100\n#define HEIGHT 100\n\ntypedef struct {\n    char *url;\n    int linkX;\n    int linkY;\n} Page;\n\nPage browserBuffer[MAX_PAGES];\nint currentPageIndex = -1;\n\nvoid click(int x, int y) {\n    if (currentPageIndex == -1)\n        return;\n\n    Page *currentPage = &browserBuffer[currentPageIndex];\n    if (x == currentPage->linkX && y == currentPage->linkY) {\n        if (currentPageIndex < MAX_PAGES - 1) {\n            currentPageIndex++;\n            browserBuffer[currentPageIndex].url = currentPage->url;\n        }\n    }\n}\n\nvoid back() {\n    if (currentPageIndex > 0) {\n        currentPageIndex--;\n    }\n}\n\nvoid forward() {\n    if (currentPageIndex < MAX_PAGES - 1 && browserBuffer[currentPageIndex + 1].url != NULL) {\n        currentPageIndex++;\n    }\n}\n\nvoid showCurrent() {\n    if (currentPageIndex >= 0)\n        printf(\"Current Page: %s\\n\", browserBuffer[currentPageIndex].url);\n}\n\nint main() {\n    // Initialize some pages with operations\n    browserBuffer[0] = (Page){\"homepage.html\", 50, 50};\n    browserBuffer[1] = (Page){\"aboutus.html\", 60, 60};\n    browserBuffer[2] = (Page){\"contact.html\", 70, 70};\n    \n    currentPageIndex = 0; // Start with homepage\n\n    // Sample operations\n    showCurrent();\n    click(50, 50);      // Clicks link on homepage\n    showCurrent();\n    \n    // Let's simulate going back and forth\n    back();\n    showCurrent();\n    forward();\n    showCurrent();\n\n    // Simulate another click on page2's coordinates\n    click(60, 60);\n    showCurrent();\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 01:49:16"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "class BrowserHistory:\n    def __init__(self, initial_page):\n        self.history = [initial_page]\n        self.current_index = 0\n\n    def click_link(self, new_page):\n        # Remove forward history when a new link is clicked\n        self.history = self.history[:self.current_index + 1]\n        self.history.append(new_page)\n        self.current_index += 1\n        return new_page\n\n    def go_back(self):\n        if self.current_index > 0:\n            self.current_index -= 1\n        return self.history[self.current_index]\n\n    def go_forward(self):\n        if self.current_index < len(self.history) - 1:\n            self.current_index += 1\n        return self.history[self.current_index]\n\n    def current_page(self):\n        return self.history[self.current_index]\n\nclass WebPage:\n    def __init__(self, url):\n        self.url = url\n        self.links = {}\n\n    def add_link(self, x, y, width, height, destination_url):\n        self.links[(x, y, width, height)] = destination_url\n\n    def check_link_click(self, click_x, click_y):\n        for (x, y, width, height), destination in self.links.items():\n            if (x <= click_x <= x + width and \n                y <= click_y <= y + height):\n                return destination\n        return None\n\ndef browser_navigation_simulation():\n    # Create initial pages\n    home_page = WebPage(\"home.html\")\n    products_page = WebPage(\"products.html\")\n    contact_page = WebPage(\"contact.html\")\n\n    # Define link areas\n    home_page.add_link(50, 100, 100, 50, \"products.html\")\n    home_page.add_link(200, 100, 100, 50, \"contact.html\")\n    \n    products_page.add_link(50, 200, 100, 50, \"home.html\")\n    contact_page.add_link(50, 200, 100, 50, \"home.html\")\n\n    # Initialize browser history\n    browser = BrowserHistory(home_page)\n\n    # Simulate navigation\n    def navigate(page, click_x, click_y):\n        link_destination = page.check_link_click(click_x, click_y)\n        if link_destination:\n            for web_page in [home_page, products_page, contact_page]:\n                if web_page.url == link_destination:\n                    return browser.click_link(web_page)\n        return page\n\n    # Example navigation sequence\n    current_page = browser.current_page()\n    current_page = navigate(current_page, 75, 125)  # Click Products link\n    current_page = navigate(current_page, 75, 225)  # Click Back to Home\n    current_page = browser.go_back()  # Programmatic back\n    current_page = browser.go_forward()  # Programmatic forward\n\n    return browser.history",
    "timestamp": "2025-08-13 01:49:35"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import sys\n\ndef main():\n    operations = sys.stdin.read().splitlines()\n    history = []\n    current_page = None\n    forward_stack = []\n    \n    for op in operations:\n        if op.startswith('click'):\n            parts = op.split()\n            x, y = map(int, parts[1:3])\n            if current_page is not None:\n                if 10 <= x <= 50 and 10 <= y <= 30:  # Back button\n                    if len(history) > 1:\n                        forward_stack.append(history.pop())\n                        current_page = history[-1]\n                elif 60 <= x <= 100 and 10 <= y <= 30:  # Forward button\n                    if forward_stack:\n                        history.append(forward_stack.pop())\n                        current_page = history[-1]\n                elif 110 <= x <= 150 and 10 <= y <= 30:  # Refresh button\n                    pass  # No page change\n                else:  # Click on a link\n                    new_page = f\"page{len(history) + 1}\"\n                    history.append(new_page)\n                    current_page = new_page\n                    forward_stack = []\n        elif op.startswith('show'):\n            if current_page is not None:\n                print(current_page)\n\nif __name__ == \"__main__\":\n    main()",
    "timestamp": "2025-08-13 01:49:55"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <stack>\n\nclass Browser {\n    std::stack<std::string> backStack;\n    std::stack<std::string> forwardStack;\n    std::string currentPage;\n    std::map<std::string, std::pair<int, int>> coordsToPage; // Maps coordinates input to linked page\n\npublic:\n    Browser() : currentPage(\"\") {}\n\n    void visitNewPage(const std::string& pageUrl) {\n        if (!currentPage.empty()) {\n            backStack.push(currentPage);\n        }\n        currentPage = pageUrl;\n        while (!forwardStack.empty()) forwardStack.pop();\n    }\n\n    void moveBack() {\n        if (!backStack.empty()) {\n            forwardStack.push(currentPage);\n            currentPage = backStack.top();\n            backStack.pop();\n        }\n    }\n\n    void moveForward() {\n        if (!forwardStack.empty()) {\n            backStack.push(currentPage);\n            currentPage = forwardStack.top();\n            forwardStack.pop();\n        }\n    }\n\n    void clickOnCoords(int x, int y) {\n        if (coordsToPage.count(currentPage + std::to_string(x) + ',' + std::to_string(y)) > 0) {\n            visitNewPage(coordsToPage[currentPage + std::to_string(x) + ',' + std::to_string(y)].first);\n        }\n    }\n\n    std::string showCurrentPage() const {\n        return currentPage;\n    }\n\n    void mapCoordsToNewPage(const std::string& currentPage, int x, int y, const std::string& newPage) {\n        coordsToPage[currentPage + std::to_string(x) + ',' + std::to_string(y)] = {newPage, 0};\n    }\n};\n\nint main() {\n    Browser browser;\n\n    // Sample initialization (to be replaced with actual data as needed)\n    browser.mapCoordsToNewPage(\"homepage\", 100, 200, \"page1\");\n    browser.mapCoordsToNewPage(\"page1\", 300, 400, \"page2\");\n    \n    // Operations:\n    browser.visitNewPage(\"homepage\"); // Browser opens and navigates to homepage first\n    std::cout << browser.showCurrentPage() << std::endl;\n\n    browser.clickOnCoords(100, 200); // Click to navigate to page1\n    std::cout << browser.showCurrentPage() << std::endl;\n\n    browser.clickOnCoords(300, 400); // Click to navigate to page2\n    std::cout << browser.showCurrentPage() << std::endl;\n\n    browser.moveBack(); // Move back to page1\n    std::cout << browser.showCurrentPage() << std::endl;\n\n    browser.moveBack(); // Move back to homepage\n    std::cout << browser.showCurrentPage() << std::endl;\n\n    browser.moveForward(); // Move forward to page1\n    std::cout << browser.showCurrentPage() << std::endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-13 11:02:27"
  }
]