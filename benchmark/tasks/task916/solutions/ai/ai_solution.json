[
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n\nint solve(int N, int* a) {\n    int maxScore = INT_MIN;\n    \n    for (int mask = 0; mask < (1 << (3*N)); mask++) {\n        if (__builtin_popcount(mask) != N) continue;\n        \n        int* b = malloc(2*N * sizeof(int));\n        int bi = 0;\n        \n        for (int i = 0; i < 3*N; i++) {\n            if (!(mask & (1 << i))) {\n                b[bi++] = a[i];\n            }\n        }\n        \n        int firstHalfSum = 0, secondHalfSum = 0;\n        for (int i = 0; i < N; i++) {\n            firstHalfSum += b[i];\n        }\n        for (int i = N; i < 2*N; i++) {\n            secondHalfSum += b[i];\n        }\n        \n        maxScore = max(maxScore, firstHalfSum - secondHalfSum);\n        free(b);\n    }\n    \n    return maxScore;\n}\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    \n    int* a = malloc(3*N * sizeof(int));\n    for (int i = 0; i < 3*N; i++) {\n        scanf(\"%d\", &a[i]);\n    }\n    \n    int result = solve(N, a);\n    printf(\"%d\\n\", result);\n    \n    free(a);\n    return 0;\n}",
    "timestamp": "2025-08-05 23:19:16"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n\ntypedef long long ll;\n\nll max(ll a, ll b) {\n    return a > b ? a : b;\n}\n\nint compare_desc(const void *a, const void *b) {\n    return (*(ll *)b - *(ll *)a);\n}\n\nint compare_asc(const void *a, const void *b) {\n    return (*(ll *)a - *(ll *)b);\n}\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    int size = 3 * N;\n    ll *a = (ll *)malloc(size * sizeof(ll));\n    for (int i = 0; i < size; i++) {\n        scanf(\"%lld\", &a[i]);\n    }\n\n    ll *left_sum = (ll *)malloc((N + 1) * sizeof(ll));\n    ll *right_sum = (ll *)malloc((N + 1) * sizeof(ll));\n    ll *heap = (ll *)malloc(N * sizeof(ll));\n    ll current_sum = 0;\n\n    for (int i = 0; i < N; i++) {\n        heap[i] = a[i];\n        current_sum += a[i];\n    }\n    qsort(heap, N, sizeof(ll), compare_asc);\n    left_sum[0] = current_sum;\n\n    for (int i = N; i < 2 * N; i++) {\n        if (a[i] > heap[0]) {\n            current_sum += a[i] - heap[0];\n            heap[0] = a[i];\n            qsort(heap, N, sizeof(ll), compare_asc);\n        }\n        left_sum[i - N + 1] = current_sum;\n    }\n\n    current_sum = 0;\n    for (int i = 3 * N - 1; i >= 2 * N; i--) {\n        heap[3 * N - 1 - i] = a[i];\n        current_sum += a[i];\n    }\n    qsort(heap, N, sizeof(ll), compare_desc);\n    right_sum[N] = current_sum;\n\n    for (int i = 2 * N - 1; i >= N; i--) {\n        if (a[i] < heap[0]) {\n            current_sum += a[i] - heap[0];\n            heap[0] = a[i];\n            qsort(heap, N, sizeof(ll), compare_desc);\n        }\n        right_sum[i - N] = current_sum;\n    }\n\n    ll max_score = LLONG_MIN;\n    for (int i = 0; i <= N; i++) {\n        max_score = max(max_score, left_sum[i] - right_sum[i]);\n    }\n\n    printf(\"%lld\\n\", max_score);\n\n    free(a);\n    free(left_sum);\n    free(right_sum);\n    free(heap);\n    return 0;\n}",
    "timestamp": "2025-08-05 23:19:43"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <climits>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    vector<long long> a(3 * N);\n    for (int i = 0; i < 3 * N; ++i) {\n        cin >> a[i];\n    }\n\n    vector<long long> left_sum(N + 1, 0);\n    priority_queue<long long, vector<long long>, greater<long long>> left_heap;\n    for (int i = 0; i < N; ++i) {\n        left_sum[0] += a[i];\n        left_heap.push(a[i]);\n    }\n    for (int k = 1; k <= N; ++k) {\n        left_sum[k] = left_sum[k - 1] + a[N + k - 1] - left_heap.top();\n        left_heap.pop();\n        left_heap.push(a[N + k - 1]);\n    }\n\n    vector<long long> right_sum(N + 1, 0);\n    priority_queue<long long> right_heap;\n    for (int i = 2 * N; i < 3 * N; ++i) {\n        right_sum[0] += a[i];\n        right_heap.push(a[i]);\n    }\n    for (int k = 1; k <= N; ++k) {\n        right_sum[k] = right_sum[k - 1] + a[2 * N - k] - right_heap.top();\n        right_heap.pop();\n        right_heap.push(a[2 * N - k]);\n    }\n\n    long long max_score = -LLONG_MAX;\n    for (int k = 0; k <= N; ++k) {\n        max_score = max(max_score, left_sum[k] - right_sum[N - k]);\n    }\n\n    cout << max_score << endl;\n\n    return 0;\n}",
    "timestamp": "2025-08-05 23:19:59"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int[] a = new int[3 * N];\n        for (int i = 0; i < 3 * N; i++) {\n            a[i] = sc.nextInt();\n        }\n        \n        PriorityQueue<Integer> leftHeap = new PriorityQueue<>();\n        long leftSum = 0;\n        for (int i = 0; i < N; i++) {\n            leftHeap.add(a[i]);\n            leftSum += a[i];\n        }\n        \n        long[] leftMax = new long[3 * N];\n        leftMax[N - 1] = leftSum;\n        for (int i = N; i < 2 * N; i++) {\n            leftHeap.add(a[i]);\n            leftSum += a[i];\n            int min = leftHeap.poll();\n            leftSum -= min;\n            leftMax[i] = leftSum;\n        }\n        \n        PriorityQueue<Integer> rightHeap = new PriorityQueue<>(Collections.reverseOrder());\n        long rightSum = 0;\n        for (int i = 3 * N - 1; i >= 2 * N; i--) {\n            rightHeap.add(a[i]);\n            rightSum += a[i];\n        }\n        \n        long[] rightMin = new long[3 * N];\n        rightMin[2 * N] = rightSum;\n        for (int i = 2 * N - 1; i >= N; i--) {\n            rightHeap.add(a[i]);\n            rightSum += a[i];\n            int max = rightHeap.poll();\n            rightSum -= max;\n            rightMin[i] = rightSum;\n        }\n        \n        long maxScore = Long.MIN_VALUE;\n        for (int i = N; i <= 2 * N; i++) {\n            long current = leftMax[i - 1] - rightMin[i];\n            if (current > maxScore) {\n                maxScore = current;\n            }\n        }\n        \n        System.out.println(maxScore);\n    }\n}",
    "timestamp": "2025-08-05 23:20:19"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "Java",
    "code": "import java.util.*;\nimport java.io.*;\n\npublic class Solution {\n    public static void solve(int N, int[] a) {\n        int[] prefixSum = new int[3*N + 1];\n        for (int i = 1; i <= 3*N; i++) {\n            prefixSum[i] = prefixSum[i-1] + a[i-1];\n        }\n        \n        int maxScore = Integer.MIN_VALUE;\n        \n        for (int mask = 0; mask < (1 << (3*N)); mask++) {\n            if (Integer.bitCount(mask) != N) continue;\n            \n            ArrayList<Integer> remainingSequence = new ArrayList<>();\n            for (int i = 0; i < 3*N; i++) {\n                if ((mask & (1 << i)) == 0) {\n                    remainingSequence.add(a[i]);\n                }\n            }\n            \n            if (remainingSequence.size() != 2*N) continue;\n            \n            int firstHalfSum = 0;\n            int secondHalfSum = 0;\n            \n            for (int i = 0; i < N; i++) {\n                firstHalfSum += remainingSequence.get(i);\n            }\n            \n            for (int i = N; i < 2*N; i++) {\n                secondHalfSum += remainingSequence.get(i);\n            }\n            \n            maxScore = Math.max(maxScore, firstHalfSum - secondHalfSum);\n        }\n        \n        System.out.println(maxScore);\n    }\n    \n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        \n        int N = Integer.parseInt(st.nextToken());\n        st = new StringTokenizer(br.readLine());\n        \n        int[] a = new int[3*N];\n        for (int i = 0; i < 3*N; i++) {\n            a[i] = Integer.parseInt(st.nextToken());\n        }\n        \n        solve(N, a);\n    }\n}",
    "timestamp": "2025-08-05 23:20:27"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "C++",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    \n    vector<int> a(3*N);\n    for (int i = 0; i < 3*N; i++) {\n        cin >> a[i];\n    }\n    \n    int max_score = INT_MIN;\n    \n    for (int mask = 0; mask < (1 << (3*N)); mask++) {\n        if (__builtin_popcount(mask) != N) continue;\n        \n        vector<int> b;\n        for (int i = 0; i < 3*N; i++) {\n            if ((mask & (1 << i)) == 0) {\n                b.push_back(a[i]);\n            }\n        }\n        \n        int first_half_sum = 0, second_half_sum = 0;\n        for (int i = 0; i < N; i++) {\n            first_half_sum += b[i];\n        }\n        for (int i = N; i < 2*N; i++) {\n            second_half_sum += b[i];\n        }\n        \n        max_score = max(max_score, first_half_sum - second_half_sum);\n    }\n    \n    cout << max_score << endl;\n    \n    return 0;\n}",
    "timestamp": "2025-08-05 23:20:32"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import heapq\n\ndef max_score(N, a):\n    first_half_sum = sum(a[:N])\n    second_half_sum = sum(a[2*N:])\n    max_score = first_half_sum - second_half_sum\n\n    first_half_heap = a[:N]\n    second_half_heap = [-x for x in a[2*N:]]\n    heapq.heapify(first_half_heap)\n    heapq.heapify(second_half_heap)\n\n    first_half_prefix_sum = first_half_sum\n    second_half_prefix_sum = second_half_sum\n    first_half_sums = [first_half_sum]\n    second_half_sums = [second_half_sum]\n    \n    for i in range(N, 2*N):\n        # Maintain first N minimum elements in first half (heap)\n        first_half_prefix_sum += a[i]\n        if a[i] > first_half_heap[0]:\n            first_half_prefix_sum -= heapq.heappop(first_half_heap)\n            heapq.heappush(first_half_heap, a[i])\n        first_half_sums.append(first_half_prefix_sum)\n        \n        # Maintain first N maximum elements in second half (max-heap)\n        second_half_prefix_sum += a[i]\n        if -a[i] > second_half_heap[0]:\n            second_half_prefix_sum -= -heapq.heappop(second_half_heap)\n            heapq.heappush(second_half_heap, -a[i])\n        second_half_sums.append(second_half_prefix_sum)\n    \n    for fh, sh in zip(first_half_sums, second_half_sums[::-1]):\n        max_score = max(max_score, fh - sh)\n    \n    return max_score\n\n# Example usage:\nN = 2\na = [1, 2, 3, 4, 5, 6]\nprint(max_score(N, a))",
    "timestamp": "2025-08-13 14:49:07"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "java",
    "code": "import java.util.PriorityQueue;\n\npublic class MaxScore {\n\n    public static int maxScore(int N, int[] a) {\n        int[] prefixSum = new int[3 * N + 1];\n        for (int i = 0; i < 3 * N; i++) {\n            prefixSum[i + 1] = prefixSum[i] + a[i];\n        }\n\n        PriorityQueue<Integer> leftMaxHeap = new PriorityQueue<>();\n        PriorityQueue<Integer> rightMinHeap = new PriorityQueue<>((x, y) -> y - x);\n\n        int[] leftSum = new int[3 * N];\n        int[] rightSum = new int[3 * N];\n\n        for (int i = 0; i < N; i++) {\n            leftMaxHeap.add(a[i]);\n        }\n        leftSum[N - 1] = prefixSum[N];\n        \n        for (int i = N; i < 3 * N; i++) {\n            leftSum[i] = leftSum[i - 1];\n            if (a[i] > leftMaxHeap.peek()) {\n                leftSum[i] += a[i] - leftMaxHeap.poll();\n                leftMaxHeap.add(a[i]);\n            }\n        }\n\n        for (int i = 2 * N; i < 3 * N; i++) {\n            rightMinHeap.add(a[i]);\n        }\n        rightSum[2 * N] = prefixSum[3 * N] - prefixSum[2 * N];\n        \n        for (int i = 2 * N - 1; i >= 0; i--) {\n            rightSum[i] = rightSum[i + 1];\n            if (a[i] < rightMinHeap.peek()) {\n                rightSum[i] += rightMinHeap.poll() - a[i];\n                rightMinHeap.add(a[i]);\n            }\n        }\n\n        int maxScore = Integer.MIN_VALUE;\n        for (int i = N - 1; i < 2 * N; i++) {\n            maxScore = Math.max(maxScore, leftSum[i] - rightSum[i + 1]);\n        }\n\n        return maxScore;\n    }\n\n    public static void main(String[] args) {\n        int N = 3;\n        int[] a = {3, 1, 4, 1, 5, 9, 2, 6, 5};\n        System.out.println(maxScore(N, a)); // Example usage\n    }\n}",
    "timestamp": "2025-08-13 14:49:12"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MAXN 100000\n\ntypedef long long ll;\n\nint compare_desc(const void *a, const void *b) {\n    return (*(ll*)b - *(ll*)a);\n}\n\nint compare_asc(const void *a, const void *b) {\n    return (*(ll*)a - *(ll*)b);\n}\n\nint main() {\n    int N;\n    scanf(\"%d\", &N);\n    \n    ll a[3 * MAXN];\n    for (int i = 0; i < 3 * N; i++) {\n        scanf(\"%lld\", &a[i]);\n    }\n    \n    ll *prefix_sums = (ll*)malloc(sizeof(ll) * (2 * N + 1));\n    ll *suffix_sums = (ll*)malloc(sizeof(ll) * (2 * N + 1));\n    \n    ll left_priority[MAXN];\n    \n    ll min_heap[3 * MAXN];\n    int heap_size = 0;\n    ll prefix = 0;\n\n    for (int i = 0; i < N; i++) {\n        min_heap[heap_size++] = a[i];\n        prefix += a[i];\n    }\n    \n    qsort(min_heap, N, sizeof(ll), compare_asc);\n    \n    for (int i = N; i < 2 * N; i++) {\n        left_priority[i-N] = prefix;\n        prefix += a[i] - min_heap[0];\n        min_heap[0] = a[i];\n        \n        int index = 0;\n        while (index * 2 + 1 < heap_size) {\n            int j = index * 2 + 1;\n            if (j + 1 < heap_size && min_heap[j] > min_heap[j + 1]) {\n                j++;\n            }\n            if (min_heap[index] <= min_heap[j]) {\n                break;\n            }\n            ll temp = min_heap[index];\n            min_heap[index] = min_heap[j];\n            min_heap[j] = temp;\n            index = j;\n        }\n    }\n    left_priority[N] = prefix;\n    \n    ll max_heap[3 * MAXN];\n    heap_size = 0;\n    ll suffix = 0;\n    \n    for (int i = 2 * N; i < 3 * N; i++) {\n        max_heap[heap_size++] = a[i];\n        suffix += a[i];\n    }\n    \n    qsort(max_heap, N, sizeof(ll), compare_desc);\n    \n    for (int i = 2 * N - 1; i >= N; i--) {\n        suffix_sums[i-N] = suffix;\n        suffix += a[i] - max_heap[0];\n        max_heap[0] = a[i];\n        \n        int index = 0;\n        while (index * 2 + 1 < heap_size) {\n            int j = index * 2 + 1;\n            if (j + 1 < heap_size && max_heap[j] < max_heap[j + 1]) {\n                j++;\n            }\n            if (max_heap[index] >= max_heap[j]) {\n                break;\n            }\n            ll temp = max_heap[index];\n            max_heap[index] = max_heap[j];\n            max_heap[j] = temp;\n            index = j;\n        }\n    }\n    suffix_sums[N] = suffix;\n    \n    ll max_score = -(1LL << 60);\n    for (int i = 0; i <= N; i++) {\n        ll score = left_priority[i] - suffix_sums[i];\n        if (score > max_score) {\n            max_score = score;\n        }\n    }\n    \n    printf(\"%lld\\n\", max_score);\n    \n    free(prefix_sums);\n    free(suffix_sums);\n    \n    return 0;\n}",
    "timestamp": "2025-08-13 14:49:20"
  },
  {
    "model": "gpt-4o",
    "prompt_type": "zero_shot",
    "language": "c++",
    "code": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <algorithm>\n\nusing namespace std;\n\nlong long maxScore(int N, vector<long long>& a) {\n    vector<long long> prefixSum(N+1, 0), suffixSum(N+1, 0);\n    priority_queue<long long, vector<long long>, greater<long long>> minHeap;\n    priority_queue<long long> maxHeap;\n\n    long long sum = 0;\n    for (int i = 0; i < N; ++i) {\n        minHeap.push(a[i]);\n        sum += a[i];\n    }\n    prefixSum[0] = sum;\n    for (int i = N; i < 2 * N; ++i) {\n        minHeap.push(a[i]);\n        sum += a[i] - minHeap.top();\n        minHeap.pop();\n        prefixSum[i - N + 1] = sum;\n    }\n\n    sum = 0;\n    for (int i = 3 * N - 1; i >= 2 * N; --i) {\n        maxHeap.push(a[i]);\n        sum += a[i];\n    }\n    suffixSum[0] = sum;\n    for (int i = 2 * N - 1; i >= N; --i) {\n        maxHeap.push(a[i]);\n        sum += a[i] - maxHeap.top();\n        maxHeap.pop();\n        suffixSum[2 * N - i] = sum;\n    }\n\n    long long maxScore = LLONG_MIN;\n    for (int k = 0; k <= N; ++k) {\n        maxScore = max(maxScore, prefixSum[k] - suffixSum[N - k]);\n    }\n\n    return maxScore;\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<long long> a(3 * N);\n    for (int i = 0; i < 3 * N; ++i) {\n        cin >> a[i];\n    }\n    cout << maxScore(N, a) << endl;\n    return 0;\n}",
    "timestamp": "2025-08-13 14:49:25"
  },
  {
    "model": "claude-3-5-haiku-20241022",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "def max_sequence_score(a):\n    N = len(a) // 3\n    max_score = float('-inf')\n    \n    # Try removing N elements at all possible positions\n    for mask in range(1 << (3*N)):\n        if bin(mask).count('1') != N:\n            continue\n        \n        new_seq = []\n        for i in range(3*N):\n            if not (mask & (1 << i)):\n                new_seq.append(a[i])\n        \n        # Check sequence length is correct\n        if len(new_seq) != 2*N:\n            continue\n        \n        # Calculate score\n        first_half = new_seq[:N]\n        second_half = new_seq[N:]\n        score = sum(first_half) - sum(second_half)\n        max_score = max(max_score, score)\n    \n    return max_score\n\n# Input handling\nN = int(input())\na = list(map(int, input().split()))\nprint(max_sequence_score(a))",
    "timestamp": "2025-08-13 14:49:36"
  },
  {
    "model": "deepseek-v3",
    "prompt_type": "zero_shot",
    "language": "python",
    "code": "import heapq\n\ndef solve():\n    import sys\n    N = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    \n    # First half: maximize sum of first N elements\n    first_part = a[:2*N]\n    max_heap = []\n    sum_first = 0\n    for num in first_part[:N]:\n        sum_first += num\n        heapq.heappush(max_heap, num)\n    \n    min_first = [0] * (N + 1)\n    min_first[0] = sum_first\n    for i in range(N, 2*N):\n        num = first_part[i]\n        if num > max_heap[0]:\n            popped = heapq.heappop(max_heap)\n            sum_first += num - popped\n            heapq.heappush(max_heap, num)\n        min_first[i - N + 1] = sum_first\n    \n    # Second half: minimize sum of last N elements\n    second_part = a[N:]\n    min_heap = []\n    sum_second = 0\n    for num in second_part[:N]:\n        sum_second += num\n        heapq.heappush(min_heap, -num)\n    \n    max_second = [0] * (N + 1)\n    max_second[N] = sum_second\n    for i in range(N, 2*N):\n        num = second_part[i]\n        if num < -min_heap[0]:\n            popped = -heapq.heappop(min_heap)\n            sum_second += num - popped\n            heapq.heappush(min_heap, -num)\n        max_second[i - N] = sum_second\n    \n    max_score = -float('inf')\n    for i in range(N, 2*N + 1):\n        j = i - N\n        current = min_first[i - N] - max_second[j]\n        if current > max_score:\n            max_score = current\n    \n    print(max_score)\n\nsolve()",
    "timestamp": "2025-08-13 14:49:47"
  }
]